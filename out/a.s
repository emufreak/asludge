
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #115203,d0
       8:	       subi.l #115203,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1c203 <__fini_array_end>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #115203,d0
      40:	       subi.l #115203,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1c203 <__fini_array_end>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 75ae <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #115203,d0
      7e:	       subi.l #115203,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1c203 <__fini_array_end>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 13cbe <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1c9a8 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 13cd6 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1c204 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 13cbe <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1c9a8 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 1c204 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 13cbe <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1c9a8 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 17d00 <PutChar+0x4>
     35c:	|  |              |   jsr 17232 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1c9b0 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1c9b0 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1c9b0 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1c9b0 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1c9b0 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1c9b0 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1c9b0 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 17d2a <PutChar+0x2e>
     834:	|   jsr 17232 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1c9b0 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 17d46 <PutChar+0x4a>
     8a6:	|   jsr 17232 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1c9b0 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1c9b0 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1c9b0 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1c9b0 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1c9b0 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1c9b0 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1c9b0 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1c9b0 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1c9a8 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1c9b0 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 13cbe <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1c9b0 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1c8ae <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	/-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1c8ae <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1c8ae <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1c8ae <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1c8ae <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1c968 <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1c8ae <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1c8ae <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1c964 <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1c8ae <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1c8ae <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 13ee <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	\-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1c8ae <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 9904 <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1c8ae <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1c8b2 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1c8b6 <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 2d2e <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     e0e:	          lea -16(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 17d6e <PutChar+0x72>
     e1a:	          jsr 17232 <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1c8ca <CstBackDrop>,d0
     e28:	      /-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 17d87 <PutChar+0x8b>
     e30:	      |   jsr 17232 <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	/-----|-- bra.w fc6 <CstBlankScreen+0x1b8>
  }

  CstPaletteLoaded = 0;
     e3c:	|     \-> clr.w 1c8c4 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,8(sp)

  width /= 16;
     e4a:	|         move.l 24(sp),d0
     e4e:	|         movea.l d0,a0
     e50:	|         cmpa.w #0,a0
     e54:	|     /-- bge.s e5a <CstBlankScreen+0x4c>
     e56:	|     |   lea 15(a0),a0
     e5a:	|     \-> move.l a0,d0
     e5c:	|         asr.l #4,d0
     e5e:	|         move.l d0,24(sp)

  WaitBlit();
     e62:	|         move.l 1c9b4 <GfxBase>,d0
     e68:	|         movea.l d0,a6
     e6a:	|         jsr -228(a6)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e6e:	|         movea.l 8(sp),a0
     e72:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e78:	|         movea.l 8(sp),a0
     e7c:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e82:	|         movea.l 8(sp),a0
     e86:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e8c:	|         movea.l 8(sp),a0
     e90:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     e96:	|         movea.l 8(sp),a0
     e9a:	|         move.w #0,96(a0)
  custom->bltdmod = 0;
     ea0:	|         movea.l 8(sp),a0
     ea4:	|         move.w #0,102(a0)
  custom->bltcon1 = 0;
     eaa:	|         movea.l 8(sp),a0
     eae:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     eb4:	|         movea.l 8(sp),a0
     eb8:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ebe:	|         move.l 1c8ca <CstBackDrop>,d0
     ec4:	|         move.l d0,16(sp)
  UWORD bltsize = height*64+width;    
     ec8:	|         move.l 28(sp),d0
     ecc:	|         lsl.w #6,d0
     ece:	|         move.l 24(sp),d1
     ed2:	|         movea.w d0,a0
     ed4:	|         adda.w d1,a0
     ed6:	|         move.w a0,6(sp)
  UWORD blitsize = width*height*2;
     eda:	|         move.l 24(sp),d1
     ede:	|         move.l 28(sp),d0
     ee2:	|         muls.w d1,d0
     ee4:	|         add.w d0,d0
     ee6:	|         move.w d0,4(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     eea:	|         pea 17db5 <PutChar+0xb9>
     ef0:	|         jsr 17232 <KPrintF>
     ef6:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     ef8:	|         clr.l 12(sp)
     efc:	|     /-- bra.s f2e <CstBlankScreen+0x120>
  {            
    custom->bltdpt = (APTR) bltdpt;
     efe:	|  /--|-> move.l 16(sp),d0
     f02:	|  |  |   movea.l 8(sp),a0
     f06:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f0a:	|  |  |   movea.l 8(sp),a0
     f0e:	|  |  |   move.w 6(sp),88(a0)
    WaitBlit();
     f14:	|  |  |   move.l 1c9b4 <GfxBase>,d0
     f1a:	|  |  |   movea.l d0,a6
     f1c:	|  |  |   jsr -228(a6)
    bltdpt += blitsize;
     f20:	|  |  |   moveq #0,d0
     f22:	|  |  |   move.w 4(sp),d0
     f26:	|  |  |   add.l d0,16(sp)
  for(int i2=0;i2<5;i2++)
     f2a:	|  |  |   addq.l #1,12(sp)
     f2e:	|  |  \-> moveq #4,d0
     f30:	|  |      cmp.l 12(sp),d0
     f34:	|  \----- bge.s efe <CstBlankScreen+0xf0>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f36:	|         pea 17dd5 <PutChar+0xd9>
     f3c:	|         jsr 17232 <KPrintF>
     f42:	|         addq.l #4,sp

  CstApplyBackDropCounter = 2;
     f44:	|         move.w #2,1c8d6 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
     f4c:	|         move.l 1c8fc <winWidth>,d0
     f52:	|         lsr.l #4,d0
     f54:	|         movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
     f5a:	|         move.l a0,d1
     f5c:	|         addq.l #2,d1
     f5e:	|         move.l d1,1c8ec <CstBackDropBufferApplyCursor>
     f64:	|         move.l d0,d0
     f66:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
     f68:	|         move.l 1c900 <winHeight>,d0
     f6e:	|         movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
     f74:	|         move.l a0,d1
     f76:	|         addq.l #2,d1
     f78:	|         move.l d1,1c8ec <CstBackDropBufferApplyCursor>
     f7e:	|         move.l d0,d0
     f80:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f82:	|         movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
     f88:	|         move.l a0,d0
     f8a:	|         addq.l #2,d0
     f8c:	|         move.l d0,1c8ec <CstBackDropBufferApplyCursor>
     f92:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f94:	|         movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
     f9a:	|         move.l a0,d0
     f9c:	|         addq.l #2,d0
     f9e:	|         move.l d0,1c8ec <CstBackDropBufferApplyCursor>
     fa4:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fa6:	|         movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
     fac:	|         move.l a0,d0
     fae:	|         addq.l #2,d0
     fb0:	|         move.l d0,1c8ec <CstBackDropBufferApplyCursor>
     fb6:	|         clr.w (a0)

  KPrintF("CstBlankScreen: end\n");
     fb8:	|         pea 17df5 <PutChar+0xf9>
     fbe:	|         jsr 17232 <KPrintF>
     fc4:	|         addq.l #4,sp


}
     fc6:	\-------> movea.l (sp)+,a6
     fc8:	          lea 16(sp),sp
     fcc:	          rts

00000fce <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     fce:	       lea -52(sp),sp
     fd2:	       move.l a6,-(sp)
     fd4:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     fd6:	       move.l #400,32(sp)
     fde:	       moveq #2,d0
     fe0:	       move.l d0,28(sp)
     fe4:	       move.l 1c9a8 <SysBase>,d0
     fea:	       movea.l d0,a6
     fec:	       move.l 32(sp),d0
     ff0:	       move.l 28(sp),d1
     ff4:	       jsr -198(a6)
     ff8:	       move.l d0,24(sp)
     ffc:	       move.l 24(sp),d0
    1000:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1004:	   /-- bne.s 102e <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1006:	   |   pea 28 <_start+0x28>
    100a:	   |   pea 17e0a <PutChar+0x10e>
    1010:	   |   jsr 17232 <KPrintF>
    1016:	   |   addq.l #8,sp
    Exit(1);
    1018:	   |   moveq #1,d1
    101a:	   |   move.l d1,16(sp)
    101e:	   |   move.l 1c9b0 <DOSBase>,d0
    1024:	   |   movea.l d0,a6
    1026:	   |   move.l 16(sp),d1
    102a:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    102e:	   \-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1034:	       move.l 56(sp),1c8f8 <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    103c:	       move.l #115206,52(sp)
  for(int i=0; i<16;i++)
    1044:	       clr.l 48(sp)
    1048:	   /-- bra.s 106e <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    104a:	/--|-> move.l 52(sp),d1
    104e:	|  |   move.l d1,d2
    1050:	|  |   addq.l #4,d2
    1052:	|  |   move.l d2,52(sp)
    1056:	|  |   move.l 56(sp),d0
    105a:	|  |   move.l d0,d2
    105c:	|  |   addq.l #4,d2
    105e:	|  |   move.l d2,56(sp)
    1062:	|  |   movea.l d1,a0
    1064:	|  |   move.l (a0),d1
    1066:	|  |   movea.l d0,a0
    1068:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    106a:	|  |   addq.l #1,48(sp)
    106e:	|  \-> moveq #15,d0
    1070:	|      cmp.l 48(sp),d0
    1074:	\----- bge.s 104a <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1076:	       move.l #115270,52(sp)

  for(int i=0; i<12;i++)
    107e:	       clr.l 44(sp)
    1082:	   /-- bra.s 10a8 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1084:	/--|-> move.l 52(sp),d1
    1088:	|  |   move.l d1,d2
    108a:	|  |   addq.l #4,d2
    108c:	|  |   move.l d2,52(sp)
    1090:	|  |   move.l 56(sp),d0
    1094:	|  |   move.l d0,d2
    1096:	|  |   addq.l #4,d2
    1098:	|  |   move.l d2,56(sp)
    109c:	|  |   movea.l d1,a0
    109e:	|  |   move.l (a0),d1
    10a0:	|  |   movea.l d0,a0
    10a2:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    10a4:	|  |   addq.l #1,44(sp)
    10a8:	|  \-> moveq #11,d0
    10aa:	|      cmp.l 44(sp),d0
    10ae:	\----- bge.s 1084 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    10b0:	       move.l #115318,52(sp)
  for(int i=0; i<10;i++)
    10b8:	       clr.l 40(sp)
    10bc:	   /-- bra.s 10e2 <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    10be:	/--|-> move.l 52(sp),d1
    10c2:	|  |   move.l d1,d2
    10c4:	|  |   addq.l #4,d2
    10c6:	|  |   move.l d2,52(sp)
    10ca:	|  |   move.l 56(sp),d0
    10ce:	|  |   move.l d0,d2
    10d0:	|  |   addq.l #4,d2
    10d2:	|  |   move.l d2,56(sp)
    10d6:	|  |   movea.l d1,a0
    10d8:	|  |   move.l (a0),d1
    10da:	|  |   movea.l d0,a0
    10dc:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    10de:	|  |   addq.l #1,40(sp)
    10e2:	|  \-> moveq #9,d0
    10e4:	|      cmp.l 40(sp),d0
    10e8:	\----- bge.s 10be <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    10ea:	       move.l #115358,52(sp)
  CstClColor = (UWORD *) cl;
    10f2:	       move.l 56(sp),1c8f0 <CstClColor>
  for(int i=0; i<32;i++)
    10fa:	       clr.l 36(sp)
    10fe:	   /-- bra.s 1124 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    1100:	/--|-> move.l 52(sp),d1
    1104:	|  |   move.l d1,d2
    1106:	|  |   addq.l #4,d2
    1108:	|  |   move.l d2,52(sp)
    110c:	|  |   move.l 56(sp),d0
    1110:	|  |   move.l d0,d2
    1112:	|  |   addq.l #4,d2
    1114:	|  |   move.l d2,56(sp)
    1118:	|  |   movea.l d1,a0
    111a:	|  |   move.l (a0),d1
    111c:	|  |   movea.l d0,a0
    111e:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    1120:	|  |   addq.l #1,36(sp)
    1124:	|  \-> moveq #31,d0
    1126:	|      cmp.l 36(sp),d0
    112a:	\----- bge.s 1100 <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    112c:	       moveq #40,d1
    112e:	       cmp.l 64(sp),d1
    1132:	   /-- bge.s 1190 <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1134:	   |   moveq #-40,d2
    1136:	   |   add.l 64(sp),d2
    113a:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    113e:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1144:	   |   move.l 8(sp),d0
    1148:	   |   move.l d0,d1
    114a:	   |   addq.l #2,d1
    114c:	   |   move.l d1,8(sp)
    1150:	   |   movea.l d0,a0
    1152:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1156:	   |   move.l 8(sp),d0
    115a:	   |   move.l d0,d1
    115c:	   |   addq.l #2,d1
    115e:	   |   move.l d1,8(sp)
    1162:	   |   move.l 12(sp),d1
    1166:	   |   movea.l d0,a0
    1168:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    116a:	   |   move.l 8(sp),d0
    116e:	   |   move.l d0,d1
    1170:	   |   addq.l #2,d1
    1172:	   |   move.l d1,8(sp)
    1176:	   |   movea.l d0,a0
    1178:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    117c:	   |   move.l 8(sp),d0
    1180:	   |   move.l d0,d1
    1182:	   |   addq.l #2,d1
    1184:	   |   move.l d1,8(sp)
    1188:	   |   move.l 12(sp),d1
    118c:	   |   movea.l d0,a0
    118e:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    1190:	   \-> move.l 56(sp),d0
    1194:	       move.l d0,d1
    1196:	       addq.l #4,d1
    1198:	       move.l d1,56(sp)
    119c:	       moveq #-2,d2
    119e:	       movea.l d0,a0
    11a0:	       move.l d2,(a0)
  return (UWORD *) retval;  
    11a2:	       move.l 20(sp),d0
}
    11a6:	       move.l (sp)+,d2
    11a8:	       movea.l (sp)+,a6
    11aa:	       lea 52(sp),sp
    11ae:	       rts

000011b0 <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    11b0:	                lea -40(sp),sp
    11b4:	                move.l a6,-(sp)
    11b6:	                move.l d2,-(sp)
 volatile struct Custom *custom = (struct Custom*)0xdff000;  
    11b8:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    11c0:	                pea 17e45 <PutChar+0x149>
    11c6:	                jsr 17232 <KPrintF>
    11cc:	                addq.l #4,sp

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    11ce:	                move.l 1c8e8 <CstBackDropBufferApplyStart>,d0
    11d4:	                move.l d0,1c8ec <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    11da:	                move.l 1c8e8 <CstBackDropBufferApplyStart>,44(sp)
  if(!*cursor || !CstDrawBuffer) {
    11e2:	                movea.l 44(sp),a0
    11e6:	                move.w (a0),d0
    11e8:	/-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    11ec:	|               move.l 1c8dc <CstDrawBuffer>,d0
    11f2:	+-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    11f6:	|               move.l 1c9b4 <GfxBase>,d0
    11fc:	|               movea.l d0,a6
    11fe:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1202:	|               movea.l 16(sp),a0
    1206:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    120c:	|               movea.l 16(sp),a0
    1210:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1216:	|               movea.l 16(sp),a0
    121a:	|               move.w #2544,64(a0)
  
  while(*cursor)
    1220:	|     /-------- bra.w 1388 <CstDisplayBackDrop+0x1d8>
  {    
    UWORD width = *cursor++;
    1224:	|  /--|-------> move.l 44(sp),d0
    1228:	|  |  |         move.l d0,d1
    122a:	|  |  |         addq.l #2,d1
    122c:	|  |  |         move.l d1,44(sp)
    1230:	|  |  |         movea.l d0,a0
    1232:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1236:	|  |  |         move.l 44(sp),d0
    123a:	|  |  |         move.l d0,d1
    123c:	|  |  |         addq.l #2,d1
    123e:	|  |  |         move.l d1,44(sp)
    1242:	|  |  |         movea.l d0,a0
    1244:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    1248:	|  |  |         move.l 44(sp),d0
    124c:	|  |  |         move.l d0,d1
    124e:	|  |  |         addq.l #2,d1
    1250:	|  |  |         move.l d1,44(sp)
    1254:	|  |  |         movea.l d0,a0
    1256:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    125a:	|  |  |         move.l 44(sp),d0
    125e:	|  |  |         move.l d0,d1
    1260:	|  |  |         addq.l #2,d1
    1262:	|  |  |         move.l d1,44(sp)
    1266:	|  |  |         movea.l d0,a0
    1268:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    126c:	|  |  |         move.l 1c8fc <winWidth>,d0
    1272:	|  |  |         lsr.l #3,d0
    1274:	|  |  |         move.l d0,d1
    1276:	|  |  |         move.w 14(sp),d0
    127a:	|  |  |         add.w d0,d0
    127c:	|  |  |         sub.w d0,d1
    127e:	|  |  |         movea.l 16(sp),a0
    1282:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    1286:	|  |  |         move.l 1c8fc <winWidth>,d0
    128c:	|  |  |         lsr.l #3,d0
    128e:	|  |  |         move.l d0,d1
    1290:	|  |  |         move.w 14(sp),d0
    1294:	|  |  |         add.w d0,d0
    1296:	|  |  |         sub.w d0,d1
    1298:	|  |  |         movea.l 16(sp),a0
    129c:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    12a0:	|  |  |         moveq #0,d0
    12a2:	|  |  |         move.w 8(sp),d0
    12a6:	|  |  |         move.l 1c8fc <winWidth>,d1
    12ac:	|  |  |         move.l d1,-(sp)
    12ae:	|  |  |         move.l d0,-(sp)
    12b0:	|  |  |         jsr 17be6 <__mulsi3>
    12b6:	|  |  |         addq.l #8,sp
    12b8:	|  |  |         move.l d0,d1
    12ba:	|  |  |         lsr.l #3,d1
    12bc:	|  |  |         move.l 1c8ca <CstBackDrop>,d0
    12c2:	|  |  |         add.l d0,d1
    12c4:	|  |  |         moveq #0,d0
    12c6:	|  |  |         move.w 10(sp),d0
    12ca:	|  |  |         move.l d1,d2
    12cc:	|  |  |         add.l d0,d2
    12ce:	|  |  |         move.l d2,40(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    12d2:	|  |  |         moveq #0,d0
    12d4:	|  |  |         move.w 8(sp),d0
    12d8:	|  |  |         move.l 1c8fc <winWidth>,d1
    12de:	|  |  |         move.l d1,-(sp)
    12e0:	|  |  |         move.l d0,-(sp)
    12e2:	|  |  |         jsr 17be6 <__mulsi3>
    12e8:	|  |  |         addq.l #8,sp
    12ea:	|  |  |         move.l d0,d1
    12ec:	|  |  |         lsr.l #3,d1
    12ee:	|  |  |         move.l 1c8dc <CstDrawBuffer>,d0
    12f4:	|  |  |         add.l d0,d1
    12f6:	|  |  |         moveq #0,d0
    12f8:	|  |  |         move.w 10(sp),d0
    12fc:	|  |  |         move.l d1,d2
    12fe:	|  |  |         add.l d0,d2
    1300:	|  |  |         move.l d2,36(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1304:	|  |  |         clr.l 32(sp)
    1308:	|  |  |     /-- bra.s 1380 <CstDisplayBackDrop+0x1d0>
    {
      custom->bltapt = (APTR) bltapt;
    130a:	|  |  |  /--|-> move.l 40(sp),d0
    130e:	|  |  |  |  |   movea.l 16(sp),a0
    1312:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1316:	|  |  |  |  |   move.l 36(sp),d0
    131a:	|  |  |  |  |   movea.l 16(sp),a0
    131e:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    1322:	|  |  |  |  |   move.w 12(sp),d0
    1326:	|  |  |  |  |   lsl.w #6,d0
    1328:	|  |  |  |  |   add.w 14(sp),d0
    132c:	|  |  |  |  |   movea.l 16(sp),a0
    1330:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1334:	|  |  |  |  |   move.l 1c8fc <winWidth>,d0
    133a:	|  |  |  |  |   lsr.l #3,d0
    133c:	|  |  |  |  |   move.l 1c900 <winHeight>,d1
    1342:	|  |  |  |  |   move.l d1,-(sp)
    1344:	|  |  |  |  |   move.l d0,-(sp)
    1346:	|  |  |  |  |   jsr 17be6 <__mulsi3>
    134c:	|  |  |  |  |   addq.l #8,sp
    134e:	|  |  |  |  |   add.l d0,40(sp)
      bltdpt += winWidth/8*winHeight;
    1352:	|  |  |  |  |   move.l 1c8fc <winWidth>,d0
    1358:	|  |  |  |  |   lsr.l #3,d0
    135a:	|  |  |  |  |   move.l 1c900 <winHeight>,d1
    1360:	|  |  |  |  |   move.l d1,-(sp)
    1362:	|  |  |  |  |   move.l d0,-(sp)
    1364:	|  |  |  |  |   jsr 17be6 <__mulsi3>
    136a:	|  |  |  |  |   addq.l #8,sp
    136c:	|  |  |  |  |   add.l d0,36(sp)
      WaitBlit();
    1370:	|  |  |  |  |   move.l 1c9b4 <GfxBase>,d0
    1376:	|  |  |  |  |   movea.l d0,a6
    1378:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    137c:	|  |  |  |  |   addq.l #1,32(sp)
    1380:	|  |  |  |  \-> moveq #4,d0
    1382:	|  |  |  |      cmp.l 32(sp),d0
    1386:	|  |  |  \----- bge.s 130a <CstDisplayBackDrop+0x15a>
  while(*cursor)
    1388:	|  |  \-------> movea.l 44(sp),a0
    138c:	|  |            move.w (a0),d0
    138e:	|  \----------- bne.w 1224 <CstDisplayBackDrop+0x74>
    }  
  }
  UWORD *colorpos = CstPalette;
    1392:	|               move.l 1c8f4 <CstPalette>,28(sp)
  
  UWORD *tmp = CstClColor;
    139a:	|               move.l 1c8f0 <CstClColor>,24(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13a2:	|               clr.l 20(sp)
    13a6:	|           /-- bra.s 13d8 <CstDisplayBackDrop+0x228>
    *tmp++;
    13a8:	|        /--|-> move.l 24(sp),d0
    13ac:	|        |  |   move.l d0,d1
    13ae:	|        |  |   addq.l #2,d1
    13b0:	|        |  |   move.l d1,24(sp)
    *tmp++ = *colorpos++;
    13b4:	|        |  |   move.l 28(sp),d1
    13b8:	|        |  |   move.l d1,d2
    13ba:	|        |  |   addq.l #2,d2
    13bc:	|        |  |   move.l d2,28(sp)
    13c0:	|        |  |   move.l 24(sp),d0
    13c4:	|        |  |   move.l d0,d2
    13c6:	|        |  |   addq.l #2,d2
    13c8:	|        |  |   move.l d2,24(sp)
    13cc:	|        |  |   movea.l d1,a0
    13ce:	|        |  |   move.w (a0),d1
    13d0:	|        |  |   movea.l d0,a0
    13d2:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13d4:	|        |  |   addq.l #1,20(sp)
    13d8:	|        |  \-> moveq #31,d0
    13da:	|        |      cmp.l 20(sp),d0
    13de:	|        \----- bge.s 13a8 <CstDisplayBackDrop+0x1f8>
    13e0:	|           /-- bra.s 13e4 <CstDisplayBackDrop+0x234>
    return;
    13e2:	\-----------|-> nop
  }
}
    13e4:	            \-> move.l (sp)+,d2
    13e6:	                movea.l (sp)+,a6
    13e8:	                lea 40(sp),sp
    13ec:	                rts

000013ee <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    13ee:	lea -20(sp),sp
    13f2:	movea.l 24(sp),a0
    13f6:	move.l 28(sp),d1
    13fa:	move.l 32(sp),d0
    13fe:	movea.w a0,a0
    1400:	move.w a0,4(sp)
    1404:	move.w d1,d1
    1406:	move.w d1,2(sp)
    140a:	move.w d0,d0
    140c:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    140e:	move.w 2(sp),d0
    1412:	movea.l 36(sp),a0
    1416:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    1418:	move.w 4(sp),d0
    141c:	lsr.w #1,d0
    141e:	movea.l 36(sp),a0
    1422:	addq.l #1,a0
    1424:	move.l d0,d0
    1426:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    1428:	move.w 2(sp),d1
    142c:	move.w (sp),d0
    142e:	movea.l 36(sp),a0
    1432:	addq.l #2,a0
    1434:	add.b d1,d0
    1436:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    1438:	move.w 4(sp),d0
    143c:	andi.w #1,d0
    1440:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1444:	move.w 2(sp),d0
    1448:	add.w (sp),d0
    144a:	move.w d0,d0
    144c:	andi.l #65535,d0
    1452:	asr.l #7,d0
    1454:	move.l d0,d0
    1456:	move.w d0,d1
    1458:	andi.w #2,d1
    145c:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    1460:	moveq #0,d0
    1462:	move.w 2(sp),d0
    1466:	asr.l #6,d0
    1468:	move.l d0,d0
    146a:	move.w d0,d1
    146c:	andi.w #4,d1
    1470:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1474:	move.w 18(sp),d1
    1478:	move.w 16(sp),d0
    147c:	add.b d0,d1
    147e:	move.w 14(sp),d0
    1482:	movea.l 36(sp),a0
    1486:	addq.l #3,a0
    1488:	add.b d1,d0
    148a:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    148c:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    1492:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1498:	move.l 10(sp),d0
    149c:	clr.w d0
    149e:	swap d0
    14a0:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    14a4:	move.l 1c8f8 <CstClCursor>,d0
    14aa:	movea.l d0,a0
    14ac:	addq.l #2,a0
    14ae:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    14b2:	move.l 1c8f8 <CstClCursor>,d0
    14b8:	movea.l d0,a0
    14ba:	addq.l #6,a0
    14bc:	move.w 8(sp),(a0)

}
    14c0:	nop
    14c2:	lea 20(sp),sp
    14c6:	rts

000014c8 <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    14c8:	    move.w 1c8d6 <CstApplyBackDropCounter>,d0
    14ce:	/-- beq.s 14e4 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    14d0:	|   jsr 11b0 <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    14d6:	|   move.w 1c8d6 <CstApplyBackDropCounter>,d0
    14dc:	|   subq.w #1,d0
    14de:	|   move.w d0,1c8d6 <CstApplyBackDropCounter>
  }    
}
    14e4:	\-> nop
    14e6:	    rts

000014e8 <CstDrawZBuffer>:

UBYTE *CstDrawZBuffer( struct sprite *sprite, struct zBufferData *zbuffer, UWORD x, UWORD y) 
{
    14e8:	                      lea -88(sp),sp
    14ec:	                      move.l a6,-(sp)
    14ee:	                      move.l d2,-(sp)
    14f0:	                      move.l 108(sp),d1
    14f4:	                      move.l 112(sp),d0
    14f8:	                      move.w d1,d1
    14fa:	                      move.w d1,10(sp)
    14fe:	                      move.w d0,d0
    1500:	                      move.w d0,8(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1504:	                      move.l #14675968,74(sp)
  //In Case nothing needs to be done return sprite mask without changes
  UBYTE *returnvalue = AllocVec( sprite->width/8*sprite->height, MEMF_CHIP); 
    150c:	                      movea.l 100(sp),a0
    1510:	                      move.l (a0),d0
    1512:	                  /-- bpl.s 1516 <CstDrawZBuffer+0x2e>
    1514:	                  |   addq.l #7,d0
    1516:	                  \-> asr.l #3,d0
    1518:	                      movea.l 100(sp),a0
    151c:	                      move.l 4(a0),d1
    1520:	                      move.l d1,-(sp)
    1522:	                      move.l d0,-(sp)
    1524:	                      jsr 17be6 <__mulsi3>
    152a:	                      addq.l #8,sp
    152c:	                      move.l d0,70(sp)
    1530:	                      moveq #2,d0
    1532:	                      move.l d0,66(sp)
    1536:	                      move.l 1c9a8 <SysBase>,d0
    153c:	                      movea.l d0,a6
    153e:	                      move.l 70(sp),d0
    1542:	                      move.l 66(sp),d1
    1546:	                      jsr -684(a6)
    154a:	                      move.l d0,62(sp)
    154e:	                      move.l 62(sp),d0
    1552:	                      move.l d0,58(sp)
  UBYTE *tmpbuffer = AllocVec( (sprite->width/8+2)*sprite->height, MEMF_CHIP);               
    1556:	                      movea.l 100(sp),a0
    155a:	                      move.l (a0),d0
    155c:	                  /-- bpl.s 1560 <CstDrawZBuffer+0x78>
    155e:	                  |   addq.l #7,d0
    1560:	                  \-> asr.l #3,d0
    1562:	                      move.l d0,d1
    1564:	                      addq.l #2,d1
    1566:	                      movea.l 100(sp),a0
    156a:	                      move.l 4(a0),d0
    156e:	                      move.l d0,-(sp)
    1570:	                      move.l d1,-(sp)
    1572:	                      jsr 17be6 <__mulsi3>
    1578:	                      addq.l #8,sp
    157a:	                      move.l d0,54(sp)
    157e:	                      moveq #2,d1
    1580:	                      move.l d1,50(sp)
    1584:	                      move.l 1c9a8 <SysBase>,d0
    158a:	                      movea.l d0,a6
    158c:	                      move.l 54(sp),d0
    1590:	                      move.l 50(sp),d1
    1594:	                      jsr -684(a6)
    1598:	                      move.l d0,46(sp)
    159c:	                      move.l 46(sp),d0
    15a0:	                      move.l d0,42(sp)
  WORD zbufferset = 0;
    15a4:	                      clr.w 94(sp)

  #ifdef EMULATOR
    debug_register_bitmap(returnvalue, "SpriteMask", sprite->width, sprite->height, 1, 0);
    15a8:	                      movea.l 100(sp),a0
    15ac:	                      move.l 4(a0),d0
    15b0:	                      move.l d0,d0
    15b2:	                      movea.w d0,a1
    15b4:	                      movea.l 100(sp),a0
    15b8:	                      move.l (a0),d0
    15ba:	                      move.l d0,d0
    15bc:	                      movea.w d0,a0
    15be:	                      clr.l -(sp)
    15c0:	                      pea 1 <_start+0x1>
    15c4:	                      move.l a1,-(sp)
    15c6:	                      move.l a0,-(sp)
    15c8:	                      pea 17e61 <PutChar+0x165>
    15ce:	                      move.l 78(sp),-(sp)
    15d2:	                      jsr 1731a <debug_register_bitmap>
    15d8:	                      lea 24(sp),sp
    debug_register_bitmap(tmpbuffer, "tmbpuffer", sprite->width+16, sprite->height, 1, 0);
    15dc:	                      movea.l 100(sp),a0
    15e0:	                      move.l 4(a0),d0
    15e4:	                      move.l d0,d0
    15e6:	                      movea.w d0,a1
    15e8:	                      movea.l 100(sp),a0
    15ec:	                      move.l (a0),d0
    15ee:	                      move.l d0,d0
    15f0:	                      addi.w #16,d0
    15f4:	                      movea.w d0,a0
    15f6:	                      clr.l -(sp)
    15f8:	                      pea 1 <_start+0x1>
    15fc:	                      move.l a1,-(sp)
    15fe:	                      move.l a0,-(sp)
    1600:	                      pea 17e6c <PutChar+0x170>
    1606:	                      move.l 62(sp),-(sp)
    160a:	                      jsr 1731a <debug_register_bitmap>
    1610:	                      lea 24(sp),sp
  #endif    

  while(zbuffer) 
    1614:	   /----------------- bra.w 1b4c <CstDrawZBuffer+0x664>
  {              
    UWORD spritex1oncanvas = x;
    1618:	/--|----------------> move.w 10(sp),36(sp)
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    161e:	|  |                  movea.l 100(sp),a0
    1622:	|  |                  move.l (a0),d0
    1624:	|  |                  move.l d0,d0
    1626:	|  |                  movea.w 36(sp),a0
    162a:	|  |                  adda.w d0,a0
    162c:	|  |                  move.w a0,34(sp)
    UWORD spritey1oncanvas = y;
    1630:	|  |                  move.w 8(sp),32(sp)
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    1636:	|  |                  movea.l 100(sp),a0
    163a:	|  |                  move.l 4(a0),d0
    163e:	|  |                  move.l d0,d0
    1640:	|  |                  move.w 32(sp),d1
    1644:	|  |                  add.w d0,d1
    1646:	|  |                  move.w d1,30(sp)

    UWORD zbufferx1oncanvas = zbuffer->topx;
    164a:	|  |                  movea.l 104(sp),a0
    164e:	|  |                  move.l 8(a0),d0
    1652:	|  |                  move.w d0,28(sp)
    UWORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    1656:	|  |                  movea.l 104(sp),a0
    165a:	|  |                  move.l (a0),d0
    165c:	|  |                  move.l d0,d0
    165e:	|  |                  movea.w 28(sp),a0
    1662:	|  |                  adda.w d0,a0
    1664:	|  |                  move.w a0,26(sp)

    UWORD zbuffery1oncanvas = zbuffer->topy;
    1668:	|  |                  movea.l 104(sp),a0
    166c:	|  |                  move.l 12(a0),d0
    1670:	|  |                  move.w d0,24(sp)
    UWORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    1674:	|  |                  movea.l 104(sp),a0
    1678:	|  |                  move.l 4(a0),d0
    167c:	|  |                  move.l d0,d0
    167e:	|  |                  move.w 24(sp),d1
    1682:	|  |                  add.w d0,d1
    1684:	|  |                  move.w d1,22(sp)
  
    BOOL zbufferfromright = FALSE;
    1688:	|  |                  clr.w 92(sp)
    BOOL zbufferfromleft = FALSE;
    168c:	|  |                  clr.w 90(sp)
    BOOL zbufferfrombottom = FALSE;
    1690:	|  |                  clr.w 88(sp)
    BOOL zbufferfromtop = FALSE;
    1694:	|  |                  clr.w 86(sp)
  
    //Sprite will be drawn behind the zBuffer. We need to do something
    if(spritey2oncanvas < zbuffer->yz) 
    1698:	|  |                  moveq #0,d0
    169a:	|  |                  move.w 30(sp),d0
    169e:	|  |                  movea.l 104(sp),a0
    16a2:	|  |                  move.l 16(a0),d1
    16a6:	|  |                  cmp.l d0,d1
    16a8:	|  +----------------- ble.w 1b4c <CstDrawZBuffer+0x664>
    {    
      zbufferset = 1;
    16ac:	|  |                  move.w #1,94(sp)

      //sprite ------------x1+++++++++++++++++++x2-----------------*/
      /*zbuffer-------------------x1++++++++++?????????------------*/      
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    16b2:	|  |                  move.w 28(sp),d0
    16b6:	|  |                  cmp.w 36(sp),d0
    16ba:	|  |              /-- bcs.s 16ce <CstDrawZBuffer+0x1e6>
    16bc:	|  |              |   move.w 28(sp),d1
    16c0:	|  |              |   cmp.w 34(sp),d1
    16c4:	|  |              +-- bcc.s 16ce <CstDrawZBuffer+0x1e6>
        zbufferfromright = TRUE;
    16c6:	|  |              |   move.w #1,92(sp)
    16cc:	|  |           /--|-- bra.s 16e8 <CstDrawZBuffer+0x200>
      //sprite -------------------------x1++++??????-------*/
      /*zbuffer-------------------x1+++++++++++x2----------*/  
      else if(spritex1oncanvas > zbufferx1oncanvas && spritex1oncanvas < zbufferx2oncanvas)
    16ce:	|  |           |  \-> move.w 28(sp),d0
    16d2:	|  |           |      cmp.w 36(sp),d0
    16d6:	|  |           +----- bcc.s 16e8 <CstDrawZBuffer+0x200>
    16d8:	|  |           |      move.w 26(sp),d1
    16dc:	|  |           |      cmp.w 36(sp),d1
    16e0:	|  |           +----- bls.s 16e8 <CstDrawZBuffer+0x200>
        zbufferfromleft = TRUE;       
    16e2:	|  |           |      move.w #1,90(sp)

      //Overlap on X-Axis. Now Check y-axis
      if( zbufferfromleft || zbufferfromright)         
    16e8:	|  |           \----> tst.w 90(sp)
    16ec:	|  |              /-- bne.s 16f4 <CstDrawZBuffer+0x20c>
    16ee:	|  |              |   tst.w 92(sp)
    16f2:	|  |           /--|-- beq.s 172a <CstDrawZBuffer+0x242>
      {
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    16f4:	|  |           |  \-> move.w 24(sp),d0
    16f8:	|  |           |      cmp.w 32(sp),d0
    16fc:	|  |           |  /-- bcs.s 1710 <CstDrawZBuffer+0x228>
    16fe:	|  |           |  |   move.w 24(sp),d1
    1702:	|  |           |  |   cmp.w 30(sp),d1
    1706:	|  |           |  +-- bcc.s 1710 <CstDrawZBuffer+0x228>
          zbufferfrombottom = TRUE;
    1708:	|  |           |  |   move.w #1,88(sp)
    170e:	|  |           +--|-- bra.s 172a <CstDrawZBuffer+0x242>

        else if(spritey1oncanvas > zbuffery1oncanvas && spritey1oncanvas < zbuffery2oncanvas)
    1710:	|  |           |  \-> move.w 24(sp),d0
    1714:	|  |           |      cmp.w 32(sp),d0
    1718:	|  |           +----- bcc.s 172a <CstDrawZBuffer+0x242>
    171a:	|  |           |      move.w 22(sp),d1
    171e:	|  |           |      cmp.w 32(sp),d1
    1722:	|  |           +----- bls.s 172a <CstDrawZBuffer+0x242>
          zbufferfromtop = TRUE;       
    1724:	|  |           |      move.w #1,86(sp)
      }

      //Overlap on both Axis
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    172a:	|  |           \----> tst.w 92(sp)
    172e:	|  |              /-- bne.s 1738 <CstDrawZBuffer+0x250>
    1730:	|  |              |   tst.w 90(sp)
    1734:	|  +--------------|-- beq.w 1b4c <CstDrawZBuffer+0x664>
    1738:	|  |              \-> tst.w 88(sp)
    173c:	|  |              /-- bne.s 1746 <CstDrawZBuffer+0x25e>
    173e:	|  |              |   tst.w 86(sp)
    1742:	|  +--------------|-- beq.w 1b4c <CstDrawZBuffer+0x664>

        UWORD xdiff;
        UWORD xdiffbyte;          
        UWORD xdiffrest;
        UWORD bytewidth, width, rest;
        if(zbufferfromright)
    1746:	|  |              \-> tst.w 92(sp)
    174a:	|  |     /----------- beq.w 1894 <CstDrawZBuffer+0x3ac>
        {        
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    174e:	|  |     |            movea.w 36(sp),a0
    1752:	|  |     |            suba.w 28(sp),a0
    1756:	|  |     |            move.w a0,20(sp)
          xdiffbyte = (xdiff / 16) * 2;          
    175a:	|  |     |            move.w 20(sp),d0
    175e:	|  |     |            lsr.w #4,d0
    1760:	|  |     |            add.w d0,d0
    1762:	|  |     |            move.w d0,18(sp)
          xdiffrest = (xdiff - xdiffbyte * 8)*-1;       
    1766:	|  |     |            move.w 18(sp),d0
    176a:	|  |     |            lsl.w #3,d0
    176c:	|  |     |            move.w d0,d1
    176e:	|  |     |            sub.w 20(sp),d1
    1772:	|  |     |            move.w d1,16(sp)
          bytewidth = (sprite->width/16)*2;
    1776:	|  |     |            movea.l 100(sp),a0
    177a:	|  |     |            move.l (a0),d0
    177c:	|  |     |            movea.l d0,a0
    177e:	|  |     |            cmpa.w #0,a0
    1782:	|  |     |        /-- bge.s 1788 <CstDrawZBuffer+0x2a0>
    1784:	|  |     |        |   lea 15(a0),a0
    1788:	|  |     |        \-> move.l a0,d0
    178a:	|  |     |            asr.l #4,d0
    178c:	|  |     |            move.l d0,d0
    178e:	|  |     |            add.w d0,d0
    1790:	|  |     |            move.w d0,80(sp)

          if( zbufferx2oncanvas > spritex2oncanvas)    
    1794:	|  |     |            move.w 34(sp),d0
    1798:	|  |     |            cmp.w 26(sp),d0
    179c:	|  |     |  /-------- bcc.w 1880 <CstDrawZBuffer+0x398>
          {               
            WaitBlit();  
    17a0:	|  |     |  |         move.l 1c9b4 <GfxBase>,d0
    17a6:	|  |     |  |         movea.l d0,a6
    17a8:	|  |     |  |         jsr -228(a6)
          
            custom->bltafwm = 0xffff;
    17ac:	|  |     |  |         movea.l 74(sp),a0
    17b0:	|  |     |  |         move.w #-1,68(a0)
            custom->bltalwm = 0xffff;          
    17b6:	|  |     |  |         movea.l 74(sp),a0
    17ba:	|  |     |  |         move.w #-1,70(a0)
            custom->bltdpt = tmpbuffer;        
    17c0:	|  |     |  |         movea.l 74(sp),a0
    17c4:	|  |     |  |         move.l 42(sp),84(a0)
            custom->bltcon1 = 0;               
    17ca:	|  |     |  |         movea.l 74(sp),a0
    17ce:	|  |     |  |         move.w #0,66(a0)

            if (xdiffrest) {
    17d4:	|  |     |  |         tst.w 16(sp)
    17d8:	|  |     |  |  /----- beq.s 183a <CstDrawZBuffer+0x352>
              bytewidth += 2; 
    17da:	|  |     |  |  |      addq.w #2,80(sp)
              xdiffbyte += -2;                 
    17de:	|  |     |  |  |      subq.w #2,18(sp)
      
              bltapt = zbuffer->bitplane + xdiffbyte;          
    17e2:	|  |     |  |  |      movea.l 104(sp),a0
    17e6:	|  |     |  |  |      move.l 20(a0),d1
    17ea:	|  |     |  |  |      moveq #0,d0
    17ec:	|  |     |  |  |      move.w 18(sp),d0
    17f0:	|  |     |  |  |      add.l d1,d0
    17f2:	|  |     |  |  |      move.l d0,82(sp)
              custom->bltcon0 = (16 - xdiffrest) * 4096 + 0x9f0;              
    17f6:	|  |     |  |  |      moveq #0,d0
    17f8:	|  |     |  |  |      move.w 16(sp),d0
    17fc:	|  |     |  |  |      moveq #16,d1
    17fe:	|  |     |  |  |      sub.l d0,d1
    1800:	|  |     |  |  |      move.l d1,d0
    1802:	|  |     |  |  |      moveq #12,d1
    1804:	|  |     |  |  |      lsl.w d1,d0
    1806:	|  |     |  |  |      addi.w #2544,d0
    180a:	|  |     |  |  |      movea.l 74(sp),a0
    180e:	|  |     |  |  |      move.w d0,64(a0)
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1812:	|  |     |  |  |      movea.l 104(sp),a0
    1816:	|  |     |  |  |      move.l (a0),d0
    1818:	|  |     |  |  |  /-- bpl.s 181c <CstDrawZBuffer+0x334>
    181a:	|  |     |  |  |  |   addq.l #7,d0
    181c:	|  |     |  |  |  \-> asr.l #3,d0
    181e:	|  |     |  |  |      move.l d0,d0
    1820:	|  |     |  |  |      sub.w 80(sp),d0
    1824:	|  |     |  |  |      movea.l 74(sp),a0
    1828:	|  |     |  |  |      move.w d0,100(a0)
              custom->bltdmod = 0;                                                            
    182c:	|  |     |  |  |      movea.l 74(sp),a0
    1830:	|  |     |  |  |      move.w #0,102(a0)
    1836:	|  |  /--|--|--|----- bra.w 19e2 <CstDrawZBuffer+0x4fa>
            }
            else
            {             
              bltapt = zbuffer->bitplane + xdiffbyte;          
    183a:	|  |  |  |  |  \----> movea.l 104(sp),a0
    183e:	|  |  |  |  |         move.l 20(a0),d1
    1842:	|  |  |  |  |         moveq #0,d0
    1844:	|  |  |  |  |         move.w 18(sp),d0
    1848:	|  |  |  |  |         add.l d1,d0
    184a:	|  |  |  |  |         move.l d0,82(sp)
              custom->bltcon0 = 4096 + 0x9f0;              
    184e:	|  |  |  |  |         movea.l 74(sp),a0
    1852:	|  |  |  |  |         move.w #6640,64(a0)
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1858:	|  |  |  |  |         movea.l 104(sp),a0
    185c:	|  |  |  |  |         move.l (a0),d0
    185e:	|  |  |  |  |     /-- bpl.s 1862 <CstDrawZBuffer+0x37a>
    1860:	|  |  |  |  |     |   addq.l #7,d0
    1862:	|  |  |  |  |     \-> asr.l #3,d0
    1864:	|  |  |  |  |         move.l d0,d0
    1866:	|  |  |  |  |         sub.w 80(sp),d0
    186a:	|  |  |  |  |         movea.l 74(sp),a0
    186e:	|  |  |  |  |         move.w d0,100(a0)
              custom->bltdmod = 2;                                                            
    1872:	|  |  |  |  |         movea.l 74(sp),a0
    1876:	|  |  |  |  |         move.w #2,102(a0)
    187c:	|  |  +--|--|-------- bra.w 19e2 <CstDrawZBuffer+0x4fa>
            }                                     
          }            
          else
          {
              KPrintF("Cstdrawzbuffer: Current version onl supports zbuffer size equal to screen size");
    1880:	|  |  |  |  \-------> pea 17e76 <PutChar+0x17a>
    1886:	|  |  |  |            jsr 17232 <KPrintF>
    188c:	|  |  |  |            addq.l #4,sp
              return FALSE;
    188e:	|  |  |  |            moveq #0,d0
    1890:	|  |  |  |  /-------- bra.w 1c48 <CstDrawZBuffer+0x760>
        {    
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    1894:	|  |  |  \--|-------> movea.w 36(sp),a0
    1898:	|  |  |     |         suba.w 28(sp),a0
    189c:	|  |  |     |         move.w a0,20(sp)
          xdiffbyte = (xdiff / 16) * 2;          
    18a0:	|  |  |     |         move.w 20(sp),d0
    18a4:	|  |  |     |         lsr.w #4,d0
    18a6:	|  |  |     |         add.w d0,d0
    18a8:	|  |  |     |         move.w d0,18(sp)
          xdiffrest = (xdiff - xdiffbyte * 8);    
    18ac:	|  |  |     |         move.w 18(sp),d0
    18b0:	|  |  |     |         lsl.w #3,d0
    18b2:	|  |  |     |         move.w 20(sp),d1
    18b6:	|  |  |     |         sub.w d0,d1
    18b8:	|  |  |     |         move.w d1,16(sp)

                         
          bytewidth = (sprite->width/16)*2;
    18bc:	|  |  |     |         movea.l 100(sp),a0
    18c0:	|  |  |     |         move.l (a0),d0
    18c2:	|  |  |     |         movea.l d0,a0
    18c4:	|  |  |     |         cmpa.w #0,a0
    18c8:	|  |  |     |     /-- bge.s 18ce <CstDrawZBuffer+0x3e6>
    18ca:	|  |  |     |     |   lea 15(a0),a0
    18ce:	|  |  |     |     \-> move.l a0,d0
    18d0:	|  |  |     |         asr.l #4,d0
    18d2:	|  |  |     |         move.l d0,d0
    18d4:	|  |  |     |         add.w d0,d0
    18d6:	|  |  |     |         move.w d0,80(sp)
          if(sprite->height == 60) {
    18da:	|  |  |     |         movea.l 100(sp),a0
    18de:	|  |  |     |         move.l 4(a0),d0
    18e2:	|  |  |     |         moveq #60,d1
    18e4:	|  |  |     |         cmp.l d0,d1
    18e6:	|  |  |     |     /-- bne.s 18f2 <CstDrawZBuffer+0x40a>
            sprite->height = 60;
    18e8:	|  |  |     |     |   movea.l 100(sp),a0
    18ec:	|  |  |     |     |   moveq #60,d0
    18ee:	|  |  |     |     |   move.l d0,4(a0)
          }
          
          custom->bltafwm = 0xffff;
    18f2:	|  |  |     |     \-> movea.l 74(sp),a0
    18f6:	|  |  |     |         move.w #-1,68(a0)
          custom->bltalwm = 0xffff;                      
    18fc:	|  |  |     |         movea.l 74(sp),a0
    1900:	|  |  |     |         move.w #-1,70(a0)
          custom->bltcon1 = 0;          
    1906:	|  |  |     |         movea.l 74(sp),a0
    190a:	|  |  |     |         move.w #0,66(a0)

          if (xdiffrest) {
    1910:	|  |  |     |         tst.w 16(sp)
    1914:	|  |  |     |  /----- beq.s 1986 <CstDrawZBuffer+0x49e>
            bytewidth += 2; 
    1916:	|  |  |     |  |      addq.w #2,80(sp)
            //xdiffbyte += -2;            
            bltapt = zbuffer->bitplane + xdiffbyte;  
    191a:	|  |  |     |  |      movea.l 104(sp),a0
    191e:	|  |  |     |  |      move.l 20(a0),d1
    1922:	|  |  |     |  |      moveq #0,d0
    1924:	|  |  |     |  |      move.w 18(sp),d0
    1928:	|  |  |     |  |      add.l d1,d0
    192a:	|  |  |     |  |      move.l d0,82(sp)
            WaitBlit();   
    192e:	|  |  |     |  |      move.l 1c9b4 <GfxBase>,d0
    1934:	|  |  |     |  |      movea.l d0,a6
    1936:	|  |  |     |  |      jsr -228(a6)
            custom->bltdpt = tmpbuffer;                
    193a:	|  |  |     |  |      movea.l 74(sp),a0
    193e:	|  |  |     |  |      move.l 42(sp),84(a0)
            custom->bltcon0 = (16 - xdiffrest) * 4096 + 0x9f0;              
    1944:	|  |  |     |  |      moveq #0,d0
    1946:	|  |  |     |  |      move.w 16(sp),d0
    194a:	|  |  |     |  |      moveq #16,d1
    194c:	|  |  |     |  |      sub.l d0,d1
    194e:	|  |  |     |  |      move.l d1,d0
    1950:	|  |  |     |  |      moveq #12,d1
    1952:	|  |  |     |  |      lsl.w d1,d0
    1954:	|  |  |     |  |      addi.w #2544,d0
    1958:	|  |  |     |  |      movea.l 74(sp),a0
    195c:	|  |  |     |  |      move.w d0,64(a0)
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1960:	|  |  |     |  |      movea.l 104(sp),a0
    1964:	|  |  |     |  |      move.l (a0),d0
    1966:	|  |  |     |  |  /-- bpl.s 196a <CstDrawZBuffer+0x482>
    1968:	|  |  |     |  |  |   addq.l #7,d0
    196a:	|  |  |     |  |  \-> asr.l #3,d0
    196c:	|  |  |     |  |      move.l d0,d0
    196e:	|  |  |     |  |      sub.w 80(sp),d0
    1972:	|  |  |     |  |      movea.l 74(sp),a0
    1976:	|  |  |     |  |      move.w d0,100(a0)
            custom->bltdmod = 0;                                                            
    197a:	|  |  |     |  |      movea.l 74(sp),a0
    197e:	|  |  |     |  |      move.w #0,102(a0)
    1984:	|  |  +-----|--|----- bra.s 19e2 <CstDrawZBuffer+0x4fa>
          }
          else
          {       
            //xdiffbyte += -2;      
            bltapt = zbuffer->bitplane + xdiffbyte;  
    1986:	|  |  |     |  \----> movea.l 104(sp),a0
    198a:	|  |  |     |         move.l 20(a0),d1
    198e:	|  |  |     |         moveq #0,d0
    1990:	|  |  |     |         move.w 18(sp),d0
    1994:	|  |  |     |         add.l d1,d0
    1996:	|  |  |     |         move.l d0,82(sp)
            WaitBlit();         
    199a:	|  |  |     |         move.l 1c9b4 <GfxBase>,d0
    19a0:	|  |  |     |         movea.l d0,a6
    19a2:	|  |  |     |         jsr -228(a6)
            custom->bltdpt = tmpbuffer + 2;       
    19a6:	|  |  |     |         move.l 42(sp),d0
    19aa:	|  |  |     |         addq.l #2,d0
    19ac:	|  |  |     |         movea.l 74(sp),a0
    19b0:	|  |  |     |         move.l d0,84(a0)
            custom->bltcon0 = 4096 + 0x9f0;              
    19b4:	|  |  |     |         movea.l 74(sp),a0
    19b8:	|  |  |     |         move.w #6640,64(a0)
            custom->bltamod = zbuffer->width/8 - bytewidth;
    19be:	|  |  |     |         movea.l 104(sp),a0
    19c2:	|  |  |     |         move.l (a0),d0
    19c4:	|  |  |     |     /-- bpl.s 19c8 <CstDrawZBuffer+0x4e0>
    19c6:	|  |  |     |     |   addq.l #7,d0
    19c8:	|  |  |     |     \-> asr.l #3,d0
    19ca:	|  |  |     |         move.l d0,d0
    19cc:	|  |  |     |         sub.w 80(sp),d0
    19d0:	|  |  |     |         movea.l 74(sp),a0
    19d4:	|  |  |     |         move.w d0,100(a0)
            custom->bltdmod = 2;                                                            
    19d8:	|  |  |     |         movea.l 74(sp),a0
    19dc:	|  |  |     |         move.w #2,102(a0)
        } 
        
        //Get Distance R
        //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
        /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    19e2:	|  |  \-----|-------> movea.w 32(sp),a0
    19e6:	|  |        |         suba.w 24(sp),a0
    19ea:	|  |        |         move.w a0,14(sp)

        UWORD height;
        if( zbuffery2oncanvas > spritey2oncanvas) 
    19ee:	|  |        |         move.w 30(sp),d0
    19f2:	|  |        |         cmp.w 22(sp),d0
    19f6:	|  |        |  /----- bcc.s 1a06 <CstDrawZBuffer+0x51e>
          height = sprite->height;
    19f8:	|  |        |  |      movea.l 100(sp),a0
    19fc:	|  |        |  |      move.l 4(a0),d0
    1a00:	|  |        |  |      move.w d0,78(sp)
    1a04:	|  |        |  |  /-- bra.s 1a12 <CstDrawZBuffer+0x52a>
        else
          height = zbuffery2oncanvas - spritey1oncanvas;
    1a06:	|  |        |  \--|-> move.w 22(sp),d1
    1a0a:	|  |        |     |   sub.w 32(sp),d1
    1a0e:	|  |        |     |   move.w d1,78(sp)

        custom->bltapt = bltapt + ydiff*zbuffer->width/8; 
    1a12:	|  |        |     \-> moveq #0,d0
    1a14:	|  |        |         move.w 14(sp),d0
    1a18:	|  |        |         movea.l 104(sp),a0
    1a1c:	|  |        |         move.l (a0),d1
    1a1e:	|  |        |         move.l d1,-(sp)
    1a20:	|  |        |         move.l d0,-(sp)
    1a22:	|  |        |         jsr 17be6 <__mulsi3>
    1a28:	|  |        |         addq.l #8,sp
    1a2a:	|  |        |         tst.l d0
    1a2c:	|  |        |     /-- bge.s 1a30 <CstDrawZBuffer+0x548>
    1a2e:	|  |        |     |   addq.l #7,d0
    1a30:	|  |        |     \-> asr.l #3,d0
    1a32:	|  |        |         add.l 82(sp),d0
    1a36:	|  |        |         movea.l 74(sp),a0
    1a3a:	|  |        |         move.l d0,80(a0)
        UWORD bltsize =  height*64+bytewidth/2;          
    1a3e:	|  |        |         move.w 78(sp),d0
    1a42:	|  |        |         move.w d0,d1
    1a44:	|  |        |         lsl.w #6,d1
    1a46:	|  |        |         move.w 80(sp),d0
    1a4a:	|  |        |         lsr.w #1,d0
    1a4c:	|  |        |         movea.w d1,a0
    1a4e:	|  |        |         adda.w d0,a0
    1a50:	|  |        |         move.w a0,12(sp)
        custom->bltsize = height*64+bytewidth/2;
    1a54:	|  |        |         move.w 78(sp),d0
    1a58:	|  |        |         move.w d0,d1
    1a5a:	|  |        |         lsl.w #6,d1
    1a5c:	|  |        |         move.w 80(sp),d0
    1a60:	|  |        |         lsr.w #1,d0
    1a62:	|  |        |         add.w d1,d0
    1a64:	|  |        |         movea.l 74(sp),a0
    1a68:	|  |        |         move.w d0,88(a0)
       
        WaitBlit();
    1a6c:	|  |        |         move.l 1c9b4 <GfxBase>,d0
    1a72:	|  |        |         movea.l d0,a6
    1a74:	|  |        |         jsr -228(a6)

        custom->bltafwm = 0xffff;
    1a78:	|  |        |         movea.l 74(sp),a0
    1a7c:	|  |        |         move.w #-1,68(a0)
        custom->bltalwm = 0xffff;
    1a82:	|  |        |         movea.l 74(sp),a0
    1a86:	|  |        |         move.w #-1,70(a0)
        custom->bltamod = 2;
    1a8c:	|  |        |         movea.l 74(sp),a0
    1a90:	|  |        |         move.w #2,100(a0)
        custom->bltbmod = 0;
    1a96:	|  |        |         movea.l 74(sp),a0
    1a9a:	|  |        |         move.w #0,98(a0)
        custom->bltdmod = 0;
    1aa0:	|  |        |         movea.l 74(sp),a0
    1aa4:	|  |        |         move.w #0,102(a0)
        custom->bltcon0 = 0xd0c; //Copy A to D
    1aaa:	|  |        |         movea.l 74(sp),a0
    1aae:	|  |        |         move.w #3340,64(a0)
        custom->bltcon1 = 0;        
    1ab4:	|  |        |         movea.l 74(sp),a0
    1ab8:	|  |        |         move.w #0,66(a0)

        custom->bltapt = (APTR) tmpbuffer + 2;
    1abe:	|  |        |         move.l 42(sp),d0
    1ac2:	|  |        |         addq.l #2,d0
    1ac4:	|  |        |         movea.l 74(sp),a0
    1ac8:	|  |        |         move.l d0,80(a0)
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1acc:	|  |        |         movea.l 100(sp),a0
    1ad0:	|  |        |         move.l 24(a0),d2
    1ad4:	|  |        |         movea.l 100(sp),a0
    1ad8:	|  |        |         move.l (a0),d0
    1ada:	|  |        |     /-- bpl.s 1ade <CstDrawZBuffer+0x5f6>
    1adc:	|  |        |     |   addq.l #7,d0
    1ade:	|  |        |     \-> asr.l #3,d0
    1ae0:	|  |        |         movea.l 100(sp),a0
    1ae4:	|  |        |         move.l 4(a0),d1
    1ae8:	|  |        |         move.l d1,-(sp)
    1aea:	|  |        |         move.l d0,-(sp)
    1aec:	|  |        |         jsr 17be6 <__mulsi3>
    1af2:	|  |        |         addq.l #8,sp
    1af4:	|  |        |         move.l d0,d1
    1af6:	|  |        |         move.l d1,d0
    1af8:	|  |        |         add.l d0,d0
    1afa:	|  |        |         add.l d0,d0
    1afc:	|  |        |         add.l d1,d0
    1afe:	|  |        |         add.l d2,d0
    1b00:	|  |        |         movea.l 74(sp),a0
    1b04:	|  |        |         move.l d0,76(a0)
        custom->bltdpt = (APTR) returnvalue;
    1b08:	|  |        |         movea.l 74(sp),a0
    1b0c:	|  |        |         move.l 58(sp),84(a0)
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    1b12:	|  |        |         movea.l 100(sp),a0
    1b16:	|  |        |         move.l 4(a0),d0
    1b1a:	|  |        |         move.l d0,d0
    1b1c:	|  |        |         move.w d0,d1
    1b1e:	|  |        |         lsl.w #6,d1
    1b20:	|  |        |         movea.l 100(sp),a0
    1b24:	|  |        |         move.l (a0),d0
    1b26:	|  |        |         movea.l d0,a0
    1b28:	|  |        |         cmpa.w #0,a0
    1b2c:	|  |        |     /-- bge.s 1b32 <CstDrawZBuffer+0x64a>
    1b2e:	|  |        |     |   lea 15(a0),a0
    1b32:	|  |        |     \-> move.l a0,d0
    1b34:	|  |        |         asr.l #4,d0
    1b36:	|  |        |         move.l d0,d0
    1b38:	|  |        |         add.w d1,d0
    1b3a:	|  |        |         movea.l 74(sp),a0
    1b3e:	|  |        |         move.w d0,88(a0)

        zbuffer = zbuffer->nextPanel;
    1b42:	|  |        |         movea.l 104(sp),a0
    1b46:	|  |        |         move.l 24(a0),104(sp)
  while(zbuffer) 
    1b4c:	|  \--------|-------> tst.l 104(sp)
    1b50:	\-----------|-------- bne.w 1618 <CstDrawZBuffer+0x130>
      }
    }
  }
  FreeVec( tmpbuffer);
    1b54:	            |         move.l 42(sp),38(sp)
    1b5a:	            |         move.l 1c9a8 <SysBase>,d0
    1b60:	            |         movea.l d0,a6
    1b62:	            |         movea.l 38(sp),a1
    1b66:	            |         jsr -690(a6)
  if(zbufferset == 0)
    1b6a:	            |         tst.w 94(sp)
    1b6e:	            |  /----- bne.w 1c44 <CstDrawZBuffer+0x75c>
  {
    WaitBlit();
    1b72:	            |  |      move.l 1c9b4 <GfxBase>,d0
    1b78:	            |  |      movea.l d0,a6
    1b7a:	            |  |      jsr -228(a6)

    custom->bltafwm = 0xffff;
    1b7e:	            |  |      movea.l 74(sp),a0
    1b82:	            |  |      move.w #-1,68(a0)
    custom->bltalwm = 0xffff;
    1b88:	            |  |      movea.l 74(sp),a0
    1b8c:	            |  |      move.w #-1,70(a0)
    custom->bltamod = 0;
    1b92:	            |  |      movea.l 74(sp),a0
    1b96:	            |  |      move.w #0,100(a0)
    custom->bltbmod = 0;
    1b9c:	            |  |      movea.l 74(sp),a0
    1ba0:	            |  |      move.w #0,98(a0)
    custom->bltcmod = 0;
    1ba6:	            |  |      movea.l 74(sp),a0
    1baa:	            |  |      move.w #0,96(a0)
    custom->bltdmod = 0;
    1bb0:	            |  |      movea.l 74(sp),a0
    1bb4:	            |  |      move.w #0,102(a0)
    custom->bltcon0 = 0x9f0; //Copy A to D
    1bba:	            |  |      movea.l 74(sp),a0
    1bbe:	            |  |      move.w #2544,64(a0)
    custom->bltcon1 = 0;        
    1bc4:	            |  |      movea.l 74(sp),a0
    1bc8:	            |  |      move.w #0,66(a0)

    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1bce:	            |  |      movea.l 100(sp),a0
    1bd2:	            |  |      move.l 24(a0),d2
    1bd6:	            |  |      movea.l 100(sp),a0
    1bda:	            |  |      move.l (a0),d0
    1bdc:	            |  |  /-- bpl.s 1be0 <CstDrawZBuffer+0x6f8>
    1bde:	            |  |  |   addq.l #7,d0
    1be0:	            |  |  \-> asr.l #3,d0
    1be2:	            |  |      movea.l 100(sp),a0
    1be6:	            |  |      move.l 4(a0),d1
    1bea:	            |  |      move.l d1,-(sp)
    1bec:	            |  |      move.l d0,-(sp)
    1bee:	            |  |      jsr 17be6 <__mulsi3>
    1bf4:	            |  |      addq.l #8,sp
    1bf6:	            |  |      move.l d0,d1
    1bf8:	            |  |      move.l d1,d0
    1bfa:	            |  |      add.l d0,d0
    1bfc:	            |  |      add.l d0,d0
    1bfe:	            |  |      add.l d1,d0
    1c00:	            |  |      add.l d2,d0
    1c02:	            |  |      movea.l 74(sp),a0
    1c06:	            |  |      move.l d0,80(a0)
    custom->bltdpt = (APTR) returnvalue;
    1c0a:	            |  |      movea.l 74(sp),a0
    1c0e:	            |  |      move.l 58(sp),84(a0)
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1c14:	            |  |      movea.l 100(sp),a0
    1c18:	            |  |      move.l 4(a0),d0
    1c1c:	            |  |      move.l d0,d0
    1c1e:	            |  |      move.w d0,d1
    1c20:	            |  |      lsl.w #6,d1
    1c22:	            |  |      movea.l 100(sp),a0
    1c26:	            |  |      move.l (a0),d0
    1c28:	            |  |      movea.l d0,a0
    1c2a:	            |  |      cmpa.w #0,a0
    1c2e:	            |  |  /-- bge.s 1c34 <CstDrawZBuffer+0x74c>
    1c30:	            |  |  |   lea 15(a0),a0
    1c34:	            |  |  \-> move.l a0,d0
    1c36:	            |  |      asr.l #4,d0
    1c38:	            |  |      move.l d0,d0
    1c3a:	            |  |      add.w d1,d0
    1c3c:	            |  |      movea.l 74(sp),a0
    1c40:	            |  |      move.w d0,88(a0)

  }

  return returnvalue;
    1c44:	            |  \----> move.l 58(sp),d0

}
    1c48:	            \-------> move.l (sp)+,d2
    1c4a:	                      movea.l (sp)+,a6
    1c4c:	                      lea 88(sp),sp
    1c50:	                      rts

00001c52 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1c52:	    lea -20(sp),sp
    1c56:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1c58:	    move.l 1c8dc <CstDrawBuffer>,d0
    1c5e:	/-- beq.s 1c78 <CstFreeBuffer+0x26>
    1c60:	|   move.l 1c8dc <CstDrawBuffer>,20(sp)
    1c68:	|   move.l 1c9a8 <SysBase>,d0
    1c6e:	|   movea.l d0,a6
    1c70:	|   movea.l 20(sp),a1
    1c74:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    1c78:	\-> move.l 1c8d8 <CstViewBuffer>,d0
    1c7e:	/-- beq.s 1c98 <CstFreeBuffer+0x46>
    1c80:	|   move.l 1c8d8 <CstViewBuffer>,16(sp)
    1c88:	|   move.l 1c9a8 <SysBase>,d0
    1c8e:	|   movea.l d0,a6
    1c90:	|   movea.l 16(sp),a1
    1c94:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    1c98:	\-> move.l 1c8d2 <CstCopperList>,d0
    1c9e:	/-- beq.s 1cb8 <CstFreeBuffer+0x66>
    1ca0:	|   move.l 1c8d2 <CstCopperList>,12(sp)
    1ca8:	|   move.l 1c9a8 <SysBase>,d0
    1cae:	|   movea.l d0,a6
    1cb0:	|   movea.l 12(sp),a1
    1cb4:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    1cb8:	\-> move.l 1c8ca <CstBackDrop>,d0
    1cbe:	/-- beq.s 1cd8 <CstFreeBuffer+0x86>
    1cc0:	|   move.l 1c8ca <CstBackDrop>,8(sp)
    1cc8:	|   move.l 1c9a8 <SysBase>,d0
    1cce:	|   movea.l d0,a6
    1cd0:	|   movea.l 8(sp),a1
    1cd4:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    1cd8:	\-> move.l 1c8ce <CstBackDropBackup>,d0
    1cde:	/-- beq.s 1cf8 <CstFreeBuffer+0xa6>
    1ce0:	|   move.l 1c8ce <CstBackDropBackup>,4(sp)
    1ce8:	|   move.l 1c9a8 <SysBase>,d0
    1cee:	|   movea.l d0,a6
    1cf0:	|   movea.l 4(sp),a1
    1cf4:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    1cf8:	\-> clr.l 1c8dc <CstDrawBuffer>
  CstViewBuffer = NULL;
    1cfe:	    clr.l 1c8d8 <CstViewBuffer>
  CstCopperList = NULL;
    1d04:	    clr.l 1c8d2 <CstCopperList>
  CstBackDrop = NULL;
    1d0a:	    clr.l 1c8ca <CstBackDrop>

}
    1d10:	    nop
    1d12:	    movea.l (sp)+,a6
    1d14:	    lea 20(sp),sp
    1d18:	    rts

00001d1a <CstFreeze>:



void CstFreeze( ) {
    1d1a:	       lea -36(sp),sp
    1d1e:	       move.l a6,-(sp)
    1d20:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    1d22:	       pea 17ec5 <PutChar+0x1c9>
    1d28:	       jsr 17232 <KPrintF>
    1d2e:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    1d30:	       move.l 1c8fc <winWidth>,d0
    1d36:	       lsr.l #3,d0
    1d38:	       move.l d0,d1
    1d3a:	       move.l 1c900 <winHeight>,d0
    1d40:	       move.l d0,d0
    1d42:	       muls.w d0,d1
    1d44:	       move.w d1,d0
    1d46:	       add.w d0,d0
    1d48:	       add.w d0,d0
    1d4a:	       move.w d0,d2
    1d4c:	       add.w d1,d2
    1d4e:	       move.w d2,26(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1d52:	       move.l #14675968,22(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    1d5a:	       moveq #0,d0
    1d5c:	       move.w 26(sp),d0
    1d60:	       move.l d0,18(sp)
    1d64:	       clr.l 14(sp)
    1d68:	       move.l 1c9a8 <SysBase>,d0
    1d6e:	       movea.l d0,a6
    1d70:	       move.l 18(sp),d0
    1d74:	       move.l 14(sp),d1
    1d78:	       jsr -684(a6)
    1d7c:	       move.l d0,10(sp)
    1d80:	       move.l 10(sp),d0
    1d84:	       move.l d0,1c8ce <CstBackDropBackup>
  if( !CstBackDropBackup)
    1d8a:	       move.l 1c8ce <CstBackDropBackup>,d0
    1d90:	   /-- bne.s 1da0 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1d92:	   |   pea 17eec <PutChar+0x1f0>
    1d98:	   |   jsr 17232 <KPrintF>
    1d9e:	   |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    1da0:	   \-> move.l 1c900 <winHeight>,d0
    1da6:	       move.l d0,d0
    1da8:	       movea.w d0,a1
    1daa:	       move.l 1c8fc <winWidth>,d0
    1db0:	       move.l d0,d0
    1db2:	       movea.w d0,a0
    1db4:	       move.l 1c8ce <CstBackDropBackup>,d0
    1dba:	       clr.l -(sp)
    1dbc:	       pea 5 <_start+0x5>
    1dc0:	       move.l a1,-(sp)
    1dc2:	       move.l a0,-(sp)
    1dc4:	       pea 17f24 <PutChar+0x228>
    1dca:	       move.l d0,-(sp)
    1dcc:	       jsr 1731a <debug_register_bitmap>
    1dd2:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1dd6:	       move.l 1c8ca <CstBackDrop>,40(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1dde:	       move.l 1c8ce <CstBackDropBackup>,36(sp)
  for(int i=0;i<size/4;i++) 
    1de6:	       clr.l 32(sp)
    1dea:	   /-- bra.s 1e10 <CstFreeze+0xf6>
  {
    *dst++ = *src++;
    1dec:	/--|-> move.l 40(sp),d1
    1df0:	|  |   move.l d1,d0
    1df2:	|  |   addq.l #4,d0
    1df4:	|  |   move.l d0,40(sp)
    1df8:	|  |   move.l 36(sp),d0
    1dfc:	|  |   move.l d0,d2
    1dfe:	|  |   addq.l #4,d2
    1e00:	|  |   move.l d2,36(sp)
    1e04:	|  |   movea.l d1,a0
    1e06:	|  |   move.l (a0),d1
    1e08:	|  |   movea.l d0,a0
    1e0a:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1e0c:	|  |   addq.l #1,32(sp)
    1e10:	|  \-> move.w 26(sp),d0
    1e14:	|      lsr.w #2,d0
    1e16:	|      move.w d0,d0
    1e18:	|      andi.l #65535,d0
    1e1e:	|      cmp.l 32(sp),d0
    1e22:	\----- bgt.s 1dec <CstFreeze+0xd2>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1e24:	       move.l 1c8d8 <CstViewBuffer>,40(sp)
  dst = (ULONG *) CstBackDrop;
    1e2c:	       move.l 1c8ca <CstBackDrop>,36(sp)

  for(int i=0;i<size/4;i++) 
    1e34:	       clr.l 28(sp)
    1e38:	   /-- bra.s 1e5e <CstFreeze+0x144>
  {
    *dst++ = *src++;
    1e3a:	/--|-> move.l 40(sp),d1
    1e3e:	|  |   move.l d1,d0
    1e40:	|  |   addq.l #4,d0
    1e42:	|  |   move.l d0,40(sp)
    1e46:	|  |   move.l 36(sp),d0
    1e4a:	|  |   move.l d0,d2
    1e4c:	|  |   addq.l #4,d2
    1e4e:	|  |   move.l d2,36(sp)
    1e52:	|  |   movea.l d1,a0
    1e54:	|  |   move.l (a0),d1
    1e56:	|  |   movea.l d0,a0
    1e58:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1e5a:	|  |   addq.l #1,28(sp)
    1e5e:	|  \-> move.w 26(sp),d0
    1e62:	|      lsr.w #2,d0
    1e64:	|      move.w d0,d0
    1e66:	|      andi.l #65535,d0
    1e6c:	|      cmp.l 28(sp),d0
    1e70:	\----- bgt.s 1e3a <CstFreeze+0x120>
  }

  CstApplyBackDropCounter = 2;
    1e72:	       move.w #2,1c8d6 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1e7a:	       move.l 1c8fc <winWidth>,d0
    1e80:	       lsr.l #4,d0
    1e82:	       movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    1e88:	       move.l a0,d1
    1e8a:	       addq.l #2,d1
    1e8c:	       move.l d1,1c8ec <CstBackDropBufferApplyCursor>
    1e92:	       move.l d0,d0
    1e94:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    1e96:	       move.l 1c900 <winHeight>,d0
    1e9c:	       movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    1ea2:	       move.l a0,d1
    1ea4:	       addq.l #2,d1
    1ea6:	       move.l d1,1c8ec <CstBackDropBufferApplyCursor>
    1eac:	       move.l d0,d0
    1eae:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1eb0:	       movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    1eb6:	       move.l a0,d0
    1eb8:	       addq.l #2,d0
    1eba:	       move.l d0,1c8ec <CstBackDropBufferApplyCursor>
    1ec0:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1ec2:	       movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    1ec8:	       move.l a0,d0
    1eca:	       addq.l #2,d0
    1ecc:	       move.l d0,1c8ec <CstBackDropBufferApplyCursor>
    1ed2:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1ed4:	       movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    1eda:	       move.l a0,d0
    1edc:	       addq.l #2,d0
    1ede:	       move.l d0,1c8ec <CstBackDropBufferApplyCursor>
    1ee4:	       clr.w (a0)

  KPrintF("CstFreeze: Finished");
    1ee6:	       pea 17f33 <PutChar+0x237>
    1eec:	       jsr 17232 <KPrintF>
    1ef2:	       addq.l #4,sp

}  
    1ef4:	       nop
    1ef6:	       move.l (sp)+,d2
    1ef8:	       movea.l (sp)+,a6
    1efa:	       lea 36(sp),sp
    1efe:	       rts

00001f00 <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1f00:	             lea -144(sp),sp
    1f04:	             movem.l d2-d4/a6,-(sp)

	KPrintF("CstLoadBackDrop: Loading of Background started");
    1f08:	             pea 17f47 <PutChar+0x24b>
    1f0e:	             jsr 17232 <KPrintF>
    1f14:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1f16:	             move.l 164(sp),-(sp)
    1f1a:	             jsr 6bc <get2bytes>
    1f20:	             addq.l #4,sp
    1f22:	             move.w d0,134(sp)
  UWORD height = get2bytes(fp);  
    1f26:	             move.l 164(sp),-(sp)
    1f2a:	             jsr 6bc <get2bytes>
    1f30:	             addq.l #4,sp
    1f32:	             move.w d0,132(sp)

  UWORD widthbyteslayer = width/8;
    1f36:	             move.w 134(sp),d0
    1f3a:	             lsr.w #3,d0
    1f3c:	             move.w d0,130(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    1f40:	             move.w 130(sp),d0
    1f44:	             lsr.w #1,d0
    1f46:	             move.w d0,128(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1f4a:	             move.l 1c8fc <winWidth>,d0
    1f50:	             lsr.l #3,d0
    1f52:	             move.w d0,126(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1f56:	             move.w 130(sp),d0
    1f5a:	             muls.w 132(sp),d0
    1f5e:	             move.w d0,124(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    1f62:	             move.w 124(sp),d1
    1f66:	             move.w d1,d0
    1f68:	             add.w d0,d0
    1f6a:	             add.w d0,d0
    1f6c:	             move.w d0,d2
    1f6e:	             add.w d1,d2
    1f70:	             move.w d2,122(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    1f74:	             move.w 1c8c4 <CstPaletteLoaded>,d0
    1f7a:	/----------- bne.w 2014 <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    1f7e:	|            move.w #384,120(sp)

    if(CstPalette) {
    1f84:	|            move.l 1c8f4 <CstPalette>,d0
    1f8a:	|        /-- beq.s 1fa4 <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    1f8c:	|        |   move.l 1c8f4 <CstPalette>,116(sp)
    1f94:	|        |   move.l 1c9a8 <SysBase>,d0
    1f9a:	|        |   movea.l d0,a6
    1f9c:	|        |   movea.l 116(sp),a1
    1fa0:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    1fa4:	|        \-> moveq #64,d0
    1fa6:	|            move.l d0,112(sp)
    1faa:	|            clr.l 108(sp)
    1fae:	|            move.l 1c9a8 <SysBase>,d0
    1fb4:	|            movea.l d0,a6
    1fb6:	|            move.l 112(sp),d0
    1fba:	|            move.l 108(sp),d1
    1fbe:	|            jsr -684(a6)
    1fc2:	|            move.l d0,104(sp)
    1fc6:	|            move.l 104(sp),d0
    1fca:	|            move.l d0,1c8f4 <CstPalette>
    CstPaletteLoaded = 1;
    1fd0:	|            move.w #1,1c8c4 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    1fd8:	|            move.l 1c8f4 <CstPalette>,156(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1fe0:	|            clr.l 152(sp)
    1fe4:	|        /-- bra.s 200a <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    1fe6:	|     /--|-> move.l 164(sp),-(sp)
    1fea:	|     |  |   jsr 6bc <get2bytes>
    1ff0:	|     |  |   addq.l #4,sp
    1ff2:	|     |  |   move.l d0,d1
    1ff4:	|     |  |   move.l 156(sp),d0
    1ff8:	|     |  |   move.l d0,d2
    1ffa:	|     |  |   addq.l #2,d2
    1ffc:	|     |  |   move.l d2,156(sp)
    2000:	|     |  |   move.l d1,d1
    2002:	|     |  |   movea.l d0,a0
    2004:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2006:	|     |  |   addq.l #1,152(sp)
    200a:	|     |  \-> moveq #31,d0
    200c:	|     |      cmp.l 152(sp),d0
    2010:	|     \----- bge.s 1fe6 <CstLoadBackdrop+0xe6>
    2012:	|  /-------- bra.s 2032 <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2014:	\--|-------> clr.l 148(sp)
    2018:	   |     /-- bra.s 202a <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    201a:	   |  /--|-> move.l 164(sp),-(sp)
    201e:	   |  |  |   jsr 6bc <get2bytes>
    2024:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2026:	   |  |  |   addq.l #1,148(sp)
    202a:	   |  |  \-> moveq #31,d2
    202c:	   |  |      cmp.l 148(sp),d2
    2030:	   |  \----- bge.s 201a <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    2032:	   \-------> moveq #0,d0
    2034:	             move.w 122(sp),d0
    2038:	             move.l d0,100(sp)
    203c:	             moveq #2,d0
    203e:	             move.l d0,96(sp)
    2042:	             move.l 1c9a8 <SysBase>,d0
    2048:	             movea.l d0,a6
    204a:	             move.l 100(sp),d0
    204e:	             move.l 96(sp),d1
    2052:	             jsr -684(a6)
    2056:	             move.l d0,92(sp)
    205a:	             move.l 92(sp),d0
    205e:	             move.l d0,88(sp)
  if( !tmpbuffer)
    2062:	         /-- bne.s 2072 <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    2064:	         |   pea 17f76 <PutChar+0x27a>
    206a:	         |   jsr 17232 <KPrintF>
    2070:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    2072:	         \-> moveq #0,d0
    2074:	             move.w 124(sp),d0
    2078:	             move.l d0,84(sp)
    207c:	             moveq #2,d2
    207e:	             move.l d2,80(sp)
    2082:	             move.l 1c9a8 <SysBase>,d0
    2088:	             movea.l d0,a6
    208a:	             move.l 84(sp),d0
    208e:	             move.l 80(sp),d1
    2092:	             jsr -684(a6)
    2096:	             move.l d0,76(sp)
    209a:	             move.l 76(sp),d0
    209e:	             move.l d0,72(sp)
  if( !tmpmask)
    20a2:	         /-- bne.s 20b2 <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    20a4:	         |   pea 17fac <PutChar+0x2b0>
    20aa:	         |   jsr 17232 <KPrintF>
    20b0:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    20b2:	         \-> move.w 132(sp),d0
    20b6:	             movea.w d0,a1
    20b8:	             move.w 134(sp),d0
    20bc:	             movea.w d0,a0
    20be:	             clr.l -(sp)
    20c0:	             pea 5 <_start+0x5>
    20c4:	             move.l a1,-(sp)
    20c6:	             move.l a0,-(sp)
    20c8:	             pea 17fe0 <PutChar+0x2e4>
    20ce:	             move.l 108(sp),-(sp)
    20d2:	             jsr 1731a <debug_register_bitmap>
    20d8:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    20dc:	             move.w 132(sp),d0
    20e0:	             movea.w d0,a1
    20e2:	             move.w 134(sp),d0
    20e6:	             movea.w d0,a0
    20e8:	             clr.l -(sp)
    20ea:	             pea 1 <_start+0x1>
    20ee:	             move.l a1,-(sp)
    20f0:	             move.l a0,-(sp)
    20f2:	             pea 17fee <PutChar+0x2f2>
    20f8:	             move.l 108(sp),-(sp)
    20fc:	             jsr 1731a <debug_register_bitmap>
    2102:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    2106:	             move.l 164(sp),68(sp)
    210c:	             move.l 88(sp),64(sp)
    2112:	             moveq #2,d0
    2114:	             move.l d0,60(sp)
    2118:	             move.w 122(sp),d0
    211c:	             lsr.w #1,d0
    211e:	             move.w d0,d0
    2120:	             andi.l #65535,d0
    2126:	             move.l d0,56(sp)
    212a:	             move.l 1c9b0 <DOSBase>,d0
    2130:	             movea.l d0,a6
    2132:	             move.l 68(sp),d1
    2136:	             move.l 64(sp),d2
    213a:	             move.l 60(sp),d3
    213e:	             move.l 56(sp),d4
    2142:	             jsr -324(a6)
    2146:	             move.l d0,52(sp)
    214a:	             move.l 52(sp),d0
    214e:	             move.w d0,50(sp)
  if(!count) {
    2152:	         /-- bne.s 2166 <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    2154:	         |   pea 17ffa <PutChar+0x2fe>
    215a:	         |   jsr 17232 <KPrintF>
    2160:	         |   addq.l #4,sp
    return;
    2162:	   /-----|-- bra.w 23b2 <CstLoadBackdrop+0x4b2>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    2166:	   |     \-> move.l 164(sp),46(sp)
    216c:	   |         move.l 72(sp),42(sp)
    2172:	   |         moveq #2,d2
    2174:	   |         move.l d2,38(sp)
    2178:	   |         move.w 124(sp),d0
    217c:	   |         lsr.w #1,d0
    217e:	   |         move.w d0,d0
    2180:	   |         andi.l #65535,d0
    2186:	   |         move.l d0,34(sp)
    218a:	   |         move.l 1c9b0 <DOSBase>,d0
    2190:	   |         movea.l d0,a6
    2192:	   |         move.l 46(sp),d1
    2196:	   |         move.l 42(sp),d2
    219a:	   |         move.l 38(sp),d3
    219e:	   |         move.l 34(sp),d4
    21a2:	   |         jsr -324(a6)
    21a6:	   |         move.l d0,30(sp)
    21aa:	   |         move.l 30(sp),d0
    21ae:	   |         move.w d0,50(sp)
   

  if(!count) {
    21b2:	   |     /-- bne.s 21c6 <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    21b4:	   |     |   pea 17ffa <PutChar+0x2fe>
    21ba:	   |     |   jsr 17232 <KPrintF>
    21c0:	   |     |   addq.l #4,sp
    return;
    21c2:	   +-----|-- bra.w 23b2 <CstLoadBackdrop+0x4b2>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    21c6:	   |     \-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    21ce:	   |         move.l 1c8ca <CstBackDrop>,d0
    21d4:	   |         move.l d0,144(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    21d8:	   |         move.l 172(sp),d0
    21dc:	   |         move.w d0,d1
    21de:	   |         muls.w 126(sp),d1
    21e2:	   |         move.l 168(sp),d0
    21e6:	   |     /-- bpl.s 21ea <CstLoadBackdrop+0x2ea>
    21e8:	   |     |   addq.l #7,d0
    21ea:	   |     \-> asr.l #3,d0
    21ec:	   |         move.l d0,d0
    21ee:	   |         movea.w d1,a0
    21f0:	   |         adda.w d0,a0
    21f2:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    21f6:	   |         moveq #0,d0
    21f8:	   |         move.w 24(sp),d0
    21fc:	   |         add.l d0,144(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    2200:	   |         pea 18015 <PutChar+0x319>
    2206:	   |         jsr 17232 <KPrintF>
    220c:	   |         addq.l #4,sp


  WaitBlit();
    220e:	   |         move.l 1c9b4 <GfxBase>,d0
    2214:	   |         movea.l d0,a6
    2216:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    221a:	   |         movea.l 26(sp),a0
    221e:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    2224:	   |         movea.l 26(sp),a0
    2228:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    222e:	   |         movea.l 26(sp),a0
    2232:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    2238:	   |         movea.l 26(sp),a0
    223c:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    2242:	   |         move.w 126(sp),d0
    2246:	   |         sub.w 130(sp),d0
    224a:	   |         movea.l 26(sp),a0
    224e:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    2252:	   |         move.w 126(sp),d0
    2256:	   |         sub.w 130(sp),d0
    225a:	   |         movea.l 26(sp),a0
    225e:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    2262:	   |         movea.l 26(sp),a0
    2266:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    226c:	   |         movea.l 26(sp),a0
    2270:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    2276:	   |         move.l 88(sp),140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    227c:	   |         clr.l 136(sp)
    2280:	   |     /-- bra.s 22e2 <CstLoadBackdrop+0x3e2>
  {    
    custom->bltapt = (APTR) tmpmask;
    2282:	   |  /--|-> movea.l 26(sp),a0
    2286:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    228c:	   |  |  |   move.l 140(sp),d0
    2290:	   |  |  |   movea.l 26(sp),a0
    2294:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    2298:	   |  |  |   move.l 144(sp),d0
    229c:	   |  |  |   movea.l 26(sp),a0
    22a0:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    22a4:	   |  |  |   move.l 144(sp),d0
    22a8:	   |  |  |   movea.l 26(sp),a0
    22ac:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    22b0:	   |  |  |   move.w 132(sp),d0
    22b4:	   |  |  |   lsl.w #6,d0
    22b6:	   |  |  |   add.w 128(sp),d0
    22ba:	   |  |  |   movea.l 26(sp),a0
    22be:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    22c2:	   |  |  |   moveq #0,d0
    22c4:	   |  |  |   move.w 124(sp),d0
    22c8:	   |  |  |   add.l d0,140(sp)
    backdropcursor += CstBackdropSizePlane;
    22cc:	   |  |  |   move.w 1c8c8 <CstBackdropSizePlane>,d0
    22d2:	   |  |  |   move.w d0,d0
    22d4:	   |  |  |   andi.l #65535,d0
    22da:	   |  |  |   add.l d0,144(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    22de:	   |  |  |   addq.l #1,136(sp)
    22e2:	   |  |  \-> moveq #4,d0
    22e4:	   |  |      cmp.l 136(sp),d0
    22e8:	   |  \----- bge.s 2282 <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    22ea:	   |         move.l 1c9b4 <GfxBase>,d0
    22f0:	   |         movea.l d0,a6
    22f2:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    22f6:	   |         pea 18034 <PutChar+0x338>
    22fc:	   |         jsr 17232 <KPrintF>
    2302:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    2304:	   |         move.l 88(sp),20(sp)
    230a:	   |         move.l 1c9a8 <SysBase>,d0
    2310:	   |         movea.l d0,a6
    2312:	   |         movea.l 20(sp),a1
    2316:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    231a:	   |         move.l 72(sp),16(sp)
    2320:	   |         move.l 1c9a8 <SysBase>,d0
    2326:	   |         movea.l d0,a6
    2328:	   |         movea.l 16(sp),a1
    232c:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    2330:	   |         move.w #2,1c8d6 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    2338:	   |         move.l 1c8fc <winWidth>,d0
    233e:	   |         lsr.l #4,d0
    2340:	   |         movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    2346:	   |         move.l a0,d1
    2348:	   |         addq.l #2,d1
    234a:	   |         move.l d1,1c8ec <CstBackDropBufferApplyCursor>
    2350:	   |         move.l d0,d0
    2352:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    2354:	   |         move.l 1c900 <winHeight>,d0
    235a:	   |         movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    2360:	   |         move.l a0,d1
    2362:	   |         addq.l #2,d1
    2364:	   |         move.l d1,1c8ec <CstBackDropBufferApplyCursor>
    236a:	   |         move.l d0,d0
    236c:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    236e:	   |         movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    2374:	   |         move.l a0,d0
    2376:	   |         addq.l #2,d0
    2378:	   |         move.l d0,1c8ec <CstBackDropBufferApplyCursor>
    237e:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2380:	   |         movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    2386:	   |         move.l a0,d0
    2388:	   |         addq.l #2,d0
    238a:	   |         move.l d0,1c8ec <CstBackDropBufferApplyCursor>
    2390:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2392:	   |         movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    2398:	   |         move.l a0,d0
    239a:	   |         addq.l #2,d0
    239c:	   |         move.l d0,1c8ec <CstBackDropBufferApplyCursor>
    23a2:	   |         clr.w (a0)

  KPrintF("CstLoadBackDrop: Finished");
    23a4:	   |         pea 18054 <PutChar+0x358>
    23aa:	   |         jsr 17232 <KPrintF>
    23b0:	   |         addq.l #4,sp

}
    23b2:	   \-------> movem.l (sp)+,d2-d4/a6
    23b6:	             lea 144(sp),sp
    23ba:	             rts

000023bc <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    23bc:	                lea -72(sp),sp
    23c0:	                move.l a6,-(sp)
    23c2:	                move.l d2,-(sp)
    23c4:	                move.l 88(sp),d1
    23c8:	                move.l 92(sp),d0
    23cc:	                move.w d1,d1
    23ce:	                move.w d1,10(sp)
    23d2:	                move.w d0,d0
    23d4:	                move.w d0,8(sp)
  UWORD *destination = 0;
    23d8:	                clr.l 28(sp)
  CstApplyBackDropCounter = 2;
    23dc:	                move.w #2,1c8d6 <CstApplyBackDropCounter>
  destination = (UWORD *) CstBackDrop;      
    23e4:	                move.l 1c8ca <CstBackDrop>,28(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    23ec:	                clr.l 56(sp)

  blitwidth = single->width/16;
    23f0:	                movea.l 84(sp),a0
    23f4:	                move.l (a0),d0
    23f6:	                movea.l d0,a0
    23f8:	                cmpa.w #0,a0
    23fc:	            /-- bge.s 2402 <CstPasteChar+0x46>
    23fe:	            |   lea 15(a0),a0
    2402:	            \-> move.l a0,d0
    2404:	                asr.l #4,d0
    2406:	                move.l d0,40(sp)
  if(blitwidth == 0) blitwidth = 1;
    240a:	            /-- bne.s 2412 <CstPasteChar+0x56>
    240c:	            |   moveq #1,d0
    240e:	            |   move.l d0,40(sp)

  if( y < 0) {
    2412:	            \-> tst.w 8(sp)
    2416:	         /----- bge.s 245e <CstPasteChar+0xa2>
    if(y + single->height < 0) {
    2418:	         |      movea.w 8(sp),a1
    241c:	         |      movea.l 84(sp),a0
    2420:	         |      move.l 4(a0),d0
    2424:	         |      add.l a1,d0
    2426:	         |  /-- bpl.s 243a <CstPasteChar+0x7e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2428:	         |  |   pea 1806e <PutChar+0x372>
    242e:	         |  |   jsr 17232 <KPrintF>
    2434:	         |  |   addq.l #4,sp
      return;
    2436:	/--------|--|-- bra.w 2afa <CstPasteChar+0x73e>
    }
    ystartdst = 0;
    243a:	|        |  \-> clr.l 52(sp)
    ystartsrc = y*-1;
    243e:	|        |      move.w 8(sp),d0
    2442:	|        |      ext.l d0
    2444:	|        |      neg.l d0
    2446:	|        |      move.l d0,48(sp)
    blitheight = single->height+y;
    244a:	|        |      movea.l 84(sp),a0
    244e:	|        |      move.l 4(a0),d0
    2452:	|        |      movea.w 8(sp),a0
    2456:	|        |      add.l a0,d0
    2458:	|        |      move.l d0,44(sp)
    245c:	|     /--|----- bra.s 24d0 <CstPasteChar+0x114>
  } else if(y+single->height > (int) winHeight) {
    245e:	|     |  \----> movea.w 8(sp),a1
    2462:	|     |         movea.l 84(sp),a0
    2466:	|     |         move.l 4(a0),d0
    246a:	|     |         move.l a1,d1
    246c:	|     |         add.l d0,d1
    246e:	|     |         move.l 1c900 <winHeight>,d0
    2474:	|     |         cmp.l d1,d0
    2476:	|     |  /----- bge.s 24b8 <CstPasteChar+0xfc>
    if(y  > (int) winHeight) {
    2478:	|     |  |      movea.w 8(sp),a0
    247c:	|     |  |      move.l 1c900 <winHeight>,d0
    2482:	|     |  |      cmp.l a0,d0
    2484:	|     |  |  /-- bge.s 2498 <CstPasteChar+0xdc>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2486:	|     |  |  |   pea 1806e <PutChar+0x372>
    248c:	|     |  |  |   jsr 17232 <KPrintF>
    2492:	|     |  |  |   addq.l #4,sp
      return;
    2494:	+-----|--|--|-- bra.w 2afa <CstPasteChar+0x73e>
    }
    ystartdst = y;
    2498:	|     |  |  \-> movea.w 8(sp),a0
    249c:	|     |  |      move.l a0,52(sp)
    ystartsrc = 0;
    24a0:	|     |  |      clr.l 48(sp)
    blitheight = winHeight-y;
    24a4:	|     |  |      move.l 1c900 <winHeight>,d0
    24aa:	|     |  |      movea.w 8(sp),a0
    24ae:	|     |  |      move.l d0,d1
    24b0:	|     |  |      sub.l a0,d1
    24b2:	|     |  |      move.l d1,44(sp)
    24b6:	|     +--|----- bra.s 24d0 <CstPasteChar+0x114>
  } else {
    ystartdst = y;
    24b8:	|     |  \----> movea.w 8(sp),a0
    24bc:	|     |         move.l a0,52(sp)
    ystartsrc = 0;
    24c0:	|     |         clr.l 48(sp)
    blitheight = single->height;
    24c4:	|     |         movea.l 84(sp),a0
    24c8:	|     |         move.l 4(a0),d0
    24cc:	|     |         move.l d0,44(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    24d0:	|     \-------> tst.w 10(sp)
    24d4:	|        /----- bge.w 2646 <CstPasteChar+0x28a>
    if(x + single->width < 0) {
    24d8:	|        |      movea.w 10(sp),a1
    24dc:	|        |      movea.l 84(sp),a0
    24e0:	|        |      move.l (a0),d0
    24e2:	|        |      add.l a1,d0
    24e4:	|        |  /-- bpl.s 24f8 <CstPasteChar+0x13c>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    24e6:	|        |  |   pea 1806e <PutChar+0x372>
    24ec:	|        |  |   jsr 17232 <KPrintF>
    24f2:	|        |  |   addq.l #4,sp
      return;
    24f4:	+--------|--|-- bra.w 2afa <CstPasteChar+0x73e>

    }
    
    extrawords = 1;
    24f8:	|        |  \-> move.w #1,78(sp)

    cutwordssource = (x*-1)/16; 
    24fe:	|        |      move.w 10(sp),d0
    2502:	|        |  /-- bpl.s 2508 <CstPasteChar+0x14c>
    2504:	|        |  |   addi.w #15,d0
    2508:	|        |  \-> asr.w #4,d0
    250a:	|        |      neg.w d0
    250c:	|        |      move.w d0,76(sp)
    cutmaskpixel = (x*-1)%16;     
    2510:	|        |      move.w 10(sp),d0
    2514:	|        |      ext.l d0
    2516:	|        |      neg.l d0
    2518:	|        |      andi.l #-2147483633,d0
    251e:	|        |  /-- bpl.s 2528 <CstPasteChar+0x16c>
    2520:	|        |  |   subq.l #1,d0
    2522:	|        |  |   moveq #-16,d1
    2524:	|        |  |   or.l d1,d0
    2526:	|        |  |   addq.l #1,d0
    2528:	|        |  \-> move.w d0,74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    252c:	|        |      clr.w 72(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    2530:	|        |      movea.l 84(sp),a0
    2534:	|        |      move.l 24(a0),d0
    2538:	|        |      move.l d0,d1
    253a:	|        |      moveq #0,d0
    253c:	|        |      move.w 76(sp),d0
    2540:	|        |      add.l d0,d0
    2542:	|        |      move.l d1,d2
    2544:	|        |      add.l d0,d2
    2546:	|        |      movea.l 84(sp),a0
    254a:	|        |      move.l (a0),d0
    254c:	|        |      move.l 48(sp),-(sp)
    2550:	|        |      move.l d0,-(sp)
    2552:	|        |      jsr 17be6 <__mulsi3>
    2558:	|        |      addq.l #8,sp
    255a:	|        |      lsr.l #3,d0
    255c:	|        |      move.l d2,d1
    255e:	|        |      add.l d0,d1
    2560:	|        |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2564:	|        |      move.l 1c8fc <winWidth>,d0
    256a:	|        |      move.l 52(sp),-(sp)
    256e:	|        |      move.l d0,-(sp)
    2570:	|        |      jsr 17be6 <__mulsi3>
    2576:	|        |      addq.l #8,sp
    2578:	|        |      lsr.l #3,d0
    257a:	|        |      move.l 28(sp),d1
    257e:	|        |      add.l d1,d0
    2580:	|        |      move.l d0,d2
    2582:	|        |      subq.l #2,d2
    2584:	|        |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2588:	|        |      move.l 1c8fc <winWidth>,d0
    258e:	|        |      move.l 52(sp),-(sp)
    2592:	|        |      move.l d0,-(sp)
    2594:	|        |      jsr 17be6 <__mulsi3>
    259a:	|        |      addq.l #8,sp
    259c:	|        |      lsr.l #3,d0
    259e:	|        |      move.l 28(sp),d1
    25a2:	|        |      add.l d1,d0
    25a4:	|        |      move.l d0,d1
    25a6:	|        |      subq.l #2,d1
    25a8:	|        |      move.l d1,60(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    25ac:	|        |      moveq #0,d0
    25ae:	|        |      move.w 74(sp),d0
    25b2:	|        |      moveq #16,d1
    25b4:	|        |      sub.l d0,d1
    25b6:	|        |      move.l d1,d0
    25b8:	|        |      moveq #12,d2
    25ba:	|        |      lsl.l d2,d0
    25bc:	|        |      move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    25c0:	|        |      movea.l 84(sp),a0
    25c4:	|        |      move.l (a0),d0
    25c6:	|        |      movea.l d0,a0
    25c8:	|        |      cmpa.w #0,a0
    25cc:	|        |  /-- bge.s 25d2 <CstPasteChar+0x216>
    25ce:	|        |  |   lea 15(a0),a0
    25d2:	|        |  \-> move.l a0,d0
    25d4:	|        |      asr.l #4,d0
    25d6:	|        |      move.l d0,d0
    25d8:	|        |      add.w 76(sp),d0
    25dc:	|        |      movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    25e2:	|        |      move.l a0,d1
    25e4:	|        |      addq.l #2,d1
    25e6:	|        |      move.l d1,1c8ec <CstBackDropBufferApplyCursor>
    25ec:	|        |      add.w 78(sp),d0
    25f0:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    25f2:	|        |      movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    25f8:	|        |      move.l a0,d0
    25fa:	|        |      addq.l #2,d0
    25fc:	|        |      move.l d0,1c8ec <CstBackDropBufferApplyCursor>
    2602:	|        |      move.l 44(sp),d0
    2606:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2608:	|        |      movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    260e:	|        |      move.l a0,d0
    2610:	|        |      addq.l #2,d0
    2612:	|        |      move.l d0,1c8ec <CstBackDropBufferApplyCursor>
    2618:	|        |      clr.w (a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    261a:	|        |      movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    2620:	|        |      move.l a0,d0
    2622:	|        |      addq.l #2,d0
    2624:	|        |      move.l d0,1c8ec <CstBackDropBufferApplyCursor>
    262a:	|        |      move.l 52(sp),d0
    262e:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2630:	|        |      movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    2636:	|        |      move.l a0,d0
    2638:	|        |      addq.l #2,d0
    263a:	|        |      move.l d0,1c8ec <CstBackDropBufferApplyCursor>
    2640:	|        |      clr.w (a0)
    2642:	|     /--|----- bra.w 295a <CstPasteChar+0x59e>

  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    2646:	|     |  \----> movea.w 10(sp),a1
    264a:	|     |         movea.l 84(sp),a0
    264e:	|     |         move.l (a0),d0
    2650:	|     |         move.l a1,d1
    2652:	|     |         add.l d0,d1
    2654:	|     |         move.l 1c8fc <winWidth>,d0
    265a:	|     |         cmp.l d1,d0
    265c:	|     |  /----- bge.w 27f8 <CstPasteChar+0x43c>

    if(x - single->width > (int) winWidth)
    2660:	|     |  |      movea.w 10(sp),a1
    2664:	|     |  |      movea.l 84(sp),a0
    2668:	|     |  |      move.l (a0),d0
    266a:	|     |  |      move.l a1,d1
    266c:	|     |  |      sub.l d0,d1
    266e:	|     |  |      move.l 1c8fc <winWidth>,d0
    2674:	|     |  |      cmp.l d1,d0
    2676:	|     |  |  /-- bge.s 268a <CstPasteChar+0x2ce>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2678:	|     |  |  |   pea 1806e <PutChar+0x372>
    267e:	|     |  |  |   jsr 17232 <KPrintF>
    2684:	|     |  |  |   addq.l #4,sp
      return;
    2686:	+-----|--|--|-- bra.w 2afa <CstPasteChar+0x73e>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    268a:	|     |  |  \-> clr.w 78(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    268e:	|     |  |      movea.w 10(sp),a1
    2692:	|     |  |      movea.l 84(sp),a0
    2696:	|     |  |      move.l (a0),d0
    2698:	|     |  |      add.l a1,d0
    269a:	|     |  |      move.l d0,d1
    269c:	|     |  |      move.l 1c8fc <winWidth>,d0
    26a2:	|     |  |      sub.l d0,d1
    26a4:	|     |  |      move.l d1,d0
    26a6:	|     |  |      lsr.l #4,d0
    26a8:	|     |  |      move.w d0,76(sp)
    cutmaskpixel = 0;
    26ac:	|     |  |      clr.w 74(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    26b0:	|     |  |      move.w #-1,72(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    26b6:	|     |  |      movea.l 84(sp),a0
    26ba:	|     |  |      move.l 24(a0),d0
    26be:	|     |  |      move.l d0,d2
    26c0:	|     |  |      movea.l 84(sp),a0
    26c4:	|     |  |      move.l (a0),d0
    26c6:	|     |  |      move.l 48(sp),-(sp)
    26ca:	|     |  |      move.l d0,-(sp)
    26cc:	|     |  |      jsr 17be6 <__mulsi3>
    26d2:	|     |  |      addq.l #8,sp
    26d4:	|     |  |      lsr.l #3,d0
    26d6:	|     |  |      move.l d2,d1
    26d8:	|     |  |      add.l d0,d1
    26da:	|     |  |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    26de:	|     |  |      move.l 1c8fc <winWidth>,d0
    26e4:	|     |  |      move.l 52(sp),-(sp)
    26e8:	|     |  |      move.l d0,-(sp)
    26ea:	|     |  |      jsr 17be6 <__mulsi3>
    26f0:	|     |  |      addq.l #8,sp
    26f2:	|     |  |      lsr.l #3,d0
    26f4:	|     |  |      move.l 28(sp),d1
    26f8:	|     |  |      add.l d0,d1
    26fa:	|     |  |      move.w 10(sp),d0
    26fe:	|     |  |  /-- bpl.s 2704 <CstPasteChar+0x348>
    2700:	|     |  |  |   addi.w #15,d0
    2704:	|     |  |  \-> asr.w #4,d0
    2706:	|     |  |      movea.w d0,a0
    2708:	|     |  |      move.l a0,d0
    270a:	|     |  |      add.l a0,d0
    270c:	|     |  |      move.l d1,d2
    270e:	|     |  |      add.l d0,d2
    2710:	|     |  |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2714:	|     |  |      move.l 1c8fc <winWidth>,d0
    271a:	|     |  |      move.l 52(sp),-(sp)
    271e:	|     |  |      move.l d0,-(sp)
    2720:	|     |  |      jsr 17be6 <__mulsi3>
    2726:	|     |  |      addq.l #8,sp
    2728:	|     |  |      lsr.l #3,d0
    272a:	|     |  |      move.l 28(sp),d1
    272e:	|     |  |      add.l d0,d1
    2730:	|     |  |      move.w 10(sp),d0
    2734:	|     |  |  /-- bpl.s 273a <CstPasteChar+0x37e>
    2736:	|     |  |  |   addi.w #15,d0
    273a:	|     |  |  \-> asr.w #4,d0
    273c:	|     |  |      movea.w d0,a0
    273e:	|     |  |      move.l a0,d0
    2740:	|     |  |      add.l a0,d0
    2742:	|     |  |      move.l d1,d2
    2744:	|     |  |      add.l d0,d2
    2746:	|     |  |      move.l d2,60(sp)
    bltcon0 = ((single->width%16) << 12);    
    274a:	|     |  |      movea.l 84(sp),a0
    274e:	|     |  |      move.l (a0),d0
    2750:	|     |  |      andi.l #-2147483633,d0
    2756:	|     |  |  /-- bpl.s 2760 <CstPasteChar+0x3a4>
    2758:	|     |  |  |   subq.l #1,d0
    275a:	|     |  |  |   moveq #-16,d1
    275c:	|     |  |  |   or.l d1,d0
    275e:	|     |  |  |   addq.l #1,d0
    2760:	|     |  |  \-> moveq #12,d2
    2762:	|     |  |      lsl.l d2,d0
    2764:	|     |  |      move.l d0,56(sp)
    
    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    2768:	|     |  |      movea.l 84(sp),a0
    276c:	|     |  |      move.l (a0),d0
    276e:	|     |  |      movea.l d0,a0
    2770:	|     |  |      cmpa.w #0,a0
    2774:	|     |  |  /-- bge.s 277a <CstPasteChar+0x3be>
    2776:	|     |  |  |   lea 15(a0),a0
    277a:	|     |  |  \-> move.l a0,d0
    277c:	|     |  |      asr.l #4,d0
    277e:	|     |  |      move.l d0,d0
    2780:	|     |  |      movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    2786:	|     |  |      move.l a0,d1
    2788:	|     |  |      addq.l #2,d1
    278a:	|     |  |      move.l d1,1c8ec <CstBackDropBufferApplyCursor>
    2790:	|     |  |      add.w 76(sp),d0
    2794:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    2796:	|     |  |      movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    279c:	|     |  |      move.l a0,d0
    279e:	|     |  |      addq.l #2,d0
    27a0:	|     |  |      move.l d0,1c8ec <CstBackDropBufferApplyCursor>
    27a6:	|     |  |      move.l 44(sp),d0
    27aa:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    27ac:	|     |  |      move.w 10(sp),d0
    27b0:	|     |  |  /-- bpl.s 27b6 <CstPasteChar+0x3fa>
    27b2:	|     |  |  |   addi.w #15,d0
    27b6:	|     |  |  \-> asr.w #4,d0
    27b8:	|     |  |      movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    27be:	|     |  |      move.l a0,d1
    27c0:	|     |  |      addq.l #2,d1
    27c2:	|     |  |      move.l d1,1c8ec <CstBackDropBufferApplyCursor>
    27c8:	|     |  |      add.w d0,d0
    27ca:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    27cc:	|     |  |      movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    27d2:	|     |  |      move.l a0,d0
    27d4:	|     |  |      addq.l #2,d0
    27d6:	|     |  |      move.l d0,1c8ec <CstBackDropBufferApplyCursor>
    27dc:	|     |  |      move.l 52(sp),d0
    27e0:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    27e2:	|     |  |      movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    27e8:	|     |  |      move.l a0,d0
    27ea:	|     |  |      addq.l #2,d0
    27ec:	|     |  |      move.l d0,1c8ec <CstBackDropBufferApplyCursor>
    27f2:	|     |  |      clr.w (a0)
    27f4:	|     +--|----- bra.w 295a <CstPasteChar+0x59e>
    
  } else { //Whole Sprite on Screen

    extrawords = 1;
    27f8:	|     |  \----> move.w #1,78(sp)
    cutwordssource = 0;
    27fe:	|     |         clr.w 76(sp)
    cutmaskpixel = 0;
    2802:	|     |         clr.w 74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2806:	|     |         clr.w 72(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    280a:	|     |         movea.l 84(sp),a0
    280e:	|     |         move.l 24(a0),d0
    2812:	|     |         move.l d0,d2
    2814:	|     |         movea.l 84(sp),a0
    2818:	|     |         move.l (a0),d0
    281a:	|     |         movea.l d0,a0
    281c:	|     |         cmpa.w #0,a0
    2820:	|     |     /-- bge.s 2826 <CstPasteChar+0x46a>
    2822:	|     |     |   lea 15(a0),a0
    2826:	|     |     \-> move.l a0,d0
    2828:	|     |         asr.l #4,d0
    282a:	|     |         move.l 48(sp),-(sp)
    282e:	|     |         move.l d0,-(sp)
    2830:	|     |         jsr 17be6 <__mulsi3>
    2836:	|     |         addq.l #8,sp
    2838:	|     |         add.l d0,d0
    283a:	|     |         move.l d2,d1
    283c:	|     |         add.l d0,d1
    283e:	|     |         move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2842:	|     |         move.l 1c8fc <winWidth>,d0
    2848:	|     |         move.l 52(sp),-(sp)
    284c:	|     |         move.l d0,-(sp)
    284e:	|     |         jsr 17be6 <__mulsi3>
    2854:	|     |         addq.l #8,sp
    2856:	|     |         lsr.l #3,d0
    2858:	|     |         move.l 28(sp),d1
    285c:	|     |         add.l d0,d1
    285e:	|     |         move.w 10(sp),d0
    2862:	|     |     /-- bpl.s 2868 <CstPasteChar+0x4ac>
    2864:	|     |     |   addi.w #15,d0
    2868:	|     |     \-> asr.w #4,d0
    286a:	|     |         movea.w d0,a0
    286c:	|     |         move.l a0,d0
    286e:	|     |         add.l a0,d0
    2870:	|     |         move.l d1,d2
    2872:	|     |         add.l d0,d2
    2874:	|     |         move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2878:	|     |         move.l 1c8fc <winWidth>,d0
    287e:	|     |         move.l 52(sp),-(sp)
    2882:	|     |         move.l d0,-(sp)
    2884:	|     |         jsr 17be6 <__mulsi3>
    288a:	|     |         addq.l #8,sp
    288c:	|     |         lsr.l #3,d0
    288e:	|     |         move.l 28(sp),d1
    2892:	|     |         add.l d0,d1
    2894:	|     |         move.w 10(sp),d0
    2898:	|     |     /-- bpl.s 289e <CstPasteChar+0x4e2>
    289a:	|     |     |   addi.w #15,d0
    289e:	|     |     \-> asr.w #4,d0
    28a0:	|     |         movea.w d0,a0
    28a2:	|     |         move.l a0,d0
    28a4:	|     |         add.l a0,d0
    28a6:	|     |         move.l d1,d2
    28a8:	|     |         add.l d0,d2
    28aa:	|     |         move.l d2,60(sp)
    bltcon0 = ((x%16) << 12);
    28ae:	|     |         move.w 10(sp),d0
    28b2:	|     |         andi.w #-32753,d0
    28b6:	|     |     /-- bpl.s 28c0 <CstPasteChar+0x504>
    28b8:	|     |     |   subq.w #1,d0
    28ba:	|     |     |   ori.w #-16,d0
    28be:	|     |     |   addq.w #1,d0
    28c0:	|     |     \-> ext.l d0
    28c2:	|     |         moveq #12,d1
    28c4:	|     |         lsl.l d1,d0
    28c6:	|     |         move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    28ca:	|     |         movea.l 84(sp),a0
    28ce:	|     |         move.l (a0),d0
    28d0:	|     |         movea.l d0,a0
    28d2:	|     |         cmpa.w #0,a0
    28d6:	|     |     /-- bge.s 28dc <CstPasteChar+0x520>
    28d8:	|     |     |   lea 15(a0),a0
    28dc:	|     |     \-> move.l a0,d0
    28de:	|     |         asr.l #4,d0
    28e0:	|     |         move.l d0,d0
    28e2:	|     |         add.w 76(sp),d0
    28e6:	|     |         movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    28ec:	|     |         move.l a0,d1
    28ee:	|     |         addq.l #2,d1
    28f0:	|     |         move.l d1,1c8ec <CstBackDropBufferApplyCursor>
    28f6:	|     |         add.w 78(sp),d0
    28fa:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    28fc:	|     |         movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    2902:	|     |         move.l a0,d0
    2904:	|     |         addq.l #2,d0
    2906:	|     |         move.l d0,1c8ec <CstBackDropBufferApplyCursor>
    290c:	|     |         move.l 44(sp),d0
    2910:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2912:	|     |         move.w 10(sp),d0
    2916:	|     |     /-- bpl.s 291c <CstPasteChar+0x560>
    2918:	|     |     |   addi.w #15,d0
    291c:	|     |     \-> asr.w #4,d0
    291e:	|     |         movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    2924:	|     |         move.l a0,d1
    2926:	|     |         addq.l #2,d1
    2928:	|     |         move.l d1,1c8ec <CstBackDropBufferApplyCursor>
    292e:	|     |         add.w d0,d0
    2930:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    2932:	|     |         movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    2938:	|     |         move.l a0,d0
    293a:	|     |         addq.l #2,d0
    293c:	|     |         move.l d0,1c8ec <CstBackDropBufferApplyCursor>
    2942:	|     |         move.l 52(sp),d0
    2946:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2948:	|     |         movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    294e:	|     |         move.l a0,d0
    2950:	|     |         addq.l #2,d0
    2952:	|     |         move.l d0,1c8ec <CstBackDropBufferApplyCursor>
    2958:	|     |         clr.w (a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    295a:	|     \-------> moveq #0,d0
    295c:	|               move.w 74(sp),d0
    2960:	|               moveq #0,d1
    2962:	|               not.w d1
    2964:	|               asr.l d0,d1
    2966:	|               move.w d1,26(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    296a:	|               moveq #0,d1
    296c:	|               move.w 76(sp),d1
    2970:	|               moveq #0,d0
    2972:	|               move.w 78(sp),d0
    2976:	|               sub.l d0,d1
    2978:	|               move.l d1,d0
    297a:	|               add.w d0,d0
    297c:	|               move.w d0,24(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2980:	|               move.l 1c8fc <winWidth>,d0
    2986:	|               lsr.l #3,d0
    2988:	|               move.l d0,d2
    298a:	|               move.w 76(sp),d1
    298e:	|               sub.w 78(sp),d1
    2992:	|               move.l 40(sp),d0
    2996:	|               sub.w d0,d1
    2998:	|               move.w d1,d0
    299a:	|               add.w d1,d0
    299c:	|               add.w d2,d0
    299e:	|               move.w d0,22(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    29a2:	|               move.l 1c8fc <winWidth>,d0
    29a8:	|               lsr.l #3,d0
    29aa:	|               move.l d0,d2
    29ac:	|               move.w 76(sp),d1
    29b0:	|               sub.w 78(sp),d1
    29b4:	|               move.l 40(sp),d0
    29b8:	|               sub.w d0,d1
    29ba:	|               move.w d1,d0
    29bc:	|               add.w d1,d0
    29be:	|               add.w d2,d0
    29c0:	|               move.w d0,20(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    29c4:	|               move.l #14675968,16(sp)
  WaitBlit();
    29cc:	|               move.l 1c9b4 <GfxBase>,d0
    29d2:	|               movea.l d0,a6
    29d4:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    29d8:	|               movea.l 16(sp),a0
    29dc:	|               move.w 26(sp),68(a0)
  custom->bltalwm = bltalwm;
    29e2:	|               movea.l 16(sp),a0
    29e6:	|               move.w 72(sp),70(a0)
  custom->bltamod = bltamod;
    29ec:	|               move.w 24(sp),d0
    29f0:	|               movea.l 16(sp),a0
    29f4:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    29f8:	|               move.w 22(sp),d0
    29fc:	|               movea.l 16(sp),a0
    2a00:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    2a04:	|               move.w 20(sp),d0
    2a08:	|               movea.l 16(sp),a0
    2a0c:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    2a10:	|               move.l 1c8fc <winWidth>,d0
    2a16:	|               lsr.l #3,d0
    2a18:	|               move.l d0,d1
    2a1a:	|               move.l 1c900 <winHeight>,d0
    2a20:	|               move.l d0,d0
    2a22:	|               move.w d1,d2
    2a24:	|               muls.w d0,d2
    2a26:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    2a2a:	|               move.w 1c8c2 <textPaletteIndex>,38(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    2a32:	|               move.w 38(sp),d0
    2a36:	|               andi.w #1,d0
    2a3a:	|               move.w d0,12(sp)
  if(tmp2) {
    2a3e:	|        /----- beq.s 2a48 <CstPasteChar+0x68c>
    minterm = 0xbfa;
    2a40:	|        |      move.w #3066,36(sp)
    2a46:	|        |  /-- bra.s 2a4e <CstPasteChar+0x692>
  } else {
    minterm = 0xb0a;
    2a48:	|        \--|-> move.w #2826,36(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2a4e:	|           \-> clr.l 32(sp)
    2a52:	|     /-------- bra.w 2af0 <CstPasteChar+0x734>
  {

    custom->bltcon0 = bltcon0 + minterm;
    2a56:	|  /--|-------> move.l 56(sp),d0
    2a5a:	|  |  |         add.w 36(sp),d0
    2a5e:	|  |  |         movea.l 16(sp),a0
    2a62:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    2a66:	|  |  |         move.l 68(sp),d0
    2a6a:	|  |  |         movea.l 16(sp),a0
    2a6e:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    2a72:	|  |  |         move.l 64(sp),d0
    2a76:	|  |  |         movea.l 16(sp),a0
    2a7a:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    2a7e:	|  |  |         move.l 60(sp),d0
    2a82:	|  |  |         movea.l 16(sp),a0
    2a86:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    2a8a:	|  |  |         move.l 44(sp),d0
    2a8e:	|  |  |         lsl.w #6,d0
    2a90:	|  |  |         move.l 40(sp),d1
    2a94:	|  |  |         add.w d1,d0
    2a96:	|  |  |         sub.w 76(sp),d0
    2a9a:	|  |  |         add.w 78(sp),d0
    2a9e:	|  |  |         movea.l 16(sp),a0
    2aa2:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    2aa6:	|  |  |         moveq #0,d0
    2aa8:	|  |  |         move.w 14(sp),d0
    2aac:	|  |  |         add.l d0,64(sp)
    bltdpt += bltcptplus;
    2ab0:	|  |  |         moveq #0,d0
    2ab2:	|  |  |         move.w 14(sp),d0
    2ab6:	|  |  |         add.l d0,60(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    2aba:	|  |  |         move.w 38(sp),d0
    2abe:	|  |  |         lsr.w #1,d0
    2ac0:	|  |  |         move.w d0,38(sp)
    tmp2 = tmp & 0x01;
    2ac4:	|  |  |         move.w 38(sp),d1
    2ac8:	|  |  |         andi.w #1,d1
    2acc:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    2ad0:	|  |  |  /----- beq.s 2ada <CstPasteChar+0x71e>
      minterm = 0xbfa;
    2ad2:	|  |  |  |      move.w #3066,36(sp)
    2ad8:	|  |  |  |  /-- bra.s 2ae0 <CstPasteChar+0x724>
    } else {
      minterm = 0xb0a;
    2ada:	|  |  |  \--|-> move.w #2826,36(sp)
    }   

    WaitBlit();    
    2ae0:	|  |  |     \-> move.l 1c9b4 <GfxBase>,d0
    2ae6:	|  |  |         movea.l d0,a6
    2ae8:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2aec:	|  |  |         addq.l #1,32(sp)
    2af0:	|  |  \-------> moveq #4,d2
    2af2:	|  |            cmp.l 32(sp),d2
    2af6:	|  \----------- bge.w 2a56 <CstPasteChar+0x69a>
 
  }   
}
    2afa:	\-------------> move.l (sp)+,d2
    2afc:	                movea.l (sp)+,a6
    2afe:	                lea 72(sp),sp
    2b02:	                rts

00002b04 <CstRestoreScreen>:


void CstRestoreScreen()
{
    2b04:	                   lea -24(sp),sp
    2b08:	                   move.l a6,-(sp)
    2b0a:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    2b0c:	                   move.l #14675968,16(sp)

  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    2b14:	                   move.l 1c8e4 <CstCleanupQueueDrawBuffer>,d0
    2b1a:	/----------------- beq.w 2d22 <CstRestoreScreen+0x21e>
    2b1e:	|                  move.l 1c8dc <CstDrawBuffer>,d0
    2b24:	+----------------- beq.w 2d22 <CstRestoreScreen+0x21e>
    return;
  } 

  WaitBlit();
    2b28:	|                  move.l 1c9b4 <GfxBase>,d0
    2b2e:	|                  movea.l d0,a6
    2b30:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    2b34:	|                  movea.l 16(sp),a0
    2b38:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    2b3e:	|                  movea.l 16(sp),a0
    2b42:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    2b48:	|                  movea.l 16(sp),a0
    2b4c:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    2b52:	|     /----------- bra.w 2d16 <CstRestoreScreen+0x212>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3)
    2b56:	|  /--|----------> movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    2b5c:	|  |  |            move.l 4(a0),d0
    2b60:	|  |  |  /-------- beq.w 2ce4 <CstRestoreScreen+0x1e0>
    2b64:	|  |  |  |         movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    2b6a:	|  |  |  |         movea.l 4(a0),a0
    2b6e:	|  |  |  |         move.l 16(a0),d0
    2b72:	|  |  |  |         moveq #2,d1
    2b74:	|  |  |  |         cmp.l d0,d1
    2b76:	|  |  |  +-------- blt.w 2ce4 <CstRestoreScreen+0x1e0>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2b7a:	|  |  |  |         move.l 1c8fc <winWidth>,d0
    2b80:	|  |  |  |         lsr.l #3,d0
    2b82:	|  |  |  |         move.l d0,d1
    2b84:	|  |  |  |         movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    2b8a:	|  |  |  |         move.w 8(a0),d0
    2b8e:	|  |  |  |         add.w d0,d0
    2b90:	|  |  |  |         sub.w d0,d1
    2b92:	|  |  |  |         movea.l 16(sp),a0
    2b96:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2b9a:	|  |  |  |         move.l 1c8fc <winWidth>,d0
    2ba0:	|  |  |  |         lsr.l #3,d0
    2ba2:	|  |  |  |         move.l d0,d1
    2ba4:	|  |  |  |         movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    2baa:	|  |  |  |         move.w 8(a0),d0
    2bae:	|  |  |  |         add.w d0,d0
    2bb0:	|  |  |  |         sub.w d0,d1
    2bb2:	|  |  |  |         movea.l 16(sp),a0
    2bb6:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2bba:	|  |  |  |         movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    2bc0:	|  |  |  |         move.w 14(a0),d0
    2bc4:	|  |  |  |         move.w d0,d0
    2bc6:	|  |  |  |         andi.l #65535,d0
    2bcc:	|  |  |  |         move.l 1c8fc <winWidth>,d1
    2bd2:	|  |  |  |         move.l d1,-(sp)
    2bd4:	|  |  |  |         move.l d0,-(sp)
    2bd6:	|  |  |  |         jsr 17be6 <__mulsi3>
    2bdc:	|  |  |  |         addq.l #8,sp
    2bde:	|  |  |  |         move.l d0,d1
    2be0:	|  |  |  |         lsr.l #3,d1
    2be2:	|  |  |  |         move.l 1c8ca <CstBackDrop>,d0
    2be8:	|  |  |  |         add.l d0,d1
    2bea:	|  |  |  |         movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    2bf0:	|  |  |  |         move.w 12(a0),d0
    2bf4:	|  |  |  |         move.w d0,d0
    2bf6:	|  |  |  |         andi.l #65535,d0
    2bfc:	|  |  |  |         move.l d1,d2
    2bfe:	|  |  |  |         add.l d0,d2
    2c00:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2c04:	|  |  |  |         movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    2c0a:	|  |  |  |         move.w 14(a0),d0
    2c0e:	|  |  |  |         move.w d0,d0
    2c10:	|  |  |  |         andi.l #65535,d0
    2c16:	|  |  |  |         move.l 1c8fc <winWidth>,d1
    2c1c:	|  |  |  |         move.l d1,-(sp)
    2c1e:	|  |  |  |         move.l d0,-(sp)
    2c20:	|  |  |  |         jsr 17be6 <__mulsi3>
    2c26:	|  |  |  |         addq.l #8,sp
    2c28:	|  |  |  |         move.l d0,d1
    2c2a:	|  |  |  |         lsr.l #3,d1
    2c2c:	|  |  |  |         move.l 1c8dc <CstDrawBuffer>,d0
    2c32:	|  |  |  |         add.l d0,d1
    2c34:	|  |  |  |         movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    2c3a:	|  |  |  |         move.w 12(a0),d0
    2c3e:	|  |  |  |         move.w d0,d0
    2c40:	|  |  |  |         andi.l #65535,d0
    2c46:	|  |  |  |         move.l d1,d2
    2c48:	|  |  |  |         add.l d0,d2
    2c4a:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2c4e:	|  |  |  |         clr.l 20(sp)
    2c52:	|  |  |  |     /-- bra.w 2cda <CstRestoreScreen+0x1d6>
      {
        custom->bltapt = (APTR) bltapt;
    2c56:	|  |  |  |  /--|-> move.l 28(sp),d0
    2c5a:	|  |  |  |  |  |   movea.l 16(sp),a0
    2c5e:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    2c62:	|  |  |  |  |  |   move.l 24(sp),d0
    2c66:	|  |  |  |  |  |   movea.l 16(sp),a0
    2c6a:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    2c6e:	|  |  |  |  |  |   movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    2c74:	|  |  |  |  |  |   move.w 10(a0),d0
    2c78:	|  |  |  |  |  |   lsl.w #6,d0
    2c7a:	|  |  |  |  |  |   movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    2c80:	|  |  |  |  |  |   move.w 8(a0),d1
    2c84:	|  |  |  |  |  |   add.w d1,d0
    2c86:	|  |  |  |  |  |   movea.l 16(sp),a0
    2c8a:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    2c8e:	|  |  |  |  |  |   move.l 1c8fc <winWidth>,d0
    2c94:	|  |  |  |  |  |   lsr.l #3,d0
    2c96:	|  |  |  |  |  |   move.l 1c900 <winHeight>,d1
    2c9c:	|  |  |  |  |  |   move.l d1,-(sp)
    2c9e:	|  |  |  |  |  |   move.l d0,-(sp)
    2ca0:	|  |  |  |  |  |   jsr 17be6 <__mulsi3>
    2ca6:	|  |  |  |  |  |   addq.l #8,sp
    2ca8:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    2cac:	|  |  |  |  |  |   move.l 1c8fc <winWidth>,d0
    2cb2:	|  |  |  |  |  |   lsr.l #3,d0
    2cb4:	|  |  |  |  |  |   move.l 1c900 <winHeight>,d1
    2cba:	|  |  |  |  |  |   move.l d1,-(sp)
    2cbc:	|  |  |  |  |  |   move.l d0,-(sp)
    2cbe:	|  |  |  |  |  |   jsr 17be6 <__mulsi3>
    2cc4:	|  |  |  |  |  |   addq.l #8,sp
    2cc6:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    2cca:	|  |  |  |  |  |   move.l 1c9b4 <GfxBase>,d0
    2cd0:	|  |  |  |  |  |   movea.l d0,a6
    2cd2:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2cd6:	|  |  |  |  |  |   addq.l #1,20(sp)
    2cda:	|  |  |  |  |  \-> moveq #4,d0
    2cdc:	|  |  |  |  |      cmp.l 20(sp),d0
    2ce0:	|  |  |  |  \----- bge.w 2c56 <CstRestoreScreen+0x152>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    2ce4:	|  |  |  \-------> move.l 1c8e4 <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    2cec:	|  |  |            movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    2cf2:	|  |  |            move.l 16(a0),d0
    2cf6:	|  |  |            move.l d0,1c8e4 <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    2cfc:	|  |  |            move.l 12(sp),8(sp)
    2d02:	|  |  |            move.l 1c9a8 <SysBase>,d0
    2d08:	|  |  |            movea.l d0,a6
    2d0a:	|  |  |            movea.l 8(sp),a1
    2d0e:	|  |  |            jsr -690(a6)
    todelete = NULL;
    2d12:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    2d16:	|  |  \----------> move.l 1c8e4 <CstCleanupQueueDrawBuffer>,d0
    2d1c:	|  \-------------- bne.w 2b56 <CstRestoreScreen+0x52>
    2d20:	|              /-- bra.s 2d24 <CstRestoreScreen+0x220>
    return;
    2d22:	\--------------|-> nop
  }
  
}
    2d24:	               \-> move.l (sp)+,d2
    2d26:	                   movea.l (sp)+,a6
    2d28:	                   lea 24(sp),sp
    2d2c:	                   rts

00002d2e <CstScaleSprite>:

void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    2d2e:	                lea -132(sp),sp
    2d32:	                move.l a6,-(sp)
    2d34:	                move.l d2,-(sp)
    2d36:	                movea.l 152(sp),a0
    2d3a:	                move.l 156(sp),d1
    2d3e:	                move.l 160(sp),d0
    2d42:	                movea.w a0,a0
    2d44:	                move.w a0,12(sp)
    2d48:	                move.w d1,d1
    2d4a:	                move.w d1,10(sp)
    2d4e:	                move.w d0,d0
    2d50:	                move.w d0,8(sp)

  UBYTE *mask = CstDrawZBuffer( single, zBuffer, x, y);
    2d54:	                move.w 10(sp),d0
    2d58:	                moveq #0,d1
    2d5a:	                move.w d0,d1
    2d5c:	                move.w 12(sp),d0
    2d60:	                move.w d0,d0
    2d62:	                andi.l #65535,d0
    2d68:	                movea.l 1ca08 <zBuffer>,a0
    2d6e:	                move.l d1,-(sp)
    2d70:	                move.l d0,-(sp)
    2d72:	                move.l a0,-(sp)
    2d74:	                move.l 156(sp),-(sp)
    2d78:	                jsr 14e8 <CstDrawZBuffer>
    2d7e:	                lea 16(sp),sp
    2d82:	                move.l d0,84(sp)

  UWORD *destination = 0;
    2d86:	                clr.l 136(sp)
  switch(destinationtype)
    2d8a:	                moveq #0,d0
    2d8c:	                move.w 8(sp),d0
    2d90:	                moveq #1,d1
    2d92:	                cmp.l d0,d1
    2d94:	            /-- beq.s 2d9e <CstScaleSprite+0x70>
    2d96:	            |   moveq #2,d2
    2d98:	            |   cmp.l d0,d2
    2d9a:	         /--|-- beq.s 2da8 <CstScaleSprite+0x7a>
    2d9c:	      /--|--|-- bra.s 2dba <CstScaleSprite+0x8c>
  {
    case SCREEN:
      destination = (UWORD *) CstDrawBuffer;      
    2d9e:	      |  |  \-> move.l 1c8dc <CstDrawBuffer>,136(sp)
      break;
    2da6:	      +--|----- bra.s 2dba <CstScaleSprite+0x8c>
    case BACKDROP:      
      CstApplyBackDropCounter = 2;
    2da8:	      |  \----> move.w #2,1c8d6 <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    2db0:	      |         move.l 1c8ca <CstBackDrop>,136(sp)
      break;
    2db8:	      |         nop
  ULONG bltcon1; //Shift Source
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    2dba:	      \-------> tst.w 10(sp)
    2dbe:	         /----- bge.s 2e06 <CstScaleSprite+0xd8>
    if(y + single->height < 0) {
    2dc0:	         |      movea.w 10(sp),a1
    2dc4:	         |      movea.l 144(sp),a0
    2dc8:	         |      move.l 4(a0),d0
    2dcc:	         |      add.l a1,d0
    2dce:	         |  /-- bpl.s 2de2 <CstScaleSprite+0xb4>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2dd0:	         |  |   pea 1806e <PutChar+0x372>
    2dd6:	         |  |   jsr 17232 <KPrintF>
    2ddc:	         |  |   addq.l #4,sp
      return;
    2dde:	/--------|--|-- bra.w 3818 <CstScaleSprite+0xaea>
    }
    ystartdst = 0;
    2de2:	|        |  \-> clr.l 100(sp)
    ystartsrc = y*-1;
    2de6:	|        |      move.w 10(sp),d0
    2dea:	|        |      ext.l d0
    2dec:	|        |      neg.l d0
    2dee:	|        |      move.l d0,96(sp)
    blitheight = single->height+y;
    2df2:	|        |      movea.l 144(sp),a0
    2df6:	|        |      move.l 4(a0),d0
    2dfa:	|        |      movea.w 10(sp),a0
    2dfe:	|        |      add.l a0,d0
    2e00:	|        |      move.l d0,92(sp)
    2e04:	|     /--|----- bra.s 2e78 <CstScaleSprite+0x14a>
  } else if(y+single->height > (int) winHeight) {
    2e06:	|     |  \----> movea.w 10(sp),a1
    2e0a:	|     |         movea.l 144(sp),a0
    2e0e:	|     |         move.l 4(a0),d0
    2e12:	|     |         move.l a1,d1
    2e14:	|     |         add.l d0,d1
    2e16:	|     |         move.l 1c900 <winHeight>,d0
    2e1c:	|     |         cmp.l d1,d0
    2e1e:	|     |  /----- bge.s 2e60 <CstScaleSprite+0x132>
    if(y  > (int) winHeight) {
    2e20:	|     |  |      movea.w 10(sp),a0
    2e24:	|     |  |      move.l 1c900 <winHeight>,d0
    2e2a:	|     |  |      cmp.l a0,d0
    2e2c:	|     |  |  /-- bge.s 2e40 <CstScaleSprite+0x112>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2e2e:	|     |  |  |   pea 1806e <PutChar+0x372>
    2e34:	|     |  |  |   jsr 17232 <KPrintF>
    2e3a:	|     |  |  |   addq.l #4,sp
      return;
    2e3c:	+-----|--|--|-- bra.w 3818 <CstScaleSprite+0xaea>
    }
    ystartdst = y;
    2e40:	|     |  |  \-> movea.w 10(sp),a0
    2e44:	|     |  |      move.l a0,100(sp)
    ystartsrc = 0;
    2e48:	|     |  |      clr.l 96(sp)
    blitheight = winHeight-y;
    2e4c:	|     |  |      move.l 1c900 <winHeight>,d0
    2e52:	|     |  |      movea.w 10(sp),a0
    2e56:	|     |  |      move.l d0,d1
    2e58:	|     |  |      sub.l a0,d1
    2e5a:	|     |  |      move.l d1,92(sp)
    2e5e:	|     +--|----- bra.s 2e78 <CstScaleSprite+0x14a>
  } else {
    ystartdst = y;
    2e60:	|     |  \----> movea.w 10(sp),a0
    2e64:	|     |         move.l a0,100(sp)
    ystartsrc = 0;
    2e68:	|     |         clr.l 96(sp)
    blitheight = single->height;
    2e6c:	|     |         movea.l 144(sp),a0
    2e70:	|     |         move.l 4(a0),d0
    2e74:	|     |         move.l d0,92(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    2e78:	|     \-------> tst.w 12(sp)
    2e7c:	|     /-------- bge.w 30fc <CstScaleSprite+0x3ce>
    if(x + single->width < 0) {
    2e80:	|     |         movea.w 12(sp),a1
    2e84:	|     |         movea.l 144(sp),a0
    2e88:	|     |         move.l (a0),d0
    2e8a:	|     |         add.l a1,d0
    2e8c:	|     |     /-- bpl.s 2ea0 <CstScaleSprite+0x172>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2e8e:	|     |     |   pea 1806e <PutChar+0x372>
    2e94:	|     |     |   jsr 17232 <KPrintF>
    2e9a:	|     |     |   addq.l #4,sp
      return;
    2e9c:	+-----|-----|-- bra.w 3818 <CstScaleSprite+0xaea>

    }
    
    extrawords = 1;
    2ea0:	|     |     \-> move.w #1,134(sp)
    cutwordssource = (x*-1)/16; 
    2ea6:	|     |         move.w 12(sp),d0
    2eaa:	|     |     /-- bpl.s 2eb0 <CstScaleSprite+0x182>
    2eac:	|     |     |   addi.w #15,d0
    2eb0:	|     |     \-> asr.w #4,d0
    2eb2:	|     |         neg.w d0
    2eb4:	|     |         move.w d0,132(sp)
    cutmaskpixel = (x*-1)%16;     
    2eb8:	|     |         move.w 12(sp),d0
    2ebc:	|     |         ext.l d0
    2ebe:	|     |         neg.l d0
    2ec0:	|     |         andi.l #-2147483633,d0
    2ec6:	|     |     /-- bpl.s 2ed0 <CstScaleSprite+0x1a2>
    2ec8:	|     |     |   subq.l #1,d0
    2eca:	|     |     |   moveq #-16,d1
    2ecc:	|     |     |   or.l d1,d0
    2ece:	|     |     |   addq.l #1,d0
    2ed0:	|     |     \-> move.w d0,130(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2ed4:	|     |         clr.w 128(sp)
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    2ed8:	|     |         moveq #0,d0
    2eda:	|     |         move.w 132(sp),d0
    2ede:	|     |         add.l d0,d0
    2ee0:	|     |         move.l d0,d1
    2ee2:	|     |         move.l 84(sp),d0
    2ee6:	|     |         move.l d1,d2
    2ee8:	|     |         add.l d0,d2
    2eea:	|     |         movea.l 144(sp),a0
    2eee:	|     |         move.l (a0),d0
    2ef0:	|     |         move.l 96(sp),-(sp)
    2ef4:	|     |         move.l d0,-(sp)
    2ef6:	|     |         jsr 17be6 <__mulsi3>
    2efc:	|     |         addq.l #8,sp
    2efe:	|     |         lsr.l #3,d0
    2f00:	|     |         move.l d2,d1
    2f02:	|     |         add.l d0,d1
    2f04:	|     |         move.l d1,124(sp)
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    2f08:	|     |         movea.l 144(sp),a0
    2f0c:	|     |         move.l 24(a0),d0
    2f10:	|     |         move.l d0,d1
    2f12:	|     |         moveq #0,d0
    2f14:	|     |         move.w 132(sp),d0
    2f18:	|     |         add.l d0,d0
    2f1a:	|     |         move.l d1,d2
    2f1c:	|     |         add.l d0,d2
    2f1e:	|     |         movea.l 144(sp),a0
    2f22:	|     |         move.l (a0),d0
    2f24:	|     |         move.l 96(sp),-(sp)
    2f28:	|     |         move.l d0,-(sp)
    2f2a:	|     |         jsr 17be6 <__mulsi3>
    2f30:	|     |         addq.l #8,sp
    2f32:	|     |         lsr.l #3,d0
    2f34:	|     |         move.l d2,d1
    2f36:	|     |         add.l d0,d1
    2f38:	|     |         move.l d1,120(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2f3c:	|     |         move.l 1c8fc <winWidth>,d0
    2f42:	|     |         move.l 100(sp),-(sp)
    2f46:	|     |         move.l d0,-(sp)
    2f48:	|     |         jsr 17be6 <__mulsi3>
    2f4e:	|     |         addq.l #8,sp
    2f50:	|     |         lsr.l #3,d0
    2f52:	|     |         move.l 136(sp),d1
    2f56:	|     |         add.l d1,d0
    2f58:	|     |         move.l d0,d2
    2f5a:	|     |         subq.l #2,d2
    2f5c:	|     |         move.l d2,116(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2f60:	|     |         move.l 1c8fc <winWidth>,d0
    2f66:	|     |         move.l 100(sp),-(sp)
    2f6a:	|     |         move.l d0,-(sp)
    2f6c:	|     |         jsr 17be6 <__mulsi3>
    2f72:	|     |         addq.l #8,sp
    2f74:	|     |         lsr.l #3,d0
    2f76:	|     |         move.l 136(sp),d1
    2f7a:	|     |         add.l d1,d0
    2f7c:	|     |         move.l d0,d1
    2f7e:	|     |         subq.l #2,d1
    2f80:	|     |         move.l d1,112(sp)
    bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    2f84:	|     |         moveq #0,d0
    2f86:	|     |         move.w 130(sp),d0
    2f8a:	|     |         moveq #16,d1
    2f8c:	|     |         sub.l d0,d1
    2f8e:	|     |         move.l d1,d0
    2f90:	|     |         moveq #12,d2
    2f92:	|     |         lsl.l d2,d0
    2f94:	|     |         addi.l #4042,d0
    2f9a:	|     |         move.l d0,108(sp)
    bltcon1 = ((16-cutmaskpixel) << 12);
    2f9e:	|     |         moveq #0,d0
    2fa0:	|     |         move.w 130(sp),d0
    2fa4:	|     |         moveq #16,d1
    2fa6:	|     |         sub.l d0,d1
    2fa8:	|     |         move.l d1,d0
    2faa:	|     |         moveq #12,d1
    2fac:	|     |         lsl.l d1,d0
    2fae:	|     |         move.l d0,104(sp)
    if( destinationtype == SCREEN)
    2fb2:	|     |         cmpi.w #1,8(sp)
    2fb8:	|     |  /----- bne.w 3076 <CstScaleSprite+0x348>
    {      
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2fbc:	|     |  |      move.l 1c8e4 <CstCleanupQueueDrawBuffer>,48(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    2fc4:	|     |  |      moveq #20,d2
    2fc6:	|     |  |      move.l d2,44(sp)
    2fca:	|     |  |      clr.l 40(sp)
    2fce:	|     |  |      move.l 1c9a8 <SysBase>,d0
    2fd4:	|     |  |      movea.l d0,a6
    2fd6:	|     |  |      move.l 44(sp),d0
    2fda:	|     |  |      move.l 40(sp),d1
    2fde:	|     |  |      jsr -684(a6)
    2fe2:	|     |  |      move.l d0,36(sp)
    2fe6:	|     |  |      move.l 36(sp),d0
    2fea:	|     |  |      move.l d0,1c8e4 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    2ff0:	|     |  |      movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    2ff6:	|     |  |      move.l 48(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    2ffc:	|     |  |      movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    3002:	|     |  |      move.w 12(sp),d0
    3006:	|     |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    3008:	|     |  |      movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    300e:	|     |  |      move.w 10(sp),d0
    3012:	|     |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person;      
    3016:	|     |  |      movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    301c:	|     |  |      move.l 148(sp),4(a0)

      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    3022:	|     |  |      movea.l 144(sp),a0
    3026:	|     |  |      move.l (a0),d0
    3028:	|     |  |      movea.l d0,a0
    302a:	|     |  |      cmpa.w #0,a0
    302e:	|     |  |  /-- bge.s 3034 <CstScaleSprite+0x306>
    3030:	|     |  |  |   lea 15(a0),a0
    3034:	|     |  |  \-> move.l a0,d0
    3036:	|     |  |      asr.l #4,d0
    3038:	|     |  |      move.l d0,d0
    303a:	|     |  |      add.w 132(sp),d0
    303e:	|     |  |      movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    3044:	|     |  |      add.w 134(sp),d0
    3048:	|     |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    304c:	|     |  |      movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    3052:	|     |  |      move.l 92(sp),d0
    3056:	|     |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    305a:	|     |  |      movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    3060:	|     |  |      clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3064:	|     |  |      movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    306a:	|     |  |      move.l 100(sp),d0
    306e:	|     |  |      move.w d0,14(a0)
    3072:	|  /--|--|----- bra.w 362a <CstScaleSprite+0x8fc>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    3076:	|  |  |  \----> movea.l 144(sp),a0
    307a:	|  |  |         move.l (a0),d0
    307c:	|  |  |         movea.l d0,a0
    307e:	|  |  |         cmpa.w #0,a0
    3082:	|  |  |     /-- bge.s 3088 <CstScaleSprite+0x35a>
    3084:	|  |  |     |   lea 15(a0),a0
    3088:	|  |  |     \-> move.l a0,d0
    308a:	|  |  |         asr.l #4,d0
    308c:	|  |  |         move.l d0,d0
    308e:	|  |  |         add.w 132(sp),d0
    3092:	|  |  |         movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    3098:	|  |  |         move.l a0,d1
    309a:	|  |  |         addq.l #2,d1
    309c:	|  |  |         move.l d1,1c8ec <CstBackDropBufferApplyCursor>
    30a2:	|  |  |         add.w 134(sp),d0
    30a6:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    30a8:	|  |  |         movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    30ae:	|  |  |         move.l a0,d0
    30b0:	|  |  |         addq.l #2,d0
    30b2:	|  |  |         move.l d0,1c8ec <CstBackDropBufferApplyCursor>
    30b8:	|  |  |         move.l 92(sp),d0
    30bc:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    30be:	|  |  |         movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    30c4:	|  |  |         move.l a0,d0
    30c6:	|  |  |         addq.l #2,d0
    30c8:	|  |  |         move.l d0,1c8ec <CstBackDropBufferApplyCursor>
    30ce:	|  |  |         clr.w (a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    30d0:	|  |  |         movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    30d6:	|  |  |         move.l a0,d0
    30d8:	|  |  |         addq.l #2,d0
    30da:	|  |  |         move.l d0,1c8ec <CstBackDropBufferApplyCursor>
    30e0:	|  |  |         move.l 100(sp),d0
    30e4:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    30e6:	|  |  |         movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    30ec:	|  |  |         move.l a0,d0
    30ee:	|  |  |         addq.l #2,d0
    30f0:	|  |  |         move.l d0,1c8ec <CstBackDropBufferApplyCursor>
    30f6:	|  |  |         clr.w (a0)
    30f8:	|  +--|-------- bra.w 362a <CstScaleSprite+0x8fc>
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    30fc:	|  |  \-------> movea.w 12(sp),a1
    3100:	|  |            movea.l 144(sp),a0
    3104:	|  |            move.l (a0),d0
    3106:	|  |            move.l a1,d1
    3108:	|  |            add.l d0,d1
    310a:	|  |            move.l 1c8fc <winWidth>,d0
    3110:	|  |            cmp.l d1,d0
    3112:	|  |  /-------- bge.w 33c2 <CstScaleSprite+0x694>

    if(x - single->width > (int) winWidth)
    3116:	|  |  |         movea.w 12(sp),a1
    311a:	|  |  |         movea.l 144(sp),a0
    311e:	|  |  |         move.l (a0),d0
    3120:	|  |  |         move.l a1,d1
    3122:	|  |  |         sub.l d0,d1
    3124:	|  |  |         move.l 1c8fc <winWidth>,d0
    312a:	|  |  |         cmp.l d1,d0
    312c:	|  |  |     /-- bge.s 3140 <CstScaleSprite+0x412>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    312e:	|  |  |     |   pea 1806e <PutChar+0x372>
    3134:	|  |  |     |   jsr 17232 <KPrintF>
    313a:	|  |  |     |   addq.l #4,sp
      return;
    313c:	+--|--|-----|-- bra.w 3818 <CstScaleSprite+0xaea>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3140:	|  |  |     \-> clr.w 134(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    3144:	|  |  |         movea.w 12(sp),a1
    3148:	|  |  |         movea.l 144(sp),a0
    314c:	|  |  |         move.l (a0),d0
    314e:	|  |  |         add.l a1,d0
    3150:	|  |  |         move.l d0,d1
    3152:	|  |  |         move.l 1c8fc <winWidth>,d0
    3158:	|  |  |         sub.l d0,d1
    315a:	|  |  |         move.l d1,d0
    315c:	|  |  |         lsr.l #4,d0
    315e:	|  |  |         move.w d0,132(sp)
    cutmaskpixel = 0;
    3162:	|  |  |         clr.w 130(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    3166:	|  |  |         move.w #-1,128(sp)
    bltapt = ((ULONG) mask)+ystartsrc*single->width/8;
    316c:	|  |  |         movea.l 144(sp),a0
    3170:	|  |  |         move.l (a0),d0
    3172:	|  |  |         move.l 96(sp),-(sp)
    3176:	|  |  |         move.l d0,-(sp)
    3178:	|  |  |         jsr 17be6 <__mulsi3>
    317e:	|  |  |         addq.l #8,sp
    3180:	|  |  |         lsr.l #3,d0
    3182:	|  |  |         move.l 84(sp),d1
    3186:	|  |  |         move.l d0,d2
    3188:	|  |  |         add.l d1,d2
    318a:	|  |  |         move.l d2,124(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    318e:	|  |  |         movea.l 144(sp),a0
    3192:	|  |  |         move.l 24(a0),d0
    3196:	|  |  |         move.l d0,d2
    3198:	|  |  |         movea.l 144(sp),a0
    319c:	|  |  |         move.l (a0),d0
    319e:	|  |  |         move.l 96(sp),-(sp)
    31a2:	|  |  |         move.l d0,-(sp)
    31a4:	|  |  |         jsr 17be6 <__mulsi3>
    31aa:	|  |  |         addq.l #8,sp
    31ac:	|  |  |         lsr.l #3,d0
    31ae:	|  |  |         move.l d2,d1
    31b0:	|  |  |         add.l d0,d1
    31b2:	|  |  |         move.l d1,120(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    31b6:	|  |  |         move.l 1c8fc <winWidth>,d0
    31bc:	|  |  |         move.l 100(sp),-(sp)
    31c0:	|  |  |         move.l d0,-(sp)
    31c2:	|  |  |         jsr 17be6 <__mulsi3>
    31c8:	|  |  |         addq.l #8,sp
    31ca:	|  |  |         lsr.l #3,d0
    31cc:	|  |  |         move.l 136(sp),d1
    31d0:	|  |  |         add.l d0,d1
    31d2:	|  |  |         move.w 12(sp),d0
    31d6:	|  |  |     /-- bpl.s 31dc <CstScaleSprite+0x4ae>
    31d8:	|  |  |     |   addi.w #15,d0
    31dc:	|  |  |     \-> asr.w #4,d0
    31de:	|  |  |         movea.w d0,a0
    31e0:	|  |  |         move.l a0,d0
    31e2:	|  |  |         add.l a0,d0
    31e4:	|  |  |         move.l d1,d2
    31e6:	|  |  |         add.l d0,d2
    31e8:	|  |  |         move.l d2,116(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    31ec:	|  |  |         move.l 1c8fc <winWidth>,d0
    31f2:	|  |  |         move.l 100(sp),-(sp)
    31f6:	|  |  |         move.l d0,-(sp)
    31f8:	|  |  |         jsr 17be6 <__mulsi3>
    31fe:	|  |  |         addq.l #8,sp
    3200:	|  |  |         lsr.l #3,d0
    3202:	|  |  |         move.l 136(sp),d1
    3206:	|  |  |         add.l d0,d1
    3208:	|  |  |         move.w 12(sp),d0
    320c:	|  |  |     /-- bpl.s 3212 <CstScaleSprite+0x4e4>
    320e:	|  |  |     |   addi.w #15,d0
    3212:	|  |  |     \-> asr.w #4,d0
    3214:	|  |  |         movea.w d0,a0
    3216:	|  |  |         move.l a0,d0
    3218:	|  |  |         add.l a0,d0
    321a:	|  |  |         move.l d1,d2
    321c:	|  |  |         add.l d0,d2
    321e:	|  |  |         move.l d2,112(sp)
    bltcon0 = 0xfca + ((single->width%16) << 12);
    3222:	|  |  |         movea.l 144(sp),a0
    3226:	|  |  |         move.l (a0),d0
    3228:	|  |  |         andi.l #-2147483633,d0
    322e:	|  |  |     /-- bpl.s 3238 <CstScaleSprite+0x50a>
    3230:	|  |  |     |   subq.l #1,d0
    3232:	|  |  |     |   moveq #-16,d1
    3234:	|  |  |     |   or.l d1,d0
    3236:	|  |  |     |   addq.l #1,d0
    3238:	|  |  |     \-> moveq #12,d2
    323a:	|  |  |         lsl.l d2,d0
    323c:	|  |  |         addi.l #4042,d0
    3242:	|  |  |         move.l d0,108(sp)
    bltcon1 = ((single->width%16) << 12);
    3246:	|  |  |         movea.l 144(sp),a0
    324a:	|  |  |         move.l (a0),d0
    324c:	|  |  |         andi.l #-2147483633,d0
    3252:	|  |  |     /-- bpl.s 325c <CstScaleSprite+0x52e>
    3254:	|  |  |     |   subq.l #1,d0
    3256:	|  |  |     |   moveq #-16,d1
    3258:	|  |  |     |   or.l d1,d0
    325a:	|  |  |     |   addq.l #1,d0
    325c:	|  |  |     \-> moveq #12,d2
    325e:	|  |  |         lsl.l d2,d0
    3260:	|  |  |         move.l d0,104(sp)
    if( destinationtype == SCREEN)
    3264:	|  |  |         cmpi.w #1,8(sp)
    326a:	|  |  |  /----- bne.w 3332 <CstScaleSprite+0x604>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    326e:	|  |  |  |      move.l 1c8e4 <CstCleanupQueueDrawBuffer>,64(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3276:	|  |  |  |      moveq #20,d0
    3278:	|  |  |  |      move.l d0,60(sp)
    327c:	|  |  |  |      clr.l 56(sp)
    3280:	|  |  |  |      move.l 1c9a8 <SysBase>,d0
    3286:	|  |  |  |      movea.l d0,a6
    3288:	|  |  |  |      move.l 60(sp),d0
    328c:	|  |  |  |      move.l 56(sp),d1
    3290:	|  |  |  |      jsr -684(a6)
    3294:	|  |  |  |      move.l d0,52(sp)
    3298:	|  |  |  |      move.l 52(sp),d0
    329c:	|  |  |  |      move.l d0,1c8e4 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    32a2:	|  |  |  |      movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    32a8:	|  |  |  |      move.l 64(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    32ae:	|  |  |  |      movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    32b4:	|  |  |  |      move.w 12(sp),d0
    32b8:	|  |  |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    32ba:	|  |  |  |      movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    32c0:	|  |  |  |      move.w 10(sp),d0
    32c4:	|  |  |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    32c8:	|  |  |  |      movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    32ce:	|  |  |  |      move.l 148(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    32d4:	|  |  |  |      movea.l 144(sp),a0
    32d8:	|  |  |  |      move.l (a0),d0
    32da:	|  |  |  |      movea.l d0,a0
    32dc:	|  |  |  |      cmpa.w #0,a0
    32e0:	|  |  |  |  /-- bge.s 32e6 <CstScaleSprite+0x5b8>
    32e2:	|  |  |  |  |   lea 15(a0),a0
    32e6:	|  |  |  |  \-> move.l a0,d0
    32e8:	|  |  |  |      asr.l #4,d0
    32ea:	|  |  |  |      move.l d0,d0
    32ec:	|  |  |  |      movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    32f2:	|  |  |  |      add.w 132(sp),d0
    32f6:	|  |  |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    32fa:	|  |  |  |      movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    3300:	|  |  |  |      move.l 92(sp),d0
    3304:	|  |  |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3308:	|  |  |  |      move.w 12(sp),d0
    330c:	|  |  |  |  /-- bpl.s 3312 <CstScaleSprite+0x5e4>
    330e:	|  |  |  |  |   addi.w #15,d0
    3312:	|  |  |  |  \-> asr.w #4,d0
    3314:	|  |  |  |      movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    331a:	|  |  |  |      add.w d0,d0
    331c:	|  |  |  |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3320:	|  |  |  |      movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    3326:	|  |  |  |      move.l 100(sp),d0
    332a:	|  |  |  |      move.w d0,14(a0)
    332e:	|  +--|--|----- bra.w 362a <CstScaleSprite+0x8fc>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    3332:	|  |  |  \----> movea.l 144(sp),a0
    3336:	|  |  |         move.l (a0),d0
    3338:	|  |  |         movea.l d0,a0
    333a:	|  |  |         cmpa.w #0,a0
    333e:	|  |  |     /-- bge.s 3344 <CstScaleSprite+0x616>
    3340:	|  |  |     |   lea 15(a0),a0
    3344:	|  |  |     \-> move.l a0,d0
    3346:	|  |  |         asr.l #4,d0
    3348:	|  |  |         move.l d0,d0
    334a:	|  |  |         movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    3350:	|  |  |         move.l a0,d1
    3352:	|  |  |         addq.l #2,d1
    3354:	|  |  |         move.l d1,1c8ec <CstBackDropBufferApplyCursor>
    335a:	|  |  |         add.w 132(sp),d0
    335e:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    3360:	|  |  |         movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    3366:	|  |  |         move.l a0,d0
    3368:	|  |  |         addq.l #2,d0
    336a:	|  |  |         move.l d0,1c8ec <CstBackDropBufferApplyCursor>
    3370:	|  |  |         move.l 92(sp),d0
    3374:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    3376:	|  |  |         move.w 12(sp),d0
    337a:	|  |  |     /-- bpl.s 3380 <CstScaleSprite+0x652>
    337c:	|  |  |     |   addi.w #15,d0
    3380:	|  |  |     \-> asr.w #4,d0
    3382:	|  |  |         movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    3388:	|  |  |         move.l a0,d1
    338a:	|  |  |         addq.l #2,d1
    338c:	|  |  |         move.l d1,1c8ec <CstBackDropBufferApplyCursor>
    3392:	|  |  |         add.w d0,d0
    3394:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    3396:	|  |  |         movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    339c:	|  |  |         move.l a0,d0
    339e:	|  |  |         addq.l #2,d0
    33a0:	|  |  |         move.l d0,1c8ec <CstBackDropBufferApplyCursor>
    33a6:	|  |  |         move.l 100(sp),d0
    33aa:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    33ac:	|  |  |         movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    33b2:	|  |  |         move.l a0,d0
    33b4:	|  |  |         addq.l #2,d0
    33b6:	|  |  |         move.l d0,1c8ec <CstBackDropBufferApplyCursor>
    33bc:	|  |  |         clr.w (a0)
    33be:	|  +--|-------- bra.w 362a <CstScaleSprite+0x8fc>
    }
  } else { //Whole Sprite on Screen

    extrawords = 1;
    33c2:	|  |  \-------> move.w #1,134(sp)
    cutwordssource = 0;
    33c8:	|  |            clr.w 132(sp)
    cutmaskpixel = 0;
    33cc:	|  |            clr.w 130(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    33d0:	|  |            clr.w 128(sp)
    bltapt = ((ULONG) mask) +ystartsrc*single->width/8;
    33d4:	|  |            movea.l 144(sp),a0
    33d8:	|  |            move.l (a0),d0
    33da:	|  |            move.l 96(sp),-(sp)
    33de:	|  |            move.l d0,-(sp)
    33e0:	|  |            jsr 17be6 <__mulsi3>
    33e6:	|  |            addq.l #8,sp
    33e8:	|  |            lsr.l #3,d0
    33ea:	|  |            move.l 84(sp),d1
    33ee:	|  |            move.l d0,d2
    33f0:	|  |            add.l d1,d2
    33f2:	|  |            move.l d2,124(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    33f6:	|  |            movea.l 144(sp),a0
    33fa:	|  |            move.l 24(a0),d0
    33fe:	|  |            move.l d0,d2
    3400:	|  |            movea.l 144(sp),a0
    3404:	|  |            move.l (a0),d0
    3406:	|  |            move.l 96(sp),-(sp)
    340a:	|  |            move.l d0,-(sp)
    340c:	|  |            jsr 17be6 <__mulsi3>
    3412:	|  |            addq.l #8,sp
    3414:	|  |            lsr.l #3,d0
    3416:	|  |            move.l d2,d1
    3418:	|  |            add.l d0,d1
    341a:	|  |            move.l d1,120(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    341e:	|  |            move.l 1c8fc <winWidth>,d0
    3424:	|  |            move.l 100(sp),-(sp)
    3428:	|  |            move.l d0,-(sp)
    342a:	|  |            jsr 17be6 <__mulsi3>
    3430:	|  |            addq.l #8,sp
    3432:	|  |            lsr.l #3,d0
    3434:	|  |            move.l 136(sp),d1
    3438:	|  |            add.l d0,d1
    343a:	|  |            move.w 12(sp),d0
    343e:	|  |        /-- bpl.s 3444 <CstScaleSprite+0x716>
    3440:	|  |        |   addi.w #15,d0
    3444:	|  |        \-> asr.w #4,d0
    3446:	|  |            movea.w d0,a0
    3448:	|  |            move.l a0,d0
    344a:	|  |            add.l a0,d0
    344c:	|  |            move.l d1,d2
    344e:	|  |            add.l d0,d2
    3450:	|  |            move.l d2,116(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    3454:	|  |            move.l 1c8fc <winWidth>,d0
    345a:	|  |            move.l 100(sp),-(sp)
    345e:	|  |            move.l d0,-(sp)
    3460:	|  |            jsr 17be6 <__mulsi3>
    3466:	|  |            addq.l #8,sp
    3468:	|  |            lsr.l #3,d0
    346a:	|  |            move.l 136(sp),d1
    346e:	|  |            add.l d0,d1
    3470:	|  |            move.w 12(sp),d0
    3474:	|  |        /-- bpl.s 347a <CstScaleSprite+0x74c>
    3476:	|  |        |   addi.w #15,d0
    347a:	|  |        \-> asr.w #4,d0
    347c:	|  |            movea.w d0,a0
    347e:	|  |            move.l a0,d0
    3480:	|  |            add.l a0,d0
    3482:	|  |            move.l d1,d2
    3484:	|  |            add.l d0,d2
    3486:	|  |            move.l d2,112(sp)
    bltcon0 = 0xfca + ((x%16) << 12);
    348a:	|  |            move.w 12(sp),d0
    348e:	|  |            andi.w #-32753,d0
    3492:	|  |        /-- bpl.s 349c <CstScaleSprite+0x76e>
    3494:	|  |        |   subq.w #1,d0
    3496:	|  |        |   ori.w #-16,d0
    349a:	|  |        |   addq.w #1,d0
    349c:	|  |        \-> ext.l d0
    349e:	|  |            moveq #12,d1
    34a0:	|  |            lsl.l d1,d0
    34a2:	|  |            addi.l #4042,d0
    34a8:	|  |            move.l d0,108(sp)
    bltcon1 = ((x%16) << 12);
    34ac:	|  |            move.w 12(sp),d0
    34b0:	|  |            andi.w #-32753,d0
    34b4:	|  |        /-- bpl.s 34be <CstScaleSprite+0x790>
    34b6:	|  |        |   subq.w #1,d0
    34b8:	|  |        |   ori.w #-16,d0
    34bc:	|  |        |   addq.w #1,d0
    34be:	|  |        \-> ext.l d0
    34c0:	|  |            moveq #12,d2
    34c2:	|  |            lsl.l d2,d0
    34c4:	|  |            move.l d0,104(sp)
    if( destinationtype == SCREEN)
    34c8:	|  |            cmpi.w #1,8(sp)
    34ce:	|  |     /----- bne.w 359a <CstScaleSprite+0x86c>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    34d2:	|  |     |      move.l 1c8e4 <CstCleanupQueueDrawBuffer>,80(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    34da:	|  |     |      moveq #20,d0
    34dc:	|  |     |      move.l d0,76(sp)
    34e0:	|  |     |      clr.l 72(sp)
    34e4:	|  |     |      move.l 1c9a8 <SysBase>,d0
    34ea:	|  |     |      movea.l d0,a6
    34ec:	|  |     |      move.l 76(sp),d0
    34f0:	|  |     |      move.l 72(sp),d1
    34f4:	|  |     |      jsr -684(a6)
    34f8:	|  |     |      move.l d0,68(sp)
    34fc:	|  |     |      move.l 68(sp),d0
    3500:	|  |     |      move.l d0,1c8e4 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    3506:	|  |     |      movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    350c:	|  |     |      move.l 80(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    3512:	|  |     |      movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    3518:	|  |     |      move.w 12(sp),d0
    351c:	|  |     |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    351e:	|  |     |      movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    3524:	|  |     |      move.w 10(sp),d0
    3528:	|  |     |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    352c:	|  |     |      movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    3532:	|  |     |      move.l 148(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3538:	|  |     |      movea.l 144(sp),a0
    353c:	|  |     |      move.l (a0),d0
    353e:	|  |     |      movea.l d0,a0
    3540:	|  |     |      cmpa.w #0,a0
    3544:	|  |     |  /-- bge.s 354a <CstScaleSprite+0x81c>
    3546:	|  |     |  |   lea 15(a0),a0
    354a:	|  |     |  \-> move.l a0,d0
    354c:	|  |     |      asr.l #4,d0
    354e:	|  |     |      move.l d0,d0
    3550:	|  |     |      add.w 132(sp),d0
    3554:	|  |     |      movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    355a:	|  |     |      add.w 134(sp),d0
    355e:	|  |     |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    3562:	|  |     |      movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    3568:	|  |     |      move.l 92(sp),d0
    356c:	|  |     |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    3570:	|  |     |      move.w 12(sp),d0
    3574:	|  |     |  /-- bpl.s 357a <CstScaleSprite+0x84c>
    3576:	|  |     |  |   addi.w #15,d0
    357a:	|  |     |  \-> asr.w #4,d0
    357c:	|  |     |      movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    3582:	|  |     |      add.w d0,d0
    3584:	|  |     |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3588:	|  |     |      movea.l 1c8e4 <CstCleanupQueueDrawBuffer>,a0
    358e:	|  |     |      move.l 100(sp),d0
    3592:	|  |     |      move.w d0,14(a0)
    3596:	|  +-----|----- bra.w 362a <CstScaleSprite+0x8fc>
    } else
    {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    359a:	|  |     \----> movea.l 144(sp),a0
    359e:	|  |            move.l (a0),d0
    35a0:	|  |            movea.l d0,a0
    35a2:	|  |            cmpa.w #0,a0
    35a6:	|  |        /-- bge.s 35ac <CstScaleSprite+0x87e>
    35a8:	|  |        |   lea 15(a0),a0
    35ac:	|  |        \-> move.l a0,d0
    35ae:	|  |            asr.l #4,d0
    35b0:	|  |            move.l d0,d0
    35b2:	|  |            add.w 132(sp),d0
    35b6:	|  |            movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    35bc:	|  |            move.l a0,d1
    35be:	|  |            addq.l #2,d1
    35c0:	|  |            move.l d1,1c8ec <CstBackDropBufferApplyCursor>
    35c6:	|  |            add.w 134(sp),d0
    35ca:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    35cc:	|  |            movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    35d2:	|  |            move.l a0,d0
    35d4:	|  |            addq.l #2,d0
    35d6:	|  |            move.l d0,1c8ec <CstBackDropBufferApplyCursor>
    35dc:	|  |            move.l 92(sp),d0
    35e0:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    35e2:	|  |            move.w 12(sp),d0
    35e6:	|  |        /-- bpl.s 35ec <CstScaleSprite+0x8be>
    35e8:	|  |        |   addi.w #15,d0
    35ec:	|  |        \-> asr.w #4,d0
    35ee:	|  |            movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    35f4:	|  |            move.l a0,d1
    35f6:	|  |            addq.l #2,d1
    35f8:	|  |            move.l d1,1c8ec <CstBackDropBufferApplyCursor>
    35fe:	|  |            add.w d0,d0
    3600:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    3602:	|  |            movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    3608:	|  |            move.l a0,d0
    360a:	|  |            addq.l #2,d0
    360c:	|  |            move.l d0,1c8ec <CstBackDropBufferApplyCursor>
    3612:	|  |            move.l 100(sp),d0
    3616:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    3618:	|  |            movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    361e:	|  |            move.l a0,d0
    3620:	|  |            addq.l #2,d0
    3622:	|  |            move.l d0,1c8ec <CstBackDropBufferApplyCursor>
    3628:	|  |            clr.w (a0)

 /*if(person && person->samePosCount > 3) {
    return;
  }*/

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    362a:	|  \----------> moveq #0,d0
    362c:	|               move.w 130(sp),d0
    3630:	|               moveq #0,d1
    3632:	|               not.w d1
    3634:	|               asr.l d0,d1
    3636:	|               move.w d1,34(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    363a:	|               moveq #0,d1
    363c:	|               move.w 132(sp),d1
    3640:	|               moveq #0,d0
    3642:	|               move.w 134(sp),d0
    3646:	|               sub.l d0,d1
    3648:	|               move.l d1,d0
    364a:	|               add.w d0,d0
    364c:	|               move.w d0,32(sp)
  WORD bltbmod = cutwordssource*2-(extrawords*2); //Jump to next line
    3650:	|               moveq #0,d1
    3652:	|               move.w 132(sp),d1
    3656:	|               moveq #0,d0
    3658:	|               move.w 134(sp),d0
    365c:	|               sub.l d0,d1
    365e:	|               move.l d1,d0
    3660:	|               add.w d0,d0
    3662:	|               move.w d0,30(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3666:	|               move.l 1c8fc <winWidth>,d0
    366c:	|               lsr.l #3,d0
    366e:	|               move.l d0,d1
    3670:	|               movea.l 144(sp),a0
    3674:	|               move.l (a0),d0
    3676:	|           /-- bpl.s 367a <CstScaleSprite+0x94c>
    3678:	|           |   addq.l #7,d0
    367a:	|           \-> asr.l #3,d0
    367c:	|               move.l d0,d0
    367e:	|               sub.w d0,d1
    3680:	|               move.w 132(sp),d0
    3684:	|               sub.w 134(sp),d0
    3688:	|               add.w d0,d0
    368a:	|               add.w d1,d0
    368c:	|               move.w d0,28(sp)
  WORD bltdmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3690:	|               move.l 1c8fc <winWidth>,d0
    3696:	|               lsr.l #3,d0
    3698:	|               move.l d0,d1
    369a:	|               movea.l 144(sp),a0
    369e:	|               move.l (a0),d0
    36a0:	|           /-- bpl.s 36a4 <CstScaleSprite+0x976>
    36a2:	|           |   addq.l #7,d0
    36a4:	|           \-> asr.l #3,d0
    36a6:	|               move.l d0,d0
    36a8:	|               sub.w d0,d1
    36aa:	|               move.w 132(sp),d0
    36ae:	|               sub.w 134(sp),d0
    36b2:	|               add.w d0,d0
    36b4:	|               add.w d1,d0
    36b6:	|               move.w d0,26(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    36ba:	|               move.l #14675968,22(sp)
  WaitBlit();
    36c2:	|               move.l 1c9b4 <GfxBase>,d0
    36c8:	|               movea.l d0,a6
    36ca:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    36ce:	|               movea.l 22(sp),a0
    36d2:	|               move.w 34(sp),68(a0)
  custom->bltalwm = bltalwm;
    36d8:	|               movea.l 22(sp),a0
    36dc:	|               move.w 128(sp),70(a0)
  custom->bltamod = bltamod;
    36e2:	|               move.w 32(sp),d0
    36e6:	|               movea.l 22(sp),a0
    36ea:	|               move.w d0,100(a0)
  custom->bltbmod = bltbmod;
    36ee:	|               move.w 30(sp),d0
    36f2:	|               movea.l 22(sp),a0
    36f6:	|               move.w d0,98(a0)
  custom->bltcmod = bltcmod;
    36fa:	|               move.w 28(sp),d0
    36fe:	|               movea.l 22(sp),a0
    3702:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    3706:	|               move.w 26(sp),d0
    370a:	|               movea.l 22(sp),a0
    370e:	|               move.w d0,102(a0)
  custom->bltcon0 = bltcon0;
    3712:	|               move.l 108(sp),d0
    3716:	|               movea.l 22(sp),a0
    371a:	|               move.w d0,64(a0)
  custom->bltcon1 = bltcon1;  
    371e:	|               move.l 104(sp),d0
    3722:	|               movea.l 22(sp),a0
    3726:	|               move.w d0,66(a0)

  UWORD bltbptplus = (single->width >> 3)*single->height;
    372a:	|               movea.l 144(sp),a0
    372e:	|               move.l (a0),d0
    3730:	|               asr.l #3,d0
    3732:	|               move.l d0,d1
    3734:	|               movea.l 144(sp),a0
    3738:	|               move.l 4(a0),d0
    373c:	|               move.l d0,d0
    373e:	|               move.w d1,d2
    3740:	|               muls.w d0,d2
    3742:	|               move.w d2,20(sp)
  UWORD bltcptplus = winWidth/8*winHeight;
    3746:	|               move.l 1c8fc <winWidth>,d0
    374c:	|               lsr.l #3,d0
    374e:	|               move.l d0,d1
    3750:	|               move.l 1c900 <winHeight>,d0
    3756:	|               move.l d0,d0
    3758:	|               move.w d1,d2
    375a:	|               muls.w d0,d2
    375c:	|               move.w d2,18(sp)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    3760:	|               clr.l 88(sp)
    3764:	|        /----- bra.w 37f8 <CstScaleSprite+0xaca>
  {
    custom->bltapt = (APTR) bltapt;
    3768:	|     /--|----> move.l 124(sp),d0
    376c:	|     |  |      movea.l 22(sp),a0
    3770:	|     |  |      move.l d0,80(a0)
    custom->bltbpt = (APTR) bltbpt;
    3774:	|     |  |      move.l 120(sp),d0
    3778:	|     |  |      movea.l 22(sp),a0
    377c:	|     |  |      move.l d0,76(a0)
    custom->bltcpt = (APTR) bltcpt;
    3780:	|     |  |      move.l 116(sp),d0
    3784:	|     |  |      movea.l 22(sp),a0
    3788:	|     |  |      move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    378c:	|     |  |      move.l 112(sp),d0
    3790:	|     |  |      movea.l 22(sp),a0
    3794:	|     |  |      move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3798:	|     |  |      move.l 92(sp),d0
    379c:	|     |  |      move.w d0,d1
    379e:	|     |  |      lsl.w #6,d1
    37a0:	|     |  |      movea.l 144(sp),a0
    37a4:	|     |  |      move.l (a0),d0
    37a6:	|     |  |      movea.l d0,a0
    37a8:	|     |  |      cmpa.w #0,a0
    37ac:	|     |  |  /-- bge.s 37b2 <CstScaleSprite+0xa84>
    37ae:	|     |  |  |   lea 15(a0),a0
    37b2:	|     |  |  \-> move.l a0,d0
    37b4:	|     |  |      asr.l #4,d0
    37b6:	|     |  |      move.l d0,d0
    37b8:	|     |  |      add.w d1,d0
    37ba:	|     |  |      sub.w 132(sp),d0
    37be:	|     |  |      add.w 134(sp),d0
    37c2:	|     |  |      movea.l 22(sp),a0
    37c6:	|     |  |      move.w d0,88(a0)
    bltbpt += bltbptplus;
    37ca:	|     |  |      moveq #0,d0
    37cc:	|     |  |      move.w 20(sp),d0
    37d0:	|     |  |      add.l d0,120(sp)
    bltcpt += bltcptplus;
    37d4:	|     |  |      moveq #0,d0
    37d6:	|     |  |      move.w 18(sp),d0
    37da:	|     |  |      add.l d0,116(sp)
    bltdpt += bltcptplus;
    37de:	|     |  |      moveq #0,d0
    37e0:	|     |  |      move.w 18(sp),d0
    37e4:	|     |  |      add.l d0,112(sp)
    WaitBlit();
    37e8:	|     |  |      move.l 1c9b4 <GfxBase>,d0
    37ee:	|     |  |      movea.l d0,a6
    37f0:	|     |  |      jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    37f4:	|     |  |      addq.l #1,88(sp)
    37f8:	|     |  \----> moveq #4,d0
    37fa:	|     |         cmp.l 88(sp),d0
    37fe:	|     \-------- bge.w 3768 <CstScaleSprite+0xa3a>
  }   

  FreeVec(mask);
    3802:	|               move.l 84(sp),14(sp)
    3808:	|               move.l 1c9a8 <SysBase>,d0
    380e:	|               movea.l d0,a6
    3810:	|               movea.l 14(sp),a1
    3814:	|               jsr -690(a6)
}
    3818:	\-------------> move.l (sp)+,d2
    381a:	                movea.l (sp)+,a6
    381c:	                lea 132(sp),sp
    3820:	                rts

00003822 <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    3822:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3824:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    382a:	move.l 8(sp),d0
    382e:	movea.l (sp),a0
    3830:	move.l d0,128(a0)
}
    3834:	nop
    3836:	addq.l #4,sp
    3838:	rts

0000383a <CstSwapBuffer>:

void CstSwapBuffer( ) {
    383a:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    383e:	move.l 1c8d8 <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    3846:	move.l 1c8dc <CstDrawBuffer>,d0
    384c:	move.l d0,1c8d8 <CstViewBuffer>
  CstDrawBuffer = tmp;
    3852:	move.l 16(sp),1c8dc <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    385a:	move.l 1c8e0 <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    3862:	move.l 1c8e4 <CstCleanupQueueDrawBuffer>,d0
    3868:	move.l d0,1c8e0 <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    386e:	move.l 12(sp),1c8e4 <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    3876:	move.l 1c8d2 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    387e:	move.l 1c8d8 <CstViewBuffer>,d0
    3884:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    3888:	move.l 4(sp),d0
    388c:	clr.w d0
    388e:	swap d0
    3890:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    3894:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    3898:	movea.w #118,a0
    389c:	adda.l 8(sp),a0
    38a0:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    38a2:	movea.w #114,a0
    38a6:	adda.l 8(sp),a0
    38aa:	move.w 2(sp),(a0)

  ptr +=  40*256;
    38ae:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    38b6:	move.l 4(sp),d0
    38ba:	clr.w d0
    38bc:	swap d0
    38be:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    38c2:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    38c6:	movea.w #126,a0
    38ca:	adda.l 8(sp),a0
    38ce:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    38d0:	movea.w #122,a0
    38d4:	adda.l 8(sp),a0
    38d8:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    38dc:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    38e4:	move.l 4(sp),d0
    38e8:	clr.w d0
    38ea:	swap d0
    38ec:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    38f0:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    38f4:	movea.l 8(sp),a0
    38f8:	lea 134(a0),a0
    38fc:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    38fe:	movea.l 8(sp),a0
    3902:	lea 130(a0),a0
    3906:	move.w 2(sp),(a0)

  ptr +=  40*256;
    390a:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3912:	move.l 4(sp),d0
    3916:	clr.w d0
    3918:	swap d0
    391a:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    391e:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    3922:	movea.l 8(sp),a0
    3926:	lea 142(a0),a0
    392a:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    392c:	movea.l 8(sp),a0
    3930:	lea 138(a0),a0
    3934:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3938:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3940:	move.l 4(sp),d0
    3944:	clr.w d0
    3946:	swap d0
    3948:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    394c:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    3950:	movea.l 8(sp),a0
    3954:	lea 150(a0),a0
    3958:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    395a:	movea.l 8(sp),a0
    395e:	lea 146(a0),a0
    3962:	move.w 2(sp),(a0)

}
    3966:	nop
    3968:	lea 20(sp),sp
    396c:	rts

0000396e <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    396e:	          lea -56(sp),sp
    3972:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    3974:	          pea 180a1 <PutChar+0x3a5>
    397a:	          jsr 17232 <KPrintF>
    3980:	          addq.l #4,sp

  width = width / 8;
    3982:	          move.l 64(sp),d0
    3986:	      /-- bpl.s 398a <CstReserveBackdrop+0x1c>
    3988:	      |   addq.l #7,d0
    398a:	      \-> asr.l #3,d0
    398c:	          move.l d0,64(sp)

  if( width < 40) 
    3990:	          moveq #39,d0
    3992:	          cmp.l 64(sp),d0
    3996:	      /-- blt.s 39ac <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    3998:	      |   pea 180bb <PutChar+0x3bf>
    399e:	      |   jsr 17232 <KPrintF>
    39a4:	      |   addq.l #4,sp
    return FALSE;
    39a6:	      |   clr.w d0
    39a8:	/-----|-- bra.w 3cee <CstReserveBackdrop+0x380>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    39ac:	|     \-> pea 180f9 <PutChar+0x3fd>
    39b2:	|         jsr 17232 <KPrintF>
    39b8:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    39ba:	|         move.l 64(sp),-(sp)
    39be:	|         jsr fce <CstCreateCopperlist>
    39c4:	|         addq.l #4,sp
    39c6:	|         move.l d0,1c8d2 <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    39cc:	|         pea 18119 <PutChar+0x41d>
    39d2:	|         jsr 17232 <KPrintF>
    39d8:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    39da:	|         move.l 64(sp),d1
    39de:	|         move.l 68(sp),d0
    39e2:	|         muls.w d1,d0
    39e4:	|         move.w d0,1c8c8 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    39ea:	|         move.w 1c8c8 <CstBackdropSizePlane>,d1
    39f0:	|         move.w d1,d0
    39f2:	|         add.w d0,d0
    39f4:	|         add.w d0,d0
    39f6:	|         add.w d1,d0
    39f8:	|         move.w d0,1c8c6 <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    39fe:	|         move.w 1c8c6 <CstBackdropSize>,d0
    3a04:	|         move.w d0,d0
    3a06:	|         andi.l #65535,d0
    3a0c:	|         move.l d0,48(sp)
    3a10:	|         moveq #2,d1
    3a12:	|         move.l d1,44(sp)
    3a16:	|         move.l 1c9a8 <SysBase>,d0
    3a1c:	|         movea.l d0,a6
    3a1e:	|         move.l 48(sp),d0
    3a22:	|         move.l 44(sp),d1
    3a26:	|         jsr -684(a6)
    3a2a:	|         move.l d0,40(sp)
    3a2e:	|         move.l 40(sp),d0
    3a32:	|         move.l d0,1c8ca <CstBackDrop>
  if( !CstBackDrop)
    3a38:	|         move.l 1c8ca <CstBackDrop>,d0
    3a3e:	|     /-- bne.s 3a54 <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    3a40:	|     |   pea 18140 <PutChar+0x444>
    3a46:	|     |   jsr 17232 <KPrintF>
    3a4c:	|     |   addq.l #4,sp
    return FALSE;  
    3a4e:	|     |   clr.w d0
    3a50:	+-----|-- bra.w 3cee <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    3a54:	|     \-> pea 18178 <PutChar+0x47c>
    3a5a:	|         jsr 17232 <KPrintF>
    3a60:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    3a62:	|         move.l 1c8ca <CstBackDrop>,56(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    3a6a:	|         clr.l 52(sp)
    3a6e:	|     /-- bra.s 3a84 <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    3a70:	|  /--|-> move.l 56(sp),d0
    3a74:	|  |  |   move.l d0,d1
    3a76:	|  |  |   addq.l #4,d1
    3a78:	|  |  |   move.l d1,56(sp)
    3a7c:	|  |  |   movea.l d0,a0
    3a7e:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    3a80:	|  |  |   addq.l #1,52(sp)
    3a84:	|  |  \-> move.w 1c8c6 <CstBackdropSize>,d0
    3a8a:	|  |      lsr.w #2,d0
    3a8c:	|  |      move.w d0,d0
    3a8e:	|  |      andi.l #65535,d0
    3a94:	|  |      cmp.l 52(sp),d0
    3a98:	|  \----- bgt.s 3a70 <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3a9a:	|         move.w 1c8c6 <CstBackdropSize>,d0
    3aa0:	|         move.w d0,d0
    3aa2:	|         andi.l #65535,d0
    3aa8:	|         move.l 64(sp),d1
    3aac:	|         add.l d1,d1
    3aae:	|         add.l d1,d0
    3ab0:	|         move.l d0,36(sp)
    3ab4:	|         moveq #2,d0
    3ab6:	|         move.l d0,32(sp)
    3aba:	|         move.l 1c9a8 <SysBase>,d0
    3ac0:	|         movea.l d0,a6
    3ac2:	|         move.l 36(sp),d0
    3ac6:	|         move.l 32(sp),d1
    3aca:	|         jsr -684(a6)
    3ace:	|         move.l d0,28(sp)
    3ad2:	|         move.l 28(sp),d0
    3ad6:	|         move.l d0,1c8dc <CstDrawBuffer>
  if( !CstDrawBuffer)
    3adc:	|         move.l 1c8dc <CstDrawBuffer>,d0
    3ae2:	|     /-- bne.s 3af8 <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    3ae4:	|     |   pea 1819e <PutChar+0x4a2>
    3aea:	|     |   jsr 17232 <KPrintF>
    3af0:	|     |   addq.l #4,sp
    return FALSE;  
    3af2:	|     |   clr.w d0
    3af4:	+-----|-- bra.w 3cee <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    3af8:	|     \-> pea 181d8 <PutChar+0x4dc>
    3afe:	|         jsr 17232 <KPrintF>
    3b04:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 1000*5*2,MEMF_ANY);
    3b06:	|         move.l #10000,24(sp)
    3b0e:	|         clr.l 20(sp)
    3b12:	|         move.l 1c9a8 <SysBase>,d0
    3b18:	|         movea.l d0,a6
    3b1a:	|         move.l 24(sp),d0
    3b1e:	|         move.l 20(sp),d1
    3b22:	|         jsr -684(a6)
    3b26:	|         move.l d0,16(sp)
    3b2a:	|         move.l 16(sp),d0
    3b2e:	|         move.l d0,1c8e8 <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    3b34:	|         move.l 1c8e8 <CstBackDropBufferApplyStart>,d0
    3b3a:	|     /-- bne.s 3b50 <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    3b3c:	|     |   pea 18200 <PutChar+0x504>
    3b42:	|     |   jsr 17232 <KPrintF>
    3b48:	|     |   addq.l #4,sp
    return FALSE;  
    3b4a:	|     |   clr.w d0
    3b4c:	+-----|-- bra.w 3cee <CstReserveBackdrop+0x380>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    3b50:	|     \-> move.l 1c8e8 <CstBackDropBufferApplyStart>,d0
    3b56:	|         move.l d0,1c8ec <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    3b5c:	|         movea.l 1c8e8 <CstBackDropBufferApplyStart>,a0
    3b62:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    3b64:	|         movea.l 1c8e8 <CstBackDropBufferApplyStart>,a0
    3b6a:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3b6c:	|         move.w 1c8c6 <CstBackdropSize>,d0
    3b72:	|         move.w d0,d0
    3b74:	|         andi.l #65535,d0
    3b7a:	|         move.l 64(sp),d1
    3b7e:	|         add.l d1,d1
    3b80:	|         add.l d1,d0
    3b82:	|         move.l d0,12(sp)
    3b86:	|         moveq #2,d1
    3b88:	|         move.l d1,8(sp)
    3b8c:	|         move.l 1c9a8 <SysBase>,d0
    3b92:	|         movea.l d0,a6
    3b94:	|         move.l 12(sp),d0
    3b98:	|         move.l 8(sp),d1
    3b9c:	|         jsr -684(a6)
    3ba0:	|         move.l d0,4(sp)
    3ba4:	|         move.l 4(sp),d0
    3ba8:	|         move.l d0,1c8d8 <CstViewBuffer>
  if( !CstViewBuffer)
    3bae:	|         move.l 1c8d8 <CstViewBuffer>,d0
    3bb4:	|     /-- bne.s 3bca <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    3bb6:	|     |   pea 1824b <PutChar+0x54f>
    3bbc:	|     |   jsr 17232 <KPrintF>
    3bc2:	|     |   addq.l #4,sp
    return FALSE;  
    3bc4:	|     |   clr.w d0
    3bc6:	+-----|-- bra.w 3cee <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    3bca:	|     \-> pea 18285 <PutChar+0x589>
    3bd0:	|         jsr 17232 <KPrintF>
    3bd6:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    3bd8:	|         move.l 1c8dc <CstDrawBuffer>,d1
    3bde:	|         move.l 64(sp),d0
    3be2:	|     /-- bpl.s 3be6 <CstReserveBackdrop+0x278>
    3be4:	|     |   addq.l #3,d0
    3be6:	|     \-> asr.l #2,d0
    3be8:	|         add.l d0,d0
    3bea:	|         add.l d0,d0
    3bec:	|         add.l d1,d0
    3bee:	|         move.l d0,1c8dc <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    3bf4:	|         move.l 1c8d8 <CstViewBuffer>,d1
    3bfa:	|         move.l 64(sp),d0
    3bfe:	|     /-- bpl.s 3c02 <CstReserveBackdrop+0x294>
    3c00:	|     |   addq.l #3,d0
    3c02:	|     \-> asr.l #2,d0
    3c04:	|         add.l d0,d0
    3c06:	|         add.l d0,d0
    3c08:	|         add.l d1,d0
    3c0a:	|         move.l d0,1c8d8 <CstViewBuffer>
  

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    3c10:	|         move.l 1c8ca <CstBackDrop>,d0
    3c16:	|         clr.l -(sp)
    3c18:	|         pea 5 <_start+0x5>
    3c1c:	|         pea 100 <copyString+0x48>
    3c20:	|         pea 140 <decodeFilename+0x28>
    3c24:	|         pea 182ad <PutChar+0x5b1>
    3c2a:	|         move.l d0,-(sp)
    3c2c:	|         jsr 1731a <debug_register_bitmap>
    3c32:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    3c36:	|         move.l 68(sp),d0
    3c3a:	|         movea.w d0,a1
    3c3c:	|         move.l 64(sp),d0
    3c40:	|         lsl.w #3,d0
    3c42:	|         movea.w d0,a0
    3c44:	|         move.l 1c8dc <CstDrawBuffer>,d0
    3c4a:	|         clr.l -(sp)
    3c4c:	|         pea 5 <_start+0x5>
    3c50:	|         move.l a1,-(sp)
    3c52:	|         move.l a0,-(sp)
    3c54:	|         pea 182bd <PutChar+0x5c1>
    3c5a:	|         move.l d0,-(sp)
    3c5c:	|         jsr 1731a <debug_register_bitmap>
    3c62:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    3c66:	|         move.l 68(sp),d0
    3c6a:	|         movea.w d0,a1
    3c6c:	|         move.l 64(sp),d0
    3c70:	|         lsl.w #3,d0
    3c72:	|         movea.w d0,a0
    3c74:	|         move.l 1c8d8 <CstViewBuffer>,d0
    3c7a:	|         clr.l -(sp)
    3c7c:	|         pea 5 <_start+0x5>
    3c80:	|         move.l a1,-(sp)
    3c82:	|         move.l a0,-(sp)
    3c84:	|         pea 182cc <PutChar+0x5d0>
    3c8a:	|         move.l d0,-(sp)
    3c8c:	|         jsr 1731a <debug_register_bitmap>
    3c92:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    3c96:	|         move.l 1c8d2 <CstCopperList>,d0
    3c9c:	|     /-- beq.s 3cae <CstReserveBackdrop+0x340>
    3c9e:	|     |   move.l 1c8dc <CstDrawBuffer>,d0
    3ca4:	|     +-- beq.s 3cae <CstReserveBackdrop+0x340>
    3ca6:	|     |   move.l 1c8d8 <CstViewBuffer>,d0
    3cac:	|  /--|-- bne.s 3cc0 <CstReserveBackdrop+0x352>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3cae:	|  |  \-> pea 182db <PutChar+0x5df>
    3cb4:	|  |      jsr 17232 <KPrintF>
    3cba:	|  |      addq.l #4,sp
    return FALSE;
    3cbc:	|  |      clr.w d0
    3cbe:	+--|----- bra.s 3cee <CstReserveBackdrop+0x380>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    3cc0:	|  \----> pea 18308 <PutChar+0x60c>
    3cc6:	|         jsr 17232 <KPrintF>
    3ccc:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    3cce:	|         move.l 1c8d2 <CstCopperList>,d0
    3cd4:	|         move.l d0,-(sp)
    3cd6:	|         jsr 3822 <CstSetCl>
    3cdc:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    3cde:	|         pea 1832f <PutChar+0x633>
    3ce4:	|         jsr 17232 <KPrintF>
    3cea:	|         addq.l #4,sp
  return TRUE;
    3cec:	|         moveq #1,d0

}
    3cee:	\-------> movea.l (sp)+,a6
    3cf0:	          lea 56(sp),sp
    3cf4:	          rts

00003cf6 <CstUnfreeze>:

void CstUnfreeze() {
    3cf6:	       lea -24(sp),sp
    3cfa:	       move.l a6,-(sp)
    3cfc:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    3cfe:	       pea 18352 <PutChar+0x656>
    3d04:	       jsr 17232 <KPrintF>
    3d0a:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    3d0c:	       move.l 1c8fc <winWidth>,d0
    3d12:	       lsr.l #3,d0
    3d14:	       move.l d0,d1
    3d16:	       move.l 1c900 <winHeight>,d0
    3d1c:	       move.l d0,d0
    3d1e:	       muls.w d0,d1
    3d20:	       move.w d1,d0
    3d22:	       add.w d0,d0
    3d24:	       add.w d0,d0
    3d26:	       move.w d0,d2
    3d28:	       add.w d1,d2
    3d2a:	       move.w d2,18(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3d2e:	       move.l #14675968,14(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    3d36:	       move.l 1c900 <winHeight>,d0
    3d3c:	       move.l d0,d0
    3d3e:	       movea.w d0,a1
    3d40:	       move.l 1c8fc <winWidth>,d0
    3d46:	       move.l d0,d0
    3d48:	       movea.w d0,a0
    3d4a:	       move.l 1c8ce <CstBackDropBackup>,d0
    3d50:	       clr.l -(sp)
    3d52:	       pea 5 <_start+0x5>
    3d56:	       move.l a1,-(sp)
    3d58:	       move.l a0,-(sp)
    3d5a:	       pea 17f24 <PutChar+0x228>
    3d60:	       move.l d0,-(sp)
    3d62:	       jsr 1731a <debug_register_bitmap>
    3d68:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    3d6c:	       move.l 1c8ce <CstBackDropBackup>,28(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    3d74:	       move.l 1c8ca <CstBackDrop>,24(sp)
  for(int i=0;i<size/4;i++) 
    3d7c:	       clr.l 20(sp)
    3d80:	   /-- bra.s 3da6 <CstUnfreeze+0xb0>
  {
    *dst++ = *src++;
    3d82:	/--|-> move.l 28(sp),d1
    3d86:	|  |   move.l d1,d0
    3d88:	|  |   addq.l #4,d0
    3d8a:	|  |   move.l d0,28(sp)
    3d8e:	|  |   move.l 24(sp),d0
    3d92:	|  |   move.l d0,d2
    3d94:	|  |   addq.l #4,d2
    3d96:	|  |   move.l d2,24(sp)
    3d9a:	|  |   movea.l d1,a0
    3d9c:	|  |   move.l (a0),d1
    3d9e:	|  |   movea.l d0,a0
    3da0:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    3da2:	|  |   addq.l #1,20(sp)
    3da6:	|  \-> move.w 18(sp),d0
    3daa:	|      lsr.w #2,d0
    3dac:	|      move.w d0,d0
    3dae:	|      andi.l #65535,d0
    3db4:	|      cmp.l 20(sp),d0
    3db8:	\----- bgt.s 3d82 <CstUnfreeze+0x8c>
  }

  CstApplyBackDropCounter = 2;
    3dba:	       move.w #2,1c8d6 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    3dc2:	       move.l 1c8fc <winWidth>,d0
    3dc8:	       lsr.l #4,d0
    3dca:	       movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    3dd0:	       move.l a0,d1
    3dd2:	       addq.l #2,d1
    3dd4:	       move.l d1,1c8ec <CstBackDropBufferApplyCursor>
    3dda:	       move.l d0,d0
    3ddc:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    3dde:	       move.l 1c900 <winHeight>,d0
    3de4:	       movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    3dea:	       move.l a0,d1
    3dec:	       addq.l #2,d1
    3dee:	       move.l d1,1c8ec <CstBackDropBufferApplyCursor>
    3df4:	       move.l d0,d0
    3df6:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3df8:	       movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    3dfe:	       move.l a0,d0
    3e00:	       addq.l #2,d0
    3e02:	       move.l d0,1c8ec <CstBackDropBufferApplyCursor>
    3e08:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3e0a:	       movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    3e10:	       move.l a0,d0
    3e12:	       addq.l #2,d0
    3e14:	       move.l d0,1c8ec <CstBackDropBufferApplyCursor>
    3e1a:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3e1c:	       movea.l 1c8ec <CstBackDropBufferApplyCursor>,a0
    3e22:	       move.l a0,d0
    3e24:	       addq.l #2,d0
    3e26:	       move.l d0,1c8ec <CstBackDropBufferApplyCursor>
    3e2c:	       clr.w (a0)
  
  if( !CstBackDropBackup) {
    3e2e:	       move.l 1c8ce <CstBackDropBackup>,d0
    3e34:	   /-- bne.s 3e4e <CstUnfreeze+0x158>
    FreeVec( CstBackDropBackup);
    3e36:	   |   move.l 1c8ce <CstBackDropBackup>,10(sp)
    3e3e:	   |   move.l 1c9a8 <SysBase>,d0
    3e44:	   |   movea.l d0,a6
    3e46:	   |   movea.l 10(sp),a1
    3e4a:	   |   jsr -690(a6)
  }

  KPrintF("CstFreeze: Finished");
    3e4e:	   \-> pea 17f33 <PutChar+0x237>
    3e54:	       jsr 17232 <KPrintF>
    3e5a:	       addq.l #4,sp

}
    3e5c:	       nop
    3e5e:	       move.l (sp)+,d2
    3e60:	       movea.l (sp)+,a6
    3e62:	       lea 24(sp),sp
    3e66:	       rts

00003e68 <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    3e68:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    3e6c:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    3e70:	       tst.l 24(sp)
    3e74:	   /-- bge.s 3e7a <drawLine+0x12>
    3e76:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    3e7a:	   \-> tst.l 28(sp)
    3e7e:	   /-- bge.s 3e84 <drawLine+0x1c>
    3e80:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    3e84:	   \-> tst.l 32(sp)
    3e88:	   /-- bge.s 3e8e <drawLine+0x26>
    3e8a:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    3e8e:	   \-> tst.l 36(sp)
    3e92:	   /-- bge.s 3e98 <drawLine+0x30>
    3e94:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    3e98:	   \-> move.l 1ca44 <sceneWidth>,d0
    3e9e:	       cmp.l 24(sp),d0
    3ea2:	   /-- bge.s 3eb2 <drawLine+0x4a>
    3ea4:	   |   move.l 1ca44 <sceneWidth>,d0
    3eaa:	   |   move.l d0,d1
    3eac:	   |   subq.l #1,d1
    3eae:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    3eb2:	   \-> move.l 1ca44 <sceneWidth>,d0
    3eb8:	       cmp.l 32(sp),d0
    3ebc:	   /-- bge.s 3ecc <drawLine+0x64>
    3ebe:	   |   move.l 1ca44 <sceneWidth>,d0
    3ec4:	   |   move.l d0,d1
    3ec6:	   |   subq.l #1,d1
    3ec8:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    3ecc:	   \-> move.l 1ca48 <sceneHeight>,d0
    3ed2:	       cmp.l 28(sp),d0
    3ed6:	   /-- bge.s 3ee6 <drawLine+0x7e>
    3ed8:	   |   move.l 1ca48 <sceneHeight>,d0
    3ede:	   |   move.l d0,d1
    3ee0:	   |   subq.l #1,d1
    3ee2:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    3ee6:	   \-> move.l 1ca48 <sceneHeight>,d0
    3eec:	       cmp.l 36(sp),d0
    3ef0:	   /-- bge.s 3f00 <drawLine+0x98>
    3ef2:	   |   move.l 1ca48 <sceneHeight>,d0
    3ef8:	   |   move.l d0,d1
    3efa:	   |   subq.l #1,d1
    3efc:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    3f00:	   \-> move.l 24(sp),d0
    3f04:	       cmp.l 32(sp),d0
    3f08:	/----- ble.s 3f24 <drawLine+0xbc>
		x = x2; 
    3f0a:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    3f10:	|      tst.w 10(sp)
    3f14:	|      seq d0
    3f16:	|      neg.b d0
    3f18:	|      move.b d0,d0
    3f1a:	|      andi.w #255,d0
    3f1e:	|      move.w d0,10(sp)
    3f22:	|  /-- bra.s 3f2a <drawLine+0xc2>
	} else x = x1;
    3f24:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    3f2a:	   \-> move.l 28(sp),d1
    3f2e:	       cmp.l 36(sp),d1
    3f32:	/----- ble.s 3f4e <drawLine+0xe6>
		y = y2; 
    3f34:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    3f3a:	|      tst.w 10(sp)
    3f3e:	|      seq d0
    3f40:	|      neg.b d0
    3f42:	|      move.b d0,d0
    3f44:	|      andi.w #255,d0
    3f48:	|      move.w d0,10(sp)
    3f4c:	|  /-- bra.s 3f54 <drawLine+0xec>
	} else y = y1;	
    3f4e:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    3f54:	   \-> move.l 32(sp),d0
    3f58:	       sub.l 24(sp),d0
    3f5c:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    3f60:	       move.l 6(sp),d0
    3f64:	   /-- bpl.s 3f68 <drawLine+0x100>
    3f66:	   |   neg.l d0
    3f68:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    3f6c:	       move.l 36(sp),d1
    3f70:	       sub.l 28(sp),d1
    3f74:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    3f78:	       move.l 2(sp),d0
    3f7c:	   /-- bpl.s 3f80 <drawLine+0x118>
    3f7e:	   |   neg.l d0
    3f80:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    3f84:	       tst.l 6(sp)
    3f88:	   /-- bne.s 3fac <drawLine+0x144>
		diffX = 1;
    3f8a:	   |   moveq #1,d0
    3f8c:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    3f90:	   |   move.l 1ca44 <sceneWidth>,d0
    3f96:	   |   subq.l #1,d0
    3f98:	   |   cmp.l 16(sp),d0
    3f9c:	   +-- bne.s 3fac <drawLine+0x144>
    3f9e:	   |   move.l 1ca44 <sceneWidth>,d0
    3fa4:	   |   move.l d0,d1
    3fa6:	   |   subq.l #2,d1
    3fa8:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    3fac:	   \-> tst.l 2(sp)
    3fb0:	   /-- bne.s 3fd4 <drawLine+0x16c>
		diffY = 1;
    3fb2:	   |   moveq #1,d0
    3fb4:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    3fb8:	   |   move.l 1ca48 <sceneHeight>,d0
    3fbe:	   |   subq.l #1,d0
    3fc0:	   |   cmp.l 12(sp),d0
    3fc4:	   +-- bne.s 3fd4 <drawLine+0x16c>
    3fc6:	   |   move.l 1ca48 <sceneHeight>,d0
    3fcc:	   |   move.l d0,d1
    3fce:	   |   subq.l #2,d1
    3fd0:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    3fd4:	   \-> pea 1837d <PutChar+0x681>
    3fda:	       jsr 17232 <KPrintF>
    3fe0:	       addq.l #4,sp
	
}
    3fe2:	       nop
    3fe4:	       lea 20(sp),sp
    3fe8:	       rts

00003fea <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    3fea:	                      lea -24(sp),sp
    3fee:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    3ff0:	                      move.l 1c904 <firstTexture>,d0
    3ff6:	/-------------------- beq.w 40d4 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    3ffa:	|                     clr.l 24(sp)
    3ffe:	|     /-------------- bra.w 40c8 <deleteTextures+0xde>
			BOOL found = FALSE;
    4002:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    4006:	|  |  |               move.l 1c904 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    400e:	|  |  |               movea.l 20(sp),a0
    4012:	|  |  |               move.l (a0),d1
    4014:	|  |  |               move.l 24(sp),d0
    4018:	|  |  |               add.l d0,d0
    401a:	|  |  |               add.l d0,d0
    401c:	|  |  |               movea.l 36(sp),a0
    4020:	|  |  |               adda.l d0,a0
    4022:	|  |  |               move.l (a0),d0
    4024:	|  |  |               cmp.l d1,d0
    4026:	|  |  |  /----------- bne.w 40ba <deleteTextures+0xd0>
				found = TRUE;
    402a:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    4030:	|  |  |  |            movea.l 20(sp),a0
    4034:	|  |  |  |            move.l 12(a0),d0
    4038:	|  |  |  |            move.l d0,1c904 <firstTexture>
				FreeVec(list);
    403e:	|  |  |  |            move.l 20(sp),6(sp)
    4044:	|  |  |  |            move.l 1c9a8 <SysBase>,d0
    404a:	|  |  |  |            movea.l d0,a6
    404c:	|  |  |  |            movea.l 6(sp),a1
    4050:	|  |  |  |            jsr -690(a6)
				continue;
    4054:	|  |  |  |  /-------- bra.s 40c4 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    4056:	|  |  |  |  |  /----> movea.l 20(sp),a0
    405a:	|  |  |  |  |  |      movea.l 12(a0),a0
    405e:	|  |  |  |  |  |      move.l (a0),d1
    4060:	|  |  |  |  |  |      move.l 24(sp),d0
    4064:	|  |  |  |  |  |      add.l d0,d0
    4066:	|  |  |  |  |  |      add.l d0,d0
    4068:	|  |  |  |  |  |      movea.l 36(sp),a0
    406c:	|  |  |  |  |  |      adda.l d0,a0
    406e:	|  |  |  |  |  |      move.l (a0),d0
    4070:	|  |  |  |  |  |      cmp.l d1,d0
    4072:	|  |  |  |  |  |  /-- bne.s 40b0 <deleteTextures+0xc6>
					found = TRUE;
    4074:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    407a:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    407e:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    4084:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4088:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    408c:	|  |  |  |  |  |  |   move.l 12(a0),d0
    4090:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4094:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    4098:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    409e:	|  |  |  |  |  |  |   move.l 1c9a8 <SysBase>,d0
    40a4:	|  |  |  |  |  |  |   movea.l d0,a6
    40a6:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    40aa:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    40ae:	|  |  |  |  +--|--|-- bra.s 40c4 <deleteTextures+0xda>
				}
				list = list->next;
    40b0:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    40b4:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    40ba:	|  |  |  \--|--|----> movea.l 20(sp),a0
    40be:	|  |  |     |  |      move.l 12(a0),d0
    40c2:	|  |  |     |  \----- bne.s 4056 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    40c4:	|  |  |     \-------> addq.l #1,24(sp)
    40c8:	|  |  \-------------> move.l 24(sp),d0
    40cc:	|  |                  cmp.l 32(sp),d0
    40d0:	|  \----------------- bcs.w 4002 <deleteTextures+0x18>
			}
		}
	}
}
    40d4:	\-------------------> nop
    40d6:	                      movea.l (sp)+,a6
    40d8:	                      lea 24(sp),sp
    40dc:	                      rts

000040de <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    40de:	subq.l #4,sp
    40e0:	move.l 8(sp),d0
    40e4:	move.w d0,d0
    40e6:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    40ea:	pea 183a0 <PutChar+0x6a4>
    40f0:	jsr 17232 <KPrintF>
    40f6:	addq.l #4,sp
}
    40f8:	nop
    40fa:	addq.l #4,sp
    40fc:	rts

000040fe <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    40fe:	       moveq #-1,d0
    4100:	       cmp.l 4(sp),d0
    4104:	   /-- bne.s 410a <resourceNameFromNum+0xc>
    4106:	   |   moveq #0,d0
    4108:	/--|-- bra.s 4142 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    410a:	|  \-> move.l 1c984 <numResourceNames>,d0
    4110:	|  /-- bne.s 411a <resourceNameFromNum+0x1c>
    4112:	|  |   move.l #99280,d0
    4118:	+--|-- bra.s 4142 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    411a:	|  \-> move.l 1c984 <numResourceNames>,d0
    4120:	|      cmp.l 4(sp),d0
    4124:	|  /-- ble.s 413c <resourceNameFromNum+0x3e>
    4126:	|  |   move.l 1c93c <allResourceNames>,d1
    412c:	|  |   move.l 4(sp),d0
    4130:	|  |   add.l d0,d0
    4132:	|  |   add.l d0,d0
    4134:	|  |   movea.l d1,a0
    4136:	|  |   adda.l d0,a0
    4138:	|  |   move.l (a0),d0
    413a:	+--|-- bra.s 4142 <resourceNameFromNum+0x44>
	return "Unknown resource";
    413c:	|  \-> move.l #99289,d0
    4142:	\----> rts

00004144 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    4144:	          lea -44(sp),sp
    4148:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    414c:	          move.l #320,1c8fc <winWidth>
    winHeight = 256;
    4156:	          move.l #256,1c900 <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    4160:	          tst.l 60(sp)
    4164:	      /-- bne.s 417c <main_sludge+0x38>
		bundleFolder = copyString("game/");
    4166:	      |   pea 183ea <PutChar+0x6ee>
    416c:	      |   jsr b8 <copyString>
    4172:	      |   addq.l #4,sp
    4174:	      |   move.l d0,1c914 <bundleFolder>
    417a:	   /--|-- bra.s 4192 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    417c:	   |  \-> movea.l 64(sp),a0
    4180:	   |      move.l (a0),d0
    4182:	   |      move.l d0,-(sp)
    4184:	   |      jsr b8 <copyString>
    418a:	   |      addq.l #4,sp
    418c:	   |      move.l d0,1c914 <bundleFolder>
	}
    
	int lastSlash = -1;
    4192:	   \----> moveq #-1,d0
    4194:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4198:	          clr.l 44(sp)
    419c:	   /----- bra.s 41be <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    419e:	/--|----> move.l 1c914 <bundleFolder>,d1
    41a4:	|  |      move.l 44(sp),d0
    41a8:	|  |      movea.l d1,a0
    41aa:	|  |      adda.l d0,a0
    41ac:	|  |      move.b (a0),d0
    41ae:	|  |      cmpi.b #47,d0
    41b2:	|  |  /-- bne.s 41ba <main_sludge+0x76>
    41b4:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    41ba:	|  |  \-> addq.l #1,44(sp)
    41be:	|  \----> move.l 1c914 <bundleFolder>,d1
    41c4:	|         move.l 44(sp),d0
    41c8:	|         movea.l d1,a0
    41ca:	|         adda.l d0,a0
    41cc:	|         move.b (a0),d0
    41ce:	\-------- bne.s 419e <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    41d0:	          move.l 1c914 <bundleFolder>,d0
    41d6:	          move.l 48(sp),d1
    41da:	          addq.l #1,d1
    41dc:	          movea.l d0,a0
    41de:	          adda.l d1,a0
    41e0:	          clr.b (a0)

	if (argc > 1) {
    41e2:	          moveq #1,d0
    41e4:	          cmp.l 60(sp),d0
    41e8:	      /-- bge.s 4204 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    41ea:	      |   move.l 60(sp),d0
    41ee:	      |   addi.l #1073741823,d0
    41f4:	      |   add.l d0,d0
    41f6:	      |   add.l d0,d0
    41f8:	      |   movea.l 64(sp),a0
    41fc:	      |   adda.l d0,a0
    41fe:	      |   move.l (a0),52(sp)
    4202:	   /--|-- bra.s 425e <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    4204:	   |  \-> move.l 1c914 <bundleFolder>,d0
    420a:	   |      pea 183f0 <PutChar+0x6f4>
    4210:	   |      move.l d0,-(sp)
    4212:	   |      jsr 13cfe <joinStrings>
    4218:	   |      addq.l #8,sp
    421a:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    421e:	   |      move.l 52(sp),-(sp)
    4222:	   |      jsr 13bf8 <fileExists>
    4228:	   |      addq.l #4,sp
    422a:	   |      tst.b d0
    422c:	   +----- bne.s 425e <main_sludge+0x11a>
			FreeVec(sludgeFile);
    422e:	   |      move.l 52(sp),40(sp)
    4234:	   |      move.l 1c9a8 <SysBase>,d0
    423a:	   |      movea.l d0,a6
    423c:	   |      movea.l 40(sp),a1
    4240:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    4244:	   |      move.l 1c914 <bundleFolder>,d0
    424a:	   |      pea 183fd <PutChar+0x701>
    4250:	   |      move.l d0,-(sp)
    4252:	   |      jsr 13cfe <joinStrings>
    4258:	   |      addq.l #8,sp
    425a:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    425e:	   \----> pea 18406 <PutChar+0x70a>
    4264:	          jsr 17232 <KPrintF>
    426a:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    426c:	          move.l 52(sp),-(sp)
    4270:	          jsr 13bf8 <fileExists>
    4276:	          addq.l #4,sp
    4278:	          tst.b d0
    427a:	      /-- bne.s 42d2 <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    427c:	      |   move.l 1c9b0 <DOSBase>,d0
    4282:	      |   movea.l d0,a6
    4284:	      |   jsr -60(a6)
    4288:	      |   move.l d0,28(sp)
    428c:	      |   move.l 28(sp),d0
    4290:	      |   move.l d0,24(sp)
    4294:	      |   move.l #99334,20(sp)
    429c:	      |   moveq #21,d0
    429e:	      |   move.l d0,16(sp)
    42a2:	      |   move.l 1c9b0 <DOSBase>,d0
    42a8:	      |   movea.l d0,a6
    42aa:	      |   move.l 24(sp),d1
    42ae:	      |   move.l 20(sp),d2
    42b2:	      |   move.l 16(sp),d3
    42b6:	      |   jsr -48(a6)
    42ba:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    42be:	      |   pea 18406 <PutChar+0x70a>
    42c4:	      |   jsr 17232 <KPrintF>
    42ca:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    42cc:	      |   moveq #0,d0
    42ce:	/-----|-- bra.w 44d0 <main_sludge+0x38c>
	}

	KPrintF("Setgamefilepath\n");
    42d2:	|     \-> pea 1841c <PutChar+0x720>
    42d8:	|         jsr 17232 <KPrintF>
    42de:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    42e0:	|         move.l 52(sp),-(sp)
    42e4:	|         jsr 44da <setGameFilePath>
    42ea:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    42ec:	|         move.l 52(sp),-(sp)
    42f0:	|         jsr 5a88 <initSludge>
    42f6:	|         addq.l #4,sp
    42f8:	|         tst.w d0
    42fa:	|     /-- bne.s 4302 <main_sludge+0x1be>
    42fc:	|     |   moveq #0,d0
    42fe:	+-----|-- bra.w 44d0 <main_sludge+0x38c>
	
	if( winWidth != 320 || winHeight != 256) {
    4302:	|     \-> move.l 1c8fc <winWidth>,d0
    4308:	|         cmpi.l #320,d0
    430e:	|     /-- bne.s 431e <main_sludge+0x1da>
    4310:	|     |   move.l 1c900 <winHeight>,d0
    4316:	|     |   cmpi.l #256,d0
    431c:	|  /--|-- beq.s 4340 <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    431e:	|  |  \-> pea 1842d <PutChar+0x731>
    4324:	|  |      jsr 17232 <KPrintF>
    432a:	|  |      addq.l #4,sp
		winWidth = 320;
    432c:	|  |      move.l #320,1c8fc <winWidth>
		winHeight = 256;
    4336:	|  |      move.l #256,1c900 <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    4340:	|  \----> pea 184aa <PutChar+0x7ae>
    4346:	|         jsr 17232 <KPrintF>
    434c:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    434e:	|         move.l 1c900 <winHeight>,d0
    4354:	|         move.l d0,d1
    4356:	|         move.l 1c8fc <winWidth>,d0
    435c:	|         move.l d1,-(sp)
    435e:	|         move.l d0,-(sp)
    4360:	|         jsr d3fa <resizeBackdrop>
    4366:	|         addq.l #8,sp
    4368:	|         tst.w d0
    436a:	|     /-- bne.s 4380 <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    436c:	|     |   pea 184bd <PutChar+0x7c1>
    4372:	|     |   jsr 17232 <KPrintF>
    4378:	|     |   addq.l #4,sp
		return FALSE;
    437a:	|     |   moveq #0,d0
    437c:	+-----|-- bra.w 44d0 <main_sludge+0x38c>
	}

	KPrintF("Init People\n");
    4380:	|     \-> pea 184e3 <PutChar+0x7e7>
    4386:	|         jsr 17232 <KPrintF>
    438c:	|         addq.l #4,sp
	if (! initPeople ())
    438e:	|         jsr a962 <initPeople>
    4394:	|         tst.w d0
    4396:	|     /-- bne.s 43ac <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    4398:	|     |   pea 184f0 <PutChar+0x7f4>
    439e:	|     |   jsr 17232 <KPrintF>
    43a4:	|     |   addq.l #4,sp
		return FALSE;
    43a6:	|     |   moveq #0,d0
    43a8:	+-----|-- bra.w 44d0 <main_sludge+0x38c>
	}

	KPrintF("Init Floor\n");
    43ac:	|     \-> pea 18511 <PutChar+0x815>
    43b2:	|         jsr 17232 <KPrintF>
    43b8:	|         addq.l #4,sp
	if (! initFloor ())
    43ba:	|         jsr 165e8 <initFloor>
    43c0:	|         tst.w d0
    43c2:	|     /-- bne.s 43d8 <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    43c4:	|     |   pea 1851d <PutChar+0x821>
    43ca:	|     |   jsr 17232 <KPrintF>
    43d0:	|     |   addq.l #4,sp
		
		return FALSE;
    43d2:	|     |   moveq #0,d0
    43d4:	+-----|-- bra.w 44d0 <main_sludge+0x38c>
	}

	KPrintF("Init Objecttype\n");
    43d8:	|     \-> pea 1853d <PutChar+0x841>
    43de:	|         jsr 17232 <KPrintF>
    43e4:	|         addq.l #4,sp
	if (! initObjectTypes ())
    43e6:	|         jsr d5b6 <initObjectTypes>
    43ec:	|         tst.w d0
    43ee:	|     /-- bne.s 4404 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    43f0:	|     |   pea 1854e <PutChar+0x852>
    43f6:	|     |   jsr 17232 <KPrintF>
    43fc:	|     |   addq.l #4,sp
		return FALSE;
    43fe:	|     |   moveq #0,d0
    4400:	+-----|-- bra.w 44d0 <main_sludge+0x38c>
	}

	KPrintF("Init speech\n");
    4404:	|     \-> pea 18574 <PutChar+0x878>
    440a:	|         jsr 17232 <KPrintF>
    4410:	|         addq.l #4,sp
	initSpeech ();
    4412:	|         jsr 7eaa <initSpeech>
	KPrintF("Init status bar\n");
    4418:	|         pea 18581 <PutChar+0x885>
    441e:	|         jsr 17232 <KPrintF>
    4424:	|         addq.l #4,sp
	initStatusBar ();
    4426:	|         jsr 796e <initStatusBar>

	KPrintF("Get numbered string\n");
    442c:	|         pea 18592 <PutChar+0x896>
    4432:	|         jsr 17232 <KPrintF>
    4438:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    443a:	|         pea 1 <_start+0x1>
    443e:	|         jsr 6c7e <getNumberedString>
    4444:	|         addq.l #4,sp
    4446:	|         move.l d0,1c90c <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    444c:	|         pea 185a7 <PutChar+0x8ab>
    4452:	|         jsr 17232 <KPrintF>
    4458:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    445a:	|         move.l 1c978 <noStack>,d0
    4460:	|         pea 1 <_start+0x1>
    4464:	|         move.l d0,-(sp)
    4466:	|         clr.l -(sp)
    4468:	|         clr.l -(sp)
    446a:	|         clr.l -(sp)
    446c:	|         jsr 6ad4 <startNewFunctionNum>
    4472:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    4476:	|         pea 185bf <PutChar+0x8c3>
    447c:	|         jsr 17232 <KPrintF>
    4482:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    4484:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    448c:	|         clr.l 1c918 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    4492:	|     /-- bra.s 44b2 <main_sludge+0x36e>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    4494:	|  /--|-> jsr 6a64 <sludgeDisplay>
		CsiCheckInput();
    449a:	|  |  |   jsr cf2e <CsiCheckInput>
		walkAllPeople();
    44a0:	|  |  |   jsr bee8 <walkAllPeople>
		handleInput();
    44a6:	|  |  |   jsr 5822 <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    44ac:	|  |  |   jsr 17166 <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    44b2:	|  |  \-> move.l 1c918 <weAreDoneSoQuit>,d0
    44b8:	|  \----- beq.s 4494 <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    44ba:	|         move.l 52(sp),32(sp)
    44c0:	|         move.l 1c9a8 <SysBase>,d0
    44c6:	|         movea.l d0,a6
    44c8:	|         movea.l 32(sp),a1
    44cc:	|         jsr -690(a6)
}
    44d0:	\-------> movem.l (sp)+,d2-d3/a6
    44d4:	          lea 44(sp),sp
    44d8:	          rts

000044da <setGameFilePath>:

void setGameFilePath (char * f) {
    44da:	          lea -1104(sp),sp
    44de:	          move.l a6,-(sp)
    44e0:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    44e2:	          move.l #1112,d0
    44e8:	          add.l sp,d0
    44ea:	          addi.l #-1102,d0
    44f0:	          move.l d0,1100(sp)
    44f4:	          move.l #998,1096(sp)
    44fc:	          move.l 1c9b0 <DOSBase>,d0
    4502:	          movea.l d0,a6
    4504:	          move.l 1100(sp),d1
    4508:	          move.l 1096(sp),d2
    450c:	          jsr -564(a6)
    4510:	          move.w d0,1094(sp)
    4514:	          move.w 1094(sp),d0
    4518:	      /-- bne.s 4528 <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    451a:	      |   pea 185d2 <PutChar+0x8d6>
    4520:	      |   jsr 17232 <KPrintF>
    4526:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    4528:	      \-> moveq #-1,d0
    452a:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    452e:	          clr.l 1104(sp)
    4532:	   /----- bra.s 4550 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    4534:	/--|----> move.l 1104(sp),d0
    4538:	|  |      movea.l 1116(sp),a0
    453c:	|  |      adda.l d0,a0
    453e:	|  |      move.b (a0),d0
    4540:	|  |      cmpi.b #47,d0
    4544:	|  |  /-- bne.s 454c <setGameFilePath+0x72>
    4546:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    454c:	|  |  \-> addq.l #1,1104(sp)
    4550:	|  \----> move.l 1104(sp),d0
    4554:	|         movea.l 1116(sp),a0
    4558:	|         adda.l d0,a0
    455a:	|         move.b (a0),d0
    455c:	\-------- bne.s 4534 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    455e:	          moveq #-1,d0
    4560:	          cmp.l 1108(sp),d0
    4564:	   /----- beq.s 45de <setGameFilePath+0x104>
		f[got] = 0;	
    4566:	   |      move.l 1108(sp),d0
    456a:	   |      movea.l 1116(sp),a0
    456e:	   |      adda.l d0,a0
    4570:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    4572:	   |      move.l 1116(sp),1090(sp)
    4578:	   |      moveq #-2,d0
    457a:	   |      move.l d0,1086(sp)
    457e:	   |      move.l 1c9b0 <DOSBase>,d0
    4584:	   |      movea.l d0,a6
    4586:	   |      move.l 1090(sp),d1
    458a:	   |      move.l 1086(sp),d2
    458e:	   |      jsr -84(a6)
    4592:	   |      move.l d0,1082(sp)
    4596:	   |      move.l 1082(sp),d0
    459a:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    459e:	   |      move.l 1078(sp),1074(sp)
    45a4:	   |      move.l 1c9b0 <DOSBase>,d0
    45aa:	   |      movea.l d0,a6
    45ac:	   |      move.l 1074(sp),d1
    45b0:	   |      jsr -126(a6)
    45b4:	   |      move.l d0,1070(sp)
    45b8:	   |      move.l 1070(sp),d0
    45bc:	   |  /-- bne.s 45d0 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    45be:	   |  |   move.l 1116(sp),-(sp)
    45c2:	   |  |   pea 185f8 <PutChar+0x8fc>
    45c8:	   |  |   jsr 17232 <KPrintF>
    45ce:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    45d0:	   |  \-> move.l 1108(sp),d0
    45d4:	   |      movea.l 1116(sp),a0
    45d8:	   |      adda.l d0,a0
    45da:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    45de:	   \----> move.l #400,1066(sp)
    45e6:	          clr.l 1062(sp)
    45ea:	          move.l 1c9a8 <SysBase>,d0
    45f0:	          movea.l d0,a6
    45f2:	          move.l 1066(sp),d0
    45f6:	          move.l 1062(sp),d1
    45fa:	          jsr -684(a6)
    45fe:	          move.l d0,1058(sp)
    4602:	          move.l 1058(sp),d0
    4606:	          move.l d0,1c910 <gamePath>
	if (gamePath==0) {
    460c:	          move.l 1c910 <gamePath>,d0
    4612:	      /-- bne.s 4626 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    4614:	      |   pea 1862b <PutChar+0x92f>
    461a:	      |   jsr 17232 <KPrintF>
    4620:	      |   addq.l #4,sp
    4622:	   /--|-- bra.w 470e <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    4626:	   |  \-> move.l 1c910 <gamePath>,1054(sp)
    462e:	   |      moveq #-2,d0
    4630:	   |      move.l d0,1050(sp)
    4634:	   |      move.l 1c9b0 <DOSBase>,d0
    463a:	   |      movea.l d0,a6
    463c:	   |      move.l 1054(sp),d1
    4640:	   |      move.l 1050(sp),d2
    4644:	   |      jsr -84(a6)
    4648:	   |      move.l d0,1046(sp)
    464c:	   |      move.l 1046(sp),d0
    4650:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    4654:	   |      move.l 1042(sp),1038(sp)
    465a:	   |      move.l 1c9b0 <DOSBase>,d0
    4660:	   |      movea.l d0,a6
    4662:	   |      move.l 1038(sp),d1
    4666:	   |      jsr -126(a6)
    466a:	   |      move.l d0,1034(sp)
    466e:	   |      move.l 1034(sp),d0
    4672:	   |  /-- bne.s 4682 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    4674:	   |  |   pea 18666 <PutChar+0x96a>
    467a:	   |  |   jsr 17232 <KPrintF>
    4680:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    4682:	   |  \-> move.l #1112,d0
    4688:	   |      add.l sp,d0
    468a:	   |      addi.l #-1102,d0
    4690:	   |      move.l d0,1030(sp)
    4694:	   |      moveq #-2,d0
    4696:	   |      move.l d0,1026(sp)
    469a:	   |      move.l 1c9b0 <DOSBase>,d0
    46a0:	   |      movea.l d0,a6
    46a2:	   |      move.l 1030(sp),d1
    46a6:	   |      move.l 1026(sp),d2
    46aa:	   |      jsr -84(a6)
    46ae:	   |      move.l d0,1022(sp)
    46b2:	   |      move.l 1022(sp),d0
    46b6:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    46ba:	   |      move.l 1042(sp),1018(sp)
    46c0:	   |      move.l 1c9b0 <DOSBase>,d0
    46c6:	   |      movea.l d0,a6
    46c8:	   |      move.l 1018(sp),d1
    46cc:	   |      jsr -126(a6)
    46d0:	   |      move.l d0,1014(sp)
    46d4:	   |      move.l 1014(sp),d0
    46d8:	   |  /-- bne.s 46ee <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    46da:	   |  |   moveq #10,d0
    46dc:	   |  |   add.l sp,d0
    46de:	   |  |   move.l d0,-(sp)
    46e0:	   |  |   pea 18692 <PutChar+0x996>
    46e6:	   |  |   jsr 17232 <KPrintF>
    46ec:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    46ee:	   |  \-> move.l 1c910 <gamePath>,d0
    46f4:	   +----- beq.s 470e <setGameFilePath+0x234>
    46f6:	   |      move.l 1c910 <gamePath>,1010(sp)
    46fe:	   |      move.l 1c9a8 <SysBase>,d0
    4704:	   |      movea.l d0,a6
    4706:	   |      movea.l 1010(sp),a1
    470a:	   |      jsr -690(a6)
}
    470e:	   \----> move.l (sp)+,d2
    4710:	          movea.l (sp)+,a6
    4712:	          lea 1104(sp),sp
    4716:	          rts

00004718 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    4718:	/-------> lea -16(sp),sp
    471c:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    471e:	|         move.l 24(sp),-(sp)
    4722:	|         jsr 6846 <pauseFunction>
    4728:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    472a:	|     /-- bra.s 473c <abortFunction+0x24>
    472c:	|  /--|-> moveq #24,d0
    472e:	|  |  |   add.l 24(sp),d0
    4732:	|  |  |   move.l d0,-(sp)
    4734:	|  |  |   jsr 15156 <trimStack>
    473a:	|  |  |   addq.l #4,sp
    473c:	|  |  \-> movea.l 24(sp),a0
    4740:	|  |      move.l 24(a0),d0
    4744:	|  \----- bne.s 472c <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    4746:	|         movea.l 24(sp),a0
    474a:	|         move.l 4(a0),12(sp)
    4750:	|         move.l 1c9a8 <SysBase>,d0
    4756:	|         movea.l d0,a6
    4758:	|         movea.l 12(sp),a1
    475c:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    4760:	|         clr.l 16(sp)
    4764:	|     /-- bra.s 4784 <abortFunction+0x6c>
    4766:	|  /--|-> movea.l 24(sp),a0
    476a:	|  |  |   move.l 20(a0),d1
    476e:	|  |  |   move.l 16(sp),d0
    4772:	|  |  |   lsl.l #3,d0
    4774:	|  |  |   add.l d1,d0
    4776:	|  |  |   move.l d0,-(sp)
    4778:	|  |  |   jsr 14a20 <unlinkVar>
    477e:	|  |  |   addq.l #4,sp
    4780:	|  |  |   addq.l #1,16(sp)
    4784:	|  |  \-> movea.l 24(sp),a0
    4788:	|  |      move.l 8(a0),d0
    478c:	|  |      cmp.l 16(sp),d0
    4790:	|  \----- bgt.s 4766 <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    4792:	|         movea.l 24(sp),a0
    4796:	|         move.l 20(a0),8(sp)
    479c:	|         move.l 1c9a8 <SysBase>,d0
    47a2:	|         movea.l d0,a6
    47a4:	|         movea.l 8(sp),a1
    47a8:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    47ac:	|         moveq #28,d0
    47ae:	|         add.l 24(sp),d0
    47b2:	|         move.l d0,-(sp)
    47b4:	|         jsr 14a20 <unlinkVar>
    47ba:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    47bc:	|         movea.l 24(sp),a0
    47c0:	|         move.l 40(a0),d0
    47c4:	|     /-- beq.s 47d6 <abortFunction+0xbe>
    47c6:	|     |   movea.l 24(sp),a0
    47ca:	|     |   move.l 40(a0),d0
    47ce:	|     |   move.l d0,-(sp)
    47d0:	\-----|-- jsr 4718 <abortFunction>(pc)
    47d4:	      |   addq.l #4,sp
	FreeVec(fun);
    47d6:	      \-> move.l 24(sp),4(sp)
    47dc:	          move.l 1c9a8 <SysBase>,d0
    47e2:	          movea.l d0,a6
    47e4:	          movea.l 4(sp),a1
    47e8:	          jsr -690(a6)
	fun = NULL;
    47ec:	          clr.l 24(sp)
}
    47f0:	          nop
    47f2:	          movea.l (sp)+,a6
    47f4:	          lea 16(sp),sp
    47f8:	          rts

000047fa <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    47fa:	          subq.l #8,sp
	int n = 0;
    47fc:	          clr.l 4(sp)
	*killedMyself = FALSE;
    4800:	          movea.l 20(sp),a0
    4804:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    4806:	          move.l 1c940 <allRunningFunctions>,(sp)
	while (fun) {
    480c:	   /----- bra.s 483a <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    480e:	/--|----> movea.l (sp),a0
    4810:	|  |      move.l (a0),d0
    4812:	|  |      cmp.l 12(sp),d0
    4816:	|  |  /-- bne.s 4834 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    4818:	|  |  |   movea.l (sp),a0
    481a:	|  |  |   move.w #1,54(a0)
			n++;
    4820:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    4824:	|  |  |   move.l (sp),d0
    4826:	|  |  |   cmp.l 16(sp),d0
    482a:	|  |  +-- bne.s 4834 <cancelAFunction+0x3a>
    482c:	|  |  |   movea.l 20(sp),a0
    4830:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    4834:	|  |  \-> movea.l (sp),a0
    4836:	|  |      move.l 44(a0),(sp)
	while (fun) {
    483a:	|  \----> tst.l (sp)
    483c:	\-------- bne.s 480e <cancelAFunction+0x14>
	}
	return n;
    483e:	          move.l 4(sp),d0
}
    4842:	          addq.l #8,sp
    4844:	          rts

00004846 <completeTimers>:


void completeTimers () {
    4846:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    4848:	          move.l 1c940 <allRunningFunctions>,(sp)

	while (thisFunction) {
    484e:	   /----- bra.s 4864 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    4850:	/--|----> movea.l (sp),a0
    4852:	|  |      move.b 56(a0),d0
    4856:	|  |  /-- bne.s 485e <completeTimers+0x18>
    4858:	|  |  |   movea.l (sp),a0
    485a:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    485e:	|  |  \-> movea.l (sp),a0
    4860:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    4864:	|  \----> tst.l (sp)
    4866:	\-------- bne.s 4850 <completeTimers+0xa>
	}
}
    4868:	          nop
    486a:	          nop
    486c:	          addq.l #4,sp
    486e:	          rts

00004870 <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    4870:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    4874:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    487a:	                                                             movea.l 80(sp),a0
    487e:	                                                             move.w 54(a0),d0
    4882:	/----------------------------------------------------------- beq.w 5710 <continueFunction+0xea0>
		abortFunction (fun);
    4886:	|                                                            move.l 80(sp),-(sp)
    488a:	|                                                            jsr 4718 <abortFunction>
    4890:	|                                                            addq.l #4,sp
		return TRUE;
    4892:	|                                                            moveq #1,d0
    4894:	|  /-------------------------------------------------------- bra.w 571a <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    4898:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    489e:	|  |  |                                                      movea.l 80(sp),a0
    48a2:	|  |  |                                                      move.l 4(a0),d1
    48a6:	|  |  |                                                      movea.l 80(sp),a0
    48aa:	|  |  |                                                      move.l 36(a0),d0
    48ae:	|  |  |                                                      lsl.l #3,d0
    48b0:	|  |  |                                                      movea.l d1,a0
    48b2:	|  |  |                                                      adda.l d0,a0
    48b4:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    48ba:	|  |  |                                                      movea.l 80(sp),a0
    48be:	|  |  |                                                      move.l 4(a0),d1
    48c2:	|  |  |                                                      movea.l 80(sp),a0
    48c6:	|  |  |                                                      move.l 36(a0),d0
    48ca:	|  |  |                                                      lsl.l #3,d0
    48cc:	|  |  |                                                      movea.l d1,a0
    48ce:	|  |  |                                                      adda.l d0,a0
    48d0:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    48d4:	|  |  |                                                      moveq #41,d0
    48d6:	|  |  |                                                      cmp.l 64(sp),d0
    48da:	|  |  |  /-------------------------------------------------- bcs.w 56c4 <continueFunction+0xe54>
    48de:	|  |  |  |                                                   move.l 64(sp),d0
    48e2:	|  |  |  |                                                   add.l d0,d0
    48e4:	|  |  |  |                                                   movea.l d0,a0
    48e6:	|  |  |  |                                                   adda.l #18674,a0
    48ec:	|  |  |  |                                                   move.w (a0),d0
    48ee:	|  |  |  |                                                   jmp (48f2 <continueFunction+0x82>,pc,d0.w)
    48f2:	|  |  |  |                                                   bset d6,(a2)
    48f4:	|  |  |  |                                                   ori.w #2670,(a4)
    48f8:	|  |  |  |                                                   eori.w #2416,d6
    48fc:	|  |  |  |                                                   bchg d4,d2
    48fe:	|  |  |  |                                                   bclr d4,(a4)+
    4900:	|  |  |  |                                                   andi.l #181013194,d4
    4906:	|  |  |  |                                                   .short 0x0aca
    4908:	|  |  |  |                                                   .short 0x0aca
    490a:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    4912:	|  |  |  |                                                   .short 0x0aca
    4914:	|  |  |  |                                                   andi.w #906,-(a4)
    4918:	|  |  |  |                                                   bchg d1,196(a2)
    491c:	|  |  |  |                                                   bset d1,580(a4)
    4920:	|  |  |  |                                                   bclr d1,2576(a2)
    4924:	|  |  |  |                                                   andi.b #-56,2762(a2)
    492a:	|  |  |  |                                                   .short 0x0aca
    492c:	|  |  |  |                                                   eori.l #63572682,d0
    4932:	|  |  |  |                                                   .short 0x0aca
    4934:	|  |  |  |                                                   bchg d3,-(a2)
    4936:	|  |  |  |                                                   bchg #-36,(a2)
    493a:	|  |  |  |                                                   .short 0x08cc
    493c:	|  |  |  |                                                   addi.b #14,1038(a0)
    4942:	|  |  |  |                                                   .short 0x040e
    4944:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    4948:	|  |  |  |                                                   ori.w #8232,(a0)
    494c:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    4952:	|  |  |  |                                                   ori.w #12136,(a0)
    4956:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    495c:	|  |  |  |                                                   ori.w #12328,(a0)
    4960:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    4966:	|  |  |  |                                                   add.l 44(sp),d1
    496a:	|  |  |  |                                                   moveq #28,d0
    496c:	|  |  |  |                                                   add.l 80(sp),d0
    4970:	|  |  |  |                                                   move.l d1,-(sp)
    4972:	|  |  |  |                                                   move.l d0,-(sp)
    4974:	|  |  |  |                                                   jsr 14c8c <copyVariable>
    497a:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    497c:	|  |  |  |                                                   move.l 80(sp),-(sp)
    4980:	|  |  |  |                                                   jsr 5720 <finishFunction>
    4986:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    4988:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    498e:	|  |  |  |                                                   move.l 80(sp),-(sp)
    4992:	|  |  |  |                                                   jsr 6888 <restartFunction>
    4998:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    499a:	|  |  |  |  /----------------------------------------------- bra.w 56f8 <continueFunction+0xe88>
				finishFunction (fun);
    499e:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    49a2:	|  |  |  |  |                                                jsr 5720 <finishFunction>
    49a8:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    49aa:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    49ae:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    49b2:	|  |  |  |  +----------------------------------------------- bra.w 56f8 <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    49b6:	|  |  |  |  |                                                movea.l 80(sp),a0
    49ba:	|  |  |  |  |                                                move.l 28(a0),d0
    49be:	|  |  |  |  |                                                moveq #2,d1
    49c0:	|  |  |  |  |                                                cmp.l d0,d1
    49c2:	|  |  |  |  |                                            /-- beq.s 49ce <continueFunction+0x15e>
    49c4:	|  |  |  |  |                                            |   moveq #4,d1
    49c6:	|  |  |  |  |                                            |   cmp.l d0,d1
    49c8:	|  |  |  |  |                                         /--|-- beq.s 4a1c <continueFunction+0x1ac>
    49ca:	|  |  |  |  |                                /--------|--|-- bra.w 4b04 <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    49ce:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    49d2:	|  |  |  |  |                                |        |      jsr 6846 <pauseFunction>
    49d8:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    49da:	|  |  |  |  |                                |        |      moveq #24,d0
    49dc:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    49e0:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    49e4:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    49e8:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    49ec:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    49ee:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    49f2:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    49f6:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    49f8:	|  |  |  |  |                                |        |      jsr 6ad4 <startNewFunctionNum>
    49fe:	|  |  |  |  |                                |        |      lea 20(sp),sp
    4a02:	|  |  |  |  |                                |        |      tst.l d0
    4a04:	|  |  |  |  |                                |        |  /-- bne.s 4a0c <continueFunction+0x19c>
    4a06:	|  |  |  |  |                                |        |  |   clr.w d0
    4a08:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 571a <continueFunction+0xeaa>
				fun = allRunningFunctions;
    4a0c:	|  |  |  |  |                                |        |  \-> move.l 1c940 <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    4a14:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    4a18:	|  |  |  |  |                                |  /-----|----- bra.w 4b18 <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    4a1c:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    4a20:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    4a24:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    4a28:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    4a2c:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    4a2e:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    4a30:	|  |  |  |  |                                |  |            jsr 134b4 <callBuiltIn>
    4a36:	|  |  |  |  |                                |  |            lea 12(sp),sp
    4a3a:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    4a3e:	|  |  |  |  |                                |  |            moveq #5,d0
    4a40:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    4a44:	|  |  |  |  |                                |  |  /-------- bcs.w 4b00 <continueFunction+0x290>
    4a48:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    4a4c:	|  |  |  |  |                                |  |  |         add.l d0,d0
    4a4e:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    4a50:	|  |  |  |  |                                |  |  |         adda.l #19036,a0
    4a56:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    4a58:	|  |  |  |  |                                |  |  |         jmp (4a5c <continueFunction+0x1ec>,pc,d0.w)
    4a5c:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    4a62:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    4a66:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    4a6c:	|  |  |  |  |                                |  |  |         or.l d3,(a2)+
    4a6e:	|  |  |  |  |                                |  |  |         jsr 17232 <KPrintF>
    4a74:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    4a76:	|  |  |  |  |                                |  |  |         clr.w d0
    4a78:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 571a <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    4a7c:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    4a80:	|  |  |  |  |                                |  |  |         jsr 6846 <pauseFunction>
    4a86:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    4a88:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    4a8c:	|  |  |  |  |                                |  |  |  /----- bra.s 4b02 <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    4a8e:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    4a92:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    4a96:	|  |  |  |  |                                |  |  |  +----- bra.s 4b02 <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    4a98:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    4a9c:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    4aa2:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    4aa4:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    4aa8:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    4aac:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    4ab0:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    4ab2:	|  |  |  |  |                                |  |  |  |      jsr 150c4 <setVariable>
    4ab8:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    4abc:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    4ac0:	|  |  |  |  |                                |  |  |  |      jsr 6846 <pauseFunction>
    4ac6:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    4ac8:	|  |  |  |  |                                |  |  |  |      move.l 1c978 <noStack>,d1
    4ace:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    4ad2:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    4ad4:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    4ad6:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    4ada:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    4adc:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    4ade:	|  |  |  |  |                                |  |  |  |      jsr 6ad4 <startNewFunctionNum>
    4ae4:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    4ae8:	|  |  |  |  |                                |  |  |  |      tst.l d0
    4aea:	|  |  |  |  |                                |  |  |  |  /-- bne.s 4af2 <continueFunction+0x282>
    4aec:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    4aee:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 571a <continueFunction+0xeaa>
							fun = allRunningFunctions;
    4af2:	|  |  |  |  |                                |  |  |  |  \-> move.l 1c940 <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    4afa:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    4afe:	|  |  |  |  |                                |  |  |  +----- bra.s 4b02 <continueFunction+0x292>

						default:
						break;
    4b00:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    4b02:	|  |  |  |  |                                |  +-----\----X bra.s 4b18 <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    4b04:	|  |  |  |  |                                \--|----------> pea 187e5 <PutChar+0xae9>
    4b0a:	|  |  |  |  |                                   |            jsr 17232 <KPrintF>
    4b10:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    4b12:	|  |  |  |  |                                   |            clr.w d0
    4b14:	|  +--|--|--|-----------------------------------|----------- bra.w 571a <continueFunction+0xeaa>
			}
			break;
    4b18:	|  |  |  |  +-----------------------------------\----------X bra.w 56f8 <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    4b1c:	|  |  |  |  |                                                moveq #28,d0
    4b1e:	|  |  |  |  |                                                add.l 80(sp),d0
    4b22:	|  |  |  |  |                                                clr.l -(sp)
    4b24:	|  |  |  |  |                                                clr.l -(sp)
    4b26:	|  |  |  |  |                                                move.l d0,-(sp)
    4b28:	|  |  |  |  |                                                jsr 150c4 <setVariable>
    4b2e:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4b32:	|  |  |  |  +----------------------------------------------- bra.w 56f8 <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    4b36:	|  |  |  |  |                                                move.l 68(sp),d1
    4b3a:	|  |  |  |  |                                                moveq #28,d0
    4b3c:	|  |  |  |  |                                                add.l 80(sp),d0
    4b40:	|  |  |  |  |                                                move.l d1,-(sp)
    4b42:	|  |  |  |  |                                                pea 5 <_start+0x5>
    4b46:	|  |  |  |  |                                                move.l d0,-(sp)
    4b48:	|  |  |  |  |                                                jsr 150c4 <setVariable>
    4b4e:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4b52:	|  |  |  |  +----------------------------------------------- bra.w 56f8 <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    4b56:	|  |  |  |  |                                                move.l 68(sp),d1
    4b5a:	|  |  |  |  |                                                moveq #28,d0
    4b5c:	|  |  |  |  |                                                add.l 80(sp),d0
    4b60:	|  |  |  |  |                                                move.l d1,-(sp)
    4b62:	|  |  |  |  |                                                pea 1 <_start+0x1>
    4b66:	|  |  |  |  |                                                move.l d0,-(sp)
    4b68:	|  |  |  |  |                                                jsr 150c4 <setVariable>
    4b6e:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4b72:	|  |  |  |  +----------------------------------------------- bra.w 56f8 <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    4b76:	|  |  |  |  |                                                moveq #28,d0
    4b78:	|  |  |  |  |                                                add.l 80(sp),d0
    4b7c:	|  |  |  |  |                                                movea.l 80(sp),a0
    4b80:	|  |  |  |  |                                                movea.l 20(a0),a0
    4b84:	|  |  |  |  |                                                move.l 68(sp),d1
    4b88:	|  |  |  |  |                                                lsl.l #3,d1
    4b8a:	|  |  |  |  |                                                add.l a0,d1
    4b8c:	|  |  |  |  |                                                move.l d0,-(sp)
    4b8e:	|  |  |  |  |                                                move.l d1,-(sp)
    4b90:	|  |  |  |  |                                                jsr 14c8c <copyVariable>
    4b96:	|  |  |  |  |                                                addq.l #8,sp
    4b98:	|  |  |  |  |                                                tst.w d0
    4b9a:	|  |  |  |  |  /-------------------------------------------- bne.w 56d6 <continueFunction+0xe66>
    4b9e:	|  |  |  |  |  |                                             clr.w d0
    4ba0:	|  +--|--|--|--|-------------------------------------------- bra.w 571a <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    4ba4:	|  |  |  |  |  |                                             moveq #28,d0
    4ba6:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4baa:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4bac:	|  |  |  |  |  |                                             jsr 14d12 <getBoolean>
    4bb2:	|  |  |  |  |  |                                             addq.l #4,sp
    4bb4:	|  |  |  |  |  |                                             tst.w d0
    4bb6:	|  |  |  |  |  |                                      /----- beq.s 4bd2 <continueFunction+0x362>
    4bb8:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    4bbc:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    4bc0:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    4bc2:	|  |  |  |  |  |                                      |      jsr 14d12 <getBoolean>
    4bc8:	|  |  |  |  |  |                                      |      addq.l #4,sp
    4bca:	|  |  |  |  |  |                                      |      tst.w d0
    4bcc:	|  |  |  |  |  |                                      +----- beq.s 4bd2 <continueFunction+0x362>
    4bce:	|  |  |  |  |  |                                      |      moveq #1,d0
    4bd0:	|  |  |  |  |  |                                      |  /-- bra.s 4bd4 <continueFunction+0x364>
    4bd2:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    4bd4:	|  |  |  |  |  |                                         \-> moveq #28,d1
    4bd6:	|  |  |  |  |  |                                             add.l 80(sp),d1
    4bda:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4bdc:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    4be0:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4be2:	|  |  |  |  |  |                                             jsr 150c4 <setVariable>
    4be8:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    4bec:	|  |  |  |  |  |                                             moveq #24,d0
    4bee:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4bf2:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4bf4:	|  |  |  |  |  |                                             jsr 15156 <trimStack>
    4bfa:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    4bfc:	|  |  |  |  +--|-------------------------------------------- bra.w 56f8 <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    4c00:	|  |  |  |  |  |                                             moveq #28,d0
    4c02:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4c06:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4c08:	|  |  |  |  |  |                                             jsr 14d12 <getBoolean>
    4c0e:	|  |  |  |  |  |                                             addq.l #4,sp
    4c10:	|  |  |  |  |  |                                             tst.w d0
    4c12:	|  |  |  |  |  |                                         /-- bne.s 4c2a <continueFunction+0x3ba>
    4c14:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    4c18:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    4c1c:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    4c1e:	|  |  |  |  |  |                                         |   jsr 14d12 <getBoolean>
    4c24:	|  |  |  |  |  |                                         |   addq.l #4,sp
    4c26:	|  |  |  |  |  |                                         |   tst.w d0
    4c28:	|  |  |  |  |  |                                      /--|-- beq.s 4c2e <continueFunction+0x3be>
    4c2a:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    4c2c:	|  |  |  |  |  |                                      |  /-- bra.s 4c30 <continueFunction+0x3c0>
    4c2e:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    4c30:	|  |  |  |  |  |                                         \-> moveq #28,d1
    4c32:	|  |  |  |  |  |                                             add.l 80(sp),d1
    4c36:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4c38:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    4c3c:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4c3e:	|  |  |  |  |  |                                             jsr 150c4 <setVariable>
    4c44:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    4c48:	|  |  |  |  |  |                                             moveq #24,d0
    4c4a:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4c4e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4c50:	|  |  |  |  |  |                                             jsr 15156 <trimStack>
    4c56:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    4c58:	|  |  |  |  +--|-------------------------------------------- bra.w 56f8 <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    4c5c:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4c60:	|  |  |  |  |  |                                             moveq #28,d0
    4c62:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4c66:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4c68:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    4c6c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4c6e:	|  |  |  |  |  |                                             jsr 150c4 <setVariable>
    4c74:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4c78:	|  |  |  |  +--|-------------------------------------------- bra.w 56f8 <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    4c7c:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4c80:	|  |  |  |  |  |                                             moveq #28,d0
    4c82:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4c86:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4c88:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    4c8c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4c8e:	|  |  |  |  |  |                                             jsr 150c4 <setVariable>
    4c94:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4c98:	|  |  |  |  +--|-------------------------------------------- bra.w 56f8 <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    4c9c:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4ca0:	|  |  |  |  |  |                                             moveq #28,d0
    4ca2:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4ca6:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4ca8:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    4cac:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4cae:	|  |  |  |  |  |                                             jsr 150c4 <setVariable>
    4cb4:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4cb8:	|  |  |  |  +--|-------------------------------------------- bra.w 56f8 <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    4cbc:	|  |  |  |  |  |                                             move.l 1c908 <dialogValue>,d0
    4cc2:	|  |  |  |  |  |                                             moveq #1,d1
    4cc4:	|  |  |  |  |  |                                             cmp.l d0,d1
    4cc6:	|  |  |  |  |  |  /----------------------------------------- beq.w 56da <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    4cca:	|  |  |  |  |  |  |                                          pea 187fa <PutChar+0xafe>
    4cd0:	|  |  |  |  |  |  |                                          jsr 17232 <KPrintF>
    4cd6:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    4cd8:	|  |  |  |  |  |  |                                          clr.w d0
    4cda:	|  +--|--|--|--|--|----------------------------------------- bra.w 571a <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    4cde:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    4ce2:	|  |  |  |  |  |  |                                          moveq #28,d0
    4ce4:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    4ce8:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    4cea:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    4cec:	|  |  |  |  |  |  |                                          jsr 14856 <loadStringToVar>
    4cf2:	|  |  |  |  |  |  |                                          addq.l #8,sp
    4cf4:	|  |  |  |  |  |  |                                          tst.w d0
    4cf6:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 56de <continueFunction+0xe6e>
					return FALSE;
    4cfa:	|  |  |  |  |  |  |  |                                       clr.w d0
    4cfc:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 571a <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    4d00:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4d04:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    4d08:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    4d0a:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    4d0c:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    4d0e:	|  |  |  |  |  |  |  |                                /----- beq.s 4d6c <continueFunction+0x4fc>
    4d10:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    4d12:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    4d14:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 4f00 <continueFunction+0x690>
    4d18:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    4d1a:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 4d26 <continueFunction+0x4b6>
    4d1c:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    4d1e:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    4d20:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 4d6c <continueFunction+0x4fc>
    4d22:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 4f00 <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    4d26:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    4d28:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    4d2c:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 4d58 <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    4d2e:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    4d30:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    4d34:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    4d36:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    4d38:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    4d3a:	|  |  |  |  |  |  |  |              |                 |  |   jsr 150c4 <setVariable>
    4d40:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    4d44:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    4d46:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    4d4a:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    4d4c:	|  |  |  |  |  |  |  |              |                 |  |   jsr 15156 <trimStack>
    4d52:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    4d54:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 4f16 <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    4d58:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 1883b <PutChar+0xb3f>
    4d5e:	|  |  |  |  |  |  |  |              |  |              |      jsr 17232 <KPrintF>
    4d64:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    4d66:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    4d68:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 571a <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    4d6c:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    4d70:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    4d74:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    4d78:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    4d7a:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4d90 <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    4d7c:	|  |  |  |  |  |  |  |              |  |                 |   pea 18877 <PutChar+0xb7b>
    4d82:	|  |  |  |  |  |  |  |              |  |                 |   jsr 17232 <KPrintF>
    4d88:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    4d8a:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    4d8c:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 571a <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4d90:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    4d92:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    4d96:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    4d98:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    4d9c:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    4da0:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    4da2:	|  |  |  |  |  |  |  |              |  |                     jsr 147d2 <getValueType>
    4da8:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    4dac:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    4dae:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4db6 <continueFunction+0x546>
    4db0:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    4db2:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 571a <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    4db6:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    4dba:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    4dbe:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    4dc0:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    4dc2:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    4dc4:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4de6 <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    4dc6:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    4dca:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    4dcc:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    4dd0:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    4dd4:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    4dd8:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    4dda:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    4ddc:	|  |  |  |  |  |  |  |              |  |                 |   jsr 1445c <fastArrayGetByIndex>
    4de2:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    4de4:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 4e06 <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    4de6:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    4dea:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    4dec:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    4df0:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    4df4:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    4df8:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    4dfa:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    4dfc:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    4dfe:	|  |  |  |  |  |  |  |              |  |              |      jsr 150e6 <stackGetByIndex>
    4e04:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    4e06:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    4e0a:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    4e0c:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    4e10:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    4e12:	|  |  |  |  |  |  |  |              |  |                     jsr 15156 <trimStack>
    4e18:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    4e1a:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    4e1e:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4e3a <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    4e20:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    4e22:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    4e26:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    4e28:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    4e2a:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    4e2c:	|  |  |  |  |  |  |  |              |  |                 |   jsr 150c4 <setVariable>
    4e32:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    4e36:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 4f14 <continueFunction+0x6a4>
    4e3a:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    4e3c:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    4e40:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 4e4e <continueFunction+0x5de>
    4e42:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    4e44:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    4e48:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 4e98 <continueFunction+0x628>
    4e4a:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 4ee0 <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    4e4e:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    4e52:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    4e56:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    4e5a:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    4e5c:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 147d2 <getValueType>
    4e62:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    4e66:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    4e68:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 4e70 <continueFunction+0x600>
    4e6a:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    4e6c:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 4efa <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    4e70:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    4e72:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    4e74:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    4e78:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    4e7a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    4e7e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    4e80:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 150c4 <setVariable>
    4e86:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    4e8a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    4e8c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    4e8e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    4e92:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    4e96:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 4efe <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    4e98:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    4e9c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    4ea0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    4ea4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    4ea6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 147d2 <getValueType>
    4eac:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    4eb0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    4eb2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 4eb8 <continueFunction+0x648>
    4eb4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    4eb6:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 4efa <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    4eb8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    4eba:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    4ebc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    4ec0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    4ec2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    4ec6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    4ec8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 150c4 <setVariable>
    4ece:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    4ed2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    4ed4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    4ed6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    4eda:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    4ede:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 4efe <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    4ee0:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    4ee2:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    4ee6:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    4ee8:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    4eec:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 14c8c <copyVariable>
    4ef2:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    4ef4:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    4ef6:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 4f14 <continueFunction+0x6a4>
    4ef8:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4efa:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 571a <continueFunction+0xeaa>
				break;
    4efe:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 4f14 <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    4f00:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 18895 <PutChar+0xb99>
    4f06:	|  |  |  |  |  |  |  |                 |  |                  jsr 17232 <KPrintF>
    4f0c:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    4f0e:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    4f10:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 571a <continueFunction+0xeaa>
				break;
    4f14:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    4f16:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 56f8 <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    4f1a:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4f1e:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    4f22:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    4f24:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    4f26:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    4f28:	|  |  |  |  |  |  |  |                                   /-- beq.s 4f36 <continueFunction+0x6c6>
    4f2a:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    4f2c:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    4f2e:	|  |  |  |  |  |  |  |                                /--|-- beq.w 4fe2 <continueFunction+0x772>
    4f32:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 5040 <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    4f36:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    4f3a:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4f3e:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    4f42:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    4f44:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 4f5a <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    4f46:	|  |  |  |  |  |  |  |                             |  |  |   pea 18877 <PutChar+0xb7b>
    4f4c:	|  |  |  |  |  |  |  |                             |  |  |   jsr 17232 <KPrintF>
    4f52:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    4f54:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4f56:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 571a <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4f5a:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    4f5c:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4f60:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4f62:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    4f66:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    4f6a:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    4f6c:	|  |  |  |  |  |  |  |                             |  |      jsr 147d2 <getValueType>
    4f72:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    4f76:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    4f78:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 4f80 <continueFunction+0x710>
    4f7a:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4f7c:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 571a <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    4f80:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    4f84:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4f88:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    4f8c:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    4f8e:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    4f92:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    4f94:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    4f98:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4f9c:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    4fa0:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    4fa2:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    4fa4:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    4fa6:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4fa8:	|  |  |  |  |  |  |  |                             |  |      jsr 6a90 <stackSetByIndex>
    4fae:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    4fb2:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    4fb4:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 4fbc <continueFunction+0x74c>
						return FALSE;
    4fb6:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4fb8:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 571a <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    4fbc:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    4fbe:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4fc2:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4fc4:	|  |  |  |  |  |  |  |                             |  |      jsr 15156 <trimStack>
    4fca:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    4fcc:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    4fce:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4fd2:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4fd4:	|  |  |  |  |  |  |  |                             |  |      jsr 15156 <trimStack>
    4fda:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    4fdc:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    4fde:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 56f8 <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    4fe2:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    4fe4:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    4fe8:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    4fea:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    4fee:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    4ff2:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    4ff4:	|  |  |  |  |  |  |  |                             |         jsr 147d2 <getValueType>
    4ffa:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    4ffe:	|  |  |  |  |  |  |  |                             |         tst.w d0
    5000:	|  |  |  |  |  |  |  |                             |     /-- bne.s 5008 <continueFunction+0x798>
    5002:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    5004:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 571a <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    5008:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    500c:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    500e:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    5012:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    5016:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    501a:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    501c:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    501e:	|  |  |  |  |  |  |  |                             |         jsr 1445c <fastArrayGetByIndex>
    5024:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    5026:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    502a:	|  |  |  |  |  |  |  |                             |     /-- bne.s 503a <continueFunction+0x7ca>
    502c:	|  |  |  |  |  |  |  |                             |     |   pea 188b9 <PutChar+0xbbd>
    5032:	|  |  |  |  |  |  |  |                             |     |   jsr 17232 <KPrintF>
    5038:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    503a:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    503c:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 571a <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    5040:	|  |  |  |  |  |  |  |                             \-------> pea 18895 <PutChar+0xb99>
    5046:	|  |  |  |  |  |  |  |                                       jsr 17232 <KPrintF>
    504c:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    504e:	|  |  |  |  |  |  |  |                                       clr.w d0
    5050:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 571a <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    5054:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5058:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    505c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5060:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5062:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5064:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5066:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    506a:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    506e:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5070:	|  |  |  |  |  |  |  |                                       jsr 147d2 <getValueType>
    5076:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    507a:	|  |  |  |  |  |  |  |                                       tst.w d0
    507c:	|  |  |  |  |  |  |  |                                   /-- bne.s 5084 <continueFunction+0x814>
    507e:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5080:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 571a <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5084:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    5088:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    508a:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    508e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5090:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5094:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5096:	|  |  |  |  |  |  |  |                                       jsr 150c4 <setVariable>
    509c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    50a0:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    50a4:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    50a6:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    50a8:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    50ac:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    50b0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    50b4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    50b6:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    50b8:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    50ba:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    50be:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    50c0:	|  |  |  |  |  |  |  |                                       jsr 150c4 <setVariable>
    50c6:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    50ca:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 56f8 <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    50ce:	|  |  |  |  |  |  |  |                                       move.l 1c956 <globalVars>,d1
    50d4:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    50d8:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    50da:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    50dc:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    50de:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    50e2:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    50e6:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    50e8:	|  |  |  |  |  |  |  |                                       jsr 147d2 <getValueType>
    50ee:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    50f2:	|  |  |  |  |  |  |  |                                       tst.w d0
    50f4:	|  |  |  |  |  |  |  |                                   /-- bne.s 50fc <continueFunction+0x88c>
    50f6:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    50f8:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 571a <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    50fc:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    5100:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5102:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5106:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5108:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    510c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    510e:	|  |  |  |  |  |  |  |                                       jsr 150c4 <setVariable>
    5114:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    5118:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    511c:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    511e:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5120:	|  |  |  |  |  |  |  |                                       movea.l 1c956 <globalVars>,a0
    5126:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    512a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    512c:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    512e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5130:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5134:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5136:	|  |  |  |  |  |  |  |                                       jsr 150c4 <setVariable>
    513c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5140:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 56f8 <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    5144:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5148:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    514c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5150:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5152:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5154:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5156:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    515a:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    515e:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5160:	|  |  |  |  |  |  |  |                                       jsr 147d2 <getValueType>
    5166:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    516a:	|  |  |  |  |  |  |  |                                       tst.w d0
    516c:	|  |  |  |  |  |  |  |                                   /-- bne.s 5174 <continueFunction+0x904>
    516e:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5170:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 571a <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5174:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    5178:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    517a:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    517e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5180:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5184:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5186:	|  |  |  |  |  |  |  |                                       jsr 150c4 <setVariable>
    518c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    5190:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    5194:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5196:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5198:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    519c:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    51a0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    51a4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    51a6:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    51a8:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    51aa:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    51ae:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    51b0:	|  |  |  |  |  |  |  |                                       jsr 150c4 <setVariable>
    51b6:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    51ba:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 56f8 <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    51be:	|  |  |  |  |  |  |  |                                       move.l 1c956 <globalVars>,d1
    51c4:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    51c8:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    51ca:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    51cc:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    51ce:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    51d2:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    51d6:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    51d8:	|  |  |  |  |  |  |  |                                       jsr 147d2 <getValueType>
    51de:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    51e2:	|  |  |  |  |  |  |  |                                       tst.w d0
    51e4:	|  |  |  |  |  |  |  |                                   /-- bne.s 51ec <continueFunction+0x97c>
    51e6:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    51e8:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 571a <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    51ec:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    51f0:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    51f2:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    51f6:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    51f8:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    51fc:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    51fe:	|  |  |  |  |  |  |  |                                       jsr 150c4 <setVariable>
    5204:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    5208:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    520c:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    520e:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5210:	|  |  |  |  |  |  |  |                                       movea.l 1c956 <globalVars>,a0
    5216:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    521a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    521c:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    521e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5220:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5224:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5226:	|  |  |  |  |  |  |  |                                       jsr 150c4 <setVariable>
    522c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5230:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 56f8 <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    5234:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5238:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    523c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5240:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5242:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    5244:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5246:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    524a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    524c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    524e:	|  |  |  |  |  |  |  |                                       jsr 14c8c <copyVariable>
    5254:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    5256:	|  |  |  |  |  |  |  |                                       tst.w d0
    5258:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 56e2 <continueFunction+0xe72>
    525c:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    525e:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 571a <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    5262:	|  |  |  |  |  |  |  |  |                                    move.l 1c956 <globalVars>,d1
    5268:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    526c:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    526e:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    5270:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    5272:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    5276:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    5278:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    527a:	|  |  |  |  |  |  |  |  |                                    jsr 14c8c <copyVariable>
    5280:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    5282:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    5284:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 56e6 <continueFunction+0xe76>
    5288:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    528a:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 571a <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    528e:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    5290:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    5294:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1c956 <globalVars>,a0
    529a:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    529e:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    52a0:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    52a2:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    52a4:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    52a6:	|  |  |  |  |  |  |  |  |  |                                 jsr 14c8c <copyVariable>
    52ac:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    52ae:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    52b0:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 56ea <continueFunction+0xe7a>
    52b4:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    52b6:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 571a <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    52ba:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    52bc:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    52c0:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    52c2:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    52c6:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    52c8:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    52ca:	|  |  |  |  |  |  |  |  |  |  |                              jsr 1400e <addVarToStack>
    52d0:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    52d2:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    52d4:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 56ee <continueFunction+0xe7e>
    52d8:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    52da:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 571a <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    52de:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    52e0:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    52e4:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    52e6:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    52ea:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    52ec:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    52ee:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 14094 <addVarToStackQuick>
    52f4:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    52f6:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    52f8:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 56f2 <continueFunction+0xe82>
    52fc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    52fe:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 571a <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    5302:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5304:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5308:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    530a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14d12 <getBoolean>
    5310:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5312:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5314:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    5316:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    5318:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    531a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    531c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    531e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5322:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    5324:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    5328:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    532a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 150c4 <setVariable>
    5330:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    5334:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 56f8 <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    5338:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    533a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    533e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5340:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14d12 <getBoolean>
    5346:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5348:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    534a:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 56f6 <continueFunction+0xe86>
				advanceNow = FALSE;
    534e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    5352:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5356:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    535c:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 56f6 <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    5360:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    5364:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5368:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    536e:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 56f8 <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    5372:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5374:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    5378:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    537a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    537e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    5382:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    5384:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 147d2 <getValueType>
    538a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    538e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    5390:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 5398 <continueFunction+0xb28>
    5392:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    5394:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 571a <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    5398:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    539c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    539e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    53a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    53a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    53a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    53a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    53ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    53ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 150c4 <setVariable>
    53b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    53b8:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 56f8 <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    53bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    53c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    53c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 56ae <continueFunction+0xe3e>
    53c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    53ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    53ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 544a <continueFunction+0xbda>
    53d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    53d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    53d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 5494 <continueFunction+0xc24>
    53da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    53dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    53e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 53ee <continueFunction+0xb7e>
    53e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    53e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    53e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 541c <continueFunction+0xbac>
    53ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 5494 <continueFunction+0xc24>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    53ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    53f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    53f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    53f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    53fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    53fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    5400:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 14108 <addVariablesInSecond>
    5406:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    5408:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    540a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    540e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    5410:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 15156 <trimStack>
    5416:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    5418:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 56c2 <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    541c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    541e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    5422:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    5426:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    542a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    542c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    542e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 141c6 <compareVariablesInSecond>
    5434:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    5436:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    5438:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    543c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    543e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 15156 <trimStack>
    5444:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    5446:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 56c2 <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    544a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    544c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    5450:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5454:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    5458:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    545a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    545c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 141c6 <compareVariablesInSecond>
    5462:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    5464:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    5466:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    546a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    546c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 15156 <trimStack>
    5472:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    5474:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5478:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    547c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    547e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    5480:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    5482:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    5488:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    548c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    5490:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 56c2 <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    5494:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    5498:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    549c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    549e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    54a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    54a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    54a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 147d2 <getValueType>
    54ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    54b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    54b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 54bc <continueFunction+0xc4c>
    54b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    54b8:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 571a <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    54bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    54be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    54c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    54c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    54c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    54cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    54ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 147d2 <getValueType>
    54d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    54d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    54da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 54e2 <continueFunction+0xc72>
    54dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    54de:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 571a <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    54e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    54e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    54e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    54ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 15156 <trimStack>
    54f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    54f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    54f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    54f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    54fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    54fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 56c0 <continueFunction+0xe50>
    5500:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    5502:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    5504:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #21776,a0
    550a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    550c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (5510 <continueFunction+0xca0>,pc,d0.w)
    5510:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    5514:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    5516:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    551e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    5520:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5528:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5530:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    5538:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    5540:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5544:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5548:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    554a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    554c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17be6 <__mulsi3>
    5552:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5554:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5556:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5558:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    555c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    555e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5562:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5564:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150c4 <setVariable>
    556a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    556e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 56c2 <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    5572:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5576:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    557a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    557c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    557e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5582:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5584:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5588:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    558a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150c4 <setVariable>
    5590:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5594:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 56c2 <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    5598:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    559c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    55a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    55a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    55a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17c92 <__modsi3>
    55aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    55ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    55ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    55b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    55b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    55b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    55ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    55bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150c4 <setVariable>
    55c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    55c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 56c2 <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    55ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    55ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    55d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    55d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    55d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17c64 <__divsi3>
    55dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    55de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    55e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    55e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    55e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    55e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    55ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    55ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150c4 <setVariable>
    55f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    55f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 56c2 <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    55fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5600:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5604:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5606:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    5608:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    560a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    560c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    560e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5610:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5614:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5616:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    561a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    561c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150c4 <setVariable>
    5622:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5626:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 56c2 <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    562a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    562e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5632:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5634:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    5636:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5638:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    563a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    563c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    563e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5642:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5644:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5648:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    564a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150c4 <setVariable>
    5650:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5654:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 56c2 <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    5656:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    565a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    565e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5660:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    5662:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5664:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5666:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5668:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    566a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    566e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5670:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5674:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5676:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150c4 <setVariable>
    567c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5680:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 56c2 <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    5682:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5686:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    568a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    568c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    568e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5690:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5692:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5694:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5696:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    569a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    569c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    56a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    56a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150c4 <setVariable>
    56a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    56ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 56c2 <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    56ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 188da <PutChar+0xbde>
    56b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 17232 <KPrintF>
    56ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    56bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    56be:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 571a <continueFunction+0xeaa>
						break;
    56c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    56c2:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 56f8 <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    56c4:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 188f2 <PutChar+0xbf6>
    56ca:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 17232 <KPrintF>
    56d0:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    56d2:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    56d4:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 571a <continueFunction+0xeaa>
			break;
    56d6:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    56d8:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 56f8 <continueFunction+0xe88>
			break;
    56da:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    56dc:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 56f8 <continueFunction+0xe88>
			break;
    56de:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    56e0:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 56f8 <continueFunction+0xe88>
			break;
    56e2:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    56e4:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 56f8 <continueFunction+0xe88>
			break;
    56e6:	|  |  |     |              \--|--|--|--|-------------------> nop
    56e8:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 56f8 <continueFunction+0xe88>
			break;
    56ea:	|  |  |     |                 \--|--|--|-------------------> nop
    56ec:	|  |  |     +--------------------|--|--|-------------------- bra.s 56f8 <continueFunction+0xe88>
			break;
    56ee:	|  |  |     |                    \--|--|-------------------> nop
    56f0:	|  |  |     +-----------------------|--|-------------------- bra.s 56f8 <continueFunction+0xe88>
			break;
    56f2:	|  |  |     |                       \--|-------------------> nop
    56f4:	|  |  |     +--------------------------|-------------------- bra.s 56f8 <continueFunction+0xe88>
			break;
    56f6:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    56f8:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    56fc:	+--|--|----------------------------------------------------- beq.s 5710 <continueFunction+0xea0>
    56fe:	|  |  |                                                      movea.l 80(sp),a0
    5702:	|  |  |                                                      move.l 36(a0),d0
    5706:	|  |  |                                                      addq.l #1,d0
    5708:	|  |  |                                                      movea.l 80(sp),a0
    570c:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    5710:	\--|--|----------------------------------------------------> tst.w 74(sp)
    5714:	   |  \----------------------------------------------------- bne.w 4898 <continueFunction+0x28>

	}
	return TRUE;
    5718:	   |                                                         moveq #1,d0
}
    571a:	   \-------------------------------------------------------> lea 76(sp),sp
    571e:	                                                             rts

00005720 <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    5720:	          lea -16(sp),sp
    5724:	          move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    5726:	          move.l 24(sp),-(sp)
    572a:	          jsr 6846 <pauseFunction>
    5730:	          addq.l #4,sp
	if (fun -> stack) 
    5732:	          movea.l 24(sp),a0
    5736:	          move.l 24(a0),d0
    573a:	      /-- beq.s 574e <finishFunction+0x2e>
	{
		KPrintF("finishfunction: error non empty stack");
    573c:	      |   pea 1891e <PutChar+0xc22>
    5742:	      |   jsr 17232 <KPrintF>
    5748:	      |   addq.l #4,sp
		return;
    574a:	/-----|-- bra.w 57e8 <finishFunction+0xc8>
	}
	FreeVec( fun -> compiledLines);
    574e:	|     \-> movea.l 24(sp),a0
    5752:	|         move.l 4(a0),12(sp)
    5758:	|         move.l 1c9a8 <SysBase>,d0
    575e:	|         movea.l d0,a6
    5760:	|         movea.l 12(sp),a1
    5764:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    5768:	|         clr.l 16(sp)
    576c:	|     /-- bra.s 578c <finishFunction+0x6c>
    576e:	|  /--|-> movea.l 24(sp),a0
    5772:	|  |  |   move.l 20(a0),d1
    5776:	|  |  |   move.l 16(sp),d0
    577a:	|  |  |   lsl.l #3,d0
    577c:	|  |  |   add.l d1,d0
    577e:	|  |  |   move.l d0,-(sp)
    5780:	|  |  |   jsr 14a20 <unlinkVar>
    5786:	|  |  |   addq.l #4,sp
    5788:	|  |  |   addq.l #1,16(sp)
    578c:	|  |  \-> movea.l 24(sp),a0
    5790:	|  |      move.l 8(a0),d0
    5794:	|  |      cmp.l 16(sp),d0
    5798:	|  \----- bgt.s 576e <finishFunction+0x4e>
	if( fun->numLocals > 0) {
    579a:	|         movea.l 24(sp),a0
    579e:	|         move.l 8(a0),d0
    57a2:	|     /-- ble.s 57be <finishFunction+0x9e>
		FreeVec(fun -> localVars);
    57a4:	|     |   movea.l 24(sp),a0
    57a8:	|     |   move.l 20(a0),8(sp)
    57ae:	|     |   move.l 1c9a8 <SysBase>,d0
    57b4:	|     |   movea.l d0,a6
    57b6:	|     |   movea.l 8(sp),a1
    57ba:	|     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    57be:	|     \-> moveq #28,d0
    57c0:	|         add.l 24(sp),d0
    57c4:	|         move.l d0,-(sp)
    57c6:	|         jsr 14a20 <unlinkVar>
    57cc:	|         addq.l #4,sp
	FreeVec(fun);
    57ce:	|         move.l 24(sp),4(sp)
    57d4:	|         move.l 1c9a8 <SysBase>,d0
    57da:	|         movea.l d0,a6
    57dc:	|         movea.l 4(sp),a1
    57e0:	|         jsr -690(a6)
	fun = NULL;
    57e4:	|         clr.l 24(sp)
}
    57e8:	\-------> movea.l (sp)+,a6
    57ea:	          lea 16(sp),sp
    57ee:	          rts

000057f0 <freezeSubs>:

void freezeSubs () {
    57f0:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    57f2:	          move.l 1c940 <allRunningFunctions>,(sp)

	while (thisFunction) {
    57f8:	   /----- bra.s 5816 <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    57fa:	/--|----> movea.l (sp),a0
    57fc:	|  |      move.w 52(a0),d0
    5800:	|  |  /-- bne.s 5810 <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    5802:	|  |  |   movea.l (sp),a0
    5804:	|  |  |   move.b 56(a0),d0
    5808:	|  |  |   addq.b #1,d0
    580a:	|  |  |   movea.l (sp),a0
    580c:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    5810:	|  |  \-> movea.l (sp),a0
    5812:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    5816:	|  \----> tst.l (sp)
    5818:	\-------- bne.s 57fa <freezeSubs+0xa>
	}
}
    581a:	          nop
    581c:	          nop
    581e:	          addq.l #4,sp
    5820:	          rts

00005822 <handleInput>:

BOOL handleInput () {
    5822:	             lea -16(sp),sp
    5826:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    5828:	             move.l 1cabc <overRegion>,d0
    582e:	         /-- bne.s 5836 <handleInput+0x14>
    5830:	         |   jsr 1598e <getOverRegion>

	if (input.justMoved) {
    5836:	         \-> move.w 1c95e <input+0x4>,d0
    583c:	         /-- beq.s 587a <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    583e:	         |   movea.l 1c320 <currentEvents>,a0
    5844:	         |   move.l 16(a0),d0
    5848:	         +-- beq.s 587a <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    584a:	         |   move.l 1c978 <noStack>,d1
    5850:	         |   movea.l 1c320 <currentEvents>,a0
    5856:	         |   move.l 16(a0),d0
    585a:	         |   pea 1 <_start+0x1>
    585e:	         |   move.l d1,-(sp)
    5860:	         |   clr.l -(sp)
    5862:	         |   clr.l -(sp)
    5864:	         |   move.l d0,-(sp)
    5866:	         |   jsr 6ad4 <startNewFunctionNum>
    586c:	         |   lea 20(sp),sp
    5870:	         |   tst.l d0
    5872:	         +-- bne.s 587a <handleInput+0x58>
    5874:	         |   clr.w d0
    5876:	/--------|-- bra.w 5a80 <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    587a:	|        \-> clr.w 1c95e <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    5880:	|            move.l 1c970 <lastRegion>,d1
    5886:	|            move.l 1cabc <overRegion>,d0
    588c:	|            cmp.l d1,d0
    588e:	|  /-------- beq.w 5966 <handleInput+0x144>
    5892:	|  |         movea.l 1c320 <currentEvents>,a0
    5898:	|  |         move.l 20(a0),d0
    589c:	|  +-------- beq.w 5966 <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    58a0:	|  |         moveq #12,d0
    58a2:	|  |         move.l d0,16(sp)
    58a6:	|  |         clr.l 12(sp)
    58aa:	|  |         move.l 1c9a8 <SysBase>,d0
    58b0:	|  |         movea.l d0,a6
    58b2:	|  |         move.l 16(sp),d0
    58b6:	|  |         move.l 12(sp),d1
    58ba:	|  |         jsr -684(a6)
    58be:	|  |         move.l d0,8(sp)
    58c2:	|  |         move.l 8(sp),d0
    58c6:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    58ca:	|  |         move.l 4(sp),d0
    58ce:	|  |     /-- bne.s 58e4 <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    58d0:	|  |     |   pea 18944 <PutChar+0xc48>
    58d6:	|  |     |   jsr 17232 <KPrintF>
    58dc:	|  |     |   addq.l #4,sp
			return FALSE;
    58de:	|  |     |   clr.w d0
    58e0:	+--|-----|-- bra.w 5a80 <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    58e4:	|  |     \-> movea.l 4(sp),a0
    58e8:	|  |         clr.l (a0)
		if (overRegion) {
    58ea:	|  |         move.l 1cabc <overRegion>,d0
    58f0:	|  |  /----- beq.s 5918 <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    58f2:	|  |  |      movea.l 1cabc <overRegion>,a0
    58f8:	|  |  |      movea.l 28(a0),a0
    58fc:	|  |  |      move.l 4(a0),d1
    5900:	|  |  |      move.l 4(sp),d0
    5904:	|  |  |      move.l d1,-(sp)
    5906:	|  |  |      pea 7 <_start+0x7>
    590a:	|  |  |      move.l d0,-(sp)
    590c:	|  |  |      jsr 150c4 <setVariable>
    5912:	|  |  |      lea 12(sp),sp
    5916:	|  |  |  /-- bra.s 592e <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    5918:	|  |  \--|-> move.l 4(sp),d0
    591c:	|  |     |   clr.l -(sp)
    591e:	|  |     |   pea 1 <_start+0x1>
    5922:	|  |     |   move.l d0,-(sp)
    5924:	|  |     |   jsr 150c4 <setVariable>
    592a:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;
    592e:	|  |     \-> movea.l 4(sp),a0
    5932:	|  |         clr.l 8(a0)
		if (! startNewFunctionNum (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    5936:	|  |         movea.l 1c320 <currentEvents>,a0
    593c:	|  |         move.l 20(a0),d0
    5940:	|  |         pea 1 <_start+0x1>
    5944:	|  |         lea 8(sp),a0
    5948:	|  |         move.l a0,-(sp)
    594a:	|  |         clr.l -(sp)
    594c:	|  |         pea 1 <_start+0x1>
    5950:	|  |         move.l d0,-(sp)
    5952:	|  |         jsr 6ad4 <startNewFunctionNum>
    5958:	|  |         lea 20(sp),sp
    595c:	|  |         tst.l d0
    595e:	|  +-------- bne.s 5966 <handleInput+0x144>
    5960:	|  |         clr.w d0
    5962:	+--|-------- bra.w 5a80 <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    5966:	|  \-------> move.w 1c960 <input+0x6>,d0
    596c:	|        /-- beq.s 59aa <handleInput+0x188>
    596e:	|        |   movea.l 1c320 <currentEvents>,a0
    5974:	|        |   move.l 4(a0),d0
    5978:	|        +-- beq.s 59aa <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    597a:	|        |   move.l 1c978 <noStack>,d1
    5980:	|        |   movea.l 1c320 <currentEvents>,a0
    5986:	|        |   move.l 4(a0),d0
    598a:	|        |   pea 1 <_start+0x1>
    598e:	|        |   move.l d1,-(sp)
    5990:	|        |   clr.l -(sp)
    5992:	|        |   clr.l -(sp)
    5994:	|        |   move.l d0,-(sp)
    5996:	|        |   jsr 6ad4 <startNewFunctionNum>
    599c:	|        |   lea 20(sp),sp
    59a0:	|        |   tst.l d0
    59a2:	|        +-- bne.s 59aa <handleInput+0x188>
    59a4:	|        |   clr.w d0
    59a6:	+--------|-- bra.w 5a80 <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    59aa:	|        \-> move.w 1c962 <input+0x8>,d0
    59b0:	|        /-- beq.s 59ee <handleInput+0x1cc>
    59b2:	|        |   movea.l 1c320 <currentEvents>,a0
    59b8:	|        |   move.l 12(a0),d0
    59bc:	|        +-- beq.s 59ee <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    59be:	|        |   move.l 1c978 <noStack>,d1
    59c4:	|        |   movea.l 1c320 <currentEvents>,a0
    59ca:	|        |   move.l 12(a0),d0
    59ce:	|        |   pea 1 <_start+0x1>
    59d2:	|        |   move.l d1,-(sp)
    59d4:	|        |   clr.l -(sp)
    59d6:	|        |   clr.l -(sp)
    59d8:	|        |   move.l d0,-(sp)
    59da:	|        |   jsr 6ad4 <startNewFunctionNum>
    59e0:	|        |   lea 20(sp),sp
    59e4:	|        |   tst.l d0
    59e6:	|        +-- bne.s 59ee <handleInput+0x1cc>
    59e8:	|        |   clr.w d0
    59ea:	+--------|-- bra.w 5a80 <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    59ee:	|        \-> move.w 1c95a <input>,d0
    59f4:	|        /-- beq.s 5a2c <handleInput+0x20a>
    59f6:	|        |   movea.l 1c320 <currentEvents>,a0
    59fc:	|        |   move.l (a0),d0
    59fe:	|        +-- beq.s 5a2c <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5a00:	|        |   move.l 1c978 <noStack>,d1
    5a06:	|        |   movea.l 1c320 <currentEvents>,a0
    5a0c:	|        |   move.l (a0),d0
    5a0e:	|        |   pea 1 <_start+0x1>
    5a12:	|        |   move.l d1,-(sp)
    5a14:	|        |   clr.l -(sp)
    5a16:	|        |   clr.l -(sp)
    5a18:	|        |   move.l d0,-(sp)
    5a1a:	|        |   jsr 6ad4 <startNewFunctionNum>
    5a20:	|        |   lea 20(sp),sp
    5a24:	|        |   tst.l d0
    5a26:	|        +-- bne.s 5a2c <handleInput+0x20a>
    5a28:	|        |   clr.w d0
    5a2a:	+--------|-- bra.s 5a80 <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    5a2c:	|        \-> move.w 1c95c <input+0x2>,d0
    5a32:	|        /-- beq.s 5a6e <handleInput+0x24c>
    5a34:	|        |   movea.l 1c320 <currentEvents>,a0
    5a3a:	|        |   move.l 8(a0),d0
    5a3e:	|        +-- beq.s 5a6e <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5a40:	|        |   move.l 1c978 <noStack>,d1
    5a46:	|        |   movea.l 1c320 <currentEvents>,a0
    5a4c:	|        |   move.l 8(a0),d0
    5a50:	|        |   pea 1 <_start+0x1>
    5a54:	|        |   move.l d1,-(sp)
    5a56:	|        |   clr.l -(sp)
    5a58:	|        |   clr.l -(sp)
    5a5a:	|        |   move.l d0,-(sp)
    5a5c:	|        |   jsr 6ad4 <startNewFunctionNum>
    5a62:	|        |   lea 20(sp),sp
    5a66:	|        |   tst.l d0
    5a68:	|        +-- bne.s 5a6e <handleInput+0x24c>
    5a6a:	|        |   clr.w d0
    5a6c:	+--------|-- bra.s 5a80 <handleInput+0x25e>
	}

	lastRegion = overRegion;
    5a6e:	|        \-> move.l 1cabc <overRegion>,d0
    5a74:	|            move.l d0,1c970 <lastRegion>
	return runSludge ();
    5a7a:	|            jsr 68a2 <runSludge>
}
    5a80:	\----------> movea.l (sp)+,a6
    5a82:	             lea 16(sp),sp
    5a86:	             rts

00005a88 <initSludge>:

BOOL initSludge (char * filename) {
    5a88:	             lea -292(sp),sp
    5a8c:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    5a90:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    5a94:	             jsr ad08 <makeNullAnim>
    5a9a:	             move.l d0,1c8ae <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    5aa0:	             pea 1c952 <gameVersion>
    5aa6:	             pea 1897a <PutChar+0xc7e>
    5aac:	             pea 45 <_start+0x45>
    5ab0:	             pea 47 <_start+0x47>
    5ab4:	             move.l 332(sp),-(sp)
    5ab8:	             jsr 64d6 <openAndVerify>
    5abe:	             lea 20(sp),sp
    5ac2:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    5ac6:	         /-- bne.s 5ace <initSludge+0x46>
    5ac8:	         |   clr.w d0
    5aca:	/--------|-- bra.w 61f6 <initSludge+0x76e>
	if (FGetC (fp)) {
    5ace:	|        \-> move.l 288(sp),284(sp)
    5ad4:	|            move.l 1c9b0 <DOSBase>,d0
    5ada:	|            movea.l d0,a6
    5adc:	|            move.l 284(sp),d1
    5ae0:	|            jsr -306(a6)
    5ae4:	|            move.l d0,280(sp)
    5ae8:	|            move.l 280(sp),d0
    5aec:	|  /-------- beq.w 5c96 <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    5af0:	|  |         move.l 288(sp),-(sp)
    5af4:	|  |         jsr 6bc <get2bytes>
    5afa:	|  |         addq.l #4,sp
    5afc:	|  |         move.l d0,1c97c <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    5b02:	|  |         move.l 1c97c <numBIFNames>,d0
    5b08:	|  |         move.l d0,276(sp)
    5b0c:	|  |         clr.l 272(sp)
    5b10:	|  |         move.l 1c9a8 <SysBase>,d0
    5b16:	|  |         movea.l d0,a6
    5b18:	|  |         move.l 276(sp),d0
    5b1c:	|  |         move.l 272(sp),d1
    5b20:	|  |         jsr -684(a6)
    5b24:	|  |         move.l d0,268(sp)
    5b28:	|  |         move.l 268(sp),d0
    5b2c:	|  |         move.l d0,1c938 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    5b32:	|  |         move.l 1c938 <allBIFNames>,d0
    5b38:	|  |     /-- bne.s 5b40 <initSludge+0xb8>
    5b3a:	|  |     |   clr.w d0
    5b3c:	+--|-----|-- bra.w 61f6 <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    5b40:	|  |     \-> clr.l 304(sp)
    5b44:	|  |     /-- bra.s 5b6a <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    5b46:	|  |  /--|-> move.l 1c938 <allBIFNames>,d1
    5b4c:	|  |  |  |   move.l 304(sp),d0
    5b50:	|  |  |  |   add.l d0,d0
    5b52:	|  |  |  |   add.l d0,d0
    5b54:	|  |  |  |   movea.l d1,a2
    5b56:	|  |  |  |   adda.l d0,a2
    5b58:	|  |  |  |   move.l 288(sp),-(sp)
    5b5c:	|  |  |  |   jsr b02 <readString>
    5b62:	|  |  |  |   addq.l #4,sp
    5b64:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    5b66:	|  |  |  |   addq.l #1,304(sp)
    5b6a:	|  |  |  \-> move.l 1c97c <numBIFNames>,d0
    5b70:	|  |  |      cmp.l 304(sp),d0
    5b74:	|  |  \----- bgt.s 5b46 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    5b76:	|  |         move.l 288(sp),-(sp)
    5b7a:	|  |         jsr 6bc <get2bytes>
    5b80:	|  |         addq.l #4,sp
    5b82:	|  |         move.l d0,1c988 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    5b88:	|  |         move.l 1c988 <numUserFunc>,d0
    5b8e:	|  |         move.l d0,264(sp)
    5b92:	|  |         clr.l 260(sp)
    5b96:	|  |         move.l 1c9a8 <SysBase>,d0
    5b9c:	|  |         movea.l d0,a6
    5b9e:	|  |         move.l 264(sp),d0
    5ba2:	|  |         move.l 260(sp),d1
    5ba6:	|  |         jsr -684(a6)
    5baa:	|  |         move.l d0,256(sp)
    5bae:	|  |         move.l 256(sp),d0
    5bb2:	|  |         move.l d0,1c944 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    5bb8:	|  |         move.l 1c944 <allUserFunc>,d0
    5bbe:	|  |     /-- bne.s 5bc6 <initSludge+0x13e>
    5bc0:	|  |     |   clr.w d0
    5bc2:	+--|-----|-- bra.w 61f6 <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    5bc6:	|  |     \-> clr.l 300(sp)
    5bca:	|  |     /-- bra.s 5bf0 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    5bcc:	|  |  /--|-> move.l 1c944 <allUserFunc>,d1
    5bd2:	|  |  |  |   move.l 300(sp),d0
    5bd6:	|  |  |  |   add.l d0,d0
    5bd8:	|  |  |  |   add.l d0,d0
    5bda:	|  |  |  |   movea.l d1,a2
    5bdc:	|  |  |  |   adda.l d0,a2
    5bde:	|  |  |  |   move.l 288(sp),-(sp)
    5be2:	|  |  |  |   jsr b02 <readString>
    5be8:	|  |  |  |   addq.l #4,sp
    5bea:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    5bec:	|  |  |  |   addq.l #1,300(sp)
    5bf0:	|  |  |  \-> move.l 1c988 <numUserFunc>,d0
    5bf6:	|  |  |      cmp.l 300(sp),d0
    5bfa:	|  |  \----- bgt.s 5bcc <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    5bfc:	|  |         move.l 1c952 <gameVersion>,d0
    5c02:	|  |         cmpi.l #258,d0
    5c08:	|  +-------- ble.w 5c96 <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    5c0c:	|  |         move.l 288(sp),-(sp)
    5c10:	|  |         jsr 6bc <get2bytes>
    5c16:	|  |         addq.l #4,sp
    5c18:	|  |         move.l d0,1c984 <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    5c1e:	|  |         move.l 1c984 <numResourceNames>,d0
    5c24:	|  |         add.l d0,d0
    5c26:	|  |         add.l d0,d0
    5c28:	|  |         move.l d0,252(sp)
    5c2c:	|  |         clr.l 248(sp)
    5c30:	|  |         move.l 1c9a8 <SysBase>,d0
    5c36:	|  |         movea.l d0,a6
    5c38:	|  |         move.l 252(sp),d0
    5c3c:	|  |         move.l 248(sp),d1
    5c40:	|  |         jsr -684(a6)
    5c44:	|  |         move.l d0,244(sp)
    5c48:	|  |         move.l 244(sp),d0
    5c4c:	|  |         move.l d0,1c93c <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    5c52:	|  |         move.l 1c93c <allResourceNames>,d0
    5c58:	|  |     /-- bne.s 5c60 <initSludge+0x1d8>
    5c5a:	|  |     |   clr.w d0
    5c5c:	+--|-----|-- bra.w 61f6 <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    5c60:	|  |     \-> clr.l 296(sp)
    5c64:	|  |     /-- bra.s 5c8a <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    5c66:	|  |  /--|-> move.l 1c93c <allResourceNames>,d1
    5c6c:	|  |  |  |   move.l 296(sp),d0
    5c70:	|  |  |  |   add.l d0,d0
    5c72:	|  |  |  |   add.l d0,d0
    5c74:	|  |  |  |   movea.l d1,a2
    5c76:	|  |  |  |   adda.l d0,a2
    5c78:	|  |  |  |   move.l 288(sp),-(sp)
    5c7c:	|  |  |  |   jsr b02 <readString>
    5c82:	|  |  |  |   addq.l #4,sp
    5c84:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    5c86:	|  |  |  |   addq.l #1,296(sp)
    5c8a:	|  |  |  \-> move.l 1c984 <numResourceNames>,d0
    5c90:	|  |  |      cmp.l 296(sp),d0
    5c94:	|  |  \----- bgt.s 5c66 <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    5c96:	|  \-------> move.l #129,1c964 <input+0xa>
	input.mouseY = 100;
    5ca0:	|            moveq #100,d0
    5ca2:	|            move.l d0,1c968 <input+0xe>
	winWidth = get2bytes (fp);
    5ca8:	|            move.l 288(sp),-(sp)
    5cac:	|            jsr 6bc <get2bytes>
    5cb2:	|            addq.l #4,sp
    5cb4:	|            move.l d0,1c8fc <winWidth>
	winHeight = get2bytes (fp);
    5cba:	|            move.l 288(sp),-(sp)
    5cbe:	|            jsr 6bc <get2bytes>
    5cc4:	|            addq.l #4,sp
    5cc6:	|            move.l d0,1c900 <winHeight>
	specialSettings = FGetC (fp);
    5ccc:	|            move.l 288(sp),240(sp)
    5cd2:	|            move.l 1c9b0 <DOSBase>,d0
    5cd8:	|            movea.l d0,a6
    5cda:	|            move.l 240(sp),d1
    5cde:	|            jsr -306(a6)
    5ce2:	|            move.l d0,236(sp)
    5ce6:	|            move.l 236(sp),d0
    5cea:	|            move.l d0,1c98c <specialSettings>

	desiredfps = 1000/FGetC (fp);
    5cf0:	|            move.l 288(sp),232(sp)
    5cf6:	|            move.l 1c9b0 <DOSBase>,d0
    5cfc:	|            movea.l d0,a6
    5cfe:	|            move.l 232(sp),d1
    5d02:	|            jsr -306(a6)
    5d06:	|            move.l d0,228(sp)
    5d0a:	|            move.l 228(sp),d0
    5d0e:	|            move.l d0,-(sp)
    5d10:	|            pea 3e8 <encodeFilename+0xea>
    5d14:	|            jsr 17c64 <__divsi3>
    5d1a:	|            addq.l #8,sp
    5d1c:	|            move.l d0,1c336 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    5d22:	|            move.l 288(sp),-(sp)
    5d26:	|            jsr b02 <readString>
    5d2c:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    5d2e:	|            move.l 288(sp),224(sp)
    5d34:	|            move.l #117066,220(sp)
    5d3c:	|            moveq #8,d1
    5d3e:	|            move.l d1,216(sp)
    5d42:	|            moveq #1,d0
    5d44:	|            move.l d0,212(sp)
    5d48:	|            move.l 1c9b0 <DOSBase>,d0
    5d4e:	|            movea.l d0,a6
    5d50:	|            move.l 224(sp),d1
    5d54:	|            move.l 220(sp),d2
    5d58:	|            move.l 216(sp),d3
    5d5c:	|            move.l 212(sp),d4
    5d60:	|            jsr -324(a6)
    5d64:	|            move.l d0,208(sp)
    5d68:	|            move.l 208(sp),d0
    5d6c:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    5d70:	|            moveq #1,d1
    5d72:	|            cmp.l 204(sp),d1
    5d76:	|        /-- beq.s 5d86 <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    5d78:	|        |   pea 189b3 <PutChar+0xcb7>
    5d7e:	|        |   jsr 17232 <KPrintF>
    5d84:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    5d86:	|        \-> move.l 1c952 <gameVersion>,d0
    5d8c:	|            cmpi.l #258,d0
    5d92:	|        /-- ble.s 5da2 <initSludge+0x31a>
    5d94:	|        |   move.l 288(sp),-(sp)
    5d98:	|        |   jsr b02 <readString>
    5d9e:	|        |   addq.l #4,sp
    5da0:	|     /--|-- bra.s 5db6 <initSludge+0x32e>
    5da2:	|     |  \-> pea 189d1 <PutChar+0xcd5>
    5da8:	|     |      pea 189d1 <PutChar+0xcd5>
    5dae:	|     |      jsr 13cfe <joinStrings>
    5db4:	|     |      addq.l #8,sp
    5db6:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    5dba:	|            move.l 1c952 <gameVersion>,d0
    5dc0:	|            cmpi.l #258,d0
    5dc6:	|     /----- ble.s 5de8 <initSludge+0x360>
    5dc8:	|     |      move.l 288(sp),196(sp)
    5dce:	|     |      move.l 1c9b0 <DOSBase>,d0
    5dd4:	|     |      movea.l d0,a6
    5dd6:	|     |      move.l 196(sp),d1
    5dda:	|     |      jsr -306(a6)
    5dde:	|     |      move.l d0,192(sp)
    5de2:	|     |      move.l 192(sp),d0
    5de6:	|     |  /-- bra.s 5dea <initSludge+0x362>
    5de8:	|     \--|-> moveq #0,d0
    5dea:	|        \-> move.l d0,1ca88 <gameSettings+0x4>
	makeLanguageTable (fp);
    5df0:	|            move.l 288(sp),-(sp)
    5df4:	|            jsr 136b4 <makeLanguageTable>
    5dfa:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    5dfc:	|            move.l 1c952 <gameVersion>,d0
    5e02:	|            cmpi.l #261,d0
    5e08:	|        /-- ble.s 5e56 <initSludge+0x3ce>
	{
		FGetC(fp);
    5e0a:	|        |   move.l 288(sp),188(sp)
    5e10:	|        |   move.l 1c9b0 <DOSBase>,d0
    5e16:	|        |   movea.l d0,a6
    5e18:	|        |   move.l 188(sp),d1
    5e1c:	|        |   jsr -306(a6)
    5e20:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    5e24:	|        |   move.l 288(sp),180(sp)
    5e2a:	|        |   move.l 1c9b0 <DOSBase>,d0
    5e30:	|        |   movea.l d0,a6
    5e32:	|        |   move.l 180(sp),d1
    5e36:	|        |   jsr -306(a6)
    5e3a:	|        |   move.l d0,176(sp)
		getFloat (fp);
    5e3e:	|        |   move.l 288(sp),-(sp)
    5e42:	|        |   jsr 7d8 <getFloat>
    5e48:	|        |   addq.l #4,sp
		getFloat (fp);
    5e4a:	|        |   move.l 288(sp),-(sp)
    5e4e:	|        |   jsr 7d8 <getFloat>
    5e54:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    5e56:	|        \-> move.l 288(sp),-(sp)
    5e5a:	|            jsr b02 <readString>
    5e60:	|            addq.l #4,sp
    5e62:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    5e66:	|            pea 189d2 <PutChar+0xcd6>
    5e6c:	|            move.l 176(sp),-(sp)
    5e70:	|            jsr 13c7e <strcmp>
    5e76:	|            addq.l #8,sp
    5e78:	|            tst.l d0
    5e7a:	|        /-- beq.s 5e82 <initSludge+0x3fa>
		return FALSE;
    5e7c:	|        |   clr.w d0
    5e7e:	+--------|-- bra.w 61f6 <initSludge+0x76e>
	}
	FreeVec( checker);
    5e82:	|        \-> move.l 172(sp),168(sp)
    5e88:	|            move.l 1c9a8 <SysBase>,d0
    5e8e:	|            movea.l d0,a6
    5e90:	|            movea.l 168(sp),a1
    5e94:	|            jsr -690(a6)
	checker = NULL;
    5e98:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    5e9c:	|            move.l 288(sp),164(sp)
    5ea2:	|            move.l 1c9b0 <DOSBase>,d0
    5ea8:	|            movea.l d0,a6
    5eaa:	|            move.l 164(sp),d1
    5eae:	|            jsr -306(a6)
    5eb2:	|            move.l d0,160(sp)
    5eb6:	|            move.l 160(sp),d0
    5eba:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    5ebe:	|            moveq #0,d0
    5ec0:	|            move.b 159(sp),d0
    5ec4:	|            moveq #1,d1
    5ec6:	|            and.l d1,d0
    5ec8:	|        /-- beq.s 5f20 <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    5eca:	|        |   move.l 1c9b0 <DOSBase>,d0
    5ed0:	|        |   movea.l d0,a6
    5ed2:	|        |   jsr -60(a6)
    5ed6:	|        |   move.l d0,38(sp)
    5eda:	|        |   move.l 38(sp),d0
    5ede:	|        |   move.l d0,34(sp)
    5ee2:	|        |   move.l #100826,30(sp)
    5eea:	|        |   moveq #54,d0
    5eec:	|        |   move.l d0,26(sp)
    5ef0:	|        |   move.l 1c9b0 <DOSBase>,d0
    5ef6:	|        |   movea.l d0,a6
    5ef8:	|        |   move.l 34(sp),d1
    5efc:	|        |   move.l 30(sp),d2
    5f00:	|        |   move.l 26(sp),d3
    5f04:	|        |   jsr -48(a6)
    5f08:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    5f0c:	|        |   pea 18a11 <PutChar+0xd15>
    5f12:	|        |   jsr 17232 <KPrintF>
    5f18:	|        |   addq.l #4,sp
		return FALSE;
    5f1a:	|        |   clr.w d0
    5f1c:	+--------|-- bra.w 61f6 <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    5f20:	|        \-> move.l 288(sp),-(sp)
    5f24:	|            jsr 6bc <get2bytes>
    5f2a:	|            addq.l #4,sp
    5f2c:	|            move.l d0,1c980 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    5f32:	|            move.l 1c980 <numGlobals>,d0
    5f38:	|            lsl.l #3,d0
    5f3a:	|            move.l d0,154(sp)
    5f3e:	|            clr.l 150(sp)
    5f42:	|            move.l 1c9a8 <SysBase>,d0
    5f48:	|            movea.l d0,a6
    5f4a:	|            move.l 154(sp),d0
    5f4e:	|            move.l 150(sp),d1
    5f52:	|            jsr -684(a6)
    5f56:	|            move.l d0,146(sp)
    5f5a:	|            move.l 146(sp),d0
    5f5e:	|            move.l d0,1c956 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    5f64:	|            move.l 1c956 <globalVars>,d0
    5f6a:	|        /-- bne.s 5f88 <initSludge+0x500>
    5f6c:	|        |   move.l 1c980 <numGlobals>,d0
    5f72:	|        +-- ble.s 5f88 <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    5f74:	|        |   pea 18a49 <PutChar+0xd4d>
    5f7a:	|        |   jsr 17232 <KPrintF>
    5f80:	|        |   addq.l #4,sp
		return FALSE;
    5f82:	|        |   clr.w d0
    5f84:	+--------|-- bra.w 61f6 <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    5f88:	|        \-> clr.l 308(sp)
    5f8c:	|        /-- bra.s 5fa4 <initSludge+0x51c>
    5f8e:	|     /--|-> move.l 1c956 <globalVars>,d1
    5f94:	|     |  |   move.l 308(sp),d0
    5f98:	|     |  |   lsl.l #3,d0
    5f9a:	|     |  |   movea.l d1,a0
    5f9c:	|     |  |   adda.l d0,a0
    5f9e:	|     |  |   clr.l (a0)
    5fa0:	|     |  |   addq.l #1,308(sp)
    5fa4:	|     |  \-> move.l 1c980 <numGlobals>,d0
    5faa:	|     |      cmp.l 308(sp),d0
    5fae:	|     \----- bgt.s 5f8e <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    5fb0:	|            move.l 1ca88 <gameSettings+0x4>,d0
    5fb6:	|            clr.l -(sp)
    5fb8:	|            move.l d0,-(sp)
    5fba:	|            move.l 296(sp),-(sp)
    5fbe:	|            jsr 6fc4 <setFileIndices>
    5fc4:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    5fc8:	|            pea 1 <_start+0x1>
    5fcc:	|            jsr 6c7e <getNumberedString>
    5fd2:	|            addq.l #4,sp
    5fd4:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    5fd8:	|            move.l 142(sp),-(sp)
    5fdc:	|            jsr 2fe <encodeFilename>
    5fe2:	|            addq.l #4,sp
    5fe4:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    5fe8:	|            move.l 142(sp),134(sp)
    5fee:	|            move.l 1c9a8 <SysBase>,d0
    5ff4:	|            movea.l d0,a6
    5ff6:	|            movea.l 134(sp),a1
    5ffa:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    5ffe:	|            move.l 138(sp),130(sp)
    6004:	|            move.l 1c9b0 <DOSBase>,d0
    600a:	|            movea.l d0,a6
    600c:	|            move.l 130(sp),d1
    6010:	|            jsr -120(a6)
    6014:	|            move.l d0,126(sp)
    6018:	|            move.l 126(sp),d0
    601c:	|            move.l d0,292(sp)
	if(lock == 0) {
    6020:	|        /-- bne.s 604e <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    6022:	|        |   move.l 138(sp),122(sp)
    6028:	|        |   moveq #-2,d1
    602a:	|        |   move.l d1,118(sp)
    602e:	|        |   move.l 1c9b0 <DOSBase>,d0
    6034:	|        |   movea.l d0,a6
    6036:	|        |   move.l 122(sp),d1
    603a:	|        |   move.l 118(sp),d2
    603e:	|        |   jsr -84(a6)
    6042:	|        |   move.l d0,114(sp)
    6046:	|        |   move.l 114(sp),d0
    604a:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    604e:	|        \-> move.l 292(sp),110(sp)
    6054:	|            move.l 1c9b0 <DOSBase>,d0
    605a:	|            movea.l d0,a6
    605c:	|            move.l 110(sp),d1
    6060:	|            jsr -126(a6)
    6064:	|            move.l d0,106(sp)
    6068:	|            move.l 106(sp),d0
    606c:	|        /-- bne.s 60c8 <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    606e:	|        |   move.l 138(sp),-(sp)
    6072:	|        |   pea 18a7c <PutChar+0xd80>
    6078:	|        |   jsr 17232 <KPrintF>
    607e:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    6080:	|        |   move.l 1c9b0 <DOSBase>,d0
    6086:	|        |   movea.l d0,a6
    6088:	|        |   jsr -60(a6)
    608c:	|        |   move.l d0,58(sp)
    6090:	|        |   move.l 58(sp),d0
    6094:	|        |   move.l d0,54(sp)
    6098:	|        |   move.l #101033,50(sp)
    60a0:	|        |   moveq #40,d0
    60a2:	|        |   move.l d0,46(sp)
    60a6:	|        |   move.l 1c9b0 <DOSBase>,d0
    60ac:	|        |   movea.l d0,a6
    60ae:	|        |   move.l 54(sp),d1
    60b2:	|        |   move.l 50(sp),d2
    60b6:	|        |   move.l 46(sp),d3
    60ba:	|        |   jsr -48(a6)
    60be:	|        |   move.l d0,42(sp)
		return FALSE;
    60c2:	|        |   clr.w d0
    60c4:	+--------|-- bra.w 61f6 <initSludge+0x76e>
	}

	FreeVec(gameName);
    60c8:	|        \-> move.l 138(sp),102(sp)
    60ce:	|            move.l 1c9a8 <SysBase>,d0
    60d4:	|            movea.l d0,a6
    60d6:	|            movea.l 102(sp),a1
    60da:	|            jsr -690(a6)

	readIniFile (filename);
    60de:	|            move.l 316(sp),-(sp)
    60e2:	|            jsr 137e8 <readIniFile>
    60e8:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    60ea:	|            jsr 135ba <getLanguageForFileB>
    60f0:	|            move.l d0,1c324 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    60f6:	|            move.l 1c324 <languageNum>,d0
    60fc:	|        /-- bpl.s 610c <initSludge+0x684>
    60fe:	|        |   pea 18ad2 <PutChar+0xdd6>
    6104:	|        |   jsr 17232 <KPrintF>
    610a:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    610c:	|        \-> move.l 1c324 <languageNum>,d0
    6112:	|            move.l d0,d1
    6114:	|            move.l 1ca88 <gameSettings+0x4>,d0
    611a:	|            move.l d1,-(sp)
    611c:	|            move.l d0,-(sp)
    611e:	|            clr.l -(sp)
    6120:	|            jsr 6fc4 <setFileIndices>
    6126:	|            lea 12(sp),sp

	if (dataFol[0]) {
    612a:	|            movea.l 200(sp),a0
    612e:	|            move.b (a0),d0
    6130:	|     /----- beq.w 61da <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    6134:	|     |      move.l 200(sp),-(sp)
    6138:	|     |      jsr 2fe <encodeFilename>
    613e:	|     |      addq.l #4,sp
    6140:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    6144:	|     |      move.l 98(sp),94(sp)
    614a:	|     |      move.l 1c9b0 <DOSBase>,d0
    6150:	|     |      movea.l d0,a6
    6152:	|     |      move.l 94(sp),d1
    6156:	|     |      jsr -120(a6)
    615a:	|     |      move.l d0,90(sp)
    615e:	|     |      move.l 90(sp),d0
    6162:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    6166:	|     |  /-- bne.s 6194 <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    6168:	|     |  |   move.l 98(sp),86(sp)
    616e:	|     |  |   moveq #-2,d1
    6170:	|     |  |   move.l d1,82(sp)
    6174:	|     |  |   move.l 1c9b0 <DOSBase>,d0
    617a:	|     |  |   movea.l d0,a6
    617c:	|     |  |   move.l 86(sp),d1
    6180:	|     |  |   move.l 82(sp),d2
    6184:	|     |  |   jsr -84(a6)
    6188:	|     |  |   move.l d0,78(sp)
    618c:	|     |  |   move.l 78(sp),d0
    6190:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    6194:	|     |  \-> move.l 292(sp),74(sp)
    619a:	|     |      move.l 1c9b0 <DOSBase>,d0
    61a0:	|     |      movea.l d0,a6
    61a2:	|     |      move.l 74(sp),d1
    61a6:	|     |      jsr -126(a6)
    61aa:	|     |      move.l d0,70(sp)
    61ae:	|     |      move.l 70(sp),d0
    61b2:	|     |  /-- bne.s 61c4 <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    61b4:	|     |  |   move.l 1c9b0 <DOSBase>,d0
    61ba:	|     |  |   movea.l d0,a6
    61bc:	|     |  |   jsr -60(a6)
    61c0:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    61c4:	|     |  \-> move.l 98(sp),62(sp)
    61ca:	|     |      move.l 1c9a8 <SysBase>,d0
    61d0:	|     |      movea.l d0,a6
    61d2:	|     |      movea.l 62(sp),a1
    61d6:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    61da:	|     \----> movea.l 1c900 <winHeight>,a0
    61e0:	|            lea -15(a0),a0
    61e4:	|            move.l a0,d0
    61e6:	|            move.l d0,-(sp)
    61e8:	|            pea a <_start+0xa>
    61ec:	|            jsr 7a04 <positionStatus>
    61f2:	|            addq.l #8,sp

	return TRUE;
    61f4:	|            moveq #1,d0
}
    61f6:	\----------> movem.l (sp)+,d2-d4/a2/a6
    61fa:	             lea 292(sp),sp
    61fe:	             rts

00006200 <killSpeechTimers>:

void killSpeechTimers () {
    6200:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6202:	          move.l 1c940 <allRunningFunctions>,(sp)

	while (thisFunction) {
    6208:	   /----- bra.s 6234 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    620a:	/--|----> movea.l (sp),a0
    620c:	|  |      move.b 56(a0),d0
    6210:	|  |  /-- bne.s 622e <killSpeechTimers+0x2e>
    6212:	|  |  |   movea.l (sp),a0
    6214:	|  |  |   move.w 50(a0),d0
    6218:	|  |  +-- beq.s 622e <killSpeechTimers+0x2e>
    621a:	|  |  |   movea.l (sp),a0
    621c:	|  |  |   move.l 12(a0),d0
    6220:	|  |  +-- beq.s 622e <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    6222:	|  |  |   movea.l (sp),a0
    6224:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    6228:	|  |  |   movea.l (sp),a0
    622a:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    622e:	|  |  \-> movea.l (sp),a0
    6230:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6234:	|  \----> tst.l (sp)
    6236:	\-------- bne.s 620a <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    6238:	          jsr 7f42 <killAllSpeech>
}
    623e:	          nop
    6240:	          addq.l #4,sp
    6242:	          rts

00006244 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    6244:	             lea -52(sp),sp
    6248:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    624a:	             movea.l 60(sp),a0
    624e:	             move.l (a0),d0
    6250:	             move.l d0,-(sp)
    6252:	             jsr 6f04 <openSubSlice>
    6258:	             addq.l #4,sp
    625a:	             tst.w d0
    625c:	         /-- bne.s 6264 <loadFunctionCode+0x20>
    625e:	         |   clr.w d0
    6260:	/--------|-- bra.w 642e <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    6264:	|        \-> move.l 1c990 <bigDataFile>,44(sp)
    626c:	|            move.l 1c9b0 <DOSBase>,d0
    6272:	|            movea.l d0,a6
    6274:	|            move.l 44(sp),d1
    6278:	|            jsr -306(a6)
    627c:	|            move.l d0,40(sp)
    6280:	|            move.l 40(sp),d0
    6284:	|            move.l d0,d0
    6286:	|            movea.l 60(sp),a0
    628a:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    628e:	|            move.l 1c990 <bigDataFile>,d0
    6294:	|            move.l d0,-(sp)
    6296:	|            jsr 6bc <get2bytes>
    629c:	|            addq.l #4,sp
    629e:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    62a2:	|            move.l 1c990 <bigDataFile>,d0
    62a8:	|            move.l d0,-(sp)
    62aa:	|            jsr 6bc <get2bytes>
    62b0:	|            addq.l #4,sp
    62b2:	|            movea.l 60(sp),a0
    62b6:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    62ba:	|            move.l 1c990 <bigDataFile>,d0
    62c0:	|            move.l d0,-(sp)
    62c2:	|            jsr 6bc <get2bytes>
    62c8:	|            addq.l #4,sp
    62ca:	|            movea.l 60(sp),a0
    62ce:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    62d2:	|            move.l 36(sp),d0
    62d6:	|            lsl.l #3,d0
    62d8:	|            move.l d0,32(sp)
    62dc:	|            clr.l 28(sp)
    62e0:	|            move.l 1c9a8 <SysBase>,d0
    62e6:	|            movea.l d0,a6
    62e8:	|            move.l 32(sp),d0
    62ec:	|            move.l 28(sp),d1
    62f0:	|            jsr -684(a6)
    62f4:	|            move.l d0,24(sp)
    62f8:	|            move.l 24(sp),d0
    62fc:	|            movea.l 60(sp),a0
    6300:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    6304:	|            movea.l 60(sp),a0
    6308:	|            move.l 4(a0),d0
    630c:	|        /-- bne.s 6322 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    630e:	|        |   pea 18afd <PutChar+0xe01>
    6314:	|        |   jsr 17232 <KPrintF>
    631a:	|        |   addq.l #4,sp
		return FALSE;
    631c:	|        |   clr.w d0
    631e:	+--------|-- bra.w 642e <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6322:	|        \-> clr.l 52(sp)
    6326:	|        /-- bra.s 6388 <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    6328:	|     /--|-> move.l 1c990 <bigDataFile>,8(sp)
    6330:	|     |  |   move.l 1c9b0 <DOSBase>,d0
    6336:	|     |  |   movea.l d0,a6
    6338:	|     |  |   move.l 8(sp),d1
    633c:	|     |  |   jsr -306(a6)
    6340:	|     |  |   move.l d0,4(sp)
    6344:	|     |  |   move.l 4(sp),d1
    6348:	|     |  |   movea.l 60(sp),a0
    634c:	|     |  |   movea.l 4(a0),a0
    6350:	|     |  |   move.l 52(sp),d0
    6354:	|     |  |   lsl.l #3,d0
    6356:	|     |  |   adda.l d0,a0
    6358:	|     |  |   move.l d1,d0
    635a:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    635c:	|     |  |   move.l 1c990 <bigDataFile>,d0
    6362:	|     |  |   move.l d0,-(sp)
    6364:	|     |  |   jsr 6bc <get2bytes>
    636a:	|     |  |   addq.l #4,sp
    636c:	|     |  |   move.l d0,d1
    636e:	|     |  |   movea.l 60(sp),a0
    6372:	|     |  |   movea.l 4(a0),a0
    6376:	|     |  |   move.l 52(sp),d0
    637a:	|     |  |   lsl.l #3,d0
    637c:	|     |  |   adda.l d0,a0
    637e:	|     |  |   move.l d1,d0
    6380:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6384:	|     |  |   addq.l #1,52(sp)
    6388:	|     |  \-> move.l 52(sp),d0
    638c:	|     |      cmp.l 36(sp),d0
    6390:	|     \----- bcs.s 6328 <loadFunctionCode+0xe4>
	}

	finishAccess ();
    6392:	|            jsr 6c74 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    6398:	|            movea.l 60(sp),a0
    639c:	|            move.l 8(a0),d0
    63a0:	|  /-------- ble.w 6424 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    63a4:	|  |         movea.l 60(sp),a0
    63a8:	|  |         move.l 8(a0),d0
    63ac:	|  |         lsl.l #3,d0
    63ae:	|  |         move.l d0,20(sp)
    63b2:	|  |         clr.l 16(sp)
    63b6:	|  |         move.l 1c9a8 <SysBase>,d0
    63bc:	|  |         movea.l d0,a6
    63be:	|  |         move.l 20(sp),d0
    63c2:	|  |         move.l 16(sp),d1
    63c6:	|  |         jsr -684(a6)
    63ca:	|  |         move.l d0,12(sp)
    63ce:	|  |         move.l 12(sp),d0
    63d2:	|  |         movea.l 60(sp),a0
    63d6:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    63da:	|  |         movea.l 60(sp),a0
    63de:	|  |         move.l 20(a0),d0
    63e2:	|  |     /-- bne.s 63f6 <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    63e4:	|  |     |   pea 18afd <PutChar+0xe01>
    63ea:	|  |     |   jsr 17232 <KPrintF>
    63f0:	|  |     |   addq.l #4,sp
			return FALSE;
    63f2:	|  |     |   clr.w d0
    63f4:	+--|-----|-- bra.s 642e <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    63f6:	|  |     \-> clr.l 48(sp)
    63fa:	|  |     /-- bra.s 6414 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    63fc:	|  |  /--|-> movea.l 60(sp),a0
    6400:	|  |  |  |   move.l 20(a0),d1
    6404:	|  |  |  |   move.l 48(sp),d0
    6408:	|  |  |  |   lsl.l #3,d0
    640a:	|  |  |  |   movea.l d1,a0
    640c:	|  |  |  |   adda.l d0,a0
    640e:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    6410:	|  |  |  |   addq.l #1,48(sp)
    6414:	|  |  |  \-> movea.l 60(sp),a0
    6418:	|  |  |      move.l 8(a0),d0
    641c:	|  |  |      cmp.l 48(sp),d0
    6420:	|  |  \----- bgt.s 63fc <loadFunctionCode+0x1b8>
    6422:	|  |     /-- bra.s 642c <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    6424:	|  \-----|-> movea.l 60(sp),a0
    6428:	|        |   clr.l 8(a0)
	}
	return TRUE;
    642c:	|        \-> moveq #1,d0
}
    642e:	\----------> movea.l (sp)+,a6
    6430:	             lea 52(sp),sp
    6434:	             rts

00006436 <loadHandlers>:

void loadHandlers (BPTR fp) {
    6436:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    6438:	movea.l 1c320 <currentEvents>,a2
    643e:	move.l 8(sp),-(sp)
    6442:	jsr 6bc <get2bytes>
    6448:	addq.l #4,sp
    644a:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    644c:	movea.l 1c320 <currentEvents>,a2
    6452:	move.l 8(sp),-(sp)
    6456:	jsr 6bc <get2bytes>
    645c:	addq.l #4,sp
    645e:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    6462:	movea.l 1c320 <currentEvents>,a2
    6468:	move.l 8(sp),-(sp)
    646c:	jsr 6bc <get2bytes>
    6472:	addq.l #4,sp
    6474:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    6478:	movea.l 1c320 <currentEvents>,a2
    647e:	move.l 8(sp),-(sp)
    6482:	jsr 6bc <get2bytes>
    6488:	addq.l #4,sp
    648a:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    648e:	movea.l 1c320 <currentEvents>,a2
    6494:	move.l 8(sp),-(sp)
    6498:	jsr 6bc <get2bytes>
    649e:	addq.l #4,sp
    64a0:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    64a4:	movea.l 1c320 <currentEvents>,a2
    64aa:	move.l 8(sp),-(sp)
    64ae:	jsr 6bc <get2bytes>
    64b4:	addq.l #4,sp
    64b6:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    64ba:	movea.l 1c320 <currentEvents>,a2
    64c0:	move.l 8(sp),-(sp)
    64c4:	jsr 6bc <get2bytes>
    64ca:	addq.l #4,sp
    64cc:	move.l d0,24(a2)
}
    64d0:	nop
    64d2:	movea.l (sp)+,a2
    64d4:	rts

000064d6 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    64d6:	       lea -312(sp),sp
    64da:	       movem.l d2-d3/a6,-(sp)
    64de:	       move.l 332(sp),d1
    64e2:	       move.l 336(sp),d0
    64e6:	       move.b d1,d1
    64e8:	       move.b d1,16(sp)
    64ec:	       move.b d0,d0
    64ee:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    64f2:	       move.l 328(sp),318(sp)
    64f8:	       move.l #1005,314(sp)
    6500:	       move.l 1c9b0 <DOSBase>,d0
    6506:	       movea.l d0,a6
    6508:	       move.l 318(sp),d1
    650c:	       move.l 314(sp),d2
    6510:	       jsr -30(a6)
    6514:	       move.l d0,310(sp)
    6518:	       move.l 310(sp),d0
    651c:	       move.l d0,306(sp)

	if (! fp) {
    6520:	   /-- bne.s 657c <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    6522:	   |   move.l 1c9b0 <DOSBase>,d0
    6528:	   |   movea.l d0,a6
    652a:	   |   jsr -60(a6)
    652e:	   |   move.l d0,154(sp)
    6532:	   |   move.l 154(sp),d0
    6536:	   |   move.l d0,150(sp)
    653a:	   |   move.l #101158,146(sp)
    6542:	   |   moveq #31,d0
    6544:	   |   move.l d0,142(sp)
    6548:	   |   move.l 1c9b0 <DOSBase>,d0
    654e:	   |   movea.l d0,a6
    6550:	   |   move.l 150(sp),d1
    6554:	   |   move.l 146(sp),d2
    6558:	   |   move.l 142(sp),d3
    655c:	   |   jsr -48(a6)
    6560:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    6564:	   |   move.l 328(sp),-(sp)
    6568:	   |   pea 18b46 <PutChar+0xe4a>
    656e:	   |   jsr 17232 <KPrintF>
    6574:	   |   addq.l #8,sp
		return NULL;
    6576:	   |   moveq #0,d0
    6578:	/--|-- bra.w 683c <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    657c:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    6580:	|      move.l 306(sp),302(sp)
    6586:	|      move.l 1c9b0 <DOSBase>,d0
    658c:	|      movea.l d0,a6
    658e:	|      move.l 302(sp),d1
    6592:	|      jsr -306(a6)
    6596:	|      move.l d0,298(sp)
    659a:	|      move.l 298(sp),d0
    659e:	|      moveq #83,d1
    65a0:	|      cmp.l d0,d1
    65a2:	|  /-- beq.s 65aa <openAndVerify+0xd4>
    65a4:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    65aa:	|  \-> move.l 306(sp),294(sp)
    65b0:	|      move.l 1c9b0 <DOSBase>,d0
    65b6:	|      movea.l d0,a6
    65b8:	|      move.l 294(sp),d1
    65bc:	|      jsr -306(a6)
    65c0:	|      move.l d0,290(sp)
    65c4:	|      move.l 290(sp),d0
    65c8:	|      moveq #76,d1
    65ca:	|      cmp.l d0,d1
    65cc:	|  /-- beq.s 65d4 <openAndVerify+0xfe>
    65ce:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    65d4:	|  \-> move.l 306(sp),286(sp)
    65da:	|      move.l 1c9b0 <DOSBase>,d0
    65e0:	|      movea.l d0,a6
    65e2:	|      move.l 286(sp),d1
    65e6:	|      jsr -306(a6)
    65ea:	|      move.l d0,282(sp)
    65ee:	|      move.l 282(sp),d0
    65f2:	|      moveq #85,d1
    65f4:	|      cmp.l d0,d1
    65f6:	|  /-- beq.s 65fe <openAndVerify+0x128>
    65f8:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    65fe:	|  \-> move.l 306(sp),278(sp)
    6604:	|      move.l 1c9b0 <DOSBase>,d0
    660a:	|      movea.l d0,a6
    660c:	|      move.l 278(sp),d1
    6610:	|      jsr -306(a6)
    6614:	|      move.l d0,274(sp)
    6618:	|      move.l 274(sp),d0
    661c:	|      moveq #68,d1
    661e:	|      cmp.l d0,d1
    6620:	|  /-- beq.s 6628 <openAndVerify+0x152>
    6622:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    6628:	|  \-> move.l 306(sp),270(sp)
    662e:	|      move.l 1c9b0 <DOSBase>,d0
    6634:	|      movea.l d0,a6
    6636:	|      move.l 270(sp),d1
    663a:	|      jsr -306(a6)
    663e:	|      move.l d0,266(sp)
    6642:	|      move.l 266(sp),d1
    6646:	|      move.b 16(sp),d0
    664a:	|      ext.w d0
    664c:	|      movea.w d0,a0
    664e:	|      cmpa.l d1,a0
    6650:	|  /-- beq.s 6658 <openAndVerify+0x182>
    6652:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    6658:	|  \-> move.l 306(sp),262(sp)
    665e:	|      move.l 1c9b0 <DOSBase>,d0
    6664:	|      movea.l d0,a6
    6666:	|      move.l 262(sp),d1
    666a:	|      jsr -306(a6)
    666e:	|      move.l d0,258(sp)
    6672:	|      move.l 258(sp),d1
    6676:	|      move.b 14(sp),d0
    667a:	|      ext.w d0
    667c:	|      movea.w d0,a0
    667e:	|      cmpa.l d1,a0
    6680:	|  /-- beq.s 6688 <openAndVerify+0x1b2>
    6682:	|  |   move.w #1,322(sp)
	if (headerBad) {
    6688:	|  \-> tst.w 322(sp)
    668c:	|  /-- beq.s 66e4 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    668e:	|  |   move.l 1c9b0 <DOSBase>,d0
    6694:	|  |   movea.l d0,a6
    6696:	|  |   jsr -60(a6)
    669a:	|  |   move.l d0,174(sp)
    669e:	|  |   move.l 174(sp),d0
    66a2:	|  |   move.l d0,170(sp)
    66a6:	|  |   move.l #101221,166(sp)
    66ae:	|  |   moveq #31,d0
    66b0:	|  |   move.l d0,162(sp)
    66b4:	|  |   move.l 1c9b0 <DOSBase>,d0
    66ba:	|  |   movea.l d0,a6
    66bc:	|  |   move.l 170(sp),d1
    66c0:	|  |   move.l 166(sp),d2
    66c4:	|  |   move.l 162(sp),d3
    66c8:	|  |   jsr -48(a6)
    66cc:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    66d0:	|  |   pea 18b65 <PutChar+0xe69>
    66d6:	|  |   jsr 17232 <KPrintF>
    66dc:	|  |   addq.l #4,sp
		return NULL;
    66de:	|  |   moveq #0,d0
    66e0:	+--|-- bra.w 683c <openAndVerify+0x366>
	}
	FGetC (fp);
    66e4:	|  \-> move.l 306(sp),254(sp)
    66ea:	|      move.l 1c9b0 <DOSBase>,d0
    66f0:	|      movea.l d0,a6
    66f2:	|      move.l 254(sp),d1
    66f6:	|      jsr -306(a6)
    66fa:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    66fe:	|      nop
    6700:	|  /-> move.l 306(sp),246(sp)
    6706:	|  |   move.l 1c9b0 <DOSBase>,d0
    670c:	|  |   movea.l d0,a6
    670e:	|  |   move.l 246(sp),d1
    6712:	|  |   jsr -306(a6)
    6716:	|  |   move.l d0,242(sp)
    671a:	|  |   move.l 242(sp),d0
    671e:	|  \-- bne.s 6700 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    6720:	|      move.l 306(sp),238(sp)
    6726:	|      move.l 1c9b0 <DOSBase>,d0
    672c:	|      movea.l d0,a6
    672e:	|      move.l 238(sp),d1
    6732:	|      jsr -306(a6)
    6736:	|      move.l d0,234(sp)
    673a:	|      move.l 234(sp),d0
    673e:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    6742:	|      move.l 306(sp),226(sp)
    6748:	|      move.l 1c9b0 <DOSBase>,d0
    674e:	|      movea.l d0,a6
    6750:	|      move.l 226(sp),d1
    6754:	|      jsr -306(a6)
    6758:	|      move.l d0,222(sp)
    675c:	|      move.l 222(sp),d0
    6760:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    6764:	|      move.l 230(sp),d0
    6768:	|      lsl.l #8,d0
    676a:	|      add.l 218(sp),d0
    676e:	|      movea.l 344(sp),a0
    6772:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    6774:	|      movea.l 344(sp),a0
    6778:	|      move.l (a0),d0
    677a:	|      cmpi.l #514,d0
    6780:	|  /-- ble.s 67d6 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    6782:	|  |   move.l 1c9b0 <DOSBase>,d0
    6788:	|  |   movea.l d0,a6
    678a:	|  |   jsr -60(a6)
    678e:	|  |   move.l d0,194(sp)
    6792:	|  |   move.l 194(sp),d0
    6796:	|  |   move.l d0,190(sp)
    679a:	|  |   move.l #101248,186(sp)
    67a2:	|  |   moveq #100,d1
    67a4:	|  |   move.l d1,182(sp)
    67a8:	|  |   move.l 1c9b0 <DOSBase>,d0
    67ae:	|  |   movea.l d0,a6
    67b0:	|  |   move.l 190(sp),d1
    67b4:	|  |   move.l 186(sp),d2
    67b8:	|  |   move.l 182(sp),d3
    67bc:	|  |   jsr -48(a6)
    67c0:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    67c4:	|  |   pea 18b80 <PutChar+0xe84>
    67ca:	|  |   jsr 17232 <KPrintF>
    67d0:	|  |   addq.l #4,sp
		return NULL;
    67d2:	|  |   moveq #0,d0
    67d4:	+--|-- bra.s 683c <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    67d6:	|  \-> movea.l 344(sp),a0
    67da:	|      move.l (a0),d0
    67dc:	|      cmpi.l #257,d0
    67e2:	|  /-- bgt.s 6838 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    67e4:	|  |   move.l 1c9b0 <DOSBase>,d0
    67ea:	|  |   movea.l d0,a6
    67ec:	|  |   jsr -60(a6)
    67f0:	|  |   move.l d0,214(sp)
    67f4:	|  |   move.l 214(sp),d0
    67f8:	|  |   move.l d0,210(sp)
    67fc:	|  |   move.l #101317,206(sp)
    6804:	|  |   moveq #100,d0
    6806:	|  |   move.l d0,202(sp)
    680a:	|  |   move.l 1c9b0 <DOSBase>,d0
    6810:	|  |   movea.l d0,a6
    6812:	|  |   move.l 210(sp),d1
    6816:	|  |   move.l 206(sp),d2
    681a:	|  |   move.l 202(sp),d3
    681e:	|  |   jsr -48(a6)
    6822:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    6826:	|  |   pea 18bc5 <PutChar+0xec9>
    682c:	|  |   jsr 17232 <KPrintF>
    6832:	|  |   addq.l #4,sp
		return NULL;
    6834:	|  |   moveq #0,d0
    6836:	+--|-- bra.s 683c <openAndVerify+0x366>
	}
	return fp;
    6838:	|  \-> move.l 306(sp),d0
}
    683c:	\----> movem.l (sp)+,d2-d3/a6
    6840:	       lea 312(sp),sp
    6844:	       rts

00006846 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    6846:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    6848:	          move.l #117056,(sp)
	while (* huntAndDestroy) {
    684e:	   /----- bra.s 687a <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    6850:	/--|----> movea.l (sp),a0
    6852:	|  |      move.l (a0),d0
    6854:	|  |      cmp.l 8(sp),d0
    6858:	|  |  /-- bne.s 6870 <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    685a:	|  |  |   movea.l (sp),a0
    685c:	|  |  |   movea.l (a0),a0
    685e:	|  |  |   move.l 44(a0),d0
    6862:	|  |  |   movea.l (sp),a0
    6864:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    6866:	|  |  |   movea.l 8(sp),a0
    686a:	|  |  |   clr.l 44(a0)
    686e:	|  +--|-- bra.s 687a <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    6870:	|  |  \-> movea.l (sp),a0
    6872:	|  |      move.l (a0),d0
    6874:	|  |      moveq #44,d1
    6876:	|  |      add.l d0,d1
    6878:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    687a:	|  \----> movea.l (sp),a0
    687c:	|         move.l (a0),d0
    687e:	\-------- bne.s 6850 <pauseFunction+0xa>
		}
	}
}
    6880:	          nop
    6882:	          nop
    6884:	          addq.l #4,sp
    6886:	          rts

00006888 <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    6888:	move.l 1c940 <allRunningFunctions>,d0
    688e:	movea.l 4(sp),a0
    6892:	move.l d0,44(a0)
	allRunningFunctions = fun;
    6896:	move.l 4(sp),1c940 <allRunningFunctions>
}
    689e:	nop
    68a0:	rts

000068a2 <runSludge>:

BOOL runSludge () {
    68a2:	                   lea -12(sp),sp
    68a6:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    68a8:	                   move.l 1c940 <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    68b0:	      /----------- bra.s 692c <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    68b2:	   /--|----------> movea.l 12(sp),a0
    68b6:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    68bc:	   |  |            movea.l 12(sp),a0
    68c0:	   |  |            move.b 56(a0),d0
    68c4:	   |  |  /-------- bne.s 6926 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    68c6:	   |  |  |         movea.l 12(sp),a0
    68ca:	   |  |  |         move.l 12(a0),d0
    68ce:	   |  |  |  /----- beq.s 68f8 <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    68d0:	   |  |  |  |      movea.l 12(sp),a0
    68d4:	   |  |  |  |      move.l 12(a0),d0
    68d8:	   |  |  |  |  /-- bpl.s 68e4 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    68da:	   |  |  |  |  |   movea.l 12(sp),a0
    68de:	   |  |  |  |  |   clr.l 12(a0)
    68e2:	   |  |  +--|--|-- bra.s 6926 <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    68e4:	   |  |  |  |  \-> movea.l 12(sp),a0
    68e8:	   |  |  |  |      move.l 12(a0),d0
    68ec:	   |  |  |  |      subq.l #1,d0
    68ee:	   |  |  |  |      movea.l 12(sp),a0
    68f2:	   |  |  |  |      move.l d0,12(a0)
    68f6:	   |  |  +--|----- bra.s 6926 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    68f8:	   |  |  |  \----> movea.l 12(sp),a0
    68fc:	   |  |  |         move.w 50(a0),d0
    6900:	   |  |  |     /-- beq.s 6910 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    6902:	   |  |  |     |   movea.l 12(sp),a0
    6906:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    690a:	   |  |  |     |   jsr 7f42 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    6910:	   |  |  |     \-> move.l 12(sp),-(sp)
    6914:	   |  |  |         jsr 4870 <continueFunction>
    691a:	   |  |  |         addq.l #4,sp
    691c:	   |  |  |         tst.w d0
    691e:	   |  |  +-------- bne.s 6926 <runSludge+0x84>
					return FALSE;
    6920:	   |  |  |         clr.w d0
    6922:	/--|--|--|-------- bra.w 69b2 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    6926:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    692c:	|  |  \----------> tst.l 12(sp)
    6930:	|  \-------------- bne.s 68b2 <runSludge+0x10>
	}

	if (loadNow) {
    6932:	|                  move.l 1c974 <loadNow>,d0
    6938:	|        /-------- beq.s 69b0 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    693a:	|        |         movea.l 1c974 <loadNow>,a0
    6940:	|        |         move.b (a0),d0
    6942:	|        |         cmpi.b #58,d0
    6946:	|        |  /----- bne.s 697a <runSludge+0xd8>
			saveGame (loadNow + 1);
    6948:	|        |  |      move.l 1c974 <loadNow>,d0
    694e:	|        |  |      addq.l #1,d0
    6950:	|        |  |      move.l d0,-(sp)
    6952:	|        |  |      jsr c75e <saveGame>
    6958:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    695a:	|        |  |      movea.l 1ca72 <saverFunc>,a0
    6960:	|        |  |      lea 28(a0),a0
    6964:	|        |  |      pea 1 <_start+0x1>
    6968:	|        |  |      pea 1 <_start+0x1>
    696c:	|        |  |      move.l a0,-(sp)
    696e:	|        |  |      jsr 150c4 <setVariable>
    6974:	|        |  |      lea 12(sp),sp
    6978:	|        |  |  /-- bra.s 6992 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    697a:	|        |  \--|-> move.l 1c974 <loadNow>,d0
    6980:	|        |     |   move.l d0,-(sp)
    6982:	|        |     |   jsr c2a6 <loadGame>
    6988:	|        |     |   addq.l #4,sp
    698a:	|        |     |   tst.w d0
    698c:	|        |     +-- bne.s 6992 <runSludge+0xf0>
    698e:	|        |     |   clr.w d0
    6990:	+--------|-----|-- bra.s 69b2 <runSludge+0x110>
		}
		FreeVec(loadNow);
    6992:	|        |     \-> move.l 1c974 <loadNow>,8(sp)
    699a:	|        |         move.l 1c9a8 <SysBase>,d0
    69a0:	|        |         movea.l d0,a6
    69a2:	|        |         movea.l 8(sp),a1
    69a6:	|        |         jsr -690(a6)
		loadNow = NULL;
    69aa:	|        |         clr.l 1c974 <loadNow>
	}

	return TRUE;
    69b0:	|        \-------> moveq #1,d0
}
    69b2:	\----------------> movea.l (sp)+,a6
    69b4:	                   lea 12(sp),sp
    69b8:	                   rts

000069ba <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    69ba:	movea.l 1c320 <currentEvents>,a0
    69c0:	move.l (a0),d0
    69c2:	move.l 4(sp),-(sp)
    69c6:	move.l d0,-(sp)
    69c8:	jsr 8d0 <put2bytes>
    69ce:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    69d0:	movea.l 1c320 <currentEvents>,a0
    69d6:	move.l 4(a0),d0
    69da:	move.l 4(sp),-(sp)
    69de:	move.l d0,-(sp)
    69e0:	jsr 8d0 <put2bytes>
    69e6:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    69e8:	movea.l 1c320 <currentEvents>,a0
    69ee:	move.l 8(a0),d0
    69f2:	move.l 4(sp),-(sp)
    69f6:	move.l d0,-(sp)
    69f8:	jsr 8d0 <put2bytes>
    69fe:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    6a00:	movea.l 1c320 <currentEvents>,a0
    6a06:	move.l 12(a0),d0
    6a0a:	move.l 4(sp),-(sp)
    6a0e:	move.l d0,-(sp)
    6a10:	jsr 8d0 <put2bytes>
    6a16:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    6a18:	movea.l 1c320 <currentEvents>,a0
    6a1e:	move.l 16(a0),d0
    6a22:	move.l 4(sp),-(sp)
    6a26:	move.l d0,-(sp)
    6a28:	jsr 8d0 <put2bytes>
    6a2e:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    6a30:	movea.l 1c320 <currentEvents>,a0
    6a36:	move.l 20(a0),d0
    6a3a:	move.l 4(sp),-(sp)
    6a3e:	move.l d0,-(sp)
    6a40:	jsr 8d0 <put2bytes>
    6a46:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    6a48:	movea.l 1c320 <currentEvents>,a0
    6a4e:	move.l 24(a0),d0
    6a52:	move.l 4(sp),-(sp)
    6a56:	move.l d0,-(sp)
    6a58:	jsr 8d0 <put2bytes>
    6a5e:	addq.l #8,sp
}
    6a60:	nop
    6a62:	rts

00006a64 <sludgeDisplay>:

void sludgeDisplay () {					
    6a64:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    6a66:	move.l #14675968,(sp)
	displayCursor();
    6a6c:	jsr c58 <displayCursor>
	CstDrawBackdrop();
    6a72:	jsr 14c8 <CstDrawBackdrop>
	CstRestoreScreen();
    6a78:	jsr 2b04 <CstRestoreScreen>
	drawPeople();
    6a7e:	jsr a042 <drawPeople>
	CstSwapBuffer();
    6a84:	jsr 383a <CstSwapBuffer>
}
    6a8a:	nop
    6a8c:	addq.l #4,sp
    6a8e:	rts

00006a90 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    6a90:	      /-- bra.s 6ab0 <stackSetByIndex+0x20>
		vS = vS->next;
    6a92:	/-----|-> movea.l 4(sp),a0
    6a96:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    6a9c:	|     +-- bne.s 6ab0 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    6a9e:	|     |   pea 18c0c <PutChar+0xf10>
    6aa4:	|     |   jsr 17232 <KPrintF>
    6aaa:	|     |   addq.l #4,sp
			return FALSE;
    6aac:	|     |   clr.w d0
    6aae:	|  /--|-- bra.s 6ad2 <stackSetByIndex+0x42>
	while (theIndex--) {
    6ab0:	|  |  \-> move.l 8(sp),d0
    6ab4:	|  |      move.l d0,d1
    6ab6:	|  |      subq.l #1,d1
    6ab8:	|  |      move.l d1,8(sp)
    6abc:	|  |      tst.l d0
    6abe:	\--|----- bne.s 6a92 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    6ac0:	   |      move.l 4(sp),d0
    6ac4:	   |      move.l d0,-(sp)
    6ac6:	   |      move.l 16(sp),-(sp)
    6aca:	   |      jsr 14c8c <copyVariable>
    6ad0:	   |      addq.l #8,sp
}
    6ad2:	   \----> rts

00006ad4 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    6ad4:	             lea -24(sp),sp
    6ad8:	             move.l a6,-(sp)
    6ada:	             move.l 48(sp),d0
    6ade:	             move.w d0,d0
    6ae0:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    6ae4:	             moveq #58,d0
    6ae6:	             move.l d0,24(sp)
    6aea:	             clr.l 20(sp)
    6aee:	             move.l 1c9a8 <SysBase>,d0
    6af4:	             movea.l d0,a6
    6af6:	             move.l 24(sp),d0
    6afa:	             move.l 20(sp),d1
    6afe:	             jsr -684(a6)
    6b02:	             move.l d0,16(sp)
    6b06:	             move.l 16(sp),d0
    6b0a:	             move.l d0,12(sp)
	if(!newFunc) {
    6b0e:	         /-- bne.s 6b24 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    6b10:	         |   pea 18c25 <PutChar+0xf29>
    6b16:	         |   jsr 17232 <KPrintF>
    6b1c:	         |   addq.l #4,sp
		return 0;
    6b1e:	         |   moveq #0,d0
    6b20:	/--------|-- bra.w 6c3a <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    6b24:	|        \-> move.l 32(sp),d0
    6b28:	|            movea.l 12(sp),a0
    6b2c:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    6b2e:	|            move.l 12(sp),-(sp)
    6b32:	|            jsr 6244 <loadFunctionCode>
    6b38:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    6b3a:	|            movea.l 12(sp),a0
    6b3e:	|            move.l 16(a0),d1
    6b42:	|            move.l 36(sp),d0
    6b46:	|            cmp.l d1,d0
    6b48:	|        /-- beq.s 6b5e <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    6b4a:	|        |   pea 18c4e <PutChar+0xf52>
    6b50:	|        |   jsr 17232 <KPrintF>
    6b56:	|        |   addq.l #4,sp
		return NULL; 
    6b58:	|        |   moveq #0,d0
    6b5a:	+--------|-- bra.w 6c3a <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    6b5e:	|        \-> movea.l 12(sp),a0
    6b62:	|            move.l 16(a0),d1
    6b66:	|            movea.l 12(sp),a0
    6b6a:	|            move.l 8(a0),d0
    6b6e:	|            cmp.l d1,d0
    6b70:	|  /-------- bge.s 6bda <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    6b72:	|  |         pea 18c6a <PutChar+0xf6e>
    6b78:	|  |         jsr 17232 <KPrintF>
    6b7e:	|  |         addq.l #4,sp
		return NULL; 
    6b80:	|  |         moveq #0,d0
    6b82:	+--|-------- bra.w 6c3a <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    6b86:	|  |  /----> movea.l 44(sp),a0
    6b8a:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    6b8e:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    6b92:	|  |  |      movea.l 44(sp),a0
    6b96:	|  |  |      move.l (a0),d0
    6b98:	|  |  |  /-- bne.s 6bae <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    6b9a:	|  |  |  |   pea 18c94 <PutChar+0xf98>
    6ba0:	|  |  |  |   jsr 17232 <KPrintF>
    6ba6:	|  |  |  |   addq.l #4,sp
			return NULL;
    6ba8:	|  |  |  |   moveq #0,d0
    6baa:	+--|--|--|-- bra.w 6c3a <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    6bae:	|  |  |  \-> movea.l 12(sp),a0
    6bb2:	|  |  |      move.l 20(a0),d1
    6bb6:	|  |  |      move.l 36(sp),d0
    6bba:	|  |  |      lsl.l #3,d0
    6bbc:	|  |  |      add.l d0,d1
    6bbe:	|  |  |      move.l 8(sp),d0
    6bc2:	|  |  |      move.l d1,-(sp)
    6bc4:	|  |  |      move.l d0,-(sp)
    6bc6:	|  |  |      jsr 14c8c <copyVariable>
    6bcc:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    6bce:	|  |  |      move.l 44(sp),-(sp)
    6bd2:	|  |  |      jsr 15156 <trimStack>
    6bd8:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    6bda:	|  \--|----> tst.l 36(sp)
    6bde:	|     \----- bne.s 6b86 <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    6be0:	|            movea.l 12(sp),a0
    6be4:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    6be8:	|            movea.l 12(sp),a0
    6bec:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    6bf0:	|            movea.l 12(sp),a0
    6bf4:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    6bfa:	|            movea.l 12(sp),a0
    6bfe:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    6c04:	|            movea.l 12(sp),a0
    6c08:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    6c0c:	|            movea.l 12(sp),a0
    6c10:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    6c14:	|            movea.l 12(sp),a0
    6c18:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    6c1c:	|            movea.l 12(sp),a0
    6c20:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    6c24:	|            movea.l 12(sp),a0
    6c28:	|            clr.l 28(a0)

	restartFunction (newFunc);
    6c2c:	|            move.l 12(sp),-(sp)
    6c30:	|            jsr 6888 <restartFunction>
    6c36:	|            addq.l #4,sp
	return 1;
    6c38:	|            moveq #1,d0
}
    6c3a:	\----------> movea.l (sp)+,a6
    6c3c:	             lea 24(sp),sp
    6c40:	             rts

00006c42 <unfreezeSubs>:

void unfreezeSubs () {
    6c42:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6c44:	          move.l 1c940 <allRunningFunctions>,(sp)

	while (thisFunction) {
    6c4a:	   /----- bra.s 6c68 <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    6c4c:	/--|----> movea.l (sp),a0
    6c4e:	|  |      move.b 56(a0),d0
    6c52:	|  |  /-- beq.s 6c62 <unfreezeSubs+0x20>
    6c54:	|  |  |   movea.l (sp),a0
    6c56:	|  |  |   move.b 56(a0),d0
    6c5a:	|  |  |   subq.b #1,d0
    6c5c:	|  |  |   movea.l (sp),a0
    6c5e:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    6c62:	|  |  \-> movea.l (sp),a0
    6c64:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6c68:	|  \----> tst.l (sp)
    6c6a:	\-------- bne.s 6c4c <unfreezeSubs+0xa>
	}
}
    6c6c:	          nop
    6c6e:	          nop
    6c70:	          addq.l #4,sp
    6c72:	          rts

00006c74 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    6c74:	clr.w 1c32c <sliceBusy>
}
    6c7a:	nop
    6c7c:	rts

00006c7e <getNumberedString>:

char * getNumberedString (int value) {
    6c7e:	       lea -56(sp),sp
    6c82:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    6c86:	       move.w 1c32c <sliceBusy>,d0
    6c8c:	   /-- beq.s 6cd6 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    6c8e:	   |   move.l 1c9b0 <DOSBase>,d0
    6c94:	   |   movea.l d0,a6
    6c96:	   |   jsr -60(a6)
    6c9a:	   |   move.l d0,28(sp)
    6c9e:	   |   move.l 28(sp),d0
    6ca2:	   |   move.l d0,24(sp)
    6ca6:	   |   move.l #101599,20(sp)
    6cae:	   |   moveq #76,d0
    6cb0:	   |   move.l d0,16(sp)
    6cb4:	   |   move.l 1c9b0 <DOSBase>,d0
    6cba:	   |   movea.l d0,a6
    6cbc:	   |   move.l 24(sp),d1
    6cc0:	   |   move.l 20(sp),d2
    6cc4:	   |   move.l 16(sp),d3
    6cc8:	   |   jsr -48(a6)
    6ccc:	   |   move.l d0,12(sp)
		return NULL;
    6cd0:	   |   moveq #0,d0
    6cd2:	/--|-- bra.w 6d72 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    6cd6:	|  \-> move.l 1c990 <bigDataFile>,64(sp)
    6cde:	|      move.l 72(sp),d0
    6ce2:	|      add.l d0,d0
    6ce4:	|      add.l d0,d0
    6ce6:	|      move.l d0,d1
    6ce8:	|      move.l 1c99c <startOfTextIndex>,d0
    6cee:	|      add.l d1,d0
    6cf0:	|      move.l d0,60(sp)
    6cf4:	|      moveq #-1,d0
    6cf6:	|      move.l d0,56(sp)
    6cfa:	|      move.l 1c9b0 <DOSBase>,d0
    6d00:	|      movea.l d0,a6
    6d02:	|      move.l 64(sp),d1
    6d06:	|      move.l 60(sp),d2
    6d0a:	|      move.l 56(sp),d3
    6d0e:	|      jsr -66(a6)
    6d12:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    6d16:	|      move.l 1c990 <bigDataFile>,d0
    6d1c:	|      move.l d0,-(sp)
    6d1e:	|      jsr 718 <get4bytes>
    6d24:	|      addq.l #4,sp
    6d26:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    6d2a:	|      move.l 1c990 <bigDataFile>,48(sp)
    6d32:	|      move.l 72(sp),44(sp)
    6d38:	|      moveq #-1,d0
    6d3a:	|      move.l d0,40(sp)
    6d3e:	|      move.l 1c9b0 <DOSBase>,d0
    6d44:	|      movea.l d0,a6
    6d46:	|      move.l 48(sp),d1
    6d4a:	|      move.l 44(sp),d2
    6d4e:	|      move.l 40(sp),d3
    6d52:	|      jsr -66(a6)
    6d56:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    6d5a:	|      move.l 1c990 <bigDataFile>,d0
    6d60:	|      move.l d0,-(sp)
    6d62:	|      jsr b02 <readString>
    6d68:	|      addq.l #4,sp
    6d6a:	|      move.l d0,32(sp)
	
	return s;
    6d6e:	|      move.l 32(sp),d0
}
    6d72:	\----> movem.l (sp)+,d2-d3/a6
    6d76:	       lea 56(sp),sp
    6d7a:	       rts

00006d7c <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    6d7c:	       lea -32(sp),sp
    6d80:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    6d84:	       move.w 1c32c <sliceBusy>,d0
    6d8a:	   /-- beq.s 6da6 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    6d8c:	   |   pea 18d2c <PutChar+0x1030>
    6d92:	   |   pea 18d4a <PutChar+0x104e>
    6d98:	   |   jsr 17232 <KPrintF>
    6d9e:	   |   addq.l #8,sp
		return 0;
    6da0:	   |   moveq #0,d0
    6da2:	/--|-- bra.w 6e3a <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    6da6:	|  \-> move.l 1c990 <bigDataFile>,40(sp)
    6dae:	|      move.l 48(sp),d0
    6db2:	|      add.l d0,d0
    6db4:	|      add.l d0,d0
    6db6:	|      move.l d0,d1
    6db8:	|      move.l 1c998 <startOfDataIndex>,d0
    6dbe:	|      add.l d1,d0
    6dc0:	|      move.l d0,36(sp)
    6dc4:	|      moveq #-1,d0
    6dc6:	|      move.l d0,32(sp)
    6dca:	|      move.l 1c9b0 <DOSBase>,d0
    6dd0:	|      movea.l d0,a6
    6dd2:	|      move.l 40(sp),d1
    6dd6:	|      move.l 36(sp),d2
    6dda:	|      move.l 32(sp),d3
    6dde:	|      jsr -66(a6)
    6de2:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    6de6:	|      move.l 1c990 <bigDataFile>,24(sp)
    6dee:	|      move.l 1c990 <bigDataFile>,d0
    6df4:	|      move.l d0,-(sp)
    6df6:	|      jsr 718 <get4bytes>
    6dfc:	|      addq.l #4,sp
    6dfe:	|      move.l d0,20(sp)
    6e02:	|      clr.l 16(sp)
    6e06:	|      move.l 1c9b0 <DOSBase>,d0
    6e0c:	|      movea.l d0,a6
    6e0e:	|      move.l 24(sp),d1
    6e12:	|      move.l 20(sp),d2
    6e16:	|      move.l 16(sp),d3
    6e1a:	|      jsr -66(a6)
    6e1e:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    6e22:	|      move.w #1,1c32c <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    6e2a:	|      move.l 1c990 <bigDataFile>,d0
    6e30:	|      move.l d0,-(sp)
    6e32:	|      jsr 718 <get4bytes>
    6e38:	|      addq.l #4,sp
}
    6e3a:	\----> movem.l (sp)+,d2-d3/a6
    6e3e:	       lea 32(sp),sp
    6e42:	       rts

00006e44 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    6e44:	       lea -32(sp),sp
    6e48:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    6e4c:	       move.w 1c32c <sliceBusy>,d0
    6e52:	   /-- beq.s 6e6e <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    6e54:	   |   pea 18d2c <PutChar+0x1030>
    6e5a:	   |   pea 18d4a <PutChar+0x104e>
    6e60:	   |   jsr 17232 <KPrintF>
    6e66:	   |   addq.l #8,sp
        return FALSE;
    6e68:	   |   clr.w d0
    6e6a:	/--|-- bra.w 6efa <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    6e6e:	|  \-> move.l 1c990 <bigDataFile>,40(sp)
    6e76:	|      move.l 48(sp),d0
    6e7a:	|      add.l d0,d0
    6e7c:	|      add.l d0,d0
    6e7e:	|      move.l d0,d1
    6e80:	|      move.l 1c9a4 <startOfObjectIndex>,d0
    6e86:	|      add.l d1,d0
    6e88:	|      move.l d0,36(sp)
    6e8c:	|      moveq #-1,d0
    6e8e:	|      move.l d0,32(sp)
    6e92:	|      move.l 1c9b0 <DOSBase>,d0
    6e98:	|      movea.l d0,a6
    6e9a:	|      move.l 40(sp),d1
    6e9e:	|      move.l 36(sp),d2
    6ea2:	|      move.l 32(sp),d3
    6ea6:	|      jsr -66(a6)
    6eaa:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    6eae:	|      move.l 1c990 <bigDataFile>,24(sp)
    6eb6:	|      move.l 1c990 <bigDataFile>,d0
    6ebc:	|      move.l d0,-(sp)
    6ebe:	|      jsr 718 <get4bytes>
    6ec4:	|      addq.l #4,sp
    6ec6:	|      move.l d0,20(sp)
    6eca:	|      moveq #-1,d0
    6ecc:	|      move.l d0,16(sp)
    6ed0:	|      move.l 1c9b0 <DOSBase>,d0
    6ed6:	|      movea.l d0,a6
    6ed8:	|      move.l 24(sp),d1
    6edc:	|      move.l 20(sp),d2
    6ee0:	|      move.l 16(sp),d3
    6ee4:	|      jsr -66(a6)
    6ee8:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    6eec:	|      move.w #1,1c32c <sliceBusy>
    6ef4:	|      move.w 1c32c <sliceBusy>,d0
}
    6efa:	\----> movem.l (sp)+,d2-d3/a6
    6efe:	       lea 32(sp),sp
    6f02:	       rts

00006f04 <openSubSlice>:

BOOL openSubSlice (int num) {
    6f04:	       lea -32(sp),sp
    6f08:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    6f0c:	       move.w 1c32c <sliceBusy>,d0
    6f12:	   /-- beq.s 6f2e <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    6f14:	   |   pea 18d2c <PutChar+0x1030>
    6f1a:	   |   pea 18d4a <PutChar+0x104e>
    6f20:	   |   jsr 17232 <KPrintF>
    6f26:	   |   addq.l #8,sp
		return FALSE;
    6f28:	   |   clr.w d0
    6f2a:	/--|-- bra.w 6fba <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    6f2e:	|  \-> move.l 1c990 <bigDataFile>,40(sp)
    6f36:	|      move.l 48(sp),d0
    6f3a:	|      add.l d0,d0
    6f3c:	|      add.l d0,d0
    6f3e:	|      move.l d0,d1
    6f40:	|      move.l 1c9a0 <startOfSubIndex>,d0
    6f46:	|      add.l d1,d0
    6f48:	|      move.l d0,36(sp)
    6f4c:	|      moveq #-1,d0
    6f4e:	|      move.l d0,32(sp)
    6f52:	|      move.l 1c9b0 <DOSBase>,d0
    6f58:	|      movea.l d0,a6
    6f5a:	|      move.l 40(sp),d1
    6f5e:	|      move.l 36(sp),d2
    6f62:	|      move.l 32(sp),d3
    6f66:	|      jsr -66(a6)
    6f6a:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    6f6e:	|      move.l 1c990 <bigDataFile>,24(sp)
    6f76:	|      move.l 1c990 <bigDataFile>,d0
    6f7c:	|      move.l d0,-(sp)
    6f7e:	|      jsr 718 <get4bytes>
    6f84:	|      addq.l #4,sp
    6f86:	|      move.l d0,20(sp)
    6f8a:	|      moveq #-1,d0
    6f8c:	|      move.l d0,16(sp)
    6f90:	|      move.l 1c9b0 <DOSBase>,d0
    6f96:	|      movea.l d0,a6
    6f98:	|      move.l 24(sp),d1
    6f9c:	|      move.l 20(sp),d2
    6fa0:	|      move.l 16(sp),d3
    6fa4:	|      jsr -66(a6)
    6fa8:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    6fac:	|      move.w #1,1c32c <sliceBusy>
    6fb4:	|      move.w 1c32c <sliceBusy>,d0
}
    6fba:	\----> movem.l (sp)+,d2-d3/a6
    6fbe:	       lea 32(sp),sp
    6fc2:	       rts

00006fc4 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    6fc4:	       lea -180(sp),sp
    6fc8:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    6fcc:	       tst.l 196(sp)
    6fd0:	/----- beq.s 7010 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    6fd2:	|      move.l 196(sp),1c990 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    6fda:	|      move.l 196(sp),168(sp)
    6fe0:	|      clr.l 164(sp)
    6fe4:	|      clr.l 160(sp)
    6fe8:	|      move.l 1c9b0 <DOSBase>,d0
    6fee:	|      movea.l d0,a6
    6ff0:	|      move.l 168(sp),d1
    6ff4:	|      move.l 164(sp),d2
    6ff8:	|      move.l 160(sp),d3
    6ffc:	|      jsr -66(a6)
    7000:	|      move.l d0,156(sp)
    7004:	|      move.l 156(sp),d0
    7008:	|      move.l d0,1c994 <startIndex>
    700e:	|  /-- bra.s 704a <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    7010:	\--|-> move.l 1c990 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    7018:	   |   move.l 196(sp),184(sp)
    701e:	   |   move.l 1c994 <startIndex>,d0
    7024:	   |   move.l d0,180(sp)
    7028:	   |   moveq #-1,d0
    702a:	   |   move.l d0,176(sp)
    702e:	   |   move.l 1c9b0 <DOSBase>,d0
    7034:	   |   movea.l d0,a6
    7036:	   |   move.l 184(sp),d1
    703a:	   |   move.l 180(sp),d2
    703e:	   |   move.l 176(sp),d3
    7042:	   |   jsr -66(a6)
    7046:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    704a:	   \-> clr.w 1c32c <sliceBusy>

	if (skipBefore > numLanguages) {
    7050:	       move.l 204(sp),d0
    7054:	       cmp.l 200(sp),d0
    7058:	   /-- bls.s 706c <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    705a:	   |   pea 18d64 <PutChar+0x1068>
    7060:	   |   jsr 17232 <KPrintF>
    7066:	   |   addq.l #4,sp
		skipBefore = 0;
    7068:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    706c:	   \-> move.l 200(sp),d0
    7070:	       sub.l 204(sp),d0
    7074:	       move.l d0,188(sp)
	while (skipBefore) {
    7078:	   /-- bra.s 70b6 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    707a:	/--|-> move.l 196(sp),24(sp)
    7080:	|  |   move.l 196(sp),-(sp)
    7084:	|  |   jsr 718 <get4bytes>
    708a:	|  |   addq.l #4,sp
    708c:	|  |   move.l d0,20(sp)
    7090:	|  |   moveq #-1,d0
    7092:	|  |   move.l d0,16(sp)
    7096:	|  |   move.l 1c9b0 <DOSBase>,d0
    709c:	|  |   movea.l d0,a6
    709e:	|  |   move.l 24(sp),d1
    70a2:	|  |   move.l 20(sp),d2
    70a6:	|  |   move.l 16(sp),d3
    70aa:	|  |   jsr -66(a6)
    70ae:	|  |   move.l d0,12(sp)
		skipBefore --;
    70b2:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    70b6:	|  \-> tst.l 204(sp)
    70ba:	\----- bne.s 707a <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    70bc:	       move.l 196(sp),152(sp)
    70c2:	       clr.l 148(sp)
    70c6:	       clr.l 144(sp)
    70ca:	       move.l 1c9b0 <DOSBase>,d0
    70d0:	       movea.l d0,a6
    70d2:	       move.l 152(sp),d1
    70d6:	       move.l 148(sp),d2
    70da:	       move.l 144(sp),d3
    70de:	       jsr -66(a6)
    70e2:	       move.l d0,140(sp)
    70e6:	       move.l 140(sp),d0
    70ea:	       addq.l #4,d0
    70ec:	       move.l d0,1c99c <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    70f2:	       move.l 196(sp),136(sp)
    70f8:	       move.l 196(sp),-(sp)
    70fc:	       jsr 718 <get4bytes>
    7102:	       addq.l #4,sp
    7104:	       move.l d0,132(sp)
    7108:	       moveq #-1,d0
    710a:	       move.l d0,128(sp)
    710e:	       move.l 1c9b0 <DOSBase>,d0
    7114:	       movea.l d0,a6
    7116:	       move.l 136(sp),d1
    711a:	       move.l 132(sp),d2
    711e:	       move.l 128(sp),d3
    7122:	       jsr -66(a6)
    7126:	       move.l d0,124(sp)

	while (skipAfter) {
    712a:	   /-- bra.s 7168 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    712c:	/--|-> move.l 196(sp),40(sp)
    7132:	|  |   move.l 196(sp),-(sp)
    7136:	|  |   jsr 718 <get4bytes>
    713c:	|  |   addq.l #4,sp
    713e:	|  |   move.l d0,36(sp)
    7142:	|  |   moveq #-1,d0
    7144:	|  |   move.l d0,32(sp)
    7148:	|  |   move.l 1c9b0 <DOSBase>,d0
    714e:	|  |   movea.l d0,a6
    7150:	|  |   move.l 40(sp),d1
    7154:	|  |   move.l 36(sp),d2
    7158:	|  |   move.l 32(sp),d3
    715c:	|  |   jsr -66(a6)
    7160:	|  |   move.l d0,28(sp)
		skipAfter --;
    7164:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    7168:	|  \-> tst.l 188(sp)
    716c:	\----- bne.s 712c <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    716e:	       move.l 196(sp),120(sp)
    7174:	       clr.l 116(sp)
    7178:	       clr.l 112(sp)
    717c:	       move.l 1c9b0 <DOSBase>,d0
    7182:	       movea.l d0,a6
    7184:	       move.l 120(sp),d1
    7188:	       move.l 116(sp),d2
    718c:	       move.l 112(sp),d3
    7190:	       jsr -66(a6)
    7194:	       move.l d0,108(sp)
    7198:	       move.l 108(sp),d0
    719c:	       addq.l #4,d0
    719e:	       move.l d0,1c9a0 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    71a4:	       move.l 196(sp),104(sp)
    71aa:	       move.l 196(sp),-(sp)
    71ae:	       jsr 718 <get4bytes>
    71b4:	       addq.l #4,sp
    71b6:	       move.l d0,100(sp)
    71ba:	       clr.l 96(sp)
    71be:	       move.l 1c9b0 <DOSBase>,d0
    71c4:	       movea.l d0,a6
    71c6:	       move.l 104(sp),d1
    71ca:	       move.l 100(sp),d2
    71ce:	       move.l 96(sp),d3
    71d2:	       jsr -66(a6)
    71d6:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    71da:	       move.l 196(sp),88(sp)
    71e0:	       clr.l 84(sp)
    71e4:	       clr.l 80(sp)
    71e8:	       move.l 1c9b0 <DOSBase>,d0
    71ee:	       movea.l d0,a6
    71f0:	       move.l 88(sp),d1
    71f4:	       move.l 84(sp),d2
    71f8:	       move.l 80(sp),d3
    71fc:	       jsr -66(a6)
    7200:	       move.l d0,76(sp)
    7204:	       move.l 76(sp),d0
    7208:	       addq.l #4,d0
    720a:	       move.l d0,1c9a4 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    7210:	       move.l 196(sp),72(sp)
    7216:	       move.l 196(sp),-(sp)
    721a:	       jsr 718 <get4bytes>
    7220:	       addq.l #4,sp
    7222:	       move.l d0,68(sp)
    7226:	       clr.l 64(sp)
    722a:	       move.l 1c9b0 <DOSBase>,d0
    7230:	       movea.l d0,a6
    7232:	       move.l 72(sp),d1
    7236:	       move.l 68(sp),d2
    723a:	       move.l 64(sp),d3
    723e:	       jsr -66(a6)
    7242:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    7246:	       move.l 196(sp),56(sp)
    724c:	       clr.l 52(sp)
    7250:	       clr.l 48(sp)
    7254:	       move.l 1c9b0 <DOSBase>,d0
    725a:	       movea.l d0,a6
    725c:	       move.l 56(sp),d1
    7260:	       move.l 52(sp),d2
    7264:	       move.l 48(sp),d3
    7268:	       jsr -66(a6)
    726c:	       move.l d0,44(sp)
    7270:	       move.l 44(sp),d0
    7274:	       move.l d0,1c998 <startOfDataIndex>
    727a:	       nop
    727c:	       movem.l (sp)+,d2-d3/a6
    7280:	       lea 180(sp),sp
    7284:	       rts

00007286 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    7286:	    lea -20(sp),sp
    728a:	    move.l a6,-(sp)
    728c:	    move.l d7,-(sp)
	APTR vbr = 0;
    728e:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    7292:	    move.w #20090,10(sp)
    7298:	    move.w #2049,12(sp)
    729e:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    72a4:	    movea.l 1c9a8 <SysBase>,a0
    72aa:	    move.w 296(a0),d0
    72ae:	    move.w d0,d0
    72b0:	    andi.l #65535,d0
    72b6:	    moveq #1,d1
    72b8:	    and.l d1,d0
    72ba:	/-- beq.s 72e8 <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    72bc:	|   lea 28(sp),a0
    72c0:	|   lea -18(a0),a0
    72c4:	|   move.l a0,20(sp)
    72c8:	|   move.l 1c9a8 <SysBase>,d0
    72ce:	|   movea.l d0,a6
    72d0:	|   move.l 20(sp),d7
    72d4:	|   exg d7,a5
    72d6:	|   jsr -30(a6)
    72da:	|   exg d7,a5
    72dc:	|   move.l d0,16(sp)
    72e0:	|   move.l 16(sp),d0
    72e4:	|   move.l d0,24(sp)

	return vbr;
    72e8:	\-> move.l 24(sp),d0
}
    72ec:	    move.l (sp)+,d7
    72ee:	    movea.l (sp)+,a6
    72f0:	    lea 20(sp),sp
    72f4:	    rts

000072f6 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    72f6:	movea.l 1c9ce <VBR>,a0
    72fc:	lea 108(a0),a0
    7300:	move.l 4(sp),(a0)
}
    7304:	nop
    7306:	rts

00007308 <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    7308:	movea.l 1c9ce <VBR>,a0
    730e:	move.l 108(a0),d0
}
    7312:	rts

00007314 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    7314:	       subq.l #8,sp
    7316:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    7318:	       pea 18dad <PutChar+0x10b1>
    731e:	       jsr 17232 <KPrintF>
    7324:	       addq.l #4,sp
	Forbid();
    7326:	       move.l 1c9a8 <SysBase>,d0
    732c:	       movea.l d0,a6
    732e:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    7332:	       pea 18dc5 <PutChar+0x10c9>
    7338:	       jsr 17232 <KPrintF>
    733e:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    7340:	       movea.l 1c9ac <custom>,a0
    7346:	       move.w 16(a0),d0
    734a:	       move.w d0,1c9cc <SystemADKCON>
	SystemInts=custom->intenar;
    7350:	       movea.l 1c9ac <custom>,a0
    7356:	       move.w 28(a0),d0
    735a:	       move.w d0,1c9c8 <SystemInts>
	SystemDMA=custom->dmaconr;
    7360:	       movea.l 1c9ac <custom>,a0
    7366:	       move.w 2(a0),d0
    736a:	       move.w d0,1c9ca <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    7370:	       movea.l 1c9b4 <GfxBase>,a0
    7376:	       move.l 34(a0),d0
    737a:	       move.l d0,1c9d6 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    7380:	       pea 18de3 <PutChar+0x10e7>
    7386:	       jsr 17232 <KPrintF>
    738c:	       addq.l #4,sp
	LoadView(0);
    738e:	       clr.l 4(sp)
    7392:	       move.l 1c9b4 <GfxBase>,d0
    7398:	       movea.l d0,a6
    739a:	       movea.l 4(sp),a1
    739e:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    73a2:	       pea 18df9 <PutChar+0x10fd>
    73a8:	       jsr 17232 <KPrintF>
    73ae:	       addq.l #4,sp
	WaitTOF();
    73b0:	       move.l 1c9b4 <GfxBase>,d0
    73b6:	       movea.l d0,a6
    73b8:	       jsr -270(a6)
	WaitTOF();
    73bc:	       move.l 1c9b4 <GfxBase>,d0
    73c2:	       movea.l d0,a6
    73c4:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    73c8:	       pea 18e0e <PutChar+0x1112>
    73ce:	       jsr 17232 <KPrintF>
    73d4:	       addq.l #4,sp
	WaitVbl();
    73d6:	       jsr 17166 <WaitVbl>
	WaitVbl();
    73dc:	       jsr 17166 <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    73e2:	       pea 18e23 <PutChar+0x1127>
    73e8:	       jsr 17232 <KPrintF>
    73ee:	       addq.l #4,sp
	OwnBlitter();
    73f0:	       move.l 1c9b4 <GfxBase>,d0
    73f6:	       movea.l d0,a6
    73f8:	       jsr -456(a6)
	WaitBlit();	
    73fc:	       move.l 1c9b4 <GfxBase>,d0
    7402:	       movea.l d0,a6
    7404:	       jsr -228(a6)
	Disable();
    7408:	       move.l 1c9a8 <SysBase>,d0
    740e:	       movea.l d0,a6
    7410:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    7414:	       pea 18e44 <PutChar+0x1148>
    741a:	       jsr 17232 <KPrintF>
    7420:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    7422:	       movea.l 1c9ac <custom>,a0
    7428:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    742e:	       pea 18e5b <PutChar+0x115f>
    7434:	       jsr 17232 <KPrintF>
    743a:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    743c:	       clr.l 8(sp)
    7440:	   /-- bra.s 745e <TakeSystem+0x14a>
		custom->color[a]=0;
    7442:	/--|-> movea.l 1c9ac <custom>,a0
    7448:	|  |   move.l 8(sp),d0
    744c:	|  |   addi.l #192,d0
    7452:	|  |   add.l d0,d0
    7454:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    745a:	|  |   addq.l #1,8(sp)
    745e:	|  \-> moveq #31,d0
    7460:	|      cmp.l 8(sp),d0
    7464:	\----- bge.s 7442 <TakeSystem+0x12e>

	WaitVbl();
    7466:	       jsr 17166 <WaitVbl>
	WaitVbl();
    746c:	       jsr 17166 <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    7472:	       pea 18e80 <PutChar+0x1184>
    7478:	       jsr 17232 <KPrintF>
    747e:	       addq.l #4,sp
	VBR=GetVBR();
    7480:	       jsr 7286 <GetVBR>
    7486:	       move.l d0,1c9ce <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    748c:	       jsr 7308 <GetInterruptHandler>
    7492:	       move.l d0,1c9d2 <SystemIrq>
}
    7498:	       nop
    749a:	       movea.l (sp)+,a6
    749c:	       addq.l #8,sp
    749e:	       rts

000074a0 <FreeSystem>:

void FreeSystem() { 
    74a0:	subq.l #4,sp
    74a2:	move.l a6,-(sp)
	WaitVbl();
    74a4:	jsr 17166 <WaitVbl>
	WaitBlit();
    74aa:	move.l 1c9b4 <GfxBase>,d0
    74b0:	movea.l d0,a6
    74b2:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    74b6:	movea.l 1c9ac <custom>,a0
    74bc:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    74c2:	movea.l 1c9ac <custom>,a0
    74c8:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    74ce:	movea.l 1c9ac <custom>,a0
    74d4:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    74da:	move.l 1c9d2 <SystemIrq>,d0
    74e0:	move.l d0,-(sp)
    74e2:	jsr 72f6 <SetInterruptHandler>
    74e8:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    74ea:	movea.l 1c9b4 <GfxBase>,a0
    74f0:	move.l 38(a0),d0
    74f4:	movea.l 1c9ac <custom>,a0
    74fa:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    74fe:	movea.l 1c9b4 <GfxBase>,a0
    7504:	move.l 50(a0),d0
    7508:	movea.l 1c9ac <custom>,a0
    750e:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    7512:	movea.l 1c9ac <custom>,a0
    7518:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    751e:	move.w 1c9ca <SystemDMA>,d0
    7524:	movea.l 1c9ac <custom>,a0
    752a:	ori.w #-32768,d0
    752e:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    7532:	move.w 1c9cc <SystemADKCON>,d0
    7538:	movea.l 1c9ac <custom>,a0
    753e:	ori.w #-32768,d0
    7542:	move.w d0,158(a0)

	WaitBlit();	
    7546:	move.l 1c9b4 <GfxBase>,d0
    754c:	movea.l d0,a6
    754e:	jsr -228(a6)
	DisownBlitter();
    7552:	move.l 1c9b4 <GfxBase>,d0
    7558:	movea.l d0,a6
    755a:	jsr -462(a6)
	Enable();
    755e:	move.l 1c9a8 <SysBase>,d0
    7564:	movea.l d0,a6
    7566:	jsr -126(a6)

	LoadView(ActiView);
    756a:	move.l 1c9d6 <ActiView>,4(sp)
    7572:	move.l 1c9b4 <GfxBase>,d0
    7578:	movea.l d0,a6
    757a:	movea.l 4(sp),a1
    757e:	jsr -222(a6)
	WaitTOF();
    7582:	move.l 1c9b4 <GfxBase>,d0
    7588:	movea.l d0,a6
    758a:	jsr -270(a6)
	WaitTOF();
    758e:	move.l 1c9b4 <GfxBase>,d0
    7594:	movea.l d0,a6
    7596:	jsr -270(a6)

	Permit();
    759a:	move.l 1c9a8 <SysBase>,d0
    75a0:	movea.l d0,a6
    75a2:	jsr -138(a6)
}
    75a6:	nop
    75a8:	movea.l (sp)+,a6
    75aa:	addq.l #4,sp
    75ac:	rts

000075ae <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    75ae:	    lea -132(sp),sp
    75b2:	    movem.l d2-d3/a6,-(sp)

	int *bp = 0x200;
    75b6:	    move.l #512,140(sp)
  	*bp = 0;
    75be:	    movea.l 140(sp),a0
    75c2:	    clr.l (a0)

	SysBase = *((struct ExecBase**)4UL);
    75c4:	    movea.w #4,a0
    75c8:	    move.l (a0),d0
    75ca:	    move.l d0,1c9a8 <SysBase>
	custom = (struct Custom*)0xdff000;	
    75d0:	    move.l #14675968,1c9ac <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    75da:	    move.l #102052,136(sp)
    75e2:	    clr.l 132(sp)
    75e6:	    move.l 1c9a8 <SysBase>,d0
    75ec:	    movea.l d0,a6
    75ee:	    movea.l 136(sp),a1
    75f2:	    move.l 132(sp),d0
    75f6:	    jsr -552(a6)
    75fa:	    move.l d0,128(sp)
    75fe:	    move.l 128(sp),d0
    7602:	    move.l d0,1c9b4 <GfxBase>
	if (!GfxBase)
    7608:	    move.l 1c9b4 <GfxBase>,d0
    760e:	/-- bne.s 7624 <main+0x76>
		Exit(0);
    7610:	|   clr.l 124(sp)
    7614:	|   move.l 1c9b0 <DOSBase>,d0
    761a:	|   movea.l d0,a6
    761c:	|   move.l 124(sp),d1
    7620:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    7624:	\-> move.l #102069,120(sp)
    762c:	    clr.l 116(sp)
    7630:	    move.l 1c9a8 <SysBase>,d0
    7636:	    movea.l d0,a6
    7638:	    movea.l 120(sp),a1
    763c:	    move.l 116(sp),d0
    7640:	    jsr -552(a6)
    7644:	    move.l d0,112(sp)
    7648:	    move.l 112(sp),d0
    764c:	    move.l d0,1c9b0 <DOSBase>
	if (!DOSBase)
    7652:	    move.l 1c9b0 <DOSBase>,d0
    7658:	/-- bne.s 766e <main+0xc0>
		Exit(0);
    765a:	|   clr.l 108(sp)
    765e:	|   move.l 1c9b0 <DOSBase>,d0
    7664:	|   movea.l d0,a6
    7666:	|   move.l 108(sp),d1
    766a:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    766e:	\-> move.l #102081,104(sp)
    7676:	    clr.l 100(sp)
    767a:	    move.l 1c9a8 <SysBase>,d0
    7680:	    movea.l d0,a6
    7682:	    movea.l 104(sp),a1
    7686:	    move.l 100(sp),d0
    768a:	    jsr -552(a6)
    768e:	    move.l d0,96(sp)
    7692:	    move.l 96(sp),d0
    7696:	    move.l d0,1c9b8 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    769c:	    move.l 1c9b8 <MathIeeeSingBasBase>,d0
    76a2:	/-- bne.s 76b8 <main+0x10a>
		Exit(0);	
    76a4:	|   clr.l 92(sp)
    76a8:	|   move.l 1c9b0 <DOSBase>,d0
    76ae:	|   movea.l d0,a6
    76b0:	|   move.l 92(sp),d1
    76b4:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    76b8:	\-> move.l #102105,88(sp)
    76c0:	    clr.l 84(sp)
    76c4:	    move.l 1c9a8 <SysBase>,d0
    76ca:	    movea.l d0,a6
    76cc:	    movea.l 88(sp),a1
    76d0:	    move.l 84(sp),d0
    76d4:	    jsr -552(a6)
    76d8:	    move.l d0,80(sp)
    76dc:	    move.l 80(sp),d0
    76e0:	    move.l d0,1c9bc <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    76e6:	    move.l 1c9bc <MathIeeeSingTransBase>,d0
    76ec:	/-- bne.s 7702 <main+0x154>
		Exit(0);
    76ee:	|   clr.l 76(sp)
    76f2:	|   move.l 1c9b0 <DOSBase>,d0
    76f8:	|   movea.l d0,a6
    76fa:	|   move.l 76(sp),d1
    76fe:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    7702:	\-> move.l #102131,72(sp)
    770a:	    clr.l 68(sp)
    770e:	    move.l 1c9a8 <SysBase>,d0
    7714:	    movea.l d0,a6
    7716:	    movea.l 72(sp),a1
    771a:	    move.l 68(sp),d0
    771e:	    jsr -552(a6)
    7722:	    move.l d0,64(sp)
    7726:	    move.l 64(sp),d0
    772a:	    move.l d0,1c9c4 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    7730:	    move.l 1c9c4 <MathIeeeDoubTransBase>,d0
    7736:	/-- bne.s 774c <main+0x19e>
		Exit(0);
    7738:	|   clr.l 60(sp)
    773c:	|   move.l 1c9b0 <DOSBase>,d0
    7742:	|   movea.l d0,a6
    7744:	|   move.l 60(sp),d1
    7748:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    774c:	\-> move.l #102157,56(sp)
    7754:	    clr.l 52(sp)
    7758:	    move.l 1c9a8 <SysBase>,d0
    775e:	    movea.l d0,a6
    7760:	    movea.l 56(sp),a1
    7764:	    move.l 52(sp),d0
    7768:	    jsr -552(a6)
    776c:	    move.l d0,48(sp)
    7770:	    move.l 48(sp),d0
    7774:	    move.l d0,1c9c0 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    777a:	    move.l 1c9c0 <MathIeeeDoubBasBase>,d0
    7780:	/-- bne.s 7796 <main+0x1e8>
		Exit(0);
    7782:	|   clr.l 44(sp)
    7786:	|   move.l 1c9b0 <DOSBase>,d0
    778c:	|   movea.l d0,a6
    778e:	|   move.l 44(sp),d1
    7792:	|   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 030!\n");
    7796:	\-> pea 18f25 <PutChar+0x1229>
    779c:	    jsr 17232 <KPrintF>
    77a2:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 030!\n", 25);
    77a4:	    move.l 1c9b0 <DOSBase>,d0
    77aa:	    movea.l d0,a6
    77ac:	    jsr -60(a6)
    77b0:	    move.l d0,40(sp)
    77b4:	    move.l 40(sp),d0
    77b8:	    move.l d0,36(sp)
    77bc:	    move.l #102213,32(sp)
    77c4:	    moveq #25,d0
    77c6:	    move.l d0,28(sp)
    77ca:	    move.l 1c9b0 <DOSBase>,d0
    77d0:	    movea.l d0,a6
    77d2:	    move.l 36(sp),d1
    77d6:	    move.l 32(sp),d2
    77da:	    move.l 28(sp),d3
    77de:	    jsr -48(a6)
    77e2:	    move.l d0,24(sp)
	Delay(50);
    77e6:	    moveq #50,d0
    77e8:	    move.l d0,20(sp)
    77ec:	    move.l 1c9b0 <DOSBase>,d0
    77f2:	    movea.l d0,a6
    77f4:	    move.l 20(sp),d1
    77f8:	    jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    77fc:	    pea 18f5e <PutChar+0x1262>
    7802:	    jsr 17232 <KPrintF>
    7808:	    addq.l #4,sp
	TakeSystem();
    780a:	    jsr 7314 <TakeSystem>
	KPrintF("System Taken\n");
    7810:	    pea 18f6d <PutChar+0x1271>
    7816:	    jsr 17232 <KPrintF>
    781c:	    addq.l #4,sp

	custom->dmacon = 0x87ff;
    781e:	    movea.l 1c9ac <custom>,a0
    7824:	    move.w #-30721,150(a0)
	WaitVbl();
    782a:	    jsr 17166 <WaitVbl>

	KPrintF("Starting main_sludge\n");
    7830:	    pea 18f7b <PutChar+0x127f>
    7836:	    jsr 17232 <KPrintF>
    783c:	    addq.l #4,sp
	main_sludge(argc, argv);	
    783e:	    move.l 152(sp),-(sp)
    7842:	    move.l 152(sp),-(sp)
    7846:	    jsr 4144 <main_sludge>
    784c:	    addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    784e:	    jsr 74a0 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    7854:	    move.l 1c9b0 <DOSBase>,16(sp)
    785c:	    move.l 1c9a8 <SysBase>,d0
    7862:	    movea.l d0,a6
    7864:	    movea.l 16(sp),a1
    7868:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    786c:	    move.l 1c9b4 <GfxBase>,12(sp)
    7874:	    move.l 1c9a8 <SysBase>,d0
    787a:	    movea.l d0,a6
    787c:	    movea.l 12(sp),a1
    7880:	    jsr -414(a6)
    7884:	    moveq #0,d0
}
    7886:	    movem.l (sp)+,d2-d3/a6
    788a:	    lea 132(sp),sp
    788e:	    rts

00007890 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    7890:	    lea -16(sp),sp
    7894:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    7896:	    moveq #8,d0
    7898:	    move.l d0,16(sp)
    789c:	    clr.l 12(sp)
    78a0:	    move.l 1c9a8 <SysBase>,d0
    78a6:	    movea.l d0,a6
    78a8:	    move.l 16(sp),d0
    78ac:	    move.l 12(sp),d1
    78b0:	    jsr -684(a6)
    78b4:	    move.l d0,8(sp)
    78b8:	    move.l 8(sp),d0
    78bc:	    move.l d0,4(sp)
	if (!newStat) {
    78c0:	/-- bne.s 78f0 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    78c2:	|   movea.l 1c32e <nowStatus>,a0
    78c8:	|   move.l (a0),d0
    78ca:	|   movea.l 4(sp),a0
    78ce:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    78d2:	|   pea 189d1 <PutChar+0xcd5>
    78d8:	|   jsr b8 <copyString>
    78de:	|   addq.l #4,sp
    78e0:	|   movea.l 4(sp),a0
    78e4:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    78e6:	|   movea.l 1c32e <nowStatus>,a0
    78ec:	|   move.l 4(sp),(a0)
	}
}
    78f0:	\-> nop
    78f2:	    movea.l (sp)+,a6
    78f4:	    lea 16(sp),sp
    78f8:	    rts

000078fa <clearStatusBar>:

void clearStatusBar () {
    78fa:	       lea -16(sp),sp
    78fe:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    7900:	       movea.l 1c32e <nowStatus>,a0
    7906:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    790a:	       movea.l 1c32e <nowStatus>,a0
    7910:	       moveq #-1,d0
    7912:	       move.l d0,6(a0)
	while (stat) {
    7916:	   /-- bra.s 7956 <clearStatusBar+0x5c>
		kill = stat;
    7918:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    791e:	|  |   movea.l 16(sp),a0
    7922:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    7928:	|  |   movea.l 12(sp),a0
    792c:	|  |   move.l (a0),8(sp)
    7930:	|  |   move.l 1c9a8 <SysBase>,d0
    7936:	|  |   movea.l d0,a6
    7938:	|  |   movea.l 8(sp),a1
    793c:	|  |   jsr -690(a6)
		FreeVec(kill);
    7940:	|  |   move.l 12(sp),4(sp)
    7946:	|  |   move.l 1c9a8 <SysBase>,d0
    794c:	|  |   movea.l d0,a6
    794e:	|  |   movea.l 4(sp),a1
    7952:	|  |   jsr -690(a6)
	while (stat) {
    7956:	|  \-> tst.l 16(sp)
    795a:	\----- bne.s 7918 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    795c:	       movea.l 1c32e <nowStatus>,a0
    7962:	       clr.l (a0)
}
    7964:	       nop
    7966:	       movea.l (sp)+,a6
    7968:	       lea 16(sp),sp
    796c:	       rts

0000796e <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    796e:	clr.l 1c9da <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    7974:	move.w #-1,1c9de <mainStatus+0x4>
	mainStatus.litStatus = -1;
    797c:	moveq #-1,d0
    797e:	move.l d0,1c9e0 <mainStatus+0x6>
	mainStatus.statusX = 10;
    7984:	moveq #10,d0
    7986:	move.l d0,1c9e4 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    798c:	movea.l 1c900 <winHeight>,a0
    7992:	lea -15(a0),a0
    7996:	move.l a0,d0
    7998:	move.l d0,1c9e8 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    799e:	nop
    79a0:	rts

000079a2 <killLastStatus>:

void killLastStatus () {
    79a2:	    lea -12(sp),sp
    79a6:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    79a8:	    movea.l 1c32e <nowStatus>,a0
    79ae:	    move.l (a0),d0
    79b0:	/-- beq.s 79fa <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    79b2:	|   movea.l 1c32e <nowStatus>,a0
    79b8:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    79bc:	|   movea.l 1c32e <nowStatus>,a0
    79c2:	|   movea.l 12(sp),a1
    79c6:	|   move.l 4(a1),d0
    79ca:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    79cc:	|   movea.l 12(sp),a0
    79d0:	|   move.l (a0),8(sp)
    79d4:	|   move.l 1c9a8 <SysBase>,d0
    79da:	|   movea.l d0,a6
    79dc:	|   movea.l 8(sp),a1
    79e0:	|   jsr -690(a6)
		FreeVec(kill);
    79e4:	|   move.l 12(sp),4(sp)
    79ea:	|   move.l 1c9a8 <SysBase>,d0
    79f0:	|   movea.l d0,a6
    79f2:	|   movea.l 4(sp),a1
    79f6:	|   jsr -690(a6)
	}
}
    79fa:	\-> nop
    79fc:	    movea.l (sp)+,a6
    79fe:	    lea 12(sp),sp
    7a02:	    rts

00007a04 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    7a04:	movea.l 1c32e <nowStatus>,a0
    7a0a:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    7a10:	movea.l 1c32e <nowStatus>,a0
    7a16:	move.l 8(sp),14(a0)
}
    7a1c:	nop
    7a1e:	rts

00007a20 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    7a20:	       lea -100(sp),sp
    7a24:	       move.l a6,-(sp)
    7a26:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    7a28:	       movea.l 1c32e <nowStatus>,a0
    7a2e:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    7a32:	       movea.l 1c32e <nowStatus>,a0
    7a38:	       move.w 4(a0),d0
    7a3c:	       move.w d0,d0
    7a3e:	       andi.l #65535,d0
    7a44:	       move.l 112(sp),-(sp)
    7a48:	       move.l d0,-(sp)
    7a4a:	       jsr 8d0 <put2bytes>
    7a50:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    7a52:	       movea.l 1c32e <nowStatus>,a0
    7a58:	       move.l 6(a0),d0
    7a5c:	       move.l d0,d0
    7a5e:	       movea.w d0,a0
    7a60:	       move.l 112(sp),-(sp)
    7a64:	       move.l a0,-(sp)
    7a66:	       jsr a9c <putSigned>
    7a6c:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    7a6e:	       movea.l 1c32e <nowStatus>,a0
    7a74:	       move.l 10(a0),d0
    7a78:	       move.l 112(sp),-(sp)
    7a7c:	       move.l d0,-(sp)
    7a7e:	       jsr 8d0 <put2bytes>
    7a84:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    7a86:	       movea.l 1c32e <nowStatus>,a0
    7a8c:	       move.l 14(a0),d0
    7a90:	       move.l 112(sp),-(sp)
    7a94:	       move.l d0,-(sp)
    7a96:	       jsr 8d0 <put2bytes>
    7a9c:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    7a9e:	       move.l 112(sp),100(sp)
    7aa4:	       movea.l 1c32e <nowStatus>,a0
    7aaa:	       move.l 18(a0),96(sp)
    7ab0:	       move.l 1c9b0 <DOSBase>,d0
    7ab6:	       movea.l d0,a6
    7ab8:	       move.l 100(sp),d1
    7abc:	       move.l 96(sp),d2
    7ac0:	       jsr -312(a6)
    7ac4:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    7ac8:	       move.l 112(sp),88(sp)
    7ace:	       movea.l 1c32e <nowStatus>,a0
    7ad4:	       move.l 22(a0),84(sp)
    7ada:	       move.l 1c9b0 <DOSBase>,d0
    7ae0:	       movea.l d0,a6
    7ae2:	       move.l 88(sp),d1
    7ae6:	       move.l 84(sp),d2
    7aea:	       jsr -312(a6)
    7aee:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    7af2:	       move.l 112(sp),76(sp)
    7af8:	       movea.l 1c32e <nowStatus>,a0
    7afe:	       move.l 26(a0),72(sp)
    7b04:	       move.l 1c9b0 <DOSBase>,d0
    7b0a:	       movea.l d0,a6
    7b0c:	       move.l 76(sp),d1
    7b10:	       move.l 72(sp),d2
    7b14:	       jsr -312(a6)
    7b18:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    7b1c:	       move.l 112(sp),64(sp)
    7b22:	       movea.l 1c32e <nowStatus>,a0
    7b28:	       move.l 30(a0),60(sp)
    7b2e:	       move.l 1c9b0 <DOSBase>,d0
    7b34:	       movea.l d0,a6
    7b36:	       move.l 64(sp),d1
    7b3a:	       move.l 60(sp),d2
    7b3e:	       jsr -312(a6)
    7b42:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    7b46:	       move.l 112(sp),52(sp)
    7b4c:	       movea.l 1c32e <nowStatus>,a0
    7b52:	       move.l 34(a0),48(sp)
    7b58:	       move.l 1c9b0 <DOSBase>,d0
    7b5e:	       movea.l d0,a6
    7b60:	       move.l 52(sp),d1
    7b64:	       move.l 48(sp),d2
    7b68:	       jsr -312(a6)
    7b6c:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    7b70:	       move.l 112(sp),40(sp)
    7b76:	       movea.l 1c32e <nowStatus>,a0
    7b7c:	       move.l 38(a0),36(sp)
    7b82:	       move.l 1c9b0 <DOSBase>,d0
    7b88:	       movea.l d0,a6
    7b8a:	       move.l 40(sp),d1
    7b8e:	       move.l 36(sp),d2
    7b92:	       jsr -312(a6)
    7b96:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    7b9a:	   /-- bra.s 7bde <saveStatusBars+0x1be>
		FPutC (fp,1);
    7b9c:	/--|-> move.l 112(sp),16(sp)
    7ba2:	|  |   moveq #1,d0
    7ba4:	|  |   move.l d0,12(sp)
    7ba8:	|  |   move.l 1c9b0 <DOSBase>,d0
    7bae:	|  |   movea.l d0,a6
    7bb0:	|  |   move.l 16(sp),d1
    7bb4:	|  |   move.l 12(sp),d2
    7bb8:	|  |   jsr -312(a6)
    7bbc:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    7bc0:	|  |   movea.l 104(sp),a0
    7bc4:	|  |   move.l (a0),d0
    7bc6:	|  |   move.l 112(sp),-(sp)
    7bca:	|  |   move.l d0,-(sp)
    7bcc:	|  |   jsr bd8 <writeString>
    7bd2:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    7bd4:	|  |   movea.l 104(sp),a0
    7bd8:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    7bde:	|  \-> tst.l 104(sp)
    7be2:	\----- bne.s 7b9c <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    7be4:	       move.l 112(sp),28(sp)
    7bea:	       clr.l 24(sp)
    7bee:	       move.l 1c9b0 <DOSBase>,d0
    7bf4:	       movea.l d0,a6
    7bf6:	       move.l 28(sp),d1
    7bfa:	       move.l 24(sp),d2
    7bfe:	       jsr -312(a6)
    7c02:	       move.l d0,20(sp)
}
    7c06:	       nop
    7c08:	       move.l (sp)+,d2
    7c0a:	       movea.l (sp)+,a6
    7c0c:	       lea 100(sp),sp
    7c10:	       rts

00007c12 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    7c12:	movea.l 1c32e <nowStatus>,a0
    7c18:	move.l 4(sp),6(a0)
}
    7c1e:	nop
    7c20:	rts

00007c22 <setStatusBar>:

void setStatusBar (char * txt) {
    7c22:	    subq.l #4,sp
    7c24:	    move.l a6,-(sp)
    7c26:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    7c28:	    movea.l 1c32e <nowStatus>,a0
    7c2e:	    move.l (a0),d0
    7c30:	/-- beq.s 7c64 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    7c32:	|   movea.l 1c32e <nowStatus>,a0
    7c38:	|   movea.l (a0),a0
    7c3a:	|   move.l (a0),8(sp)
    7c3e:	|   move.l 1c9a8 <SysBase>,d0
    7c44:	|   movea.l d0,a6
    7c46:	|   movea.l 8(sp),a1
    7c4a:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    7c4e:	|   movea.l 1c32e <nowStatus>,a0
    7c54:	|   movea.l (a0),a2
    7c56:	|   move.l 16(sp),-(sp)
    7c5a:	|   jsr b8 <copyString>
    7c60:	|   addq.l #4,sp
    7c62:	|   move.l d0,(a2)
	}
}
    7c64:	\-> nop
    7c66:	    movea.l (sp)+,a2
    7c68:	    movea.l (sp)+,a6
    7c6a:	    addq.l #4,sp
    7c6c:	    rts

00007c6e <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    7c6e:	       movea.l 1c32e <nowStatus>,a0
    7c74:	       move.l (a0),d0
    7c76:	/----- beq.s 7c84 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    7c78:	|      movea.l 1c32e <nowStatus>,a0
    7c7e:	|      movea.l (a0),a0
    7c80:	|      move.l (a0),d0
    7c82:	|  /-- bra.s 7c8a <statusBarText+0x1c>
	} else {
		return "";
    7c84:	\--|-> move.l #100817,d0
	}
    7c8a:	   \-> rts

00007c8c <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    7c8c:	       lea -28(sp),sp
    7c90:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    7c94:	       move.l 52(sp),-(sp)
    7c98:	       jsr 158b4 <stringWidth>
    7c9e:	       addq.l #4,sp
    7ca0:	       asr.l #1,d0
    7ca2:	       move.l d0,-(sp)
    7ca4:	       jsr 17664 <__floatsisf>
    7caa:	       addq.l #4,sp
    7cac:	       move.l d0,d1
    7cae:	       move.l 1c346 <cameraZoom>,d0
    7cb4:	       move.l d0,-(sp)
    7cb6:	       move.l d1,-(sp)
    7cb8:	       jsr 1751a <__divsf3>
    7cbe:	       addq.l #8,sp
    7cc0:	       move.l d0,-(sp)
    7cc2:	       jsr 175fc <__fixsfsi>
    7cc8:	       addq.l #4,sp
    7cca:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    7cce:	       move.l 56(sp),d0
    7cd2:	       sub.l 44(sp),d0
    7cd6:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    7cda:	       move.l 56(sp),d0
    7cde:	       add.l 44(sp),d0
    7ce2:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    7ce6:	       moveq #12,d0
    7ce8:	       move.l d0,32(sp)
    7cec:	       clr.l 28(sp)
    7cf0:	       move.l 1c9a8 <SysBase>,d0
    7cf6:	       movea.l d0,a6
    7cf8:	       move.l 32(sp),d0
    7cfc:	       move.l 28(sp),d1
    7d00:	       jsr -684(a6)
    7d04:	       move.l d0,24(sp)
    7d08:	       move.l 24(sp),d0
    7d0c:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    7d10:	       movea.l 1ca04 <speech>,a0
    7d16:	       move.l 4(a0),d0
    7d1a:	       movea.l 20(sp),a0
    7d1e:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    7d22:	       move.l 52(sp),-(sp)
    7d26:	       jsr b8 <copyString>
    7d2c:	       addq.l #4,sp
    7d2e:	       movea.l 20(sp),a0
    7d32:	       move.l d0,(a0)
	newLine -> x = xx1;
    7d34:	       movea.l 20(sp),a0
    7d38:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    7d3e:	       movea.l 1ca04 <speech>,a0
    7d44:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    7d4a:	       moveq #4,d0
    7d4c:	       cmp.l 40(sp),d0
    7d50:	   /-- blt.s 7d72 <addSpeechLine+0xe6>
    7d52:	   |   movea.l 60(sp),a0
    7d56:	   |   move.l (a0),d1
    7d58:	   |   moveq #5,d0
    7d5a:	   |   sub.l 40(sp),d0
    7d5e:	   |   cmp.l d1,d0
    7d60:	   +-- ble.s 7d72 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    7d62:	   |   moveq #5,d0
    7d64:	   |   sub.l 40(sp),d0
    7d68:	   |   movea.l 60(sp),a0
    7d6c:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    7d6e:	/--|-- bra.w 7e9e <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7d72:	|  \-> move.l 36(sp),-(sp)
    7d76:	|      jsr 17664 <__floatsisf>
    7d7c:	|      addq.l #4,sp
    7d7e:	|      move.l d0,d2
    7d80:	|      move.l 1c8fc <winWidth>,d0
    7d86:	|      move.l d0,-(sp)
    7d88:	|      jsr 1768c <__floatunsisf>
    7d8e:	|      addq.l #4,sp
    7d90:	|      move.l d0,d1
    7d92:	|      move.l 1c346 <cameraZoom>,d0
    7d98:	|      move.l d0,-(sp)
    7d9a:	|      move.l d1,-(sp)
    7d9c:	|      jsr 1751a <__divsf3>
    7da2:	|      addq.l #8,sp
    7da4:	|      move.l #1084227584,-(sp)
    7daa:	|      move.l d0,-(sp)
    7dac:	|      jsr 17958 <__subsf3>
    7db2:	|      addq.l #8,sp
    7db4:	|      move.l d0,-(sp)
    7db6:	|      move.l d2,-(sp)
    7db8:	|      jsr 1774c <__gesf2>
    7dbe:	|      addq.l #8,sp
    7dc0:	|      tst.l d0
    7dc2:	|  /-- bge.s 7dc8 <addSpeechLine+0x13c>
}
    7dc4:	+--|-- bra.w 7e9e <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7dc8:	|  \-> movea.l 60(sp),a0
    7dcc:	|      move.l (a0),d0
    7dce:	|      move.l d0,-(sp)
    7dd0:	|      jsr 17664 <__floatsisf>
    7dd6:	|      addq.l #4,sp
    7dd8:	|      move.l d0,-(sp)
    7dda:	|      jsr 17586 <__extendsfdf2>
    7de0:	|      addq.l #4,sp
    7de2:	|      move.l d0,d4
    7de4:	|      move.l d1,d5
    7de6:	|      move.l 1c8fc <winWidth>,d0
    7dec:	|      move.l d0,-(sp)
    7dee:	|      jsr 1768c <__floatunsisf>
    7df4:	|      addq.l #4,sp
    7df6:	|      move.l d0,d1
    7df8:	|      move.l 1c346 <cameraZoom>,d0
    7dfe:	|      move.l d0,-(sp)
    7e00:	|      move.l d1,-(sp)
    7e02:	|      jsr 1751a <__divsf3>
    7e08:	|      addq.l #8,sp
    7e0a:	|      move.l d0,-(sp)
    7e0c:	|      jsr 17586 <__extendsfdf2>
    7e12:	|      addq.l #4,sp
    7e14:	|      clr.l -(sp)
    7e16:	|      move.l #1075052544,-(sp)
    7e1c:	|      move.l d1,-(sp)
    7e1e:	|      move.l d0,-(sp)
    7e20:	|      jsr 178f6 <__subdf3>
    7e26:	|      lea 16(sp),sp
    7e2a:	|      move.l d0,d2
    7e2c:	|      move.l d1,d3
    7e2e:	|      move.l 36(sp),-(sp)
    7e32:	|      jsr 17624 <__floatsidf>
    7e38:	|      addq.l #4,sp
    7e3a:	|      move.l d1,-(sp)
    7e3c:	|      move.l d0,-(sp)
    7e3e:	|      move.l d3,-(sp)
    7e40:	|      move.l d2,-(sp)
    7e42:	|      jsr 178f6 <__subdf3>
    7e48:	|      lea 16(sp),sp
    7e4c:	|      move.l d1,-(sp)
    7e4e:	|      move.l d0,-(sp)
    7e50:	|      move.l d5,-(sp)
    7e52:	|      move.l d4,-(sp)
    7e54:	|      jsr 17782 <__gtdf2>
    7e5a:	|      lea 16(sp),sp
    7e5e:	|      tst.l d0
    7e60:	|  /-- bgt.s 7e64 <addSpeechLine+0x1d8>
}
    7e62:	+--|-- bra.s 7e9e <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    7e64:	|  \-> move.l 1c8fc <winWidth>,d0
    7e6a:	|      move.l d0,-(sp)
    7e6c:	|      jsr 1768c <__floatunsisf>
    7e72:	|      addq.l #4,sp
    7e74:	|      move.l d0,d1
    7e76:	|      move.l 1c346 <cameraZoom>,d0
    7e7c:	|      move.l d0,-(sp)
    7e7e:	|      move.l d1,-(sp)
    7e80:	|      jsr 1751a <__divsf3>
    7e86:	|      addq.l #8,sp
    7e88:	|      move.l d0,-(sp)
    7e8a:	|      jsr 175fc <__fixsfsi>
    7e90:	|      addq.l #4,sp
    7e92:	|      subq.l #5,d0
    7e94:	|      sub.l 36(sp),d0
    7e98:	|      movea.l 60(sp),a0
    7e9c:	|      move.l d0,(a0)
}
    7e9e:	\----> nop
    7ea0:	       movem.l (sp)+,d2-d5/a6
    7ea4:	       lea 28(sp),sp
    7ea8:	       rts

00007eaa <initSpeech>:


void initSpeech () {
    7eaa:	       lea -12(sp),sp
    7eae:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    7eb0:	       moveq #20,d0
    7eb2:	       move.l d0,12(sp)
    7eb6:	       clr.l 8(sp)
    7eba:	       move.l 1c9a8 <SysBase>,d0
    7ec0:	       movea.l d0,a6
    7ec2:	       move.l 12(sp),d0
    7ec6:	       move.l 8(sp),d1
    7eca:	       jsr -684(a6)
    7ece:	       move.l d0,4(sp)
    7ed2:	       move.l 4(sp),d0
    7ed6:	       move.l d0,1ca04 <speech>
	if (speech) {
    7edc:	       move.l 1ca04 <speech>,d0
    7ee2:	/----- beq.s 7f0e <initSpeech+0x64>
		speech -> currentTalker = NULL;
    7ee4:	|      movea.l 1ca04 <speech>,a0
    7eea:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    7eec:	|      movea.l 1ca04 <speech>,a0
    7ef2:	|      clr.l 4(a0)
		speech -> speechY = 0;
    7ef6:	|      movea.l 1ca04 <speech>,a0
    7efc:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    7f00:	|      movea.l 1ca04 <speech>,a0
    7f06:	|      moveq #-1,d0
    7f08:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    7f0c:	|  /-- bra.s 7f1c <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    7f0e:	\--|-> pea 18fb8 <PutChar+0x12bc>
    7f14:	   |   jsr 17232 <KPrintF>
    7f1a:	   |   addq.l #4,sp
}
    7f1c:	   \-> nop
    7f1e:	       movea.l (sp)+,a6
    7f20:	       lea 12(sp),sp
    7f24:	       rts

00007f26 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    7f26:	       movea.l 1ca04 <speech>,a0
    7f2c:	       move.l 4(a0),d0
    7f30:	/----- beq.s 7f3e <isThereAnySpeechGoingOn+0x18>
    7f32:	|      movea.l 1ca04 <speech>,a0
    7f38:	|      move.l 16(a0),d0
    7f3c:	|  /-- bra.s 7f40 <isThereAnySpeechGoingOn+0x1a>
    7f3e:	\--|-> moveq #-1,d0
}
    7f40:	   \-> rts

00007f42 <killAllSpeech>:

void killAllSpeech () {
    7f42:	       lea -12(sp),sp
    7f46:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    7f48:	       movea.l 1ca04 <speech>,a0
    7f4e:	       move.l 12(a0),d0
    7f52:	       moveq #-1,d1
    7f54:	       cmp.l d0,d1
    7f56:	   /-- beq.s 7f64 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    7f58:	   |   movea.l 1ca04 <speech>,a0
    7f5e:	   |   moveq #-1,d0
    7f60:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    7f64:	   \-> movea.l 1ca04 <speech>,a0
    7f6a:	       move.l (a0),d0
    7f6c:	/----- beq.w 7ff8 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    7f70:	|      movea.l 1ca04 <speech>,a0
    7f76:	|      move.l (a0),d1
    7f78:	|      lea -132(sp),sp
    7f7c:	|      move.l sp,d0
    7f7e:	|      movea.w #132,a0
    7f82:	|      move.l a0,-(sp)
    7f84:	|      move.l d1,-(sp)
    7f86:	|      move.l d0,-(sp)
    7f88:	|      jsr 171e6 <memcpy>
    7f8e:	|      lea 12(sp),sp
    7f92:	|      jsr ab3c <makeSilent>
    7f98:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    7f9c:	|      movea.l 1ca04 <speech>,a0
    7fa2:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    7fa4:	+----- bra.s 7ff8 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    7fa6:	|  /-> movea.l 1ca04 <speech>,a0
    7fac:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    7fb2:	|  |   movea.l 1ca04 <speech>,a0
    7fb8:	|  |   movea.l 4(a0),a1
    7fbc:	|  |   movea.l 1ca04 <speech>,a0
    7fc2:	|  |   move.l 4(a1),d0
    7fc6:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    7fca:	|  |   movea.l 12(sp),a0
    7fce:	|  |   move.l (a0),8(sp)
    7fd2:	|  |   move.l 1c9a8 <SysBase>,d0
    7fd8:	|  |   movea.l d0,a6
    7fda:	|  |   movea.l 8(sp),a1
    7fde:	|  |   jsr -690(a6)
		FreeVec(killMe);
    7fe2:	|  |   move.l 12(sp),4(sp)
    7fe8:	|  |   move.l 1c9a8 <SysBase>,d0
    7fee:	|  |   movea.l d0,a6
    7ff0:	|  |   movea.l 4(sp),a1
    7ff4:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    7ff8:	\--|-> movea.l 1ca04 <speech>,a0
    7ffe:	   |   move.l 4(a0),d0
    8002:	   \-- bne.s 7fa6 <killAllSpeech+0x64>
	}
}
    8004:	       nop
    8006:	       nop
    8008:	       movea.l (sp)+,a6
    800a:	       lea 12(sp),sp
    800e:	       rts

00008010 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    8010:	pea 2 <_start+0x2>
    8014:	move.l 8(sp),-(sp)
    8018:	jsr 8170 <setFrames>
    801e:	addq.l #8,sp
}
    8020:	nop
    8022:	rts

00008024 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    8024:	       lea -52(sp),sp
    8028:	       move.l a6,-(sp)
    802a:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    802c:	       movea.l 64(sp),a0
    8030:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    8036:	       move.l 1c332 <speechSpeed>,d0
    803c:	       move.l 68(sp),-(sp)
    8040:	       move.l d0,-(sp)
    8042:	       jsr a46 <putFloat>
    8048:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    804a:	       movea.l 64(sp),a0
    804e:	       move.l 8(a0),d0
    8052:	       move.l 68(sp),-(sp)
    8056:	       move.l d0,-(sp)
    8058:	       jsr 8d0 <put2bytes>
    805e:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    8060:	       movea.l 64(sp),a0
    8064:	       move.l 16(a0),d0
    8068:	       move.l 68(sp),-(sp)
    806c:	       move.l d0,-(sp)
    806e:	       jsr 8d0 <put2bytes>
    8074:	       addq.l #8,sp
		if (sS -> currentTalker) {
    8076:	       movea.l 64(sp),a0
    807a:	       move.l (a0),d0
    807c:	   /-- beq.s 80c0 <saveSpeech+0x9c>
			FPutC (fp, 1);
    807e:	   |   move.l 68(sp),40(sp)
    8084:	   |   moveq #1,d0
    8086:	   |   move.l d0,36(sp)
    808a:	   |   move.l 1c9b0 <DOSBase>,d0
    8090:	   |   movea.l d0,a6
    8092:	   |   move.l 40(sp),d1
    8096:	   |   move.l 36(sp),d2
    809a:	   |   jsr -312(a6)
    809e:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    80a2:	   |   movea.l 64(sp),a0
    80a6:	   |   movea.l (a0),a0
    80a8:	   |   movea.l 114(a0),a0
    80ac:	   |   move.l 4(a0),d0
    80b0:	   |   move.l 68(sp),-(sp)
    80b4:	   |   move.l d0,-(sp)
    80b6:	   |   jsr 8d0 <put2bytes>
    80bc:	   |   addq.l #8,sp
    80be:	/--|-- bra.s 813c <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    80c0:	|  \-> move.l 68(sp),52(sp)
    80c6:	|      clr.l 48(sp)
    80ca:	|      move.l 1c9b0 <DOSBase>,d0
    80d0:	|      movea.l d0,a6
    80d2:	|      move.l 52(sp),d1
    80d6:	|      move.l 48(sp),d2
    80da:	|      jsr -312(a6)
    80de:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    80e2:	+----- bra.s 813c <saveSpeech+0x118>
			FPutC (fp, 1);
    80e4:	|  /-> move.l 68(sp),16(sp)
    80ea:	|  |   moveq #1,d0
    80ec:	|  |   move.l d0,12(sp)
    80f0:	|  |   move.l 1c9b0 <DOSBase>,d0
    80f6:	|  |   movea.l d0,a6
    80f8:	|  |   move.l 16(sp),d1
    80fc:	|  |   move.l 12(sp),d2
    8100:	|  |   jsr -312(a6)
    8104:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    8108:	|  |   movea.l 56(sp),a0
    810c:	|  |   move.l (a0),d0
    810e:	|  |   move.l 68(sp),-(sp)
    8112:	|  |   move.l d0,-(sp)
    8114:	|  |   jsr bd8 <writeString>
    811a:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    811c:	|  |   movea.l 56(sp),a0
    8120:	|  |   move.l 8(a0),d0
    8124:	|  |   move.l 68(sp),-(sp)
    8128:	|  |   move.l d0,-(sp)
    812a:	|  |   jsr 8d0 <put2bytes>
    8130:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    8132:	|  |   movea.l 56(sp),a0
    8136:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    813c:	\--|-> tst.l 56(sp)
    8140:	   \-- bne.s 80e4 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    8142:	       move.l 68(sp),28(sp)
    8148:	       clr.l 24(sp)
    814c:	       move.l 1c9b0 <DOSBase>,d0
    8152:	       movea.l d0,a6
    8154:	       move.l 28(sp),d1
    8158:	       move.l 24(sp),d2
    815c:	       jsr -312(a6)
    8160:	       move.l d0,20(sp)
}
    8164:	       nop
    8166:	       move.l (sp)+,d2
    8168:	       movea.l (sp)+,a6
    816a:	       lea 52(sp),sp
    816e:	       rts

00008170 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    8170:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    8172:	movea.l 8(sp),a0
    8176:	movea.l 80(a0),a0
    817a:	move.l (a0),d2
    817c:	movea.l 8(sp),a0
    8180:	movea.l 80(a0),a0
    8184:	move.l 4(a0),d0
    8188:	move.l 12(sp),-(sp)
    818c:	move.l d0,-(sp)
    818e:	jsr 17be6 <__mulsi3>
    8194:	addq.l #8,sp
    8196:	move.l d0,d1
    8198:	movea.l 8(sp),a0
    819c:	move.l 106(a0),d0
    81a0:	add.l d1,d0
    81a2:	add.l d0,d0
    81a4:	add.l d0,d0
    81a6:	movea.l d2,a0
    81a8:	adda.l d0,a0
    81aa:	move.l (a0),d0
    81ac:	movea.l 8(sp),a0
    81b0:	move.l d0,72(a0)
}
    81b4:	nop
    81b6:	move.l (sp)+,d2
    81b8:	rts

000081ba <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    81ba:	       lea -20(sp),sp
    81be:	       move.l d2,-(sp)
    81c0:	       move.l 40(sp),d0
    81c4:	       move.w d0,d0
    81c6:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    81ca:	       movea.l 1ca04 <speech>,a0
    81d0:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    81d6:	       move.l 32(sp),-(sp)
    81da:	       jsr a626 <findPerson>
    81e0:	       addq.l #4,sp
    81e2:	       move.l d0,16(sp)
    if (thisPerson) {
    81e6:	   /-- beq.s 820c <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    81e8:	   |   movea.w 6(sp),a0
    81ec:	   |   move.l a0,-(sp)
    81ee:	   |   move.l 40(sp),-(sp)
    81f2:	   |   move.l 24(sp),-(sp)
    81f6:	   |   move.l 40(sp),-(sp)
    81fa:	   |   jsr 82d2 <wrapSpeechPerson>
    8200:	   |   lea 16(sp),sp
    8204:	   |   move.l d0,20(sp)
    8208:	/--|-- bra.w 82c6 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    820c:	|  \-> move.l 32(sp),-(sp)
    8210:	|      jsr 15a14 <getRegionForObject>
    8216:	|      addq.l #4,sp
    8218:	|      move.l d0,12(sp)
        if (thisRegion) {
    821c:	|  /-- beq.s 8288 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    821e:	|  |   movea.l 12(sp),a0
    8222:	|  |   movea.l 28(a0),a0
    8226:	|  |   move.l 28(a0),d0
    822a:	|  |   movea.l 12(sp),a0
    822e:	|  |   movea.l 4(a0),a1
    8232:	|  |   movea.l 12(sp),a0
    8236:	|  |   movea.l 28(a0),a0
    823a:	|  |   move.l 20(a0),d1
    823e:	|  |   movea.l a1,a0
    8240:	|  |   suba.l d1,a0
    8242:	|  |   move.l 1ca66 <cameraY>,d1
    8248:	|  |   movea.l a0,a1
    824a:	|  |   suba.l d1,a1
    824c:	|  |   movea.l 12(sp),a0
    8250:	|  |   move.l (a0),d2
    8252:	|  |   movea.l 12(sp),a0
    8256:	|  |   move.l 8(a0),d1
    825a:	|  |   add.l d2,d1
    825c:	|  |   move.l d1,d2
    825e:	|  |   asr.l #1,d2
    8260:	|  |   move.l 1ca62 <cameraX>,d1
    8266:	|  |   movea.l d2,a0
    8268:	|  |   suba.l d1,a0
    826a:	|  |   move.l 36(sp),-(sp)
    826e:	|  |   move.l d0,-(sp)
    8270:	|  |   move.l a1,-(sp)
    8272:	|  |   move.l a0,-(sp)
    8274:	|  |   move.l 44(sp),-(sp)
    8278:	|  |   jsr 83f0 <wrapSpeechXY>
    827e:	|  |   lea 20(sp),sp
    8282:	|  |   move.l d0,20(sp)
    8286:	+--|-- bra.s 82c6 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    8288:	|  \-> move.l 32(sp),-(sp)
    828c:	|      jsr d51c <findObjectType>
    8292:	|      addq.l #4,sp
    8294:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    8298:	|      movea.l 8(sp),a0
    829c:	|      move.l 28(a0),d1
    82a0:	|      move.l 1c8fc <winWidth>,d0
    82a6:	|      lsr.l #1,d0
    82a8:	|      move.l 36(sp),-(sp)
    82ac:	|      move.l d1,-(sp)
    82ae:	|      pea a <_start+0xa>
    82b2:	|      move.l d0,-(sp)
    82b4:	|      move.l 44(sp),-(sp)
    82b8:	|      jsr 83f0 <wrapSpeechXY>
    82be:	|      lea 20(sp),sp
    82c2:	|      move.l d0,20(sp)
        }
    }
    return i;
    82c6:	\----> move.l 20(sp),d0
}
    82ca:	       move.l (sp)+,d2
    82cc:	       lea 20(sp),sp
    82d0:	       rts

000082d2 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    82d2:	    subq.l #8,sp
    82d4:	    movem.l d2-d4,-(sp)
    82d8:	    move.l 36(sp),d0
    82dc:	    move.w d0,d0
    82de:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    82e2:	    movea.l 28(sp),a0
    82e6:	    movea.l 114(a0),a0
    82ea:	    move.l 28(a0),d2
    82ee:	    movea.l 28(sp),a0
    82f2:	    move.l 4(a0),d3
    82f6:	    move.l 1ca66 <cameraY>,d0
    82fc:	    move.l d0,-(sp)
    82fe:	    jsr 17664 <__floatsisf>
    8304:	    addq.l #4,sp
    8306:	    move.l d0,-(sp)
    8308:	    move.l d3,-(sp)
    830a:	    jsr 17958 <__subsf3>
    8310:	    addq.l #8,sp
    8312:	    move.l d0,d3
    8314:	    movea.l 28(sp),a0
    8318:	    move.l 32(a0),d4
    831c:	    movea.l 28(sp),a0
    8320:	    move.l 20(a0),d1
    8324:	    movea.l 28(sp),a0
    8328:	    move.l 24(a0),d0
    832c:	    sub.l d0,d1
    832e:	    move.l d1,-(sp)
    8330:	    jsr 17664 <__floatsisf>
    8336:	    addq.l #4,sp
    8338:	    move.l d0,-(sp)
    833a:	    move.l d4,-(sp)
    833c:	    jsr 17716 <__mulsf3>
    8342:	    addq.l #8,sp
    8344:	    move.l d0,-(sp)
    8346:	    move.l d3,-(sp)
    8348:	    jsr 17958 <__subsf3>
    834e:	    addq.l #8,sp
    8350:	    move.l d0,d3
    8352:	    movea.l 28(sp),a0
    8356:	    movea.l 114(a0),a0
    835a:	    move.l 20(a0),d0
    835e:	    move.l d0,-(sp)
    8360:	    jsr 17664 <__floatsisf>
    8366:	    addq.l #4,sp
    8368:	    move.l d0,-(sp)
    836a:	    move.l d3,-(sp)
    836c:	    jsr 17958 <__subsf3>
    8372:	    addq.l #8,sp
    8374:	    move.l d0,-(sp)
    8376:	    jsr 175fc <__fixsfsi>
    837c:	    addq.l #4,sp
    837e:	    move.l d0,d4
    8380:	    movea.l 28(sp),a0
    8384:	    move.l (a0),d3
    8386:	    move.l 1ca62 <cameraX>,d0
    838c:	    move.l d0,-(sp)
    838e:	    jsr 17664 <__floatsisf>
    8394:	    addq.l #4,sp
    8396:	    move.l d0,-(sp)
    8398:	    move.l d3,-(sp)
    839a:	    jsr 17958 <__subsf3>
    83a0:	    addq.l #8,sp
    83a2:	    move.l d0,-(sp)
    83a4:	    jsr 175fc <__fixsfsi>
    83aa:	    addq.l #4,sp
    83ac:	    move.l 32(sp),-(sp)
    83b0:	    move.l d2,-(sp)
    83b2:	    move.l d4,-(sp)
    83b4:	    move.l d0,-(sp)
    83b6:	    move.l 40(sp),-(sp)
    83ba:	    jsr 83f0 <wrapSpeechXY>
    83c0:	    lea 20(sp),sp
    83c4:	    move.l d0,16(sp)
	if (animPerson) {
    83c8:	    tst.w 14(sp)
    83cc:	/-- beq.s 83e4 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    83ce:	|   move.l 28(sp),-(sp)
    83d2:	|   jsr 8010 <makeTalker>
    83d8:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    83da:	|   movea.l 1ca04 <speech>,a0
    83e0:	|   move.l 28(sp),(a0)
	}
	return i;
    83e4:	\-> move.l 16(sp),d0
}
    83e8:	    movem.l (sp)+,d2-d4
    83ec:	    addq.l #8,sp
    83ee:	    rts

000083f0 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    83f0:	                   lea -16(sp),sp
    83f4:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    83f8:	                   clr.l 16(sp)
    killAllSpeech();
    83fc:	                   jsr 7f42 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    8402:	                   move.l 36(sp),-(sp)
    8406:	                   jsr 13cbe <strlen>
    840c:	                   addq.l #4,sp
    840e:	                   movea.l d0,a0
    8410:	                   lea 20(a0),a0
    8414:	                   move.l a0,-(sp)
    8416:	                   jsr 1768c <__floatunsisf>
    841c:	                   addq.l #4,sp
    841e:	                   move.l d0,d1
    8420:	                   move.l 1c332 <speechSpeed>,d0
    8426:	                   move.l d0,-(sp)
    8428:	                   move.l d1,-(sp)
    842a:	                   jsr 17716 <__mulsf3>
    8430:	                   addq.l #8,sp
    8432:	                   move.l d0,-(sp)
    8434:	                   jsr 175fc <__fixsfsi>
    843a:	                   addq.l #4,sp
    843c:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    8440:	               /-- bgt.s 8448 <wrapSpeechXY+0x58>
    8442:	               |   moveq #1,d0
    8444:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    8448:	               \-> moveq #-1,d1
    844a:	                   cmp.l 52(sp),d1
    844e:	               /-- beq.s 848e <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    8450:	               |   move.l 1ca76 <speechMode>,d0
    8456:	               +-- ble.s 848e <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    8458:	               |   clr.l -(sp)
    845a:	               |   move.l 56(sp),-(sp)
    845e:	               |   jsr d1e6 <startSound>
    8464:	               |   addq.l #8,sp
    8466:	               |   tst.w d0
    8468:	               +-- beq.s 848e <wrapSpeechXY+0x9e>
                speechTime = -10;
    846a:	               |   moveq #-10,d0
    846c:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    8470:	               |   movea.l 1ca04 <speech>,a0
    8476:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    847c:	               |   move.l 1ca76 <speechMode>,d0
    8482:	               |   moveq #2,d1
    8484:	               |   cmp.l d0,d1
    8486:	               +-- bne.s 848e <wrapSpeechXY+0x9e>
    8488:	               |   moveq #-10,d0
    848a:	/--------------|-- bra.w 8714 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    848e:	|              \-> movea.l 1ca04 <speech>,a0
    8494:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    849a:	|     /----------- bra.w 854e <wrapSpeechXY+0x15e>
        a = wrap;
    849e:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    84a4:	|  |  |        /-- bra.s 84b4 <wrapSpeechXY+0xc4>
            a--;
    84a6:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    84aa:	|  |  |  |     +-- bne.s 84b4 <wrapSpeechXY+0xc4>
                a = wrap;
    84ac:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    84b2:	|  |  |  |  /--|-- bra.s 84c6 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    84b4:	|  |  |  |  |  \-> move.l 28(sp),d0
    84b8:	|  |  |  |  |      movea.l 36(sp),a0
    84bc:	|  |  |  |  |      adda.l d0,a0
    84be:	|  |  |  |  |      move.b (a0),d0
    84c0:	|  |  |  |  |      cmpi.b #32,d0
    84c4:	|  |  |  \--|----- bne.s 84a6 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    84c6:	|  |  |     \----> move.l 28(sp),d0
    84ca:	|  |  |            movea.l 36(sp),a0
    84ce:	|  |  |            adda.l d0,a0
    84d0:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    84d2:	|  |  |            lea 16(sp),a0
    84d6:	|  |  |            move.l a0,-(sp)
    84d8:	|  |  |            move.l 44(sp),-(sp)
    84dc:	|  |  |            move.l 44(sp),-(sp)
    84e0:	|  |  |            jsr 7c8c <addSpeechLine>
    84e6:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    84ea:	|  |  |            move.l 28(sp),d0
    84ee:	|  |  |            movea.l 36(sp),a0
    84f2:	|  |  |            adda.l d0,a0
    84f4:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    84f8:	|  |  |            move.l 28(sp),d0
    84fc:	|  |  |            addq.l #1,d0
    84fe:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    8502:	|  |  |            move.l 44(sp),-(sp)
    8506:	|  |  |            jsr 17664 <__floatsisf>
    850c:	|  |  |            addq.l #4,sp
    850e:	|  |  |            move.l d0,d2
    8510:	|  |  |            move.l 1caa0 <fontHeight>,d0
    8516:	|  |  |            move.l d0,-(sp)
    8518:	|  |  |            jsr 17664 <__floatsisf>
    851e:	|  |  |            addq.l #4,sp
    8520:	|  |  |            move.l d0,d1
    8522:	|  |  |            move.l 1c346 <cameraZoom>,d0
    8528:	|  |  |            move.l d0,-(sp)
    852a:	|  |  |            move.l d1,-(sp)
    852c:	|  |  |            jsr 1751a <__divsf3>
    8532:	|  |  |            addq.l #8,sp
    8534:	|  |  |            move.l d0,-(sp)
    8536:	|  |  |            move.l d2,-(sp)
    8538:	|  |  |            jsr 17958 <__subsf3>
    853e:	|  |  |            addq.l #8,sp
    8540:	|  |  |            move.l d0,-(sp)
    8542:	|  |  |            jsr 175fc <__fixsfsi>
    8548:	|  |  |            addq.l #4,sp
    854a:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    854e:	|  |  \----------> move.l 36(sp),-(sp)
    8552:	|  |               jsr 13cbe <strlen>
    8558:	|  |               addq.l #4,sp
    855a:	|  |               move.l d0,d1
    855c:	|  |               move.l 48(sp),d0
    8560:	|  |               cmp.l d1,d0
    8562:	|  \-------------- bcs.w 849e <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    8566:	|                  lea 16(sp),a0
    856a:	|                  move.l a0,-(sp)
    856c:	|                  move.l 44(sp),-(sp)
    8570:	|                  move.l 44(sp),-(sp)
    8574:	|                  jsr 7c8c <addSpeechLine>
    857a:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    857e:	|                  move.l 44(sp),-(sp)
    8582:	|                  jsr 17664 <__floatsisf>
    8588:	|                  addq.l #4,sp
    858a:	|                  move.l d0,d2
    858c:	|                  move.l 1caa0 <fontHeight>,d0
    8592:	|                  move.l d0,-(sp)
    8594:	|                  jsr 17664 <__floatsisf>
    859a:	|                  addq.l #4,sp
    859c:	|                  move.l d0,d1
    859e:	|                  move.l 1c346 <cameraZoom>,d0
    85a4:	|                  move.l d0,-(sp)
    85a6:	|                  move.l d1,-(sp)
    85a8:	|                  jsr 1751a <__divsf3>
    85ae:	|                  addq.l #8,sp
    85b0:	|                  move.l d0,-(sp)
    85b2:	|                  move.l d2,-(sp)
    85b4:	|                  jsr 17958 <__subsf3>
    85ba:	|                  addq.l #8,sp
    85bc:	|                  move.l d0,-(sp)
    85be:	|                  jsr 175fc <__fixsfsi>
    85c4:	|                  addq.l #4,sp
    85c6:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    85ca:	|              /-- bpl.s 85e8 <wrapSpeechXY+0x1f8>
    85cc:	|              |   movea.l 1ca04 <speech>,a0
    85d2:	|              |   move.l 8(a0),d0
    85d6:	|              |   movea.l 1ca04 <speech>,a0
    85dc:	|              |   sub.l 44(sp),d0
    85e0:	|              |   move.l d0,8(a0)
    85e4:	|           /--|-- bra.w 86d6 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    85e8:	|           |  \-> movea.l 1ca04 <speech>,a0
    85ee:	|           |      move.l 8(a0),d0
    85f2:	|           |      move.l d0,-(sp)
    85f4:	|           |      jsr 17664 <__floatsisf>
    85fa:	|           |      addq.l #4,sp
    85fc:	|           |      move.l d0,d2
    85fe:	|           |      move.l 1ca66 <cameraY>,d0
    8604:	|           |      move.l d0,-(sp)
    8606:	|           |      jsr 17664 <__floatsisf>
    860c:	|           |      addq.l #4,sp
    860e:	|           |      move.l d0,d3
    8610:	|           |      move.l 1c900 <winHeight>,d4
    8616:	|           |      move.l 1caa0 <fontHeight>,d0
    861c:	|           |      pea 3 <_start+0x3>
    8620:	|           |      move.l d0,-(sp)
    8622:	|           |      jsr 17c64 <__divsi3>
    8628:	|           |      addq.l #8,sp
    862a:	|           |      move.l d4,d1
    862c:	|           |      sub.l d0,d1
    862e:	|           |      move.l d1,-(sp)
    8630:	|           |      jsr 1768c <__floatunsisf>
    8636:	|           |      addq.l #4,sp
    8638:	|           |      move.l d0,d1
    863a:	|           |      move.l 1c346 <cameraZoom>,d0
    8640:	|           |      move.l d0,-(sp)
    8642:	|           |      move.l d1,-(sp)
    8644:	|           |      jsr 1751a <__divsf3>
    864a:	|           |      addq.l #8,sp
    864c:	|           |      move.l d0,-(sp)
    864e:	|           |      move.l d3,-(sp)
    8650:	|           |      jsr 17420 <__addsf3>
    8656:	|           |      addq.l #8,sp
    8658:	|           |      move.l d0,-(sp)
    865a:	|           |      move.l d2,-(sp)
    865c:	|           |      jsr 177d0 <__gtsf2>
    8662:	|           |      addq.l #8,sp
    8664:	|           |      tst.l d0
    8666:	|           +----- ble.s 86d6 <wrapSpeechXY+0x2e6>
    8668:	|           |      move.l 1ca66 <cameraY>,d0
    866e:	|           |      move.l d0,-(sp)
    8670:	|           |      jsr 17664 <__floatsisf>
    8676:	|           |      addq.l #4,sp
    8678:	|           |      move.l d0,d2
    867a:	|           |      move.l 1c900 <winHeight>,d3
    8680:	|           |      move.l 1caa0 <fontHeight>,d0
    8686:	|           |      pea 3 <_start+0x3>
    868a:	|           |      move.l d0,-(sp)
    868c:	|           |      jsr 17c64 <__divsi3>
    8692:	|           |      addq.l #8,sp
    8694:	|           |      move.l d3,d1
    8696:	|           |      sub.l d0,d1
    8698:	|           |      move.l d1,-(sp)
    869a:	|           |      jsr 1768c <__floatunsisf>
    86a0:	|           |      addq.l #4,sp
    86a2:	|           |      move.l d0,d1
    86a4:	|           |      move.l 1c346 <cameraZoom>,d0
    86aa:	|           |      move.l d0,-(sp)
    86ac:	|           |      move.l d1,-(sp)
    86ae:	|           |      jsr 1751a <__divsf3>
    86b4:	|           |      addq.l #8,sp
    86b6:	|           |      move.l d0,-(sp)
    86b8:	|           |      move.l d2,-(sp)
    86ba:	|           |      jsr 17420 <__addsf3>
    86c0:	|           |      addq.l #8,sp
    86c2:	|           |      movea.l 1ca04 <speech>,a2
    86c8:	|           |      move.l d0,-(sp)
    86ca:	|           |      jsr 175fc <__fixsfsi>
    86d0:	|           |      addq.l #4,sp
    86d2:	|           |      move.l d0,8(a2)

    if (offset) {
    86d6:	|           \----> move.l 16(sp),d0
    86da:	|        /-------- beq.s 8710 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    86dc:	|        |         movea.l 1ca04 <speech>,a0
    86e2:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    86e8:	|        |     /-- bra.s 870a <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    86ea:	|        |  /--|-> movea.l 20(sp),a0
    86ee:	|        |  |  |   move.l 8(a0),d1
    86f2:	|        |  |  |   move.l 16(sp),d0
    86f6:	|        |  |  |   add.l d1,d0
    86f8:	|        |  |  |   movea.l 20(sp),a0
    86fc:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    8700:	|        |  |  |   movea.l 20(sp),a0
    8704:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    870a:	|        |  |  \-> tst.l 20(sp)
    870e:	|        |  \----- bne.s 86ea <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    8710:	|        \-------> move.l 24(sp),d0
}
    8714:	\----------------> movem.l (sp)+,d2-d4/a2
    8718:	                   lea 16(sp),sp
    871c:	                   rts

0000871e <killZBuffer>:

#define EMULATOR

struct zBufferData *zBuffer;

void killZBuffer () {
    871e:	       lea -12(sp),sp
    8722:	       move.l a6,-(sp)
	struct zBufferData *zbuffercursor =  zBuffer;
    8724:	       move.l 1ca08 <zBuffer>,12(sp)

	while(zbuffercursor) {
    872c:	   /-- bra.s 8754 <killZBuffer+0x36>
		struct zBufferData *deleteme = zbuffercursor;
    872e:	/--|-> move.l 12(sp),8(sp)
		zbuffercursor = zbuffercursor->nextPanel;
    8734:	|  |   movea.l 12(sp),a0
    8738:	|  |   move.l 24(a0),12(sp)
		FreeVec(deleteme);
    873e:	|  |   move.l 8(sp),4(sp)
    8744:	|  |   move.l 1c9a8 <SysBase>,d0
    874a:	|  |   movea.l d0,a6
    874c:	|  |   movea.l 4(sp),a1
    8750:	|  |   jsr -690(a6)
	while(zbuffercursor) {
    8754:	|  \-> tst.l 12(sp)
    8758:	\----- bne.s 872e <killZBuffer+0x10>
	}
	zBuffer = NULL;
    875a:	       clr.l 1ca08 <zBuffer>
}
    8760:	       nop
    8762:	       movea.l (sp)+,a6
    8764:	       lea 12(sp),sp
    8768:	       rts

0000876a <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    876a:	                lea -304(sp),sp
    876e:	                movem.l d2-d4/a2/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    8772:	                clr.l 314(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();	
    8776:	                jsr 871e <killZBuffer>
	
	if (! openFileFromNum (y)) return FALSE;
    877c:	                move.l 328(sp),d0
    8780:	                move.l d0,-(sp)
    8782:	                jsr 6d7c <openFileFromNum>
    8788:	                addq.l #4,sp
    878a:	                tst.l d0
    878c:	            /-- bne.s 8794 <setZBuffer+0x2a>
    878e:	            |   clr.w d0
    8790:	/-----------|-- bra.w 8a52 <setZBuffer+0x2e8>
	
	if (FGetC (bigDataFile) != 'a' || FGetC (bigDataFile) != 's' || FGetC (bigDataFile) != 'z' || FGetC (bigDataFile) != 'b') 
    8794:	|           \-> move.l 1c990 <bigDataFile>,310(sp)
    879c:	|               move.l 1c9b0 <DOSBase>,d0
    87a2:	|               movea.l d0,a6
    87a4:	|               move.l 310(sp),d1
    87a8:	|               jsr -306(a6)
    87ac:	|               move.l d0,306(sp)
    87b0:	|               move.l 306(sp),d0
    87b4:	|               moveq #97,d1
    87b6:	|               cmp.l d0,d1
    87b8:	|        /----- bne.s 882c <setZBuffer+0xc2>
    87ba:	|        |      move.l 1c990 <bigDataFile>,302(sp)
    87c2:	|        |      move.l 1c9b0 <DOSBase>,d0
    87c8:	|        |      movea.l d0,a6
    87ca:	|        |      move.l 302(sp),d1
    87ce:	|        |      jsr -306(a6)
    87d2:	|        |      move.l d0,298(sp)
    87d6:	|        |      move.l 298(sp),d0
    87da:	|        |      moveq #115,d1
    87dc:	|        |      cmp.l d0,d1
    87de:	|        +----- bne.s 882c <setZBuffer+0xc2>
    87e0:	|        |      move.l 1c990 <bigDataFile>,294(sp)
    87e8:	|        |      move.l 1c9b0 <DOSBase>,d0
    87ee:	|        |      movea.l d0,a6
    87f0:	|        |      move.l 294(sp),d1
    87f4:	|        |      jsr -306(a6)
    87f8:	|        |      move.l d0,290(sp)
    87fc:	|        |      move.l 290(sp),d0
    8800:	|        |      moveq #122,d1
    8802:	|        |      cmp.l d0,d1
    8804:	|        +----- bne.s 882c <setZBuffer+0xc2>
    8806:	|        |      move.l 1c990 <bigDataFile>,286(sp)
    880e:	|        |      move.l 1c9b0 <DOSBase>,d0
    8814:	|        |      movea.l d0,a6
    8816:	|        |      move.l 286(sp),d1
    881a:	|        |      jsr -306(a6)
    881e:	|        |      move.l d0,282(sp)
    8822:	|        |      move.l 282(sp),d0
    8826:	|        |      moveq #98,d1
    8828:	|        |      cmp.l d0,d1
    882a:	|        |  /-- beq.s 8840 <setZBuffer+0xd6>
	{ 
		 KPrintF("Not a Z-buffer file");
    882c:	|        \--|-> pea 18ff5 <PutChar+0x12f9>
    8832:	|           |   jsr 17232 <KPrintF>
    8838:	|           |   addq.l #4,sp
		 return FALSE;
    883a:	|           |   clr.w d0
    883c:	+-----------|-- bra.w 8a52 <setZBuffer+0x2e8>
	}

	UWORD numelements = FGetC(bigDataFile);
    8840:	|           \-> move.l 1c990 <bigDataFile>,278(sp)
    8848:	|               move.l 1c9b0 <DOSBase>,d0
    884e:	|               movea.l d0,a6
    8850:	|               move.l 278(sp),d1
    8854:	|               jsr -306(a6)
    8858:	|               move.l d0,274(sp)
    885c:	|               move.l 274(sp),d0
    8860:	|               move.w d0,322(sp)

	UWORD size;
	UWORD count;

	zBuffer = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8864:	|               moveq #28,d0
    8866:	|               move.l d0,270(sp)
    886a:	|               clr.l 266(sp)
    886e:	|               move.l 1c9a8 <SysBase>,d0
    8874:	|               movea.l d0,a6
    8876:	|               move.l 270(sp),d0
    887a:	|               move.l 266(sp),d1
    887e:	|               jsr -684(a6)
    8882:	|               move.l d0,262(sp)
    8886:	|               move.l 262(sp),d0
    888a:	|               move.l d0,1ca08 <zBuffer>

	struct zBufferData *currentitem;
	currentitem = zBuffer;
    8890:	|               move.l 1ca08 <zBuffer>,318(sp)

	while(numelements--)
    8898:	|     /-------- bra.w 8a38 <setZBuffer+0x2ce>
	{		
		currentitem->width = get2bytes (bigDataFile);
    889c:	|  /--|-------> move.l 1c990 <bigDataFile>,d0
    88a2:	|  |  |         move.l d0,-(sp)
    88a4:	|  |  |         jsr 6bc <get2bytes>
    88aa:	|  |  |         addq.l #4,sp
    88ac:	|  |  |         movea.l 318(sp),a0
    88b0:	|  |  |         move.l d0,(a0)
		currentitem->height = get2bytes (bigDataFile);
    88b2:	|  |  |         move.l 1c990 <bigDataFile>,d0
    88b8:	|  |  |         move.l d0,-(sp)
    88ba:	|  |  |         jsr 6bc <get2bytes>
    88c0:	|  |  |         addq.l #4,sp
    88c2:	|  |  |         movea.l 318(sp),a0
    88c6:	|  |  |         move.l d0,4(a0)

		currentitem->topx = get2bytes (bigDataFile);
    88ca:	|  |  |         move.l 1c990 <bigDataFile>,d0
    88d0:	|  |  |         move.l d0,-(sp)
    88d2:	|  |  |         jsr 6bc <get2bytes>
    88d8:	|  |  |         addq.l #4,sp
    88da:	|  |  |         movea.l 318(sp),a0
    88de:	|  |  |         move.l d0,8(a0)
		currentitem->topy = get2bytes (bigDataFile);
    88e2:	|  |  |         move.l 1c990 <bigDataFile>,d0
    88e8:	|  |  |         move.l d0,-(sp)
    88ea:	|  |  |         jsr 6bc <get2bytes>
    88f0:	|  |  |         addq.l #4,sp
    88f2:	|  |  |         movea.l 318(sp),a0
    88f6:	|  |  |         move.l d0,12(a0)
		currentitem->yz = get2bytes (bigDataFile);
    88fa:	|  |  |         move.l 1c990 <bigDataFile>,d0
    8900:	|  |  |         move.l d0,-(sp)
    8902:	|  |  |         jsr 6bc <get2bytes>
    8908:	|  |  |         addq.l #4,sp
    890a:	|  |  |         movea.l 318(sp),a0
    890e:	|  |  |         move.l d0,16(a0)

		UWORD size = currentitem->width * currentitem->height / 8;
    8912:	|  |  |         movea.l 318(sp),a0
    8916:	|  |  |         move.l (a0),d0
    8918:	|  |  |         movea.l 318(sp),a0
    891c:	|  |  |         move.l 4(a0),d1
    8920:	|  |  |         move.l d1,-(sp)
    8922:	|  |  |         move.l d0,-(sp)
    8924:	|  |  |         jsr 17be6 <__mulsi3>
    892a:	|  |  |         addq.l #8,sp
    892c:	|  |  |         tst.l d0
    892e:	|  |  |     /-- bge.s 8932 <setZBuffer+0x1c8>
    8930:	|  |  |     |   addq.l #7,d0
    8932:	|  |  |     \-> asr.l #3,d0
    8934:	|  |  |         move.w d0,260(sp)
		currentitem->bitplane = AllocVec( size, MEMF_CHIP);
    8938:	|  |  |         moveq #0,d0
    893a:	|  |  |         move.w 260(sp),d0
    893e:	|  |  |         move.l d0,256(sp)
    8942:	|  |  |         moveq #2,d1
    8944:	|  |  |         move.l d1,252(sp)
    8948:	|  |  |         move.l 1c9a8 <SysBase>,d0
    894e:	|  |  |         movea.l d0,a6
    8950:	|  |  |         move.l 256(sp),d0
    8954:	|  |  |         move.l 252(sp),d1
    8958:	|  |  |         jsr -684(a6)
    895c:	|  |  |         move.l d0,248(sp)
    8960:	|  |  |         move.l 248(sp),d0
    8964:	|  |  |         movea.l 318(sp),a0
    8968:	|  |  |         move.l d0,20(a0)
		count = FRead( bigDataFile, currentitem->bitplane, 1, size);				
    896c:	|  |  |         move.l 1c990 <bigDataFile>,244(sp)
    8974:	|  |  |         movea.l 318(sp),a0
    8978:	|  |  |         move.l 20(a0),240(sp)
    897e:	|  |  |         moveq #1,d0
    8980:	|  |  |         move.l d0,236(sp)
    8984:	|  |  |         moveq #0,d0
    8986:	|  |  |         move.w 260(sp),d0
    898a:	|  |  |         move.l d0,232(sp)
    898e:	|  |  |         move.l 1c9b0 <DOSBase>,d0
    8994:	|  |  |         movea.l d0,a6
    8996:	|  |  |         move.l 244(sp),d1
    899a:	|  |  |         move.l 240(sp),d2
    899e:	|  |  |         move.l 236(sp),d3
    89a2:	|  |  |         move.l 232(sp),d4
    89a6:	|  |  |         jsr -324(a6)
    89aa:	|  |  |         move.l d0,228(sp)
    89ae:	|  |  |         move.l 228(sp),d0
    89b2:	|  |  |         move.w d0,226(sp)

		if(numelements > 0) {
    89b6:	|  |  |         tst.w 322(sp)
    89ba:	|  |  |  /----- beq.s 89f6 <setZBuffer+0x28c>
			currentitem->nextPanel = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    89bc:	|  |  |  |      moveq #28,d1
    89be:	|  |  |  |      move.l d1,222(sp)
    89c2:	|  |  |  |      clr.l 218(sp)
    89c6:	|  |  |  |      move.l 1c9a8 <SysBase>,d0
    89cc:	|  |  |  |      movea.l d0,a6
    89ce:	|  |  |  |      move.l 222(sp),d0
    89d2:	|  |  |  |      move.l 218(sp),d1
    89d6:	|  |  |  |      jsr -684(a6)
    89da:	|  |  |  |      move.l d0,214(sp)
    89de:	|  |  |  |      move.l 214(sp),d0
    89e2:	|  |  |  |      movea.l 318(sp),a0
    89e6:	|  |  |  |      move.l d0,24(a0)
			currentitem = currentitem->nextPanel;
    89ea:	|  |  |  |      movea.l 318(sp),a0
    89ee:	|  |  |  |      move.l 24(a0),318(sp)
    89f4:	|  |  |  |  /-- bra.s 89fe <setZBuffer+0x294>
		} else {
			currentitem->nextPanel = NULL;
    89f6:	|  |  |  \--|-> movea.l 318(sp),a0
    89fa:	|  |  |     |   clr.l 24(a0)
		}
		#ifdef EMULATOR  
  			debug_register_bitmap(currentitem->bitplane, "zBuffer.bpl", currentitem->width, currentitem->height , 1, 0);
    89fe:	|  |  |     \-> movea.l 318(sp),a0
    8a02:	|  |  |         move.l 4(a0),d0
    8a06:	|  |  |         move.l d0,d0
    8a08:	|  |  |         movea.w d0,a1
    8a0a:	|  |  |         movea.l 318(sp),a0
    8a0e:	|  |  |         move.l (a0),d0
    8a10:	|  |  |         move.l d0,d0
    8a12:	|  |  |         movea.w d0,a0
    8a14:	|  |  |         movea.l 318(sp),a2
    8a18:	|  |  |         move.l 20(a2),d0
    8a1c:	|  |  |         clr.l -(sp)
    8a1e:	|  |  |         pea 1 <_start+0x1>
    8a22:	|  |  |         move.l a1,-(sp)
    8a24:	|  |  |         move.l a0,-(sp)
    8a26:	|  |  |         pea 19009 <PutChar+0x130d>
    8a2c:	|  |  |         move.l d0,-(sp)
    8a2e:	|  |  |         jsr 1731a <debug_register_bitmap>
    8a34:	|  |  |         lea 24(sp),sp
	while(numelements--)
    8a38:	|  |  \-------> move.w 322(sp),d0
    8a3c:	|  |            move.w d0,d1
    8a3e:	|  |            subq.w #1,d1
    8a40:	|  |            move.w d1,322(sp)
    8a44:	|  |            tst.w d0
    8a46:	|  \----------- bne.w 889c <setZBuffer+0x132>
		#endif  
		
	}


	finishAccess ();
    8a4a:	|               jsr 6c74 <finishAccess>
	
	return TRUE;
    8a50:	|               moveq #1,d0
}
    8a52:	\-------------> movem.l (sp)+,d2-d4/a2/a6
    8a56:	                lea 304(sp),sp
    8a5a:	                rts

00008a5c <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    8a5c:	          lea -32(sp),sp
    8a60:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    8a62:	          move.l 40(sp),d0
    8a66:	          addq.l #8,d0
    8a68:	          move.l d0,24(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8a6c:	          clr.l 32(sp)
    8a70:	   /----- bra.s 8ab6 <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    8a72:	/--|----> movea.l 24(sp),a0
    8a76:	|  |      movea.l 8(a0),a0
    8a7a:	|  |      move.l 32(sp),d1
    8a7e:	|  |      move.l d1,d0
    8a80:	|  |      lsl.l #3,d0
    8a82:	|  |      sub.l d1,d0
    8a84:	|  |      add.l d0,d0
    8a86:	|  |      add.l d0,d0
    8a88:	|  |      adda.l d0,a0
    8a8a:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    8a8e:	|  |      movea.l 8(sp),a0
    8a92:	|  |      move.l 24(a0),d0
    8a96:	|  |  /-- beq.s 8ab2 <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    8a98:	|  |  |   movea.l 8(sp),a0
    8a9c:	|  |  |   move.l 24(a0),4(sp)
    8aa2:	|  |  |   move.l 1c9a8 <SysBase>,d0
    8aa8:	|  |  |   movea.l d0,a6
    8aaa:	|  |  |   movea.l 4(sp),a1
    8aae:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8ab2:	|  |  \-> addq.l #1,32(sp)
    8ab6:	|  \----> movea.l 24(sp),a0
    8aba:	|         move.l (a0),d0
    8abc:	|         cmp.l 32(sp),d0
    8ac0:	\-------- bgt.s 8a72 <forgetSpriteBank+0x16>
		}		
	}

	FreeVec(spritebanktoforget->sprites);	
    8ac2:	          movea.l 24(sp),a0
    8ac6:	          move.l 8(a0),20(sp)
    8acc:	          move.l 1c9a8 <SysBase>,d0
    8ad2:	          movea.l d0,a6
    8ad4:	          movea.l 20(sp),a1
    8ad8:	          jsr -690(a6)
	
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    8adc:	          move.l 1cac0 <allLoadedBanks>,28(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8ae4:	      /-- bra.s 8af0 <forgetSpriteBank+0x94>
	{
		precedingbank = precedingbank->next;
    8ae6:	   /--|-> movea.l 28(sp),a0
    8aea:	   |  |   move.l 22(a0),28(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8af0:	   |  \-> movea.l 28(sp),a0
    8af4:	   |      movea.l 22(a0),a0
    8af8:	   |      move.l (a0),d1
    8afa:	   |      movea.l 40(sp),a0
    8afe:	   |      move.l (a0),d0
    8b00:	   |      cmp.l d1,d0
    8b02:	   |  /-- beq.s 8b0a <forgetSpriteBank+0xae>
    8b04:	   |  |   tst.l 28(sp)
    8b08:	   \--|-- bne.s 8ae6 <forgetSpriteBank+0x8a>
	}	

	if(precedingbank)
    8b0a:	      \-> tst.l 28(sp)
    8b0e:	   /----- beq.s 8b38 <forgetSpriteBank+0xdc>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    8b10:	   |      movea.l 40(sp),a0
    8b14:	   |      move.l 22(a0),d0
    8b18:	   |      movea.l 28(sp),a0
    8b1c:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    8b20:	   |      move.l 40(sp),12(sp)
    8b26:	   |      move.l 1c9a8 <SysBase>,d0
    8b2c:	   |      movea.l d0,a6
    8b2e:	   |      movea.l 12(sp),a1
    8b32:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    8b36:	   |  /-- bra.s 8b5e <forgetSpriteBank+0x102>
		allLoadedBanks = allLoadedBanks->next;
    8b38:	   \--|-> movea.l 1cac0 <allLoadedBanks>,a0
    8b3e:	      |   move.l 22(a0),d0
    8b42:	      |   move.l d0,1cac0 <allLoadedBanks>
		FreeVec( forgetme);
    8b48:	      |   move.l 40(sp),16(sp)
    8b4e:	      |   move.l 1c9a8 <SysBase>,d0
    8b54:	      |   movea.l d0,a6
    8b56:	      |   movea.l 16(sp),a1
    8b5a:	      |   jsr -690(a6)
}
    8b5e:	      \-> nop
    8b60:	          movea.l (sp)+,a6
    8b62:	          lea 32(sp),sp
    8b66:	          rts

00008b68 <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere) {
    8b68:	                      lea -84(sp),sp
    8b6c:	                      movem.l d2-d4/a2/a6,-(sp)

	KPrintF("loadSpriteBank: Starting\n");
    8b70:	                      pea 19015 <PutChar+0x1319>
    8b76:	                      jsr 17232 <KPrintF>
    8b7c:	                      addq.l #4,sp

	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    8b7e:	                      clr.l 94(sp)
    8b82:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    8b86:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    8b8a:	                      move.l 108(sp),-(sp)
    8b8e:	                      jsr 6d7c <openFileFromNum>
    8b94:	                      addq.l #4,sp
    8b96:	                      tst.l d0
    8b98:	                  /-- bne.s 8bae <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    8b9a:	                  |   pea 1902f <PutChar+0x1333>
    8ba0:	                  |   jsr 17232 <KPrintF>
    8ba6:	                  |   addq.l #4,sp
		return FALSE;
    8ba8:	                  |   clr.w d0
    8baa:	/-----------------|-- bra.w 8fa2 <loadSpriteBank+0x43a>
	}

	get2bytes(bigDataFile); // Ignore first 2 bytes
    8bae:	|                 \-> move.l 1c990 <bigDataFile>,d0
    8bb4:	|                     move.l d0,-(sp)
    8bb6:	|                     jsr 6bc <get2bytes>
    8bbc:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    8bbe:	|                     move.l 1c990 <bigDataFile>,82(sp)
    8bc6:	|                     move.l 1c9b0 <DOSBase>,d0
    8bcc:	|                     movea.l d0,a6
    8bce:	|                     move.l 82(sp),d1
    8bd2:	|                     jsr -306(a6)
    8bd6:	|                     move.l d0,78(sp)
    8bda:	|                     move.l 78(sp),d0
    8bde:	|                     movea.l 112(sp),a0
    8be2:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    8be6:	|                     move.l 1c990 <bigDataFile>,d0
    8bec:	|                     move.l d0,-(sp)
    8bee:	|                     jsr 6bc <get2bytes>
    8bf4:	|                     addq.l #4,sp
    8bf6:	|                     move.l d0,74(sp)

	if (total <= 0) {
    8bfa:	|                 /-- bgt.s 8c10 <loadSpriteBank+0xa8>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    8bfc:	|                 |   pea 1905d <PutChar+0x1361>
    8c02:	|                 |   jsr 17232 <KPrintF>
    8c08:	|                 |   addq.l #4,sp
		return FALSE;
    8c0a:	|                 |   clr.w d0
    8c0c:	+-----------------|-- bra.w 8fa2 <loadSpriteBank+0x43a>
	}
	if (loadhere->type == 3)
    8c10:	|                 \-> movea.l 112(sp),a0
    8c14:	|                     move.l 4(a0),d0
    8c18:	|                     moveq #3,d1
    8c1a:	|                     cmp.l d0,d1
    8c1c:	|                 /-- bne.s 8c2a <loadSpriteBank+0xc2>
	{
		loadhere->isFont = TRUE;
    8c1e:	|                 |   movea.l 112(sp),a0
    8c22:	|                 |   move.w #1,12(a0)
    8c28:	|              /--|-- bra.s 8c4c <loadSpriteBank+0xe4>
	}
	else if (loadhere->type > 3) {
    8c2a:	|              |  \-> movea.l 112(sp),a0
    8c2e:	|              |      move.l 4(a0),d0
    8c32:	|              |      moveq #3,d1
    8c34:	|              |      cmp.l d0,d1
    8c36:	|              +----- bge.s 8c4c <loadSpriteBank+0xe4>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    8c38:	|              |      pea 1909d <PutChar+0x13a1>
    8c3e:	|              |      jsr 17232 <KPrintF>
    8c44:	|              |      addq.l #4,sp
		return FALSE;
    8c46:	|              |      clr.w d0
    8c48:	+--------------|----- bra.w 8fa2 <loadSpriteBank+0x43a>
	}

	loadhere->total = total;
    8c4c:	|              \----> movea.l 112(sp),a0
    8c50:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    8c54:	|                     move.l 74(sp),d1
    8c58:	|                     move.l d1,d0
    8c5a:	|                     lsl.l #3,d0
    8c5c:	|                     sub.l d1,d0
    8c5e:	|                     add.l d0,d0
    8c60:	|                     add.l d0,d0
    8c62:	|                     move.l d0,70(sp)
    8c66:	|                     clr.l 66(sp)
    8c6a:	|                     move.l 1c9a8 <SysBase>,d0
    8c70:	|                     movea.l d0,a6
    8c72:	|                     move.l 70(sp),d0
    8c76:	|                     move.l 66(sp),d1
    8c7a:	|                     jsr -684(a6)
    8c7e:	|                     move.l d0,62(sp)
    8c82:	|                     move.l 62(sp),d0
    8c86:	|                     movea.l 112(sp),a0
    8c8a:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    8c8e:	|                     movea.l 112(sp),a0
    8c92:	|                     move.l 8(a0),d0
    8c96:	|                 /-- bne.s 8c9e <loadSpriteBank+0x136>
    8c98:	|                 |   clr.w d0
    8c9a:	+-----------------|-- bra.w 8fa2 <loadSpriteBank+0x43a>
	
	startIndex = 1;
    8c9e:	|                 \-> moveq #1,d0
    8ca0:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    8ca4:	|                     clr.l 100(sp)
    8ca8:	|     /-------------- bra.w 8f80 <loadSpriteBank+0x418>

		UWORD width = get2bytes(bigDataFile);
    8cac:	|  /--|-------------> move.l 1c990 <bigDataFile>,d0
    8cb2:	|  |  |               move.l d0,-(sp)
    8cb4:	|  |  |               jsr 6bc <get2bytes>
    8cba:	|  |  |               addq.l #4,sp
    8cbc:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    8cc0:	|  |  |               movea.l 112(sp),a0
    8cc4:	|  |  |               movea.l 8(a0),a0
    8cc8:	|  |  |               move.l 100(sp),d1
    8ccc:	|  |  |               move.l d1,d0
    8cce:	|  |  |               lsl.l #3,d0
    8cd0:	|  |  |               sub.l d1,d0
    8cd2:	|  |  |               add.l d0,d0
    8cd4:	|  |  |               add.l d0,d0
    8cd6:	|  |  |               adda.l d0,a0
    8cd8:	|  |  |               moveq #0,d0
    8cda:	|  |  |               move.w 60(sp),d0
    8cde:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    8ce0:	|  |  |               movea.l 1c990 <bigDataFile>,a1
    8ce6:	|  |  |               movea.l 112(sp),a0
    8cea:	|  |  |               movea.l 8(a0),a0
    8cee:	|  |  |               move.l 100(sp),d1
    8cf2:	|  |  |               move.l d1,d0
    8cf4:	|  |  |               lsl.l #3,d0
    8cf6:	|  |  |               sub.l d1,d0
    8cf8:	|  |  |               add.l d0,d0
    8cfa:	|  |  |               add.l d0,d0
    8cfc:	|  |  |               lea (0,a0,d0.l),a2
    8d00:	|  |  |               move.l a1,-(sp)
    8d02:	|  |  |               jsr 6bc <get2bytes>
    8d08:	|  |  |               addq.l #4,sp
    8d0a:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    8d0e:	|  |  |               movea.l 1c990 <bigDataFile>,a1
    8d14:	|  |  |               movea.l 112(sp),a0
    8d18:	|  |  |               movea.l 8(a0),a0
    8d1c:	|  |  |               move.l 100(sp),d1
    8d20:	|  |  |               move.l d1,d0
    8d22:	|  |  |               lsl.l #3,d0
    8d24:	|  |  |               sub.l d1,d0
    8d26:	|  |  |               add.l d0,d0
    8d28:	|  |  |               add.l d0,d0
    8d2a:	|  |  |               lea (0,a0,d0.l),a2
    8d2e:	|  |  |               move.l a1,-(sp)
    8d30:	|  |  |               jsr 6bc <get2bytes>
    8d36:	|  |  |               addq.l #4,sp
    8d38:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    8d3c:	|  |  |               movea.l 1c990 <bigDataFile>,a1
    8d42:	|  |  |               movea.l 112(sp),a0
    8d46:	|  |  |               movea.l 8(a0),a0
    8d4a:	|  |  |               move.l 100(sp),d1
    8d4e:	|  |  |               move.l d1,d0
    8d50:	|  |  |               lsl.l #3,d0
    8d52:	|  |  |               sub.l d1,d0
    8d54:	|  |  |               add.l d0,d0
    8d56:	|  |  |               add.l d0,d0
    8d58:	|  |  |               lea (0,a0,d0.l),a2
    8d5c:	|  |  |               move.l a1,-(sp)
    8d5e:	|  |  |               jsr 6bc <get2bytes>
    8d64:	|  |  |               addq.l #4,sp
    8d66:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    8d6a:	|  |  |               movea.l 112(sp),a0
    8d6e:	|  |  |               move.l 4(a0),d0
    8d72:	|  |  |               moveq #3,d1
    8d74:	|  |  |               cmp.l d0,d1
    8d76:	|  |  |     /-------- beq.w 8e12 <loadSpriteBank+0x2aa>
    8d7a:	|  |  |     |         moveq #3,d1
    8d7c:	|  |  |     |         cmp.l d0,d1
    8d7e:	|  |  |  /--|-------- blt.w 8eb8 <loadSpriteBank+0x350>
    8d82:	|  |  |  |  |         moveq #1,d1
    8d84:	|  |  |  |  |         cmp.l d0,d1
    8d86:	|  |  |  |  |     /-- beq.s 8d92 <loadSpriteBank+0x22a>
    8d88:	|  |  |  |  |     |   moveq #2,d1
    8d8a:	|  |  |  |  |     |   cmp.l d0,d1
    8d8c:	|  |  |  |  |  /--|-- beq.s 8dbe <loadSpriteBank+0x256>
    8d8e:	|  |  |  +--|--|--|-- bra.w 8eb8 <loadSpriteBank+0x350>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    8d92:	|  |  |  |  |  |  \-> movea.l 112(sp),a0
    8d96:	|  |  |  |  |  |      movea.l 8(a0),a0
    8d9a:	|  |  |  |  |  |      move.l 100(sp),d1
    8d9e:	|  |  |  |  |  |      move.l d1,d0
    8da0:	|  |  |  |  |  |      lsl.l #3,d0
    8da2:	|  |  |  |  |  |      sub.l d1,d0
    8da4:	|  |  |  |  |  |      add.l d0,d0
    8da6:	|  |  |  |  |  |      add.l d0,d0
    8da8:	|  |  |  |  |  |      adda.l d0,a0
    8daa:	|  |  |  |  |  |      move.l 4(a0),d0
    8dae:	|  |  |  |  |  |      addq.l #2,d0
    8db0:	|  |  |  |  |  |      move.l d0,d0
    8db2:	|  |  |  |  |  |      add.w d0,d0
    8db4:	|  |  |  |  |  |      add.w d0,d0
    8db6:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    8dba:	|  |  |  +--|--|----- bra.w 8eb8 <loadSpriteBank+0x350>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    8dbe:	|  |  |  |  |  \----> movea.l 112(sp),a0
    8dc2:	|  |  |  |  |         movea.l 8(a0),a0
    8dc6:	|  |  |  |  |         move.l 100(sp),d1
    8dca:	|  |  |  |  |         move.l d1,d0
    8dcc:	|  |  |  |  |         lsl.l #3,d0
    8dce:	|  |  |  |  |         sub.l d1,d0
    8dd0:	|  |  |  |  |         add.l d0,d0
    8dd2:	|  |  |  |  |         add.l d0,d0
    8dd4:	|  |  |  |  |         adda.l d0,a0
    8dd6:	|  |  |  |  |         move.l (a0),d0
    8dd8:	|  |  |  |  |     /-- bpl.s 8ddc <loadSpriteBank+0x274>
    8dda:	|  |  |  |  |     |   addq.l #7,d0
    8ddc:	|  |  |  |  |     \-> asr.l #3,d0
    8dde:	|  |  |  |  |         move.l d0,d2
    8de0:	|  |  |  |  |         movea.l 112(sp),a0
    8de4:	|  |  |  |  |         movea.l 8(a0),a0
    8de8:	|  |  |  |  |         move.l 100(sp),d1
    8dec:	|  |  |  |  |         move.l d1,d0
    8dee:	|  |  |  |  |         lsl.l #3,d0
    8df0:	|  |  |  |  |         sub.l d1,d0
    8df2:	|  |  |  |  |         add.l d0,d0
    8df4:	|  |  |  |  |         add.l d0,d0
    8df6:	|  |  |  |  |         adda.l d0,a0
    8df8:	|  |  |  |  |         move.l 4(a0),d0
    8dfc:	|  |  |  |  |         move.l d0,d0
    8dfe:	|  |  |  |  |         move.w d2,d1
    8e00:	|  |  |  |  |         muls.w d0,d1
    8e02:	|  |  |  |  |         move.w d1,d0
    8e04:	|  |  |  |  |         add.w d0,d0
    8e06:	|  |  |  |  |         add.w d1,d0
    8e08:	|  |  |  |  |         add.w d0,d0
    8e0a:	|  |  |  |  |         move.w d0,98(sp)
				break;
    8e0e:	|  |  |  +--|-------- bra.w 8eb8 <loadSpriteBank+0x350>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    8e12:	|  |  |  |  \-------> movea.l 112(sp),a0
    8e16:	|  |  |  |            movea.l 8(a0),a0
    8e1a:	|  |  |  |            move.l 100(sp),d1
    8e1e:	|  |  |  |            move.l d1,d0
    8e20:	|  |  |  |            lsl.l #3,d0
    8e22:	|  |  |  |            sub.l d1,d0
    8e24:	|  |  |  |            add.l d0,d0
    8e26:	|  |  |  |            add.l d0,d0
    8e28:	|  |  |  |            adda.l d0,a0
    8e2a:	|  |  |  |            move.l (a0),d0
    8e2c:	|  |  |  |            andi.l #-2147483633,d0
    8e32:	|  |  |  |        /-- bpl.s 8e3c <loadSpriteBank+0x2d4>
    8e34:	|  |  |  |        |   subq.l #1,d0
    8e36:	|  |  |  |        |   moveq #-16,d1
    8e38:	|  |  |  |        |   or.l d1,d0
    8e3a:	|  |  |  |        |   addq.l #1,d0
    8e3c:	|  |  |  |        \-> tst.l d0
    8e3e:	|  |  |  |     /----- ble.s 8e44 <loadSpriteBank+0x2dc>
    8e40:	|  |  |  |     |      moveq #2,d0
    8e42:	|  |  |  |     |  /-- bra.s 8e46 <loadSpriteBank+0x2de>
    8e44:	|  |  |  |     \--|-> clr.w d0
    8e46:	|  |  |  |        \-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    8e4a:	|  |  |  |            movea.l 112(sp),a0
    8e4e:	|  |  |  |            movea.l 8(a0),a0
    8e52:	|  |  |  |            move.l 100(sp),d1
    8e56:	|  |  |  |            move.l d1,d0
    8e58:	|  |  |  |            lsl.l #3,d0
    8e5a:	|  |  |  |            sub.l d1,d0
    8e5c:	|  |  |  |            add.l d0,d0
    8e5e:	|  |  |  |            add.l d0,d0
    8e60:	|  |  |  |            adda.l d0,a0
    8e62:	|  |  |  |            move.l (a0),d0
    8e64:	|  |  |  |            movea.l d0,a0
    8e66:	|  |  |  |            cmpa.w #0,a0
    8e6a:	|  |  |  |        /-- bge.s 8e70 <loadSpriteBank+0x308>
    8e6c:	|  |  |  |        |   lea 15(a0),a0
    8e70:	|  |  |  |        \-> move.l a0,d0
    8e72:	|  |  |  |            asr.l #4,d0
    8e74:	|  |  |  |            add.l d0,d0
    8e76:	|  |  |  |            move.l d0,d1
    8e78:	|  |  |  |            moveq #0,d0
    8e7a:	|  |  |  |            move.w 58(sp),d0
    8e7e:	|  |  |  |            add.l d1,d0
    8e80:	|  |  |  |            move.l d0,d2
    8e82:	|  |  |  |            movea.l 112(sp),a0
    8e86:	|  |  |  |            movea.l 8(a0),a0
    8e8a:	|  |  |  |            move.l 100(sp),d1
    8e8e:	|  |  |  |            move.l d1,d0
    8e90:	|  |  |  |            lsl.l #3,d0
    8e92:	|  |  |  |            sub.l d1,d0
    8e94:	|  |  |  |            add.l d0,d0
    8e96:	|  |  |  |            add.l d0,d0
    8e98:	|  |  |  |            adda.l d0,a0
    8e9a:	|  |  |  |            move.l 4(a0),d0
    8e9e:	|  |  |  |            move.l d0,d0
    8ea0:	|  |  |  |            move.w d2,d1
    8ea2:	|  |  |  |            muls.w d0,d1
    8ea4:	|  |  |  |            move.w d1,98(sp)
				if(size > 100)
    8ea8:	|  |  |  |            cmpi.w #100,98(sp)
    8eae:	|  |  |  |        /-- bls.s 8eb6 <loadSpriteBank+0x34e>
				{
					UWORD br1 = 1;
    8eb0:	|  |  |  |        |   move.w #1,56(sp)
				}
				break;
    8eb6:	|  |  |  |        \-> nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    8eb8:	|  |  |  \----------> moveq #0,d0
    8eba:	|  |  |               move.w 98(sp),d0
    8ebe:	|  |  |               add.l d0,d0
    8ec0:	|  |  |               move.l d0,52(sp)
    8ec4:	|  |  |               moveq #2,d0
    8ec6:	|  |  |               move.l d0,48(sp)
    8eca:	|  |  |               move.l 1c9a8 <SysBase>,d0
    8ed0:	|  |  |               movea.l d0,a6
    8ed2:	|  |  |               move.l 52(sp),d0
    8ed6:	|  |  |               move.l 48(sp),d1
    8eda:	|  |  |               jsr -684(a6)
    8ede:	|  |  |               move.l d0,44(sp)
    8ee2:	|  |  |               movea.l 44(sp),a1
    8ee6:	|  |  |               movea.l 112(sp),a0
    8eea:	|  |  |               movea.l 8(a0),a0
    8eee:	|  |  |               move.l 100(sp),d1
    8ef2:	|  |  |               move.l d1,d0
    8ef4:	|  |  |               lsl.l #3,d0
    8ef6:	|  |  |               sub.l d1,d0
    8ef8:	|  |  |               add.l d0,d0
    8efa:	|  |  |               add.l d0,d0
    8efc:	|  |  |               adda.l d0,a0
    8efe:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    8f02:	|  |  |               move.l 1c990 <bigDataFile>,40(sp)
    8f0a:	|  |  |               movea.l 112(sp),a0
    8f0e:	|  |  |               movea.l 8(a0),a0
    8f12:	|  |  |               move.l 100(sp),d1
    8f16:	|  |  |               move.l d1,d0
    8f18:	|  |  |               lsl.l #3,d0
    8f1a:	|  |  |               sub.l d1,d0
    8f1c:	|  |  |               add.l d0,d0
    8f1e:	|  |  |               add.l d0,d0
    8f20:	|  |  |               adda.l d0,a0
    8f22:	|  |  |               move.l 24(a0),36(sp)
    8f28:	|  |  |               moveq #2,d1
    8f2a:	|  |  |               move.l d1,32(sp)
    8f2e:	|  |  |               move.w 98(sp),d0
    8f32:	|  |  |               lsr.w #1,d0
    8f34:	|  |  |               move.w d0,d0
    8f36:	|  |  |               andi.l #65535,d0
    8f3c:	|  |  |               move.l d0,28(sp)
    8f40:	|  |  |               move.l 1c9b0 <DOSBase>,d0
    8f46:	|  |  |               movea.l d0,a6
    8f48:	|  |  |               move.l 40(sp),d1
    8f4c:	|  |  |               move.l 36(sp),d2
    8f50:	|  |  |               move.l 32(sp),d3
    8f54:	|  |  |               move.l 28(sp),d4
    8f58:	|  |  |               jsr -324(a6)
    8f5c:	|  |  |               move.l d0,24(sp)
    8f60:	|  |  |               move.l 24(sp),d0
    8f64:	|  |  |               move.w d0,22(sp)
		if (!count) {
    8f68:	|  |  |           /-- bne.s 8f7c <loadSpriteBank+0x414>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    8f6a:	|  |  |           |   pea 190d2 <PutChar+0x13d6>
    8f70:	|  |  |           |   jsr 17232 <KPrintF>
    8f76:	|  |  |           |   addq.l #4,sp
			return FALSE;
    8f78:	|  |  |           |   clr.w d0
    8f7a:	+--|--|-----------|-- bra.s 8fa2 <loadSpriteBank+0x43a>
	for (i = 0; i < total; i++) {
    8f7c:	|  |  |           \-> addq.l #1,100(sp)
    8f80:	|  |  \-------------> move.l 100(sp),d0
    8f84:	|  |                  cmp.l 74(sp),d0
    8f88:	|  \----------------- blt.w 8cac <loadSpriteBank+0x144>
		}
	}

	finishAccess ();
    8f8c:	|                     jsr 6c74 <finishAccess>

	KPrintF("loadSpriteBank: Complete\n");
    8f92:	|                     pea 19105 <PutChar+0x1409>
    8f98:	|                     jsr 17232 <KPrintF>
    8f9e:	|                     addq.l #4,sp
	return TRUE;
    8fa0:	|                     moveq #1,d0
}
    8fa2:	\-------------------> movem.l (sp)+,d2-d4/a2/a6
    8fa6:	                      lea 84(sp),sp
    8faa:	                      rts

00008fac <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    8fac:	                   lea -16(sp),sp
    8fb0:	                   move.l 28(sp),d0
    8fb4:	                   move.w d0,d0
    8fb6:	                   move.w d0,2(sp)
	UWORD x =  (UWORD) thisPerson->x - single->xhot;
    8fba:	                   movea.l 24(sp),a0
    8fbe:	                   move.l (a0),d0
    8fc0:	                   move.l d0,-(sp)
    8fc2:	                   jsr 179c4 <__fixunssfsi>
    8fc8:	                   addq.l #4,sp
    8fca:	                   move.l d0,d0
    8fcc:	                   movea.l 20(sp),a0
    8fd0:	                   move.l 8(a0),d1
    8fd4:	                   move.l d1,d1
    8fd6:	                   movea.w d0,a0
    8fd8:	                   suba.w d1,a0
    8fda:	                   move.w a0,6(sp)
	UWORD y =  (UWORD) thisPerson->y - single->yhot;			
    8fde:	                   movea.l 24(sp),a0
    8fe2:	                   move.l 4(a0),d0
    8fe6:	                   move.l d0,-(sp)
    8fe8:	                   jsr 179c4 <__fixunssfsi>
    8fee:	                   addq.l #4,sp
    8ff0:	                   move.l d0,d0
    8ff2:	                   movea.l 20(sp),a0
    8ff6:	                   move.l 12(a0),d1
    8ffa:	                   move.l d1,d1
    8ffc:	                   movea.w d0,a0
    8ffe:	                   suba.w d1,a0
    9000:	                   move.w a0,4(sp)

	CstScaleSprite( single, thisPerson, (WORD) x, (WORD) y,SCREEN);
    9004:	                   move.w 4(sp),d0
    9008:	                   movea.w d0,a1
    900a:	                   move.w 6(sp),d0
    900e:	                   movea.w d0,a0
    9010:	                   pea 1 <_start+0x1>
    9014:	                   move.l a1,-(sp)
    9016:	                   move.l a0,-(sp)
    9018:	                   move.l 36(sp),-(sp)
    901c:	                   move.l 36(sp),-(sp)
    9020:	                   jsr 2d2e <CstScaleSprite>
    9026:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    902a:	                   movea.l 24(sp),a0
    902e:	                   move.l 118(a0),d0
    9032:	                   moveq #8,d1
    9034:	                   and.l d1,d0
    9036:	   /-------------- beq.w 90f8 <scaleSprite+0x14c>
		if (single->xhot < 0)
    903a:	   |               movea.l 20(sp),a0
    903e:	   |               move.l 8(a0),d0
    9042:	   |  /----------- bpl.s 907a <scaleSprite+0xce>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    9044:	   |  |            tst.w 2(sp)
    9048:	   |  |     /----- beq.s 9060 <scaleSprite+0xb4>
    904a:	   |  |     |      movea.l 20(sp),a0
    904e:	   |  |     |      move.l (a0),d0
    9050:	   |  |     |      move.l d0,d1
    9052:	   |  |     |      movea.l 20(sp),a0
    9056:	   |  |     |      move.l 8(a0),d0
    905a:	   |  |     |      move.l d0,d0
    905c:	   |  |     |      sub.w d0,d1
    905e:	   |  |     |  /-- bra.s 906e <scaleSprite+0xc2>
    9060:	   |  |     \--|-> movea.l 20(sp),a0
    9064:	   |  |        |   move.l 8(a0),d0
    9068:	   |  |        |   move.l d0,d0
    906a:	   |  |        |   move.w d0,d1
    906c:	   |  |        |   addq.w #1,d1
    906e:	   |  |        \-> movea.w 6(sp),a0
    9072:	   |  |            suba.w d1,a0
    9074:	   |  |            move.w a0,14(sp)
    9078:	   |  |  /-------- bra.s 90ae <scaleSprite+0x102>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    907a:	   |  \--|-------> tst.w 2(sp)
    907e:	   |     |  /----- beq.s 909a <scaleSprite+0xee>
    9080:	   |     |  |      movea.l 20(sp),a0
    9084:	   |     |  |      move.l (a0),d0
    9086:	   |     |  |      move.l d0,d1
    9088:	   |     |  |      movea.l 20(sp),a0
    908c:	   |     |  |      move.l 8(a0),d0
    9090:	   |     |  |      move.l d0,d0
    9092:	   |     |  |      sub.w d0,d1
    9094:	   |     |  |      move.w d1,d0
    9096:	   |     |  |      subq.w #1,d0
    9098:	   |     |  |  /-- bra.s 90a4 <scaleSprite+0xf8>
    909a:	   |     |  \--|-> movea.l 20(sp),a0
    909e:	   |     |     |   move.l 8(a0),d0
    90a2:	   |     |     |   move.l d0,d0
    90a4:	   |     |     \-> move.w 6(sp),d1
    90a8:	   |     |         sub.w d0,d1
    90aa:	   |     |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    90ae:	   |     \-------> movea.l 24(sp),a0
    90b2:	   |               move.l 24(a0),d0
    90b6:	   |               move.l d0,d1
    90b8:	   |               movea.l 20(sp),a0
    90bc:	   |               move.l 12(a0),d0
    90c0:	   |               move.l d0,d0
    90c2:	   |               sub.w d0,d1
    90c4:	   |               movea.w 4(sp),a0
    90c8:	   |               adda.w d1,a0
    90ca:	   |               move.w a0,12(sp)
		x2 = x1 + single->width;
    90ce:	   |               movea.l 20(sp),a0
    90d2:	   |               move.l (a0),d0
    90d4:	   |               move.l d0,d0
    90d6:	   |               move.w 14(sp),d1
    90da:	   |               add.w d0,d1
    90dc:	   |               move.w d1,10(sp)
		y2 = y1 + single->height;
    90e0:	   |               movea.l 20(sp),a0
    90e4:	   |               move.l 4(a0),d0
    90e8:	   |               move.l d0,d0
    90ea:	   |               movea.w 12(sp),a0
    90ee:	   |               adda.w d0,a0
    90f0:	   |               move.w a0,8(sp)
    90f4:	/--|-------------- bra.w 91ca <scaleSprite+0x21e>
	} else {
		x -= cameraX;
    90f8:	|  \-------------> move.l 1ca62 <cameraX>,d0
    90fe:	|                  move.l d0,d0
    9100:	|                  sub.w d0,6(sp)
		y -= cameraY;
    9104:	|                  move.l 1ca66 <cameraY>,d0
    910a:	|                  move.l d0,d0
    910c:	|                  sub.w d0,4(sp)
		if (single->xhot < 0)
    9110:	|                  movea.l 20(sp),a0
    9114:	|                  move.l 8(a0),d0
    9118:	|     /----------- bpl.s 9150 <scaleSprite+0x1a4>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    911a:	|     |            tst.w 2(sp)
    911e:	|     |     /----- beq.s 9136 <scaleSprite+0x18a>
    9120:	|     |     |      movea.l 20(sp),a0
    9124:	|     |     |      move.l (a0),d0
    9126:	|     |     |      move.l d0,d1
    9128:	|     |     |      movea.l 20(sp),a0
    912c:	|     |     |      move.l 8(a0),d0
    9130:	|     |     |      move.l d0,d0
    9132:	|     |     |      sub.w d0,d1
    9134:	|     |     |  /-- bra.s 9144 <scaleSprite+0x198>
    9136:	|     |     \--|-> movea.l 20(sp),a0
    913a:	|     |        |   move.l 8(a0),d0
    913e:	|     |        |   move.l d0,d0
    9140:	|     |        |   move.w d0,d1
    9142:	|     |        |   addq.w #1,d1
    9144:	|     |        \-> move.w 6(sp),d0
    9148:	|     |            sub.w d1,d0
    914a:	|     |            move.w d0,14(sp)
    914e:	|     |  /-------- bra.s 9184 <scaleSprite+0x1d8>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    9150:	|     \--|-------> tst.w 2(sp)
    9154:	|        |  /----- beq.s 9170 <scaleSprite+0x1c4>
    9156:	|        |  |      movea.l 20(sp),a0
    915a:	|        |  |      move.l (a0),d0
    915c:	|        |  |      move.l d0,d1
    915e:	|        |  |      movea.l 20(sp),a0
    9162:	|        |  |      move.l 8(a0),d0
    9166:	|        |  |      move.l d0,d0
    9168:	|        |  |      sub.w d0,d1
    916a:	|        |  |      move.w d1,d0
    916c:	|        |  |      subq.w #1,d0
    916e:	|        |  |  /-- bra.s 917a <scaleSprite+0x1ce>
    9170:	|        |  \--|-> movea.l 20(sp),a0
    9174:	|        |     |   move.l 8(a0),d0
    9178:	|        |     |   move.l d0,d0
    917a:	|        |     \-> move.w 6(sp),d1
    917e:	|        |         sub.w d0,d1
    9180:	|        |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    9184:	|        \-------> movea.l 24(sp),a0
    9188:	|                  move.l 24(a0),d0
    918c:	|                  move.l d0,d1
    918e:	|                  movea.l 20(sp),a0
    9192:	|                  move.l 12(a0),d0
    9196:	|                  move.l d0,d0
    9198:	|                  sub.w d0,d1
    919a:	|                  movea.w 4(sp),a0
    919e:	|                  adda.w d1,a0
    91a0:	|                  move.w a0,12(sp)
		x2 = x1 + single->width;
    91a4:	|                  movea.l 20(sp),a0
    91a8:	|                  move.l (a0),d0
    91aa:	|                  move.l d0,d0
    91ac:	|                  move.w 14(sp),d1
    91b0:	|                  add.w d0,d1
    91b2:	|                  move.w d1,10(sp)
		y2 = y1 + single->height;
    91b6:	|                  movea.l 20(sp),a0
    91ba:	|                  move.l 4(a0),d0
    91be:	|                  move.l d0,d0
    91c0:	|                  movea.w 12(sp),a0
    91c4:	|                  adda.w d0,a0
    91c6:	|                  move.w a0,8(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    91ca:	\----------------> move.l 1c964 <input+0xa>,d1
    91d0:	                   moveq #0,d0
    91d2:	                   move.w 14(sp),d0
    91d6:	                   cmp.l d1,d0
    91d8:	            /----- bgt.s 920e <scaleSprite+0x262>
    91da:	            |      move.l 1c964 <input+0xa>,d1
    91e0:	            |      moveq #0,d0
    91e2:	            |      move.w 10(sp),d0
    91e6:	            |      cmp.l d1,d0
    91e8:	            +----- blt.s 920e <scaleSprite+0x262>
    91ea:	            |      move.l 1c968 <input+0xe>,d1
    91f0:	            |      moveq #0,d0
    91f2:	            |      move.w 12(sp),d0
    91f6:	            |      cmp.l d1,d0
    91f8:	            +----- bgt.s 920e <scaleSprite+0x262>
    91fa:	            |      move.l 1c968 <input+0xe>,d1
    9200:	            |      moveq #0,d0
    9202:	            |      move.w 8(sp),d0
    9206:	            |      cmp.l d1,d0
    9208:	            +----- blt.s 920e <scaleSprite+0x262>
		return TRUE;
    920a:	            |      moveq #1,d0
    920c:	            |  /-- bra.s 9210 <scaleSprite+0x264>
	}
	return FALSE;
    920e:	            \--|-> clr.w d0
    9210:	               \-> lea 16(sp),sp
    9214:	                   rts

00009216 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    9216:	    move.l 4(sp),d0
    921a:	/-- bpl.s 921e <TF_abs+0x8>
    921c:	|   neg.l d0
}
    921e:	\-> rts

00009220 <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    9220:	             lea -28(sp),sp
    9224:	             move.l a6,-(sp)
    9226:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    9228:	             move.l #132,28(sp)
    9230:	             clr.l 24(sp)
    9234:	             move.l 1c9a8 <SysBase>,d0
    923a:	             movea.l d0,a6
    923c:	             move.l 28(sp),d0
    9240:	             move.l 24(sp),d1
    9244:	             jsr -684(a6)
    9248:	             move.l d0,20(sp)
    924c:	             move.l 20(sp),d0
    9250:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    9254:	         /-- bne.s 925c <addPerson+0x3c>
    9256:	         |   clr.w d0
    9258:	/--------|-- bra.w 948c <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    925c:	|        \-> move.l 48(sp),-(sp)
    9260:	|            jsr d60c <loadObjectType>
    9266:	|            addq.l #4,sp
    9268:	|            movea.l 16(sp),a0
    926c:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    9270:	|            movea.l 16(sp),a0
    9274:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    927c:	|            movea.l 16(sp),a0
    9280:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    9284:	|            movea.l 16(sp),a0
    9288:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    928c:	|            move.l 44(sp),-(sp)
    9290:	|            jsr 17664 <__floatsisf>
    9296:	|            addq.l #4,sp
    9298:	|            move.l d0,d2
    929a:	|            move.l 40(sp),-(sp)
    929e:	|            jsr 17664 <__floatsisf>
    92a4:	|            addq.l #4,sp
    92a6:	|            move.l d2,-(sp)
    92a8:	|            move.l d0,-(sp)
    92aa:	|            move.l 24(sp),-(sp)
    92ae:	|            jsr ad6e <moveAndScale>
    92b4:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    92b8:	|            movea.l 16(sp),a0
    92bc:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    92c0:	|            movea.l 16(sp),a0
    92c4:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    92ca:	|            movea.l 16(sp),a0
    92ce:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    92d4:	|            movea.l 16(sp),a0
    92d8:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    92dc:	|            movea.l 16(sp),a0
    92e0:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    92e4:	|            movea.l 16(sp),a0
    92e8:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    92ee:	|            movea.l 16(sp),a0
    92f2:	|            clr.l 106(a0)
    newPerson->angle = 180;
    92f6:	|            movea.l 16(sp),a0
    92fa:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    9302:	|            movea.l 16(sp),a0
    9306:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    930e:	|            movea.l 16(sp),a0
    9312:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    9316:	|            movea.l 16(sp),a0
    931a:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    931e:	|            movea.l 16(sp),a0
    9322:	|            movea.l 114(a0),a0
    9326:	|            move.l 24(a0),d0
    932a:	|            movea.l 16(sp),a0
    932e:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    9332:	|            movea.l 16(sp),a0
    9336:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    933a:	|            movea.l 16(sp),a0
    933e:	|            movea.l 114(a0),a0
    9342:	|            move.l 32(a0),d0
    9346:	|            movea.l 16(sp),a0
    934a:	|            move.l d0,122(a0)
    newPerson->r = 0;
    934e:	|            movea.l 16(sp),a0
    9352:	|            clr.b 126(a0)
    newPerson->g = 0;
    9356:	|            movea.l 16(sp),a0
    935a:	|            clr.b 127(a0)
    newPerson->b = 0;
    935e:	|            movea.l 16(sp),a0
    9362:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    9366:	|            movea.l 16(sp),a0
    936a:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    936e:	|            movea.l 16(sp),a0
    9372:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    9376:	|            movea.l 16(sp),a0
    937a:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    9380:	|            clr.l -(sp)
    9382:	|            move.l 20(sp),-(sp)
    9386:	|            jsr 8170 <setFrames>
    938c:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    938e:	|            movea.l 52(sp),a0
    9392:	|            movea.l (a0),a0
    9394:	|            movea.l (a0),a0
    9396:	|            movea.l 4(a0),a0
    939a:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    939e:	|     /----- bpl.s 93a8 <addPerson+0x188>
    93a0:	|     |      move.l 12(sp),d0
    93a4:	|     |      neg.l d0
    93a6:	|     |  /-- bra.s 93aa <addPerson+0x18a>
    93a8:	|     \--|-> moveq #1,d0
    93aa:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    93ae:	|            movea.l 52(sp),a0
    93b2:	|            movea.l (a0),a0
    93b4:	|            movea.l (a0),a0
    93b6:	|            movea.l (a0),a0
    93b8:	|            move.l 8(a0),d0
    93bc:	|            cmp.l 8(sp),d0
    93c0:	|     /----- bgt.s 93f2 <addPerson+0x1d2>
        if (fNumSigned < 0) {
    93c2:	|     |      tst.l 12(sp)
    93c6:	|     |  /-- bge.s 93d4 <addPerson+0x1b4>
            newPerson->height = 5;
    93c8:	|     |  |   movea.l 16(sp),a0
    93cc:	|     |  |   moveq #5,d0
    93ce:	|     |  |   move.l d0,20(a0)
    93d2:	|  /--|--|-- bra.s 941e <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    93d4:	|  |  |  \-> movea.l 52(sp),a0
    93d8:	|  |  |      movea.l (a0),a0
    93da:	|  |  |      movea.l (a0),a0
    93dc:	|  |  |      movea.l (a0),a0
    93de:	|  |  |      movea.l 16(a0),a0
    93e2:	|  |  |      move.l 12(a0),d0
    93e6:	|  |  |      addq.l #5,d0
    93e8:	|  |  |      movea.l 16(sp),a0
    93ec:	|  |  |      move.l d0,20(a0)
    93f0:	|  +--|----- bra.s 941e <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    93f2:	|  |  \----> movea.l 52(sp),a0
    93f6:	|  |         movea.l (a0),a0
    93f8:	|  |         movea.l (a0),a0
    93fa:	|  |         movea.l (a0),a0
    93fc:	|  |         movea.l 16(a0),a0
    9400:	|  |         move.l 8(sp),d1
    9404:	|  |         move.l d1,d0
    9406:	|  |         lsl.l #3,d0
    9408:	|  |         sub.l d1,d0
    940a:	|  |         add.l d0,d0
    940c:	|  |         add.l d0,d0
    940e:	|  |         adda.l d0,a0
    9410:	|  |         move.l 12(a0),d0
    9414:	|  |         addq.l #5,d0
    9416:	|  |         movea.l 16(sp),a0
    941a:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    941e:	|  \-------> move.l #117260,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9426:	|        /-- bra.s 9436 <addPerson+0x216>
        changethat = &((*changethat)->next);
    9428:	|     /--|-> movea.l 32(sp),a0
    942c:	|     |  |   move.l (a0),d0
    942e:	|     |  |   moveq #36,d1
    9430:	|     |  |   add.l d0,d1
    9432:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9436:	|     |  \-> movea.l 32(sp),a0
    943a:	|     |      move.l (a0),d0
    943c:	|     |  /-- beq.s 9464 <addPerson+0x244>
    943e:	|     |  |   movea.l 32(sp),a0
    9442:	|     |  |   movea.l (a0),a0
    9444:	|     |  |   move.l 4(a0),d2
    9448:	|     |  |   move.l 44(sp),-(sp)
    944c:	|     |  |   jsr 17664 <__floatsisf>
    9452:	|     |  |   addq.l #4,sp
    9454:	|     |  |   move.l d0,-(sp)
    9456:	|     |  |   move.l d2,-(sp)
    9458:	|     |  |   jsr 1788a <__ltsf2>
    945e:	|     |  |   addq.l #8,sp
    9460:	|     |  |   tst.l d0
    9462:	|     \--|-- blt.s 9428 <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    9464:	|        \-> movea.l 32(sp),a0
    9468:	|            move.l (a0),d0
    946a:	|            movea.l 16(sp),a0
    946e:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    9472:	|            movea.l 32(sp),a0
    9476:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    947a:	|            movea.l 16(sp),a0
    947e:	|            move.l 114(a0),d0
    9482:	|            sne d0
    9484:	|            neg.b d0
    9486:	|            move.b d0,d0
    9488:	|            andi.w #255,d0
}
    948c:	\----------> move.l (sp)+,d2
    948e:	             movea.l (sp)+,a6
    9490:	             lea 28(sp),sp
    9494:	             rts

00009496 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    9496:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    9498:	       move.l 8(sp),-(sp)
    949c:	       jsr a626 <findPerson>
    94a2:	       addq.l #4,sp
    94a4:	       move.l d0,(sp)
    if (moveMe) {
    94a6:	/----- beq.s 94da <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    94a8:	|      movea.l (sp),a0
    94aa:	|      move.l 68(a0),d0
    94ae:	|  /-- beq.s 94c0 <animatePerson+0x2a>
    94b0:	|  |   movea.l (sp),a0
    94b2:	|  |   move.l 68(a0),d0
    94b6:	|  |   move.l d0,-(sp)
    94b8:	|  |   jsr 4718 <abortFunction>
    94be:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    94c0:	|  \-> movea.l (sp),a0
    94c2:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    94c6:	|      movea.l (sp),a0
    94c8:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    94cc:	|      movea.l (sp),a0
    94ce:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    94d2:	|      movea.l (sp),a0
    94d4:	|      move.l 12(sp),72(a0)
    }
}
    94da:	\----> nop
    94dc:	       addq.l #4,sp
    94de:	       rts

000094e0 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    94e0:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    94e2:	       move.l 8(sp),-(sp)
    94e6:	       jsr a626 <findPerson>
    94ec:	       addq.l #4,sp
    94ee:	       move.l d0,(sp)
    if (moveMe) {
    94f0:	/----- beq.s 9532 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    94f2:	|      movea.l (sp),a0
    94f4:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    94f8:	|      movea.l (sp),a0
    94fa:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    9500:	|      move.l (sp),-(sp)
    9502:	|      jsr aefc <rethinkAngle>
    9508:	|      addq.l #4,sp
        if (moveMe->walking) {
    950a:	|      movea.l (sp),a0
    950c:	|      move.w 64(a0),d0
    9510:	|  /-- beq.s 9524 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    9512:	|  |   pea 1 <_start+0x1>
    9516:	|  |   move.l 4(sp),-(sp)
    951a:	|  |   jsr 8170 <setFrames>
    9520:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    9522:	+--|-- bra.s 9532 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    9524:	|  \-> clr.l -(sp)
    9526:	|      move.l 4(sp),-(sp)
    952a:	|      jsr 8170 <setFrames>
    9530:	|      addq.l #8,sp
}
    9532:	\----> nop
    9534:	       addq.l #4,sp
    9536:	       rts

00009538 <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    9538:	             lea -36(sp),sp
    953c:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    953e:	             movea.l 44(sp),a0
    9542:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    9548:	             moveq #12,d0
    954a:	             move.l d0,28(sp)
    954e:	             clr.l 24(sp)
    9552:	             move.l 1c9a8 <SysBase>,d0
    9558:	             movea.l d0,a6
    955a:	             move.l 28(sp),d0
    955e:	             move.l 24(sp),d1
    9562:	             jsr -684(a6)
    9566:	             move.l d0,20(sp)
    956a:	             move.l 20(sp),d0
    956e:	             move.l d0,16(sp)
	if (!(newAnim)) {
    9572:	         /-- bne.s 9588 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    9574:	         |   pea 1911f <PutChar+0x1423>
    957a:	         |   jsr 17232 <KPrintF>
    9580:	         |   addq.l #4,sp
		return NULL;
    9582:	         |   moveq #0,d0
    9584:	/--------|-- bra.w 96da <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    9588:	|        \-> movea.l 44(sp),a0
    958c:	|            move.l (a0),d0
    958e:	|            movea.l 16(sp),a0
    9592:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    9594:	|            movea.l 16(sp),a0
    9598:	|            movea.l (a0),a0
    959a:	|            move.l 4(a0),d0
    959e:	|            addq.l #1,d0
    95a0:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    95a4:	|            movea.l 16(sp),a0
    95a8:	|            move.l 32(sp),8(a0)

	if (num) {
    95ae:	|  /-------- beq.w 96ce <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    95b2:	|  |         move.l 32(sp),d1
    95b6:	|  |         move.l d1,d0
    95b8:	|  |         add.l d0,d0
    95ba:	|  |         add.l d1,d0
    95bc:	|  |         add.l d0,d0
    95be:	|  |         add.l d0,d0
    95c0:	|  |         move.l d0,12(sp)
    95c4:	|  |         clr.l 8(sp)
    95c8:	|  |         move.l 1c9a8 <SysBase>,d0
    95ce:	|  |         movea.l d0,a6
    95d0:	|  |         move.l 12(sp),d0
    95d4:	|  |         move.l 8(sp),d1
    95d8:	|  |         jsr -684(a6)
    95dc:	|  |         move.l d0,4(sp)
    95e0:	|  |         move.l 4(sp),d0
    95e4:	|  |         movea.l 16(sp),a0
    95e8:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    95ec:	|  |         movea.l 16(sp),a0
    95f0:	|  |         move.l 4(a0),d0
    95f4:	|  |     /-- bne.s 960a <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    95f6:	|  |     |   pea 1911f <PutChar+0x1423>
    95fc:	|  |     |   jsr 17232 <KPrintF>
    9602:	|  |     |   addq.l #4,sp
			return NULL;
    9604:	|  |     |   moveq #0,d0
    9606:	+--|-----|-- bra.w 96da <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    960a:	|  |     \-> clr.l 36(sp)
    960e:	|  |     /-- bra.w 96c0 <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    9612:	|  |  /--|-> movea.l 44(sp),a0
    9616:	|  |  |  |   movea.l 4(a0),a0
    961a:	|  |  |  |   move.l 36(sp),d1
    961e:	|  |  |  |   move.l d1,d0
    9620:	|  |  |  |   add.l d0,d0
    9622:	|  |  |  |   add.l d1,d0
    9624:	|  |  |  |   add.l d0,d0
    9626:	|  |  |  |   add.l d0,d0
    9628:	|  |  |  |   lea (0,a0,d0.l),a1
    962c:	|  |  |  |   movea.l 16(sp),a0
    9630:	|  |  |  |   movea.l 4(a0),a0
    9634:	|  |  |  |   move.l 36(sp),d1
    9638:	|  |  |  |   move.l d1,d0
    963a:	|  |  |  |   add.l d0,d0
    963c:	|  |  |  |   add.l d1,d0
    963e:	|  |  |  |   add.l d0,d0
    9640:	|  |  |  |   add.l d0,d0
    9642:	|  |  |  |   adda.l d0,a0
    9644:	|  |  |  |   move.l (a1),d0
    9646:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    9648:	|  |  |  |   movea.l 44(sp),a0
    964c:	|  |  |  |   movea.l 4(a0),a0
    9650:	|  |  |  |   move.l 36(sp),d1
    9654:	|  |  |  |   move.l d1,d0
    9656:	|  |  |  |   add.l d0,d0
    9658:	|  |  |  |   add.l d1,d0
    965a:	|  |  |  |   add.l d0,d0
    965c:	|  |  |  |   add.l d0,d0
    965e:	|  |  |  |   lea (0,a0,d0.l),a1
    9662:	|  |  |  |   movea.l 16(sp),a0
    9666:	|  |  |  |   movea.l 4(a0),a0
    966a:	|  |  |  |   move.l 36(sp),d1
    966e:	|  |  |  |   move.l d1,d0
    9670:	|  |  |  |   add.l d0,d0
    9672:	|  |  |  |   add.l d1,d0
    9674:	|  |  |  |   add.l d0,d0
    9676:	|  |  |  |   add.l d0,d0
    9678:	|  |  |  |   adda.l d0,a0
    967a:	|  |  |  |   move.l 4(a1),d0
    967e:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    9682:	|  |  |  |   movea.l 44(sp),a0
    9686:	|  |  |  |   movea.l 4(a0),a0
    968a:	|  |  |  |   move.l 36(sp),d1
    968e:	|  |  |  |   move.l d1,d0
    9690:	|  |  |  |   add.l d0,d0
    9692:	|  |  |  |   add.l d1,d0
    9694:	|  |  |  |   add.l d0,d0
    9696:	|  |  |  |   add.l d0,d0
    9698:	|  |  |  |   lea (0,a0,d0.l),a1
    969c:	|  |  |  |   movea.l 16(sp),a0
    96a0:	|  |  |  |   movea.l 4(a0),a0
    96a4:	|  |  |  |   move.l 36(sp),d1
    96a8:	|  |  |  |   move.l d1,d0
    96aa:	|  |  |  |   add.l d0,d0
    96ac:	|  |  |  |   add.l d1,d0
    96ae:	|  |  |  |   add.l d0,d0
    96b0:	|  |  |  |   add.l d0,d0
    96b2:	|  |  |  |   adda.l d0,a0
    96b4:	|  |  |  |   move.l 8(a1),d0
    96b8:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    96bc:	|  |  |  |   addq.l #1,36(sp)
    96c0:	|  |  |  \-> move.l 36(sp),d0
    96c4:	|  |  |      cmp.l 32(sp),d0
    96c8:	|  |  \----- blt.w 9612 <copyAnim+0xda>
    96cc:	|  |     /-- bra.s 96d6 <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    96ce:	|  \-----|-> movea.l 16(sp),a0
    96d2:	|        |   clr.l 4(a0)
	}

	return newAnim;
    96d6:	|        \-> move.l 16(sp),d0
}
    96da:	\----------> movea.l (sp)+,a6
    96dc:	             lea 36(sp),sp
    96e0:	             rts

000096e2 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    96e2:	                lea -44(sp),sp
    96e6:	                move.l a6,-(sp)
    96e8:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    96ea:	                moveq #12,d0
    96ec:	                move.l d0,40(sp)
    96f0:	                clr.l 36(sp)
    96f4:	                move.l 1c9a8 <SysBase>,d0
    96fa:	                movea.l d0,a6
    96fc:	                move.l 40(sp),d0
    9700:	                move.l 36(sp),d1
    9704:	                jsr -684(a6)
    9708:	                move.l d0,32(sp)
    970c:	                move.l 32(sp),d0
    9710:	                move.l d0,28(sp)
	if( !newP) {
    9714:	            /-- bne.s 972a <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9716:	            |   pea 19140 <PutChar+0x1444>
    971c:	            |   jsr 17232 <KPrintF>
    9722:	            |   addq.l #4,sp
		return NULL;
    9724:	            |   moveq #0,d0
    9726:	/-----------|-- bra.w 98fa <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    972a:	|           \-> movea.l 28(sp),a0
    972e:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    9734:	|               move.l 56(sp),d1
    9738:	|               move.l d1,d0
    973a:	|               add.l d0,d0
    973c:	|               add.l d1,d0
    973e:	|               add.l d0,d0
    9740:	|               add.l d0,d0
    9742:	|               move.l d0,24(sp)
    9746:	|               clr.l 20(sp)
    974a:	|               move.l 1c9a8 <SysBase>,d0
    9750:	|               movea.l d0,a6
    9752:	|               move.l 24(sp),d0
    9756:	|               move.l 20(sp),d1
    975a:	|               jsr -684(a6)
    975e:	|               move.l d0,16(sp)
    9762:	|               move.l 16(sp),d0
    9766:	|               movea.l 28(sp),a0
    976a:	|               move.l d0,4(a0)
	if( !newP->frames) {
    976e:	|               movea.l 28(sp),a0
    9772:	|               move.l 4(a0),d0
    9776:	|           /-- bne.s 978c <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9778:	|           |   pea 19140 <PutChar+0x1444>
    977e:	|           |   jsr 17232 <KPrintF>
    9784:	|           |   addq.l #4,sp
		return NULL;
    9786:	|           |   moveq #0,d0
    9788:	+-----------|-- bra.w 98fa <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    978c:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    9792:	|               movea.l 60(sp),a0
    9796:	|               move.l (a0),44(sp)
	while (a) {
    979a:	|     /-------- bra.w 98ee <createPersonaAnim+0x20c>
		a --;
    979e:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    97a2:	|  |  |         movea.l 28(sp),a0
    97a6:	|  |  |         movea.l 4(a0),a0
    97aa:	|  |  |         move.l 48(sp),d1
    97ae:	|  |  |         move.l d1,d0
    97b0:	|  |  |         add.l d0,d0
    97b2:	|  |  |         add.l d1,d0
    97b4:	|  |  |         add.l d0,d0
    97b6:	|  |  |         add.l d0,d0
    97b8:	|  |  |         adda.l d0,a0
    97ba:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    97be:	|  |  |         movea.l 44(sp),a0
    97c2:	|  |  |         move.l (a0),d0
    97c4:	|  |  |         moveq #5,d1
    97c6:	|  |  |         cmp.l d0,d1
    97c8:	|  |  |     /-- bne.s 97f4 <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    97ca:	|  |  |     |   movea.l 28(sp),a0
    97ce:	|  |  |     |   movea.l 4(a0),a0
    97d2:	|  |  |     |   move.l 48(sp),d1
    97d6:	|  |  |     |   move.l d1,d0
    97d8:	|  |  |     |   add.l d0,d0
    97da:	|  |  |     |   add.l d1,d0
    97dc:	|  |  |     |   add.l d0,d0
    97de:	|  |  |     |   add.l d0,d0
    97e0:	|  |  |     |   lea (0,a0,d0.l),a1
    97e4:	|  |  |     |   movea.l 44(sp),a0
    97e8:	|  |  |     |   move.l 4(a0),d0
    97ec:	|  |  |     |   move.l d0,8(a1)
    97f0:	|  |  |  /--|-- bra.w 989c <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    97f4:	|  |  |  |  \-> movea.l 44(sp),a0
    97f8:	|  |  |  |      move.l (a0),d0
    97fa:	|  |  |  |      moveq #2,d1
    97fc:	|  |  |  |      cmp.l d0,d1
    97fe:	|  |  |  |  /-- bne.s 982a <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    9800:	|  |  |  |  |   movea.l 44(sp),a0
    9804:	|  |  |  |  |   move.l 4(a0),d2
    9808:	|  |  |  |  |   movea.l 28(sp),a0
    980c:	|  |  |  |  |   movea.l 4(a0),a0
    9810:	|  |  |  |  |   move.l 48(sp),d1
    9814:	|  |  |  |  |   move.l d1,d0
    9816:	|  |  |  |  |   add.l d0,d0
    9818:	|  |  |  |  |   add.l d1,d0
    981a:	|  |  |  |  |   add.l d0,d0
    981c:	|  |  |  |  |   add.l d0,d0
    981e:	|  |  |  |  |   adda.l d0,a0
    9820:	|  |  |  |  |   move.l d2,d0
    9822:	|  |  |  |  |   neg.l d0
    9824:	|  |  |  |  |   move.l d0,8(a0)
    9828:	|  |  |  +--|-- bra.s 989c <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    982a:	|  |  |  |  \-> movea.l 44(sp),a0
    982e:	|  |  |  |      move.l (a0),d0
    9830:	|  |  |  |      moveq #6,d1
    9832:	|  |  |  |      cmp.l d0,d1
    9834:	|  |  |  |  /-- bne.s 987c <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    9836:	|  |  |  |  |   movea.l 44(sp),a0
    983a:	|  |  |  |  |   movea.l 4(a0),a0
    983e:	|  |  |  |  |   move.l (a0),d0
    9840:	|  |  |  |  |   move.l d0,-(sp)
    9842:	|  |  |  |  |   pea 1 <_start+0x1>
    9846:	|  |  |  |  |   lea 20(sp),a0
    984a:	|  |  |  |  |   move.l a0,-(sp)
    984c:	|  |  |  |  |   jsr 147d2 <getValueType>
    9852:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    9856:	|  |  |  |  |   movea.l 44(sp),a0
    985a:	|  |  |  |  |   movea.l 4(a0),a0
    985e:	|  |  |  |  |   movea.l (a0),a0
    9860:	|  |  |  |  |   move.l 8(a0),d0
    9864:	|  |  |  |  |   move.l d0,-(sp)
    9866:	|  |  |  |  |   pea 1 <_start+0x1>
    986a:	|  |  |  |  |   lea 16(sp),a0
    986e:	|  |  |  |  |   move.l a0,-(sp)
    9870:	|  |  |  |  |   jsr 147d2 <getValueType>
    9876:	|  |  |  |  |   lea 12(sp),sp
    987a:	|  |  |  +--|-- bra.s 989c <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    987c:	|  |  |  |  \-> move.l 44(sp),d0
    9880:	|  |  |  |      move.l d0,-(sp)
    9882:	|  |  |  |      pea 1 <_start+0x1>
    9886:	|  |  |  |      lea 20(sp),a0
    988a:	|  |  |  |      move.l a0,-(sp)
    988c:	|  |  |  |      jsr 147d2 <getValueType>
    9892:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    9896:	|  |  |  |      moveq #1,d0
    9898:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    989c:	|  |  |  \----> move.l 60(sp),-(sp)
    98a0:	|  |  |         jsr 15156 <trimStack>
    98a6:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    98a8:	|  |  |         movea.l 28(sp),a0
    98ac:	|  |  |         movea.l 4(a0),a0
    98b0:	|  |  |         move.l 48(sp),d1
    98b4:	|  |  |         move.l d1,d0
    98b6:	|  |  |         add.l d0,d0
    98b8:	|  |  |         add.l d1,d0
    98ba:	|  |  |         add.l d0,d0
    98bc:	|  |  |         add.l d0,d0
    98be:	|  |  |         adda.l d0,a0
    98c0:	|  |  |         move.l 12(sp),d0
    98c4:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    98c6:	|  |  |         movea.l 28(sp),a0
    98ca:	|  |  |         movea.l 4(a0),a0
    98ce:	|  |  |         move.l 48(sp),d1
    98d2:	|  |  |         move.l d1,d0
    98d4:	|  |  |         add.l d0,d0
    98d6:	|  |  |         add.l d1,d0
    98d8:	|  |  |         add.l d0,d0
    98da:	|  |  |         add.l d0,d0
    98dc:	|  |  |         adda.l d0,a0
    98de:	|  |  |         move.l 8(sp),d0
    98e2:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    98e6:	|  |  |         movea.l 60(sp),a0
    98ea:	|  |  |         move.l (a0),44(sp)
	while (a) {
    98ee:	|  |  \-------> tst.l 48(sp)
    98f2:	|  \----------- bne.w 979e <createPersonaAnim+0xbc>
	}

	return newP;
    98f6:	|               move.l 28(sp),d0
}
    98fa:	\-------------> move.l (sp)+,d2
    98fc:	                movea.l (sp)+,a6
    98fe:	                lea 44(sp),sp
    9902:	                rts

00009904 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    9904:	       lea -12(sp),sp
    9908:	       move.l a6,-(sp)

	if(orig->theSprites)
    990a:	       movea.l 20(sp),a0
    990e:	       move.l (a0),d0
    9910:	   /-- beq.s 993a <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    9912:	   |   movea.l 20(sp),a0
    9916:	   |   movea.l (a0),a0
    9918:	   |   move.l 4(a0),d0
    991c:	   |   subq.l #1,d0
    991e:	   |   move.l d0,4(a0)
    9922:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    9928:	   +-- bne.s 993a <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    992a:	   |   movea.l 20(sp),a0
    992e:	   |   move.l (a0),d0
    9930:	   |   move.l d0,-(sp)
    9932:	   |   jsr 8a5c <forgetSpriteBank>
    9938:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    993a:	   \-> tst.l 20(sp)
    993e:	/----- beq.s 997e <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    9940:	|      movea.l 20(sp),a0
    9944:	|      move.l 8(a0),d0
    9948:	|  /-- beq.s 9964 <deleteAnim+0x60>
			FreeVec( orig->frames);
    994a:	|  |   movea.l 20(sp),a0
    994e:	|  |   move.l 4(a0),8(sp)
    9954:	|  |   move.l 1c9a8 <SysBase>,d0
    995a:	|  |   movea.l d0,a6
    995c:	|  |   movea.l 8(sp),a1
    9960:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    9964:	|  \-> move.l 20(sp),4(sp)
    996a:	|      move.l 1c9a8 <SysBase>,d0
    9970:	|      movea.l d0,a6
    9972:	|      movea.l 4(sp),a1
    9976:	|      jsr -690(a6)
		orig = NULL;
    997a:	|      clr.l 20(sp)
	}	
	
}
    997e:	\----> nop
    9980:	       movea.l (sp)+,a6
    9982:	       lea 12(sp),sp
    9986:	       rts

00009988 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    9988:	          lea -124(sp),sp
    998c:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    9990:	          movea.l 152(sp),a0
    9994:	          move.l 56(a0),d1
    9998:	          movea.l 152(sp),a0
    999c:	          move.l 60(a0),d0
    99a0:	          cmp.l d1,d0
    99a2:	      /-- bne.s 99d2 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    99a4:	      |   movea.l 152(sp),a0
    99a8:	      |   moveq #-1,d0
    99aa:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    99ae:	      |   movea.l 152(sp),a0
    99b2:	      |   move.l 40(a0),d0
    99b6:	      |   movea.l 152(sp),a0
    99ba:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    99be:	      |   movea.l 152(sp),a0
    99c2:	      |   move.l 44(a0),d0
    99c6:	      |   movea.l 152(sp),a0
    99ca:	      |   move.l d0,52(a0)
    99ce:	   /--|-- bra.w 9f38 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    99d2:	   |  \-> movea.l 1cac4 <currentFloor>,a0
    99d8:	   |      move.l 16(a0),d1
    99dc:	   |      movea.l 152(sp),a0
    99e0:	   |      move.l 56(a0),d0
    99e4:	   |      add.l d0,d0
    99e6:	   |      add.l d0,d0
    99e8:	   |      movea.l d1,a0
    99ea:	   |      adda.l d0,a0
    99ec:	   |      move.l (a0),d1
    99ee:	   |      movea.l 152(sp),a0
    99f2:	   |      move.l 60(a0),d0
    99f6:	   |      add.l d0,d0
    99f8:	   |      add.l d0,d0
    99fa:	   |      movea.l d1,a0
    99fc:	   |      adda.l d0,a0
    99fe:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    9a02:	   |      moveq #-1,d0
    9a04:	   |      cmp.l 144(sp),d0
    9a08:	   |  /-- bne.s 9a10 <doBorderStuff+0x88>
    9a0a:	   |  |   clr.w d0
    9a0c:	/--|--|-- bra.w a038 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    9a10:	|  |  \-> movea.l 1cac4 <currentFloor>,a0
    9a16:	|  |      move.l 12(a0),d1
    9a1a:	|  |      move.l 144(sp),d0
    9a1e:	|  |      lsl.l #3,d0
    9a20:	|  |      add.l d0,d1
    9a22:	|  |      movea.l 1cac4 <currentFloor>,a0
    9a28:	|  |      movea.l 12(a0),a1
    9a2c:	|  |      movea.l 152(sp),a0
    9a30:	|  |      move.l 56(a0),d0
    9a34:	|  |      lsl.l #3,d0
    9a36:	|  |      add.l a1,d0
    9a38:	|  |      lea 40(sp),a0
    9a3c:	|  |      move.l a0,-(sp)
    9a3e:	|  |      lea 48(sp),a0
    9a42:	|  |      move.l a0,-(sp)
    9a44:	|  |      move.l d1,-(sp)
    9a46:	|  |      move.l d0,-(sp)
    9a48:	|  |      jsr 164b4 <getMatchingCorners>
    9a4e:	|  |      lea 16(sp),sp
    9a52:	|  |      tst.w d0
    9a54:	|  |  /-- bne.s 9a6a <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    9a56:	|  |  |   pea 1916a <PutChar+0x146e>
    9a5c:	|  |  |   jsr 17232 <KPrintF>
    9a62:	|  |  |   addq.l #4,sp
            return FALSE;
    9a64:	|  |  |   clr.w d0
    9a66:	+--|--|-- bra.w a038 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    9a6a:	|  |  \-> movea.l 152(sp),a0
    9a6e:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    9a74:	|  |      movea.l 152(sp),a0
    9a78:	|  |      move.l (a0),d0
    9a7a:	|  |      move.l d0,-(sp)
    9a7c:	|  |      jsr 175fc <__fixsfsi>
    9a82:	|  |      addq.l #4,sp
    9a84:	|  |      move.l d0,140(sp)
    9a88:	|  |      movea.l 152(sp),a0
    9a8c:	|  |      move.l 4(a0),d0
    9a90:	|  |      move.l d0,-(sp)
    9a92:	|  |      jsr 175fc <__fixsfsi>
    9a98:	|  |      addq.l #4,sp
    9a9a:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    9a9e:	|  |      movea.l 152(sp),a0
    9aa2:	|  |      move.l 40(a0),132(sp)
    9aa8:	|  |      movea.l 152(sp),a0
    9aac:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    9ab2:	|  |      movea.l 1cac4 <currentFloor>,a0
    9ab8:	|  |      move.l 4(a0),d1
    9abc:	|  |      move.l 44(sp),d0
    9ac0:	|  |      lsl.l #3,d0
    9ac2:	|  |      movea.l d1,a0
    9ac4:	|  |      adda.l d0,a0
    9ac6:	|  |      move.l (a0),124(sp)
    9aca:	|  |      movea.l 1cac4 <currentFloor>,a0
    9ad0:	|  |      move.l 4(a0),d1
    9ad4:	|  |      move.l 44(sp),d0
    9ad8:	|  |      lsl.l #3,d0
    9ada:	|  |      movea.l d1,a0
    9adc:	|  |      adda.l d0,a0
    9ade:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    9ae4:	|  |      movea.l 1cac4 <currentFloor>,a0
    9aea:	|  |      move.l 4(a0),d1
    9aee:	|  |      move.l 40(sp),d0
    9af2:	|  |      lsl.l #3,d0
    9af4:	|  |      movea.l d1,a0
    9af6:	|  |      adda.l d0,a0
    9af8:	|  |      move.l (a0),116(sp)
    9afc:	|  |      movea.l 1cac4 <currentFloor>,a0
    9b02:	|  |      move.l 4(a0),d1
    9b06:	|  |      move.l 40(sp),d0
    9b0a:	|  |      lsl.l #3,d0
    9b0c:	|  |      movea.l d1,a0
    9b0e:	|  |      adda.l d0,a0
    9b10:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    9b16:	|  |      move.l 140(sp),d0
    9b1a:	|  |      sub.l 132(sp),d0
    9b1e:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    9b22:	|  |      move.l 136(sp),d0
    9b26:	|  |      sub.l 128(sp),d0
    9b2a:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    9b2e:	|  |      move.l 116(sp),d0
    9b32:	|  |      sub.l 124(sp),d0
    9b36:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    9b3a:	|  |      move.l 112(sp),d0
    9b3e:	|  |      sub.l 120(sp),d0
    9b42:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    9b46:	|  |      move.l 124(sp),d0
    9b4a:	|  |      sub.l 140(sp),d0
    9b4e:	|  |      move.l 104(sp),-(sp)
    9b52:	|  |      move.l d0,-(sp)
    9b54:	|  |      jsr 17be6 <__mulsi3>
    9b5a:	|  |      addq.l #8,sp
    9b5c:	|  |      move.l d0,d2
    9b5e:	|  |      move.l 120(sp),d0
    9b62:	|  |      sub.l 136(sp),d0
    9b66:	|  |      move.l 108(sp),-(sp)
    9b6a:	|  |      move.l d0,-(sp)
    9b6c:	|  |      jsr 17be6 <__mulsi3>
    9b72:	|  |      addq.l #8,sp
    9b74:	|  |      move.l d2,d1
    9b76:	|  |      sub.l d0,d1
    9b78:	|  |      move.l d1,-(sp)
    9b7a:	|  |      jsr 17624 <__floatsidf>
    9b80:	|  |      addq.l #4,sp
    9b82:	|  |      move.l d0,32(sp)
    9b86:	|  |      move.l d1,36(sp)
    9b8a:	|  |      move.l 32(sp),88(sp)
    9b90:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    9b96:	|  |      move.l 96(sp),-(sp)
    9b9a:	|  |      move.l 112(sp),-(sp)
    9b9e:	|  |      jsr 17be6 <__mulsi3>
    9ba4:	|  |      addq.l #8,sp
    9ba6:	|  |      move.l d0,d2
    9ba8:	|  |      move.l 100(sp),-(sp)
    9bac:	|  |      move.l 108(sp),-(sp)
    9bb0:	|  |      jsr 17be6 <__mulsi3>
    9bb6:	|  |      addq.l #8,sp
    9bb8:	|  |      move.l d2,d1
    9bba:	|  |      sub.l d0,d1
    9bbc:	|  |      move.l d1,-(sp)
    9bbe:	|  |      jsr 17624 <__floatsidf>
    9bc4:	|  |      addq.l #4,sp
    9bc6:	|  |      move.l d1,-(sp)
    9bc8:	|  |      move.l d0,-(sp)
    9bca:	|  |      move.l 100(sp),-(sp)
    9bce:	|  |      move.l 100(sp),-(sp)
    9bd2:	|  |      jsr 174b8 <__divdf3>
    9bd8:	|  |      lea 16(sp),sp
    9bdc:	|  |      move.l d0,24(sp)
    9be0:	|  |      move.l d1,28(sp)
    9be4:	|  |      move.l 24(sp),88(sp)
    9bea:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    9bf0:	|  |      clr.l -(sp)
    9bf2:	|  |      clr.l -(sp)
    9bf4:	|  |      move.l 100(sp),-(sp)
    9bf8:	|  |      move.l 100(sp),-(sp)
    9bfc:	|  |      jsr 17782 <__gtdf2>
    9c02:	|  |      lea 16(sp),sp
    9c06:	|  |      tst.l d0
    9c08:	|  |  /-- ble.w 9ce0 <doBorderStuff+0x358>
    9c0c:	|  |  |   clr.l -(sp)
    9c0e:	|  |  |   move.l #1072693248,-(sp)
    9c14:	|  |  |   move.l 100(sp),-(sp)
    9c18:	|  |  |   move.l 100(sp),-(sp)
    9c1c:	|  |  |   jsr 1783c <__ltdf2>
    9c22:	|  |  |   lea 16(sp),sp
    9c26:	|  |  |   tst.l d0
    9c28:	|  |  +-- bge.w 9ce0 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    9c2c:	|  |  |   move.l 124(sp),-(sp)
    9c30:	|  |  |   jsr 17624 <__floatsidf>
    9c36:	|  |  |   addq.l #4,sp
    9c38:	|  |  |   move.l d0,d2
    9c3a:	|  |  |   move.l d1,d3
    9c3c:	|  |  |   move.l 100(sp),-(sp)
    9c40:	|  |  |   jsr 17624 <__floatsidf>
    9c46:	|  |  |   addq.l #4,sp
    9c48:	|  |  |   move.l 92(sp),-(sp)
    9c4c:	|  |  |   move.l 92(sp),-(sp)
    9c50:	|  |  |   move.l d1,-(sp)
    9c52:	|  |  |   move.l d0,-(sp)
    9c54:	|  |  |   jsr 176b4 <__muldf3>
    9c5a:	|  |  |   lea 16(sp),sp
    9c5e:	|  |  |   move.l d1,-(sp)
    9c60:	|  |  |   move.l d0,-(sp)
    9c62:	|  |  |   move.l d3,-(sp)
    9c64:	|  |  |   move.l d2,-(sp)
    9c66:	|  |  |   jsr 17456 <__adddf3>
    9c6c:	|  |  |   lea 16(sp),sp
    9c70:	|  |  |   move.l d1,-(sp)
    9c72:	|  |  |   move.l d0,-(sp)
    9c74:	|  |  |   jsr 175c6 <__fixdfsi>
    9c7a:	|  |  |   addq.l #8,sp
    9c7c:	|  |  |   movea.l 152(sp),a0
    9c80:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    9c84:	|  |  |   move.l 120(sp),-(sp)
    9c88:	|  |  |   jsr 17624 <__floatsidf>
    9c8e:	|  |  |   addq.l #4,sp
    9c90:	|  |  |   move.l d0,d2
    9c92:	|  |  |   move.l d1,d3
    9c94:	|  |  |   move.l 96(sp),-(sp)
    9c98:	|  |  |   jsr 17624 <__floatsidf>
    9c9e:	|  |  |   addq.l #4,sp
    9ca0:	|  |  |   move.l 92(sp),-(sp)
    9ca4:	|  |  |   move.l 92(sp),-(sp)
    9ca8:	|  |  |   move.l d1,-(sp)
    9caa:	|  |  |   move.l d0,-(sp)
    9cac:	|  |  |   jsr 176b4 <__muldf3>
    9cb2:	|  |  |   lea 16(sp),sp
    9cb6:	|  |  |   move.l d1,-(sp)
    9cb8:	|  |  |   move.l d0,-(sp)
    9cba:	|  |  |   move.l d3,-(sp)
    9cbc:	|  |  |   move.l d2,-(sp)
    9cbe:	|  |  |   jsr 17456 <__adddf3>
    9cc4:	|  |  |   lea 16(sp),sp
    9cc8:	|  |  |   move.l d1,-(sp)
    9cca:	|  |  |   move.l d0,-(sp)
    9ccc:	|  |  |   jsr 175c6 <__fixdfsi>
    9cd2:	|  |  |   addq.l #8,sp
    9cd4:	|  |  |   movea.l 152(sp),a0
    9cd8:	|  |  |   move.l d0,52(a0)
    9cdc:	|  +--|-- bra.w 9f38 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    9ce0:	|  |  \-> move.l 140(sp),d0
    9ce4:	|  |      sub.l 124(sp),d0
    9ce8:	|  |      move.l d0,84(sp)
    9cec:	|  |      move.l 140(sp),d0
    9cf0:	|  |      sub.l 116(sp),d0
    9cf4:	|  |      move.l d0,80(sp)
    9cf8:	|  |      move.l 132(sp),d0
    9cfc:	|  |      sub.l 124(sp),d0
    9d00:	|  |      move.l d0,76(sp)
    9d04:	|  |      move.l 132(sp),d0
    9d08:	|  |      sub.l 116(sp),d0
    9d0c:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    9d10:	|  |      move.l 136(sp),d0
    9d14:	|  |      sub.l 120(sp),d0
    9d18:	|  |      move.l d0,68(sp)
    9d1c:	|  |      move.l 136(sp),d0
    9d20:	|  |      sub.l 112(sp),d0
    9d24:	|  |      move.l d0,64(sp)
    9d28:	|  |      move.l 128(sp),d0
    9d2c:	|  |      sub.l 120(sp),d0
    9d30:	|  |      move.l d0,60(sp)
    9d34:	|  |      move.l 128(sp),d0
    9d38:	|  |      sub.l 112(sp),d0
    9d3c:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    9d40:	|  |      move.l 84(sp),-(sp)
    9d44:	|  |      move.l 88(sp),-(sp)
    9d48:	|  |      jsr 17be6 <__mulsi3>
    9d4e:	|  |      addq.l #8,sp
    9d50:	|  |      move.l d0,84(sp)
    9d54:	|  |      move.l 80(sp),-(sp)
    9d58:	|  |      move.l 84(sp),-(sp)
    9d5c:	|  |      jsr 17be6 <__mulsi3>
    9d62:	|  |      addq.l #8,sp
    9d64:	|  |      move.l d0,80(sp)
    9d68:	|  |      move.l 76(sp),-(sp)
    9d6c:	|  |      move.l 80(sp),-(sp)
    9d70:	|  |      jsr 17be6 <__mulsi3>
    9d76:	|  |      addq.l #8,sp
    9d78:	|  |      move.l d0,76(sp)
    9d7c:	|  |      move.l 72(sp),-(sp)
    9d80:	|  |      move.l 76(sp),-(sp)
    9d84:	|  |      jsr 17be6 <__mulsi3>
    9d8a:	|  |      addq.l #8,sp
    9d8c:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    9d90:	|  |      move.l 68(sp),-(sp)
    9d94:	|  |      move.l 72(sp),-(sp)
    9d98:	|  |      jsr 17be6 <__mulsi3>
    9d9e:	|  |      addq.l #8,sp
    9da0:	|  |      move.l d0,68(sp)
    9da4:	|  |      move.l 64(sp),-(sp)
    9da8:	|  |      move.l 68(sp),-(sp)
    9dac:	|  |      jsr 17be6 <__mulsi3>
    9db2:	|  |      addq.l #8,sp
    9db4:	|  |      move.l d0,64(sp)
    9db8:	|  |      move.l 60(sp),-(sp)
    9dbc:	|  |      move.l 64(sp),-(sp)
    9dc0:	|  |      jsr 17be6 <__mulsi3>
    9dc6:	|  |      addq.l #8,sp
    9dc8:	|  |      move.l d0,60(sp)
    9dcc:	|  |      move.l 56(sp),-(sp)
    9dd0:	|  |      move.l 60(sp),-(sp)
    9dd4:	|  |      jsr 17be6 <__mulsi3>
    9dda:	|  |      addq.l #8,sp
    9ddc:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9de0:	|  |      move.l 84(sp),-(sp)
    9de4:	|  |      jsr 17624 <__floatsidf>
    9dea:	|  |      addq.l #4,sp
    9dec:	|  |      move.l d0,d2
    9dee:	|  |      move.l d1,d3
    9df0:	|  |      move.l 68(sp),-(sp)
    9df4:	|  |      jsr 17624 <__floatsidf>
    9dfa:	|  |      addq.l #4,sp
    9dfc:	|  |      move.l d1,-(sp)
    9dfe:	|  |      move.l d0,-(sp)
    9e00:	|  |      move.l d3,-(sp)
    9e02:	|  |      move.l d2,-(sp)
    9e04:	|  |      jsr 17456 <__adddf3>
    9e0a:	|  |      lea 16(sp),sp
    9e0e:	|  |      move.l d1,-(sp)
    9e10:	|  |      move.l d0,-(sp)
    9e12:	|  |      jsr 17b9c <sqrt>
    9e18:	|  |      addq.l #8,sp
    9e1a:	|  |      move.l d0,d2
    9e1c:	|  |      move.l d1,d3
    9e1e:	|  |      move.l 76(sp),-(sp)
    9e22:	|  |      jsr 17624 <__floatsidf>
    9e28:	|  |      addq.l #4,sp
    9e2a:	|  |      move.l d0,d4
    9e2c:	|  |      move.l d1,d5
    9e2e:	|  |      move.l 60(sp),-(sp)
    9e32:	|  |      jsr 17624 <__floatsidf>
    9e38:	|  |      addq.l #4,sp
    9e3a:	|  |      move.l d1,-(sp)
    9e3c:	|  |      move.l d0,-(sp)
    9e3e:	|  |      move.l d5,-(sp)
    9e40:	|  |      move.l d4,-(sp)
    9e42:	|  |      jsr 17456 <__adddf3>
    9e48:	|  |      lea 16(sp),sp
    9e4c:	|  |      move.l d1,-(sp)
    9e4e:	|  |      move.l d0,-(sp)
    9e50:	|  |      jsr 17b9c <sqrt>
    9e56:	|  |      addq.l #8,sp
    9e58:	|  |      move.l d1,-(sp)
    9e5a:	|  |      move.l d0,-(sp)
    9e5c:	|  |      move.l d3,-(sp)
    9e5e:	|  |      move.l d2,-(sp)
    9e60:	|  |      jsr 17456 <__adddf3>
    9e66:	|  |      lea 16(sp),sp
    9e6a:	|  |      move.l d0,d2
    9e6c:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    9e6e:	|  |      move.l 80(sp),-(sp)
    9e72:	|  |      jsr 17624 <__floatsidf>
    9e78:	|  |      addq.l #4,sp
    9e7a:	|  |      move.l d0,d4
    9e7c:	|  |      move.l d1,d5
    9e7e:	|  |      move.l 64(sp),-(sp)
    9e82:	|  |      jsr 17624 <__floatsidf>
    9e88:	|  |      addq.l #4,sp
    9e8a:	|  |      move.l d1,-(sp)
    9e8c:	|  |      move.l d0,-(sp)
    9e8e:	|  |      move.l d5,-(sp)
    9e90:	|  |      move.l d4,-(sp)
    9e92:	|  |      jsr 17456 <__adddf3>
    9e98:	|  |      lea 16(sp),sp
    9e9c:	|  |      move.l d1,-(sp)
    9e9e:	|  |      move.l d0,-(sp)
    9ea0:	|  |      jsr 17b9c <sqrt>
    9ea6:	|  |      addq.l #8,sp
    9ea8:	|  |      move.l d0,d4
    9eaa:	|  |      move.l d1,d5
    9eac:	|  |      move.l 72(sp),-(sp)
    9eb0:	|  |      jsr 17624 <__floatsidf>
    9eb6:	|  |      addq.l #4,sp
    9eb8:	|  |      move.l d0,d6
    9eba:	|  |      move.l d1,d7
    9ebc:	|  |      move.l 56(sp),-(sp)
    9ec0:	|  |      jsr 17624 <__floatsidf>
    9ec6:	|  |      addq.l #4,sp
    9ec8:	|  |      move.l d1,-(sp)
    9eca:	|  |      move.l d0,-(sp)
    9ecc:	|  |      move.l d7,-(sp)
    9ece:	|  |      move.l d6,-(sp)
    9ed0:	|  |      jsr 17456 <__adddf3>
    9ed6:	|  |      lea 16(sp),sp
    9eda:	|  |      move.l d1,-(sp)
    9edc:	|  |      move.l d0,-(sp)
    9ede:	|  |      jsr 17b9c <sqrt>
    9ee4:	|  |      addq.l #8,sp
    9ee6:	|  |      move.l d1,-(sp)
    9ee8:	|  |      move.l d0,-(sp)
    9eea:	|  |      move.l d5,-(sp)
    9eec:	|  |      move.l d4,-(sp)
    9eee:	|  |      jsr 17456 <__adddf3>
    9ef4:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9ef8:	|  |      move.l d1,-(sp)
    9efa:	|  |      move.l d0,-(sp)
    9efc:	|  |      move.l d3,-(sp)
    9efe:	|  |      move.l d2,-(sp)
    9f00:	|  |      jsr 1783c <__ltdf2>
    9f06:	|  |      lea 16(sp),sp
    9f0a:	|  |      tst.l d0
    9f0c:	|  |  /-- bge.s 9f24 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    9f0e:	|  |  |   movea.l 152(sp),a0
    9f12:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    9f18:	|  |  |   movea.l 152(sp),a0
    9f1c:	|  |  |   move.l 120(sp),52(a0)
    9f22:	|  +--|-- bra.s 9f38 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    9f24:	|  |  \-> movea.l 152(sp),a0
    9f28:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    9f2e:	|  |      movea.l 152(sp),a0
    9f32:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    9f38:	|  \----> movea.l 152(sp),a0
    9f3c:	|         move.l 52(a0),d0
    9f40:	|         move.l d0,-(sp)
    9f42:	|         jsr 17664 <__floatsisf>
    9f48:	|         addq.l #4,sp
    9f4a:	|         move.l d0,d1
    9f4c:	|         movea.l 152(sp),a0
    9f50:	|         move.l 4(a0),d0
    9f54:	|         move.l d0,-(sp)
    9f56:	|         move.l d1,-(sp)
    9f58:	|         jsr 17958 <__subsf3>
    9f5e:	|         addq.l #8,sp
    9f60:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    9f64:	|         movea.l 152(sp),a0
    9f68:	|         move.l (a0),d2
    9f6a:	|         movea.l 152(sp),a0
    9f6e:	|         move.l 48(a0),d0
    9f72:	|         move.l d0,-(sp)
    9f74:	|         jsr 17664 <__floatsisf>
    9f7a:	|         addq.l #4,sp
    9f7c:	|         move.l d0,-(sp)
    9f7e:	|         move.l d2,-(sp)
    9f80:	|         jsr 17958 <__subsf3>
    9f86:	|         addq.l #8,sp
    9f88:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    9f8c:	|         clr.l -(sp)
    9f8e:	|         move.l 52(sp),-(sp)
    9f92:	|         jsr 178c0 <__nesf2>
    9f98:	|         addq.l #8,sp
    9f9a:	|         tst.l d0
    9f9c:	|     /-- bne.s 9fb0 <doBorderStuff+0x628>
    9f9e:	|     |   clr.l -(sp)
    9fa0:	|     |   move.l 56(sp),-(sp)
    9fa4:	|     |   jsr 178c0 <__nesf2>
    9faa:	|     |   addq.l #8,sp
    9fac:	|     |   tst.l d0
    9fae:	|  /--|-- beq.s a026 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    9fb0:	|  |  \-> move.l 52(sp),d0
    9fb4:	|  |      move.l d0,-(sp)
    9fb6:	|  |      move.l d0,-(sp)
    9fb8:	|  |      jsr 17420 <__addsf3>
    9fbe:	|  |      addq.l #8,sp
    9fc0:	|  |      move.l d0,-(sp)
    9fc2:	|  |      move.l 52(sp),-(sp)
    9fc6:	|  |      jsr 179ec <atan2f>
    9fcc:	|  |      addq.l #8,sp
    9fce:	|  |      move.l d0,-(sp)
    9fd0:	|  |      jsr 17586 <__extendsfdf2>
    9fd6:	|  |      addq.l #4,sp
    9fd8:	|  |      move.l #-1540411785,-(sp)
    9fde:	|  |      move.l #1078765033,-(sp)
    9fe4:	|  |      move.l d1,-(sp)
    9fe6:	|  |      move.l d0,-(sp)
    9fe8:	|  |      jsr 176b4 <__muldf3>
    9fee:	|  |      lea 16(sp),sp
    9ff2:	|  |      clr.l -(sp)
    9ff4:	|  |      move.l #1080459264,-(sp)
    9ffa:	|  |      move.l d1,-(sp)
    9ffc:	|  |      move.l d0,-(sp)
    9ffe:	|  |      jsr 17456 <__adddf3>
    a004:	|  |      lea 16(sp),sp
    a008:	|  |      move.l d1,-(sp)
    a00a:	|  |      move.l d0,-(sp)
    a00c:	|  |      jsr 175c6 <__fixdfsi>
    a012:	|  |      addq.l #8,sp
    a014:	|  |      movea.l 152(sp),a0
    a018:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    a01c:	|  |      movea.l 152(sp),a0
    a020:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    a026:	|  \----> pea 1 <_start+0x1>
    a02a:	|         move.l 156(sp),-(sp)
    a02e:	|         jsr 8170 <setFrames>
    a034:	|         addq.l #8,sp
    return TRUE;
    a036:	|         moveq #1,d0
}
    a038:	\-------> movem.l (sp)+,d2-d7
    a03c:	          lea 124(sp),sp
    a040:	          rts

0000a042 <drawPeople>:

void drawPeople () {
    a042:	                   lea -24(sp),sp
    a046:	                   move.l d2,-(sp)

	shufflePeople ();
    a048:	                   jsr bade <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    a04e:	                   move.l 1ca0c <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    a056:	                   clr.l 20(sp)
	overRegion = NULL;
    a05a:	                   clr.l 1cabc <overRegion>

	while (thisPerson) {
    a060:	   /-------------- bra.w a612 <drawPeople+0x5d0>
		if (thisPerson -> show) {
    a064:	/--|-------------> movea.l 24(sp),a0
    a068:	|  |               move.w 104(a0),d0
    a06c:	|  |  /----------- beq.w a3c6 <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    a070:	|  |  |            movea.l 24(sp),a0
    a074:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    a07a:	|  |  |            movea.l 24(sp),a0
    a07e:	|  |  |            move.l 76(a0),d0
    a082:	|  |  |            cmp.l 20(sp),d0
    a086:	|  |  |  /-------- beq.w a254 <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    a08a:	|  |  |  |         movea.l 24(sp),a0
    a08e:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    a092:	|  |  |  |         movea.l 24(sp),a0
    a096:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    a09c:	|  |  |  |         movea.l 24(sp),a0
    a0a0:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    a0a4:	|  |  |  |         movea.l 20(sp),a0
    a0a8:	|  |  |  |         movea.l 4(a0),a0
    a0ac:	|  |  |  |         move.l 4(a0),d0
    a0b0:	|  |  |  |         movea.l 24(sp),a0
    a0b4:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a0b8:	|  |  |  |         movea.l 20(sp),a0
    a0bc:	|  |  |  |         movea.l 4(a0),a1
    a0c0:	|  |  |  |         movea.l 24(sp),a0
    a0c4:	|  |  |  |         move.l 84(a0),d0
    a0c8:	|  |  |  |         move.l d0,d1
    a0ca:	|  |  |  |         move.l d1,d0
    a0cc:	|  |  |  |         add.l d0,d0
    a0ce:	|  |  |  |         add.l d1,d0
    a0d0:	|  |  |  |         add.l d0,d0
    a0d2:	|  |  |  |         add.l d0,d0
    a0d4:	|  |  |  |         lea (0,a1,d0.l),a0
    a0d8:	|  |  |  |         move.l 8(a0),d0
    a0dc:	|  |  |  |     /-- ble.w a17e <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a0e0:	|  |  |  |     |   movea.l 20(sp),a0
    a0e4:	|  |  |  |     |   movea.l 4(a0),a1
    a0e8:	|  |  |  |     |   movea.l 24(sp),a0
    a0ec:	|  |  |  |     |   move.l 84(a0),d0
    a0f0:	|  |  |  |     |   move.l d0,d1
    a0f2:	|  |  |  |     |   move.l d1,d0
    a0f4:	|  |  |  |     |   add.l d0,d0
    a0f6:	|  |  |  |     |   add.l d1,d0
    a0f8:	|  |  |  |     |   add.l d0,d0
    a0fa:	|  |  |  |     |   add.l d0,d0
    a0fc:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a100:	|  |  |  |     |   move.l 8(a0),d0
    a104:	|  |  |  |     |   clr.l -(sp)
    a106:	|  |  |  |     |   move.l d0,-(sp)
    a108:	|  |  |  |     |   jsr d1e6 <startSound>
    a10e:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a110:	|  |  |  |     |   movea.l 24(sp),a0
    a114:	|  |  |  |     |   move.l 84(a0),d0
    a118:	|  |  |  |     |   addq.l #1,d0
    a11a:	|  |  |  |     |   movea.l 24(sp),a0
    a11e:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a122:	|  |  |  |     |   movea.l 24(sp),a0
    a126:	|  |  |  |     |   move.l 84(a0),d0
    a12a:	|  |  |  |     |   movea.l 24(sp),a0
    a12e:	|  |  |  |     |   movea.l 72(a0),a0
    a132:	|  |  |  |     |   move.l 8(a0),d1
    a136:	|  |  |  |     |   move.l d1,-(sp)
    a138:	|  |  |  |     |   move.l d0,-(sp)
    a13a:	|  |  |  |     |   jsr 17c92 <__modsi3>
    a140:	|  |  |  |     |   addq.l #8,sp
    a142:	|  |  |  |     |   movea.l 24(sp),a0
    a146:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a14a:	|  |  |  |     |   movea.l 24(sp),a0
    a14e:	|  |  |  |     |   movea.l 72(a0),a0
    a152:	|  |  |  |     |   movea.l 4(a0),a1
    a156:	|  |  |  |     |   movea.l 24(sp),a0
    a15a:	|  |  |  |     |   move.l 84(a0),d0
    a15e:	|  |  |  |     |   move.l d0,d1
    a160:	|  |  |  |     |   move.l d1,d0
    a162:	|  |  |  |     |   add.l d0,d0
    a164:	|  |  |  |     |   add.l d1,d0
    a166:	|  |  |  |     |   add.l d0,d0
    a168:	|  |  |  |     |   add.l d0,d0
    a16a:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a16e:	|  |  |  |     |   move.l 4(a0),d0
    a172:	|  |  |  |     |   movea.l 24(sp),a0
    a176:	|  |  |  |     |   move.l d0,88(a0)
    a17a:	|  |  |  |  /--|-- bra.w a2bc <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a17e:	|  |  |  |  |  \-> movea.l 20(sp),a0
    a182:	|  |  |  |  |      movea.l 4(a0),a1
    a186:	|  |  |  |  |      movea.l 24(sp),a0
    a18a:	|  |  |  |  |      move.l 84(a0),d0
    a18e:	|  |  |  |  |      move.l d0,d1
    a190:	|  |  |  |  |      move.l d1,d0
    a192:	|  |  |  |  |      add.l d0,d0
    a194:	|  |  |  |  |      add.l d1,d0
    a196:	|  |  |  |  |      add.l d0,d0
    a198:	|  |  |  |  |      add.l d0,d0
    a19a:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a19e:	|  |  |  |  |      move.l 8(a0),d0
    a1a2:	|  |  |  |  +----- beq.w a2bc <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a1a6:	|  |  |  |  |      movea.l 1c978 <noStack>,a1
    a1ac:	|  |  |  |  |      movea.l 20(sp),a0
    a1b0:	|  |  |  |  |      move.l 4(a0),d2
    a1b4:	|  |  |  |  |      movea.l 24(sp),a0
    a1b8:	|  |  |  |  |      move.l 84(a0),d0
    a1bc:	|  |  |  |  |      move.l d0,d1
    a1be:	|  |  |  |  |      move.l d1,d0
    a1c0:	|  |  |  |  |      add.l d0,d0
    a1c2:	|  |  |  |  |      add.l d1,d0
    a1c4:	|  |  |  |  |      add.l d0,d0
    a1c6:	|  |  |  |  |      add.l d0,d0
    a1c8:	|  |  |  |  |      movea.l d2,a0
    a1ca:	|  |  |  |  |      adda.l d0,a0
    a1cc:	|  |  |  |  |      move.l 8(a0),d0
    a1d0:	|  |  |  |  |      neg.l d0
    a1d2:	|  |  |  |  |      pea 1 <_start+0x1>
    a1d6:	|  |  |  |  |      move.l a1,-(sp)
    a1d8:	|  |  |  |  |      clr.l -(sp)
    a1da:	|  |  |  |  |      clr.l -(sp)
    a1dc:	|  |  |  |  |      move.l d0,-(sp)
    a1de:	|  |  |  |  |      jsr 6ad4 <startNewFunctionNum>
    a1e4:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a1e8:	|  |  |  |  |      movea.l 24(sp),a0
    a1ec:	|  |  |  |  |      move.l 84(a0),d0
    a1f0:	|  |  |  |  |      addq.l #1,d0
    a1f2:	|  |  |  |  |      movea.l 24(sp),a0
    a1f6:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a1fa:	|  |  |  |  |      movea.l 24(sp),a0
    a1fe:	|  |  |  |  |      move.l 84(a0),d0
    a202:	|  |  |  |  |      movea.l 24(sp),a0
    a206:	|  |  |  |  |      movea.l 72(a0),a0
    a20a:	|  |  |  |  |      move.l 8(a0),d1
    a20e:	|  |  |  |  |      move.l d1,-(sp)
    a210:	|  |  |  |  |      move.l d0,-(sp)
    a212:	|  |  |  |  |      jsr 17c92 <__modsi3>
    a218:	|  |  |  |  |      addq.l #8,sp
    a21a:	|  |  |  |  |      movea.l 24(sp),a0
    a21e:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a222:	|  |  |  |  |      movea.l 24(sp),a0
    a226:	|  |  |  |  |      movea.l 72(a0),a0
    a22a:	|  |  |  |  |      movea.l 4(a0),a1
    a22e:	|  |  |  |  |      movea.l 24(sp),a0
    a232:	|  |  |  |  |      move.l 84(a0),d0
    a236:	|  |  |  |  |      move.l d0,d1
    a238:	|  |  |  |  |      move.l d1,d0
    a23a:	|  |  |  |  |      add.l d0,d0
    a23c:	|  |  |  |  |      add.l d1,d0
    a23e:	|  |  |  |  |      add.l d0,d0
    a240:	|  |  |  |  |      add.l d0,d0
    a242:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a246:	|  |  |  |  |      move.l 4(a0),d0
    a24a:	|  |  |  |  |      movea.l 24(sp),a0
    a24e:	|  |  |  |  |      move.l d0,88(a0)
    a252:	|  |  |  |  +----- bra.s a2bc <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    a254:	|  |  |  \--|----> movea.l 24(sp),a0
    a258:	|  |  |     |      move.l (a0),d0
    a25a:	|  |  |     |      movea.l 24(sp),a0
    a25e:	|  |  |     |      move.l 8(a0),d1
    a262:	|  |  |     |      move.l d1,-(sp)
    a264:	|  |  |     |      move.l d0,-(sp)
    a266:	|  |  |     |      jsr 17550 <__eqsf2>
    a26c:	|  |  |     |      addq.l #8,sp
    a26e:	|  |  |     |      tst.l d0
    a270:	|  |  |     |  /-- bne.s a2b4 <drawPeople+0x272>
    a272:	|  |  |     |  |   movea.l 24(sp),a0
    a276:	|  |  |     |  |   move.l 4(a0),d0
    a27a:	|  |  |     |  |   movea.l 24(sp),a0
    a27e:	|  |  |     |  |   move.l 12(a0),d1
    a282:	|  |  |     |  |   move.l d1,-(sp)
    a284:	|  |  |     |  |   move.l d0,-(sp)
    a286:	|  |  |     |  |   jsr 17550 <__eqsf2>
    a28c:	|  |  |     |  |   addq.l #8,sp
    a28e:	|  |  |     |  |   tst.l d0
    a290:	|  |  |     |  +-- bne.s a2b4 <drawPeople+0x272>
    a292:	|  |  |     |  |   movea.l 20(sp),a0
    a296:	|  |  |     |  |   move.l 8(a0),d0
    a29a:	|  |  |     |  |   moveq #1,d1
    a29c:	|  |  |     |  |   cmp.l d0,d1
    a29e:	|  |  |     |  +-- bne.s a2b4 <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    a2a0:	|  |  |     |  |   movea.l 24(sp),a0
    a2a4:	|  |  |     |  |   move.l 16(a0),d0
    a2a8:	|  |  |     |  |   addq.l #1,d0
    a2aa:	|  |  |     |  |   movea.l 24(sp),a0
    a2ae:	|  |  |     |  |   move.l d0,16(a0)
    a2b2:	|  |  |     +--|-- bra.s a2bc <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    a2b4:	|  |  |     |  \-> movea.l 24(sp),a0
    a2b8:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    a2bc:	|  |  |     \----> movea.l 24(sp),a0
    a2c0:	|  |  |            move.l (a0),d0
    a2c2:	|  |  |            movea.l 24(sp),a0
    a2c6:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    a2ca:	|  |  |            movea.l 24(sp),a0
    a2ce:	|  |  |            move.l 4(a0),d0
    a2d2:	|  |  |            movea.l 24(sp),a0
    a2d6:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    a2da:	|  |  |            movea.l 20(sp),a0
    a2de:	|  |  |            movea.l 4(a0),a1
    a2e2:	|  |  |            movea.l 24(sp),a0
    a2e6:	|  |  |            move.l 84(a0),d0
    a2ea:	|  |  |            move.l d0,d1
    a2ec:	|  |  |            move.l d1,d0
    a2ee:	|  |  |            add.l d0,d0
    a2f0:	|  |  |            add.l d1,d0
    a2f2:	|  |  |            add.l d0,d0
    a2f4:	|  |  |            add.l d0,d0
    a2f6:	|  |  |            lea (0,a1,d0.l),a0
    a2fa:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    a2fe:	|  |  |            move.l 8(sp),d0
    a302:	|  |  |            add.l d0,d0
    a304:	|  |  |            subx.l d0,d0
    a306:	|  |  |            neg.l d0
    a308:	|  |  |            move.b d0,d0
    a30a:	|  |  |            move.b d0,d0
    a30c:	|  |  |            andi.l #255,d0
    a312:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    a316:	|  |  |            move.l 8(sp),-(sp)
    a31a:	|  |  |            jsr 9216 <TF_abs>
    a320:	|  |  |            addq.l #4,sp
    a322:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    a326:	|  |  |            movea.l 20(sp),a0
    a32a:	|  |  |            movea.l (a0),a0
    a32c:	|  |  |            move.l 8(a0),d0
    a330:	|  |  |            cmp.l 12(sp),d0
    a334:	|  |  |        /-- bgt.s a344 <drawPeople+0x302>
				fNum = 0;
    a336:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    a33a:	|  |  |        |   moveq #2,d0
    a33c:	|  |  |        |   sub.l 16(sp),d0
    a340:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    a344:	|  |  |        \-> moveq #2,d1
    a346:	|  |  |            cmp.l 16(sp),d1
    a34a:	|  |  +----------- beq.s a3c6 <drawPeople+0x384>
				BOOL r = FALSE;
    a34c:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    a350:	|  |  |            move.l 16(sp),d0
    a354:	|  |  |            movea.w d0,a0
    a356:	|  |  |            movea.l 20(sp),a1
    a35a:	|  |  |            movea.l (a1),a1
    a35c:	|  |  |            movea.l 16(a1),a1
    a360:	|  |  |            move.l 12(sp),d1
    a364:	|  |  |            move.l d1,d0
    a366:	|  |  |            lsl.l #3,d0
    a368:	|  |  |            sub.l d1,d0
    a36a:	|  |  |            add.l d0,d0
    a36c:	|  |  |            add.l d0,d0
    a36e:	|  |  |            add.l a1,d0
    a370:	|  |  |            move.l a0,-(sp)
    a372:	|  |  |            move.l 28(sp),-(sp)
    a376:	|  |  |            move.l d0,-(sp)
    a378:	|  |  |            jsr 8fac <scaleSprite>
    a37e:	|  |  |            lea 12(sp),sp
    a382:	|  |  |            move.w d0,6(sp)
				if (r) {
    a386:	|  |  +----------- beq.s a3c6 <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    a388:	|  |  |            movea.l 24(sp),a0
    a38c:	|  |  |            movea.l 114(a0),a0
    a390:	|  |  |            movea.l (a0),a0
    a392:	|  |  |            move.b (a0),d0
    a394:	|  |  +----------- beq.s a3c6 <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    a396:	|  |  |            move.l 1ca2c <personRegion+0x1c>,d1
    a39c:	|  |  |            movea.l 24(sp),a0
    a3a0:	|  |  |            move.l 114(a0),d0
    a3a4:	|  |  |            cmp.l d1,d0
    a3a6:	|  |  |        /-- beq.s a3ae <drawPeople+0x36c>
    a3a8:	|  |  |        |   clr.l 1c970 <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    a3ae:	|  |  |        \-> movea.l 24(sp),a0
    a3b2:	|  |  |            move.l 114(a0),d0
    a3b6:	|  |  |            move.l d0,1ca2c <personRegion+0x1c>
						overRegion = & personRegion;
    a3bc:	|  |  |            move.l #117264,1cabc <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    a3c6:	|  |  \----------> movea.l 24(sp),a0
    a3ca:	|  |               move.l 88(a0),d0
    a3ce:	|  |               subq.l #1,d0
    a3d0:	|  |               movea.l 24(sp),a0
    a3d4:	|  |               move.l d0,88(a0)
    a3d8:	|  |               movea.l 24(sp),a0
    a3dc:	|  |               move.l 88(a0),d0
    a3e0:	|  |        /----- bne.w a608 <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    a3e4:	|  |        |      movea.l 24(sp),a0
    a3e8:	|  |        |      move.l 84(a0),d0
    a3ec:	|  |        |      addq.l #1,d0
    a3ee:	|  |        |      movea.l 24(sp),a0
    a3f2:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a3f6:	|  |        |      movea.l 24(sp),a0
    a3fa:	|  |        |      move.l 84(a0),d0
    a3fe:	|  |        |      movea.l 24(sp),a0
    a402:	|  |        |      movea.l 72(a0),a0
    a406:	|  |        |      move.l 8(a0),d1
    a40a:	|  |        |      move.l d1,-(sp)
    a40c:	|  |        |      move.l d0,-(sp)
    a40e:	|  |        |      jsr 17c92 <__modsi3>
    a414:	|  |        |      addq.l #8,sp
    a416:	|  |        |      movea.l 24(sp),a0
    a41a:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a41e:	|  |        |      movea.l 24(sp),a0
    a422:	|  |        |      movea.l 72(a0),a0
    a426:	|  |        |      movea.l 4(a0),a1
    a42a:	|  |        |      movea.l 24(sp),a0
    a42e:	|  |        |      move.l 84(a0),d0
    a432:	|  |        |      move.l d0,d1
    a434:	|  |        |      move.l d1,d0
    a436:	|  |        |      add.l d0,d0
    a438:	|  |        |      add.l d1,d0
    a43a:	|  |        |      add.l d0,d0
    a43c:	|  |        |      add.l d0,d0
    a43e:	|  |        |      lea (0,a1,d0.l),a0
    a442:	|  |        |      move.l 4(a0),d0
    a446:	|  |        |      movea.l 24(sp),a0
    a44a:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    a44e:	|  |        |      movea.l 24(sp),a0
    a452:	|  |        |      move.w 104(a0),d0
    a456:	|  |        +----- beq.w a608 <drawPeople+0x5c6>
    a45a:	|  |        |      tst.l 20(sp)
    a45e:	|  |        +----- beq.w a608 <drawPeople+0x5c6>
    a462:	|  |        |      movea.l 20(sp),a0
    a466:	|  |        |      move.l 4(a0),d0
    a46a:	|  |        +----- beq.w a608 <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a46e:	|  |        |      movea.l 20(sp),a0
    a472:	|  |        |      movea.l 4(a0),a1
    a476:	|  |        |      movea.l 24(sp),a0
    a47a:	|  |        |      move.l 84(a0),d0
    a47e:	|  |        |      move.l d0,d1
    a480:	|  |        |      move.l d1,d0
    a482:	|  |        |      add.l d0,d0
    a484:	|  |        |      add.l d1,d0
    a486:	|  |        |      add.l d0,d0
    a488:	|  |        |      add.l d0,d0
    a48a:	|  |        |      lea (0,a1,d0.l),a0
    a48e:	|  |        |      move.l 8(a0),d0
    a492:	|  |        |  /-- ble.w a534 <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a496:	|  |        |  |   movea.l 20(sp),a0
    a49a:	|  |        |  |   movea.l 4(a0),a1
    a49e:	|  |        |  |   movea.l 24(sp),a0
    a4a2:	|  |        |  |   move.l 84(a0),d0
    a4a6:	|  |        |  |   move.l d0,d1
    a4a8:	|  |        |  |   move.l d1,d0
    a4aa:	|  |        |  |   add.l d0,d0
    a4ac:	|  |        |  |   add.l d1,d0
    a4ae:	|  |        |  |   add.l d0,d0
    a4b0:	|  |        |  |   add.l d0,d0
    a4b2:	|  |        |  |   lea (0,a1,d0.l),a0
    a4b6:	|  |        |  |   move.l 8(a0),d0
    a4ba:	|  |        |  |   clr.l -(sp)
    a4bc:	|  |        |  |   move.l d0,-(sp)
    a4be:	|  |        |  |   jsr d1e6 <startSound>
    a4c4:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a4c6:	|  |        |  |   movea.l 24(sp),a0
    a4ca:	|  |        |  |   move.l 84(a0),d0
    a4ce:	|  |        |  |   addq.l #1,d0
    a4d0:	|  |        |  |   movea.l 24(sp),a0
    a4d4:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a4d8:	|  |        |  |   movea.l 24(sp),a0
    a4dc:	|  |        |  |   move.l 84(a0),d0
    a4e0:	|  |        |  |   movea.l 24(sp),a0
    a4e4:	|  |        |  |   movea.l 72(a0),a0
    a4e8:	|  |        |  |   move.l 8(a0),d1
    a4ec:	|  |        |  |   move.l d1,-(sp)
    a4ee:	|  |        |  |   move.l d0,-(sp)
    a4f0:	|  |        |  |   jsr 17c92 <__modsi3>
    a4f6:	|  |        |  |   addq.l #8,sp
    a4f8:	|  |        |  |   movea.l 24(sp),a0
    a4fc:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a500:	|  |        |  |   movea.l 24(sp),a0
    a504:	|  |        |  |   movea.l 72(a0),a0
    a508:	|  |        |  |   movea.l 4(a0),a1
    a50c:	|  |        |  |   movea.l 24(sp),a0
    a510:	|  |        |  |   move.l 84(a0),d0
    a514:	|  |        |  |   move.l d0,d1
    a516:	|  |        |  |   move.l d1,d0
    a518:	|  |        |  |   add.l d0,d0
    a51a:	|  |        |  |   add.l d1,d0
    a51c:	|  |        |  |   add.l d0,d0
    a51e:	|  |        |  |   add.l d0,d0
    a520:	|  |        |  |   lea (0,a1,d0.l),a0
    a524:	|  |        |  |   move.l 4(a0),d0
    a528:	|  |        |  |   movea.l 24(sp),a0
    a52c:	|  |        |  |   move.l d0,88(a0)
    a530:	|  |        +--|-- bra.w a608 <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a534:	|  |        |  \-> movea.l 20(sp),a0
    a538:	|  |        |      movea.l 4(a0),a1
    a53c:	|  |        |      movea.l 24(sp),a0
    a540:	|  |        |      move.l 84(a0),d0
    a544:	|  |        |      move.l d0,d1
    a546:	|  |        |      move.l d1,d0
    a548:	|  |        |      add.l d0,d0
    a54a:	|  |        |      add.l d1,d0
    a54c:	|  |        |      add.l d0,d0
    a54e:	|  |        |      add.l d0,d0
    a550:	|  |        |      lea (0,a1,d0.l),a0
    a554:	|  |        |      move.l 8(a0),d0
    a558:	|  |        +----- beq.w a608 <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a55c:	|  |        |      movea.l 1c978 <noStack>,a1
    a562:	|  |        |      movea.l 20(sp),a0
    a566:	|  |        |      move.l 4(a0),d2
    a56a:	|  |        |      movea.l 24(sp),a0
    a56e:	|  |        |      move.l 84(a0),d0
    a572:	|  |        |      move.l d0,d1
    a574:	|  |        |      move.l d1,d0
    a576:	|  |        |      add.l d0,d0
    a578:	|  |        |      add.l d1,d0
    a57a:	|  |        |      add.l d0,d0
    a57c:	|  |        |      add.l d0,d0
    a57e:	|  |        |      movea.l d2,a0
    a580:	|  |        |      adda.l d0,a0
    a582:	|  |        |      move.l 8(a0),d0
    a586:	|  |        |      neg.l d0
    a588:	|  |        |      pea 1 <_start+0x1>
    a58c:	|  |        |      move.l a1,-(sp)
    a58e:	|  |        |      clr.l -(sp)
    a590:	|  |        |      clr.l -(sp)
    a592:	|  |        |      move.l d0,-(sp)
    a594:	|  |        |      jsr 6ad4 <startNewFunctionNum>
    a59a:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a59e:	|  |        |      movea.l 24(sp),a0
    a5a2:	|  |        |      move.l 84(a0),d0
    a5a6:	|  |        |      addq.l #1,d0
    a5a8:	|  |        |      movea.l 24(sp),a0
    a5ac:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a5b0:	|  |        |      movea.l 24(sp),a0
    a5b4:	|  |        |      move.l 84(a0),d0
    a5b8:	|  |        |      movea.l 24(sp),a0
    a5bc:	|  |        |      movea.l 72(a0),a0
    a5c0:	|  |        |      move.l 8(a0),d1
    a5c4:	|  |        |      move.l d1,-(sp)
    a5c6:	|  |        |      move.l d0,-(sp)
    a5c8:	|  |        |      jsr 17c92 <__modsi3>
    a5ce:	|  |        |      addq.l #8,sp
    a5d0:	|  |        |      movea.l 24(sp),a0
    a5d4:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a5d8:	|  |        |      movea.l 24(sp),a0
    a5dc:	|  |        |      movea.l 72(a0),a0
    a5e0:	|  |        |      movea.l 4(a0),a1
    a5e4:	|  |        |      movea.l 24(sp),a0
    a5e8:	|  |        |      move.l 84(a0),d0
    a5ec:	|  |        |      move.l d0,d1
    a5ee:	|  |        |      move.l d1,d0
    a5f0:	|  |        |      add.l d0,d0
    a5f2:	|  |        |      add.l d1,d0
    a5f4:	|  |        |      add.l d0,d0
    a5f6:	|  |        |      add.l d0,d0
    a5f8:	|  |        |      lea (0,a1,d0.l),a0
    a5fc:	|  |        |      move.l 4(a0),d0
    a600:	|  |        |      movea.l 24(sp),a0
    a604:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    a608:	|  |        \----> movea.l 24(sp),a0
    a60c:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    a612:	|  \-------------> tst.l 24(sp)
    a616:	\----------------- bne.w a064 <drawPeople+0x22>
	}
}
    a61a:	                   nop
    a61c:	                   nop
    a61e:	                   move.l (sp)+,d2
    a620:	                   lea 24(sp),sp
    a624:	                   rts

0000a626 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    a626:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    a628:	          move.l 1ca0c <allPeople>,(sp)
	while (thisPerson) {
    a62e:	      /-- bra.s a646 <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    a630:	/-----|-> movea.l (sp),a0
    a632:	|     |   movea.l 114(a0),a0
    a636:	|     |   move.l 4(a0),d0
    a63a:	|     |   cmp.l 8(sp),d0
    a63e:	|  /--|-- beq.s a64c <findPerson+0x26>
		thisPerson = thisPerson -> next;
    a640:	|  |  |   movea.l (sp),a0
    a642:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    a646:	|  |  \-> tst.l (sp)
    a648:	\--|----- bne.s a630 <findPerson+0xa>
    a64a:	   |  /-- bra.s a64e <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    a64c:	   \--|-> nop
	}
	return thisPerson;
    a64e:	      \-> move.l (sp),d0
}
    a650:	          addq.l #4,sp
    a652:	          rts

0000a654 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    a654:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    a656:	       move.l 12(sp),-(sp)
    a65a:	       jsr a626 <findPerson>
    a660:	       addq.l #4,sp
    a662:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    a664:	   /-- bne.s a66a <floatCharacter+0x16>
    a666:	   |   clr.w d0
    a668:	/--|-- bra.s a674 <floatCharacter+0x20>
	moveMe -> floaty = f;
    a66a:	|  \-> movea.l (sp),a0
    a66c:	|      move.l 8(sp),24(a0)
	return TRUE;
    a672:	|      moveq #1,d0
}
    a674:	\----> addq.l #4,sp
    a676:	       rts

0000a678 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a678:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    a67a:	          tst.l 8(sp)
    a67e:	      /-- bne.s a68c <forceWalkingPerson+0x14>
    a680:	      |   tst.l 12(sp)
    a684:	      +-- bne.s a68c <forceWalkingPerson+0x14>
    a686:	      |   clr.w d0
    a688:	/-----|-- bra.w a71e <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a68c:	|     \-> move.l 16(sp),-(sp)
    a690:	|         jsr a626 <findPerson>
    a696:	|         addq.l #4,sp
    a698:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    a69a:	|     /-- bne.s a6a0 <forceWalkingPerson+0x28>
    a69c:	|     |   clr.w d0
    a69e:	+-----|-- bra.s a71e <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a6a0:	|     \-> movea.l (sp),a0
    a6a2:	|         move.l 68(a0),d0
    a6a6:	|     /-- beq.s a6b8 <forceWalkingPerson+0x40>
    a6a8:	|     |   movea.l (sp),a0
    a6aa:	|     |   move.l 68(a0),d0
    a6ae:	|     |   move.l d0,-(sp)
    a6b0:	|     |   jsr 4718 <abortFunction>
    a6b6:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    a6b8:	|     \-> movea.l (sp),a0
    a6ba:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    a6c0:	|         movea.l (sp),a0
    a6c2:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    a6c6:	|         movea.l (sp),a0
    a6c8:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    a6ce:	|         movea.l (sp),a0
    a6d0:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    a6d6:	|         movea.l (sp),a0
    a6d8:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    a6de:	|         movea.l (sp),a0
    a6e0:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    a6e4:	|         movea.l (sp),a0
    a6e6:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    a6ea:	|         move.l (sp),-(sp)
    a6ec:	|         jsr 9988 <doBorderStuff>
    a6f2:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    a6f4:	|         pea 1 <_start+0x1>
    a6f8:	|         move.l 4(sp),-(sp)
    a6fc:	|         jsr bf6c <walkMe>
    a702:	|         addq.l #8,sp
    a704:	|         tst.w d0
    a706:	|     /-- bne.s a710 <forceWalkingPerson+0x98>
    a708:	|     |   movea.l (sp),a0
    a70a:	|     |   move.w 66(a0),d0
    a70e:	|  /--|-- beq.s a71c <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    a710:	|  |  \-> movea.l (sp),a0
    a712:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    a718:	|  |      moveq #1,d0
    a71a:	+--|----- bra.s a71e <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    a71c:	|  \----> clr.w d0
    }
}
    a71e:	\-------> addq.l #4,sp
    a720:	          rts

0000a722 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    a722:	                lea -56(sp),sp
    a726:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    a728:	                move.l #320,56(sp)
    a730:	                move.l #200,52(sp)
    a738:	                moveq #-1,d0
    a73a:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    a73e:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a746:	                clr.l 44(sp)
    a74a:	   /----------- bra.w a922 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    a74e:	/--|----------> movea.l 1cac4 <currentFloor>,a0
    a754:	|  |            move.l 12(a0),d1
    a758:	|  |            move.l 44(sp),d0
    a75c:	|  |            lsl.l #3,d0
    a75e:	|  |            movea.l d1,a0
    a760:	|  |            adda.l d0,a0
    a762:	|  |            move.l (a0),d0
    a764:	|  |            move.l d0,d1
    a766:	|  |            subq.l #1,d1
    a768:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a76c:	|  |            clr.l 40(sp)
    a770:	|  |     /----- bra.w a900 <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    a774:	|  |  /--|----> movea.l 1cac4 <currentFloor>,a0
    a77a:	|  |  |  |      move.l 4(a0),d1
    a77e:	|  |  |  |      movea.l 1cac4 <currentFloor>,a0
    a784:	|  |  |  |      movea.l 12(a0),a0
    a788:	|  |  |  |      move.l 44(sp),d0
    a78c:	|  |  |  |      lsl.l #3,d0
    a78e:	|  |  |  |      adda.l d0,a0
    a790:	|  |  |  |      movea.l 4(a0),a0
    a794:	|  |  |  |      move.l 40(sp),d0
    a798:	|  |  |  |      add.l d0,d0
    a79a:	|  |  |  |      add.l d0,d0
    a79c:	|  |  |  |      adda.l d0,a0
    a79e:	|  |  |  |      move.l (a0),d0
    a7a0:	|  |  |  |      lsl.l #3,d0
    a7a2:	|  |  |  |      movea.l d1,a0
    a7a4:	|  |  |  |      adda.l d0,a0
    a7a6:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    a7aa:	|  |  |  |      movea.l 1cac4 <currentFloor>,a0
    a7b0:	|  |  |  |      move.l 4(a0),d1
    a7b4:	|  |  |  |      movea.l 1cac4 <currentFloor>,a0
    a7ba:	|  |  |  |      movea.l 12(a0),a0
    a7be:	|  |  |  |      move.l 44(sp),d0
    a7c2:	|  |  |  |      lsl.l #3,d0
    a7c4:	|  |  |  |      adda.l d0,a0
    a7c6:	|  |  |  |      movea.l 4(a0),a0
    a7ca:	|  |  |  |      move.l 40(sp),d0
    a7ce:	|  |  |  |      add.l d0,d0
    a7d0:	|  |  |  |      add.l d0,d0
    a7d2:	|  |  |  |      adda.l d0,a0
    a7d4:	|  |  |  |      move.l (a0),d0
    a7d6:	|  |  |  |      lsl.l #3,d0
    a7d8:	|  |  |  |      movea.l d1,a0
    a7da:	|  |  |  |      adda.l d0,a0
    a7dc:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    a7e2:	|  |  |  |      movea.l 1cac4 <currentFloor>,a0
    a7e8:	|  |  |  |      move.l 4(a0),d1
    a7ec:	|  |  |  |      movea.l 1cac4 <currentFloor>,a0
    a7f2:	|  |  |  |      movea.l 12(a0),a0
    a7f6:	|  |  |  |      move.l 44(sp),d0
    a7fa:	|  |  |  |      lsl.l #3,d0
    a7fc:	|  |  |  |      adda.l d0,a0
    a7fe:	|  |  |  |      movea.l 4(a0),a0
    a802:	|  |  |  |      move.l 36(sp),d0
    a806:	|  |  |  |      add.l d0,d0
    a808:	|  |  |  |      add.l d0,d0
    a80a:	|  |  |  |      adda.l d0,a0
    a80c:	|  |  |  |      move.l (a0),d0
    a80e:	|  |  |  |      lsl.l #3,d0
    a810:	|  |  |  |      movea.l d1,a0
    a812:	|  |  |  |      adda.l d0,a0
    a814:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    a818:	|  |  |  |      movea.l 1cac4 <currentFloor>,a0
    a81e:	|  |  |  |      move.l 4(a0),d1
    a822:	|  |  |  |      movea.l 1cac4 <currentFloor>,a0
    a828:	|  |  |  |      movea.l 12(a0),a0
    a82c:	|  |  |  |      move.l 44(sp),d0
    a830:	|  |  |  |      lsl.l #3,d0
    a832:	|  |  |  |      adda.l d0,a0
    a834:	|  |  |  |      movea.l 4(a0),a0
    a838:	|  |  |  |      move.l 36(sp),d0
    a83c:	|  |  |  |      add.l d0,d0
    a83e:	|  |  |  |      add.l d0,d0
    a840:	|  |  |  |      adda.l d0,a0
    a842:	|  |  |  |      move.l (a0),d0
    a844:	|  |  |  |      lsl.l #3,d0
    a846:	|  |  |  |      movea.l d1,a0
    a848:	|  |  |  |      adda.l d0,a0
    a84a:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    a850:	|  |  |  |      movea.l 68(sp),a0
    a854:	|  |  |  |      move.l (a0),d1
    a856:	|  |  |  |      movea.l 64(sp),a0
    a85a:	|  |  |  |      move.l (a0),d0
    a85c:	|  |  |  |      move.l d1,-(sp)
    a85e:	|  |  |  |      move.l d0,-(sp)
    a860:	|  |  |  |      move.l 24(sp),-(sp)
    a864:	|  |  |  |      move.l 32(sp),-(sp)
    a868:	|  |  |  |      move.l 40(sp),-(sp)
    a86c:	|  |  |  |      move.l 48(sp),-(sp)
    a870:	|  |  |  |      lea 28(sp),a0
    a874:	|  |  |  |      move.l a0,-(sp)
    a876:	|  |  |  |      lea 36(sp),a0
    a87a:	|  |  |  |      move.l a0,-(sp)
    a87c:	|  |  |  |      jsr 1604c <closestPointOnLine>
    a882:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    a886:	|  |  |  |      movea.l 64(sp),a0
    a88a:	|  |  |  |      move.l (a0),d0
    a88c:	|  |  |  |      move.l 8(sp),d1
    a890:	|  |  |  |      move.l d0,d2
    a892:	|  |  |  |      sub.l d1,d2
    a894:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    a898:	|  |  |  |      movea.l 68(sp),a0
    a89c:	|  |  |  |      move.l (a0),d0
    a89e:	|  |  |  |      move.l 4(sp),d1
    a8a2:	|  |  |  |      move.l d0,d2
    a8a4:	|  |  |  |      sub.l d1,d2
    a8a6:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    a8aa:	|  |  |  |      move.l 28(sp),-(sp)
    a8ae:	|  |  |  |      move.l 32(sp),-(sp)
    a8b2:	|  |  |  |      jsr 17be6 <__mulsi3>
    a8b8:	|  |  |  |      addq.l #8,sp
    a8ba:	|  |  |  |      move.l d0,d2
    a8bc:	|  |  |  |      move.l 24(sp),-(sp)
    a8c0:	|  |  |  |      move.l 28(sp),-(sp)
    a8c4:	|  |  |  |      jsr 17be6 <__mulsi3>
    a8ca:	|  |  |  |      addq.l #8,sp
    a8cc:	|  |  |  |      move.l d2,d1
    a8ce:	|  |  |  |      add.l d0,d1
    a8d0:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    a8d4:	|  |  |  |      move.l 12(sp),d2
    a8d8:	|  |  |  |      cmp.l 32(sp),d2
    a8dc:	|  |  |  |  /-- bge.s a8f6 <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    a8de:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    a8e4:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    a8ea:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    a8f0:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    a8f6:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a8fc:	|  |  |  |      addq.l #1,40(sp)
    a900:	|  |  |  \----> movea.l 1cac4 <currentFloor>,a0
    a906:	|  |  |         move.l 12(a0),d1
    a90a:	|  |  |         move.l 44(sp),d0
    a90e:	|  |  |         lsl.l #3,d0
    a910:	|  |  |         movea.l d1,a0
    a912:	|  |  |         adda.l d0,a0
    a914:	|  |  |         move.l (a0),d0
    a916:	|  |  |         cmp.l 40(sp),d0
    a91a:	|  |  \-------- bgt.w a774 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a91e:	|  |            addq.l #1,44(sp)
    a922:	|  \----------> movea.l 1cac4 <currentFloor>,a0
    a928:	|               move.l 8(a0),d0
    a92c:	|               cmp.l 44(sp),d0
    a930:	\-------------- bgt.w a74e <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    a934:	                moveq #-1,d0
    a936:	                cmp.l 48(sp),d0
    a93a:	            /-- bne.s a940 <handleClosestPoint+0x21e>
    a93c:	            |   clr.w d0
    a93e:	         /--|-- bra.s a95a <handleClosestPoint+0x238>
	*setX = gotX;
    a940:	         |  \-> movea.l 64(sp),a0
    a944:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    a948:	         |      movea.l 68(sp),a0
    a94c:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    a950:	         |      movea.l 72(sp),a0
    a954:	         |      move.l 48(sp),(a0)

	return TRUE;
    a958:	         |      moveq #1,d0
}
    a95a:	         \----> move.l (sp)+,d2
    a95c:	                lea 56(sp),sp
    a960:	                rts

0000a962 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    a962:	clr.l 1ca20 <personRegion+0x10>
	personRegion.sY = 0;
    a968:	clr.l 1ca24 <personRegion+0x14>
	personRegion.di = -1;
    a96e:	moveq #-1,d0
    a970:	move.l d0,1ca28 <personRegion+0x18>
	allScreenRegions = NULL;
    a976:	clr.l 1cab8 <allScreenRegions>

	return TRUE;
    a97c:	moveq #1,d0
}
    a97e:	rts

0000a980 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    a980:	          subq.l #4,sp
    a982:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    a984:	          tst.l 12(sp)
    a988:	      /-- bne.s a990 <jumpPerson+0x10>
    a98a:	      |   tst.l 16(sp)
    a98e:	/-----|-- beq.s aa04 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a990:	|     \-> move.l 20(sp),-(sp)
    a994:	|         jsr a626 <findPerson>
    a99a:	|         addq.l #4,sp
    a99c:	|         move.l d0,4(sp)
    if (!moveMe) return;
    a9a0:	|  /----- beq.s aa08 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a9a2:	|  |      movea.l 4(sp),a0
    a9a6:	|  |      move.l 68(a0),d0
    a9aa:	|  |  /-- beq.s a9be <jumpPerson+0x3e>
    a9ac:	|  |  |   movea.l 4(sp),a0
    a9b0:	|  |  |   move.l 68(a0),d0
    a9b4:	|  |  |   move.l d0,-(sp)
    a9b6:	|  |  |   jsr 4718 <abortFunction>
    a9bc:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    a9be:	|  |  \-> movea.l 4(sp),a0
    a9c2:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    a9c6:	|  |      movea.l 4(sp),a0
    a9ca:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    a9ce:	|  |      movea.l 4(sp),a0
    a9d2:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    a9d6:	|  |      move.l 16(sp),-(sp)
    a9da:	|  |      jsr 17664 <__floatsisf>
    a9e0:	|  |      addq.l #4,sp
    a9e2:	|  |      move.l d0,d2
    a9e4:	|  |      move.l 12(sp),-(sp)
    a9e8:	|  |      jsr 17664 <__floatsisf>
    a9ee:	|  |      addq.l #4,sp
    a9f0:	|  |      move.l d2,-(sp)
    a9f2:	|  |      move.l d0,-(sp)
    a9f4:	|  |      move.l 12(sp),-(sp)
    a9f8:	|  |      jsr ad6e <moveAndScale>
    a9fe:	|  |      lea 12(sp),sp
    aa02:	|  |  /-- bra.s aa0a <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    aa04:	\--|--|-> nop
    aa06:	   |  +-- bra.s aa0a <jumpPerson+0x8a>
    if (!moveMe) return;
    aa08:	   \--|-> nop
}
    aa0a:	      \-> move.l (sp)+,d2
    aa0c:	          addq.l #4,sp
    aa0e:	          rts

0000aa10 <killAllPeople>:


void killAllPeople () {
    aa10:	          subq.l #8,sp
    aa12:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    aa14:	   /----- bra.s aa80 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    aa16:	/--|----> movea.l 1ca0c <allPeople>,a0
    aa1c:	|  |      move.l 68(a0),d0
    aa20:	|  |  /-- beq.s aa36 <killAllPeople+0x26>
    aa22:	|  |  |   movea.l 1ca0c <allPeople>,a0
    aa28:	|  |  |   move.l 68(a0),d0
    aa2c:	|  |  |   move.l d0,-(sp)
    aa2e:	|  |  |   jsr 4718 <abortFunction>
    aa34:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    aa36:	|  |  \-> movea.l 1ca0c <allPeople>,a0
    aa3c:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    aa40:	|  |      move.l 1ca0c <allPeople>,8(sp)
		allPeople = allPeople -> next;
    aa48:	|  |      movea.l 1ca0c <allPeople>,a0
    aa4e:	|  |      move.l 36(a0),d0
    aa52:	|  |      move.l d0,1ca0c <allPeople>
		removeObjectType (killPeople -> thisType);
    aa58:	|  |      movea.l 8(sp),a0
    aa5c:	|  |      move.l 114(a0),d0
    aa60:	|  |      move.l d0,-(sp)
    aa62:	|  |      jsr d8c4 <removeObjectType>
    aa68:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    aa6a:	|  |      move.l 8(sp),4(sp)
    aa70:	|  |      move.l 1c9a8 <SysBase>,d0
    aa76:	|  |      movea.l d0,a6
    aa78:	|  |      movea.l 4(sp),a1
    aa7c:	|  |      jsr -690(a6)
	while (allPeople) {
    aa80:	|  \----> move.l 1ca0c <allPeople>,d0
    aa86:	\-------- bne.s aa16 <killAllPeople+0x6>
	}
}
    aa88:	          nop
    aa8a:	          nop
    aa8c:	          movea.l (sp)+,a6
    aa8e:	          addq.l #8,sp
    aa90:	          rts

0000aa92 <killMostPeople>:

void killMostPeople() {
    aa92:	          lea -12(sp),sp
    aa96:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    aa98:	          move.l #117260,12(sp)

    while (*lookyHere) {
    aaa0:	   /----- bra.w ab26 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    aaa4:	/--|----> movea.l 12(sp),a0
    aaa8:	|  |      movea.l (a0),a0
    aaaa:	|  |      move.l 118(a0),d0
    aaae:	|  |      moveq #32,d1
    aab0:	|  |      and.l d1,d0
    aab2:	|  |  /-- beq.s aac4 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    aab4:	|  |  |   movea.l 12(sp),a0
    aab8:	|  |  |   move.l (a0),d0
    aaba:	|  |  |   moveq #36,d1
    aabc:	|  |  |   add.l d0,d1
    aabe:	|  |  |   move.l d1,12(sp)
    aac2:	|  +--|-- bra.s ab26 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    aac4:	|  |  \-> movea.l 12(sp),a0
    aac8:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    aacc:	|  |      movea.l 8(sp),a0
    aad0:	|  |      move.l 36(a0),d0
    aad4:	|  |      movea.l 12(sp),a0
    aad8:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    aada:	|  |      movea.l 8(sp),a0
    aade:	|  |      move.l 68(a0),d0
    aae2:	|  |  /-- beq.s aaf6 <killMostPeople+0x64>
    aae4:	|  |  |   movea.l 8(sp),a0
    aae8:	|  |  |   move.l 68(a0),d0
    aaec:	|  |  |   move.l d0,-(sp)
    aaee:	|  |  |   jsr 4718 <abortFunction>
    aaf4:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    aaf6:	|  |  \-> movea.l 8(sp),a0
    aafa:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    aafe:	|  |      movea.l 8(sp),a0
    ab02:	|  |      move.l 114(a0),d0
    ab06:	|  |      move.l d0,-(sp)
    ab08:	|  |      jsr d8c4 <removeObjectType>
    ab0e:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    ab10:	|  |      move.l 8(sp),4(sp)
    ab16:	|  |      move.l 1c9a8 <SysBase>,d0
    ab1c:	|  |      movea.l d0,a6
    ab1e:	|  |      movea.l 4(sp),a1
    ab22:	|  |      jsr -690(a6)
    while (*lookyHere) {
    ab26:	|  \----> movea.l 12(sp),a0
    ab2a:	|         move.l (a0),d0
    ab2c:	\-------- bne.w aaa4 <killMostPeople+0x12>
        }
    }
}
    ab30:	          nop
    ab32:	          nop
    ab34:	          movea.l (sp)+,a6
    ab36:	          lea 12(sp),sp
    ab3a:	          rts

0000ab3c <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    ab3c:	clr.l -(sp)
    ab3e:	move.l sp,d0
    ab40:	addq.l #8,d0
    ab42:	move.l d0,-(sp)
    ab44:	jsr 8170 <setFrames>
    ab4a:	addq.l #8,sp
}
    ab4c:	nop
    ab4e:	rts

0000ab50 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    ab50:	          lea -12(sp),sp
    ab54:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    ab56:	          tst.l 20(sp)
    ab5a:	      /-- bne.s ab68 <makeWalkingPerson+0x18>
    ab5c:	      |   tst.l 24(sp)
    ab60:	      +-- bne.s ab68 <makeWalkingPerson+0x18>
    ab62:	      |   clr.w d0
    ab64:	/-----|-- bra.w ad00 <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    ab68:	|     \-> movea.l 1cac4 <currentFloor>,a0
    ab6e:	|         move.l 8(a0),d0
    ab72:	|     /-- bne.s ab7a <makeWalkingPerson+0x2a>
    ab74:	|     |   clr.w d0
    ab76:	+-----|-- bra.w ad00 <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    ab7a:	|     \-> move.l 28(sp),-(sp)
    ab7e:	|         jsr a626 <findPerson>
    ab84:	|         addq.l #4,sp
    ab86:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    ab8a:	|     /-- bne.s ab92 <makeWalkingPerson+0x42>
    ab8c:	|     |   clr.w d0
    ab8e:	+-----|-- bra.w ad00 <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    ab92:	|     \-> movea.l 12(sp),a0
    ab96:	|         move.l 68(a0),d0
    ab9a:	|     /-- beq.s abae <makeWalkingPerson+0x5e>
    ab9c:	|     |   movea.l 12(sp),a0
    aba0:	|     |   move.l 68(a0),d0
    aba4:	|     |   move.l d0,-(sp)
    aba6:	|     |   jsr 4718 <abortFunction>
    abac:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    abae:	|     \-> movea.l 12(sp),a0
    abb2:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    abb6:	|         movea.l 12(sp),a0
    abba:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    abc0:	|         movea.l 12(sp),a0
    abc4:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    abca:	|         movea.l 12(sp),a0
    abce:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    abd4:	|         movea.l 12(sp),a0
    abd8:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    abde:	|         move.l 24(sp),-(sp)
    abe2:	|         move.l 24(sp),-(sp)
    abe6:	|         jsr 16594 <inFloor>
    abec:	|         addq.l #8,sp
    abee:	|         movea.l 12(sp),a0
    abf2:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    abf6:	|         movea.l 12(sp),a0
    abfa:	|         move.l 60(a0),d0
    abfe:	|         moveq #-1,d1
    ac00:	|         cmp.l d0,d1
    ac02:	|     /-- bne.s ac32 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    ac04:	|     |   movea.w #60,a0
    ac08:	|     |   adda.l 12(sp),a0
    ac0c:	|     |   moveq #44,d1
    ac0e:	|     |   add.l 12(sp),d1
    ac12:	|     |   moveq #40,d0
    ac14:	|     |   add.l 12(sp),d0
    ac18:	|     |   move.l a0,-(sp)
    ac1a:	|     |   move.l d1,-(sp)
    ac1c:	|     |   move.l d0,-(sp)
    ac1e:	|     |   jsr a722 <handleClosestPoint>
    ac24:	|     |   lea 12(sp),sp
    ac28:	|     |   tst.w d0
    ac2a:	|     +-- bne.s ac32 <makeWalkingPerson+0xe2>
    ac2c:	|     |   clr.w d0
    ac2e:	+-----|-- bra.w ad00 <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    ac32:	|     \-> movea.l 12(sp),a0
    ac36:	|         move.l 4(a0),d0
    ac3a:	|         move.l d0,-(sp)
    ac3c:	|         jsr 175fc <__fixsfsi>
    ac42:	|         addq.l #4,sp
    ac44:	|         move.l d0,d2
    ac46:	|         movea.l 12(sp),a0
    ac4a:	|         move.l (a0),d0
    ac4c:	|         move.l d0,-(sp)
    ac4e:	|         jsr 175fc <__fixsfsi>
    ac54:	|         addq.l #4,sp
    ac56:	|         move.l d2,-(sp)
    ac58:	|         move.l d0,-(sp)
    ac5a:	|         jsr 16594 <inFloor>
    ac60:	|         addq.l #8,sp
    ac62:	|         movea.l 12(sp),a0
    ac66:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    ac6a:	|         movea.l 12(sp),a0
    ac6e:	|         move.l 56(a0),d0
    ac72:	|         moveq #-1,d1
    ac74:	|         cmp.l d0,d1
    ac76:	|     /-- bne.s acc8 <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    ac78:	|     |   movea.l 12(sp),a0
    ac7c:	|     |   move.l (a0),d0
    ac7e:	|     |   move.l d0,-(sp)
    ac80:	|     |   jsr 175fc <__fixsfsi>
    ac86:	|     |   addq.l #4,sp
    ac88:	|     |   move.l d0,8(sp)
    ac8c:	|     |   movea.l 12(sp),a0
    ac90:	|     |   move.l 4(a0),d0
    ac94:	|     |   move.l d0,-(sp)
    ac96:	|     |   jsr 175fc <__fixsfsi>
    ac9c:	|     |   addq.l #4,sp
    ac9e:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    aca2:	|     |   moveq #56,d0
    aca4:	|     |   add.l 12(sp),d0
    aca8:	|     |   move.l d0,-(sp)
    acaa:	|     |   lea 8(sp),a0
    acae:	|     |   move.l a0,-(sp)
    acb0:	|     |   moveq #16,d0
    acb2:	|     |   add.l sp,d0
    acb4:	|     |   move.l d0,-(sp)
    acb6:	|     |   jsr a722 <handleClosestPoint>
    acbc:	|     |   lea 12(sp),sp
    acc0:	|     |   tst.w d0
    acc2:	|     +-- bne.s acc8 <makeWalkingPerson+0x178>
    acc4:	|     |   clr.w d0
    acc6:	+-----|-- bra.s ad00 <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    acc8:	|     \-> move.l 12(sp),-(sp)
    accc:	|         jsr 9988 <doBorderStuff>
    acd2:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    acd4:	|         clr.l -(sp)
    acd6:	|         move.l 16(sp),-(sp)
    acda:	|         jsr bf6c <walkMe>
    ace0:	|         addq.l #8,sp
    ace2:	|         tst.w d0
    ace4:	|     /-- bne.s acf0 <makeWalkingPerson+0x1a0>
    ace6:	|     |   movea.l 12(sp),a0
    acea:	|     |   move.w 66(a0),d0
    acee:	|  /--|-- beq.s acfe <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    acf0:	|  |  \-> movea.l 12(sp),a0
    acf4:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    acfa:	|  |      moveq #1,d0
    acfc:	+--|----- bra.s ad00 <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    acfe:	|  \----> clr.w d0
	}
}
    ad00:	\-------> move.l (sp)+,d2
    ad02:	          lea 12(sp),sp
    ad06:	          rts

0000ad08 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    ad08:	       lea -16(sp),sp
    ad0c:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    ad0e:	       moveq #12,d0
    ad10:	       move.l d0,16(sp)
    ad14:	       clr.l 12(sp)
    ad18:	       move.l 1c9a8 <SysBase>,d0
    ad1e:	       movea.l d0,a6
    ad20:	       move.l 16(sp),d0
    ad24:	       move.l 12(sp),d1
    ad28:	       jsr -684(a6)
    ad2c:	       move.l d0,8(sp)
    ad30:	       move.l 8(sp),d0
    ad34:	       move.l d0,4(sp)
    if(newAnim == 0) {
    ad38:	   /-- bne.s ad4c <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    ad3a:	   |   pea 191ea <PutChar+0x14ee>
    ad40:	   |   jsr 17232 <KPrintF>
    ad46:	   |   addq.l #4,sp
        return NULL;    
    ad48:	   |   moveq #0,d0
    ad4a:	/--|-- bra.s ad66 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    ad4c:	|  \-> movea.l 4(sp),a0
    ad50:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    ad52:	|      movea.l 4(sp),a0
    ad56:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    ad5a:	|      movea.l 4(sp),a0
    ad5e:	|      clr.l 4(a0)
	return newAnim;
    ad62:	|      move.l 4(sp),d0
}
    ad66:	\----> movea.l (sp)+,a6
    ad68:	       lea 16(sp),sp
    ad6c:	       rts

0000ad6e <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    ad6e:	    move.l d2,-(sp)
	me->x = x;
    ad70:	    movea.l 8(sp),a0
    ad74:	    move.l 12(sp),(a0)
	me->y = y;
    ad78:	    movea.l 8(sp),a0
    ad7c:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    ad82:	    movea.l 8(sp),a0
    ad86:	    clr.l 8(a0)
	me->oldy = 0;
    ad8a:	    movea.l 8(sp),a0
    ad8e:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    ad92:	    movea.l 8(sp),a0
    ad96:	    move.l 118(a0),d0
    ad9a:	    moveq #2,d1
    ad9c:	    and.l d1,d0
    ad9e:	/-- bne.s adf6 <moveAndScale+0x88>
    ada0:	|   move.w 1c33c <scaleDivide>,d0
    ada6:	+-- beq.s adf6 <moveAndScale+0x88>
    ada8:	|   movea.l 8(sp),a0
    adac:	|   move.l 4(a0),d2
    adb0:	|   move.w 1c33a <scaleHorizon>,d0
    adb6:	|   movea.w d0,a0
    adb8:	|   move.l a0,-(sp)
    adba:	|   jsr 17664 <__floatsisf>
    adc0:	|   addq.l #4,sp
    adc2:	|   move.l d0,-(sp)
    adc4:	|   move.l d2,-(sp)
    adc6:	|   jsr 17958 <__subsf3>
    adcc:	|   addq.l #8,sp
    adce:	|   move.l d0,d2
    add0:	|   move.w 1c33c <scaleDivide>,d0
    add6:	|   movea.w d0,a0
    add8:	|   move.l a0,-(sp)
    adda:	|   jsr 17664 <__floatsisf>
    ade0:	|   addq.l #4,sp
    ade2:	|   move.l d0,-(sp)
    ade4:	|   move.l d2,-(sp)
    ade6:	|   jsr 1751a <__divsf3>
    adec:	|   addq.l #8,sp
    adee:	|   movea.l 8(sp),a0
    adf2:	|   move.l d0,32(a0)
}
    adf6:	\-> nop
    adf8:	    move.l (sp)+,d2
    adfa:	    rts

0000adfc <removeOneCharacter>:

void removeOneCharacter (int i) {
    adfc:	          lea -16(sp),sp
    ae00:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    ae02:	          move.l 24(sp),-(sp)
    ae06:	          jsr a626 <findPerson>
    ae0c:	          addq.l #4,sp
    ae0e:	          move.l d0,8(sp)

    if (p) {
    ae12:	/-------- beq.w aef2 <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    ae16:	|         move.l 1cabc <overRegion>,d0
    ae1c:	|         cmpi.l #117264,d0
    ae22:	|     /-- bne.s ae40 <removeOneCharacter+0x44>
    ae24:	|     |   movea.l 1cabc <overRegion>,a0
    ae2a:	|     |   move.l 28(a0),d1
    ae2e:	|     |   movea.l 8(sp),a0
    ae32:	|     |   move.l 114(a0),d0
    ae36:	|     |   cmp.l d1,d0
    ae38:	|     +-- bne.s ae40 <removeOneCharacter+0x44>
            overRegion = NULL;
    ae3a:	|     |   clr.l 1cabc <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    ae40:	|     \-> movea.l 8(sp),a0
    ae44:	|         move.l 68(a0),d0
    ae48:	|     /-- beq.s ae5c <removeOneCharacter+0x60>
    ae4a:	|     |   movea.l 8(sp),a0
    ae4e:	|     |   move.l 68(a0),d0
    ae52:	|     |   move.l d0,-(sp)
    ae54:	|     |   jsr 4718 <abortFunction>
    ae5a:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    ae5c:	|     \-> movea.l 8(sp),a0
    ae60:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    ae64:	|         clr.l 12(sp)
    ae68:	|     /-- bra.s ae90 <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    ae6a:	|  /--|-> movea.l 8(sp),a0
    ae6e:	|  |  |   movea.l 80(a0),a0
    ae72:	|  |  |   move.l (a0),d1
    ae74:	|  |  |   move.l 12(sp),d0
    ae78:	|  |  |   add.l d0,d0
    ae7a:	|  |  |   add.l d0,d0
    ae7c:	|  |  |   movea.l d1,a0
    ae7e:	|  |  |   adda.l d0,a0
    ae80:	|  |  |   move.l (a0),d0
    ae82:	|  |  |   move.l d0,-(sp)
    ae84:	|  |  |   jsr 9904 <deleteAnim>
    ae8a:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    ae8c:	|  |  |   addq.l #1,12(sp)
    ae90:	|  |  \-> moveq #2,d0
    ae92:	|  |      cmp.l 12(sp),d0
    ae96:	|  \----- bge.s ae6a <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    ae98:	|         move.l #117260,16(sp)
    aea0:	|     /-- bra.s aeb0 <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    aea2:	|  /--|-> movea.l 16(sp),a0
    aea6:	|  |  |   move.l (a0),d0
    aea8:	|  |  |   moveq #36,d1
    aeaa:	|  |  |   add.l d0,d1
    aeac:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    aeb0:	|  |  \-> movea.l 16(sp),a0
    aeb4:	|  |      move.l (a0),d0
    aeb6:	|  |      cmp.l 8(sp),d0
    aeba:	|  \----- bne.s aea2 <removeOneCharacter+0xa6>

        *killPeople = p->next;
    aebc:	|         movea.l 8(sp),a0
    aec0:	|         move.l 36(a0),d0
    aec4:	|         movea.l 16(sp),a0
    aec8:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    aeca:	|         movea.l 8(sp),a0
    aece:	|         move.l 114(a0),d0
    aed2:	|         move.l d0,-(sp)
    aed4:	|         jsr d8c4 <removeObjectType>
    aeda:	|         addq.l #4,sp
        FreeVec(p);
    aedc:	|         move.l 8(sp),4(sp)
    aee2:	|         move.l 1c9a8 <SysBase>,d0
    aee8:	|         movea.l d0,a6
    aeea:	|         movea.l 4(sp),a1
    aeee:	|         jsr -690(a6)
    }
}
    aef2:	\-------> nop
    aef4:	          movea.l (sp)+,a6
    aef6:	          lea 16(sp),sp
    aefa:	          rts

0000aefc <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    aefc:	       subq.l #8,sp
    aefe:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    af00:	       movea.l 16(sp),a0
    af04:	       movea.l 80(a0),a0
    af08:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    af0e:	       movea.l 16(sp),a0
    af12:	       move.l 92(a0),d2
    af16:	       move.l 4(sp),-(sp)
    af1a:	       pea b4 <_start+0xb4>
    af1e:	       jsr 17c64 <__divsi3>
    af24:	       addq.l #8,sp
    af26:	       add.l d2,d0
    af28:	       move.l d0,d1
    af2a:	       addi.l #180,d1
    af30:	       movea.l 16(sp),a0
    af34:	       move.l 100(a0),d0
    af38:	       move.l d1,d2
    af3a:	       add.l d0,d2
    af3c:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    af40:	   /-- bra.s af4a <rethinkAngle+0x4e>
    af42:	/--|-> addi.l #-360,8(sp)
    af4a:	|  \-> cmpi.l #359,8(sp)
    af52:	\----- bgt.s af42 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    af54:	       move.l 4(sp),-(sp)
    af58:	       move.l 12(sp),-(sp)
    af5c:	       jsr 17be6 <__mulsi3>
    af62:	       addq.l #8,sp
    af64:	       pea 168 <decodeFilename+0x50>
    af68:	       move.l d0,-(sp)
    af6a:	       jsr 17c64 <__divsi3>
    af70:	       addq.l #8,sp
    af72:	       movea.l 16(sp),a0
    af76:	       move.l d0,106(a0)
}
    af7a:	       nop
    af7c:	       move.l (sp)+,d2
    af7e:	       addq.l #8,sp
    af80:	       rts

0000af82 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    af82:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    af84:	          movea.l 8(sp),a0
    af88:	          move.l 8(a0),d0
    af8c:	          move.l 12(sp),-(sp)
    af90:	          move.l d0,-(sp)
    af92:	          jsr 8d0 <put2bytes>
    af98:	          addq.l #8,sp
	if (p -> numFrames) {
    af9a:	          movea.l 8(sp),a0
    af9e:	          move.l 8(a0),d0
    afa2:	/-------- beq.w b046 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    afa6:	|         movea.l 8(sp),a0
    afaa:	|         movea.l (a0),a0
    afac:	|         move.l (a0),d0
    afae:	|         move.l 12(sp),-(sp)
    afb2:	|         move.l d0,-(sp)
    afb4:	|         jsr 958 <put4bytes>
    afba:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    afbc:	|         clr.l (sp)
    afbe:	|     /-- bra.s b038 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    afc0:	|  /--|-> movea.l 8(sp),a0
    afc4:	|  |  |   movea.l 4(a0),a0
    afc8:	|  |  |   move.l (sp),d1
    afca:	|  |  |   move.l d1,d0
    afcc:	|  |  |   add.l d0,d0
    afce:	|  |  |   add.l d1,d0
    afd0:	|  |  |   add.l d0,d0
    afd2:	|  |  |   add.l d0,d0
    afd4:	|  |  |   adda.l d0,a0
    afd6:	|  |  |   move.l (a0),d0
    afd8:	|  |  |   move.l 12(sp),-(sp)
    afdc:	|  |  |   move.l d0,-(sp)
    afde:	|  |  |   jsr 958 <put4bytes>
    afe4:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    afe6:	|  |  |   movea.l 8(sp),a0
    afea:	|  |  |   movea.l 4(a0),a0
    afee:	|  |  |   move.l (sp),d1
    aff0:	|  |  |   move.l d1,d0
    aff2:	|  |  |   add.l d0,d0
    aff4:	|  |  |   add.l d1,d0
    aff6:	|  |  |   add.l d0,d0
    aff8:	|  |  |   add.l d0,d0
    affa:	|  |  |   adda.l d0,a0
    affc:	|  |  |   move.l 4(a0),d0
    b000:	|  |  |   move.l 12(sp),-(sp)
    b004:	|  |  |   move.l d0,-(sp)
    b006:	|  |  |   jsr 958 <put4bytes>
    b00c:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    b00e:	|  |  |   movea.l 8(sp),a0
    b012:	|  |  |   movea.l 4(a0),a0
    b016:	|  |  |   move.l (sp),d1
    b018:	|  |  |   move.l d1,d0
    b01a:	|  |  |   add.l d0,d0
    b01c:	|  |  |   add.l d1,d0
    b01e:	|  |  |   add.l d0,d0
    b020:	|  |  |   add.l d0,d0
    b022:	|  |  |   adda.l d0,a0
    b024:	|  |  |   move.l 8(a0),d0
    b028:	|  |  |   move.l 12(sp),-(sp)
    b02c:	|  |  |   move.l d0,-(sp)
    b02e:	|  |  |   jsr 958 <put4bytes>
    b034:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    b036:	|  |  |   addq.l #1,(sp)
    b038:	|  |  \-> movea.l 8(sp),a0
    b03c:	|  |      move.l 8(a0),d0
    b040:	|  |      cmp.l (sp),d0
    b042:	|  \----- bgt.w afc0 <saveAnim+0x3e>
		}
	}
	return TRUE;
    b046:	\-------> moveq #1,d0
}
    b048:	          addq.l #4,sp
    b04a:	          rts

0000b04c <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    b04c:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    b04e:	             movea.l 8(sp),a0
    b052:	             move.l 4(a0),d0
    b056:	             move.l 12(sp),-(sp)
    b05a:	             move.l d0,-(sp)
    b05c:	             jsr 8d0 <put2bytes>
    b062:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b064:	             clr.l (sp)
    b066:	   /-------- bra.s b092 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    b068:	/--|-------> movea.l 8(sp),a0
    b06c:	|  |         move.l (a0),d1
    b06e:	|  |         move.l (sp),d0
    b070:	|  |         add.l d0,d0
    b072:	|  |         add.l d0,d0
    b074:	|  |         movea.l d1,a0
    b076:	|  |         adda.l d0,a0
    b078:	|  |         move.l (a0),d0
    b07a:	|  |         move.l 12(sp),-(sp)
    b07e:	|  |         move.l d0,-(sp)
    b080:	|  |         jsr af82 <saveAnim>
    b086:	|  |         addq.l #8,sp
    b088:	|  |         tst.w d0
    b08a:	|  |     /-- bne.s b090 <saveCostume+0x44>
    b08c:	|  |     |   clr.w d0
    b08e:	|  |  /--|-- bra.s b0a6 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b090:	|  |  |  \-> addq.l #1,(sp)
    b092:	|  \--|----> movea.l 8(sp),a0
    b096:	|     |      move.l 4(a0),d1
    b09a:	|     |      move.l d1,d0
    b09c:	|     |      add.l d0,d0
    b09e:	|     |      add.l d1,d0
    b0a0:	|     |      cmp.l (sp),d0
    b0a2:	\-----|----- bgt.s b068 <saveCostume+0x1c>
	}

	return TRUE;
    b0a4:	      |      moveq #1,d0
}
    b0a6:	      \----> addq.l #4,sp
    b0a8:	             rts

0000b0aa <savePeople>:

BOOL savePeople (BPTR fp) {
    b0aa:	             lea -144(sp),sp
    b0ae:	             move.l a6,-(sp)
    b0b0:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    b0b2:	             move.l 1ca0c <allPeople>,148(sp)
	int countPeople = 0, a;
    b0ba:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    b0be:	             move.w 1c33a <scaleHorizon>,d0
    b0c4:	             movea.w d0,a0
    b0c6:	             move.l 156(sp),-(sp)
    b0ca:	             move.l a0,-(sp)
    b0cc:	             jsr a9c <putSigned>
    b0d2:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    b0d4:	             move.w 1c33c <scaleDivide>,d0
    b0da:	             movea.w d0,a0
    b0dc:	             move.l 156(sp),-(sp)
    b0e0:	             move.l a0,-(sp)
    b0e2:	             jsr a9c <putSigned>
    b0e8:	             addq.l #8,sp

	while (me) {
    b0ea:	         /-- bra.s b0fa <savePeople+0x50>
		countPeople ++;
    b0ec:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    b0f0:	      |  |   movea.l 148(sp),a0
    b0f4:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    b0fa:	      |  \-> tst.l 148(sp)
    b0fe:	      \----- bne.s b0ec <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    b100:	             move.l 156(sp),-(sp)
    b104:	             move.l 148(sp),-(sp)
    b108:	             jsr 8d0 <put2bytes>
    b10e:	             addq.l #8,sp

	me = allPeople;
    b110:	             move.l 1ca0c <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    b118:	             clr.l 140(sp)
    b11c:	   /-------- bra.w b574 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    b120:	/--|-------> movea.l 148(sp),a0
    b124:	|  |         move.l (a0),d0
    b126:	|  |         move.l 156(sp),-(sp)
    b12a:	|  |         move.l d0,-(sp)
    b12c:	|  |         jsr a46 <putFloat>
    b132:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    b134:	|  |         movea.l 148(sp),a0
    b138:	|  |         move.l 4(a0),d0
    b13c:	|  |         move.l 156(sp),-(sp)
    b140:	|  |         move.l d0,-(sp)
    b142:	|  |         jsr a46 <putFloat>
    b148:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    b14a:	|  |         movea.l 148(sp),a0
    b14e:	|  |         move.l 80(a0),d0
    b152:	|  |         move.l 156(sp),-(sp)
    b156:	|  |         move.l d0,-(sp)
    b158:	|  |         jsr b04c <saveCostume>
    b15e:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    b160:	|  |         movea.l 148(sp),a0
    b164:	|  |         move.l 72(a0),d0
    b168:	|  |         move.l 156(sp),-(sp)
    b16c:	|  |         move.l d0,-(sp)
    b16e:	|  |         jsr af82 <saveAnim>
    b174:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    b176:	|  |         move.l 156(sp),136(sp)
    b17c:	|  |         movea.l 148(sp),a0
    b180:	|  |         move.l 72(a0),d1
    b184:	|  |         movea.l 148(sp),a0
    b188:	|  |         move.l 76(a0),d0
    b18c:	|  |         cmp.l d1,d0
    b18e:	|  |         seq d0
    b190:	|  |         neg.b d0
    b192:	|  |         move.b d0,d0
    b194:	|  |         andi.l #255,d0
    b19a:	|  |         move.l d0,132(sp)
    b19e:	|  |         move.l 1c9b0 <DOSBase>,d0
    b1a4:	|  |         movea.l d0,a6
    b1a6:	|  |         move.l 136(sp),d1
    b1aa:	|  |         move.l 132(sp),d2
    b1ae:	|  |         jsr -312(a6)
    b1b2:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    b1b6:	|  |         movea.l 148(sp),a0
    b1ba:	|  |         move.l 32(a0),d0
    b1be:	|  |         move.l 156(sp),-(sp)
    b1c2:	|  |         move.l d0,-(sp)
    b1c4:	|  |         jsr a46 <putFloat>
    b1ca:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    b1cc:	|  |         movea.l 148(sp),a0
    b1d0:	|  |         move.l 118(a0),d0
    b1d4:	|  |         move.l 156(sp),-(sp)
    b1d8:	|  |         move.l d0,-(sp)
    b1da:	|  |         jsr 8d0 <put2bytes>
    b1e0:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    b1e2:	|  |         movea.l 148(sp),a0
    b1e6:	|  |         move.l 20(a0),d0
    b1ea:	|  |         move.l 156(sp),-(sp)
    b1ee:	|  |         move.l d0,-(sp)
    b1f0:	|  |         jsr 8d0 <put2bytes>
    b1f6:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    b1f8:	|  |         movea.l 148(sp),a0
    b1fc:	|  |         move.l 40(a0),d0
    b200:	|  |         move.l 156(sp),-(sp)
    b204:	|  |         move.l d0,-(sp)
    b206:	|  |         jsr 8d0 <put2bytes>
    b20c:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    b20e:	|  |         movea.l 148(sp),a0
    b212:	|  |         move.l 44(a0),d0
    b216:	|  |         move.l 156(sp),-(sp)
    b21a:	|  |         move.l d0,-(sp)
    b21c:	|  |         jsr 8d0 <put2bytes>
    b222:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    b224:	|  |         movea.l 148(sp),a0
    b228:	|  |         move.l 48(a0),d0
    b22c:	|  |         move.l 156(sp),-(sp)
    b230:	|  |         move.l d0,-(sp)
    b232:	|  |         jsr 8d0 <put2bytes>
    b238:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    b23a:	|  |         movea.l 148(sp),a0
    b23e:	|  |         move.l 52(a0),d0
    b242:	|  |         move.l 156(sp),-(sp)
    b246:	|  |         move.l d0,-(sp)
    b248:	|  |         jsr 8d0 <put2bytes>
    b24e:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    b250:	|  |         movea.l 148(sp),a0
    b254:	|  |         move.l 84(a0),d0
    b258:	|  |         move.l 156(sp),-(sp)
    b25c:	|  |         move.l d0,-(sp)
    b25e:	|  |         jsr 8d0 <put2bytes>
    b264:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    b266:	|  |         movea.l 148(sp),a0
    b26a:	|  |         move.l 88(a0),d0
    b26e:	|  |         move.l 156(sp),-(sp)
    b272:	|  |         move.l d0,-(sp)
    b274:	|  |         jsr 8d0 <put2bytes>
    b27a:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    b27c:	|  |         movea.l 148(sp),a0
    b280:	|  |         move.l 28(a0),d0
    b284:	|  |         move.l 156(sp),-(sp)
    b288:	|  |         move.l d0,-(sp)
    b28a:	|  |         jsr 8d0 <put2bytes>
    b290:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    b292:	|  |         movea.l 148(sp),a0
    b296:	|  |         move.l 122(a0),d0
    b29a:	|  |         move.l 156(sp),-(sp)
    b29e:	|  |         move.l d0,-(sp)
    b2a0:	|  |         jsr 8d0 <put2bytes>
    b2a6:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    b2a8:	|  |         movea.l 148(sp),a0
    b2ac:	|  |         move.l 24(a0),d0
    b2b0:	|  |         move.l d0,d0
    b2b2:	|  |         movea.w d0,a0
    b2b4:	|  |         move.l 156(sp),-(sp)
    b2b8:	|  |         move.l a0,-(sp)
    b2ba:	|  |         jsr a9c <putSigned>
    b2c0:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    b2c2:	|  |         move.l 156(sp),124(sp)
    b2c8:	|  |         movea.l 148(sp),a0
    b2cc:	|  |         move.w 104(a0),d0
    b2d0:	|  |         movea.w d0,a0
    b2d2:	|  |         move.l a0,120(sp)
    b2d6:	|  |         move.l 1c9b0 <DOSBase>,d0
    b2dc:	|  |         movea.l d0,a6
    b2de:	|  |         move.l 124(sp),d1
    b2e2:	|  |         move.l 120(sp),d2
    b2e6:	|  |         jsr -312(a6)
    b2ea:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    b2ee:	|  |         move.l 156(sp),112(sp)
    b2f4:	|  |         movea.l 148(sp),a0
    b2f8:	|  |         move.w 64(a0),d0
    b2fc:	|  |         movea.w d0,a0
    b2fe:	|  |         move.l a0,108(sp)
    b302:	|  |         move.l 1c9b0 <DOSBase>,d0
    b308:	|  |         movea.l d0,a6
    b30a:	|  |         move.l 112(sp),d1
    b30e:	|  |         move.l 108(sp),d2
    b312:	|  |         jsr -312(a6)
    b316:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    b31a:	|  |         move.l 156(sp),100(sp)
    b320:	|  |         movea.l 148(sp),a0
    b324:	|  |         move.w 66(a0),d0
    b328:	|  |         movea.w d0,a0
    b32a:	|  |         move.l a0,96(sp)
    b32e:	|  |         move.l 1c9b0 <DOSBase>,d0
    b334:	|  |         movea.l d0,a6
    b336:	|  |         move.l 100(sp),d1
    b33a:	|  |         move.l 96(sp),d2
    b33e:	|  |         jsr -312(a6)
    b342:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    b346:	|  |         movea.l 148(sp),a0
    b34a:	|  |         move.l 68(a0),d0
    b34e:	|  |  /----- beq.s b38c <savePeople+0x2e2>
			FPutC (fp, 1);
    b350:	|  |  |      move.l 156(sp),76(sp)
    b356:	|  |  |      moveq #1,d0
    b358:	|  |  |      move.l d0,72(sp)
    b35c:	|  |  |      move.l 1c9b0 <DOSBase>,d0
    b362:	|  |  |      movea.l d0,a6
    b364:	|  |  |      move.l 76(sp),d1
    b368:	|  |  |      move.l 72(sp),d2
    b36c:	|  |  |      jsr -312(a6)
    b370:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    b374:	|  |  |      movea.l 148(sp),a0
    b378:	|  |  |      move.l 68(a0),d0
    b37c:	|  |  |      move.l 156(sp),-(sp)
    b380:	|  |  |      move.l d0,-(sp)
    b382:	|  |  |      jsr c5a6 <saveFunction>
    b388:	|  |  |      addq.l #8,sp
    b38a:	|  |  |  /-- bra.s b3b0 <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    b38c:	|  |  \--|-> move.l 156(sp),88(sp)
    b392:	|  |     |   moveq #1,d0
    b394:	|  |     |   move.l d0,84(sp)
    b398:	|  |     |   move.l 1c9b0 <DOSBase>,d0
    b39e:	|  |     |   movea.l d0,a6
    b3a0:	|  |     |   move.l 88(sp),d1
    b3a4:	|  |     |   move.l 84(sp),d2
    b3a8:	|  |     |   jsr -312(a6)
    b3ac:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    b3b0:	|  |     \-> movea.l 148(sp),a0
    b3b4:	|  |         move.l 106(a0),d0
    b3b8:	|  |         move.l 156(sp),-(sp)
    b3bc:	|  |         move.l d0,-(sp)
    b3be:	|  |         jsr 8d0 <put2bytes>
    b3c4:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    b3c6:	|  |         movea.l 148(sp),a0
    b3ca:	|  |         move.l 92(a0),d0
    b3ce:	|  |         move.l 156(sp),-(sp)
    b3d2:	|  |         move.l d0,-(sp)
    b3d4:	|  |         jsr 8d0 <put2bytes>
    b3da:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    b3dc:	|  |         movea.l 148(sp),a0
    b3e0:	|  |         move.l 100(a0),d0
    b3e4:	|  |         move.l 156(sp),-(sp)
    b3e8:	|  |         move.l d0,-(sp)
    b3ea:	|  |         jsr 8d0 <put2bytes>
    b3f0:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    b3f2:	|  |         movea.l 148(sp),a0
    b3f6:	|  |         move.l 96(a0),d0
    b3fa:	|  |         move.l 156(sp),-(sp)
    b3fe:	|  |         move.l d0,-(sp)
    b400:	|  |         jsr 8d0 <put2bytes>
    b406:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    b408:	|  |         movea.l 148(sp),a0
    b40c:	|  |         move.l 110(a0),d0
    b410:	|  |         move.l d0,d0
    b412:	|  |         movea.w d0,a0
    b414:	|  |         move.l 156(sp),-(sp)
    b418:	|  |         move.l a0,-(sp)
    b41a:	|  |         jsr a9c <putSigned>
    b420:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    b422:	|  |         movea.l 148(sp),a0
    b426:	|  |         move.l 56(a0),d0
    b42a:	|  |         move.l d0,d0
    b42c:	|  |         movea.w d0,a0
    b42e:	|  |         move.l 156(sp),-(sp)
    b432:	|  |         move.l a0,-(sp)
    b434:	|  |         jsr a9c <putSigned>
    b43a:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    b43c:	|  |         movea.l 148(sp),a0
    b440:	|  |         move.l 60(a0),d0
    b444:	|  |         move.l d0,d0
    b446:	|  |         movea.w d0,a0
    b448:	|  |         move.l 156(sp),-(sp)
    b44c:	|  |         move.l a0,-(sp)
    b44e:	|  |         jsr a9c <putSigned>
    b454:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    b456:	|  |         move.l 156(sp),64(sp)
    b45c:	|  |         movea.l 148(sp),a0
    b460:	|  |         move.b 126(a0),d0
    b464:	|  |         move.b d0,d0
    b466:	|  |         andi.l #255,d0
    b46c:	|  |         move.l d0,60(sp)
    b470:	|  |         move.l 1c9b0 <DOSBase>,d0
    b476:	|  |         movea.l d0,a6
    b478:	|  |         move.l 64(sp),d1
    b47c:	|  |         move.l 60(sp),d2
    b480:	|  |         jsr -312(a6)
    b484:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    b488:	|  |         move.l 156(sp),52(sp)
    b48e:	|  |         movea.l 148(sp),a0
    b492:	|  |         move.b 127(a0),d0
    b496:	|  |         move.b d0,d0
    b498:	|  |         andi.l #255,d0
    b49e:	|  |         move.l d0,48(sp)
    b4a2:	|  |         move.l 1c9b0 <DOSBase>,d0
    b4a8:	|  |         movea.l d0,a6
    b4aa:	|  |         move.l 52(sp),d1
    b4ae:	|  |         move.l 48(sp),d2
    b4b2:	|  |         jsr -312(a6)
    b4b6:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    b4ba:	|  |         move.l 156(sp),40(sp)
    b4c0:	|  |         movea.l 148(sp),a0
    b4c4:	|  |         move.b 128(a0),d0
    b4c8:	|  |         move.b d0,d0
    b4ca:	|  |         andi.l #255,d0
    b4d0:	|  |         move.l d0,36(sp)
    b4d4:	|  |         move.l 1c9b0 <DOSBase>,d0
    b4da:	|  |         movea.l d0,a6
    b4dc:	|  |         move.l 40(sp),d1
    b4e0:	|  |         move.l 36(sp),d2
    b4e4:	|  |         jsr -312(a6)
    b4e8:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    b4ec:	|  |         move.l 156(sp),28(sp)
    b4f2:	|  |         movea.l 148(sp),a0
    b4f6:	|  |         move.b 129(a0),d0
    b4fa:	|  |         move.b d0,d0
    b4fc:	|  |         andi.l #255,d0
    b502:	|  |         move.l d0,24(sp)
    b506:	|  |         move.l 1c9b0 <DOSBase>,d0
    b50c:	|  |         movea.l d0,a6
    b50e:	|  |         move.l 28(sp),d1
    b512:	|  |         move.l 24(sp),d2
    b516:	|  |         jsr -312(a6)
    b51a:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    b51e:	|  |         move.l 156(sp),16(sp)
    b524:	|  |         movea.l 148(sp),a0
    b528:	|  |         move.b 130(a0),d0
    b52c:	|  |         move.b d0,d0
    b52e:	|  |         andi.l #255,d0
    b534:	|  |         move.l d0,12(sp)
    b538:	|  |         move.l 1c9b0 <DOSBase>,d0
    b53e:	|  |         movea.l d0,a6
    b540:	|  |         move.l 16(sp),d1
    b544:	|  |         move.l 12(sp),d2
    b548:	|  |         jsr -312(a6)
    b54c:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    b550:	|  |         movea.l 148(sp),a0
    b554:	|  |         move.l 114(a0),d0
    b558:	|  |         move.l 156(sp),-(sp)
    b55c:	|  |         move.l d0,-(sp)
    b55e:	|  |         jsr d964 <saveObjectRef>
    b564:	|  |         addq.l #8,sp

		me = me -> next;
    b566:	|  |         movea.l 148(sp),a0
    b56a:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    b570:	|  |         addq.l #1,140(sp)
    b574:	|  \-------> movea.l 140(sp),a0
    b578:	|            cmpa.l 144(sp),a0
    b57c:	\----------- blt.w b120 <savePeople+0x76>
	}
	return TRUE;
    b580:	             moveq #1,d0
}
    b582:	             move.l (sp)+,d2
    b584:	             movea.l (sp)+,a6
    b586:	             lea 144(sp),sp
    b58a:	             rts

0000b58c <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    b58c:	movea.l 4(sp),a0
    b590:	move.l 8(sp),(a0)
}
    b594:	nop
    b596:	rts

0000b598 <setDrawMode>:


void setDrawMode (int h, int ob) {
    b598:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    b59a:	       move.l 12(sp),-(sp)
    b59e:	       jsr a626 <findPerson>
    b5a4:	       addq.l #4,sp
    b5a6:	       move.l d0,(sp)
	if (! moveMe) return;
    b5a8:	/----- beq.s b5bc <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    b5aa:	|      move.l 8(sp),-(sp)
    b5ae:	|      move.l 4(sp),-(sp)
    b5b2:	|      jsr b5c2 <setMyDrawMode>
    b5b8:	|      addq.l #8,sp
    b5ba:	|  /-- bra.s b5be <setDrawMode+0x26>
	if (! moveMe) return;
    b5bc:	\--|-> nop
}
    b5be:	   \-> addq.l #4,sp
    b5c0:	       rts

0000b5c2 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    b5c2:	       moveq #19,d0
    b5c4:	       cmp.l 8(sp),d0
    b5c8:	/----- bcs.w baa0 <setMyDrawMode+0x4de>
    b5cc:	|      move.l 8(sp),d0
    b5d0:	|      add.l d0,d0
    b5d2:	|      movea.l d0,a0
    b5d4:	|      adda.l #46560,a0
    b5da:	|      move.w (a0),d0
    b5dc:	|      jmp (b5e0 <setMyDrawMode+0x1e>,pc,d0.w)
    b5e0:	|      .short 0x04c0
    b5e2:	|      ori.l #6684712,-(a4)
    b5e8:	|      btst d0,-(a0)
    b5ea:	|      bchg d0,(a6)+
    b5ec:	|      bclr d0,(a4)+
    b5ee:	|      bset d0,(a2)+
    b5f0:	|      andi.b #84,(a6)
    b5f4:	|      andi.l #55575312,(a2)
    b5fa:	|      .short 0x02d0
    b5fc:	|      bclr d1,(a0)
    b5fe:	|      .short 0x044a
    b600:	|      .short 0x040c
    b602:	|      movep.l d1,1158(a6)
    b606:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b608:	|      movea.l 4(sp),a0
    b60c:	|      clr.b 128(a0)
    b610:	|      movea.l 4(sp),a0
    b614:	|      move.b 128(a0),d0
    b618:	|      movea.l 4(sp),a0
    b61c:	|      move.b d0,127(a0)
    b620:	|      movea.l 4(sp),a0
    b624:	|      move.b 127(a0),d0
    b628:	|      movea.l 4(sp),a0
    b62c:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    b630:	|      movea.l 4(sp),a0
    b634:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    b638:	|      movea.l 4(sp),a0
    b63c:	|      move.b #64,130(a0)
			break;
    b642:	|  /-- bra.w bada <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b646:	|  |   movea.l 4(sp),a0
    b64a:	|  |   clr.b 128(a0)
    b64e:	|  |   movea.l 4(sp),a0
    b652:	|  |   move.b 128(a0),d0
    b656:	|  |   movea.l 4(sp),a0
    b65a:	|  |   move.b d0,127(a0)
    b65e:	|  |   movea.l 4(sp),a0
    b662:	|  |   move.b 127(a0),d0
    b666:	|  |   movea.l 4(sp),a0
    b66a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b66e:	|  |   movea.l 4(sp),a0
    b672:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    b676:	|  |   movea.l 4(sp),a0
    b67a:	|  |   move.b #-128,130(a0)
			break;
    b680:	|  +-- bra.w bada <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b684:	|  |   movea.l 4(sp),a0
    b688:	|  |   clr.b 128(a0)
    b68c:	|  |   movea.l 4(sp),a0
    b690:	|  |   move.b 128(a0),d0
    b694:	|  |   movea.l 4(sp),a0
    b698:	|  |   move.b d0,127(a0)
    b69c:	|  |   movea.l 4(sp),a0
    b6a0:	|  |   move.b 127(a0),d0
    b6a4:	|  |   movea.l 4(sp),a0
    b6a8:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b6ac:	|  |   movea.l 4(sp),a0
    b6b0:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    b6b4:	|  |   movea.l 4(sp),a0
    b6b8:	|  |   move.b #-64,130(a0)
			break;
    b6be:	|  +-- bra.w bada <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b6c2:	|  |   movea.l 4(sp),a0
    b6c6:	|  |   clr.b 128(a0)
    b6ca:	|  |   movea.l 4(sp),a0
    b6ce:	|  |   move.b 128(a0),d0
    b6d2:	|  |   movea.l 4(sp),a0
    b6d6:	|  |   move.b d0,127(a0)
    b6da:	|  |   movea.l 4(sp),a0
    b6de:	|  |   move.b 127(a0),d0
    b6e2:	|  |   movea.l 4(sp),a0
    b6e6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b6ea:	|  |   movea.l 4(sp),a0
    b6ee:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    b6f2:	|  |   movea.l 4(sp),a0
    b6f6:	|  |   move.b #-2,130(a0)
			break;
    b6fc:	|  +-- bra.w bada <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b700:	|  |   movea.l 4(sp),a0
    b704:	|  |   clr.b 128(a0)
    b708:	|  |   movea.l 4(sp),a0
    b70c:	|  |   move.b 128(a0),d0
    b710:	|  |   movea.l 4(sp),a0
    b714:	|  |   move.b d0,127(a0)
    b718:	|  |   movea.l 4(sp),a0
    b71c:	|  |   move.b 127(a0),d0
    b720:	|  |   movea.l 4(sp),a0
    b724:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b728:	|  |   movea.l 4(sp),a0
    b72c:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b732:	|  |   movea.l 4(sp),a0
    b736:	|  |   clr.b 130(a0)
			break;
    b73a:	|  +-- bra.w bada <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b73e:	|  |   movea.l 4(sp),a0
    b742:	|  |   clr.b 128(a0)
    b746:	|  |   movea.l 4(sp),a0
    b74a:	|  |   move.b 128(a0),d0
    b74e:	|  |   movea.l 4(sp),a0
    b752:	|  |   move.b d0,127(a0)
    b756:	|  |   movea.l 4(sp),a0
    b75a:	|  |   move.b 127(a0),d0
    b75e:	|  |   movea.l 4(sp),a0
    b762:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b766:	|  |   movea.l 4(sp),a0
    b76a:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b770:	|  |   movea.l 4(sp),a0
    b774:	|  |   clr.b 130(a0)
			break;
    b778:	|  +-- bra.w bada <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b77c:	|  |   movea.l 4(sp),a0
    b780:	|  |   clr.b 128(a0)
    b784:	|  |   movea.l 4(sp),a0
    b788:	|  |   move.b 128(a0),d0
    b78c:	|  |   movea.l 4(sp),a0
    b790:	|  |   move.b d0,127(a0)
    b794:	|  |   movea.l 4(sp),a0
    b798:	|  |   move.b 127(a0),d0
    b79c:	|  |   movea.l 4(sp),a0
    b7a0:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b7a4:	|  |   movea.l 4(sp),a0
    b7a8:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b7ae:	|  |   movea.l 4(sp),a0
    b7b2:	|  |   clr.b 130(a0)
			break;
    b7b6:	|  +-- bra.w bada <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b7ba:	|  |   movea.l 4(sp),a0
    b7be:	|  |   clr.b 128(a0)
    b7c2:	|  |   movea.l 4(sp),a0
    b7c6:	|  |   move.b 128(a0),d0
    b7ca:	|  |   movea.l 4(sp),a0
    b7ce:	|  |   move.b d0,127(a0)
    b7d2:	|  |   movea.l 4(sp),a0
    b7d6:	|  |   move.b 127(a0),d0
    b7da:	|  |   movea.l 4(sp),a0
    b7de:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b7e2:	|  |   movea.l 4(sp),a0
    b7e6:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b7ea:	|  |   movea.l 4(sp),a0
    b7ee:	|  |   clr.b 130(a0)
			break;
    b7f2:	|  +-- bra.w bada <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b7f6:	|  |   movea.l 4(sp),a0
    b7fa:	|  |   clr.b 128(a0)
    b7fe:	|  |   movea.l 4(sp),a0
    b802:	|  |   move.b 128(a0),d0
    b806:	|  |   movea.l 4(sp),a0
    b80a:	|  |   move.b d0,127(a0)
    b80e:	|  |   movea.l 4(sp),a0
    b812:	|  |   move.b 127(a0),d0
    b816:	|  |   movea.l 4(sp),a0
    b81a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b81e:	|  |   movea.l 4(sp),a0
    b822:	|  |   st 129(a0)
			moveMe->transparency = 64;
    b826:	|  |   movea.l 4(sp),a0
    b82a:	|  |   move.b #64,130(a0)
			break;
    b830:	|  +-- bra.w bada <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b834:	|  |   movea.l 4(sp),a0
    b838:	|  |   clr.b 128(a0)
    b83c:	|  |   movea.l 4(sp),a0
    b840:	|  |   move.b 128(a0),d0
    b844:	|  |   movea.l 4(sp),a0
    b848:	|  |   move.b d0,127(a0)
    b84c:	|  |   movea.l 4(sp),a0
    b850:	|  |   move.b 127(a0),d0
    b854:	|  |   movea.l 4(sp),a0
    b858:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b85c:	|  |   movea.l 4(sp),a0
    b860:	|  |   st 129(a0)
			moveMe->transparency = 128;
    b864:	|  |   movea.l 4(sp),a0
    b868:	|  |   move.b #-128,130(a0)
			break;
    b86e:	|  +-- bra.w bada <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b872:	|  |   movea.l 4(sp),a0
    b876:	|  |   clr.b 128(a0)
    b87a:	|  |   movea.l 4(sp),a0
    b87e:	|  |   move.b 128(a0),d0
    b882:	|  |   movea.l 4(sp),a0
    b886:	|  |   move.b d0,127(a0)
    b88a:	|  |   movea.l 4(sp),a0
    b88e:	|  |   move.b 127(a0),d0
    b892:	|  |   movea.l 4(sp),a0
    b896:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b89a:	|  |   movea.l 4(sp),a0
    b89e:	|  |   st 129(a0)
			moveMe->transparency = 192;
    b8a2:	|  |   movea.l 4(sp),a0
    b8a6:	|  |   move.b #-64,130(a0)
			break;
    b8ac:	|  +-- bra.w bada <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b8b0:	|  |   movea.l 4(sp),a0
    b8b4:	|  |   move.b #-128,128(a0)
    b8ba:	|  |   movea.l 4(sp),a0
    b8be:	|  |   move.b 128(a0),d0
    b8c2:	|  |   movea.l 4(sp),a0
    b8c6:	|  |   move.b d0,127(a0)
    b8ca:	|  |   movea.l 4(sp),a0
    b8ce:	|  |   move.b 127(a0),d0
    b8d2:	|  |   movea.l 4(sp),a0
    b8d6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b8da:	|  |   movea.l 4(sp),a0
    b8de:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b8e4:	|  |   movea.l 4(sp),a0
    b8e8:	|  |   clr.b 130(a0)
			break;
    b8ec:	|  +-- bra.w bada <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b8f0:	|  |   movea.l 4(sp),a0
    b8f4:	|  |   move.b #-128,128(a0)
    b8fa:	|  |   movea.l 4(sp),a0
    b8fe:	|  |   move.b 128(a0),d0
    b902:	|  |   movea.l 4(sp),a0
    b906:	|  |   move.b d0,127(a0)
    b90a:	|  |   movea.l 4(sp),a0
    b90e:	|  |   move.b 127(a0),d0
    b912:	|  |   movea.l 4(sp),a0
    b916:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b91a:	|  |   movea.l 4(sp),a0
    b91e:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b924:	|  |   movea.l 4(sp),a0
    b928:	|  |   clr.b 130(a0)
			break;
    b92c:	|  +-- bra.w bada <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b930:	|  |   movea.l 4(sp),a0
    b934:	|  |   move.b #-128,128(a0)
    b93a:	|  |   movea.l 4(sp),a0
    b93e:	|  |   move.b 128(a0),d0
    b942:	|  |   movea.l 4(sp),a0
    b946:	|  |   move.b d0,127(a0)
    b94a:	|  |   movea.l 4(sp),a0
    b94e:	|  |   move.b 127(a0),d0
    b952:	|  |   movea.l 4(sp),a0
    b956:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b95a:	|  |   movea.l 4(sp),a0
    b95e:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b964:	|  |   movea.l 4(sp),a0
    b968:	|  |   clr.b 130(a0)
			break;
    b96c:	|  +-- bra.w bada <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b970:	|  |   movea.l 4(sp),a0
    b974:	|  |   move.b #-128,128(a0)
    b97a:	|  |   movea.l 4(sp),a0
    b97e:	|  |   move.b 128(a0),d0
    b982:	|  |   movea.l 4(sp),a0
    b986:	|  |   move.b d0,127(a0)
    b98a:	|  |   movea.l 4(sp),a0
    b98e:	|  |   move.b 127(a0),d0
    b992:	|  |   movea.l 4(sp),a0
    b996:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b99a:	|  |   movea.l 4(sp),a0
    b99e:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b9a2:	|  |   movea.l 4(sp),a0
    b9a6:	|  |   clr.b 130(a0)
			break;
    b9aa:	|  +-- bra.w bada <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b9ae:	|  |   movea.l 4(sp),a0
    b9b2:	|  |   st 128(a0)
    b9b6:	|  |   movea.l 4(sp),a0
    b9ba:	|  |   move.b 128(a0),d0
    b9be:	|  |   movea.l 4(sp),a0
    b9c2:	|  |   move.b d0,127(a0)
    b9c6:	|  |   movea.l 4(sp),a0
    b9ca:	|  |   move.b 127(a0),d0
    b9ce:	|  |   movea.l 4(sp),a0
    b9d2:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b9d6:	|  |   movea.l 4(sp),a0
    b9da:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b9e0:	|  |   movea.l 4(sp),a0
    b9e4:	|  |   clr.b 130(a0)
			break;
    b9e8:	|  +-- bra.w bada <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b9ec:	|  |   movea.l 4(sp),a0
    b9f0:	|  |   st 128(a0)
    b9f4:	|  |   movea.l 4(sp),a0
    b9f8:	|  |   move.b 128(a0),d0
    b9fc:	|  |   movea.l 4(sp),a0
    ba00:	|  |   move.b d0,127(a0)
    ba04:	|  |   movea.l 4(sp),a0
    ba08:	|  |   move.b 127(a0),d0
    ba0c:	|  |   movea.l 4(sp),a0
    ba10:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    ba14:	|  |   movea.l 4(sp),a0
    ba18:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    ba1e:	|  |   movea.l 4(sp),a0
    ba22:	|  |   clr.b 130(a0)
			break;
    ba26:	|  +-- bra.w bada <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    ba2a:	|  |   movea.l 4(sp),a0
    ba2e:	|  |   st 128(a0)
    ba32:	|  |   movea.l 4(sp),a0
    ba36:	|  |   move.b 128(a0),d0
    ba3a:	|  |   movea.l 4(sp),a0
    ba3e:	|  |   move.b d0,127(a0)
    ba42:	|  |   movea.l 4(sp),a0
    ba46:	|  |   move.b 127(a0),d0
    ba4a:	|  |   movea.l 4(sp),a0
    ba4e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    ba52:	|  |   movea.l 4(sp),a0
    ba56:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    ba5c:	|  |   movea.l 4(sp),a0
    ba60:	|  |   clr.b 130(a0)
			break;
    ba64:	|  +-- bra.s bada <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    ba66:	|  |   movea.l 4(sp),a0
    ba6a:	|  |   st 128(a0)
    ba6e:	|  |   movea.l 4(sp),a0
    ba72:	|  |   move.b 128(a0),d0
    ba76:	|  |   movea.l 4(sp),a0
    ba7a:	|  |   move.b d0,127(a0)
    ba7e:	|  |   movea.l 4(sp),a0
    ba82:	|  |   move.b 127(a0),d0
    ba86:	|  |   movea.l 4(sp),a0
    ba8a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    ba8e:	|  |   movea.l 4(sp),a0
    ba92:	|  |   st 129(a0)
			moveMe->transparency = 0;
    ba96:	|  |   movea.l 4(sp),a0
    ba9a:	|  |   clr.b 130(a0)
			break;
    ba9e:	|  +-- bra.s bada <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    baa0:	\--|-> movea.l 4(sp),a0
    baa4:	   |   clr.b 128(a0)
    baa8:	   |   movea.l 4(sp),a0
    baac:	   |   move.b 128(a0),d0
    bab0:	   |   movea.l 4(sp),a0
    bab4:	   |   move.b d0,127(a0)
    bab8:	   |   movea.l 4(sp),a0
    babc:	   |   move.b 127(a0),d0
    bac0:	   |   movea.l 4(sp),a0
    bac4:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    bac8:	   |   movea.l 4(sp),a0
    bacc:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    bad0:	   |   movea.l 4(sp),a0
    bad4:	   |   clr.b 130(a0)
			break;
    bad8:	   |   nop
	}
}
    bada:	   \-> nop
    badc:	       rts

0000bade <shufflePeople>:

void shufflePeople () {
    bade:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    bae2:	             move.l #117260,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    baea:	             move.l 1ca0c <allPeople>,d0
    baf0:	/----------- beq.w bbc6 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    baf4:	|     /----- bra.w bbb6 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    baf8:	|  /--|----> movea.l 16(sp),a0
    bafc:	|  |  |      movea.l (a0),a0
    bafe:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    bb04:	|  |  |      movea.l 16(sp),a0
    bb08:	|  |  |      movea.l (a0),a0
    bb0a:	|  |  |      move.l 118(a0),d0
    bb0e:	|  |  |      moveq #1,d1
    bb10:	|  |  |      and.l d1,d0
    bb12:	|  |  |  /-- beq.s bb2a <shufflePeople+0x4c>
    bb14:	|  |  |  |   move.l #1148846080,-(sp)
    bb1a:	|  |  |  |   move.l 16(sp),-(sp)
    bb1e:	|  |  |  |   jsr 17420 <__addsf3>
    bb24:	|  |  |  |   addq.l #8,sp
    bb26:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    bb2a:	|  |  |  \-> movea.l 16(sp),a0
    bb2e:	|  |  |      movea.l (a0),a0
    bb30:	|  |  |      movea.l 36(a0),a0
    bb34:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    bb3a:	|  |  |      movea.l 16(sp),a0
    bb3e:	|  |  |      movea.l (a0),a0
    bb40:	|  |  |      movea.l 36(a0),a0
    bb44:	|  |  |      move.l 118(a0),d0
    bb48:	|  |  |      moveq #1,d1
    bb4a:	|  |  |      and.l d1,d0
    bb4c:	|  |  |  /-- beq.s bb64 <shufflePeople+0x86>
    bb4e:	|  |  |  |   move.l #1148846080,-(sp)
    bb54:	|  |  |  |   move.l 12(sp),-(sp)
    bb58:	|  |  |  |   jsr 17420 <__addsf3>
    bb5e:	|  |  |  |   addq.l #8,sp
    bb60:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    bb64:	|  |  |  \-> move.l 8(sp),-(sp)
    bb68:	|  |  |      move.l 16(sp),-(sp)
    bb6c:	|  |  |      jsr 177d0 <__gtsf2>
    bb72:	|  |  |      addq.l #8,sp
    bb74:	|  |  |      tst.l d0
    bb76:	|  |  |  /-- ble.s bba8 <shufflePeople+0xca>
			A = (*thisReference);
    bb78:	|  |  |  |   movea.l 16(sp),a0
    bb7c:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    bb80:	|  |  |  |   movea.l 16(sp),a0
    bb84:	|  |  |  |   movea.l (a0),a0
    bb86:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    bb8a:	|  |  |  |   movea.l (sp),a0
    bb8c:	|  |  |  |   move.l 36(a0),d0
    bb90:	|  |  |  |   movea.l 4(sp),a0
    bb94:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    bb98:	|  |  |  |   movea.l (sp),a0
    bb9a:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    bba0:	|  |  |  |   movea.l 16(sp),a0
    bba4:	|  |  |  |   move.l (sp),(a0)
    bba6:	|  |  +--|-- bra.s bbb6 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    bba8:	|  |  |  \-> movea.l 16(sp),a0
    bbac:	|  |  |      move.l (a0),d0
    bbae:	|  |  |      moveq #36,d1
    bbb0:	|  |  |      add.l d0,d1
    bbb2:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    bbb6:	|  |  \----> movea.l 16(sp),a0
    bbba:	|  |         movea.l (a0),a0
    bbbc:	|  |         move.l 36(a0),d0
    bbc0:	|  \-------- bne.w baf8 <shufflePeople+0x1a>
    bbc4:	|        /-- bra.s bbc8 <shufflePeople+0xea>
	if (!allPeople) return;
    bbc6:	\--------|-> nop
		}
	}
}
    bbc8:	         \-> lea 20(sp),sp
    bbcc:	             rts

0000bbce <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    bbce:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    bbd0:	       tst.l 8(sp)
    bbd4:	   /-- bgt.s bbda <setCharacterWalkSpeed+0xc>
    bbd6:	   |   clr.w d0
    bbd8:	/--|-- bra.s bbf8 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    bbda:	|  \-> move.l 12(sp),-(sp)
    bbde:	|      jsr a626 <findPerson>
    bbe4:	|      addq.l #4,sp
    bbe6:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    bbe8:	|  /-- bne.s bbee <setCharacterWalkSpeed+0x20>
    bbea:	|  |   clr.w d0
    bbec:	+--|-- bra.s bbf8 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    bbee:	|  \-> movea.l (sp),a0
    bbf0:	|      move.l 8(sp),28(a0)
	return TRUE;
    bbf6:	|      moveq #1,d0
}
    bbf8:	\----> addq.l #4,sp
    bbfa:	       rts

0000bbfc <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    bbfc:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    bbfe:	       move.l 8(sp),-(sp)
    bc02:	       jsr a626 <findPerson>
    bc08:	       addq.l #4,sp
    bc0a:	       move.l d0,(sp)
    if (thisPerson) {
    bc0c:	/----- beq.s bc2c <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    bc0e:	|      movea.l (sp),a0
    bc10:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    bc16:	|      moveq #2,d0
    bc18:	|      and.l 12(sp),d0
    bc1c:	|  /-- beq.s bc28 <setPersonExtra+0x2c>
    bc1e:	|  |   movea.l (sp),a0
    bc20:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    bc28:	|  \-> moveq #1,d0
    bc2a:	|  /-- bra.s bc2e <setPersonExtra+0x32>
    }
    return FALSE;
    bc2c:	\--|-> clr.w d0
}
    bc2e:	   \-> addq.l #4,sp
    bc30:	       rts

0000bc32 <setScale>:


void setScale (short int h, short int d) {
    bc32:	subq.l #4,sp
    bc34:	move.l 8(sp),d1
    bc38:	move.l 12(sp),d0
    bc3c:	move.w d1,d1
    bc3e:	move.w d1,2(sp)
    bc42:	move.w d0,d0
    bc44:	move.w d0,(sp)
	scaleHorizon = h;
    bc46:	move.w 2(sp),1c33a <scaleHorizon>
	scaleDivide = d;
    bc4e:	move.w (sp),1c33c <scaleDivide>
}
    bc54:	nop
    bc56:	addq.l #4,sp
    bc58:	rts

0000bc5a <setShown>:

void setShown (BOOL h, int ob) {
    bc5a:	    subq.l #8,sp
    bc5c:	    move.l 12(sp),d0
    bc60:	    move.w d0,d0
    bc62:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    bc66:	    move.l 16(sp),-(sp)
    bc6a:	    jsr a626 <findPerson>
    bc70:	    addq.l #4,sp
    bc72:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    bc76:	/-- beq.s bc82 <setShown+0x28>
    bc78:	|   movea.l 4(sp),a0
    bc7c:	|   move.w 2(sp),104(a0)
}
    bc82:	\-> nop
    bc84:	    addq.l #8,sp
    bc86:	    rts

0000bc88 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    bc88:	       subq.l #8,sp
    bc8a:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    bc8c:	       movea.l 16(sp),a0
    bc90:	       move.l 92(a0),d0
    bc94:	       move.l d0,d1
    bc96:	       addi.l #360,d1
    bc9c:	       movea.l 16(sp),a0
    bca0:	       move.l 96(a0),d0
    bca4:	       move.l d1,d2
    bca6:	       sub.l d0,d2
    bca8:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    bcac:	       movea.l 16(sp),a0
    bcb0:	       move.l 122(a0),d0
    bcb4:	   /-- beq.s bcc0 <spinStep+0x38>
    bcb6:	   |   movea.l 16(sp),a0
    bcba:	   |   move.l 122(a0),d0
    bcbe:	/--|-- bra.s bcda <spinStep+0x52>
    bcc0:	|  \-> movea.l 16(sp),a0
    bcc4:	|      movea.l 80(a0),a0
    bcc8:	|      move.l 4(a0),d0
    bccc:	|      move.l d0,-(sp)
    bcce:	|      pea 168 <decodeFilename+0x50>
    bcd2:	|      jsr 17c64 <__divsi3>
    bcd8:	|      addq.l #8,sp
    bcda:	\----> move.l d0,4(sp)
	while (diff > 180) {
    bcde:	   /-- bra.s bce8 <spinStep+0x60>
		diff -= 360;
    bce0:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    bce8:	|  \-> cmpi.l #180,8(sp)
    bcf0:	\----- bgt.s bce0 <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    bcf2:	       move.l 8(sp),d0
    bcf6:	       cmp.l 4(sp),d0
    bcfa:	   /-- blt.s bd18 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    bcfc:	   |   movea.l 16(sp),a0
    bd00:	   |   move.l 92(a0),d0
    bd04:	   |   sub.l 4(sp),d0
    bd08:	   |   move.l d0,-(sp)
    bd0a:	   |   move.l 20(sp),-(sp)
    bd0e:	   |   jsr bdf8 <turnMeAngle>
    bd14:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    bd16:	/--|-- bra.s bd5e <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    bd18:	|  \-> move.l 4(sp),d0
    bd1c:	|      neg.l d0
    bd1e:	|      cmp.l 8(sp),d0
    bd22:	|  /-- blt.s bd40 <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    bd24:	|  |   movea.l 16(sp),a0
    bd28:	|  |   move.l 92(a0),d0
    bd2c:	|  |   add.l 4(sp),d0
    bd30:	|  |   move.l d0,-(sp)
    bd32:	|  |   move.l 20(sp),-(sp)
    bd36:	|  |   jsr bdf8 <turnMeAngle>
    bd3c:	|  |   addq.l #8,sp
}
    bd3e:	+--|-- bra.s bd5e <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    bd40:	|  \-> movea.l 16(sp),a0
    bd44:	|      move.l 96(a0),d0
    bd48:	|      move.l d0,-(sp)
    bd4a:	|      move.l 20(sp),-(sp)
    bd4e:	|      jsr bdf8 <turnMeAngle>
    bd54:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    bd56:	|      movea.l 16(sp),a0
    bd5a:	|      clr.w 66(a0)
}
    bd5e:	\----> nop
    bd60:	       move.l (sp)+,d2
    bd62:	       addq.l #8,sp
    bd64:	       rts

0000bd66 <stopPerson>:


BOOL stopPerson (int o) {
    bd66:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    bd68:	       move.l 8(sp),-(sp)
    bd6c:	       jsr a626 <findPerson>
    bd72:	       addq.l #4,sp
    bd74:	       move.l d0,(sp)
    if (moveMe)
    bd76:	/----- beq.s bdb4 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    bd78:	|      movea.l (sp),a0
    bd7a:	|      move.l 68(a0),d0
    bd7e:	+----- beq.s bdb4 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    bd80:	|      movea.l (sp),a0
    bd82:	|      move.l 68(a0),d0
    bd86:	|      move.l d0,-(sp)
    bd88:	|      jsr 4718 <abortFunction>
    bd8e:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    bd90:	|      movea.l (sp),a0
    bd92:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    bd96:	|      movea.l (sp),a0
    bd98:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    bd9c:	|      movea.l (sp),a0
    bd9e:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    bda2:	|      clr.l -(sp)
    bda4:	|      move.l 4(sp),-(sp)
    bda8:	|      jsr 8170 <setFrames>
    bdae:	|      addq.l #8,sp
            return TRUE;
    bdb0:	|      moveq #1,d0
    bdb2:	|  /-- bra.s bdb6 <stopPerson+0x50>
        }
    return FALSE;
    bdb4:	\--|-> clr.w d0
}
    bdb6:	   \-> addq.l #4,sp
    bdb8:	       rts

0000bdba <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    bdba:	       subq.l #8,sp
	int total = 0;
    bdbc:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bdc0:	       clr.l (sp)
    bdc2:	   /-- bra.s bde4 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    bdc4:	/--|-> movea.l 12(sp),a0
    bdc8:	|  |   movea.l 4(a0),a0
    bdcc:	|  |   move.l (sp),d1
    bdce:	|  |   move.l d1,d0
    bdd0:	|  |   add.l d0,d0
    bdd2:	|  |   add.l d1,d0
    bdd4:	|  |   add.l d0,d0
    bdd6:	|  |   add.l d0,d0
    bdd8:	|  |   adda.l d0,a0
    bdda:	|  |   move.l 4(a0),d0
    bdde:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bde2:	|  |   addq.l #1,(sp)
    bde4:	|  \-> movea.l 12(sp),a0
    bde8:	|      move.l 8(a0),d0
    bdec:	|      cmp.l (sp),d0
    bdee:	\----- bgt.s bdc4 <timeForAnim+0xa>
	}
	return total;
    bdf0:	       move.l 4(sp),d0
}
    bdf4:	       addq.l #8,sp
    bdf6:	       rts

0000bdf8 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    bdf8:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    bdfa:	       movea.l 8(sp),a0
    bdfe:	       movea.l 80(a0),a0
    be02:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    be06:	       movea.l 8(sp),a0
    be0a:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    be10:	       move.l (sp),-(sp)
    be12:	       pea b4 <_start+0xb4>
    be16:	       jsr 17c64 <__divsi3>
    be1c:	       addq.l #8,sp
    be1e:	       move.l d0,d1
    be20:	       addi.l #180,d1
    be26:	       movea.l 8(sp),a0
    be2a:	       move.l 100(a0),d0
    be2e:	       add.l d1,d0
    be30:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    be34:	   /-- bra.s be3e <turnMeAngle+0x46>
    be36:	/--|-> addi.l #-360,12(sp)
    be3e:	|  \-> cmpi.l #359,12(sp)
    be46:	\----- bgt.s be36 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    be48:	       move.l (sp),-(sp)
    be4a:	       move.l 16(sp),-(sp)
    be4e:	       jsr 17be6 <__mulsi3>
    be54:	       addq.l #8,sp
    be56:	       pea 168 <decodeFilename+0x50>
    be5a:	       move.l d0,-(sp)
    be5c:	       jsr 17c64 <__divsi3>
    be62:	       addq.l #8,sp
    be64:	       movea.l 8(sp),a0
    be68:	       move.l d0,106(a0)
}
    be6c:	       nop
    be6e:	       addq.l #4,sp
    be70:	       rts

0000be72 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    be72:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    be74:	          move.l 8(sp),-(sp)
    be78:	          jsr a626 <findPerson>
    be7e:	          addq.l #4,sp
    be80:	          move.l d0,(sp)
    if (thisPerson) {
    be82:	/-------- beq.s bee2 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    be84:	|         movea.l (sp),a0
    be86:	|         move.l 68(a0),d0
    be8a:	|     /-- beq.s be9c <turnPersonToFace+0x2a>
    be8c:	|     |   movea.l (sp),a0
    be8e:	|     |   move.l 68(a0),d0
    be92:	|     |   move.l d0,-(sp)
    be94:	|     |   jsr 4718 <abortFunction>
    be9a:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    be9c:	|     \-> movea.l (sp),a0
    be9e:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    bea2:	|         movea.l (sp),a0
    bea4:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    bea8:	|         movea.l (sp),a0
    beaa:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    beae:	|         move.l 12(sp),-(sp)
    beb2:	|         move.l 4(sp),-(sp)
    beb6:	|         jsr bdf8 <turnMeAngle>
    bebc:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    bebe:	|         movea.l 1ca04 <speech>,a0
    bec4:	|         move.l (a0),d0
    bec6:	|         cmp.l (sp),d0
    bec8:	|  /----- bne.s bece <turnPersonToFace+0x5c>
    beca:	|  |      moveq #2,d0
    becc:	|  |  /-- bra.s bed0 <turnPersonToFace+0x5e>
    bece:	|  \--|-> moveq #0,d0
    bed0:	|     \-> move.l d0,-(sp)
    bed2:	|         move.l 4(sp),-(sp)
    bed6:	|         jsr 8170 <setFrames>
    bedc:	|         addq.l #8,sp
        return TRUE;
    bede:	|         moveq #1,d0
    bee0:	|     /-- bra.s bee4 <turnPersonToFace+0x72>
    }
    return FALSE;
    bee2:	\-----|-> clr.w d0
}
    bee4:	      \-> addq.l #4,sp
    bee6:	          rts

0000bee8 <walkAllPeople>:

void walkAllPeople() {
    bee8:	             subq.l #4,sp
	struct onScreenPerson *thisPerson = allPeople;
    beea:	             move.l 1ca0c <allPeople>,(sp)

	while (thisPerson) {
    bef0:	   /-------- bra.s bf60 <walkAllPeople+0x78>
		if (thisPerson->walking) {
    bef2:	/--|-------> movea.l (sp),a0
    bef4:	|  |         move.w 64(a0),d0
    bef8:	|  |     /-- beq.s bf0c <walkAllPeople+0x24>
			walkMe(thisPerson, TRUE);
    befa:	|  |     |   pea 1 <_start+0x1>
    befe:	|  |     |   move.l 4(sp),-(sp)
    bf02:	|  |     |   jsr bf6c <walkMe>
    bf08:	|  |     |   addq.l #8,sp
    bf0a:	|  |  /--|-- bra.s bf2c <walkAllPeople+0x44>
		} else if (thisPerson->spinning) {
    bf0c:	|  |  |  \-> movea.l (sp),a0
    bf0e:	|  |  |      move.w 66(a0),d0
    bf12:	|  |  +----- beq.s bf2c <walkAllPeople+0x44>
			spinStep(thisPerson);
    bf14:	|  |  |      move.l (sp),-(sp)
    bf16:	|  |  |      jsr bc88 <spinStep>
    bf1c:	|  |  |      addq.l #4,sp
			setFrames(thisPerson, ANI_STAND);
    bf1e:	|  |  |      clr.l -(sp)
    bf20:	|  |  |      move.l 4(sp),-(sp)
    bf24:	|  |  |      jsr 8170 <setFrames>
    bf2a:	|  |  |      addq.l #8,sp
		}
		if ((!thisPerson->walking) && (!thisPerson->spinning) && thisPerson->continueAfterWalking) {
    bf2c:	|  |  \----> movea.l (sp),a0
    bf2e:	|  |         move.w 64(a0),d0
    bf32:	|  |     /-- bne.s bf5a <walkAllPeople+0x72>
    bf34:	|  |     |   movea.l (sp),a0
    bf36:	|  |     |   move.w 66(a0),d0
    bf3a:	|  |     +-- bne.s bf5a <walkAllPeople+0x72>
    bf3c:	|  |     |   movea.l (sp),a0
    bf3e:	|  |     |   move.l 68(a0),d0
    bf42:	|  |     +-- beq.s bf5a <walkAllPeople+0x72>
			restartFunction(thisPerson->continueAfterWalking);
    bf44:	|  |     |   movea.l (sp),a0
    bf46:	|  |     |   move.l 68(a0),d0
    bf4a:	|  |     |   move.l d0,-(sp)
    bf4c:	|  |     |   jsr 6888 <restartFunction>
    bf52:	|  |     |   addq.l #4,sp
			thisPerson->continueAfterWalking = NULL;
    bf54:	|  |     |   movea.l (sp),a0
    bf56:	|  |     |   clr.l 68(a0)
		}
		thisPerson = thisPerson->next;
    bf5a:	|  |     \-> movea.l (sp),a0
    bf5c:	|  |         move.l 36(a0),(sp)
	while (thisPerson) {
    bf60:	|  \-------> tst.l (sp)
    bf62:	\----------- bne.s bef2 <walkAllPeople+0xa>
	}
}
    bf64:	             nop
    bf66:	             nop
    bf68:	             addq.l #4,sp
    bf6a:	             rts

0000bf6c <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    bf6c:	                lea -20(sp),sp
    bf70:	                move.l d3,-(sp)
    bf72:	                move.l d2,-(sp)
    bf74:	                move.l 36(sp),d0
    bf78:	                move.w d0,d0
    bf7a:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    bf7e:	                cmpi.w #-1,10(sp)
    bf84:	/-------------- bne.s bf8c <walkMe+0x20>
    bf86:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    bf8c:	>-------------> movea.l 32(sp),a0
    bf90:	|               move.l 48(a0),d0
    bf94:	|               move.l d0,-(sp)
    bf96:	|               jsr 17664 <__floatsisf>
    bf9c:	|               addq.l #4,sp
    bf9e:	|               move.l d0,d1
    bfa0:	|               movea.l 32(sp),a0
    bfa4:	|               move.l (a0),d0
    bfa6:	|               move.l d0,-(sp)
    bfa8:	|               move.l d1,-(sp)
    bfaa:	|               jsr 17958 <__subsf3>
    bfb0:	|               addq.l #8,sp
    bfb2:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    bfb6:	|               movea.l 32(sp),a0
    bfba:	|               move.l 52(a0),d0
    bfbe:	|               move.l d0,-(sp)
    bfc0:	|               jsr 17664 <__floatsisf>
    bfc6:	|               addq.l #4,sp
    bfc8:	|               move.l d0,d1
    bfca:	|               movea.l 32(sp),a0
    bfce:	|               move.l 4(a0),d0
    bfd2:	|               move.l d0,-(sp)
    bfd4:	|               move.l d1,-(sp)
    bfd6:	|               jsr 17958 <__subsf3>
    bfdc:	|               addq.l #8,sp
    bfde:	|               move.l d0,-(sp)
    bfe0:	|               move.l d0,-(sp)
    bfe2:	|               jsr 17420 <__addsf3>
    bfe8:	|               addq.l #8,sp
    bfea:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    bfee:	|               movea.l 32(sp),a0
    bff2:	|               move.l 32(a0),d2
    bff6:	|               movea.l 32(sp),a0
    bffa:	|               move.l 28(a0),d0
    bffe:	|               move.l d0,-(sp)
    c000:	|               jsr 17664 <__floatsisf>
    c006:	|               addq.l #4,sp
    c008:	|               move.l d0,-(sp)
    c00a:	|               move.l d2,-(sp)
    c00c:	|               jsr 17716 <__mulsf3>
    c012:	|               addq.l #8,sp
    c014:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    c018:	|               move.l 24(sp),-(sp)
    c01c:	|               jsr 17586 <__extendsfdf2>
    c022:	|               addq.l #4,sp
    c024:	|               move.l #-1717986918,-(sp)
    c02a:	|               move.l #1070176665,-(sp)
    c030:	|               move.l d1,-(sp)
    c032:	|               move.l d0,-(sp)
    c034:	|               jsr 1783c <__ltdf2>
    c03a:	|               lea 16(sp),sp
    c03e:	|               tst.l d0
    c040:	|           /-- bge.s c04a <walkMe+0xde>
    c042:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    c04a:	|           \-> move.l 20(sp),-(sp)
    c04e:	|               jsr 175fc <__fixsfsi>
    c054:	|               addq.l #4,sp
    c056:	|               move.l d0,-(sp)
    c058:	|               jsr 9216 <TF_abs>
    c05e:	|               addq.l #4,sp
    c060:	|               move.l d0,d2
    c062:	|               move.l 16(sp),-(sp)
    c066:	|               jsr 175fc <__fixsfsi>
    c06c:	|               addq.l #4,sp
    c06e:	|               move.l d0,-(sp)
    c070:	|               jsr 9216 <TF_abs>
    c076:	|               addq.l #4,sp
    c078:	|               cmp.l d2,d0
    c07a:	|        /----- bgt.s c09e <walkMe+0x132>
    c07c:	|        |      move.l 20(sp),-(sp)
    c080:	|        |      jsr 175fc <__fixsfsi>
    c086:	|        |      addq.l #4,sp
    c088:	|        |      move.l d0,-(sp)
    c08a:	|        |      jsr 9216 <TF_abs>
    c090:	|        |      addq.l #4,sp
    c092:	|        |      move.l d0,-(sp)
    c094:	|        |      jsr 17664 <__floatsisf>
    c09a:	|        |      addq.l #4,sp
    c09c:	|        |  /-- bra.s c0be <walkMe+0x152>
    c09e:	|        \--|-> move.l 16(sp),-(sp)
    c0a2:	|           |   jsr 175fc <__fixsfsi>
    c0a8:	|           |   addq.l #4,sp
    c0aa:	|           |   move.l d0,-(sp)
    c0ac:	|           |   jsr 9216 <TF_abs>
    c0b2:	|           |   addq.l #4,sp
    c0b4:	|           |   move.l d0,-(sp)
    c0b6:	|           |   jsr 17664 <__floatsisf>
    c0bc:	|           |   addq.l #4,sp
    c0be:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    c0c2:	|               move.l 12(sp),-(sp)
    c0c6:	|               jsr 175fc <__fixsfsi>
    c0cc:	|               addq.l #4,sp
    c0ce:	|               move.l d0,-(sp)
    c0d0:	|               jsr 9216 <TF_abs>
    c0d6:	|               addq.l #4,sp
    c0d8:	|               move.l d0,-(sp)
    c0da:	|               jsr 17664 <__floatsisf>
    c0e0:	|               addq.l #4,sp
    c0e2:	|               move.l d0,-(sp)
    c0e4:	|               move.l 28(sp),-(sp)
    c0e8:	|               jsr 1788a <__ltsf2>
    c0ee:	|               addq.l #8,sp
    c0f0:	|               tst.l d0
    c0f2:	|        /----- bge.w c1a4 <walkMe+0x238>
			if (thisPerson->spinning) {
    c0f6:	|        |      movea.l 32(sp),a0
    c0fa:	|        |      move.w 66(a0),d0
    c0fe:	|        |  /-- beq.s c11c <walkMe+0x1b0>
				spinStep(thisPerson);
    c100:	|        |  |   move.l 32(sp),-(sp)
    c104:	|        |  |   jsr bc88 <spinStep>
    c10a:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    c10c:	|        |  |   pea 1 <_start+0x1>
    c110:	|        |  |   move.l 36(sp),-(sp)
    c114:	|        |  |   jsr 8170 <setFrames>
    c11a:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    c11c:	|        |  \-> move.l 24(sp),-(sp)
    c120:	|        |      move.l 16(sp),-(sp)
    c124:	|        |      jsr 1751a <__divsf3>
    c12a:	|        |      addq.l #8,sp
    c12c:	|        |      move.l d0,24(sp)
			if (move)
    c130:	|        |      tst.w 10(sp)
    c134:	|        |  /-- beq.s c19e <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    c136:	|        |  |   movea.l 32(sp),a0
    c13a:	|        |  |   move.l 4(a0),d2
    c13e:	|        |  |   move.l 24(sp),d0
    c142:	|        |  |   move.l d0,-(sp)
    c144:	|        |  |   move.l d0,-(sp)
    c146:	|        |  |   jsr 17420 <__addsf3>
    c14c:	|        |  |   addq.l #8,sp
    c14e:	|        |  |   move.l d0,-(sp)
    c150:	|        |  |   move.l 20(sp),-(sp)
    c154:	|        |  |   jsr 1751a <__divsf3>
    c15a:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c15c:	|        |  |   move.l d0,-(sp)
    c15e:	|        |  |   move.l d2,-(sp)
    c160:	|        |  |   jsr 17420 <__addsf3>
    c166:	|        |  |   addq.l #8,sp
    c168:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    c16a:	|        |  |   movea.l 32(sp),a0
    c16e:	|        |  |   move.l (a0),d3
    c170:	|        |  |   move.l 24(sp),-(sp)
    c174:	|        |  |   move.l 24(sp),-(sp)
    c178:	|        |  |   jsr 1751a <__divsf3>
    c17e:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c180:	|        |  |   move.l d0,-(sp)
    c182:	|        |  |   move.l d3,-(sp)
    c184:	|        |  |   jsr 17420 <__addsf3>
    c18a:	|        |  |   addq.l #8,sp
    c18c:	|        |  |   move.l d2,-(sp)
    c18e:	|        |  |   move.l d0,-(sp)
    c190:	|        |  |   move.l 40(sp),-(sp)
    c194:	|        |  |   jsr ad6e <moveAndScale>
    c19a:	|        |  |   lea 12(sp),sp
			return TRUE;
    c19e:	|        |  \-> moveq #1,d0
    c1a0:	|  /-----|----- bra.w c252 <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    c1a4:	|  |     \----> movea.l 32(sp),a0
    c1a8:	|  |            move.l 56(a0),d0
    c1ac:	|  |            moveq #-1,d1
    c1ae:	|  |            cmp.l d0,d1
    c1b0:	|  |        /-- bne.s c1e8 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    c1b2:	|  |        |   movea.l 32(sp),a0
    c1b6:	|  |        |   move.l 110(a0),d0
    c1ba:	|  |        |   moveq #-1,d1
    c1bc:	|  |        |   cmp.l d0,d1
    c1be:	|  |  /-----|-- beq.s c1fc <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    c1c0:	|  |  |     |   movea.l 32(sp),a0
    c1c4:	|  |  |     |   move.l 110(a0),d0
    c1c8:	|  |  |     |   movea.l 32(sp),a0
    c1cc:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    c1d0:	|  |  |     |   movea.l 32(sp),a0
    c1d4:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    c1da:	|  |  |     |   move.l 32(sp),-(sp)
    c1de:	|  |  |     |   jsr bc88 <spinStep>
    c1e4:	|  |  |     |   addq.l #4,sp
			}
			break;
    c1e6:	|  |  +-----|-- bra.s c1fc <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    c1e8:	|  |  |     \-> move.l 32(sp),-(sp)
    c1ec:	|  |  |         jsr 9988 <doBorderStuff>
    c1f2:	|  |  |         addq.l #4,sp
    c1f4:	|  |  |         tst.w d0
    c1f6:	|  |  |  /----- beq.s c200 <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c1f8:	\--|--|--|----- bra.w bf8c <walkMe+0x20>
			break;
    c1fc:	   |  \--|----> nop
    c1fe:	   |     |  /-- bra.s c202 <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    c200:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    c202:	   |        \-> movea.l 32(sp),a0
    c206:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    c20a:	   |            clr.l -(sp)
    c20c:	   |            move.l 36(sp),-(sp)
    c210:	   |            jsr 8170 <setFrames>
    c216:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    c218:	   |            movea.l 32(sp),a0
    c21c:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    c220:	   |            move.l d0,-(sp)
    c222:	   |            jsr 17664 <__floatsisf>
    c228:	   |            addq.l #4,sp
    c22a:	   |            move.l d0,d2
				 thisPerson->walkToX,
    c22c:	   |            movea.l 32(sp),a0
    c230:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    c234:	   |            move.l d0,-(sp)
    c236:	   |            jsr 17664 <__floatsisf>
    c23c:	   |            addq.l #4,sp
    c23e:	   |            move.l d2,-(sp)
    c240:	   |            move.l d0,-(sp)
    c242:	   |            move.l 40(sp),-(sp)
    c246:	   |            jsr ad6e <moveAndScale>
    c24c:	   |            lea 12(sp),sp
	return FALSE;
    c250:	   |            clr.w d0
}
    c252:	   \----------> move.l (sp)+,d2
    c254:	                move.l (sp)+,d3
    c256:	                lea 20(sp),sp
    c25a:	                rts

0000c25c <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    c25c:	       subq.l #8,sp
    c25e:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    c260:	   /-- bra.s c290 <clearStackLib+0x34>
		k = stackLib;
    c262:	/--|-> move.l 1ca38 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    c26a:	|  |   movea.l 1ca38 <stackLib>,a0
    c270:	|  |   move.l 4(a0),d0
    c274:	|  |   move.l d0,1ca38 <stackLib>
		FreeVec(k);
    c27a:	|  |   move.l 8(sp),4(sp)
    c280:	|  |   move.l 1c9a8 <SysBase>,d0
    c286:	|  |   movea.l d0,a6
    c288:	|  |   movea.l 4(sp),a1
    c28c:	|  |   jsr -690(a6)
	while (stackLib) {
    c290:	|  \-> move.l 1ca38 <stackLib>,d0
    c296:	\----- bne.s c262 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    c298:	       clr.l 1ca34 <stackLibTotal>
}
    c29e:	       nop
    c2a0:	       movea.l (sp)+,a6
    c2a2:	       addq.l #8,sp
    c2a4:	       rts

0000c2a6 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    c2a6:	          lea -128(sp),sp
    c2aa:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    c2ae:	      /-- bra.s c2c0 <loadGame+0x1a>
    c2b0:	   /--|-> move.l 1c940 <allRunningFunctions>,d0
    c2b6:	   |  |   move.l d0,-(sp)
    c2b8:	   |  |   jsr 5720 <finishFunction>
    c2be:	   |  |   addq.l #4,sp
    c2c0:	   |  \-> move.l 1c940 <allRunningFunctions>,d0
    c2c6:	   \----- bne.s c2b0 <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    c2c8:	          pea 1ca3c <ssgVersion>
    c2ce:	          pea 19233 <PutChar+0x1537>
    c2d4:	          pea 41 <_start+0x41>
    c2d8:	          pea 53 <_start+0x53>
    c2dc:	          move.l 160(sp),-(sp)
    c2e0:	          jsr 64d6 <openAndVerify>
    c2e6:	          lea 20(sp),sp
    c2ea:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    c2ee:	      /-- bne.s c2f6 <loadGame+0x50>
    c2f0:	      |   clr.w d0
    c2f2:	/-----|-- bra.w c59c <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    c2f6:	|     \-> move.l 112(sp),108(sp)
    c2fc:	|         lea 140(sp),a0
    c300:	|         lea -126(a0),a0
    c304:	|         move.l a0,120(sp)
    c308:	|         moveq #8,d0
    c30a:	|         move.l d0,116(sp)
    c30e:	|         move.l 1c9b0 <DOSBase>,d0
    c314:	|         movea.l d0,a6
    c316:	|         move.l 108(sp),d1
    c31a:	|         move.l 120(sp),d2
    c31e:	|         move.l 116(sp),d3
    c322:	|         jsr -42(a6)
    c326:	|         move.l d0,132(sp)
    c32a:	|         move.l 132(sp),d0
    c32e:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    c332:	|         moveq #8,d0
    c334:	|         cmp.l 128(sp),d0
    c338:	|     /-- beq.s c348 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    c33a:	|     |   pea 19254 <PutChar+0x1558>
    c340:	|     |   jsr 17232 <KPrintF>
    c346:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c348:	|     \-> move.l 14(sp),d1
    c34c:	|         move.l 1c94a <fileTime>,d0
    c352:	|         cmp.l d1,d0
    c354:	|     /-- bne.s c364 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    c356:	|     |   move.l 18(sp),d1
    c35a:	|     |   move.l 1c94e <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c360:	|     |   cmp.l d1,d0
    c362:	|  /--|-- beq.s c384 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    c364:	|  |  \-> move.l 144(sp),-(sp)
    c368:	|  |      pea 19270 <PutChar+0x1574>
    c36e:	|  |      pea 19337 <PutChar+0x163b>
    c374:	|  |      jsr 17232 <KPrintF>
    c37a:	|  |      lea 12(sp),sp
		return FALSE; 
    c37e:	|  |      clr.w d0
    c380:	+--|----- bra.w c59c <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    c384:	|  \----> move.l 112(sp),124(sp)
    c38a:	|         move.l 1c9b0 <DOSBase>,d0
    c390:	|         movea.l d0,a6
    c392:	|         move.l 124(sp),d1
    c396:	|         jsr -306(a6)
    c39a:	|         move.l d0,136(sp)
    c39e:	|         move.l 136(sp),d0
    c3a2:	|         move.l d0,d0
    c3a4:	|         move.w d0,1c204 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    c3aa:	|         move.l 112(sp),100(sp)
    c3b0:	|         move.l 1c9b0 <DOSBase>,d0
    c3b6:	|         movea.l d0,a6
    c3b8:	|         move.l 100(sp),d1
    c3bc:	|         jsr -306(a6)
    c3c0:	|         move.l d0,96(sp)
    c3c4:	|         move.l 96(sp),d0
    c3c8:	|         move.l d0,d0
    c3ca:	|         move.w d0,1c948 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    c3d0:	|         move.l 112(sp),92(sp)
    c3d6:	|         move.l 1c9b0 <DOSBase>,d0
    c3dc:	|         movea.l d0,a6
    c3de:	|         move.l 92(sp),d1
    c3e2:	|         jsr -306(a6)
    c3e6:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    c3ea:	|         move.l 112(sp),84(sp)
    c3f0:	|         move.l 1c9b0 <DOSBase>,d0
    c3f6:	|         movea.l d0,a6
    c3f8:	|         move.l 84(sp),d1
    c3fc:	|         jsr -306(a6)
    c400:	|         move.l d0,80(sp)
    c404:	|         move.l 80(sp),d0
    c408:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    c40c:	|     /-- beq.s c440 <loadGame+0x19a>
		fontNum = get2bytes (fp);
    c40e:	|     |   move.l 112(sp),-(sp)
    c412:	|     |   jsr 6bc <get2bytes>
    c418:	|     |   addq.l #4,sp
    c41a:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    c41e:	|     |   move.l 112(sp),-(sp)
    c422:	|     |   jsr 6bc <get2bytes>
    c428:	|     |   addq.l #4,sp
    c42a:	|     |   move.l d0,1caa0 <fontHeight>
		charOrder = readString(fp);		
    c430:	|     |   move.l 112(sp),-(sp)
    c434:	|     |   jsr b02 <readString>
    c43a:	|     |   addq.l #4,sp
    c43c:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    c440:	|     \-> move.l 104(sp),70(sp)
    c446:	|         move.l 1c9a8 <SysBase>,d0
    c44c:	|         movea.l d0,a6
    c44e:	|         movea.l 70(sp),a1
    c452:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    c456:	|         move.l 112(sp),-(sp)
    c45a:	|         jsr 854 <getSigned>
    c460:	|         addq.l #4,sp
    c462:	|         move.w d0,1c8ac <fontSpace>

	killAllPeople ();
    c468:	|         jsr aa10 <killAllPeople>
	killAllRegions ();
    c46e:	|         jsr 15a42 <killAllRegions>

	int camerX = get2bytes (fp);
    c474:	|         move.l 112(sp),-(sp)
    c478:	|         jsr 6bc <get2bytes>
    c47e:	|         addq.l #4,sp
    c480:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    c484:	|         move.l 112(sp),-(sp)
    c488:	|         jsr 6bc <get2bytes>
    c48e:	|         addq.l #4,sp
    c490:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    c494:	|         move.l 112(sp),-(sp)
    c498:	|         jsr 7d8 <getFloat>
    c49e:	|         addq.l #4,sp
    c4a0:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    c4a4:	|         move.l 112(sp),54(sp)
    c4aa:	|         move.l 1c9b0 <DOSBase>,d0
    c4b0:	|         movea.l d0,a6
    c4b2:	|         move.l 54(sp),d1
    c4b6:	|         jsr -306(a6)
    c4ba:	|         move.l d0,50(sp)
    c4be:	|         move.l 50(sp),d0
    c4c2:	|         move.l d0,d0
    c4c4:	|         move.b d0,1c31e <brightnessLevel>

	loadHandlers (fp);
    c4ca:	|         move.l 112(sp),-(sp)
    c4ce:	|         jsr 6436 <loadHandlers>
    c4d4:	|         addq.l #4,sp
	loadRegions (fp);
    c4d6:	|         move.l 112(sp),-(sp)
    c4da:	|         jsr 15a9e <loadRegions>
    c4e0:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    c4e2:	|         moveq #12,d0
    c4e4:	|         move.l d0,46(sp)
    c4e8:	|         clr.l 42(sp)
    c4ec:	|         move.l 1c9a8 <SysBase>,d0
    c4f2:	|         movea.l d0,a6
    c4f4:	|         move.l 46(sp),d0
    c4f8:	|         move.l 42(sp),d1
    c4fc:	|         jsr -684(a6)
    c500:	|         move.l d0,38(sp)
    c504:	|         move.l 38(sp),d0
    c508:	|         move.l d0,1c8ae <mouseCursorAnim>
	if (! mouseCursorAnim) {
    c50e:	|         move.l 1c8ae <mouseCursorAnim>,d0
    c514:	|     /-- bne.s c528 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    c516:	|     |   pea 19341 <PutChar+0x1645>
    c51c:	|     |   jsr 17232 <KPrintF>
    c522:	|     |   addq.l #4,sp
		return FALSE;
    c524:	|     |   clr.w d0
    c526:	+-----|-- bra.s c59c <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    c528:	|     \-> jsr d3b6 <nosnapshot>
	if (FGetC (fp)) {
    c52e:	|         move.l 112(sp),34(sp)
    c534:	|         move.l 1c9b0 <DOSBase>,d0
    c53a:	|         movea.l d0,a6
    c53c:	|         move.l 34(sp),d1
    c540:	|         jsr -306(a6)
    c544:	|         move.l d0,30(sp)
    c548:	|         move.l 30(sp),d0
    c54c:	|     /-- beq.s c562 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    c54e:	|     |   move.l 112(sp),-(sp)
    c552:	|     |   jsr d436 <restoreSnapshot>
    c558:	|     |   addq.l #4,sp
    c55a:	|     |   tst.w d0
    c55c:	|     +-- bne.s c562 <loadGame+0x2bc>
    c55e:	|     |   clr.w d0
    c560:	+-----|-- bra.s c59c <loadGame+0x2f6>
	}

	Close (fp);
    c562:	|     \-> move.l 112(sp),26(sp)
    c568:	|         move.l 1c9b0 <DOSBase>,d0
    c56e:	|         movea.l d0,a6
    c570:	|         move.l 26(sp),d1
    c574:	|         jsr -36(a6)
    c578:	|         move.l d0,22(sp)
	clearStackLib ();
    c57c:	|         jsr c25c <clearStackLib>

	cameraX = camerX;
    c582:	|         move.l 66(sp),1ca62 <cameraX>
	cameraY = camerY;
    c58a:	|         move.l 62(sp),1ca66 <cameraY>
	cameraZoom = camerZ;
    c592:	|         move.l 58(sp),1c346 <cameraZoom>

	return TRUE;
    c59a:	|         moveq #1,d0
}
    c59c:	\-------> movem.l (sp)+,d2-d3/a6
    c5a0:	          lea 128(sp),sp
    c5a4:	          rts

0000c5a6 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    c5a6:	   /-> lea -64(sp),sp
    c5aa:	   |   move.l a6,-(sp)
    c5ac:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    c5ae:	   |   movea.l 76(sp),a0
    c5b2:	   |   move.l (a0),d0
    c5b4:	   |   move.l 80(sp),-(sp)
    c5b8:	   |   move.l d0,-(sp)
    c5ba:	   |   jsr 8d0 <put2bytes>
    c5c0:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    c5c2:	   |   movea.l 76(sp),a0
    c5c6:	   |   move.l 40(a0),d0
    c5ca:	/--|-- beq.s c606 <saveFunction+0x60>
		FPutC (fp, 1);
    c5cc:	|  |   move.l 80(sp),52(sp)
    c5d2:	|  |   moveq #1,d0
    c5d4:	|  |   move.l d0,48(sp)
    c5d8:	|  |   move.l 1c9b0 <DOSBase>,d0
    c5de:	|  |   movea.l d0,a6
    c5e0:	|  |   move.l 52(sp),d1
    c5e4:	|  |   move.l 48(sp),d2
    c5e8:	|  |   jsr -312(a6)
    c5ec:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    c5f0:	|  |   movea.l 76(sp),a0
    c5f4:	|  |   move.l 40(a0),d0
    c5f8:	|  |   move.l 80(sp),-(sp)
    c5fc:	|  |   move.l d0,-(sp)
    c5fe:	|  \-- jsr c5a6 <saveFunction>(pc)
    c602:	|      addq.l #8,sp
    c604:	|  /-- bra.s c628 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    c606:	\--|-> move.l 80(sp),64(sp)
    c60c:	   |   clr.l 60(sp)
    c610:	   |   move.l 1c9b0 <DOSBase>,d0
    c616:	   |   movea.l d0,a6
    c618:	   |   move.l 64(sp),d1
    c61c:	   |   move.l 60(sp),d2
    c620:	   |   jsr -312(a6)
    c624:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    c628:	   \-> movea.l 76(sp),a0
    c62c:	       move.l 12(a0),d0
    c630:	       move.l 80(sp),-(sp)
    c634:	       move.l d0,-(sp)
    c636:	       jsr 958 <put4bytes>
    c63c:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    c63e:	       movea.l 76(sp),a0
    c642:	       move.l 36(a0),d0
    c646:	       move.l 80(sp),-(sp)
    c64a:	       move.l d0,-(sp)
    c64c:	       jsr 8d0 <put2bytes>
    c652:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    c654:	       move.l 80(sp),40(sp)
    c65a:	       movea.l 76(sp),a0
    c65e:	       move.w 54(a0),d0
    c662:	       movea.w d0,a0
    c664:	       move.l a0,36(sp)
    c668:	       move.l 1c9b0 <DOSBase>,d0
    c66e:	       movea.l d0,a6
    c670:	       move.l 40(sp),d1
    c674:	       move.l 36(sp),d2
    c678:	       jsr -312(a6)
    c67c:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    c680:	       move.l 80(sp),28(sp)
    c686:	       movea.l 76(sp),a0
    c68a:	       move.w 48(a0),d0
    c68e:	       movea.w d0,a0
    c690:	       move.l a0,24(sp)
    c694:	       move.l 1c9b0 <DOSBase>,d0
    c69a:	       movea.l d0,a6
    c69c:	       move.l 28(sp),d1
    c6a0:	       move.l 24(sp),d2
    c6a4:	       jsr -312(a6)
    c6a8:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    c6ac:	       move.l 80(sp),16(sp)
    c6b2:	       movea.l 76(sp),a0
    c6b6:	       move.w 50(a0),d0
    c6ba:	       movea.w d0,a0
    c6bc:	       move.l a0,12(sp)
    c6c0:	       move.l 1c9b0 <DOSBase>,d0
    c6c6:	       movea.l d0,a6
    c6c8:	       move.l 16(sp),d1
    c6cc:	       move.l 12(sp),d2
    c6d0:	       jsr -312(a6)
    c6d4:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    c6d8:	       moveq #28,d0
    c6da:	       add.l 76(sp),d0
    c6de:	       move.l 80(sp),-(sp)
    c6e2:	       move.l d0,-(sp)
    c6e4:	       jsr cdfe <saveVariable>
    c6ea:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    c6ec:	       movea.l 76(sp),a0
    c6f0:	       move.b 56(a0),d0
    c6f4:	   /-- beq.s c704 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    c6f6:	   |   pea 19362 <PutChar+0x1666>
    c6fc:	   |   jsr 17232 <KPrintF>
    c702:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    c704:	   \-> movea.l 76(sp),a0
    c708:	       move.l 24(a0),d0
    c70c:	       move.l 80(sp),-(sp)
    c710:	       move.l d0,-(sp)
    c712:	       jsr cc72 <saveStack>
    c718:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c71a:	       clr.l 68(sp)
    c71e:	   /-- bra.s c742 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    c720:	/--|-> movea.l 76(sp),a0
    c724:	|  |   move.l 20(a0),d1
    c728:	|  |   move.l 68(sp),d0
    c72c:	|  |   lsl.l #3,d0
    c72e:	|  |   add.l d1,d0
    c730:	|  |   move.l 80(sp),-(sp)
    c734:	|  |   move.l d0,-(sp)
    c736:	|  |   jsr cdfe <saveVariable>
    c73c:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c73e:	|  |   addq.l #1,68(sp)
    c742:	|  \-> movea.l 76(sp),a0
    c746:	|      move.l 8(a0),d0
    c74a:	|      cmp.l 68(sp),d0
    c74e:	\----- bgt.s c720 <saveFunction+0x17a>
	}
}
    c750:	       nop
    c752:	       nop
    c754:	       move.l (sp)+,d2
    c756:	       movea.l (sp)+,a6
    c758:	       lea 64(sp),sp
    c75c:	       rts

0000c75e <saveGame>:

BOOL saveGame (char * fname) {
    c75e:	          lea -248(sp),sp
    c762:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    c766:	          move.l 264(sp),244(sp)
    c76c:	          move.l #1006,240(sp)
    c774:	          move.l 1c9b0 <DOSBase>,d0
    c77a:	          movea.l d0,a6
    c77c:	          move.l 244(sp),d1
    c780:	          move.l 240(sp),d2
    c784:	          jsr -30(a6)
    c788:	          move.l d0,236(sp)
    c78c:	          move.l 236(sp),d0
    c790:	          move.l d0,232(sp)
	if (fp == NULL) {
    c794:	      /-- bne.s c7aa <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    c796:	      |   pea 19384 <PutChar+0x1688>
    c79c:	      |   jsr 17232 <KPrintF>
    c7a2:	      |   addq.l #4,sp
		return FALSE;
    c7a4:	      |   clr.w d0
    c7a6:	/-----|-- bra.w cc68 <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    c7aa:	|     \-> move.l 232(sp),228(sp)
    c7b0:	|         move.l #103329,224(sp)
    c7b8:	|         moveq #6,d0
    c7ba:	|         move.l d0,220(sp)
    c7be:	|         move.l 1c9b0 <DOSBase>,d0
    c7c4:	|         movea.l d0,a6
    c7c6:	|         move.l 228(sp),d1
    c7ca:	|         move.l 224(sp),d2
    c7ce:	|         move.l 220(sp),d3
    c7d2:	|         jsr -48(a6)
    c7d6:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    c7da:	|         move.l 232(sp),212(sp)
    c7e0:	|         clr.l 208(sp)
    c7e4:	|         move.l 1c9b0 <DOSBase>,d0
    c7ea:	|         movea.l d0,a6
    c7ec:	|         move.l 212(sp),d1
    c7f0:	|         move.l 208(sp),d2
    c7f4:	|         jsr -312(a6)
    c7f8:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    c7fc:	|         move.l 232(sp),200(sp)
    c802:	|         clr.l 196(sp)
    c806:	|         move.l 1c9b0 <DOSBase>,d0
    c80c:	|         movea.l d0,a6
    c80e:	|         move.l 200(sp),d1
    c812:	|         move.l 196(sp),d2
    c816:	|         jsr -312(a6)
    c81a:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    c81e:	|         move.l 232(sp),188(sp)
    c824:	|         moveq #2,d0
    c826:	|         move.l d0,184(sp)
    c82a:	|         move.l 1c9b0 <DOSBase>,d0
    c830:	|         movea.l d0,a6
    c832:	|         move.l 188(sp),d1
    c836:	|         move.l 184(sp),d2
    c83a:	|         jsr -312(a6)
    c83e:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    c842:	|         move.l 232(sp),176(sp)
    c848:	|         moveq #2,d0
    c84a:	|         move.l d0,172(sp)
    c84e:	|         move.l 1c9b0 <DOSBase>,d0
    c854:	|         movea.l d0,a6
    c856:	|         move.l 176(sp),d1
    c85a:	|         move.l 172(sp),d2
    c85e:	|         jsr -312(a6)
    c862:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    c866:	|         move.l 232(sp),164(sp)
    c86c:	|         move.l #117066,160(sp)
    c874:	|         moveq #8,d0
    c876:	|         move.l d0,156(sp)
    c87a:	|         move.l 1c9b0 <DOSBase>,d0
    c880:	|         movea.l d0,a6
    c882:	|         move.l 164(sp),d1
    c886:	|         move.l 160(sp),d2
    c88a:	|         move.l 156(sp),d3
    c88e:	|         jsr -48(a6)
    c892:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    c896:	|         move.l 232(sp),148(sp)
    c89c:	|         move.w 1c204 <allowAnyFilename>,d0
    c8a2:	|         movea.w d0,a0
    c8a4:	|         move.l a0,144(sp)
    c8a8:	|         move.l 1c9b0 <DOSBase>,d0
    c8ae:	|         movea.l d0,a6
    c8b0:	|         move.l 148(sp),d1
    c8b4:	|         move.l 144(sp),d2
    c8b8:	|         jsr -312(a6)
    c8bc:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    c8c0:	|         move.l 232(sp),136(sp)
    c8c6:	|         move.w 1c948 <captureAllKeys>,d0
    c8cc:	|         movea.w d0,a0
    c8ce:	|         move.l a0,132(sp)
    c8d2:	|         move.l 1c9b0 <DOSBase>,d0
    c8d8:	|         movea.l d0,a6
    c8da:	|         move.l 136(sp),d1
    c8de:	|         move.l 132(sp),d2
    c8e2:	|         jsr -312(a6)
    c8e6:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    c8ea:	|         move.l 232(sp),124(sp)
    c8f0:	|         moveq #1,d0
    c8f2:	|         move.l d0,120(sp)
    c8f6:	|         move.l 1c9b0 <DOSBase>,d0
    c8fc:	|         movea.l d0,a6
    c8fe:	|         move.l 124(sp),d1
    c902:	|         move.l 120(sp),d2
    c906:	|         jsr -312(a6)
    c90a:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    c90e:	|         move.l 232(sp),112(sp)
    c914:	|         move.l 1cab0 <fontTableSize>,d0
    c91a:	|         sgt d0
    c91c:	|         neg.b d0
    c91e:	|         move.b d0,d0
    c920:	|         andi.l #255,d0
    c926:	|         move.l d0,108(sp)
    c92a:	|         move.l 1c9b0 <DOSBase>,d0
    c930:	|         movea.l d0,a6
    c932:	|         move.l 112(sp),d1
    c936:	|         move.l 108(sp),d2
    c93a:	|         jsr -312(a6)
    c93e:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    c942:	|         move.l 1cab0 <fontTableSize>,d0
    c948:	|     /-- ble.s c986 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    c94a:	|     |   move.l 1caa4 <loadedFontNum>,d0
    c950:	|     |   move.l 232(sp),-(sp)
    c954:	|     |   move.l d0,-(sp)
    c956:	|     |   jsr 8d0 <put2bytes>
    c95c:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    c95e:	|     |   move.l 1caa0 <fontHeight>,d0
    c964:	|     |   move.l 232(sp),-(sp)
    c968:	|     |   move.l d0,-(sp)
    c96a:	|     |   jsr 8d0 <put2bytes>
    c970:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    c972:	|     |   move.l 1caa8 <fontOrderString>,d0
    c978:	|     |   move.l 232(sp),-(sp)
    c97c:	|     |   move.l d0,-(sp)
    c97e:	|     |   jsr bd8 <writeString>
    c984:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    c986:	|     \-> move.w 1c8ac <fontSpace>,d0
    c98c:	|         movea.w d0,a0
    c98e:	|         move.l 232(sp),-(sp)
    c992:	|         move.l a0,-(sp)
    c994:	|         jsr a9c <putSigned>
    c99a:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    c99c:	|         move.l 1ca62 <cameraX>,d0
    c9a2:	|         move.l 232(sp),-(sp)
    c9a6:	|         move.l d0,-(sp)
    c9a8:	|         jsr 8d0 <put2bytes>
    c9ae:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    c9b0:	|         move.l 1ca66 <cameraY>,d0
    c9b6:	|         move.l 232(sp),-(sp)
    c9ba:	|         move.l d0,-(sp)
    c9bc:	|         jsr 8d0 <put2bytes>
    c9c2:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    c9c4:	|         move.l 1c346 <cameraZoom>,d0
    c9ca:	|         move.l 232(sp),-(sp)
    c9ce:	|         move.l d0,-(sp)
    c9d0:	|         jsr a46 <putFloat>
    c9d6:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    c9d8:	|         move.l 232(sp),100(sp)
    c9de:	|         move.b 1c31e <brightnessLevel>,d0
    c9e4:	|         move.b d0,d0
    c9e6:	|         andi.l #255,d0
    c9ec:	|         move.l d0,96(sp)
    c9f0:	|         move.l 1c9b0 <DOSBase>,d0
    c9f6:	|         movea.l d0,a6
    c9f8:	|         move.l 100(sp),d1
    c9fc:	|         move.l 96(sp),d2
    ca00:	|         jsr -312(a6)
    ca04:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    ca08:	|         move.l 232(sp),-(sp)
    ca0c:	|         jsr 69ba <saveHandlers>
    ca12:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    ca14:	|         move.l 232(sp),-(sp)
    ca18:	|         jsr 15c58 <saveRegions>
    ca1e:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    ca20:	|         move.l 1c8ae <mouseCursorAnim>,d0
    ca26:	|         move.l 232(sp),-(sp)
    ca2a:	|         move.l d0,-(sp)
    ca2c:	|         jsr af82 <saveAnim>
    ca32:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    ca34:	|         move.l 1c8b2 <mouseCursorFrameNum>,d0
    ca3a:	|         move.l 232(sp),-(sp)
    ca3e:	|         move.l d0,-(sp)
    ca40:	|         jsr 8d0 <put2bytes>
    ca46:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    ca48:	|         move.l 1c940 <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    ca50:	|         clr.l 248(sp)
	while (thisFunction) {
    ca54:	|     /-- bra.s ca64 <saveGame+0x306>
		countFunctions ++;
    ca56:	|  /--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    ca5a:	|  |  |   movea.l 252(sp),a0
    ca5e:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    ca64:	|  |  \-> tst.l 252(sp)
    ca68:	|  \----- bne.s ca56 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    ca6a:	|         move.l 232(sp),-(sp)
    ca6e:	|         move.l 252(sp),-(sp)
    ca72:	|         jsr 8d0 <put2bytes>
    ca78:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    ca7a:	|         move.l 1c940 <allRunningFunctions>,252(sp)
	while (thisFunction) {
    ca82:	|     /-- bra.s ca9e <saveGame+0x340>
		saveFunction (thisFunction, fp);
    ca84:	|  /--|-> move.l 232(sp),-(sp)
    ca88:	|  |  |   move.l 256(sp),-(sp)
    ca8c:	|  |  |   jsr c5a6 <saveFunction>
    ca92:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    ca94:	|  |  |   movea.l 252(sp),a0
    ca98:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    ca9e:	|  |  \-> tst.l 252(sp)
    caa2:	|  \----- bne.s ca84 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    caa4:	|         clr.l 256(sp)
    caa8:	|     /-- bra.s caca <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    caaa:	|  /--|-> move.l 1c956 <globalVars>,d1
    cab0:	|  |  |   move.l 256(sp),d0
    cab4:	|  |  |   lsl.l #3,d0
    cab6:	|  |  |   add.l d1,d0
    cab8:	|  |  |   move.l 232(sp),-(sp)
    cabc:	|  |  |   move.l d0,-(sp)
    cabe:	|  |  |   jsr cdfe <saveVariable>
    cac4:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    cac6:	|  |  |   addq.l #1,256(sp)
    caca:	|  |  \-> move.l 1c980 <numGlobals>,d0
    cad0:	|  |      cmp.l 256(sp),d0
    cad4:	|  \----- bgt.s caaa <saveGame+0x34c>
	}

	savePeople (fp);
    cad6:	|         move.l 232(sp),-(sp)
    cada:	|         jsr b0aa <savePeople>
    cae0:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    cae2:	|         movea.l 1cac4 <currentFloor>,a0
    cae8:	|         move.l 8(a0),d0
    caec:	|  /----- beq.s cb2a <saveGame+0x3cc>
		FPutC (fp, 1);
    caee:	|  |      move.l 232(sp),76(sp)
    caf4:	|  |      moveq #1,d0
    caf6:	|  |      move.l d0,72(sp)
    cafa:	|  |      move.l 1c9b0 <DOSBase>,d0
    cb00:	|  |      movea.l d0,a6
    cb02:	|  |      move.l 76(sp),d1
    cb06:	|  |      move.l 72(sp),d2
    cb0a:	|  |      jsr -312(a6)
    cb0e:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    cb12:	|  |      movea.l 1cac4 <currentFloor>,a0
    cb18:	|  |      move.l (a0),d0
    cb1a:	|  |      move.l 232(sp),-(sp)
    cb1e:	|  |      move.l d0,-(sp)
    cb20:	|  |      jsr 8d0 <put2bytes>
    cb26:	|  |      addq.l #8,sp
    cb28:	|  |  /-- bra.s cb4c <saveGame+0x3ee>
	} else FPutC (fp, 0);
    cb2a:	|  \--|-> move.l 232(sp),88(sp)
    cb30:	|     |   clr.l 84(sp)
    cb34:	|     |   move.l 1c9b0 <DOSBase>,d0
    cb3a:	|     |   movea.l d0,a6
    cb3c:	|     |   move.l 88(sp),d1
    cb40:	|     |   move.l 84(sp),d2
    cb44:	|     |   jsr -312(a6)
    cb48:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    cb4c:	|     \-> move.l 232(sp),64(sp)
    cb52:	|         move.l 1ca76 <speechMode>,60(sp)
    cb5a:	|         move.l 1c9b0 <DOSBase>,d0
    cb60:	|         movea.l d0,a6
    cb62:	|         move.l 64(sp),d1
    cb66:	|         move.l 60(sp),d2
    cb6a:	|         jsr -312(a6)
    cb6e:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    cb72:	|         move.b 1c882 <fadeMode>,d0
    cb78:	|         move.b d0,d0
    cb7a:	|         andi.l #255,d0
    cb80:	|         move.l d0,52(sp)
    cb84:	|         move.l 232(sp),48(sp)
    cb8a:	|         move.l 1c9b0 <DOSBase>,d0
    cb90:	|         movea.l d0,a6
    cb92:	|         move.l 52(sp),d1
    cb96:	|         move.l 48(sp),d2
    cb9a:	|         jsr -312(a6)
    cb9e:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    cba2:	|         move.l 1ca04 <speech>,d0
    cba8:	|         move.l 232(sp),-(sp)
    cbac:	|         move.l d0,-(sp)
    cbae:	|         jsr 8024 <saveSpeech>
    cbb4:	|         addq.l #8,sp
	saveStatusBars (fp);
    cbb6:	|         move.l 232(sp),-(sp)
    cbba:	|         jsr 7a20 <saveStatusBars>
    cbc0:	|         addq.l #4,sp
	saveSounds (fp);
    cbc2:	|         move.l 232(sp),-(sp)
    cbc6:	|         jsr d164 <saveSounds>
    cbcc:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    cbce:	|         move.w 1ca60 <saveEncoding>,d0
    cbd4:	|         move.w d0,d0
    cbd6:	|         andi.l #65535,d0
    cbdc:	|         move.l 232(sp),-(sp)
    cbe0:	|         move.l d0,-(sp)
    cbe2:	|         jsr 8d0 <put2bytes>
    cbe8:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    cbea:	|         move.l 1ca52 <parallaxStuff>,d0
    cbf0:	|         move.l 232(sp),-(sp)
    cbf4:	|         move.l d0,-(sp)
    cbf6:	|         jsr d45c <saveParallaxRecursive>
    cbfc:	|         addq.l #8,sp
	FPutC (fp, 0);
    cbfe:	|         move.l 232(sp),40(sp)
    cc04:	|         clr.l 36(sp)
    cc08:	|         move.l 1c9b0 <DOSBase>,d0
    cc0e:	|         movea.l d0,a6
    cc10:	|         move.l 40(sp),d1
    cc14:	|         move.l 36(sp),d2
    cc18:	|         jsr -312(a6)
    cc1c:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    cc20:	|         move.l 232(sp),28(sp)
    cc26:	|         move.l 1c324 <languageNum>,24(sp)
    cc2e:	|         move.l 1c9b0 <DOSBase>,d0
    cc34:	|         movea.l d0,a6
    cc36:	|         move.l 28(sp),d1
    cc3a:	|         move.l 24(sp),d2
    cc3e:	|         jsr -312(a6)
    cc42:	|         move.l d0,20(sp)

	Close(fp);
    cc46:	|         move.l 232(sp),16(sp)
    cc4c:	|         move.l 1c9b0 <DOSBase>,d0
    cc52:	|         movea.l d0,a6
    cc54:	|         move.l 16(sp),d1
    cc58:	|         jsr -36(a6)
    cc5c:	|         move.l d0,12(sp)
	clearStackLib ();
    cc60:	|         jsr c25c <clearStackLib>
	return TRUE;
    cc66:	|         moveq #1,d0
}
    cc68:	\-------> movem.l (sp)+,d2-d3/a6
    cc6c:	          lea 248(sp),sp
    cc70:	          rts

0000cc72 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    cc72:	       lea -12(sp),sp
	int elements = 0;
    cc76:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    cc7a:	       move.l 16(sp),(sp)
	while (search) {
    cc7e:	   /-- bra.s cc8a <saveStack+0x18>
		elements ++;
    cc80:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    cc84:	|  |   movea.l (sp),a0
    cc86:	|  |   move.l 8(a0),(sp)
	while (search) {
    cc8a:	|  \-> tst.l (sp)
    cc8c:	\----- bne.s cc80 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    cc8e:	       move.l 20(sp),-(sp)
    cc92:	       move.l 12(sp),-(sp)
    cc96:	       jsr 8d0 <put2bytes>
    cc9c:	       addq.l #8,sp
	search = vs;
    cc9e:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    cca2:	       clr.l 4(sp)
    cca6:	   /-- bra.s ccc2 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    cca8:	/--|-> move.l (sp),d0
    ccaa:	|  |   move.l 20(sp),-(sp)
    ccae:	|  |   move.l d0,-(sp)
    ccb0:	|  |   jsr cdfe <saveVariable>
    ccb6:	|  |   addq.l #8,sp
		search = search -> next;
    ccb8:	|  |   movea.l (sp),a0
    ccba:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    ccbe:	|  |   addq.l #1,4(sp)
    ccc2:	|  \-> move.l 4(sp),d0
    ccc6:	|      cmp.l 8(sp),d0
    ccca:	\----- blt.s cca8 <saveStack+0x36>
	}
}
    cccc:	       nop
    ccce:	       nop
    ccd0:	       lea 12(sp),sp
    ccd4:	       rts

0000ccd6 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    ccd6:	             lea -44(sp),sp
    ccda:	             move.l a6,-(sp)
    ccdc:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    ccde:	             move.l 1ca38 <stackLib>,48(sp)
	int a = 0;
    cce6:	             clr.l 44(sp)
	while (s) {
    ccea:	      /----- bra.s cd48 <saveStackRef+0x72>
		if (s -> stack == vs) {
    ccec:	   /--|----> movea.l 48(sp),a0
    ccf0:	   |  |      move.l (a0),d0
    ccf2:	   |  |      cmp.l 56(sp),d0
    ccf6:	   |  |  /-- bne.s cd3a <saveStackRef+0x64>
			FPutC (fp, 1);
    ccf8:	   |  |  |   move.l 60(sp),16(sp)
    ccfe:	   |  |  |   moveq #1,d0
    cd00:	   |  |  |   move.l d0,12(sp)
    cd04:	   |  |  |   move.l 1c9b0 <DOSBase>,d0
    cd0a:	   |  |  |   movea.l d0,a6
    cd0c:	   |  |  |   move.l 16(sp),d1
    cd10:	   |  |  |   move.l 12(sp),d2
    cd14:	   |  |  |   jsr -312(a6)
    cd18:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    cd1c:	   |  |  |   move.l 1ca34 <stackLibTotal>,d0
    cd22:	   |  |  |   sub.l 44(sp),d0
    cd26:	   |  |  |   move.l 60(sp),-(sp)
    cd2a:	   |  |  |   move.l d0,-(sp)
    cd2c:	   |  |  |   jsr 8d0 <put2bytes>
    cd32:	   |  |  |   addq.l #8,sp
			return TRUE;
    cd34:	   |  |  |   moveq #1,d0
    cd36:	/--|--|--|-- bra.w cdf4 <saveStackRef+0x11e>
		}
		s = s -> next;
    cd3a:	|  |  |  \-> movea.l 48(sp),a0
    cd3e:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    cd44:	|  |  |      addq.l #1,44(sp)
	while (s) {
    cd48:	|  |  \----> tst.l 48(sp)
    cd4c:	|  \-------- bne.s ccec <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    cd4e:	|            move.l 60(sp),40(sp)
    cd54:	|            clr.l 36(sp)
    cd58:	|            move.l 1c9b0 <DOSBase>,d0
    cd5e:	|            movea.l d0,a6
    cd60:	|            move.l 40(sp),d1
    cd64:	|            move.l 36(sp),d2
    cd68:	|            jsr -312(a6)
    cd6c:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    cd70:	|            movea.l 56(sp),a0
    cd74:	|            move.l (a0),d0
    cd76:	|            move.l 60(sp),-(sp)
    cd7a:	|            move.l d0,-(sp)
    cd7c:	|            jsr cc72 <saveStack>
    cd82:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    cd84:	|            moveq #8,d0
    cd86:	|            move.l d0,28(sp)
    cd8a:	|            clr.l 24(sp)
    cd8e:	|            move.l 1c9a8 <SysBase>,d0
    cd94:	|            movea.l d0,a6
    cd96:	|            move.l 28(sp),d0
    cd9a:	|            move.l 24(sp),d1
    cd9e:	|            jsr -684(a6)
    cda2:	|            move.l d0,20(sp)
    cda6:	|            move.l 20(sp),d0
    cdaa:	|            move.l d0,48(sp)
	stackLibTotal ++;
    cdae:	|            move.l 1ca34 <stackLibTotal>,d0
    cdb4:	|            addq.l #1,d0
    cdb6:	|            move.l d0,1ca34 <stackLibTotal>
	if (! s) {
    cdbc:	|            tst.l 48(sp)
    cdc0:	|        /-- bne.s cdd4 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    cdc2:	|        |   pea 193d0 <PutChar+0x16d4>
    cdc8:	|        |   jsr 17232 <KPrintF>
    cdce:	|        |   addq.l #4,sp
		return FALSE;
    cdd0:	|        |   clr.w d0
    cdd2:	+--------|-- bra.s cdf4 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    cdd4:	|        \-> move.l 1ca38 <stackLib>,d0
    cdda:	|            movea.l 48(sp),a0
    cdde:	|            move.l d0,4(a0)
	s -> stack = vs;
    cde2:	|            movea.l 48(sp),a0
    cde6:	|            move.l 56(sp),(a0)
	stackLib = s;
    cdea:	|            move.l 48(sp),1ca38 <stackLib>
	return TRUE;
    cdf2:	|            moveq #1,d0
}
    cdf4:	\----------> move.l (sp)+,d2
    cdf6:	             movea.l (sp)+,a6
    cdf8:	             lea 44(sp),sp
    cdfc:	             rts

0000cdfe <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    cdfe:	          lea -12(sp),sp
    ce02:	          move.l a6,-(sp)
    ce04:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    ce06:	          move.l 28(sp),16(sp)
    ce0c:	          movea.l 24(sp),a0
    ce10:	          move.l (a0),d0
    ce12:	          move.l d0,12(sp)
    ce16:	          move.l 1c9b0 <DOSBase>,d0
    ce1c:	          movea.l d0,a6
    ce1e:	          move.l 16(sp),d1
    ce22:	          move.l 12(sp),d2
    ce26:	          jsr -312(a6)
    ce2a:	          move.l d0,8(sp)
	switch (from -> varType) {
    ce2e:	          movea.l 24(sp),a0
    ce32:	          move.l (a0),d0
    ce34:	          moveq #9,d1
    ce36:	          cmp.l d0,d1
    ce38:	      /-- bcs.w cee8 <saveVariable+0xea>
    ce3c:	      |   add.l d0,d0
    ce3e:	      |   movea.l d0,a0
    ce40:	      |   adda.l #52812,a0
    ce46:	      |   move.w (a0),d0
    ce48:	      |   jmp (ce4c <saveVariable+0x4e>,pc,d0.w)
    ce4c:	      |   ori.l #1310740,(a0)+
    ce52:	      |   ori.b #20,(20,a0,d0.w)
    ce58:	      |   .short 0x004c
    ce5a:	      |   ori.b #126,(a4)
    ce5e:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    ce62:	      |   ori.b #40,(a0)+
    ce66:	      |   ori.b #47,d4
    ce6a:	      |   ori.b #0,(a4)+
    ce6e:	      |   jsr 958 <put4bytes>
    ce74:	      |   addq.l #8,sp
		return TRUE;
    ce76:	      |   moveq #1,d0
    ce78:	/-----|-- bra.w cf24 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    ce7c:	|     |   movea.l 24(sp),a0
    ce80:	|     |   move.l 4(a0),d0
    ce84:	|     |   move.l 28(sp),-(sp)
    ce88:	|     |   move.l d0,-(sp)
    ce8a:	|     |   jsr bd8 <writeString>
    ce90:	|     |   addq.l #8,sp
		return TRUE;
    ce92:	|     |   moveq #1,d0
    ce94:	+-----|-- bra.w cf24 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    ce98:	|     |   movea.l 24(sp),a0
    ce9c:	|     |   move.l 4(a0),d0
    cea0:	|     |   move.l 28(sp),-(sp)
    cea4:	|     |   move.l d0,-(sp)
    cea6:	|     |   jsr ccd6 <saveStackRef>
    ceac:	|     |   addq.l #8,sp
    ceae:	+-----|-- bra.s cf24 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    ceb0:	|     |   movea.l 24(sp),a0
    ceb4:	|     |   move.l 4(a0),d0
    ceb8:	|     |   move.l 28(sp),-(sp)
    cebc:	|     |   move.l d0,-(sp)
    cebe:	|     |   jsr b04c <saveCostume>
    cec4:	|     |   addq.l #8,sp
		return FALSE;
    cec6:	|     |   clr.w d0
    cec8:	+-----|-- bra.s cf24 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    ceca:	|     |   movea.l 24(sp),a0
    cece:	|     |   move.l 4(a0),d0
    ced2:	|     |   move.l 28(sp),-(sp)
    ced6:	|     |   move.l d0,-(sp)
    ced8:	|     |   jsr af82 <saveAnim>
    cede:	|     |   addq.l #8,sp
		return FALSE;
    cee0:	|     |   clr.w d0
    cee2:	+-----|-- bra.s cf24 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    cee4:	|     |   clr.w d0
    cee6:	+-----|-- bra.s cf24 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    cee8:	|     \-> movea.l 24(sp),a0
    ceec:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    ceee:	|         moveq #10,d1
    cef0:	|         cmp.l d0,d1
    cef2:	|  /----- bcs.s cf0c <saveVariable+0x10e>
						typeName[from->varType] :
    cef4:	|  |      movea.l 24(sp),a0
    cef8:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    cefa:	|  |      add.l d0,d0
    cefc:	|  |      movea.l d0,a1
    cefe:	|  |      adda.l d0,a1
    cf00:	|  |      lea 1c884 <typeName>,a0
    cf06:	|  |      move.l (0,a1,a0.l),d0
    cf0a:	|  |  /-- bra.s cf12 <saveVariable+0x114>
    cf0c:	|  \--|-> move.l #103413,d0
    cf12:	|     \-> move.l d0,-(sp)
    cf14:	|         pea 193fc <PutChar+0x1700>
    cf1a:	|         jsr 17232 <KPrintF>
    cf20:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    cf22:	|         moveq #1,d0
    cf24:	\-------> move.l (sp)+,d2
    cf26:	          movea.l (sp)+,a6
    cf28:	          lea 12(sp),sp
    cf2c:	          rts

0000cf2e <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    cf2e:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    cf32:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    cf3a:	          movea.l 4(sp),a0
    cf3e:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    cf44:	          movea.l 4(sp),a0
    cf48:	          move.w 10(a0),d0
    cf4c:	          lsr.w #8,d0
    cf4e:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    cf52:	          movea.l 4(sp),a0
    cf56:	          move.w 10(a0),d0
    cf5a:	          move.b d0,(sp)

    if(counterx_new)
    cf5c:	/-------- beq.w d002 <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    cf60:	|         clr.w d1
    cf62:	|         move.b (sp),d1
    cf64:	|         move.w 1ca40 <counterx_old>,d0
    cf6a:	|         sub.w d0,d1
    cf6c:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    cf70:	|         cmpi.w #128,10(sp)
    cf76:	|     /-- blt.s cf8e <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    cf78:	|     |   move.w #1,1c95e <input+0x4>
            counterx_diff -= 256;    
    cf80:	|     |   move.w 10(sp),d0
    cf84:	|     |   addi.w #-256,d0
    cf88:	|     |   move.w d0,10(sp)
    cf8c:	|  /--|-- bra.s cfba <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    cf8e:	|  |  \-> cmpi.w #-129,10(sp)
    cf94:	|  |  /-- bgt.s cfac <CsiCheckInput+0x7e>
            counterx_diff += 256;
    cf96:	|  |  |   move.w 10(sp),d0
    cf9a:	|  |  |   addi.w #256,d0
    cf9e:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    cfa2:	|  |  |   move.w #1,1c95e <input+0x4>
    cfaa:	|  +--|-- bra.s cfba <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    cfac:	|  |  \-> tst.w 10(sp)
    cfb0:	|  +----- beq.s cfba <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    cfb2:	|  |      move.w #1,1c95e <input+0x4>
        }

        input.mouseX += counterx_diff;
    cfba:	|  \----> move.l 1c964 <input+0xa>,d0
    cfc0:	|         movea.w 10(sp),a0
    cfc4:	|         add.l a0,d0
    cfc6:	|         move.l d0,1c964 <input+0xa>

        if( input.mouseX > (int) winWidth) {
    cfcc:	|         move.l 1c964 <input+0xa>,d1
    cfd2:	|         move.l 1c8fc <winWidth>,d0
    cfd8:	|         cmp.l d1,d0
    cfda:	|     /-- bge.s cfea <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    cfdc:	|     |   move.l 1c8fc <winWidth>,d0
    cfe2:	|     |   move.l d0,1c964 <input+0xa>
    cfe8:	|  /--|-- bra.s cff8 <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    cfea:	|  |  \-> move.l 1c964 <input+0xa>,d0
    cff0:	|  +----- bpl.s cff8 <CsiCheckInput+0xca>
            input.mouseX = 0;
    cff2:	|  |      clr.l 1c964 <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    cff8:	|  \----> clr.w d0
    cffa:	|         move.b (sp),d0
    cffc:	|         move.w d0,1ca40 <counterx_old>
    }    

    if(countery_new)
    d002:	\-------> tst.b 1(sp)
    d006:	/-------- beq.w d0b0 <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    d00a:	|         clr.w d1
    d00c:	|         move.b 1(sp),d1
    d010:	|         move.w 1ca42 <countery_old>,d0
    d016:	|         sub.w d0,d1
    d018:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    d01c:	|         cmpi.w #128,8(sp)
    d022:	|     /-- blt.s d03a <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    d024:	|     |   move.w #1,1c95e <input+0x4>
            countery_diff -= 256;    
    d02c:	|     |   move.w 8(sp),d0
    d030:	|     |   addi.w #-256,d0
    d034:	|     |   move.w d0,8(sp)
    d038:	|  /--|-- bra.s d066 <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    d03a:	|  |  \-> cmpi.w #-129,8(sp)
    d040:	|  |  /-- bgt.s d058 <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    d042:	|  |  |   move.w #1,1c95e <input+0x4>
            countery_diff += 256;
    d04a:	|  |  |   move.w 8(sp),d0
    d04e:	|  |  |   addi.w #256,d0
    d052:	|  |  |   move.w d0,8(sp)
    d056:	|  +--|-- bra.s d066 <CsiCheckInput+0x138>
        } else if (countery_diff) {
    d058:	|  |  \-> tst.w 8(sp)
    d05c:	|  +----- beq.s d066 <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    d05e:	|  |      move.w #1,1c95e <input+0x4>
        }

        input.mouseY += countery_diff;
    d066:	|  \----> move.l 1c968 <input+0xe>,d0
    d06c:	|         movea.w 8(sp),a0
    d070:	|         add.l a0,d0
    d072:	|         move.l d0,1c968 <input+0xe>

        if( input.mouseY > (int) winHeight) {
    d078:	|         move.l 1c968 <input+0xe>,d1
    d07e:	|         move.l 1c900 <winHeight>,d0
    d084:	|         cmp.l d1,d0
    d086:	|     /-- bge.s d096 <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    d088:	|     |   move.l 1c900 <winHeight>,d0
    d08e:	|     |   move.l d0,1c968 <input+0xe>
    d094:	|  /--|-- bra.s d0a4 <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    d096:	|  |  \-> move.l 1c968 <input+0xe>,d0
    d09c:	|  +----- bpl.s d0a4 <CsiCheckInput+0x176>
            input.mouseY = 0;
    d09e:	|  |      clr.l 1c968 <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    d0a4:	|  \----> clr.w d0
    d0a6:	|         move.b 1(sp),d0
    d0aa:	|         move.w d0,1ca42 <countery_old>
    } 

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    d0b0:	\-------> move.w 1c95a <input>,d0
    d0b6:	      /-- beq.s d0dc <CsiCheckInput+0x1ae>
    d0b8:	      |   movea.l #12574721,a0
    d0be:	      |   move.b (a0),d0
    d0c0:	      |   move.b d0,d0
    d0c2:	      |   andi.l #255,d0
    d0c8:	      |   moveq #64,d1
    d0ca:	      |   and.l d1,d0
    d0cc:	      +-- beq.s d0dc <CsiCheckInput+0x1ae>
    {
        input.leftClick = FALSE;
    d0ce:	      |   clr.w 1c95a <input>
        input.leftRelease = TRUE;
    d0d4:	      |   move.w #1,1c960 <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    d0dc:	      \-> move.w 1c95c <input+0x2>,d0
    d0e2:	      /-- beq.s d10a <CsiCheckInput+0x1dc>
    d0e4:	      |   movea.l #14675990,a0
    d0ea:	      |   move.w (a0),d0
    d0ec:	      |   move.w d0,d0
    d0ee:	      |   andi.l #65535,d0
    d0f4:	      |   andi.l #1024,d0
    d0fa:	      +-- beq.s d10a <CsiCheckInput+0x1dc>
    {
        input.rightClick = FALSE;
    d0fc:	      |   clr.w 1c95c <input+0x2>
        input.rightRelease = TRUE;
    d102:	      |   move.w #1,1c962 <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    d10a:	      \-> movea.l #12574721,a0
    d110:	          move.b (a0),d0
    d112:	          move.b d0,d0
    d114:	          andi.l #255,d0
    d11a:	          moveq #64,d1
    d11c:	          and.l d1,d0
    d11e:	      /-- bne.s d128 <CsiCheckInput+0x1fa>
        input.leftClick = TRUE;        
    d120:	      |   move.w #1,1c95a <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    d128:	      \-> movea.l #14675990,a0
    d12e:	          move.w (a0),d0
    d130:	          move.w d0,d0
    d132:	          andi.l #65535,d0
    d138:	          andi.l #1024,d0
    d13e:	      /-- bne.s d148 <CsiCheckInput+0x21a>
        input.rightClick = TRUE;
    d140:	      |   move.w #1,1c95c <input+0x2>
    }

    d148:	      \-> nop
    d14a:	          lea 12(sp),sp
    d14e:	          rts

0000d150 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    d150:	moveq #0,d0
}
    d152:	rts

0000d154 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    d154:	nop
    d156:	rts

0000d158 <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    d158:	nop
    d15a:	rts

0000d15c <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    d15c:	moveq #1,d0
}
    d15e:	rts

0000d160 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    d160:	nop
    d162:	rts

0000d164 <saveSounds>:

void saveSounds (BPTR fp) {
    d164:	lea -12(sp),sp
    d168:	move.l a6,-(sp)
    d16a:	move.l d2,-(sp)
	FPutC (fp,0);
    d16c:	move.l 24(sp),16(sp)
    d172:	clr.l 12(sp)
    d176:	move.l 1c9b0 <DOSBase>,d0
    d17c:	movea.l d0,a6
    d17e:	move.l 16(sp),d1
    d182:	move.l 12(sp),d2
    d186:	jsr -312(a6)
    d18a:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    d18e:	move.l 1c342 <defSoundVol>,d0
    d194:	move.l 24(sp),-(sp)
    d198:	move.l d0,-(sp)
    d19a:	jsr 8d0 <put2bytes>
    d1a0:	addq.l #8,sp
	put2bytes (defVol, fp);
    d1a2:	move.l 1c33e <defVol>,d0
    d1a8:	move.l 24(sp),-(sp)
    d1ac:	move.l d0,-(sp)
    d1ae:	jsr 8d0 <put2bytes>
    d1b4:	addq.l #8,sp
}
    d1b6:	nop
    d1b8:	move.l (sp)+,d2
    d1ba:	movea.l (sp)+,a6
    d1bc:	lea 12(sp),sp
    d1c0:	rts

0000d1c2 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    d1c2:	move.l 4(sp),1c33e <defVol>
}
    d1ca:	nop
    d1cc:	rts

0000d1ce <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    d1ce:	move.l 4(sp),1c342 <defSoundVol>
}
    d1d6:	nop
    d1d8:	rts

0000d1da <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    d1da:	nop
    d1dc:	rts

0000d1de <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    d1de:	nop
    d1e0:	rts

0000d1e2 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    d1e2:	nop
    d1e4:	rts

0000d1e6 <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    d1e6:	subq.l #4,sp
    d1e8:	move.l 12(sp),d0
    d1ec:	move.w d0,d0
    d1ee:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    d1f2:	moveq #1,d0
}
    d1f4:	addq.l #4,sp
    d1f6:	rts

0000d1f8 <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    d1f8:	nop
    d1fa:	rts

0000d1fc <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    d1fc:	move.l 16(sp),-(sp)
    d200:	move.l 16(sp),-(sp)
    d204:	jsr e0e <CstBlankScreen>
    d20a:	addq.l #8,sp
}
    d20c:	nop
    d20e:	rts

0000d210 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    d210:	pea 1941f <PutChar+0x1723>
    d216:	jsr 17232 <KPrintF>
    d21c:	addq.l #4,sp
}
    d21e:	nop
    d220:	rts

0000d222 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    d222:	movea.l 8(sp),a1
    d226:	movea.l 12(sp),a0
    d22a:	move.l 8(sp),d1
    d22e:	move.l 4(sp),d0
    d232:	move.l a1,-(sp)
    d234:	move.l a0,-(sp)
    d236:	move.l d1,-(sp)
    d238:	move.l d0,-(sp)
    d23a:	jsr 3e68 <drawLine>
    d240:	lea 16(sp),sp
}
    d244:	nop
    d246:	rts

0000d248 <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    d248:	movea.l 12(sp),a1
    d24c:	movea.l 4(sp),a0
    d250:	move.l 8(sp),d1
    d254:	move.l 4(sp),d0
    d258:	move.l a1,-(sp)
    d25a:	move.l a0,-(sp)
    d25c:	move.l d1,-(sp)
    d25e:	move.l d0,-(sp)
    d260:	jsr 3e68 <drawLine>
    d266:	lea 16(sp),sp
}
    d26a:	nop
    d26c:	rts

0000d26e <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    d26e:	pea 19458 <PutChar+0x175c>
    d274:	jsr 17232 <KPrintF>
    d27a:	addq.l #4,sp
}
    d27c:	nop
    d27e:	rts

0000d280 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    d280:	jsr 1c52 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    d286:	pea 1ca4c <backdropTextureName>
    d28c:	pea 1 <_start+0x1>
    d290:	jsr 3fea <deleteTextures>
    d296:	addq.l #8,sp
	backdropTextureName = 0;
    d298:	clr.l 1ca4c <backdropTextureName>
	backdropExists = FALSE;
    d29e:	clr.w 1ca50 <backdropExists>
}
    d2a4:	nop
    d2a6:	rts

0000d2a8 <killParallax>:

void killParallax () {
    d2a8:	          lea -12(sp),sp
    d2ac:	          move.l a6,-(sp)
	while (parallaxStuff) {
    d2ae:	   /----- bra.s d31a <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    d2b0:	/--|----> move.l 1ca52 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    d2b8:	|  |      movea.l 12(sp),a0
    d2bc:	|  |      move.l 42(a0),d0
    d2c0:	|  |      move.l d0,1ca52 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    d2c6:	|  |      move.l 12(sp),d0
    d2ca:	|  |      addq.l #4,d0
    d2cc:	|  |      move.l d0,-(sp)
    d2ce:	|  |      pea 1 <_start+0x1>
    d2d2:	|  |      jsr 3fea <deleteTextures>
    d2d8:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    d2da:	|  |      movea.l 12(sp),a0
    d2de:	|  |      move.l (a0),d0
    d2e0:	|  |  /-- beq.s d2fa <killParallax+0x52>
    d2e2:	|  |  |   movea.l 12(sp),a0
    d2e6:	|  |  |   move.l (a0),8(sp)
    d2ea:	|  |  |   move.l 1c9a8 <SysBase>,d0
    d2f0:	|  |  |   movea.l d0,a6
    d2f2:	|  |  |   movea.l 8(sp),a1
    d2f6:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    d2fa:	|  |  \-> tst.l 12(sp)
    d2fe:	|  |  /-- beq.s d316 <killParallax+0x6e>
    d300:	|  |  |   move.l 12(sp),4(sp)
    d306:	|  |  |   move.l 1c9a8 <SysBase>,d0
    d30c:	|  |  |   movea.l d0,a6
    d30e:	|  |  |   movea.l 4(sp),a1
    d312:	|  |  |   jsr -690(a6)
		k = NULL;
    d316:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    d31a:	|  \----> move.l 1ca52 <parallaxStuff>,d0
    d320:	\-------- bne.s d2b0 <killParallax+0x8>
	}
}
    d322:	          nop
    d324:	          nop
    d326:	          movea.l (sp)+,a6
    d328:	          lea 12(sp),sp
    d32c:	          rts

0000d32e <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    d32e:	       move.l 4(sp),-(sp)
    d332:	       jsr 6d7c <openFileFromNum>
    d338:	       addq.l #4,sp
    d33a:	       tst.l d0
    d33c:	   /-- bne.s d34e <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    d33e:	   |   pea 19479 <PutChar+0x177d>
    d344:	   |   jsr 17232 <KPrintF>
    d34a:	   |   addq.l #4,sp
		return;
    d34c:	/--|-- bra.s d36e <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    d34e:	|  \-> move.l 1c990 <bigDataFile>,d0
    d354:	|      move.l 12(sp),-(sp)
    d358:	|      move.l 12(sp),-(sp)
    d35c:	|      move.l d0,-(sp)
    d35e:	|      jsr 1f00 <CstLoadBackdrop>
    d364:	|      lea 12(sp),sp
	finishAccess ();
    d368:	|      jsr 6c74 <finishAccess>
	
}
    d36e:	\----> rts

0000d370 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    d370:	subq.l #8,sp
    d372:	movea.l 12(sp),a0
    d376:	move.l 16(sp),d1
    d37a:	move.l 20(sp),d0
    d37e:	movea.w a0,a0
    d380:	move.w a0,6(sp)
    d384:	move.w d1,d1
    d386:	move.w d1,4(sp)
    d38a:	move.w d0,d0
    d38c:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    d390:	pea 194c8 <PutChar+0x17cc>
    d396:	jsr 17232 <KPrintF>
    d39c:	addq.l #4,sp

}
    d39e:	nop
    d3a0:	addq.l #8,sp
    d3a2:	rts

0000d3a4 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    d3a4:	pea 194eb <PutChar+0x17ef>
    d3aa:	jsr 17232 <KPrintF>
    d3b0:	addq.l #4,sp
}
    d3b2:	nop
    d3b4:	rts

0000d3b6 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    d3b6:	pea 1ca56 <snapshotTextureName>
    d3bc:	pea 1 <_start+0x1>
    d3c0:	jsr 3fea <deleteTextures>
    d3c6:	addq.l #8,sp
	snapshotTextureName = 0;
    d3c8:	clr.l 1ca56 <snapshotTextureName>
}
    d3ce:	nop
    d3d0:	rts

0000d3d2 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    d3d2:	clr.l 1ca62 <cameraX>
	cameraY = 0;
    d3d8:	clr.l 1ca66 <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    d3de:	move.l 1ca48 <sceneHeight>,d0
    d3e4:	move.l d0,d1
    d3e6:	move.l 1ca44 <sceneWidth>,d0
    d3ec:	move.l d1,-(sp)
    d3ee:	move.l d0,-(sp)
    d3f0:	jsr 396e <CstReserveBackdrop>
    d3f6:	addq.l #8,sp
}
    d3f8:	rts

0000d3fa <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    d3fa:	jsr d280 <killBackDrop>
	killParallax ();
    d400:	jsr d2a8 <killParallax>
	killZBuffer ();
    d406:	jsr 871e <killZBuffer>
	sceneWidth = x;
    d40c:	move.l 4(sp),d0
    d410:	move.l d0,1ca44 <sceneWidth>
	sceneHeight = y;
    d416:	move.l 8(sp),d0
    d41a:	move.l d0,1ca48 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    d420:	pea 19524 <PutChar+0x1828>
    d426:	jsr 17232 <KPrintF>
    d42c:	addq.l #4,sp
	return reserveBackdrop();
    d42e:	jsr d3d2 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    d434:	rts

0000d436 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    d436:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    d438:	move.l 12(sp),-(sp)
    d43c:	jsr 6bc <get2bytes>
    d442:	addq.l #4,sp
    d444:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    d448:	move.l 12(sp),-(sp)
    d44c:	jsr 6bc <get2bytes>
    d452:	addq.l #4,sp
    d454:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    d456:	moveq #1,d0
}
    d458:	addq.l #8,sp
    d45a:	rts

0000d45c <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    d45c:	   /-> lea -12(sp),sp
    d460:	   |   move.l a6,-(sp)
    d462:	   |   move.l d2,-(sp)
	if (me) {
    d464:	   |   tst.l 24(sp)
    d468:	/--|-- beq.w d4fe <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    d46c:	|  |   movea.l 24(sp),a0
    d470:	|  |   move.l 42(a0),d0
    d474:	|  |   move.l 28(sp),-(sp)
    d478:	|  |   move.l d0,-(sp)
    d47a:	|  \-- jsr d45c <saveParallaxRecursive>(pc)
    d47e:	|      addq.l #8,sp
		FPutC (fp, 1);
    d480:	|      move.l 28(sp),16(sp)
    d486:	|      moveq #1,d0
    d488:	|      move.l d0,12(sp)
    d48c:	|      move.l 1c9b0 <DOSBase>,d0
    d492:	|      movea.l d0,a6
    d494:	|      move.l 16(sp),d1
    d498:	|      move.l 12(sp),d2
    d49c:	|      jsr -312(a6)
    d4a0:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    d4a4:	|      movea.l 24(sp),a0
    d4a8:	|      move.w 28(a0),d0
    d4ac:	|      move.w d0,d0
    d4ae:	|      andi.l #65535,d0
    d4b4:	|      move.l 28(sp),-(sp)
    d4b8:	|      move.l d0,-(sp)
    d4ba:	|      jsr 8d0 <put2bytes>
    d4c0:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    d4c2:	|      movea.l 24(sp),a0
    d4c6:	|      move.w 30(a0),d0
    d4ca:	|      move.w d0,d0
    d4cc:	|      andi.l #65535,d0
    d4d2:	|      move.l 28(sp),-(sp)
    d4d6:	|      move.l d0,-(sp)
    d4d8:	|      jsr 8d0 <put2bytes>
    d4de:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    d4e0:	|      movea.l 24(sp),a0
    d4e4:	|      move.w 32(a0),d0
    d4e8:	|      move.w d0,d0
    d4ea:	|      andi.l #65535,d0
    d4f0:	|      move.l 28(sp),-(sp)
    d4f4:	|      move.l d0,-(sp)
    d4f6:	|      jsr 8d0 <put2bytes>
    d4fc:	|      addq.l #8,sp
	}
}
    d4fe:	\----> nop
    d500:	       move.l (sp)+,d2
    d502:	       movea.l (sp)+,a6
    d504:	       lea 12(sp),sp
    d508:	       rts

0000d50a <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    d50a:	pea 1954b <PutChar+0x184f>
    d510:	jsr 17232 <KPrintF>
    d516:	addq.l #4,sp
	return TRUE;
    d518:	moveq #1,d0
    d51a:	rts

0000d51c <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    d51c:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    d51e:	             move.l 1ca5a <allObjectTypes>,(sp)

	while (huntType) {
    d524:	      /----- bra.s d53c <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    d526:	   /--|----> movea.l (sp),a0
    d528:	   |  |      move.l 4(a0),d0
    d52c:	   |  |      cmp.l 8(sp),d0
    d530:	   |  |  /-- bne.s d536 <findObjectType+0x1a>
    d532:	   |  |  |   move.l (sp),d0
    d534:	/--|--|--|-- bra.s d54c <findObjectType+0x30>
		huntType = huntType -> next;
    d536:	|  |  |  \-> movea.l (sp),a0
    d538:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    d53c:	|  |  \----> tst.l (sp)
    d53e:	|  \-------- bne.s d526 <findObjectType+0xa>
	}

	return loadObjectType (i);
    d540:	|            move.l 8(sp),-(sp)
    d544:	|            jsr d60c <loadObjectType>
    d54a:	|            addq.l #4,sp
}
    d54c:	\----------> addq.l #4,sp
    d54e:	             rts

0000d550 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    d550:	             lea -12(sp),sp
	int i, num = 0;
    d554:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    d558:	             move.l 20(sp),-(sp)
    d55c:	             jsr d51c <findObjectType>
    d562:	             addq.l #4,sp
    d564:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    d566:	             clr.l 8(sp)
    d56a:	   /-------- bra.s d5a0 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    d56c:	/--|-------> movea.l (sp),a0
    d56e:	|  |         move.l 38(a0),d1
    d572:	|  |         move.l 8(sp),d0
    d576:	|  |         lsl.l #3,d0
    d578:	|  |         movea.l d1,a0
    d57a:	|  |         adda.l d0,a0
    d57c:	|  |         move.l (a0),d0
    d57e:	|  |         cmp.l 16(sp),d0
    d582:	|  |  /----- bne.s d59c <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    d584:	|  |  |      movea.l (sp),a0
    d586:	|  |  |      move.l 38(a0),d1
    d58a:	|  |  |      move.l 8(sp),d0
    d58e:	|  |  |      lsl.l #3,d0
    d590:	|  |  |      movea.l d1,a0
    d592:	|  |  |      adda.l d0,a0
    d594:	|  |  |      move.l 4(a0),4(sp)
			break;
    d59a:	|  |  |  /-- bra.s d5ac <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    d59c:	|  |  \--|-> addq.l #1,8(sp)
    d5a0:	|  \-----|-> movea.l (sp),a0
    d5a2:	|        |   move.l 16(a0),d0
    d5a6:	|        |   cmp.l 8(sp),d0
    d5aa:	\--------|-- bgt.s d56c <getCombinationFunction+0x1c>
		}
	}

	return num;
    d5ac:	         \-> move.l 4(sp),d0
}
    d5b0:	             lea 12(sp),sp
    d5b4:	             rts

0000d5b6 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    d5b6:	moveq #1,d0
}
    d5b8:	rts

0000d5ba <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    d5ba:	subq.l #8,sp
    d5bc:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    d5be:	move.l 16(sp),-(sp)
    d5c2:	jsr 6bc <get2bytes>
    d5c8:	addq.l #4,sp
    d5ca:	move.l d0,-(sp)
    d5cc:	jsr d60c <loadObjectType>
    d5d2:	addq.l #4,sp
    d5d4:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    d5d8:	movea.l 8(sp),a0
    d5dc:	move.l (a0),4(sp)
    d5e0:	move.l 1c9a8 <SysBase>,d0
    d5e6:	movea.l d0,a6
    d5e8:	movea.l 4(sp),a1
    d5ec:	jsr -690(a6)
	r -> screenName = readString (fp);
    d5f0:	move.l 16(sp),-(sp)
    d5f4:	jsr b02 <readString>
    d5fa:	addq.l #4,sp
    d5fc:	movea.l 8(sp),a0
    d600:	move.l d0,(a0)
	return r;
    d602:	move.l 8(sp),d0
}
    d606:	movea.l (sp)+,a6
    d608:	addq.l #8,sp
    d60a:	rts

0000d60c <loadObjectType>:

struct objectType * loadObjectType (int i) {
    d60c:	          lea -84(sp),sp
    d610:	          move.l a6,-(sp)
    d612:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    d614:	          moveq #42,d0
    d616:	          move.l d0,84(sp)
    d61a:	          clr.l 80(sp)
    d61e:	          move.l 1c9a8 <SysBase>,d0
    d624:	          movea.l d0,a6
    d626:	          move.l 84(sp),d0
    d62a:	          move.l 80(sp),d1
    d62e:	          jsr -684(a6)
    d632:	          move.l d0,76(sp)
    d636:	          move.l 76(sp),d0
    d63a:	          move.l d0,72(sp)

    if (newType) {
    d63e:	/-------- beq.w d8b8 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    d642:	|         move.l 96(sp),-(sp)
    d646:	|         jsr 6e44 <openObjectSlice>
    d64c:	|         addq.l #4,sp
    d64e:	|         tst.w d0
    d650:	+-------- beq.w d8b8 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    d654:	|         move.l 1c990 <bigDataFile>,d0
    d65a:	|         move.l d0,-(sp)
    d65c:	|         jsr 6bc <get2bytes>
    d662:	|         addq.l #4,sp
    d664:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    d668:	|         move.l 1c990 <bigDataFile>,64(sp)
    d670:	|         move.l 1c9b0 <DOSBase>,d0
    d676:	|         movea.l d0,a6
    d678:	|         move.l 64(sp),d1
    d67c:	|         jsr -306(a6)
    d680:	|         move.l d0,60(sp)
    d684:	|         move.l 60(sp),d0
    d688:	|         move.l d0,d0
    d68a:	|         movea.l 72(sp),a0
    d68e:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    d692:	|         move.l 1c990 <bigDataFile>,56(sp)
    d69a:	|         move.l 1c9b0 <DOSBase>,d0
    d6a0:	|         movea.l d0,a6
    d6a2:	|         move.l 56(sp),d1
    d6a6:	|         jsr -306(a6)
    d6aa:	|         move.l d0,52(sp)
    d6ae:	|         move.l 52(sp),d0
    d6b2:	|         move.l d0,d0
    d6b4:	|         movea.l 72(sp),a0
    d6b8:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    d6bc:	|         move.l 1c990 <bigDataFile>,48(sp)
    d6c4:	|         move.l 1c9b0 <DOSBase>,d0
    d6ca:	|         movea.l d0,a6
    d6cc:	|         move.l 48(sp),d1
    d6d0:	|         jsr -306(a6)
    d6d4:	|         move.l d0,44(sp)
    d6d8:	|         move.l 44(sp),d0
    d6dc:	|         move.l d0,d0
    d6de:	|         movea.l 72(sp),a0
    d6e2:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    d6e6:	|         move.l 1c990 <bigDataFile>,40(sp)
    d6ee:	|         move.l 1c9b0 <DOSBase>,d0
    d6f4:	|         movea.l d0,a6
    d6f6:	|         move.l 40(sp),d1
    d6fa:	|         jsr -306(a6)
    d6fe:	|         move.l d0,36(sp)
    d702:	|         move.l 36(sp),d0
    d706:	|         movea.l 72(sp),a0
    d70a:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    d70e:	|         move.l 1c990 <bigDataFile>,32(sp)
    d716:	|         move.l 1c9b0 <DOSBase>,d0
    d71c:	|         movea.l d0,a6
    d71e:	|         move.l 32(sp),d1
    d722:	|         jsr -306(a6)
    d726:	|         move.l d0,28(sp)
    d72a:	|         move.l 28(sp),d0
    d72e:	|         movea.l 72(sp),a0
    d732:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    d736:	|         move.l 1c990 <bigDataFile>,d0
    d73c:	|         move.l d0,-(sp)
    d73e:	|         jsr 718 <get4bytes>
    d744:	|         addq.l #4,sp
    d746:	|         movea.l 72(sp),a0
    d74a:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    d74e:	|         move.l 1c990 <bigDataFile>,d0
    d754:	|         move.l d0,-(sp)
    d756:	|         jsr 6bc <get2bytes>
    d75c:	|         addq.l #4,sp
    d75e:	|         movea.l 72(sp),a0
    d762:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    d766:	|         move.l 1c990 <bigDataFile>,24(sp)
    d76e:	|         move.l 1c9b0 <DOSBase>,d0
    d774:	|         movea.l d0,a6
    d776:	|         move.l 24(sp),d1
    d77a:	|         jsr -306(a6)
    d77e:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    d782:	|         move.l 1c990 <bigDataFile>,d0
    d788:	|         move.l d0,-(sp)
    d78a:	|         jsr 7d8 <getFloat>
    d790:	|         addq.l #4,sp
            getFloat(bigDataFile);
    d792:	|         move.l 1c990 <bigDataFile>,d0
    d798:	|         move.l d0,-(sp)
    d79a:	|         jsr 7d8 <getFloat>
    d7a0:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    d7a2:	|         move.l 1c990 <bigDataFile>,d0
    d7a8:	|         move.l d0,-(sp)
    d7aa:	|         jsr 6bc <get2bytes>
    d7b0:	|         addq.l #4,sp
    d7b2:	|         move.l d0,d0
    d7b4:	|         movea.l 72(sp),a0
    d7b8:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    d7bc:	|         move.l 1c990 <bigDataFile>,d0
    d7c2:	|         move.l d0,-(sp)
    d7c4:	|         jsr 6bc <get2bytes>
    d7ca:	|         addq.l #4,sp
    d7cc:	|         movea.l 72(sp),a0
    d7d0:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    d7d4:	|         movea.l 72(sp),a0
    d7d8:	|         move.l 16(a0),d0
    d7dc:	|  /----- beq.s d80e <loadObjectType+0x202>
    d7de:	|  |      movea.l 72(sp),a0
    d7e2:	|  |      move.l 16(a0),d0
    d7e6:	|  |      lsl.l #3,d0
    d7e8:	|  |      move.l d0,16(sp)
    d7ec:	|  |      clr.l 12(sp)
    d7f0:	|  |      move.l 1c9a8 <SysBase>,d0
    d7f6:	|  |      movea.l d0,a6
    d7f8:	|  |      move.l 16(sp),d0
    d7fc:	|  |      move.l 12(sp),d1
    d800:	|  |      jsr -684(a6)
    d804:	|  |      move.l d0,8(sp)
    d808:	|  |      move.l 8(sp),d0
    d80c:	|  |  /-- bra.s d810 <loadObjectType+0x204>
    d80e:	|  \--|-> moveq #0,d0
    d810:	|     \-> movea.l 72(sp),a0
    d814:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    d818:	|         clr.l 88(sp)
    d81c:	|     /-- bra.s d86c <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    d81e:	|  /--|-> move.l 1c990 <bigDataFile>,d1
    d824:	|  |  |   movea.l 72(sp),a0
    d828:	|  |  |   movea.l 38(a0),a0
    d82c:	|  |  |   move.l 88(sp),d0
    d830:	|  |  |   lsl.l #3,d0
    d832:	|  |  |   lea (0,a0,d0.l),a2
    d836:	|  |  |   move.l d1,-(sp)
    d838:	|  |  |   jsr 6bc <get2bytes>
    d83e:	|  |  |   addq.l #4,sp
    d840:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    d842:	|  |  |   move.l 1c990 <bigDataFile>,d1
    d848:	|  |  |   movea.l 72(sp),a0
    d84c:	|  |  |   movea.l 38(a0),a0
    d850:	|  |  |   move.l 88(sp),d0
    d854:	|  |  |   lsl.l #3,d0
    d856:	|  |  |   lea (0,a0,d0.l),a2
    d85a:	|  |  |   move.l d1,-(sp)
    d85c:	|  |  |   jsr 6bc <get2bytes>
    d862:	|  |  |   addq.l #4,sp
    d864:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    d868:	|  |  |   addq.l #1,88(sp)
    d86c:	|  |  \-> movea.l 72(sp),a0
    d870:	|  |      move.l 16(a0),d0
    d874:	|  |      cmp.l 88(sp),d0
    d878:	|  \----- bgt.s d81e <loadObjectType+0x212>
            }
            finishAccess();
    d87a:	|         jsr 6c74 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    d880:	|         move.l 68(sp),-(sp)
    d884:	|         jsr 6c7e <getNumberedString>
    d88a:	|         addq.l #4,sp
    d88c:	|         movea.l 72(sp),a0
    d890:	|         move.l d0,(a0)
            newType->objectNum = i;
    d892:	|         movea.l 72(sp),a0
    d896:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    d89c:	|         move.l 1ca5a <allObjectTypes>,d0
    d8a2:	|         movea.l 72(sp),a0
    d8a6:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    d8aa:	|         move.l 72(sp),1ca5a <allObjectTypes>
            return newType;
    d8b2:	|         move.l 72(sp),d0
    d8b6:	|     /-- bra.s d8ba <loadObjectType+0x2ae>
        }
    }
    return NULL;
    d8b8:	\-----|-> moveq #0,d0
}
    d8ba:	      \-> movea.l (sp)+,a2
    d8bc:	          movea.l (sp)+,a6
    d8be:	          lea 84(sp),sp
    d8c2:	          rts

0000d8c4 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    d8c4:	             lea -16(sp),sp
    d8c8:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    d8ca:	             move.l #117338,16(sp)

	while (* huntRegion) {
    d8d2:	   /-------- bra.s d946 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    d8d4:	/--|-------> movea.l 16(sp),a0
    d8d8:	|  |         move.l (a0),d0
    d8da:	|  |         cmp.l 24(sp),d0
    d8de:	|  |  /----- bne.s d938 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    d8e0:	|  |  |      movea.l 24(sp),a0
    d8e4:	|  |  |      move.l 8(a0),d0
    d8e8:	|  |  |      movea.l 16(sp),a0
    d8ec:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    d8ee:	|  |  |      movea.l 24(sp),a0
    d8f2:	|  |  |      move.l 38(a0),12(sp)
    d8f8:	|  |  |      move.l 1c9a8 <SysBase>,d0
    d8fe:	|  |  |      movea.l d0,a6
    d900:	|  |  |      movea.l 12(sp),a1
    d904:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    d908:	|  |  |      movea.l 24(sp),a0
    d90c:	|  |  |      move.l (a0),8(sp)
    d910:	|  |  |      move.l 1c9a8 <SysBase>,d0
    d916:	|  |  |      movea.l d0,a6
    d918:	|  |  |      movea.l 8(sp),a1
    d91c:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    d920:	|  |  |      move.l 24(sp),4(sp)
    d926:	|  |  |      move.l 1c9a8 <SysBase>,d0
    d92c:	|  |  |      movea.l d0,a6
    d92e:	|  |  |      movea.l 4(sp),a1
    d932:	|  |  |      jsr -690(a6)
			return;
    d936:	|  |  |  /-- bra.s d95c <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    d938:	|  |  \--|-> movea.l 16(sp),a0
    d93c:	|  |     |   move.l (a0),d0
    d93e:	|  |     |   move.l d0,d1
    d940:	|  |     |   addq.l #8,d1
    d942:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    d946:	|  \-----|-> movea.l 16(sp),a0
    d94a:	|        |   move.l (a0),d0
    d94c:	\--------|-- bne.s d8d4 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    d94e:	         |   pea 19572 <PutChar+0x1876>
    d954:	         |   jsr 17232 <KPrintF>
    d95a:	         |   addq.l #4,sp
}
    d95c:	         \-> movea.l (sp)+,a6
    d95e:	             lea 16(sp),sp
    d962:	             rts

0000d964 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    d964:	movea.l 4(sp),a0
    d968:	move.l 4(a0),d0
    d96c:	move.l 8(sp),-(sp)
    d970:	move.l d0,-(sp)
    d972:	jsr 8d0 <put2bytes>
    d978:	addq.l #8,sp
	writeString (r -> screenName, fp);
    d97a:	movea.l 4(sp),a0
    d97e:	move.l (a0),d0
    d980:	move.l 8(sp),-(sp)
    d984:	move.l d0,-(sp)
    d986:	jsr bd8 <writeString>
    d98c:	addq.l #8,sp
    d98e:	nop
    d990:	rts

0000d992 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    d992:	                         lea -112(sp),sp
    d996:	                         move.l a6,-(sp)
    d998:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    d99a:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    d99e:	                         move.w 1ca60 <saveEncoding>,d0
    d9a4:	                  /----- beq.s d9ae <fileToStack+0x1c>
    d9a6:	                  |      move.l #103832,d0
    d9ac:	                  |  /-- bra.s d9b4 <fileToStack+0x22>
    d9ae:	                  \--|-> move.l #103858,d0
    d9b4:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    d9b8:	                         move.l 124(sp),112(sp)
    d9be:	                         move.l #1005,108(sp)
    d9c6:	                         move.l 1c9b0 <DOSBase>,d0
    d9cc:	                         movea.l d0,a6
    d9ce:	                         move.l 112(sp),d1
    d9d2:	                         move.l 108(sp),d2
    d9d6:	                         jsr -30(a6)
    d9da:	                         move.l d0,104(sp)
    d9de:	                         move.l 104(sp),d0
    d9e2:	                         move.l d0,100(sp)
    if (!fp) {
    d9e6:	                     /-- bne.s da00 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    d9e8:	                     |   move.l 124(sp),-(sp)
    d9ec:	                     |   pea 195c9 <PutChar+0x18cd>
    d9f2:	                     |   jsr 17232 <KPrintF>
    d9f8:	                     |   addq.l #8,sp
        return FALSE;
    d9fa:	                     |   clr.w d0
    d9fc:	/--------------------|-- bra.w dcf6 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    da00:	|                    \-> move.w 1ca60 <saveEncoding>,d0
    da06:	|                        move.l d0,d0
    da08:	|                        move.b d0,1ca5e <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    da0e:	|                        move.w 1ca60 <saveEncoding>,d0
    da14:	|                        lsr.w #8,d0
    da16:	|                        move.l d0,d0
    da18:	|                        move.b d0,1ca5f <encode2>

    while (*checker) {
    da1e:	|                 /----- bra.s da82 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    da20:	|              /--|----> move.l 100(sp),30(sp)
    da26:	|              |  |      move.l 1c9b0 <DOSBase>,d0
    da2c:	|              |  |      movea.l d0,a6
    da2e:	|              |  |      move.l 30(sp),d1
    da32:	|              |  |      jsr -306(a6)
    da36:	|              |  |      move.l d0,26(sp)
    da3a:	|              |  |      move.l 26(sp),d1
    da3e:	|              |  |      movea.l 116(sp),a0
    da42:	|              |  |      move.b (a0),d0
    da44:	|              |  |      ext.w d0
    da46:	|              |  |      movea.w d0,a0
    da48:	|              |  |      cmpa.l d1,a0
    da4a:	|              |  |  /-- beq.s da7e <fileToStack+0xec>
            Close(fp);
    da4c:	|              |  |  |   move.l 100(sp),22(sp)
    da52:	|              |  |  |   move.l 1c9b0 <DOSBase>,d0
    da58:	|              |  |  |   movea.l d0,a6
    da5a:	|              |  |  |   move.l 22(sp),d1
    da5e:	|              |  |  |   jsr -36(a6)
    da62:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    da66:	|              |  |  |   move.l 124(sp),-(sp)
    da6a:	|              |  |  |   pea 195d6 <PutChar+0x18da>
    da70:	|              |  |  |   jsr 17232 <KPrintF>
    da76:	|              |  |  |   addq.l #8,sp
            return FALSE;
    da78:	|              |  |  |   clr.w d0
    da7a:	+--------------|--|--|-- bra.w dcf6 <fileToStack+0x364>
        }
        checker++;
    da7e:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    da82:	|              |  \----> movea.l 116(sp),a0
    da86:	|              |         move.b (a0),d0
    da88:	|              \-------- bne.s da20 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    da8a:	|                        move.w 1ca60 <saveEncoding>,d0
    da90:	|  /-------------------- beq.s db04 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    da92:	|  |                     move.l 100(sp),-(sp)
    da96:	|  |                     jsr dd00 <readStringEncoded>
    da9c:	|  |                     addq.l #4,sp
    da9e:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    daa2:	|  |                     pea 19617 <PutChar+0x191b>
    daa8:	|  |                     move.l 100(sp),-(sp)
    daac:	|  |                     jsr 13c7e <strcmp>
    dab2:	|  |                     addq.l #8,sp
    dab4:	|  |                     tst.l d0
    dab6:	|  |                 /-- beq.s daea <fileToStack+0x158>
            Close(fp);
    dab8:	|  |                 |   move.l 100(sp),88(sp)
    dabe:	|  |                 |   move.l 1c9b0 <DOSBase>,d0
    dac4:	|  |                 |   movea.l d0,a6
    dac6:	|  |                 |   move.l 88(sp),d1
    daca:	|  |                 |   jsr -36(a6)
    dace:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    dad2:	|  |                 |   move.l 124(sp),-(sp)
    dad6:	|  |                 |   pea 19626 <PutChar+0x192a>
    dadc:	|  |                 |   jsr 17232 <KPrintF>
    dae2:	|  |                 |   addq.l #8,sp
            return FALSE;
    dae4:	|  |                 |   clr.w d0
    dae6:	+--|-----------------|-- bra.w dcf6 <fileToStack+0x364>
        }
        FreeVec(checker);
    daea:	|  |                 \-> move.l 96(sp),92(sp)
    daf0:	|  |                     move.l 1c9a8 <SysBase>,d0
    daf6:	|  |                     movea.l d0,a6
    daf8:	|  |                     movea.l 92(sp),a1
    dafc:	|  |                     jsr -690(a6)
        checker = NULL;
    db00:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    db04:	|  >-------------------> move.w 1ca60 <saveEncoding>,d0
    db0a:	|  |     /-------------- beq.w dc3e <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    db0e:	|  |     |               move.l 100(sp),76(sp)
    db14:	|  |     |               move.l 1c9b0 <DOSBase>,d0
    db1a:	|  |     |               movea.l d0,a6
    db1c:	|  |     |               move.l 76(sp),d1
    db20:	|  |     |               jsr -306(a6)
    db24:	|  |     |               move.l d0,72(sp)
    db28:	|  |     |               move.l 72(sp),d0
    db2c:	|  |     |               move.b 1ca5e <encode1>,d1
    db32:	|  |     |               ext.w d1
    db34:	|  |     |               ext.l d1
    db36:	|  |     |               move.l d0,d2
    db38:	|  |     |               eor.l d1,d2
    db3a:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    db3e:	|  |     |               moveq #-1,d0
    db40:	|  |     |               cmp.l 68(sp),d0
    db44:	|  |  /--|-------------- beq.w dcd4 <fileToStack+0x342>

            char i = (char) tmp;
    db48:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    db4e:	|  |  |  |               move.b 67(sp),d0
    db52:	|  |  |  |               ext.w d0
    db54:	|  |  |  |               movea.w d0,a0
    db56:	|  |  |  |               moveq #2,d2
    db58:	|  |  |  |               cmp.l a0,d2
    db5a:	|  |  |  |     /-------- beq.s dbd6 <fileToStack+0x244>
    db5c:	|  |  |  |     |         moveq #2,d0
    db5e:	|  |  |  |     |         cmp.l a0,d0
    db60:	|  |  |  |  /--|-------- blt.w dc0c <fileToStack+0x27a>
    db64:	|  |  |  |  |  |         cmpa.w #0,a0
    db68:	|  |  |  |  |  |     /-- beq.s db74 <fileToStack+0x1e2>
    db6a:	|  |  |  |  |  |     |   moveq #1,d2
    db6c:	|  |  |  |  |  |     |   cmp.l a0,d2
    db6e:	|  |  |  |  |  |  /--|-- beq.s dbb0 <fileToStack+0x21e>
    db70:	|  |  |  |  +--|--|--|-- bra.w dc0c <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    db74:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    db78:	|  |  |  |  |  |  |      jsr dd00 <readStringEncoded>
    db7e:	|  |  |  |  |  |  |      addq.l #4,sp
    db80:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    db84:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    db88:	|  |  |  |  |  |  |      lea 14(sp),a0
    db8c:	|  |  |  |  |  |  |      move.l a0,-(sp)
    db8e:	|  |  |  |  |  |  |      jsr 149f4 <makeTextVar>
    db94:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    db96:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    db9c:	|  |  |  |  |  |  |      move.l 1c9a8 <SysBase>,d0
    dba2:	|  |  |  |  |  |  |      movea.l d0,a6
    dba4:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    dba8:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    dbac:	|  |  |  |  |  |  |  /-- bra.w dc64 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    dbb0:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    dbb4:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    dbba:	|  |  |  |  |  |     |   addq.l #4,sp
    dbbc:	|  |  |  |  |  |     |   move.l d0,-(sp)
    dbbe:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    dbc2:	|  |  |  |  |  |     |   lea 18(sp),a0
    dbc6:	|  |  |  |  |  |     |   move.l a0,-(sp)
    dbc8:	|  |  |  |  |  |     |   jsr 150c4 <setVariable>
    dbce:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    dbd2:	|  |  |  |  |  |     +-- bra.w dc64 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    dbd6:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    dbdc:	|  |  |  |  |        |   move.l 1c9b0 <DOSBase>,d0
    dbe2:	|  |  |  |  |        |   movea.l d0,a6
    dbe4:	|  |  |  |  |        |   move.l 62(sp),d1
    dbe8:	|  |  |  |  |        |   jsr -306(a6)
    dbec:	|  |  |  |  |        |   move.l d0,58(sp)
    dbf0:	|  |  |  |  |        |   move.l 58(sp),d0
    dbf4:	|  |  |  |  |        |   move.l d0,-(sp)
    dbf6:	|  |  |  |  |        |   pea 1 <_start+0x1>
    dbfa:	|  |  |  |  |        |   lea 18(sp),a0
    dbfe:	|  |  |  |  |        |   move.l a0,-(sp)
    dc00:	|  |  |  |  |        |   jsr 150c4 <setVariable>
    dc06:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    dc0a:	|  |  |  |  |        +-- bra.s dc64 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    dc0c:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    dc10:	|  |  |  |           |   pea 196a8 <PutChar+0x19ac>
    dc16:	|  |  |  |           |   jsr 17232 <KPrintF>
    dc1c:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    dc1e:	|  |  |  |           |   move.l 100(sp),46(sp)
    dc24:	|  |  |  |           |   move.l 1c9b0 <DOSBase>,d0
    dc2a:	|  |  |  |           |   movea.l d0,a6
    dc2c:	|  |  |  |           |   move.l 46(sp),d1
    dc30:	|  |  |  |           |   jsr -36(a6)
    dc34:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    dc38:	|  |  |  |           |   clr.w d0
    dc3a:	+--|--|--|-----------|-- bra.w dcf6 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    dc3e:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    dc42:	|  |  |              |   jsr ddc6 <readTextPlain>
    dc48:	|  |  |              |   addq.l #4,sp
    dc4a:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    dc4e:	|  |  |        /-----|-- beq.w dcd8 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    dc52:	|  |  |        |     |   move.l 80(sp),-(sp)
    dc56:	|  |  |        |     |   lea 14(sp),a0
    dc5a:	|  |  |        |     |   move.l a0,-(sp)
    dc5c:	|  |  |        |     |   jsr 149f4 <makeTextVar>
    dc62:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    dc64:	|  |  |        |     \-> movea.l 128(sp),a0
    dc68:	|  |  |        |         move.l (a0),d0
    dc6a:	|  |  |        |  /----- bne.s dc9a <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    dc6c:	|  |  |        |  |      move.l 128(sp),d0
    dc70:	|  |  |        |  |      move.l d0,-(sp)
    dc72:	|  |  |        |  |      lea 14(sp),a0
    dc76:	|  |  |        |  |      move.l a0,-(sp)
    dc78:	|  |  |        |  |      jsr 14094 <addVarToStackQuick>
    dc7e:	|  |  |        |  |      addq.l #8,sp
    dc80:	|  |  |        |  |      tst.w d0
    dc82:	|  |  |        |  |  /-- bne.s dc88 <fileToStack+0x2f6>
    dc84:	|  |  |        |  |  |   clr.w d0
    dc86:	+--|--|--------|--|--|-- bra.s dcf6 <fileToStack+0x364>
            sH->last = sH->first;
    dc88:	|  |  |        |  |  \-> movea.l 128(sp),a0
    dc8c:	|  |  |        |  |      move.l (a0),d0
    dc8e:	|  |  |        |  |      movea.l 128(sp),a0
    dc92:	|  |  |        |  |      move.l d0,4(a0)
    dc96:	|  +--|--------|--|----- bra.w db04 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    dc9a:	|  |  |        |  \----> movea.l 128(sp),a0
    dc9e:	|  |  |        |         move.l 4(a0),d0
    dca2:	|  |  |        |         addq.l #8,d0
    dca4:	|  |  |        |         move.l d0,-(sp)
    dca6:	|  |  |        |         lea 14(sp),a0
    dcaa:	|  |  |        |         move.l a0,-(sp)
    dcac:	|  |  |        |         jsr 14094 <addVarToStackQuick>
    dcb2:	|  |  |        |         addq.l #8,sp
    dcb4:	|  |  |        |         tst.w d0
    dcb6:	|  |  |        |     /-- bne.s dcbc <fileToStack+0x32a>
    dcb8:	|  |  |        |     |   clr.w d0
    dcba:	+--|--|--------|-----|-- bra.s dcf6 <fileToStack+0x364>
            sH->last = sH->last->next;
    dcbc:	|  |  |        |     \-> movea.l 128(sp),a0
    dcc0:	|  |  |        |         movea.l 4(a0),a0
    dcc4:	|  |  |        |         move.l 8(a0),d0
    dcc8:	|  |  |        |         movea.l 128(sp),a0
    dccc:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    dcd0:	|  \--|--------|-------- bra.w db04 <fileToStack+0x172>
            if (tmp == -1) break;
    dcd4:	|     \--------|-------> nop
    dcd6:	|              |     /-- bra.s dcda <fileToStack+0x348>
            if (!line) break;
    dcd8:	|              \-----|-> nop
        }
    }
    Close(fp);
    dcda:	|                    \-> move.l 100(sp),38(sp)
    dce0:	|                        move.l 1c9b0 <DOSBase>,d0
    dce6:	|                        movea.l d0,a6
    dce8:	|                        move.l 38(sp),d1
    dcec:	|                        jsr -36(a6)
    dcf0:	|                        move.l d0,34(sp)
    return TRUE;
    dcf4:	|                        moveq #1,d0
}
    dcf6:	\----------------------> move.l (sp)+,d2
    dcf8:	                         movea.l (sp)+,a6
    dcfa:	                         lea 112(sp),sp
    dcfe:	                         rts

0000dd00 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    dd00:	          lea -32(sp),sp
    dd04:	          move.l a6,-(sp)
    dd06:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    dd08:	          move.l 44(sp),-(sp)
    dd0c:	          jsr 6bc <get2bytes>
    dd12:	          addq.l #4,sp
    dd14:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    dd18:	          move.l 32(sp),d0
    dd1c:	          addq.l #1,d0
    dd1e:	          move.l d0,28(sp)
    dd22:	          clr.l 24(sp)
    dd26:	          move.l 1c9a8 <SysBase>,d0
    dd2c:	          movea.l d0,a6
    dd2e:	          move.l 28(sp),d0
    dd32:	          move.l 24(sp),d1
    dd36:	          jsr -684(a6)
    dd3a:	          move.l d0,20(sp)
    dd3e:	          move.l 20(sp),d0
    dd42:	          move.l d0,16(sp)
    if (!s) return NULL;
    dd46:	      /-- bne.s dd4c <readStringEncoded+0x4c>
    dd48:	      |   moveq #0,d0
    dd4a:	/-----|-- bra.s ddbc <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    dd4c:	|     \-> clr.l 36(sp)
    dd50:	|     /-- bra.s dda2 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    dd52:	|  /--|-> move.l 44(sp),12(sp)
    dd58:	|  |  |   move.l 1c9b0 <DOSBase>,d0
    dd5e:	|  |  |   movea.l d0,a6
    dd60:	|  |  |   move.l 12(sp),d1
    dd64:	|  |  |   jsr -306(a6)
    dd68:	|  |  |   move.l d0,8(sp)
    dd6c:	|  |  |   move.l 8(sp),d0
    dd70:	|  |  |   move.l d0,d1
    dd72:	|  |  |   move.b 1ca5e <encode1>,d2
    dd78:	|  |  |   move.l 36(sp),d0
    dd7c:	|  |  |   movea.l 16(sp),a0
    dd80:	|  |  |   adda.l d0,a0
    dd82:	|  |  |   move.b d1,d0
    dd84:	|  |  |   eor.b d2,d0
    dd86:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    dd88:	|  |  |   move.b 1ca5e <encode1>,d0
    dd8e:	|  |  |   move.b d0,d1
    dd90:	|  |  |   move.b 1ca5f <encode2>,d0
    dd96:	|  |  |   add.b d1,d0
    dd98:	|  |  |   move.b d0,1ca5e <encode1>
    for (a = 0; a < len; a++) {
    dd9e:	|  |  |   addq.l #1,36(sp)
    dda2:	|  |  \-> move.l 36(sp),d0
    dda6:	|  |      cmp.l 32(sp),d0
    ddaa:	|  \----- blt.s dd52 <readStringEncoded+0x52>
    }
    s[len] = 0;
    ddac:	|         move.l 32(sp),d0
    ddb0:	|         movea.l 16(sp),a0
    ddb4:	|         adda.l d0,a0
    ddb6:	|         clr.b (a0)
    return s;
    ddb8:	|         move.l 16(sp),d0
}
    ddbc:	\-------> move.l (sp)+,d2
    ddbe:	          movea.l (sp)+,a6
    ddc0:	          lea 32(sp),sp
    ddc4:	          rts

0000ddc6 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    ddc6:	             lea -104(sp),sp
    ddca:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    ddce:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    ddd2:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    ddd8:	             move.l 124(sp),106(sp)
    ddde:	             clr.l 102(sp)
    dde2:	             clr.l 98(sp)
    dde6:	             move.l 1c9b0 <DOSBase>,d0
    ddec:	             movea.l d0,a6
    ddee:	             move.l 106(sp),d1
    ddf2:	             move.l 102(sp),d2
    ddf6:	             move.l 98(sp),d3
    ddfa:	             jsr -66(a6)
    ddfe:	             move.l d0,94(sp)
    de02:	             move.l 94(sp),d0
    de06:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    de0a:	   /-------- bra.s de4e <readTextPlain+0x88>
        tmp = FGetC(fp);
    de0c:	/--|-------> move.l 124(sp),22(sp)
    de12:	|  |         move.l 1c9b0 <DOSBase>,d0
    de18:	|  |         movea.l d0,a6
    de1a:	|  |         move.l 22(sp),d1
    de1e:	|  |         jsr -306(a6)
    de22:	|  |         move.l d0,18(sp)
    de26:	|  |         move.l 18(sp),d0
    de2a:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    de2e:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    de34:	|  |         cmpi.b #10,17(sp)
    de3a:	|  |  /----- beq.s de44 <readTextPlain+0x7e>
    de3c:	|  |  |      moveq #-1,d0
    de3e:	|  |  |      cmp.l 110(sp),d0
    de42:	|  |  |  /-- bne.s de4a <readTextPlain+0x84>
            keepGoing = FALSE;
    de44:	|  |  \--|-> clr.w 114(sp)
    de48:	|  +-----|-- bra.s de4e <readTextPlain+0x88>
        } else {
            stringSize++;
    de4a:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    de4e:	|  \-------> tst.w 114(sp)
    de52:	\----------- bne.s de0c <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    de54:	             tst.l 116(sp)
    de58:	         /-- bne.s de68 <readTextPlain+0xa2>
    de5a:	         |   moveq #-1,d0
    de5c:	         |   cmp.l 110(sp),d0
    de60:	         +-- bne.s de68 <readTextPlain+0xa2>
        return NULL;
    de62:	         |   moveq #0,d0
    de64:	      /--|-- bra.w df4e <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    de68:	      |  \-> move.l 124(sp),86(sp)
    de6e:	      |      move.l 90(sp),82(sp)
    de74:	      |      moveq #-1,d0
    de76:	      |      move.l d0,78(sp)
    de7a:	      |      move.l 1c9b0 <DOSBase>,d0
    de80:	      |      movea.l d0,a6
    de82:	      |      move.l 86(sp),d1
    de86:	      |      move.l 82(sp),d2
    de8a:	      |      move.l 78(sp),d3
    de8e:	      |      jsr -66(a6)
    de92:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    de96:	      |      move.l 116(sp),d0
    de9a:	      |      addq.l #1,d0
    de9c:	      |      move.l d0,70(sp)
    dea0:	      |      clr.l 66(sp)
    dea4:	      |      move.l 1c9a8 <SysBase>,d0
    deaa:	      |      movea.l d0,a6
    deac:	      |      move.l 70(sp),d0
    deb0:	      |      move.l 66(sp),d1
    deb4:	      |      jsr -684(a6)
    deb8:	      |      move.l d0,62(sp)
    debc:	      |      move.l 62(sp),d0
    dec0:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    dec4:	      |  /-- bne.s decc <readTextPlain+0x106>
    dec6:	      |  |   moveq #0,d0
    dec8:	      +--|-- bra.w df4e <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    decc:	      |  \-> move.l 124(sp),54(sp)
    ded2:	      |      move.l 58(sp),50(sp)
    ded8:	      |      moveq #1,d0
    deda:	      |      move.l d0,46(sp)
    dede:	      |      move.l 116(sp),42(sp)
    dee4:	      |      move.l 1c9b0 <DOSBase>,d0
    deea:	      |      movea.l d0,a6
    deec:	      |      move.l 54(sp),d1
    def0:	      |      move.l 50(sp),d2
    def4:	      |      move.l 46(sp),d3
    def8:	      |      move.l 42(sp),d4
    defc:	      |      jsr -324(a6)
    df00:	      |      move.l d0,38(sp)
    df04:	      |      move.l 38(sp),d0
    df08:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    df0c:	      |      move.l 34(sp),d0
    df10:	      |      cmp.l 116(sp),d0
    df14:	      |  /-- beq.s df24 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    df16:	      |  |   pea 196dd <PutChar+0x19e1>
    df1c:	      |  |   jsr 17232 <KPrintF>
    df22:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    df24:	      |  \-> move.l 124(sp),30(sp)
    df2a:	      |      move.l 1c9b0 <DOSBase>,d0
    df30:	      |      movea.l d0,a6
    df32:	      |      move.l 30(sp),d1
    df36:	      |      jsr -306(a6)
    df3a:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    df3e:	      |      move.l 116(sp),d0
    df42:	      |      movea.l 58(sp),a0
    df46:	      |      adda.l d0,a0
    df48:	      |      clr.b (a0)
    }

    return reply;
    df4a:	      |      move.l 58(sp),d0
}
    df4e:	      \----> movem.l (sp)+,d2-d4/a6
    df52:	             lea 104(sp),sp
    df56:	             rts

0000df58 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    df58:	                      lea -144(sp),sp
    df5c:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    df60:	                      move.l 160(sp),148(sp)
    df66:	                      move.l #1006,144(sp)
    df6e:	                      move.l 1c9b0 <DOSBase>,d0
    df74:	                      movea.l d0,a6
    df76:	                      move.l 148(sp),d1
    df7a:	                      move.l 144(sp),d2
    df7e:	                      jsr -30(a6)
    df82:	                      move.l d0,140(sp)
    df86:	                      move.l 140(sp),d0
    df8a:	                      move.l d0,136(sp)

    if (!fp) {
    df8e:	                  /-- bne.s dfa8 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    df90:	                  |   move.l 160(sp),-(sp)
    df94:	                  |   pea 196fe <PutChar+0x1a02>
    df9a:	                  |   jsr 17232 <KPrintF>
    dfa0:	                  |   addq.l #8,sp
        return FALSE;
    dfa2:	                  |   clr.w d0
    dfa4:	/-----------------|-- bra.w e264 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    dfa8:	|                 \-> movea.l 164(sp),a0
    dfac:	|                     movea.l 4(a0),a0
    dfb0:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    dfb4:	|                     move.w 1ca60 <saveEncoding>,d0
    dfba:	|                     move.l d0,d0
    dfbc:	|                     move.b d0,1ca5e <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    dfc2:	|                     move.w 1ca60 <saveEncoding>,d0
    dfc8:	|                     lsr.w #8,d0
    dfca:	|                     move.l d0,d0
    dfcc:	|                     move.b d0,1ca5f <encode2>

    if (saveEncoding) {
    dfd2:	|                     move.w 1ca60 <saveEncoding>,d0
    dfd8:	|                 /-- beq.s e02a <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    dfda:	|                 |   move.l 136(sp),116(sp)
    dfe0:	|                 |   move.l #103832,112(sp)
    dfe8:	|                 |   moveq #99,d0
    dfea:	|                 |   not.b d0
    dfec:	|                 |   add.l sp,d0
    dfee:	|                 |   addi.l #-144,d0
    dff4:	|                 |   move.l d0,108(sp)
    dff8:	|                 |   move.l 1c9b0 <DOSBase>,d0
    dffe:	|                 |   movea.l d0,a6
    e000:	|                 |   move.l 116(sp),d1
    e004:	|                 |   move.l 112(sp),d2
    e008:	|                 |   move.l 108(sp),d3
    e00c:	|                 |   jsr -354(a6)
    e010:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    e014:	|                 |   move.l 136(sp),-(sp)
    e018:	|                 |   pea 19617 <PutChar+0x191b>
    e01e:	|                 |   jsr e26e <writeStringEncoded>
    e024:	|                 |   addq.l #8,sp
    e026:	|  /--------------|-- bra.w e23c <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    e02a:	|  |              \-> move.l 136(sp),132(sp)
    e030:	|  |                  move.l #103858,128(sp)
    e038:	|  |                  moveq #99,d1
    e03a:	|  |                  not.b d1
    e03c:	|  |                  add.l sp,d1
    e03e:	|  |                  addi.l #-144,d1
    e044:	|  |                  move.l d1,124(sp)
    e048:	|  |                  move.l 1c9b0 <DOSBase>,d0
    e04e:	|  |                  movea.l d0,a6
    e050:	|  |                  move.l 132(sp),d1
    e054:	|  |                  move.l 128(sp),d2
    e058:	|  |                  move.l 124(sp),d3
    e05c:	|  |                  jsr -354(a6)
    e060:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    e064:	|  +----------------- bra.w e23c <stackToFile+0x2e4>
        if (saveEncoding) {
    e068:	|  |  /-------------> move.w 1ca60 <saveEncoding>,d0
    e06e:	|  |  |     /-------- beq.w e1c0 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    e072:	|  |  |     |         movea.l 152(sp),a0
    e076:	|  |  |     |         move.l (a0),d0
    e078:	|  |  |     |         moveq #1,d1
    e07a:	|  |  |     |         cmp.l d0,d1
    e07c:	|  |  |     |     /-- beq.s e0cc <stackToFile+0x174>
    e07e:	|  |  |     |     |   moveq #3,d1
    e080:	|  |  |     |     |   cmp.l d0,d1
    e082:	|  |  |     |  /--|-- bne.w e18e <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    e086:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    e08c:	|  |  |     |  |  |   move.b 1ca5e <encode1>,d0
    e092:	|  |  |     |  |  |   ext.w d0
    e094:	|  |  |     |  |  |   movea.w d0,a0
    e096:	|  |  |     |  |  |   move.l a0,72(sp)
    e09a:	|  |  |     |  |  |   move.l 1c9b0 <DOSBase>,d0
    e0a0:	|  |  |     |  |  |   movea.l d0,a6
    e0a2:	|  |  |     |  |  |   move.l 76(sp),d1
    e0a6:	|  |  |     |  |  |   move.l 72(sp),d2
    e0aa:	|  |  |     |  |  |   jsr -312(a6)
    e0ae:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    e0b2:	|  |  |     |  |  |   movea.l 152(sp),a0
    e0b6:	|  |  |     |  |  |   move.l 4(a0),d0
    e0ba:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    e0be:	|  |  |     |  |  |   move.l d0,-(sp)
    e0c0:	|  |  |     |  |  |   jsr e26e <writeStringEncoded>
    e0c6:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    e0c8:	|  |  |  /--|--|--|-- bra.w e232 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    e0cc:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    e0d0:	|  |  |  |  |  |      move.l 4(a0),d0
    e0d4:	|  |  |  |  |  |  /-- bmi.s e144 <stackToFile+0x1ec>
    e0d6:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e0da:	|  |  |  |  |  |  |   move.l 4(a0),d0
    e0de:	|  |  |  |  |  |  |   cmpi.l #255,d0
    e0e4:	|  |  |  |  |  |  +-- bgt.s e144 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    e0e6:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    e0ec:	|  |  |  |  |  |  |   move.b 1ca5e <encode1>,d0
    e0f2:	|  |  |  |  |  |  |   eori.b #2,d0
    e0f6:	|  |  |  |  |  |  |   ext.w d0
    e0f8:	|  |  |  |  |  |  |   movea.w d0,a0
    e0fa:	|  |  |  |  |  |  |   move.l a0,60(sp)
    e0fe:	|  |  |  |  |  |  |   move.l 1c9b0 <DOSBase>,d0
    e104:	|  |  |  |  |  |  |   movea.l d0,a6
    e106:	|  |  |  |  |  |  |   move.l 64(sp),d1
    e10a:	|  |  |  |  |  |  |   move.l 60(sp),d2
    e10e:	|  |  |  |  |  |  |   jsr -312(a6)
    e112:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    e116:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    e11c:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e120:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    e126:	|  |  |  |  |  |  |   move.l 1c9b0 <DOSBase>,d0
    e12c:	|  |  |  |  |  |  |   movea.l d0,a6
    e12e:	|  |  |  |  |  |  |   move.l 52(sp),d1
    e132:	|  |  |  |  |  |  |   move.l 48(sp),d2
    e136:	|  |  |  |  |  |  |   jsr -312(a6)
    e13a:	|  |  |  |  |  |  |   move.l d0,44(sp)
    e13e:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    e140:	|  |  |  +--|--|--|-- bra.w e232 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    e144:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    e14a:	|  |  |  |  |  |      move.b 1ca5e <encode1>,d0
    e150:	|  |  |  |  |  |      eori.b #1,d0
    e154:	|  |  |  |  |  |      ext.w d0
    e156:	|  |  |  |  |  |      movea.w d0,a0
    e158:	|  |  |  |  |  |      move.l a0,36(sp)
    e15c:	|  |  |  |  |  |      move.l 1c9b0 <DOSBase>,d0
    e162:	|  |  |  |  |  |      movea.l d0,a6
    e164:	|  |  |  |  |  |      move.l 40(sp),d1
    e168:	|  |  |  |  |  |      move.l 36(sp),d2
    e16c:	|  |  |  |  |  |      jsr -312(a6)
    e170:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    e174:	|  |  |  |  |  |      movea.l 152(sp),a0
    e178:	|  |  |  |  |  |      move.l 4(a0),d0
    e17c:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    e180:	|  |  |  |  |  |      move.l d0,-(sp)
    e182:	|  |  |  |  |  |      jsr 958 <put4bytes>
    e188:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    e18a:	|  |  |  +--|--|----- bra.w e232 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    e18e:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    e192:	|  |  |  |  |         pea 19710 <PutChar+0x1a14>
    e198:	|  |  |  |  |         jsr 17232 <KPrintF>
    e19e:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    e1a0:	|  |  |  |  |         move.l 136(sp),28(sp)
    e1a6:	|  |  |  |  |         move.l 1c9b0 <DOSBase>,d0
    e1ac:	|  |  |  |  |         movea.l d0,a6
    e1ae:	|  |  |  |  |         move.l 28(sp),d1
    e1b2:	|  |  |  |  |         jsr -36(a6)
    e1b6:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    e1ba:	|  |  |  |  |         clr.w d0
    e1bc:	+--|--|--|--|-------- bra.w e264 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    e1c0:	|  |  |  |  \-------> move.l 152(sp),d0
    e1c4:	|  |  |  |            move.l d0,-(sp)
    e1c6:	|  |  |  |            jsr 14da8 <getTextFromAnyVar>
    e1cc:	|  |  |  |            addq.l #4,sp
    e1ce:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    e1d2:	|  |  |  |     /----- beq.s e246 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    e1d4:	|  |  |  |     |      movea.l 100(sp),a0
    e1d8:	|  |  |  |     |      move.b (a0),d0
    e1da:	|  |  |  |     |      ext.w d0
    e1dc:	|  |  |  |     |      movea.w d0,a0
    e1de:	|  |  |  |     |      move.l a0,12(sp)
    e1e2:	|  |  |  |     |      move.l 136(sp),96(sp)
    e1e8:	|  |  |  |     |      move.l #104300,92(sp)
    e1f0:	|  |  |  |     |      moveq #99,d0
    e1f2:	|  |  |  |     |      not.b d0
    e1f4:	|  |  |  |     |      add.l sp,d0
    e1f6:	|  |  |  |     |      addi.l #-144,d0
    e1fc:	|  |  |  |     |      move.l d0,88(sp)
    e200:	|  |  |  |     |      move.l 1c9b0 <DOSBase>,d0
    e206:	|  |  |  |     |      movea.l d0,a6
    e208:	|  |  |  |     |      move.l 96(sp),d1
    e20c:	|  |  |  |     |      move.l 92(sp),d2
    e210:	|  |  |  |     |      move.l 88(sp),d3
    e214:	|  |  |  |     |      jsr -354(a6)
    e218:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    e21c:	|  |  |  |     |      move.l 100(sp),80(sp)
    e222:	|  |  |  |     |      move.l 1c9a8 <SysBase>,d0
    e228:	|  |  |  |     |      movea.l d0,a6
    e22a:	|  |  |  |     |      movea.l 80(sp),a1
    e22e:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    e232:	|  |  |  \-----|----> movea.l 152(sp),a0
    e236:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    e23c:	|  \--|--------|----> tst.l 152(sp)
    e240:	|     \--------|----- bne.w e068 <stackToFile+0x110>
    e244:	|              |  /-- bra.s e248 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    e246:	|              \--|-> nop
    }
    Close(fp);
    e248:	|                 \-> move.l 136(sp),20(sp)
    e24e:	|                     move.l 1c9b0 <DOSBase>,d0
    e254:	|                     movea.l d0,a6
    e256:	|                     move.l 20(sp),d1
    e25a:	|                     jsr -36(a6)
    e25e:	|                     move.l d0,16(sp)
    return TRUE;
    e262:	|                     moveq #1,d0
}
    e264:	\-------------------> movem.l (sp)+,d2-d3/a6
    e268:	                      lea 144(sp),sp
    e26c:	                      rts

0000e26e <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    e26e:	       lea -20(sp),sp
    e272:	       move.l a6,-(sp)
    e274:	       move.l d2,-(sp)
	int a, len = strlen (s);
    e276:	       move.l 32(sp),-(sp)
    e27a:	       jsr 13cbe <strlen>
    e280:	       addq.l #4,sp
    e282:	       move.l d0,20(sp)

	put2bytes (len, fp);
    e286:	       move.l 36(sp),-(sp)
    e28a:	       move.l 24(sp),-(sp)
    e28e:	       jsr 8d0 <put2bytes>
    e294:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    e296:	       clr.l 24(sp)
    e29a:	   /-- bra.s e2f0 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    e29c:	/--|-> move.l 36(sp),16(sp)
    e2a2:	|  |   move.l 24(sp),d0
    e2a6:	|  |   movea.l 32(sp),a0
    e2aa:	|  |   adda.l d0,a0
    e2ac:	|  |   move.b (a0),d1
    e2ae:	|  |   move.b 1ca5e <encode1>,d0
    e2b4:	|  |   eor.b d1,d0
    e2b6:	|  |   ext.w d0
    e2b8:	|  |   movea.w d0,a0
    e2ba:	|  |   move.l a0,12(sp)
    e2be:	|  |   move.l 1c9b0 <DOSBase>,d0
    e2c4:	|  |   movea.l d0,a6
    e2c6:	|  |   move.l 16(sp),d1
    e2ca:	|  |   move.l 12(sp),d2
    e2ce:	|  |   jsr -312(a6)
    e2d2:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    e2d6:	|  |   move.b 1ca5e <encode1>,d0
    e2dc:	|  |   move.b d0,d1
    e2de:	|  |   move.b 1ca5f <encode2>,d0
    e2e4:	|  |   add.b d1,d0
    e2e6:	|  |   move.b d0,1ca5e <encode1>
	for (a = 0; a < len; a ++) {
    e2ec:	|  |   addq.l #1,24(sp)
    e2f0:	|  \-> move.l 24(sp),d0
    e2f4:	|      cmp.l 20(sp),d0
    e2f8:	\----- blt.s e29c <writeStringEncoded+0x2e>
	}
}
    e2fa:	       nop
    e2fc:	       nop
    e2fe:	       move.l (sp)+,d2
    e300:	       movea.l (sp)+,a6
    e302:	       lea 20(sp),sp
    e306:	       rts

0000e308 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    e308:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    e30a:	                   tst.l 8(sp)
    e30e:	               /-- bne.s e314 <failSecurityCheck+0xc>
    e310:	               |   moveq #1,d0
    e312:	/--------------|-- bra.s e392 <failSecurityCheck+0x8a>

	int a = 0;
    e314:	|              \-> clr.l (sp)

	while (fn[a]) {
    e316:	|     /----------- bra.s e384 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    e318:	|  /--|----------> move.l (sp),d0
    e31a:	|  |  |            movea.l 8(sp),a0
    e31e:	|  |  |            adda.l d0,a0
    e320:	|  |  |            move.b (a0),d0
    e322:	|  |  |            ext.w d0
    e324:	|  |  |            movea.w d0,a0
    e326:	|  |  |            moveq #124,d0
    e328:	|  |  |            cmp.l a0,d0
    e32a:	|  |  |     /----- beq.s e36c <failSecurityCheck+0x64>
    e32c:	|  |  |     |      moveq #124,d1
    e32e:	|  |  |     |      cmp.l a0,d1
    e330:	|  |  |  /--|----- blt.s e382 <failSecurityCheck+0x7a>
    e332:	|  |  |  |  |      moveq #92,d0
    e334:	|  |  |  |  |      cmp.l a0,d0
    e336:	|  |  |  |  +----- beq.s e36c <failSecurityCheck+0x64>
    e338:	|  |  |  |  |      moveq #92,d1
    e33a:	|  |  |  |  |      cmp.l a0,d1
    e33c:	|  |  |  +--|----- blt.s e382 <failSecurityCheck+0x7a>
    e33e:	|  |  |  |  |      moveq #60,d0
    e340:	|  |  |  |  |      cmp.l a0,d0
    e342:	|  |  |  |  |  /-- blt.s e362 <failSecurityCheck+0x5a>
    e344:	|  |  |  |  |  |   moveq #34,d1
    e346:	|  |  |  |  |  |   cmp.l a0,d1
    e348:	|  |  |  +--|--|-- bgt.s e382 <failSecurityCheck+0x7a>
    e34a:	|  |  |  |  |  |   moveq #-34,d1
    e34c:	|  |  |  |  |  |   add.l a0,d1
    e34e:	|  |  |  |  |  |   move.l #83894529,d0
    e354:	|  |  |  |  |  |   lsr.l d1,d0
    e356:	|  |  |  |  |  |   moveq #1,d1
    e358:	|  |  |  |  |  |   and.l d1,d0
    e35a:	|  |  |  |  |  |   sne d0
    e35c:	|  |  |  |  |  |   neg.b d0
    e35e:	|  |  |  |  +--|-- bne.s e36c <failSecurityCheck+0x64>
    e360:	|  |  |  +--|--|-- bra.s e382 <failSecurityCheck+0x7a>
    e362:	|  |  |  |  |  \-> lea -62(a0),a0
    e366:	|  |  |  |  |      moveq #1,d0
    e368:	|  |  |  |  |      cmp.l a0,d0
    e36a:	|  |  |  +--|----- bcs.s e382 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    e36c:	|  |  |  |  \----> move.l 8(sp),-(sp)
    e370:	|  |  |  |         pea 19770 <PutChar+0x1a74>
    e376:	|  |  |  |         jsr 17232 <KPrintF>
    e37c:	|  |  |  |         addq.l #8,sp
				return TRUE;
    e37e:	|  |  |  |         moveq #1,d0
    e380:	+--|--|--|-------- bra.s e392 <failSecurityCheck+0x8a>
		}
		a++;
    e382:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    e384:	|  |  \----------> move.l (sp),d0
    e386:	|  |               movea.l 8(sp),a0
    e38a:	|  |               adda.l d0,a0
    e38c:	|  |               move.b (a0),d0
    e38e:	|  \-------------- bne.s e318 <failSecurityCheck+0x10>
	}
	return FALSE;
    e390:	|                  clr.w d0
}
    e392:	\----------------> addq.l #4,sp
    e394:	                   rts

0000e396 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    e396:	             lea -24(sp),sp
    e39a:	             move.l a6,-(sp)
    e39c:	             move.l 40(sp),d0
    e3a0:	             move.w d0,d0
    e3a2:	             move.w d0,6(sp)
	int fileNum = -1;
    e3a6:	             moveq #-1,d0
    e3a8:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    e3ac:	             jsr 6200 <killSpeechTimers>

	switch (numParams) {
    e3b2:	             moveq #2,d0
    e3b4:	             cmp.l 32(sp),d0
    e3b8:	      /----- beq.s e3fc <sayCore+0x66>
    e3ba:	      |      moveq #3,d0
    e3bc:	      |      cmp.l 32(sp),d0
    e3c0:	/-----|----- bne.w e4de <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    e3c4:	|     |      movea.l 36(sp),a0
    e3c8:	|     |      move.l 24(a0),d0
    e3cc:	|     |      move.l d0,-(sp)
    e3ce:	|     |      pea 5 <_start+0x5>
    e3d2:	|     |      lea 20(sp),a0
    e3d6:	|     |      move.l a0,-(sp)
    e3d8:	|     |      jsr 147d2 <getValueType>
    e3de:	|     |      lea 12(sp),sp
    e3e2:	|     |      tst.w d0
    e3e4:	|     |  /-- bne.s e3ec <sayCore+0x56>
    e3e6:	|     |  |   moveq #1,d0
    e3e8:	|  /--|--|-- bra.w e4ee <sayCore+0x158>
			trimStack (&fun -> stack);
    e3ec:	|  |  |  \-> moveq #24,d0
    e3ee:	|  |  |      add.l 36(sp),d0
    e3f2:	|  |  |      move.l d0,-(sp)
    e3f4:	|  |  |      jsr 15156 <trimStack>
    e3fa:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    e3fc:	|  |  \----> movea.l 36(sp),a0
    e400:	|  |         move.l 24(a0),d0
    e404:	|  |         move.l d0,-(sp)
    e406:	|  |         jsr 14da8 <getTextFromAnyVar>
    e40c:	|  |         addq.l #4,sp
    e40e:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    e412:	|  |     /-- bne.s e41a <sayCore+0x84>
    e414:	|  |     |   moveq #1,d0
    e416:	|  +-----|-- bra.w e4ee <sayCore+0x158>
			trimStack (&fun -> stack);
    e41a:	|  |     \-> moveq #24,d0
    e41c:	|  |         add.l 36(sp),d0
    e420:	|  |         move.l d0,-(sp)
    e422:	|  |         jsr 15156 <trimStack>
    e428:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e42a:	|  |         movea.l 36(sp),a0
    e42e:	|  |         move.l 24(a0),d0
    e432:	|  |         move.l d0,-(sp)
    e434:	|  |         pea 7 <_start+0x7>
    e438:	|  |         lea 16(sp),a0
    e43c:	|  |         move.l a0,-(sp)
    e43e:	|  |         jsr 147d2 <getValueType>
    e444:	|  |         lea 12(sp),sp
    e448:	|  |         tst.w d0
    e44a:	|  |     /-- bne.s e452 <sayCore+0xbc>
    e44c:	|  |     |   moveq #1,d0
    e44e:	|  +-----|-- bra.w e4ee <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e452:	|  |     \-> movea.l 36(sp),a0
    e456:	|  |         move.l 24(a0),d0
    e45a:	|  |         move.l d0,-(sp)
    e45c:	|  |         pea 7 <_start+0x7>
    e460:	|  |         lea 16(sp),a0
    e464:	|  |         move.l a0,-(sp)
    e466:	|  |         jsr 147d2 <getValueType>
    e46c:	|  |         lea 12(sp),sp
    e470:	|  |         tst.w d0
    e472:	|  |     /-- bne.s e478 <sayCore+0xe2>
    e474:	|  |     |   moveq #1,d0
    e476:	|  +-----|-- bra.s e4ee <sayCore+0x158>
			trimStack (&fun -> stack);
    e478:	|  |     \-> moveq #24,d0
    e47a:	|  |         add.l 36(sp),d0
    e47e:	|  |         move.l d0,-(sp)
    e480:	|  |         jsr 15156 <trimStack>
    e486:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    e488:	|  |         movea.w 6(sp),a0
    e48c:	|  |         move.l 12(sp),d1
    e490:	|  |         move.l 8(sp),d0
    e494:	|  |         move.l a0,-(sp)
    e496:	|  |         move.l d1,-(sp)
    e498:	|  |         move.l d0,-(sp)
    e49a:	|  |         move.l 36(sp),-(sp)
    e49e:	|  |         jsr 81ba <wrapSpeech>
    e4a4:	|  |         lea 16(sp),sp
    e4a8:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    e4ac:	|  |         movea.l 36(sp),a0
    e4b0:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    e4b6:	|  |         movea.l 36(sp),a0
    e4ba:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    e4c0:	|  |         move.l 24(sp),16(sp)
    e4c6:	|  |         move.l 1c9a8 <SysBase>,d0
    e4cc:	|  |         movea.l d0,a6
    e4ce:	|  |         movea.l 16(sp),a1
    e4d2:	|  |         jsr -690(a6)
			newText = NULL;
    e4d6:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    e4da:	|  |         moveq #0,d0
    e4dc:	|  +-------- bra.s e4ee <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    e4de:	\--|-------> pea 197f6 <PutChar+0x1afa>
    e4e4:	   |         jsr 17232 <KPrintF>
    e4ea:	   |         addq.l #4,sp
	return BR_ERROR;
    e4ec:	   |         moveq #1,d0
}
    e4ee:	   \-------> movea.l (sp)+,a6
    e4f0:	             lea 24(sp),sp
    e4f4:	             rts

0000e4f6 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    e4f6:	pea 1 <_start+0x1>
    e4fa:	move.l 12(sp),-(sp)
    e4fe:	move.l 12(sp),-(sp)
    e502:	jsr e396 <sayCore>
    e508:	lea 12(sp),sp
}
    e50c:	rts

0000e50e <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    e50e:	clr.l -(sp)
    e510:	move.l 12(sp),-(sp)
    e514:	move.l 12(sp),-(sp)
    e518:	jsr e396 <sayCore>
    e51e:	lea 12(sp),sp
}
    e522:	rts

0000e524 <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    e524:	jsr 1519e <freeze>
	freezeSubs (); 
    e52a:	jsr 57f0 <freezeSubs>
	fun -> freezerLevel = 0;
    e530:	movea.l 8(sp),a0
    e534:	clr.b 56(a0)
	return BR_CONTINUE;
    e538:	moveq #2,d0
}
    e53a:	rts

0000e53c <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    e53c:	jsr 1539a <unfreeze>
	unfreezeSubs (); 
    e542:	jsr 6c42 <unfreezeSubs>
	return BR_CONTINUE;
    e548:	moveq #2,d0
}
    e54a:	rts

0000e54c <builtIn_howFrozen>:

builtIn(howFrozen)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, howFrozen ());
    e54c:	jsr 15376 <howFrozen>
    e552:	move.l d0,d1
    e554:	moveq #28,d0
    e556:	add.l 8(sp),d0
    e55a:	move.l d1,-(sp)
    e55c:	pea 1 <_start+0x1>
    e560:	move.l d0,-(sp)
    e562:	jsr 150c4 <setVariable>
    e568:	lea 12(sp),sp
	return BR_CONTINUE; 
    e56c:	moveq #2,d0
}
    e56e:	rts

0000e570 <builtIn_setCursor>:

builtIn(setCursor)
{
    e570:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    e572:	movea.l 12(sp),a0
    e576:	move.l 24(a0),d0
    e57a:	move.l d0,-(sp)
    e57c:	jsr 14caa <getAnimationFromVar>
    e582:	addq.l #4,sp
    e584:	move.l d0,(sp)
	pickAnimCursor (aa);
    e586:	move.l (sp),-(sp)
    e588:	jsr d6c <pickAnimCursor>
    e58e:	addq.l #4,sp
	trimStack (&fun -> stack);
    e590:	moveq #24,d0
    e592:	add.l 12(sp),d0
    e596:	move.l d0,-(sp)
    e598:	jsr 15156 <trimStack>
    e59e:	addq.l #4,sp
	return BR_CONTINUE;
    e5a0:	moveq #2,d0
}
    e5a2:	addq.l #4,sp
    e5a4:	rts

0000e5a6 <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    e5a6:	move.l 1c964 <input+0xa>,d1
    e5ac:	move.l 1ca62 <cameraX>,d0
    e5b2:	add.l d0,d1
    e5b4:	moveq #28,d0
    e5b6:	add.l 8(sp),d0
    e5ba:	move.l d1,-(sp)
    e5bc:	pea 1 <_start+0x1>
    e5c0:	move.l d0,-(sp)
    e5c2:	jsr 150c4 <setVariable>
    e5c8:	lea 12(sp),sp
	return BR_CONTINUE;
    e5cc:	moveq #2,d0
}
    e5ce:	rts

0000e5d0 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    e5d0:	move.l 1c968 <input+0xe>,d1
    e5d6:	move.l 1ca66 <cameraY>,d0
    e5dc:	add.l d0,d1
    e5de:	moveq #28,d0
    e5e0:	add.l 8(sp),d0
    e5e4:	move.l d1,-(sp)
    e5e6:	pea 1 <_start+0x1>
    e5ea:	move.l d0,-(sp)
    e5ec:	jsr 150c4 <setVariable>
    e5f2:	lea 12(sp),sp
	return BR_CONTINUE;
    e5f6:	moveq #2,d0
}
    e5f8:	rts

0000e5fa <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    e5fa:	move.l 1c964 <input+0xa>,d0
    e600:	move.l d0,-(sp)
    e602:	jsr 17664 <__floatsisf>
    e608:	addq.l #4,sp
    e60a:	move.l d0,d1
    e60c:	move.l 1c346 <cameraZoom>,d0
    e612:	move.l d0,-(sp)
    e614:	move.l d1,-(sp)
    e616:	jsr 17716 <__mulsf3>
    e61c:	addq.l #8,sp
    e61e:	move.l d0,-(sp)
    e620:	jsr 175fc <__fixsfsi>
    e626:	addq.l #4,sp
    e628:	move.l d0,d1
    e62a:	moveq #28,d0
    e62c:	add.l 8(sp),d0
    e630:	move.l d1,-(sp)
    e632:	pea 1 <_start+0x1>
    e636:	move.l d0,-(sp)
    e638:	jsr 150c4 <setVariable>
    e63e:	lea 12(sp),sp
	return BR_CONTINUE;
    e642:	moveq #2,d0
}
    e644:	rts

0000e646 <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    e646:	move.l 1c968 <input+0xe>,d0
    e64c:	move.l d0,-(sp)
    e64e:	jsr 17664 <__floatsisf>
    e654:	addq.l #4,sp
    e656:	move.l d0,d1
    e658:	move.l 1c346 <cameraZoom>,d0
    e65e:	move.l d0,-(sp)
    e660:	move.l d1,-(sp)
    e662:	jsr 17716 <__mulsf3>
    e668:	addq.l #8,sp
    e66a:	move.l d0,-(sp)
    e66c:	jsr 175fc <__fixsfsi>
    e672:	addq.l #4,sp
    e674:	move.l d0,d1
    e676:	moveq #28,d0
    e678:	add.l 8(sp),d0
    e67c:	move.l d1,-(sp)
    e67e:	pea 1 <_start+0x1>
    e682:	move.l d0,-(sp)
    e684:	jsr 150c4 <setVariable>
    e68a:	lea 12(sp),sp
	return BR_CONTINUE;
    e68e:	moveq #2,d0
}
    e690:	rts

0000e692 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    e692:	jsr 7c6e <statusBarText>
    e698:	move.l d0,d1
    e69a:	moveq #28,d0
    e69c:	add.l 8(sp),d0
    e6a0:	move.l d1,-(sp)
    e6a2:	move.l d0,-(sp)
    e6a4:	jsr 149f4 <makeTextVar>
    e6aa:	addq.l #8,sp
	return BR_CONTINUE;
    e6ac:	moveq #2,d0
}
    e6ae:	rts

0000e6b0 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    e6b0:	       lea -20(sp),sp
    e6b4:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    e6b6:	       movea.l 32(sp),a0
    e6ba:	       move.l 24(a0),d0
    e6be:	       move.l d0,-(sp)
    e6c0:	       jsr 14da8 <getTextFromAnyVar>
    e6c6:	       addq.l #4,sp
    e6c8:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    e6cc:	   /-- bne.s e6d4 <builtIn_getMatchingFiles+0x24>
    e6ce:	   |   moveq #1,d0
    e6d0:	/--|-- bra.w e796 <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    e6d4:	|  \-> moveq #24,d0
    e6d6:	|      add.l 32(sp),d0
    e6da:	|      move.l d0,-(sp)
    e6dc:	|      jsr 15156 <trimStack>
    e6e2:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    e6e4:	|      moveq #28,d0
    e6e6:	|      add.l 32(sp),d0
    e6ea:	|      move.l d0,-(sp)
    e6ec:	|      jsr 14a20 <unlinkVar>
    e6f2:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    e6f4:	|      movea.l 32(sp),a0
    e6f8:	|      moveq #6,d0
    e6fa:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    e6fe:	|      moveq #12,d0
    e700:	|      move.l d0,16(sp)
    e704:	|      clr.l 12(sp)
    e708:	|      move.l 1c9a8 <SysBase>,d0
    e70e:	|      movea.l d0,a6
    e710:	|      move.l 16(sp),d0
    e714:	|      move.l 12(sp),d1
    e718:	|      jsr -684(a6)
    e71c:	|      move.l d0,8(sp)
    e720:	|      move.l 8(sp),d0
    e724:	|      movea.l 32(sp),a0
    e728:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    e72c:	|      moveq #32,d0
    e72e:	|      add.l 32(sp),d0
    e732:	|  /-- bne.s e738 <builtIn_getMatchingFiles+0x88>
    e734:	|  |   moveq #1,d0
    e736:	+--|-- bra.s e796 <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    e738:	|  \-> movea.l 32(sp),a0
    e73c:	|      movea.l 32(a0),a0
    e740:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    e742:	|      movea.l 32(sp),a0
    e746:	|      movea.l 32(a0),a0
    e74a:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    e74e:	|      movea.l 32(sp),a0
    e752:	|      movea.l 32(a0),a0
    e756:	|      moveq #1,d0
    e758:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    e75c:	|      movea.l 32(sp),a0
    e760:	|      move.l 32(a0),d0
    e764:	|      move.l 20(sp),-(sp)
    e768:	|      move.l d0,-(sp)
    e76a:	|      jsr 1458e <getSavedGamesStack>
    e770:	|      addq.l #8,sp
    e772:	|      tst.w d0
    e774:	|  /-- bne.s e77a <builtIn_getMatchingFiles+0xca>
    e776:	|  |   moveq #1,d0
    e778:	+--|-- bra.s e796 <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    e77a:	|  \-> move.l 20(sp),4(sp)
    e780:	|      move.l 1c9a8 <SysBase>,d0
    e786:	|      movea.l d0,a6
    e788:	|      movea.l 4(sp),a1
    e78c:	|      jsr -690(a6)
	newText = NULL;
    e790:	|      clr.l 20(sp)
	return BR_CONTINUE;
    e794:	|      moveq #2,d0
}
    e796:	\----> movea.l (sp)+,a6
    e798:	       lea 20(sp),sp
    e79c:	       rts

0000e79e <builtIn_saveGame>:

builtIn(saveGame)
{
    e79e:	       lea -12(sp),sp
    e7a2:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e7a4:	       movea.l 24(sp),a0
    e7a8:	       move.l 24(a0),d0
    e7ac:	       move.l d0,-(sp)
    e7ae:	       jsr 14da8 <getTextFromAnyVar>
    e7b4:	       addq.l #4,sp
    e7b6:	       move.l d0,1c974 <loadNow>
    trimStack(&fun->stack);
    e7bc:	       moveq #24,d0
    e7be:	       add.l 24(sp),d0
    e7c2:	       move.l d0,-(sp)
    e7c4:	       jsr 15156 <trimStack>
    e7ca:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    e7cc:	       move.l 1c974 <loadNow>,d0
    e7d2:	       move.l d0,-(sp)
    e7d4:	       jsr 2fe <encodeFilename>
    e7da:	       addq.l #4,sp
    e7dc:	       move.l d0,12(sp)
    FreeVec(loadNow);
    e7e0:	       move.l 1c974 <loadNow>,8(sp)
    e7e8:	       move.l 1c9a8 <SysBase>,d0
    e7ee:	       movea.l d0,a6
    e7f0:	       movea.l 8(sp),a1
    e7f4:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    e7f8:	       move.l 12(sp),-(sp)
    e7fc:	       jsr e308 <failSecurityCheck>
    e802:	       addq.l #4,sp
    e804:	       tst.w d0
    e806:	   /-- beq.s e80c <builtIn_saveGame+0x6e>
    e808:	   |   moveq #1,d0
    e80a:	/--|-- bra.s e85c <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    e80c:	|  \-> move.l 12(sp),-(sp)
    e810:	|      pea 19824 <PutChar+0x1b28>
    e816:	|      jsr 13cfe <joinStrings>
    e81c:	|      addq.l #8,sp
    e81e:	|      move.l d0,1c974 <loadNow>
    FreeVec(aaaaa);
    e824:	|      move.l 12(sp),4(sp)
    e82a:	|      move.l 1c9a8 <SysBase>,d0
    e830:	|      movea.l d0,a6
    e832:	|      movea.l 4(sp),a1
    e836:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    e83a:	|      moveq #28,d0
    e83c:	|      add.l 24(sp),d0
    e840:	|      clr.l -(sp)
    e842:	|      pea 1 <_start+0x1>
    e846:	|      move.l d0,-(sp)
    e848:	|      jsr 150c4 <setVariable>
    e84e:	|      lea 12(sp),sp
    saverFunc = fun;
    e852:	|      move.l 24(sp),1ca72 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    e85a:	|      moveq #0,d0
}
    e85c:	\----> movea.l (sp)+,a6
    e85e:	       lea 12(sp),sp
    e862:	       rts

0000e864 <builtIn_fileExists>:

builtIn(fileExists)
{
    e864:	       lea -36(sp),sp
    e868:	       move.l a6,-(sp)
    e86a:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e86c:	       movea.l 52(sp),a0
    e870:	       move.l 24(a0),d0
    e874:	       move.l d0,-(sp)
    e876:	       jsr 14da8 <getTextFromAnyVar>
    e87c:	       addq.l #4,sp
    e87e:	       move.l d0,1c974 <loadNow>
    trimStack(&fun->stack);
    e884:	       moveq #24,d0
    e886:	       add.l 52(sp),d0
    e88a:	       move.l d0,-(sp)
    e88c:	       jsr 15156 <trimStack>
    e892:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    e894:	       move.l 1c974 <loadNow>,d0
    e89a:	       move.l d0,-(sp)
    e89c:	       jsr 2fe <encodeFilename>
    e8a2:	       addq.l #4,sp
    e8a4:	       move.l d0,40(sp)
    FreeVec(loadNow);
    e8a8:	       move.l 1c974 <loadNow>,36(sp)
    e8b0:	       move.l 1c9a8 <SysBase>,d0
    e8b6:	       movea.l d0,a6
    e8b8:	       movea.l 36(sp),a1
    e8bc:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    e8c0:	       move.l 40(sp),-(sp)
    e8c4:	       jsr e308 <failSecurityCheck>
    e8ca:	       addq.l #4,sp
    e8cc:	       tst.w d0
    e8ce:	   /-- beq.s e8d6 <builtIn_fileExists+0x72>
    e8d0:	   |   moveq #1,d0
    e8d2:	/--|-- bra.w e976 <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    e8d6:	|  \-> move.l 40(sp),32(sp)
    e8dc:	|      move.l #1005,28(sp)
    e8e4:	|      move.l 1c9b0 <DOSBase>,d0
    e8ea:	|      movea.l d0,a6
    e8ec:	|      move.l 32(sp),d1
    e8f0:	|      move.l 28(sp),d2
    e8f4:	|      jsr -30(a6)
    e8f8:	|      move.l d0,24(sp)
    e8fc:	|      move.l 24(sp),d0
    e900:	|      move.l d0,20(sp)
    if (!fp) {        
    e904:	|  /-- bne.s e914 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    e906:	|  |   pea 19826 <PutChar+0x1b2a>
    e90c:	|  |   jsr 17232 <KPrintF>
    e912:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    e914:	|  \-> tst.l 20(sp)
    e918:	|      sne d0
    e91a:	|      neg.b d0
    e91c:	|      moveq #0,d1
    e91e:	|      move.b d0,d1
    e920:	|      moveq #28,d0
    e922:	|      add.l 52(sp),d0
    e926:	|      move.l d1,-(sp)
    e928:	|      pea 1 <_start+0x1>
    e92c:	|      move.l d0,-(sp)
    e92e:	|      jsr 150c4 <setVariable>
    e934:	|      lea 12(sp),sp
    if (fp) Close(fp);
    e938:	|      tst.l 20(sp)
    e93c:	|  /-- beq.s e958 <builtIn_fileExists+0xf4>
    e93e:	|  |   move.l 20(sp),16(sp)
    e944:	|  |   move.l 1c9b0 <DOSBase>,d0
    e94a:	|  |   movea.l d0,a6
    e94c:	|  |   move.l 16(sp),d1
    e950:	|  |   jsr -36(a6)
    e954:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    e958:	|  \-> move.l 40(sp),8(sp)
    e95e:	|      move.l 1c9a8 <SysBase>,d0
    e964:	|      movea.l d0,a6
    e966:	|      movea.l 8(sp),a1
    e96a:	|      jsr -690(a6)
    loadNow = NULL;
    e96e:	|      clr.l 1c974 <loadNow>
    return BR_CONTINUE;
    e974:	|      moveq #2,d0
}
    e976:	\----> move.l (sp)+,d2
    e978:	       movea.l (sp)+,a6
    e97a:	       lea 36(sp),sp
    e97e:	       rts

0000e980 <builtIn_loadGame>:

builtIn(loadGame)
{
    e980:	       lea -36(sp),sp
    e984:	       move.l a6,-(sp)
    e986:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    e988:	       movea.l 52(sp),a0
    e98c:	       move.l 24(a0),d0
    e990:	       move.l d0,-(sp)
    e992:	       jsr 14da8 <getTextFromAnyVar>
    e998:	       addq.l #4,sp
    e99a:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    e99e:	       moveq #24,d0
    e9a0:	       add.l 52(sp),d0
    e9a4:	       move.l d0,-(sp)
    e9a6:	       jsr 15156 <trimStack>
    e9ac:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    e9ae:	       move.l 40(sp),-(sp)
    e9b2:	       jsr 2fe <encodeFilename>
    e9b8:	       addq.l #4,sp
    e9ba:	       move.l d0,1c974 <loadNow>
    FreeVec(aaaaa);
    e9c0:	       move.l 40(sp),36(sp)
    e9c6:	       move.l 1c9a8 <SysBase>,d0
    e9cc:	       movea.l d0,a6
    e9ce:	       movea.l 36(sp),a1
    e9d2:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    e9d6:	       move.l 1c974 <loadNow>,d0
    e9dc:	       move.l d0,-(sp)
    e9de:	       jsr e308 <failSecurityCheck>
    e9e4:	       addq.l #4,sp
    e9e6:	       tst.w d0
    e9e8:	   /-- beq.s e9ee <builtIn_loadGame+0x6e>
    e9ea:	   |   moveq #1,d0
    e9ec:	/--|-- bra.s ea5e <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    e9ee:	|  \-> move.l 1c974 <loadNow>,32(sp)
    e9f6:	|      move.l #1005,28(sp)
    e9fe:	|      move.l 1c9b0 <DOSBase>,d0
    ea04:	|      movea.l d0,a6
    ea06:	|      move.l 32(sp),d1
    ea0a:	|      move.l 28(sp),d2
    ea0e:	|      jsr -30(a6)
    ea12:	|      move.l d0,24(sp)
    ea16:	|      move.l 24(sp),d0
    ea1a:	|      move.l d0,20(sp)
    if (fp) {
    ea1e:	|  /-- beq.s ea3e <builtIn_loadGame+0xbe>
        Close(fp);
    ea20:	|  |   move.l 20(sp),12(sp)
    ea26:	|  |   move.l 1c9b0 <DOSBase>,d0
    ea2c:	|  |   movea.l d0,a6
    ea2e:	|  |   move.l 12(sp),d1
    ea32:	|  |   jsr -36(a6)
    ea36:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    ea3a:	|  |   moveq #0,d0
    ea3c:	+--|-- bra.s ea5e <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    ea3e:	|  \-> move.l 1c974 <loadNow>,16(sp)
    ea46:	|      move.l 1c9a8 <SysBase>,d0
    ea4c:	|      movea.l d0,a6
    ea4e:	|      movea.l 16(sp),a1
    ea52:	|      jsr -690(a6)
    loadNow = NULL;
    ea56:	|      clr.l 1c974 <loadNow>
    return BR_CONTINUE;
    ea5c:	|      moveq #2,d0
}
    ea5e:	\----> move.l (sp)+,d2
    ea60:	       movea.l (sp)+,a6
    ea62:	       lea 36(sp),sp
    ea66:	       rts

0000ea68 <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    ea68:	move.l 1ca48 <sceneHeight>,d0
    ea6e:	move.l d0,d1
    ea70:	move.l 1ca44 <sceneWidth>,d0
    ea76:	move.l d1,-(sp)
    ea78:	move.l d0,-(sp)
    ea7a:	clr.l -(sp)
    ea7c:	clr.l -(sp)
    ea7e:	jsr d1fc <blankScreen>
    ea84:	lea 16(sp),sp
	return BR_CONTINUE;
    ea88:	moveq #2,d0
}
    ea8a:	rts

0000ea8c <builtIn_blankArea>:

builtIn(blankArea)
{
    ea8c:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ea90:	       movea.l 24(sp),a0
    ea94:	       move.l 24(a0),d0
    ea98:	       move.l d0,-(sp)
    ea9a:	       pea 1 <_start+0x1>
    ea9e:	       lea 8(sp),a0
    eaa2:	       move.l a0,-(sp)
    eaa4:	       jsr 147d2 <getValueType>
    eaaa:	       lea 12(sp),sp
    eaae:	       tst.w d0
    eab0:	   /-- bne.s eab8 <builtIn_blankArea+0x2c>
    eab2:	   |   moveq #1,d0
    eab4:	/--|-- bra.w eb8e <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eab8:	|  \-> moveq #24,d0
    eaba:	|      add.l 24(sp),d0
    eabe:	|      move.l d0,-(sp)
    eac0:	|      jsr 15156 <trimStack>
    eac6:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    eac8:	|      movea.l 24(sp),a0
    eacc:	|      move.l 24(a0),d0
    ead0:	|      move.l d0,-(sp)
    ead2:	|      pea 1 <_start+0x1>
    ead6:	|      lea 12(sp),a0
    eada:	|      move.l a0,-(sp)
    eadc:	|      jsr 147d2 <getValueType>
    eae2:	|      lea 12(sp),sp
    eae6:	|      tst.w d0
    eae8:	|  /-- bne.s eaf0 <builtIn_blankArea+0x64>
    eaea:	|  |   moveq #1,d0
    eaec:	+--|-- bra.w eb8e <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eaf0:	|  \-> moveq #24,d0
    eaf2:	|      add.l 24(sp),d0
    eaf6:	|      move.l d0,-(sp)
    eaf8:	|      jsr 15156 <trimStack>
    eafe:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    eb00:	|      movea.l 24(sp),a0
    eb04:	|      move.l 24(a0),d0
    eb08:	|      move.l d0,-(sp)
    eb0a:	|      pea 1 <_start+0x1>
    eb0e:	|      moveq #16,d0
    eb10:	|      add.l sp,d0
    eb12:	|      move.l d0,-(sp)
    eb14:	|      jsr 147d2 <getValueType>
    eb1a:	|      lea 12(sp),sp
    eb1e:	|      tst.w d0
    eb20:	|  /-- bne.s eb26 <builtIn_blankArea+0x9a>
    eb22:	|  |   moveq #1,d0
    eb24:	+--|-- bra.s eb8e <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eb26:	|  \-> moveq #24,d0
    eb28:	|      add.l 24(sp),d0
    eb2c:	|      move.l d0,-(sp)
    eb2e:	|      jsr 15156 <trimStack>
    eb34:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    eb36:	|      movea.l 24(sp),a0
    eb3a:	|      move.l 24(a0),d0
    eb3e:	|      move.l d0,-(sp)
    eb40:	|      pea 1 <_start+0x1>
    eb44:	|      moveq #20,d0
    eb46:	|      add.l sp,d0
    eb48:	|      move.l d0,-(sp)
    eb4a:	|      jsr 147d2 <getValueType>
    eb50:	|      lea 12(sp),sp
    eb54:	|      tst.w d0
    eb56:	|  /-- bne.s eb5c <builtIn_blankArea+0xd0>
    eb58:	|  |   moveq #1,d0
    eb5a:	+--|-- bra.s eb8e <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eb5c:	|  \-> moveq #24,d0
    eb5e:	|      add.l 24(sp),d0
    eb62:	|      move.l d0,-(sp)
    eb64:	|      jsr 15156 <trimStack>
    eb6a:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    eb6c:	|      movea.l (sp),a1
    eb6e:	|      movea.l 4(sp),a0
    eb72:	|      move.l 8(sp),d1
    eb76:	|      move.l 12(sp),d0
    eb7a:	|      move.l a1,-(sp)
    eb7c:	|      move.l a0,-(sp)
    eb7e:	|      move.l d1,-(sp)
    eb80:	|      move.l d0,-(sp)
    eb82:	|      jsr d1fc <blankScreen>
    eb88:	|      lea 16(sp),sp
	return BR_CONTINUE;
    eb8c:	|      moveq #2,d0
}
    eb8e:	\----> lea 16(sp),sp
    eb92:	       rts

0000eb94 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    eb94:	jsr d210 <darkScreen>
	return BR_CONTINUE;
    eb9a:	moveq #2,d0
}
    eb9c:	rts

0000eb9e <builtIn_addOverlay>:

builtIn(addOverlay)
{
    eb9e:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eba2:	       movea.l 20(sp),a0
    eba6:	       move.l 24(a0),d0
    ebaa:	       move.l d0,-(sp)
    ebac:	       pea 1 <_start+0x1>
    ebb0:	       lea 8(sp),a0
    ebb4:	       move.l a0,-(sp)
    ebb6:	       jsr 147d2 <getValueType>
    ebbc:	       lea 12(sp),sp
    ebc0:	       tst.w d0
    ebc2:	   /-- bne.s ebca <builtIn_addOverlay+0x2c>
    ebc4:	   |   moveq #1,d0
    ebc6:	/--|-- bra.w ec62 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ebca:	|  \-> moveq #24,d0
    ebcc:	|      add.l 20(sp),d0
    ebd0:	|      move.l d0,-(sp)
    ebd2:	|      jsr 15156 <trimStack>
    ebd8:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ebda:	|      movea.l 20(sp),a0
    ebde:	|      move.l 24(a0),d0
    ebe2:	|      move.l d0,-(sp)
    ebe4:	|      pea 1 <_start+0x1>
    ebe8:	|      moveq #12,d0
    ebea:	|      add.l sp,d0
    ebec:	|      move.l d0,-(sp)
    ebee:	|      jsr 147d2 <getValueType>
    ebf4:	|      lea 12(sp),sp
    ebf8:	|      tst.w d0
    ebfa:	|  /-- bne.s ec00 <builtIn_addOverlay+0x62>
    ebfc:	|  |   moveq #1,d0
    ebfe:	+--|-- bra.s ec62 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ec00:	|  \-> moveq #24,d0
    ec02:	|      add.l 20(sp),d0
    ec06:	|      move.l d0,-(sp)
    ec08:	|      jsr 15156 <trimStack>
    ec0e:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ec10:	|      movea.l 20(sp),a0
    ec14:	|      move.l 24(a0),d0
    ec18:	|      move.l d0,-(sp)
    ec1a:	|      pea 5 <_start+0x5>
    ec1e:	|      moveq #16,d0
    ec20:	|      add.l sp,d0
    ec22:	|      move.l d0,-(sp)
    ec24:	|      jsr 147d2 <getValueType>
    ec2a:	|      lea 12(sp),sp
    ec2e:	|      tst.w d0
    ec30:	|  /-- bne.s ec36 <builtIn_addOverlay+0x98>
    ec32:	|  |   moveq #1,d0
    ec34:	+--|-- bra.s ec62 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ec36:	|  \-> moveq #24,d0
    ec38:	|      add.l 20(sp),d0
    ec3c:	|      move.l d0,-(sp)
    ec3e:	|      jsr 15156 <trimStack>
    ec44:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    ec46:	|      movea.l (sp),a0
    ec48:	|      move.l 4(sp),d1
    ec4c:	|      move.l 8(sp),d0
    ec50:	|      move.l a0,-(sp)
    ec52:	|      move.l d1,-(sp)
    ec54:	|      move.l d0,-(sp)
    ec56:	|      jsr d32e <loadBackDrop>
    ec5c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ec60:	|      moveq #2,d0
}
    ec62:	\----> lea 12(sp),sp
    ec66:	       rts

0000ec68 <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    ec68:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec6c:	       movea.l 20(sp),a0
    ec70:	       move.l 24(a0),d0
    ec74:	       move.l d0,-(sp)
    ec76:	       pea 1 <_start+0x1>
    ec7a:	       lea 8(sp),a0
    ec7e:	       move.l a0,-(sp)
    ec80:	       jsr 147d2 <getValueType>
    ec86:	       lea 12(sp),sp
    ec8a:	       tst.w d0
    ec8c:	   /-- bne.s ec94 <builtIn_mixOverlay+0x2c>
    ec8e:	   |   moveq #1,d0
    ec90:	/--|-- bra.w ed2c <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ec94:	|  \-> moveq #24,d0
    ec96:	|      add.l 20(sp),d0
    ec9a:	|      move.l d0,-(sp)
    ec9c:	|      jsr 15156 <trimStack>
    eca2:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eca4:	|      movea.l 20(sp),a0
    eca8:	|      move.l 24(a0),d0
    ecac:	|      move.l d0,-(sp)
    ecae:	|      pea 1 <_start+0x1>
    ecb2:	|      moveq #12,d0
    ecb4:	|      add.l sp,d0
    ecb6:	|      move.l d0,-(sp)
    ecb8:	|      jsr 147d2 <getValueType>
    ecbe:	|      lea 12(sp),sp
    ecc2:	|      tst.w d0
    ecc4:	|  /-- bne.s ecca <builtIn_mixOverlay+0x62>
    ecc6:	|  |   moveq #1,d0
    ecc8:	+--|-- bra.s ed2c <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ecca:	|  \-> moveq #24,d0
    eccc:	|      add.l 20(sp),d0
    ecd0:	|      move.l d0,-(sp)
    ecd2:	|      jsr 15156 <trimStack>
    ecd8:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ecda:	|      movea.l 20(sp),a0
    ecde:	|      move.l 24(a0),d0
    ece2:	|      move.l d0,-(sp)
    ece4:	|      pea 5 <_start+0x5>
    ece8:	|      moveq #16,d0
    ecea:	|      add.l sp,d0
    ecec:	|      move.l d0,-(sp)
    ecee:	|      jsr 147d2 <getValueType>
    ecf4:	|      lea 12(sp),sp
    ecf8:	|      tst.w d0
    ecfa:	|  /-- bne.s ed00 <builtIn_mixOverlay+0x98>
    ecfc:	|  |   moveq #1,d0
    ecfe:	+--|-- bra.s ed2c <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ed00:	|  \-> moveq #24,d0
    ed02:	|      add.l 20(sp),d0
    ed06:	|      move.l d0,-(sp)
    ed08:	|      jsr 15156 <trimStack>
    ed0e:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    ed10:	|      movea.l (sp),a0
    ed12:	|      move.l 4(sp),d1
    ed16:	|      move.l 8(sp),d0
    ed1a:	|      move.l a0,-(sp)
    ed1c:	|      move.l d1,-(sp)
    ed1e:	|      move.l d0,-(sp)
    ed20:	|      jsr d3a4 <mixBackDrop>
    ed26:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ed2a:	|      moveq #2,d0
}
    ed2c:	\----> lea 12(sp),sp
    ed30:	       rts

0000ed32 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    ed32:	       lea -12(sp),sp
	UNUSEDALL
	KPrintF("pasteimage: Started\n");
    ed36:	       pea 19844 <PutChar+0x1b48>
    ed3c:	       jsr 17232 <KPrintF>
    ed42:	       addq.l #4,sp
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed44:	       movea.l 20(sp),a0
    ed48:	       move.l 24(a0),d0
    ed4c:	       move.l d0,-(sp)
    ed4e:	       pea 1 <_start+0x1>
    ed52:	       lea 8(sp),a0
    ed56:	       move.l a0,-(sp)
    ed58:	       jsr 147d2 <getValueType>
    ed5e:	       lea 12(sp),sp
    ed62:	       tst.w d0
    ed64:	   /-- bne.s ed6c <builtIn_pasteImage+0x3a>
    ed66:	   |   moveq #1,d0
    ed68:	/--|-- bra.w ee0a <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    ed6c:	|  \-> moveq #24,d0
    ed6e:	|      add.l 20(sp),d0
    ed72:	|      move.l d0,-(sp)
    ed74:	|      jsr 15156 <trimStack>
    ed7a:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed7c:	|      movea.l 20(sp),a0
    ed80:	|      move.l 24(a0),d0
    ed84:	|      move.l d0,-(sp)
    ed86:	|      pea 1 <_start+0x1>
    ed8a:	|      moveq #12,d0
    ed8c:	|      add.l sp,d0
    ed8e:	|      move.l d0,-(sp)
    ed90:	|      jsr 147d2 <getValueType>
    ed96:	|      lea 12(sp),sp
    ed9a:	|      tst.w d0
    ed9c:	|  /-- bne.s eda2 <builtIn_pasteImage+0x70>
    ed9e:	|  |   moveq #1,d0
    eda0:	+--|-- bra.s ee0a <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    eda2:	|  \-> moveq #24,d0
    eda4:	|      add.l 20(sp),d0
    eda8:	|      move.l d0,-(sp)
    edaa:	|      jsr 15156 <trimStack>
    edb0:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    edb2:	|      movea.l 20(sp),a0
    edb6:	|      move.l 24(a0),d0
    edba:	|      move.l d0,-(sp)
    edbc:	|      jsr 14caa <getAnimationFromVar>
    edc2:	|      addq.l #4,sp
    edc4:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    edc8:	|      moveq #24,d0
    edca:	|      add.l 20(sp),d0
    edce:	|      move.l d0,-(sp)
    edd0:	|      jsr 15156 <trimStack>
    edd6:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    edd8:	|      tst.l 8(sp)
    eddc:	|  /-- bne.s ede2 <builtIn_pasteImage+0xb0>
    edde:	|  |   moveq #2,d0
    ede0:	+--|-- bra.s ee0a <builtIn_pasteImage+0xd8>

	pasteCursor (x, y, pp);
    ede2:	|  \-> move.l (sp),d1
    ede4:	|      move.l 4(sp),d0
    ede8:	|      move.l 8(sp),-(sp)
    edec:	|      move.l d1,-(sp)
    edee:	|      move.l d0,-(sp)
    edf0:	|      jsr d94 <pasteCursor>
    edf6:	|      lea 12(sp),sp
	KPrintF("pasteimage: Finished\n");
    edfa:	|      pea 19859 <PutChar+0x1b5d>
    ee00:	|      jsr 17232 <KPrintF>
    ee06:	|      addq.l #4,sp
	return BR_CONTINUE;	
    ee08:	|      moveq #2,d0
}
    ee0a:	\----> lea 12(sp),sp
    ee0e:	       rts

0000ee10 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    ee10:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ee12:	       movea.l 16(sp),a0
    ee16:	       move.l 24(a0),d0
    ee1a:	       move.l d0,-(sp)
    ee1c:	       pea 1 <_start+0x1>
    ee20:	       move.l sp,d0
    ee22:	       addq.l #8,d0
    ee24:	       move.l d0,-(sp)
    ee26:	       jsr 147d2 <getValueType>
    ee2c:	       lea 12(sp),sp
    ee30:	       tst.w d0
    ee32:	   /-- bne.s ee3a <builtIn_setSceneDimensions+0x2a>
    ee34:	   |   moveq #1,d0
    ee36:	/--|-- bra.w eec2 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    ee3a:	|  \-> moveq #24,d0
    ee3c:	|      add.l 16(sp),d0
    ee40:	|      move.l d0,-(sp)
    ee42:	|      jsr 15156 <trimStack>
    ee48:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ee4a:	|      movea.l 16(sp),a0
    ee4e:	|      move.l 24(a0),d0
    ee52:	|      move.l d0,-(sp)
    ee54:	|      pea 1 <_start+0x1>
    ee58:	|      moveq #12,d0
    ee5a:	|      add.l sp,d0
    ee5c:	|      move.l d0,-(sp)
    ee5e:	|      jsr 147d2 <getValueType>
    ee64:	|      lea 12(sp),sp
    ee68:	|      tst.w d0
    ee6a:	|  /-- bne.s ee70 <builtIn_setSceneDimensions+0x60>
    ee6c:	|  |   moveq #1,d0
    ee6e:	+--|-- bra.s eec2 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    ee70:	|  \-> moveq #24,d0
    ee72:	|      add.l 16(sp),d0
    ee76:	|      move.l d0,-(sp)
    ee78:	|      jsr 15156 <trimStack>
    ee7e:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    ee80:	|      move.l (sp),d1
    ee82:	|      move.l 4(sp),d0
    ee86:	|      move.l d1,-(sp)
    ee88:	|      move.l d0,-(sp)
    ee8a:	|      jsr d3fa <resizeBackdrop>
    ee90:	|      addq.l #8,sp
    ee92:	|      tst.w d0
    ee94:	|  /-- beq.s eeb2 <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    ee96:	|  |   move.l (sp),d1
    ee98:	|  |   move.l 4(sp),d0
    ee9c:	|  |   move.l d1,-(sp)
    ee9e:	|  |   move.l d0,-(sp)
    eea0:	|  |   clr.l -(sp)
    eea2:	|  |   clr.l -(sp)
    eea4:	|  |   jsr d1fc <blankScreen>
    eeaa:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    eeae:	|  |   moveq #2,d0
    eeb0:	+--|-- bra.s eec2 <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    eeb2:	|  \-> pea 1986f <PutChar+0x1b73>
    eeb8:	|      jsr 17232 <KPrintF>
    eebe:	|      addq.l #4,sp
	return BR_ERROR;
    eec0:	|      moveq #1,d0
}
    eec2:	\----> addq.l #8,sp
    eec4:	       rts

0000eec6 <builtIn_aimCamera>:

builtIn(aimCamera)
{
    eec6:	          move.l d3,-(sp)
    eec8:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eeca:	          movea.l 16(sp),a0
    eece:	          move.l 24(a0),d0
    eed2:	          move.l d0,-(sp)
    eed4:	          pea 1 <_start+0x1>
    eed8:	          pea 1ca66 <cameraY>
    eede:	          jsr 147d2 <getValueType>
    eee4:	          lea 12(sp),sp
    eee8:	          tst.w d0
    eeea:	      /-- bne.s eef2 <builtIn_aimCamera+0x2c>
    eeec:	      |   moveq #1,d0
    eeee:	/-----|-- bra.w f174 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    eef2:	|     \-> moveq #24,d0
    eef4:	|         add.l 16(sp),d0
    eef8:	|         move.l d0,-(sp)
    eefa:	|         jsr 15156 <trimStack>
    ef00:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ef02:	|         movea.l 16(sp),a0
    ef06:	|         move.l 24(a0),d0
    ef0a:	|         move.l d0,-(sp)
    ef0c:	|         pea 1 <_start+0x1>
    ef10:	|         pea 1ca62 <cameraX>
    ef16:	|         jsr 147d2 <getValueType>
    ef1c:	|         lea 12(sp),sp
    ef20:	|         tst.w d0
    ef22:	|     /-- bne.s ef2a <builtIn_aimCamera+0x64>
    ef24:	|     |   moveq #1,d0
    ef26:	+-----|-- bra.w f174 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    ef2a:	|     \-> moveq #24,d0
    ef2c:	|         add.l 16(sp),d0
    ef30:	|         move.l d0,-(sp)
    ef32:	|         jsr 15156 <trimStack>
    ef38:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    ef3a:	|         move.l 1ca62 <cameraX>,d0
    ef40:	|         move.l d0,-(sp)
    ef42:	|         jsr 17664 <__floatsisf>
    ef48:	|         addq.l #4,sp
    ef4a:	|         move.l d0,d2
    ef4c:	|         move.l 1c8fc <winWidth>,d0
    ef52:	|         lsr.l #1,d0
    ef54:	|         move.l d0,-(sp)
    ef56:	|         jsr 1768c <__floatunsisf>
    ef5c:	|         addq.l #4,sp
    ef5e:	|         move.l d0,d1
    ef60:	|         move.l 1c346 <cameraZoom>,d0
    ef66:	|         move.l d0,-(sp)
    ef68:	|         move.l d1,-(sp)
    ef6a:	|         jsr 1751a <__divsf3>
    ef70:	|         addq.l #8,sp
    ef72:	|         move.l d0,-(sp)
    ef74:	|         move.l d2,-(sp)
    ef76:	|         jsr 17958 <__subsf3>
    ef7c:	|         addq.l #8,sp
    ef7e:	|         move.l d0,-(sp)
    ef80:	|         jsr 175fc <__fixsfsi>
    ef86:	|         addq.l #4,sp
    ef88:	|         move.l d0,1ca62 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    ef8e:	|         move.l 1ca66 <cameraY>,d0
    ef94:	|         move.l d0,-(sp)
    ef96:	|         jsr 17664 <__floatsisf>
    ef9c:	|         addq.l #4,sp
    ef9e:	|         move.l d0,d2
    efa0:	|         move.l 1c900 <winHeight>,d0
    efa6:	|         lsr.l #1,d0
    efa8:	|         move.l d0,-(sp)
    efaa:	|         jsr 1768c <__floatunsisf>
    efb0:	|         addq.l #4,sp
    efb2:	|         move.l d0,d1
    efb4:	|         move.l 1c346 <cameraZoom>,d0
    efba:	|         move.l d0,-(sp)
    efbc:	|         move.l d1,-(sp)
    efbe:	|         jsr 1751a <__divsf3>
    efc4:	|         addq.l #8,sp
    efc6:	|         move.l d0,-(sp)
    efc8:	|         move.l d2,-(sp)
    efca:	|         jsr 17958 <__subsf3>
    efd0:	|         addq.l #8,sp
    efd2:	|         move.l d0,-(sp)
    efd4:	|         jsr 175fc <__fixsfsi>
    efda:	|         addq.l #4,sp
    efdc:	|         move.l d0,1ca66 <cameraY>

	if (cameraX < 0) cameraX = 0;
    efe2:	|         move.l 1ca62 <cameraX>,d0
    efe8:	|     /-- bpl.s eff4 <builtIn_aimCamera+0x12e>
    efea:	|     |   clr.l 1ca62 <cameraX>
    eff0:	|  /--|-- bra.w f0aa <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    eff4:	|  |  \-> move.l 1ca62 <cameraX>,d0
    effa:	|  |      move.l d0,-(sp)
    effc:	|  |      jsr 17664 <__floatsisf>
    f002:	|  |      addq.l #4,sp
    f004:	|  |      move.l d0,d2
    f006:	|  |      move.l 1ca44 <sceneWidth>,d0
    f00c:	|  |      move.l d0,-(sp)
    f00e:	|  |      jsr 1768c <__floatunsisf>
    f014:	|  |      addq.l #4,sp
    f016:	|  |      move.l d0,d3
    f018:	|  |      move.l 1c8fc <winWidth>,d0
    f01e:	|  |      move.l d0,-(sp)
    f020:	|  |      jsr 1768c <__floatunsisf>
    f026:	|  |      addq.l #4,sp
    f028:	|  |      move.l d0,d1
    f02a:	|  |      move.l 1c346 <cameraZoom>,d0
    f030:	|  |      move.l d0,-(sp)
    f032:	|  |      move.l d1,-(sp)
    f034:	|  |      jsr 1751a <__divsf3>
    f03a:	|  |      addq.l #8,sp
    f03c:	|  |      move.l d0,-(sp)
    f03e:	|  |      move.l d3,-(sp)
    f040:	|  |      jsr 17958 <__subsf3>
    f046:	|  |      addq.l #8,sp
    f048:	|  |      move.l d0,-(sp)
    f04a:	|  |      move.l d2,-(sp)
    f04c:	|  |      jsr 177d0 <__gtsf2>
    f052:	|  |      addq.l #8,sp
    f054:	|  |      tst.l d0
    f056:	|  +----- ble.s f0aa <builtIn_aimCamera+0x1e4>
    f058:	|  |      move.l 1ca44 <sceneWidth>,d0
    f05e:	|  |      move.l d0,-(sp)
    f060:	|  |      jsr 1768c <__floatunsisf>
    f066:	|  |      addq.l #4,sp
    f068:	|  |      move.l d0,d2
    f06a:	|  |      move.l 1c8fc <winWidth>,d0
    f070:	|  |      move.l d0,-(sp)
    f072:	|  |      jsr 1768c <__floatunsisf>
    f078:	|  |      addq.l #4,sp
    f07a:	|  |      move.l d0,d1
    f07c:	|  |      move.l 1c346 <cameraZoom>,d0
    f082:	|  |      move.l d0,-(sp)
    f084:	|  |      move.l d1,-(sp)
    f086:	|  |      jsr 1751a <__divsf3>
    f08c:	|  |      addq.l #8,sp
    f08e:	|  |      move.l d0,-(sp)
    f090:	|  |      move.l d2,-(sp)
    f092:	|  |      jsr 17958 <__subsf3>
    f098:	|  |      addq.l #8,sp
    f09a:	|  |      move.l d0,-(sp)
    f09c:	|  |      jsr 175fc <__fixsfsi>
    f0a2:	|  |      addq.l #4,sp
    f0a4:	|  |      move.l d0,1ca62 <cameraX>
	if (cameraY < 0) cameraY = 0;
    f0aa:	|  \----> move.l 1ca66 <cameraY>,d0
    f0b0:	|     /-- bpl.s f0bc <builtIn_aimCamera+0x1f6>
    f0b2:	|     |   clr.l 1ca66 <cameraY>
    f0b8:	|  /--|-- bra.w f172 <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    f0bc:	|  |  \-> move.l 1ca66 <cameraY>,d0
    f0c2:	|  |      move.l d0,-(sp)
    f0c4:	|  |      jsr 17664 <__floatsisf>
    f0ca:	|  |      addq.l #4,sp
    f0cc:	|  |      move.l d0,d2
    f0ce:	|  |      move.l 1ca48 <sceneHeight>,d0
    f0d4:	|  |      move.l d0,-(sp)
    f0d6:	|  |      jsr 1768c <__floatunsisf>
    f0dc:	|  |      addq.l #4,sp
    f0de:	|  |      move.l d0,d3
    f0e0:	|  |      move.l 1c900 <winHeight>,d0
    f0e6:	|  |      move.l d0,-(sp)
    f0e8:	|  |      jsr 1768c <__floatunsisf>
    f0ee:	|  |      addq.l #4,sp
    f0f0:	|  |      move.l d0,d1
    f0f2:	|  |      move.l 1c346 <cameraZoom>,d0
    f0f8:	|  |      move.l d0,-(sp)
    f0fa:	|  |      move.l d1,-(sp)
    f0fc:	|  |      jsr 1751a <__divsf3>
    f102:	|  |      addq.l #8,sp
    f104:	|  |      move.l d0,-(sp)
    f106:	|  |      move.l d3,-(sp)
    f108:	|  |      jsr 17958 <__subsf3>
    f10e:	|  |      addq.l #8,sp
    f110:	|  |      move.l d0,-(sp)
    f112:	|  |      move.l d2,-(sp)
    f114:	|  |      jsr 177d0 <__gtsf2>
    f11a:	|  |      addq.l #8,sp
    f11c:	|  |      tst.l d0
    f11e:	|  +----- ble.s f172 <builtIn_aimCamera+0x2ac>
    f120:	|  |      move.l 1ca48 <sceneHeight>,d0
    f126:	|  |      move.l d0,-(sp)
    f128:	|  |      jsr 1768c <__floatunsisf>
    f12e:	|  |      addq.l #4,sp
    f130:	|  |      move.l d0,d2
    f132:	|  |      move.l 1c900 <winHeight>,d0
    f138:	|  |      move.l d0,-(sp)
    f13a:	|  |      jsr 1768c <__floatunsisf>
    f140:	|  |      addq.l #4,sp
    f142:	|  |      move.l d0,d1
    f144:	|  |      move.l 1c346 <cameraZoom>,d0
    f14a:	|  |      move.l d0,-(sp)
    f14c:	|  |      move.l d1,-(sp)
    f14e:	|  |      jsr 1751a <__divsf3>
    f154:	|  |      addq.l #8,sp
    f156:	|  |      move.l d0,-(sp)
    f158:	|  |      move.l d2,-(sp)
    f15a:	|  |      jsr 17958 <__subsf3>
    f160:	|  |      addq.l #8,sp
    f162:	|  |      move.l d0,-(sp)
    f164:	|  |      jsr 175fc <__fixsfsi>
    f16a:	|  |      addq.l #4,sp
    f16c:	|  |      move.l d0,1ca66 <cameraY>
	return BR_CONTINUE;
    f172:	|  \----> moveq #2,d0
}
    f174:	\-------> move.l (sp)+,d2
    f176:	          move.l (sp)+,d3
    f178:	          rts

0000f17a <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    f17a:	       subq.l #4,sp
    f17c:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f17e:	       movea.l 16(sp),a0
    f182:	       move.l 24(a0),d0
    f186:	       move.l d0,-(sp)
    f188:	       pea 1 <_start+0x1>
    f18c:	       moveq #12,d0
    f18e:	       add.l sp,d0
    f190:	       move.l d0,-(sp)
    f192:	       jsr 147d2 <getValueType>
    f198:	       lea 12(sp),sp
    f19c:	       tst.w d0
    f19e:	   /-- bne.s f1a6 <builtIn_zoomCamera+0x2c>
    f1a0:	   |   moveq #1,d0
    f1a2:	/--|-- bra.w f3a0 <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    f1a6:	|  \-> moveq #24,d0
    f1a8:	|      add.l 16(sp),d0
    f1ac:	|      move.l d0,-(sp)
    f1ae:	|      jsr 15156 <trimStack>
    f1b4:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    f1b6:	|      move.l 1c964 <input+0xa>,d0
    f1bc:	|      move.l d0,-(sp)
    f1be:	|      jsr 17664 <__floatsisf>
    f1c4:	|      addq.l #4,sp
    f1c6:	|      move.l d0,d1
    f1c8:	|      move.l 1c346 <cameraZoom>,d0
    f1ce:	|      move.l d0,-(sp)
    f1d0:	|      move.l d1,-(sp)
    f1d2:	|      jsr 17716 <__mulsf3>
    f1d8:	|      addq.l #8,sp
    f1da:	|      move.l d0,-(sp)
    f1dc:	|      jsr 175fc <__fixsfsi>
    f1e2:	|      addq.l #4,sp
    f1e4:	|      move.l d0,1c964 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    f1ea:	|      move.l 1c968 <input+0xe>,d0
    f1f0:	|      move.l d0,-(sp)
    f1f2:	|      jsr 17664 <__floatsisf>
    f1f8:	|      addq.l #4,sp
    f1fa:	|      move.l d0,d1
    f1fc:	|      move.l 1c346 <cameraZoom>,d0
    f202:	|      move.l d0,-(sp)
    f204:	|      move.l d1,-(sp)
    f206:	|      jsr 17716 <__mulsf3>
    f20c:	|      addq.l #8,sp
    f20e:	|      move.l d0,-(sp)
    f210:	|      jsr 175fc <__fixsfsi>
    f216:	|      addq.l #4,sp
    f218:	|      move.l d0,1c968 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    f21e:	|      move.l 4(sp),d0
    f222:	|      move.l d0,-(sp)
    f224:	|      jsr 17664 <__floatsisf>
    f22a:	|      addq.l #4,sp
    f22c:	|      move.l #1008981770,-(sp)
    f232:	|      move.l d0,-(sp)
    f234:	|      jsr 17716 <__mulsf3>
    f23a:	|      addq.l #8,sp
    f23c:	|      move.l d0,1c346 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    f242:	|      move.l 1c8fc <winWidth>,d0
    f248:	|      move.l d0,-(sp)
    f24a:	|      jsr 1768c <__floatunsisf>
    f250:	|      addq.l #4,sp
    f252:	|      move.l d0,d1
    f254:	|      move.l 1c346 <cameraZoom>,d0
    f25a:	|      move.l d0,-(sp)
    f25c:	|      move.l d1,-(sp)
    f25e:	|      jsr 1751a <__divsf3>
    f264:	|      addq.l #8,sp
    f266:	|      move.l d0,d2
    f268:	|      move.l 1ca44 <sceneWidth>,d0
    f26e:	|      move.l d0,-(sp)
    f270:	|      jsr 1768c <__floatunsisf>
    f276:	|      addq.l #4,sp
    f278:	|      move.l d0,-(sp)
    f27a:	|      move.l d2,-(sp)
    f27c:	|      jsr 177d0 <__gtsf2>
    f282:	|      addq.l #8,sp
    f284:	|      tst.l d0
    f286:	|  /-- ble.s f2bc <builtIn_zoomCamera+0x142>
    f288:	|  |   move.l 1c8fc <winWidth>,d0
    f28e:	|  |   move.l d0,-(sp)
    f290:	|  |   jsr 1768c <__floatunsisf>
    f296:	|  |   addq.l #4,sp
    f298:	|  |   move.l d0,d2
    f29a:	|  |   move.l 1ca44 <sceneWidth>,d0
    f2a0:	|  |   move.l d0,-(sp)
    f2a2:	|  |   jsr 1768c <__floatunsisf>
    f2a8:	|  |   addq.l #4,sp
    f2aa:	|  |   move.l d0,-(sp)
    f2ac:	|  |   move.l d2,-(sp)
    f2ae:	|  |   jsr 1751a <__divsf3>
    f2b4:	|  |   addq.l #8,sp
    f2b6:	|  |   move.l d0,1c346 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    f2bc:	|  \-> move.l 1c900 <winHeight>,d0
    f2c2:	|      move.l d0,-(sp)
    f2c4:	|      jsr 1768c <__floatunsisf>
    f2ca:	|      addq.l #4,sp
    f2cc:	|      move.l d0,d1
    f2ce:	|      move.l 1c346 <cameraZoom>,d0
    f2d4:	|      move.l d0,-(sp)
    f2d6:	|      move.l d1,-(sp)
    f2d8:	|      jsr 1751a <__divsf3>
    f2de:	|      addq.l #8,sp
    f2e0:	|      move.l d0,d2
    f2e2:	|      move.l 1ca48 <sceneHeight>,d0
    f2e8:	|      move.l d0,-(sp)
    f2ea:	|      jsr 1768c <__floatunsisf>
    f2f0:	|      addq.l #4,sp
    f2f2:	|      move.l d0,-(sp)
    f2f4:	|      move.l d2,-(sp)
    f2f6:	|      jsr 177d0 <__gtsf2>
    f2fc:	|      addq.l #8,sp
    f2fe:	|      tst.l d0
    f300:	|  /-- ble.s f336 <builtIn_zoomCamera+0x1bc>
    f302:	|  |   move.l 1c900 <winHeight>,d0
    f308:	|  |   move.l d0,-(sp)
    f30a:	|  |   jsr 1768c <__floatunsisf>
    f310:	|  |   addq.l #4,sp
    f312:	|  |   move.l d0,d2
    f314:	|  |   move.l 1ca48 <sceneHeight>,d0
    f31a:	|  |   move.l d0,-(sp)
    f31c:	|  |   jsr 1768c <__floatunsisf>
    f322:	|  |   addq.l #4,sp
    f324:	|  |   move.l d0,-(sp)
    f326:	|  |   move.l d2,-(sp)
    f328:	|  |   jsr 1751a <__divsf3>
    f32e:	|  |   addq.l #8,sp
    f330:	|  |   move.l d0,1c346 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    f336:	|  \-> move.l 1c964 <input+0xa>,d0
    f33c:	|      move.l d0,-(sp)
    f33e:	|      jsr 17664 <__floatsisf>
    f344:	|      addq.l #4,sp
    f346:	|      move.l d0,d1
    f348:	|      move.l 1c346 <cameraZoom>,d0
    f34e:	|      move.l d0,-(sp)
    f350:	|      move.l d1,-(sp)
    f352:	|      jsr 1751a <__divsf3>
    f358:	|      addq.l #8,sp
    f35a:	|      move.l d0,-(sp)
    f35c:	|      jsr 175fc <__fixsfsi>
    f362:	|      addq.l #4,sp
    f364:	|      move.l d0,1c964 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    f36a:	|      move.l 1c968 <input+0xe>,d0
    f370:	|      move.l d0,-(sp)
    f372:	|      jsr 17664 <__floatsisf>
    f378:	|      addq.l #4,sp
    f37a:	|      move.l d0,d1
    f37c:	|      move.l 1c346 <cameraZoom>,d0
    f382:	|      move.l d0,-(sp)
    f384:	|      move.l d1,-(sp)
    f386:	|      jsr 1751a <__divsf3>
    f38c:	|      addq.l #8,sp
    f38e:	|      move.l d0,-(sp)
    f390:	|      jsr 175fc <__fixsfsi>
    f396:	|      addq.l #4,sp
    f398:	|      move.l d0,1c968 <input+0xe>

	return BR_CONTINUE;
    f39e:	|      moveq #2,d0
}
    f3a0:	\----> move.l (sp)+,d2
    f3a2:	       addq.l #4,sp
    f3a4:	       rts

0000f3a6 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    f3a6:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    f3a8:	             tst.l 8(sp)
    f3ac:	         /-- bne.s f3c0 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    f3ae:	         |   pea 19894 <PutChar+0x1b98>
    f3b4:	         |   jsr 17232 <KPrintF>
    f3ba:	         |   addq.l #4,sp
		return BR_ERROR;
    f3bc:	         |   moveq #1,d0
    f3be:	/--------|-- bra.s f420 <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    f3c0:	|        \-> jsr 15df2 <rand>
    f3c6:	|            move.l d0,d1
    f3c8:	|            move.l 8(sp),d0
    f3cc:	|            move.l d0,-(sp)
    f3ce:	|            move.l d1,-(sp)
    f3d0:	|            jsr 17cc0 <__umodsi3>
    f3d6:	|            addq.l #8,sp
    f3d8:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    f3da:	|     /----- bra.s f40e <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    f3dc:	|  /--|----> move.l (sp),d0
    f3de:	|  |  |      cmp.l 8(sp),d0
    f3e2:	|  |  |  /-- bne.s f3fe <builtIn_pickOne+0x58>
    f3e4:	|  |  |  |   moveq #28,d0
    f3e6:	|  |  |  |   add.l 12(sp),d0
    f3ea:	|  |  |  |   movea.l 12(sp),a0
    f3ee:	|  |  |  |   move.l 24(a0),d1
    f3f2:	|  |  |  |   move.l d0,-(sp)
    f3f4:	|  |  |  |   move.l d1,-(sp)
    f3f6:	|  |  |  |   jsr 14c8c <copyVariable>
    f3fc:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    f3fe:	|  |  |  \-> moveq #24,d0
    f400:	|  |  |      add.l 12(sp),d0
    f404:	|  |  |      move.l d0,-(sp)
    f406:	|  |  |      jsr 15156 <trimStack>
    f40c:	|  |  |      addq.l #4,sp
	while (numParams --) {
    f40e:	|  |  \----> move.l 8(sp),d0
    f412:	|  |         move.l d0,d1
    f414:	|  |         subq.l #1,d1
    f416:	|  |         move.l d1,8(sp)
    f41a:	|  |         tst.l d0
    f41c:	|  \-------- bne.s f3dc <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    f41e:	|            moveq #2,d0
}
    f420:	\----------> addq.l #4,sp
    f422:	             rts

0000f424 <builtIn_substring>:

builtIn(substring)
{
    f424:	       lea -40(sp),sp
    f428:	       move.l a6,-(sp)
    f42a:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f42c:	       movea.l 56(sp),a0
    f430:	       move.l 24(a0),d0
    f434:	       move.l d0,-(sp)
    f436:	       pea 1 <_start+0x1>
    f43a:	       lea 16(sp),a0
    f43e:	       move.l a0,-(sp)
    f440:	       jsr 147d2 <getValueType>
    f446:	       lea 12(sp),sp
    f44a:	       tst.w d0
    f44c:	   /-- bne.s f454 <builtIn_substring+0x30>
    f44e:	   |   moveq #1,d0
    f450:	/--|-- bra.w f5cc <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f454:	|  \-> moveq #24,d0
    f456:	|      add.l 56(sp),d0
    f45a:	|      move.l d0,-(sp)
    f45c:	|      jsr 15156 <trimStack>
    f462:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f464:	|      movea.l 56(sp),a0
    f468:	|      move.l 24(a0),d0
    f46c:	|      move.l d0,-(sp)
    f46e:	|      pea 1 <_start+0x1>
    f472:	|      lea 20(sp),a0
    f476:	|      move.l a0,-(sp)
    f478:	|      jsr 147d2 <getValueType>
    f47e:	|      lea 12(sp),sp
    f482:	|      tst.w d0
    f484:	|  /-- bne.s f48c <builtIn_substring+0x68>
    f486:	|  |   moveq #1,d0
    f488:	+--|-- bra.w f5cc <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f48c:	|  \-> moveq #24,d0
    f48e:	|      add.l 56(sp),d0
    f492:	|      move.l d0,-(sp)
    f494:	|      jsr 15156 <trimStack>
    f49a:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    f49c:	|      movea.l 56(sp),a0
    f4a0:	|      move.l 24(a0),d0
    f4a4:	|      move.l d0,-(sp)
    f4a6:	|      jsr 14da8 <getTextFromAnyVar>
    f4ac:	|      addq.l #4,sp
    f4ae:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    f4b2:	|      moveq #24,d0
    f4b4:	|      add.l 56(sp),d0
    f4b8:	|      move.l d0,-(sp)
    f4ba:	|      jsr 15156 <trimStack>
    f4c0:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    f4c2:	|      move.l 44(sp),-(sp)
    f4c6:	|      jsr 13cbe <strlen>
    f4cc:	|      addq.l #4,sp
    f4ce:	|      move.l d0,d1
    f4d0:	|      move.l 12(sp),d0
    f4d4:	|      movea.l d0,a0
    f4d6:	|      move.l 8(sp),d0
    f4da:	|      add.l a0,d0
    f4dc:	|      cmp.l d1,d0
    f4de:	|  /-- bls.s f514 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    f4e0:	|  |   move.l 44(sp),-(sp)
    f4e4:	|  |   jsr 13cbe <strlen>
    f4ea:	|  |   addq.l #4,sp
    f4ec:	|  |   move.l d0,d1
    f4ee:	|  |   move.l 12(sp),d0
    f4f2:	|  |   sub.l d0,d1
    f4f4:	|  |   move.l d1,d0
    f4f6:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    f4fa:	|  |   move.l 44(sp),-(sp)
    f4fe:	|  |   jsr 13cbe <strlen>
    f504:	|  |   addq.l #4,sp
    f506:	|  |   move.l d0,d1
    f508:	|  |   move.l 12(sp),d0
    f50c:	|  |   cmp.l d1,d0
    f50e:	|  +-- bls.s f514 <builtIn_substring+0xf0>
            start = 0;
    f510:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    f514:	|  \-> move.l 8(sp),d0
    f518:	|  /-- bpl.s f51e <builtIn_substring+0xfa>
        length = 0;
    f51a:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    f51e:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    f524:	|      move.l 12(sp),d1
    f528:	|      move.l 8(sp),d0
    f52c:	|      move.l d1,d2
    f52e:	|      add.l d0,d2
    f530:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    f534:	|      move.l 36(sp),d0
    f538:	|      sub.l 40(sp),d0
    f53c:	|      addq.l #1,d0
    f53e:	|      move.l d0,32(sp)
    f542:	|      clr.l 28(sp)
    f546:	|      move.l 1c9a8 <SysBase>,d0
    f54c:	|      movea.l d0,a6
    f54e:	|      move.l 32(sp),d0
    f552:	|      move.l 28(sp),d1
    f556:	|      jsr -684(a6)
    f55a:	|      move.l d0,24(sp)
    f55e:	|      move.l 24(sp),d0
    f562:	|      move.l d0,20(sp)
    if (!newString) {
    f566:	|  /-- bne.s f56c <builtIn_substring+0x148>
        return BR_ERROR;
    f568:	|  |   moveq #1,d0
    f56a:	+--|-- bra.s f5cc <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    f56c:	|  \-> move.l 36(sp),d0
    f570:	|      sub.l 40(sp),d0
    f574:	|      move.l d0,d1
    f576:	|      move.l 40(sp),d0
    f57a:	|      add.l 44(sp),d0
    f57e:	|      move.l d1,-(sp)
    f580:	|      move.l d0,-(sp)
    f582:	|      move.l 28(sp),-(sp)
    f586:	|      jsr 171e6 <memcpy>
    f58c:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    f590:	|      move.l 36(sp),d0
    f594:	|      sub.l 40(sp),d0
    f598:	|      movea.l 20(sp),a0
    f59c:	|      adda.l d0,a0
    f59e:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    f5a0:	|      moveq #28,d0
    f5a2:	|      add.l 56(sp),d0
    f5a6:	|      move.l 20(sp),-(sp)
    f5aa:	|      move.l d0,-(sp)
    f5ac:	|      jsr 149f4 <makeTextVar>
    f5b2:	|      addq.l #8,sp
    FreeVec(newString);
    f5b4:	|      move.l 20(sp),16(sp)
    f5ba:	|      move.l 1c9a8 <SysBase>,d0
    f5c0:	|      movea.l d0,a6
    f5c2:	|      movea.l 16(sp),a1
    f5c6:	|      jsr -690(a6)
    return BR_CONTINUE;
    f5ca:	|      moveq #2,d0
}
    f5cc:	\----> move.l (sp)+,d2
    f5ce:	       movea.l (sp)+,a6
    f5d0:	       lea 40(sp),sp
    f5d4:	       rts

0000f5d6 <builtIn_stringLength>:

builtIn(stringLength)
{
    f5d6:	subq.l #8,sp
    f5d8:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f5da:	movea.l 20(sp),a0
    f5de:	move.l 24(a0),d0
    f5e2:	move.l d0,-(sp)
    f5e4:	jsr 14da8 <getTextFromAnyVar>
    f5ea:	addq.l #4,sp
    f5ec:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    f5f0:	moveq #24,d0
    f5f2:	add.l 20(sp),d0
    f5f6:	move.l d0,-(sp)
    f5f8:	jsr 15156 <trimStack>
    f5fe:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    f600:	move.l 8(sp),-(sp)
    f604:	jsr 13cbe <strlen>
    f60a:	addq.l #4,sp
    f60c:	move.l d0,d1
    f60e:	moveq #28,d0
    f610:	add.l 20(sp),d0
    f614:	move.l d1,-(sp)
    f616:	pea 1 <_start+0x1>
    f61a:	move.l d0,-(sp)
    f61c:	jsr 150c4 <setVariable>
    f622:	lea 12(sp),sp
	FreeVec(newText);
    f626:	move.l 8(sp),4(sp)
    f62c:	move.l 1c9a8 <SysBase>,d0
    f632:	movea.l d0,a6
    f634:	movea.l 4(sp),a1
    f638:	jsr -690(a6)
	return BR_CONTINUE;
    f63c:	moveq #2,d0
}
    f63e:	movea.l (sp)+,a6
    f640:	addq.l #8,sp
    f642:	rts

0000f644 <builtIn_newStack>:

builtIn(newStack)
{
    f644:	             lea -12(sp),sp
    f648:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    f64a:	             moveq #28,d0
    f64c:	             add.l 24(sp),d0
    f650:	             move.l d0,-(sp)
    f652:	             jsr 14a20 <unlinkVar>
    f658:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    f65a:	             movea.l 24(sp),a0
    f65e:	             moveq #6,d0
    f660:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    f664:	             moveq #12,d1
    f666:	             move.l d1,12(sp)
    f66a:	             clr.l 8(sp)
    f66e:	             move.l 1c9a8 <SysBase>,d0
    f674:	             movea.l d0,a6
    f676:	             move.l 12(sp),d0
    f67a:	             move.l 8(sp),d1
    f67e:	             jsr -684(a6)
    f682:	             move.l d0,4(sp)
    f686:	             move.l 4(sp),d0
    f68a:	             movea.l 24(sp),a0
    f68e:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    f692:	             movea.l 24(sp),a0
    f696:	             move.l 32(a0),d0
    f69a:	         /-- bne.s f6a2 <builtIn_newStack+0x5e>
    f69c:	         |   moveq #1,d0
    f69e:	/--------|-- bra.w f734 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    f6a2:	|        \-> movea.l 24(sp),a0
    f6a6:	|            movea.l 32(a0),a0
    f6aa:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    f6ac:	|            movea.l 24(sp),a0
    f6b0:	|            movea.l 32(a0),a0
    f6b4:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    f6b8:	|            movea.l 24(sp),a0
    f6bc:	|            movea.l 32(a0),a0
    f6c0:	|            moveq #1,d0
    f6c2:	|            move.l d0,8(a0)
    
    while (numParams--) {
    f6c6:	|     /----- bra.s f722 <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    f6c8:	|  /--|----> movea.l 24(sp),a0
    f6cc:	|  |  |      move.l 32(a0),d0
    f6d0:	|  |  |      move.l d0,d1
    f6d2:	|  |  |      movea.l 24(sp),a0
    f6d6:	|  |  |      move.l 24(a0),d0
    f6da:	|  |  |      move.l d1,-(sp)
    f6dc:	|  |  |      move.l d0,-(sp)
    f6de:	|  |  |      jsr 1400e <addVarToStack>
    f6e4:	|  |  |      addq.l #8,sp
    f6e6:	|  |  |      tst.w d0
    f6e8:	|  |  |  /-- bne.s f6ee <builtIn_newStack+0xaa>
    f6ea:	|  |  |  |   moveq #1,d0
    f6ec:	+--|--|--|-- bra.s f734 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    f6ee:	|  |  |  \-> movea.l 24(sp),a0
    f6f2:	|  |  |      movea.l 32(a0),a0
    f6f6:	|  |  |      move.l 4(a0),d0
    f6fa:	|  |  |  /-- bne.s f712 <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    f6fc:	|  |  |  |   movea.l 24(sp),a0
    f700:	|  |  |  |   movea.l 32(a0),a1
    f704:	|  |  |  |   movea.l 24(sp),a0
    f708:	|  |  |  |   movea.l 32(a0),a0
    f70c:	|  |  |  |   move.l (a1),d0
    f70e:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    f712:	|  |  |  \-> moveq #24,d0
    f714:	|  |  |      add.l 24(sp),d0
    f718:	|  |  |      move.l d0,-(sp)
    f71a:	|  |  |      jsr 15156 <trimStack>
    f720:	|  |  |      addq.l #4,sp
    while (numParams--) {
    f722:	|  |  \----> move.l 20(sp),d0
    f726:	|  |         move.l d0,d1
    f728:	|  |         subq.l #1,d1
    f72a:	|  |         move.l d1,20(sp)
    f72e:	|  |         tst.l d0
    f730:	|  \-------- bne.s f6c8 <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    f732:	|            moveq #2,d0
}
    f734:	\----------> movea.l (sp)+,a6
    f736:	             lea 12(sp),sp
    f73a:	             rts

0000f73c <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    f73c:	          movea.l 8(sp),a0
    f740:	          movea.l 24(a0),a0
    f744:	          move.l (a0),d0
    f746:	          moveq #6,d1
    f748:	          cmp.l d0,d1
    f74a:	      /-- beq.s f766 <builtIn_stackSize+0x2a>
    f74c:	      |   moveq #10,d1
    f74e:	      |   cmp.l d0,d1
    f750:	   /--|-- beq.s f7aa <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    f752:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    f754:	   |  |   pea 198c7 <PutChar+0x1bcb>
    f75a:	   |  |   jsr 17232 <KPrintF>
    f760:	   |  |   addq.l #4,sp
	return BR_ERROR;
    f762:	   |  |   moveq #1,d0
    f764:	/--|--|-- bra.s f7e4 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    f766:	|  |  \-> movea.l 8(sp),a0
    f76a:	|  |      movea.l 24(a0),a0
    f76e:	|  |      move.l 4(a0),d0
    f772:	|  |      move.l d0,-(sp)
    f774:	|  |      jsr 15132 <stackSize>
    f77a:	|  |      addq.l #4,sp
    f77c:	|  |      move.l d0,d1
    f77e:	|  |      moveq #28,d0
    f780:	|  |      add.l 8(sp),d0
    f784:	|  |      move.l d1,-(sp)
    f786:	|  |      pea 1 <_start+0x1>
    f78a:	|  |      move.l d0,-(sp)
    f78c:	|  |      jsr 150c4 <setVariable>
    f792:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    f796:	|  |      moveq #24,d0
    f798:	|  |      add.l 8(sp),d0
    f79c:	|  |      move.l d0,-(sp)
    f79e:	|  |      jsr 15156 <trimStack>
    f7a4:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    f7a6:	|  |      moveq #2,d0
    f7a8:	+--|----- bra.s f7e4 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    f7aa:	|  \----> movea.l 8(sp),a0
    f7ae:	|         movea.l 24(a0),a0
    f7b2:	|         movea.l 4(a0),a0
    f7b6:	|         move.l 4(a0),d1
    f7ba:	|         moveq #28,d0
    f7bc:	|         add.l 8(sp),d0
    f7c0:	|         move.l d1,-(sp)
    f7c2:	|         pea 1 <_start+0x1>
    f7c6:	|         move.l d0,-(sp)
    f7c8:	|         jsr 150c4 <setVariable>
    f7ce:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    f7d2:	|         moveq #24,d0
    f7d4:	|         add.l 8(sp),d0
    f7d8:	|         move.l d0,-(sp)
    f7da:	|         jsr 15156 <trimStack>
    f7e0:	|         addq.l #4,sp
			return BR_CONTINUE;
    f7e2:	|         moveq #2,d0
}
    f7e4:	\-------> rts

0000f7e6 <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f7e6:	       movea.l 8(sp),a0
    f7ea:	       movea.l 24(a0),a0
    f7ee:	       move.l (a0),d0
    f7f0:	       moveq #6,d1
    f7f2:	       cmp.l d0,d1
    f7f4:	   /-- beq.s f808 <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f7f6:	   |   pea 198f0 <PutChar+0x1bf4>
    f7fc:	   |   jsr 17232 <KPrintF>
    f802:	   |   addq.l #4,sp
		return BR_ERROR;
    f804:	   |   moveq #1,d0
    f806:	/--|-- bra.s f83c <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    f808:	|  \-> moveq #28,d0
    f80a:	|      add.l 8(sp),d0
    f80e:	|      movea.l 8(sp),a0
    f812:	|      move.l 24(a0),d1
    f816:	|      move.l d0,-(sp)
    f818:	|      move.l d1,-(sp)
    f81a:	|      jsr 142d8 <copyStack>
    f820:	|      addq.l #8,sp
    f822:	|      tst.w d0
    f824:	|  /-- bne.s f82a <builtIn_copyStack+0x44>
    f826:	|  |   moveq #1,d0
    f828:	+--|-- bra.s f83c <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    f82a:	|  \-> moveq #24,d0
    f82c:	|      add.l 8(sp),d0
    f830:	|      move.l d0,-(sp)
    f832:	|      jsr 15156 <trimStack>
    f838:	|      addq.l #4,sp
	return BR_CONTINUE;
    f83a:	|      moveq #2,d0
}
    f83c:	\----> rts

0000f83e <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f83e:	       movea.l 8(sp),a0
    f842:	       movea.l 24(a0),a0
    f846:	       movea.l 8(a0),a0
    f84a:	       move.l (a0),d0
    f84c:	       moveq #6,d1
    f84e:	       cmp.l d0,d1
    f850:	   /-- beq.s f866 <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    f852:	   |   pea 19909 <PutChar+0x1c0d>
    f858:	   |   jsr 17232 <KPrintF>
    f85e:	   |   addq.l #4,sp
		return BR_ERROR;
    f860:	   |   moveq #1,d0
    f862:	/--|-- bra.w f8f4 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f866:	|  \-> movea.l 8(sp),a0
    f86a:	|      movea.l 24(a0),a0
    f86e:	|      movea.l 8(a0),a0
    f872:	|      move.l 4(a0),d0
    f876:	|      move.l d0,d1
    f878:	|      movea.l 8(sp),a0
    f87c:	|      move.l 24(a0),d0
    f880:	|      move.l d1,-(sp)
    f882:	|      move.l d0,-(sp)
    f884:	|      jsr 1400e <addVarToStack>
    f88a:	|      addq.l #8,sp
    f88c:	|      tst.w d0
    f88e:	|  /-- bne.s f894 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    f890:	|  |   moveq #1,d0
    f892:	+--|-- bra.s f8f4 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    f894:	|  \-> movea.l 8(sp),a0
    f898:	|      movea.l 24(a0),a0
    f89c:	|      movea.l 8(a0),a0
    f8a0:	|      movea.l 4(a0),a0
    f8a4:	|      movea.l (a0),a0
    f8a6:	|      move.l 8(a0),d0
    f8aa:	|  /-- bne.s f8d2 <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f8ac:	|  |   movea.l 8(sp),a0
    f8b0:	|  |   movea.l 24(a0),a0
    f8b4:	|  |   movea.l 8(a0),a0
    f8b8:	|  |   movea.l 4(a0),a1
    f8bc:	|  |   movea.l 8(sp),a0
    f8c0:	|  |   movea.l 24(a0),a0
    f8c4:	|  |   movea.l 8(a0),a0
    f8c8:	|  |   movea.l 4(a0),a0
    f8cc:	|  |   move.l (a1),d0
    f8ce:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    f8d2:	|  \-> moveq #24,d0
    f8d4:	|      add.l 8(sp),d0
    f8d8:	|      move.l d0,-(sp)
    f8da:	|      jsr 15156 <trimStack>
    f8e0:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f8e2:	|      moveq #24,d0
    f8e4:	|      add.l 8(sp),d0
    f8e8:	|      move.l d0,-(sp)
    f8ea:	|      jsr 15156 <trimStack>
    f8f0:	|      addq.l #4,sp
	return BR_CONTINUE;
    f8f2:	|      moveq #2,d0
}
    f8f4:	\----> rts

0000f8f6 <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f8f6:	             movea.l 8(sp),a0
    f8fa:	             movea.l 24(a0),a0
    f8fe:	             movea.l 8(a0),a0
    f902:	             move.l (a0),d0
    f904:	             moveq #6,d1
    f906:	             cmp.l d0,d1
    f908:	         /-- beq.s f91e <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    f90a:	         |   pea 19909 <PutChar+0x1c0d>
    f910:	         |   jsr 17232 <KPrintF>
    f916:	         |   addq.l #4,sp
		return BR_ERROR;
    f918:	         |   moveq #1,d0
    f91a:	/--------|-- bra.w fa0c <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    f91e:	|        \-> movea.l 8(sp),a0
    f922:	|            movea.l 24(a0),a0
    f926:	|            movea.l 8(a0),a0
    f92a:	|            movea.l 4(a0),a0
    f92e:	|            move.l (a0),d0
    f930:	|     /----- bne.s f98a <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f932:	|     |      movea.l 8(sp),a0
    f936:	|     |      movea.l 24(a0),a0
    f93a:	|     |      movea.l 8(a0),a0
    f93e:	|     |      move.l 4(a0),d0
    f942:	|     |      move.l d0,d1
    f944:	|     |      movea.l 8(sp),a0
    f948:	|     |      move.l 24(a0),d0
    f94c:	|     |      move.l d1,-(sp)
    f94e:	|     |      move.l d0,-(sp)
    f950:	|     |      jsr 1400e <addVarToStack>
    f956:	|     |      addq.l #8,sp
    f958:	|     |      tst.w d0
    f95a:	|     |  /-- bne.s f962 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    f95c:	|     |  |   moveq #1,d0
    f95e:	+-----|--|-- bra.w fa0c <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f962:	|     |  \-> movea.l 8(sp),a0
    f966:	|     |      movea.l 24(a0),a0
    f96a:	|     |      movea.l 8(a0),a0
    f96e:	|     |      movea.l 4(a0),a1
    f972:	|     |      movea.l 8(sp),a0
    f976:	|     |      movea.l 24(a0),a0
    f97a:	|     |      movea.l 8(a0),a0
    f97e:	|     |      movea.l 4(a0),a0
    f982:	|     |      move.l (a1),d0
    f984:	|     |      move.l d0,4(a0)
    f988:	|  /--|----- bra.s f9ea <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    f98a:	|  |  \----> movea.l 8(sp),a0
    f98e:	|  |         movea.l 24(a0),a0
    f992:	|  |         movea.l 8(a0),a0
    f996:	|  |         movea.l 4(a0),a0
    f99a:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    f99e:	|  |         move.l d0,d1
    f9a0:	|  |         addq.l #8,d1
    f9a2:	|  |         movea.l 8(sp),a0
    f9a6:	|  |         move.l 24(a0),d0
    f9aa:	|  |         move.l d1,-(sp)
    f9ac:	|  |         move.l d0,-(sp)
    f9ae:	|  |         jsr 1400e <addVarToStack>
    f9b4:	|  |         addq.l #8,sp
    f9b6:	|  |         tst.w d0
    f9b8:	|  |     /-- bne.s f9be <builtIn_enqueue+0xc8>
			return BR_ERROR;
    f9ba:	|  |     |   moveq #1,d0
    f9bc:	+--|-----|-- bra.s fa0c <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    f9be:	|  |     \-> movea.l 8(sp),a0
    f9c2:	|  |         movea.l 24(a0),a0
    f9c6:	|  |         movea.l 8(a0),a0
    f9ca:	|  |         movea.l 4(a0),a0
    f9ce:	|  |         movea.l 4(a0),a1
    f9d2:	|  |         movea.l 8(sp),a0
    f9d6:	|  |         movea.l 24(a0),a0
    f9da:	|  |         movea.l 8(a0),a0
    f9de:	|  |         movea.l 4(a0),a0
    f9e2:	|  |         move.l 8(a1),d0
    f9e6:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    f9ea:	|  \-------> moveq #24,d0
    f9ec:	|            add.l 8(sp),d0
    f9f0:	|            move.l d0,-(sp)
    f9f2:	|            jsr 15156 <trimStack>
    f9f8:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    f9fa:	|            moveq #24,d0
    f9fc:	|            add.l 8(sp),d0
    fa00:	|            move.l d0,-(sp)
    fa02:	|            jsr 15156 <trimStack>
    fa08:	|            addq.l #4,sp
	return BR_CONTINUE;
    fa0a:	|            moveq #2,d0
}
    fa0c:	\----------> rts

0000fa0e <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    fa0e:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fa10:	       movea.l 12(sp),a0
    fa14:	       movea.l 24(a0),a0
    fa18:	       movea.l 8(a0),a0
    fa1c:	       move.l (a0),d0
    fa1e:	       moveq #6,d1
    fa20:	       cmp.l d0,d1
    fa22:	   /-- beq.s fa38 <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    fa24:	   |   pea 198f0 <PutChar+0x1bf4>
    fa2a:	   |   jsr 17232 <KPrintF>
    fa30:	   |   addq.l #4,sp
		return BR_ERROR;
    fa32:	   |   moveq #1,d0
    fa34:	/--|-- bra.w face <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    fa38:	|  \-> movea.l 12(sp),a0
    fa3c:	|      movea.l 24(a0),a0
    fa40:	|      movea.l 8(a0),a0
    fa44:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fa48:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    fa4a:	|      movea.l 12(sp),a0
    fa4e:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fa52:	|      clr.l -(sp)
    fa54:	|      move.l d1,-(sp)
    fa56:	|      move.l d0,-(sp)
    fa58:	|      jsr 143ae <deleteVarFromStack>
    fa5e:	|      lea 12(sp),sp
    fa62:	|      move.l d0,d1
    fa64:	|      moveq #28,d0
    fa66:	|      add.l 12(sp),d0
    fa6a:	|      move.l d1,-(sp)
    fa6c:	|      pea 1 <_start+0x1>
    fa70:	|      move.l d0,-(sp)
    fa72:	|      jsr 150c4 <setVariable>
    fa78:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    fa7c:	|      movea.l 12(sp),a0
    fa80:	|      movea.l 24(a0),a0
    fa84:	|      movea.l 8(a0),a0
    fa88:	|      movea.l 4(a0),a0
    fa8c:	|      move.l (a0),d0
    fa8e:	|      movea.l 12(sp),a0
    fa92:	|      movea.l 24(a0),a0
    fa96:	|      movea.l 8(a0),a0
    fa9a:	|      movea.l 4(a0),a2
    fa9e:	|      move.l d0,-(sp)
    faa0:	|      jsr 1510e <stackFindLast>
    faa6:	|      addq.l #4,sp
    faa8:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    faac:	|      moveq #24,d0
    faae:	|      add.l 12(sp),d0
    fab2:	|      move.l d0,-(sp)
    fab4:	|      jsr 15156 <trimStack>
    faba:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fabc:	|      moveq #24,d0
    fabe:	|      add.l 12(sp),d0
    fac2:	|      move.l d0,-(sp)
    fac4:	|      jsr 15156 <trimStack>
    faca:	|      addq.l #4,sp
	return BR_CONTINUE;
    facc:	|      moveq #2,d0
}
    face:	\----> movea.l (sp)+,a2
    fad0:	       rts

0000fad2 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    fad2:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fad4:	       movea.l 12(sp),a0
    fad8:	       movea.l 24(a0),a0
    fadc:	       movea.l 8(a0),a0
    fae0:	       move.l (a0),d0
    fae2:	       moveq #6,d1
    fae4:	       cmp.l d0,d1
    fae6:	   /-- beq.s fafc <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    fae8:	   |   pea 198f0 <PutChar+0x1bf4>
    faee:	   |   jsr 17232 <KPrintF>
    faf4:	   |   addq.l #4,sp
		return BR_ERROR;
    faf6:	   |   moveq #1,d0
    faf8:	/--|-- bra.w fb94 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    fafc:	|  \-> movea.l 12(sp),a0
    fb00:	|      movea.l 24(a0),a0
    fb04:	|      movea.l 8(a0),a0
    fb08:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fb0c:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    fb0e:	|      movea.l 12(sp),a0
    fb12:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fb16:	|      pea 1 <_start+0x1>
    fb1a:	|      move.l d1,-(sp)
    fb1c:	|      move.l d0,-(sp)
    fb1e:	|      jsr 143ae <deleteVarFromStack>
    fb24:	|      lea 12(sp),sp
    fb28:	|      move.l d0,d1
    fb2a:	|      moveq #28,d0
    fb2c:	|      add.l 12(sp),d0
    fb30:	|      move.l d1,-(sp)
    fb32:	|      pea 1 <_start+0x1>
    fb36:	|      move.l d0,-(sp)
    fb38:	|      jsr 150c4 <setVariable>
    fb3e:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    fb42:	|      movea.l 12(sp),a0
    fb46:	|      movea.l 24(a0),a0
    fb4a:	|      movea.l 8(a0),a0
    fb4e:	|      movea.l 4(a0),a0
    fb52:	|      move.l (a0),d0
    fb54:	|      movea.l 12(sp),a0
    fb58:	|      movea.l 24(a0),a0
    fb5c:	|      movea.l 8(a0),a0
    fb60:	|      movea.l 4(a0),a2
    fb64:	|      move.l d0,-(sp)
    fb66:	|      jsr 1510e <stackFindLast>
    fb6c:	|      addq.l #4,sp
    fb6e:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    fb72:	|      moveq #24,d0
    fb74:	|      add.l 12(sp),d0
    fb78:	|      move.l d0,-(sp)
    fb7a:	|      jsr 15156 <trimStack>
    fb80:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fb82:	|      moveq #24,d0
    fb84:	|      add.l 12(sp),d0
    fb88:	|      move.l d0,-(sp)
    fb8a:	|      jsr 15156 <trimStack>
    fb90:	|      addq.l #4,sp
	return BR_CONTINUE;
    fb92:	|      moveq #2,d0
}
    fb94:	\----> movea.l (sp)+,a2
    fb96:	       rts

0000fb98 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fb98:	       movea.l 8(sp),a0
    fb9c:	       movea.l 24(a0),a0
    fba0:	       move.l (a0),d0
    fba2:	       moveq #6,d1
    fba4:	       cmp.l d0,d1
    fba6:	   /-- beq.s fbba <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    fba8:	   |   pea 198f0 <PutChar+0x1bf4>
    fbae:	   |   jsr 17232 <KPrintF>
    fbb4:	   |   addq.l #4,sp
		return BR_ERROR;
    fbb6:	   |   moveq #1,d0
    fbb8:	/--|-- bra.s fc24 <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fbba:	|  \-> movea.l 8(sp),a0
    fbbe:	|      movea.l 24(a0),a0
    fbc2:	|      movea.l 4(a0),a0
    fbc6:	|      move.l (a0),d0
    fbc8:	|  /-- bne.s fbdc <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    fbca:	|  |   pea 19921 <PutChar+0x1c25>
    fbd0:	|  |   jsr 17232 <KPrintF>
    fbd6:	|  |   addq.l #4,sp
		return BR_ERROR;
    fbd8:	|  |   moveq #1,d0
    fbda:	+--|-- bra.s fc24 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fbdc:	|  \-> moveq #28,d0
    fbde:	|      add.l 8(sp),d0
    fbe2:	|      movea.l 8(sp),a0
    fbe6:	|      movea.l 24(a0),a0
    fbea:	|      movea.l 4(a0),a0
    fbee:	|      move.l (a0),d1
    fbf0:	|      move.l d0,-(sp)
    fbf2:	|      move.l d1,-(sp)
    fbf4:	|      jsr 14c8c <copyVariable>
    fbfa:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    fbfc:	|      movea.l 8(sp),a0
    fc00:	|      movea.l 24(a0),a0
    fc04:	|      move.l 4(a0),d0
    fc08:	|      move.l d0,-(sp)
    fc0a:	|      jsr 15156 <trimStack>
    fc10:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fc12:	|      moveq #24,d0
    fc14:	|      add.l 8(sp),d0
    fc18:	|      move.l d0,-(sp)
    fc1a:	|      jsr 15156 <trimStack>
    fc20:	|      addq.l #4,sp
	return BR_CONTINUE;
    fc22:	|      moveq #2,d0
}
    fc24:	\----> rts

0000fc26 <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fc26:	       movea.l 8(sp),a0
    fc2a:	       movea.l 24(a0),a0
    fc2e:	       move.l (a0),d0
    fc30:	       moveq #6,d1
    fc32:	       cmp.l d0,d1
    fc34:	   /-- beq.s fc48 <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    fc36:	   |   pea 198f0 <PutChar+0x1bf4>
    fc3c:	   |   jsr 17232 <KPrintF>
    fc42:	   |   addq.l #4,sp
		return BR_ERROR;
    fc44:	   |   moveq #1,d0
    fc46:	/--|-- bra.s fc9c <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fc48:	|  \-> movea.l 8(sp),a0
    fc4c:	|      movea.l 24(a0),a0
    fc50:	|      movea.l 4(a0),a0
    fc54:	|      move.l (a0),d0
    fc56:	|  /-- bne.s fc6a <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    fc58:	|  |   pea 19921 <PutChar+0x1c25>
    fc5e:	|  |   jsr 17232 <KPrintF>
    fc64:	|  |   addq.l #4,sp
		return BR_ERROR;
    fc66:	|  |   moveq #1,d0
    fc68:	+--|-- bra.s fc9c <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fc6a:	|  \-> moveq #28,d0
    fc6c:	|      add.l 8(sp),d0
    fc70:	|      movea.l 8(sp),a0
    fc74:	|      movea.l 24(a0),a0
    fc78:	|      movea.l 4(a0),a0
    fc7c:	|      move.l (a0),d1
    fc7e:	|      move.l d0,-(sp)
    fc80:	|      move.l d1,-(sp)
    fc82:	|      jsr 14c8c <copyVariable>
    fc88:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fc8a:	|      moveq #24,d0
    fc8c:	|      add.l 8(sp),d0
    fc90:	|      move.l d0,-(sp)
    fc92:	|      jsr 15156 <trimStack>
    fc98:	|      addq.l #4,sp
	return BR_CONTINUE;
    fc9a:	|      moveq #2,d0
}
    fc9c:	\----> rts

0000fc9e <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fc9e:	       movea.l 8(sp),a0
    fca2:	       movea.l 24(a0),a0
    fca6:	       move.l (a0),d0
    fca8:	       moveq #6,d1
    fcaa:	       cmp.l d0,d1
    fcac:	   /-- beq.s fcc0 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    fcae:	   |   pea 198f0 <PutChar+0x1bf4>
    fcb4:	   |   jsr 17232 <KPrintF>
    fcba:	   |   addq.l #4,sp
		return BR_ERROR;
    fcbc:	   |   moveq #1,d0
    fcbe:	/--|-- bra.s fd16 <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fcc0:	|  \-> movea.l 8(sp),a0
    fcc4:	|      movea.l 24(a0),a0
    fcc8:	|      movea.l 4(a0),a0
    fccc:	|      move.l (a0),d0
    fcce:	|  /-- bne.s fce2 <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    fcd0:	|  |   pea 19921 <PutChar+0x1c25>
    fcd6:	|  |   jsr 17232 <KPrintF>
    fcdc:	|  |   addq.l #4,sp
		return BR_ERROR;
    fcde:	|  |   moveq #1,d0
    fce0:	+--|-- bra.s fd16 <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    fce2:	|  \-> moveq #28,d0
    fce4:	|      add.l 8(sp),d0
    fce8:	|      movea.l 8(sp),a0
    fcec:	|      movea.l 24(a0),a0
    fcf0:	|      movea.l 4(a0),a0
    fcf4:	|      move.l 4(a0),d1
    fcf8:	|      move.l d0,-(sp)
    fcfa:	|      move.l d1,-(sp)
    fcfc:	|      jsr 14c8c <copyVariable>
    fd02:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fd04:	|      moveq #24,d0
    fd06:	|      add.l 8(sp),d0
    fd0a:	|      move.l d0,-(sp)
    fd0c:	|      jsr 15156 <trimStack>
    fd12:	|      addq.l #4,sp
	return BR_CONTINUE;
    fd14:	|      moveq #2,d0
}
    fd16:	\----> rts

0000fd18 <builtIn_random>:

builtIn(random)
{
    fd18:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    fd1a:	       movea.l 12(sp),a0
    fd1e:	       move.l 24(a0),d0
    fd22:	       move.l d0,-(sp)
    fd24:	       pea 1 <_start+0x1>
    fd28:	       move.l sp,d0
    fd2a:	       addq.l #8,d0
    fd2c:	       move.l d0,-(sp)
    fd2e:	       jsr 147d2 <getValueType>
    fd34:	       lea 12(sp),sp
    fd38:	       tst.w d0
    fd3a:	   /-- bne.s fd40 <builtIn_random+0x28>
		return BR_ERROR;
    fd3c:	   |   moveq #1,d0
    fd3e:	/--|-- bra.s fd8a <builtIn_random+0x72>

	trimStack (&fun -> stack);
    fd40:	|  \-> moveq #24,d0
    fd42:	|      add.l 12(sp),d0
    fd46:	|      move.l d0,-(sp)
    fd48:	|      jsr 15156 <trimStack>
    fd4e:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    fd50:	|      move.l (sp),d0
    fd52:	|  /-- bgt.s fd58 <builtIn_random+0x40>
    fd54:	|  |   moveq #1,d0
    fd56:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    fd58:	|  \-> jsr 15df2 <rand>
    fd5e:	|      move.l d0,d1
    fd60:	|      move.l (sp),d0
    fd62:	|      move.l d0,-(sp)
    fd64:	|      move.l d1,-(sp)
    fd66:	|      jsr 17cc0 <__umodsi3>
    fd6c:	|      addq.l #8,sp
    fd6e:	|      move.l d0,d1
    fd70:	|      moveq #28,d0
    fd72:	|      add.l 12(sp),d0
    fd76:	|      move.l d1,-(sp)
    fd78:	|      pea 1 <_start+0x1>
    fd7c:	|      move.l d0,-(sp)
    fd7e:	|      jsr 150c4 <setVariable>
    fd84:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fd88:	|      moveq #2,d0
}
    fd8a:	\----> addq.l #4,sp
    fd8c:	       rts

0000fd8e <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    fd8e:	nop
    fd90:	rts

0000fd92 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    fd92:	moveq #2,d0
}
    fd94:	rts

0000fd96 <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
    fd96:	       subq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
    fd98:	       movea.l 12(sp),a0
    fd9c:	       move.l 24(a0),d0
    fda0:	       move.l d0,-(sp)
    fda2:	       pea 1 <_start+0x1>
    fda6:	       move.l sp,d0
    fda8:	       addq.l #8,d0
    fdaa:	       move.l d0,-(sp)
    fdac:	       jsr 147d2 <getValueType>
    fdb2:	       lea 12(sp),sp
    fdb6:	       tst.w d0
    fdb8:	   /-- bne.s fdcc <builtIn_setPasteColour+0x36>
		KPrintF ("setPasteColour: Parameter not a number");
    fdba:	   |   pea 19934 <PutChar+0x1c38>
    fdc0:	   |   jsr 17232 <KPrintF>
    fdc6:	   |   addq.l #4,sp
		return BR_ERROR;
    fdc8:	   |   moveq #1,d0
    fdca:	/--|-- bra.s fe0c <builtIn_setPasteColour+0x76>
	}
	trimStack (&fun -> stack);
    fdcc:	|  \-> moveq #24,d0
    fdce:	|      add.l 12(sp),d0
    fdd2:	|      move.l d0,-(sp)
    fdd4:	|      jsr 15156 <trimStack>
    fdda:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
    fddc:	|      move.l (sp),d0
    fdde:	|      move.l d0,d0
    fde0:	|      move.w d0,1c8c2 <textPaletteIndex>

	if( textPaletteIndex > 31) {
    fde6:	|      move.w 1c8c2 <textPaletteIndex>,d0
    fdec:	|      cmpi.w #31,d0
    fdf0:	|  /-- bls.s fe0a <builtIn_setPasteColour+0x74>
		KPrintF ("setPasteColour: Paletteindex out of Range");
    fdf2:	|  |   pea 1995b <PutChar+0x1c5f>
    fdf8:	|  |   jsr 17232 <KPrintF>
    fdfe:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
    fe00:	|  |   clr.w 1c8c2 <textPaletteIndex>
		return BR_ERROR;
    fe06:	|  |   moveq #1,d0
    fe08:	+--|-- bra.s fe0c <builtIn_setPasteColour+0x76>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
    fe0a:	|  \-> moveq #2,d0
}
    fe0c:	\----> addq.l #4,sp
    fe0e:	       rts

0000fe10 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fe10:	moveq #2,d0
}
    fe12:	rts

0000fe14 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fe14:	moveq #2,d0
}
    fe16:	rts

0000fe18 <builtIn_setFont>:


builtIn(setFont)
{
    fe18:	       lea -16(sp),sp
    fe1c:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fe1e:	       movea.l 28(sp),a0
    fe22:	       move.l 24(a0),d0
    fe26:	       move.l d0,-(sp)
    fe28:	       pea 1 <_start+0x1>
    fe2c:	       lea 12(sp),a0
    fe30:	       move.l a0,-(sp)
    fe32:	       jsr 147d2 <getValueType>
    fe38:	       lea 12(sp),sp
    fe3c:	       tst.w d0
    fe3e:	   /-- bne.s fe46 <builtIn_setFont+0x2e>
    fe40:	   |   moveq #1,d0
    fe42:	/--|-- bra.w fef4 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    fe46:	|  \-> moveq #24,d0
    fe48:	|      add.l 28(sp),d0
    fe4c:	|      move.l d0,-(sp)
    fe4e:	|      jsr 15156 <trimStack>
    fe54:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fe56:	|      movea.l 28(sp),a0
    fe5a:	|      move.l 24(a0),d0
    fe5e:	|      move.l d0,-(sp)
    fe60:	|      jsr 14da8 <getTextFromAnyVar>
    fe66:	|      addq.l #4,sp
    fe68:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    fe6c:	|  /-- bne.s fe74 <builtIn_setFont+0x5c>
    fe6e:	|  |   moveq #1,d0
    fe70:	+--|-- bra.w fef4 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    fe74:	|  \-> moveq #24,d0
    fe76:	|      add.l 28(sp),d0
    fe7a:	|      move.l d0,-(sp)
    fe7c:	|      jsr 15156 <trimStack>
    fe82:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    fe84:	|      movea.l 28(sp),a0
    fe88:	|      move.l 24(a0),d0
    fe8c:	|      move.l d0,-(sp)
    fe8e:	|      pea 5 <_start+0x5>
    fe92:	|      lea 16(sp),a0
    fe96:	|      move.l a0,-(sp)
    fe98:	|      jsr 147d2 <getValueType>
    fe9e:	|      lea 12(sp),sp
    fea2:	|      tst.w d0
    fea4:	|  /-- bne.s feaa <builtIn_setFont+0x92>
    fea6:	|  |   moveq #1,d0
    fea8:	+--|-- bra.s fef4 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    feaa:	|  \-> moveq #24,d0
    feac:	|      add.l 28(sp),d0
    feb0:	|      move.l d0,-(sp)
    feb2:	|      jsr 15156 <trimStack>
    feb8:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    feba:	|      move.l 4(sp),d1
    febe:	|      move.l 8(sp),d0
    fec2:	|      move.l d1,-(sp)
    fec4:	|      move.l 20(sp),-(sp)
    fec8:	|      move.l d0,-(sp)
    feca:	|      jsr 15602 <loadFont>
    fed0:	|      lea 12(sp),sp
    fed4:	|      tst.w d0
    fed6:	|  /-- bne.s fedc <builtIn_setFont+0xc4>
    fed8:	|  |   moveq #1,d0
    feda:	+--|-- bra.s fef4 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    fedc:	|  \-> move.l 16(sp),12(sp)
    fee2:	|      move.l 1c9a8 <SysBase>,d0
    fee8:	|      movea.l d0,a6
    feea:	|      movea.l 12(sp),a1
    feee:	|      jsr -690(a6)

    return BR_CONTINUE;
    fef2:	|      moveq #2,d0
}
    fef4:	\----> movea.l (sp)+,a6
    fef6:	       lea 16(sp),sp
    fefa:	       rts

0000fefc <builtIn_inFont>:

builtIn(inFont)
{
    fefc:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    fefe:	       movea.l 12(sp),a0
    ff02:	       move.l 24(a0),d0
    ff06:	       move.l d0,-(sp)
    ff08:	       jsr 14da8 <getTextFromAnyVar>
    ff0e:	       addq.l #4,sp
    ff10:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    ff12:	   /-- bne.s ff18 <builtIn_inFont+0x1c>
    ff14:	   |   moveq #1,d0
    ff16:	/--|-- bra.s ff4e <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    ff18:	|  \-> moveq #24,d0
    ff1a:	|      add.l 12(sp),d0
    ff1e:	|      move.l d0,-(sp)
    ff20:	|      jsr 15156 <trimStack>
    ff26:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    ff28:	|      move.l (sp),-(sp)
    ff2a:	|      jsr 155f0 <isInFont>
    ff30:	|      addq.l #4,sp
    ff32:	|      movea.w d0,a0
    ff34:	|      moveq #28,d0
    ff36:	|      add.l 12(sp),d0
    ff3a:	|      move.l a0,-(sp)
    ff3c:	|      pea 1 <_start+0x1>
    ff40:	|      move.l d0,-(sp)
    ff42:	|      jsr 150c4 <setVariable>
    ff48:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ff4c:	|      moveq #2,d0
}
    ff4e:	\----> addq.l #4,sp
    ff50:	       rts

0000ff52 <builtIn_pasteString>:

builtIn(pasteString)
{
    ff52:	       lea -16(sp),sp
    ff56:	       move.l a6,-(sp)
    ff58:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    ff5a:	       movea.l 32(sp),a0
    ff5e:	       move.l 24(a0),d0
    ff62:	       move.l d0,-(sp)
    ff64:	       jsr 14da8 <getTextFromAnyVar>
    ff6a:	       addq.l #4,sp
    ff6c:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    ff70:	       moveq #24,d0
    ff72:	       add.l 32(sp),d0
    ff76:	       move.l d0,-(sp)
    ff78:	       jsr 15156 <trimStack>
    ff7e:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ff80:	       movea.l 32(sp),a0
    ff84:	       move.l 24(a0),d0
    ff88:	       move.l d0,-(sp)
    ff8a:	       pea 1 <_start+0x1>
    ff8e:	       lea 20(sp),a0
    ff92:	       move.l a0,-(sp)
    ff94:	       jsr 147d2 <getValueType>
    ff9a:	       lea 12(sp),sp
    ff9e:	       tst.w d0
    ffa0:	   /-- bne.s ffa8 <builtIn_pasteString+0x56>
    ffa2:	   |   moveq #1,d0
    ffa4:	/--|-- bra.w 1004a <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    ffa8:	|  \-> moveq #24,d0
    ffaa:	|      add.l 32(sp),d0
    ffae:	|      move.l d0,-(sp)
    ffb0:	|      jsr 15156 <trimStack>
    ffb6:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ffb8:	|      movea.l 32(sp),a0
    ffbc:	|      move.l 24(a0),d0
    ffc0:	|      move.l d0,-(sp)
    ffc2:	|      pea 1 <_start+0x1>
    ffc6:	|      lea 16(sp),a0
    ffca:	|      move.l a0,-(sp)
    ffcc:	|      jsr 147d2 <getValueType>
    ffd2:	|      lea 12(sp),sp
    ffd6:	|      tst.w d0
    ffd8:	|  /-- bne.s ffde <builtIn_pasteString+0x8c>
    ffda:	|  |   moveq #1,d0
    ffdc:	+--|-- bra.s 1004a <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    ffde:	|  \-> moveq #24,d0
    ffe0:	|      add.l 32(sp),d0
    ffe4:	|      move.l d0,-(sp)
    ffe6:	|      jsr 15156 <trimStack>
    ffec:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    ffee:	|      move.l 8(sp),d0
    fff2:	|      cmpi.l #65535,d0
    fff8:	|  /-- bne.s 10018 <builtIn_pasteString+0xc6>
    fffa:	|  |   move.l 1c8fc <winWidth>,d2
   10000:	|  |   move.l 20(sp),-(sp)
   10004:	|  |   jsr 158b4 <stringWidth>
   1000a:	|  |   addq.l #4,sp
   1000c:	|  |   move.l d2,d1
   1000e:	|  |   sub.l d0,d1
   10010:	|  |   move.l d1,d0
   10012:	|  |   lsr.l #1,d0
   10014:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
   10018:	|  \-> move.l 12(sp),d1
   1001c:	|      move.l 8(sp),d0
   10020:	|      move.l d1,-(sp)
   10022:	|      move.l d0,-(sp)
   10024:	|      move.l 28(sp),-(sp)
   10028:	|      jsr 157d6 <pasteStringToBackdrop>
   1002e:	|      lea 12(sp),sp
    FreeVec(newText); 
   10032:	|      move.l 20(sp),16(sp)
   10038:	|      move.l 1c9a8 <SysBase>,d0
   1003e:	|      movea.l d0,a6
   10040:	|      movea.l 16(sp),a1
   10044:	|      jsr -690(a6)
    return BR_CONTINUE;
   10048:	|      moveq #2,d0
}
   1004a:	\----> move.l (sp)+,d2
   1004c:	       movea.l (sp)+,a6
   1004e:	       lea 16(sp),sp
   10052:	       rts

00010054 <builtIn_anim>:

builtIn(anim)
{
   10054:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
   10058:	       moveq #1,d0
   1005a:	       cmp.l 16(sp),d0
   1005e:	   /-- blt.s 10074 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
   10060:	   |   pea 19985 <PutChar+0x1c89>
   10066:	   |   jsr 17232 <KPrintF>
   1006c:	   |   addq.l #4,sp
		return BR_ERROR;
   1006e:	   |   moveq #1,d0
   10070:	/--|-- bra.w 10102 <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
   10074:	|  \-> moveq #24,d1
   10076:	|      add.l 20(sp),d1
   1007a:	|      move.l 16(sp),d0
   1007e:	|      subq.l #1,d0
   10080:	|      move.l d1,-(sp)
   10082:	|      move.l d0,-(sp)
   10084:	|      jsr 96e2 <createPersonaAnim>
   1008a:	|      addq.l #8,sp
   1008c:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10090:	|      movea.l 20(sp),a0
   10094:	|      move.l 24(a0),d0
   10098:	|      move.l d0,-(sp)
   1009a:	|      pea 5 <_start+0x5>
   1009e:	|      lea 8(sp),a0
   100a2:	|      move.l a0,-(sp)
   100a4:	|      jsr 147d2 <getValueType>
   100aa:	|      lea 12(sp),sp
   100ae:	|      tst.w d0
   100b0:	|  /-- bne.s 100b6 <builtIn_anim+0x62>
   100b2:	|  |   moveq #1,d0
   100b4:	+--|-- bra.s 10102 <builtIn_anim+0xae>
	trimStack (&fun -> stack);
   100b6:	|  \-> moveq #24,d0
   100b8:	|      add.l 20(sp),d0
   100bc:	|      move.l d0,-(sp)
   100be:	|      jsr 15156 <trimStack>
   100c4:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
   100c6:	|      move.l (sp),d0
   100c8:	|      move.l d0,-(sp)
   100ca:	|      jsr 15f54 <loadBankForAnim>
   100d0:	|      addq.l #4,sp
   100d2:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
   100d6:	|  /-- bne.s 100dc <builtIn_anim+0x88>
   100d8:	|  |   moveq #1,d0
   100da:	+--|-- bra.s 10102 <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
   100dc:	|  \-> move.l 4(sp),-(sp)
   100e0:	|      move.l 12(sp),-(sp)
   100e4:	|      jsr b58c <setBankFile>
   100ea:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
   100ec:	|      moveq #28,d0
   100ee:	|      add.l 20(sp),d0
   100f2:	|      move.l 8(sp),-(sp)
   100f6:	|      move.l d0,-(sp)
   100f8:	|      jsr 15080 <newAnimationVariable>
   100fe:	|      addq.l #8,sp
	return BR_CONTINUE;
   10100:	|      moveq #2,d0
}
   10102:	\----> lea 12(sp),sp
   10106:	       rts

00010108 <builtIn_costume>:

builtIn(costume)
{
   10108:	          lea -32(sp),sp
   1010c:	          move.l a6,-(sp)
   1010e:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
   10110:	          moveq #8,d0
   10112:	          move.l d0,32(sp)
   10116:	          clr.l 28(sp)
   1011a:	          move.l 1c9a8 <SysBase>,d0
   10120:	          movea.l d0,a6
   10122:	          move.l 32(sp),d0
   10126:	          move.l 28(sp),d1
   1012a:	          jsr -684(a6)
   1012e:	          move.l d0,24(sp)
   10132:	          move.l 24(sp),d0
   10136:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
   1013a:	      /-- bne.s 10142 <builtIn_costume+0x3a>
   1013c:	      |   moveq #1,d0
   1013e:	/-----|-- bra.w 1022a <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
   10142:	|     \-> move.l 44(sp),d0
   10146:	|         pea 3 <_start+0x3>
   1014a:	|         move.l d0,-(sp)
   1014c:	|         jsr 17c64 <__divsi3>
   10152:	|         addq.l #8,sp
   10154:	|         movea.l 20(sp),a0
   10158:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
   1015c:	|         tst.l 44(sp)
   10160:	|     /-- beq.s 10176 <builtIn_costume+0x6e>
   10162:	|     |   movea.l 20(sp),a0
   10166:	|     |   move.l 4(a0),d1
   1016a:	|     |   move.l d1,d0
   1016c:	|     |   add.l d0,d0
   1016e:	|     |   add.l d1,d0
   10170:	|     |   cmp.l 44(sp),d0
   10174:	|  /--|-- beq.s 1018a <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
   10176:	|  |  \-> pea 199bf <line.c.05397aaf+0x33>
   1017c:	|  |      jsr 17232 <KPrintF>
   10182:	|  |      addq.l #4,sp
        return BR_ERROR;
   10184:	|  |      moveq #1,d0
   10186:	+--|----- bra.w 1022a <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
   1018a:	|  \----> move.l 44(sp),d0
   1018e:	|         add.l d0,d0
   10190:	|         add.l d0,d0
   10192:	|         move.l d0,16(sp)
   10196:	|         clr.l 12(sp)
   1019a:	|         move.l 1c9a8 <SysBase>,d0
   101a0:	|         movea.l d0,a6
   101a2:	|         move.l 16(sp),d0
   101a6:	|         move.l 12(sp),d1
   101aa:	|         jsr -684(a6)
   101ae:	|         move.l d0,8(sp)
   101b2:	|         move.l 8(sp),d0
   101b6:	|         movea.l 20(sp),a0
   101ba:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
   101bc:	|         movea.l 20(sp),a0
   101c0:	|         move.l (a0),d0
   101c2:	|     /-- bne.s 101c8 <builtIn_costume+0xc0>
   101c4:	|     |   moveq #1,d0
   101c6:	+-----|-- bra.s 1022a <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
   101c8:	|     \-> move.l 44(sp),d0
   101cc:	|         subq.l #1,d0
   101ce:	|         move.l d0,36(sp)
   101d2:	|     /-- bra.s 1020e <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
   101d4:	|  /--|-> movea.l 48(sp),a0
   101d8:	|  |  |   move.l 24(a0),d0
   101dc:	|  |  |   movea.l 20(sp),a0
   101e0:	|  |  |   movea.l (a0),a0
   101e2:	|  |  |   move.l 36(sp),d1
   101e6:	|  |  |   add.l d1,d1
   101e8:	|  |  |   add.l d1,d1
   101ea:	|  |  |   lea (0,a0,d1.l),a2
   101ee:	|  |  |   move.l d0,-(sp)
   101f0:	|  |  |   jsr 14caa <getAnimationFromVar>
   101f6:	|  |  |   addq.l #4,sp
   101f8:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
   101fa:	|  |  |   moveq #24,d0
   101fc:	|  |  |   add.l 48(sp),d0
   10200:	|  |  |   move.l d0,-(sp)
   10202:	|  |  |   jsr 15156 <trimStack>
   10208:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
   1020a:	|  |  |   subq.l #1,36(sp)
   1020e:	|  |  \-> tst.l 36(sp)
   10212:	|  \----- bge.s 101d4 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
   10214:	|         moveq #28,d0
   10216:	|         add.l 48(sp),d0
   1021a:	|         move.l 20(sp),-(sp)
   1021e:	|         move.l d0,-(sp)
   10220:	|         jsr 150a2 <newCostumeVariable>
   10226:	|         addq.l #8,sp
    return BR_CONTINUE;
   10228:	|         moveq #2,d0
}
   1022a:	\-------> movea.l (sp)+,a2
   1022c:	          movea.l (sp)+,a6
   1022e:	          lea 32(sp),sp
   10232:	          rts

00010234 <builtIn_launch>:

builtIn(launch)
{
   10234:	          lea -20(sp),sp
   10238:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   1023a:	          movea.l 32(sp),a0
   1023e:	          move.l 24(a0),d0
   10242:	          move.l d0,-(sp)
   10244:	          jsr 14da8 <getTextFromAnyVar>
   1024a:	          addq.l #4,sp
   1024c:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
   10250:	      /-- bne.s 10258 <builtIn_launch+0x24>
   10252:	      |   moveq #1,d0
   10254:	/-----|-- bra.w 10386 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
   10258:	|     \-> move.l 20(sp),-(sp)
   1025c:	|         jsr 2fe <encodeFilename>
   10262:	|         addq.l #4,sp
   10264:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
   10268:	|         moveq #24,d0
   1026a:	|         add.l 32(sp),d0
   1026e:	|         move.l d0,-(sp)
   10270:	|         jsr 15156 <trimStack>
   10276:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
   10278:	|         movea.l 20(sp),a0
   1027c:	|         move.b (a0),d0
   1027e:	|         cmpi.b #104,d0
   10282:	|  /----- bne.s 102ec <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
   10284:	|  |      movea.l 20(sp),a0
   10288:	|  |      addq.l #1,a0
   1028a:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
   1028c:	|  |      cmpi.b #116,d0
   10290:	|  +----- bne.s 102ec <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
   10292:	|  |      movea.l 20(sp),a0
   10296:	|  |      addq.l #2,a0
   10298:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
   1029a:	|  |      cmpi.b #116,d0
   1029e:	|  +----- bne.s 102ec <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
   102a0:	|  |      movea.l 20(sp),a0
   102a4:	|  |      addq.l #3,a0
   102a6:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
   102a8:	|  |      cmpi.b #112,d0
   102ac:	|  +----- bne.s 102ec <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   102ae:	|  |      movea.l 20(sp),a0
   102b2:	|  |      addq.l #4,a0
   102b4:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
   102b6:	|  |      cmpi.b #58,d0
   102ba:	|  |  /-- beq.s 102d8 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   102bc:	|  |  |   movea.l 20(sp),a0
   102c0:	|  |  |   addq.l #4,a0
   102c2:	|  |  |   move.b (a0),d0
   102c4:	|  |  |   cmpi.b #115,d0
   102c8:	|  +--|-- bne.s 102ec <builtIn_launch+0xb8>
   102ca:	|  |  |   movea.l 20(sp),a0
   102ce:	|  |  |   addq.l #5,a0
   102d0:	|  |  |   move.b (a0),d0
   102d2:	|  |  |   cmpi.b #58,d0
   102d6:	|  +--|-- bne.s 102ec <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
   102d8:	|  |  \-> move.l 20(sp),-(sp)
   102dc:	|  |      jsr b8 <copyString>
   102e2:	|  |      addq.l #4,sp
   102e4:	|  |      move.l d0,1ca6a <launchMe>
   102ea:	|  |  /-- bra.s 1033e <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
   102ec:	|  \--|-> move.l 1c910 <gamePath>,d0
   102f2:	|     |   pea 19a0a <line.c.05397aaf+0x7e>
   102f8:	|     |   move.l d0,-(sp)
   102fa:	|     |   jsr 13cfe <joinStrings>
   10300:	|     |   addq.l #8,sp
   10302:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
   10306:	|     |   move.l 16(sp),-(sp)
   1030a:	|     |   move.l 16(sp),-(sp)
   1030e:	|     |   jsr 13cfe <joinStrings>
   10314:	|     |   addq.l #8,sp
   10316:	|     |   move.l d0,1ca6a <launchMe>
        FreeVec(newText);
   1031c:	|     |   move.l 16(sp),8(sp)
   10322:	|     |   move.l 1c9a8 <SysBase>,d0
   10328:	|     |   movea.l d0,a6
   1032a:	|     |   movea.l 8(sp),a1
   1032e:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
   10332:	|     |   move.l 1ca6a <launchMe>,d0
   10338:	|     +-- bne.s 1033e <builtIn_launch+0x10a>
   1033a:	|     |   moveq #1,d0
   1033c:	+-----|-- bra.s 10386 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
   1033e:	|     \-> move.l 20(sp),4(sp)
   10344:	|         move.l 1c9a8 <SysBase>,d0
   1034a:	|         movea.l d0,a6
   1034c:	|         movea.l 4(sp),a1
   10350:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
   10354:	|         clr.l -(sp)
   10356:	|         jsr 40de <setGraphicsWindow>
   1035c:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
   1035e:	|         moveq #28,d0
   10360:	|         add.l 32(sp),d0
   10364:	|         pea 1 <_start+0x1>
   10368:	|         pea 1 <_start+0x1>
   1036c:	|         move.l d0,-(sp)
   1036e:	|         jsr 150c4 <setVariable>
   10374:	|         lea 12(sp),sp
    launchResult = &fun->reg;
   10378:	|         moveq #28,d0
   1037a:	|         add.l 32(sp),d0
   1037e:	|         move.l d0,1ca6e <launchResult>

    return BR_KEEP_AND_PAUSE;
   10384:	|         moveq #0,d0
}
   10386:	\-------> movea.l (sp)+,a6
   10388:	          lea 20(sp),sp
   1038c:	          rts

0001038e <builtIn_pause>:

builtIn(pause)
{
   1038e:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10390:	       movea.l 12(sp),a0
   10394:	       move.l 24(a0),d0
   10398:	       move.l d0,-(sp)
   1039a:	       pea 1 <_start+0x1>
   1039e:	       move.l sp,d0
   103a0:	       addq.l #8,d0
   103a2:	       move.l d0,-(sp)
   103a4:	       jsr 147d2 <getValueType>
   103aa:	       lea 12(sp),sp
   103ae:	       tst.w d0
   103b0:	   /-- bne.s 103b6 <builtIn_pause+0x28>
   103b2:	   |   moveq #1,d0
   103b4:	/--|-- bra.s 103e4 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
   103b6:	|  \-> moveq #24,d0
   103b8:	|      add.l 12(sp),d0
   103bc:	|      move.l d0,-(sp)
   103be:	|      jsr 15156 <trimStack>
   103c4:	|      addq.l #4,sp
	if (theTime > 0) {
   103c6:	|      move.l (sp),d0
   103c8:	|  /-- ble.s 103e2 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
   103ca:	|  |   move.l (sp),d0
   103cc:	|  |   subq.l #1,d0
   103ce:	|  |   movea.l 12(sp),a0
   103d2:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
   103d6:	|  |   movea.l 12(sp),a0
   103da:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
   103de:	|  |   moveq #0,d0
   103e0:	+--|-- bra.s 103e4 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
   103e2:	|  \-> moveq #2,d0
}
   103e4:	\----> addq.l #4,sp
   103e6:	       rts

000103e8 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
   103e8:	jsr 4846 <completeTimers>
	return BR_CONTINUE;
   103ee:	moveq #2,d0
}
   103f0:	rts

000103f2 <builtIn_callEvent>:

builtIn(callEvent)
{
   103f2:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   103f6:	       movea.l 20(sp),a0
   103fa:	       move.l 24(a0),d0
   103fe:	       move.l d0,-(sp)
   10400:	       pea 7 <_start+0x7>
   10404:	       lea 8(sp),a0
   10408:	       move.l a0,-(sp)
   1040a:	       jsr 147d2 <getValueType>
   10410:	       lea 12(sp),sp
   10414:	       tst.w d0
   10416:	   /-- bne.s 1041e <builtIn_callEvent+0x2c>
   10418:	   |   moveq #1,d0
   1041a:	/--|-- bra.w 104b4 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   1041e:	|  \-> moveq #24,d0
   10420:	|      add.l 20(sp),d0
   10424:	|      move.l d0,-(sp)
   10426:	|      jsr 15156 <trimStack>
   1042c:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1042e:	|      movea.l 20(sp),a0
   10432:	|      move.l 24(a0),d0
   10436:	|      move.l d0,-(sp)
   10438:	|      pea 7 <_start+0x7>
   1043c:	|      moveq #12,d0
   1043e:	|      add.l sp,d0
   10440:	|      move.l d0,-(sp)
   10442:	|      jsr 147d2 <getValueType>
   10448:	|      lea 12(sp),sp
   1044c:	|      tst.w d0
   1044e:	|  /-- bne.s 10454 <builtIn_callEvent+0x62>
   10450:	|  |   moveq #1,d0
   10452:	+--|-- bra.s 104b4 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   10454:	|  \-> moveq #24,d0
   10456:	|      add.l 20(sp),d0
   1045a:	|      move.l d0,-(sp)
   1045c:	|      jsr 15156 <trimStack>
   10462:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   10464:	|      move.l (sp),d1
   10466:	|      move.l 4(sp),d0
   1046a:	|      move.l d1,-(sp)
   1046c:	|      move.l d0,-(sp)
   1046e:	|      jsr d550 <getCombinationFunction>
   10474:	|      addq.l #8,sp
   10476:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
   1047a:	|  /-- beq.s 1049a <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   1047c:	|  |   moveq #28,d0
   1047e:	|  |   add.l 20(sp),d0
   10482:	|  |   move.l 8(sp),-(sp)
   10486:	|  |   pea 2 <_start+0x2>
   1048a:	|  |   move.l d0,-(sp)
   1048c:	|  |   jsr 150c4 <setVariable>
   10492:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
   10496:	|  |   moveq #4,d0
   10498:	+--|-- bra.s 104b4 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
   1049a:	|  \-> moveq #28,d0
   1049c:	|      add.l 20(sp),d0
   104a0:	|      clr.l -(sp)
   104a2:	|      pea 1 <_start+0x1>
   104a6:	|      move.l d0,-(sp)
   104a8:	|      jsr 150c4 <setVariable>
   104ae:	|      lea 12(sp),sp
	return BR_CONTINUE;
   104b2:	|      moveq #2,d0
}
   104b4:	\----> lea 12(sp),sp
   104b8:	       rts

000104ba <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
   104ba:	move.w #1,1ca7a <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
   104c2:	moveq #2,d0
}
   104c4:	rts

000104c6 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   104c6:	moveq #24,d0
   104c8:	add.l 8(sp),d0
   104cc:	move.l d0,-(sp)
   104ce:	jsr 15156 <trimStack>
   104d4:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
   104d6:	pea 19a0c <line.c.05397aaf+0x80>
   104dc:	jsr 17232 <KPrintF>
   104e2:	addq.l #4,sp
	return BR_CONTINUE;
   104e4:	moveq #2,d0
}
   104e6:	rts

000104e8 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
   104e8:	pea 19a0c <line.c.05397aaf+0x80>
   104ee:	jsr 17232 <KPrintF>
   104f4:	addq.l #4,sp
	return BR_CONTINUE;
   104f6:	moveq #2,d0
}
   104f8:	rts

000104fa <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
   104fa:	pea 19a0c <line.c.05397aaf+0x80>
   10500:	jsr 17232 <KPrintF>
   10506:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
   10508:	moveq #2,d0
}
   1050a:	rts

0001050c <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
   1050c:	pea 19a0c <line.c.05397aaf+0x80>
   10512:	jsr 17232 <KPrintF>
   10518:	addq.l #4,sp
	return BR_CONTINUE;
   1051a:	moveq #2,d0
}
   1051c:	rts

0001051e <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   1051e:	pea 19a0c <line.c.05397aaf+0x80>
   10524:	jsr 17232 <KPrintF>
   1052a:	addq.l #4,sp
	return BR_CONTINUE;
   1052c:	moveq #2,d0
}
   1052e:	rts

00010530 <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   10530:	pea 19a0c <line.c.05397aaf+0x80>
   10536:	jsr 17232 <KPrintF>
   1053c:	addq.l #4,sp
	return BR_CONTINUE;
   1053e:	moveq #2,d0
}
   10540:	rts

00010542 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
   10542:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10546:	       movea.l 20(sp),a0
   1054a:	       move.l 24(a0),d0
   1054e:	       move.l d0,-(sp)
   10550:	       pea 1 <_start+0x1>
   10554:	       moveq #16,d0
   10556:	       add.l sp,d0
   10558:	       move.l d0,-(sp)
   1055a:	       jsr 147d2 <getValueType>
   10560:	       lea 12(sp),sp
   10564:	       tst.w d0
   10566:	   /-- bne.s 1056e <builtIn_startMusic+0x2c>
   10568:	   |   moveq #1,d0
   1056a:	/--|-- bra.w 1060e <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   1056e:	|  \-> moveq #24,d0
   10570:	|      add.l 20(sp),d0
   10574:	|      move.l d0,-(sp)
   10576:	|      jsr 15156 <trimStack>
   1057c:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1057e:	|      movea.l 20(sp),a0
   10582:	|      move.l 24(a0),d0
   10586:	|      move.l d0,-(sp)
   10588:	|      pea 1 <_start+0x1>
   1058c:	|      moveq #12,d0
   1058e:	|      add.l sp,d0
   10590:	|      move.l d0,-(sp)
   10592:	|      jsr 147d2 <getValueType>
   10598:	|      lea 12(sp),sp
   1059c:	|      tst.w d0
   1059e:	|  /-- bne.s 105a4 <builtIn_startMusic+0x62>
   105a0:	|  |   moveq #1,d0
   105a2:	+--|-- bra.s 1060e <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   105a4:	|  \-> moveq #24,d0
   105a6:	|      add.l 20(sp),d0
   105aa:	|      move.l d0,-(sp)
   105ac:	|      jsr 15156 <trimStack>
   105b2:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   105b4:	|      movea.l 20(sp),a0
   105b8:	|      move.l 24(a0),d0
   105bc:	|      move.l d0,-(sp)
   105be:	|      pea 5 <_start+0x5>
   105c2:	|      lea 8(sp),a0
   105c6:	|      move.l a0,-(sp)
   105c8:	|      jsr 147d2 <getValueType>
   105ce:	|      lea 12(sp),sp
   105d2:	|      tst.w d0
   105d4:	|  /-- bne.s 105da <builtIn_startMusic+0x98>
   105d6:	|  |   moveq #1,d0
   105d8:	+--|-- bra.s 1060e <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   105da:	|  \-> moveq #24,d0
   105dc:	|      add.l 20(sp),d0
   105e0:	|      move.l d0,-(sp)
   105e2:	|      jsr 15156 <trimStack>
   105e8:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   105ea:	|      movea.l 8(sp),a0
   105ee:	|      move.l 4(sp),d1
   105f2:	|      move.l (sp),d0
   105f4:	|      move.l a0,-(sp)
   105f6:	|      move.l d1,-(sp)
   105f8:	|      move.l d0,-(sp)
   105fa:	|      jsr d15c <playMOD>
   10600:	|      lea 12(sp),sp
   10604:	|      tst.w d0
   10606:	|  /-- bne.s 1060c <builtIn_startMusic+0xca>
   10608:	|  |   moveq #2,d0
   1060a:	+--|-- bra.s 1060e <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   1060c:	|  \-> moveq #2,d0
}
   1060e:	\----> lea 12(sp),sp
   10612:	       rts

00010614 <builtIn_stopMusic>:

builtIn(stopMusic)
{
   10614:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10616:	       movea.l 12(sp),a0
   1061a:	       move.l 24(a0),d0
   1061e:	       move.l d0,-(sp)
   10620:	       pea 1 <_start+0x1>
   10624:	       move.l sp,d0
   10626:	       addq.l #8,d0
   10628:	       move.l d0,-(sp)
   1062a:	       jsr 147d2 <getValueType>
   10630:	       lea 12(sp),sp
   10634:	       tst.w d0
   10636:	   /-- bne.s 1063c <builtIn_stopMusic+0x28>
   10638:	   |   moveq #1,d0
   1063a:	/--|-- bra.s 1065a <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   1063c:	|  \-> moveq #24,d0
   1063e:	|      add.l 12(sp),d0
   10642:	|      move.l d0,-(sp)
   10644:	|      jsr 15156 <trimStack>
   1064a:	|      addq.l #4,sp
	stopMOD (v);
   1064c:	|      move.l (sp),d0
   1064e:	|      move.l d0,-(sp)
   10650:	|      jsr d1f8 <stopMOD>
   10656:	|      addq.l #4,sp
	return BR_CONTINUE;
   10658:	|      moveq #2,d0
}
   1065a:	\----> addq.l #4,sp
   1065c:	       rts

0001065e <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   1065e:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10660:	       movea.l 16(sp),a0
   10664:	       move.l 24(a0),d0
   10668:	       move.l d0,-(sp)
   1066a:	       pea 1 <_start+0x1>
   1066e:	       move.l sp,d0
   10670:	       addq.l #8,d0
   10672:	       move.l d0,-(sp)
   10674:	       jsr 147d2 <getValueType>
   1067a:	       lea 12(sp),sp
   1067e:	       tst.w d0
   10680:	   /-- bne.s 10686 <builtIn_setMusicVolume+0x28>
   10682:	   |   moveq #1,d0
   10684:	/--|-- bra.s 106e0 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   10686:	|  \-> moveq #24,d0
   10688:	|      add.l 16(sp),d0
   1068c:	|      move.l d0,-(sp)
   1068e:	|      jsr 15156 <trimStack>
   10694:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10696:	|      movea.l 16(sp),a0
   1069a:	|      move.l 24(a0),d0
   1069e:	|      move.l d0,-(sp)
   106a0:	|      pea 1 <_start+0x1>
   106a4:	|      moveq #12,d0
   106a6:	|      add.l sp,d0
   106a8:	|      move.l d0,-(sp)
   106aa:	|      jsr 147d2 <getValueType>
   106b0:	|      lea 12(sp),sp
   106b4:	|      tst.w d0
   106b6:	|  /-- bne.s 106bc <builtIn_setMusicVolume+0x5e>
   106b8:	|  |   moveq #1,d0
   106ba:	+--|-- bra.s 106e0 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   106bc:	|  \-> moveq #24,d0
   106be:	|      add.l 16(sp),d0
   106c2:	|      move.l d0,-(sp)
   106c4:	|      jsr 15156 <trimStack>
   106ca:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   106cc:	|      move.l (sp),d1
   106ce:	|      move.l 4(sp),d0
   106d2:	|      move.l d1,-(sp)
   106d4:	|      move.l d0,-(sp)
   106d6:	|      jsr d1de <setMusicVolume>
   106dc:	|      addq.l #8,sp
	return BR_CONTINUE;
   106de:	|      moveq #2,d0
}
   106e0:	\----> addq.l #8,sp
   106e2:	       rts

000106e4 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   106e4:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   106e6:	       movea.l 12(sp),a0
   106ea:	       move.l 24(a0),d0
   106ee:	       move.l d0,-(sp)
   106f0:	       pea 1 <_start+0x1>
   106f4:	       move.l sp,d0
   106f6:	       addq.l #8,d0
   106f8:	       move.l d0,-(sp)
   106fa:	       jsr 147d2 <getValueType>
   10700:	       lea 12(sp),sp
   10704:	       tst.w d0
   10706:	   /-- bne.s 1070c <builtIn_setDefaultMusicVolume+0x28>
   10708:	   |   moveq #1,d0
   1070a:	/--|-- bra.s 1072a <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   1070c:	|  \-> moveq #24,d0
   1070e:	|      add.l 12(sp),d0
   10712:	|      move.l d0,-(sp)
   10714:	|      jsr 15156 <trimStack>
   1071a:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   1071c:	|      move.l (sp),d0
   1071e:	|      move.l d0,-(sp)
   10720:	|      jsr d1c2 <setDefaultMusicVolume>
   10726:	|      addq.l #4,sp
	return BR_CONTINUE;
   10728:	|      moveq #2,d0
}
   1072a:	\----> addq.l #4,sp
   1072c:	       rts

0001072e <builtIn_playSound>:

builtIn(playSound)
{
   1072e:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10730:	       movea.l 12(sp),a0
   10734:	       move.l 24(a0),d0
   10738:	       move.l d0,-(sp)
   1073a:	       pea 5 <_start+0x5>
   1073e:	       move.l sp,d0
   10740:	       addq.l #8,d0
   10742:	       move.l d0,-(sp)
   10744:	       jsr 147d2 <getValueType>
   1074a:	       lea 12(sp),sp
   1074e:	       tst.w d0
   10750:	   /-- bne.s 10756 <builtIn_playSound+0x28>
   10752:	   |   moveq #1,d0
   10754:	/--|-- bra.s 1077e <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   10756:	|  \-> moveq #24,d0
   10758:	|      add.l 12(sp),d0
   1075c:	|      move.l d0,-(sp)
   1075e:	|      jsr 15156 <trimStack>
   10764:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   10766:	|      move.l (sp),d0
   10768:	|      clr.l -(sp)
   1076a:	|      move.l d0,-(sp)
   1076c:	|      jsr d1e6 <startSound>
   10772:	|      addq.l #8,sp
   10774:	|      tst.w d0
   10776:	|  /-- bne.s 1077c <builtIn_playSound+0x4e>
   10778:	|  |   moveq #2,d0
   1077a:	+--|-- bra.s 1077e <builtIn_playSound+0x50>
	return BR_CONTINUE;
   1077c:	|  \-> moveq #2,d0
}
   1077e:	\----> addq.l #4,sp
   10780:	       rts

00010782 <builtIn_loopSound>:

builtIn(loopSound)
{
   10782:	             lea -28(sp),sp
   10786:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   10788:	             tst.l 36(sp)
   1078c:	         /-- bgt.s 107a2 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   1078e:	         |   pea 19a2f <line.c.05397aaf+0xa3>
   10794:	         |   jsr 17232 <KPrintF>
   1079a:	         |   addq.l #4,sp
		return BR_ERROR;
   1079c:	         |   moveq #1,d0
   1079e:	/--------|-- bra.w 1095e <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   107a2:	|        \-> moveq #1,d0
   107a4:	|            cmp.l 36(sp),d0
   107a8:	|     /----- blt.s 10804 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   107aa:	|     |      movea.l 40(sp),a0
   107ae:	|     |      move.l 24(a0),d0
   107b2:	|     |      move.l d0,-(sp)
   107b4:	|     |      pea 5 <_start+0x5>
   107b8:	|     |      lea 16(sp),a0
   107bc:	|     |      move.l a0,-(sp)
   107be:	|     |      jsr 147d2 <getValueType>
   107c4:	|     |      lea 12(sp),sp
   107c8:	|     |      tst.w d0
   107ca:	|     |  /-- bne.s 107d2 <builtIn_loopSound+0x50>
   107cc:	|     |  |   moveq #1,d0
   107ce:	+-----|--|-- bra.w 1095e <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   107d2:	|     |  \-> moveq #24,d0
   107d4:	|     |      add.l 40(sp),d0
   107d8:	|     |      move.l d0,-(sp)
   107da:	|     |      jsr 15156 <trimStack>
   107e0:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   107e2:	|     |      move.l 8(sp),d0
   107e6:	|     |      pea 1 <_start+0x1>
   107ea:	|     |      move.l d0,-(sp)
   107ec:	|     |      jsr d1e6 <startSound>
   107f2:	|     |      addq.l #8,sp
   107f4:	|     |      tst.w d0
   107f6:	|     |  /-- bne.s 107fe <builtIn_loopSound+0x7c>
   107f8:	|     |  |   moveq #2,d0
   107fa:	+-----|--|-- bra.w 1095e <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   107fe:	|     |  \-> moveq #2,d0
   10800:	+-----|----- bra.w 1095e <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   10804:	|     \----> moveq #2,d1
   10806:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   1080a:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   1080e:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   10812:	|            movea.l 40(sp),a0
   10816:	|            movea.l 24(a0),a0
   1081a:	|            move.l (a0),d0
   1081c:	|            moveq #5,d1
   1081e:	|            cmp.l d0,d1
   10820:	|  /-------- beq.w 108f8 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   10824:	|  |         movea.l 40(sp),a0
   10828:	|  |         move.l 24(a0),d0
   1082c:	|  |         move.l d0,-(sp)
   1082e:	|  |         pea 1 <_start+0x1>
   10832:	|  |         lea 12(sp),a0
   10836:	|  |         move.l a0,-(sp)
   10838:	|  |         jsr 147d2 <getValueType>
   1083e:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   10842:	|  |         moveq #24,d0
   10844:	|  |         add.l 40(sp),d0
   10848:	|  |         move.l d0,-(sp)
   1084a:	|  |         jsr 15156 <trimStack>
   10850:	|  |         addq.l #4,sp
			numParams--;
   10852:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   10856:	|  +-------- bra.w 108f8 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   1085a:	|  |  /----> movea.l 40(sp),a0
   1085e:	|  |  |      move.l 24(a0),d0
   10862:	|  |  |      move.l d0,-(sp)
   10864:	|  |  |      pea 5 <_start+0x5>
   10868:	|  |  |      lea 16(sp),a0
   1086c:	|  |  |      move.l a0,-(sp)
   1086e:	|  |  |      jsr 147d2 <getValueType>
   10874:	|  |  |      lea 12(sp),sp
   10878:	|  |  |      tst.w d0
   1087a:	|  |  |  /-- bne.s 10890 <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   1087c:	|  |  |  |   pea 19a6d <line.c.05397aaf+0xe1>
   10882:	|  |  |  |   jsr 17232 <KPrintF>
   10888:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   1088a:	|  |  |  |   moveq #1,d0
   1088c:	+--|--|--|-- bra.w 1095e <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   10890:	|  |  |  \-> moveq #20,d0
   10892:	|  |  |      move.l d0,20(sp)
   10896:	|  |  |      clr.l 16(sp)
   1089a:	|  |  |      move.l 1c9a8 <SysBase>,d0
   108a0:	|  |  |      movea.l d0,a6
   108a2:	|  |  |      move.l 20(sp),d0
   108a6:	|  |  |      move.l 16(sp),d1
   108aa:	|  |  |      jsr -684(a6)
   108ae:	|  |  |      move.l d0,12(sp)
   108b2:	|  |  |      move.l 12(sp),d0
   108b6:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   108ba:	|  |  |  /-- bne.s 108c2 <builtIn_loopSound+0x140>
   108bc:	|  |  |  |   moveq #1,d0
   108be:	+--|--|--|-- bra.w 1095e <builtIn_loopSound+0x1dc>

			s->next = old;
   108c2:	|  |  |  \-> movea.l 28(sp),a0
   108c6:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   108cc:	|  |  |      movea.l 28(sp),a0
   108d0:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   108d4:	|  |  |      move.l 8(sp),d0
   108d8:	|  |  |      movea.l 28(sp),a0
   108dc:	|  |  |      move.l d0,(a0)
			old = s;
   108de:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   108e4:	|  |  |      moveq #24,d0
   108e6:	|  |  |      add.l 40(sp),d0
   108ea:	|  |  |      move.l d0,-(sp)
   108ec:	|  |  |      jsr 15156 <trimStack>
   108f2:	|  |  |      addq.l #4,sp
			numParams--;
   108f4:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   108f8:	|  \--|----> tst.l 36(sp)
   108fc:	|     \----- bne.w 1085a <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   10900:	|        /-- bra.s 1090c <builtIn_loopSound+0x18a>
   10902:	|     /--|-> movea.l 28(sp),a0
   10906:	|     |  |   move.l 4(a0),28(sp)
   1090c:	|     |  \-> movea.l 28(sp),a0
   10910:	|     |      move.l 4(a0),d0
   10914:	|     \----- bne.s 10902 <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   10916:	|            move.l 4(sp),d0
   1091a:	|            moveq #1,d1
   1091c:	|            cmp.l d0,d1
   1091e:	|     /----- bge.s 10936 <builtIn_loopSound+0x1b4>
			s->next = old;
   10920:	|     |      movea.l 28(sp),a0
   10924:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   1092a:	|     |      movea.l 24(sp),a0
   1092e:	|     |      move.l 28(sp),8(a0)
   10934:	|     |  /-- bra.s 10946 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   10936:	|     \--|-> move.l 4(sp),d0
   1093a:	|        +-- beq.s 10946 <builtIn_loopSound+0x1c4>
			s->next = s;
   1093c:	|        |   movea.l 28(sp),a0
   10940:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   10946:	|        \-> movea.l 24(sp),a0
   1094a:	|            moveq #-1,d0
   1094c:	|            move.l d0,16(a0)
		playSoundList(old);
   10950:	|            move.l 24(sp),-(sp)
   10954:	|            jsr d160 <playSoundList>
   1095a:	|            addq.l #4,sp
		return BR_CONTINUE;
   1095c:	|            moveq #2,d0
	}
}
   1095e:	\----------> movea.l (sp)+,a6
   10960:	             lea 28(sp),sp
   10964:	             rts

00010966 <builtIn_stopSound>:

builtIn(stopSound)
{
   10966:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10968:	       movea.l 12(sp),a0
   1096c:	       move.l 24(a0),d0
   10970:	       move.l d0,-(sp)
   10972:	       pea 5 <_start+0x5>
   10976:	       move.l sp,d0
   10978:	       addq.l #8,d0
   1097a:	       move.l d0,-(sp)
   1097c:	       jsr 147d2 <getValueType>
   10982:	       lea 12(sp),sp
   10986:	       tst.w d0
   10988:	   /-- bne.s 1098e <builtIn_stopSound+0x28>
   1098a:	   |   moveq #1,d0
   1098c:	/--|-- bra.s 109ac <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   1098e:	|  \-> moveq #24,d0
   10990:	|      add.l 12(sp),d0
   10994:	|      move.l d0,-(sp)
   10996:	|      jsr 15156 <trimStack>
   1099c:	|      addq.l #4,sp
	huntKillSound (v);
   1099e:	|      move.l (sp),d0
   109a0:	|      move.l d0,-(sp)
   109a2:	|      jsr d158 <huntKillSound>
   109a8:	|      addq.l #4,sp
	return BR_CONTINUE;
   109aa:	|      moveq #2,d0
}
   109ac:	\----> addq.l #4,sp
   109ae:	       rts

000109b0 <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   109b0:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   109b2:	       movea.l 12(sp),a0
   109b6:	       move.l 24(a0),d0
   109ba:	       move.l d0,-(sp)
   109bc:	       pea 1 <_start+0x1>
   109c0:	       move.l sp,d0
   109c2:	       addq.l #8,d0
   109c4:	       move.l d0,-(sp)
   109c6:	       jsr 147d2 <getValueType>
   109cc:	       lea 12(sp),sp
   109d0:	       tst.w d0
   109d2:	   /-- bne.s 109d8 <builtIn_setDefaultSoundVolume+0x28>
   109d4:	   |   moveq #1,d0
   109d6:	/--|-- bra.s 109f6 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   109d8:	|  \-> moveq #24,d0
   109da:	|      add.l 12(sp),d0
   109de:	|      move.l d0,-(sp)
   109e0:	|      jsr 15156 <trimStack>
   109e6:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   109e8:	|      move.l (sp),d0
   109ea:	|      move.l d0,-(sp)
   109ec:	|      jsr d1ce <setDefaultSoundVolume>
   109f2:	|      addq.l #4,sp
	return BR_CONTINUE;
   109f4:	|      moveq #2,d0
}
   109f6:	\----> addq.l #4,sp
   109f8:	       rts

000109fa <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   109fa:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   109fc:	       movea.l 16(sp),a0
   10a00:	       move.l 24(a0),d0
   10a04:	       move.l d0,-(sp)
   10a06:	       pea 1 <_start+0x1>
   10a0a:	       move.l sp,d0
   10a0c:	       addq.l #8,d0
   10a0e:	       move.l d0,-(sp)
   10a10:	       jsr 147d2 <getValueType>
   10a16:	       lea 12(sp),sp
   10a1a:	       tst.w d0
   10a1c:	   /-- bne.s 10a22 <builtIn_setSoundVolume+0x28>
   10a1e:	   |   moveq #1,d0
   10a20:	/--|-- bra.s 10a7c <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10a22:	|  \-> moveq #24,d0
   10a24:	|      add.l 16(sp),d0
   10a28:	|      move.l d0,-(sp)
   10a2a:	|      jsr 15156 <trimStack>
   10a30:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10a32:	|      movea.l 16(sp),a0
   10a36:	|      move.l 24(a0),d0
   10a3a:	|      move.l d0,-(sp)
   10a3c:	|      pea 5 <_start+0x5>
   10a40:	|      moveq #12,d0
   10a42:	|      add.l sp,d0
   10a44:	|      move.l d0,-(sp)
   10a46:	|      jsr 147d2 <getValueType>
   10a4c:	|      lea 12(sp),sp
   10a50:	|      tst.w d0
   10a52:	|  /-- bne.s 10a58 <builtIn_setSoundVolume+0x5e>
   10a54:	|  |   moveq #1,d0
   10a56:	+--|-- bra.s 10a7c <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10a58:	|  \-> moveq #24,d0
   10a5a:	|      add.l 16(sp),d0
   10a5e:	|      move.l d0,-(sp)
   10a60:	|      jsr 15156 <trimStack>
   10a66:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   10a68:	|      move.l (sp),d1
   10a6a:	|      move.l 4(sp),d0
   10a6e:	|      move.l d1,-(sp)
   10a70:	|      move.l d0,-(sp)
   10a72:	|      jsr d1e2 <setSoundVolume>
   10a78:	|      addq.l #8,sp
	return BR_CONTINUE;
   10a7a:	|      moveq #2,d0
}
   10a7c:	\----> addq.l #8,sp
   10a7e:	       rts

00010a80 <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   10a80:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a84:	       movea.l 20(sp),a0
   10a88:	       move.l 24(a0),d0
   10a8c:	       move.l d0,-(sp)
   10a8e:	       pea 1 <_start+0x1>
   10a92:	       moveq #12,d0
   10a94:	       add.l sp,d0
   10a96:	       move.l d0,-(sp)
   10a98:	       jsr 147d2 <getValueType>
   10a9e:	       lea 12(sp),sp
   10aa2:	       tst.w d0
   10aa4:	   /-- bne.s 10aac <builtIn_setSoundLoopPoints+0x2c>
   10aa6:	   |   moveq #1,d0
   10aa8:	/--|-- bra.w 10b44 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10aac:	|  \-> moveq #24,d0
   10aae:	|      add.l 20(sp),d0
   10ab2:	|      move.l d0,-(sp)
   10ab4:	|      jsr 15156 <trimStack>
   10aba:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10abc:	|      movea.l 20(sp),a0
   10ac0:	|      move.l 24(a0),d0
   10ac4:	|      move.l d0,-(sp)
   10ac6:	|      pea 1 <_start+0x1>
   10aca:	|      lea 8(sp),a0
   10ace:	|      move.l a0,-(sp)
   10ad0:	|      jsr 147d2 <getValueType>
   10ad6:	|      lea 12(sp),sp
   10ada:	|      tst.w d0
   10adc:	|  /-- bne.s 10ae2 <builtIn_setSoundLoopPoints+0x62>
   10ade:	|  |   moveq #1,d0
   10ae0:	+--|-- bra.s 10b44 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10ae2:	|  \-> moveq #24,d0
   10ae4:	|      add.l 20(sp),d0
   10ae8:	|      move.l d0,-(sp)
   10aea:	|      jsr 15156 <trimStack>
   10af0:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10af2:	|      movea.l 20(sp),a0
   10af6:	|      move.l 24(a0),d0
   10afa:	|      move.l d0,-(sp)
   10afc:	|      pea 5 <_start+0x5>
   10b00:	|      moveq #16,d0
   10b02:	|      add.l sp,d0
   10b04:	|      move.l d0,-(sp)
   10b06:	|      jsr 147d2 <getValueType>
   10b0c:	|      lea 12(sp),sp
   10b10:	|      tst.w d0
   10b12:	|  /-- bne.s 10b18 <builtIn_setSoundLoopPoints+0x98>
   10b14:	|  |   moveq #1,d0
   10b16:	+--|-- bra.s 10b44 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10b18:	|  \-> moveq #24,d0
   10b1a:	|      add.l 20(sp),d0
   10b1e:	|      move.l d0,-(sp)
   10b20:	|      jsr 15156 <trimStack>
   10b26:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   10b28:	|      movea.l 4(sp),a0
   10b2c:	|      move.l (sp),d1
   10b2e:	|      move.l 8(sp),d0
   10b32:	|      move.l a0,-(sp)
   10b34:	|      move.l d1,-(sp)
   10b36:	|      move.l d0,-(sp)
   10b38:	|      jsr d1da <setSoundLoop>
   10b3e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10b42:	|      moveq #2,d0
}
   10b44:	\----> lea 12(sp),sp
   10b48:	       rts

00010b4a <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   10b4a:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10b4c:	          movea.l 12(sp),a0
   10b50:	          movea.l 24(a0),a0
   10b54:	          move.l (a0),d0
   10b56:	          moveq #5,d1
   10b58:	          cmp.l d0,d1
   10b5a:	/-------- bne.s 10b9e <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10b5c:	|         movea.l 12(sp),a0
   10b60:	|         move.l 24(a0),d0
   10b64:	|         move.l d0,-(sp)
   10b66:	|         pea 5 <_start+0x5>
   10b6a:	|         move.l sp,d0
   10b6c:	|         addq.l #8,d0
   10b6e:	|         move.l d0,-(sp)
   10b70:	|         jsr 147d2 <getValueType>
   10b76:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10b7a:	|         moveq #24,d0
   10b7c:	|         add.l 12(sp),d0
   10b80:	|         move.l d0,-(sp)
   10b82:	|         jsr 15156 <trimStack>
   10b88:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   10b8a:	|         move.l (sp),d0
   10b8c:	|         move.l d0,-(sp)
   10b8e:	|         jsr 169dc <setFloor>
   10b94:	|         addq.l #4,sp
   10b96:	|         tst.w d0
   10b98:	|  /----- bne.s 10bb4 <builtIn_setFloor+0x6a>
   10b9a:	|  |      moveq #1,d0
   10b9c:	|  |  /-- bra.s 10bb6 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
   10b9e:	\--|--|-> moveq #24,d0
   10ba0:	   |  |   add.l 12(sp),d0
   10ba4:	   |  |   move.l d0,-(sp)
   10ba6:	   |  |   jsr 15156 <trimStack>
   10bac:	   |  |   addq.l #4,sp
		setFloorNull ();
   10bae:	   |  |   jsr 17156 <setFloorNull>
	}
	return BR_CONTINUE;
   10bb4:	   \--|-> moveq #2,d0
}
   10bb6:	      \-> addq.l #4,sp
   10bb8:	          rts

00010bba <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
   10bba:	jsr 16274 <drawFloor>
	return BR_CONTINUE;
   10bc0:	moveq #2,d0
}
   10bc2:	rts

00010bc4 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   10bc4:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10bc6:	          movea.l 12(sp),a0
   10bca:	          movea.l 24(a0),a0
   10bce:	          move.l (a0),d0
   10bd0:	          moveq #5,d1
   10bd2:	          cmp.l d0,d1
   10bd4:	/-------- bne.s 10c18 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10bd6:	|         movea.l 12(sp),a0
   10bda:	|         move.l 24(a0),d0
   10bde:	|         move.l d0,-(sp)
   10be0:	|         pea 5 <_start+0x5>
   10be4:	|         move.l sp,d0
   10be6:	|         addq.l #8,d0
   10be8:	|         move.l d0,-(sp)
   10bea:	|         jsr 147d2 <getValueType>
   10bf0:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10bf4:	|         moveq #24,d0
   10bf6:	|         add.l 12(sp),d0
   10bfa:	|         move.l d0,-(sp)
   10bfc:	|         jsr 15156 <trimStack>
   10c02:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   10c04:	|         move.l (sp),d0
   10c06:	|         move.l d0,-(sp)
   10c08:	|         jsr 876a <setZBuffer>
   10c0e:	|         addq.l #4,sp
   10c10:	|         tst.w d0
   10c12:	|  /----- bne.s 10c2e <builtIn_setZBuffer+0x6a>
   10c14:	|  |      moveq #1,d0
   10c16:	|  |  /-- bra.s 10c30 <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
   10c18:	\--|--|-> moveq #24,d0
   10c1a:	   |  |   add.l 12(sp),d0
   10c1e:	   |  |   move.l d0,-(sp)
   10c20:	   |  |   jsr 15156 <trimStack>
   10c26:	   |  |   addq.l #4,sp
		killZBuffer ();
   10c28:	   |  |   jsr 871e <killZBuffer>
	}
	return BR_CONTINUE;
   10c2e:	   \--|-> moveq #2,d0
}
   10c30:	      \-> addq.l #4,sp
   10c32:	          rts

00010c34 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   10c34:	pea 19aa4 <line.c.05397aaf+0x118>
   10c3a:	jsr 17232 <KPrintF>
   10c40:	addq.l #4,sp
	return BR_CONTINUE;
   10c42:	moveq #2,d0
}
   10c44:	rts

00010c46 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10c46:	          movea.l 8(sp),a0
   10c4a:	          move.l 24(a0),d0
   10c4e:	          move.l d0,-(sp)
   10c50:	          pea 1 <_start+0x1>
   10c54:	          pea 1ca76 <speechMode>
   10c5a:	          jsr 147d2 <getValueType>
   10c60:	          lea 12(sp),sp
   10c64:	          tst.w d0
   10c66:	      /-- bne.s 10c6c <builtIn_setSpeechMode+0x26>
   10c68:	      |   moveq #1,d0
   10c6a:	/-----|-- bra.s 10ca4 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
   10c6c:	|     \-> moveq #24,d0
   10c6e:	|         add.l 8(sp),d0
   10c72:	|         move.l d0,-(sp)
   10c74:	|         jsr 15156 <trimStack>
   10c7a:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   10c7c:	|         move.l 1ca76 <speechMode>,d0
   10c82:	|     /-- bmi.s 10c90 <builtIn_setSpeechMode+0x4a>
   10c84:	|     |   move.l 1ca76 <speechMode>,d0
   10c8a:	|     |   moveq #2,d1
   10c8c:	|     |   cmp.l d0,d1
   10c8e:	|  /--|-- bge.s 10ca2 <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   10c90:	|  |  \-> pea 19abd <line.c.05397aaf+0x131>
   10c96:	|  |      jsr 17232 <KPrintF>
   10c9c:	|  |      addq.l #4,sp
		return BR_ERROR;
   10c9e:	|  |      moveq #1,d0
   10ca0:	+--|----- bra.s 10ca4 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
   10ca2:	|  \----> moveq #2,d0
}
   10ca4:	\-------> rts

00010ca6 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   10ca6:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   10ca8:	       jsr 7f26 <isThereAnySpeechGoingOn>
   10cae:	       move.l d0,(sp)
	if (i == -1) {
   10cb0:	       moveq #-1,d0
   10cb2:	       cmp.l (sp),d0
   10cb4:	/----- bne.s 10cd0 <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
   10cb6:	|      moveq #28,d0
   10cb8:	|      add.l 12(sp),d0
   10cbc:	|      clr.l -(sp)
   10cbe:	|      pea 1 <_start+0x1>
   10cc2:	|      move.l d0,-(sp)
   10cc4:	|      jsr 150c4 <setVariable>
   10cca:	|      lea 12(sp),sp
   10cce:	|  /-- bra.s 10ce8 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   10cd0:	\--|-> moveq #28,d0
   10cd2:	   |   add.l 12(sp),d0
   10cd6:	   |   move.l (sp),-(sp)
   10cd8:	   |   pea 7 <_start+0x7>
   10cdc:	   |   move.l d0,-(sp)
   10cde:	   |   jsr 150c4 <setVariable>
   10ce4:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10ce8:	   \-> moveq #2,d0
}
   10cea:	       addq.l #4,sp
   10cec:	       rts

00010cee <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
   10cee:	jsr 6200 <killSpeechTimers>
	return BR_CONTINUE;
   10cf4:	moveq #2,d0
}
   10cf6:	rts

00010cf8 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
   10cf8:	       move.l 1cabc <overRegion>,d0
   10cfe:	/----- beq.s 10d28 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   10d00:	|      movea.l 1cabc <overRegion>,a0
   10d06:	|      movea.l 28(a0),a0
   10d0a:	|      move.l 4(a0),d1
   10d0e:	|      moveq #28,d0
   10d10:	|      add.l 8(sp),d0
   10d14:	|      move.l d1,-(sp)
   10d16:	|      pea 7 <_start+0x7>
   10d1a:	|      move.l d0,-(sp)
   10d1c:	|      jsr 150c4 <setVariable>
   10d22:	|      lea 12(sp),sp
   10d26:	|  /-- bra.s 10d40 <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   10d28:	\--|-> moveq #28,d0
   10d2a:	   |   add.l 8(sp),d0
   10d2e:	   |   clr.l -(sp)
   10d30:	   |   pea 1 <_start+0x1>
   10d34:	   |   move.l d0,-(sp)
   10d36:	   |   jsr 150c4 <setVariable>
   10d3c:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   10d40:	   \-> moveq #2,d0
}
   10d42:	       rts

00010d44 <builtIn_rename>:

builtIn(rename)
{
   10d44:	       lea -16(sp),sp
   10d48:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10d4a:	       movea.l 28(sp),a0
   10d4e:	       move.l 24(a0),d0
   10d52:	       move.l d0,-(sp)
   10d54:	       jsr 14da8 <getTextFromAnyVar>
   10d5a:	       addq.l #4,sp
   10d5c:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   10d60:	   /-- bne.s 10d66 <builtIn_rename+0x22>
   10d62:	   |   moveq #1,d0
   10d64:	/--|-- bra.s 10de0 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10d66:	|  \-> moveq #24,d0
   10d68:	|      add.l 28(sp),d0
   10d6c:	|      move.l d0,-(sp)
   10d6e:	|      jsr 15156 <trimStack>
   10d74:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   10d76:	|      movea.l 28(sp),a0
   10d7a:	|      move.l 24(a0),d0
   10d7e:	|      move.l d0,-(sp)
   10d80:	|      pea 7 <_start+0x7>
   10d84:	|      lea 12(sp),a0
   10d88:	|      move.l a0,-(sp)
   10d8a:	|      jsr 147d2 <getValueType>
   10d90:	|      lea 12(sp),sp
   10d94:	|      tst.w d0
   10d96:	|  /-- bne.s 10d9c <builtIn_rename+0x58>
   10d98:	|  |   moveq #1,d0
   10d9a:	+--|-- bra.s 10de0 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10d9c:	|  \-> moveq #24,d0
   10d9e:	|      add.l 28(sp),d0
   10da2:	|      move.l d0,-(sp)
   10da4:	|      jsr 15156 <trimStack>
   10daa:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   10dac:	|      move.l 4(sp),d0
   10db0:	|      move.l d0,-(sp)
   10db2:	|      jsr d51c <findObjectType>
   10db8:	|      addq.l #4,sp
   10dba:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   10dbe:	|      movea.l 12(sp),a0
   10dc2:	|      move.l (a0),8(sp)
   10dc6:	|      move.l 1c9a8 <SysBase>,d0
   10dcc:	|      movea.l d0,a6
   10dce:	|      movea.l 8(sp),a1
   10dd2:	|      jsr -690(a6)
	o->screenName = newText;
   10dd6:	|      movea.l 12(sp),a0
   10dda:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   10dde:	|      moveq #2,d0
}
   10de0:	\----> movea.l (sp)+,a6
   10de2:	       lea 16(sp),sp
   10de6:	       rts

00010de8 <builtIn_getObjectX>:

builtIn (getObjectX)
{
   10de8:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10dec:	          movea.l 20(sp),a0
   10df0:	          move.l 24(a0),d0
   10df4:	          move.l d0,-(sp)
   10df6:	          pea 7 <_start+0x7>
   10dfa:	          lea 8(sp),a0
   10dfe:	          move.l a0,-(sp)
   10e00:	          jsr 147d2 <getValueType>
   10e06:	          lea 12(sp),sp
   10e0a:	          tst.w d0
   10e0c:	      /-- bne.s 10e14 <builtIn_getObjectX+0x2c>
   10e0e:	      |   moveq #1,d0
   10e10:	/-----|-- bra.w 10eb0 <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
   10e14:	|     \-> moveq #24,d0
   10e16:	|         add.l 20(sp),d0
   10e1a:	|         move.l d0,-(sp)
   10e1c:	|         jsr 15156 <trimStack>
   10e22:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10e24:	|         move.l (sp),d0
   10e26:	|         move.l d0,-(sp)
   10e28:	|         jsr a626 <findPerson>
   10e2e:	|         addq.l #4,sp
   10e30:	|         move.l d0,8(sp)
	if (pers) {
   10e34:	|     /-- beq.s 10e62 <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   10e36:	|     |   movea.l 8(sp),a0
   10e3a:	|     |   move.l (a0),d0
   10e3c:	|     |   move.l d0,-(sp)
   10e3e:	|     |   jsr 175fc <__fixsfsi>
   10e44:	|     |   addq.l #4,sp
   10e46:	|     |   move.l d0,d1
   10e48:	|     |   moveq #28,d0
   10e4a:	|     |   add.l 20(sp),d0
   10e4e:	|     |   move.l d1,-(sp)
   10e50:	|     |   pea 1 <_start+0x1>
   10e54:	|     |   move.l d0,-(sp)
   10e56:	|     |   jsr 150c4 <setVariable>
   10e5c:	|     |   lea 12(sp),sp
   10e60:	|  /--|-- bra.s 10eae <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10e62:	|  |  \-> move.l (sp),d0
   10e64:	|  |      move.l d0,-(sp)
   10e66:	|  |      jsr 15a14 <getRegionForObject>
   10e6c:	|  |      addq.l #4,sp
   10e6e:	|  |      move.l d0,4(sp)
		if (la) {
   10e72:	|  |  /-- beq.s 10e96 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   10e74:	|  |  |   movea.l 4(sp),a0
   10e78:	|  |  |   move.l 16(a0),d1
   10e7c:	|  |  |   moveq #28,d0
   10e7e:	|  |  |   add.l 20(sp),d0
   10e82:	|  |  |   move.l d1,-(sp)
   10e84:	|  |  |   pea 1 <_start+0x1>
   10e88:	|  |  |   move.l d0,-(sp)
   10e8a:	|  |  |   jsr 150c4 <setVariable>
   10e90:	|  |  |   lea 12(sp),sp
   10e94:	|  +--|-- bra.s 10eae <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10e96:	|  |  \-> moveq #28,d0
   10e98:	|  |      add.l 20(sp),d0
   10e9c:	|  |      clr.l -(sp)
   10e9e:	|  |      pea 1 <_start+0x1>
   10ea2:	|  |      move.l d0,-(sp)
   10ea4:	|  |      jsr 150c4 <setVariable>
   10eaa:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10eae:	|  \----> moveq #2,d0
}
   10eb0:	\-------> lea 12(sp),sp
   10eb4:	          rts

00010eb6 <builtIn_getObjectY>:

builtIn (getObjectY)
{
   10eb6:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10eba:	          movea.l 20(sp),a0
   10ebe:	          move.l 24(a0),d0
   10ec2:	          move.l d0,-(sp)
   10ec4:	          pea 7 <_start+0x7>
   10ec8:	          lea 8(sp),a0
   10ecc:	          move.l a0,-(sp)
   10ece:	          jsr 147d2 <getValueType>
   10ed4:	          lea 12(sp),sp
   10ed8:	          tst.w d0
   10eda:	      /-- bne.s 10ee2 <builtIn_getObjectY+0x2c>
   10edc:	      |   moveq #1,d0
   10ede:	/-----|-- bra.w 10f80 <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
   10ee2:	|     \-> moveq #24,d0
   10ee4:	|         add.l 20(sp),d0
   10ee8:	|         move.l d0,-(sp)
   10eea:	|         jsr 15156 <trimStack>
   10ef0:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10ef2:	|         move.l (sp),d0
   10ef4:	|         move.l d0,-(sp)
   10ef6:	|         jsr a626 <findPerson>
   10efc:	|         addq.l #4,sp
   10efe:	|         move.l d0,8(sp)
	if (pers) {
   10f02:	|     /-- beq.s 10f32 <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   10f04:	|     |   movea.l 8(sp),a0
   10f08:	|     |   move.l 4(a0),d0
   10f0c:	|     |   move.l d0,-(sp)
   10f0e:	|     |   jsr 175fc <__fixsfsi>
   10f14:	|     |   addq.l #4,sp
   10f16:	|     |   move.l d0,d1
   10f18:	|     |   moveq #28,d0
   10f1a:	|     |   add.l 20(sp),d0
   10f1e:	|     |   move.l d1,-(sp)
   10f20:	|     |   pea 1 <_start+0x1>
   10f24:	|     |   move.l d0,-(sp)
   10f26:	|     |   jsr 150c4 <setVariable>
   10f2c:	|     |   lea 12(sp),sp
   10f30:	|  /--|-- bra.s 10f7e <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10f32:	|  |  \-> move.l (sp),d0
   10f34:	|  |      move.l d0,-(sp)
   10f36:	|  |      jsr 15a14 <getRegionForObject>
   10f3c:	|  |      addq.l #4,sp
   10f3e:	|  |      move.l d0,4(sp)
		if (la) {
   10f42:	|  |  /-- beq.s 10f66 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   10f44:	|  |  |   movea.l 4(sp),a0
   10f48:	|  |  |   move.l 20(a0),d1
   10f4c:	|  |  |   moveq #28,d0
   10f4e:	|  |  |   add.l 20(sp),d0
   10f52:	|  |  |   move.l d1,-(sp)
   10f54:	|  |  |   pea 1 <_start+0x1>
   10f58:	|  |  |   move.l d0,-(sp)
   10f5a:	|  |  |   jsr 150c4 <setVariable>
   10f60:	|  |  |   lea 12(sp),sp
   10f64:	|  +--|-- bra.s 10f7e <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10f66:	|  |  \-> moveq #28,d0
   10f68:	|  |      add.l 20(sp),d0
   10f6c:	|  |      clr.l -(sp)
   10f6e:	|  |      pea 1 <_start+0x1>
   10f72:	|  |      move.l d0,-(sp)
   10f74:	|  |      jsr 150c4 <setVariable>
   10f7a:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10f7e:	|  \----> moveq #2,d0
}
   10f80:	\-------> lea 12(sp),sp
   10f84:	          rts

00010f86 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   10f86:	       lea -32(sp),sp
   10f8a:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10f8e:	       movea.l 56(sp),a0
   10f92:	       move.l 24(a0),d0
   10f96:	       move.l d0,-(sp)
   10f98:	       pea 1 <_start+0x1>
   10f9c:	       lea 28(sp),a0
   10fa0:	       move.l a0,-(sp)
   10fa2:	       jsr 147d2 <getValueType>
   10fa8:	       lea 12(sp),sp
   10fac:	       tst.w d0
   10fae:	   /-- bne.s 10fb6 <builtIn_addScreenRegion+0x30>
   10fb0:	   |   moveq #1,d0
   10fb2:	/--|-- bra.w 11190 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10fb6:	|  \-> moveq #24,d0
   10fb8:	|      add.l 56(sp),d0
   10fbc:	|      move.l d0,-(sp)
   10fbe:	|      jsr 15156 <trimStack>
   10fc4:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10fc6:	|      movea.l 56(sp),a0
   10fca:	|      move.l 24(a0),d0
   10fce:	|      move.l d0,-(sp)
   10fd0:	|      pea 1 <_start+0x1>
   10fd4:	|      moveq #48,d0
   10fd6:	|      add.l sp,d0
   10fd8:	|      move.l d0,-(sp)
   10fda:	|      jsr 147d2 <getValueType>
   10fe0:	|      lea 12(sp),sp
   10fe4:	|      tst.w d0
   10fe6:	|  /-- bne.s 10fee <builtIn_addScreenRegion+0x68>
   10fe8:	|  |   moveq #1,d0
   10fea:	+--|-- bra.w 11190 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10fee:	|  \-> moveq #24,d0
   10ff0:	|      add.l 56(sp),d0
   10ff4:	|      move.l d0,-(sp)
   10ff6:	|      jsr 15156 <trimStack>
   10ffc:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10ffe:	|      movea.l 56(sp),a0
   11002:	|      move.l 24(a0),d0
   11006:	|      move.l d0,-(sp)
   11008:	|      pea 1 <_start+0x1>
   1100c:	|      moveq #52,d0
   1100e:	|      add.l sp,d0
   11010:	|      move.l d0,-(sp)
   11012:	|      jsr 147d2 <getValueType>
   11018:	|      lea 12(sp),sp
   1101c:	|      tst.w d0
   1101e:	|  /-- bne.s 11026 <builtIn_addScreenRegion+0xa0>
   11020:	|  |   moveq #1,d0
   11022:	+--|-- bra.w 11190 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11026:	|  \-> moveq #24,d0
   11028:	|      add.l 56(sp),d0
   1102c:	|      move.l d0,-(sp)
   1102e:	|      jsr 15156 <trimStack>
   11034:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11036:	|      movea.l 56(sp),a0
   1103a:	|      move.l 24(a0),d0
   1103e:	|      move.l d0,-(sp)
   11040:	|      pea 1 <_start+0x1>
   11044:	|      lea 32(sp),a0
   11048:	|      move.l a0,-(sp)
   1104a:	|      jsr 147d2 <getValueType>
   11050:	|      lea 12(sp),sp
   11054:	|      tst.w d0
   11056:	|  /-- bne.s 1105e <builtIn_addScreenRegion+0xd8>
   11058:	|  |   moveq #1,d0
   1105a:	+--|-- bra.w 11190 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1105e:	|  \-> moveq #24,d0
   11060:	|      add.l 56(sp),d0
   11064:	|      move.l d0,-(sp)
   11066:	|      jsr 15156 <trimStack>
   1106c:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1106e:	|      movea.l 56(sp),a0
   11072:	|      move.l 24(a0),d0
   11076:	|      move.l d0,-(sp)
   11078:	|      pea 1 <_start+0x1>
   1107c:	|      lea 36(sp),a0
   11080:	|      move.l a0,-(sp)
   11082:	|      jsr 147d2 <getValueType>
   11088:	|      lea 12(sp),sp
   1108c:	|      tst.w d0
   1108e:	|  /-- bne.s 11096 <builtIn_addScreenRegion+0x110>
   11090:	|  |   moveq #1,d0
   11092:	+--|-- bra.w 11190 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11096:	|  \-> moveq #24,d0
   11098:	|      add.l 56(sp),d0
   1109c:	|      move.l d0,-(sp)
   1109e:	|      jsr 15156 <trimStack>
   110a4:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   110a6:	|      movea.l 56(sp),a0
   110aa:	|      move.l 24(a0),d0
   110ae:	|      move.l d0,-(sp)
   110b0:	|      pea 1 <_start+0x1>
   110b4:	|      lea 40(sp),a0
   110b8:	|      move.l a0,-(sp)
   110ba:	|      jsr 147d2 <getValueType>
   110c0:	|      lea 12(sp),sp
   110c4:	|      tst.w d0
   110c6:	|  /-- bne.s 110ce <builtIn_addScreenRegion+0x148>
   110c8:	|  |   moveq #1,d0
   110ca:	+--|-- bra.w 11190 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   110ce:	|  \-> moveq #24,d0
   110d0:	|      add.l 56(sp),d0
   110d4:	|      move.l d0,-(sp)
   110d6:	|      jsr 15156 <trimStack>
   110dc:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   110de:	|      movea.l 56(sp),a0
   110e2:	|      move.l 24(a0),d0
   110e6:	|      move.l d0,-(sp)
   110e8:	|      pea 1 <_start+0x1>
   110ec:	|      lea 44(sp),a0
   110f0:	|      move.l a0,-(sp)
   110f2:	|      jsr 147d2 <getValueType>
   110f8:	|      lea 12(sp),sp
   110fc:	|      tst.w d0
   110fe:	|  /-- bne.s 11106 <builtIn_addScreenRegion+0x180>
   11100:	|  |   moveq #1,d0
   11102:	+--|-- bra.w 11190 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11106:	|  \-> moveq #24,d0
   11108:	|      add.l 56(sp),d0
   1110c:	|      move.l d0,-(sp)
   1110e:	|      jsr 15156 <trimStack>
   11114:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11116:	|      movea.l 56(sp),a0
   1111a:	|      move.l 24(a0),d0
   1111e:	|      move.l d0,-(sp)
   11120:	|      pea 7 <_start+0x7>
   11124:	|      lea 24(sp),a0
   11128:	|      move.l a0,-(sp)
   1112a:	|      jsr 147d2 <getValueType>
   11130:	|      lea 12(sp),sp
   11134:	|      tst.w d0
   11136:	|  /-- bne.s 1113c <builtIn_addScreenRegion+0x1b6>
   11138:	|  |   moveq #1,d0
   1113a:	+--|-- bra.s 11190 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1113c:	|  \-> moveq #24,d0
   1113e:	|      add.l 56(sp),d0
   11142:	|      move.l d0,-(sp)
   11144:	|      jsr 15156 <trimStack>
   1114a:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   1114c:	|      move.l 16(sp),d5
   11150:	|      move.l 20(sp),d4
   11154:	|      move.l 40(sp),d3
   11158:	|      move.l 44(sp),d2
   1115c:	|      movea.l 24(sp),a1
   11160:	|      movea.l 28(sp),a0
   11164:	|      move.l 32(sp),d1
   11168:	|      move.l 36(sp),d0
   1116c:	|      move.l d5,-(sp)
   1116e:	|      move.l d4,-(sp)
   11170:	|      move.l d3,-(sp)
   11172:	|      move.l d2,-(sp)
   11174:	|      move.l a1,-(sp)
   11176:	|      move.l a0,-(sp)
   11178:	|      move.l d1,-(sp)
   1117a:	|      move.l d0,-(sp)
   1117c:	|      jsr 158ce <addScreenRegion>
   11182:	|      lea 32(sp),sp
   11186:	|      tst.w d0
   11188:	|  /-- beq.s 1118e <builtIn_addScreenRegion+0x208>
   1118a:	|  |   moveq #2,d0
   1118c:	+--|-- bra.s 11190 <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   1118e:	|  \-> moveq #1,d0

}
   11190:	\----> movem.l (sp)+,d2-d5
   11194:	       lea 32(sp),sp
   11198:	       rts

0001119a <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   1119a:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1119c:	       movea.l 12(sp),a0
   111a0:	       move.l 24(a0),d0
   111a4:	       move.l d0,-(sp)
   111a6:	       pea 7 <_start+0x7>
   111aa:	       move.l sp,d0
   111ac:	       addq.l #8,d0
   111ae:	       move.l d0,-(sp)
   111b0:	       jsr 147d2 <getValueType>
   111b6:	       lea 12(sp),sp
   111ba:	       tst.w d0
   111bc:	   /-- bne.s 111c2 <builtIn_removeScreenRegion+0x28>
   111be:	   |   moveq #1,d0
   111c0:	/--|-- bra.s 111e0 <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   111c2:	|  \-> moveq #24,d0
   111c4:	|      add.l 12(sp),d0
   111c8:	|      move.l d0,-(sp)
   111ca:	|      jsr 15156 <trimStack>
   111d0:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   111d2:	|      move.l (sp),d0
   111d4:	|      move.l d0,-(sp)
   111d6:	|      jsr 15bbc <removeScreenRegion>
   111dc:	|      addq.l #4,sp
	return BR_CONTINUE;
   111de:	|      moveq #2,d0
}
   111e0:	\----> addq.l #4,sp
   111e2:	       rts

000111e4 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   111e4:	jsr 15d40 <showBoxes>
	return BR_CONTINUE;
   111ea:	moveq #2,d0
}
   111ec:	rts

000111ee <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   111ee:	jsr 15a42 <killAllRegions>
	return BR_CONTINUE;
   111f4:	moveq #2,d0
}
   111f6:	rts

000111f8 <builtIn_addCharacter>:

builtIn(addCharacter)
{
   111f8:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   111fc:	       movea.l 24(sp),a0
   11200:	       move.l 24(a0),d0
   11204:	       move.l d0,-(sp)
   11206:	       jsr 1447e <getCostumeFromVar>
   1120c:	       addq.l #4,sp
   1120e:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   11212:	   /-- bne.s 1121a <builtIn_addCharacter+0x22>
   11214:	   |   moveq #1,d0
   11216:	/--|-- bra.w 112f6 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   1121a:	|  \-> moveq #24,d0
   1121c:	|      add.l 24(sp),d0
   11220:	|      move.l d0,-(sp)
   11222:	|      jsr 15156 <trimStack>
   11228:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1122a:	|      movea.l 24(sp),a0
   1122e:	|      move.l 24(a0),d0
   11232:	|      move.l d0,-(sp)
   11234:	|      pea 1 <_start+0x1>
   11238:	|      lea 12(sp),a0
   1123c:	|      move.l a0,-(sp)
   1123e:	|      jsr 147d2 <getValueType>
   11244:	|      lea 12(sp),sp
   11248:	|      tst.w d0
   1124a:	|  /-- bne.s 11252 <builtIn_addCharacter+0x5a>
   1124c:	|  |   moveq #1,d0
   1124e:	+--|-- bra.w 112f6 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   11252:	|  \-> moveq #24,d0
   11254:	|      add.l 24(sp),d0
   11258:	|      move.l d0,-(sp)
   1125a:	|      jsr 15156 <trimStack>
   11260:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11262:	|      movea.l 24(sp),a0
   11266:	|      move.l 24(a0),d0
   1126a:	|      move.l d0,-(sp)
   1126c:	|      pea 1 <_start+0x1>
   11270:	|      moveq #16,d0
   11272:	|      add.l sp,d0
   11274:	|      move.l d0,-(sp)
   11276:	|      jsr 147d2 <getValueType>
   1127c:	|      lea 12(sp),sp
   11280:	|      tst.w d0
   11282:	|  /-- bne.s 11288 <builtIn_addCharacter+0x90>
   11284:	|  |   moveq #1,d0
   11286:	+--|-- bra.s 112f6 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   11288:	|  \-> moveq #24,d0
   1128a:	|      add.l 24(sp),d0
   1128e:	|      move.l d0,-(sp)
   11290:	|      jsr 15156 <trimStack>
   11296:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11298:	|      movea.l 24(sp),a0
   1129c:	|      move.l 24(a0),d0
   112a0:	|      move.l d0,-(sp)
   112a2:	|      pea 7 <_start+0x7>
   112a6:	|      lea 8(sp),a0
   112aa:	|      move.l a0,-(sp)
   112ac:	|      jsr 147d2 <getValueType>
   112b2:	|      lea 12(sp),sp
   112b6:	|      tst.w d0
   112b8:	|  /-- bne.s 112be <builtIn_addCharacter+0xc6>
   112ba:	|  |   moveq #1,d0
   112bc:	+--|-- bra.s 112f6 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   112be:	|  \-> moveq #24,d0
   112c0:	|      add.l 24(sp),d0
   112c4:	|      move.l d0,-(sp)
   112c6:	|      jsr 15156 <trimStack>
   112cc:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   112ce:	|      movea.l (sp),a0
   112d0:	|      move.l 4(sp),d1
   112d4:	|      move.l 8(sp),d0
   112d8:	|      move.l 12(sp),-(sp)
   112dc:	|      move.l a0,-(sp)
   112de:	|      move.l d1,-(sp)
   112e0:	|      move.l d0,-(sp)
   112e2:	|      jsr 9220 <addPerson>
   112e8:	|      lea 16(sp),sp
   112ec:	|      tst.w d0
   112ee:	|  /-- beq.s 112f4 <builtIn_addCharacter+0xfc>
   112f0:	|  |   moveq #2,d0
   112f2:	+--|-- bra.s 112f6 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   112f4:	|  \-> moveq #1,d0
}
   112f6:	\----> lea 16(sp),sp
   112fa:	       rts

000112fc <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   112fc:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   112fe:	       movea.l 12(sp),a0
   11302:	       move.l 24(a0),d0
   11306:	       move.l d0,-(sp)
   11308:	       pea 7 <_start+0x7>
   1130c:	       move.l sp,d0
   1130e:	       addq.l #8,d0
   11310:	       move.l d0,-(sp)
   11312:	       jsr 147d2 <getValueType>
   11318:	       lea 12(sp),sp
   1131c:	       tst.w d0
   1131e:	   /-- bne.s 11324 <builtIn_hideCharacter+0x28>
   11320:	   |   moveq #1,d0
   11322:	/--|-- bra.s 11344 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   11324:	|  \-> moveq #24,d0
   11326:	|      add.l 12(sp),d0
   1132a:	|      move.l d0,-(sp)
   1132c:	|      jsr 15156 <trimStack>
   11332:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   11334:	|      move.l (sp),d0
   11336:	|      move.l d0,-(sp)
   11338:	|      clr.l -(sp)
   1133a:	|      jsr bc5a <setShown>
   11340:	|      addq.l #8,sp
	return BR_CONTINUE;
   11342:	|      moveq #2,d0
}
   11344:	\----> addq.l #4,sp
   11346:	       rts

00011348 <builtIn_showCharacter>:

builtIn(showCharacter)
{
   11348:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1134a:	       movea.l 12(sp),a0
   1134e:	       move.l 24(a0),d0
   11352:	       move.l d0,-(sp)
   11354:	       pea 7 <_start+0x7>
   11358:	       move.l sp,d0
   1135a:	       addq.l #8,d0
   1135c:	       move.l d0,-(sp)
   1135e:	       jsr 147d2 <getValueType>
   11364:	       lea 12(sp),sp
   11368:	       tst.w d0
   1136a:	   /-- bne.s 11370 <builtIn_showCharacter+0x28>
   1136c:	   |   moveq #1,d0
   1136e:	/--|-- bra.s 11392 <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   11370:	|  \-> moveq #24,d0
   11372:	|      add.l 12(sp),d0
   11376:	|      move.l d0,-(sp)
   11378:	|      jsr 15156 <trimStack>
   1137e:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   11380:	|      move.l (sp),d0
   11382:	|      move.l d0,-(sp)
   11384:	|      pea 1 <_start+0x1>
   11388:	|      jsr bc5a <setShown>
   1138e:	|      addq.l #8,sp
	return BR_CONTINUE;
   11390:	|      moveq #2,d0
}
   11392:	\----> addq.l #4,sp
   11394:	       rts

00011396 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   11396:	jsr 6200 <killSpeechTimers>
	killMostPeople ();
   1139c:	jsr aa92 <killMostPeople>
	return BR_CONTINUE;
   113a2:	moveq #2,d0
}
   113a4:	rts

000113a6 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   113a6:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   113a8:	       movea.l 16(sp),a0
   113ac:	       move.l 24(a0),d0
   113b0:	       move.l d0,-(sp)
   113b2:	       pea 1 <_start+0x1>
   113b6:	       move.l sp,d0
   113b8:	       addq.l #8,d0
   113ba:	       move.l d0,-(sp)
   113bc:	       jsr 147d2 <getValueType>
   113c2:	       lea 12(sp),sp
   113c6:	       tst.w d0
   113c8:	   /-- bne.s 113ce <builtIn_setCharacterDrawMode+0x28>
   113ca:	   |   moveq #1,d0
   113cc:	/--|-- bra.s 11428 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   113ce:	|  \-> moveq #24,d0
   113d0:	|      add.l 16(sp),d0
   113d4:	|      move.l d0,-(sp)
   113d6:	|      jsr 15156 <trimStack>
   113dc:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   113de:	|      movea.l 16(sp),a0
   113e2:	|      move.l 24(a0),d0
   113e6:	|      move.l d0,-(sp)
   113e8:	|      pea 7 <_start+0x7>
   113ec:	|      moveq #12,d0
   113ee:	|      add.l sp,d0
   113f0:	|      move.l d0,-(sp)
   113f2:	|      jsr 147d2 <getValueType>
   113f8:	|      lea 12(sp),sp
   113fc:	|      tst.w d0
   113fe:	|  /-- bne.s 11404 <builtIn_setCharacterDrawMode+0x5e>
   11400:	|  |   moveq #1,d0
   11402:	+--|-- bra.s 11428 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   11404:	|  \-> moveq #24,d0
   11406:	|      add.l 16(sp),d0
   1140a:	|      move.l d0,-(sp)
   1140c:	|      jsr 15156 <trimStack>
   11412:	|      addq.l #4,sp
	setDrawMode (di, obj);
   11414:	|      move.l 4(sp),d1
   11418:	|      move.l (sp),d0
   1141a:	|      move.l d1,-(sp)
   1141c:	|      move.l d0,-(sp)
   1141e:	|      jsr b598 <setDrawMode>
   11424:	|      addq.l #8,sp
	return BR_CONTINUE;
   11426:	|      moveq #2,d0
}
   11428:	\----> addq.l #8,sp
   1142a:	       rts

0001142c <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   1142c:	pea 19afb <line.c.05397aaf+0x16f>
   11432:	jsr 17232 <KPrintF>
   11438:	addq.l #4,sp
	return BR_CONTINUE;
   1143a:	moveq #2,d0
}
   1143c:	rts

0001143e <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   1143e:	pea 19b2e <line.c.05397aaf+0x1a2>
   11444:	jsr 17232 <KPrintF>
   1144a:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   1144c:	moveq #2,d0
}
   1144e:	rts

00011450 <builtIn_setScale>:

builtIn(setScale)
{
   11450:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11452:	       movea.l 16(sp),a0
   11456:	       move.l 24(a0),d0
   1145a:	       move.l d0,-(sp)
   1145c:	       pea 1 <_start+0x1>
   11460:	       move.l sp,d0
   11462:	       addq.l #8,d0
   11464:	       move.l d0,-(sp)
   11466:	       jsr 147d2 <getValueType>
   1146c:	       lea 12(sp),sp
   11470:	       tst.w d0
   11472:	   /-- bne.s 11478 <builtIn_setScale+0x28>
   11474:	   |   moveq #1,d0
   11476:	/--|-- bra.s 114da <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   11478:	|  \-> moveq #24,d0
   1147a:	|      add.l 16(sp),d0
   1147e:	|      move.l d0,-(sp)
   11480:	|      jsr 15156 <trimStack>
   11486:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11488:	|      movea.l 16(sp),a0
   1148c:	|      move.l 24(a0),d0
   11490:	|      move.l d0,-(sp)
   11492:	|      pea 1 <_start+0x1>
   11496:	|      moveq #12,d0
   11498:	|      add.l sp,d0
   1149a:	|      move.l d0,-(sp)
   1149c:	|      jsr 147d2 <getValueType>
   114a2:	|      lea 12(sp),sp
   114a6:	|      tst.w d0
   114a8:	|  /-- bne.s 114ae <builtIn_setScale+0x5e>
   114aa:	|  |   moveq #1,d0
   114ac:	+--|-- bra.s 114da <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   114ae:	|  \-> moveq #24,d0
   114b0:	|      add.l 16(sp),d0
   114b4:	|      move.l d0,-(sp)
   114b6:	|      jsr 15156 <trimStack>
   114bc:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   114be:	|      move.l (sp),d0
   114c0:	|      move.l d0,d0
   114c2:	|      movea.w d0,a1
   114c4:	|      move.l 4(sp),d0
   114c8:	|      move.l d0,d0
   114ca:	|      movea.w d0,a0
   114cc:	|      move.l a1,-(sp)
   114ce:	|      move.l a0,-(sp)
   114d0:	|      jsr bc32 <setScale>
   114d6:	|      addq.l #8,sp
	return BR_CONTINUE;
   114d8:	|      moveq #2,d0
}
   114da:	\----> addq.l #8,sp
   114dc:	       rts

000114de <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   114de:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   114e0:	       movea.l 12(sp),a0
   114e4:	       move.l 24(a0),d0
   114e8:	       move.l d0,-(sp)
   114ea:	       pea 7 <_start+0x7>
   114ee:	       move.l sp,d0
   114f0:	       addq.l #8,d0
   114f2:	       move.l d0,-(sp)
   114f4:	       jsr 147d2 <getValueType>
   114fa:	       lea 12(sp),sp
   114fe:	       tst.w d0
   11500:	   /-- bne.s 11506 <builtIn_stopCharacter+0x28>
   11502:	   |   moveq #1,d0
   11504:	/--|-- bra.s 1153e <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   11506:	|  \-> moveq #24,d0
   11508:	|      add.l 12(sp),d0
   1150c:	|      move.l d0,-(sp)
   1150e:	|      jsr 15156 <trimStack>
   11514:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   11516:	|      move.l (sp),d0
   11518:	|      move.l d0,-(sp)
   1151a:	|      jsr bd66 <stopPerson>
   11520:	|      addq.l #4,sp
   11522:	|      movea.w d0,a0
   11524:	|      moveq #28,d0
   11526:	|      add.l 12(sp),d0
   1152a:	|      move.l a0,-(sp)
   1152c:	|      pea 1 <_start+0x1>
   11530:	|      move.l d0,-(sp)
   11532:	|      jsr 150c4 <setVariable>
   11538:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1153c:	|      moveq #2,d0
}
   1153e:	\----> addq.l #4,sp
   11540:	       rts

00011542 <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   11542:	pea 19b68 <line.c.05397aaf+0x1dc>
   11548:	jsr 17232 <KPrintF>
   1154e:	addq.l #4,sp
	return BR_CONTINUE;
   11550:	moveq #2,d0
}
   11552:	rts

00011554 <builtIn_animate>:

builtIn(animate)
{
   11554:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   11556:	       movea.l 16(sp),a0
   1155a:	       move.l 24(a0),d0
   1155e:	       move.l d0,-(sp)
   11560:	       jsr 14caa <getAnimationFromVar>
   11566:	       addq.l #4,sp
   11568:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   1156c:	   /-- bne.s 11572 <builtIn_animate+0x1e>
   1156e:	   |   moveq #1,d0
   11570:	/--|-- bra.s 115f0 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   11572:	|  \-> moveq #24,d0
   11574:	|      add.l 16(sp),d0
   11578:	|      move.l d0,-(sp)
   1157a:	|      jsr 15156 <trimStack>
   11580:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11582:	|      movea.l 16(sp),a0
   11586:	|      move.l 24(a0),d0
   1158a:	|      move.l d0,-(sp)
   1158c:	|      pea 7 <_start+0x7>
   11590:	|      move.l sp,d0
   11592:	|      addq.l #8,d0
   11594:	|      move.l d0,-(sp)
   11596:	|      jsr 147d2 <getValueType>
   1159c:	|      lea 12(sp),sp
   115a0:	|      tst.w d0
   115a2:	|  /-- bne.s 115a8 <builtIn_animate+0x54>
   115a4:	|  |   moveq #1,d0
   115a6:	+--|-- bra.s 115f0 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   115a8:	|  \-> moveq #24,d0
   115aa:	|      add.l 16(sp),d0
   115ae:	|      move.l d0,-(sp)
   115b0:	|      jsr 15156 <trimStack>
   115b6:	|      addq.l #4,sp
	animatePerson (obj, pp);
   115b8:	|      move.l (sp),d0
   115ba:	|      move.l 4(sp),-(sp)
   115be:	|      move.l d0,-(sp)
   115c0:	|      jsr 9496 <animatePerson>
   115c6:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   115c8:	|      move.l 4(sp),-(sp)
   115cc:	|      jsr bdba <timeForAnim>
   115d2:	|      addq.l #4,sp
   115d4:	|      move.l d0,d1
   115d6:	|      moveq #28,d0
   115d8:	|      add.l 16(sp),d0
   115dc:	|      move.l d1,-(sp)
   115de:	|      pea 1 <_start+0x1>
   115e2:	|      move.l d0,-(sp)
   115e4:	|      jsr 150c4 <setVariable>
   115ea:	|      lea 12(sp),sp
	return BR_CONTINUE;
   115ee:	|      moveq #2,d0
}
   115f0:	\----> addq.l #8,sp
   115f2:	       rts

000115f4 <builtIn_setCostume>:

builtIn(setCostume)
{
   115f4:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   115f6:	       movea.l 16(sp),a0
   115fa:	       move.l 24(a0),d0
   115fe:	       move.l d0,-(sp)
   11600:	       jsr 1447e <getCostumeFromVar>
   11606:	       addq.l #4,sp
   11608:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   1160c:	   /-- bne.s 11612 <builtIn_setCostume+0x1e>
   1160e:	   |   moveq #1,d0
   11610:	/--|-- bra.s 1166a <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   11612:	|  \-> moveq #24,d0
   11614:	|      add.l 16(sp),d0
   11618:	|      move.l d0,-(sp)
   1161a:	|      jsr 15156 <trimStack>
   11620:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11622:	|      movea.l 16(sp),a0
   11626:	|      move.l 24(a0),d0
   1162a:	|      move.l d0,-(sp)
   1162c:	|      pea 7 <_start+0x7>
   11630:	|      move.l sp,d0
   11632:	|      addq.l #8,d0
   11634:	|      move.l d0,-(sp)
   11636:	|      jsr 147d2 <getValueType>
   1163c:	|      lea 12(sp),sp
   11640:	|      tst.w d0
   11642:	|  /-- bne.s 11648 <builtIn_setCostume+0x54>
   11644:	|  |   moveq #1,d0
   11646:	+--|-- bra.s 1166a <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   11648:	|  \-> moveq #24,d0
   1164a:	|      add.l 16(sp),d0
   1164e:	|      move.l d0,-(sp)
   11650:	|      jsr 15156 <trimStack>
   11656:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   11658:	|      move.l (sp),d0
   1165a:	|      move.l 4(sp),-(sp)
   1165e:	|      move.l d0,-(sp)
   11660:	|      jsr 94e0 <animatePersonUsingPersona>
   11666:	|      addq.l #8,sp
	return BR_CONTINUE;
   11668:	|      moveq #2,d0
}
   1166a:	\----> addq.l #8,sp
   1166c:	       rts

0001166e <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   1166e:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11670:	       movea.l 16(sp),a0
   11674:	       move.l 24(a0),d0
   11678:	       move.l d0,-(sp)
   1167a:	       pea 1 <_start+0x1>
   1167e:	       move.l sp,d0
   11680:	       addq.l #8,d0
   11682:	       move.l d0,-(sp)
   11684:	       jsr 147d2 <getValueType>
   1168a:	       lea 12(sp),sp
   1168e:	       tst.w d0
   11690:	   /-- bne.s 11696 <builtIn_floatCharacter+0x28>
   11692:	   |   moveq #1,d0
   11694:	/--|-- bra.s 1170a <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   11696:	|  \-> moveq #24,d0
   11698:	|      add.l 16(sp),d0
   1169c:	|      move.l d0,-(sp)
   1169e:	|      jsr 15156 <trimStack>
   116a4:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   116a6:	|      movea.l 16(sp),a0
   116aa:	|      move.l 24(a0),d0
   116ae:	|      move.l d0,-(sp)
   116b0:	|      pea 7 <_start+0x7>
   116b4:	|      moveq #12,d0
   116b6:	|      add.l sp,d0
   116b8:	|      move.l d0,-(sp)
   116ba:	|      jsr 147d2 <getValueType>
   116c0:	|      lea 12(sp),sp
   116c4:	|      tst.w d0
   116c6:	|  /-- bne.s 116cc <builtIn_floatCharacter+0x5e>
   116c8:	|  |   moveq #1,d0
   116ca:	+--|-- bra.s 1170a <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   116cc:	|  \-> moveq #24,d0
   116ce:	|      add.l 16(sp),d0
   116d2:	|      move.l d0,-(sp)
   116d4:	|      jsr 15156 <trimStack>
   116da:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   116dc:	|      move.l 4(sp),d1
   116e0:	|      move.l (sp),d0
   116e2:	|      move.l d1,-(sp)
   116e4:	|      move.l d0,-(sp)
   116e6:	|      jsr a654 <floatCharacter>
   116ec:	|      addq.l #8,sp
   116ee:	|      movea.w d0,a0
   116f0:	|      moveq #28,d0
   116f2:	|      add.l 16(sp),d0
   116f6:	|      move.l a0,-(sp)
   116f8:	|      pea 1 <_start+0x1>
   116fc:	|      move.l d0,-(sp)
   116fe:	|      jsr 150c4 <setVariable>
   11704:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11708:	|      moveq #2,d0
}
   1170a:	\----> addq.l #8,sp
   1170c:	       rts

0001170e <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   1170e:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11710:	       movea.l 16(sp),a0
   11714:	       move.l 24(a0),d0
   11718:	       move.l d0,-(sp)
   1171a:	       pea 1 <_start+0x1>
   1171e:	       move.l sp,d0
   11720:	       addq.l #8,d0
   11722:	       move.l d0,-(sp)
   11724:	       jsr 147d2 <getValueType>
   1172a:	       lea 12(sp),sp
   1172e:	       tst.w d0
   11730:	   /-- bne.s 11736 <builtIn_setCharacterWalkSpeed+0x28>
   11732:	   |   moveq #1,d0
   11734:	/--|-- bra.s 117aa <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   11736:	|  \-> moveq #24,d0
   11738:	|      add.l 16(sp),d0
   1173c:	|      move.l d0,-(sp)
   1173e:	|      jsr 15156 <trimStack>
   11744:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11746:	|      movea.l 16(sp),a0
   1174a:	|      move.l 24(a0),d0
   1174e:	|      move.l d0,-(sp)
   11750:	|      pea 7 <_start+0x7>
   11754:	|      moveq #12,d0
   11756:	|      add.l sp,d0
   11758:	|      move.l d0,-(sp)
   1175a:	|      jsr 147d2 <getValueType>
   11760:	|      lea 12(sp),sp
   11764:	|      tst.w d0
   11766:	|  /-- bne.s 1176c <builtIn_setCharacterWalkSpeed+0x5e>
   11768:	|  |   moveq #1,d0
   1176a:	+--|-- bra.s 117aa <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   1176c:	|  \-> moveq #24,d0
   1176e:	|      add.l 16(sp),d0
   11772:	|      move.l d0,-(sp)
   11774:	|      jsr 15156 <trimStack>
   1177a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   1177c:	|      move.l 4(sp),d1
   11780:	|      move.l (sp),d0
   11782:	|      move.l d1,-(sp)
   11784:	|      move.l d0,-(sp)
   11786:	|      jsr bbce <setCharacterWalkSpeed>
   1178c:	|      addq.l #8,sp
   1178e:	|      movea.w d0,a0
   11790:	|      moveq #28,d0
   11792:	|      add.l 16(sp),d0
   11796:	|      move.l a0,-(sp)
   11798:	|      pea 1 <_start+0x1>
   1179c:	|      move.l d0,-(sp)
   1179e:	|      jsr 150c4 <setVariable>
   117a4:	|      lea 12(sp),sp
	return BR_CONTINUE;
   117a8:	|      moveq #2,d0
}
   117aa:	\----> addq.l #8,sp
   117ac:	       rts

000117ae <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   117ae:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   117b0:	       movea.l 16(sp),a0
   117b4:	       move.l 24(a0),d0
   117b8:	       move.l d0,-(sp)
   117ba:	       pea 1 <_start+0x1>
   117be:	       move.l sp,d0
   117c0:	       addq.l #8,d0
   117c2:	       move.l d0,-(sp)
   117c4:	       jsr 147d2 <getValueType>
   117ca:	       lea 12(sp),sp
   117ce:	       tst.w d0
   117d0:	   /-- bne.s 117d6 <builtIn_turnCharacter+0x28>
   117d2:	   |   moveq #1,d0
   117d4:	/--|-- bra.s 1184a <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   117d6:	|  \-> moveq #24,d0
   117d8:	|      add.l 16(sp),d0
   117dc:	|      move.l d0,-(sp)
   117de:	|      jsr 15156 <trimStack>
   117e4:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   117e6:	|      movea.l 16(sp),a0
   117ea:	|      move.l 24(a0),d0
   117ee:	|      move.l d0,-(sp)
   117f0:	|      pea 7 <_start+0x7>
   117f4:	|      moveq #12,d0
   117f6:	|      add.l sp,d0
   117f8:	|      move.l d0,-(sp)
   117fa:	|      jsr 147d2 <getValueType>
   11800:	|      lea 12(sp),sp
   11804:	|      tst.w d0
   11806:	|  /-- bne.s 1180c <builtIn_turnCharacter+0x5e>
   11808:	|  |   moveq #1,d0
   1180a:	+--|-- bra.s 1184a <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   1180c:	|  \-> moveq #24,d0
   1180e:	|      add.l 16(sp),d0
   11812:	|      move.l d0,-(sp)
   11814:	|      jsr 15156 <trimStack>
   1181a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   1181c:	|      move.l (sp),d1
   1181e:	|      move.l 4(sp),d0
   11822:	|      move.l d1,-(sp)
   11824:	|      move.l d0,-(sp)
   11826:	|      jsr be72 <turnPersonToFace>
   1182c:	|      addq.l #8,sp
   1182e:	|      movea.w d0,a0
   11830:	|      moveq #28,d0
   11832:	|      add.l 16(sp),d0
   11836:	|      move.l a0,-(sp)
   11838:	|      pea 1 <_start+0x1>
   1183c:	|      move.l d0,-(sp)
   1183e:	|      jsr 150c4 <setVariable>
   11844:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11848:	|      moveq #2,d0
}
   1184a:	\----> addq.l #8,sp
   1184c:	       rts

0001184e <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   1184e:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11850:	       movea.l 16(sp),a0
   11854:	       move.l 24(a0),d0
   11858:	       move.l d0,-(sp)
   1185a:	       pea 1 <_start+0x1>
   1185e:	       move.l sp,d0
   11860:	       addq.l #8,d0
   11862:	       move.l d0,-(sp)
   11864:	       jsr 147d2 <getValueType>
   1186a:	       lea 12(sp),sp
   1186e:	       tst.w d0
   11870:	   /-- bne.s 11876 <builtIn_setCharacterExtra+0x28>
   11872:	   |   moveq #1,d0
   11874:	/--|-- bra.s 118ea <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   11876:	|  \-> moveq #24,d0
   11878:	|      add.l 16(sp),d0
   1187c:	|      move.l d0,-(sp)
   1187e:	|      jsr 15156 <trimStack>
   11884:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11886:	|      movea.l 16(sp),a0
   1188a:	|      move.l 24(a0),d0
   1188e:	|      move.l d0,-(sp)
   11890:	|      pea 7 <_start+0x7>
   11894:	|      moveq #12,d0
   11896:	|      add.l sp,d0
   11898:	|      move.l d0,-(sp)
   1189a:	|      jsr 147d2 <getValueType>
   118a0:	|      lea 12(sp),sp
   118a4:	|      tst.w d0
   118a6:	|  /-- bne.s 118ac <builtIn_setCharacterExtra+0x5e>
   118a8:	|  |   moveq #1,d0
   118aa:	+--|-- bra.s 118ea <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   118ac:	|  \-> moveq #24,d0
   118ae:	|      add.l 16(sp),d0
   118b2:	|      move.l d0,-(sp)
   118b4:	|      jsr 15156 <trimStack>
   118ba:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   118bc:	|      move.l (sp),d1
   118be:	|      move.l 4(sp),d0
   118c2:	|      move.l d1,-(sp)
   118c4:	|      move.l d0,-(sp)
   118c6:	|      jsr bbfc <setPersonExtra>
   118cc:	|      addq.l #8,sp
   118ce:	|      movea.w d0,a0
   118d0:	|      moveq #28,d0
   118d2:	|      add.l 16(sp),d0
   118d6:	|      move.l a0,-(sp)
   118d8:	|      pea 1 <_start+0x1>
   118dc:	|      move.l d0,-(sp)
   118de:	|      jsr 150c4 <setVariable>
   118e4:	|      lea 12(sp),sp
	return BR_CONTINUE;
   118e8:	|      moveq #2,d0
}
   118ea:	\----> addq.l #8,sp
   118ec:	       rts

000118ee <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   118ee:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   118f0:	       movea.l 12(sp),a0
   118f4:	       move.l 24(a0),d0
   118f8:	       move.l d0,-(sp)
   118fa:	       pea 7 <_start+0x7>
   118fe:	       move.l sp,d0
   11900:	       addq.l #8,d0
   11902:	       move.l d0,-(sp)
   11904:	       jsr 147d2 <getValueType>
   1190a:	       lea 12(sp),sp
   1190e:	       tst.w d0
   11910:	   /-- bne.s 11916 <builtIn_removeCharacter+0x28>
   11912:	   |   moveq #1,d0
   11914:	/--|-- bra.s 11934 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   11916:	|  \-> moveq #24,d0
   11918:	|      add.l 12(sp),d0
   1191c:	|      move.l d0,-(sp)
   1191e:	|      jsr 15156 <trimStack>
   11924:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   11926:	|      move.l (sp),d0
   11928:	|      move.l d0,-(sp)
   1192a:	|      jsr adfc <removeOneCharacter>
   11930:	|      addq.l #4,sp
	return BR_CONTINUE;
   11932:	|      moveq #2,d0
}
   11934:	\----> addq.l #4,sp
   11936:	       rts

00011938 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   11938:	                lea -28(sp),sp
   1193c:	                move.l d2,-(sp)
   1193e:	                move.l 44(sp),d1
   11942:	                move.l 48(sp),d0
   11946:	                move.w d1,d1
   11948:	                move.w d1,6(sp)
   1194c:	                move.w d0,d0
   1194e:	                move.w d0,4(sp)
	switch (numParams) {
   11952:	                moveq #2,d0
   11954:	                cmp.l 36(sp),d0
   11958:	      /-------- beq.w 11a9a <moveChr+0x162>
   1195c:	      |         moveq #3,d0
   1195e:	      |         cmp.l 36(sp),d0
   11962:	/-----|-------- bne.w 11bce <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11966:	|     |         movea.l 40(sp),a0
   1196a:	|     |         move.l 24(a0),d0
   1196e:	|     |         move.l d0,-(sp)
   11970:	|     |         pea 1 <_start+0x1>
   11974:	|     |         lea 20(sp),a0
   11978:	|     |         move.l a0,-(sp)
   1197a:	|     |         jsr 147d2 <getValueType>
   11980:	|     |         lea 12(sp),sp
   11984:	|     |         tst.w d0
   11986:	|     |     /-- bne.s 1198e <moveChr+0x56>
   11988:	|     |     |   moveq #1,d0
   1198a:	|  /--|-----|-- bra.w 11bde <moveChr+0x2a6>
			trimStack (&fun -> stack);
   1198e:	|  |  |     \-> moveq #24,d0
   11990:	|  |  |         add.l 40(sp),d0
   11994:	|  |  |         move.l d0,-(sp)
   11996:	|  |  |         jsr 15156 <trimStack>
   1199c:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1199e:	|  |  |         movea.l 40(sp),a0
   119a2:	|  |  |         move.l 24(a0),d0
   119a6:	|  |  |         move.l d0,-(sp)
   119a8:	|  |  |         pea 1 <_start+0x1>
   119ac:	|  |  |         lea 24(sp),a0
   119b0:	|  |  |         move.l a0,-(sp)
   119b2:	|  |  |         jsr 147d2 <getValueType>
   119b8:	|  |  |         lea 12(sp),sp
   119bc:	|  |  |         tst.w d0
   119be:	|  |  |     /-- bne.s 119c6 <moveChr+0x8e>
   119c0:	|  |  |     |   moveq #1,d0
   119c2:	|  +--|-----|-- bra.w 11bde <moveChr+0x2a6>
			trimStack (&fun -> stack);
   119c6:	|  |  |     \-> moveq #24,d0
   119c8:	|  |  |         add.l 40(sp),d0
   119cc:	|  |  |         move.l d0,-(sp)
   119ce:	|  |  |         jsr 15156 <trimStack>
   119d4:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   119d6:	|  |  |         movea.l 40(sp),a0
   119da:	|  |  |         move.l 24(a0),d0
   119de:	|  |  |         move.l d0,-(sp)
   119e0:	|  |  |         pea 7 <_start+0x7>
   119e4:	|  |  |         lea 16(sp),a0
   119e8:	|  |  |         move.l a0,-(sp)
   119ea:	|  |  |         jsr 147d2 <getValueType>
   119f0:	|  |  |         lea 12(sp),sp
   119f4:	|  |  |         tst.w d0
   119f6:	|  |  |     /-- bne.s 119fe <moveChr+0xc6>
   119f8:	|  |  |     |   moveq #1,d0
   119fa:	|  +--|-----|-- bra.w 11bde <moveChr+0x2a6>
			trimStack (&fun -> stack);
   119fe:	|  |  |     \-> moveq #24,d0
   11a00:	|  |  |         add.l 40(sp),d0
   11a04:	|  |  |         move.l d0,-(sp)
   11a06:	|  |  |         jsr 15156 <trimStack>
   11a0c:	|  |  |         addq.l #4,sp

			if (force) {
   11a0e:	|  |  |         tst.w 6(sp)
   11a12:	|  |  |     /-- beq.s 11a42 <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11a14:	|  |  |     |   movea.l 8(sp),a0
   11a18:	|  |  |     |   move.l 12(sp),d1
   11a1c:	|  |  |     |   move.l 16(sp),d0
   11a20:	|  |  |     |   pea ffffffff <gcc8_c_support.c.1fed348d+0xfffb4d7e>
   11a24:	|  |  |     |   move.l 44(sp),-(sp)
   11a28:	|  |  |     |   move.l a0,-(sp)
   11a2a:	|  |  |     |   move.l d1,-(sp)
   11a2c:	|  |  |     |   move.l d0,-(sp)
   11a2e:	|  |  |     |   jsr a678 <forceWalkingPerson>
   11a34:	|  |  |     |   lea 20(sp),sp
   11a38:	|  |  |     |   tst.w d0
   11a3a:	|  |  |  /--|-- beq.s 11a94 <moveChr+0x15c>
   11a3c:	|  |  |  |  |   moveq #3,d0
   11a3e:	|  +--|--|--|-- bra.w 11bde <moveChr+0x2a6>
			} else if (immediate) {
   11a42:	|  |  |  |  \-> tst.w 4(sp)
   11a46:	|  |  |  |  /-- beq.s 11a66 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   11a48:	|  |  |  |  |   movea.l 8(sp),a0
   11a4c:	|  |  |  |  |   move.l 12(sp),d1
   11a50:	|  |  |  |  |   move.l 16(sp),d0
   11a54:	|  |  |  |  |   move.l a0,-(sp)
   11a56:	|  |  |  |  |   move.l d1,-(sp)
   11a58:	|  |  |  |  |   move.l d0,-(sp)
   11a5a:	|  |  |  |  |   jsr a980 <jumpPerson>
   11a60:	|  |  |  |  |   lea 12(sp),sp
   11a64:	|  |  |  +--|-- bra.s 11a94 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11a66:	|  |  |  |  \-> movea.l 8(sp),a0
   11a6a:	|  |  |  |      move.l 12(sp),d1
   11a6e:	|  |  |  |      move.l 16(sp),d0
   11a72:	|  |  |  |      pea ffffffff <gcc8_c_support.c.1fed348d+0xfffb4d7e>
   11a76:	|  |  |  |      move.l 44(sp),-(sp)
   11a7a:	|  |  |  |      move.l a0,-(sp)
   11a7c:	|  |  |  |      move.l d1,-(sp)
   11a7e:	|  |  |  |      move.l d0,-(sp)
   11a80:	|  |  |  |      jsr ab50 <makeWalkingPerson>
   11a86:	|  |  |  |      lea 20(sp),sp
   11a8a:	|  |  |  |      tst.w d0
   11a8c:	|  |  |  +----- beq.s 11a94 <moveChr+0x15c>
   11a8e:	|  |  |  |      moveq #3,d0
   11a90:	|  +--|--|----- bra.w 11bde <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11a94:	|  |  |  \----> moveq #2,d0
   11a96:	|  +--|-------- bra.w 11bde <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11a9a:	|  |  \-------> movea.l 40(sp),a0
   11a9e:	|  |            move.l 24(a0),d0
   11aa2:	|  |            move.l d0,-(sp)
   11aa4:	|  |            pea 7 <_start+0x7>
   11aa8:	|  |            moveq #32,d0
   11aaa:	|  |            add.l sp,d0
   11aac:	|  |            move.l d0,-(sp)
   11aae:	|  |            jsr 147d2 <getValueType>
   11ab4:	|  |            lea 12(sp),sp
   11ab8:	|  |            tst.w d0
   11aba:	|  |        /-- bne.s 11ac2 <moveChr+0x18a>
   11abc:	|  |        |   moveq #1,d0
   11abe:	|  +--------|-- bra.w 11bde <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11ac2:	|  |        \-> moveq #24,d0
   11ac4:	|  |            add.l 40(sp),d0
   11ac8:	|  |            move.l d0,-(sp)
   11aca:	|  |            jsr 15156 <trimStack>
   11ad0:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11ad2:	|  |            movea.l 40(sp),a0
   11ad6:	|  |            move.l 24(a0),d0
   11ada:	|  |            move.l d0,-(sp)
   11adc:	|  |            pea 7 <_start+0x7>
   11ae0:	|  |            lea 28(sp),a0
   11ae4:	|  |            move.l a0,-(sp)
   11ae6:	|  |            jsr 147d2 <getValueType>
   11aec:	|  |            lea 12(sp),sp
   11af0:	|  |            tst.w d0
   11af2:	|  |        /-- bne.s 11afa <moveChr+0x1c2>
   11af4:	|  |        |   moveq #1,d0
   11af6:	|  +--------|-- bra.w 11bde <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11afa:	|  |        \-> moveq #24,d0
   11afc:	|  |            add.l 40(sp),d0
   11b00:	|  |            move.l d0,-(sp)
   11b02:	|  |            jsr 15156 <trimStack>
   11b08:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   11b0a:	|  |            move.l 24(sp),d0
   11b0e:	|  |            move.l d0,-(sp)
   11b10:	|  |            jsr 15a14 <getRegionForObject>
   11b16:	|  |            addq.l #4,sp
   11b18:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   11b1c:	|  |        /-- bne.s 11b24 <moveChr+0x1ec>
   11b1e:	|  |        |   moveq #2,d0
   11b20:	|  +--------|-- bra.w 11bde <moveChr+0x2a6>

			if (force)
   11b24:	|  |        \-> tst.w 6(sp)
   11b28:	|  |        /-- beq.s 11b64 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11b2a:	|  |        |   movea.l 28(sp),a0
   11b2e:	|  |        |   move.l 24(a0),d2
   11b32:	|  |        |   movea.l 20(sp),a1
   11b36:	|  |        |   movea.l 28(sp),a0
   11b3a:	|  |        |   move.l 20(a0),d1
   11b3e:	|  |        |   movea.l 28(sp),a0
   11b42:	|  |        |   move.l 16(a0),d0
   11b46:	|  |        |   move.l d2,-(sp)
   11b48:	|  |        |   move.l 44(sp),-(sp)
   11b4c:	|  |        |   move.l a1,-(sp)
   11b4e:	|  |        |   move.l d1,-(sp)
   11b50:	|  |        |   move.l d0,-(sp)
   11b52:	|  |        |   jsr a678 <forceWalkingPerson>
   11b58:	|  |        |   lea 20(sp),sp
   11b5c:	|  |        |   tst.w d0
   11b5e:	|  |     /--|-- beq.s 11bca <moveChr+0x292>
   11b60:	|  |     |  |   moveq #3,d0
   11b62:	|  +-----|--|-- bra.s 11bde <moveChr+0x2a6>
			}
			else if (immediate)
   11b64:	|  |     |  \-> tst.w 4(sp)
   11b68:	|  |     |  /-- beq.s 11b90 <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   11b6a:	|  |     |  |   movea.l 20(sp),a1
   11b6e:	|  |     |  |   movea.l 28(sp),a0
   11b72:	|  |     |  |   move.l 20(a0),d1
   11b76:	|  |     |  |   movea.l 28(sp),a0
   11b7a:	|  |     |  |   move.l 16(a0),d0
   11b7e:	|  |     |  |   move.l a1,-(sp)
   11b80:	|  |     |  |   move.l d1,-(sp)
   11b82:	|  |     |  |   move.l d0,-(sp)
   11b84:	|  |     |  |   jsr a980 <jumpPerson>
   11b8a:	|  |     |  |   lea 12(sp),sp
   11b8e:	|  |     +--|-- bra.s 11bca <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11b90:	|  |     |  \-> movea.l 28(sp),a0
   11b94:	|  |     |      move.l 24(a0),d2
   11b98:	|  |     |      movea.l 20(sp),a1
   11b9c:	|  |     |      movea.l 28(sp),a0
   11ba0:	|  |     |      move.l 20(a0),d1
   11ba4:	|  |     |      movea.l 28(sp),a0
   11ba8:	|  |     |      move.l 16(a0),d0
   11bac:	|  |     |      move.l d2,-(sp)
   11bae:	|  |     |      move.l 44(sp),-(sp)
   11bb2:	|  |     |      move.l a1,-(sp)
   11bb4:	|  |     |      move.l d1,-(sp)
   11bb6:	|  |     |      move.l d0,-(sp)
   11bb8:	|  |     |      jsr ab50 <makeWalkingPerson>
   11bbe:	|  |     |      lea 20(sp),sp
   11bc2:	|  |     |      tst.w d0
   11bc4:	|  |     +----- beq.s 11bca <moveChr+0x292>
   11bc6:	|  |     |      moveq #3,d0
   11bc8:	|  +-----|----- bra.s 11bde <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11bca:	|  |     \----> moveq #2,d0
   11bcc:	|  +----------- bra.s 11bde <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   11bce:	\--|----------> pea 19b86 <line.c.05397aaf+0x1fa>
   11bd4:	   |            jsr 17232 <KPrintF>
   11bda:	   |            addq.l #4,sp
			return BR_ERROR;
   11bdc:	   |            moveq #1,d0
	}
}
   11bde:	   \----------> move.l (sp)+,d2
   11be0:	                lea 28(sp),sp
   11be4:	                rts

00011be6 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   11be6:	clr.l -(sp)
   11be8:	clr.l -(sp)
   11bea:	move.l 16(sp),-(sp)
   11bee:	move.l 16(sp),-(sp)
   11bf2:	jsr 11938 <moveChr>
   11bf8:	lea 16(sp),sp
}
   11bfc:	rts

00011bfe <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   11bfe:	clr.l -(sp)
   11c00:	pea 1 <_start+0x1>
   11c04:	move.l 16(sp),-(sp)
   11c08:	move.l 16(sp),-(sp)
   11c0c:	jsr 11938 <moveChr>
   11c12:	lea 16(sp),sp
}
   11c16:	rts

00011c18 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   11c18:	pea 1 <_start+0x1>
   11c1c:	clr.l -(sp)
   11c1e:	move.l 16(sp),-(sp)
   11c22:	move.l 16(sp),-(sp)
   11c26:	jsr 11938 <moveChr>
   11c2c:	lea 16(sp),sp
}
   11c30:	rts

00011c32 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   11c32:	jsr 78fa <clearStatusBar>
	return BR_CONTINUE;
   11c38:	moveq #2,d0
}
   11c3a:	rts

00011c3c <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   11c3c:	jsr 79a2 <killLastStatus>
	return BR_CONTINUE;
   11c42:	moveq #2,d0
}
   11c44:	rts

00011c46 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   11c46:	jsr 7890 <addStatusBar>
	return BR_CONTINUE;
   11c4c:	moveq #2,d0
}
   11c4e:	rts

00011c50 <builtIn_statusText>:

builtIn(statusText)
{
   11c50:	       subq.l #8,sp
   11c52:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11c54:	       movea.l 20(sp),a0
   11c58:	       move.l 24(a0),d0
   11c5c:	       move.l d0,-(sp)
   11c5e:	       jsr 14da8 <getTextFromAnyVar>
   11c64:	       addq.l #4,sp
   11c66:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   11c6a:	   /-- bne.s 11c70 <builtIn_statusText+0x20>
   11c6c:	   |   moveq #1,d0
   11c6e:	/--|-- bra.s 11ca4 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   11c70:	|  \-> moveq #24,d0
   11c72:	|      add.l 20(sp),d0
   11c76:	|      move.l d0,-(sp)
   11c78:	|      jsr 15156 <trimStack>
   11c7e:	|      addq.l #4,sp
	setStatusBar(newText);
   11c80:	|      move.l 8(sp),-(sp)
   11c84:	|      jsr 7c22 <setStatusBar>
   11c8a:	|      addq.l #4,sp
	FreeVec(newText);
   11c8c:	|      move.l 8(sp),4(sp)
   11c92:	|      move.l 1c9a8 <SysBase>,d0
   11c98:	|      movea.l d0,a6
   11c9a:	|      movea.l 4(sp),a1
   11c9e:	|      jsr -690(a6)
	return BR_CONTINUE;
   11ca2:	|      moveq #2,d0
}
   11ca4:	\----> movea.l (sp)+,a6
   11ca6:	       addq.l #8,sp
   11ca8:	       rts

00011caa <builtIn_lightStatus>:

builtIn(lightStatus)
{
   11caa:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11cac:	       movea.l 12(sp),a0
   11cb0:	       move.l 24(a0),d0
   11cb4:	       move.l d0,-(sp)
   11cb6:	       pea 1 <_start+0x1>
   11cba:	       move.l sp,d0
   11cbc:	       addq.l #8,d0
   11cbe:	       move.l d0,-(sp)
   11cc0:	       jsr 147d2 <getValueType>
   11cc6:	       lea 12(sp),sp
   11cca:	       tst.w d0
   11ccc:	   /-- bne.s 11cd2 <builtIn_lightStatus+0x28>
   11cce:	   |   moveq #1,d0
   11cd0:	/--|-- bra.s 11cf0 <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   11cd2:	|  \-> moveq #24,d0
   11cd4:	|      add.l 12(sp),d0
   11cd8:	|      move.l d0,-(sp)
   11cda:	|      jsr 15156 <trimStack>
   11ce0:	|      addq.l #4,sp
	setLitStatus (val);
   11ce2:	|      move.l (sp),d0
   11ce4:	|      move.l d0,-(sp)
   11ce6:	|      jsr 7c12 <setLitStatus>
   11cec:	|      addq.l #4,sp
	return BR_CONTINUE;
   11cee:	|      moveq #2,d0
}
   11cf0:	\----> addq.l #4,sp
   11cf2:	       rts

00011cf4 <builtIn_positionStatus>:

builtIn(positionStatus)
{
   11cf4:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11cf6:	       movea.l 16(sp),a0
   11cfa:	       move.l 24(a0),d0
   11cfe:	       move.l d0,-(sp)
   11d00:	       pea 1 <_start+0x1>
   11d04:	       move.l sp,d0
   11d06:	       addq.l #8,d0
   11d08:	       move.l d0,-(sp)
   11d0a:	       jsr 147d2 <getValueType>
   11d10:	       lea 12(sp),sp
   11d14:	       tst.w d0
   11d16:	   /-- bne.s 11d1c <builtIn_positionStatus+0x28>
   11d18:	   |   moveq #1,d0
   11d1a:	/--|-- bra.s 11d76 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11d1c:	|  \-> moveq #24,d0
   11d1e:	|      add.l 16(sp),d0
   11d22:	|      move.l d0,-(sp)
   11d24:	|      jsr 15156 <trimStack>
   11d2a:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11d2c:	|      movea.l 16(sp),a0
   11d30:	|      move.l 24(a0),d0
   11d34:	|      move.l d0,-(sp)
   11d36:	|      pea 1 <_start+0x1>
   11d3a:	|      moveq #12,d0
   11d3c:	|      add.l sp,d0
   11d3e:	|      move.l d0,-(sp)
   11d40:	|      jsr 147d2 <getValueType>
   11d46:	|      lea 12(sp),sp
   11d4a:	|      tst.w d0
   11d4c:	|  /-- bne.s 11d52 <builtIn_positionStatus+0x5e>
   11d4e:	|  |   moveq #1,d0
   11d50:	+--|-- bra.s 11d76 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11d52:	|  \-> moveq #24,d0
   11d54:	|      add.l 16(sp),d0
   11d58:	|      move.l d0,-(sp)
   11d5a:	|      jsr 15156 <trimStack>
   11d60:	|      addq.l #4,sp
	positionStatus (x, y);
   11d62:	|      move.l (sp),d1
   11d64:	|      move.l 4(sp),d0
   11d68:	|      move.l d1,-(sp)
   11d6a:	|      move.l d0,-(sp)
   11d6c:	|      jsr 7a04 <positionStatus>
   11d72:	|      addq.l #8,sp
	return BR_CONTINUE;
   11d74:	|      moveq #2,d0
}
   11d76:	\----> addq.l #8,sp
   11d78:	       rts

00011d7a <builtIn_alignStatus>:

builtIn(alignStatus)
{
   11d7a:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11d7c:	       movea.l 12(sp),a0
   11d80:	       move.l 24(a0),d0
   11d84:	       move.l d0,-(sp)
   11d86:	       pea 1 <_start+0x1>
   11d8a:	       move.l sp,d0
   11d8c:	       addq.l #8,d0
   11d8e:	       move.l d0,-(sp)
   11d90:	       jsr 147d2 <getValueType>
   11d96:	       lea 12(sp),sp
   11d9a:	       tst.w d0
   11d9c:	   /-- bne.s 11da2 <builtIn_alignStatus+0x28>
   11d9e:	   |   moveq #1,d0
   11da0:	/--|-- bra.s 11dc2 <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   11da2:	|  \-> moveq #24,d0
   11da4:	|      add.l 12(sp),d0
   11da8:	|      move.l d0,-(sp)
   11daa:	|      jsr 15156 <trimStack>
   11db0:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   11db2:	|      move.l (sp),d0
   11db4:	|      movea.l 1c32e <nowStatus>,a0
   11dba:	|      move.l d0,d0
   11dbc:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   11dc0:	|      moveq #2,d0
}
   11dc2:	\----> addq.l #4,sp
   11dc4:	       rts

00011dc6 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   11dc6:	             tst.l 4(sp)
   11dca:	      /----- beq.s 11dd6 <getFuncNumForCallback+0x10>
   11dcc:	      |      moveq #1,d0
   11dce:	      |      cmp.l 4(sp),d0
   11dd2:	      |  /-- beq.s 11ddc <getFuncNumForCallback+0x16>
   11dd4:	   /--|--|-- bra.s 11e12 <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   11dd6:	   |  \--|-> clr.l 12(sp)
			break;
   11dda:	/--|-----|-- bra.s 11e24 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   11ddc:	|  |     \-> movea.l 8(sp),a0
   11de0:	|  |         move.l 24(a0),d0
   11de4:	|  |         move.l d0,-(sp)
   11de6:	|  |         pea 2 <_start+0x2>
   11dea:	|  |         move.l 20(sp),-(sp)
   11dee:	|  |         jsr 147d2 <getValueType>
   11df4:	|  |         lea 12(sp),sp
   11df8:	|  |         tst.w d0
   11dfa:	|  |     /-- bne.s 11e00 <getFuncNumForCallback+0x3a>
   11dfc:	|  |     |   clr.w d0
   11dfe:	|  |  /--|-- bra.s 11e26 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   11e00:	|  |  |  \-> moveq #24,d0
   11e02:	|  |  |      add.l 8(sp),d0
   11e06:	|  |  |      move.l d0,-(sp)
   11e08:	|  |  |      jsr 15156 <trimStack>
   11e0e:	|  |  |      addq.l #4,sp
			break;
   11e10:	+--|--|----- bra.s 11e24 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   11e12:	|  \--|----> pea 19bbc <line.c.05397aaf+0x230>
   11e18:	|     |      jsr 17232 <KPrintF>
   11e1e:	|     |      addq.l #4,sp
			return FALSE;
   11e20:	|     |      clr.w d0
   11e22:	|     +----- bra.s 11e26 <getFuncNumForCallback+0x60>
	}
	return TRUE;
   11e24:	\-----|----> moveq #1,d0
}
   11e26:	      \----> rts

00011e28 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   11e28:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11e2a:	       move.l sp,d0
   11e2c:	       move.l d0,-(sp)
   11e2e:	       move.l 16(sp),-(sp)
   11e32:	       move.l 16(sp),-(sp)
   11e36:	       jsr 11dc6 <getFuncNumForCallback>
   11e3c:	       lea 12(sp),sp
   11e40:	       tst.w d0
   11e42:	/----- beq.s 11e52 <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   11e44:	|      movea.l 1c320 <currentEvents>,a0
   11e4a:	|      move.l (sp),d0
   11e4c:	|      move.l d0,(a0)
		return BR_CONTINUE;
   11e4e:	|      moveq #2,d0
   11e50:	|  /-- bra.s 11e54 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   11e52:	\--|-> moveq #1,d0
}
   11e54:	   \-> addq.l #4,sp
   11e56:	       rts

00011e58 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   11e58:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11e5a:	       move.l sp,d0
   11e5c:	       move.l d0,-(sp)
   11e5e:	       move.l 16(sp),-(sp)
   11e62:	       move.l 16(sp),-(sp)
   11e66:	       jsr 11dc6 <getFuncNumForCallback>
   11e6c:	       lea 12(sp),sp
   11e70:	       tst.w d0
   11e72:	/----- beq.s 11e84 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   11e74:	|      movea.l 1c320 <currentEvents>,a0
   11e7a:	|      move.l (sp),d0
   11e7c:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   11e80:	|      moveq #2,d0
   11e82:	|  /-- bra.s 11e86 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   11e84:	\--|-> moveq #1,d0
}
   11e86:	   \-> addq.l #4,sp
   11e88:	       rts

00011e8a <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   11e8a:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11e8c:	       move.l sp,d0
   11e8e:	       move.l d0,-(sp)
   11e90:	       move.l 16(sp),-(sp)
   11e94:	       move.l 16(sp),-(sp)
   11e98:	       jsr 11dc6 <getFuncNumForCallback>
   11e9e:	       lea 12(sp),sp
   11ea2:	       tst.w d0
   11ea4:	/----- beq.s 11eb6 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   11ea6:	|      movea.l 1c320 <currentEvents>,a0
   11eac:	|      move.l (sp),d0
   11eae:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   11eb2:	|      moveq #2,d0
   11eb4:	|  /-- bra.s 11eb8 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   11eb6:	\--|-> moveq #1,d0
}
   11eb8:	   \-> addq.l #4,sp
   11eba:	       rts

00011ebc <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   11ebc:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11ebe:	       move.l sp,d0
   11ec0:	       move.l d0,-(sp)
   11ec2:	       move.l 16(sp),-(sp)
   11ec6:	       move.l 16(sp),-(sp)
   11eca:	       jsr 11dc6 <getFuncNumForCallback>
   11ed0:	       lea 12(sp),sp
   11ed4:	       tst.w d0
   11ed6:	/----- beq.s 11ee8 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   11ed8:	|      movea.l 1c320 <currentEvents>,a0
   11ede:	|      move.l (sp),d0
   11ee0:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   11ee4:	|      moveq #2,d0
   11ee6:	|  /-- bra.s 11eea <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   11ee8:	\--|-> moveq #1,d0
}
   11eea:	   \-> addq.l #4,sp
   11eec:	       rts

00011eee <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   11eee:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11ef0:	       move.l sp,d0
   11ef2:	       move.l d0,-(sp)
   11ef4:	       move.l 16(sp),-(sp)
   11ef8:	       move.l 16(sp),-(sp)
   11efc:	       jsr 11dc6 <getFuncNumForCallback>
   11f02:	       lea 12(sp),sp
   11f06:	       tst.w d0
   11f08:	/----- beq.s 11f1a <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
   11f0a:	|      movea.l 1c320 <currentEvents>,a0
   11f10:	|      move.l (sp),d0
   11f12:	|      move.l d0,20(a0)
		return BR_CONTINUE;
   11f16:	|      moveq #2,d0
   11f18:	|  /-- bra.s 11f1c <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
   11f1a:	\--|-> moveq #1,d0
}
   11f1c:	   \-> addq.l #4,sp
   11f1e:	       rts

00011f20 <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   11f20:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f22:	       move.l sp,d0
   11f24:	       move.l d0,-(sp)
   11f26:	       move.l 16(sp),-(sp)
   11f2a:	       move.l 16(sp),-(sp)
   11f2e:	       jsr 11dc6 <getFuncNumForCallback>
   11f34:	       lea 12(sp),sp
   11f38:	       tst.w d0
   11f3a:	/----- beq.s 11f4c <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   11f3c:	|      movea.l 1c320 <currentEvents>,a0
   11f42:	|      move.l (sp),d0
   11f44:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   11f48:	|      moveq #2,d0
   11f4a:	|  /-- bra.s 11f4e <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   11f4c:	\--|-> moveq #1,d0
}
   11f4e:	   \-> addq.l #4,sp
   11f50:	       rts

00011f52 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   11f52:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f54:	       move.l sp,d0
   11f56:	       move.l d0,-(sp)
   11f58:	       move.l 16(sp),-(sp)
   11f5c:	       move.l 16(sp),-(sp)
   11f60:	       jsr 11dc6 <getFuncNumForCallback>
   11f66:	       lea 12(sp),sp
   11f6a:	       tst.w d0
   11f6c:	/----- beq.s 11f7e <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   11f6e:	|      movea.l 1c320 <currentEvents>,a0
   11f74:	|      move.l (sp),d0
   11f76:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   11f7a:	|      moveq #2,d0
   11f7c:	|  /-- bra.s 11f80 <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   11f7e:	\--|-> moveq #1,d0
}
   11f80:	   \-> addq.l #4,sp
   11f82:	       rts

00011f84 <builtIn_spawnSub>:

builtIn (spawnSub)
{
   11f84:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f86:	          move.l sp,d0
   11f88:	          move.l d0,-(sp)
   11f8a:	          move.l 16(sp),-(sp)
   11f8e:	          move.l 16(sp),-(sp)
   11f92:	          jsr 11dc6 <getFuncNumForCallback>
   11f98:	          lea 12(sp),sp
   11f9c:	          tst.w d0
   11f9e:	/-------- beq.s 11fca <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   11fa0:	|         move.l 1c978 <noStack>,d1
   11fa6:	|         move.l (sp),d0
   11fa8:	|         pea 1 <_start+0x1>
   11fac:	|         move.l d1,-(sp)
   11fae:	|         clr.l -(sp)
   11fb0:	|         clr.l -(sp)
   11fb2:	|         move.l d0,-(sp)
   11fb4:	|         jsr 6ad4 <startNewFunctionNum>
   11fba:	|         lea 20(sp),sp
   11fbe:	|         tst.l d0
   11fc0:	|     /-- bne.s 11fc6 <builtIn_spawnSub+0x42>
   11fc2:	|     |   moveq #1,d0
   11fc4:	|  /--|-- bra.s 11fcc <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   11fc6:	|  |  \-> moveq #2,d0
   11fc8:	|  +----- bra.s 11fcc <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   11fca:	\--|----> moveq #1,d0
}
   11fcc:	   \----> addq.l #4,sp
   11fce:	          rts

00011fd0 <builtIn_cancelSub>:

builtIn (cancelSub)
{
   11fd0:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11fd2:	          move.l sp,d0
   11fd4:	          addq.l #4,d0
   11fd6:	          move.l d0,-(sp)
   11fd8:	          move.l 20(sp),-(sp)
   11fdc:	          move.l 20(sp),-(sp)
   11fe0:	          jsr 11dc6 <getFuncNumForCallback>
   11fe6:	          lea 12(sp),sp
   11fea:	          tst.w d0
   11fec:	/-------- beq.s 12022 <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   11fee:	|         move.l 4(sp),d1
   11ff2:	|         move.l sp,d0
   11ff4:	|         addq.l #2,d0
   11ff6:	|         move.l d0,-(sp)
   11ff8:	|         move.l 20(sp),-(sp)
   11ffc:	|         move.l d1,-(sp)
   11ffe:	|         jsr 47fa <cancelAFunction>
   12004:	|         lea 12(sp),sp
		if (killedMyself) {
   12008:	|         move.w 2(sp),d0
   1200c:	|  /----- beq.s 1201e <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   1200e:	|  |      move.l 16(sp),-(sp)
   12012:	|  |      jsr 4718 <abortFunction>
   12018:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   1201a:	|  |      moveq #5,d0
   1201c:	|  |  /-- bra.s 12024 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   1201e:	|  \--|-> moveq #2,d0
   12020:	|     +-- bra.s 12024 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   12022:	\-----|-> moveq #1,d0
}
   12024:	      \-> addq.l #8,sp
   12026:	          rts

00012028 <builtIn_stringWidth>:

builtIn(stringWidth)
{
   12028:	       subq.l #8,sp
   1202a:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   1202c:	       movea.l 20(sp),a0
   12030:	       move.l 24(a0),d0
   12034:	       move.l d0,-(sp)
   12036:	       jsr 14da8 <getTextFromAnyVar>
   1203c:	       addq.l #4,sp
   1203e:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   12042:	   /-- bne.s 12048 <builtIn_stringWidth+0x20>
   12044:	   |   moveq #1,d0
   12046:	/--|-- bra.s 12096 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   12048:	|  \-> moveq #24,d0
   1204a:	|      add.l 20(sp),d0
   1204e:	|      move.l d0,-(sp)
   12050:	|      jsr 15156 <trimStack>
   12056:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   12058:	|      move.l 8(sp),-(sp)
   1205c:	|      jsr 158b4 <stringWidth>
   12062:	|      addq.l #4,sp
   12064:	|      move.l d0,d1
   12066:	|      moveq #28,d0
   12068:	|      add.l 20(sp),d0
   1206c:	|      move.l d1,-(sp)
   1206e:	|      pea 1 <_start+0x1>
   12072:	|      move.l d0,-(sp)
   12074:	|      jsr 150c4 <setVariable>
   1207a:	|      lea 12(sp),sp
	FreeVec(theText);
   1207e:	|      move.l 8(sp),4(sp)
   12084:	|      move.l 1c9a8 <SysBase>,d0
   1208a:	|      movea.l d0,a6
   1208c:	|      movea.l 4(sp),a1
   12090:	|      jsr -690(a6)
	return BR_CONTINUE;
   12094:	|      moveq #2,d0
}
   12096:	\----> movea.l (sp)+,a6
   12098:	       addq.l #8,sp
   1209a:	       rts

0001209c <builtIn_hardScroll>:

builtIn(hardScroll)
{
   1209c:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1209e:	       movea.l 12(sp),a0
   120a2:	       move.l 24(a0),d0
   120a6:	       move.l d0,-(sp)
   120a8:	       pea 1 <_start+0x1>
   120ac:	       move.l sp,d0
   120ae:	       addq.l #8,d0
   120b0:	       move.l d0,-(sp)
   120b2:	       jsr 147d2 <getValueType>
   120b8:	       lea 12(sp),sp
   120bc:	       tst.w d0
   120be:	   /-- bne.s 120c4 <builtIn_hardScroll+0x28>
   120c0:	   |   moveq #1,d0
   120c2:	/--|-- bra.s 120e2 <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   120c4:	|  \-> moveq #24,d0
   120c6:	|      add.l 12(sp),d0
   120ca:	|      move.l d0,-(sp)
   120cc:	|      jsr 15156 <trimStack>
   120d2:	|      addq.l #4,sp
	hardScroll (v);
   120d4:	|      move.l (sp),d0
   120d6:	|      move.l d0,-(sp)
   120d8:	|      jsr d26e <hardScroll>
   120de:	|      addq.l #4,sp
	return BR_CONTINUE;
   120e0:	|      moveq #2,d0
}
   120e2:	\----> addq.l #4,sp
   120e4:	       rts

000120e6 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   120e6:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   120e8:	       movea.l 12(sp),a0
   120ec:	       move.l 24(a0),d0
   120f0:	       move.l d0,-(sp)
   120f2:	       pea 7 <_start+0x7>
   120f6:	       move.l sp,d0
   120f8:	       addq.l #8,d0
   120fa:	       move.l d0,-(sp)
   120fc:	       jsr 147d2 <getValueType>
   12102:	       lea 12(sp),sp
   12106:	       tst.w d0
   12108:	   /-- bne.s 1210e <builtIn_isScreenRegion+0x28>
   1210a:	   |   moveq #1,d0
   1210c:	/--|-- bra.s 1214e <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   1210e:	|  \-> moveq #24,d0
   12110:	|      add.l 12(sp),d0
   12114:	|      move.l d0,-(sp)
   12116:	|      jsr 15156 <trimStack>
   1211c:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   1211e:	|      move.l (sp),d0
   12120:	|      move.l d0,-(sp)
   12122:	|      jsr 15a14 <getRegionForObject>
   12128:	|      addq.l #4,sp
   1212a:	|      tst.l d0
   1212c:	|      sne d0
   1212e:	|      neg.b d0
   12130:	|      moveq #0,d1
   12132:	|      move.b d0,d1
   12134:	|      moveq #28,d0
   12136:	|      add.l 12(sp),d0
   1213a:	|      move.l d1,-(sp)
   1213c:	|      pea 1 <_start+0x1>
   12140:	|      move.l d0,-(sp)
   12142:	|      jsr 150c4 <setVariable>
   12148:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1214c:	|      moveq #2,d0
}
   1214e:	\----> addq.l #4,sp
   12150:	       rts

00012152 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   12152:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12154:	       movea.l 12(sp),a0
   12158:	       move.l 24(a0),d0
   1215c:	       move.l d0,-(sp)
   1215e:	       pea 1 <_start+0x1>
   12162:	       move.l sp,d0
   12164:	       addq.l #8,d0
   12166:	       move.l d0,-(sp)
   12168:	       jsr 147d2 <getValueType>
   1216e:	       lea 12(sp),sp
   12172:	       tst.w d0
   12174:	   /-- bne.s 1217a <builtIn_setSpeechSpeed+0x28>
   12176:	   |   moveq #1,d0
   12178:	/--|-- bra.s 121c8 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   1217a:	|  \-> moveq #24,d0
   1217c:	|      add.l 12(sp),d0
   12180:	|      move.l d0,-(sp)
   12182:	|      jsr 15156 <trimStack>
   12188:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   1218a:	|      move.l (sp),d0
   1218c:	|      move.l d0,-(sp)
   1218e:	|      jsr 17664 <__floatsisf>
   12194:	|      addq.l #4,sp
   12196:	|      move.l #1008981770,-(sp)
   1219c:	|      move.l d0,-(sp)
   1219e:	|      jsr 17716 <__mulsf3>
   121a4:	|      addq.l #8,sp
   121a6:	|      move.l d0,1c332 <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   121ac:	|      moveq #28,d0
   121ae:	|      add.l 12(sp),d0
   121b2:	|      pea 1 <_start+0x1>
   121b6:	|      pea 1 <_start+0x1>
   121ba:	|      move.l d0,-(sp)
   121bc:	|      jsr 150c4 <setVariable>
   121c2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   121c6:	|      moveq #2,d0
}
   121c8:	\----> addq.l #4,sp
   121ca:	       rts

000121cc <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   121cc:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   121ce:	       movea.l 12(sp),a0
   121d2:	       move.l 24(a0),d0
   121d6:	       move.l d0,-(sp)
   121d8:	       pea 1 <_start+0x1>
   121dc:	       move.l sp,d0
   121de:	       addq.l #8,d0
   121e0:	       move.l d0,-(sp)
   121e2:	       jsr 147d2 <getValueType>
   121e8:	       lea 12(sp),sp
   121ec:	       tst.w d0
   121ee:	   /-- bne.s 121f4 <builtIn_setFontSpacing+0x28>
   121f0:	   |   moveq #1,d0
   121f2:	/--|-- bra.s 1222a <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   121f4:	|  \-> move.l (sp),d0
   121f6:	|      move.l d0,d0
   121f8:	|      move.w d0,1c8ac <fontSpace>
	trimStack (&fun -> stack);
   121fe:	|      moveq #24,d0
   12200:	|      add.l 12(sp),d0
   12204:	|      move.l d0,-(sp)
   12206:	|      jsr 15156 <trimStack>
   1220c:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   1220e:	|      moveq #28,d0
   12210:	|      add.l 12(sp),d0
   12214:	|      pea 1 <_start+0x1>
   12218:	|      pea 1 <_start+0x1>
   1221c:	|      move.l d0,-(sp)
   1221e:	|      jsr 150c4 <setVariable>
   12224:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12228:	|      moveq #2,d0
}
   1222a:	\----> addq.l #4,sp
   1222c:	       rts

0001222e <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   1222e:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12230:	          movea.l 12(sp),a0
   12234:	          move.l 24(a0),d0
   12238:	          move.l d0,-(sp)
   1223a:	          pea 1 <_start+0x1>
   1223e:	          move.l sp,d0
   12240:	          addq.l #8,d0
   12242:	          move.l d0,-(sp)
   12244:	          jsr 147d2 <getValueType>
   1224a:	          lea 12(sp),sp
   1224e:	          tst.w d0
   12250:	      /-- bne.s 12256 <builtIn_transitionLevel+0x28>
   12252:	      |   moveq #1,d0
   12254:	/-----|-- bra.s 122aa <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   12256:	|     \-> moveq #24,d0
   12258:	|         add.l 12(sp),d0
   1225c:	|         move.l d0,-(sp)
   1225e:	|         jsr 15156 <trimStack>
   12264:	|         addq.l #4,sp

	if (number < 0)
   12266:	|         move.l (sp),d0
   12268:	|     /-- bpl.s 12272 <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   1226a:	|     |   clr.b 1c31e <brightnessLevel>
   12270:	|  /--|-- bra.s 1228e <builtIn_transitionLevel+0x60>
	else if (number > 255)
   12272:	|  |  \-> move.l (sp),d0
   12274:	|  |      cmpi.l #255,d0
   1227a:	|  |  /-- ble.s 12284 <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   1227c:	|  |  |   st 1c31e <brightnessLevel>
   12282:	|  +--|-- bra.s 1228e <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   12284:	|  |  \-> move.l (sp),d0
   12286:	|  |      move.l d0,d0
   12288:	|  |      move.b d0,1c31e <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   1228e:	|  \----> moveq #28,d0
   12290:	|         add.l 12(sp),d0
   12294:	|         pea 1 <_start+0x1>
   12298:	|         pea 1 <_start+0x1>
   1229c:	|         move.l d0,-(sp)
   1229e:	|         jsr 150c4 <setVariable>
   122a4:	|         lea 12(sp),sp
	return BR_CONTINUE;
   122a8:	|         moveq #2,d0
}
   122aa:	\-------> addq.l #4,sp
   122ac:	          rts

000122ae <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   122ae:	movea.l 8(sp),a0
   122b2:	move.l 24(a0),d0
   122b6:	move.l d0,-(sp)
   122b8:	jsr 14d12 <getBoolean>
   122be:	addq.l #4,sp
   122c0:	move.w d0,1c948 <captureAllKeys>
	trimStack (&fun -> stack);
   122c6:	moveq #24,d0
   122c8:	add.l 8(sp),d0
   122cc:	move.l d0,-(sp)
   122ce:	jsr 15156 <trimStack>
   122d4:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   122d6:	move.w 1c948 <captureAllKeys>,d0
   122dc:	movea.w d0,a0
   122de:	moveq #28,d0
   122e0:	add.l 8(sp),d0
   122e4:	move.l a0,-(sp)
   122e6:	pea 1 <_start+0x1>
   122ea:	move.l d0,-(sp)
   122ec:	jsr 150c4 <setVariable>
   122f2:	lea 12(sp),sp
	return BR_CONTINUE;
   122f6:	moveq #2,d0
}
   122f8:	rts

000122fa <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   122fa:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   122fe:	       movea.l 20(sp),a0
   12302:	       move.l 24(a0),d0
   12306:	       move.l d0,-(sp)
   12308:	       pea 1 <_start+0x1>
   1230c:	       moveq #12,d0
   1230e:	       add.l sp,d0
   12310:	       move.l d0,-(sp)
   12312:	       jsr 147d2 <getValueType>
   12318:	       lea 12(sp),sp
   1231c:	       tst.w d0
   1231e:	   /-- bne.s 12326 <builtIn_spinCharacter+0x2c>
   12320:	   |   moveq #1,d0
   12322:	/--|-- bra.w 123d6 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   12326:	|  \-> moveq #24,d0
   12328:	|      add.l 20(sp),d0
   1232c:	|      move.l d0,-(sp)
   1232e:	|      jsr 15156 <trimStack>
   12334:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12336:	|      movea.l 20(sp),a0
   1233a:	|      move.l 24(a0),d0
   1233e:	|      move.l d0,-(sp)
   12340:	|      pea 7 <_start+0x7>
   12344:	|      lea 8(sp),a0
   12348:	|      move.l a0,-(sp)
   1234a:	|      jsr 147d2 <getValueType>
   12350:	|      lea 12(sp),sp
   12354:	|      tst.w d0
   12356:	|  /-- bne.s 1235c <builtIn_spinCharacter+0x62>
   12358:	|  |   moveq #1,d0
   1235a:	+--|-- bra.s 123d6 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   1235c:	|  \-> moveq #24,d0
   1235e:	|      add.l 20(sp),d0
   12362:	|      move.l d0,-(sp)
   12364:	|      jsr 15156 <trimStack>
   1236a:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1236c:	|      move.l (sp),d0
   1236e:	|      move.l d0,-(sp)
   12370:	|      jsr a626 <findPerson>
   12376:	|      addq.l #4,sp
   12378:	|      move.l d0,8(sp)
	if (thisPerson) {
   1237c:	|  /-- beq.s 123bc <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   1237e:	|  |   move.l 4(sp),d0
   12382:	|  |   movea.l 8(sp),a0
   12386:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   1238a:	|  |   movea.l 8(sp),a0
   1238e:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   12394:	|  |   movea.l 8(sp),a0
   12398:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   1239e:	|  |   moveq #28,d0
   123a0:	|  |   add.l 20(sp),d0
   123a4:	|  |   pea 1 <_start+0x1>
   123a8:	|  |   pea 1 <_start+0x1>
   123ac:	|  |   move.l d0,-(sp)
   123ae:	|  |   jsr 150c4 <setVariable>
   123b4:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   123b8:	|  |   moveq #3,d0
   123ba:	+--|-- bra.s 123d6 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   123bc:	|  \-> moveq #28,d0
   123be:	|      add.l 20(sp),d0
   123c2:	|      clr.l -(sp)
   123c4:	|      pea 1 <_start+0x1>
   123c8:	|      move.l d0,-(sp)
   123ca:	|      jsr 150c4 <setVariable>
   123d0:	|      lea 12(sp),sp
		return BR_CONTINUE;
   123d4:	|      moveq #2,d0
	}
}
   123d6:	\----> lea 12(sp),sp
   123da:	       rts

000123dc <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   123dc:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   123de:	          movea.l 16(sp),a0
   123e2:	          move.l 24(a0),d0
   123e6:	          move.l d0,-(sp)
   123e8:	          pea 7 <_start+0x7>
   123ec:	          move.l sp,d0
   123ee:	          addq.l #8,d0
   123f0:	          move.l d0,-(sp)
   123f2:	          jsr 147d2 <getValueType>
   123f8:	          lea 12(sp),sp
   123fc:	          tst.w d0
   123fe:	      /-- bne.s 12404 <builtIn_getCharacterDirection+0x28>
   12400:	      |   moveq #1,d0
   12402:	/-----|-- bra.s 12462 <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   12404:	|     \-> moveq #24,d0
   12406:	|         add.l 16(sp),d0
   1240a:	|         move.l d0,-(sp)
   1240c:	|         jsr 15156 <trimStack>
   12412:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12414:	|         move.l (sp),d0
   12416:	|         move.l d0,-(sp)
   12418:	|         jsr a626 <findPerson>
   1241e:	|         addq.l #4,sp
   12420:	|         move.l d0,4(sp)
	if (thisPerson) {
   12424:	|  /----- beq.s 12448 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   12426:	|  |      movea.l 4(sp),a0
   1242a:	|  |      move.l 106(a0),d1
   1242e:	|  |      moveq #28,d0
   12430:	|  |      add.l 16(sp),d0
   12434:	|  |      move.l d1,-(sp)
   12436:	|  |      pea 1 <_start+0x1>
   1243a:	|  |      move.l d0,-(sp)
   1243c:	|  |      jsr 150c4 <setVariable>
   12442:	|  |      lea 12(sp),sp
   12446:	|  |  /-- bra.s 12460 <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12448:	|  \--|-> moveq #28,d0
   1244a:	|     |   add.l 16(sp),d0
   1244e:	|     |   clr.l -(sp)
   12450:	|     |   pea 1 <_start+0x1>
   12454:	|     |   move.l d0,-(sp)
   12456:	|     |   jsr 150c4 <setVariable>
   1245c:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12460:	|     \-> moveq #2,d0
}
   12462:	\-------> addq.l #8,sp
   12464:	          rts

00012466 <builtIn_isCharacter>:

builtIn(isCharacter)
{
   12466:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12468:	       movea.l 16(sp),a0
   1246c:	       move.l 24(a0),d0
   12470:	       move.l d0,-(sp)
   12472:	       pea 7 <_start+0x7>
   12476:	       move.l sp,d0
   12478:	       addq.l #8,d0
   1247a:	       move.l d0,-(sp)
   1247c:	       jsr 147d2 <getValueType>
   12482:	       lea 12(sp),sp
   12486:	       tst.w d0
   12488:	   /-- bne.s 1248e <builtIn_isCharacter+0x28>
   1248a:	   |   moveq #1,d0
   1248c:	/--|-- bra.s 124d0 <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   1248e:	|  \-> moveq #24,d0
   12490:	|      add.l 16(sp),d0
   12494:	|      move.l d0,-(sp)
   12496:	|      jsr 15156 <trimStack>
   1249c:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1249e:	|      move.l (sp),d0
   124a0:	|      move.l d0,-(sp)
   124a2:	|      jsr a626 <findPerson>
   124a8:	|      addq.l #4,sp
   124aa:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   124ae:	|      sne d0
   124b0:	|      neg.b d0
   124b2:	|      moveq #0,d1
   124b4:	|      move.b d0,d1
   124b6:	|      moveq #28,d0
   124b8:	|      add.l 16(sp),d0
   124bc:	|      move.l d1,-(sp)
   124be:	|      pea 1 <_start+0x1>
   124c2:	|      move.l d0,-(sp)
   124c4:	|      jsr 150c4 <setVariable>
   124ca:	|      lea 12(sp),sp
	return BR_CONTINUE;
   124ce:	|      moveq #2,d0
}
   124d0:	\----> addq.l #8,sp
   124d2:	       rts

000124d4 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   124d4:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   124d6:	          movea.l 16(sp),a0
   124da:	          move.l 24(a0),d0
   124de:	          move.l d0,-(sp)
   124e0:	          pea 7 <_start+0x7>
   124e4:	          move.l sp,d0
   124e6:	          addq.l #8,d0
   124e8:	          move.l d0,-(sp)
   124ea:	          jsr 147d2 <getValueType>
   124f0:	          lea 12(sp),sp
   124f4:	          tst.w d0
   124f6:	      /-- bne.s 124fc <builtIn_normalCharacter+0x28>
   124f8:	      |   moveq #1,d0
   124fa:	/-----|-- bra.s 12578 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   124fc:	|     \-> moveq #24,d0
   124fe:	|         add.l 16(sp),d0
   12502:	|         move.l d0,-(sp)
   12504:	|         jsr 15156 <trimStack>
   1250a:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1250c:	|         move.l (sp),d0
   1250e:	|         move.l d0,-(sp)
   12510:	|         jsr a626 <findPerson>
   12516:	|         addq.l #4,sp
   12518:	|         move.l d0,4(sp)
	if (thisPerson)
   1251c:	|  /----- beq.s 1255e <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   1251e:	|  |      movea.l 4(sp),a0
   12522:	|  |      movea.l 80(a0),a0
   12526:	|  |      move.l (a0),d1
   12528:	|  |      movea.l 4(sp),a0
   1252c:	|  |      move.l 106(a0),d0
   12530:	|  |      add.l d0,d0
   12532:	|  |      add.l d0,d0
   12534:	|  |      movea.l d1,a0
   12536:	|  |      adda.l d0,a0
   12538:	|  |      move.l (a0),d0
   1253a:	|  |      movea.l 4(sp),a0
   1253e:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12542:	|  |      moveq #28,d0
   12544:	|  |      add.l 16(sp),d0
   12548:	|  |      pea 1 <_start+0x1>
   1254c:	|  |      pea 1 <_start+0x1>
   12550:	|  |      move.l d0,-(sp)
   12552:	|  |      jsr 150c4 <setVariable>
   12558:	|  |      lea 12(sp),sp
   1255c:	|  |  /-- bra.s 12576 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1255e:	|  \--|-> moveq #28,d0
   12560:	|     |   add.l 16(sp),d0
   12564:	|     |   clr.l -(sp)
   12566:	|     |   pea 1 <_start+0x1>
   1256a:	|     |   move.l d0,-(sp)
   1256c:	|     |   jsr 150c4 <setVariable>
   12572:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12576:	|     \-> moveq #2,d0
}
   12578:	\-------> addq.l #8,sp
   1257a:	          rts

0001257c <builtIn_isMoving>:

builtIn(isMoving)
{
   1257c:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1257e:	          movea.l 16(sp),a0
   12582:	          move.l 24(a0),d0
   12586:	          move.l d0,-(sp)
   12588:	          pea 7 <_start+0x7>
   1258c:	          move.l sp,d0
   1258e:	          addq.l #8,d0
   12590:	          move.l d0,-(sp)
   12592:	          jsr 147d2 <getValueType>
   12598:	          lea 12(sp),sp
   1259c:	          tst.w d0
   1259e:	      /-- bne.s 125a4 <builtIn_isMoving+0x28>
   125a0:	      |   moveq #1,d0
   125a2:	/-----|-- bra.s 12604 <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   125a4:	|     \-> moveq #24,d0
   125a6:	|         add.l 16(sp),d0
   125aa:	|         move.l d0,-(sp)
   125ac:	|         jsr 15156 <trimStack>
   125b2:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   125b4:	|         move.l (sp),d0
   125b6:	|         move.l d0,-(sp)
   125b8:	|         jsr a626 <findPerson>
   125be:	|         addq.l #4,sp
   125c0:	|         move.l d0,4(sp)
	if (thisPerson)
   125c4:	|  /----- beq.s 125ea <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   125c6:	|  |      movea.l 4(sp),a0
   125ca:	|  |      move.w 64(a0),d0
   125ce:	|  |      movea.w d0,a0
   125d0:	|  |      moveq #28,d0
   125d2:	|  |      add.l 16(sp),d0
   125d6:	|  |      move.l a0,-(sp)
   125d8:	|  |      pea 1 <_start+0x1>
   125dc:	|  |      move.l d0,-(sp)
   125de:	|  |      jsr 150c4 <setVariable>
   125e4:	|  |      lea 12(sp),sp
   125e8:	|  |  /-- bra.s 12602 <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   125ea:	|  \--|-> moveq #28,d0
   125ec:	|     |   add.l 16(sp),d0
   125f0:	|     |   clr.l -(sp)
   125f2:	|     |   pea 1 <_start+0x1>
   125f6:	|     |   move.l d0,-(sp)
   125f8:	|     |   jsr 150c4 <setVariable>
   125fe:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12602:	|     \-> moveq #2,d0
}
   12604:	\-------> addq.l #8,sp
   12606:	          rts

00012608 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   12608:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1260c:	          movea.l 20(sp),a0
   12610:	          move.l 24(a0),d0
   12614:	          move.l d0,-(sp)
   12616:	          pea 7 <_start+0x7>
   1261a:	          lea 8(sp),a0
   1261e:	          move.l a0,-(sp)
   12620:	          jsr 147d2 <getValueType>
   12626:	          lea 12(sp),sp
   1262a:	          tst.w d0
   1262c:	      /-- bne.s 12634 <builtIn_fetchEvent+0x2c>
   1262e:	      |   moveq #1,d0
   12630:	/-----|-- bra.w 126c8 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   12634:	|     \-> moveq #24,d0
   12636:	|         add.l 20(sp),d0
   1263a:	|         move.l d0,-(sp)
   1263c:	|         jsr 15156 <trimStack>
   12642:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12644:	|         movea.l 20(sp),a0
   12648:	|         move.l 24(a0),d0
   1264c:	|         move.l d0,-(sp)
   1264e:	|         pea 7 <_start+0x7>
   12652:	|         moveq #12,d0
   12654:	|         add.l sp,d0
   12656:	|         move.l d0,-(sp)
   12658:	|         jsr 147d2 <getValueType>
   1265e:	|         lea 12(sp),sp
   12662:	|         tst.w d0
   12664:	|     /-- bne.s 1266a <builtIn_fetchEvent+0x62>
   12666:	|     |   moveq #1,d0
   12668:	+-----|-- bra.s 126c8 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   1266a:	|     \-> moveq #24,d0
   1266c:	|         add.l 20(sp),d0
   12670:	|         move.l d0,-(sp)
   12672:	|         jsr 15156 <trimStack>
   12678:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   1267a:	|         move.l (sp),d1
   1267c:	|         move.l 4(sp),d0
   12680:	|         move.l d1,-(sp)
   12682:	|         move.l d0,-(sp)
   12684:	|         jsr d550 <getCombinationFunction>
   1268a:	|         addq.l #8,sp
   1268c:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   12690:	|  /----- beq.s 126ae <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   12692:	|  |      moveq #28,d0
   12694:	|  |      add.l 20(sp),d0
   12698:	|  |      move.l 8(sp),-(sp)
   1269c:	|  |      pea 2 <_start+0x2>
   126a0:	|  |      move.l d0,-(sp)
   126a2:	|  |      jsr 150c4 <setVariable>
   126a8:	|  |      lea 12(sp),sp
   126ac:	|  |  /-- bra.s 126c6 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   126ae:	|  \--|-> moveq #28,d0
   126b0:	|     |   add.l 20(sp),d0
   126b4:	|     |   clr.l -(sp)
   126b6:	|     |   pea 1 <_start+0x1>
   126ba:	|     |   move.l d0,-(sp)
   126bc:	|     |   jsr 150c4 <setVariable>
   126c2:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   126c6:	|     \-> moveq #2,d0
}
   126c8:	\-------> lea 12(sp),sp
   126cc:	          rts

000126ce <builtIn_deleteFile>:

builtIn(deleteFile)
{
   126ce:	       lea -24(sp),sp
   126d2:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   126d4:	       movea.l 36(sp),a0
   126d8:	       move.l 24(a0),d0
   126dc:	       move.l d0,-(sp)
   126de:	       jsr 14da8 <getTextFromAnyVar>
   126e4:	       addq.l #4,sp
   126e6:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   126ea:	       moveq #24,d0
   126ec:	       add.l 36(sp),d0
   126f0:	       move.l d0,-(sp)
   126f2:	       jsr 15156 <trimStack>
   126f8:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   126fa:	       move.l 24(sp),-(sp)
   126fe:	       jsr 2fe <encodeFilename>
   12704:	       addq.l #4,sp
   12706:	       move.l d0,20(sp)
    FreeVec(namNormal);
   1270a:	       move.l 24(sp),16(sp)
   12710:	       move.l 1c9a8 <SysBase>,d0
   12716:	       movea.l d0,a6
   12718:	       movea.l 16(sp),a1
   1271c:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   12720:	       move.l 20(sp),-(sp)
   12724:	       jsr e308 <failSecurityCheck>
   1272a:	       addq.l #4,sp
   1272c:	       tst.w d0
   1272e:	   /-- beq.s 12734 <builtIn_deleteFile+0x66>
   12730:	   |   moveq #1,d0
   12732:	/--|-- bra.s 12782 <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   12734:	|  \-> move.l 20(sp),12(sp)
   1273a:	|      move.l 1c9b0 <DOSBase>,d0
   12740:	|      movea.l d0,a6
   12742:	|      move.l 12(sp),d1
   12746:	|      jsr -72(a6)
   1274a:	|      move.l d0,8(sp)
   1274e:	|      move.l 8(sp),d1
   12752:	|      moveq #28,d0
   12754:	|      add.l 36(sp),d0
   12758:	|      move.l d1,-(sp)
   1275a:	|      pea 1 <_start+0x1>
   1275e:	|      move.l d0,-(sp)
   12760:	|      jsr 150c4 <setVariable>
   12766:	|      lea 12(sp),sp
    FreeVec(nam);
   1276a:	|      move.l 20(sp),4(sp)
   12770:	|      move.l 1c9a8 <SysBase>,d0
   12776:	|      movea.l d0,a6
   12778:	|      movea.l 4(sp),a1
   1277c:	|      jsr -690(a6)

    return BR_CONTINUE;
   12780:	|      moveq #2,d0
}
   12782:	\----> movea.l (sp)+,a6
   12784:	       lea 24(sp),sp
   12788:	       rts

0001278a <builtIn_renameFile>:

builtIn(renameFile)
{
   1278a:	       lea -40(sp),sp
   1278e:	       move.l a6,-(sp)
   12790:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   12792:	       movea.l 56(sp),a0
   12796:	       move.l 24(a0),d0
   1279a:	       move.l d0,-(sp)
   1279c:	       jsr 14da8 <getTextFromAnyVar>
   127a2:	       addq.l #4,sp
   127a4:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   127a8:	       move.l 44(sp),-(sp)
   127ac:	       jsr 2fe <encodeFilename>
   127b2:	       addq.l #4,sp
   127b4:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   127b8:	       moveq #24,d0
   127ba:	       add.l 56(sp),d0
   127be:	       move.l d0,-(sp)
   127c0:	       jsr 15156 <trimStack>
   127c6:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   127c8:	       move.l 40(sp),-(sp)
   127cc:	       jsr e308 <failSecurityCheck>
   127d2:	       addq.l #4,sp
   127d4:	       tst.w d0
   127d6:	   /-- beq.s 127de <builtIn_renameFile+0x54>
   127d8:	   |   moveq #1,d0
   127da:	/--|-- bra.w 128c4 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   127de:	|  \-> move.l 44(sp),36(sp)
   127e4:	|      move.l 1c9a8 <SysBase>,d0
   127ea:	|      movea.l d0,a6
   127ec:	|      movea.l 36(sp),a1
   127f0:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   127f4:	|      movea.l 56(sp),a0
   127f8:	|      move.l 24(a0),d0
   127fc:	|      move.l d0,-(sp)
   127fe:	|      jsr 14da8 <getTextFromAnyVar>
   12804:	|      addq.l #4,sp
   12806:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   1280a:	|      move.l 44(sp),-(sp)
   1280e:	|      jsr 2fe <encodeFilename>
   12814:	|      addq.l #4,sp
   12816:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   1281a:	|      moveq #24,d0
   1281c:	|      add.l 56(sp),d0
   12820:	|      move.l d0,-(sp)
   12822:	|      jsr 15156 <trimStack>
   12828:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   1282a:	|      move.l 32(sp),-(sp)
   1282e:	|      jsr e308 <failSecurityCheck>
   12834:	|      addq.l #4,sp
   12836:	|      tst.w d0
   12838:	|  /-- beq.s 12840 <builtIn_renameFile+0xb6>
   1283a:	|  |   moveq #1,d0
   1283c:	+--|-- bra.w 128c4 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   12840:	|  \-> move.l 44(sp),28(sp)
   12846:	|      move.l 1c9a8 <SysBase>,d0
   1284c:	|      movea.l d0,a6
   1284e:	|      movea.l 28(sp),a1
   12852:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   12856:	|      move.l 32(sp),24(sp)
   1285c:	|      move.l 40(sp),20(sp)
   12862:	|      move.l 1c9b0 <DOSBase>,d0
   12868:	|      movea.l d0,a6
   1286a:	|      move.l 24(sp),d1
   1286e:	|      move.l 20(sp),d2
   12872:	|      jsr -78(a6)
   12876:	|      move.l d0,16(sp)
   1287a:	|      move.l 16(sp),d1
   1287e:	|      moveq #28,d0
   12880:	|      add.l 56(sp),d0
   12884:	|      move.l d1,-(sp)
   12886:	|      pea 1 <_start+0x1>
   1288a:	|      move.l d0,-(sp)
   1288c:	|      jsr 150c4 <setVariable>
   12892:	|      lea 12(sp),sp
	FreeVec(nam);
   12896:	|      move.l 32(sp),12(sp)
   1289c:	|      move.l 1c9a8 <SysBase>,d0
   128a2:	|      movea.l d0,a6
   128a4:	|      movea.l 12(sp),a1
   128a8:	|      jsr -690(a6)
	FreeVec(newnam);
   128ac:	|      move.l 40(sp),8(sp)
   128b2:	|      move.l 1c9a8 <SysBase>,d0
   128b8:	|      movea.l d0,a6
   128ba:	|      movea.l 8(sp),a1
   128be:	|      jsr -690(a6)

	return BR_CONTINUE;
   128c2:	|      moveq #2,d0
}
   128c4:	\----> move.l (sp)+,d2
   128c6:	       movea.l (sp)+,a6
   128c8:	       lea 40(sp),sp
   128cc:	       rts

000128ce <builtIn_cacheSound>:

builtIn(cacheSound)
{
   128ce:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   128d0:	       movea.l 12(sp),a0
   128d4:	       move.l 24(a0),d0
   128d8:	       move.l d0,-(sp)
   128da:	       pea 5 <_start+0x5>
   128de:	       move.l sp,d0
   128e0:	       addq.l #8,d0
   128e2:	       move.l d0,-(sp)
   128e4:	       jsr 147d2 <getValueType>
   128ea:	       lea 12(sp),sp
   128ee:	       tst.w d0
   128f0:	   /-- bne.s 128f6 <builtIn_cacheSound+0x28>
   128f2:	   |   moveq #1,d0
   128f4:	/--|-- bra.s 1291e <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   128f6:	|  \-> moveq #24,d0
   128f8:	|      add.l 12(sp),d0
   128fc:	|      move.l d0,-(sp)
   128fe:	|      jsr 15156 <trimStack>
   12904:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   12906:	|      move.l (sp),d0
   12908:	|      move.l d0,-(sp)
   1290a:	|      jsr d150 <cacheSound>
   12910:	|      addq.l #4,sp
   12912:	|      moveq #-1,d1
   12914:	|      cmp.l d0,d1
   12916:	|  /-- bne.s 1291c <builtIn_cacheSound+0x4e>
   12918:	|  |   moveq #1,d0
   1291a:	+--|-- bra.s 1291e <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   1291c:	|  \-> moveq #2,d0
}
   1291e:	\----> addq.l #4,sp
   12920:	       rts

00012922 <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   12922:	pea 19bd1 <line.c.05397aaf+0x245>
   12928:	jsr 17232 <KPrintF>
   1292e:	addq.l #4,sp
	return BR_CONTINUE;
   12930:	moveq #2,d0
}
   12932:	rts

00012934 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   12934:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12938:	          movea.l 20(sp),a0
   1293c:	          move.l 24(a0),d0
   12940:	          move.l d0,-(sp)
   12942:	          pea 1 <_start+0x1>
   12946:	          moveq #12,d0
   12948:	          add.l sp,d0
   1294a:	          move.l d0,-(sp)
   1294c:	          jsr 147d2 <getValueType>
   12952:	          lea 12(sp),sp
   12956:	          tst.w d0
   12958:	      /-- bne.s 12960 <builtIn_setCharacterSpinSpeed+0x2c>
   1295a:	      |   moveq #1,d0
   1295c:	/-----|-- bra.w 129fa <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12960:	|     \-> moveq #24,d0
   12962:	|         add.l 20(sp),d0
   12966:	|         move.l d0,-(sp)
   12968:	|         jsr 15156 <trimStack>
   1296e:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12970:	|         movea.l 20(sp),a0
   12974:	|         move.l 24(a0),d0
   12978:	|         move.l d0,-(sp)
   1297a:	|         pea 7 <_start+0x7>
   1297e:	|         lea 8(sp),a0
   12982:	|         move.l a0,-(sp)
   12984:	|         jsr 147d2 <getValueType>
   1298a:	|         lea 12(sp),sp
   1298e:	|         tst.w d0
   12990:	|     /-- bne.s 12996 <builtIn_setCharacterSpinSpeed+0x62>
   12992:	|     |   moveq #1,d0
   12994:	+-----|-- bra.s 129fa <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12996:	|     \-> moveq #24,d0
   12998:	|         add.l 20(sp),d0
   1299c:	|         move.l d0,-(sp)
   1299e:	|         jsr 15156 <trimStack>
   129a4:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   129a6:	|         move.l (sp),d0
   129a8:	|         move.l d0,-(sp)
   129aa:	|         jsr a626 <findPerson>
   129b0:	|         addq.l #4,sp
   129b2:	|         move.l d0,8(sp)

	if (thisPerson) {
   129b6:	|  /----- beq.s 129e0 <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   129b8:	|  |      move.l 4(sp),d0
   129bc:	|  |      movea.l 8(sp),a0
   129c0:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   129c4:	|  |      moveq #28,d0
   129c6:	|  |      add.l 20(sp),d0
   129ca:	|  |      pea 1 <_start+0x1>
   129ce:	|  |      pea 1 <_start+0x1>
   129d2:	|  |      move.l d0,-(sp)
   129d4:	|  |      jsr 150c4 <setVariable>
   129da:	|  |      lea 12(sp),sp
   129de:	|  |  /-- bra.s 129f8 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   129e0:	|  \--|-> moveq #28,d0
   129e2:	|     |   add.l 20(sp),d0
   129e6:	|     |   clr.l -(sp)
   129e8:	|     |   pea 1 <_start+0x1>
   129ec:	|     |   move.l d0,-(sp)
   129ee:	|     |   jsr 150c4 <setVariable>
   129f4:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   129f8:	|     \-> moveq #2,d0
}
   129fa:	\-------> lea 12(sp),sp
   129fe:	          rts

00012a00 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   12a00:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12a04:	          movea.l 20(sp),a0
   12a08:	          move.l 24(a0),d0
   12a0c:	          move.l d0,-(sp)
   12a0e:	          pea 1 <_start+0x1>
   12a12:	          moveq #12,d0
   12a14:	          add.l sp,d0
   12a16:	          move.l d0,-(sp)
   12a18:	          jsr 147d2 <getValueType>
   12a1e:	          lea 12(sp),sp
   12a22:	          tst.w d0
   12a24:	      /-- bne.s 12a2c <builtIn_setCharacterAngleOffset+0x2c>
   12a26:	      |   moveq #1,d0
   12a28:	/-----|-- bra.w 12ac6 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12a2c:	|     \-> moveq #24,d0
   12a2e:	|         add.l 20(sp),d0
   12a32:	|         move.l d0,-(sp)
   12a34:	|         jsr 15156 <trimStack>
   12a3a:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12a3c:	|         movea.l 20(sp),a0
   12a40:	|         move.l 24(a0),d0
   12a44:	|         move.l d0,-(sp)
   12a46:	|         pea 7 <_start+0x7>
   12a4a:	|         lea 8(sp),a0
   12a4e:	|         move.l a0,-(sp)
   12a50:	|         jsr 147d2 <getValueType>
   12a56:	|         lea 12(sp),sp
   12a5a:	|         tst.w d0
   12a5c:	|     /-- bne.s 12a62 <builtIn_setCharacterAngleOffset+0x62>
   12a5e:	|     |   moveq #1,d0
   12a60:	+-----|-- bra.s 12ac6 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12a62:	|     \-> moveq #24,d0
   12a64:	|         add.l 20(sp),d0
   12a68:	|         move.l d0,-(sp)
   12a6a:	|         jsr 15156 <trimStack>
   12a70:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12a72:	|         move.l (sp),d0
   12a74:	|         move.l d0,-(sp)
   12a76:	|         jsr a626 <findPerson>
   12a7c:	|         addq.l #4,sp
   12a7e:	|         move.l d0,8(sp)

	if (thisPerson) {
   12a82:	|  /----- beq.s 12aac <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   12a84:	|  |      move.l 4(sp),d0
   12a88:	|  |      movea.l 8(sp),a0
   12a8c:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12a90:	|  |      moveq #28,d0
   12a92:	|  |      add.l 20(sp),d0
   12a96:	|  |      pea 1 <_start+0x1>
   12a9a:	|  |      pea 1 <_start+0x1>
   12a9e:	|  |      move.l d0,-(sp)
   12aa0:	|  |      jsr 150c4 <setVariable>
   12aa6:	|  |      lea 12(sp),sp
   12aaa:	|  |  /-- bra.s 12ac4 <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12aac:	|  \--|-> moveq #28,d0
   12aae:	|     |   add.l 20(sp),d0
   12ab2:	|     |   clr.l -(sp)
   12ab4:	|     |   pea 1 <_start+0x1>
   12ab8:	|     |   move.l d0,-(sp)
   12aba:	|     |   jsr 150c4 <setVariable>
   12ac0:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12ac4:	|     \-> moveq #2,d0
}
   12ac6:	\-------> lea 12(sp),sp
   12aca:	          rts

00012acc <builtIn_transitionMode>:


builtIn(transitionMode)
{
   12acc:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12ace:	       movea.l 12(sp),a0
   12ad2:	       move.l 24(a0),d0
   12ad6:	       move.l d0,-(sp)
   12ad8:	       pea 1 <_start+0x1>
   12adc:	       move.l sp,d0
   12ade:	       addq.l #8,d0
   12ae0:	       move.l d0,-(sp)
   12ae2:	       jsr 147d2 <getValueType>
   12ae8:	       lea 12(sp),sp
   12aec:	       tst.w d0
   12aee:	   /-- bne.s 12af4 <builtIn_transitionMode+0x28>
   12af0:	   |   moveq #1,d0
   12af2:	/--|-- bra.s 12b2a <builtIn_transitionMode+0x5e>
	fadeMode = n;
   12af4:	|  \-> move.l (sp),d0
   12af6:	|      move.l d0,d0
   12af8:	|      move.b d0,1c882 <fadeMode>
	trimStack (&fun -> stack);
   12afe:	|      moveq #24,d0
   12b00:	|      add.l 12(sp),d0
   12b04:	|      move.l d0,-(sp)
   12b06:	|      jsr 15156 <trimStack>
   12b0c:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12b0e:	|      moveq #28,d0
   12b10:	|      add.l 12(sp),d0
   12b14:	|      pea 1 <_start+0x1>
   12b18:	|      pea 1 <_start+0x1>
   12b1c:	|      move.l d0,-(sp)
   12b1e:	|      jsr 150c4 <setVariable>
   12b24:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12b28:	|      moveq #2,d0
}
   12b2a:	\----> addq.l #4,sp
   12b2c:	       rts

00012b2e <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   12b2e:	moveq #24,d0
   12b30:	add.l 8(sp),d0
   12b34:	move.l d0,-(sp)
   12b36:	jsr 15156 <trimStack>
   12b3c:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   12b3e:	moveq #28,d0
   12b40:	add.l 8(sp),d0
   12b44:	pea 1 <_start+0x1>
   12b48:	pea 1 <_start+0x1>
   12b4c:	move.l d0,-(sp)
   12b4e:	jsr 150c4 <setVariable>
   12b54:	lea 12(sp),sp
	return BR_CONTINUE;
   12b58:	moveq #2,d0
}
   12b5a:	rts

00012b5c <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   12b5c:	pea 19bfb <graphics.c.1c13408a+0x13>
   12b62:	jsr 17232 <KPrintF>
   12b68:	addq.l #4,sp
	return BR_CONTINUE;
   12b6a:	moveq #2,d0
}
   12b6c:	rts

00012b6e <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   12b6e:	       lea -16(sp),sp
   12b72:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   12b74:	       movea.l 28(sp),a0
   12b78:	       move.l 24(a0),d0
   12b7c:	       move.l d0,-(sp)
   12b7e:	       jsr 14da8 <getTextFromAnyVar>
   12b84:	       addq.l #4,sp
   12b86:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   12b8a:	   /-- bne.s 12b92 <builtIn_saveCustomData+0x24>
   12b8c:	   |   moveq #1,d0
   12b8e:	/--|-- bra.w 12c44 <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   12b92:	|  \-> move.l 16(sp),-(sp)
   12b96:	|      jsr 2fe <encodeFilename>
   12b9c:	|      addq.l #4,sp
   12b9e:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   12ba2:	|      move.l 16(sp),8(sp)
   12ba8:	|      move.l 1c9a8 <SysBase>,d0
   12bae:	|      movea.l d0,a6
   12bb0:	|      movea.l 8(sp),a1
   12bb4:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   12bb8:	|      move.l 12(sp),-(sp)
   12bbc:	|      jsr e308 <failSecurityCheck>
   12bc2:	|      addq.l #4,sp
   12bc4:	|      tst.w d0
   12bc6:	|  /-- beq.s 12bcc <builtIn_saveCustomData+0x5e>
   12bc8:	|  |   moveq #1,d0
   12bca:	+--|-- bra.s 12c44 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12bcc:	|  \-> moveq #24,d0
   12bce:	|      add.l 28(sp),d0
   12bd2:	|      move.l d0,-(sp)
   12bd4:	|      jsr 15156 <trimStack>
   12bda:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   12bdc:	|      movea.l 28(sp),a0
   12be0:	|      movea.l 24(a0),a0
   12be4:	|      move.l (a0),d0
   12be6:	|      moveq #6,d1
   12be8:	|      cmp.l d0,d1
   12bea:	|  /-- beq.s 12bfe <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   12bec:	|  |   pea 19c28 <graphics.c.1c13408a+0x40>
   12bf2:	|  |   jsr 17232 <KPrintF>
   12bf8:	|  |   addq.l #4,sp
		return BR_ERROR;
   12bfa:	|  |   moveq #1,d0
   12bfc:	+--|-- bra.s 12c44 <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   12bfe:	|  \-> movea.l 28(sp),a0
   12c02:	|      move.l 24(a0),d0
   12c06:	|      move.l d0,-(sp)
   12c08:	|      move.l 16(sp),-(sp)
   12c0c:	|      jsr df58 <stackToFile>
   12c12:	|      addq.l #8,sp
   12c14:	|      tst.w d0
   12c16:	|  /-- bne.s 12c1c <builtIn_saveCustomData+0xae>
   12c18:	|  |   moveq #1,d0
   12c1a:	+--|-- bra.s 12c44 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12c1c:	|  \-> moveq #24,d0
   12c1e:	|      add.l 28(sp),d0
   12c22:	|      move.l d0,-(sp)
   12c24:	|      jsr 15156 <trimStack>
   12c2a:	|      addq.l #4,sp
	FreeVec(fileName);
   12c2c:	|      move.l 12(sp),4(sp)
   12c32:	|      move.l 1c9a8 <SysBase>,d0
   12c38:	|      movea.l d0,a6
   12c3a:	|      movea.l 4(sp),a1
   12c3e:	|      jsr -690(a6)
	return BR_CONTINUE;
   12c42:	|      moveq #2,d0
}
   12c44:	\----> movea.l (sp)+,a6
   12c46:	       lea 16(sp),sp
   12c4a:	       rts

00012c4c <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   12c4c:	       lea -28(sp),sp
   12c50:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   12c52:	       movea.l 40(sp),a0
   12c56:	       move.l 24(a0),d0
   12c5a:	       move.l d0,-(sp)
   12c5c:	       jsr 14da8 <getTextFromAnyVar>
   12c62:	       addq.l #4,sp
   12c64:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   12c68:	   /-- bne.s 12c70 <builtIn_loadCustomData+0x24>
   12c6a:	   |   moveq #1,d0
   12c6c:	/--|-- bra.w 12d6c <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   12c70:	|  \-> move.l 28(sp),-(sp)
   12c74:	|      jsr 2fe <encodeFilename>
   12c7a:	|      addq.l #4,sp
   12c7c:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   12c80:	|      move.l 28(sp),20(sp)
   12c86:	|      move.l 1c9a8 <SysBase>,d0
   12c8c:	|      movea.l d0,a6
   12c8e:	|      movea.l 20(sp),a1
   12c92:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   12c96:	|      move.l 24(sp),-(sp)
   12c9a:	|      jsr e308 <failSecurityCheck>
   12ca0:	|      addq.l #4,sp
   12ca2:	|      tst.w d0
   12ca4:	|  /-- beq.s 12cac <builtIn_loadCustomData+0x60>
   12ca6:	|  |   moveq #1,d0
   12ca8:	+--|-- bra.w 12d6c <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   12cac:	|  \-> moveq #24,d0
   12cae:	|      add.l 40(sp),d0
   12cb2:	|      move.l d0,-(sp)
   12cb4:	|      jsr 15156 <trimStack>
   12cba:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   12cbc:	|      moveq #28,d0
   12cbe:	|      add.l 40(sp),d0
   12cc2:	|      move.l d0,-(sp)
   12cc4:	|      jsr 14a20 <unlinkVar>
   12cca:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   12ccc:	|      movea.l 40(sp),a0
   12cd0:	|      moveq #6,d0
   12cd2:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   12cd6:	|      moveq #12,d0
   12cd8:	|      move.l d0,16(sp)
   12cdc:	|      clr.l 12(sp)
   12ce0:	|      move.l 1c9a8 <SysBase>,d0
   12ce6:	|      movea.l d0,a6
   12ce8:	|      move.l 16(sp),d0
   12cec:	|      move.l 12(sp),d1
   12cf0:	|      jsr -684(a6)
   12cf4:	|      move.l d0,8(sp)
   12cf8:	|      move.l 8(sp),d0
   12cfc:	|      movea.l 40(sp),a0
   12d00:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   12d04:	|      movea.l 40(sp),a0
   12d08:	|      move.l 32(a0),d0
   12d0c:	|  /-- bne.s 12d12 <builtIn_loadCustomData+0xc6>
   12d0e:	|  |   moveq #1,d0
   12d10:	+--|-- bra.s 12d6c <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   12d12:	|  \-> movea.l 40(sp),a0
   12d16:	|      movea.l 32(a0),a0
   12d1a:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   12d1c:	|      movea.l 40(sp),a0
   12d20:	|      movea.l 32(a0),a0
   12d24:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   12d28:	|      movea.l 40(sp),a0
   12d2c:	|      movea.l 32(a0),a0
   12d30:	|      moveq #1,d0
   12d32:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   12d36:	|      movea.l 40(sp),a0
   12d3a:	|      move.l 32(a0),d0
   12d3e:	|      move.l d0,-(sp)
   12d40:	|      move.l 28(sp),-(sp)
   12d44:	|      jsr d992 <fileToStack>
   12d4a:	|      addq.l #8,sp
   12d4c:	|      tst.w d0
   12d4e:	|  /-- bne.s 12d54 <builtIn_loadCustomData+0x108>
   12d50:	|  |   moveq #1,d0
   12d52:	+--|-- bra.s 12d6c <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   12d54:	|  \-> move.l 24(sp),4(sp)
   12d5a:	|      move.l 1c9a8 <SysBase>,d0
   12d60:	|      movea.l d0,a6
   12d62:	|      movea.l 4(sp),a1
   12d66:	|      jsr -690(a6)
	return BR_CONTINUE;
   12d6a:	|      moveq #2,d0
}
   12d6c:	\----> movea.l (sp)+,a6
   12d6e:	       lea 28(sp),sp
   12d72:	       rts

00012d74 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   12d74:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12d76:	       movea.l 12(sp),a0
   12d7a:	       move.l 24(a0),d0
   12d7e:	       move.l d0,-(sp)
   12d80:	       pea 1 <_start+0x1>
   12d84:	       move.l sp,d0
   12d86:	       addq.l #8,d0
   12d88:	       move.l d0,-(sp)
   12d8a:	       jsr 147d2 <getValueType>
   12d90:	       lea 12(sp),sp
   12d94:	       tst.w d0
   12d96:	   /-- bne.s 12d9c <builtIn_setCustomEncoding+0x28>
   12d98:	   |   moveq #1,d0
   12d9a:	/--|-- bra.s 12dd2 <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   12d9c:	|  \-> move.l (sp),d0
   12d9e:	|      move.l d0,d0
   12da0:	|      move.w d0,1ca60 <saveEncoding>
	trimStack (&fun -> stack);
   12da6:	|      moveq #24,d0
   12da8:	|      add.l 12(sp),d0
   12dac:	|      move.l d0,-(sp)
   12dae:	|      jsr 15156 <trimStack>
   12db4:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12db6:	|      moveq #28,d0
   12db8:	|      add.l 12(sp),d0
   12dbc:	|      pea 1 <_start+0x1>
   12dc0:	|      pea 1 <_start+0x1>
   12dc4:	|      move.l d0,-(sp)
   12dc6:	|      jsr 150c4 <setVariable>
   12dcc:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12dd0:	|      moveq #2,d0
}
   12dd2:	\----> addq.l #4,sp
   12dd4:	       rts

00012dd6 <builtIn_freeSound>:

builtIn(freeSound)
{
   12dd6:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12dd8:	       movea.l 12(sp),a0
   12ddc:	       move.l 24(a0),d0
   12de0:	       move.l d0,-(sp)
   12de2:	       pea 5 <_start+0x5>
   12de6:	       move.l sp,d0
   12de8:	       addq.l #8,d0
   12dea:	       move.l d0,-(sp)
   12dec:	       jsr 147d2 <getValueType>
   12df2:	       lea 12(sp),sp
   12df6:	       tst.w d0
   12df8:	   /-- bne.s 12dfe <builtIn_freeSound+0x28>
   12dfa:	   |   moveq #1,d0
   12dfc:	/--|-- bra.s 12e1c <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   12dfe:	|  \-> moveq #24,d0
   12e00:	|      add.l 12(sp),d0
   12e04:	|      move.l d0,-(sp)
   12e06:	|      jsr 15156 <trimStack>
   12e0c:	|      addq.l #4,sp
	huntKillFreeSound (v);
   12e0e:	|      move.l (sp),d0
   12e10:	|      move.l d0,-(sp)
   12e12:	|      jsr d154 <huntKillFreeSound>
   12e18:	|      addq.l #4,sp
	return BR_CONTINUE;
   12e1a:	|      moveq #2,d0
}
   12e1c:	\----> addq.l #4,sp
   12e1e:	       rts

00012e20 <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   12e20:	       lea -12(sp),sp
   12e24:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12e26:	       movea.l 24(sp),a0
   12e2a:	       move.l 24(a0),d0
   12e2e:	       move.l d0,-(sp)
   12e30:	       pea 1 <_start+0x1>
   12e34:	       moveq #16,d0
   12e36:	       add.l sp,d0
   12e38:	       move.l d0,-(sp)
   12e3a:	       jsr 147d2 <getValueType>
   12e40:	       lea 12(sp),sp
   12e44:	       tst.w d0
   12e46:	   /-- bne.s 12e4e <builtIn_parallaxAdd+0x2e>
   12e48:	   |   moveq #1,d0
   12e4a:	/--|-- bra.w 12f22 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12e4e:	|  \-> moveq #24,d0
   12e50:	|      add.l 24(sp),d0
   12e54:	|      move.l d0,-(sp)
   12e56:	|      jsr 15156 <trimStack>
   12e5c:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12e5e:	|      movea.l 24(sp),a0
   12e62:	|      move.l 24(a0),d0
   12e66:	|      move.l d0,-(sp)
   12e68:	|      pea 1 <_start+0x1>
   12e6c:	|      moveq #20,d0
   12e6e:	|      add.l sp,d0
   12e70:	|      move.l d0,-(sp)
   12e72:	|      jsr 147d2 <getValueType>
   12e78:	|      lea 12(sp),sp
   12e7c:	|      tst.w d0
   12e7e:	|  /-- bne.s 12e86 <builtIn_parallaxAdd+0x66>
   12e80:	|  |   moveq #1,d0
   12e82:	+--|-- bra.w 12f22 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12e86:	|  \-> moveq #24,d0
   12e88:	|      add.l 24(sp),d0
   12e8c:	|      move.l d0,-(sp)
   12e8e:	|      jsr 15156 <trimStack>
   12e94:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12e96:	|      movea.l 24(sp),a0
   12e9a:	|      move.l 24(a0),d0
   12e9e:	|      move.l d0,-(sp)
   12ea0:	|      pea 5 <_start+0x5>
   12ea4:	|      lea 12(sp),a0
   12ea8:	|      move.l a0,-(sp)
   12eaa:	|      jsr 147d2 <getValueType>
   12eb0:	|      lea 12(sp),sp
   12eb4:	|      tst.w d0
   12eb6:	|  /-- bne.s 12ebc <builtIn_parallaxAdd+0x9c>
   12eb8:	|  |   moveq #1,d0
   12eba:	+--|-- bra.s 12f22 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12ebc:	|  \-> moveq #24,d0
   12ebe:	|      add.l 24(sp),d0
   12ec2:	|      move.l d0,-(sp)
   12ec4:	|      jsr 15156 <trimStack>
   12eca:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   12ecc:	|      move.l 8(sp),d0
   12ed0:	|      move.l d0,d0
   12ed2:	|      moveq #0,d2
   12ed4:	|      move.w d0,d2
   12ed6:	|      move.l 12(sp),d0
   12eda:	|      move.l d0,d0
   12edc:	|      moveq #0,d1
   12ede:	|      move.w d0,d1
   12ee0:	|      move.l 4(sp),d0
   12ee4:	|      move.l d0,d0
   12ee6:	|      move.w d0,d0
   12ee8:	|      andi.l #65535,d0
   12eee:	|      move.l d2,-(sp)
   12ef0:	|      move.l d1,-(sp)
   12ef2:	|      move.l d0,-(sp)
   12ef4:	|      jsr d370 <loadParallax>
   12efa:	|      lea 12(sp),sp
   12efe:	|      tst.w d0
   12f00:	|  /-- bne.s 12f06 <builtIn_parallaxAdd+0xe6>
   12f02:	|  |   moveq #1,d0
   12f04:	+--|-- bra.s 12f22 <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   12f06:	|  \-> moveq #28,d0
   12f08:	|      add.l 24(sp),d0
   12f0c:	|      pea 1 <_start+0x1>
   12f10:	|      pea 1 <_start+0x1>
   12f14:	|      move.l d0,-(sp)
   12f16:	|      jsr 150c4 <setVariable>
   12f1c:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   12f20:	|      moveq #2,d0
}
   12f22:	\----> move.l (sp)+,d2
   12f24:	       lea 12(sp),sp
   12f28:	       rts

00012f2a <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   12f2a:	jsr d2a8 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   12f30:	moveq #28,d0
   12f32:	add.l 8(sp),d0
   12f36:	pea 1 <_start+0x1>
   12f3a:	pea 1 <_start+0x1>
   12f3e:	move.l d0,-(sp)
   12f40:	jsr 150c4 <setVariable>
   12f46:	lea 12(sp),sp
	return BR_CONTINUE;
   12f4a:	moveq #2,d0
}
   12f4c:	rts

00012f4e <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   12f4e:	pea 19c46 <graphics.c.1c13408a+0x5e>
   12f54:	jsr 17232 <KPrintF>
   12f5a:	addq.l #4,sp

	return BR_CONTINUE;
   12f5c:	moveq #2,d0
}
   12f5e:	rts

00012f60 <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   12f60:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   12f62:	             movea.l 16(sp),a0
   12f66:	             movea.l 24(a0),a0
   12f6a:	             move.l (a0),d0
   12f6c:	             moveq #1,d1
   12f6e:	             cmp.l d0,d1
   12f70:	      /----- beq.s 12fb8 <builtIn_makeFastArray+0x58>
   12f72:	      |      moveq #6,d1
   12f74:	      |      cmp.l d0,d1
   12f76:	/-----|----- bne.s 12ff6 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   12f78:	|     |      movea.l 16(sp),a0
   12f7c:	|     |      movea.l 24(a0),a0
   12f80:	|     |      move.l 4(a0),d1
   12f84:	|     |      moveq #28,d0
   12f86:	|     |      add.l 16(sp),d0
   12f8a:	|     |      move.l d1,-(sp)
   12f8c:	|     |      move.l d0,-(sp)
   12f8e:	|     |      jsr 14884 <makeFastArrayFromStack>
   12f94:	|     |      addq.l #8,sp
   12f96:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   12f9a:	|     |      moveq #24,d0
   12f9c:	|     |      add.l 16(sp),d0
   12fa0:	|     |      move.l d0,-(sp)
   12fa2:	|     |      jsr 15156 <trimStack>
   12fa8:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   12faa:	|     |      tst.w 6(sp)
   12fae:	|     |  /-- beq.s 12fb4 <builtIn_makeFastArray+0x54>
   12fb0:	|     |  |   moveq #2,d0
   12fb2:	|  /--|--|-- bra.s 13008 <builtIn_makeFastArray+0xa8>
   12fb4:	|  |  |  \-> moveq #1,d0
   12fb6:	|  +--|----- bra.s 13008 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   12fb8:	|  |  \----> movea.l 16(sp),a0
   12fbc:	|  |         movea.l 24(a0),a0
   12fc0:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   12fc6:	|  |         moveq #24,d0
   12fc8:	|  |         add.l 16(sp),d0
   12fcc:	|  |         move.l d0,-(sp)
   12fce:	|  |         jsr 15156 <trimStack>
   12fd4:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   12fd6:	|  |         moveq #28,d0
   12fd8:	|  |         add.l 16(sp),d0
   12fdc:	|  |         move.l 2(sp),-(sp)
   12fe0:	|  |         move.l d0,-(sp)
   12fe2:	|  |         jsr 148ee <makeFastArraySize>
   12fe8:	|  |         addq.l #8,sp
   12fea:	|  |         tst.w d0
   12fec:	|  |     /-- beq.s 12ff2 <builtIn_makeFastArray+0x92>
   12fee:	|  |     |   moveq #2,d0
   12ff0:	|  +-----|-- bra.s 13008 <builtIn_makeFastArray+0xa8>
   12ff2:	|  |     \-> moveq #1,d0
   12ff4:	|  +-------- bra.s 13008 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   12ff6:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   12ff8:	   |         pea 19c6f <graphics.c.1c13408a+0x87>
   12ffe:	   |         jsr 17232 <KPrintF>
   13004:	   |         addq.l #4,sp
	return BR_ERROR;
   13006:	   |         moveq #1,d0
}
   13008:	   \-------> addq.l #8,sp
   1300a:	             rts

0001300c <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   1300c:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1300e:	          movea.l 16(sp),a0
   13012:	          move.l 24(a0),d0
   13016:	          move.l d0,-(sp)
   13018:	          pea 7 <_start+0x7>
   1301c:	          move.l sp,d0
   1301e:	          addq.l #8,d0
   13020:	          move.l d0,-(sp)
   13022:	          jsr 147d2 <getValueType>
   13028:	          lea 12(sp),sp
   1302c:	          tst.w d0
   1302e:	      /-- bne.s 13034 <builtIn_getCharacterScale+0x28>
   13030:	      |   moveq #1,d0
   13032:	/-----|-- bra.s 130ae <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   13034:	|     \-> moveq #24,d0
   13036:	|         add.l 16(sp),d0
   1303a:	|         move.l d0,-(sp)
   1303c:	|         jsr 15156 <trimStack>
   13042:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   13044:	|         move.l (sp),d0
   13046:	|         move.l d0,-(sp)
   13048:	|         jsr a626 <findPerson>
   1304e:	|         addq.l #4,sp
   13050:	|         move.l d0,4(sp)
	if (pers) {
   13054:	|  /----- beq.s 13094 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   13056:	|  |      movea.l 4(sp),a0
   1305a:	|  |      move.l 32(a0),d0
   1305e:	|  |      move.l #1120403456,-(sp)
   13064:	|  |      move.l d0,-(sp)
   13066:	|  |      jsr 17716 <__mulsf3>
   1306c:	|  |      addq.l #8,sp
   1306e:	|  |      move.l d0,-(sp)
   13070:	|  |      jsr 175fc <__fixsfsi>
   13076:	|  |      addq.l #4,sp
   13078:	|  |      move.l d0,d1
   1307a:	|  |      moveq #28,d0
   1307c:	|  |      add.l 16(sp),d0
   13080:	|  |      move.l d1,-(sp)
   13082:	|  |      pea 1 <_start+0x1>
   13086:	|  |      move.l d0,-(sp)
   13088:	|  |      jsr 150c4 <setVariable>
   1308e:	|  |      lea 12(sp),sp
   13092:	|  |  /-- bra.s 130ac <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   13094:	|  \--|-> moveq #28,d0
   13096:	|     |   add.l 16(sp),d0
   1309a:	|     |   clr.l -(sp)
   1309c:	|     |   pea 1 <_start+0x1>
   130a0:	|     |   move.l d0,-(sp)
   130a2:	|     |   jsr 150c4 <setVariable>
   130a8:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   130ac:	|     \-> moveq #2,d0
}
   130ae:	\-------> addq.l #8,sp
   130b0:	          rts

000130b2 <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   130b2:	move.l 1ca84 <gameSettings>,d0
   130b8:	move.l d0,d1
   130ba:	moveq #28,d0
   130bc:	add.l 8(sp),d0
   130c0:	move.l d1,-(sp)
   130c2:	pea 1 <_start+0x1>
   130c6:	move.l d0,-(sp)
   130c8:	jsr 150c4 <setVariable>
   130ce:	lea 12(sp),sp
	return BR_CONTINUE;
   130d2:	moveq #2,d0
}
   130d4:	rts

000130d6 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   130d6:	moveq #24,d0
   130d8:	add.l 8(sp),d0
   130dc:	move.l d0,-(sp)
   130de:	jsr 15156 <trimStack>
   130e4:	addq.l #4,sp
	trimStack (&fun -> stack);
   130e6:	moveq #24,d0
   130e8:	add.l 8(sp),d0
   130ec:	move.l d0,-(sp)
   130ee:	jsr 15156 <trimStack>
   130f4:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   130f6:	moveq #28,d0
   130f8:	add.l 8(sp),d0
   130fc:	clr.l -(sp)
   130fe:	pea 1 <_start+0x1>
   13102:	move.l d0,-(sp)
   13104:	jsr 150c4 <setVariable>
   1310a:	lea 12(sp),sp

	return BR_CONTINUE;
   1310e:	moveq #2,d0

}
   13110:	rts

00013112 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   13112:	move.l 1c328 <lastFramesPerSecond>,d1
   13118:	moveq #28,d0
   1311a:	add.l 8(sp),d0
   1311e:	move.l d1,-(sp)
   13120:	pea 1 <_start+0x1>
   13124:	move.l d0,-(sp)
   13126:	jsr 150c4 <setVariable>
   1312c:	lea 12(sp),sp
	return BR_CONTINUE;
   13130:	moveq #2,d0
}
   13132:	rts

00013134 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   13134:	moveq #2,d0
}
   13136:	rts

00013138 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   13138:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1313c:	          movea.l 60(sp),a0
   13140:	          move.l 24(a0),d0
   13144:	          move.l d0,-(sp)
   13146:	          pea 1 <_start+0x1>
   1314a:	          pea 1c8be <thumbHeight>
   13150:	          jsr 147d2 <getValueType>
   13156:	          lea 12(sp),sp
   1315a:	          tst.w d0
   1315c:	      /-- bne.s 13164 <builtIn_setThumbnailSize+0x2c>
   1315e:	      |   moveq #1,d0
   13160:	/-----|-- bra.w 13220 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   13164:	|     \-> moveq #24,d0
   13166:	|         add.l 60(sp),d0
   1316a:	|         move.l d0,-(sp)
   1316c:	|         jsr 15156 <trimStack>
   13172:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13174:	|         movea.l 60(sp),a0
   13178:	|         move.l 24(a0),d0
   1317c:	|         move.l d0,-(sp)
   1317e:	|         pea 1 <_start+0x1>
   13182:	|         pea 1c8ba <thumbWidth>
   13188:	|         jsr 147d2 <getValueType>
   1318e:	|         lea 12(sp),sp
   13192:	|         tst.w d0
   13194:	|     /-- bne.s 1319c <builtIn_setThumbnailSize+0x64>
   13196:	|     |   moveq #1,d0
   13198:	+-----|-- bra.w 13220 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   1319c:	|     \-> moveq #24,d0
   1319e:	|         add.l 60(sp),d0
   131a2:	|         move.l d0,-(sp)
   131a4:	|         jsr 15156 <trimStack>
   131aa:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   131ac:	|         move.l 1c8ba <thumbWidth>,d0
   131b2:	|     /-- bmi.s 131e0 <builtIn_setThumbnailSize+0xa8>
   131b4:	|     |   move.l 1c8be <thumbHeight>,d0
   131ba:	|     +-- bmi.s 131e0 <builtIn_setThumbnailSize+0xa8>
   131bc:	|     |   move.l 1c8ba <thumbWidth>,d0
   131c2:	|     |   move.l d0,d1
   131c4:	|     |   move.l 1c8fc <winWidth>,d0
   131ca:	|     |   cmp.l d1,d0
   131cc:	|     +-- bcs.s 131e0 <builtIn_setThumbnailSize+0xa8>
   131ce:	|     |   move.l 1c8be <thumbHeight>,d0
   131d4:	|     |   move.l d0,d1
   131d6:	|     |   move.l 1c900 <winHeight>,d0
   131dc:	|     |   cmp.l d1,d0
   131de:	|  /--|-- bcc.s 1321e <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   131e0:	|  |  \-> move.l 1c8be <thumbHeight>,d1
   131e6:	|  |      move.l 1c8ba <thumbWidth>,d0
   131ec:	|  |      move.l d1,-(sp)
   131ee:	|  |      move.l d0,-(sp)
   131f0:	|  |      pea 19c96 <graphics.c.1c13408a+0xae>
   131f6:	|  |      lea 14(sp),a0
   131fa:	|  |      move.l a0,-(sp)
   131fc:	|  |      jsr 13fdc <sprintf>
   13202:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   13206:	|  |      lea 2(sp),a0
   1320a:	|  |      move.l a0,-(sp)
   1320c:	|  |      pea 19c9e <graphics.c.1c13408a+0xb6>
   13212:	|  |      jsr 17232 <KPrintF>
   13218:	|  |      addq.l #8,sp
		return BR_ERROR;
   1321a:	|  |      moveq #1,d0
   1321c:	+--|----- bra.s 13220 <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   1321e:	|  \----> moveq #2,d0
}
   13220:	\-------> lea 52(sp),sp
   13224:	          rts

00013226 <builtIn_hasFlag>:

builtIn(hasFlag)
{
   13226:	       lea -12(sp),sp
   1322a:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1322c:	       movea.l 24(sp),a0
   13230:	       move.l 24(a0),d0
   13234:	       move.l d0,-(sp)
   13236:	       pea 1 <_start+0x1>
   1323a:	       lea 12(sp),a0
   1323e:	       move.l a0,-(sp)
   13240:	       jsr 147d2 <getValueType>
   13246:	       lea 12(sp),sp
   1324a:	       tst.w d0
   1324c:	   /-- bne.s 13254 <builtIn_hasFlag+0x2e>
   1324e:	   |   moveq #1,d0
   13250:	/--|-- bra.w 132e4 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   13254:	|  \-> moveq #24,d0
   13256:	|      add.l 24(sp),d0
   1325a:	|      move.l d0,-(sp)
   1325c:	|      jsr 15156 <trimStack>
   13262:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13264:	|      movea.l 24(sp),a0
   13268:	|      move.l 24(a0),d0
   1326c:	|      move.l d0,-(sp)
   1326e:	|      pea 7 <_start+0x7>
   13272:	|      moveq #16,d0
   13274:	|      add.l sp,d0
   13276:	|      move.l d0,-(sp)
   13278:	|      jsr 147d2 <getValueType>
   1327e:	|      lea 12(sp),sp
   13282:	|      tst.w d0
   13284:	|  /-- bne.s 1328a <builtIn_hasFlag+0x64>
   13286:	|  |   moveq #1,d0
   13288:	+--|-- bra.s 132e4 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   1328a:	|  \-> moveq #24,d0
   1328c:	|      add.l 24(sp),d0
   13290:	|      move.l d0,-(sp)
   13292:	|      jsr 15156 <trimStack>
   13298:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   1329a:	|      move.l 8(sp),d0
   1329e:	|      move.l d0,-(sp)
   132a0:	|      jsr d51c <findObjectType>
   132a6:	|      addq.l #4,sp
   132a8:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   132ac:	|  /-- bne.s 132b2 <builtIn_hasFlag+0x8c>
   132ae:	|  |   moveq #1,d0
   132b0:	+--|-- bra.s 132e4 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   132b2:	|  \-> movea.l 12(sp),a0
   132b6:	|      move.w 36(a0),d0
   132ba:	|      moveq #0,d2
   132bc:	|      move.w d0,d2
   132be:	|      move.l 4(sp),d1
   132c2:	|      moveq #1,d0
   132c4:	|      lsl.l d1,d0
   132c6:	|      move.l d2,d1
   132c8:	|      and.l d0,d1
   132ca:	|      moveq #28,d0
   132cc:	|      add.l 24(sp),d0
   132d0:	|      move.l d1,-(sp)
   132d2:	|      pea 1 <_start+0x1>
   132d6:	|      move.l d0,-(sp)
   132d8:	|      jsr 150c4 <setVariable>
   132de:	|      lea 12(sp),sp
	return BR_CONTINUE;
   132e2:	|      moveq #2,d0
}
   132e4:	\----> move.l (sp)+,d2
   132e6:	       lea 12(sp),sp
   132ea:	       rts

000132ec <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   132ec:	       jsr d50a <snapshot>
   132f2:	       tst.w d0
   132f4:	/----- beq.s 132fa <builtIn_snapshotGrab+0xe>
   132f6:	|      moveq #2,d0
   132f8:	|  /-- bra.s 132fc <builtIn_snapshotGrab+0x10>
   132fa:	\--|-> moveq #1,d0
}
   132fc:	   \-> rts

000132fe <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   132fe:	jsr d3b6 <nosnapshot>
	return BR_CONTINUE;
   13304:	moveq #2,d0
}
   13306:	rts

00013308 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   13308:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   1330a:	move.w 1c204 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   13312:	movea.l 12(sp),a0
   13316:	move.l 24(a0),d0
   1331a:	move.l d0,-(sp)
   1331c:	jsr 14d12 <getBoolean>
   13322:	addq.l #4,sp
   13324:	move.w d0,1c204 <allowAnyFilename>
	trimStack (&fun -> stack);
   1332a:	moveq #24,d0
   1332c:	add.l 12(sp),d0
   13330:	move.l d0,-(sp)
   13332:	jsr 15156 <trimStack>
   13338:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   1333a:	movea.w 2(sp),a0
   1333e:	moveq #28,d0
   13340:	add.l 12(sp),d0
   13344:	move.l a0,-(sp)
   13346:	pea 1 <_start+0x1>
   1334a:	move.l d0,-(sp)
   1334c:	jsr 150c4 <setVariable>
   13352:	lea 12(sp),sp
	return BR_CONTINUE;
   13356:	moveq #2,d0
}
   13358:	addq.l #4,sp
   1335a:	rts

0001335c <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   1335c:	moveq #24,d0
   1335e:	add.l 8(sp),d0
   13362:	move.l d0,-(sp)
   13364:	jsr 15156 <trimStack>
   1336a:	addq.l #4,sp
	trimStack (&fun -> stack);
   1336c:	moveq #24,d0
   1336e:	add.l 8(sp),d0
   13372:	move.l d0,-(sp)
   13374:	jsr 15156 <trimStack>
   1337a:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   1337c:	moveq #28,d0
   1337e:	add.l 8(sp),d0
   13382:	clr.l -(sp)
   13384:	pea 1 <_start+0x1>
   13388:	move.l d0,-(sp)
   1338a:	jsr 150c4 <setVariable>
   13390:	lea 12(sp),sp

	return BR_CONTINUE;
   13394:	moveq #2,d0
}
   13396:	rts

00013398 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   13398:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   1339a:	movea.l 12(sp),a0
   1339e:	move.l 24(a0),d0
   133a2:	move.l d0,-(sp)
   133a4:	jsr 14da8 <getTextFromAnyVar>
   133aa:	addq.l #4,sp
   133ac:	move.l d0,(sp)
	trimStack (&fun -> stack);
   133ae:	moveq #24,d0
   133b0:	add.l 12(sp),d0
   133b4:	move.l d0,-(sp)
   133b6:	jsr 15156 <trimStack>
   133bc:	addq.l #4,sp
	KPrintF (mess);
   133be:	move.l (sp),-(sp)
   133c0:	jsr 17232 <KPrintF>
   133c6:	addq.l #4,sp
	return BR_ERROR;
   133c8:	moveq #1,d0
}
   133ca:	addq.l #4,sp
   133cc:	rts

000133ce <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   133ce:	moveq #24,d0
   133d0:	add.l 8(sp),d0
   133d4:	move.l d0,-(sp)
   133d6:	jsr 15156 <trimStack>
   133dc:	addq.l #4,sp
	trimStack (&fun -> stack);
   133de:	moveq #24,d0
   133e0:	add.l 8(sp),d0
   133e4:	move.l d0,-(sp)
   133e6:	jsr 15156 <trimStack>
   133ec:	addq.l #4,sp
	trimStack (&fun -> stack);
   133ee:	moveq #24,d0
   133f0:	add.l 8(sp),d0
   133f4:	move.l d0,-(sp)
   133f6:	jsr 15156 <trimStack>
   133fc:	addq.l #4,sp
	trimStack (&fun -> stack);
   133fe:	moveq #24,d0
   13400:	add.l 8(sp),d0
   13404:	move.l d0,-(sp)
   13406:	jsr 15156 <trimStack>
   1340c:	addq.l #4,sp

	return BR_CONTINUE;
   1340e:	moveq #2,d0
}
   13410:	rts

00013412 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   13412:	moveq #24,d0
   13414:	add.l 8(sp),d0
   13418:	move.l d0,-(sp)
   1341a:	jsr 15156 <trimStack>
   13420:	addq.l #4,sp
	trimStack (&fun -> stack);
   13422:	moveq #24,d0
   13424:	add.l 8(sp),d0
   13428:	move.l d0,-(sp)
   1342a:	jsr 15156 <trimStack>
   13430:	addq.l #4,sp
	trimStack (&fun -> stack);
   13432:	moveq #24,d0
   13434:	add.l 8(sp),d0
   13438:	move.l d0,-(sp)
   1343a:	jsr 15156 <trimStack>
   13440:	addq.l #4,sp

	return BR_CONTINUE;
   13442:	moveq #2,d0

}
   13444:	rts

00013446 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   13446:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   13448:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   1344e:	sne d0
   13450:	neg.b d0
   13452:	moveq #0,d1
   13454:	move.b d0,d1
   13456:	moveq #28,d0
   13458:	add.l 12(sp),d0
   1345c:	move.l d1,-(sp)
   1345e:	pea 1 <_start+0x1>
   13462:	move.l d0,-(sp)
   13464:	jsr 150c4 <setVariable>
   1346a:	lea 12(sp),sp
	return BR_CONTINUE;
   1346e:	moveq #2,d0
}
   13470:	addq.l #4,sp
   13472:	rts

00013474 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   13474:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   13476:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   1347c:	pea 19cb5 <graphics.c.1c13408a+0xcd>
   13482:	jsr 17232 <KPrintF>
   13488:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   1348a:	tst.w 2(sp)
   1348e:	sne d0
   13490:	neg.b d0
   13492:	moveq #0,d1
   13494:	move.b d0,d1
   13496:	moveq #28,d0
   13498:	add.l 12(sp),d0
   1349c:	move.l d1,-(sp)
   1349e:	pea 1 <_start+0x1>
   134a2:	move.l d0,-(sp)
   134a4:	jsr 150c4 <setVariable>
   134aa:	lea 12(sp),sp
	return BR_CONTINUE;
   134ae:	moveq #2,d0
}
   134b0:	addq.l #4,sp
   134b2:	rts

000134b4 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   134b4:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   134b8:	             move.l 104(sp),d0
   134bc:	             cmpi.l #166,d0
   134c2:	/----------- bhi.w 135a4 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   134c6:	|            move.l 104(sp),d0
   134ca:	|            add.l d0,d0
   134cc:	|            movea.l d0,a1
   134ce:	|            adda.l d0,a1
   134d0:	|            lea 1c34a <paramNum>,a0
   134d6:	|            move.l (0,a1,a0.l),d0
   134da:	|            moveq #-1,d1
   134dc:	|            cmp.l d0,d1
   134de:	|  /-------- beq.w 1356c <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   134e2:	|  |         move.l 104(sp),d0
   134e6:	|  |         add.l d0,d0
   134e8:	|  |         movea.l d0,a1
   134ea:	|  |         adda.l d0,a1
   134ec:	|  |         lea 1c34a <paramNum>,a0
   134f2:	|  |         move.l (0,a1,a0.l),d0
   134f6:	|  |         cmp.l 108(sp),d0
   134fa:	|  +-------- beq.s 1356c <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   134fc:	|  |         move.l 104(sp),d0
   13500:	|  |         add.l d0,d0
   13502:	|  |         movea.l d0,a1
   13504:	|  |         adda.l d0,a1
   13506:	|  |         lea 1c34a <paramNum>,a0
   1350c:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   13510:	|  |         moveq #1,d1
   13512:	|  |         cmp.l d0,d1
   13514:	|  |  /----- bne.s 1351e <callBuiltIn+0x6a>
   13516:	|  |  |      move.l #100817,d0
   1351c:	|  |  |  /-- bra.s 13524 <callBuiltIn+0x70>
   1351e:	|  |  \--|-> move.l #105707,d0
   13524:	|  |     \-> move.l 104(sp),d1
   13528:	|  |         add.l d1,d1
   1352a:	|  |         movea.l d1,a1
   1352c:	|  |         adda.l d1,a1
   1352e:	|  |         lea 1c34a <paramNum>,a0
   13534:	|  |         move.l (0,a1,a0.l),d1
   13538:	|  |         move.l d0,-(sp)
   1353a:	|  |         move.l d1,-(sp)
   1353c:	|  |         pea 19ced <graphics.c.1c13408a+0x105>
   13542:	|  |         lea 12(sp),a0
   13546:	|  |         move.l a0,-(sp)
   13548:	|  |         jsr 13fdc <sprintf>
   1354e:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   13552:	|  |         movea.l sp,a0
   13554:	|  |         move.l a0,-(sp)
   13556:	|  |         jsr b8 <copyString>
   1355c:	|  |         addq.l #4,sp
   1355e:	|  |         move.l d0,-(sp)
   13560:	|  |         jsr 17232 <KPrintF>
   13566:	|  |         addq.l #4,sp
				return BR_ERROR;
   13568:	|  |         moveq #1,d0
   1356a:	|  |     /-- bra.s 135b4 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   1356c:	|  \-----|-> move.l 104(sp),d0
   13570:	|        |   add.l d0,d0
   13572:	|        |   movea.l d0,a1
   13574:	|        |   adda.l d0,a1
   13576:	|        |   lea 1c5e6 <builtInFunctionArray>,a0
   1357c:	|        |   move.l (0,a1,a0.l),d0
   13580:	+--------|-- beq.s 135a4 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   13582:	|        |   move.l 104(sp),d0
   13586:	|        |   add.l d0,d0
   13588:	|        |   movea.l d0,a1
   1358a:	|        |   adda.l d0,a1
   1358c:	|        |   lea 1c5e6 <builtInFunctionArray>,a0
   13592:	|        |   movea.l (0,a1,a0.l),a0
   13596:	|        |   move.l 112(sp),-(sp)
   1359a:	|        |   move.l 112(sp),-(sp)
   1359e:	|        |   jsr (a0)
   135a0:	|        |   addq.l #8,sp
   135a2:	|        +-- bra.s 135b4 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   135a4:	\--------|-> pea 19d18 <graphics.c.1c13408a+0x130>
   135aa:	         |   jsr 17232 <KPrintF>
   135b0:	         |   addq.l #4,sp
	return BR_ERROR;
   135b2:	         |   moveq #1,d0
}
   135b4:	         \-> lea 100(sp),sp
   135b8:	             rts

000135ba <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   135ba:	          subq.l #8,sp
	int indexNum = -1;
   135bc:	          moveq #-1,d0
   135be:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   135c2:	          clr.l (sp)
   135c4:	   /----- bra.s 135ea <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   135c6:	/--|----> move.l 1ca7c <languageTable>,d1
   135cc:	|  |      move.l (sp),d0
   135ce:	|  |      add.l d0,d0
   135d0:	|  |      add.l d0,d0
   135d2:	|  |      movea.l d1,a0
   135d4:	|  |      adda.l d0,a0
   135d6:	|  |      move.l (a0),d0
   135d8:	|  |      move.l d0,d1
   135da:	|  |      move.l 1ca84 <gameSettings>,d0
   135e0:	|  |      cmp.l d1,d0
   135e2:	|  |  /-- bne.s 135e8 <getLanguageForFileB+0x2e>
   135e4:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   135e8:	|  |  \-> addq.l #1,(sp)
   135ea:	|  \----> move.l 1ca88 <gameSettings+0x4>,d0
   135f0:	|         cmp.l (sp),d0
   135f2:	\-------- bcc.s 135c6 <getLanguageForFileB+0xc>
	}

	return indexNum;
   135f4:	          move.l 4(sp),d0
}
   135f8:	          addq.l #8,sp
   135fa:	          rts

000135fc <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   135fc:	          lea -20(sp),sp
   13600:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   13602:	          move.l 28(sp),-(sp)
   13606:	          jsr 13cbe <strlen>
   1360c:	          addq.l #4,sp
   1360e:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   13612:	          moveq #4,d0
   13614:	          cmp.l 12(sp),d0
   13618:	      /-- bge.s 1363c <getPrefsFilename+0x40>
   1361a:	      |   move.l 12(sp),d0
   1361e:	      |   subq.l #4,d0
   13620:	      |   movea.l 28(sp),a0
   13624:	      |   adda.l d0,a0
   13626:	      |   move.b (a0),d0
   13628:	      |   cmpi.b #46,d0
   1362c:	      +-- bne.s 1363c <getPrefsFilename+0x40>
		filename[n-4] = 0;
   1362e:	      |   move.l 12(sp),d0
   13632:	      |   subq.l #4,d0
   13634:	      |   movea.l 28(sp),a0
   13638:	      |   adda.l d0,a0
   1363a:	      |   clr.b (a0)
	}

	char * f = filename;
   1363c:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   13642:	          clr.l 20(sp)
   13646:	   /----- bra.s 1366e <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   13648:	/--|----> move.l 20(sp),d0
   1364c:	|  |      movea.l 28(sp),a0
   13650:	|  |      adda.l d0,a0
   13652:	|  |      move.b (a0),d0
   13654:	|  |      cmpi.b #47,d0
   13658:	|  |  /-- bne.s 1366a <getPrefsFilename+0x6e>
   1365a:	|  |  |   move.l 20(sp),d0
   1365e:	|  |  |   addq.l #1,d0
   13660:	|  |  |   move.l 28(sp),d1
   13664:	|  |  |   add.l d0,d1
   13666:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   1366a:	|  |  \-> addq.l #1,20(sp)
   1366e:	|  \----> move.l 20(sp),d0
   13672:	|         cmp.l 12(sp),d0
   13676:	\-------- blt.s 13648 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   13678:	          pea 19d43 <graphics.c.1c13408a+0x15b>
   1367e:	          move.l 20(sp),-(sp)
   13682:	          jsr 13cfe <joinStrings>
   13688:	          addq.l #8,sp
   1368a:	          move.l d0,8(sp)

	FreeVec(filename);
   1368e:	          move.l 28(sp),4(sp)
   13694:	          move.l 1c9a8 <SysBase>,d0
   1369a:	          movea.l d0,a6
   1369c:	          movea.l 4(sp),a1
   136a0:	          jsr -690(a6)
	filename = NULL;
   136a4:	          clr.l 28(sp)
	return joined;
   136a8:	          move.l 8(sp),d0
}
   136ac:	          movea.l (sp)+,a6
   136ae:	          lea 20(sp),sp
   136b2:	          rts

000136b4 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   136b4:	             lea -28(sp),sp
   136b8:	             move.l a6,-(sp)
   136ba:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   136bc:	             move.l 1ca88 <gameSettings+0x4>,d0
   136c2:	             move.l d0,d1
   136c4:	             addq.l #1,d1
   136c6:	             move.l d1,28(sp)
   136ca:	             clr.l 24(sp)
   136ce:	             move.l 1c9a8 <SysBase>,d0
   136d4:	             movea.l d0,a6
   136d6:	             move.l 28(sp),d0
   136da:	             move.l 24(sp),d1
   136de:	             jsr -684(a6)
   136e2:	             move.l d0,20(sp)
   136e6:	             move.l 20(sp),d0
   136ea:	             move.l d0,1ca7c <languageTable>
    if( languageTable == 0) {
   136f0:	             move.l 1ca7c <languageTable>,d0
   136f6:	         /-- bne.s 13706 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   136f8:	         |   pea 19d48 <graphics.c.1c13408a+0x160>
   136fe:	         |   jsr 17232 <KPrintF>
   13704:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   13706:	         \-> move.l 1ca88 <gameSettings+0x4>,d0
   1370c:	             move.l d0,d1
   1370e:	             addq.l #1,d1
   13710:	             move.l d1,16(sp)
   13714:	             clr.l 12(sp)
   13718:	             move.l 1c9a8 <SysBase>,d0
   1371e:	             movea.l d0,a6
   13720:	             move.l 16(sp),d0
   13724:	             move.l 12(sp),d1
   13728:	             jsr -684(a6)
   1372c:	             move.l d0,8(sp)
   13730:	             move.l 8(sp),d0
   13734:	             move.l d0,1ca80 <languageName>
	if( languageName == 0) {
   1373a:	             move.l 1ca80 <languageName>,d0
   13740:	         /-- bne.s 13750 <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   13742:	         |   pea 19d7e <graphics.c.1c13408a+0x196>
   13748:	         |   jsr 17232 <KPrintF>
   1374e:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13750:	         \-> clr.l 32(sp)
   13754:	   /-------- bra.s 137cc <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   13756:	/--|-------> tst.l 32(sp)
   1375a:	|  |  /----- beq.s 1376a <makeLanguageTable+0xb6>
   1375c:	|  |  |      move.l 40(sp),-(sp)
   13760:	|  |  |      jsr 6bc <get2bytes>
   13766:	|  |  |      addq.l #4,sp
   13768:	|  |  |  /-- bra.s 1376c <makeLanguageTable+0xb8>
   1376a:	|  |  \--|-> moveq #0,d0
   1376c:	|  |     \-> movea.l 1ca7c <languageTable>,a0
   13772:	|  |         move.l 32(sp),d1
   13776:	|  |         add.l d1,d1
   13778:	|  |         add.l d1,d1
   1377a:	|  |         adda.l d1,a0
   1377c:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   1377e:	|  |         move.l 1ca80 <languageName>,d1
   13784:	|  |         move.l 32(sp),d0
   13788:	|  |         add.l d0,d0
   1378a:	|  |         add.l d0,d0
   1378c:	|  |         movea.l d1,a0
   1378e:	|  |         adda.l d0,a0
   13790:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   13792:	|  |         move.l 1c952 <gameVersion>,d0
   13798:	|  |         cmpi.l #511,d0
   1379e:	|  |     /-- ble.s 137c8 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   137a0:	|  |     |   move.l 1ca88 <gameSettings+0x4>,d0
   137a6:	|  |     +-- beq.s 137c8 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   137a8:	|  |     |   move.l 1ca80 <languageName>,d1
   137ae:	|  |     |   move.l 32(sp),d0
   137b2:	|  |     |   add.l d0,d0
   137b4:	|  |     |   add.l d0,d0
   137b6:	|  |     |   movea.l d1,a2
   137b8:	|  |     |   adda.l d0,a2
   137ba:	|  |     |   move.l 40(sp),-(sp)
   137be:	|  |     |   jsr b02 <readString>
   137c4:	|  |     |   addq.l #4,sp
   137c6:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   137c8:	|  |     \-> addq.l #1,32(sp)
   137cc:	|  \-------> move.l 1ca88 <gameSettings+0x4>,d0
   137d2:	|            cmp.l 32(sp),d0
   137d6:	\----------- bcc.w 13756 <makeLanguageTable+0xa2>
		}
	}
}
   137da:	             nop
   137dc:	             nop
   137de:	             movea.l (sp)+,a2
   137e0:	             movea.l (sp)+,a6
   137e2:	             lea 28(sp),sp
   137e6:	             rts

000137e8 <readIniFile>:

void readIniFile (char * filename) {
   137e8:	                      lea -564(sp),sp
   137ec:	                      move.l a6,-(sp)
   137ee:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   137f0:	                      move.l 576(sp),-(sp)
   137f4:	                      jsr b8 <copyString>
   137fa:	                      addq.l #4,sp
   137fc:	                      move.l d0,-(sp)
   137fe:	                      jsr 135fc <getPrefsFilename>
   13804:	                      addq.l #4,sp
   13806:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   1380a:	                      move.l 562(sp),558(sp)
   13810:	                      move.l #1005,554(sp)
   13818:	                      move.l 1c9b0 <DOSBase>,d0
   1381e:	                      movea.l d0,a6
   13820:	                      move.l 558(sp),d1
   13824:	                      move.l 554(sp),d2
   13828:	                      jsr -30(a6)
   1382c:	                      move.l d0,550(sp)
   13830:	                      move.l 550(sp),d0
   13834:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   13838:	                      clr.l 1ca84 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   1383e:	                      move.w #1,1ca8c <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   13846:	                      clr.l 1ca8e <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   1384c:	                      moveq #1,d0
   1384e:	                      move.l d0,1ca92 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   13854:	                      clr.w 1ca96 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   1385a:	                      clr.w 1ca98 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   13860:	                      clr.w 1ca9a <gameSettings+0x16>

	FreeVec(langName);
   13866:	                      move.l 562(sp),542(sp)
   1386c:	                      move.l 1c9a8 <SysBase>,d0
   13872:	                      movea.l d0,a6
   13874:	                      movea.l 542(sp),a1
   13878:	                      jsr -690(a6)
	langName = NULL;
   1387c:	                      clr.l 562(sp)

	if (fp) {
   13880:	                      tst.l 546(sp)
   13884:	/-------------------- beq.w 13b62 <readIniFile+0x37a>
		char lineSoFar[257] = "";
   13888:	|                     move.l sp,d0
   1388a:	|                     addi.l #265,d0
   13890:	|                     move.l #257,d1
   13896:	|                     move.l d1,-(sp)
   13898:	|                     clr.l -(sp)
   1389a:	|                     move.l d0,-(sp)
   1389c:	|                     jsr 171b6 <memset>
   138a2:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   138a6:	|                     move.l sp,d0
   138a8:	|                     addq.l #8,d0
   138aa:	|                     move.l #257,d1
   138b0:	|                     move.l d1,-(sp)
   138b2:	|                     clr.l -(sp)
   138b4:	|                     move.l d0,-(sp)
   138b6:	|                     jsr 171b6 <memset>
   138bc:	|                     lea 12(sp),sp
		unsigned char here = 0;
   138c0:	|                     clr.b 571(sp)
		char readChar = ' ';
   138c4:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   138ca:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   138d0:	|                     clr.w 566(sp)
		LONG tmp = 0;
   138d4:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   138d8:	|  /----------------> move.l 546(sp),534(sp)
   138de:	|  |                  move.l 1c9b0 <DOSBase>,d0
   138e4:	|  |                  movea.l d0,a6
   138e6:	|  |                  move.l 534(sp),d1
   138ea:	|  |                  jsr -306(a6)
   138ee:	|  |                  move.l d0,530(sp)
   138f2:	|  |                  move.l 530(sp),d0
   138f6:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   138fa:	|  |                  moveq #-1,d1
   138fc:	|  |                  cmp.l 538(sp),d1
   13900:	|  |           /----- bne.s 1390e <readIniFile+0x126>
				readChar = '\n';
   13902:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   13908:	|  |           |      clr.w 568(sp)
   1390c:	|  |           |  /-- bra.s 13914 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   1390e:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   13914:	|  |              \-> move.b 570(sp),d0
   13918:	|  |                  ext.w d0
   1391a:	|  |                  movea.w d0,a0
   1391c:	|  |                  moveq #61,d0
   1391e:	|  |                  cmp.l a0,d0
   13920:	|  |     /----------- beq.w 13aca <readIniFile+0x2e2>
   13924:	|  |     |            moveq #61,d1
   13926:	|  |     |            cmp.l a0,d1
   13928:	|  |  /--|----------- blt.w 13ad6 <readIniFile+0x2ee>
   1392c:	|  |  |  |            moveq #10,d0
   1392e:	|  |  |  |            cmp.l a0,d0
   13930:	|  |  |  |        /-- beq.s 1393a <readIniFile+0x152>
   13932:	|  |  |  |        |   moveq #13,d1
   13934:	|  |  |  |        |   cmp.l a0,d1
   13936:	|  |  +--|--------|-- bne.w 13ad6 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   1393a:	|  |  |  |        \-> tst.w 566(sp)
   1393e:	|  |  |  |     /----- beq.w 13ab8 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   13942:	|  |  |  |     |      pea 19db2 <graphics.c.1c13408a+0x1ca>
   13948:	|  |  |  |     |      move.l sp,d0
   1394a:	|  |  |  |     |      addi.l #269,d0
   13950:	|  |  |  |     |      move.l d0,-(sp)
   13952:	|  |  |  |     |      jsr 13c7e <strcmp>
   13958:	|  |  |  |     |      addq.l #8,sp
   1395a:	|  |  |  |     |      tst.l d0
   1395c:	|  |  |  |     |  /-- bne.s 13976 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   1395e:	|  |  |  |     |  |   move.l sp,d0
   13960:	|  |  |  |     |  |   addq.l #8,d0
   13962:	|  |  |  |     |  |   move.l d0,-(sp)
   13964:	|  |  |  |     |  |   jsr 13b6e <stringToInt>
   1396a:	|  |  |  |     |  |   addq.l #4,sp
   1396c:	|  |  |  |     |  |   move.l d0,1ca84 <gameSettings>
   13972:	|  |  |  |     +--|-- bra.w 13ab8 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   13976:	|  |  |  |     |  \-> pea 19dbb <graphics.c.1c13408a+0x1d3>
   1397c:	|  |  |  |     |      move.l sp,d0
   1397e:	|  |  |  |     |      addi.l #269,d0
   13984:	|  |  |  |     |      move.l d0,-(sp)
   13986:	|  |  |  |     |      jsr 13c7e <strcmp>
   1398c:	|  |  |  |     |      addq.l #8,sp
   1398e:	|  |  |  |     |      tst.l d0
   13990:	|  |  |  |     |  /-- bne.s 139b6 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   13992:	|  |  |  |     |  |   move.l sp,d0
   13994:	|  |  |  |     |  |   addq.l #8,d0
   13996:	|  |  |  |     |  |   move.l d0,-(sp)
   13998:	|  |  |  |     |  |   jsr 13b6e <stringToInt>
   1399e:	|  |  |  |     |  |   addq.l #4,sp
   139a0:	|  |  |  |     |  |   tst.l d0
   139a2:	|  |  |  |     |  |   seq d0
   139a4:	|  |  |  |     |  |   neg.b d0
   139a6:	|  |  |  |     |  |   move.b d0,d0
   139a8:	|  |  |  |     |  |   andi.w #255,d0
   139ac:	|  |  |  |     |  |   move.w d0,1ca8c <gameSettings+0x8>
   139b2:	|  |  |  |     +--|-- bra.w 13ab8 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   139b6:	|  |  |  |     |  \-> pea 19dc2 <graphics.c.1c13408a+0x1da>
   139bc:	|  |  |  |     |      move.l sp,d0
   139be:	|  |  |  |     |      addi.l #269,d0
   139c4:	|  |  |  |     |      move.l d0,-(sp)
   139c6:	|  |  |  |     |      jsr 13c7e <strcmp>
   139cc:	|  |  |  |     |      addq.l #8,sp
   139ce:	|  |  |  |     |      tst.l d0
   139d0:	|  |  |  |     |  /-- bne.s 139ea <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   139d2:	|  |  |  |     |  |   move.l sp,d0
   139d4:	|  |  |  |     |  |   addq.l #8,d0
   139d6:	|  |  |  |     |  |   move.l d0,-(sp)
   139d8:	|  |  |  |     |  |   jsr 13b6e <stringToInt>
   139de:	|  |  |  |     |  |   addq.l #4,sp
   139e0:	|  |  |  |     |  |   move.l d0,1ca8e <gameSettings+0xa>
   139e6:	|  |  |  |     +--|-- bra.w 13ab8 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   139ea:	|  |  |  |     |  \-> pea 19dca <graphics.c.1c13408a+0x1e2>
   139f0:	|  |  |  |     |      move.l sp,d0
   139f2:	|  |  |  |     |      addi.l #269,d0
   139f8:	|  |  |  |     |      move.l d0,-(sp)
   139fa:	|  |  |  |     |      jsr 13c7e <strcmp>
   13a00:	|  |  |  |     |      addq.l #8,sp
   13a02:	|  |  |  |     |      tst.l d0
   13a04:	|  |  |  |     |  /-- bne.s 13a1e <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   13a06:	|  |  |  |     |  |   move.l sp,d0
   13a08:	|  |  |  |     |  |   addq.l #8,d0
   13a0a:	|  |  |  |     |  |   move.l d0,-(sp)
   13a0c:	|  |  |  |     |  |   jsr 13b6e <stringToInt>
   13a12:	|  |  |  |     |  |   addq.l #4,sp
   13a14:	|  |  |  |     |  |   move.l d0,1ca92 <gameSettings+0xe>
   13a1a:	|  |  |  |     +--|-- bra.w 13ab8 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   13a1e:	|  |  |  |     |  \-> pea 19dd4 <graphics.c.1c13408a+0x1ec>
   13a24:	|  |  |  |     |      move.l sp,d0
   13a26:	|  |  |  |     |      addi.l #269,d0
   13a2c:	|  |  |  |     |      move.l d0,-(sp)
   13a2e:	|  |  |  |     |      jsr 13c7e <strcmp>
   13a34:	|  |  |  |     |      addq.l #8,sp
   13a36:	|  |  |  |     |      tst.l d0
   13a38:	|  |  |  |     |  /-- bne.s 13a52 <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   13a3a:	|  |  |  |     |  |   move.l sp,d0
   13a3c:	|  |  |  |     |  |   addq.l #8,d0
   13a3e:	|  |  |  |     |  |   move.l d0,-(sp)
   13a40:	|  |  |  |     |  |   jsr 13b6e <stringToInt>
   13a46:	|  |  |  |     |  |   addq.l #4,sp
   13a48:	|  |  |  |     |  |   move.l d0,d0
   13a4a:	|  |  |  |     |  |   move.w d0,1ca96 <gameSettings+0x12>
   13a50:	|  |  |  |     +--|-- bra.s 13ab8 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   13a52:	|  |  |  |     |  \-> pea 19de0 <graphics.c.1c13408a+0x1f8>
   13a58:	|  |  |  |     |      move.l sp,d0
   13a5a:	|  |  |  |     |      addi.l #269,d0
   13a60:	|  |  |  |     |      move.l d0,-(sp)
   13a62:	|  |  |  |     |      jsr 13c7e <strcmp>
   13a68:	|  |  |  |     |      addq.l #8,sp
   13a6a:	|  |  |  |     |      tst.l d0
   13a6c:	|  |  |  |     |  /-- bne.s 13a86 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   13a6e:	|  |  |  |     |  |   move.l sp,d0
   13a70:	|  |  |  |     |  |   addq.l #8,d0
   13a72:	|  |  |  |     |  |   move.l d0,-(sp)
   13a74:	|  |  |  |     |  |   jsr 13b6e <stringToInt>
   13a7a:	|  |  |  |     |  |   addq.l #4,sp
   13a7c:	|  |  |  |     |  |   move.l d0,d0
   13a7e:	|  |  |  |     |  |   move.w d0,1ca98 <gameSettings+0x14>
   13a84:	|  |  |  |     +--|-- bra.s 13ab8 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   13a86:	|  |  |  |     |  \-> pea 19dee <graphics.c.1c13408a+0x206>
   13a8c:	|  |  |  |     |      move.l sp,d0
   13a8e:	|  |  |  |     |      addi.l #269,d0
   13a94:	|  |  |  |     |      move.l d0,-(sp)
   13a96:	|  |  |  |     |      jsr 13c7e <strcmp>
   13a9c:	|  |  |  |     |      addq.l #8,sp
   13a9e:	|  |  |  |     |      tst.l d0
   13aa0:	|  |  |  |     +----- bne.s 13ab8 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   13aa2:	|  |  |  |     |      move.l sp,d0
   13aa4:	|  |  |  |     |      addq.l #8,d0
   13aa6:	|  |  |  |     |      move.l d0,-(sp)
   13aa8:	|  |  |  |     |      jsr 13b6e <stringToInt>
   13aae:	|  |  |  |     |      addq.l #4,sp
   13ab0:	|  |  |  |     |      move.l d0,d0
   13ab2:	|  |  |  |     |      move.w d0,1ca9a <gameSettings+0x16>
					}
				}
				here = 0;
   13ab8:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
   13abc:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   13ac0:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   13ac4:	|  |  |  |            clr.b 8(sp)
				break;
   13ac8:	|  |  |  |  /-------- bra.s 13b40 <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   13aca:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
   13ad0:	|  |  |     |         clr.b 571(sp)
				break;
   13ad4:	|  |  |     +-------- bra.s 13b40 <readIniFile+0x358>

				default:
				if (doingSecond) {
   13ad6:	|  |  \-----|-------> tst.w 566(sp)
   13ada:	|  |        |  /----- beq.s 13b0e <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   13adc:	|  |        |  |      move.b 571(sp),d0
   13ae0:	|  |        |  |      move.b d0,d1
   13ae2:	|  |        |  |      addq.b #1,d1
   13ae4:	|  |        |  |      move.b d1,571(sp)
   13ae8:	|  |        |  |      move.b d0,d0
   13aea:	|  |        |  |      andi.l #255,d0
   13af0:	|  |        |  |      lea 572(sp),a0
   13af4:	|  |        |  |      adda.l d0,a0
   13af6:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   13afc:	|  |        |  |      moveq #0,d0
   13afe:	|  |        |  |      move.b 571(sp),d0
   13b02:	|  |        |  |      lea 572(sp),a0
   13b06:	|  |        |  |      adda.l d0,a0
   13b08:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   13b0c:	|  |        |  |  /-- bra.s 13b3e <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   13b0e:	|  |        |  \--|-> move.b 571(sp),d0
   13b12:	|  |        |     |   move.b d0,d1
   13b14:	|  |        |     |   addq.b #1,d1
   13b16:	|  |        |     |   move.b d1,571(sp)
   13b1a:	|  |        |     |   move.b d0,d0
   13b1c:	|  |        |     |   andi.l #255,d0
   13b22:	|  |        |     |   lea 572(sp),a0
   13b26:	|  |        |     |   adda.l d0,a0
   13b28:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   13b2e:	|  |        |     |   moveq #0,d0
   13b30:	|  |        |     |   move.b 571(sp),d0
   13b34:	|  |        |     |   lea 572(sp),a0
   13b38:	|  |        |     |   adda.l d0,a0
   13b3a:	|  |        |     |   clr.b -307(a0)
				break;
   13b3e:	|  |        |     \-> nop
			}
		} while (keepGoing);
   13b40:	|  |        \-------> tst.w 568(sp)
   13b44:	|  \----------------- bne.w 138d8 <readIniFile+0xf0>

		Close(fp);
   13b48:	|                     move.l 546(sp),526(sp)
   13b4e:	|                     move.l 1c9b0 <DOSBase>,d0
   13b54:	|                     movea.l d0,a6
   13b56:	|                     move.l 526(sp),d1
   13b5a:	|                     jsr -36(a6)
   13b5e:	|                     move.l d0,522(sp)
	}
}
   13b62:	\-------------------> nop
   13b64:	                      move.l (sp)+,d2
   13b66:	                      movea.l (sp)+,a6
   13b68:	                      lea 564(sp),sp
   13b6c:	                      rts

00013b6e <stringToInt>:

unsigned int stringToInt (char * s) {
   13b6e:	             subq.l #8,sp
	int i = 0;
   13b70:	             clr.l 4(sp)
	BOOL negative = FALSE;
   13b74:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   13b78:	/----------> movea.l 12(sp),a0
   13b7c:	|            move.b (a0),d0
   13b7e:	|            cmpi.b #47,d0
   13b82:	|        /-- ble.s 13bba <stringToInt+0x4c>
   13b84:	|        |   movea.l 12(sp),a0
   13b88:	|        |   move.b (a0),d0
   13b8a:	|        |   cmpi.b #57,d0
   13b8e:	|        +-- bgt.s 13bba <stringToInt+0x4c>
			i *= 10;
   13b90:	|        |   move.l 4(sp),d1
   13b94:	|        |   move.l d1,d0
   13b96:	|        |   add.l d0,d0
   13b98:	|        |   add.l d0,d0
   13b9a:	|        |   add.l d1,d0
   13b9c:	|        |   add.l d0,d0
   13b9e:	|        |   move.l d0,4(sp)
			i += *s - '0';
   13ba2:	|        |   movea.l 12(sp),a0
   13ba6:	|        |   move.b (a0),d0
   13ba8:	|        |   ext.w d0
   13baa:	|        |   movea.w d0,a0
   13bac:	|        |   moveq #-48,d0
   13bae:	|        |   add.l a0,d0
   13bb0:	|        |   add.l d0,4(sp)
			s ++;
   13bb4:	|        |   addq.l #1,12(sp)
   13bb8:	|  /-----|-- bra.s 13bf2 <stringToInt+0x84>
		} else if (*s == '-') {
   13bba:	|  |     \-> movea.l 12(sp),a0
   13bbe:	|  |         move.b (a0),d0
   13bc0:	|  |         cmpi.b #45,d0
   13bc4:	|  |     /-- bne.s 13bde <stringToInt+0x70>
			negative = ! negative;
   13bc6:	|  |     |   tst.w 2(sp)
   13bca:	|  |     |   seq d0
   13bcc:	|  |     |   neg.b d0
   13bce:	|  |     |   move.b d0,d0
   13bd0:	|  |     |   andi.w #255,d0
   13bd4:	|  |     |   move.w d0,2(sp)
			s++;
   13bd8:	|  |     |   addq.l #1,12(sp)
   13bdc:	+--|-----|-- bra.s 13b78 <stringToInt+0xa>
		} else {
			if (negative)
   13bde:	|  |     \-> tst.w 2(sp)
   13be2:	|  |     /-- beq.s 13bec <stringToInt+0x7e>
				return -i;
   13be4:	|  |     |   move.l 4(sp),d0
   13be8:	|  |     |   neg.l d0
   13bea:	|  |  /--|-- bra.s 13bf4 <stringToInt+0x86>
			return i;
   13bec:	|  |  |  \-> move.l 4(sp),d0
   13bf0:	|  |  +----- bra.s 13bf4 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   13bf2:	\--\--|----X bra.s 13b78 <stringToInt+0xa>
		}
	}
   13bf4:	      \----> addq.l #8,sp
   13bf6:	             rts

00013bf8 <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   13bf8:	    lea -28(sp),sp
   13bfc:	    move.l a6,-(sp)
   13bfe:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   13c00:	    pea 19df8 <graphics.c.1c13408a+0x210>
   13c06:	    jsr 17232 <KPrintF>
   13c0c:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   13c0e:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   13c12:	    move.l 40(sp),30(sp)
   13c18:	    move.l #1005,26(sp)
   13c20:	    move.l 1c9b0 <DOSBase>,d0
   13c26:	    movea.l d0,a6
   13c28:	    move.l 30(sp),d1
   13c2c:	    move.l 26(sp),d2
   13c30:	    jsr -30(a6)
   13c34:	    move.l d0,22(sp)
   13c38:	    move.l 22(sp),d0
   13c3c:	    move.l d0,18(sp)
	if (tester) {
   13c40:	/-- beq.s 13c70 <fileExists+0x78>
		KPrintF("fileexists: File exists");
   13c42:	|   pea 19e12 <graphics.c.1c13408a+0x22a>
   13c48:	|   jsr 17232 <KPrintF>
   13c4e:	|   addq.l #4,sp
		retval = 1;
   13c50:	|   move.b #1,35(sp)
		Close(tester);
   13c56:	|   move.l 18(sp),14(sp)
   13c5c:	|   move.l 1c9b0 <DOSBase>,d0
   13c62:	|   movea.l d0,a6
   13c64:	|   move.l 14(sp),d1
   13c68:	|   jsr -36(a6)
   13c6c:	|   move.l d0,10(sp)
	}
	return retval;
   13c70:	\-> move.b 35(sp),d0
   13c74:	    move.l (sp)+,d2
   13c76:	    movea.l (sp)+,a6
   13c78:	    lea 28(sp),sp
   13c7c:	    rts

00013c7e <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   13c7e:	   /-- bra.s 13c88 <strcmp+0xa>
    {
        s1++;
   13c80:	/--|-> addq.l #1,4(sp)
        s2++;
   13c84:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   13c88:	|  \-> movea.l 4(sp),a0
   13c8c:	|      move.b (a0),d0
   13c8e:	|  /-- beq.s 13ca0 <strcmp+0x22>
   13c90:	|  |   movea.l 4(sp),a0
   13c94:	|  |   move.b (a0),d1
   13c96:	|  |   movea.l 8(sp),a0
   13c9a:	|  |   move.b (a0),d0
   13c9c:	|  |   cmp.b d1,d0
   13c9e:	\--|-- beq.s 13c80 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   13ca0:	   \-> movea.l 4(sp),a0
   13ca4:	       move.b (a0),d0
   13ca6:	       moveq #0,d1
   13ca8:	       move.b d0,d1
   13caa:	       movea.l 8(sp),a0
   13cae:	       move.b (a0),d0
   13cb0:	       move.b d0,d0
   13cb2:	       andi.l #255,d0
   13cb8:	       sub.l d0,d1
   13cba:	       move.l d1,d0
}
   13cbc:	       rts

00013cbe <strlen>:

long unsigned int strlen (const char *s) 
{  
   13cbe:	       subq.l #4,sp
	long unsigned int i = 0;
   13cc0:	       clr.l (sp)
	while(s[i]) i++; 
   13cc2:	   /-- bra.s 13cc6 <strlen+0x8>
   13cc4:	/--|-> addq.l #1,(sp)
   13cc6:	|  \-> movea.l 8(sp),a0
   13cca:	|      adda.l (sp),a0
   13ccc:	|      move.b (a0),d0
   13cce:	\----- bne.s 13cc4 <strlen+0x6>
	return(i);
   13cd0:	       move.l (sp),d0
}
   13cd2:	       addq.l #4,sp
   13cd4:	       rts

00013cd6 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   13cd6:	    nop
   13cd8:	/-> move.l 8(sp),d0
   13cdc:	|   move.l d0,d1
   13cde:	|   addq.l #1,d1
   13ce0:	|   move.l d1,8(sp)
   13ce4:	|   movea.l 4(sp),a0
   13ce8:	|   lea 1(a0),a1
   13cec:	|   move.l a1,4(sp)
   13cf0:	|   movea.l d0,a1
   13cf2:	|   move.b (a1),d0
   13cf4:	|   move.b d0,(a0)
   13cf6:	|   move.b (a0),d0
   13cf8:	\-- bne.s 13cd8 <strcpy+0x2>
}
   13cfa:	    nop
   13cfc:	    rts

00013cfe <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   13cfe:	    lea -20(sp),sp
   13d02:	    move.l a6,-(sp)
   13d04:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   13d06:	    move.l 32(sp),-(sp)
   13d0a:	    jsr 13cbe <strlen>
   13d10:	    addq.l #4,sp
   13d12:	    move.l d0,d2
   13d14:	    move.l 36(sp),-(sp)
   13d18:	    jsr 13cbe <strlen>
   13d1e:	    addq.l #4,sp
   13d20:	    add.l d2,d0
   13d22:	    move.l d0,d1
   13d24:	    addq.l #1,d1
   13d26:	    move.l d1,20(sp)
   13d2a:	    clr.l 16(sp)
   13d2e:	    move.l 1c9a8 <SysBase>,d0
   13d34:	    movea.l d0,a6
   13d36:	    move.l 20(sp),d0
   13d3a:	    move.l 16(sp),d1
   13d3e:	    jsr -684(a6)
   13d42:	    move.l d0,12(sp)
   13d46:	    move.l 12(sp),d0
   13d4a:	    move.l d0,8(sp)
	char * t = newString;
   13d4e:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   13d54:	    nop
   13d56:	/-> move.l 32(sp),d0
   13d5a:	|   move.l d0,d1
   13d5c:	|   addq.l #1,d1
   13d5e:	|   move.l d1,32(sp)
   13d62:	|   movea.l 24(sp),a0
   13d66:	|   lea 1(a0),a1
   13d6a:	|   move.l a1,24(sp)
   13d6e:	|   movea.l d0,a1
   13d70:	|   move.b (a1),d0
   13d72:	|   move.b d0,(a0)
   13d74:	|   move.b (a0),d0
   13d76:	\-- bne.s 13d56 <joinStrings+0x58>
	t--;
   13d78:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   13d7c:	    nop
   13d7e:	/-> move.l 36(sp),d0
   13d82:	|   move.l d0,d1
   13d84:	|   addq.l #1,d1
   13d86:	|   move.l d1,36(sp)
   13d8a:	|   movea.l 24(sp),a0
   13d8e:	|   lea 1(a0),a1
   13d92:	|   move.l a1,24(sp)
   13d96:	|   movea.l d0,a1
   13d98:	|   move.b (a1),d0
   13d9a:	|   move.b d0,(a0)
   13d9c:	|   move.b (a0),d0
   13d9e:	\-- bne.s 13d7e <joinStrings+0x80>

	return newString;
   13da0:	    move.l 8(sp),d0
}
   13da4:	    move.l (sp)+,d2
   13da6:	    movea.l (sp)+,a6
   13da8:	    lea 20(sp),sp
   13dac:	    rts

00013dae <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   13dae:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   13db2:	       moveq #10,d0
   13db4:	       cmp.l 28(sp),d0
   13db8:	   /-- bne.s 13dd6 <itoa+0x28>
   13dba:	   |   tst.l 20(sp)
   13dbe:	   +-- bge.s 13dd6 <itoa+0x28>
        *str++ = '-';
   13dc0:	   |   move.l 24(sp),d0
   13dc4:	   |   move.l d0,d1
   13dc6:	   |   addq.l #1,d1
   13dc8:	   |   move.l d1,24(sp)
   13dcc:	   |   movea.l d0,a0
   13dce:	   |   move.b #45,(a0)
        value *= -1;
   13dd2:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   13dd6:	   \-> move.l 24(sp),12(sp)
   13ddc:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   13de2:	   /-> move.l 20(sp),d0
   13de6:	   |   move.l 28(sp),-(sp)
   13dea:	   |   move.l d0,-(sp)
   13dec:	   |   jsr 17c92 <__modsi3>
   13df2:	   |   addq.l #8,sp
   13df4:	   |   movea.l d0,a1
   13df6:	   |   move.l 12(sp),d0
   13dfa:	   |   move.l d0,d1
   13dfc:	   |   addq.l #1,d1
   13dfe:	   |   move.l d1,12(sp)
   13e02:	   |   lea 19e2a <graphics.c.1c13408a+0x242>,a0
   13e08:	   |   move.b (0,a1,a0.l),d1
   13e0c:	   |   movea.l d0,a0
   13e0e:	   |   move.b d1,(a0)
        value /= base;
   13e10:	   |   move.l 28(sp),-(sp)
   13e14:	   |   move.l 24(sp),-(sp)
   13e18:	   |   jsr 17c64 <__divsi3>
   13e1e:	   |   addq.l #8,sp
   13e20:	   |   move.l d0,20(sp)
    } while (value);
   13e24:	   \-- bne.s 13de2 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   13e26:	       move.l 12(sp),d0
   13e2a:	       move.l d0,d1
   13e2c:	       subq.l #1,d1
   13e2e:	       move.l d1,12(sp)
   13e32:	       movea.l d0,a0
   13e34:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   13e36:	       move.l 4(sp),8(sp)
   13e3c:	   /-- bra.s 13e62 <itoa+0xb4>
        char temp = *low;
   13e3e:	/--|-> movea.l 8(sp),a0
   13e42:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   13e46:	|  |   movea.l 12(sp),a0
   13e4a:	|  |   move.b (a0),d0
   13e4c:	|  |   movea.l 8(sp),a0
   13e50:	|  |   move.b d0,(a0)
        *ptr = temp;
   13e52:	|  |   movea.l 12(sp),a0
   13e56:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   13e5a:	|  |   addq.l #1,8(sp)
   13e5e:	|  |   subq.l #1,12(sp)
   13e62:	|  \-> move.l 8(sp),d0
   13e66:	|      cmp.l 12(sp),d0
   13e6a:	\----- bcs.s 13e3e <itoa+0x90>
    }
    return rc;
   13e6c:	       move.l 4(sp),d0
}
   13e70:	       lea 16(sp),sp
   13e74:	       rts

00013e76 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   13e76:	                            lea -40(sp),sp
   13e7a:	                            move.l d2,-(sp)
    char* s = str;
   13e7c:	                            move.l 48(sp),40(sp)
    const char* p = format;
   13e82:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   13e88:	   /----------------------- bra.w 13fbc <vsprintf2+0x146>
        if (*p == '%') {
   13e8c:	/--|----------------------> movea.l 36(sp),a0
   13e90:	|  |                        move.b (a0),d0
   13e92:	|  |                        cmpi.b #37,d0
   13e96:	|  |  /-------------------- bne.w 13fa2 <vsprintf2+0x12c>
            switch (*++p) {
   13e9a:	|  |  |                     addq.l #1,36(sp)
   13e9e:	|  |  |                     movea.l 36(sp),a0
   13ea2:	|  |  |                     move.b (a0),d0
   13ea4:	|  |  |                     ext.w d0
   13ea6:	|  |  |                     movea.w d0,a0
   13ea8:	|  |  |                     moveq #115,d0
   13eaa:	|  |  |                     cmp.l a0,d0
   13eac:	|  |  |           /-------- beq.s 13f24 <vsprintf2+0xae>
   13eae:	|  |  |           |         moveq #115,d1
   13eb0:	|  |  |           |         cmp.l a0,d1
   13eb2:	|  |  |  /--------|-------- blt.w 13f8a <vsprintf2+0x114>
   13eb6:	|  |  |  |        |         moveq #99,d2
   13eb8:	|  |  |  |        |         cmp.l a0,d2
   13eba:	|  |  |  |  /-----|-------- beq.w 13f62 <vsprintf2+0xec>
   13ebe:	|  |  |  |  |     |         moveq #100,d0
   13ec0:	|  |  |  |  |     |         cmp.l a0,d0
   13ec2:	|  |  |  +--|-----|-------- bne.w 13f8a <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   13ec6:	|  |  |  |  |     |         addq.l #4,56(sp)
   13eca:	|  |  |  |  |     |         movea.l 56(sp),a0
   13ece:	|  |  |  |  |     |         move.l (a0),d0
   13ed0:	|  |  |  |  |     |         move.l d0,d1
   13ed2:	|  |  |  |  |     |         subq.l #1,d1
   13ed4:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   13ed8:	|  |  |  |  |     |         pea a <_start+0xa>
   13edc:	|  |  |  |  |     |         lea 8(sp),a0
   13ee0:	|  |  |  |  |     |         move.l a0,-(sp)
   13ee2:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   13ee6:	|  |  |  |  |     |         jsr 13dae <itoa>
   13eec:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   13ef0:	|  |  |  |  |     |         lea 44(sp),a0
   13ef4:	|  |  |  |  |     |         lea -40(a0),a0
   13ef8:	|  |  |  |  |     |         move.l a0,28(sp)
   13efc:	|  |  |  |  |     |     /-- bra.s 13f18 <vsprintf2+0xa2>
                        *s++ = *b;
   13efe:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   13f02:	|  |  |  |  |     |  |  |   move.l d0,d1
   13f04:	|  |  |  |  |     |  |  |   addq.l #1,d1
   13f06:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   13f0a:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   13f0e:	|  |  |  |  |     |  |  |   move.b (a0),d1
   13f10:	|  |  |  |  |     |  |  |   movea.l d0,a0
   13f12:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   13f14:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   13f18:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   13f1c:	|  |  |  |  |     |  |      move.b (a0),d0
   13f1e:	|  |  |  |  |     |  \----- bne.s 13efe <vsprintf2+0x88>
                    }
                    break;
   13f20:	|  |  |  |  |  /--|-------- bra.w 13fb8 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   13f24:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   13f28:	|  |  |  |  |  |            movea.l 56(sp),a0
   13f2c:	|  |  |  |  |  |            move.l (a0),d0
   13f2e:	|  |  |  |  |  |            move.l d0,d1
   13f30:	|  |  |  |  |  |            subq.l #1,d1
   13f32:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   13f36:	|  |  |  |  |  |        /-- bra.s 13f58 <vsprintf2+0xe2>
                        *s++ = *sval++;
   13f38:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   13f3c:	|  |  |  |  |  |     |  |   move.l d1,d2
   13f3e:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13f40:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   13f44:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   13f48:	|  |  |  |  |  |     |  |   move.l d0,d2
   13f4a:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13f4c:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   13f50:	|  |  |  |  |  |     |  |   movea.l d1,a0
   13f52:	|  |  |  |  |  |     |  |   move.b (a0),d1
   13f54:	|  |  |  |  |  |     |  |   movea.l d0,a0
   13f56:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   13f58:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   13f5c:	|  |  |  |  |  |     |      move.b (a0),d0
   13f5e:	|  |  |  |  |  |     \----- bne.s 13f38 <vsprintf2+0xc2>
                    }
                    break;
   13f60:	|  |  |  |  |  +----------- bra.s 13fb8 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   13f62:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   13f66:	|  |  |  |     |            movea.l 56(sp),a0
   13f6a:	|  |  |  |     |            move.l (a0),d0
   13f6c:	|  |  |  |     |            move.l d0,d1
   13f6e:	|  |  |  |     |            subq.l #1,d1
   13f70:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   13f74:	|  |  |  |     |            move.l 40(sp),d0
   13f78:	|  |  |  |     |            move.l d0,d2
   13f7a:	|  |  |  |     |            addq.l #1,d2
   13f7c:	|  |  |  |     |            move.l d2,40(sp)
   13f80:	|  |  |  |     |            move.l 24(sp),d1
   13f84:	|  |  |  |     |            movea.l d0,a0
   13f86:	|  |  |  |     |            move.b d1,(a0)
                    break;
   13f88:	|  |  |  |     +----------- bra.s 13fb8 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   13f8a:	|  |  |  \-----|----------> move.l 40(sp),d0
   13f8e:	|  |  |        |            move.l d0,d1
   13f90:	|  |  |        |            addq.l #1,d1
   13f92:	|  |  |        |            move.l d1,40(sp)
   13f96:	|  |  |        |            movea.l 36(sp),a0
   13f9a:	|  |  |        |            move.b (a0),d1
   13f9c:	|  |  |        |            movea.l d0,a0
   13f9e:	|  |  |        |            move.b d1,(a0)
                    break;
   13fa0:	|  |  |        +----------- bra.s 13fb8 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   13fa2:	|  |  \--------|----------> move.l 40(sp),d0
   13fa6:	|  |           |            move.l d0,d1
   13fa8:	|  |           |            addq.l #1,d1
   13faa:	|  |           |            move.l d1,40(sp)
   13fae:	|  |           |            movea.l 36(sp),a0
   13fb2:	|  |           |            move.b (a0),d1
   13fb4:	|  |           |            movea.l d0,a0
   13fb6:	|  |           |            move.b d1,(a0)
        }
        p++;
   13fb8:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   13fbc:	|  \----------------------> movea.l 36(sp),a0
   13fc0:	|                           move.b (a0),d0
   13fc2:	\-------------------------- bne.w 13e8c <vsprintf2+0x16>
    }
    *s = '\0';
   13fc6:	                            movea.l 40(sp),a0
   13fca:	                            clr.b (a0)
    return s - str;
   13fcc:	                            move.l 40(sp),d0
   13fd0:	                            sub.l 48(sp),d0
}
   13fd4:	                            move.l (sp)+,d2
   13fd6:	                            lea 40(sp),sp
   13fda:	                            rts

00013fdc <sprintf>:

int sprintf(char* str, const char* format, ...) {
   13fdc:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   13fde:	moveq #16,d0
   13fe0:	add.l sp,d0
   13fe2:	move.l d0,d1
   13fe4:	addq.l #4,d1
   13fe6:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   13fea:	move.l 16(sp),d0
   13fee:	move.l 4(sp),-(sp)
   13ff2:	move.l d0,-(sp)
   13ff4:	move.l 20(sp),-(sp)
   13ff8:	jsr 13e76 <vsprintf2>
   13ffe:	lea 12(sp),sp
   14002:	move.l d0,(sp)
    va_end(args);
   14004:	clr.l 4(sp)

    return done;
   14008:	move.l (sp),d0
}
   1400a:	addq.l #8,sp
   1400c:	rts

0001400e <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   1400e:	       lea -20(sp),sp
   14012:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   14014:	       moveq #12,d0
   14016:	       move.l d0,20(sp)
   1401a:	       clr.l 16(sp)
   1401e:	       move.l 1c9a8 <SysBase>,d0
   14024:	       movea.l d0,a6
   14026:	       move.l 20(sp),d0
   1402a:	       move.l 16(sp),d1
   1402e:	       jsr -684(a6)
   14032:	       move.l d0,12(sp)
   14036:	       move.l 12(sp),d0
   1403a:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   1403e:	   /-- bne.s 14044 <addVarToStack+0x36>
   14040:	   |   clr.w d0
   14042:	/--|-- bra.s 1408c <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   14044:	|  \-> move.l 8(sp),d0
   14048:	|      move.l d0,-(sp)
   1404a:	|      move.l 32(sp),-(sp)
   1404e:	|      jsr 14b70 <copyMain>
   14054:	|      addq.l #8,sp
   14056:	|      tst.w d0
   14058:	|  /-- bne.s 14074 <addVarToStack+0x66>
        FreeVec(newStack);
   1405a:	|  |   move.l 8(sp),4(sp)
   14060:	|  |   move.l 1c9a8 <SysBase>,d0
   14066:	|  |   movea.l d0,a6
   14068:	|  |   movea.l 4(sp),a1
   1406c:	|  |   jsr -690(a6)
        return FALSE;
   14070:	|  |   clr.w d0
   14072:	+--|-- bra.s 1408c <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   14074:	|  \-> movea.l 32(sp),a0
   14078:	|      move.l (a0),d0
   1407a:	|      movea.l 8(sp),a0
   1407e:	|      move.l d0,8(a0)
    *thisStack = newStack;
   14082:	|      movea.l 32(sp),a0
   14086:	|      move.l 8(sp),(a0)
    return TRUE;
   1408a:	|      moveq #1,d0
}
   1408c:	\----> movea.l (sp)+,a6
   1408e:	       lea 20(sp),sp
   14092:	       rts

00014094 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   14094:	       lea -16(sp),sp
   14098:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   1409a:	       moveq #12,d0
   1409c:	       move.l d0,16(sp)
   140a0:	       clr.l 12(sp)
   140a4:	       move.l 1c9a8 <SysBase>,d0
   140aa:	       movea.l d0,a6
   140ac:	       move.l 16(sp),d0
   140b0:	       move.l 12(sp),d1
   140b4:	       jsr -684(a6)
   140b8:	       move.l d0,8(sp)
   140bc:	       move.l 8(sp),d0
   140c0:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   140c4:	   /-- bne.s 140ca <addVarToStackQuick+0x36>
   140c6:	   |   clr.w d0
   140c8:	/--|-- bra.s 14100 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   140ca:	|  \-> move.l 4(sp),d0
   140ce:	|      pea 8 <_start+0x8>
   140d2:	|      move.l 28(sp),-(sp)
   140d6:	|      move.l d0,-(sp)
   140d8:	|      jsr 171e6 <memcpy>
   140de:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   140e2:	|      movea.l 24(sp),a0
   140e6:	|      clr.l (a0)

    newStack->next = *thisStack;
   140e8:	|      movea.l 28(sp),a0
   140ec:	|      move.l (a0),d0
   140ee:	|      movea.l 4(sp),a0
   140f2:	|      move.l d0,8(a0)
    *thisStack = newStack;
   140f6:	|      movea.l 28(sp),a0
   140fa:	|      move.l 4(sp),(a0)
    return TRUE;
   140fe:	|      moveq #1,d0
}
   14100:	\----> movea.l (sp)+,a6
   14102:	       lea 16(sp),sp
   14106:	       rts

00014108 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   14108:	       lea -16(sp),sp
   1410c:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   1410e:	       movea.l 24(sp),a0
   14112:	       move.l (a0),d0
   14114:	       moveq #1,d1
   14116:	       cmp.l d0,d1
   14118:	   /-- bne.s 14142 <addVariablesInSecond+0x3a>
   1411a:	   |   movea.l 28(sp),a0
   1411e:	   |   move.l (a0),d0
   14120:	   |   moveq #1,d1
   14122:	   |   cmp.l d0,d1
   14124:	   +-- bne.s 14142 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   14126:	   |   movea.l 28(sp),a0
   1412a:	   |   move.l 4(a0),d1
   1412e:	   |   movea.l 24(sp),a0
   14132:	   |   move.l 4(a0),d0
   14136:	   |   add.l d1,d0
   14138:	   |   movea.l 28(sp),a0
   1413c:	   |   move.l d0,4(a0)
   14140:	/--|-- bra.s 141bc <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   14142:	|  \-> move.l 24(sp),-(sp)
   14146:	|      jsr 14da8 <getTextFromAnyVar>
   1414c:	|      addq.l #4,sp
   1414e:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   14152:	|      move.l 28(sp),-(sp)
   14156:	|      jsr 14da8 <getTextFromAnyVar>
   1415c:	|      addq.l #4,sp
   1415e:	|      move.l d0,12(sp)

		unlinkVar(var2);
   14162:	|      move.l 28(sp),-(sp)
   14166:	|      jsr 14a20 <unlinkVar>
   1416c:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   1416e:	|      move.l 12(sp),-(sp)
   14172:	|      move.l 20(sp),-(sp)
   14176:	|      jsr 13cfe <joinStrings>
   1417c:	|      addq.l #8,sp
   1417e:	|      movea.l 28(sp),a0
   14182:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   14186:	|      movea.l 28(sp),a0
   1418a:	|      moveq #3,d0
   1418c:	|      move.l d0,(a0)
		FreeVec(string1);
   1418e:	|      move.l 16(sp),8(sp)
   14194:	|      move.l 1c9a8 <SysBase>,d0
   1419a:	|      movea.l d0,a6
   1419c:	|      movea.l 8(sp),a1
   141a0:	|      jsr -690(a6)
		FreeVec(string2);
   141a4:	|      move.l 12(sp),4(sp)
   141aa:	|      move.l 1c9a8 <SysBase>,d0
   141b0:	|      movea.l d0,a6
   141b2:	|      movea.l 4(sp),a1
   141b6:	|      jsr -690(a6)
	}
}
   141ba:	|      nop
   141bc:	\----> nop
   141be:	       movea.l (sp)+,a6
   141c0:	       lea 16(sp),sp
   141c4:	       rts

000141c6 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   141c6:	movea.l 8(sp),a0
   141ca:	move.l 4(a0),-(sp)
   141ce:	move.l (a0),-(sp)
   141d0:	movea.l 12(sp),a0
   141d4:	move.l 4(a0),-(sp)
   141d8:	move.l (a0),-(sp)
   141da:	jsr 141fc <compareVars>
   141e0:	lea 16(sp),sp
   141e4:	move.l d0,-(sp)
   141e6:	pea 1 <_start+0x1>
   141ea:	move.l 16(sp),-(sp)
   141ee:	jsr 150c4 <setVariable>
   141f4:	lea 12(sp),sp
}
   141f8:	nop
   141fa:	rts

000141fc <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   141fc:	       subq.l #4,sp
	int re = 0;
   141fe:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   14200:	       move.l 8(sp),d1
   14204:	       move.l 16(sp),d0
   14208:	       cmp.l d1,d0
   1420a:	/----- bne.w 142d2 <compareVars+0xd6>
		switch (var1.varType) {
   1420e:	|      move.l 8(sp),d0
   14212:	|      moveq #9,d1
   14214:	|      cmp.l d0,d1
   14216:	|  /-- bcs.w 142ba <compareVars+0xbe>
   1421a:	|  |   add.l d0,d0
   1421c:	|  |   movea.l d0,a0
   1421e:	|  |   adda.l #82474,a0
   14224:	|  |   move.w (a0),d0
   14226:	|  |   jmp (1422a <compareVars+0x2e>,pc,d0.w)
   1422a:	|  |   ori.b #-112,(a4)
   1422e:	|  |   ori.l #5243024,(a0)
   14234:	|  |   ori.l #7733392,(a0)
   1423a:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   14240:	|  |   move.l d0,(sp)
			break;
   14242:	+--|-- bra.w 142d2 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   14246:	|  |   move.l 12(sp),d1
   1424a:	|  |   move.l 20(sp),d0
   1424e:	|  |   cmp.l d1,d0
   14250:	|  |   seq d0
   14252:	|  |   neg.b d0
   14254:	|  |   move.b d0,d0
   14256:	|  |   andi.l #255,d0
   1425c:	|  |   move.l d0,(sp)
			break;
   1425e:	+--|-- bra.s 142d2 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   14260:	|  |   move.l 12(sp),d1
   14264:	|  |   move.l 20(sp),d0
   14268:	|  |   cmp.l d1,d0
   1426a:	|  |   seq d0
   1426c:	|  |   neg.b d0
   1426e:	|  |   move.b d0,d0
   14270:	|  |   andi.l #255,d0
   14276:	|  |   move.l d0,(sp)
			break;
   14278:	+--|-- bra.s 142d2 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   1427a:	|  |   move.l 20(sp),d1
   1427e:	|  |   move.l 12(sp),d0
   14282:	|  |   move.l d1,-(sp)
   14284:	|  |   move.l d0,-(sp)
   14286:	|  |   jsr 13c7e <strcmp>
   1428c:	|  |   addq.l #8,sp
   1428e:	|  |   tst.l d0
   14290:	|  |   seq d0
   14292:	|  |   neg.b d0
   14294:	|  |   move.b d0,d0
   14296:	|  |   andi.l #255,d0
   1429c:	|  |   move.l d0,(sp)
			break;
   1429e:	+--|-- bra.s 142d2 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   142a0:	|  |   move.l 12(sp),d1
   142a4:	|  |   move.l 20(sp),d0
   142a8:	|  |   cmp.l d1,d0
   142aa:	|  |   seq d0
   142ac:	|  |   neg.b d0
   142ae:	|  |   move.b d0,d0
   142b0:	|  |   andi.l #255,d0
   142b6:	|  |   move.l d0,(sp)
			break;
   142b8:	+--|-- bra.s 142d2 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   142ba:	|  \-> move.l 12(sp),d1
   142be:	|      move.l 20(sp),d0
   142c2:	|      cmp.l d1,d0
   142c4:	|      seq d0
   142c6:	|      neg.b d0
   142c8:	|      move.b d0,d0
   142ca:	|      andi.l #255,d0
   142d0:	|      move.l d0,(sp)
		}
	}
	return re;
   142d2:	\----> move.l (sp),d0
}
   142d4:	       addq.l #4,sp
   142d6:	       rts

000142d8 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   142d8:	             lea -16(sp),sp
   142dc:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   142de:	             movea.l 28(sp),a0
   142e2:	             moveq #6,d0
   142e4:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   142e6:	             moveq #12,d0
   142e8:	             move.l d0,12(sp)
   142ec:	             clr.l 8(sp)
   142f0:	             move.l 1c9a8 <SysBase>,d0
   142f6:	             movea.l d0,a6
   142f8:	             move.l 12(sp),d0
   142fc:	             move.l 8(sp),d1
   14300:	             jsr -684(a6)
   14304:	             move.l d0,4(sp)
   14308:	             move.l 4(sp),d0
   1430c:	             movea.l 28(sp),a0
   14310:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   14314:	             movea.l 28(sp),a0
   14318:	             move.l 4(a0),d0
   1431c:	         /-- bne.s 14324 <copyStack+0x4c>
   1431e:	         |   clr.w d0
   14320:	/--------|-- bra.w 143a6 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   14324:	|        \-> movea.l 28(sp),a0
   14328:	|            movea.l 4(a0),a0
   1432c:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   1432e:	|            movea.l 28(sp),a0
   14332:	|            movea.l 4(a0),a0
   14336:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   1433a:	|            movea.l 28(sp),a0
   1433e:	|            movea.l 4(a0),a0
   14342:	|            moveq #1,d0
   14344:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   14348:	|            movea.l 24(sp),a0
   1434c:	|            movea.l 4(a0),a0
   14350:	|            move.l (a0),16(sp)

	while (a) {
   14354:	|     /----- bra.s 1439e <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   14356:	|  /--|----> movea.l 28(sp),a0
   1435a:	|  |  |      move.l 4(a0),d0
   1435e:	|  |  |      move.l d0,d1
   14360:	|  |  |      move.l 16(sp),d0
   14364:	|  |  |      move.l d1,-(sp)
   14366:	|  |  |      move.l d0,-(sp)
   14368:	|  |  |      jsr 1400e <addVarToStack>
   1436e:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   14370:	|  |  |      movea.l 28(sp),a0
   14374:	|  |  |      movea.l 4(a0),a0
   14378:	|  |  |      move.l 4(a0),d0
   1437c:	|  |  |  /-- bne.s 14394 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   1437e:	|  |  |  |   movea.l 28(sp),a0
   14382:	|  |  |  |   movea.l 4(a0),a1
   14386:	|  |  |  |   movea.l 28(sp),a0
   1438a:	|  |  |  |   movea.l 4(a0),a0
   1438e:	|  |  |  |   move.l (a1),d0
   14390:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   14394:	|  |  |  \-> movea.l 16(sp),a0
   14398:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   1439e:	|  |  \----> tst.l 16(sp)
   143a2:	|  \-------- bne.s 14356 <copyStack+0x7e>
	}

	return TRUE;
   143a4:	|            moveq #1,d0
}
   143a6:	\----------> movea.l (sp)+,a6
   143a8:	             lea 16(sp),sp
   143ac:	             rts

000143ae <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   143ae:	                lea -20(sp),sp
   143b2:	                move.l a6,-(sp)
   143b4:	                move.l 36(sp),d0
   143b8:	                move.w d0,d0
   143ba:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   143be:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   143c4:	                clr.l 16(sp)

    while (*huntVar) {
   143c8:	   /----------- bra.s 14446 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   143ca:	/--|----------> movea.l 20(sp),a0
   143ce:	|  |            movea.l (a0),a0
   143d0:	|  |            movea.l 28(sp),a1
   143d4:	|  |            move.l 4(a1),-(sp)
   143d8:	|  |            move.l (a1),-(sp)
   143da:	|  |            move.l 4(a0),-(sp)
   143de:	|  |            move.l (a0),-(sp)
   143e0:	|  |            jsr 141fc <compareVars>
   143e6:	|  |            lea 16(sp),sp
   143ea:	|  |            tst.l d0
   143ec:	|  |  /-------- beq.s 14438 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   143ee:	|  |  |         movea.l 20(sp),a0
   143f2:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   143f6:	|  |  |         movea.l 12(sp),a0
   143fa:	|  |  |         move.l 8(a0),d0
   143fe:	|  |  |         movea.l 20(sp),a0
   14402:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   14404:	|  |  |         move.l 12(sp),d0
   14408:	|  |  |         move.l d0,-(sp)
   1440a:	|  |  |         jsr 14a20 <unlinkVar>
   14410:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   14412:	|  |  |         move.l 12(sp),8(sp)
   14418:	|  |  |         move.l 1c9a8 <SysBase>,d0
   1441e:	|  |  |         movea.l d0,a6
   14420:	|  |  |         movea.l 8(sp),a1
   14424:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   14428:	|  |  |         tst.w 6(sp)
   1442c:	|  |  |     /-- bne.s 14432 <deleteVarFromStack+0x84>
   1442e:	|  |  |     |   moveq #1,d0
   14430:	|  |  |  /--|-- bra.s 14454 <deleteVarFromStack+0xa6>
            reply++;
   14432:	|  |  |  |  \-> addq.l #1,16(sp)
   14436:	|  +--|--|----- bra.s 14446 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   14438:	|  |  \--|----> movea.l 20(sp),a0
   1443c:	|  |     |      move.l (a0),d0
   1443e:	|  |     |      move.l d0,d1
   14440:	|  |     |      addq.l #8,d1
   14442:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   14446:	|  \-----|----> movea.l 20(sp),a0
   1444a:	|        |      move.l (a0),d0
   1444c:	\--------|----- bne.w 143ca <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   14450:	         |      move.l 16(sp),d0
}
   14454:	         \----> movea.l (sp)+,a6
   14456:	                lea 20(sp),sp
   1445a:	                rts

0001445c <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   1445c:	       movea.l 4(sp),a0
   14460:	       move.l 4(a0),d0
   14464:	       cmp.l 8(sp),d0
   14468:	   /-- bhi.s 1446e <fastArrayGetByIndex+0x12>
   1446a:	   |   moveq #0,d0
   1446c:	/--|-- bra.s 1447c <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   1446e:	|  \-> movea.l 4(sp),a0
   14472:	|      move.l (a0),d1
   14474:	|      move.l 8(sp),d0
   14478:	|      lsl.l #3,d0
   1447a:	|      add.l d1,d0
}
   1447c:	\----> rts

0001447e <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   1447e:	                lea -32(sp),sp
   14482:	                move.l a6,-(sp)
   14484:	                move.l a2,-(sp)
    struct persona *p = NULL;
   14486:	                clr.l 36(sp)

    switch (thisVar->varType) {
   1448a:	                movea.l 44(sp),a0
   1448e:	                move.l (a0),d0
   14490:	                moveq #8,d1
   14492:	                cmp.l d0,d1
   14494:	            /-- beq.s 144a2 <getCostumeFromVar+0x24>
   14496:	            |   moveq #9,d1
   14498:	            |   cmp.l d0,d1
   1449a:	   /--------|-- beq.w 14550 <getCostumeFromVar+0xd2>
   1449e:	/--|--------|-- bra.w 1455a <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   144a2:	|  |        \-> moveq #8,d0
   144a4:	|  |            move.l d0,28(sp)
   144a8:	|  |            clr.l 24(sp)
   144ac:	|  |            move.l 1c9a8 <SysBase>,d0
   144b2:	|  |            movea.l d0,a6
   144b4:	|  |            move.l 28(sp),d0
   144b8:	|  |            move.l 24(sp),d1
   144bc:	|  |            jsr -684(a6)
   144c0:	|  |            move.l d0,20(sp)
   144c4:	|  |            move.l 20(sp),d0
   144c8:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   144cc:	|  |        /-- bne.s 144d4 <getCostumeFromVar+0x56>
   144ce:	|  |        |   moveq #0,d0
   144d0:	|  |  /-----|-- bra.w 14584 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   144d4:	|  |  |     \-> movea.l 36(sp),a0
   144d8:	|  |  |         moveq #1,d1
   144da:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   144de:	|  |  |         moveq #12,d0
   144e0:	|  |  |         move.l d0,16(sp)
   144e4:	|  |  |         clr.l 12(sp)
   144e8:	|  |  |         move.l 1c9a8 <SysBase>,d0
   144ee:	|  |  |         movea.l d0,a6
   144f0:	|  |  |         move.l 16(sp),d0
   144f4:	|  |  |         move.l 12(sp),d1
   144f8:	|  |  |         jsr -684(a6)
   144fc:	|  |  |         move.l d0,8(sp)
   14500:	|  |  |         move.l 8(sp),d0
   14504:	|  |  |         movea.l 36(sp),a0
   14508:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   1450a:	|  |  |         movea.l 36(sp),a0
   1450e:	|  |  |         move.l (a0),d0
   14510:	|  |  |     /-- bne.s 14516 <getCostumeFromVar+0x98>
   14512:	|  |  |     |   moveq #0,d0
   14514:	|  |  +-----|-- bra.s 14584 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   14516:	|  |  |     \-> clr.l 32(sp)
   1451a:	|  |  |     /-- bra.s 14546 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   1451c:	|  |  |  /--|-> movea.l 44(sp),a0
   14520:	|  |  |  |  |   move.l 4(a0),d0
   14524:	|  |  |  |  |   movea.l 36(sp),a0
   14528:	|  |  |  |  |   movea.l (a0),a0
   1452a:	|  |  |  |  |   move.l 32(sp),d1
   1452e:	|  |  |  |  |   add.l d1,d1
   14530:	|  |  |  |  |   add.l d1,d1
   14532:	|  |  |  |  |   lea (0,a0,d1.l),a2
   14536:	|  |  |  |  |   move.l d0,-(sp)
   14538:	|  |  |  |  |   jsr 9538 <copyAnim>
   1453e:	|  |  |  |  |   addq.l #4,sp
   14540:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   14542:	|  |  |  |  |   addq.l #1,32(sp)
   14546:	|  |  |  |  \-> moveq #2,d1
   14548:	|  |  |  |      cmp.l 32(sp),d1
   1454c:	|  |  |  \----- bge.s 1451c <getCostumeFromVar+0x9e>
            }
            break;
   1454e:	|  |  |     /-- bra.s 14580 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   14550:	|  \--|-----|-> movea.l 44(sp),a0
   14554:	|     |     |   move.l 4(a0),d0
   14558:	|     +-----|-- bra.s 14584 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   1455a:	\-----|-----|-> movea.l 44(sp),a0
   1455e:	      |     |   move.l (a0),d0
   14560:	      |     |   add.l d0,d0
   14562:	      |     |   movea.l d0,a1
   14564:	      |     |   adda.l d0,a1
   14566:	      |     |   lea 1c884 <typeName>,a0
   1456c:	      |     |   move.l (0,a1,a0.l),d0
   14570:	      |     |   move.l d0,-(sp)
   14572:	      |     |   pea 19e9c <graphics.c.1c13408a+0x2b4>
   14578:	      |     |   jsr 17232 <KPrintF>
   1457e:	      |     |   addq.l #8,sp
    }

    return p;
   14580:	      |     \-> move.l 36(sp),d0
}
   14584:	      \-------> movea.l (sp)+,a2
   14586:	                movea.l (sp)+,a6
   14588:	                lea 32(sp),sp
   1458c:	                rts

0001458e <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   1458e:	                lea -96(sp),sp
   14592:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   14596:	                move.l 116(sp),-(sp)
   1459a:	                pea 19ed4 <graphics.c.1c13408a+0x2ec>
   145a0:	                jsr 13cfe <joinStrings>
   145a6:	                addq.l #8,sp
   145a8:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   145ac:	            /-- bne.s 145b4 <getSavedGamesStack+0x26>
   145ae:	            |   clr.w d0
   145b0:	/-----------|-- bra.w 147c8 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   145b4:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   145b8:	|               move.l #106198,98(sp)
   145c0:	|               moveq #-2,d0
   145c2:	|               move.l d0,94(sp)
   145c6:	|               move.l 1c9b0 <DOSBase>,d0
   145cc:	|               movea.l d0,a6
   145ce:	|               move.l 98(sp),d1
   145d2:	|               move.l 94(sp),d2
   145d6:	|               jsr -84(a6)
   145da:	|               move.l d0,90(sp)
   145de:	|               move.l 90(sp),d0
   145e2:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   145e6:	|           /-- bne.s 145ee <getSavedGamesStack+0x60>
   145e8:	|           |   clr.w d0
   145ea:	+-----------|-- bra.w 147c8 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   145ee:	|           \-> move.l #260,82(sp)
   145f6:	|               move.l #65536,78(sp)
   145fe:	|               move.l 1c9a8 <SysBase>,d0
   14604:	|               movea.l d0,a6
   14606:	|               move.l 82(sp),d0
   1460a:	|               move.l 78(sp),d1
   1460e:	|               jsr -684(a6)
   14612:	|               move.l d0,74(sp)
   14616:	|               move.l 74(sp),d0
   1461a:	|               move.l d0,70(sp)
	if (!fib) {
   1461e:	|           /-- bne.s 1463c <getSavedGamesStack+0xae>
		UnLock(dirLock);
   14620:	|           |   move.l 86(sp),22(sp)
   14626:	|           |   move.l 1c9b0 <DOSBase>,d0
   1462c:	|           |   movea.l d0,a6
   1462e:	|           |   move.l 22(sp),d1
   14632:	|           |   jsr -90(a6)
		return FALSE;
   14636:	|           |   clr.w d0
   14638:	+-----------|-- bra.w 147c8 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   1463c:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   14640:	|               move.l 86(sp),66(sp)
   14646:	|               move.l 70(sp),62(sp)
   1464c:	|               move.l 1c9b0 <DOSBase>,d0
   14652:	|               movea.l d0,a6
   14654:	|               move.l 66(sp),d1
   14658:	|               move.l 62(sp),d2
   1465c:	|               jsr -102(a6)
   14660:	|               move.l d0,58(sp)
   14664:	|               move.l 58(sp),d0
   14668:	|  /----------- beq.w 1477c <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   1466c:	|  |        /-- bra.w 14748 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   14670:	|  |  /-----|-> move.l 70(sp),d2
   14674:	|  |  |     |   addq.l #8,d2
   14676:	|  |  |     |   move.l 70(sp),d0
   1467a:	|  |  |     |   addq.l #8,d0
   1467c:	|  |  |     |   move.l d0,-(sp)
   1467e:	|  |  |     |   jsr 13cbe <strlen>
   14684:	|  |  |     |   addq.l #4,sp
   14686:	|  |  |     |   move.l d0,d3
   14688:	|  |  |     |   move.l 116(sp),-(sp)
   1468c:	|  |  |     |   jsr 13cbe <strlen>
   14692:	|  |  |     |   addq.l #4,sp
   14694:	|  |  |     |   move.l d3,d1
   14696:	|  |  |     |   sub.l d0,d1
   14698:	|  |  |     |   move.l d2,d0
   1469a:	|  |  |     |   add.l d1,d0
   1469c:	|  |  |     |   move.l 116(sp),-(sp)
   146a0:	|  |  |     |   move.l d0,-(sp)
   146a2:	|  |  |     |   jsr 13c7e <strcmp>
   146a8:	|  |  |     |   addq.l #8,sp
   146aa:	|  |  |     |   tst.l d0
   146ac:	|  |  |     +-- bne.w 14748 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   146b0:	|  |  |     |   move.l 70(sp),d0
   146b4:	|  |  |     |   addq.l #8,d0
   146b6:	|  |  |     |   move.l d0,-(sp)
   146b8:	|  |  |     |   jsr 13cbe <strlen>
   146be:	|  |  |     |   addq.l #4,sp
   146c0:	|  |  |     |   move.l d0,d2
   146c2:	|  |  |     |   move.l 116(sp),-(sp)
   146c6:	|  |  |     |   jsr 13cbe <strlen>
   146cc:	|  |  |     |   addq.l #4,sp
   146ce:	|  |  |     |   move.l d0,d1
   146d0:	|  |  |     |   move.l d2,d0
   146d2:	|  |  |     |   sub.l d1,d0
   146d4:	|  |  |     |   movea.l 70(sp),a0
   146d8:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   146dc:	|  |  |     |   move.l 70(sp),d0
   146e0:	|  |  |     |   addq.l #8,d0
   146e2:	|  |  |     |   move.l d0,-(sp)
   146e4:	|  |  |     |   jsr 118 <decodeFilename>
   146ea:	|  |  |     |   addq.l #4,sp
   146ec:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   146f0:	|  |  |     |   move.l 42(sp),-(sp)
   146f4:	|  |  |     |   lea 18(sp),a0
   146f8:	|  |  |     |   move.l a0,-(sp)
   146fa:	|  |  |     |   jsr 149f4 <makeTextVar>
   14700:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   14702:	|  |  |     |   move.l 42(sp),38(sp)
   14708:	|  |  |     |   move.l 1c9a8 <SysBase>,d0
   1470e:	|  |  |     |   movea.l d0,a6
   14710:	|  |  |     |   movea.l 38(sp),a1
   14714:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   14718:	|  |  |     |   move.l 112(sp),d0
   1471c:	|  |  |     |   move.l d0,-(sp)
   1471e:	|  |  |     |   lea 18(sp),a0
   14722:	|  |  |     |   move.l a0,-(sp)
   14724:	|  |  |     |   jsr 1400e <addVarToStack>
   1472a:	|  |  |     |   addq.l #8,sp
   1472c:	|  |  |     |   tst.w d0
   1472e:	|  |  |  /--|-- beq.s 14780 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   14730:	|  |  |  |  |   movea.l 112(sp),a0
   14734:	|  |  |  |  |   move.l 4(a0),d0
   14738:	|  |  |  |  +-- bne.s 14748 <getSavedGamesStack+0x1ba>
   1473a:	|  |  |  |  |   movea.l 112(sp),a0
   1473e:	|  |  |  |  |   move.l (a0),d0
   14740:	|  |  |  |  |   movea.l 112(sp),a0
   14744:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   14748:	|  |  |  |  \-> move.l 86(sp),54(sp)
   1474e:	|  |  |  |      move.l 70(sp),50(sp)
   14754:	|  |  |  |      move.l 1c9b0 <DOSBase>,d0
   1475a:	|  |  |  |      movea.l d0,a6
   1475c:	|  |  |  |      move.l 54(sp),d1
   14760:	|  |  |  |      move.l 50(sp),d2
   14764:	|  |  |  |      jsr -108(a6)
   14768:	|  |  |  |      move.l d0,46(sp)
   1476c:	|  |  |  |      move.l 46(sp),d0
   14770:	|  |  \--|----- bne.w 14670 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   14774:	|  |     |      move.w #1,106(sp)
   1477a:	|  |     |  /-- bra.s 14782 <getSavedGamesStack+0x1f4>
	}

cleanup:
   1477c:	|  \-----|--|-> nop
   1477e:	|        |  +-- bra.s 14782 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   14780:	|        \--|-> nop
	FreeVec(fib);
   14782:	|           \-> move.l 70(sp),34(sp)
   14788:	|               move.l 1c9a8 <SysBase>,d0
   1478e:	|               movea.l d0,a6
   14790:	|               movea.l 34(sp),a1
   14794:	|               jsr -690(a6)
	UnLock(dirLock);
   14798:	|               move.l 86(sp),30(sp)
   1479e:	|               move.l 1c9b0 <DOSBase>,d0
   147a4:	|               movea.l d0,a6
   147a6:	|               move.l 30(sp),d1
   147aa:	|               jsr -90(a6)
	FreeVec(pattern);
   147ae:	|               move.l 102(sp),26(sp)
   147b4:	|               move.l 1c9a8 <SysBase>,d0
   147ba:	|               movea.l d0,a6
   147bc:	|               movea.l 26(sp),a1
   147c0:	|               jsr -690(a6)
	return result;
   147c4:	|               move.w 106(sp),d0
}
   147c8:	\-------------> movem.l (sp)+,d2-d3/a6
   147cc:	                lea 96(sp),sp
   147d0:	                rts

000147d2 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   147d2:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   147d4:	       movea.l 20(sp),a0
   147d8:	       move.l (a0),d0
   147da:	       cmp.l 16(sp),d0
   147de:	/----- beq.s 14842 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   147e0:	|      move.l 16(sp),d0
   147e4:	|      add.l d0,d0
   147e6:	|      movea.l d0,a1
   147e8:	|      adda.l d0,a1
   147ea:	|      lea 1c884 <typeName>,a0
   147f0:	|      move.l (0,a1,a0.l),d0
   147f4:	|      move.l d0,-(sp)
   147f6:	|      pea 19ed8 <graphics.c.1c13408a+0x2f0>
   147fc:	|      jsr 13cfe <joinStrings>
   14802:	|      addq.l #8,sp
   14804:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   14808:	|      movea.l 20(sp),a0
   1480c:	|      move.l (a0),d0
   1480e:	|      add.l d0,d0
   14810:	|      movea.l d0,a1
   14812:	|      adda.l d0,a1
   14814:	|      lea 1c884 <typeName>,a0
   1481a:	|      move.l (0,a1,a0.l),d0
   1481e:	|      move.l d0,-(sp)
   14820:	|      pea 19f1a <graphics.c.1c13408a+0x332>
   14826:	|      jsr 13cfe <joinStrings>
   1482c:	|      addq.l #8,sp
   1482e:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   14830:	|      move.l (sp),-(sp)
   14832:	|      move.l 8(sp),-(sp)
   14836:	|      jsr 17232 <KPrintF>
   1483c:	|      addq.l #8,sp

		return FALSE;
   1483e:	|      clr.w d0
   14840:	|  /-- bra.s 14852 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   14842:	\--|-> movea.l 20(sp),a0
   14846:	   |   move.l 4(a0),d0
   1484a:	   |   movea.l 12(sp),a0
   1484e:	   |   move.l d0,(a0)
	return TRUE;
   14850:	   |   moveq #1,d0
}
   14852:	   \-> addq.l #8,sp
   14854:	       rts

00014856 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   14856:	move.l 8(sp),-(sp)
   1485a:	jsr 6c7e <getNumberedString>
   14860:	addq.l #4,sp
   14862:	move.l d0,-(sp)
   14864:	move.l 8(sp),-(sp)
   14868:	jsr 149f4 <makeTextVar>
   1486e:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   14870:	movea.l 4(sp),a0
   14874:	move.l 4(a0),d0
   14878:	sne d0
   1487a:	neg.b d0
   1487c:	move.b d0,d0
   1487e:	andi.w #255,d0
}
   14882:	rts

00014884 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   14884:	          subq.l #8,sp
    int size = stackSize(stacky);
   14886:	          move.l 16(sp),-(sp)
   1488a:	          jsr 15132 <stackSize>
   14890:	          addq.l #4,sp
   14892:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   14896:	          move.l 4(sp),-(sp)
   1489a:	          move.l 16(sp),-(sp)
   1489e:	          jsr 148ee <makeFastArraySize>
   148a4:	          addq.l #8,sp
   148a6:	          tst.w d0
   148a8:	      /-- bne.s 148ae <makeFastArrayFromStack+0x2a>
   148aa:	      |   clr.w d0
   148ac:	/-----|-- bra.s 148ea <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   148ae:	|     \-> movea.l 16(sp),a0
   148b2:	|         move.l (a0),(sp)
    size = 0;
   148b4:	|         clr.l 4(sp)
    while (allV) {
   148b8:	|     /-- bra.s 148e4 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   148ba:	|  /--|-> movea.l 12(sp),a0
   148be:	|  |  |   movea.l 4(a0),a0
   148c2:	|  |  |   move.l (a0),d1
   148c4:	|  |  |   move.l 4(sp),d0
   148c8:	|  |  |   lsl.l #3,d0
   148ca:	|  |  |   add.l d0,d1
   148cc:	|  |  |   move.l (sp),d0
   148ce:	|  |  |   move.l d1,-(sp)
   148d0:	|  |  |   move.l d0,-(sp)
   148d2:	|  |  |   jsr 14b70 <copyMain>
   148d8:	|  |  |   addq.l #8,sp
        size++;
   148da:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   148de:	|  |  |   movea.l (sp),a0
   148e0:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   148e4:	|  |  \-> tst.l (sp)
   148e6:	|  \----- bne.s 148ba <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   148e8:	|         moveq #1,d0
}
   148ea:	\-------> addq.l #8,sp
   148ec:	          rts

000148ee <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   148ee:	          lea -28(sp),sp
   148f2:	          move.l a6,-(sp)
    if (size < 0) {
   148f4:	          tst.l 40(sp)
   148f8:	      /-- bge.s 1490e <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   148fa:	      |   pea 19f5f <graphics.c.1c13408a+0x377>
   14900:	      |   jsr 17232 <KPrintF>
   14906:	      |   addq.l #4,sp
		return FALSE;
   14908:	      |   clr.w d0
   1490a:	/-----|-- bra.w 149ec <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   1490e:	|     \-> move.l 36(sp),-(sp)
   14912:	|         jsr 14a20 <unlinkVar>
   14918:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   1491a:	|         movea.l 36(sp),a0
   1491e:	|         moveq #10,d0
   14920:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   14922:	|         moveq #12,d0
   14924:	|         move.l d0,24(sp)
   14928:	|         clr.l 20(sp)
   1492c:	|         move.l 1c9a8 <SysBase>,d0
   14932:	|         movea.l d0,a6
   14934:	|         move.l 24(sp),d0
   14938:	|         move.l 20(sp),d1
   1493c:	|         jsr -684(a6)
   14940:	|         move.l d0,16(sp)
   14944:	|         move.l 16(sp),d0
   14948:	|         movea.l 36(sp),a0
   1494c:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   14950:	|         movea.l 36(sp),a0
   14954:	|         move.l 4(a0),d0
   14958:	|     /-- bne.s 14960 <makeFastArraySize+0x72>
   1495a:	|     |   clr.w d0
   1495c:	+-----|-- bra.w 149ec <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   14960:	|     \-> move.l 40(sp),d0
   14964:	|         lsl.l #3,d0
   14966:	|         move.l d0,12(sp)
   1496a:	|         clr.l 8(sp)
   1496e:	|         move.l 1c9a8 <SysBase>,d0
   14974:	|         movea.l d0,a6
   14976:	|         move.l 12(sp),d0
   1497a:	|         move.l 8(sp),d1
   1497e:	|         jsr -684(a6)
   14982:	|         move.l d0,4(sp)
   14986:	|         move.l 4(sp),d0
   1498a:	|         movea.l 36(sp),a0
   1498e:	|         movea.l 4(a0),a0
   14992:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   14994:	|         movea.l 36(sp),a0
   14998:	|         movea.l 4(a0),a0
   1499c:	|         move.l (a0),d0
   1499e:	|     /-- bne.s 149a4 <makeFastArraySize+0xb6>
   149a0:	|     |   clr.w d0
   149a2:	+-----|-- bra.s 149ec <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   149a4:	|     \-> clr.l 28(sp)
   149a8:	|     /-- bra.s 149c4 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   149aa:	|  /--|-> movea.l 36(sp),a0
   149ae:	|  |  |   movea.l 4(a0),a0
   149b2:	|  |  |   move.l (a0),d1
   149b4:	|  |  |   move.l 28(sp),d0
   149b8:	|  |  |   lsl.l #3,d0
   149ba:	|  |  |   movea.l d1,a0
   149bc:	|  |  |   adda.l d0,a0
   149be:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   149c0:	|  |  |   addq.l #1,28(sp)
   149c4:	|  |  \-> move.l 28(sp),d0
   149c8:	|  |      cmp.l 40(sp),d0
   149cc:	|  \----- blt.s 149aa <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   149ce:	|         movea.l 36(sp),a0
   149d2:	|         movea.l 4(a0),a0
   149d6:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   149dc:	|         movea.l 36(sp),a0
   149e0:	|         movea.l 4(a0),a0
   149e4:	|         moveq #1,d0
   149e6:	|         move.l d0,8(a0)
    return TRUE;
   149ea:	|         moveq #1,d0
}
   149ec:	\-------> movea.l (sp)+,a6
   149ee:	          lea 28(sp),sp
   149f2:	          rts

000149f4 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   149f4:	move.l 4(sp),-(sp)
   149f8:	jsr 14a20 <unlinkVar>
   149fe:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   14a00:	movea.l 4(sp),a0
   14a04:	moveq #3,d0
   14a06:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   14a08:	move.l 8(sp),-(sp)
   14a0c:	jsr b8 <copyString>
   14a12:	addq.l #4,sp
   14a14:	movea.l 4(sp),a0
   14a18:	move.l d0,4(a0)
}
   14a1c:	nop
   14a1e:	rts

00014a20 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   14a20:	                      lea -16(sp),sp
   14a24:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   14a26:	                      movea.l 24(sp),a0
   14a2a:	                      move.l (a0),d0
   14a2c:	                      moveq #10,d1
   14a2e:	                      cmp.l d0,d1
   14a30:	            /-------- beq.w 14ae8 <unlinkVar+0xc8>
   14a34:	            |         moveq #10,d1
   14a36:	            |         cmp.l d0,d1
   14a38:	/-----------|-------- bcs.w 14b5c <unlinkVar+0x13c>
   14a3c:	|           |         moveq #8,d1
   14a3e:	|           |         cmp.l d0,d1
   14a40:	|  /--------|-------- beq.w 14b48 <unlinkVar+0x128>
   14a44:	|  |        |         moveq #8,d1
   14a46:	|  |        |         cmp.l d0,d1
   14a48:	+--|--------|-------- bcs.w 14b5c <unlinkVar+0x13c>
   14a4c:	|  |        |         moveq #3,d1
   14a4e:	|  |        |         cmp.l d0,d1
   14a50:	|  |        |     /-- beq.s 14a5c <unlinkVar+0x3c>
   14a52:	|  |        |     |   moveq #6,d1
   14a54:	|  |        |     |   cmp.l d0,d1
   14a56:	|  |        |  /--|-- beq.s 14a82 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   14a58:	+--|--------|--|--|-- bra.w 14b5c <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   14a5c:	|  |        |  |  \-> movea.l 24(sp),a0
   14a60:	|  |        |  |      move.l 4(a0),4(sp)
   14a66:	|  |        |  |      move.l 1c9a8 <SysBase>,d0
   14a6c:	|  |        |  |      movea.l d0,a6
   14a6e:	|  |        |  |      movea.l 4(sp),a1
   14a72:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   14a76:	|  |        |  |      movea.l 24(sp),a0
   14a7a:	|  |        |  |      clr.l 4(a0)
		break;
   14a7e:	|  |  /-----|--|----- bra.w 14b66 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   14a82:	|  |  |     |  \----> movea.l 24(sp),a0
   14a86:	|  |  |     |         movea.l 4(a0),a0
   14a8a:	|  |  |     |         move.l 8(a0),d0
   14a8e:	|  |  |     |         subq.l #1,d0
   14a90:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14a94:	|  |  |     |         movea.l 24(sp),a0
   14a98:	|  |  |     |         movea.l 4(a0),a0
   14a9c:	|  |  |     |         move.l 8(a0),d0
   14aa0:	|  |  |  /--|-------- bgt.w 14b60 <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   14aa4:	|  |  |  |  |     /-- bra.s 14ab8 <unlinkVar+0x98>
   14aa6:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   14aaa:	|  |  |  |  |  |  |   move.l 4(a0),d0
   14aae:	|  |  |  |  |  |  |   move.l d0,-(sp)
   14ab0:	|  |  |  |  |  |  |   jsr 15156 <trimStack>
   14ab6:	|  |  |  |  |  |  |   addq.l #4,sp
   14ab8:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   14abc:	|  |  |  |  |  |      movea.l 4(a0),a0
   14ac0:	|  |  |  |  |  |      move.l (a0),d0
   14ac2:	|  |  |  |  |  \----- bne.s 14aa6 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   14ac4:	|  |  |  |  |         movea.l 24(sp),a0
   14ac8:	|  |  |  |  |         move.l 4(a0),8(sp)
   14ace:	|  |  |  |  |         move.l 1c9a8 <SysBase>,d0
   14ad4:	|  |  |  |  |         movea.l d0,a6
   14ad6:	|  |  |  |  |         movea.l 8(sp),a1
   14ada:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   14ade:	|  |  |  |  |         movea.l 24(sp),a0
   14ae2:	|  |  |  |  |         clr.l 4(a0)
		break;
   14ae6:	|  |  |  +--|-------- bra.s 14b60 <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   14ae8:	|  |  |  |  \-------> movea.l 24(sp),a0
   14aec:	|  |  |  |            movea.l 4(a0),a0
   14af0:	|  |  |  |            move.l 8(a0),d0
   14af4:	|  |  |  |            subq.l #1,d0
   14af6:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14afa:	|  |  |  |            movea.l 24(sp),a0
   14afe:	|  |  |  |            movea.l 4(a0),a0
   14b02:	|  |  |  |            move.l 8(a0),d0
   14b06:	|  |  |  |        /-- bgt.s 14b64 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   14b08:	|  |  |  |        |   movea.l 24(sp),a0
   14b0c:	|  |  |  |        |   movea.l 4(a0),a0
   14b10:	|  |  |  |        |   move.l (a0),16(sp)
   14b14:	|  |  |  |        |   move.l 1c9a8 <SysBase>,d0
   14b1a:	|  |  |  |        |   movea.l d0,a6
   14b1c:	|  |  |  |        |   movea.l 16(sp),a1
   14b20:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   14b24:	|  |  |  |        |   movea.l 24(sp),a0
   14b28:	|  |  |  |        |   move.l 4(a0),12(sp)
   14b2e:	|  |  |  |        |   move.l 1c9a8 <SysBase>,d0
   14b34:	|  |  |  |        |   movea.l d0,a6
   14b36:	|  |  |  |        |   movea.l 12(sp),a1
   14b3a:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   14b3e:	|  |  |  |        |   movea.l 24(sp),a0
   14b42:	|  |  |  |        |   clr.l 4(a0)
		break;
   14b46:	|  |  |  |        +-- bra.s 14b64 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   14b48:	|  \--|--|--------|-> movea.l 24(sp),a0
   14b4c:	|     |  |        |   move.l 4(a0),d0
   14b50:	|     |  |        |   move.l d0,-(sp)
   14b52:	|     |  |        |   jsr 9904 <deleteAnim>
   14b58:	|     |  |        |   addq.l #4,sp
		break;
   14b5a:	|     +--|--------|-- bra.s 14b66 <unlinkVar+0x146>
		break;
   14b5c:	\-----|--|--------|-> nop
   14b5e:	      +--|--------|-- bra.s 14b66 <unlinkVar+0x146>
		break;
   14b60:	      |  \--------|-> nop
   14b62:	      +-----------|-- bra.s 14b66 <unlinkVar+0x146>
		break;
   14b64:	      |           \-> nop
	}
}
   14b66:	      \-------------> nop
   14b68:	                      movea.l (sp)+,a6
   14b6a:	                      lea 16(sp),sp
   14b6e:	                      rts

00014b70 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   14b70:	       movea.l 4(sp),a0
   14b74:	       move.l (a0),d0
   14b76:	       movea.l 8(sp),a0
   14b7a:	       move.l d0,(a0)
	switch (to->varType) {
   14b7c:	       movea.l 8(sp),a0
   14b80:	       move.l (a0),d0
   14b82:	       moveq #10,d1
   14b84:	       cmp.l d0,d1
   14b86:	/----- bcs.w 14c78 <copyMain+0x108>
   14b8a:	|      add.l d0,d0
   14b8c:	|      movea.l d0,a0
   14b8e:	|      adda.l #84890,a0
   14b94:	|      move.w (a0),d0
   14b96:	|      jmp (14b9a <copyMain+0x2a>,pc,d0.w)
   14b9a:	|      .short 0x00da
   14b9c:	|      ori.b #22,(a6)
   14ba0:	|      ori.w #22,(a4)
   14ba4:	|      ori.b #-126,(a6)
   14ba8:	|      ori.b #-68,(a6)
   14bac:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   14bb4:	|      move.l 4(a0),d0
   14bb8:	|      movea.l 8(sp),a0
   14bbc:	|      move.l d0,4(a0)
		return TRUE;
   14bc0:	|      moveq #1,d0
   14bc2:	|  /-- bra.w 14c8a <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   14bc6:	|  |   movea.l 4(sp),a0
   14bca:	|  |   move.l 4(a0),d0
   14bce:	|  |   movea.l 8(sp),a0
   14bd2:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   14bd6:	|  |   movea.l 8(sp),a0
   14bda:	|  |   movea.l 4(a0),a0
   14bde:	|  |   move.l 8(a0),d0
   14be2:	|  |   addq.l #1,d0
   14be4:	|  |   move.l d0,8(a0)
		return TRUE;
   14be8:	|  |   moveq #1,d0
   14bea:	|  +-- bra.w 14c8a <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   14bee:	|  |   movea.l 4(sp),a0
   14bf2:	|  |   move.l 4(a0),d0
   14bf6:	|  |   move.l d0,-(sp)
   14bf8:	|  |   jsr b8 <copyString>
   14bfe:	|  |   addq.l #4,sp
   14c00:	|  |   movea.l 8(sp),a0
   14c04:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   14c08:	|  |   movea.l 8(sp),a0
   14c0c:	|  |   move.l 4(a0),d0
   14c10:	|  |   sne d0
   14c12:	|  |   neg.b d0
   14c14:	|  |   move.b d0,d0
   14c16:	|  |   andi.w #255,d0
   14c1a:	|  +-- bra.s 14c8a <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   14c1c:	|  |   movea.l 4(sp),a0
   14c20:	|  |   move.l 4(a0),d0
   14c24:	|  |   movea.l 8(sp),a0
   14c28:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   14c2c:	|  |   movea.l 8(sp),a0
   14c30:	|  |   movea.l 4(a0),a0
   14c34:	|  |   move.l 8(a0),d0
   14c38:	|  |   addq.l #1,d0
   14c3a:	|  |   move.l d0,8(a0)
		return TRUE;
   14c3e:	|  |   moveq #1,d0
   14c40:	|  +-- bra.s 14c8a <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   14c42:	|  |   movea.l 4(sp),a0
   14c46:	|  |   move.l 4(a0),d0
   14c4a:	|  |   movea.l 8(sp),a0
   14c4e:	|  |   move.l d0,4(a0)
		return TRUE;
   14c52:	|  |   moveq #1,d0
   14c54:	|  +-- bra.s 14c8a <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   14c56:	|  |   movea.l 4(sp),a0
   14c5a:	|  |   move.l 4(a0),d0
   14c5e:	|  |   move.l d0,-(sp)
   14c60:	|  |   jsr 9538 <copyAnim>
   14c66:	|  |   addq.l #4,sp
   14c68:	|  |   movea.l 8(sp),a0
   14c6c:	|  |   move.l d0,4(a0)
		return TRUE;
   14c70:	|  |   moveq #1,d0
   14c72:	|  +-- bra.s 14c8a <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   14c74:	|  |   moveq #1,d0
   14c76:	|  +-- bra.s 14c8a <copyMain+0x11a>

		default:
		break;
   14c78:	\--|-> nop
	}
	KPrintF("Unknown value type");
   14c7a:	   |   pea 19fb0 <graphics.c.1c13408a+0x3c8>
   14c80:	   |   jsr 17232 <KPrintF>
   14c86:	   |   addq.l #4,sp
	return FALSE;
   14c88:	   |   clr.w d0
}
   14c8a:	   \-> rts

00014c8c <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   14c8c:	move.l 8(sp),-(sp)
   14c90:	jsr 14a20 <unlinkVar>
   14c96:	addq.l #4,sp
	return copyMain(from, to);
   14c98:	move.l 8(sp),-(sp)
   14c9c:	move.l 8(sp),-(sp)
   14ca0:	jsr 14b70 <copyMain>
   14ca6:	addq.l #8,sp
}
   14ca8:	rts

00014caa <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   14caa:	       movea.l 4(sp),a0
   14cae:	       move.l (a0),d0
   14cb0:	       moveq #8,d1
   14cb2:	       cmp.l d0,d1
   14cb4:	   /-- bne.s 14cca <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   14cb6:	   |   movea.l 4(sp),a0
   14cba:	   |   move.l 4(a0),d0
   14cbe:	   |   move.l d0,-(sp)
   14cc0:	   |   jsr 9538 <copyAnim>
   14cc6:	   |   addq.l #4,sp
   14cc8:	/--|-- bra.s 14d10 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   14cca:	|  \-> movea.l 4(sp),a0
   14cce:	|      move.l (a0),d0
   14cd0:	|      moveq #1,d1
   14cd2:	|      cmp.l d0,d1
   14cd4:	|  /-- bne.s 14ce8 <getAnimationFromVar+0x3e>
   14cd6:	|  |   movea.l 4(sp),a0
   14cda:	|  |   move.l 4(a0),d0
   14cde:	|  +-- bne.s 14ce8 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   14ce0:	|  |   jsr ad08 <makeNullAnim>
   14ce6:	+--|-- bra.s 14d10 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14ce8:	|  \-> movea.l 4(sp),a0
   14cec:	|      move.l (a0),d0
   14cee:	|      add.l d0,d0
   14cf0:	|      movea.l d0,a1
   14cf2:	|      adda.l d0,a1
   14cf4:	|      lea 1c884 <typeName>,a0
   14cfa:	|      move.l (0,a1,a0.l),d0
   14cfe:	|      move.l d0,-(sp)
   14d00:	|      pea 19e9c <graphics.c.1c13408a+0x2b4>
   14d06:	|      jsr 17232 <KPrintF>
   14d0c:	|      addq.l #8,sp
	return NULL;
   14d0e:	|      moveq #0,d0
}
   14d10:	\----> rts

00014d12 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   14d12:	       movea.l 4(sp),a0
   14d16:	       move.l (a0),d0
   14d18:	       moveq #10,d1
   14d1a:	       cmp.l d0,d1
   14d1c:	/----- bcs.w 14da2 <getBoolean+0x90>
   14d20:	|      add.l d0,d0
   14d22:	|      movea.l d0,a0
   14d24:	|      adda.l #85296,a0
   14d2a:	|      move.w (a0),d0
   14d2c:	|      jmp (14d30 <getBoolean+0x1e>,pc,d0.w)
   14d30:	|      ori.b #26,(a6)
   14d34:	|      ori.w #68,(114,a2,d0.w)
   14d3a:	|      ori.w #46,(114,a2,d0.w)
   14d40:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   14d46:	|      clr.w d0
   14d48:	|  /-- bra.s 14da6 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   14d4a:	|  |   movea.l 4(sp),a0
   14d4e:	|  |   move.l 4(a0),d0
   14d52:	|  |   sne d0
   14d54:	|  |   neg.b d0
   14d56:	|  |   move.b d0,d0
   14d58:	|  |   andi.w #255,d0
   14d5c:	|  +-- bra.s 14da6 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   14d5e:	|  |   movea.l 4(sp),a0
   14d62:	|  |   movea.l 4(a0),a0
   14d66:	|  |   move.l (a0),d0
   14d68:	|  |   sne d0
   14d6a:	|  |   neg.b d0
   14d6c:	|  |   move.b d0,d0
   14d6e:	|  |   andi.w #255,d0
   14d72:	|  +-- bra.s 14da6 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   14d74:	|  |   movea.l 4(sp),a0
   14d78:	|  |   movea.l 4(a0),a0
   14d7c:	|  |   move.b (a0),d0
   14d7e:	|  |   sne d0
   14d80:	|  |   neg.b d0
   14d82:	|  |   move.b d0,d0
   14d84:	|  |   andi.w #255,d0
   14d88:	|  +-- bra.s 14da6 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   14d8a:	|  |   movea.l 4(sp),a0
   14d8e:	|  |   movea.l 4(a0),a0
   14d92:	|  |   move.l 4(a0),d0
   14d96:	|  |   sne d0
   14d98:	|  |   neg.b d0
   14d9a:	|  |   move.b d0,d0
   14d9c:	|  |   andi.w #255,d0
   14da0:	|  +-- bra.s 14da6 <getBoolean+0x94>

		default:
		break;
   14da2:	\--|-> nop
	}
	return TRUE;
   14da4:	   |   moveq #1,d0
}
   14da6:	   \-> rts

00014da8 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   14da8:	      /----------> lea -76(sp),sp
   14dac:	      |            move.l a6,-(sp)
	switch (from->varType) {
   14dae:	      |            movea.l 84(sp),a0
   14db2:	      |            move.l (a0),d0
   14db4:	      |            moveq #10,d1
   14db6:	      |            cmp.l d0,d1
   14db8:	/-----|----------- bcs.w 15056 <getTextFromAnyVar+0x2ae>
   14dbc:	|     |            add.l d0,d0
   14dbe:	|     |            movea.l d0,a0
   14dc0:	|     |            adda.l #85452,a0
   14dc6:	|     |            move.w (a0),d0
   14dc8:	|     |            jmp (14dcc <getTextFromAnyVar+0x24>,pc,d0.w)
   14dcc:	|     |            .short 0x028a
   14dce:	|     |            bset d0,(a0)+
   14dd0:	|     |            .short 0x028a
   14dd2:	|     |            ori.b #-118,(a6)
   14dd6:	|     |            andi.b #8,ccr
   14dda:	|     |            andi.w #650,-(a0)
   14dde:	|     |            .short 0x028a
   14de0:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   14de6:	|     |            move.l 4(a0),d0
   14dea:	|     |            move.l d0,-(sp)
   14dec:	|     |            jsr b8 <copyString>
   14df2:	|     |            addq.l #4,sp
   14df4:	|  /--|----------- bra.w 15078 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   14df8:	|  |  |            pea 19fc3 <graphics.c.1c13408a+0x3db>
   14dfe:	|  |  |            jsr b8 <copyString>
   14e04:	|  |  |            addq.l #4,sp
   14e06:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14e0a:	|  |  |            clr.l 72(sp)
   14e0e:	|  |  |     /----- bra.w 14eb8 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   14e12:	|  |  |  /--|----> pea 19fc9 <graphics.c.1c13408a+0x3e1>
   14e18:	|  |  |  |  |      move.l 80(sp),-(sp)
   14e1c:	|  |  |  |  |      jsr 13cfe <joinStrings>
   14e22:	|  |  |  |  |      addq.l #8,sp
   14e24:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   14e28:	|  |  |  |  |  /-- bne.s 14e30 <getTextFromAnyVar+0x88>
   14e2a:	|  |  |  |  |  |   moveq #0,d0
   14e2c:	|  +--|--|--|--|-- bra.w 15078 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14e30:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   14e36:	|  |  |  |  |      move.l 1c9a8 <SysBase>,d0
   14e3c:	|  |  |  |  |      movea.l d0,a6
   14e3e:	|  |  |  |  |      movea.l 56(sp),a1
   14e42:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   14e46:	|  |  |  |  |      movea.l 84(sp),a0
   14e4a:	|  |  |  |  |      movea.l 4(a0),a0
   14e4e:	|  |  |  |  |      move.l (a0),d1
   14e50:	|  |  |  |  |      move.l 72(sp),d0
   14e54:	|  |  |  |  |      lsl.l #3,d0
   14e56:	|  |  |  |  |      add.l d1,d0
   14e58:	|  |  |  |  |      move.l d0,-(sp)
   14e5a:	|  |  +--|--|----- jsr 14da8 <getTextFromAnyVar>(pc)
   14e5e:	|  |  |  |  |      addq.l #4,sp
   14e60:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   14e64:	|  |  |  |  |      move.l 52(sp),-(sp)
   14e68:	|  |  |  |  |      move.l 64(sp),-(sp)
   14e6c:	|  |  |  |  |      jsr 13cfe <joinStrings>
   14e72:	|  |  |  |  |      addq.l #8,sp
   14e74:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   14e78:	|  |  |  |  |  /-- bne.s 14e80 <getTextFromAnyVar+0xd8>
   14e7a:	|  |  |  |  |  |   moveq #0,d0
   14e7c:	|  +--|--|--|--|-- bra.w 15078 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14e80:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   14e86:	|  |  |  |  |      move.l 1c9a8 <SysBase>,d0
   14e8c:	|  |  |  |  |      movea.l d0,a6
   14e8e:	|  |  |  |  |      movea.l 48(sp),a1
   14e92:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   14e96:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   14e9a:	|  |  |  |  |      move.l 60(sp),44(sp)
   14ea0:	|  |  |  |  |      move.l 1c9a8 <SysBase>,d0
   14ea6:	|  |  |  |  |      movea.l d0,a6
   14ea8:	|  |  |  |  |      movea.l 44(sp),a1
   14eac:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   14eb0:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14eb4:	|  |  |  |  |      addq.l #1,72(sp)
   14eb8:	|  |  |  |  \----> movea.l 84(sp),a0
   14ebc:	|  |  |  |         movea.l 4(a0),a0
   14ec0:	|  |  |  |         move.l 4(a0),d0
   14ec4:	|  |  |  |         cmp.l 72(sp),d0
   14ec8:	|  |  |  \-------- bgt.w 14e12 <getTextFromAnyVar+0x6a>
			}
			return builder;
   14ecc:	|  |  |            move.l 76(sp),d0
   14ed0:	|  +--|----------- bra.w 15078 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   14ed4:	|  |  |            pea 19fcb <graphics.c.1c13408a+0x3e3>
   14eda:	|  |  |            jsr b8 <copyString>
   14ee0:	|  |  |            addq.l #4,sp
   14ee2:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   14ee6:	|  |  |            movea.l 84(sp),a0
   14eea:	|  |  |            movea.l 4(a0),a0
   14eee:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   14ef2:	|  |  |     /----- bra.w 14f94 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   14ef6:	|  |  |  /--|----> pea 19fc9 <graphics.c.1c13408a+0x3e1>
   14efc:	|  |  |  |  |      move.l 72(sp),-(sp)
   14f00:	|  |  |  |  |      jsr 13cfe <joinStrings>
   14f06:	|  |  |  |  |      addq.l #8,sp
   14f08:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   14f0c:	|  |  |  |  |  /-- bne.s 14f14 <getTextFromAnyVar+0x16c>
   14f0e:	|  |  |  |  |  |   moveq #0,d0
   14f10:	|  +--|--|--|--|-- bra.w 15078 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14f14:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   14f1a:	|  |  |  |  |      move.l 1c9a8 <SysBase>,d0
   14f20:	|  |  |  |  |      movea.l d0,a6
   14f22:	|  |  |  |  |      movea.l 32(sp),a1
   14f26:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   14f2a:	|  |  |  |  |      move.l 64(sp),d0
   14f2e:	|  |  |  |  |      move.l d0,-(sp)
   14f30:	|  |  \--|--|----- jsr 14da8 <getTextFromAnyVar>(pc)
   14f34:	|  |     |  |      addq.l #4,sp
   14f36:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   14f3a:	|  |     |  |      move.l 28(sp),-(sp)
   14f3e:	|  |     |  |      move.l 40(sp),-(sp)
   14f42:	|  |     |  |      jsr 13cfe <joinStrings>
   14f48:	|  |     |  |      addq.l #8,sp
   14f4a:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   14f4e:	|  |     |  |  /-- bne.s 14f56 <getTextFromAnyVar+0x1ae>
   14f50:	|  |     |  |  |   moveq #0,d0
   14f52:	|  +-----|--|--|-- bra.w 15078 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14f56:	|  |     |  |  \-> move.l 28(sp),24(sp)
   14f5c:	|  |     |  |      move.l 1c9a8 <SysBase>,d0
   14f62:	|  |     |  |      movea.l d0,a6
   14f64:	|  |     |  |      movea.l 24(sp),a1
   14f68:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   14f6c:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   14f70:	|  |     |  |      move.l 36(sp),20(sp)
   14f76:	|  |     |  |      move.l 1c9a8 <SysBase>,d0
   14f7c:	|  |     |  |      movea.l d0,a6
   14f7e:	|  |     |  |      movea.l 20(sp),a1
   14f82:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   14f86:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   14f8a:	|  |     |  |      movea.l 64(sp),a0
   14f8e:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   14f94:	|  |     |  \----> tst.l 64(sp)
   14f98:	|  |     \-------- bne.w 14ef6 <getTextFromAnyVar+0x14e>
			}
			return builder;
   14f9c:	|  |               move.l 68(sp),d0
   14fa0:	|  +-------------- bra.w 15078 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   14fa4:	|  |               moveq #10,d0
   14fa6:	|  |               move.l d0,16(sp)
   14faa:	|  |               clr.l 12(sp)
   14fae:	|  |               move.l 1c9a8 <SysBase>,d0
   14fb4:	|  |               movea.l d0,a6
   14fb6:	|  |               move.l 16(sp),d0
   14fba:	|  |               move.l 12(sp),d1
   14fbe:	|  |               jsr -684(a6)
   14fc2:	|  |               move.l d0,8(sp)
   14fc6:	|  |               move.l 8(sp),d0
   14fca:	|  |               move.l d0,4(sp)
			if (! buff) {
   14fce:	|  |           /-- bne.s 14fe4 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   14fd0:	|  |           |   pea 19fd2 <graphics.c.1c13408a+0x3ea>
   14fd6:	|  |           |   jsr 17232 <KPrintF>
   14fdc:	|  |           |   addq.l #4,sp
				return NULL;
   14fde:	|  |           |   moveq #0,d0
   14fe0:	|  +-----------|-- bra.w 15078 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   14fe4:	|  |           \-> movea.l 84(sp),a0
   14fe8:	|  |               move.l 4(a0),d0
   14fec:	|  |               move.l d0,-(sp)
   14fee:	|  |               pea 19ffc <newfatal.c.307beca7+0x14>
   14ff4:	|  |               move.l 12(sp),-(sp)
   14ff8:	|  |               jsr 13fdc <sprintf>
   14ffe:	|  |               lea 12(sp),sp
			return buff;
   15002:	|  |               move.l 4(sp),d0
   15006:	|  +-------------- bra.s 15078 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   15008:	|  |               movea.l 84(sp),a0
   1500c:	|  |               move.l 4(a0),d0
   15010:	|  |               move.l d0,-(sp)
   15012:	|  |               jsr 40fe <resourceNameFromNum>
   15018:	|  |               addq.l #4,sp
   1501a:	|  |               move.l d0,-(sp)
   1501c:	|  |               pea 189d1 <PutChar+0xcd5>
   15022:	|  |               jsr 13cfe <joinStrings>
   15028:	|  |               addq.l #8,sp
   1502a:	|  +-------------- bra.s 15078 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   1502c:	|  |               movea.l 84(sp),a0
   15030:	|  |               move.l 4(a0),d0
   15034:	|  |               move.l d0,-(sp)
   15036:	|  |               jsr d51c <findObjectType>
   1503c:	|  |               addq.l #4,sp
   1503e:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   15042:	+--|-------------- beq.s 15056 <getTextFromAnyVar+0x2ae>
   15044:	|  |               movea.l 40(sp),a0
   15048:	|  |               move.l (a0),d0
   1504a:	|  |               move.l d0,-(sp)
   1504c:	|  |               jsr b8 <copyString>
   15052:	|  |               addq.l #4,sp
   15054:	|  +-------------- bra.s 15078 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   15056:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   15058:	   |               movea.l 84(sp),a0
   1505c:	   |               move.l (a0),d0
   1505e:	   |               add.l d0,d0
   15060:	   |               movea.l d0,a1
   15062:	   |               adda.l d0,a1
   15064:	   |               lea 1c884 <typeName>,a0
   1506a:	   |               move.l (0,a1,a0.l),d0
   1506e:	   |               move.l d0,-(sp)
   15070:	   |               jsr b8 <copyString>
   15076:	   |               addq.l #4,sp
}
   15078:	   \-------------> movea.l (sp)+,a6
   1507a:	                   lea 76(sp),sp
   1507e:	                   rts

00015080 <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   15080:	move.l 4(sp),-(sp)
   15084:	jsr 14a20 <unlinkVar>
   1508a:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   1508c:	movea.l 4(sp),a0
   15090:	moveq #8,d0
   15092:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   15094:	movea.l 4(sp),a0
   15098:	move.l 8(sp),4(a0)
}
   1509e:	nop
   150a0:	rts

000150a2 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   150a2:	move.l 4(sp),-(sp)
   150a6:	jsr 14a20 <unlinkVar>
   150ac:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   150ae:	movea.l 4(sp),a0
   150b2:	moveq #9,d0
   150b4:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   150b6:	movea.l 4(sp),a0
   150ba:	move.l 8(sp),4(a0)
}
   150c0:	nop
   150c2:	rts

000150c4 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   150c4:	move.l 4(sp),-(sp)
   150c8:	jsr 14a20 <unlinkVar>
   150ce:	addq.l #4,sp
	thisVar->varType = vT;
   150d0:	movea.l 4(sp),a0
   150d4:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   150d8:	movea.l 4(sp),a0
   150dc:	move.l 12(sp),4(a0)
}
   150e2:	nop
   150e4:	rts

000150e6 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   150e6:	      /-- bra.s 150f8 <stackGetByIndex+0x12>
        vS = vS->next;
   150e8:	/-----|-> movea.l 4(sp),a0
   150ec:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   150f2:	|     +-- bne.s 150f8 <stackGetByIndex+0x12>
            return NULL;
   150f4:	|     |   moveq #0,d0
   150f6:	|  /--|-- bra.s 1510c <stackGetByIndex+0x26>
    while (theIndex--) {
   150f8:	|  |  \-> move.l 8(sp),d0
   150fc:	|  |      move.l d0,d1
   150fe:	|  |      subq.l #1,d1
   15100:	|  |      move.l d1,8(sp)
   15104:	|  |      tst.l d0
   15106:	\--|----- bne.s 150e8 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   15108:	   |      move.l 4(sp),d0
}
   1510c:	   \----> rts

0001510e <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   1510e:	          tst.l 4(sp)
   15112:	      /-- bne.s 15122 <stackFindLast+0x14>
		return NULL;
   15114:	      |   moveq #0,d0
   15116:	/-----|-- bra.s 15130 <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   15118:	|  /--|-> movea.l 4(sp),a0
   1511c:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   15122:	|  |  \-> movea.l 4(sp),a0
   15126:	|  |      move.l 8(a0),d0
   1512a:	|  \----- bne.s 15118 <stackFindLast+0xa>

	return hunt;
   1512c:	|         move.l 4(sp),d0
}
   15130:	\-------> rts

00015132 <stackSize>:

int stackSize (const struct stackHandler * me) {
   15132:	       subq.l #8,sp
	int r = 0;
   15134:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   15138:	       movea.l 12(sp),a0
   1513c:	       move.l (a0),(sp)
	while (a) {
   1513e:	   /-- bra.s 1514a <stackSize+0x18>
		r ++;
   15140:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   15144:	|  |   movea.l (sp),a0
   15146:	|  |   move.l 8(a0),(sp)
	while (a) {
   1514a:	|  \-> tst.l (sp)
   1514c:	\----- bne.s 15140 <stackSize+0xe>
	}
	return r;
   1514e:	       move.l 4(sp),d0
}
   15152:	       addq.l #8,sp
   15154:	       rts

00015156 <trimStack>:

void trimStack (struct variableStack ** stack) {
   15156:	subq.l #8,sp
   15158:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   1515a:	movea.l 16(sp),a0
   1515e:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   15162:	movea.l 16(sp),a0
   15166:	movea.l (a0),a0
   15168:	move.l 8(a0),d0
   1516c:	movea.l 16(sp),a0
   15170:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   15172:	move.l 8(sp),d0
   15176:	move.l d0,-(sp)
   15178:	jsr 14a20 <unlinkVar>
   1517e:	addq.l #4,sp
	FreeVec(killMe);
   15180:	move.l 8(sp),4(sp)
   15186:	move.l 1c9a8 <SysBase>,d0
   1518c:	movea.l d0,a6
   1518e:	movea.l 4(sp),a1
   15192:	jsr -690(a6)
   15196:	nop
   15198:	movea.l (sp)+,a6
   1519a:	addq.l #8,sp
   1519c:	rts

0001519e <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   1519e:	       lea -52(sp),sp
   151a2:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   151a4:	       pea 19fff <newfatal.c.307beca7+0x17>
   151aa:	       jsr 17232 <KPrintF>
   151b0:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   151b2:	       moveq #68,d0
   151b4:	       move.l d0,52(sp)
   151b8:	       clr.l 48(sp)
   151bc:	       move.l 1c9a8 <SysBase>,d0
   151c2:	       movea.l d0,a6
   151c4:	       move.l 52(sp),d0
   151c8:	       move.l 48(sp),d1
   151cc:	       jsr -684(a6)
   151d0:	       move.l d0,44(sp)
   151d4:	       move.l 44(sp),d0
   151d8:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   151dc:	   /-- bne.s 151e4 <freeze+0x46>
   151de:	   |   clr.w d0
   151e0:	/--|-- bra.w 1536e <freeze+0x1d0>

	CstFreeze();
   151e4:	|  \-> jsr 1d1a <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   151ea:	|      move.l 1ca44 <sceneWidth>,d0
   151f0:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   151f4:	|      move.l 1ca48 <sceneHeight>,d0
   151fa:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   151fe:	|      move.l 1ca44 <sceneWidth>,d0
   15204:	|      movea.l 40(sp),a0
   15208:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   1520c:	|      move.l 1ca48 <sceneHeight>,d0
   15212:	|      movea.l 40(sp),a0
   15216:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   1521a:	|      move.l 1ca62 <cameraX>,d0
   15220:	|      movea.l 40(sp),a0
   15224:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   15228:	|      move.l 1ca66 <cameraY>,d0
   1522e:	|      movea.l 40(sp),a0
   15232:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   15236:	|      move.l 1c346 <cameraZoom>,d0
   1523c:	|      movea.l 40(sp),a0
   15240:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   15244:	|      move.w #1,1ca50 <backdropExists>

	newFreezer -> allPeople = allPeople;
   1524c:	|      move.l 1ca0c <allPeople>,d0
   15252:	|      movea.l 40(sp),a0
   15256:	|      move.l d0,(a0)
	allPeople = NULL;
   15258:	|      clr.l 1ca0c <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   1525e:	|      moveq #42,d0
   15260:	|      move.l d0,28(sp)
   15264:	|      clr.l 24(sp)
   15268:	|      move.l 1c9a8 <SysBase>,d0
   1526e:	|      movea.l d0,a6
   15270:	|      move.l 28(sp),d0
   15274:	|      move.l 24(sp),d1
   15278:	|      jsr -684(a6)
   1527c:	|      move.l d0,20(sp)
   15280:	|      move.l 20(sp),d0
   15284:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   15288:	|  /-- bne.s 15290 <freeze+0xf2>
   1528a:	|  |   clr.w d0
   1528c:	+--|-- bra.w 1536e <freeze+0x1d0>

	newFreezer -> allScreenRegions = allScreenRegions;
   15290:	|  \-> move.l 1cab8 <allScreenRegions>,d0
   15296:	|      movea.l 40(sp),a0
   1529a:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   1529e:	|      clr.l 1cab8 <allScreenRegions>
	overRegion = NULL;
   152a4:	|      clr.l 1cabc <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   152aa:	|      move.l 1c8ae <mouseCursorAnim>,d0
   152b0:	|      movea.l 40(sp),a0
   152b4:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   152b8:	|      move.l 1c8b2 <mouseCursorFrameNum>,d0
   152be:	|      movea.l 40(sp),a0
   152c2:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   152c6:	|      jsr ad08 <makeNullAnim>
   152cc:	|      move.l d0,1c8ae <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   152d2:	|      clr.l 1c8b2 <mouseCursorFrameNum>

	newFreezer -> zBuffer = zBuffer;
   152d8:	|      move.l 1ca08 <zBuffer>,d0
   152de:	|      movea.l 40(sp),a0
   152e2:	|      move.l d0,60(a0)
	zBuffer = NULL;
   152e6:	|      clr.l 1ca08 <zBuffer>

	newFreezer -> speech = speech;
   152ec:	|      move.l 1ca04 <speech>,d0
   152f2:	|      movea.l 40(sp),a0
   152f6:	|      move.l d0,20(a0)
	initSpeech ();
   152fa:	|      jsr 7eaa <initSpeech>

	newFreezer -> currentEvents = (struct eventhandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   15300:	|      moveq #28,d0
   15302:	|      move.l d0,12(sp)
   15306:	|      clr.l 8(sp)
   1530a:	|      move.l 1c9a8 <SysBase>,d0
   15310:	|      movea.l d0,a6
   15312:	|      move.l 12(sp),d0
   15316:	|      move.l 8(sp),d1
   1531a:	|      jsr -684(a6)
   1531e:	|      move.l d0,4(sp)
   15322:	|      move.l 4(sp),d0
   15326:	|      movea.l 40(sp),a0
   1532a:	|      move.l d0,28(a0)
	if (!newFreezer -> currentEvents) return FALSE;
   1532e:	|      movea.l 40(sp),a0
   15332:	|      move.l 28(a0),d0
   15336:	|  /-- bne.s 1533c <freeze+0x19e>
   15338:	|  |   clr.w d0
   1533a:	+--|-- bra.s 1536e <freeze+0x1d0>
	memset (newFreezer -> currentEvents, 0, sizeof(struct eventHandlers));
   1533c:	|  \-> movea.l 40(sp),a0
   15340:	|      move.l 28(a0),d0
   15344:	|      pea 1c <_start+0x1c>
   15348:	|      clr.l -(sp)
   1534a:	|      move.l d0,-(sp)
   1534c:	|      jsr 171b6 <memset>
   15352:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   15356:	|      move.l 1ca9c <frozenStuff>,d0
   1535c:	|      movea.l 40(sp),a0
   15360:	|      move.l d0,64(a0)
	frozenStuff = newFreezer;
   15364:	|      move.l 40(sp),1ca9c <frozenStuff>

	return TRUE;
   1536c:	|      moveq #1,d0
}
   1536e:	\----> movea.l (sp)+,a6
   15370:	       lea 52(sp),sp
   15374:	       rts

00015376 <howFrozen>:

int howFrozen () {
   15376:	       subq.l #8,sp
	int a = 0;
   15378:	       clr.l 4(sp)
	struct frozenStuffStruct * f = frozenStuff;
   1537c:	       move.l 1ca9c <frozenStuff>,(sp)
	while (f) {
   15382:	   /-- bra.s 1538e <howFrozen+0x18>
		a ++;
   15384:	/--|-> addq.l #1,4(sp)
		f = f -> next;
   15388:	|  |   movea.l (sp),a0
   1538a:	|  |   move.l 64(a0),(sp)
	while (f) {
   1538e:	|  \-> tst.l (sp)
   15390:	\----- bne.s 15384 <howFrozen+0xe>
	}
	return a;
   15392:	       move.l 4(sp),d0
}
   15396:	       addq.l #8,sp
   15398:	       rts

0001539a <unfreeze>:

void unfreeze () {
   1539a:	       lea -16(sp),sp
   1539e:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   153a0:	       move.l 1ca9c <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   153a8:	       move.l 1ca9c <frozenStuff>,d0
   153ae:	/----- beq.w 155e6 <unfreeze+0x24c>

	CstUnfreeze();
   153b2:	|      jsr 3cf6 <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   153b8:	|      movea.l 1ca9c <frozenStuff>,a0
   153be:	|      move.l 48(a0),d0
   153c2:	|      move.l d0,1ca44 <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   153c8:	|      movea.l 1ca9c <frozenStuff>,a0
   153ce:	|      move.l 52(a0),d0
   153d2:	|      move.l d0,1ca48 <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   153d8:	|      movea.l 1ca9c <frozenStuff>,a0
   153de:	|      move.l 40(a0),d0
   153e2:	|      move.l d0,1ca62 <cameraX>
	cameraY = frozenStuff -> cameraY;
   153e8:	|      movea.l 1ca9c <frozenStuff>,a0
   153ee:	|      move.l 44(a0),d0
   153f2:	|      move.l d0,1ca66 <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   153f8:	|      move.l 1c964 <input+0xa>,d0
   153fe:	|      move.l d0,-(sp)
   15400:	|      jsr 17664 <__floatsisf>
   15406:	|      addq.l #4,sp
   15408:	|      move.l d0,d1
   1540a:	|      move.l 1c346 <cameraZoom>,d0
   15410:	|      move.l d0,-(sp)
   15412:	|      move.l d1,-(sp)
   15414:	|      jsr 17716 <__mulsf3>
   1541a:	|      addq.l #8,sp
   1541c:	|      move.l d0,-(sp)
   1541e:	|      jsr 175fc <__fixsfsi>
   15424:	|      addq.l #4,sp
   15426:	|      move.l d0,1c964 <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   1542c:	|      move.l 1c968 <input+0xe>,d0
   15432:	|      move.l d0,-(sp)
   15434:	|      jsr 17664 <__floatsisf>
   1543a:	|      addq.l #4,sp
   1543c:	|      move.l d0,d1
   1543e:	|      move.l 1c346 <cameraZoom>,d0
   15444:	|      move.l d0,-(sp)
   15446:	|      move.l d1,-(sp)
   15448:	|      jsr 17716 <__mulsf3>
   1544e:	|      addq.l #8,sp
   15450:	|      move.l d0,-(sp)
   15452:	|      jsr 175fc <__fixsfsi>
   15458:	|      addq.l #4,sp
   1545a:	|      move.l d0,1c968 <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   15460:	|      movea.l 1ca9c <frozenStuff>,a0
   15466:	|      move.l 56(a0),d0
   1546a:	|      move.l d0,1c346 <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   15470:	|      move.l 1c964 <input+0xa>,d0
   15476:	|      move.l d0,-(sp)
   15478:	|      jsr 17664 <__floatsisf>
   1547e:	|      addq.l #4,sp
   15480:	|      move.l d0,d1
   15482:	|      move.l 1c346 <cameraZoom>,d0
   15488:	|      move.l d0,-(sp)
   1548a:	|      move.l d1,-(sp)
   1548c:	|      jsr 1751a <__divsf3>
   15492:	|      addq.l #8,sp
   15494:	|      move.l d0,-(sp)
   15496:	|      jsr 175fc <__fixsfsi>
   1549c:	|      addq.l #4,sp
   1549e:	|      move.l d0,1c964 <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   154a4:	|      move.l 1c968 <input+0xe>,d0
   154aa:	|      move.l d0,-(sp)
   154ac:	|      jsr 17664 <__floatsisf>
   154b2:	|      addq.l #4,sp
   154b4:	|      move.l d0,d1
   154b6:	|      move.l 1c346 <cameraZoom>,d0
   154bc:	|      move.l d0,-(sp)
   154be:	|      move.l d1,-(sp)
   154c0:	|      jsr 1751a <__divsf3>
   154c6:	|      addq.l #8,sp
   154c8:	|      move.l d0,-(sp)
   154ca:	|      jsr 175fc <__fixsfsi>
   154d0:	|      addq.l #4,sp
   154d2:	|      move.l d0,1c968 <input+0xe>

	killAllPeople ();
   154d8:	|      jsr aa10 <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   154de:	|      movea.l 1ca9c <frozenStuff>,a0
   154e4:	|      move.l (a0),d0
   154e6:	|      move.l d0,1ca0c <allPeople>

	killAllRegions ();
   154ec:	|      jsr 15a42 <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   154f2:	|      movea.l 1ca9c <frozenStuff>,a0
   154f8:	|      move.l 4(a0),d0
   154fc:	|      move.l d0,1cab8 <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   15502:	|      move.l 1c8ae <mouseCursorAnim>,d0
   15508:	|      move.l d0,-(sp)
   1550a:	|      jsr 9904 <deleteAnim>
   15510:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   15512:	|      movea.l 1ca9c <frozenStuff>,a0
   15518:	|      move.l 32(a0),d0
   1551c:	|      move.l d0,1c8ae <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   15522:	|      movea.l 1ca9c <frozenStuff>,a0
   15528:	|      move.l 36(a0),d0
   1552c:	|      move.l d0,1c8b2 <mouseCursorFrameNum>

	killZBuffer ();
   15532:	|      jsr 871e <killZBuffer>
	zBuffer = frozenStuff->zBuffer;
   15538:	|      movea.l 1ca9c <frozenStuff>,a0
   1553e:	|      move.l 60(a0),d0
   15542:	|      move.l d0,1ca08 <zBuffer>

	if (currentEvents) FreeVec(currentEvents);
   15548:	|      move.l 1c320 <currentEvents>,d0
   1554e:	|  /-- beq.s 15568 <unfreeze+0x1ce>
   15550:	|  |   move.l 1c320 <currentEvents>,12(sp)
   15558:	|  |   move.l 1c9a8 <SysBase>,d0
   1555e:	|  |   movea.l d0,a6
   15560:	|  |   movea.l 12(sp),a1
   15564:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   15568:	|  \-> movea.l 1ca9c <frozenStuff>,a0
   1556e:	|      move.l 28(a0),d0
   15572:	|      move.l d0,1c320 <currentEvents>

	killAllSpeech ();
   15578:	|      jsr 7f42 <killAllSpeech>
	if (speech) FreeVec(speech);
   1557e:	|      move.l 1ca04 <speech>,d0
   15584:	|  /-- beq.s 1559e <unfreeze+0x204>
   15586:	|  |   move.l 1ca04 <speech>,8(sp)
   1558e:	|  |   move.l 1c9a8 <SysBase>,d0
   15594:	|  |   movea.l d0,a6
   15596:	|  |   movea.l 8(sp),a1
   1559a:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   1559e:	|  \-> movea.l 1ca9c <frozenStuff>,a0
   155a4:	|      move.l 20(a0),d0
   155a8:	|      move.l d0,1ca04 <speech>

	frozenStuff = frozenStuff -> next;
   155ae:	|      movea.l 1ca9c <frozenStuff>,a0
   155b4:	|      move.l 64(a0),d0
   155b8:	|      move.l d0,1ca9c <frozenStuff>

	overRegion = NULL;
   155be:	|      clr.l 1cabc <overRegion>
	if (killMe) FreeVec(killMe);
   155c4:	|      tst.l 16(sp)
   155c8:	|  /-- beq.s 155e0 <unfreeze+0x246>
   155ca:	|  |   move.l 16(sp),4(sp)
   155d0:	|  |   move.l 1c9a8 <SysBase>,d0
   155d6:	|  |   movea.l d0,a6
   155d8:	|  |   movea.l 4(sp),a1
   155dc:	|  |   jsr -690(a6)
	killMe = NULL;
   155e0:	|  \-> clr.l 16(sp)
   155e4:	|  /-- bra.s 155e8 <unfreeze+0x24e>
	if (! frozenStuff) return;
   155e6:	\--|-> nop
}
   155e8:	   \-> movea.l (sp)+,a6
   155ea:	       lea 16(sp),sp
   155ee:	       rts

000155f0 <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   155f0:	pea 1a011 <newfatal.c.307beca7+0x29>
   155f6:	jsr 17232 <KPrintF>
   155fc:	addq.l #4,sp
	return FALSE;
   155fe:	clr.w d0
}
   15600:	rts

00015602 <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   15602:	          lea -32(sp),sp
   15606:	          move.l a6,-(sp)
   15608:	          move.l d2,-(sp)
	unsigned int a = 0;
   1560a:	          clr.l 36(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   1560e:	          move.l 1caa8 <fontOrderString>,d0
   15614:	      /-- beq.s 1562e <loadFont+0x2c>
   15616:	      |   move.l 1caa8 <fontOrderString>,24(sp)
   1561e:	      |   move.l 1c9a8 <SysBase>,d0
   15624:	      |   movea.l d0,a6
   15626:	      |   movea.l 24(sp),a1
   1562a:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   1562e:	      \-> move.l 48(sp),-(sp)
   15632:	          jsr b8 <copyString>
   15638:	          addq.l #4,sp
   1563a:	          move.l d0,1caa8 <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);	
   15640:	          move.l 1cab4 <theFont>,d0
   15646:	      /-- beq.s 15658 <loadFont+0x56>
   15648:	      |   move.l 1cab4 <theFont>,d0
   1564e:	      |   move.l d0,-(sp)
   15650:	      |   jsr 8a5c <forgetSpriteBank>
   15656:	      |   addq.l #4,sp
	theFont = NULL;
   15658:	      \-> clr.l 1cab4 <theFont>

	loadedFontNum = filenum;
   1565e:	          move.l 44(sp),1caa4 <loadedFontNum>

	fontTableSize = 0;
   15666:	          clr.l 1cab0 <fontTableSize>
	char *tmp = charOrder;
   1566c:	          move.l 48(sp),32(sp)
	while (*tmp) {        
   15672:	   /----- bra.s 156ae <loadFont+0xac>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   15674:	/--|----> movea.l 32(sp),a0
   15678:	|  |      move.b (a0),d0
   1567a:	|  |      ext.w d0
   1567c:	|  |      movea.w d0,a0
   1567e:	|  |      move.l 1cab0 <fontTableSize>,d0
   15684:	|  |      move.l d0,d0
   15686:	|  |      move.b d0,d0
   15688:	|  |      andi.l #255,d0
   1568e:	|  |      cmp.l a0,d0
   15690:	|  |  /-- bge.s 156a2 <loadFont+0xa0>
   15692:	|  |  |   movea.l 32(sp),a0
   15696:	|  |  |   move.b (a0),d0
   15698:	|  |  |   ext.w d0
   1569a:	|  |  |   movea.w d0,a0
   1569c:	|  |  |   move.l a0,1cab0 <fontTableSize>
		*tmp++;
   156a2:	|  |  \-> move.l 32(sp),d0
   156a6:	|  |      move.l d0,d1
   156a8:	|  |      addq.l #1,d1
   156aa:	|  |      move.l d1,32(sp)
	while (*tmp) {        
   156ae:	|  \----> movea.l 32(sp),a0
   156b2:	|         move.b (a0),d0
   156b4:	\-------- bne.s 15674 <loadFont+0x72>
	}
	fontTableSize++;
   156b6:	          move.l 1cab0 <fontTableSize>,d0
   156bc:	          addq.l #1,d0
   156be:	          move.l d0,1cab0 <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   156c4:	          move.l 1caac <fontTable>,d0
   156ca:	      /-- beq.s 156e4 <loadFont+0xe2>
   156cc:	      |   move.l 1caac <fontTable>,20(sp)
   156d4:	      |   move.l 1c9a8 <SysBase>,d0
   156da:	      |   movea.l d0,a6
   156dc:	      |   movea.l 20(sp),a1
   156e0:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   156e4:	      \-> move.l 1cab0 <fontTableSize>,d0
   156ea:	          add.l d0,d0
   156ec:	          add.l d0,d0
   156ee:	          move.l d0,16(sp)
   156f2:	          clr.l 12(sp)
   156f6:	          move.l 1c9a8 <SysBase>,d0
   156fc:	          movea.l d0,a6
   156fe:	          move.l 16(sp),d0
   15702:	          move.l 12(sp),d1
   15706:	          jsr -684(a6)
   1570a:	          move.l d0,8(sp)
   1570e:	          move.l 8(sp),d0
   15712:	          move.l d0,1caac <fontTable>
	if (!fontTable) return FALSE;
   15718:	          move.l 1caac <fontTable>,d0
   1571e:	      /-- bne.s 15726 <loadFont+0x124>
   15720:	      |   clr.w d0
   15722:	/-----|-- bra.w 157cc <loadFont+0x1ca>

	for (a = 0;  a < fontTableSize; a++) {
   15726:	|     \-> clr.l 36(sp)
   1572a:	|     /-- bra.s 15744 <loadFont+0x142>
		fontTable[a] = 0;
   1572c:	|  /--|-> move.l 1caac <fontTable>,d1
   15732:	|  |  |   move.l 36(sp),d0
   15736:	|  |  |   add.l d0,d0
   15738:	|  |  |   add.l d0,d0
   1573a:	|  |  |   movea.l d1,a0
   1573c:	|  |  |   adda.l d0,a0
   1573e:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   15740:	|  |  |   addq.l #1,36(sp)
   15744:	|  |  \-> move.l 1cab0 <fontTableSize>,d0
   1574a:	|  |      cmp.l 36(sp),d0
   1574e:	|  \----- bhi.s 1572c <loadFont+0x12a>
	}
	a = 0;
   15750:	|         clr.l 36(sp)
	int i = 0;
   15754:	|         clr.l 28(sp)
	tmp = charOrder;
   15758:	|         move.l 48(sp),32(sp)
	while (*tmp) {
   1575e:	|     /-- bra.s 1578e <loadFont+0x18c>
		fontTable[*tmp++] = i;
   15760:	|  /--|-> move.l 1caac <fontTable>,d1
   15766:	|  |  |   move.l 32(sp),d0
   1576a:	|  |  |   move.l d0,d2
   1576c:	|  |  |   addq.l #1,d2
   1576e:	|  |  |   move.l d2,32(sp)
   15772:	|  |  |   movea.l d0,a0
   15774:	|  |  |   move.b (a0),d0
   15776:	|  |  |   ext.w d0
   15778:	|  |  |   movea.w d0,a0
   1577a:	|  |  |   move.l a0,d0
   1577c:	|  |  |   add.l a0,d0
   1577e:	|  |  |   add.l d0,d0
   15780:	|  |  |   movea.l d1,a0
   15782:	|  |  |   adda.l d0,a0
   15784:	|  |  |   move.l 28(sp),d0
   15788:	|  |  |   move.l d0,(a0)
		i++;
   1578a:	|  |  |   addq.l #1,28(sp)
	while (*tmp) {
   1578e:	|  |  \-> movea.l 32(sp),a0
   15792:	|  |      move.b (a0),d0
   15794:	|  \----- bne.s 15760 <loadFont+0x15e>
	}
	
	theFont = loadBankForAnim(filenum);
   15796:	|         move.l 44(sp),-(sp)
   1579a:	|         jsr 15f54 <loadBankForAnim>
   157a0:	|         addq.l #4,sp
   157a2:	|         move.l d0,1cab4 <theFont>
	if (!theFont) {
   157a8:	|         move.l 1cab4 <theFont>,d0
   157ae:	|     /-- bne.s 157c2 <loadFont+0x1c0>
		KPrintF("loadFont: Can't load font");
   157b0:	|     |   pea 1a038 <newfatal.c.307beca7+0x50>
   157b6:	|     |   jsr 17232 <KPrintF>
   157bc:	|     |   addq.l #4,sp
		return FALSE;
   157be:	|     |   clr.w d0
   157c0:	+-----|-- bra.s 157cc <loadFont+0x1ca>
	}
	fontHeight = h;
   157c2:	|     \-> move.l 52(sp),1caa0 <fontHeight>
	return TRUE;
   157ca:	|         moveq #1,d0
}
   157cc:	\-------> move.l (sp)+,d2
   157ce:	          movea.l (sp)+,a6
   157d0:	          lea 32(sp),sp
   157d4:	          rts

000157d6 <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   157d6:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   157da:	                clr.l 4(sp)

    if (!fontTableSize) return;
   157de:	                move.l 1cab0 <fontTableSize>,d0
   157e4:	/-------------- beq.w 158ac <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   157e8:	|               move.w 1c8ac <fontSpace>,d0
   157ee:	|               asr.w #1,d0
   157f0:	|               ext.l d0
   157f2:	|               add.l d0,20(sp)
	char *tmp = theText;
   157f6:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   157fc:	|     /-------- bra.w 158a0 <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   15800:	|  /--|-------> movea.l 1cab4 <theFont>,a0
   15806:	|  |  |         movea.l 16(a0),a0
   1580a:	|  |  |         movea.l 8(sp),a1
   1580e:	|  |  |         move.b (a1),d0
   15810:	|  |  |         move.b d0,d0
   15812:	|  |  |         andi.l #255,d0
   15818:	|  |  |         move.l 1cab0 <fontTableSize>,d1
   1581e:	|  |  |         cmp.l d0,d1
   15820:	|  |  |  /----- bls.s 1584c <pasteStringToBackdrop+0x76>
   15822:	|  |  |  |      move.l 1caac <fontTable>,d1
   15828:	|  |  |  |      movea.l 8(sp),a1
   1582c:	|  |  |  |      move.b (a1),d0
   1582e:	|  |  |  |      move.b d0,d0
   15830:	|  |  |  |      andi.l #255,d0
   15836:	|  |  |  |      add.l d0,d0
   15838:	|  |  |  |      add.l d0,d0
   1583a:	|  |  |  |      movea.l d1,a1
   1583c:	|  |  |  |      adda.l d0,a1
   1583e:	|  |  |  |      move.l (a1),d1
   15840:	|  |  |  |      move.l d1,d0
   15842:	|  |  |  |      lsl.l #3,d0
   15844:	|  |  |  |      sub.l d1,d0
   15846:	|  |  |  |      add.l d0,d0
   15848:	|  |  |  |      add.l d0,d0
   1584a:	|  |  |  |  /-- bra.s 1584e <pasteStringToBackdrop+0x78>
   1584c:	|  |  |  \--|-> moveq #0,d0
   1584e:	|  |  |     \-> adda.l d0,a0
   15850:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   15852:	|  |  |         move.l 24(sp),d1
   15856:	|  |  |         movea.l (sp),a0
   15858:	|  |  |         move.l 12(a0),d0
   1585c:	|  |  |         move.l d0,d0
   1585e:	|  |  |         sub.w d0,d1
   15860:	|  |  |         move.w d1,d0
   15862:	|  |  |         movea.w d0,a1
   15864:	|  |  |         move.l 20(sp),d1
   15868:	|  |  |         movea.l (sp),a0
   1586a:	|  |  |         move.l 8(a0),d0
   1586e:	|  |  |         move.l d0,d0
   15870:	|  |  |         sub.w d0,d1
   15872:	|  |  |         move.w d1,d0
   15874:	|  |  |         movea.w d0,a0
   15876:	|  |  |         move.l a1,-(sp)
   15878:	|  |  |         move.l a0,-(sp)
   1587a:	|  |  |         move.l 8(sp),-(sp)
   1587e:	|  |  |         jsr 23bc <CstPasteChar>
   15884:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   15888:	|  |  |         movea.l (sp),a0
   1588a:	|  |  |         move.l (a0),d1
   1588c:	|  |  |         move.w 1c8ac <fontSpace>,d0
   15892:	|  |  |         movea.w d0,a0
   15894:	|  |  |         move.l d1,d0
   15896:	|  |  |         add.l a0,d0
   15898:	|  |  |         add.l d0,20(sp)
		tmp++;
   1589c:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   158a0:	|  |  \-------> movea.l 8(sp),a0
   158a4:	|  |            move.b (a0),d0
   158a6:	|  \----------- bne.w 15800 <pasteStringToBackdrop+0x2a>
   158aa:	|           /-- bra.s 158ae <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   158ac:	\-----------|-> nop
    }
}
   158ae:	            \-> lea 12(sp),sp
   158b2:	                rts

000158b4 <stringWidth>:


int stringWidth (char * theText) {
   158b4:	       subq.l #8,sp
	int a = 0;
   158b6:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   158ba:	       clr.l (sp)

	if (! fontTableSize) return 0;
   158bc:	       move.l 1cab0 <fontTableSize>,d0
   158c2:	/----- bne.s 158c8 <stringWidth+0x14>
   158c4:	|      moveq #0,d0
   158c6:	|  /-- bra.s 158ca <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   158c8:	\--|-> move.l (sp),d0
}
   158ca:	   \-> addq.l #8,sp
   158cc:	       rts

000158ce <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   158ce:	       lea -16(sp),sp
   158d2:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   158d4:	       moveq #36,d0
   158d6:	       move.l d0,16(sp)
   158da:	       clr.l 12(sp)
   158de:	       move.l 1c9a8 <SysBase>,d0
   158e4:	       movea.l d0,a6
   158e6:	       move.l 16(sp),d0
   158ea:	       move.l 12(sp),d1
   158ee:	       jsr -684(a6)
   158f2:	       move.l d0,8(sp)
   158f6:	       move.l 8(sp),d0
   158fa:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   158fe:	   /-- bne.s 15906 <addScreenRegion+0x38>
   15900:	   |   clr.w d0
   15902:	/--|-- bra.w 15986 <addScreenRegion+0xb8>
    newRegion->di = di;
   15906:	|  \-> movea.l 4(sp),a0
   1590a:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   15910:	|      movea.l 4(sp),a0
   15914:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   15918:	|      movea.l 4(sp),a0
   1591c:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   15922:	|      movea.l 4(sp),a0
   15926:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   1592c:	|      movea.l 4(sp),a0
   15930:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   15936:	|      movea.l 4(sp),a0
   1593a:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   15940:	|      movea.l 4(sp),a0
   15944:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   1594a:	|      move.l 52(sp),-(sp)
   1594e:	|      jsr d60c <loadObjectType>
   15954:	|      addq.l #4,sp
   15956:	|      movea.l 4(sp),a0
   1595a:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   1595e:	|      move.l 1cab8 <allScreenRegions>,d0
   15964:	|      movea.l 4(sp),a0
   15968:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   1596c:	|      move.l 4(sp),1cab8 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   15974:	|      movea.l 4(sp),a0
   15978:	|      move.l 28(a0),d0
   1597c:	|      sne d0
   1597e:	|      neg.b d0
   15980:	|      move.b d0,d0
   15982:	|      andi.w #255,d0
}
   15986:	\----> movea.l (sp)+,a6
   15988:	       lea 16(sp),sp
   1598c:	       rts

0001598e <getOverRegion>:

void getOverRegion () {
   1598e:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15990:	             move.l 1cab8 <allScreenRegions>,(sp)
	while (thisRegion) {
   15996:	   /-------- bra.s 15a04 <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15998:	/--|-------> move.l 1c964 <input+0xa>,d0
   1599e:	|  |         movea.l (sp),a0
   159a0:	|  |         movea.l (a0),a0
   159a2:	|  |         move.l 1ca62 <cameraX>,d1
   159a8:	|  |         suba.l d1,a0
   159aa:	|  |         cmpa.l d0,a0
   159ac:	|  |  /----- bgt.s 159fe <getOverRegion+0x70>
   159ae:	|  |  |      move.l 1c968 <input+0xe>,d0
   159b4:	|  |  |      movea.l (sp),a0
   159b6:	|  |  |      movea.l 4(a0),a0
   159ba:	|  |  |      move.l 1ca66 <cameraY>,d1
   159c0:	|  |  |      suba.l d1,a0
   159c2:	|  |  |      cmpa.l d0,a0
   159c4:	|  |  +----- bgt.s 159fe <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   159c6:	|  |  |      move.l 1c964 <input+0xa>,d0
   159cc:	|  |  |      movea.l (sp),a0
   159ce:	|  |  |      movea.l 8(a0),a0
   159d2:	|  |  |      move.l 1ca62 <cameraX>,d1
   159d8:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   159da:	|  |  |      cmpa.l d0,a0
   159dc:	|  |  +----- blt.s 159fe <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   159de:	|  |  |      move.l 1c968 <input+0xe>,d0
   159e4:	|  |  |      movea.l (sp),a0
   159e6:	|  |  |      movea.l 12(a0),a0
   159ea:	|  |  |      move.l 1ca66 <cameraY>,d1
   159f0:	|  |  |      suba.l d1,a0
   159f2:	|  |  |      cmpa.l d0,a0
   159f4:	|  |  +----- blt.s 159fe <getOverRegion+0x70>
			overRegion = thisRegion;
   159f6:	|  |  |      move.l (sp),1cabc <overRegion>
			return;
   159fc:	|  |  |  /-- bra.s 15a10 <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   159fe:	|  |  \--|-> movea.l (sp),a0
   15a00:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   15a04:	|  \-----|-> tst.l (sp)
   15a06:	\--------|-- bne.s 15998 <getOverRegion+0xa>
	}
	overRegion = NULL;
   15a08:	         |   clr.l 1cabc <overRegion>
	return;
   15a0e:	         |   nop
}
   15a10:	         \-> addq.l #4,sp
   15a12:	             rts

00015a14 <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   15a14:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15a16:	             move.l 1cab8 <allScreenRegions>,(sp)

	while (thisRegion) {
   15a1c:	   /-------- bra.s 15a38 <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   15a1e:	/--|-------> movea.l (sp),a0
   15a20:	|  |         movea.l 28(a0),a0
   15a24:	|  |         move.l 4(a0),d0
   15a28:	|  |         cmp.l 8(sp),d0
   15a2c:	|  |     /-- bne.s 15a32 <getRegionForObject+0x1e>
			return thisRegion;
   15a2e:	|  |     |   move.l (sp),d0
   15a30:	|  |  /--|-- bra.s 15a3e <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   15a32:	|  |  |  \-> movea.l (sp),a0
   15a34:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   15a38:	|  \--|----> tst.l (sp)
   15a3a:	\-----|----- bne.s 15a1e <getRegionForObject+0xa>
	}

	return NULL;
   15a3c:	      |      moveq #0,d0
}
   15a3e:	      \----> addq.l #4,sp
   15a40:	             rts

00015a42 <killAllRegions>:

void killAllRegions () {
   15a42:	       subq.l #8,sp
   15a44:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   15a46:	   /-- bra.s 15a88 <killAllRegions+0x46>
		killRegion = allScreenRegions;
   15a48:	/--|-> move.l 1cab8 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   15a50:	|  |   movea.l 1cab8 <allScreenRegions>,a0
   15a56:	|  |   move.l 32(a0),d0
   15a5a:	|  |   move.l d0,1cab8 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   15a60:	|  |   movea.l 8(sp),a0
   15a64:	|  |   move.l 28(a0),d0
   15a68:	|  |   move.l d0,-(sp)
   15a6a:	|  |   jsr d8c4 <removeObjectType>
   15a70:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   15a72:	|  |   move.l 8(sp),4(sp)
   15a78:	|  |   move.l 1c9a8 <SysBase>,d0
   15a7e:	|  |   movea.l d0,a6
   15a80:	|  |   movea.l 4(sp),a1
   15a84:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   15a88:	|  \-> move.l 1cab8 <allScreenRegions>,d0
   15a8e:	\----- bne.s 15a48 <killAllRegions+0x6>
	}
	overRegion = NULL;
   15a90:	       clr.l 1cabc <overRegion>
}
   15a96:	       nop
   15a98:	       movea.l (sp)+,a6
   15a9a:	       addq.l #8,sp
   15a9c:	       rts

00015a9e <loadRegions>:

void loadRegions (BPTR fp) {
   15a9e:	       lea -24(sp),sp
   15aa2:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   15aa4:	       move.l 32(sp),-(sp)
   15aa8:	       jsr 6bc <get2bytes>
   15aae:	       addq.l #4,sp
   15ab0:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   15ab4:	       move.l #117432,20(sp)

	while (numRegions --) {
   15abc:	   /-- bra.w 15b9a <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   15ac0:	/--|-> moveq #36,d0
   15ac2:	|  |   move.l d0,16(sp)
   15ac6:	|  |   clr.l 12(sp)
   15aca:	|  |   move.l 1c9a8 <SysBase>,d0
   15ad0:	|  |   movea.l d0,a6
   15ad2:	|  |   move.l 16(sp),d0
   15ad6:	|  |   move.l 12(sp),d1
   15ada:	|  |   jsr -684(a6)
   15ade:	|  |   move.l d0,8(sp)
   15ae2:	|  |   move.l 8(sp),d0
   15ae6:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   15aea:	|  |   movea.l 20(sp),a0
   15aee:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   15af2:	|  |   moveq #32,d1
   15af4:	|  |   add.l 4(sp),d1
   15af8:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   15afc:	|  |   move.l 32(sp),-(sp)
   15b00:	|  |   jsr 6bc <get2bytes>
   15b06:	|  |   addq.l #4,sp
   15b08:	|  |   movea.l 4(sp),a0
   15b0c:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   15b0e:	|  |   move.l 32(sp),-(sp)
   15b12:	|  |   jsr 6bc <get2bytes>
   15b18:	|  |   addq.l #4,sp
   15b1a:	|  |   movea.l 4(sp),a0
   15b1e:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   15b22:	|  |   move.l 32(sp),-(sp)
   15b26:	|  |   jsr 6bc <get2bytes>
   15b2c:	|  |   addq.l #4,sp
   15b2e:	|  |   movea.l 4(sp),a0
   15b32:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   15b36:	|  |   move.l 32(sp),-(sp)
   15b3a:	|  |   jsr 6bc <get2bytes>
   15b40:	|  |   addq.l #4,sp
   15b42:	|  |   movea.l 4(sp),a0
   15b46:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   15b4a:	|  |   move.l 32(sp),-(sp)
   15b4e:	|  |   jsr 6bc <get2bytes>
   15b54:	|  |   addq.l #4,sp
   15b56:	|  |   movea.l 4(sp),a0
   15b5a:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   15b5e:	|  |   move.l 32(sp),-(sp)
   15b62:	|  |   jsr 6bc <get2bytes>
   15b68:	|  |   addq.l #4,sp
   15b6a:	|  |   movea.l 4(sp),a0
   15b6e:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   15b72:	|  |   move.l 32(sp),-(sp)
   15b76:	|  |   jsr 6bc <get2bytes>
   15b7c:	|  |   addq.l #4,sp
   15b7e:	|  |   movea.l 4(sp),a0
   15b82:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   15b86:	|  |   move.l 32(sp),-(sp)
   15b8a:	|  |   jsr d5ba <loadObjectRef>
   15b90:	|  |   addq.l #4,sp
   15b92:	|  |   movea.l 4(sp),a0
   15b96:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   15b9a:	|  \-> move.l 24(sp),d0
   15b9e:	|      move.l d0,d1
   15ba0:	|      subq.l #1,d1
   15ba2:	|      move.l d1,24(sp)
   15ba6:	|      tst.l d0
   15ba8:	\----- bne.w 15ac0 <loadRegions+0x22>
	}
	* pointy = NULL;
   15bac:	       movea.l 20(sp),a0
   15bb0:	       clr.l (a0)
}
   15bb2:	       nop
   15bb4:	       movea.l (sp)+,a6
   15bb6:	       lea 24(sp),sp
   15bba:	       rts

00015bbc <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   15bbc:	             lea -12(sp),sp
   15bc0:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   15bc2:	             move.l #117432,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   15bca:	   /-------- bra.s 15c44 <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   15bcc:	/--|-------> movea.l 12(sp),a0
   15bd0:	|  |         movea.l (a0),a0
   15bd2:	|  |         movea.l 28(a0),a0
   15bd6:	|  |         move.l 4(a0),d0
   15bda:	|  |         cmp.l 20(sp),d0
   15bde:	|  |  /----- bne.s 15c36 <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   15be0:	|  |  |      movea.l 12(sp),a0
   15be4:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   15be8:	|  |  |      movea.l 8(sp),a0
   15bec:	|  |  |      move.l 32(a0),d0
   15bf0:	|  |  |      movea.l 12(sp),a0
   15bf4:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   15bf6:	|  |  |      movea.l 8(sp),a0
   15bfa:	|  |  |      move.l 28(a0),d0
   15bfe:	|  |  |      move.l d0,-(sp)
   15c00:	|  |  |      jsr d8c4 <removeObjectType>
   15c06:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   15c08:	|  |  |      move.l 1cabc <overRegion>,d0
   15c0e:	|  |  |      cmp.l 8(sp),d0
   15c12:	|  |  |  /-- bne.s 15c1a <removeScreenRegion+0x5e>
   15c14:	|  |  |  |   clr.l 1cabc <overRegion>
            FreeVec(killMe);
   15c1a:	|  |  |  \-> move.l 8(sp),4(sp)
   15c20:	|  |  |      move.l 1c9a8 <SysBase>,d0
   15c26:	|  |  |      movea.l d0,a6
   15c28:	|  |  |      movea.l 4(sp),a1
   15c2c:	|  |  |      jsr -690(a6)
            killMe = NULL;
   15c30:	|  |  |      clr.l 8(sp)
   15c34:	|  +--|----- bra.s 15c44 <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   15c36:	|  |  \----> movea.l 12(sp),a0
   15c3a:	|  |         move.l (a0),d0
   15c3c:	|  |         moveq #32,d1
   15c3e:	|  |         add.l d0,d1
   15c40:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   15c44:	|  \-------> movea.l 12(sp),a0
   15c48:	|            move.l (a0),d0
   15c4a:	\----------- bne.s 15bcc <removeScreenRegion+0x10>
        }
    }
}
   15c4c:	             nop
   15c4e:	             nop
   15c50:	             movea.l (sp)+,a6
   15c52:	             lea 12(sp),sp
   15c56:	             rts

00015c58 <saveRegions>:

void saveRegions (BPTR fp) {
   15c58:	       subq.l #8,sp
	int numRegions = 0;
   15c5a:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   15c5e:	       move.l 1cab8 <allScreenRegions>,(sp)
	while (thisRegion) {
   15c64:	   /-- bra.s 15c70 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   15c66:	/--|-> movea.l (sp),a0
   15c68:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   15c6c:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   15c70:	|  \-> tst.l (sp)
   15c72:	\----- bne.s 15c66 <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   15c74:	       move.l 12(sp),-(sp)
   15c78:	       move.l 8(sp),-(sp)
   15c7c:	       jsr 8d0 <put2bytes>
   15c82:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   15c84:	       move.l 1cab8 <allScreenRegions>,(sp)
	while (thisRegion) {
   15c8a:	/----- bra.w 15d32 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   15c8e:	|  /-> movea.l (sp),a0
   15c90:	|  |   move.l (a0),d0
   15c92:	|  |   move.l 12(sp),-(sp)
   15c96:	|  |   move.l d0,-(sp)
   15c98:	|  |   jsr 8d0 <put2bytes>
   15c9e:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   15ca0:	|  |   movea.l (sp),a0
   15ca2:	|  |   move.l 4(a0),d0
   15ca6:	|  |   move.l 12(sp),-(sp)
   15caa:	|  |   move.l d0,-(sp)
   15cac:	|  |   jsr 8d0 <put2bytes>
   15cb2:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   15cb4:	|  |   movea.l (sp),a0
   15cb6:	|  |   move.l 8(a0),d0
   15cba:	|  |   move.l 12(sp),-(sp)
   15cbe:	|  |   move.l d0,-(sp)
   15cc0:	|  |   jsr 8d0 <put2bytes>
   15cc6:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   15cc8:	|  |   movea.l (sp),a0
   15cca:	|  |   move.l 12(a0),d0
   15cce:	|  |   move.l 12(sp),-(sp)
   15cd2:	|  |   move.l d0,-(sp)
   15cd4:	|  |   jsr 8d0 <put2bytes>
   15cda:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   15cdc:	|  |   movea.l (sp),a0
   15cde:	|  |   move.l 16(a0),d0
   15ce2:	|  |   move.l 12(sp),-(sp)
   15ce6:	|  |   move.l d0,-(sp)
   15ce8:	|  |   jsr 8d0 <put2bytes>
   15cee:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   15cf0:	|  |   movea.l (sp),a0
   15cf2:	|  |   move.l 20(a0),d0
   15cf6:	|  |   move.l 12(sp),-(sp)
   15cfa:	|  |   move.l d0,-(sp)
   15cfc:	|  |   jsr 8d0 <put2bytes>
   15d02:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   15d04:	|  |   movea.l (sp),a0
   15d06:	|  |   move.l 24(a0),d0
   15d0a:	|  |   move.l 12(sp),-(sp)
   15d0e:	|  |   move.l d0,-(sp)
   15d10:	|  |   jsr 8d0 <put2bytes>
   15d16:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   15d18:	|  |   movea.l (sp),a0
   15d1a:	|  |   move.l 28(a0),d0
   15d1e:	|  |   move.l 12(sp),-(sp)
   15d22:	|  |   move.l d0,-(sp)
   15d24:	|  |   jsr d964 <saveObjectRef>
   15d2a:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   15d2c:	|  |   movea.l (sp),a0
   15d2e:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   15d32:	\--|-> tst.l (sp)
   15d34:	   \-- bne.w 15c8e <saveRegions+0x36>
	}
}
   15d38:	       nop
   15d3a:	       nop
   15d3c:	       addq.l #8,sp
   15d3e:	       rts

00015d40 <showBoxes>:

void showBoxes () {
   15d40:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   15d42:	       move.l 1cab8 <allScreenRegions>,(sp)

	while (huntRegion) {
   15d48:	/----- bra.w 15de4 <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   15d4c:	|  /-> movea.l (sp),a0
   15d4e:	|  |   move.l 12(a0),d0
   15d52:	|  |   movea.l d0,a1
   15d54:	|  |   movea.l (sp),a0
   15d56:	|  |   move.l 4(a0),d0
   15d5a:	|  |   move.l d0,d1
   15d5c:	|  |   movea.l (sp),a0
   15d5e:	|  |   move.l (a0),d0
   15d60:	|  |   move.l a1,-(sp)
   15d62:	|  |   move.l d1,-(sp)
   15d64:	|  |   move.l d0,-(sp)
   15d66:	|  |   jsr d248 <drawVerticalLine>
   15d6c:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   15d70:	|  |   movea.l (sp),a0
   15d72:	|  |   move.l 12(a0),d0
   15d76:	|  |   movea.l d0,a1
   15d78:	|  |   movea.l (sp),a0
   15d7a:	|  |   move.l 4(a0),d0
   15d7e:	|  |   move.l d0,d1
   15d80:	|  |   movea.l (sp),a0
   15d82:	|  |   move.l 8(a0),d0
   15d86:	|  |   move.l a1,-(sp)
   15d88:	|  |   move.l d1,-(sp)
   15d8a:	|  |   move.l d0,-(sp)
   15d8c:	|  |   jsr d248 <drawVerticalLine>
   15d92:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   15d96:	|  |   movea.l (sp),a0
   15d98:	|  |   move.l 8(a0),d0
   15d9c:	|  |   movea.l d0,a1
   15d9e:	|  |   movea.l (sp),a0
   15da0:	|  |   move.l 4(a0),d0
   15da4:	|  |   move.l d0,d1
   15da6:	|  |   movea.l (sp),a0
   15da8:	|  |   move.l (a0),d0
   15daa:	|  |   move.l a1,-(sp)
   15dac:	|  |   move.l d1,-(sp)
   15dae:	|  |   move.l d0,-(sp)
   15db0:	|  |   jsr d222 <drawHorizontalLine>
   15db6:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   15dba:	|  |   movea.l (sp),a0
   15dbc:	|  |   move.l 8(a0),d0
   15dc0:	|  |   movea.l d0,a1
   15dc2:	|  |   movea.l (sp),a0
   15dc4:	|  |   move.l 12(a0),d0
   15dc8:	|  |   move.l d0,d1
   15dca:	|  |   movea.l (sp),a0
   15dcc:	|  |   move.l (a0),d0
   15dce:	|  |   move.l a1,-(sp)
   15dd0:	|  |   move.l d1,-(sp)
   15dd2:	|  |   move.l d0,-(sp)
   15dd4:	|  |   jsr d222 <drawHorizontalLine>
   15dda:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   15dde:	|  |   movea.l (sp),a0
   15de0:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   15de4:	\--|-> tst.l (sp)
   15de6:	   \-- bne.w 15d4c <showBoxes+0xc>
	}
   15dea:	       nop
   15dec:	       nop
   15dee:	       addq.l #4,sp
   15df0:	       rts

00015df2 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   15df2:	       lea -88(sp),sp
   15df6:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   15df8:	       move.l 1c9a8 <SysBase>,d0
   15dfe:	       movea.l d0,a6
   15e00:	       jsr -666(a6)
   15e04:	       move.l d0,88(sp)
   15e08:	       move.l 88(sp),d0
   15e0c:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   15e10:	       move.l 84(sp),80(sp)
   15e16:	       moveq #40,d0
   15e18:	       move.l d0,76(sp)
   15e1c:	       move.l 1c9a8 <SysBase>,d0
   15e22:	       movea.l d0,a6
   15e24:	       movea.l 80(sp),a0
   15e28:	       move.l 76(sp),d0
   15e2c:	       jsr -654(a6)
   15e30:	       move.l d0,72(sp)
   15e34:	       move.l 72(sp),d0
   15e38:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   15e3c:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   15e42:	       move.l #106578,60(sp)
   15e4a:	       clr.l 56(sp)
   15e4e:	       move.l 64(sp),52(sp)
   15e54:	       clr.l 48(sp)
   15e58:	       move.l 1c9a8 <SysBase>,d0
   15e5e:	       movea.l d0,a6
   15e60:	       movea.l 60(sp),a0
   15e64:	       move.l 56(sp),d0
   15e68:	       movea.l 52(sp),a1
   15e6c:	       move.l 48(sp),d1
   15e70:	       jsr -444(a6)
   15e74:	       move.b d0,47(sp)
   15e78:	       move.b 47(sp),d0
   15e7c:	   /-- beq.s 15e92 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   15e7e:	   |   pea 1a05f <newfatal.c.307beca7+0x77>
   15e84:	   |   jsr 17232 <KPrintF>
   15e8a:	   |   addq.l #4,sp
        return 0;
   15e8c:	   |   moveq #0,d0
   15e8e:	/--|-- bra.w 15f4c <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   15e92:	|  \-> movea.l 64(sp),a0
   15e96:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   15e9c:	|      lea 92(sp),a0
   15ea0:	|      lea -86(a0),a0
   15ea4:	|      move.l a0,38(sp)
   15ea8:	|      movea.l 42(sp),a6
   15eac:	|      movea.l 38(sp),a0
   15eb0:	|      jsr -60(a6)
   15eb4:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   15eb8:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   15ebe:	|      move.l #1103515245,-(sp)
   15ec4:	|      move.l 34(sp),-(sp)
   15ec8:	|      jsr 17be6 <__mulsi3>
   15ece:	|      addq.l #8,sp
   15ed0:	|      addi.l #12345,d0
   15ed6:	|      move.l d0,d1
   15ed8:	|      bclr #31,d1
   15edc:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   15ee0:	|      move.l 30(sp),d0
   15ee4:	|      pea 64 <_start+0x64>
   15ee8:	|      move.l d0,-(sp)
   15eea:	|      jsr 17cc0 <__umodsi3>
   15ef0:	|      addq.l #8,sp
   15ef2:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   15ef6:	|      move.l 26(sp),-(sp)
   15efa:	|      pea 1a07c <newfatal.c.307beca7+0x94>
   15f00:	|      jsr 17232 <KPrintF>
   15f06:	|      addq.l #8,sp

    CloseDevice(ioreq);
   15f08:	|      move.l 64(sp),22(sp)
   15f0e:	|      move.l 1c9a8 <SysBase>,d0
   15f14:	|      movea.l d0,a6
   15f16:	|      movea.l 22(sp),a1
   15f1a:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   15f1e:	|      move.l 64(sp),18(sp)
   15f24:	|      move.l 1c9a8 <SysBase>,d0
   15f2a:	|      movea.l d0,a6
   15f2c:	|      movea.l 18(sp),a0
   15f30:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   15f34:	|      move.l 84(sp),14(sp)
   15f3a:	|      move.l 1c9a8 <SysBase>,d0
   15f40:	|      movea.l d0,a6
   15f42:	|      movea.l 14(sp),a0
   15f46:	|      jsr -672(a6)
    return 0;
   15f4a:	|      moveq #0,d0
   15f4c:	\----> movea.l (sp)+,a6
   15f4e:	       lea 88(sp),sp
   15f52:	       rts

00015f54 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   15f54:	             lea -20(sp),sp
   15f58:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   15f5a:	             move.l 1cac0 <allLoadedBanks>,20(sp)
	while (returnMe) {
   15f62:	      /----- bra.s 15f94 <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   15f64:	   /--|----> movea.l 20(sp),a0
   15f68:	   |  |      move.l (a0),d0
   15f6a:	   |  |      cmp.l 28(sp),d0
   15f6e:	   |  |  /-- bne.s 15f8a <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   15f70:	   |  |  |   movea.l 20(sp),a0
   15f74:	   |  |  |   move.l 4(a0),d0
   15f78:	   |  |  |   addq.l #1,d0
   15f7a:	   |  |  |   movea.l 20(sp),a0
   15f7e:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   15f82:	   |  |  |   move.l 20(sp),d0
   15f86:	/--|--|--|-- bra.w 16044 <loadBankForAnim+0xf0>
		}		
		returnMe = returnMe->next;
   15f8a:	|  |  |  \-> movea.l 20(sp),a0
   15f8e:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   15f94:	|  |  \----> tst.l 20(sp)
   15f98:	|  \-------- bne.s 15f64 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   15f9a:	|            moveq #26,d0
   15f9c:	|            move.l d0,16(sp)
   15fa0:	|            clr.l 12(sp)
   15fa4:	|            move.l 1c9a8 <SysBase>,d0
   15faa:	|            movea.l d0,a6
   15fac:	|            move.l 16(sp),d0
   15fb0:	|            move.l 12(sp),d1
   15fb4:	|            jsr -684(a6)
   15fb8:	|            move.l d0,8(sp)
   15fbc:	|            move.l 8(sp),d0
   15fc0:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   15fc4:	|     /----- beq.s 16042 <loadBankForAnim+0xee>
		returnMe->ID = ID;
   15fc6:	|     |      movea.l 20(sp),a0
   15fca:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank)) {
   15fce:	|     |      move.l 20(sp),d0
   15fd2:	|     |      addq.l #8,d0
   15fd4:	|     |      move.l d0,-(sp)
   15fd6:	|     |      move.l 32(sp),-(sp)
   15fda:	|     |      jsr 8b68 <loadSpriteBank>
   15fe0:	|     |      addq.l #8,sp
   15fe2:	|     |      tst.w d0
   15fe4:	|     |  /-- beq.s 1601a <loadBankForAnim+0xc6>
			returnMe->timesUsed = 1;
   15fe6:	|     |  |   movea.l 20(sp),a0
   15fea:	|     |  |   moveq #1,d0
   15fec:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   15ff0:	|     |  |   move.l 1cac0 <allLoadedBanks>,d0
   15ff6:	|     |  |   movea.l 20(sp),a0
   15ffa:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   15ffe:	|     |  |   move.l 20(sp),1cac0 <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
   16006:	|     |  |   pea 1a08f <newfatal.c.307beca7+0xa7>
   1600c:	|     |  |   jsr 17232 <KPrintF>
   16012:	|     |  |   addq.l #4,sp
			return returnMe;
   16014:	|     |  |   move.l 20(sp),d0
   16018:	+-----|--|-- bra.s 16044 <loadBankForAnim+0xf0>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
   1601a:	|     |  \-> pea 1a0bc <newfatal.c.307beca7+0xd4>
   16020:	|     |      jsr 17232 <KPrintF>
   16026:	|     |      addq.l #4,sp
			FreeVec(returnMe);
   16028:	|     |      move.l 20(sp),4(sp)
   1602e:	|     |      move.l 1c9a8 <SysBase>,d0
   16034:	|     |      movea.l d0,a6
   16036:	|     |      movea.l 4(sp),a1
   1603a:	|     |      jsr -690(a6)
			return NULL;
   1603e:	|     |      moveq #0,d0
   16040:	+-----|----- bra.s 16044 <loadBankForAnim+0xf0>
		}
	} else return NULL;
   16042:	|     \----> moveq #0,d0
}
   16044:	\----------> movea.l (sp)+,a6
   16046:	             lea 20(sp),sp
   1604a:	             rts

0001604c <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   1604c:	       lea -60(sp),sp
   16050:	       move.l d3,-(sp)
   16052:	       move.l d2,-(sp)
 	DOUBLE xDiff = x2 - x1;
   16054:	       move.l 88(sp),d0
   16058:	       sub.l 80(sp),d0
   1605c:	       move.l d0,-(sp)
   1605e:	       jsr 17624 <__floatsidf>
   16064:	       addq.l #4,sp
   16066:	       move.l d0,32(sp)
   1606a:	       move.l d1,36(sp)
   1606e:	       move.l 32(sp),60(sp)
   16074:	       move.l 36(sp),64(sp)
	int yDiff = y2 - y1;
   1607a:	       move.l 92(sp),d0
   1607e:	       sub.l 84(sp),d0
   16082:	       move.l d0,56(sp)

	DOUBLE m = xDiff * (xP - x1) + yDiff * (yP - y1);
   16086:	       move.l 96(sp),d0
   1608a:	       sub.l 80(sp),d0
   1608e:	       move.l d0,-(sp)
   16090:	       jsr 17624 <__floatsidf>
   16096:	       addq.l #4,sp
   16098:	       move.l 64(sp),-(sp)
   1609c:	       move.l 64(sp),-(sp)
   160a0:	       move.l d1,-(sp)
   160a2:	       move.l d0,-(sp)
   160a4:	       jsr 176b4 <__muldf3>
   160aa:	       lea 16(sp),sp
   160ae:	       move.l d0,d2
   160b0:	       move.l d1,d3
   160b2:	       move.l 100(sp),d0
   160b6:	       sub.l 84(sp),d0
   160ba:	       move.l 56(sp),-(sp)
   160be:	       move.l d0,-(sp)
   160c0:	       jsr 17be6 <__mulsi3>
   160c6:	       addq.l #8,sp
   160c8:	       move.l d0,-(sp)
   160ca:	       jsr 17624 <__floatsidf>
   160d0:	       addq.l #4,sp
   160d2:	       move.l d1,-(sp)
   160d4:	       move.l d0,-(sp)
   160d6:	       move.l d3,-(sp)
   160d8:	       move.l d2,-(sp)
   160da:	       jsr 17456 <__adddf3>
   160e0:	       lea 16(sp),sp
   160e4:	       move.l d0,24(sp)
   160e8:	       move.l d1,28(sp)
   160ec:	       move.l 24(sp),48(sp)
   160f2:	       move.l 28(sp),52(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   160f8:	       move.l 64(sp),-(sp)
   160fc:	       move.l 64(sp),-(sp)
   16100:	       move.l 72(sp),-(sp)
   16104:	       move.l 72(sp),-(sp)
   16108:	       jsr 176b4 <__muldf3>
   1610e:	       lea 16(sp),sp
   16112:	       move.l d0,d2
   16114:	       move.l d1,d3
   16116:	       move.l 56(sp),-(sp)
   1611a:	       move.l 60(sp),-(sp)
   1611e:	       jsr 17be6 <__mulsi3>
   16124:	       addq.l #8,sp
   16126:	       move.l d0,-(sp)
   16128:	       jsr 17624 <__floatsidf>
   1612e:	       addq.l #4,sp
   16130:	       move.l d1,-(sp)
   16132:	       move.l d0,-(sp)
   16134:	       move.l d3,-(sp)
   16136:	       move.l d2,-(sp)
   16138:	       jsr 17456 <__adddf3>
   1613e:	       lea 16(sp),sp
   16142:	       move.l d1,-(sp)
   16144:	       move.l d0,-(sp)
   16146:	       move.l 60(sp),-(sp)
   1614a:	       move.l 60(sp),-(sp)
   1614e:	       jsr 174b8 <__divdf3>
   16154:	       lea 16(sp),sp
   16158:	       move.l d0,16(sp)
   1615c:	       move.l d1,20(sp)
   16160:	       move.l 16(sp),48(sp)
   16166:	       move.l 20(sp),52(sp)

	if (m < 0) {		
   1616c:	       clr.l -(sp)
   1616e:	       clr.l -(sp)
   16170:	       move.l 60(sp),-(sp)
   16174:	       move.l 60(sp),-(sp)
   16178:	       jsr 1783c <__ltdf2>
   1617e:	       lea 16(sp),sp
   16182:	       tst.l d0
   16184:	   /-- bge.s 1619a <closestPointOnLine+0x14e>
		*closestX = x1;
   16186:	   |   movea.l 72(sp),a0
   1618a:	   |   move.l 80(sp),(a0)
		*closestY = y1;
   1618e:	   |   movea.l 76(sp),a0
   16192:	   |   move.l 84(sp),(a0)
   16196:	/--|-- bra.w 16268 <closestPointOnLine+0x21c>
	} else if (m > 1) {
   1619a:	|  \-> clr.l -(sp)
   1619c:	|      move.l #1072693248,-(sp)
   161a2:	|      move.l 60(sp),-(sp)
   161a6:	|      move.l 60(sp),-(sp)
   161aa:	|      jsr 17782 <__gtdf2>
   161b0:	|      lea 16(sp),sp
   161b4:	|      tst.l d0
   161b6:	|  /-- ble.s 161cc <closestPointOnLine+0x180>
		*closestX = x2;
   161b8:	|  |   movea.l 72(sp),a0
   161bc:	|  |   move.l 88(sp),(a0)
		*closestY = y2;
   161c0:	|  |   movea.l 76(sp),a0
   161c4:	|  |   move.l 92(sp),(a0)
   161c8:	+--|-- bra.w 16268 <closestPointOnLine+0x21c>
	} else {
		DOUBLE tmp = m * xDiff; 
   161cc:	|  \-> move.l 64(sp),-(sp)
   161d0:	|      move.l 64(sp),-(sp)
   161d4:	|      move.l 60(sp),-(sp)
   161d8:	|      move.l 60(sp),-(sp)
   161dc:	|      jsr 176b4 <__muldf3>
   161e2:	|      lea 16(sp),sp
   161e6:	|      move.l d0,8(sp)
   161ea:	|      move.l d1,12(sp)
   161ee:	|      move.l 8(sp),40(sp)
   161f4:	|      move.l 12(sp),44(sp)
		*closestX = (int) tmp;
   161fa:	|      move.l 44(sp),-(sp)
   161fe:	|      move.l 44(sp),-(sp)
   16202:	|      jsr 175c6 <__fixdfsi>
   16208:	|      addq.l #8,sp
   1620a:	|      movea.l 72(sp),a0
   1620e:	|      move.l d0,(a0)
		*closestX += x1;
   16210:	|      movea.l 72(sp),a0
   16214:	|      move.l (a0),d0
   16216:	|      add.l 80(sp),d0
   1621a:	|      movea.l 72(sp),a0
   1621e:	|      move.l d0,(a0)
		*closestY = m * yDiff;
   16220:	|      move.l 56(sp),-(sp)
   16224:	|      jsr 17624 <__floatsidf>
   1622a:	|      addq.l #4,sp
   1622c:	|      move.l 52(sp),-(sp)
   16230:	|      move.l 52(sp),-(sp)
   16234:	|      move.l d1,-(sp)
   16236:	|      move.l d0,-(sp)
   16238:	|      jsr 176b4 <__muldf3>
   1623e:	|      lea 16(sp),sp
   16242:	|      move.l d1,-(sp)
   16244:	|      move.l d0,-(sp)
   16246:	|      jsr 175c6 <__fixdfsi>
   1624c:	|      addq.l #8,sp
   1624e:	|      movea.l 76(sp),a0
   16252:	|      move.l d0,(a0)
		*closestY += y1;
   16254:	|      movea.l 76(sp),a0
   16258:	|      move.l (a0),d0
   1625a:	|      add.l 84(sp),d0
   1625e:	|      movea.l 76(sp),a0
   16262:	|      move.l d0,(a0)
		return TRUE;
   16264:	|      moveq #1,d0
   16266:	|  /-- bra.s 1626a <closestPointOnLine+0x21e>
	}
	return FALSE;
   16268:	\--|-> clr.w d0
}
   1626a:	   \-> move.l (sp)+,d2
   1626c:	       move.l (sp)+,d3
   1626e:	       lea 60(sp),sp
   16272:	       rts

00016274 <drawFloor>:

void drawFloor() {
   16274:	                lea -12(sp),sp
   16278:	                move.l d3,-(sp)
   1627a:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   1627c:	                clr.l 16(sp)
   16280:	   /----------- bra.w 16494 <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   16284:	/--|----------> movea.l 1cac4 <currentFloor>,a0
   1628a:	|  |            move.l 12(a0),d1
   1628e:	|  |            move.l 16(sp),d0
   16292:	|  |            lsl.l #3,d0
   16294:	|  |            movea.l d1,a0
   16296:	|  |            adda.l d0,a0
   16298:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   1629c:	|  |            moveq #1,d0
   1629e:	|  |            cmp.l 8(sp),d0
   162a2:	|  |  /-------- bge.w 16490 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   162a6:	|  |  |         moveq #1,d0
   162a8:	|  |  |         move.l d0,12(sp)
   162ac:	|  |  |     /-- bra.w 163a6 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   162b0:	|  |  |  /--|-> movea.l 1cac4 <currentFloor>,a0
   162b6:	|  |  |  |  |   move.l 4(a0),d1
   162ba:	|  |  |  |  |   movea.l 1cac4 <currentFloor>,a0
   162c0:	|  |  |  |  |   movea.l 12(a0),a0
   162c4:	|  |  |  |  |   move.l 16(sp),d0
   162c8:	|  |  |  |  |   lsl.l #3,d0
   162ca:	|  |  |  |  |   adda.l d0,a0
   162cc:	|  |  |  |  |   movea.l 4(a0),a0
   162d0:	|  |  |  |  |   move.l 12(sp),d0
   162d4:	|  |  |  |  |   add.l d0,d0
   162d6:	|  |  |  |  |   add.l d0,d0
   162d8:	|  |  |  |  |   adda.l d0,a0
   162da:	|  |  |  |  |   move.l (a0),d0
   162dc:	|  |  |  |  |   lsl.l #3,d0
   162de:	|  |  |  |  |   movea.l d1,a0
   162e0:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   162e2:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   162e6:	|  |  |  |  |   movea.l 1cac4 <currentFloor>,a0
   162ec:	|  |  |  |  |   move.l 4(a0),d1
   162f0:	|  |  |  |  |   movea.l 1cac4 <currentFloor>,a0
   162f6:	|  |  |  |  |   movea.l 12(a0),a0
   162fa:	|  |  |  |  |   move.l 16(sp),d0
   162fe:	|  |  |  |  |   lsl.l #3,d0
   16300:	|  |  |  |  |   adda.l d0,a0
   16302:	|  |  |  |  |   movea.l 4(a0),a0
   16306:	|  |  |  |  |   move.l 12(sp),d0
   1630a:	|  |  |  |  |   add.l d0,d0
   1630c:	|  |  |  |  |   add.l d0,d0
   1630e:	|  |  |  |  |   adda.l d0,a0
   16310:	|  |  |  |  |   move.l (a0),d0
   16312:	|  |  |  |  |   lsl.l #3,d0
   16314:	|  |  |  |  |   movea.l d1,a0
   16316:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16318:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   1631a:	|  |  |  |  |   movea.l 1cac4 <currentFloor>,a0
   16320:	|  |  |  |  |   move.l 4(a0),d1
   16324:	|  |  |  |  |   movea.l 1cac4 <currentFloor>,a0
   1632a:	|  |  |  |  |   movea.l 12(a0),a0
   1632e:	|  |  |  |  |   move.l 16(sp),d0
   16332:	|  |  |  |  |   lsl.l #3,d0
   16334:	|  |  |  |  |   adda.l d0,a0
   16336:	|  |  |  |  |   movea.l 4(a0),a0
   1633a:	|  |  |  |  |   move.l 12(sp),d0
   1633e:	|  |  |  |  |   addi.l #1073741823,d0
   16344:	|  |  |  |  |   add.l d0,d0
   16346:	|  |  |  |  |   add.l d0,d0
   16348:	|  |  |  |  |   adda.l d0,a0
   1634a:	|  |  |  |  |   move.l (a0),d0
   1634c:	|  |  |  |  |   lsl.l #3,d0
   1634e:	|  |  |  |  |   movea.l d1,a0
   16350:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16352:	|  |  |  |  |   move.l 4(a0),d1
   16356:	|  |  |  |  |   movea.l 1cac4 <currentFloor>,a0
   1635c:	|  |  |  |  |   move.l 4(a0),d3
   16360:	|  |  |  |  |   movea.l 1cac4 <currentFloor>,a0
   16366:	|  |  |  |  |   movea.l 12(a0),a0
   1636a:	|  |  |  |  |   move.l 16(sp),d0
   1636e:	|  |  |  |  |   lsl.l #3,d0
   16370:	|  |  |  |  |   adda.l d0,a0
   16372:	|  |  |  |  |   movea.l 4(a0),a0
   16376:	|  |  |  |  |   move.l 12(sp),d0
   1637a:	|  |  |  |  |   addi.l #1073741823,d0
   16380:	|  |  |  |  |   add.l d0,d0
   16382:	|  |  |  |  |   add.l d0,d0
   16384:	|  |  |  |  |   adda.l d0,a0
   16386:	|  |  |  |  |   move.l (a0),d0
   16388:	|  |  |  |  |   lsl.l #3,d0
   1638a:	|  |  |  |  |   movea.l d3,a0
   1638c:	|  |  |  |  |   adda.l d0,a0
   1638e:	|  |  |  |  |   move.l (a0),d0
   16390:	|  |  |  |  |   move.l d2,-(sp)
   16392:	|  |  |  |  |   move.l a1,-(sp)
   16394:	|  |  |  |  |   move.l d1,-(sp)
   16396:	|  |  |  |  |   move.l d0,-(sp)
   16398:	|  |  |  |  |   jsr 3e68 <drawLine>
   1639e:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   163a2:	|  |  |  |  |   addq.l #1,12(sp)
   163a6:	|  |  |  |  \-> move.l 12(sp),d0
   163aa:	|  |  |  |      cmp.l 8(sp),d0
   163ae:	|  |  |  \----- blt.w 162b0 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   163b2:	|  |  |         movea.l 1cac4 <currentFloor>,a0
   163b8:	|  |  |         move.l 4(a0),d1
   163bc:	|  |  |         movea.l 1cac4 <currentFloor>,a0
   163c2:	|  |  |         movea.l 12(a0),a0
   163c6:	|  |  |         move.l 16(sp),d0
   163ca:	|  |  |         lsl.l #3,d0
   163cc:	|  |  |         adda.l d0,a0
   163ce:	|  |  |         movea.l 4(a0),a0
   163d2:	|  |  |         move.l 8(sp),d0
   163d6:	|  |  |         addi.l #1073741823,d0
   163dc:	|  |  |         add.l d0,d0
   163de:	|  |  |         add.l d0,d0
   163e0:	|  |  |         adda.l d0,a0
   163e2:	|  |  |         move.l (a0),d0
   163e4:	|  |  |         lsl.l #3,d0
   163e6:	|  |  |         movea.l d1,a0
   163e8:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   163ea:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   163ee:	|  |  |         movea.l 1cac4 <currentFloor>,a0
   163f4:	|  |  |         move.l 4(a0),d1
   163f8:	|  |  |         movea.l 1cac4 <currentFloor>,a0
   163fe:	|  |  |         movea.l 12(a0),a0
   16402:	|  |  |         move.l 16(sp),d0
   16406:	|  |  |         lsl.l #3,d0
   16408:	|  |  |         adda.l d0,a0
   1640a:	|  |  |         movea.l 4(a0),a0
   1640e:	|  |  |         move.l 8(sp),d0
   16412:	|  |  |         addi.l #1073741823,d0
   16418:	|  |  |         add.l d0,d0
   1641a:	|  |  |         add.l d0,d0
   1641c:	|  |  |         adda.l d0,a0
   1641e:	|  |  |         move.l (a0),d0
   16420:	|  |  |         lsl.l #3,d0
   16422:	|  |  |         movea.l d1,a0
   16424:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16426:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   16428:	|  |  |         movea.l 1cac4 <currentFloor>,a0
   1642e:	|  |  |         move.l 4(a0),d1
   16432:	|  |  |         movea.l 1cac4 <currentFloor>,a0
   16438:	|  |  |         movea.l 12(a0),a0
   1643c:	|  |  |         move.l 16(sp),d0
   16440:	|  |  |         lsl.l #3,d0
   16442:	|  |  |         adda.l d0,a0
   16444:	|  |  |         movea.l 4(a0),a0
   16448:	|  |  |         move.l (a0),d0
   1644a:	|  |  |         lsl.l #3,d0
   1644c:	|  |  |         movea.l d1,a0
   1644e:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16450:	|  |  |         move.l 4(a0),d1
   16454:	|  |  |         movea.l 1cac4 <currentFloor>,a0
   1645a:	|  |  |         move.l 4(a0),d3
   1645e:	|  |  |         movea.l 1cac4 <currentFloor>,a0
   16464:	|  |  |         movea.l 12(a0),a0
   16468:	|  |  |         move.l 16(sp),d0
   1646c:	|  |  |         lsl.l #3,d0
   1646e:	|  |  |         adda.l d0,a0
   16470:	|  |  |         movea.l 4(a0),a0
   16474:	|  |  |         move.l (a0),d0
   16476:	|  |  |         lsl.l #3,d0
   16478:	|  |  |         movea.l d3,a0
   1647a:	|  |  |         adda.l d0,a0
   1647c:	|  |  |         move.l (a0),d0
   1647e:	|  |  |         move.l d2,-(sp)
   16480:	|  |  |         move.l a1,-(sp)
   16482:	|  |  |         move.l d1,-(sp)
   16484:	|  |  |         move.l d0,-(sp)
   16486:	|  |  |         jsr 3e68 <drawLine>
   1648c:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   16490:	|  |  \-------> addq.l #1,16(sp)
   16494:	|  \----------> movea.l 1cac4 <currentFloor>,a0
   1649a:	|               move.l 8(a0),d0
   1649e:	|               cmp.l 16(sp),d0
   164a2:	\-------------- bgt.w 16284 <drawFloor+0x10>
        }
    }
}
   164a6:	                nop
   164a8:	                nop
   164aa:	                move.l (sp)+,d2
   164ac:	                move.l (sp)+,d3
   164ae:	                lea 12(sp),sp
   164b2:	                rts

000164b4 <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   164b4:	                      lea -12(sp),sp
    int sharedVertices = 0;
   164b8:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   164bc:	                      clr.l 4(sp)
   164c0:	   /----------------- bra.w 16552 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   164c4:	/--|----------------> clr.l (sp)
   164c6:	|  |     /----------- bra.s 16542 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   164c8:	|  |  /--|----------> movea.l 16(sp),a0
   164cc:	|  |  |  |            move.l 4(a0),d1
   164d0:	|  |  |  |            move.l 4(sp),d0
   164d4:	|  |  |  |            add.l d0,d0
   164d6:	|  |  |  |            add.l d0,d0
   164d8:	|  |  |  |            movea.l d1,a0
   164da:	|  |  |  |            adda.l d0,a0
   164dc:	|  |  |  |            move.l (a0),d1
   164de:	|  |  |  |            movea.l 20(sp),a0
   164e2:	|  |  |  |            movea.l 4(a0),a0
   164e6:	|  |  |  |            move.l (sp),d0
   164e8:	|  |  |  |            add.l d0,d0
   164ea:	|  |  |  |            add.l d0,d0
   164ec:	|  |  |  |            adda.l d0,a0
   164ee:	|  |  |  |            move.l (a0),d0
   164f0:	|  |  |  |            cmp.l d1,d0
   164f2:	|  |  |  |  /-------- bne.s 16540 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   164f4:	|  |  |  |  |         move.l 8(sp),d0
   164f8:	|  |  |  |  |         move.l d0,d1
   164fa:	|  |  |  |  |         addq.l #1,d1
   164fc:	|  |  |  |  |         move.l d1,8(sp)
   16500:	|  |  |  |  |         tst.l d0
   16502:	|  |  |  |  |     /-- beq.s 16524 <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   16504:	|  |  |  |  |     |   movea.l 16(sp),a0
   16508:	|  |  |  |  |     |   move.l 4(a0),d1
   1650c:	|  |  |  |  |     |   move.l 4(sp),d0
   16510:	|  |  |  |  |     |   add.l d0,d0
   16512:	|  |  |  |  |     |   add.l d0,d0
   16514:	|  |  |  |  |     |   movea.l d1,a0
   16516:	|  |  |  |  |     |   adda.l d0,a0
   16518:	|  |  |  |  |     |   move.l (a0),d0
   1651a:	|  |  |  |  |     |   movea.l 28(sp),a0
   1651e:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   16520:	|  |  |  |  |     |   moveq #1,d0
   16522:	|  |  |  |  |  /--|-- bra.s 16562 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   16524:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   16528:	|  |  |  |  |  |      move.l 4(a0),d1
   1652c:	|  |  |  |  |  |      move.l 4(sp),d0
   16530:	|  |  |  |  |  |      add.l d0,d0
   16532:	|  |  |  |  |  |      add.l d0,d0
   16534:	|  |  |  |  |  |      movea.l d1,a0
   16536:	|  |  |  |  |  |      adda.l d0,a0
   16538:	|  |  |  |  |  |      move.l (a0),d0
   1653a:	|  |  |  |  |  |      movea.l 24(sp),a0
   1653e:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   16540:	|  |  |  |  \--|----> addq.l #1,(sp)
   16542:	|  |  |  \-----|----> movea.l 20(sp),a0
   16546:	|  |  |        |      move.l (a0),d0
   16548:	|  |  |        |      cmp.l (sp),d0
   1654a:	|  |  \--------|----- bgt.w 164c8 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   1654e:	|  |           |      addq.l #1,4(sp)
   16552:	|  \-----------|----> movea.l 16(sp),a0
   16556:	|              |      move.l (a0),d0
   16558:	|              |      cmp.l 4(sp),d0
   1655c:	\--------------|----- bgt.w 164c4 <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   16560:	               |      clr.w d0
}
   16562:	               \----> lea 12(sp),sp
   16566:	                      rts

00016568 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   16568:	movea.l 1cac4 <currentFloor>,a0
   1656e:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   16572:	movea.l 1cac4 <currentFloor>,a0
   16578:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   1657c:	movea.l 1cac4 <currentFloor>,a0
   16582:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   16586:	movea.l 1cac4 <currentFloor>,a0
   1658c:	clr.l 16(a0)
}
   16590:	nop
   16592:	rts

00016594 <inFloor>:

int inFloor (int x, int y) {
   16594:	          subq.l #8,sp
	int i, r = -1;
   16596:	          moveq #-1,d0
   16598:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   1659a:	          clr.l 4(sp)
   1659e:	   /----- bra.s 165d2 <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   165a0:	/--|----> movea.l 1cac4 <currentFloor>,a0
   165a6:	|  |      move.l 12(a0),d1
   165aa:	|  |      move.l 4(sp),d0
   165ae:	|  |      lsl.l #3,d0
   165b0:	|  |      add.l d1,d0
   165b2:	|  |      move.l 16(sp),-(sp)
   165b6:	|  |      move.l 16(sp),-(sp)
   165ba:	|  |      move.l d0,-(sp)
   165bc:	|  |      jsr 1679e <pointInFloorPolygon>
   165c2:	|  |      lea 12(sp),sp
   165c6:	|  |      tst.w d0
   165c8:	|  |  /-- beq.s 165ce <inFloor+0x3a>
			r = i;
   165ca:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   165ce:	|  |  \-> addq.l #1,4(sp)
   165d2:	|  \----> movea.l 1cac4 <currentFloor>,a0
   165d8:	|         move.l 8(a0),d0
   165dc:	|         cmp.l 4(sp),d0
   165e0:	\-------- bgt.s 165a0 <inFloor+0xc>

	return r;
   165e2:	          move.l (sp),d0
}
   165e4:	          addq.l #8,sp
   165e6:	          rts

000165e8 <initFloor>:

BOOL initFloor () {
   165e8:	       lea -12(sp),sp
   165ec:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   165ee:	       moveq #20,d0
   165f0:	       move.l d0,12(sp)
   165f4:	       clr.l 8(sp)
   165f8:	       move.l 1c9a8 <SysBase>,d0
   165fe:	       movea.l d0,a6
   16600:	       move.l 12(sp),d0
   16604:	       move.l 8(sp),d1
   16608:	       jsr -684(a6)
   1660c:	       move.l d0,4(sp)
   16610:	       move.l 4(sp),d0
   16614:	       move.l d0,1cac4 <currentFloor>

    if(currentFloor == 0) {
   1661a:	       move.l 1cac4 <currentFloor>,d0
   16620:	/----- bne.s 16634 <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   16622:	|      pea 1a0f5 <newfatal.c.307beca7+0x10d>
   16628:	|      jsr 17232 <KPrintF>
   1662e:	|      addq.l #4,sp
        return FALSE;
   16630:	|      clr.w d0
   16632:	|  /-- bra.s 1663c <initFloor+0x54>
    }

	noFloor ();
   16634:	\--|-> jsr 16568 <noFloor>
	return TRUE;
   1663a:	   |   moveq #1,d0
}
   1663c:	   \-> movea.l (sp)+,a6
   1663e:	       lea 12(sp),sp
   16642:	       rts

00016644 <killFloor>:

void killFloor () {
   16644:	       lea -24(sp),sp
   16648:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   1664a:	       clr.l 24(sp)
   1664e:	   /-- bra.s 166a8 <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   16650:	/--|-> movea.l 1cac4 <currentFloor>,a0
   16656:	|  |   move.l 12(a0),d1
   1665a:	|  |   move.l 24(sp),d0
   1665e:	|  |   lsl.l #3,d0
   16660:	|  |   movea.l d1,a0
   16662:	|  |   adda.l d0,a0
   16664:	|  |   move.l 4(a0),8(sp)
   1666a:	|  |   move.l 1c9a8 <SysBase>,d0
   16670:	|  |   movea.l d0,a6
   16672:	|  |   movea.l 8(sp),a1
   16676:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   1667a:	|  |   movea.l 1cac4 <currentFloor>,a0
   16680:	|  |   move.l 16(a0),d1
   16684:	|  |   move.l 24(sp),d0
   16688:	|  |   add.l d0,d0
   1668a:	|  |   add.l d0,d0
   1668c:	|  |   movea.l d1,a0
   1668e:	|  |   adda.l d0,a0
   16690:	|  |   move.l (a0),4(sp)
   16694:	|  |   move.l 1c9a8 <SysBase>,d0
   1669a:	|  |   movea.l d0,a6
   1669c:	|  |   movea.l 4(sp),a1
   166a0:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   166a4:	|  |   addq.l #1,24(sp)
   166a8:	|  \-> movea.l 1cac4 <currentFloor>,a0
   166ae:	|      move.l 8(a0),d0
   166b2:	|      cmp.l 24(sp),d0
   166b6:	\----- bgt.s 16650 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   166b8:	       movea.l 1cac4 <currentFloor>,a0
   166be:	       move.l 12(a0),20(sp)
   166c4:	       move.l 1c9a8 <SysBase>,d0
   166ca:	       movea.l d0,a6
   166cc:	       movea.l 20(sp),a1
   166d0:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   166d4:	       movea.l 1cac4 <currentFloor>,a0
   166da:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   166de:	       movea.l 1cac4 <currentFloor>,a0
   166e4:	       move.l 4(a0),16(sp)
   166ea:	       move.l 1c9a8 <SysBase>,d0
   166f0:	       movea.l d0,a6
   166f2:	       movea.l 16(sp),a1
   166f6:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   166fa:	       movea.l 1cac4 <currentFloor>,a0
   16700:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   16704:	       movea.l 1cac4 <currentFloor>,a0
   1670a:	       move.l 16(a0),12(sp)
   16710:	       move.l 1c9a8 <SysBase>,d0
   16716:	       movea.l d0,a6
   16718:	       movea.l 12(sp),a1
   1671c:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   16720:	       movea.l 1cac4 <currentFloor>,a0
   16726:	       clr.l 16(a0)
}
   1672a:	       nop
   1672c:	       movea.l (sp)+,a6
   1672e:	       lea 24(sp),sp
   16732:	       rts

00016734 <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   16734:	                   lea -12(sp),sp
	int sharedVertices = 0;
   16738:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   1673c:	                   clr.l 4(sp)
   16740:	   /-------------- bra.s 1678c <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   16742:	/--|-------------> clr.l (sp)
   16744:	|  |     /-------- bra.s 16780 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   16746:	|  |  /--|-------> move.l 20(sp),d1
   1674a:	|  |  |  |         move.l 4(sp),d0
   1674e:	|  |  |  |         add.l d0,d0
   16750:	|  |  |  |         add.l d0,d0
   16752:	|  |  |  |         movea.l d1,a0
   16754:	|  |  |  |         adda.l d0,a0
   16756:	|  |  |  |         move.l (a0),d1
   16758:	|  |  |  |         movea.l 28(sp),a0
   1675c:	|  |  |  |         move.l (sp),d0
   1675e:	|  |  |  |         add.l d0,d0
   16760:	|  |  |  |         add.l d0,d0
   16762:	|  |  |  |         adda.l d0,a0
   16764:	|  |  |  |         move.l (a0),d0
   16766:	|  |  |  |         cmp.l d1,d0
   16768:	|  |  |  |     /-- bne.s 1677e <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   1676a:	|  |  |  |     |   move.l 8(sp),d0
   1676e:	|  |  |  |     |   move.l d0,d1
   16770:	|  |  |  |     |   addq.l #1,d1
   16772:	|  |  |  |     |   move.l d1,8(sp)
   16776:	|  |  |  |     |   tst.l d0
   16778:	|  |  |  |     +-- beq.s 1677e <polysShareSide+0x4a>
   1677a:	|  |  |  |     |   moveq #1,d0
   1677c:	|  |  |  |  /--|-- bra.s 16798 <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   1677e:	|  |  |  |  |  \-> addq.l #1,(sp)
   16780:	|  |  |  \--|----> move.l 24(sp),d0
   16784:	|  |  |     |      cmp.l (sp),d0
   16786:	|  |  \-----|----- bgt.s 16746 <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   16788:	|  |        |      addq.l #1,4(sp)
   1678c:	|  \--------|----> move.l 16(sp),d0
   16790:	|           |      cmp.l 4(sp),d0
   16794:	\-----------|----- bgt.s 16742 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   16796:	            |      clr.w d0
}
   16798:	            \----> lea 12(sp),sp
   1679c:	                   rts

0001679e <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   1679e:	             lea -28(sp),sp
   167a2:	             move.l d3,-(sp)
   167a4:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   167a6:	             clr.l 32(sp)
   167aa:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   167ae:	             movea.l 40(sp),a0
   167b2:	             move.l (a0),d0
   167b4:	             move.l d0,d1
   167b6:	             subq.l #1,d1
   167b8:	             move.l d1,28(sp)
   167bc:	   /-------- bra.w 169b6 <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   167c0:	/--|-------> movea.l 1cac4 <currentFloor>,a0
   167c6:	|  |         move.l 4(a0),d1
   167ca:	|  |         movea.l 40(sp),a0
   167ce:	|  |         movea.l 4(a0),a0
   167d2:	|  |         move.l 32(sp),d0
   167d6:	|  |         add.l d0,d0
   167d8:	|  |         add.l d0,d0
   167da:	|  |         adda.l d0,a0
   167dc:	|  |         move.l (a0),d0
   167de:	|  |         lsl.l #3,d0
   167e0:	|  |         movea.l d1,a0
   167e2:	|  |         adda.l d0,a0
   167e4:	|  |         move.l (a0),d0
   167e6:	|  |         move.l d0,-(sp)
   167e8:	|  |         jsr 17664 <__floatsisf>
   167ee:	|  |         addq.l #4,sp
   167f0:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   167f4:	|  |         movea.l 1cac4 <currentFloor>,a0
   167fa:	|  |         move.l 4(a0),d1
   167fe:	|  |         movea.l 40(sp),a0
   16802:	|  |         movea.l 4(a0),a0
   16806:	|  |         move.l 32(sp),d0
   1680a:	|  |         add.l d0,d0
   1680c:	|  |         add.l d0,d0
   1680e:	|  |         adda.l d0,a0
   16810:	|  |         move.l (a0),d0
   16812:	|  |         lsl.l #3,d0
   16814:	|  |         movea.l d1,a0
   16816:	|  |         adda.l d0,a0
   16818:	|  |         move.l 4(a0),d0
   1681c:	|  |         move.l d0,-(sp)
   1681e:	|  |         jsr 17664 <__floatsisf>
   16824:	|  |         addq.l #4,sp
   16826:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   1682a:	|  |         movea.l 1cac4 <currentFloor>,a0
   16830:	|  |         move.l 4(a0),d1
   16834:	|  |         movea.l 40(sp),a0
   16838:	|  |         movea.l 4(a0),a0
   1683c:	|  |         move.l 28(sp),d0
   16840:	|  |         add.l d0,d0
   16842:	|  |         add.l d0,d0
   16844:	|  |         adda.l d0,a0
   16846:	|  |         move.l (a0),d0
   16848:	|  |         lsl.l #3,d0
   1684a:	|  |         movea.l d1,a0
   1684c:	|  |         adda.l d0,a0
   1684e:	|  |         move.l (a0),d0
   16850:	|  |         move.l d0,-(sp)
   16852:	|  |         jsr 17664 <__floatsisf>
   16858:	|  |         addq.l #4,sp
   1685a:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   1685e:	|  |         movea.l 1cac4 <currentFloor>,a0
   16864:	|  |         move.l 4(a0),d1
   16868:	|  |         movea.l 40(sp),a0
   1686c:	|  |         movea.l 4(a0),a0
   16870:	|  |         move.l 28(sp),d0
   16874:	|  |         add.l d0,d0
   16876:	|  |         add.l d0,d0
   16878:	|  |         adda.l d0,a0
   1687a:	|  |         move.l (a0),d0
   1687c:	|  |         lsl.l #3,d0
   1687e:	|  |         movea.l d1,a0
   16880:	|  |         adda.l d0,a0
   16882:	|  |         move.l 4(a0),d0
   16886:	|  |         move.l d0,-(sp)
   16888:	|  |         jsr 17664 <__floatsisf>
   1688e:	|  |         addq.l #4,sp
   16890:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   16894:	|  |         move.l 48(sp),-(sp)
   16898:	|  |         jsr 17664 <__floatsisf>
   1689e:	|  |         addq.l #4,sp
   168a0:	|  |         move.l d0,-(sp)
   168a2:	|  |         move.l 20(sp),-(sp)
   168a6:	|  |         jsr 17806 <__lesf2>
   168ac:	|  |         addq.l #8,sp
   168ae:	|  |         tst.l d0
   168b0:	|  |     /-- bgt.s 168d0 <pointInFloorPolygon+0x132>
   168b2:	|  |     |   move.l 48(sp),-(sp)
   168b6:	|  |     |   jsr 17664 <__floatsisf>
   168bc:	|  |     |   addq.l #4,sp
   168be:	|  |     |   move.l d0,-(sp)
   168c0:	|  |     |   move.l 12(sp),-(sp)
   168c4:	|  |     |   jsr 177d0 <__gtsf2>
   168ca:	|  |     |   addq.l #8,sp
   168cc:	|  |     |   tst.l d0
   168ce:	|  |  /--|-- bgt.s 16910 <pointInFloorPolygon+0x172>
   168d0:	|  |  |  \-> move.l 48(sp),-(sp)
   168d4:	|  |  |      jsr 17664 <__floatsisf>
   168da:	|  |  |      addq.l #4,sp
   168dc:	|  |  |      move.l d0,-(sp)
   168de:	|  |  |      move.l 12(sp),-(sp)
   168e2:	|  |  |      jsr 17806 <__lesf2>
   168e8:	|  |  |      addq.l #8,sp
   168ea:	|  |  |      tst.l d0
   168ec:	|  |  |  /-- bgt.w 169a6 <pointInFloorPolygon+0x208>
   168f0:	|  |  |  |   move.l 48(sp),-(sp)
   168f4:	|  |  |  |   jsr 17664 <__floatsisf>
   168fa:	|  |  |  |   addq.l #4,sp
   168fc:	|  |  |  |   move.l d0,-(sp)
   168fe:	|  |  |  |   move.l 20(sp),-(sp)
   16902:	|  |  |  |   jsr 177d0 <__gtsf2>
   16908:	|  |  |  |   addq.l #8,sp
   1690a:	|  |  |  |   tst.l d0
   1690c:	|  |  |  +-- ble.w 169a6 <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   16910:	|  |  \--|-> move.l 44(sp),-(sp)
   16914:	|  |     |   jsr 17664 <__floatsisf>
   1691a:	|  |     |   addq.l #4,sp
   1691c:	|  |     |   move.l d0,d3
   1691e:	|  |     |   move.l 20(sp),-(sp)
   16922:	|  |     |   move.l 16(sp),-(sp)
   16926:	|  |     |   jsr 17958 <__subsf3>
   1692c:	|  |     |   addq.l #8,sp
   1692e:	|  |     |   move.l d0,d2
   16930:	|  |     |   move.l 48(sp),-(sp)
   16934:	|  |     |   jsr 17664 <__floatsisf>
   1693a:	|  |     |   addq.l #4,sp
   1693c:	|  |     |   move.l 16(sp),-(sp)
   16940:	|  |     |   move.l d0,-(sp)
   16942:	|  |     |   jsr 17958 <__subsf3>
   16948:	|  |     |   addq.l #8,sp
   1694a:	|  |     |   move.l d0,-(sp)
   1694c:	|  |     |   move.l d2,-(sp)
   1694e:	|  |     |   jsr 17716 <__mulsf3>
   16954:	|  |     |   addq.l #8,sp
   16956:	|  |     |   move.l d0,d2
   16958:	|  |     |   move.l 16(sp),-(sp)
   1695c:	|  |     |   move.l 12(sp),-(sp)
   16960:	|  |     |   jsr 17958 <__subsf3>
   16966:	|  |     |   addq.l #8,sp
   16968:	|  |     |   move.l d0,-(sp)
   1696a:	|  |     |   move.l d2,-(sp)
   1696c:	|  |     |   jsr 1751a <__divsf3>
   16972:	|  |     |   addq.l #8,sp
   16974:	|  |     |   move.l 20(sp),-(sp)
   16978:	|  |     |   move.l d0,-(sp)
   1697a:	|  |     |   jsr 17420 <__addsf3>
   16980:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   16982:	|  |     |   move.l d0,-(sp)
   16984:	|  |     |   move.l d3,-(sp)
   16986:	|  |     |   jsr 1788a <__ltsf2>
   1698c:	|  |     |   addq.l #8,sp
   1698e:	|  |     |   tst.l d0
   16990:	|  |     +-- bge.s 169a6 <pointInFloorPolygon+0x208>

			c = !c;
   16992:	|  |     |   tst.l 24(sp)
   16996:	|  |     |   seq d0
   16998:	|  |     |   neg.b d0
   1699a:	|  |     |   move.b d0,d0
   1699c:	|  |     |   andi.l #255,d0
   169a2:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   169a6:	|  |     \-> move.l 32(sp),d0
   169aa:	|  |         move.l d0,d1
   169ac:	|  |         addq.l #1,d1
   169ae:	|  |         move.l d1,32(sp)
   169b2:	|  |         move.l d0,28(sp)
   169b6:	|  \-------> movea.l 40(sp),a0
   169ba:	|            move.l (a0),d0
   169bc:	|            cmp.l 32(sp),d0
   169c0:	\----------- bgt.w 167c0 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   169c4:	             tst.l 24(sp)
   169c8:	             sne d0
   169ca:	             neg.b d0
   169cc:	             move.b d0,d0
   169ce:	             andi.w #255,d0
}
   169d2:	             move.l (sp)+,d2
   169d4:	             move.l (sp)+,d3
   169d6:	             lea 28(sp),sp
   169da:	             rts

000169dc <setFloor>:

BOOL setFloor (int fileNum) {
   169dc:	                               lea -132(sp),sp
   169e0:	                               move.l a6,-(sp)
   169e2:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   169e4:	                               jsr 16644 <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   169ea:	                               move.l 144(sp),-(sp)
   169ee:	                               jsr 6d7c <openFileFromNum>
   169f4:	                               addq.l #4,sp
   169f6:	                               tst.l d0
   169f8:	                           /-- bne.s 16a00 <setFloor+0x24>
   169fa:	                           |   clr.w d0
   169fc:	/--------------------------|-- bra.w 1714c <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   16a00:	|                          \-> movea.l 1cac4 <currentFloor>,a0
   16a06:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   16a0a:	|                              move.l 1c990 <bigDataFile>,118(sp)
   16a12:	|                              move.l 1c9b0 <DOSBase>,d0
   16a18:	|                              movea.l d0,a6
   16a1a:	|                              move.l 118(sp),d1
   16a1e:	|                              jsr -306(a6)
   16a22:	|                              move.l d0,114(sp)
   16a26:	|                              move.l 114(sp),d0
   16a2a:	|                              movea.l 1cac4 <currentFloor>,a0
   16a30:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   16a34:	|                              movea.l 1cac4 <currentFloor>,a0
   16a3a:	|                              move.l 8(a0),d0
   16a3e:	|                              lsl.l #3,d0
   16a40:	|                              move.l d0,110(sp)
   16a44:	|                              clr.l 106(sp)
   16a48:	|                              move.l 1c9a8 <SysBase>,d0
   16a4e:	|                              movea.l d0,a6
   16a50:	|                              move.l 110(sp),d0
   16a54:	|                              move.l 106(sp),d1
   16a58:	|                              jsr -684(a6)
   16a5c:	|                              move.l d0,102(sp)
   16a60:	|                              move.l 102(sp),d0
   16a64:	|                              movea.l 1cac4 <currentFloor>,a0
   16a6a:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   16a6e:	|                              movea.l 1cac4 <currentFloor>,a0
   16a74:	|                              move.l 12(a0),d0
   16a78:	|                          /-- bne.s 16a8e <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   16a7a:	|                          |   pea 1a119 <newfatal.c.307beca7+0x131>
   16a80:	|                          |   jsr 17232 <KPrintF>
   16a86:	|                          |   addq.l #4,sp
		return FALSE;
   16a88:	|                          |   clr.w d0
   16a8a:	+--------------------------|-- bra.w 1714c <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16a8e:	|                          \-> clr.l 136(sp)
   16a92:	|                    /-------- bra.w 16baa <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   16a96:	|                 /--|-------> move.l 1c990 <bigDataFile>,26(sp)
   16a9e:	|                 |  |         move.l 1c9b0 <DOSBase>,d0
   16aa4:	|                 |  |         movea.l d0,a6
   16aa6:	|                 |  |         move.l 26(sp),d1
   16aaa:	|                 |  |         jsr -306(a6)
   16aae:	|                 |  |         move.l d0,22(sp)
   16ab2:	|                 |  |         move.l 22(sp),d1
   16ab6:	|                 |  |         movea.l 1cac4 <currentFloor>,a0
   16abc:	|                 |  |         movea.l 12(a0),a0
   16ac0:	|                 |  |         move.l 136(sp),d0
   16ac4:	|                 |  |         lsl.l #3,d0
   16ac6:	|                 |  |         adda.l d0,a0
   16ac8:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   16aca:	|                 |  |         movea.l 1cac4 <currentFloor>,a0
   16ad0:	|                 |  |         move.l 12(a0),d1
   16ad4:	|                 |  |         move.l 136(sp),d0
   16ad8:	|                 |  |         lsl.l #3,d0
   16ada:	|                 |  |         movea.l d1,a0
   16adc:	|                 |  |         adda.l d0,a0
   16ade:	|                 |  |         move.l (a0),d0
   16ae0:	|                 |  |         add.l d0,d0
   16ae2:	|                 |  |         add.l d0,d0
   16ae4:	|                 |  |         move.l d0,18(sp)
   16ae8:	|                 |  |         clr.l 14(sp)
   16aec:	|                 |  |         move.l 1c9a8 <SysBase>,d0
   16af2:	|                 |  |         movea.l d0,a6
   16af4:	|                 |  |         move.l 18(sp),d0
   16af8:	|                 |  |         move.l 14(sp),d1
   16afc:	|                 |  |         jsr -684(a6)
   16b00:	|                 |  |         move.l d0,10(sp)
   16b04:	|                 |  |         move.l 10(sp),d1
   16b08:	|                 |  |         movea.l 1cac4 <currentFloor>,a0
   16b0e:	|                 |  |         movea.l 12(a0),a0
   16b12:	|                 |  |         move.l 136(sp),d0
   16b16:	|                 |  |         lsl.l #3,d0
   16b18:	|                 |  |         adda.l d0,a0
   16b1a:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   16b1e:	|                 |  |         movea.l 1cac4 <currentFloor>,a0
   16b24:	|                 |  |         move.l 12(a0),d1
   16b28:	|                 |  |         move.l 136(sp),d0
   16b2c:	|                 |  |         lsl.l #3,d0
   16b2e:	|                 |  |         movea.l d1,a0
   16b30:	|                 |  |         adda.l d0,a0
   16b32:	|                 |  |         move.l 4(a0),d0
   16b36:	|                 |  |     /-- bne.s 16b4c <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   16b38:	|                 |  |     |   pea 1a119 <newfatal.c.307beca7+0x131>
   16b3e:	|                 |  |     |   jsr 17232 <KPrintF>
   16b44:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16b46:	|                 |  |     |   clr.w d0
   16b48:	+-----------------|--|-----|-- bra.w 1714c <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16b4c:	|                 |  |     \-> clr.l 132(sp)
   16b50:	|                 |  |     /-- bra.s 16b8a <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   16b52:	|                 |  |  /--|-> move.l 1c990 <bigDataFile>,d1
   16b58:	|                 |  |  |  |   movea.l 1cac4 <currentFloor>,a0
   16b5e:	|                 |  |  |  |   movea.l 12(a0),a0
   16b62:	|                 |  |  |  |   move.l 136(sp),d0
   16b66:	|                 |  |  |  |   lsl.l #3,d0
   16b68:	|                 |  |  |  |   adda.l d0,a0
   16b6a:	|                 |  |  |  |   movea.l 4(a0),a0
   16b6e:	|                 |  |  |  |   move.l 132(sp),d0
   16b72:	|                 |  |  |  |   add.l d0,d0
   16b74:	|                 |  |  |  |   add.l d0,d0
   16b76:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   16b7a:	|                 |  |  |  |   move.l d1,-(sp)
   16b7c:	|                 |  |  |  |   jsr 6bc <get2bytes>
   16b82:	|                 |  |  |  |   addq.l #4,sp
   16b84:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16b86:	|                 |  |  |  |   addq.l #1,132(sp)
   16b8a:	|                 |  |  |  \-> movea.l 1cac4 <currentFloor>,a0
   16b90:	|                 |  |  |      move.l 12(a0),d1
   16b94:	|                 |  |  |      move.l 136(sp),d0
   16b98:	|                 |  |  |      lsl.l #3,d0
   16b9a:	|                 |  |  |      movea.l d1,a0
   16b9c:	|                 |  |  |      adda.l d0,a0
   16b9e:	|                 |  |  |      move.l (a0),d0
   16ba0:	|                 |  |  |      cmp.l 132(sp),d0
   16ba4:	|                 |  |  \----- bgt.s 16b52 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16ba6:	|                 |  |         addq.l #1,136(sp)
   16baa:	|                 |  \-------> movea.l 1cac4 <currentFloor>,a0
   16bb0:	|                 |            move.l 8(a0),d0
   16bb4:	|                 |            cmp.l 136(sp),d0
   16bb8:	|                 \----------- bgt.w 16a96 <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   16bbc:	|                              move.l 1c990 <bigDataFile>,d0
   16bc2:	|                              move.l d0,-(sp)
   16bc4:	|                              jsr 6bc <get2bytes>
   16bca:	|                              addq.l #4,sp
   16bcc:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   16bd0:	|                              move.l 136(sp),d0
   16bd4:	|                              lsl.l #3,d0
   16bd6:	|                              move.l d0,98(sp)
   16bda:	|                              clr.l 94(sp)
   16bde:	|                              move.l 1c9a8 <SysBase>,d0
   16be4:	|                              movea.l d0,a6
   16be6:	|                              move.l 98(sp),d0
   16bea:	|                              move.l 94(sp),d1
   16bee:	|                              jsr -684(a6)
   16bf2:	|                              move.l d0,90(sp)
   16bf6:	|                              move.l 90(sp),d0
   16bfa:	|                              movea.l 1cac4 <currentFloor>,a0
   16c00:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   16c04:	|                              movea.l 1cac4 <currentFloor>,a0
   16c0a:	|                              move.l 4(a0),d0
   16c0e:	|                          /-- bne.s 16c24 <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   16c10:	|                          |   pea 1a119 <newfatal.c.307beca7+0x131>
   16c16:	|                          |   jsr 17232 <KPrintF>
   16c1c:	|                          |   addq.l #4,sp
		return FALSE;
   16c1e:	|                          |   clr.w d0
   16c20:	+--------------------------|-- bra.w 1714c <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   16c24:	|                          \-> clr.l 132(sp)
   16c28:	|                          /-- bra.s 16c7c <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   16c2a:	|                       /--|-> move.l 1c990 <bigDataFile>,d1
   16c30:	|                       |  |   movea.l 1cac4 <currentFloor>,a0
   16c36:	|                       |  |   movea.l 4(a0),a0
   16c3a:	|                       |  |   move.l 132(sp),d0
   16c3e:	|                       |  |   lsl.l #3,d0
   16c40:	|                       |  |   lea (0,a0,d0.l),a2
   16c44:	|                       |  |   move.l d1,-(sp)
   16c46:	|                       |  |   jsr 6bc <get2bytes>
   16c4c:	|                       |  |   addq.l #4,sp
   16c4e:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   16c50:	|                       |  |   move.l 1c990 <bigDataFile>,d1
   16c56:	|                       |  |   movea.l 1cac4 <currentFloor>,a0
   16c5c:	|                       |  |   movea.l 4(a0),a0
   16c60:	|                       |  |   move.l 132(sp),d0
   16c64:	|                       |  |   lsl.l #3,d0
   16c66:	|                       |  |   lea (0,a0,d0.l),a2
   16c6a:	|                       |  |   move.l d1,-(sp)
   16c6c:	|                       |  |   jsr 6bc <get2bytes>
   16c72:	|                       |  |   addq.l #4,sp
   16c74:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   16c78:	|                       |  |   addq.l #1,132(sp)
   16c7c:	|                       |  \-> move.l 132(sp),d0
   16c80:	|                       |      cmp.l 136(sp),d0
   16c84:	|                       \----- blt.s 16c2a <setFloor+0x24e>
	}

	finishAccess ();
   16c86:	|                              jsr 6c74 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16c8c:	|                              movea.l 1cac4 <currentFloor>,a0
   16c92:	|                              move.l 8(a0),d0
   16c96:	|                              add.l d0,d0
   16c98:	|                              add.l d0,d0
   16c9a:	|                              move.l d0,86(sp)
   16c9e:	|                              clr.l 82(sp)
   16ca2:	|                              move.l 1c9a8 <SysBase>,d0
   16ca8:	|                              movea.l d0,a6
   16caa:	|                              move.l 86(sp),d0
   16cae:	|                              move.l 82(sp),d1
   16cb2:	|                              jsr -684(a6)
   16cb6:	|                              move.l d0,78(sp)
   16cba:	|                              move.l 78(sp),d0
   16cbe:	|                              movea.l 1cac4 <currentFloor>,a0
   16cc4:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16cc8:	|                              movea.l 1cac4 <currentFloor>,a0
   16cce:	|                              move.l 8(a0),d0
   16cd2:	|                              add.l d0,d0
   16cd4:	|                              add.l d0,d0
   16cd6:	|                              move.l d0,74(sp)
   16cda:	|                              clr.l 70(sp)
   16cde:	|                              move.l 1c9a8 <SysBase>,d0
   16ce4:	|                              movea.l d0,a6
   16ce6:	|                              move.l 74(sp),d0
   16cea:	|                              move.l 70(sp),d1
   16cee:	|                              jsr -684(a6)
   16cf2:	|                              move.l d0,66(sp)
   16cf6:	|                              move.l 66(sp),d0
   16cfa:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   16cfe:	|                              movea.l 1cac4 <currentFloor>,a0
   16d04:	|                              move.l 16(a0),d0
   16d08:	|                          /-- bne.s 16d1e <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   16d0a:	|                          |   pea 1a119 <newfatal.c.307beca7+0x131>
   16d10:	|                          |   jsr 17232 <KPrintF>
   16d16:	|                          |   addq.l #4,sp
		return FALSE;
   16d18:	|                          |   clr.w d0
   16d1a:	+--------------------------|-- bra.w 1714c <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16d1e:	|                          \-> clr.l 136(sp)
   16d22:	|                    /-------- bra.w 16e46 <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16d26:	|                 /--|-------> movea.l 1cac4 <currentFloor>,a0
   16d2c:	|                 |  |         move.l 8(a0),d0
   16d30:	|                 |  |         add.l d0,d0
   16d32:	|                 |  |         add.l d0,d0
   16d34:	|                 |  |         move.l d0,50(sp)
   16d38:	|                 |  |         clr.l 46(sp)
   16d3c:	|                 |  |         move.l 1c9a8 <SysBase>,d0
   16d42:	|                 |  |         movea.l d0,a6
   16d44:	|                 |  |         move.l 50(sp),d0
   16d48:	|                 |  |         move.l 46(sp),d1
   16d4c:	|                 |  |         jsr -684(a6)
   16d50:	|                 |  |         move.l d0,42(sp)
   16d54:	|                 |  |         move.l 42(sp),d0
   16d58:	|                 |  |         movea.l 1cac4 <currentFloor>,a0
   16d5e:	|                 |  |         movea.l 16(a0),a0
   16d62:	|                 |  |         move.l 136(sp),d1
   16d66:	|                 |  |         add.l d1,d1
   16d68:	|                 |  |         add.l d1,d1
   16d6a:	|                 |  |         adda.l d1,a0
   16d6c:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16d6e:	|                 |  |         movea.l 1cac4 <currentFloor>,a0
   16d74:	|                 |  |         move.l 8(a0),d0
   16d78:	|                 |  |         add.l d0,d0
   16d7a:	|                 |  |         add.l d0,d0
   16d7c:	|                 |  |         move.l d0,38(sp)
   16d80:	|                 |  |         clr.l 34(sp)
   16d84:	|                 |  |         move.l 1c9a8 <SysBase>,d0
   16d8a:	|                 |  |         movea.l d0,a6
   16d8c:	|                 |  |         move.l 38(sp),d0
   16d90:	|                 |  |         move.l 34(sp),d1
   16d94:	|                 |  |         jsr -684(a6)
   16d98:	|                 |  |         move.l d0,30(sp)
   16d9c:	|                 |  |         move.l 30(sp),d1
   16da0:	|                 |  |         move.l 136(sp),d0
   16da4:	|                 |  |         add.l d0,d0
   16da6:	|                 |  |         add.l d0,d0
   16da8:	|                 |  |         movea.l 62(sp),a0
   16dac:	|                 |  |         adda.l d0,a0
   16dae:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   16db0:	|                 |  |         movea.l 1cac4 <currentFloor>,a0
   16db6:	|                 |  |         move.l 16(a0),d1
   16dba:	|                 |  |         move.l 136(sp),d0
   16dbe:	|                 |  |         add.l d0,d0
   16dc0:	|                 |  |         add.l d0,d0
   16dc2:	|                 |  |         movea.l d1,a0
   16dc4:	|                 |  |         adda.l d0,a0
   16dc6:	|                 |  |         move.l (a0),d0
   16dc8:	|                 |  |     /-- bne.s 16dde <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   16dca:	|                 |  |     |   pea 1a119 <newfatal.c.307beca7+0x131>
   16dd0:	|                 |  |     |   jsr 17232 <KPrintF>
   16dd6:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16dd8:	|                 |  |     |   clr.w d0
   16dda:	+-----------------|--|-----|-- bra.w 1714c <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16dde:	|                 |  |     \-> clr.l 132(sp)
   16de2:	|                 |  |     /-- bra.s 16e32 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   16de4:	|                 |  |  /--|-> movea.l 1cac4 <currentFloor>,a0
   16dea:	|                 |  |  |  |   move.l 16(a0),d1
   16dee:	|                 |  |  |  |   move.l 136(sp),d0
   16df2:	|                 |  |  |  |   add.l d0,d0
   16df4:	|                 |  |  |  |   add.l d0,d0
   16df6:	|                 |  |  |  |   movea.l d1,a0
   16df8:	|                 |  |  |  |   adda.l d0,a0
   16dfa:	|                 |  |  |  |   move.l (a0),d1
   16dfc:	|                 |  |  |  |   move.l 132(sp),d0
   16e00:	|                 |  |  |  |   add.l d0,d0
   16e02:	|                 |  |  |  |   add.l d0,d0
   16e04:	|                 |  |  |  |   movea.l d1,a0
   16e06:	|                 |  |  |  |   adda.l d0,a0
   16e08:	|                 |  |  |  |   moveq #-1,d1
   16e0a:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   16e0c:	|                 |  |  |  |   move.l 136(sp),d0
   16e10:	|                 |  |  |  |   add.l d0,d0
   16e12:	|                 |  |  |  |   add.l d0,d0
   16e14:	|                 |  |  |  |   movea.l 62(sp),a0
   16e18:	|                 |  |  |  |   adda.l d0,a0
   16e1a:	|                 |  |  |  |   move.l (a0),d1
   16e1c:	|                 |  |  |  |   move.l 132(sp),d0
   16e20:	|                 |  |  |  |   add.l d0,d0
   16e22:	|                 |  |  |  |   add.l d0,d0
   16e24:	|                 |  |  |  |   movea.l d1,a0
   16e26:	|                 |  |  |  |   adda.l d0,a0
   16e28:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16e2e:	|                 |  |  |  |   addq.l #1,132(sp)
   16e32:	|                 |  |  |  \-> movea.l 1cac4 <currentFloor>,a0
   16e38:	|                 |  |  |      move.l 8(a0),d0
   16e3c:	|                 |  |  |      cmp.l 132(sp),d0
   16e40:	|                 |  |  \----- bgt.s 16de4 <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16e42:	|                 |  |         addq.l #1,136(sp)
   16e46:	|                 |  \-------> movea.l 1cac4 <currentFloor>,a0
   16e4c:	|                 |            move.l 8(a0),d0
   16e50:	|                 |            cmp.l 136(sp),d0
   16e54:	|                 \----------- bgt.w 16d26 <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16e58:	|                              clr.l 136(sp)
   16e5c:	|              /-------------- bra.w 16f62 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16e60:	|           /--|-------------> clr.l 132(sp)
   16e64:	|           |  |     /-------- bra.w 16f4c <setFloor+0x570>
			if (i != j) {
   16e68:	|           |  |  /--|-------> move.l 136(sp),d0
   16e6c:	|           |  |  |  |         cmp.l 132(sp),d0
   16e70:	|           |  |  |  |     /-- beq.w 16f02 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   16e74:	|           |  |  |  |     |   movea.l 1cac4 <currentFloor>,a0
   16e7a:	|           |  |  |  |     |   move.l 12(a0),d1
   16e7e:	|           |  |  |  |     |   move.l 132(sp),d0
   16e82:	|           |  |  |  |     |   lsl.l #3,d0
   16e84:	|           |  |  |  |     |   movea.l d1,a1
   16e86:	|           |  |  |  |     |   adda.l d0,a1
   16e88:	|           |  |  |  |     |   movea.l 1cac4 <currentFloor>,a0
   16e8e:	|           |  |  |  |     |   move.l 12(a0),d1
   16e92:	|           |  |  |  |     |   move.l 136(sp),d0
   16e96:	|           |  |  |  |     |   lsl.l #3,d0
   16e98:	|           |  |  |  |     |   movea.l d1,a0
   16e9a:	|           |  |  |  |     |   adda.l d0,a0
   16e9c:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   16ea0:	|           |  |  |  |     |   move.l (a1),-(sp)
   16ea2:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   16ea6:	|           |  |  |  |     |   move.l (a0),-(sp)
   16ea8:	|           |  |  |  |     |   jsr 16734 <polysShareSide>
   16eae:	|           |  |  |  |     |   lea 16(sp),sp
   16eb2:	|           |  |  |  |     |   tst.w d0
   16eb4:	|           |  |  |  |  /--|-- beq.w 16f48 <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   16eb8:	|           |  |  |  |  |  |   movea.l 1cac4 <currentFloor>,a0
   16ebe:	|           |  |  |  |  |  |   move.l 16(a0),d1
   16ec2:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16ec6:	|           |  |  |  |  |  |   add.l d0,d0
   16ec8:	|           |  |  |  |  |  |   add.l d0,d0
   16eca:	|           |  |  |  |  |  |   movea.l d1,a0
   16ecc:	|           |  |  |  |  |  |   adda.l d0,a0
   16ece:	|           |  |  |  |  |  |   move.l (a0),d1
   16ed0:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16ed4:	|           |  |  |  |  |  |   add.l d0,d0
   16ed6:	|           |  |  |  |  |  |   add.l d0,d0
   16ed8:	|           |  |  |  |  |  |   movea.l d1,a0
   16eda:	|           |  |  |  |  |  |   adda.l d0,a0
   16edc:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   16ee0:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16ee4:	|           |  |  |  |  |  |   add.l d0,d0
   16ee6:	|           |  |  |  |  |  |   add.l d0,d0
   16ee8:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   16eec:	|           |  |  |  |  |  |   adda.l d0,a0
   16eee:	|           |  |  |  |  |  |   move.l (a0),d1
   16ef0:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16ef4:	|           |  |  |  |  |  |   add.l d0,d0
   16ef6:	|           |  |  |  |  |  |   add.l d0,d0
   16ef8:	|           |  |  |  |  |  |   movea.l d1,a0
   16efa:	|           |  |  |  |  |  |   adda.l d0,a0
   16efc:	|           |  |  |  |  |  |   moveq #1,d1
   16efe:	|           |  |  |  |  |  |   move.l d1,(a0)
   16f00:	|           |  |  |  |  +--|-- bra.s 16f48 <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   16f02:	|           |  |  |  |  |  \-> movea.l 1cac4 <currentFloor>,a0
   16f08:	|           |  |  |  |  |      move.l 16(a0),d1
   16f0c:	|           |  |  |  |  |      move.l 136(sp),d0
   16f10:	|           |  |  |  |  |      add.l d0,d0
   16f12:	|           |  |  |  |  |      add.l d0,d0
   16f14:	|           |  |  |  |  |      movea.l d1,a0
   16f16:	|           |  |  |  |  |      adda.l d0,a0
   16f18:	|           |  |  |  |  |      move.l (a0),d1
   16f1a:	|           |  |  |  |  |      move.l 132(sp),d0
   16f1e:	|           |  |  |  |  |      add.l d0,d0
   16f20:	|           |  |  |  |  |      add.l d0,d0
   16f22:	|           |  |  |  |  |      movea.l d1,a0
   16f24:	|           |  |  |  |  |      adda.l d0,a0
   16f26:	|           |  |  |  |  |      moveq #-2,d0
   16f28:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   16f2a:	|           |  |  |  |  |      move.l 136(sp),d0
   16f2e:	|           |  |  |  |  |      add.l d0,d0
   16f30:	|           |  |  |  |  |      add.l d0,d0
   16f32:	|           |  |  |  |  |      movea.l 62(sp),a0
   16f36:	|           |  |  |  |  |      adda.l d0,a0
   16f38:	|           |  |  |  |  |      move.l (a0),d1
   16f3a:	|           |  |  |  |  |      move.l 132(sp),d0
   16f3e:	|           |  |  |  |  |      add.l d0,d0
   16f40:	|           |  |  |  |  |      add.l d0,d0
   16f42:	|           |  |  |  |  |      movea.l d1,a0
   16f44:	|           |  |  |  |  |      adda.l d0,a0
   16f46:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16f48:	|           |  |  |  |  \----> addq.l #1,132(sp)
   16f4c:	|           |  |  |  \-------> movea.l 1cac4 <currentFloor>,a0
   16f52:	|           |  |  |            move.l 8(a0),d0
   16f56:	|           |  |  |            cmp.l 132(sp),d0
   16f5a:	|           |  |  \----------- bgt.w 16e68 <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16f5e:	|           |  |               addq.l #1,136(sp)
   16f62:	|           |  \-------------> movea.l 1cac4 <currentFloor>,a0
   16f68:	|           |                  move.l 8(a0),d0
   16f6c:	|           |                  cmp.l 136(sp),d0
   16f70:	|           \----------------- bgt.w 16e60 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   16f74:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   16f78:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   16f7c:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16f80:	|  |                           clr.l 136(sp)
   16f84:	|  |     /-------------------- bra.w 170da <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16f88:	|  |  /--|-------------------> clr.l 132(sp)
   16f8c:	|  |  |  |     /-------------- bra.w 170c4 <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   16f90:	|  |  |  |  /--|-------------> movea.l 1cac4 <currentFloor>,a0
   16f96:	|  |  |  |  |  |               move.l 16(a0),d1
   16f9a:	|  |  |  |  |  |               move.l 136(sp),d0
   16f9e:	|  |  |  |  |  |               add.l d0,d0
   16fa0:	|  |  |  |  |  |               add.l d0,d0
   16fa2:	|  |  |  |  |  |               movea.l d1,a0
   16fa4:	|  |  |  |  |  |               adda.l d0,a0
   16fa6:	|  |  |  |  |  |               move.l (a0),d1
   16fa8:	|  |  |  |  |  |               move.l 132(sp),d0
   16fac:	|  |  |  |  |  |               add.l d0,d0
   16fae:	|  |  |  |  |  |               add.l d0,d0
   16fb0:	|  |  |  |  |  |               movea.l d1,a0
   16fb2:	|  |  |  |  |  |               adda.l d0,a0
   16fb4:	|  |  |  |  |  |               move.l (a0),d0
   16fb6:	|  |  |  |  |  |               moveq #-1,d1
   16fb8:	|  |  |  |  |  |               cmp.l d0,d1
   16fba:	|  |  |  |  |  |  /----------- bne.w 170c0 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   16fbe:	|  |  |  |  |  |  |            clr.l 122(sp)
   16fc2:	|  |  |  |  |  |  |     /----- bra.w 170ae <setFloor+0x6d2>
						if (d != i && d != j) {
   16fc6:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   16fca:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   16fce:	|  |  |  |  |  |  |  |  |  /-- beq.w 170aa <setFloor+0x6ce>
   16fd2:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   16fd6:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   16fda:	|  |  |  |  |  |  |  |  |  +-- beq.w 170aa <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   16fde:	|  |  |  |  |  |  |  |  |  |   movea.l 1cac4 <currentFloor>,a0
   16fe4:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16fe8:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16fec:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16fee:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ff0:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16ff2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16ff4:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16ff6:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16ffa:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ffc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ffe:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17000:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17002:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   17004:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   17008:	|  |  |  |  |  |  |  |  |  +-- bne.w 170aa <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   1700c:	|  |  |  |  |  |  |  |  |  |   movea.l 1cac4 <currentFloor>,a0
   17012:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   17016:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   1701a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1701c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1701e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17020:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17022:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17024:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   17028:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1702a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1702c:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1702e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17030:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   17032:	|  |  |  |  |  |  |  |  |  +-- bmi.s 170aa <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   17034:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   17038:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1703a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1703c:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   17040:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17042:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17044:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   17048:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1704a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1704c:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1704e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17050:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   17052:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   17056:	|  |  |  |  |  |  |  |  |  +-- bgt.s 170aa <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   17058:	|  |  |  |  |  |  |  |  |  |   movea.l 1cac4 <currentFloor>,a0
   1705e:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   17062:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   17066:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17068:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1706a:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1706c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1706e:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17070:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   17074:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17076:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17078:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1707a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1707c:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   17080:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   17084:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17086:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17088:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   1708c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1708e:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17090:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   17094:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17096:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17098:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1709a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1709c:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   170a0:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   170a2:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   170a4:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   170aa:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   170ae:	|  |  |  |  |  |  |  |  \----> movea.l 1cac4 <currentFloor>,a0
   170b4:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   170b8:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   170bc:	|  |  |  |  |  |  |  \-------- bgt.w 16fc6 <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   170c0:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   170c4:	|  |  |  |  |  \-------------> movea.l 1cac4 <currentFloor>,a0
   170ca:	|  |  |  |  |                  move.l 8(a0),d0
   170ce:	|  |  |  |  |                  cmp.l 132(sp),d0
   170d2:	|  |  |  |  \----------------- bgt.w 16f90 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   170d6:	|  |  |  |                     addq.l #1,136(sp)
   170da:	|  |  |  \-------------------> movea.l 1cac4 <currentFloor>,a0
   170e0:	|  |  |                        move.l 8(a0),d0
   170e4:	|  |  |                        cmp.l 136(sp),d0
   170e8:	|  |  \----------------------- bgt.w 16f88 <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   170ec:	|  |                           tst.w 130(sp)
   170f0:	|  \-------------------------- bne.w 16f78 <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   170f4:	|                              clr.l 136(sp)
   170f8:	|                          /-- bra.s 17120 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   170fa:	|                       /--|-> move.l 136(sp),d0
   170fe:	|                       |  |   add.l d0,d0
   17100:	|                       |  |   add.l d0,d0
   17102:	|                       |  |   movea.l 62(sp),a0
   17106:	|                       |  |   adda.l d0,a0
   17108:	|                       |  |   move.l (a0),54(sp)
   1710c:	|                       |  |   move.l 1c9a8 <SysBase>,d0
   17112:	|                       |  |   movea.l d0,a6
   17114:	|                       |  |   movea.l 54(sp),a1
   17118:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1711c:	|                       |  |   addq.l #1,136(sp)
   17120:	|                       |  \-> movea.l 1cac4 <currentFloor>,a0
   17126:	|                       |      move.l 8(a0),d0
   1712a:	|                       |      cmp.l 136(sp),d0
   1712e:	|                       \----- bgt.s 170fa <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   17130:	|                              move.l 62(sp),58(sp)
   17136:	|                              move.l 1c9a8 <SysBase>,d0
   1713c:	|                              movea.l d0,a6
   1713e:	|                              movea.l 58(sp),a1
   17142:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   17146:	|                              clr.l 62(sp)

	return TRUE;
   1714a:	|                              moveq #1,d0
}
   1714c:	\----------------------------> movea.l (sp)+,a2
   1714e:	                               movea.l (sp)+,a6
   17150:	                               lea 132(sp),sp
   17154:	                               rts

00017156 <setFloorNull>:

void setFloorNull () {
	killFloor ();
   17156:	jsr 16644 <killFloor>
	noFloor ();
   1715c:	jsr 16568 <noFloor>
   17162:	nop
   17164:	rts

00017166 <WaitVbl>:
void WaitVbl() {
   17166:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   17168:	   /-> movea.l #14675972,a0
   1716e:	   |   move.l (a0),d0
   17170:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   17172:	   |   move.l (sp),d0
   17174:	   |   andi.l #130816,d0
   1717a:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   1717c:	   |   move.l (sp),d0
   1717e:	   |   cmpi.l #76800,d0
   17184:	   \-- beq.s 17168 <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   17186:	/----> movea.l #14675972,a0
   1718c:	|      move.l (a0),d0
   1718e:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   17192:	|      move.l 4(sp),d0
   17196:	|      andi.l #130816,d0
   1719c:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   171a0:	|      move.l 4(sp),d0
   171a4:	|      cmpi.l #76800,d0
   171aa:	|  /-- beq.s 171ae <WaitVbl+0x48>
	while (1) {
   171ac:	\--|-- bra.s 17186 <WaitVbl+0x20>
			break;
   171ae:	   \-> nop
}
   171b0:	       nop
   171b2:	       addq.l #8,sp
   171b4:	       rts

000171b6 <memset>:
void* memset(void *dest, int val, unsigned long len) {
   171b6:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   171b8:	       move.l 8(sp),(sp)
	while(len-- > 0)
   171bc:	   /-- bra.s 171ce <memset+0x18>
		*ptr++ = val;
   171be:	/--|-> move.l (sp),d0
   171c0:	|  |   move.l d0,d1
   171c2:	|  |   addq.l #1,d1
   171c4:	|  |   move.l d1,(sp)
   171c6:	|  |   move.l 12(sp),d1
   171ca:	|  |   movea.l d0,a0
   171cc:	|  |   move.b d1,(a0)
	while(len-- > 0)
   171ce:	|  \-> move.l 16(sp),d0
   171d2:	|      move.l d0,d1
   171d4:	|      subq.l #1,d1
   171d6:	|      move.l d1,16(sp)
   171da:	|      tst.l d0
   171dc:	\----- bne.s 171be <memset+0x8>
	return dest;
   171de:	       move.l 8(sp),d0
}
   171e2:	       addq.l #4,sp
   171e4:	       rts

000171e6 <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   171e6:	       subq.l #8,sp
   171e8:	       move.l d2,-(sp)
	char *d = (char *)dest;
   171ea:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   171f0:	       move.l 20(sp),4(sp)
	while(len--)
   171f6:	   /-- bra.s 17218 <memcpy+0x32>
		*d++ = *s++;
   171f8:	/--|-> move.l 4(sp),d1
   171fc:	|  |   move.l d1,d0
   171fe:	|  |   addq.l #1,d0
   17200:	|  |   move.l d0,4(sp)
   17204:	|  |   move.l 8(sp),d0
   17208:	|  |   move.l d0,d2
   1720a:	|  |   addq.l #1,d2
   1720c:	|  |   move.l d2,8(sp)
   17210:	|  |   movea.l d1,a0
   17212:	|  |   move.b (a0),d1
   17214:	|  |   movea.l d0,a0
   17216:	|  |   move.b d1,(a0)
	while(len--)
   17218:	|  \-> move.l 24(sp),d0
   1721c:	|      move.l d0,d1
   1721e:	|      subq.l #1,d1
   17220:	|      move.l d1,24(sp)
   17224:	|      tst.l d0
   17226:	\----- bne.s 171f8 <memcpy+0x12>
	return dest;
   17228:	       move.l 16(sp),d0
}
   1722c:	       move.l (sp)+,d2
   1722e:	       addq.l #8,sp
   17230:	       rts

00017232 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   17232:	       lea -128(sp),sp
   17236:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   1723a:	       move.w f0ff60 <gcc8_c_support.c.1fed348d+0xec4cdf>,d0
   17240:	       cmpi.w #20153,d0
   17244:	   /-- beq.s 17268 <KPrintF+0x36>
   17246:	   |   cmpi.w #-24562,d0
   1724a:	   +-- beq.s 17268 <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   1724c:	   |   movea.l 1c9a8 <SysBase>,a6
   17252:	   |   movea.l 144(sp),a0
   17256:	   |   lea 148(sp),a1
   1725a:	   |   lea 17cee <KPutCharX>,a2
   17260:	   |   suba.l a3,a3
   17262:	   |   jsr -522(a6)
}
   17266:	/--|-- bra.s 17292 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   17268:	|  \-> movea.l 1c9a8 <SysBase>,a6
   1726e:	|      movea.l 144(sp),a0
   17272:	|      lea 148(sp),a1
   17276:	|      lea 17cfc <PutChar>,a2
   1727c:	|      lea 12(sp),a3
   17280:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   17284:	|      move.l a3,-(sp)
   17286:	|      pea 56 <_start+0x56>
   1728a:	|      jsr f0ff60 <gcc8_c_support.c.1fed348d+0xec4cdf>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   17290:	|      addq.l #8,sp
}
   17292:	\----> movem.l (sp)+,a2-a3/a6
   17296:	       lea 128(sp),sp
   1729a:	       rts

0001729c <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   1729c:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   1729e:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   172a4:	       movea.l (sp),a0
   172a6:	       move.w (a0),d0
   172a8:	       cmpi.w #20153,d0
   172ac:	   /-- beq.s 172b8 <debug_cmd+0x1c>
   172ae:	   |   movea.l (sp),a0
   172b0:	   |   move.w (a0),d0
   172b2:	   |   cmpi.w #-24562,d0
   172b6:	/--|-- bne.s 172d6 <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   172b8:	|  \-> move.l 20(sp),-(sp)
   172bc:	|      move.l 20(sp),-(sp)
   172c0:	|      move.l 20(sp),-(sp)
   172c4:	|      move.l 20(sp),-(sp)
   172c8:	|      pea 58 <_start+0x58>
   172cc:	|      movea.l 20(sp),a0
   172d0:	|      jsr (a0)
   172d2:	|      lea 20(sp),sp
	}
}
   172d6:	\----> nop
   172d8:	       addq.l #4,sp
   172da:	       rts

000172dc <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   172dc:	       move.l d2,-(sp)
	while(*source && --num > 0)
   172de:	   /-- bra.s 17300 <my_strncpy+0x24>
		*destination++ = *source++;
   172e0:	/--|-> move.l 12(sp),d1
   172e4:	|  |   move.l d1,d0
   172e6:	|  |   addq.l #1,d0
   172e8:	|  |   move.l d0,12(sp)
   172ec:	|  |   move.l 8(sp),d0
   172f0:	|  |   move.l d0,d2
   172f2:	|  |   addq.l #1,d2
   172f4:	|  |   move.l d2,8(sp)
   172f8:	|  |   movea.l d1,a0
   172fa:	|  |   move.b (a0),d1
   172fc:	|  |   movea.l d0,a0
   172fe:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   17300:	|  \-> movea.l 12(sp),a0
   17304:	|      move.b (a0),d0
   17306:	|  /-- beq.s 1730e <my_strncpy+0x32>
   17308:	|  |   subq.l #1,16(sp)
   1730c:	\--|-- bne.s 172e0 <my_strncpy+0x4>
	*destination = '\0';
   1730e:	   \-> movea.l 8(sp),a0
   17312:	       clr.b (a0)
}
   17314:	       nop
   17316:	       move.l (sp)+,d2
   17318:	       rts

0001731a <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   1731a:	    lea -60(sp),sp
   1731e:	    movea.l 72(sp),a1
   17322:	    movea.l 76(sp),a0
   17326:	    move.l 80(sp),d1
   1732a:	    move.l 84(sp),d0
   1732e:	    movea.w a1,a1
   17330:	    move.w a1,8(sp)
   17334:	    movea.w a0,a0
   17336:	    move.w a0,6(sp)
   1733a:	    move.w d1,d1
   1733c:	    move.w d1,4(sp)
   17340:	    move.w d0,d0
   17342:	    move.w d0,2(sp)
	struct debug_resource resource = {
   17346:	    lea 10(sp),a0
   1734a:	    clr.l (a0)
   1734c:	    addq.l #4,a0
   1734e:	    clr.l (a0)
   17350:	    addq.l #4,a0
   17352:	    clr.l (a0)
   17354:	    addq.l #4,a0
   17356:	    clr.l (a0)
   17358:	    addq.l #4,a0
   1735a:	    clr.l (a0)
   1735c:	    addq.l #4,a0
   1735e:	    clr.l (a0)
   17360:	    addq.l #4,a0
   17362:	    clr.l (a0)
   17364:	    addq.l #4,a0
   17366:	    clr.l (a0)
   17368:	    addq.l #4,a0
   1736a:	    clr.l (a0)
   1736c:	    addq.l #4,a0
   1736e:	    clr.l (a0)
   17370:	    addq.l #4,a0
   17372:	    clr.l (a0)
   17374:	    addq.l #4,a0
   17376:	    clr.l (a0)
   17378:	    addq.l #4,a0
   1737a:	    clr.w (a0)
   1737c:	    addq.l #2,a0
		.address = (unsigned int)addr,
   1737e:	    move.l 64(sp),d0
	struct debug_resource resource = {
   17382:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   17386:	    move.w 8(sp),d0
   1738a:	/-- bpl.s 1738e <debug_register_bitmap+0x74>
   1738c:	|   addq.w #7,d0
   1738e:	\-> asr.w #3,d0
   17390:	    movea.w d0,a0
   17392:	    movea.w 6(sp),a1
   17396:	    move.l a1,-(sp)
   17398:	    move.l a0,-(sp)
   1739a:	    jsr 17be6 <__mulsi3>
   173a0:	    addq.l #8,sp
   173a2:	    movea.w 4(sp),a0
   173a6:	    move.l a0,-(sp)
   173a8:	    move.l d0,-(sp)
   173aa:	    jsr 17be6 <__mulsi3>
   173b0:	    addq.l #8,sp
	struct debug_resource resource = {
   173b2:	    move.l d0,14(sp)
   173b6:	    move.w 2(sp),52(sp)
   173bc:	    move.w 8(sp),54(sp)
   173c2:	    move.w 6(sp),56(sp)
   173c8:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   173ce:	    moveq #0,d0
   173d0:	    move.w 2(sp),d0
   173d4:	    moveq #2,d1
   173d6:	    and.l d1,d0
   173d8:	/-- beq.s 173e4 <debug_register_bitmap+0xca>
		resource.size *= 2;
   173da:	|   move.l 14(sp),d0
   173de:	|   add.l d0,d0
   173e0:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   173e4:	\-> pea 20 <_start+0x20>
   173e8:	    move.l 72(sp),-(sp)
   173ec:	    lea 18(sp),a0
   173f0:	    move.l a0,d0
   173f2:	    addq.l #8,d0
   173f4:	    move.l d0,-(sp)
   173f6:	    jsr 172dc <my_strncpy>
   173fc:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   17400:	    lea 10(sp),a0
   17404:	    clr.l -(sp)
   17406:	    clr.l -(sp)
   17408:	    move.l a0,-(sp)
   1740a:	    pea 4 <_start+0x4>
   1740e:	    jsr 1729c <debug_cmd>
   17414:	    lea 16(sp),sp
}
   17418:	    nop
   1741a:	    lea 60(sp),sp
   1741e:	    rts

00017420 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   17420:	lea -12(sp),sp
   17424:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   17426:	move.l 20(sp),12(sp)
   1742c:	move.l 24(sp),8(sp)
   17432:	move.l 1c9b8 <MathIeeeSingBasBase>,d0
   17438:	movea.l d0,a6
   1743a:	move.l 12(sp),d0
   1743e:	move.l 8(sp),d1
   17442:	jsr -66(a6)
   17446:	move.l d0,4(sp)
   1744a:	move.l 4(sp),d0
}
   1744e:	movea.l (sp)+,a6
   17450:	lea 12(sp),sp
   17454:	rts

00017456 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   17456:	lea -32(sp),sp
   1745a:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   1745e:	move.l 48(sp),36(sp)
   17464:	move.l 52(sp),40(sp)
   1746a:	move.l 56(sp),28(sp)
   17470:	move.l 60(sp),32(sp)
   17476:	move.l 1c9c0 <MathIeeeDoubBasBase>,d0
   1747c:	movea.l d0,a6
   1747e:	move.l 36(sp),d0
   17482:	move.l 40(sp),d1
   17486:	move.l 28(sp),d2
   1748a:	move.l 32(sp),d3
   1748e:	jsr -66(a6)
   17492:	move.l d0,12(sp)
   17496:	move.l d1,16(sp)
   1749a:	move.l 12(sp),20(sp)
   174a0:	move.l 16(sp),24(sp)
   174a6:	move.l 20(sp),d0
   174aa:	move.l 24(sp),d1
}
   174ae:	movem.l (sp)+,d2-d3/a6
   174b2:	lea 32(sp),sp
   174b6:	rts

000174b8 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   174b8:	lea -32(sp),sp
   174bc:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   174c0:	move.l 48(sp),36(sp)
   174c6:	move.l 52(sp),40(sp)
   174cc:	move.l 56(sp),28(sp)
   174d2:	move.l 60(sp),32(sp)
   174d8:	move.l 1c9c0 <MathIeeeDoubBasBase>,d0
   174de:	movea.l d0,a6
   174e0:	move.l 36(sp),d0
   174e4:	move.l 40(sp),d1
   174e8:	move.l 28(sp),d2
   174ec:	move.l 32(sp),d3
   174f0:	jsr -84(a6)
   174f4:	move.l d0,12(sp)
   174f8:	move.l d1,16(sp)
   174fc:	move.l 12(sp),20(sp)
   17502:	move.l 16(sp),24(sp)
   17508:	move.l 20(sp),d0
   1750c:	move.l 24(sp),d1
}
   17510:	movem.l (sp)+,d2-d3/a6
   17514:	lea 32(sp),sp
   17518:	rts

0001751a <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   1751a:	lea -12(sp),sp
   1751e:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   17520:	move.l 20(sp),12(sp)
   17526:	move.l 24(sp),8(sp)
   1752c:	move.l 1c9b8 <MathIeeeSingBasBase>,d0
   17532:	movea.l d0,a6
   17534:	move.l 12(sp),d0
   17538:	move.l 8(sp),d1
   1753c:	jsr -84(a6)
   17540:	move.l d0,4(sp)
   17544:	move.l 4(sp),d0
}
   17548:	movea.l (sp)+,a6
   1754a:	lea 12(sp),sp
   1754e:	rts

00017550 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   17550:	lea -12(sp),sp
   17554:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17556:	move.l 20(sp),12(sp)
   1755c:	move.l 24(sp),8(sp)
   17562:	move.l 1c9b8 <MathIeeeSingBasBase>,d0
   17568:	movea.l d0,a6
   1756a:	move.l 12(sp),d0
   1756e:	move.l 8(sp),d1
   17572:	jsr -42(a6)
   17576:	move.l d0,4(sp)
   1757a:	move.l 4(sp),d0
}
   1757e:	movea.l (sp)+,a6
   17580:	lea 12(sp),sp
   17584:	rts

00017586 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   17586:	lea -20(sp),sp
   1758a:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   1758c:	move.l 28(sp),20(sp)
   17592:	move.l 1c9c4 <MathIeeeDoubTransBase>,d0
   17598:	movea.l d0,a6
   1759a:	move.l 20(sp),d0
   1759e:	jsr -108(a6)
   175a2:	move.l d0,4(sp)
   175a6:	move.l d1,8(sp)
   175aa:	move.l 4(sp),12(sp)
   175b0:	move.l 8(sp),16(sp)
   175b6:	move.l 12(sp),d0
   175ba:	move.l 16(sp),d1
}
   175be:	movea.l (sp)+,a6
   175c0:	lea 20(sp),sp
   175c4:	rts

000175c6 <__fixdfsi>:

LONG __fixdfsi(DOUBLE value) {
   175c6:	lea -12(sp),sp
   175ca:	move.l a6,-(sp)
	return IEEEDPFix(value);
   175cc:	move.l 20(sp),8(sp)
   175d2:	move.l 24(sp),12(sp)
   175d8:	move.l 1c9c0 <MathIeeeDoubBasBase>,d0
   175de:	movea.l d0,a6
   175e0:	move.l 8(sp),d0
   175e4:	move.l 12(sp),d1
   175e8:	jsr -30(a6)
   175ec:	move.l d0,4(sp)
   175f0:	move.l 4(sp),d0
}
   175f4:	movea.l (sp)+,a6
   175f6:	lea 12(sp),sp
   175fa:	rts

000175fc <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   175fc:	subq.l #8,sp
   175fe:	move.l a6,-(sp)
	return IEEESPFix(value);
   17600:	move.l 16(sp),8(sp)
   17606:	move.l 1c9b8 <MathIeeeSingBasBase>,d0
   1760c:	movea.l d0,a6
   1760e:	move.l 8(sp),d0
   17612:	jsr -30(a6)
   17616:	move.l d0,4(sp)
   1761a:	move.l 4(sp),d0
}
   1761e:	movea.l (sp)+,a6
   17620:	addq.l #8,sp
   17622:	rts

00017624 <__floatsidf>:


DOUBLE __floatsidf (int i) {
   17624:	lea -20(sp),sp
   17628:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   1762a:	move.l 28(sp),20(sp)
   17630:	move.l 1c9c0 <MathIeeeDoubBasBase>,d0
   17636:	movea.l d0,a6
   17638:	move.l 20(sp),d0
   1763c:	jsr -36(a6)
   17640:	move.l d0,4(sp)
   17644:	move.l d1,8(sp)
   17648:	move.l 4(sp),12(sp)
   1764e:	move.l 8(sp),16(sp)
   17654:	move.l 12(sp),d0
   17658:	move.l 16(sp),d1
}
   1765c:	movea.l (sp)+,a6
   1765e:	lea 20(sp),sp
   17662:	rts

00017664 <__floatsisf>:

FLOAT __floatsisf(int i) {
   17664:	subq.l #8,sp
   17666:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   17668:	move.l 16(sp),8(sp)
   1766e:	move.l 1c9b8 <MathIeeeSingBasBase>,d0
   17674:	movea.l d0,a6
   17676:	move.l 8(sp),d0
   1767a:	jsr -36(a6)
   1767e:	move.l d0,4(sp)
   17682:	move.l 4(sp),d0
}
   17686:	movea.l (sp)+,a6
   17688:	addq.l #8,sp
   1768a:	rts

0001768c <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   1768c:	subq.l #8,sp
   1768e:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   17690:	move.l 16(sp),8(sp)
   17696:	move.l 1c9b8 <MathIeeeSingBasBase>,d0
   1769c:	movea.l d0,a6
   1769e:	move.l 8(sp),d0
   176a2:	jsr -36(a6)
   176a6:	move.l d0,4(sp)
   176aa:	move.l 4(sp),d0
}
   176ae:	movea.l (sp)+,a6
   176b0:	addq.l #8,sp
   176b2:	rts

000176b4 <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   176b4:	lea -32(sp),sp
   176b8:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   176bc:	move.l 48(sp),36(sp)
   176c2:	move.l 52(sp),40(sp)
   176c8:	move.l 56(sp),28(sp)
   176ce:	move.l 60(sp),32(sp)
   176d4:	move.l 1c9c0 <MathIeeeDoubBasBase>,d0
   176da:	movea.l d0,a6
   176dc:	move.l 36(sp),d0
   176e0:	move.l 40(sp),d1
   176e4:	move.l 28(sp),d2
   176e8:	move.l 32(sp),d3
   176ec:	jsr -78(a6)
   176f0:	move.l d0,12(sp)
   176f4:	move.l d1,16(sp)
   176f8:	move.l 12(sp),20(sp)
   176fe:	move.l 16(sp),24(sp)
   17704:	move.l 20(sp),d0
   17708:	move.l 24(sp),d1
}
   1770c:	movem.l (sp)+,d2-d3/a6
   17710:	lea 32(sp),sp
   17714:	rts

00017716 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   17716:	lea -12(sp),sp
   1771a:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   1771c:	move.l 20(sp),12(sp)
   17722:	move.l 24(sp),8(sp)
   17728:	move.l 1c9b8 <MathIeeeSingBasBase>,d0
   1772e:	movea.l d0,a6
   17730:	move.l 12(sp),d0
   17734:	move.l 8(sp),d1
   17738:	jsr -78(a6)
   1773c:	move.l d0,4(sp)
   17740:	move.l 4(sp),d0
}
   17744:	movea.l (sp)+,a6
   17746:	lea 12(sp),sp
   1774a:	rts

0001774c <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   1774c:	lea -12(sp),sp
   17750:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17752:	move.l 20(sp),12(sp)
   17758:	move.l 24(sp),8(sp)
   1775e:	move.l 1c9b8 <MathIeeeSingBasBase>,d0
   17764:	movea.l d0,a6
   17766:	move.l 12(sp),d0
   1776a:	move.l 8(sp),d1
   1776e:	jsr -42(a6)
   17772:	move.l d0,4(sp)
   17776:	move.l 4(sp),d0
}
   1777a:	movea.l (sp)+,a6
   1777c:	lea 12(sp),sp
   17780:	rts

00017782 <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   17782:	lea -20(sp),sp
   17786:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   1778a:	move.l 36(sp),24(sp)
   17790:	move.l 40(sp),28(sp)
   17796:	move.l 44(sp),16(sp)
   1779c:	move.l 48(sp),20(sp)
   177a2:	move.l 1c9c0 <MathIeeeDoubBasBase>,d0
   177a8:	movea.l d0,a6
   177aa:	move.l 24(sp),d0
   177ae:	move.l 28(sp),d1
   177b2:	move.l 16(sp),d2
   177b6:	move.l 20(sp),d3
   177ba:	jsr -42(a6)
   177be:	move.l d0,12(sp)
   177c2:	move.l 12(sp),d0
}
   177c6:	movem.l (sp)+,d2-d3/a6
   177ca:	lea 20(sp),sp
   177ce:	rts

000177d0 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   177d0:	lea -12(sp),sp
   177d4:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   177d6:	move.l 20(sp),12(sp)
   177dc:	move.l 24(sp),8(sp)
   177e2:	move.l 1c9b8 <MathIeeeSingBasBase>,d0
   177e8:	movea.l d0,a6
   177ea:	move.l 12(sp),d0
   177ee:	move.l 8(sp),d1
   177f2:	jsr -42(a6)
   177f6:	move.l d0,4(sp)
   177fa:	move.l 4(sp),d0
}
   177fe:	movea.l (sp)+,a6
   17800:	lea 12(sp),sp
   17804:	rts

00017806 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   17806:	lea -12(sp),sp
   1780a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1780c:	move.l 20(sp),12(sp)
   17812:	move.l 24(sp),8(sp)
   17818:	move.l 1c9b8 <MathIeeeSingBasBase>,d0
   1781e:	movea.l d0,a6
   17820:	move.l 12(sp),d0
   17824:	move.l 8(sp),d1
   17828:	jsr -42(a6)
   1782c:	move.l d0,4(sp)
   17830:	move.l 4(sp),d0
}
   17834:	movea.l (sp)+,a6
   17836:	lea 12(sp),sp
   1783a:	rts

0001783c <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   1783c:	lea -20(sp),sp
   17840:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   17844:	move.l 36(sp),24(sp)
   1784a:	move.l 40(sp),28(sp)
   17850:	move.l 44(sp),16(sp)
   17856:	move.l 48(sp),20(sp)
   1785c:	move.l 1c9c0 <MathIeeeDoubBasBase>,d0
   17862:	movea.l d0,a6
   17864:	move.l 24(sp),d0
   17868:	move.l 28(sp),d1
   1786c:	move.l 16(sp),d2
   17870:	move.l 20(sp),d3
   17874:	jsr -42(a6)
   17878:	move.l d0,12(sp)
   1787c:	move.l 12(sp),d0
}
   17880:	movem.l (sp)+,d2-d3/a6
   17884:	lea 20(sp),sp
   17888:	rts

0001788a <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   1788a:	lea -12(sp),sp
   1788e:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17890:	move.l 20(sp),12(sp)
   17896:	move.l 24(sp),8(sp)
   1789c:	move.l 1c9b8 <MathIeeeSingBasBase>,d0
   178a2:	movea.l d0,a6
   178a4:	move.l 12(sp),d0
   178a8:	move.l 8(sp),d1
   178ac:	jsr -42(a6)
   178b0:	move.l d0,4(sp)
   178b4:	move.l 4(sp),d0
}
   178b8:	movea.l (sp)+,a6
   178ba:	lea 12(sp),sp
   178be:	rts

000178c0 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   178c0:	lea -12(sp),sp
   178c4:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   178c6:	move.l 20(sp),12(sp)
   178cc:	move.l 24(sp),8(sp)
   178d2:	move.l 1c9b8 <MathIeeeSingBasBase>,d0
   178d8:	movea.l d0,a6
   178da:	move.l 12(sp),d0
   178de:	move.l 8(sp),d1
   178e2:	jsr -42(a6)
   178e6:	move.l d0,4(sp)
   178ea:	move.l 4(sp),d0
}
   178ee:	movea.l (sp)+,a6
   178f0:	lea 12(sp),sp
   178f4:	rts

000178f6 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   178f6:	lea -32(sp),sp
   178fa:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   178fe:	move.l 48(sp),36(sp)
   17904:	move.l 52(sp),40(sp)
   1790a:	move.l 56(sp),28(sp)
   17910:	move.l 60(sp),32(sp)
   17916:	move.l 1c9c0 <MathIeeeDoubBasBase>,d0
   1791c:	movea.l d0,a6
   1791e:	move.l 36(sp),d0
   17922:	move.l 40(sp),d1
   17926:	move.l 28(sp),d2
   1792a:	move.l 32(sp),d3
   1792e:	jsr -72(a6)
   17932:	move.l d0,12(sp)
   17936:	move.l d1,16(sp)
   1793a:	move.l 12(sp),20(sp)
   17940:	move.l 16(sp),24(sp)
   17946:	move.l 20(sp),d0
   1794a:	move.l 24(sp),d1
}
   1794e:	movem.l (sp)+,d2-d3/a6
   17952:	lea 32(sp),sp
   17956:	rts

00017958 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   17958:	lea -12(sp),sp
   1795c:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   1795e:	move.l 20(sp),12(sp)
   17964:	move.l 24(sp),8(sp)
   1796a:	move.l 1c9b8 <MathIeeeSingBasBase>,d0
   17970:	movea.l d0,a6
   17972:	move.l 12(sp),d0
   17976:	move.l 8(sp),d1
   1797a:	jsr -72(a6)
   1797e:	move.l d0,4(sp)
   17982:	move.l 4(sp),d0
}
   17986:	movea.l (sp)+,a6
   17988:	lea 12(sp),sp
   1798c:	rts

0001798e <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   1798e:	lea -12(sp),sp
   17992:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   17994:	move.l 20(sp),8(sp)
   1799a:	move.l 24(sp),12(sp)
   179a0:	move.l 1c9c4 <MathIeeeDoubTransBase>,d0
   179a6:	movea.l d0,a6
   179a8:	move.l 8(sp),d0
   179ac:	move.l 12(sp),d1
   179b0:	jsr -102(a6)
   179b4:	move.l d0,4(sp)
   179b8:	move.l 4(sp),d0
}
   179bc:	movea.l (sp)+,a6
   179be:	lea 12(sp),sp
   179c2:	rts

000179c4 <__fixunssfsi>:

unsigned int __fixunssfsi (float a) {
   179c4:	subq.l #8,sp
   179c6:	move.l a6,-(sp)
	return IEEESPFix(a);
   179c8:	move.l 16(sp),8(sp)
   179ce:	move.l 1c9b8 <MathIeeeSingBasBase>,d0
   179d4:	movea.l d0,a6
   179d6:	move.l 8(sp),d0
   179da:	jsr -30(a6)
   179de:	move.l d0,4(sp)
   179e2:	move.l 4(sp),d0
}
   179e6:	movea.l (sp)+,a6
   179e8:	addq.l #8,sp
   179ea:	rts

000179ec <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   179ec:	       lea -24(sp),sp
   179f0:	       move.l a6,-(sp)
    if (x > 0) {
   179f2:	       clr.l -(sp)
   179f4:	       move.l 40(sp),-(sp)
   179f8:	       jsr 177d0 <__gtsf2>
   179fe:	       addq.l #8,sp
   17a00:	       tst.l d0
   17a02:	   /-- ble.s 17a34 <atan2f+0x48>
        return IEEESPAtan(y / x);
   17a04:	   |   move.l 36(sp),-(sp)
   17a08:	   |   move.l 36(sp),-(sp)
   17a0c:	   |   jsr 1751a <__divsf3>
   17a12:	   |   addq.l #8,sp
   17a14:	   |   move.l d0,8(sp)
   17a18:	   |   move.l 1c9bc <MathIeeeSingTransBase>,d0
   17a1e:	   |   movea.l d0,a6
   17a20:	   |   move.l 8(sp),d0
   17a24:	   |   jsr -30(a6)
   17a28:	   |   move.l d0,4(sp)
   17a2c:	   |   move.l 4(sp),d0
   17a30:	/--|-- bra.w 17b94 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   17a34:	|  \-> clr.l -(sp)
   17a36:	|      move.l 40(sp),-(sp)
   17a3a:	|      jsr 1788a <__ltsf2>
   17a40:	|      addq.l #8,sp
   17a42:	|      tst.l d0
   17a44:	|  /-- bge.s 17ab8 <atan2f+0xcc>
   17a46:	|  |   clr.l -(sp)
   17a48:	|  |   move.l 36(sp),-(sp)
   17a4c:	|  |   jsr 1774c <__gesf2>
   17a52:	|  |   addq.l #8,sp
   17a54:	|  |   tst.l d0
   17a56:	|  +-- blt.s 17ab8 <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   17a58:	|  |   move.l 36(sp),-(sp)
   17a5c:	|  |   move.l 36(sp),-(sp)
   17a60:	|  |   jsr 1751a <__divsf3>
   17a66:	|  |   addq.l #8,sp
   17a68:	|  |   move.l d0,24(sp)
   17a6c:	|  |   move.l 1c9bc <MathIeeeSingTransBase>,d0
   17a72:	|  |   movea.l d0,a6
   17a74:	|  |   move.l 24(sp),d0
   17a78:	|  |   jsr -30(a6)
   17a7c:	|  |   move.l d0,20(sp)
   17a80:	|  |   move.l 20(sp),d0
   17a84:	|  |   move.l d0,-(sp)
   17a86:	|  |   jsr 17586 <__extendsfdf2>
   17a8c:	|  |   addq.l #4,sp
   17a8e:	|  |   move.l #1413754136,-(sp)
   17a94:	|  |   move.l #1074340347,-(sp)
   17a9a:	|  |   move.l d1,-(sp)
   17a9c:	|  |   move.l d0,-(sp)
   17a9e:	|  |   jsr 17456 <__adddf3>
   17aa4:	|  |   lea 16(sp),sp
   17aa8:	|  |   move.l d1,-(sp)
   17aaa:	|  |   move.l d0,-(sp)
   17aac:	|  |   jsr 1798e <__truncdfsf2>
   17ab2:	|  |   addq.l #8,sp
   17ab4:	+--|-- bra.w 17b94 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   17ab8:	|  \-> clr.l -(sp)
   17aba:	|      move.l 40(sp),-(sp)
   17abe:	|      jsr 1788a <__ltsf2>
   17ac4:	|      addq.l #8,sp
   17ac6:	|      tst.l d0
   17ac8:	|  /-- bge.s 17b3a <atan2f+0x14e>
   17aca:	|  |   clr.l -(sp)
   17acc:	|  |   move.l 36(sp),-(sp)
   17ad0:	|  |   jsr 1788a <__ltsf2>
   17ad6:	|  |   addq.l #8,sp
   17ad8:	|  |   tst.l d0
   17ada:	|  +-- bge.s 17b3a <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   17adc:	|  |   move.l 36(sp),-(sp)
   17ae0:	|  |   move.l 36(sp),-(sp)
   17ae4:	|  |   jsr 1751a <__divsf3>
   17aea:	|  |   addq.l #8,sp
   17aec:	|  |   move.l d0,16(sp)
   17af0:	|  |   move.l 1c9bc <MathIeeeSingTransBase>,d0
   17af6:	|  |   movea.l d0,a6
   17af8:	|  |   move.l 16(sp),d0
   17afc:	|  |   jsr -30(a6)
   17b00:	|  |   move.l d0,12(sp)
   17b04:	|  |   move.l 12(sp),d0
   17b08:	|  |   move.l d0,-(sp)
   17b0a:	|  |   jsr 17586 <__extendsfdf2>
   17b10:	|  |   addq.l #4,sp
   17b12:	|  |   move.l #1413754136,-(sp)
   17b18:	|  |   move.l #1074340347,-(sp)
   17b1e:	|  |   move.l d1,-(sp)
   17b20:	|  |   move.l d0,-(sp)
   17b22:	|  |   jsr 178f6 <__subdf3>
   17b28:	|  |   lea 16(sp),sp
   17b2c:	|  |   move.l d1,-(sp)
   17b2e:	|  |   move.l d0,-(sp)
   17b30:	|  |   jsr 1798e <__truncdfsf2>
   17b36:	|  |   addq.l #8,sp
   17b38:	+--|-- bra.s 17b94 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   17b3a:	|  \-> clr.l -(sp)
   17b3c:	|      move.l 40(sp),-(sp)
   17b40:	|      jsr 17550 <__eqsf2>
   17b46:	|      addq.l #8,sp
   17b48:	|      tst.l d0
   17b4a:	|  /-- bne.s 17b66 <atan2f+0x17a>
   17b4c:	|  |   clr.l -(sp)
   17b4e:	|  |   move.l 36(sp),-(sp)
   17b52:	|  |   jsr 177d0 <__gtsf2>
   17b58:	|  |   addq.l #8,sp
   17b5a:	|  |   tst.l d0
   17b5c:	|  +-- ble.s 17b66 <atan2f+0x17a>
        return PI / 2;
   17b5e:	|  |   move.l #1070141403,d0
   17b64:	+--|-- bra.s 17b94 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   17b66:	|  \-> clr.l -(sp)
   17b68:	|      move.l 40(sp),-(sp)
   17b6c:	|      jsr 17550 <__eqsf2>
   17b72:	|      addq.l #8,sp
   17b74:	|      tst.l d0
   17b76:	|  /-- bne.s 17b92 <atan2f+0x1a6>
   17b78:	|  |   clr.l -(sp)
   17b7a:	|  |   move.l 36(sp),-(sp)
   17b7e:	|  |   jsr 1788a <__ltsf2>
   17b84:	|  |   addq.l #8,sp
   17b86:	|  |   tst.l d0
   17b88:	|  +-- bge.s 17b92 <atan2f+0x1a6>
        return -PI / 2;
   17b8a:	|  |   move.l #-1077342245,d0
   17b90:	+--|-- bra.s 17b94 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   17b92:	|  \-> moveq #0,d0
    }
}
   17b94:	\----> movea.l (sp)+,a6
   17b96:	       lea 24(sp),sp
   17b9a:	       rts

00017b9c <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   17b9c:	lea -24(sp),sp
   17ba0:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   17ba2:	move.l 32(sp),20(sp)
   17ba8:	move.l 36(sp),24(sp)
   17bae:	move.l 1c9c4 <MathIeeeDoubTransBase>,d0
   17bb4:	movea.l d0,a6
   17bb6:	move.l 20(sp),d0
   17bba:	move.l 24(sp),d1
   17bbe:	jsr -96(a6)
   17bc2:	move.l d0,4(sp)
   17bc6:	move.l d1,8(sp)
   17bca:	move.l 4(sp),12(sp)
   17bd0:	move.l 8(sp),16(sp)
   17bd6:	move.l 12(sp),d0
   17bda:	move.l 16(sp),d1
}
   17bde:	movea.l (sp)+,a6
   17be0:	lea 24(sp),sp
   17be4:	rts

00017be6 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   17be6:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   17bea:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17bee:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   17bf2:	mulu.w 8(sp),d1
	addw	d1, d0
   17bf6:	add.w d1,d0
	swap	d0
   17bf8:	swap d0
	clrw	d0
   17bfa:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17bfc:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   17c00:	mulu.w 10(sp),d1
	addl	d1, d0
   17c04:	add.l d1,d0
	rts
   17c06:	rts

00017c08 <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   17c08:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   17c0a:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   17c0e:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   17c12:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   17c18:	   /-- bcc.s 17c30 <__udivsi3+0x28>
	movel	d0, d2
   17c1a:	   |   move.l d0,d2
	clrw	d2
   17c1c:	   |   clr.w d2
	swap	d2
   17c1e:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   17c20:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   17c22:	   |   move.w d2,d0
	swap	d0
   17c24:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   17c26:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   17c2a:	   |   divu.w d1,d2
	movew	d2, d0
   17c2c:	   |   move.w d2,d0
	jra	6f
   17c2e:	/--|-- bra.s 17c60 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   17c30:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   17c32:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   17c34:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   17c36:	|  |   cmpi.l #65536,d1
	jcc	4b
   17c3c:	|  \-- bcc.s 17c32 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   17c3e:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   17c40:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   17c46:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   17c48:	|      mulu.w d0,d1
	swap	d2
   17c4a:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   17c4c:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   17c4e:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   17c50:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   17c52:	|  /-- bne.s 17c5e <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   17c54:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   17c56:	|  +-- bcs.s 17c5e <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   17c58:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   17c5c:	+--|-- bls.s 17c60 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   17c5e:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   17c60:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17c62:	       rts

00017c64 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   17c64:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   17c66:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   17c68:	    move.l 12(sp),d1
	jpl	1f
   17c6c:	/-- bpl.s 17c72 <__divsi3+0xe>
	negl	d1
   17c6e:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   17c70:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   17c72:	\-> move.l 8(sp),d0
	jpl	2f
   17c76:	/-- bpl.s 17c7c <__divsi3+0x18>
	negl	d0
   17c78:	|   neg.l d0
	negb	d2
   17c7a:	|   neg.b d2

2:	movel	d1, sp@-
   17c7c:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17c7e:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   17c80:	    jsr 17c08 <__udivsi3>
	addql	#8, sp
   17c86:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   17c88:	    tst.b d2
	jpl	3f
   17c8a:	/-- bpl.s 17c8e <__divsi3+0x2a>
	negl	d0
   17c8c:	|   neg.l d0

3:	movel	sp@+, d2
   17c8e:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17c90:	    rts

00017c92 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17c92:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17c96:	move.l 4(sp),d0
	movel	d1, sp@-
   17c9a:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17c9c:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   17c9e:	jsr 17c64 <__divsi3>
	addql	#8, sp
   17ca4:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17ca6:	move.l 8(sp),d1
	movel	d1, sp@-
   17caa:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17cac:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17cae:	jsr 17be6 <__mulsi3>
	addql	#8, sp
   17cb4:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17cb6:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17cba:	sub.l d0,d1
	movel	d1, d0
   17cbc:	move.l d1,d0
	rts
   17cbe:	rts

00017cc0 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17cc0:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17cc4:	move.l 4(sp),d0
	movel	d1, sp@-
   17cc8:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17cca:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   17ccc:	jsr 17c08 <__udivsi3>
	addql	#8, sp
   17cd2:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17cd4:	move.l 8(sp),d1
	movel	d1, sp@-
   17cd8:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17cda:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17cdc:	jsr 17be6 <__mulsi3>
	addql	#8, sp
   17ce2:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17ce4:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17ce8:	sub.l d0,d1
	movel	d1, d0
   17cea:	move.l d1,d0
	rts
   17cec:	rts

00017cee <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   17cee:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   17cf0:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   17cf4:	jsr -516(a6)
    move.l (sp)+, a6
   17cf8:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   17cfa:	rts

00017cfc <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   17cfc:	move.b d0,(a3)+
	rts
   17cfe:	rts
