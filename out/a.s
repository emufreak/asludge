
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #114783,d0
       8:	       subi.l #114783,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   ,-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	,--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1c05f <__fini_array_end>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  '-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	'----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #114783,d0
      40:	       subi.l #114783,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   ,-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	,--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1c05f <__fini_array_end>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  '-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	'----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 7e42 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #114783,d0
      7e:	       subi.l #114783,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   ,-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	,--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1c05f <__fini_array_end>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  '-> tst.l 4(sp)
      ae:	'----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 13b34 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1c810 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   ,-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	,--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  '-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 13b4c <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	'----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1c060 <allowAnyFilename>,d0
     124:	,-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 13b34 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1c810 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 ,-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  ,--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              '-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     ,----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  ,--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  ,-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  ,----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  ,-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  '--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  '-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        '-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  '----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  '-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	'--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   '----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  ,-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	,-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 '-> move.w 1c060 <allowAnyFilename>,d0
     316:	|  ,----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 13b34 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1c810 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              ,-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 17bb2 <PutChar+0x4>
     35c:	|  |              |   jsr 1710c <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              '-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     ,----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  ,--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        ,-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  ,-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     '-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     ,-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  ,--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  '-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  '--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     '----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  '----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  '-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  '----------------> clr.l 20(sp)
     648:	|              ,----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           ,--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  ,-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  '-> addq.l #1,20(sp)
     66e:	|           |  '----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           '-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	'-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1c818 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1c818 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1c818 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1c818 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1c818 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1c818 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1c818 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	,-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 17bdc <PutChar+0x2e>
     834:	|   jsr 1710c <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	'-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1c818 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	,-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 17bf8 <PutChar+0x4a>
     8a6:	|   jsr 1710c <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	'-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	,-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	'-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1c818 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	,-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	'-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1c818 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1c818 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1c818 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1c818 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1c818 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1c818 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1c818 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1c810 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      ,-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	,-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     '-> clr.l 32(sp)
     b50:	|     ,-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  ,--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1c818 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  '-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  '----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	'-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 13b34 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   ,-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	,--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1c818 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  '-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	'----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1c70a <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	,-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1c70a <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1c70a <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1c70a <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1c70a <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1c7d0 <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1c70a <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1c70a <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1c7cc <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1c70a <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1c70a <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 141c <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	'-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1c70a <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 9780 <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1c70a <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1c70e <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1c712 <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 2c12 <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int x1, int y1, int x2, int y2) {
     e0e:	          lea -20(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 17c20 <PutChar+0x72>
     e1a:	          jsr 1710c <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1c726 <CstBackDrop>,d0
     e28:	      ,-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 17c39 <PutChar+0x8b>
     e30:	      |   jsr 1710c <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	,-----|-- bra.w ff4 <CstBlankScreen+0x1e6>
  }  

  CstPaletteLoaded = 0;
     e3c:	|     '-> clr.w 1c720 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,12(sp)

  WaitBlit();
     e4a:	|         move.l 1c81c <GfxBase>,d0
     e50:	|         movea.l d0,a6
     e52:	|         jsr -228(a6)

  UWORD width = (x2 - x1)/8;
     e56:	|         move.l 36(sp),d0
     e5a:	|         sub.l 28(sp),d0
     e5e:	|     ,-- bpl.s e62 <CstBlankScreen+0x54>
     e60:	|     |   addq.l #7,d0
     e62:	|     '-> asr.l #3,d0
     e64:	|         move.w d0,10(sp)
  UWORD height = (y2 - y1);
     e68:	|         move.l 40(sp),d0
     e6c:	|         move.l 32(sp),d1
     e70:	|         movea.w d0,a0
     e72:	|         suba.w d1,a0
     e74:	|         move.w a0,8(sp)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e78:	|         movea.l 12(sp),a0
     e7c:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e82:	|         movea.l 12(sp),a0
     e86:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e8c:	|         movea.l 12(sp),a0
     e90:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e96:	|         movea.l 12(sp),a0
     e9a:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     ea0:	|         movea.l 12(sp),a0
     ea4:	|         move.w #0,96(a0)
  custom->bltdmod = 40 - width;
     eaa:	|         moveq #40,d0
     eac:	|         sub.w 10(sp),d0
     eb0:	|         movea.l 12(sp),a0
     eb4:	|         move.w d0,102(a0)
  custom->bltcon1 = 0;
     eb8:	|         movea.l 12(sp),a0
     ebc:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     ec2:	|         movea.l 12(sp),a0
     ec6:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ecc:	|         move.l 1c726 <CstBackDrop>,d0
     ed2:	|         move.l d0,20(sp)
  bltdpt += x1/8 + y1*40;
     ed6:	|         move.l 28(sp),d0
     eda:	|     ,-- bpl.s ede <CstBlankScreen+0xd0>
     edc:	|     |   addq.l #7,d0
     ede:	|     '-> asr.l #3,d0
     ee0:	|         movea.l d0,a0
     ee2:	|         move.l 32(sp),d1
     ee6:	|         move.l d1,d0
     ee8:	|         add.l d0,d0
     eea:	|         add.l d0,d0
     eec:	|         add.l d1,d0
     eee:	|         lsl.l #3,d0
     ef0:	|         add.l a0,d0
     ef2:	|         add.l d0,20(sp)

  UWORD bltsize = height*64+width/2;    
     ef6:	|         move.w 8(sp),d0
     efa:	|         move.w d0,d1
     efc:	|         lsl.w #6,d1
     efe:	|         move.w 10(sp),d0
     f02:	|         lsr.w #1,d0
     f04:	|         movea.w d1,a0
     f06:	|         adda.w d0,a0
     f08:	|         move.w a0,6(sp)
  UWORD blitsize = width*height;
     f0c:	|         move.w 10(sp),d0
     f10:	|         muls.w 8(sp),d0
     f14:	|         move.w d0,4(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     f18:	|         pea 17c67 <PutChar+0xb9>
     f1e:	|         jsr 1710c <KPrintF>
     f24:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     f26:	|         clr.l 16(sp)
     f2a:	|     ,-- bra.s f5c <CstBlankScreen+0x14e>
  {            
    custom->bltdpt = (APTR) bltdpt;
     f2c:	|  ,--|-> move.l 20(sp),d0
     f30:	|  |  |   movea.l 12(sp),a0
     f34:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f38:	|  |  |   movea.l 12(sp),a0
     f3c:	|  |  |   move.w 6(sp),88(a0)
    WaitBlit();
     f42:	|  |  |   move.l 1c81c <GfxBase>,d0
     f48:	|  |  |   movea.l d0,a6
     f4a:	|  |  |   jsr -228(a6)
    bltdpt += blitsize;
     f4e:	|  |  |   moveq #0,d0
     f50:	|  |  |   move.w 4(sp),d0
     f54:	|  |  |   add.l d0,20(sp)
  for(int i2=0;i2<5;i2++)
     f58:	|  |  |   addq.l #1,16(sp)
     f5c:	|  |  '-> moveq #4,d0
     f5e:	|  |      cmp.l 16(sp),d0
     f62:	|  '----- bge.s f2c <CstBlankScreen+0x11e>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f64:	|         pea 17c87 <PutChar+0xd9>
     f6a:	|         jsr 1710c <KPrintF>
     f70:	|         addq.l #4,sp

  CstApplyBackDropCounter = 2;
     f72:	|         move.w #2,1c732 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
     f7a:	|         move.l 1c764 <winWidth>,d0
     f80:	|         lsr.l #4,d0
     f82:	|         movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
     f88:	|         move.l a0,d1
     f8a:	|         addq.l #2,d1
     f8c:	|         move.l d1,1c748 <CstBackDropBufferApplyCursor>
     f92:	|         move.l d0,d0
     f94:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
     f96:	|         move.l 1c768 <winHeight>,d0
     f9c:	|         movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
     fa2:	|         move.l a0,d1
     fa4:	|         addq.l #2,d1
     fa6:	|         move.l d1,1c748 <CstBackDropBufferApplyCursor>
     fac:	|         move.l d0,d0
     fae:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fb0:	|         movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
     fb6:	|         move.l a0,d0
     fb8:	|         addq.l #2,d0
     fba:	|         move.l d0,1c748 <CstBackDropBufferApplyCursor>
     fc0:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fc2:	|         movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
     fc8:	|         move.l a0,d0
     fca:	|         addq.l #2,d0
     fcc:	|         move.l d0,1c748 <CstBackDropBufferApplyCursor>
     fd2:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fd4:	|         movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
     fda:	|         move.l a0,d0
     fdc:	|         addq.l #2,d0
     fde:	|         move.l d0,1c748 <CstBackDropBufferApplyCursor>
     fe4:	|         clr.w (a0)

  KPrintF("CstBlankScreen: end\n");
     fe6:	|         pea 17ca7 <PutChar+0xf9>
     fec:	|         jsr 1710c <KPrintF>
     ff2:	|         addq.l #4,sp


}
     ff4:	'-------> movea.l (sp)+,a6
     ff6:	          lea 20(sp),sp
     ffa:	          rts

00000ffc <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     ffc:	       lea -52(sp),sp
    1000:	       move.l a6,-(sp)
    1002:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
    1004:	       move.l #400,32(sp)
    100c:	       moveq #2,d0
    100e:	       move.l d0,28(sp)
    1012:	       move.l 1c810 <SysBase>,d0
    1018:	       movea.l d0,a6
    101a:	       move.l 32(sp),d0
    101e:	       move.l 28(sp),d1
    1022:	       jsr -198(a6)
    1026:	       move.l d0,24(sp)
    102a:	       move.l 24(sp),d0
    102e:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1032:	   ,-- bne.s 105c <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1034:	   |   pea 28 <_start+0x28>
    1038:	   |   pea 17cbc <PutChar+0x10e>
    103e:	   |   jsr 1710c <KPrintF>
    1044:	   |   addq.l #8,sp
    Exit(1);
    1046:	   |   moveq #1,d1
    1048:	   |   move.l d1,16(sp)
    104c:	   |   move.l 1c818 <DOSBase>,d0
    1052:	   |   movea.l d0,a6
    1054:	   |   move.l 16(sp),d1
    1058:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    105c:	   '-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1062:	       move.l 56(sp),1c754 <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    106a:	       move.l #114786,52(sp)
  for(int i=0; i<16;i++)
    1072:	       clr.l 48(sp)
    1076:	   ,-- bra.s 109c <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    1078:	,--|-> move.l 52(sp),d1
    107c:	|  |   move.l d1,d2
    107e:	|  |   addq.l #4,d2
    1080:	|  |   move.l d2,52(sp)
    1084:	|  |   move.l 56(sp),d0
    1088:	|  |   move.l d0,d2
    108a:	|  |   addq.l #4,d2
    108c:	|  |   move.l d2,56(sp)
    1090:	|  |   movea.l d1,a0
    1092:	|  |   move.l (a0),d1
    1094:	|  |   movea.l d0,a0
    1096:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    1098:	|  |   addq.l #1,48(sp)
    109c:	|  '-> moveq #15,d0
    109e:	|      cmp.l 48(sp),d0
    10a2:	'----- bge.s 1078 <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    10a4:	       move.l #114850,52(sp)

  for(int i=0; i<12;i++)
    10ac:	       clr.l 44(sp)
    10b0:	   ,-- bra.s 10d6 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    10b2:	,--|-> move.l 52(sp),d1
    10b6:	|  |   move.l d1,d2
    10b8:	|  |   addq.l #4,d2
    10ba:	|  |   move.l d2,52(sp)
    10be:	|  |   move.l 56(sp),d0
    10c2:	|  |   move.l d0,d2
    10c4:	|  |   addq.l #4,d2
    10c6:	|  |   move.l d2,56(sp)
    10ca:	|  |   movea.l d1,a0
    10cc:	|  |   move.l (a0),d1
    10ce:	|  |   movea.l d0,a0
    10d0:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    10d2:	|  |   addq.l #1,44(sp)
    10d6:	|  '-> moveq #11,d0
    10d8:	|      cmp.l 44(sp),d0
    10dc:	'----- bge.s 10b2 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    10de:	       move.l #114898,52(sp)
  for(int i=0; i<10;i++)
    10e6:	       clr.l 40(sp)
    10ea:	   ,-- bra.s 1110 <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    10ec:	,--|-> move.l 52(sp),d1
    10f0:	|  |   move.l d1,d2
    10f2:	|  |   addq.l #4,d2
    10f4:	|  |   move.l d2,52(sp)
    10f8:	|  |   move.l 56(sp),d0
    10fc:	|  |   move.l d0,d2
    10fe:	|  |   addq.l #4,d2
    1100:	|  |   move.l d2,56(sp)
    1104:	|  |   movea.l d1,a0
    1106:	|  |   move.l (a0),d1
    1108:	|  |   movea.l d0,a0
    110a:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    110c:	|  |   addq.l #1,40(sp)
    1110:	|  '-> moveq #9,d0
    1112:	|      cmp.l 40(sp),d0
    1116:	'----- bge.s 10ec <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    1118:	       move.l #114938,52(sp)
  CstClColor = (UWORD *) cl;
    1120:	       move.l 56(sp),1c74c <CstClColor>
  for(int i=0; i<32;i++)
    1128:	       clr.l 36(sp)
    112c:	   ,-- bra.s 1152 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    112e:	,--|-> move.l 52(sp),d1
    1132:	|  |   move.l d1,d2
    1134:	|  |   addq.l #4,d2
    1136:	|  |   move.l d2,52(sp)
    113a:	|  |   move.l 56(sp),d0
    113e:	|  |   move.l d0,d2
    1140:	|  |   addq.l #4,d2
    1142:	|  |   move.l d2,56(sp)
    1146:	|  |   movea.l d1,a0
    1148:	|  |   move.l (a0),d1
    114a:	|  |   movea.l d0,a0
    114c:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    114e:	|  |   addq.l #1,36(sp)
    1152:	|  '-> moveq #31,d0
    1154:	|      cmp.l 36(sp),d0
    1158:	'----- bge.s 112e <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    115a:	       moveq #40,d1
    115c:	       cmp.l 64(sp),d1
    1160:	   ,-- bge.s 11be <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1162:	   |   moveq #-40,d2
    1164:	   |   add.l 64(sp),d2
    1168:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    116c:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1172:	   |   move.l 8(sp),d0
    1176:	   |   move.l d0,d1
    1178:	   |   addq.l #2,d1
    117a:	   |   move.l d1,8(sp)
    117e:	   |   movea.l d0,a0
    1180:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1184:	   |   move.l 8(sp),d0
    1188:	   |   move.l d0,d1
    118a:	   |   addq.l #2,d1
    118c:	   |   move.l d1,8(sp)
    1190:	   |   move.l 12(sp),d1
    1194:	   |   movea.l d0,a0
    1196:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    1198:	   |   move.l 8(sp),d0
    119c:	   |   move.l d0,d1
    119e:	   |   addq.l #2,d1
    11a0:	   |   move.l d1,8(sp)
    11a4:	   |   movea.l d0,a0
    11a6:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    11aa:	   |   move.l 8(sp),d0
    11ae:	   |   move.l d0,d1
    11b0:	   |   addq.l #2,d1
    11b2:	   |   move.l d1,8(sp)
    11b6:	   |   move.l 12(sp),d1
    11ba:	   |   movea.l d0,a0
    11bc:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    11be:	   '-> move.l 56(sp),d0
    11c2:	       move.l d0,d1
    11c4:	       addq.l #4,d1
    11c6:	       move.l d1,56(sp)
    11ca:	       moveq #-2,d2
    11cc:	       movea.l d0,a0
    11ce:	       move.l d2,(a0)
  return (UWORD *) retval;  
    11d0:	       move.l 20(sp),d0
}
    11d4:	       move.l (sp)+,d2
    11d6:	       movea.l (sp)+,a6
    11d8:	       lea 52(sp),sp
    11dc:	       rts

000011de <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    11de:	                lea -40(sp),sp
    11e2:	                move.l a6,-(sp)
    11e4:	                move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    11e6:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    11ee:	                pea 17cf7 <PutChar+0x149>
    11f4:	                jsr 1710c <KPrintF>
    11fa:	                addq.l #4,sp

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    11fc:	                move.l 1c744 <CstBackDropBufferApplyStart>,d0
    1202:	                move.l d0,1c748 <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    1208:	                move.l 1c744 <CstBackDropBufferApplyStart>,44(sp)
  if(!*cursor || !CstDrawBuffer) {
    1210:	                movea.l 44(sp),a0
    1214:	                move.w (a0),d0
    1216:	,-------------- beq.w 1410 <CstDisplayBackDrop+0x232>
    121a:	|               move.l 1c738 <CstDrawBuffer>,d0
    1220:	+-------------- beq.w 1410 <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    1224:	|               move.l 1c81c <GfxBase>,d0
    122a:	|               movea.l d0,a6
    122c:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1230:	|               movea.l 16(sp),a0
    1234:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    123a:	|               movea.l 16(sp),a0
    123e:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1244:	|               movea.l 16(sp),a0
    1248:	|               move.w #2544,64(a0)
  
  while(*cursor)
    124e:	|     ,-------- bra.w 13b6 <CstDisplayBackDrop+0x1d8>
  {    
    UWORD width = *cursor++;
    1252:	|  ,--|-------> move.l 44(sp),d0
    1256:	|  |  |         move.l d0,d1
    1258:	|  |  |         addq.l #2,d1
    125a:	|  |  |         move.l d1,44(sp)
    125e:	|  |  |         movea.l d0,a0
    1260:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1264:	|  |  |         move.l 44(sp),d0
    1268:	|  |  |         move.l d0,d1
    126a:	|  |  |         addq.l #2,d1
    126c:	|  |  |         move.l d1,44(sp)
    1270:	|  |  |         movea.l d0,a0
    1272:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    1276:	|  |  |         move.l 44(sp),d0
    127a:	|  |  |         move.l d0,d1
    127c:	|  |  |         addq.l #2,d1
    127e:	|  |  |         move.l d1,44(sp)
    1282:	|  |  |         movea.l d0,a0
    1284:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    1288:	|  |  |         move.l 44(sp),d0
    128c:	|  |  |         move.l d0,d1
    128e:	|  |  |         addq.l #2,d1
    1290:	|  |  |         move.l d1,44(sp)
    1294:	|  |  |         movea.l d0,a0
    1296:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    129a:	|  |  |         move.l 1c764 <winWidth>,d0
    12a0:	|  |  |         lsr.l #3,d0
    12a2:	|  |  |         move.l d0,d1
    12a4:	|  |  |         move.w 14(sp),d0
    12a8:	|  |  |         add.w d0,d0
    12aa:	|  |  |         sub.w d0,d1
    12ac:	|  |  |         movea.l 16(sp),a0
    12b0:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    12b4:	|  |  |         move.l 1c764 <winWidth>,d0
    12ba:	|  |  |         lsr.l #3,d0
    12bc:	|  |  |         move.l d0,d1
    12be:	|  |  |         move.w 14(sp),d0
    12c2:	|  |  |         add.w d0,d0
    12c4:	|  |  |         sub.w d0,d1
    12c6:	|  |  |         movea.l 16(sp),a0
    12ca:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    12ce:	|  |  |         moveq #0,d0
    12d0:	|  |  |         move.w 8(sp),d0
    12d4:	|  |  |         move.l 1c764 <winWidth>,d1
    12da:	|  |  |         move.l d1,-(sp)
    12dc:	|  |  |         move.l d0,-(sp)
    12de:	|  |  |         jsr 17a98 <__mulsi3>
    12e4:	|  |  |         addq.l #8,sp
    12e6:	|  |  |         move.l d0,d1
    12e8:	|  |  |         lsr.l #3,d1
    12ea:	|  |  |         move.l 1c726 <CstBackDrop>,d0
    12f0:	|  |  |         add.l d0,d1
    12f2:	|  |  |         moveq #0,d0
    12f4:	|  |  |         move.w 10(sp),d0
    12f8:	|  |  |         move.l d1,d2
    12fa:	|  |  |         add.l d0,d2
    12fc:	|  |  |         move.l d2,40(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    1300:	|  |  |         moveq #0,d0
    1302:	|  |  |         move.w 8(sp),d0
    1306:	|  |  |         move.l 1c764 <winWidth>,d1
    130c:	|  |  |         move.l d1,-(sp)
    130e:	|  |  |         move.l d0,-(sp)
    1310:	|  |  |         jsr 17a98 <__mulsi3>
    1316:	|  |  |         addq.l #8,sp
    1318:	|  |  |         move.l d0,d1
    131a:	|  |  |         lsr.l #3,d1
    131c:	|  |  |         move.l 1c738 <CstDrawBuffer>,d0
    1322:	|  |  |         add.l d0,d1
    1324:	|  |  |         moveq #0,d0
    1326:	|  |  |         move.w 10(sp),d0
    132a:	|  |  |         move.l d1,d2
    132c:	|  |  |         add.l d0,d2
    132e:	|  |  |         move.l d2,36(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1332:	|  |  |         clr.l 32(sp)
    1336:	|  |  |     ,-- bra.s 13ae <CstDisplayBackDrop+0x1d0>
    {
      custom->bltapt = (APTR) bltapt;
    1338:	|  |  |  ,--|-> move.l 40(sp),d0
    133c:	|  |  |  |  |   movea.l 16(sp),a0
    1340:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1344:	|  |  |  |  |   move.l 36(sp),d0
    1348:	|  |  |  |  |   movea.l 16(sp),a0
    134c:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    1350:	|  |  |  |  |   move.w 12(sp),d0
    1354:	|  |  |  |  |   lsl.w #6,d0
    1356:	|  |  |  |  |   add.w 14(sp),d0
    135a:	|  |  |  |  |   movea.l 16(sp),a0
    135e:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1362:	|  |  |  |  |   move.l 1c764 <winWidth>,d0
    1368:	|  |  |  |  |   lsr.l #3,d0
    136a:	|  |  |  |  |   move.l 1c768 <winHeight>,d1
    1370:	|  |  |  |  |   move.l d1,-(sp)
    1372:	|  |  |  |  |   move.l d0,-(sp)
    1374:	|  |  |  |  |   jsr 17a98 <__mulsi3>
    137a:	|  |  |  |  |   addq.l #8,sp
    137c:	|  |  |  |  |   add.l d0,40(sp)
      bltdpt += winWidth/8*winHeight;
    1380:	|  |  |  |  |   move.l 1c764 <winWidth>,d0
    1386:	|  |  |  |  |   lsr.l #3,d0
    1388:	|  |  |  |  |   move.l 1c768 <winHeight>,d1
    138e:	|  |  |  |  |   move.l d1,-(sp)
    1390:	|  |  |  |  |   move.l d0,-(sp)
    1392:	|  |  |  |  |   jsr 17a98 <__mulsi3>
    1398:	|  |  |  |  |   addq.l #8,sp
    139a:	|  |  |  |  |   add.l d0,36(sp)
      WaitBlit();
    139e:	|  |  |  |  |   move.l 1c81c <GfxBase>,d0
    13a4:	|  |  |  |  |   movea.l d0,a6
    13a6:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    13aa:	|  |  |  |  |   addq.l #1,32(sp)
    13ae:	|  |  |  |  '-> moveq #4,d0
    13b0:	|  |  |  |      cmp.l 32(sp),d0
    13b4:	|  |  |  '----- bge.s 1338 <CstDisplayBackDrop+0x15a>
  while(*cursor)
    13b6:	|  |  '-------> movea.l 44(sp),a0
    13ba:	|  |            move.w (a0),d0
    13bc:	|  '----------- bne.w 1252 <CstDisplayBackDrop+0x74>
    }  
  }
  UWORD *colorpos = CstPalette;
    13c0:	|               move.l 1c750 <CstPalette>,28(sp)
  
  UWORD *tmp = CstClColor;
    13c8:	|               move.l 1c74c <CstClColor>,24(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13d0:	|               clr.l 20(sp)
    13d4:	|           ,-- bra.s 1406 <CstDisplayBackDrop+0x228>
    *tmp++;
    13d6:	|        ,--|-> move.l 24(sp),d0
    13da:	|        |  |   move.l d0,d1
    13dc:	|        |  |   addq.l #2,d1
    13de:	|        |  |   move.l d1,24(sp)
    *tmp++ = *colorpos++;
    13e2:	|        |  |   move.l 28(sp),d1
    13e6:	|        |  |   move.l d1,d2
    13e8:	|        |  |   addq.l #2,d2
    13ea:	|        |  |   move.l d2,28(sp)
    13ee:	|        |  |   move.l 24(sp),d0
    13f2:	|        |  |   move.l d0,d2
    13f4:	|        |  |   addq.l #2,d2
    13f6:	|        |  |   move.l d2,24(sp)
    13fa:	|        |  |   movea.l d1,a0
    13fc:	|        |  |   move.w (a0),d1
    13fe:	|        |  |   movea.l d0,a0
    1400:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    1402:	|        |  |   addq.l #1,20(sp)
    1406:	|        |  '-> moveq #31,d0
    1408:	|        |      cmp.l 20(sp),d0
    140c:	|        '----- bge.s 13d6 <CstDisplayBackDrop+0x1f8>
    140e:	|           ,-- bra.s 1412 <CstDisplayBackDrop+0x234>
    return;
    1410:	'-----------|-> nop
  }
}
    1412:	            '-> move.l (sp)+,d2
    1414:	                movea.l (sp)+,a6
    1416:	                lea 40(sp),sp
    141a:	                rts

0000141c <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    141c:	lea -20(sp),sp
    1420:	movea.l 24(sp),a0
    1424:	move.l 28(sp),d1
    1428:	move.l 32(sp),d0
    142c:	movea.w a0,a0
    142e:	move.w a0,4(sp)
    1432:	move.w d1,d1
    1434:	move.w d1,2(sp)
    1438:	move.w d0,d0
    143a:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    143c:	move.w 2(sp),d0
    1440:	movea.l 36(sp),a0
    1444:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    1446:	move.w 4(sp),d0
    144a:	lsr.w #1,d0
    144c:	movea.l 36(sp),a0
    1450:	addq.l #1,a0
    1452:	move.l d0,d0
    1454:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    1456:	move.w 2(sp),d1
    145a:	move.w (sp),d0
    145c:	movea.l 36(sp),a0
    1460:	addq.l #2,a0
    1462:	add.b d1,d0
    1464:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    1466:	move.w 4(sp),d0
    146a:	andi.w #1,d0
    146e:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1472:	move.w 2(sp),d0
    1476:	add.w (sp),d0
    1478:	move.w d0,d0
    147a:	andi.l #65535,d0
    1480:	asr.l #7,d0
    1482:	move.l d0,d0
    1484:	move.w d0,d1
    1486:	andi.w #2,d1
    148a:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    148e:	moveq #0,d0
    1490:	move.w 2(sp),d0
    1494:	asr.l #6,d0
    1496:	move.l d0,d0
    1498:	move.w d0,d1
    149a:	andi.w #4,d1
    149e:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    14a2:	move.w 18(sp),d1
    14a6:	move.w 16(sp),d0
    14aa:	add.b d0,d1
    14ac:	move.w 14(sp),d0
    14b0:	movea.l 36(sp),a0
    14b4:	addq.l #3,a0
    14b6:	add.b d1,d0
    14b8:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    14ba:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    14c0:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    14c6:	move.l 10(sp),d0
    14ca:	clr.w d0
    14cc:	swap d0
    14ce:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    14d2:	move.l 1c754 <CstClCursor>,d0
    14d8:	movea.l d0,a0
    14da:	addq.l #2,a0
    14dc:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    14e0:	move.l 1c754 <CstClCursor>,d0
    14e6:	movea.l d0,a0
    14e8:	addq.l #6,a0
    14ea:	move.w 8(sp),(a0)

}
    14ee:	nop
    14f0:	lea 20(sp),sp
    14f4:	rts

000014f6 <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    14f6:	    move.w 1c732 <CstApplyBackDropCounter>,d0
    14fc:	,-- beq.s 1512 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    14fe:	|   jsr 11de <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    1504:	|   move.w 1c732 <CstApplyBackDropCounter>,d0
    150a:	|   subq.w #1,d0
    150c:	|   move.w d0,1c732 <CstApplyBackDropCounter>
  }    
}
    1512:	'-> nop
    1514:	    rts

00001516 <CstDrawZBuffer>:

__attribute__((optimize("Ofast"))) 
UBYTE *CstDrawZBuffer( struct sprite *sprite, struct zBufferData *zbuffer, WORD x, WORD y) 
{
    1516:	                                                             subq.l #8,sp
    1518:	                                                             movem.l d2-d7/a2-a6,-(sp)
    151c:	                                                             movea.l 56(sp),a3
    1520:	                                                             movea.l 60(sp),a2
    1524:	                                                             move.l 64(sp),d2
    1528:	                                                             move.l 68(sp),d7
    152c:	                                                             movea.w d2,a4
    152e:	                                                             move.w d7,50(sp)
  //In Case nothing needs to be done return sprite mask without changes
       
  WORD zbufferset = 0;

  #ifdef EMULATOR
    debug_register_bitmap(CstZBufferResult, "SpriteMask", sprite->width, sprite->height, 1, 0);
    1532:	                                                             clr.l -(sp)
    1534:	                                                             pea 1 <_start+0x1>
    1538:	                                                             movea.w 6(a3),a0
    153c:	                                                             move.l a0,-(sp)
    153e:	                                                             movea.w 2(a3),a0
    1542:	                                                             move.l a0,-(sp)
    1544:	                                                             pea 17d13 <PutChar+0x165>
    154a:	                                                             move.l 1c758 <CstZBufferResult>,-(sp)
    1550:	                                                             lea 171f4 <debug_register_bitmap>,a5
    1556:	                                                             jsr (a5)
    debug_register_bitmap(CstZBufferWork, "tmbpuffer", sprite->width+16, sprite->height, 1, 0);
    1558:	                                                             clr.l -(sp)
    155a:	                                                             pea 1 <_start+0x1>
    155e:	                                                             movea.w 6(a3),a0
    1562:	                                                             move.l a0,-(sp)
    1564:	                                                             move.w 2(a3),d0
    1568:	                                                             addi.w #16,d0
    156c:	                                                             movea.w d0,a0
    156e:	                                                             move.l a0,-(sp)
    1570:	                                                             pea 17d1e <PutChar+0x170>
    1576:	                                                             move.l 1c75c <CstZBufferWork>,-(sp)
    157c:	                                                             jsr (a5)
  #endif    

  while(zbuffer) 
    157e:	                                                             lea 48(sp),sp
    1582:	                                                             cmpa.w #0,a2
    1586:	,----------------------------------------------------------- beq.w 1a22 <CstDrawZBuffer+0x50c>
  {              
    WORD spritex1oncanvas = x;
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    158a:	|                                                            move.w d2,48(sp)
    158e:	|                                                            move.l (a3),d2
    WORD spritey1oncanvas = y;
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    1590:	|                                                            movea.l 4(a3),a5
  WORD zbufferset = 0;
    1594:	|                                                            clr.w d0
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    1596:	|                       ,----------------------------------> move.w a5,d3
    1598:	|                       |                                    add.w d7,d3
    BOOL zbufferfromleft = FALSE;
    BOOL zbufferfrombottom = FALSE;
    BOOL zbufferfromtop = FALSE;
  
    //Sprite will be drawn behind the zBuffer. We need to do something
    if(spritey2oncanvas < zbuffer->yz) 
    159a:	|                       |                                    andi.l #65535,d3
    15a0:	|                       |                                    cmp.l 16(a2),d3
    15a4:	|                       |  ,-------------------------------- bge.w 173e <CstDrawZBuffer+0x228>
    WORD zbufferx1oncanvas = zbuffer->topx;
    15a8:	|                       |  |                                 move.l 8(a2),d6
    WORD zbuffery1oncanvas = zbuffer->topy;
    15ac:	|                       |  |                                 move.l 12(a2),d5
    WORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    15b0:	|                       |  |                                 move.w d6,d0
    15b2:	|                       |  |                                 add.w 2(a2),d0
    WORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    15b6:	|                       |  |                                 move.w 6(a2),d4
    15ba:	|                       |  |                                 add.w d5,d4
    {    
      zbufferset = 1;

      //sprite ------------x1+++++++++++++++++++x2-----------------*/
      /*zbuffer-------------------x1++++++++++?????????------------*/      
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    15bc:	|                       |  |                                 cmp.w a4,d6
    15be:	|                    ,--|--|-------------------------------- bge.w 18b6 <CstDrawZBuffer+0x3a0>
        zbufferfromright = TRUE;
      //sprite -------------------------x1++++??????-------*/
      /*zbuffer-------------------x1+++++++++++x2----------*/  
      else if(spritex1oncanvas > zbufferx1oncanvas && spritex1oncanvas < zbufferx2oncanvas)
    15c2:	|                    |  |  |                                 cmp.w a4,d0
    15c4:	|        ,-----------|--|--|-------------------------------- ble.w 173c <CstDrawZBuffer+0x226>
        zbufferfromleft = TRUE;       

      //Overlap on X-Axis. Now Check y-axis
      if( zbufferfromleft || zbufferfromright)         
      {
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    15c8:	|        |           |  |  |                                 move.w 50(sp),d0
    15cc:	|        |           |  |  |                                 cmp.w d0,d5
    15ce:	|        |     ,-----|--|--|-------------------------------- blt.w 1a02 <CstDrawZBuffer+0x4ec>
    15d2:	|        |     |     |  |  |                                 movea.w d5,a0
        else if(spritey1oncanvas > zbuffery1oncanvas && spritey1oncanvas < zbuffery2oncanvas)
          zbufferfromtop = TRUE;       
      }

      //Overlap on both Axis
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    15d4:	|        |     |     |  |  |                                 cmpa.l d3,a0
    15d6:	|        +-----|-----|--|--|-------------------------------- bge.w 173c <CstDrawZBuffer+0x226>
        {    
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    15da:	|        |     |     |  |  |                                 move.w 48(sp),d0
    15de:	|        |     |     |  |  |                                 sub.w d6,d0
          xdiffbyte = (xdiff / 16) * 2;          
          xdiffrest = (xdiff - xdiffbyte * 8);    
    15e0:	|        |     |     |  |  |                                 move.w d0,d6
    15e2:	|        |     |     |  |  |                                 andi.w #15,d6
    15e6:	|        |     |     |  |  |                                 movea.w d6,a5

                         
          bytewidth = (sprite->width/16)*2;
    15e8:	|        |     |     |  |  |                                 tst.l d2
    15ea:	|        |  ,--|-----|--|--|-------------------------------- blt.w 175e <CstDrawZBuffer+0x248>
    15ee:	|        |  |  |  ,--|--|--|-------------------------------> asr.l #4,d2
    15f0:	|        |  |  |  |  |  |  |                                 add.w d2,d2
          if(sprite->height == 60) {
            sprite->height = 60;
          }
          
          custom->bltafwm = 0xffff;
    15f2:	|        |  |  |  |  |  |  |                                 move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3e08>
          custom->bltalwm = 0xffff;                      
    15fa:	|        |  |  |  |  |  |  |                                 move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3e0a>
          custom->bltcon1 = 0;          
    1602:	|        |  |  |  |  |  |  |                                 move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3e06>

          if (xdiffrest) {
            bytewidth += 2; 
            //xdiffbyte += -2;            
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
            WaitBlit();   
    160a:	|        |  |  |  |  |  |  |                                 lea 1c81c <GfxBase>,a0
    1610:	|        |  |  |  |  |  |  |                                 movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    1612:	|        |  |  |  |  |  |  |                                 lsr.w #4,d0
    1614:	|        |  |  |  |  |  |  |                                 move.w d0,d6
    1616:	|        |  |  |  |  |  |  |                                 add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    1618:	|        |  |  |  |  |  |  |                                 andi.l #65535,d6
    161e:	|        |  |  |  |  |  |  |                                 add.l 20(a2),d6
          if (xdiffrest) {
    1622:	|        |  |  |  |  |  |  |                                 clr.w d0
    1624:	|        |  |  |  |  |  |  |                                 cmp.w a5,d0
    1626:	|        |  |  |  |  |  |  |           ,-------------------- beq.w 179e <CstDrawZBuffer+0x288>
            bytewidth += 2; 
    162a:	|        |  |  |  |  |  |  |           |     ,-------------> addq.w #2,d2
            WaitBlit();   
    162c:	|        |  |  |  |  |  |  |           |     |               jsr -228(a6)
            custom->bltdpt = CstZBufferWork;                
    1630:	|        |  |  |  |  |  |  |           |     |               move.l 1c75c <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e18>
            custom->bltcon0 = (16 - xdiffrest) * 4096 + 0x9f0;              
    163a:	|        |  |  |  |  |  |  |           |     |               move.w a5,d0
    163c:	|        |  |  |  |  |  |  |           |     |               moveq #12,d1
    163e:	|        |  |  |  |  |  |  |           |     |               lsl.w d1,d0
    1640:	|        |  |  |  |  |  |  |           |     |               move.w #2544,d1
    1644:	|        |  |  |  |  |  |  |           |     |               sub.w d0,d1
    1646:	|        |  |  |  |  |  |  |           |     |               move.w d1,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3e04>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    164c:	|        |  |  |  |  |  |  |           |     |               move.l (a2),d0
    164e:	|        |  |  |  |  |  |  |           |     |               move.l d0,d1
    1650:	|  ,-----|--|--|--|--|--|--|-----------|-----|-------------- bmi.w 1abc <CstDrawZBuffer+0x5a6>
    1654:	|  |     |  |  |  |  |  |  |           |     |               asr.l #3,d1
    1656:	|  |     |  |  |  |  |  |  |           |     |               sub.w d2,d1
    1658:	|  |     |  |  |  |  |  |  |           |     |               move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e28>
            custom->bltdmod = 0;                                                            
    165e:	|  |     |  |  |  |  |  |  |           |     |               move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e2a>
        } 
        
        //Get Distance R
        //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
        /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    1666:	|  |  ,--|--|--|--|--|--|--|-----------|-----|-------------> move.w d7,d1
    1668:	|  |  |  |  |  |  |  |  |  |           |     |               sub.w d5,d1

        UWORD height;
        if( zbuffery2oncanvas > spritey2oncanvas) 
    166a:	|  |  |  |  |  |  |  |  |  |           |     |               movea.w d4,a0
    166c:	|  |  |  |  |  |  |  |  |  |           |     |               cmpa.l d3,a0
    166e:	|  |  |  |  |  |  |  |  |  |           |  ,--|-------------- ble.w 17de <CstDrawZBuffer+0x2c8>
          height = sprite->height;
    1672:	|  |  |  |  |  |  |  |  |  |           |  |  |        ,----> move.l 4(a3),d4
        else
          height = zbuffery2oncanvas - spritey1oncanvas;

        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    1676:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      move.l d0,-(sp)
    1678:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      move.w d1,-(sp)
    167a:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      clr.w -(sp)
    167c:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      jsr 17a98 <__mulsi3>
    1682:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      addq.l #8,sp
    1684:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      tst.l d0
    1686:	|  |  |  |  |  |  |  |  |  |           |  |  |  ,-----|----- blt.w 17f4 <CstDrawZBuffer+0x2de>
    168a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  ,-> asr.l #3,d0
    168c:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   add.l d6,d0
    168e:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e14>
        UWORD bltsize =  height*64+bytewidth/2;          
    1694:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lsl.w #6,d4
    1696:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    1698:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   add.w d2,d4
    169a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e1c>
       
        WaitBlit();
    16a0:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lea 1c81c <GfxBase>,a0
    16a6:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   movea.l (a0),a6
    16a8:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   jsr -228(a6)

        custom->bltafwm = 0xffff;
    16ac:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3e08>
        custom->bltalwm = 0xffff;
    16b4:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3e0a>
        custom->bltamod = 2;
    16bc:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e28>
        custom->bltbmod = 0;
    16c4:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3e26>
        custom->bltdmod = 0;
    16cc:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e2a>
        custom->bltcon0 = 0xd0c; //Copy A to D
    16d4:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3e04>
        custom->bltcon1 = 0;        
    16dc:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3e06>

        custom->bltapt = (APTR) CstZBufferWork + 2;
    16e4:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l 1c75c <CstZBufferWork>,d0
    16ea:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   addq.l #2,d0
    16ec:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e14>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    16f2:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l (a3),d2
    16f4:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   movea.l 4(a3),a5
    16f8:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d2,d0
    16fa:	|  |  |  |  |  |  |  |  |  |     ,-----|--|--|--|-----|--|-- bmi.w 187e <CstDrawZBuffer+0x368>
    16fe:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  ,--|--|-> asr.l #3,d0
    1700:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l a5,-(sp)
    1702:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d0,-(sp)
    1704:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   jsr 17a98 <__mulsi3>
    170a:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   addq.l #8,sp
    170c:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d0,d1
    170e:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d0,d1
    1710:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d1,d1
    1712:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d0,d1
    1714:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l 24(a3),d1
    1718:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e10>
        custom->bltdpt = (APTR) CstZBufferResult;
    171e:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l 1c758 <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e18>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    1728:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.w a5,d1
    172a:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   lsl.w #6,d1
    172c:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d2,d0
    172e:	|  |  |  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|-- bmi.w 186c <CstDrawZBuffer+0x356>
    1732:	|  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|-> asr.l #4,d0
    1734:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d1,d0
    1736:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e1c>
      zbufferset = 1;
    173c:	|  |  |  >--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> moveq #1,d0

      }
    }
    zbuffer = zbuffer->nextPanel;
    173e:	|  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|--|-> movea.l 24(a2),a2
  while(zbuffer) 
    1742:	|  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |   cmpa.w #0,a2
    1746:	|  |  |  |  |  |  |  |  '-----|--|--|--|--|--|--|--|--|--|-- bne.w 1596 <CstDrawZBuffer+0x80>
  }
  
  if(zbufferset == 0)
    174a:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.w d0
    174c:	+--|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- beq.w 1a22 <CstDrawZBuffer+0x50c>
    custom->bltdpt = (APTR) CstZBufferResult;
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      

  }

  return CstZBufferResult;
    1750:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l 1c758 <CstZBufferResult>,d0

}
    1756:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    175a:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    175c:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   rts
          bytewidth = (sprite->width/16)*2;
    175e:	|  |  |  |  >--|--|--|--------|--|--|--|--|--|--|--|--|--|-> moveq #15,d1
    1760:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l d1,d2
    1762:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   asr.l #4,d2
    1764:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d2
          custom->bltafwm = 0xffff;
    1766:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3e08>
          custom->bltalwm = 0xffff;                      
    176e:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3e0a>
          custom->bltcon1 = 0;          
    1776:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3e06>
            WaitBlit();   
    177e:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lea 1c81c <GfxBase>,a0
    1784:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    1786:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lsr.w #4,d0
    1788:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,d6
    178a:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    178c:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   andi.l #65535,d6
    1792:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l 20(a2),d6
          if (xdiffrest) {
    1796:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   clr.w d0
    1798:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   cmp.w a5,d0
    179a:	|  |  |  |  |  |  |  |        |  |  |  |  |  '--|--|--|--|-- bne.w 162a <CstDrawZBuffer+0x114>
            WaitBlit();         
    179e:	|  |  |  |  |  |  |  |        |  |  |  '--|-----|--|--|--|-> jsr -228(a6)
            custom->bltdpt = CstZBufferWork + 2;       
    17a2:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l 1c75c <CstZBufferWork>,d0
    17a8:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   addq.l #2,d0
    17aa:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e18>
            custom->bltcon0 = 4096 + 0x9f0;              
    17b0:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.w #6640,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3e04>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    17b8:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l (a2),d0
    17ba:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l d0,d1
    17bc:	|  |  |  |  |  |  |  |  ,-----|--|--|-----|-----|--|--|--|-- bmi.w 1ad4 <CstDrawZBuffer+0x5be>
    17c0:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   asr.l #3,d1
    17c2:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   sub.w d2,d1
    17c4:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e28>
            custom->bltdmod = 2;                                                            
    17ca:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e2a>
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    17d2:	|  |  |  |  |  |  |  |  |  ,--|--|--|-----|-----|--|--|--|-> move.w d7,d1
    17d4:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   sub.w d5,d1
        if( zbuffery2oncanvas > spritey2oncanvas) 
    17d6:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   movea.w d4,a0
    17d8:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   cmpa.l d3,a0
    17da:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  '--|-- bgt.w 1672 <CstDrawZBuffer+0x15c>
          height = zbuffery2oncanvas - spritey1oncanvas;
    17de:	|  |  |  |  |  |  |  |  |  |  |  |  |     '-----|--|-----|-> sub.w d7,d4
        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    17e0:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   move.l d0,-(sp)
    17e2:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   move.w d1,-(sp)
    17e4:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   clr.w -(sp)
    17e6:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   jsr 17a98 <__mulsi3>
    17ec:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   addq.l #8,sp
    17ee:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   tst.l d0
    17f0:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     '-- bge.w 168a <CstDrawZBuffer+0x174>
    17f4:	|  |  |  |  |  |  |  |  |  |  |  |  |           '--|-------> addq.l #7,d0
    17f6:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         asr.l #3,d0
    17f8:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         add.l d6,d0
    17fa:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e14>
        UWORD bltsize =  height*64+bytewidth/2;          
    1800:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lsl.w #6,d4
    1802:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    1804:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         add.w d2,d4
    1806:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e1c>
        WaitBlit();
    180c:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lea 1c81c <GfxBase>,a0
    1812:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         movea.l (a0),a6
    1814:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         jsr -228(a6)
        custom->bltafwm = 0xffff;
    1818:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3e08>
        custom->bltalwm = 0xffff;
    1820:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3e0a>
        custom->bltamod = 2;
    1828:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e28>
        custom->bltbmod = 0;
    1830:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3e26>
        custom->bltdmod = 0;
    1838:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e2a>
        custom->bltcon0 = 0xd0c; //Copy A to D
    1840:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3e04>
        custom->bltcon1 = 0;        
    1848:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3e06>
        custom->bltapt = (APTR) CstZBufferWork + 2;
    1850:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l 1c75c <CstZBufferWork>,d0
    1856:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         addq.l #2,d0
    1858:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e14>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    185e:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l (a3),d2
    1860:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         movea.l 4(a3),a5
    1864:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d2,d0
    1866:	|  |  |  |  |  |  |  |  |  |  |  |  |              '-------- bpl.w 16fe <CstDrawZBuffer+0x1e8>
    186a:	|  |  |  |  |  |  |  |  |  |  |  +--|----------------------- bra.s 187e <CstDrawZBuffer+0x368>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    186c:	|  |  |  |  |  |  |  |  |  |  >--|--|----------------------> moveq #15,d0
    186e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l d2,d0
    1870:	|  |  |  |  |  |  |  |  |  |  |  |  |                        asr.l #4,d0
    1872:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.w d1,d0
    1874:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e1c>
    187a:	|  |  |  +--|--|--|--|--|--|--|--|--|----------------------- bra.w 173c <CstDrawZBuffer+0x226>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    187e:	|  |  |  |  |  |  |  |  |  |  |  '--|----------------------> addq.l #7,d0
    1880:	|  |  |  |  |  |  |  |  |  |  |     |                        asr.l #3,d0
    1882:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l a5,-(sp)
    1884:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d0,-(sp)
    1886:	|  |  |  |  |  |  |  |  |  |  |     |                        jsr 17a98 <__mulsi3>
    188c:	|  |  |  |  |  |  |  |  |  |  |     |                        addq.l #8,sp
    188e:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d0,d1
    1890:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d0,d1
    1892:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d1,d1
    1894:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d0,d1
    1896:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l 24(a3),d1
    189a:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e10>
        custom->bltdpt = (APTR) CstZBufferResult;
    18a0:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l 1c758 <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e18>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    18aa:	|  |  |  |  |  |  |  |  |  |  |     |                        move.w a5,d1
    18ac:	|  |  |  |  |  |  |  |  |  |  |     |                        lsl.w #6,d1
    18ae:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d2,d0
    18b0:	|  |  |  |  |  |  |  |  |  |  |     '----------------------- bpl.w 1732 <CstDrawZBuffer+0x21c>
    18b4:	|  |  |  |  |  |  |  |  |  |  '----------------------------- bra.s 186c <CstDrawZBuffer+0x356>
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    18b6:	|  |  |  |  |  |  |  '--|--|-------------------------------> move.w 48(sp),d1
    18ba:	|  |  |  |  |  |  |     |  |                                 add.w d2,d1
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    18bc:	|  |  |  |  |  |  |     |  |                                 andi.l #65535,d1
    18c2:	|  |  |  |  |  |  |     |  |                                 movea.l d1,a6
    18c4:	|  |  |  |  |  |  |     |  |                                 movea.w d6,a1
    18c6:	|  |  |  |  |  |  |     |  |                                 cmpa.l d1,a1
    18c8:	|  |  |  +--|--|--|-----|--|-------------------------------- bge.w 173c <CstDrawZBuffer+0x226>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    18cc:	|  |  |  |  |  |  |     |  |                                 move.w 50(sp),d1
    18d0:	|  |  |  |  |  |  |     |  |                                 cmp.w d1,d5
    18d2:	|  |  |  |  |  |  |     |  |           ,-------------------- bge.w 19de <CstDrawZBuffer+0x4c8>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    18d6:	|  |  |  |  |  |  |     |  |           |                     cmp.w 50(sp),d4
    18da:	|  |  |  +--|--|--|-----|--|-----------|-------------------- ble.w 173c <CstDrawZBuffer+0x226>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    18de:	|  |  |  |  |  |  |     |  |           |                     sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    18e2:	|  |  |  |  |  |  |     |  |           |                     move.w d6,d1
    18e4:	|  |  |  |  |  |  |     |  |           |                     lsr.w #4,d1
    18e6:	|  |  |  |  |  |  |     |  |           |                     movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    18e8:	|  |  |  |  |  |  |     |  |           |                     andi.w #15,d6
    18ec:	|  |  |  |  |  |  |     |  |           |                     move.w d6,46(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    18f0:	|  |  |  |  |  |  |     |  |           |                     tst.l d2
    18f2:	|  |  |  |  |  |  |     |  |        ,--|-------------------- blt.w 197c <CstDrawZBuffer+0x466>
    18f6:	|  |  |  |  |  |  |     |  |        |  |  ,----------------> asr.l #4,d2
    18f8:	|  |  |  |  |  |  |     |  |        |  |  |                  addq.l #1,d2
    18fa:	|  |  |  |  |  |  |     |  |        |  |  |                  add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    18fc:	|  |  |  |  |  |  |     |  |        |  |  |                  movea.w d0,a0
    18fe:	|  |  |  |  |  |  |     |  |        |  |  |                  cmpa.l a0,a6
    1900:	|  |  |  |  |  |  |     |  |        |  |  |  ,-------------- bge.w 198e <CstDrawZBuffer+0x478>
            WaitBlit();  
    1904:	|  |  |  |  |  |  |     |  |        |  |  |  |  ,----------> lea 1c81c <GfxBase>,a0
    190a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            movea.l (a0),a6
    190c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            jsr -228(a6)
            custom->bltafwm = 0xffff;
    1910:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3e08>
            custom->bltalwm = 0xffff;          
    1918:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3e0a>
            custom->bltdpt = CstZBufferWork;        
    1920:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l 1c75c <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e18>
            custom->bltcon1 = 0;               
    192a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3e06>
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1932:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            movea.l 20(a2),a0
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1936:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l (a2),d0
    1938:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l d0,d1
    193a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     ,----- bmi.s 19a6 <CstDrawZBuffer+0x490>
    193c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      asr.l #3,d1
    193e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      movea.w d1,a6
    1940:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      suba.w d2,a6
            if (xdiffrest) {
    1942:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      tst.w 46(sp)
    1946:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  ,--|----- beq.s 19b4 <CstDrawZBuffer+0x49e>
              custom->bltcon0 = xdiffrest * 4096 + 0x9f0;              
    1948:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  ,-> move.w 46(sp),d6
    194c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   moveq #12,d1
    194e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   lsl.w d1,d6
    1950:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addi.w #2544,d6
    1954:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w d6,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3e04>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    195a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e28>
              custom->bltdmod = 0;                                                            
    1960:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e2a>
              xdiffbyte += 2;                 
    1968:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w a5,d1
    196a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.w #1,d1
    196c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    196e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   andi.l #65535,d1
    1974:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.l a0,d6
    1976:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   sub.l d1,d6
    1978:	|  |  +--|--|--|--|-----|--|--------|--|--|--|--|--|--|--|-- bra.w 1666 <CstDrawZBuffer+0x150>
          bytewidth = (sprite->width/16)*2 + 2;
    197c:	|  |  |  |  |  |  |     |  |        >--|--|--|--|--|--|--|-> moveq #15,d6
    197e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.l d6,d2
    1980:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   asr.l #4,d2
    1982:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.l #1,d2
    1984:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    1986:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   movea.w d0,a0
    1988:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   cmpa.l a0,a6
    198a:	|  |  |  |  |  |  |     |  |        |  |  |  |  '--|--|--|-- blt.w 1904 <CstDrawZBuffer+0x3ee>
              KPrintF("Cstdrawzbuffer: Current version only supports zbuffer size equal to screen size");
    198e:	|  |  |  |  |  |  |     |  |        |  |  |  '-----|--|--|-> pea 17d28 <PutChar+0x17a>
    1994:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   jsr 1710c <KPrintF>
              return FALSE;
    199a:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   addq.l #4,sp
    199c:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   moveq #0,d0
}
    199e:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   movem.l (sp)+,d2-d7/a2-a6
    19a2:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   addq.l #8,sp
    19a4:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   rts
              custom->bltamod = zbuffer->width/8 - bytewidth;
    19a6:	|  |  |  |  |  |  |     |  |        |  |  |        |  '--|-> addq.l #7,d1
    19a8:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   asr.l #3,d1
    19aa:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   movea.w d1,a6
    19ac:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   suba.w d2,a6
            if (xdiffrest) {
    19ae:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   tst.w 46(sp)
    19b2:	|  |  |  |  |  |  |     |  |        |  |  |        |     '-- bne.s 1948 <CstDrawZBuffer+0x432>
              custom->bltcon0 = 0x9f0;              
    19b4:	|  |  |  |  |  |  |     |  |        |  |  |        '-------> move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3e04>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    19bc:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e28>
              custom->bltdmod = 0;                                                            
    19c2:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e2a>
              xdiffbyte += 2;                 
    19ca:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w a5,d1
    19cc:	|  |  |  |  |  |  |     |  |        |  |  |                  addq.w #1,d1
    19ce:	|  |  |  |  |  |  |     |  |        |  |  |                  add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    19d0:	|  |  |  |  |  |  |     |  |        |  |  |                  andi.l #65535,d1
    19d6:	|  |  |  |  |  |  |     |  |        |  |  |                  move.l a0,d6
    19d8:	|  |  |  |  |  |  |     |  |        |  |  |                  sub.l d1,d6
    19da:	|  |  +--|--|--|--|-----|--|--------|--|--|----------------- bra.w 1666 <CstDrawZBuffer+0x150>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    19de:	|  |  |  |  |  |  |     |  |        |  '--|----------------> movea.w d5,a0
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    19e0:	|  |  |  |  |  |  |     |  |        |     |                  cmpa.l d3,a0
    19e2:	|  |  |  +--|--|--|-----|--|--------|-----|----------------- bge.w 173c <CstDrawZBuffer+0x226>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    19e6:	|  |  |  |  |  |  |     |  |        |     |                  sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    19ea:	|  |  |  |  |  |  |     |  |        |     |                  move.w d6,d1
    19ec:	|  |  |  |  |  |  |     |  |        |     |                  lsr.w #4,d1
    19ee:	|  |  |  |  |  |  |     |  |        |     |                  movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    19f0:	|  |  |  |  |  |  |     |  |        |     |                  andi.w #15,d6
    19f4:	|  |  |  |  |  |  |     |  |        |     |                  move.w d6,46(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    19f8:	|  |  |  |  |  |  |     |  |        |     |                  tst.l d2
    19fa:	|  |  |  |  |  |  |     |  |        |     '----------------- bge.w 18f6 <CstDrawZBuffer+0x3e0>
    19fe:	|  |  |  |  |  |  |     |  |        '----------------------- bra.w 197c <CstDrawZBuffer+0x466>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1a02:	|  |  |  |  |  '--|-----|--|-------------------------------> cmp.w 50(sp),d4
    1a06:	|  |  |  '--|-----|-----|--|-------------------------------- ble.w 173c <CstDrawZBuffer+0x226>
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    1a0a:	|  |  |     |     |     |  |                                 move.w 48(sp),d0
    1a0e:	|  |  |     |     |     |  |                                 sub.w d6,d0
          xdiffrest = (xdiff - xdiffbyte * 8);    
    1a10:	|  |  |     |     |     |  |                                 move.w d0,d6
    1a12:	|  |  |     |     |     |  |                                 andi.w #15,d6
    1a16:	|  |  |     |     |     |  |                                 movea.w d6,a5
          bytewidth = (sprite->width/16)*2;
    1a18:	|  |  |     |     |     |  |                                 tst.l d2
    1a1a:	|  |  |     |     '-----|--|-------------------------------- bge.w 15ee <CstDrawZBuffer+0xd8>
    1a1e:	|  |  |     '-----------|--|-------------------------------- bra.w 175e <CstDrawZBuffer+0x248>
    WaitBlit();
    1a22:	'--|--|-----------------|--|-------------------------------> movea.l 1c81c <GfxBase>,a6
    1a28:	   |  |                 |  |                                 jsr -228(a6)
    custom->bltafwm = 0xffff;
    1a2c:	   |  |                 |  |                                 move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3e08>
    custom->bltalwm = 0xffff;
    1a34:	   |  |                 |  |                                 move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3e0a>
    custom->bltamod = 0;
    1a3c:	   |  |                 |  |                                 move.w #0,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e28>
    custom->bltbmod = 0;
    1a44:	   |  |                 |  |                                 move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3e26>
    custom->bltcmod = 0;
    1a4c:	   |  |                 |  |                                 move.w #0,dff060 <gcc8_c_support.c.c60c1f2b+0xdb3e24>
    custom->bltdmod = 0;
    1a54:	   |  |                 |  |                                 move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e2a>
    custom->bltcon0 = 0x9f0; //Copy A to D
    1a5c:	   |  |                 |  |                                 move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3e04>
    custom->bltcon1 = 0;        
    1a64:	   |  |                 |  |                                 move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3e06>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1a6c:	   |  |                 |  |                                 move.l (a3),d2
    1a6e:	   |  |                 |  |                                 move.l 4(a3),d3
    1a72:	   |  |                 |  |                                 move.l d2,d0
    1a74:	   |  |                 |  |                       ,-------- bmi.w 1afc <CstDrawZBuffer+0x5e6>
    1a78:	   |  |                 |  |                       |         asr.l #3,d0
    1a7a:	   |  |                 |  |                       |         move.l d3,-(sp)
    1a7c:	   |  |                 |  |                       |         move.l d0,-(sp)
    1a7e:	   |  |                 |  |                       |         jsr 17a98 <__mulsi3>
    1a84:	   |  |                 |  |                       |         addq.l #8,sp
    1a86:	   |  |                 |  |                       |         move.l d0,d1
    1a88:	   |  |                 |  |                       |         add.l d0,d1
    1a8a:	   |  |                 |  |                       |         add.l d1,d1
    1a8c:	   |  |                 |  |                       |         add.l d1,d0
    1a8e:	   |  |                 |  |                       |         add.l 24(a3),d0
    1a92:	   |  |                 |  |                       |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e14>
    custom->bltdpt = (APTR) CstZBufferResult;
    1a98:	   |  |                 |  |                       |         move.l 1c758 <CstZBufferResult>,d0
    1a9e:	   |  |                 |  |                       |         move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e18>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1aa4:	   |  |                 |  |                       |         lsl.w #6,d3
    1aa6:	   |  |                 |  |                       |         tst.l d2
    1aa8:	   |  |                 |  |                    ,--|-------- blt.s 1aec <CstDrawZBuffer+0x5d6>
    1aaa:	   |  |                 |  |                    |  |  ,----> asr.l #4,d2
    1aac:	   |  |                 |  |                    |  |  |      add.w d2,d3
    1aae:	   |  |                 |  |                    |  |  |      move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e1c>
}
    1ab4:	   |  |                 |  |                    |  |  |  ,-> movem.l (sp)+,d2-d7/a2-a6
    1ab8:	   |  |                 |  |                    |  |  |  |   addq.l #8,sp
    1aba:	   |  |                 |  |                    |  |  |  |   rts
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1abc:	   '--|-----------------|--|--------------------|--|--|--|-> addq.l #7,d1
    1abe:	      |                 |  |                    |  |  |  |   asr.l #3,d1
    1ac0:	      |                 |  |                    |  |  |  |   sub.w d2,d1
    1ac2:	      |                 |  |                    |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e28>
            custom->bltdmod = 0;                                                            
    1ac8:	      |                 |  |                    |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e2a>
    1ad0:	      '-----------------|--|--------------------|--|--|--|-- bra.w 1666 <CstDrawZBuffer+0x150>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1ad4:	                        '--|--------------------|--|--|--|-> addq.l #7,d1
    1ad6:	                           |                    |  |  |  |   asr.l #3,d1
    1ad8:	                           |                    |  |  |  |   sub.w d2,d1
    1ada:	                           |                    |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e28>
            custom->bltdmod = 2;                                                            
    1ae0:	                           |                    |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e2a>
    1ae8:	                           '--------------------|--|--|--|-- bra.w 17d2 <CstDrawZBuffer+0x2bc>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1aec:	                                                >--|--|--|-> moveq #15,d1
    1aee:	                                                |  |  |  |   add.l d1,d2
    1af0:	                                                |  |  |  |   asr.l #4,d2
    1af2:	                                                |  |  |  |   add.w d2,d3
    1af4:	                                                |  |  |  |   move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e1c>
  return CstZBufferResult;
    1afa:	                                                |  |  |  '-- bra.s 1ab4 <CstDrawZBuffer+0x59e>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1afc:	                                                |  '--|----> addq.l #7,d0
    1afe:	                                                |     |      asr.l #3,d0
    1b00:	                                                |     |      move.l d3,-(sp)
    1b02:	                                                |     |      move.l d0,-(sp)
    1b04:	                                                |     |      jsr 17a98 <__mulsi3>
    1b0a:	                                                |     |      addq.l #8,sp
    1b0c:	                                                |     |      move.l d0,d1
    1b0e:	                                                |     |      add.l d0,d1
    1b10:	                                                |     |      add.l d1,d1
    1b12:	                                                |     |      add.l d1,d0
    1b14:	                                                |     |      add.l 24(a3),d0
    1b18:	                                                |     |      move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e14>
    custom->bltdpt = (APTR) CstZBufferResult;
    1b1e:	                                                |     |      move.l 1c758 <CstZBufferResult>,d0
    1b24:	                                                |     |      move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e18>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1b2a:	                                                |     |      lsl.w #6,d3
    1b2c:	                                                |     |      tst.l d2
    1b2e:	                                                |     '----- bge.w 1aaa <CstDrawZBuffer+0x594>
    1b32:	                                                '----------- bra.s 1aec <CstDrawZBuffer+0x5d6>

00001b34 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1b34:	    lea -20(sp),sp
    1b38:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1b3a:	    move.l 1c738 <CstDrawBuffer>,d0
    1b40:	,-- beq.s 1b5a <CstFreeBuffer+0x26>
    1b42:	|   move.l 1c738 <CstDrawBuffer>,20(sp)
    1b4a:	|   move.l 1c810 <SysBase>,d0
    1b50:	|   movea.l d0,a6
    1b52:	|   movea.l 20(sp),a1
    1b56:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    1b5a:	'-> move.l 1c734 <CstViewBuffer>,d0
    1b60:	,-- beq.s 1b7a <CstFreeBuffer+0x46>
    1b62:	|   move.l 1c734 <CstViewBuffer>,16(sp)
    1b6a:	|   move.l 1c810 <SysBase>,d0
    1b70:	|   movea.l d0,a6
    1b72:	|   movea.l 16(sp),a1
    1b76:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    1b7a:	'-> move.l 1c72e <CstCopperList>,d0
    1b80:	,-- beq.s 1b9a <CstFreeBuffer+0x66>
    1b82:	|   move.l 1c72e <CstCopperList>,12(sp)
    1b8a:	|   move.l 1c810 <SysBase>,d0
    1b90:	|   movea.l d0,a6
    1b92:	|   movea.l 12(sp),a1
    1b96:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    1b9a:	'-> move.l 1c726 <CstBackDrop>,d0
    1ba0:	,-- beq.s 1bba <CstFreeBuffer+0x86>
    1ba2:	|   move.l 1c726 <CstBackDrop>,8(sp)
    1baa:	|   move.l 1c810 <SysBase>,d0
    1bb0:	|   movea.l d0,a6
    1bb2:	|   movea.l 8(sp),a1
    1bb6:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    1bba:	'-> move.l 1c72a <CstBackDropBackup>,d0
    1bc0:	,-- beq.s 1bda <CstFreeBuffer+0xa6>
    1bc2:	|   move.l 1c72a <CstBackDropBackup>,4(sp)
    1bca:	|   move.l 1c810 <SysBase>,d0
    1bd0:	|   movea.l d0,a6
    1bd2:	|   movea.l 4(sp),a1
    1bd6:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    1bda:	'-> clr.l 1c738 <CstDrawBuffer>
  CstViewBuffer = NULL;
    1be0:	    clr.l 1c734 <CstViewBuffer>
  CstCopperList = NULL;
    1be6:	    clr.l 1c72e <CstCopperList>
  CstBackDrop = NULL;
    1bec:	    clr.l 1c726 <CstBackDrop>

}
    1bf2:	    nop
    1bf4:	    movea.l (sp)+,a6
    1bf6:	    lea 20(sp),sp
    1bfa:	    rts

00001bfc <CstFreeze>:



void CstFreeze( ) {
    1bfc:	       lea -36(sp),sp
    1c00:	       move.l a6,-(sp)
    1c02:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    1c04:	       pea 17d78 <PutChar+0x1ca>
    1c0a:	       jsr 1710c <KPrintF>
    1c10:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    1c12:	       move.l 1c764 <winWidth>,d0
    1c18:	       lsr.l #3,d0
    1c1a:	       move.l d0,d1
    1c1c:	       move.l 1c768 <winHeight>,d0
    1c22:	       move.l d0,d0
    1c24:	       muls.w d0,d1
    1c26:	       move.w d1,d0
    1c28:	       add.w d0,d0
    1c2a:	       add.w d0,d0
    1c2c:	       move.w d0,d2
    1c2e:	       add.w d1,d2
    1c30:	       move.w d2,26(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1c34:	       move.l #14675968,22(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    1c3c:	       moveq #0,d0
    1c3e:	       move.w 26(sp),d0
    1c42:	       move.l d0,18(sp)
    1c46:	       clr.l 14(sp)
    1c4a:	       move.l 1c810 <SysBase>,d0
    1c50:	       movea.l d0,a6
    1c52:	       move.l 18(sp),d0
    1c56:	       move.l 14(sp),d1
    1c5a:	       jsr -684(a6)
    1c5e:	       move.l d0,10(sp)
    1c62:	       move.l 10(sp),d0
    1c66:	       move.l d0,1c72a <CstBackDropBackup>
  if( !CstBackDropBackup)
    1c6c:	       move.l 1c72a <CstBackDropBackup>,d0
    1c72:	   ,-- bne.s 1c82 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1c74:	   |   pea 17d9f <PutChar+0x1f1>
    1c7a:	   |   jsr 1710c <KPrintF>
    1c80:	   |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    1c82:	   '-> move.l 1c768 <winHeight>,d0
    1c88:	       move.l d0,d0
    1c8a:	       movea.w d0,a1
    1c8c:	       move.l 1c764 <winWidth>,d0
    1c92:	       move.l d0,d0
    1c94:	       movea.w d0,a0
    1c96:	       move.l 1c72a <CstBackDropBackup>,d0
    1c9c:	       clr.l -(sp)
    1c9e:	       pea 5 <_start+0x5>
    1ca2:	       move.l a1,-(sp)
    1ca4:	       move.l a0,-(sp)
    1ca6:	       pea 17dd7 <PutChar+0x229>
    1cac:	       move.l d0,-(sp)
    1cae:	       jsr 171f4 <debug_register_bitmap>
    1cb4:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1cb8:	       move.l 1c726 <CstBackDrop>,40(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1cc0:	       move.l 1c72a <CstBackDropBackup>,36(sp)
  for(int i=0;i<size/4;i++) 
    1cc8:	       clr.l 32(sp)
    1ccc:	   ,-- bra.s 1cf2 <CstFreeze+0xf6>
  {
    *dst++ = *src++;
    1cce:	,--|-> move.l 40(sp),d1
    1cd2:	|  |   move.l d1,d0
    1cd4:	|  |   addq.l #4,d0
    1cd6:	|  |   move.l d0,40(sp)
    1cda:	|  |   move.l 36(sp),d0
    1cde:	|  |   move.l d0,d2
    1ce0:	|  |   addq.l #4,d2
    1ce2:	|  |   move.l d2,36(sp)
    1ce6:	|  |   movea.l d1,a0
    1ce8:	|  |   move.l (a0),d1
    1cea:	|  |   movea.l d0,a0
    1cec:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1cee:	|  |   addq.l #1,32(sp)
    1cf2:	|  '-> move.w 26(sp),d0
    1cf6:	|      lsr.w #2,d0
    1cf8:	|      move.w d0,d0
    1cfa:	|      andi.l #65535,d0
    1d00:	|      cmp.l 32(sp),d0
    1d04:	'----- bgt.s 1cce <CstFreeze+0xd2>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1d06:	       move.l 1c734 <CstViewBuffer>,40(sp)
  dst = (ULONG *) CstBackDrop;
    1d0e:	       move.l 1c726 <CstBackDrop>,36(sp)

  for(int i=0;i<size/4;i++) 
    1d16:	       clr.l 28(sp)
    1d1a:	   ,-- bra.s 1d40 <CstFreeze+0x144>
  {
    *dst++ = *src++;
    1d1c:	,--|-> move.l 40(sp),d1
    1d20:	|  |   move.l d1,d0
    1d22:	|  |   addq.l #4,d0
    1d24:	|  |   move.l d0,40(sp)
    1d28:	|  |   move.l 36(sp),d0
    1d2c:	|  |   move.l d0,d2
    1d2e:	|  |   addq.l #4,d2
    1d30:	|  |   move.l d2,36(sp)
    1d34:	|  |   movea.l d1,a0
    1d36:	|  |   move.l (a0),d1
    1d38:	|  |   movea.l d0,a0
    1d3a:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1d3c:	|  |   addq.l #1,28(sp)
    1d40:	|  '-> move.w 26(sp),d0
    1d44:	|      lsr.w #2,d0
    1d46:	|      move.w d0,d0
    1d48:	|      andi.l #65535,d0
    1d4e:	|      cmp.l 28(sp),d0
    1d52:	'----- bgt.s 1d1c <CstFreeze+0x120>
  }

  CstApplyBackDropCounter = 2;
    1d54:	       move.w #2,1c732 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1d5c:	       move.l 1c764 <winWidth>,d0
    1d62:	       lsr.l #4,d0
    1d64:	       movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    1d6a:	       move.l a0,d1
    1d6c:	       addq.l #2,d1
    1d6e:	       move.l d1,1c748 <CstBackDropBufferApplyCursor>
    1d74:	       move.l d0,d0
    1d76:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    1d78:	       move.l 1c768 <winHeight>,d0
    1d7e:	       movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    1d84:	       move.l a0,d1
    1d86:	       addq.l #2,d1
    1d88:	       move.l d1,1c748 <CstBackDropBufferApplyCursor>
    1d8e:	       move.l d0,d0
    1d90:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1d92:	       movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    1d98:	       move.l a0,d0
    1d9a:	       addq.l #2,d0
    1d9c:	       move.l d0,1c748 <CstBackDropBufferApplyCursor>
    1da2:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1da4:	       movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    1daa:	       move.l a0,d0
    1dac:	       addq.l #2,d0
    1dae:	       move.l d0,1c748 <CstBackDropBufferApplyCursor>
    1db4:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1db6:	       movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    1dbc:	       move.l a0,d0
    1dbe:	       addq.l #2,d0
    1dc0:	       move.l d0,1c748 <CstBackDropBufferApplyCursor>
    1dc6:	       clr.w (a0)

  KPrintF("CstFreeze: Finished");
    1dc8:	       pea 17de6 <PutChar+0x238>
    1dce:	       jsr 1710c <KPrintF>
    1dd4:	       addq.l #4,sp

}  
    1dd6:	       nop
    1dd8:	       move.l (sp)+,d2
    1dda:	       movea.l (sp)+,a6
    1ddc:	       lea 36(sp),sp
    1de0:	       rts

00001de2 <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1de2:	             lea -144(sp),sp
    1de6:	             movem.l d2-d4/a6,-(sp)

	KPrintF("CstLoadBackDrop: Loading of Background started");
    1dea:	             pea 17dfa <PutChar+0x24c>
    1df0:	             jsr 1710c <KPrintF>
    1df6:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1df8:	             move.l 164(sp),-(sp)
    1dfc:	             jsr 6bc <get2bytes>
    1e02:	             addq.l #4,sp
    1e04:	             move.w d0,134(sp)
  UWORD height = get2bytes(fp);  
    1e08:	             move.l 164(sp),-(sp)
    1e0c:	             jsr 6bc <get2bytes>
    1e12:	             addq.l #4,sp
    1e14:	             move.w d0,132(sp)

  UWORD widthbyteslayer = width/8;
    1e18:	             move.w 134(sp),d0
    1e1c:	             lsr.w #3,d0
    1e1e:	             move.w d0,130(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    1e22:	             move.w 130(sp),d0
    1e26:	             lsr.w #1,d0
    1e28:	             move.w d0,128(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1e2c:	             move.l 1c764 <winWidth>,d0
    1e32:	             lsr.l #3,d0
    1e34:	             move.w d0,126(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1e38:	             move.w 130(sp),d0
    1e3c:	             muls.w 132(sp),d0
    1e40:	             move.w d0,124(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    1e44:	             move.w 124(sp),d1
    1e48:	             move.w d1,d0
    1e4a:	             add.w d0,d0
    1e4c:	             add.w d0,d0
    1e4e:	             move.w d0,d2
    1e50:	             add.w d1,d2
    1e52:	             move.w d2,122(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    1e56:	             move.w 1c720 <CstPaletteLoaded>,d0
    1e5c:	,----------- bne.w 1ef6 <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    1e60:	|            move.w #384,120(sp)

    if(CstPalette) {
    1e66:	|            move.l 1c750 <CstPalette>,d0
    1e6c:	|        ,-- beq.s 1e86 <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    1e6e:	|        |   move.l 1c750 <CstPalette>,116(sp)
    1e76:	|        |   move.l 1c810 <SysBase>,d0
    1e7c:	|        |   movea.l d0,a6
    1e7e:	|        |   movea.l 116(sp),a1
    1e82:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    1e86:	|        '-> moveq #64,d0
    1e88:	|            move.l d0,112(sp)
    1e8c:	|            clr.l 108(sp)
    1e90:	|            move.l 1c810 <SysBase>,d0
    1e96:	|            movea.l d0,a6
    1e98:	|            move.l 112(sp),d0
    1e9c:	|            move.l 108(sp),d1
    1ea0:	|            jsr -684(a6)
    1ea4:	|            move.l d0,104(sp)
    1ea8:	|            move.l 104(sp),d0
    1eac:	|            move.l d0,1c750 <CstPalette>
    CstPaletteLoaded = 1;
    1eb2:	|            move.w #1,1c720 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    1eba:	|            move.l 1c750 <CstPalette>,156(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1ec2:	|            clr.l 152(sp)
    1ec6:	|        ,-- bra.s 1eec <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    1ec8:	|     ,--|-> move.l 164(sp),-(sp)
    1ecc:	|     |  |   jsr 6bc <get2bytes>
    1ed2:	|     |  |   addq.l #4,sp
    1ed4:	|     |  |   move.l d0,d1
    1ed6:	|     |  |   move.l 156(sp),d0
    1eda:	|     |  |   move.l d0,d2
    1edc:	|     |  |   addq.l #2,d2
    1ede:	|     |  |   move.l d2,156(sp)
    1ee2:	|     |  |   move.l d1,d1
    1ee4:	|     |  |   movea.l d0,a0
    1ee6:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1ee8:	|     |  |   addq.l #1,152(sp)
    1eec:	|     |  '-> moveq #31,d0
    1eee:	|     |      cmp.l 152(sp),d0
    1ef2:	|     '----- bge.s 1ec8 <CstLoadBackdrop+0xe6>
    1ef4:	|  ,-------- bra.s 1f14 <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1ef6:	'--|-------> clr.l 148(sp)
    1efa:	   |     ,-- bra.s 1f0c <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    1efc:	   |  ,--|-> move.l 164(sp),-(sp)
    1f00:	   |  |  |   jsr 6bc <get2bytes>
    1f06:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1f08:	   |  |  |   addq.l #1,148(sp)
    1f0c:	   |  |  '-> moveq #31,d2
    1f0e:	   |  |      cmp.l 148(sp),d2
    1f12:	   |  '----- bge.s 1efc <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    1f14:	   '-------> moveq #0,d0
    1f16:	             move.w 122(sp),d0
    1f1a:	             move.l d0,100(sp)
    1f1e:	             moveq #2,d0
    1f20:	             move.l d0,96(sp)
    1f24:	             move.l 1c810 <SysBase>,d0
    1f2a:	             movea.l d0,a6
    1f2c:	             move.l 100(sp),d0
    1f30:	             move.l 96(sp),d1
    1f34:	             jsr -684(a6)
    1f38:	             move.l d0,92(sp)
    1f3c:	             move.l 92(sp),d0
    1f40:	             move.l d0,88(sp)
  if( !tmpbuffer)
    1f44:	         ,-- bne.s 1f54 <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    1f46:	         |   pea 17e29 <PutChar+0x27b>
    1f4c:	         |   jsr 1710c <KPrintF>
    1f52:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    1f54:	         '-> moveq #0,d0
    1f56:	             move.w 124(sp),d0
    1f5a:	             move.l d0,84(sp)
    1f5e:	             moveq #2,d2
    1f60:	             move.l d2,80(sp)
    1f64:	             move.l 1c810 <SysBase>,d0
    1f6a:	             movea.l d0,a6
    1f6c:	             move.l 84(sp),d0
    1f70:	             move.l 80(sp),d1
    1f74:	             jsr -684(a6)
    1f78:	             move.l d0,76(sp)
    1f7c:	             move.l 76(sp),d0
    1f80:	             move.l d0,72(sp)
  if( !tmpmask)
    1f84:	         ,-- bne.s 1f94 <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    1f86:	         |   pea 17e5f <PutChar+0x2b1>
    1f8c:	         |   jsr 1710c <KPrintF>
    1f92:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    1f94:	         '-> move.w 132(sp),d0
    1f98:	             movea.w d0,a1
    1f9a:	             move.w 134(sp),d0
    1f9e:	             movea.w d0,a0
    1fa0:	             clr.l -(sp)
    1fa2:	             pea 5 <_start+0x5>
    1fa6:	             move.l a1,-(sp)
    1fa8:	             move.l a0,-(sp)
    1faa:	             pea 17e93 <PutChar+0x2e5>
    1fb0:	             move.l 108(sp),-(sp)
    1fb4:	             jsr 171f4 <debug_register_bitmap>
    1fba:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    1fbe:	             move.w 132(sp),d0
    1fc2:	             movea.w d0,a1
    1fc4:	             move.w 134(sp),d0
    1fc8:	             movea.w d0,a0
    1fca:	             clr.l -(sp)
    1fcc:	             pea 1 <_start+0x1>
    1fd0:	             move.l a1,-(sp)
    1fd2:	             move.l a0,-(sp)
    1fd4:	             pea 17ea1 <PutChar+0x2f3>
    1fda:	             move.l 108(sp),-(sp)
    1fde:	             jsr 171f4 <debug_register_bitmap>
    1fe4:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    1fe8:	             move.l 164(sp),68(sp)
    1fee:	             move.l 88(sp),64(sp)
    1ff4:	             moveq #2,d0
    1ff6:	             move.l d0,60(sp)
    1ffa:	             move.w 122(sp),d0
    1ffe:	             lsr.w #1,d0
    2000:	             move.w d0,d0
    2002:	             andi.l #65535,d0
    2008:	             move.l d0,56(sp)
    200c:	             move.l 1c818 <DOSBase>,d0
    2012:	             movea.l d0,a6
    2014:	             move.l 68(sp),d1
    2018:	             move.l 64(sp),d2
    201c:	             move.l 60(sp),d3
    2020:	             move.l 56(sp),d4
    2024:	             jsr -324(a6)
    2028:	             move.l d0,52(sp)
    202c:	             move.l 52(sp),d0
    2030:	             move.w d0,50(sp)
  if(!count) {
    2034:	         ,-- bne.s 2048 <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    2036:	         |   pea 17ead <PutChar+0x2ff>
    203c:	         |   jsr 1710c <KPrintF>
    2042:	         |   addq.l #4,sp
    return;
    2044:	   ,-----|-- bra.w 2294 <CstLoadBackdrop+0x4b2>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    2048:	   |     '-> move.l 164(sp),46(sp)
    204e:	   |         move.l 72(sp),42(sp)
    2054:	   |         moveq #2,d2
    2056:	   |         move.l d2,38(sp)
    205a:	   |         move.w 124(sp),d0
    205e:	   |         lsr.w #1,d0
    2060:	   |         move.w d0,d0
    2062:	   |         andi.l #65535,d0
    2068:	   |         move.l d0,34(sp)
    206c:	   |         move.l 1c818 <DOSBase>,d0
    2072:	   |         movea.l d0,a6
    2074:	   |         move.l 46(sp),d1
    2078:	   |         move.l 42(sp),d2
    207c:	   |         move.l 38(sp),d3
    2080:	   |         move.l 34(sp),d4
    2084:	   |         jsr -324(a6)
    2088:	   |         move.l d0,30(sp)
    208c:	   |         move.l 30(sp),d0
    2090:	   |         move.w d0,50(sp)
   

  if(!count) {
    2094:	   |     ,-- bne.s 20a8 <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    2096:	   |     |   pea 17ead <PutChar+0x2ff>
    209c:	   |     |   jsr 1710c <KPrintF>
    20a2:	   |     |   addq.l #4,sp
    return;
    20a4:	   +-----|-- bra.w 2294 <CstLoadBackdrop+0x4b2>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    20a8:	   |     '-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    20b0:	   |         move.l 1c726 <CstBackDrop>,d0
    20b6:	   |         move.l d0,144(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    20ba:	   |         move.l 172(sp),d0
    20be:	   |         move.w d0,d1
    20c0:	   |         muls.w 126(sp),d1
    20c4:	   |         move.l 168(sp),d0
    20c8:	   |     ,-- bpl.s 20cc <CstLoadBackdrop+0x2ea>
    20ca:	   |     |   addq.l #7,d0
    20cc:	   |     '-> asr.l #3,d0
    20ce:	   |         move.l d0,d0
    20d0:	   |         movea.w d1,a0
    20d2:	   |         adda.w d0,a0
    20d4:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    20d8:	   |         moveq #0,d0
    20da:	   |         move.w 24(sp),d0
    20de:	   |         add.l d0,144(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    20e2:	   |         pea 17ec8 <PutChar+0x31a>
    20e8:	   |         jsr 1710c <KPrintF>
    20ee:	   |         addq.l #4,sp


  WaitBlit();
    20f0:	   |         move.l 1c81c <GfxBase>,d0
    20f6:	   |         movea.l d0,a6
    20f8:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    20fc:	   |         movea.l 26(sp),a0
    2100:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    2106:	   |         movea.l 26(sp),a0
    210a:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    2110:	   |         movea.l 26(sp),a0
    2114:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    211a:	   |         movea.l 26(sp),a0
    211e:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    2124:	   |         move.w 126(sp),d0
    2128:	   |         sub.w 130(sp),d0
    212c:	   |         movea.l 26(sp),a0
    2130:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    2134:	   |         move.w 126(sp),d0
    2138:	   |         sub.w 130(sp),d0
    213c:	   |         movea.l 26(sp),a0
    2140:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    2144:	   |         movea.l 26(sp),a0
    2148:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    214e:	   |         movea.l 26(sp),a0
    2152:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    2158:	   |         move.l 88(sp),140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    215e:	   |         clr.l 136(sp)
    2162:	   |     ,-- bra.s 21c4 <CstLoadBackdrop+0x3e2>
  {    
    custom->bltapt = (APTR) tmpmask;
    2164:	   |  ,--|-> movea.l 26(sp),a0
    2168:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    216e:	   |  |  |   move.l 140(sp),d0
    2172:	   |  |  |   movea.l 26(sp),a0
    2176:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    217a:	   |  |  |   move.l 144(sp),d0
    217e:	   |  |  |   movea.l 26(sp),a0
    2182:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    2186:	   |  |  |   move.l 144(sp),d0
    218a:	   |  |  |   movea.l 26(sp),a0
    218e:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    2192:	   |  |  |   move.w 132(sp),d0
    2196:	   |  |  |   lsl.w #6,d0
    2198:	   |  |  |   add.w 128(sp),d0
    219c:	   |  |  |   movea.l 26(sp),a0
    21a0:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    21a4:	   |  |  |   moveq #0,d0
    21a6:	   |  |  |   move.w 124(sp),d0
    21aa:	   |  |  |   add.l d0,140(sp)
    backdropcursor += CstBackdropSizePlane;
    21ae:	   |  |  |   move.w 1c724 <CstBackdropSizePlane>,d0
    21b4:	   |  |  |   move.w d0,d0
    21b6:	   |  |  |   andi.l #65535,d0
    21bc:	   |  |  |   add.l d0,144(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    21c0:	   |  |  |   addq.l #1,136(sp)
    21c4:	   |  |  '-> moveq #4,d0
    21c6:	   |  |      cmp.l 136(sp),d0
    21ca:	   |  '----- bge.s 2164 <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    21cc:	   |         move.l 1c81c <GfxBase>,d0
    21d2:	   |         movea.l d0,a6
    21d4:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    21d8:	   |         pea 17ee7 <PutChar+0x339>
    21de:	   |         jsr 1710c <KPrintF>
    21e4:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    21e6:	   |         move.l 88(sp),20(sp)
    21ec:	   |         move.l 1c810 <SysBase>,d0
    21f2:	   |         movea.l d0,a6
    21f4:	   |         movea.l 20(sp),a1
    21f8:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    21fc:	   |         move.l 72(sp),16(sp)
    2202:	   |         move.l 1c810 <SysBase>,d0
    2208:	   |         movea.l d0,a6
    220a:	   |         movea.l 16(sp),a1
    220e:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    2212:	   |         move.w #2,1c732 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    221a:	   |         move.l 1c764 <winWidth>,d0
    2220:	   |         lsr.l #4,d0
    2222:	   |         movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    2228:	   |         move.l a0,d1
    222a:	   |         addq.l #2,d1
    222c:	   |         move.l d1,1c748 <CstBackDropBufferApplyCursor>
    2232:	   |         move.l d0,d0
    2234:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    2236:	   |         move.l 1c768 <winHeight>,d0
    223c:	   |         movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    2242:	   |         move.l a0,d1
    2244:	   |         addq.l #2,d1
    2246:	   |         move.l d1,1c748 <CstBackDropBufferApplyCursor>
    224c:	   |         move.l d0,d0
    224e:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2250:	   |         movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    2256:	   |         move.l a0,d0
    2258:	   |         addq.l #2,d0
    225a:	   |         move.l d0,1c748 <CstBackDropBufferApplyCursor>
    2260:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2262:	   |         movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    2268:	   |         move.l a0,d0
    226a:	   |         addq.l #2,d0
    226c:	   |         move.l d0,1c748 <CstBackDropBufferApplyCursor>
    2272:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2274:	   |         movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    227a:	   |         move.l a0,d0
    227c:	   |         addq.l #2,d0
    227e:	   |         move.l d0,1c748 <CstBackDropBufferApplyCursor>
    2284:	   |         clr.w (a0)

  KPrintF("CstLoadBackDrop: Finished");
    2286:	   |         pea 17f07 <PutChar+0x359>
    228c:	   |         jsr 1710c <KPrintF>
    2292:	   |         addq.l #4,sp

}
    2294:	   '-------> movem.l (sp)+,d2-d4/a6
    2298:	             lea 144(sp),sp
    229c:	             rts

0000229e <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    229e:	                lea -72(sp),sp
    22a2:	                move.l a6,-(sp)
    22a4:	                move.l d2,-(sp)
    22a6:	                move.l 88(sp),d1
    22aa:	                move.l 92(sp),d0
    22ae:	                move.w d1,d1
    22b0:	                move.w d1,10(sp)
    22b4:	                move.w d0,d0
    22b6:	                move.w d0,8(sp)
  UWORD *destination = 0;
    22ba:	                clr.l 28(sp)
  CstApplyBackDropCounter = 2;
    22be:	                move.w #2,1c732 <CstApplyBackDropCounter>
  destination = (UWORD *) CstBackDrop;      
    22c6:	                move.l 1c726 <CstBackDrop>,28(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    22ce:	                clr.l 56(sp)

  blitwidth = single->width/16;
    22d2:	                movea.l 84(sp),a0
    22d6:	                move.l (a0),d0
    22d8:	                movea.l d0,a0
    22da:	                cmpa.w #0,a0
    22de:	            ,-- bge.s 22e4 <CstPasteChar+0x46>
    22e0:	            |   lea 15(a0),a0
    22e4:	            '-> move.l a0,d0
    22e6:	                asr.l #4,d0
    22e8:	                move.l d0,40(sp)
  if(blitwidth == 0) blitwidth = 1;
    22ec:	            ,-- bne.s 22f4 <CstPasteChar+0x56>
    22ee:	            |   moveq #1,d0
    22f0:	            |   move.l d0,40(sp)

  if( y < 0) {
    22f4:	            '-> tst.w 8(sp)
    22f8:	         ,----- bge.s 2342 <CstPasteChar+0xa4>
    if(y + single->height < 0) {
    22fa:	         |      movea.w 8(sp),a1
    22fe:	         |      movea.l 84(sp),a0
    2302:	         |      move.l 4(a0),d0
    2306:	         |      add.l a1,d0
    2308:	         |  ,-- bpl.s 231c <CstPasteChar+0x7e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    230a:	         |  |   pea 17f21 <PutChar+0x373>
    2310:	         |  |   jsr 1710c <KPrintF>
    2316:	         |  |   addq.l #4,sp
      return;
    2318:	,--------|--|-- bra.w 29de <CstPasteChar+0x740>
    }
    ystartdst = 0;
    231c:	|        |  '-> clr.l 52(sp)
    ystartsrc = y*-1;
    2320:	|        |      move.w 8(sp),d0
    2324:	|        |      ext.l d0
    2326:	|        |      move.l d0,d1
    2328:	|        |      neg.l d1
    232a:	|        |      move.l d1,48(sp)
    blitheight = single->height+y;
    232e:	|        |      movea.l 84(sp),a0
    2332:	|        |      move.l 4(a0),d0
    2336:	|        |      movea.w 8(sp),a0
    233a:	|        |      add.l a0,d0
    233c:	|        |      move.l d0,44(sp)
    2340:	|     ,--|----- bra.s 23b4 <CstPasteChar+0x116>
  } else if(y+single->height > (int) winHeight) {
    2342:	|     |  '----> movea.w 8(sp),a1
    2346:	|     |         movea.l 84(sp),a0
    234a:	|     |         move.l 4(a0),d0
    234e:	|     |         move.l a1,d1
    2350:	|     |         add.l d0,d1
    2352:	|     |         move.l 1c768 <winHeight>,d0
    2358:	|     |         cmp.l d1,d0
    235a:	|     |  ,----- bge.s 239c <CstPasteChar+0xfe>
    if(y  > (int) winHeight) {
    235c:	|     |  |      movea.w 8(sp),a0
    2360:	|     |  |      move.l 1c768 <winHeight>,d0
    2366:	|     |  |      cmp.l a0,d0
    2368:	|     |  |  ,-- bge.s 237c <CstPasteChar+0xde>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    236a:	|     |  |  |   pea 17f21 <PutChar+0x373>
    2370:	|     |  |  |   jsr 1710c <KPrintF>
    2376:	|     |  |  |   addq.l #4,sp
      return;
    2378:	+-----|--|--|-- bra.w 29de <CstPasteChar+0x740>
    }
    ystartdst = y;
    237c:	|     |  |  '-> movea.w 8(sp),a0
    2380:	|     |  |      move.l a0,52(sp)
    ystartsrc = 0;
    2384:	|     |  |      clr.l 48(sp)
    blitheight = winHeight-y;
    2388:	|     |  |      move.l 1c768 <winHeight>,d0
    238e:	|     |  |      movea.w 8(sp),a0
    2392:	|     |  |      move.l d0,d1
    2394:	|     |  |      sub.l a0,d1
    2396:	|     |  |      move.l d1,44(sp)
    239a:	|     +--|----- bra.s 23b4 <CstPasteChar+0x116>
  } else {
    ystartdst = y;
    239c:	|     |  '----> movea.w 8(sp),a0
    23a0:	|     |         move.l a0,52(sp)
    ystartsrc = 0;
    23a4:	|     |         clr.l 48(sp)
    blitheight = single->height;
    23a8:	|     |         movea.l 84(sp),a0
    23ac:	|     |         move.l 4(a0),d0
    23b0:	|     |         move.l d0,44(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    23b4:	|     '-------> tst.w 10(sp)
    23b8:	|        ,----- bge.w 252a <CstPasteChar+0x28c>
    if(x + single->width < 0) {
    23bc:	|        |      movea.w 10(sp),a1
    23c0:	|        |      movea.l 84(sp),a0
    23c4:	|        |      move.l (a0),d0
    23c6:	|        |      add.l a1,d0
    23c8:	|        |  ,-- bpl.s 23dc <CstPasteChar+0x13e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    23ca:	|        |  |   pea 17f21 <PutChar+0x373>
    23d0:	|        |  |   jsr 1710c <KPrintF>
    23d6:	|        |  |   addq.l #4,sp
      return;
    23d8:	+--------|--|-- bra.w 29de <CstPasteChar+0x740>

    }
    
    extrawords = 1;
    23dc:	|        |  '-> move.w #1,78(sp)

    cutwordssource = (x*-1)/16; 
    23e2:	|        |      move.w 10(sp),d0
    23e6:	|        |  ,-- bpl.s 23ec <CstPasteChar+0x14e>
    23e8:	|        |  |   addi.w #15,d0
    23ec:	|        |  '-> asr.w #4,d0
    23ee:	|        |      neg.w d0
    23f0:	|        |      move.w d0,76(sp)
    cutmaskpixel = (x*-1)%16;     
    23f4:	|        |      move.w 10(sp),d0
    23f8:	|        |      ext.l d0
    23fa:	|        |      neg.l d0
    23fc:	|        |      andi.l #-2147483633,d0
    2402:	|        |  ,-- bpl.s 240c <CstPasteChar+0x16e>
    2404:	|        |  |   subq.l #1,d0
    2406:	|        |  |   moveq #-16,d1
    2408:	|        |  |   or.l d1,d0
    240a:	|        |  |   addq.l #1,d0
    240c:	|        |  '-> move.w d0,74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2410:	|        |      clr.w 72(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    2414:	|        |      movea.l 84(sp),a0
    2418:	|        |      move.l 24(a0),d0
    241c:	|        |      move.l d0,d1
    241e:	|        |      moveq #0,d0
    2420:	|        |      move.w 76(sp),d0
    2424:	|        |      add.l d0,d0
    2426:	|        |      move.l d1,d2
    2428:	|        |      add.l d0,d2
    242a:	|        |      movea.l 84(sp),a0
    242e:	|        |      move.l (a0),d0
    2430:	|        |      move.l 48(sp),-(sp)
    2434:	|        |      move.l d0,-(sp)
    2436:	|        |      jsr 17a98 <__mulsi3>
    243c:	|        |      addq.l #8,sp
    243e:	|        |      lsr.l #3,d0
    2440:	|        |      move.l d2,d1
    2442:	|        |      add.l d0,d1
    2444:	|        |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2448:	|        |      move.l 1c764 <winWidth>,d0
    244e:	|        |      move.l 52(sp),-(sp)
    2452:	|        |      move.l d0,-(sp)
    2454:	|        |      jsr 17a98 <__mulsi3>
    245a:	|        |      addq.l #8,sp
    245c:	|        |      lsr.l #3,d0
    245e:	|        |      move.l 28(sp),d1
    2462:	|        |      add.l d1,d0
    2464:	|        |      move.l d0,d2
    2466:	|        |      subq.l #2,d2
    2468:	|        |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    246c:	|        |      move.l 1c764 <winWidth>,d0
    2472:	|        |      move.l 52(sp),-(sp)
    2476:	|        |      move.l d0,-(sp)
    2478:	|        |      jsr 17a98 <__mulsi3>
    247e:	|        |      addq.l #8,sp
    2480:	|        |      lsr.l #3,d0
    2482:	|        |      move.l 28(sp),d1
    2486:	|        |      add.l d1,d0
    2488:	|        |      move.l d0,d1
    248a:	|        |      subq.l #2,d1
    248c:	|        |      move.l d1,60(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    2490:	|        |      moveq #0,d0
    2492:	|        |      move.w 74(sp),d0
    2496:	|        |      moveq #16,d1
    2498:	|        |      sub.l d0,d1
    249a:	|        |      move.l d1,d0
    249c:	|        |      moveq #12,d2
    249e:	|        |      lsl.l d2,d0
    24a0:	|        |      move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    24a4:	|        |      movea.l 84(sp),a0
    24a8:	|        |      move.l (a0),d0
    24aa:	|        |      movea.l d0,a0
    24ac:	|        |      cmpa.w #0,a0
    24b0:	|        |  ,-- bge.s 24b6 <CstPasteChar+0x218>
    24b2:	|        |  |   lea 15(a0),a0
    24b6:	|        |  '-> move.l a0,d0
    24b8:	|        |      asr.l #4,d0
    24ba:	|        |      move.l d0,d0
    24bc:	|        |      add.w 76(sp),d0
    24c0:	|        |      movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    24c6:	|        |      move.l a0,d1
    24c8:	|        |      addq.l #2,d1
    24ca:	|        |      move.l d1,1c748 <CstBackDropBufferApplyCursor>
    24d0:	|        |      add.w 78(sp),d0
    24d4:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    24d6:	|        |      movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    24dc:	|        |      move.l a0,d0
    24de:	|        |      addq.l #2,d0
    24e0:	|        |      move.l d0,1c748 <CstBackDropBufferApplyCursor>
    24e6:	|        |      move.l 44(sp),d0
    24ea:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    24ec:	|        |      movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    24f2:	|        |      move.l a0,d0
    24f4:	|        |      addq.l #2,d0
    24f6:	|        |      move.l d0,1c748 <CstBackDropBufferApplyCursor>
    24fc:	|        |      clr.w (a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    24fe:	|        |      movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    2504:	|        |      move.l a0,d0
    2506:	|        |      addq.l #2,d0
    2508:	|        |      move.l d0,1c748 <CstBackDropBufferApplyCursor>
    250e:	|        |      move.l 52(sp),d0
    2512:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2514:	|        |      movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    251a:	|        |      move.l a0,d0
    251c:	|        |      addq.l #2,d0
    251e:	|        |      move.l d0,1c748 <CstBackDropBufferApplyCursor>
    2524:	|        |      clr.w (a0)
    2526:	|     ,--|----- bra.w 283e <CstPasteChar+0x5a0>

  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    252a:	|     |  '----> movea.w 10(sp),a1
    252e:	|     |         movea.l 84(sp),a0
    2532:	|     |         move.l (a0),d0
    2534:	|     |         move.l a1,d1
    2536:	|     |         add.l d0,d1
    2538:	|     |         move.l 1c764 <winWidth>,d0
    253e:	|     |         cmp.l d1,d0
    2540:	|     |  ,----- bge.w 26dc <CstPasteChar+0x43e>

    if(x - single->width > (int) winWidth)
    2544:	|     |  |      movea.w 10(sp),a1
    2548:	|     |  |      movea.l 84(sp),a0
    254c:	|     |  |      move.l (a0),d0
    254e:	|     |  |      move.l a1,d1
    2550:	|     |  |      sub.l d0,d1
    2552:	|     |  |      move.l 1c764 <winWidth>,d0
    2558:	|     |  |      cmp.l d1,d0
    255a:	|     |  |  ,-- bge.s 256e <CstPasteChar+0x2d0>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    255c:	|     |  |  |   pea 17f21 <PutChar+0x373>
    2562:	|     |  |  |   jsr 1710c <KPrintF>
    2568:	|     |  |  |   addq.l #4,sp
      return;
    256a:	+-----|--|--|-- bra.w 29de <CstPasteChar+0x740>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    256e:	|     |  |  '-> clr.w 78(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    2572:	|     |  |      movea.w 10(sp),a1
    2576:	|     |  |      movea.l 84(sp),a0
    257a:	|     |  |      move.l (a0),d0
    257c:	|     |  |      add.l a1,d0
    257e:	|     |  |      move.l d0,d1
    2580:	|     |  |      move.l 1c764 <winWidth>,d0
    2586:	|     |  |      sub.l d0,d1
    2588:	|     |  |      move.l d1,d0
    258a:	|     |  |      lsr.l #4,d0
    258c:	|     |  |      move.w d0,76(sp)
    cutmaskpixel = 0;
    2590:	|     |  |      clr.w 74(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    2594:	|     |  |      move.w #-1,72(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    259a:	|     |  |      movea.l 84(sp),a0
    259e:	|     |  |      move.l 24(a0),d0
    25a2:	|     |  |      move.l d0,d2
    25a4:	|     |  |      movea.l 84(sp),a0
    25a8:	|     |  |      move.l (a0),d0
    25aa:	|     |  |      move.l 48(sp),-(sp)
    25ae:	|     |  |      move.l d0,-(sp)
    25b0:	|     |  |      jsr 17a98 <__mulsi3>
    25b6:	|     |  |      addq.l #8,sp
    25b8:	|     |  |      lsr.l #3,d0
    25ba:	|     |  |      move.l d2,d1
    25bc:	|     |  |      add.l d0,d1
    25be:	|     |  |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    25c2:	|     |  |      move.l 1c764 <winWidth>,d0
    25c8:	|     |  |      move.l 52(sp),-(sp)
    25cc:	|     |  |      move.l d0,-(sp)
    25ce:	|     |  |      jsr 17a98 <__mulsi3>
    25d4:	|     |  |      addq.l #8,sp
    25d6:	|     |  |      lsr.l #3,d0
    25d8:	|     |  |      move.l 28(sp),d1
    25dc:	|     |  |      add.l d0,d1
    25de:	|     |  |      move.w 10(sp),d0
    25e2:	|     |  |  ,-- bpl.s 25e8 <CstPasteChar+0x34a>
    25e4:	|     |  |  |   addi.w #15,d0
    25e8:	|     |  |  '-> asr.w #4,d0
    25ea:	|     |  |      movea.w d0,a0
    25ec:	|     |  |      move.l a0,d0
    25ee:	|     |  |      add.l a0,d0
    25f0:	|     |  |      move.l d1,d2
    25f2:	|     |  |      add.l d0,d2
    25f4:	|     |  |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    25f8:	|     |  |      move.l 1c764 <winWidth>,d0
    25fe:	|     |  |      move.l 52(sp),-(sp)
    2602:	|     |  |      move.l d0,-(sp)
    2604:	|     |  |      jsr 17a98 <__mulsi3>
    260a:	|     |  |      addq.l #8,sp
    260c:	|     |  |      lsr.l #3,d0
    260e:	|     |  |      move.l 28(sp),d1
    2612:	|     |  |      add.l d0,d1
    2614:	|     |  |      move.w 10(sp),d0
    2618:	|     |  |  ,-- bpl.s 261e <CstPasteChar+0x380>
    261a:	|     |  |  |   addi.w #15,d0
    261e:	|     |  |  '-> asr.w #4,d0
    2620:	|     |  |      movea.w d0,a0
    2622:	|     |  |      move.l a0,d0
    2624:	|     |  |      add.l a0,d0
    2626:	|     |  |      move.l d1,d2
    2628:	|     |  |      add.l d0,d2
    262a:	|     |  |      move.l d2,60(sp)
    bltcon0 = ((single->width%16) << 12);    
    262e:	|     |  |      movea.l 84(sp),a0
    2632:	|     |  |      move.l (a0),d0
    2634:	|     |  |      andi.l #-2147483633,d0
    263a:	|     |  |  ,-- bpl.s 2644 <CstPasteChar+0x3a6>
    263c:	|     |  |  |   subq.l #1,d0
    263e:	|     |  |  |   moveq #-16,d1
    2640:	|     |  |  |   or.l d1,d0
    2642:	|     |  |  |   addq.l #1,d0
    2644:	|     |  |  '-> moveq #12,d2
    2646:	|     |  |      lsl.l d2,d0
    2648:	|     |  |      move.l d0,56(sp)
    
    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    264c:	|     |  |      movea.l 84(sp),a0
    2650:	|     |  |      move.l (a0),d0
    2652:	|     |  |      movea.l d0,a0
    2654:	|     |  |      cmpa.w #0,a0
    2658:	|     |  |  ,-- bge.s 265e <CstPasteChar+0x3c0>
    265a:	|     |  |  |   lea 15(a0),a0
    265e:	|     |  |  '-> move.l a0,d0
    2660:	|     |  |      asr.l #4,d0
    2662:	|     |  |      move.l d0,d0
    2664:	|     |  |      movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    266a:	|     |  |      move.l a0,d1
    266c:	|     |  |      addq.l #2,d1
    266e:	|     |  |      move.l d1,1c748 <CstBackDropBufferApplyCursor>
    2674:	|     |  |      add.w 76(sp),d0
    2678:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    267a:	|     |  |      movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    2680:	|     |  |      move.l a0,d0
    2682:	|     |  |      addq.l #2,d0
    2684:	|     |  |      move.l d0,1c748 <CstBackDropBufferApplyCursor>
    268a:	|     |  |      move.l 44(sp),d0
    268e:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2690:	|     |  |      move.w 10(sp),d0
    2694:	|     |  |  ,-- bpl.s 269a <CstPasteChar+0x3fc>
    2696:	|     |  |  |   addi.w #15,d0
    269a:	|     |  |  '-> asr.w #4,d0
    269c:	|     |  |      movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    26a2:	|     |  |      move.l a0,d1
    26a4:	|     |  |      addq.l #2,d1
    26a6:	|     |  |      move.l d1,1c748 <CstBackDropBufferApplyCursor>
    26ac:	|     |  |      add.w d0,d0
    26ae:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    26b0:	|     |  |      movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    26b6:	|     |  |      move.l a0,d0
    26b8:	|     |  |      addq.l #2,d0
    26ba:	|     |  |      move.l d0,1c748 <CstBackDropBufferApplyCursor>
    26c0:	|     |  |      move.l 52(sp),d0
    26c4:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    26c6:	|     |  |      movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    26cc:	|     |  |      move.l a0,d0
    26ce:	|     |  |      addq.l #2,d0
    26d0:	|     |  |      move.l d0,1c748 <CstBackDropBufferApplyCursor>
    26d6:	|     |  |      clr.w (a0)
    26d8:	|     +--|----- bra.w 283e <CstPasteChar+0x5a0>
    
  } else { //Whole Sprite on Screen

    extrawords = 1;
    26dc:	|     |  '----> move.w #1,78(sp)
    cutwordssource = 0;
    26e2:	|     |         clr.w 76(sp)
    cutmaskpixel = 0;
    26e6:	|     |         clr.w 74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    26ea:	|     |         clr.w 72(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    26ee:	|     |         movea.l 84(sp),a0
    26f2:	|     |         move.l 24(a0),d0
    26f6:	|     |         move.l d0,d2
    26f8:	|     |         movea.l 84(sp),a0
    26fc:	|     |         move.l (a0),d0
    26fe:	|     |         movea.l d0,a0
    2700:	|     |         cmpa.w #0,a0
    2704:	|     |     ,-- bge.s 270a <CstPasteChar+0x46c>
    2706:	|     |     |   lea 15(a0),a0
    270a:	|     |     '-> move.l a0,d0
    270c:	|     |         asr.l #4,d0
    270e:	|     |         move.l 48(sp),-(sp)
    2712:	|     |         move.l d0,-(sp)
    2714:	|     |         jsr 17a98 <__mulsi3>
    271a:	|     |         addq.l #8,sp
    271c:	|     |         add.l d0,d0
    271e:	|     |         move.l d2,d1
    2720:	|     |         add.l d0,d1
    2722:	|     |         move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2726:	|     |         move.l 1c764 <winWidth>,d0
    272c:	|     |         move.l 52(sp),-(sp)
    2730:	|     |         move.l d0,-(sp)
    2732:	|     |         jsr 17a98 <__mulsi3>
    2738:	|     |         addq.l #8,sp
    273a:	|     |         lsr.l #3,d0
    273c:	|     |         move.l 28(sp),d1
    2740:	|     |         add.l d0,d1
    2742:	|     |         move.w 10(sp),d0
    2746:	|     |     ,-- bpl.s 274c <CstPasteChar+0x4ae>
    2748:	|     |     |   addi.w #15,d0
    274c:	|     |     '-> asr.w #4,d0
    274e:	|     |         movea.w d0,a0
    2750:	|     |         move.l a0,d0
    2752:	|     |         add.l a0,d0
    2754:	|     |         move.l d1,d2
    2756:	|     |         add.l d0,d2
    2758:	|     |         move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    275c:	|     |         move.l 1c764 <winWidth>,d0
    2762:	|     |         move.l 52(sp),-(sp)
    2766:	|     |         move.l d0,-(sp)
    2768:	|     |         jsr 17a98 <__mulsi3>
    276e:	|     |         addq.l #8,sp
    2770:	|     |         lsr.l #3,d0
    2772:	|     |         move.l 28(sp),d1
    2776:	|     |         add.l d0,d1
    2778:	|     |         move.w 10(sp),d0
    277c:	|     |     ,-- bpl.s 2782 <CstPasteChar+0x4e4>
    277e:	|     |     |   addi.w #15,d0
    2782:	|     |     '-> asr.w #4,d0
    2784:	|     |         movea.w d0,a0
    2786:	|     |         move.l a0,d0
    2788:	|     |         add.l a0,d0
    278a:	|     |         move.l d1,d2
    278c:	|     |         add.l d0,d2
    278e:	|     |         move.l d2,60(sp)
    bltcon0 = ((x%16) << 12);
    2792:	|     |         move.w 10(sp),d0
    2796:	|     |         andi.w #-32753,d0
    279a:	|     |     ,-- bpl.s 27a4 <CstPasteChar+0x506>
    279c:	|     |     |   subq.w #1,d0
    279e:	|     |     |   ori.w #-16,d0
    27a2:	|     |     |   addq.w #1,d0
    27a4:	|     |     '-> ext.l d0
    27a6:	|     |         moveq #12,d1
    27a8:	|     |         lsl.l d1,d0
    27aa:	|     |         move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    27ae:	|     |         movea.l 84(sp),a0
    27b2:	|     |         move.l (a0),d0
    27b4:	|     |         movea.l d0,a0
    27b6:	|     |         cmpa.w #0,a0
    27ba:	|     |     ,-- bge.s 27c0 <CstPasteChar+0x522>
    27bc:	|     |     |   lea 15(a0),a0
    27c0:	|     |     '-> move.l a0,d0
    27c2:	|     |         asr.l #4,d0
    27c4:	|     |         move.l d0,d0
    27c6:	|     |         add.w 76(sp),d0
    27ca:	|     |         movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    27d0:	|     |         move.l a0,d1
    27d2:	|     |         addq.l #2,d1
    27d4:	|     |         move.l d1,1c748 <CstBackDropBufferApplyCursor>
    27da:	|     |         add.w 78(sp),d0
    27de:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    27e0:	|     |         movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    27e6:	|     |         move.l a0,d0
    27e8:	|     |         addq.l #2,d0
    27ea:	|     |         move.l d0,1c748 <CstBackDropBufferApplyCursor>
    27f0:	|     |         move.l 44(sp),d0
    27f4:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    27f6:	|     |         move.w 10(sp),d0
    27fa:	|     |     ,-- bpl.s 2800 <CstPasteChar+0x562>
    27fc:	|     |     |   addi.w #15,d0
    2800:	|     |     '-> asr.w #4,d0
    2802:	|     |         movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    2808:	|     |         move.l a0,d1
    280a:	|     |         addq.l #2,d1
    280c:	|     |         move.l d1,1c748 <CstBackDropBufferApplyCursor>
    2812:	|     |         add.w d0,d0
    2814:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    2816:	|     |         movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    281c:	|     |         move.l a0,d0
    281e:	|     |         addq.l #2,d0
    2820:	|     |         move.l d0,1c748 <CstBackDropBufferApplyCursor>
    2826:	|     |         move.l 52(sp),d0
    282a:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    282c:	|     |         movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    2832:	|     |         move.l a0,d0
    2834:	|     |         addq.l #2,d0
    2836:	|     |         move.l d0,1c748 <CstBackDropBufferApplyCursor>
    283c:	|     |         clr.w (a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    283e:	|     '-------> moveq #0,d0
    2840:	|               move.w 74(sp),d0
    2844:	|               moveq #0,d1
    2846:	|               not.w d1
    2848:	|               asr.l d0,d1
    284a:	|               move.w d1,26(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    284e:	|               moveq #0,d1
    2850:	|               move.w 76(sp),d1
    2854:	|               moveq #0,d0
    2856:	|               move.w 78(sp),d0
    285a:	|               sub.l d0,d1
    285c:	|               move.l d1,d0
    285e:	|               add.w d0,d0
    2860:	|               move.w d0,24(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2864:	|               move.l 1c764 <winWidth>,d0
    286a:	|               lsr.l #3,d0
    286c:	|               move.l d0,d2
    286e:	|               move.w 76(sp),d1
    2872:	|               sub.w 78(sp),d1
    2876:	|               move.l 40(sp),d0
    287a:	|               sub.w d0,d1
    287c:	|               move.w d1,d0
    287e:	|               add.w d1,d0
    2880:	|               add.w d2,d0
    2882:	|               move.w d0,22(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2886:	|               move.l 1c764 <winWidth>,d0
    288c:	|               lsr.l #3,d0
    288e:	|               move.l d0,d2
    2890:	|               move.w 76(sp),d1
    2894:	|               sub.w 78(sp),d1
    2898:	|               move.l 40(sp),d0
    289c:	|               sub.w d0,d1
    289e:	|               move.w d1,d0
    28a0:	|               add.w d1,d0
    28a2:	|               add.w d2,d0
    28a4:	|               move.w d0,20(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    28a8:	|               move.l #14675968,16(sp)
  WaitBlit();
    28b0:	|               move.l 1c81c <GfxBase>,d0
    28b6:	|               movea.l d0,a6
    28b8:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    28bc:	|               movea.l 16(sp),a0
    28c0:	|               move.w 26(sp),68(a0)
  custom->bltalwm = bltalwm;
    28c6:	|               movea.l 16(sp),a0
    28ca:	|               move.w 72(sp),70(a0)
  custom->bltamod = bltamod;
    28d0:	|               move.w 24(sp),d0
    28d4:	|               movea.l 16(sp),a0
    28d8:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    28dc:	|               move.w 22(sp),d0
    28e0:	|               movea.l 16(sp),a0
    28e4:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    28e8:	|               move.w 20(sp),d0
    28ec:	|               movea.l 16(sp),a0
    28f0:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    28f4:	|               move.l 1c764 <winWidth>,d0
    28fa:	|               lsr.l #3,d0
    28fc:	|               move.l d0,d1
    28fe:	|               move.l 1c768 <winHeight>,d0
    2904:	|               move.l d0,d0
    2906:	|               move.w d1,d2
    2908:	|               muls.w d0,d2
    290a:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    290e:	|               move.w 1c71e <textPaletteIndex>,38(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    2916:	|               move.w 38(sp),d0
    291a:	|               andi.w #1,d0
    291e:	|               move.w d0,12(sp)
  if(tmp2) {
    2922:	|        ,----- beq.s 292c <CstPasteChar+0x68e>
    minterm = 0xbfa;
    2924:	|        |      move.w #3066,36(sp)
    292a:	|        |  ,-- bra.s 2932 <CstPasteChar+0x694>
  } else {
    minterm = 0xb0a;
    292c:	|        '--|-> move.w #2826,36(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2932:	|           '-> clr.l 32(sp)
    2936:	|     ,-------- bra.w 29d4 <CstPasteChar+0x736>
  {

    custom->bltcon0 = bltcon0 + minterm;
    293a:	|  ,--|-------> move.l 56(sp),d0
    293e:	|  |  |         add.w 36(sp),d0
    2942:	|  |  |         movea.l 16(sp),a0
    2946:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    294a:	|  |  |         move.l 68(sp),d0
    294e:	|  |  |         movea.l 16(sp),a0
    2952:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    2956:	|  |  |         move.l 64(sp),d0
    295a:	|  |  |         movea.l 16(sp),a0
    295e:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    2962:	|  |  |         move.l 60(sp),d0
    2966:	|  |  |         movea.l 16(sp),a0
    296a:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    296e:	|  |  |         move.l 44(sp),d0
    2972:	|  |  |         lsl.w #6,d0
    2974:	|  |  |         move.l 40(sp),d1
    2978:	|  |  |         add.w d1,d0
    297a:	|  |  |         sub.w 76(sp),d0
    297e:	|  |  |         add.w 78(sp),d0
    2982:	|  |  |         movea.l 16(sp),a0
    2986:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    298a:	|  |  |         moveq #0,d0
    298c:	|  |  |         move.w 14(sp),d0
    2990:	|  |  |         add.l d0,64(sp)
    bltdpt += bltcptplus;
    2994:	|  |  |         moveq #0,d0
    2996:	|  |  |         move.w 14(sp),d0
    299a:	|  |  |         add.l d0,60(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    299e:	|  |  |         move.w 38(sp),d0
    29a2:	|  |  |         lsr.w #1,d0
    29a4:	|  |  |         move.w d0,38(sp)
    tmp2 = tmp & 0x01;
    29a8:	|  |  |         move.w 38(sp),d1
    29ac:	|  |  |         andi.w #1,d1
    29b0:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    29b4:	|  |  |  ,----- beq.s 29be <CstPasteChar+0x720>
      minterm = 0xbfa;
    29b6:	|  |  |  |      move.w #3066,36(sp)
    29bc:	|  |  |  |  ,-- bra.s 29c4 <CstPasteChar+0x726>
    } else {
      minterm = 0xb0a;
    29be:	|  |  |  '--|-> move.w #2826,36(sp)
    }   

    WaitBlit();    
    29c4:	|  |  |     '-> move.l 1c81c <GfxBase>,d0
    29ca:	|  |  |         movea.l d0,a6
    29cc:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    29d0:	|  |  |         addq.l #1,32(sp)
    29d4:	|  |  '-------> moveq #4,d2
    29d6:	|  |            cmp.l 32(sp),d2
    29da:	|  '----------- bge.w 293a <CstPasteChar+0x69c>
 
  }   
}
    29de:	'-------------> move.l (sp)+,d2
    29e0:	                movea.l (sp)+,a6
    29e2:	                lea 72(sp),sp
    29e6:	                rts

000029e8 <CstRestoreScreen>:


void CstRestoreScreen()
{
    29e8:	                   lea -24(sp),sp
    29ec:	                   move.l a6,-(sp)
    29ee:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    29f0:	                   move.l #14675968,16(sp)

  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    29f8:	                   move.l 1c740 <CstCleanupQueueDrawBuffer>,d0
    29fe:	,----------------- beq.w 2c06 <CstRestoreScreen+0x21e>
    2a02:	|                  move.l 1c738 <CstDrawBuffer>,d0
    2a08:	+----------------- beq.w 2c06 <CstRestoreScreen+0x21e>
    return;
  } 

  WaitBlit();
    2a0c:	|                  move.l 1c81c <GfxBase>,d0
    2a12:	|                  movea.l d0,a6
    2a14:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    2a18:	|                  movea.l 16(sp),a0
    2a1c:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    2a22:	|                  movea.l 16(sp),a0
    2a26:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    2a2c:	|                  movea.l 16(sp),a0
    2a30:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    2a36:	|     ,----------- bra.w 2bfa <CstRestoreScreen+0x212>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3)
    2a3a:	|  ,--|----------> movea.l 1c740 <CstCleanupQueueDrawBuffer>,a0
    2a40:	|  |  |            move.l 4(a0),d0
    2a44:	|  |  |  ,-------- beq.w 2bc8 <CstRestoreScreen+0x1e0>
    2a48:	|  |  |  |         movea.l 1c740 <CstCleanupQueueDrawBuffer>,a0
    2a4e:	|  |  |  |         movea.l 4(a0),a0
    2a52:	|  |  |  |         move.l 16(a0),d0
    2a56:	|  |  |  |         moveq #2,d1
    2a58:	|  |  |  |         cmp.l d0,d1
    2a5a:	|  |  |  +-------- blt.w 2bc8 <CstRestoreScreen+0x1e0>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2a5e:	|  |  |  |         move.l 1c764 <winWidth>,d0
    2a64:	|  |  |  |         lsr.l #3,d0
    2a66:	|  |  |  |         move.l d0,d1
    2a68:	|  |  |  |         movea.l 1c740 <CstCleanupQueueDrawBuffer>,a0
    2a6e:	|  |  |  |         move.w 8(a0),d0
    2a72:	|  |  |  |         add.w d0,d0
    2a74:	|  |  |  |         sub.w d0,d1
    2a76:	|  |  |  |         movea.l 16(sp),a0
    2a7a:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2a7e:	|  |  |  |         move.l 1c764 <winWidth>,d0
    2a84:	|  |  |  |         lsr.l #3,d0
    2a86:	|  |  |  |         move.l d0,d1
    2a88:	|  |  |  |         movea.l 1c740 <CstCleanupQueueDrawBuffer>,a0
    2a8e:	|  |  |  |         move.w 8(a0),d0
    2a92:	|  |  |  |         add.w d0,d0
    2a94:	|  |  |  |         sub.w d0,d1
    2a96:	|  |  |  |         movea.l 16(sp),a0
    2a9a:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2a9e:	|  |  |  |         movea.l 1c740 <CstCleanupQueueDrawBuffer>,a0
    2aa4:	|  |  |  |         move.w 14(a0),d0
    2aa8:	|  |  |  |         move.w d0,d0
    2aaa:	|  |  |  |         andi.l #65535,d0
    2ab0:	|  |  |  |         move.l 1c764 <winWidth>,d1
    2ab6:	|  |  |  |         move.l d1,-(sp)
    2ab8:	|  |  |  |         move.l d0,-(sp)
    2aba:	|  |  |  |         jsr 17a98 <__mulsi3>
    2ac0:	|  |  |  |         addq.l #8,sp
    2ac2:	|  |  |  |         move.l d0,d1
    2ac4:	|  |  |  |         lsr.l #3,d1
    2ac6:	|  |  |  |         move.l 1c726 <CstBackDrop>,d0
    2acc:	|  |  |  |         add.l d0,d1
    2ace:	|  |  |  |         movea.l 1c740 <CstCleanupQueueDrawBuffer>,a0
    2ad4:	|  |  |  |         move.w 12(a0),d0
    2ad8:	|  |  |  |         move.w d0,d0
    2ada:	|  |  |  |         andi.l #65535,d0
    2ae0:	|  |  |  |         move.l d1,d2
    2ae2:	|  |  |  |         add.l d0,d2
    2ae4:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2ae8:	|  |  |  |         movea.l 1c740 <CstCleanupQueueDrawBuffer>,a0
    2aee:	|  |  |  |         move.w 14(a0),d0
    2af2:	|  |  |  |         move.w d0,d0
    2af4:	|  |  |  |         andi.l #65535,d0
    2afa:	|  |  |  |         move.l 1c764 <winWidth>,d1
    2b00:	|  |  |  |         move.l d1,-(sp)
    2b02:	|  |  |  |         move.l d0,-(sp)
    2b04:	|  |  |  |         jsr 17a98 <__mulsi3>
    2b0a:	|  |  |  |         addq.l #8,sp
    2b0c:	|  |  |  |         move.l d0,d1
    2b0e:	|  |  |  |         lsr.l #3,d1
    2b10:	|  |  |  |         move.l 1c738 <CstDrawBuffer>,d0
    2b16:	|  |  |  |         add.l d0,d1
    2b18:	|  |  |  |         movea.l 1c740 <CstCleanupQueueDrawBuffer>,a0
    2b1e:	|  |  |  |         move.w 12(a0),d0
    2b22:	|  |  |  |         move.w d0,d0
    2b24:	|  |  |  |         andi.l #65535,d0
    2b2a:	|  |  |  |         move.l d1,d2
    2b2c:	|  |  |  |         add.l d0,d2
    2b2e:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2b32:	|  |  |  |         clr.l 20(sp)
    2b36:	|  |  |  |     ,-- bra.w 2bbe <CstRestoreScreen+0x1d6>
      {
        custom->bltapt = (APTR) bltapt;
    2b3a:	|  |  |  |  ,--|-> move.l 28(sp),d0
    2b3e:	|  |  |  |  |  |   movea.l 16(sp),a0
    2b42:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    2b46:	|  |  |  |  |  |   move.l 24(sp),d0
    2b4a:	|  |  |  |  |  |   movea.l 16(sp),a0
    2b4e:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    2b52:	|  |  |  |  |  |   movea.l 1c740 <CstCleanupQueueDrawBuffer>,a0
    2b58:	|  |  |  |  |  |   move.w 10(a0),d0
    2b5c:	|  |  |  |  |  |   lsl.w #6,d0
    2b5e:	|  |  |  |  |  |   movea.l 1c740 <CstCleanupQueueDrawBuffer>,a0
    2b64:	|  |  |  |  |  |   move.w 8(a0),d1
    2b68:	|  |  |  |  |  |   add.w d1,d0
    2b6a:	|  |  |  |  |  |   movea.l 16(sp),a0
    2b6e:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    2b72:	|  |  |  |  |  |   move.l 1c764 <winWidth>,d0
    2b78:	|  |  |  |  |  |   lsr.l #3,d0
    2b7a:	|  |  |  |  |  |   move.l 1c768 <winHeight>,d1
    2b80:	|  |  |  |  |  |   move.l d1,-(sp)
    2b82:	|  |  |  |  |  |   move.l d0,-(sp)
    2b84:	|  |  |  |  |  |   jsr 17a98 <__mulsi3>
    2b8a:	|  |  |  |  |  |   addq.l #8,sp
    2b8c:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    2b90:	|  |  |  |  |  |   move.l 1c764 <winWidth>,d0
    2b96:	|  |  |  |  |  |   lsr.l #3,d0
    2b98:	|  |  |  |  |  |   move.l 1c768 <winHeight>,d1
    2b9e:	|  |  |  |  |  |   move.l d1,-(sp)
    2ba0:	|  |  |  |  |  |   move.l d0,-(sp)
    2ba2:	|  |  |  |  |  |   jsr 17a98 <__mulsi3>
    2ba8:	|  |  |  |  |  |   addq.l #8,sp
    2baa:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    2bae:	|  |  |  |  |  |   move.l 1c81c <GfxBase>,d0
    2bb4:	|  |  |  |  |  |   movea.l d0,a6
    2bb6:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2bba:	|  |  |  |  |  |   addq.l #1,20(sp)
    2bbe:	|  |  |  |  |  '-> moveq #4,d0
    2bc0:	|  |  |  |  |      cmp.l 20(sp),d0
    2bc4:	|  |  |  |  '----- bge.w 2b3a <CstRestoreScreen+0x152>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    2bc8:	|  |  |  '-------> move.l 1c740 <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    2bd0:	|  |  |            movea.l 1c740 <CstCleanupQueueDrawBuffer>,a0
    2bd6:	|  |  |            move.l 16(a0),d0
    2bda:	|  |  |            move.l d0,1c740 <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    2be0:	|  |  |            move.l 12(sp),8(sp)
    2be6:	|  |  |            move.l 1c810 <SysBase>,d0
    2bec:	|  |  |            movea.l d0,a6
    2bee:	|  |  |            movea.l 8(sp),a1
    2bf2:	|  |  |            jsr -690(a6)
    todelete = NULL;
    2bf6:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    2bfa:	|  |  '----------> move.l 1c740 <CstCleanupQueueDrawBuffer>,d0
    2c00:	|  '-------------- bne.w 2a3a <CstRestoreScreen+0x52>
    2c04:	|              ,-- bra.s 2c08 <CstRestoreScreen+0x220>
    return;
    2c06:	'--------------|-> nop
  }
  
}
    2c08:	               '-> move.l (sp)+,d2
    2c0a:	                   movea.l (sp)+,a6
    2c0c:	                   lea 24(sp),sp
    2c10:	                   rts

00002c12 <CstScaleSprite>:

__attribute__((optimize("Ofast"))) 
void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    2c12:	                                                                               lea -44(sp),sp
    2c16:	                                                                               movem.l d2-d7/a2-a6,-(sp)
    2c1a:	                                                                               movea.l 92(sp),a2
    2c1e:	                                                                               move.l 96(sp),80(sp)
    2c24:	                                                                               move.l 100(sp),d4
    2c28:	                                                                               move.l 104(sp),56(sp)
    2c2e:	                                                                               move.l 108(sp),d2
    2c32:	                                                                               move.w d4,d3
    2c34:	                                                                               move.w 58(sp),d6
    2c38:	                                                                               movea.w d2,a6
  if( single->width == 320)
  {
    single->width = 320;
  }

  UBYTE *mask = CstDrawZBuffer( single, zBuffer, x, y);
    2c3a:	                                                                               movea.w d6,a5
    2c3c:	                                                                               movea.w d4,a4
    2c3e:	                                                                               move.l a5,-(sp)
    2c40:	                                                                               move.l a4,-(sp)
    2c42:	                                                                               move.l 1c86c <zBuffer>,-(sp)
    2c48:	                                                                               move.l a2,-(sp)
    2c4a:	                                                                               jsr 1516 <CstDrawZBuffer>
    2c50:	                                                                               move.l d0,d5

  UWORD *destination = 0;
  switch(destinationtype)
    2c52:	                                                                               lea 16(sp),sp
    2c56:	                                                                               moveq #1,d0
    2c58:	                                                                               cmp.w d2,d0
    2c5a:	                                                ,----------------------------- beq.w 306c <CstScaleSprite+0x45a>
    2c5e:	                                                |                              moveq #2,d1
    2c60:	                                                |                              cmp.w d2,d1
    2c62:	                                                |                       ,----- beq.w 2f26 <CstScaleSprite+0x314>
    2c66:	                                                |                       |      suba.l a3,a3
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    if(y + single->height < 0) {
    2c68:	                                                |  ,--------------------|----> move.l 4(a2),d1
    2c6c:	                                                |  |                    |      move.l a5,d0
    2c6e:	                                                |  |                    |      add.l d1,d0
  if( y < 0) {
    2c70:	                                                |  |                    |      tst.w d6
    2c72:	                                                |  |           ,--------|----- blt.w 2f42 <CstScaleSprite+0x330>
      return;
    }
    ystartdst = 0;
    ystartsrc = y*-1;
    blitheight = single->height+y;
  } else if(y+single->height > (int) winHeight) {
    2c76:	                                                |  |           |  ,-----|----> movea.l 1c768 <winHeight>,a0
    2c7c:	                                                |  |           |  |     |      cmp.l a0,d0
    2c7e:	                                                |  |  ,--------|--|-----|----- ble.w 3076 <CstScaleSprite+0x464>
    if(y  > (int) winHeight) {
    2c82:	                                                |  |  |        |  |     |      cmpa.l a5,a0
    2c84:	                     ,--------------------------|--|--|--------|--|-----|----- blt.w 3138 <CstScaleSprite+0x526>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    ystartdst = y;
    2c88:	                     |                          |  |  |        |  |     |      move.l a5,44(sp)
    ystartsrc = 0;
    blitheight = winHeight-y;
    2c8c:	                     |                          |  |  |        |  |     |      suba.l a5,a0
    2c8e:	                     |                          |  |  |        |  |     |      move.l a0,66(sp)
    ystartsrc = 0;
    2c92:	                     |                          |  |  |        |  |     |      suba.l a1,a1


  if( x < 0) 
  { //Leftmost part outside screen

    if(x + single->width < 0) {
    2c94:	                     |                          |  |  |  ,-----|--|-----|----> move.l (a2),d1
    2c96:	                     |                          |  |  |  |     |  |     |      move.l a4,d0
    2c98:	                     |                          |  |  |  |     |  |     |      add.l d1,d0
  if( x < 0) 
    2c9a:	                     |                          |  |  |  |     |  |     |      tst.w d3
    2c9c:	                     |                          |  |  |  |     |  |  ,--|----- blt.w 2f62 <CstScaleSprite+0x350>
      *CstBackDropBufferApplyCursor++ = blitheight;
      *CstBackDropBufferApplyCursor++ = 0;
      *CstBackDropBufferApplyCursor++ = ystartdst;
      *CstBackDropBufferApplyCursor++ = 0;
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    2ca0:	                     |                          |  |  |  |     |  |  |  |  ,-> move.l 1c764 <winWidth>,d3
    2ca6:	                     |                          |  |  |  |     |  |  |  |  |   cmp.l d3,d0
    2ca8:	                     |                          |  |  |  |  ,--|--|--|--|--|-- ble.w 3084 <CstScaleSprite+0x472>

    if(x - single->width > (int) winWidth)
    2cac:	                     |                          |  |  |  |  |  |  |  |  |  |   suba.l d1,a4
    2cae:	                     |                          |  |  |  |  |  |  |  |  |  |   cmpa.l d3,a4
    2cb0:	                     +--------------------------|--|--|--|--|--|--|--|--|--|-- bgt.w 3138 <CstScaleSprite+0x526>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    cutwordssource = (x+single->width - winWidth)/16;
    2cb4:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d0,d2
    2cb6:	                     |                          |  |  |  |  |  |  |  |  |  |   sub.l d3,d2
    2cb8:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #4,d2
    2cba:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d2,d6
    cutmaskpixel = 0;    
    bltapt = ((ULONG) mask)+ystartsrc*single->width/8;
    2cbc:	                     |                          |  |  |  |  |  |  |  |  |  |   lea 17a98 <__mulsi3>,a4
    2cc2:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l a1,-(sp)
    2cc4:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d1,-(sp)
    2cc6:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d1,56(sp)
    2cca:	                     |                          |  |  |  |  |  |  |  |  |  |   jsr (a4)
    2ccc:	                     |                          |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    2cce:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    2cd0:	                     |                          |  |  |  |  |  |  |  |  |  |   add.l d0,d5
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    2cd2:	                     |                          |  |  |  |  |  |  |  |  |  |   add.l 24(a2),d0
    2cd6:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d0,62(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2cda:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l 44(sp),-(sp)
    2cde:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d3,-(sp)
    2ce0:	                     |                          |  |  |  |  |  |  |  |  |  |   jsr (a4)
    2ce2:	                     |                          |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    2ce4:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    2ce6:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d4,d7
    2ce8:	                     |                          |  |  |  |  |  |  |  |  |  |   asr.w #4,d7
    2cea:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d7,a0
    2cec:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d7,a1
    2cee:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.l a1,a1
    2cf0:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.l a1,a3
    2cf2:	                     |                          |  |  |  |  |  |  |  |  |  |   lea (0,a3,d0.l),a5
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    bltcon0 = 0xfca + ((x%16) << 12);
    2cf6:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #15,d0
    2cf8:	                     |                          |  |  |  |  |  |  |  |  |  |   and.l d4,d0
    bltcon1 = ((x%16) << 12);
    bltalwm = 0xffff << (x%16); 
    2cfa:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.l #65535,a4
    2d00:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l a4,d7
    2d02:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.l d0,d7
    2d04:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.l d7,a4
      CstCleanupQueueDrawBuffer->height = blitheight;
    2d06:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->x = x;
      CstCleanupQueueDrawBuffer->y = y;
      CstCleanupQueueDrawBuffer->person = person; 
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    2d0c:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.w a0,a0
    2d0e:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w a0,66(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2d12:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w 46(sp),44(sp)
      *CstBackDropBufferApplyCursor++ = 0;
    }
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2d18:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d2,a3
    2d1a:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.w d2,a3
    bltcon0 = 0xfca + ((x%16) << 12);
    2d1c:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #12,d7
    2d1e:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.l d7,d0
  custom->bltalwm = bltalwm;
  custom->bltamod = bltamod;
  custom->bltbmod = bltbmod;
  custom->bltcmod = bltcmod;
  custom->bltdmod = bltdmod;
  custom->bltcon0 = bltcon0;
    2d20:	                     |                          |  |  |  |  |  |  |  |  |  |   addi.w #4042,d0
    2d24:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d0,70(sp)
  custom->bltcon1 = bltcon1;  
    2d28:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d4,d7
    2d2a:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #12,d0
    2d2c:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.w d0,d7
    2d2e:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d7,72(sp)
    if( destinationtype == SCREEN)
    2d32:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l 48(sp),d1
    2d36:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #1,d7
    2d38:	                     |                          |  |  |  |  |  |  |  |  |  |   cmp.w a6,d7
    2d3a:	            ,--------|--------------------------|--|--|--|--|--|--|--|--|--|-- beq.w 344c <CstScaleSprite+0x83a>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    2d3e:	            |        |                          |  |  |  |  |  |  |  |  |  |   movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    2d44:	            |        |                          |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    2d46:	   ,--------|--------|--------------------------|--|--|--|--|--|--|--|--|--|-- bmi.w 34f4 <CstScaleSprite+0x8e2>
    2d4a:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    2d4c:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   add.w d0,d2
    2d4e:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w d2,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    2d50:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2d56:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 66(sp),4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2d5c:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 44(sp),6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2d62:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   lea 10(a0),a1
    2d66:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.l a1,1c748 <CstBackDropBufferApplyCursor>
    2d6c:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   clr.w 8(a0)
    2d70:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2d76:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    2d78:	,--|--------|--------|--------------------------|--|--|--|--|--|--|--|--|--|-> lsr.l #3,d3
    2d7a:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w a3,d4
    2d7c:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   add.w d3,d4
    2d7e:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   tst.l d1
    2d80:	|  |  ,-----|--------|--------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 3342 <CstScaleSprite+0x730>
    2d84:	|  |  |  ,--|--------|--------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #3,d1
    2d86:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   sub.w d1,d4
  WaitBlit();
    2d88:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l #116764,d3
    2d8e:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2d90:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2d92:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  custom->bltafwm = bltafwm;
    2d96:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 76(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb3e08>
  custom->bltalwm = bltalwm;
    2d9e:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w a4,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3e0a>
  custom->bltamod = bltamod;
    2da4:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w a3,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e28>
  custom->bltbmod = bltbmod;
    2daa:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w a3,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3e26>
  custom->bltcmod = bltcmod;
    2db0:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d4,dff060 <gcc8_c_support.c.c60c1f2b+0xdb3e24>
  custom->bltdmod = bltdmod;
    2db6:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d4,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e2a>
  custom->bltcon0 = bltcon0;
    2dbc:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 70(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb3e04>
  custom->bltcon1 = bltcon1;  
    2dc4:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 72(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb3e06>

  UWORD bltbptplus = (single->width >> 3)*single->height;
    2dcc:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
  {
    custom->bltapt = (APTR) bltapt;
    custom->bltbpt = (APTR) bltbpt;
    custom->bltcpt = (APTR) bltcpt;
    custom->bltdpt = (APTR) bltdpt;
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2dce:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 60(sp),d7
    2dd2:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   lsl.w #6,d7
  UWORD bltbptplus = (single->width >> 3)*single->height;
    2dd4:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l d0,d1
    2dd6:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   asr.l #3,d1
    2dd8:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   muls.w 6(a2),d1
    bltbpt += bltbptplus;
    2ddc:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   andi.l #65535,d1
    2de2:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   movea.l d1,a3
  UWORD bltcptplus = winWidth/8*winHeight;
    2de4:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 1c764 <winWidth>,d4
    2dea:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d4
    2dec:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   muls.w 1c76a <winHeight+0x2>,d4
    bltcpt += bltcptplus;
    2df2:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   andi.l #65535,d4
    custom->bltapt = (APTR) bltapt;
    2df8:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e14>
    custom->bltbpt = (APTR) bltbpt;
    2dfe:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 62(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e10>
    custom->bltcpt = (APTR) bltcpt;
    2e06:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3e0c>
    custom->bltdpt = (APTR) bltdpt;
    2e0c:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e18>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e12:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   tst.l d0
    2e14:	|  |  |  |  |  ,-----|--------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 3240 <CstScaleSprite+0x62e>
    2e18:	|  |  |  |  |  |  ,--|--------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2e1a:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2e1c:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    2e1e:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    2e20:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e1c>
    bltbpt += bltbptplus;
    2e26:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a4
    2e2a:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   adda.l a3,a4
    bltcpt += bltcptplus;
    2e2c:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    bltdpt += bltcptplus;
    WaitBlit();
    2e2e:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2e30:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2e32:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e36:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2e38:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e14>
    custom->bltbpt = (APTR) bltbpt;
    2e3e:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e10>
    custom->bltcpt = (APTR) bltcpt;
    2e44:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3e0c>
    custom->bltdpt = (APTR) bltdpt;
    2e4a:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e18>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e50:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   tst.l d0
    2e52:	|  |  |  |  |  |  |  |                 ,--------|--|--|--|--|--|--|--|--|--|-- blt.w 3282 <CstScaleSprite+0x670>
    2e56:	|  |  |  |  |  |  |  |                 |     ,--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2e58:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2e5a:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    2e5c:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    2e5e:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e1c>
    bltbpt += bltbptplus;
    2e64:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   adda.l a3,a4
    bltcpt += bltcptplus;
    2e66:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    WaitBlit();
    2e68:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2e6a:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2e6c:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e70:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2e72:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e14>
    custom->bltbpt = (APTR) bltbpt;
    2e78:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e10>
    custom->bltcpt = (APTR) bltcpt;
    2e7e:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3e0c>
    custom->bltdpt = (APTR) bltdpt;
    2e84:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e18>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e8a:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    2e8c:	|  |  |  |  |  |  |  |           ,-----|-----|--|--|--|--|--|--|--|--|--|--|-- blt.w 32c0 <CstScaleSprite+0x6ae>
    2e90:	|  |  |  |  |  |  |  |           |     |  ,--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2e92:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2e94:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    2e96:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    2e98:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e1c>
    bltbpt += bltbptplus;
    2e9e:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   adda.l a3,a4
    bltcpt += bltcptplus;
    2ea0:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    WaitBlit();
    2ea2:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2ea4:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2ea6:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2eaa:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2eac:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e14>
    custom->bltbpt = (APTR) bltbpt;
    2eb2:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e10>
    custom->bltcpt = (APTR) bltcpt;
    2eb8:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3e0c>
    custom->bltdpt = (APTR) bltdpt;
    2ebe:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e18>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2ec4:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    2ec6:	|  |  |  |  |  |  |  |     ,-----|-----|--|--|--|--|--|--|--|--|--|--|--|--|-- blt.w 32fe <CstScaleSprite+0x6ec>
    2eca:	|  |  |  |  |  |  |  |     |     |  ,--|--|--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2ecc:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2ece:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    2ed0:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    2ed2:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e1c>
    bltbpt += bltbptplus;
    2ed8:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lea (0,a4,a3.l),a3
    bltcpt += bltcptplus;
    2edc:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.l a5,d4
    WaitBlit();
    2ede:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2ee0:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2ee2:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2ee6:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2ee8:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e14>
    custom->bltbpt = (APTR) bltbpt;
    2eee:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a3,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e10>
    custom->bltcpt = (APTR) bltcpt;
    2ef4:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d4,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3e0c>
    custom->bltdpt = (APTR) bltdpt;
    2efa:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d4,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e18>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2f00:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    2f02:	|  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- blt.w 321c <CstScaleSprite+0x60a>
    2f06:	|  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2f08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d2
    2f0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d7,d2
    2f0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d2
    2f0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e1c>
    WaitBlit();
    2f14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2f16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2f18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  }   

}
    2f1c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    2f20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lea 44(sp),sp
    2f24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   rts
      CstApplyBackDropCounter = 2;
    2f26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-> move.w #2,1c732 <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    2f2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   movea.l 1c726 <CstBackDrop>,a3
    if(y + single->height < 0) {
    2f34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   move.l 4(a2),d1
    2f38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   move.l a5,d0
    2f3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   add.l d1,d0
  if( y < 0) {
    2f3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   tst.w d6
    2f3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-----|-- bge.w 2c76 <CstScaleSprite+0x64>
    if(y + single->height < 0) {
    2f42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '-----|-----|-> tst.l d0
    2f44:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--------|-----|-- blt.w 3138 <CstScaleSprite+0x526>
    ystartsrc = y*-1;
    2f48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l a5,d7
    2f4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   neg.l d7
    2f4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   movea.l d7,a1
    blitheight = single->height+y;
    2f4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l d0,66(sp)
    ystartdst = 0;
    2f52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   clr.l 44(sp)
    if(x + single->width < 0) {
    2f56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l (a2),d1
    2f58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l a4,d0
    2f5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   add.l d1,d0
  if( x < 0) 
    2f5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   tst.w d3
    2f5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     '-- bge.w 2ca0 <CstScaleSprite+0x8e>
    if(x + single->width < 0) {
    2f62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '-------> tst.l d0
    2f64:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|----------------- blt.w 3138 <CstScaleSprite+0x526>
    cutwordssource = (x*-1)/16; 
    2f68:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d4,d0
    2f6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  addi.w #15,d0
    2f6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  asr.w #4,d0
    2f70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  neg.w d0
    2f72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d0,78(sp)
    2f76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d0,d6
    cutmaskpixel = (x*-1)%16;   
    2f78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a4,d0
    2f7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  neg.l d0
    2f7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d2
    2f7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  and.l d0,d2
    2f80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d2,84(sp)
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2f84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 1c764 <winWidth>,d3
    2f8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lea 17a98 <__mulsi3>,a4
    2f90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d3,-(sp)
    2f92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 48(sp),-(sp)
    2f96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d1,56(sp)
    2f9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a1,60(sp)
    2f9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  jsr (a4)
    2fa0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  addq.l #8,sp
    2fa2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsr.l #3,d0
    if( cutmaskpixel > 0)
    2fa4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 48(sp),d1
    2fa8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  movea.l 52(sp),a1
    2fac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  tst.l d2
    2fae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,-------- beq.w 314e <CstScaleSprite+0x53c>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2fb2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lea (-2,a3,d0.l),a5
      bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2fb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w 78(sp),a0
    2fba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         subq.w #1,a0
      bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    2fbc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #16,d7
    2fbe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         sub.l d2,d7
    2fc0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d7,d2
    2fc2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #12,d0
    2fc4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsl.l d0,d2
  custom->bltcon0 = bltcon0;
    2fc6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         addi.w #4042,d2
    2fca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d2,70(sp)
  custom->bltcon1 = bltcon1;  
    2fce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #12,d2
    2fd0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsl.w d2,d7
    2fd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d7,72(sp)
      extrawords = 1;
    2fd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #1,d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    2fd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w 78(sp),a3
    2fdc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.l a3,a3
    2fde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l a1,-(sp)
    2fe0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d1,-(sp)
    2fe2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d1,56(sp)
    2fe6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l a0,60(sp)
    2fea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         jsr (a4)
    2fec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         addq.l #8,sp
    2fee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsr.l #3,d0
    2ff0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l a3,d5
    2ff2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l d0,d5
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    2ff4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.l 24(a2),a3
    2ff8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l a3,d0
    2ffa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d0,62(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    2ffe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3004:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w 46(sp),a4
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    3008:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #0,d0
    300a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         not.w d0
    300c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l 84(sp),d7
    3010:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         asr.l d7,d0
    3012:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d0,76(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3016:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.l 52(sp),a0
    301a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w a0,a3
    301c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.w a0,a3
    if( destinationtype == SCREEN)
    301e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l 48(sp),d1
    3022:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #1,d0
    3024:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.w a6,d0
    3026:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  ,----- beq.w 31b4 <CstScaleSprite+0x5a2>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    302a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  ,-> movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    3030:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.l d1,d0
    3032:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   asr.l #4,d0
    3034:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w 78(sp),d0
    3038:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w d2,d0
    303a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    303c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w 68(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    3042:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   clr.w 4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    3046:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w 46(sp),6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    304c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   lea 10(a0),a1
    3050:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.l a1,1c748 <CstBackDropBufferApplyCursor>
    3056:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   clr.w 8(a0)
    bltalwm = 0; //Last Word of this channel almost masked out
    305a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   suba.l a4,a4
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    305c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   lsr.l #3,d3
    305e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w a3,d4
    3060:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w d3,d4
    3062:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   tst.l d1
    3064:	|  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--|-- bge.w 2d84 <CstScaleSprite+0x172>
    3068:	|  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--|-- bra.w 3342 <CstScaleSprite+0x730>
      destination = (UWORD *) CstDrawBuffer;      
    306c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|--|--|--|--------|--|--|-> movea.l 1c738 <CstDrawBuffer>,a3
      break;
    3072:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     '--|--|--|--------|--|--|-- bra.w 2c68 <CstScaleSprite+0x56>
    ystartdst = y;
    3076:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '--|--|--------|--|--|-> move.l a5,44(sp)
    blitheight = single->height;
    307a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |        |  |  |   move.l d1,66(sp)
    ystartsrc = 0;
    307e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |        |  |  |   suba.l a1,a1
    3080:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '--|--------|--|--|-- bra.w 2c94 <CstScaleSprite+0x82>
    bltapt = ((ULONG) mask) +ystartsrc*single->width/8;
    3084:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              '--------|--|--|-> lea 17a98 <__mulsi3>,a4
    308a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l a1,-(sp)
    308c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d1,-(sp)
    308e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d1,56(sp)
    3092:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   jsr (a4)
    3094:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addq.l #8,sp
    3096:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsr.l #3,d0
    3098:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.l d0,d5
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    309a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.l 24(a2),d0
    309e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d0,62(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    30a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l 44(sp),-(sp)
    30a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d3,-(sp)
    30a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   jsr (a4)
    30aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addq.l #8,sp
    30ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsr.l #3,d0
    30ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d4,d6
    30b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   asr.w #4,d6
    30b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   movea.w d6,a0
    30b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   adda.l a0,a0
    30b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   adda.l a0,a3
    30b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lea (0,a3,d0.l),a5
      CstCleanupQueueDrawBuffer->height = blitheight;
    30bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    30c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.w d6,d6
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    30c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   movea.w 46(sp),a3
    bltcon0 = 0xfca + ((x%16) << 12);
    30c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d4,d0
    30ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   moveq #12,d7
    30cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsl.w d7,d0
  custom->bltcon0 = bltcon0;
    30ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addi.w #4042,d0
    30d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d0,70(sp)
  custom->bltcon1 = bltcon1;  
    30d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d4,d0
    30d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsl.w d7,d0
    30da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d0,72(sp)
    if( destinationtype == SCREEN)
    30de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l 48(sp),d1
    30e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   moveq #1,d7
    30e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   cmp.w a6,d7
    30e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    ,--|--|--|-- beq.w 33dc <CstScaleSprite+0x7ca>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    30ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    |  |  |  |   movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    30f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    |  |  |  |   move.l d1,d0
    30f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,--------|--|--|--|-- bmi.w 34ba <CstScaleSprite+0x8a8>
    30f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   asr.l #4,d0
    30f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   addq.w #1,d0
    30fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    30fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    3102:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w d6,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    3106:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w a3,6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    310a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   lea 10(a0),a1
    310e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.l a1,1c748 <CstBackDropBufferApplyCursor>
    3114:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   clr.w 8(a0)
    3118:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w #-1,76(sp)
    311e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    3122:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   suba.l a4,a4
    cutwordssource = 0;
    3124:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   clr.w d6
    extrawords = 1;
    3126:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   moveq #1,d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3128:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,--|--------|--|--|--|-> lsr.l #3,d3
    312a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   move.w a3,d4
    312c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   add.w d3,d4
    312e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   tst.l d1
    3130:	|  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-- bge.w 2d84 <CstScaleSprite+0x172>
    3134:	|  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-- bra.w 3342 <CstScaleSprite+0x730>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    3138:	|  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-> move.l #98081,92(sp)
}
    3140:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    3144:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   lea 44(sp),sp
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    3148:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   jmp 1710c <KPrintF>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8;
    314e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  '--|--|-> lea (0,a3,d0.l),a5
    3152:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w 78(sp),a0
    3156:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   clr.w 72(sp)
    315a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w #4042,70(sp)
      extrawords = 0;
    3160:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   clr.w d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    3162:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w 78(sp),a3
    3166:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.l a3,a3
    3168:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l a1,-(sp)
    316a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d1,-(sp)
    316c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d1,56(sp)
    3170:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l a0,60(sp)
    3174:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   jsr (a4)
    3176:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   addq.l #8,sp
    3178:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   lsr.l #3,d0
    317a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l a3,d5
    317c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l d0,d5
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    317e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.l 24(a2),a3
    3182:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l a3,d0
    3184:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d0,62(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    3188:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    318e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w 46(sp),a4
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    3192:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   moveq #0,d0
    3194:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   not.w d0
    3196:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l 84(sp),d7
    319a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   asr.l d7,d0
    319c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w d0,76(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    31a0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.l 52(sp),a0
    31a4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w a0,a3
    31a6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.w a0,a3
    if( destinationtype == SCREEN)
    31a8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l 48(sp),d1
    31ac:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   moveq #1,d0
    31ae:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   cmp.w a6,d0
    31b0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  '-- bne.w 302a <CstScaleSprite+0x418>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    31b4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     '----> move.l 1c740 <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    31ba:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            movea.l 1c810 <SysBase>,a6
    31c0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            moveq #20,d0
    31c2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            moveq #0,d1
    31c4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            jsr -684(a6)
    31c8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            movea.l d0,a0
    31ca:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d0,1c740 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    31d0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    31d4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.w d4,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    31d6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.w 58(sp),2(a0)
      CstCleanupQueueDrawBuffer->person = person;      
    31dc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l 80(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    31e2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l (a2),d1
    31e4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d1,d0
    31e6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     ,--|----------- bmi.w 352a <CstScaleSprite+0x918>
    31ea:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            asr.l #4,d0
    31ec:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            add.w 78(sp),d0
    31f0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            add.w d2,d0
    31f2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    31f6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    31fc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3200:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w a4,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3204:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.l 1c764 <winWidth>,d3
    bltalwm = 0; //Last Word of this channel almost masked out
    320a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            suba.l a4,a4
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    320c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  ,--|--|----------> lsr.l #3,d3
    320e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w a3,d4
    3210:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d3,d4
    3212:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            tst.l d1
    3214:	|  |  |  +--|--|--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------- bge.w 2d84 <CstScaleSprite+0x172>
    3218:	|  |  +--|--|--|--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------- bra.w 3342 <CstScaleSprite+0x730>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    321c:	|  |  |  |  |  |  |     >--|--|--|--|--|--|--|--------|--|--|--|--|----------> moveq #15,d1
    321e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.l d1,d0
    3220:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            asr.l #4,d0
    3222:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d0,d2
    3224:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d7,d2
    3226:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            sub.w d6,d2
    3228:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e1c>
    WaitBlit();
    322e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l d3,a0
    3230:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l (a0),a6
    3232:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            jsr -228(a6)
}
    3236:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movem.l (sp)+,d2-d7/a2-a6
    323a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            lea 44(sp),sp
    323e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            rts
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3240:	|  |  |  |  |  >--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------> moveq #15,d1
    3242:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.l d1,d0
    3244:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            asr.l #4,d0
    3246:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d2,d0
    3248:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d7,d0
    324a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            sub.w d6,d0
    324c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e1c>
    bltbpt += bltbptplus;
    3252:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l 62(sp),a4
    3256:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            adda.l a3,a4
    bltcpt += bltcptplus;
    3258:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            adda.l d4,a5
    WaitBlit();
    325a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l d3,a0
    325c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l (a0),a6
    325e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3262:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3264:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e14>
    custom->bltbpt = (APTR) bltbpt;
    326a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e10>
    custom->bltcpt = (APTR) bltcpt;
    3270:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3e0c>
    custom->bltdpt = (APTR) bltdpt;
    3276:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e18>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    327c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            tst.l d0
    327e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  '--------|--|--|--|--|----------- bge.w 2e56 <CstScaleSprite+0x244>
    3282:	|  |  |  |  |  |  |     |  |  |  |  |  '--|-----------|--|--|--|--|----------> moveq #15,d1
    3284:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.l d1,d0
    3286:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            asr.l #4,d0
    3288:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.w d2,d0
    328a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.w d7,d0
    328c:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            sub.w d6,d0
    328e:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e1c>
    bltbpt += bltbptplus;
    3294:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            adda.l a3,a4
    bltcpt += bltcptplus;
    3296:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            adda.l d4,a5
    WaitBlit();
    3298:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            movea.l d3,a0
    329a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            movea.l (a0),a6
    329c:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    32a0:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    32a2:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e14>
    custom->bltbpt = (APTR) bltbpt;
    32a8:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e10>
    custom->bltcpt = (APTR) bltcpt;
    32ae:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3e0c>
    custom->bltdpt = (APTR) bltdpt;
    32b4:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e18>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    32ba:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            tst.l d0
    32bc:	|  |  |  |  |  |  |     |  |  |  |  |     '-----------|--|--|--|--|----------- bge.w 2e90 <CstScaleSprite+0x27e>
    32c0:	|  |  |  |  |  |  |     |  |  |  '--|-----------------|--|--|--|--|----------> moveq #15,d1
    32c2:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.l d1,d0
    32c4:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            asr.l #4,d0
    32c6:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.w d2,d0
    32c8:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.w d7,d0
    32ca:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            sub.w d6,d0
    32cc:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e1c>
    bltbpt += bltbptplus;
    32d2:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            adda.l a3,a4
    bltcpt += bltcptplus;
    32d4:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            adda.l d4,a5
    WaitBlit();
    32d6:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            movea.l d3,a0
    32d8:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            movea.l (a0),a6
    32da:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    32de:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    32e0:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e14>
    custom->bltbpt = (APTR) bltbpt;
    32e6:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e10>
    custom->bltcpt = (APTR) bltcpt;
    32ec:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3e0c>
    custom->bltdpt = (APTR) bltdpt;
    32f2:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e18>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    32f8:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            tst.l d0
    32fa:	|  |  |  |  |  |  |     |  |  |     '-----------------|--|--|--|--|----------- bge.w 2eca <CstScaleSprite+0x2b8>
    32fe:	|  |  |  |  |  |  |     |  '--|-----------------------|--|--|--|--|----------> moveq #15,d1
    3300:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.l d1,d0
    3302:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            asr.l #4,d0
    3304:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.w d2,d0
    3306:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.w d7,d0
    3308:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            sub.w d6,d0
    330a:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e1c>
    bltbpt += bltbptplus;
    3310:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            lea (0,a4,a3.l),a3
    bltcpt += bltcptplus;
    3314:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.l a5,d4
    WaitBlit();
    3316:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            movea.l d3,a0
    3318:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            movea.l (a0),a6
    331a:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    331e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3320:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e14>
    custom->bltbpt = (APTR) bltbpt;
    3326:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l a3,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e10>
    custom->bltcpt = (APTR) bltcpt;
    332c:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d4,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3e0c>
    custom->bltdpt = (APTR) bltdpt;
    3332:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d4,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e18>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3338:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            tst.l d0
    333a:	|  |  |  |  |  |  |     |     '-----------------------|--|--|--|--|----------- bge.w 2f06 <CstScaleSprite+0x2f4>
    333e:	|  |  |  |  |  |  |     '-----------------------------|--|--|--|--|----------- bra.w 321c <CstScaleSprite+0x60a>
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3342:	|  |  >--|--|--|--|-----------------------------------|--|--|--|--|----------> addq.l #7,d1
    3344:	|  |  |  |  |  |  |                                   |  |  |  |  |            asr.l #3,d1
    3346:	|  |  |  |  |  |  |                                   |  |  |  |  |            sub.w d1,d4
  WaitBlit();
    3348:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l #116764,d3
    334e:	|  |  |  |  |  |  |                                   |  |  |  |  |            movea.l d3,a0
    3350:	|  |  |  |  |  |  |                                   |  |  |  |  |            movea.l (a0),a6
    3352:	|  |  |  |  |  |  |                                   |  |  |  |  |            jsr -228(a6)
  custom->bltafwm = bltafwm;
    3356:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 76(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb3e08>
  custom->bltalwm = bltalwm;
    335e:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w a4,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3e0a>
  custom->bltamod = bltamod;
    3364:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w a3,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e28>
  custom->bltbmod = bltbmod;
    336a:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w a3,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3e26>
  custom->bltcmod = bltcmod;
    3370:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d4,dff060 <gcc8_c_support.c.c60c1f2b+0xdb3e24>
  custom->bltdmod = bltdmod;
    3376:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d4,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e2a>
  custom->bltcon0 = bltcon0;
    337c:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 70(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb3e04>
  custom->bltcon1 = bltcon1;  
    3384:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 72(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb3e06>
  UWORD bltbptplus = (single->width >> 3)*single->height;
    338c:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l (a2),d0
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    338e:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 60(sp),d7
    3392:	|  |  |  |  |  |  |                                   |  |  |  |  |            lsl.w #6,d7
  UWORD bltbptplus = (single->width >> 3)*single->height;
    3394:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l d0,d1
    3396:	|  |  |  |  |  |  |                                   |  |  |  |  |            asr.l #3,d1
    3398:	|  |  |  |  |  |  |                                   |  |  |  |  |            muls.w 6(a2),d1
    bltbpt += bltbptplus;
    339c:	|  |  |  |  |  |  |                                   |  |  |  |  |            andi.l #65535,d1
    33a2:	|  |  |  |  |  |  |                                   |  |  |  |  |            movea.l d1,a3
  UWORD bltcptplus = winWidth/8*winHeight;
    33a4:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 1c764 <winWidth>,d4
    33aa:	|  |  |  |  |  |  |                                   |  |  |  |  |            lsr.l #3,d4
    33ac:	|  |  |  |  |  |  |                                   |  |  |  |  |            muls.w 1c76a <winHeight+0x2>,d4
    bltcpt += bltcptplus;
    33b2:	|  |  |  |  |  |  |                                   |  |  |  |  |            andi.l #65535,d4
    custom->bltapt = (APTR) bltapt;
    33b8:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e14>
    custom->bltbpt = (APTR) bltbpt;
    33be:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 62(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e10>
    custom->bltcpt = (APTR) bltcpt;
    33c6:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3e0c>
    custom->bltdpt = (APTR) bltdpt;
    33cc:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e18>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    33d2:	|  |  |  |  |  |  |                                   |  |  |  |  |            tst.l d0
    33d4:	|  |  |  |  |  |  '-----------------------------------|--|--|--|--|----------- bge.w 2e18 <CstScaleSprite+0x206>
    33d8:	|  |  |  |  |  '--------------------------------------|--|--|--|--|----------- bra.w 3240 <CstScaleSprite+0x62e>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    33dc:	|  |  |  |  |                                         |  |  |  |  '----------> move.l 1c740 <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    33e2:	|  |  |  |  |                                         |  |  |  |               movea.l 1c810 <SysBase>,a6
    33e8:	|  |  |  |  |                                         |  |  |  |               moveq #20,d0
    33ea:	|  |  |  |  |                                         |  |  |  |               moveq #0,d1
    33ec:	|  |  |  |  |                                         |  |  |  |               jsr -684(a6)
    33f0:	|  |  |  |  |                                         |  |  |  |               movea.l d0,a0
    33f2:	|  |  |  |  |                                         |  |  |  |               move.l d0,1c740 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    33f8:	|  |  |  |  |                                         |  |  |  |               move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    33fc:	|  |  |  |  |                                         |  |  |  |               move.w d4,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    33fe:	|  |  |  |  |                                         |  |  |  |               move.w 58(sp),2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    3404:	|  |  |  |  |                                         |  |  |  |               move.l 80(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    340a:	|  |  |  |  |                                         |  |  |  |               move.l (a2),d1
    340c:	|  |  |  |  |                                         |  |  |  |               move.l d1,d0
    340e:	|  |  |  |  |                                         |  |  |  |     ,-------- bmi.w 3554 <CstScaleSprite+0x942>
    3412:	|  |  |  |  |                                         |  |  |  |     |         asr.l #4,d0
    3414:	|  |  |  |  |                                         |  |  |  |     |         addq.w #1,d0
    3416:	|  |  |  |  |                                         |  |  |  |     |         move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    341a:	|  |  |  |  |                                         |  |  |  |     |         move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    3420:	|  |  |  |  |                                         |  |  |  |     |         move.w d6,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3424:	|  |  |  |  |                                         |  |  |  |     |         move.w a3,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3428:	|  |  |  |  |                                         |  |  |  |     |         move.l 1c764 <winWidth>,d3
    342e:	|  |  |  |  |                                         |  |  |  |     |         move.w #-1,76(sp)
    3434:	|  |  |  |  |                                         |  |  |  |     |         movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    3438:	|  |  |  |  |                                         |  |  |  |     |         suba.l a4,a4
    cutwordssource = 0;
    343a:	|  |  |  |  |                                         |  |  |  |     |         clr.w d6
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    343c:	|  |  |  |  |                                         |  |  |  |  ,--|-------> lsr.l #3,d3
    343e:	|  |  |  |  |                                         |  |  |  |  |  |         move.w a3,d4
    3440:	|  |  |  |  |                                         |  |  |  |  |  |         add.w d3,d4
    3442:	|  |  |  |  |                                         |  |  |  |  |  |         tst.l d1
    3444:	|  |  |  +--|-----------------------------------------|--|--|--|--|--|-------- bge.w 2d84 <CstScaleSprite+0x172>
    3448:	|  |  +--|--|-----------------------------------------|--|--|--|--|--|-------- bra.w 3342 <CstScaleSprite+0x730>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    344c:	|  |  |  |  '-----------------------------------------|--|--|--|--|--|-------> move.l 1c740 <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3452:	|  |  |  |                                            |  |  |  |  |  |         movea.l 1c810 <SysBase>,a6
    3458:	|  |  |  |                                            |  |  |  |  |  |         moveq #20,d0
    345a:	|  |  |  |                                            |  |  |  |  |  |         moveq #0,d1
    345c:	|  |  |  |                                            |  |  |  |  |  |         jsr -684(a6)
    3460:	|  |  |  |                                            |  |  |  |  |  |         movea.l d0,a0
    3462:	|  |  |  |                                            |  |  |  |  |  |         move.l d0,1c740 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    3468:	|  |  |  |                                            |  |  |  |  |  |         move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    346c:	|  |  |  |                                            |  |  |  |  |  |         move.w d4,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    346e:	|  |  |  |                                            |  |  |  |  |  |         move.w 58(sp),2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    3474:	|  |  |  |                                            |  |  |  |  |  |         move.l 80(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    347a:	|  |  |  |                                            |  |  |  |  |  |         move.l (a2),d1
    347c:	|  |  |  |                                            |  |  |  |  |  |         move.l d1,d0
    347e:	|  |  |  |                                            |  |  |  |  |  |     ,-- bmi.w 3586 <CstScaleSprite+0x974>
    3482:	|  |  |  |                                            |  |  |  |  |  |     |   asr.l #4,d0
    3484:	|  |  |  |                                            |  |  |  |  |  |     |   add.w d0,d2
    3486:	|  |  |  |                                            |  |  |  |  |  |     |   move.w d2,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    348a:	|  |  |  |                                            |  |  |  |  |  |     |   move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3490:	|  |  |  |                                            |  |  |  |  |  |     |   move.w 66(sp),12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3496:	|  |  |  |                                            |  |  |  |  |  |     |   move.w 44(sp),14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    349c:	|  |  |  |                                            |  |  |  |  |  |     |   move.l 1c764 <winWidth>,d3
    34a2:	|  |  |  |                                            |  |  |  |  |  |     |   move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    34a8:	|  |  |  |                                            |  |  |  |  |  |     |   clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    34aa:	|  |  |  |                                            |  |  |  |  |  |  ,--|-> lsr.l #3,d3
    34ac:	|  |  |  |                                            |  |  |  |  |  |  |  |   move.w a3,d4
    34ae:	|  |  |  |                                            |  |  |  |  |  |  |  |   add.w d3,d4
    34b0:	|  |  |  |                                            |  |  |  |  |  |  |  |   tst.l d1
    34b2:	|  |  |  '--------------------------------------------|--|--|--|--|--|--|--|-- bge.w 2d84 <CstScaleSprite+0x172>
    34b6:	|  |  '-----------------------------------------------|--|--|--|--|--|--|--|-- bra.w 3342 <CstScaleSprite+0x730>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    34ba:	|  |                                                  |  '--|--|--|--|--|--|-> moveq #15,d0
    34bc:	|  |                                                  |     |  |  |  |  |  |   add.l d1,d0
    34be:	|  |                                                  |     |  |  |  |  |  |   asr.l #4,d0
    34c0:	|  |                                                  |     |  |  |  |  |  |   addq.w #1,d0
    34c2:	|  |                                                  |     |  |  |  |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    34c4:	|  |                                                  |     |  |  |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    34ca:	|  |                                                  |     |  |  |  |  |  |   move.w d6,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    34ce:	|  |                                                  |     |  |  |  |  |  |   move.w a3,6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    34d2:	|  |                                                  |     |  |  |  |  |  |   lea 10(a0),a1
    34d6:	|  |                                                  |     |  |  |  |  |  |   move.l a1,1c748 <CstBackDropBufferApplyCursor>
    34dc:	|  |                                                  |     |  |  |  |  |  |   clr.w 8(a0)
    34e0:	|  |                                                  |     |  |  |  |  |  |   move.w #-1,76(sp)
    34e6:	|  |                                                  |     |  |  |  |  |  |   movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    34ea:	|  |                                                  |     |  |  |  |  |  |   suba.l a4,a4
    cutwordssource = 0;
    34ec:	|  |                                                  |     |  |  |  |  |  |   clr.w d6
    extrawords = 1;
    34ee:	|  |                                                  |     |  |  |  |  |  |   moveq #1,d2
    34f0:	|  |                                                  '-----|--|--|--|--|--|-- bra.w 3128 <CstScaleSprite+0x516>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    34f4:	|  '--------------------------------------------------------|--|--|--|--|--|-> moveq #15,d0
    34f6:	|                                                           |  |  |  |  |  |   add.l d1,d0
    34f8:	|                                                           |  |  |  |  |  |   asr.l #4,d0
    34fa:	|                                                           |  |  |  |  |  |   add.w d0,d2
    34fc:	|                                                           |  |  |  |  |  |   move.w d2,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    34fe:	|                                                           |  |  |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    3504:	|                                                           |  |  |  |  |  |   move.w 66(sp),4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    350a:	|                                                           |  |  |  |  |  |   move.w 44(sp),6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    3510:	|                                                           |  |  |  |  |  |   lea 10(a0),a1
    3514:	|                                                           |  |  |  |  |  |   move.l a1,1c748 <CstBackDropBufferApplyCursor>
    351a:	|                                                           |  |  |  |  |  |   clr.w 8(a0)
    351e:	|                                                           |  |  |  |  |  |   move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3524:	|                                                           |  |  |  |  |  |   clr.w d2
    3526:	'-----------------------------------------------------------|--|--|--|--|--|-- bra.w 2d78 <CstScaleSprite+0x166>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    352a:	                                                            |  '--|--|--|--|-> moveq #15,d0
    352c:	                                                            |     |  |  |  |   add.l d1,d0
    352e:	                                                            |     |  |  |  |   asr.l #4,d0
    3530:	                                                            |     |  |  |  |   add.w 78(sp),d0
    3534:	                                                            |     |  |  |  |   add.w d2,d0
    3536:	                                                            |     |  |  |  |   move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    353a:	                                                            |     |  |  |  |   move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    3540:	                                                            |     |  |  |  |   clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3544:	                                                            |     |  |  |  |   move.w a4,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3548:	                                                            |     |  |  |  |   move.l 1c764 <winWidth>,d3
    bltalwm = 0; //Last Word of this channel almost masked out
    354e:	                                                            |     |  |  |  |   suba.l a4,a4
    3550:	                                                            '-----|--|--|--|-- bra.w 320c <CstScaleSprite+0x5fa>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3554:	                                                                  |  '--|--|-> moveq #15,d0
    3556:	                                                                  |     |  |   add.l d1,d0
    3558:	                                                                  |     |  |   asr.l #4,d0
    355a:	                                                                  |     |  |   addq.w #1,d0
    355c:	                                                                  |     |  |   move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    3560:	                                                                  |     |  |   move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    3566:	                                                                  |     |  |   move.w d6,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    356a:	                                                                  |     |  |   move.w a3,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    356e:	                                                                  |     |  |   move.l 1c764 <winWidth>,d3
    3574:	                                                                  |     |  |   move.w #-1,76(sp)
    357a:	                                                                  |     |  |   movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    357e:	                                                                  |     |  |   suba.l a4,a4
    cutwordssource = 0;
    3580:	                                                                  |     |  |   clr.w d6
    3582:	                                                                  '-----|--|-- bra.w 343c <CstScaleSprite+0x82a>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    3586:	                                                                        |  '-> moveq #15,d0
    3588:	                                                                        |      add.l d1,d0
    358a:	                                                                        |      asr.l #4,d0
    358c:	                                                                        |      add.w d0,d2
    358e:	                                                                        |      move.w d2,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3592:	                                                                        |      move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3598:	                                                                        |      move.w 66(sp),12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    359e:	                                                                        |      move.w 44(sp),14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    35a4:	                                                                        |      move.l 1c764 <winWidth>,d3
    35aa:	                                                                        |      move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    35b0:	                                                                        |      clr.w d2
    35b2:	                                                                        '----- bra.w 34aa <CstScaleSprite+0x898>

000035b6 <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    35b6:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    35b8:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    35be:	move.l 8(sp),d0
    35c2:	movea.l (sp),a0
    35c4:	move.l d0,128(a0)
}
    35c8:	nop
    35ca:	addq.l #4,sp
    35cc:	rts

000035ce <CstSwapBuffer>:

void CstSwapBuffer( ) {
    35ce:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    35d2:	move.l 1c734 <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    35da:	move.l 1c738 <CstDrawBuffer>,d0
    35e0:	move.l d0,1c734 <CstViewBuffer>
  CstDrawBuffer = tmp;
    35e6:	move.l 16(sp),1c738 <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    35ee:	move.l 1c73c <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    35f6:	move.l 1c740 <CstCleanupQueueDrawBuffer>,d0
    35fc:	move.l d0,1c73c <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    3602:	move.l 12(sp),1c740 <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    360a:	move.l 1c72e <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    3612:	move.l 1c734 <CstViewBuffer>,d0
    3618:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    361c:	move.l 4(sp),d0
    3620:	clr.w d0
    3622:	swap d0
    3624:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    3628:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    362c:	movea.w #118,a0
    3630:	adda.l 8(sp),a0
    3634:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    3636:	movea.w #114,a0
    363a:	adda.l 8(sp),a0
    363e:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3642:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    364a:	move.l 4(sp),d0
    364e:	clr.w d0
    3650:	swap d0
    3652:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3656:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    365a:	movea.w #126,a0
    365e:	adda.l 8(sp),a0
    3662:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    3664:	movea.w #122,a0
    3668:	adda.l 8(sp),a0
    366c:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    3670:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3678:	move.l 4(sp),d0
    367c:	clr.w d0
    367e:	swap d0
    3680:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3684:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    3688:	movea.l 8(sp),a0
    368c:	lea 134(a0),a0
    3690:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    3692:	movea.l 8(sp),a0
    3696:	lea 130(a0),a0
    369a:	move.w 2(sp),(a0)

  ptr +=  40*256;
    369e:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    36a6:	move.l 4(sp),d0
    36aa:	clr.w d0
    36ac:	swap d0
    36ae:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    36b2:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    36b6:	movea.l 8(sp),a0
    36ba:	lea 142(a0),a0
    36be:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    36c0:	movea.l 8(sp),a0
    36c4:	lea 138(a0),a0
    36c8:	move.w 2(sp),(a0)

  ptr +=  40*256;
    36cc:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    36d4:	move.l 4(sp),d0
    36d8:	clr.w d0
    36da:	swap d0
    36dc:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    36e0:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    36e4:	movea.l 8(sp),a0
    36e8:	lea 150(a0),a0
    36ec:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    36ee:	movea.l 8(sp),a0
    36f2:	lea 146(a0),a0
    36f6:	move.w 2(sp),(a0)

}
    36fa:	nop
    36fc:	lea 20(sp),sp
    3700:	rts

00003702 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    3702:	          lea -80(sp),sp
    3706:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    3708:	          pea 17f54 <PutChar+0x3a6>
    370e:	          jsr 1710c <KPrintF>
    3714:	          addq.l #4,sp

  width = width / 8;
    3716:	          move.l 88(sp),d0
    371a:	      ,-- bpl.s 371e <CstReserveBackdrop+0x1c>
    371c:	      |   addq.l #7,d0
    371e:	      '-> asr.l #3,d0
    3720:	          move.l d0,88(sp)

  if( width < 40) 
    3724:	          moveq #39,d0
    3726:	          cmp.l 88(sp),d0
    372a:	      ,-- blt.s 3740 <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    372c:	      |   pea 17f6e <PutChar+0x3c0>
    3732:	      |   jsr 1710c <KPrintF>
    3738:	      |   addq.l #4,sp
    return FALSE;
    373a:	      |   clr.w d0
    373c:	,-----|-- bra.w 3ae2 <CstReserveBackdrop+0x3e0>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    3740:	|     '-> pea 17fac <PutChar+0x3fe>
    3746:	|         jsr 1710c <KPrintF>
    374c:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    374e:	|         move.l 88(sp),-(sp)
    3752:	|         jsr ffc <CstCreateCopperlist>
    3758:	|         addq.l #4,sp
    375a:	|         move.l d0,1c72e <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    3760:	|         pea 17fcc <PutChar+0x41e>
    3766:	|         jsr 1710c <KPrintF>
    376c:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    376e:	|         move.l 88(sp),d1
    3772:	|         move.l 92(sp),d0
    3776:	|         muls.w d1,d0
    3778:	|         move.w d0,1c724 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    377e:	|         move.w 1c724 <CstBackdropSizePlane>,d1
    3784:	|         move.w d1,d0
    3786:	|         add.w d0,d0
    3788:	|         add.w d0,d0
    378a:	|         add.w d1,d0
    378c:	|         move.w d0,1c722 <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    3792:	|         move.w 1c722 <CstBackdropSize>,d0
    3798:	|         move.w d0,d0
    379a:	|         andi.l #65535,d0
    37a0:	|         move.l d0,72(sp)
    37a4:	|         moveq #2,d1
    37a6:	|         move.l d1,68(sp)
    37aa:	|         move.l 1c810 <SysBase>,d0
    37b0:	|         movea.l d0,a6
    37b2:	|         move.l 72(sp),d0
    37b6:	|         move.l 68(sp),d1
    37ba:	|         jsr -684(a6)
    37be:	|         move.l d0,64(sp)
    37c2:	|         move.l 64(sp),d0
    37c6:	|         move.l d0,1c726 <CstBackDrop>
  if( !CstBackDrop)
    37cc:	|         move.l 1c726 <CstBackDrop>,d0
    37d2:	|     ,-- bne.s 37e8 <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    37d4:	|     |   pea 17ff3 <PutChar+0x445>
    37da:	|     |   jsr 1710c <KPrintF>
    37e0:	|     |   addq.l #4,sp
    return FALSE;  
    37e2:	|     |   clr.w d0
    37e4:	+-----|-- bra.w 3ae2 <CstReserveBackdrop+0x3e0>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    37e8:	|     '-> pea 1802b <PutChar+0x47d>
    37ee:	|         jsr 1710c <KPrintF>
    37f4:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    37f6:	|         move.l 1c726 <CstBackDrop>,80(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    37fe:	|         clr.l 76(sp)
    3802:	|     ,-- bra.s 3818 <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    3804:	|  ,--|-> move.l 80(sp),d0
    3808:	|  |  |   move.l d0,d1
    380a:	|  |  |   addq.l #4,d1
    380c:	|  |  |   move.l d1,80(sp)
    3810:	|  |  |   movea.l d0,a0
    3812:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    3814:	|  |  |   addq.l #1,76(sp)
    3818:	|  |  '-> move.w 1c722 <CstBackdropSize>,d0
    381e:	|  |      lsr.w #2,d0
    3820:	|  |      move.w d0,d0
    3822:	|  |      andi.l #65535,d0
    3828:	|  |      cmp.l 76(sp),d0
    382c:	|  '----- bgt.s 3804 <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    382e:	|         move.w 1c722 <CstBackdropSize>,d0
    3834:	|         move.w d0,d0
    3836:	|         andi.l #65535,d0
    383c:	|         move.l 88(sp),d1
    3840:	|         add.l d1,d1
    3842:	|         add.l d1,d0
    3844:	|         move.l d0,60(sp)
    3848:	|         moveq #2,d0
    384a:	|         move.l d0,56(sp)
    384e:	|         move.l 1c810 <SysBase>,d0
    3854:	|         movea.l d0,a6
    3856:	|         move.l 60(sp),d0
    385a:	|         move.l 56(sp),d1
    385e:	|         jsr -684(a6)
    3862:	|         move.l d0,52(sp)
    3866:	|         move.l 52(sp),d0
    386a:	|         move.l d0,1c738 <CstDrawBuffer>
  if( !CstDrawBuffer)
    3870:	|         move.l 1c738 <CstDrawBuffer>,d0
    3876:	|     ,-- bne.s 388c <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    3878:	|     |   pea 18051 <PutChar+0x4a3>
    387e:	|     |   jsr 1710c <KPrintF>
    3884:	|     |   addq.l #4,sp
    return FALSE;  
    3886:	|     |   clr.w d0
    3888:	+-----|-- bra.w 3ae2 <CstReserveBackdrop+0x3e0>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    388c:	|     '-> pea 1808b <PutChar+0x4dd>
    3892:	|         jsr 1710c <KPrintF>
    3898:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 1000*5*2,MEMF_ANY);
    389a:	|         move.l #10000,48(sp)
    38a2:	|         clr.l 44(sp)
    38a6:	|         move.l 1c810 <SysBase>,d0
    38ac:	|         movea.l d0,a6
    38ae:	|         move.l 48(sp),d0
    38b2:	|         move.l 44(sp),d1
    38b6:	|         jsr -684(a6)
    38ba:	|         move.l d0,40(sp)
    38be:	|         move.l 40(sp),d0
    38c2:	|         move.l d0,1c744 <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    38c8:	|         move.l 1c744 <CstBackDropBufferApplyStart>,d0
    38ce:	|     ,-- bne.s 38e4 <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    38d0:	|     |   pea 180b3 <PutChar+0x505>
    38d6:	|     |   jsr 1710c <KPrintF>
    38dc:	|     |   addq.l #4,sp
    return FALSE;  
    38de:	|     |   clr.w d0
    38e0:	+-----|-- bra.w 3ae2 <CstReserveBackdrop+0x3e0>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    38e4:	|     '-> move.l 1c744 <CstBackDropBufferApplyStart>,d0
    38ea:	|         move.l d0,1c748 <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    38f0:	|         movea.l 1c744 <CstBackDropBufferApplyStart>,a0
    38f6:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    38f8:	|         movea.l 1c744 <CstBackDropBufferApplyStart>,a0
    38fe:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3900:	|         move.w 1c722 <CstBackdropSize>,d0
    3906:	|         move.w d0,d0
    3908:	|         andi.l #65535,d0
    390e:	|         move.l 88(sp),d1
    3912:	|         add.l d1,d1
    3914:	|         add.l d1,d0
    3916:	|         move.l d0,36(sp)
    391a:	|         moveq #2,d1
    391c:	|         move.l d1,32(sp)
    3920:	|         move.l 1c810 <SysBase>,d0
    3926:	|         movea.l d0,a6
    3928:	|         move.l 36(sp),d0
    392c:	|         move.l 32(sp),d1
    3930:	|         jsr -684(a6)
    3934:	|         move.l d0,28(sp)
    3938:	|         move.l 28(sp),d0
    393c:	|         move.l d0,1c734 <CstViewBuffer>
  if( !CstViewBuffer)
    3942:	|         move.l 1c734 <CstViewBuffer>,d0
    3948:	|     ,-- bne.s 395e <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    394a:	|     |   pea 180fe <PutChar+0x550>
    3950:	|     |   jsr 1710c <KPrintF>
    3956:	|     |   addq.l #4,sp
    return FALSE;  
    3958:	|     |   clr.w d0
    395a:	+-----|-- bra.w 3ae2 <CstReserveBackdrop+0x3e0>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    395e:	|     '-> pea 18138 <PutChar+0x58a>
    3964:	|         jsr 1710c <KPrintF>
    396a:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    396c:	|         move.l 1c738 <CstDrawBuffer>,d1
    3972:	|         move.l 88(sp),d0
    3976:	|     ,-- bpl.s 397a <CstReserveBackdrop+0x278>
    3978:	|     |   addq.l #3,d0
    397a:	|     '-> asr.l #2,d0
    397c:	|         add.l d0,d0
    397e:	|         add.l d0,d0
    3980:	|         add.l d1,d0
    3982:	|         move.l d0,1c738 <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    3988:	|         move.l 1c734 <CstViewBuffer>,d1
    398e:	|         move.l 88(sp),d0
    3992:	|     ,-- bpl.s 3996 <CstReserveBackdrop+0x294>
    3994:	|     |   addq.l #3,d0
    3996:	|     '-> asr.l #2,d0
    3998:	|         add.l d0,d0
    399a:	|         add.l d0,d0
    399c:	|         add.l d1,d0
    399e:	|         move.l d0,1c734 <CstViewBuffer>
  
  CstZBufferResult = AllocVec( CSTMAXWIDTHSPRITE/8*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    39a4:	|         move.l #5200,24(sp)
    39ac:	|         moveq #2,d0
    39ae:	|         move.l d0,20(sp)
    39b2:	|         move.l 1c810 <SysBase>,d0
    39b8:	|         movea.l d0,a6
    39ba:	|         move.l 24(sp),d0
    39be:	|         move.l 20(sp),d1
    39c2:	|         jsr -684(a6)
    39c6:	|         move.l d0,16(sp)
    39ca:	|         move.l 16(sp),d0
    39ce:	|         move.l d0,1c758 <CstZBufferResult>
  CstZBufferWork = AllocVec( (CSTMAXWIDTHSPRITE/8+2)*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    39d4:	|         move.l #5600,12(sp)
    39dc:	|         moveq #2,d1
    39de:	|         move.l d1,8(sp)
    39e2:	|         move.l 1c810 <SysBase>,d0
    39e8:	|         movea.l d0,a6
    39ea:	|         move.l 12(sp),d0
    39ee:	|         move.l 8(sp),d1
    39f2:	|         jsr -684(a6)
    39f6:	|         move.l d0,4(sp)
    39fa:	|         move.l 4(sp),d0
    39fe:	|         move.l d0,1c75c <CstZBufferWork>

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    3a04:	|         move.l 1c726 <CstBackDrop>,d0
    3a0a:	|         clr.l -(sp)
    3a0c:	|         pea 5 <_start+0x5>
    3a10:	|         pea 100 <copyString+0x48>
    3a14:	|         pea 140 <decodeFilename+0x28>
    3a18:	|         pea 18160 <PutChar+0x5b2>
    3a1e:	|         move.l d0,-(sp)
    3a20:	|         jsr 171f4 <debug_register_bitmap>
    3a26:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    3a2a:	|         move.l 92(sp),d0
    3a2e:	|         movea.w d0,a1
    3a30:	|         move.l 88(sp),d0
    3a34:	|         lsl.w #3,d0
    3a36:	|         movea.w d0,a0
    3a38:	|         move.l 1c738 <CstDrawBuffer>,d0
    3a3e:	|         clr.l -(sp)
    3a40:	|         pea 5 <_start+0x5>
    3a44:	|         move.l a1,-(sp)
    3a46:	|         move.l a0,-(sp)
    3a48:	|         pea 18170 <PutChar+0x5c2>
    3a4e:	|         move.l d0,-(sp)
    3a50:	|         jsr 171f4 <debug_register_bitmap>
    3a56:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    3a5a:	|         move.l 92(sp),d0
    3a5e:	|         movea.w d0,a1
    3a60:	|         move.l 88(sp),d0
    3a64:	|         lsl.w #3,d0
    3a66:	|         movea.w d0,a0
    3a68:	|         move.l 1c734 <CstViewBuffer>,d0
    3a6e:	|         clr.l -(sp)
    3a70:	|         pea 5 <_start+0x5>
    3a74:	|         move.l a1,-(sp)
    3a76:	|         move.l a0,-(sp)
    3a78:	|         pea 1817f <PutChar+0x5d1>
    3a7e:	|         move.l d0,-(sp)
    3a80:	|         jsr 171f4 <debug_register_bitmap>
    3a86:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    3a8a:	|         move.l 1c72e <CstCopperList>,d0
    3a90:	|     ,-- beq.s 3aa2 <CstReserveBackdrop+0x3a0>
    3a92:	|     |   move.l 1c738 <CstDrawBuffer>,d0
    3a98:	|     +-- beq.s 3aa2 <CstReserveBackdrop+0x3a0>
    3a9a:	|     |   move.l 1c734 <CstViewBuffer>,d0
    3aa0:	|  ,--|-- bne.s 3ab4 <CstReserveBackdrop+0x3b2>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3aa2:	|  |  '-> pea 1818e <PutChar+0x5e0>
    3aa8:	|  |      jsr 1710c <KPrintF>
    3aae:	|  |      addq.l #4,sp
    return FALSE;
    3ab0:	|  |      clr.w d0
    3ab2:	+--|----- bra.s 3ae2 <CstReserveBackdrop+0x3e0>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    3ab4:	|  '----> pea 181bb <PutChar+0x60d>
    3aba:	|         jsr 1710c <KPrintF>
    3ac0:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    3ac2:	|         move.l 1c72e <CstCopperList>,d0
    3ac8:	|         move.l d0,-(sp)
    3aca:	|         jsr 35b6 <CstSetCl>
    3ad0:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    3ad2:	|         pea 181e2 <PutChar+0x634>
    3ad8:	|         jsr 1710c <KPrintF>
    3ade:	|         addq.l #4,sp
  return TRUE;
    3ae0:	|         moveq #1,d0

}
    3ae2:	'-------> movea.l (sp)+,a6
    3ae4:	          lea 80(sp),sp
    3ae8:	          rts

00003aea <CstUnfreeze>:

void CstUnfreeze() {
    3aea:	       lea -24(sp),sp
    3aee:	       move.l a6,-(sp)
    3af0:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    3af2:	       pea 18205 <PutChar+0x657>
    3af8:	       jsr 1710c <KPrintF>
    3afe:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    3b00:	       move.l 1c764 <winWidth>,d0
    3b06:	       lsr.l #3,d0
    3b08:	       move.l d0,d1
    3b0a:	       move.l 1c768 <winHeight>,d0
    3b10:	       move.l d0,d0
    3b12:	       muls.w d0,d1
    3b14:	       move.w d1,d0
    3b16:	       add.w d0,d0
    3b18:	       add.w d0,d0
    3b1a:	       move.w d0,d2
    3b1c:	       add.w d1,d2
    3b1e:	       move.w d2,18(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3b22:	       move.l #14675968,14(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    3b2a:	       move.l 1c768 <winHeight>,d0
    3b30:	       move.l d0,d0
    3b32:	       movea.w d0,a1
    3b34:	       move.l 1c764 <winWidth>,d0
    3b3a:	       move.l d0,d0
    3b3c:	       movea.w d0,a0
    3b3e:	       move.l 1c72a <CstBackDropBackup>,d0
    3b44:	       clr.l -(sp)
    3b46:	       pea 5 <_start+0x5>
    3b4a:	       move.l a1,-(sp)
    3b4c:	       move.l a0,-(sp)
    3b4e:	       pea 17dd7 <PutChar+0x229>
    3b54:	       move.l d0,-(sp)
    3b56:	       jsr 171f4 <debug_register_bitmap>
    3b5c:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    3b60:	       move.l 1c72a <CstBackDropBackup>,28(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    3b68:	       move.l 1c726 <CstBackDrop>,24(sp)
  for(int i=0;i<size/4;i++) 
    3b70:	       clr.l 20(sp)
    3b74:	   ,-- bra.s 3b9a <CstUnfreeze+0xb0>
  {
    *dst++ = *src++;
    3b76:	,--|-> move.l 28(sp),d1
    3b7a:	|  |   move.l d1,d0
    3b7c:	|  |   addq.l #4,d0
    3b7e:	|  |   move.l d0,28(sp)
    3b82:	|  |   move.l 24(sp),d0
    3b86:	|  |   move.l d0,d2
    3b88:	|  |   addq.l #4,d2
    3b8a:	|  |   move.l d2,24(sp)
    3b8e:	|  |   movea.l d1,a0
    3b90:	|  |   move.l (a0),d1
    3b92:	|  |   movea.l d0,a0
    3b94:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    3b96:	|  |   addq.l #1,20(sp)
    3b9a:	|  '-> move.w 18(sp),d0
    3b9e:	|      lsr.w #2,d0
    3ba0:	|      move.w d0,d0
    3ba2:	|      andi.l #65535,d0
    3ba8:	|      cmp.l 20(sp),d0
    3bac:	'----- bgt.s 3b76 <CstUnfreeze+0x8c>
  }

  CstApplyBackDropCounter = 2;
    3bae:	       move.w #2,1c732 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    3bb6:	       move.l 1c764 <winWidth>,d0
    3bbc:	       lsr.l #4,d0
    3bbe:	       movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    3bc4:	       move.l a0,d1
    3bc6:	       addq.l #2,d1
    3bc8:	       move.l d1,1c748 <CstBackDropBufferApplyCursor>
    3bce:	       move.l d0,d0
    3bd0:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    3bd2:	       move.l 1c768 <winHeight>,d0
    3bd8:	       movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    3bde:	       move.l a0,d1
    3be0:	       addq.l #2,d1
    3be2:	       move.l d1,1c748 <CstBackDropBufferApplyCursor>
    3be8:	       move.l d0,d0
    3bea:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3bec:	       movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    3bf2:	       move.l a0,d0
    3bf4:	       addq.l #2,d0
    3bf6:	       move.l d0,1c748 <CstBackDropBufferApplyCursor>
    3bfc:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3bfe:	       movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    3c04:	       move.l a0,d0
    3c06:	       addq.l #2,d0
    3c08:	       move.l d0,1c748 <CstBackDropBufferApplyCursor>
    3c0e:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3c10:	       movea.l 1c748 <CstBackDropBufferApplyCursor>,a0
    3c16:	       move.l a0,d0
    3c18:	       addq.l #2,d0
    3c1a:	       move.l d0,1c748 <CstBackDropBufferApplyCursor>
    3c20:	       clr.w (a0)
  
  if( CstBackDropBackup) {
    3c22:	       move.l 1c72a <CstBackDropBackup>,d0
    3c28:	   ,-- beq.s 3c50 <CstUnfreeze+0x166>
    KPrintF("CstUnfreeze: Free CstBackdropBackup");
    3c2a:	   |   pea 18230 <PutChar+0x682>
    3c30:	   |   jsr 1710c <KPrintF>
    3c36:	   |   addq.l #4,sp
    FreeVec( CstBackDropBackup);
    3c38:	   |   move.l 1c72a <CstBackDropBackup>,10(sp)
    3c40:	   |   move.l 1c810 <SysBase>,d0
    3c46:	   |   movea.l d0,a6
    3c48:	   |   movea.l 10(sp),a1
    3c4c:	   |   jsr -690(a6)
  }

  KPrintF("CstUnfreeze: Finished");
    3c50:	   '-> pea 18254 <PutChar+0x6a6>
    3c56:	       jsr 1710c <KPrintF>
    3c5c:	       addq.l #4,sp

}
    3c5e:	       nop
    3c60:	       move.l (sp)+,d2
    3c62:	       movea.l (sp)+,a6
    3c64:	       lea 24(sp),sp
    3c68:	       rts

00003c6a <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    3c6a:	       lea -28(sp),sp
    3c6e:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    3c72:	       move.l 52(sp),-(sp)
    3c76:	       jsr 15732 <stringWidth>
    3c7c:	       addq.l #4,sp
    3c7e:	       asr.l #1,d0
    3c80:	       move.l d0,-(sp)
    3c82:	       jsr 1753e <__floatsisf>
    3c88:	       addq.l #4,sp
    3c8a:	       move.l d0,d1
    3c8c:	       move.l 1c1a2 <cameraZoom>,d0
    3c92:	       move.l d0,-(sp)
    3c94:	       move.l d1,-(sp)
    3c96:	       jsr 173f4 <__divsf3>
    3c9c:	       addq.l #8,sp
    3c9e:	       move.l d0,-(sp)
    3ca0:	       jsr 174d6 <__fixsfsi>
    3ca6:	       addq.l #4,sp
    3ca8:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    3cac:	       move.l 56(sp),d0
    3cb0:	       sub.l 44(sp),d0
    3cb4:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    3cb8:	       move.l 56(sp),d0
    3cbc:	       add.l 44(sp),d0
    3cc0:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    3cc4:	       moveq #12,d0
    3cc6:	       move.l d0,32(sp)
    3cca:	       clr.l 28(sp)
    3cce:	       move.l 1c810 <SysBase>,d0
    3cd4:	       movea.l d0,a6
    3cd6:	       move.l 32(sp),d0
    3cda:	       move.l 28(sp),d1
    3cde:	       jsr -684(a6)
    3ce2:	       move.l d0,24(sp)
    3ce6:	       move.l 24(sp),d0
    3cea:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    3cee:	       movea.l 1c760 <speech>,a0
    3cf4:	       move.l 4(a0),d0
    3cf8:	       movea.l 20(sp),a0
    3cfc:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    3d00:	       move.l 52(sp),-(sp)
    3d04:	       jsr b8 <copyString>
    3d0a:	       addq.l #4,sp
    3d0c:	       movea.l 20(sp),a0
    3d10:	       move.l d0,(a0)
	newLine -> x = xx1;
    3d12:	       movea.l 20(sp),a0
    3d16:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    3d1c:	       movea.l 1c760 <speech>,a0
    3d22:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    3d28:	       moveq #4,d0
    3d2a:	       cmp.l 40(sp),d0
    3d2e:	   ,-- blt.s 3d50 <addSpeechLine+0xe6>
    3d30:	   |   movea.l 60(sp),a0
    3d34:	   |   move.l (a0),d1
    3d36:	   |   moveq #5,d0
    3d38:	   |   sub.l 40(sp),d0
    3d3c:	   |   cmp.l d1,d0
    3d3e:	   +-- ble.s 3d50 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    3d40:	   |   moveq #5,d0
    3d42:	   |   sub.l 40(sp),d0
    3d46:	   |   movea.l 60(sp),a0
    3d4a:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    3d4c:	,--|-- bra.w 3e7c <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    3d50:	|  '-> move.l 36(sp),-(sp)
    3d54:	|      jsr 1753e <__floatsisf>
    3d5a:	|      addq.l #4,sp
    3d5c:	|      move.l d0,d2
    3d5e:	|      move.l 1c764 <winWidth>,d0
    3d64:	|      move.l d0,-(sp)
    3d66:	|      jsr 17566 <__floatunsisf>
    3d6c:	|      addq.l #4,sp
    3d6e:	|      move.l d0,d1
    3d70:	|      move.l 1c1a2 <cameraZoom>,d0
    3d76:	|      move.l d0,-(sp)
    3d78:	|      move.l d1,-(sp)
    3d7a:	|      jsr 173f4 <__divsf3>
    3d80:	|      addq.l #8,sp
    3d82:	|      move.l #1084227584,-(sp)
    3d88:	|      move.l d0,-(sp)
    3d8a:	|      jsr 17832 <__subsf3>
    3d90:	|      addq.l #8,sp
    3d92:	|      move.l d0,-(sp)
    3d94:	|      move.l d2,-(sp)
    3d96:	|      jsr 17626 <__gesf2>
    3d9c:	|      addq.l #8,sp
    3d9e:	|      tst.l d0
    3da0:	|  ,-- bge.s 3da6 <addSpeechLine+0x13c>
}
    3da2:	+--|-- bra.w 3e7c <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    3da6:	|  '-> movea.l 60(sp),a0
    3daa:	|      move.l (a0),d0
    3dac:	|      move.l d0,-(sp)
    3dae:	|      jsr 1753e <__floatsisf>
    3db4:	|      addq.l #4,sp
    3db6:	|      move.l d0,-(sp)
    3db8:	|      jsr 17460 <__extendsfdf2>
    3dbe:	|      addq.l #4,sp
    3dc0:	|      move.l d0,d4
    3dc2:	|      move.l d1,d5
    3dc4:	|      move.l 1c764 <winWidth>,d0
    3dca:	|      move.l d0,-(sp)
    3dcc:	|      jsr 17566 <__floatunsisf>
    3dd2:	|      addq.l #4,sp
    3dd4:	|      move.l d0,d1
    3dd6:	|      move.l 1c1a2 <cameraZoom>,d0
    3ddc:	|      move.l d0,-(sp)
    3dde:	|      move.l d1,-(sp)
    3de0:	|      jsr 173f4 <__divsf3>
    3de6:	|      addq.l #8,sp
    3de8:	|      move.l d0,-(sp)
    3dea:	|      jsr 17460 <__extendsfdf2>
    3df0:	|      addq.l #4,sp
    3df2:	|      clr.l -(sp)
    3df4:	|      move.l #1075052544,-(sp)
    3dfa:	|      move.l d1,-(sp)
    3dfc:	|      move.l d0,-(sp)
    3dfe:	|      jsr 177d0 <__subdf3>
    3e04:	|      lea 16(sp),sp
    3e08:	|      move.l d0,d2
    3e0a:	|      move.l d1,d3
    3e0c:	|      move.l 36(sp),-(sp)
    3e10:	|      jsr 174fe <__floatsidf>
    3e16:	|      addq.l #4,sp
    3e18:	|      move.l d1,-(sp)
    3e1a:	|      move.l d0,-(sp)
    3e1c:	|      move.l d3,-(sp)
    3e1e:	|      move.l d2,-(sp)
    3e20:	|      jsr 177d0 <__subdf3>
    3e26:	|      lea 16(sp),sp
    3e2a:	|      move.l d1,-(sp)
    3e2c:	|      move.l d0,-(sp)
    3e2e:	|      move.l d5,-(sp)
    3e30:	|      move.l d4,-(sp)
    3e32:	|      jsr 1765c <__gtdf2>
    3e38:	|      lea 16(sp),sp
    3e3c:	|      tst.l d0
    3e3e:	|  ,-- bgt.s 3e42 <addSpeechLine+0x1d8>
}
    3e40:	+--|-- bra.s 3e7c <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    3e42:	|  '-> move.l 1c764 <winWidth>,d0
    3e48:	|      move.l d0,-(sp)
    3e4a:	|      jsr 17566 <__floatunsisf>
    3e50:	|      addq.l #4,sp
    3e52:	|      move.l d0,d1
    3e54:	|      move.l 1c1a2 <cameraZoom>,d0
    3e5a:	|      move.l d0,-(sp)
    3e5c:	|      move.l d1,-(sp)
    3e5e:	|      jsr 173f4 <__divsf3>
    3e64:	|      addq.l #8,sp
    3e66:	|      move.l d0,-(sp)
    3e68:	|      jsr 174d6 <__fixsfsi>
    3e6e:	|      addq.l #4,sp
    3e70:	|      subq.l #5,d0
    3e72:	|      sub.l 36(sp),d0
    3e76:	|      movea.l 60(sp),a0
    3e7a:	|      move.l d0,(a0)
}
    3e7c:	'----> nop
    3e7e:	       movem.l (sp)+,d2-d5/a6
    3e82:	       lea 28(sp),sp
    3e86:	       rts

00003e88 <initSpeech>:


void initSpeech () {
    3e88:	       lea -12(sp),sp
    3e8c:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    3e8e:	       moveq #20,d0
    3e90:	       move.l d0,12(sp)
    3e94:	       clr.l 8(sp)
    3e98:	       move.l 1c810 <SysBase>,d0
    3e9e:	       movea.l d0,a6
    3ea0:	       move.l 12(sp),d0
    3ea4:	       move.l 8(sp),d1
    3ea8:	       jsr -684(a6)
    3eac:	       move.l d0,4(sp)
    3eb0:	       move.l 4(sp),d0
    3eb4:	       move.l d0,1c760 <speech>
	if (speech) {
    3eba:	       move.l 1c760 <speech>,d0
    3ec0:	,----- beq.s 3eec <initSpeech+0x64>
		speech -> currentTalker = NULL;
    3ec2:	|      movea.l 1c760 <speech>,a0
    3ec8:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    3eca:	|      movea.l 1c760 <speech>,a0
    3ed0:	|      clr.l 4(a0)
		speech -> speechY = 0;
    3ed4:	|      movea.l 1c760 <speech>,a0
    3eda:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    3ede:	|      movea.l 1c760 <speech>,a0
    3ee4:	|      moveq #-1,d0
    3ee6:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    3eea:	|  ,-- bra.s 3efa <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    3eec:	'--|-> pea 1826a <PutChar+0x6bc>
    3ef2:	   |   jsr 1710c <KPrintF>
    3ef8:	   |   addq.l #4,sp
}
    3efa:	   '-> nop
    3efc:	       movea.l (sp)+,a6
    3efe:	       lea 12(sp),sp
    3f02:	       rts

00003f04 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    3f04:	       movea.l 1c760 <speech>,a0
    3f0a:	       move.l 4(a0),d0
    3f0e:	,----- beq.s 3f1c <isThereAnySpeechGoingOn+0x18>
    3f10:	|      movea.l 1c760 <speech>,a0
    3f16:	|      move.l 16(a0),d0
    3f1a:	|  ,-- bra.s 3f1e <isThereAnySpeechGoingOn+0x1a>
    3f1c:	'--|-> moveq #-1,d0
}
    3f1e:	   '-> rts

00003f20 <killAllSpeech>:

void killAllSpeech () {
    3f20:	       lea -12(sp),sp
    3f24:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    3f26:	       movea.l 1c760 <speech>,a0
    3f2c:	       move.l 12(a0),d0
    3f30:	       moveq #-1,d1
    3f32:	       cmp.l d0,d1
    3f34:	   ,-- beq.s 3f42 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    3f36:	   |   movea.l 1c760 <speech>,a0
    3f3c:	   |   moveq #-1,d0
    3f3e:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    3f42:	   '-> movea.l 1c760 <speech>,a0
    3f48:	       move.l (a0),d0
    3f4a:	,----- beq.w 3fd6 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    3f4e:	|      movea.l 1c760 <speech>,a0
    3f54:	|      move.l (a0),d1
    3f56:	|      lea -132(sp),sp
    3f5a:	|      move.l sp,d0
    3f5c:	|      movea.w #132,a0
    3f60:	|      move.l a0,-(sp)
    3f62:	|      move.l d1,-(sp)
    3f64:	|      move.l d0,-(sp)
    3f66:	|      jsr 170c0 <memcpy>
    3f6c:	|      lea 12(sp),sp
    3f70:	|      jsr a9b8 <makeSilent>
    3f76:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    3f7a:	|      movea.l 1c760 <speech>,a0
    3f80:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    3f82:	+----- bra.s 3fd6 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    3f84:	|  ,-> movea.l 1c760 <speech>,a0
    3f8a:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    3f90:	|  |   movea.l 1c760 <speech>,a0
    3f96:	|  |   movea.l 4(a0),a1
    3f9a:	|  |   movea.l 1c760 <speech>,a0
    3fa0:	|  |   move.l 4(a1),d0
    3fa4:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    3fa8:	|  |   movea.l 12(sp),a0
    3fac:	|  |   move.l (a0),8(sp)
    3fb0:	|  |   move.l 1c810 <SysBase>,d0
    3fb6:	|  |   movea.l d0,a6
    3fb8:	|  |   movea.l 8(sp),a1
    3fbc:	|  |   jsr -690(a6)
		FreeVec(killMe);
    3fc0:	|  |   move.l 12(sp),4(sp)
    3fc6:	|  |   move.l 1c810 <SysBase>,d0
    3fcc:	|  |   movea.l d0,a6
    3fce:	|  |   movea.l 4(sp),a1
    3fd2:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    3fd6:	'--|-> movea.l 1c760 <speech>,a0
    3fdc:	   |   move.l 4(a0),d0
    3fe0:	   '-- bne.s 3f84 <killAllSpeech+0x64>
	}
}
    3fe2:	       nop
    3fe4:	       nop
    3fe6:	       movea.l (sp)+,a6
    3fe8:	       lea 12(sp),sp
    3fec:	       rts

00003fee <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    3fee:	pea 2 <_start+0x2>
    3ff2:	move.l 8(sp),-(sp)
    3ff6:	jsr 414e <setFrames>
    3ffc:	addq.l #8,sp
}
    3ffe:	nop
    4000:	rts

00004002 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    4002:	       lea -52(sp),sp
    4006:	       move.l a6,-(sp)
    4008:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    400a:	       movea.l 64(sp),a0
    400e:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    4014:	       move.l 1c17a <speechSpeed>,d0
    401a:	       move.l 68(sp),-(sp)
    401e:	       move.l d0,-(sp)
    4020:	       jsr a46 <putFloat>
    4026:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    4028:	       movea.l 64(sp),a0
    402c:	       move.l 8(a0),d0
    4030:	       move.l 68(sp),-(sp)
    4034:	       move.l d0,-(sp)
    4036:	       jsr 8d0 <put2bytes>
    403c:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    403e:	       movea.l 64(sp),a0
    4042:	       move.l 16(a0),d0
    4046:	       move.l 68(sp),-(sp)
    404a:	       move.l d0,-(sp)
    404c:	       jsr 8d0 <put2bytes>
    4052:	       addq.l #8,sp
		if (sS -> currentTalker) {
    4054:	       movea.l 64(sp),a0
    4058:	       move.l (a0),d0
    405a:	   ,-- beq.s 409e <saveSpeech+0x9c>
			FPutC (fp, 1);
    405c:	   |   move.l 68(sp),40(sp)
    4062:	   |   moveq #1,d0
    4064:	   |   move.l d0,36(sp)
    4068:	   |   move.l 1c818 <DOSBase>,d0
    406e:	   |   movea.l d0,a6
    4070:	   |   move.l 40(sp),d1
    4074:	   |   move.l 36(sp),d2
    4078:	   |   jsr -312(a6)
    407c:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    4080:	   |   movea.l 64(sp),a0
    4084:	   |   movea.l (a0),a0
    4086:	   |   movea.l 114(a0),a0
    408a:	   |   move.l 4(a0),d0
    408e:	   |   move.l 68(sp),-(sp)
    4092:	   |   move.l d0,-(sp)
    4094:	   |   jsr 8d0 <put2bytes>
    409a:	   |   addq.l #8,sp
    409c:	,--|-- bra.s 411a <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    409e:	|  '-> move.l 68(sp),52(sp)
    40a4:	|      clr.l 48(sp)
    40a8:	|      move.l 1c818 <DOSBase>,d0
    40ae:	|      movea.l d0,a6
    40b0:	|      move.l 52(sp),d1
    40b4:	|      move.l 48(sp),d2
    40b8:	|      jsr -312(a6)
    40bc:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    40c0:	+----- bra.s 411a <saveSpeech+0x118>
			FPutC (fp, 1);
    40c2:	|  ,-> move.l 68(sp),16(sp)
    40c8:	|  |   moveq #1,d0
    40ca:	|  |   move.l d0,12(sp)
    40ce:	|  |   move.l 1c818 <DOSBase>,d0
    40d4:	|  |   movea.l d0,a6
    40d6:	|  |   move.l 16(sp),d1
    40da:	|  |   move.l 12(sp),d2
    40de:	|  |   jsr -312(a6)
    40e2:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    40e6:	|  |   movea.l 56(sp),a0
    40ea:	|  |   move.l (a0),d0
    40ec:	|  |   move.l 68(sp),-(sp)
    40f0:	|  |   move.l d0,-(sp)
    40f2:	|  |   jsr bd8 <writeString>
    40f8:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    40fa:	|  |   movea.l 56(sp),a0
    40fe:	|  |   move.l 8(a0),d0
    4102:	|  |   move.l 68(sp),-(sp)
    4106:	|  |   move.l d0,-(sp)
    4108:	|  |   jsr 8d0 <put2bytes>
    410e:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    4110:	|  |   movea.l 56(sp),a0
    4114:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    411a:	'--|-> tst.l 56(sp)
    411e:	   '-- bne.s 40c2 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    4120:	       move.l 68(sp),28(sp)
    4126:	       clr.l 24(sp)
    412a:	       move.l 1c818 <DOSBase>,d0
    4130:	       movea.l d0,a6
    4132:	       move.l 28(sp),d1
    4136:	       move.l 24(sp),d2
    413a:	       jsr -312(a6)
    413e:	       move.l d0,20(sp)
}
    4142:	       nop
    4144:	       move.l (sp)+,d2
    4146:	       movea.l (sp)+,a6
    4148:	       lea 52(sp),sp
    414c:	       rts

0000414e <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    414e:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    4150:	movea.l 8(sp),a0
    4154:	movea.l 80(a0),a0
    4158:	move.l (a0),d2
    415a:	movea.l 8(sp),a0
    415e:	movea.l 80(a0),a0
    4162:	move.l 4(a0),d0
    4166:	move.l 12(sp),-(sp)
    416a:	move.l d0,-(sp)
    416c:	jsr 17a98 <__mulsi3>
    4172:	addq.l #8,sp
    4174:	move.l d0,d1
    4176:	movea.l 8(sp),a0
    417a:	move.l 106(a0),d0
    417e:	add.l d1,d0
    4180:	add.l d0,d0
    4182:	add.l d0,d0
    4184:	movea.l d2,a0
    4186:	adda.l d0,a0
    4188:	move.l (a0),d0
    418a:	movea.l 8(sp),a0
    418e:	move.l d0,72(a0)
}
    4192:	nop
    4194:	move.l (sp)+,d2
    4196:	rts

00004198 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    4198:	       lea -20(sp),sp
    419c:	       move.l d2,-(sp)
    419e:	       move.l 40(sp),d0
    41a2:	       move.w d0,d0
    41a4:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    41a8:	       movea.l 1c760 <speech>,a0
    41ae:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    41b4:	       move.l 32(sp),-(sp)
    41b8:	       jsr a4a2 <findPerson>
    41be:	       addq.l #4,sp
    41c0:	       move.l d0,16(sp)
    if (thisPerson) {
    41c4:	   ,-- beq.s 41ea <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    41c6:	   |   movea.w 6(sp),a0
    41ca:	   |   move.l a0,-(sp)
    41cc:	   |   move.l 40(sp),-(sp)
    41d0:	   |   move.l 24(sp),-(sp)
    41d4:	   |   move.l 40(sp),-(sp)
    41d8:	   |   jsr 42b0 <wrapSpeechPerson>
    41de:	   |   lea 16(sp),sp
    41e2:	   |   move.l d0,20(sp)
    41e6:	,--|-- bra.w 42a4 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    41ea:	|  '-> move.l 32(sp),-(sp)
    41ee:	|      jsr 1590a <getRegionForObject>
    41f4:	|      addq.l #4,sp
    41f6:	|      move.l d0,12(sp)
        if (thisRegion) {
    41fa:	|  ,-- beq.s 4266 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    41fc:	|  |   movea.l 12(sp),a0
    4200:	|  |   movea.l 28(a0),a0
    4204:	|  |   move.l 28(a0),d0
    4208:	|  |   movea.l 12(sp),a0
    420c:	|  |   movea.l 4(a0),a1
    4210:	|  |   movea.l 12(sp),a0
    4214:	|  |   movea.l 28(a0),a0
    4218:	|  |   move.l 20(a0),d1
    421c:	|  |   movea.l a1,a0
    421e:	|  |   suba.l d1,a0
    4220:	|  |   move.l 1c8ca <cameraY>,d1
    4226:	|  |   movea.l a0,a1
    4228:	|  |   suba.l d1,a1
    422a:	|  |   movea.l 12(sp),a0
    422e:	|  |   move.l (a0),d2
    4230:	|  |   movea.l 12(sp),a0
    4234:	|  |   move.l 8(a0),d1
    4238:	|  |   add.l d2,d1
    423a:	|  |   move.l d1,d2
    423c:	|  |   asr.l #1,d2
    423e:	|  |   move.l 1c8c6 <cameraX>,d1
    4244:	|  |   movea.l d2,a0
    4246:	|  |   suba.l d1,a0
    4248:	|  |   move.l 36(sp),-(sp)
    424c:	|  |   move.l d0,-(sp)
    424e:	|  |   move.l a1,-(sp)
    4250:	|  |   move.l a0,-(sp)
    4252:	|  |   move.l 44(sp),-(sp)
    4256:	|  |   jsr 43ce <wrapSpeechXY>
    425c:	|  |   lea 20(sp),sp
    4260:	|  |   move.l d0,20(sp)
    4264:	+--|-- bra.s 42a4 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    4266:	|  '-> move.l 32(sp),-(sp)
    426a:	|      jsr d3ae <findObjectType>
    4270:	|      addq.l #4,sp
    4272:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    4276:	|      movea.l 8(sp),a0
    427a:	|      move.l 28(a0),d1
    427e:	|      move.l 1c764 <winWidth>,d0
    4284:	|      lsr.l #1,d0
    4286:	|      move.l 36(sp),-(sp)
    428a:	|      move.l d1,-(sp)
    428c:	|      pea a <_start+0xa>
    4290:	|      move.l d0,-(sp)
    4292:	|      move.l 44(sp),-(sp)
    4296:	|      jsr 43ce <wrapSpeechXY>
    429c:	|      lea 20(sp),sp
    42a0:	|      move.l d0,20(sp)
        }
    }
    return i;
    42a4:	'----> move.l 20(sp),d0
}
    42a8:	       move.l (sp)+,d2
    42aa:	       lea 20(sp),sp
    42ae:	       rts

000042b0 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    42b0:	    subq.l #8,sp
    42b2:	    movem.l d2-d4,-(sp)
    42b6:	    move.l 36(sp),d0
    42ba:	    move.w d0,d0
    42bc:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    42c0:	    movea.l 28(sp),a0
    42c4:	    movea.l 114(a0),a0
    42c8:	    move.l 28(a0),d2
    42cc:	    movea.l 28(sp),a0
    42d0:	    move.l 4(a0),d3
    42d4:	    move.l 1c8ca <cameraY>,d0
    42da:	    move.l d0,-(sp)
    42dc:	    jsr 1753e <__floatsisf>
    42e2:	    addq.l #4,sp
    42e4:	    move.l d0,-(sp)
    42e6:	    move.l d3,-(sp)
    42e8:	    jsr 17832 <__subsf3>
    42ee:	    addq.l #8,sp
    42f0:	    move.l d0,d3
    42f2:	    movea.l 28(sp),a0
    42f6:	    move.l 32(a0),d4
    42fa:	    movea.l 28(sp),a0
    42fe:	    move.l 20(a0),d1
    4302:	    movea.l 28(sp),a0
    4306:	    move.l 24(a0),d0
    430a:	    sub.l d0,d1
    430c:	    move.l d1,-(sp)
    430e:	    jsr 1753e <__floatsisf>
    4314:	    addq.l #4,sp
    4316:	    move.l d0,-(sp)
    4318:	    move.l d4,-(sp)
    431a:	    jsr 175f0 <__mulsf3>
    4320:	    addq.l #8,sp
    4322:	    move.l d0,-(sp)
    4324:	    move.l d3,-(sp)
    4326:	    jsr 17832 <__subsf3>
    432c:	    addq.l #8,sp
    432e:	    move.l d0,d3
    4330:	    movea.l 28(sp),a0
    4334:	    movea.l 114(a0),a0
    4338:	    move.l 20(a0),d0
    433c:	    move.l d0,-(sp)
    433e:	    jsr 1753e <__floatsisf>
    4344:	    addq.l #4,sp
    4346:	    move.l d0,-(sp)
    4348:	    move.l d3,-(sp)
    434a:	    jsr 17832 <__subsf3>
    4350:	    addq.l #8,sp
    4352:	    move.l d0,-(sp)
    4354:	    jsr 174d6 <__fixsfsi>
    435a:	    addq.l #4,sp
    435c:	    move.l d0,d4
    435e:	    movea.l 28(sp),a0
    4362:	    move.l (a0),d3
    4364:	    move.l 1c8c6 <cameraX>,d0
    436a:	    move.l d0,-(sp)
    436c:	    jsr 1753e <__floatsisf>
    4372:	    addq.l #4,sp
    4374:	    move.l d0,-(sp)
    4376:	    move.l d3,-(sp)
    4378:	    jsr 17832 <__subsf3>
    437e:	    addq.l #8,sp
    4380:	    move.l d0,-(sp)
    4382:	    jsr 174d6 <__fixsfsi>
    4388:	    addq.l #4,sp
    438a:	    move.l 32(sp),-(sp)
    438e:	    move.l d2,-(sp)
    4390:	    move.l d4,-(sp)
    4392:	    move.l d0,-(sp)
    4394:	    move.l 40(sp),-(sp)
    4398:	    jsr 43ce <wrapSpeechXY>
    439e:	    lea 20(sp),sp
    43a2:	    move.l d0,16(sp)
	if (animPerson) {
    43a6:	    tst.w 14(sp)
    43aa:	,-- beq.s 43c2 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    43ac:	|   move.l 28(sp),-(sp)
    43b0:	|   jsr 3fee <makeTalker>
    43b6:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    43b8:	|   movea.l 1c760 <speech>,a0
    43be:	|   move.l 28(sp),(a0)
	}
	return i;
    43c2:	'-> move.l 16(sp),d0
}
    43c6:	    movem.l (sp)+,d2-d4
    43ca:	    addq.l #8,sp
    43cc:	    rts

000043ce <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    43ce:	                   lea -16(sp),sp
    43d2:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    43d6:	                   clr.l 16(sp)
    killAllSpeech();
    43da:	                   jsr 3f20 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    43e0:	                   move.l 36(sp),-(sp)
    43e4:	                   jsr 13b34 <strlen>
    43ea:	                   addq.l #4,sp
    43ec:	                   movea.l d0,a0
    43ee:	                   lea 20(a0),a0
    43f2:	                   move.l a0,-(sp)
    43f4:	                   jsr 17566 <__floatunsisf>
    43fa:	                   addq.l #4,sp
    43fc:	                   move.l d0,d1
    43fe:	                   move.l 1c17a <speechSpeed>,d0
    4404:	                   move.l d0,-(sp)
    4406:	                   move.l d1,-(sp)
    4408:	                   jsr 175f0 <__mulsf3>
    440e:	                   addq.l #8,sp
    4410:	                   move.l d0,-(sp)
    4412:	                   jsr 174d6 <__fixsfsi>
    4418:	                   addq.l #4,sp
    441a:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    441e:	               ,-- bgt.s 4426 <wrapSpeechXY+0x58>
    4420:	               |   moveq #1,d0
    4422:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    4426:	               '-> moveq #-1,d1
    4428:	                   cmp.l 52(sp),d1
    442c:	               ,-- beq.s 446c <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    442e:	               |   move.l 1c8da <speechMode>,d0
    4434:	               +-- ble.s 446c <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    4436:	               |   clr.l -(sp)
    4438:	               |   move.l 56(sp),-(sp)
    443c:	               |   jsr d06e <startSound>
    4442:	               |   addq.l #8,sp
    4444:	               |   tst.w d0
    4446:	               +-- beq.s 446c <wrapSpeechXY+0x9e>
                speechTime = -10;
    4448:	               |   moveq #-10,d0
    444a:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    444e:	               |   movea.l 1c760 <speech>,a0
    4454:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    445a:	               |   move.l 1c8da <speechMode>,d0
    4460:	               |   moveq #2,d1
    4462:	               |   cmp.l d0,d1
    4464:	               +-- bne.s 446c <wrapSpeechXY+0x9e>
    4466:	               |   moveq #-10,d0
    4468:	,--------------|-- bra.w 46f2 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    446c:	|              '-> movea.l 1c760 <speech>,a0
    4472:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    4478:	|     ,----------- bra.w 452c <wrapSpeechXY+0x15e>
        a = wrap;
    447c:	|  ,--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    4482:	|  |  |        ,-- bra.s 4492 <wrapSpeechXY+0xc4>
            a--;
    4484:	|  |  |  ,-----|-> subq.l #1,28(sp)
            if (a == 0) {
    4488:	|  |  |  |     +-- bne.s 4492 <wrapSpeechXY+0xc4>
                a = wrap;
    448a:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    4490:	|  |  |  |  ,--|-- bra.s 44a4 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    4492:	|  |  |  |  |  '-> move.l 28(sp),d0
    4496:	|  |  |  |  |      movea.l 36(sp),a0
    449a:	|  |  |  |  |      adda.l d0,a0
    449c:	|  |  |  |  |      move.b (a0),d0
    449e:	|  |  |  |  |      cmpi.b #32,d0
    44a2:	|  |  |  '--|----- bne.s 4484 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    44a4:	|  |  |     '----> move.l 28(sp),d0
    44a8:	|  |  |            movea.l 36(sp),a0
    44ac:	|  |  |            adda.l d0,a0
    44ae:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    44b0:	|  |  |            lea 16(sp),a0
    44b4:	|  |  |            move.l a0,-(sp)
    44b6:	|  |  |            move.l 44(sp),-(sp)
    44ba:	|  |  |            move.l 44(sp),-(sp)
    44be:	|  |  |            jsr 3c6a <addSpeechLine>
    44c4:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    44c8:	|  |  |            move.l 28(sp),d0
    44cc:	|  |  |            movea.l 36(sp),a0
    44d0:	|  |  |            adda.l d0,a0
    44d2:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    44d6:	|  |  |            move.l 28(sp),d0
    44da:	|  |  |            addq.l #1,d0
    44dc:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    44e0:	|  |  |            move.l 44(sp),-(sp)
    44e4:	|  |  |            jsr 1753e <__floatsisf>
    44ea:	|  |  |            addq.l #4,sp
    44ec:	|  |  |            move.l d0,d2
    44ee:	|  |  |            move.l 1c904 <fontHeight>,d0
    44f4:	|  |  |            move.l d0,-(sp)
    44f6:	|  |  |            jsr 1753e <__floatsisf>
    44fc:	|  |  |            addq.l #4,sp
    44fe:	|  |  |            move.l d0,d1
    4500:	|  |  |            move.l 1c1a2 <cameraZoom>,d0
    4506:	|  |  |            move.l d0,-(sp)
    4508:	|  |  |            move.l d1,-(sp)
    450a:	|  |  |            jsr 173f4 <__divsf3>
    4510:	|  |  |            addq.l #8,sp
    4512:	|  |  |            move.l d0,-(sp)
    4514:	|  |  |            move.l d2,-(sp)
    4516:	|  |  |            jsr 17832 <__subsf3>
    451c:	|  |  |            addq.l #8,sp
    451e:	|  |  |            move.l d0,-(sp)
    4520:	|  |  |            jsr 174d6 <__fixsfsi>
    4526:	|  |  |            addq.l #4,sp
    4528:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    452c:	|  |  '----------> move.l 36(sp),-(sp)
    4530:	|  |               jsr 13b34 <strlen>
    4536:	|  |               addq.l #4,sp
    4538:	|  |               move.l d0,d1
    453a:	|  |               move.l 48(sp),d0
    453e:	|  |               cmp.l d1,d0
    4540:	|  '-------------- bcs.w 447c <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    4544:	|                  lea 16(sp),a0
    4548:	|                  move.l a0,-(sp)
    454a:	|                  move.l 44(sp),-(sp)
    454e:	|                  move.l 44(sp),-(sp)
    4552:	|                  jsr 3c6a <addSpeechLine>
    4558:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    455c:	|                  move.l 44(sp),-(sp)
    4560:	|                  jsr 1753e <__floatsisf>
    4566:	|                  addq.l #4,sp
    4568:	|                  move.l d0,d2
    456a:	|                  move.l 1c904 <fontHeight>,d0
    4570:	|                  move.l d0,-(sp)
    4572:	|                  jsr 1753e <__floatsisf>
    4578:	|                  addq.l #4,sp
    457a:	|                  move.l d0,d1
    457c:	|                  move.l 1c1a2 <cameraZoom>,d0
    4582:	|                  move.l d0,-(sp)
    4584:	|                  move.l d1,-(sp)
    4586:	|                  jsr 173f4 <__divsf3>
    458c:	|                  addq.l #8,sp
    458e:	|                  move.l d0,-(sp)
    4590:	|                  move.l d2,-(sp)
    4592:	|                  jsr 17832 <__subsf3>
    4598:	|                  addq.l #8,sp
    459a:	|                  move.l d0,-(sp)
    459c:	|                  jsr 174d6 <__fixsfsi>
    45a2:	|                  addq.l #4,sp
    45a4:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    45a8:	|              ,-- bpl.s 45c6 <wrapSpeechXY+0x1f8>
    45aa:	|              |   movea.l 1c760 <speech>,a0
    45b0:	|              |   move.l 8(a0),d0
    45b4:	|              |   movea.l 1c760 <speech>,a0
    45ba:	|              |   sub.l 44(sp),d0
    45be:	|              |   move.l d0,8(a0)
    45c2:	|           ,--|-- bra.w 46b4 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    45c6:	|           |  '-> movea.l 1c760 <speech>,a0
    45cc:	|           |      move.l 8(a0),d0
    45d0:	|           |      move.l d0,-(sp)
    45d2:	|           |      jsr 1753e <__floatsisf>
    45d8:	|           |      addq.l #4,sp
    45da:	|           |      move.l d0,d2
    45dc:	|           |      move.l 1c8ca <cameraY>,d0
    45e2:	|           |      move.l d0,-(sp)
    45e4:	|           |      jsr 1753e <__floatsisf>
    45ea:	|           |      addq.l #4,sp
    45ec:	|           |      move.l d0,d3
    45ee:	|           |      move.l 1c768 <winHeight>,d4
    45f4:	|           |      move.l 1c904 <fontHeight>,d0
    45fa:	|           |      pea 3 <_start+0x3>
    45fe:	|           |      move.l d0,-(sp)
    4600:	|           |      jsr 17b16 <__divsi3>
    4606:	|           |      addq.l #8,sp
    4608:	|           |      move.l d4,d1
    460a:	|           |      sub.l d0,d1
    460c:	|           |      move.l d1,-(sp)
    460e:	|           |      jsr 17566 <__floatunsisf>
    4614:	|           |      addq.l #4,sp
    4616:	|           |      move.l d0,d1
    4618:	|           |      move.l 1c1a2 <cameraZoom>,d0
    461e:	|           |      move.l d0,-(sp)
    4620:	|           |      move.l d1,-(sp)
    4622:	|           |      jsr 173f4 <__divsf3>
    4628:	|           |      addq.l #8,sp
    462a:	|           |      move.l d0,-(sp)
    462c:	|           |      move.l d3,-(sp)
    462e:	|           |      jsr 172fa <__addsf3>
    4634:	|           |      addq.l #8,sp
    4636:	|           |      move.l d0,-(sp)
    4638:	|           |      move.l d2,-(sp)
    463a:	|           |      jsr 176aa <__gtsf2>
    4640:	|           |      addq.l #8,sp
    4642:	|           |      tst.l d0
    4644:	|           +----- ble.s 46b4 <wrapSpeechXY+0x2e6>
    4646:	|           |      move.l 1c8ca <cameraY>,d0
    464c:	|           |      move.l d0,-(sp)
    464e:	|           |      jsr 1753e <__floatsisf>
    4654:	|           |      addq.l #4,sp
    4656:	|           |      move.l d0,d2
    4658:	|           |      move.l 1c768 <winHeight>,d3
    465e:	|           |      move.l 1c904 <fontHeight>,d0
    4664:	|           |      pea 3 <_start+0x3>
    4668:	|           |      move.l d0,-(sp)
    466a:	|           |      jsr 17b16 <__divsi3>
    4670:	|           |      addq.l #8,sp
    4672:	|           |      move.l d3,d1
    4674:	|           |      sub.l d0,d1
    4676:	|           |      move.l d1,-(sp)
    4678:	|           |      jsr 17566 <__floatunsisf>
    467e:	|           |      addq.l #4,sp
    4680:	|           |      move.l d0,d1
    4682:	|           |      move.l 1c1a2 <cameraZoom>,d0
    4688:	|           |      move.l d0,-(sp)
    468a:	|           |      move.l d1,-(sp)
    468c:	|           |      jsr 173f4 <__divsf3>
    4692:	|           |      addq.l #8,sp
    4694:	|           |      move.l d0,-(sp)
    4696:	|           |      move.l d2,-(sp)
    4698:	|           |      jsr 172fa <__addsf3>
    469e:	|           |      addq.l #8,sp
    46a0:	|           |      movea.l 1c760 <speech>,a2
    46a6:	|           |      move.l d0,-(sp)
    46a8:	|           |      jsr 174d6 <__fixsfsi>
    46ae:	|           |      addq.l #4,sp
    46b0:	|           |      move.l d0,8(a2)

    if (offset) {
    46b4:	|           '----> move.l 16(sp),d0
    46b8:	|        ,-------- beq.s 46ee <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    46ba:	|        |         movea.l 1c760 <speech>,a0
    46c0:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    46c6:	|        |     ,-- bra.s 46e8 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    46c8:	|        |  ,--|-> movea.l 20(sp),a0
    46cc:	|        |  |  |   move.l 8(a0),d1
    46d0:	|        |  |  |   move.l 16(sp),d0
    46d4:	|        |  |  |   add.l d1,d0
    46d6:	|        |  |  |   movea.l 20(sp),a0
    46da:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    46de:	|        |  |  |   movea.l 20(sp),a0
    46e2:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    46e8:	|        |  |  '-> tst.l 20(sp)
    46ec:	|        |  '----- bne.s 46c8 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    46ee:	|        '-------> move.l 24(sp),d0
}
    46f2:	'----------------> movem.l (sp)+,d2-d4/a2
    46f6:	                   lea 16(sp),sp
    46fa:	                   rts

000046fc <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    46fc:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    4700:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    4704:	       tst.l 24(sp)
    4708:	   ,-- bge.s 470e <drawLine+0x12>
    470a:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    470e:	   '-> tst.l 28(sp)
    4712:	   ,-- bge.s 4718 <drawLine+0x1c>
    4714:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    4718:	   '-> tst.l 32(sp)
    471c:	   ,-- bge.s 4722 <drawLine+0x26>
    471e:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    4722:	   '-> tst.l 36(sp)
    4726:	   ,-- bge.s 472c <drawLine+0x30>
    4728:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    472c:	   '-> move.l 1c8a8 <sceneWidth>,d0
    4732:	       cmp.l 24(sp),d0
    4736:	   ,-- bge.s 4746 <drawLine+0x4a>
    4738:	   |   move.l 1c8a8 <sceneWidth>,d0
    473e:	   |   move.l d0,d1
    4740:	   |   subq.l #1,d1
    4742:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    4746:	   '-> move.l 1c8a8 <sceneWidth>,d0
    474c:	       cmp.l 32(sp),d0
    4750:	   ,-- bge.s 4760 <drawLine+0x64>
    4752:	   |   move.l 1c8a8 <sceneWidth>,d0
    4758:	   |   move.l d0,d1
    475a:	   |   subq.l #1,d1
    475c:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    4760:	   '-> move.l 1c8ac <sceneHeight>,d0
    4766:	       cmp.l 28(sp),d0
    476a:	   ,-- bge.s 477a <drawLine+0x7e>
    476c:	   |   move.l 1c8ac <sceneHeight>,d0
    4772:	   |   move.l d0,d1
    4774:	   |   subq.l #1,d1
    4776:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    477a:	   '-> move.l 1c8ac <sceneHeight>,d0
    4780:	       cmp.l 36(sp),d0
    4784:	   ,-- bge.s 4794 <drawLine+0x98>
    4786:	   |   move.l 1c8ac <sceneHeight>,d0
    478c:	   |   move.l d0,d1
    478e:	   |   subq.l #1,d1
    4790:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    4794:	   '-> move.l 24(sp),d0
    4798:	       cmp.l 32(sp),d0
    479c:	,----- ble.s 47b8 <drawLine+0xbc>
		x = x2; 
    479e:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    47a4:	|      tst.w 10(sp)
    47a8:	|      seq d0
    47aa:	|      neg.b d0
    47ac:	|      move.b d0,d0
    47ae:	|      andi.w #255,d0
    47b2:	|      move.w d0,10(sp)
    47b6:	|  ,-- bra.s 47be <drawLine+0xc2>
	} else x = x1;
    47b8:	'--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    47be:	   '-> move.l 28(sp),d1
    47c2:	       cmp.l 36(sp),d1
    47c6:	,----- ble.s 47e2 <drawLine+0xe6>
		y = y2; 
    47c8:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    47ce:	|      tst.w 10(sp)
    47d2:	|      seq d0
    47d4:	|      neg.b d0
    47d6:	|      move.b d0,d0
    47d8:	|      andi.w #255,d0
    47dc:	|      move.w d0,10(sp)
    47e0:	|  ,-- bra.s 47e8 <drawLine+0xec>
	} else y = y1;	
    47e2:	'--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    47e8:	   '-> move.l 32(sp),d0
    47ec:	       sub.l 24(sp),d0
    47f0:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    47f4:	       move.l 6(sp),d0
    47f8:	   ,-- bpl.s 47fc <drawLine+0x100>
    47fa:	   |   neg.l d0
    47fc:	   '-> move.l d0,6(sp)
	int diffY = y2-y1;	
    4800:	       move.l 36(sp),d1
    4804:	       sub.l 28(sp),d1
    4808:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    480c:	       move.l 2(sp),d0
    4810:	   ,-- bpl.s 4814 <drawLine+0x118>
    4812:	   |   neg.l d0
    4814:	   '-> move.l d0,2(sp)
	
	if (! diffX) {
    4818:	       tst.l 6(sp)
    481c:	   ,-- bne.s 4840 <drawLine+0x144>
		diffX = 1;
    481e:	   |   moveq #1,d0
    4820:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    4824:	   |   move.l 1c8a8 <sceneWidth>,d0
    482a:	   |   subq.l #1,d0
    482c:	   |   cmp.l 16(sp),d0
    4830:	   +-- bne.s 4840 <drawLine+0x144>
    4832:	   |   move.l 1c8a8 <sceneWidth>,d0
    4838:	   |   move.l d0,d1
    483a:	   |   subq.l #2,d1
    483c:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    4840:	   '-> tst.l 2(sp)
    4844:	   ,-- bne.s 4868 <drawLine+0x16c>
		diffY = 1;
    4846:	   |   moveq #1,d0
    4848:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    484c:	   |   move.l 1c8ac <sceneHeight>,d0
    4852:	   |   subq.l #1,d0
    4854:	   |   cmp.l 12(sp),d0
    4858:	   +-- bne.s 4868 <drawLine+0x16c>
    485a:	   |   move.l 1c8ac <sceneHeight>,d0
    4860:	   |   move.l d0,d1
    4862:	   |   subq.l #2,d1
    4864:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    4868:	   '-> pea 182a7 <PutChar+0x6f9>
    486e:	       jsr 1710c <KPrintF>
    4874:	       addq.l #4,sp
	
}
    4876:	       nop
    4878:	       lea 20(sp),sp
    487c:	       rts

0000487e <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    487e:	                      lea -24(sp),sp
    4882:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    4884:	                      move.l 1c76c <firstTexture>,d0
    488a:	,-------------------- beq.w 4968 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    488e:	|                     clr.l 24(sp)
    4892:	|     ,-------------- bra.w 495c <deleteTextures+0xde>
			BOOL found = FALSE;
    4896:	|  ,--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    489a:	|  |  |               move.l 1c76c <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    48a2:	|  |  |               movea.l 20(sp),a0
    48a6:	|  |  |               move.l (a0),d1
    48a8:	|  |  |               move.l 24(sp),d0
    48ac:	|  |  |               add.l d0,d0
    48ae:	|  |  |               add.l d0,d0
    48b0:	|  |  |               movea.l 36(sp),a0
    48b4:	|  |  |               adda.l d0,a0
    48b6:	|  |  |               move.l (a0),d0
    48b8:	|  |  |               cmp.l d1,d0
    48ba:	|  |  |  ,----------- bne.w 494e <deleteTextures+0xd0>
				found = TRUE;
    48be:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    48c4:	|  |  |  |            movea.l 20(sp),a0
    48c8:	|  |  |  |            move.l 12(a0),d0
    48cc:	|  |  |  |            move.l d0,1c76c <firstTexture>
				FreeVec(list);
    48d2:	|  |  |  |            move.l 20(sp),6(sp)
    48d8:	|  |  |  |            move.l 1c810 <SysBase>,d0
    48de:	|  |  |  |            movea.l d0,a6
    48e0:	|  |  |  |            movea.l 6(sp),a1
    48e4:	|  |  |  |            jsr -690(a6)
				continue;
    48e8:	|  |  |  |  ,-------- bra.s 4958 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    48ea:	|  |  |  |  |  ,----> movea.l 20(sp),a0
    48ee:	|  |  |  |  |  |      movea.l 12(a0),a0
    48f2:	|  |  |  |  |  |      move.l (a0),d1
    48f4:	|  |  |  |  |  |      move.l 24(sp),d0
    48f8:	|  |  |  |  |  |      add.l d0,d0
    48fa:	|  |  |  |  |  |      add.l d0,d0
    48fc:	|  |  |  |  |  |      movea.l 36(sp),a0
    4900:	|  |  |  |  |  |      adda.l d0,a0
    4902:	|  |  |  |  |  |      move.l (a0),d0
    4904:	|  |  |  |  |  |      cmp.l d1,d0
    4906:	|  |  |  |  |  |  ,-- bne.s 4944 <deleteTextures+0xc6>
					found = TRUE;
    4908:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    490e:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4912:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    4918:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    491c:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    4920:	|  |  |  |  |  |  |   move.l 12(a0),d0
    4924:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4928:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    492c:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    4932:	|  |  |  |  |  |  |   move.l 1c810 <SysBase>,d0
    4938:	|  |  |  |  |  |  |   movea.l d0,a6
    493a:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    493e:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    4942:	|  |  |  |  +--|--|-- bra.s 4958 <deleteTextures+0xda>
				}
				list = list->next;
    4944:	|  |  |  |  |  |  '-> movea.l 20(sp),a0
    4948:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    494e:	|  |  |  '--|--|----> movea.l 20(sp),a0
    4952:	|  |  |     |  |      move.l 12(a0),d0
    4956:	|  |  |     |  '----- bne.s 48ea <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    4958:	|  |  |     '-------> addq.l #1,24(sp)
    495c:	|  |  '-------------> move.l 24(sp),d0
    4960:	|  |                  cmp.l 32(sp),d0
    4964:	|  '----------------- bcs.w 4896 <deleteTextures+0x18>
			}
		}
	}
}
    4968:	'-------------------> nop
    496a:	                      movea.l (sp)+,a6
    496c:	                      lea 24(sp),sp
    4970:	                      rts

00004972 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    4972:	subq.l #4,sp
    4974:	move.l 8(sp),d0
    4978:	move.w d0,d0
    497a:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    497e:	pea 182ca <PutChar+0x71c>
    4984:	jsr 1710c <KPrintF>
    498a:	addq.l #4,sp
}
    498c:	nop
    498e:	addq.l #4,sp
    4990:	rts

00004992 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    4992:	       moveq #-1,d0
    4994:	       cmp.l 4(sp),d0
    4998:	   ,-- bne.s 499e <resourceNameFromNum+0xc>
    499a:	   |   moveq #0,d0
    499c:	,--|-- bra.s 49d6 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    499e:	|  '-> move.l 1c7ec <numResourceNames>,d0
    49a4:	|  ,-- bne.s 49ae <resourceNameFromNum+0x1c>
    49a6:	|  |   move.l #99066,d0
    49ac:	+--|-- bra.s 49d6 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    49ae:	|  '-> move.l 1c7ec <numResourceNames>,d0
    49b4:	|      cmp.l 4(sp),d0
    49b8:	|  ,-- ble.s 49d0 <resourceNameFromNum+0x3e>
    49ba:	|  |   move.l 1c7a4 <allResourceNames>,d1
    49c0:	|  |   move.l 4(sp),d0
    49c4:	|  |   add.l d0,d0
    49c6:	|  |   add.l d0,d0
    49c8:	|  |   movea.l d1,a0
    49ca:	|  |   adda.l d0,a0
    49cc:	|  |   move.l (a0),d0
    49ce:	+--|-- bra.s 49d6 <resourceNameFromNum+0x44>
	return "Unknown resource";
    49d0:	|  '-> move.l #99075,d0
    49d6:	'----> rts

000049d8 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    49d8:	          lea -44(sp),sp
    49dc:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    49e0:	          move.l #320,1c764 <winWidth>
    winHeight = 256;
    49ea:	          move.l #256,1c768 <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    49f4:	          tst.l 60(sp)
    49f8:	      ,-- bne.s 4a10 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    49fa:	      |   pea 18314 <PutChar+0x766>
    4a00:	      |   jsr b8 <copyString>
    4a06:	      |   addq.l #4,sp
    4a08:	      |   move.l d0,1c77c <bundleFolder>
    4a0e:	   ,--|-- bra.s 4a26 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    4a10:	   |  '-> movea.l 64(sp),a0
    4a14:	   |      move.l (a0),d0
    4a16:	   |      move.l d0,-(sp)
    4a18:	   |      jsr b8 <copyString>
    4a1e:	   |      addq.l #4,sp
    4a20:	   |      move.l d0,1c77c <bundleFolder>
	}
    
	int lastSlash = -1;
    4a26:	   '----> moveq #-1,d0
    4a28:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4a2c:	          clr.l 44(sp)
    4a30:	   ,----- bra.s 4a52 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    4a32:	,--|----> move.l 1c77c <bundleFolder>,d1
    4a38:	|  |      move.l 44(sp),d0
    4a3c:	|  |      movea.l d1,a0
    4a3e:	|  |      adda.l d0,a0
    4a40:	|  |      move.b (a0),d0
    4a42:	|  |      cmpi.b #47,d0
    4a46:	|  |  ,-- bne.s 4a4e <main_sludge+0x76>
    4a48:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4a4e:	|  |  '-> addq.l #1,44(sp)
    4a52:	|  '----> move.l 1c77c <bundleFolder>,d1
    4a58:	|         move.l 44(sp),d0
    4a5c:	|         movea.l d1,a0
    4a5e:	|         adda.l d0,a0
    4a60:	|         move.b (a0),d0
    4a62:	'-------- bne.s 4a32 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    4a64:	          move.l 1c77c <bundleFolder>,d0
    4a6a:	          move.l 48(sp),d1
    4a6e:	          addq.l #1,d1
    4a70:	          movea.l d0,a0
    4a72:	          adda.l d1,a0
    4a74:	          clr.b (a0)

	if (argc > 1) {
    4a76:	          moveq #1,d0
    4a78:	          cmp.l 60(sp),d0
    4a7c:	      ,-- bge.s 4a98 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    4a7e:	      |   move.l 60(sp),d0
    4a82:	      |   addi.l #1073741823,d0
    4a88:	      |   add.l d0,d0
    4a8a:	      |   add.l d0,d0
    4a8c:	      |   movea.l 64(sp),a0
    4a90:	      |   adda.l d0,a0
    4a92:	      |   move.l (a0),52(sp)
    4a96:	   ,--|-- bra.s 4af2 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    4a98:	   |  '-> move.l 1c77c <bundleFolder>,d0
    4a9e:	   |      pea 1831a <PutChar+0x76c>
    4aa4:	   |      move.l d0,-(sp)
    4aa6:	   |      jsr 13b74 <joinStrings>
    4aac:	   |      addq.l #8,sp
    4aae:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    4ab2:	   |      move.l 52(sp),-(sp)
    4ab6:	   |      jsr 13a6e <fileExists>
    4abc:	   |      addq.l #4,sp
    4abe:	   |      tst.b d0
    4ac0:	   +----- bne.s 4af2 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    4ac2:	   |      move.l 52(sp),40(sp)
    4ac8:	   |      move.l 1c810 <SysBase>,d0
    4ace:	   |      movea.l d0,a6
    4ad0:	   |      movea.l 40(sp),a1
    4ad4:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    4ad8:	   |      move.l 1c77c <bundleFolder>,d0
    4ade:	   |      pea 18327 <PutChar+0x779>
    4ae4:	   |      move.l d0,-(sp)
    4ae6:	   |      jsr 13b74 <joinStrings>
    4aec:	   |      addq.l #8,sp
    4aee:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    4af2:	   '----> pea 18330 <PutChar+0x782>
    4af8:	          jsr 1710c <KPrintF>
    4afe:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    4b00:	          move.l 52(sp),-(sp)
    4b04:	          jsr 13a6e <fileExists>
    4b0a:	          addq.l #4,sp
    4b0c:	          tst.b d0
    4b0e:	      ,-- bne.s 4b66 <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    4b10:	      |   move.l 1c818 <DOSBase>,d0
    4b16:	      |   movea.l d0,a6
    4b18:	      |   jsr -60(a6)
    4b1c:	      |   move.l d0,28(sp)
    4b20:	      |   move.l 28(sp),d0
    4b24:	      |   move.l d0,24(sp)
    4b28:	      |   move.l #99120,20(sp)
    4b30:	      |   moveq #21,d0
    4b32:	      |   move.l d0,16(sp)
    4b36:	      |   move.l 1c818 <DOSBase>,d0
    4b3c:	      |   movea.l d0,a6
    4b3e:	      |   move.l 24(sp),d1
    4b42:	      |   move.l 20(sp),d2
    4b46:	      |   move.l 16(sp),d3
    4b4a:	      |   jsr -48(a6)
    4b4e:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    4b52:	      |   pea 18330 <PutChar+0x782>
    4b58:	      |   jsr 1710c <KPrintF>
    4b5e:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    4b60:	      |   moveq #0,d0
    4b62:	,-----|-- bra.w 4d64 <main_sludge+0x38c>
	}

	KPrintF("Setgamefilepath\n");
    4b66:	|     '-> pea 18346 <PutChar+0x798>
    4b6c:	|         jsr 1710c <KPrintF>
    4b72:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    4b74:	|         move.l 52(sp),-(sp)
    4b78:	|         jsr 4d6e <setGameFilePath>
    4b7e:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    4b80:	|         move.l 52(sp),-(sp)
    4b84:	|         jsr 631c <initSludge>
    4b8a:	|         addq.l #4,sp
    4b8c:	|         tst.w d0
    4b8e:	|     ,-- bne.s 4b96 <main_sludge+0x1be>
    4b90:	|     |   moveq #0,d0
    4b92:	+-----|-- bra.w 4d64 <main_sludge+0x38c>
	
	if( winWidth != 320 || winHeight != 256) {
    4b96:	|     '-> move.l 1c764 <winWidth>,d0
    4b9c:	|         cmpi.l #320,d0
    4ba2:	|     ,-- bne.s 4bb2 <main_sludge+0x1da>
    4ba4:	|     |   move.l 1c768 <winHeight>,d0
    4baa:	|     |   cmpi.l #256,d0
    4bb0:	|  ,--|-- beq.s 4bd4 <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    4bb2:	|  |  '-> pea 18357 <PutChar+0x7a9>
    4bb8:	|  |      jsr 1710c <KPrintF>
    4bbe:	|  |      addq.l #4,sp
		winWidth = 320;
    4bc0:	|  |      move.l #320,1c764 <winWidth>
		winHeight = 256;
    4bca:	|  |      move.l #256,1c768 <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    4bd4:	|  '----> pea 183d4 <PutChar+0x826>
    4bda:	|         jsr 1710c <KPrintF>
    4be0:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    4be2:	|         move.l 1c768 <winHeight>,d0
    4be8:	|         move.l d0,d1
    4bea:	|         move.l 1c764 <winWidth>,d0
    4bf0:	|         move.l d1,-(sp)
    4bf2:	|         move.l d0,-(sp)
    4bf4:	|         jsr d28c <resizeBackdrop>
    4bfa:	|         addq.l #8,sp
    4bfc:	|         tst.w d0
    4bfe:	|     ,-- bne.s 4c14 <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    4c00:	|     |   pea 183e7 <PutChar+0x839>
    4c06:	|     |   jsr 1710c <KPrintF>
    4c0c:	|     |   addq.l #4,sp
		return FALSE;
    4c0e:	|     |   moveq #0,d0
    4c10:	+-----|-- bra.w 4d64 <main_sludge+0x38c>
	}

	KPrintF("Init People\n");
    4c14:	|     '-> pea 1840d <PutChar+0x85f>
    4c1a:	|         jsr 1710c <KPrintF>
    4c20:	|         addq.l #4,sp
	if (! initPeople ())
    4c22:	|         jsr a7de <initPeople>
    4c28:	|         tst.w d0
    4c2a:	|     ,-- bne.s 4c40 <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    4c2c:	|     |   pea 1841a <PutChar+0x86c>
    4c32:	|     |   jsr 1710c <KPrintF>
    4c38:	|     |   addq.l #4,sp
		return FALSE;
    4c3a:	|     |   moveq #0,d0
    4c3c:	+-----|-- bra.w 4d64 <main_sludge+0x38c>
	}

	KPrintF("Init Floor\n");
    4c40:	|     '-> pea 1843b <PutChar+0x88d>
    4c46:	|         jsr 1710c <KPrintF>
    4c4c:	|         addq.l #4,sp
	if (! initFloor ())
    4c4e:	|         jsr 164c2 <initFloor>
    4c54:	|         tst.w d0
    4c56:	|     ,-- bne.s 4c6c <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    4c58:	|     |   pea 18447 <PutChar+0x899>
    4c5e:	|     |   jsr 1710c <KPrintF>
    4c64:	|     |   addq.l #4,sp
		
		return FALSE;
    4c66:	|     |   moveq #0,d0
    4c68:	+-----|-- bra.w 4d64 <main_sludge+0x38c>
	}

	KPrintF("Init Objecttype\n");
    4c6c:	|     '-> pea 18467 <PutChar+0x8b9>
    4c72:	|         jsr 1710c <KPrintF>
    4c78:	|         addq.l #4,sp
	if (! initObjectTypes ())
    4c7a:	|         jsr d448 <initObjectTypes>
    4c80:	|         tst.w d0
    4c82:	|     ,-- bne.s 4c98 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    4c84:	|     |   pea 18478 <PutChar+0x8ca>
    4c8a:	|     |   jsr 1710c <KPrintF>
    4c90:	|     |   addq.l #4,sp
		return FALSE;
    4c92:	|     |   moveq #0,d0
    4c94:	+-----|-- bra.w 4d64 <main_sludge+0x38c>
	}

	KPrintF("Init speech\n");
    4c98:	|     '-> pea 1849e <PutChar+0x8f0>
    4c9e:	|         jsr 1710c <KPrintF>
    4ca4:	|         addq.l #4,sp
	initSpeech ();
    4ca6:	|         jsr 3e88 <initSpeech>
	KPrintF("Init status bar\n");
    4cac:	|         pea 184ab <PutChar+0x8fd>
    4cb2:	|         jsr 1710c <KPrintF>
    4cb8:	|         addq.l #4,sp
	initStatusBar ();
    4cba:	|         jsr 8208 <initStatusBar>

	KPrintF("Get numbered string\n");
    4cc0:	|         pea 184bc <PutChar+0x90e>
    4cc6:	|         jsr 1710c <KPrintF>
    4ccc:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    4cce:	|         pea 1 <_start+0x1>
    4cd2:	|         jsr 7512 <getNumberedString>
    4cd8:	|         addq.l #4,sp
    4cda:	|         move.l d0,1c774 <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    4ce0:	|         pea 184d1 <PutChar+0x923>
    4ce6:	|         jsr 1710c <KPrintF>
    4cec:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    4cee:	|         move.l 1c7e0 <noStack>,d0
    4cf4:	|         pea 1 <_start+0x1>
    4cf8:	|         move.l d0,-(sp)
    4cfa:	|         clr.l -(sp)
    4cfc:	|         clr.l -(sp)
    4cfe:	|         clr.l -(sp)
    4d00:	|         jsr 7368 <startNewFunctionNum>
    4d06:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    4d0a:	|         pea 184e9 <PutChar+0x93b>
    4d10:	|         jsr 1710c <KPrintF>
    4d16:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    4d18:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    4d20:	|         clr.l 1c780 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    4d26:	|     ,-- bra.s 4d46 <main_sludge+0x36e>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    4d28:	|  ,--|-> jsr 72f8 <sludgeDisplay>
		CsiCheckInput();
    4d2e:	|  |  |   jsr cdaa <CsiCheckInput>
		walkAllPeople();
    4d34:	|  |  |   jsr bd64 <walkAllPeople>
		handleInput();
    4d3a:	|  |  |   jsr 60b6 <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    4d40:	|  |  |   jsr 17040 <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    4d46:	|  |  '-> move.l 1c780 <weAreDoneSoQuit>,d0
    4d4c:	|  '----- beq.s 4d28 <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    4d4e:	|         move.l 52(sp),32(sp)
    4d54:	|         move.l 1c810 <SysBase>,d0
    4d5a:	|         movea.l d0,a6
    4d5c:	|         movea.l 32(sp),a1
    4d60:	|         jsr -690(a6)
}
    4d64:	'-------> movem.l (sp)+,d2-d3/a6
    4d68:	          lea 44(sp),sp
    4d6c:	          rts

00004d6e <setGameFilePath>:

void setGameFilePath (char * f) {
    4d6e:	          lea -1104(sp),sp
    4d72:	          move.l a6,-(sp)
    4d74:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    4d76:	          move.l #1112,d0
    4d7c:	          add.l sp,d0
    4d7e:	          addi.l #-1102,d0
    4d84:	          move.l d0,1100(sp)
    4d88:	          move.l #998,1096(sp)
    4d90:	          move.l 1c818 <DOSBase>,d0
    4d96:	          movea.l d0,a6
    4d98:	          move.l 1100(sp),d1
    4d9c:	          move.l 1096(sp),d2
    4da0:	          jsr -564(a6)
    4da4:	          move.w d0,1094(sp)
    4da8:	          move.w 1094(sp),d0
    4dac:	      ,-- bne.s 4dbc <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    4dae:	      |   pea 184fc <PutChar+0x94e>
    4db4:	      |   jsr 1710c <KPrintF>
    4dba:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    4dbc:	      '-> moveq #-1,d0
    4dbe:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    4dc2:	          clr.l 1104(sp)
    4dc6:	   ,----- bra.s 4de4 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    4dc8:	,--|----> move.l 1104(sp),d0
    4dcc:	|  |      movea.l 1116(sp),a0
    4dd0:	|  |      adda.l d0,a0
    4dd2:	|  |      move.b (a0),d0
    4dd4:	|  |      cmpi.b #47,d0
    4dd8:	|  |  ,-- bne.s 4de0 <setGameFilePath+0x72>
    4dda:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    4de0:	|  |  '-> addq.l #1,1104(sp)
    4de4:	|  '----> move.l 1104(sp),d0
    4de8:	|         movea.l 1116(sp),a0
    4dec:	|         adda.l d0,a0
    4dee:	|         move.b (a0),d0
    4df0:	'-------- bne.s 4dc8 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    4df2:	          moveq #-1,d0
    4df4:	          cmp.l 1108(sp),d0
    4df8:	   ,----- beq.s 4e72 <setGameFilePath+0x104>
		f[got] = 0;	
    4dfa:	   |      move.l 1108(sp),d0
    4dfe:	   |      movea.l 1116(sp),a0
    4e02:	   |      adda.l d0,a0
    4e04:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    4e06:	   |      move.l 1116(sp),1090(sp)
    4e0c:	   |      moveq #-2,d0
    4e0e:	   |      move.l d0,1086(sp)
    4e12:	   |      move.l 1c818 <DOSBase>,d0
    4e18:	   |      movea.l d0,a6
    4e1a:	   |      move.l 1090(sp),d1
    4e1e:	   |      move.l 1086(sp),d2
    4e22:	   |      jsr -84(a6)
    4e26:	   |      move.l d0,1082(sp)
    4e2a:	   |      move.l 1082(sp),d0
    4e2e:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    4e32:	   |      move.l 1078(sp),1074(sp)
    4e38:	   |      move.l 1c818 <DOSBase>,d0
    4e3e:	   |      movea.l d0,a6
    4e40:	   |      move.l 1074(sp),d1
    4e44:	   |      jsr -126(a6)
    4e48:	   |      move.l d0,1070(sp)
    4e4c:	   |      move.l 1070(sp),d0
    4e50:	   |  ,-- bne.s 4e64 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    4e52:	   |  |   move.l 1116(sp),-(sp)
    4e56:	   |  |   pea 18522 <PutChar+0x974>
    4e5c:	   |  |   jsr 1710c <KPrintF>
    4e62:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    4e64:	   |  '-> move.l 1108(sp),d0
    4e68:	   |      movea.l 1116(sp),a0
    4e6c:	   |      adda.l d0,a0
    4e6e:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    4e72:	   '----> move.l #400,1066(sp)
    4e7a:	          clr.l 1062(sp)
    4e7e:	          move.l 1c810 <SysBase>,d0
    4e84:	          movea.l d0,a6
    4e86:	          move.l 1066(sp),d0
    4e8a:	          move.l 1062(sp),d1
    4e8e:	          jsr -684(a6)
    4e92:	          move.l d0,1058(sp)
    4e96:	          move.l 1058(sp),d0
    4e9a:	          move.l d0,1c778 <gamePath>
	if (gamePath==0) {
    4ea0:	          move.l 1c778 <gamePath>,d0
    4ea6:	      ,-- bne.s 4eba <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    4ea8:	      |   pea 18555 <PutChar+0x9a7>
    4eae:	      |   jsr 1710c <KPrintF>
    4eb4:	      |   addq.l #4,sp
    4eb6:	   ,--|-- bra.w 4fa2 <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    4eba:	   |  '-> move.l 1c778 <gamePath>,1054(sp)
    4ec2:	   |      moveq #-2,d0
    4ec4:	   |      move.l d0,1050(sp)
    4ec8:	   |      move.l 1c818 <DOSBase>,d0
    4ece:	   |      movea.l d0,a6
    4ed0:	   |      move.l 1054(sp),d1
    4ed4:	   |      move.l 1050(sp),d2
    4ed8:	   |      jsr -84(a6)
    4edc:	   |      move.l d0,1046(sp)
    4ee0:	   |      move.l 1046(sp),d0
    4ee4:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    4ee8:	   |      move.l 1042(sp),1038(sp)
    4eee:	   |      move.l 1c818 <DOSBase>,d0
    4ef4:	   |      movea.l d0,a6
    4ef6:	   |      move.l 1038(sp),d1
    4efa:	   |      jsr -126(a6)
    4efe:	   |      move.l d0,1034(sp)
    4f02:	   |      move.l 1034(sp),d0
    4f06:	   |  ,-- bne.s 4f16 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    4f08:	   |  |   pea 18590 <PutChar+0x9e2>
    4f0e:	   |  |   jsr 1710c <KPrintF>
    4f14:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    4f16:	   |  '-> move.l #1112,d0
    4f1c:	   |      add.l sp,d0
    4f1e:	   |      addi.l #-1102,d0
    4f24:	   |      move.l d0,1030(sp)
    4f28:	   |      moveq #-2,d0
    4f2a:	   |      move.l d0,1026(sp)
    4f2e:	   |      move.l 1c818 <DOSBase>,d0
    4f34:	   |      movea.l d0,a6
    4f36:	   |      move.l 1030(sp),d1
    4f3a:	   |      move.l 1026(sp),d2
    4f3e:	   |      jsr -84(a6)
    4f42:	   |      move.l d0,1022(sp)
    4f46:	   |      move.l 1022(sp),d0
    4f4a:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    4f4e:	   |      move.l 1042(sp),1018(sp)
    4f54:	   |      move.l 1c818 <DOSBase>,d0
    4f5a:	   |      movea.l d0,a6
    4f5c:	   |      move.l 1018(sp),d1
    4f60:	   |      jsr -126(a6)
    4f64:	   |      move.l d0,1014(sp)
    4f68:	   |      move.l 1014(sp),d0
    4f6c:	   |  ,-- bne.s 4f82 <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    4f6e:	   |  |   moveq #10,d0
    4f70:	   |  |   add.l sp,d0
    4f72:	   |  |   move.l d0,-(sp)
    4f74:	   |  |   pea 185bc <PutChar+0xa0e>
    4f7a:	   |  |   jsr 1710c <KPrintF>
    4f80:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    4f82:	   |  '-> move.l 1c778 <gamePath>,d0
    4f88:	   +----- beq.s 4fa2 <setGameFilePath+0x234>
    4f8a:	   |      move.l 1c778 <gamePath>,1010(sp)
    4f92:	   |      move.l 1c810 <SysBase>,d0
    4f98:	   |      movea.l d0,a6
    4f9a:	   |      movea.l 1010(sp),a1
    4f9e:	   |      jsr -690(a6)
}
    4fa2:	   '----> move.l (sp)+,d2
    4fa4:	          movea.l (sp)+,a6
    4fa6:	          lea 1104(sp),sp
    4faa:	          rts

00004fac <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    4fac:	,-------> lea -16(sp),sp
    4fb0:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    4fb2:	|         move.l 24(sp),-(sp)
    4fb6:	|         jsr 70da <pauseFunction>
    4fbc:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    4fbe:	|     ,-- bra.s 4fd0 <abortFunction+0x24>
    4fc0:	|  ,--|-> moveq #24,d0
    4fc2:	|  |  |   add.l 24(sp),d0
    4fc6:	|  |  |   move.l d0,-(sp)
    4fc8:	|  |  |   jsr 14fcc <trimStack>
    4fce:	|  |  |   addq.l #4,sp
    4fd0:	|  |  '-> movea.l 24(sp),a0
    4fd4:	|  |      move.l 24(a0),d0
    4fd8:	|  '----- bne.s 4fc0 <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    4fda:	|         movea.l 24(sp),a0
    4fde:	|         move.l 4(a0),12(sp)
    4fe4:	|         move.l 1c810 <SysBase>,d0
    4fea:	|         movea.l d0,a6
    4fec:	|         movea.l 12(sp),a1
    4ff0:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    4ff4:	|         clr.l 16(sp)
    4ff8:	|     ,-- bra.s 5018 <abortFunction+0x6c>
    4ffa:	|  ,--|-> movea.l 24(sp),a0
    4ffe:	|  |  |   move.l 20(a0),d1
    5002:	|  |  |   move.l 16(sp),d0
    5006:	|  |  |   lsl.l #3,d0
    5008:	|  |  |   add.l d1,d0
    500a:	|  |  |   move.l d0,-(sp)
    500c:	|  |  |   jsr 14896 <unlinkVar>
    5012:	|  |  |   addq.l #4,sp
    5014:	|  |  |   addq.l #1,16(sp)
    5018:	|  |  '-> movea.l 24(sp),a0
    501c:	|  |      move.l 8(a0),d0
    5020:	|  |      cmp.l 16(sp),d0
    5024:	|  '----- bgt.s 4ffa <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    5026:	|         movea.l 24(sp),a0
    502a:	|         move.l 20(a0),8(sp)
    5030:	|         move.l 1c810 <SysBase>,d0
    5036:	|         movea.l d0,a6
    5038:	|         movea.l 8(sp),a1
    503c:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    5040:	|         moveq #28,d0
    5042:	|         add.l 24(sp),d0
    5046:	|         move.l d0,-(sp)
    5048:	|         jsr 14896 <unlinkVar>
    504e:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    5050:	|         movea.l 24(sp),a0
    5054:	|         move.l 40(a0),d0
    5058:	|     ,-- beq.s 506a <abortFunction+0xbe>
    505a:	|     |   movea.l 24(sp),a0
    505e:	|     |   move.l 40(a0),d0
    5062:	|     |   move.l d0,-(sp)
    5064:	'-----|-- jsr 4fac <abortFunction>(pc)
    5068:	      |   addq.l #4,sp
	FreeVec(fun);
    506a:	      '-> move.l 24(sp),4(sp)
    5070:	          move.l 1c810 <SysBase>,d0
    5076:	          movea.l d0,a6
    5078:	          movea.l 4(sp),a1
    507c:	          jsr -690(a6)
	fun = NULL;
    5080:	          clr.l 24(sp)
}
    5084:	          nop
    5086:	          movea.l (sp)+,a6
    5088:	          lea 16(sp),sp
    508c:	          rts

0000508e <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    508e:	          subq.l #8,sp
	int n = 0;
    5090:	          clr.l 4(sp)
	*killedMyself = FALSE;
    5094:	          movea.l 20(sp),a0
    5098:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    509a:	          move.l 1c7a8 <allRunningFunctions>,(sp)
	while (fun) {
    50a0:	   ,----- bra.s 50ce <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    50a2:	,--|----> movea.l (sp),a0
    50a4:	|  |      move.l (a0),d0
    50a6:	|  |      cmp.l 12(sp),d0
    50aa:	|  |  ,-- bne.s 50c8 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    50ac:	|  |  |   movea.l (sp),a0
    50ae:	|  |  |   move.w #1,54(a0)
			n++;
    50b4:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    50b8:	|  |  |   move.l (sp),d0
    50ba:	|  |  |   cmp.l 16(sp),d0
    50be:	|  |  +-- bne.s 50c8 <cancelAFunction+0x3a>
    50c0:	|  |  |   movea.l 20(sp),a0
    50c4:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    50c8:	|  |  '-> movea.l (sp),a0
    50ca:	|  |      move.l 44(a0),(sp)
	while (fun) {
    50ce:	|  '----> tst.l (sp)
    50d0:	'-------- bne.s 50a2 <cancelAFunction+0x14>
	}
	return n;
    50d2:	          move.l 4(sp),d0
}
    50d6:	          addq.l #8,sp
    50d8:	          rts

000050da <completeTimers>:


void completeTimers () {
    50da:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    50dc:	          move.l 1c7a8 <allRunningFunctions>,(sp)

	while (thisFunction) {
    50e2:	   ,----- bra.s 50f8 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    50e4:	,--|----> movea.l (sp),a0
    50e6:	|  |      move.b 56(a0),d0
    50ea:	|  |  ,-- bne.s 50f2 <completeTimers+0x18>
    50ec:	|  |  |   movea.l (sp),a0
    50ee:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    50f2:	|  |  '-> movea.l (sp),a0
    50f4:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    50f8:	|  '----> tst.l (sp)
    50fa:	'-------- bne.s 50e4 <completeTimers+0xa>
	}
}
    50fc:	          nop
    50fe:	          nop
    5100:	          addq.l #4,sp
    5102:	          rts

00005104 <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    5104:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    5108:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    510e:	                                                             movea.l 80(sp),a0
    5112:	                                                             move.w 54(a0),d0
    5116:	,----------------------------------------------------------- beq.w 5fa4 <continueFunction+0xea0>
		abortFunction (fun);
    511a:	|                                                            move.l 80(sp),-(sp)
    511e:	|                                                            jsr 4fac <abortFunction>
    5124:	|                                                            addq.l #4,sp
		return TRUE;
    5126:	|                                                            moveq #1,d0
    5128:	|  ,-------------------------------------------------------- bra.w 5fae <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    512c:	|  |  ,----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    5132:	|  |  |                                                      movea.l 80(sp),a0
    5136:	|  |  |                                                      move.l 4(a0),d1
    513a:	|  |  |                                                      movea.l 80(sp),a0
    513e:	|  |  |                                                      move.l 36(a0),d0
    5142:	|  |  |                                                      lsl.l #3,d0
    5144:	|  |  |                                                      movea.l d1,a0
    5146:	|  |  |                                                      adda.l d0,a0
    5148:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    514e:	|  |  |                                                      movea.l 80(sp),a0
    5152:	|  |  |                                                      move.l 4(a0),d1
    5156:	|  |  |                                                      movea.l 80(sp),a0
    515a:	|  |  |                                                      move.l 36(a0),d0
    515e:	|  |  |                                                      lsl.l #3,d0
    5160:	|  |  |                                                      movea.l d1,a0
    5162:	|  |  |                                                      adda.l d0,a0
    5164:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    5168:	|  |  |                                                      moveq #41,d0
    516a:	|  |  |                                                      cmp.l 64(sp),d0
    516e:	|  |  |  ,-------------------------------------------------- bcs.w 5f58 <continueFunction+0xe54>
    5172:	|  |  |  |                                                   move.l 64(sp),d0
    5176:	|  |  |  |                                                   add.l d0,d0
    5178:	|  |  |  |                                                   movea.l d0,a0
    517a:	|  |  |  |                                                   adda.l #20870,a0
    5180:	|  |  |  |                                                   move.w (a0),d0
    5182:	|  |  |  |                                                   jmp (5186 <continueFunction+0x82>,pc,d0.w)
    5186:	|  |  |  |                                                   bset d6,(a2)
    5188:	|  |  |  |                                                   ori.w #2670,(a4)
    518c:	|  |  |  |                                                   eori.w #2416,d6
    5190:	|  |  |  |                                                   bchg d4,d2
    5192:	|  |  |  |                                                   bclr d4,(a4)+
    5194:	|  |  |  |                                                   andi.l #181013194,d4
    519a:	|  |  |  |                                                   .short 0x0aca
    519c:	|  |  |  |                                                   .short 0x0aca
    519e:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    51a6:	|  |  |  |                                                   .short 0x0aca
    51a8:	|  |  |  |                                                   andi.w #906,-(a4)
    51ac:	|  |  |  |                                                   bchg d1,196(a2)
    51b0:	|  |  |  |                                                   bset d1,580(a4)
    51b4:	|  |  |  |                                                   bclr d1,2576(a2)
    51b8:	|  |  |  |                                                   andi.b #-56,2762(a2)
    51be:	|  |  |  |                                                   .short 0x0aca
    51c0:	|  |  |  |                                                   eori.l #63572682,d0
    51c6:	|  |  |  |                                                   .short 0x0aca
    51c8:	|  |  |  |                                                   bchg d3,-(a2)
    51ca:	|  |  |  |                                                   bchg #-36,(a2)
    51ce:	|  |  |  |                                                   .short 0x08cc
    51d0:	|  |  |  |                                                   addi.b #14,1038(a0)
    51d6:	|  |  |  |                                                   .short 0x040e
    51d8:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    51dc:	|  |  |  |                                                   ori.w #8232,(a0)
    51e0:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    51e6:	|  |  |  |                                                   ori.w #12136,(a0)
    51ea:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    51f0:	|  |  |  |                                                   ori.w #12328,(a0)
    51f4:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    51fa:	|  |  |  |                                                   add.l 44(sp),d1
    51fe:	|  |  |  |                                                   moveq #28,d0
    5200:	|  |  |  |                                                   add.l 80(sp),d0
    5204:	|  |  |  |                                                   move.l d1,-(sp)
    5206:	|  |  |  |                                                   move.l d0,-(sp)
    5208:	|  |  |  |                                                   jsr 14b02 <copyVariable>
    520e:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    5210:	|  |  |  |                                                   move.l 80(sp),-(sp)
    5214:	|  |  |  |                                                   jsr 5fb4 <finishFunction>
    521a:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    521c:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    5222:	|  |  |  |                                                   move.l 80(sp),-(sp)
    5226:	|  |  |  |                                                   jsr 711c <restartFunction>
    522c:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    522e:	|  |  |  |  ,----------------------------------------------- bra.w 5f8c <continueFunction+0xe88>
				finishFunction (fun);
    5232:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    5236:	|  |  |  |  |                                                jsr 5fb4 <finishFunction>
    523c:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    523e:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    5242:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    5246:	|  |  |  |  +----------------------------------------------- bra.w 5f8c <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    524a:	|  |  |  |  |                                                movea.l 80(sp),a0
    524e:	|  |  |  |  |                                                move.l 28(a0),d0
    5252:	|  |  |  |  |                                                moveq #2,d1
    5254:	|  |  |  |  |                                                cmp.l d0,d1
    5256:	|  |  |  |  |                                            ,-- beq.s 5262 <continueFunction+0x15e>
    5258:	|  |  |  |  |                                            |   moveq #4,d1
    525a:	|  |  |  |  |                                            |   cmp.l d0,d1
    525c:	|  |  |  |  |                                         ,--|-- beq.s 52b0 <continueFunction+0x1ac>
    525e:	|  |  |  |  |                                ,--------|--|-- bra.w 5398 <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    5262:	|  |  |  |  |                                |        |  '-> move.l 80(sp),-(sp)
    5266:	|  |  |  |  |                                |        |      jsr 70da <pauseFunction>
    526c:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    526e:	|  |  |  |  |                                |        |      moveq #24,d0
    5270:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    5274:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    5278:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    527c:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    5280:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    5282:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    5286:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    528a:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    528c:	|  |  |  |  |                                |        |      jsr 7368 <startNewFunctionNum>
    5292:	|  |  |  |  |                                |        |      lea 20(sp),sp
    5296:	|  |  |  |  |                                |        |      tst.l d0
    5298:	|  |  |  |  |                                |        |  ,-- bne.s 52a0 <continueFunction+0x19c>
    529a:	|  |  |  |  |                                |        |  |   clr.w d0
    529c:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 5fae <continueFunction+0xeaa>
				fun = allRunningFunctions;
    52a0:	|  |  |  |  |                                |        |  '-> move.l 1c7a8 <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    52a8:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    52ac:	|  |  |  |  |                                |  ,-----|----- bra.w 53ac <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    52b0:	|  |  |  |  |                                |  |     '----> move.l 68(sp),d1
    52b4:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    52b8:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    52bc:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    52c0:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    52c2:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    52c4:	|  |  |  |  |                                |  |            jsr 1332a <callBuiltIn>
    52ca:	|  |  |  |  |                                |  |            lea 12(sp),sp
    52ce:	|  |  |  |  |                                |  |            move.l d0,52(sp)

					switch (br) {
    52d2:	|  |  |  |  |                                |  |            moveq #5,d0
    52d4:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    52d8:	|  |  |  |  |                                |  |  ,-------- bcs.w 5394 <continueFunction+0x290>
    52dc:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    52e0:	|  |  |  |  |                                |  |  |         add.l d0,d0
    52e2:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    52e4:	|  |  |  |  |                                |  |  |         adda.l #21232,a0
    52ea:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    52ec:	|  |  |  |  |                                |  |  |         jmp (52f0 <continueFunction+0x1ec>,pc,d0.w)
    52f0:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    52f6:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    52fa:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    5300:	|  |  |  |  |                                |  |  |         divu.w d4,d3
    5302:	|  |  |  |  |                                |  |  |         jsr 1710c <KPrintF>
    5308:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    530a:	|  |  |  |  |                                |  |  |         clr.w d0
    530c:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 5fae <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    5310:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    5314:	|  |  |  |  |                                |  |  |         jsr 70da <pauseFunction>
    531a:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    531c:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    5320:	|  |  |  |  |                                |  |  |  ,----- bra.s 5396 <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    5322:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    5326:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    532a:	|  |  |  |  |                                |  |  |  +----- bra.s 5396 <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    532c:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    5330:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    5336:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    5338:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    533c:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    5340:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    5344:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    5346:	|  |  |  |  |                                |  |  |  |      jsr 14f3a <setVariable>
    534c:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    5350:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    5354:	|  |  |  |  |                                |  |  |  |      jsr 70da <pauseFunction>
    535a:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    535c:	|  |  |  |  |                                |  |  |  |      move.l 1c7e0 <noStack>,d1
    5362:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    5366:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    5368:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    536a:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    536e:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    5370:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    5372:	|  |  |  |  |                                |  |  |  |      jsr 7368 <startNewFunctionNum>
    5378:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    537c:	|  |  |  |  |                                |  |  |  |      tst.l d0
    537e:	|  |  |  |  |                                |  |  |  |  ,-- bne.s 5386 <continueFunction+0x282>
    5380:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    5382:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 5fae <continueFunction+0xeaa>
							fun = allRunningFunctions;
    5386:	|  |  |  |  |                                |  |  |  |  '-> move.l 1c7a8 <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    538e:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    5392:	|  |  |  |  |                                |  |  |  +----- bra.s 5396 <continueFunction+0x292>

						default:
						break;
    5394:	|  |  |  |  |                                |  |  '--|----> nop
					}
				}
				break;
    5396:	|  |  |  |  |                                |  +-----'----X bra.s 53ac <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    5398:	|  |  |  |  |                                '--|----------> pea 1870f <PutChar+0xb61>
    539e:	|  |  |  |  |                                   |            jsr 1710c <KPrintF>
    53a4:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    53a6:	|  |  |  |  |                                   |            clr.w d0
    53a8:	|  +--|--|--|-----------------------------------|----------- bra.w 5fae <continueFunction+0xeaa>
			}
			break;
    53ac:	|  |  |  |  +-----------------------------------'----------X bra.w 5f8c <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    53b0:	|  |  |  |  |                                                moveq #28,d0
    53b2:	|  |  |  |  |                                                add.l 80(sp),d0
    53b6:	|  |  |  |  |                                                clr.l -(sp)
    53b8:	|  |  |  |  |                                                clr.l -(sp)
    53ba:	|  |  |  |  |                                                move.l d0,-(sp)
    53bc:	|  |  |  |  |                                                jsr 14f3a <setVariable>
    53c2:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    53c6:	|  |  |  |  +----------------------------------------------- bra.w 5f8c <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    53ca:	|  |  |  |  |                                                move.l 68(sp),d1
    53ce:	|  |  |  |  |                                                moveq #28,d0
    53d0:	|  |  |  |  |                                                add.l 80(sp),d0
    53d4:	|  |  |  |  |                                                move.l d1,-(sp)
    53d6:	|  |  |  |  |                                                pea 5 <_start+0x5>
    53da:	|  |  |  |  |                                                move.l d0,-(sp)
    53dc:	|  |  |  |  |                                                jsr 14f3a <setVariable>
    53e2:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    53e6:	|  |  |  |  +----------------------------------------------- bra.w 5f8c <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    53ea:	|  |  |  |  |                                                move.l 68(sp),d1
    53ee:	|  |  |  |  |                                                moveq #28,d0
    53f0:	|  |  |  |  |                                                add.l 80(sp),d0
    53f4:	|  |  |  |  |                                                move.l d1,-(sp)
    53f6:	|  |  |  |  |                                                pea 1 <_start+0x1>
    53fa:	|  |  |  |  |                                                move.l d0,-(sp)
    53fc:	|  |  |  |  |                                                jsr 14f3a <setVariable>
    5402:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    5406:	|  |  |  |  +----------------------------------------------- bra.w 5f8c <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    540a:	|  |  |  |  |                                                moveq #28,d0
    540c:	|  |  |  |  |                                                add.l 80(sp),d0
    5410:	|  |  |  |  |                                                movea.l 80(sp),a0
    5414:	|  |  |  |  |                                                movea.l 20(a0),a0
    5418:	|  |  |  |  |                                                move.l 68(sp),d1
    541c:	|  |  |  |  |                                                lsl.l #3,d1
    541e:	|  |  |  |  |                                                add.l a0,d1
    5420:	|  |  |  |  |                                                move.l d0,-(sp)
    5422:	|  |  |  |  |                                                move.l d1,-(sp)
    5424:	|  |  |  |  |                                                jsr 14b02 <copyVariable>
    542a:	|  |  |  |  |                                                addq.l #8,sp
    542c:	|  |  |  |  |                                                tst.w d0
    542e:	|  |  |  |  |  ,-------------------------------------------- bne.w 5f6a <continueFunction+0xe66>
    5432:	|  |  |  |  |  |                                             clr.w d0
    5434:	|  +--|--|--|--|-------------------------------------------- bra.w 5fae <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    5438:	|  |  |  |  |  |                                             moveq #28,d0
    543a:	|  |  |  |  |  |                                             add.l 80(sp),d0
    543e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5440:	|  |  |  |  |  |                                             jsr 14b88 <getBoolean>
    5446:	|  |  |  |  |  |                                             addq.l #4,sp
    5448:	|  |  |  |  |  |                                             tst.w d0
    544a:	|  |  |  |  |  |                                      ,----- beq.s 5466 <continueFunction+0x362>
    544c:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    5450:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    5454:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    5456:	|  |  |  |  |  |                                      |      jsr 14b88 <getBoolean>
    545c:	|  |  |  |  |  |                                      |      addq.l #4,sp
    545e:	|  |  |  |  |  |                                      |      tst.w d0
    5460:	|  |  |  |  |  |                                      +----- beq.s 5466 <continueFunction+0x362>
    5462:	|  |  |  |  |  |                                      |      moveq #1,d0
    5464:	|  |  |  |  |  |                                      |  ,-- bra.s 5468 <continueFunction+0x364>
    5466:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    5468:	|  |  |  |  |  |                                         '-> moveq #28,d1
    546a:	|  |  |  |  |  |                                             add.l 80(sp),d1
    546e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5470:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    5474:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5476:	|  |  |  |  |  |                                             jsr 14f3a <setVariable>
    547c:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    5480:	|  |  |  |  |  |                                             moveq #24,d0
    5482:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5486:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5488:	|  |  |  |  |  |                                             jsr 14fcc <trimStack>
    548e:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    5490:	|  |  |  |  +--|-------------------------------------------- bra.w 5f8c <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    5494:	|  |  |  |  |  |                                             moveq #28,d0
    5496:	|  |  |  |  |  |                                             add.l 80(sp),d0
    549a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    549c:	|  |  |  |  |  |                                             jsr 14b88 <getBoolean>
    54a2:	|  |  |  |  |  |                                             addq.l #4,sp
    54a4:	|  |  |  |  |  |                                             tst.w d0
    54a6:	|  |  |  |  |  |                                         ,-- bne.s 54be <continueFunction+0x3ba>
    54a8:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    54ac:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    54b0:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    54b2:	|  |  |  |  |  |                                         |   jsr 14b88 <getBoolean>
    54b8:	|  |  |  |  |  |                                         |   addq.l #4,sp
    54ba:	|  |  |  |  |  |                                         |   tst.w d0
    54bc:	|  |  |  |  |  |                                      ,--|-- beq.s 54c2 <continueFunction+0x3be>
    54be:	|  |  |  |  |  |                                      |  '-> moveq #1,d0
    54c0:	|  |  |  |  |  |                                      |  ,-- bra.s 54c4 <continueFunction+0x3c0>
    54c2:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    54c4:	|  |  |  |  |  |                                         '-> moveq #28,d1
    54c6:	|  |  |  |  |  |                                             add.l 80(sp),d1
    54ca:	|  |  |  |  |  |                                             move.l d0,-(sp)
    54cc:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    54d0:	|  |  |  |  |  |                                             move.l d1,-(sp)
    54d2:	|  |  |  |  |  |                                             jsr 14f3a <setVariable>
    54d8:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    54dc:	|  |  |  |  |  |                                             moveq #24,d0
    54de:	|  |  |  |  |  |                                             add.l 80(sp),d0
    54e2:	|  |  |  |  |  |                                             move.l d0,-(sp)
    54e4:	|  |  |  |  |  |                                             jsr 14fcc <trimStack>
    54ea:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    54ec:	|  |  |  |  +--|-------------------------------------------- bra.w 5f8c <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    54f0:	|  |  |  |  |  |                                             move.l 68(sp),d1
    54f4:	|  |  |  |  |  |                                             moveq #28,d0
    54f6:	|  |  |  |  |  |                                             add.l 80(sp),d0
    54fa:	|  |  |  |  |  |                                             move.l d1,-(sp)
    54fc:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    5500:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5502:	|  |  |  |  |  |                                             jsr 14f3a <setVariable>
    5508:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    550c:	|  |  |  |  +--|-------------------------------------------- bra.w 5f8c <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    5510:	|  |  |  |  |  |                                             move.l 68(sp),d1
    5514:	|  |  |  |  |  |                                             moveq #28,d0
    5516:	|  |  |  |  |  |                                             add.l 80(sp),d0
    551a:	|  |  |  |  |  |                                             move.l d1,-(sp)
    551c:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    5520:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5522:	|  |  |  |  |  |                                             jsr 14f3a <setVariable>
    5528:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    552c:	|  |  |  |  +--|-------------------------------------------- bra.w 5f8c <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    5530:	|  |  |  |  |  |                                             move.l 68(sp),d1
    5534:	|  |  |  |  |  |                                             moveq #28,d0
    5536:	|  |  |  |  |  |                                             add.l 80(sp),d0
    553a:	|  |  |  |  |  |                                             move.l d1,-(sp)
    553c:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    5540:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5542:	|  |  |  |  |  |                                             jsr 14f3a <setVariable>
    5548:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    554c:	|  |  |  |  +--|-------------------------------------------- bra.w 5f8c <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    5550:	|  |  |  |  |  |                                             move.l 1c770 <dialogValue>,d0
    5556:	|  |  |  |  |  |                                             moveq #1,d1
    5558:	|  |  |  |  |  |                                             cmp.l d0,d1
    555a:	|  |  |  |  |  |  ,----------------------------------------- beq.w 5f6e <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    555e:	|  |  |  |  |  |  |                                          pea 18724 <PutChar+0xb76>
    5564:	|  |  |  |  |  |  |                                          jsr 1710c <KPrintF>
    556a:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    556c:	|  |  |  |  |  |  |                                          clr.w d0
    556e:	|  +--|--|--|--|--|----------------------------------------- bra.w 5fae <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    5572:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    5576:	|  |  |  |  |  |  |                                          moveq #28,d0
    5578:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    557c:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    557e:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    5580:	|  |  |  |  |  |  |                                          jsr 146cc <loadStringToVar>
    5586:	|  |  |  |  |  |  |                                          addq.l #8,sp
    5588:	|  |  |  |  |  |  |                                          tst.w d0
    558a:	|  |  |  |  |  |  |  ,-------------------------------------- bne.w 5f72 <continueFunction+0xe6e>
					return FALSE;
    558e:	|  |  |  |  |  |  |  |                                       clr.w d0
    5590:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 5fae <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    5594:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5598:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    559c:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    559e:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    55a0:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    55a2:	|  |  |  |  |  |  |  |                                ,----- beq.s 5600 <continueFunction+0x4fc>
    55a4:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    55a6:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    55a8:	|  |  |  |  |  |  |  |              ,-----------------|----- bcs.w 5794 <continueFunction+0x690>
    55ac:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    55ae:	|  |  |  |  |  |  |  |              |                 |  ,-- beq.s 55ba <continueFunction+0x4b6>
    55b0:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    55b2:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    55b4:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 5600 <continueFunction+0x4fc>
    55b6:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 5794 <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    55ba:	|  |  |  |  |  |  |  |              |                 |  '-> moveq #38,d0
    55bc:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    55c0:	|  |  |  |  |  |  |  |              |                 |  ,-- bne.s 55ec <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    55c2:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    55c4:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    55c8:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    55ca:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    55cc:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    55ce:	|  |  |  |  |  |  |  |              |                 |  |   jsr 14f3a <setVariable>
    55d4:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    55d8:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    55da:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    55de:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    55e0:	|  |  |  |  |  |  |  |              |                 |  |   jsr 14fcc <trimStack>
    55e6:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    55e8:	|  |  |  |  |  |  |  |              |  ,--------------|--|-- bra.w 57aa <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    55ec:	|  |  |  |  |  |  |  |              |  |              |  '-> pea 18765 <PutChar+0xbb7>
    55f2:	|  |  |  |  |  |  |  |              |  |              |      jsr 1710c <KPrintF>
    55f8:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    55fa:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    55fc:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 5fae <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    5600:	|  |  |  |  |  |  |  |              |  |              '----> movea.l 80(sp),a0
    5604:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    5608:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    560c:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    560e:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5624 <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    5610:	|  |  |  |  |  |  |  |              |  |                 |   pea 187a1 <PutChar+0xbf3>
    5616:	|  |  |  |  |  |  |  |              |  |                 |   jsr 1710c <KPrintF>
    561c:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    561e:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    5620:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 5fae <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5624:	|  |  |  |  |  |  |  |              |  |                 '-> moveq #28,d0
    5626:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    562a:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    562c:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    5630:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    5634:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    5636:	|  |  |  |  |  |  |  |              |  |                     jsr 14648 <getValueType>
    563c:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    5640:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    5642:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 564a <continueFunction+0x546>
    5644:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    5646:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 5fae <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    564a:	|  |  |  |  |  |  |  |              |  |                 '-> movea.l 80(sp),a0
    564e:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    5652:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    5654:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    5656:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    5658:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 567a <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    565a:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    565e:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    5660:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    5664:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    5668:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    566c:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    566e:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    5670:	|  |  |  |  |  |  |  |              |  |                 |   jsr 142d2 <fastArrayGetByIndex>
    5676:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    5678:	|  |  |  |  |  |  |  |              |  |              ,--|-- bra.s 569a <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    567a:	|  |  |  |  |  |  |  |              |  |              |  '-> move.l 4(sp),d0
    567e:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    5680:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    5684:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    5688:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    568c:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    568e:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    5690:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    5692:	|  |  |  |  |  |  |  |              |  |              |      jsr 14f5c <stackGetByIndex>
    5698:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    569a:	|  |  |  |  |  |  |  |              |  |              '----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    569e:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    56a0:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    56a4:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    56a6:	|  |  |  |  |  |  |  |              |  |                     jsr 14fcc <trimStack>
    56ac:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    56ae:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    56b2:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 56ce <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    56b4:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    56b6:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    56ba:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    56bc:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    56be:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    56c0:	|  |  |  |  |  |  |  |              |  |                 |   jsr 14f3a <setVariable>
    56c6:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    56ca:	|  |  |  |  |  |  |  |              |  |  ,--------------|-- bra.w 57a8 <continueFunction+0x6a4>
						switch (com) {
    56ce:	|  |  |  |  |  |  |  |              |  |  |              '-> moveq #39,d0
    56d0:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    56d4:	|  |  |  |  |  |  |  |              |  |  |              ,-- beq.s 56e2 <continueFunction+0x5de>
    56d6:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    56d8:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    56dc:	|  |  |  |  |  |  |  |              |  |  |           ,--|-- beq.s 572c <continueFunction+0x628>
    56de:	|  |  |  |  |  |  |  |              |  |  |  ,--------|--|-- bra.w 5774 <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    56e2:	|  |  |  |  |  |  |  |              |  |  |  |        |  '-> move.l 60(sp),-(sp)
    56e6:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    56ea:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    56ee:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    56f0:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 14648 <getValueType>
    56f6:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    56fa:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    56fc:	|  |  |  |  |  |  |  |              |  |  |  |        |  ,-- bne.s 5704 <continueFunction+0x600>
    56fe:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    5700:	|  |  |  |  |  |  |  |              |  |  |  |  ,-----|--|-- bra.w 578e <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    5704:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  '-> move.l (sp),d1
    5706:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    5708:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    570c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    570e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    5712:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    5714:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 14f3a <setVariable>
    571a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    571e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    5720:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    5722:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    5726:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    572a:	|  |  |  |  |  |  |  |              |  |  |  |  |  ,--|----- bra.s 5792 <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    572c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  '----> move.l 60(sp),-(sp)
    5730:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    5734:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    5738:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    573a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 14648 <getValueType>
    5740:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    5744:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    5746:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     ,-- bne.s 574c <continueFunction+0x648>
    5748:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    574a:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 578e <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    574c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     '-> move.l (sp),d1
    574e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    5750:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    5754:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    5756:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    575a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    575c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 14f3a <setVariable>
    5762:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    5766:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    5768:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    576a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    576e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    5772:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 5792 <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    5774:	|  |  |  |  |  |  |  |              |  |  |  '--|--|-------> moveq #28,d0
    5776:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    577a:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    577c:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    5780:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 14b02 <copyVariable>
    5786:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    5788:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    578a:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 57a8 <continueFunction+0x6a4>
    578c:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    578e:	|  +--|--|--|--|--|--|--------------|--|--|-----'--|-------X bra.w 5fae <continueFunction+0xeaa>
				break;
    5792:	|  |  |  |  |  |  |  |              |  |  +--------'-------X bra.s 57a8 <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    5794:	|  |  |  |  |  |  |  |              '--|--|----------------> pea 187bf <PutChar+0xc11>
    579a:	|  |  |  |  |  |  |  |                 |  |                  jsr 1710c <KPrintF>
    57a0:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    57a2:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    57a4:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 5fae <continueFunction+0xeaa>
				break;
    57a8:	|  |  |  |  |  |  |  |                 |  '----------------> nop
			}
			break;
    57aa:	|  |  |  |  +--|--|--|-----------------'-------------------X bra.w 5f8c <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    57ae:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    57b2:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    57b6:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    57b8:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    57ba:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    57bc:	|  |  |  |  |  |  |  |                                   ,-- beq.s 57ca <continueFunction+0x6c6>
    57be:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    57c0:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    57c2:	|  |  |  |  |  |  |  |                                ,--|-- beq.w 5876 <continueFunction+0x772>
    57c6:	|  |  |  |  |  |  |  |                             ,--|--|-- bra.w 58d4 <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    57ca:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 80(sp),a0
    57ce:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    57d2:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    57d6:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    57d8:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 57ee <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    57da:	|  |  |  |  |  |  |  |                             |  |  |   pea 187a1 <PutChar+0xbf3>
    57e0:	|  |  |  |  |  |  |  |                             |  |  |   jsr 1710c <KPrintF>
    57e6:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    57e8:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    57ea:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 5fae <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    57ee:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #28,d0
    57f0:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    57f4:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    57f6:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    57fa:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    57fe:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    5800:	|  |  |  |  |  |  |  |                             |  |      jsr 14648 <getValueType>
    5806:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    580a:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    580c:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5814 <continueFunction+0x710>
    580e:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5810:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 5fae <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    5814:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 80(sp),a0
    5818:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    581c:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    5820:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    5822:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    5826:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    5828:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    582c:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5830:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    5834:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    5836:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    5838:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    583a:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    583c:	|  |  |  |  |  |  |  |                             |  |      jsr 7324 <stackSetByIndex>
    5842:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    5846:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    5848:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5850 <continueFunction+0x74c>
						return FALSE;
    584a:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    584c:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 5fae <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    5850:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #24,d0
    5852:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5856:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5858:	|  |  |  |  |  |  |  |                             |  |      jsr 14fcc <trimStack>
    585e:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    5860:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    5862:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5866:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5868:	|  |  |  |  |  |  |  |                             |  |      jsr 14fcc <trimStack>
    586e:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    5870:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    5872:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 5f8c <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    5876:	|  |  |  |  |  |  |  |                             |  '----> moveq #28,d0
    5878:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    587c:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    587e:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    5882:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    5886:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    5888:	|  |  |  |  |  |  |  |                             |         jsr 14648 <getValueType>
    588e:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    5892:	|  |  |  |  |  |  |  |                             |         tst.w d0
    5894:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 589c <continueFunction+0x798>
    5896:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    5898:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 5fae <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    589c:	|  |  |  |  |  |  |  |                             |     '-> move.l 12(sp),d0
    58a0:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    58a2:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    58a6:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    58aa:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    58ae:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    58b0:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    58b2:	|  |  |  |  |  |  |  |                             |         jsr 142d2 <fastArrayGetByIndex>
    58b8:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    58ba:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    58be:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 58ce <continueFunction+0x7ca>
    58c0:	|  |  |  |  |  |  |  |                             |     |   pea 187e3 <PutChar+0xc35>
    58c6:	|  |  |  |  |  |  |  |                             |     |   jsr 1710c <KPrintF>
    58cc:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    58ce:	|  |  |  |  |  |  |  |                             |     '-> clr.w d0
    58d0:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 5fae <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    58d4:	|  |  |  |  |  |  |  |                             '-------> pea 187bf <PutChar+0xc11>
    58da:	|  |  |  |  |  |  |  |                                       jsr 1710c <KPrintF>
    58e0:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    58e2:	|  |  |  |  |  |  |  |                                       clr.w d0
    58e4:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 5fae <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    58e8:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    58ec:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    58f0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    58f4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    58f6:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    58f8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    58fa:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    58fe:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    5902:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5904:	|  |  |  |  |  |  |  |                                       jsr 14648 <getValueType>
    590a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    590e:	|  |  |  |  |  |  |  |                                       tst.w d0
    5910:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5918 <continueFunction+0x814>
    5912:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5914:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5fae <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5918:	|  |  |  |  |  |  |  |                                   '-> move.l 16(sp),d1
    591c:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    591e:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5922:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5924:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5928:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    592a:	|  |  |  |  |  |  |  |                                       jsr 14f3a <setVariable>
    5930:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    5934:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    5938:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    593a:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    593c:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5940:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5944:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5948:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    594a:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    594c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    594e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5952:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5954:	|  |  |  |  |  |  |  |                                       jsr 14f3a <setVariable>
    595a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    595e:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 5f8c <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5962:	|  |  |  |  |  |  |  |                                       move.l 1c7be <globalVars>,d1
    5968:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    596c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    596e:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5970:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5972:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5976:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    597a:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    597c:	|  |  |  |  |  |  |  |                                       jsr 14648 <getValueType>
    5982:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5986:	|  |  |  |  |  |  |  |                                       tst.w d0
    5988:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5990 <continueFunction+0x88c>
    598a:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    598c:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5fae <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5990:	|  |  |  |  |  |  |  |                                   '-> move.l 20(sp),d1
    5994:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5996:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    599a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    599c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    59a0:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    59a2:	|  |  |  |  |  |  |  |                                       jsr 14f3a <setVariable>
    59a8:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    59ac:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    59b0:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    59b2:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    59b4:	|  |  |  |  |  |  |  |                                       movea.l 1c7be <globalVars>,a0
    59ba:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    59be:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    59c0:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    59c2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    59c4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    59c8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    59ca:	|  |  |  |  |  |  |  |                                       jsr 14f3a <setVariable>
    59d0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    59d4:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 5f8c <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    59d8:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    59dc:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    59e0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    59e4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    59e6:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    59e8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    59ea:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    59ee:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    59f2:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    59f4:	|  |  |  |  |  |  |  |                                       jsr 14648 <getValueType>
    59fa:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    59fe:	|  |  |  |  |  |  |  |                                       tst.w d0
    5a00:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5a08 <continueFunction+0x904>
    5a02:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5a04:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5fae <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5a08:	|  |  |  |  |  |  |  |                                   '-> move.l 24(sp),d1
    5a0c:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5a0e:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5a12:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5a14:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5a18:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5a1a:	|  |  |  |  |  |  |  |                                       jsr 14f3a <setVariable>
    5a20:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    5a24:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    5a28:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5a2a:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5a2c:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5a30:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5a34:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5a38:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5a3a:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5a3c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5a3e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5a42:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5a44:	|  |  |  |  |  |  |  |                                       jsr 14f3a <setVariable>
    5a4a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5a4e:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 5f8c <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5a52:	|  |  |  |  |  |  |  |                                       move.l 1c7be <globalVars>,d1
    5a58:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5a5c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5a5e:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5a60:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5a62:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5a66:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    5a6a:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5a6c:	|  |  |  |  |  |  |  |                                       jsr 14648 <getValueType>
    5a72:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5a76:	|  |  |  |  |  |  |  |                                       tst.w d0
    5a78:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5a80 <continueFunction+0x97c>
    5a7a:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5a7c:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5fae <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5a80:	|  |  |  |  |  |  |  |                                   '-> move.l 28(sp),d1
    5a84:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5a86:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5a8a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5a8c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5a90:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5a92:	|  |  |  |  |  |  |  |                                       jsr 14f3a <setVariable>
    5a98:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    5a9c:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    5aa0:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5aa2:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5aa4:	|  |  |  |  |  |  |  |                                       movea.l 1c7be <globalVars>,a0
    5aaa:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5aae:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5ab0:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5ab2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5ab4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5ab8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5aba:	|  |  |  |  |  |  |  |                                       jsr 14f3a <setVariable>
    5ac0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5ac4:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 5f8c <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    5ac8:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5acc:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5ad0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5ad4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5ad6:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    5ad8:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5ada:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5ade:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5ae0:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5ae2:	|  |  |  |  |  |  |  |                                       jsr 14b02 <copyVariable>
    5ae8:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    5aea:	|  |  |  |  |  |  |  |                                       tst.w d0
    5aec:	|  |  |  |  |  |  |  |  ,----------------------------------- bne.w 5f76 <continueFunction+0xe72>
    5af0:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    5af2:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 5fae <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    5af6:	|  |  |  |  |  |  |  |  |                                    move.l 1c7be <globalVars>,d1
    5afc:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    5b00:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    5b02:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    5b04:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    5b06:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    5b0a:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    5b0c:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    5b0e:	|  |  |  |  |  |  |  |  |                                    jsr 14b02 <copyVariable>
    5b14:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    5b16:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    5b18:	|  |  |  |  |  |  |  |  |  ,-------------------------------- bne.w 5f7a <continueFunction+0xe76>
    5b1c:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    5b1e:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 5fae <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    5b22:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    5b24:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    5b28:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1c7be <globalVars>,a0
    5b2e:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    5b32:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    5b34:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    5b36:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    5b38:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    5b3a:	|  |  |  |  |  |  |  |  |  |                                 jsr 14b02 <copyVariable>
    5b40:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    5b42:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    5b44:	|  |  |  |  |  |  |  |  |  |  ,----------------------------- bne.w 5f7e <continueFunction+0xe7a>
    5b48:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    5b4a:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 5fae <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    5b4e:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    5b50:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    5b54:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    5b56:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    5b5a:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    5b5c:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    5b5e:	|  |  |  |  |  |  |  |  |  |  |                              jsr 13e84 <addVarToStack>
    5b64:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    5b66:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    5b68:	|  |  |  |  |  |  |  |  |  |  |  ,-------------------------- bne.w 5f82 <continueFunction+0xe7e>
    5b6c:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    5b6e:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 5fae <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    5b72:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    5b74:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    5b78:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    5b7a:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    5b7e:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    5b80:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    5b82:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 13f0a <addVarToStackQuick>
    5b88:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    5b8a:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    5b8c:	|  |  |  |  |  |  |  |  |  |  |  |  ,----------------------- bne.w 5f86 <continueFunction+0xe82>
    5b90:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    5b92:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 5fae <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    5b96:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5b98:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5b9c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5b9e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14b88 <getBoolean>
    5ba4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5ba6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5ba8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    5baa:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    5bac:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    5bae:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    5bb0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5bb2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5bb6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    5bb8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    5bbc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5bbe:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14f3a <setVariable>
    5bc4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    5bc8:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 5f8c <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    5bcc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5bce:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5bd2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5bd4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14b88 <getBoolean>
    5bda:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5bdc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5bde:	|  |  |  |  |  |  |  |  |  |  |  |  |  ,-------------------- bne.w 5f8a <continueFunction+0xe86>
				advanceNow = FALSE;
    5be2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    5be6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5bea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    5bf0:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 5f8a <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    5bf4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    5bf8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5bfc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    5c02:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 5f8c <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    5c06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5c08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    5c0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    5c0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    5c12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    5c16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    5c18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 14648 <getValueType>
    5c1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    5c22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    5c24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 ,-- bne.s 5c2c <continueFunction+0xb28>
    5c26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    5c28:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 5fae <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    5c2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 '-> move.l 32(sp),d0
    5c30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    5c32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    5c34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5c36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    5c3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    5c3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    5c40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    5c42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 14f3a <setVariable>
    5c48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    5c4c:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 5f8c <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    5c50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5c54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    5c58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  ,----------------- beq.w 5f42 <continueFunction+0xe3e>
				int firstValue, secondValue;

				switch (com) {
    5c5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    5c5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    5c62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,-------- beq.s 5cde <continueFunction+0xbda>
    5c64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    5c66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    5c6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|-------- bcs.w 5d28 <continueFunction+0xc24>
    5c6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    5c70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    5c74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     ,-- beq.s 5c82 <continueFunction+0xb7e>
    5c76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    5c78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    5c7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  ,--|-- beq.s 5cb0 <continueFunction+0xbac>
    5c7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 5d28 <continueFunction+0xc24>
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    5c82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  '-> moveq #28,d0
    5c84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    5c88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    5c8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    5c90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    5c92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    5c94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 13f7e <addVariablesInSecond>
    5c9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    5c9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    5c9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    5ca2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    5ca4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 14fcc <trimStack>
    5caa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    5cac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|----- bra.w 5f56 <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    5cb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----> moveq #28,d0
    5cb2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    5cb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    5cba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    5cbe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    5cc0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    5cc2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 1403c <compareVariablesInSecond>
    5cc8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    5cca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    5ccc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    5cd0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    5cd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 14fcc <trimStack>
    5cd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    5cda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 5f56 <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    5cde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '-------> moveq #28,d0
    5ce0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    5ce4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5ce8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    5cec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    5cee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    5cf0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 1403c <compareVariablesInSecond>
    5cf6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    5cf8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    5cfa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    5cfe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    5d00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 14fcc <trimStack>
    5d06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    5d08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5d0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    5d10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    5d12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    5d14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    5d16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    5d1c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5d20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    5d24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 5f56 <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    5d28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----------> movea.l 80(sp),a0
    5d2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    5d30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5d32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    5d36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    5d3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    5d3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14648 <getValueType>
    5d42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    5d46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    5d48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 5d50 <continueFunction+0xc4c>
    5d4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    5d4c:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 5fae <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    5d50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #28,d0
    5d52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    5d56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5d58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    5d5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    5d60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    5d62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14648 <getValueType>
    5d68:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    5d6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    5d6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 5d76 <continueFunction+0xc72>
    5d70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    5d72:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 5fae <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    5d76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #24,d0
    5d78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    5d7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5d7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14fcc <trimStack>
    5d84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp

					switch (com) {
    5d86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    5d88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    5d8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    5d8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    5d90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bcs.w 5f54 <continueFunction+0xe50>
    5d94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    5d96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    5d98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #23972,a0
    5d9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    5da0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (5da4 <continueFunction+0xca0>,pc,d0.w)
    5da4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    5da8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    5daa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5db2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    5db4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5dbc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5dc4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    5dcc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    5dd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5dd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5ddc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5dde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5de0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17a98 <__mulsi3>
    5de6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5de8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5dea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5dec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5df0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5df2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5df6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5df8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14f3a <setVariable>
    5dfe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5e02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5f56 <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    5e06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5e0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5e0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    5e10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5e12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5e16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5e18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5e1c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5e1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14f3a <setVariable>
    5e24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5e28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5f56 <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    5e2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5e30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5e34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5e36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5e38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17b44 <__modsi3>
    5e3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5e40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5e42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5e44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5e48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5e4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5e4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5e50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14f3a <setVariable>
    5e56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5e5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5f56 <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    5e5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5e62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5e66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5e68:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5e6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17b16 <__divsi3>
    5e70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5e72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5e74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5e76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5e7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5e7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5e80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5e82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14f3a <setVariable>
    5e88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5e8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5f56 <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    5e90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5e94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5e98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5e9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    5e9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5e9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5ea0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5ea2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5ea4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5ea8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5eaa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5eae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5eb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14f3a <setVariable>
    5eb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5eba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5f56 <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    5ebe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5ec2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5ec6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5ec8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    5eca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5ecc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5ece:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5ed0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5ed2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5ed6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5ed8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5edc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5ede:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14f3a <setVariable>
    5ee4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5ee8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 5f56 <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    5eea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5eee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5ef2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5ef4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    5ef6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5ef8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5efa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5efc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5efe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5f02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5f04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5f08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5f0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14f3a <setVariable>
    5f10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5f14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 5f56 <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    5f16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5f1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5f1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5f20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    5f22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5f24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5f26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5f28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5f2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5f2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5f30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5f34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5f36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14f3a <setVariable>
    5f3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5f40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 5f56 <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    5f42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-----------|-> pea 18804 <PutChar+0xc56>
    5f48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 1710c <KPrintF>
    5f4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    5f50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    5f52:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 5fae <continueFunction+0xeaa>
						break;
    5f54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           '-> nop
			}
			break;
    5f56:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----'-------------X bra.s 5f8c <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    5f58:	|  |  |  '--|--|--|--|--|--|--|--|--|--|-------------------> pea 1881c <PutChar+0xc6e>
    5f5e:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 1710c <KPrintF>
    5f64:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    5f66:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    5f68:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 5fae <continueFunction+0xeaa>
			break;
    5f6a:	|  |  |     |  '--|--|--|--|--|--|--|--|-------------------> nop
    5f6c:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 5f8c <continueFunction+0xe88>
			break;
    5f6e:	|  |  |     |     '--|--|--|--|--|--|--|-------------------> nop
    5f70:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 5f8c <continueFunction+0xe88>
			break;
    5f72:	|  |  |     |        '--|--|--|--|--|--|-------------------> nop
    5f74:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 5f8c <continueFunction+0xe88>
			break;
    5f76:	|  |  |     |           '--|--|--|--|--|-------------------> nop
    5f78:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 5f8c <continueFunction+0xe88>
			break;
    5f7a:	|  |  |     |              '--|--|--|--|-------------------> nop
    5f7c:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 5f8c <continueFunction+0xe88>
			break;
    5f7e:	|  |  |     |                 '--|--|--|-------------------> nop
    5f80:	|  |  |     +--------------------|--|--|-------------------- bra.s 5f8c <continueFunction+0xe88>
			break;
    5f82:	|  |  |     |                    '--|--|-------------------> nop
    5f84:	|  |  |     +-----------------------|--|-------------------- bra.s 5f8c <continueFunction+0xe88>
			break;
    5f86:	|  |  |     |                       '--|-------------------> nop
    5f88:	|  |  |     +--------------------------|-------------------- bra.s 5f8c <continueFunction+0xe88>
			break;
    5f8a:	|  |  |     |                          '-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    5f8c:	|  |  |     '----------------------------------------------> tst.w 72(sp)
    5f90:	+--|--|----------------------------------------------------- beq.s 5fa4 <continueFunction+0xea0>
    5f92:	|  |  |                                                      movea.l 80(sp),a0
    5f96:	|  |  |                                                      move.l 36(a0),d0
    5f9a:	|  |  |                                                      addq.l #1,d0
    5f9c:	|  |  |                                                      movea.l 80(sp),a0
    5fa0:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    5fa4:	'--|--|----------------------------------------------------> tst.w 74(sp)
    5fa8:	   |  '----------------------------------------------------- bne.w 512c <continueFunction+0x28>

	}
	return TRUE;
    5fac:	   |                                                         moveq #1,d0
}
    5fae:	   '-------------------------------------------------------> lea 76(sp),sp
    5fb2:	                                                             rts

00005fb4 <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    5fb4:	          lea -16(sp),sp
    5fb8:	          move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    5fba:	          move.l 24(sp),-(sp)
    5fbe:	          jsr 70da <pauseFunction>
    5fc4:	          addq.l #4,sp
	if (fun -> stack) 
    5fc6:	          movea.l 24(sp),a0
    5fca:	          move.l 24(a0),d0
    5fce:	      ,-- beq.s 5fe2 <finishFunction+0x2e>
	{
		KPrintF("finishfunction: error non empty stack");
    5fd0:	      |   pea 18848 <PutChar+0xc9a>
    5fd6:	      |   jsr 1710c <KPrintF>
    5fdc:	      |   addq.l #4,sp
		return;
    5fde:	,-----|-- bra.w 607c <finishFunction+0xc8>
	}
	FreeVec( fun -> compiledLines);
    5fe2:	|     '-> movea.l 24(sp),a0
    5fe6:	|         move.l 4(a0),12(sp)
    5fec:	|         move.l 1c810 <SysBase>,d0
    5ff2:	|         movea.l d0,a6
    5ff4:	|         movea.l 12(sp),a1
    5ff8:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    5ffc:	|         clr.l 16(sp)
    6000:	|     ,-- bra.s 6020 <finishFunction+0x6c>
    6002:	|  ,--|-> movea.l 24(sp),a0
    6006:	|  |  |   move.l 20(a0),d1
    600a:	|  |  |   move.l 16(sp),d0
    600e:	|  |  |   lsl.l #3,d0
    6010:	|  |  |   add.l d1,d0
    6012:	|  |  |   move.l d0,-(sp)
    6014:	|  |  |   jsr 14896 <unlinkVar>
    601a:	|  |  |   addq.l #4,sp
    601c:	|  |  |   addq.l #1,16(sp)
    6020:	|  |  '-> movea.l 24(sp),a0
    6024:	|  |      move.l 8(a0),d0
    6028:	|  |      cmp.l 16(sp),d0
    602c:	|  '----- bgt.s 6002 <finishFunction+0x4e>
	if( fun->numLocals > 0) {
    602e:	|         movea.l 24(sp),a0
    6032:	|         move.l 8(a0),d0
    6036:	|     ,-- ble.s 6052 <finishFunction+0x9e>
		FreeVec(fun -> localVars);
    6038:	|     |   movea.l 24(sp),a0
    603c:	|     |   move.l 20(a0),8(sp)
    6042:	|     |   move.l 1c810 <SysBase>,d0
    6048:	|     |   movea.l d0,a6
    604a:	|     |   movea.l 8(sp),a1
    604e:	|     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    6052:	|     '-> moveq #28,d0
    6054:	|         add.l 24(sp),d0
    6058:	|         move.l d0,-(sp)
    605a:	|         jsr 14896 <unlinkVar>
    6060:	|         addq.l #4,sp
	FreeVec(fun);
    6062:	|         move.l 24(sp),4(sp)
    6068:	|         move.l 1c810 <SysBase>,d0
    606e:	|         movea.l d0,a6
    6070:	|         movea.l 4(sp),a1
    6074:	|         jsr -690(a6)
	fun = NULL;
    6078:	|         clr.l 24(sp)
}
    607c:	'-------> movea.l (sp)+,a6
    607e:	          lea 16(sp),sp
    6082:	          rts

00006084 <freezeSubs>:

void freezeSubs () {
    6084:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6086:	          move.l 1c7a8 <allRunningFunctions>,(sp)

	while (thisFunction) {
    608c:	   ,----- bra.s 60aa <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    608e:	,--|----> movea.l (sp),a0
    6090:	|  |      move.w 52(a0),d0
    6094:	|  |  ,-- bne.s 60a4 <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    6096:	|  |  |   movea.l (sp),a0
    6098:	|  |  |   move.b 56(a0),d0
    609c:	|  |  |   addq.b #1,d0
    609e:	|  |  |   movea.l (sp),a0
    60a0:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    60a4:	|  |  '-> movea.l (sp),a0
    60a6:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    60aa:	|  '----> tst.l (sp)
    60ac:	'-------- bne.s 608e <freezeSubs+0xa>
	}
}
    60ae:	          nop
    60b0:	          nop
    60b2:	          addq.l #4,sp
    60b4:	          rts

000060b6 <handleInput>:

BOOL handleInput () {
    60b6:	             lea -16(sp),sp
    60ba:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    60bc:	             move.l 1c920 <overRegion>,d0
    60c2:	         ,-- bne.s 60ca <handleInput+0x14>
    60c4:	         |   jsr 15884 <getOverRegion>

	if (input.justMoved) {
    60ca:	         '-> move.w 1c7c6 <input+0x4>,d0
    60d0:	         ,-- beq.s 610e <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    60d2:	         |   movea.l 1c180 <currentEvents>,a0
    60d8:	         |   move.l 16(a0),d0
    60dc:	         +-- beq.s 610e <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    60de:	         |   move.l 1c7e0 <noStack>,d1
    60e4:	         |   movea.l 1c180 <currentEvents>,a0
    60ea:	         |   move.l 16(a0),d0
    60ee:	         |   pea 1 <_start+0x1>
    60f2:	         |   move.l d1,-(sp)
    60f4:	         |   clr.l -(sp)
    60f6:	         |   clr.l -(sp)
    60f8:	         |   move.l d0,-(sp)
    60fa:	         |   jsr 7368 <startNewFunctionNum>
    6100:	         |   lea 20(sp),sp
    6104:	         |   tst.l d0
    6106:	         +-- bne.s 610e <handleInput+0x58>
    6108:	         |   clr.w d0
    610a:	,--------|-- bra.w 6314 <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    610e:	|        '-> clr.w 1c7c6 <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    6114:	|            move.l 1c7d8 <lastRegion>,d1
    611a:	|            move.l 1c920 <overRegion>,d0
    6120:	|            cmp.l d1,d0
    6122:	|  ,-------- beq.w 61fa <handleInput+0x144>
    6126:	|  |         movea.l 1c180 <currentEvents>,a0
    612c:	|  |         move.l 20(a0),d0
    6130:	|  +-------- beq.w 61fa <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    6134:	|  |         moveq #12,d0
    6136:	|  |         move.l d0,16(sp)
    613a:	|  |         clr.l 12(sp)
    613e:	|  |         move.l 1c810 <SysBase>,d0
    6144:	|  |         movea.l d0,a6
    6146:	|  |         move.l 16(sp),d0
    614a:	|  |         move.l 12(sp),d1
    614e:	|  |         jsr -684(a6)
    6152:	|  |         move.l d0,8(sp)
    6156:	|  |         move.l 8(sp),d0
    615a:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    615e:	|  |         move.l 4(sp),d0
    6162:	|  |     ,-- bne.s 6178 <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    6164:	|  |     |   pea 1886e <PutChar+0xcc0>
    616a:	|  |     |   jsr 1710c <KPrintF>
    6170:	|  |     |   addq.l #4,sp
			return FALSE;
    6172:	|  |     |   clr.w d0
    6174:	+--|-----|-- bra.w 6314 <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    6178:	|  |     '-> movea.l 4(sp),a0
    617c:	|  |         clr.l (a0)
		if (overRegion) {
    617e:	|  |         move.l 1c920 <overRegion>,d0
    6184:	|  |  ,----- beq.s 61ac <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    6186:	|  |  |      movea.l 1c920 <overRegion>,a0
    618c:	|  |  |      movea.l 28(a0),a0
    6190:	|  |  |      move.l 4(a0),d1
    6194:	|  |  |      move.l 4(sp),d0
    6198:	|  |  |      move.l d1,-(sp)
    619a:	|  |  |      pea 7 <_start+0x7>
    619e:	|  |  |      move.l d0,-(sp)
    61a0:	|  |  |      jsr 14f3a <setVariable>
    61a6:	|  |  |      lea 12(sp),sp
    61aa:	|  |  |  ,-- bra.s 61c2 <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    61ac:	|  |  '--|-> move.l 4(sp),d0
    61b0:	|  |     |   clr.l -(sp)
    61b2:	|  |     |   pea 1 <_start+0x1>
    61b6:	|  |     |   move.l d0,-(sp)
    61b8:	|  |     |   jsr 14f3a <setVariable>
    61be:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;
    61c2:	|  |     '-> movea.l 4(sp),a0
    61c6:	|  |         clr.l 8(a0)
		if (! startNewFunctionNum (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    61ca:	|  |         movea.l 1c180 <currentEvents>,a0
    61d0:	|  |         move.l 20(a0),d0
    61d4:	|  |         pea 1 <_start+0x1>
    61d8:	|  |         lea 8(sp),a0
    61dc:	|  |         move.l a0,-(sp)
    61de:	|  |         clr.l -(sp)
    61e0:	|  |         pea 1 <_start+0x1>
    61e4:	|  |         move.l d0,-(sp)
    61e6:	|  |         jsr 7368 <startNewFunctionNum>
    61ec:	|  |         lea 20(sp),sp
    61f0:	|  |         tst.l d0
    61f2:	|  +-------- bne.s 61fa <handleInput+0x144>
    61f4:	|  |         clr.w d0
    61f6:	+--|-------- bra.w 6314 <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    61fa:	|  '-------> move.w 1c7c8 <input+0x6>,d0
    6200:	|        ,-- beq.s 623e <handleInput+0x188>
    6202:	|        |   movea.l 1c180 <currentEvents>,a0
    6208:	|        |   move.l 4(a0),d0
    620c:	|        +-- beq.s 623e <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    620e:	|        |   move.l 1c7e0 <noStack>,d1
    6214:	|        |   movea.l 1c180 <currentEvents>,a0
    621a:	|        |   move.l 4(a0),d0
    621e:	|        |   pea 1 <_start+0x1>
    6222:	|        |   move.l d1,-(sp)
    6224:	|        |   clr.l -(sp)
    6226:	|        |   clr.l -(sp)
    6228:	|        |   move.l d0,-(sp)
    622a:	|        |   jsr 7368 <startNewFunctionNum>
    6230:	|        |   lea 20(sp),sp
    6234:	|        |   tst.l d0
    6236:	|        +-- bne.s 623e <handleInput+0x188>
    6238:	|        |   clr.w d0
    623a:	+--------|-- bra.w 6314 <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    623e:	|        '-> move.w 1c7ca <input+0x8>,d0
    6244:	|        ,-- beq.s 6282 <handleInput+0x1cc>
    6246:	|        |   movea.l 1c180 <currentEvents>,a0
    624c:	|        |   move.l 12(a0),d0
    6250:	|        +-- beq.s 6282 <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6252:	|        |   move.l 1c7e0 <noStack>,d1
    6258:	|        |   movea.l 1c180 <currentEvents>,a0
    625e:	|        |   move.l 12(a0),d0
    6262:	|        |   pea 1 <_start+0x1>
    6266:	|        |   move.l d1,-(sp)
    6268:	|        |   clr.l -(sp)
    626a:	|        |   clr.l -(sp)
    626c:	|        |   move.l d0,-(sp)
    626e:	|        |   jsr 7368 <startNewFunctionNum>
    6274:	|        |   lea 20(sp),sp
    6278:	|        |   tst.l d0
    627a:	|        +-- bne.s 6282 <handleInput+0x1cc>
    627c:	|        |   clr.w d0
    627e:	+--------|-- bra.w 6314 <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    6282:	|        '-> move.w 1c7c2 <input>,d0
    6288:	|        ,-- beq.s 62c0 <handleInput+0x20a>
    628a:	|        |   movea.l 1c180 <currentEvents>,a0
    6290:	|        |   move.l (a0),d0
    6292:	|        +-- beq.s 62c0 <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6294:	|        |   move.l 1c7e0 <noStack>,d1
    629a:	|        |   movea.l 1c180 <currentEvents>,a0
    62a0:	|        |   move.l (a0),d0
    62a2:	|        |   pea 1 <_start+0x1>
    62a6:	|        |   move.l d1,-(sp)
    62a8:	|        |   clr.l -(sp)
    62aa:	|        |   clr.l -(sp)
    62ac:	|        |   move.l d0,-(sp)
    62ae:	|        |   jsr 7368 <startNewFunctionNum>
    62b4:	|        |   lea 20(sp),sp
    62b8:	|        |   tst.l d0
    62ba:	|        +-- bne.s 62c0 <handleInput+0x20a>
    62bc:	|        |   clr.w d0
    62be:	+--------|-- bra.s 6314 <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    62c0:	|        '-> move.w 1c7c4 <input+0x2>,d0
    62c6:	|        ,-- beq.s 6302 <handleInput+0x24c>
    62c8:	|        |   movea.l 1c180 <currentEvents>,a0
    62ce:	|        |   move.l 8(a0),d0
    62d2:	|        +-- beq.s 6302 <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    62d4:	|        |   move.l 1c7e0 <noStack>,d1
    62da:	|        |   movea.l 1c180 <currentEvents>,a0
    62e0:	|        |   move.l 8(a0),d0
    62e4:	|        |   pea 1 <_start+0x1>
    62e8:	|        |   move.l d1,-(sp)
    62ea:	|        |   clr.l -(sp)
    62ec:	|        |   clr.l -(sp)
    62ee:	|        |   move.l d0,-(sp)
    62f0:	|        |   jsr 7368 <startNewFunctionNum>
    62f6:	|        |   lea 20(sp),sp
    62fa:	|        |   tst.l d0
    62fc:	|        +-- bne.s 6302 <handleInput+0x24c>
    62fe:	|        |   clr.w d0
    6300:	+--------|-- bra.s 6314 <handleInput+0x25e>
	}

	lastRegion = overRegion;
    6302:	|        '-> move.l 1c920 <overRegion>,d0
    6308:	|            move.l d0,1c7d8 <lastRegion>
	return runSludge ();
    630e:	|            jsr 7136 <runSludge>
}
    6314:	'----------> movea.l (sp)+,a6
    6316:	             lea 16(sp),sp
    631a:	             rts

0000631c <initSludge>:

BOOL initSludge (char * filename) {
    631c:	             lea -292(sp),sp
    6320:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    6324:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    6328:	             jsr ab84 <makeNullAnim>
    632e:	             move.l d0,1c70a <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    6334:	             pea 1c7ba <gameVersion>
    633a:	             pea 188a4 <PutChar+0xcf6>
    6340:	             pea 45 <_start+0x45>
    6344:	             pea 47 <_start+0x47>
    6348:	             move.l 332(sp),-(sp)
    634c:	             jsr 6d6a <openAndVerify>
    6352:	             lea 20(sp),sp
    6356:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    635a:	         ,-- bne.s 6362 <initSludge+0x46>
    635c:	         |   clr.w d0
    635e:	,--------|-- bra.w 6a8a <initSludge+0x76e>
	if (FGetC (fp)) {
    6362:	|        '-> move.l 288(sp),284(sp)
    6368:	|            move.l 1c818 <DOSBase>,d0
    636e:	|            movea.l d0,a6
    6370:	|            move.l 284(sp),d1
    6374:	|            jsr -306(a6)
    6378:	|            move.l d0,280(sp)
    637c:	|            move.l 280(sp),d0
    6380:	|  ,-------- beq.w 652a <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    6384:	|  |         move.l 288(sp),-(sp)
    6388:	|  |         jsr 6bc <get2bytes>
    638e:	|  |         addq.l #4,sp
    6390:	|  |         move.l d0,1c7e4 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    6396:	|  |         move.l 1c7e4 <numBIFNames>,d0
    639c:	|  |         move.l d0,276(sp)
    63a0:	|  |         clr.l 272(sp)
    63a4:	|  |         move.l 1c810 <SysBase>,d0
    63aa:	|  |         movea.l d0,a6
    63ac:	|  |         move.l 276(sp),d0
    63b0:	|  |         move.l 272(sp),d1
    63b4:	|  |         jsr -684(a6)
    63b8:	|  |         move.l d0,268(sp)
    63bc:	|  |         move.l 268(sp),d0
    63c0:	|  |         move.l d0,1c7a0 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    63c6:	|  |         move.l 1c7a0 <allBIFNames>,d0
    63cc:	|  |     ,-- bne.s 63d4 <initSludge+0xb8>
    63ce:	|  |     |   clr.w d0
    63d0:	+--|-----|-- bra.w 6a8a <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    63d4:	|  |     '-> clr.l 304(sp)
    63d8:	|  |     ,-- bra.s 63fe <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    63da:	|  |  ,--|-> move.l 1c7a0 <allBIFNames>,d1
    63e0:	|  |  |  |   move.l 304(sp),d0
    63e4:	|  |  |  |   add.l d0,d0
    63e6:	|  |  |  |   add.l d0,d0
    63e8:	|  |  |  |   movea.l d1,a2
    63ea:	|  |  |  |   adda.l d0,a2
    63ec:	|  |  |  |   move.l 288(sp),-(sp)
    63f0:	|  |  |  |   jsr b02 <readString>
    63f6:	|  |  |  |   addq.l #4,sp
    63f8:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    63fa:	|  |  |  |   addq.l #1,304(sp)
    63fe:	|  |  |  '-> move.l 1c7e4 <numBIFNames>,d0
    6404:	|  |  |      cmp.l 304(sp),d0
    6408:	|  |  '----- bgt.s 63da <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    640a:	|  |         move.l 288(sp),-(sp)
    640e:	|  |         jsr 6bc <get2bytes>
    6414:	|  |         addq.l #4,sp
    6416:	|  |         move.l d0,1c7f0 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    641c:	|  |         move.l 1c7f0 <numUserFunc>,d0
    6422:	|  |         move.l d0,264(sp)
    6426:	|  |         clr.l 260(sp)
    642a:	|  |         move.l 1c810 <SysBase>,d0
    6430:	|  |         movea.l d0,a6
    6432:	|  |         move.l 264(sp),d0
    6436:	|  |         move.l 260(sp),d1
    643a:	|  |         jsr -684(a6)
    643e:	|  |         move.l d0,256(sp)
    6442:	|  |         move.l 256(sp),d0
    6446:	|  |         move.l d0,1c7ac <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    644c:	|  |         move.l 1c7ac <allUserFunc>,d0
    6452:	|  |     ,-- bne.s 645a <initSludge+0x13e>
    6454:	|  |     |   clr.w d0
    6456:	+--|-----|-- bra.w 6a8a <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    645a:	|  |     '-> clr.l 300(sp)
    645e:	|  |     ,-- bra.s 6484 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    6460:	|  |  ,--|-> move.l 1c7ac <allUserFunc>,d1
    6466:	|  |  |  |   move.l 300(sp),d0
    646a:	|  |  |  |   add.l d0,d0
    646c:	|  |  |  |   add.l d0,d0
    646e:	|  |  |  |   movea.l d1,a2
    6470:	|  |  |  |   adda.l d0,a2
    6472:	|  |  |  |   move.l 288(sp),-(sp)
    6476:	|  |  |  |   jsr b02 <readString>
    647c:	|  |  |  |   addq.l #4,sp
    647e:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    6480:	|  |  |  |   addq.l #1,300(sp)
    6484:	|  |  |  '-> move.l 1c7f0 <numUserFunc>,d0
    648a:	|  |  |      cmp.l 300(sp),d0
    648e:	|  |  '----- bgt.s 6460 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    6490:	|  |         move.l 1c7ba <gameVersion>,d0
    6496:	|  |         cmpi.l #258,d0
    649c:	|  +-------- ble.w 652a <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    64a0:	|  |         move.l 288(sp),-(sp)
    64a4:	|  |         jsr 6bc <get2bytes>
    64aa:	|  |         addq.l #4,sp
    64ac:	|  |         move.l d0,1c7ec <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    64b2:	|  |         move.l 1c7ec <numResourceNames>,d0
    64b8:	|  |         add.l d0,d0
    64ba:	|  |         add.l d0,d0
    64bc:	|  |         move.l d0,252(sp)
    64c0:	|  |         clr.l 248(sp)
    64c4:	|  |         move.l 1c810 <SysBase>,d0
    64ca:	|  |         movea.l d0,a6
    64cc:	|  |         move.l 252(sp),d0
    64d0:	|  |         move.l 248(sp),d1
    64d4:	|  |         jsr -684(a6)
    64d8:	|  |         move.l d0,244(sp)
    64dc:	|  |         move.l 244(sp),d0
    64e0:	|  |         move.l d0,1c7a4 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    64e6:	|  |         move.l 1c7a4 <allResourceNames>,d0
    64ec:	|  |     ,-- bne.s 64f4 <initSludge+0x1d8>
    64ee:	|  |     |   clr.w d0
    64f0:	+--|-----|-- bra.w 6a8a <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    64f4:	|  |     '-> clr.l 296(sp)
    64f8:	|  |     ,-- bra.s 651e <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    64fa:	|  |  ,--|-> move.l 1c7a4 <allResourceNames>,d1
    6500:	|  |  |  |   move.l 296(sp),d0
    6504:	|  |  |  |   add.l d0,d0
    6506:	|  |  |  |   add.l d0,d0
    6508:	|  |  |  |   movea.l d1,a2
    650a:	|  |  |  |   adda.l d0,a2
    650c:	|  |  |  |   move.l 288(sp),-(sp)
    6510:	|  |  |  |   jsr b02 <readString>
    6516:	|  |  |  |   addq.l #4,sp
    6518:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    651a:	|  |  |  |   addq.l #1,296(sp)
    651e:	|  |  |  '-> move.l 1c7ec <numResourceNames>,d0
    6524:	|  |  |      cmp.l 296(sp),d0
    6528:	|  |  '----- bgt.s 64fa <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    652a:	|  '-------> move.l #129,1c7cc <input+0xa>
	input.mouseY = 100;
    6534:	|            moveq #100,d0
    6536:	|            move.l d0,1c7d0 <input+0xe>
	winWidth = get2bytes (fp);
    653c:	|            move.l 288(sp),-(sp)
    6540:	|            jsr 6bc <get2bytes>
    6546:	|            addq.l #4,sp
    6548:	|            move.l d0,1c764 <winWidth>
	winHeight = get2bytes (fp);
    654e:	|            move.l 288(sp),-(sp)
    6552:	|            jsr 6bc <get2bytes>
    6558:	|            addq.l #4,sp
    655a:	|            move.l d0,1c768 <winHeight>
	specialSettings = FGetC (fp);
    6560:	|            move.l 288(sp),240(sp)
    6566:	|            move.l 1c818 <DOSBase>,d0
    656c:	|            movea.l d0,a6
    656e:	|            move.l 240(sp),d1
    6572:	|            jsr -306(a6)
    6576:	|            move.l d0,236(sp)
    657a:	|            move.l 236(sp),d0
    657e:	|            move.l d0,1c7f4 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    6584:	|            move.l 288(sp),232(sp)
    658a:	|            move.l 1c818 <DOSBase>,d0
    6590:	|            movea.l d0,a6
    6592:	|            move.l 232(sp),d1
    6596:	|            jsr -306(a6)
    659a:	|            move.l d0,228(sp)
    659e:	|            move.l 228(sp),d0
    65a2:	|            move.l d0,-(sp)
    65a4:	|            pea 3e8 <encodeFilename+0xea>
    65a8:	|            jsr 17b16 <__divsi3>
    65ae:	|            addq.l #8,sp
    65b0:	|            move.l d0,1c192 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    65b6:	|            move.l 288(sp),-(sp)
    65ba:	|            jsr b02 <readString>
    65c0:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    65c2:	|            move.l 288(sp),224(sp)
    65c8:	|            move.l #116658,220(sp)
    65d0:	|            moveq #8,d1
    65d2:	|            move.l d1,216(sp)
    65d6:	|            moveq #1,d0
    65d8:	|            move.l d0,212(sp)
    65dc:	|            move.l 1c818 <DOSBase>,d0
    65e2:	|            movea.l d0,a6
    65e4:	|            move.l 224(sp),d1
    65e8:	|            move.l 220(sp),d2
    65ec:	|            move.l 216(sp),d3
    65f0:	|            move.l 212(sp),d4
    65f4:	|            jsr -324(a6)
    65f8:	|            move.l d0,208(sp)
    65fc:	|            move.l 208(sp),d0
    6600:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    6604:	|            moveq #1,d1
    6606:	|            cmp.l 204(sp),d1
    660a:	|        ,-- beq.s 661a <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    660c:	|        |   pea 188dd <PutChar+0xd2f>
    6612:	|        |   jsr 1710c <KPrintF>
    6618:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    661a:	|        '-> move.l 1c7ba <gameVersion>,d0
    6620:	|            cmpi.l #258,d0
    6626:	|        ,-- ble.s 6636 <initSludge+0x31a>
    6628:	|        |   move.l 288(sp),-(sp)
    662c:	|        |   jsr b02 <readString>
    6632:	|        |   addq.l #4,sp
    6634:	|     ,--|-- bra.s 664a <initSludge+0x32e>
    6636:	|     |  '-> pea 188fb <PutChar+0xd4d>
    663c:	|     |      pea 188fb <PutChar+0xd4d>
    6642:	|     |      jsr 13b74 <joinStrings>
    6648:	|     |      addq.l #8,sp
    664a:	|     '----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    664e:	|            move.l 1c7ba <gameVersion>,d0
    6654:	|            cmpi.l #258,d0
    665a:	|     ,----- ble.s 667c <initSludge+0x360>
    665c:	|     |      move.l 288(sp),196(sp)
    6662:	|     |      move.l 1c818 <DOSBase>,d0
    6668:	|     |      movea.l d0,a6
    666a:	|     |      move.l 196(sp),d1
    666e:	|     |      jsr -306(a6)
    6672:	|     |      move.l d0,192(sp)
    6676:	|     |      move.l 192(sp),d0
    667a:	|     |  ,-- bra.s 667e <initSludge+0x362>
    667c:	|     '--|-> moveq #0,d0
    667e:	|        '-> move.l d0,1c8ec <gameSettings+0x4>
	makeLanguageTable (fp);
    6684:	|            move.l 288(sp),-(sp)
    6688:	|            jsr 1352a <makeLanguageTable>
    668e:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    6690:	|            move.l 1c7ba <gameVersion>,d0
    6696:	|            cmpi.l #261,d0
    669c:	|        ,-- ble.s 66ea <initSludge+0x3ce>
	{
		FGetC(fp);
    669e:	|        |   move.l 288(sp),188(sp)
    66a4:	|        |   move.l 1c818 <DOSBase>,d0
    66aa:	|        |   movea.l d0,a6
    66ac:	|        |   move.l 188(sp),d1
    66b0:	|        |   jsr -306(a6)
    66b4:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    66b8:	|        |   move.l 288(sp),180(sp)
    66be:	|        |   move.l 1c818 <DOSBase>,d0
    66c4:	|        |   movea.l d0,a6
    66c6:	|        |   move.l 180(sp),d1
    66ca:	|        |   jsr -306(a6)
    66ce:	|        |   move.l d0,176(sp)
		getFloat (fp);
    66d2:	|        |   move.l 288(sp),-(sp)
    66d6:	|        |   jsr 7d8 <getFloat>
    66dc:	|        |   addq.l #4,sp
		getFloat (fp);
    66de:	|        |   move.l 288(sp),-(sp)
    66e2:	|        |   jsr 7d8 <getFloat>
    66e8:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    66ea:	|        '-> move.l 288(sp),-(sp)
    66ee:	|            jsr b02 <readString>
    66f4:	|            addq.l #4,sp
    66f6:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    66fa:	|            pea 188fc <PutChar+0xd4e>
    6700:	|            move.l 176(sp),-(sp)
    6704:	|            jsr 13af4 <strcmp>
    670a:	|            addq.l #8,sp
    670c:	|            tst.l d0
    670e:	|        ,-- beq.s 6716 <initSludge+0x3fa>
		return FALSE;
    6710:	|        |   clr.w d0
    6712:	+--------|-- bra.w 6a8a <initSludge+0x76e>
	}
	FreeVec( checker);
    6716:	|        '-> move.l 172(sp),168(sp)
    671c:	|            move.l 1c810 <SysBase>,d0
    6722:	|            movea.l d0,a6
    6724:	|            movea.l 168(sp),a1
    6728:	|            jsr -690(a6)
	checker = NULL;
    672c:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    6730:	|            move.l 288(sp),164(sp)
    6736:	|            move.l 1c818 <DOSBase>,d0
    673c:	|            movea.l d0,a6
    673e:	|            move.l 164(sp),d1
    6742:	|            jsr -306(a6)
    6746:	|            move.l d0,160(sp)
    674a:	|            move.l 160(sp),d0
    674e:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    6752:	|            moveq #0,d0
    6754:	|            move.b 159(sp),d0
    6758:	|            moveq #1,d1
    675a:	|            and.l d1,d0
    675c:	|        ,-- beq.s 67b4 <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    675e:	|        |   move.l 1c818 <DOSBase>,d0
    6764:	|        |   movea.l d0,a6
    6766:	|        |   jsr -60(a6)
    676a:	|        |   move.l d0,38(sp)
    676e:	|        |   move.l 38(sp),d0
    6772:	|        |   move.l d0,34(sp)
    6776:	|        |   move.l #100612,30(sp)
    677e:	|        |   moveq #54,d0
    6780:	|        |   move.l d0,26(sp)
    6784:	|        |   move.l 1c818 <DOSBase>,d0
    678a:	|        |   movea.l d0,a6
    678c:	|        |   move.l 34(sp),d1
    6790:	|        |   move.l 30(sp),d2
    6794:	|        |   move.l 26(sp),d3
    6798:	|        |   jsr -48(a6)
    679c:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    67a0:	|        |   pea 1893b <PutChar+0xd8d>
    67a6:	|        |   jsr 1710c <KPrintF>
    67ac:	|        |   addq.l #4,sp
		return FALSE;
    67ae:	|        |   clr.w d0
    67b0:	+--------|-- bra.w 6a8a <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    67b4:	|        '-> move.l 288(sp),-(sp)
    67b8:	|            jsr 6bc <get2bytes>
    67be:	|            addq.l #4,sp
    67c0:	|            move.l d0,1c7e8 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    67c6:	|            move.l 1c7e8 <numGlobals>,d0
    67cc:	|            lsl.l #3,d0
    67ce:	|            move.l d0,154(sp)
    67d2:	|            clr.l 150(sp)
    67d6:	|            move.l 1c810 <SysBase>,d0
    67dc:	|            movea.l d0,a6
    67de:	|            move.l 154(sp),d0
    67e2:	|            move.l 150(sp),d1
    67e6:	|            jsr -684(a6)
    67ea:	|            move.l d0,146(sp)
    67ee:	|            move.l 146(sp),d0
    67f2:	|            move.l d0,1c7be <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    67f8:	|            move.l 1c7be <globalVars>,d0
    67fe:	|        ,-- bne.s 681c <initSludge+0x500>
    6800:	|        |   move.l 1c7e8 <numGlobals>,d0
    6806:	|        +-- ble.s 681c <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    6808:	|        |   pea 18973 <PutChar+0xdc5>
    680e:	|        |   jsr 1710c <KPrintF>
    6814:	|        |   addq.l #4,sp
		return FALSE;
    6816:	|        |   clr.w d0
    6818:	+--------|-- bra.w 6a8a <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    681c:	|        '-> clr.l 308(sp)
    6820:	|        ,-- bra.s 6838 <initSludge+0x51c>
    6822:	|     ,--|-> move.l 1c7be <globalVars>,d1
    6828:	|     |  |   move.l 308(sp),d0
    682c:	|     |  |   lsl.l #3,d0
    682e:	|     |  |   movea.l d1,a0
    6830:	|     |  |   adda.l d0,a0
    6832:	|     |  |   clr.l (a0)
    6834:	|     |  |   addq.l #1,308(sp)
    6838:	|     |  '-> move.l 1c7e8 <numGlobals>,d0
    683e:	|     |      cmp.l 308(sp),d0
    6842:	|     '----- bgt.s 6822 <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    6844:	|            move.l 1c8ec <gameSettings+0x4>,d0
    684a:	|            clr.l -(sp)
    684c:	|            move.l d0,-(sp)
    684e:	|            move.l 296(sp),-(sp)
    6852:	|            jsr 7858 <setFileIndices>
    6858:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    685c:	|            pea 1 <_start+0x1>
    6860:	|            jsr 7512 <getNumberedString>
    6866:	|            addq.l #4,sp
    6868:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    686c:	|            move.l 142(sp),-(sp)
    6870:	|            jsr 2fe <encodeFilename>
    6876:	|            addq.l #4,sp
    6878:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    687c:	|            move.l 142(sp),134(sp)
    6882:	|            move.l 1c810 <SysBase>,d0
    6888:	|            movea.l d0,a6
    688a:	|            movea.l 134(sp),a1
    688e:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    6892:	|            move.l 138(sp),130(sp)
    6898:	|            move.l 1c818 <DOSBase>,d0
    689e:	|            movea.l d0,a6
    68a0:	|            move.l 130(sp),d1
    68a4:	|            jsr -120(a6)
    68a8:	|            move.l d0,126(sp)
    68ac:	|            move.l 126(sp),d0
    68b0:	|            move.l d0,292(sp)
	if(lock == 0) {
    68b4:	|        ,-- bne.s 68e2 <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    68b6:	|        |   move.l 138(sp),122(sp)
    68bc:	|        |   moveq #-2,d1
    68be:	|        |   move.l d1,118(sp)
    68c2:	|        |   move.l 1c818 <DOSBase>,d0
    68c8:	|        |   movea.l d0,a6
    68ca:	|        |   move.l 122(sp),d1
    68ce:	|        |   move.l 118(sp),d2
    68d2:	|        |   jsr -84(a6)
    68d6:	|        |   move.l d0,114(sp)
    68da:	|        |   move.l 114(sp),d0
    68de:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    68e2:	|        '-> move.l 292(sp),110(sp)
    68e8:	|            move.l 1c818 <DOSBase>,d0
    68ee:	|            movea.l d0,a6
    68f0:	|            move.l 110(sp),d1
    68f4:	|            jsr -126(a6)
    68f8:	|            move.l d0,106(sp)
    68fc:	|            move.l 106(sp),d0
    6900:	|        ,-- bne.s 695c <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    6902:	|        |   move.l 138(sp),-(sp)
    6906:	|        |   pea 189a6 <PutChar+0xdf8>
    690c:	|        |   jsr 1710c <KPrintF>
    6912:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    6914:	|        |   move.l 1c818 <DOSBase>,d0
    691a:	|        |   movea.l d0,a6
    691c:	|        |   jsr -60(a6)
    6920:	|        |   move.l d0,58(sp)
    6924:	|        |   move.l 58(sp),d0
    6928:	|        |   move.l d0,54(sp)
    692c:	|        |   move.l #100819,50(sp)
    6934:	|        |   moveq #40,d0
    6936:	|        |   move.l d0,46(sp)
    693a:	|        |   move.l 1c818 <DOSBase>,d0
    6940:	|        |   movea.l d0,a6
    6942:	|        |   move.l 54(sp),d1
    6946:	|        |   move.l 50(sp),d2
    694a:	|        |   move.l 46(sp),d3
    694e:	|        |   jsr -48(a6)
    6952:	|        |   move.l d0,42(sp)
		return FALSE;
    6956:	|        |   clr.w d0
    6958:	+--------|-- bra.w 6a8a <initSludge+0x76e>
	}

	FreeVec(gameName);
    695c:	|        '-> move.l 138(sp),102(sp)
    6962:	|            move.l 1c810 <SysBase>,d0
    6968:	|            movea.l d0,a6
    696a:	|            movea.l 102(sp),a1
    696e:	|            jsr -690(a6)

	readIniFile (filename);
    6972:	|            move.l 316(sp),-(sp)
    6976:	|            jsr 1365e <readIniFile>
    697c:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    697e:	|            jsr 13430 <getLanguageForFileB>
    6984:	|            move.l d0,1c184 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    698a:	|            move.l 1c184 <languageNum>,d0
    6990:	|        ,-- bpl.s 69a0 <initSludge+0x684>
    6992:	|        |   pea 189fc <PutChar+0xe4e>
    6998:	|        |   jsr 1710c <KPrintF>
    699e:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    69a0:	|        '-> move.l 1c184 <languageNum>,d0
    69a6:	|            move.l d0,d1
    69a8:	|            move.l 1c8ec <gameSettings+0x4>,d0
    69ae:	|            move.l d1,-(sp)
    69b0:	|            move.l d0,-(sp)
    69b2:	|            clr.l -(sp)
    69b4:	|            jsr 7858 <setFileIndices>
    69ba:	|            lea 12(sp),sp

	if (dataFol[0]) {
    69be:	|            movea.l 200(sp),a0
    69c2:	|            move.b (a0),d0
    69c4:	|     ,----- beq.w 6a6e <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    69c8:	|     |      move.l 200(sp),-(sp)
    69cc:	|     |      jsr 2fe <encodeFilename>
    69d2:	|     |      addq.l #4,sp
    69d4:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    69d8:	|     |      move.l 98(sp),94(sp)
    69de:	|     |      move.l 1c818 <DOSBase>,d0
    69e4:	|     |      movea.l d0,a6
    69e6:	|     |      move.l 94(sp),d1
    69ea:	|     |      jsr -120(a6)
    69ee:	|     |      move.l d0,90(sp)
    69f2:	|     |      move.l 90(sp),d0
    69f6:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    69fa:	|     |  ,-- bne.s 6a28 <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    69fc:	|     |  |   move.l 98(sp),86(sp)
    6a02:	|     |  |   moveq #-2,d1
    6a04:	|     |  |   move.l d1,82(sp)
    6a08:	|     |  |   move.l 1c818 <DOSBase>,d0
    6a0e:	|     |  |   movea.l d0,a6
    6a10:	|     |  |   move.l 86(sp),d1
    6a14:	|     |  |   move.l 82(sp),d2
    6a18:	|     |  |   jsr -84(a6)
    6a1c:	|     |  |   move.l d0,78(sp)
    6a20:	|     |  |   move.l 78(sp),d0
    6a24:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    6a28:	|     |  '-> move.l 292(sp),74(sp)
    6a2e:	|     |      move.l 1c818 <DOSBase>,d0
    6a34:	|     |      movea.l d0,a6
    6a36:	|     |      move.l 74(sp),d1
    6a3a:	|     |      jsr -126(a6)
    6a3e:	|     |      move.l d0,70(sp)
    6a42:	|     |      move.l 70(sp),d0
    6a46:	|     |  ,-- bne.s 6a58 <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    6a48:	|     |  |   move.l 1c818 <DOSBase>,d0
    6a4e:	|     |  |   movea.l d0,a6
    6a50:	|     |  |   jsr -60(a6)
    6a54:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    6a58:	|     |  '-> move.l 98(sp),62(sp)
    6a5e:	|     |      move.l 1c810 <SysBase>,d0
    6a64:	|     |      movea.l d0,a6
    6a66:	|     |      movea.l 62(sp),a1
    6a6a:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    6a6e:	|     '----> movea.l 1c768 <winHeight>,a0
    6a74:	|            lea -15(a0),a0
    6a78:	|            move.l a0,d0
    6a7a:	|            move.l d0,-(sp)
    6a7c:	|            pea a <_start+0xa>
    6a80:	|            jsr 829e <positionStatus>
    6a86:	|            addq.l #8,sp

	return TRUE;
    6a88:	|            moveq #1,d0
}
    6a8a:	'----------> movem.l (sp)+,d2-d4/a2/a6
    6a8e:	             lea 292(sp),sp
    6a92:	             rts

00006a94 <killSpeechTimers>:

void killSpeechTimers () {
    6a94:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6a96:	          move.l 1c7a8 <allRunningFunctions>,(sp)

	while (thisFunction) {
    6a9c:	   ,----- bra.s 6ac8 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    6a9e:	,--|----> movea.l (sp),a0
    6aa0:	|  |      move.b 56(a0),d0
    6aa4:	|  |  ,-- bne.s 6ac2 <killSpeechTimers+0x2e>
    6aa6:	|  |  |   movea.l (sp),a0
    6aa8:	|  |  |   move.w 50(a0),d0
    6aac:	|  |  +-- beq.s 6ac2 <killSpeechTimers+0x2e>
    6aae:	|  |  |   movea.l (sp),a0
    6ab0:	|  |  |   move.l 12(a0),d0
    6ab4:	|  |  +-- beq.s 6ac2 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    6ab6:	|  |  |   movea.l (sp),a0
    6ab8:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    6abc:	|  |  |   movea.l (sp),a0
    6abe:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    6ac2:	|  |  '-> movea.l (sp),a0
    6ac4:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6ac8:	|  '----> tst.l (sp)
    6aca:	'-------- bne.s 6a9e <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    6acc:	          jsr 3f20 <killAllSpeech>
}
    6ad2:	          nop
    6ad4:	          addq.l #4,sp
    6ad6:	          rts

00006ad8 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    6ad8:	             lea -52(sp),sp
    6adc:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    6ade:	             movea.l 60(sp),a0
    6ae2:	             move.l (a0),d0
    6ae4:	             move.l d0,-(sp)
    6ae6:	             jsr 7798 <openSubSlice>
    6aec:	             addq.l #4,sp
    6aee:	             tst.w d0
    6af0:	         ,-- bne.s 6af8 <loadFunctionCode+0x20>
    6af2:	         |   clr.w d0
    6af4:	,--------|-- bra.w 6cc2 <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    6af8:	|        '-> move.l 1c7f8 <bigDataFile>,44(sp)
    6b00:	|            move.l 1c818 <DOSBase>,d0
    6b06:	|            movea.l d0,a6
    6b08:	|            move.l 44(sp),d1
    6b0c:	|            jsr -306(a6)
    6b10:	|            move.l d0,40(sp)
    6b14:	|            move.l 40(sp),d0
    6b18:	|            move.l d0,d0
    6b1a:	|            movea.l 60(sp),a0
    6b1e:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    6b22:	|            move.l 1c7f8 <bigDataFile>,d0
    6b28:	|            move.l d0,-(sp)
    6b2a:	|            jsr 6bc <get2bytes>
    6b30:	|            addq.l #4,sp
    6b32:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    6b36:	|            move.l 1c7f8 <bigDataFile>,d0
    6b3c:	|            move.l d0,-(sp)
    6b3e:	|            jsr 6bc <get2bytes>
    6b44:	|            addq.l #4,sp
    6b46:	|            movea.l 60(sp),a0
    6b4a:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    6b4e:	|            move.l 1c7f8 <bigDataFile>,d0
    6b54:	|            move.l d0,-(sp)
    6b56:	|            jsr 6bc <get2bytes>
    6b5c:	|            addq.l #4,sp
    6b5e:	|            movea.l 60(sp),a0
    6b62:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    6b66:	|            move.l 36(sp),d0
    6b6a:	|            lsl.l #3,d0
    6b6c:	|            move.l d0,32(sp)
    6b70:	|            clr.l 28(sp)
    6b74:	|            move.l 1c810 <SysBase>,d0
    6b7a:	|            movea.l d0,a6
    6b7c:	|            move.l 32(sp),d0
    6b80:	|            move.l 28(sp),d1
    6b84:	|            jsr -684(a6)
    6b88:	|            move.l d0,24(sp)
    6b8c:	|            move.l 24(sp),d0
    6b90:	|            movea.l 60(sp),a0
    6b94:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    6b98:	|            movea.l 60(sp),a0
    6b9c:	|            move.l 4(a0),d0
    6ba0:	|        ,-- bne.s 6bb6 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    6ba2:	|        |   pea 18a27 <PutChar+0xe79>
    6ba8:	|        |   jsr 1710c <KPrintF>
    6bae:	|        |   addq.l #4,sp
		return FALSE;
    6bb0:	|        |   clr.w d0
    6bb2:	+--------|-- bra.w 6cc2 <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6bb6:	|        '-> clr.l 52(sp)
    6bba:	|        ,-- bra.s 6c1c <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    6bbc:	|     ,--|-> move.l 1c7f8 <bigDataFile>,8(sp)
    6bc4:	|     |  |   move.l 1c818 <DOSBase>,d0
    6bca:	|     |  |   movea.l d0,a6
    6bcc:	|     |  |   move.l 8(sp),d1
    6bd0:	|     |  |   jsr -306(a6)
    6bd4:	|     |  |   move.l d0,4(sp)
    6bd8:	|     |  |   move.l 4(sp),d1
    6bdc:	|     |  |   movea.l 60(sp),a0
    6be0:	|     |  |   movea.l 4(a0),a0
    6be4:	|     |  |   move.l 52(sp),d0
    6be8:	|     |  |   lsl.l #3,d0
    6bea:	|     |  |   adda.l d0,a0
    6bec:	|     |  |   move.l d1,d0
    6bee:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    6bf0:	|     |  |   move.l 1c7f8 <bigDataFile>,d0
    6bf6:	|     |  |   move.l d0,-(sp)
    6bf8:	|     |  |   jsr 6bc <get2bytes>
    6bfe:	|     |  |   addq.l #4,sp
    6c00:	|     |  |   move.l d0,d1
    6c02:	|     |  |   movea.l 60(sp),a0
    6c06:	|     |  |   movea.l 4(a0),a0
    6c0a:	|     |  |   move.l 52(sp),d0
    6c0e:	|     |  |   lsl.l #3,d0
    6c10:	|     |  |   adda.l d0,a0
    6c12:	|     |  |   move.l d1,d0
    6c14:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6c18:	|     |  |   addq.l #1,52(sp)
    6c1c:	|     |  '-> move.l 52(sp),d0
    6c20:	|     |      cmp.l 36(sp),d0
    6c24:	|     '----- bcs.s 6bbc <loadFunctionCode+0xe4>
	}

	finishAccess ();
    6c26:	|            jsr 7508 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    6c2c:	|            movea.l 60(sp),a0
    6c30:	|            move.l 8(a0),d0
    6c34:	|  ,-------- ble.w 6cb8 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    6c38:	|  |         movea.l 60(sp),a0
    6c3c:	|  |         move.l 8(a0),d0
    6c40:	|  |         lsl.l #3,d0
    6c42:	|  |         move.l d0,20(sp)
    6c46:	|  |         clr.l 16(sp)
    6c4a:	|  |         move.l 1c810 <SysBase>,d0
    6c50:	|  |         movea.l d0,a6
    6c52:	|  |         move.l 20(sp),d0
    6c56:	|  |         move.l 16(sp),d1
    6c5a:	|  |         jsr -684(a6)
    6c5e:	|  |         move.l d0,12(sp)
    6c62:	|  |         move.l 12(sp),d0
    6c66:	|  |         movea.l 60(sp),a0
    6c6a:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    6c6e:	|  |         movea.l 60(sp),a0
    6c72:	|  |         move.l 20(a0),d0
    6c76:	|  |     ,-- bne.s 6c8a <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    6c78:	|  |     |   pea 18a27 <PutChar+0xe79>
    6c7e:	|  |     |   jsr 1710c <KPrintF>
    6c84:	|  |     |   addq.l #4,sp
			return FALSE;
    6c86:	|  |     |   clr.w d0
    6c88:	+--|-----|-- bra.s 6cc2 <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    6c8a:	|  |     '-> clr.l 48(sp)
    6c8e:	|  |     ,-- bra.s 6ca8 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    6c90:	|  |  ,--|-> movea.l 60(sp),a0
    6c94:	|  |  |  |   move.l 20(a0),d1
    6c98:	|  |  |  |   move.l 48(sp),d0
    6c9c:	|  |  |  |   lsl.l #3,d0
    6c9e:	|  |  |  |   movea.l d1,a0
    6ca0:	|  |  |  |   adda.l d0,a0
    6ca2:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    6ca4:	|  |  |  |   addq.l #1,48(sp)
    6ca8:	|  |  |  '-> movea.l 60(sp),a0
    6cac:	|  |  |      move.l 8(a0),d0
    6cb0:	|  |  |      cmp.l 48(sp),d0
    6cb4:	|  |  '----- bgt.s 6c90 <loadFunctionCode+0x1b8>
    6cb6:	|  |     ,-- bra.s 6cc0 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    6cb8:	|  '-----|-> movea.l 60(sp),a0
    6cbc:	|        |   clr.l 8(a0)
	}
	return TRUE;
    6cc0:	|        '-> moveq #1,d0
}
    6cc2:	'----------> movea.l (sp)+,a6
    6cc4:	             lea 52(sp),sp
    6cc8:	             rts

00006cca <loadHandlers>:

void loadHandlers (BPTR fp) {
    6cca:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    6ccc:	movea.l 1c180 <currentEvents>,a2
    6cd2:	move.l 8(sp),-(sp)
    6cd6:	jsr 6bc <get2bytes>
    6cdc:	addq.l #4,sp
    6cde:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    6ce0:	movea.l 1c180 <currentEvents>,a2
    6ce6:	move.l 8(sp),-(sp)
    6cea:	jsr 6bc <get2bytes>
    6cf0:	addq.l #4,sp
    6cf2:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    6cf6:	movea.l 1c180 <currentEvents>,a2
    6cfc:	move.l 8(sp),-(sp)
    6d00:	jsr 6bc <get2bytes>
    6d06:	addq.l #4,sp
    6d08:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    6d0c:	movea.l 1c180 <currentEvents>,a2
    6d12:	move.l 8(sp),-(sp)
    6d16:	jsr 6bc <get2bytes>
    6d1c:	addq.l #4,sp
    6d1e:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    6d22:	movea.l 1c180 <currentEvents>,a2
    6d28:	move.l 8(sp),-(sp)
    6d2c:	jsr 6bc <get2bytes>
    6d32:	addq.l #4,sp
    6d34:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    6d38:	movea.l 1c180 <currentEvents>,a2
    6d3e:	move.l 8(sp),-(sp)
    6d42:	jsr 6bc <get2bytes>
    6d48:	addq.l #4,sp
    6d4a:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    6d4e:	movea.l 1c180 <currentEvents>,a2
    6d54:	move.l 8(sp),-(sp)
    6d58:	jsr 6bc <get2bytes>
    6d5e:	addq.l #4,sp
    6d60:	move.l d0,24(a2)
}
    6d64:	nop
    6d66:	movea.l (sp)+,a2
    6d68:	rts

00006d6a <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    6d6a:	       lea -312(sp),sp
    6d6e:	       movem.l d2-d3/a6,-(sp)
    6d72:	       move.l 332(sp),d1
    6d76:	       move.l 336(sp),d0
    6d7a:	       move.b d1,d1
    6d7c:	       move.b d1,16(sp)
    6d80:	       move.b d0,d0
    6d82:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    6d86:	       move.l 328(sp),318(sp)
    6d8c:	       move.l #1005,314(sp)
    6d94:	       move.l 1c818 <DOSBase>,d0
    6d9a:	       movea.l d0,a6
    6d9c:	       move.l 318(sp),d1
    6da0:	       move.l 314(sp),d2
    6da4:	       jsr -30(a6)
    6da8:	       move.l d0,310(sp)
    6dac:	       move.l 310(sp),d0
    6db0:	       move.l d0,306(sp)

	if (! fp) {
    6db4:	   ,-- bne.s 6e10 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    6db6:	   |   move.l 1c818 <DOSBase>,d0
    6dbc:	   |   movea.l d0,a6
    6dbe:	   |   jsr -60(a6)
    6dc2:	   |   move.l d0,154(sp)
    6dc6:	   |   move.l 154(sp),d0
    6dca:	   |   move.l d0,150(sp)
    6dce:	   |   move.l #100944,146(sp)
    6dd6:	   |   moveq #31,d0
    6dd8:	   |   move.l d0,142(sp)
    6ddc:	   |   move.l 1c818 <DOSBase>,d0
    6de2:	   |   movea.l d0,a6
    6de4:	   |   move.l 150(sp),d1
    6de8:	   |   move.l 146(sp),d2
    6dec:	   |   move.l 142(sp),d3
    6df0:	   |   jsr -48(a6)
    6df4:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    6df8:	   |   move.l 328(sp),-(sp)
    6dfc:	   |   pea 18a70 <PutChar+0xec2>
    6e02:	   |   jsr 1710c <KPrintF>
    6e08:	   |   addq.l #8,sp
		return NULL;
    6e0a:	   |   moveq #0,d0
    6e0c:	,--|-- bra.w 70d0 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    6e10:	|  '-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    6e14:	|      move.l 306(sp),302(sp)
    6e1a:	|      move.l 1c818 <DOSBase>,d0
    6e20:	|      movea.l d0,a6
    6e22:	|      move.l 302(sp),d1
    6e26:	|      jsr -306(a6)
    6e2a:	|      move.l d0,298(sp)
    6e2e:	|      move.l 298(sp),d0
    6e32:	|      moveq #83,d1
    6e34:	|      cmp.l d0,d1
    6e36:	|  ,-- beq.s 6e3e <openAndVerify+0xd4>
    6e38:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    6e3e:	|  '-> move.l 306(sp),294(sp)
    6e44:	|      move.l 1c818 <DOSBase>,d0
    6e4a:	|      movea.l d0,a6
    6e4c:	|      move.l 294(sp),d1
    6e50:	|      jsr -306(a6)
    6e54:	|      move.l d0,290(sp)
    6e58:	|      move.l 290(sp),d0
    6e5c:	|      moveq #76,d1
    6e5e:	|      cmp.l d0,d1
    6e60:	|  ,-- beq.s 6e68 <openAndVerify+0xfe>
    6e62:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    6e68:	|  '-> move.l 306(sp),286(sp)
    6e6e:	|      move.l 1c818 <DOSBase>,d0
    6e74:	|      movea.l d0,a6
    6e76:	|      move.l 286(sp),d1
    6e7a:	|      jsr -306(a6)
    6e7e:	|      move.l d0,282(sp)
    6e82:	|      move.l 282(sp),d0
    6e86:	|      moveq #85,d1
    6e88:	|      cmp.l d0,d1
    6e8a:	|  ,-- beq.s 6e92 <openAndVerify+0x128>
    6e8c:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    6e92:	|  '-> move.l 306(sp),278(sp)
    6e98:	|      move.l 1c818 <DOSBase>,d0
    6e9e:	|      movea.l d0,a6
    6ea0:	|      move.l 278(sp),d1
    6ea4:	|      jsr -306(a6)
    6ea8:	|      move.l d0,274(sp)
    6eac:	|      move.l 274(sp),d0
    6eb0:	|      moveq #68,d1
    6eb2:	|      cmp.l d0,d1
    6eb4:	|  ,-- beq.s 6ebc <openAndVerify+0x152>
    6eb6:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    6ebc:	|  '-> move.l 306(sp),270(sp)
    6ec2:	|      move.l 1c818 <DOSBase>,d0
    6ec8:	|      movea.l d0,a6
    6eca:	|      move.l 270(sp),d1
    6ece:	|      jsr -306(a6)
    6ed2:	|      move.l d0,266(sp)
    6ed6:	|      move.l 266(sp),d1
    6eda:	|      move.b 16(sp),d0
    6ede:	|      ext.w d0
    6ee0:	|      movea.w d0,a0
    6ee2:	|      cmpa.l d1,a0
    6ee4:	|  ,-- beq.s 6eec <openAndVerify+0x182>
    6ee6:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    6eec:	|  '-> move.l 306(sp),262(sp)
    6ef2:	|      move.l 1c818 <DOSBase>,d0
    6ef8:	|      movea.l d0,a6
    6efa:	|      move.l 262(sp),d1
    6efe:	|      jsr -306(a6)
    6f02:	|      move.l d0,258(sp)
    6f06:	|      move.l 258(sp),d1
    6f0a:	|      move.b 14(sp),d0
    6f0e:	|      ext.w d0
    6f10:	|      movea.w d0,a0
    6f12:	|      cmpa.l d1,a0
    6f14:	|  ,-- beq.s 6f1c <openAndVerify+0x1b2>
    6f16:	|  |   move.w #1,322(sp)
	if (headerBad) {
    6f1c:	|  '-> tst.w 322(sp)
    6f20:	|  ,-- beq.s 6f78 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    6f22:	|  |   move.l 1c818 <DOSBase>,d0
    6f28:	|  |   movea.l d0,a6
    6f2a:	|  |   jsr -60(a6)
    6f2e:	|  |   move.l d0,174(sp)
    6f32:	|  |   move.l 174(sp),d0
    6f36:	|  |   move.l d0,170(sp)
    6f3a:	|  |   move.l #101007,166(sp)
    6f42:	|  |   moveq #31,d0
    6f44:	|  |   move.l d0,162(sp)
    6f48:	|  |   move.l 1c818 <DOSBase>,d0
    6f4e:	|  |   movea.l d0,a6
    6f50:	|  |   move.l 170(sp),d1
    6f54:	|  |   move.l 166(sp),d2
    6f58:	|  |   move.l 162(sp),d3
    6f5c:	|  |   jsr -48(a6)
    6f60:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    6f64:	|  |   pea 18a8f <PutChar+0xee1>
    6f6a:	|  |   jsr 1710c <KPrintF>
    6f70:	|  |   addq.l #4,sp
		return NULL;
    6f72:	|  |   moveq #0,d0
    6f74:	+--|-- bra.w 70d0 <openAndVerify+0x366>
	}
	FGetC (fp);
    6f78:	|  '-> move.l 306(sp),254(sp)
    6f7e:	|      move.l 1c818 <DOSBase>,d0
    6f84:	|      movea.l d0,a6
    6f86:	|      move.l 254(sp),d1
    6f8a:	|      jsr -306(a6)
    6f8e:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    6f92:	|      nop
    6f94:	|  ,-> move.l 306(sp),246(sp)
    6f9a:	|  |   move.l 1c818 <DOSBase>,d0
    6fa0:	|  |   movea.l d0,a6
    6fa2:	|  |   move.l 246(sp),d1
    6fa6:	|  |   jsr -306(a6)
    6faa:	|  |   move.l d0,242(sp)
    6fae:	|  |   move.l 242(sp),d0
    6fb2:	|  '-- bne.s 6f94 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    6fb4:	|      move.l 306(sp),238(sp)
    6fba:	|      move.l 1c818 <DOSBase>,d0
    6fc0:	|      movea.l d0,a6
    6fc2:	|      move.l 238(sp),d1
    6fc6:	|      jsr -306(a6)
    6fca:	|      move.l d0,234(sp)
    6fce:	|      move.l 234(sp),d0
    6fd2:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    6fd6:	|      move.l 306(sp),226(sp)
    6fdc:	|      move.l 1c818 <DOSBase>,d0
    6fe2:	|      movea.l d0,a6
    6fe4:	|      move.l 226(sp),d1
    6fe8:	|      jsr -306(a6)
    6fec:	|      move.l d0,222(sp)
    6ff0:	|      move.l 222(sp),d0
    6ff4:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    6ff8:	|      move.l 230(sp),d0
    6ffc:	|      lsl.l #8,d0
    6ffe:	|      add.l 218(sp),d0
    7002:	|      movea.l 344(sp),a0
    7006:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    7008:	|      movea.l 344(sp),a0
    700c:	|      move.l (a0),d0
    700e:	|      cmpi.l #514,d0
    7014:	|  ,-- ble.s 706a <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    7016:	|  |   move.l 1c818 <DOSBase>,d0
    701c:	|  |   movea.l d0,a6
    701e:	|  |   jsr -60(a6)
    7022:	|  |   move.l d0,194(sp)
    7026:	|  |   move.l 194(sp),d0
    702a:	|  |   move.l d0,190(sp)
    702e:	|  |   move.l #101034,186(sp)
    7036:	|  |   moveq #100,d1
    7038:	|  |   move.l d1,182(sp)
    703c:	|  |   move.l 1c818 <DOSBase>,d0
    7042:	|  |   movea.l d0,a6
    7044:	|  |   move.l 190(sp),d1
    7048:	|  |   move.l 186(sp),d2
    704c:	|  |   move.l 182(sp),d3
    7050:	|  |   jsr -48(a6)
    7054:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    7058:	|  |   pea 18aaa <PutChar+0xefc>
    705e:	|  |   jsr 1710c <KPrintF>
    7064:	|  |   addq.l #4,sp
		return NULL;
    7066:	|  |   moveq #0,d0
    7068:	+--|-- bra.s 70d0 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    706a:	|  '-> movea.l 344(sp),a0
    706e:	|      move.l (a0),d0
    7070:	|      cmpi.l #257,d0
    7076:	|  ,-- bgt.s 70cc <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    7078:	|  |   move.l 1c818 <DOSBase>,d0
    707e:	|  |   movea.l d0,a6
    7080:	|  |   jsr -60(a6)
    7084:	|  |   move.l d0,214(sp)
    7088:	|  |   move.l 214(sp),d0
    708c:	|  |   move.l d0,210(sp)
    7090:	|  |   move.l #101103,206(sp)
    7098:	|  |   moveq #100,d0
    709a:	|  |   move.l d0,202(sp)
    709e:	|  |   move.l 1c818 <DOSBase>,d0
    70a4:	|  |   movea.l d0,a6
    70a6:	|  |   move.l 210(sp),d1
    70aa:	|  |   move.l 206(sp),d2
    70ae:	|  |   move.l 202(sp),d3
    70b2:	|  |   jsr -48(a6)
    70b6:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    70ba:	|  |   pea 18aef <PutChar+0xf41>
    70c0:	|  |   jsr 1710c <KPrintF>
    70c6:	|  |   addq.l #4,sp
		return NULL;
    70c8:	|  |   moveq #0,d0
    70ca:	+--|-- bra.s 70d0 <openAndVerify+0x366>
	}
	return fp;
    70cc:	|  '-> move.l 306(sp),d0
}
    70d0:	'----> movem.l (sp)+,d2-d3/a6
    70d4:	       lea 312(sp),sp
    70d8:	       rts

000070da <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    70da:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    70dc:	          move.l #116648,(sp)
	while (* huntAndDestroy) {
    70e2:	   ,----- bra.s 710e <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    70e4:	,--|----> movea.l (sp),a0
    70e6:	|  |      move.l (a0),d0
    70e8:	|  |      cmp.l 8(sp),d0
    70ec:	|  |  ,-- bne.s 7104 <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    70ee:	|  |  |   movea.l (sp),a0
    70f0:	|  |  |   movea.l (a0),a0
    70f2:	|  |  |   move.l 44(a0),d0
    70f6:	|  |  |   movea.l (sp),a0
    70f8:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    70fa:	|  |  |   movea.l 8(sp),a0
    70fe:	|  |  |   clr.l 44(a0)
    7102:	|  +--|-- bra.s 710e <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    7104:	|  |  '-> movea.l (sp),a0
    7106:	|  |      move.l (a0),d0
    7108:	|  |      moveq #44,d1
    710a:	|  |      add.l d0,d1
    710c:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    710e:	|  '----> movea.l (sp),a0
    7110:	|         move.l (a0),d0
    7112:	'-------- bne.s 70e4 <pauseFunction+0xa>
		}
	}
}
    7114:	          nop
    7116:	          nop
    7118:	          addq.l #4,sp
    711a:	          rts

0000711c <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    711c:	move.l 1c7a8 <allRunningFunctions>,d0
    7122:	movea.l 4(sp),a0
    7126:	move.l d0,44(a0)
	allRunningFunctions = fun;
    712a:	move.l 4(sp),1c7a8 <allRunningFunctions>
}
    7132:	nop
    7134:	rts

00007136 <runSludge>:

BOOL runSludge () {
    7136:	                   lea -12(sp),sp
    713a:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    713c:	                   move.l 1c7a8 <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    7144:	      ,----------- bra.s 71c0 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    7146:	   ,--|----------> movea.l 12(sp),a0
    714a:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    7150:	   |  |            movea.l 12(sp),a0
    7154:	   |  |            move.b 56(a0),d0
    7158:	   |  |  ,-------- bne.s 71ba <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    715a:	   |  |  |         movea.l 12(sp),a0
    715e:	   |  |  |         move.l 12(a0),d0
    7162:	   |  |  |  ,----- beq.s 718c <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    7164:	   |  |  |  |      movea.l 12(sp),a0
    7168:	   |  |  |  |      move.l 12(a0),d0
    716c:	   |  |  |  |  ,-- bpl.s 7178 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    716e:	   |  |  |  |  |   movea.l 12(sp),a0
    7172:	   |  |  |  |  |   clr.l 12(a0)
    7176:	   |  |  +--|--|-- bra.s 71ba <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    7178:	   |  |  |  |  '-> movea.l 12(sp),a0
    717c:	   |  |  |  |      move.l 12(a0),d0
    7180:	   |  |  |  |      subq.l #1,d0
    7182:	   |  |  |  |      movea.l 12(sp),a0
    7186:	   |  |  |  |      move.l d0,12(a0)
    718a:	   |  |  +--|----- bra.s 71ba <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    718c:	   |  |  |  '----> movea.l 12(sp),a0
    7190:	   |  |  |         move.w 50(a0),d0
    7194:	   |  |  |     ,-- beq.s 71a4 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    7196:	   |  |  |     |   movea.l 12(sp),a0
    719a:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    719e:	   |  |  |     |   jsr 3f20 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    71a4:	   |  |  |     '-> move.l 12(sp),-(sp)
    71a8:	   |  |  |         jsr 5104 <continueFunction>
    71ae:	   |  |  |         addq.l #4,sp
    71b0:	   |  |  |         tst.w d0
    71b2:	   |  |  +-------- bne.s 71ba <runSludge+0x84>
					return FALSE;
    71b4:	   |  |  |         clr.w d0
    71b6:	,--|--|--|-------- bra.w 7246 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    71ba:	|  |  |  '-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    71c0:	|  |  '----------> tst.l 12(sp)
    71c4:	|  '-------------- bne.s 7146 <runSludge+0x10>
	}

	if (loadNow) {
    71c6:	|                  move.l 1c7dc <loadNow>,d0
    71cc:	|        ,-------- beq.s 7244 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    71ce:	|        |         movea.l 1c7dc <loadNow>,a0
    71d4:	|        |         move.b (a0),d0
    71d6:	|        |         cmpi.b #58,d0
    71da:	|        |  ,----- bne.s 720e <runSludge+0xd8>
			saveGame (loadNow + 1);
    71dc:	|        |  |      move.l 1c7dc <loadNow>,d0
    71e2:	|        |  |      addq.l #1,d0
    71e4:	|        |  |      move.l d0,-(sp)
    71e6:	|        |  |      jsr c5da <saveGame>
    71ec:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    71ee:	|        |  |      movea.l 1c8d6 <saverFunc>,a0
    71f4:	|        |  |      lea 28(a0),a0
    71f8:	|        |  |      pea 1 <_start+0x1>
    71fc:	|        |  |      pea 1 <_start+0x1>
    7200:	|        |  |      move.l a0,-(sp)
    7202:	|        |  |      jsr 14f3a <setVariable>
    7208:	|        |  |      lea 12(sp),sp
    720c:	|        |  |  ,-- bra.s 7226 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    720e:	|        |  '--|-> move.l 1c7dc <loadNow>,d0
    7214:	|        |     |   move.l d0,-(sp)
    7216:	|        |     |   jsr c122 <loadGame>
    721c:	|        |     |   addq.l #4,sp
    721e:	|        |     |   tst.w d0
    7220:	|        |     +-- bne.s 7226 <runSludge+0xf0>
    7222:	|        |     |   clr.w d0
    7224:	+--------|-----|-- bra.s 7246 <runSludge+0x110>
		}
		FreeVec(loadNow);
    7226:	|        |     '-> move.l 1c7dc <loadNow>,8(sp)
    722e:	|        |         move.l 1c810 <SysBase>,d0
    7234:	|        |         movea.l d0,a6
    7236:	|        |         movea.l 8(sp),a1
    723a:	|        |         jsr -690(a6)
		loadNow = NULL;
    723e:	|        |         clr.l 1c7dc <loadNow>
	}

	return TRUE;
    7244:	|        '-------> moveq #1,d0
}
    7246:	'----------------> movea.l (sp)+,a6
    7248:	                   lea 12(sp),sp
    724c:	                   rts

0000724e <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    724e:	movea.l 1c180 <currentEvents>,a0
    7254:	move.l (a0),d0
    7256:	move.l 4(sp),-(sp)
    725a:	move.l d0,-(sp)
    725c:	jsr 8d0 <put2bytes>
    7262:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    7264:	movea.l 1c180 <currentEvents>,a0
    726a:	move.l 4(a0),d0
    726e:	move.l 4(sp),-(sp)
    7272:	move.l d0,-(sp)
    7274:	jsr 8d0 <put2bytes>
    727a:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    727c:	movea.l 1c180 <currentEvents>,a0
    7282:	move.l 8(a0),d0
    7286:	move.l 4(sp),-(sp)
    728a:	move.l d0,-(sp)
    728c:	jsr 8d0 <put2bytes>
    7292:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    7294:	movea.l 1c180 <currentEvents>,a0
    729a:	move.l 12(a0),d0
    729e:	move.l 4(sp),-(sp)
    72a2:	move.l d0,-(sp)
    72a4:	jsr 8d0 <put2bytes>
    72aa:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    72ac:	movea.l 1c180 <currentEvents>,a0
    72b2:	move.l 16(a0),d0
    72b6:	move.l 4(sp),-(sp)
    72ba:	move.l d0,-(sp)
    72bc:	jsr 8d0 <put2bytes>
    72c2:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    72c4:	movea.l 1c180 <currentEvents>,a0
    72ca:	move.l 20(a0),d0
    72ce:	move.l 4(sp),-(sp)
    72d2:	move.l d0,-(sp)
    72d4:	jsr 8d0 <put2bytes>
    72da:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    72dc:	movea.l 1c180 <currentEvents>,a0
    72e2:	move.l 24(a0),d0
    72e6:	move.l 4(sp),-(sp)
    72ea:	move.l d0,-(sp)
    72ec:	jsr 8d0 <put2bytes>
    72f2:	addq.l #8,sp
}
    72f4:	nop
    72f6:	rts

000072f8 <sludgeDisplay>:

void sludgeDisplay () {					
    72f8:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    72fa:	move.l #14675968,(sp)
	displayCursor();
    7300:	jsr c58 <displayCursor>
	CstDrawBackdrop();
    7306:	jsr 14f6 <CstDrawBackdrop>
	CstRestoreScreen();
    730c:	jsr 29e8 <CstRestoreScreen>
	drawPeople();
    7312:	jsr 9ebe <drawPeople>
	CstSwapBuffer();
    7318:	jsr 35ce <CstSwapBuffer>
}
    731e:	nop
    7320:	addq.l #4,sp
    7322:	rts

00007324 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    7324:	      ,-- bra.s 7344 <stackSetByIndex+0x20>
		vS = vS->next;
    7326:	,-----|-> movea.l 4(sp),a0
    732a:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    7330:	|     +-- bne.s 7344 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    7332:	|     |   pea 18b36 <PutChar+0xf88>
    7338:	|     |   jsr 1710c <KPrintF>
    733e:	|     |   addq.l #4,sp
			return FALSE;
    7340:	|     |   clr.w d0
    7342:	|  ,--|-- bra.s 7366 <stackSetByIndex+0x42>
	while (theIndex--) {
    7344:	|  |  '-> move.l 8(sp),d0
    7348:	|  |      move.l d0,d1
    734a:	|  |      subq.l #1,d1
    734c:	|  |      move.l d1,8(sp)
    7350:	|  |      tst.l d0
    7352:	'--|----- bne.s 7326 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    7354:	   |      move.l 4(sp),d0
    7358:	   |      move.l d0,-(sp)
    735a:	   |      move.l 16(sp),-(sp)
    735e:	   |      jsr 14b02 <copyVariable>
    7364:	   |      addq.l #8,sp
}
    7366:	   '----> rts

00007368 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    7368:	             lea -24(sp),sp
    736c:	             move.l a6,-(sp)
    736e:	             move.l 48(sp),d0
    7372:	             move.w d0,d0
    7374:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    7378:	             moveq #58,d0
    737a:	             move.l d0,24(sp)
    737e:	             clr.l 20(sp)
    7382:	             move.l 1c810 <SysBase>,d0
    7388:	             movea.l d0,a6
    738a:	             move.l 24(sp),d0
    738e:	             move.l 20(sp),d1
    7392:	             jsr -684(a6)
    7396:	             move.l d0,16(sp)
    739a:	             move.l 16(sp),d0
    739e:	             move.l d0,12(sp)
	if(!newFunc) {
    73a2:	         ,-- bne.s 73b8 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    73a4:	         |   pea 18b4f <PutChar+0xfa1>
    73aa:	         |   jsr 1710c <KPrintF>
    73b0:	         |   addq.l #4,sp
		return 0;
    73b2:	         |   moveq #0,d0
    73b4:	,--------|-- bra.w 74ce <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    73b8:	|        '-> move.l 32(sp),d0
    73bc:	|            movea.l 12(sp),a0
    73c0:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    73c2:	|            move.l 12(sp),-(sp)
    73c6:	|            jsr 6ad8 <loadFunctionCode>
    73cc:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    73ce:	|            movea.l 12(sp),a0
    73d2:	|            move.l 16(a0),d1
    73d6:	|            move.l 36(sp),d0
    73da:	|            cmp.l d1,d0
    73dc:	|        ,-- beq.s 73f2 <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    73de:	|        |   pea 18b78 <PutChar+0xfca>
    73e4:	|        |   jsr 1710c <KPrintF>
    73ea:	|        |   addq.l #4,sp
		return NULL; 
    73ec:	|        |   moveq #0,d0
    73ee:	+--------|-- bra.w 74ce <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    73f2:	|        '-> movea.l 12(sp),a0
    73f6:	|            move.l 16(a0),d1
    73fa:	|            movea.l 12(sp),a0
    73fe:	|            move.l 8(a0),d0
    7402:	|            cmp.l d1,d0
    7404:	|  ,-------- bge.s 746e <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    7406:	|  |         pea 18b94 <PutChar+0xfe6>
    740c:	|  |         jsr 1710c <KPrintF>
    7412:	|  |         addq.l #4,sp
		return NULL; 
    7414:	|  |         moveq #0,d0
    7416:	+--|-------- bra.w 74ce <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    741a:	|  |  ,----> movea.l 44(sp),a0
    741e:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    7422:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    7426:	|  |  |      movea.l 44(sp),a0
    742a:	|  |  |      move.l (a0),d0
    742c:	|  |  |  ,-- bne.s 7442 <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    742e:	|  |  |  |   pea 18bbe <PutChar+0x1010>
    7434:	|  |  |  |   jsr 1710c <KPrintF>
    743a:	|  |  |  |   addq.l #4,sp
			return NULL;
    743c:	|  |  |  |   moveq #0,d0
    743e:	+--|--|--|-- bra.w 74ce <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    7442:	|  |  |  '-> movea.l 12(sp),a0
    7446:	|  |  |      move.l 20(a0),d1
    744a:	|  |  |      move.l 36(sp),d0
    744e:	|  |  |      lsl.l #3,d0
    7450:	|  |  |      add.l d0,d1
    7452:	|  |  |      move.l 8(sp),d0
    7456:	|  |  |      move.l d1,-(sp)
    7458:	|  |  |      move.l d0,-(sp)
    745a:	|  |  |      jsr 14b02 <copyVariable>
    7460:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    7462:	|  |  |      move.l 44(sp),-(sp)
    7466:	|  |  |      jsr 14fcc <trimStack>
    746c:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    746e:	|  '--|----> tst.l 36(sp)
    7472:	|     '----- bne.s 741a <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    7474:	|            movea.l 12(sp),a0
    7478:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    747c:	|            movea.l 12(sp),a0
    7480:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    7484:	|            movea.l 12(sp),a0
    7488:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    748e:	|            movea.l 12(sp),a0
    7492:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    7498:	|            movea.l 12(sp),a0
    749c:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    74a0:	|            movea.l 12(sp),a0
    74a4:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    74a8:	|            movea.l 12(sp),a0
    74ac:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    74b0:	|            movea.l 12(sp),a0
    74b4:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    74b8:	|            movea.l 12(sp),a0
    74bc:	|            clr.l 28(a0)

	restartFunction (newFunc);
    74c0:	|            move.l 12(sp),-(sp)
    74c4:	|            jsr 711c <restartFunction>
    74ca:	|            addq.l #4,sp
	return 1;
    74cc:	|            moveq #1,d0
}
    74ce:	'----------> movea.l (sp)+,a6
    74d0:	             lea 24(sp),sp
    74d4:	             rts

000074d6 <unfreezeSubs>:

void unfreezeSubs () {
    74d6:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    74d8:	          move.l 1c7a8 <allRunningFunctions>,(sp)

	while (thisFunction) {
    74de:	   ,----- bra.s 74fc <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    74e0:	,--|----> movea.l (sp),a0
    74e2:	|  |      move.b 56(a0),d0
    74e6:	|  |  ,-- beq.s 74f6 <unfreezeSubs+0x20>
    74e8:	|  |  |   movea.l (sp),a0
    74ea:	|  |  |   move.b 56(a0),d0
    74ee:	|  |  |   subq.b #1,d0
    74f0:	|  |  |   movea.l (sp),a0
    74f2:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    74f6:	|  |  '-> movea.l (sp),a0
    74f8:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    74fc:	|  '----> tst.l (sp)
    74fe:	'-------- bne.s 74e0 <unfreezeSubs+0xa>
	}
}
    7500:	          nop
    7502:	          nop
    7504:	          addq.l #4,sp
    7506:	          rts

00007508 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    7508:	clr.w 1c18c <sliceBusy>
}
    750e:	nop
    7510:	rts

00007512 <getNumberedString>:

char * getNumberedString (int value) {
    7512:	       lea -56(sp),sp
    7516:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    751a:	       move.w 1c18c <sliceBusy>,d0
    7520:	   ,-- beq.s 756a <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    7522:	   |   move.l 1c818 <DOSBase>,d0
    7528:	   |   movea.l d0,a6
    752a:	   |   jsr -60(a6)
    752e:	   |   move.l d0,28(sp)
    7532:	   |   move.l 28(sp),d0
    7536:	   |   move.l d0,24(sp)
    753a:	   |   move.l #101385,20(sp)
    7542:	   |   moveq #76,d0
    7544:	   |   move.l d0,16(sp)
    7548:	   |   move.l 1c818 <DOSBase>,d0
    754e:	   |   movea.l d0,a6
    7550:	   |   move.l 24(sp),d1
    7554:	   |   move.l 20(sp),d2
    7558:	   |   move.l 16(sp),d3
    755c:	   |   jsr -48(a6)
    7560:	   |   move.l d0,12(sp)
		return NULL;
    7564:	   |   moveq #0,d0
    7566:	,--|-- bra.w 7606 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    756a:	|  '-> move.l 1c7f8 <bigDataFile>,64(sp)
    7572:	|      move.l 72(sp),d0
    7576:	|      add.l d0,d0
    7578:	|      add.l d0,d0
    757a:	|      move.l d0,d1
    757c:	|      move.l 1c804 <startOfTextIndex>,d0
    7582:	|      add.l d1,d0
    7584:	|      move.l d0,60(sp)
    7588:	|      moveq #-1,d0
    758a:	|      move.l d0,56(sp)
    758e:	|      move.l 1c818 <DOSBase>,d0
    7594:	|      movea.l d0,a6
    7596:	|      move.l 64(sp),d1
    759a:	|      move.l 60(sp),d2
    759e:	|      move.l 56(sp),d3
    75a2:	|      jsr -66(a6)
    75a6:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    75aa:	|      move.l 1c7f8 <bigDataFile>,d0
    75b0:	|      move.l d0,-(sp)
    75b2:	|      jsr 718 <get4bytes>
    75b8:	|      addq.l #4,sp
    75ba:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    75be:	|      move.l 1c7f8 <bigDataFile>,48(sp)
    75c6:	|      move.l 72(sp),44(sp)
    75cc:	|      moveq #-1,d0
    75ce:	|      move.l d0,40(sp)
    75d2:	|      move.l 1c818 <DOSBase>,d0
    75d8:	|      movea.l d0,a6
    75da:	|      move.l 48(sp),d1
    75de:	|      move.l 44(sp),d2
    75e2:	|      move.l 40(sp),d3
    75e6:	|      jsr -66(a6)
    75ea:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    75ee:	|      move.l 1c7f8 <bigDataFile>,d0
    75f4:	|      move.l d0,-(sp)
    75f6:	|      jsr b02 <readString>
    75fc:	|      addq.l #4,sp
    75fe:	|      move.l d0,32(sp)
	
	return s;
    7602:	|      move.l 32(sp),d0
}
    7606:	'----> movem.l (sp)+,d2-d3/a6
    760a:	       lea 56(sp),sp
    760e:	       rts

00007610 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    7610:	       lea -32(sp),sp
    7614:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    7618:	       move.w 1c18c <sliceBusy>,d0
    761e:	   ,-- beq.s 763a <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    7620:	   |   pea 18c56 <PutChar+0x10a8>
    7626:	   |   pea 18c74 <PutChar+0x10c6>
    762c:	   |   jsr 1710c <KPrintF>
    7632:	   |   addq.l #8,sp
		return 0;
    7634:	   |   moveq #0,d0
    7636:	,--|-- bra.w 76ce <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    763a:	|  '-> move.l 1c7f8 <bigDataFile>,40(sp)
    7642:	|      move.l 48(sp),d0
    7646:	|      add.l d0,d0
    7648:	|      add.l d0,d0
    764a:	|      move.l d0,d1
    764c:	|      move.l 1c800 <startOfDataIndex>,d0
    7652:	|      add.l d1,d0
    7654:	|      move.l d0,36(sp)
    7658:	|      moveq #-1,d0
    765a:	|      move.l d0,32(sp)
    765e:	|      move.l 1c818 <DOSBase>,d0
    7664:	|      movea.l d0,a6
    7666:	|      move.l 40(sp),d1
    766a:	|      move.l 36(sp),d2
    766e:	|      move.l 32(sp),d3
    7672:	|      jsr -66(a6)
    7676:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    767a:	|      move.l 1c7f8 <bigDataFile>,24(sp)
    7682:	|      move.l 1c7f8 <bigDataFile>,d0
    7688:	|      move.l d0,-(sp)
    768a:	|      jsr 718 <get4bytes>
    7690:	|      addq.l #4,sp
    7692:	|      move.l d0,20(sp)
    7696:	|      clr.l 16(sp)
    769a:	|      move.l 1c818 <DOSBase>,d0
    76a0:	|      movea.l d0,a6
    76a2:	|      move.l 24(sp),d1
    76a6:	|      move.l 20(sp),d2
    76aa:	|      move.l 16(sp),d3
    76ae:	|      jsr -66(a6)
    76b2:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    76b6:	|      move.w #1,1c18c <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    76be:	|      move.l 1c7f8 <bigDataFile>,d0
    76c4:	|      move.l d0,-(sp)
    76c6:	|      jsr 718 <get4bytes>
    76cc:	|      addq.l #4,sp
}
    76ce:	'----> movem.l (sp)+,d2-d3/a6
    76d2:	       lea 32(sp),sp
    76d6:	       rts

000076d8 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    76d8:	       lea -32(sp),sp
    76dc:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    76e0:	       move.w 1c18c <sliceBusy>,d0
    76e6:	   ,-- beq.s 7702 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    76e8:	   |   pea 18c56 <PutChar+0x10a8>
    76ee:	   |   pea 18c74 <PutChar+0x10c6>
    76f4:	   |   jsr 1710c <KPrintF>
    76fa:	   |   addq.l #8,sp
        return FALSE;
    76fc:	   |   clr.w d0
    76fe:	,--|-- bra.w 778e <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    7702:	|  '-> move.l 1c7f8 <bigDataFile>,40(sp)
    770a:	|      move.l 48(sp),d0
    770e:	|      add.l d0,d0
    7710:	|      add.l d0,d0
    7712:	|      move.l d0,d1
    7714:	|      move.l 1c80c <startOfObjectIndex>,d0
    771a:	|      add.l d1,d0
    771c:	|      move.l d0,36(sp)
    7720:	|      moveq #-1,d0
    7722:	|      move.l d0,32(sp)
    7726:	|      move.l 1c818 <DOSBase>,d0
    772c:	|      movea.l d0,a6
    772e:	|      move.l 40(sp),d1
    7732:	|      move.l 36(sp),d2
    7736:	|      move.l 32(sp),d3
    773a:	|      jsr -66(a6)
    773e:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    7742:	|      move.l 1c7f8 <bigDataFile>,24(sp)
    774a:	|      move.l 1c7f8 <bigDataFile>,d0
    7750:	|      move.l d0,-(sp)
    7752:	|      jsr 718 <get4bytes>
    7758:	|      addq.l #4,sp
    775a:	|      move.l d0,20(sp)
    775e:	|      moveq #-1,d0
    7760:	|      move.l d0,16(sp)
    7764:	|      move.l 1c818 <DOSBase>,d0
    776a:	|      movea.l d0,a6
    776c:	|      move.l 24(sp),d1
    7770:	|      move.l 20(sp),d2
    7774:	|      move.l 16(sp),d3
    7778:	|      jsr -66(a6)
    777c:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    7780:	|      move.w #1,1c18c <sliceBusy>
    7788:	|      move.w 1c18c <sliceBusy>,d0
}
    778e:	'----> movem.l (sp)+,d2-d3/a6
    7792:	       lea 32(sp),sp
    7796:	       rts

00007798 <openSubSlice>:

BOOL openSubSlice (int num) {
    7798:	       lea -32(sp),sp
    779c:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    77a0:	       move.w 1c18c <sliceBusy>,d0
    77a6:	   ,-- beq.s 77c2 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    77a8:	   |   pea 18c56 <PutChar+0x10a8>
    77ae:	   |   pea 18c74 <PutChar+0x10c6>
    77b4:	   |   jsr 1710c <KPrintF>
    77ba:	   |   addq.l #8,sp
		return FALSE;
    77bc:	   |   clr.w d0
    77be:	,--|-- bra.w 784e <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    77c2:	|  '-> move.l 1c7f8 <bigDataFile>,40(sp)
    77ca:	|      move.l 48(sp),d0
    77ce:	|      add.l d0,d0
    77d0:	|      add.l d0,d0
    77d2:	|      move.l d0,d1
    77d4:	|      move.l 1c808 <startOfSubIndex>,d0
    77da:	|      add.l d1,d0
    77dc:	|      move.l d0,36(sp)
    77e0:	|      moveq #-1,d0
    77e2:	|      move.l d0,32(sp)
    77e6:	|      move.l 1c818 <DOSBase>,d0
    77ec:	|      movea.l d0,a6
    77ee:	|      move.l 40(sp),d1
    77f2:	|      move.l 36(sp),d2
    77f6:	|      move.l 32(sp),d3
    77fa:	|      jsr -66(a6)
    77fe:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    7802:	|      move.l 1c7f8 <bigDataFile>,24(sp)
    780a:	|      move.l 1c7f8 <bigDataFile>,d0
    7810:	|      move.l d0,-(sp)
    7812:	|      jsr 718 <get4bytes>
    7818:	|      addq.l #4,sp
    781a:	|      move.l d0,20(sp)
    781e:	|      moveq #-1,d0
    7820:	|      move.l d0,16(sp)
    7824:	|      move.l 1c818 <DOSBase>,d0
    782a:	|      movea.l d0,a6
    782c:	|      move.l 24(sp),d1
    7830:	|      move.l 20(sp),d2
    7834:	|      move.l 16(sp),d3
    7838:	|      jsr -66(a6)
    783c:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    7840:	|      move.w #1,1c18c <sliceBusy>
    7848:	|      move.w 1c18c <sliceBusy>,d0
}
    784e:	'----> movem.l (sp)+,d2-d3/a6
    7852:	       lea 32(sp),sp
    7856:	       rts

00007858 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    7858:	       lea -180(sp),sp
    785c:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    7860:	       tst.l 196(sp)
    7864:	,----- beq.s 78a4 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    7866:	|      move.l 196(sp),1c7f8 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    786e:	|      move.l 196(sp),168(sp)
    7874:	|      clr.l 164(sp)
    7878:	|      clr.l 160(sp)
    787c:	|      move.l 1c818 <DOSBase>,d0
    7882:	|      movea.l d0,a6
    7884:	|      move.l 168(sp),d1
    7888:	|      move.l 164(sp),d2
    788c:	|      move.l 160(sp),d3
    7890:	|      jsr -66(a6)
    7894:	|      move.l d0,156(sp)
    7898:	|      move.l 156(sp),d0
    789c:	|      move.l d0,1c7fc <startIndex>
    78a2:	|  ,-- bra.s 78de <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    78a4:	'--|-> move.l 1c7f8 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    78ac:	   |   move.l 196(sp),184(sp)
    78b2:	   |   move.l 1c7fc <startIndex>,d0
    78b8:	   |   move.l d0,180(sp)
    78bc:	   |   moveq #-1,d0
    78be:	   |   move.l d0,176(sp)
    78c2:	   |   move.l 1c818 <DOSBase>,d0
    78c8:	   |   movea.l d0,a6
    78ca:	   |   move.l 184(sp),d1
    78ce:	   |   move.l 180(sp),d2
    78d2:	   |   move.l 176(sp),d3
    78d6:	   |   jsr -66(a6)
    78da:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    78de:	   '-> clr.w 1c18c <sliceBusy>

	if (skipBefore > numLanguages) {
    78e4:	       move.l 204(sp),d0
    78e8:	       cmp.l 200(sp),d0
    78ec:	   ,-- bls.s 7900 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    78ee:	   |   pea 18c8e <PutChar+0x10e0>
    78f4:	   |   jsr 1710c <KPrintF>
    78fa:	   |   addq.l #4,sp
		skipBefore = 0;
    78fc:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    7900:	   '-> move.l 200(sp),d0
    7904:	       sub.l 204(sp),d0
    7908:	       move.l d0,188(sp)
	while (skipBefore) {
    790c:	   ,-- bra.s 794a <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    790e:	,--|-> move.l 196(sp),24(sp)
    7914:	|  |   move.l 196(sp),-(sp)
    7918:	|  |   jsr 718 <get4bytes>
    791e:	|  |   addq.l #4,sp
    7920:	|  |   move.l d0,20(sp)
    7924:	|  |   moveq #-1,d0
    7926:	|  |   move.l d0,16(sp)
    792a:	|  |   move.l 1c818 <DOSBase>,d0
    7930:	|  |   movea.l d0,a6
    7932:	|  |   move.l 24(sp),d1
    7936:	|  |   move.l 20(sp),d2
    793a:	|  |   move.l 16(sp),d3
    793e:	|  |   jsr -66(a6)
    7942:	|  |   move.l d0,12(sp)
		skipBefore --;
    7946:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    794a:	|  '-> tst.l 204(sp)
    794e:	'----- bne.s 790e <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7950:	       move.l 196(sp),152(sp)
    7956:	       clr.l 148(sp)
    795a:	       clr.l 144(sp)
    795e:	       move.l 1c818 <DOSBase>,d0
    7964:	       movea.l d0,a6
    7966:	       move.l 152(sp),d1
    796a:	       move.l 148(sp),d2
    796e:	       move.l 144(sp),d3
    7972:	       jsr -66(a6)
    7976:	       move.l d0,140(sp)
    797a:	       move.l 140(sp),d0
    797e:	       addq.l #4,d0
    7980:	       move.l d0,1c804 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    7986:	       move.l 196(sp),136(sp)
    798c:	       move.l 196(sp),-(sp)
    7990:	       jsr 718 <get4bytes>
    7996:	       addq.l #4,sp
    7998:	       move.l d0,132(sp)
    799c:	       moveq #-1,d0
    799e:	       move.l d0,128(sp)
    79a2:	       move.l 1c818 <DOSBase>,d0
    79a8:	       movea.l d0,a6
    79aa:	       move.l 136(sp),d1
    79ae:	       move.l 132(sp),d2
    79b2:	       move.l 128(sp),d3
    79b6:	       jsr -66(a6)
    79ba:	       move.l d0,124(sp)

	while (skipAfter) {
    79be:	   ,-- bra.s 79fc <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    79c0:	,--|-> move.l 196(sp),40(sp)
    79c6:	|  |   move.l 196(sp),-(sp)
    79ca:	|  |   jsr 718 <get4bytes>
    79d0:	|  |   addq.l #4,sp
    79d2:	|  |   move.l d0,36(sp)
    79d6:	|  |   moveq #-1,d0
    79d8:	|  |   move.l d0,32(sp)
    79dc:	|  |   move.l 1c818 <DOSBase>,d0
    79e2:	|  |   movea.l d0,a6
    79e4:	|  |   move.l 40(sp),d1
    79e8:	|  |   move.l 36(sp),d2
    79ec:	|  |   move.l 32(sp),d3
    79f0:	|  |   jsr -66(a6)
    79f4:	|  |   move.l d0,28(sp)
		skipAfter --;
    79f8:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    79fc:	|  '-> tst.l 188(sp)
    7a00:	'----- bne.s 79c0 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7a02:	       move.l 196(sp),120(sp)
    7a08:	       clr.l 116(sp)
    7a0c:	       clr.l 112(sp)
    7a10:	       move.l 1c818 <DOSBase>,d0
    7a16:	       movea.l d0,a6
    7a18:	       move.l 120(sp),d1
    7a1c:	       move.l 116(sp),d2
    7a20:	       move.l 112(sp),d3
    7a24:	       jsr -66(a6)
    7a28:	       move.l d0,108(sp)
    7a2c:	       move.l 108(sp),d0
    7a30:	       addq.l #4,d0
    7a32:	       move.l d0,1c808 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    7a38:	       move.l 196(sp),104(sp)
    7a3e:	       move.l 196(sp),-(sp)
    7a42:	       jsr 718 <get4bytes>
    7a48:	       addq.l #4,sp
    7a4a:	       move.l d0,100(sp)
    7a4e:	       clr.l 96(sp)
    7a52:	       move.l 1c818 <DOSBase>,d0
    7a58:	       movea.l d0,a6
    7a5a:	       move.l 104(sp),d1
    7a5e:	       move.l 100(sp),d2
    7a62:	       move.l 96(sp),d3
    7a66:	       jsr -66(a6)
    7a6a:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7a6e:	       move.l 196(sp),88(sp)
    7a74:	       clr.l 84(sp)
    7a78:	       clr.l 80(sp)
    7a7c:	       move.l 1c818 <DOSBase>,d0
    7a82:	       movea.l d0,a6
    7a84:	       move.l 88(sp),d1
    7a88:	       move.l 84(sp),d2
    7a8c:	       move.l 80(sp),d3
    7a90:	       jsr -66(a6)
    7a94:	       move.l d0,76(sp)
    7a98:	       move.l 76(sp),d0
    7a9c:	       addq.l #4,d0
    7a9e:	       move.l d0,1c80c <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    7aa4:	       move.l 196(sp),72(sp)
    7aaa:	       move.l 196(sp),-(sp)
    7aae:	       jsr 718 <get4bytes>
    7ab4:	       addq.l #4,sp
    7ab6:	       move.l d0,68(sp)
    7aba:	       clr.l 64(sp)
    7abe:	       move.l 1c818 <DOSBase>,d0
    7ac4:	       movea.l d0,a6
    7ac6:	       move.l 72(sp),d1
    7aca:	       move.l 68(sp),d2
    7ace:	       move.l 64(sp),d3
    7ad2:	       jsr -66(a6)
    7ad6:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    7ada:	       move.l 196(sp),56(sp)
    7ae0:	       clr.l 52(sp)
    7ae4:	       clr.l 48(sp)
    7ae8:	       move.l 1c818 <DOSBase>,d0
    7aee:	       movea.l d0,a6
    7af0:	       move.l 56(sp),d1
    7af4:	       move.l 52(sp),d2
    7af8:	       move.l 48(sp),d3
    7afc:	       jsr -66(a6)
    7b00:	       move.l d0,44(sp)
    7b04:	       move.l 44(sp),d0
    7b08:	       move.l d0,1c800 <startOfDataIndex>
    7b0e:	       nop
    7b10:	       movem.l (sp)+,d2-d3/a6
    7b14:	       lea 180(sp),sp
    7b18:	       rts

00007b1a <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    7b1a:	    lea -20(sp),sp
    7b1e:	    move.l a6,-(sp)
    7b20:	    move.l d7,-(sp)
	APTR vbr = 0;
    7b22:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    7b26:	    move.w #20090,10(sp)
    7b2c:	    move.w #2049,12(sp)
    7b32:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    7b38:	    movea.l 1c810 <SysBase>,a0
    7b3e:	    move.w 296(a0),d0
    7b42:	    move.w d0,d0
    7b44:	    andi.l #65535,d0
    7b4a:	    moveq #1,d1
    7b4c:	    and.l d1,d0
    7b4e:	,-- beq.s 7b7c <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    7b50:	|   lea 28(sp),a0
    7b54:	|   lea -18(a0),a0
    7b58:	|   move.l a0,20(sp)
    7b5c:	|   move.l 1c810 <SysBase>,d0
    7b62:	|   movea.l d0,a6
    7b64:	|   move.l 20(sp),d7
    7b68:	|   exg d7,a5
    7b6a:	|   jsr -30(a6)
    7b6e:	|   exg d7,a5
    7b70:	|   move.l d0,16(sp)
    7b74:	|   move.l 16(sp),d0
    7b78:	|   move.l d0,24(sp)

	return vbr;
    7b7c:	'-> move.l 24(sp),d0
}
    7b80:	    move.l (sp)+,d7
    7b82:	    movea.l (sp)+,a6
    7b84:	    lea 20(sp),sp
    7b88:	    rts

00007b8a <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    7b8a:	movea.l 1c836 <VBR>,a0
    7b90:	lea 108(a0),a0
    7b94:	move.l 4(sp),(a0)
}
    7b98:	nop
    7b9a:	rts

00007b9c <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    7b9c:	movea.l 1c836 <VBR>,a0
    7ba2:	move.l 108(a0),d0
}
    7ba6:	rts

00007ba8 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    7ba8:	       subq.l #8,sp
    7baa:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    7bac:	       pea 18cd7 <PutChar+0x1129>
    7bb2:	       jsr 1710c <KPrintF>
    7bb8:	       addq.l #4,sp
	Forbid();
    7bba:	       move.l 1c810 <SysBase>,d0
    7bc0:	       movea.l d0,a6
    7bc2:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    7bc6:	       pea 18cef <PutChar+0x1141>
    7bcc:	       jsr 1710c <KPrintF>
    7bd2:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    7bd4:	       movea.l 1c814 <custom>,a0
    7bda:	       move.w 16(a0),d0
    7bde:	       move.w d0,1c834 <SystemADKCON>
	SystemInts=custom->intenar;
    7be4:	       movea.l 1c814 <custom>,a0
    7bea:	       move.w 28(a0),d0
    7bee:	       move.w d0,1c830 <SystemInts>
	SystemDMA=custom->dmaconr;
    7bf4:	       movea.l 1c814 <custom>,a0
    7bfa:	       move.w 2(a0),d0
    7bfe:	       move.w d0,1c832 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    7c04:	       movea.l 1c81c <GfxBase>,a0
    7c0a:	       move.l 34(a0),d0
    7c0e:	       move.l d0,1c83e <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    7c14:	       pea 18d0d <PutChar+0x115f>
    7c1a:	       jsr 1710c <KPrintF>
    7c20:	       addq.l #4,sp
	LoadView(0);
    7c22:	       clr.l 4(sp)
    7c26:	       move.l 1c81c <GfxBase>,d0
    7c2c:	       movea.l d0,a6
    7c2e:	       movea.l 4(sp),a1
    7c32:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    7c36:	       pea 18d23 <PutChar+0x1175>
    7c3c:	       jsr 1710c <KPrintF>
    7c42:	       addq.l #4,sp
	WaitTOF();
    7c44:	       move.l 1c81c <GfxBase>,d0
    7c4a:	       movea.l d0,a6
    7c4c:	       jsr -270(a6)
	WaitTOF();
    7c50:	       move.l 1c81c <GfxBase>,d0
    7c56:	       movea.l d0,a6
    7c58:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    7c5c:	       pea 18d38 <PutChar+0x118a>
    7c62:	       jsr 1710c <KPrintF>
    7c68:	       addq.l #4,sp
	WaitVbl();
    7c6a:	       jsr 17040 <WaitVbl>
	WaitVbl();
    7c70:	       jsr 17040 <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    7c76:	       pea 18d4d <PutChar+0x119f>
    7c7c:	       jsr 1710c <KPrintF>
    7c82:	       addq.l #4,sp
	OwnBlitter();
    7c84:	       move.l 1c81c <GfxBase>,d0
    7c8a:	       movea.l d0,a6
    7c8c:	       jsr -456(a6)
	WaitBlit();	
    7c90:	       move.l 1c81c <GfxBase>,d0
    7c96:	       movea.l d0,a6
    7c98:	       jsr -228(a6)
	Disable();
    7c9c:	       move.l 1c810 <SysBase>,d0
    7ca2:	       movea.l d0,a6
    7ca4:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    7ca8:	       pea 18d6e <PutChar+0x11c0>
    7cae:	       jsr 1710c <KPrintF>
    7cb4:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    7cb6:	       movea.l 1c814 <custom>,a0
    7cbc:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    7cc2:	       pea 18d85 <PutChar+0x11d7>
    7cc8:	       jsr 1710c <KPrintF>
    7cce:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    7cd0:	       clr.l 8(sp)
    7cd4:	   ,-- bra.s 7cf2 <TakeSystem+0x14a>
		custom->color[a]=0;
    7cd6:	,--|-> movea.l 1c814 <custom>,a0
    7cdc:	|  |   move.l 8(sp),d0
    7ce0:	|  |   addi.l #192,d0
    7ce6:	|  |   add.l d0,d0
    7ce8:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    7cee:	|  |   addq.l #1,8(sp)
    7cf2:	|  '-> moveq #31,d0
    7cf4:	|      cmp.l 8(sp),d0
    7cf8:	'----- bge.s 7cd6 <TakeSystem+0x12e>

	WaitVbl();
    7cfa:	       jsr 17040 <WaitVbl>
	WaitVbl();
    7d00:	       jsr 17040 <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    7d06:	       pea 18daa <PutChar+0x11fc>
    7d0c:	       jsr 1710c <KPrintF>
    7d12:	       addq.l #4,sp
	VBR=GetVBR();
    7d14:	       jsr 7b1a <GetVBR>
    7d1a:	       move.l d0,1c836 <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    7d20:	       jsr 7b9c <GetInterruptHandler>
    7d26:	       move.l d0,1c83a <SystemIrq>
}
    7d2c:	       nop
    7d2e:	       movea.l (sp)+,a6
    7d30:	       addq.l #8,sp
    7d32:	       rts

00007d34 <FreeSystem>:

void FreeSystem() { 
    7d34:	subq.l #4,sp
    7d36:	move.l a6,-(sp)
	WaitVbl();
    7d38:	jsr 17040 <WaitVbl>
	WaitBlit();
    7d3e:	move.l 1c81c <GfxBase>,d0
    7d44:	movea.l d0,a6
    7d46:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    7d4a:	movea.l 1c814 <custom>,a0
    7d50:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    7d56:	movea.l 1c814 <custom>,a0
    7d5c:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    7d62:	movea.l 1c814 <custom>,a0
    7d68:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    7d6e:	move.l 1c83a <SystemIrq>,d0
    7d74:	move.l d0,-(sp)
    7d76:	jsr 7b8a <SetInterruptHandler>
    7d7c:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    7d7e:	movea.l 1c81c <GfxBase>,a0
    7d84:	move.l 38(a0),d0
    7d88:	movea.l 1c814 <custom>,a0
    7d8e:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    7d92:	movea.l 1c81c <GfxBase>,a0
    7d98:	move.l 50(a0),d0
    7d9c:	movea.l 1c814 <custom>,a0
    7da2:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    7da6:	movea.l 1c814 <custom>,a0
    7dac:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    7db2:	move.w 1c832 <SystemDMA>,d0
    7db8:	movea.l 1c814 <custom>,a0
    7dbe:	ori.w #-32768,d0
    7dc2:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    7dc6:	move.w 1c834 <SystemADKCON>,d0
    7dcc:	movea.l 1c814 <custom>,a0
    7dd2:	ori.w #-32768,d0
    7dd6:	move.w d0,158(a0)

	WaitBlit();	
    7dda:	move.l 1c81c <GfxBase>,d0
    7de0:	movea.l d0,a6
    7de2:	jsr -228(a6)
	DisownBlitter();
    7de6:	move.l 1c81c <GfxBase>,d0
    7dec:	movea.l d0,a6
    7dee:	jsr -462(a6)
	Enable();
    7df2:	move.l 1c810 <SysBase>,d0
    7df8:	movea.l d0,a6
    7dfa:	jsr -126(a6)

	LoadView(ActiView);
    7dfe:	move.l 1c83e <ActiView>,4(sp)
    7e06:	move.l 1c81c <GfxBase>,d0
    7e0c:	movea.l d0,a6
    7e0e:	movea.l 4(sp),a1
    7e12:	jsr -222(a6)
	WaitTOF();
    7e16:	move.l 1c81c <GfxBase>,d0
    7e1c:	movea.l d0,a6
    7e1e:	jsr -270(a6)
	WaitTOF();
    7e22:	move.l 1c81c <GfxBase>,d0
    7e28:	movea.l d0,a6
    7e2a:	jsr -270(a6)

	Permit();
    7e2e:	move.l 1c810 <SysBase>,d0
    7e34:	movea.l d0,a6
    7e36:	jsr -138(a6)
}
    7e3a:	nop
    7e3c:	movea.l (sp)+,a6
    7e3e:	addq.l #4,sp
    7e40:	rts

00007e42 <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    7e42:	       lea -132(sp),sp
    7e46:	       movem.l d2-d3/a6,-(sp)

	//int *bp = 0x200;
  	//*bp = 0;

	for(int i=0;i<1000;i++) {
    7e4a:	       clr.l 140(sp)
    7e4e:	   ,-- bra.s 7e54 <main+0x12>
    7e50:	,--|-> addq.l #1,140(sp)
    7e54:	|  '-> cmpi.l #999,140(sp)
    7e5c:	'----- ble.s 7e50 <main+0xe>

	}

	SysBase = *((struct ExecBase**)4UL);
    7e5e:	       movea.w #4,a0
    7e62:	       move.l (a0),d0
    7e64:	       move.l d0,1c810 <SysBase>
	custom = (struct Custom*)0xdff000;	
    7e6a:	       move.l #14675968,1c814 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    7e74:	       move.l #101838,136(sp)
    7e7c:	       clr.l 132(sp)
    7e80:	       move.l 1c810 <SysBase>,d0
    7e86:	       movea.l d0,a6
    7e88:	       movea.l 136(sp),a1
    7e8c:	       move.l 132(sp),d0
    7e90:	       jsr -552(a6)
    7e94:	       move.l d0,128(sp)
    7e98:	       move.l 128(sp),d0
    7e9c:	       move.l d0,1c81c <GfxBase>
	if (!GfxBase)
    7ea2:	       move.l 1c81c <GfxBase>,d0
    7ea8:	   ,-- bne.s 7ebe <main+0x7c>
		Exit(0);
    7eaa:	   |   clr.l 124(sp)
    7eae:	   |   move.l 1c818 <DOSBase>,d0
    7eb4:	   |   movea.l d0,a6
    7eb6:	   |   move.l 124(sp),d1
    7eba:	   |   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    7ebe:	   '-> move.l #101855,120(sp)
    7ec6:	       clr.l 116(sp)
    7eca:	       move.l 1c810 <SysBase>,d0
    7ed0:	       movea.l d0,a6
    7ed2:	       movea.l 120(sp),a1
    7ed6:	       move.l 116(sp),d0
    7eda:	       jsr -552(a6)
    7ede:	       move.l d0,112(sp)
    7ee2:	       move.l 112(sp),d0
    7ee6:	       move.l d0,1c818 <DOSBase>
	if (!DOSBase)
    7eec:	       move.l 1c818 <DOSBase>,d0
    7ef2:	   ,-- bne.s 7f08 <main+0xc6>
		Exit(0);
    7ef4:	   |   clr.l 108(sp)
    7ef8:	   |   move.l 1c818 <DOSBase>,d0
    7efe:	   |   movea.l d0,a6
    7f00:	   |   move.l 108(sp),d1
    7f04:	   |   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    7f08:	   '-> move.l #101867,104(sp)
    7f10:	       clr.l 100(sp)
    7f14:	       move.l 1c810 <SysBase>,d0
    7f1a:	       movea.l d0,a6
    7f1c:	       movea.l 104(sp),a1
    7f20:	       move.l 100(sp),d0
    7f24:	       jsr -552(a6)
    7f28:	       move.l d0,96(sp)
    7f2c:	       move.l 96(sp),d0
    7f30:	       move.l d0,1c820 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    7f36:	       move.l 1c820 <MathIeeeSingBasBase>,d0
    7f3c:	   ,-- bne.s 7f52 <main+0x110>
		Exit(0);	
    7f3e:	   |   clr.l 92(sp)
    7f42:	   |   move.l 1c818 <DOSBase>,d0
    7f48:	   |   movea.l d0,a6
    7f4a:	   |   move.l 92(sp),d1
    7f4e:	   |   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    7f52:	   '-> move.l #101891,88(sp)
    7f5a:	       clr.l 84(sp)
    7f5e:	       move.l 1c810 <SysBase>,d0
    7f64:	       movea.l d0,a6
    7f66:	       movea.l 88(sp),a1
    7f6a:	       move.l 84(sp),d0
    7f6e:	       jsr -552(a6)
    7f72:	       move.l d0,80(sp)
    7f76:	       move.l 80(sp),d0
    7f7a:	       move.l d0,1c824 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    7f80:	       move.l 1c824 <MathIeeeSingTransBase>,d0
    7f86:	   ,-- bne.s 7f9c <main+0x15a>
		Exit(0);
    7f88:	   |   clr.l 76(sp)
    7f8c:	   |   move.l 1c818 <DOSBase>,d0
    7f92:	   |   movea.l d0,a6
    7f94:	   |   move.l 76(sp),d1
    7f98:	   |   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    7f9c:	   '-> move.l #101917,72(sp)
    7fa4:	       clr.l 68(sp)
    7fa8:	       move.l 1c810 <SysBase>,d0
    7fae:	       movea.l d0,a6
    7fb0:	       movea.l 72(sp),a1
    7fb4:	       move.l 68(sp),d0
    7fb8:	       jsr -552(a6)
    7fbc:	       move.l d0,64(sp)
    7fc0:	       move.l 64(sp),d0
    7fc4:	       move.l d0,1c82c <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    7fca:	       move.l 1c82c <MathIeeeDoubTransBase>,d0
    7fd0:	   ,-- bne.s 7fe6 <main+0x1a4>
		Exit(0);
    7fd2:	   |   clr.l 60(sp)
    7fd6:	   |   move.l 1c818 <DOSBase>,d0
    7fdc:	   |   movea.l d0,a6
    7fde:	   |   move.l 60(sp),d1
    7fe2:	   |   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    7fe6:	   '-> move.l #101943,56(sp)
    7fee:	       clr.l 52(sp)
    7ff2:	       move.l 1c810 <SysBase>,d0
    7ff8:	       movea.l d0,a6
    7ffa:	       movea.l 56(sp),a1
    7ffe:	       move.l 52(sp),d0
    8002:	       jsr -552(a6)
    8006:	       move.l d0,48(sp)
    800a:	       move.l 48(sp),d0
    800e:	       move.l d0,1c828 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    8014:	       move.l 1c828 <MathIeeeDoubBasBase>,d0
    801a:	   ,-- bne.s 8030 <main+0x1ee>
		Exit(0);
    801c:	   |   clr.l 44(sp)
    8020:	   |   move.l 1c818 <DOSBase>,d0
    8026:	   |   movea.l d0,a6
    8028:	   |   move.l 44(sp),d1
    802c:	   |   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 034!\n");
    8030:	   '-> pea 18e4f <PutChar+0x12a1>
    8036:	       jsr 1710c <KPrintF>
    803c:	       addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 034!\n", 25);
    803e:	       move.l 1c818 <DOSBase>,d0
    8044:	       movea.l d0,a6
    8046:	       jsr -60(a6)
    804a:	       move.l d0,40(sp)
    804e:	       move.l 40(sp),d0
    8052:	       move.l d0,36(sp)
    8056:	       move.l #101999,32(sp)
    805e:	       moveq #25,d0
    8060:	       move.l d0,28(sp)
    8064:	       move.l 1c818 <DOSBase>,d0
    806a:	       movea.l d0,a6
    806c:	       move.l 36(sp),d1
    8070:	       move.l 32(sp),d2
    8074:	       move.l 28(sp),d3
    8078:	       jsr -48(a6)
    807c:	       move.l d0,24(sp)
	Delay(50);
    8080:	       moveq #50,d0
    8082:	       move.l d0,20(sp)
    8086:	       move.l 1c818 <DOSBase>,d0
    808c:	       movea.l d0,a6
    808e:	       move.l 20(sp),d1
    8092:	       jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    8096:	       pea 18e88 <PutChar+0x12da>
    809c:	       jsr 1710c <KPrintF>
    80a2:	       addq.l #4,sp
	TakeSystem();
    80a4:	       jsr 7ba8 <TakeSystem>
	KPrintF("System Taken\n");
    80aa:	       pea 18e97 <PutChar+0x12e9>
    80b0:	       jsr 1710c <KPrintF>
    80b6:	       addq.l #4,sp

	custom->dmacon = 0x87ff;
    80b8:	       movea.l 1c814 <custom>,a0
    80be:	       move.w #-30721,150(a0)
	WaitVbl();
    80c4:	       jsr 17040 <WaitVbl>

	KPrintF("Starting main_sludge\n");
    80ca:	       pea 18ea5 <PutChar+0x12f7>
    80d0:	       jsr 1710c <KPrintF>
    80d6:	       addq.l #4,sp
	main_sludge(argc, argv);	
    80d8:	       move.l 152(sp),-(sp)
    80dc:	       move.l 152(sp),-(sp)
    80e0:	       jsr 49d8 <main_sludge>
    80e6:	       addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    80e8:	       jsr 7d34 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    80ee:	       move.l 1c818 <DOSBase>,16(sp)
    80f6:	       move.l 1c810 <SysBase>,d0
    80fc:	       movea.l d0,a6
    80fe:	       movea.l 16(sp),a1
    8102:	       jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    8106:	       move.l 1c81c <GfxBase>,12(sp)
    810e:	       move.l 1c810 <SysBase>,d0
    8114:	       movea.l d0,a6
    8116:	       movea.l 12(sp),a1
    811a:	       jsr -414(a6)
    811e:	       moveq #0,d0
}
    8120:	       movem.l (sp)+,d2-d3/a6
    8124:	       lea 132(sp),sp
    8128:	       rts

0000812a <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    812a:	    lea -16(sp),sp
    812e:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    8130:	    moveq #8,d0
    8132:	    move.l d0,16(sp)
    8136:	    clr.l 12(sp)
    813a:	    move.l 1c810 <SysBase>,d0
    8140:	    movea.l d0,a6
    8142:	    move.l 16(sp),d0
    8146:	    move.l 12(sp),d1
    814a:	    jsr -684(a6)
    814e:	    move.l d0,8(sp)
    8152:	    move.l 8(sp),d0
    8156:	    move.l d0,4(sp)
	if (!newStat) {
    815a:	,-- bne.s 818a <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    815c:	|   movea.l 1c18e <nowStatus>,a0
    8162:	|   move.l (a0),d0
    8164:	|   movea.l 4(sp),a0
    8168:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    816c:	|   pea 188fb <PutChar+0xd4d>
    8172:	|   jsr b8 <copyString>
    8178:	|   addq.l #4,sp
    817a:	|   movea.l 4(sp),a0
    817e:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    8180:	|   movea.l 1c18e <nowStatus>,a0
    8186:	|   move.l 4(sp),(a0)
	}
}
    818a:	'-> nop
    818c:	    movea.l (sp)+,a6
    818e:	    lea 16(sp),sp
    8192:	    rts

00008194 <clearStatusBar>:

void clearStatusBar () {
    8194:	       lea -16(sp),sp
    8198:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    819a:	       movea.l 1c18e <nowStatus>,a0
    81a0:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    81a4:	       movea.l 1c18e <nowStatus>,a0
    81aa:	       moveq #-1,d0
    81ac:	       move.l d0,6(a0)
	while (stat) {
    81b0:	   ,-- bra.s 81f0 <clearStatusBar+0x5c>
		kill = stat;
    81b2:	,--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    81b8:	|  |   movea.l 16(sp),a0
    81bc:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    81c2:	|  |   movea.l 12(sp),a0
    81c6:	|  |   move.l (a0),8(sp)
    81ca:	|  |   move.l 1c810 <SysBase>,d0
    81d0:	|  |   movea.l d0,a6
    81d2:	|  |   movea.l 8(sp),a1
    81d6:	|  |   jsr -690(a6)
		FreeVec(kill);
    81da:	|  |   move.l 12(sp),4(sp)
    81e0:	|  |   move.l 1c810 <SysBase>,d0
    81e6:	|  |   movea.l d0,a6
    81e8:	|  |   movea.l 4(sp),a1
    81ec:	|  |   jsr -690(a6)
	while (stat) {
    81f0:	|  '-> tst.l 16(sp)
    81f4:	'----- bne.s 81b2 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    81f6:	       movea.l 1c18e <nowStatus>,a0
    81fc:	       clr.l (a0)
}
    81fe:	       nop
    8200:	       movea.l (sp)+,a6
    8202:	       lea 16(sp),sp
    8206:	       rts

00008208 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    8208:	clr.l 1c842 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    820e:	move.w #-1,1c846 <mainStatus+0x4>
	mainStatus.litStatus = -1;
    8216:	moveq #-1,d0
    8218:	move.l d0,1c848 <mainStatus+0x6>
	mainStatus.statusX = 10;
    821e:	moveq #10,d0
    8220:	move.l d0,1c84c <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    8226:	movea.l 1c768 <winHeight>,a0
    822c:	lea -15(a0),a0
    8230:	move.l a0,d0
    8232:	move.l d0,1c850 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    8238:	nop
    823a:	rts

0000823c <killLastStatus>:

void killLastStatus () {
    823c:	    lea -12(sp),sp
    8240:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    8242:	    movea.l 1c18e <nowStatus>,a0
    8248:	    move.l (a0),d0
    824a:	,-- beq.s 8294 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    824c:	|   movea.l 1c18e <nowStatus>,a0
    8252:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    8256:	|   movea.l 1c18e <nowStatus>,a0
    825c:	|   movea.l 12(sp),a1
    8260:	|   move.l 4(a1),d0
    8264:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    8266:	|   movea.l 12(sp),a0
    826a:	|   move.l (a0),8(sp)
    826e:	|   move.l 1c810 <SysBase>,d0
    8274:	|   movea.l d0,a6
    8276:	|   movea.l 8(sp),a1
    827a:	|   jsr -690(a6)
		FreeVec(kill);
    827e:	|   move.l 12(sp),4(sp)
    8284:	|   move.l 1c810 <SysBase>,d0
    828a:	|   movea.l d0,a6
    828c:	|   movea.l 4(sp),a1
    8290:	|   jsr -690(a6)
	}
}
    8294:	'-> nop
    8296:	    movea.l (sp)+,a6
    8298:	    lea 12(sp),sp
    829c:	    rts

0000829e <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    829e:	movea.l 1c18e <nowStatus>,a0
    82a4:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    82aa:	movea.l 1c18e <nowStatus>,a0
    82b0:	move.l 8(sp),14(a0)
}
    82b6:	nop
    82b8:	rts

000082ba <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    82ba:	       lea -100(sp),sp
    82be:	       move.l a6,-(sp)
    82c0:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    82c2:	       movea.l 1c18e <nowStatus>,a0
    82c8:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    82cc:	       movea.l 1c18e <nowStatus>,a0
    82d2:	       move.w 4(a0),d0
    82d6:	       move.w d0,d0
    82d8:	       andi.l #65535,d0
    82de:	       move.l 112(sp),-(sp)
    82e2:	       move.l d0,-(sp)
    82e4:	       jsr 8d0 <put2bytes>
    82ea:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    82ec:	       movea.l 1c18e <nowStatus>,a0
    82f2:	       move.l 6(a0),d0
    82f6:	       move.l d0,d0
    82f8:	       movea.w d0,a0
    82fa:	       move.l 112(sp),-(sp)
    82fe:	       move.l a0,-(sp)
    8300:	       jsr a9c <putSigned>
    8306:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    8308:	       movea.l 1c18e <nowStatus>,a0
    830e:	       move.l 10(a0),d0
    8312:	       move.l 112(sp),-(sp)
    8316:	       move.l d0,-(sp)
    8318:	       jsr 8d0 <put2bytes>
    831e:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    8320:	       movea.l 1c18e <nowStatus>,a0
    8326:	       move.l 14(a0),d0
    832a:	       move.l 112(sp),-(sp)
    832e:	       move.l d0,-(sp)
    8330:	       jsr 8d0 <put2bytes>
    8336:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    8338:	       move.l 112(sp),100(sp)
    833e:	       movea.l 1c18e <nowStatus>,a0
    8344:	       move.l 18(a0),96(sp)
    834a:	       move.l 1c818 <DOSBase>,d0
    8350:	       movea.l d0,a6
    8352:	       move.l 100(sp),d1
    8356:	       move.l 96(sp),d2
    835a:	       jsr -312(a6)
    835e:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    8362:	       move.l 112(sp),88(sp)
    8368:	       movea.l 1c18e <nowStatus>,a0
    836e:	       move.l 22(a0),84(sp)
    8374:	       move.l 1c818 <DOSBase>,d0
    837a:	       movea.l d0,a6
    837c:	       move.l 88(sp),d1
    8380:	       move.l 84(sp),d2
    8384:	       jsr -312(a6)
    8388:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    838c:	       move.l 112(sp),76(sp)
    8392:	       movea.l 1c18e <nowStatus>,a0
    8398:	       move.l 26(a0),72(sp)
    839e:	       move.l 1c818 <DOSBase>,d0
    83a4:	       movea.l d0,a6
    83a6:	       move.l 76(sp),d1
    83aa:	       move.l 72(sp),d2
    83ae:	       jsr -312(a6)
    83b2:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    83b6:	       move.l 112(sp),64(sp)
    83bc:	       movea.l 1c18e <nowStatus>,a0
    83c2:	       move.l 30(a0),60(sp)
    83c8:	       move.l 1c818 <DOSBase>,d0
    83ce:	       movea.l d0,a6
    83d0:	       move.l 64(sp),d1
    83d4:	       move.l 60(sp),d2
    83d8:	       jsr -312(a6)
    83dc:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    83e0:	       move.l 112(sp),52(sp)
    83e6:	       movea.l 1c18e <nowStatus>,a0
    83ec:	       move.l 34(a0),48(sp)
    83f2:	       move.l 1c818 <DOSBase>,d0
    83f8:	       movea.l d0,a6
    83fa:	       move.l 52(sp),d1
    83fe:	       move.l 48(sp),d2
    8402:	       jsr -312(a6)
    8406:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    840a:	       move.l 112(sp),40(sp)
    8410:	       movea.l 1c18e <nowStatus>,a0
    8416:	       move.l 38(a0),36(sp)
    841c:	       move.l 1c818 <DOSBase>,d0
    8422:	       movea.l d0,a6
    8424:	       move.l 40(sp),d1
    8428:	       move.l 36(sp),d2
    842c:	       jsr -312(a6)
    8430:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    8434:	   ,-- bra.s 8478 <saveStatusBars+0x1be>
		FPutC (fp,1);
    8436:	,--|-> move.l 112(sp),16(sp)
    843c:	|  |   moveq #1,d0
    843e:	|  |   move.l d0,12(sp)
    8442:	|  |   move.l 1c818 <DOSBase>,d0
    8448:	|  |   movea.l d0,a6
    844a:	|  |   move.l 16(sp),d1
    844e:	|  |   move.l 12(sp),d2
    8452:	|  |   jsr -312(a6)
    8456:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    845a:	|  |   movea.l 104(sp),a0
    845e:	|  |   move.l (a0),d0
    8460:	|  |   move.l 112(sp),-(sp)
    8464:	|  |   move.l d0,-(sp)
    8466:	|  |   jsr bd8 <writeString>
    846c:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    846e:	|  |   movea.l 104(sp),a0
    8472:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    8478:	|  '-> tst.l 104(sp)
    847c:	'----- bne.s 8436 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    847e:	       move.l 112(sp),28(sp)
    8484:	       clr.l 24(sp)
    8488:	       move.l 1c818 <DOSBase>,d0
    848e:	       movea.l d0,a6
    8490:	       move.l 28(sp),d1
    8494:	       move.l 24(sp),d2
    8498:	       jsr -312(a6)
    849c:	       move.l d0,20(sp)
}
    84a0:	       nop
    84a2:	       move.l (sp)+,d2
    84a4:	       movea.l (sp)+,a6
    84a6:	       lea 100(sp),sp
    84aa:	       rts

000084ac <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    84ac:	movea.l 1c18e <nowStatus>,a0
    84b2:	move.l 4(sp),6(a0)
}
    84b8:	nop
    84ba:	rts

000084bc <setStatusBar>:

void setStatusBar (char * txt) {
    84bc:	    subq.l #4,sp
    84be:	    move.l a6,-(sp)
    84c0:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    84c2:	    movea.l 1c18e <nowStatus>,a0
    84c8:	    move.l (a0),d0
    84ca:	,-- beq.s 84fe <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    84cc:	|   movea.l 1c18e <nowStatus>,a0
    84d2:	|   movea.l (a0),a0
    84d4:	|   move.l (a0),8(sp)
    84d8:	|   move.l 1c810 <SysBase>,d0
    84de:	|   movea.l d0,a6
    84e0:	|   movea.l 8(sp),a1
    84e4:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    84e8:	|   movea.l 1c18e <nowStatus>,a0
    84ee:	|   movea.l (a0),a2
    84f0:	|   move.l 16(sp),-(sp)
    84f4:	|   jsr b8 <copyString>
    84fa:	|   addq.l #4,sp
    84fc:	|   move.l d0,(a2)
	}
}
    84fe:	'-> nop
    8500:	    movea.l (sp)+,a2
    8502:	    movea.l (sp)+,a6
    8504:	    addq.l #4,sp
    8506:	    rts

00008508 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    8508:	       movea.l 1c18e <nowStatus>,a0
    850e:	       move.l (a0),d0
    8510:	,----- beq.s 851e <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    8512:	|      movea.l 1c18e <nowStatus>,a0
    8518:	|      movea.l (a0),a0
    851a:	|      move.l (a0),d0
    851c:	|  ,-- bra.s 8524 <statusBarText+0x1c>
	} else {
		return "";
    851e:	'--|-> move.l #100603,d0
	}
    8524:	   '-> rts

00008526 <killZBuffer>:

#define EMULATOR

struct zBufferData *zBuffer;

void killZBuffer () {
    8526:	       lea -12(sp),sp
    852a:	       move.l a6,-(sp)
	struct zBufferData *zbuffercursor =  zBuffer;
    852c:	       move.l 1c86c <zBuffer>,12(sp)

	while(zbuffercursor) {
    8534:	   ,-- bra.s 855c <killZBuffer+0x36>
		struct zBufferData *deleteme = zbuffercursor;
    8536:	,--|-> move.l 12(sp),8(sp)
		zbuffercursor = zbuffercursor->nextPanel;
    853c:	|  |   movea.l 12(sp),a0
    8540:	|  |   move.l 24(a0),12(sp)
		FreeVec(deleteme);
    8546:	|  |   move.l 8(sp),4(sp)
    854c:	|  |   move.l 1c810 <SysBase>,d0
    8552:	|  |   movea.l d0,a6
    8554:	|  |   movea.l 4(sp),a1
    8558:	|  |   jsr -690(a6)
	while(zbuffercursor) {
    855c:	|  '-> tst.l 12(sp)
    8560:	'----- bne.s 8536 <killZBuffer+0x10>
	}
	zBuffer = NULL;
    8562:	       clr.l 1c86c <zBuffer>
}
    8568:	       nop
    856a:	       movea.l (sp)+,a6
    856c:	       lea 12(sp),sp
    8570:	       rts

00008572 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    8572:	                lea -304(sp),sp
    8576:	                movem.l d2-d4/a2/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    857a:	                clr.l 314(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();	
    857e:	                jsr 8526 <killZBuffer>
	
	if (! openFileFromNum (y)) return FALSE;
    8584:	                move.l 328(sp),d0
    8588:	                move.l d0,-(sp)
    858a:	                jsr 7610 <openFileFromNum>
    8590:	                addq.l #4,sp
    8592:	                tst.l d0
    8594:	            ,-- bne.s 859c <setZBuffer+0x2a>
    8596:	            |   clr.w d0
    8598:	,-----------|-- bra.w 885a <setZBuffer+0x2e8>
	
	if (FGetC (bigDataFile) != 'a' || FGetC (bigDataFile) != 's' || FGetC (bigDataFile) != 'z' || FGetC (bigDataFile) != 'b') 
    859c:	|           '-> move.l 1c7f8 <bigDataFile>,310(sp)
    85a4:	|               move.l 1c818 <DOSBase>,d0
    85aa:	|               movea.l d0,a6
    85ac:	|               move.l 310(sp),d1
    85b0:	|               jsr -306(a6)
    85b4:	|               move.l d0,306(sp)
    85b8:	|               move.l 306(sp),d0
    85bc:	|               moveq #97,d1
    85be:	|               cmp.l d0,d1
    85c0:	|        ,----- bne.s 8634 <setZBuffer+0xc2>
    85c2:	|        |      move.l 1c7f8 <bigDataFile>,302(sp)
    85ca:	|        |      move.l 1c818 <DOSBase>,d0
    85d0:	|        |      movea.l d0,a6
    85d2:	|        |      move.l 302(sp),d1
    85d6:	|        |      jsr -306(a6)
    85da:	|        |      move.l d0,298(sp)
    85de:	|        |      move.l 298(sp),d0
    85e2:	|        |      moveq #115,d1
    85e4:	|        |      cmp.l d0,d1
    85e6:	|        +----- bne.s 8634 <setZBuffer+0xc2>
    85e8:	|        |      move.l 1c7f8 <bigDataFile>,294(sp)
    85f0:	|        |      move.l 1c818 <DOSBase>,d0
    85f6:	|        |      movea.l d0,a6
    85f8:	|        |      move.l 294(sp),d1
    85fc:	|        |      jsr -306(a6)
    8600:	|        |      move.l d0,290(sp)
    8604:	|        |      move.l 290(sp),d0
    8608:	|        |      moveq #122,d1
    860a:	|        |      cmp.l d0,d1
    860c:	|        +----- bne.s 8634 <setZBuffer+0xc2>
    860e:	|        |      move.l 1c7f8 <bigDataFile>,286(sp)
    8616:	|        |      move.l 1c818 <DOSBase>,d0
    861c:	|        |      movea.l d0,a6
    861e:	|        |      move.l 286(sp),d1
    8622:	|        |      jsr -306(a6)
    8626:	|        |      move.l d0,282(sp)
    862a:	|        |      move.l 282(sp),d0
    862e:	|        |      moveq #98,d1
    8630:	|        |      cmp.l d0,d1
    8632:	|        |  ,-- beq.s 8648 <setZBuffer+0xd6>
	{ 
		 KPrintF("Not a Z-buffer file");
    8634:	|        '--|-> pea 18ee2 <PutChar+0x1334>
    863a:	|           |   jsr 1710c <KPrintF>
    8640:	|           |   addq.l #4,sp
		 return FALSE;
    8642:	|           |   clr.w d0
    8644:	+-----------|-- bra.w 885a <setZBuffer+0x2e8>
	}

	UWORD numelements = FGetC(bigDataFile);
    8648:	|           '-> move.l 1c7f8 <bigDataFile>,278(sp)
    8650:	|               move.l 1c818 <DOSBase>,d0
    8656:	|               movea.l d0,a6
    8658:	|               move.l 278(sp),d1
    865c:	|               jsr -306(a6)
    8660:	|               move.l d0,274(sp)
    8664:	|               move.l 274(sp),d0
    8668:	|               move.w d0,322(sp)

	UWORD size;
	UWORD count;

	zBuffer = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    866c:	|               moveq #28,d0
    866e:	|               move.l d0,270(sp)
    8672:	|               clr.l 266(sp)
    8676:	|               move.l 1c810 <SysBase>,d0
    867c:	|               movea.l d0,a6
    867e:	|               move.l 270(sp),d0
    8682:	|               move.l 266(sp),d1
    8686:	|               jsr -684(a6)
    868a:	|               move.l d0,262(sp)
    868e:	|               move.l 262(sp),d0
    8692:	|               move.l d0,1c86c <zBuffer>

	struct zBufferData *currentitem;
	currentitem = zBuffer;
    8698:	|               move.l 1c86c <zBuffer>,318(sp)

	while(numelements--)
    86a0:	|     ,-------- bra.w 8840 <setZBuffer+0x2ce>
	{		
		currentitem->width = get2bytes (bigDataFile);
    86a4:	|  ,--|-------> move.l 1c7f8 <bigDataFile>,d0
    86aa:	|  |  |         move.l d0,-(sp)
    86ac:	|  |  |         jsr 6bc <get2bytes>
    86b2:	|  |  |         addq.l #4,sp
    86b4:	|  |  |         movea.l 318(sp),a0
    86b8:	|  |  |         move.l d0,(a0)
		currentitem->height = get2bytes (bigDataFile);
    86ba:	|  |  |         move.l 1c7f8 <bigDataFile>,d0
    86c0:	|  |  |         move.l d0,-(sp)
    86c2:	|  |  |         jsr 6bc <get2bytes>
    86c8:	|  |  |         addq.l #4,sp
    86ca:	|  |  |         movea.l 318(sp),a0
    86ce:	|  |  |         move.l d0,4(a0)

		currentitem->topx = get2bytes (bigDataFile);
    86d2:	|  |  |         move.l 1c7f8 <bigDataFile>,d0
    86d8:	|  |  |         move.l d0,-(sp)
    86da:	|  |  |         jsr 6bc <get2bytes>
    86e0:	|  |  |         addq.l #4,sp
    86e2:	|  |  |         movea.l 318(sp),a0
    86e6:	|  |  |         move.l d0,8(a0)
		currentitem->topy = get2bytes (bigDataFile);
    86ea:	|  |  |         move.l 1c7f8 <bigDataFile>,d0
    86f0:	|  |  |         move.l d0,-(sp)
    86f2:	|  |  |         jsr 6bc <get2bytes>
    86f8:	|  |  |         addq.l #4,sp
    86fa:	|  |  |         movea.l 318(sp),a0
    86fe:	|  |  |         move.l d0,12(a0)
		currentitem->yz = get2bytes (bigDataFile);
    8702:	|  |  |         move.l 1c7f8 <bigDataFile>,d0
    8708:	|  |  |         move.l d0,-(sp)
    870a:	|  |  |         jsr 6bc <get2bytes>
    8710:	|  |  |         addq.l #4,sp
    8712:	|  |  |         movea.l 318(sp),a0
    8716:	|  |  |         move.l d0,16(a0)

		UWORD size = currentitem->width * currentitem->height / 8;
    871a:	|  |  |         movea.l 318(sp),a0
    871e:	|  |  |         move.l (a0),d0
    8720:	|  |  |         movea.l 318(sp),a0
    8724:	|  |  |         move.l 4(a0),d1
    8728:	|  |  |         move.l d1,-(sp)
    872a:	|  |  |         move.l d0,-(sp)
    872c:	|  |  |         jsr 17a98 <__mulsi3>
    8732:	|  |  |         addq.l #8,sp
    8734:	|  |  |         tst.l d0
    8736:	|  |  |     ,-- bge.s 873a <setZBuffer+0x1c8>
    8738:	|  |  |     |   addq.l #7,d0
    873a:	|  |  |     '-> asr.l #3,d0
    873c:	|  |  |         move.w d0,260(sp)
		currentitem->bitplane = AllocVec( size, MEMF_CHIP);
    8740:	|  |  |         moveq #0,d0
    8742:	|  |  |         move.w 260(sp),d0
    8746:	|  |  |         move.l d0,256(sp)
    874a:	|  |  |         moveq #2,d1
    874c:	|  |  |         move.l d1,252(sp)
    8750:	|  |  |         move.l 1c810 <SysBase>,d0
    8756:	|  |  |         movea.l d0,a6
    8758:	|  |  |         move.l 256(sp),d0
    875c:	|  |  |         move.l 252(sp),d1
    8760:	|  |  |         jsr -684(a6)
    8764:	|  |  |         move.l d0,248(sp)
    8768:	|  |  |         move.l 248(sp),d0
    876c:	|  |  |         movea.l 318(sp),a0
    8770:	|  |  |         move.l d0,20(a0)
		count = FRead( bigDataFile, currentitem->bitplane, 1, size);				
    8774:	|  |  |         move.l 1c7f8 <bigDataFile>,244(sp)
    877c:	|  |  |         movea.l 318(sp),a0
    8780:	|  |  |         move.l 20(a0),240(sp)
    8786:	|  |  |         moveq #1,d0
    8788:	|  |  |         move.l d0,236(sp)
    878c:	|  |  |         moveq #0,d0
    878e:	|  |  |         move.w 260(sp),d0
    8792:	|  |  |         move.l d0,232(sp)
    8796:	|  |  |         move.l 1c818 <DOSBase>,d0
    879c:	|  |  |         movea.l d0,a6
    879e:	|  |  |         move.l 244(sp),d1
    87a2:	|  |  |         move.l 240(sp),d2
    87a6:	|  |  |         move.l 236(sp),d3
    87aa:	|  |  |         move.l 232(sp),d4
    87ae:	|  |  |         jsr -324(a6)
    87b2:	|  |  |         move.l d0,228(sp)
    87b6:	|  |  |         move.l 228(sp),d0
    87ba:	|  |  |         move.w d0,226(sp)

		if(numelements > 0) {
    87be:	|  |  |         tst.w 322(sp)
    87c2:	|  |  |  ,----- beq.s 87fe <setZBuffer+0x28c>
			currentitem->nextPanel = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    87c4:	|  |  |  |      moveq #28,d1
    87c6:	|  |  |  |      move.l d1,222(sp)
    87ca:	|  |  |  |      clr.l 218(sp)
    87ce:	|  |  |  |      move.l 1c810 <SysBase>,d0
    87d4:	|  |  |  |      movea.l d0,a6
    87d6:	|  |  |  |      move.l 222(sp),d0
    87da:	|  |  |  |      move.l 218(sp),d1
    87de:	|  |  |  |      jsr -684(a6)
    87e2:	|  |  |  |      move.l d0,214(sp)
    87e6:	|  |  |  |      move.l 214(sp),d0
    87ea:	|  |  |  |      movea.l 318(sp),a0
    87ee:	|  |  |  |      move.l d0,24(a0)
			currentitem = currentitem->nextPanel;
    87f2:	|  |  |  |      movea.l 318(sp),a0
    87f6:	|  |  |  |      move.l 24(a0),318(sp)
    87fc:	|  |  |  |  ,-- bra.s 8806 <setZBuffer+0x294>
		} else {
			currentitem->nextPanel = NULL;
    87fe:	|  |  |  '--|-> movea.l 318(sp),a0
    8802:	|  |  |     |   clr.l 24(a0)
		}
		#ifdef EMULATOR  
  			debug_register_bitmap(currentitem->bitplane, "zBuffer.bpl", currentitem->width, currentitem->height , 1, 0);
    8806:	|  |  |     '-> movea.l 318(sp),a0
    880a:	|  |  |         move.l 4(a0),d0
    880e:	|  |  |         move.l d0,d0
    8810:	|  |  |         movea.w d0,a1
    8812:	|  |  |         movea.l 318(sp),a0
    8816:	|  |  |         move.l (a0),d0
    8818:	|  |  |         move.l d0,d0
    881a:	|  |  |         movea.w d0,a0
    881c:	|  |  |         movea.l 318(sp),a2
    8820:	|  |  |         move.l 20(a2),d0
    8824:	|  |  |         clr.l -(sp)
    8826:	|  |  |         pea 1 <_start+0x1>
    882a:	|  |  |         move.l a1,-(sp)
    882c:	|  |  |         move.l a0,-(sp)
    882e:	|  |  |         pea 18ef6 <PutChar+0x1348>
    8834:	|  |  |         move.l d0,-(sp)
    8836:	|  |  |         jsr 171f4 <debug_register_bitmap>
    883c:	|  |  |         lea 24(sp),sp
	while(numelements--)
    8840:	|  |  '-------> move.w 322(sp),d0
    8844:	|  |            move.w d0,d1
    8846:	|  |            subq.w #1,d1
    8848:	|  |            move.w d1,322(sp)
    884c:	|  |            tst.w d0
    884e:	|  '----------- bne.w 86a4 <setZBuffer+0x132>
		#endif  
		
	}


	finishAccess ();
    8852:	|               jsr 7508 <finishAccess>
	
	return TRUE;
    8858:	|               moveq #1,d0
}
    885a:	'-------------> movem.l (sp)+,d2-d4/a2/a6
    885e:	                lea 304(sp),sp
    8862:	                rts

00008864 <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    8864:	          lea -32(sp),sp
    8868:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    886a:	          move.l 40(sp),d0
    886e:	          addq.l #8,d0
    8870:	          move.l d0,24(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8874:	          clr.l 32(sp)
    8878:	   ,----- bra.s 88be <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    887a:	,--|----> movea.l 24(sp),a0
    887e:	|  |      movea.l 8(a0),a0
    8882:	|  |      move.l 32(sp),d1
    8886:	|  |      move.l d1,d0
    8888:	|  |      lsl.l #3,d0
    888a:	|  |      sub.l d1,d0
    888c:	|  |      add.l d0,d0
    888e:	|  |      add.l d0,d0
    8890:	|  |      adda.l d0,a0
    8892:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    8896:	|  |      movea.l 8(sp),a0
    889a:	|  |      move.l 24(a0),d0
    889e:	|  |  ,-- beq.s 88ba <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    88a0:	|  |  |   movea.l 8(sp),a0
    88a4:	|  |  |   move.l 24(a0),4(sp)
    88aa:	|  |  |   move.l 1c810 <SysBase>,d0
    88b0:	|  |  |   movea.l d0,a6
    88b2:	|  |  |   movea.l 4(sp),a1
    88b6:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    88ba:	|  |  '-> addq.l #1,32(sp)
    88be:	|  '----> movea.l 24(sp),a0
    88c2:	|         move.l (a0),d0
    88c4:	|         cmp.l 32(sp),d0
    88c8:	'-------- bgt.s 887a <forgetSpriteBank+0x16>
		}		
	}

	FreeVec(spritebanktoforget->sprites);	
    88ca:	          movea.l 24(sp),a0
    88ce:	          move.l 8(a0),20(sp)
    88d4:	          move.l 1c810 <SysBase>,d0
    88da:	          movea.l d0,a6
    88dc:	          movea.l 20(sp),a1
    88e0:	          jsr -690(a6)
	
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    88e4:	          move.l 1c924 <allLoadedBanks>,28(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    88ec:	      ,-- bra.s 88f8 <forgetSpriteBank+0x94>
	{
		precedingbank = precedingbank->next;
    88ee:	   ,--|-> movea.l 28(sp),a0
    88f2:	   |  |   move.l 22(a0),28(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    88f8:	   |  '-> movea.l 28(sp),a0
    88fc:	   |      movea.l 22(a0),a0
    8900:	   |      move.l (a0),d1
    8902:	   |      movea.l 40(sp),a0
    8906:	   |      move.l (a0),d0
    8908:	   |      cmp.l d1,d0
    890a:	   |  ,-- beq.s 8912 <forgetSpriteBank+0xae>
    890c:	   |  |   tst.l 28(sp)
    8910:	   '--|-- bne.s 88ee <forgetSpriteBank+0x8a>
	}	

	if(precedingbank)
    8912:	      '-> tst.l 28(sp)
    8916:	   ,----- beq.s 8940 <forgetSpriteBank+0xdc>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    8918:	   |      movea.l 40(sp),a0
    891c:	   |      move.l 22(a0),d0
    8920:	   |      movea.l 28(sp),a0
    8924:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    8928:	   |      move.l 40(sp),12(sp)
    892e:	   |      move.l 1c810 <SysBase>,d0
    8934:	   |      movea.l d0,a6
    8936:	   |      movea.l 12(sp),a1
    893a:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    893e:	   |  ,-- bra.s 8966 <forgetSpriteBank+0x102>
		allLoadedBanks = allLoadedBanks->next;
    8940:	   '--|-> movea.l 1c924 <allLoadedBanks>,a0
    8946:	      |   move.l 22(a0),d0
    894a:	      |   move.l d0,1c924 <allLoadedBanks>
		FreeVec( forgetme);
    8950:	      |   move.l 40(sp),16(sp)
    8956:	      |   move.l 1c810 <SysBase>,d0
    895c:	      |   movea.l d0,a6
    895e:	      |   movea.l 16(sp),a1
    8962:	      |   jsr -690(a6)
}
    8966:	      '-> nop
    8968:	          movea.l (sp)+,a6
    896a:	          lea 32(sp),sp
    896e:	          rts

00008970 <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere) {
    8970:	                      lea -84(sp),sp
    8974:	                      movem.l d2-d4/a2/a6,-(sp)

	KPrintF("loadSpriteBank: Starting\n");
    8978:	                      pea 18f02 <PutChar+0x1354>
    897e:	                      jsr 1710c <KPrintF>
    8984:	                      addq.l #4,sp

	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    8986:	                      clr.l 94(sp)
    898a:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    898e:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    8992:	                      move.l 108(sp),-(sp)
    8996:	                      jsr 7610 <openFileFromNum>
    899c:	                      addq.l #4,sp
    899e:	                      tst.l d0
    89a0:	                  ,-- bne.s 89b6 <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    89a2:	                  |   pea 18f1c <PutChar+0x136e>
    89a8:	                  |   jsr 1710c <KPrintF>
    89ae:	                  |   addq.l #4,sp
		return FALSE;
    89b0:	                  |   clr.w d0
    89b2:	,-----------------|-- bra.w 8daa <loadSpriteBank+0x43a>
	}

	get2bytes(bigDataFile); // Ignore first 2 bytes
    89b6:	|                 '-> move.l 1c7f8 <bigDataFile>,d0
    89bc:	|                     move.l d0,-(sp)
    89be:	|                     jsr 6bc <get2bytes>
    89c4:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    89c6:	|                     move.l 1c7f8 <bigDataFile>,82(sp)
    89ce:	|                     move.l 1c818 <DOSBase>,d0
    89d4:	|                     movea.l d0,a6
    89d6:	|                     move.l 82(sp),d1
    89da:	|                     jsr -306(a6)
    89de:	|                     move.l d0,78(sp)
    89e2:	|                     move.l 78(sp),d0
    89e6:	|                     movea.l 112(sp),a0
    89ea:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    89ee:	|                     move.l 1c7f8 <bigDataFile>,d0
    89f4:	|                     move.l d0,-(sp)
    89f6:	|                     jsr 6bc <get2bytes>
    89fc:	|                     addq.l #4,sp
    89fe:	|                     move.l d0,74(sp)

	if (total <= 0) {
    8a02:	|                 ,-- bgt.s 8a18 <loadSpriteBank+0xa8>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    8a04:	|                 |   pea 18f4a <PutChar+0x139c>
    8a0a:	|                 |   jsr 1710c <KPrintF>
    8a10:	|                 |   addq.l #4,sp
		return FALSE;
    8a12:	|                 |   clr.w d0
    8a14:	+-----------------|-- bra.w 8daa <loadSpriteBank+0x43a>
	}
	if (loadhere->type == 3)
    8a18:	|                 '-> movea.l 112(sp),a0
    8a1c:	|                     move.l 4(a0),d0
    8a20:	|                     moveq #3,d1
    8a22:	|                     cmp.l d0,d1
    8a24:	|                 ,-- bne.s 8a32 <loadSpriteBank+0xc2>
	{
		loadhere->isFont = TRUE;
    8a26:	|                 |   movea.l 112(sp),a0
    8a2a:	|                 |   move.w #1,12(a0)
    8a30:	|              ,--|-- bra.s 8a54 <loadSpriteBank+0xe4>
	}
	else if (loadhere->type > 3) {
    8a32:	|              |  '-> movea.l 112(sp),a0
    8a36:	|              |      move.l 4(a0),d0
    8a3a:	|              |      moveq #3,d1
    8a3c:	|              |      cmp.l d0,d1
    8a3e:	|              +----- bge.s 8a54 <loadSpriteBank+0xe4>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    8a40:	|              |      pea 18f8a <PutChar+0x13dc>
    8a46:	|              |      jsr 1710c <KPrintF>
    8a4c:	|              |      addq.l #4,sp
		return FALSE;
    8a4e:	|              |      clr.w d0
    8a50:	+--------------|----- bra.w 8daa <loadSpriteBank+0x43a>
	}

	loadhere->total = total;
    8a54:	|              '----> movea.l 112(sp),a0
    8a58:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    8a5c:	|                     move.l 74(sp),d1
    8a60:	|                     move.l d1,d0
    8a62:	|                     lsl.l #3,d0
    8a64:	|                     sub.l d1,d0
    8a66:	|                     add.l d0,d0
    8a68:	|                     add.l d0,d0
    8a6a:	|                     move.l d0,70(sp)
    8a6e:	|                     clr.l 66(sp)
    8a72:	|                     move.l 1c810 <SysBase>,d0
    8a78:	|                     movea.l d0,a6
    8a7a:	|                     move.l 70(sp),d0
    8a7e:	|                     move.l 66(sp),d1
    8a82:	|                     jsr -684(a6)
    8a86:	|                     move.l d0,62(sp)
    8a8a:	|                     move.l 62(sp),d0
    8a8e:	|                     movea.l 112(sp),a0
    8a92:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    8a96:	|                     movea.l 112(sp),a0
    8a9a:	|                     move.l 8(a0),d0
    8a9e:	|                 ,-- bne.s 8aa6 <loadSpriteBank+0x136>
    8aa0:	|                 |   clr.w d0
    8aa2:	+-----------------|-- bra.w 8daa <loadSpriteBank+0x43a>
	
	startIndex = 1;
    8aa6:	|                 '-> moveq #1,d0
    8aa8:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    8aac:	|                     clr.l 100(sp)
    8ab0:	|     ,-------------- bra.w 8d88 <loadSpriteBank+0x418>

		UWORD width = get2bytes(bigDataFile);
    8ab4:	|  ,--|-------------> move.l 1c7f8 <bigDataFile>,d0
    8aba:	|  |  |               move.l d0,-(sp)
    8abc:	|  |  |               jsr 6bc <get2bytes>
    8ac2:	|  |  |               addq.l #4,sp
    8ac4:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    8ac8:	|  |  |               movea.l 112(sp),a0
    8acc:	|  |  |               movea.l 8(a0),a0
    8ad0:	|  |  |               move.l 100(sp),d1
    8ad4:	|  |  |               move.l d1,d0
    8ad6:	|  |  |               lsl.l #3,d0
    8ad8:	|  |  |               sub.l d1,d0
    8ada:	|  |  |               add.l d0,d0
    8adc:	|  |  |               add.l d0,d0
    8ade:	|  |  |               adda.l d0,a0
    8ae0:	|  |  |               moveq #0,d0
    8ae2:	|  |  |               move.w 60(sp),d0
    8ae6:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    8ae8:	|  |  |               movea.l 1c7f8 <bigDataFile>,a1
    8aee:	|  |  |               movea.l 112(sp),a0
    8af2:	|  |  |               movea.l 8(a0),a0
    8af6:	|  |  |               move.l 100(sp),d1
    8afa:	|  |  |               move.l d1,d0
    8afc:	|  |  |               lsl.l #3,d0
    8afe:	|  |  |               sub.l d1,d0
    8b00:	|  |  |               add.l d0,d0
    8b02:	|  |  |               add.l d0,d0
    8b04:	|  |  |               lea (0,a0,d0.l),a2
    8b08:	|  |  |               move.l a1,-(sp)
    8b0a:	|  |  |               jsr 6bc <get2bytes>
    8b10:	|  |  |               addq.l #4,sp
    8b12:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    8b16:	|  |  |               movea.l 1c7f8 <bigDataFile>,a1
    8b1c:	|  |  |               movea.l 112(sp),a0
    8b20:	|  |  |               movea.l 8(a0),a0
    8b24:	|  |  |               move.l 100(sp),d1
    8b28:	|  |  |               move.l d1,d0
    8b2a:	|  |  |               lsl.l #3,d0
    8b2c:	|  |  |               sub.l d1,d0
    8b2e:	|  |  |               add.l d0,d0
    8b30:	|  |  |               add.l d0,d0
    8b32:	|  |  |               lea (0,a0,d0.l),a2
    8b36:	|  |  |               move.l a1,-(sp)
    8b38:	|  |  |               jsr 6bc <get2bytes>
    8b3e:	|  |  |               addq.l #4,sp
    8b40:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    8b44:	|  |  |               movea.l 1c7f8 <bigDataFile>,a1
    8b4a:	|  |  |               movea.l 112(sp),a0
    8b4e:	|  |  |               movea.l 8(a0),a0
    8b52:	|  |  |               move.l 100(sp),d1
    8b56:	|  |  |               move.l d1,d0
    8b58:	|  |  |               lsl.l #3,d0
    8b5a:	|  |  |               sub.l d1,d0
    8b5c:	|  |  |               add.l d0,d0
    8b5e:	|  |  |               add.l d0,d0
    8b60:	|  |  |               lea (0,a0,d0.l),a2
    8b64:	|  |  |               move.l a1,-(sp)
    8b66:	|  |  |               jsr 6bc <get2bytes>
    8b6c:	|  |  |               addq.l #4,sp
    8b6e:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    8b72:	|  |  |               movea.l 112(sp),a0
    8b76:	|  |  |               move.l 4(a0),d0
    8b7a:	|  |  |               moveq #3,d1
    8b7c:	|  |  |               cmp.l d0,d1
    8b7e:	|  |  |     ,-------- beq.w 8c1a <loadSpriteBank+0x2aa>
    8b82:	|  |  |     |         moveq #3,d1
    8b84:	|  |  |     |         cmp.l d0,d1
    8b86:	|  |  |  ,--|-------- blt.w 8cc0 <loadSpriteBank+0x350>
    8b8a:	|  |  |  |  |         moveq #1,d1
    8b8c:	|  |  |  |  |         cmp.l d0,d1
    8b8e:	|  |  |  |  |     ,-- beq.s 8b9a <loadSpriteBank+0x22a>
    8b90:	|  |  |  |  |     |   moveq #2,d1
    8b92:	|  |  |  |  |     |   cmp.l d0,d1
    8b94:	|  |  |  |  |  ,--|-- beq.s 8bc6 <loadSpriteBank+0x256>
    8b96:	|  |  |  +--|--|--|-- bra.w 8cc0 <loadSpriteBank+0x350>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    8b9a:	|  |  |  |  |  |  '-> movea.l 112(sp),a0
    8b9e:	|  |  |  |  |  |      movea.l 8(a0),a0
    8ba2:	|  |  |  |  |  |      move.l 100(sp),d1
    8ba6:	|  |  |  |  |  |      move.l d1,d0
    8ba8:	|  |  |  |  |  |      lsl.l #3,d0
    8baa:	|  |  |  |  |  |      sub.l d1,d0
    8bac:	|  |  |  |  |  |      add.l d0,d0
    8bae:	|  |  |  |  |  |      add.l d0,d0
    8bb0:	|  |  |  |  |  |      adda.l d0,a0
    8bb2:	|  |  |  |  |  |      move.l 4(a0),d0
    8bb6:	|  |  |  |  |  |      addq.l #2,d0
    8bb8:	|  |  |  |  |  |      move.l d0,d0
    8bba:	|  |  |  |  |  |      add.w d0,d0
    8bbc:	|  |  |  |  |  |      add.w d0,d0
    8bbe:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    8bc2:	|  |  |  +--|--|----- bra.w 8cc0 <loadSpriteBank+0x350>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    8bc6:	|  |  |  |  |  '----> movea.l 112(sp),a0
    8bca:	|  |  |  |  |         movea.l 8(a0),a0
    8bce:	|  |  |  |  |         move.l 100(sp),d1
    8bd2:	|  |  |  |  |         move.l d1,d0
    8bd4:	|  |  |  |  |         lsl.l #3,d0
    8bd6:	|  |  |  |  |         sub.l d1,d0
    8bd8:	|  |  |  |  |         add.l d0,d0
    8bda:	|  |  |  |  |         add.l d0,d0
    8bdc:	|  |  |  |  |         adda.l d0,a0
    8bde:	|  |  |  |  |         move.l (a0),d0
    8be0:	|  |  |  |  |     ,-- bpl.s 8be4 <loadSpriteBank+0x274>
    8be2:	|  |  |  |  |     |   addq.l #7,d0
    8be4:	|  |  |  |  |     '-> asr.l #3,d0
    8be6:	|  |  |  |  |         move.l d0,d2
    8be8:	|  |  |  |  |         movea.l 112(sp),a0
    8bec:	|  |  |  |  |         movea.l 8(a0),a0
    8bf0:	|  |  |  |  |         move.l 100(sp),d1
    8bf4:	|  |  |  |  |         move.l d1,d0
    8bf6:	|  |  |  |  |         lsl.l #3,d0
    8bf8:	|  |  |  |  |         sub.l d1,d0
    8bfa:	|  |  |  |  |         add.l d0,d0
    8bfc:	|  |  |  |  |         add.l d0,d0
    8bfe:	|  |  |  |  |         adda.l d0,a0
    8c00:	|  |  |  |  |         move.l 4(a0),d0
    8c04:	|  |  |  |  |         move.l d0,d0
    8c06:	|  |  |  |  |         move.w d2,d1
    8c08:	|  |  |  |  |         muls.w d0,d1
    8c0a:	|  |  |  |  |         move.w d1,d0
    8c0c:	|  |  |  |  |         add.w d0,d0
    8c0e:	|  |  |  |  |         add.w d1,d0
    8c10:	|  |  |  |  |         add.w d0,d0
    8c12:	|  |  |  |  |         move.w d0,98(sp)
				break;
    8c16:	|  |  |  +--|-------- bra.w 8cc0 <loadSpriteBank+0x350>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    8c1a:	|  |  |  |  '-------> movea.l 112(sp),a0
    8c1e:	|  |  |  |            movea.l 8(a0),a0
    8c22:	|  |  |  |            move.l 100(sp),d1
    8c26:	|  |  |  |            move.l d1,d0
    8c28:	|  |  |  |            lsl.l #3,d0
    8c2a:	|  |  |  |            sub.l d1,d0
    8c2c:	|  |  |  |            add.l d0,d0
    8c2e:	|  |  |  |            add.l d0,d0
    8c30:	|  |  |  |            adda.l d0,a0
    8c32:	|  |  |  |            move.l (a0),d0
    8c34:	|  |  |  |            andi.l #-2147483633,d0
    8c3a:	|  |  |  |        ,-- bpl.s 8c44 <loadSpriteBank+0x2d4>
    8c3c:	|  |  |  |        |   subq.l #1,d0
    8c3e:	|  |  |  |        |   moveq #-16,d1
    8c40:	|  |  |  |        |   or.l d1,d0
    8c42:	|  |  |  |        |   addq.l #1,d0
    8c44:	|  |  |  |        '-> tst.l d0
    8c46:	|  |  |  |     ,----- ble.s 8c4c <loadSpriteBank+0x2dc>
    8c48:	|  |  |  |     |      moveq #2,d0
    8c4a:	|  |  |  |     |  ,-- bra.s 8c4e <loadSpriteBank+0x2de>
    8c4c:	|  |  |  |     '--|-> clr.w d0
    8c4e:	|  |  |  |        '-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    8c52:	|  |  |  |            movea.l 112(sp),a0
    8c56:	|  |  |  |            movea.l 8(a0),a0
    8c5a:	|  |  |  |            move.l 100(sp),d1
    8c5e:	|  |  |  |            move.l d1,d0
    8c60:	|  |  |  |            lsl.l #3,d0
    8c62:	|  |  |  |            sub.l d1,d0
    8c64:	|  |  |  |            add.l d0,d0
    8c66:	|  |  |  |            add.l d0,d0
    8c68:	|  |  |  |            adda.l d0,a0
    8c6a:	|  |  |  |            move.l (a0),d0
    8c6c:	|  |  |  |            movea.l d0,a0
    8c6e:	|  |  |  |            cmpa.w #0,a0
    8c72:	|  |  |  |        ,-- bge.s 8c78 <loadSpriteBank+0x308>
    8c74:	|  |  |  |        |   lea 15(a0),a0
    8c78:	|  |  |  |        '-> move.l a0,d0
    8c7a:	|  |  |  |            asr.l #4,d0
    8c7c:	|  |  |  |            add.l d0,d0
    8c7e:	|  |  |  |            move.l d0,d1
    8c80:	|  |  |  |            moveq #0,d0
    8c82:	|  |  |  |            move.w 58(sp),d0
    8c86:	|  |  |  |            add.l d1,d0
    8c88:	|  |  |  |            move.l d0,d2
    8c8a:	|  |  |  |            movea.l 112(sp),a0
    8c8e:	|  |  |  |            movea.l 8(a0),a0
    8c92:	|  |  |  |            move.l 100(sp),d1
    8c96:	|  |  |  |            move.l d1,d0
    8c98:	|  |  |  |            lsl.l #3,d0
    8c9a:	|  |  |  |            sub.l d1,d0
    8c9c:	|  |  |  |            add.l d0,d0
    8c9e:	|  |  |  |            add.l d0,d0
    8ca0:	|  |  |  |            adda.l d0,a0
    8ca2:	|  |  |  |            move.l 4(a0),d0
    8ca6:	|  |  |  |            move.l d0,d0
    8ca8:	|  |  |  |            move.w d2,d1
    8caa:	|  |  |  |            muls.w d0,d1
    8cac:	|  |  |  |            move.w d1,98(sp)
				if(size > 100)
    8cb0:	|  |  |  |            cmpi.w #100,98(sp)
    8cb6:	|  |  |  |        ,-- bls.s 8cbe <loadSpriteBank+0x34e>
				{
					UWORD br1 = 1;
    8cb8:	|  |  |  |        |   move.w #1,56(sp)
				}
				break;
    8cbe:	|  |  |  |        '-> nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    8cc0:	|  |  |  '----------> moveq #0,d0
    8cc2:	|  |  |               move.w 98(sp),d0
    8cc6:	|  |  |               add.l d0,d0
    8cc8:	|  |  |               move.l d0,52(sp)
    8ccc:	|  |  |               moveq #2,d0
    8cce:	|  |  |               move.l d0,48(sp)
    8cd2:	|  |  |               move.l 1c810 <SysBase>,d0
    8cd8:	|  |  |               movea.l d0,a6
    8cda:	|  |  |               move.l 52(sp),d0
    8cde:	|  |  |               move.l 48(sp),d1
    8ce2:	|  |  |               jsr -684(a6)
    8ce6:	|  |  |               move.l d0,44(sp)
    8cea:	|  |  |               movea.l 44(sp),a1
    8cee:	|  |  |               movea.l 112(sp),a0
    8cf2:	|  |  |               movea.l 8(a0),a0
    8cf6:	|  |  |               move.l 100(sp),d1
    8cfa:	|  |  |               move.l d1,d0
    8cfc:	|  |  |               lsl.l #3,d0
    8cfe:	|  |  |               sub.l d1,d0
    8d00:	|  |  |               add.l d0,d0
    8d02:	|  |  |               add.l d0,d0
    8d04:	|  |  |               adda.l d0,a0
    8d06:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    8d0a:	|  |  |               move.l 1c7f8 <bigDataFile>,40(sp)
    8d12:	|  |  |               movea.l 112(sp),a0
    8d16:	|  |  |               movea.l 8(a0),a0
    8d1a:	|  |  |               move.l 100(sp),d1
    8d1e:	|  |  |               move.l d1,d0
    8d20:	|  |  |               lsl.l #3,d0
    8d22:	|  |  |               sub.l d1,d0
    8d24:	|  |  |               add.l d0,d0
    8d26:	|  |  |               add.l d0,d0
    8d28:	|  |  |               adda.l d0,a0
    8d2a:	|  |  |               move.l 24(a0),36(sp)
    8d30:	|  |  |               moveq #2,d1
    8d32:	|  |  |               move.l d1,32(sp)
    8d36:	|  |  |               move.w 98(sp),d0
    8d3a:	|  |  |               lsr.w #1,d0
    8d3c:	|  |  |               move.w d0,d0
    8d3e:	|  |  |               andi.l #65535,d0
    8d44:	|  |  |               move.l d0,28(sp)
    8d48:	|  |  |               move.l 1c818 <DOSBase>,d0
    8d4e:	|  |  |               movea.l d0,a6
    8d50:	|  |  |               move.l 40(sp),d1
    8d54:	|  |  |               move.l 36(sp),d2
    8d58:	|  |  |               move.l 32(sp),d3
    8d5c:	|  |  |               move.l 28(sp),d4
    8d60:	|  |  |               jsr -324(a6)
    8d64:	|  |  |               move.l d0,24(sp)
    8d68:	|  |  |               move.l 24(sp),d0
    8d6c:	|  |  |               move.w d0,22(sp)
		if (!count) {
    8d70:	|  |  |           ,-- bne.s 8d84 <loadSpriteBank+0x414>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    8d72:	|  |  |           |   pea 18fbf <PutChar+0x1411>
    8d78:	|  |  |           |   jsr 1710c <KPrintF>
    8d7e:	|  |  |           |   addq.l #4,sp
			return FALSE;
    8d80:	|  |  |           |   clr.w d0
    8d82:	+--|--|-----------|-- bra.s 8daa <loadSpriteBank+0x43a>
	for (i = 0; i < total; i++) {
    8d84:	|  |  |           '-> addq.l #1,100(sp)
    8d88:	|  |  '-------------> move.l 100(sp),d0
    8d8c:	|  |                  cmp.l 74(sp),d0
    8d90:	|  '----------------- blt.w 8ab4 <loadSpriteBank+0x144>
		}
	}

	finishAccess ();
    8d94:	|                     jsr 7508 <finishAccess>

	KPrintF("loadSpriteBank: Complete\n");
    8d9a:	|                     pea 18ff2 <PutChar+0x1444>
    8da0:	|                     jsr 1710c <KPrintF>
    8da6:	|                     addq.l #4,sp
	return TRUE;
    8da8:	|                     moveq #1,d0
}
    8daa:	'-------------------> movem.l (sp)+,d2-d4/a2/a6
    8dae:	                      lea 84(sp),sp
    8db2:	                      rts

00008db4 <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    8db4:	                   lea -16(sp),sp
    8db8:	                   move.l d2,-(sp)
    8dba:	                   move.l 32(sp),d0
    8dbe:	                   move.w d0,d0
    8dc0:	                   move.w d0,6(sp)
	WORD x =  thisPerson->x - single->xhot;
    8dc4:	                   movea.l 28(sp),a0
    8dc8:	                   move.l (a0),d2
    8dca:	                   movea.l 24(sp),a0
    8dce:	                   move.l 8(a0),d0
    8dd2:	                   move.l d0,-(sp)
    8dd4:	                   jsr 1753e <__floatsisf>
    8dda:	                   addq.l #4,sp
    8ddc:	                   move.l d0,-(sp)
    8dde:	                   move.l d2,-(sp)
    8de0:	                   jsr 17832 <__subsf3>
    8de6:	                   addq.l #8,sp
    8de8:	                   move.l d0,-(sp)
    8dea:	                   jsr 174d6 <__fixsfsi>
    8df0:	                   addq.l #4,sp
    8df2:	                   move.w d0,18(sp)
	WORD y =  thisPerson->y - single->yhot;			
    8df6:	                   movea.l 28(sp),a0
    8dfa:	                   move.l 4(a0),d2
    8dfe:	                   movea.l 24(sp),a0
    8e02:	                   move.l 12(a0),d0
    8e06:	                   move.l d0,-(sp)
    8e08:	                   jsr 1753e <__floatsisf>
    8e0e:	                   addq.l #4,sp
    8e10:	                   move.l d0,-(sp)
    8e12:	                   move.l d2,-(sp)
    8e14:	                   jsr 17832 <__subsf3>
    8e1a:	                   addq.l #8,sp
    8e1c:	                   move.l d0,-(sp)
    8e1e:	                   jsr 174d6 <__fixsfsi>
    8e24:	                   addq.l #4,sp
    8e26:	                   move.w d0,8(sp)

	if( x < 0)
    8e2a:	                   tst.w 18(sp)
    8e2e:	               ,-- bge.s 8e62 <scaleSprite+0xae>
	{
		x = thisPerson->x - single->xhot;
    8e30:	               |   movea.l 28(sp),a0
    8e34:	               |   move.l (a0),d2
    8e36:	               |   movea.l 24(sp),a0
    8e3a:	               |   move.l 8(a0),d0
    8e3e:	               |   move.l d0,-(sp)
    8e40:	               |   jsr 1753e <__floatsisf>
    8e46:	               |   addq.l #4,sp
    8e48:	               |   move.l d0,-(sp)
    8e4a:	               |   move.l d2,-(sp)
    8e4c:	               |   jsr 17832 <__subsf3>
    8e52:	               |   addq.l #8,sp
    8e54:	               |   move.l d0,-(sp)
    8e56:	               |   jsr 174d6 <__fixsfsi>
    8e5c:	               |   addq.l #4,sp
    8e5e:	               |   move.w d0,18(sp)
	}

	CstScaleSprite( single, thisPerson, x, y,SCREEN);
    8e62:	               '-> movea.w 8(sp),a1
    8e66:	                   movea.w 18(sp),a0
    8e6a:	                   pea 1 <_start+0x1>
    8e6e:	                   move.l a1,-(sp)
    8e70:	                   move.l a0,-(sp)
    8e72:	                   move.l 40(sp),-(sp)
    8e76:	                   move.l 40(sp),-(sp)
    8e7a:	                   jsr 2c12 <CstScaleSprite>
    8e80:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    8e84:	                   movea.l 28(sp),a0
    8e88:	                   move.l 118(a0),d0
    8e8c:	                   moveq #8,d1
    8e8e:	                   and.l d1,d0
    8e90:	   ,-------------- beq.w 8f5c <scaleSprite+0x1a8>
		if (single->xhot < 0)
    8e94:	   |               movea.l 24(sp),a0
    8e98:	   |               move.l 8(a0),d0
    8e9c:	   |  ,----------- bpl.s 8ed8 <scaleSprite+0x124>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    8e9e:	   |  |            move.w 18(sp),d0
    8ea2:	   |  |            tst.w 6(sp)
    8ea6:	   |  |     ,----- beq.s 8ec0 <scaleSprite+0x10c>
    8ea8:	   |  |     |      movea.l 24(sp),a0
    8eac:	   |  |     |      move.l (a0),d1
    8eae:	   |  |     |      move.l d1,d2
    8eb0:	   |  |     |      movea.l 24(sp),a0
    8eb4:	   |  |     |      move.l 8(a0),d1
    8eb8:	   |  |     |      move.l d1,d1
    8eba:	   |  |     |      movea.w d2,a0
    8ebc:	   |  |     |      suba.w d1,a0
    8ebe:	   |  |     |  ,-- bra.s 8ece <scaleSprite+0x11a>
    8ec0:	   |  |     '--|-> movea.l 24(sp),a0
    8ec4:	   |  |        |   move.l 8(a0),d1
    8ec8:	   |  |        |   move.l d1,d1
    8eca:	   |  |        |   movea.w d1,a0
    8ecc:	   |  |        |   addq.w #1,a0
    8ece:	   |  |        '-> move.w d0,d1
    8ed0:	   |  |            sub.w a0,d1
    8ed2:	   |  |            move.w d1,16(sp)
    8ed6:	   |  |  ,-------- bra.s 8f10 <scaleSprite+0x15c>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    8ed8:	   |  '--|-------> move.w 18(sp),d1
    8edc:	   |     |         tst.w 6(sp)
    8ee0:	   |     |  ,----- beq.s 8efe <scaleSprite+0x14a>
    8ee2:	   |     |  |      movea.l 24(sp),a0
    8ee6:	   |     |  |      move.l (a0),d0
    8ee8:	   |     |  |      move.l d0,d2
    8eea:	   |     |  |      movea.l 24(sp),a0
    8eee:	   |     |  |      move.l 8(a0),d0
    8ef2:	   |     |  |      move.l d0,d0
    8ef4:	   |     |  |      movea.w d2,a0
    8ef6:	   |     |  |      suba.w d0,a0
    8ef8:	   |     |  |      move.w a0,d0
    8efa:	   |     |  |      subq.w #1,d0
    8efc:	   |     |  |  ,-- bra.s 8f08 <scaleSprite+0x154>
    8efe:	   |     |  '--|-> movea.l 24(sp),a0
    8f02:	   |     |     |   move.l 8(a0),d0
    8f06:	   |     |     |   move.l d0,d0
    8f08:	   |     |     '-> movea.w d1,a0
    8f0a:	   |     |         suba.w d0,a0
    8f0c:	   |     |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    8f10:	   |     '-------> movea.l 28(sp),a0
    8f14:	   |               move.l 24(a0),d0
    8f18:	   |               move.l d0,d1
    8f1a:	   |               movea.l 24(sp),a0
    8f1e:	   |               move.l 12(a0),d0
    8f22:	   |               move.l d0,d0
    8f24:	   |               sub.w d0,d1
    8f26:	   |               move.w 8(sp),d0
    8f2a:	   |               movea.w d1,a0
    8f2c:	   |               adda.w d0,a0
    8f2e:	   |               move.w a0,14(sp)
		x2 = x1 + single->width;
    8f32:	   |               movea.l 24(sp),a0
    8f36:	   |               move.l (a0),d0
    8f38:	   |               move.l d0,d0
    8f3a:	   |               move.w 16(sp),d1
    8f3e:	   |               add.w d0,d1
    8f40:	   |               move.w d1,12(sp)
		y2 = y1 + single->height;
    8f44:	   |               movea.l 24(sp),a0
    8f48:	   |               move.l 4(a0),d0
    8f4c:	   |               move.l d0,d0
    8f4e:	   |               movea.w 14(sp),a0
    8f52:	   |               adda.w d0,a0
    8f54:	   |               move.w a0,10(sp)
    8f58:	,--|-------------- bra.w 9044 <scaleSprite+0x290>
	} else {
		x -= cameraX;
    8f5c:	|  '-------------> move.w 18(sp),d1
    8f60:	|                  move.l 1c8c6 <cameraX>,d0
    8f66:	|                  move.l d0,d0
    8f68:	|                  sub.w d0,d1
    8f6a:	|                  move.w d1,18(sp)
		y -= cameraY;
    8f6e:	|                  move.w 8(sp),d1
    8f72:	|                  move.l 1c8ca <cameraY>,d0
    8f78:	|                  move.l d0,d0
    8f7a:	|                  sub.w d0,d1
    8f7c:	|                  move.w d1,8(sp)
		if (single->xhot < 0)
    8f80:	|                  movea.l 24(sp),a0
    8f84:	|                  move.l 8(a0),d0
    8f88:	|     ,----------- bpl.s 8fc4 <scaleSprite+0x210>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    8f8a:	|     |            move.w 18(sp),d0
    8f8e:	|     |            tst.w 6(sp)
    8f92:	|     |     ,----- beq.s 8fac <scaleSprite+0x1f8>
    8f94:	|     |     |      movea.l 24(sp),a0
    8f98:	|     |     |      move.l (a0),d1
    8f9a:	|     |     |      move.l d1,d2
    8f9c:	|     |     |      movea.l 24(sp),a0
    8fa0:	|     |     |      move.l 8(a0),d1
    8fa4:	|     |     |      move.l d1,d1
    8fa6:	|     |     |      movea.w d2,a0
    8fa8:	|     |     |      suba.w d1,a0
    8faa:	|     |     |  ,-- bra.s 8fba <scaleSprite+0x206>
    8fac:	|     |     '--|-> movea.l 24(sp),a0
    8fb0:	|     |        |   move.l 8(a0),d1
    8fb4:	|     |        |   move.l d1,d1
    8fb6:	|     |        |   movea.w d1,a0
    8fb8:	|     |        |   addq.w #1,a0
    8fba:	|     |        '-> move.w d0,d1
    8fbc:	|     |            sub.w a0,d1
    8fbe:	|     |            move.w d1,16(sp)
    8fc2:	|     |  ,-------- bra.s 8ffc <scaleSprite+0x248>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    8fc4:	|     '--|-------> move.w 18(sp),d1
    8fc8:	|        |         tst.w 6(sp)
    8fcc:	|        |  ,----- beq.s 8fea <scaleSprite+0x236>
    8fce:	|        |  |      movea.l 24(sp),a0
    8fd2:	|        |  |      move.l (a0),d0
    8fd4:	|        |  |      move.l d0,d2
    8fd6:	|        |  |      movea.l 24(sp),a0
    8fda:	|        |  |      move.l 8(a0),d0
    8fde:	|        |  |      move.l d0,d0
    8fe0:	|        |  |      movea.w d2,a0
    8fe2:	|        |  |      suba.w d0,a0
    8fe4:	|        |  |      move.w a0,d0
    8fe6:	|        |  |      subq.w #1,d0
    8fe8:	|        |  |  ,-- bra.s 8ff4 <scaleSprite+0x240>
    8fea:	|        |  '--|-> movea.l 24(sp),a0
    8fee:	|        |     |   move.l 8(a0),d0
    8ff2:	|        |     |   move.l d0,d0
    8ff4:	|        |     '-> movea.w d1,a0
    8ff6:	|        |         suba.w d0,a0
    8ff8:	|        |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    8ffc:	|        '-------> movea.l 28(sp),a0
    9000:	|                  move.l 24(a0),d0
    9004:	|                  move.l d0,d1
    9006:	|                  movea.l 24(sp),a0
    900a:	|                  move.l 12(a0),d0
    900e:	|                  move.l d0,d0
    9010:	|                  sub.w d0,d1
    9012:	|                  move.w 8(sp),d0
    9016:	|                  movea.w d1,a0
    9018:	|                  adda.w d0,a0
    901a:	|                  move.w a0,14(sp)
		x2 = x1 + single->width;
    901e:	|                  movea.l 24(sp),a0
    9022:	|                  move.l (a0),d0
    9024:	|                  move.l d0,d0
    9026:	|                  move.w 16(sp),d1
    902a:	|                  add.w d0,d1
    902c:	|                  move.w d1,12(sp)
		y2 = y1 + single->height;
    9030:	|                  movea.l 24(sp),a0
    9034:	|                  move.l 4(a0),d0
    9038:	|                  move.l d0,d0
    903a:	|                  movea.w 14(sp),a0
    903e:	|                  adda.w d0,a0
    9040:	|                  move.w a0,10(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    9044:	'----------------> move.l 1c7cc <input+0xa>,d1
    904a:	                   moveq #0,d0
    904c:	                   move.w 16(sp),d0
    9050:	                   cmp.l d1,d0
    9052:	            ,----- bgt.s 9088 <scaleSprite+0x2d4>
    9054:	            |      move.l 1c7cc <input+0xa>,d1
    905a:	            |      moveq #0,d0
    905c:	            |      move.w 12(sp),d0
    9060:	            |      cmp.l d1,d0
    9062:	            +----- blt.s 9088 <scaleSprite+0x2d4>
    9064:	            |      move.l 1c7d0 <input+0xe>,d1
    906a:	            |      moveq #0,d0
    906c:	            |      move.w 14(sp),d0
    9070:	            |      cmp.l d1,d0
    9072:	            +----- bgt.s 9088 <scaleSprite+0x2d4>
    9074:	            |      move.l 1c7d0 <input+0xe>,d1
    907a:	            |      moveq #0,d0
    907c:	            |      move.w 10(sp),d0
    9080:	            |      cmp.l d1,d0
    9082:	            +----- blt.s 9088 <scaleSprite+0x2d4>
		return TRUE;
    9084:	            |      moveq #1,d0
    9086:	            |  ,-- bra.s 908a <scaleSprite+0x2d6>
	}
	return FALSE;
    9088:	            '--|-> clr.w d0
    908a:	               '-> move.l (sp)+,d2
    908c:	                   lea 16(sp),sp
    9090:	                   rts

00009092 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    9092:	    move.l 4(sp),d0
    9096:	,-- bpl.s 909a <TF_abs+0x8>
    9098:	|   neg.l d0
}
    909a:	'-> rts

0000909c <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    909c:	             lea -28(sp),sp
    90a0:	             move.l a6,-(sp)
    90a2:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    90a4:	             move.l #132,28(sp)
    90ac:	             clr.l 24(sp)
    90b0:	             move.l 1c810 <SysBase>,d0
    90b6:	             movea.l d0,a6
    90b8:	             move.l 28(sp),d0
    90bc:	             move.l 24(sp),d1
    90c0:	             jsr -684(a6)
    90c4:	             move.l d0,20(sp)
    90c8:	             move.l 20(sp),d0
    90cc:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    90d0:	         ,-- bne.s 90d8 <addPerson+0x3c>
    90d2:	         |   clr.w d0
    90d4:	,--------|-- bra.w 9308 <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    90d8:	|        '-> move.l 48(sp),-(sp)
    90dc:	|            jsr d49e <loadObjectType>
    90e2:	|            addq.l #4,sp
    90e4:	|            movea.l 16(sp),a0
    90e8:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    90ec:	|            movea.l 16(sp),a0
    90f0:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    90f8:	|            movea.l 16(sp),a0
    90fc:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    9100:	|            movea.l 16(sp),a0
    9104:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    9108:	|            move.l 44(sp),-(sp)
    910c:	|            jsr 1753e <__floatsisf>
    9112:	|            addq.l #4,sp
    9114:	|            move.l d0,d2
    9116:	|            move.l 40(sp),-(sp)
    911a:	|            jsr 1753e <__floatsisf>
    9120:	|            addq.l #4,sp
    9122:	|            move.l d2,-(sp)
    9124:	|            move.l d0,-(sp)
    9126:	|            move.l 24(sp),-(sp)
    912a:	|            jsr abea <moveAndScale>
    9130:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    9134:	|            movea.l 16(sp),a0
    9138:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    913c:	|            movea.l 16(sp),a0
    9140:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    9146:	|            movea.l 16(sp),a0
    914a:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    9150:	|            movea.l 16(sp),a0
    9154:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    9158:	|            movea.l 16(sp),a0
    915c:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    9160:	|            movea.l 16(sp),a0
    9164:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    916a:	|            movea.l 16(sp),a0
    916e:	|            clr.l 106(a0)
    newPerson->angle = 180;
    9172:	|            movea.l 16(sp),a0
    9176:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    917e:	|            movea.l 16(sp),a0
    9182:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    918a:	|            movea.l 16(sp),a0
    918e:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    9192:	|            movea.l 16(sp),a0
    9196:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    919a:	|            movea.l 16(sp),a0
    919e:	|            movea.l 114(a0),a0
    91a2:	|            move.l 24(a0),d0
    91a6:	|            movea.l 16(sp),a0
    91aa:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    91ae:	|            movea.l 16(sp),a0
    91b2:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    91b6:	|            movea.l 16(sp),a0
    91ba:	|            movea.l 114(a0),a0
    91be:	|            move.l 32(a0),d0
    91c2:	|            movea.l 16(sp),a0
    91c6:	|            move.l d0,122(a0)
    newPerson->r = 0;
    91ca:	|            movea.l 16(sp),a0
    91ce:	|            clr.b 126(a0)
    newPerson->g = 0;
    91d2:	|            movea.l 16(sp),a0
    91d6:	|            clr.b 127(a0)
    newPerson->b = 0;
    91da:	|            movea.l 16(sp),a0
    91de:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    91e2:	|            movea.l 16(sp),a0
    91e6:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    91ea:	|            movea.l 16(sp),a0
    91ee:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    91f2:	|            movea.l 16(sp),a0
    91f6:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    91fc:	|            clr.l -(sp)
    91fe:	|            move.l 20(sp),-(sp)
    9202:	|            jsr 414e <setFrames>
    9208:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    920a:	|            movea.l 52(sp),a0
    920e:	|            movea.l (a0),a0
    9210:	|            movea.l (a0),a0
    9212:	|            movea.l 4(a0),a0
    9216:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    921a:	|     ,----- bpl.s 9224 <addPerson+0x188>
    921c:	|     |      move.l 12(sp),d0
    9220:	|     |      neg.l d0
    9222:	|     |  ,-- bra.s 9226 <addPerson+0x18a>
    9224:	|     '--|-> moveq #1,d0
    9226:	|        '-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    922a:	|            movea.l 52(sp),a0
    922e:	|            movea.l (a0),a0
    9230:	|            movea.l (a0),a0
    9232:	|            movea.l (a0),a0
    9234:	|            move.l 8(a0),d0
    9238:	|            cmp.l 8(sp),d0
    923c:	|     ,----- bgt.s 926e <addPerson+0x1d2>
        if (fNumSigned < 0) {
    923e:	|     |      tst.l 12(sp)
    9242:	|     |  ,-- bge.s 9250 <addPerson+0x1b4>
            newPerson->height = 5;
    9244:	|     |  |   movea.l 16(sp),a0
    9248:	|     |  |   moveq #5,d0
    924a:	|     |  |   move.l d0,20(a0)
    924e:	|  ,--|--|-- bra.s 929a <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    9250:	|  |  |  '-> movea.l 52(sp),a0
    9254:	|  |  |      movea.l (a0),a0
    9256:	|  |  |      movea.l (a0),a0
    9258:	|  |  |      movea.l (a0),a0
    925a:	|  |  |      movea.l 16(a0),a0
    925e:	|  |  |      move.l 12(a0),d0
    9262:	|  |  |      addq.l #5,d0
    9264:	|  |  |      movea.l 16(sp),a0
    9268:	|  |  |      move.l d0,20(a0)
    926c:	|  +--|----- bra.s 929a <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    926e:	|  |  '----> movea.l 52(sp),a0
    9272:	|  |         movea.l (a0),a0
    9274:	|  |         movea.l (a0),a0
    9276:	|  |         movea.l (a0),a0
    9278:	|  |         movea.l 16(a0),a0
    927c:	|  |         move.l 8(sp),d1
    9280:	|  |         move.l d1,d0
    9282:	|  |         lsl.l #3,d0
    9284:	|  |         sub.l d1,d0
    9286:	|  |         add.l d0,d0
    9288:	|  |         add.l d0,d0
    928a:	|  |         adda.l d0,a0
    928c:	|  |         move.l 12(a0),d0
    9290:	|  |         addq.l #5,d0
    9292:	|  |         movea.l 16(sp),a0
    9296:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    929a:	|  '-------> move.l #116848,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    92a2:	|        ,-- bra.s 92b2 <addPerson+0x216>
        changethat = &((*changethat)->next);
    92a4:	|     ,--|-> movea.l 32(sp),a0
    92a8:	|     |  |   move.l (a0),d0
    92aa:	|     |  |   moveq #36,d1
    92ac:	|     |  |   add.l d0,d1
    92ae:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    92b2:	|     |  '-> movea.l 32(sp),a0
    92b6:	|     |      move.l (a0),d0
    92b8:	|     |  ,-- beq.s 92e0 <addPerson+0x244>
    92ba:	|     |  |   movea.l 32(sp),a0
    92be:	|     |  |   movea.l (a0),a0
    92c0:	|     |  |   move.l 4(a0),d2
    92c4:	|     |  |   move.l 44(sp),-(sp)
    92c8:	|     |  |   jsr 1753e <__floatsisf>
    92ce:	|     |  |   addq.l #4,sp
    92d0:	|     |  |   move.l d0,-(sp)
    92d2:	|     |  |   move.l d2,-(sp)
    92d4:	|     |  |   jsr 17764 <__ltsf2>
    92da:	|     |  |   addq.l #8,sp
    92dc:	|     |  |   tst.l d0
    92de:	|     '--|-- blt.s 92a4 <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    92e0:	|        '-> movea.l 32(sp),a0
    92e4:	|            move.l (a0),d0
    92e6:	|            movea.l 16(sp),a0
    92ea:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    92ee:	|            movea.l 32(sp),a0
    92f2:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    92f6:	|            movea.l 16(sp),a0
    92fa:	|            move.l 114(a0),d0
    92fe:	|            sne d0
    9300:	|            neg.b d0
    9302:	|            move.b d0,d0
    9304:	|            andi.w #255,d0
}
    9308:	'----------> move.l (sp)+,d2
    930a:	             movea.l (sp)+,a6
    930c:	             lea 28(sp),sp
    9310:	             rts

00009312 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    9312:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    9314:	       move.l 8(sp),-(sp)
    9318:	       jsr a4a2 <findPerson>
    931e:	       addq.l #4,sp
    9320:	       move.l d0,(sp)
    if (moveMe) {
    9322:	,----- beq.s 9356 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    9324:	|      movea.l (sp),a0
    9326:	|      move.l 68(a0),d0
    932a:	|  ,-- beq.s 933c <animatePerson+0x2a>
    932c:	|  |   movea.l (sp),a0
    932e:	|  |   move.l 68(a0),d0
    9332:	|  |   move.l d0,-(sp)
    9334:	|  |   jsr 4fac <abortFunction>
    933a:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    933c:	|  '-> movea.l (sp),a0
    933e:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    9342:	|      movea.l (sp),a0
    9344:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    9348:	|      movea.l (sp),a0
    934a:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    934e:	|      movea.l (sp),a0
    9350:	|      move.l 12(sp),72(a0)
    }
}
    9356:	'----> nop
    9358:	       addq.l #4,sp
    935a:	       rts

0000935c <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    935c:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    935e:	       move.l 8(sp),-(sp)
    9362:	       jsr a4a2 <findPerson>
    9368:	       addq.l #4,sp
    936a:	       move.l d0,(sp)
    if (moveMe) {
    936c:	,----- beq.s 93ae <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    936e:	|      movea.l (sp),a0
    9370:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    9374:	|      movea.l (sp),a0
    9376:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    937c:	|      move.l (sp),-(sp)
    937e:	|      jsr ad78 <rethinkAngle>
    9384:	|      addq.l #4,sp
        if (moveMe->walking) {
    9386:	|      movea.l (sp),a0
    9388:	|      move.w 64(a0),d0
    938c:	|  ,-- beq.s 93a0 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    938e:	|  |   pea 1 <_start+0x1>
    9392:	|  |   move.l 4(sp),-(sp)
    9396:	|  |   jsr 414e <setFrames>
    939c:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    939e:	+--|-- bra.s 93ae <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    93a0:	|  '-> clr.l -(sp)
    93a2:	|      move.l 4(sp),-(sp)
    93a6:	|      jsr 414e <setFrames>
    93ac:	|      addq.l #8,sp
}
    93ae:	'----> nop
    93b0:	       addq.l #4,sp
    93b2:	       rts

000093b4 <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    93b4:	             lea -36(sp),sp
    93b8:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    93ba:	             movea.l 44(sp),a0
    93be:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    93c4:	             moveq #12,d0
    93c6:	             move.l d0,28(sp)
    93ca:	             clr.l 24(sp)
    93ce:	             move.l 1c810 <SysBase>,d0
    93d4:	             movea.l d0,a6
    93d6:	             move.l 28(sp),d0
    93da:	             move.l 24(sp),d1
    93de:	             jsr -684(a6)
    93e2:	             move.l d0,20(sp)
    93e6:	             move.l 20(sp),d0
    93ea:	             move.l d0,16(sp)
	if (!(newAnim)) {
    93ee:	         ,-- bne.s 9404 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    93f0:	         |   pea 1900c <PutChar+0x145e>
    93f6:	         |   jsr 1710c <KPrintF>
    93fc:	         |   addq.l #4,sp
		return NULL;
    93fe:	         |   moveq #0,d0
    9400:	,--------|-- bra.w 9556 <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    9404:	|        '-> movea.l 44(sp),a0
    9408:	|            move.l (a0),d0
    940a:	|            movea.l 16(sp),a0
    940e:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    9410:	|            movea.l 16(sp),a0
    9414:	|            movea.l (a0),a0
    9416:	|            move.l 4(a0),d0
    941a:	|            addq.l #1,d0
    941c:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    9420:	|            movea.l 16(sp),a0
    9424:	|            move.l 32(sp),8(a0)

	if (num) {
    942a:	|  ,-------- beq.w 954a <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    942e:	|  |         move.l 32(sp),d1
    9432:	|  |         move.l d1,d0
    9434:	|  |         add.l d0,d0
    9436:	|  |         add.l d1,d0
    9438:	|  |         add.l d0,d0
    943a:	|  |         add.l d0,d0
    943c:	|  |         move.l d0,12(sp)
    9440:	|  |         clr.l 8(sp)
    9444:	|  |         move.l 1c810 <SysBase>,d0
    944a:	|  |         movea.l d0,a6
    944c:	|  |         move.l 12(sp),d0
    9450:	|  |         move.l 8(sp),d1
    9454:	|  |         jsr -684(a6)
    9458:	|  |         move.l d0,4(sp)
    945c:	|  |         move.l 4(sp),d0
    9460:	|  |         movea.l 16(sp),a0
    9464:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    9468:	|  |         movea.l 16(sp),a0
    946c:	|  |         move.l 4(a0),d0
    9470:	|  |     ,-- bne.s 9486 <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    9472:	|  |     |   pea 1900c <PutChar+0x145e>
    9478:	|  |     |   jsr 1710c <KPrintF>
    947e:	|  |     |   addq.l #4,sp
			return NULL;
    9480:	|  |     |   moveq #0,d0
    9482:	+--|-----|-- bra.w 9556 <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    9486:	|  |     '-> clr.l 36(sp)
    948a:	|  |     ,-- bra.w 953c <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    948e:	|  |  ,--|-> movea.l 44(sp),a0
    9492:	|  |  |  |   movea.l 4(a0),a0
    9496:	|  |  |  |   move.l 36(sp),d1
    949a:	|  |  |  |   move.l d1,d0
    949c:	|  |  |  |   add.l d0,d0
    949e:	|  |  |  |   add.l d1,d0
    94a0:	|  |  |  |   add.l d0,d0
    94a2:	|  |  |  |   add.l d0,d0
    94a4:	|  |  |  |   lea (0,a0,d0.l),a1
    94a8:	|  |  |  |   movea.l 16(sp),a0
    94ac:	|  |  |  |   movea.l 4(a0),a0
    94b0:	|  |  |  |   move.l 36(sp),d1
    94b4:	|  |  |  |   move.l d1,d0
    94b6:	|  |  |  |   add.l d0,d0
    94b8:	|  |  |  |   add.l d1,d0
    94ba:	|  |  |  |   add.l d0,d0
    94bc:	|  |  |  |   add.l d0,d0
    94be:	|  |  |  |   adda.l d0,a0
    94c0:	|  |  |  |   move.l (a1),d0
    94c2:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    94c4:	|  |  |  |   movea.l 44(sp),a0
    94c8:	|  |  |  |   movea.l 4(a0),a0
    94cc:	|  |  |  |   move.l 36(sp),d1
    94d0:	|  |  |  |   move.l d1,d0
    94d2:	|  |  |  |   add.l d0,d0
    94d4:	|  |  |  |   add.l d1,d0
    94d6:	|  |  |  |   add.l d0,d0
    94d8:	|  |  |  |   add.l d0,d0
    94da:	|  |  |  |   lea (0,a0,d0.l),a1
    94de:	|  |  |  |   movea.l 16(sp),a0
    94e2:	|  |  |  |   movea.l 4(a0),a0
    94e6:	|  |  |  |   move.l 36(sp),d1
    94ea:	|  |  |  |   move.l d1,d0
    94ec:	|  |  |  |   add.l d0,d0
    94ee:	|  |  |  |   add.l d1,d0
    94f0:	|  |  |  |   add.l d0,d0
    94f2:	|  |  |  |   add.l d0,d0
    94f4:	|  |  |  |   adda.l d0,a0
    94f6:	|  |  |  |   move.l 4(a1),d0
    94fa:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    94fe:	|  |  |  |   movea.l 44(sp),a0
    9502:	|  |  |  |   movea.l 4(a0),a0
    9506:	|  |  |  |   move.l 36(sp),d1
    950a:	|  |  |  |   move.l d1,d0
    950c:	|  |  |  |   add.l d0,d0
    950e:	|  |  |  |   add.l d1,d0
    9510:	|  |  |  |   add.l d0,d0
    9512:	|  |  |  |   add.l d0,d0
    9514:	|  |  |  |   lea (0,a0,d0.l),a1
    9518:	|  |  |  |   movea.l 16(sp),a0
    951c:	|  |  |  |   movea.l 4(a0),a0
    9520:	|  |  |  |   move.l 36(sp),d1
    9524:	|  |  |  |   move.l d1,d0
    9526:	|  |  |  |   add.l d0,d0
    9528:	|  |  |  |   add.l d1,d0
    952a:	|  |  |  |   add.l d0,d0
    952c:	|  |  |  |   add.l d0,d0
    952e:	|  |  |  |   adda.l d0,a0
    9530:	|  |  |  |   move.l 8(a1),d0
    9534:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    9538:	|  |  |  |   addq.l #1,36(sp)
    953c:	|  |  |  '-> move.l 36(sp),d0
    9540:	|  |  |      cmp.l 32(sp),d0
    9544:	|  |  '----- blt.w 948e <copyAnim+0xda>
    9548:	|  |     ,-- bra.s 9552 <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    954a:	|  '-----|-> movea.l 16(sp),a0
    954e:	|        |   clr.l 4(a0)
	}

	return newAnim;
    9552:	|        '-> move.l 16(sp),d0
}
    9556:	'----------> movea.l (sp)+,a6
    9558:	             lea 36(sp),sp
    955c:	             rts

0000955e <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    955e:	                lea -44(sp),sp
    9562:	                move.l a6,-(sp)
    9564:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    9566:	                moveq #12,d0
    9568:	                move.l d0,40(sp)
    956c:	                clr.l 36(sp)
    9570:	                move.l 1c810 <SysBase>,d0
    9576:	                movea.l d0,a6
    9578:	                move.l 40(sp),d0
    957c:	                move.l 36(sp),d1
    9580:	                jsr -684(a6)
    9584:	                move.l d0,32(sp)
    9588:	                move.l 32(sp),d0
    958c:	                move.l d0,28(sp)
	if( !newP) {
    9590:	            ,-- bne.s 95a6 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9592:	            |   pea 1902d <PutChar+0x147f>
    9598:	            |   jsr 1710c <KPrintF>
    959e:	            |   addq.l #4,sp
		return NULL;
    95a0:	            |   moveq #0,d0
    95a2:	,-----------|-- bra.w 9776 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    95a6:	|           '-> movea.l 28(sp),a0
    95aa:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    95b0:	|               move.l 56(sp),d1
    95b4:	|               move.l d1,d0
    95b6:	|               add.l d0,d0
    95b8:	|               add.l d1,d0
    95ba:	|               add.l d0,d0
    95bc:	|               add.l d0,d0
    95be:	|               move.l d0,24(sp)
    95c2:	|               clr.l 20(sp)
    95c6:	|               move.l 1c810 <SysBase>,d0
    95cc:	|               movea.l d0,a6
    95ce:	|               move.l 24(sp),d0
    95d2:	|               move.l 20(sp),d1
    95d6:	|               jsr -684(a6)
    95da:	|               move.l d0,16(sp)
    95de:	|               move.l 16(sp),d0
    95e2:	|               movea.l 28(sp),a0
    95e6:	|               move.l d0,4(a0)
	if( !newP->frames) {
    95ea:	|               movea.l 28(sp),a0
    95ee:	|               move.l 4(a0),d0
    95f2:	|           ,-- bne.s 9608 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    95f4:	|           |   pea 1902d <PutChar+0x147f>
    95fa:	|           |   jsr 1710c <KPrintF>
    9600:	|           |   addq.l #4,sp
		return NULL;
    9602:	|           |   moveq #0,d0
    9604:	+-----------|-- bra.w 9776 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    9608:	|           '-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    960e:	|               movea.l 60(sp),a0
    9612:	|               move.l (a0),44(sp)
	while (a) {
    9616:	|     ,-------- bra.w 976a <createPersonaAnim+0x20c>
		a --;
    961a:	|  ,--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    961e:	|  |  |         movea.l 28(sp),a0
    9622:	|  |  |         movea.l 4(a0),a0
    9626:	|  |  |         move.l 48(sp),d1
    962a:	|  |  |         move.l d1,d0
    962c:	|  |  |         add.l d0,d0
    962e:	|  |  |         add.l d1,d0
    9630:	|  |  |         add.l d0,d0
    9632:	|  |  |         add.l d0,d0
    9634:	|  |  |         adda.l d0,a0
    9636:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    963a:	|  |  |         movea.l 44(sp),a0
    963e:	|  |  |         move.l (a0),d0
    9640:	|  |  |         moveq #5,d1
    9642:	|  |  |         cmp.l d0,d1
    9644:	|  |  |     ,-- bne.s 9670 <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    9646:	|  |  |     |   movea.l 28(sp),a0
    964a:	|  |  |     |   movea.l 4(a0),a0
    964e:	|  |  |     |   move.l 48(sp),d1
    9652:	|  |  |     |   move.l d1,d0
    9654:	|  |  |     |   add.l d0,d0
    9656:	|  |  |     |   add.l d1,d0
    9658:	|  |  |     |   add.l d0,d0
    965a:	|  |  |     |   add.l d0,d0
    965c:	|  |  |     |   lea (0,a0,d0.l),a1
    9660:	|  |  |     |   movea.l 44(sp),a0
    9664:	|  |  |     |   move.l 4(a0),d0
    9668:	|  |  |     |   move.l d0,8(a1)
    966c:	|  |  |  ,--|-- bra.w 9718 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    9670:	|  |  |  |  '-> movea.l 44(sp),a0
    9674:	|  |  |  |      move.l (a0),d0
    9676:	|  |  |  |      moveq #2,d1
    9678:	|  |  |  |      cmp.l d0,d1
    967a:	|  |  |  |  ,-- bne.s 96a6 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    967c:	|  |  |  |  |   movea.l 44(sp),a0
    9680:	|  |  |  |  |   move.l 4(a0),d2
    9684:	|  |  |  |  |   movea.l 28(sp),a0
    9688:	|  |  |  |  |   movea.l 4(a0),a0
    968c:	|  |  |  |  |   move.l 48(sp),d1
    9690:	|  |  |  |  |   move.l d1,d0
    9692:	|  |  |  |  |   add.l d0,d0
    9694:	|  |  |  |  |   add.l d1,d0
    9696:	|  |  |  |  |   add.l d0,d0
    9698:	|  |  |  |  |   add.l d0,d0
    969a:	|  |  |  |  |   adda.l d0,a0
    969c:	|  |  |  |  |   move.l d2,d0
    969e:	|  |  |  |  |   neg.l d0
    96a0:	|  |  |  |  |   move.l d0,8(a0)
    96a4:	|  |  |  +--|-- bra.s 9718 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    96a6:	|  |  |  |  '-> movea.l 44(sp),a0
    96aa:	|  |  |  |      move.l (a0),d0
    96ac:	|  |  |  |      moveq #6,d1
    96ae:	|  |  |  |      cmp.l d0,d1
    96b0:	|  |  |  |  ,-- bne.s 96f8 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    96b2:	|  |  |  |  |   movea.l 44(sp),a0
    96b6:	|  |  |  |  |   movea.l 4(a0),a0
    96ba:	|  |  |  |  |   move.l (a0),d0
    96bc:	|  |  |  |  |   move.l d0,-(sp)
    96be:	|  |  |  |  |   pea 1 <_start+0x1>
    96c2:	|  |  |  |  |   lea 20(sp),a0
    96c6:	|  |  |  |  |   move.l a0,-(sp)
    96c8:	|  |  |  |  |   jsr 14648 <getValueType>
    96ce:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    96d2:	|  |  |  |  |   movea.l 44(sp),a0
    96d6:	|  |  |  |  |   movea.l 4(a0),a0
    96da:	|  |  |  |  |   movea.l (a0),a0
    96dc:	|  |  |  |  |   move.l 8(a0),d0
    96e0:	|  |  |  |  |   move.l d0,-(sp)
    96e2:	|  |  |  |  |   pea 1 <_start+0x1>
    96e6:	|  |  |  |  |   lea 16(sp),a0
    96ea:	|  |  |  |  |   move.l a0,-(sp)
    96ec:	|  |  |  |  |   jsr 14648 <getValueType>
    96f2:	|  |  |  |  |   lea 12(sp),sp
    96f6:	|  |  |  +--|-- bra.s 9718 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    96f8:	|  |  |  |  '-> move.l 44(sp),d0
    96fc:	|  |  |  |      move.l d0,-(sp)
    96fe:	|  |  |  |      pea 1 <_start+0x1>
    9702:	|  |  |  |      lea 20(sp),a0
    9706:	|  |  |  |      move.l a0,-(sp)
    9708:	|  |  |  |      jsr 14648 <getValueType>
    970e:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    9712:	|  |  |  |      moveq #1,d0
    9714:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    9718:	|  |  |  '----> move.l 60(sp),-(sp)
    971c:	|  |  |         jsr 14fcc <trimStack>
    9722:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    9724:	|  |  |         movea.l 28(sp),a0
    9728:	|  |  |         movea.l 4(a0),a0
    972c:	|  |  |         move.l 48(sp),d1
    9730:	|  |  |         move.l d1,d0
    9732:	|  |  |         add.l d0,d0
    9734:	|  |  |         add.l d1,d0
    9736:	|  |  |         add.l d0,d0
    9738:	|  |  |         add.l d0,d0
    973a:	|  |  |         adda.l d0,a0
    973c:	|  |  |         move.l 12(sp),d0
    9740:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    9742:	|  |  |         movea.l 28(sp),a0
    9746:	|  |  |         movea.l 4(a0),a0
    974a:	|  |  |         move.l 48(sp),d1
    974e:	|  |  |         move.l d1,d0
    9750:	|  |  |         add.l d0,d0
    9752:	|  |  |         add.l d1,d0
    9754:	|  |  |         add.l d0,d0
    9756:	|  |  |         add.l d0,d0
    9758:	|  |  |         adda.l d0,a0
    975a:	|  |  |         move.l 8(sp),d0
    975e:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    9762:	|  |  |         movea.l 60(sp),a0
    9766:	|  |  |         move.l (a0),44(sp)
	while (a) {
    976a:	|  |  '-------> tst.l 48(sp)
    976e:	|  '----------- bne.w 961a <createPersonaAnim+0xbc>
	}

	return newP;
    9772:	|               move.l 28(sp),d0
}
    9776:	'-------------> move.l (sp)+,d2
    9778:	                movea.l (sp)+,a6
    977a:	                lea 44(sp),sp
    977e:	                rts

00009780 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    9780:	       lea -12(sp),sp
    9784:	       move.l a6,-(sp)

	if(orig->theSprites)
    9786:	       movea.l 20(sp),a0
    978a:	       move.l (a0),d0
    978c:	   ,-- beq.s 97b6 <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    978e:	   |   movea.l 20(sp),a0
    9792:	   |   movea.l (a0),a0
    9794:	   |   move.l 4(a0),d0
    9798:	   |   subq.l #1,d0
    979a:	   |   move.l d0,4(a0)
    979e:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    97a4:	   +-- bne.s 97b6 <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    97a6:	   |   movea.l 20(sp),a0
    97aa:	   |   move.l (a0),d0
    97ac:	   |   move.l d0,-(sp)
    97ae:	   |   jsr 8864 <forgetSpriteBank>
    97b4:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    97b6:	   '-> tst.l 20(sp)
    97ba:	,----- beq.s 97fa <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    97bc:	|      movea.l 20(sp),a0
    97c0:	|      move.l 8(a0),d0
    97c4:	|  ,-- beq.s 97e0 <deleteAnim+0x60>
			FreeVec( orig->frames);
    97c6:	|  |   movea.l 20(sp),a0
    97ca:	|  |   move.l 4(a0),8(sp)
    97d0:	|  |   move.l 1c810 <SysBase>,d0
    97d6:	|  |   movea.l d0,a6
    97d8:	|  |   movea.l 8(sp),a1
    97dc:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    97e0:	|  '-> move.l 20(sp),4(sp)
    97e6:	|      move.l 1c810 <SysBase>,d0
    97ec:	|      movea.l d0,a6
    97ee:	|      movea.l 4(sp),a1
    97f2:	|      jsr -690(a6)
		orig = NULL;
    97f6:	|      clr.l 20(sp)
	}	
	
}
    97fa:	'----> nop
    97fc:	       movea.l (sp)+,a6
    97fe:	       lea 12(sp),sp
    9802:	       rts

00009804 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    9804:	          lea -124(sp),sp
    9808:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    980c:	          movea.l 152(sp),a0
    9810:	          move.l 56(a0),d1
    9814:	          movea.l 152(sp),a0
    9818:	          move.l 60(a0),d0
    981c:	          cmp.l d1,d0
    981e:	      ,-- bne.s 984e <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    9820:	      |   movea.l 152(sp),a0
    9824:	      |   moveq #-1,d0
    9826:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    982a:	      |   movea.l 152(sp),a0
    982e:	      |   move.l 40(a0),d0
    9832:	      |   movea.l 152(sp),a0
    9836:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    983a:	      |   movea.l 152(sp),a0
    983e:	      |   move.l 44(a0),d0
    9842:	      |   movea.l 152(sp),a0
    9846:	      |   move.l d0,52(a0)
    984a:	   ,--|-- bra.w 9db4 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    984e:	   |  '-> movea.l 1c928 <currentFloor>,a0
    9854:	   |      move.l 16(a0),d1
    9858:	   |      movea.l 152(sp),a0
    985c:	   |      move.l 56(a0),d0
    9860:	   |      add.l d0,d0
    9862:	   |      add.l d0,d0
    9864:	   |      movea.l d1,a0
    9866:	   |      adda.l d0,a0
    9868:	   |      move.l (a0),d1
    986a:	   |      movea.l 152(sp),a0
    986e:	   |      move.l 60(a0),d0
    9872:	   |      add.l d0,d0
    9874:	   |      add.l d0,d0
    9876:	   |      movea.l d1,a0
    9878:	   |      adda.l d0,a0
    987a:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    987e:	   |      moveq #-1,d0
    9880:	   |      cmp.l 144(sp),d0
    9884:	   |  ,-- bne.s 988c <doBorderStuff+0x88>
    9886:	   |  |   clr.w d0
    9888:	,--|--|-- bra.w 9eb4 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    988c:	|  |  '-> movea.l 1c928 <currentFloor>,a0
    9892:	|  |      move.l 12(a0),d1
    9896:	|  |      move.l 144(sp),d0
    989a:	|  |      lsl.l #3,d0
    989c:	|  |      add.l d0,d1
    989e:	|  |      movea.l 1c928 <currentFloor>,a0
    98a4:	|  |      movea.l 12(a0),a1
    98a8:	|  |      movea.l 152(sp),a0
    98ac:	|  |      move.l 56(a0),d0
    98b0:	|  |      lsl.l #3,d0
    98b2:	|  |      add.l a1,d0
    98b4:	|  |      lea 40(sp),a0
    98b8:	|  |      move.l a0,-(sp)
    98ba:	|  |      lea 48(sp),a0
    98be:	|  |      move.l a0,-(sp)
    98c0:	|  |      move.l d1,-(sp)
    98c2:	|  |      move.l d0,-(sp)
    98c4:	|  |      jsr 1638e <getMatchingCorners>
    98ca:	|  |      lea 16(sp),sp
    98ce:	|  |      tst.w d0
    98d0:	|  |  ,-- bne.s 98e6 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    98d2:	|  |  |   pea 19057 <PutChar+0x14a9>
    98d8:	|  |  |   jsr 1710c <KPrintF>
    98de:	|  |  |   addq.l #4,sp
            return FALSE;
    98e0:	|  |  |   clr.w d0
    98e2:	+--|--|-- bra.w 9eb4 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    98e6:	|  |  '-> movea.l 152(sp),a0
    98ea:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    98f0:	|  |      movea.l 152(sp),a0
    98f4:	|  |      move.l (a0),d0
    98f6:	|  |      move.l d0,-(sp)
    98f8:	|  |      jsr 174d6 <__fixsfsi>
    98fe:	|  |      addq.l #4,sp
    9900:	|  |      move.l d0,140(sp)
    9904:	|  |      movea.l 152(sp),a0
    9908:	|  |      move.l 4(a0),d0
    990c:	|  |      move.l d0,-(sp)
    990e:	|  |      jsr 174d6 <__fixsfsi>
    9914:	|  |      addq.l #4,sp
    9916:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    991a:	|  |      movea.l 152(sp),a0
    991e:	|  |      move.l 40(a0),132(sp)
    9924:	|  |      movea.l 152(sp),a0
    9928:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    992e:	|  |      movea.l 1c928 <currentFloor>,a0
    9934:	|  |      move.l 4(a0),d1
    9938:	|  |      move.l 44(sp),d0
    993c:	|  |      lsl.l #3,d0
    993e:	|  |      movea.l d1,a0
    9940:	|  |      adda.l d0,a0
    9942:	|  |      move.l (a0),124(sp)
    9946:	|  |      movea.l 1c928 <currentFloor>,a0
    994c:	|  |      move.l 4(a0),d1
    9950:	|  |      move.l 44(sp),d0
    9954:	|  |      lsl.l #3,d0
    9956:	|  |      movea.l d1,a0
    9958:	|  |      adda.l d0,a0
    995a:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    9960:	|  |      movea.l 1c928 <currentFloor>,a0
    9966:	|  |      move.l 4(a0),d1
    996a:	|  |      move.l 40(sp),d0
    996e:	|  |      lsl.l #3,d0
    9970:	|  |      movea.l d1,a0
    9972:	|  |      adda.l d0,a0
    9974:	|  |      move.l (a0),116(sp)
    9978:	|  |      movea.l 1c928 <currentFloor>,a0
    997e:	|  |      move.l 4(a0),d1
    9982:	|  |      move.l 40(sp),d0
    9986:	|  |      lsl.l #3,d0
    9988:	|  |      movea.l d1,a0
    998a:	|  |      adda.l d0,a0
    998c:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    9992:	|  |      move.l 140(sp),d0
    9996:	|  |      sub.l 132(sp),d0
    999a:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    999e:	|  |      move.l 136(sp),d0
    99a2:	|  |      sub.l 128(sp),d0
    99a6:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    99aa:	|  |      move.l 116(sp),d0
    99ae:	|  |      sub.l 124(sp),d0
    99b2:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    99b6:	|  |      move.l 112(sp),d0
    99ba:	|  |      sub.l 120(sp),d0
    99be:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    99c2:	|  |      move.l 124(sp),d0
    99c6:	|  |      sub.l 140(sp),d0
    99ca:	|  |      move.l 104(sp),-(sp)
    99ce:	|  |      move.l d0,-(sp)
    99d0:	|  |      jsr 17a98 <__mulsi3>
    99d6:	|  |      addq.l #8,sp
    99d8:	|  |      move.l d0,d2
    99da:	|  |      move.l 120(sp),d0
    99de:	|  |      sub.l 136(sp),d0
    99e2:	|  |      move.l 108(sp),-(sp)
    99e6:	|  |      move.l d0,-(sp)
    99e8:	|  |      jsr 17a98 <__mulsi3>
    99ee:	|  |      addq.l #8,sp
    99f0:	|  |      move.l d2,d1
    99f2:	|  |      sub.l d0,d1
    99f4:	|  |      move.l d1,-(sp)
    99f6:	|  |      jsr 174fe <__floatsidf>
    99fc:	|  |      addq.l #4,sp
    99fe:	|  |      move.l d0,32(sp)
    9a02:	|  |      move.l d1,36(sp)
    9a06:	|  |      move.l 32(sp),88(sp)
    9a0c:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    9a12:	|  |      move.l 96(sp),-(sp)
    9a16:	|  |      move.l 112(sp),-(sp)
    9a1a:	|  |      jsr 17a98 <__mulsi3>
    9a20:	|  |      addq.l #8,sp
    9a22:	|  |      move.l d0,d2
    9a24:	|  |      move.l 100(sp),-(sp)
    9a28:	|  |      move.l 108(sp),-(sp)
    9a2c:	|  |      jsr 17a98 <__mulsi3>
    9a32:	|  |      addq.l #8,sp
    9a34:	|  |      move.l d2,d1
    9a36:	|  |      sub.l d0,d1
    9a38:	|  |      move.l d1,-(sp)
    9a3a:	|  |      jsr 174fe <__floatsidf>
    9a40:	|  |      addq.l #4,sp
    9a42:	|  |      move.l d1,-(sp)
    9a44:	|  |      move.l d0,-(sp)
    9a46:	|  |      move.l 100(sp),-(sp)
    9a4a:	|  |      move.l 100(sp),-(sp)
    9a4e:	|  |      jsr 17392 <__divdf3>
    9a54:	|  |      lea 16(sp),sp
    9a58:	|  |      move.l d0,24(sp)
    9a5c:	|  |      move.l d1,28(sp)
    9a60:	|  |      move.l 24(sp),88(sp)
    9a66:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    9a6c:	|  |      clr.l -(sp)
    9a6e:	|  |      clr.l -(sp)
    9a70:	|  |      move.l 100(sp),-(sp)
    9a74:	|  |      move.l 100(sp),-(sp)
    9a78:	|  |      jsr 1765c <__gtdf2>
    9a7e:	|  |      lea 16(sp),sp
    9a82:	|  |      tst.l d0
    9a84:	|  |  ,-- ble.w 9b5c <doBorderStuff+0x358>
    9a88:	|  |  |   clr.l -(sp)
    9a8a:	|  |  |   move.l #1072693248,-(sp)
    9a90:	|  |  |   move.l 100(sp),-(sp)
    9a94:	|  |  |   move.l 100(sp),-(sp)
    9a98:	|  |  |   jsr 17716 <__ltdf2>
    9a9e:	|  |  |   lea 16(sp),sp
    9aa2:	|  |  |   tst.l d0
    9aa4:	|  |  +-- bge.w 9b5c <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    9aa8:	|  |  |   move.l 124(sp),-(sp)
    9aac:	|  |  |   jsr 174fe <__floatsidf>
    9ab2:	|  |  |   addq.l #4,sp
    9ab4:	|  |  |   move.l d0,d2
    9ab6:	|  |  |   move.l d1,d3
    9ab8:	|  |  |   move.l 100(sp),-(sp)
    9abc:	|  |  |   jsr 174fe <__floatsidf>
    9ac2:	|  |  |   addq.l #4,sp
    9ac4:	|  |  |   move.l 92(sp),-(sp)
    9ac8:	|  |  |   move.l 92(sp),-(sp)
    9acc:	|  |  |   move.l d1,-(sp)
    9ace:	|  |  |   move.l d0,-(sp)
    9ad0:	|  |  |   jsr 1758e <__muldf3>
    9ad6:	|  |  |   lea 16(sp),sp
    9ada:	|  |  |   move.l d1,-(sp)
    9adc:	|  |  |   move.l d0,-(sp)
    9ade:	|  |  |   move.l d3,-(sp)
    9ae0:	|  |  |   move.l d2,-(sp)
    9ae2:	|  |  |   jsr 17330 <__adddf3>
    9ae8:	|  |  |   lea 16(sp),sp
    9aec:	|  |  |   move.l d1,-(sp)
    9aee:	|  |  |   move.l d0,-(sp)
    9af0:	|  |  |   jsr 174a0 <__fixdfsi>
    9af6:	|  |  |   addq.l #8,sp
    9af8:	|  |  |   movea.l 152(sp),a0
    9afc:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    9b00:	|  |  |   move.l 120(sp),-(sp)
    9b04:	|  |  |   jsr 174fe <__floatsidf>
    9b0a:	|  |  |   addq.l #4,sp
    9b0c:	|  |  |   move.l d0,d2
    9b0e:	|  |  |   move.l d1,d3
    9b10:	|  |  |   move.l 96(sp),-(sp)
    9b14:	|  |  |   jsr 174fe <__floatsidf>
    9b1a:	|  |  |   addq.l #4,sp
    9b1c:	|  |  |   move.l 92(sp),-(sp)
    9b20:	|  |  |   move.l 92(sp),-(sp)
    9b24:	|  |  |   move.l d1,-(sp)
    9b26:	|  |  |   move.l d0,-(sp)
    9b28:	|  |  |   jsr 1758e <__muldf3>
    9b2e:	|  |  |   lea 16(sp),sp
    9b32:	|  |  |   move.l d1,-(sp)
    9b34:	|  |  |   move.l d0,-(sp)
    9b36:	|  |  |   move.l d3,-(sp)
    9b38:	|  |  |   move.l d2,-(sp)
    9b3a:	|  |  |   jsr 17330 <__adddf3>
    9b40:	|  |  |   lea 16(sp),sp
    9b44:	|  |  |   move.l d1,-(sp)
    9b46:	|  |  |   move.l d0,-(sp)
    9b48:	|  |  |   jsr 174a0 <__fixdfsi>
    9b4e:	|  |  |   addq.l #8,sp
    9b50:	|  |  |   movea.l 152(sp),a0
    9b54:	|  |  |   move.l d0,52(a0)
    9b58:	|  +--|-- bra.w 9db4 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    9b5c:	|  |  '-> move.l 140(sp),d0
    9b60:	|  |      sub.l 124(sp),d0
    9b64:	|  |      move.l d0,84(sp)
    9b68:	|  |      move.l 140(sp),d0
    9b6c:	|  |      sub.l 116(sp),d0
    9b70:	|  |      move.l d0,80(sp)
    9b74:	|  |      move.l 132(sp),d0
    9b78:	|  |      sub.l 124(sp),d0
    9b7c:	|  |      move.l d0,76(sp)
    9b80:	|  |      move.l 132(sp),d0
    9b84:	|  |      sub.l 116(sp),d0
    9b88:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    9b8c:	|  |      move.l 136(sp),d0
    9b90:	|  |      sub.l 120(sp),d0
    9b94:	|  |      move.l d0,68(sp)
    9b98:	|  |      move.l 136(sp),d0
    9b9c:	|  |      sub.l 112(sp),d0
    9ba0:	|  |      move.l d0,64(sp)
    9ba4:	|  |      move.l 128(sp),d0
    9ba8:	|  |      sub.l 120(sp),d0
    9bac:	|  |      move.l d0,60(sp)
    9bb0:	|  |      move.l 128(sp),d0
    9bb4:	|  |      sub.l 112(sp),d0
    9bb8:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    9bbc:	|  |      move.l 84(sp),-(sp)
    9bc0:	|  |      move.l 88(sp),-(sp)
    9bc4:	|  |      jsr 17a98 <__mulsi3>
    9bca:	|  |      addq.l #8,sp
    9bcc:	|  |      move.l d0,84(sp)
    9bd0:	|  |      move.l 80(sp),-(sp)
    9bd4:	|  |      move.l 84(sp),-(sp)
    9bd8:	|  |      jsr 17a98 <__mulsi3>
    9bde:	|  |      addq.l #8,sp
    9be0:	|  |      move.l d0,80(sp)
    9be4:	|  |      move.l 76(sp),-(sp)
    9be8:	|  |      move.l 80(sp),-(sp)
    9bec:	|  |      jsr 17a98 <__mulsi3>
    9bf2:	|  |      addq.l #8,sp
    9bf4:	|  |      move.l d0,76(sp)
    9bf8:	|  |      move.l 72(sp),-(sp)
    9bfc:	|  |      move.l 76(sp),-(sp)
    9c00:	|  |      jsr 17a98 <__mulsi3>
    9c06:	|  |      addq.l #8,sp
    9c08:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    9c0c:	|  |      move.l 68(sp),-(sp)
    9c10:	|  |      move.l 72(sp),-(sp)
    9c14:	|  |      jsr 17a98 <__mulsi3>
    9c1a:	|  |      addq.l #8,sp
    9c1c:	|  |      move.l d0,68(sp)
    9c20:	|  |      move.l 64(sp),-(sp)
    9c24:	|  |      move.l 68(sp),-(sp)
    9c28:	|  |      jsr 17a98 <__mulsi3>
    9c2e:	|  |      addq.l #8,sp
    9c30:	|  |      move.l d0,64(sp)
    9c34:	|  |      move.l 60(sp),-(sp)
    9c38:	|  |      move.l 64(sp),-(sp)
    9c3c:	|  |      jsr 17a98 <__mulsi3>
    9c42:	|  |      addq.l #8,sp
    9c44:	|  |      move.l d0,60(sp)
    9c48:	|  |      move.l 56(sp),-(sp)
    9c4c:	|  |      move.l 60(sp),-(sp)
    9c50:	|  |      jsr 17a98 <__mulsi3>
    9c56:	|  |      addq.l #8,sp
    9c58:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9c5c:	|  |      move.l 84(sp),-(sp)
    9c60:	|  |      jsr 174fe <__floatsidf>
    9c66:	|  |      addq.l #4,sp
    9c68:	|  |      move.l d0,d2
    9c6a:	|  |      move.l d1,d3
    9c6c:	|  |      move.l 68(sp),-(sp)
    9c70:	|  |      jsr 174fe <__floatsidf>
    9c76:	|  |      addq.l #4,sp
    9c78:	|  |      move.l d1,-(sp)
    9c7a:	|  |      move.l d0,-(sp)
    9c7c:	|  |      move.l d3,-(sp)
    9c7e:	|  |      move.l d2,-(sp)
    9c80:	|  |      jsr 17330 <__adddf3>
    9c86:	|  |      lea 16(sp),sp
    9c8a:	|  |      move.l d1,-(sp)
    9c8c:	|  |      move.l d0,-(sp)
    9c8e:	|  |      jsr 17a4e <sqrt>
    9c94:	|  |      addq.l #8,sp
    9c96:	|  |      move.l d0,d2
    9c98:	|  |      move.l d1,d3
    9c9a:	|  |      move.l 76(sp),-(sp)
    9c9e:	|  |      jsr 174fe <__floatsidf>
    9ca4:	|  |      addq.l #4,sp
    9ca6:	|  |      move.l d0,d4
    9ca8:	|  |      move.l d1,d5
    9caa:	|  |      move.l 60(sp),-(sp)
    9cae:	|  |      jsr 174fe <__floatsidf>
    9cb4:	|  |      addq.l #4,sp
    9cb6:	|  |      move.l d1,-(sp)
    9cb8:	|  |      move.l d0,-(sp)
    9cba:	|  |      move.l d5,-(sp)
    9cbc:	|  |      move.l d4,-(sp)
    9cbe:	|  |      jsr 17330 <__adddf3>
    9cc4:	|  |      lea 16(sp),sp
    9cc8:	|  |      move.l d1,-(sp)
    9cca:	|  |      move.l d0,-(sp)
    9ccc:	|  |      jsr 17a4e <sqrt>
    9cd2:	|  |      addq.l #8,sp
    9cd4:	|  |      move.l d1,-(sp)
    9cd6:	|  |      move.l d0,-(sp)
    9cd8:	|  |      move.l d3,-(sp)
    9cda:	|  |      move.l d2,-(sp)
    9cdc:	|  |      jsr 17330 <__adddf3>
    9ce2:	|  |      lea 16(sp),sp
    9ce6:	|  |      move.l d0,d2
    9ce8:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    9cea:	|  |      move.l 80(sp),-(sp)
    9cee:	|  |      jsr 174fe <__floatsidf>
    9cf4:	|  |      addq.l #4,sp
    9cf6:	|  |      move.l d0,d4
    9cf8:	|  |      move.l d1,d5
    9cfa:	|  |      move.l 64(sp),-(sp)
    9cfe:	|  |      jsr 174fe <__floatsidf>
    9d04:	|  |      addq.l #4,sp
    9d06:	|  |      move.l d1,-(sp)
    9d08:	|  |      move.l d0,-(sp)
    9d0a:	|  |      move.l d5,-(sp)
    9d0c:	|  |      move.l d4,-(sp)
    9d0e:	|  |      jsr 17330 <__adddf3>
    9d14:	|  |      lea 16(sp),sp
    9d18:	|  |      move.l d1,-(sp)
    9d1a:	|  |      move.l d0,-(sp)
    9d1c:	|  |      jsr 17a4e <sqrt>
    9d22:	|  |      addq.l #8,sp
    9d24:	|  |      move.l d0,d4
    9d26:	|  |      move.l d1,d5
    9d28:	|  |      move.l 72(sp),-(sp)
    9d2c:	|  |      jsr 174fe <__floatsidf>
    9d32:	|  |      addq.l #4,sp
    9d34:	|  |      move.l d0,d6
    9d36:	|  |      move.l d1,d7
    9d38:	|  |      move.l 56(sp),-(sp)
    9d3c:	|  |      jsr 174fe <__floatsidf>
    9d42:	|  |      addq.l #4,sp
    9d44:	|  |      move.l d1,-(sp)
    9d46:	|  |      move.l d0,-(sp)
    9d48:	|  |      move.l d7,-(sp)
    9d4a:	|  |      move.l d6,-(sp)
    9d4c:	|  |      jsr 17330 <__adddf3>
    9d52:	|  |      lea 16(sp),sp
    9d56:	|  |      move.l d1,-(sp)
    9d58:	|  |      move.l d0,-(sp)
    9d5a:	|  |      jsr 17a4e <sqrt>
    9d60:	|  |      addq.l #8,sp
    9d62:	|  |      move.l d1,-(sp)
    9d64:	|  |      move.l d0,-(sp)
    9d66:	|  |      move.l d5,-(sp)
    9d68:	|  |      move.l d4,-(sp)
    9d6a:	|  |      jsr 17330 <__adddf3>
    9d70:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9d74:	|  |      move.l d1,-(sp)
    9d76:	|  |      move.l d0,-(sp)
    9d78:	|  |      move.l d3,-(sp)
    9d7a:	|  |      move.l d2,-(sp)
    9d7c:	|  |      jsr 17716 <__ltdf2>
    9d82:	|  |      lea 16(sp),sp
    9d86:	|  |      tst.l d0
    9d88:	|  |  ,-- bge.s 9da0 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    9d8a:	|  |  |   movea.l 152(sp),a0
    9d8e:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    9d94:	|  |  |   movea.l 152(sp),a0
    9d98:	|  |  |   move.l 120(sp),52(a0)
    9d9e:	|  +--|-- bra.s 9db4 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    9da0:	|  |  '-> movea.l 152(sp),a0
    9da4:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    9daa:	|  |      movea.l 152(sp),a0
    9dae:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    9db4:	|  '----> movea.l 152(sp),a0
    9db8:	|         move.l 52(a0),d0
    9dbc:	|         move.l d0,-(sp)
    9dbe:	|         jsr 1753e <__floatsisf>
    9dc4:	|         addq.l #4,sp
    9dc6:	|         move.l d0,d1
    9dc8:	|         movea.l 152(sp),a0
    9dcc:	|         move.l 4(a0),d0
    9dd0:	|         move.l d0,-(sp)
    9dd2:	|         move.l d1,-(sp)
    9dd4:	|         jsr 17832 <__subsf3>
    9dda:	|         addq.l #8,sp
    9ddc:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    9de0:	|         movea.l 152(sp),a0
    9de4:	|         move.l (a0),d2
    9de6:	|         movea.l 152(sp),a0
    9dea:	|         move.l 48(a0),d0
    9dee:	|         move.l d0,-(sp)
    9df0:	|         jsr 1753e <__floatsisf>
    9df6:	|         addq.l #4,sp
    9df8:	|         move.l d0,-(sp)
    9dfa:	|         move.l d2,-(sp)
    9dfc:	|         jsr 17832 <__subsf3>
    9e02:	|         addq.l #8,sp
    9e04:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    9e08:	|         clr.l -(sp)
    9e0a:	|         move.l 52(sp),-(sp)
    9e0e:	|         jsr 1779a <__nesf2>
    9e14:	|         addq.l #8,sp
    9e16:	|         tst.l d0
    9e18:	|     ,-- bne.s 9e2c <doBorderStuff+0x628>
    9e1a:	|     |   clr.l -(sp)
    9e1c:	|     |   move.l 56(sp),-(sp)
    9e20:	|     |   jsr 1779a <__nesf2>
    9e26:	|     |   addq.l #8,sp
    9e28:	|     |   tst.l d0
    9e2a:	|  ,--|-- beq.s 9ea2 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    9e2c:	|  |  '-> move.l 52(sp),d0
    9e30:	|  |      move.l d0,-(sp)
    9e32:	|  |      move.l d0,-(sp)
    9e34:	|  |      jsr 172fa <__addsf3>
    9e3a:	|  |      addq.l #8,sp
    9e3c:	|  |      move.l d0,-(sp)
    9e3e:	|  |      move.l 52(sp),-(sp)
    9e42:	|  |      jsr 1789e <atan2f>
    9e48:	|  |      addq.l #8,sp
    9e4a:	|  |      move.l d0,-(sp)
    9e4c:	|  |      jsr 17460 <__extendsfdf2>
    9e52:	|  |      addq.l #4,sp
    9e54:	|  |      move.l #-1540411785,-(sp)
    9e5a:	|  |      move.l #1078765033,-(sp)
    9e60:	|  |      move.l d1,-(sp)
    9e62:	|  |      move.l d0,-(sp)
    9e64:	|  |      jsr 1758e <__muldf3>
    9e6a:	|  |      lea 16(sp),sp
    9e6e:	|  |      clr.l -(sp)
    9e70:	|  |      move.l #1080459264,-(sp)
    9e76:	|  |      move.l d1,-(sp)
    9e78:	|  |      move.l d0,-(sp)
    9e7a:	|  |      jsr 17330 <__adddf3>
    9e80:	|  |      lea 16(sp),sp
    9e84:	|  |      move.l d1,-(sp)
    9e86:	|  |      move.l d0,-(sp)
    9e88:	|  |      jsr 174a0 <__fixdfsi>
    9e8e:	|  |      addq.l #8,sp
    9e90:	|  |      movea.l 152(sp),a0
    9e94:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    9e98:	|  |      movea.l 152(sp),a0
    9e9c:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    9ea2:	|  '----> pea 1 <_start+0x1>
    9ea6:	|         move.l 156(sp),-(sp)
    9eaa:	|         jsr 414e <setFrames>
    9eb0:	|         addq.l #8,sp
    return TRUE;
    9eb2:	|         moveq #1,d0
}
    9eb4:	'-------> movem.l (sp)+,d2-d7
    9eb8:	          lea 124(sp),sp
    9ebc:	          rts

00009ebe <drawPeople>:

void drawPeople () {
    9ebe:	                   lea -24(sp),sp
    9ec2:	                   move.l d2,-(sp)

	shufflePeople ();
    9ec4:	                   jsr b95a <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    9eca:	                   move.l 1c870 <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    9ed2:	                   clr.l 20(sp)
	overRegion = NULL;
    9ed6:	                   clr.l 1c920 <overRegion>

	while (thisPerson) {
    9edc:	   ,-------------- bra.w a48e <drawPeople+0x5d0>
		if (thisPerson -> show) {
    9ee0:	,--|-------------> movea.l 24(sp),a0
    9ee4:	|  |               move.w 104(a0),d0
    9ee8:	|  |  ,----------- beq.w a242 <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    9eec:	|  |  |            movea.l 24(sp),a0
    9ef0:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    9ef6:	|  |  |            movea.l 24(sp),a0
    9efa:	|  |  |            move.l 76(a0),d0
    9efe:	|  |  |            cmp.l 20(sp),d0
    9f02:	|  |  |  ,-------- beq.w a0d0 <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    9f06:	|  |  |  |         movea.l 24(sp),a0
    9f0a:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    9f0e:	|  |  |  |         movea.l 24(sp),a0
    9f12:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    9f18:	|  |  |  |         movea.l 24(sp),a0
    9f1c:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    9f20:	|  |  |  |         movea.l 20(sp),a0
    9f24:	|  |  |  |         movea.l 4(a0),a0
    9f28:	|  |  |  |         move.l 4(a0),d0
    9f2c:	|  |  |  |         movea.l 24(sp),a0
    9f30:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    9f34:	|  |  |  |         movea.l 20(sp),a0
    9f38:	|  |  |  |         movea.l 4(a0),a1
    9f3c:	|  |  |  |         movea.l 24(sp),a0
    9f40:	|  |  |  |         move.l 84(a0),d0
    9f44:	|  |  |  |         move.l d0,d1
    9f46:	|  |  |  |         move.l d1,d0
    9f48:	|  |  |  |         add.l d0,d0
    9f4a:	|  |  |  |         add.l d1,d0
    9f4c:	|  |  |  |         add.l d0,d0
    9f4e:	|  |  |  |         add.l d0,d0
    9f50:	|  |  |  |         lea (0,a1,d0.l),a0
    9f54:	|  |  |  |         move.l 8(a0),d0
    9f58:	|  |  |  |     ,-- ble.w 9ffa <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    9f5c:	|  |  |  |     |   movea.l 20(sp),a0
    9f60:	|  |  |  |     |   movea.l 4(a0),a1
    9f64:	|  |  |  |     |   movea.l 24(sp),a0
    9f68:	|  |  |  |     |   move.l 84(a0),d0
    9f6c:	|  |  |  |     |   move.l d0,d1
    9f6e:	|  |  |  |     |   move.l d1,d0
    9f70:	|  |  |  |     |   add.l d0,d0
    9f72:	|  |  |  |     |   add.l d1,d0
    9f74:	|  |  |  |     |   add.l d0,d0
    9f76:	|  |  |  |     |   add.l d0,d0
    9f78:	|  |  |  |     |   lea (0,a1,d0.l),a0
    9f7c:	|  |  |  |     |   move.l 8(a0),d0
    9f80:	|  |  |  |     |   clr.l -(sp)
    9f82:	|  |  |  |     |   move.l d0,-(sp)
    9f84:	|  |  |  |     |   jsr d06e <startSound>
    9f8a:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    9f8c:	|  |  |  |     |   movea.l 24(sp),a0
    9f90:	|  |  |  |     |   move.l 84(a0),d0
    9f94:	|  |  |  |     |   addq.l #1,d0
    9f96:	|  |  |  |     |   movea.l 24(sp),a0
    9f9a:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9f9e:	|  |  |  |     |   movea.l 24(sp),a0
    9fa2:	|  |  |  |     |   move.l 84(a0),d0
    9fa6:	|  |  |  |     |   movea.l 24(sp),a0
    9faa:	|  |  |  |     |   movea.l 72(a0),a0
    9fae:	|  |  |  |     |   move.l 8(a0),d1
    9fb2:	|  |  |  |     |   move.l d1,-(sp)
    9fb4:	|  |  |  |     |   move.l d0,-(sp)
    9fb6:	|  |  |  |     |   jsr 17b44 <__modsi3>
    9fbc:	|  |  |  |     |   addq.l #8,sp
    9fbe:	|  |  |  |     |   movea.l 24(sp),a0
    9fc2:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9fc6:	|  |  |  |     |   movea.l 24(sp),a0
    9fca:	|  |  |  |     |   movea.l 72(a0),a0
    9fce:	|  |  |  |     |   movea.l 4(a0),a1
    9fd2:	|  |  |  |     |   movea.l 24(sp),a0
    9fd6:	|  |  |  |     |   move.l 84(a0),d0
    9fda:	|  |  |  |     |   move.l d0,d1
    9fdc:	|  |  |  |     |   move.l d1,d0
    9fde:	|  |  |  |     |   add.l d0,d0
    9fe0:	|  |  |  |     |   add.l d1,d0
    9fe2:	|  |  |  |     |   add.l d0,d0
    9fe4:	|  |  |  |     |   add.l d0,d0
    9fe6:	|  |  |  |     |   lea (0,a1,d0.l),a0
    9fea:	|  |  |  |     |   move.l 4(a0),d0
    9fee:	|  |  |  |     |   movea.l 24(sp),a0
    9ff2:	|  |  |  |     |   move.l d0,88(a0)
    9ff6:	|  |  |  |  ,--|-- bra.w a138 <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    9ffa:	|  |  |  |  |  '-> movea.l 20(sp),a0
    9ffe:	|  |  |  |  |      movea.l 4(a0),a1
    a002:	|  |  |  |  |      movea.l 24(sp),a0
    a006:	|  |  |  |  |      move.l 84(a0),d0
    a00a:	|  |  |  |  |      move.l d0,d1
    a00c:	|  |  |  |  |      move.l d1,d0
    a00e:	|  |  |  |  |      add.l d0,d0
    a010:	|  |  |  |  |      add.l d1,d0
    a012:	|  |  |  |  |      add.l d0,d0
    a014:	|  |  |  |  |      add.l d0,d0
    a016:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a01a:	|  |  |  |  |      move.l 8(a0),d0
    a01e:	|  |  |  |  +----- beq.w a138 <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a022:	|  |  |  |  |      movea.l 1c7e0 <noStack>,a1
    a028:	|  |  |  |  |      movea.l 20(sp),a0
    a02c:	|  |  |  |  |      move.l 4(a0),d2
    a030:	|  |  |  |  |      movea.l 24(sp),a0
    a034:	|  |  |  |  |      move.l 84(a0),d0
    a038:	|  |  |  |  |      move.l d0,d1
    a03a:	|  |  |  |  |      move.l d1,d0
    a03c:	|  |  |  |  |      add.l d0,d0
    a03e:	|  |  |  |  |      add.l d1,d0
    a040:	|  |  |  |  |      add.l d0,d0
    a042:	|  |  |  |  |      add.l d0,d0
    a044:	|  |  |  |  |      movea.l d2,a0
    a046:	|  |  |  |  |      adda.l d0,a0
    a048:	|  |  |  |  |      move.l 8(a0),d0
    a04c:	|  |  |  |  |      neg.l d0
    a04e:	|  |  |  |  |      pea 1 <_start+0x1>
    a052:	|  |  |  |  |      move.l a1,-(sp)
    a054:	|  |  |  |  |      clr.l -(sp)
    a056:	|  |  |  |  |      clr.l -(sp)
    a058:	|  |  |  |  |      move.l d0,-(sp)
    a05a:	|  |  |  |  |      jsr 7368 <startNewFunctionNum>
    a060:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a064:	|  |  |  |  |      movea.l 24(sp),a0
    a068:	|  |  |  |  |      move.l 84(a0),d0
    a06c:	|  |  |  |  |      addq.l #1,d0
    a06e:	|  |  |  |  |      movea.l 24(sp),a0
    a072:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a076:	|  |  |  |  |      movea.l 24(sp),a0
    a07a:	|  |  |  |  |      move.l 84(a0),d0
    a07e:	|  |  |  |  |      movea.l 24(sp),a0
    a082:	|  |  |  |  |      movea.l 72(a0),a0
    a086:	|  |  |  |  |      move.l 8(a0),d1
    a08a:	|  |  |  |  |      move.l d1,-(sp)
    a08c:	|  |  |  |  |      move.l d0,-(sp)
    a08e:	|  |  |  |  |      jsr 17b44 <__modsi3>
    a094:	|  |  |  |  |      addq.l #8,sp
    a096:	|  |  |  |  |      movea.l 24(sp),a0
    a09a:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a09e:	|  |  |  |  |      movea.l 24(sp),a0
    a0a2:	|  |  |  |  |      movea.l 72(a0),a0
    a0a6:	|  |  |  |  |      movea.l 4(a0),a1
    a0aa:	|  |  |  |  |      movea.l 24(sp),a0
    a0ae:	|  |  |  |  |      move.l 84(a0),d0
    a0b2:	|  |  |  |  |      move.l d0,d1
    a0b4:	|  |  |  |  |      move.l d1,d0
    a0b6:	|  |  |  |  |      add.l d0,d0
    a0b8:	|  |  |  |  |      add.l d1,d0
    a0ba:	|  |  |  |  |      add.l d0,d0
    a0bc:	|  |  |  |  |      add.l d0,d0
    a0be:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a0c2:	|  |  |  |  |      move.l 4(a0),d0
    a0c6:	|  |  |  |  |      movea.l 24(sp),a0
    a0ca:	|  |  |  |  |      move.l d0,88(a0)
    a0ce:	|  |  |  |  +----- bra.s a138 <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    a0d0:	|  |  |  '--|----> movea.l 24(sp),a0
    a0d4:	|  |  |     |      move.l (a0),d0
    a0d6:	|  |  |     |      movea.l 24(sp),a0
    a0da:	|  |  |     |      move.l 8(a0),d1
    a0de:	|  |  |     |      move.l d1,-(sp)
    a0e0:	|  |  |     |      move.l d0,-(sp)
    a0e2:	|  |  |     |      jsr 1742a <__eqsf2>
    a0e8:	|  |  |     |      addq.l #8,sp
    a0ea:	|  |  |     |      tst.l d0
    a0ec:	|  |  |     |  ,-- bne.s a130 <drawPeople+0x272>
    a0ee:	|  |  |     |  |   movea.l 24(sp),a0
    a0f2:	|  |  |     |  |   move.l 4(a0),d0
    a0f6:	|  |  |     |  |   movea.l 24(sp),a0
    a0fa:	|  |  |     |  |   move.l 12(a0),d1
    a0fe:	|  |  |     |  |   move.l d1,-(sp)
    a100:	|  |  |     |  |   move.l d0,-(sp)
    a102:	|  |  |     |  |   jsr 1742a <__eqsf2>
    a108:	|  |  |     |  |   addq.l #8,sp
    a10a:	|  |  |     |  |   tst.l d0
    a10c:	|  |  |     |  +-- bne.s a130 <drawPeople+0x272>
    a10e:	|  |  |     |  |   movea.l 20(sp),a0
    a112:	|  |  |     |  |   move.l 8(a0),d0
    a116:	|  |  |     |  |   moveq #1,d1
    a118:	|  |  |     |  |   cmp.l d0,d1
    a11a:	|  |  |     |  +-- bne.s a130 <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    a11c:	|  |  |     |  |   movea.l 24(sp),a0
    a120:	|  |  |     |  |   move.l 16(a0),d0
    a124:	|  |  |     |  |   addq.l #1,d0
    a126:	|  |  |     |  |   movea.l 24(sp),a0
    a12a:	|  |  |     |  |   move.l d0,16(a0)
    a12e:	|  |  |     +--|-- bra.s a138 <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    a130:	|  |  |     |  '-> movea.l 24(sp),a0
    a134:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    a138:	|  |  |     '----> movea.l 24(sp),a0
    a13c:	|  |  |            move.l (a0),d0
    a13e:	|  |  |            movea.l 24(sp),a0
    a142:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    a146:	|  |  |            movea.l 24(sp),a0
    a14a:	|  |  |            move.l 4(a0),d0
    a14e:	|  |  |            movea.l 24(sp),a0
    a152:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    a156:	|  |  |            movea.l 20(sp),a0
    a15a:	|  |  |            movea.l 4(a0),a1
    a15e:	|  |  |            movea.l 24(sp),a0
    a162:	|  |  |            move.l 84(a0),d0
    a166:	|  |  |            move.l d0,d1
    a168:	|  |  |            move.l d1,d0
    a16a:	|  |  |            add.l d0,d0
    a16c:	|  |  |            add.l d1,d0
    a16e:	|  |  |            add.l d0,d0
    a170:	|  |  |            add.l d0,d0
    a172:	|  |  |            lea (0,a1,d0.l),a0
    a176:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    a17a:	|  |  |            move.l 8(sp),d0
    a17e:	|  |  |            add.l d0,d0
    a180:	|  |  |            subx.l d0,d0
    a182:	|  |  |            neg.l d0
    a184:	|  |  |            move.b d0,d0
    a186:	|  |  |            move.b d0,d0
    a188:	|  |  |            andi.l #255,d0
    a18e:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    a192:	|  |  |            move.l 8(sp),-(sp)
    a196:	|  |  |            jsr 9092 <TF_abs>
    a19c:	|  |  |            addq.l #4,sp
    a19e:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    a1a2:	|  |  |            movea.l 20(sp),a0
    a1a6:	|  |  |            movea.l (a0),a0
    a1a8:	|  |  |            move.l 8(a0),d0
    a1ac:	|  |  |            cmp.l 12(sp),d0
    a1b0:	|  |  |        ,-- bgt.s a1c0 <drawPeople+0x302>
				fNum = 0;
    a1b2:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    a1b6:	|  |  |        |   moveq #2,d0
    a1b8:	|  |  |        |   sub.l 16(sp),d0
    a1bc:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    a1c0:	|  |  |        '-> moveq #2,d1
    a1c2:	|  |  |            cmp.l 16(sp),d1
    a1c6:	|  |  +----------- beq.s a242 <drawPeople+0x384>
				BOOL r = FALSE;
    a1c8:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    a1cc:	|  |  |            move.l 16(sp),d0
    a1d0:	|  |  |            movea.w d0,a0
    a1d2:	|  |  |            movea.l 20(sp),a1
    a1d6:	|  |  |            movea.l (a1),a1
    a1d8:	|  |  |            movea.l 16(a1),a1
    a1dc:	|  |  |            move.l 12(sp),d1
    a1e0:	|  |  |            move.l d1,d0
    a1e2:	|  |  |            lsl.l #3,d0
    a1e4:	|  |  |            sub.l d1,d0
    a1e6:	|  |  |            add.l d0,d0
    a1e8:	|  |  |            add.l d0,d0
    a1ea:	|  |  |            add.l a1,d0
    a1ec:	|  |  |            move.l a0,-(sp)
    a1ee:	|  |  |            move.l 28(sp),-(sp)
    a1f2:	|  |  |            move.l d0,-(sp)
    a1f4:	|  |  |            jsr 8db4 <scaleSprite>
    a1fa:	|  |  |            lea 12(sp),sp
    a1fe:	|  |  |            move.w d0,6(sp)
				if (r) {
    a202:	|  |  +----------- beq.s a242 <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    a204:	|  |  |            movea.l 24(sp),a0
    a208:	|  |  |            movea.l 114(a0),a0
    a20c:	|  |  |            movea.l (a0),a0
    a20e:	|  |  |            move.b (a0),d0
    a210:	|  |  +----------- beq.s a242 <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    a212:	|  |  |            move.l 1c890 <personRegion+0x1c>,d1
    a218:	|  |  |            movea.l 24(sp),a0
    a21c:	|  |  |            move.l 114(a0),d0
    a220:	|  |  |            cmp.l d1,d0
    a222:	|  |  |        ,-- beq.s a22a <drawPeople+0x36c>
    a224:	|  |  |        |   clr.l 1c7d8 <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    a22a:	|  |  |        '-> movea.l 24(sp),a0
    a22e:	|  |  |            move.l 114(a0),d0
    a232:	|  |  |            move.l d0,1c890 <personRegion+0x1c>
						overRegion = & personRegion;
    a238:	|  |  |            move.l #116852,1c920 <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    a242:	|  |  '----------> movea.l 24(sp),a0
    a246:	|  |               move.l 88(a0),d0
    a24a:	|  |               subq.l #1,d0
    a24c:	|  |               movea.l 24(sp),a0
    a250:	|  |               move.l d0,88(a0)
    a254:	|  |               movea.l 24(sp),a0
    a258:	|  |               move.l 88(a0),d0
    a25c:	|  |        ,----- bne.w a484 <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    a260:	|  |        |      movea.l 24(sp),a0
    a264:	|  |        |      move.l 84(a0),d0
    a268:	|  |        |      addq.l #1,d0
    a26a:	|  |        |      movea.l 24(sp),a0
    a26e:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a272:	|  |        |      movea.l 24(sp),a0
    a276:	|  |        |      move.l 84(a0),d0
    a27a:	|  |        |      movea.l 24(sp),a0
    a27e:	|  |        |      movea.l 72(a0),a0
    a282:	|  |        |      move.l 8(a0),d1
    a286:	|  |        |      move.l d1,-(sp)
    a288:	|  |        |      move.l d0,-(sp)
    a28a:	|  |        |      jsr 17b44 <__modsi3>
    a290:	|  |        |      addq.l #8,sp
    a292:	|  |        |      movea.l 24(sp),a0
    a296:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a29a:	|  |        |      movea.l 24(sp),a0
    a29e:	|  |        |      movea.l 72(a0),a0
    a2a2:	|  |        |      movea.l 4(a0),a1
    a2a6:	|  |        |      movea.l 24(sp),a0
    a2aa:	|  |        |      move.l 84(a0),d0
    a2ae:	|  |        |      move.l d0,d1
    a2b0:	|  |        |      move.l d1,d0
    a2b2:	|  |        |      add.l d0,d0
    a2b4:	|  |        |      add.l d1,d0
    a2b6:	|  |        |      add.l d0,d0
    a2b8:	|  |        |      add.l d0,d0
    a2ba:	|  |        |      lea (0,a1,d0.l),a0
    a2be:	|  |        |      move.l 4(a0),d0
    a2c2:	|  |        |      movea.l 24(sp),a0
    a2c6:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    a2ca:	|  |        |      movea.l 24(sp),a0
    a2ce:	|  |        |      move.w 104(a0),d0
    a2d2:	|  |        +----- beq.w a484 <drawPeople+0x5c6>
    a2d6:	|  |        |      tst.l 20(sp)
    a2da:	|  |        +----- beq.w a484 <drawPeople+0x5c6>
    a2de:	|  |        |      movea.l 20(sp),a0
    a2e2:	|  |        |      move.l 4(a0),d0
    a2e6:	|  |        +----- beq.w a484 <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a2ea:	|  |        |      movea.l 20(sp),a0
    a2ee:	|  |        |      movea.l 4(a0),a1
    a2f2:	|  |        |      movea.l 24(sp),a0
    a2f6:	|  |        |      move.l 84(a0),d0
    a2fa:	|  |        |      move.l d0,d1
    a2fc:	|  |        |      move.l d1,d0
    a2fe:	|  |        |      add.l d0,d0
    a300:	|  |        |      add.l d1,d0
    a302:	|  |        |      add.l d0,d0
    a304:	|  |        |      add.l d0,d0
    a306:	|  |        |      lea (0,a1,d0.l),a0
    a30a:	|  |        |      move.l 8(a0),d0
    a30e:	|  |        |  ,-- ble.w a3b0 <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a312:	|  |        |  |   movea.l 20(sp),a0
    a316:	|  |        |  |   movea.l 4(a0),a1
    a31a:	|  |        |  |   movea.l 24(sp),a0
    a31e:	|  |        |  |   move.l 84(a0),d0
    a322:	|  |        |  |   move.l d0,d1
    a324:	|  |        |  |   move.l d1,d0
    a326:	|  |        |  |   add.l d0,d0
    a328:	|  |        |  |   add.l d1,d0
    a32a:	|  |        |  |   add.l d0,d0
    a32c:	|  |        |  |   add.l d0,d0
    a32e:	|  |        |  |   lea (0,a1,d0.l),a0
    a332:	|  |        |  |   move.l 8(a0),d0
    a336:	|  |        |  |   clr.l -(sp)
    a338:	|  |        |  |   move.l d0,-(sp)
    a33a:	|  |        |  |   jsr d06e <startSound>
    a340:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a342:	|  |        |  |   movea.l 24(sp),a0
    a346:	|  |        |  |   move.l 84(a0),d0
    a34a:	|  |        |  |   addq.l #1,d0
    a34c:	|  |        |  |   movea.l 24(sp),a0
    a350:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a354:	|  |        |  |   movea.l 24(sp),a0
    a358:	|  |        |  |   move.l 84(a0),d0
    a35c:	|  |        |  |   movea.l 24(sp),a0
    a360:	|  |        |  |   movea.l 72(a0),a0
    a364:	|  |        |  |   move.l 8(a0),d1
    a368:	|  |        |  |   move.l d1,-(sp)
    a36a:	|  |        |  |   move.l d0,-(sp)
    a36c:	|  |        |  |   jsr 17b44 <__modsi3>
    a372:	|  |        |  |   addq.l #8,sp
    a374:	|  |        |  |   movea.l 24(sp),a0
    a378:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a37c:	|  |        |  |   movea.l 24(sp),a0
    a380:	|  |        |  |   movea.l 72(a0),a0
    a384:	|  |        |  |   movea.l 4(a0),a1
    a388:	|  |        |  |   movea.l 24(sp),a0
    a38c:	|  |        |  |   move.l 84(a0),d0
    a390:	|  |        |  |   move.l d0,d1
    a392:	|  |        |  |   move.l d1,d0
    a394:	|  |        |  |   add.l d0,d0
    a396:	|  |        |  |   add.l d1,d0
    a398:	|  |        |  |   add.l d0,d0
    a39a:	|  |        |  |   add.l d0,d0
    a39c:	|  |        |  |   lea (0,a1,d0.l),a0
    a3a0:	|  |        |  |   move.l 4(a0),d0
    a3a4:	|  |        |  |   movea.l 24(sp),a0
    a3a8:	|  |        |  |   move.l d0,88(a0)
    a3ac:	|  |        +--|-- bra.w a484 <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a3b0:	|  |        |  '-> movea.l 20(sp),a0
    a3b4:	|  |        |      movea.l 4(a0),a1
    a3b8:	|  |        |      movea.l 24(sp),a0
    a3bc:	|  |        |      move.l 84(a0),d0
    a3c0:	|  |        |      move.l d0,d1
    a3c2:	|  |        |      move.l d1,d0
    a3c4:	|  |        |      add.l d0,d0
    a3c6:	|  |        |      add.l d1,d0
    a3c8:	|  |        |      add.l d0,d0
    a3ca:	|  |        |      add.l d0,d0
    a3cc:	|  |        |      lea (0,a1,d0.l),a0
    a3d0:	|  |        |      move.l 8(a0),d0
    a3d4:	|  |        +----- beq.w a484 <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a3d8:	|  |        |      movea.l 1c7e0 <noStack>,a1
    a3de:	|  |        |      movea.l 20(sp),a0
    a3e2:	|  |        |      move.l 4(a0),d2
    a3e6:	|  |        |      movea.l 24(sp),a0
    a3ea:	|  |        |      move.l 84(a0),d0
    a3ee:	|  |        |      move.l d0,d1
    a3f0:	|  |        |      move.l d1,d0
    a3f2:	|  |        |      add.l d0,d0
    a3f4:	|  |        |      add.l d1,d0
    a3f6:	|  |        |      add.l d0,d0
    a3f8:	|  |        |      add.l d0,d0
    a3fa:	|  |        |      movea.l d2,a0
    a3fc:	|  |        |      adda.l d0,a0
    a3fe:	|  |        |      move.l 8(a0),d0
    a402:	|  |        |      neg.l d0
    a404:	|  |        |      pea 1 <_start+0x1>
    a408:	|  |        |      move.l a1,-(sp)
    a40a:	|  |        |      clr.l -(sp)
    a40c:	|  |        |      clr.l -(sp)
    a40e:	|  |        |      move.l d0,-(sp)
    a410:	|  |        |      jsr 7368 <startNewFunctionNum>
    a416:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a41a:	|  |        |      movea.l 24(sp),a0
    a41e:	|  |        |      move.l 84(a0),d0
    a422:	|  |        |      addq.l #1,d0
    a424:	|  |        |      movea.l 24(sp),a0
    a428:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a42c:	|  |        |      movea.l 24(sp),a0
    a430:	|  |        |      move.l 84(a0),d0
    a434:	|  |        |      movea.l 24(sp),a0
    a438:	|  |        |      movea.l 72(a0),a0
    a43c:	|  |        |      move.l 8(a0),d1
    a440:	|  |        |      move.l d1,-(sp)
    a442:	|  |        |      move.l d0,-(sp)
    a444:	|  |        |      jsr 17b44 <__modsi3>
    a44a:	|  |        |      addq.l #8,sp
    a44c:	|  |        |      movea.l 24(sp),a0
    a450:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a454:	|  |        |      movea.l 24(sp),a0
    a458:	|  |        |      movea.l 72(a0),a0
    a45c:	|  |        |      movea.l 4(a0),a1
    a460:	|  |        |      movea.l 24(sp),a0
    a464:	|  |        |      move.l 84(a0),d0
    a468:	|  |        |      move.l d0,d1
    a46a:	|  |        |      move.l d1,d0
    a46c:	|  |        |      add.l d0,d0
    a46e:	|  |        |      add.l d1,d0
    a470:	|  |        |      add.l d0,d0
    a472:	|  |        |      add.l d0,d0
    a474:	|  |        |      lea (0,a1,d0.l),a0
    a478:	|  |        |      move.l 4(a0),d0
    a47c:	|  |        |      movea.l 24(sp),a0
    a480:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    a484:	|  |        '----> movea.l 24(sp),a0
    a488:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    a48e:	|  '-------------> tst.l 24(sp)
    a492:	'----------------- bne.w 9ee0 <drawPeople+0x22>
	}
}
    a496:	                   nop
    a498:	                   nop
    a49a:	                   move.l (sp)+,d2
    a49c:	                   lea 24(sp),sp
    a4a0:	                   rts

0000a4a2 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    a4a2:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    a4a4:	          move.l 1c870 <allPeople>,(sp)
	while (thisPerson) {
    a4aa:	      ,-- bra.s a4c2 <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    a4ac:	,-----|-> movea.l (sp),a0
    a4ae:	|     |   movea.l 114(a0),a0
    a4b2:	|     |   move.l 4(a0),d0
    a4b6:	|     |   cmp.l 8(sp),d0
    a4ba:	|  ,--|-- beq.s a4c8 <findPerson+0x26>
		thisPerson = thisPerson -> next;
    a4bc:	|  |  |   movea.l (sp),a0
    a4be:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    a4c2:	|  |  '-> tst.l (sp)
    a4c4:	'--|----- bne.s a4ac <findPerson+0xa>
    a4c6:	   |  ,-- bra.s a4ca <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    a4c8:	   '--|-> nop
	}
	return thisPerson;
    a4ca:	      '-> move.l (sp),d0
}
    a4cc:	          addq.l #4,sp
    a4ce:	          rts

0000a4d0 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    a4d0:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    a4d2:	       move.l 12(sp),-(sp)
    a4d6:	       jsr a4a2 <findPerson>
    a4dc:	       addq.l #4,sp
    a4de:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    a4e0:	   ,-- bne.s a4e6 <floatCharacter+0x16>
    a4e2:	   |   clr.w d0
    a4e4:	,--|-- bra.s a4f0 <floatCharacter+0x20>
	moveMe -> floaty = f;
    a4e6:	|  '-> movea.l (sp),a0
    a4e8:	|      move.l 8(sp),24(a0)
	return TRUE;
    a4ee:	|      moveq #1,d0
}
    a4f0:	'----> addq.l #4,sp
    a4f2:	       rts

0000a4f4 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a4f4:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    a4f6:	          tst.l 8(sp)
    a4fa:	      ,-- bne.s a508 <forceWalkingPerson+0x14>
    a4fc:	      |   tst.l 12(sp)
    a500:	      +-- bne.s a508 <forceWalkingPerson+0x14>
    a502:	      |   clr.w d0
    a504:	,-----|-- bra.w a59a <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a508:	|     '-> move.l 16(sp),-(sp)
    a50c:	|         jsr a4a2 <findPerson>
    a512:	|         addq.l #4,sp
    a514:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    a516:	|     ,-- bne.s a51c <forceWalkingPerson+0x28>
    a518:	|     |   clr.w d0
    a51a:	+-----|-- bra.s a59a <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a51c:	|     '-> movea.l (sp),a0
    a51e:	|         move.l 68(a0),d0
    a522:	|     ,-- beq.s a534 <forceWalkingPerson+0x40>
    a524:	|     |   movea.l (sp),a0
    a526:	|     |   move.l 68(a0),d0
    a52a:	|     |   move.l d0,-(sp)
    a52c:	|     |   jsr 4fac <abortFunction>
    a532:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    a534:	|     '-> movea.l (sp),a0
    a536:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    a53c:	|         movea.l (sp),a0
    a53e:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    a542:	|         movea.l (sp),a0
    a544:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    a54a:	|         movea.l (sp),a0
    a54c:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    a552:	|         movea.l (sp),a0
    a554:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    a55a:	|         movea.l (sp),a0
    a55c:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    a560:	|         movea.l (sp),a0
    a562:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    a566:	|         move.l (sp),-(sp)
    a568:	|         jsr 9804 <doBorderStuff>
    a56e:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    a570:	|         pea 1 <_start+0x1>
    a574:	|         move.l 4(sp),-(sp)
    a578:	|         jsr bde8 <walkMe>
    a57e:	|         addq.l #8,sp
    a580:	|         tst.w d0
    a582:	|     ,-- bne.s a58c <forceWalkingPerson+0x98>
    a584:	|     |   movea.l (sp),a0
    a586:	|     |   move.w 66(a0),d0
    a58a:	|  ,--|-- beq.s a598 <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    a58c:	|  |  '-> movea.l (sp),a0
    a58e:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    a594:	|  |      moveq #1,d0
    a596:	+--|----- bra.s a59a <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    a598:	|  '----> clr.w d0
    }
}
    a59a:	'-------> addq.l #4,sp
    a59c:	          rts

0000a59e <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    a59e:	                lea -56(sp),sp
    a5a2:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    a5a4:	                move.l #320,56(sp)
    a5ac:	                move.l #200,52(sp)
    a5b4:	                moveq #-1,d0
    a5b6:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    a5ba:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a5c2:	                clr.l 44(sp)
    a5c6:	   ,----------- bra.w a79e <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    a5ca:	,--|----------> movea.l 1c928 <currentFloor>,a0
    a5d0:	|  |            move.l 12(a0),d1
    a5d4:	|  |            move.l 44(sp),d0
    a5d8:	|  |            lsl.l #3,d0
    a5da:	|  |            movea.l d1,a0
    a5dc:	|  |            adda.l d0,a0
    a5de:	|  |            move.l (a0),d0
    a5e0:	|  |            move.l d0,d1
    a5e2:	|  |            subq.l #1,d1
    a5e4:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a5e8:	|  |            clr.l 40(sp)
    a5ec:	|  |     ,----- bra.w a77c <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    a5f0:	|  |  ,--|----> movea.l 1c928 <currentFloor>,a0
    a5f6:	|  |  |  |      move.l 4(a0),d1
    a5fa:	|  |  |  |      movea.l 1c928 <currentFloor>,a0
    a600:	|  |  |  |      movea.l 12(a0),a0
    a604:	|  |  |  |      move.l 44(sp),d0
    a608:	|  |  |  |      lsl.l #3,d0
    a60a:	|  |  |  |      adda.l d0,a0
    a60c:	|  |  |  |      movea.l 4(a0),a0
    a610:	|  |  |  |      move.l 40(sp),d0
    a614:	|  |  |  |      add.l d0,d0
    a616:	|  |  |  |      add.l d0,d0
    a618:	|  |  |  |      adda.l d0,a0
    a61a:	|  |  |  |      move.l (a0),d0
    a61c:	|  |  |  |      lsl.l #3,d0
    a61e:	|  |  |  |      movea.l d1,a0
    a620:	|  |  |  |      adda.l d0,a0
    a622:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    a626:	|  |  |  |      movea.l 1c928 <currentFloor>,a0
    a62c:	|  |  |  |      move.l 4(a0),d1
    a630:	|  |  |  |      movea.l 1c928 <currentFloor>,a0
    a636:	|  |  |  |      movea.l 12(a0),a0
    a63a:	|  |  |  |      move.l 44(sp),d0
    a63e:	|  |  |  |      lsl.l #3,d0
    a640:	|  |  |  |      adda.l d0,a0
    a642:	|  |  |  |      movea.l 4(a0),a0
    a646:	|  |  |  |      move.l 40(sp),d0
    a64a:	|  |  |  |      add.l d0,d0
    a64c:	|  |  |  |      add.l d0,d0
    a64e:	|  |  |  |      adda.l d0,a0
    a650:	|  |  |  |      move.l (a0),d0
    a652:	|  |  |  |      lsl.l #3,d0
    a654:	|  |  |  |      movea.l d1,a0
    a656:	|  |  |  |      adda.l d0,a0
    a658:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    a65e:	|  |  |  |      movea.l 1c928 <currentFloor>,a0
    a664:	|  |  |  |      move.l 4(a0),d1
    a668:	|  |  |  |      movea.l 1c928 <currentFloor>,a0
    a66e:	|  |  |  |      movea.l 12(a0),a0
    a672:	|  |  |  |      move.l 44(sp),d0
    a676:	|  |  |  |      lsl.l #3,d0
    a678:	|  |  |  |      adda.l d0,a0
    a67a:	|  |  |  |      movea.l 4(a0),a0
    a67e:	|  |  |  |      move.l 36(sp),d0
    a682:	|  |  |  |      add.l d0,d0
    a684:	|  |  |  |      add.l d0,d0
    a686:	|  |  |  |      adda.l d0,a0
    a688:	|  |  |  |      move.l (a0),d0
    a68a:	|  |  |  |      lsl.l #3,d0
    a68c:	|  |  |  |      movea.l d1,a0
    a68e:	|  |  |  |      adda.l d0,a0
    a690:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    a694:	|  |  |  |      movea.l 1c928 <currentFloor>,a0
    a69a:	|  |  |  |      move.l 4(a0),d1
    a69e:	|  |  |  |      movea.l 1c928 <currentFloor>,a0
    a6a4:	|  |  |  |      movea.l 12(a0),a0
    a6a8:	|  |  |  |      move.l 44(sp),d0
    a6ac:	|  |  |  |      lsl.l #3,d0
    a6ae:	|  |  |  |      adda.l d0,a0
    a6b0:	|  |  |  |      movea.l 4(a0),a0
    a6b4:	|  |  |  |      move.l 36(sp),d0
    a6b8:	|  |  |  |      add.l d0,d0
    a6ba:	|  |  |  |      add.l d0,d0
    a6bc:	|  |  |  |      adda.l d0,a0
    a6be:	|  |  |  |      move.l (a0),d0
    a6c0:	|  |  |  |      lsl.l #3,d0
    a6c2:	|  |  |  |      movea.l d1,a0
    a6c4:	|  |  |  |      adda.l d0,a0
    a6c6:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    a6cc:	|  |  |  |      movea.l 68(sp),a0
    a6d0:	|  |  |  |      move.l (a0),d1
    a6d2:	|  |  |  |      movea.l 64(sp),a0
    a6d6:	|  |  |  |      move.l (a0),d0
    a6d8:	|  |  |  |      move.l d1,-(sp)
    a6da:	|  |  |  |      move.l d0,-(sp)
    a6dc:	|  |  |  |      move.l 24(sp),-(sp)
    a6e0:	|  |  |  |      move.l 32(sp),-(sp)
    a6e4:	|  |  |  |      move.l 40(sp),-(sp)
    a6e8:	|  |  |  |      move.l 48(sp),-(sp)
    a6ec:	|  |  |  |      lea 28(sp),a0
    a6f0:	|  |  |  |      move.l a0,-(sp)
    a6f2:	|  |  |  |      lea 36(sp),a0
    a6f6:	|  |  |  |      move.l a0,-(sp)
    a6f8:	|  |  |  |      jsr 15f26 <closestPointOnLine>
    a6fe:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    a702:	|  |  |  |      movea.l 64(sp),a0
    a706:	|  |  |  |      move.l (a0),d0
    a708:	|  |  |  |      move.l 8(sp),d1
    a70c:	|  |  |  |      move.l d0,d2
    a70e:	|  |  |  |      sub.l d1,d2
    a710:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    a714:	|  |  |  |      movea.l 68(sp),a0
    a718:	|  |  |  |      move.l (a0),d0
    a71a:	|  |  |  |      move.l 4(sp),d1
    a71e:	|  |  |  |      move.l d0,d2
    a720:	|  |  |  |      sub.l d1,d2
    a722:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    a726:	|  |  |  |      move.l 28(sp),-(sp)
    a72a:	|  |  |  |      move.l 32(sp),-(sp)
    a72e:	|  |  |  |      jsr 17a98 <__mulsi3>
    a734:	|  |  |  |      addq.l #8,sp
    a736:	|  |  |  |      move.l d0,d2
    a738:	|  |  |  |      move.l 24(sp),-(sp)
    a73c:	|  |  |  |      move.l 28(sp),-(sp)
    a740:	|  |  |  |      jsr 17a98 <__mulsi3>
    a746:	|  |  |  |      addq.l #8,sp
    a748:	|  |  |  |      move.l d2,d1
    a74a:	|  |  |  |      add.l d0,d1
    a74c:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    a750:	|  |  |  |      move.l 12(sp),d2
    a754:	|  |  |  |      cmp.l 32(sp),d2
    a758:	|  |  |  |  ,-- bge.s a772 <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    a75a:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    a760:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    a766:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    a76c:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    a772:	|  |  |  |  '-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a778:	|  |  |  |      addq.l #1,40(sp)
    a77c:	|  |  |  '----> movea.l 1c928 <currentFloor>,a0
    a782:	|  |  |         move.l 12(a0),d1
    a786:	|  |  |         move.l 44(sp),d0
    a78a:	|  |  |         lsl.l #3,d0
    a78c:	|  |  |         movea.l d1,a0
    a78e:	|  |  |         adda.l d0,a0
    a790:	|  |  |         move.l (a0),d0
    a792:	|  |  |         cmp.l 40(sp),d0
    a796:	|  |  '-------- bgt.w a5f0 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a79a:	|  |            addq.l #1,44(sp)
    a79e:	|  '----------> movea.l 1c928 <currentFloor>,a0
    a7a4:	|               move.l 8(a0),d0
    a7a8:	|               cmp.l 44(sp),d0
    a7ac:	'-------------- bgt.w a5ca <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    a7b0:	                moveq #-1,d0
    a7b2:	                cmp.l 48(sp),d0
    a7b6:	            ,-- bne.s a7bc <handleClosestPoint+0x21e>
    a7b8:	            |   clr.w d0
    a7ba:	         ,--|-- bra.s a7d6 <handleClosestPoint+0x238>
	*setX = gotX;
    a7bc:	         |  '-> movea.l 64(sp),a0
    a7c0:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    a7c4:	         |      movea.l 68(sp),a0
    a7c8:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    a7cc:	         |      movea.l 72(sp),a0
    a7d0:	         |      move.l 48(sp),(a0)

	return TRUE;
    a7d4:	         |      moveq #1,d0
}
    a7d6:	         '----> move.l (sp)+,d2
    a7d8:	                lea 56(sp),sp
    a7dc:	                rts

0000a7de <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    a7de:	clr.l 1c884 <personRegion+0x10>
	personRegion.sY = 0;
    a7e4:	clr.l 1c888 <personRegion+0x14>
	personRegion.di = -1;
    a7ea:	moveq #-1,d0
    a7ec:	move.l d0,1c88c <personRegion+0x18>
	allScreenRegions = NULL;
    a7f2:	clr.l 1c91c <allScreenRegions>

	return TRUE;
    a7f8:	moveq #1,d0
}
    a7fa:	rts

0000a7fc <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    a7fc:	          subq.l #4,sp
    a7fe:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    a800:	          tst.l 12(sp)
    a804:	      ,-- bne.s a80c <jumpPerson+0x10>
    a806:	      |   tst.l 16(sp)
    a80a:	,-----|-- beq.s a880 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a80c:	|     '-> move.l 20(sp),-(sp)
    a810:	|         jsr a4a2 <findPerson>
    a816:	|         addq.l #4,sp
    a818:	|         move.l d0,4(sp)
    if (!moveMe) return;
    a81c:	|  ,----- beq.s a884 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a81e:	|  |      movea.l 4(sp),a0
    a822:	|  |      move.l 68(a0),d0
    a826:	|  |  ,-- beq.s a83a <jumpPerson+0x3e>
    a828:	|  |  |   movea.l 4(sp),a0
    a82c:	|  |  |   move.l 68(a0),d0
    a830:	|  |  |   move.l d0,-(sp)
    a832:	|  |  |   jsr 4fac <abortFunction>
    a838:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    a83a:	|  |  '-> movea.l 4(sp),a0
    a83e:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    a842:	|  |      movea.l 4(sp),a0
    a846:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    a84a:	|  |      movea.l 4(sp),a0
    a84e:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    a852:	|  |      move.l 16(sp),-(sp)
    a856:	|  |      jsr 1753e <__floatsisf>
    a85c:	|  |      addq.l #4,sp
    a85e:	|  |      move.l d0,d2
    a860:	|  |      move.l 12(sp),-(sp)
    a864:	|  |      jsr 1753e <__floatsisf>
    a86a:	|  |      addq.l #4,sp
    a86c:	|  |      move.l d2,-(sp)
    a86e:	|  |      move.l d0,-(sp)
    a870:	|  |      move.l 12(sp),-(sp)
    a874:	|  |      jsr abea <moveAndScale>
    a87a:	|  |      lea 12(sp),sp
    a87e:	|  |  ,-- bra.s a886 <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    a880:	'--|--|-> nop
    a882:	   |  +-- bra.s a886 <jumpPerson+0x8a>
    if (!moveMe) return;
    a884:	   '--|-> nop
}
    a886:	      '-> move.l (sp)+,d2
    a888:	          addq.l #4,sp
    a88a:	          rts

0000a88c <killAllPeople>:


void killAllPeople () {
    a88c:	          subq.l #8,sp
    a88e:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    a890:	   ,----- bra.s a8fc <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    a892:	,--|----> movea.l 1c870 <allPeople>,a0
    a898:	|  |      move.l 68(a0),d0
    a89c:	|  |  ,-- beq.s a8b2 <killAllPeople+0x26>
    a89e:	|  |  |   movea.l 1c870 <allPeople>,a0
    a8a4:	|  |  |   move.l 68(a0),d0
    a8a8:	|  |  |   move.l d0,-(sp)
    a8aa:	|  |  |   jsr 4fac <abortFunction>
    a8b0:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    a8b2:	|  |  '-> movea.l 1c870 <allPeople>,a0
    a8b8:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    a8bc:	|  |      move.l 1c870 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    a8c4:	|  |      movea.l 1c870 <allPeople>,a0
    a8ca:	|  |      move.l 36(a0),d0
    a8ce:	|  |      move.l d0,1c870 <allPeople>
		removeObjectType (killPeople -> thisType);
    a8d4:	|  |      movea.l 8(sp),a0
    a8d8:	|  |      move.l 114(a0),d0
    a8dc:	|  |      move.l d0,-(sp)
    a8de:	|  |      jsr d756 <removeObjectType>
    a8e4:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    a8e6:	|  |      move.l 8(sp),4(sp)
    a8ec:	|  |      move.l 1c810 <SysBase>,d0
    a8f2:	|  |      movea.l d0,a6
    a8f4:	|  |      movea.l 4(sp),a1
    a8f8:	|  |      jsr -690(a6)
	while (allPeople) {
    a8fc:	|  '----> move.l 1c870 <allPeople>,d0
    a902:	'-------- bne.s a892 <killAllPeople+0x6>
	}
}
    a904:	          nop
    a906:	          nop
    a908:	          movea.l (sp)+,a6
    a90a:	          addq.l #8,sp
    a90c:	          rts

0000a90e <killMostPeople>:

void killMostPeople() {
    a90e:	          lea -12(sp),sp
    a912:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    a914:	          move.l #116848,12(sp)

    while (*lookyHere) {
    a91c:	   ,----- bra.w a9a2 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    a920:	,--|----> movea.l 12(sp),a0
    a924:	|  |      movea.l (a0),a0
    a926:	|  |      move.l 118(a0),d0
    a92a:	|  |      moveq #32,d1
    a92c:	|  |      and.l d1,d0
    a92e:	|  |  ,-- beq.s a940 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    a930:	|  |  |   movea.l 12(sp),a0
    a934:	|  |  |   move.l (a0),d0
    a936:	|  |  |   moveq #36,d1
    a938:	|  |  |   add.l d0,d1
    a93a:	|  |  |   move.l d1,12(sp)
    a93e:	|  +--|-- bra.s a9a2 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    a940:	|  |  '-> movea.l 12(sp),a0
    a944:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    a948:	|  |      movea.l 8(sp),a0
    a94c:	|  |      move.l 36(a0),d0
    a950:	|  |      movea.l 12(sp),a0
    a954:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    a956:	|  |      movea.l 8(sp),a0
    a95a:	|  |      move.l 68(a0),d0
    a95e:	|  |  ,-- beq.s a972 <killMostPeople+0x64>
    a960:	|  |  |   movea.l 8(sp),a0
    a964:	|  |  |   move.l 68(a0),d0
    a968:	|  |  |   move.l d0,-(sp)
    a96a:	|  |  |   jsr 4fac <abortFunction>
    a970:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    a972:	|  |  '-> movea.l 8(sp),a0
    a976:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    a97a:	|  |      movea.l 8(sp),a0
    a97e:	|  |      move.l 114(a0),d0
    a982:	|  |      move.l d0,-(sp)
    a984:	|  |      jsr d756 <removeObjectType>
    a98a:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    a98c:	|  |      move.l 8(sp),4(sp)
    a992:	|  |      move.l 1c810 <SysBase>,d0
    a998:	|  |      movea.l d0,a6
    a99a:	|  |      movea.l 4(sp),a1
    a99e:	|  |      jsr -690(a6)
    while (*lookyHere) {
    a9a2:	|  '----> movea.l 12(sp),a0
    a9a6:	|         move.l (a0),d0
    a9a8:	'-------- bne.w a920 <killMostPeople+0x12>
        }
    }
}
    a9ac:	          nop
    a9ae:	          nop
    a9b0:	          movea.l (sp)+,a6
    a9b2:	          lea 12(sp),sp
    a9b6:	          rts

0000a9b8 <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    a9b8:	clr.l -(sp)
    a9ba:	move.l sp,d0
    a9bc:	addq.l #8,d0
    a9be:	move.l d0,-(sp)
    a9c0:	jsr 414e <setFrames>
    a9c6:	addq.l #8,sp
}
    a9c8:	nop
    a9ca:	rts

0000a9cc <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a9cc:	          lea -12(sp),sp
    a9d0:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    a9d2:	          tst.l 20(sp)
    a9d6:	      ,-- bne.s a9e4 <makeWalkingPerson+0x18>
    a9d8:	      |   tst.l 24(sp)
    a9dc:	      +-- bne.s a9e4 <makeWalkingPerson+0x18>
    a9de:	      |   clr.w d0
    a9e0:	,-----|-- bra.w ab7c <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    a9e4:	|     '-> movea.l 1c928 <currentFloor>,a0
    a9ea:	|         move.l 8(a0),d0
    a9ee:	|     ,-- bne.s a9f6 <makeWalkingPerson+0x2a>
    a9f0:	|     |   clr.w d0
    a9f2:	+-----|-- bra.w ab7c <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    a9f6:	|     '-> move.l 28(sp),-(sp)
    a9fa:	|         jsr a4a2 <findPerson>
    aa00:	|         addq.l #4,sp
    aa02:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    aa06:	|     ,-- bne.s aa0e <makeWalkingPerson+0x42>
    aa08:	|     |   clr.w d0
    aa0a:	+-----|-- bra.w ab7c <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    aa0e:	|     '-> movea.l 12(sp),a0
    aa12:	|         move.l 68(a0),d0
    aa16:	|     ,-- beq.s aa2a <makeWalkingPerson+0x5e>
    aa18:	|     |   movea.l 12(sp),a0
    aa1c:	|     |   move.l 68(a0),d0
    aa20:	|     |   move.l d0,-(sp)
    aa22:	|     |   jsr 4fac <abortFunction>
    aa28:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    aa2a:	|     '-> movea.l 12(sp),a0
    aa2e:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    aa32:	|         movea.l 12(sp),a0
    aa36:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    aa3c:	|         movea.l 12(sp),a0
    aa40:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    aa46:	|         movea.l 12(sp),a0
    aa4a:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    aa50:	|         movea.l 12(sp),a0
    aa54:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    aa5a:	|         move.l 24(sp),-(sp)
    aa5e:	|         move.l 24(sp),-(sp)
    aa62:	|         jsr 1646e <inFloor>
    aa68:	|         addq.l #8,sp
    aa6a:	|         movea.l 12(sp),a0
    aa6e:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    aa72:	|         movea.l 12(sp),a0
    aa76:	|         move.l 60(a0),d0
    aa7a:	|         moveq #-1,d1
    aa7c:	|         cmp.l d0,d1
    aa7e:	|     ,-- bne.s aaae <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    aa80:	|     |   movea.w #60,a0
    aa84:	|     |   adda.l 12(sp),a0
    aa88:	|     |   moveq #44,d1
    aa8a:	|     |   add.l 12(sp),d1
    aa8e:	|     |   moveq #40,d0
    aa90:	|     |   add.l 12(sp),d0
    aa94:	|     |   move.l a0,-(sp)
    aa96:	|     |   move.l d1,-(sp)
    aa98:	|     |   move.l d0,-(sp)
    aa9a:	|     |   jsr a59e <handleClosestPoint>
    aaa0:	|     |   lea 12(sp),sp
    aaa4:	|     |   tst.w d0
    aaa6:	|     +-- bne.s aaae <makeWalkingPerson+0xe2>
    aaa8:	|     |   clr.w d0
    aaaa:	+-----|-- bra.w ab7c <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    aaae:	|     '-> movea.l 12(sp),a0
    aab2:	|         move.l 4(a0),d0
    aab6:	|         move.l d0,-(sp)
    aab8:	|         jsr 174d6 <__fixsfsi>
    aabe:	|         addq.l #4,sp
    aac0:	|         move.l d0,d2
    aac2:	|         movea.l 12(sp),a0
    aac6:	|         move.l (a0),d0
    aac8:	|         move.l d0,-(sp)
    aaca:	|         jsr 174d6 <__fixsfsi>
    aad0:	|         addq.l #4,sp
    aad2:	|         move.l d2,-(sp)
    aad4:	|         move.l d0,-(sp)
    aad6:	|         jsr 1646e <inFloor>
    aadc:	|         addq.l #8,sp
    aade:	|         movea.l 12(sp),a0
    aae2:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    aae6:	|         movea.l 12(sp),a0
    aaea:	|         move.l 56(a0),d0
    aaee:	|         moveq #-1,d1
    aaf0:	|         cmp.l d0,d1
    aaf2:	|     ,-- bne.s ab44 <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    aaf4:	|     |   movea.l 12(sp),a0
    aaf8:	|     |   move.l (a0),d0
    aafa:	|     |   move.l d0,-(sp)
    aafc:	|     |   jsr 174d6 <__fixsfsi>
    ab02:	|     |   addq.l #4,sp
    ab04:	|     |   move.l d0,8(sp)
    ab08:	|     |   movea.l 12(sp),a0
    ab0c:	|     |   move.l 4(a0),d0
    ab10:	|     |   move.l d0,-(sp)
    ab12:	|     |   jsr 174d6 <__fixsfsi>
    ab18:	|     |   addq.l #4,sp
    ab1a:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    ab1e:	|     |   moveq #56,d0
    ab20:	|     |   add.l 12(sp),d0
    ab24:	|     |   move.l d0,-(sp)
    ab26:	|     |   lea 8(sp),a0
    ab2a:	|     |   move.l a0,-(sp)
    ab2c:	|     |   moveq #16,d0
    ab2e:	|     |   add.l sp,d0
    ab30:	|     |   move.l d0,-(sp)
    ab32:	|     |   jsr a59e <handleClosestPoint>
    ab38:	|     |   lea 12(sp),sp
    ab3c:	|     |   tst.w d0
    ab3e:	|     +-- bne.s ab44 <makeWalkingPerson+0x178>
    ab40:	|     |   clr.w d0
    ab42:	+-----|-- bra.s ab7c <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    ab44:	|     '-> move.l 12(sp),-(sp)
    ab48:	|         jsr 9804 <doBorderStuff>
    ab4e:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    ab50:	|         clr.l -(sp)
    ab52:	|         move.l 16(sp),-(sp)
    ab56:	|         jsr bde8 <walkMe>
    ab5c:	|         addq.l #8,sp
    ab5e:	|         tst.w d0
    ab60:	|     ,-- bne.s ab6c <makeWalkingPerson+0x1a0>
    ab62:	|     |   movea.l 12(sp),a0
    ab66:	|     |   move.w 66(a0),d0
    ab6a:	|  ,--|-- beq.s ab7a <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    ab6c:	|  |  '-> movea.l 12(sp),a0
    ab70:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    ab76:	|  |      moveq #1,d0
    ab78:	+--|----- bra.s ab7c <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    ab7a:	|  '----> clr.w d0
	}
}
    ab7c:	'-------> move.l (sp)+,d2
    ab7e:	          lea 12(sp),sp
    ab82:	          rts

0000ab84 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    ab84:	       lea -16(sp),sp
    ab88:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    ab8a:	       moveq #12,d0
    ab8c:	       move.l d0,16(sp)
    ab90:	       clr.l 12(sp)
    ab94:	       move.l 1c810 <SysBase>,d0
    ab9a:	       movea.l d0,a6
    ab9c:	       move.l 16(sp),d0
    aba0:	       move.l 12(sp),d1
    aba4:	       jsr -684(a6)
    aba8:	       move.l d0,8(sp)
    abac:	       move.l 8(sp),d0
    abb0:	       move.l d0,4(sp)
    if(newAnim == 0) {
    abb4:	   ,-- bne.s abc8 <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    abb6:	   |   pea 190d7 <PutChar+0x1529>
    abbc:	   |   jsr 1710c <KPrintF>
    abc2:	   |   addq.l #4,sp
        return NULL;    
    abc4:	   |   moveq #0,d0
    abc6:	,--|-- bra.s abe2 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    abc8:	|  '-> movea.l 4(sp),a0
    abcc:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    abce:	|      movea.l 4(sp),a0
    abd2:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    abd6:	|      movea.l 4(sp),a0
    abda:	|      clr.l 4(a0)
	return newAnim;
    abde:	|      move.l 4(sp),d0
}
    abe2:	'----> movea.l (sp)+,a6
    abe4:	       lea 16(sp),sp
    abe8:	       rts

0000abea <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    abea:	    move.l d2,-(sp)
	me->x = x;
    abec:	    movea.l 8(sp),a0
    abf0:	    move.l 12(sp),(a0)
	me->y = y;
    abf4:	    movea.l 8(sp),a0
    abf8:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    abfe:	    movea.l 8(sp),a0
    ac02:	    clr.l 8(a0)
	me->oldy = 0;
    ac06:	    movea.l 8(sp),a0
    ac0a:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    ac0e:	    movea.l 8(sp),a0
    ac12:	    move.l 118(a0),d0
    ac16:	    moveq #2,d1
    ac18:	    and.l d1,d0
    ac1a:	,-- bne.s ac72 <moveAndScale+0x88>
    ac1c:	|   move.w 1c198 <scaleDivide>,d0
    ac22:	+-- beq.s ac72 <moveAndScale+0x88>
    ac24:	|   movea.l 8(sp),a0
    ac28:	|   move.l 4(a0),d2
    ac2c:	|   move.w 1c196 <scaleHorizon>,d0
    ac32:	|   movea.w d0,a0
    ac34:	|   move.l a0,-(sp)
    ac36:	|   jsr 1753e <__floatsisf>
    ac3c:	|   addq.l #4,sp
    ac3e:	|   move.l d0,-(sp)
    ac40:	|   move.l d2,-(sp)
    ac42:	|   jsr 17832 <__subsf3>
    ac48:	|   addq.l #8,sp
    ac4a:	|   move.l d0,d2
    ac4c:	|   move.w 1c198 <scaleDivide>,d0
    ac52:	|   movea.w d0,a0
    ac54:	|   move.l a0,-(sp)
    ac56:	|   jsr 1753e <__floatsisf>
    ac5c:	|   addq.l #4,sp
    ac5e:	|   move.l d0,-(sp)
    ac60:	|   move.l d2,-(sp)
    ac62:	|   jsr 173f4 <__divsf3>
    ac68:	|   addq.l #8,sp
    ac6a:	|   movea.l 8(sp),a0
    ac6e:	|   move.l d0,32(a0)
}
    ac72:	'-> nop
    ac74:	    move.l (sp)+,d2
    ac76:	    rts

0000ac78 <removeOneCharacter>:

void removeOneCharacter (int i) {
    ac78:	          lea -16(sp),sp
    ac7c:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    ac7e:	          move.l 24(sp),-(sp)
    ac82:	          jsr a4a2 <findPerson>
    ac88:	          addq.l #4,sp
    ac8a:	          move.l d0,8(sp)

    if (p) {
    ac8e:	,-------- beq.w ad6e <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    ac92:	|         move.l 1c920 <overRegion>,d0
    ac98:	|         cmpi.l #116852,d0
    ac9e:	|     ,-- bne.s acbc <removeOneCharacter+0x44>
    aca0:	|     |   movea.l 1c920 <overRegion>,a0
    aca6:	|     |   move.l 28(a0),d1
    acaa:	|     |   movea.l 8(sp),a0
    acae:	|     |   move.l 114(a0),d0
    acb2:	|     |   cmp.l d1,d0
    acb4:	|     +-- bne.s acbc <removeOneCharacter+0x44>
            overRegion = NULL;
    acb6:	|     |   clr.l 1c920 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    acbc:	|     '-> movea.l 8(sp),a0
    acc0:	|         move.l 68(a0),d0
    acc4:	|     ,-- beq.s acd8 <removeOneCharacter+0x60>
    acc6:	|     |   movea.l 8(sp),a0
    acca:	|     |   move.l 68(a0),d0
    acce:	|     |   move.l d0,-(sp)
    acd0:	|     |   jsr 4fac <abortFunction>
    acd6:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    acd8:	|     '-> movea.l 8(sp),a0
    acdc:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    ace0:	|         clr.l 12(sp)
    ace4:	|     ,-- bra.s ad0c <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    ace6:	|  ,--|-> movea.l 8(sp),a0
    acea:	|  |  |   movea.l 80(a0),a0
    acee:	|  |  |   move.l (a0),d1
    acf0:	|  |  |   move.l 12(sp),d0
    acf4:	|  |  |   add.l d0,d0
    acf6:	|  |  |   add.l d0,d0
    acf8:	|  |  |   movea.l d1,a0
    acfa:	|  |  |   adda.l d0,a0
    acfc:	|  |  |   move.l (a0),d0
    acfe:	|  |  |   move.l d0,-(sp)
    ad00:	|  |  |   jsr 9780 <deleteAnim>
    ad06:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    ad08:	|  |  |   addq.l #1,12(sp)
    ad0c:	|  |  '-> moveq #2,d0
    ad0e:	|  |      cmp.l 12(sp),d0
    ad12:	|  '----- bge.s ace6 <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    ad14:	|         move.l #116848,16(sp)
    ad1c:	|     ,-- bra.s ad2c <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    ad1e:	|  ,--|-> movea.l 16(sp),a0
    ad22:	|  |  |   move.l (a0),d0
    ad24:	|  |  |   moveq #36,d1
    ad26:	|  |  |   add.l d0,d1
    ad28:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    ad2c:	|  |  '-> movea.l 16(sp),a0
    ad30:	|  |      move.l (a0),d0
    ad32:	|  |      cmp.l 8(sp),d0
    ad36:	|  '----- bne.s ad1e <removeOneCharacter+0xa6>

        *killPeople = p->next;
    ad38:	|         movea.l 8(sp),a0
    ad3c:	|         move.l 36(a0),d0
    ad40:	|         movea.l 16(sp),a0
    ad44:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    ad46:	|         movea.l 8(sp),a0
    ad4a:	|         move.l 114(a0),d0
    ad4e:	|         move.l d0,-(sp)
    ad50:	|         jsr d756 <removeObjectType>
    ad56:	|         addq.l #4,sp
        FreeVec(p);
    ad58:	|         move.l 8(sp),4(sp)
    ad5e:	|         move.l 1c810 <SysBase>,d0
    ad64:	|         movea.l d0,a6
    ad66:	|         movea.l 4(sp),a1
    ad6a:	|         jsr -690(a6)
		
    }
}
    ad6e:	'-------> nop
    ad70:	          movea.l (sp)+,a6
    ad72:	          lea 16(sp),sp
    ad76:	          rts

0000ad78 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    ad78:	       subq.l #8,sp
    ad7a:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    ad7c:	       movea.l 16(sp),a0
    ad80:	       movea.l 80(a0),a0
    ad84:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    ad8a:	       movea.l 16(sp),a0
    ad8e:	       move.l 92(a0),d2
    ad92:	       move.l 4(sp),-(sp)
    ad96:	       pea b4 <_start+0xb4>
    ad9a:	       jsr 17b16 <__divsi3>
    ada0:	       addq.l #8,sp
    ada2:	       add.l d2,d0
    ada4:	       move.l d0,d1
    ada6:	       addi.l #180,d1
    adac:	       movea.l 16(sp),a0
    adb0:	       move.l 100(a0),d0
    adb4:	       move.l d1,d2
    adb6:	       add.l d0,d2
    adb8:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    adbc:	   ,-- bra.s adc6 <rethinkAngle+0x4e>
    adbe:	,--|-> addi.l #-360,8(sp)
    adc6:	|  '-> cmpi.l #359,8(sp)
    adce:	'----- bgt.s adbe <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    add0:	       move.l 4(sp),-(sp)
    add4:	       move.l 12(sp),-(sp)
    add8:	       jsr 17a98 <__mulsi3>
    adde:	       addq.l #8,sp
    ade0:	       pea 168 <decodeFilename+0x50>
    ade4:	       move.l d0,-(sp)
    ade6:	       jsr 17b16 <__divsi3>
    adec:	       addq.l #8,sp
    adee:	       movea.l 16(sp),a0
    adf2:	       move.l d0,106(a0)
}
    adf6:	       nop
    adf8:	       move.l (sp)+,d2
    adfa:	       addq.l #8,sp
    adfc:	       rts

0000adfe <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    adfe:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    ae00:	          movea.l 8(sp),a0
    ae04:	          move.l 8(a0),d0
    ae08:	          move.l 12(sp),-(sp)
    ae0c:	          move.l d0,-(sp)
    ae0e:	          jsr 8d0 <put2bytes>
    ae14:	          addq.l #8,sp
	if (p -> numFrames) {
    ae16:	          movea.l 8(sp),a0
    ae1a:	          move.l 8(a0),d0
    ae1e:	,-------- beq.w aec2 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    ae22:	|         movea.l 8(sp),a0
    ae26:	|         movea.l (a0),a0
    ae28:	|         move.l (a0),d0
    ae2a:	|         move.l 12(sp),-(sp)
    ae2e:	|         move.l d0,-(sp)
    ae30:	|         jsr 958 <put4bytes>
    ae36:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    ae38:	|         clr.l (sp)
    ae3a:	|     ,-- bra.s aeb4 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    ae3c:	|  ,--|-> movea.l 8(sp),a0
    ae40:	|  |  |   movea.l 4(a0),a0
    ae44:	|  |  |   move.l (sp),d1
    ae46:	|  |  |   move.l d1,d0
    ae48:	|  |  |   add.l d0,d0
    ae4a:	|  |  |   add.l d1,d0
    ae4c:	|  |  |   add.l d0,d0
    ae4e:	|  |  |   add.l d0,d0
    ae50:	|  |  |   adda.l d0,a0
    ae52:	|  |  |   move.l (a0),d0
    ae54:	|  |  |   move.l 12(sp),-(sp)
    ae58:	|  |  |   move.l d0,-(sp)
    ae5a:	|  |  |   jsr 958 <put4bytes>
    ae60:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    ae62:	|  |  |   movea.l 8(sp),a0
    ae66:	|  |  |   movea.l 4(a0),a0
    ae6a:	|  |  |   move.l (sp),d1
    ae6c:	|  |  |   move.l d1,d0
    ae6e:	|  |  |   add.l d0,d0
    ae70:	|  |  |   add.l d1,d0
    ae72:	|  |  |   add.l d0,d0
    ae74:	|  |  |   add.l d0,d0
    ae76:	|  |  |   adda.l d0,a0
    ae78:	|  |  |   move.l 4(a0),d0
    ae7c:	|  |  |   move.l 12(sp),-(sp)
    ae80:	|  |  |   move.l d0,-(sp)
    ae82:	|  |  |   jsr 958 <put4bytes>
    ae88:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    ae8a:	|  |  |   movea.l 8(sp),a0
    ae8e:	|  |  |   movea.l 4(a0),a0
    ae92:	|  |  |   move.l (sp),d1
    ae94:	|  |  |   move.l d1,d0
    ae96:	|  |  |   add.l d0,d0
    ae98:	|  |  |   add.l d1,d0
    ae9a:	|  |  |   add.l d0,d0
    ae9c:	|  |  |   add.l d0,d0
    ae9e:	|  |  |   adda.l d0,a0
    aea0:	|  |  |   move.l 8(a0),d0
    aea4:	|  |  |   move.l 12(sp),-(sp)
    aea8:	|  |  |   move.l d0,-(sp)
    aeaa:	|  |  |   jsr 958 <put4bytes>
    aeb0:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    aeb2:	|  |  |   addq.l #1,(sp)
    aeb4:	|  |  '-> movea.l 8(sp),a0
    aeb8:	|  |      move.l 8(a0),d0
    aebc:	|  |      cmp.l (sp),d0
    aebe:	|  '----- bgt.w ae3c <saveAnim+0x3e>
		}
	}
	return TRUE;
    aec2:	'-------> moveq #1,d0
}
    aec4:	          addq.l #4,sp
    aec6:	          rts

0000aec8 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    aec8:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    aeca:	             movea.l 8(sp),a0
    aece:	             move.l 4(a0),d0
    aed2:	             move.l 12(sp),-(sp)
    aed6:	             move.l d0,-(sp)
    aed8:	             jsr 8d0 <put2bytes>
    aede:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    aee0:	             clr.l (sp)
    aee2:	   ,-------- bra.s af0e <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    aee4:	,--|-------> movea.l 8(sp),a0
    aee8:	|  |         move.l (a0),d1
    aeea:	|  |         move.l (sp),d0
    aeec:	|  |         add.l d0,d0
    aeee:	|  |         add.l d0,d0
    aef0:	|  |         movea.l d1,a0
    aef2:	|  |         adda.l d0,a0
    aef4:	|  |         move.l (a0),d0
    aef6:	|  |         move.l 12(sp),-(sp)
    aefa:	|  |         move.l d0,-(sp)
    aefc:	|  |         jsr adfe <saveAnim>
    af02:	|  |         addq.l #8,sp
    af04:	|  |         tst.w d0
    af06:	|  |     ,-- bne.s af0c <saveCostume+0x44>
    af08:	|  |     |   clr.w d0
    af0a:	|  |  ,--|-- bra.s af22 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    af0c:	|  |  |  '-> addq.l #1,(sp)
    af0e:	|  '--|----> movea.l 8(sp),a0
    af12:	|     |      move.l 4(a0),d1
    af16:	|     |      move.l d1,d0
    af18:	|     |      add.l d0,d0
    af1a:	|     |      add.l d1,d0
    af1c:	|     |      cmp.l (sp),d0
    af1e:	'-----|----- bgt.s aee4 <saveCostume+0x1c>
	}

	return TRUE;
    af20:	      |      moveq #1,d0
}
    af22:	      '----> addq.l #4,sp
    af24:	             rts

0000af26 <savePeople>:

BOOL savePeople (BPTR fp) {
    af26:	             lea -144(sp),sp
    af2a:	             move.l a6,-(sp)
    af2c:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    af2e:	             move.l 1c870 <allPeople>,148(sp)
	int countPeople = 0, a;
    af36:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    af3a:	             move.w 1c196 <scaleHorizon>,d0
    af40:	             movea.w d0,a0
    af42:	             move.l 156(sp),-(sp)
    af46:	             move.l a0,-(sp)
    af48:	             jsr a9c <putSigned>
    af4e:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    af50:	             move.w 1c198 <scaleDivide>,d0
    af56:	             movea.w d0,a0
    af58:	             move.l 156(sp),-(sp)
    af5c:	             move.l a0,-(sp)
    af5e:	             jsr a9c <putSigned>
    af64:	             addq.l #8,sp

	while (me) {
    af66:	         ,-- bra.s af76 <savePeople+0x50>
		countPeople ++;
    af68:	      ,--|-> addq.l #1,144(sp)
		me = me -> next;
    af6c:	      |  |   movea.l 148(sp),a0
    af70:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    af76:	      |  '-> tst.l 148(sp)
    af7a:	      '----- bne.s af68 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    af7c:	             move.l 156(sp),-(sp)
    af80:	             move.l 148(sp),-(sp)
    af84:	             jsr 8d0 <put2bytes>
    af8a:	             addq.l #8,sp

	me = allPeople;
    af8c:	             move.l 1c870 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    af94:	             clr.l 140(sp)
    af98:	   ,-------- bra.w b3f0 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    af9c:	,--|-------> movea.l 148(sp),a0
    afa0:	|  |         move.l (a0),d0
    afa2:	|  |         move.l 156(sp),-(sp)
    afa6:	|  |         move.l d0,-(sp)
    afa8:	|  |         jsr a46 <putFloat>
    afae:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    afb0:	|  |         movea.l 148(sp),a0
    afb4:	|  |         move.l 4(a0),d0
    afb8:	|  |         move.l 156(sp),-(sp)
    afbc:	|  |         move.l d0,-(sp)
    afbe:	|  |         jsr a46 <putFloat>
    afc4:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    afc6:	|  |         movea.l 148(sp),a0
    afca:	|  |         move.l 80(a0),d0
    afce:	|  |         move.l 156(sp),-(sp)
    afd2:	|  |         move.l d0,-(sp)
    afd4:	|  |         jsr aec8 <saveCostume>
    afda:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    afdc:	|  |         movea.l 148(sp),a0
    afe0:	|  |         move.l 72(a0),d0
    afe4:	|  |         move.l 156(sp),-(sp)
    afe8:	|  |         move.l d0,-(sp)
    afea:	|  |         jsr adfe <saveAnim>
    aff0:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    aff2:	|  |         move.l 156(sp),136(sp)
    aff8:	|  |         movea.l 148(sp),a0
    affc:	|  |         move.l 72(a0),d1
    b000:	|  |         movea.l 148(sp),a0
    b004:	|  |         move.l 76(a0),d0
    b008:	|  |         cmp.l d1,d0
    b00a:	|  |         seq d0
    b00c:	|  |         neg.b d0
    b00e:	|  |         move.b d0,d0
    b010:	|  |         andi.l #255,d0
    b016:	|  |         move.l d0,132(sp)
    b01a:	|  |         move.l 1c818 <DOSBase>,d0
    b020:	|  |         movea.l d0,a6
    b022:	|  |         move.l 136(sp),d1
    b026:	|  |         move.l 132(sp),d2
    b02a:	|  |         jsr -312(a6)
    b02e:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    b032:	|  |         movea.l 148(sp),a0
    b036:	|  |         move.l 32(a0),d0
    b03a:	|  |         move.l 156(sp),-(sp)
    b03e:	|  |         move.l d0,-(sp)
    b040:	|  |         jsr a46 <putFloat>
    b046:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    b048:	|  |         movea.l 148(sp),a0
    b04c:	|  |         move.l 118(a0),d0
    b050:	|  |         move.l 156(sp),-(sp)
    b054:	|  |         move.l d0,-(sp)
    b056:	|  |         jsr 8d0 <put2bytes>
    b05c:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    b05e:	|  |         movea.l 148(sp),a0
    b062:	|  |         move.l 20(a0),d0
    b066:	|  |         move.l 156(sp),-(sp)
    b06a:	|  |         move.l d0,-(sp)
    b06c:	|  |         jsr 8d0 <put2bytes>
    b072:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    b074:	|  |         movea.l 148(sp),a0
    b078:	|  |         move.l 40(a0),d0
    b07c:	|  |         move.l 156(sp),-(sp)
    b080:	|  |         move.l d0,-(sp)
    b082:	|  |         jsr 8d0 <put2bytes>
    b088:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    b08a:	|  |         movea.l 148(sp),a0
    b08e:	|  |         move.l 44(a0),d0
    b092:	|  |         move.l 156(sp),-(sp)
    b096:	|  |         move.l d0,-(sp)
    b098:	|  |         jsr 8d0 <put2bytes>
    b09e:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    b0a0:	|  |         movea.l 148(sp),a0
    b0a4:	|  |         move.l 48(a0),d0
    b0a8:	|  |         move.l 156(sp),-(sp)
    b0ac:	|  |         move.l d0,-(sp)
    b0ae:	|  |         jsr 8d0 <put2bytes>
    b0b4:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    b0b6:	|  |         movea.l 148(sp),a0
    b0ba:	|  |         move.l 52(a0),d0
    b0be:	|  |         move.l 156(sp),-(sp)
    b0c2:	|  |         move.l d0,-(sp)
    b0c4:	|  |         jsr 8d0 <put2bytes>
    b0ca:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    b0cc:	|  |         movea.l 148(sp),a0
    b0d0:	|  |         move.l 84(a0),d0
    b0d4:	|  |         move.l 156(sp),-(sp)
    b0d8:	|  |         move.l d0,-(sp)
    b0da:	|  |         jsr 8d0 <put2bytes>
    b0e0:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    b0e2:	|  |         movea.l 148(sp),a0
    b0e6:	|  |         move.l 88(a0),d0
    b0ea:	|  |         move.l 156(sp),-(sp)
    b0ee:	|  |         move.l d0,-(sp)
    b0f0:	|  |         jsr 8d0 <put2bytes>
    b0f6:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    b0f8:	|  |         movea.l 148(sp),a0
    b0fc:	|  |         move.l 28(a0),d0
    b100:	|  |         move.l 156(sp),-(sp)
    b104:	|  |         move.l d0,-(sp)
    b106:	|  |         jsr 8d0 <put2bytes>
    b10c:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    b10e:	|  |         movea.l 148(sp),a0
    b112:	|  |         move.l 122(a0),d0
    b116:	|  |         move.l 156(sp),-(sp)
    b11a:	|  |         move.l d0,-(sp)
    b11c:	|  |         jsr 8d0 <put2bytes>
    b122:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    b124:	|  |         movea.l 148(sp),a0
    b128:	|  |         move.l 24(a0),d0
    b12c:	|  |         move.l d0,d0
    b12e:	|  |         movea.w d0,a0
    b130:	|  |         move.l 156(sp),-(sp)
    b134:	|  |         move.l a0,-(sp)
    b136:	|  |         jsr a9c <putSigned>
    b13c:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    b13e:	|  |         move.l 156(sp),124(sp)
    b144:	|  |         movea.l 148(sp),a0
    b148:	|  |         move.w 104(a0),d0
    b14c:	|  |         movea.w d0,a0
    b14e:	|  |         move.l a0,120(sp)
    b152:	|  |         move.l 1c818 <DOSBase>,d0
    b158:	|  |         movea.l d0,a6
    b15a:	|  |         move.l 124(sp),d1
    b15e:	|  |         move.l 120(sp),d2
    b162:	|  |         jsr -312(a6)
    b166:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    b16a:	|  |         move.l 156(sp),112(sp)
    b170:	|  |         movea.l 148(sp),a0
    b174:	|  |         move.w 64(a0),d0
    b178:	|  |         movea.w d0,a0
    b17a:	|  |         move.l a0,108(sp)
    b17e:	|  |         move.l 1c818 <DOSBase>,d0
    b184:	|  |         movea.l d0,a6
    b186:	|  |         move.l 112(sp),d1
    b18a:	|  |         move.l 108(sp),d2
    b18e:	|  |         jsr -312(a6)
    b192:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    b196:	|  |         move.l 156(sp),100(sp)
    b19c:	|  |         movea.l 148(sp),a0
    b1a0:	|  |         move.w 66(a0),d0
    b1a4:	|  |         movea.w d0,a0
    b1a6:	|  |         move.l a0,96(sp)
    b1aa:	|  |         move.l 1c818 <DOSBase>,d0
    b1b0:	|  |         movea.l d0,a6
    b1b2:	|  |         move.l 100(sp),d1
    b1b6:	|  |         move.l 96(sp),d2
    b1ba:	|  |         jsr -312(a6)
    b1be:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    b1c2:	|  |         movea.l 148(sp),a0
    b1c6:	|  |         move.l 68(a0),d0
    b1ca:	|  |  ,----- beq.s b208 <savePeople+0x2e2>
			FPutC (fp, 1);
    b1cc:	|  |  |      move.l 156(sp),76(sp)
    b1d2:	|  |  |      moveq #1,d0
    b1d4:	|  |  |      move.l d0,72(sp)
    b1d8:	|  |  |      move.l 1c818 <DOSBase>,d0
    b1de:	|  |  |      movea.l d0,a6
    b1e0:	|  |  |      move.l 76(sp),d1
    b1e4:	|  |  |      move.l 72(sp),d2
    b1e8:	|  |  |      jsr -312(a6)
    b1ec:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    b1f0:	|  |  |      movea.l 148(sp),a0
    b1f4:	|  |  |      move.l 68(a0),d0
    b1f8:	|  |  |      move.l 156(sp),-(sp)
    b1fc:	|  |  |      move.l d0,-(sp)
    b1fe:	|  |  |      jsr c422 <saveFunction>
    b204:	|  |  |      addq.l #8,sp
    b206:	|  |  |  ,-- bra.s b22c <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    b208:	|  |  '--|-> move.l 156(sp),88(sp)
    b20e:	|  |     |   moveq #1,d0
    b210:	|  |     |   move.l d0,84(sp)
    b214:	|  |     |   move.l 1c818 <DOSBase>,d0
    b21a:	|  |     |   movea.l d0,a6
    b21c:	|  |     |   move.l 88(sp),d1
    b220:	|  |     |   move.l 84(sp),d2
    b224:	|  |     |   jsr -312(a6)
    b228:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    b22c:	|  |     '-> movea.l 148(sp),a0
    b230:	|  |         move.l 106(a0),d0
    b234:	|  |         move.l 156(sp),-(sp)
    b238:	|  |         move.l d0,-(sp)
    b23a:	|  |         jsr 8d0 <put2bytes>
    b240:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    b242:	|  |         movea.l 148(sp),a0
    b246:	|  |         move.l 92(a0),d0
    b24a:	|  |         move.l 156(sp),-(sp)
    b24e:	|  |         move.l d0,-(sp)
    b250:	|  |         jsr 8d0 <put2bytes>
    b256:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    b258:	|  |         movea.l 148(sp),a0
    b25c:	|  |         move.l 100(a0),d0
    b260:	|  |         move.l 156(sp),-(sp)
    b264:	|  |         move.l d0,-(sp)
    b266:	|  |         jsr 8d0 <put2bytes>
    b26c:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    b26e:	|  |         movea.l 148(sp),a0
    b272:	|  |         move.l 96(a0),d0
    b276:	|  |         move.l 156(sp),-(sp)
    b27a:	|  |         move.l d0,-(sp)
    b27c:	|  |         jsr 8d0 <put2bytes>
    b282:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    b284:	|  |         movea.l 148(sp),a0
    b288:	|  |         move.l 110(a0),d0
    b28c:	|  |         move.l d0,d0
    b28e:	|  |         movea.w d0,a0
    b290:	|  |         move.l 156(sp),-(sp)
    b294:	|  |         move.l a0,-(sp)
    b296:	|  |         jsr a9c <putSigned>
    b29c:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    b29e:	|  |         movea.l 148(sp),a0
    b2a2:	|  |         move.l 56(a0),d0
    b2a6:	|  |         move.l d0,d0
    b2a8:	|  |         movea.w d0,a0
    b2aa:	|  |         move.l 156(sp),-(sp)
    b2ae:	|  |         move.l a0,-(sp)
    b2b0:	|  |         jsr a9c <putSigned>
    b2b6:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    b2b8:	|  |         movea.l 148(sp),a0
    b2bc:	|  |         move.l 60(a0),d0
    b2c0:	|  |         move.l d0,d0
    b2c2:	|  |         movea.w d0,a0
    b2c4:	|  |         move.l 156(sp),-(sp)
    b2c8:	|  |         move.l a0,-(sp)
    b2ca:	|  |         jsr a9c <putSigned>
    b2d0:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    b2d2:	|  |         move.l 156(sp),64(sp)
    b2d8:	|  |         movea.l 148(sp),a0
    b2dc:	|  |         move.b 126(a0),d0
    b2e0:	|  |         move.b d0,d0
    b2e2:	|  |         andi.l #255,d0
    b2e8:	|  |         move.l d0,60(sp)
    b2ec:	|  |         move.l 1c818 <DOSBase>,d0
    b2f2:	|  |         movea.l d0,a6
    b2f4:	|  |         move.l 64(sp),d1
    b2f8:	|  |         move.l 60(sp),d2
    b2fc:	|  |         jsr -312(a6)
    b300:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    b304:	|  |         move.l 156(sp),52(sp)
    b30a:	|  |         movea.l 148(sp),a0
    b30e:	|  |         move.b 127(a0),d0
    b312:	|  |         move.b d0,d0
    b314:	|  |         andi.l #255,d0
    b31a:	|  |         move.l d0,48(sp)
    b31e:	|  |         move.l 1c818 <DOSBase>,d0
    b324:	|  |         movea.l d0,a6
    b326:	|  |         move.l 52(sp),d1
    b32a:	|  |         move.l 48(sp),d2
    b32e:	|  |         jsr -312(a6)
    b332:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    b336:	|  |         move.l 156(sp),40(sp)
    b33c:	|  |         movea.l 148(sp),a0
    b340:	|  |         move.b 128(a0),d0
    b344:	|  |         move.b d0,d0
    b346:	|  |         andi.l #255,d0
    b34c:	|  |         move.l d0,36(sp)
    b350:	|  |         move.l 1c818 <DOSBase>,d0
    b356:	|  |         movea.l d0,a6
    b358:	|  |         move.l 40(sp),d1
    b35c:	|  |         move.l 36(sp),d2
    b360:	|  |         jsr -312(a6)
    b364:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    b368:	|  |         move.l 156(sp),28(sp)
    b36e:	|  |         movea.l 148(sp),a0
    b372:	|  |         move.b 129(a0),d0
    b376:	|  |         move.b d0,d0
    b378:	|  |         andi.l #255,d0
    b37e:	|  |         move.l d0,24(sp)
    b382:	|  |         move.l 1c818 <DOSBase>,d0
    b388:	|  |         movea.l d0,a6
    b38a:	|  |         move.l 28(sp),d1
    b38e:	|  |         move.l 24(sp),d2
    b392:	|  |         jsr -312(a6)
    b396:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    b39a:	|  |         move.l 156(sp),16(sp)
    b3a0:	|  |         movea.l 148(sp),a0
    b3a4:	|  |         move.b 130(a0),d0
    b3a8:	|  |         move.b d0,d0
    b3aa:	|  |         andi.l #255,d0
    b3b0:	|  |         move.l d0,12(sp)
    b3b4:	|  |         move.l 1c818 <DOSBase>,d0
    b3ba:	|  |         movea.l d0,a6
    b3bc:	|  |         move.l 16(sp),d1
    b3c0:	|  |         move.l 12(sp),d2
    b3c4:	|  |         jsr -312(a6)
    b3c8:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    b3cc:	|  |         movea.l 148(sp),a0
    b3d0:	|  |         move.l 114(a0),d0
    b3d4:	|  |         move.l 156(sp),-(sp)
    b3d8:	|  |         move.l d0,-(sp)
    b3da:	|  |         jsr d7f6 <saveObjectRef>
    b3e0:	|  |         addq.l #8,sp

		me = me -> next;
    b3e2:	|  |         movea.l 148(sp),a0
    b3e6:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    b3ec:	|  |         addq.l #1,140(sp)
    b3f0:	|  '-------> movea.l 140(sp),a0
    b3f4:	|            cmpa.l 144(sp),a0
    b3f8:	'----------- blt.w af9c <savePeople+0x76>
	}
	return TRUE;
    b3fc:	             moveq #1,d0
}
    b3fe:	             move.l (sp)+,d2
    b400:	             movea.l (sp)+,a6
    b402:	             lea 144(sp),sp
    b406:	             rts

0000b408 <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    b408:	movea.l 4(sp),a0
    b40c:	move.l 8(sp),(a0)
}
    b410:	nop
    b412:	rts

0000b414 <setDrawMode>:


void setDrawMode (int h, int ob) {
    b414:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    b416:	       move.l 12(sp),-(sp)
    b41a:	       jsr a4a2 <findPerson>
    b420:	       addq.l #4,sp
    b422:	       move.l d0,(sp)
	if (! moveMe) return;
    b424:	,----- beq.s b438 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    b426:	|      move.l 8(sp),-(sp)
    b42a:	|      move.l 4(sp),-(sp)
    b42e:	|      jsr b43e <setMyDrawMode>
    b434:	|      addq.l #8,sp
    b436:	|  ,-- bra.s b43a <setDrawMode+0x26>
	if (! moveMe) return;
    b438:	'--|-> nop
}
    b43a:	   '-> addq.l #4,sp
    b43c:	       rts

0000b43e <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    b43e:	       moveq #19,d0
    b440:	       cmp.l 8(sp),d0
    b444:	,----- bcs.w b91c <setMyDrawMode+0x4de>
    b448:	|      move.l 8(sp),d0
    b44c:	|      add.l d0,d0
    b44e:	|      movea.l d0,a0
    b450:	|      adda.l #46172,a0
    b456:	|      move.w (a0),d0
    b458:	|      jmp (b45c <setMyDrawMode+0x1e>,pc,d0.w)
    b45c:	|      .short 0x04c0
    b45e:	|      ori.l #6684712,-(a4)
    b464:	|      btst d0,-(a0)
    b466:	|      bchg d0,(a6)+
    b468:	|      bclr d0,(a4)+
    b46a:	|      bset d0,(a2)+
    b46c:	|      andi.b #84,(a6)
    b470:	|      andi.l #55575312,(a2)
    b476:	|      .short 0x02d0
    b478:	|      bclr d1,(a0)
    b47a:	|      .short 0x044a
    b47c:	|      .short 0x040c
    b47e:	|      movep.l d1,1158(a6)
    b482:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b484:	|      movea.l 4(sp),a0
    b488:	|      clr.b 128(a0)
    b48c:	|      movea.l 4(sp),a0
    b490:	|      move.b 128(a0),d0
    b494:	|      movea.l 4(sp),a0
    b498:	|      move.b d0,127(a0)
    b49c:	|      movea.l 4(sp),a0
    b4a0:	|      move.b 127(a0),d0
    b4a4:	|      movea.l 4(sp),a0
    b4a8:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    b4ac:	|      movea.l 4(sp),a0
    b4b0:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    b4b4:	|      movea.l 4(sp),a0
    b4b8:	|      move.b #64,130(a0)
			break;
    b4be:	|  ,-- bra.w b956 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b4c2:	|  |   movea.l 4(sp),a0
    b4c6:	|  |   clr.b 128(a0)
    b4ca:	|  |   movea.l 4(sp),a0
    b4ce:	|  |   move.b 128(a0),d0
    b4d2:	|  |   movea.l 4(sp),a0
    b4d6:	|  |   move.b d0,127(a0)
    b4da:	|  |   movea.l 4(sp),a0
    b4de:	|  |   move.b 127(a0),d0
    b4e2:	|  |   movea.l 4(sp),a0
    b4e6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b4ea:	|  |   movea.l 4(sp),a0
    b4ee:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    b4f2:	|  |   movea.l 4(sp),a0
    b4f6:	|  |   move.b #-128,130(a0)
			break;
    b4fc:	|  +-- bra.w b956 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b500:	|  |   movea.l 4(sp),a0
    b504:	|  |   clr.b 128(a0)
    b508:	|  |   movea.l 4(sp),a0
    b50c:	|  |   move.b 128(a0),d0
    b510:	|  |   movea.l 4(sp),a0
    b514:	|  |   move.b d0,127(a0)
    b518:	|  |   movea.l 4(sp),a0
    b51c:	|  |   move.b 127(a0),d0
    b520:	|  |   movea.l 4(sp),a0
    b524:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b528:	|  |   movea.l 4(sp),a0
    b52c:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    b530:	|  |   movea.l 4(sp),a0
    b534:	|  |   move.b #-64,130(a0)
			break;
    b53a:	|  +-- bra.w b956 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b53e:	|  |   movea.l 4(sp),a0
    b542:	|  |   clr.b 128(a0)
    b546:	|  |   movea.l 4(sp),a0
    b54a:	|  |   move.b 128(a0),d0
    b54e:	|  |   movea.l 4(sp),a0
    b552:	|  |   move.b d0,127(a0)
    b556:	|  |   movea.l 4(sp),a0
    b55a:	|  |   move.b 127(a0),d0
    b55e:	|  |   movea.l 4(sp),a0
    b562:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b566:	|  |   movea.l 4(sp),a0
    b56a:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    b56e:	|  |   movea.l 4(sp),a0
    b572:	|  |   move.b #-2,130(a0)
			break;
    b578:	|  +-- bra.w b956 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b57c:	|  |   movea.l 4(sp),a0
    b580:	|  |   clr.b 128(a0)
    b584:	|  |   movea.l 4(sp),a0
    b588:	|  |   move.b 128(a0),d0
    b58c:	|  |   movea.l 4(sp),a0
    b590:	|  |   move.b d0,127(a0)
    b594:	|  |   movea.l 4(sp),a0
    b598:	|  |   move.b 127(a0),d0
    b59c:	|  |   movea.l 4(sp),a0
    b5a0:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b5a4:	|  |   movea.l 4(sp),a0
    b5a8:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b5ae:	|  |   movea.l 4(sp),a0
    b5b2:	|  |   clr.b 130(a0)
			break;
    b5b6:	|  +-- bra.w b956 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b5ba:	|  |   movea.l 4(sp),a0
    b5be:	|  |   clr.b 128(a0)
    b5c2:	|  |   movea.l 4(sp),a0
    b5c6:	|  |   move.b 128(a0),d0
    b5ca:	|  |   movea.l 4(sp),a0
    b5ce:	|  |   move.b d0,127(a0)
    b5d2:	|  |   movea.l 4(sp),a0
    b5d6:	|  |   move.b 127(a0),d0
    b5da:	|  |   movea.l 4(sp),a0
    b5de:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b5e2:	|  |   movea.l 4(sp),a0
    b5e6:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b5ec:	|  |   movea.l 4(sp),a0
    b5f0:	|  |   clr.b 130(a0)
			break;
    b5f4:	|  +-- bra.w b956 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b5f8:	|  |   movea.l 4(sp),a0
    b5fc:	|  |   clr.b 128(a0)
    b600:	|  |   movea.l 4(sp),a0
    b604:	|  |   move.b 128(a0),d0
    b608:	|  |   movea.l 4(sp),a0
    b60c:	|  |   move.b d0,127(a0)
    b610:	|  |   movea.l 4(sp),a0
    b614:	|  |   move.b 127(a0),d0
    b618:	|  |   movea.l 4(sp),a0
    b61c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b620:	|  |   movea.l 4(sp),a0
    b624:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b62a:	|  |   movea.l 4(sp),a0
    b62e:	|  |   clr.b 130(a0)
			break;
    b632:	|  +-- bra.w b956 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b636:	|  |   movea.l 4(sp),a0
    b63a:	|  |   clr.b 128(a0)
    b63e:	|  |   movea.l 4(sp),a0
    b642:	|  |   move.b 128(a0),d0
    b646:	|  |   movea.l 4(sp),a0
    b64a:	|  |   move.b d0,127(a0)
    b64e:	|  |   movea.l 4(sp),a0
    b652:	|  |   move.b 127(a0),d0
    b656:	|  |   movea.l 4(sp),a0
    b65a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b65e:	|  |   movea.l 4(sp),a0
    b662:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b666:	|  |   movea.l 4(sp),a0
    b66a:	|  |   clr.b 130(a0)
			break;
    b66e:	|  +-- bra.w b956 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b672:	|  |   movea.l 4(sp),a0
    b676:	|  |   clr.b 128(a0)
    b67a:	|  |   movea.l 4(sp),a0
    b67e:	|  |   move.b 128(a0),d0
    b682:	|  |   movea.l 4(sp),a0
    b686:	|  |   move.b d0,127(a0)
    b68a:	|  |   movea.l 4(sp),a0
    b68e:	|  |   move.b 127(a0),d0
    b692:	|  |   movea.l 4(sp),a0
    b696:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b69a:	|  |   movea.l 4(sp),a0
    b69e:	|  |   st 129(a0)
			moveMe->transparency = 64;
    b6a2:	|  |   movea.l 4(sp),a0
    b6a6:	|  |   move.b #64,130(a0)
			break;
    b6ac:	|  +-- bra.w b956 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b6b0:	|  |   movea.l 4(sp),a0
    b6b4:	|  |   clr.b 128(a0)
    b6b8:	|  |   movea.l 4(sp),a0
    b6bc:	|  |   move.b 128(a0),d0
    b6c0:	|  |   movea.l 4(sp),a0
    b6c4:	|  |   move.b d0,127(a0)
    b6c8:	|  |   movea.l 4(sp),a0
    b6cc:	|  |   move.b 127(a0),d0
    b6d0:	|  |   movea.l 4(sp),a0
    b6d4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b6d8:	|  |   movea.l 4(sp),a0
    b6dc:	|  |   st 129(a0)
			moveMe->transparency = 128;
    b6e0:	|  |   movea.l 4(sp),a0
    b6e4:	|  |   move.b #-128,130(a0)
			break;
    b6ea:	|  +-- bra.w b956 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b6ee:	|  |   movea.l 4(sp),a0
    b6f2:	|  |   clr.b 128(a0)
    b6f6:	|  |   movea.l 4(sp),a0
    b6fa:	|  |   move.b 128(a0),d0
    b6fe:	|  |   movea.l 4(sp),a0
    b702:	|  |   move.b d0,127(a0)
    b706:	|  |   movea.l 4(sp),a0
    b70a:	|  |   move.b 127(a0),d0
    b70e:	|  |   movea.l 4(sp),a0
    b712:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b716:	|  |   movea.l 4(sp),a0
    b71a:	|  |   st 129(a0)
			moveMe->transparency = 192;
    b71e:	|  |   movea.l 4(sp),a0
    b722:	|  |   move.b #-64,130(a0)
			break;
    b728:	|  +-- bra.w b956 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b72c:	|  |   movea.l 4(sp),a0
    b730:	|  |   move.b #-128,128(a0)
    b736:	|  |   movea.l 4(sp),a0
    b73a:	|  |   move.b 128(a0),d0
    b73e:	|  |   movea.l 4(sp),a0
    b742:	|  |   move.b d0,127(a0)
    b746:	|  |   movea.l 4(sp),a0
    b74a:	|  |   move.b 127(a0),d0
    b74e:	|  |   movea.l 4(sp),a0
    b752:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b756:	|  |   movea.l 4(sp),a0
    b75a:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b760:	|  |   movea.l 4(sp),a0
    b764:	|  |   clr.b 130(a0)
			break;
    b768:	|  +-- bra.w b956 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b76c:	|  |   movea.l 4(sp),a0
    b770:	|  |   move.b #-128,128(a0)
    b776:	|  |   movea.l 4(sp),a0
    b77a:	|  |   move.b 128(a0),d0
    b77e:	|  |   movea.l 4(sp),a0
    b782:	|  |   move.b d0,127(a0)
    b786:	|  |   movea.l 4(sp),a0
    b78a:	|  |   move.b 127(a0),d0
    b78e:	|  |   movea.l 4(sp),a0
    b792:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b796:	|  |   movea.l 4(sp),a0
    b79a:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b7a0:	|  |   movea.l 4(sp),a0
    b7a4:	|  |   clr.b 130(a0)
			break;
    b7a8:	|  +-- bra.w b956 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b7ac:	|  |   movea.l 4(sp),a0
    b7b0:	|  |   move.b #-128,128(a0)
    b7b6:	|  |   movea.l 4(sp),a0
    b7ba:	|  |   move.b 128(a0),d0
    b7be:	|  |   movea.l 4(sp),a0
    b7c2:	|  |   move.b d0,127(a0)
    b7c6:	|  |   movea.l 4(sp),a0
    b7ca:	|  |   move.b 127(a0),d0
    b7ce:	|  |   movea.l 4(sp),a0
    b7d2:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b7d6:	|  |   movea.l 4(sp),a0
    b7da:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b7e0:	|  |   movea.l 4(sp),a0
    b7e4:	|  |   clr.b 130(a0)
			break;
    b7e8:	|  +-- bra.w b956 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b7ec:	|  |   movea.l 4(sp),a0
    b7f0:	|  |   move.b #-128,128(a0)
    b7f6:	|  |   movea.l 4(sp),a0
    b7fa:	|  |   move.b 128(a0),d0
    b7fe:	|  |   movea.l 4(sp),a0
    b802:	|  |   move.b d0,127(a0)
    b806:	|  |   movea.l 4(sp),a0
    b80a:	|  |   move.b 127(a0),d0
    b80e:	|  |   movea.l 4(sp),a0
    b812:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b816:	|  |   movea.l 4(sp),a0
    b81a:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b81e:	|  |   movea.l 4(sp),a0
    b822:	|  |   clr.b 130(a0)
			break;
    b826:	|  +-- bra.w b956 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b82a:	|  |   movea.l 4(sp),a0
    b82e:	|  |   st 128(a0)
    b832:	|  |   movea.l 4(sp),a0
    b836:	|  |   move.b 128(a0),d0
    b83a:	|  |   movea.l 4(sp),a0
    b83e:	|  |   move.b d0,127(a0)
    b842:	|  |   movea.l 4(sp),a0
    b846:	|  |   move.b 127(a0),d0
    b84a:	|  |   movea.l 4(sp),a0
    b84e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b852:	|  |   movea.l 4(sp),a0
    b856:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b85c:	|  |   movea.l 4(sp),a0
    b860:	|  |   clr.b 130(a0)
			break;
    b864:	|  +-- bra.w b956 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b868:	|  |   movea.l 4(sp),a0
    b86c:	|  |   st 128(a0)
    b870:	|  |   movea.l 4(sp),a0
    b874:	|  |   move.b 128(a0),d0
    b878:	|  |   movea.l 4(sp),a0
    b87c:	|  |   move.b d0,127(a0)
    b880:	|  |   movea.l 4(sp),a0
    b884:	|  |   move.b 127(a0),d0
    b888:	|  |   movea.l 4(sp),a0
    b88c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b890:	|  |   movea.l 4(sp),a0
    b894:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b89a:	|  |   movea.l 4(sp),a0
    b89e:	|  |   clr.b 130(a0)
			break;
    b8a2:	|  +-- bra.w b956 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b8a6:	|  |   movea.l 4(sp),a0
    b8aa:	|  |   st 128(a0)
    b8ae:	|  |   movea.l 4(sp),a0
    b8b2:	|  |   move.b 128(a0),d0
    b8b6:	|  |   movea.l 4(sp),a0
    b8ba:	|  |   move.b d0,127(a0)
    b8be:	|  |   movea.l 4(sp),a0
    b8c2:	|  |   move.b 127(a0),d0
    b8c6:	|  |   movea.l 4(sp),a0
    b8ca:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b8ce:	|  |   movea.l 4(sp),a0
    b8d2:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b8d8:	|  |   movea.l 4(sp),a0
    b8dc:	|  |   clr.b 130(a0)
			break;
    b8e0:	|  +-- bra.s b956 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b8e2:	|  |   movea.l 4(sp),a0
    b8e6:	|  |   st 128(a0)
    b8ea:	|  |   movea.l 4(sp),a0
    b8ee:	|  |   move.b 128(a0),d0
    b8f2:	|  |   movea.l 4(sp),a0
    b8f6:	|  |   move.b d0,127(a0)
    b8fa:	|  |   movea.l 4(sp),a0
    b8fe:	|  |   move.b 127(a0),d0
    b902:	|  |   movea.l 4(sp),a0
    b906:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b90a:	|  |   movea.l 4(sp),a0
    b90e:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b912:	|  |   movea.l 4(sp),a0
    b916:	|  |   clr.b 130(a0)
			break;
    b91a:	|  +-- bra.s b956 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b91c:	'--|-> movea.l 4(sp),a0
    b920:	   |   clr.b 128(a0)
    b924:	   |   movea.l 4(sp),a0
    b928:	   |   move.b 128(a0),d0
    b92c:	   |   movea.l 4(sp),a0
    b930:	   |   move.b d0,127(a0)
    b934:	   |   movea.l 4(sp),a0
    b938:	   |   move.b 127(a0),d0
    b93c:	   |   movea.l 4(sp),a0
    b940:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b944:	   |   movea.l 4(sp),a0
    b948:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    b94c:	   |   movea.l 4(sp),a0
    b950:	   |   clr.b 130(a0)
			break;
    b954:	   |   nop
	}
}
    b956:	   '-> nop
    b958:	       rts

0000b95a <shufflePeople>:

void shufflePeople () {
    b95a:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    b95e:	             move.l #116848,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    b966:	             move.l 1c870 <allPeople>,d0
    b96c:	,----------- beq.w ba42 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    b970:	|     ,----- bra.w ba32 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    b974:	|  ,--|----> movea.l 16(sp),a0
    b978:	|  |  |      movea.l (a0),a0
    b97a:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    b980:	|  |  |      movea.l 16(sp),a0
    b984:	|  |  |      movea.l (a0),a0
    b986:	|  |  |      move.l 118(a0),d0
    b98a:	|  |  |      moveq #1,d1
    b98c:	|  |  |      and.l d1,d0
    b98e:	|  |  |  ,-- beq.s b9a6 <shufflePeople+0x4c>
    b990:	|  |  |  |   move.l #1148846080,-(sp)
    b996:	|  |  |  |   move.l 16(sp),-(sp)
    b99a:	|  |  |  |   jsr 172fa <__addsf3>
    b9a0:	|  |  |  |   addq.l #8,sp
    b9a2:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    b9a6:	|  |  |  '-> movea.l 16(sp),a0
    b9aa:	|  |  |      movea.l (a0),a0
    b9ac:	|  |  |      movea.l 36(a0),a0
    b9b0:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    b9b6:	|  |  |      movea.l 16(sp),a0
    b9ba:	|  |  |      movea.l (a0),a0
    b9bc:	|  |  |      movea.l 36(a0),a0
    b9c0:	|  |  |      move.l 118(a0),d0
    b9c4:	|  |  |      moveq #1,d1
    b9c6:	|  |  |      and.l d1,d0
    b9c8:	|  |  |  ,-- beq.s b9e0 <shufflePeople+0x86>
    b9ca:	|  |  |  |   move.l #1148846080,-(sp)
    b9d0:	|  |  |  |   move.l 12(sp),-(sp)
    b9d4:	|  |  |  |   jsr 172fa <__addsf3>
    b9da:	|  |  |  |   addq.l #8,sp
    b9dc:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    b9e0:	|  |  |  '-> move.l 8(sp),-(sp)
    b9e4:	|  |  |      move.l 16(sp),-(sp)
    b9e8:	|  |  |      jsr 176aa <__gtsf2>
    b9ee:	|  |  |      addq.l #8,sp
    b9f0:	|  |  |      tst.l d0
    b9f2:	|  |  |  ,-- ble.s ba24 <shufflePeople+0xca>
			A = (*thisReference);
    b9f4:	|  |  |  |   movea.l 16(sp),a0
    b9f8:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    b9fc:	|  |  |  |   movea.l 16(sp),a0
    ba00:	|  |  |  |   movea.l (a0),a0
    ba02:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    ba06:	|  |  |  |   movea.l (sp),a0
    ba08:	|  |  |  |   move.l 36(a0),d0
    ba0c:	|  |  |  |   movea.l 4(sp),a0
    ba10:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    ba14:	|  |  |  |   movea.l (sp),a0
    ba16:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    ba1c:	|  |  |  |   movea.l 16(sp),a0
    ba20:	|  |  |  |   move.l (sp),(a0)
    ba22:	|  |  +--|-- bra.s ba32 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    ba24:	|  |  |  '-> movea.l 16(sp),a0
    ba28:	|  |  |      move.l (a0),d0
    ba2a:	|  |  |      moveq #36,d1
    ba2c:	|  |  |      add.l d0,d1
    ba2e:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    ba32:	|  |  '----> movea.l 16(sp),a0
    ba36:	|  |         movea.l (a0),a0
    ba38:	|  |         move.l 36(a0),d0
    ba3c:	|  '-------- bne.w b974 <shufflePeople+0x1a>
    ba40:	|        ,-- bra.s ba44 <shufflePeople+0xea>
	if (!allPeople) return;
    ba42:	'--------|-> nop
		}
	}
}
    ba44:	         '-> lea 20(sp),sp
    ba48:	             rts

0000ba4a <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    ba4a:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    ba4c:	       tst.l 8(sp)
    ba50:	   ,-- bgt.s ba56 <setCharacterWalkSpeed+0xc>
    ba52:	   |   clr.w d0
    ba54:	,--|-- bra.s ba74 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    ba56:	|  '-> move.l 12(sp),-(sp)
    ba5a:	|      jsr a4a2 <findPerson>
    ba60:	|      addq.l #4,sp
    ba62:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    ba64:	|  ,-- bne.s ba6a <setCharacterWalkSpeed+0x20>
    ba66:	|  |   clr.w d0
    ba68:	+--|-- bra.s ba74 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    ba6a:	|  '-> movea.l (sp),a0
    ba6c:	|      move.l 8(sp),28(a0)
	return TRUE;
    ba72:	|      moveq #1,d0
}
    ba74:	'----> addq.l #4,sp
    ba76:	       rts

0000ba78 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    ba78:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    ba7a:	       move.l 8(sp),-(sp)
    ba7e:	       jsr a4a2 <findPerson>
    ba84:	       addq.l #4,sp
    ba86:	       move.l d0,(sp)
    if (thisPerson) {
    ba88:	,----- beq.s baa8 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    ba8a:	|      movea.l (sp),a0
    ba8c:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    ba92:	|      moveq #2,d0
    ba94:	|      and.l 12(sp),d0
    ba98:	|  ,-- beq.s baa4 <setPersonExtra+0x2c>
    ba9a:	|  |   movea.l (sp),a0
    ba9c:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    baa4:	|  '-> moveq #1,d0
    baa6:	|  ,-- bra.s baaa <setPersonExtra+0x32>
    }
    return FALSE;
    baa8:	'--|-> clr.w d0
}
    baaa:	   '-> addq.l #4,sp
    baac:	       rts

0000baae <setScale>:


void setScale (short int h, short int d) {
    baae:	subq.l #4,sp
    bab0:	move.l 8(sp),d1
    bab4:	move.l 12(sp),d0
    bab8:	move.w d1,d1
    baba:	move.w d1,2(sp)
    babe:	move.w d0,d0
    bac0:	move.w d0,(sp)
	scaleHorizon = h;
    bac2:	move.w 2(sp),1c196 <scaleHorizon>
	scaleDivide = d;
    baca:	move.w (sp),1c198 <scaleDivide>
}
    bad0:	nop
    bad2:	addq.l #4,sp
    bad4:	rts

0000bad6 <setShown>:

void setShown (BOOL h, int ob) {
    bad6:	    subq.l #8,sp
    bad8:	    move.l 12(sp),d0
    badc:	    move.w d0,d0
    bade:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    bae2:	    move.l 16(sp),-(sp)
    bae6:	    jsr a4a2 <findPerson>
    baec:	    addq.l #4,sp
    baee:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    baf2:	,-- beq.s bafe <setShown+0x28>
    baf4:	|   movea.l 4(sp),a0
    baf8:	|   move.w 2(sp),104(a0)
}
    bafe:	'-> nop
    bb00:	    addq.l #8,sp
    bb02:	    rts

0000bb04 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    bb04:	       subq.l #8,sp
    bb06:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    bb08:	       movea.l 16(sp),a0
    bb0c:	       move.l 92(a0),d0
    bb10:	       move.l d0,d1
    bb12:	       addi.l #360,d1
    bb18:	       movea.l 16(sp),a0
    bb1c:	       move.l 96(a0),d0
    bb20:	       move.l d1,d2
    bb22:	       sub.l d0,d2
    bb24:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    bb28:	       movea.l 16(sp),a0
    bb2c:	       move.l 122(a0),d0
    bb30:	   ,-- beq.s bb3c <spinStep+0x38>
    bb32:	   |   movea.l 16(sp),a0
    bb36:	   |   move.l 122(a0),d0
    bb3a:	,--|-- bra.s bb56 <spinStep+0x52>
    bb3c:	|  '-> movea.l 16(sp),a0
    bb40:	|      movea.l 80(a0),a0
    bb44:	|      move.l 4(a0),d0
    bb48:	|      move.l d0,-(sp)
    bb4a:	|      pea 168 <decodeFilename+0x50>
    bb4e:	|      jsr 17b16 <__divsi3>
    bb54:	|      addq.l #8,sp
    bb56:	'----> move.l d0,4(sp)
	while (diff > 180) {
    bb5a:	   ,-- bra.s bb64 <spinStep+0x60>
		diff -= 360;
    bb5c:	,--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    bb64:	|  '-> cmpi.l #180,8(sp)
    bb6c:	'----- bgt.s bb5c <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    bb6e:	       move.l 8(sp),d0
    bb72:	       cmp.l 4(sp),d0
    bb76:	   ,-- blt.s bb94 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    bb78:	   |   movea.l 16(sp),a0
    bb7c:	   |   move.l 92(a0),d0
    bb80:	   |   sub.l 4(sp),d0
    bb84:	   |   move.l d0,-(sp)
    bb86:	   |   move.l 20(sp),-(sp)
    bb8a:	   |   jsr bc74 <turnMeAngle>
    bb90:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    bb92:	,--|-- bra.s bbda <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    bb94:	|  '-> move.l 4(sp),d0
    bb98:	|      neg.l d0
    bb9a:	|      cmp.l 8(sp),d0
    bb9e:	|  ,-- blt.s bbbc <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    bba0:	|  |   movea.l 16(sp),a0
    bba4:	|  |   move.l 92(a0),d0
    bba8:	|  |   add.l 4(sp),d0
    bbac:	|  |   move.l d0,-(sp)
    bbae:	|  |   move.l 20(sp),-(sp)
    bbb2:	|  |   jsr bc74 <turnMeAngle>
    bbb8:	|  |   addq.l #8,sp
}
    bbba:	+--|-- bra.s bbda <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    bbbc:	|  '-> movea.l 16(sp),a0
    bbc0:	|      move.l 96(a0),d0
    bbc4:	|      move.l d0,-(sp)
    bbc6:	|      move.l 20(sp),-(sp)
    bbca:	|      jsr bc74 <turnMeAngle>
    bbd0:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    bbd2:	|      movea.l 16(sp),a0
    bbd6:	|      clr.w 66(a0)
}
    bbda:	'----> nop
    bbdc:	       move.l (sp)+,d2
    bbde:	       addq.l #8,sp
    bbe0:	       rts

0000bbe2 <stopPerson>:


BOOL stopPerson (int o) {
    bbe2:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    bbe4:	       move.l 8(sp),-(sp)
    bbe8:	       jsr a4a2 <findPerson>
    bbee:	       addq.l #4,sp
    bbf0:	       move.l d0,(sp)
    if (moveMe)
    bbf2:	,----- beq.s bc30 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    bbf4:	|      movea.l (sp),a0
    bbf6:	|      move.l 68(a0),d0
    bbfa:	+----- beq.s bc30 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    bbfc:	|      movea.l (sp),a0
    bbfe:	|      move.l 68(a0),d0
    bc02:	|      move.l d0,-(sp)
    bc04:	|      jsr 4fac <abortFunction>
    bc0a:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    bc0c:	|      movea.l (sp),a0
    bc0e:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    bc12:	|      movea.l (sp),a0
    bc14:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    bc18:	|      movea.l (sp),a0
    bc1a:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    bc1e:	|      clr.l -(sp)
    bc20:	|      move.l 4(sp),-(sp)
    bc24:	|      jsr 414e <setFrames>
    bc2a:	|      addq.l #8,sp
            return TRUE;
    bc2c:	|      moveq #1,d0
    bc2e:	|  ,-- bra.s bc32 <stopPerson+0x50>
        }
    return FALSE;
    bc30:	'--|-> clr.w d0
}
    bc32:	   '-> addq.l #4,sp
    bc34:	       rts

0000bc36 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    bc36:	       subq.l #8,sp
	int total = 0;
    bc38:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bc3c:	       clr.l (sp)
    bc3e:	   ,-- bra.s bc60 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    bc40:	,--|-> movea.l 12(sp),a0
    bc44:	|  |   movea.l 4(a0),a0
    bc48:	|  |   move.l (sp),d1
    bc4a:	|  |   move.l d1,d0
    bc4c:	|  |   add.l d0,d0
    bc4e:	|  |   add.l d1,d0
    bc50:	|  |   add.l d0,d0
    bc52:	|  |   add.l d0,d0
    bc54:	|  |   adda.l d0,a0
    bc56:	|  |   move.l 4(a0),d0
    bc5a:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bc5e:	|  |   addq.l #1,(sp)
    bc60:	|  '-> movea.l 12(sp),a0
    bc64:	|      move.l 8(a0),d0
    bc68:	|      cmp.l (sp),d0
    bc6a:	'----- bgt.s bc40 <timeForAnim+0xa>
	}
	return total;
    bc6c:	       move.l 4(sp),d0
}
    bc70:	       addq.l #8,sp
    bc72:	       rts

0000bc74 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    bc74:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    bc76:	       movea.l 8(sp),a0
    bc7a:	       movea.l 80(a0),a0
    bc7e:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    bc82:	       movea.l 8(sp),a0
    bc86:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    bc8c:	       move.l (sp),-(sp)
    bc8e:	       pea b4 <_start+0xb4>
    bc92:	       jsr 17b16 <__divsi3>
    bc98:	       addq.l #8,sp
    bc9a:	       move.l d0,d1
    bc9c:	       addi.l #180,d1
    bca2:	       movea.l 8(sp),a0
    bca6:	       move.l 100(a0),d0
    bcaa:	       add.l d1,d0
    bcac:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    bcb0:	   ,-- bra.s bcba <turnMeAngle+0x46>
    bcb2:	,--|-> addi.l #-360,12(sp)
    bcba:	|  '-> cmpi.l #359,12(sp)
    bcc2:	'----- bgt.s bcb2 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    bcc4:	       move.l (sp),-(sp)
    bcc6:	       move.l 16(sp),-(sp)
    bcca:	       jsr 17a98 <__mulsi3>
    bcd0:	       addq.l #8,sp
    bcd2:	       pea 168 <decodeFilename+0x50>
    bcd6:	       move.l d0,-(sp)
    bcd8:	       jsr 17b16 <__divsi3>
    bcde:	       addq.l #8,sp
    bce0:	       movea.l 8(sp),a0
    bce4:	       move.l d0,106(a0)
}
    bce8:	       nop
    bcea:	       addq.l #4,sp
    bcec:	       rts

0000bcee <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    bcee:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    bcf0:	          move.l 8(sp),-(sp)
    bcf4:	          jsr a4a2 <findPerson>
    bcfa:	          addq.l #4,sp
    bcfc:	          move.l d0,(sp)
    if (thisPerson) {
    bcfe:	,-------- beq.s bd5e <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    bd00:	|         movea.l (sp),a0
    bd02:	|         move.l 68(a0),d0
    bd06:	|     ,-- beq.s bd18 <turnPersonToFace+0x2a>
    bd08:	|     |   movea.l (sp),a0
    bd0a:	|     |   move.l 68(a0),d0
    bd0e:	|     |   move.l d0,-(sp)
    bd10:	|     |   jsr 4fac <abortFunction>
    bd16:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    bd18:	|     '-> movea.l (sp),a0
    bd1a:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    bd1e:	|         movea.l (sp),a0
    bd20:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    bd24:	|         movea.l (sp),a0
    bd26:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    bd2a:	|         move.l 12(sp),-(sp)
    bd2e:	|         move.l 4(sp),-(sp)
    bd32:	|         jsr bc74 <turnMeAngle>
    bd38:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    bd3a:	|         movea.l 1c760 <speech>,a0
    bd40:	|         move.l (a0),d0
    bd42:	|         cmp.l (sp),d0
    bd44:	|  ,----- bne.s bd4a <turnPersonToFace+0x5c>
    bd46:	|  |      moveq #2,d0
    bd48:	|  |  ,-- bra.s bd4c <turnPersonToFace+0x5e>
    bd4a:	|  '--|-> moveq #0,d0
    bd4c:	|     '-> move.l d0,-(sp)
    bd4e:	|         move.l 4(sp),-(sp)
    bd52:	|         jsr 414e <setFrames>
    bd58:	|         addq.l #8,sp
        return TRUE;
    bd5a:	|         moveq #1,d0
    bd5c:	|     ,-- bra.s bd60 <turnPersonToFace+0x72>
    }
    return FALSE;
    bd5e:	'-----|-> clr.w d0
}
    bd60:	      '-> addq.l #4,sp
    bd62:	          rts

0000bd64 <walkAllPeople>:

void walkAllPeople() {
    bd64:	             subq.l #4,sp
	struct onScreenPerson *thisPerson = allPeople;
    bd66:	             move.l 1c870 <allPeople>,(sp)

	while (thisPerson) {
    bd6c:	   ,-------- bra.s bddc <walkAllPeople+0x78>
		if (thisPerson->walking) {
    bd6e:	,--|-------> movea.l (sp),a0
    bd70:	|  |         move.w 64(a0),d0
    bd74:	|  |     ,-- beq.s bd88 <walkAllPeople+0x24>
			walkMe(thisPerson, TRUE);
    bd76:	|  |     |   pea 1 <_start+0x1>
    bd7a:	|  |     |   move.l 4(sp),-(sp)
    bd7e:	|  |     |   jsr bde8 <walkMe>
    bd84:	|  |     |   addq.l #8,sp
    bd86:	|  |  ,--|-- bra.s bda8 <walkAllPeople+0x44>
		} else if (thisPerson->spinning) {
    bd88:	|  |  |  '-> movea.l (sp),a0
    bd8a:	|  |  |      move.w 66(a0),d0
    bd8e:	|  |  +----- beq.s bda8 <walkAllPeople+0x44>
			spinStep(thisPerson);
    bd90:	|  |  |      move.l (sp),-(sp)
    bd92:	|  |  |      jsr bb04 <spinStep>
    bd98:	|  |  |      addq.l #4,sp
			setFrames(thisPerson, ANI_STAND);
    bd9a:	|  |  |      clr.l -(sp)
    bd9c:	|  |  |      move.l 4(sp),-(sp)
    bda0:	|  |  |      jsr 414e <setFrames>
    bda6:	|  |  |      addq.l #8,sp
		}
		if ((!thisPerson->walking) && (!thisPerson->spinning) && thisPerson->continueAfterWalking) {
    bda8:	|  |  '----> movea.l (sp),a0
    bdaa:	|  |         move.w 64(a0),d0
    bdae:	|  |     ,-- bne.s bdd6 <walkAllPeople+0x72>
    bdb0:	|  |     |   movea.l (sp),a0
    bdb2:	|  |     |   move.w 66(a0),d0
    bdb6:	|  |     +-- bne.s bdd6 <walkAllPeople+0x72>
    bdb8:	|  |     |   movea.l (sp),a0
    bdba:	|  |     |   move.l 68(a0),d0
    bdbe:	|  |     +-- beq.s bdd6 <walkAllPeople+0x72>
			restartFunction(thisPerson->continueAfterWalking);
    bdc0:	|  |     |   movea.l (sp),a0
    bdc2:	|  |     |   move.l 68(a0),d0
    bdc6:	|  |     |   move.l d0,-(sp)
    bdc8:	|  |     |   jsr 711c <restartFunction>
    bdce:	|  |     |   addq.l #4,sp
			thisPerson->continueAfterWalking = NULL;
    bdd0:	|  |     |   movea.l (sp),a0
    bdd2:	|  |     |   clr.l 68(a0)
		}
		thisPerson = thisPerson->next;
    bdd6:	|  |     '-> movea.l (sp),a0
    bdd8:	|  |         move.l 36(a0),(sp)
	while (thisPerson) {
    bddc:	|  '-------> tst.l (sp)
    bdde:	'----------- bne.s bd6e <walkAllPeople+0xa>
	}
}
    bde0:	             nop
    bde2:	             nop
    bde4:	             addq.l #4,sp
    bde6:	             rts

0000bde8 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    bde8:	                lea -20(sp),sp
    bdec:	                move.l d3,-(sp)
    bdee:	                move.l d2,-(sp)
    bdf0:	                move.l 36(sp),d0
    bdf4:	                move.w d0,d0
    bdf6:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    bdfa:	                cmpi.w #-1,10(sp)
    be00:	,-------------- bne.s be08 <walkMe+0x20>
    be02:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    be08:	>-------------> movea.l 32(sp),a0
    be0c:	|               move.l 48(a0),d0
    be10:	|               move.l d0,-(sp)
    be12:	|               jsr 1753e <__floatsisf>
    be18:	|               addq.l #4,sp
    be1a:	|               move.l d0,d1
    be1c:	|               movea.l 32(sp),a0
    be20:	|               move.l (a0),d0
    be22:	|               move.l d0,-(sp)
    be24:	|               move.l d1,-(sp)
    be26:	|               jsr 17832 <__subsf3>
    be2c:	|               addq.l #8,sp
    be2e:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    be32:	|               movea.l 32(sp),a0
    be36:	|               move.l 52(a0),d0
    be3a:	|               move.l d0,-(sp)
    be3c:	|               jsr 1753e <__floatsisf>
    be42:	|               addq.l #4,sp
    be44:	|               move.l d0,d1
    be46:	|               movea.l 32(sp),a0
    be4a:	|               move.l 4(a0),d0
    be4e:	|               move.l d0,-(sp)
    be50:	|               move.l d1,-(sp)
    be52:	|               jsr 17832 <__subsf3>
    be58:	|               addq.l #8,sp
    be5a:	|               move.l d0,-(sp)
    be5c:	|               move.l d0,-(sp)
    be5e:	|               jsr 172fa <__addsf3>
    be64:	|               addq.l #8,sp
    be66:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    be6a:	|               movea.l 32(sp),a0
    be6e:	|               move.l 32(a0),d2
    be72:	|               movea.l 32(sp),a0
    be76:	|               move.l 28(a0),d0
    be7a:	|               move.l d0,-(sp)
    be7c:	|               jsr 1753e <__floatsisf>
    be82:	|               addq.l #4,sp
    be84:	|               move.l d0,-(sp)
    be86:	|               move.l d2,-(sp)
    be88:	|               jsr 175f0 <__mulsf3>
    be8e:	|               addq.l #8,sp
    be90:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    be94:	|               move.l 24(sp),-(sp)
    be98:	|               jsr 17460 <__extendsfdf2>
    be9e:	|               addq.l #4,sp
    bea0:	|               move.l #-1717986918,-(sp)
    bea6:	|               move.l #1070176665,-(sp)
    beac:	|               move.l d1,-(sp)
    beae:	|               move.l d0,-(sp)
    beb0:	|               jsr 17716 <__ltdf2>
    beb6:	|               lea 16(sp),sp
    beba:	|               tst.l d0
    bebc:	|           ,-- bge.s bec6 <walkMe+0xde>
    bebe:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    bec6:	|           '-> move.l 20(sp),-(sp)
    beca:	|               jsr 174d6 <__fixsfsi>
    bed0:	|               addq.l #4,sp
    bed2:	|               move.l d0,-(sp)
    bed4:	|               jsr 9092 <TF_abs>
    beda:	|               addq.l #4,sp
    bedc:	|               move.l d0,d2
    bede:	|               move.l 16(sp),-(sp)
    bee2:	|               jsr 174d6 <__fixsfsi>
    bee8:	|               addq.l #4,sp
    beea:	|               move.l d0,-(sp)
    beec:	|               jsr 9092 <TF_abs>
    bef2:	|               addq.l #4,sp
    bef4:	|               cmp.l d2,d0
    bef6:	|        ,----- bgt.s bf1a <walkMe+0x132>
    bef8:	|        |      move.l 20(sp),-(sp)
    befc:	|        |      jsr 174d6 <__fixsfsi>
    bf02:	|        |      addq.l #4,sp
    bf04:	|        |      move.l d0,-(sp)
    bf06:	|        |      jsr 9092 <TF_abs>
    bf0c:	|        |      addq.l #4,sp
    bf0e:	|        |      move.l d0,-(sp)
    bf10:	|        |      jsr 1753e <__floatsisf>
    bf16:	|        |      addq.l #4,sp
    bf18:	|        |  ,-- bra.s bf3a <walkMe+0x152>
    bf1a:	|        '--|-> move.l 16(sp),-(sp)
    bf1e:	|           |   jsr 174d6 <__fixsfsi>
    bf24:	|           |   addq.l #4,sp
    bf26:	|           |   move.l d0,-(sp)
    bf28:	|           |   jsr 9092 <TF_abs>
    bf2e:	|           |   addq.l #4,sp
    bf30:	|           |   move.l d0,-(sp)
    bf32:	|           |   jsr 1753e <__floatsisf>
    bf38:	|           |   addq.l #4,sp
    bf3a:	|           '-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    bf3e:	|               move.l 12(sp),-(sp)
    bf42:	|               jsr 174d6 <__fixsfsi>
    bf48:	|               addq.l #4,sp
    bf4a:	|               move.l d0,-(sp)
    bf4c:	|               jsr 9092 <TF_abs>
    bf52:	|               addq.l #4,sp
    bf54:	|               move.l d0,-(sp)
    bf56:	|               jsr 1753e <__floatsisf>
    bf5c:	|               addq.l #4,sp
    bf5e:	|               move.l d0,-(sp)
    bf60:	|               move.l 28(sp),-(sp)
    bf64:	|               jsr 17764 <__ltsf2>
    bf6a:	|               addq.l #8,sp
    bf6c:	|               tst.l d0
    bf6e:	|        ,----- bge.w c020 <walkMe+0x238>
			if (thisPerson->spinning) {
    bf72:	|        |      movea.l 32(sp),a0
    bf76:	|        |      move.w 66(a0),d0
    bf7a:	|        |  ,-- beq.s bf98 <walkMe+0x1b0>
				spinStep(thisPerson);
    bf7c:	|        |  |   move.l 32(sp),-(sp)
    bf80:	|        |  |   jsr bb04 <spinStep>
    bf86:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    bf88:	|        |  |   pea 1 <_start+0x1>
    bf8c:	|        |  |   move.l 36(sp),-(sp)
    bf90:	|        |  |   jsr 414e <setFrames>
    bf96:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    bf98:	|        |  '-> move.l 24(sp),-(sp)
    bf9c:	|        |      move.l 16(sp),-(sp)
    bfa0:	|        |      jsr 173f4 <__divsf3>
    bfa6:	|        |      addq.l #8,sp
    bfa8:	|        |      move.l d0,24(sp)
			if (move)
    bfac:	|        |      tst.w 10(sp)
    bfb0:	|        |  ,-- beq.s c01a <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    bfb2:	|        |  |   movea.l 32(sp),a0
    bfb6:	|        |  |   move.l 4(a0),d2
    bfba:	|        |  |   move.l 24(sp),d0
    bfbe:	|        |  |   move.l d0,-(sp)
    bfc0:	|        |  |   move.l d0,-(sp)
    bfc2:	|        |  |   jsr 172fa <__addsf3>
    bfc8:	|        |  |   addq.l #8,sp
    bfca:	|        |  |   move.l d0,-(sp)
    bfcc:	|        |  |   move.l 20(sp),-(sp)
    bfd0:	|        |  |   jsr 173f4 <__divsf3>
    bfd6:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    bfd8:	|        |  |   move.l d0,-(sp)
    bfda:	|        |  |   move.l d2,-(sp)
    bfdc:	|        |  |   jsr 172fa <__addsf3>
    bfe2:	|        |  |   addq.l #8,sp
    bfe4:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    bfe6:	|        |  |   movea.l 32(sp),a0
    bfea:	|        |  |   move.l (a0),d3
    bfec:	|        |  |   move.l 24(sp),-(sp)
    bff0:	|        |  |   move.l 24(sp),-(sp)
    bff4:	|        |  |   jsr 173f4 <__divsf3>
    bffa:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    bffc:	|        |  |   move.l d0,-(sp)
    bffe:	|        |  |   move.l d3,-(sp)
    c000:	|        |  |   jsr 172fa <__addsf3>
    c006:	|        |  |   addq.l #8,sp
    c008:	|        |  |   move.l d2,-(sp)
    c00a:	|        |  |   move.l d0,-(sp)
    c00c:	|        |  |   move.l 40(sp),-(sp)
    c010:	|        |  |   jsr abea <moveAndScale>
    c016:	|        |  |   lea 12(sp),sp
			return TRUE;
    c01a:	|        |  '-> moveq #1,d0
    c01c:	|  ,-----|----- bra.w c0ce <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    c020:	|  |     '----> movea.l 32(sp),a0
    c024:	|  |            move.l 56(a0),d0
    c028:	|  |            moveq #-1,d1
    c02a:	|  |            cmp.l d0,d1
    c02c:	|  |        ,-- bne.s c064 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    c02e:	|  |        |   movea.l 32(sp),a0
    c032:	|  |        |   move.l 110(a0),d0
    c036:	|  |        |   moveq #-1,d1
    c038:	|  |        |   cmp.l d0,d1
    c03a:	|  |  ,-----|-- beq.s c078 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    c03c:	|  |  |     |   movea.l 32(sp),a0
    c040:	|  |  |     |   move.l 110(a0),d0
    c044:	|  |  |     |   movea.l 32(sp),a0
    c048:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    c04c:	|  |  |     |   movea.l 32(sp),a0
    c050:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    c056:	|  |  |     |   move.l 32(sp),-(sp)
    c05a:	|  |  |     |   jsr bb04 <spinStep>
    c060:	|  |  |     |   addq.l #4,sp
			}
			break;
    c062:	|  |  +-----|-- bra.s c078 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    c064:	|  |  |     '-> move.l 32(sp),-(sp)
    c068:	|  |  |         jsr 9804 <doBorderStuff>
    c06e:	|  |  |         addq.l #4,sp
    c070:	|  |  |         tst.w d0
    c072:	|  |  |  ,----- beq.s c07c <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c074:	'--|--|--|----- bra.w be08 <walkMe+0x20>
			break;
    c078:	   |  '--|----> nop
    c07a:	   |     |  ,-- bra.s c07e <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    c07c:	   |     '--|-> nop
	}

	thisPerson->walking = FALSE;
    c07e:	   |        '-> movea.l 32(sp),a0
    c082:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    c086:	   |            clr.l -(sp)
    c088:	   |            move.l 36(sp),-(sp)
    c08c:	   |            jsr 414e <setFrames>
    c092:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    c094:	   |            movea.l 32(sp),a0
    c098:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    c09c:	   |            move.l d0,-(sp)
    c09e:	   |            jsr 1753e <__floatsisf>
    c0a4:	   |            addq.l #4,sp
    c0a6:	   |            move.l d0,d2
				 thisPerson->walkToX,
    c0a8:	   |            movea.l 32(sp),a0
    c0ac:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    c0b0:	   |            move.l d0,-(sp)
    c0b2:	   |            jsr 1753e <__floatsisf>
    c0b8:	   |            addq.l #4,sp
    c0ba:	   |            move.l d2,-(sp)
    c0bc:	   |            move.l d0,-(sp)
    c0be:	   |            move.l 40(sp),-(sp)
    c0c2:	   |            jsr abea <moveAndScale>
    c0c8:	   |            lea 12(sp),sp
	return FALSE;
    c0cc:	   |            clr.w d0
}
    c0ce:	   '----------> move.l (sp)+,d2
    c0d0:	                move.l (sp)+,d3
    c0d2:	                lea 20(sp),sp
    c0d6:	                rts

0000c0d8 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    c0d8:	       subq.l #8,sp
    c0da:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    c0dc:	   ,-- bra.s c10c <clearStackLib+0x34>
		k = stackLib;
    c0de:	,--|-> move.l 1c89c <stackLib>,8(sp)
		stackLib = stackLib -> next;
    c0e6:	|  |   movea.l 1c89c <stackLib>,a0
    c0ec:	|  |   move.l 4(a0),d0
    c0f0:	|  |   move.l d0,1c89c <stackLib>
		FreeVec(k);
    c0f6:	|  |   move.l 8(sp),4(sp)
    c0fc:	|  |   move.l 1c810 <SysBase>,d0
    c102:	|  |   movea.l d0,a6
    c104:	|  |   movea.l 4(sp),a1
    c108:	|  |   jsr -690(a6)
	while (stackLib) {
    c10c:	|  '-> move.l 1c89c <stackLib>,d0
    c112:	'----- bne.s c0de <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    c114:	       clr.l 1c898 <stackLibTotal>
}
    c11a:	       nop
    c11c:	       movea.l (sp)+,a6
    c11e:	       addq.l #8,sp
    c120:	       rts

0000c122 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    c122:	          lea -128(sp),sp
    c126:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    c12a:	      ,-- bra.s c13c <loadGame+0x1a>
    c12c:	   ,--|-> move.l 1c7a8 <allRunningFunctions>,d0
    c132:	   |  |   move.l d0,-(sp)
    c134:	   |  |   jsr 5fb4 <finishFunction>
    c13a:	   |  |   addq.l #4,sp
    c13c:	   |  '-> move.l 1c7a8 <allRunningFunctions>,d0
    c142:	   '----- bne.s c12c <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    c144:	          pea 1c8a0 <ssgVersion>
    c14a:	          pea 19120 <PutChar+0x1572>
    c150:	          pea 41 <_start+0x41>
    c154:	          pea 53 <_start+0x53>
    c158:	          move.l 160(sp),-(sp)
    c15c:	          jsr 6d6a <openAndVerify>
    c162:	          lea 20(sp),sp
    c166:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    c16a:	      ,-- bne.s c172 <loadGame+0x50>
    c16c:	      |   clr.w d0
    c16e:	,-----|-- bra.w c418 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    c172:	|     '-> move.l 112(sp),108(sp)
    c178:	|         lea 140(sp),a0
    c17c:	|         lea -126(a0),a0
    c180:	|         move.l a0,120(sp)
    c184:	|         moveq #8,d0
    c186:	|         move.l d0,116(sp)
    c18a:	|         move.l 1c818 <DOSBase>,d0
    c190:	|         movea.l d0,a6
    c192:	|         move.l 108(sp),d1
    c196:	|         move.l 120(sp),d2
    c19a:	|         move.l 116(sp),d3
    c19e:	|         jsr -42(a6)
    c1a2:	|         move.l d0,132(sp)
    c1a6:	|         move.l 132(sp),d0
    c1aa:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    c1ae:	|         moveq #8,d0
    c1b0:	|         cmp.l 128(sp),d0
    c1b4:	|     ,-- beq.s c1c4 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    c1b6:	|     |   pea 19141 <PutChar+0x1593>
    c1bc:	|     |   jsr 1710c <KPrintF>
    c1c2:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c1c4:	|     '-> move.l 14(sp),d1
    c1c8:	|         move.l 1c7b2 <fileTime>,d0
    c1ce:	|         cmp.l d1,d0
    c1d0:	|     ,-- bne.s c1e0 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    c1d2:	|     |   move.l 18(sp),d1
    c1d6:	|     |   move.l 1c7b6 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c1dc:	|     |   cmp.l d1,d0
    c1de:	|  ,--|-- beq.s c200 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    c1e0:	|  |  '-> move.l 144(sp),-(sp)
    c1e4:	|  |      pea 1915d <PutChar+0x15af>
    c1ea:	|  |      pea 19224 <PutChar+0x1676>
    c1f0:	|  |      jsr 1710c <KPrintF>
    c1f6:	|  |      lea 12(sp),sp
		return FALSE; 
    c1fa:	|  |      clr.w d0
    c1fc:	+--|----- bra.w c418 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    c200:	|  '----> move.l 112(sp),124(sp)
    c206:	|         move.l 1c818 <DOSBase>,d0
    c20c:	|         movea.l d0,a6
    c20e:	|         move.l 124(sp),d1
    c212:	|         jsr -306(a6)
    c216:	|         move.l d0,136(sp)
    c21a:	|         move.l 136(sp),d0
    c21e:	|         move.l d0,d0
    c220:	|         move.w d0,1c060 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    c226:	|         move.l 112(sp),100(sp)
    c22c:	|         move.l 1c818 <DOSBase>,d0
    c232:	|         movea.l d0,a6
    c234:	|         move.l 100(sp),d1
    c238:	|         jsr -306(a6)
    c23c:	|         move.l d0,96(sp)
    c240:	|         move.l 96(sp),d0
    c244:	|         move.l d0,d0
    c246:	|         move.w d0,1c7b0 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    c24c:	|         move.l 112(sp),92(sp)
    c252:	|         move.l 1c818 <DOSBase>,d0
    c258:	|         movea.l d0,a6
    c25a:	|         move.l 92(sp),d1
    c25e:	|         jsr -306(a6)
    c262:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    c266:	|         move.l 112(sp),84(sp)
    c26c:	|         move.l 1c818 <DOSBase>,d0
    c272:	|         movea.l d0,a6
    c274:	|         move.l 84(sp),d1
    c278:	|         jsr -306(a6)
    c27c:	|         move.l d0,80(sp)
    c280:	|         move.l 80(sp),d0
    c284:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    c288:	|     ,-- beq.s c2bc <loadGame+0x19a>
		fontNum = get2bytes (fp);
    c28a:	|     |   move.l 112(sp),-(sp)
    c28e:	|     |   jsr 6bc <get2bytes>
    c294:	|     |   addq.l #4,sp
    c296:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    c29a:	|     |   move.l 112(sp),-(sp)
    c29e:	|     |   jsr 6bc <get2bytes>
    c2a4:	|     |   addq.l #4,sp
    c2a6:	|     |   move.l d0,1c904 <fontHeight>
		charOrder = readString(fp);		
    c2ac:	|     |   move.l 112(sp),-(sp)
    c2b0:	|     |   jsr b02 <readString>
    c2b6:	|     |   addq.l #4,sp
    c2b8:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    c2bc:	|     '-> move.l 104(sp),70(sp)
    c2c2:	|         move.l 1c810 <SysBase>,d0
    c2c8:	|         movea.l d0,a6
    c2ca:	|         movea.l 70(sp),a1
    c2ce:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    c2d2:	|         move.l 112(sp),-(sp)
    c2d6:	|         jsr 854 <getSigned>
    c2dc:	|         addq.l #4,sp
    c2de:	|         move.w d0,1c708 <fontSpace>

	killAllPeople ();
    c2e4:	|         jsr a88c <killAllPeople>
	killAllRegions ();
    c2ea:	|         jsr 15938 <killAllRegions>

	int camerX = get2bytes (fp);
    c2f0:	|         move.l 112(sp),-(sp)
    c2f4:	|         jsr 6bc <get2bytes>
    c2fa:	|         addq.l #4,sp
    c2fc:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    c300:	|         move.l 112(sp),-(sp)
    c304:	|         jsr 6bc <get2bytes>
    c30a:	|         addq.l #4,sp
    c30c:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    c310:	|         move.l 112(sp),-(sp)
    c314:	|         jsr 7d8 <getFloat>
    c31a:	|         addq.l #4,sp
    c31c:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    c320:	|         move.l 112(sp),54(sp)
    c326:	|         move.l 1c818 <DOSBase>,d0
    c32c:	|         movea.l d0,a6
    c32e:	|         move.l 54(sp),d1
    c332:	|         jsr -306(a6)
    c336:	|         move.l d0,50(sp)
    c33a:	|         move.l 50(sp),d0
    c33e:	|         move.l d0,d0
    c340:	|         move.b d0,1c17e <brightnessLevel>

	loadHandlers (fp);
    c346:	|         move.l 112(sp),-(sp)
    c34a:	|         jsr 6cca <loadHandlers>
    c350:	|         addq.l #4,sp
	loadRegions (fp);
    c352:	|         move.l 112(sp),-(sp)
    c356:	|         jsr 15994 <loadRegions>
    c35c:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    c35e:	|         moveq #12,d0
    c360:	|         move.l d0,46(sp)
    c364:	|         clr.l 42(sp)
    c368:	|         move.l 1c810 <SysBase>,d0
    c36e:	|         movea.l d0,a6
    c370:	|         move.l 46(sp),d0
    c374:	|         move.l 42(sp),d1
    c378:	|         jsr -684(a6)
    c37c:	|         move.l d0,38(sp)
    c380:	|         move.l 38(sp),d0
    c384:	|         move.l d0,1c70a <mouseCursorAnim>
	if (! mouseCursorAnim) {
    c38a:	|         move.l 1c70a <mouseCursorAnim>,d0
    c390:	|     ,-- bne.s c3a4 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    c392:	|     |   pea 1922e <PutChar+0x1680>
    c398:	|     |   jsr 1710c <KPrintF>
    c39e:	|     |   addq.l #4,sp
		return FALSE;
    c3a0:	|     |   clr.w d0
    c3a2:	+-----|-- bra.s c418 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    c3a4:	|     '-> jsr d248 <nosnapshot>
	if (FGetC (fp)) {
    c3aa:	|         move.l 112(sp),34(sp)
    c3b0:	|         move.l 1c818 <DOSBase>,d0
    c3b6:	|         movea.l d0,a6
    c3b8:	|         move.l 34(sp),d1
    c3bc:	|         jsr -306(a6)
    c3c0:	|         move.l d0,30(sp)
    c3c4:	|         move.l 30(sp),d0
    c3c8:	|     ,-- beq.s c3de <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    c3ca:	|     |   move.l 112(sp),-(sp)
    c3ce:	|     |   jsr d2c8 <restoreSnapshot>
    c3d4:	|     |   addq.l #4,sp
    c3d6:	|     |   tst.w d0
    c3d8:	|     +-- bne.s c3de <loadGame+0x2bc>
    c3da:	|     |   clr.w d0
    c3dc:	+-----|-- bra.s c418 <loadGame+0x2f6>
	}

	Close (fp);
    c3de:	|     '-> move.l 112(sp),26(sp)
    c3e4:	|         move.l 1c818 <DOSBase>,d0
    c3ea:	|         movea.l d0,a6
    c3ec:	|         move.l 26(sp),d1
    c3f0:	|         jsr -36(a6)
    c3f4:	|         move.l d0,22(sp)
	clearStackLib ();
    c3f8:	|         jsr c0d8 <clearStackLib>

	cameraX = camerX;
    c3fe:	|         move.l 66(sp),1c8c6 <cameraX>
	cameraY = camerY;
    c406:	|         move.l 62(sp),1c8ca <cameraY>
	cameraZoom = camerZ;
    c40e:	|         move.l 58(sp),1c1a2 <cameraZoom>

	return TRUE;
    c416:	|         moveq #1,d0
}
    c418:	'-------> movem.l (sp)+,d2-d3/a6
    c41c:	          lea 128(sp),sp
    c420:	          rts

0000c422 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    c422:	   ,-> lea -64(sp),sp
    c426:	   |   move.l a6,-(sp)
    c428:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    c42a:	   |   movea.l 76(sp),a0
    c42e:	   |   move.l (a0),d0
    c430:	   |   move.l 80(sp),-(sp)
    c434:	   |   move.l d0,-(sp)
    c436:	   |   jsr 8d0 <put2bytes>
    c43c:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    c43e:	   |   movea.l 76(sp),a0
    c442:	   |   move.l 40(a0),d0
    c446:	,--|-- beq.s c482 <saveFunction+0x60>
		FPutC (fp, 1);
    c448:	|  |   move.l 80(sp),52(sp)
    c44e:	|  |   moveq #1,d0
    c450:	|  |   move.l d0,48(sp)
    c454:	|  |   move.l 1c818 <DOSBase>,d0
    c45a:	|  |   movea.l d0,a6
    c45c:	|  |   move.l 52(sp),d1
    c460:	|  |   move.l 48(sp),d2
    c464:	|  |   jsr -312(a6)
    c468:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    c46c:	|  |   movea.l 76(sp),a0
    c470:	|  |   move.l 40(a0),d0
    c474:	|  |   move.l 80(sp),-(sp)
    c478:	|  |   move.l d0,-(sp)
    c47a:	|  '-- jsr c422 <saveFunction>(pc)
    c47e:	|      addq.l #8,sp
    c480:	|  ,-- bra.s c4a4 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    c482:	'--|-> move.l 80(sp),64(sp)
    c488:	   |   clr.l 60(sp)
    c48c:	   |   move.l 1c818 <DOSBase>,d0
    c492:	   |   movea.l d0,a6
    c494:	   |   move.l 64(sp),d1
    c498:	   |   move.l 60(sp),d2
    c49c:	   |   jsr -312(a6)
    c4a0:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    c4a4:	   '-> movea.l 76(sp),a0
    c4a8:	       move.l 12(a0),d0
    c4ac:	       move.l 80(sp),-(sp)
    c4b0:	       move.l d0,-(sp)
    c4b2:	       jsr 958 <put4bytes>
    c4b8:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    c4ba:	       movea.l 76(sp),a0
    c4be:	       move.l 36(a0),d0
    c4c2:	       move.l 80(sp),-(sp)
    c4c6:	       move.l d0,-(sp)
    c4c8:	       jsr 8d0 <put2bytes>
    c4ce:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    c4d0:	       move.l 80(sp),40(sp)
    c4d6:	       movea.l 76(sp),a0
    c4da:	       move.w 54(a0),d0
    c4de:	       movea.w d0,a0
    c4e0:	       move.l a0,36(sp)
    c4e4:	       move.l 1c818 <DOSBase>,d0
    c4ea:	       movea.l d0,a6
    c4ec:	       move.l 40(sp),d1
    c4f0:	       move.l 36(sp),d2
    c4f4:	       jsr -312(a6)
    c4f8:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    c4fc:	       move.l 80(sp),28(sp)
    c502:	       movea.l 76(sp),a0
    c506:	       move.w 48(a0),d0
    c50a:	       movea.w d0,a0
    c50c:	       move.l a0,24(sp)
    c510:	       move.l 1c818 <DOSBase>,d0
    c516:	       movea.l d0,a6
    c518:	       move.l 28(sp),d1
    c51c:	       move.l 24(sp),d2
    c520:	       jsr -312(a6)
    c524:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    c528:	       move.l 80(sp),16(sp)
    c52e:	       movea.l 76(sp),a0
    c532:	       move.w 50(a0),d0
    c536:	       movea.w d0,a0
    c538:	       move.l a0,12(sp)
    c53c:	       move.l 1c818 <DOSBase>,d0
    c542:	       movea.l d0,a6
    c544:	       move.l 16(sp),d1
    c548:	       move.l 12(sp),d2
    c54c:	       jsr -312(a6)
    c550:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    c554:	       moveq #28,d0
    c556:	       add.l 76(sp),d0
    c55a:	       move.l 80(sp),-(sp)
    c55e:	       move.l d0,-(sp)
    c560:	       jsr cc7a <saveVariable>
    c566:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    c568:	       movea.l 76(sp),a0
    c56c:	       move.b 56(a0),d0
    c570:	   ,-- beq.s c580 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    c572:	   |   pea 1924f <PutChar+0x16a1>
    c578:	   |   jsr 1710c <KPrintF>
    c57e:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    c580:	   '-> movea.l 76(sp),a0
    c584:	       move.l 24(a0),d0
    c588:	       move.l 80(sp),-(sp)
    c58c:	       move.l d0,-(sp)
    c58e:	       jsr caee <saveStack>
    c594:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c596:	       clr.l 68(sp)
    c59a:	   ,-- bra.s c5be <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    c59c:	,--|-> movea.l 76(sp),a0
    c5a0:	|  |   move.l 20(a0),d1
    c5a4:	|  |   move.l 68(sp),d0
    c5a8:	|  |   lsl.l #3,d0
    c5aa:	|  |   add.l d1,d0
    c5ac:	|  |   move.l 80(sp),-(sp)
    c5b0:	|  |   move.l d0,-(sp)
    c5b2:	|  |   jsr cc7a <saveVariable>
    c5b8:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c5ba:	|  |   addq.l #1,68(sp)
    c5be:	|  '-> movea.l 76(sp),a0
    c5c2:	|      move.l 8(a0),d0
    c5c6:	|      cmp.l 68(sp),d0
    c5ca:	'----- bgt.s c59c <saveFunction+0x17a>
	}
}
    c5cc:	       nop
    c5ce:	       nop
    c5d0:	       move.l (sp)+,d2
    c5d2:	       movea.l (sp)+,a6
    c5d4:	       lea 64(sp),sp
    c5d8:	       rts

0000c5da <saveGame>:

BOOL saveGame (char * fname) {
    c5da:	          lea -248(sp),sp
    c5de:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    c5e2:	          move.l 264(sp),244(sp)
    c5e8:	          move.l #1006,240(sp)
    c5f0:	          move.l 1c818 <DOSBase>,d0
    c5f6:	          movea.l d0,a6
    c5f8:	          move.l 244(sp),d1
    c5fc:	          move.l 240(sp),d2
    c600:	          jsr -30(a6)
    c604:	          move.l d0,236(sp)
    c608:	          move.l 236(sp),d0
    c60c:	          move.l d0,232(sp)
	if (fp == NULL) {
    c610:	      ,-- bne.s c626 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    c612:	      |   pea 19271 <PutChar+0x16c3>
    c618:	      |   jsr 1710c <KPrintF>
    c61e:	      |   addq.l #4,sp
		return FALSE;
    c620:	      |   clr.w d0
    c622:	,-----|-- bra.w cae4 <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    c626:	|     '-> move.l 232(sp),228(sp)
    c62c:	|         move.l #103054,224(sp)
    c634:	|         moveq #6,d0
    c636:	|         move.l d0,220(sp)
    c63a:	|         move.l 1c818 <DOSBase>,d0
    c640:	|         movea.l d0,a6
    c642:	|         move.l 228(sp),d1
    c646:	|         move.l 224(sp),d2
    c64a:	|         move.l 220(sp),d3
    c64e:	|         jsr -48(a6)
    c652:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    c656:	|         move.l 232(sp),212(sp)
    c65c:	|         clr.l 208(sp)
    c660:	|         move.l 1c818 <DOSBase>,d0
    c666:	|         movea.l d0,a6
    c668:	|         move.l 212(sp),d1
    c66c:	|         move.l 208(sp),d2
    c670:	|         jsr -312(a6)
    c674:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    c678:	|         move.l 232(sp),200(sp)
    c67e:	|         clr.l 196(sp)
    c682:	|         move.l 1c818 <DOSBase>,d0
    c688:	|         movea.l d0,a6
    c68a:	|         move.l 200(sp),d1
    c68e:	|         move.l 196(sp),d2
    c692:	|         jsr -312(a6)
    c696:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    c69a:	|         move.l 232(sp),188(sp)
    c6a0:	|         moveq #2,d0
    c6a2:	|         move.l d0,184(sp)
    c6a6:	|         move.l 1c818 <DOSBase>,d0
    c6ac:	|         movea.l d0,a6
    c6ae:	|         move.l 188(sp),d1
    c6b2:	|         move.l 184(sp),d2
    c6b6:	|         jsr -312(a6)
    c6ba:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    c6be:	|         move.l 232(sp),176(sp)
    c6c4:	|         moveq #2,d0
    c6c6:	|         move.l d0,172(sp)
    c6ca:	|         move.l 1c818 <DOSBase>,d0
    c6d0:	|         movea.l d0,a6
    c6d2:	|         move.l 176(sp),d1
    c6d6:	|         move.l 172(sp),d2
    c6da:	|         jsr -312(a6)
    c6de:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    c6e2:	|         move.l 232(sp),164(sp)
    c6e8:	|         move.l #116658,160(sp)
    c6f0:	|         moveq #8,d0
    c6f2:	|         move.l d0,156(sp)
    c6f6:	|         move.l 1c818 <DOSBase>,d0
    c6fc:	|         movea.l d0,a6
    c6fe:	|         move.l 164(sp),d1
    c702:	|         move.l 160(sp),d2
    c706:	|         move.l 156(sp),d3
    c70a:	|         jsr -48(a6)
    c70e:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    c712:	|         move.l 232(sp),148(sp)
    c718:	|         move.w 1c060 <allowAnyFilename>,d0
    c71e:	|         movea.w d0,a0
    c720:	|         move.l a0,144(sp)
    c724:	|         move.l 1c818 <DOSBase>,d0
    c72a:	|         movea.l d0,a6
    c72c:	|         move.l 148(sp),d1
    c730:	|         move.l 144(sp),d2
    c734:	|         jsr -312(a6)
    c738:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    c73c:	|         move.l 232(sp),136(sp)
    c742:	|         move.w 1c7b0 <captureAllKeys>,d0
    c748:	|         movea.w d0,a0
    c74a:	|         move.l a0,132(sp)
    c74e:	|         move.l 1c818 <DOSBase>,d0
    c754:	|         movea.l d0,a6
    c756:	|         move.l 136(sp),d1
    c75a:	|         move.l 132(sp),d2
    c75e:	|         jsr -312(a6)
    c762:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    c766:	|         move.l 232(sp),124(sp)
    c76c:	|         moveq #1,d0
    c76e:	|         move.l d0,120(sp)
    c772:	|         move.l 1c818 <DOSBase>,d0
    c778:	|         movea.l d0,a6
    c77a:	|         move.l 124(sp),d1
    c77e:	|         move.l 120(sp),d2
    c782:	|         jsr -312(a6)
    c786:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    c78a:	|         move.l 232(sp),112(sp)
    c790:	|         move.l 1c914 <fontTableSize>,d0
    c796:	|         sgt d0
    c798:	|         neg.b d0
    c79a:	|         move.b d0,d0
    c79c:	|         andi.l #255,d0
    c7a2:	|         move.l d0,108(sp)
    c7a6:	|         move.l 1c818 <DOSBase>,d0
    c7ac:	|         movea.l d0,a6
    c7ae:	|         move.l 112(sp),d1
    c7b2:	|         move.l 108(sp),d2
    c7b6:	|         jsr -312(a6)
    c7ba:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    c7be:	|         move.l 1c914 <fontTableSize>,d0
    c7c4:	|     ,-- ble.s c802 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    c7c6:	|     |   move.l 1c908 <loadedFontNum>,d0
    c7cc:	|     |   move.l 232(sp),-(sp)
    c7d0:	|     |   move.l d0,-(sp)
    c7d2:	|     |   jsr 8d0 <put2bytes>
    c7d8:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    c7da:	|     |   move.l 1c904 <fontHeight>,d0
    c7e0:	|     |   move.l 232(sp),-(sp)
    c7e4:	|     |   move.l d0,-(sp)
    c7e6:	|     |   jsr 8d0 <put2bytes>
    c7ec:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    c7ee:	|     |   move.l 1c90c <fontOrderString>,d0
    c7f4:	|     |   move.l 232(sp),-(sp)
    c7f8:	|     |   move.l d0,-(sp)
    c7fa:	|     |   jsr bd8 <writeString>
    c800:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    c802:	|     '-> move.w 1c708 <fontSpace>,d0
    c808:	|         movea.w d0,a0
    c80a:	|         move.l 232(sp),-(sp)
    c80e:	|         move.l a0,-(sp)
    c810:	|         jsr a9c <putSigned>
    c816:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    c818:	|         move.l 1c8c6 <cameraX>,d0
    c81e:	|         move.l 232(sp),-(sp)
    c822:	|         move.l d0,-(sp)
    c824:	|         jsr 8d0 <put2bytes>
    c82a:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    c82c:	|         move.l 1c8ca <cameraY>,d0
    c832:	|         move.l 232(sp),-(sp)
    c836:	|         move.l d0,-(sp)
    c838:	|         jsr 8d0 <put2bytes>
    c83e:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    c840:	|         move.l 1c1a2 <cameraZoom>,d0
    c846:	|         move.l 232(sp),-(sp)
    c84a:	|         move.l d0,-(sp)
    c84c:	|         jsr a46 <putFloat>
    c852:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    c854:	|         move.l 232(sp),100(sp)
    c85a:	|         move.b 1c17e <brightnessLevel>,d0
    c860:	|         move.b d0,d0
    c862:	|         andi.l #255,d0
    c868:	|         move.l d0,96(sp)
    c86c:	|         move.l 1c818 <DOSBase>,d0
    c872:	|         movea.l d0,a6
    c874:	|         move.l 100(sp),d1
    c878:	|         move.l 96(sp),d2
    c87c:	|         jsr -312(a6)
    c880:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    c884:	|         move.l 232(sp),-(sp)
    c888:	|         jsr 724e <saveHandlers>
    c88e:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    c890:	|         move.l 232(sp),-(sp)
    c894:	|         jsr 15b4e <saveRegions>
    c89a:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    c89c:	|         move.l 1c70a <mouseCursorAnim>,d0
    c8a2:	|         move.l 232(sp),-(sp)
    c8a6:	|         move.l d0,-(sp)
    c8a8:	|         jsr adfe <saveAnim>
    c8ae:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    c8b0:	|         move.l 1c70e <mouseCursorFrameNum>,d0
    c8b6:	|         move.l 232(sp),-(sp)
    c8ba:	|         move.l d0,-(sp)
    c8bc:	|         jsr 8d0 <put2bytes>
    c8c2:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    c8c4:	|         move.l 1c7a8 <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    c8cc:	|         clr.l 248(sp)
	while (thisFunction) {
    c8d0:	|     ,-- bra.s c8e0 <saveGame+0x306>
		countFunctions ++;
    c8d2:	|  ,--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    c8d6:	|  |  |   movea.l 252(sp),a0
    c8da:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    c8e0:	|  |  '-> tst.l 252(sp)
    c8e4:	|  '----- bne.s c8d2 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    c8e6:	|         move.l 232(sp),-(sp)
    c8ea:	|         move.l 252(sp),-(sp)
    c8ee:	|         jsr 8d0 <put2bytes>
    c8f4:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    c8f6:	|         move.l 1c7a8 <allRunningFunctions>,252(sp)
	while (thisFunction) {
    c8fe:	|     ,-- bra.s c91a <saveGame+0x340>
		saveFunction (thisFunction, fp);
    c900:	|  ,--|-> move.l 232(sp),-(sp)
    c904:	|  |  |   move.l 256(sp),-(sp)
    c908:	|  |  |   jsr c422 <saveFunction>
    c90e:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    c910:	|  |  |   movea.l 252(sp),a0
    c914:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    c91a:	|  |  '-> tst.l 252(sp)
    c91e:	|  '----- bne.s c900 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    c920:	|         clr.l 256(sp)
    c924:	|     ,-- bra.s c946 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    c926:	|  ,--|-> move.l 1c7be <globalVars>,d1
    c92c:	|  |  |   move.l 256(sp),d0
    c930:	|  |  |   lsl.l #3,d0
    c932:	|  |  |   add.l d1,d0
    c934:	|  |  |   move.l 232(sp),-(sp)
    c938:	|  |  |   move.l d0,-(sp)
    c93a:	|  |  |   jsr cc7a <saveVariable>
    c940:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    c942:	|  |  |   addq.l #1,256(sp)
    c946:	|  |  '-> move.l 1c7e8 <numGlobals>,d0
    c94c:	|  |      cmp.l 256(sp),d0
    c950:	|  '----- bgt.s c926 <saveGame+0x34c>
	}

	savePeople (fp);
    c952:	|         move.l 232(sp),-(sp)
    c956:	|         jsr af26 <savePeople>
    c95c:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    c95e:	|         movea.l 1c928 <currentFloor>,a0
    c964:	|         move.l 8(a0),d0
    c968:	|  ,----- beq.s c9a6 <saveGame+0x3cc>
		FPutC (fp, 1);
    c96a:	|  |      move.l 232(sp),76(sp)
    c970:	|  |      moveq #1,d0
    c972:	|  |      move.l d0,72(sp)
    c976:	|  |      move.l 1c818 <DOSBase>,d0
    c97c:	|  |      movea.l d0,a6
    c97e:	|  |      move.l 76(sp),d1
    c982:	|  |      move.l 72(sp),d2
    c986:	|  |      jsr -312(a6)
    c98a:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    c98e:	|  |      movea.l 1c928 <currentFloor>,a0
    c994:	|  |      move.l (a0),d0
    c996:	|  |      move.l 232(sp),-(sp)
    c99a:	|  |      move.l d0,-(sp)
    c99c:	|  |      jsr 8d0 <put2bytes>
    c9a2:	|  |      addq.l #8,sp
    c9a4:	|  |  ,-- bra.s c9c8 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    c9a6:	|  '--|-> move.l 232(sp),88(sp)
    c9ac:	|     |   clr.l 84(sp)
    c9b0:	|     |   move.l 1c818 <DOSBase>,d0
    c9b6:	|     |   movea.l d0,a6
    c9b8:	|     |   move.l 88(sp),d1
    c9bc:	|     |   move.l 84(sp),d2
    c9c0:	|     |   jsr -312(a6)
    c9c4:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    c9c8:	|     '-> move.l 232(sp),64(sp)
    c9ce:	|         move.l 1c8da <speechMode>,60(sp)
    c9d6:	|         move.l 1c818 <DOSBase>,d0
    c9dc:	|         movea.l d0,a6
    c9de:	|         move.l 64(sp),d1
    c9e2:	|         move.l 60(sp),d2
    c9e6:	|         jsr -312(a6)
    c9ea:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    c9ee:	|         move.b 1c6de <fadeMode>,d0
    c9f4:	|         move.b d0,d0
    c9f6:	|         andi.l #255,d0
    c9fc:	|         move.l d0,52(sp)
    ca00:	|         move.l 232(sp),48(sp)
    ca06:	|         move.l 1c818 <DOSBase>,d0
    ca0c:	|         movea.l d0,a6
    ca0e:	|         move.l 52(sp),d1
    ca12:	|         move.l 48(sp),d2
    ca16:	|         jsr -312(a6)
    ca1a:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    ca1e:	|         move.l 1c760 <speech>,d0
    ca24:	|         move.l 232(sp),-(sp)
    ca28:	|         move.l d0,-(sp)
    ca2a:	|         jsr 4002 <saveSpeech>
    ca30:	|         addq.l #8,sp
	saveStatusBars (fp);
    ca32:	|         move.l 232(sp),-(sp)
    ca36:	|         jsr 82ba <saveStatusBars>
    ca3c:	|         addq.l #4,sp
	saveSounds (fp);
    ca3e:	|         move.l 232(sp),-(sp)
    ca42:	|         jsr cfec <saveSounds>
    ca48:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    ca4a:	|         move.w 1c8c4 <saveEncoding>,d0
    ca50:	|         move.w d0,d0
    ca52:	|         andi.l #65535,d0
    ca58:	|         move.l 232(sp),-(sp)
    ca5c:	|         move.l d0,-(sp)
    ca5e:	|         jsr 8d0 <put2bytes>
    ca64:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    ca66:	|         move.l 1c8b6 <parallaxStuff>,d0
    ca6c:	|         move.l 232(sp),-(sp)
    ca70:	|         move.l d0,-(sp)
    ca72:	|         jsr d2ee <saveParallaxRecursive>
    ca78:	|         addq.l #8,sp
	FPutC (fp, 0);
    ca7a:	|         move.l 232(sp),40(sp)
    ca80:	|         clr.l 36(sp)
    ca84:	|         move.l 1c818 <DOSBase>,d0
    ca8a:	|         movea.l d0,a6
    ca8c:	|         move.l 40(sp),d1
    ca90:	|         move.l 36(sp),d2
    ca94:	|         jsr -312(a6)
    ca98:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    ca9c:	|         move.l 232(sp),28(sp)
    caa2:	|         move.l 1c184 <languageNum>,24(sp)
    caaa:	|         move.l 1c818 <DOSBase>,d0
    cab0:	|         movea.l d0,a6
    cab2:	|         move.l 28(sp),d1
    cab6:	|         move.l 24(sp),d2
    caba:	|         jsr -312(a6)
    cabe:	|         move.l d0,20(sp)

	Close(fp);
    cac2:	|         move.l 232(sp),16(sp)
    cac8:	|         move.l 1c818 <DOSBase>,d0
    cace:	|         movea.l d0,a6
    cad0:	|         move.l 16(sp),d1
    cad4:	|         jsr -36(a6)
    cad8:	|         move.l d0,12(sp)
	clearStackLib ();
    cadc:	|         jsr c0d8 <clearStackLib>
	return TRUE;
    cae2:	|         moveq #1,d0
}
    cae4:	'-------> movem.l (sp)+,d2-d3/a6
    cae8:	          lea 248(sp),sp
    caec:	          rts

0000caee <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    caee:	       lea -12(sp),sp
	int elements = 0;
    caf2:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    caf6:	       move.l 16(sp),(sp)
	while (search) {
    cafa:	   ,-- bra.s cb06 <saveStack+0x18>
		elements ++;
    cafc:	,--|-> addq.l #1,8(sp)
		search = search -> next;
    cb00:	|  |   movea.l (sp),a0
    cb02:	|  |   move.l 8(a0),(sp)
	while (search) {
    cb06:	|  '-> tst.l (sp)
    cb08:	'----- bne.s cafc <saveStack+0xe>
	}

	put2bytes (elements, fp);
    cb0a:	       move.l 20(sp),-(sp)
    cb0e:	       move.l 12(sp),-(sp)
    cb12:	       jsr 8d0 <put2bytes>
    cb18:	       addq.l #8,sp
	search = vs;
    cb1a:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    cb1e:	       clr.l 4(sp)
    cb22:	   ,-- bra.s cb3e <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    cb24:	,--|-> move.l (sp),d0
    cb26:	|  |   move.l 20(sp),-(sp)
    cb2a:	|  |   move.l d0,-(sp)
    cb2c:	|  |   jsr cc7a <saveVariable>
    cb32:	|  |   addq.l #8,sp
		search = search -> next;
    cb34:	|  |   movea.l (sp),a0
    cb36:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    cb3a:	|  |   addq.l #1,4(sp)
    cb3e:	|  '-> move.l 4(sp),d0
    cb42:	|      cmp.l 8(sp),d0
    cb46:	'----- blt.s cb24 <saveStack+0x36>
	}
}
    cb48:	       nop
    cb4a:	       nop
    cb4c:	       lea 12(sp),sp
    cb50:	       rts

0000cb52 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    cb52:	             lea -44(sp),sp
    cb56:	             move.l a6,-(sp)
    cb58:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    cb5a:	             move.l 1c89c <stackLib>,48(sp)
	int a = 0;
    cb62:	             clr.l 44(sp)
	while (s) {
    cb66:	      ,----- bra.s cbc4 <saveStackRef+0x72>
		if (s -> stack == vs) {
    cb68:	   ,--|----> movea.l 48(sp),a0
    cb6c:	   |  |      move.l (a0),d0
    cb6e:	   |  |      cmp.l 56(sp),d0
    cb72:	   |  |  ,-- bne.s cbb6 <saveStackRef+0x64>
			FPutC (fp, 1);
    cb74:	   |  |  |   move.l 60(sp),16(sp)
    cb7a:	   |  |  |   moveq #1,d0
    cb7c:	   |  |  |   move.l d0,12(sp)
    cb80:	   |  |  |   move.l 1c818 <DOSBase>,d0
    cb86:	   |  |  |   movea.l d0,a6
    cb88:	   |  |  |   move.l 16(sp),d1
    cb8c:	   |  |  |   move.l 12(sp),d2
    cb90:	   |  |  |   jsr -312(a6)
    cb94:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    cb98:	   |  |  |   move.l 1c898 <stackLibTotal>,d0
    cb9e:	   |  |  |   sub.l 44(sp),d0
    cba2:	   |  |  |   move.l 60(sp),-(sp)
    cba6:	   |  |  |   move.l d0,-(sp)
    cba8:	   |  |  |   jsr 8d0 <put2bytes>
    cbae:	   |  |  |   addq.l #8,sp
			return TRUE;
    cbb0:	   |  |  |   moveq #1,d0
    cbb2:	,--|--|--|-- bra.w cc70 <saveStackRef+0x11e>
		}
		s = s -> next;
    cbb6:	|  |  |  '-> movea.l 48(sp),a0
    cbba:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    cbc0:	|  |  |      addq.l #1,44(sp)
	while (s) {
    cbc4:	|  |  '----> tst.l 48(sp)
    cbc8:	|  '-------- bne.s cb68 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    cbca:	|            move.l 60(sp),40(sp)
    cbd0:	|            clr.l 36(sp)
    cbd4:	|            move.l 1c818 <DOSBase>,d0
    cbda:	|            movea.l d0,a6
    cbdc:	|            move.l 40(sp),d1
    cbe0:	|            move.l 36(sp),d2
    cbe4:	|            jsr -312(a6)
    cbe8:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    cbec:	|            movea.l 56(sp),a0
    cbf0:	|            move.l (a0),d0
    cbf2:	|            move.l 60(sp),-(sp)
    cbf6:	|            move.l d0,-(sp)
    cbf8:	|            jsr caee <saveStack>
    cbfe:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    cc00:	|            moveq #8,d0
    cc02:	|            move.l d0,28(sp)
    cc06:	|            clr.l 24(sp)
    cc0a:	|            move.l 1c810 <SysBase>,d0
    cc10:	|            movea.l d0,a6
    cc12:	|            move.l 28(sp),d0
    cc16:	|            move.l 24(sp),d1
    cc1a:	|            jsr -684(a6)
    cc1e:	|            move.l d0,20(sp)
    cc22:	|            move.l 20(sp),d0
    cc26:	|            move.l d0,48(sp)
	stackLibTotal ++;
    cc2a:	|            move.l 1c898 <stackLibTotal>,d0
    cc30:	|            addq.l #1,d0
    cc32:	|            move.l d0,1c898 <stackLibTotal>
	if (! s) {
    cc38:	|            tst.l 48(sp)
    cc3c:	|        ,-- bne.s cc50 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    cc3e:	|        |   pea 192bd <PutChar+0x170f>
    cc44:	|        |   jsr 1710c <KPrintF>
    cc4a:	|        |   addq.l #4,sp
		return FALSE;
    cc4c:	|        |   clr.w d0
    cc4e:	+--------|-- bra.s cc70 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    cc50:	|        '-> move.l 1c89c <stackLib>,d0
    cc56:	|            movea.l 48(sp),a0
    cc5a:	|            move.l d0,4(a0)
	s -> stack = vs;
    cc5e:	|            movea.l 48(sp),a0
    cc62:	|            move.l 56(sp),(a0)
	stackLib = s;
    cc66:	|            move.l 48(sp),1c89c <stackLib>
	return TRUE;
    cc6e:	|            moveq #1,d0
}
    cc70:	'----------> move.l (sp)+,d2
    cc72:	             movea.l (sp)+,a6
    cc74:	             lea 44(sp),sp
    cc78:	             rts

0000cc7a <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    cc7a:	          lea -12(sp),sp
    cc7e:	          move.l a6,-(sp)
    cc80:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    cc82:	          move.l 28(sp),16(sp)
    cc88:	          movea.l 24(sp),a0
    cc8c:	          move.l (a0),d0
    cc8e:	          move.l d0,12(sp)
    cc92:	          move.l 1c818 <DOSBase>,d0
    cc98:	          movea.l d0,a6
    cc9a:	          move.l 16(sp),d1
    cc9e:	          move.l 12(sp),d2
    cca2:	          jsr -312(a6)
    cca6:	          move.l d0,8(sp)
	switch (from -> varType) {
    ccaa:	          movea.l 24(sp),a0
    ccae:	          move.l (a0),d0
    ccb0:	          moveq #9,d1
    ccb2:	          cmp.l d0,d1
    ccb4:	      ,-- bcs.w cd64 <saveVariable+0xea>
    ccb8:	      |   add.l d0,d0
    ccba:	      |   movea.l d0,a0
    ccbc:	      |   adda.l #52424,a0
    ccc2:	      |   move.w (a0),d0
    ccc4:	      |   jmp (ccc8 <saveVariable+0x4e>,pc,d0.w)
    ccc8:	      |   ori.l #1310740,(a0)+
    ccce:	      |   ori.b #20,(20,a0,d0.w)
    ccd4:	      |   .short 0x004c
    ccd6:	      |   ori.b #126,(a4)
    ccda:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    ccde:	      |   ori.b #40,(a0)+
    cce2:	      |   ori.b #47,d4
    cce6:	      |   ori.b #0,(a4)+
    ccea:	      |   jsr 958 <put4bytes>
    ccf0:	      |   addq.l #8,sp
		return TRUE;
    ccf2:	      |   moveq #1,d0
    ccf4:	,-----|-- bra.w cda0 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    ccf8:	|     |   movea.l 24(sp),a0
    ccfc:	|     |   move.l 4(a0),d0
    cd00:	|     |   move.l 28(sp),-(sp)
    cd04:	|     |   move.l d0,-(sp)
    cd06:	|     |   jsr bd8 <writeString>
    cd0c:	|     |   addq.l #8,sp
		return TRUE;
    cd0e:	|     |   moveq #1,d0
    cd10:	+-----|-- bra.w cda0 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    cd14:	|     |   movea.l 24(sp),a0
    cd18:	|     |   move.l 4(a0),d0
    cd1c:	|     |   move.l 28(sp),-(sp)
    cd20:	|     |   move.l d0,-(sp)
    cd22:	|     |   jsr cb52 <saveStackRef>
    cd28:	|     |   addq.l #8,sp
    cd2a:	+-----|-- bra.s cda0 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    cd2c:	|     |   movea.l 24(sp),a0
    cd30:	|     |   move.l 4(a0),d0
    cd34:	|     |   move.l 28(sp),-(sp)
    cd38:	|     |   move.l d0,-(sp)
    cd3a:	|     |   jsr aec8 <saveCostume>
    cd40:	|     |   addq.l #8,sp
		return FALSE;
    cd42:	|     |   clr.w d0
    cd44:	+-----|-- bra.s cda0 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    cd46:	|     |   movea.l 24(sp),a0
    cd4a:	|     |   move.l 4(a0),d0
    cd4e:	|     |   move.l 28(sp),-(sp)
    cd52:	|     |   move.l d0,-(sp)
    cd54:	|     |   jsr adfe <saveAnim>
    cd5a:	|     |   addq.l #8,sp
		return FALSE;
    cd5c:	|     |   clr.w d0
    cd5e:	+-----|-- bra.s cda0 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    cd60:	|     |   clr.w d0
    cd62:	+-----|-- bra.s cda0 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    cd64:	|     '-> movea.l 24(sp),a0
    cd68:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    cd6a:	|         moveq #10,d1
    cd6c:	|         cmp.l d0,d1
    cd6e:	|  ,----- bcs.s cd88 <saveVariable+0x10e>
						typeName[from->varType] :
    cd70:	|  |      movea.l 24(sp),a0
    cd74:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    cd76:	|  |      add.l d0,d0
    cd78:	|  |      movea.l d0,a1
    cd7a:	|  |      adda.l d0,a1
    cd7c:	|  |      lea 1c6e0 <typeName>,a0
    cd82:	|  |      move.l (0,a1,a0.l),d0
    cd86:	|  |  ,-- bra.s cd8e <saveVariable+0x114>
    cd88:	|  '--|-> move.l #103138,d0
    cd8e:	|     '-> move.l d0,-(sp)
    cd90:	|         pea 192e9 <PutChar+0x173b>
    cd96:	|         jsr 1710c <KPrintF>
    cd9c:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    cd9e:	|         moveq #1,d0
    cda0:	'-------> move.l (sp)+,d2
    cda2:	          movea.l (sp)+,a6
    cda4:	          lea 12(sp),sp
    cda8:	          rts

0000cdaa <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    cdaa:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    cdae:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    cdb6:	          movea.l 4(sp),a0
    cdba:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    cdc0:	          movea.l 4(sp),a0
    cdc4:	          move.w 10(a0),d0
    cdc8:	          lsr.w #8,d0
    cdca:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    cdce:	          movea.l 4(sp),a0
    cdd2:	          move.w 10(a0),d0
    cdd6:	          move.b d0,(sp)

    if(counterx_new)
    cdd8:	,-------- beq.w ce7e <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    cddc:	|         clr.w d1
    cdde:	|         move.b (sp),d1
    cde0:	|         move.w 1c8a4 <counterx_old>,d0
    cde6:	|         sub.w d0,d1
    cde8:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    cdec:	|         cmpi.w #128,10(sp)
    cdf2:	|     ,-- blt.s ce0a <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    cdf4:	|     |   move.w #1,1c7c6 <input+0x4>
            counterx_diff -= 256;    
    cdfc:	|     |   move.w 10(sp),d0
    ce00:	|     |   addi.w #-256,d0
    ce04:	|     |   move.w d0,10(sp)
    ce08:	|  ,--|-- bra.s ce36 <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    ce0a:	|  |  '-> cmpi.w #-129,10(sp)
    ce10:	|  |  ,-- bgt.s ce28 <CsiCheckInput+0x7e>
            counterx_diff += 256;
    ce12:	|  |  |   move.w 10(sp),d0
    ce16:	|  |  |   addi.w #256,d0
    ce1a:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    ce1e:	|  |  |   move.w #1,1c7c6 <input+0x4>
    ce26:	|  +--|-- bra.s ce36 <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    ce28:	|  |  '-> tst.w 10(sp)
    ce2c:	|  +----- beq.s ce36 <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    ce2e:	|  |      move.w #1,1c7c6 <input+0x4>
        }

        input.mouseX += counterx_diff;
    ce36:	|  '----> move.l 1c7cc <input+0xa>,d0
    ce3c:	|         movea.w 10(sp),a0
    ce40:	|         add.l a0,d0
    ce42:	|         move.l d0,1c7cc <input+0xa>

        if( input.mouseX > (int) winWidth) {
    ce48:	|         move.l 1c7cc <input+0xa>,d1
    ce4e:	|         move.l 1c764 <winWidth>,d0
    ce54:	|         cmp.l d1,d0
    ce56:	|     ,-- bge.s ce66 <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    ce58:	|     |   move.l 1c764 <winWidth>,d0
    ce5e:	|     |   move.l d0,1c7cc <input+0xa>
    ce64:	|  ,--|-- bra.s ce74 <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    ce66:	|  |  '-> move.l 1c7cc <input+0xa>,d0
    ce6c:	|  +----- bpl.s ce74 <CsiCheckInput+0xca>
            input.mouseX = 0;
    ce6e:	|  |      clr.l 1c7cc <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    ce74:	|  '----> clr.w d0
    ce76:	|         move.b (sp),d0
    ce78:	|         move.w d0,1c8a4 <counterx_old>
    }    

    if(countery_new)
    ce7e:	'-------> tst.b 1(sp)
    ce82:	,-------- beq.w cf2c <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    ce86:	|         clr.w d1
    ce88:	|         move.b 1(sp),d1
    ce8c:	|         move.w 1c8a6 <countery_old>,d0
    ce92:	|         sub.w d0,d1
    ce94:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    ce98:	|         cmpi.w #128,8(sp)
    ce9e:	|     ,-- blt.s ceb6 <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    cea0:	|     |   move.w #1,1c7c6 <input+0x4>
            countery_diff -= 256;    
    cea8:	|     |   move.w 8(sp),d0
    ceac:	|     |   addi.w #-256,d0
    ceb0:	|     |   move.w d0,8(sp)
    ceb4:	|  ,--|-- bra.s cee2 <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    ceb6:	|  |  '-> cmpi.w #-129,8(sp)
    cebc:	|  |  ,-- bgt.s ced4 <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    cebe:	|  |  |   move.w #1,1c7c6 <input+0x4>
            countery_diff += 256;
    cec6:	|  |  |   move.w 8(sp),d0
    ceca:	|  |  |   addi.w #256,d0
    cece:	|  |  |   move.w d0,8(sp)
    ced2:	|  +--|-- bra.s cee2 <CsiCheckInput+0x138>
        } else if (countery_diff) {
    ced4:	|  |  '-> tst.w 8(sp)
    ced8:	|  +----- beq.s cee2 <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    ceda:	|  |      move.w #1,1c7c6 <input+0x4>
        }

        input.mouseY += countery_diff;
    cee2:	|  '----> move.l 1c7d0 <input+0xe>,d0
    cee8:	|         movea.w 8(sp),a0
    ceec:	|         add.l a0,d0
    ceee:	|         move.l d0,1c7d0 <input+0xe>

        if( input.mouseY > (int) winHeight) {
    cef4:	|         move.l 1c7d0 <input+0xe>,d1
    cefa:	|         move.l 1c768 <winHeight>,d0
    cf00:	|         cmp.l d1,d0
    cf02:	|     ,-- bge.s cf12 <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    cf04:	|     |   move.l 1c768 <winHeight>,d0
    cf0a:	|     |   move.l d0,1c7d0 <input+0xe>
    cf10:	|  ,--|-- bra.s cf20 <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    cf12:	|  |  '-> move.l 1c7d0 <input+0xe>,d0
    cf18:	|  +----- bpl.s cf20 <CsiCheckInput+0x176>
            input.mouseY = 0;
    cf1a:	|  |      clr.l 1c7d0 <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    cf20:	|  '----> clr.w d0
    cf22:	|         move.b 1(sp),d0
    cf26:	|         move.w d0,1c8a6 <countery_old>
    } 

    input.leftRelease = FALSE;
    cf2c:	'-------> clr.w 1c7c8 <input+0x6>
    input.rightRelease = FALSE;
    cf32:	          clr.w 1c7ca <input+0x8>

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    cf38:	          move.w 1c7c2 <input>,d0
    cf3e:	      ,-- beq.s cf64 <CsiCheckInput+0x1ba>
    cf40:	      |   movea.l #12574721,a0
    cf46:	      |   move.b (a0),d0
    cf48:	      |   move.b d0,d0
    cf4a:	      |   andi.l #255,d0
    cf50:	      |   moveq #64,d1
    cf52:	      |   and.l d1,d0
    cf54:	      +-- beq.s cf64 <CsiCheckInput+0x1ba>
    {
        input.leftClick = FALSE;
    cf56:	      |   clr.w 1c7c2 <input>
        input.leftRelease = TRUE;
    cf5c:	      |   move.w #1,1c7c8 <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    cf64:	      '-> move.w 1c7c4 <input+0x2>,d0
    cf6a:	      ,-- beq.s cf92 <CsiCheckInput+0x1e8>
    cf6c:	      |   movea.l #14675990,a0
    cf72:	      |   move.w (a0),d0
    cf74:	      |   move.w d0,d0
    cf76:	      |   andi.l #65535,d0
    cf7c:	      |   andi.l #1024,d0
    cf82:	      +-- beq.s cf92 <CsiCheckInput+0x1e8>
    {
        input.rightClick = FALSE;
    cf84:	      |   clr.w 1c7c4 <input+0x2>
        input.rightRelease = TRUE;
    cf8a:	      |   move.w #1,1c7ca <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    cf92:	      '-> movea.l #12574721,a0
    cf98:	          move.b (a0),d0
    cf9a:	          move.b d0,d0
    cf9c:	          andi.l #255,d0
    cfa2:	          moveq #64,d1
    cfa4:	          and.l d1,d0
    cfa6:	      ,-- bne.s cfb0 <CsiCheckInput+0x206>
        input.leftClick = TRUE;              
    cfa8:	      |   move.w #1,1c7c2 <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    cfb0:	      '-> movea.l #14675990,a0
    cfb6:	          move.w (a0),d0
    cfb8:	          move.w d0,d0
    cfba:	          andi.l #65535,d0
    cfc0:	          andi.l #1024,d0
    cfc6:	      ,-- bne.s cfd0 <CsiCheckInput+0x226>
        input.rightClick = TRUE;
    cfc8:	      |   move.w #1,1c7c4 <input+0x2>
    }

    cfd0:	      '-> nop
    cfd2:	          lea 12(sp),sp
    cfd6:	          rts

0000cfd8 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    cfd8:	moveq #0,d0
}
    cfda:	rts

0000cfdc <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    cfdc:	nop
    cfde:	rts

0000cfe0 <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    cfe0:	nop
    cfe2:	rts

0000cfe4 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    cfe4:	moveq #1,d0
}
    cfe6:	rts

0000cfe8 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    cfe8:	nop
    cfea:	rts

0000cfec <saveSounds>:

void saveSounds (BPTR fp) {
    cfec:	lea -12(sp),sp
    cff0:	move.l a6,-(sp)
    cff2:	move.l d2,-(sp)
	FPutC (fp,0);
    cff4:	move.l 24(sp),16(sp)
    cffa:	clr.l 12(sp)
    cffe:	move.l 1c818 <DOSBase>,d0
    d004:	movea.l d0,a6
    d006:	move.l 16(sp),d1
    d00a:	move.l 12(sp),d2
    d00e:	jsr -312(a6)
    d012:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    d016:	move.l 1c19e <defSoundVol>,d0
    d01c:	move.l 24(sp),-(sp)
    d020:	move.l d0,-(sp)
    d022:	jsr 8d0 <put2bytes>
    d028:	addq.l #8,sp
	put2bytes (defVol, fp);
    d02a:	move.l 1c19a <defVol>,d0
    d030:	move.l 24(sp),-(sp)
    d034:	move.l d0,-(sp)
    d036:	jsr 8d0 <put2bytes>
    d03c:	addq.l #8,sp
}
    d03e:	nop
    d040:	move.l (sp)+,d2
    d042:	movea.l (sp)+,a6
    d044:	lea 12(sp),sp
    d048:	rts

0000d04a <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    d04a:	move.l 4(sp),1c19a <defVol>
}
    d052:	nop
    d054:	rts

0000d056 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    d056:	move.l 4(sp),1c19e <defSoundVol>
}
    d05e:	nop
    d060:	rts

0000d062 <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    d062:	nop
    d064:	rts

0000d066 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    d066:	nop
    d068:	rts

0000d06a <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    d06a:	nop
    d06c:	rts

0000d06e <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    d06e:	subq.l #4,sp
    d070:	move.l 12(sp),d0
    d074:	move.w d0,d0
    d076:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    d07a:	moveq #1,d0
}
    d07c:	addq.l #4,sp
    d07e:	rts

0000d080 <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    d080:	nop
    d082:	rts

0000d084 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x1, y1, x2, y2);
    d084:	move.l 16(sp),-(sp)
    d088:	move.l 16(sp),-(sp)
    d08c:	move.l 16(sp),-(sp)
    d090:	move.l 16(sp),-(sp)
    d094:	jsr e0e <CstBlankScreen>
    d09a:	lea 16(sp),sp
}
    d09e:	nop
    d0a0:	rts

0000d0a2 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    d0a2:	pea 1930c <PutChar+0x175e>
    d0a8:	jsr 1710c <KPrintF>
    d0ae:	addq.l #4,sp
}
    d0b0:	nop
    d0b2:	rts

0000d0b4 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    d0b4:	movea.l 8(sp),a1
    d0b8:	movea.l 12(sp),a0
    d0bc:	move.l 8(sp),d1
    d0c0:	move.l 4(sp),d0
    d0c4:	move.l a1,-(sp)
    d0c6:	move.l a0,-(sp)
    d0c8:	move.l d1,-(sp)
    d0ca:	move.l d0,-(sp)
    d0cc:	jsr 46fc <drawLine>
    d0d2:	lea 16(sp),sp
}
    d0d6:	nop
    d0d8:	rts

0000d0da <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    d0da:	movea.l 12(sp),a1
    d0de:	movea.l 4(sp),a0
    d0e2:	move.l 8(sp),d1
    d0e6:	move.l 4(sp),d0
    d0ea:	move.l a1,-(sp)
    d0ec:	move.l a0,-(sp)
    d0ee:	move.l d1,-(sp)
    d0f0:	move.l d0,-(sp)
    d0f2:	jsr 46fc <drawLine>
    d0f8:	lea 16(sp),sp
}
    d0fc:	nop
    d0fe:	rts

0000d100 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    d100:	pea 19345 <PutChar+0x1797>
    d106:	jsr 1710c <KPrintF>
    d10c:	addq.l #4,sp
}
    d10e:	nop
    d110:	rts

0000d112 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    d112:	jsr 1b34 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    d118:	pea 1c8b0 <backdropTextureName>
    d11e:	pea 1 <_start+0x1>
    d122:	jsr 487e <deleteTextures>
    d128:	addq.l #8,sp
	backdropTextureName = 0;
    d12a:	clr.l 1c8b0 <backdropTextureName>
	backdropExists = FALSE;
    d130:	clr.w 1c8b4 <backdropExists>
}
    d136:	nop
    d138:	rts

0000d13a <killParallax>:

void killParallax () {
    d13a:	          lea -12(sp),sp
    d13e:	          move.l a6,-(sp)
	while (parallaxStuff) {
    d140:	   ,----- bra.s d1ac <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    d142:	,--|----> move.l 1c8b6 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    d14a:	|  |      movea.l 12(sp),a0
    d14e:	|  |      move.l 42(a0),d0
    d152:	|  |      move.l d0,1c8b6 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    d158:	|  |      move.l 12(sp),d0
    d15c:	|  |      addq.l #4,d0
    d15e:	|  |      move.l d0,-(sp)
    d160:	|  |      pea 1 <_start+0x1>
    d164:	|  |      jsr 487e <deleteTextures>
    d16a:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    d16c:	|  |      movea.l 12(sp),a0
    d170:	|  |      move.l (a0),d0
    d172:	|  |  ,-- beq.s d18c <killParallax+0x52>
    d174:	|  |  |   movea.l 12(sp),a0
    d178:	|  |  |   move.l (a0),8(sp)
    d17c:	|  |  |   move.l 1c810 <SysBase>,d0
    d182:	|  |  |   movea.l d0,a6
    d184:	|  |  |   movea.l 8(sp),a1
    d188:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    d18c:	|  |  '-> tst.l 12(sp)
    d190:	|  |  ,-- beq.s d1a8 <killParallax+0x6e>
    d192:	|  |  |   move.l 12(sp),4(sp)
    d198:	|  |  |   move.l 1c810 <SysBase>,d0
    d19e:	|  |  |   movea.l d0,a6
    d1a0:	|  |  |   movea.l 4(sp),a1
    d1a4:	|  |  |   jsr -690(a6)
		k = NULL;
    d1a8:	|  |  '-> clr.l 12(sp)
	while (parallaxStuff) {
    d1ac:	|  '----> move.l 1c8b6 <parallaxStuff>,d0
    d1b2:	'-------- bne.s d142 <killParallax+0x8>
	}
}
    d1b4:	          nop
    d1b6:	          nop
    d1b8:	          movea.l (sp)+,a6
    d1ba:	          lea 12(sp),sp
    d1be:	          rts

0000d1c0 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    d1c0:	       move.l 4(sp),-(sp)
    d1c4:	       jsr 7610 <openFileFromNum>
    d1ca:	       addq.l #4,sp
    d1cc:	       tst.l d0
    d1ce:	   ,-- bne.s d1e0 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    d1d0:	   |   pea 19366 <PutChar+0x17b8>
    d1d6:	   |   jsr 1710c <KPrintF>
    d1dc:	   |   addq.l #4,sp
		return;
    d1de:	,--|-- bra.s d200 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    d1e0:	|  '-> move.l 1c7f8 <bigDataFile>,d0
    d1e6:	|      move.l 12(sp),-(sp)
    d1ea:	|      move.l 12(sp),-(sp)
    d1ee:	|      move.l d0,-(sp)
    d1f0:	|      jsr 1de2 <CstLoadBackdrop>
    d1f6:	|      lea 12(sp),sp
	finishAccess ();
    d1fa:	|      jsr 7508 <finishAccess>
	
}
    d200:	'----> rts

0000d202 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    d202:	subq.l #8,sp
    d204:	movea.l 12(sp),a0
    d208:	move.l 16(sp),d1
    d20c:	move.l 20(sp),d0
    d210:	movea.w a0,a0
    d212:	move.w a0,6(sp)
    d216:	move.w d1,d1
    d218:	move.w d1,4(sp)
    d21c:	move.w d0,d0
    d21e:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    d222:	pea 193b5 <PutChar+0x1807>
    d228:	jsr 1710c <KPrintF>
    d22e:	addq.l #4,sp

}
    d230:	nop
    d232:	addq.l #8,sp
    d234:	rts

0000d236 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    d236:	pea 193d8 <PutChar+0x182a>
    d23c:	jsr 1710c <KPrintF>
    d242:	addq.l #4,sp
}
    d244:	nop
    d246:	rts

0000d248 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    d248:	pea 1c8ba <snapshotTextureName>
    d24e:	pea 1 <_start+0x1>
    d252:	jsr 487e <deleteTextures>
    d258:	addq.l #8,sp
	snapshotTextureName = 0;
    d25a:	clr.l 1c8ba <snapshotTextureName>
}
    d260:	nop
    d262:	rts

0000d264 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    d264:	clr.l 1c8c6 <cameraX>
	cameraY = 0;
    d26a:	clr.l 1c8ca <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    d270:	move.l 1c8ac <sceneHeight>,d0
    d276:	move.l d0,d1
    d278:	move.l 1c8a8 <sceneWidth>,d0
    d27e:	move.l d1,-(sp)
    d280:	move.l d0,-(sp)
    d282:	jsr 3702 <CstReserveBackdrop>
    d288:	addq.l #8,sp
}
    d28a:	rts

0000d28c <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    d28c:	jsr d112 <killBackDrop>
	killParallax ();
    d292:	jsr d13a <killParallax>
	killZBuffer ();
    d298:	jsr 8526 <killZBuffer>
	sceneWidth = x;
    d29e:	move.l 4(sp),d0
    d2a2:	move.l d0,1c8a8 <sceneWidth>
	sceneHeight = y;
    d2a8:	move.l 8(sp),d0
    d2ac:	move.l d0,1c8ac <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    d2b2:	pea 19411 <PutChar+0x1863>
    d2b8:	jsr 1710c <KPrintF>
    d2be:	addq.l #4,sp
	return reserveBackdrop();
    d2c0:	jsr d264 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    d2c6:	rts

0000d2c8 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    d2c8:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    d2ca:	move.l 12(sp),-(sp)
    d2ce:	jsr 6bc <get2bytes>
    d2d4:	addq.l #4,sp
    d2d6:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    d2da:	move.l 12(sp),-(sp)
    d2de:	jsr 6bc <get2bytes>
    d2e4:	addq.l #4,sp
    d2e6:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    d2e8:	moveq #1,d0
}
    d2ea:	addq.l #8,sp
    d2ec:	rts

0000d2ee <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    d2ee:	   ,-> lea -12(sp),sp
    d2f2:	   |   move.l a6,-(sp)
    d2f4:	   |   move.l d2,-(sp)
	if (me) {
    d2f6:	   |   tst.l 24(sp)
    d2fa:	,--|-- beq.w d390 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    d2fe:	|  |   movea.l 24(sp),a0
    d302:	|  |   move.l 42(a0),d0
    d306:	|  |   move.l 28(sp),-(sp)
    d30a:	|  |   move.l d0,-(sp)
    d30c:	|  '-- jsr d2ee <saveParallaxRecursive>(pc)
    d310:	|      addq.l #8,sp
		FPutC (fp, 1);
    d312:	|      move.l 28(sp),16(sp)
    d318:	|      moveq #1,d0
    d31a:	|      move.l d0,12(sp)
    d31e:	|      move.l 1c818 <DOSBase>,d0
    d324:	|      movea.l d0,a6
    d326:	|      move.l 16(sp),d1
    d32a:	|      move.l 12(sp),d2
    d32e:	|      jsr -312(a6)
    d332:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    d336:	|      movea.l 24(sp),a0
    d33a:	|      move.w 28(a0),d0
    d33e:	|      move.w d0,d0
    d340:	|      andi.l #65535,d0
    d346:	|      move.l 28(sp),-(sp)
    d34a:	|      move.l d0,-(sp)
    d34c:	|      jsr 8d0 <put2bytes>
    d352:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    d354:	|      movea.l 24(sp),a0
    d358:	|      move.w 30(a0),d0
    d35c:	|      move.w d0,d0
    d35e:	|      andi.l #65535,d0
    d364:	|      move.l 28(sp),-(sp)
    d368:	|      move.l d0,-(sp)
    d36a:	|      jsr 8d0 <put2bytes>
    d370:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    d372:	|      movea.l 24(sp),a0
    d376:	|      move.w 32(a0),d0
    d37a:	|      move.w d0,d0
    d37c:	|      andi.l #65535,d0
    d382:	|      move.l 28(sp),-(sp)
    d386:	|      move.l d0,-(sp)
    d388:	|      jsr 8d0 <put2bytes>
    d38e:	|      addq.l #8,sp
	}
}
    d390:	'----> nop
    d392:	       move.l (sp)+,d2
    d394:	       movea.l (sp)+,a6
    d396:	       lea 12(sp),sp
    d39a:	       rts

0000d39c <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    d39c:	pea 19438 <PutChar+0x188a>
    d3a2:	jsr 1710c <KPrintF>
    d3a8:	addq.l #4,sp
	return TRUE;
    d3aa:	moveq #1,d0
    d3ac:	rts

0000d3ae <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    d3ae:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    d3b0:	             move.l 1c8be <allObjectTypes>,(sp)

	while (huntType) {
    d3b6:	      ,----- bra.s d3ce <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    d3b8:	   ,--|----> movea.l (sp),a0
    d3ba:	   |  |      move.l 4(a0),d0
    d3be:	   |  |      cmp.l 8(sp),d0
    d3c2:	   |  |  ,-- bne.s d3c8 <findObjectType+0x1a>
    d3c4:	   |  |  |   move.l (sp),d0
    d3c6:	,--|--|--|-- bra.s d3de <findObjectType+0x30>
		huntType = huntType -> next;
    d3c8:	|  |  |  '-> movea.l (sp),a0
    d3ca:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    d3ce:	|  |  '----> tst.l (sp)
    d3d0:	|  '-------- bne.s d3b8 <findObjectType+0xa>
	}

	return loadObjectType (i);
    d3d2:	|            move.l 8(sp),-(sp)
    d3d6:	|            jsr d49e <loadObjectType>
    d3dc:	|            addq.l #4,sp
}
    d3de:	'----------> addq.l #4,sp
    d3e0:	             rts

0000d3e2 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    d3e2:	             lea -12(sp),sp
	int i, num = 0;
    d3e6:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    d3ea:	             move.l 20(sp),-(sp)
    d3ee:	             jsr d3ae <findObjectType>
    d3f4:	             addq.l #4,sp
    d3f6:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    d3f8:	             clr.l 8(sp)
    d3fc:	   ,-------- bra.s d432 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    d3fe:	,--|-------> movea.l (sp),a0
    d400:	|  |         move.l 38(a0),d1
    d404:	|  |         move.l 8(sp),d0
    d408:	|  |         lsl.l #3,d0
    d40a:	|  |         movea.l d1,a0
    d40c:	|  |         adda.l d0,a0
    d40e:	|  |         move.l (a0),d0
    d410:	|  |         cmp.l 16(sp),d0
    d414:	|  |  ,----- bne.s d42e <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    d416:	|  |  |      movea.l (sp),a0
    d418:	|  |  |      move.l 38(a0),d1
    d41c:	|  |  |      move.l 8(sp),d0
    d420:	|  |  |      lsl.l #3,d0
    d422:	|  |  |      movea.l d1,a0
    d424:	|  |  |      adda.l d0,a0
    d426:	|  |  |      move.l 4(a0),4(sp)
			break;
    d42c:	|  |  |  ,-- bra.s d43e <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    d42e:	|  |  '--|-> addq.l #1,8(sp)
    d432:	|  '-----|-> movea.l (sp),a0
    d434:	|        |   move.l 16(a0),d0
    d438:	|        |   cmp.l 8(sp),d0
    d43c:	'--------|-- bgt.s d3fe <getCombinationFunction+0x1c>
		}
	}

	return num;
    d43e:	         '-> move.l 4(sp),d0
}
    d442:	             lea 12(sp),sp
    d446:	             rts

0000d448 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    d448:	moveq #1,d0
}
    d44a:	rts

0000d44c <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    d44c:	subq.l #8,sp
    d44e:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    d450:	move.l 16(sp),-(sp)
    d454:	jsr 6bc <get2bytes>
    d45a:	addq.l #4,sp
    d45c:	move.l d0,-(sp)
    d45e:	jsr d49e <loadObjectType>
    d464:	addq.l #4,sp
    d466:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    d46a:	movea.l 8(sp),a0
    d46e:	move.l (a0),4(sp)
    d472:	move.l 1c810 <SysBase>,d0
    d478:	movea.l d0,a6
    d47a:	movea.l 4(sp),a1
    d47e:	jsr -690(a6)
	r -> screenName = readString (fp);
    d482:	move.l 16(sp),-(sp)
    d486:	jsr b02 <readString>
    d48c:	addq.l #4,sp
    d48e:	movea.l 8(sp),a0
    d492:	move.l d0,(a0)
	return r;
    d494:	move.l 8(sp),d0
}
    d498:	movea.l (sp)+,a6
    d49a:	addq.l #8,sp
    d49c:	rts

0000d49e <loadObjectType>:

struct objectType * loadObjectType (int i) {
    d49e:	          lea -84(sp),sp
    d4a2:	          move.l a6,-(sp)
    d4a4:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    d4a6:	          moveq #42,d0
    d4a8:	          move.l d0,84(sp)
    d4ac:	          clr.l 80(sp)
    d4b0:	          move.l 1c810 <SysBase>,d0
    d4b6:	          movea.l d0,a6
    d4b8:	          move.l 84(sp),d0
    d4bc:	          move.l 80(sp),d1
    d4c0:	          jsr -684(a6)
    d4c4:	          move.l d0,76(sp)
    d4c8:	          move.l 76(sp),d0
    d4cc:	          move.l d0,72(sp)

    if (newType) {
    d4d0:	,-------- beq.w d74a <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    d4d4:	|         move.l 96(sp),-(sp)
    d4d8:	|         jsr 76d8 <openObjectSlice>
    d4de:	|         addq.l #4,sp
    d4e0:	|         tst.w d0
    d4e2:	+-------- beq.w d74a <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    d4e6:	|         move.l 1c7f8 <bigDataFile>,d0
    d4ec:	|         move.l d0,-(sp)
    d4ee:	|         jsr 6bc <get2bytes>
    d4f4:	|         addq.l #4,sp
    d4f6:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    d4fa:	|         move.l 1c7f8 <bigDataFile>,64(sp)
    d502:	|         move.l 1c818 <DOSBase>,d0
    d508:	|         movea.l d0,a6
    d50a:	|         move.l 64(sp),d1
    d50e:	|         jsr -306(a6)
    d512:	|         move.l d0,60(sp)
    d516:	|         move.l 60(sp),d0
    d51a:	|         move.l d0,d0
    d51c:	|         movea.l 72(sp),a0
    d520:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    d524:	|         move.l 1c7f8 <bigDataFile>,56(sp)
    d52c:	|         move.l 1c818 <DOSBase>,d0
    d532:	|         movea.l d0,a6
    d534:	|         move.l 56(sp),d1
    d538:	|         jsr -306(a6)
    d53c:	|         move.l d0,52(sp)
    d540:	|         move.l 52(sp),d0
    d544:	|         move.l d0,d0
    d546:	|         movea.l 72(sp),a0
    d54a:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    d54e:	|         move.l 1c7f8 <bigDataFile>,48(sp)
    d556:	|         move.l 1c818 <DOSBase>,d0
    d55c:	|         movea.l d0,a6
    d55e:	|         move.l 48(sp),d1
    d562:	|         jsr -306(a6)
    d566:	|         move.l d0,44(sp)
    d56a:	|         move.l 44(sp),d0
    d56e:	|         move.l d0,d0
    d570:	|         movea.l 72(sp),a0
    d574:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    d578:	|         move.l 1c7f8 <bigDataFile>,40(sp)
    d580:	|         move.l 1c818 <DOSBase>,d0
    d586:	|         movea.l d0,a6
    d588:	|         move.l 40(sp),d1
    d58c:	|         jsr -306(a6)
    d590:	|         move.l d0,36(sp)
    d594:	|         move.l 36(sp),d0
    d598:	|         movea.l 72(sp),a0
    d59c:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    d5a0:	|         move.l 1c7f8 <bigDataFile>,32(sp)
    d5a8:	|         move.l 1c818 <DOSBase>,d0
    d5ae:	|         movea.l d0,a6
    d5b0:	|         move.l 32(sp),d1
    d5b4:	|         jsr -306(a6)
    d5b8:	|         move.l d0,28(sp)
    d5bc:	|         move.l 28(sp),d0
    d5c0:	|         movea.l 72(sp),a0
    d5c4:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    d5c8:	|         move.l 1c7f8 <bigDataFile>,d0
    d5ce:	|         move.l d0,-(sp)
    d5d0:	|         jsr 718 <get4bytes>
    d5d6:	|         addq.l #4,sp
    d5d8:	|         movea.l 72(sp),a0
    d5dc:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    d5e0:	|         move.l 1c7f8 <bigDataFile>,d0
    d5e6:	|         move.l d0,-(sp)
    d5e8:	|         jsr 6bc <get2bytes>
    d5ee:	|         addq.l #4,sp
    d5f0:	|         movea.l 72(sp),a0
    d5f4:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    d5f8:	|         move.l 1c7f8 <bigDataFile>,24(sp)
    d600:	|         move.l 1c818 <DOSBase>,d0
    d606:	|         movea.l d0,a6
    d608:	|         move.l 24(sp),d1
    d60c:	|         jsr -306(a6)
    d610:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    d614:	|         move.l 1c7f8 <bigDataFile>,d0
    d61a:	|         move.l d0,-(sp)
    d61c:	|         jsr 7d8 <getFloat>
    d622:	|         addq.l #4,sp
            getFloat(bigDataFile);
    d624:	|         move.l 1c7f8 <bigDataFile>,d0
    d62a:	|         move.l d0,-(sp)
    d62c:	|         jsr 7d8 <getFloat>
    d632:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    d634:	|         move.l 1c7f8 <bigDataFile>,d0
    d63a:	|         move.l d0,-(sp)
    d63c:	|         jsr 6bc <get2bytes>
    d642:	|         addq.l #4,sp
    d644:	|         move.l d0,d0
    d646:	|         movea.l 72(sp),a0
    d64a:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    d64e:	|         move.l 1c7f8 <bigDataFile>,d0
    d654:	|         move.l d0,-(sp)
    d656:	|         jsr 6bc <get2bytes>
    d65c:	|         addq.l #4,sp
    d65e:	|         movea.l 72(sp),a0
    d662:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    d666:	|         movea.l 72(sp),a0
    d66a:	|         move.l 16(a0),d0
    d66e:	|  ,----- beq.s d6a0 <loadObjectType+0x202>
    d670:	|  |      movea.l 72(sp),a0
    d674:	|  |      move.l 16(a0),d0
    d678:	|  |      lsl.l #3,d0
    d67a:	|  |      move.l d0,16(sp)
    d67e:	|  |      clr.l 12(sp)
    d682:	|  |      move.l 1c810 <SysBase>,d0
    d688:	|  |      movea.l d0,a6
    d68a:	|  |      move.l 16(sp),d0
    d68e:	|  |      move.l 12(sp),d1
    d692:	|  |      jsr -684(a6)
    d696:	|  |      move.l d0,8(sp)
    d69a:	|  |      move.l 8(sp),d0
    d69e:	|  |  ,-- bra.s d6a2 <loadObjectType+0x204>
    d6a0:	|  '--|-> moveq #0,d0
    d6a2:	|     '-> movea.l 72(sp),a0
    d6a6:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    d6aa:	|         clr.l 88(sp)
    d6ae:	|     ,-- bra.s d6fe <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    d6b0:	|  ,--|-> move.l 1c7f8 <bigDataFile>,d1
    d6b6:	|  |  |   movea.l 72(sp),a0
    d6ba:	|  |  |   movea.l 38(a0),a0
    d6be:	|  |  |   move.l 88(sp),d0
    d6c2:	|  |  |   lsl.l #3,d0
    d6c4:	|  |  |   lea (0,a0,d0.l),a2
    d6c8:	|  |  |   move.l d1,-(sp)
    d6ca:	|  |  |   jsr 6bc <get2bytes>
    d6d0:	|  |  |   addq.l #4,sp
    d6d2:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    d6d4:	|  |  |   move.l 1c7f8 <bigDataFile>,d1
    d6da:	|  |  |   movea.l 72(sp),a0
    d6de:	|  |  |   movea.l 38(a0),a0
    d6e2:	|  |  |   move.l 88(sp),d0
    d6e6:	|  |  |   lsl.l #3,d0
    d6e8:	|  |  |   lea (0,a0,d0.l),a2
    d6ec:	|  |  |   move.l d1,-(sp)
    d6ee:	|  |  |   jsr 6bc <get2bytes>
    d6f4:	|  |  |   addq.l #4,sp
    d6f6:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    d6fa:	|  |  |   addq.l #1,88(sp)
    d6fe:	|  |  '-> movea.l 72(sp),a0
    d702:	|  |      move.l 16(a0),d0
    d706:	|  |      cmp.l 88(sp),d0
    d70a:	|  '----- bgt.s d6b0 <loadObjectType+0x212>
            }
            finishAccess();
    d70c:	|         jsr 7508 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    d712:	|         move.l 68(sp),-(sp)
    d716:	|         jsr 7512 <getNumberedString>
    d71c:	|         addq.l #4,sp
    d71e:	|         movea.l 72(sp),a0
    d722:	|         move.l d0,(a0)
            newType->objectNum = i;
    d724:	|         movea.l 72(sp),a0
    d728:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    d72e:	|         move.l 1c8be <allObjectTypes>,d0
    d734:	|         movea.l 72(sp),a0
    d738:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    d73c:	|         move.l 72(sp),1c8be <allObjectTypes>
            return newType;
    d744:	|         move.l 72(sp),d0
    d748:	|     ,-- bra.s d74c <loadObjectType+0x2ae>
        }
    }
    return NULL;
    d74a:	'-----|-> moveq #0,d0
}
    d74c:	      '-> movea.l (sp)+,a2
    d74e:	          movea.l (sp)+,a6
    d750:	          lea 84(sp),sp
    d754:	          rts

0000d756 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    d756:	             lea -16(sp),sp
    d75a:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    d75c:	             move.l #116926,16(sp)

	while (* huntRegion) {
    d764:	   ,-------- bra.s d7d8 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    d766:	,--|-------> movea.l 16(sp),a0
    d76a:	|  |         move.l (a0),d0
    d76c:	|  |         cmp.l 24(sp),d0
    d770:	|  |  ,----- bne.s d7ca <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    d772:	|  |  |      movea.l 24(sp),a0
    d776:	|  |  |      move.l 8(a0),d0
    d77a:	|  |  |      movea.l 16(sp),a0
    d77e:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    d780:	|  |  |      movea.l 24(sp),a0
    d784:	|  |  |      move.l 38(a0),12(sp)
    d78a:	|  |  |      move.l 1c810 <SysBase>,d0
    d790:	|  |  |      movea.l d0,a6
    d792:	|  |  |      movea.l 12(sp),a1
    d796:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    d79a:	|  |  |      movea.l 24(sp),a0
    d79e:	|  |  |      move.l (a0),8(sp)
    d7a2:	|  |  |      move.l 1c810 <SysBase>,d0
    d7a8:	|  |  |      movea.l d0,a6
    d7aa:	|  |  |      movea.l 8(sp),a1
    d7ae:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    d7b2:	|  |  |      move.l 24(sp),4(sp)
    d7b8:	|  |  |      move.l 1c810 <SysBase>,d0
    d7be:	|  |  |      movea.l d0,a6
    d7c0:	|  |  |      movea.l 4(sp),a1
    d7c4:	|  |  |      jsr -690(a6)
			return;
    d7c8:	|  |  |  ,-- bra.s d7ee <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    d7ca:	|  |  '--|-> movea.l 16(sp),a0
    d7ce:	|  |     |   move.l (a0),d0
    d7d0:	|  |     |   move.l d0,d1
    d7d2:	|  |     |   addq.l #8,d1
    d7d4:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    d7d8:	|  '-----|-> movea.l 16(sp),a0
    d7dc:	|        |   move.l (a0),d0
    d7de:	'--------|-- bne.s d766 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    d7e0:	         |   pea 1945f <PutChar+0x18b1>
    d7e6:	         |   jsr 1710c <KPrintF>
    d7ec:	         |   addq.l #4,sp
}
    d7ee:	         '-> movea.l (sp)+,a6
    d7f0:	             lea 16(sp),sp
    d7f4:	             rts

0000d7f6 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    d7f6:	movea.l 4(sp),a0
    d7fa:	move.l 4(a0),d0
    d7fe:	move.l 8(sp),-(sp)
    d802:	move.l d0,-(sp)
    d804:	jsr 8d0 <put2bytes>
    d80a:	addq.l #8,sp
	writeString (r -> screenName, fp);
    d80c:	movea.l 4(sp),a0
    d810:	move.l (a0),d0
    d812:	move.l 8(sp),-(sp)
    d816:	move.l d0,-(sp)
    d818:	jsr bd8 <writeString>
    d81e:	addq.l #8,sp
    d820:	nop
    d822:	rts

0000d824 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    d824:	                         lea -112(sp),sp
    d828:	                         move.l a6,-(sp)
    d82a:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    d82c:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    d830:	                         move.w 1c8c4 <saveEncoding>,d0
    d836:	                  ,----- beq.s d840 <fileToStack+0x1c>
    d838:	                  |      move.l #103557,d0
    d83e:	                  |  ,-- bra.s d846 <fileToStack+0x22>
    d840:	                  '--|-> move.l #103583,d0
    d846:	                     '-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    d84a:	                         move.l 124(sp),112(sp)
    d850:	                         move.l #1005,108(sp)
    d858:	                         move.l 1c818 <DOSBase>,d0
    d85e:	                         movea.l d0,a6
    d860:	                         move.l 112(sp),d1
    d864:	                         move.l 108(sp),d2
    d868:	                         jsr -30(a6)
    d86c:	                         move.l d0,104(sp)
    d870:	                         move.l 104(sp),d0
    d874:	                         move.l d0,100(sp)
    if (!fp) {
    d878:	                     ,-- bne.s d892 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    d87a:	                     |   move.l 124(sp),-(sp)
    d87e:	                     |   pea 194b6 <PutChar+0x1908>
    d884:	                     |   jsr 1710c <KPrintF>
    d88a:	                     |   addq.l #8,sp
        return FALSE;
    d88c:	                     |   clr.w d0
    d88e:	,--------------------|-- bra.w db88 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    d892:	|                    '-> move.w 1c8c4 <saveEncoding>,d0
    d898:	|                        move.l d0,d0
    d89a:	|                        move.b d0,1c8c2 <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    d8a0:	|                        move.w 1c8c4 <saveEncoding>,d0
    d8a6:	|                        lsr.w #8,d0
    d8a8:	|                        move.l d0,d0
    d8aa:	|                        move.b d0,1c8c3 <encode2>

    while (*checker) {
    d8b0:	|                 ,----- bra.s d914 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    d8b2:	|              ,--|----> move.l 100(sp),30(sp)
    d8b8:	|              |  |      move.l 1c818 <DOSBase>,d0
    d8be:	|              |  |      movea.l d0,a6
    d8c0:	|              |  |      move.l 30(sp),d1
    d8c4:	|              |  |      jsr -306(a6)
    d8c8:	|              |  |      move.l d0,26(sp)
    d8cc:	|              |  |      move.l 26(sp),d1
    d8d0:	|              |  |      movea.l 116(sp),a0
    d8d4:	|              |  |      move.b (a0),d0
    d8d6:	|              |  |      ext.w d0
    d8d8:	|              |  |      movea.w d0,a0
    d8da:	|              |  |      cmpa.l d1,a0
    d8dc:	|              |  |  ,-- beq.s d910 <fileToStack+0xec>
            Close(fp);
    d8de:	|              |  |  |   move.l 100(sp),22(sp)
    d8e4:	|              |  |  |   move.l 1c818 <DOSBase>,d0
    d8ea:	|              |  |  |   movea.l d0,a6
    d8ec:	|              |  |  |   move.l 22(sp),d1
    d8f0:	|              |  |  |   jsr -36(a6)
    d8f4:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    d8f8:	|              |  |  |   move.l 124(sp),-(sp)
    d8fc:	|              |  |  |   pea 194c3 <PutChar+0x1915>
    d902:	|              |  |  |   jsr 1710c <KPrintF>
    d908:	|              |  |  |   addq.l #8,sp
            return FALSE;
    d90a:	|              |  |  |   clr.w d0
    d90c:	+--------------|--|--|-- bra.w db88 <fileToStack+0x364>
        }
        checker++;
    d910:	|              |  |  '-> addq.l #1,116(sp)
    while (*checker) {
    d914:	|              |  '----> movea.l 116(sp),a0
    d918:	|              |         move.b (a0),d0
    d91a:	|              '-------- bne.s d8b2 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    d91c:	|                        move.w 1c8c4 <saveEncoding>,d0
    d922:	|  ,-------------------- beq.s d996 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    d924:	|  |                     move.l 100(sp),-(sp)
    d928:	|  |                     jsr db92 <readStringEncoded>
    d92e:	|  |                     addq.l #4,sp
    d930:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    d934:	|  |                     pea 19504 <PutChar+0x1956>
    d93a:	|  |                     move.l 100(sp),-(sp)
    d93e:	|  |                     jsr 13af4 <strcmp>
    d944:	|  |                     addq.l #8,sp
    d946:	|  |                     tst.l d0
    d948:	|  |                 ,-- beq.s d97c <fileToStack+0x158>
            Close(fp);
    d94a:	|  |                 |   move.l 100(sp),88(sp)
    d950:	|  |                 |   move.l 1c818 <DOSBase>,d0
    d956:	|  |                 |   movea.l d0,a6
    d958:	|  |                 |   move.l 88(sp),d1
    d95c:	|  |                 |   jsr -36(a6)
    d960:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    d964:	|  |                 |   move.l 124(sp),-(sp)
    d968:	|  |                 |   pea 19513 <PutChar+0x1965>
    d96e:	|  |                 |   jsr 1710c <KPrintF>
    d974:	|  |                 |   addq.l #8,sp
            return FALSE;
    d976:	|  |                 |   clr.w d0
    d978:	+--|-----------------|-- bra.w db88 <fileToStack+0x364>
        }
        FreeVec(checker);
    d97c:	|  |                 '-> move.l 96(sp),92(sp)
    d982:	|  |                     move.l 1c810 <SysBase>,d0
    d988:	|  |                     movea.l d0,a6
    d98a:	|  |                     movea.l 92(sp),a1
    d98e:	|  |                     jsr -690(a6)
        checker = NULL;
    d992:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    d996:	|  >-------------------> move.w 1c8c4 <saveEncoding>,d0
    d99c:	|  |     ,-------------- beq.w dad0 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    d9a0:	|  |     |               move.l 100(sp),76(sp)
    d9a6:	|  |     |               move.l 1c818 <DOSBase>,d0
    d9ac:	|  |     |               movea.l d0,a6
    d9ae:	|  |     |               move.l 76(sp),d1
    d9b2:	|  |     |               jsr -306(a6)
    d9b6:	|  |     |               move.l d0,72(sp)
    d9ba:	|  |     |               move.l 72(sp),d0
    d9be:	|  |     |               move.b 1c8c2 <encode1>,d1
    d9c4:	|  |     |               ext.w d1
    d9c6:	|  |     |               ext.l d1
    d9c8:	|  |     |               move.l d0,d2
    d9ca:	|  |     |               eor.l d1,d2
    d9cc:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    d9d0:	|  |     |               moveq #-1,d0
    d9d2:	|  |     |               cmp.l 68(sp),d0
    d9d6:	|  |  ,--|-------------- beq.w db66 <fileToStack+0x342>

            char i = (char) tmp;
    d9da:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    d9e0:	|  |  |  |               move.b 67(sp),d0
    d9e4:	|  |  |  |               ext.w d0
    d9e6:	|  |  |  |               movea.w d0,a0
    d9e8:	|  |  |  |               moveq #2,d2
    d9ea:	|  |  |  |               cmp.l a0,d2
    d9ec:	|  |  |  |     ,-------- beq.s da68 <fileToStack+0x244>
    d9ee:	|  |  |  |     |         moveq #2,d0
    d9f0:	|  |  |  |     |         cmp.l a0,d0
    d9f2:	|  |  |  |  ,--|-------- blt.w da9e <fileToStack+0x27a>
    d9f6:	|  |  |  |  |  |         cmpa.w #0,a0
    d9fa:	|  |  |  |  |  |     ,-- beq.s da06 <fileToStack+0x1e2>
    d9fc:	|  |  |  |  |  |     |   moveq #1,d2
    d9fe:	|  |  |  |  |  |     |   cmp.l a0,d2
    da00:	|  |  |  |  |  |  ,--|-- beq.s da42 <fileToStack+0x21e>
    da02:	|  |  |  |  +--|--|--|-- bra.w da9e <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    da06:	|  |  |  |  |  |  |  '-> move.l 100(sp),-(sp)
    da0a:	|  |  |  |  |  |  |      jsr db92 <readStringEncoded>
    da10:	|  |  |  |  |  |  |      addq.l #4,sp
    da12:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    da16:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    da1a:	|  |  |  |  |  |  |      lea 14(sp),a0
    da1e:	|  |  |  |  |  |  |      move.l a0,-(sp)
    da20:	|  |  |  |  |  |  |      jsr 1486a <makeTextVar>
    da26:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    da28:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    da2e:	|  |  |  |  |  |  |      move.l 1c810 <SysBase>,d0
    da34:	|  |  |  |  |  |  |      movea.l d0,a6
    da36:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    da3a:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    da3e:	|  |  |  |  |  |  |  ,-- bra.w daf6 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    da42:	|  |  |  |  |  |  '--|-> move.l 100(sp),-(sp)
    da46:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    da4c:	|  |  |  |  |  |     |   addq.l #4,sp
    da4e:	|  |  |  |  |  |     |   move.l d0,-(sp)
    da50:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    da54:	|  |  |  |  |  |     |   lea 18(sp),a0
    da58:	|  |  |  |  |  |     |   move.l a0,-(sp)
    da5a:	|  |  |  |  |  |     |   jsr 14f3a <setVariable>
    da60:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    da64:	|  |  |  |  |  |     +-- bra.w daf6 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    da68:	|  |  |  |  |  '-----|-> move.l 100(sp),62(sp)
    da6e:	|  |  |  |  |        |   move.l 1c818 <DOSBase>,d0
    da74:	|  |  |  |  |        |   movea.l d0,a6
    da76:	|  |  |  |  |        |   move.l 62(sp),d1
    da7a:	|  |  |  |  |        |   jsr -306(a6)
    da7e:	|  |  |  |  |        |   move.l d0,58(sp)
    da82:	|  |  |  |  |        |   move.l 58(sp),d0
    da86:	|  |  |  |  |        |   move.l d0,-(sp)
    da88:	|  |  |  |  |        |   pea 1 <_start+0x1>
    da8c:	|  |  |  |  |        |   lea 18(sp),a0
    da90:	|  |  |  |  |        |   move.l a0,-(sp)
    da92:	|  |  |  |  |        |   jsr 14f3a <setVariable>
    da98:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    da9c:	|  |  |  |  |        +-- bra.s daf6 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    da9e:	|  |  |  |  '--------|-> move.l 124(sp),-(sp)
    daa2:	|  |  |  |           |   pea 19595 <PutChar+0x19e7>
    daa8:	|  |  |  |           |   jsr 1710c <KPrintF>
    daae:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    dab0:	|  |  |  |           |   move.l 100(sp),46(sp)
    dab6:	|  |  |  |           |   move.l 1c818 <DOSBase>,d0
    dabc:	|  |  |  |           |   movea.l d0,a6
    dabe:	|  |  |  |           |   move.l 46(sp),d1
    dac2:	|  |  |  |           |   jsr -36(a6)
    dac6:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    daca:	|  |  |  |           |   clr.w d0
    dacc:	+--|--|--|-----------|-- bra.w db88 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    dad0:	|  |  |  '-----------|-> move.l 100(sp),-(sp)
    dad4:	|  |  |              |   jsr dc58 <readTextPlain>
    dada:	|  |  |              |   addq.l #4,sp
    dadc:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    dae0:	|  |  |        ,-----|-- beq.w db6a <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    dae4:	|  |  |        |     |   move.l 80(sp),-(sp)
    dae8:	|  |  |        |     |   lea 14(sp),a0
    daec:	|  |  |        |     |   move.l a0,-(sp)
    daee:	|  |  |        |     |   jsr 1486a <makeTextVar>
    daf4:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    daf6:	|  |  |        |     '-> movea.l 128(sp),a0
    dafa:	|  |  |        |         move.l (a0),d0
    dafc:	|  |  |        |  ,----- bne.s db2c <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    dafe:	|  |  |        |  |      move.l 128(sp),d0
    db02:	|  |  |        |  |      move.l d0,-(sp)
    db04:	|  |  |        |  |      lea 14(sp),a0
    db08:	|  |  |        |  |      move.l a0,-(sp)
    db0a:	|  |  |        |  |      jsr 13f0a <addVarToStackQuick>
    db10:	|  |  |        |  |      addq.l #8,sp
    db12:	|  |  |        |  |      tst.w d0
    db14:	|  |  |        |  |  ,-- bne.s db1a <fileToStack+0x2f6>
    db16:	|  |  |        |  |  |   clr.w d0
    db18:	+--|--|--------|--|--|-- bra.s db88 <fileToStack+0x364>
            sH->last = sH->first;
    db1a:	|  |  |        |  |  '-> movea.l 128(sp),a0
    db1e:	|  |  |        |  |      move.l (a0),d0
    db20:	|  |  |        |  |      movea.l 128(sp),a0
    db24:	|  |  |        |  |      move.l d0,4(a0)
    db28:	|  +--|--------|--|----- bra.w d996 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    db2c:	|  |  |        |  '----> movea.l 128(sp),a0
    db30:	|  |  |        |         move.l 4(a0),d0
    db34:	|  |  |        |         addq.l #8,d0
    db36:	|  |  |        |         move.l d0,-(sp)
    db38:	|  |  |        |         lea 14(sp),a0
    db3c:	|  |  |        |         move.l a0,-(sp)
    db3e:	|  |  |        |         jsr 13f0a <addVarToStackQuick>
    db44:	|  |  |        |         addq.l #8,sp
    db46:	|  |  |        |         tst.w d0
    db48:	|  |  |        |     ,-- bne.s db4e <fileToStack+0x32a>
    db4a:	|  |  |        |     |   clr.w d0
    db4c:	+--|--|--------|-----|-- bra.s db88 <fileToStack+0x364>
            sH->last = sH->last->next;
    db4e:	|  |  |        |     '-> movea.l 128(sp),a0
    db52:	|  |  |        |         movea.l 4(a0),a0
    db56:	|  |  |        |         move.l 8(a0),d0
    db5a:	|  |  |        |         movea.l 128(sp),a0
    db5e:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    db62:	|  '--|--------|-------- bra.w d996 <fileToStack+0x172>
            if (tmp == -1) break;
    db66:	|     '--------|-------> nop
    db68:	|              |     ,-- bra.s db6c <fileToStack+0x348>
            if (!line) break;
    db6a:	|              '-----|-> nop
        }
    }
    Close(fp);
    db6c:	|                    '-> move.l 100(sp),38(sp)
    db72:	|                        move.l 1c818 <DOSBase>,d0
    db78:	|                        movea.l d0,a6
    db7a:	|                        move.l 38(sp),d1
    db7e:	|                        jsr -36(a6)
    db82:	|                        move.l d0,34(sp)
    return TRUE;
    db86:	|                        moveq #1,d0
}
    db88:	'----------------------> move.l (sp)+,d2
    db8a:	                         movea.l (sp)+,a6
    db8c:	                         lea 112(sp),sp
    db90:	                         rts

0000db92 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    db92:	          lea -32(sp),sp
    db96:	          move.l a6,-(sp)
    db98:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    db9a:	          move.l 44(sp),-(sp)
    db9e:	          jsr 6bc <get2bytes>
    dba4:	          addq.l #4,sp
    dba6:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    dbaa:	          move.l 32(sp),d0
    dbae:	          addq.l #1,d0
    dbb0:	          move.l d0,28(sp)
    dbb4:	          clr.l 24(sp)
    dbb8:	          move.l 1c810 <SysBase>,d0
    dbbe:	          movea.l d0,a6
    dbc0:	          move.l 28(sp),d0
    dbc4:	          move.l 24(sp),d1
    dbc8:	          jsr -684(a6)
    dbcc:	          move.l d0,20(sp)
    dbd0:	          move.l 20(sp),d0
    dbd4:	          move.l d0,16(sp)
    if (!s) return NULL;
    dbd8:	      ,-- bne.s dbde <readStringEncoded+0x4c>
    dbda:	      |   moveq #0,d0
    dbdc:	,-----|-- bra.s dc4e <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    dbde:	|     '-> clr.l 36(sp)
    dbe2:	|     ,-- bra.s dc34 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    dbe4:	|  ,--|-> move.l 44(sp),12(sp)
    dbea:	|  |  |   move.l 1c818 <DOSBase>,d0
    dbf0:	|  |  |   movea.l d0,a6
    dbf2:	|  |  |   move.l 12(sp),d1
    dbf6:	|  |  |   jsr -306(a6)
    dbfa:	|  |  |   move.l d0,8(sp)
    dbfe:	|  |  |   move.l 8(sp),d0
    dc02:	|  |  |   move.l d0,d1
    dc04:	|  |  |   move.b 1c8c2 <encode1>,d2
    dc0a:	|  |  |   move.l 36(sp),d0
    dc0e:	|  |  |   movea.l 16(sp),a0
    dc12:	|  |  |   adda.l d0,a0
    dc14:	|  |  |   move.b d1,d0
    dc16:	|  |  |   eor.b d2,d0
    dc18:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    dc1a:	|  |  |   move.b 1c8c2 <encode1>,d0
    dc20:	|  |  |   move.b d0,d1
    dc22:	|  |  |   move.b 1c8c3 <encode2>,d0
    dc28:	|  |  |   add.b d1,d0
    dc2a:	|  |  |   move.b d0,1c8c2 <encode1>
    for (a = 0; a < len; a++) {
    dc30:	|  |  |   addq.l #1,36(sp)
    dc34:	|  |  '-> move.l 36(sp),d0
    dc38:	|  |      cmp.l 32(sp),d0
    dc3c:	|  '----- blt.s dbe4 <readStringEncoded+0x52>
    }
    s[len] = 0;
    dc3e:	|         move.l 32(sp),d0
    dc42:	|         movea.l 16(sp),a0
    dc46:	|         adda.l d0,a0
    dc48:	|         clr.b (a0)
    return s;
    dc4a:	|         move.l 16(sp),d0
}
    dc4e:	'-------> move.l (sp)+,d2
    dc50:	          movea.l (sp)+,a6
    dc52:	          lea 32(sp),sp
    dc56:	          rts

0000dc58 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    dc58:	             lea -104(sp),sp
    dc5c:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    dc60:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    dc64:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    dc6a:	             move.l 124(sp),106(sp)
    dc70:	             clr.l 102(sp)
    dc74:	             clr.l 98(sp)
    dc78:	             move.l 1c818 <DOSBase>,d0
    dc7e:	             movea.l d0,a6
    dc80:	             move.l 106(sp),d1
    dc84:	             move.l 102(sp),d2
    dc88:	             move.l 98(sp),d3
    dc8c:	             jsr -66(a6)
    dc90:	             move.l d0,94(sp)
    dc94:	             move.l 94(sp),d0
    dc98:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    dc9c:	   ,-------- bra.s dce0 <readTextPlain+0x88>
        tmp = FGetC(fp);
    dc9e:	,--|-------> move.l 124(sp),22(sp)
    dca4:	|  |         move.l 1c818 <DOSBase>,d0
    dcaa:	|  |         movea.l d0,a6
    dcac:	|  |         move.l 22(sp),d1
    dcb0:	|  |         jsr -306(a6)
    dcb4:	|  |         move.l d0,18(sp)
    dcb8:	|  |         move.l 18(sp),d0
    dcbc:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    dcc0:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    dcc6:	|  |         cmpi.b #10,17(sp)
    dccc:	|  |  ,----- beq.s dcd6 <readTextPlain+0x7e>
    dcce:	|  |  |      moveq #-1,d0
    dcd0:	|  |  |      cmp.l 110(sp),d0
    dcd4:	|  |  |  ,-- bne.s dcdc <readTextPlain+0x84>
            keepGoing = FALSE;
    dcd6:	|  |  '--|-> clr.w 114(sp)
    dcda:	|  +-----|-- bra.s dce0 <readTextPlain+0x88>
        } else {
            stringSize++;
    dcdc:	|  |     '-> addq.l #1,116(sp)
    while (keepGoing) {
    dce0:	|  '-------> tst.w 114(sp)
    dce4:	'----------- bne.s dc9e <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    dce6:	             tst.l 116(sp)
    dcea:	         ,-- bne.s dcfa <readTextPlain+0xa2>
    dcec:	         |   moveq #-1,d0
    dcee:	         |   cmp.l 110(sp),d0
    dcf2:	         +-- bne.s dcfa <readTextPlain+0xa2>
        return NULL;
    dcf4:	         |   moveq #0,d0
    dcf6:	      ,--|-- bra.w dde0 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    dcfa:	      |  '-> move.l 124(sp),86(sp)
    dd00:	      |      move.l 90(sp),82(sp)
    dd06:	      |      moveq #-1,d0
    dd08:	      |      move.l d0,78(sp)
    dd0c:	      |      move.l 1c818 <DOSBase>,d0
    dd12:	      |      movea.l d0,a6
    dd14:	      |      move.l 86(sp),d1
    dd18:	      |      move.l 82(sp),d2
    dd1c:	      |      move.l 78(sp),d3
    dd20:	      |      jsr -66(a6)
    dd24:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    dd28:	      |      move.l 116(sp),d0
    dd2c:	      |      addq.l #1,d0
    dd2e:	      |      move.l d0,70(sp)
    dd32:	      |      clr.l 66(sp)
    dd36:	      |      move.l 1c810 <SysBase>,d0
    dd3c:	      |      movea.l d0,a6
    dd3e:	      |      move.l 70(sp),d0
    dd42:	      |      move.l 66(sp),d1
    dd46:	      |      jsr -684(a6)
    dd4a:	      |      move.l d0,62(sp)
    dd4e:	      |      move.l 62(sp),d0
    dd52:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    dd56:	      |  ,-- bne.s dd5e <readTextPlain+0x106>
    dd58:	      |  |   moveq #0,d0
    dd5a:	      +--|-- bra.w dde0 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    dd5e:	      |  '-> move.l 124(sp),54(sp)
    dd64:	      |      move.l 58(sp),50(sp)
    dd6a:	      |      moveq #1,d0
    dd6c:	      |      move.l d0,46(sp)
    dd70:	      |      move.l 116(sp),42(sp)
    dd76:	      |      move.l 1c818 <DOSBase>,d0
    dd7c:	      |      movea.l d0,a6
    dd7e:	      |      move.l 54(sp),d1
    dd82:	      |      move.l 50(sp),d2
    dd86:	      |      move.l 46(sp),d3
    dd8a:	      |      move.l 42(sp),d4
    dd8e:	      |      jsr -324(a6)
    dd92:	      |      move.l d0,38(sp)
    dd96:	      |      move.l 38(sp),d0
    dd9a:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    dd9e:	      |      move.l 34(sp),d0
    dda2:	      |      cmp.l 116(sp),d0
    dda6:	      |  ,-- beq.s ddb6 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    dda8:	      |  |   pea 195ca <PutChar+0x1a1c>
    ddae:	      |  |   jsr 1710c <KPrintF>
    ddb4:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    ddb6:	      |  '-> move.l 124(sp),30(sp)
    ddbc:	      |      move.l 1c818 <DOSBase>,d0
    ddc2:	      |      movea.l d0,a6
    ddc4:	      |      move.l 30(sp),d1
    ddc8:	      |      jsr -306(a6)
    ddcc:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    ddd0:	      |      move.l 116(sp),d0
    ddd4:	      |      movea.l 58(sp),a0
    ddd8:	      |      adda.l d0,a0
    ddda:	      |      clr.b (a0)
    }

    return reply;
    dddc:	      |      move.l 58(sp),d0
}
    dde0:	      '----> movem.l (sp)+,d2-d4/a6
    dde4:	             lea 104(sp),sp
    dde8:	             rts

0000ddea <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    ddea:	                      lea -144(sp),sp
    ddee:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    ddf2:	                      move.l 160(sp),148(sp)
    ddf8:	                      move.l #1006,144(sp)
    de00:	                      move.l 1c818 <DOSBase>,d0
    de06:	                      movea.l d0,a6
    de08:	                      move.l 148(sp),d1
    de0c:	                      move.l 144(sp),d2
    de10:	                      jsr -30(a6)
    de14:	                      move.l d0,140(sp)
    de18:	                      move.l 140(sp),d0
    de1c:	                      move.l d0,136(sp)

    if (!fp) {
    de20:	                  ,-- bne.s de3a <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    de22:	                  |   move.l 160(sp),-(sp)
    de26:	                  |   pea 195eb <PutChar+0x1a3d>
    de2c:	                  |   jsr 1710c <KPrintF>
    de32:	                  |   addq.l #8,sp
        return FALSE;
    de34:	                  |   clr.w d0
    de36:	,-----------------|-- bra.w e0f6 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    de3a:	|                 '-> movea.l 164(sp),a0
    de3e:	|                     movea.l 4(a0),a0
    de42:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    de46:	|                     move.w 1c8c4 <saveEncoding>,d0
    de4c:	|                     move.l d0,d0
    de4e:	|                     move.b d0,1c8c2 <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    de54:	|                     move.w 1c8c4 <saveEncoding>,d0
    de5a:	|                     lsr.w #8,d0
    de5c:	|                     move.l d0,d0
    de5e:	|                     move.b d0,1c8c3 <encode2>

    if (saveEncoding) {
    de64:	|                     move.w 1c8c4 <saveEncoding>,d0
    de6a:	|                 ,-- beq.s debc <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    de6c:	|                 |   move.l 136(sp),116(sp)
    de72:	|                 |   move.l #103557,112(sp)
    de7a:	|                 |   moveq #99,d0
    de7c:	|                 |   not.b d0
    de7e:	|                 |   add.l sp,d0
    de80:	|                 |   addi.l #-144,d0
    de86:	|                 |   move.l d0,108(sp)
    de8a:	|                 |   move.l 1c818 <DOSBase>,d0
    de90:	|                 |   movea.l d0,a6
    de92:	|                 |   move.l 116(sp),d1
    de96:	|                 |   move.l 112(sp),d2
    de9a:	|                 |   move.l 108(sp),d3
    de9e:	|                 |   jsr -354(a6)
    dea2:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    dea6:	|                 |   move.l 136(sp),-(sp)
    deaa:	|                 |   pea 19504 <PutChar+0x1956>
    deb0:	|                 |   jsr e100 <writeStringEncoded>
    deb6:	|                 |   addq.l #8,sp
    deb8:	|  ,--------------|-- bra.w e0ce <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    debc:	|  |              '-> move.l 136(sp),132(sp)
    dec2:	|  |                  move.l #103583,128(sp)
    deca:	|  |                  moveq #99,d1
    decc:	|  |                  not.b d1
    dece:	|  |                  add.l sp,d1
    ded0:	|  |                  addi.l #-144,d1
    ded6:	|  |                  move.l d1,124(sp)
    deda:	|  |                  move.l 1c818 <DOSBase>,d0
    dee0:	|  |                  movea.l d0,a6
    dee2:	|  |                  move.l 132(sp),d1
    dee6:	|  |                  move.l 128(sp),d2
    deea:	|  |                  move.l 124(sp),d3
    deee:	|  |                  jsr -354(a6)
    def2:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    def6:	|  +----------------- bra.w e0ce <stackToFile+0x2e4>
        if (saveEncoding) {
    defa:	|  |  ,-------------> move.w 1c8c4 <saveEncoding>,d0
    df00:	|  |  |     ,-------- beq.w e052 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    df04:	|  |  |     |         movea.l 152(sp),a0
    df08:	|  |  |     |         move.l (a0),d0
    df0a:	|  |  |     |         moveq #1,d1
    df0c:	|  |  |     |         cmp.l d0,d1
    df0e:	|  |  |     |     ,-- beq.s df5e <stackToFile+0x174>
    df10:	|  |  |     |     |   moveq #3,d1
    df12:	|  |  |     |     |   cmp.l d0,d1
    df14:	|  |  |     |  ,--|-- bne.w e020 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    df18:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    df1e:	|  |  |     |  |  |   move.b 1c8c2 <encode1>,d0
    df24:	|  |  |     |  |  |   ext.w d0
    df26:	|  |  |     |  |  |   movea.w d0,a0
    df28:	|  |  |     |  |  |   move.l a0,72(sp)
    df2c:	|  |  |     |  |  |   move.l 1c818 <DOSBase>,d0
    df32:	|  |  |     |  |  |   movea.l d0,a6
    df34:	|  |  |     |  |  |   move.l 76(sp),d1
    df38:	|  |  |     |  |  |   move.l 72(sp),d2
    df3c:	|  |  |     |  |  |   jsr -312(a6)
    df40:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    df44:	|  |  |     |  |  |   movea.l 152(sp),a0
    df48:	|  |  |     |  |  |   move.l 4(a0),d0
    df4c:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    df50:	|  |  |     |  |  |   move.l d0,-(sp)
    df52:	|  |  |     |  |  |   jsr e100 <writeStringEncoded>
    df58:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    df5a:	|  |  |  ,--|--|--|-- bra.w e0c4 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    df5e:	|  |  |  |  |  |  '-> movea.l 152(sp),a0
    df62:	|  |  |  |  |  |      move.l 4(a0),d0
    df66:	|  |  |  |  |  |  ,-- bmi.s dfd6 <stackToFile+0x1ec>
    df68:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    df6c:	|  |  |  |  |  |  |   move.l 4(a0),d0
    df70:	|  |  |  |  |  |  |   cmpi.l #255,d0
    df76:	|  |  |  |  |  |  +-- bgt.s dfd6 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    df78:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    df7e:	|  |  |  |  |  |  |   move.b 1c8c2 <encode1>,d0
    df84:	|  |  |  |  |  |  |   eori.b #2,d0
    df88:	|  |  |  |  |  |  |   ext.w d0
    df8a:	|  |  |  |  |  |  |   movea.w d0,a0
    df8c:	|  |  |  |  |  |  |   move.l a0,60(sp)
    df90:	|  |  |  |  |  |  |   move.l 1c818 <DOSBase>,d0
    df96:	|  |  |  |  |  |  |   movea.l d0,a6
    df98:	|  |  |  |  |  |  |   move.l 64(sp),d1
    df9c:	|  |  |  |  |  |  |   move.l 60(sp),d2
    dfa0:	|  |  |  |  |  |  |   jsr -312(a6)
    dfa4:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    dfa8:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    dfae:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    dfb2:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    dfb8:	|  |  |  |  |  |  |   move.l 1c818 <DOSBase>,d0
    dfbe:	|  |  |  |  |  |  |   movea.l d0,a6
    dfc0:	|  |  |  |  |  |  |   move.l 52(sp),d1
    dfc4:	|  |  |  |  |  |  |   move.l 48(sp),d2
    dfc8:	|  |  |  |  |  |  |   jsr -312(a6)
    dfcc:	|  |  |  |  |  |  |   move.l d0,44(sp)
    dfd0:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    dfd2:	|  |  |  +--|--|--|-- bra.w e0c4 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    dfd6:	|  |  |  |  |  |  '-> move.l 136(sp),40(sp)
    dfdc:	|  |  |  |  |  |      move.b 1c8c2 <encode1>,d0
    dfe2:	|  |  |  |  |  |      eori.b #1,d0
    dfe6:	|  |  |  |  |  |      ext.w d0
    dfe8:	|  |  |  |  |  |      movea.w d0,a0
    dfea:	|  |  |  |  |  |      move.l a0,36(sp)
    dfee:	|  |  |  |  |  |      move.l 1c818 <DOSBase>,d0
    dff4:	|  |  |  |  |  |      movea.l d0,a6
    dff6:	|  |  |  |  |  |      move.l 40(sp),d1
    dffa:	|  |  |  |  |  |      move.l 36(sp),d2
    dffe:	|  |  |  |  |  |      jsr -312(a6)
    e002:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    e006:	|  |  |  |  |  |      movea.l 152(sp),a0
    e00a:	|  |  |  |  |  |      move.l 4(a0),d0
    e00e:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    e012:	|  |  |  |  |  |      move.l d0,-(sp)
    e014:	|  |  |  |  |  |      jsr 958 <put4bytes>
    e01a:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    e01c:	|  |  |  +--|--|----- bra.w e0c4 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    e020:	|  |  |  |  |  '----> move.l 160(sp),-(sp)
    e024:	|  |  |  |  |         pea 195fd <PutChar+0x1a4f>
    e02a:	|  |  |  |  |         jsr 1710c <KPrintF>
    e030:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    e032:	|  |  |  |  |         move.l 136(sp),28(sp)
    e038:	|  |  |  |  |         move.l 1c818 <DOSBase>,d0
    e03e:	|  |  |  |  |         movea.l d0,a6
    e040:	|  |  |  |  |         move.l 28(sp),d1
    e044:	|  |  |  |  |         jsr -36(a6)
    e048:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    e04c:	|  |  |  |  |         clr.w d0
    e04e:	+--|--|--|--|-------- bra.w e0f6 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    e052:	|  |  |  |  '-------> move.l 152(sp),d0
    e056:	|  |  |  |            move.l d0,-(sp)
    e058:	|  |  |  |            jsr 14c1e <getTextFromAnyVar>
    e05e:	|  |  |  |            addq.l #4,sp
    e060:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    e064:	|  |  |  |     ,----- beq.s e0d8 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    e066:	|  |  |  |     |      movea.l 100(sp),a0
    e06a:	|  |  |  |     |      move.b (a0),d0
    e06c:	|  |  |  |     |      ext.w d0
    e06e:	|  |  |  |     |      movea.w d0,a0
    e070:	|  |  |  |     |      move.l a0,12(sp)
    e074:	|  |  |  |     |      move.l 136(sp),96(sp)
    e07a:	|  |  |  |     |      move.l #104025,92(sp)
    e082:	|  |  |  |     |      moveq #99,d0
    e084:	|  |  |  |     |      not.b d0
    e086:	|  |  |  |     |      add.l sp,d0
    e088:	|  |  |  |     |      addi.l #-144,d0
    e08e:	|  |  |  |     |      move.l d0,88(sp)
    e092:	|  |  |  |     |      move.l 1c818 <DOSBase>,d0
    e098:	|  |  |  |     |      movea.l d0,a6
    e09a:	|  |  |  |     |      move.l 96(sp),d1
    e09e:	|  |  |  |     |      move.l 92(sp),d2
    e0a2:	|  |  |  |     |      move.l 88(sp),d3
    e0a6:	|  |  |  |     |      jsr -354(a6)
    e0aa:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    e0ae:	|  |  |  |     |      move.l 100(sp),80(sp)
    e0b4:	|  |  |  |     |      move.l 1c810 <SysBase>,d0
    e0ba:	|  |  |  |     |      movea.l d0,a6
    e0bc:	|  |  |  |     |      movea.l 80(sp),a1
    e0c0:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    e0c4:	|  |  |  '-----|----> movea.l 152(sp),a0
    e0c8:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    e0ce:	|  '--|--------|----> tst.l 152(sp)
    e0d2:	|     '--------|----- bne.w defa <stackToFile+0x110>
    e0d6:	|              |  ,-- bra.s e0da <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    e0d8:	|              '--|-> nop
    }
    Close(fp);
    e0da:	|                 '-> move.l 136(sp),20(sp)
    e0e0:	|                     move.l 1c818 <DOSBase>,d0
    e0e6:	|                     movea.l d0,a6
    e0e8:	|                     move.l 20(sp),d1
    e0ec:	|                     jsr -36(a6)
    e0f0:	|                     move.l d0,16(sp)
    return TRUE;
    e0f4:	|                     moveq #1,d0
}
    e0f6:	'-------------------> movem.l (sp)+,d2-d3/a6
    e0fa:	                      lea 144(sp),sp
    e0fe:	                      rts

0000e100 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    e100:	       lea -20(sp),sp
    e104:	       move.l a6,-(sp)
    e106:	       move.l d2,-(sp)
	int a, len = strlen (s);
    e108:	       move.l 32(sp),-(sp)
    e10c:	       jsr 13b34 <strlen>
    e112:	       addq.l #4,sp
    e114:	       move.l d0,20(sp)

	put2bytes (len, fp);
    e118:	       move.l 36(sp),-(sp)
    e11c:	       move.l 24(sp),-(sp)
    e120:	       jsr 8d0 <put2bytes>
    e126:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    e128:	       clr.l 24(sp)
    e12c:	   ,-- bra.s e182 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    e12e:	,--|-> move.l 36(sp),16(sp)
    e134:	|  |   move.l 24(sp),d0
    e138:	|  |   movea.l 32(sp),a0
    e13c:	|  |   adda.l d0,a0
    e13e:	|  |   move.b (a0),d1
    e140:	|  |   move.b 1c8c2 <encode1>,d0
    e146:	|  |   eor.b d1,d0
    e148:	|  |   ext.w d0
    e14a:	|  |   movea.w d0,a0
    e14c:	|  |   move.l a0,12(sp)
    e150:	|  |   move.l 1c818 <DOSBase>,d0
    e156:	|  |   movea.l d0,a6
    e158:	|  |   move.l 16(sp),d1
    e15c:	|  |   move.l 12(sp),d2
    e160:	|  |   jsr -312(a6)
    e164:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    e168:	|  |   move.b 1c8c2 <encode1>,d0
    e16e:	|  |   move.b d0,d1
    e170:	|  |   move.b 1c8c3 <encode2>,d0
    e176:	|  |   add.b d1,d0
    e178:	|  |   move.b d0,1c8c2 <encode1>
	for (a = 0; a < len; a ++) {
    e17e:	|  |   addq.l #1,24(sp)
    e182:	|  '-> move.l 24(sp),d0
    e186:	|      cmp.l 20(sp),d0
    e18a:	'----- blt.s e12e <writeStringEncoded+0x2e>
	}
}
    e18c:	       nop
    e18e:	       nop
    e190:	       move.l (sp)+,d2
    e192:	       movea.l (sp)+,a6
    e194:	       lea 20(sp),sp
    e198:	       rts

0000e19a <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    e19a:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    e19c:	                   tst.l 8(sp)
    e1a0:	               ,-- bne.s e1a6 <failSecurityCheck+0xc>
    e1a2:	               |   moveq #1,d0
    e1a4:	,--------------|-- bra.s e224 <failSecurityCheck+0x8a>

	int a = 0;
    e1a6:	|              '-> clr.l (sp)

	while (fn[a]) {
    e1a8:	|     ,----------- bra.s e216 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    e1aa:	|  ,--|----------> move.l (sp),d0
    e1ac:	|  |  |            movea.l 8(sp),a0
    e1b0:	|  |  |            adda.l d0,a0
    e1b2:	|  |  |            move.b (a0),d0
    e1b4:	|  |  |            ext.w d0
    e1b6:	|  |  |            movea.w d0,a0
    e1b8:	|  |  |            moveq #124,d0
    e1ba:	|  |  |            cmp.l a0,d0
    e1bc:	|  |  |     ,----- beq.s e1fe <failSecurityCheck+0x64>
    e1be:	|  |  |     |      moveq #124,d1
    e1c0:	|  |  |     |      cmp.l a0,d1
    e1c2:	|  |  |  ,--|----- blt.s e214 <failSecurityCheck+0x7a>
    e1c4:	|  |  |  |  |      moveq #92,d0
    e1c6:	|  |  |  |  |      cmp.l a0,d0
    e1c8:	|  |  |  |  +----- beq.s e1fe <failSecurityCheck+0x64>
    e1ca:	|  |  |  |  |      moveq #92,d1
    e1cc:	|  |  |  |  |      cmp.l a0,d1
    e1ce:	|  |  |  +--|----- blt.s e214 <failSecurityCheck+0x7a>
    e1d0:	|  |  |  |  |      moveq #60,d0
    e1d2:	|  |  |  |  |      cmp.l a0,d0
    e1d4:	|  |  |  |  |  ,-- blt.s e1f4 <failSecurityCheck+0x5a>
    e1d6:	|  |  |  |  |  |   moveq #34,d1
    e1d8:	|  |  |  |  |  |   cmp.l a0,d1
    e1da:	|  |  |  +--|--|-- bgt.s e214 <failSecurityCheck+0x7a>
    e1dc:	|  |  |  |  |  |   moveq #-34,d1
    e1de:	|  |  |  |  |  |   add.l a0,d1
    e1e0:	|  |  |  |  |  |   move.l #83894529,d0
    e1e6:	|  |  |  |  |  |   lsr.l d1,d0
    e1e8:	|  |  |  |  |  |   moveq #1,d1
    e1ea:	|  |  |  |  |  |   and.l d1,d0
    e1ec:	|  |  |  |  |  |   sne d0
    e1ee:	|  |  |  |  |  |   neg.b d0
    e1f0:	|  |  |  |  +--|-- bne.s e1fe <failSecurityCheck+0x64>
    e1f2:	|  |  |  +--|--|-- bra.s e214 <failSecurityCheck+0x7a>
    e1f4:	|  |  |  |  |  '-> lea -62(a0),a0
    e1f8:	|  |  |  |  |      moveq #1,d0
    e1fa:	|  |  |  |  |      cmp.l a0,d0
    e1fc:	|  |  |  +--|----- bcs.s e214 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    e1fe:	|  |  |  |  '----> move.l 8(sp),-(sp)
    e202:	|  |  |  |         pea 1965d <PutChar+0x1aaf>
    e208:	|  |  |  |         jsr 1710c <KPrintF>
    e20e:	|  |  |  |         addq.l #8,sp
				return TRUE;
    e210:	|  |  |  |         moveq #1,d0
    e212:	+--|--|--|-------- bra.s e224 <failSecurityCheck+0x8a>
		}
		a++;
    e214:	|  |  |  '-------> addq.l #1,(sp)
	while (fn[a]) {
    e216:	|  |  '----------> move.l (sp),d0
    e218:	|  |               movea.l 8(sp),a0
    e21c:	|  |               adda.l d0,a0
    e21e:	|  |               move.b (a0),d0
    e220:	|  '-------------- bne.s e1aa <failSecurityCheck+0x10>
	}
	return FALSE;
    e222:	|                  clr.w d0
}
    e224:	'----------------> addq.l #4,sp
    e226:	                   rts

0000e228 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    e228:	             lea -24(sp),sp
    e22c:	             move.l a6,-(sp)
    e22e:	             move.l 40(sp),d0
    e232:	             move.w d0,d0
    e234:	             move.w d0,6(sp)
	int fileNum = -1;
    e238:	             moveq #-1,d0
    e23a:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    e23e:	             jsr 6a94 <killSpeechTimers>

	switch (numParams) {
    e244:	             moveq #2,d0
    e246:	             cmp.l 32(sp),d0
    e24a:	      ,----- beq.s e28e <sayCore+0x66>
    e24c:	      |      moveq #3,d0
    e24e:	      |      cmp.l 32(sp),d0
    e252:	,-----|----- bne.w e370 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    e256:	|     |      movea.l 36(sp),a0
    e25a:	|     |      move.l 24(a0),d0
    e25e:	|     |      move.l d0,-(sp)
    e260:	|     |      pea 5 <_start+0x5>
    e264:	|     |      lea 20(sp),a0
    e268:	|     |      move.l a0,-(sp)
    e26a:	|     |      jsr 14648 <getValueType>
    e270:	|     |      lea 12(sp),sp
    e274:	|     |      tst.w d0
    e276:	|     |  ,-- bne.s e27e <sayCore+0x56>
    e278:	|     |  |   moveq #1,d0
    e27a:	|  ,--|--|-- bra.w e380 <sayCore+0x158>
			trimStack (&fun -> stack);
    e27e:	|  |  |  '-> moveq #24,d0
    e280:	|  |  |      add.l 36(sp),d0
    e284:	|  |  |      move.l d0,-(sp)
    e286:	|  |  |      jsr 14fcc <trimStack>
    e28c:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    e28e:	|  |  '----> movea.l 36(sp),a0
    e292:	|  |         move.l 24(a0),d0
    e296:	|  |         move.l d0,-(sp)
    e298:	|  |         jsr 14c1e <getTextFromAnyVar>
    e29e:	|  |         addq.l #4,sp
    e2a0:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    e2a4:	|  |     ,-- bne.s e2ac <sayCore+0x84>
    e2a6:	|  |     |   moveq #1,d0
    e2a8:	|  +-----|-- bra.w e380 <sayCore+0x158>
			trimStack (&fun -> stack);
    e2ac:	|  |     '-> moveq #24,d0
    e2ae:	|  |         add.l 36(sp),d0
    e2b2:	|  |         move.l d0,-(sp)
    e2b4:	|  |         jsr 14fcc <trimStack>
    e2ba:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e2bc:	|  |         movea.l 36(sp),a0
    e2c0:	|  |         move.l 24(a0),d0
    e2c4:	|  |         move.l d0,-(sp)
    e2c6:	|  |         pea 7 <_start+0x7>
    e2ca:	|  |         lea 16(sp),a0
    e2ce:	|  |         move.l a0,-(sp)
    e2d0:	|  |         jsr 14648 <getValueType>
    e2d6:	|  |         lea 12(sp),sp
    e2da:	|  |         tst.w d0
    e2dc:	|  |     ,-- bne.s e2e4 <sayCore+0xbc>
    e2de:	|  |     |   moveq #1,d0
    e2e0:	|  +-----|-- bra.w e380 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e2e4:	|  |     '-> movea.l 36(sp),a0
    e2e8:	|  |         move.l 24(a0),d0
    e2ec:	|  |         move.l d0,-(sp)
    e2ee:	|  |         pea 7 <_start+0x7>
    e2f2:	|  |         lea 16(sp),a0
    e2f6:	|  |         move.l a0,-(sp)
    e2f8:	|  |         jsr 14648 <getValueType>
    e2fe:	|  |         lea 12(sp),sp
    e302:	|  |         tst.w d0
    e304:	|  |     ,-- bne.s e30a <sayCore+0xe2>
    e306:	|  |     |   moveq #1,d0
    e308:	|  +-----|-- bra.s e380 <sayCore+0x158>
			trimStack (&fun -> stack);
    e30a:	|  |     '-> moveq #24,d0
    e30c:	|  |         add.l 36(sp),d0
    e310:	|  |         move.l d0,-(sp)
    e312:	|  |         jsr 14fcc <trimStack>
    e318:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    e31a:	|  |         movea.w 6(sp),a0
    e31e:	|  |         move.l 12(sp),d1
    e322:	|  |         move.l 8(sp),d0
    e326:	|  |         move.l a0,-(sp)
    e328:	|  |         move.l d1,-(sp)
    e32a:	|  |         move.l d0,-(sp)
    e32c:	|  |         move.l 36(sp),-(sp)
    e330:	|  |         jsr 4198 <wrapSpeech>
    e336:	|  |         lea 16(sp),sp
    e33a:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    e33e:	|  |         movea.l 36(sp),a0
    e342:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    e348:	|  |         movea.l 36(sp),a0
    e34c:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    e352:	|  |         move.l 24(sp),16(sp)
    e358:	|  |         move.l 1c810 <SysBase>,d0
    e35e:	|  |         movea.l d0,a6
    e360:	|  |         movea.l 16(sp),a1
    e364:	|  |         jsr -690(a6)
			newText = NULL;
    e368:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    e36c:	|  |         moveq #0,d0
    e36e:	|  +-------- bra.s e380 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    e370:	'--|-------> pea 196e3 <PutChar+0x1b35>
    e376:	   |         jsr 1710c <KPrintF>
    e37c:	   |         addq.l #4,sp
	return BR_ERROR;
    e37e:	   |         moveq #1,d0
}
    e380:	   '-------> movea.l (sp)+,a6
    e382:	             lea 24(sp),sp
    e386:	             rts

0000e388 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    e388:	pea 1 <_start+0x1>
    e38c:	move.l 12(sp),-(sp)
    e390:	move.l 12(sp),-(sp)
    e394:	jsr e228 <sayCore>
    e39a:	lea 12(sp),sp
}
    e39e:	rts

0000e3a0 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    e3a0:	clr.l -(sp)
    e3a2:	move.l 12(sp),-(sp)
    e3a6:	move.l 12(sp),-(sp)
    e3aa:	jsr e228 <sayCore>
    e3b0:	lea 12(sp),sp
}
    e3b4:	rts

0000e3b6 <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    e3b6:	jsr 15014 <freeze>
	freezeSubs (); 
    e3bc:	jsr 6084 <freezeSubs>
	fun -> freezerLevel = 0;
    e3c2:	movea.l 8(sp),a0
    e3c6:	clr.b 56(a0)
	return BR_CONTINUE;
    e3ca:	moveq #2,d0
}
    e3cc:	rts

0000e3ce <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    e3ce:	jsr 15218 <unfreeze>
	unfreezeSubs (); 
    e3d4:	jsr 74d6 <unfreezeSubs>
	return BR_CONTINUE;
    e3da:	moveq #2,d0
}
    e3dc:	rts

0000e3de <builtIn_howFrozen>:

builtIn(howFrozen)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, howFrozen ());
    e3de:	jsr 151f4 <howFrozen>
    e3e4:	move.l d0,d1
    e3e6:	moveq #28,d0
    e3e8:	add.l 8(sp),d0
    e3ec:	move.l d1,-(sp)
    e3ee:	pea 1 <_start+0x1>
    e3f2:	move.l d0,-(sp)
    e3f4:	jsr 14f3a <setVariable>
    e3fa:	lea 12(sp),sp
	return BR_CONTINUE; 
    e3fe:	moveq #2,d0
}
    e400:	rts

0000e402 <builtIn_setCursor>:

builtIn(setCursor)
{
    e402:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    e404:	movea.l 12(sp),a0
    e408:	move.l 24(a0),d0
    e40c:	move.l d0,-(sp)
    e40e:	jsr 14b20 <getAnimationFromVar>
    e414:	addq.l #4,sp
    e416:	move.l d0,(sp)
	pickAnimCursor (aa);
    e418:	move.l (sp),-(sp)
    e41a:	jsr d6c <pickAnimCursor>
    e420:	addq.l #4,sp
	trimStack (&fun -> stack);
    e422:	moveq #24,d0
    e424:	add.l 12(sp),d0
    e428:	move.l d0,-(sp)
    e42a:	jsr 14fcc <trimStack>
    e430:	addq.l #4,sp
	return BR_CONTINUE;
    e432:	moveq #2,d0
}
    e434:	addq.l #4,sp
    e436:	rts

0000e438 <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    e438:	move.l 1c7cc <input+0xa>,d1
    e43e:	move.l 1c8c6 <cameraX>,d0
    e444:	add.l d0,d1
    e446:	moveq #28,d0
    e448:	add.l 8(sp),d0
    e44c:	move.l d1,-(sp)
    e44e:	pea 1 <_start+0x1>
    e452:	move.l d0,-(sp)
    e454:	jsr 14f3a <setVariable>
    e45a:	lea 12(sp),sp
	return BR_CONTINUE;
    e45e:	moveq #2,d0
}
    e460:	rts

0000e462 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    e462:	move.l 1c7d0 <input+0xe>,d1
    e468:	move.l 1c8ca <cameraY>,d0
    e46e:	add.l d0,d1
    e470:	moveq #28,d0
    e472:	add.l 8(sp),d0
    e476:	move.l d1,-(sp)
    e478:	pea 1 <_start+0x1>
    e47c:	move.l d0,-(sp)
    e47e:	jsr 14f3a <setVariable>
    e484:	lea 12(sp),sp
	return BR_CONTINUE;
    e488:	moveq #2,d0
}
    e48a:	rts

0000e48c <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    e48c:	move.l 1c7cc <input+0xa>,d0
    e492:	move.l d0,-(sp)
    e494:	jsr 1753e <__floatsisf>
    e49a:	addq.l #4,sp
    e49c:	move.l d0,d1
    e49e:	move.l 1c1a2 <cameraZoom>,d0
    e4a4:	move.l d0,-(sp)
    e4a6:	move.l d1,-(sp)
    e4a8:	jsr 175f0 <__mulsf3>
    e4ae:	addq.l #8,sp
    e4b0:	move.l d0,-(sp)
    e4b2:	jsr 174d6 <__fixsfsi>
    e4b8:	addq.l #4,sp
    e4ba:	move.l d0,d1
    e4bc:	moveq #28,d0
    e4be:	add.l 8(sp),d0
    e4c2:	move.l d1,-(sp)
    e4c4:	pea 1 <_start+0x1>
    e4c8:	move.l d0,-(sp)
    e4ca:	jsr 14f3a <setVariable>
    e4d0:	lea 12(sp),sp
	return BR_CONTINUE;
    e4d4:	moveq #2,d0
}
    e4d6:	rts

0000e4d8 <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    e4d8:	move.l 1c7d0 <input+0xe>,d0
    e4de:	move.l d0,-(sp)
    e4e0:	jsr 1753e <__floatsisf>
    e4e6:	addq.l #4,sp
    e4e8:	move.l d0,d1
    e4ea:	move.l 1c1a2 <cameraZoom>,d0
    e4f0:	move.l d0,-(sp)
    e4f2:	move.l d1,-(sp)
    e4f4:	jsr 175f0 <__mulsf3>
    e4fa:	addq.l #8,sp
    e4fc:	move.l d0,-(sp)
    e4fe:	jsr 174d6 <__fixsfsi>
    e504:	addq.l #4,sp
    e506:	move.l d0,d1
    e508:	moveq #28,d0
    e50a:	add.l 8(sp),d0
    e50e:	move.l d1,-(sp)
    e510:	pea 1 <_start+0x1>
    e514:	move.l d0,-(sp)
    e516:	jsr 14f3a <setVariable>
    e51c:	lea 12(sp),sp
	return BR_CONTINUE;
    e520:	moveq #2,d0
}
    e522:	rts

0000e524 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    e524:	jsr 8508 <statusBarText>
    e52a:	move.l d0,d1
    e52c:	moveq #28,d0
    e52e:	add.l 8(sp),d0
    e532:	move.l d1,-(sp)
    e534:	move.l d0,-(sp)
    e536:	jsr 1486a <makeTextVar>
    e53c:	addq.l #8,sp
	return BR_CONTINUE;
    e53e:	moveq #2,d0
}
    e540:	rts

0000e542 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    e542:	       lea -20(sp),sp
    e546:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    e548:	       movea.l 32(sp),a0
    e54c:	       move.l 24(a0),d0
    e550:	       move.l d0,-(sp)
    e552:	       jsr 14c1e <getTextFromAnyVar>
    e558:	       addq.l #4,sp
    e55a:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    e55e:	   ,-- bne.s e566 <builtIn_getMatchingFiles+0x24>
    e560:	   |   moveq #1,d0
    e562:	,--|-- bra.w e628 <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    e566:	|  '-> moveq #24,d0
    e568:	|      add.l 32(sp),d0
    e56c:	|      move.l d0,-(sp)
    e56e:	|      jsr 14fcc <trimStack>
    e574:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    e576:	|      moveq #28,d0
    e578:	|      add.l 32(sp),d0
    e57c:	|      move.l d0,-(sp)
    e57e:	|      jsr 14896 <unlinkVar>
    e584:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    e586:	|      movea.l 32(sp),a0
    e58a:	|      moveq #6,d0
    e58c:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    e590:	|      moveq #12,d0
    e592:	|      move.l d0,16(sp)
    e596:	|      clr.l 12(sp)
    e59a:	|      move.l 1c810 <SysBase>,d0
    e5a0:	|      movea.l d0,a6
    e5a2:	|      move.l 16(sp),d0
    e5a6:	|      move.l 12(sp),d1
    e5aa:	|      jsr -684(a6)
    e5ae:	|      move.l d0,8(sp)
    e5b2:	|      move.l 8(sp),d0
    e5b6:	|      movea.l 32(sp),a0
    e5ba:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    e5be:	|      moveq #32,d0
    e5c0:	|      add.l 32(sp),d0
    e5c4:	|  ,-- bne.s e5ca <builtIn_getMatchingFiles+0x88>
    e5c6:	|  |   moveq #1,d0
    e5c8:	+--|-- bra.s e628 <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    e5ca:	|  '-> movea.l 32(sp),a0
    e5ce:	|      movea.l 32(a0),a0
    e5d2:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    e5d4:	|      movea.l 32(sp),a0
    e5d8:	|      movea.l 32(a0),a0
    e5dc:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    e5e0:	|      movea.l 32(sp),a0
    e5e4:	|      movea.l 32(a0),a0
    e5e8:	|      moveq #1,d0
    e5ea:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    e5ee:	|      movea.l 32(sp),a0
    e5f2:	|      move.l 32(a0),d0
    e5f6:	|      move.l 20(sp),-(sp)
    e5fa:	|      move.l d0,-(sp)
    e5fc:	|      jsr 14404 <getSavedGamesStack>
    e602:	|      addq.l #8,sp
    e604:	|      tst.w d0
    e606:	|  ,-- bne.s e60c <builtIn_getMatchingFiles+0xca>
    e608:	|  |   moveq #1,d0
    e60a:	+--|-- bra.s e628 <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    e60c:	|  '-> move.l 20(sp),4(sp)
    e612:	|      move.l 1c810 <SysBase>,d0
    e618:	|      movea.l d0,a6
    e61a:	|      movea.l 4(sp),a1
    e61e:	|      jsr -690(a6)
	newText = NULL;
    e622:	|      clr.l 20(sp)
	return BR_CONTINUE;
    e626:	|      moveq #2,d0
}
    e628:	'----> movea.l (sp)+,a6
    e62a:	       lea 20(sp),sp
    e62e:	       rts

0000e630 <builtIn_saveGame>:

builtIn(saveGame)
{
    e630:	       lea -12(sp),sp
    e634:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e636:	       movea.l 24(sp),a0
    e63a:	       move.l 24(a0),d0
    e63e:	       move.l d0,-(sp)
    e640:	       jsr 14c1e <getTextFromAnyVar>
    e646:	       addq.l #4,sp
    e648:	       move.l d0,1c7dc <loadNow>
    trimStack(&fun->stack);
    e64e:	       moveq #24,d0
    e650:	       add.l 24(sp),d0
    e654:	       move.l d0,-(sp)
    e656:	       jsr 14fcc <trimStack>
    e65c:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    e65e:	       move.l 1c7dc <loadNow>,d0
    e664:	       move.l d0,-(sp)
    e666:	       jsr 2fe <encodeFilename>
    e66c:	       addq.l #4,sp
    e66e:	       move.l d0,12(sp)
    FreeVec(loadNow);
    e672:	       move.l 1c7dc <loadNow>,8(sp)
    e67a:	       move.l 1c810 <SysBase>,d0
    e680:	       movea.l d0,a6
    e682:	       movea.l 8(sp),a1
    e686:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    e68a:	       move.l 12(sp),-(sp)
    e68e:	       jsr e19a <failSecurityCheck>
    e694:	       addq.l #4,sp
    e696:	       tst.w d0
    e698:	   ,-- beq.s e69e <builtIn_saveGame+0x6e>
    e69a:	   |   moveq #1,d0
    e69c:	,--|-- bra.s e6ee <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    e69e:	|  '-> move.l 12(sp),-(sp)
    e6a2:	|      pea 19711 <PutChar+0x1b63>
    e6a8:	|      jsr 13b74 <joinStrings>
    e6ae:	|      addq.l #8,sp
    e6b0:	|      move.l d0,1c7dc <loadNow>
    FreeVec(aaaaa);
    e6b6:	|      move.l 12(sp),4(sp)
    e6bc:	|      move.l 1c810 <SysBase>,d0
    e6c2:	|      movea.l d0,a6
    e6c4:	|      movea.l 4(sp),a1
    e6c8:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    e6cc:	|      moveq #28,d0
    e6ce:	|      add.l 24(sp),d0
    e6d2:	|      clr.l -(sp)
    e6d4:	|      pea 1 <_start+0x1>
    e6d8:	|      move.l d0,-(sp)
    e6da:	|      jsr 14f3a <setVariable>
    e6e0:	|      lea 12(sp),sp
    saverFunc = fun;
    e6e4:	|      move.l 24(sp),1c8d6 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    e6ec:	|      moveq #0,d0
}
    e6ee:	'----> movea.l (sp)+,a6
    e6f0:	       lea 12(sp),sp
    e6f4:	       rts

0000e6f6 <builtIn_fileExists>:

builtIn(fileExists)
{
    e6f6:	       lea -36(sp),sp
    e6fa:	       move.l a6,-(sp)
    e6fc:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e6fe:	       movea.l 52(sp),a0
    e702:	       move.l 24(a0),d0
    e706:	       move.l d0,-(sp)
    e708:	       jsr 14c1e <getTextFromAnyVar>
    e70e:	       addq.l #4,sp
    e710:	       move.l d0,1c7dc <loadNow>
    trimStack(&fun->stack);
    e716:	       moveq #24,d0
    e718:	       add.l 52(sp),d0
    e71c:	       move.l d0,-(sp)
    e71e:	       jsr 14fcc <trimStack>
    e724:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    e726:	       move.l 1c7dc <loadNow>,d0
    e72c:	       move.l d0,-(sp)
    e72e:	       jsr 2fe <encodeFilename>
    e734:	       addq.l #4,sp
    e736:	       move.l d0,40(sp)
    FreeVec(loadNow);
    e73a:	       move.l 1c7dc <loadNow>,36(sp)
    e742:	       move.l 1c810 <SysBase>,d0
    e748:	       movea.l d0,a6
    e74a:	       movea.l 36(sp),a1
    e74e:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    e752:	       move.l 40(sp),-(sp)
    e756:	       jsr e19a <failSecurityCheck>
    e75c:	       addq.l #4,sp
    e75e:	       tst.w d0
    e760:	   ,-- beq.s e768 <builtIn_fileExists+0x72>
    e762:	   |   moveq #1,d0
    e764:	,--|-- bra.w e808 <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    e768:	|  '-> move.l 40(sp),32(sp)
    e76e:	|      move.l #1005,28(sp)
    e776:	|      move.l 1c818 <DOSBase>,d0
    e77c:	|      movea.l d0,a6
    e77e:	|      move.l 32(sp),d1
    e782:	|      move.l 28(sp),d2
    e786:	|      jsr -30(a6)
    e78a:	|      move.l d0,24(sp)
    e78e:	|      move.l 24(sp),d0
    e792:	|      move.l d0,20(sp)
    if (!fp) {        
    e796:	|  ,-- bne.s e7a6 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    e798:	|  |   pea 19713 <PutChar+0x1b65>
    e79e:	|  |   jsr 1710c <KPrintF>
    e7a4:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    e7a6:	|  '-> tst.l 20(sp)
    e7aa:	|      sne d0
    e7ac:	|      neg.b d0
    e7ae:	|      moveq #0,d1
    e7b0:	|      move.b d0,d1
    e7b2:	|      moveq #28,d0
    e7b4:	|      add.l 52(sp),d0
    e7b8:	|      move.l d1,-(sp)
    e7ba:	|      pea 1 <_start+0x1>
    e7be:	|      move.l d0,-(sp)
    e7c0:	|      jsr 14f3a <setVariable>
    e7c6:	|      lea 12(sp),sp
    if (fp) Close(fp);
    e7ca:	|      tst.l 20(sp)
    e7ce:	|  ,-- beq.s e7ea <builtIn_fileExists+0xf4>
    e7d0:	|  |   move.l 20(sp),16(sp)
    e7d6:	|  |   move.l 1c818 <DOSBase>,d0
    e7dc:	|  |   movea.l d0,a6
    e7de:	|  |   move.l 16(sp),d1
    e7e2:	|  |   jsr -36(a6)
    e7e6:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    e7ea:	|  '-> move.l 40(sp),8(sp)
    e7f0:	|      move.l 1c810 <SysBase>,d0
    e7f6:	|      movea.l d0,a6
    e7f8:	|      movea.l 8(sp),a1
    e7fc:	|      jsr -690(a6)
    loadNow = NULL;
    e800:	|      clr.l 1c7dc <loadNow>
    return BR_CONTINUE;
    e806:	|      moveq #2,d0
}
    e808:	'----> move.l (sp)+,d2
    e80a:	       movea.l (sp)+,a6
    e80c:	       lea 36(sp),sp
    e810:	       rts

0000e812 <builtIn_loadGame>:

builtIn(loadGame)
{
    e812:	       lea -36(sp),sp
    e816:	       move.l a6,-(sp)
    e818:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    e81a:	       movea.l 52(sp),a0
    e81e:	       move.l 24(a0),d0
    e822:	       move.l d0,-(sp)
    e824:	       jsr 14c1e <getTextFromAnyVar>
    e82a:	       addq.l #4,sp
    e82c:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    e830:	       moveq #24,d0
    e832:	       add.l 52(sp),d0
    e836:	       move.l d0,-(sp)
    e838:	       jsr 14fcc <trimStack>
    e83e:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    e840:	       move.l 40(sp),-(sp)
    e844:	       jsr 2fe <encodeFilename>
    e84a:	       addq.l #4,sp
    e84c:	       move.l d0,1c7dc <loadNow>
    FreeVec(aaaaa);
    e852:	       move.l 40(sp),36(sp)
    e858:	       move.l 1c810 <SysBase>,d0
    e85e:	       movea.l d0,a6
    e860:	       movea.l 36(sp),a1
    e864:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    e868:	       move.l 1c7dc <loadNow>,d0
    e86e:	       move.l d0,-(sp)
    e870:	       jsr e19a <failSecurityCheck>
    e876:	       addq.l #4,sp
    e878:	       tst.w d0
    e87a:	   ,-- beq.s e880 <builtIn_loadGame+0x6e>
    e87c:	   |   moveq #1,d0
    e87e:	,--|-- bra.s e8f0 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    e880:	|  '-> move.l 1c7dc <loadNow>,32(sp)
    e888:	|      move.l #1005,28(sp)
    e890:	|      move.l 1c818 <DOSBase>,d0
    e896:	|      movea.l d0,a6
    e898:	|      move.l 32(sp),d1
    e89c:	|      move.l 28(sp),d2
    e8a0:	|      jsr -30(a6)
    e8a4:	|      move.l d0,24(sp)
    e8a8:	|      move.l 24(sp),d0
    e8ac:	|      move.l d0,20(sp)
    if (fp) {
    e8b0:	|  ,-- beq.s e8d0 <builtIn_loadGame+0xbe>
        Close(fp);
    e8b2:	|  |   move.l 20(sp),12(sp)
    e8b8:	|  |   move.l 1c818 <DOSBase>,d0
    e8be:	|  |   movea.l d0,a6
    e8c0:	|  |   move.l 12(sp),d1
    e8c4:	|  |   jsr -36(a6)
    e8c8:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    e8cc:	|  |   moveq #0,d0
    e8ce:	+--|-- bra.s e8f0 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    e8d0:	|  '-> move.l 1c7dc <loadNow>,16(sp)
    e8d8:	|      move.l 1c810 <SysBase>,d0
    e8de:	|      movea.l d0,a6
    e8e0:	|      movea.l 16(sp),a1
    e8e4:	|      jsr -690(a6)
    loadNow = NULL;
    e8e8:	|      clr.l 1c7dc <loadNow>
    return BR_CONTINUE;
    e8ee:	|      moveq #2,d0
}
    e8f0:	'----> move.l (sp)+,d2
    e8f2:	       movea.l (sp)+,a6
    e8f4:	       lea 36(sp),sp
    e8f8:	       rts

0000e8fa <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    e8fa:	move.l 1c8ac <sceneHeight>,d0
    e900:	move.l d0,d1
    e902:	move.l 1c8a8 <sceneWidth>,d0
    e908:	move.l d1,-(sp)
    e90a:	move.l d0,-(sp)
    e90c:	clr.l -(sp)
    e90e:	clr.l -(sp)
    e910:	jsr d084 <blankScreen>
    e916:	lea 16(sp),sp
	return BR_CONTINUE;
    e91a:	moveq #2,d0
}
    e91c:	rts

0000e91e <builtIn_blankArea>:

builtIn(blankArea)
{
    e91e:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e922:	       movea.l 24(sp),a0
    e926:	       move.l 24(a0),d0
    e92a:	       move.l d0,-(sp)
    e92c:	       pea 1 <_start+0x1>
    e930:	       lea 8(sp),a0
    e934:	       move.l a0,-(sp)
    e936:	       jsr 14648 <getValueType>
    e93c:	       lea 12(sp),sp
    e940:	       tst.w d0
    e942:	   ,-- bne.s e94a <builtIn_blankArea+0x2c>
    e944:	   |   moveq #1,d0
    e946:	,--|-- bra.w ea20 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e94a:	|  '-> moveq #24,d0
    e94c:	|      add.l 24(sp),d0
    e950:	|      move.l d0,-(sp)
    e952:	|      jsr 14fcc <trimStack>
    e958:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e95a:	|      movea.l 24(sp),a0
    e95e:	|      move.l 24(a0),d0
    e962:	|      move.l d0,-(sp)
    e964:	|      pea 1 <_start+0x1>
    e968:	|      lea 12(sp),a0
    e96c:	|      move.l a0,-(sp)
    e96e:	|      jsr 14648 <getValueType>
    e974:	|      lea 12(sp),sp
    e978:	|      tst.w d0
    e97a:	|  ,-- bne.s e982 <builtIn_blankArea+0x64>
    e97c:	|  |   moveq #1,d0
    e97e:	+--|-- bra.w ea20 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e982:	|  '-> moveq #24,d0
    e984:	|      add.l 24(sp),d0
    e988:	|      move.l d0,-(sp)
    e98a:	|      jsr 14fcc <trimStack>
    e990:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e992:	|      movea.l 24(sp),a0
    e996:	|      move.l 24(a0),d0
    e99a:	|      move.l d0,-(sp)
    e99c:	|      pea 1 <_start+0x1>
    e9a0:	|      moveq #16,d0
    e9a2:	|      add.l sp,d0
    e9a4:	|      move.l d0,-(sp)
    e9a6:	|      jsr 14648 <getValueType>
    e9ac:	|      lea 12(sp),sp
    e9b0:	|      tst.w d0
    e9b2:	|  ,-- bne.s e9b8 <builtIn_blankArea+0x9a>
    e9b4:	|  |   moveq #1,d0
    e9b6:	+--|-- bra.s ea20 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e9b8:	|  '-> moveq #24,d0
    e9ba:	|      add.l 24(sp),d0
    e9be:	|      move.l d0,-(sp)
    e9c0:	|      jsr 14fcc <trimStack>
    e9c6:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e9c8:	|      movea.l 24(sp),a0
    e9cc:	|      move.l 24(a0),d0
    e9d0:	|      move.l d0,-(sp)
    e9d2:	|      pea 1 <_start+0x1>
    e9d6:	|      moveq #20,d0
    e9d8:	|      add.l sp,d0
    e9da:	|      move.l d0,-(sp)
    e9dc:	|      jsr 14648 <getValueType>
    e9e2:	|      lea 12(sp),sp
    e9e6:	|      tst.w d0
    e9e8:	|  ,-- bne.s e9ee <builtIn_blankArea+0xd0>
    e9ea:	|  |   moveq #1,d0
    e9ec:	+--|-- bra.s ea20 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e9ee:	|  '-> moveq #24,d0
    e9f0:	|      add.l 24(sp),d0
    e9f4:	|      move.l d0,-(sp)
    e9f6:	|      jsr 14fcc <trimStack>
    e9fc:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    e9fe:	|      movea.l (sp),a1
    ea00:	|      movea.l 4(sp),a0
    ea04:	|      move.l 8(sp),d1
    ea08:	|      move.l 12(sp),d0
    ea0c:	|      move.l a1,-(sp)
    ea0e:	|      move.l a0,-(sp)
    ea10:	|      move.l d1,-(sp)
    ea12:	|      move.l d0,-(sp)
    ea14:	|      jsr d084 <blankScreen>
    ea1a:	|      lea 16(sp),sp
	return BR_CONTINUE;
    ea1e:	|      moveq #2,d0
}
    ea20:	'----> lea 16(sp),sp
    ea24:	       rts

0000ea26 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    ea26:	jsr d0a2 <darkScreen>
	return BR_CONTINUE;
    ea2c:	moveq #2,d0
}
    ea2e:	rts

0000ea30 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    ea30:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ea34:	       movea.l 20(sp),a0
    ea38:	       move.l 24(a0),d0
    ea3c:	       move.l d0,-(sp)
    ea3e:	       pea 1 <_start+0x1>
    ea42:	       lea 8(sp),a0
    ea46:	       move.l a0,-(sp)
    ea48:	       jsr 14648 <getValueType>
    ea4e:	       lea 12(sp),sp
    ea52:	       tst.w d0
    ea54:	   ,-- bne.s ea5c <builtIn_addOverlay+0x2c>
    ea56:	   |   moveq #1,d0
    ea58:	,--|-- bra.w eaf4 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ea5c:	|  '-> moveq #24,d0
    ea5e:	|      add.l 20(sp),d0
    ea62:	|      move.l d0,-(sp)
    ea64:	|      jsr 14fcc <trimStack>
    ea6a:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ea6c:	|      movea.l 20(sp),a0
    ea70:	|      move.l 24(a0),d0
    ea74:	|      move.l d0,-(sp)
    ea76:	|      pea 1 <_start+0x1>
    ea7a:	|      moveq #12,d0
    ea7c:	|      add.l sp,d0
    ea7e:	|      move.l d0,-(sp)
    ea80:	|      jsr 14648 <getValueType>
    ea86:	|      lea 12(sp),sp
    ea8a:	|      tst.w d0
    ea8c:	|  ,-- bne.s ea92 <builtIn_addOverlay+0x62>
    ea8e:	|  |   moveq #1,d0
    ea90:	+--|-- bra.s eaf4 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ea92:	|  '-> moveq #24,d0
    ea94:	|      add.l 20(sp),d0
    ea98:	|      move.l d0,-(sp)
    ea9a:	|      jsr 14fcc <trimStack>
    eaa0:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    eaa2:	|      movea.l 20(sp),a0
    eaa6:	|      move.l 24(a0),d0
    eaaa:	|      move.l d0,-(sp)
    eaac:	|      pea 5 <_start+0x5>
    eab0:	|      moveq #16,d0
    eab2:	|      add.l sp,d0
    eab4:	|      move.l d0,-(sp)
    eab6:	|      jsr 14648 <getValueType>
    eabc:	|      lea 12(sp),sp
    eac0:	|      tst.w d0
    eac2:	|  ,-- bne.s eac8 <builtIn_addOverlay+0x98>
    eac4:	|  |   moveq #1,d0
    eac6:	+--|-- bra.s eaf4 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    eac8:	|  '-> moveq #24,d0
    eaca:	|      add.l 20(sp),d0
    eace:	|      move.l d0,-(sp)
    ead0:	|      jsr 14fcc <trimStack>
    ead6:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    ead8:	|      movea.l (sp),a0
    eada:	|      move.l 4(sp),d1
    eade:	|      move.l 8(sp),d0
    eae2:	|      move.l a0,-(sp)
    eae4:	|      move.l d1,-(sp)
    eae6:	|      move.l d0,-(sp)
    eae8:	|      jsr d1c0 <loadBackDrop>
    eaee:	|      lea 12(sp),sp
	return BR_CONTINUE;
    eaf2:	|      moveq #2,d0
}
    eaf4:	'----> lea 12(sp),sp
    eaf8:	       rts

0000eafa <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    eafa:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eafe:	       movea.l 20(sp),a0
    eb02:	       move.l 24(a0),d0
    eb06:	       move.l d0,-(sp)
    eb08:	       pea 1 <_start+0x1>
    eb0c:	       lea 8(sp),a0
    eb10:	       move.l a0,-(sp)
    eb12:	       jsr 14648 <getValueType>
    eb18:	       lea 12(sp),sp
    eb1c:	       tst.w d0
    eb1e:	   ,-- bne.s eb26 <builtIn_mixOverlay+0x2c>
    eb20:	   |   moveq #1,d0
    eb22:	,--|-- bra.w ebbe <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    eb26:	|  '-> moveq #24,d0
    eb28:	|      add.l 20(sp),d0
    eb2c:	|      move.l d0,-(sp)
    eb2e:	|      jsr 14fcc <trimStack>
    eb34:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eb36:	|      movea.l 20(sp),a0
    eb3a:	|      move.l 24(a0),d0
    eb3e:	|      move.l d0,-(sp)
    eb40:	|      pea 1 <_start+0x1>
    eb44:	|      moveq #12,d0
    eb46:	|      add.l sp,d0
    eb48:	|      move.l d0,-(sp)
    eb4a:	|      jsr 14648 <getValueType>
    eb50:	|      lea 12(sp),sp
    eb54:	|      tst.w d0
    eb56:	|  ,-- bne.s eb5c <builtIn_mixOverlay+0x62>
    eb58:	|  |   moveq #1,d0
    eb5a:	+--|-- bra.s ebbe <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    eb5c:	|  '-> moveq #24,d0
    eb5e:	|      add.l 20(sp),d0
    eb62:	|      move.l d0,-(sp)
    eb64:	|      jsr 14fcc <trimStack>
    eb6a:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    eb6c:	|      movea.l 20(sp),a0
    eb70:	|      move.l 24(a0),d0
    eb74:	|      move.l d0,-(sp)
    eb76:	|      pea 5 <_start+0x5>
    eb7a:	|      moveq #16,d0
    eb7c:	|      add.l sp,d0
    eb7e:	|      move.l d0,-(sp)
    eb80:	|      jsr 14648 <getValueType>
    eb86:	|      lea 12(sp),sp
    eb8a:	|      tst.w d0
    eb8c:	|  ,-- bne.s eb92 <builtIn_mixOverlay+0x98>
    eb8e:	|  |   moveq #1,d0
    eb90:	+--|-- bra.s ebbe <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    eb92:	|  '-> moveq #24,d0
    eb94:	|      add.l 20(sp),d0
    eb98:	|      move.l d0,-(sp)
    eb9a:	|      jsr 14fcc <trimStack>
    eba0:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    eba2:	|      movea.l (sp),a0
    eba4:	|      move.l 4(sp),d1
    eba8:	|      move.l 8(sp),d0
    ebac:	|      move.l a0,-(sp)
    ebae:	|      move.l d1,-(sp)
    ebb0:	|      move.l d0,-(sp)
    ebb2:	|      jsr d236 <mixBackDrop>
    ebb8:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ebbc:	|      moveq #2,d0
}
    ebbe:	'----> lea 12(sp),sp
    ebc2:	       rts

0000ebc4 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    ebc4:	       lea -12(sp),sp
	UNUSEDALL
	//KPrintF("pasteimage: Started\n");
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ebc8:	       movea.l 20(sp),a0
    ebcc:	       move.l 24(a0),d0
    ebd0:	       move.l d0,-(sp)
    ebd2:	       pea 1 <_start+0x1>
    ebd6:	       lea 8(sp),a0
    ebda:	       move.l a0,-(sp)
    ebdc:	       jsr 14648 <getValueType>
    ebe2:	       lea 12(sp),sp
    ebe6:	       tst.w d0
    ebe8:	   ,-- bne.s ebf0 <builtIn_pasteImage+0x2c>
    ebea:	   |   moveq #1,d0
    ebec:	,--|-- bra.w ec80 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    ebf0:	|  '-> moveq #24,d0
    ebf2:	|      add.l 20(sp),d0
    ebf6:	|      move.l d0,-(sp)
    ebf8:	|      jsr 14fcc <trimStack>
    ebfe:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec00:	|      movea.l 20(sp),a0
    ec04:	|      move.l 24(a0),d0
    ec08:	|      move.l d0,-(sp)
    ec0a:	|      pea 1 <_start+0x1>
    ec0e:	|      moveq #12,d0
    ec10:	|      add.l sp,d0
    ec12:	|      move.l d0,-(sp)
    ec14:	|      jsr 14648 <getValueType>
    ec1a:	|      lea 12(sp),sp
    ec1e:	|      tst.w d0
    ec20:	|  ,-- bne.s ec26 <builtIn_pasteImage+0x62>
    ec22:	|  |   moveq #1,d0
    ec24:	+--|-- bra.s ec80 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    ec26:	|  '-> moveq #24,d0
    ec28:	|      add.l 20(sp),d0
    ec2c:	|      move.l d0,-(sp)
    ec2e:	|      jsr 14fcc <trimStack>
    ec34:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    ec36:	|      movea.l 20(sp),a0
    ec3a:	|      move.l 24(a0),d0
    ec3e:	|      move.l d0,-(sp)
    ec40:	|      jsr 14b20 <getAnimationFromVar>
    ec46:	|      addq.l #4,sp
    ec48:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    ec4c:	|      moveq #24,d0
    ec4e:	|      add.l 20(sp),d0
    ec52:	|      move.l d0,-(sp)
    ec54:	|      jsr 14fcc <trimStack>
    ec5a:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    ec5c:	|      tst.l 8(sp)
    ec60:	|  ,-- bne.s ec66 <builtIn_pasteImage+0xa2>
    ec62:	|  |   moveq #2,d0
    ec64:	+--|-- bra.s ec80 <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    ec66:	|  '-> move.l (sp),d1
    ec68:	|      move.l 4(sp),d0
    ec6c:	|      move.l 8(sp),-(sp)
    ec70:	|      move.l d1,-(sp)
    ec72:	|      move.l d0,-(sp)
    ec74:	|      jsr d94 <pasteCursor>
    ec7a:	|      lea 12(sp),sp
	//KPrintF("pasteimage: Finished\n");
	return BR_CONTINUE;	
    ec7e:	|      moveq #2,d0
}
    ec80:	'----> lea 12(sp),sp
    ec84:	       rts

0000ec86 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    ec86:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec88:	       movea.l 16(sp),a0
    ec8c:	       move.l 24(a0),d0
    ec90:	       move.l d0,-(sp)
    ec92:	       pea 1 <_start+0x1>
    ec96:	       move.l sp,d0
    ec98:	       addq.l #8,d0
    ec9a:	       move.l d0,-(sp)
    ec9c:	       jsr 14648 <getValueType>
    eca2:	       lea 12(sp),sp
    eca6:	       tst.w d0
    eca8:	   ,-- bne.s ecb0 <builtIn_setSceneDimensions+0x2a>
    ecaa:	   |   moveq #1,d0
    ecac:	,--|-- bra.w ed38 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    ecb0:	|  '-> moveq #24,d0
    ecb2:	|      add.l 16(sp),d0
    ecb6:	|      move.l d0,-(sp)
    ecb8:	|      jsr 14fcc <trimStack>
    ecbe:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ecc0:	|      movea.l 16(sp),a0
    ecc4:	|      move.l 24(a0),d0
    ecc8:	|      move.l d0,-(sp)
    ecca:	|      pea 1 <_start+0x1>
    ecce:	|      moveq #12,d0
    ecd0:	|      add.l sp,d0
    ecd2:	|      move.l d0,-(sp)
    ecd4:	|      jsr 14648 <getValueType>
    ecda:	|      lea 12(sp),sp
    ecde:	|      tst.w d0
    ece0:	|  ,-- bne.s ece6 <builtIn_setSceneDimensions+0x60>
    ece2:	|  |   moveq #1,d0
    ece4:	+--|-- bra.s ed38 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    ece6:	|  '-> moveq #24,d0
    ece8:	|      add.l 16(sp),d0
    ecec:	|      move.l d0,-(sp)
    ecee:	|      jsr 14fcc <trimStack>
    ecf4:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    ecf6:	|      move.l (sp),d1
    ecf8:	|      move.l 4(sp),d0
    ecfc:	|      move.l d1,-(sp)
    ecfe:	|      move.l d0,-(sp)
    ed00:	|      jsr d28c <resizeBackdrop>
    ed06:	|      addq.l #8,sp
    ed08:	|      tst.w d0
    ed0a:	|  ,-- beq.s ed28 <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    ed0c:	|  |   move.l (sp),d1
    ed0e:	|  |   move.l 4(sp),d0
    ed12:	|  |   move.l d1,-(sp)
    ed14:	|  |   move.l d0,-(sp)
    ed16:	|  |   clr.l -(sp)
    ed18:	|  |   clr.l -(sp)
    ed1a:	|  |   jsr d084 <blankScreen>
    ed20:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    ed24:	|  |   moveq #2,d0
    ed26:	+--|-- bra.s ed38 <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    ed28:	|  '-> pea 19731 <PutChar+0x1b83>
    ed2e:	|      jsr 1710c <KPrintF>
    ed34:	|      addq.l #4,sp
	return BR_ERROR;
    ed36:	|      moveq #1,d0
}
    ed38:	'----> addq.l #8,sp
    ed3a:	       rts

0000ed3c <builtIn_aimCamera>:

builtIn(aimCamera)
{
    ed3c:	          move.l d3,-(sp)
    ed3e:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed40:	          movea.l 16(sp),a0
    ed44:	          move.l 24(a0),d0
    ed48:	          move.l d0,-(sp)
    ed4a:	          pea 1 <_start+0x1>
    ed4e:	          pea 1c8ca <cameraY>
    ed54:	          jsr 14648 <getValueType>
    ed5a:	          lea 12(sp),sp
    ed5e:	          tst.w d0
    ed60:	      ,-- bne.s ed68 <builtIn_aimCamera+0x2c>
    ed62:	      |   moveq #1,d0
    ed64:	,-----|-- bra.w efea <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    ed68:	|     '-> moveq #24,d0
    ed6a:	|         add.l 16(sp),d0
    ed6e:	|         move.l d0,-(sp)
    ed70:	|         jsr 14fcc <trimStack>
    ed76:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed78:	|         movea.l 16(sp),a0
    ed7c:	|         move.l 24(a0),d0
    ed80:	|         move.l d0,-(sp)
    ed82:	|         pea 1 <_start+0x1>
    ed86:	|         pea 1c8c6 <cameraX>
    ed8c:	|         jsr 14648 <getValueType>
    ed92:	|         lea 12(sp),sp
    ed96:	|         tst.w d0
    ed98:	|     ,-- bne.s eda0 <builtIn_aimCamera+0x64>
    ed9a:	|     |   moveq #1,d0
    ed9c:	+-----|-- bra.w efea <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    eda0:	|     '-> moveq #24,d0
    eda2:	|         add.l 16(sp),d0
    eda6:	|         move.l d0,-(sp)
    eda8:	|         jsr 14fcc <trimStack>
    edae:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    edb0:	|         move.l 1c8c6 <cameraX>,d0
    edb6:	|         move.l d0,-(sp)
    edb8:	|         jsr 1753e <__floatsisf>
    edbe:	|         addq.l #4,sp
    edc0:	|         move.l d0,d2
    edc2:	|         move.l 1c764 <winWidth>,d0
    edc8:	|         lsr.l #1,d0
    edca:	|         move.l d0,-(sp)
    edcc:	|         jsr 17566 <__floatunsisf>
    edd2:	|         addq.l #4,sp
    edd4:	|         move.l d0,d1
    edd6:	|         move.l 1c1a2 <cameraZoom>,d0
    eddc:	|         move.l d0,-(sp)
    edde:	|         move.l d1,-(sp)
    ede0:	|         jsr 173f4 <__divsf3>
    ede6:	|         addq.l #8,sp
    ede8:	|         move.l d0,-(sp)
    edea:	|         move.l d2,-(sp)
    edec:	|         jsr 17832 <__subsf3>
    edf2:	|         addq.l #8,sp
    edf4:	|         move.l d0,-(sp)
    edf6:	|         jsr 174d6 <__fixsfsi>
    edfc:	|         addq.l #4,sp
    edfe:	|         move.l d0,1c8c6 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    ee04:	|         move.l 1c8ca <cameraY>,d0
    ee0a:	|         move.l d0,-(sp)
    ee0c:	|         jsr 1753e <__floatsisf>
    ee12:	|         addq.l #4,sp
    ee14:	|         move.l d0,d2
    ee16:	|         move.l 1c768 <winHeight>,d0
    ee1c:	|         lsr.l #1,d0
    ee1e:	|         move.l d0,-(sp)
    ee20:	|         jsr 17566 <__floatunsisf>
    ee26:	|         addq.l #4,sp
    ee28:	|         move.l d0,d1
    ee2a:	|         move.l 1c1a2 <cameraZoom>,d0
    ee30:	|         move.l d0,-(sp)
    ee32:	|         move.l d1,-(sp)
    ee34:	|         jsr 173f4 <__divsf3>
    ee3a:	|         addq.l #8,sp
    ee3c:	|         move.l d0,-(sp)
    ee3e:	|         move.l d2,-(sp)
    ee40:	|         jsr 17832 <__subsf3>
    ee46:	|         addq.l #8,sp
    ee48:	|         move.l d0,-(sp)
    ee4a:	|         jsr 174d6 <__fixsfsi>
    ee50:	|         addq.l #4,sp
    ee52:	|         move.l d0,1c8ca <cameraY>

	if (cameraX < 0) cameraX = 0;
    ee58:	|         move.l 1c8c6 <cameraX>,d0
    ee5e:	|     ,-- bpl.s ee6a <builtIn_aimCamera+0x12e>
    ee60:	|     |   clr.l 1c8c6 <cameraX>
    ee66:	|  ,--|-- bra.w ef20 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    ee6a:	|  |  '-> move.l 1c8c6 <cameraX>,d0
    ee70:	|  |      move.l d0,-(sp)
    ee72:	|  |      jsr 1753e <__floatsisf>
    ee78:	|  |      addq.l #4,sp
    ee7a:	|  |      move.l d0,d2
    ee7c:	|  |      move.l 1c8a8 <sceneWidth>,d0
    ee82:	|  |      move.l d0,-(sp)
    ee84:	|  |      jsr 17566 <__floatunsisf>
    ee8a:	|  |      addq.l #4,sp
    ee8c:	|  |      move.l d0,d3
    ee8e:	|  |      move.l 1c764 <winWidth>,d0
    ee94:	|  |      move.l d0,-(sp)
    ee96:	|  |      jsr 17566 <__floatunsisf>
    ee9c:	|  |      addq.l #4,sp
    ee9e:	|  |      move.l d0,d1
    eea0:	|  |      move.l 1c1a2 <cameraZoom>,d0
    eea6:	|  |      move.l d0,-(sp)
    eea8:	|  |      move.l d1,-(sp)
    eeaa:	|  |      jsr 173f4 <__divsf3>
    eeb0:	|  |      addq.l #8,sp
    eeb2:	|  |      move.l d0,-(sp)
    eeb4:	|  |      move.l d3,-(sp)
    eeb6:	|  |      jsr 17832 <__subsf3>
    eebc:	|  |      addq.l #8,sp
    eebe:	|  |      move.l d0,-(sp)
    eec0:	|  |      move.l d2,-(sp)
    eec2:	|  |      jsr 176aa <__gtsf2>
    eec8:	|  |      addq.l #8,sp
    eeca:	|  |      tst.l d0
    eecc:	|  +----- ble.s ef20 <builtIn_aimCamera+0x1e4>
    eece:	|  |      move.l 1c8a8 <sceneWidth>,d0
    eed4:	|  |      move.l d0,-(sp)
    eed6:	|  |      jsr 17566 <__floatunsisf>
    eedc:	|  |      addq.l #4,sp
    eede:	|  |      move.l d0,d2
    eee0:	|  |      move.l 1c764 <winWidth>,d0
    eee6:	|  |      move.l d0,-(sp)
    eee8:	|  |      jsr 17566 <__floatunsisf>
    eeee:	|  |      addq.l #4,sp
    eef0:	|  |      move.l d0,d1
    eef2:	|  |      move.l 1c1a2 <cameraZoom>,d0
    eef8:	|  |      move.l d0,-(sp)
    eefa:	|  |      move.l d1,-(sp)
    eefc:	|  |      jsr 173f4 <__divsf3>
    ef02:	|  |      addq.l #8,sp
    ef04:	|  |      move.l d0,-(sp)
    ef06:	|  |      move.l d2,-(sp)
    ef08:	|  |      jsr 17832 <__subsf3>
    ef0e:	|  |      addq.l #8,sp
    ef10:	|  |      move.l d0,-(sp)
    ef12:	|  |      jsr 174d6 <__fixsfsi>
    ef18:	|  |      addq.l #4,sp
    ef1a:	|  |      move.l d0,1c8c6 <cameraX>
	if (cameraY < 0) cameraY = 0;
    ef20:	|  '----> move.l 1c8ca <cameraY>,d0
    ef26:	|     ,-- bpl.s ef32 <builtIn_aimCamera+0x1f6>
    ef28:	|     |   clr.l 1c8ca <cameraY>
    ef2e:	|  ,--|-- bra.w efe8 <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    ef32:	|  |  '-> move.l 1c8ca <cameraY>,d0
    ef38:	|  |      move.l d0,-(sp)
    ef3a:	|  |      jsr 1753e <__floatsisf>
    ef40:	|  |      addq.l #4,sp
    ef42:	|  |      move.l d0,d2
    ef44:	|  |      move.l 1c8ac <sceneHeight>,d0
    ef4a:	|  |      move.l d0,-(sp)
    ef4c:	|  |      jsr 17566 <__floatunsisf>
    ef52:	|  |      addq.l #4,sp
    ef54:	|  |      move.l d0,d3
    ef56:	|  |      move.l 1c768 <winHeight>,d0
    ef5c:	|  |      move.l d0,-(sp)
    ef5e:	|  |      jsr 17566 <__floatunsisf>
    ef64:	|  |      addq.l #4,sp
    ef66:	|  |      move.l d0,d1
    ef68:	|  |      move.l 1c1a2 <cameraZoom>,d0
    ef6e:	|  |      move.l d0,-(sp)
    ef70:	|  |      move.l d1,-(sp)
    ef72:	|  |      jsr 173f4 <__divsf3>
    ef78:	|  |      addq.l #8,sp
    ef7a:	|  |      move.l d0,-(sp)
    ef7c:	|  |      move.l d3,-(sp)
    ef7e:	|  |      jsr 17832 <__subsf3>
    ef84:	|  |      addq.l #8,sp
    ef86:	|  |      move.l d0,-(sp)
    ef88:	|  |      move.l d2,-(sp)
    ef8a:	|  |      jsr 176aa <__gtsf2>
    ef90:	|  |      addq.l #8,sp
    ef92:	|  |      tst.l d0
    ef94:	|  +----- ble.s efe8 <builtIn_aimCamera+0x2ac>
    ef96:	|  |      move.l 1c8ac <sceneHeight>,d0
    ef9c:	|  |      move.l d0,-(sp)
    ef9e:	|  |      jsr 17566 <__floatunsisf>
    efa4:	|  |      addq.l #4,sp
    efa6:	|  |      move.l d0,d2
    efa8:	|  |      move.l 1c768 <winHeight>,d0
    efae:	|  |      move.l d0,-(sp)
    efb0:	|  |      jsr 17566 <__floatunsisf>
    efb6:	|  |      addq.l #4,sp
    efb8:	|  |      move.l d0,d1
    efba:	|  |      move.l 1c1a2 <cameraZoom>,d0
    efc0:	|  |      move.l d0,-(sp)
    efc2:	|  |      move.l d1,-(sp)
    efc4:	|  |      jsr 173f4 <__divsf3>
    efca:	|  |      addq.l #8,sp
    efcc:	|  |      move.l d0,-(sp)
    efce:	|  |      move.l d2,-(sp)
    efd0:	|  |      jsr 17832 <__subsf3>
    efd6:	|  |      addq.l #8,sp
    efd8:	|  |      move.l d0,-(sp)
    efda:	|  |      jsr 174d6 <__fixsfsi>
    efe0:	|  |      addq.l #4,sp
    efe2:	|  |      move.l d0,1c8ca <cameraY>
	return BR_CONTINUE;
    efe8:	|  '----> moveq #2,d0
}
    efea:	'-------> move.l (sp)+,d2
    efec:	          move.l (sp)+,d3
    efee:	          rts

0000eff0 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    eff0:	       subq.l #4,sp
    eff2:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eff4:	       movea.l 16(sp),a0
    eff8:	       move.l 24(a0),d0
    effc:	       move.l d0,-(sp)
    effe:	       pea 1 <_start+0x1>
    f002:	       moveq #12,d0
    f004:	       add.l sp,d0
    f006:	       move.l d0,-(sp)
    f008:	       jsr 14648 <getValueType>
    f00e:	       lea 12(sp),sp
    f012:	       tst.w d0
    f014:	   ,-- bne.s f01c <builtIn_zoomCamera+0x2c>
    f016:	   |   moveq #1,d0
    f018:	,--|-- bra.w f216 <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    f01c:	|  '-> moveq #24,d0
    f01e:	|      add.l 16(sp),d0
    f022:	|      move.l d0,-(sp)
    f024:	|      jsr 14fcc <trimStack>
    f02a:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    f02c:	|      move.l 1c7cc <input+0xa>,d0
    f032:	|      move.l d0,-(sp)
    f034:	|      jsr 1753e <__floatsisf>
    f03a:	|      addq.l #4,sp
    f03c:	|      move.l d0,d1
    f03e:	|      move.l 1c1a2 <cameraZoom>,d0
    f044:	|      move.l d0,-(sp)
    f046:	|      move.l d1,-(sp)
    f048:	|      jsr 175f0 <__mulsf3>
    f04e:	|      addq.l #8,sp
    f050:	|      move.l d0,-(sp)
    f052:	|      jsr 174d6 <__fixsfsi>
    f058:	|      addq.l #4,sp
    f05a:	|      move.l d0,1c7cc <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    f060:	|      move.l 1c7d0 <input+0xe>,d0
    f066:	|      move.l d0,-(sp)
    f068:	|      jsr 1753e <__floatsisf>
    f06e:	|      addq.l #4,sp
    f070:	|      move.l d0,d1
    f072:	|      move.l 1c1a2 <cameraZoom>,d0
    f078:	|      move.l d0,-(sp)
    f07a:	|      move.l d1,-(sp)
    f07c:	|      jsr 175f0 <__mulsf3>
    f082:	|      addq.l #8,sp
    f084:	|      move.l d0,-(sp)
    f086:	|      jsr 174d6 <__fixsfsi>
    f08c:	|      addq.l #4,sp
    f08e:	|      move.l d0,1c7d0 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    f094:	|      move.l 4(sp),d0
    f098:	|      move.l d0,-(sp)
    f09a:	|      jsr 1753e <__floatsisf>
    f0a0:	|      addq.l #4,sp
    f0a2:	|      move.l #1008981770,-(sp)
    f0a8:	|      move.l d0,-(sp)
    f0aa:	|      jsr 175f0 <__mulsf3>
    f0b0:	|      addq.l #8,sp
    f0b2:	|      move.l d0,1c1a2 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    f0b8:	|      move.l 1c764 <winWidth>,d0
    f0be:	|      move.l d0,-(sp)
    f0c0:	|      jsr 17566 <__floatunsisf>
    f0c6:	|      addq.l #4,sp
    f0c8:	|      move.l d0,d1
    f0ca:	|      move.l 1c1a2 <cameraZoom>,d0
    f0d0:	|      move.l d0,-(sp)
    f0d2:	|      move.l d1,-(sp)
    f0d4:	|      jsr 173f4 <__divsf3>
    f0da:	|      addq.l #8,sp
    f0dc:	|      move.l d0,d2
    f0de:	|      move.l 1c8a8 <sceneWidth>,d0
    f0e4:	|      move.l d0,-(sp)
    f0e6:	|      jsr 17566 <__floatunsisf>
    f0ec:	|      addq.l #4,sp
    f0ee:	|      move.l d0,-(sp)
    f0f0:	|      move.l d2,-(sp)
    f0f2:	|      jsr 176aa <__gtsf2>
    f0f8:	|      addq.l #8,sp
    f0fa:	|      tst.l d0
    f0fc:	|  ,-- ble.s f132 <builtIn_zoomCamera+0x142>
    f0fe:	|  |   move.l 1c764 <winWidth>,d0
    f104:	|  |   move.l d0,-(sp)
    f106:	|  |   jsr 17566 <__floatunsisf>
    f10c:	|  |   addq.l #4,sp
    f10e:	|  |   move.l d0,d2
    f110:	|  |   move.l 1c8a8 <sceneWidth>,d0
    f116:	|  |   move.l d0,-(sp)
    f118:	|  |   jsr 17566 <__floatunsisf>
    f11e:	|  |   addq.l #4,sp
    f120:	|  |   move.l d0,-(sp)
    f122:	|  |   move.l d2,-(sp)
    f124:	|  |   jsr 173f4 <__divsf3>
    f12a:	|  |   addq.l #8,sp
    f12c:	|  |   move.l d0,1c1a2 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    f132:	|  '-> move.l 1c768 <winHeight>,d0
    f138:	|      move.l d0,-(sp)
    f13a:	|      jsr 17566 <__floatunsisf>
    f140:	|      addq.l #4,sp
    f142:	|      move.l d0,d1
    f144:	|      move.l 1c1a2 <cameraZoom>,d0
    f14a:	|      move.l d0,-(sp)
    f14c:	|      move.l d1,-(sp)
    f14e:	|      jsr 173f4 <__divsf3>
    f154:	|      addq.l #8,sp
    f156:	|      move.l d0,d2
    f158:	|      move.l 1c8ac <sceneHeight>,d0
    f15e:	|      move.l d0,-(sp)
    f160:	|      jsr 17566 <__floatunsisf>
    f166:	|      addq.l #4,sp
    f168:	|      move.l d0,-(sp)
    f16a:	|      move.l d2,-(sp)
    f16c:	|      jsr 176aa <__gtsf2>
    f172:	|      addq.l #8,sp
    f174:	|      tst.l d0
    f176:	|  ,-- ble.s f1ac <builtIn_zoomCamera+0x1bc>
    f178:	|  |   move.l 1c768 <winHeight>,d0
    f17e:	|  |   move.l d0,-(sp)
    f180:	|  |   jsr 17566 <__floatunsisf>
    f186:	|  |   addq.l #4,sp
    f188:	|  |   move.l d0,d2
    f18a:	|  |   move.l 1c8ac <sceneHeight>,d0
    f190:	|  |   move.l d0,-(sp)
    f192:	|  |   jsr 17566 <__floatunsisf>
    f198:	|  |   addq.l #4,sp
    f19a:	|  |   move.l d0,-(sp)
    f19c:	|  |   move.l d2,-(sp)
    f19e:	|  |   jsr 173f4 <__divsf3>
    f1a4:	|  |   addq.l #8,sp
    f1a6:	|  |   move.l d0,1c1a2 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    f1ac:	|  '-> move.l 1c7cc <input+0xa>,d0
    f1b2:	|      move.l d0,-(sp)
    f1b4:	|      jsr 1753e <__floatsisf>
    f1ba:	|      addq.l #4,sp
    f1bc:	|      move.l d0,d1
    f1be:	|      move.l 1c1a2 <cameraZoom>,d0
    f1c4:	|      move.l d0,-(sp)
    f1c6:	|      move.l d1,-(sp)
    f1c8:	|      jsr 173f4 <__divsf3>
    f1ce:	|      addq.l #8,sp
    f1d0:	|      move.l d0,-(sp)
    f1d2:	|      jsr 174d6 <__fixsfsi>
    f1d8:	|      addq.l #4,sp
    f1da:	|      move.l d0,1c7cc <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    f1e0:	|      move.l 1c7d0 <input+0xe>,d0
    f1e6:	|      move.l d0,-(sp)
    f1e8:	|      jsr 1753e <__floatsisf>
    f1ee:	|      addq.l #4,sp
    f1f0:	|      move.l d0,d1
    f1f2:	|      move.l 1c1a2 <cameraZoom>,d0
    f1f8:	|      move.l d0,-(sp)
    f1fa:	|      move.l d1,-(sp)
    f1fc:	|      jsr 173f4 <__divsf3>
    f202:	|      addq.l #8,sp
    f204:	|      move.l d0,-(sp)
    f206:	|      jsr 174d6 <__fixsfsi>
    f20c:	|      addq.l #4,sp
    f20e:	|      move.l d0,1c7d0 <input+0xe>

	return BR_CONTINUE;
    f214:	|      moveq #2,d0
}
    f216:	'----> move.l (sp)+,d2
    f218:	       addq.l #4,sp
    f21a:	       rts

0000f21c <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    f21c:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    f21e:	             tst.l 8(sp)
    f222:	         ,-- bne.s f236 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    f224:	         |   pea 19756 <PutChar+0x1ba8>
    f22a:	         |   jsr 1710c <KPrintF>
    f230:	         |   addq.l #4,sp
		return BR_ERROR;
    f232:	         |   moveq #1,d0
    f234:	,--------|-- bra.s f296 <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    f236:	|        '-> jsr 15ce8 <rand>
    f23c:	|            move.l d0,d1
    f23e:	|            move.l 8(sp),d0
    f242:	|            move.l d0,-(sp)
    f244:	|            move.l d1,-(sp)
    f246:	|            jsr 17b72 <__umodsi3>
    f24c:	|            addq.l #8,sp
    f24e:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    f250:	|     ,----- bra.s f284 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    f252:	|  ,--|----> move.l (sp),d0
    f254:	|  |  |      cmp.l 8(sp),d0
    f258:	|  |  |  ,-- bne.s f274 <builtIn_pickOne+0x58>
    f25a:	|  |  |  |   moveq #28,d0
    f25c:	|  |  |  |   add.l 12(sp),d0
    f260:	|  |  |  |   movea.l 12(sp),a0
    f264:	|  |  |  |   move.l 24(a0),d1
    f268:	|  |  |  |   move.l d0,-(sp)
    f26a:	|  |  |  |   move.l d1,-(sp)
    f26c:	|  |  |  |   jsr 14b02 <copyVariable>
    f272:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    f274:	|  |  |  '-> moveq #24,d0
    f276:	|  |  |      add.l 12(sp),d0
    f27a:	|  |  |      move.l d0,-(sp)
    f27c:	|  |  |      jsr 14fcc <trimStack>
    f282:	|  |  |      addq.l #4,sp
	while (numParams --) {
    f284:	|  |  '----> move.l 8(sp),d0
    f288:	|  |         move.l d0,d1
    f28a:	|  |         subq.l #1,d1
    f28c:	|  |         move.l d1,8(sp)
    f290:	|  |         tst.l d0
    f292:	|  '-------- bne.s f252 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    f294:	|            moveq #2,d0
}
    f296:	'----------> addq.l #4,sp
    f298:	             rts

0000f29a <builtIn_substring>:

builtIn(substring)
{
    f29a:	       lea -40(sp),sp
    f29e:	       move.l a6,-(sp)
    f2a0:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f2a2:	       movea.l 56(sp),a0
    f2a6:	       move.l 24(a0),d0
    f2aa:	       move.l d0,-(sp)
    f2ac:	       pea 1 <_start+0x1>
    f2b0:	       lea 16(sp),a0
    f2b4:	       move.l a0,-(sp)
    f2b6:	       jsr 14648 <getValueType>
    f2bc:	       lea 12(sp),sp
    f2c0:	       tst.w d0
    f2c2:	   ,-- bne.s f2ca <builtIn_substring+0x30>
    f2c4:	   |   moveq #1,d0
    f2c6:	,--|-- bra.w f442 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f2ca:	|  '-> moveq #24,d0
    f2cc:	|      add.l 56(sp),d0
    f2d0:	|      move.l d0,-(sp)
    f2d2:	|      jsr 14fcc <trimStack>
    f2d8:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f2da:	|      movea.l 56(sp),a0
    f2de:	|      move.l 24(a0),d0
    f2e2:	|      move.l d0,-(sp)
    f2e4:	|      pea 1 <_start+0x1>
    f2e8:	|      lea 20(sp),a0
    f2ec:	|      move.l a0,-(sp)
    f2ee:	|      jsr 14648 <getValueType>
    f2f4:	|      lea 12(sp),sp
    f2f8:	|      tst.w d0
    f2fa:	|  ,-- bne.s f302 <builtIn_substring+0x68>
    f2fc:	|  |   moveq #1,d0
    f2fe:	+--|-- bra.w f442 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f302:	|  '-> moveq #24,d0
    f304:	|      add.l 56(sp),d0
    f308:	|      move.l d0,-(sp)
    f30a:	|      jsr 14fcc <trimStack>
    f310:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    f312:	|      movea.l 56(sp),a0
    f316:	|      move.l 24(a0),d0
    f31a:	|      move.l d0,-(sp)
    f31c:	|      jsr 14c1e <getTextFromAnyVar>
    f322:	|      addq.l #4,sp
    f324:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    f328:	|      moveq #24,d0
    f32a:	|      add.l 56(sp),d0
    f32e:	|      move.l d0,-(sp)
    f330:	|      jsr 14fcc <trimStack>
    f336:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    f338:	|      move.l 44(sp),-(sp)
    f33c:	|      jsr 13b34 <strlen>
    f342:	|      addq.l #4,sp
    f344:	|      move.l d0,d1
    f346:	|      move.l 12(sp),d0
    f34a:	|      movea.l d0,a0
    f34c:	|      move.l 8(sp),d0
    f350:	|      add.l a0,d0
    f352:	|      cmp.l d1,d0
    f354:	|  ,-- bls.s f38a <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    f356:	|  |   move.l 44(sp),-(sp)
    f35a:	|  |   jsr 13b34 <strlen>
    f360:	|  |   addq.l #4,sp
    f362:	|  |   move.l d0,d1
    f364:	|  |   move.l 12(sp),d0
    f368:	|  |   sub.l d0,d1
    f36a:	|  |   move.l d1,d0
    f36c:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    f370:	|  |   move.l 44(sp),-(sp)
    f374:	|  |   jsr 13b34 <strlen>
    f37a:	|  |   addq.l #4,sp
    f37c:	|  |   move.l d0,d1
    f37e:	|  |   move.l 12(sp),d0
    f382:	|  |   cmp.l d1,d0
    f384:	|  +-- bls.s f38a <builtIn_substring+0xf0>
            start = 0;
    f386:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    f38a:	|  '-> move.l 8(sp),d0
    f38e:	|  ,-- bpl.s f394 <builtIn_substring+0xfa>
        length = 0;
    f390:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    f394:	|  '-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    f39a:	|      move.l 12(sp),d1
    f39e:	|      move.l 8(sp),d0
    f3a2:	|      move.l d1,d2
    f3a4:	|      add.l d0,d2
    f3a6:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    f3aa:	|      move.l 36(sp),d0
    f3ae:	|      sub.l 40(sp),d0
    f3b2:	|      addq.l #1,d0
    f3b4:	|      move.l d0,32(sp)
    f3b8:	|      clr.l 28(sp)
    f3bc:	|      move.l 1c810 <SysBase>,d0
    f3c2:	|      movea.l d0,a6
    f3c4:	|      move.l 32(sp),d0
    f3c8:	|      move.l 28(sp),d1
    f3cc:	|      jsr -684(a6)
    f3d0:	|      move.l d0,24(sp)
    f3d4:	|      move.l 24(sp),d0
    f3d8:	|      move.l d0,20(sp)
    if (!newString) {
    f3dc:	|  ,-- bne.s f3e2 <builtIn_substring+0x148>
        return BR_ERROR;
    f3de:	|  |   moveq #1,d0
    f3e0:	+--|-- bra.s f442 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    f3e2:	|  '-> move.l 36(sp),d0
    f3e6:	|      sub.l 40(sp),d0
    f3ea:	|      move.l d0,d1
    f3ec:	|      move.l 40(sp),d0
    f3f0:	|      add.l 44(sp),d0
    f3f4:	|      move.l d1,-(sp)
    f3f6:	|      move.l d0,-(sp)
    f3f8:	|      move.l 28(sp),-(sp)
    f3fc:	|      jsr 170c0 <memcpy>
    f402:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    f406:	|      move.l 36(sp),d0
    f40a:	|      sub.l 40(sp),d0
    f40e:	|      movea.l 20(sp),a0
    f412:	|      adda.l d0,a0
    f414:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    f416:	|      moveq #28,d0
    f418:	|      add.l 56(sp),d0
    f41c:	|      move.l 20(sp),-(sp)
    f420:	|      move.l d0,-(sp)
    f422:	|      jsr 1486a <makeTextVar>
    f428:	|      addq.l #8,sp
    FreeVec(newString);
    f42a:	|      move.l 20(sp),16(sp)
    f430:	|      move.l 1c810 <SysBase>,d0
    f436:	|      movea.l d0,a6
    f438:	|      movea.l 16(sp),a1
    f43c:	|      jsr -690(a6)
    return BR_CONTINUE;
    f440:	|      moveq #2,d0
}
    f442:	'----> move.l (sp)+,d2
    f444:	       movea.l (sp)+,a6
    f446:	       lea 40(sp),sp
    f44a:	       rts

0000f44c <builtIn_stringLength>:

builtIn(stringLength)
{
    f44c:	subq.l #8,sp
    f44e:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f450:	movea.l 20(sp),a0
    f454:	move.l 24(a0),d0
    f458:	move.l d0,-(sp)
    f45a:	jsr 14c1e <getTextFromAnyVar>
    f460:	addq.l #4,sp
    f462:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    f466:	moveq #24,d0
    f468:	add.l 20(sp),d0
    f46c:	move.l d0,-(sp)
    f46e:	jsr 14fcc <trimStack>
    f474:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    f476:	move.l 8(sp),-(sp)
    f47a:	jsr 13b34 <strlen>
    f480:	addq.l #4,sp
    f482:	move.l d0,d1
    f484:	moveq #28,d0
    f486:	add.l 20(sp),d0
    f48a:	move.l d1,-(sp)
    f48c:	pea 1 <_start+0x1>
    f490:	move.l d0,-(sp)
    f492:	jsr 14f3a <setVariable>
    f498:	lea 12(sp),sp
	FreeVec(newText);
    f49c:	move.l 8(sp),4(sp)
    f4a2:	move.l 1c810 <SysBase>,d0
    f4a8:	movea.l d0,a6
    f4aa:	movea.l 4(sp),a1
    f4ae:	jsr -690(a6)
	return BR_CONTINUE;
    f4b2:	moveq #2,d0
}
    f4b4:	movea.l (sp)+,a6
    f4b6:	addq.l #8,sp
    f4b8:	rts

0000f4ba <builtIn_newStack>:

builtIn(newStack)
{
    f4ba:	             lea -12(sp),sp
    f4be:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    f4c0:	             moveq #28,d0
    f4c2:	             add.l 24(sp),d0
    f4c6:	             move.l d0,-(sp)
    f4c8:	             jsr 14896 <unlinkVar>
    f4ce:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    f4d0:	             movea.l 24(sp),a0
    f4d4:	             moveq #6,d0
    f4d6:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    f4da:	             moveq #12,d1
    f4dc:	             move.l d1,12(sp)
    f4e0:	             clr.l 8(sp)
    f4e4:	             move.l 1c810 <SysBase>,d0
    f4ea:	             movea.l d0,a6
    f4ec:	             move.l 12(sp),d0
    f4f0:	             move.l 8(sp),d1
    f4f4:	             jsr -684(a6)
    f4f8:	             move.l d0,4(sp)
    f4fc:	             move.l 4(sp),d0
    f500:	             movea.l 24(sp),a0
    f504:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    f508:	             movea.l 24(sp),a0
    f50c:	             move.l 32(a0),d0
    f510:	         ,-- bne.s f518 <builtIn_newStack+0x5e>
    f512:	         |   moveq #1,d0
    f514:	,--------|-- bra.w f5aa <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    f518:	|        '-> movea.l 24(sp),a0
    f51c:	|            movea.l 32(a0),a0
    f520:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    f522:	|            movea.l 24(sp),a0
    f526:	|            movea.l 32(a0),a0
    f52a:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    f52e:	|            movea.l 24(sp),a0
    f532:	|            movea.l 32(a0),a0
    f536:	|            moveq #1,d0
    f538:	|            move.l d0,8(a0)
    
    while (numParams--) {
    f53c:	|     ,----- bra.s f598 <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    f53e:	|  ,--|----> movea.l 24(sp),a0
    f542:	|  |  |      move.l 32(a0),d0
    f546:	|  |  |      move.l d0,d1
    f548:	|  |  |      movea.l 24(sp),a0
    f54c:	|  |  |      move.l 24(a0),d0
    f550:	|  |  |      move.l d1,-(sp)
    f552:	|  |  |      move.l d0,-(sp)
    f554:	|  |  |      jsr 13e84 <addVarToStack>
    f55a:	|  |  |      addq.l #8,sp
    f55c:	|  |  |      tst.w d0
    f55e:	|  |  |  ,-- bne.s f564 <builtIn_newStack+0xaa>
    f560:	|  |  |  |   moveq #1,d0
    f562:	+--|--|--|-- bra.s f5aa <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    f564:	|  |  |  '-> movea.l 24(sp),a0
    f568:	|  |  |      movea.l 32(a0),a0
    f56c:	|  |  |      move.l 4(a0),d0
    f570:	|  |  |  ,-- bne.s f588 <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    f572:	|  |  |  |   movea.l 24(sp),a0
    f576:	|  |  |  |   movea.l 32(a0),a1
    f57a:	|  |  |  |   movea.l 24(sp),a0
    f57e:	|  |  |  |   movea.l 32(a0),a0
    f582:	|  |  |  |   move.l (a1),d0
    f584:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    f588:	|  |  |  '-> moveq #24,d0
    f58a:	|  |  |      add.l 24(sp),d0
    f58e:	|  |  |      move.l d0,-(sp)
    f590:	|  |  |      jsr 14fcc <trimStack>
    f596:	|  |  |      addq.l #4,sp
    while (numParams--) {
    f598:	|  |  '----> move.l 20(sp),d0
    f59c:	|  |         move.l d0,d1
    f59e:	|  |         subq.l #1,d1
    f5a0:	|  |         move.l d1,20(sp)
    f5a4:	|  |         tst.l d0
    f5a6:	|  '-------- bne.s f53e <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    f5a8:	|            moveq #2,d0
}
    f5aa:	'----------> movea.l (sp)+,a6
    f5ac:	             lea 12(sp),sp
    f5b0:	             rts

0000f5b2 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    f5b2:	          movea.l 8(sp),a0
    f5b6:	          movea.l 24(a0),a0
    f5ba:	          move.l (a0),d0
    f5bc:	          moveq #6,d1
    f5be:	          cmp.l d0,d1
    f5c0:	      ,-- beq.s f5dc <builtIn_stackSize+0x2a>
    f5c2:	      |   moveq #10,d1
    f5c4:	      |   cmp.l d0,d1
    f5c6:	   ,--|-- beq.s f620 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    f5c8:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    f5ca:	   |  |   pea 19789 <PutChar+0x1bdb>
    f5d0:	   |  |   jsr 1710c <KPrintF>
    f5d6:	   |  |   addq.l #4,sp
	return BR_ERROR;
    f5d8:	   |  |   moveq #1,d0
    f5da:	,--|--|-- bra.s f65a <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    f5dc:	|  |  '-> movea.l 8(sp),a0
    f5e0:	|  |      movea.l 24(a0),a0
    f5e4:	|  |      move.l 4(a0),d0
    f5e8:	|  |      move.l d0,-(sp)
    f5ea:	|  |      jsr 14fa8 <stackSize>
    f5f0:	|  |      addq.l #4,sp
    f5f2:	|  |      move.l d0,d1
    f5f4:	|  |      moveq #28,d0
    f5f6:	|  |      add.l 8(sp),d0
    f5fa:	|  |      move.l d1,-(sp)
    f5fc:	|  |      pea 1 <_start+0x1>
    f600:	|  |      move.l d0,-(sp)
    f602:	|  |      jsr 14f3a <setVariable>
    f608:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    f60c:	|  |      moveq #24,d0
    f60e:	|  |      add.l 8(sp),d0
    f612:	|  |      move.l d0,-(sp)
    f614:	|  |      jsr 14fcc <trimStack>
    f61a:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    f61c:	|  |      moveq #2,d0
    f61e:	+--|----- bra.s f65a <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    f620:	|  '----> movea.l 8(sp),a0
    f624:	|         movea.l 24(a0),a0
    f628:	|         movea.l 4(a0),a0
    f62c:	|         move.l 4(a0),d1
    f630:	|         moveq #28,d0
    f632:	|         add.l 8(sp),d0
    f636:	|         move.l d1,-(sp)
    f638:	|         pea 1 <_start+0x1>
    f63c:	|         move.l d0,-(sp)
    f63e:	|         jsr 14f3a <setVariable>
    f644:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    f648:	|         moveq #24,d0
    f64a:	|         add.l 8(sp),d0
    f64e:	|         move.l d0,-(sp)
    f650:	|         jsr 14fcc <trimStack>
    f656:	|         addq.l #4,sp
			return BR_CONTINUE;
    f658:	|         moveq #2,d0
}
    f65a:	'-------> rts

0000f65c <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f65c:	       movea.l 8(sp),a0
    f660:	       movea.l 24(a0),a0
    f664:	       move.l (a0),d0
    f666:	       moveq #6,d1
    f668:	       cmp.l d0,d1
    f66a:	   ,-- beq.s f67e <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f66c:	   |   pea 197b2 <PutChar+0x1c04>
    f672:	   |   jsr 1710c <KPrintF>
    f678:	   |   addq.l #4,sp
		return BR_ERROR;
    f67a:	   |   moveq #1,d0
    f67c:	,--|-- bra.s f6b2 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    f67e:	|  '-> moveq #28,d0
    f680:	|      add.l 8(sp),d0
    f684:	|      movea.l 8(sp),a0
    f688:	|      move.l 24(a0),d1
    f68c:	|      move.l d0,-(sp)
    f68e:	|      move.l d1,-(sp)
    f690:	|      jsr 1414e <copyStack>
    f696:	|      addq.l #8,sp
    f698:	|      tst.w d0
    f69a:	|  ,-- bne.s f6a0 <builtIn_copyStack+0x44>
    f69c:	|  |   moveq #1,d0
    f69e:	+--|-- bra.s f6b2 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    f6a0:	|  '-> moveq #24,d0
    f6a2:	|      add.l 8(sp),d0
    f6a6:	|      move.l d0,-(sp)
    f6a8:	|      jsr 14fcc <trimStack>
    f6ae:	|      addq.l #4,sp
	return BR_CONTINUE;
    f6b0:	|      moveq #2,d0
}
    f6b2:	'----> rts

0000f6b4 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f6b4:	       movea.l 8(sp),a0
    f6b8:	       movea.l 24(a0),a0
    f6bc:	       movea.l 8(a0),a0
    f6c0:	       move.l (a0),d0
    f6c2:	       moveq #6,d1
    f6c4:	       cmp.l d0,d1
    f6c6:	   ,-- beq.s f6dc <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    f6c8:	   |   pea 197cb <PutChar+0x1c1d>
    f6ce:	   |   jsr 1710c <KPrintF>
    f6d4:	   |   addq.l #4,sp
		return BR_ERROR;
    f6d6:	   |   moveq #1,d0
    f6d8:	,--|-- bra.w f76a <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f6dc:	|  '-> movea.l 8(sp),a0
    f6e0:	|      movea.l 24(a0),a0
    f6e4:	|      movea.l 8(a0),a0
    f6e8:	|      move.l 4(a0),d0
    f6ec:	|      move.l d0,d1
    f6ee:	|      movea.l 8(sp),a0
    f6f2:	|      move.l 24(a0),d0
    f6f6:	|      move.l d1,-(sp)
    f6f8:	|      move.l d0,-(sp)
    f6fa:	|      jsr 13e84 <addVarToStack>
    f700:	|      addq.l #8,sp
    f702:	|      tst.w d0
    f704:	|  ,-- bne.s f70a <builtIn_pushToStack+0x56>
		return BR_ERROR;
    f706:	|  |   moveq #1,d0
    f708:	+--|-- bra.s f76a <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    f70a:	|  '-> movea.l 8(sp),a0
    f70e:	|      movea.l 24(a0),a0
    f712:	|      movea.l 8(a0),a0
    f716:	|      movea.l 4(a0),a0
    f71a:	|      movea.l (a0),a0
    f71c:	|      move.l 8(a0),d0
    f720:	|  ,-- bne.s f748 <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f722:	|  |   movea.l 8(sp),a0
    f726:	|  |   movea.l 24(a0),a0
    f72a:	|  |   movea.l 8(a0),a0
    f72e:	|  |   movea.l 4(a0),a1
    f732:	|  |   movea.l 8(sp),a0
    f736:	|  |   movea.l 24(a0),a0
    f73a:	|  |   movea.l 8(a0),a0
    f73e:	|  |   movea.l 4(a0),a0
    f742:	|  |   move.l (a1),d0
    f744:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    f748:	|  '-> moveq #24,d0
    f74a:	|      add.l 8(sp),d0
    f74e:	|      move.l d0,-(sp)
    f750:	|      jsr 14fcc <trimStack>
    f756:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f758:	|      moveq #24,d0
    f75a:	|      add.l 8(sp),d0
    f75e:	|      move.l d0,-(sp)
    f760:	|      jsr 14fcc <trimStack>
    f766:	|      addq.l #4,sp
	return BR_CONTINUE;
    f768:	|      moveq #2,d0
}
    f76a:	'----> rts

0000f76c <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f76c:	             movea.l 8(sp),a0
    f770:	             movea.l 24(a0),a0
    f774:	             movea.l 8(a0),a0
    f778:	             move.l (a0),d0
    f77a:	             moveq #6,d1
    f77c:	             cmp.l d0,d1
    f77e:	         ,-- beq.s f794 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    f780:	         |   pea 197cb <PutChar+0x1c1d>
    f786:	         |   jsr 1710c <KPrintF>
    f78c:	         |   addq.l #4,sp
		return BR_ERROR;
    f78e:	         |   moveq #1,d0
    f790:	,--------|-- bra.w f882 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    f794:	|        '-> movea.l 8(sp),a0
    f798:	|            movea.l 24(a0),a0
    f79c:	|            movea.l 8(a0),a0
    f7a0:	|            movea.l 4(a0),a0
    f7a4:	|            move.l (a0),d0
    f7a6:	|     ,----- bne.s f800 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f7a8:	|     |      movea.l 8(sp),a0
    f7ac:	|     |      movea.l 24(a0),a0
    f7b0:	|     |      movea.l 8(a0),a0
    f7b4:	|     |      move.l 4(a0),d0
    f7b8:	|     |      move.l d0,d1
    f7ba:	|     |      movea.l 8(sp),a0
    f7be:	|     |      move.l 24(a0),d0
    f7c2:	|     |      move.l d1,-(sp)
    f7c4:	|     |      move.l d0,-(sp)
    f7c6:	|     |      jsr 13e84 <addVarToStack>
    f7cc:	|     |      addq.l #8,sp
    f7ce:	|     |      tst.w d0
    f7d0:	|     |  ,-- bne.s f7d8 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    f7d2:	|     |  |   moveq #1,d0
    f7d4:	+-----|--|-- bra.w f882 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f7d8:	|     |  '-> movea.l 8(sp),a0
    f7dc:	|     |      movea.l 24(a0),a0
    f7e0:	|     |      movea.l 8(a0),a0
    f7e4:	|     |      movea.l 4(a0),a1
    f7e8:	|     |      movea.l 8(sp),a0
    f7ec:	|     |      movea.l 24(a0),a0
    f7f0:	|     |      movea.l 8(a0),a0
    f7f4:	|     |      movea.l 4(a0),a0
    f7f8:	|     |      move.l (a1),d0
    f7fa:	|     |      move.l d0,4(a0)
    f7fe:	|  ,--|----- bra.s f860 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    f800:	|  |  '----> movea.l 8(sp),a0
    f804:	|  |         movea.l 24(a0),a0
    f808:	|  |         movea.l 8(a0),a0
    f80c:	|  |         movea.l 4(a0),a0
    f810:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    f814:	|  |         move.l d0,d1
    f816:	|  |         addq.l #8,d1
    f818:	|  |         movea.l 8(sp),a0
    f81c:	|  |         move.l 24(a0),d0
    f820:	|  |         move.l d1,-(sp)
    f822:	|  |         move.l d0,-(sp)
    f824:	|  |         jsr 13e84 <addVarToStack>
    f82a:	|  |         addq.l #8,sp
    f82c:	|  |         tst.w d0
    f82e:	|  |     ,-- bne.s f834 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    f830:	|  |     |   moveq #1,d0
    f832:	+--|-----|-- bra.s f882 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    f834:	|  |     '-> movea.l 8(sp),a0
    f838:	|  |         movea.l 24(a0),a0
    f83c:	|  |         movea.l 8(a0),a0
    f840:	|  |         movea.l 4(a0),a0
    f844:	|  |         movea.l 4(a0),a1
    f848:	|  |         movea.l 8(sp),a0
    f84c:	|  |         movea.l 24(a0),a0
    f850:	|  |         movea.l 8(a0),a0
    f854:	|  |         movea.l 4(a0),a0
    f858:	|  |         move.l 8(a1),d0
    f85c:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    f860:	|  '-------> moveq #24,d0
    f862:	|            add.l 8(sp),d0
    f866:	|            move.l d0,-(sp)
    f868:	|            jsr 14fcc <trimStack>
    f86e:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    f870:	|            moveq #24,d0
    f872:	|            add.l 8(sp),d0
    f876:	|            move.l d0,-(sp)
    f878:	|            jsr 14fcc <trimStack>
    f87e:	|            addq.l #4,sp
	return BR_CONTINUE;
    f880:	|            moveq #2,d0
}
    f882:	'----------> rts

0000f884 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    f884:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f886:	       movea.l 12(sp),a0
    f88a:	       movea.l 24(a0),a0
    f88e:	       movea.l 8(a0),a0
    f892:	       move.l (a0),d0
    f894:	       moveq #6,d1
    f896:	       cmp.l d0,d1
    f898:	   ,-- beq.s f8ae <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    f89a:	   |   pea 197b2 <PutChar+0x1c04>
    f8a0:	   |   jsr 1710c <KPrintF>
    f8a6:	   |   addq.l #4,sp
		return BR_ERROR;
    f8a8:	   |   moveq #1,d0
    f8aa:	,--|-- bra.w f944 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    f8ae:	|  '-> movea.l 12(sp),a0
    f8b2:	|      movea.l 24(a0),a0
    f8b6:	|      movea.l 8(a0),a0
    f8ba:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f8be:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    f8c0:	|      movea.l 12(sp),a0
    f8c4:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f8c8:	|      clr.l -(sp)
    f8ca:	|      move.l d1,-(sp)
    f8cc:	|      move.l d0,-(sp)
    f8ce:	|      jsr 14224 <deleteVarFromStack>
    f8d4:	|      lea 12(sp),sp
    f8d8:	|      move.l d0,d1
    f8da:	|      moveq #28,d0
    f8dc:	|      add.l 12(sp),d0
    f8e0:	|      move.l d1,-(sp)
    f8e2:	|      pea 1 <_start+0x1>
    f8e6:	|      move.l d0,-(sp)
    f8e8:	|      jsr 14f3a <setVariable>
    f8ee:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    f8f2:	|      movea.l 12(sp),a0
    f8f6:	|      movea.l 24(a0),a0
    f8fa:	|      movea.l 8(a0),a0
    f8fe:	|      movea.l 4(a0),a0
    f902:	|      move.l (a0),d0
    f904:	|      movea.l 12(sp),a0
    f908:	|      movea.l 24(a0),a0
    f90c:	|      movea.l 8(a0),a0
    f910:	|      movea.l 4(a0),a2
    f914:	|      move.l d0,-(sp)
    f916:	|      jsr 14f84 <stackFindLast>
    f91c:	|      addq.l #4,sp
    f91e:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    f922:	|      moveq #24,d0
    f924:	|      add.l 12(sp),d0
    f928:	|      move.l d0,-(sp)
    f92a:	|      jsr 14fcc <trimStack>
    f930:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f932:	|      moveq #24,d0
    f934:	|      add.l 12(sp),d0
    f938:	|      move.l d0,-(sp)
    f93a:	|      jsr 14fcc <trimStack>
    f940:	|      addq.l #4,sp
	return BR_CONTINUE;
    f942:	|      moveq #2,d0
}
    f944:	'----> movea.l (sp)+,a2
    f946:	       rts

0000f948 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    f948:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f94a:	       movea.l 12(sp),a0
    f94e:	       movea.l 24(a0),a0
    f952:	       movea.l 8(a0),a0
    f956:	       move.l (a0),d0
    f958:	       moveq #6,d1
    f95a:	       cmp.l d0,d1
    f95c:	   ,-- beq.s f972 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    f95e:	   |   pea 197b2 <PutChar+0x1c04>
    f964:	   |   jsr 1710c <KPrintF>
    f96a:	   |   addq.l #4,sp
		return BR_ERROR;
    f96c:	   |   moveq #1,d0
    f96e:	,--|-- bra.w fa0a <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    f972:	|  '-> movea.l 12(sp),a0
    f976:	|      movea.l 24(a0),a0
    f97a:	|      movea.l 8(a0),a0
    f97e:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f982:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    f984:	|      movea.l 12(sp),a0
    f988:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f98c:	|      pea 1 <_start+0x1>
    f990:	|      move.l d1,-(sp)
    f992:	|      move.l d0,-(sp)
    f994:	|      jsr 14224 <deleteVarFromStack>
    f99a:	|      lea 12(sp),sp
    f99e:	|      move.l d0,d1
    f9a0:	|      moveq #28,d0
    f9a2:	|      add.l 12(sp),d0
    f9a6:	|      move.l d1,-(sp)
    f9a8:	|      pea 1 <_start+0x1>
    f9ac:	|      move.l d0,-(sp)
    f9ae:	|      jsr 14f3a <setVariable>
    f9b4:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    f9b8:	|      movea.l 12(sp),a0
    f9bc:	|      movea.l 24(a0),a0
    f9c0:	|      movea.l 8(a0),a0
    f9c4:	|      movea.l 4(a0),a0
    f9c8:	|      move.l (a0),d0
    f9ca:	|      movea.l 12(sp),a0
    f9ce:	|      movea.l 24(a0),a0
    f9d2:	|      movea.l 8(a0),a0
    f9d6:	|      movea.l 4(a0),a2
    f9da:	|      move.l d0,-(sp)
    f9dc:	|      jsr 14f84 <stackFindLast>
    f9e2:	|      addq.l #4,sp
    f9e4:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    f9e8:	|      moveq #24,d0
    f9ea:	|      add.l 12(sp),d0
    f9ee:	|      move.l d0,-(sp)
    f9f0:	|      jsr 14fcc <trimStack>
    f9f6:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f9f8:	|      moveq #24,d0
    f9fa:	|      add.l 12(sp),d0
    f9fe:	|      move.l d0,-(sp)
    fa00:	|      jsr 14fcc <trimStack>
    fa06:	|      addq.l #4,sp
	return BR_CONTINUE;
    fa08:	|      moveq #2,d0
} 
    fa0a:	'----> movea.l (sp)+,a2
    fa0c:	       rts

0000fa0e <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fa0e:	       movea.l 8(sp),a0
    fa12:	       movea.l 24(a0),a0
    fa16:	       move.l (a0),d0
    fa18:	       moveq #6,d1
    fa1a:	       cmp.l d0,d1
    fa1c:	   ,-- beq.s fa30 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    fa1e:	   |   pea 197b2 <PutChar+0x1c04>
    fa24:	   |   jsr 1710c <KPrintF>
    fa2a:	   |   addq.l #4,sp
		return BR_ERROR;
    fa2c:	   |   moveq #1,d0
    fa2e:	,--|-- bra.s fa9a <builtIn_popFromStack+0x8c>
	}	
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fa30:	|  '-> movea.l 8(sp),a0
    fa34:	|      movea.l 24(a0),a0
    fa38:	|      movea.l 4(a0),a0
    fa3c:	|      move.l (a0),d0
    fa3e:	|  ,-- bne.s fa52 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    fa40:	|  |   pea 197e3 <PutChar+0x1c35>
    fa46:	|  |   jsr 1710c <KPrintF>
    fa4c:	|  |   addq.l #4,sp
		return BR_ERROR;
    fa4e:	|  |   moveq #1,d0
    fa50:	+--|-- bra.s fa9a <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fa52:	|  '-> moveq #28,d0
    fa54:	|      add.l 8(sp),d0
    fa58:	|      movea.l 8(sp),a0
    fa5c:	|      movea.l 24(a0),a0
    fa60:	|      movea.l 4(a0),a0
    fa64:	|      move.l (a0),d1
    fa66:	|      move.l d0,-(sp)
    fa68:	|      move.l d1,-(sp)
    fa6a:	|      jsr 14b02 <copyVariable>
    fa70:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    fa72:	|      movea.l 8(sp),a0
    fa76:	|      movea.l 24(a0),a0
    fa7a:	|      move.l 4(a0),d0
    fa7e:	|      move.l d0,-(sp)
    fa80:	|      jsr 14fcc <trimStack>
    fa86:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fa88:	|      moveq #24,d0
    fa8a:	|      add.l 8(sp),d0
    fa8e:	|      move.l d0,-(sp)
    fa90:	|      jsr 14fcc <trimStack>
    fa96:	|      addq.l #4,sp
	return BR_CONTINUE;
    fa98:	|      moveq #2,d0
}
    fa9a:	'----> rts

0000fa9c <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fa9c:	       movea.l 8(sp),a0
    faa0:	       movea.l 24(a0),a0
    faa4:	       move.l (a0),d0
    faa6:	       moveq #6,d1
    faa8:	       cmp.l d0,d1
    faaa:	   ,-- beq.s fabe <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    faac:	   |   pea 197b2 <PutChar+0x1c04>
    fab2:	   |   jsr 1710c <KPrintF>
    fab8:	   |   addq.l #4,sp
		return BR_ERROR;
    faba:	   |   moveq #1,d0
    fabc:	,--|-- bra.s fb12 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fabe:	|  '-> movea.l 8(sp),a0
    fac2:	|      movea.l 24(a0),a0
    fac6:	|      movea.l 4(a0),a0
    faca:	|      move.l (a0),d0
    facc:	|  ,-- bne.s fae0 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    face:	|  |   pea 197e3 <PutChar+0x1c35>
    fad4:	|  |   jsr 1710c <KPrintF>
    fada:	|  |   addq.l #4,sp
		return BR_ERROR;
    fadc:	|  |   moveq #1,d0
    fade:	+--|-- bra.s fb12 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fae0:	|  '-> moveq #28,d0
    fae2:	|      add.l 8(sp),d0
    fae6:	|      movea.l 8(sp),a0
    faea:	|      movea.l 24(a0),a0
    faee:	|      movea.l 4(a0),a0
    faf2:	|      move.l (a0),d1
    faf4:	|      move.l d0,-(sp)
    faf6:	|      move.l d1,-(sp)
    faf8:	|      jsr 14b02 <copyVariable>
    fafe:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fb00:	|      moveq #24,d0
    fb02:	|      add.l 8(sp),d0
    fb06:	|      move.l d0,-(sp)
    fb08:	|      jsr 14fcc <trimStack>
    fb0e:	|      addq.l #4,sp
	return BR_CONTINUE;
    fb10:	|      moveq #2,d0
}
    fb12:	'----> rts

0000fb14 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fb14:	       movea.l 8(sp),a0
    fb18:	       movea.l 24(a0),a0
    fb1c:	       move.l (a0),d0
    fb1e:	       moveq #6,d1
    fb20:	       cmp.l d0,d1
    fb22:	   ,-- beq.s fb36 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    fb24:	   |   pea 197b2 <PutChar+0x1c04>
    fb2a:	   |   jsr 1710c <KPrintF>
    fb30:	   |   addq.l #4,sp
		return BR_ERROR;
    fb32:	   |   moveq #1,d0
    fb34:	,--|-- bra.s fb8c <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fb36:	|  '-> movea.l 8(sp),a0
    fb3a:	|      movea.l 24(a0),a0
    fb3e:	|      movea.l 4(a0),a0
    fb42:	|      move.l (a0),d0
    fb44:	|  ,-- bne.s fb58 <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    fb46:	|  |   pea 197e3 <PutChar+0x1c35>
    fb4c:	|  |   jsr 1710c <KPrintF>
    fb52:	|  |   addq.l #4,sp
		return BR_ERROR;
    fb54:	|  |   moveq #1,d0
    fb56:	+--|-- bra.s fb8c <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    fb58:	|  '-> moveq #28,d0
    fb5a:	|      add.l 8(sp),d0
    fb5e:	|      movea.l 8(sp),a0
    fb62:	|      movea.l 24(a0),a0
    fb66:	|      movea.l 4(a0),a0
    fb6a:	|      move.l 4(a0),d1
    fb6e:	|      move.l d0,-(sp)
    fb70:	|      move.l d1,-(sp)
    fb72:	|      jsr 14b02 <copyVariable>
    fb78:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fb7a:	|      moveq #24,d0
    fb7c:	|      add.l 8(sp),d0
    fb80:	|      move.l d0,-(sp)
    fb82:	|      jsr 14fcc <trimStack>
    fb88:	|      addq.l #4,sp
	return BR_CONTINUE;
    fb8a:	|      moveq #2,d0
}
    fb8c:	'----> rts

0000fb8e <builtIn_random>:

builtIn(random)
{
    fb8e:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    fb90:	       movea.l 12(sp),a0
    fb94:	       move.l 24(a0),d0
    fb98:	       move.l d0,-(sp)
    fb9a:	       pea 1 <_start+0x1>
    fb9e:	       move.l sp,d0
    fba0:	       addq.l #8,d0
    fba2:	       move.l d0,-(sp)
    fba4:	       jsr 14648 <getValueType>
    fbaa:	       lea 12(sp),sp
    fbae:	       tst.w d0
    fbb0:	   ,-- bne.s fbb6 <builtIn_random+0x28>
		return BR_ERROR;
    fbb2:	   |   moveq #1,d0
    fbb4:	,--|-- bra.s fc00 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    fbb6:	|  '-> moveq #24,d0
    fbb8:	|      add.l 12(sp),d0
    fbbc:	|      move.l d0,-(sp)
    fbbe:	|      jsr 14fcc <trimStack>
    fbc4:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    fbc6:	|      move.l (sp),d0
    fbc8:	|  ,-- bgt.s fbce <builtIn_random+0x40>
    fbca:	|  |   moveq #1,d0
    fbcc:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    fbce:	|  '-> jsr 15ce8 <rand>
    fbd4:	|      move.l d0,d1
    fbd6:	|      move.l (sp),d0
    fbd8:	|      move.l d0,-(sp)
    fbda:	|      move.l d1,-(sp)
    fbdc:	|      jsr 17b72 <__umodsi3>
    fbe2:	|      addq.l #8,sp
    fbe4:	|      move.l d0,d1
    fbe6:	|      moveq #28,d0
    fbe8:	|      add.l 12(sp),d0
    fbec:	|      move.l d1,-(sp)
    fbee:	|      pea 1 <_start+0x1>
    fbf2:	|      move.l d0,-(sp)
    fbf4:	|      jsr 14f3a <setVariable>
    fbfa:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fbfe:	|      moveq #2,d0
}
    fc00:	'----> addq.l #4,sp
    fc02:	       rts

0000fc04 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    fc04:	nop
    fc06:	rts

0000fc08 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    fc08:	moveq #2,d0
}
    fc0a:	rts

0000fc0c <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
    fc0c:	       subq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
    fc0e:	       movea.l 12(sp),a0
    fc12:	       move.l 24(a0),d0
    fc16:	       move.l d0,-(sp)
    fc18:	       pea 1 <_start+0x1>
    fc1c:	       move.l sp,d0
    fc1e:	       addq.l #8,d0
    fc20:	       move.l d0,-(sp)
    fc22:	       jsr 14648 <getValueType>
    fc28:	       lea 12(sp),sp
    fc2c:	       tst.w d0
    fc2e:	   ,-- bne.s fc42 <builtIn_setPasteColour+0x36>
		KPrintF ("setPasteColour: Parameter not a number");
    fc30:	   |   pea 197f6 <PutChar+0x1c48>
    fc36:	   |   jsr 1710c <KPrintF>
    fc3c:	   |   addq.l #4,sp
		return BR_ERROR;
    fc3e:	   |   moveq #1,d0
    fc40:	,--|-- bra.s fc82 <builtIn_setPasteColour+0x76>
	}
	trimStack (&fun -> stack);
    fc42:	|  '-> moveq #24,d0
    fc44:	|      add.l 12(sp),d0
    fc48:	|      move.l d0,-(sp)
    fc4a:	|      jsr 14fcc <trimStack>
    fc50:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
    fc52:	|      move.l (sp),d0
    fc54:	|      move.l d0,d0
    fc56:	|      move.w d0,1c71e <textPaletteIndex>

	if( textPaletteIndex > 31) {
    fc5c:	|      move.w 1c71e <textPaletteIndex>,d0
    fc62:	|      cmpi.w #31,d0
    fc66:	|  ,-- bls.s fc80 <builtIn_setPasteColour+0x74>
		KPrintF ("setPasteColour: Paletteindex out of Range");
    fc68:	|  |   pea 1981d <PutChar+0x1c6f>
    fc6e:	|  |   jsr 1710c <KPrintF>
    fc74:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
    fc76:	|  |   clr.w 1c71e <textPaletteIndex>
		return BR_ERROR;
    fc7c:	|  |   moveq #1,d0
    fc7e:	+--|-- bra.s fc82 <builtIn_setPasteColour+0x76>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
    fc80:	|  '-> moveq #2,d0
}
    fc82:	'----> addq.l #4,sp
    fc84:	       rts

0000fc86 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fc86:	moveq #2,d0
}
    fc88:	rts

0000fc8a <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fc8a:	moveq #2,d0
}
    fc8c:	rts

0000fc8e <builtIn_setFont>:


builtIn(setFont)
{
    fc8e:	       lea -16(sp),sp
    fc92:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fc94:	       movea.l 28(sp),a0
    fc98:	       move.l 24(a0),d0
    fc9c:	       move.l d0,-(sp)
    fc9e:	       pea 1 <_start+0x1>
    fca2:	       lea 12(sp),a0
    fca6:	       move.l a0,-(sp)
    fca8:	       jsr 14648 <getValueType>
    fcae:	       lea 12(sp),sp
    fcb2:	       tst.w d0
    fcb4:	   ,-- bne.s fcbc <builtIn_setFont+0x2e>
    fcb6:	   |   moveq #1,d0
    fcb8:	,--|-- bra.w fd6a <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    fcbc:	|  '-> moveq #24,d0
    fcbe:	|      add.l 28(sp),d0
    fcc2:	|      move.l d0,-(sp)
    fcc4:	|      jsr 14fcc <trimStack>
    fcca:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fccc:	|      movea.l 28(sp),a0
    fcd0:	|      move.l 24(a0),d0
    fcd4:	|      move.l d0,-(sp)
    fcd6:	|      jsr 14c1e <getTextFromAnyVar>
    fcdc:	|      addq.l #4,sp
    fcde:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    fce2:	|  ,-- bne.s fcea <builtIn_setFont+0x5c>
    fce4:	|  |   moveq #1,d0
    fce6:	+--|-- bra.w fd6a <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    fcea:	|  '-> moveq #24,d0
    fcec:	|      add.l 28(sp),d0
    fcf0:	|      move.l d0,-(sp)
    fcf2:	|      jsr 14fcc <trimStack>
    fcf8:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    fcfa:	|      movea.l 28(sp),a0
    fcfe:	|      move.l 24(a0),d0
    fd02:	|      move.l d0,-(sp)
    fd04:	|      pea 5 <_start+0x5>
    fd08:	|      lea 16(sp),a0
    fd0c:	|      move.l a0,-(sp)
    fd0e:	|      jsr 14648 <getValueType>
    fd14:	|      lea 12(sp),sp
    fd18:	|      tst.w d0
    fd1a:	|  ,-- bne.s fd20 <builtIn_setFont+0x92>
    fd1c:	|  |   moveq #1,d0
    fd1e:	+--|-- bra.s fd6a <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    fd20:	|  '-> moveq #24,d0
    fd22:	|      add.l 28(sp),d0
    fd26:	|      move.l d0,-(sp)
    fd28:	|      jsr 14fcc <trimStack>
    fd2e:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    fd30:	|      move.l 4(sp),d1
    fd34:	|      move.l 8(sp),d0
    fd38:	|      move.l d1,-(sp)
    fd3a:	|      move.l 20(sp),-(sp)
    fd3e:	|      move.l d0,-(sp)
    fd40:	|      jsr 15480 <loadFont>
    fd46:	|      lea 12(sp),sp
    fd4a:	|      tst.w d0
    fd4c:	|  ,-- bne.s fd52 <builtIn_setFont+0xc4>
    fd4e:	|  |   moveq #1,d0
    fd50:	+--|-- bra.s fd6a <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    fd52:	|  '-> move.l 16(sp),12(sp)
    fd58:	|      move.l 1c810 <SysBase>,d0
    fd5e:	|      movea.l d0,a6
    fd60:	|      movea.l 12(sp),a1
    fd64:	|      jsr -690(a6)

    return BR_CONTINUE;
    fd68:	|      moveq #2,d0
}
    fd6a:	'----> movea.l (sp)+,a6
    fd6c:	       lea 16(sp),sp
    fd70:	       rts

0000fd72 <builtIn_inFont>:

builtIn(inFont)
{
    fd72:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    fd74:	       movea.l 12(sp),a0
    fd78:	       move.l 24(a0),d0
    fd7c:	       move.l d0,-(sp)
    fd7e:	       jsr 14c1e <getTextFromAnyVar>
    fd84:	       addq.l #4,sp
    fd86:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    fd88:	   ,-- bne.s fd8e <builtIn_inFont+0x1c>
    fd8a:	   |   moveq #1,d0
    fd8c:	,--|-- bra.s fdc4 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    fd8e:	|  '-> moveq #24,d0
    fd90:	|      add.l 12(sp),d0
    fd94:	|      move.l d0,-(sp)
    fd96:	|      jsr 14fcc <trimStack>
    fd9c:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    fd9e:	|      move.l (sp),-(sp)
    fda0:	|      jsr 1546e <isInFont>
    fda6:	|      addq.l #4,sp
    fda8:	|      movea.w d0,a0
    fdaa:	|      moveq #28,d0
    fdac:	|      add.l 12(sp),d0
    fdb0:	|      move.l a0,-(sp)
    fdb2:	|      pea 1 <_start+0x1>
    fdb6:	|      move.l d0,-(sp)
    fdb8:	|      jsr 14f3a <setVariable>
    fdbe:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fdc2:	|      moveq #2,d0
}
    fdc4:	'----> addq.l #4,sp
    fdc6:	       rts

0000fdc8 <builtIn_pasteString>:

builtIn(pasteString)
{
    fdc8:	       lea -16(sp),sp
    fdcc:	       move.l a6,-(sp)
    fdce:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fdd0:	       movea.l 32(sp),a0
    fdd4:	       move.l 24(a0),d0
    fdd8:	       move.l d0,-(sp)
    fdda:	       jsr 14c1e <getTextFromAnyVar>
    fde0:	       addq.l #4,sp
    fde2:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    fde6:	       moveq #24,d0
    fde8:	       add.l 32(sp),d0
    fdec:	       move.l d0,-(sp)
    fdee:	       jsr 14fcc <trimStack>
    fdf4:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fdf6:	       movea.l 32(sp),a0
    fdfa:	       move.l 24(a0),d0
    fdfe:	       move.l d0,-(sp)
    fe00:	       pea 1 <_start+0x1>
    fe04:	       lea 20(sp),a0
    fe08:	       move.l a0,-(sp)
    fe0a:	       jsr 14648 <getValueType>
    fe10:	       lea 12(sp),sp
    fe14:	       tst.w d0
    fe16:	   ,-- bne.s fe1e <builtIn_pasteString+0x56>
    fe18:	   |   moveq #1,d0
    fe1a:	,--|-- bra.w fec0 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    fe1e:	|  '-> moveq #24,d0
    fe20:	|      add.l 32(sp),d0
    fe24:	|      move.l d0,-(sp)
    fe26:	|      jsr 14fcc <trimStack>
    fe2c:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fe2e:	|      movea.l 32(sp),a0
    fe32:	|      move.l 24(a0),d0
    fe36:	|      move.l d0,-(sp)
    fe38:	|      pea 1 <_start+0x1>
    fe3c:	|      lea 16(sp),a0
    fe40:	|      move.l a0,-(sp)
    fe42:	|      jsr 14648 <getValueType>
    fe48:	|      lea 12(sp),sp
    fe4c:	|      tst.w d0
    fe4e:	|  ,-- bne.s fe54 <builtIn_pasteString+0x8c>
    fe50:	|  |   moveq #1,d0
    fe52:	+--|-- bra.s fec0 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    fe54:	|  '-> moveq #24,d0
    fe56:	|      add.l 32(sp),d0
    fe5a:	|      move.l d0,-(sp)
    fe5c:	|      jsr 14fcc <trimStack>
    fe62:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) 
    fe64:	|      move.l 8(sp),d0
    fe68:	|      cmpi.l #65535,d0
    fe6e:	|  ,-- bne.s fe8e <builtIn_pasteString+0xc6>
		x = (winWidth - stringWidth(newText)) >> 1;
    fe70:	|  |   move.l 1c764 <winWidth>,d2
    fe76:	|  |   move.l 20(sp),-(sp)
    fe7a:	|  |   jsr 15732 <stringWidth>
    fe80:	|  |   addq.l #4,sp
    fe82:	|  |   move.l d2,d1
    fe84:	|  |   sub.l d0,d1
    fe86:	|  |   move.l d1,d0
    fe88:	|  |   lsr.l #1,d0
    fe8a:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
    fe8e:	|  '-> move.l 12(sp),d1
    fe92:	|      move.l 8(sp),d0
    fe96:	|      move.l d1,-(sp)
    fe98:	|      move.l d0,-(sp)
    fe9a:	|      move.l 28(sp),-(sp)
    fe9e:	|      jsr 15654 <pasteStringToBackdrop>
    fea4:	|      lea 12(sp),sp
    FreeVec(newText); 
    fea8:	|      move.l 20(sp),16(sp)
    feae:	|      move.l 1c810 <SysBase>,d0
    feb4:	|      movea.l d0,a6
    feb6:	|      movea.l 16(sp),a1
    feba:	|      jsr -690(a6)
    return BR_CONTINUE;
    febe:	|      moveq #2,d0
}
    fec0:	'----> move.l (sp)+,d2
    fec2:	       movea.l (sp)+,a6
    fec4:	       lea 16(sp),sp
    fec8:	       rts

0000feca <builtIn_anim>:

builtIn(anim)
{
    feca:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    fece:	       moveq #1,d0
    fed0:	       cmp.l 16(sp),d0
    fed4:	   ,-- blt.s feea <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    fed6:	   |   pea 19847 <PutChar+0x1c99>
    fedc:	   |   jsr 1710c <KPrintF>
    fee2:	   |   addq.l #4,sp
		return BR_ERROR;
    fee4:	   |   moveq #1,d0
    fee6:	,--|-- bra.w ff78 <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    feea:	|  '-> moveq #24,d1
    feec:	|      add.l 20(sp),d1
    fef0:	|      move.l 16(sp),d0
    fef4:	|      subq.l #1,d0
    fef6:	|      move.l d1,-(sp)
    fef8:	|      move.l d0,-(sp)
    fefa:	|      jsr 955e <createPersonaAnim>
    ff00:	|      addq.l #8,sp
    ff02:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ff06:	|      movea.l 20(sp),a0
    ff0a:	|      move.l 24(a0),d0
    ff0e:	|      move.l d0,-(sp)
    ff10:	|      pea 5 <_start+0x5>
    ff14:	|      lea 8(sp),a0
    ff18:	|      move.l a0,-(sp)
    ff1a:	|      jsr 14648 <getValueType>
    ff20:	|      lea 12(sp),sp
    ff24:	|      tst.w d0
    ff26:	|  ,-- bne.s ff2c <builtIn_anim+0x62>
    ff28:	|  |   moveq #1,d0
    ff2a:	+--|-- bra.s ff78 <builtIn_anim+0xae>
	trimStack (&fun -> stack);
    ff2c:	|  '-> moveq #24,d0
    ff2e:	|      add.l 20(sp),d0
    ff32:	|      move.l d0,-(sp)
    ff34:	|      jsr 14fcc <trimStack>
    ff3a:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
    ff3c:	|      move.l (sp),d0
    ff3e:	|      move.l d0,-(sp)
    ff40:	|      jsr 15e4a <loadBankForAnim>
    ff46:	|      addq.l #4,sp
    ff48:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
    ff4c:	|  ,-- bne.s ff52 <builtIn_anim+0x88>
    ff4e:	|  |   moveq #1,d0
    ff50:	+--|-- bra.s ff78 <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
    ff52:	|  '-> move.l 4(sp),-(sp)
    ff56:	|      move.l 12(sp),-(sp)
    ff5a:	|      jsr b408 <setBankFile>
    ff60:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
    ff62:	|      moveq #28,d0
    ff64:	|      add.l 20(sp),d0
    ff68:	|      move.l 8(sp),-(sp)
    ff6c:	|      move.l d0,-(sp)
    ff6e:	|      jsr 14ef6 <newAnimationVariable>
    ff74:	|      addq.l #8,sp
	return BR_CONTINUE;
    ff76:	|      moveq #2,d0
}
    ff78:	'----> lea 12(sp),sp
    ff7c:	       rts

0000ff7e <builtIn_costume>:

builtIn(costume)
{
    ff7e:	          lea -32(sp),sp
    ff82:	          move.l a6,-(sp)
    ff84:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    ff86:	          moveq #8,d0
    ff88:	          move.l d0,32(sp)
    ff8c:	          clr.l 28(sp)
    ff90:	          move.l 1c810 <SysBase>,d0
    ff96:	          movea.l d0,a6
    ff98:	          move.l 32(sp),d0
    ff9c:	          move.l 28(sp),d1
    ffa0:	          jsr -684(a6)
    ffa4:	          move.l d0,24(sp)
    ffa8:	          move.l 24(sp),d0
    ffac:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    ffb0:	      ,-- bne.s ffb8 <builtIn_costume+0x3a>
    ffb2:	      |   moveq #1,d0
    ffb4:	,-----|-- bra.w 100a0 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    ffb8:	|     '-> move.l 44(sp),d0
    ffbc:	|         pea 3 <_start+0x3>
    ffc0:	|         move.l d0,-(sp)
    ffc2:	|         jsr 17b16 <__divsi3>
    ffc8:	|         addq.l #8,sp
    ffca:	|         movea.l 20(sp),a0
    ffce:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    ffd2:	|         tst.l 44(sp)
    ffd6:	|     ,-- beq.s ffec <builtIn_costume+0x6e>
    ffd8:	|     |   movea.l 20(sp),a0
    ffdc:	|     |   move.l 4(a0),d1
    ffe0:	|     |   move.l d1,d0
    ffe2:	|     |   add.l d0,d0
    ffe4:	|     |   add.l d1,d0
    ffe6:	|     |   cmp.l 44(sp),d0
    ffea:	|  ,--|-- beq.s 10000 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    ffec:	|  |  '-> pea 19881 <PutChar+0x1cd3>
    fff2:	|  |      jsr 1710c <KPrintF>
    fff8:	|  |      addq.l #4,sp
        return BR_ERROR;
    fffa:	|  |      moveq #1,d0
    fffc:	+--|----- bra.w 100a0 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
   10000:	|  '----> move.l 44(sp),d0
   10004:	|         add.l d0,d0
   10006:	|         add.l d0,d0
   10008:	|         move.l d0,16(sp)
   1000c:	|         clr.l 12(sp)
   10010:	|         move.l 1c810 <SysBase>,d0
   10016:	|         movea.l d0,a6
   10018:	|         move.l 16(sp),d0
   1001c:	|         move.l 12(sp),d1
   10020:	|         jsr -684(a6)
   10024:	|         move.l d0,8(sp)
   10028:	|         move.l 8(sp),d0
   1002c:	|         movea.l 20(sp),a0
   10030:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
   10032:	|         movea.l 20(sp),a0
   10036:	|         move.l (a0),d0
   10038:	|     ,-- bne.s 1003e <builtIn_costume+0xc0>
   1003a:	|     |   moveq #1,d0
   1003c:	+-----|-- bra.s 100a0 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
   1003e:	|     '-> move.l 44(sp),d0
   10042:	|         subq.l #1,d0
   10044:	|         move.l d0,36(sp)
   10048:	|     ,-- bra.s 10084 <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
   1004a:	|  ,--|-> movea.l 48(sp),a0
   1004e:	|  |  |   move.l 24(a0),d0
   10052:	|  |  |   movea.l 20(sp),a0
   10056:	|  |  |   movea.l (a0),a0
   10058:	|  |  |   move.l 36(sp),d1
   1005c:	|  |  |   add.l d1,d1
   1005e:	|  |  |   add.l d1,d1
   10060:	|  |  |   lea (0,a0,d1.l),a2
   10064:	|  |  |   move.l d0,-(sp)
   10066:	|  |  |   jsr 14b20 <getAnimationFromVar>
   1006c:	|  |  |   addq.l #4,sp
   1006e:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
   10070:	|  |  |   moveq #24,d0
   10072:	|  |  |   add.l 48(sp),d0
   10076:	|  |  |   move.l d0,-(sp)
   10078:	|  |  |   jsr 14fcc <trimStack>
   1007e:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
   10080:	|  |  |   subq.l #1,36(sp)
   10084:	|  |  '-> tst.l 36(sp)
   10088:	|  '----- bge.s 1004a <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
   1008a:	|         moveq #28,d0
   1008c:	|         add.l 48(sp),d0
   10090:	|         move.l 20(sp),-(sp)
   10094:	|         move.l d0,-(sp)
   10096:	|         jsr 14f18 <newCostumeVariable>
   1009c:	|         addq.l #8,sp
    return BR_CONTINUE;
   1009e:	|         moveq #2,d0
}
   100a0:	'-------> movea.l (sp)+,a2
   100a2:	          movea.l (sp)+,a6
   100a4:	          lea 32(sp),sp
   100a8:	          rts

000100aa <builtIn_launch>:

builtIn(launch)
{
   100aa:	          lea -20(sp),sp
   100ae:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   100b0:	          movea.l 32(sp),a0
   100b4:	          move.l 24(a0),d0
   100b8:	          move.l d0,-(sp)
   100ba:	          jsr 14c1e <getTextFromAnyVar>
   100c0:	          addq.l #4,sp
   100c2:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
   100c6:	      ,-- bne.s 100ce <builtIn_launch+0x24>
   100c8:	      |   moveq #1,d0
   100ca:	,-----|-- bra.w 101fc <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
   100ce:	|     '-> move.l 20(sp),-(sp)
   100d2:	|         jsr 2fe <encodeFilename>
   100d8:	|         addq.l #4,sp
   100da:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
   100de:	|         moveq #24,d0
   100e0:	|         add.l 32(sp),d0
   100e4:	|         move.l d0,-(sp)
   100e6:	|         jsr 14fcc <trimStack>
   100ec:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
   100ee:	|         movea.l 20(sp),a0
   100f2:	|         move.b (a0),d0
   100f4:	|         cmpi.b #104,d0
   100f8:	|  ,----- bne.s 10162 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
   100fa:	|  |      movea.l 20(sp),a0
   100fe:	|  |      addq.l #1,a0
   10100:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
   10102:	|  |      cmpi.b #116,d0
   10106:	|  +----- bne.s 10162 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
   10108:	|  |      movea.l 20(sp),a0
   1010c:	|  |      addq.l #2,a0
   1010e:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
   10110:	|  |      cmpi.b #116,d0
   10114:	|  +----- bne.s 10162 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
   10116:	|  |      movea.l 20(sp),a0
   1011a:	|  |      addq.l #3,a0
   1011c:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
   1011e:	|  |      cmpi.b #112,d0
   10122:	|  +----- bne.s 10162 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   10124:	|  |      movea.l 20(sp),a0
   10128:	|  |      addq.l #4,a0
   1012a:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
   1012c:	|  |      cmpi.b #58,d0
   10130:	|  |  ,-- beq.s 1014e <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   10132:	|  |  |   movea.l 20(sp),a0
   10136:	|  |  |   addq.l #4,a0
   10138:	|  |  |   move.b (a0),d0
   1013a:	|  |  |   cmpi.b #115,d0
   1013e:	|  +--|-- bne.s 10162 <builtIn_launch+0xb8>
   10140:	|  |  |   movea.l 20(sp),a0
   10144:	|  |  |   addq.l #5,a0
   10146:	|  |  |   move.b (a0),d0
   10148:	|  |  |   cmpi.b #58,d0
   1014c:	|  +--|-- bne.s 10162 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
   1014e:	|  |  '-> move.l 20(sp),-(sp)
   10152:	|  |      jsr b8 <copyString>
   10158:	|  |      addq.l #4,sp
   1015a:	|  |      move.l d0,1c8ce <launchMe>
   10160:	|  |  ,-- bra.s 101b4 <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
   10162:	|  '--|-> move.l 1c778 <gamePath>,d0
   10168:	|     |   pea 198cc <PutChar+0x1d1e>
   1016e:	|     |   move.l d0,-(sp)
   10170:	|     |   jsr 13b74 <joinStrings>
   10176:	|     |   addq.l #8,sp
   10178:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
   1017c:	|     |   move.l 16(sp),-(sp)
   10180:	|     |   move.l 16(sp),-(sp)
   10184:	|     |   jsr 13b74 <joinStrings>
   1018a:	|     |   addq.l #8,sp
   1018c:	|     |   move.l d0,1c8ce <launchMe>
        FreeVec(newText);
   10192:	|     |   move.l 16(sp),8(sp)
   10198:	|     |   move.l 1c810 <SysBase>,d0
   1019e:	|     |   movea.l d0,a6
   101a0:	|     |   movea.l 8(sp),a1
   101a4:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
   101a8:	|     |   move.l 1c8ce <launchMe>,d0
   101ae:	|     +-- bne.s 101b4 <builtIn_launch+0x10a>
   101b0:	|     |   moveq #1,d0
   101b2:	+-----|-- bra.s 101fc <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
   101b4:	|     '-> move.l 20(sp),4(sp)
   101ba:	|         move.l 1c810 <SysBase>,d0
   101c0:	|         movea.l d0,a6
   101c2:	|         movea.l 4(sp),a1
   101c6:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
   101ca:	|         clr.l -(sp)
   101cc:	|         jsr 4972 <setGraphicsWindow>
   101d2:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
   101d4:	|         moveq #28,d0
   101d6:	|         add.l 32(sp),d0
   101da:	|         pea 1 <_start+0x1>
   101de:	|         pea 1 <_start+0x1>
   101e2:	|         move.l d0,-(sp)
   101e4:	|         jsr 14f3a <setVariable>
   101ea:	|         lea 12(sp),sp
    launchResult = &fun->reg;
   101ee:	|         moveq #28,d0
   101f0:	|         add.l 32(sp),d0
   101f4:	|         move.l d0,1c8d2 <launchResult>

    return BR_KEEP_AND_PAUSE;
   101fa:	|         moveq #0,d0
}
   101fc:	'-------> movea.l (sp)+,a6
   101fe:	          lea 20(sp),sp
   10202:	          rts

00010204 <builtIn_pause>:

builtIn(pause)
{
   10204:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10206:	       movea.l 12(sp),a0
   1020a:	       move.l 24(a0),d0
   1020e:	       move.l d0,-(sp)
   10210:	       pea 1 <_start+0x1>
   10214:	       move.l sp,d0
   10216:	       addq.l #8,d0
   10218:	       move.l d0,-(sp)
   1021a:	       jsr 14648 <getValueType>
   10220:	       lea 12(sp),sp
   10224:	       tst.w d0
   10226:	   ,-- bne.s 1022c <builtIn_pause+0x28>
   10228:	   |   moveq #1,d0
   1022a:	,--|-- bra.s 1025a <builtIn_pause+0x56>
	trimStack (&fun -> stack);
   1022c:	|  '-> moveq #24,d0
   1022e:	|      add.l 12(sp),d0
   10232:	|      move.l d0,-(sp)
   10234:	|      jsr 14fcc <trimStack>
   1023a:	|      addq.l #4,sp
	if (theTime > 0) {
   1023c:	|      move.l (sp),d0
   1023e:	|  ,-- ble.s 10258 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
   10240:	|  |   move.l (sp),d0
   10242:	|  |   subq.l #1,d0
   10244:	|  |   movea.l 12(sp),a0
   10248:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
   1024c:	|  |   movea.l 12(sp),a0
   10250:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
   10254:	|  |   moveq #0,d0
   10256:	+--|-- bra.s 1025a <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
   10258:	|  '-> moveq #2,d0
}
   1025a:	'----> addq.l #4,sp
   1025c:	       rts

0001025e <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
   1025e:	jsr 50da <completeTimers>
	return BR_CONTINUE;
   10264:	moveq #2,d0
}
   10266:	rts

00010268 <builtIn_callEvent>:

builtIn(callEvent)
{
   10268:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1026c:	       movea.l 20(sp),a0
   10270:	       move.l 24(a0),d0
   10274:	       move.l d0,-(sp)
   10276:	       pea 7 <_start+0x7>
   1027a:	       lea 8(sp),a0
   1027e:	       move.l a0,-(sp)
   10280:	       jsr 14648 <getValueType>
   10286:	       lea 12(sp),sp
   1028a:	       tst.w d0
   1028c:	   ,-- bne.s 10294 <builtIn_callEvent+0x2c>
   1028e:	   |   moveq #1,d0
   10290:	,--|-- bra.w 1032a <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   10294:	|  '-> moveq #24,d0
   10296:	|      add.l 20(sp),d0
   1029a:	|      move.l d0,-(sp)
   1029c:	|      jsr 14fcc <trimStack>
   102a2:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   102a4:	|      movea.l 20(sp),a0
   102a8:	|      move.l 24(a0),d0
   102ac:	|      move.l d0,-(sp)
   102ae:	|      pea 7 <_start+0x7>
   102b2:	|      moveq #12,d0
   102b4:	|      add.l sp,d0
   102b6:	|      move.l d0,-(sp)
   102b8:	|      jsr 14648 <getValueType>
   102be:	|      lea 12(sp),sp
   102c2:	|      tst.w d0
   102c4:	|  ,-- bne.s 102ca <builtIn_callEvent+0x62>
   102c6:	|  |   moveq #1,d0
   102c8:	+--|-- bra.s 1032a <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   102ca:	|  '-> moveq #24,d0
   102cc:	|      add.l 20(sp),d0
   102d0:	|      move.l d0,-(sp)
   102d2:	|      jsr 14fcc <trimStack>
   102d8:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   102da:	|      move.l (sp),d1
   102dc:	|      move.l 4(sp),d0
   102e0:	|      move.l d1,-(sp)
   102e2:	|      move.l d0,-(sp)
   102e4:	|      jsr d3e2 <getCombinationFunction>
   102ea:	|      addq.l #8,sp
   102ec:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
   102f0:	|  ,-- beq.s 10310 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   102f2:	|  |   moveq #28,d0
   102f4:	|  |   add.l 20(sp),d0
   102f8:	|  |   move.l 8(sp),-(sp)
   102fc:	|  |   pea 2 <_start+0x2>
   10300:	|  |   move.l d0,-(sp)
   10302:	|  |   jsr 14f3a <setVariable>
   10308:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
   1030c:	|  |   moveq #4,d0
   1030e:	+--|-- bra.s 1032a <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
   10310:	|  '-> moveq #28,d0
   10312:	|      add.l 20(sp),d0
   10316:	|      clr.l -(sp)
   10318:	|      pea 1 <_start+0x1>
   1031c:	|      move.l d0,-(sp)
   1031e:	|      jsr 14f3a <setVariable>
   10324:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10328:	|      moveq #2,d0
}
   1032a:	'----> lea 12(sp),sp
   1032e:	       rts

00010330 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
   10330:	move.w #1,1c8de <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
   10338:	moveq #2,d0
}
   1033a:	rts

0001033c <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   1033c:	moveq #24,d0
   1033e:	add.l 8(sp),d0
   10342:	move.l d0,-(sp)
   10344:	jsr 14fcc <trimStack>
   1034a:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
   1034c:	pea 198ce <PutChar+0x1d20>
   10352:	jsr 1710c <KPrintF>
   10358:	addq.l #4,sp
	return BR_CONTINUE;
   1035a:	moveq #2,d0
}
   1035c:	rts

0001035e <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
   1035e:	pea 198ce <PutChar+0x1d20>
   10364:	jsr 1710c <KPrintF>
   1036a:	addq.l #4,sp
	return BR_CONTINUE;
   1036c:	moveq #2,d0
}
   1036e:	rts

00010370 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
   10370:	pea 198ce <PutChar+0x1d20>
   10376:	jsr 1710c <KPrintF>
   1037c:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
   1037e:	moveq #2,d0
}
   10380:	rts

00010382 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
   10382:	pea 198ce <PutChar+0x1d20>
   10388:	jsr 1710c <KPrintF>
   1038e:	addq.l #4,sp
	return BR_CONTINUE;
   10390:	moveq #2,d0
}
   10392:	rts

00010394 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   10394:	pea 198ce <PutChar+0x1d20>
   1039a:	jsr 1710c <KPrintF>
   103a0:	addq.l #4,sp
	return BR_CONTINUE;
   103a2:	moveq #2,d0
}
   103a4:	rts

000103a6 <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   103a6:	pea 198ce <PutChar+0x1d20>
   103ac:	jsr 1710c <KPrintF>
   103b2:	addq.l #4,sp
	return BR_CONTINUE;
   103b4:	moveq #2,d0
}
   103b6:	rts

000103b8 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
   103b8:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   103bc:	       movea.l 20(sp),a0
   103c0:	       move.l 24(a0),d0
   103c4:	       move.l d0,-(sp)
   103c6:	       pea 1 <_start+0x1>
   103ca:	       moveq #16,d0
   103cc:	       add.l sp,d0
   103ce:	       move.l d0,-(sp)
   103d0:	       jsr 14648 <getValueType>
   103d6:	       lea 12(sp),sp
   103da:	       tst.w d0
   103dc:	   ,-- bne.s 103e4 <builtIn_startMusic+0x2c>
   103de:	   |   moveq #1,d0
   103e0:	,--|-- bra.w 10484 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   103e4:	|  '-> moveq #24,d0
   103e6:	|      add.l 20(sp),d0
   103ea:	|      move.l d0,-(sp)
   103ec:	|      jsr 14fcc <trimStack>
   103f2:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   103f4:	|      movea.l 20(sp),a0
   103f8:	|      move.l 24(a0),d0
   103fc:	|      move.l d0,-(sp)
   103fe:	|      pea 1 <_start+0x1>
   10402:	|      moveq #12,d0
   10404:	|      add.l sp,d0
   10406:	|      move.l d0,-(sp)
   10408:	|      jsr 14648 <getValueType>
   1040e:	|      lea 12(sp),sp
   10412:	|      tst.w d0
   10414:	|  ,-- bne.s 1041a <builtIn_startMusic+0x62>
   10416:	|  |   moveq #1,d0
   10418:	+--|-- bra.s 10484 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   1041a:	|  '-> moveq #24,d0
   1041c:	|      add.l 20(sp),d0
   10420:	|      move.l d0,-(sp)
   10422:	|      jsr 14fcc <trimStack>
   10428:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1042a:	|      movea.l 20(sp),a0
   1042e:	|      move.l 24(a0),d0
   10432:	|      move.l d0,-(sp)
   10434:	|      pea 5 <_start+0x5>
   10438:	|      lea 8(sp),a0
   1043c:	|      move.l a0,-(sp)
   1043e:	|      jsr 14648 <getValueType>
   10444:	|      lea 12(sp),sp
   10448:	|      tst.w d0
   1044a:	|  ,-- bne.s 10450 <builtIn_startMusic+0x98>
   1044c:	|  |   moveq #1,d0
   1044e:	+--|-- bra.s 10484 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10450:	|  '-> moveq #24,d0
   10452:	|      add.l 20(sp),d0
   10456:	|      move.l d0,-(sp)
   10458:	|      jsr 14fcc <trimStack>
   1045e:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   10460:	|      movea.l 8(sp),a0
   10464:	|      move.l 4(sp),d1
   10468:	|      move.l (sp),d0
   1046a:	|      move.l a0,-(sp)
   1046c:	|      move.l d1,-(sp)
   1046e:	|      move.l d0,-(sp)
   10470:	|      jsr cfe4 <playMOD>
   10476:	|      lea 12(sp),sp
   1047a:	|      tst.w d0
   1047c:	|  ,-- bne.s 10482 <builtIn_startMusic+0xca>
   1047e:	|  |   moveq #2,d0
   10480:	+--|-- bra.s 10484 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   10482:	|  '-> moveq #2,d0
}
   10484:	'----> lea 12(sp),sp
   10488:	       rts

0001048a <builtIn_stopMusic>:

builtIn(stopMusic)
{
   1048a:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1048c:	       movea.l 12(sp),a0
   10490:	       move.l 24(a0),d0
   10494:	       move.l d0,-(sp)
   10496:	       pea 1 <_start+0x1>
   1049a:	       move.l sp,d0
   1049c:	       addq.l #8,d0
   1049e:	       move.l d0,-(sp)
   104a0:	       jsr 14648 <getValueType>
   104a6:	       lea 12(sp),sp
   104aa:	       tst.w d0
   104ac:	   ,-- bne.s 104b2 <builtIn_stopMusic+0x28>
   104ae:	   |   moveq #1,d0
   104b0:	,--|-- bra.s 104d0 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   104b2:	|  '-> moveq #24,d0
   104b4:	|      add.l 12(sp),d0
   104b8:	|      move.l d0,-(sp)
   104ba:	|      jsr 14fcc <trimStack>
   104c0:	|      addq.l #4,sp
	stopMOD (v);
   104c2:	|      move.l (sp),d0
   104c4:	|      move.l d0,-(sp)
   104c6:	|      jsr d080 <stopMOD>
   104cc:	|      addq.l #4,sp
	return BR_CONTINUE;
   104ce:	|      moveq #2,d0
}
   104d0:	'----> addq.l #4,sp
   104d2:	       rts

000104d4 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   104d4:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   104d6:	       movea.l 16(sp),a0
   104da:	       move.l 24(a0),d0
   104de:	       move.l d0,-(sp)
   104e0:	       pea 1 <_start+0x1>
   104e4:	       move.l sp,d0
   104e6:	       addq.l #8,d0
   104e8:	       move.l d0,-(sp)
   104ea:	       jsr 14648 <getValueType>
   104f0:	       lea 12(sp),sp
   104f4:	       tst.w d0
   104f6:	   ,-- bne.s 104fc <builtIn_setMusicVolume+0x28>
   104f8:	   |   moveq #1,d0
   104fa:	,--|-- bra.s 10556 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   104fc:	|  '-> moveq #24,d0
   104fe:	|      add.l 16(sp),d0
   10502:	|      move.l d0,-(sp)
   10504:	|      jsr 14fcc <trimStack>
   1050a:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1050c:	|      movea.l 16(sp),a0
   10510:	|      move.l 24(a0),d0
   10514:	|      move.l d0,-(sp)
   10516:	|      pea 1 <_start+0x1>
   1051a:	|      moveq #12,d0
   1051c:	|      add.l sp,d0
   1051e:	|      move.l d0,-(sp)
   10520:	|      jsr 14648 <getValueType>
   10526:	|      lea 12(sp),sp
   1052a:	|      tst.w d0
   1052c:	|  ,-- bne.s 10532 <builtIn_setMusicVolume+0x5e>
   1052e:	|  |   moveq #1,d0
   10530:	+--|-- bra.s 10556 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   10532:	|  '-> moveq #24,d0
   10534:	|      add.l 16(sp),d0
   10538:	|      move.l d0,-(sp)
   1053a:	|      jsr 14fcc <trimStack>
   10540:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   10542:	|      move.l (sp),d1
   10544:	|      move.l 4(sp),d0
   10548:	|      move.l d1,-(sp)
   1054a:	|      move.l d0,-(sp)
   1054c:	|      jsr d066 <setMusicVolume>
   10552:	|      addq.l #8,sp
	return BR_CONTINUE;
   10554:	|      moveq #2,d0
}
   10556:	'----> addq.l #8,sp
   10558:	       rts

0001055a <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   1055a:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1055c:	       movea.l 12(sp),a0
   10560:	       move.l 24(a0),d0
   10564:	       move.l d0,-(sp)
   10566:	       pea 1 <_start+0x1>
   1056a:	       move.l sp,d0
   1056c:	       addq.l #8,d0
   1056e:	       move.l d0,-(sp)
   10570:	       jsr 14648 <getValueType>
   10576:	       lea 12(sp),sp
   1057a:	       tst.w d0
   1057c:	   ,-- bne.s 10582 <builtIn_setDefaultMusicVolume+0x28>
   1057e:	   |   moveq #1,d0
   10580:	,--|-- bra.s 105a0 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   10582:	|  '-> moveq #24,d0
   10584:	|      add.l 12(sp),d0
   10588:	|      move.l d0,-(sp)
   1058a:	|      jsr 14fcc <trimStack>
   10590:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   10592:	|      move.l (sp),d0
   10594:	|      move.l d0,-(sp)
   10596:	|      jsr d04a <setDefaultMusicVolume>
   1059c:	|      addq.l #4,sp
	return BR_CONTINUE;
   1059e:	|      moveq #2,d0
}
   105a0:	'----> addq.l #4,sp
   105a2:	       rts

000105a4 <builtIn_playSound>:

builtIn(playSound)
{
   105a4:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   105a6:	       movea.l 12(sp),a0
   105aa:	       move.l 24(a0),d0
   105ae:	       move.l d0,-(sp)
   105b0:	       pea 5 <_start+0x5>
   105b4:	       move.l sp,d0
   105b6:	       addq.l #8,d0
   105b8:	       move.l d0,-(sp)
   105ba:	       jsr 14648 <getValueType>
   105c0:	       lea 12(sp),sp
   105c4:	       tst.w d0
   105c6:	   ,-- bne.s 105cc <builtIn_playSound+0x28>
   105c8:	   |   moveq #1,d0
   105ca:	,--|-- bra.s 105f4 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   105cc:	|  '-> moveq #24,d0
   105ce:	|      add.l 12(sp),d0
   105d2:	|      move.l d0,-(sp)
   105d4:	|      jsr 14fcc <trimStack>
   105da:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   105dc:	|      move.l (sp),d0
   105de:	|      clr.l -(sp)
   105e0:	|      move.l d0,-(sp)
   105e2:	|      jsr d06e <startSound>
   105e8:	|      addq.l #8,sp
   105ea:	|      tst.w d0
   105ec:	|  ,-- bne.s 105f2 <builtIn_playSound+0x4e>
   105ee:	|  |   moveq #2,d0
   105f0:	+--|-- bra.s 105f4 <builtIn_playSound+0x50>
	return BR_CONTINUE;
   105f2:	|  '-> moveq #2,d0
}
   105f4:	'----> addq.l #4,sp
   105f6:	       rts

000105f8 <builtIn_loopSound>:

builtIn(loopSound)
{
   105f8:	             lea -28(sp),sp
   105fc:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   105fe:	             tst.l 36(sp)
   10602:	         ,-- bgt.s 10618 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   10604:	         |   pea 198f1 <PutChar+0x1d43>
   1060a:	         |   jsr 1710c <KPrintF>
   10610:	         |   addq.l #4,sp
		return BR_ERROR;
   10612:	         |   moveq #1,d0
   10614:	,--------|-- bra.w 107d4 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   10618:	|        '-> moveq #1,d0
   1061a:	|            cmp.l 36(sp),d0
   1061e:	|     ,----- blt.s 1067a <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   10620:	|     |      movea.l 40(sp),a0
   10624:	|     |      move.l 24(a0),d0
   10628:	|     |      move.l d0,-(sp)
   1062a:	|     |      pea 5 <_start+0x5>
   1062e:	|     |      lea 16(sp),a0
   10632:	|     |      move.l a0,-(sp)
   10634:	|     |      jsr 14648 <getValueType>
   1063a:	|     |      lea 12(sp),sp
   1063e:	|     |      tst.w d0
   10640:	|     |  ,-- bne.s 10648 <builtIn_loopSound+0x50>
   10642:	|     |  |   moveq #1,d0
   10644:	+-----|--|-- bra.w 107d4 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   10648:	|     |  '-> moveq #24,d0
   1064a:	|     |      add.l 40(sp),d0
   1064e:	|     |      move.l d0,-(sp)
   10650:	|     |      jsr 14fcc <trimStack>
   10656:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   10658:	|     |      move.l 8(sp),d0
   1065c:	|     |      pea 1 <_start+0x1>
   10660:	|     |      move.l d0,-(sp)
   10662:	|     |      jsr d06e <startSound>
   10668:	|     |      addq.l #8,sp
   1066a:	|     |      tst.w d0
   1066c:	|     |  ,-- bne.s 10674 <builtIn_loopSound+0x7c>
   1066e:	|     |  |   moveq #2,d0
   10670:	+-----|--|-- bra.w 107d4 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   10674:	|     |  '-> moveq #2,d0
   10676:	+-----|----- bra.w 107d4 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   1067a:	|     '----> moveq #2,d1
   1067c:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   10680:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   10684:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   10688:	|            movea.l 40(sp),a0
   1068c:	|            movea.l 24(a0),a0
   10690:	|            move.l (a0),d0
   10692:	|            moveq #5,d1
   10694:	|            cmp.l d0,d1
   10696:	|  ,-------- beq.w 1076e <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   1069a:	|  |         movea.l 40(sp),a0
   1069e:	|  |         move.l 24(a0),d0
   106a2:	|  |         move.l d0,-(sp)
   106a4:	|  |         pea 1 <_start+0x1>
   106a8:	|  |         lea 12(sp),a0
   106ac:	|  |         move.l a0,-(sp)
   106ae:	|  |         jsr 14648 <getValueType>
   106b4:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   106b8:	|  |         moveq #24,d0
   106ba:	|  |         add.l 40(sp),d0
   106be:	|  |         move.l d0,-(sp)
   106c0:	|  |         jsr 14fcc <trimStack>
   106c6:	|  |         addq.l #4,sp
			numParams--;
   106c8:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   106cc:	|  +-------- bra.w 1076e <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   106d0:	|  |  ,----> movea.l 40(sp),a0
   106d4:	|  |  |      move.l 24(a0),d0
   106d8:	|  |  |      move.l d0,-(sp)
   106da:	|  |  |      pea 5 <_start+0x5>
   106de:	|  |  |      lea 16(sp),a0
   106e2:	|  |  |      move.l a0,-(sp)
   106e4:	|  |  |      jsr 14648 <getValueType>
   106ea:	|  |  |      lea 12(sp),sp
   106ee:	|  |  |      tst.w d0
   106f0:	|  |  |  ,-- bne.s 10706 <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   106f2:	|  |  |  |   pea 1992f <PutChar+0x1d81>
   106f8:	|  |  |  |   jsr 1710c <KPrintF>
   106fe:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   10700:	|  |  |  |   moveq #1,d0
   10702:	+--|--|--|-- bra.w 107d4 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   10706:	|  |  |  '-> moveq #20,d0
   10708:	|  |  |      move.l d0,20(sp)
   1070c:	|  |  |      clr.l 16(sp)
   10710:	|  |  |      move.l 1c810 <SysBase>,d0
   10716:	|  |  |      movea.l d0,a6
   10718:	|  |  |      move.l 20(sp),d0
   1071c:	|  |  |      move.l 16(sp),d1
   10720:	|  |  |      jsr -684(a6)
   10724:	|  |  |      move.l d0,12(sp)
   10728:	|  |  |      move.l 12(sp),d0
   1072c:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   10730:	|  |  |  ,-- bne.s 10738 <builtIn_loopSound+0x140>
   10732:	|  |  |  |   moveq #1,d0
   10734:	+--|--|--|-- bra.w 107d4 <builtIn_loopSound+0x1dc>

			s->next = old;
   10738:	|  |  |  '-> movea.l 28(sp),a0
   1073c:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   10742:	|  |  |      movea.l 28(sp),a0
   10746:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   1074a:	|  |  |      move.l 8(sp),d0
   1074e:	|  |  |      movea.l 28(sp),a0
   10752:	|  |  |      move.l d0,(a0)
			old = s;
   10754:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   1075a:	|  |  |      moveq #24,d0
   1075c:	|  |  |      add.l 40(sp),d0
   10760:	|  |  |      move.l d0,-(sp)
   10762:	|  |  |      jsr 14fcc <trimStack>
   10768:	|  |  |      addq.l #4,sp
			numParams--;
   1076a:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   1076e:	|  '--|----> tst.l 36(sp)
   10772:	|     '----- bne.w 106d0 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   10776:	|        ,-- bra.s 10782 <builtIn_loopSound+0x18a>
   10778:	|     ,--|-> movea.l 28(sp),a0
   1077c:	|     |  |   move.l 4(a0),28(sp)
   10782:	|     |  '-> movea.l 28(sp),a0
   10786:	|     |      move.l 4(a0),d0
   1078a:	|     '----- bne.s 10778 <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   1078c:	|            move.l 4(sp),d0
   10790:	|            moveq #1,d1
   10792:	|            cmp.l d0,d1
   10794:	|     ,----- bge.s 107ac <builtIn_loopSound+0x1b4>
			s->next = old;
   10796:	|     |      movea.l 28(sp),a0
   1079a:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   107a0:	|     |      movea.l 24(sp),a0
   107a4:	|     |      move.l 28(sp),8(a0)
   107aa:	|     |  ,-- bra.s 107bc <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   107ac:	|     '--|-> move.l 4(sp),d0
   107b0:	|        +-- beq.s 107bc <builtIn_loopSound+0x1c4>
			s->next = s;
   107b2:	|        |   movea.l 28(sp),a0
   107b6:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   107bc:	|        '-> movea.l 24(sp),a0
   107c0:	|            moveq #-1,d0
   107c2:	|            move.l d0,16(a0)
		playSoundList(old);
   107c6:	|            move.l 24(sp),-(sp)
   107ca:	|            jsr cfe8 <playSoundList>
   107d0:	|            addq.l #4,sp
		return BR_CONTINUE;
   107d2:	|            moveq #2,d0
	}
}
   107d4:	'----------> movea.l (sp)+,a6
   107d6:	             lea 28(sp),sp
   107da:	             rts

000107dc <builtIn_stopSound>:

builtIn(stopSound)
{
   107dc:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   107de:	       movea.l 12(sp),a0
   107e2:	       move.l 24(a0),d0
   107e6:	       move.l d0,-(sp)
   107e8:	       pea 5 <_start+0x5>
   107ec:	       move.l sp,d0
   107ee:	       addq.l #8,d0
   107f0:	       move.l d0,-(sp)
   107f2:	       jsr 14648 <getValueType>
   107f8:	       lea 12(sp),sp
   107fc:	       tst.w d0
   107fe:	   ,-- bne.s 10804 <builtIn_stopSound+0x28>
   10800:	   |   moveq #1,d0
   10802:	,--|-- bra.s 10822 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   10804:	|  '-> moveq #24,d0
   10806:	|      add.l 12(sp),d0
   1080a:	|      move.l d0,-(sp)
   1080c:	|      jsr 14fcc <trimStack>
   10812:	|      addq.l #4,sp
	huntKillSound (v);
   10814:	|      move.l (sp),d0
   10816:	|      move.l d0,-(sp)
   10818:	|      jsr cfe0 <huntKillSound>
   1081e:	|      addq.l #4,sp
	return BR_CONTINUE;
   10820:	|      moveq #2,d0
}
   10822:	'----> addq.l #4,sp
   10824:	       rts

00010826 <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   10826:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10828:	       movea.l 12(sp),a0
   1082c:	       move.l 24(a0),d0
   10830:	       move.l d0,-(sp)
   10832:	       pea 1 <_start+0x1>
   10836:	       move.l sp,d0
   10838:	       addq.l #8,d0
   1083a:	       move.l d0,-(sp)
   1083c:	       jsr 14648 <getValueType>
   10842:	       lea 12(sp),sp
   10846:	       tst.w d0
   10848:	   ,-- bne.s 1084e <builtIn_setDefaultSoundVolume+0x28>
   1084a:	   |   moveq #1,d0
   1084c:	,--|-- bra.s 1086c <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   1084e:	|  '-> moveq #24,d0
   10850:	|      add.l 12(sp),d0
   10854:	|      move.l d0,-(sp)
   10856:	|      jsr 14fcc <trimStack>
   1085c:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   1085e:	|      move.l (sp),d0
   10860:	|      move.l d0,-(sp)
   10862:	|      jsr d056 <setDefaultSoundVolume>
   10868:	|      addq.l #4,sp
	return BR_CONTINUE;
   1086a:	|      moveq #2,d0
}
   1086c:	'----> addq.l #4,sp
   1086e:	       rts

00010870 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   10870:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10872:	       movea.l 16(sp),a0
   10876:	       move.l 24(a0),d0
   1087a:	       move.l d0,-(sp)
   1087c:	       pea 1 <_start+0x1>
   10880:	       move.l sp,d0
   10882:	       addq.l #8,d0
   10884:	       move.l d0,-(sp)
   10886:	       jsr 14648 <getValueType>
   1088c:	       lea 12(sp),sp
   10890:	       tst.w d0
   10892:	   ,-- bne.s 10898 <builtIn_setSoundVolume+0x28>
   10894:	   |   moveq #1,d0
   10896:	,--|-- bra.s 108f2 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10898:	|  '-> moveq #24,d0
   1089a:	|      add.l 16(sp),d0
   1089e:	|      move.l d0,-(sp)
   108a0:	|      jsr 14fcc <trimStack>
   108a6:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   108a8:	|      movea.l 16(sp),a0
   108ac:	|      move.l 24(a0),d0
   108b0:	|      move.l d0,-(sp)
   108b2:	|      pea 5 <_start+0x5>
   108b6:	|      moveq #12,d0
   108b8:	|      add.l sp,d0
   108ba:	|      move.l d0,-(sp)
   108bc:	|      jsr 14648 <getValueType>
   108c2:	|      lea 12(sp),sp
   108c6:	|      tst.w d0
   108c8:	|  ,-- bne.s 108ce <builtIn_setSoundVolume+0x5e>
   108ca:	|  |   moveq #1,d0
   108cc:	+--|-- bra.s 108f2 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   108ce:	|  '-> moveq #24,d0
   108d0:	|      add.l 16(sp),d0
   108d4:	|      move.l d0,-(sp)
   108d6:	|      jsr 14fcc <trimStack>
   108dc:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   108de:	|      move.l (sp),d1
   108e0:	|      move.l 4(sp),d0
   108e4:	|      move.l d1,-(sp)
   108e6:	|      move.l d0,-(sp)
   108e8:	|      jsr d06a <setSoundVolume>
   108ee:	|      addq.l #8,sp
	return BR_CONTINUE;
   108f0:	|      moveq #2,d0
}
   108f2:	'----> addq.l #8,sp
   108f4:	       rts

000108f6 <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   108f6:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   108fa:	       movea.l 20(sp),a0
   108fe:	       move.l 24(a0),d0
   10902:	       move.l d0,-(sp)
   10904:	       pea 1 <_start+0x1>
   10908:	       moveq #12,d0
   1090a:	       add.l sp,d0
   1090c:	       move.l d0,-(sp)
   1090e:	       jsr 14648 <getValueType>
   10914:	       lea 12(sp),sp
   10918:	       tst.w d0
   1091a:	   ,-- bne.s 10922 <builtIn_setSoundLoopPoints+0x2c>
   1091c:	   |   moveq #1,d0
   1091e:	,--|-- bra.w 109ba <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10922:	|  '-> moveq #24,d0
   10924:	|      add.l 20(sp),d0
   10928:	|      move.l d0,-(sp)
   1092a:	|      jsr 14fcc <trimStack>
   10930:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10932:	|      movea.l 20(sp),a0
   10936:	|      move.l 24(a0),d0
   1093a:	|      move.l d0,-(sp)
   1093c:	|      pea 1 <_start+0x1>
   10940:	|      lea 8(sp),a0
   10944:	|      move.l a0,-(sp)
   10946:	|      jsr 14648 <getValueType>
   1094c:	|      lea 12(sp),sp
   10950:	|      tst.w d0
   10952:	|  ,-- bne.s 10958 <builtIn_setSoundLoopPoints+0x62>
   10954:	|  |   moveq #1,d0
   10956:	+--|-- bra.s 109ba <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10958:	|  '-> moveq #24,d0
   1095a:	|      add.l 20(sp),d0
   1095e:	|      move.l d0,-(sp)
   10960:	|      jsr 14fcc <trimStack>
   10966:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10968:	|      movea.l 20(sp),a0
   1096c:	|      move.l 24(a0),d0
   10970:	|      move.l d0,-(sp)
   10972:	|      pea 5 <_start+0x5>
   10976:	|      moveq #16,d0
   10978:	|      add.l sp,d0
   1097a:	|      move.l d0,-(sp)
   1097c:	|      jsr 14648 <getValueType>
   10982:	|      lea 12(sp),sp
   10986:	|      tst.w d0
   10988:	|  ,-- bne.s 1098e <builtIn_setSoundLoopPoints+0x98>
   1098a:	|  |   moveq #1,d0
   1098c:	+--|-- bra.s 109ba <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   1098e:	|  '-> moveq #24,d0
   10990:	|      add.l 20(sp),d0
   10994:	|      move.l d0,-(sp)
   10996:	|      jsr 14fcc <trimStack>
   1099c:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   1099e:	|      movea.l 4(sp),a0
   109a2:	|      move.l (sp),d1
   109a4:	|      move.l 8(sp),d0
   109a8:	|      move.l a0,-(sp)
   109aa:	|      move.l d1,-(sp)
   109ac:	|      move.l d0,-(sp)
   109ae:	|      jsr d062 <setSoundLoop>
   109b4:	|      lea 12(sp),sp
	return BR_CONTINUE;
   109b8:	|      moveq #2,d0
}
   109ba:	'----> lea 12(sp),sp
   109be:	       rts

000109c0 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   109c0:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   109c2:	          movea.l 12(sp),a0
   109c6:	          movea.l 24(a0),a0
   109ca:	          move.l (a0),d0
   109cc:	          moveq #5,d1
   109ce:	          cmp.l d0,d1
   109d0:	,-------- bne.s 10a14 <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   109d2:	|         movea.l 12(sp),a0
   109d6:	|         move.l 24(a0),d0
   109da:	|         move.l d0,-(sp)
   109dc:	|         pea 5 <_start+0x5>
   109e0:	|         move.l sp,d0
   109e2:	|         addq.l #8,d0
   109e4:	|         move.l d0,-(sp)
   109e6:	|         jsr 14648 <getValueType>
   109ec:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   109f0:	|         moveq #24,d0
   109f2:	|         add.l 12(sp),d0
   109f6:	|         move.l d0,-(sp)
   109f8:	|         jsr 14fcc <trimStack>
   109fe:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   10a00:	|         move.l (sp),d0
   10a02:	|         move.l d0,-(sp)
   10a04:	|         jsr 168b6 <setFloor>
   10a0a:	|         addq.l #4,sp
   10a0c:	|         tst.w d0
   10a0e:	|  ,----- bne.s 10a2a <builtIn_setFloor+0x6a>
   10a10:	|  |      moveq #1,d0
   10a12:	|  |  ,-- bra.s 10a2c <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
   10a14:	'--|--|-> moveq #24,d0
   10a16:	   |  |   add.l 12(sp),d0
   10a1a:	   |  |   move.l d0,-(sp)
   10a1c:	   |  |   jsr 14fcc <trimStack>
   10a22:	   |  |   addq.l #4,sp
		setFloorNull ();
   10a24:	   |  |   jsr 17030 <setFloorNull>
	}
	return BR_CONTINUE;
   10a2a:	   '--|-> moveq #2,d0
}
   10a2c:	      '-> addq.l #4,sp
   10a2e:	          rts

00010a30 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
   10a30:	jsr 1614e <drawFloor>
	return BR_CONTINUE;
   10a36:	moveq #2,d0
}
   10a38:	rts

00010a3a <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   10a3a:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10a3c:	          movea.l 12(sp),a0
   10a40:	          movea.l 24(a0),a0
   10a44:	          move.l (a0),d0
   10a46:	          moveq #5,d1
   10a48:	          cmp.l d0,d1
   10a4a:	,-------- bne.s 10a8e <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10a4c:	|         movea.l 12(sp),a0
   10a50:	|         move.l 24(a0),d0
   10a54:	|         move.l d0,-(sp)
   10a56:	|         pea 5 <_start+0x5>
   10a5a:	|         move.l sp,d0
   10a5c:	|         addq.l #8,d0
   10a5e:	|         move.l d0,-(sp)
   10a60:	|         jsr 14648 <getValueType>
   10a66:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10a6a:	|         moveq #24,d0
   10a6c:	|         add.l 12(sp),d0
   10a70:	|         move.l d0,-(sp)
   10a72:	|         jsr 14fcc <trimStack>
   10a78:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   10a7a:	|         move.l (sp),d0
   10a7c:	|         move.l d0,-(sp)
   10a7e:	|         jsr 8572 <setZBuffer>
   10a84:	|         addq.l #4,sp
   10a86:	|         tst.w d0
   10a88:	|  ,----- bne.s 10aa4 <builtIn_setZBuffer+0x6a>
   10a8a:	|  |      moveq #1,d0
   10a8c:	|  |  ,-- bra.s 10aa6 <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
   10a8e:	'--|--|-> moveq #24,d0
   10a90:	   |  |   add.l 12(sp),d0
   10a94:	   |  |   move.l d0,-(sp)
   10a96:	   |  |   jsr 14fcc <trimStack>
   10a9c:	   |  |   addq.l #4,sp
		killZBuffer ();
   10a9e:	   |  |   jsr 8526 <killZBuffer>
	}
	return BR_CONTINUE;
   10aa4:	   '--|-> moveq #2,d0
}
   10aa6:	      '-> addq.l #4,sp
   10aa8:	          rts

00010aaa <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   10aaa:	pea 19966 <talk.c.490538ff+0x1>
   10ab0:	jsr 1710c <KPrintF>
   10ab6:	addq.l #4,sp
	return BR_CONTINUE;
   10ab8:	moveq #2,d0
}
   10aba:	rts

00010abc <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10abc:	          movea.l 8(sp),a0
   10ac0:	          move.l 24(a0),d0
   10ac4:	          move.l d0,-(sp)
   10ac6:	          pea 1 <_start+0x1>
   10aca:	          pea 1c8da <speechMode>
   10ad0:	          jsr 14648 <getValueType>
   10ad6:	          lea 12(sp),sp
   10ada:	          tst.w d0
   10adc:	      ,-- bne.s 10ae2 <builtIn_setSpeechMode+0x26>
   10ade:	      |   moveq #1,d0
   10ae0:	,-----|-- bra.s 10b1a <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
   10ae2:	|     '-> moveq #24,d0
   10ae4:	|         add.l 8(sp),d0
   10ae8:	|         move.l d0,-(sp)
   10aea:	|         jsr 14fcc <trimStack>
   10af0:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   10af2:	|         move.l 1c8da <speechMode>,d0
   10af8:	|     ,-- bmi.s 10b06 <builtIn_setSpeechMode+0x4a>
   10afa:	|     |   move.l 1c8da <speechMode>,d0
   10b00:	|     |   moveq #2,d1
   10b02:	|     |   cmp.l d0,d1
   10b04:	|  ,--|-- bge.s 10b18 <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   10b06:	|  |  '-> pea 1997f <talk.c.490538ff+0x1a>
   10b0c:	|  |      jsr 1710c <KPrintF>
   10b12:	|  |      addq.l #4,sp
		return BR_ERROR;
   10b14:	|  |      moveq #1,d0
   10b16:	+--|----- bra.s 10b1a <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
   10b18:	|  '----> moveq #2,d0
}
   10b1a:	'-------> rts

00010b1c <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   10b1c:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   10b1e:	       jsr 3f04 <isThereAnySpeechGoingOn>
   10b24:	       move.l d0,(sp)
	if (i == -1) {
   10b26:	       moveq #-1,d0
   10b28:	       cmp.l (sp),d0
   10b2a:	,----- bne.s 10b46 <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
   10b2c:	|      moveq #28,d0
   10b2e:	|      add.l 12(sp),d0
   10b32:	|      clr.l -(sp)
   10b34:	|      pea 1 <_start+0x1>
   10b38:	|      move.l d0,-(sp)
   10b3a:	|      jsr 14f3a <setVariable>
   10b40:	|      lea 12(sp),sp
   10b44:	|  ,-- bra.s 10b5e <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   10b46:	'--|-> moveq #28,d0
   10b48:	   |   add.l 12(sp),d0
   10b4c:	   |   move.l (sp),-(sp)
   10b4e:	   |   pea 7 <_start+0x7>
   10b52:	   |   move.l d0,-(sp)
   10b54:	   |   jsr 14f3a <setVariable>
   10b5a:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10b5e:	   '-> moveq #2,d0
}
   10b60:	       addq.l #4,sp
   10b62:	       rts

00010b64 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
   10b64:	jsr 6a94 <killSpeechTimers>
	return BR_CONTINUE;
   10b6a:	moveq #2,d0
}
   10b6c:	rts

00010b6e <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
   10b6e:	       move.l 1c920 <overRegion>,d0
   10b74:	,----- beq.s 10b9e <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   10b76:	|      movea.l 1c920 <overRegion>,a0
   10b7c:	|      movea.l 28(a0),a0
   10b80:	|      move.l 4(a0),d1
   10b84:	|      moveq #28,d0
   10b86:	|      add.l 8(sp),d0
   10b8a:	|      move.l d1,-(sp)
   10b8c:	|      pea 7 <_start+0x7>
   10b90:	|      move.l d0,-(sp)
   10b92:	|      jsr 14f3a <setVariable>
   10b98:	|      lea 12(sp),sp
   10b9c:	|  ,-- bra.s 10bb6 <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   10b9e:	'--|-> moveq #28,d0
   10ba0:	   |   add.l 8(sp),d0
   10ba4:	   |   clr.l -(sp)
   10ba6:	   |   pea 1 <_start+0x1>
   10baa:	   |   move.l d0,-(sp)
   10bac:	   |   jsr 14f3a <setVariable>
   10bb2:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   10bb6:	   '-> moveq #2,d0
}
   10bb8:	       rts

00010bba <builtIn_rename>:

builtIn(rename)
{
   10bba:	       lea -16(sp),sp
   10bbe:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10bc0:	       movea.l 28(sp),a0
   10bc4:	       move.l 24(a0),d0
   10bc8:	       move.l d0,-(sp)
   10bca:	       jsr 14c1e <getTextFromAnyVar>
   10bd0:	       addq.l #4,sp
   10bd2:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   10bd6:	   ,-- bne.s 10bdc <builtIn_rename+0x22>
   10bd8:	   |   moveq #1,d0
   10bda:	,--|-- bra.s 10c56 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10bdc:	|  '-> moveq #24,d0
   10bde:	|      add.l 28(sp),d0
   10be2:	|      move.l d0,-(sp)
   10be4:	|      jsr 14fcc <trimStack>
   10bea:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   10bec:	|      movea.l 28(sp),a0
   10bf0:	|      move.l 24(a0),d0
   10bf4:	|      move.l d0,-(sp)
   10bf6:	|      pea 7 <_start+0x7>
   10bfa:	|      lea 12(sp),a0
   10bfe:	|      move.l a0,-(sp)
   10c00:	|      jsr 14648 <getValueType>
   10c06:	|      lea 12(sp),sp
   10c0a:	|      tst.w d0
   10c0c:	|  ,-- bne.s 10c12 <builtIn_rename+0x58>
   10c0e:	|  |   moveq #1,d0
   10c10:	+--|-- bra.s 10c56 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10c12:	|  '-> moveq #24,d0
   10c14:	|      add.l 28(sp),d0
   10c18:	|      move.l d0,-(sp)
   10c1a:	|      jsr 14fcc <trimStack>
   10c20:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   10c22:	|      move.l 4(sp),d0
   10c26:	|      move.l d0,-(sp)
   10c28:	|      jsr d3ae <findObjectType>
   10c2e:	|      addq.l #4,sp
   10c30:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   10c34:	|      movea.l 12(sp),a0
   10c38:	|      move.l (a0),8(sp)
   10c3c:	|      move.l 1c810 <SysBase>,d0
   10c42:	|      movea.l d0,a6
   10c44:	|      movea.l 8(sp),a1
   10c48:	|      jsr -690(a6)
	o->screenName = newText;
   10c4c:	|      movea.l 12(sp),a0
   10c50:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   10c54:	|      moveq #2,d0
}
   10c56:	'----> movea.l (sp)+,a6
   10c58:	       lea 16(sp),sp
   10c5c:	       rts

00010c5e <builtIn_getObjectX>:

builtIn (getObjectX)
{
   10c5e:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10c62:	          movea.l 20(sp),a0
   10c66:	          move.l 24(a0),d0
   10c6a:	          move.l d0,-(sp)
   10c6c:	          pea 7 <_start+0x7>
   10c70:	          lea 8(sp),a0
   10c74:	          move.l a0,-(sp)
   10c76:	          jsr 14648 <getValueType>
   10c7c:	          lea 12(sp),sp
   10c80:	          tst.w d0
   10c82:	      ,-- bne.s 10c8a <builtIn_getObjectX+0x2c>
   10c84:	      |   moveq #1,d0
   10c86:	,-----|-- bra.w 10d26 <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
   10c8a:	|     '-> moveq #24,d0
   10c8c:	|         add.l 20(sp),d0
   10c90:	|         move.l d0,-(sp)
   10c92:	|         jsr 14fcc <trimStack>
   10c98:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10c9a:	|         move.l (sp),d0
   10c9c:	|         move.l d0,-(sp)
   10c9e:	|         jsr a4a2 <findPerson>
   10ca4:	|         addq.l #4,sp
   10ca6:	|         move.l d0,8(sp)
	if (pers) {
   10caa:	|     ,-- beq.s 10cd8 <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   10cac:	|     |   movea.l 8(sp),a0
   10cb0:	|     |   move.l (a0),d0
   10cb2:	|     |   move.l d0,-(sp)
   10cb4:	|     |   jsr 174d6 <__fixsfsi>
   10cba:	|     |   addq.l #4,sp
   10cbc:	|     |   move.l d0,d1
   10cbe:	|     |   moveq #28,d0
   10cc0:	|     |   add.l 20(sp),d0
   10cc4:	|     |   move.l d1,-(sp)
   10cc6:	|     |   pea 1 <_start+0x1>
   10cca:	|     |   move.l d0,-(sp)
   10ccc:	|     |   jsr 14f3a <setVariable>
   10cd2:	|     |   lea 12(sp),sp
   10cd6:	|  ,--|-- bra.s 10d24 <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10cd8:	|  |  '-> move.l (sp),d0
   10cda:	|  |      move.l d0,-(sp)
   10cdc:	|  |      jsr 1590a <getRegionForObject>
   10ce2:	|  |      addq.l #4,sp
   10ce4:	|  |      move.l d0,4(sp)
		if (la) {
   10ce8:	|  |  ,-- beq.s 10d0c <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   10cea:	|  |  |   movea.l 4(sp),a0
   10cee:	|  |  |   move.l 16(a0),d1
   10cf2:	|  |  |   moveq #28,d0
   10cf4:	|  |  |   add.l 20(sp),d0
   10cf8:	|  |  |   move.l d1,-(sp)
   10cfa:	|  |  |   pea 1 <_start+0x1>
   10cfe:	|  |  |   move.l d0,-(sp)
   10d00:	|  |  |   jsr 14f3a <setVariable>
   10d06:	|  |  |   lea 12(sp),sp
   10d0a:	|  +--|-- bra.s 10d24 <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10d0c:	|  |  '-> moveq #28,d0
   10d0e:	|  |      add.l 20(sp),d0
   10d12:	|  |      clr.l -(sp)
   10d14:	|  |      pea 1 <_start+0x1>
   10d18:	|  |      move.l d0,-(sp)
   10d1a:	|  |      jsr 14f3a <setVariable>
   10d20:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10d24:	|  '----> moveq #2,d0
}
   10d26:	'-------> lea 12(sp),sp
   10d2a:	          rts

00010d2c <builtIn_getObjectY>:

builtIn (getObjectY)
{
   10d2c:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10d30:	          movea.l 20(sp),a0
   10d34:	          move.l 24(a0),d0
   10d38:	          move.l d0,-(sp)
   10d3a:	          pea 7 <_start+0x7>
   10d3e:	          lea 8(sp),a0
   10d42:	          move.l a0,-(sp)
   10d44:	          jsr 14648 <getValueType>
   10d4a:	          lea 12(sp),sp
   10d4e:	          tst.w d0
   10d50:	      ,-- bne.s 10d58 <builtIn_getObjectY+0x2c>
   10d52:	      |   moveq #1,d0
   10d54:	,-----|-- bra.w 10df6 <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
   10d58:	|     '-> moveq #24,d0
   10d5a:	|         add.l 20(sp),d0
   10d5e:	|         move.l d0,-(sp)
   10d60:	|         jsr 14fcc <trimStack>
   10d66:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10d68:	|         move.l (sp),d0
   10d6a:	|         move.l d0,-(sp)
   10d6c:	|         jsr a4a2 <findPerson>
   10d72:	|         addq.l #4,sp
   10d74:	|         move.l d0,8(sp)
	if (pers) {
   10d78:	|     ,-- beq.s 10da8 <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   10d7a:	|     |   movea.l 8(sp),a0
   10d7e:	|     |   move.l 4(a0),d0
   10d82:	|     |   move.l d0,-(sp)
   10d84:	|     |   jsr 174d6 <__fixsfsi>
   10d8a:	|     |   addq.l #4,sp
   10d8c:	|     |   move.l d0,d1
   10d8e:	|     |   moveq #28,d0
   10d90:	|     |   add.l 20(sp),d0
   10d94:	|     |   move.l d1,-(sp)
   10d96:	|     |   pea 1 <_start+0x1>
   10d9a:	|     |   move.l d0,-(sp)
   10d9c:	|     |   jsr 14f3a <setVariable>
   10da2:	|     |   lea 12(sp),sp
   10da6:	|  ,--|-- bra.s 10df4 <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10da8:	|  |  '-> move.l (sp),d0
   10daa:	|  |      move.l d0,-(sp)
   10dac:	|  |      jsr 1590a <getRegionForObject>
   10db2:	|  |      addq.l #4,sp
   10db4:	|  |      move.l d0,4(sp)
		if (la) {
   10db8:	|  |  ,-- beq.s 10ddc <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   10dba:	|  |  |   movea.l 4(sp),a0
   10dbe:	|  |  |   move.l 20(a0),d1
   10dc2:	|  |  |   moveq #28,d0
   10dc4:	|  |  |   add.l 20(sp),d0
   10dc8:	|  |  |   move.l d1,-(sp)
   10dca:	|  |  |   pea 1 <_start+0x1>
   10dce:	|  |  |   move.l d0,-(sp)
   10dd0:	|  |  |   jsr 14f3a <setVariable>
   10dd6:	|  |  |   lea 12(sp),sp
   10dda:	|  +--|-- bra.s 10df4 <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10ddc:	|  |  '-> moveq #28,d0
   10dde:	|  |      add.l 20(sp),d0
   10de2:	|  |      clr.l -(sp)
   10de4:	|  |      pea 1 <_start+0x1>
   10de8:	|  |      move.l d0,-(sp)
   10dea:	|  |      jsr 14f3a <setVariable>
   10df0:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10df4:	|  '----> moveq #2,d0
}
   10df6:	'-------> lea 12(sp),sp
   10dfa:	          rts

00010dfc <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   10dfc:	       lea -32(sp),sp
   10e00:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10e04:	       movea.l 56(sp),a0
   10e08:	       move.l 24(a0),d0
   10e0c:	       move.l d0,-(sp)
   10e0e:	       pea 1 <_start+0x1>
   10e12:	       lea 28(sp),a0
   10e16:	       move.l a0,-(sp)
   10e18:	       jsr 14648 <getValueType>
   10e1e:	       lea 12(sp),sp
   10e22:	       tst.w d0
   10e24:	   ,-- bne.s 10e2c <builtIn_addScreenRegion+0x30>
   10e26:	   |   moveq #1,d0
   10e28:	,--|-- bra.w 11006 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10e2c:	|  '-> moveq #24,d0
   10e2e:	|      add.l 56(sp),d0
   10e32:	|      move.l d0,-(sp)
   10e34:	|      jsr 14fcc <trimStack>
   10e3a:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10e3c:	|      movea.l 56(sp),a0
   10e40:	|      move.l 24(a0),d0
   10e44:	|      move.l d0,-(sp)
   10e46:	|      pea 1 <_start+0x1>
   10e4a:	|      moveq #48,d0
   10e4c:	|      add.l sp,d0
   10e4e:	|      move.l d0,-(sp)
   10e50:	|      jsr 14648 <getValueType>
   10e56:	|      lea 12(sp),sp
   10e5a:	|      tst.w d0
   10e5c:	|  ,-- bne.s 10e64 <builtIn_addScreenRegion+0x68>
   10e5e:	|  |   moveq #1,d0
   10e60:	+--|-- bra.w 11006 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10e64:	|  '-> moveq #24,d0
   10e66:	|      add.l 56(sp),d0
   10e6a:	|      move.l d0,-(sp)
   10e6c:	|      jsr 14fcc <trimStack>
   10e72:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10e74:	|      movea.l 56(sp),a0
   10e78:	|      move.l 24(a0),d0
   10e7c:	|      move.l d0,-(sp)
   10e7e:	|      pea 1 <_start+0x1>
   10e82:	|      moveq #52,d0
   10e84:	|      add.l sp,d0
   10e86:	|      move.l d0,-(sp)
   10e88:	|      jsr 14648 <getValueType>
   10e8e:	|      lea 12(sp),sp
   10e92:	|      tst.w d0
   10e94:	|  ,-- bne.s 10e9c <builtIn_addScreenRegion+0xa0>
   10e96:	|  |   moveq #1,d0
   10e98:	+--|-- bra.w 11006 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10e9c:	|  '-> moveq #24,d0
   10e9e:	|      add.l 56(sp),d0
   10ea2:	|      move.l d0,-(sp)
   10ea4:	|      jsr 14fcc <trimStack>
   10eaa:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10eac:	|      movea.l 56(sp),a0
   10eb0:	|      move.l 24(a0),d0
   10eb4:	|      move.l d0,-(sp)
   10eb6:	|      pea 1 <_start+0x1>
   10eba:	|      lea 32(sp),a0
   10ebe:	|      move.l a0,-(sp)
   10ec0:	|      jsr 14648 <getValueType>
   10ec6:	|      lea 12(sp),sp
   10eca:	|      tst.w d0
   10ecc:	|  ,-- bne.s 10ed4 <builtIn_addScreenRegion+0xd8>
   10ece:	|  |   moveq #1,d0
   10ed0:	+--|-- bra.w 11006 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10ed4:	|  '-> moveq #24,d0
   10ed6:	|      add.l 56(sp),d0
   10eda:	|      move.l d0,-(sp)
   10edc:	|      jsr 14fcc <trimStack>
   10ee2:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10ee4:	|      movea.l 56(sp),a0
   10ee8:	|      move.l 24(a0),d0
   10eec:	|      move.l d0,-(sp)
   10eee:	|      pea 1 <_start+0x1>
   10ef2:	|      lea 36(sp),a0
   10ef6:	|      move.l a0,-(sp)
   10ef8:	|      jsr 14648 <getValueType>
   10efe:	|      lea 12(sp),sp
   10f02:	|      tst.w d0
   10f04:	|  ,-- bne.s 10f0c <builtIn_addScreenRegion+0x110>
   10f06:	|  |   moveq #1,d0
   10f08:	+--|-- bra.w 11006 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10f0c:	|  '-> moveq #24,d0
   10f0e:	|      add.l 56(sp),d0
   10f12:	|      move.l d0,-(sp)
   10f14:	|      jsr 14fcc <trimStack>
   10f1a:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10f1c:	|      movea.l 56(sp),a0
   10f20:	|      move.l 24(a0),d0
   10f24:	|      move.l d0,-(sp)
   10f26:	|      pea 1 <_start+0x1>
   10f2a:	|      lea 40(sp),a0
   10f2e:	|      move.l a0,-(sp)
   10f30:	|      jsr 14648 <getValueType>
   10f36:	|      lea 12(sp),sp
   10f3a:	|      tst.w d0
   10f3c:	|  ,-- bne.s 10f44 <builtIn_addScreenRegion+0x148>
   10f3e:	|  |   moveq #1,d0
   10f40:	+--|-- bra.w 11006 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10f44:	|  '-> moveq #24,d0
   10f46:	|      add.l 56(sp),d0
   10f4a:	|      move.l d0,-(sp)
   10f4c:	|      jsr 14fcc <trimStack>
   10f52:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10f54:	|      movea.l 56(sp),a0
   10f58:	|      move.l 24(a0),d0
   10f5c:	|      move.l d0,-(sp)
   10f5e:	|      pea 1 <_start+0x1>
   10f62:	|      lea 44(sp),a0
   10f66:	|      move.l a0,-(sp)
   10f68:	|      jsr 14648 <getValueType>
   10f6e:	|      lea 12(sp),sp
   10f72:	|      tst.w d0
   10f74:	|  ,-- bne.s 10f7c <builtIn_addScreenRegion+0x180>
   10f76:	|  |   moveq #1,d0
   10f78:	+--|-- bra.w 11006 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10f7c:	|  '-> moveq #24,d0
   10f7e:	|      add.l 56(sp),d0
   10f82:	|      move.l d0,-(sp)
   10f84:	|      jsr 14fcc <trimStack>
   10f8a:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10f8c:	|      movea.l 56(sp),a0
   10f90:	|      move.l 24(a0),d0
   10f94:	|      move.l d0,-(sp)
   10f96:	|      pea 7 <_start+0x7>
   10f9a:	|      lea 24(sp),a0
   10f9e:	|      move.l a0,-(sp)
   10fa0:	|      jsr 14648 <getValueType>
   10fa6:	|      lea 12(sp),sp
   10faa:	|      tst.w d0
   10fac:	|  ,-- bne.s 10fb2 <builtIn_addScreenRegion+0x1b6>
   10fae:	|  |   moveq #1,d0
   10fb0:	+--|-- bra.s 11006 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10fb2:	|  '-> moveq #24,d0
   10fb4:	|      add.l 56(sp),d0
   10fb8:	|      move.l d0,-(sp)
   10fba:	|      jsr 14fcc <trimStack>
   10fc0:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   10fc2:	|      move.l 16(sp),d5
   10fc6:	|      move.l 20(sp),d4
   10fca:	|      move.l 40(sp),d3
   10fce:	|      move.l 44(sp),d2
   10fd2:	|      movea.l 24(sp),a1
   10fd6:	|      movea.l 28(sp),a0
   10fda:	|      move.l 32(sp),d1
   10fde:	|      move.l 36(sp),d0
   10fe2:	|      move.l d5,-(sp)
   10fe4:	|      move.l d4,-(sp)
   10fe6:	|      move.l d3,-(sp)
   10fe8:	|      move.l d2,-(sp)
   10fea:	|      move.l a1,-(sp)
   10fec:	|      move.l a0,-(sp)
   10fee:	|      move.l d1,-(sp)
   10ff0:	|      move.l d0,-(sp)
   10ff2:	|      jsr 157c4 <addScreenRegion>
   10ff8:	|      lea 32(sp),sp
   10ffc:	|      tst.w d0
   10ffe:	|  ,-- beq.s 11004 <builtIn_addScreenRegion+0x208>
   11000:	|  |   moveq #2,d0
   11002:	+--|-- bra.s 11006 <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   11004:	|  '-> moveq #1,d0

}
   11006:	'----> movem.l (sp)+,d2-d5
   1100a:	       lea 32(sp),sp
   1100e:	       rts

00011010 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   11010:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11012:	       movea.l 12(sp),a0
   11016:	       move.l 24(a0),d0
   1101a:	       move.l d0,-(sp)
   1101c:	       pea 7 <_start+0x7>
   11020:	       move.l sp,d0
   11022:	       addq.l #8,d0
   11024:	       move.l d0,-(sp)
   11026:	       jsr 14648 <getValueType>
   1102c:	       lea 12(sp),sp
   11030:	       tst.w d0
   11032:	   ,-- bne.s 11038 <builtIn_removeScreenRegion+0x28>
   11034:	   |   moveq #1,d0
   11036:	,--|-- bra.s 11056 <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   11038:	|  '-> moveq #24,d0
   1103a:	|      add.l 12(sp),d0
   1103e:	|      move.l d0,-(sp)
   11040:	|      jsr 14fcc <trimStack>
   11046:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   11048:	|      move.l (sp),d0
   1104a:	|      move.l d0,-(sp)
   1104c:	|      jsr 15ab2 <removeScreenRegion>
   11052:	|      addq.l #4,sp
	return BR_CONTINUE;
   11054:	|      moveq #2,d0
}
   11056:	'----> addq.l #4,sp
   11058:	       rts

0001105a <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   1105a:	jsr 15c36 <showBoxes>
	return BR_CONTINUE;
   11060:	moveq #2,d0
}
   11062:	rts

00011064 <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   11064:	jsr 15938 <killAllRegions>
	return BR_CONTINUE;
   1106a:	moveq #2,d0
}
   1106c:	rts

0001106e <builtIn_addCharacter>:

builtIn(addCharacter)
{
   1106e:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   11072:	       movea.l 24(sp),a0
   11076:	       move.l 24(a0),d0
   1107a:	       move.l d0,-(sp)
   1107c:	       jsr 142f4 <getCostumeFromVar>
   11082:	       addq.l #4,sp
   11084:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   11088:	   ,-- bne.s 11090 <builtIn_addCharacter+0x22>
   1108a:	   |   moveq #1,d0
   1108c:	,--|-- bra.w 1116c <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   11090:	|  '-> moveq #24,d0
   11092:	|      add.l 24(sp),d0
   11096:	|      move.l d0,-(sp)
   11098:	|      jsr 14fcc <trimStack>
   1109e:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   110a0:	|      movea.l 24(sp),a0
   110a4:	|      move.l 24(a0),d0
   110a8:	|      move.l d0,-(sp)
   110aa:	|      pea 1 <_start+0x1>
   110ae:	|      lea 12(sp),a0
   110b2:	|      move.l a0,-(sp)
   110b4:	|      jsr 14648 <getValueType>
   110ba:	|      lea 12(sp),sp
   110be:	|      tst.w d0
   110c0:	|  ,-- bne.s 110c8 <builtIn_addCharacter+0x5a>
   110c2:	|  |   moveq #1,d0
   110c4:	+--|-- bra.w 1116c <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   110c8:	|  '-> moveq #24,d0
   110ca:	|      add.l 24(sp),d0
   110ce:	|      move.l d0,-(sp)
   110d0:	|      jsr 14fcc <trimStack>
   110d6:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   110d8:	|      movea.l 24(sp),a0
   110dc:	|      move.l 24(a0),d0
   110e0:	|      move.l d0,-(sp)
   110e2:	|      pea 1 <_start+0x1>
   110e6:	|      moveq #16,d0
   110e8:	|      add.l sp,d0
   110ea:	|      move.l d0,-(sp)
   110ec:	|      jsr 14648 <getValueType>
   110f2:	|      lea 12(sp),sp
   110f6:	|      tst.w d0
   110f8:	|  ,-- bne.s 110fe <builtIn_addCharacter+0x90>
   110fa:	|  |   moveq #1,d0
   110fc:	+--|-- bra.s 1116c <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   110fe:	|  '-> moveq #24,d0
   11100:	|      add.l 24(sp),d0
   11104:	|      move.l d0,-(sp)
   11106:	|      jsr 14fcc <trimStack>
   1110c:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1110e:	|      movea.l 24(sp),a0
   11112:	|      move.l 24(a0),d0
   11116:	|      move.l d0,-(sp)
   11118:	|      pea 7 <_start+0x7>
   1111c:	|      lea 8(sp),a0
   11120:	|      move.l a0,-(sp)
   11122:	|      jsr 14648 <getValueType>
   11128:	|      lea 12(sp),sp
   1112c:	|      tst.w d0
   1112e:	|  ,-- bne.s 11134 <builtIn_addCharacter+0xc6>
   11130:	|  |   moveq #1,d0
   11132:	+--|-- bra.s 1116c <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   11134:	|  '-> moveq #24,d0
   11136:	|      add.l 24(sp),d0
   1113a:	|      move.l d0,-(sp)
   1113c:	|      jsr 14fcc <trimStack>
   11142:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   11144:	|      movea.l (sp),a0
   11146:	|      move.l 4(sp),d1
   1114a:	|      move.l 8(sp),d0
   1114e:	|      move.l 12(sp),-(sp)
   11152:	|      move.l a0,-(sp)
   11154:	|      move.l d1,-(sp)
   11156:	|      move.l d0,-(sp)
   11158:	|      jsr 909c <addPerson>
   1115e:	|      lea 16(sp),sp
   11162:	|      tst.w d0
   11164:	|  ,-- beq.s 1116a <builtIn_addCharacter+0xfc>
   11166:	|  |   moveq #2,d0
   11168:	+--|-- bra.s 1116c <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   1116a:	|  '-> moveq #1,d0
}
   1116c:	'----> lea 16(sp),sp
   11170:	       rts

00011172 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   11172:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11174:	       movea.l 12(sp),a0
   11178:	       move.l 24(a0),d0
   1117c:	       move.l d0,-(sp)
   1117e:	       pea 7 <_start+0x7>
   11182:	       move.l sp,d0
   11184:	       addq.l #8,d0
   11186:	       move.l d0,-(sp)
   11188:	       jsr 14648 <getValueType>
   1118e:	       lea 12(sp),sp
   11192:	       tst.w d0
   11194:	   ,-- bne.s 1119a <builtIn_hideCharacter+0x28>
   11196:	   |   moveq #1,d0
   11198:	,--|-- bra.s 111ba <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   1119a:	|  '-> moveq #24,d0
   1119c:	|      add.l 12(sp),d0
   111a0:	|      move.l d0,-(sp)
   111a2:	|      jsr 14fcc <trimStack>
   111a8:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   111aa:	|      move.l (sp),d0
   111ac:	|      move.l d0,-(sp)
   111ae:	|      clr.l -(sp)
   111b0:	|      jsr bad6 <setShown>
   111b6:	|      addq.l #8,sp
	return BR_CONTINUE;
   111b8:	|      moveq #2,d0
}
   111ba:	'----> addq.l #4,sp
   111bc:	       rts

000111be <builtIn_showCharacter>:

builtIn(showCharacter)
{
   111be:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   111c0:	       movea.l 12(sp),a0
   111c4:	       move.l 24(a0),d0
   111c8:	       move.l d0,-(sp)
   111ca:	       pea 7 <_start+0x7>
   111ce:	       move.l sp,d0
   111d0:	       addq.l #8,d0
   111d2:	       move.l d0,-(sp)
   111d4:	       jsr 14648 <getValueType>
   111da:	       lea 12(sp),sp
   111de:	       tst.w d0
   111e0:	   ,-- bne.s 111e6 <builtIn_showCharacter+0x28>
   111e2:	   |   moveq #1,d0
   111e4:	,--|-- bra.s 11208 <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   111e6:	|  '-> moveq #24,d0
   111e8:	|      add.l 12(sp),d0
   111ec:	|      move.l d0,-(sp)
   111ee:	|      jsr 14fcc <trimStack>
   111f4:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   111f6:	|      move.l (sp),d0
   111f8:	|      move.l d0,-(sp)
   111fa:	|      pea 1 <_start+0x1>
   111fe:	|      jsr bad6 <setShown>
   11204:	|      addq.l #8,sp
	return BR_CONTINUE;
   11206:	|      moveq #2,d0
}
   11208:	'----> addq.l #4,sp
   1120a:	       rts

0001120c <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   1120c:	jsr 6a94 <killSpeechTimers>
	killMostPeople ();
   11212:	jsr a90e <killMostPeople>
	return BR_CONTINUE;
   11218:	moveq #2,d0
}
   1121a:	rts

0001121c <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   1121c:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1121e:	       movea.l 16(sp),a0
   11222:	       move.l 24(a0),d0
   11226:	       move.l d0,-(sp)
   11228:	       pea 1 <_start+0x1>
   1122c:	       move.l sp,d0
   1122e:	       addq.l #8,d0
   11230:	       move.l d0,-(sp)
   11232:	       jsr 14648 <getValueType>
   11238:	       lea 12(sp),sp
   1123c:	       tst.w d0
   1123e:	   ,-- bne.s 11244 <builtIn_setCharacterDrawMode+0x28>
   11240:	   |   moveq #1,d0
   11242:	,--|-- bra.s 1129e <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   11244:	|  '-> moveq #24,d0
   11246:	|      add.l 16(sp),d0
   1124a:	|      move.l d0,-(sp)
   1124c:	|      jsr 14fcc <trimStack>
   11252:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11254:	|      movea.l 16(sp),a0
   11258:	|      move.l 24(a0),d0
   1125c:	|      move.l d0,-(sp)
   1125e:	|      pea 7 <_start+0x7>
   11262:	|      moveq #12,d0
   11264:	|      add.l sp,d0
   11266:	|      move.l d0,-(sp)
   11268:	|      jsr 14648 <getValueType>
   1126e:	|      lea 12(sp),sp
   11272:	|      tst.w d0
   11274:	|  ,-- bne.s 1127a <builtIn_setCharacterDrawMode+0x5e>
   11276:	|  |   moveq #1,d0
   11278:	+--|-- bra.s 1129e <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   1127a:	|  '-> moveq #24,d0
   1127c:	|      add.l 16(sp),d0
   11280:	|      move.l d0,-(sp)
   11282:	|      jsr 14fcc <trimStack>
   11288:	|      addq.l #4,sp
	setDrawMode (di, obj);
   1128a:	|      move.l 4(sp),d1
   1128e:	|      move.l (sp),d0
   11290:	|      move.l d1,-(sp)
   11292:	|      move.l d0,-(sp)
   11294:	|      jsr b414 <setDrawMode>
   1129a:	|      addq.l #8,sp
	return BR_CONTINUE;
   1129c:	|      moveq #2,d0
}
   1129e:	'----> addq.l #8,sp
   112a0:	       rts

000112a2 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   112a2:	pea 199bd <talk.c.490538ff+0x58>
   112a8:	jsr 1710c <KPrintF>
   112ae:	addq.l #4,sp
	return BR_CONTINUE;
   112b0:	moveq #2,d0
}
   112b2:	rts

000112b4 <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   112b4:	pea 199f0 <talk.c.490538ff+0x8b>
   112ba:	jsr 1710c <KPrintF>
   112c0:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   112c2:	moveq #2,d0
}
   112c4:	rts

000112c6 <builtIn_setScale>:

builtIn(setScale)
{
   112c6:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   112c8:	       movea.l 16(sp),a0
   112cc:	       move.l 24(a0),d0
   112d0:	       move.l d0,-(sp)
   112d2:	       pea 1 <_start+0x1>
   112d6:	       move.l sp,d0
   112d8:	       addq.l #8,d0
   112da:	       move.l d0,-(sp)
   112dc:	       jsr 14648 <getValueType>
   112e2:	       lea 12(sp),sp
   112e6:	       tst.w d0
   112e8:	   ,-- bne.s 112ee <builtIn_setScale+0x28>
   112ea:	   |   moveq #1,d0
   112ec:	,--|-- bra.s 11350 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   112ee:	|  '-> moveq #24,d0
   112f0:	|      add.l 16(sp),d0
   112f4:	|      move.l d0,-(sp)
   112f6:	|      jsr 14fcc <trimStack>
   112fc:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   112fe:	|      movea.l 16(sp),a0
   11302:	|      move.l 24(a0),d0
   11306:	|      move.l d0,-(sp)
   11308:	|      pea 1 <_start+0x1>
   1130c:	|      moveq #12,d0
   1130e:	|      add.l sp,d0
   11310:	|      move.l d0,-(sp)
   11312:	|      jsr 14648 <getValueType>
   11318:	|      lea 12(sp),sp
   1131c:	|      tst.w d0
   1131e:	|  ,-- bne.s 11324 <builtIn_setScale+0x5e>
   11320:	|  |   moveq #1,d0
   11322:	+--|-- bra.s 11350 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   11324:	|  '-> moveq #24,d0
   11326:	|      add.l 16(sp),d0
   1132a:	|      move.l d0,-(sp)
   1132c:	|      jsr 14fcc <trimStack>
   11332:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   11334:	|      move.l (sp),d0
   11336:	|      move.l d0,d0
   11338:	|      movea.w d0,a1
   1133a:	|      move.l 4(sp),d0
   1133e:	|      move.l d0,d0
   11340:	|      movea.w d0,a0
   11342:	|      move.l a1,-(sp)
   11344:	|      move.l a0,-(sp)
   11346:	|      jsr baae <setScale>
   1134c:	|      addq.l #8,sp
	return BR_CONTINUE;
   1134e:	|      moveq #2,d0
}
   11350:	'----> addq.l #8,sp
   11352:	       rts

00011354 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   11354:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11356:	       movea.l 12(sp),a0
   1135a:	       move.l 24(a0),d0
   1135e:	       move.l d0,-(sp)
   11360:	       pea 7 <_start+0x7>
   11364:	       move.l sp,d0
   11366:	       addq.l #8,d0
   11368:	       move.l d0,-(sp)
   1136a:	       jsr 14648 <getValueType>
   11370:	       lea 12(sp),sp
   11374:	       tst.w d0
   11376:	   ,-- bne.s 1137c <builtIn_stopCharacter+0x28>
   11378:	   |   moveq #1,d0
   1137a:	,--|-- bra.s 113b4 <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   1137c:	|  '-> moveq #24,d0
   1137e:	|      add.l 12(sp),d0
   11382:	|      move.l d0,-(sp)
   11384:	|      jsr 14fcc <trimStack>
   1138a:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   1138c:	|      move.l (sp),d0
   1138e:	|      move.l d0,-(sp)
   11390:	|      jsr bbe2 <stopPerson>
   11396:	|      addq.l #4,sp
   11398:	|      movea.w d0,a0
   1139a:	|      moveq #28,d0
   1139c:	|      add.l 12(sp),d0
   113a0:	|      move.l a0,-(sp)
   113a2:	|      pea 1 <_start+0x1>
   113a6:	|      move.l d0,-(sp)
   113a8:	|      jsr 14f3a <setVariable>
   113ae:	|      lea 12(sp),sp
	return BR_CONTINUE;
   113b2:	|      moveq #2,d0
}
   113b4:	'----> addq.l #4,sp
   113b6:	       rts

000113b8 <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   113b8:	pea 19a2a <talk.c.490538ff+0xc5>
   113be:	jsr 1710c <KPrintF>
   113c4:	addq.l #4,sp
	return BR_CONTINUE;
   113c6:	moveq #2,d0
}
   113c8:	rts

000113ca <builtIn_animate>:

builtIn(animate)
{
   113ca:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   113cc:	       movea.l 16(sp),a0
   113d0:	       move.l 24(a0),d0
   113d4:	       move.l d0,-(sp)
   113d6:	       jsr 14b20 <getAnimationFromVar>
   113dc:	       addq.l #4,sp
   113de:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   113e2:	   ,-- bne.s 113e8 <builtIn_animate+0x1e>
   113e4:	   |   moveq #1,d0
   113e6:	,--|-- bra.s 11466 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   113e8:	|  '-> moveq #24,d0
   113ea:	|      add.l 16(sp),d0
   113ee:	|      move.l d0,-(sp)
   113f0:	|      jsr 14fcc <trimStack>
   113f6:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   113f8:	|      movea.l 16(sp),a0
   113fc:	|      move.l 24(a0),d0
   11400:	|      move.l d0,-(sp)
   11402:	|      pea 7 <_start+0x7>
   11406:	|      move.l sp,d0
   11408:	|      addq.l #8,d0
   1140a:	|      move.l d0,-(sp)
   1140c:	|      jsr 14648 <getValueType>
   11412:	|      lea 12(sp),sp
   11416:	|      tst.w d0
   11418:	|  ,-- bne.s 1141e <builtIn_animate+0x54>
   1141a:	|  |   moveq #1,d0
   1141c:	+--|-- bra.s 11466 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   1141e:	|  '-> moveq #24,d0
   11420:	|      add.l 16(sp),d0
   11424:	|      move.l d0,-(sp)
   11426:	|      jsr 14fcc <trimStack>
   1142c:	|      addq.l #4,sp
	animatePerson (obj, pp);
   1142e:	|      move.l (sp),d0
   11430:	|      move.l 4(sp),-(sp)
   11434:	|      move.l d0,-(sp)
   11436:	|      jsr 9312 <animatePerson>
   1143c:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   1143e:	|      move.l 4(sp),-(sp)
   11442:	|      jsr bc36 <timeForAnim>
   11448:	|      addq.l #4,sp
   1144a:	|      move.l d0,d1
   1144c:	|      moveq #28,d0
   1144e:	|      add.l 16(sp),d0
   11452:	|      move.l d1,-(sp)
   11454:	|      pea 1 <_start+0x1>
   11458:	|      move.l d0,-(sp)
   1145a:	|      jsr 14f3a <setVariable>
   11460:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11464:	|      moveq #2,d0
}
   11466:	'----> addq.l #8,sp
   11468:	       rts

0001146a <builtIn_setCostume>:

builtIn(setCostume)
{
   1146a:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   1146c:	       movea.l 16(sp),a0
   11470:	       move.l 24(a0),d0
   11474:	       move.l d0,-(sp)
   11476:	       jsr 142f4 <getCostumeFromVar>
   1147c:	       addq.l #4,sp
   1147e:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   11482:	   ,-- bne.s 11488 <builtIn_setCostume+0x1e>
   11484:	   |   moveq #1,d0
   11486:	,--|-- bra.s 114e0 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   11488:	|  '-> moveq #24,d0
   1148a:	|      add.l 16(sp),d0
   1148e:	|      move.l d0,-(sp)
   11490:	|      jsr 14fcc <trimStack>
   11496:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11498:	|      movea.l 16(sp),a0
   1149c:	|      move.l 24(a0),d0
   114a0:	|      move.l d0,-(sp)
   114a2:	|      pea 7 <_start+0x7>
   114a6:	|      move.l sp,d0
   114a8:	|      addq.l #8,d0
   114aa:	|      move.l d0,-(sp)
   114ac:	|      jsr 14648 <getValueType>
   114b2:	|      lea 12(sp),sp
   114b6:	|      tst.w d0
   114b8:	|  ,-- bne.s 114be <builtIn_setCostume+0x54>
   114ba:	|  |   moveq #1,d0
   114bc:	+--|-- bra.s 114e0 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   114be:	|  '-> moveq #24,d0
   114c0:	|      add.l 16(sp),d0
   114c4:	|      move.l d0,-(sp)
   114c6:	|      jsr 14fcc <trimStack>
   114cc:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   114ce:	|      move.l (sp),d0
   114d0:	|      move.l 4(sp),-(sp)
   114d4:	|      move.l d0,-(sp)
   114d6:	|      jsr 935c <animatePersonUsingPersona>
   114dc:	|      addq.l #8,sp
	return BR_CONTINUE;
   114de:	|      moveq #2,d0
}
   114e0:	'----> addq.l #8,sp
   114e2:	       rts

000114e4 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   114e4:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   114e6:	       movea.l 16(sp),a0
   114ea:	       move.l 24(a0),d0
   114ee:	       move.l d0,-(sp)
   114f0:	       pea 1 <_start+0x1>
   114f4:	       move.l sp,d0
   114f6:	       addq.l #8,d0
   114f8:	       move.l d0,-(sp)
   114fa:	       jsr 14648 <getValueType>
   11500:	       lea 12(sp),sp
   11504:	       tst.w d0
   11506:	   ,-- bne.s 1150c <builtIn_floatCharacter+0x28>
   11508:	   |   moveq #1,d0
   1150a:	,--|-- bra.s 11580 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   1150c:	|  '-> moveq #24,d0
   1150e:	|      add.l 16(sp),d0
   11512:	|      move.l d0,-(sp)
   11514:	|      jsr 14fcc <trimStack>
   1151a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1151c:	|      movea.l 16(sp),a0
   11520:	|      move.l 24(a0),d0
   11524:	|      move.l d0,-(sp)
   11526:	|      pea 7 <_start+0x7>
   1152a:	|      moveq #12,d0
   1152c:	|      add.l sp,d0
   1152e:	|      move.l d0,-(sp)
   11530:	|      jsr 14648 <getValueType>
   11536:	|      lea 12(sp),sp
   1153a:	|      tst.w d0
   1153c:	|  ,-- bne.s 11542 <builtIn_floatCharacter+0x5e>
   1153e:	|  |   moveq #1,d0
   11540:	+--|-- bra.s 11580 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   11542:	|  '-> moveq #24,d0
   11544:	|      add.l 16(sp),d0
   11548:	|      move.l d0,-(sp)
   1154a:	|      jsr 14fcc <trimStack>
   11550:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   11552:	|      move.l 4(sp),d1
   11556:	|      move.l (sp),d0
   11558:	|      move.l d1,-(sp)
   1155a:	|      move.l d0,-(sp)
   1155c:	|      jsr a4d0 <floatCharacter>
   11562:	|      addq.l #8,sp
   11564:	|      movea.w d0,a0
   11566:	|      moveq #28,d0
   11568:	|      add.l 16(sp),d0
   1156c:	|      move.l a0,-(sp)
   1156e:	|      pea 1 <_start+0x1>
   11572:	|      move.l d0,-(sp)
   11574:	|      jsr 14f3a <setVariable>
   1157a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1157e:	|      moveq #2,d0
}
   11580:	'----> addq.l #8,sp
   11582:	       rts

00011584 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   11584:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11586:	       movea.l 16(sp),a0
   1158a:	       move.l 24(a0),d0
   1158e:	       move.l d0,-(sp)
   11590:	       pea 1 <_start+0x1>
   11594:	       move.l sp,d0
   11596:	       addq.l #8,d0
   11598:	       move.l d0,-(sp)
   1159a:	       jsr 14648 <getValueType>
   115a0:	       lea 12(sp),sp
   115a4:	       tst.w d0
   115a6:	   ,-- bne.s 115ac <builtIn_setCharacterWalkSpeed+0x28>
   115a8:	   |   moveq #1,d0
   115aa:	,--|-- bra.s 11620 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   115ac:	|  '-> moveq #24,d0
   115ae:	|      add.l 16(sp),d0
   115b2:	|      move.l d0,-(sp)
   115b4:	|      jsr 14fcc <trimStack>
   115ba:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   115bc:	|      movea.l 16(sp),a0
   115c0:	|      move.l 24(a0),d0
   115c4:	|      move.l d0,-(sp)
   115c6:	|      pea 7 <_start+0x7>
   115ca:	|      moveq #12,d0
   115cc:	|      add.l sp,d0
   115ce:	|      move.l d0,-(sp)
   115d0:	|      jsr 14648 <getValueType>
   115d6:	|      lea 12(sp),sp
   115da:	|      tst.w d0
   115dc:	|  ,-- bne.s 115e2 <builtIn_setCharacterWalkSpeed+0x5e>
   115de:	|  |   moveq #1,d0
   115e0:	+--|-- bra.s 11620 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   115e2:	|  '-> moveq #24,d0
   115e4:	|      add.l 16(sp),d0
   115e8:	|      move.l d0,-(sp)
   115ea:	|      jsr 14fcc <trimStack>
   115f0:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   115f2:	|      move.l 4(sp),d1
   115f6:	|      move.l (sp),d0
   115f8:	|      move.l d1,-(sp)
   115fa:	|      move.l d0,-(sp)
   115fc:	|      jsr ba4a <setCharacterWalkSpeed>
   11602:	|      addq.l #8,sp
   11604:	|      movea.w d0,a0
   11606:	|      moveq #28,d0
   11608:	|      add.l 16(sp),d0
   1160c:	|      move.l a0,-(sp)
   1160e:	|      pea 1 <_start+0x1>
   11612:	|      move.l d0,-(sp)
   11614:	|      jsr 14f3a <setVariable>
   1161a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1161e:	|      moveq #2,d0
}
   11620:	'----> addq.l #8,sp
   11622:	       rts

00011624 <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   11624:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11626:	       movea.l 16(sp),a0
   1162a:	       move.l 24(a0),d0
   1162e:	       move.l d0,-(sp)
   11630:	       pea 1 <_start+0x1>
   11634:	       move.l sp,d0
   11636:	       addq.l #8,d0
   11638:	       move.l d0,-(sp)
   1163a:	       jsr 14648 <getValueType>
   11640:	       lea 12(sp),sp
   11644:	       tst.w d0
   11646:	   ,-- bne.s 1164c <builtIn_turnCharacter+0x28>
   11648:	   |   moveq #1,d0
   1164a:	,--|-- bra.s 116c0 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   1164c:	|  '-> moveq #24,d0
   1164e:	|      add.l 16(sp),d0
   11652:	|      move.l d0,-(sp)
   11654:	|      jsr 14fcc <trimStack>
   1165a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1165c:	|      movea.l 16(sp),a0
   11660:	|      move.l 24(a0),d0
   11664:	|      move.l d0,-(sp)
   11666:	|      pea 7 <_start+0x7>
   1166a:	|      moveq #12,d0
   1166c:	|      add.l sp,d0
   1166e:	|      move.l d0,-(sp)
   11670:	|      jsr 14648 <getValueType>
   11676:	|      lea 12(sp),sp
   1167a:	|      tst.w d0
   1167c:	|  ,-- bne.s 11682 <builtIn_turnCharacter+0x5e>
   1167e:	|  |   moveq #1,d0
   11680:	+--|-- bra.s 116c0 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   11682:	|  '-> moveq #24,d0
   11684:	|      add.l 16(sp),d0
   11688:	|      move.l d0,-(sp)
   1168a:	|      jsr 14fcc <trimStack>
   11690:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   11692:	|      move.l (sp),d1
   11694:	|      move.l 4(sp),d0
   11698:	|      move.l d1,-(sp)
   1169a:	|      move.l d0,-(sp)
   1169c:	|      jsr bcee <turnPersonToFace>
   116a2:	|      addq.l #8,sp
   116a4:	|      movea.w d0,a0
   116a6:	|      moveq #28,d0
   116a8:	|      add.l 16(sp),d0
   116ac:	|      move.l a0,-(sp)
   116ae:	|      pea 1 <_start+0x1>
   116b2:	|      move.l d0,-(sp)
   116b4:	|      jsr 14f3a <setVariable>
   116ba:	|      lea 12(sp),sp
	return BR_CONTINUE;
   116be:	|      moveq #2,d0
}
   116c0:	'----> addq.l #8,sp
   116c2:	       rts

000116c4 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   116c4:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   116c6:	       movea.l 16(sp),a0
   116ca:	       move.l 24(a0),d0
   116ce:	       move.l d0,-(sp)
   116d0:	       pea 1 <_start+0x1>
   116d4:	       move.l sp,d0
   116d6:	       addq.l #8,d0
   116d8:	       move.l d0,-(sp)
   116da:	       jsr 14648 <getValueType>
   116e0:	       lea 12(sp),sp
   116e4:	       tst.w d0
   116e6:	   ,-- bne.s 116ec <builtIn_setCharacterExtra+0x28>
   116e8:	   |   moveq #1,d0
   116ea:	,--|-- bra.s 11760 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   116ec:	|  '-> moveq #24,d0
   116ee:	|      add.l 16(sp),d0
   116f2:	|      move.l d0,-(sp)
   116f4:	|      jsr 14fcc <trimStack>
   116fa:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   116fc:	|      movea.l 16(sp),a0
   11700:	|      move.l 24(a0),d0
   11704:	|      move.l d0,-(sp)
   11706:	|      pea 7 <_start+0x7>
   1170a:	|      moveq #12,d0
   1170c:	|      add.l sp,d0
   1170e:	|      move.l d0,-(sp)
   11710:	|      jsr 14648 <getValueType>
   11716:	|      lea 12(sp),sp
   1171a:	|      tst.w d0
   1171c:	|  ,-- bne.s 11722 <builtIn_setCharacterExtra+0x5e>
   1171e:	|  |   moveq #1,d0
   11720:	+--|-- bra.s 11760 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   11722:	|  '-> moveq #24,d0
   11724:	|      add.l 16(sp),d0
   11728:	|      move.l d0,-(sp)
   1172a:	|      jsr 14fcc <trimStack>
   11730:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   11732:	|      move.l (sp),d1
   11734:	|      move.l 4(sp),d0
   11738:	|      move.l d1,-(sp)
   1173a:	|      move.l d0,-(sp)
   1173c:	|      jsr ba78 <setPersonExtra>
   11742:	|      addq.l #8,sp
   11744:	|      movea.w d0,a0
   11746:	|      moveq #28,d0
   11748:	|      add.l 16(sp),d0
   1174c:	|      move.l a0,-(sp)
   1174e:	|      pea 1 <_start+0x1>
   11752:	|      move.l d0,-(sp)
   11754:	|      jsr 14f3a <setVariable>
   1175a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1175e:	|      moveq #2,d0
}
   11760:	'----> addq.l #8,sp
   11762:	       rts

00011764 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   11764:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11766:	       movea.l 12(sp),a0
   1176a:	       move.l 24(a0),d0
   1176e:	       move.l d0,-(sp)
   11770:	       pea 7 <_start+0x7>
   11774:	       move.l sp,d0
   11776:	       addq.l #8,d0
   11778:	       move.l d0,-(sp)
   1177a:	       jsr 14648 <getValueType>
   11780:	       lea 12(sp),sp
   11784:	       tst.w d0
   11786:	   ,-- bne.s 1178c <builtIn_removeCharacter+0x28>
   11788:	   |   moveq #1,d0
   1178a:	,--|-- bra.s 117aa <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   1178c:	|  '-> moveq #24,d0
   1178e:	|      add.l 12(sp),d0
   11792:	|      move.l d0,-(sp)
   11794:	|      jsr 14fcc <trimStack>
   1179a:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   1179c:	|      move.l (sp),d0
   1179e:	|      move.l d0,-(sp)
   117a0:	|      jsr ac78 <removeOneCharacter>
   117a6:	|      addq.l #4,sp
	return BR_CONTINUE;
   117a8:	|      moveq #2,d0
}
   117aa:	'----> addq.l #4,sp
   117ac:	       rts

000117ae <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   117ae:	                lea -28(sp),sp
   117b2:	                move.l d2,-(sp)
   117b4:	                move.l 44(sp),d1
   117b8:	                move.l 48(sp),d0
   117bc:	                move.w d1,d1
   117be:	                move.w d1,6(sp)
   117c2:	                move.w d0,d0
   117c4:	                move.w d0,4(sp)
	switch (numParams) {
   117c8:	                moveq #2,d0
   117ca:	                cmp.l 36(sp),d0
   117ce:	      ,-------- beq.w 11910 <moveChr+0x162>
   117d2:	      |         moveq #3,d0
   117d4:	      |         cmp.l 36(sp),d0
   117d8:	,-----|-------- bne.w 11a44 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   117dc:	|     |         movea.l 40(sp),a0
   117e0:	|     |         move.l 24(a0),d0
   117e4:	|     |         move.l d0,-(sp)
   117e6:	|     |         pea 1 <_start+0x1>
   117ea:	|     |         lea 20(sp),a0
   117ee:	|     |         move.l a0,-(sp)
   117f0:	|     |         jsr 14648 <getValueType>
   117f6:	|     |         lea 12(sp),sp
   117fa:	|     |         tst.w d0
   117fc:	|     |     ,-- bne.s 11804 <moveChr+0x56>
   117fe:	|     |     |   moveq #1,d0
   11800:	|  ,--|-----|-- bra.w 11a54 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11804:	|  |  |     '-> moveq #24,d0
   11806:	|  |  |         add.l 40(sp),d0
   1180a:	|  |  |         move.l d0,-(sp)
   1180c:	|  |  |         jsr 14fcc <trimStack>
   11812:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11814:	|  |  |         movea.l 40(sp),a0
   11818:	|  |  |         move.l 24(a0),d0
   1181c:	|  |  |         move.l d0,-(sp)
   1181e:	|  |  |         pea 1 <_start+0x1>
   11822:	|  |  |         lea 24(sp),a0
   11826:	|  |  |         move.l a0,-(sp)
   11828:	|  |  |         jsr 14648 <getValueType>
   1182e:	|  |  |         lea 12(sp),sp
   11832:	|  |  |         tst.w d0
   11834:	|  |  |     ,-- bne.s 1183c <moveChr+0x8e>
   11836:	|  |  |     |   moveq #1,d0
   11838:	|  +--|-----|-- bra.w 11a54 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   1183c:	|  |  |     '-> moveq #24,d0
   1183e:	|  |  |         add.l 40(sp),d0
   11842:	|  |  |         move.l d0,-(sp)
   11844:	|  |  |         jsr 14fcc <trimStack>
   1184a:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1184c:	|  |  |         movea.l 40(sp),a0
   11850:	|  |  |         move.l 24(a0),d0
   11854:	|  |  |         move.l d0,-(sp)
   11856:	|  |  |         pea 7 <_start+0x7>
   1185a:	|  |  |         lea 16(sp),a0
   1185e:	|  |  |         move.l a0,-(sp)
   11860:	|  |  |         jsr 14648 <getValueType>
   11866:	|  |  |         lea 12(sp),sp
   1186a:	|  |  |         tst.w d0
   1186c:	|  |  |     ,-- bne.s 11874 <moveChr+0xc6>
   1186e:	|  |  |     |   moveq #1,d0
   11870:	|  +--|-----|-- bra.w 11a54 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11874:	|  |  |     '-> moveq #24,d0
   11876:	|  |  |         add.l 40(sp),d0
   1187a:	|  |  |         move.l d0,-(sp)
   1187c:	|  |  |         jsr 14fcc <trimStack>
   11882:	|  |  |         addq.l #4,sp

			if (force) {
   11884:	|  |  |         tst.w 6(sp)
   11888:	|  |  |     ,-- beq.s 118b8 <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   1188a:	|  |  |     |   movea.l 8(sp),a0
   1188e:	|  |  |     |   move.l 12(sp),d1
   11892:	|  |  |     |   move.l 16(sp),d0
   11896:	|  |  |     |   pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb4dc3>
   1189a:	|  |  |     |   move.l 44(sp),-(sp)
   1189e:	|  |  |     |   move.l a0,-(sp)
   118a0:	|  |  |     |   move.l d1,-(sp)
   118a2:	|  |  |     |   move.l d0,-(sp)
   118a4:	|  |  |     |   jsr a4f4 <forceWalkingPerson>
   118aa:	|  |  |     |   lea 20(sp),sp
   118ae:	|  |  |     |   tst.w d0
   118b0:	|  |  |  ,--|-- beq.s 1190a <moveChr+0x15c>
   118b2:	|  |  |  |  |   moveq #3,d0
   118b4:	|  +--|--|--|-- bra.w 11a54 <moveChr+0x2a6>
			} else if (immediate) {
   118b8:	|  |  |  |  '-> tst.w 4(sp)
   118bc:	|  |  |  |  ,-- beq.s 118dc <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   118be:	|  |  |  |  |   movea.l 8(sp),a0
   118c2:	|  |  |  |  |   move.l 12(sp),d1
   118c6:	|  |  |  |  |   move.l 16(sp),d0
   118ca:	|  |  |  |  |   move.l a0,-(sp)
   118cc:	|  |  |  |  |   move.l d1,-(sp)
   118ce:	|  |  |  |  |   move.l d0,-(sp)
   118d0:	|  |  |  |  |   jsr a7fc <jumpPerson>
   118d6:	|  |  |  |  |   lea 12(sp),sp
   118da:	|  |  |  +--|-- bra.s 1190a <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   118dc:	|  |  |  |  '-> movea.l 8(sp),a0
   118e0:	|  |  |  |      move.l 12(sp),d1
   118e4:	|  |  |  |      move.l 16(sp),d0
   118e8:	|  |  |  |      pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb4dc3>
   118ec:	|  |  |  |      move.l 44(sp),-(sp)
   118f0:	|  |  |  |      move.l a0,-(sp)
   118f2:	|  |  |  |      move.l d1,-(sp)
   118f4:	|  |  |  |      move.l d0,-(sp)
   118f6:	|  |  |  |      jsr a9cc <makeWalkingPerson>
   118fc:	|  |  |  |      lea 20(sp),sp
   11900:	|  |  |  |      tst.w d0
   11902:	|  |  |  +----- beq.s 1190a <moveChr+0x15c>
   11904:	|  |  |  |      moveq #3,d0
   11906:	|  +--|--|----- bra.w 11a54 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   1190a:	|  |  |  '----> moveq #2,d0
   1190c:	|  +--|-------- bra.w 11a54 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11910:	|  |  '-------> movea.l 40(sp),a0
   11914:	|  |            move.l 24(a0),d0
   11918:	|  |            move.l d0,-(sp)
   1191a:	|  |            pea 7 <_start+0x7>
   1191e:	|  |            moveq #32,d0
   11920:	|  |            add.l sp,d0
   11922:	|  |            move.l d0,-(sp)
   11924:	|  |            jsr 14648 <getValueType>
   1192a:	|  |            lea 12(sp),sp
   1192e:	|  |            tst.w d0
   11930:	|  |        ,-- bne.s 11938 <moveChr+0x18a>
   11932:	|  |        |   moveq #1,d0
   11934:	|  +--------|-- bra.w 11a54 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11938:	|  |        '-> moveq #24,d0
   1193a:	|  |            add.l 40(sp),d0
   1193e:	|  |            move.l d0,-(sp)
   11940:	|  |            jsr 14fcc <trimStack>
   11946:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11948:	|  |            movea.l 40(sp),a0
   1194c:	|  |            move.l 24(a0),d0
   11950:	|  |            move.l d0,-(sp)
   11952:	|  |            pea 7 <_start+0x7>
   11956:	|  |            lea 28(sp),a0
   1195a:	|  |            move.l a0,-(sp)
   1195c:	|  |            jsr 14648 <getValueType>
   11962:	|  |            lea 12(sp),sp
   11966:	|  |            tst.w d0
   11968:	|  |        ,-- bne.s 11970 <moveChr+0x1c2>
   1196a:	|  |        |   moveq #1,d0
   1196c:	|  +--------|-- bra.w 11a54 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11970:	|  |        '-> moveq #24,d0
   11972:	|  |            add.l 40(sp),d0
   11976:	|  |            move.l d0,-(sp)
   11978:	|  |            jsr 14fcc <trimStack>
   1197e:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   11980:	|  |            move.l 24(sp),d0
   11984:	|  |            move.l d0,-(sp)
   11986:	|  |            jsr 1590a <getRegionForObject>
   1198c:	|  |            addq.l #4,sp
   1198e:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   11992:	|  |        ,-- bne.s 1199a <moveChr+0x1ec>
   11994:	|  |        |   moveq #2,d0
   11996:	|  +--------|-- bra.w 11a54 <moveChr+0x2a6>

			if (force)
   1199a:	|  |        '-> tst.w 6(sp)
   1199e:	|  |        ,-- beq.s 119da <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   119a0:	|  |        |   movea.l 28(sp),a0
   119a4:	|  |        |   move.l 24(a0),d2
   119a8:	|  |        |   movea.l 20(sp),a1
   119ac:	|  |        |   movea.l 28(sp),a0
   119b0:	|  |        |   move.l 20(a0),d1
   119b4:	|  |        |   movea.l 28(sp),a0
   119b8:	|  |        |   move.l 16(a0),d0
   119bc:	|  |        |   move.l d2,-(sp)
   119be:	|  |        |   move.l 44(sp),-(sp)
   119c2:	|  |        |   move.l a1,-(sp)
   119c4:	|  |        |   move.l d1,-(sp)
   119c6:	|  |        |   move.l d0,-(sp)
   119c8:	|  |        |   jsr a4f4 <forceWalkingPerson>
   119ce:	|  |        |   lea 20(sp),sp
   119d2:	|  |        |   tst.w d0
   119d4:	|  |     ,--|-- beq.s 11a40 <moveChr+0x292>
   119d6:	|  |     |  |   moveq #3,d0
   119d8:	|  +-----|--|-- bra.s 11a54 <moveChr+0x2a6>
			}
			else if (immediate)
   119da:	|  |     |  '-> tst.w 4(sp)
   119de:	|  |     |  ,-- beq.s 11a06 <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   119e0:	|  |     |  |   movea.l 20(sp),a1
   119e4:	|  |     |  |   movea.l 28(sp),a0
   119e8:	|  |     |  |   move.l 20(a0),d1
   119ec:	|  |     |  |   movea.l 28(sp),a0
   119f0:	|  |     |  |   move.l 16(a0),d0
   119f4:	|  |     |  |   move.l a1,-(sp)
   119f6:	|  |     |  |   move.l d1,-(sp)
   119f8:	|  |     |  |   move.l d0,-(sp)
   119fa:	|  |     |  |   jsr a7fc <jumpPerson>
   11a00:	|  |     |  |   lea 12(sp),sp
   11a04:	|  |     +--|-- bra.s 11a40 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11a06:	|  |     |  '-> movea.l 28(sp),a0
   11a0a:	|  |     |      move.l 24(a0),d2
   11a0e:	|  |     |      movea.l 20(sp),a1
   11a12:	|  |     |      movea.l 28(sp),a0
   11a16:	|  |     |      move.l 20(a0),d1
   11a1a:	|  |     |      movea.l 28(sp),a0
   11a1e:	|  |     |      move.l 16(a0),d0
   11a22:	|  |     |      move.l d2,-(sp)
   11a24:	|  |     |      move.l 44(sp),-(sp)
   11a28:	|  |     |      move.l a1,-(sp)
   11a2a:	|  |     |      move.l d1,-(sp)
   11a2c:	|  |     |      move.l d0,-(sp)
   11a2e:	|  |     |      jsr a9cc <makeWalkingPerson>
   11a34:	|  |     |      lea 20(sp),sp
   11a38:	|  |     |      tst.w d0
   11a3a:	|  |     +----- beq.s 11a40 <moveChr+0x292>
   11a3c:	|  |     |      moveq #3,d0
   11a3e:	|  +-----|----- bra.s 11a54 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11a40:	|  |     '----> moveq #2,d0
   11a42:	|  +----------- bra.s 11a54 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   11a44:	'--|----------> pea 19a48 <talk.c.490538ff+0xe3>
   11a4a:	   |            jsr 1710c <KPrintF>
   11a50:	   |            addq.l #4,sp
			return BR_ERROR;
   11a52:	   |            moveq #1,d0
	}
}
   11a54:	   '----------> move.l (sp)+,d2
   11a56:	                lea 28(sp),sp
   11a5a:	                rts

00011a5c <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   11a5c:	clr.l -(sp)
   11a5e:	clr.l -(sp)
   11a60:	move.l 16(sp),-(sp)
   11a64:	move.l 16(sp),-(sp)
   11a68:	jsr 117ae <moveChr>
   11a6e:	lea 16(sp),sp
}
   11a72:	rts

00011a74 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   11a74:	clr.l -(sp)
   11a76:	pea 1 <_start+0x1>
   11a7a:	move.l 16(sp),-(sp)
   11a7e:	move.l 16(sp),-(sp)
   11a82:	jsr 117ae <moveChr>
   11a88:	lea 16(sp),sp
}
   11a8c:	rts

00011a8e <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   11a8e:	pea 1 <_start+0x1>
   11a92:	clr.l -(sp)
   11a94:	move.l 16(sp),-(sp)
   11a98:	move.l 16(sp),-(sp)
   11a9c:	jsr 117ae <moveChr>
   11aa2:	lea 16(sp),sp
}
   11aa6:	rts

00011aa8 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   11aa8:	jsr 8194 <clearStatusBar>
	return BR_CONTINUE;
   11aae:	moveq #2,d0
}
   11ab0:	rts

00011ab2 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   11ab2:	jsr 823c <killLastStatus>
	return BR_CONTINUE;
   11ab8:	moveq #2,d0
}
   11aba:	rts

00011abc <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   11abc:	jsr 812a <addStatusBar>
	return BR_CONTINUE;
   11ac2:	moveq #2,d0
}
   11ac4:	rts

00011ac6 <builtIn_statusText>:

builtIn(statusText)
{
   11ac6:	       subq.l #8,sp
   11ac8:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11aca:	       movea.l 20(sp),a0
   11ace:	       move.l 24(a0),d0
   11ad2:	       move.l d0,-(sp)
   11ad4:	       jsr 14c1e <getTextFromAnyVar>
   11ada:	       addq.l #4,sp
   11adc:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   11ae0:	   ,-- bne.s 11ae6 <builtIn_statusText+0x20>
   11ae2:	   |   moveq #1,d0
   11ae4:	,--|-- bra.s 11b1a <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   11ae6:	|  '-> moveq #24,d0
   11ae8:	|      add.l 20(sp),d0
   11aec:	|      move.l d0,-(sp)
   11aee:	|      jsr 14fcc <trimStack>
   11af4:	|      addq.l #4,sp
	setStatusBar(newText);
   11af6:	|      move.l 8(sp),-(sp)
   11afa:	|      jsr 84bc <setStatusBar>
   11b00:	|      addq.l #4,sp
	FreeVec(newText);
   11b02:	|      move.l 8(sp),4(sp)
   11b08:	|      move.l 1c810 <SysBase>,d0
   11b0e:	|      movea.l d0,a6
   11b10:	|      movea.l 4(sp),a1
   11b14:	|      jsr -690(a6)
	return BR_CONTINUE;
   11b18:	|      moveq #2,d0
}
   11b1a:	'----> movea.l (sp)+,a6
   11b1c:	       addq.l #8,sp
   11b1e:	       rts

00011b20 <builtIn_lightStatus>:

builtIn(lightStatus)
{
   11b20:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11b22:	       movea.l 12(sp),a0
   11b26:	       move.l 24(a0),d0
   11b2a:	       move.l d0,-(sp)
   11b2c:	       pea 1 <_start+0x1>
   11b30:	       move.l sp,d0
   11b32:	       addq.l #8,d0
   11b34:	       move.l d0,-(sp)
   11b36:	       jsr 14648 <getValueType>
   11b3c:	       lea 12(sp),sp
   11b40:	       tst.w d0
   11b42:	   ,-- bne.s 11b48 <builtIn_lightStatus+0x28>
   11b44:	   |   moveq #1,d0
   11b46:	,--|-- bra.s 11b66 <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   11b48:	|  '-> moveq #24,d0
   11b4a:	|      add.l 12(sp),d0
   11b4e:	|      move.l d0,-(sp)
   11b50:	|      jsr 14fcc <trimStack>
   11b56:	|      addq.l #4,sp
	setLitStatus (val);
   11b58:	|      move.l (sp),d0
   11b5a:	|      move.l d0,-(sp)
   11b5c:	|      jsr 84ac <setLitStatus>
   11b62:	|      addq.l #4,sp
	return BR_CONTINUE;
   11b64:	|      moveq #2,d0
}
   11b66:	'----> addq.l #4,sp
   11b68:	       rts

00011b6a <builtIn_positionStatus>:

builtIn(positionStatus)
{
   11b6a:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11b6c:	       movea.l 16(sp),a0
   11b70:	       move.l 24(a0),d0
   11b74:	       move.l d0,-(sp)
   11b76:	       pea 1 <_start+0x1>
   11b7a:	       move.l sp,d0
   11b7c:	       addq.l #8,d0
   11b7e:	       move.l d0,-(sp)
   11b80:	       jsr 14648 <getValueType>
   11b86:	       lea 12(sp),sp
   11b8a:	       tst.w d0
   11b8c:	   ,-- bne.s 11b92 <builtIn_positionStatus+0x28>
   11b8e:	   |   moveq #1,d0
   11b90:	,--|-- bra.s 11bec <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11b92:	|  '-> moveq #24,d0
   11b94:	|      add.l 16(sp),d0
   11b98:	|      move.l d0,-(sp)
   11b9a:	|      jsr 14fcc <trimStack>
   11ba0:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11ba2:	|      movea.l 16(sp),a0
   11ba6:	|      move.l 24(a0),d0
   11baa:	|      move.l d0,-(sp)
   11bac:	|      pea 1 <_start+0x1>
   11bb0:	|      moveq #12,d0
   11bb2:	|      add.l sp,d0
   11bb4:	|      move.l d0,-(sp)
   11bb6:	|      jsr 14648 <getValueType>
   11bbc:	|      lea 12(sp),sp
   11bc0:	|      tst.w d0
   11bc2:	|  ,-- bne.s 11bc8 <builtIn_positionStatus+0x5e>
   11bc4:	|  |   moveq #1,d0
   11bc6:	+--|-- bra.s 11bec <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11bc8:	|  '-> moveq #24,d0
   11bca:	|      add.l 16(sp),d0
   11bce:	|      move.l d0,-(sp)
   11bd0:	|      jsr 14fcc <trimStack>
   11bd6:	|      addq.l #4,sp
	positionStatus (x, y);
   11bd8:	|      move.l (sp),d1
   11bda:	|      move.l 4(sp),d0
   11bde:	|      move.l d1,-(sp)
   11be0:	|      move.l d0,-(sp)
   11be2:	|      jsr 829e <positionStatus>
   11be8:	|      addq.l #8,sp
	return BR_CONTINUE;
   11bea:	|      moveq #2,d0
}
   11bec:	'----> addq.l #8,sp
   11bee:	       rts

00011bf0 <builtIn_alignStatus>:

builtIn(alignStatus)
{
   11bf0:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11bf2:	       movea.l 12(sp),a0
   11bf6:	       move.l 24(a0),d0
   11bfa:	       move.l d0,-(sp)
   11bfc:	       pea 1 <_start+0x1>
   11c00:	       move.l sp,d0
   11c02:	       addq.l #8,d0
   11c04:	       move.l d0,-(sp)
   11c06:	       jsr 14648 <getValueType>
   11c0c:	       lea 12(sp),sp
   11c10:	       tst.w d0
   11c12:	   ,-- bne.s 11c18 <builtIn_alignStatus+0x28>
   11c14:	   |   moveq #1,d0
   11c16:	,--|-- bra.s 11c38 <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   11c18:	|  '-> moveq #24,d0
   11c1a:	|      add.l 12(sp),d0
   11c1e:	|      move.l d0,-(sp)
   11c20:	|      jsr 14fcc <trimStack>
   11c26:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   11c28:	|      move.l (sp),d0
   11c2a:	|      movea.l 1c18e <nowStatus>,a0
   11c30:	|      move.l d0,d0
   11c32:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   11c36:	|      moveq #2,d0
}
   11c38:	'----> addq.l #4,sp
   11c3a:	       rts

00011c3c <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   11c3c:	             tst.l 4(sp)
   11c40:	      ,----- beq.s 11c4c <getFuncNumForCallback+0x10>
   11c42:	      |      moveq #1,d0
   11c44:	      |      cmp.l 4(sp),d0
   11c48:	      |  ,-- beq.s 11c52 <getFuncNumForCallback+0x16>
   11c4a:	   ,--|--|-- bra.s 11c88 <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   11c4c:	   |  '--|-> clr.l 12(sp)
			break;
   11c50:	,--|-----|-- bra.s 11c9a <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   11c52:	|  |     '-> movea.l 8(sp),a0
   11c56:	|  |         move.l 24(a0),d0
   11c5a:	|  |         move.l d0,-(sp)
   11c5c:	|  |         pea 2 <_start+0x2>
   11c60:	|  |         move.l 20(sp),-(sp)
   11c64:	|  |         jsr 14648 <getValueType>
   11c6a:	|  |         lea 12(sp),sp
   11c6e:	|  |         tst.w d0
   11c70:	|  |     ,-- bne.s 11c76 <getFuncNumForCallback+0x3a>
   11c72:	|  |     |   clr.w d0
   11c74:	|  |  ,--|-- bra.s 11c9c <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   11c76:	|  |  |  '-> moveq #24,d0
   11c78:	|  |  |      add.l 8(sp),d0
   11c7c:	|  |  |      move.l d0,-(sp)
   11c7e:	|  |  |      jsr 14fcc <trimStack>
   11c84:	|  |  |      addq.l #4,sp
			break;
   11c86:	+--|--|----- bra.s 11c9a <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   11c88:	|  '--|----> pea 19a7e <talk.c.490538ff+0x119>
   11c8e:	|     |      jsr 1710c <KPrintF>
   11c94:	|     |      addq.l #4,sp
			return FALSE;
   11c96:	|     |      clr.w d0
   11c98:	|     +----- bra.s 11c9c <getFuncNumForCallback+0x60>
	}
	return TRUE;
   11c9a:	'-----|----> moveq #1,d0
}
   11c9c:	      '----> rts

00011c9e <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   11c9e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11ca0:	       move.l sp,d0
   11ca2:	       move.l d0,-(sp)
   11ca4:	       move.l 16(sp),-(sp)
   11ca8:	       move.l 16(sp),-(sp)
   11cac:	       jsr 11c3c <getFuncNumForCallback>
   11cb2:	       lea 12(sp),sp
   11cb6:	       tst.w d0
   11cb8:	,----- beq.s 11cc8 <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   11cba:	|      movea.l 1c180 <currentEvents>,a0
   11cc0:	|      move.l (sp),d0
   11cc2:	|      move.l d0,(a0)
		return BR_CONTINUE;
   11cc4:	|      moveq #2,d0
   11cc6:	|  ,-- bra.s 11cca <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   11cc8:	'--|-> moveq #1,d0
}
   11cca:	   '-> addq.l #4,sp
   11ccc:	       rts

00011cce <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   11cce:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11cd0:	       move.l sp,d0
   11cd2:	       move.l d0,-(sp)
   11cd4:	       move.l 16(sp),-(sp)
   11cd8:	       move.l 16(sp),-(sp)
   11cdc:	       jsr 11c3c <getFuncNumForCallback>
   11ce2:	       lea 12(sp),sp
   11ce6:	       tst.w d0
   11ce8:	,----- beq.s 11cfa <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   11cea:	|      movea.l 1c180 <currentEvents>,a0
   11cf0:	|      move.l (sp),d0
   11cf2:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   11cf6:	|      moveq #2,d0
   11cf8:	|  ,-- bra.s 11cfc <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   11cfa:	'--|-> moveq #1,d0
}
   11cfc:	   '-> addq.l #4,sp
   11cfe:	       rts

00011d00 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   11d00:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11d02:	       move.l sp,d0
   11d04:	       move.l d0,-(sp)
   11d06:	       move.l 16(sp),-(sp)
   11d0a:	       move.l 16(sp),-(sp)
   11d0e:	       jsr 11c3c <getFuncNumForCallback>
   11d14:	       lea 12(sp),sp
   11d18:	       tst.w d0
   11d1a:	,----- beq.s 11d2c <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   11d1c:	|      movea.l 1c180 <currentEvents>,a0
   11d22:	|      move.l (sp),d0
   11d24:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   11d28:	|      moveq #2,d0
   11d2a:	|  ,-- bra.s 11d2e <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   11d2c:	'--|-> moveq #1,d0
}
   11d2e:	   '-> addq.l #4,sp
   11d30:	       rts

00011d32 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   11d32:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11d34:	       move.l sp,d0
   11d36:	       move.l d0,-(sp)
   11d38:	       move.l 16(sp),-(sp)
   11d3c:	       move.l 16(sp),-(sp)
   11d40:	       jsr 11c3c <getFuncNumForCallback>
   11d46:	       lea 12(sp),sp
   11d4a:	       tst.w d0
   11d4c:	,----- beq.s 11d5e <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   11d4e:	|      movea.l 1c180 <currentEvents>,a0
   11d54:	|      move.l (sp),d0
   11d56:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   11d5a:	|      moveq #2,d0
   11d5c:	|  ,-- bra.s 11d60 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   11d5e:	'--|-> moveq #1,d0
}
   11d60:	   '-> addq.l #4,sp
   11d62:	       rts

00011d64 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   11d64:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11d66:	       move.l sp,d0
   11d68:	       move.l d0,-(sp)
   11d6a:	       move.l 16(sp),-(sp)
   11d6e:	       move.l 16(sp),-(sp)
   11d72:	       jsr 11c3c <getFuncNumForCallback>
   11d78:	       lea 12(sp),sp
   11d7c:	       tst.w d0
   11d7e:	,----- beq.s 11d90 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
   11d80:	|      movea.l 1c180 <currentEvents>,a0
   11d86:	|      move.l (sp),d0
   11d88:	|      move.l d0,20(a0)
		return BR_CONTINUE;
   11d8c:	|      moveq #2,d0
   11d8e:	|  ,-- bra.s 11d92 <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
   11d90:	'--|-> moveq #1,d0
}
   11d92:	   '-> addq.l #4,sp
   11d94:	       rts

00011d96 <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   11d96:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11d98:	       move.l sp,d0
   11d9a:	       move.l d0,-(sp)
   11d9c:	       move.l 16(sp),-(sp)
   11da0:	       move.l 16(sp),-(sp)
   11da4:	       jsr 11c3c <getFuncNumForCallback>
   11daa:	       lea 12(sp),sp
   11dae:	       tst.w d0
   11db0:	,----- beq.s 11dc2 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   11db2:	|      movea.l 1c180 <currentEvents>,a0
   11db8:	|      move.l (sp),d0
   11dba:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   11dbe:	|      moveq #2,d0
   11dc0:	|  ,-- bra.s 11dc4 <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   11dc2:	'--|-> moveq #1,d0
}
   11dc4:	   '-> addq.l #4,sp
   11dc6:	       rts

00011dc8 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   11dc8:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11dca:	       move.l sp,d0
   11dcc:	       move.l d0,-(sp)
   11dce:	       move.l 16(sp),-(sp)
   11dd2:	       move.l 16(sp),-(sp)
   11dd6:	       jsr 11c3c <getFuncNumForCallback>
   11ddc:	       lea 12(sp),sp
   11de0:	       tst.w d0
   11de2:	,----- beq.s 11df4 <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   11de4:	|      movea.l 1c180 <currentEvents>,a0
   11dea:	|      move.l (sp),d0
   11dec:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   11df0:	|      moveq #2,d0
   11df2:	|  ,-- bra.s 11df6 <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   11df4:	'--|-> moveq #1,d0
}
   11df6:	   '-> addq.l #4,sp
   11df8:	       rts

00011dfa <builtIn_spawnSub>:

builtIn (spawnSub)
{
   11dfa:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11dfc:	          move.l sp,d0
   11dfe:	          move.l d0,-(sp)
   11e00:	          move.l 16(sp),-(sp)
   11e04:	          move.l 16(sp),-(sp)
   11e08:	          jsr 11c3c <getFuncNumForCallback>
   11e0e:	          lea 12(sp),sp
   11e12:	          tst.w d0
   11e14:	,-------- beq.s 11e40 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   11e16:	|         move.l 1c7e0 <noStack>,d1
   11e1c:	|         move.l (sp),d0
   11e1e:	|         pea 1 <_start+0x1>
   11e22:	|         move.l d1,-(sp)
   11e24:	|         clr.l -(sp)
   11e26:	|         clr.l -(sp)
   11e28:	|         move.l d0,-(sp)
   11e2a:	|         jsr 7368 <startNewFunctionNum>
   11e30:	|         lea 20(sp),sp
   11e34:	|         tst.l d0
   11e36:	|     ,-- bne.s 11e3c <builtIn_spawnSub+0x42>
   11e38:	|     |   moveq #1,d0
   11e3a:	|  ,--|-- bra.s 11e42 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   11e3c:	|  |  '-> moveq #2,d0
   11e3e:	|  +----- bra.s 11e42 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   11e40:	'--|----> moveq #1,d0
}
   11e42:	   '----> addq.l #4,sp
   11e44:	          rts

00011e46 <builtIn_cancelSub>:

builtIn (cancelSub)
{
   11e46:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11e48:	          move.l sp,d0
   11e4a:	          addq.l #4,d0
   11e4c:	          move.l d0,-(sp)
   11e4e:	          move.l 20(sp),-(sp)
   11e52:	          move.l 20(sp),-(sp)
   11e56:	          jsr 11c3c <getFuncNumForCallback>
   11e5c:	          lea 12(sp),sp
   11e60:	          tst.w d0
   11e62:	,-------- beq.s 11e98 <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   11e64:	|         move.l 4(sp),d1
   11e68:	|         move.l sp,d0
   11e6a:	|         addq.l #2,d0
   11e6c:	|         move.l d0,-(sp)
   11e6e:	|         move.l 20(sp),-(sp)
   11e72:	|         move.l d1,-(sp)
   11e74:	|         jsr 508e <cancelAFunction>
   11e7a:	|         lea 12(sp),sp
		if (killedMyself) {
   11e7e:	|         move.w 2(sp),d0
   11e82:	|  ,----- beq.s 11e94 <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   11e84:	|  |      move.l 16(sp),-(sp)
   11e88:	|  |      jsr 4fac <abortFunction>
   11e8e:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   11e90:	|  |      moveq #5,d0
   11e92:	|  |  ,-- bra.s 11e9a <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   11e94:	|  '--|-> moveq #2,d0
   11e96:	|     +-- bra.s 11e9a <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   11e98:	'-----|-> moveq #1,d0
}
   11e9a:	      '-> addq.l #8,sp
   11e9c:	          rts

00011e9e <builtIn_stringWidth>:

builtIn(stringWidth)
{
   11e9e:	       subq.l #8,sp
   11ea0:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   11ea2:	       movea.l 20(sp),a0
   11ea6:	       move.l 24(a0),d0
   11eaa:	       move.l d0,-(sp)
   11eac:	       jsr 14c1e <getTextFromAnyVar>
   11eb2:	       addq.l #4,sp
   11eb4:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   11eb8:	   ,-- bne.s 11ebe <builtIn_stringWidth+0x20>
   11eba:	   |   moveq #1,d0
   11ebc:	,--|-- bra.s 11f0c <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   11ebe:	|  '-> moveq #24,d0
   11ec0:	|      add.l 20(sp),d0
   11ec4:	|      move.l d0,-(sp)
   11ec6:	|      jsr 14fcc <trimStack>
   11ecc:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   11ece:	|      move.l 8(sp),-(sp)
   11ed2:	|      jsr 15732 <stringWidth>
   11ed8:	|      addq.l #4,sp
   11eda:	|      move.l d0,d1
   11edc:	|      moveq #28,d0
   11ede:	|      add.l 20(sp),d0
   11ee2:	|      move.l d1,-(sp)
   11ee4:	|      pea 1 <_start+0x1>
   11ee8:	|      move.l d0,-(sp)
   11eea:	|      jsr 14f3a <setVariable>
   11ef0:	|      lea 12(sp),sp
	FreeVec(theText);
   11ef4:	|      move.l 8(sp),4(sp)
   11efa:	|      move.l 1c810 <SysBase>,d0
   11f00:	|      movea.l d0,a6
   11f02:	|      movea.l 4(sp),a1
   11f06:	|      jsr -690(a6)
	return BR_CONTINUE;
   11f0a:	|      moveq #2,d0
}
   11f0c:	'----> movea.l (sp)+,a6
   11f0e:	       addq.l #8,sp
   11f10:	       rts

00011f12 <builtIn_hardScroll>:

builtIn(hardScroll)
{
   11f12:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11f14:	       movea.l 12(sp),a0
   11f18:	       move.l 24(a0),d0
   11f1c:	       move.l d0,-(sp)
   11f1e:	       pea 1 <_start+0x1>
   11f22:	       move.l sp,d0
   11f24:	       addq.l #8,d0
   11f26:	       move.l d0,-(sp)
   11f28:	       jsr 14648 <getValueType>
   11f2e:	       lea 12(sp),sp
   11f32:	       tst.w d0
   11f34:	   ,-- bne.s 11f3a <builtIn_hardScroll+0x28>
   11f36:	   |   moveq #1,d0
   11f38:	,--|-- bra.s 11f58 <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   11f3a:	|  '-> moveq #24,d0
   11f3c:	|      add.l 12(sp),d0
   11f40:	|      move.l d0,-(sp)
   11f42:	|      jsr 14fcc <trimStack>
   11f48:	|      addq.l #4,sp
	hardScroll (v);
   11f4a:	|      move.l (sp),d0
   11f4c:	|      move.l d0,-(sp)
   11f4e:	|      jsr d100 <hardScroll>
   11f54:	|      addq.l #4,sp
	return BR_CONTINUE;
   11f56:	|      moveq #2,d0
}
   11f58:	'----> addq.l #4,sp
   11f5a:	       rts

00011f5c <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   11f5c:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11f5e:	       movea.l 12(sp),a0
   11f62:	       move.l 24(a0),d0
   11f66:	       move.l d0,-(sp)
   11f68:	       pea 7 <_start+0x7>
   11f6c:	       move.l sp,d0
   11f6e:	       addq.l #8,d0
   11f70:	       move.l d0,-(sp)
   11f72:	       jsr 14648 <getValueType>
   11f78:	       lea 12(sp),sp
   11f7c:	       tst.w d0
   11f7e:	   ,-- bne.s 11f84 <builtIn_isScreenRegion+0x28>
   11f80:	   |   moveq #1,d0
   11f82:	,--|-- bra.s 11fc4 <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   11f84:	|  '-> moveq #24,d0
   11f86:	|      add.l 12(sp),d0
   11f8a:	|      move.l d0,-(sp)
   11f8c:	|      jsr 14fcc <trimStack>
   11f92:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   11f94:	|      move.l (sp),d0
   11f96:	|      move.l d0,-(sp)
   11f98:	|      jsr 1590a <getRegionForObject>
   11f9e:	|      addq.l #4,sp
   11fa0:	|      tst.l d0
   11fa2:	|      sne d0
   11fa4:	|      neg.b d0
   11fa6:	|      moveq #0,d1
   11fa8:	|      move.b d0,d1
   11faa:	|      moveq #28,d0
   11fac:	|      add.l 12(sp),d0
   11fb0:	|      move.l d1,-(sp)
   11fb2:	|      pea 1 <_start+0x1>
   11fb6:	|      move.l d0,-(sp)
   11fb8:	|      jsr 14f3a <setVariable>
   11fbe:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11fc2:	|      moveq #2,d0
}
   11fc4:	'----> addq.l #4,sp
   11fc6:	       rts

00011fc8 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   11fc8:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11fca:	       movea.l 12(sp),a0
   11fce:	       move.l 24(a0),d0
   11fd2:	       move.l d0,-(sp)
   11fd4:	       pea 1 <_start+0x1>
   11fd8:	       move.l sp,d0
   11fda:	       addq.l #8,d0
   11fdc:	       move.l d0,-(sp)
   11fde:	       jsr 14648 <getValueType>
   11fe4:	       lea 12(sp),sp
   11fe8:	       tst.w d0
   11fea:	   ,-- bne.s 11ff0 <builtIn_setSpeechSpeed+0x28>
   11fec:	   |   moveq #1,d0
   11fee:	,--|-- bra.s 1203e <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   11ff0:	|  '-> moveq #24,d0
   11ff2:	|      add.l 12(sp),d0
   11ff6:	|      move.l d0,-(sp)
   11ff8:	|      jsr 14fcc <trimStack>
   11ffe:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   12000:	|      move.l (sp),d0
   12002:	|      move.l d0,-(sp)
   12004:	|      jsr 1753e <__floatsisf>
   1200a:	|      addq.l #4,sp
   1200c:	|      move.l #1008981770,-(sp)
   12012:	|      move.l d0,-(sp)
   12014:	|      jsr 175f0 <__mulsf3>
   1201a:	|      addq.l #8,sp
   1201c:	|      move.l d0,1c17a <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   12022:	|      moveq #28,d0
   12024:	|      add.l 12(sp),d0
   12028:	|      pea 1 <_start+0x1>
   1202c:	|      pea 1 <_start+0x1>
   12030:	|      move.l d0,-(sp)
   12032:	|      jsr 14f3a <setVariable>
   12038:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1203c:	|      moveq #2,d0
}
   1203e:	'----> addq.l #4,sp
   12040:	       rts

00012042 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   12042:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12044:	       movea.l 12(sp),a0
   12048:	       move.l 24(a0),d0
   1204c:	       move.l d0,-(sp)
   1204e:	       pea 1 <_start+0x1>
   12052:	       move.l sp,d0
   12054:	       addq.l #8,d0
   12056:	       move.l d0,-(sp)
   12058:	       jsr 14648 <getValueType>
   1205e:	       lea 12(sp),sp
   12062:	       tst.w d0
   12064:	   ,-- bne.s 1206a <builtIn_setFontSpacing+0x28>
   12066:	   |   moveq #1,d0
   12068:	,--|-- bra.s 120a0 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   1206a:	|  '-> move.l (sp),d0
   1206c:	|      move.l d0,d0
   1206e:	|      move.w d0,1c708 <fontSpace>
	trimStack (&fun -> stack);
   12074:	|      moveq #24,d0
   12076:	|      add.l 12(sp),d0
   1207a:	|      move.l d0,-(sp)
   1207c:	|      jsr 14fcc <trimStack>
   12082:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12084:	|      moveq #28,d0
   12086:	|      add.l 12(sp),d0
   1208a:	|      pea 1 <_start+0x1>
   1208e:	|      pea 1 <_start+0x1>
   12092:	|      move.l d0,-(sp)
   12094:	|      jsr 14f3a <setVariable>
   1209a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1209e:	|      moveq #2,d0
}
   120a0:	'----> addq.l #4,sp
   120a2:	       rts

000120a4 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   120a4:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   120a6:	          movea.l 12(sp),a0
   120aa:	          move.l 24(a0),d0
   120ae:	          move.l d0,-(sp)
   120b0:	          pea 1 <_start+0x1>
   120b4:	          move.l sp,d0
   120b6:	          addq.l #8,d0
   120b8:	          move.l d0,-(sp)
   120ba:	          jsr 14648 <getValueType>
   120c0:	          lea 12(sp),sp
   120c4:	          tst.w d0
   120c6:	      ,-- bne.s 120cc <builtIn_transitionLevel+0x28>
   120c8:	      |   moveq #1,d0
   120ca:	,-----|-- bra.s 12120 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   120cc:	|     '-> moveq #24,d0
   120ce:	|         add.l 12(sp),d0
   120d2:	|         move.l d0,-(sp)
   120d4:	|         jsr 14fcc <trimStack>
   120da:	|         addq.l #4,sp

	if (number < 0)
   120dc:	|         move.l (sp),d0
   120de:	|     ,-- bpl.s 120e8 <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   120e0:	|     |   clr.b 1c17e <brightnessLevel>
   120e6:	|  ,--|-- bra.s 12104 <builtIn_transitionLevel+0x60>
	else if (number > 255)
   120e8:	|  |  '-> move.l (sp),d0
   120ea:	|  |      cmpi.l #255,d0
   120f0:	|  |  ,-- ble.s 120fa <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   120f2:	|  |  |   st 1c17e <brightnessLevel>
   120f8:	|  +--|-- bra.s 12104 <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   120fa:	|  |  '-> move.l (sp),d0
   120fc:	|  |      move.l d0,d0
   120fe:	|  |      move.b d0,1c17e <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   12104:	|  '----> moveq #28,d0
   12106:	|         add.l 12(sp),d0
   1210a:	|         pea 1 <_start+0x1>
   1210e:	|         pea 1 <_start+0x1>
   12112:	|         move.l d0,-(sp)
   12114:	|         jsr 14f3a <setVariable>
   1211a:	|         lea 12(sp),sp
	return BR_CONTINUE;
   1211e:	|         moveq #2,d0
}
   12120:	'-------> addq.l #4,sp
   12122:	          rts

00012124 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   12124:	movea.l 8(sp),a0
   12128:	move.l 24(a0),d0
   1212c:	move.l d0,-(sp)
   1212e:	jsr 14b88 <getBoolean>
   12134:	addq.l #4,sp
   12136:	move.w d0,1c7b0 <captureAllKeys>
	trimStack (&fun -> stack);
   1213c:	moveq #24,d0
   1213e:	add.l 8(sp),d0
   12142:	move.l d0,-(sp)
   12144:	jsr 14fcc <trimStack>
   1214a:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   1214c:	move.w 1c7b0 <captureAllKeys>,d0
   12152:	movea.w d0,a0
   12154:	moveq #28,d0
   12156:	add.l 8(sp),d0
   1215a:	move.l a0,-(sp)
   1215c:	pea 1 <_start+0x1>
   12160:	move.l d0,-(sp)
   12162:	jsr 14f3a <setVariable>
   12168:	lea 12(sp),sp
	return BR_CONTINUE;
   1216c:	moveq #2,d0
}
   1216e:	rts

00012170 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   12170:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12174:	       movea.l 20(sp),a0
   12178:	       move.l 24(a0),d0
   1217c:	       move.l d0,-(sp)
   1217e:	       pea 1 <_start+0x1>
   12182:	       moveq #12,d0
   12184:	       add.l sp,d0
   12186:	       move.l d0,-(sp)
   12188:	       jsr 14648 <getValueType>
   1218e:	       lea 12(sp),sp
   12192:	       tst.w d0
   12194:	   ,-- bne.s 1219c <builtIn_spinCharacter+0x2c>
   12196:	   |   moveq #1,d0
   12198:	,--|-- bra.w 1224c <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   1219c:	|  '-> moveq #24,d0
   1219e:	|      add.l 20(sp),d0
   121a2:	|      move.l d0,-(sp)
   121a4:	|      jsr 14fcc <trimStack>
   121aa:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   121ac:	|      movea.l 20(sp),a0
   121b0:	|      move.l 24(a0),d0
   121b4:	|      move.l d0,-(sp)
   121b6:	|      pea 7 <_start+0x7>
   121ba:	|      lea 8(sp),a0
   121be:	|      move.l a0,-(sp)
   121c0:	|      jsr 14648 <getValueType>
   121c6:	|      lea 12(sp),sp
   121ca:	|      tst.w d0
   121cc:	|  ,-- bne.s 121d2 <builtIn_spinCharacter+0x62>
   121ce:	|  |   moveq #1,d0
   121d0:	+--|-- bra.s 1224c <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   121d2:	|  '-> moveq #24,d0
   121d4:	|      add.l 20(sp),d0
   121d8:	|      move.l d0,-(sp)
   121da:	|      jsr 14fcc <trimStack>
   121e0:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   121e2:	|      move.l (sp),d0
   121e4:	|      move.l d0,-(sp)
   121e6:	|      jsr a4a2 <findPerson>
   121ec:	|      addq.l #4,sp
   121ee:	|      move.l d0,8(sp)
	if (thisPerson) {
   121f2:	|  ,-- beq.s 12232 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   121f4:	|  |   move.l 4(sp),d0
   121f8:	|  |   movea.l 8(sp),a0
   121fc:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   12200:	|  |   movea.l 8(sp),a0
   12204:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   1220a:	|  |   movea.l 8(sp),a0
   1220e:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12214:	|  |   moveq #28,d0
   12216:	|  |   add.l 20(sp),d0
   1221a:	|  |   pea 1 <_start+0x1>
   1221e:	|  |   pea 1 <_start+0x1>
   12222:	|  |   move.l d0,-(sp)
   12224:	|  |   jsr 14f3a <setVariable>
   1222a:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   1222e:	|  |   moveq #3,d0
   12230:	+--|-- bra.s 1224c <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12232:	|  '-> moveq #28,d0
   12234:	|      add.l 20(sp),d0
   12238:	|      clr.l -(sp)
   1223a:	|      pea 1 <_start+0x1>
   1223e:	|      move.l d0,-(sp)
   12240:	|      jsr 14f3a <setVariable>
   12246:	|      lea 12(sp),sp
		return BR_CONTINUE;
   1224a:	|      moveq #2,d0
	}
}
   1224c:	'----> lea 12(sp),sp
   12250:	       rts

00012252 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   12252:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12254:	          movea.l 16(sp),a0
   12258:	          move.l 24(a0),d0
   1225c:	          move.l d0,-(sp)
   1225e:	          pea 7 <_start+0x7>
   12262:	          move.l sp,d0
   12264:	          addq.l #8,d0
   12266:	          move.l d0,-(sp)
   12268:	          jsr 14648 <getValueType>
   1226e:	          lea 12(sp),sp
   12272:	          tst.w d0
   12274:	      ,-- bne.s 1227a <builtIn_getCharacterDirection+0x28>
   12276:	      |   moveq #1,d0
   12278:	,-----|-- bra.s 122d8 <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   1227a:	|     '-> moveq #24,d0
   1227c:	|         add.l 16(sp),d0
   12280:	|         move.l d0,-(sp)
   12282:	|         jsr 14fcc <trimStack>
   12288:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1228a:	|         move.l (sp),d0
   1228c:	|         move.l d0,-(sp)
   1228e:	|         jsr a4a2 <findPerson>
   12294:	|         addq.l #4,sp
   12296:	|         move.l d0,4(sp)
	if (thisPerson) {
   1229a:	|  ,----- beq.s 122be <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   1229c:	|  |      movea.l 4(sp),a0
   122a0:	|  |      move.l 106(a0),d1
   122a4:	|  |      moveq #28,d0
   122a6:	|  |      add.l 16(sp),d0
   122aa:	|  |      move.l d1,-(sp)
   122ac:	|  |      pea 1 <_start+0x1>
   122b0:	|  |      move.l d0,-(sp)
   122b2:	|  |      jsr 14f3a <setVariable>
   122b8:	|  |      lea 12(sp),sp
   122bc:	|  |  ,-- bra.s 122d6 <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   122be:	|  '--|-> moveq #28,d0
   122c0:	|     |   add.l 16(sp),d0
   122c4:	|     |   clr.l -(sp)
   122c6:	|     |   pea 1 <_start+0x1>
   122ca:	|     |   move.l d0,-(sp)
   122cc:	|     |   jsr 14f3a <setVariable>
   122d2:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   122d6:	|     '-> moveq #2,d0
}
   122d8:	'-------> addq.l #8,sp
   122da:	          rts

000122dc <builtIn_isCharacter>:

builtIn(isCharacter)
{
   122dc:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   122de:	       movea.l 16(sp),a0
   122e2:	       move.l 24(a0),d0
   122e6:	       move.l d0,-(sp)
   122e8:	       pea 7 <_start+0x7>
   122ec:	       move.l sp,d0
   122ee:	       addq.l #8,d0
   122f0:	       move.l d0,-(sp)
   122f2:	       jsr 14648 <getValueType>
   122f8:	       lea 12(sp),sp
   122fc:	       tst.w d0
   122fe:	   ,-- bne.s 12304 <builtIn_isCharacter+0x28>
   12300:	   |   moveq #1,d0
   12302:	,--|-- bra.s 12346 <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   12304:	|  '-> moveq #24,d0
   12306:	|      add.l 16(sp),d0
   1230a:	|      move.l d0,-(sp)
   1230c:	|      jsr 14fcc <trimStack>
   12312:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12314:	|      move.l (sp),d0
   12316:	|      move.l d0,-(sp)
   12318:	|      jsr a4a2 <findPerson>
   1231e:	|      addq.l #4,sp
   12320:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   12324:	|      sne d0
   12326:	|      neg.b d0
   12328:	|      moveq #0,d1
   1232a:	|      move.b d0,d1
   1232c:	|      moveq #28,d0
   1232e:	|      add.l 16(sp),d0
   12332:	|      move.l d1,-(sp)
   12334:	|      pea 1 <_start+0x1>
   12338:	|      move.l d0,-(sp)
   1233a:	|      jsr 14f3a <setVariable>
   12340:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12344:	|      moveq #2,d0
}
   12346:	'----> addq.l #8,sp
   12348:	       rts

0001234a <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   1234a:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1234c:	          movea.l 16(sp),a0
   12350:	          move.l 24(a0),d0
   12354:	          move.l d0,-(sp)
   12356:	          pea 7 <_start+0x7>
   1235a:	          move.l sp,d0
   1235c:	          addq.l #8,d0
   1235e:	          move.l d0,-(sp)
   12360:	          jsr 14648 <getValueType>
   12366:	          lea 12(sp),sp
   1236a:	          tst.w d0
   1236c:	      ,-- bne.s 12372 <builtIn_normalCharacter+0x28>
   1236e:	      |   moveq #1,d0
   12370:	,-----|-- bra.s 123ee <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   12372:	|     '-> moveq #24,d0
   12374:	|         add.l 16(sp),d0
   12378:	|         move.l d0,-(sp)
   1237a:	|         jsr 14fcc <trimStack>
   12380:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12382:	|         move.l (sp),d0
   12384:	|         move.l d0,-(sp)
   12386:	|         jsr a4a2 <findPerson>
   1238c:	|         addq.l #4,sp
   1238e:	|         move.l d0,4(sp)
	if (thisPerson)
   12392:	|  ,----- beq.s 123d4 <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   12394:	|  |      movea.l 4(sp),a0
   12398:	|  |      movea.l 80(a0),a0
   1239c:	|  |      move.l (a0),d1
   1239e:	|  |      movea.l 4(sp),a0
   123a2:	|  |      move.l 106(a0),d0
   123a6:	|  |      add.l d0,d0
   123a8:	|  |      add.l d0,d0
   123aa:	|  |      movea.l d1,a0
   123ac:	|  |      adda.l d0,a0
   123ae:	|  |      move.l (a0),d0
   123b0:	|  |      movea.l 4(sp),a0
   123b4:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   123b8:	|  |      moveq #28,d0
   123ba:	|  |      add.l 16(sp),d0
   123be:	|  |      pea 1 <_start+0x1>
   123c2:	|  |      pea 1 <_start+0x1>
   123c6:	|  |      move.l d0,-(sp)
   123c8:	|  |      jsr 14f3a <setVariable>
   123ce:	|  |      lea 12(sp),sp
   123d2:	|  |  ,-- bra.s 123ec <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   123d4:	|  '--|-> moveq #28,d0
   123d6:	|     |   add.l 16(sp),d0
   123da:	|     |   clr.l -(sp)
   123dc:	|     |   pea 1 <_start+0x1>
   123e0:	|     |   move.l d0,-(sp)
   123e2:	|     |   jsr 14f3a <setVariable>
   123e8:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   123ec:	|     '-> moveq #2,d0
}
   123ee:	'-------> addq.l #8,sp
   123f0:	          rts

000123f2 <builtIn_isMoving>:

builtIn(isMoving)
{
   123f2:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   123f4:	          movea.l 16(sp),a0
   123f8:	          move.l 24(a0),d0
   123fc:	          move.l d0,-(sp)
   123fe:	          pea 7 <_start+0x7>
   12402:	          move.l sp,d0
   12404:	          addq.l #8,d0
   12406:	          move.l d0,-(sp)
   12408:	          jsr 14648 <getValueType>
   1240e:	          lea 12(sp),sp
   12412:	          tst.w d0
   12414:	      ,-- bne.s 1241a <builtIn_isMoving+0x28>
   12416:	      |   moveq #1,d0
   12418:	,-----|-- bra.s 1247a <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   1241a:	|     '-> moveq #24,d0
   1241c:	|         add.l 16(sp),d0
   12420:	|         move.l d0,-(sp)
   12422:	|         jsr 14fcc <trimStack>
   12428:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1242a:	|         move.l (sp),d0
   1242c:	|         move.l d0,-(sp)
   1242e:	|         jsr a4a2 <findPerson>
   12434:	|         addq.l #4,sp
   12436:	|         move.l d0,4(sp)
	if (thisPerson)
   1243a:	|  ,----- beq.s 12460 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   1243c:	|  |      movea.l 4(sp),a0
   12440:	|  |      move.w 64(a0),d0
   12444:	|  |      movea.w d0,a0
   12446:	|  |      moveq #28,d0
   12448:	|  |      add.l 16(sp),d0
   1244c:	|  |      move.l a0,-(sp)
   1244e:	|  |      pea 1 <_start+0x1>
   12452:	|  |      move.l d0,-(sp)
   12454:	|  |      jsr 14f3a <setVariable>
   1245a:	|  |      lea 12(sp),sp
   1245e:	|  |  ,-- bra.s 12478 <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12460:	|  '--|-> moveq #28,d0
   12462:	|     |   add.l 16(sp),d0
   12466:	|     |   clr.l -(sp)
   12468:	|     |   pea 1 <_start+0x1>
   1246c:	|     |   move.l d0,-(sp)
   1246e:	|     |   jsr 14f3a <setVariable>
   12474:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12478:	|     '-> moveq #2,d0
}
   1247a:	'-------> addq.l #8,sp
   1247c:	          rts

0001247e <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   1247e:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12482:	          movea.l 20(sp),a0
   12486:	          move.l 24(a0),d0
   1248a:	          move.l d0,-(sp)
   1248c:	          pea 7 <_start+0x7>
   12490:	          lea 8(sp),a0
   12494:	          move.l a0,-(sp)
   12496:	          jsr 14648 <getValueType>
   1249c:	          lea 12(sp),sp
   124a0:	          tst.w d0
   124a2:	      ,-- bne.s 124aa <builtIn_fetchEvent+0x2c>
   124a4:	      |   moveq #1,d0
   124a6:	,-----|-- bra.w 1253e <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   124aa:	|     '-> moveq #24,d0
   124ac:	|         add.l 20(sp),d0
   124b0:	|         move.l d0,-(sp)
   124b2:	|         jsr 14fcc <trimStack>
   124b8:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   124ba:	|         movea.l 20(sp),a0
   124be:	|         move.l 24(a0),d0
   124c2:	|         move.l d0,-(sp)
   124c4:	|         pea 7 <_start+0x7>
   124c8:	|         moveq #12,d0
   124ca:	|         add.l sp,d0
   124cc:	|         move.l d0,-(sp)
   124ce:	|         jsr 14648 <getValueType>
   124d4:	|         lea 12(sp),sp
   124d8:	|         tst.w d0
   124da:	|     ,-- bne.s 124e0 <builtIn_fetchEvent+0x62>
   124dc:	|     |   moveq #1,d0
   124de:	+-----|-- bra.s 1253e <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   124e0:	|     '-> moveq #24,d0
   124e2:	|         add.l 20(sp),d0
   124e6:	|         move.l d0,-(sp)
   124e8:	|         jsr 14fcc <trimStack>
   124ee:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   124f0:	|         move.l (sp),d1
   124f2:	|         move.l 4(sp),d0
   124f6:	|         move.l d1,-(sp)
   124f8:	|         move.l d0,-(sp)
   124fa:	|         jsr d3e2 <getCombinationFunction>
   12500:	|         addq.l #8,sp
   12502:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   12506:	|  ,----- beq.s 12524 <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   12508:	|  |      moveq #28,d0
   1250a:	|  |      add.l 20(sp),d0
   1250e:	|  |      move.l 8(sp),-(sp)
   12512:	|  |      pea 2 <_start+0x2>
   12516:	|  |      move.l d0,-(sp)
   12518:	|  |      jsr 14f3a <setVariable>
   1251e:	|  |      lea 12(sp),sp
   12522:	|  |  ,-- bra.s 1253c <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12524:	|  '--|-> moveq #28,d0
   12526:	|     |   add.l 20(sp),d0
   1252a:	|     |   clr.l -(sp)
   1252c:	|     |   pea 1 <_start+0x1>
   12530:	|     |   move.l d0,-(sp)
   12532:	|     |   jsr 14f3a <setVariable>
   12538:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1253c:	|     '-> moveq #2,d0
}
   1253e:	'-------> lea 12(sp),sp
   12542:	          rts

00012544 <builtIn_deleteFile>:

builtIn(deleteFile)
{
   12544:	       lea -24(sp),sp
   12548:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   1254a:	       movea.l 36(sp),a0
   1254e:	       move.l 24(a0),d0
   12552:	       move.l d0,-(sp)
   12554:	       jsr 14c1e <getTextFromAnyVar>
   1255a:	       addq.l #4,sp
   1255c:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   12560:	       moveq #24,d0
   12562:	       add.l 36(sp),d0
   12566:	       move.l d0,-(sp)
   12568:	       jsr 14fcc <trimStack>
   1256e:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   12570:	       move.l 24(sp),-(sp)
   12574:	       jsr 2fe <encodeFilename>
   1257a:	       addq.l #4,sp
   1257c:	       move.l d0,20(sp)
    FreeVec(namNormal);
   12580:	       move.l 24(sp),16(sp)
   12586:	       move.l 1c810 <SysBase>,d0
   1258c:	       movea.l d0,a6
   1258e:	       movea.l 16(sp),a1
   12592:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   12596:	       move.l 20(sp),-(sp)
   1259a:	       jsr e19a <failSecurityCheck>
   125a0:	       addq.l #4,sp
   125a2:	       tst.w d0
   125a4:	   ,-- beq.s 125aa <builtIn_deleteFile+0x66>
   125a6:	   |   moveq #1,d0
   125a8:	,--|-- bra.s 125f8 <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   125aa:	|  '-> move.l 20(sp),12(sp)
   125b0:	|      move.l 1c818 <DOSBase>,d0
   125b6:	|      movea.l d0,a6
   125b8:	|      move.l 12(sp),d1
   125bc:	|      jsr -72(a6)
   125c0:	|      move.l d0,8(sp)
   125c4:	|      move.l 8(sp),d1
   125c8:	|      moveq #28,d0
   125ca:	|      add.l 36(sp),d0
   125ce:	|      move.l d1,-(sp)
   125d0:	|      pea 1 <_start+0x1>
   125d4:	|      move.l d0,-(sp)
   125d6:	|      jsr 14f3a <setVariable>
   125dc:	|      lea 12(sp),sp
    FreeVec(nam);
   125e0:	|      move.l 20(sp),4(sp)
   125e6:	|      move.l 1c810 <SysBase>,d0
   125ec:	|      movea.l d0,a6
   125ee:	|      movea.l 4(sp),a1
   125f2:	|      jsr -690(a6)

    return BR_CONTINUE;
   125f6:	|      moveq #2,d0
}
   125f8:	'----> movea.l (sp)+,a6
   125fa:	       lea 24(sp),sp
   125fe:	       rts

00012600 <builtIn_renameFile>:

builtIn(renameFile)
{
   12600:	       lea -40(sp),sp
   12604:	       move.l a6,-(sp)
   12606:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   12608:	       movea.l 56(sp),a0
   1260c:	       move.l 24(a0),d0
   12610:	       move.l d0,-(sp)
   12612:	       jsr 14c1e <getTextFromAnyVar>
   12618:	       addq.l #4,sp
   1261a:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   1261e:	       move.l 44(sp),-(sp)
   12622:	       jsr 2fe <encodeFilename>
   12628:	       addq.l #4,sp
   1262a:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   1262e:	       moveq #24,d0
   12630:	       add.l 56(sp),d0
   12634:	       move.l d0,-(sp)
   12636:	       jsr 14fcc <trimStack>
   1263c:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   1263e:	       move.l 40(sp),-(sp)
   12642:	       jsr e19a <failSecurityCheck>
   12648:	       addq.l #4,sp
   1264a:	       tst.w d0
   1264c:	   ,-- beq.s 12654 <builtIn_renameFile+0x54>
   1264e:	   |   moveq #1,d0
   12650:	,--|-- bra.w 1273a <builtIn_renameFile+0x13a>
	FreeVec(temp);
   12654:	|  '-> move.l 44(sp),36(sp)
   1265a:	|      move.l 1c810 <SysBase>,d0
   12660:	|      movea.l d0,a6
   12662:	|      movea.l 36(sp),a1
   12666:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   1266a:	|      movea.l 56(sp),a0
   1266e:	|      move.l 24(a0),d0
   12672:	|      move.l d0,-(sp)
   12674:	|      jsr 14c1e <getTextFromAnyVar>
   1267a:	|      addq.l #4,sp
   1267c:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   12680:	|      move.l 44(sp),-(sp)
   12684:	|      jsr 2fe <encodeFilename>
   1268a:	|      addq.l #4,sp
   1268c:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   12690:	|      moveq #24,d0
   12692:	|      add.l 56(sp),d0
   12696:	|      move.l d0,-(sp)
   12698:	|      jsr 14fcc <trimStack>
   1269e:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   126a0:	|      move.l 32(sp),-(sp)
   126a4:	|      jsr e19a <failSecurityCheck>
   126aa:	|      addq.l #4,sp
   126ac:	|      tst.w d0
   126ae:	|  ,-- beq.s 126b6 <builtIn_renameFile+0xb6>
   126b0:	|  |   moveq #1,d0
   126b2:	+--|-- bra.w 1273a <builtIn_renameFile+0x13a>
	FreeVec(temp);
   126b6:	|  '-> move.l 44(sp),28(sp)
   126bc:	|      move.l 1c810 <SysBase>,d0
   126c2:	|      movea.l d0,a6
   126c4:	|      movea.l 28(sp),a1
   126c8:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   126cc:	|      move.l 32(sp),24(sp)
   126d2:	|      move.l 40(sp),20(sp)
   126d8:	|      move.l 1c818 <DOSBase>,d0
   126de:	|      movea.l d0,a6
   126e0:	|      move.l 24(sp),d1
   126e4:	|      move.l 20(sp),d2
   126e8:	|      jsr -78(a6)
   126ec:	|      move.l d0,16(sp)
   126f0:	|      move.l 16(sp),d1
   126f4:	|      moveq #28,d0
   126f6:	|      add.l 56(sp),d0
   126fa:	|      move.l d1,-(sp)
   126fc:	|      pea 1 <_start+0x1>
   12700:	|      move.l d0,-(sp)
   12702:	|      jsr 14f3a <setVariable>
   12708:	|      lea 12(sp),sp
	FreeVec(nam);
   1270c:	|      move.l 32(sp),12(sp)
   12712:	|      move.l 1c810 <SysBase>,d0
   12718:	|      movea.l d0,a6
   1271a:	|      movea.l 12(sp),a1
   1271e:	|      jsr -690(a6)
	FreeVec(newnam);
   12722:	|      move.l 40(sp),8(sp)
   12728:	|      move.l 1c810 <SysBase>,d0
   1272e:	|      movea.l d0,a6
   12730:	|      movea.l 8(sp),a1
   12734:	|      jsr -690(a6)

	return BR_CONTINUE;
   12738:	|      moveq #2,d0
}
   1273a:	'----> move.l (sp)+,d2
   1273c:	       movea.l (sp)+,a6
   1273e:	       lea 40(sp),sp
   12742:	       rts

00012744 <builtIn_cacheSound>:

builtIn(cacheSound)
{
   12744:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12746:	       movea.l 12(sp),a0
   1274a:	       move.l 24(a0),d0
   1274e:	       move.l d0,-(sp)
   12750:	       pea 5 <_start+0x5>
   12754:	       move.l sp,d0
   12756:	       addq.l #8,d0
   12758:	       move.l d0,-(sp)
   1275a:	       jsr 14648 <getValueType>
   12760:	       lea 12(sp),sp
   12764:	       tst.w d0
   12766:	   ,-- bne.s 1276c <builtIn_cacheSound+0x28>
   12768:	   |   moveq #1,d0
   1276a:	,--|-- bra.s 12794 <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   1276c:	|  '-> moveq #24,d0
   1276e:	|      add.l 12(sp),d0
   12772:	|      move.l d0,-(sp)
   12774:	|      jsr 14fcc <trimStack>
   1277a:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   1277c:	|      move.l (sp),d0
   1277e:	|      move.l d0,-(sp)
   12780:	|      jsr cfd8 <cacheSound>
   12786:	|      addq.l #4,sp
   12788:	|      moveq #-1,d1
   1278a:	|      cmp.l d0,d1
   1278c:	|  ,-- bne.s 12792 <builtIn_cacheSound+0x4e>
   1278e:	|  |   moveq #1,d0
   12790:	+--|-- bra.s 12794 <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   12792:	|  '-> moveq #2,d0
}
   12794:	'----> addq.l #4,sp
   12796:	       rts

00012798 <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   12798:	pea 19a93 <talk.c.490538ff+0x12e>
   1279e:	jsr 1710c <KPrintF>
   127a4:	addq.l #4,sp
	return BR_CONTINUE;
   127a6:	moveq #2,d0
}
   127a8:	rts

000127aa <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   127aa:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   127ae:	          movea.l 20(sp),a0
   127b2:	          move.l 24(a0),d0
   127b6:	          move.l d0,-(sp)
   127b8:	          pea 1 <_start+0x1>
   127bc:	          moveq #12,d0
   127be:	          add.l sp,d0
   127c0:	          move.l d0,-(sp)
   127c2:	          jsr 14648 <getValueType>
   127c8:	          lea 12(sp),sp
   127cc:	          tst.w d0
   127ce:	      ,-- bne.s 127d6 <builtIn_setCharacterSpinSpeed+0x2c>
   127d0:	      |   moveq #1,d0
   127d2:	,-----|-- bra.w 12870 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   127d6:	|     '-> moveq #24,d0
   127d8:	|         add.l 20(sp),d0
   127dc:	|         move.l d0,-(sp)
   127de:	|         jsr 14fcc <trimStack>
   127e4:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   127e6:	|         movea.l 20(sp),a0
   127ea:	|         move.l 24(a0),d0
   127ee:	|         move.l d0,-(sp)
   127f0:	|         pea 7 <_start+0x7>
   127f4:	|         lea 8(sp),a0
   127f8:	|         move.l a0,-(sp)
   127fa:	|         jsr 14648 <getValueType>
   12800:	|         lea 12(sp),sp
   12804:	|         tst.w d0
   12806:	|     ,-- bne.s 1280c <builtIn_setCharacterSpinSpeed+0x62>
   12808:	|     |   moveq #1,d0
   1280a:	+-----|-- bra.s 12870 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   1280c:	|     '-> moveq #24,d0
   1280e:	|         add.l 20(sp),d0
   12812:	|         move.l d0,-(sp)
   12814:	|         jsr 14fcc <trimStack>
   1281a:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   1281c:	|         move.l (sp),d0
   1281e:	|         move.l d0,-(sp)
   12820:	|         jsr a4a2 <findPerson>
   12826:	|         addq.l #4,sp
   12828:	|         move.l d0,8(sp)

	if (thisPerson) {
   1282c:	|  ,----- beq.s 12856 <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   1282e:	|  |      move.l 4(sp),d0
   12832:	|  |      movea.l 8(sp),a0
   12836:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   1283a:	|  |      moveq #28,d0
   1283c:	|  |      add.l 20(sp),d0
   12840:	|  |      pea 1 <_start+0x1>
   12844:	|  |      pea 1 <_start+0x1>
   12848:	|  |      move.l d0,-(sp)
   1284a:	|  |      jsr 14f3a <setVariable>
   12850:	|  |      lea 12(sp),sp
   12854:	|  |  ,-- bra.s 1286e <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12856:	|  '--|-> moveq #28,d0
   12858:	|     |   add.l 20(sp),d0
   1285c:	|     |   clr.l -(sp)
   1285e:	|     |   pea 1 <_start+0x1>
   12862:	|     |   move.l d0,-(sp)
   12864:	|     |   jsr 14f3a <setVariable>
   1286a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1286e:	|     '-> moveq #2,d0
}
   12870:	'-------> lea 12(sp),sp
   12874:	          rts

00012876 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   12876:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1287a:	          movea.l 20(sp),a0
   1287e:	          move.l 24(a0),d0
   12882:	          move.l d0,-(sp)
   12884:	          pea 1 <_start+0x1>
   12888:	          moveq #12,d0
   1288a:	          add.l sp,d0
   1288c:	          move.l d0,-(sp)
   1288e:	          jsr 14648 <getValueType>
   12894:	          lea 12(sp),sp
   12898:	          tst.w d0
   1289a:	      ,-- bne.s 128a2 <builtIn_setCharacterAngleOffset+0x2c>
   1289c:	      |   moveq #1,d0
   1289e:	,-----|-- bra.w 1293c <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   128a2:	|     '-> moveq #24,d0
   128a4:	|         add.l 20(sp),d0
   128a8:	|         move.l d0,-(sp)
   128aa:	|         jsr 14fcc <trimStack>
   128b0:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   128b2:	|         movea.l 20(sp),a0
   128b6:	|         move.l 24(a0),d0
   128ba:	|         move.l d0,-(sp)
   128bc:	|         pea 7 <_start+0x7>
   128c0:	|         lea 8(sp),a0
   128c4:	|         move.l a0,-(sp)
   128c6:	|         jsr 14648 <getValueType>
   128cc:	|         lea 12(sp),sp
   128d0:	|         tst.w d0
   128d2:	|     ,-- bne.s 128d8 <builtIn_setCharacterAngleOffset+0x62>
   128d4:	|     |   moveq #1,d0
   128d6:	+-----|-- bra.s 1293c <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   128d8:	|     '-> moveq #24,d0
   128da:	|         add.l 20(sp),d0
   128de:	|         move.l d0,-(sp)
   128e0:	|         jsr 14fcc <trimStack>
   128e6:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   128e8:	|         move.l (sp),d0
   128ea:	|         move.l d0,-(sp)
   128ec:	|         jsr a4a2 <findPerson>
   128f2:	|         addq.l #4,sp
   128f4:	|         move.l d0,8(sp)

	if (thisPerson) {
   128f8:	|  ,----- beq.s 12922 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   128fa:	|  |      move.l 4(sp),d0
   128fe:	|  |      movea.l 8(sp),a0
   12902:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12906:	|  |      moveq #28,d0
   12908:	|  |      add.l 20(sp),d0
   1290c:	|  |      pea 1 <_start+0x1>
   12910:	|  |      pea 1 <_start+0x1>
   12914:	|  |      move.l d0,-(sp)
   12916:	|  |      jsr 14f3a <setVariable>
   1291c:	|  |      lea 12(sp),sp
   12920:	|  |  ,-- bra.s 1293a <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12922:	|  '--|-> moveq #28,d0
   12924:	|     |   add.l 20(sp),d0
   12928:	|     |   clr.l -(sp)
   1292a:	|     |   pea 1 <_start+0x1>
   1292e:	|     |   move.l d0,-(sp)
   12930:	|     |   jsr 14f3a <setVariable>
   12936:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1293a:	|     '-> moveq #2,d0
}
   1293c:	'-------> lea 12(sp),sp
   12940:	          rts

00012942 <builtIn_transitionMode>:


builtIn(transitionMode)
{
   12942:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12944:	       movea.l 12(sp),a0
   12948:	       move.l 24(a0),d0
   1294c:	       move.l d0,-(sp)
   1294e:	       pea 1 <_start+0x1>
   12952:	       move.l sp,d0
   12954:	       addq.l #8,d0
   12956:	       move.l d0,-(sp)
   12958:	       jsr 14648 <getValueType>
   1295e:	       lea 12(sp),sp
   12962:	       tst.w d0
   12964:	   ,-- bne.s 1296a <builtIn_transitionMode+0x28>
   12966:	   |   moveq #1,d0
   12968:	,--|-- bra.s 129a0 <builtIn_transitionMode+0x5e>
	fadeMode = n;
   1296a:	|  '-> move.l (sp),d0
   1296c:	|      move.l d0,d0
   1296e:	|      move.b d0,1c6de <fadeMode>
	trimStack (&fun -> stack);
   12974:	|      moveq #24,d0
   12976:	|      add.l 12(sp),d0
   1297a:	|      move.l d0,-(sp)
   1297c:	|      jsr 14fcc <trimStack>
   12982:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12984:	|      moveq #28,d0
   12986:	|      add.l 12(sp),d0
   1298a:	|      pea 1 <_start+0x1>
   1298e:	|      pea 1 <_start+0x1>
   12992:	|      move.l d0,-(sp)
   12994:	|      jsr 14f3a <setVariable>
   1299a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1299e:	|      moveq #2,d0
}
   129a0:	'----> addq.l #4,sp
   129a2:	       rts

000129a4 <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   129a4:	moveq #24,d0
   129a6:	add.l 8(sp),d0
   129aa:	move.l d0,-(sp)
   129ac:	jsr 14fcc <trimStack>
   129b2:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   129b4:	moveq #28,d0
   129b6:	add.l 8(sp),d0
   129ba:	pea 1 <_start+0x1>
   129be:	pea 1 <_start+0x1>
   129c2:	move.l d0,-(sp)
   129c4:	jsr 14f3a <setVariable>
   129ca:	lea 12(sp),sp
	return BR_CONTINUE;
   129ce:	moveq #2,d0
}
   129d0:	rts

000129d2 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   129d2:	pea 19abd <talk.c.490538ff+0x158>
   129d8:	jsr 1710c <KPrintF>
   129de:	addq.l #4,sp
	return BR_CONTINUE;
   129e0:	moveq #2,d0
}
   129e2:	rts

000129e4 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   129e4:	       lea -16(sp),sp
   129e8:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   129ea:	       movea.l 28(sp),a0
   129ee:	       move.l 24(a0),d0
   129f2:	       move.l d0,-(sp)
   129f4:	       jsr 14c1e <getTextFromAnyVar>
   129fa:	       addq.l #4,sp
   129fc:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   12a00:	   ,-- bne.s 12a08 <builtIn_saveCustomData+0x24>
   12a02:	   |   moveq #1,d0
   12a04:	,--|-- bra.w 12aba <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   12a08:	|  '-> move.l 16(sp),-(sp)
   12a0c:	|      jsr 2fe <encodeFilename>
   12a12:	|      addq.l #4,sp
   12a14:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   12a18:	|      move.l 16(sp),8(sp)
   12a1e:	|      move.l 1c810 <SysBase>,d0
   12a24:	|      movea.l d0,a6
   12a26:	|      movea.l 8(sp),a1
   12a2a:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   12a2e:	|      move.l 12(sp),-(sp)
   12a32:	|      jsr e19a <failSecurityCheck>
   12a38:	|      addq.l #4,sp
   12a3a:	|      tst.w d0
   12a3c:	|  ,-- beq.s 12a42 <builtIn_saveCustomData+0x5e>
   12a3e:	|  |   moveq #1,d0
   12a40:	+--|-- bra.s 12aba <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12a42:	|  '-> moveq #24,d0
   12a44:	|      add.l 28(sp),d0
   12a48:	|      move.l d0,-(sp)
   12a4a:	|      jsr 14fcc <trimStack>
   12a50:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   12a52:	|      movea.l 28(sp),a0
   12a56:	|      movea.l 24(a0),a0
   12a5a:	|      move.l (a0),d0
   12a5c:	|      moveq #6,d1
   12a5e:	|      cmp.l d0,d1
   12a60:	|  ,-- beq.s 12a74 <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   12a62:	|  |   pea 19aea <talk.c.490538ff+0x185>
   12a68:	|  |   jsr 1710c <KPrintF>
   12a6e:	|  |   addq.l #4,sp
		return BR_ERROR;
   12a70:	|  |   moveq #1,d0
   12a72:	+--|-- bra.s 12aba <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   12a74:	|  '-> movea.l 28(sp),a0
   12a78:	|      move.l 24(a0),d0
   12a7c:	|      move.l d0,-(sp)
   12a7e:	|      move.l 16(sp),-(sp)
   12a82:	|      jsr ddea <stackToFile>
   12a88:	|      addq.l #8,sp
   12a8a:	|      tst.w d0
   12a8c:	|  ,-- bne.s 12a92 <builtIn_saveCustomData+0xae>
   12a8e:	|  |   moveq #1,d0
   12a90:	+--|-- bra.s 12aba <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12a92:	|  '-> moveq #24,d0
   12a94:	|      add.l 28(sp),d0
   12a98:	|      move.l d0,-(sp)
   12a9a:	|      jsr 14fcc <trimStack>
   12aa0:	|      addq.l #4,sp
	FreeVec(fileName);
   12aa2:	|      move.l 12(sp),4(sp)
   12aa8:	|      move.l 1c810 <SysBase>,d0
   12aae:	|      movea.l d0,a6
   12ab0:	|      movea.l 4(sp),a1
   12ab4:	|      jsr -690(a6)
	return BR_CONTINUE;
   12ab8:	|      moveq #2,d0
}
   12aba:	'----> movea.l (sp)+,a6
   12abc:	       lea 16(sp),sp
   12ac0:	       rts

00012ac2 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   12ac2:	       lea -28(sp),sp
   12ac6:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   12ac8:	       movea.l 40(sp),a0
   12acc:	       move.l 24(a0),d0
   12ad0:	       move.l d0,-(sp)
   12ad2:	       jsr 14c1e <getTextFromAnyVar>
   12ad8:	       addq.l #4,sp
   12ada:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   12ade:	   ,-- bne.s 12ae6 <builtIn_loadCustomData+0x24>
   12ae0:	   |   moveq #1,d0
   12ae2:	,--|-- bra.w 12be2 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   12ae6:	|  '-> move.l 28(sp),-(sp)
   12aea:	|      jsr 2fe <encodeFilename>
   12af0:	|      addq.l #4,sp
   12af2:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   12af6:	|      move.l 28(sp),20(sp)
   12afc:	|      move.l 1c810 <SysBase>,d0
   12b02:	|      movea.l d0,a6
   12b04:	|      movea.l 20(sp),a1
   12b08:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   12b0c:	|      move.l 24(sp),-(sp)
   12b10:	|      jsr e19a <failSecurityCheck>
   12b16:	|      addq.l #4,sp
   12b18:	|      tst.w d0
   12b1a:	|  ,-- beq.s 12b22 <builtIn_loadCustomData+0x60>
   12b1c:	|  |   moveq #1,d0
   12b1e:	+--|-- bra.w 12be2 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   12b22:	|  '-> moveq #24,d0
   12b24:	|      add.l 40(sp),d0
   12b28:	|      move.l d0,-(sp)
   12b2a:	|      jsr 14fcc <trimStack>
   12b30:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   12b32:	|      moveq #28,d0
   12b34:	|      add.l 40(sp),d0
   12b38:	|      move.l d0,-(sp)
   12b3a:	|      jsr 14896 <unlinkVar>
   12b40:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   12b42:	|      movea.l 40(sp),a0
   12b46:	|      moveq #6,d0
   12b48:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   12b4c:	|      moveq #12,d0
   12b4e:	|      move.l d0,16(sp)
   12b52:	|      clr.l 12(sp)
   12b56:	|      move.l 1c810 <SysBase>,d0
   12b5c:	|      movea.l d0,a6
   12b5e:	|      move.l 16(sp),d0
   12b62:	|      move.l 12(sp),d1
   12b66:	|      jsr -684(a6)
   12b6a:	|      move.l d0,8(sp)
   12b6e:	|      move.l 8(sp),d0
   12b72:	|      movea.l 40(sp),a0
   12b76:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   12b7a:	|      movea.l 40(sp),a0
   12b7e:	|      move.l 32(a0),d0
   12b82:	|  ,-- bne.s 12b88 <builtIn_loadCustomData+0xc6>
   12b84:	|  |   moveq #1,d0
   12b86:	+--|-- bra.s 12be2 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   12b88:	|  '-> movea.l 40(sp),a0
   12b8c:	|      movea.l 32(a0),a0
   12b90:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   12b92:	|      movea.l 40(sp),a0
   12b96:	|      movea.l 32(a0),a0
   12b9a:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   12b9e:	|      movea.l 40(sp),a0
   12ba2:	|      movea.l 32(a0),a0
   12ba6:	|      moveq #1,d0
   12ba8:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   12bac:	|      movea.l 40(sp),a0
   12bb0:	|      move.l 32(a0),d0
   12bb4:	|      move.l d0,-(sp)
   12bb6:	|      move.l 28(sp),-(sp)
   12bba:	|      jsr d824 <fileToStack>
   12bc0:	|      addq.l #8,sp
   12bc2:	|      tst.w d0
   12bc4:	|  ,-- bne.s 12bca <builtIn_loadCustomData+0x108>
   12bc6:	|  |   moveq #1,d0
   12bc8:	+--|-- bra.s 12be2 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   12bca:	|  '-> move.l 24(sp),4(sp)
   12bd0:	|      move.l 1c810 <SysBase>,d0
   12bd6:	|      movea.l d0,a6
   12bd8:	|      movea.l 4(sp),a1
   12bdc:	|      jsr -690(a6)
	return BR_CONTINUE;
   12be0:	|      moveq #2,d0
}
   12be2:	'----> movea.l (sp)+,a6
   12be4:	       lea 28(sp),sp
   12be8:	       rts

00012bea <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   12bea:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12bec:	       movea.l 12(sp),a0
   12bf0:	       move.l 24(a0),d0
   12bf4:	       move.l d0,-(sp)
   12bf6:	       pea 1 <_start+0x1>
   12bfa:	       move.l sp,d0
   12bfc:	       addq.l #8,d0
   12bfe:	       move.l d0,-(sp)
   12c00:	       jsr 14648 <getValueType>
   12c06:	       lea 12(sp),sp
   12c0a:	       tst.w d0
   12c0c:	   ,-- bne.s 12c12 <builtIn_setCustomEncoding+0x28>
   12c0e:	   |   moveq #1,d0
   12c10:	,--|-- bra.s 12c48 <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   12c12:	|  '-> move.l (sp),d0
   12c14:	|      move.l d0,d0
   12c16:	|      move.w d0,1c8c4 <saveEncoding>
	trimStack (&fun -> stack);
   12c1c:	|      moveq #24,d0
   12c1e:	|      add.l 12(sp),d0
   12c22:	|      move.l d0,-(sp)
   12c24:	|      jsr 14fcc <trimStack>
   12c2a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12c2c:	|      moveq #28,d0
   12c2e:	|      add.l 12(sp),d0
   12c32:	|      pea 1 <_start+0x1>
   12c36:	|      pea 1 <_start+0x1>
   12c3a:	|      move.l d0,-(sp)
   12c3c:	|      jsr 14f3a <setVariable>
   12c42:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12c46:	|      moveq #2,d0
}
   12c48:	'----> addq.l #4,sp
   12c4a:	       rts

00012c4c <builtIn_freeSound>:

builtIn(freeSound)
{
   12c4c:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12c4e:	       movea.l 12(sp),a0
   12c52:	       move.l 24(a0),d0
   12c56:	       move.l d0,-(sp)
   12c58:	       pea 5 <_start+0x5>
   12c5c:	       move.l sp,d0
   12c5e:	       addq.l #8,d0
   12c60:	       move.l d0,-(sp)
   12c62:	       jsr 14648 <getValueType>
   12c68:	       lea 12(sp),sp
   12c6c:	       tst.w d0
   12c6e:	   ,-- bne.s 12c74 <builtIn_freeSound+0x28>
   12c70:	   |   moveq #1,d0
   12c72:	,--|-- bra.s 12c92 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   12c74:	|  '-> moveq #24,d0
   12c76:	|      add.l 12(sp),d0
   12c7a:	|      move.l d0,-(sp)
   12c7c:	|      jsr 14fcc <trimStack>
   12c82:	|      addq.l #4,sp
	huntKillFreeSound (v);
   12c84:	|      move.l (sp),d0
   12c86:	|      move.l d0,-(sp)
   12c88:	|      jsr cfdc <huntKillFreeSound>
   12c8e:	|      addq.l #4,sp
	return BR_CONTINUE;
   12c90:	|      moveq #2,d0
}
   12c92:	'----> addq.l #4,sp
   12c94:	       rts

00012c96 <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   12c96:	       lea -12(sp),sp
   12c9a:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12c9c:	       movea.l 24(sp),a0
   12ca0:	       move.l 24(a0),d0
   12ca4:	       move.l d0,-(sp)
   12ca6:	       pea 1 <_start+0x1>
   12caa:	       moveq #16,d0
   12cac:	       add.l sp,d0
   12cae:	       move.l d0,-(sp)
   12cb0:	       jsr 14648 <getValueType>
   12cb6:	       lea 12(sp),sp
   12cba:	       tst.w d0
   12cbc:	   ,-- bne.s 12cc4 <builtIn_parallaxAdd+0x2e>
   12cbe:	   |   moveq #1,d0
   12cc0:	,--|-- bra.w 12d98 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12cc4:	|  '-> moveq #24,d0
   12cc6:	|      add.l 24(sp),d0
   12cca:	|      move.l d0,-(sp)
   12ccc:	|      jsr 14fcc <trimStack>
   12cd2:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12cd4:	|      movea.l 24(sp),a0
   12cd8:	|      move.l 24(a0),d0
   12cdc:	|      move.l d0,-(sp)
   12cde:	|      pea 1 <_start+0x1>
   12ce2:	|      moveq #20,d0
   12ce4:	|      add.l sp,d0
   12ce6:	|      move.l d0,-(sp)
   12ce8:	|      jsr 14648 <getValueType>
   12cee:	|      lea 12(sp),sp
   12cf2:	|      tst.w d0
   12cf4:	|  ,-- bne.s 12cfc <builtIn_parallaxAdd+0x66>
   12cf6:	|  |   moveq #1,d0
   12cf8:	+--|-- bra.w 12d98 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12cfc:	|  '-> moveq #24,d0
   12cfe:	|      add.l 24(sp),d0
   12d02:	|      move.l d0,-(sp)
   12d04:	|      jsr 14fcc <trimStack>
   12d0a:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12d0c:	|      movea.l 24(sp),a0
   12d10:	|      move.l 24(a0),d0
   12d14:	|      move.l d0,-(sp)
   12d16:	|      pea 5 <_start+0x5>
   12d1a:	|      lea 12(sp),a0
   12d1e:	|      move.l a0,-(sp)
   12d20:	|      jsr 14648 <getValueType>
   12d26:	|      lea 12(sp),sp
   12d2a:	|      tst.w d0
   12d2c:	|  ,-- bne.s 12d32 <builtIn_parallaxAdd+0x9c>
   12d2e:	|  |   moveq #1,d0
   12d30:	+--|-- bra.s 12d98 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12d32:	|  '-> moveq #24,d0
   12d34:	|      add.l 24(sp),d0
   12d38:	|      move.l d0,-(sp)
   12d3a:	|      jsr 14fcc <trimStack>
   12d40:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   12d42:	|      move.l 8(sp),d0
   12d46:	|      move.l d0,d0
   12d48:	|      moveq #0,d2
   12d4a:	|      move.w d0,d2
   12d4c:	|      move.l 12(sp),d0
   12d50:	|      move.l d0,d0
   12d52:	|      moveq #0,d1
   12d54:	|      move.w d0,d1
   12d56:	|      move.l 4(sp),d0
   12d5a:	|      move.l d0,d0
   12d5c:	|      move.w d0,d0
   12d5e:	|      andi.l #65535,d0
   12d64:	|      move.l d2,-(sp)
   12d66:	|      move.l d1,-(sp)
   12d68:	|      move.l d0,-(sp)
   12d6a:	|      jsr d202 <loadParallax>
   12d70:	|      lea 12(sp),sp
   12d74:	|      tst.w d0
   12d76:	|  ,-- bne.s 12d7c <builtIn_parallaxAdd+0xe6>
   12d78:	|  |   moveq #1,d0
   12d7a:	+--|-- bra.s 12d98 <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   12d7c:	|  '-> moveq #28,d0
   12d7e:	|      add.l 24(sp),d0
   12d82:	|      pea 1 <_start+0x1>
   12d86:	|      pea 1 <_start+0x1>
   12d8a:	|      move.l d0,-(sp)
   12d8c:	|      jsr 14f3a <setVariable>
   12d92:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   12d96:	|      moveq #2,d0
}
   12d98:	'----> move.l (sp)+,d2
   12d9a:	       lea 12(sp),sp
   12d9e:	       rts

00012da0 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   12da0:	jsr d13a <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   12da6:	moveq #28,d0
   12da8:	add.l 8(sp),d0
   12dac:	pea 1 <_start+0x1>
   12db0:	pea 1 <_start+0x1>
   12db4:	move.l d0,-(sp)
   12db6:	jsr 14f3a <setVariable>
   12dbc:	lea 12(sp),sp
	return BR_CONTINUE;
   12dc0:	moveq #2,d0
}
   12dc2:	rts

00012dc4 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   12dc4:	pea 19b08 <talk.c.490538ff+0x1a3>
   12dca:	jsr 1710c <KPrintF>
   12dd0:	addq.l #4,sp

	return BR_CONTINUE;
   12dd2:	moveq #2,d0
}
   12dd4:	rts

00012dd6 <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   12dd6:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   12dd8:	             movea.l 16(sp),a0
   12ddc:	             movea.l 24(a0),a0
   12de0:	             move.l (a0),d0
   12de2:	             moveq #1,d1
   12de4:	             cmp.l d0,d1
   12de6:	      ,----- beq.s 12e2e <builtIn_makeFastArray+0x58>
   12de8:	      |      moveq #6,d1
   12dea:	      |      cmp.l d0,d1
   12dec:	,-----|----- bne.s 12e6c <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   12dee:	|     |      movea.l 16(sp),a0
   12df2:	|     |      movea.l 24(a0),a0
   12df6:	|     |      move.l 4(a0),d1
   12dfa:	|     |      moveq #28,d0
   12dfc:	|     |      add.l 16(sp),d0
   12e00:	|     |      move.l d1,-(sp)
   12e02:	|     |      move.l d0,-(sp)
   12e04:	|     |      jsr 146fa <makeFastArrayFromStack>
   12e0a:	|     |      addq.l #8,sp
   12e0c:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   12e10:	|     |      moveq #24,d0
   12e12:	|     |      add.l 16(sp),d0
   12e16:	|     |      move.l d0,-(sp)
   12e18:	|     |      jsr 14fcc <trimStack>
   12e1e:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   12e20:	|     |      tst.w 6(sp)
   12e24:	|     |  ,-- beq.s 12e2a <builtIn_makeFastArray+0x54>
   12e26:	|     |  |   moveq #2,d0
   12e28:	|  ,--|--|-- bra.s 12e7e <builtIn_makeFastArray+0xa8>
   12e2a:	|  |  |  '-> moveq #1,d0
   12e2c:	|  +--|----- bra.s 12e7e <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   12e2e:	|  |  '----> movea.l 16(sp),a0
   12e32:	|  |         movea.l 24(a0),a0
   12e36:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   12e3c:	|  |         moveq #24,d0
   12e3e:	|  |         add.l 16(sp),d0
   12e42:	|  |         move.l d0,-(sp)
   12e44:	|  |         jsr 14fcc <trimStack>
   12e4a:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   12e4c:	|  |         moveq #28,d0
   12e4e:	|  |         add.l 16(sp),d0
   12e52:	|  |         move.l 2(sp),-(sp)
   12e56:	|  |         move.l d0,-(sp)
   12e58:	|  |         jsr 14764 <makeFastArraySize>
   12e5e:	|  |         addq.l #8,sp
   12e60:	|  |         tst.w d0
   12e62:	|  |     ,-- beq.s 12e68 <builtIn_makeFastArray+0x92>
   12e64:	|  |     |   moveq #2,d0
   12e66:	|  +-----|-- bra.s 12e7e <builtIn_makeFastArray+0xa8>
   12e68:	|  |     '-> moveq #1,d0
   12e6a:	|  +-------- bra.s 12e7e <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   12e6c:	'--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   12e6e:	   |         pea 19b31 <talk.c.490538ff+0x1cc>
   12e74:	   |         jsr 1710c <KPrintF>
   12e7a:	   |         addq.l #4,sp
	return BR_ERROR;
   12e7c:	   |         moveq #1,d0
}
   12e7e:	   '-------> addq.l #8,sp
   12e80:	             rts

00012e82 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   12e82:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12e84:	          movea.l 16(sp),a0
   12e88:	          move.l 24(a0),d0
   12e8c:	          move.l d0,-(sp)
   12e8e:	          pea 7 <_start+0x7>
   12e92:	          move.l sp,d0
   12e94:	          addq.l #8,d0
   12e96:	          move.l d0,-(sp)
   12e98:	          jsr 14648 <getValueType>
   12e9e:	          lea 12(sp),sp
   12ea2:	          tst.w d0
   12ea4:	      ,-- bne.s 12eaa <builtIn_getCharacterScale+0x28>
   12ea6:	      |   moveq #1,d0
   12ea8:	,-----|-- bra.s 12f24 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   12eaa:	|     '-> moveq #24,d0
   12eac:	|         add.l 16(sp),d0
   12eb0:	|         move.l d0,-(sp)
   12eb2:	|         jsr 14fcc <trimStack>
   12eb8:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   12eba:	|         move.l (sp),d0
   12ebc:	|         move.l d0,-(sp)
   12ebe:	|         jsr a4a2 <findPerson>
   12ec4:	|         addq.l #4,sp
   12ec6:	|         move.l d0,4(sp)
	if (pers) {
   12eca:	|  ,----- beq.s 12f0a <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   12ecc:	|  |      movea.l 4(sp),a0
   12ed0:	|  |      move.l 32(a0),d0
   12ed4:	|  |      move.l #1120403456,-(sp)
   12eda:	|  |      move.l d0,-(sp)
   12edc:	|  |      jsr 175f0 <__mulsf3>
   12ee2:	|  |      addq.l #8,sp
   12ee4:	|  |      move.l d0,-(sp)
   12ee6:	|  |      jsr 174d6 <__fixsfsi>
   12eec:	|  |      addq.l #4,sp
   12eee:	|  |      move.l d0,d1
   12ef0:	|  |      moveq #28,d0
   12ef2:	|  |      add.l 16(sp),d0
   12ef6:	|  |      move.l d1,-(sp)
   12ef8:	|  |      pea 1 <_start+0x1>
   12efc:	|  |      move.l d0,-(sp)
   12efe:	|  |      jsr 14f3a <setVariable>
   12f04:	|  |      lea 12(sp),sp
   12f08:	|  |  ,-- bra.s 12f22 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12f0a:	|  '--|-> moveq #28,d0
   12f0c:	|     |   add.l 16(sp),d0
   12f10:	|     |   clr.l -(sp)
   12f12:	|     |   pea 1 <_start+0x1>
   12f16:	|     |   move.l d0,-(sp)
   12f18:	|     |   jsr 14f3a <setVariable>
   12f1e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12f22:	|     '-> moveq #2,d0
}
   12f24:	'-------> addq.l #8,sp
   12f26:	          rts

00012f28 <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   12f28:	move.l 1c8e8 <gameSettings>,d0
   12f2e:	move.l d0,d1
   12f30:	moveq #28,d0
   12f32:	add.l 8(sp),d0
   12f36:	move.l d1,-(sp)
   12f38:	pea 1 <_start+0x1>
   12f3c:	move.l d0,-(sp)
   12f3e:	jsr 14f3a <setVariable>
   12f44:	lea 12(sp),sp
	return BR_CONTINUE;
   12f48:	moveq #2,d0
}
   12f4a:	rts

00012f4c <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   12f4c:	moveq #24,d0
   12f4e:	add.l 8(sp),d0
   12f52:	move.l d0,-(sp)
   12f54:	jsr 14fcc <trimStack>
   12f5a:	addq.l #4,sp
	trimStack (&fun -> stack);
   12f5c:	moveq #24,d0
   12f5e:	add.l 8(sp),d0
   12f62:	move.l d0,-(sp)
   12f64:	jsr 14fcc <trimStack>
   12f6a:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   12f6c:	moveq #28,d0
   12f6e:	add.l 8(sp),d0
   12f72:	clr.l -(sp)
   12f74:	pea 1 <_start+0x1>
   12f78:	move.l d0,-(sp)
   12f7a:	jsr 14f3a <setVariable>
   12f80:	lea 12(sp),sp

	return BR_CONTINUE;
   12f84:	moveq #2,d0

}
   12f86:	rts

00012f88 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   12f88:	move.l 1c188 <lastFramesPerSecond>,d1
   12f8e:	moveq #28,d0
   12f90:	add.l 8(sp),d0
   12f94:	move.l d1,-(sp)
   12f96:	pea 1 <_start+0x1>
   12f9a:	move.l d0,-(sp)
   12f9c:	jsr 14f3a <setVariable>
   12fa2:	lea 12(sp),sp
	return BR_CONTINUE;
   12fa6:	moveq #2,d0
}
   12fa8:	rts

00012faa <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   12faa:	moveq #2,d0
}
   12fac:	rts

00012fae <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   12fae:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12fb2:	          movea.l 60(sp),a0
   12fb6:	          move.l 24(a0),d0
   12fba:	          move.l d0,-(sp)
   12fbc:	          pea 1 <_start+0x1>
   12fc0:	          pea 1c71a <thumbHeight>
   12fc6:	          jsr 14648 <getValueType>
   12fcc:	          lea 12(sp),sp
   12fd0:	          tst.w d0
   12fd2:	      ,-- bne.s 12fda <builtIn_setThumbnailSize+0x2c>
   12fd4:	      |   moveq #1,d0
   12fd6:	,-----|-- bra.w 13096 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   12fda:	|     '-> moveq #24,d0
   12fdc:	|         add.l 60(sp),d0
   12fe0:	|         move.l d0,-(sp)
   12fe2:	|         jsr 14fcc <trimStack>
   12fe8:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12fea:	|         movea.l 60(sp),a0
   12fee:	|         move.l 24(a0),d0
   12ff2:	|         move.l d0,-(sp)
   12ff4:	|         pea 1 <_start+0x1>
   12ff8:	|         pea 1c716 <thumbWidth>
   12ffe:	|         jsr 14648 <getValueType>
   13004:	|         lea 12(sp),sp
   13008:	|         tst.w d0
   1300a:	|     ,-- bne.s 13012 <builtIn_setThumbnailSize+0x64>
   1300c:	|     |   moveq #1,d0
   1300e:	+-----|-- bra.w 13096 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   13012:	|     '-> moveq #24,d0
   13014:	|         add.l 60(sp),d0
   13018:	|         move.l d0,-(sp)
   1301a:	|         jsr 14fcc <trimStack>
   13020:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   13022:	|         move.l 1c716 <thumbWidth>,d0
   13028:	|     ,-- bmi.s 13056 <builtIn_setThumbnailSize+0xa8>
   1302a:	|     |   move.l 1c71a <thumbHeight>,d0
   13030:	|     +-- bmi.s 13056 <builtIn_setThumbnailSize+0xa8>
   13032:	|     |   move.l 1c716 <thumbWidth>,d0
   13038:	|     |   move.l d0,d1
   1303a:	|     |   move.l 1c764 <winWidth>,d0
   13040:	|     |   cmp.l d1,d0
   13042:	|     +-- bcs.s 13056 <builtIn_setThumbnailSize+0xa8>
   13044:	|     |   move.l 1c71a <thumbHeight>,d0
   1304a:	|     |   move.l d0,d1
   1304c:	|     |   move.l 1c768 <winHeight>,d0
   13052:	|     |   cmp.l d1,d0
   13054:	|  ,--|-- bcc.s 13094 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   13056:	|  |  '-> move.l 1c71a <thumbHeight>,d1
   1305c:	|  |      move.l 1c716 <thumbWidth>,d0
   13062:	|  |      move.l d1,-(sp)
   13064:	|  |      move.l d0,-(sp)
   13066:	|  |      pea 19b58 <talk.c.490538ff+0x1f3>
   1306c:	|  |      lea 14(sp),a0
   13070:	|  |      move.l a0,-(sp)
   13072:	|  |      jsr 13e52 <sprintf>
   13078:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   1307c:	|  |      lea 2(sp),a0
   13080:	|  |      move.l a0,-(sp)
   13082:	|  |      pea 19b60 <talk.c.490538ff+0x1fb>
   13088:	|  |      jsr 1710c <KPrintF>
   1308e:	|  |      addq.l #8,sp
		return BR_ERROR;
   13090:	|  |      moveq #1,d0
   13092:	+--|----- bra.s 13096 <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   13094:	|  '----> moveq #2,d0
}
   13096:	'-------> lea 52(sp),sp
   1309a:	          rts

0001309c <builtIn_hasFlag>:

builtIn(hasFlag)
{
   1309c:	       lea -12(sp),sp
   130a0:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   130a2:	       movea.l 24(sp),a0
   130a6:	       move.l 24(a0),d0
   130aa:	       move.l d0,-(sp)
   130ac:	       pea 1 <_start+0x1>
   130b0:	       lea 12(sp),a0
   130b4:	       move.l a0,-(sp)
   130b6:	       jsr 14648 <getValueType>
   130bc:	       lea 12(sp),sp
   130c0:	       tst.w d0
   130c2:	   ,-- bne.s 130ca <builtIn_hasFlag+0x2e>
   130c4:	   |   moveq #1,d0
   130c6:	,--|-- bra.w 1315a <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   130ca:	|  '-> moveq #24,d0
   130cc:	|      add.l 24(sp),d0
   130d0:	|      move.l d0,-(sp)
   130d2:	|      jsr 14fcc <trimStack>
   130d8:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   130da:	|      movea.l 24(sp),a0
   130de:	|      move.l 24(a0),d0
   130e2:	|      move.l d0,-(sp)
   130e4:	|      pea 7 <_start+0x7>
   130e8:	|      moveq #16,d0
   130ea:	|      add.l sp,d0
   130ec:	|      move.l d0,-(sp)
   130ee:	|      jsr 14648 <getValueType>
   130f4:	|      lea 12(sp),sp
   130f8:	|      tst.w d0
   130fa:	|  ,-- bne.s 13100 <builtIn_hasFlag+0x64>
   130fc:	|  |   moveq #1,d0
   130fe:	+--|-- bra.s 1315a <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   13100:	|  '-> moveq #24,d0
   13102:	|      add.l 24(sp),d0
   13106:	|      move.l d0,-(sp)
   13108:	|      jsr 14fcc <trimStack>
   1310e:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   13110:	|      move.l 8(sp),d0
   13114:	|      move.l d0,-(sp)
   13116:	|      jsr d3ae <findObjectType>
   1311c:	|      addq.l #4,sp
   1311e:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   13122:	|  ,-- bne.s 13128 <builtIn_hasFlag+0x8c>
   13124:	|  |   moveq #1,d0
   13126:	+--|-- bra.s 1315a <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   13128:	|  '-> movea.l 12(sp),a0
   1312c:	|      move.w 36(a0),d0
   13130:	|      moveq #0,d2
   13132:	|      move.w d0,d2
   13134:	|      move.l 4(sp),d1
   13138:	|      moveq #1,d0
   1313a:	|      lsl.l d1,d0
   1313c:	|      move.l d2,d1
   1313e:	|      and.l d0,d1
   13140:	|      moveq #28,d0
   13142:	|      add.l 24(sp),d0
   13146:	|      move.l d1,-(sp)
   13148:	|      pea 1 <_start+0x1>
   1314c:	|      move.l d0,-(sp)
   1314e:	|      jsr 14f3a <setVariable>
   13154:	|      lea 12(sp),sp
	return BR_CONTINUE;
   13158:	|      moveq #2,d0
}
   1315a:	'----> move.l (sp)+,d2
   1315c:	       lea 12(sp),sp
   13160:	       rts

00013162 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   13162:	       jsr d39c <snapshot>
   13168:	       tst.w d0
   1316a:	,----- beq.s 13170 <builtIn_snapshotGrab+0xe>
   1316c:	|      moveq #2,d0
   1316e:	|  ,-- bra.s 13172 <builtIn_snapshotGrab+0x10>
   13170:	'--|-> moveq #1,d0
}
   13172:	   '-> rts

00013174 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   13174:	jsr d248 <nosnapshot>
	return BR_CONTINUE;
   1317a:	moveq #2,d0
}
   1317c:	rts

0001317e <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   1317e:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   13180:	move.w 1c060 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   13188:	movea.l 12(sp),a0
   1318c:	move.l 24(a0),d0
   13190:	move.l d0,-(sp)
   13192:	jsr 14b88 <getBoolean>
   13198:	addq.l #4,sp
   1319a:	move.w d0,1c060 <allowAnyFilename>
	trimStack (&fun -> stack);
   131a0:	moveq #24,d0
   131a2:	add.l 12(sp),d0
   131a6:	move.l d0,-(sp)
   131a8:	jsr 14fcc <trimStack>
   131ae:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   131b0:	movea.w 2(sp),a0
   131b4:	moveq #28,d0
   131b6:	add.l 12(sp),d0
   131ba:	move.l a0,-(sp)
   131bc:	pea 1 <_start+0x1>
   131c0:	move.l d0,-(sp)
   131c2:	jsr 14f3a <setVariable>
   131c8:	lea 12(sp),sp
	return BR_CONTINUE;
   131cc:	moveq #2,d0
}
   131ce:	addq.l #4,sp
   131d0:	rts

000131d2 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   131d2:	moveq #24,d0
   131d4:	add.l 8(sp),d0
   131d8:	move.l d0,-(sp)
   131da:	jsr 14fcc <trimStack>
   131e0:	addq.l #4,sp
	trimStack (&fun -> stack);
   131e2:	moveq #24,d0
   131e4:	add.l 8(sp),d0
   131e8:	move.l d0,-(sp)
   131ea:	jsr 14fcc <trimStack>
   131f0:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   131f2:	moveq #28,d0
   131f4:	add.l 8(sp),d0
   131f8:	clr.l -(sp)
   131fa:	pea 1 <_start+0x1>
   131fe:	move.l d0,-(sp)
   13200:	jsr 14f3a <setVariable>
   13206:	lea 12(sp),sp

	return BR_CONTINUE;
   1320a:	moveq #2,d0
}
   1320c:	rts

0001320e <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   1320e:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   13210:	movea.l 12(sp),a0
   13214:	move.l 24(a0),d0
   13218:	move.l d0,-(sp)
   1321a:	jsr 14c1e <getTextFromAnyVar>
   13220:	addq.l #4,sp
   13222:	move.l d0,(sp)
	trimStack (&fun -> stack);
   13224:	moveq #24,d0
   13226:	add.l 12(sp),d0
   1322a:	move.l d0,-(sp)
   1322c:	jsr 14fcc <trimStack>
   13232:	addq.l #4,sp
	KPrintF (mess);
   13234:	move.l (sp),-(sp)
   13236:	jsr 1710c <KPrintF>
   1323c:	addq.l #4,sp
	return BR_ERROR;
   1323e:	moveq #1,d0
}
   13240:	addq.l #4,sp
   13242:	rts

00013244 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   13244:	moveq #24,d0
   13246:	add.l 8(sp),d0
   1324a:	move.l d0,-(sp)
   1324c:	jsr 14fcc <trimStack>
   13252:	addq.l #4,sp
	trimStack (&fun -> stack);
   13254:	moveq #24,d0
   13256:	add.l 8(sp),d0
   1325a:	move.l d0,-(sp)
   1325c:	jsr 14fcc <trimStack>
   13262:	addq.l #4,sp
	trimStack (&fun -> stack);
   13264:	moveq #24,d0
   13266:	add.l 8(sp),d0
   1326a:	move.l d0,-(sp)
   1326c:	jsr 14fcc <trimStack>
   13272:	addq.l #4,sp
	trimStack (&fun -> stack);
   13274:	moveq #24,d0
   13276:	add.l 8(sp),d0
   1327a:	move.l d0,-(sp)
   1327c:	jsr 14fcc <trimStack>
   13282:	addq.l #4,sp

	return BR_CONTINUE;
   13284:	moveq #2,d0
}
   13286:	rts

00013288 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   13288:	moveq #24,d0
   1328a:	add.l 8(sp),d0
   1328e:	move.l d0,-(sp)
   13290:	jsr 14fcc <trimStack>
   13296:	addq.l #4,sp
	trimStack (&fun -> stack);
   13298:	moveq #24,d0
   1329a:	add.l 8(sp),d0
   1329e:	move.l d0,-(sp)
   132a0:	jsr 14fcc <trimStack>
   132a6:	addq.l #4,sp
	trimStack (&fun -> stack);
   132a8:	moveq #24,d0
   132aa:	add.l 8(sp),d0
   132ae:	move.l d0,-(sp)
   132b0:	jsr 14fcc <trimStack>
   132b6:	addq.l #4,sp

	return BR_CONTINUE;
   132b8:	moveq #2,d0

}
   132ba:	rts

000132bc <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   132bc:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   132be:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   132c4:	sne d0
   132c6:	neg.b d0
   132c8:	moveq #0,d1
   132ca:	move.b d0,d1
   132cc:	moveq #28,d0
   132ce:	add.l 12(sp),d0
   132d2:	move.l d1,-(sp)
   132d4:	pea 1 <_start+0x1>
   132d8:	move.l d0,-(sp)
   132da:	jsr 14f3a <setVariable>
   132e0:	lea 12(sp),sp
	return BR_CONTINUE;
   132e4:	moveq #2,d0
}
   132e6:	addq.l #4,sp
   132e8:	rts

000132ea <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   132ea:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   132ec:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   132f2:	pea 19b77 <talk.c.490538ff+0x212>
   132f8:	jsr 1710c <KPrintF>
   132fe:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   13300:	tst.w 2(sp)
   13304:	sne d0
   13306:	neg.b d0
   13308:	moveq #0,d1
   1330a:	move.b d0,d1
   1330c:	moveq #28,d0
   1330e:	add.l 12(sp),d0
   13312:	move.l d1,-(sp)
   13314:	pea 1 <_start+0x1>
   13318:	move.l d0,-(sp)
   1331a:	jsr 14f3a <setVariable>
   13320:	lea 12(sp),sp
	return BR_CONTINUE;
   13324:	moveq #2,d0
}
   13326:	addq.l #4,sp
   13328:	rts

0001332a <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   1332a:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   1332e:	             move.l 104(sp),d0
   13332:	             cmpi.l #166,d0
   13338:	,----------- bhi.w 1341a <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   1333c:	|            move.l 104(sp),d0
   13340:	|            add.l d0,d0
   13342:	|            movea.l d0,a1
   13344:	|            adda.l d0,a1
   13346:	|            lea 1c1a6 <paramNum>,a0
   1334c:	|            move.l (0,a1,a0.l),d0
   13350:	|            moveq #-1,d1
   13352:	|            cmp.l d0,d1
   13354:	|  ,-------- beq.w 133e2 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   13358:	|  |         move.l 104(sp),d0
   1335c:	|  |         add.l d0,d0
   1335e:	|  |         movea.l d0,a1
   13360:	|  |         adda.l d0,a1
   13362:	|  |         lea 1c1a6 <paramNum>,a0
   13368:	|  |         move.l (0,a1,a0.l),d0
   1336c:	|  |         cmp.l 108(sp),d0
   13370:	|  +-------- beq.s 133e2 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   13372:	|  |         move.l 104(sp),d0
   13376:	|  |         add.l d0,d0
   13378:	|  |         movea.l d0,a1
   1337a:	|  |         adda.l d0,a1
   1337c:	|  |         lea 1c1a6 <paramNum>,a0
   13382:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   13386:	|  |         moveq #1,d1
   13388:	|  |         cmp.l d0,d1
   1338a:	|  |  ,----- bne.s 13394 <callBuiltIn+0x6a>
   1338c:	|  |  |      move.l #100603,d0
   13392:	|  |  |  ,-- bra.s 1339a <callBuiltIn+0x70>
   13394:	|  |  '--|-> move.l #105389,d0
   1339a:	|  |     '-> move.l 104(sp),d1
   1339e:	|  |         add.l d1,d1
   133a0:	|  |         movea.l d1,a1
   133a2:	|  |         adda.l d1,a1
   133a4:	|  |         lea 1c1a6 <paramNum>,a0
   133aa:	|  |         move.l (0,a1,a0.l),d1
   133ae:	|  |         move.l d0,-(sp)
   133b0:	|  |         move.l d1,-(sp)
   133b2:	|  |         pea 19baf <talk.c.490538ff+0x24a>
   133b8:	|  |         lea 12(sp),a0
   133bc:	|  |         move.l a0,-(sp)
   133be:	|  |         jsr 13e52 <sprintf>
   133c4:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   133c8:	|  |         movea.l sp,a0
   133ca:	|  |         move.l a0,-(sp)
   133cc:	|  |         jsr b8 <copyString>
   133d2:	|  |         addq.l #4,sp
   133d4:	|  |         move.l d0,-(sp)
   133d6:	|  |         jsr 1710c <KPrintF>
   133dc:	|  |         addq.l #4,sp
				return BR_ERROR;
   133de:	|  |         moveq #1,d0
   133e0:	|  |     ,-- bra.s 1342a <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   133e2:	|  '-----|-> move.l 104(sp),d0
   133e6:	|        |   add.l d0,d0
   133e8:	|        |   movea.l d0,a1
   133ea:	|        |   adda.l d0,a1
   133ec:	|        |   lea 1c442 <builtInFunctionArray>,a0
   133f2:	|        |   move.l (0,a1,a0.l),d0
   133f6:	+--------|-- beq.s 1341a <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   133f8:	|        |   move.l 104(sp),d0
   133fc:	|        |   add.l d0,d0
   133fe:	|        |   movea.l d0,a1
   13400:	|        |   adda.l d0,a1
   13402:	|        |   lea 1c442 <builtInFunctionArray>,a0
   13408:	|        |   movea.l (0,a1,a0.l),a0
   1340c:	|        |   move.l 112(sp),-(sp)
   13410:	|        |   move.l 112(sp),-(sp)
   13414:	|        |   jsr (a0)
   13416:	|        |   addq.l #8,sp
   13418:	|        +-- bra.s 1342a <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   1341a:	'--------|-> pea 19bda <talk.c.490538ff+0x275>
   13420:	         |   jsr 1710c <KPrintF>
   13426:	         |   addq.l #4,sp
	return BR_ERROR;
   13428:	         |   moveq #1,d0
}
   1342a:	         '-> lea 100(sp),sp
   1342e:	             rts

00013430 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   13430:	          subq.l #8,sp
	int indexNum = -1;
   13432:	          moveq #-1,d0
   13434:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13438:	          clr.l (sp)
   1343a:	   ,----- bra.s 13460 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   1343c:	,--|----> move.l 1c8e0 <languageTable>,d1
   13442:	|  |      move.l (sp),d0
   13444:	|  |      add.l d0,d0
   13446:	|  |      add.l d0,d0
   13448:	|  |      movea.l d1,a0
   1344a:	|  |      adda.l d0,a0
   1344c:	|  |      move.l (a0),d0
   1344e:	|  |      move.l d0,d1
   13450:	|  |      move.l 1c8e8 <gameSettings>,d0
   13456:	|  |      cmp.l d1,d0
   13458:	|  |  ,-- bne.s 1345e <getLanguageForFileB+0x2e>
   1345a:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1345e:	|  |  '-> addq.l #1,(sp)
   13460:	|  '----> move.l 1c8ec <gameSettings+0x4>,d0
   13466:	|         cmp.l (sp),d0
   13468:	'-------- bcc.s 1343c <getLanguageForFileB+0xc>
	}

	return indexNum;
   1346a:	          move.l 4(sp),d0
}
   1346e:	          addq.l #8,sp
   13470:	          rts

00013472 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   13472:	          lea -20(sp),sp
   13476:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   13478:	          move.l 28(sp),-(sp)
   1347c:	          jsr 13b34 <strlen>
   13482:	          addq.l #4,sp
   13484:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   13488:	          moveq #4,d0
   1348a:	          cmp.l 12(sp),d0
   1348e:	      ,-- bge.s 134b2 <getPrefsFilename+0x40>
   13490:	      |   move.l 12(sp),d0
   13494:	      |   subq.l #4,d0
   13496:	      |   movea.l 28(sp),a0
   1349a:	      |   adda.l d0,a0
   1349c:	      |   move.b (a0),d0
   1349e:	      |   cmpi.b #46,d0
   134a2:	      +-- bne.s 134b2 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   134a4:	      |   move.l 12(sp),d0
   134a8:	      |   subq.l #4,d0
   134aa:	      |   movea.l 28(sp),a0
   134ae:	      |   adda.l d0,a0
   134b0:	      |   clr.b (a0)
	}

	char * f = filename;
   134b2:	      '-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   134b8:	          clr.l 20(sp)
   134bc:	   ,----- bra.s 134e4 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   134be:	,--|----> move.l 20(sp),d0
   134c2:	|  |      movea.l 28(sp),a0
   134c6:	|  |      adda.l d0,a0
   134c8:	|  |      move.b (a0),d0
   134ca:	|  |      cmpi.b #47,d0
   134ce:	|  |  ,-- bne.s 134e0 <getPrefsFilename+0x6e>
   134d0:	|  |  |   move.l 20(sp),d0
   134d4:	|  |  |   addq.l #1,d0
   134d6:	|  |  |   move.l 28(sp),d1
   134da:	|  |  |   add.l d0,d1
   134dc:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   134e0:	|  |  '-> addq.l #1,20(sp)
   134e4:	|  '----> move.l 20(sp),d0
   134e8:	|         cmp.l 12(sp),d0
   134ec:	'-------- blt.s 134be <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   134ee:	          pea 19c05 <talk.c.490538ff+0x2a0>
   134f4:	          move.l 20(sp),-(sp)
   134f8:	          jsr 13b74 <joinStrings>
   134fe:	          addq.l #8,sp
   13500:	          move.l d0,8(sp)

	FreeVec(filename);
   13504:	          move.l 28(sp),4(sp)
   1350a:	          move.l 1c810 <SysBase>,d0
   13510:	          movea.l d0,a6
   13512:	          movea.l 4(sp),a1
   13516:	          jsr -690(a6)
	filename = NULL;
   1351a:	          clr.l 28(sp)
	return joined;
   1351e:	          move.l 8(sp),d0
}
   13522:	          movea.l (sp)+,a6
   13524:	          lea 20(sp),sp
   13528:	          rts

0001352a <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   1352a:	             lea -28(sp),sp
   1352e:	             move.l a6,-(sp)
   13530:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   13532:	             move.l 1c8ec <gameSettings+0x4>,d0
   13538:	             move.l d0,d1
   1353a:	             addq.l #1,d1
   1353c:	             move.l d1,28(sp)
   13540:	             clr.l 24(sp)
   13544:	             move.l 1c810 <SysBase>,d0
   1354a:	             movea.l d0,a6
   1354c:	             move.l 28(sp),d0
   13550:	             move.l 24(sp),d1
   13554:	             jsr -684(a6)
   13558:	             move.l d0,20(sp)
   1355c:	             move.l 20(sp),d0
   13560:	             move.l d0,1c8e0 <languageTable>
    if( languageTable == 0) {
   13566:	             move.l 1c8e0 <languageTable>,d0
   1356c:	         ,-- bne.s 1357c <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   1356e:	         |   pea 19c0a <talk.c.490538ff+0x2a5>
   13574:	         |   jsr 1710c <KPrintF>
   1357a:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   1357c:	         '-> move.l 1c8ec <gameSettings+0x4>,d0
   13582:	             move.l d0,d1
   13584:	             addq.l #1,d1
   13586:	             move.l d1,16(sp)
   1358a:	             clr.l 12(sp)
   1358e:	             move.l 1c810 <SysBase>,d0
   13594:	             movea.l d0,a6
   13596:	             move.l 16(sp),d0
   1359a:	             move.l 12(sp),d1
   1359e:	             jsr -684(a6)
   135a2:	             move.l d0,8(sp)
   135a6:	             move.l 8(sp),d0
   135aa:	             move.l d0,1c8e4 <languageName>
	if( languageName == 0) {
   135b0:	             move.l 1c8e4 <languageName>,d0
   135b6:	         ,-- bne.s 135c6 <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   135b8:	         |   pea 19c40 <talk.c.490538ff+0x2db>
   135be:	         |   jsr 1710c <KPrintF>
   135c4:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   135c6:	         '-> clr.l 32(sp)
   135ca:	   ,-------- bra.s 13642 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   135cc:	,--|-------> tst.l 32(sp)
   135d0:	|  |  ,----- beq.s 135e0 <makeLanguageTable+0xb6>
   135d2:	|  |  |      move.l 40(sp),-(sp)
   135d6:	|  |  |      jsr 6bc <get2bytes>
   135dc:	|  |  |      addq.l #4,sp
   135de:	|  |  |  ,-- bra.s 135e2 <makeLanguageTable+0xb8>
   135e0:	|  |  '--|-> moveq #0,d0
   135e2:	|  |     '-> movea.l 1c8e0 <languageTable>,a0
   135e8:	|  |         move.l 32(sp),d1
   135ec:	|  |         add.l d1,d1
   135ee:	|  |         add.l d1,d1
   135f0:	|  |         adda.l d1,a0
   135f2:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   135f4:	|  |         move.l 1c8e4 <languageName>,d1
   135fa:	|  |         move.l 32(sp),d0
   135fe:	|  |         add.l d0,d0
   13600:	|  |         add.l d0,d0
   13602:	|  |         movea.l d1,a0
   13604:	|  |         adda.l d0,a0
   13606:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   13608:	|  |         move.l 1c7ba <gameVersion>,d0
   1360e:	|  |         cmpi.l #511,d0
   13614:	|  |     ,-- ble.s 1363e <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   13616:	|  |     |   move.l 1c8ec <gameSettings+0x4>,d0
   1361c:	|  |     +-- beq.s 1363e <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   1361e:	|  |     |   move.l 1c8e4 <languageName>,d1
   13624:	|  |     |   move.l 32(sp),d0
   13628:	|  |     |   add.l d0,d0
   1362a:	|  |     |   add.l d0,d0
   1362c:	|  |     |   movea.l d1,a2
   1362e:	|  |     |   adda.l d0,a2
   13630:	|  |     |   move.l 40(sp),-(sp)
   13634:	|  |     |   jsr b02 <readString>
   1363a:	|  |     |   addq.l #4,sp
   1363c:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1363e:	|  |     '-> addq.l #1,32(sp)
   13642:	|  '-------> move.l 1c8ec <gameSettings+0x4>,d0
   13648:	|            cmp.l 32(sp),d0
   1364c:	'----------- bcc.w 135cc <makeLanguageTable+0xa2>
		}
	}
}
   13650:	             nop
   13652:	             nop
   13654:	             movea.l (sp)+,a2
   13656:	             movea.l (sp)+,a6
   13658:	             lea 28(sp),sp
   1365c:	             rts

0001365e <readIniFile>:

void readIniFile (char * filename) {
   1365e:	                      lea -564(sp),sp
   13662:	                      move.l a6,-(sp)
   13664:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   13666:	                      move.l 576(sp),-(sp)
   1366a:	                      jsr b8 <copyString>
   13670:	                      addq.l #4,sp
   13672:	                      move.l d0,-(sp)
   13674:	                      jsr 13472 <getPrefsFilename>
   1367a:	                      addq.l #4,sp
   1367c:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   13680:	                      move.l 562(sp),558(sp)
   13686:	                      move.l #1005,554(sp)
   1368e:	                      move.l 1c818 <DOSBase>,d0
   13694:	                      movea.l d0,a6
   13696:	                      move.l 558(sp),d1
   1369a:	                      move.l 554(sp),d2
   1369e:	                      jsr -30(a6)
   136a2:	                      move.l d0,550(sp)
   136a6:	                      move.l 550(sp),d0
   136aa:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   136ae:	                      clr.l 1c8e8 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   136b4:	                      move.w #1,1c8f0 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   136bc:	                      clr.l 1c8f2 <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   136c2:	                      moveq #1,d0
   136c4:	                      move.l d0,1c8f6 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   136ca:	                      clr.w 1c8fa <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   136d0:	                      clr.w 1c8fc <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   136d6:	                      clr.w 1c8fe <gameSettings+0x16>

	FreeVec(langName);
   136dc:	                      move.l 562(sp),542(sp)
   136e2:	                      move.l 1c810 <SysBase>,d0
   136e8:	                      movea.l d0,a6
   136ea:	                      movea.l 542(sp),a1
   136ee:	                      jsr -690(a6)
	langName = NULL;
   136f2:	                      clr.l 562(sp)

	if (fp) {
   136f6:	                      tst.l 546(sp)
   136fa:	,-------------------- beq.w 139d8 <readIniFile+0x37a>
		char lineSoFar[257] = "";
   136fe:	|                     move.l sp,d0
   13700:	|                     addi.l #265,d0
   13706:	|                     move.l #257,d1
   1370c:	|                     move.l d1,-(sp)
   1370e:	|                     clr.l -(sp)
   13710:	|                     move.l d0,-(sp)
   13712:	|                     jsr 17090 <memset>
   13718:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   1371c:	|                     move.l sp,d0
   1371e:	|                     addq.l #8,d0
   13720:	|                     move.l #257,d1
   13726:	|                     move.l d1,-(sp)
   13728:	|                     clr.l -(sp)
   1372a:	|                     move.l d0,-(sp)
   1372c:	|                     jsr 17090 <memset>
   13732:	|                     lea 12(sp),sp
		unsigned char here = 0;
   13736:	|                     clr.b 571(sp)
		char readChar = ' ';
   1373a:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   13740:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   13746:	|                     clr.w 566(sp)
		LONG tmp = 0;
   1374a:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   1374e:	|  ,----------------> move.l 546(sp),534(sp)
   13754:	|  |                  move.l 1c818 <DOSBase>,d0
   1375a:	|  |                  movea.l d0,a6
   1375c:	|  |                  move.l 534(sp),d1
   13760:	|  |                  jsr -306(a6)
   13764:	|  |                  move.l d0,530(sp)
   13768:	|  |                  move.l 530(sp),d0
   1376c:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   13770:	|  |                  moveq #-1,d1
   13772:	|  |                  cmp.l 538(sp),d1
   13776:	|  |           ,----- bne.s 13784 <readIniFile+0x126>
				readChar = '\n';
   13778:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   1377e:	|  |           |      clr.w 568(sp)
   13782:	|  |           |  ,-- bra.s 1378a <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   13784:	|  |           '--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   1378a:	|  |              '-> move.b 570(sp),d0
   1378e:	|  |                  ext.w d0
   13790:	|  |                  movea.w d0,a0
   13792:	|  |                  moveq #61,d0
   13794:	|  |                  cmp.l a0,d0
   13796:	|  |     ,----------- beq.w 13940 <readIniFile+0x2e2>
   1379a:	|  |     |            moveq #61,d1
   1379c:	|  |     |            cmp.l a0,d1
   1379e:	|  |  ,--|----------- blt.w 1394c <readIniFile+0x2ee>
   137a2:	|  |  |  |            moveq #10,d0
   137a4:	|  |  |  |            cmp.l a0,d0
   137a6:	|  |  |  |        ,-- beq.s 137b0 <readIniFile+0x152>
   137a8:	|  |  |  |        |   moveq #13,d1
   137aa:	|  |  |  |        |   cmp.l a0,d1
   137ac:	|  |  +--|--------|-- bne.w 1394c <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   137b0:	|  |  |  |        '-> tst.w 566(sp)
   137b4:	|  |  |  |     ,----- beq.w 1392e <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   137b8:	|  |  |  |     |      pea 19c74 <talk.c.490538ff+0x30f>
   137be:	|  |  |  |     |      move.l sp,d0
   137c0:	|  |  |  |     |      addi.l #269,d0
   137c6:	|  |  |  |     |      move.l d0,-(sp)
   137c8:	|  |  |  |     |      jsr 13af4 <strcmp>
   137ce:	|  |  |  |     |      addq.l #8,sp
   137d0:	|  |  |  |     |      tst.l d0
   137d2:	|  |  |  |     |  ,-- bne.s 137ec <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   137d4:	|  |  |  |     |  |   move.l sp,d0
   137d6:	|  |  |  |     |  |   addq.l #8,d0
   137d8:	|  |  |  |     |  |   move.l d0,-(sp)
   137da:	|  |  |  |     |  |   jsr 139e4 <stringToInt>
   137e0:	|  |  |  |     |  |   addq.l #4,sp
   137e2:	|  |  |  |     |  |   move.l d0,1c8e8 <gameSettings>
   137e8:	|  |  |  |     +--|-- bra.w 1392e <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   137ec:	|  |  |  |     |  '-> pea 19c7d <talk.c.490538ff+0x318>
   137f2:	|  |  |  |     |      move.l sp,d0
   137f4:	|  |  |  |     |      addi.l #269,d0
   137fa:	|  |  |  |     |      move.l d0,-(sp)
   137fc:	|  |  |  |     |      jsr 13af4 <strcmp>
   13802:	|  |  |  |     |      addq.l #8,sp
   13804:	|  |  |  |     |      tst.l d0
   13806:	|  |  |  |     |  ,-- bne.s 1382c <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   13808:	|  |  |  |     |  |   move.l sp,d0
   1380a:	|  |  |  |     |  |   addq.l #8,d0
   1380c:	|  |  |  |     |  |   move.l d0,-(sp)
   1380e:	|  |  |  |     |  |   jsr 139e4 <stringToInt>
   13814:	|  |  |  |     |  |   addq.l #4,sp
   13816:	|  |  |  |     |  |   tst.l d0
   13818:	|  |  |  |     |  |   seq d0
   1381a:	|  |  |  |     |  |   neg.b d0
   1381c:	|  |  |  |     |  |   move.b d0,d0
   1381e:	|  |  |  |     |  |   andi.w #255,d0
   13822:	|  |  |  |     |  |   move.w d0,1c8f0 <gameSettings+0x8>
   13828:	|  |  |  |     +--|-- bra.w 1392e <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   1382c:	|  |  |  |     |  '-> pea 19c84 <talk.c.490538ff+0x31f>
   13832:	|  |  |  |     |      move.l sp,d0
   13834:	|  |  |  |     |      addi.l #269,d0
   1383a:	|  |  |  |     |      move.l d0,-(sp)
   1383c:	|  |  |  |     |      jsr 13af4 <strcmp>
   13842:	|  |  |  |     |      addq.l #8,sp
   13844:	|  |  |  |     |      tst.l d0
   13846:	|  |  |  |     |  ,-- bne.s 13860 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   13848:	|  |  |  |     |  |   move.l sp,d0
   1384a:	|  |  |  |     |  |   addq.l #8,d0
   1384c:	|  |  |  |     |  |   move.l d0,-(sp)
   1384e:	|  |  |  |     |  |   jsr 139e4 <stringToInt>
   13854:	|  |  |  |     |  |   addq.l #4,sp
   13856:	|  |  |  |     |  |   move.l d0,1c8f2 <gameSettings+0xa>
   1385c:	|  |  |  |     +--|-- bra.w 1392e <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   13860:	|  |  |  |     |  '-> pea 19c8c <talk.c.490538ff+0x327>
   13866:	|  |  |  |     |      move.l sp,d0
   13868:	|  |  |  |     |      addi.l #269,d0
   1386e:	|  |  |  |     |      move.l d0,-(sp)
   13870:	|  |  |  |     |      jsr 13af4 <strcmp>
   13876:	|  |  |  |     |      addq.l #8,sp
   13878:	|  |  |  |     |      tst.l d0
   1387a:	|  |  |  |     |  ,-- bne.s 13894 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   1387c:	|  |  |  |     |  |   move.l sp,d0
   1387e:	|  |  |  |     |  |   addq.l #8,d0
   13880:	|  |  |  |     |  |   move.l d0,-(sp)
   13882:	|  |  |  |     |  |   jsr 139e4 <stringToInt>
   13888:	|  |  |  |     |  |   addq.l #4,sp
   1388a:	|  |  |  |     |  |   move.l d0,1c8f6 <gameSettings+0xe>
   13890:	|  |  |  |     +--|-- bra.w 1392e <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   13894:	|  |  |  |     |  '-> pea 19c96 <talk.c.490538ff+0x331>
   1389a:	|  |  |  |     |      move.l sp,d0
   1389c:	|  |  |  |     |      addi.l #269,d0
   138a2:	|  |  |  |     |      move.l d0,-(sp)
   138a4:	|  |  |  |     |      jsr 13af4 <strcmp>
   138aa:	|  |  |  |     |      addq.l #8,sp
   138ac:	|  |  |  |     |      tst.l d0
   138ae:	|  |  |  |     |  ,-- bne.s 138c8 <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   138b0:	|  |  |  |     |  |   move.l sp,d0
   138b2:	|  |  |  |     |  |   addq.l #8,d0
   138b4:	|  |  |  |     |  |   move.l d0,-(sp)
   138b6:	|  |  |  |     |  |   jsr 139e4 <stringToInt>
   138bc:	|  |  |  |     |  |   addq.l #4,sp
   138be:	|  |  |  |     |  |   move.l d0,d0
   138c0:	|  |  |  |     |  |   move.w d0,1c8fa <gameSettings+0x12>
   138c6:	|  |  |  |     +--|-- bra.s 1392e <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   138c8:	|  |  |  |     |  '-> pea 19ca2 <talk.c.490538ff+0x33d>
   138ce:	|  |  |  |     |      move.l sp,d0
   138d0:	|  |  |  |     |      addi.l #269,d0
   138d6:	|  |  |  |     |      move.l d0,-(sp)
   138d8:	|  |  |  |     |      jsr 13af4 <strcmp>
   138de:	|  |  |  |     |      addq.l #8,sp
   138e0:	|  |  |  |     |      tst.l d0
   138e2:	|  |  |  |     |  ,-- bne.s 138fc <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   138e4:	|  |  |  |     |  |   move.l sp,d0
   138e6:	|  |  |  |     |  |   addq.l #8,d0
   138e8:	|  |  |  |     |  |   move.l d0,-(sp)
   138ea:	|  |  |  |     |  |   jsr 139e4 <stringToInt>
   138f0:	|  |  |  |     |  |   addq.l #4,sp
   138f2:	|  |  |  |     |  |   move.l d0,d0
   138f4:	|  |  |  |     |  |   move.w d0,1c8fc <gameSettings+0x14>
   138fa:	|  |  |  |     +--|-- bra.s 1392e <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   138fc:	|  |  |  |     |  '-> pea 19cb0 <talk.c.490538ff+0x34b>
   13902:	|  |  |  |     |      move.l sp,d0
   13904:	|  |  |  |     |      addi.l #269,d0
   1390a:	|  |  |  |     |      move.l d0,-(sp)
   1390c:	|  |  |  |     |      jsr 13af4 <strcmp>
   13912:	|  |  |  |     |      addq.l #8,sp
   13914:	|  |  |  |     |      tst.l d0
   13916:	|  |  |  |     +----- bne.s 1392e <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   13918:	|  |  |  |     |      move.l sp,d0
   1391a:	|  |  |  |     |      addq.l #8,d0
   1391c:	|  |  |  |     |      move.l d0,-(sp)
   1391e:	|  |  |  |     |      jsr 139e4 <stringToInt>
   13924:	|  |  |  |     |      addq.l #4,sp
   13926:	|  |  |  |     |      move.l d0,d0
   13928:	|  |  |  |     |      move.w d0,1c8fe <gameSettings+0x16>
					}
				}
				here = 0;
   1392e:	|  |  |  |     '----> clr.b 571(sp)
				doingSecond = FALSE;
   13932:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   13936:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   1393a:	|  |  |  |            clr.b 8(sp)
				break;
   1393e:	|  |  |  |  ,-------- bra.s 139b6 <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   13940:	|  |  |  '--|-------> move.w #1,566(sp)
				here = 0;
   13946:	|  |  |     |         clr.b 571(sp)
				break;
   1394a:	|  |  |     +-------- bra.s 139b6 <readIniFile+0x358>

				default:
				if (doingSecond) {
   1394c:	|  |  '-----|-------> tst.w 566(sp)
   13950:	|  |        |  ,----- beq.s 13984 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   13952:	|  |        |  |      move.b 571(sp),d0
   13956:	|  |        |  |      move.b d0,d1
   13958:	|  |        |  |      addq.b #1,d1
   1395a:	|  |        |  |      move.b d1,571(sp)
   1395e:	|  |        |  |      move.b d0,d0
   13960:	|  |        |  |      andi.l #255,d0
   13966:	|  |        |  |      lea 572(sp),a0
   1396a:	|  |        |  |      adda.l d0,a0
   1396c:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   13972:	|  |        |  |      moveq #0,d0
   13974:	|  |        |  |      move.b 571(sp),d0
   13978:	|  |        |  |      lea 572(sp),a0
   1397c:	|  |        |  |      adda.l d0,a0
   1397e:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   13982:	|  |        |  |  ,-- bra.s 139b4 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   13984:	|  |        |  '--|-> move.b 571(sp),d0
   13988:	|  |        |     |   move.b d0,d1
   1398a:	|  |        |     |   addq.b #1,d1
   1398c:	|  |        |     |   move.b d1,571(sp)
   13990:	|  |        |     |   move.b d0,d0
   13992:	|  |        |     |   andi.l #255,d0
   13998:	|  |        |     |   lea 572(sp),a0
   1399c:	|  |        |     |   adda.l d0,a0
   1399e:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   139a4:	|  |        |     |   moveq #0,d0
   139a6:	|  |        |     |   move.b 571(sp),d0
   139aa:	|  |        |     |   lea 572(sp),a0
   139ae:	|  |        |     |   adda.l d0,a0
   139b0:	|  |        |     |   clr.b -307(a0)
				break;
   139b4:	|  |        |     '-> nop
			}
		} while (keepGoing);
   139b6:	|  |        '-------> tst.w 568(sp)
   139ba:	|  '----------------- bne.w 1374e <readIniFile+0xf0>

		Close(fp);
   139be:	|                     move.l 546(sp),526(sp)
   139c4:	|                     move.l 1c818 <DOSBase>,d0
   139ca:	|                     movea.l d0,a6
   139cc:	|                     move.l 526(sp),d1
   139d0:	|                     jsr -36(a6)
   139d4:	|                     move.l d0,522(sp)
	}
}
   139d8:	'-------------------> nop
   139da:	                      move.l (sp)+,d2
   139dc:	                      movea.l (sp)+,a6
   139de:	                      lea 564(sp),sp
   139e2:	                      rts

000139e4 <stringToInt>:

unsigned int stringToInt (char * s) {
   139e4:	             subq.l #8,sp
	int i = 0;
   139e6:	             clr.l 4(sp)
	BOOL negative = FALSE;
   139ea:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   139ee:	,----------> movea.l 12(sp),a0
   139f2:	|            move.b (a0),d0
   139f4:	|            cmpi.b #47,d0
   139f8:	|        ,-- ble.s 13a30 <stringToInt+0x4c>
   139fa:	|        |   movea.l 12(sp),a0
   139fe:	|        |   move.b (a0),d0
   13a00:	|        |   cmpi.b #57,d0
   13a04:	|        +-- bgt.s 13a30 <stringToInt+0x4c>
			i *= 10;
   13a06:	|        |   move.l 4(sp),d1
   13a0a:	|        |   move.l d1,d0
   13a0c:	|        |   add.l d0,d0
   13a0e:	|        |   add.l d0,d0
   13a10:	|        |   add.l d1,d0
   13a12:	|        |   add.l d0,d0
   13a14:	|        |   move.l d0,4(sp)
			i += *s - '0';
   13a18:	|        |   movea.l 12(sp),a0
   13a1c:	|        |   move.b (a0),d0
   13a1e:	|        |   ext.w d0
   13a20:	|        |   movea.w d0,a0
   13a22:	|        |   moveq #-48,d0
   13a24:	|        |   add.l a0,d0
   13a26:	|        |   add.l d0,4(sp)
			s ++;
   13a2a:	|        |   addq.l #1,12(sp)
   13a2e:	|  ,-----|-- bra.s 13a68 <stringToInt+0x84>
		} else if (*s == '-') {
   13a30:	|  |     '-> movea.l 12(sp),a0
   13a34:	|  |         move.b (a0),d0
   13a36:	|  |         cmpi.b #45,d0
   13a3a:	|  |     ,-- bne.s 13a54 <stringToInt+0x70>
			negative = ! negative;
   13a3c:	|  |     |   tst.w 2(sp)
   13a40:	|  |     |   seq d0
   13a42:	|  |     |   neg.b d0
   13a44:	|  |     |   move.b d0,d0
   13a46:	|  |     |   andi.w #255,d0
   13a4a:	|  |     |   move.w d0,2(sp)
			s++;
   13a4e:	|  |     |   addq.l #1,12(sp)
   13a52:	+--|-----|-- bra.s 139ee <stringToInt+0xa>
		} else {
			if (negative)
   13a54:	|  |     '-> tst.w 2(sp)
   13a58:	|  |     ,-- beq.s 13a62 <stringToInt+0x7e>
				return -i;
   13a5a:	|  |     |   move.l 4(sp),d0
   13a5e:	|  |     |   neg.l d0
   13a60:	|  |  ,--|-- bra.s 13a6a <stringToInt+0x86>
			return i;
   13a62:	|  |  |  '-> move.l 4(sp),d0
   13a66:	|  |  +----- bra.s 13a6a <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   13a68:	'--'--|----X bra.s 139ee <stringToInt+0xa>
		}
	}
   13a6a:	      '----> addq.l #8,sp
   13a6c:	             rts

00013a6e <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   13a6e:	    lea -28(sp),sp
   13a72:	    move.l a6,-(sp)
   13a74:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   13a76:	    pea 19cba <talk.c.490538ff+0x355>
   13a7c:	    jsr 1710c <KPrintF>
   13a82:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   13a84:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   13a88:	    move.l 40(sp),30(sp)
   13a8e:	    move.l #1005,26(sp)
   13a96:	    move.l 1c818 <DOSBase>,d0
   13a9c:	    movea.l d0,a6
   13a9e:	    move.l 30(sp),d1
   13aa2:	    move.l 26(sp),d2
   13aa6:	    jsr -30(a6)
   13aaa:	    move.l d0,22(sp)
   13aae:	    move.l 22(sp),d0
   13ab2:	    move.l d0,18(sp)
	if (tester) {
   13ab6:	,-- beq.s 13ae6 <fileExists+0x78>
		KPrintF("fileexists: File exists");
   13ab8:	|   pea 19cd4 <talk.c.490538ff+0x36f>
   13abe:	|   jsr 1710c <KPrintF>
   13ac4:	|   addq.l #4,sp
		retval = 1;
   13ac6:	|   move.b #1,35(sp)
		Close(tester);
   13acc:	|   move.l 18(sp),14(sp)
   13ad2:	|   move.l 1c818 <DOSBase>,d0
   13ad8:	|   movea.l d0,a6
   13ada:	|   move.l 14(sp),d1
   13ade:	|   jsr -36(a6)
   13ae2:	|   move.l d0,10(sp)
	}
	return retval;
   13ae6:	'-> move.b 35(sp),d0
   13aea:	    move.l (sp)+,d2
   13aec:	    movea.l (sp)+,a6
   13aee:	    lea 28(sp),sp
   13af2:	    rts

00013af4 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   13af4:	   ,-- bra.s 13afe <strcmp+0xa>
    {
        s1++;
   13af6:	,--|-> addq.l #1,4(sp)
        s2++;
   13afa:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   13afe:	|  '-> movea.l 4(sp),a0
   13b02:	|      move.b (a0),d0
   13b04:	|  ,-- beq.s 13b16 <strcmp+0x22>
   13b06:	|  |   movea.l 4(sp),a0
   13b0a:	|  |   move.b (a0),d1
   13b0c:	|  |   movea.l 8(sp),a0
   13b10:	|  |   move.b (a0),d0
   13b12:	|  |   cmp.b d1,d0
   13b14:	'--|-- beq.s 13af6 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   13b16:	   '-> movea.l 4(sp),a0
   13b1a:	       move.b (a0),d0
   13b1c:	       moveq #0,d1
   13b1e:	       move.b d0,d1
   13b20:	       movea.l 8(sp),a0
   13b24:	       move.b (a0),d0
   13b26:	       move.b d0,d0
   13b28:	       andi.l #255,d0
   13b2e:	       sub.l d0,d1
   13b30:	       move.l d1,d0
}
   13b32:	       rts

00013b34 <strlen>:

long unsigned int strlen (const char *s) 
{  
   13b34:	       subq.l #4,sp
	long unsigned int i = 0;
   13b36:	       clr.l (sp)
	while(s[i]) i++; 
   13b38:	   ,-- bra.s 13b3c <strlen+0x8>
   13b3a:	,--|-> addq.l #1,(sp)
   13b3c:	|  '-> movea.l 8(sp),a0
   13b40:	|      adda.l (sp),a0
   13b42:	|      move.b (a0),d0
   13b44:	'----- bne.s 13b3a <strlen+0x6>
	return(i);
   13b46:	       move.l (sp),d0
}
   13b48:	       addq.l #4,sp
   13b4a:	       rts

00013b4c <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   13b4c:	    nop
   13b4e:	,-> move.l 8(sp),d0
   13b52:	|   move.l d0,d1
   13b54:	|   addq.l #1,d1
   13b56:	|   move.l d1,8(sp)
   13b5a:	|   movea.l 4(sp),a0
   13b5e:	|   lea 1(a0),a1
   13b62:	|   move.l a1,4(sp)
   13b66:	|   movea.l d0,a1
   13b68:	|   move.b (a1),d0
   13b6a:	|   move.b d0,(a0)
   13b6c:	|   move.b (a0),d0
   13b6e:	'-- bne.s 13b4e <strcpy+0x2>
}
   13b70:	    nop
   13b72:	    rts

00013b74 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   13b74:	    lea -20(sp),sp
   13b78:	    move.l a6,-(sp)
   13b7a:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   13b7c:	    move.l 32(sp),-(sp)
   13b80:	    jsr 13b34 <strlen>
   13b86:	    addq.l #4,sp
   13b88:	    move.l d0,d2
   13b8a:	    move.l 36(sp),-(sp)
   13b8e:	    jsr 13b34 <strlen>
   13b94:	    addq.l #4,sp
   13b96:	    add.l d2,d0
   13b98:	    move.l d0,d1
   13b9a:	    addq.l #1,d1
   13b9c:	    move.l d1,20(sp)
   13ba0:	    clr.l 16(sp)
   13ba4:	    move.l 1c810 <SysBase>,d0
   13baa:	    movea.l d0,a6
   13bac:	    move.l 20(sp),d0
   13bb0:	    move.l 16(sp),d1
   13bb4:	    jsr -684(a6)
   13bb8:	    move.l d0,12(sp)
   13bbc:	    move.l 12(sp),d0
   13bc0:	    move.l d0,8(sp)
	char * t = newString;
   13bc4:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   13bca:	    nop
   13bcc:	,-> move.l 32(sp),d0
   13bd0:	|   move.l d0,d1
   13bd2:	|   addq.l #1,d1
   13bd4:	|   move.l d1,32(sp)
   13bd8:	|   movea.l 24(sp),a0
   13bdc:	|   lea 1(a0),a1
   13be0:	|   move.l a1,24(sp)
   13be4:	|   movea.l d0,a1
   13be6:	|   move.b (a1),d0
   13be8:	|   move.b d0,(a0)
   13bea:	|   move.b (a0),d0
   13bec:	'-- bne.s 13bcc <joinStrings+0x58>
	t--;
   13bee:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   13bf2:	    nop
   13bf4:	,-> move.l 36(sp),d0
   13bf8:	|   move.l d0,d1
   13bfa:	|   addq.l #1,d1
   13bfc:	|   move.l d1,36(sp)
   13c00:	|   movea.l 24(sp),a0
   13c04:	|   lea 1(a0),a1
   13c08:	|   move.l a1,24(sp)
   13c0c:	|   movea.l d0,a1
   13c0e:	|   move.b (a1),d0
   13c10:	|   move.b d0,(a0)
   13c12:	|   move.b (a0),d0
   13c14:	'-- bne.s 13bf4 <joinStrings+0x80>

	return newString;
   13c16:	    move.l 8(sp),d0
}
   13c1a:	    move.l (sp)+,d2
   13c1c:	    movea.l (sp)+,a6
   13c1e:	    lea 20(sp),sp
   13c22:	    rts

00013c24 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   13c24:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   13c28:	       moveq #10,d0
   13c2a:	       cmp.l 28(sp),d0
   13c2e:	   ,-- bne.s 13c4c <itoa+0x28>
   13c30:	   |   tst.l 20(sp)
   13c34:	   +-- bge.s 13c4c <itoa+0x28>
        *str++ = '-';
   13c36:	   |   move.l 24(sp),d0
   13c3a:	   |   move.l d0,d1
   13c3c:	   |   addq.l #1,d1
   13c3e:	   |   move.l d1,24(sp)
   13c42:	   |   movea.l d0,a0
   13c44:	   |   move.b #45,(a0)
        value *= -1;
   13c48:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   13c4c:	   '-> move.l 24(sp),12(sp)
   13c52:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   13c58:	   ,-> move.l 20(sp),d0
   13c5c:	   |   move.l 28(sp),-(sp)
   13c60:	   |   move.l d0,-(sp)
   13c62:	   |   jsr 17b44 <__modsi3>
   13c68:	   |   addq.l #8,sp
   13c6a:	   |   movea.l d0,a1
   13c6c:	   |   move.l 12(sp),d0
   13c70:	   |   move.l d0,d1
   13c72:	   |   addq.l #1,d1
   13c74:	   |   move.l d1,12(sp)
   13c78:	   |   lea 19cec <talk.c.490538ff+0x387>,a0
   13c7e:	   |   move.b (0,a1,a0.l),d1
   13c82:	   |   movea.l d0,a0
   13c84:	   |   move.b d1,(a0)
        value /= base;
   13c86:	   |   move.l 28(sp),-(sp)
   13c8a:	   |   move.l 24(sp),-(sp)
   13c8e:	   |   jsr 17b16 <__divsi3>
   13c94:	   |   addq.l #8,sp
   13c96:	   |   move.l d0,20(sp)
    } while (value);
   13c9a:	   '-- bne.s 13c58 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   13c9c:	       move.l 12(sp),d0
   13ca0:	       move.l d0,d1
   13ca2:	       subq.l #1,d1
   13ca4:	       move.l d1,12(sp)
   13ca8:	       movea.l d0,a0
   13caa:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   13cac:	       move.l 4(sp),8(sp)
   13cb2:	   ,-- bra.s 13cd8 <itoa+0xb4>
        char temp = *low;
   13cb4:	,--|-> movea.l 8(sp),a0
   13cb8:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   13cbc:	|  |   movea.l 12(sp),a0
   13cc0:	|  |   move.b (a0),d0
   13cc2:	|  |   movea.l 8(sp),a0
   13cc6:	|  |   move.b d0,(a0)
        *ptr = temp;
   13cc8:	|  |   movea.l 12(sp),a0
   13ccc:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   13cd0:	|  |   addq.l #1,8(sp)
   13cd4:	|  |   subq.l #1,12(sp)
   13cd8:	|  '-> move.l 8(sp),d0
   13cdc:	|      cmp.l 12(sp),d0
   13ce0:	'----- bcs.s 13cb4 <itoa+0x90>
    }
    return rc;
   13ce2:	       move.l 4(sp),d0
}
   13ce6:	       lea 16(sp),sp
   13cea:	       rts

00013cec <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   13cec:	                            lea -40(sp),sp
   13cf0:	                            move.l d2,-(sp)
    char* s = str;
   13cf2:	                            move.l 48(sp),40(sp)
    const char* p = format;
   13cf8:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   13cfe:	   ,----------------------- bra.w 13e32 <vsprintf2+0x146>
        if (*p == '%') {
   13d02:	,--|----------------------> movea.l 36(sp),a0
   13d06:	|  |                        move.b (a0),d0
   13d08:	|  |                        cmpi.b #37,d0
   13d0c:	|  |  ,-------------------- bne.w 13e18 <vsprintf2+0x12c>
            switch (*++p) {
   13d10:	|  |  |                     addq.l #1,36(sp)
   13d14:	|  |  |                     movea.l 36(sp),a0
   13d18:	|  |  |                     move.b (a0),d0
   13d1a:	|  |  |                     ext.w d0
   13d1c:	|  |  |                     movea.w d0,a0
   13d1e:	|  |  |                     moveq #115,d0
   13d20:	|  |  |                     cmp.l a0,d0
   13d22:	|  |  |           ,-------- beq.s 13d9a <vsprintf2+0xae>
   13d24:	|  |  |           |         moveq #115,d1
   13d26:	|  |  |           |         cmp.l a0,d1
   13d28:	|  |  |  ,--------|-------- blt.w 13e00 <vsprintf2+0x114>
   13d2c:	|  |  |  |        |         moveq #99,d2
   13d2e:	|  |  |  |        |         cmp.l a0,d2
   13d30:	|  |  |  |  ,-----|-------- beq.w 13dd8 <vsprintf2+0xec>
   13d34:	|  |  |  |  |     |         moveq #100,d0
   13d36:	|  |  |  |  |     |         cmp.l a0,d0
   13d38:	|  |  |  +--|-----|-------- bne.w 13e00 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   13d3c:	|  |  |  |  |     |         addq.l #4,56(sp)
   13d40:	|  |  |  |  |     |         movea.l 56(sp),a0
   13d44:	|  |  |  |  |     |         move.l (a0),d0
   13d46:	|  |  |  |  |     |         move.l d0,d1
   13d48:	|  |  |  |  |     |         subq.l #1,d1
   13d4a:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   13d4e:	|  |  |  |  |     |         pea a <_start+0xa>
   13d52:	|  |  |  |  |     |         lea 8(sp),a0
   13d56:	|  |  |  |  |     |         move.l a0,-(sp)
   13d58:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   13d5c:	|  |  |  |  |     |         jsr 13c24 <itoa>
   13d62:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   13d66:	|  |  |  |  |     |         lea 44(sp),a0
   13d6a:	|  |  |  |  |     |         lea -40(a0),a0
   13d6e:	|  |  |  |  |     |         move.l a0,28(sp)
   13d72:	|  |  |  |  |     |     ,-- bra.s 13d8e <vsprintf2+0xa2>
                        *s++ = *b;
   13d74:	|  |  |  |  |     |  ,--|-> move.l 40(sp),d0
   13d78:	|  |  |  |  |     |  |  |   move.l d0,d1
   13d7a:	|  |  |  |  |     |  |  |   addq.l #1,d1
   13d7c:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   13d80:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   13d84:	|  |  |  |  |     |  |  |   move.b (a0),d1
   13d86:	|  |  |  |  |     |  |  |   movea.l d0,a0
   13d88:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   13d8a:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   13d8e:	|  |  |  |  |     |  |  '-> movea.l 28(sp),a0
   13d92:	|  |  |  |  |     |  |      move.b (a0),d0
   13d94:	|  |  |  |  |     |  '----- bne.s 13d74 <vsprintf2+0x88>
                    }
                    break;
   13d96:	|  |  |  |  |  ,--|-------- bra.w 13e2e <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   13d9a:	|  |  |  |  |  |  '-------> addq.l #4,56(sp)
   13d9e:	|  |  |  |  |  |            movea.l 56(sp),a0
   13da2:	|  |  |  |  |  |            move.l (a0),d0
   13da4:	|  |  |  |  |  |            move.l d0,d1
   13da6:	|  |  |  |  |  |            subq.l #1,d1
   13da8:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   13dac:	|  |  |  |  |  |        ,-- bra.s 13dce <vsprintf2+0xe2>
                        *s++ = *sval++;
   13dae:	|  |  |  |  |  |     ,--|-> move.l 32(sp),d1
   13db2:	|  |  |  |  |  |     |  |   move.l d1,d2
   13db4:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13db6:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   13dba:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   13dbe:	|  |  |  |  |  |     |  |   move.l d0,d2
   13dc0:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13dc2:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   13dc6:	|  |  |  |  |  |     |  |   movea.l d1,a0
   13dc8:	|  |  |  |  |  |     |  |   move.b (a0),d1
   13dca:	|  |  |  |  |  |     |  |   movea.l d0,a0
   13dcc:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   13dce:	|  |  |  |  |  |     |  '-> movea.l 32(sp),a0
   13dd2:	|  |  |  |  |  |     |      move.b (a0),d0
   13dd4:	|  |  |  |  |  |     '----- bne.s 13dae <vsprintf2+0xc2>
                    }
                    break;
   13dd6:	|  |  |  |  |  +----------- bra.s 13e2e <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   13dd8:	|  |  |  |  '--|----------> addq.l #4,56(sp)
   13ddc:	|  |  |  |     |            movea.l 56(sp),a0
   13de0:	|  |  |  |     |            move.l (a0),d0
   13de2:	|  |  |  |     |            move.l d0,d1
   13de4:	|  |  |  |     |            subq.l #1,d1
   13de6:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   13dea:	|  |  |  |     |            move.l 40(sp),d0
   13dee:	|  |  |  |     |            move.l d0,d2
   13df0:	|  |  |  |     |            addq.l #1,d2
   13df2:	|  |  |  |     |            move.l d2,40(sp)
   13df6:	|  |  |  |     |            move.l 24(sp),d1
   13dfa:	|  |  |  |     |            movea.l d0,a0
   13dfc:	|  |  |  |     |            move.b d1,(a0)
                    break;
   13dfe:	|  |  |  |     +----------- bra.s 13e2e <vsprintf2+0x142>
                default:
                    *s++ = *p;
   13e00:	|  |  |  '-----|----------> move.l 40(sp),d0
   13e04:	|  |  |        |            move.l d0,d1
   13e06:	|  |  |        |            addq.l #1,d1
   13e08:	|  |  |        |            move.l d1,40(sp)
   13e0c:	|  |  |        |            movea.l 36(sp),a0
   13e10:	|  |  |        |            move.b (a0),d1
   13e12:	|  |  |        |            movea.l d0,a0
   13e14:	|  |  |        |            move.b d1,(a0)
                    break;
   13e16:	|  |  |        +----------- bra.s 13e2e <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   13e18:	|  |  '--------|----------> move.l 40(sp),d0
   13e1c:	|  |           |            move.l d0,d1
   13e1e:	|  |           |            addq.l #1,d1
   13e20:	|  |           |            move.l d1,40(sp)
   13e24:	|  |           |            movea.l 36(sp),a0
   13e28:	|  |           |            move.b (a0),d1
   13e2a:	|  |           |            movea.l d0,a0
   13e2c:	|  |           |            move.b d1,(a0)
        }
        p++;
   13e2e:	|  |           '----------> addq.l #1,36(sp)
    while (*p) {
   13e32:	|  '----------------------> movea.l 36(sp),a0
   13e36:	|                           move.b (a0),d0
   13e38:	'-------------------------- bne.w 13d02 <vsprintf2+0x16>
    }
    *s = '\0';
   13e3c:	                            movea.l 40(sp),a0
   13e40:	                            clr.b (a0)
    return s - str;
   13e42:	                            move.l 40(sp),d0
   13e46:	                            sub.l 48(sp),d0
}
   13e4a:	                            move.l (sp)+,d2
   13e4c:	                            lea 40(sp),sp
   13e50:	                            rts

00013e52 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   13e52:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   13e54:	moveq #16,d0
   13e56:	add.l sp,d0
   13e58:	move.l d0,d1
   13e5a:	addq.l #4,d1
   13e5c:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   13e60:	move.l 16(sp),d0
   13e64:	move.l 4(sp),-(sp)
   13e68:	move.l d0,-(sp)
   13e6a:	move.l 20(sp),-(sp)
   13e6e:	jsr 13cec <vsprintf2>
   13e74:	lea 12(sp),sp
   13e78:	move.l d0,(sp)
    va_end(args);
   13e7a:	clr.l 4(sp)

    return done;
   13e7e:	move.l (sp),d0
}
   13e80:	addq.l #8,sp
   13e82:	rts

00013e84 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   13e84:	       lea -20(sp),sp
   13e88:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   13e8a:	       moveq #12,d0
   13e8c:	       move.l d0,20(sp)
   13e90:	       clr.l 16(sp)
   13e94:	       move.l 1c810 <SysBase>,d0
   13e9a:	       movea.l d0,a6
   13e9c:	       move.l 20(sp),d0
   13ea0:	       move.l 16(sp),d1
   13ea4:	       jsr -684(a6)
   13ea8:	       move.l d0,12(sp)
   13eac:	       move.l 12(sp),d0
   13eb0:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   13eb4:	   ,-- bne.s 13eba <addVarToStack+0x36>
   13eb6:	   |   clr.w d0
   13eb8:	,--|-- bra.s 13f02 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   13eba:	|  '-> move.l 8(sp),d0
   13ebe:	|      move.l d0,-(sp)
   13ec0:	|      move.l 32(sp),-(sp)
   13ec4:	|      jsr 149e6 <copyMain>
   13eca:	|      addq.l #8,sp
   13ecc:	|      tst.w d0
   13ece:	|  ,-- bne.s 13eea <addVarToStack+0x66>
        FreeVec(newStack);
   13ed0:	|  |   move.l 8(sp),4(sp)
   13ed6:	|  |   move.l 1c810 <SysBase>,d0
   13edc:	|  |   movea.l d0,a6
   13ede:	|  |   movea.l 4(sp),a1
   13ee2:	|  |   jsr -690(a6)
        return FALSE;
   13ee6:	|  |   clr.w d0
   13ee8:	+--|-- bra.s 13f02 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   13eea:	|  '-> movea.l 32(sp),a0
   13eee:	|      move.l (a0),d0
   13ef0:	|      movea.l 8(sp),a0
   13ef4:	|      move.l d0,8(a0)
    *thisStack = newStack;
   13ef8:	|      movea.l 32(sp),a0
   13efc:	|      move.l 8(sp),(a0)
    return TRUE;
   13f00:	|      moveq #1,d0
}
   13f02:	'----> movea.l (sp)+,a6
   13f04:	       lea 20(sp),sp
   13f08:	       rts

00013f0a <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   13f0a:	       lea -16(sp),sp
   13f0e:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   13f10:	       moveq #12,d0
   13f12:	       move.l d0,16(sp)
   13f16:	       clr.l 12(sp)
   13f1a:	       move.l 1c810 <SysBase>,d0
   13f20:	       movea.l d0,a6
   13f22:	       move.l 16(sp),d0
   13f26:	       move.l 12(sp),d1
   13f2a:	       jsr -684(a6)
   13f2e:	       move.l d0,8(sp)
   13f32:	       move.l 8(sp),d0
   13f36:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   13f3a:	   ,-- bne.s 13f40 <addVarToStackQuick+0x36>
   13f3c:	   |   clr.w d0
   13f3e:	,--|-- bra.s 13f76 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   13f40:	|  '-> move.l 4(sp),d0
   13f44:	|      pea 8 <_start+0x8>
   13f48:	|      move.l 28(sp),-(sp)
   13f4c:	|      move.l d0,-(sp)
   13f4e:	|      jsr 170c0 <memcpy>
   13f54:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   13f58:	|      movea.l 24(sp),a0
   13f5c:	|      clr.l (a0)

    newStack->next = *thisStack;
   13f5e:	|      movea.l 28(sp),a0
   13f62:	|      move.l (a0),d0
   13f64:	|      movea.l 4(sp),a0
   13f68:	|      move.l d0,8(a0)
    *thisStack = newStack;
   13f6c:	|      movea.l 28(sp),a0
   13f70:	|      move.l 4(sp),(a0)
    return TRUE;
   13f74:	|      moveq #1,d0
}
   13f76:	'----> movea.l (sp)+,a6
   13f78:	       lea 16(sp),sp
   13f7c:	       rts

00013f7e <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   13f7e:	       lea -16(sp),sp
   13f82:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   13f84:	       movea.l 24(sp),a0
   13f88:	       move.l (a0),d0
   13f8a:	       moveq #1,d1
   13f8c:	       cmp.l d0,d1
   13f8e:	   ,-- bne.s 13fb8 <addVariablesInSecond+0x3a>
   13f90:	   |   movea.l 28(sp),a0
   13f94:	   |   move.l (a0),d0
   13f96:	   |   moveq #1,d1
   13f98:	   |   cmp.l d0,d1
   13f9a:	   +-- bne.s 13fb8 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   13f9c:	   |   movea.l 28(sp),a0
   13fa0:	   |   move.l 4(a0),d1
   13fa4:	   |   movea.l 24(sp),a0
   13fa8:	   |   move.l 4(a0),d0
   13fac:	   |   add.l d1,d0
   13fae:	   |   movea.l 28(sp),a0
   13fb2:	   |   move.l d0,4(a0)
   13fb6:	,--|-- bra.s 14032 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   13fb8:	|  '-> move.l 24(sp),-(sp)
   13fbc:	|      jsr 14c1e <getTextFromAnyVar>
   13fc2:	|      addq.l #4,sp
   13fc4:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   13fc8:	|      move.l 28(sp),-(sp)
   13fcc:	|      jsr 14c1e <getTextFromAnyVar>
   13fd2:	|      addq.l #4,sp
   13fd4:	|      move.l d0,12(sp)

		unlinkVar(var2);
   13fd8:	|      move.l 28(sp),-(sp)
   13fdc:	|      jsr 14896 <unlinkVar>
   13fe2:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   13fe4:	|      move.l 12(sp),-(sp)
   13fe8:	|      move.l 20(sp),-(sp)
   13fec:	|      jsr 13b74 <joinStrings>
   13ff2:	|      addq.l #8,sp
   13ff4:	|      movea.l 28(sp),a0
   13ff8:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   13ffc:	|      movea.l 28(sp),a0
   14000:	|      moveq #3,d0
   14002:	|      move.l d0,(a0)
		FreeVec(string1);
   14004:	|      move.l 16(sp),8(sp)
   1400a:	|      move.l 1c810 <SysBase>,d0
   14010:	|      movea.l d0,a6
   14012:	|      movea.l 8(sp),a1
   14016:	|      jsr -690(a6)
		FreeVec(string2);
   1401a:	|      move.l 12(sp),4(sp)
   14020:	|      move.l 1c810 <SysBase>,d0
   14026:	|      movea.l d0,a6
   14028:	|      movea.l 4(sp),a1
   1402c:	|      jsr -690(a6)
	}
}
   14030:	|      nop
   14032:	'----> nop
   14034:	       movea.l (sp)+,a6
   14036:	       lea 16(sp),sp
   1403a:	       rts

0001403c <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   1403c:	movea.l 8(sp),a0
   14040:	move.l 4(a0),-(sp)
   14044:	move.l (a0),-(sp)
   14046:	movea.l 12(sp),a0
   1404a:	move.l 4(a0),-(sp)
   1404e:	move.l (a0),-(sp)
   14050:	jsr 14072 <compareVars>
   14056:	lea 16(sp),sp
   1405a:	move.l d0,-(sp)
   1405c:	pea 1 <_start+0x1>
   14060:	move.l 16(sp),-(sp)
   14064:	jsr 14f3a <setVariable>
   1406a:	lea 12(sp),sp
}
   1406e:	nop
   14070:	rts

00014072 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   14072:	       subq.l #4,sp
	int re = 0;
   14074:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   14076:	       move.l 8(sp),d1
   1407a:	       move.l 16(sp),d0
   1407e:	       cmp.l d1,d0
   14080:	,----- bne.w 14148 <compareVars+0xd6>
		switch (var1.varType) {
   14084:	|      move.l 8(sp),d0
   14088:	|      moveq #9,d1
   1408a:	|      cmp.l d0,d1
   1408c:	|  ,-- bcs.w 14130 <compareVars+0xbe>
   14090:	|  |   add.l d0,d0
   14092:	|  |   movea.l d0,a0
   14094:	|  |   adda.l #82080,a0
   1409a:	|  |   move.w (a0),d0
   1409c:	|  |   jmp (140a0 <compareVars+0x2e>,pc,d0.w)
   140a0:	|  |   ori.b #-112,(a4)
   140a4:	|  |   ori.l #5243024,(a0)
   140aa:	|  |   ori.l #7733392,(a0)
   140b0:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   140b6:	|  |   move.l d0,(sp)
			break;
   140b8:	+--|-- bra.w 14148 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   140bc:	|  |   move.l 12(sp),d1
   140c0:	|  |   move.l 20(sp),d0
   140c4:	|  |   cmp.l d1,d0
   140c6:	|  |   seq d0
   140c8:	|  |   neg.b d0
   140ca:	|  |   move.b d0,d0
   140cc:	|  |   andi.l #255,d0
   140d2:	|  |   move.l d0,(sp)
			break;
   140d4:	+--|-- bra.s 14148 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   140d6:	|  |   move.l 12(sp),d1
   140da:	|  |   move.l 20(sp),d0
   140de:	|  |   cmp.l d1,d0
   140e0:	|  |   seq d0
   140e2:	|  |   neg.b d0
   140e4:	|  |   move.b d0,d0
   140e6:	|  |   andi.l #255,d0
   140ec:	|  |   move.l d0,(sp)
			break;
   140ee:	+--|-- bra.s 14148 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   140f0:	|  |   move.l 20(sp),d1
   140f4:	|  |   move.l 12(sp),d0
   140f8:	|  |   move.l d1,-(sp)
   140fa:	|  |   move.l d0,-(sp)
   140fc:	|  |   jsr 13af4 <strcmp>
   14102:	|  |   addq.l #8,sp
   14104:	|  |   tst.l d0
   14106:	|  |   seq d0
   14108:	|  |   neg.b d0
   1410a:	|  |   move.b d0,d0
   1410c:	|  |   andi.l #255,d0
   14112:	|  |   move.l d0,(sp)
			break;
   14114:	+--|-- bra.s 14148 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   14116:	|  |   move.l 12(sp),d1
   1411a:	|  |   move.l 20(sp),d0
   1411e:	|  |   cmp.l d1,d0
   14120:	|  |   seq d0
   14122:	|  |   neg.b d0
   14124:	|  |   move.b d0,d0
   14126:	|  |   andi.l #255,d0
   1412c:	|  |   move.l d0,(sp)
			break;
   1412e:	+--|-- bra.s 14148 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   14130:	|  '-> move.l 12(sp),d1
   14134:	|      move.l 20(sp),d0
   14138:	|      cmp.l d1,d0
   1413a:	|      seq d0
   1413c:	|      neg.b d0
   1413e:	|      move.b d0,d0
   14140:	|      andi.l #255,d0
   14146:	|      move.l d0,(sp)
		}
	}
	return re;
   14148:	'----> move.l (sp),d0
}
   1414a:	       addq.l #4,sp
   1414c:	       rts

0001414e <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   1414e:	             lea -16(sp),sp
   14152:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   14154:	             movea.l 28(sp),a0
   14158:	             moveq #6,d0
   1415a:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   1415c:	             moveq #12,d0
   1415e:	             move.l d0,12(sp)
   14162:	             clr.l 8(sp)
   14166:	             move.l 1c810 <SysBase>,d0
   1416c:	             movea.l d0,a6
   1416e:	             move.l 12(sp),d0
   14172:	             move.l 8(sp),d1
   14176:	             jsr -684(a6)
   1417a:	             move.l d0,4(sp)
   1417e:	             move.l 4(sp),d0
   14182:	             movea.l 28(sp),a0
   14186:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   1418a:	             movea.l 28(sp),a0
   1418e:	             move.l 4(a0),d0
   14192:	         ,-- bne.s 1419a <copyStack+0x4c>
   14194:	         |   clr.w d0
   14196:	,--------|-- bra.w 1421c <copyStack+0xce>
	to->varData.theStack->first = NULL;
   1419a:	|        '-> movea.l 28(sp),a0
   1419e:	|            movea.l 4(a0),a0
   141a2:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   141a4:	|            movea.l 28(sp),a0
   141a8:	|            movea.l 4(a0),a0
   141ac:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   141b0:	|            movea.l 28(sp),a0
   141b4:	|            movea.l 4(a0),a0
   141b8:	|            moveq #1,d0
   141ba:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   141be:	|            movea.l 24(sp),a0
   141c2:	|            movea.l 4(a0),a0
   141c6:	|            move.l (a0),16(sp)

	while (a) {
   141ca:	|     ,----- bra.s 14214 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   141cc:	|  ,--|----> movea.l 28(sp),a0
   141d0:	|  |  |      move.l 4(a0),d0
   141d4:	|  |  |      move.l d0,d1
   141d6:	|  |  |      move.l 16(sp),d0
   141da:	|  |  |      move.l d1,-(sp)
   141dc:	|  |  |      move.l d0,-(sp)
   141de:	|  |  |      jsr 13e84 <addVarToStack>
   141e4:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   141e6:	|  |  |      movea.l 28(sp),a0
   141ea:	|  |  |      movea.l 4(a0),a0
   141ee:	|  |  |      move.l 4(a0),d0
   141f2:	|  |  |  ,-- bne.s 1420a <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   141f4:	|  |  |  |   movea.l 28(sp),a0
   141f8:	|  |  |  |   movea.l 4(a0),a1
   141fc:	|  |  |  |   movea.l 28(sp),a0
   14200:	|  |  |  |   movea.l 4(a0),a0
   14204:	|  |  |  |   move.l (a1),d0
   14206:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   1420a:	|  |  |  '-> movea.l 16(sp),a0
   1420e:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   14214:	|  |  '----> tst.l 16(sp)
   14218:	|  '-------- bne.s 141cc <copyStack+0x7e>
	}

	return TRUE;
   1421a:	|            moveq #1,d0
}
   1421c:	'----------> movea.l (sp)+,a6
   1421e:	             lea 16(sp),sp
   14222:	             rts

00014224 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   14224:	                lea -20(sp),sp
   14228:	                move.l a6,-(sp)
   1422a:	                move.l 36(sp),d0
   1422e:	                move.w d0,d0
   14230:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   14234:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   1423a:	                clr.l 16(sp)

    while (*huntVar) {
   1423e:	   ,----------- bra.s 142bc <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   14240:	,--|----------> movea.l 20(sp),a0
   14244:	|  |            movea.l (a0),a0
   14246:	|  |            movea.l 28(sp),a1
   1424a:	|  |            move.l 4(a1),-(sp)
   1424e:	|  |            move.l (a1),-(sp)
   14250:	|  |            move.l 4(a0),-(sp)
   14254:	|  |            move.l (a0),-(sp)
   14256:	|  |            jsr 14072 <compareVars>
   1425c:	|  |            lea 16(sp),sp
   14260:	|  |            tst.l d0
   14262:	|  |  ,-------- beq.s 142ae <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   14264:	|  |  |         movea.l 20(sp),a0
   14268:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   1426c:	|  |  |         movea.l 12(sp),a0
   14270:	|  |  |         move.l 8(a0),d0
   14274:	|  |  |         movea.l 20(sp),a0
   14278:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   1427a:	|  |  |         move.l 12(sp),d0
   1427e:	|  |  |         move.l d0,-(sp)
   14280:	|  |  |         jsr 14896 <unlinkVar>
   14286:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   14288:	|  |  |         move.l 12(sp),8(sp)
   1428e:	|  |  |         move.l 1c810 <SysBase>,d0
   14294:	|  |  |         movea.l d0,a6
   14296:	|  |  |         movea.l 8(sp),a1
   1429a:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   1429e:	|  |  |         tst.w 6(sp)
   142a2:	|  |  |     ,-- bne.s 142a8 <deleteVarFromStack+0x84>
   142a4:	|  |  |     |   moveq #1,d0
   142a6:	|  |  |  ,--|-- bra.s 142ca <deleteVarFromStack+0xa6>
            reply++;
   142a8:	|  |  |  |  '-> addq.l #1,16(sp)
   142ac:	|  +--|--|----- bra.s 142bc <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   142ae:	|  |  '--|----> movea.l 20(sp),a0
   142b2:	|  |     |      move.l (a0),d0
   142b4:	|  |     |      move.l d0,d1
   142b6:	|  |     |      addq.l #8,d1
   142b8:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   142bc:	|  '-----|----> movea.l 20(sp),a0
   142c0:	|        |      move.l (a0),d0
   142c2:	'--------|----- bne.w 14240 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   142c6:	         |      move.l 16(sp),d0
}
   142ca:	         '----> movea.l (sp)+,a6
   142cc:	                lea 20(sp),sp
   142d0:	                rts

000142d2 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   142d2:	       movea.l 4(sp),a0
   142d6:	       move.l 4(a0),d0
   142da:	       cmp.l 8(sp),d0
   142de:	   ,-- bhi.s 142e4 <fastArrayGetByIndex+0x12>
   142e0:	   |   moveq #0,d0
   142e2:	,--|-- bra.s 142f2 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   142e4:	|  '-> movea.l 4(sp),a0
   142e8:	|      move.l (a0),d1
   142ea:	|      move.l 8(sp),d0
   142ee:	|      lsl.l #3,d0
   142f0:	|      add.l d1,d0
}
   142f2:	'----> rts

000142f4 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   142f4:	                lea -32(sp),sp
   142f8:	                move.l a6,-(sp)
   142fa:	                move.l a2,-(sp)
    struct persona *p = NULL;
   142fc:	                clr.l 36(sp)

    switch (thisVar->varType) {
   14300:	                movea.l 44(sp),a0
   14304:	                move.l (a0),d0
   14306:	                moveq #8,d1
   14308:	                cmp.l d0,d1
   1430a:	            ,-- beq.s 14318 <getCostumeFromVar+0x24>
   1430c:	            |   moveq #9,d1
   1430e:	            |   cmp.l d0,d1
   14310:	   ,--------|-- beq.w 143c6 <getCostumeFromVar+0xd2>
   14314:	,--|--------|-- bra.w 143d0 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   14318:	|  |        '-> moveq #8,d0
   1431a:	|  |            move.l d0,28(sp)
   1431e:	|  |            clr.l 24(sp)
   14322:	|  |            move.l 1c810 <SysBase>,d0
   14328:	|  |            movea.l d0,a6
   1432a:	|  |            move.l 28(sp),d0
   1432e:	|  |            move.l 24(sp),d1
   14332:	|  |            jsr -684(a6)
   14336:	|  |            move.l d0,20(sp)
   1433a:	|  |            move.l 20(sp),d0
   1433e:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   14342:	|  |        ,-- bne.s 1434a <getCostumeFromVar+0x56>
   14344:	|  |        |   moveq #0,d0
   14346:	|  |  ,-----|-- bra.w 143fa <getCostumeFromVar+0x106>
            p->numDirections = 1;
   1434a:	|  |  |     '-> movea.l 36(sp),a0
   1434e:	|  |  |         moveq #1,d1
   14350:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   14354:	|  |  |         moveq #12,d0
   14356:	|  |  |         move.l d0,16(sp)
   1435a:	|  |  |         clr.l 12(sp)
   1435e:	|  |  |         move.l 1c810 <SysBase>,d0
   14364:	|  |  |         movea.l d0,a6
   14366:	|  |  |         move.l 16(sp),d0
   1436a:	|  |  |         move.l 12(sp),d1
   1436e:	|  |  |         jsr -684(a6)
   14372:	|  |  |         move.l d0,8(sp)
   14376:	|  |  |         move.l 8(sp),d0
   1437a:	|  |  |         movea.l 36(sp),a0
   1437e:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   14380:	|  |  |         movea.l 36(sp),a0
   14384:	|  |  |         move.l (a0),d0
   14386:	|  |  |     ,-- bne.s 1438c <getCostumeFromVar+0x98>
   14388:	|  |  |     |   moveq #0,d0
   1438a:	|  |  +-----|-- bra.s 143fa <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   1438c:	|  |  |     '-> clr.l 32(sp)
   14390:	|  |  |     ,-- bra.s 143bc <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   14392:	|  |  |  ,--|-> movea.l 44(sp),a0
   14396:	|  |  |  |  |   move.l 4(a0),d0
   1439a:	|  |  |  |  |   movea.l 36(sp),a0
   1439e:	|  |  |  |  |   movea.l (a0),a0
   143a0:	|  |  |  |  |   move.l 32(sp),d1
   143a4:	|  |  |  |  |   add.l d1,d1
   143a6:	|  |  |  |  |   add.l d1,d1
   143a8:	|  |  |  |  |   lea (0,a0,d1.l),a2
   143ac:	|  |  |  |  |   move.l d0,-(sp)
   143ae:	|  |  |  |  |   jsr 93b4 <copyAnim>
   143b4:	|  |  |  |  |   addq.l #4,sp
   143b6:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   143b8:	|  |  |  |  |   addq.l #1,32(sp)
   143bc:	|  |  |  |  '-> moveq #2,d1
   143be:	|  |  |  |      cmp.l 32(sp),d1
   143c2:	|  |  |  '----- bge.s 14392 <getCostumeFromVar+0x9e>
            }
            break;
   143c4:	|  |  |     ,-- bra.s 143f6 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   143c6:	|  '--|-----|-> movea.l 44(sp),a0
   143ca:	|     |     |   move.l 4(a0),d0
   143ce:	|     +-----|-- bra.s 143fa <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   143d0:	'-----|-----|-> movea.l 44(sp),a0
   143d4:	      |     |   move.l (a0),d0
   143d6:	      |     |   add.l d0,d0
   143d8:	      |     |   movea.l d0,a1
   143da:	      |     |   adda.l d0,a1
   143dc:	      |     |   lea 1c6e0 <typeName>,a0
   143e2:	      |     |   move.l (0,a1,a0.l),d0
   143e6:	      |     |   move.l d0,-(sp)
   143e8:	      |     |   pea 19d5e <talk.c.490538ff+0x3f9>
   143ee:	      |     |   jsr 1710c <KPrintF>
   143f4:	      |     |   addq.l #8,sp
    }

    return p;
   143f6:	      |     '-> move.l 36(sp),d0
}
   143fa:	      '-------> movea.l (sp)+,a2
   143fc:	                movea.l (sp)+,a6
   143fe:	                lea 32(sp),sp
   14402:	                rts

00014404 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   14404:	                lea -96(sp),sp
   14408:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   1440c:	                move.l 116(sp),-(sp)
   14410:	                pea 19d96 <talk.c.490538ff+0x431>
   14416:	                jsr 13b74 <joinStrings>
   1441c:	                addq.l #8,sp
   1441e:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   14422:	            ,-- bne.s 1442a <getSavedGamesStack+0x26>
   14424:	            |   clr.w d0
   14426:	,-----------|-- bra.w 1463e <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   1442a:	|           '-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   1442e:	|               move.l #105880,98(sp)
   14436:	|               moveq #-2,d0
   14438:	|               move.l d0,94(sp)
   1443c:	|               move.l 1c818 <DOSBase>,d0
   14442:	|               movea.l d0,a6
   14444:	|               move.l 98(sp),d1
   14448:	|               move.l 94(sp),d2
   1444c:	|               jsr -84(a6)
   14450:	|               move.l d0,90(sp)
   14454:	|               move.l 90(sp),d0
   14458:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   1445c:	|           ,-- bne.s 14464 <getSavedGamesStack+0x60>
   1445e:	|           |   clr.w d0
   14460:	+-----------|-- bra.w 1463e <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   14464:	|           '-> move.l #260,82(sp)
   1446c:	|               move.l #65536,78(sp)
   14474:	|               move.l 1c810 <SysBase>,d0
   1447a:	|               movea.l d0,a6
   1447c:	|               move.l 82(sp),d0
   14480:	|               move.l 78(sp),d1
   14484:	|               jsr -684(a6)
   14488:	|               move.l d0,74(sp)
   1448c:	|               move.l 74(sp),d0
   14490:	|               move.l d0,70(sp)
	if (!fib) {
   14494:	|           ,-- bne.s 144b2 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   14496:	|           |   move.l 86(sp),22(sp)
   1449c:	|           |   move.l 1c818 <DOSBase>,d0
   144a2:	|           |   movea.l d0,a6
   144a4:	|           |   move.l 22(sp),d1
   144a8:	|           |   jsr -90(a6)
		return FALSE;
   144ac:	|           |   clr.w d0
   144ae:	+-----------|-- bra.w 1463e <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   144b2:	|           '-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   144b6:	|               move.l 86(sp),66(sp)
   144bc:	|               move.l 70(sp),62(sp)
   144c2:	|               move.l 1c818 <DOSBase>,d0
   144c8:	|               movea.l d0,a6
   144ca:	|               move.l 66(sp),d1
   144ce:	|               move.l 62(sp),d2
   144d2:	|               jsr -102(a6)
   144d6:	|               move.l d0,58(sp)
   144da:	|               move.l 58(sp),d0
   144de:	|  ,----------- beq.w 145f2 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   144e2:	|  |        ,-- bra.w 145be <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   144e6:	|  |  ,-----|-> move.l 70(sp),d2
   144ea:	|  |  |     |   addq.l #8,d2
   144ec:	|  |  |     |   move.l 70(sp),d0
   144f0:	|  |  |     |   addq.l #8,d0
   144f2:	|  |  |     |   move.l d0,-(sp)
   144f4:	|  |  |     |   jsr 13b34 <strlen>
   144fa:	|  |  |     |   addq.l #4,sp
   144fc:	|  |  |     |   move.l d0,d3
   144fe:	|  |  |     |   move.l 116(sp),-(sp)
   14502:	|  |  |     |   jsr 13b34 <strlen>
   14508:	|  |  |     |   addq.l #4,sp
   1450a:	|  |  |     |   move.l d3,d1
   1450c:	|  |  |     |   sub.l d0,d1
   1450e:	|  |  |     |   move.l d2,d0
   14510:	|  |  |     |   add.l d1,d0
   14512:	|  |  |     |   move.l 116(sp),-(sp)
   14516:	|  |  |     |   move.l d0,-(sp)
   14518:	|  |  |     |   jsr 13af4 <strcmp>
   1451e:	|  |  |     |   addq.l #8,sp
   14520:	|  |  |     |   tst.l d0
   14522:	|  |  |     +-- bne.w 145be <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   14526:	|  |  |     |   move.l 70(sp),d0
   1452a:	|  |  |     |   addq.l #8,d0
   1452c:	|  |  |     |   move.l d0,-(sp)
   1452e:	|  |  |     |   jsr 13b34 <strlen>
   14534:	|  |  |     |   addq.l #4,sp
   14536:	|  |  |     |   move.l d0,d2
   14538:	|  |  |     |   move.l 116(sp),-(sp)
   1453c:	|  |  |     |   jsr 13b34 <strlen>
   14542:	|  |  |     |   addq.l #4,sp
   14544:	|  |  |     |   move.l d0,d1
   14546:	|  |  |     |   move.l d2,d0
   14548:	|  |  |     |   sub.l d1,d0
   1454a:	|  |  |     |   movea.l 70(sp),a0
   1454e:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   14552:	|  |  |     |   move.l 70(sp),d0
   14556:	|  |  |     |   addq.l #8,d0
   14558:	|  |  |     |   move.l d0,-(sp)
   1455a:	|  |  |     |   jsr 118 <decodeFilename>
   14560:	|  |  |     |   addq.l #4,sp
   14562:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   14566:	|  |  |     |   move.l 42(sp),-(sp)
   1456a:	|  |  |     |   lea 18(sp),a0
   1456e:	|  |  |     |   move.l a0,-(sp)
   14570:	|  |  |     |   jsr 1486a <makeTextVar>
   14576:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   14578:	|  |  |     |   move.l 42(sp),38(sp)
   1457e:	|  |  |     |   move.l 1c810 <SysBase>,d0
   14584:	|  |  |     |   movea.l d0,a6
   14586:	|  |  |     |   movea.l 38(sp),a1
   1458a:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   1458e:	|  |  |     |   move.l 112(sp),d0
   14592:	|  |  |     |   move.l d0,-(sp)
   14594:	|  |  |     |   lea 18(sp),a0
   14598:	|  |  |     |   move.l a0,-(sp)
   1459a:	|  |  |     |   jsr 13e84 <addVarToStack>
   145a0:	|  |  |     |   addq.l #8,sp
   145a2:	|  |  |     |   tst.w d0
   145a4:	|  |  |  ,--|-- beq.s 145f6 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   145a6:	|  |  |  |  |   movea.l 112(sp),a0
   145aa:	|  |  |  |  |   move.l 4(a0),d0
   145ae:	|  |  |  |  +-- bne.s 145be <getSavedGamesStack+0x1ba>
   145b0:	|  |  |  |  |   movea.l 112(sp),a0
   145b4:	|  |  |  |  |   move.l (a0),d0
   145b6:	|  |  |  |  |   movea.l 112(sp),a0
   145ba:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   145be:	|  |  |  |  '-> move.l 86(sp),54(sp)
   145c4:	|  |  |  |      move.l 70(sp),50(sp)
   145ca:	|  |  |  |      move.l 1c818 <DOSBase>,d0
   145d0:	|  |  |  |      movea.l d0,a6
   145d2:	|  |  |  |      move.l 54(sp),d1
   145d6:	|  |  |  |      move.l 50(sp),d2
   145da:	|  |  |  |      jsr -108(a6)
   145de:	|  |  |  |      move.l d0,46(sp)
   145e2:	|  |  |  |      move.l 46(sp),d0
   145e6:	|  |  '--|----- bne.w 144e6 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   145ea:	|  |     |      move.w #1,106(sp)
   145f0:	|  |     |  ,-- bra.s 145f8 <getSavedGamesStack+0x1f4>
	}

cleanup:
   145f2:	|  '-----|--|-> nop
   145f4:	|        |  +-- bra.s 145f8 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   145f6:	|        '--|-> nop
	FreeVec(fib);
   145f8:	|           '-> move.l 70(sp),34(sp)
   145fe:	|               move.l 1c810 <SysBase>,d0
   14604:	|               movea.l d0,a6
   14606:	|               movea.l 34(sp),a1
   1460a:	|               jsr -690(a6)
	UnLock(dirLock);
   1460e:	|               move.l 86(sp),30(sp)
   14614:	|               move.l 1c818 <DOSBase>,d0
   1461a:	|               movea.l d0,a6
   1461c:	|               move.l 30(sp),d1
   14620:	|               jsr -90(a6)
	FreeVec(pattern);
   14624:	|               move.l 102(sp),26(sp)
   1462a:	|               move.l 1c810 <SysBase>,d0
   14630:	|               movea.l d0,a6
   14632:	|               movea.l 26(sp),a1
   14636:	|               jsr -690(a6)
	return result;
   1463a:	|               move.w 106(sp),d0
}
   1463e:	'-------------> movem.l (sp)+,d2-d3/a6
   14642:	                lea 96(sp),sp
   14646:	                rts

00014648 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   14648:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   1464a:	       movea.l 20(sp),a0
   1464e:	       move.l (a0),d0
   14650:	       cmp.l 16(sp),d0
   14654:	,----- beq.s 146b8 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   14656:	|      move.l 16(sp),d0
   1465a:	|      add.l d0,d0
   1465c:	|      movea.l d0,a1
   1465e:	|      adda.l d0,a1
   14660:	|      lea 1c6e0 <typeName>,a0
   14666:	|      move.l (0,a1,a0.l),d0
   1466a:	|      move.l d0,-(sp)
   1466c:	|      pea 19d9a <talk.c.490538ff+0x435>
   14672:	|      jsr 13b74 <joinStrings>
   14678:	|      addq.l #8,sp
   1467a:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   1467e:	|      movea.l 20(sp),a0
   14682:	|      move.l (a0),d0
   14684:	|      add.l d0,d0
   14686:	|      movea.l d0,a1
   14688:	|      adda.l d0,a1
   1468a:	|      lea 1c6e0 <typeName>,a0
   14690:	|      move.l (0,a1,a0.l),d0
   14694:	|      move.l d0,-(sp)
   14696:	|      pea 19ddc <talk.c.490538ff+0x477>
   1469c:	|      jsr 13b74 <joinStrings>
   146a2:	|      addq.l #8,sp
   146a4:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   146a6:	|      move.l (sp),-(sp)
   146a8:	|      move.l 8(sp),-(sp)
   146ac:	|      jsr 1710c <KPrintF>
   146b2:	|      addq.l #8,sp

		return FALSE;
   146b4:	|      clr.w d0
   146b6:	|  ,-- bra.s 146c8 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   146b8:	'--|-> movea.l 20(sp),a0
   146bc:	   |   move.l 4(a0),d0
   146c0:	   |   movea.l 12(sp),a0
   146c4:	   |   move.l d0,(a0)
	return TRUE;
   146c6:	   |   moveq #1,d0
}
   146c8:	   '-> addq.l #8,sp
   146ca:	       rts

000146cc <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   146cc:	move.l 8(sp),-(sp)
   146d0:	jsr 7512 <getNumberedString>
   146d6:	addq.l #4,sp
   146d8:	move.l d0,-(sp)
   146da:	move.l 8(sp),-(sp)
   146de:	jsr 1486a <makeTextVar>
   146e4:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   146e6:	movea.l 4(sp),a0
   146ea:	move.l 4(a0),d0
   146ee:	sne d0
   146f0:	neg.b d0
   146f2:	move.b d0,d0
   146f4:	andi.w #255,d0
}
   146f8:	rts

000146fa <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   146fa:	          subq.l #8,sp
    int size = stackSize(stacky);
   146fc:	          move.l 16(sp),-(sp)
   14700:	          jsr 14fa8 <stackSize>
   14706:	          addq.l #4,sp
   14708:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   1470c:	          move.l 4(sp),-(sp)
   14710:	          move.l 16(sp),-(sp)
   14714:	          jsr 14764 <makeFastArraySize>
   1471a:	          addq.l #8,sp
   1471c:	          tst.w d0
   1471e:	      ,-- bne.s 14724 <makeFastArrayFromStack+0x2a>
   14720:	      |   clr.w d0
   14722:	,-----|-- bra.s 14760 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   14724:	|     '-> movea.l 16(sp),a0
   14728:	|         move.l (a0),(sp)
    size = 0;
   1472a:	|         clr.l 4(sp)
    while (allV) {
   1472e:	|     ,-- bra.s 1475a <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   14730:	|  ,--|-> movea.l 12(sp),a0
   14734:	|  |  |   movea.l 4(a0),a0
   14738:	|  |  |   move.l (a0),d1
   1473a:	|  |  |   move.l 4(sp),d0
   1473e:	|  |  |   lsl.l #3,d0
   14740:	|  |  |   add.l d0,d1
   14742:	|  |  |   move.l (sp),d0
   14744:	|  |  |   move.l d1,-(sp)
   14746:	|  |  |   move.l d0,-(sp)
   14748:	|  |  |   jsr 149e6 <copyMain>
   1474e:	|  |  |   addq.l #8,sp
        size++;
   14750:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   14754:	|  |  |   movea.l (sp),a0
   14756:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   1475a:	|  |  '-> tst.l (sp)
   1475c:	|  '----- bne.s 14730 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   1475e:	|         moveq #1,d0
}
   14760:	'-------> addq.l #8,sp
   14762:	          rts

00014764 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   14764:	          lea -28(sp),sp
   14768:	          move.l a6,-(sp)
    if (size < 0) {
   1476a:	          tst.l 40(sp)
   1476e:	      ,-- bge.s 14784 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   14770:	      |   pea 19e21 <talk.c.490538ff+0x4bc>
   14776:	      |   jsr 1710c <KPrintF>
   1477c:	      |   addq.l #4,sp
		return FALSE;
   1477e:	      |   clr.w d0
   14780:	,-----|-- bra.w 14862 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   14784:	|     '-> move.l 36(sp),-(sp)
   14788:	|         jsr 14896 <unlinkVar>
   1478e:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   14790:	|         movea.l 36(sp),a0
   14794:	|         moveq #10,d0
   14796:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   14798:	|         moveq #12,d0
   1479a:	|         move.l d0,24(sp)
   1479e:	|         clr.l 20(sp)
   147a2:	|         move.l 1c810 <SysBase>,d0
   147a8:	|         movea.l d0,a6
   147aa:	|         move.l 24(sp),d0
   147ae:	|         move.l 20(sp),d1
   147b2:	|         jsr -684(a6)
   147b6:	|         move.l d0,16(sp)
   147ba:	|         move.l 16(sp),d0
   147be:	|         movea.l 36(sp),a0
   147c2:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   147c6:	|         movea.l 36(sp),a0
   147ca:	|         move.l 4(a0),d0
   147ce:	|     ,-- bne.s 147d6 <makeFastArraySize+0x72>
   147d0:	|     |   clr.w d0
   147d2:	+-----|-- bra.w 14862 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   147d6:	|     '-> move.l 40(sp),d0
   147da:	|         lsl.l #3,d0
   147dc:	|         move.l d0,12(sp)
   147e0:	|         clr.l 8(sp)
   147e4:	|         move.l 1c810 <SysBase>,d0
   147ea:	|         movea.l d0,a6
   147ec:	|         move.l 12(sp),d0
   147f0:	|         move.l 8(sp),d1
   147f4:	|         jsr -684(a6)
   147f8:	|         move.l d0,4(sp)
   147fc:	|         move.l 4(sp),d0
   14800:	|         movea.l 36(sp),a0
   14804:	|         movea.l 4(a0),a0
   14808:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   1480a:	|         movea.l 36(sp),a0
   1480e:	|         movea.l 4(a0),a0
   14812:	|         move.l (a0),d0
   14814:	|     ,-- bne.s 1481a <makeFastArraySize+0xb6>
   14816:	|     |   clr.w d0
   14818:	+-----|-- bra.s 14862 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   1481a:	|     '-> clr.l 28(sp)
   1481e:	|     ,-- bra.s 1483a <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   14820:	|  ,--|-> movea.l 36(sp),a0
   14824:	|  |  |   movea.l 4(a0),a0
   14828:	|  |  |   move.l (a0),d1
   1482a:	|  |  |   move.l 28(sp),d0
   1482e:	|  |  |   lsl.l #3,d0
   14830:	|  |  |   movea.l d1,a0
   14832:	|  |  |   adda.l d0,a0
   14834:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   14836:	|  |  |   addq.l #1,28(sp)
   1483a:	|  |  '-> move.l 28(sp),d0
   1483e:	|  |      cmp.l 40(sp),d0
   14842:	|  '----- blt.s 14820 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   14844:	|         movea.l 36(sp),a0
   14848:	|         movea.l 4(a0),a0
   1484c:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   14852:	|         movea.l 36(sp),a0
   14856:	|         movea.l 4(a0),a0
   1485a:	|         moveq #1,d0
   1485c:	|         move.l d0,8(a0)
    return TRUE;
   14860:	|         moveq #1,d0
}
   14862:	'-------> movea.l (sp)+,a6
   14864:	          lea 28(sp),sp
   14868:	          rts

0001486a <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   1486a:	move.l 4(sp),-(sp)
   1486e:	jsr 14896 <unlinkVar>
   14874:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   14876:	movea.l 4(sp),a0
   1487a:	moveq #3,d0
   1487c:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   1487e:	move.l 8(sp),-(sp)
   14882:	jsr b8 <copyString>
   14888:	addq.l #4,sp
   1488a:	movea.l 4(sp),a0
   1488e:	move.l d0,4(a0)
}
   14892:	nop
   14894:	rts

00014896 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   14896:	                      lea -16(sp),sp
   1489a:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   1489c:	                      movea.l 24(sp),a0
   148a0:	                      move.l (a0),d0
   148a2:	                      moveq #10,d1
   148a4:	                      cmp.l d0,d1
   148a6:	            ,-------- beq.w 1495e <unlinkVar+0xc8>
   148aa:	            |         moveq #10,d1
   148ac:	            |         cmp.l d0,d1
   148ae:	,-----------|-------- bcs.w 149d2 <unlinkVar+0x13c>
   148b2:	|           |         moveq #8,d1
   148b4:	|           |         cmp.l d0,d1
   148b6:	|  ,--------|-------- beq.w 149be <unlinkVar+0x128>
   148ba:	|  |        |         moveq #8,d1
   148bc:	|  |        |         cmp.l d0,d1
   148be:	+--|--------|-------- bcs.w 149d2 <unlinkVar+0x13c>
   148c2:	|  |        |         moveq #3,d1
   148c4:	|  |        |         cmp.l d0,d1
   148c6:	|  |        |     ,-- beq.s 148d2 <unlinkVar+0x3c>
   148c8:	|  |        |     |   moveq #6,d1
   148ca:	|  |        |     |   cmp.l d0,d1
   148cc:	|  |        |  ,--|-- beq.s 148f8 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   148ce:	+--|--------|--|--|-- bra.w 149d2 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   148d2:	|  |        |  |  '-> movea.l 24(sp),a0
   148d6:	|  |        |  |      move.l 4(a0),4(sp)
   148dc:	|  |        |  |      move.l 1c810 <SysBase>,d0
   148e2:	|  |        |  |      movea.l d0,a6
   148e4:	|  |        |  |      movea.l 4(sp),a1
   148e8:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   148ec:	|  |        |  |      movea.l 24(sp),a0
   148f0:	|  |        |  |      clr.l 4(a0)
		break;
   148f4:	|  |  ,-----|--|----- bra.w 149dc <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   148f8:	|  |  |     |  '----> movea.l 24(sp),a0
   148fc:	|  |  |     |         movea.l 4(a0),a0
   14900:	|  |  |     |         move.l 8(a0),d0
   14904:	|  |  |     |         subq.l #1,d0
   14906:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   1490a:	|  |  |     |         movea.l 24(sp),a0
   1490e:	|  |  |     |         movea.l 4(a0),a0
   14912:	|  |  |     |         move.l 8(a0),d0
   14916:	|  |  |  ,--|-------- bgt.w 149d6 <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   1491a:	|  |  |  |  |     ,-- bra.s 1492e <unlinkVar+0x98>
   1491c:	|  |  |  |  |  ,--|-> movea.l 24(sp),a0
   14920:	|  |  |  |  |  |  |   move.l 4(a0),d0
   14924:	|  |  |  |  |  |  |   move.l d0,-(sp)
   14926:	|  |  |  |  |  |  |   jsr 14fcc <trimStack>
   1492c:	|  |  |  |  |  |  |   addq.l #4,sp
   1492e:	|  |  |  |  |  |  '-> movea.l 24(sp),a0
   14932:	|  |  |  |  |  |      movea.l 4(a0),a0
   14936:	|  |  |  |  |  |      move.l (a0),d0
   14938:	|  |  |  |  |  '----- bne.s 1491c <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   1493a:	|  |  |  |  |         movea.l 24(sp),a0
   1493e:	|  |  |  |  |         move.l 4(a0),8(sp)
   14944:	|  |  |  |  |         move.l 1c810 <SysBase>,d0
   1494a:	|  |  |  |  |         movea.l d0,a6
   1494c:	|  |  |  |  |         movea.l 8(sp),a1
   14950:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   14954:	|  |  |  |  |         movea.l 24(sp),a0
   14958:	|  |  |  |  |         clr.l 4(a0)
		break;
   1495c:	|  |  |  +--|-------- bra.s 149d6 <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   1495e:	|  |  |  |  '-------> movea.l 24(sp),a0
   14962:	|  |  |  |            movea.l 4(a0),a0
   14966:	|  |  |  |            move.l 8(a0),d0
   1496a:	|  |  |  |            subq.l #1,d0
   1496c:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14970:	|  |  |  |            movea.l 24(sp),a0
   14974:	|  |  |  |            movea.l 4(a0),a0
   14978:	|  |  |  |            move.l 8(a0),d0
   1497c:	|  |  |  |        ,-- bgt.s 149da <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   1497e:	|  |  |  |        |   movea.l 24(sp),a0
   14982:	|  |  |  |        |   movea.l 4(a0),a0
   14986:	|  |  |  |        |   move.l (a0),16(sp)
   1498a:	|  |  |  |        |   move.l 1c810 <SysBase>,d0
   14990:	|  |  |  |        |   movea.l d0,a6
   14992:	|  |  |  |        |   movea.l 16(sp),a1
   14996:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   1499a:	|  |  |  |        |   movea.l 24(sp),a0
   1499e:	|  |  |  |        |   move.l 4(a0),12(sp)
   149a4:	|  |  |  |        |   move.l 1c810 <SysBase>,d0
   149aa:	|  |  |  |        |   movea.l d0,a6
   149ac:	|  |  |  |        |   movea.l 12(sp),a1
   149b0:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   149b4:	|  |  |  |        |   movea.l 24(sp),a0
   149b8:	|  |  |  |        |   clr.l 4(a0)
		break;
   149bc:	|  |  |  |        +-- bra.s 149da <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   149be:	|  '--|--|--------|-> movea.l 24(sp),a0
   149c2:	|     |  |        |   move.l 4(a0),d0
   149c6:	|     |  |        |   move.l d0,-(sp)
   149c8:	|     |  |        |   jsr 9780 <deleteAnim>
   149ce:	|     |  |        |   addq.l #4,sp
		break;
   149d0:	|     +--|--------|-- bra.s 149dc <unlinkVar+0x146>
		break;
   149d2:	'-----|--|--------|-> nop
   149d4:	      +--|--------|-- bra.s 149dc <unlinkVar+0x146>
		break;
   149d6:	      |  '--------|-> nop
   149d8:	      +-----------|-- bra.s 149dc <unlinkVar+0x146>
		break;
   149da:	      |           '-> nop
	}
}
   149dc:	      '-------------> nop
   149de:	                      movea.l (sp)+,a6
   149e0:	                      lea 16(sp),sp
   149e4:	                      rts

000149e6 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   149e6:	       movea.l 4(sp),a0
   149ea:	       move.l (a0),d0
   149ec:	       movea.l 8(sp),a0
   149f0:	       move.l d0,(a0)
	switch (to->varType) {
   149f2:	       movea.l 8(sp),a0
   149f6:	       move.l (a0),d0
   149f8:	       moveq #10,d1
   149fa:	       cmp.l d0,d1
   149fc:	,----- bcs.w 14aee <copyMain+0x108>
   14a00:	|      add.l d0,d0
   14a02:	|      movea.l d0,a0
   14a04:	|      adda.l #84496,a0
   14a0a:	|      move.w (a0),d0
   14a0c:	|      jmp (14a10 <copyMain+0x2a>,pc,d0.w)
   14a10:	|      .short 0x00da
   14a12:	|      ori.b #22,(a6)
   14a16:	|      ori.w #22,(a4)
   14a1a:	|      ori.b #-126,(a6)
   14a1e:	|      ori.b #-68,(a6)
   14a22:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   14a2a:	|      move.l 4(a0),d0
   14a2e:	|      movea.l 8(sp),a0
   14a32:	|      move.l d0,4(a0)
		return TRUE;
   14a36:	|      moveq #1,d0
   14a38:	|  ,-- bra.w 14b00 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   14a3c:	|  |   movea.l 4(sp),a0
   14a40:	|  |   move.l 4(a0),d0
   14a44:	|  |   movea.l 8(sp),a0
   14a48:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   14a4c:	|  |   movea.l 8(sp),a0
   14a50:	|  |   movea.l 4(a0),a0
   14a54:	|  |   move.l 8(a0),d0
   14a58:	|  |   addq.l #1,d0
   14a5a:	|  |   move.l d0,8(a0)
		return TRUE;
   14a5e:	|  |   moveq #1,d0
   14a60:	|  +-- bra.w 14b00 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   14a64:	|  |   movea.l 4(sp),a0
   14a68:	|  |   move.l 4(a0),d0
   14a6c:	|  |   move.l d0,-(sp)
   14a6e:	|  |   jsr b8 <copyString>
   14a74:	|  |   addq.l #4,sp
   14a76:	|  |   movea.l 8(sp),a0
   14a7a:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   14a7e:	|  |   movea.l 8(sp),a0
   14a82:	|  |   move.l 4(a0),d0
   14a86:	|  |   sne d0
   14a88:	|  |   neg.b d0
   14a8a:	|  |   move.b d0,d0
   14a8c:	|  |   andi.w #255,d0
   14a90:	|  +-- bra.s 14b00 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   14a92:	|  |   movea.l 4(sp),a0
   14a96:	|  |   move.l 4(a0),d0
   14a9a:	|  |   movea.l 8(sp),a0
   14a9e:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   14aa2:	|  |   movea.l 8(sp),a0
   14aa6:	|  |   movea.l 4(a0),a0
   14aaa:	|  |   move.l 8(a0),d0
   14aae:	|  |   addq.l #1,d0
   14ab0:	|  |   move.l d0,8(a0)
		return TRUE;
   14ab4:	|  |   moveq #1,d0
   14ab6:	|  +-- bra.s 14b00 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   14ab8:	|  |   movea.l 4(sp),a0
   14abc:	|  |   move.l 4(a0),d0
   14ac0:	|  |   movea.l 8(sp),a0
   14ac4:	|  |   move.l d0,4(a0)
		return TRUE;
   14ac8:	|  |   moveq #1,d0
   14aca:	|  +-- bra.s 14b00 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   14acc:	|  |   movea.l 4(sp),a0
   14ad0:	|  |   move.l 4(a0),d0
   14ad4:	|  |   move.l d0,-(sp)
   14ad6:	|  |   jsr 93b4 <copyAnim>
   14adc:	|  |   addq.l #4,sp
   14ade:	|  |   movea.l 8(sp),a0
   14ae2:	|  |   move.l d0,4(a0)
		return TRUE;
   14ae6:	|  |   moveq #1,d0
   14ae8:	|  +-- bra.s 14b00 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   14aea:	|  |   moveq #1,d0
   14aec:	|  +-- bra.s 14b00 <copyMain+0x11a>

		default:
		break;
   14aee:	'--|-> nop
	}
	KPrintF("Unknown value type");
   14af0:	   |   pea 19e72 <talk.c.490538ff+0x50d>
   14af6:	   |   jsr 1710c <KPrintF>
   14afc:	   |   addq.l #4,sp
	return FALSE;
   14afe:	   |   clr.w d0
}
   14b00:	   '-> rts

00014b02 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   14b02:	move.l 8(sp),-(sp)
   14b06:	jsr 14896 <unlinkVar>
   14b0c:	addq.l #4,sp
	return copyMain(from, to);
   14b0e:	move.l 8(sp),-(sp)
   14b12:	move.l 8(sp),-(sp)
   14b16:	jsr 149e6 <copyMain>
   14b1c:	addq.l #8,sp
}
   14b1e:	rts

00014b20 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   14b20:	       movea.l 4(sp),a0
   14b24:	       move.l (a0),d0
   14b26:	       moveq #8,d1
   14b28:	       cmp.l d0,d1
   14b2a:	   ,-- bne.s 14b40 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   14b2c:	   |   movea.l 4(sp),a0
   14b30:	   |   move.l 4(a0),d0
   14b34:	   |   move.l d0,-(sp)
   14b36:	   |   jsr 93b4 <copyAnim>
   14b3c:	   |   addq.l #4,sp
   14b3e:	,--|-- bra.s 14b86 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   14b40:	|  '-> movea.l 4(sp),a0
   14b44:	|      move.l (a0),d0
   14b46:	|      moveq #1,d1
   14b48:	|      cmp.l d0,d1
   14b4a:	|  ,-- bne.s 14b5e <getAnimationFromVar+0x3e>
   14b4c:	|  |   movea.l 4(sp),a0
   14b50:	|  |   move.l 4(a0),d0
   14b54:	|  +-- bne.s 14b5e <getAnimationFromVar+0x3e>
		return makeNullAnim();
   14b56:	|  |   jsr ab84 <makeNullAnim>
   14b5c:	+--|-- bra.s 14b86 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14b5e:	|  '-> movea.l 4(sp),a0
   14b62:	|      move.l (a0),d0
   14b64:	|      add.l d0,d0
   14b66:	|      movea.l d0,a1
   14b68:	|      adda.l d0,a1
   14b6a:	|      lea 1c6e0 <typeName>,a0
   14b70:	|      move.l (0,a1,a0.l),d0
   14b74:	|      move.l d0,-(sp)
   14b76:	|      pea 19d5e <talk.c.490538ff+0x3f9>
   14b7c:	|      jsr 1710c <KPrintF>
   14b82:	|      addq.l #8,sp
	return NULL;
   14b84:	|      moveq #0,d0
}
   14b86:	'----> rts

00014b88 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   14b88:	       movea.l 4(sp),a0
   14b8c:	       move.l (a0),d0
   14b8e:	       moveq #10,d1
   14b90:	       cmp.l d0,d1
   14b92:	,----- bcs.w 14c18 <getBoolean+0x90>
   14b96:	|      add.l d0,d0
   14b98:	|      movea.l d0,a0
   14b9a:	|      adda.l #84902,a0
   14ba0:	|      move.w (a0),d0
   14ba2:	|      jmp (14ba6 <getBoolean+0x1e>,pc,d0.w)
   14ba6:	|      ori.b #26,(a6)
   14baa:	|      ori.w #68,(114,a2,d0.w)
   14bb0:	|      ori.w #46,(114,a2,d0.w)
   14bb6:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   14bbc:	|      clr.w d0
   14bbe:	|  ,-- bra.s 14c1c <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   14bc0:	|  |   movea.l 4(sp),a0
   14bc4:	|  |   move.l 4(a0),d0
   14bc8:	|  |   sne d0
   14bca:	|  |   neg.b d0
   14bcc:	|  |   move.b d0,d0
   14bce:	|  |   andi.w #255,d0
   14bd2:	|  +-- bra.s 14c1c <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   14bd4:	|  |   movea.l 4(sp),a0
   14bd8:	|  |   movea.l 4(a0),a0
   14bdc:	|  |   move.l (a0),d0
   14bde:	|  |   sne d0
   14be0:	|  |   neg.b d0
   14be2:	|  |   move.b d0,d0
   14be4:	|  |   andi.w #255,d0
   14be8:	|  +-- bra.s 14c1c <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   14bea:	|  |   movea.l 4(sp),a0
   14bee:	|  |   movea.l 4(a0),a0
   14bf2:	|  |   move.b (a0),d0
   14bf4:	|  |   sne d0
   14bf6:	|  |   neg.b d0
   14bf8:	|  |   move.b d0,d0
   14bfa:	|  |   andi.w #255,d0
   14bfe:	|  +-- bra.s 14c1c <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   14c00:	|  |   movea.l 4(sp),a0
   14c04:	|  |   movea.l 4(a0),a0
   14c08:	|  |   move.l 4(a0),d0
   14c0c:	|  |   sne d0
   14c0e:	|  |   neg.b d0
   14c10:	|  |   move.b d0,d0
   14c12:	|  |   andi.w #255,d0
   14c16:	|  +-- bra.s 14c1c <getBoolean+0x94>

		default:
		break;
   14c18:	'--|-> nop
	}
	return TRUE;
   14c1a:	   |   moveq #1,d0
}
   14c1c:	   '-> rts

00014c1e <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   14c1e:	      ,----------> lea -76(sp),sp
   14c22:	      |            move.l a6,-(sp)
	switch (from->varType) {
   14c24:	      |            movea.l 84(sp),a0
   14c28:	      |            move.l (a0),d0
   14c2a:	      |            moveq #10,d1
   14c2c:	      |            cmp.l d0,d1
   14c2e:	,-----|----------- bcs.w 14ecc <getTextFromAnyVar+0x2ae>
   14c32:	|     |            add.l d0,d0
   14c34:	|     |            movea.l d0,a0
   14c36:	|     |            adda.l #85058,a0
   14c3c:	|     |            move.w (a0),d0
   14c3e:	|     |            jmp (14c42 <getTextFromAnyVar+0x24>,pc,d0.w)
   14c42:	|     |            .short 0x028a
   14c44:	|     |            bset d0,(a0)+
   14c46:	|     |            .short 0x028a
   14c48:	|     |            ori.b #-118,(a6)
   14c4c:	|     |            andi.b #8,ccr
   14c50:	|     |            andi.w #650,-(a0)
   14c54:	|     |            .short 0x028a
   14c56:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   14c5c:	|     |            move.l 4(a0),d0
   14c60:	|     |            move.l d0,-(sp)
   14c62:	|     |            jsr b8 <copyString>
   14c68:	|     |            addq.l #4,sp
   14c6a:	|  ,--|----------- bra.w 14eee <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   14c6e:	|  |  |            pea 19e85 <talk.c.490538ff+0x520>
   14c74:	|  |  |            jsr b8 <copyString>
   14c7a:	|  |  |            addq.l #4,sp
   14c7c:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14c80:	|  |  |            clr.l 72(sp)
   14c84:	|  |  |     ,----- bra.w 14d2e <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   14c88:	|  |  |  ,--|----> pea 19e8b <talk.c.490538ff+0x526>
   14c8e:	|  |  |  |  |      move.l 80(sp),-(sp)
   14c92:	|  |  |  |  |      jsr 13b74 <joinStrings>
   14c98:	|  |  |  |  |      addq.l #8,sp
   14c9a:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   14c9e:	|  |  |  |  |  ,-- bne.s 14ca6 <getTextFromAnyVar+0x88>
   14ca0:	|  |  |  |  |  |   moveq #0,d0
   14ca2:	|  +--|--|--|--|-- bra.w 14eee <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14ca6:	|  |  |  |  |  '-> move.l 76(sp),56(sp)
   14cac:	|  |  |  |  |      move.l 1c810 <SysBase>,d0
   14cb2:	|  |  |  |  |      movea.l d0,a6
   14cb4:	|  |  |  |  |      movea.l 56(sp),a1
   14cb8:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   14cbc:	|  |  |  |  |      movea.l 84(sp),a0
   14cc0:	|  |  |  |  |      movea.l 4(a0),a0
   14cc4:	|  |  |  |  |      move.l (a0),d1
   14cc6:	|  |  |  |  |      move.l 72(sp),d0
   14cca:	|  |  |  |  |      lsl.l #3,d0
   14ccc:	|  |  |  |  |      add.l d1,d0
   14cce:	|  |  |  |  |      move.l d0,-(sp)
   14cd0:	|  |  +--|--|----- jsr 14c1e <getTextFromAnyVar>(pc)
   14cd4:	|  |  |  |  |      addq.l #4,sp
   14cd6:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   14cda:	|  |  |  |  |      move.l 52(sp),-(sp)
   14cde:	|  |  |  |  |      move.l 64(sp),-(sp)
   14ce2:	|  |  |  |  |      jsr 13b74 <joinStrings>
   14ce8:	|  |  |  |  |      addq.l #8,sp
   14cea:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   14cee:	|  |  |  |  |  ,-- bne.s 14cf6 <getTextFromAnyVar+0xd8>
   14cf0:	|  |  |  |  |  |   moveq #0,d0
   14cf2:	|  +--|--|--|--|-- bra.w 14eee <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14cf6:	|  |  |  |  |  '-> move.l 52(sp),48(sp)
   14cfc:	|  |  |  |  |      move.l 1c810 <SysBase>,d0
   14d02:	|  |  |  |  |      movea.l d0,a6
   14d04:	|  |  |  |  |      movea.l 48(sp),a1
   14d08:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   14d0c:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   14d10:	|  |  |  |  |      move.l 60(sp),44(sp)
   14d16:	|  |  |  |  |      move.l 1c810 <SysBase>,d0
   14d1c:	|  |  |  |  |      movea.l d0,a6
   14d1e:	|  |  |  |  |      movea.l 44(sp),a1
   14d22:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   14d26:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14d2a:	|  |  |  |  |      addq.l #1,72(sp)
   14d2e:	|  |  |  |  '----> movea.l 84(sp),a0
   14d32:	|  |  |  |         movea.l 4(a0),a0
   14d36:	|  |  |  |         move.l 4(a0),d0
   14d3a:	|  |  |  |         cmp.l 72(sp),d0
   14d3e:	|  |  |  '-------- bgt.w 14c88 <getTextFromAnyVar+0x6a>
			}
			return builder;
   14d42:	|  |  |            move.l 76(sp),d0
   14d46:	|  +--|----------- bra.w 14eee <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   14d4a:	|  |  |            pea 19e8d <talk.c.490538ff+0x528>
   14d50:	|  |  |            jsr b8 <copyString>
   14d56:	|  |  |            addq.l #4,sp
   14d58:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   14d5c:	|  |  |            movea.l 84(sp),a0
   14d60:	|  |  |            movea.l 4(a0),a0
   14d64:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   14d68:	|  |  |     ,----- bra.w 14e0a <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   14d6c:	|  |  |  ,--|----> pea 19e8b <talk.c.490538ff+0x526>
   14d72:	|  |  |  |  |      move.l 72(sp),-(sp)
   14d76:	|  |  |  |  |      jsr 13b74 <joinStrings>
   14d7c:	|  |  |  |  |      addq.l #8,sp
   14d7e:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   14d82:	|  |  |  |  |  ,-- bne.s 14d8a <getTextFromAnyVar+0x16c>
   14d84:	|  |  |  |  |  |   moveq #0,d0
   14d86:	|  +--|--|--|--|-- bra.w 14eee <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14d8a:	|  |  |  |  |  '-> move.l 68(sp),32(sp)
   14d90:	|  |  |  |  |      move.l 1c810 <SysBase>,d0
   14d96:	|  |  |  |  |      movea.l d0,a6
   14d98:	|  |  |  |  |      movea.l 32(sp),a1
   14d9c:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   14da0:	|  |  |  |  |      move.l 64(sp),d0
   14da4:	|  |  |  |  |      move.l d0,-(sp)
   14da6:	|  |  '--|--|----- jsr 14c1e <getTextFromAnyVar>(pc)
   14daa:	|  |     |  |      addq.l #4,sp
   14dac:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   14db0:	|  |     |  |      move.l 28(sp),-(sp)
   14db4:	|  |     |  |      move.l 40(sp),-(sp)
   14db8:	|  |     |  |      jsr 13b74 <joinStrings>
   14dbe:	|  |     |  |      addq.l #8,sp
   14dc0:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   14dc4:	|  |     |  |  ,-- bne.s 14dcc <getTextFromAnyVar+0x1ae>
   14dc6:	|  |     |  |  |   moveq #0,d0
   14dc8:	|  +-----|--|--|-- bra.w 14eee <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14dcc:	|  |     |  |  '-> move.l 28(sp),24(sp)
   14dd2:	|  |     |  |      move.l 1c810 <SysBase>,d0
   14dd8:	|  |     |  |      movea.l d0,a6
   14dda:	|  |     |  |      movea.l 24(sp),a1
   14dde:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   14de2:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   14de6:	|  |     |  |      move.l 36(sp),20(sp)
   14dec:	|  |     |  |      move.l 1c810 <SysBase>,d0
   14df2:	|  |     |  |      movea.l d0,a6
   14df4:	|  |     |  |      movea.l 20(sp),a1
   14df8:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   14dfc:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   14e00:	|  |     |  |      movea.l 64(sp),a0
   14e04:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   14e0a:	|  |     |  '----> tst.l 64(sp)
   14e0e:	|  |     '-------- bne.w 14d6c <getTextFromAnyVar+0x14e>
			}
			return builder;
   14e12:	|  |               move.l 68(sp),d0
   14e16:	|  +-------------- bra.w 14eee <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   14e1a:	|  |               moveq #10,d0
   14e1c:	|  |               move.l d0,16(sp)
   14e20:	|  |               clr.l 12(sp)
   14e24:	|  |               move.l 1c810 <SysBase>,d0
   14e2a:	|  |               movea.l d0,a6
   14e2c:	|  |               move.l 16(sp),d0
   14e30:	|  |               move.l 12(sp),d1
   14e34:	|  |               jsr -684(a6)
   14e38:	|  |               move.l d0,8(sp)
   14e3c:	|  |               move.l 8(sp),d0
   14e40:	|  |               move.l d0,4(sp)
			if (! buff) {
   14e44:	|  |           ,-- bne.s 14e5a <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   14e46:	|  |           |   pea 19e94 <talk.c.490538ff+0x52f>
   14e4c:	|  |           |   jsr 1710c <KPrintF>
   14e52:	|  |           |   addq.l #4,sp
				return NULL;
   14e54:	|  |           |   moveq #0,d0
   14e56:	|  +-----------|-- bra.w 14eee <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   14e5a:	|  |           '-> movea.l 84(sp),a0
   14e5e:	|  |               move.l 4(a0),d0
   14e62:	|  |               move.l d0,-(sp)
   14e64:	|  |               pea 19ebe <talk.c.490538ff+0x559>
   14e6a:	|  |               move.l 12(sp),-(sp)
   14e6e:	|  |               jsr 13e52 <sprintf>
   14e74:	|  |               lea 12(sp),sp
			return buff;
   14e78:	|  |               move.l 4(sp),d0
   14e7c:	|  +-------------- bra.s 14eee <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   14e7e:	|  |               movea.l 84(sp),a0
   14e82:	|  |               move.l 4(a0),d0
   14e86:	|  |               move.l d0,-(sp)
   14e88:	|  |               jsr 4992 <resourceNameFromNum>
   14e8e:	|  |               addq.l #4,sp
   14e90:	|  |               move.l d0,-(sp)
   14e92:	|  |               pea 188fb <PutChar+0xd4d>
   14e98:	|  |               jsr 13b74 <joinStrings>
   14e9e:	|  |               addq.l #8,sp
   14ea0:	|  +-------------- bra.s 14eee <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   14ea2:	|  |               movea.l 84(sp),a0
   14ea6:	|  |               move.l 4(a0),d0
   14eaa:	|  |               move.l d0,-(sp)
   14eac:	|  |               jsr d3ae <findObjectType>
   14eb2:	|  |               addq.l #4,sp
   14eb4:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   14eb8:	+--|-------------- beq.s 14ecc <getTextFromAnyVar+0x2ae>
   14eba:	|  |               movea.l 40(sp),a0
   14ebe:	|  |               move.l (a0),d0
   14ec0:	|  |               move.l d0,-(sp)
   14ec2:	|  |               jsr b8 <copyString>
   14ec8:	|  |               addq.l #4,sp
   14eca:	|  +-------------- bra.s 14eee <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   14ecc:	'--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   14ece:	   |               movea.l 84(sp),a0
   14ed2:	   |               move.l (a0),d0
   14ed4:	   |               add.l d0,d0
   14ed6:	   |               movea.l d0,a1
   14ed8:	   |               adda.l d0,a1
   14eda:	   |               lea 1c6e0 <typeName>,a0
   14ee0:	   |               move.l (0,a1,a0.l),d0
   14ee4:	   |               move.l d0,-(sp)
   14ee6:	   |               jsr b8 <copyString>
   14eec:	   |               addq.l #4,sp
}
   14eee:	   '-------------> movea.l (sp)+,a6
   14ef0:	                   lea 76(sp),sp
   14ef4:	                   rts

00014ef6 <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   14ef6:	move.l 4(sp),-(sp)
   14efa:	jsr 14896 <unlinkVar>
   14f00:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   14f02:	movea.l 4(sp),a0
   14f06:	moveq #8,d0
   14f08:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   14f0a:	movea.l 4(sp),a0
   14f0e:	move.l 8(sp),4(a0)
}
   14f14:	nop
   14f16:	rts

00014f18 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   14f18:	move.l 4(sp),-(sp)
   14f1c:	jsr 14896 <unlinkVar>
   14f22:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   14f24:	movea.l 4(sp),a0
   14f28:	moveq #9,d0
   14f2a:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   14f2c:	movea.l 4(sp),a0
   14f30:	move.l 8(sp),4(a0)
}
   14f36:	nop
   14f38:	rts

00014f3a <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);	thisVar->varType = vT;
   14f3a:	move.l 4(sp),-(sp)
   14f3e:	jsr 14896 <unlinkVar>
   14f44:	addq.l #4,sp
   14f46:	movea.l 4(sp),a0
   14f4a:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;}
   14f4e:	movea.l 4(sp),a0
   14f52:	move.l 12(sp),4(a0)
   14f58:	nop
   14f5a:	rts

00014f5c <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   14f5c:	      ,-- bra.s 14f6e <stackGetByIndex+0x12>
        vS = vS->next;
   14f5e:	,-----|-> movea.l 4(sp),a0
   14f62:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   14f68:	|     +-- bne.s 14f6e <stackGetByIndex+0x12>
            return NULL;
   14f6a:	|     |   moveq #0,d0
   14f6c:	|  ,--|-- bra.s 14f82 <stackGetByIndex+0x26>
    while (theIndex--) {
   14f6e:	|  |  '-> move.l 8(sp),d0
   14f72:	|  |      move.l d0,d1
   14f74:	|  |      subq.l #1,d1
   14f76:	|  |      move.l d1,8(sp)
   14f7a:	|  |      tst.l d0
   14f7c:	'--|----- bne.s 14f5e <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   14f7e:	   |      move.l 4(sp),d0
}
   14f82:	   '----> rts

00014f84 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   14f84:	          tst.l 4(sp)
   14f88:	      ,-- bne.s 14f98 <stackFindLast+0x14>
		return NULL;
   14f8a:	      |   moveq #0,d0
   14f8c:	,-----|-- bra.s 14fa6 <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   14f8e:	|  ,--|-> movea.l 4(sp),a0
   14f92:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   14f98:	|  |  '-> movea.l 4(sp),a0
   14f9c:	|  |      move.l 8(a0),d0
   14fa0:	|  '----- bne.s 14f8e <stackFindLast+0xa>

	return hunt;
   14fa2:	|         move.l 4(sp),d0
}
   14fa6:	'-------> rts

00014fa8 <stackSize>:

int stackSize (const struct stackHandler * me) {
   14fa8:	       subq.l #8,sp
	int r = 0;
   14faa:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   14fae:	       movea.l 12(sp),a0
   14fb2:	       move.l (a0),(sp)
	while (a) {
   14fb4:	   ,-- bra.s 14fc0 <stackSize+0x18>
		r ++;
   14fb6:	,--|-> addq.l #1,4(sp)
		a = a -> next;
   14fba:	|  |   movea.l (sp),a0
   14fbc:	|  |   move.l 8(a0),(sp)
	while (a) {
   14fc0:	|  '-> tst.l (sp)
   14fc2:	'----- bne.s 14fb6 <stackSize+0xe>
	}
	return r;
   14fc4:	       move.l 4(sp),d0
}
   14fc8:	       addq.l #8,sp
   14fca:	       rts

00014fcc <trimStack>:

void trimStack (struct variableStack ** stack) {
   14fcc:	subq.l #8,sp
   14fce:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   14fd0:	movea.l 16(sp),a0
   14fd4:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   14fd8:	movea.l 16(sp),a0
   14fdc:	movea.l (a0),a0
   14fde:	move.l 8(a0),d0
   14fe2:	movea.l 16(sp),a0
   14fe6:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   14fe8:	move.l 8(sp),d0
   14fec:	move.l d0,-(sp)
   14fee:	jsr 14896 <unlinkVar>
   14ff4:	addq.l #4,sp
	FreeVec(killMe);
   14ff6:	move.l 8(sp),4(sp)
   14ffc:	move.l 1c810 <SysBase>,d0
   15002:	movea.l d0,a6
   15004:	movea.l 4(sp),a1
   15008:	jsr -690(a6)
   1500c:	nop
   1500e:	movea.l (sp)+,a6
   15010:	addq.l #8,sp
   15012:	rts

00015014 <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   15014:	       lea -52(sp),sp
   15018:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   1501a:	       pea 19ec1 <talk.c.490538ff+0x55c>
   15020:	       jsr 1710c <KPrintF>
   15026:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   15028:	       moveq #68,d0
   1502a:	       move.l d0,52(sp)
   1502e:	       clr.l 48(sp)
   15032:	       move.l 1c810 <SysBase>,d0
   15038:	       movea.l d0,a6
   1503a:	       move.l 52(sp),d0
   1503e:	       move.l 48(sp),d1
   15042:	       jsr -684(a6)
   15046:	       move.l d0,44(sp)
   1504a:	       move.l 44(sp),d0
   1504e:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   15052:	   ,-- bne.s 1505a <freeze+0x46>
   15054:	   |   clr.w d0
   15056:	,--|-- bra.w 151ec <freeze+0x1d8>

	CstFreeze();
   1505a:	|  '-> jsr 1bfc <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   15060:	|      move.l 1c8a8 <sceneWidth>,d0
   15066:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   1506a:	|      move.l 1c8ac <sceneHeight>,d0
   15070:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   15074:	|      move.l 1c8a8 <sceneWidth>,d0
   1507a:	|      movea.l 40(sp),a0
   1507e:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   15082:	|      move.l 1c8ac <sceneHeight>,d0
   15088:	|      movea.l 40(sp),a0
   1508c:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   15090:	|      move.l 1c8c6 <cameraX>,d0
   15096:	|      movea.l 40(sp),a0
   1509a:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   1509e:	|      move.l 1c8ca <cameraY>,d0
   150a4:	|      movea.l 40(sp),a0
   150a8:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   150ac:	|      move.l 1c1a2 <cameraZoom>,d0
   150b2:	|      movea.l 40(sp),a0
   150b6:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   150ba:	|      move.w #1,1c8b4 <backdropExists>

	newFreezer -> allPeople = allPeople;
   150c2:	|      move.l 1c870 <allPeople>,d0
   150c8:	|      movea.l 40(sp),a0
   150cc:	|      move.l d0,(a0)
	allPeople = NULL;
   150ce:	|      clr.l 1c870 <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   150d4:	|      moveq #42,d0
   150d6:	|      move.l d0,28(sp)
   150da:	|      clr.l 24(sp)
   150de:	|      move.l 1c810 <SysBase>,d0
   150e4:	|      movea.l d0,a6
   150e6:	|      move.l 28(sp),d0
   150ea:	|      move.l 24(sp),d1
   150ee:	|      jsr -684(a6)
   150f2:	|      move.l d0,20(sp)
   150f6:	|      move.l 20(sp),d0
   150fa:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   150fe:	|  ,-- bne.s 15106 <freeze+0xf2>
   15100:	|  |   clr.w d0
   15102:	+--|-- bra.w 151ec <freeze+0x1d8>

	newFreezer -> allScreenRegions = allScreenRegions;
   15106:	|  '-> move.l 1c91c <allScreenRegions>,d0
   1510c:	|      movea.l 40(sp),a0
   15110:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   15114:	|      clr.l 1c91c <allScreenRegions>
	overRegion = NULL;
   1511a:	|      clr.l 1c920 <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   15120:	|      move.l 1c70a <mouseCursorAnim>,d0
   15126:	|      movea.l 40(sp),a0
   1512a:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   1512e:	|      move.l 1c70e <mouseCursorFrameNum>,d0
   15134:	|      movea.l 40(sp),a0
   15138:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   1513c:	|      jsr ab84 <makeNullAnim>
   15142:	|      move.l d0,1c70a <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   15148:	|      clr.l 1c70e <mouseCursorFrameNum>

	newFreezer -> zBuffer = zBuffer;
   1514e:	|      move.l 1c86c <zBuffer>,d0
   15154:	|      movea.l 40(sp),a0
   15158:	|      move.l d0,60(a0)
	zBuffer = NULL;
   1515c:	|      clr.l 1c86c <zBuffer>

	newFreezer -> speech = speech;
   15162:	|      move.l 1c760 <speech>,d0
   15168:	|      movea.l 40(sp),a0
   1516c:	|      move.l d0,20(a0)
	initSpeech ();
   15170:	|      jsr 3e88 <initSpeech>

	newFreezer -> currentEvents = currentEvents;
   15176:	|      move.l 1c180 <currentEvents>,d0
   1517c:	|      movea.l 40(sp),a0
   15180:	|      move.l d0,28(a0)
	currentEvents = (struct eventHandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   15184:	|      moveq #28,d0
   15186:	|      move.l d0,12(sp)
   1518a:	|      clr.l 8(sp)
   1518e:	|      move.l 1c810 <SysBase>,d0
   15194:	|      movea.l d0,a6
   15196:	|      move.l 12(sp),d0
   1519a:	|      move.l 8(sp),d1
   1519e:	|      jsr -684(a6)
   151a2:	|      move.l d0,4(sp)
   151a6:	|      move.l 4(sp),d0
   151aa:	|      move.l d0,1c180 <currentEvents>
	if (!currentEvents) return FALSE;
   151b0:	|      move.l 1c180 <currentEvents>,d0
   151b6:	|  ,-- bne.s 151bc <freeze+0x1a8>
   151b8:	|  |   clr.w d0
   151ba:	+--|-- bra.s 151ec <freeze+0x1d8>
	memset ( currentEvents, 0, sizeof(struct eventHandlers));
   151bc:	|  '-> move.l 1c180 <currentEvents>,d0
   151c2:	|      pea 1c <_start+0x1c>
   151c6:	|      clr.l -(sp)
   151c8:	|      move.l d0,-(sp)
   151ca:	|      jsr 17090 <memset>
   151d0:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   151d4:	|      move.l 1c900 <frozenStuff>,d0
   151da:	|      movea.l 40(sp),a0
   151de:	|      move.l d0,64(a0)
	frozenStuff = newFreezer;
   151e2:	|      move.l 40(sp),1c900 <frozenStuff>

	return TRUE;
   151ea:	|      moveq #1,d0
}
   151ec:	'----> movea.l (sp)+,a6
   151ee:	       lea 52(sp),sp
   151f2:	       rts

000151f4 <howFrozen>:

int howFrozen () {
   151f4:	       subq.l #8,sp
	int a = 0;
   151f6:	       clr.l 4(sp)
	struct frozenStuffStruct * f = frozenStuff;
   151fa:	       move.l 1c900 <frozenStuff>,(sp)
	while (f) {
   15200:	   ,-- bra.s 1520c <howFrozen+0x18>
		a ++;
   15202:	,--|-> addq.l #1,4(sp)
		f = f -> next;
   15206:	|  |   movea.l (sp),a0
   15208:	|  |   move.l 64(a0),(sp)
	while (f) {
   1520c:	|  '-> tst.l (sp)
   1520e:	'----- bne.s 15202 <howFrozen+0xe>
	}
	return a;
   15210:	       move.l 4(sp),d0
}
   15214:	       addq.l #8,sp
   15216:	       rts

00015218 <unfreeze>:

void unfreeze () {
   15218:	       lea -16(sp),sp
   1521c:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   1521e:	       move.l 1c900 <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   15226:	       move.l 1c900 <frozenStuff>,d0
   1522c:	,----- beq.w 15464 <unfreeze+0x24c>

	CstUnfreeze();
   15230:	|      jsr 3aea <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   15236:	|      movea.l 1c900 <frozenStuff>,a0
   1523c:	|      move.l 48(a0),d0
   15240:	|      move.l d0,1c8a8 <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   15246:	|      movea.l 1c900 <frozenStuff>,a0
   1524c:	|      move.l 52(a0),d0
   15250:	|      move.l d0,1c8ac <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   15256:	|      movea.l 1c900 <frozenStuff>,a0
   1525c:	|      move.l 40(a0),d0
   15260:	|      move.l d0,1c8c6 <cameraX>
	cameraY = frozenStuff -> cameraY;
   15266:	|      movea.l 1c900 <frozenStuff>,a0
   1526c:	|      move.l 44(a0),d0
   15270:	|      move.l d0,1c8ca <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   15276:	|      move.l 1c7cc <input+0xa>,d0
   1527c:	|      move.l d0,-(sp)
   1527e:	|      jsr 1753e <__floatsisf>
   15284:	|      addq.l #4,sp
   15286:	|      move.l d0,d1
   15288:	|      move.l 1c1a2 <cameraZoom>,d0
   1528e:	|      move.l d0,-(sp)
   15290:	|      move.l d1,-(sp)
   15292:	|      jsr 175f0 <__mulsf3>
   15298:	|      addq.l #8,sp
   1529a:	|      move.l d0,-(sp)
   1529c:	|      jsr 174d6 <__fixsfsi>
   152a2:	|      addq.l #4,sp
   152a4:	|      move.l d0,1c7cc <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   152aa:	|      move.l 1c7d0 <input+0xe>,d0
   152b0:	|      move.l d0,-(sp)
   152b2:	|      jsr 1753e <__floatsisf>
   152b8:	|      addq.l #4,sp
   152ba:	|      move.l d0,d1
   152bc:	|      move.l 1c1a2 <cameraZoom>,d0
   152c2:	|      move.l d0,-(sp)
   152c4:	|      move.l d1,-(sp)
   152c6:	|      jsr 175f0 <__mulsf3>
   152cc:	|      addq.l #8,sp
   152ce:	|      move.l d0,-(sp)
   152d0:	|      jsr 174d6 <__fixsfsi>
   152d6:	|      addq.l #4,sp
   152d8:	|      move.l d0,1c7d0 <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   152de:	|      movea.l 1c900 <frozenStuff>,a0
   152e4:	|      move.l 56(a0),d0
   152e8:	|      move.l d0,1c1a2 <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   152ee:	|      move.l 1c7cc <input+0xa>,d0
   152f4:	|      move.l d0,-(sp)
   152f6:	|      jsr 1753e <__floatsisf>
   152fc:	|      addq.l #4,sp
   152fe:	|      move.l d0,d1
   15300:	|      move.l 1c1a2 <cameraZoom>,d0
   15306:	|      move.l d0,-(sp)
   15308:	|      move.l d1,-(sp)
   1530a:	|      jsr 173f4 <__divsf3>
   15310:	|      addq.l #8,sp
   15312:	|      move.l d0,-(sp)
   15314:	|      jsr 174d6 <__fixsfsi>
   1531a:	|      addq.l #4,sp
   1531c:	|      move.l d0,1c7cc <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   15322:	|      move.l 1c7d0 <input+0xe>,d0
   15328:	|      move.l d0,-(sp)
   1532a:	|      jsr 1753e <__floatsisf>
   15330:	|      addq.l #4,sp
   15332:	|      move.l d0,d1
   15334:	|      move.l 1c1a2 <cameraZoom>,d0
   1533a:	|      move.l d0,-(sp)
   1533c:	|      move.l d1,-(sp)
   1533e:	|      jsr 173f4 <__divsf3>
   15344:	|      addq.l #8,sp
   15346:	|      move.l d0,-(sp)
   15348:	|      jsr 174d6 <__fixsfsi>
   1534e:	|      addq.l #4,sp
   15350:	|      move.l d0,1c7d0 <input+0xe>

	killAllPeople ();
   15356:	|      jsr a88c <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   1535c:	|      movea.l 1c900 <frozenStuff>,a0
   15362:	|      move.l (a0),d0
   15364:	|      move.l d0,1c870 <allPeople>

	killAllRegions ();
   1536a:	|      jsr 15938 <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   15370:	|      movea.l 1c900 <frozenStuff>,a0
   15376:	|      move.l 4(a0),d0
   1537a:	|      move.l d0,1c91c <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   15380:	|      move.l 1c70a <mouseCursorAnim>,d0
   15386:	|      move.l d0,-(sp)
   15388:	|      jsr 9780 <deleteAnim>
   1538e:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   15390:	|      movea.l 1c900 <frozenStuff>,a0
   15396:	|      move.l 32(a0),d0
   1539a:	|      move.l d0,1c70a <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   153a0:	|      movea.l 1c900 <frozenStuff>,a0
   153a6:	|      move.l 36(a0),d0
   153aa:	|      move.l d0,1c70e <mouseCursorFrameNum>

	killZBuffer ();
   153b0:	|      jsr 8526 <killZBuffer>
	zBuffer = frozenStuff->zBuffer;
   153b6:	|      movea.l 1c900 <frozenStuff>,a0
   153bc:	|      move.l 60(a0),d0
   153c0:	|      move.l d0,1c86c <zBuffer>

	if (currentEvents) FreeVec(currentEvents);
   153c6:	|      move.l 1c180 <currentEvents>,d0
   153cc:	|  ,-- beq.s 153e6 <unfreeze+0x1ce>
   153ce:	|  |   move.l 1c180 <currentEvents>,12(sp)
   153d6:	|  |   move.l 1c810 <SysBase>,d0
   153dc:	|  |   movea.l d0,a6
   153de:	|  |   movea.l 12(sp),a1
   153e2:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   153e6:	|  '-> movea.l 1c900 <frozenStuff>,a0
   153ec:	|      move.l 28(a0),d0
   153f0:	|      move.l d0,1c180 <currentEvents>

	killAllSpeech ();
   153f6:	|      jsr 3f20 <killAllSpeech>
	if (speech) FreeVec(speech);
   153fc:	|      move.l 1c760 <speech>,d0
   15402:	|  ,-- beq.s 1541c <unfreeze+0x204>
   15404:	|  |   move.l 1c760 <speech>,8(sp)
   1540c:	|  |   move.l 1c810 <SysBase>,d0
   15412:	|  |   movea.l d0,a6
   15414:	|  |   movea.l 8(sp),a1
   15418:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   1541c:	|  '-> movea.l 1c900 <frozenStuff>,a0
   15422:	|      move.l 20(a0),d0
   15426:	|      move.l d0,1c760 <speech>

	frozenStuff = frozenStuff -> next;
   1542c:	|      movea.l 1c900 <frozenStuff>,a0
   15432:	|      move.l 64(a0),d0
   15436:	|      move.l d0,1c900 <frozenStuff>

	overRegion = NULL;
   1543c:	|      clr.l 1c920 <overRegion>
	if (killMe) FreeVec(killMe);
   15442:	|      tst.l 16(sp)
   15446:	|  ,-- beq.s 1545e <unfreeze+0x246>
   15448:	|  |   move.l 16(sp),4(sp)
   1544e:	|  |   move.l 1c810 <SysBase>,d0
   15454:	|  |   movea.l d0,a6
   15456:	|  |   movea.l 4(sp),a1
   1545a:	|  |   jsr -690(a6)
	killMe = NULL;
   1545e:	|  '-> clr.l 16(sp)
   15462:	|  ,-- bra.s 15466 <unfreeze+0x24e>
	if (! frozenStuff) return;
   15464:	'--|-> nop
}
   15466:	   '-> movea.l (sp)+,a6
   15468:	       lea 16(sp),sp
   1546c:	       rts

0001546e <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   1546e:	pea 19ed3 <talk.c.490538ff+0x56e>
   15474:	jsr 1710c <KPrintF>
   1547a:	addq.l #4,sp
	return FALSE;
   1547c:	clr.w d0
}
   1547e:	rts

00015480 <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   15480:	          lea -32(sp),sp
   15484:	          move.l a6,-(sp)
   15486:	          move.l d2,-(sp)
	unsigned int a = 0;
   15488:	          clr.l 36(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   1548c:	          move.l 1c90c <fontOrderString>,d0
   15492:	      ,-- beq.s 154ac <loadFont+0x2c>
   15494:	      |   move.l 1c90c <fontOrderString>,24(sp)
   1549c:	      |   move.l 1c810 <SysBase>,d0
   154a2:	      |   movea.l d0,a6
   154a4:	      |   movea.l 24(sp),a1
   154a8:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   154ac:	      '-> move.l 48(sp),-(sp)
   154b0:	          jsr b8 <copyString>
   154b6:	          addq.l #4,sp
   154b8:	          move.l d0,1c90c <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);	
   154be:	          move.l 1c918 <theFont>,d0
   154c4:	      ,-- beq.s 154d6 <loadFont+0x56>
   154c6:	      |   move.l 1c918 <theFont>,d0
   154cc:	      |   move.l d0,-(sp)
   154ce:	      |   jsr 8864 <forgetSpriteBank>
   154d4:	      |   addq.l #4,sp
	theFont = NULL;
   154d6:	      '-> clr.l 1c918 <theFont>

	loadedFontNum = filenum;
   154dc:	          move.l 44(sp),1c908 <loadedFontNum>

	fontTableSize = 0;
   154e4:	          clr.l 1c914 <fontTableSize>
	char *tmp = charOrder;
   154ea:	          move.l 48(sp),32(sp)
	while (*tmp) {        
   154f0:	   ,----- bra.s 1552c <loadFont+0xac>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   154f2:	,--|----> movea.l 32(sp),a0
   154f6:	|  |      move.b (a0),d0
   154f8:	|  |      ext.w d0
   154fa:	|  |      movea.w d0,a0
   154fc:	|  |      move.l 1c914 <fontTableSize>,d0
   15502:	|  |      move.l d0,d0
   15504:	|  |      move.b d0,d0
   15506:	|  |      andi.l #255,d0
   1550c:	|  |      cmp.l a0,d0
   1550e:	|  |  ,-- bge.s 15520 <loadFont+0xa0>
   15510:	|  |  |   movea.l 32(sp),a0
   15514:	|  |  |   move.b (a0),d0
   15516:	|  |  |   ext.w d0
   15518:	|  |  |   movea.w d0,a0
   1551a:	|  |  |   move.l a0,1c914 <fontTableSize>
		*tmp++;
   15520:	|  |  '-> move.l 32(sp),d0
   15524:	|  |      move.l d0,d1
   15526:	|  |      addq.l #1,d1
   15528:	|  |      move.l d1,32(sp)
	while (*tmp) {        
   1552c:	|  '----> movea.l 32(sp),a0
   15530:	|         move.b (a0),d0
   15532:	'-------- bne.s 154f2 <loadFont+0x72>
	}
	fontTableSize++;
   15534:	          move.l 1c914 <fontTableSize>,d0
   1553a:	          addq.l #1,d0
   1553c:	          move.l d0,1c914 <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   15542:	          move.l 1c910 <fontTable>,d0
   15548:	      ,-- beq.s 15562 <loadFont+0xe2>
   1554a:	      |   move.l 1c910 <fontTable>,20(sp)
   15552:	      |   move.l 1c810 <SysBase>,d0
   15558:	      |   movea.l d0,a6
   1555a:	      |   movea.l 20(sp),a1
   1555e:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   15562:	      '-> move.l 1c914 <fontTableSize>,d0
   15568:	          add.l d0,d0
   1556a:	          add.l d0,d0
   1556c:	          move.l d0,16(sp)
   15570:	          clr.l 12(sp)
   15574:	          move.l 1c810 <SysBase>,d0
   1557a:	          movea.l d0,a6
   1557c:	          move.l 16(sp),d0
   15580:	          move.l 12(sp),d1
   15584:	          jsr -684(a6)
   15588:	          move.l d0,8(sp)
   1558c:	          move.l 8(sp),d0
   15590:	          move.l d0,1c910 <fontTable>
	if (!fontTable) return FALSE;
   15596:	          move.l 1c910 <fontTable>,d0
   1559c:	      ,-- bne.s 155a4 <loadFont+0x124>
   1559e:	      |   clr.w d0
   155a0:	,-----|-- bra.w 1564a <loadFont+0x1ca>

	for (a = 0;  a < fontTableSize; a++) {
   155a4:	|     '-> clr.l 36(sp)
   155a8:	|     ,-- bra.s 155c2 <loadFont+0x142>
		fontTable[a] = 0;
   155aa:	|  ,--|-> move.l 1c910 <fontTable>,d1
   155b0:	|  |  |   move.l 36(sp),d0
   155b4:	|  |  |   add.l d0,d0
   155b6:	|  |  |   add.l d0,d0
   155b8:	|  |  |   movea.l d1,a0
   155ba:	|  |  |   adda.l d0,a0
   155bc:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   155be:	|  |  |   addq.l #1,36(sp)
   155c2:	|  |  '-> move.l 1c914 <fontTableSize>,d0
   155c8:	|  |      cmp.l 36(sp),d0
   155cc:	|  '----- bhi.s 155aa <loadFont+0x12a>
	}
	a = 0;
   155ce:	|         clr.l 36(sp)
	int i = 0;
   155d2:	|         clr.l 28(sp)
	tmp = charOrder;
   155d6:	|         move.l 48(sp),32(sp)
	while (*tmp) {
   155dc:	|     ,-- bra.s 1560c <loadFont+0x18c>
		fontTable[*tmp++] = i;
   155de:	|  ,--|-> move.l 1c910 <fontTable>,d1
   155e4:	|  |  |   move.l 32(sp),d0
   155e8:	|  |  |   move.l d0,d2
   155ea:	|  |  |   addq.l #1,d2
   155ec:	|  |  |   move.l d2,32(sp)
   155f0:	|  |  |   movea.l d0,a0
   155f2:	|  |  |   move.b (a0),d0
   155f4:	|  |  |   ext.w d0
   155f6:	|  |  |   movea.w d0,a0
   155f8:	|  |  |   move.l a0,d0
   155fa:	|  |  |   add.l a0,d0
   155fc:	|  |  |   add.l d0,d0
   155fe:	|  |  |   movea.l d1,a0
   15600:	|  |  |   adda.l d0,a0
   15602:	|  |  |   move.l 28(sp),d0
   15606:	|  |  |   move.l d0,(a0)
		i++;
   15608:	|  |  |   addq.l #1,28(sp)
	while (*tmp) {
   1560c:	|  |  '-> movea.l 32(sp),a0
   15610:	|  |      move.b (a0),d0
   15612:	|  '----- bne.s 155de <loadFont+0x15e>
	}
	
	theFont = loadBankForAnim(filenum);
   15614:	|         move.l 44(sp),-(sp)
   15618:	|         jsr 15e4a <loadBankForAnim>
   1561e:	|         addq.l #4,sp
   15620:	|         move.l d0,1c918 <theFont>
	if (!theFont) {
   15626:	|         move.l 1c918 <theFont>,d0
   1562c:	|     ,-- bne.s 15640 <loadFont+0x1c0>
		KPrintF("loadFont: Can't load font");
   1562e:	|     |   pea 19efa <talk.c.490538ff+0x595>
   15634:	|     |   jsr 1710c <KPrintF>
   1563a:	|     |   addq.l #4,sp
		return FALSE;
   1563c:	|     |   clr.w d0
   1563e:	+-----|-- bra.s 1564a <loadFont+0x1ca>
	}
	fontHeight = h;
   15640:	|     '-> move.l 52(sp),1c904 <fontHeight>
	return TRUE;
   15648:	|         moveq #1,d0
}
   1564a:	'-------> move.l (sp)+,d2
   1564c:	          movea.l (sp)+,a6
   1564e:	          lea 32(sp),sp
   15652:	          rts

00015654 <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   15654:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   15658:	                clr.l 4(sp)

    if (!fontTableSize) return;
   1565c:	                move.l 1c914 <fontTableSize>,d0
   15662:	,-------------- beq.w 1572a <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   15666:	|               move.w 1c708 <fontSpace>,d0
   1566c:	|               asr.w #1,d0
   1566e:	|               ext.l d0
   15670:	|               add.l d0,20(sp)
	char *tmp = theText;
   15674:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   1567a:	|     ,-------- bra.w 1571e <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   1567e:	|  ,--|-------> movea.l 1c918 <theFont>,a0
   15684:	|  |  |         movea.l 16(a0),a0
   15688:	|  |  |         movea.l 8(sp),a1
   1568c:	|  |  |         move.b (a1),d0
   1568e:	|  |  |         move.b d0,d0
   15690:	|  |  |         andi.l #255,d0
   15696:	|  |  |         move.l 1c914 <fontTableSize>,d1
   1569c:	|  |  |         cmp.l d0,d1
   1569e:	|  |  |  ,----- bls.s 156ca <pasteStringToBackdrop+0x76>
   156a0:	|  |  |  |      move.l 1c910 <fontTable>,d1
   156a6:	|  |  |  |      movea.l 8(sp),a1
   156aa:	|  |  |  |      move.b (a1),d0
   156ac:	|  |  |  |      move.b d0,d0
   156ae:	|  |  |  |      andi.l #255,d0
   156b4:	|  |  |  |      add.l d0,d0
   156b6:	|  |  |  |      add.l d0,d0
   156b8:	|  |  |  |      movea.l d1,a1
   156ba:	|  |  |  |      adda.l d0,a1
   156bc:	|  |  |  |      move.l (a1),d1
   156be:	|  |  |  |      move.l d1,d0
   156c0:	|  |  |  |      lsl.l #3,d0
   156c2:	|  |  |  |      sub.l d1,d0
   156c4:	|  |  |  |      add.l d0,d0
   156c6:	|  |  |  |      add.l d0,d0
   156c8:	|  |  |  |  ,-- bra.s 156cc <pasteStringToBackdrop+0x78>
   156ca:	|  |  |  '--|-> moveq #0,d0
   156cc:	|  |  |     '-> adda.l d0,a0
   156ce:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   156d0:	|  |  |         move.l 24(sp),d1
   156d4:	|  |  |         movea.l (sp),a0
   156d6:	|  |  |         move.l 12(a0),d0
   156da:	|  |  |         move.l d0,d0
   156dc:	|  |  |         sub.w d0,d1
   156de:	|  |  |         move.w d1,d0
   156e0:	|  |  |         movea.w d0,a1
   156e2:	|  |  |         move.l 20(sp),d1
   156e6:	|  |  |         movea.l (sp),a0
   156e8:	|  |  |         move.l 8(a0),d0
   156ec:	|  |  |         move.l d0,d0
   156ee:	|  |  |         sub.w d0,d1
   156f0:	|  |  |         move.w d1,d0
   156f2:	|  |  |         movea.w d0,a0
   156f4:	|  |  |         move.l a1,-(sp)
   156f6:	|  |  |         move.l a0,-(sp)
   156f8:	|  |  |         move.l 8(sp),-(sp)
   156fc:	|  |  |         jsr 229e <CstPasteChar>
   15702:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   15706:	|  |  |         movea.l (sp),a0
   15708:	|  |  |         move.l (a0),d1
   1570a:	|  |  |         move.w 1c708 <fontSpace>,d0
   15710:	|  |  |         movea.w d0,a0
   15712:	|  |  |         move.l d1,d0
   15714:	|  |  |         add.l a0,d0
   15716:	|  |  |         add.l d0,20(sp)
		tmp++;
   1571a:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   1571e:	|  |  '-------> movea.l 8(sp),a0
   15722:	|  |            move.b (a0),d0
   15724:	|  '----------- bne.w 1567e <pasteStringToBackdrop+0x2a>
   15728:	|           ,-- bra.s 1572c <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   1572a:	'-----------|-> nop
    }
}
   1572c:	            '-> lea 12(sp),sp
   15730:	                rts

00015732 <stringWidth>:


int stringWidth (char * theText) {
   15732:	                lea -16(sp),sp
	int a = 0;
   15736:	                clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   1573a:	                clr.l 12(sp)

	if (! fontTableSize) return 0;
   1573e:	                move.l 1c914 <fontTableSize>,d0
   15744:	            ,-- bne.s 1574a <stringWidth+0x18>
   15746:	            |   moveq #0,d0
   15748:	,-----------|-- bra.s 157be <stringWidth+0x8c>

	char *tmp = theText;
   1574a:	|           '-> move.l 20(sp),8(sp)
	
	while (*tmp) {
   15750:	|     ,-------- bra.s 157b2 <stringWidth+0x80>
        c = *tmp++;
   15752:	|  ,--|-------> move.l 8(sp),d0
   15756:	|  |  |         move.l d0,d1
   15758:	|  |  |         addq.l #1,d1
   1575a:	|  |  |         move.l d1,8(sp)
   1575e:	|  |  |         movea.l d0,a0
   15760:	|  |  |         move.b (a0),d0
   15762:	|  |  |         ext.w d0
   15764:	|  |  |         movea.w d0,a0
   15766:	|  |  |         move.l a0,(sp)
		xOff += theFont->bank.sprites[fontInTable(c)].width + fontSpace;
   15768:	|  |  |         movea.l 1c918 <theFont>,a0
   1576e:	|  |  |         movea.l 16(a0),a1
   15772:	|  |  |         move.l 1c914 <fontTableSize>,d0
   15778:	|  |  |         cmp.l (sp),d0
   1577a:	|  |  |  ,----- bls.s 1579a <stringWidth+0x68>
   1577c:	|  |  |  |      move.l 1c910 <fontTable>,d1
   15782:	|  |  |  |      move.l (sp),d0
   15784:	|  |  |  |      add.l d0,d0
   15786:	|  |  |  |      add.l d0,d0
   15788:	|  |  |  |      movea.l d1,a0
   1578a:	|  |  |  |      adda.l d0,a0
   1578c:	|  |  |  |      move.l (a0),d1
   1578e:	|  |  |  |      move.l d1,d0
   15790:	|  |  |  |      lsl.l #3,d0
   15792:	|  |  |  |      sub.l d1,d0
   15794:	|  |  |  |      add.l d0,d0
   15796:	|  |  |  |      add.l d0,d0
   15798:	|  |  |  |  ,-- bra.s 1579c <stringWidth+0x6a>
   1579a:	|  |  |  '--|-> moveq #0,d0
   1579c:	|  |  |     '-> lea (0,a1,d0.l),a0
   157a0:	|  |  |         move.l (a0),d1
   157a2:	|  |  |         move.w 1c708 <fontSpace>,d0
   157a8:	|  |  |         movea.w d0,a0
   157aa:	|  |  |         move.l d1,d0
   157ac:	|  |  |         add.l a0,d0
   157ae:	|  |  |         add.l d0,12(sp)
	while (*tmp) {
   157b2:	|  |  '-------> movea.l 8(sp),a0
   157b6:	|  |            move.b (a0),d0
   157b8:	|  '----------- bne.s 15752 <stringWidth+0x20>
	
	}//Todo: Amigize this
	
	return xOff;
   157ba:	|               move.l 12(sp),d0
}
   157be:	'-------------> lea 16(sp),sp
   157c2:	                rts

000157c4 <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   157c4:	       lea -16(sp),sp
   157c8:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   157ca:	       moveq #36,d0
   157cc:	       move.l d0,16(sp)
   157d0:	       clr.l 12(sp)
   157d4:	       move.l 1c810 <SysBase>,d0
   157da:	       movea.l d0,a6
   157dc:	       move.l 16(sp),d0
   157e0:	       move.l 12(sp),d1
   157e4:	       jsr -684(a6)
   157e8:	       move.l d0,8(sp)
   157ec:	       move.l 8(sp),d0
   157f0:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   157f4:	   ,-- bne.s 157fc <addScreenRegion+0x38>
   157f6:	   |   clr.w d0
   157f8:	,--|-- bra.w 1587c <addScreenRegion+0xb8>
    newRegion->di = di;
   157fc:	|  '-> movea.l 4(sp),a0
   15800:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   15806:	|      movea.l 4(sp),a0
   1580a:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   1580e:	|      movea.l 4(sp),a0
   15812:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   15818:	|      movea.l 4(sp),a0
   1581c:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   15822:	|      movea.l 4(sp),a0
   15826:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   1582c:	|      movea.l 4(sp),a0
   15830:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   15836:	|      movea.l 4(sp),a0
   1583a:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   15840:	|      move.l 52(sp),-(sp)
   15844:	|      jsr d49e <loadObjectType>
   1584a:	|      addq.l #4,sp
   1584c:	|      movea.l 4(sp),a0
   15850:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   15854:	|      move.l 1c91c <allScreenRegions>,d0
   1585a:	|      movea.l 4(sp),a0
   1585e:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   15862:	|      move.l 4(sp),1c91c <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   1586a:	|      movea.l 4(sp),a0
   1586e:	|      move.l 28(a0),d0
   15872:	|      sne d0
   15874:	|      neg.b d0
   15876:	|      move.b d0,d0
   15878:	|      andi.w #255,d0
}
   1587c:	'----> movea.l (sp)+,a6
   1587e:	       lea 16(sp),sp
   15882:	       rts

00015884 <getOverRegion>:

void getOverRegion () {
   15884:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15886:	             move.l 1c91c <allScreenRegions>,(sp)
	while (thisRegion) {
   1588c:	   ,-------- bra.s 158fa <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   1588e:	,--|-------> move.l 1c7cc <input+0xa>,d0
   15894:	|  |         movea.l (sp),a0
   15896:	|  |         movea.l (a0),a0
   15898:	|  |         move.l 1c8c6 <cameraX>,d1
   1589e:	|  |         suba.l d1,a0
   158a0:	|  |         cmpa.l d0,a0
   158a2:	|  |  ,----- bgt.s 158f4 <getOverRegion+0x70>
   158a4:	|  |  |      move.l 1c7d0 <input+0xe>,d0
   158aa:	|  |  |      movea.l (sp),a0
   158ac:	|  |  |      movea.l 4(a0),a0
   158b0:	|  |  |      move.l 1c8ca <cameraY>,d1
   158b6:	|  |  |      suba.l d1,a0
   158b8:	|  |  |      cmpa.l d0,a0
   158ba:	|  |  +----- bgt.s 158f4 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   158bc:	|  |  |      move.l 1c7cc <input+0xa>,d0
   158c2:	|  |  |      movea.l (sp),a0
   158c4:	|  |  |      movea.l 8(a0),a0
   158c8:	|  |  |      move.l 1c8c6 <cameraX>,d1
   158ce:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   158d0:	|  |  |      cmpa.l d0,a0
   158d2:	|  |  +----- blt.s 158f4 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   158d4:	|  |  |      move.l 1c7d0 <input+0xe>,d0
   158da:	|  |  |      movea.l (sp),a0
   158dc:	|  |  |      movea.l 12(a0),a0
   158e0:	|  |  |      move.l 1c8ca <cameraY>,d1
   158e6:	|  |  |      suba.l d1,a0
   158e8:	|  |  |      cmpa.l d0,a0
   158ea:	|  |  +----- blt.s 158f4 <getOverRegion+0x70>
			overRegion = thisRegion;
   158ec:	|  |  |      move.l (sp),1c920 <overRegion>
			return;
   158f2:	|  |  |  ,-- bra.s 15906 <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   158f4:	|  |  '--|-> movea.l (sp),a0
   158f6:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   158fa:	|  '-----|-> tst.l (sp)
   158fc:	'--------|-- bne.s 1588e <getOverRegion+0xa>
	}
	overRegion = NULL;
   158fe:	         |   clr.l 1c920 <overRegion>
	return;
   15904:	         |   nop
}
   15906:	         '-> addq.l #4,sp
   15908:	             rts

0001590a <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   1590a:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   1590c:	             move.l 1c91c <allScreenRegions>,(sp)

	while (thisRegion) {
   15912:	   ,-------- bra.s 1592e <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   15914:	,--|-------> movea.l (sp),a0
   15916:	|  |         movea.l 28(a0),a0
   1591a:	|  |         move.l 4(a0),d0
   1591e:	|  |         cmp.l 8(sp),d0
   15922:	|  |     ,-- bne.s 15928 <getRegionForObject+0x1e>
			return thisRegion;
   15924:	|  |     |   move.l (sp),d0
   15926:	|  |  ,--|-- bra.s 15934 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   15928:	|  |  |  '-> movea.l (sp),a0
   1592a:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   1592e:	|  '--|----> tst.l (sp)
   15930:	'-----|----- bne.s 15914 <getRegionForObject+0xa>
	}

	return NULL;
   15932:	      |      moveq #0,d0
}
   15934:	      '----> addq.l #4,sp
   15936:	             rts

00015938 <killAllRegions>:

void killAllRegions () {
   15938:	       subq.l #8,sp
   1593a:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   1593c:	   ,-- bra.s 1597e <killAllRegions+0x46>
		killRegion = allScreenRegions;
   1593e:	,--|-> move.l 1c91c <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   15946:	|  |   movea.l 1c91c <allScreenRegions>,a0
   1594c:	|  |   move.l 32(a0),d0
   15950:	|  |   move.l d0,1c91c <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   15956:	|  |   movea.l 8(sp),a0
   1595a:	|  |   move.l 28(a0),d0
   1595e:	|  |   move.l d0,-(sp)
   15960:	|  |   jsr d756 <removeObjectType>
   15966:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   15968:	|  |   move.l 8(sp),4(sp)
   1596e:	|  |   move.l 1c810 <SysBase>,d0
   15974:	|  |   movea.l d0,a6
   15976:	|  |   movea.l 4(sp),a1
   1597a:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   1597e:	|  '-> move.l 1c91c <allScreenRegions>,d0
   15984:	'----- bne.s 1593e <killAllRegions+0x6>
	}
	overRegion = NULL;
   15986:	       clr.l 1c920 <overRegion>
}
   1598c:	       nop
   1598e:	       movea.l (sp)+,a6
   15990:	       addq.l #8,sp
   15992:	       rts

00015994 <loadRegions>:

void loadRegions (BPTR fp) {
   15994:	       lea -24(sp),sp
   15998:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   1599a:	       move.l 32(sp),-(sp)
   1599e:	       jsr 6bc <get2bytes>
   159a4:	       addq.l #4,sp
   159a6:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   159aa:	       move.l #117020,20(sp)

	while (numRegions --) {
   159b2:	   ,-- bra.w 15a90 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   159b6:	,--|-> moveq #36,d0
   159b8:	|  |   move.l d0,16(sp)
   159bc:	|  |   clr.l 12(sp)
   159c0:	|  |   move.l 1c810 <SysBase>,d0
   159c6:	|  |   movea.l d0,a6
   159c8:	|  |   move.l 16(sp),d0
   159cc:	|  |   move.l 12(sp),d1
   159d0:	|  |   jsr -684(a6)
   159d4:	|  |   move.l d0,8(sp)
   159d8:	|  |   move.l 8(sp),d0
   159dc:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   159e0:	|  |   movea.l 20(sp),a0
   159e4:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   159e8:	|  |   moveq #32,d1
   159ea:	|  |   add.l 4(sp),d1
   159ee:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   159f2:	|  |   move.l 32(sp),-(sp)
   159f6:	|  |   jsr 6bc <get2bytes>
   159fc:	|  |   addq.l #4,sp
   159fe:	|  |   movea.l 4(sp),a0
   15a02:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   15a04:	|  |   move.l 32(sp),-(sp)
   15a08:	|  |   jsr 6bc <get2bytes>
   15a0e:	|  |   addq.l #4,sp
   15a10:	|  |   movea.l 4(sp),a0
   15a14:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   15a18:	|  |   move.l 32(sp),-(sp)
   15a1c:	|  |   jsr 6bc <get2bytes>
   15a22:	|  |   addq.l #4,sp
   15a24:	|  |   movea.l 4(sp),a0
   15a28:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   15a2c:	|  |   move.l 32(sp),-(sp)
   15a30:	|  |   jsr 6bc <get2bytes>
   15a36:	|  |   addq.l #4,sp
   15a38:	|  |   movea.l 4(sp),a0
   15a3c:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   15a40:	|  |   move.l 32(sp),-(sp)
   15a44:	|  |   jsr 6bc <get2bytes>
   15a4a:	|  |   addq.l #4,sp
   15a4c:	|  |   movea.l 4(sp),a0
   15a50:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   15a54:	|  |   move.l 32(sp),-(sp)
   15a58:	|  |   jsr 6bc <get2bytes>
   15a5e:	|  |   addq.l #4,sp
   15a60:	|  |   movea.l 4(sp),a0
   15a64:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   15a68:	|  |   move.l 32(sp),-(sp)
   15a6c:	|  |   jsr 6bc <get2bytes>
   15a72:	|  |   addq.l #4,sp
   15a74:	|  |   movea.l 4(sp),a0
   15a78:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   15a7c:	|  |   move.l 32(sp),-(sp)
   15a80:	|  |   jsr d44c <loadObjectRef>
   15a86:	|  |   addq.l #4,sp
   15a88:	|  |   movea.l 4(sp),a0
   15a8c:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   15a90:	|  '-> move.l 24(sp),d0
   15a94:	|      move.l d0,d1
   15a96:	|      subq.l #1,d1
   15a98:	|      move.l d1,24(sp)
   15a9c:	|      tst.l d0
   15a9e:	'----- bne.w 159b6 <loadRegions+0x22>
	}
	* pointy = NULL;
   15aa2:	       movea.l 20(sp),a0
   15aa6:	       clr.l (a0)
}
   15aa8:	       nop
   15aaa:	       movea.l (sp)+,a6
   15aac:	       lea 24(sp),sp
   15ab0:	       rts

00015ab2 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   15ab2:	             lea -12(sp),sp
   15ab6:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   15ab8:	             move.l #117020,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   15ac0:	   ,-------- bra.s 15b3a <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   15ac2:	,--|-------> movea.l 12(sp),a0
   15ac6:	|  |         movea.l (a0),a0
   15ac8:	|  |         movea.l 28(a0),a0
   15acc:	|  |         move.l 4(a0),d0
   15ad0:	|  |         cmp.l 20(sp),d0
   15ad4:	|  |  ,----- bne.s 15b2c <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   15ad6:	|  |  |      movea.l 12(sp),a0
   15ada:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   15ade:	|  |  |      movea.l 8(sp),a0
   15ae2:	|  |  |      move.l 32(a0),d0
   15ae6:	|  |  |      movea.l 12(sp),a0
   15aea:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   15aec:	|  |  |      movea.l 8(sp),a0
   15af0:	|  |  |      move.l 28(a0),d0
   15af4:	|  |  |      move.l d0,-(sp)
   15af6:	|  |  |      jsr d756 <removeObjectType>
   15afc:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   15afe:	|  |  |      move.l 1c920 <overRegion>,d0
   15b04:	|  |  |      cmp.l 8(sp),d0
   15b08:	|  |  |  ,-- bne.s 15b10 <removeScreenRegion+0x5e>
   15b0a:	|  |  |  |   clr.l 1c920 <overRegion>
            FreeVec(killMe);
   15b10:	|  |  |  '-> move.l 8(sp),4(sp)
   15b16:	|  |  |      move.l 1c810 <SysBase>,d0
   15b1c:	|  |  |      movea.l d0,a6
   15b1e:	|  |  |      movea.l 4(sp),a1
   15b22:	|  |  |      jsr -690(a6)
            killMe = NULL;
   15b26:	|  |  |      clr.l 8(sp)
   15b2a:	|  +--|----- bra.s 15b3a <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   15b2c:	|  |  '----> movea.l 12(sp),a0
   15b30:	|  |         move.l (a0),d0
   15b32:	|  |         moveq #32,d1
   15b34:	|  |         add.l d0,d1
   15b36:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   15b3a:	|  '-------> movea.l 12(sp),a0
   15b3e:	|            move.l (a0),d0
   15b40:	'----------- bne.s 15ac2 <removeScreenRegion+0x10>
        }
    }
}
   15b42:	             nop
   15b44:	             nop
   15b46:	             movea.l (sp)+,a6
   15b48:	             lea 12(sp),sp
   15b4c:	             rts

00015b4e <saveRegions>:

void saveRegions (BPTR fp) {
   15b4e:	       subq.l #8,sp
	int numRegions = 0;
   15b50:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   15b54:	       move.l 1c91c <allScreenRegions>,(sp)
	while (thisRegion) {
   15b5a:	   ,-- bra.s 15b66 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   15b5c:	,--|-> movea.l (sp),a0
   15b5e:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   15b62:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   15b66:	|  '-> tst.l (sp)
   15b68:	'----- bne.s 15b5c <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   15b6a:	       move.l 12(sp),-(sp)
   15b6e:	       move.l 8(sp),-(sp)
   15b72:	       jsr 8d0 <put2bytes>
   15b78:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   15b7a:	       move.l 1c91c <allScreenRegions>,(sp)
	while (thisRegion) {
   15b80:	,----- bra.w 15c28 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   15b84:	|  ,-> movea.l (sp),a0
   15b86:	|  |   move.l (a0),d0
   15b88:	|  |   move.l 12(sp),-(sp)
   15b8c:	|  |   move.l d0,-(sp)
   15b8e:	|  |   jsr 8d0 <put2bytes>
   15b94:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   15b96:	|  |   movea.l (sp),a0
   15b98:	|  |   move.l 4(a0),d0
   15b9c:	|  |   move.l 12(sp),-(sp)
   15ba0:	|  |   move.l d0,-(sp)
   15ba2:	|  |   jsr 8d0 <put2bytes>
   15ba8:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   15baa:	|  |   movea.l (sp),a0
   15bac:	|  |   move.l 8(a0),d0
   15bb0:	|  |   move.l 12(sp),-(sp)
   15bb4:	|  |   move.l d0,-(sp)
   15bb6:	|  |   jsr 8d0 <put2bytes>
   15bbc:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   15bbe:	|  |   movea.l (sp),a0
   15bc0:	|  |   move.l 12(a0),d0
   15bc4:	|  |   move.l 12(sp),-(sp)
   15bc8:	|  |   move.l d0,-(sp)
   15bca:	|  |   jsr 8d0 <put2bytes>
   15bd0:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   15bd2:	|  |   movea.l (sp),a0
   15bd4:	|  |   move.l 16(a0),d0
   15bd8:	|  |   move.l 12(sp),-(sp)
   15bdc:	|  |   move.l d0,-(sp)
   15bde:	|  |   jsr 8d0 <put2bytes>
   15be4:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   15be6:	|  |   movea.l (sp),a0
   15be8:	|  |   move.l 20(a0),d0
   15bec:	|  |   move.l 12(sp),-(sp)
   15bf0:	|  |   move.l d0,-(sp)
   15bf2:	|  |   jsr 8d0 <put2bytes>
   15bf8:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   15bfa:	|  |   movea.l (sp),a0
   15bfc:	|  |   move.l 24(a0),d0
   15c00:	|  |   move.l 12(sp),-(sp)
   15c04:	|  |   move.l d0,-(sp)
   15c06:	|  |   jsr 8d0 <put2bytes>
   15c0c:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   15c0e:	|  |   movea.l (sp),a0
   15c10:	|  |   move.l 28(a0),d0
   15c14:	|  |   move.l 12(sp),-(sp)
   15c18:	|  |   move.l d0,-(sp)
   15c1a:	|  |   jsr d7f6 <saveObjectRef>
   15c20:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   15c22:	|  |   movea.l (sp),a0
   15c24:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   15c28:	'--|-> tst.l (sp)
   15c2a:	   '-- bne.w 15b84 <saveRegions+0x36>
	}
}
   15c2e:	       nop
   15c30:	       nop
   15c32:	       addq.l #8,sp
   15c34:	       rts

00015c36 <showBoxes>:

void showBoxes () {
   15c36:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   15c38:	       move.l 1c91c <allScreenRegions>,(sp)

	while (huntRegion) {
   15c3e:	,----- bra.w 15cda <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   15c42:	|  ,-> movea.l (sp),a0
   15c44:	|  |   move.l 12(a0),d0
   15c48:	|  |   movea.l d0,a1
   15c4a:	|  |   movea.l (sp),a0
   15c4c:	|  |   move.l 4(a0),d0
   15c50:	|  |   move.l d0,d1
   15c52:	|  |   movea.l (sp),a0
   15c54:	|  |   move.l (a0),d0
   15c56:	|  |   move.l a1,-(sp)
   15c58:	|  |   move.l d1,-(sp)
   15c5a:	|  |   move.l d0,-(sp)
   15c5c:	|  |   jsr d0da <drawVerticalLine>
   15c62:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   15c66:	|  |   movea.l (sp),a0
   15c68:	|  |   move.l 12(a0),d0
   15c6c:	|  |   movea.l d0,a1
   15c6e:	|  |   movea.l (sp),a0
   15c70:	|  |   move.l 4(a0),d0
   15c74:	|  |   move.l d0,d1
   15c76:	|  |   movea.l (sp),a0
   15c78:	|  |   move.l 8(a0),d0
   15c7c:	|  |   move.l a1,-(sp)
   15c7e:	|  |   move.l d1,-(sp)
   15c80:	|  |   move.l d0,-(sp)
   15c82:	|  |   jsr d0da <drawVerticalLine>
   15c88:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   15c8c:	|  |   movea.l (sp),a0
   15c8e:	|  |   move.l 8(a0),d0
   15c92:	|  |   movea.l d0,a1
   15c94:	|  |   movea.l (sp),a0
   15c96:	|  |   move.l 4(a0),d0
   15c9a:	|  |   move.l d0,d1
   15c9c:	|  |   movea.l (sp),a0
   15c9e:	|  |   move.l (a0),d0
   15ca0:	|  |   move.l a1,-(sp)
   15ca2:	|  |   move.l d1,-(sp)
   15ca4:	|  |   move.l d0,-(sp)
   15ca6:	|  |   jsr d0b4 <drawHorizontalLine>
   15cac:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   15cb0:	|  |   movea.l (sp),a0
   15cb2:	|  |   move.l 8(a0),d0
   15cb6:	|  |   movea.l d0,a1
   15cb8:	|  |   movea.l (sp),a0
   15cba:	|  |   move.l 12(a0),d0
   15cbe:	|  |   move.l d0,d1
   15cc0:	|  |   movea.l (sp),a0
   15cc2:	|  |   move.l (a0),d0
   15cc4:	|  |   move.l a1,-(sp)
   15cc6:	|  |   move.l d1,-(sp)
   15cc8:	|  |   move.l d0,-(sp)
   15cca:	|  |   jsr d0b4 <drawHorizontalLine>
   15cd0:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   15cd4:	|  |   movea.l (sp),a0
   15cd6:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   15cda:	'--|-> tst.l (sp)
   15cdc:	   '-- bne.w 15c42 <showBoxes+0xc>
	}
   15ce0:	       nop
   15ce2:	       nop
   15ce4:	       addq.l #4,sp
   15ce6:	       rts

00015ce8 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   15ce8:	       lea -88(sp),sp
   15cec:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   15cee:	       move.l 1c810 <SysBase>,d0
   15cf4:	       movea.l d0,a6
   15cf6:	       jsr -666(a6)
   15cfa:	       move.l d0,88(sp)
   15cfe:	       move.l 88(sp),d0
   15d02:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   15d06:	       move.l 84(sp),80(sp)
   15d0c:	       moveq #40,d0
   15d0e:	       move.l d0,76(sp)
   15d12:	       move.l 1c810 <SysBase>,d0
   15d18:	       movea.l d0,a6
   15d1a:	       movea.l 80(sp),a0
   15d1e:	       move.l 76(sp),d0
   15d22:	       jsr -654(a6)
   15d26:	       move.l d0,72(sp)
   15d2a:	       move.l 72(sp),d0
   15d2e:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   15d32:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   15d38:	       move.l #106260,60(sp)
   15d40:	       clr.l 56(sp)
   15d44:	       move.l 64(sp),52(sp)
   15d4a:	       clr.l 48(sp)
   15d4e:	       move.l 1c810 <SysBase>,d0
   15d54:	       movea.l d0,a6
   15d56:	       movea.l 60(sp),a0
   15d5a:	       move.l 56(sp),d0
   15d5e:	       movea.l 52(sp),a1
   15d62:	       move.l 48(sp),d1
   15d66:	       jsr -444(a6)
   15d6a:	       move.b d0,47(sp)
   15d6e:	       move.b 47(sp),d0
   15d72:	   ,-- beq.s 15d88 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   15d74:	   |   pea 19f21 <talk.c.490538ff+0x5bc>
   15d7a:	   |   jsr 1710c <KPrintF>
   15d80:	   |   addq.l #4,sp
        return 0;
   15d82:	   |   moveq #0,d0
   15d84:	,--|-- bra.w 15e42 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   15d88:	|  '-> movea.l 64(sp),a0
   15d8c:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   15d92:	|      lea 92(sp),a0
   15d96:	|      lea -86(a0),a0
   15d9a:	|      move.l a0,38(sp)
   15d9e:	|      movea.l 42(sp),a6
   15da2:	|      movea.l 38(sp),a0
   15da6:	|      jsr -60(a6)
   15daa:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   15dae:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   15db4:	|      move.l #1103515245,-(sp)
   15dba:	|      move.l 34(sp),-(sp)
   15dbe:	|      jsr 17a98 <__mulsi3>
   15dc4:	|      addq.l #8,sp
   15dc6:	|      addi.l #12345,d0
   15dcc:	|      move.l d0,d1
   15dce:	|      bclr #31,d1
   15dd2:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   15dd6:	|      move.l 30(sp),d0
   15dda:	|      pea 64 <_start+0x64>
   15dde:	|      move.l d0,-(sp)
   15de0:	|      jsr 17b72 <__umodsi3>
   15de6:	|      addq.l #8,sp
   15de8:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   15dec:	|      move.l 26(sp),-(sp)
   15df0:	|      pea 19f3e <talk.c.490538ff+0x5d9>
   15df6:	|      jsr 1710c <KPrintF>
   15dfc:	|      addq.l #8,sp

    CloseDevice(ioreq);
   15dfe:	|      move.l 64(sp),22(sp)
   15e04:	|      move.l 1c810 <SysBase>,d0
   15e0a:	|      movea.l d0,a6
   15e0c:	|      movea.l 22(sp),a1
   15e10:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   15e14:	|      move.l 64(sp),18(sp)
   15e1a:	|      move.l 1c810 <SysBase>,d0
   15e20:	|      movea.l d0,a6
   15e22:	|      movea.l 18(sp),a0
   15e26:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   15e2a:	|      move.l 84(sp),14(sp)
   15e30:	|      move.l 1c810 <SysBase>,d0
   15e36:	|      movea.l d0,a6
   15e38:	|      movea.l 14(sp),a0
   15e3c:	|      jsr -672(a6)
    return 0;
   15e40:	|      moveq #0,d0
   15e42:	'----> movea.l (sp)+,a6
   15e44:	       lea 88(sp),sp
   15e48:	       rts

00015e4a <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   15e4a:	             lea -20(sp),sp
   15e4e:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   15e50:	             move.l 1c924 <allLoadedBanks>,20(sp)
	while (returnMe) {
   15e58:	      ,----- bra.s 15e8a <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   15e5a:	   ,--|----> movea.l 20(sp),a0
   15e5e:	   |  |      move.l (a0),d0
   15e60:	   |  |      cmp.l 28(sp),d0
   15e64:	   |  |  ,-- bne.s 15e80 <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   15e66:	   |  |  |   movea.l 20(sp),a0
   15e6a:	   |  |  |   move.l 4(a0),d0
   15e6e:	   |  |  |   addq.l #1,d0
   15e70:	   |  |  |   movea.l 20(sp),a0
   15e74:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   15e78:	   |  |  |   move.l 20(sp),d0
   15e7c:	,--|--|--|-- bra.w 15f1e <loadBankForAnim+0xd4>
		}		
		returnMe = returnMe->next;
   15e80:	|  |  |  '-> movea.l 20(sp),a0
   15e84:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   15e8a:	|  |  '----> tst.l 20(sp)
   15e8e:	|  '-------- bne.s 15e5a <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   15e90:	|            moveq #26,d0
   15e92:	|            move.l d0,16(sp)
   15e96:	|            clr.l 12(sp)
   15e9a:	|            move.l 1c810 <SysBase>,d0
   15ea0:	|            movea.l d0,a6
   15ea2:	|            move.l 16(sp),d0
   15ea6:	|            move.l 12(sp),d1
   15eaa:	|            jsr -684(a6)
   15eae:	|            move.l d0,8(sp)
   15eb2:	|            move.l 8(sp),d0
   15eb6:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   15eba:	|     ,----- beq.s 15f1c <loadBankForAnim+0xd2>
		returnMe->ID = ID;
   15ebc:	|     |      movea.l 20(sp),a0
   15ec0:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, (struct spriteBank *) &returnMe->bank)) {
   15ec4:	|     |      move.l 20(sp),d0
   15ec8:	|     |      addq.l #8,d0
   15eca:	|     |      move.l d0,-(sp)
   15ecc:	|     |      move.l 32(sp),-(sp)
   15ed0:	|     |      jsr 8970 <loadSpriteBank>
   15ed6:	|     |      addq.l #8,sp
   15ed8:	|     |      tst.w d0
   15eda:	|     |  ,-- beq.s 15f02 <loadBankForAnim+0xb8>
			returnMe->timesUsed = 1;
   15edc:	|     |  |   movea.l 20(sp),a0
   15ee0:	|     |  |   moveq #1,d0
   15ee2:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   15ee6:	|     |  |   move.l 1c924 <allLoadedBanks>,d0
   15eec:	|     |  |   movea.l 20(sp),a0
   15ef0:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   15ef4:	|     |  |   move.l 20(sp),1c924 <allLoadedBanks>
			//KPrintF("loadBankForAnim: New sprite bank created OK\n");
			return returnMe;
   15efc:	|     |  |   move.l 20(sp),d0
   15f00:	+-----|--|-- bra.s 15f1e <loadBankForAnim+0xd4>
		} else {
			//KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
			FreeVec(returnMe);
   15f02:	|     |  '-> move.l 20(sp),4(sp)
   15f08:	|     |      move.l 1c810 <SysBase>,d0
   15f0e:	|     |      movea.l d0,a6
   15f10:	|     |      movea.l 4(sp),a1
   15f14:	|     |      jsr -690(a6)
			return NULL;
   15f18:	|     |      moveq #0,d0
   15f1a:	+-----|----- bra.s 15f1e <loadBankForAnim+0xd4>
		}
	} else return NULL;
   15f1c:	|     '----> moveq #0,d0
}
   15f1e:	'----------> movea.l (sp)+,a6
   15f20:	             lea 20(sp),sp
   15f24:	             rts

00015f26 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   15f26:	       lea -60(sp),sp
   15f2a:	       move.l d3,-(sp)
   15f2c:	       move.l d2,-(sp)
 	DOUBLE xDiff = x2 - x1;
   15f2e:	       move.l 88(sp),d0
   15f32:	       sub.l 80(sp),d0
   15f36:	       move.l d0,-(sp)
   15f38:	       jsr 174fe <__floatsidf>
   15f3e:	       addq.l #4,sp
   15f40:	       move.l d0,32(sp)
   15f44:	       move.l d1,36(sp)
   15f48:	       move.l 32(sp),60(sp)
   15f4e:	       move.l 36(sp),64(sp)
	int yDiff = y2 - y1;
   15f54:	       move.l 92(sp),d0
   15f58:	       sub.l 84(sp),d0
   15f5c:	       move.l d0,56(sp)

	DOUBLE m = xDiff * (xP - x1) + yDiff * (yP - y1);
   15f60:	       move.l 96(sp),d0
   15f64:	       sub.l 80(sp),d0
   15f68:	       move.l d0,-(sp)
   15f6a:	       jsr 174fe <__floatsidf>
   15f70:	       addq.l #4,sp
   15f72:	       move.l 64(sp),-(sp)
   15f76:	       move.l 64(sp),-(sp)
   15f7a:	       move.l d1,-(sp)
   15f7c:	       move.l d0,-(sp)
   15f7e:	       jsr 1758e <__muldf3>
   15f84:	       lea 16(sp),sp
   15f88:	       move.l d0,d2
   15f8a:	       move.l d1,d3
   15f8c:	       move.l 100(sp),d0
   15f90:	       sub.l 84(sp),d0
   15f94:	       move.l 56(sp),-(sp)
   15f98:	       move.l d0,-(sp)
   15f9a:	       jsr 17a98 <__mulsi3>
   15fa0:	       addq.l #8,sp
   15fa2:	       move.l d0,-(sp)
   15fa4:	       jsr 174fe <__floatsidf>
   15faa:	       addq.l #4,sp
   15fac:	       move.l d1,-(sp)
   15fae:	       move.l d0,-(sp)
   15fb0:	       move.l d3,-(sp)
   15fb2:	       move.l d2,-(sp)
   15fb4:	       jsr 17330 <__adddf3>
   15fba:	       lea 16(sp),sp
   15fbe:	       move.l d0,24(sp)
   15fc2:	       move.l d1,28(sp)
   15fc6:	       move.l 24(sp),48(sp)
   15fcc:	       move.l 28(sp),52(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   15fd2:	       move.l 64(sp),-(sp)
   15fd6:	       move.l 64(sp),-(sp)
   15fda:	       move.l 72(sp),-(sp)
   15fde:	       move.l 72(sp),-(sp)
   15fe2:	       jsr 1758e <__muldf3>
   15fe8:	       lea 16(sp),sp
   15fec:	       move.l d0,d2
   15fee:	       move.l d1,d3
   15ff0:	       move.l 56(sp),-(sp)
   15ff4:	       move.l 60(sp),-(sp)
   15ff8:	       jsr 17a98 <__mulsi3>
   15ffe:	       addq.l #8,sp
   16000:	       move.l d0,-(sp)
   16002:	       jsr 174fe <__floatsidf>
   16008:	       addq.l #4,sp
   1600a:	       move.l d1,-(sp)
   1600c:	       move.l d0,-(sp)
   1600e:	       move.l d3,-(sp)
   16010:	       move.l d2,-(sp)
   16012:	       jsr 17330 <__adddf3>
   16018:	       lea 16(sp),sp
   1601c:	       move.l d1,-(sp)
   1601e:	       move.l d0,-(sp)
   16020:	       move.l 60(sp),-(sp)
   16024:	       move.l 60(sp),-(sp)
   16028:	       jsr 17392 <__divdf3>
   1602e:	       lea 16(sp),sp
   16032:	       move.l d0,16(sp)
   16036:	       move.l d1,20(sp)
   1603a:	       move.l 16(sp),48(sp)
   16040:	       move.l 20(sp),52(sp)

	if (m < 0) {		
   16046:	       clr.l -(sp)
   16048:	       clr.l -(sp)
   1604a:	       move.l 60(sp),-(sp)
   1604e:	       move.l 60(sp),-(sp)
   16052:	       jsr 17716 <__ltdf2>
   16058:	       lea 16(sp),sp
   1605c:	       tst.l d0
   1605e:	   ,-- bge.s 16074 <closestPointOnLine+0x14e>
		*closestX = x1;
   16060:	   |   movea.l 72(sp),a0
   16064:	   |   move.l 80(sp),(a0)
		*closestY = y1;
   16068:	   |   movea.l 76(sp),a0
   1606c:	   |   move.l 84(sp),(a0)
   16070:	,--|-- bra.w 16142 <closestPointOnLine+0x21c>
	} else if (m > 1) {
   16074:	|  '-> clr.l -(sp)
   16076:	|      move.l #1072693248,-(sp)
   1607c:	|      move.l 60(sp),-(sp)
   16080:	|      move.l 60(sp),-(sp)
   16084:	|      jsr 1765c <__gtdf2>
   1608a:	|      lea 16(sp),sp
   1608e:	|      tst.l d0
   16090:	|  ,-- ble.s 160a6 <closestPointOnLine+0x180>
		*closestX = x2;
   16092:	|  |   movea.l 72(sp),a0
   16096:	|  |   move.l 88(sp),(a0)
		*closestY = y2;
   1609a:	|  |   movea.l 76(sp),a0
   1609e:	|  |   move.l 92(sp),(a0)
   160a2:	+--|-- bra.w 16142 <closestPointOnLine+0x21c>
	} else {
		DOUBLE tmp = m * xDiff; 
   160a6:	|  '-> move.l 64(sp),-(sp)
   160aa:	|      move.l 64(sp),-(sp)
   160ae:	|      move.l 60(sp),-(sp)
   160b2:	|      move.l 60(sp),-(sp)
   160b6:	|      jsr 1758e <__muldf3>
   160bc:	|      lea 16(sp),sp
   160c0:	|      move.l d0,8(sp)
   160c4:	|      move.l d1,12(sp)
   160c8:	|      move.l 8(sp),40(sp)
   160ce:	|      move.l 12(sp),44(sp)
		*closestX = (int) tmp;
   160d4:	|      move.l 44(sp),-(sp)
   160d8:	|      move.l 44(sp),-(sp)
   160dc:	|      jsr 174a0 <__fixdfsi>
   160e2:	|      addq.l #8,sp
   160e4:	|      movea.l 72(sp),a0
   160e8:	|      move.l d0,(a0)
		*closestX += x1;
   160ea:	|      movea.l 72(sp),a0
   160ee:	|      move.l (a0),d0
   160f0:	|      add.l 80(sp),d0
   160f4:	|      movea.l 72(sp),a0
   160f8:	|      move.l d0,(a0)
		*closestY = m * yDiff;
   160fa:	|      move.l 56(sp),-(sp)
   160fe:	|      jsr 174fe <__floatsidf>
   16104:	|      addq.l #4,sp
   16106:	|      move.l 52(sp),-(sp)
   1610a:	|      move.l 52(sp),-(sp)
   1610e:	|      move.l d1,-(sp)
   16110:	|      move.l d0,-(sp)
   16112:	|      jsr 1758e <__muldf3>
   16118:	|      lea 16(sp),sp
   1611c:	|      move.l d1,-(sp)
   1611e:	|      move.l d0,-(sp)
   16120:	|      jsr 174a0 <__fixdfsi>
   16126:	|      addq.l #8,sp
   16128:	|      movea.l 76(sp),a0
   1612c:	|      move.l d0,(a0)
		*closestY += y1;
   1612e:	|      movea.l 76(sp),a0
   16132:	|      move.l (a0),d0
   16134:	|      add.l 84(sp),d0
   16138:	|      movea.l 76(sp),a0
   1613c:	|      move.l d0,(a0)
		return TRUE;
   1613e:	|      moveq #1,d0
   16140:	|  ,-- bra.s 16144 <closestPointOnLine+0x21e>
	}
	return FALSE;
   16142:	'--|-> clr.w d0
}
   16144:	   '-> move.l (sp)+,d2
   16146:	       move.l (sp)+,d3
   16148:	       lea 60(sp),sp
   1614c:	       rts

0001614e <drawFloor>:

void drawFloor() {
   1614e:	                lea -12(sp),sp
   16152:	                move.l d3,-(sp)
   16154:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   16156:	                clr.l 16(sp)
   1615a:	   ,----------- bra.w 1636e <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   1615e:	,--|----------> movea.l 1c928 <currentFloor>,a0
   16164:	|  |            move.l 12(a0),d1
   16168:	|  |            move.l 16(sp),d0
   1616c:	|  |            lsl.l #3,d0
   1616e:	|  |            movea.l d1,a0
   16170:	|  |            adda.l d0,a0
   16172:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   16176:	|  |            moveq #1,d0
   16178:	|  |            cmp.l 8(sp),d0
   1617c:	|  |  ,-------- bge.w 1636a <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   16180:	|  |  |         moveq #1,d0
   16182:	|  |  |         move.l d0,12(sp)
   16186:	|  |  |     ,-- bra.w 16280 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   1618a:	|  |  |  ,--|-> movea.l 1c928 <currentFloor>,a0
   16190:	|  |  |  |  |   move.l 4(a0),d1
   16194:	|  |  |  |  |   movea.l 1c928 <currentFloor>,a0
   1619a:	|  |  |  |  |   movea.l 12(a0),a0
   1619e:	|  |  |  |  |   move.l 16(sp),d0
   161a2:	|  |  |  |  |   lsl.l #3,d0
   161a4:	|  |  |  |  |   adda.l d0,a0
   161a6:	|  |  |  |  |   movea.l 4(a0),a0
   161aa:	|  |  |  |  |   move.l 12(sp),d0
   161ae:	|  |  |  |  |   add.l d0,d0
   161b0:	|  |  |  |  |   add.l d0,d0
   161b2:	|  |  |  |  |   adda.l d0,a0
   161b4:	|  |  |  |  |   move.l (a0),d0
   161b6:	|  |  |  |  |   lsl.l #3,d0
   161b8:	|  |  |  |  |   movea.l d1,a0
   161ba:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   161bc:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   161c0:	|  |  |  |  |   movea.l 1c928 <currentFloor>,a0
   161c6:	|  |  |  |  |   move.l 4(a0),d1
   161ca:	|  |  |  |  |   movea.l 1c928 <currentFloor>,a0
   161d0:	|  |  |  |  |   movea.l 12(a0),a0
   161d4:	|  |  |  |  |   move.l 16(sp),d0
   161d8:	|  |  |  |  |   lsl.l #3,d0
   161da:	|  |  |  |  |   adda.l d0,a0
   161dc:	|  |  |  |  |   movea.l 4(a0),a0
   161e0:	|  |  |  |  |   move.l 12(sp),d0
   161e4:	|  |  |  |  |   add.l d0,d0
   161e6:	|  |  |  |  |   add.l d0,d0
   161e8:	|  |  |  |  |   adda.l d0,a0
   161ea:	|  |  |  |  |   move.l (a0),d0
   161ec:	|  |  |  |  |   lsl.l #3,d0
   161ee:	|  |  |  |  |   movea.l d1,a0
   161f0:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   161f2:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   161f4:	|  |  |  |  |   movea.l 1c928 <currentFloor>,a0
   161fa:	|  |  |  |  |   move.l 4(a0),d1
   161fe:	|  |  |  |  |   movea.l 1c928 <currentFloor>,a0
   16204:	|  |  |  |  |   movea.l 12(a0),a0
   16208:	|  |  |  |  |   move.l 16(sp),d0
   1620c:	|  |  |  |  |   lsl.l #3,d0
   1620e:	|  |  |  |  |   adda.l d0,a0
   16210:	|  |  |  |  |   movea.l 4(a0),a0
   16214:	|  |  |  |  |   move.l 12(sp),d0
   16218:	|  |  |  |  |   addi.l #1073741823,d0
   1621e:	|  |  |  |  |   add.l d0,d0
   16220:	|  |  |  |  |   add.l d0,d0
   16222:	|  |  |  |  |   adda.l d0,a0
   16224:	|  |  |  |  |   move.l (a0),d0
   16226:	|  |  |  |  |   lsl.l #3,d0
   16228:	|  |  |  |  |   movea.l d1,a0
   1622a:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   1622c:	|  |  |  |  |   move.l 4(a0),d1
   16230:	|  |  |  |  |   movea.l 1c928 <currentFloor>,a0
   16236:	|  |  |  |  |   move.l 4(a0),d3
   1623a:	|  |  |  |  |   movea.l 1c928 <currentFloor>,a0
   16240:	|  |  |  |  |   movea.l 12(a0),a0
   16244:	|  |  |  |  |   move.l 16(sp),d0
   16248:	|  |  |  |  |   lsl.l #3,d0
   1624a:	|  |  |  |  |   adda.l d0,a0
   1624c:	|  |  |  |  |   movea.l 4(a0),a0
   16250:	|  |  |  |  |   move.l 12(sp),d0
   16254:	|  |  |  |  |   addi.l #1073741823,d0
   1625a:	|  |  |  |  |   add.l d0,d0
   1625c:	|  |  |  |  |   add.l d0,d0
   1625e:	|  |  |  |  |   adda.l d0,a0
   16260:	|  |  |  |  |   move.l (a0),d0
   16262:	|  |  |  |  |   lsl.l #3,d0
   16264:	|  |  |  |  |   movea.l d3,a0
   16266:	|  |  |  |  |   adda.l d0,a0
   16268:	|  |  |  |  |   move.l (a0),d0
   1626a:	|  |  |  |  |   move.l d2,-(sp)
   1626c:	|  |  |  |  |   move.l a1,-(sp)
   1626e:	|  |  |  |  |   move.l d1,-(sp)
   16270:	|  |  |  |  |   move.l d0,-(sp)
   16272:	|  |  |  |  |   jsr 46fc <drawLine>
   16278:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   1627c:	|  |  |  |  |   addq.l #1,12(sp)
   16280:	|  |  |  |  '-> move.l 12(sp),d0
   16284:	|  |  |  |      cmp.l 8(sp),d0
   16288:	|  |  |  '----- blt.w 1618a <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   1628c:	|  |  |         movea.l 1c928 <currentFloor>,a0
   16292:	|  |  |         move.l 4(a0),d1
   16296:	|  |  |         movea.l 1c928 <currentFloor>,a0
   1629c:	|  |  |         movea.l 12(a0),a0
   162a0:	|  |  |         move.l 16(sp),d0
   162a4:	|  |  |         lsl.l #3,d0
   162a6:	|  |  |         adda.l d0,a0
   162a8:	|  |  |         movea.l 4(a0),a0
   162ac:	|  |  |         move.l 8(sp),d0
   162b0:	|  |  |         addi.l #1073741823,d0
   162b6:	|  |  |         add.l d0,d0
   162b8:	|  |  |         add.l d0,d0
   162ba:	|  |  |         adda.l d0,a0
   162bc:	|  |  |         move.l (a0),d0
   162be:	|  |  |         lsl.l #3,d0
   162c0:	|  |  |         movea.l d1,a0
   162c2:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   162c4:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   162c8:	|  |  |         movea.l 1c928 <currentFloor>,a0
   162ce:	|  |  |         move.l 4(a0),d1
   162d2:	|  |  |         movea.l 1c928 <currentFloor>,a0
   162d8:	|  |  |         movea.l 12(a0),a0
   162dc:	|  |  |         move.l 16(sp),d0
   162e0:	|  |  |         lsl.l #3,d0
   162e2:	|  |  |         adda.l d0,a0
   162e4:	|  |  |         movea.l 4(a0),a0
   162e8:	|  |  |         move.l 8(sp),d0
   162ec:	|  |  |         addi.l #1073741823,d0
   162f2:	|  |  |         add.l d0,d0
   162f4:	|  |  |         add.l d0,d0
   162f6:	|  |  |         adda.l d0,a0
   162f8:	|  |  |         move.l (a0),d0
   162fa:	|  |  |         lsl.l #3,d0
   162fc:	|  |  |         movea.l d1,a0
   162fe:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16300:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   16302:	|  |  |         movea.l 1c928 <currentFloor>,a0
   16308:	|  |  |         move.l 4(a0),d1
   1630c:	|  |  |         movea.l 1c928 <currentFloor>,a0
   16312:	|  |  |         movea.l 12(a0),a0
   16316:	|  |  |         move.l 16(sp),d0
   1631a:	|  |  |         lsl.l #3,d0
   1631c:	|  |  |         adda.l d0,a0
   1631e:	|  |  |         movea.l 4(a0),a0
   16322:	|  |  |         move.l (a0),d0
   16324:	|  |  |         lsl.l #3,d0
   16326:	|  |  |         movea.l d1,a0
   16328:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   1632a:	|  |  |         move.l 4(a0),d1
   1632e:	|  |  |         movea.l 1c928 <currentFloor>,a0
   16334:	|  |  |         move.l 4(a0),d3
   16338:	|  |  |         movea.l 1c928 <currentFloor>,a0
   1633e:	|  |  |         movea.l 12(a0),a0
   16342:	|  |  |         move.l 16(sp),d0
   16346:	|  |  |         lsl.l #3,d0
   16348:	|  |  |         adda.l d0,a0
   1634a:	|  |  |         movea.l 4(a0),a0
   1634e:	|  |  |         move.l (a0),d0
   16350:	|  |  |         lsl.l #3,d0
   16352:	|  |  |         movea.l d3,a0
   16354:	|  |  |         adda.l d0,a0
   16356:	|  |  |         move.l (a0),d0
   16358:	|  |  |         move.l d2,-(sp)
   1635a:	|  |  |         move.l a1,-(sp)
   1635c:	|  |  |         move.l d1,-(sp)
   1635e:	|  |  |         move.l d0,-(sp)
   16360:	|  |  |         jsr 46fc <drawLine>
   16366:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   1636a:	|  |  '-------> addq.l #1,16(sp)
   1636e:	|  '----------> movea.l 1c928 <currentFloor>,a0
   16374:	|               move.l 8(a0),d0
   16378:	|               cmp.l 16(sp),d0
   1637c:	'-------------- bgt.w 1615e <drawFloor+0x10>
        }
    }
}
   16380:	                nop
   16382:	                nop
   16384:	                move.l (sp)+,d2
   16386:	                move.l (sp)+,d3
   16388:	                lea 12(sp),sp
   1638c:	                rts

0001638e <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   1638e:	                      lea -12(sp),sp
    int sharedVertices = 0;
   16392:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   16396:	                      clr.l 4(sp)
   1639a:	   ,----------------- bra.w 1642c <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   1639e:	,--|----------------> clr.l (sp)
   163a0:	|  |     ,----------- bra.s 1641c <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   163a2:	|  |  ,--|----------> movea.l 16(sp),a0
   163a6:	|  |  |  |            move.l 4(a0),d1
   163aa:	|  |  |  |            move.l 4(sp),d0
   163ae:	|  |  |  |            add.l d0,d0
   163b0:	|  |  |  |            add.l d0,d0
   163b2:	|  |  |  |            movea.l d1,a0
   163b4:	|  |  |  |            adda.l d0,a0
   163b6:	|  |  |  |            move.l (a0),d1
   163b8:	|  |  |  |            movea.l 20(sp),a0
   163bc:	|  |  |  |            movea.l 4(a0),a0
   163c0:	|  |  |  |            move.l (sp),d0
   163c2:	|  |  |  |            add.l d0,d0
   163c4:	|  |  |  |            add.l d0,d0
   163c6:	|  |  |  |            adda.l d0,a0
   163c8:	|  |  |  |            move.l (a0),d0
   163ca:	|  |  |  |            cmp.l d1,d0
   163cc:	|  |  |  |  ,-------- bne.s 1641a <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   163ce:	|  |  |  |  |         move.l 8(sp),d0
   163d2:	|  |  |  |  |         move.l d0,d1
   163d4:	|  |  |  |  |         addq.l #1,d1
   163d6:	|  |  |  |  |         move.l d1,8(sp)
   163da:	|  |  |  |  |         tst.l d0
   163dc:	|  |  |  |  |     ,-- beq.s 163fe <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   163de:	|  |  |  |  |     |   movea.l 16(sp),a0
   163e2:	|  |  |  |  |     |   move.l 4(a0),d1
   163e6:	|  |  |  |  |     |   move.l 4(sp),d0
   163ea:	|  |  |  |  |     |   add.l d0,d0
   163ec:	|  |  |  |  |     |   add.l d0,d0
   163ee:	|  |  |  |  |     |   movea.l d1,a0
   163f0:	|  |  |  |  |     |   adda.l d0,a0
   163f2:	|  |  |  |  |     |   move.l (a0),d0
   163f4:	|  |  |  |  |     |   movea.l 28(sp),a0
   163f8:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   163fa:	|  |  |  |  |     |   moveq #1,d0
   163fc:	|  |  |  |  |  ,--|-- bra.s 1643c <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   163fe:	|  |  |  |  |  |  '-> movea.l 16(sp),a0
   16402:	|  |  |  |  |  |      move.l 4(a0),d1
   16406:	|  |  |  |  |  |      move.l 4(sp),d0
   1640a:	|  |  |  |  |  |      add.l d0,d0
   1640c:	|  |  |  |  |  |      add.l d0,d0
   1640e:	|  |  |  |  |  |      movea.l d1,a0
   16410:	|  |  |  |  |  |      adda.l d0,a0
   16412:	|  |  |  |  |  |      move.l (a0),d0
   16414:	|  |  |  |  |  |      movea.l 24(sp),a0
   16418:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   1641a:	|  |  |  |  '--|----> addq.l #1,(sp)
   1641c:	|  |  |  '-----|----> movea.l 20(sp),a0
   16420:	|  |  |        |      move.l (a0),d0
   16422:	|  |  |        |      cmp.l (sp),d0
   16424:	|  |  '--------|----- bgt.w 163a2 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   16428:	|  |           |      addq.l #1,4(sp)
   1642c:	|  '-----------|----> movea.l 16(sp),a0
   16430:	|              |      move.l (a0),d0
   16432:	|              |      cmp.l 4(sp),d0
   16436:	'--------------|----- bgt.w 1639e <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   1643a:	               |      clr.w d0
}
   1643c:	               '----> lea 12(sp),sp
   16440:	                      rts

00016442 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   16442:	movea.l 1c928 <currentFloor>,a0
   16448:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   1644c:	movea.l 1c928 <currentFloor>,a0
   16452:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   16456:	movea.l 1c928 <currentFloor>,a0
   1645c:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   16460:	movea.l 1c928 <currentFloor>,a0
   16466:	clr.l 16(a0)
}
   1646a:	nop
   1646c:	rts

0001646e <inFloor>:

int inFloor (int x, int y) {
   1646e:	          subq.l #8,sp
	int i, r = -1;
   16470:	          moveq #-1,d0
   16472:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   16474:	          clr.l 4(sp)
   16478:	   ,----- bra.s 164ac <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   1647a:	,--|----> movea.l 1c928 <currentFloor>,a0
   16480:	|  |      move.l 12(a0),d1
   16484:	|  |      move.l 4(sp),d0
   16488:	|  |      lsl.l #3,d0
   1648a:	|  |      add.l d1,d0
   1648c:	|  |      move.l 16(sp),-(sp)
   16490:	|  |      move.l 16(sp),-(sp)
   16494:	|  |      move.l d0,-(sp)
   16496:	|  |      jsr 16678 <pointInFloorPolygon>
   1649c:	|  |      lea 12(sp),sp
   164a0:	|  |      tst.w d0
   164a2:	|  |  ,-- beq.s 164a8 <inFloor+0x3a>
			r = i;
   164a4:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   164a8:	|  |  '-> addq.l #1,4(sp)
   164ac:	|  '----> movea.l 1c928 <currentFloor>,a0
   164b2:	|         move.l 8(a0),d0
   164b6:	|         cmp.l 4(sp),d0
   164ba:	'-------- bgt.s 1647a <inFloor+0xc>

	return r;
   164bc:	          move.l (sp),d0
}
   164be:	          addq.l #8,sp
   164c0:	          rts

000164c2 <initFloor>:

BOOL initFloor () {
   164c2:	       lea -12(sp),sp
   164c6:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   164c8:	       moveq #20,d0
   164ca:	       move.l d0,12(sp)
   164ce:	       clr.l 8(sp)
   164d2:	       move.l 1c810 <SysBase>,d0
   164d8:	       movea.l d0,a6
   164da:	       move.l 12(sp),d0
   164de:	       move.l 8(sp),d1
   164e2:	       jsr -684(a6)
   164e6:	       move.l d0,4(sp)
   164ea:	       move.l 4(sp),d0
   164ee:	       move.l d0,1c928 <currentFloor>

    if(currentFloor == 0) {
   164f4:	       move.l 1c928 <currentFloor>,d0
   164fa:	,----- bne.s 1650e <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   164fc:	|      pea 19f51 <talk.c.490538ff+0x5ec>
   16502:	|      jsr 1710c <KPrintF>
   16508:	|      addq.l #4,sp
        return FALSE;
   1650a:	|      clr.w d0
   1650c:	|  ,-- bra.s 16516 <initFloor+0x54>
    }

	noFloor ();
   1650e:	'--|-> jsr 16442 <noFloor>
	return TRUE;
   16514:	   |   moveq #1,d0
}
   16516:	   '-> movea.l (sp)+,a6
   16518:	       lea 12(sp),sp
   1651c:	       rts

0001651e <killFloor>:

void killFloor () {
   1651e:	       lea -24(sp),sp
   16522:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   16524:	       clr.l 24(sp)
   16528:	   ,-- bra.s 16582 <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   1652a:	,--|-> movea.l 1c928 <currentFloor>,a0
   16530:	|  |   move.l 12(a0),d1
   16534:	|  |   move.l 24(sp),d0
   16538:	|  |   lsl.l #3,d0
   1653a:	|  |   movea.l d1,a0
   1653c:	|  |   adda.l d0,a0
   1653e:	|  |   move.l 4(a0),8(sp)
   16544:	|  |   move.l 1c810 <SysBase>,d0
   1654a:	|  |   movea.l d0,a6
   1654c:	|  |   movea.l 8(sp),a1
   16550:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   16554:	|  |   movea.l 1c928 <currentFloor>,a0
   1655a:	|  |   move.l 16(a0),d1
   1655e:	|  |   move.l 24(sp),d0
   16562:	|  |   add.l d0,d0
   16564:	|  |   add.l d0,d0
   16566:	|  |   movea.l d1,a0
   16568:	|  |   adda.l d0,a0
   1656a:	|  |   move.l (a0),4(sp)
   1656e:	|  |   move.l 1c810 <SysBase>,d0
   16574:	|  |   movea.l d0,a6
   16576:	|  |   movea.l 4(sp),a1
   1657a:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   1657e:	|  |   addq.l #1,24(sp)
   16582:	|  '-> movea.l 1c928 <currentFloor>,a0
   16588:	|      move.l 8(a0),d0
   1658c:	|      cmp.l 24(sp),d0
   16590:	'----- bgt.s 1652a <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   16592:	       movea.l 1c928 <currentFloor>,a0
   16598:	       move.l 12(a0),20(sp)
   1659e:	       move.l 1c810 <SysBase>,d0
   165a4:	       movea.l d0,a6
   165a6:	       movea.l 20(sp),a1
   165aa:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   165ae:	       movea.l 1c928 <currentFloor>,a0
   165b4:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   165b8:	       movea.l 1c928 <currentFloor>,a0
   165be:	       move.l 4(a0),16(sp)
   165c4:	       move.l 1c810 <SysBase>,d0
   165ca:	       movea.l d0,a6
   165cc:	       movea.l 16(sp),a1
   165d0:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   165d4:	       movea.l 1c928 <currentFloor>,a0
   165da:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   165de:	       movea.l 1c928 <currentFloor>,a0
   165e4:	       move.l 16(a0),12(sp)
   165ea:	       move.l 1c810 <SysBase>,d0
   165f0:	       movea.l d0,a6
   165f2:	       movea.l 12(sp),a1
   165f6:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   165fa:	       movea.l 1c928 <currentFloor>,a0
   16600:	       clr.l 16(a0)
}
   16604:	       nop
   16606:	       movea.l (sp)+,a6
   16608:	       lea 24(sp),sp
   1660c:	       rts

0001660e <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   1660e:	                   lea -12(sp),sp
	int sharedVertices = 0;
   16612:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   16616:	                   clr.l 4(sp)
   1661a:	   ,-------------- bra.s 16666 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   1661c:	,--|-------------> clr.l (sp)
   1661e:	|  |     ,-------- bra.s 1665a <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   16620:	|  |  ,--|-------> move.l 20(sp),d1
   16624:	|  |  |  |         move.l 4(sp),d0
   16628:	|  |  |  |         add.l d0,d0
   1662a:	|  |  |  |         add.l d0,d0
   1662c:	|  |  |  |         movea.l d1,a0
   1662e:	|  |  |  |         adda.l d0,a0
   16630:	|  |  |  |         move.l (a0),d1
   16632:	|  |  |  |         movea.l 28(sp),a0
   16636:	|  |  |  |         move.l (sp),d0
   16638:	|  |  |  |         add.l d0,d0
   1663a:	|  |  |  |         add.l d0,d0
   1663c:	|  |  |  |         adda.l d0,a0
   1663e:	|  |  |  |         move.l (a0),d0
   16640:	|  |  |  |         cmp.l d1,d0
   16642:	|  |  |  |     ,-- bne.s 16658 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   16644:	|  |  |  |     |   move.l 8(sp),d0
   16648:	|  |  |  |     |   move.l d0,d1
   1664a:	|  |  |  |     |   addq.l #1,d1
   1664c:	|  |  |  |     |   move.l d1,8(sp)
   16650:	|  |  |  |     |   tst.l d0
   16652:	|  |  |  |     +-- beq.s 16658 <polysShareSide+0x4a>
   16654:	|  |  |  |     |   moveq #1,d0
   16656:	|  |  |  |  ,--|-- bra.s 16672 <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   16658:	|  |  |  |  |  '-> addq.l #1,(sp)
   1665a:	|  |  |  '--|----> move.l 24(sp),d0
   1665e:	|  |  |     |      cmp.l (sp),d0
   16660:	|  |  '-----|----- bgt.s 16620 <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   16662:	|  |        |      addq.l #1,4(sp)
   16666:	|  '--------|----> move.l 16(sp),d0
   1666a:	|           |      cmp.l 4(sp),d0
   1666e:	'-----------|----- bgt.s 1661c <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   16670:	            |      clr.w d0
}
   16672:	            '----> lea 12(sp),sp
   16676:	                   rts

00016678 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   16678:	             lea -28(sp),sp
   1667c:	             move.l d3,-(sp)
   1667e:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   16680:	             clr.l 32(sp)
   16684:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16688:	             movea.l 40(sp),a0
   1668c:	             move.l (a0),d0
   1668e:	             move.l d0,d1
   16690:	             subq.l #1,d1
   16692:	             move.l d1,28(sp)
   16696:	   ,-------- bra.w 16890 <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   1669a:	,--|-------> movea.l 1c928 <currentFloor>,a0
   166a0:	|  |         move.l 4(a0),d1
   166a4:	|  |         movea.l 40(sp),a0
   166a8:	|  |         movea.l 4(a0),a0
   166ac:	|  |         move.l 32(sp),d0
   166b0:	|  |         add.l d0,d0
   166b2:	|  |         add.l d0,d0
   166b4:	|  |         adda.l d0,a0
   166b6:	|  |         move.l (a0),d0
   166b8:	|  |         lsl.l #3,d0
   166ba:	|  |         movea.l d1,a0
   166bc:	|  |         adda.l d0,a0
   166be:	|  |         move.l (a0),d0
   166c0:	|  |         move.l d0,-(sp)
   166c2:	|  |         jsr 1753e <__floatsisf>
   166c8:	|  |         addq.l #4,sp
   166ca:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   166ce:	|  |         movea.l 1c928 <currentFloor>,a0
   166d4:	|  |         move.l 4(a0),d1
   166d8:	|  |         movea.l 40(sp),a0
   166dc:	|  |         movea.l 4(a0),a0
   166e0:	|  |         move.l 32(sp),d0
   166e4:	|  |         add.l d0,d0
   166e6:	|  |         add.l d0,d0
   166e8:	|  |         adda.l d0,a0
   166ea:	|  |         move.l (a0),d0
   166ec:	|  |         lsl.l #3,d0
   166ee:	|  |         movea.l d1,a0
   166f0:	|  |         adda.l d0,a0
   166f2:	|  |         move.l 4(a0),d0
   166f6:	|  |         move.l d0,-(sp)
   166f8:	|  |         jsr 1753e <__floatsisf>
   166fe:	|  |         addq.l #4,sp
   16700:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   16704:	|  |         movea.l 1c928 <currentFloor>,a0
   1670a:	|  |         move.l 4(a0),d1
   1670e:	|  |         movea.l 40(sp),a0
   16712:	|  |         movea.l 4(a0),a0
   16716:	|  |         move.l 28(sp),d0
   1671a:	|  |         add.l d0,d0
   1671c:	|  |         add.l d0,d0
   1671e:	|  |         adda.l d0,a0
   16720:	|  |         move.l (a0),d0
   16722:	|  |         lsl.l #3,d0
   16724:	|  |         movea.l d1,a0
   16726:	|  |         adda.l d0,a0
   16728:	|  |         move.l (a0),d0
   1672a:	|  |         move.l d0,-(sp)
   1672c:	|  |         jsr 1753e <__floatsisf>
   16732:	|  |         addq.l #4,sp
   16734:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   16738:	|  |         movea.l 1c928 <currentFloor>,a0
   1673e:	|  |         move.l 4(a0),d1
   16742:	|  |         movea.l 40(sp),a0
   16746:	|  |         movea.l 4(a0),a0
   1674a:	|  |         move.l 28(sp),d0
   1674e:	|  |         add.l d0,d0
   16750:	|  |         add.l d0,d0
   16752:	|  |         adda.l d0,a0
   16754:	|  |         move.l (a0),d0
   16756:	|  |         lsl.l #3,d0
   16758:	|  |         movea.l d1,a0
   1675a:	|  |         adda.l d0,a0
   1675c:	|  |         move.l 4(a0),d0
   16760:	|  |         move.l d0,-(sp)
   16762:	|  |         jsr 1753e <__floatsisf>
   16768:	|  |         addq.l #4,sp
   1676a:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   1676e:	|  |         move.l 48(sp),-(sp)
   16772:	|  |         jsr 1753e <__floatsisf>
   16778:	|  |         addq.l #4,sp
   1677a:	|  |         move.l d0,-(sp)
   1677c:	|  |         move.l 20(sp),-(sp)
   16780:	|  |         jsr 176e0 <__lesf2>
   16786:	|  |         addq.l #8,sp
   16788:	|  |         tst.l d0
   1678a:	|  |     ,-- bgt.s 167aa <pointInFloorPolygon+0x132>
   1678c:	|  |     |   move.l 48(sp),-(sp)
   16790:	|  |     |   jsr 1753e <__floatsisf>
   16796:	|  |     |   addq.l #4,sp
   16798:	|  |     |   move.l d0,-(sp)
   1679a:	|  |     |   move.l 12(sp),-(sp)
   1679e:	|  |     |   jsr 176aa <__gtsf2>
   167a4:	|  |     |   addq.l #8,sp
   167a6:	|  |     |   tst.l d0
   167a8:	|  |  ,--|-- bgt.s 167ea <pointInFloorPolygon+0x172>
   167aa:	|  |  |  '-> move.l 48(sp),-(sp)
   167ae:	|  |  |      jsr 1753e <__floatsisf>
   167b4:	|  |  |      addq.l #4,sp
   167b6:	|  |  |      move.l d0,-(sp)
   167b8:	|  |  |      move.l 12(sp),-(sp)
   167bc:	|  |  |      jsr 176e0 <__lesf2>
   167c2:	|  |  |      addq.l #8,sp
   167c4:	|  |  |      tst.l d0
   167c6:	|  |  |  ,-- bgt.w 16880 <pointInFloorPolygon+0x208>
   167ca:	|  |  |  |   move.l 48(sp),-(sp)
   167ce:	|  |  |  |   jsr 1753e <__floatsisf>
   167d4:	|  |  |  |   addq.l #4,sp
   167d6:	|  |  |  |   move.l d0,-(sp)
   167d8:	|  |  |  |   move.l 20(sp),-(sp)
   167dc:	|  |  |  |   jsr 176aa <__gtsf2>
   167e2:	|  |  |  |   addq.l #8,sp
   167e4:	|  |  |  |   tst.l d0
   167e6:	|  |  |  +-- ble.w 16880 <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   167ea:	|  |  '--|-> move.l 44(sp),-(sp)
   167ee:	|  |     |   jsr 1753e <__floatsisf>
   167f4:	|  |     |   addq.l #4,sp
   167f6:	|  |     |   move.l d0,d3
   167f8:	|  |     |   move.l 20(sp),-(sp)
   167fc:	|  |     |   move.l 16(sp),-(sp)
   16800:	|  |     |   jsr 17832 <__subsf3>
   16806:	|  |     |   addq.l #8,sp
   16808:	|  |     |   move.l d0,d2
   1680a:	|  |     |   move.l 48(sp),-(sp)
   1680e:	|  |     |   jsr 1753e <__floatsisf>
   16814:	|  |     |   addq.l #4,sp
   16816:	|  |     |   move.l 16(sp),-(sp)
   1681a:	|  |     |   move.l d0,-(sp)
   1681c:	|  |     |   jsr 17832 <__subsf3>
   16822:	|  |     |   addq.l #8,sp
   16824:	|  |     |   move.l d0,-(sp)
   16826:	|  |     |   move.l d2,-(sp)
   16828:	|  |     |   jsr 175f0 <__mulsf3>
   1682e:	|  |     |   addq.l #8,sp
   16830:	|  |     |   move.l d0,d2
   16832:	|  |     |   move.l 16(sp),-(sp)
   16836:	|  |     |   move.l 12(sp),-(sp)
   1683a:	|  |     |   jsr 17832 <__subsf3>
   16840:	|  |     |   addq.l #8,sp
   16842:	|  |     |   move.l d0,-(sp)
   16844:	|  |     |   move.l d2,-(sp)
   16846:	|  |     |   jsr 173f4 <__divsf3>
   1684c:	|  |     |   addq.l #8,sp
   1684e:	|  |     |   move.l 20(sp),-(sp)
   16852:	|  |     |   move.l d0,-(sp)
   16854:	|  |     |   jsr 172fa <__addsf3>
   1685a:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   1685c:	|  |     |   move.l d0,-(sp)
   1685e:	|  |     |   move.l d3,-(sp)
   16860:	|  |     |   jsr 17764 <__ltsf2>
   16866:	|  |     |   addq.l #8,sp
   16868:	|  |     |   tst.l d0
   1686a:	|  |     +-- bge.s 16880 <pointInFloorPolygon+0x208>

			c = !c;
   1686c:	|  |     |   tst.l 24(sp)
   16870:	|  |     |   seq d0
   16872:	|  |     |   neg.b d0
   16874:	|  |     |   move.b d0,d0
   16876:	|  |     |   andi.l #255,d0
   1687c:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16880:	|  |     '-> move.l 32(sp),d0
   16884:	|  |         move.l d0,d1
   16886:	|  |         addq.l #1,d1
   16888:	|  |         move.l d1,32(sp)
   1688c:	|  |         move.l d0,28(sp)
   16890:	|  '-------> movea.l 40(sp),a0
   16894:	|            move.l (a0),d0
   16896:	|            cmp.l 32(sp),d0
   1689a:	'----------- bgt.w 1669a <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   1689e:	             tst.l 24(sp)
   168a2:	             sne d0
   168a4:	             neg.b d0
   168a6:	             move.b d0,d0
   168a8:	             andi.w #255,d0
}
   168ac:	             move.l (sp)+,d2
   168ae:	             move.l (sp)+,d3
   168b0:	             lea 28(sp),sp
   168b4:	             rts

000168b6 <setFloor>:

BOOL setFloor (int fileNum) {
   168b6:	                               lea -132(sp),sp
   168ba:	                               move.l a6,-(sp)
   168bc:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   168be:	                               jsr 1651e <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   168c4:	                               move.l 144(sp),-(sp)
   168c8:	                               jsr 7610 <openFileFromNum>
   168ce:	                               addq.l #4,sp
   168d0:	                               tst.l d0
   168d2:	                           ,-- bne.s 168da <setFloor+0x24>
   168d4:	                           |   clr.w d0
   168d6:	,--------------------------|-- bra.w 17026 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   168da:	|                          '-> movea.l 1c928 <currentFloor>,a0
   168e0:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   168e4:	|                              move.l 1c7f8 <bigDataFile>,118(sp)
   168ec:	|                              move.l 1c818 <DOSBase>,d0
   168f2:	|                              movea.l d0,a6
   168f4:	|                              move.l 118(sp),d1
   168f8:	|                              jsr -306(a6)
   168fc:	|                              move.l d0,114(sp)
   16900:	|                              move.l 114(sp),d0
   16904:	|                              movea.l 1c928 <currentFloor>,a0
   1690a:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   1690e:	|                              movea.l 1c928 <currentFloor>,a0
   16914:	|                              move.l 8(a0),d0
   16918:	|                              lsl.l #3,d0
   1691a:	|                              move.l d0,110(sp)
   1691e:	|                              clr.l 106(sp)
   16922:	|                              move.l 1c810 <SysBase>,d0
   16928:	|                              movea.l d0,a6
   1692a:	|                              move.l 110(sp),d0
   1692e:	|                              move.l 106(sp),d1
   16932:	|                              jsr -684(a6)
   16936:	|                              move.l d0,102(sp)
   1693a:	|                              move.l 102(sp),d0
   1693e:	|                              movea.l 1c928 <currentFloor>,a0
   16944:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   16948:	|                              movea.l 1c928 <currentFloor>,a0
   1694e:	|                              move.l 12(a0),d0
   16952:	|                          ,-- bne.s 16968 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   16954:	|                          |   pea 19f75 <talk.c.490538ff+0x610>
   1695a:	|                          |   jsr 1710c <KPrintF>
   16960:	|                          |   addq.l #4,sp
		return FALSE;
   16962:	|                          |   clr.w d0
   16964:	+--------------------------|-- bra.w 17026 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16968:	|                          '-> clr.l 136(sp)
   1696c:	|                    ,-------- bra.w 16a84 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   16970:	|                 ,--|-------> move.l 1c7f8 <bigDataFile>,26(sp)
   16978:	|                 |  |         move.l 1c818 <DOSBase>,d0
   1697e:	|                 |  |         movea.l d0,a6
   16980:	|                 |  |         move.l 26(sp),d1
   16984:	|                 |  |         jsr -306(a6)
   16988:	|                 |  |         move.l d0,22(sp)
   1698c:	|                 |  |         move.l 22(sp),d1
   16990:	|                 |  |         movea.l 1c928 <currentFloor>,a0
   16996:	|                 |  |         movea.l 12(a0),a0
   1699a:	|                 |  |         move.l 136(sp),d0
   1699e:	|                 |  |         lsl.l #3,d0
   169a0:	|                 |  |         adda.l d0,a0
   169a2:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   169a4:	|                 |  |         movea.l 1c928 <currentFloor>,a0
   169aa:	|                 |  |         move.l 12(a0),d1
   169ae:	|                 |  |         move.l 136(sp),d0
   169b2:	|                 |  |         lsl.l #3,d0
   169b4:	|                 |  |         movea.l d1,a0
   169b6:	|                 |  |         adda.l d0,a0
   169b8:	|                 |  |         move.l (a0),d0
   169ba:	|                 |  |         add.l d0,d0
   169bc:	|                 |  |         add.l d0,d0
   169be:	|                 |  |         move.l d0,18(sp)
   169c2:	|                 |  |         clr.l 14(sp)
   169c6:	|                 |  |         move.l 1c810 <SysBase>,d0
   169cc:	|                 |  |         movea.l d0,a6
   169ce:	|                 |  |         move.l 18(sp),d0
   169d2:	|                 |  |         move.l 14(sp),d1
   169d6:	|                 |  |         jsr -684(a6)
   169da:	|                 |  |         move.l d0,10(sp)
   169de:	|                 |  |         move.l 10(sp),d1
   169e2:	|                 |  |         movea.l 1c928 <currentFloor>,a0
   169e8:	|                 |  |         movea.l 12(a0),a0
   169ec:	|                 |  |         move.l 136(sp),d0
   169f0:	|                 |  |         lsl.l #3,d0
   169f2:	|                 |  |         adda.l d0,a0
   169f4:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   169f8:	|                 |  |         movea.l 1c928 <currentFloor>,a0
   169fe:	|                 |  |         move.l 12(a0),d1
   16a02:	|                 |  |         move.l 136(sp),d0
   16a06:	|                 |  |         lsl.l #3,d0
   16a08:	|                 |  |         movea.l d1,a0
   16a0a:	|                 |  |         adda.l d0,a0
   16a0c:	|                 |  |         move.l 4(a0),d0
   16a10:	|                 |  |     ,-- bne.s 16a26 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   16a12:	|                 |  |     |   pea 19f75 <talk.c.490538ff+0x610>
   16a18:	|                 |  |     |   jsr 1710c <KPrintF>
   16a1e:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16a20:	|                 |  |     |   clr.w d0
   16a22:	+-----------------|--|-----|-- bra.w 17026 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16a26:	|                 |  |     '-> clr.l 132(sp)
   16a2a:	|                 |  |     ,-- bra.s 16a64 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   16a2c:	|                 |  |  ,--|-> move.l 1c7f8 <bigDataFile>,d1
   16a32:	|                 |  |  |  |   movea.l 1c928 <currentFloor>,a0
   16a38:	|                 |  |  |  |   movea.l 12(a0),a0
   16a3c:	|                 |  |  |  |   move.l 136(sp),d0
   16a40:	|                 |  |  |  |   lsl.l #3,d0
   16a42:	|                 |  |  |  |   adda.l d0,a0
   16a44:	|                 |  |  |  |   movea.l 4(a0),a0
   16a48:	|                 |  |  |  |   move.l 132(sp),d0
   16a4c:	|                 |  |  |  |   add.l d0,d0
   16a4e:	|                 |  |  |  |   add.l d0,d0
   16a50:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   16a54:	|                 |  |  |  |   move.l d1,-(sp)
   16a56:	|                 |  |  |  |   jsr 6bc <get2bytes>
   16a5c:	|                 |  |  |  |   addq.l #4,sp
   16a5e:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16a60:	|                 |  |  |  |   addq.l #1,132(sp)
   16a64:	|                 |  |  |  '-> movea.l 1c928 <currentFloor>,a0
   16a6a:	|                 |  |  |      move.l 12(a0),d1
   16a6e:	|                 |  |  |      move.l 136(sp),d0
   16a72:	|                 |  |  |      lsl.l #3,d0
   16a74:	|                 |  |  |      movea.l d1,a0
   16a76:	|                 |  |  |      adda.l d0,a0
   16a78:	|                 |  |  |      move.l (a0),d0
   16a7a:	|                 |  |  |      cmp.l 132(sp),d0
   16a7e:	|                 |  |  '----- bgt.s 16a2c <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16a80:	|                 |  |         addq.l #1,136(sp)
   16a84:	|                 |  '-------> movea.l 1c928 <currentFloor>,a0
   16a8a:	|                 |            move.l 8(a0),d0
   16a8e:	|                 |            cmp.l 136(sp),d0
   16a92:	|                 '----------- bgt.w 16970 <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   16a96:	|                              move.l 1c7f8 <bigDataFile>,d0
   16a9c:	|                              move.l d0,-(sp)
   16a9e:	|                              jsr 6bc <get2bytes>
   16aa4:	|                              addq.l #4,sp
   16aa6:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   16aaa:	|                              move.l 136(sp),d0
   16aae:	|                              lsl.l #3,d0
   16ab0:	|                              move.l d0,98(sp)
   16ab4:	|                              clr.l 94(sp)
   16ab8:	|                              move.l 1c810 <SysBase>,d0
   16abe:	|                              movea.l d0,a6
   16ac0:	|                              move.l 98(sp),d0
   16ac4:	|                              move.l 94(sp),d1
   16ac8:	|                              jsr -684(a6)
   16acc:	|                              move.l d0,90(sp)
   16ad0:	|                              move.l 90(sp),d0
   16ad4:	|                              movea.l 1c928 <currentFloor>,a0
   16ada:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   16ade:	|                              movea.l 1c928 <currentFloor>,a0
   16ae4:	|                              move.l 4(a0),d0
   16ae8:	|                          ,-- bne.s 16afe <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   16aea:	|                          |   pea 19f75 <talk.c.490538ff+0x610>
   16af0:	|                          |   jsr 1710c <KPrintF>
   16af6:	|                          |   addq.l #4,sp
		return FALSE;
   16af8:	|                          |   clr.w d0
   16afa:	+--------------------------|-- bra.w 17026 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   16afe:	|                          '-> clr.l 132(sp)
   16b02:	|                          ,-- bra.s 16b56 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   16b04:	|                       ,--|-> move.l 1c7f8 <bigDataFile>,d1
   16b0a:	|                       |  |   movea.l 1c928 <currentFloor>,a0
   16b10:	|                       |  |   movea.l 4(a0),a0
   16b14:	|                       |  |   move.l 132(sp),d0
   16b18:	|                       |  |   lsl.l #3,d0
   16b1a:	|                       |  |   lea (0,a0,d0.l),a2
   16b1e:	|                       |  |   move.l d1,-(sp)
   16b20:	|                       |  |   jsr 6bc <get2bytes>
   16b26:	|                       |  |   addq.l #4,sp
   16b28:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   16b2a:	|                       |  |   move.l 1c7f8 <bigDataFile>,d1
   16b30:	|                       |  |   movea.l 1c928 <currentFloor>,a0
   16b36:	|                       |  |   movea.l 4(a0),a0
   16b3a:	|                       |  |   move.l 132(sp),d0
   16b3e:	|                       |  |   lsl.l #3,d0
   16b40:	|                       |  |   lea (0,a0,d0.l),a2
   16b44:	|                       |  |   move.l d1,-(sp)
   16b46:	|                       |  |   jsr 6bc <get2bytes>
   16b4c:	|                       |  |   addq.l #4,sp
   16b4e:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   16b52:	|                       |  |   addq.l #1,132(sp)
   16b56:	|                       |  '-> move.l 132(sp),d0
   16b5a:	|                       |      cmp.l 136(sp),d0
   16b5e:	|                       '----- blt.s 16b04 <setFloor+0x24e>
	}

	finishAccess ();
   16b60:	|                              jsr 7508 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16b66:	|                              movea.l 1c928 <currentFloor>,a0
   16b6c:	|                              move.l 8(a0),d0
   16b70:	|                              add.l d0,d0
   16b72:	|                              add.l d0,d0
   16b74:	|                              move.l d0,86(sp)
   16b78:	|                              clr.l 82(sp)
   16b7c:	|                              move.l 1c810 <SysBase>,d0
   16b82:	|                              movea.l d0,a6
   16b84:	|                              move.l 86(sp),d0
   16b88:	|                              move.l 82(sp),d1
   16b8c:	|                              jsr -684(a6)
   16b90:	|                              move.l d0,78(sp)
   16b94:	|                              move.l 78(sp),d0
   16b98:	|                              movea.l 1c928 <currentFloor>,a0
   16b9e:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16ba2:	|                              movea.l 1c928 <currentFloor>,a0
   16ba8:	|                              move.l 8(a0),d0
   16bac:	|                              add.l d0,d0
   16bae:	|                              add.l d0,d0
   16bb0:	|                              move.l d0,74(sp)
   16bb4:	|                              clr.l 70(sp)
   16bb8:	|                              move.l 1c810 <SysBase>,d0
   16bbe:	|                              movea.l d0,a6
   16bc0:	|                              move.l 74(sp),d0
   16bc4:	|                              move.l 70(sp),d1
   16bc8:	|                              jsr -684(a6)
   16bcc:	|                              move.l d0,66(sp)
   16bd0:	|                              move.l 66(sp),d0
   16bd4:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   16bd8:	|                              movea.l 1c928 <currentFloor>,a0
   16bde:	|                              move.l 16(a0),d0
   16be2:	|                          ,-- bne.s 16bf8 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   16be4:	|                          |   pea 19f75 <talk.c.490538ff+0x610>
   16bea:	|                          |   jsr 1710c <KPrintF>
   16bf0:	|                          |   addq.l #4,sp
		return FALSE;
   16bf2:	|                          |   clr.w d0
   16bf4:	+--------------------------|-- bra.w 17026 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16bf8:	|                          '-> clr.l 136(sp)
   16bfc:	|                    ,-------- bra.w 16d20 <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16c00:	|                 ,--|-------> movea.l 1c928 <currentFloor>,a0
   16c06:	|                 |  |         move.l 8(a0),d0
   16c0a:	|                 |  |         add.l d0,d0
   16c0c:	|                 |  |         add.l d0,d0
   16c0e:	|                 |  |         move.l d0,50(sp)
   16c12:	|                 |  |         clr.l 46(sp)
   16c16:	|                 |  |         move.l 1c810 <SysBase>,d0
   16c1c:	|                 |  |         movea.l d0,a6
   16c1e:	|                 |  |         move.l 50(sp),d0
   16c22:	|                 |  |         move.l 46(sp),d1
   16c26:	|                 |  |         jsr -684(a6)
   16c2a:	|                 |  |         move.l d0,42(sp)
   16c2e:	|                 |  |         move.l 42(sp),d0
   16c32:	|                 |  |         movea.l 1c928 <currentFloor>,a0
   16c38:	|                 |  |         movea.l 16(a0),a0
   16c3c:	|                 |  |         move.l 136(sp),d1
   16c40:	|                 |  |         add.l d1,d1
   16c42:	|                 |  |         add.l d1,d1
   16c44:	|                 |  |         adda.l d1,a0
   16c46:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16c48:	|                 |  |         movea.l 1c928 <currentFloor>,a0
   16c4e:	|                 |  |         move.l 8(a0),d0
   16c52:	|                 |  |         add.l d0,d0
   16c54:	|                 |  |         add.l d0,d0
   16c56:	|                 |  |         move.l d0,38(sp)
   16c5a:	|                 |  |         clr.l 34(sp)
   16c5e:	|                 |  |         move.l 1c810 <SysBase>,d0
   16c64:	|                 |  |         movea.l d0,a6
   16c66:	|                 |  |         move.l 38(sp),d0
   16c6a:	|                 |  |         move.l 34(sp),d1
   16c6e:	|                 |  |         jsr -684(a6)
   16c72:	|                 |  |         move.l d0,30(sp)
   16c76:	|                 |  |         move.l 30(sp),d1
   16c7a:	|                 |  |         move.l 136(sp),d0
   16c7e:	|                 |  |         add.l d0,d0
   16c80:	|                 |  |         add.l d0,d0
   16c82:	|                 |  |         movea.l 62(sp),a0
   16c86:	|                 |  |         adda.l d0,a0
   16c88:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   16c8a:	|                 |  |         movea.l 1c928 <currentFloor>,a0
   16c90:	|                 |  |         move.l 16(a0),d1
   16c94:	|                 |  |         move.l 136(sp),d0
   16c98:	|                 |  |         add.l d0,d0
   16c9a:	|                 |  |         add.l d0,d0
   16c9c:	|                 |  |         movea.l d1,a0
   16c9e:	|                 |  |         adda.l d0,a0
   16ca0:	|                 |  |         move.l (a0),d0
   16ca2:	|                 |  |     ,-- bne.s 16cb8 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   16ca4:	|                 |  |     |   pea 19f75 <talk.c.490538ff+0x610>
   16caa:	|                 |  |     |   jsr 1710c <KPrintF>
   16cb0:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16cb2:	|                 |  |     |   clr.w d0
   16cb4:	+-----------------|--|-----|-- bra.w 17026 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16cb8:	|                 |  |     '-> clr.l 132(sp)
   16cbc:	|                 |  |     ,-- bra.s 16d0c <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   16cbe:	|                 |  |  ,--|-> movea.l 1c928 <currentFloor>,a0
   16cc4:	|                 |  |  |  |   move.l 16(a0),d1
   16cc8:	|                 |  |  |  |   move.l 136(sp),d0
   16ccc:	|                 |  |  |  |   add.l d0,d0
   16cce:	|                 |  |  |  |   add.l d0,d0
   16cd0:	|                 |  |  |  |   movea.l d1,a0
   16cd2:	|                 |  |  |  |   adda.l d0,a0
   16cd4:	|                 |  |  |  |   move.l (a0),d1
   16cd6:	|                 |  |  |  |   move.l 132(sp),d0
   16cda:	|                 |  |  |  |   add.l d0,d0
   16cdc:	|                 |  |  |  |   add.l d0,d0
   16cde:	|                 |  |  |  |   movea.l d1,a0
   16ce0:	|                 |  |  |  |   adda.l d0,a0
   16ce2:	|                 |  |  |  |   moveq #-1,d1
   16ce4:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   16ce6:	|                 |  |  |  |   move.l 136(sp),d0
   16cea:	|                 |  |  |  |   add.l d0,d0
   16cec:	|                 |  |  |  |   add.l d0,d0
   16cee:	|                 |  |  |  |   movea.l 62(sp),a0
   16cf2:	|                 |  |  |  |   adda.l d0,a0
   16cf4:	|                 |  |  |  |   move.l (a0),d1
   16cf6:	|                 |  |  |  |   move.l 132(sp),d0
   16cfa:	|                 |  |  |  |   add.l d0,d0
   16cfc:	|                 |  |  |  |   add.l d0,d0
   16cfe:	|                 |  |  |  |   movea.l d1,a0
   16d00:	|                 |  |  |  |   adda.l d0,a0
   16d02:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16d08:	|                 |  |  |  |   addq.l #1,132(sp)
   16d0c:	|                 |  |  |  '-> movea.l 1c928 <currentFloor>,a0
   16d12:	|                 |  |  |      move.l 8(a0),d0
   16d16:	|                 |  |  |      cmp.l 132(sp),d0
   16d1a:	|                 |  |  '----- bgt.s 16cbe <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16d1c:	|                 |  |         addq.l #1,136(sp)
   16d20:	|                 |  '-------> movea.l 1c928 <currentFloor>,a0
   16d26:	|                 |            move.l 8(a0),d0
   16d2a:	|                 |            cmp.l 136(sp),d0
   16d2e:	|                 '----------- bgt.w 16c00 <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16d32:	|                              clr.l 136(sp)
   16d36:	|              ,-------------- bra.w 16e3c <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16d3a:	|           ,--|-------------> clr.l 132(sp)
   16d3e:	|           |  |     ,-------- bra.w 16e26 <setFloor+0x570>
			if (i != j) {
   16d42:	|           |  |  ,--|-------> move.l 136(sp),d0
   16d46:	|           |  |  |  |         cmp.l 132(sp),d0
   16d4a:	|           |  |  |  |     ,-- beq.w 16ddc <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   16d4e:	|           |  |  |  |     |   movea.l 1c928 <currentFloor>,a0
   16d54:	|           |  |  |  |     |   move.l 12(a0),d1
   16d58:	|           |  |  |  |     |   move.l 132(sp),d0
   16d5c:	|           |  |  |  |     |   lsl.l #3,d0
   16d5e:	|           |  |  |  |     |   movea.l d1,a1
   16d60:	|           |  |  |  |     |   adda.l d0,a1
   16d62:	|           |  |  |  |     |   movea.l 1c928 <currentFloor>,a0
   16d68:	|           |  |  |  |     |   move.l 12(a0),d1
   16d6c:	|           |  |  |  |     |   move.l 136(sp),d0
   16d70:	|           |  |  |  |     |   lsl.l #3,d0
   16d72:	|           |  |  |  |     |   movea.l d1,a0
   16d74:	|           |  |  |  |     |   adda.l d0,a0
   16d76:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   16d7a:	|           |  |  |  |     |   move.l (a1),-(sp)
   16d7c:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   16d80:	|           |  |  |  |     |   move.l (a0),-(sp)
   16d82:	|           |  |  |  |     |   jsr 1660e <polysShareSide>
   16d88:	|           |  |  |  |     |   lea 16(sp),sp
   16d8c:	|           |  |  |  |     |   tst.w d0
   16d8e:	|           |  |  |  |  ,--|-- beq.w 16e22 <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   16d92:	|           |  |  |  |  |  |   movea.l 1c928 <currentFloor>,a0
   16d98:	|           |  |  |  |  |  |   move.l 16(a0),d1
   16d9c:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16da0:	|           |  |  |  |  |  |   add.l d0,d0
   16da2:	|           |  |  |  |  |  |   add.l d0,d0
   16da4:	|           |  |  |  |  |  |   movea.l d1,a0
   16da6:	|           |  |  |  |  |  |   adda.l d0,a0
   16da8:	|           |  |  |  |  |  |   move.l (a0),d1
   16daa:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16dae:	|           |  |  |  |  |  |   add.l d0,d0
   16db0:	|           |  |  |  |  |  |   add.l d0,d0
   16db2:	|           |  |  |  |  |  |   movea.l d1,a0
   16db4:	|           |  |  |  |  |  |   adda.l d0,a0
   16db6:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   16dba:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16dbe:	|           |  |  |  |  |  |   add.l d0,d0
   16dc0:	|           |  |  |  |  |  |   add.l d0,d0
   16dc2:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   16dc6:	|           |  |  |  |  |  |   adda.l d0,a0
   16dc8:	|           |  |  |  |  |  |   move.l (a0),d1
   16dca:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16dce:	|           |  |  |  |  |  |   add.l d0,d0
   16dd0:	|           |  |  |  |  |  |   add.l d0,d0
   16dd2:	|           |  |  |  |  |  |   movea.l d1,a0
   16dd4:	|           |  |  |  |  |  |   adda.l d0,a0
   16dd6:	|           |  |  |  |  |  |   moveq #1,d1
   16dd8:	|           |  |  |  |  |  |   move.l d1,(a0)
   16dda:	|           |  |  |  |  +--|-- bra.s 16e22 <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   16ddc:	|           |  |  |  |  |  '-> movea.l 1c928 <currentFloor>,a0
   16de2:	|           |  |  |  |  |      move.l 16(a0),d1
   16de6:	|           |  |  |  |  |      move.l 136(sp),d0
   16dea:	|           |  |  |  |  |      add.l d0,d0
   16dec:	|           |  |  |  |  |      add.l d0,d0
   16dee:	|           |  |  |  |  |      movea.l d1,a0
   16df0:	|           |  |  |  |  |      adda.l d0,a0
   16df2:	|           |  |  |  |  |      move.l (a0),d1
   16df4:	|           |  |  |  |  |      move.l 132(sp),d0
   16df8:	|           |  |  |  |  |      add.l d0,d0
   16dfa:	|           |  |  |  |  |      add.l d0,d0
   16dfc:	|           |  |  |  |  |      movea.l d1,a0
   16dfe:	|           |  |  |  |  |      adda.l d0,a0
   16e00:	|           |  |  |  |  |      moveq #-2,d0
   16e02:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   16e04:	|           |  |  |  |  |      move.l 136(sp),d0
   16e08:	|           |  |  |  |  |      add.l d0,d0
   16e0a:	|           |  |  |  |  |      add.l d0,d0
   16e0c:	|           |  |  |  |  |      movea.l 62(sp),a0
   16e10:	|           |  |  |  |  |      adda.l d0,a0
   16e12:	|           |  |  |  |  |      move.l (a0),d1
   16e14:	|           |  |  |  |  |      move.l 132(sp),d0
   16e18:	|           |  |  |  |  |      add.l d0,d0
   16e1a:	|           |  |  |  |  |      add.l d0,d0
   16e1c:	|           |  |  |  |  |      movea.l d1,a0
   16e1e:	|           |  |  |  |  |      adda.l d0,a0
   16e20:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16e22:	|           |  |  |  |  '----> addq.l #1,132(sp)
   16e26:	|           |  |  |  '-------> movea.l 1c928 <currentFloor>,a0
   16e2c:	|           |  |  |            move.l 8(a0),d0
   16e30:	|           |  |  |            cmp.l 132(sp),d0
   16e34:	|           |  |  '----------- bgt.w 16d42 <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16e38:	|           |  |               addq.l #1,136(sp)
   16e3c:	|           |  '-------------> movea.l 1c928 <currentFloor>,a0
   16e42:	|           |                  move.l 8(a0),d0
   16e46:	|           |                  cmp.l 136(sp),d0
   16e4a:	|           '----------------- bgt.w 16d3a <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   16e4e:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   16e52:	|  ,-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   16e56:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16e5a:	|  |                           clr.l 136(sp)
   16e5e:	|  |     ,-------------------- bra.w 16fb4 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16e62:	|  |  ,--|-------------------> clr.l 132(sp)
   16e66:	|  |  |  |     ,-------------- bra.w 16f9e <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   16e6a:	|  |  |  |  ,--|-------------> movea.l 1c928 <currentFloor>,a0
   16e70:	|  |  |  |  |  |               move.l 16(a0),d1
   16e74:	|  |  |  |  |  |               move.l 136(sp),d0
   16e78:	|  |  |  |  |  |               add.l d0,d0
   16e7a:	|  |  |  |  |  |               add.l d0,d0
   16e7c:	|  |  |  |  |  |               movea.l d1,a0
   16e7e:	|  |  |  |  |  |               adda.l d0,a0
   16e80:	|  |  |  |  |  |               move.l (a0),d1
   16e82:	|  |  |  |  |  |               move.l 132(sp),d0
   16e86:	|  |  |  |  |  |               add.l d0,d0
   16e88:	|  |  |  |  |  |               add.l d0,d0
   16e8a:	|  |  |  |  |  |               movea.l d1,a0
   16e8c:	|  |  |  |  |  |               adda.l d0,a0
   16e8e:	|  |  |  |  |  |               move.l (a0),d0
   16e90:	|  |  |  |  |  |               moveq #-1,d1
   16e92:	|  |  |  |  |  |               cmp.l d0,d1
   16e94:	|  |  |  |  |  |  ,----------- bne.w 16f9a <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   16e98:	|  |  |  |  |  |  |            clr.l 122(sp)
   16e9c:	|  |  |  |  |  |  |     ,----- bra.w 16f88 <setFloor+0x6d2>
						if (d != i && d != j) {
   16ea0:	|  |  |  |  |  |  |  ,--|----> move.l 122(sp),d0
   16ea4:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   16ea8:	|  |  |  |  |  |  |  |  |  ,-- beq.w 16f84 <setFloor+0x6ce>
   16eac:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   16eb0:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   16eb4:	|  |  |  |  |  |  |  |  |  +-- beq.w 16f84 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   16eb8:	|  |  |  |  |  |  |  |  |  |   movea.l 1c928 <currentFloor>,a0
   16ebe:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16ec2:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16ec6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ec8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16eca:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16ecc:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16ece:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16ed0:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16ed4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ed6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ed8:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16eda:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16edc:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   16ede:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   16ee2:	|  |  |  |  |  |  |  |  |  +-- bne.w 16f84 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   16ee6:	|  |  |  |  |  |  |  |  |  |   movea.l 1c928 <currentFloor>,a0
   16eec:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16ef0:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16ef4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ef6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ef8:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16efa:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16efc:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16efe:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16f02:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f04:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f06:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16f08:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16f0a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   16f0c:	|  |  |  |  |  |  |  |  |  +-- bmi.s 16f84 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   16f0e:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16f12:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f14:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f16:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   16f1a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16f1c:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16f1e:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16f22:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f24:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f26:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16f28:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16f2a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   16f2c:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   16f30:	|  |  |  |  |  |  |  |  |  +-- bgt.s 16f84 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   16f32:	|  |  |  |  |  |  |  |  |  |   movea.l 1c928 <currentFloor>,a0
   16f38:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16f3c:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16f40:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f42:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f44:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16f46:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16f48:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16f4a:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16f4e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f50:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f52:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16f54:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16f56:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   16f5a:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16f5e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f60:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f62:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   16f66:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16f68:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16f6a:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16f6e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f70:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f72:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16f74:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16f76:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   16f7a:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   16f7c:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   16f7e:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   16f84:	|  |  |  |  |  |  |  |  |  '-> addq.l #1,122(sp)
   16f88:	|  |  |  |  |  |  |  |  '----> movea.l 1c928 <currentFloor>,a0
   16f8e:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   16f92:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   16f96:	|  |  |  |  |  |  |  '-------- bgt.w 16ea0 <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16f9a:	|  |  |  |  |  |  '----------> addq.l #1,132(sp)
   16f9e:	|  |  |  |  |  '-------------> movea.l 1c928 <currentFloor>,a0
   16fa4:	|  |  |  |  |                  move.l 8(a0),d0
   16fa8:	|  |  |  |  |                  cmp.l 132(sp),d0
   16fac:	|  |  |  |  '----------------- bgt.w 16e6a <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16fb0:	|  |  |  |                     addq.l #1,136(sp)
   16fb4:	|  |  |  '-------------------> movea.l 1c928 <currentFloor>,a0
   16fba:	|  |  |                        move.l 8(a0),d0
   16fbe:	|  |  |                        cmp.l 136(sp),d0
   16fc2:	|  |  '----------------------- bgt.w 16e62 <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   16fc6:	|  |                           tst.w 130(sp)
   16fca:	|  '-------------------------- bne.w 16e52 <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16fce:	|                              clr.l 136(sp)
   16fd2:	|                          ,-- bra.s 16ffa <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   16fd4:	|                       ,--|-> move.l 136(sp),d0
   16fd8:	|                       |  |   add.l d0,d0
   16fda:	|                       |  |   add.l d0,d0
   16fdc:	|                       |  |   movea.l 62(sp),a0
   16fe0:	|                       |  |   adda.l d0,a0
   16fe2:	|                       |  |   move.l (a0),54(sp)
   16fe6:	|                       |  |   move.l 1c810 <SysBase>,d0
   16fec:	|                       |  |   movea.l d0,a6
   16fee:	|                       |  |   movea.l 54(sp),a1
   16ff2:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16ff6:	|                       |  |   addq.l #1,136(sp)
   16ffa:	|                       |  '-> movea.l 1c928 <currentFloor>,a0
   17000:	|                       |      move.l 8(a0),d0
   17004:	|                       |      cmp.l 136(sp),d0
   17008:	|                       '----- bgt.s 16fd4 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   1700a:	|                              move.l 62(sp),58(sp)
   17010:	|                              move.l 1c810 <SysBase>,d0
   17016:	|                              movea.l d0,a6
   17018:	|                              movea.l 58(sp),a1
   1701c:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   17020:	|                              clr.l 62(sp)

	return TRUE;
   17024:	|                              moveq #1,d0
}
   17026:	'----------------------------> movea.l (sp)+,a2
   17028:	                               movea.l (sp)+,a6
   1702a:	                               lea 132(sp),sp
   1702e:	                               rts

00017030 <setFloorNull>:

void setFloorNull () {
	killFloor ();
   17030:	jsr 1651e <killFloor>
	noFloor ();
   17036:	jsr 16442 <noFloor>
   1703c:	nop
   1703e:	rts

00017040 <WaitVbl>:
void WaitVbl() {
   17040:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   17042:	   ,-> movea.l #14675972,a0
   17048:	   |   move.l (a0),d0
   1704a:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   1704c:	   |   move.l (sp),d0
   1704e:	   |   andi.l #130816,d0
   17054:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   17056:	   |   move.l (sp),d0
   17058:	   |   cmpi.l #76800,d0
   1705e:	   '-- beq.s 17042 <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   17060:	,----> movea.l #14675972,a0
   17066:	|      move.l (a0),d0
   17068:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   1706c:	|      move.l 4(sp),d0
   17070:	|      andi.l #130816,d0
   17076:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   1707a:	|      move.l 4(sp),d0
   1707e:	|      cmpi.l #76800,d0
   17084:	|  ,-- beq.s 17088 <WaitVbl+0x48>
	while (1) {
   17086:	'--|-- bra.s 17060 <WaitVbl+0x20>
			break;
   17088:	   '-> nop
}
   1708a:	       nop
   1708c:	       addq.l #8,sp
   1708e:	       rts

00017090 <memset>:
void* memset(void *dest, int val, unsigned long len) {
   17090:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   17092:	       move.l 8(sp),(sp)
	while(len-- > 0)
   17096:	   ,-- bra.s 170a8 <memset+0x18>
		*ptr++ = val;
   17098:	,--|-> move.l (sp),d0
   1709a:	|  |   move.l d0,d1
   1709c:	|  |   addq.l #1,d1
   1709e:	|  |   move.l d1,(sp)
   170a0:	|  |   move.l 12(sp),d1
   170a4:	|  |   movea.l d0,a0
   170a6:	|  |   move.b d1,(a0)
	while(len-- > 0)
   170a8:	|  '-> move.l 16(sp),d0
   170ac:	|      move.l d0,d1
   170ae:	|      subq.l #1,d1
   170b0:	|      move.l d1,16(sp)
   170b4:	|      tst.l d0
   170b6:	'----- bne.s 17098 <memset+0x8>
	return dest;
   170b8:	       move.l 8(sp),d0
}
   170bc:	       addq.l #4,sp
   170be:	       rts

000170c0 <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   170c0:	       subq.l #8,sp
   170c2:	       move.l d2,-(sp)
	char *d = (char *)dest;
   170c4:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   170ca:	       move.l 20(sp),4(sp)
	while(len--)
   170d0:	   ,-- bra.s 170f2 <memcpy+0x32>
		*d++ = *s++;
   170d2:	,--|-> move.l 4(sp),d1
   170d6:	|  |   move.l d1,d0
   170d8:	|  |   addq.l #1,d0
   170da:	|  |   move.l d0,4(sp)
   170de:	|  |   move.l 8(sp),d0
   170e2:	|  |   move.l d0,d2
   170e4:	|  |   addq.l #1,d2
   170e6:	|  |   move.l d2,8(sp)
   170ea:	|  |   movea.l d1,a0
   170ec:	|  |   move.b (a0),d1
   170ee:	|  |   movea.l d0,a0
   170f0:	|  |   move.b d1,(a0)
	while(len--)
   170f2:	|  '-> move.l 24(sp),d0
   170f6:	|      move.l d0,d1
   170f8:	|      subq.l #1,d1
   170fa:	|      move.l d1,24(sp)
   170fe:	|      tst.l d0
   17100:	'----- bne.s 170d2 <memcpy+0x12>
	return dest;
   17102:	       move.l 16(sp),d0
}
   17106:	       move.l (sp)+,d2
   17108:	       addq.l #8,sp
   1710a:	       rts

0001710c <KPrintF>:
void KPrintF(const char* fmt, ...) {
   1710c:	       lea -128(sp),sp
   17110:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   17114:	       move.w f0ff60 <gcc8_c_support.c.c60c1f2b+0xec4d24>,d0
   1711a:	       cmpi.w #20153,d0
   1711e:	   ,-- beq.s 17142 <KPrintF+0x36>
   17120:	   |   cmpi.w #-24562,d0
   17124:	   +-- beq.s 17142 <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   17126:	   |   movea.l 1c810 <SysBase>,a6
   1712c:	   |   movea.l 144(sp),a0
   17130:	   |   lea 148(sp),a1
   17134:	   |   lea 17ba0 <KPutCharX>,a2
   1713a:	   |   suba.l a3,a3
   1713c:	   |   jsr -522(a6)
}
   17140:	,--|-- bra.s 1716c <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   17142:	|  '-> movea.l 1c810 <SysBase>,a6
   17148:	|      movea.l 144(sp),a0
   1714c:	|      lea 148(sp),a1
   17150:	|      lea 17bae <PutChar>,a2
   17156:	|      lea 12(sp),a3
   1715a:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   1715e:	|      move.l a3,-(sp)
   17160:	|      pea 56 <_start+0x56>
   17164:	|      jsr f0ff60 <gcc8_c_support.c.c60c1f2b+0xec4d24>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   1716a:	|      addq.l #8,sp
}
   1716c:	'----> movem.l (sp)+,a2-a3/a6
   17170:	       lea 128(sp),sp
   17174:	       rts

00017176 <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   17176:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   17178:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   1717e:	       movea.l (sp),a0
   17180:	       move.w (a0),d0
   17182:	       cmpi.w #20153,d0
   17186:	   ,-- beq.s 17192 <debug_cmd+0x1c>
   17188:	   |   movea.l (sp),a0
   1718a:	   |   move.w (a0),d0
   1718c:	   |   cmpi.w #-24562,d0
   17190:	,--|-- bne.s 171b0 <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   17192:	|  '-> move.l 20(sp),-(sp)
   17196:	|      move.l 20(sp),-(sp)
   1719a:	|      move.l 20(sp),-(sp)
   1719e:	|      move.l 20(sp),-(sp)
   171a2:	|      pea 58 <_start+0x58>
   171a6:	|      movea.l 20(sp),a0
   171aa:	|      jsr (a0)
   171ac:	|      lea 20(sp),sp
	}
}
   171b0:	'----> nop
   171b2:	       addq.l #4,sp
   171b4:	       rts

000171b6 <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   171b6:	       move.l d2,-(sp)
	while(*source && --num > 0)
   171b8:	   ,-- bra.s 171da <my_strncpy+0x24>
		*destination++ = *source++;
   171ba:	,--|-> move.l 12(sp),d1
   171be:	|  |   move.l d1,d0
   171c0:	|  |   addq.l #1,d0
   171c2:	|  |   move.l d0,12(sp)
   171c6:	|  |   move.l 8(sp),d0
   171ca:	|  |   move.l d0,d2
   171cc:	|  |   addq.l #1,d2
   171ce:	|  |   move.l d2,8(sp)
   171d2:	|  |   movea.l d1,a0
   171d4:	|  |   move.b (a0),d1
   171d6:	|  |   movea.l d0,a0
   171d8:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   171da:	|  '-> movea.l 12(sp),a0
   171de:	|      move.b (a0),d0
   171e0:	|  ,-- beq.s 171e8 <my_strncpy+0x32>
   171e2:	|  |   subq.l #1,16(sp)
   171e6:	'--|-- bne.s 171ba <my_strncpy+0x4>
	*destination = '\0';
   171e8:	   '-> movea.l 8(sp),a0
   171ec:	       clr.b (a0)
}
   171ee:	       nop
   171f0:	       move.l (sp)+,d2
   171f2:	       rts

000171f4 <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   171f4:	    lea -60(sp),sp
   171f8:	    movea.l 72(sp),a1
   171fc:	    movea.l 76(sp),a0
   17200:	    move.l 80(sp),d1
   17204:	    move.l 84(sp),d0
   17208:	    movea.w a1,a1
   1720a:	    move.w a1,8(sp)
   1720e:	    movea.w a0,a0
   17210:	    move.w a0,6(sp)
   17214:	    move.w d1,d1
   17216:	    move.w d1,4(sp)
   1721a:	    move.w d0,d0
   1721c:	    move.w d0,2(sp)
	struct debug_resource resource = {
   17220:	    lea 10(sp),a0
   17224:	    clr.l (a0)
   17226:	    addq.l #4,a0
   17228:	    clr.l (a0)
   1722a:	    addq.l #4,a0
   1722c:	    clr.l (a0)
   1722e:	    addq.l #4,a0
   17230:	    clr.l (a0)
   17232:	    addq.l #4,a0
   17234:	    clr.l (a0)
   17236:	    addq.l #4,a0
   17238:	    clr.l (a0)
   1723a:	    addq.l #4,a0
   1723c:	    clr.l (a0)
   1723e:	    addq.l #4,a0
   17240:	    clr.l (a0)
   17242:	    addq.l #4,a0
   17244:	    clr.l (a0)
   17246:	    addq.l #4,a0
   17248:	    clr.l (a0)
   1724a:	    addq.l #4,a0
   1724c:	    clr.l (a0)
   1724e:	    addq.l #4,a0
   17250:	    clr.l (a0)
   17252:	    addq.l #4,a0
   17254:	    clr.w (a0)
   17256:	    addq.l #2,a0
		.address = (unsigned int)addr,
   17258:	    move.l 64(sp),d0
	struct debug_resource resource = {
   1725c:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   17260:	    move.w 8(sp),d0
   17264:	,-- bpl.s 17268 <debug_register_bitmap+0x74>
   17266:	|   addq.w #7,d0
   17268:	'-> asr.w #3,d0
   1726a:	    movea.w d0,a0
   1726c:	    movea.w 6(sp),a1
   17270:	    move.l a1,-(sp)
   17272:	    move.l a0,-(sp)
   17274:	    jsr 17a98 <__mulsi3>
   1727a:	    addq.l #8,sp
   1727c:	    movea.w 4(sp),a0
   17280:	    move.l a0,-(sp)
   17282:	    move.l d0,-(sp)
   17284:	    jsr 17a98 <__mulsi3>
   1728a:	    addq.l #8,sp
	struct debug_resource resource = {
   1728c:	    move.l d0,14(sp)
   17290:	    move.w 2(sp),52(sp)
   17296:	    move.w 8(sp),54(sp)
   1729c:	    move.w 6(sp),56(sp)
   172a2:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   172a8:	    moveq #0,d0
   172aa:	    move.w 2(sp),d0
   172ae:	    moveq #2,d1
   172b0:	    and.l d1,d0
   172b2:	,-- beq.s 172be <debug_register_bitmap+0xca>
		resource.size *= 2;
   172b4:	|   move.l 14(sp),d0
   172b8:	|   add.l d0,d0
   172ba:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   172be:	'-> pea 20 <_start+0x20>
   172c2:	    move.l 72(sp),-(sp)
   172c6:	    lea 18(sp),a0
   172ca:	    move.l a0,d0
   172cc:	    addq.l #8,d0
   172ce:	    move.l d0,-(sp)
   172d0:	    jsr 171b6 <my_strncpy>
   172d6:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   172da:	    lea 10(sp),a0
   172de:	    clr.l -(sp)
   172e0:	    clr.l -(sp)
   172e2:	    move.l a0,-(sp)
   172e4:	    pea 4 <_start+0x4>
   172e8:	    jsr 17176 <debug_cmd>
   172ee:	    lea 16(sp),sp
}
   172f2:	    nop
   172f4:	    lea 60(sp),sp
   172f8:	    rts

000172fa <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   172fa:	lea -12(sp),sp
   172fe:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   17300:	move.l 20(sp),12(sp)
   17306:	move.l 24(sp),8(sp)
   1730c:	move.l 1c820 <MathIeeeSingBasBase>,d0
   17312:	movea.l d0,a6
   17314:	move.l 12(sp),d0
   17318:	move.l 8(sp),d1
   1731c:	jsr -66(a6)
   17320:	move.l d0,4(sp)
   17324:	move.l 4(sp),d0
}
   17328:	movea.l (sp)+,a6
   1732a:	lea 12(sp),sp
   1732e:	rts

00017330 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   17330:	lea -32(sp),sp
   17334:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   17338:	move.l 48(sp),36(sp)
   1733e:	move.l 52(sp),40(sp)
   17344:	move.l 56(sp),28(sp)
   1734a:	move.l 60(sp),32(sp)
   17350:	move.l 1c828 <MathIeeeDoubBasBase>,d0
   17356:	movea.l d0,a6
   17358:	move.l 36(sp),d0
   1735c:	move.l 40(sp),d1
   17360:	move.l 28(sp),d2
   17364:	move.l 32(sp),d3
   17368:	jsr -66(a6)
   1736c:	move.l d0,12(sp)
   17370:	move.l d1,16(sp)
   17374:	move.l 12(sp),20(sp)
   1737a:	move.l 16(sp),24(sp)
   17380:	move.l 20(sp),d0
   17384:	move.l 24(sp),d1
}
   17388:	movem.l (sp)+,d2-d3/a6
   1738c:	lea 32(sp),sp
   17390:	rts

00017392 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   17392:	lea -32(sp),sp
   17396:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   1739a:	move.l 48(sp),36(sp)
   173a0:	move.l 52(sp),40(sp)
   173a6:	move.l 56(sp),28(sp)
   173ac:	move.l 60(sp),32(sp)
   173b2:	move.l 1c828 <MathIeeeDoubBasBase>,d0
   173b8:	movea.l d0,a6
   173ba:	move.l 36(sp),d0
   173be:	move.l 40(sp),d1
   173c2:	move.l 28(sp),d2
   173c6:	move.l 32(sp),d3
   173ca:	jsr -84(a6)
   173ce:	move.l d0,12(sp)
   173d2:	move.l d1,16(sp)
   173d6:	move.l 12(sp),20(sp)
   173dc:	move.l 16(sp),24(sp)
   173e2:	move.l 20(sp),d0
   173e6:	move.l 24(sp),d1
}
   173ea:	movem.l (sp)+,d2-d3/a6
   173ee:	lea 32(sp),sp
   173f2:	rts

000173f4 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   173f4:	lea -12(sp),sp
   173f8:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   173fa:	move.l 20(sp),12(sp)
   17400:	move.l 24(sp),8(sp)
   17406:	move.l 1c820 <MathIeeeSingBasBase>,d0
   1740c:	movea.l d0,a6
   1740e:	move.l 12(sp),d0
   17412:	move.l 8(sp),d1
   17416:	jsr -84(a6)
   1741a:	move.l d0,4(sp)
   1741e:	move.l 4(sp),d0
}
   17422:	movea.l (sp)+,a6
   17424:	lea 12(sp),sp
   17428:	rts

0001742a <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   1742a:	lea -12(sp),sp
   1742e:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17430:	move.l 20(sp),12(sp)
   17436:	move.l 24(sp),8(sp)
   1743c:	move.l 1c820 <MathIeeeSingBasBase>,d0
   17442:	movea.l d0,a6
   17444:	move.l 12(sp),d0
   17448:	move.l 8(sp),d1
   1744c:	jsr -42(a6)
   17450:	move.l d0,4(sp)
   17454:	move.l 4(sp),d0
}
   17458:	movea.l (sp)+,a6
   1745a:	lea 12(sp),sp
   1745e:	rts

00017460 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   17460:	lea -20(sp),sp
   17464:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   17466:	move.l 28(sp),20(sp)
   1746c:	move.l 1c82c <MathIeeeDoubTransBase>,d0
   17472:	movea.l d0,a6
   17474:	move.l 20(sp),d0
   17478:	jsr -108(a6)
   1747c:	move.l d0,4(sp)
   17480:	move.l d1,8(sp)
   17484:	move.l 4(sp),12(sp)
   1748a:	move.l 8(sp),16(sp)
   17490:	move.l 12(sp),d0
   17494:	move.l 16(sp),d1
}
   17498:	movea.l (sp)+,a6
   1749a:	lea 20(sp),sp
   1749e:	rts

000174a0 <__fixdfsi>:

LONG __fixdfsi(DOUBLE value) {
   174a0:	lea -12(sp),sp
   174a4:	move.l a6,-(sp)
	return IEEEDPFix(value);
   174a6:	move.l 20(sp),8(sp)
   174ac:	move.l 24(sp),12(sp)
   174b2:	move.l 1c828 <MathIeeeDoubBasBase>,d0
   174b8:	movea.l d0,a6
   174ba:	move.l 8(sp),d0
   174be:	move.l 12(sp),d1
   174c2:	jsr -30(a6)
   174c6:	move.l d0,4(sp)
   174ca:	move.l 4(sp),d0
}
   174ce:	movea.l (sp)+,a6
   174d0:	lea 12(sp),sp
   174d4:	rts

000174d6 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   174d6:	subq.l #8,sp
   174d8:	move.l a6,-(sp)
	return IEEESPFix(value);
   174da:	move.l 16(sp),8(sp)
   174e0:	move.l 1c820 <MathIeeeSingBasBase>,d0
   174e6:	movea.l d0,a6
   174e8:	move.l 8(sp),d0
   174ec:	jsr -30(a6)
   174f0:	move.l d0,4(sp)
   174f4:	move.l 4(sp),d0
}
   174f8:	movea.l (sp)+,a6
   174fa:	addq.l #8,sp
   174fc:	rts

000174fe <__floatsidf>:


DOUBLE __floatsidf (int i) {
   174fe:	lea -20(sp),sp
   17502:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   17504:	move.l 28(sp),20(sp)
   1750a:	move.l 1c828 <MathIeeeDoubBasBase>,d0
   17510:	movea.l d0,a6
   17512:	move.l 20(sp),d0
   17516:	jsr -36(a6)
   1751a:	move.l d0,4(sp)
   1751e:	move.l d1,8(sp)
   17522:	move.l 4(sp),12(sp)
   17528:	move.l 8(sp),16(sp)
   1752e:	move.l 12(sp),d0
   17532:	move.l 16(sp),d1
}
   17536:	movea.l (sp)+,a6
   17538:	lea 20(sp),sp
   1753c:	rts

0001753e <__floatsisf>:

FLOAT __floatsisf(int i) {
   1753e:	subq.l #8,sp
   17540:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   17542:	move.l 16(sp),8(sp)
   17548:	move.l 1c820 <MathIeeeSingBasBase>,d0
   1754e:	movea.l d0,a6
   17550:	move.l 8(sp),d0
   17554:	jsr -36(a6)
   17558:	move.l d0,4(sp)
   1755c:	move.l 4(sp),d0
}
   17560:	movea.l (sp)+,a6
   17562:	addq.l #8,sp
   17564:	rts

00017566 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   17566:	subq.l #8,sp
   17568:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   1756a:	move.l 16(sp),8(sp)
   17570:	move.l 1c820 <MathIeeeSingBasBase>,d0
   17576:	movea.l d0,a6
   17578:	move.l 8(sp),d0
   1757c:	jsr -36(a6)
   17580:	move.l d0,4(sp)
   17584:	move.l 4(sp),d0
}
   17588:	movea.l (sp)+,a6
   1758a:	addq.l #8,sp
   1758c:	rts

0001758e <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   1758e:	lea -32(sp),sp
   17592:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   17596:	move.l 48(sp),36(sp)
   1759c:	move.l 52(sp),40(sp)
   175a2:	move.l 56(sp),28(sp)
   175a8:	move.l 60(sp),32(sp)
   175ae:	move.l 1c828 <MathIeeeDoubBasBase>,d0
   175b4:	movea.l d0,a6
   175b6:	move.l 36(sp),d0
   175ba:	move.l 40(sp),d1
   175be:	move.l 28(sp),d2
   175c2:	move.l 32(sp),d3
   175c6:	jsr -78(a6)
   175ca:	move.l d0,12(sp)
   175ce:	move.l d1,16(sp)
   175d2:	move.l 12(sp),20(sp)
   175d8:	move.l 16(sp),24(sp)
   175de:	move.l 20(sp),d0
   175e2:	move.l 24(sp),d1
}
   175e6:	movem.l (sp)+,d2-d3/a6
   175ea:	lea 32(sp),sp
   175ee:	rts

000175f0 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   175f0:	lea -12(sp),sp
   175f4:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   175f6:	move.l 20(sp),12(sp)
   175fc:	move.l 24(sp),8(sp)
   17602:	move.l 1c820 <MathIeeeSingBasBase>,d0
   17608:	movea.l d0,a6
   1760a:	move.l 12(sp),d0
   1760e:	move.l 8(sp),d1
   17612:	jsr -78(a6)
   17616:	move.l d0,4(sp)
   1761a:	move.l 4(sp),d0
}
   1761e:	movea.l (sp)+,a6
   17620:	lea 12(sp),sp
   17624:	rts

00017626 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   17626:	lea -12(sp),sp
   1762a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1762c:	move.l 20(sp),12(sp)
   17632:	move.l 24(sp),8(sp)
   17638:	move.l 1c820 <MathIeeeSingBasBase>,d0
   1763e:	movea.l d0,a6
   17640:	move.l 12(sp),d0
   17644:	move.l 8(sp),d1
   17648:	jsr -42(a6)
   1764c:	move.l d0,4(sp)
   17650:	move.l 4(sp),d0
}
   17654:	movea.l (sp)+,a6
   17656:	lea 12(sp),sp
   1765a:	rts

0001765c <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   1765c:	lea -20(sp),sp
   17660:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   17664:	move.l 36(sp),24(sp)
   1766a:	move.l 40(sp),28(sp)
   17670:	move.l 44(sp),16(sp)
   17676:	move.l 48(sp),20(sp)
   1767c:	move.l 1c828 <MathIeeeDoubBasBase>,d0
   17682:	movea.l d0,a6
   17684:	move.l 24(sp),d0
   17688:	move.l 28(sp),d1
   1768c:	move.l 16(sp),d2
   17690:	move.l 20(sp),d3
   17694:	jsr -42(a6)
   17698:	move.l d0,12(sp)
   1769c:	move.l 12(sp),d0
}
   176a0:	movem.l (sp)+,d2-d3/a6
   176a4:	lea 20(sp),sp
   176a8:	rts

000176aa <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   176aa:	lea -12(sp),sp
   176ae:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   176b0:	move.l 20(sp),12(sp)
   176b6:	move.l 24(sp),8(sp)
   176bc:	move.l 1c820 <MathIeeeSingBasBase>,d0
   176c2:	movea.l d0,a6
   176c4:	move.l 12(sp),d0
   176c8:	move.l 8(sp),d1
   176cc:	jsr -42(a6)
   176d0:	move.l d0,4(sp)
   176d4:	move.l 4(sp),d0
}
   176d8:	movea.l (sp)+,a6
   176da:	lea 12(sp),sp
   176de:	rts

000176e0 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   176e0:	lea -12(sp),sp
   176e4:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   176e6:	move.l 20(sp),12(sp)
   176ec:	move.l 24(sp),8(sp)
   176f2:	move.l 1c820 <MathIeeeSingBasBase>,d0
   176f8:	movea.l d0,a6
   176fa:	move.l 12(sp),d0
   176fe:	move.l 8(sp),d1
   17702:	jsr -42(a6)
   17706:	move.l d0,4(sp)
   1770a:	move.l 4(sp),d0
}
   1770e:	movea.l (sp)+,a6
   17710:	lea 12(sp),sp
   17714:	rts

00017716 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   17716:	lea -20(sp),sp
   1771a:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   1771e:	move.l 36(sp),24(sp)
   17724:	move.l 40(sp),28(sp)
   1772a:	move.l 44(sp),16(sp)
   17730:	move.l 48(sp),20(sp)
   17736:	move.l 1c828 <MathIeeeDoubBasBase>,d0
   1773c:	movea.l d0,a6
   1773e:	move.l 24(sp),d0
   17742:	move.l 28(sp),d1
   17746:	move.l 16(sp),d2
   1774a:	move.l 20(sp),d3
   1774e:	jsr -42(a6)
   17752:	move.l d0,12(sp)
   17756:	move.l 12(sp),d0
}
   1775a:	movem.l (sp)+,d2-d3/a6
   1775e:	lea 20(sp),sp
   17762:	rts

00017764 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   17764:	lea -12(sp),sp
   17768:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1776a:	move.l 20(sp),12(sp)
   17770:	move.l 24(sp),8(sp)
   17776:	move.l 1c820 <MathIeeeSingBasBase>,d0
   1777c:	movea.l d0,a6
   1777e:	move.l 12(sp),d0
   17782:	move.l 8(sp),d1
   17786:	jsr -42(a6)
   1778a:	move.l d0,4(sp)
   1778e:	move.l 4(sp),d0
}
   17792:	movea.l (sp)+,a6
   17794:	lea 12(sp),sp
   17798:	rts

0001779a <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   1779a:	lea -12(sp),sp
   1779e:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   177a0:	move.l 20(sp),12(sp)
   177a6:	move.l 24(sp),8(sp)
   177ac:	move.l 1c820 <MathIeeeSingBasBase>,d0
   177b2:	movea.l d0,a6
   177b4:	move.l 12(sp),d0
   177b8:	move.l 8(sp),d1
   177bc:	jsr -42(a6)
   177c0:	move.l d0,4(sp)
   177c4:	move.l 4(sp),d0
}
   177c8:	movea.l (sp)+,a6
   177ca:	lea 12(sp),sp
   177ce:	rts

000177d0 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   177d0:	lea -32(sp),sp
   177d4:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   177d8:	move.l 48(sp),36(sp)
   177de:	move.l 52(sp),40(sp)
   177e4:	move.l 56(sp),28(sp)
   177ea:	move.l 60(sp),32(sp)
   177f0:	move.l 1c828 <MathIeeeDoubBasBase>,d0
   177f6:	movea.l d0,a6
   177f8:	move.l 36(sp),d0
   177fc:	move.l 40(sp),d1
   17800:	move.l 28(sp),d2
   17804:	move.l 32(sp),d3
   17808:	jsr -72(a6)
   1780c:	move.l d0,12(sp)
   17810:	move.l d1,16(sp)
   17814:	move.l 12(sp),20(sp)
   1781a:	move.l 16(sp),24(sp)
   17820:	move.l 20(sp),d0
   17824:	move.l 24(sp),d1
}
   17828:	movem.l (sp)+,d2-d3/a6
   1782c:	lea 32(sp),sp
   17830:	rts

00017832 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   17832:	lea -12(sp),sp
   17836:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   17838:	move.l 20(sp),12(sp)
   1783e:	move.l 24(sp),8(sp)
   17844:	move.l 1c820 <MathIeeeSingBasBase>,d0
   1784a:	movea.l d0,a6
   1784c:	move.l 12(sp),d0
   17850:	move.l 8(sp),d1
   17854:	jsr -72(a6)
   17858:	move.l d0,4(sp)
   1785c:	move.l 4(sp),d0
}
   17860:	movea.l (sp)+,a6
   17862:	lea 12(sp),sp
   17866:	rts

00017868 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   17868:	lea -12(sp),sp
   1786c:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   1786e:	move.l 20(sp),8(sp)
   17874:	move.l 24(sp),12(sp)
   1787a:	move.l 1c82c <MathIeeeDoubTransBase>,d0
   17880:	movea.l d0,a6
   17882:	move.l 8(sp),d0
   17886:	move.l 12(sp),d1
   1788a:	jsr -102(a6)
   1788e:	move.l d0,4(sp)
   17892:	move.l 4(sp),d0
}
   17896:	movea.l (sp)+,a6
   17898:	lea 12(sp),sp
   1789c:	rts

0001789e <atan2f>:

unsigned int __fixunssfsi (float a) {
	return IEEESPFix(a);
}

FLOAT atan2f(FLOAT y, FLOAT x) {
   1789e:	       lea -24(sp),sp
   178a2:	       move.l a6,-(sp)
    if (x > 0) {
   178a4:	       clr.l -(sp)
   178a6:	       move.l 40(sp),-(sp)
   178aa:	       jsr 176aa <__gtsf2>
   178b0:	       addq.l #8,sp
   178b2:	       tst.l d0
   178b4:	   ,-- ble.s 178e6 <atan2f+0x48>
        return IEEESPAtan(y / x);
   178b6:	   |   move.l 36(sp),-(sp)
   178ba:	   |   move.l 36(sp),-(sp)
   178be:	   |   jsr 173f4 <__divsf3>
   178c4:	   |   addq.l #8,sp
   178c6:	   |   move.l d0,8(sp)
   178ca:	   |   move.l 1c824 <MathIeeeSingTransBase>,d0
   178d0:	   |   movea.l d0,a6
   178d2:	   |   move.l 8(sp),d0
   178d6:	   |   jsr -30(a6)
   178da:	   |   move.l d0,4(sp)
   178de:	   |   move.l 4(sp),d0
   178e2:	,--|-- bra.w 17a46 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   178e6:	|  '-> clr.l -(sp)
   178e8:	|      move.l 40(sp),-(sp)
   178ec:	|      jsr 17764 <__ltsf2>
   178f2:	|      addq.l #8,sp
   178f4:	|      tst.l d0
   178f6:	|  ,-- bge.s 1796a <atan2f+0xcc>
   178f8:	|  |   clr.l -(sp)
   178fa:	|  |   move.l 36(sp),-(sp)
   178fe:	|  |   jsr 17626 <__gesf2>
   17904:	|  |   addq.l #8,sp
   17906:	|  |   tst.l d0
   17908:	|  +-- blt.s 1796a <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   1790a:	|  |   move.l 36(sp),-(sp)
   1790e:	|  |   move.l 36(sp),-(sp)
   17912:	|  |   jsr 173f4 <__divsf3>
   17918:	|  |   addq.l #8,sp
   1791a:	|  |   move.l d0,24(sp)
   1791e:	|  |   move.l 1c824 <MathIeeeSingTransBase>,d0
   17924:	|  |   movea.l d0,a6
   17926:	|  |   move.l 24(sp),d0
   1792a:	|  |   jsr -30(a6)
   1792e:	|  |   move.l d0,20(sp)
   17932:	|  |   move.l 20(sp),d0
   17936:	|  |   move.l d0,-(sp)
   17938:	|  |   jsr 17460 <__extendsfdf2>
   1793e:	|  |   addq.l #4,sp
   17940:	|  |   move.l #1413754136,-(sp)
   17946:	|  |   move.l #1074340347,-(sp)
   1794c:	|  |   move.l d1,-(sp)
   1794e:	|  |   move.l d0,-(sp)
   17950:	|  |   jsr 17330 <__adddf3>
   17956:	|  |   lea 16(sp),sp
   1795a:	|  |   move.l d1,-(sp)
   1795c:	|  |   move.l d0,-(sp)
   1795e:	|  |   jsr 17868 <__truncdfsf2>
   17964:	|  |   addq.l #8,sp
   17966:	+--|-- bra.w 17a46 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   1796a:	|  '-> clr.l -(sp)
   1796c:	|      move.l 40(sp),-(sp)
   17970:	|      jsr 17764 <__ltsf2>
   17976:	|      addq.l #8,sp
   17978:	|      tst.l d0
   1797a:	|  ,-- bge.s 179ec <atan2f+0x14e>
   1797c:	|  |   clr.l -(sp)
   1797e:	|  |   move.l 36(sp),-(sp)
   17982:	|  |   jsr 17764 <__ltsf2>
   17988:	|  |   addq.l #8,sp
   1798a:	|  |   tst.l d0
   1798c:	|  +-- bge.s 179ec <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   1798e:	|  |   move.l 36(sp),-(sp)
   17992:	|  |   move.l 36(sp),-(sp)
   17996:	|  |   jsr 173f4 <__divsf3>
   1799c:	|  |   addq.l #8,sp
   1799e:	|  |   move.l d0,16(sp)
   179a2:	|  |   move.l 1c824 <MathIeeeSingTransBase>,d0
   179a8:	|  |   movea.l d0,a6
   179aa:	|  |   move.l 16(sp),d0
   179ae:	|  |   jsr -30(a6)
   179b2:	|  |   move.l d0,12(sp)
   179b6:	|  |   move.l 12(sp),d0
   179ba:	|  |   move.l d0,-(sp)
   179bc:	|  |   jsr 17460 <__extendsfdf2>
   179c2:	|  |   addq.l #4,sp
   179c4:	|  |   move.l #1413754136,-(sp)
   179ca:	|  |   move.l #1074340347,-(sp)
   179d0:	|  |   move.l d1,-(sp)
   179d2:	|  |   move.l d0,-(sp)
   179d4:	|  |   jsr 177d0 <__subdf3>
   179da:	|  |   lea 16(sp),sp
   179de:	|  |   move.l d1,-(sp)
   179e0:	|  |   move.l d0,-(sp)
   179e2:	|  |   jsr 17868 <__truncdfsf2>
   179e8:	|  |   addq.l #8,sp
   179ea:	+--|-- bra.s 17a46 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   179ec:	|  '-> clr.l -(sp)
   179ee:	|      move.l 40(sp),-(sp)
   179f2:	|      jsr 1742a <__eqsf2>
   179f8:	|      addq.l #8,sp
   179fa:	|      tst.l d0
   179fc:	|  ,-- bne.s 17a18 <atan2f+0x17a>
   179fe:	|  |   clr.l -(sp)
   17a00:	|  |   move.l 36(sp),-(sp)
   17a04:	|  |   jsr 176aa <__gtsf2>
   17a0a:	|  |   addq.l #8,sp
   17a0c:	|  |   tst.l d0
   17a0e:	|  +-- ble.s 17a18 <atan2f+0x17a>
        return PI / 2;
   17a10:	|  |   move.l #1070141403,d0
   17a16:	+--|-- bra.s 17a46 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   17a18:	|  '-> clr.l -(sp)
   17a1a:	|      move.l 40(sp),-(sp)
   17a1e:	|      jsr 1742a <__eqsf2>
   17a24:	|      addq.l #8,sp
   17a26:	|      tst.l d0
   17a28:	|  ,-- bne.s 17a44 <atan2f+0x1a6>
   17a2a:	|  |   clr.l -(sp)
   17a2c:	|  |   move.l 36(sp),-(sp)
   17a30:	|  |   jsr 17764 <__ltsf2>
   17a36:	|  |   addq.l #8,sp
   17a38:	|  |   tst.l d0
   17a3a:	|  +-- bge.s 17a44 <atan2f+0x1a6>
        return -PI / 2;
   17a3c:	|  |   move.l #-1077342245,d0
   17a42:	+--|-- bra.s 17a46 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   17a44:	|  '-> moveq #0,d0
    }
}
   17a46:	'----> movea.l (sp)+,a6
   17a48:	       lea 24(sp),sp
   17a4c:	       rts

00017a4e <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   17a4e:	lea -24(sp),sp
   17a52:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   17a54:	move.l 32(sp),20(sp)
   17a5a:	move.l 36(sp),24(sp)
   17a60:	move.l 1c82c <MathIeeeDoubTransBase>,d0
   17a66:	movea.l d0,a6
   17a68:	move.l 20(sp),d0
   17a6c:	move.l 24(sp),d1
   17a70:	jsr -96(a6)
   17a74:	move.l d0,4(sp)
   17a78:	move.l d1,8(sp)
   17a7c:	move.l 4(sp),12(sp)
   17a82:	move.l 8(sp),16(sp)
   17a88:	move.l 12(sp),d0
   17a8c:	move.l 16(sp),d1
}
   17a90:	movea.l (sp)+,a6
   17a92:	lea 24(sp),sp
   17a96:	rts

00017a98 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   17a98:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   17a9c:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17aa0:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   17aa4:	mulu.w 8(sp),d1
	addw	d1, d0
   17aa8:	add.w d1,d0
	swap	d0
   17aaa:	swap d0
	clrw	d0
   17aac:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17aae:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   17ab2:	mulu.w 10(sp),d1
	addl	d1, d0
   17ab6:	add.l d1,d0
	rts
   17ab8:	rts

00017aba <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   17aba:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   17abc:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   17ac0:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   17ac4:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   17aca:	   ,-- bcc.s 17ae2 <__udivsi3+0x28>
	movel	d0, d2
   17acc:	   |   move.l d0,d2
	clrw	d2
   17ace:	   |   clr.w d2
	swap	d2
   17ad0:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   17ad2:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   17ad4:	   |   move.w d2,d0
	swap	d0
   17ad6:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   17ad8:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   17adc:	   |   divu.w d1,d2
	movew	d2, d0
   17ade:	   |   move.w d2,d0
	jra	6f
   17ae0:	,--|-- bra.s 17b12 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   17ae2:	|  '-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   17ae4:	|  ,-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   17ae6:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   17ae8:	|  |   cmpi.l #65536,d1
	jcc	4b
   17aee:	|  '-- bcc.s 17ae4 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   17af0:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   17af2:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   17af8:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   17afa:	|      mulu.w d0,d1
	swap	d2
   17afc:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   17afe:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   17b00:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   17b02:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   17b04:	|  ,-- bne.s 17b10 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   17b06:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   17b08:	|  +-- bcs.s 17b10 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   17b0a:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   17b0e:	+--|-- bls.s 17b12 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   17b10:	|  '-> subq.l #1,d0

6:	movel	sp@+, d2
   17b12:	'----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17b14:	       rts

00017b16 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   17b16:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   17b18:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   17b1a:	    move.l 12(sp),d1
	jpl	1f
   17b1e:	,-- bpl.s 17b24 <__divsi3+0xe>
	negl	d1
   17b20:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   17b22:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   17b24:	'-> move.l 8(sp),d0
	jpl	2f
   17b28:	,-- bpl.s 17b2e <__divsi3+0x18>
	negl	d0
   17b2a:	|   neg.l d0
	negb	d2
   17b2c:	|   neg.b d2

2:	movel	d1, sp@-
   17b2e:	'-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17b30:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   17b32:	    jsr 17aba <__udivsi3>
	addql	#8, sp
   17b38:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   17b3a:	    tst.b d2
	jpl	3f
   17b3c:	,-- bpl.s 17b40 <__divsi3+0x2a>
	negl	d0
   17b3e:	|   neg.l d0

3:	movel	sp@+, d2
   17b40:	'-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17b42:	    rts

00017b44 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17b44:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17b48:	move.l 4(sp),d0
	movel	d1, sp@-
   17b4c:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17b4e:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   17b50:	jsr 17b16 <__divsi3>
	addql	#8, sp
   17b56:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17b58:	move.l 8(sp),d1
	movel	d1, sp@-
   17b5c:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17b5e:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17b60:	jsr 17a98 <__mulsi3>
	addql	#8, sp
   17b66:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17b68:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17b6c:	sub.l d0,d1
	movel	d1, d0
   17b6e:	move.l d1,d0
	rts
   17b70:	rts

00017b72 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17b72:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17b76:	move.l 4(sp),d0
	movel	d1, sp@-
   17b7a:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17b7c:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   17b7e:	jsr 17aba <__udivsi3>
	addql	#8, sp
   17b84:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17b86:	move.l 8(sp),d1
	movel	d1, sp@-
   17b8a:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17b8c:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17b8e:	jsr 17a98 <__mulsi3>
	addql	#8, sp
   17b94:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17b96:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17b9a:	sub.l d0,d1
	movel	d1, d0
   17b9c:	move.l d1,d0
	rts
   17b9e:	rts

00017ba0 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   17ba0:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   17ba2:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   17ba6:	jsr -516(a6)
    move.l (sp)+, a6
   17baa:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   17bac:	rts

00017bae <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   17bae:	move.b d0,(a3)+
	rts
   17bb0:	rts
