
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #99382,d0
       8:	       subi.l #99382,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 18436 <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #99382,d0
      40:	       subi.l #99382,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 18436 <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 4d88 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #99382,d0
      7e:	       subi.l #99382,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 18436 <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 10eee <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 18bc0 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 10f06 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 18436 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 10eee <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 18bc0 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 18436 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 10eee <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 18bc0 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 1439e <PutChar+0x4>
     35c:	|  |              |   jsr 13a4a <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 18bc8 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 18bc8 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 18bc8 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 18bc8 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 18bc8 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 18bc8 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 18bc8 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 143c8 <PutChar+0x2e>
     834:	|   jsr 13a4a <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 18bc8 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 143e4 <PutChar+0x4a>
     8a6:	|   jsr 13a4a <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 18bc8 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 18bc8 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 18bc8 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 18bc8 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 18bc8 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 18bc8 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 18bc8 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 18bc8 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 18bc0 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 18bc8 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 10eee <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 18bc8 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
     c58:	       lea -88(sp),sp
     c5c:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
     c5e:	       move.l 18bc0 <SysBase>,d0
     c64:	       movea.l d0,a6
     c66:	       jsr -666(a6)
     c6a:	       move.l d0,88(sp)
     c6e:	       move.l 88(sp),d0
     c72:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
     c76:	       move.l 84(sp),80(sp)
     c7c:	       moveq #40,d0
     c7e:	       move.l d0,76(sp)
     c82:	       move.l 18bc0 <SysBase>,d0
     c88:	       movea.l d0,a6
     c8a:	       movea.l 80(sp),a0
     c8e:	       move.l 76(sp),d0
     c92:	       jsr -654(a6)
     c96:	       move.l d0,72(sp)
     c9a:	       move.l 72(sp),d0
     c9e:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
     ca2:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
     ca8:	       move.l #82956,60(sp)
     cb0:	       clr.l 56(sp)
     cb4:	       move.l 64(sp),52(sp)
     cba:	       clr.l 48(sp)
     cbe:	       move.l 18bc0 <SysBase>,d0
     cc4:	       movea.l d0,a6
     cc6:	       movea.l 60(sp),a0
     cca:	       move.l 56(sp),d0
     cce:	       movea.l 52(sp),a1
     cd2:	       move.l 48(sp),d1
     cd6:	       jsr -444(a6)
     cda:	       move.b d0,47(sp)
     cde:	       move.b 47(sp),d0
     ce2:	   /-- beq.s cf8 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
     ce4:	   |   pea 14419 <PutChar+0x7f>
     cea:	   |   jsr 13a4a <KPrintF>
     cf0:	   |   addq.l #4,sp
        return 0;
     cf2:	   |   moveq #0,d0
     cf4:	/--|-- bra.w db2 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
     cf8:	|  \-> movea.l 64(sp),a0
     cfc:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
     d02:	|      lea 92(sp),a0
     d06:	|      lea -86(a0),a0
     d0a:	|      move.l a0,38(sp)
     d0e:	|      movea.l 42(sp),a6
     d12:	|      movea.l 38(sp),a0
     d16:	|      jsr -60(a6)
     d1a:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
     d1e:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
     d24:	|      move.l #1103515245,-(sp)
     d2a:	|      move.l 34(sp),-(sp)
     d2e:	|      jsr 14284 <__mulsi3>
     d34:	|      addq.l #8,sp
     d36:	|      addi.l #12345,d0
     d3c:	|      move.l d0,d1
     d3e:	|      bclr #31,d1
     d42:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
     d46:	|      move.l 30(sp),d0
     d4a:	|      pea 64 <_start+0x64>
     d4e:	|      move.l d0,-(sp)
     d50:	|      jsr 1435e <__umodsi3>
     d56:	|      addq.l #8,sp
     d58:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
     d5c:	|      move.l 26(sp),-(sp)
     d60:	|      pea 14436 <PutChar+0x9c>
     d66:	|      jsr 13a4a <KPrintF>
     d6c:	|      addq.l #8,sp

    CloseDevice(ioreq);
     d6e:	|      move.l 64(sp),22(sp)
     d74:	|      move.l 18bc0 <SysBase>,d0
     d7a:	|      movea.l d0,a6
     d7c:	|      movea.l 22(sp),a1
     d80:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
     d84:	|      move.l 64(sp),18(sp)
     d8a:	|      move.l 18bc0 <SysBase>,d0
     d90:	|      movea.l d0,a6
     d92:	|      movea.l 18(sp),a0
     d96:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
     d9a:	|      move.l 84(sp),14(sp)
     da0:	|      move.l 18bc0 <SysBase>,d0
     da6:	|      movea.l d0,a6
     da8:	|      movea.l 14(sp),a0
     dac:	|      jsr -672(a6)
    return 0;
     db0:	|      moveq #0,d0
}
     db2:	\----> movea.l (sp)+,a6
     db4:	       lea 88(sp),sp
     db8:	       rts

00000dba <pickAnimCursor>:
struct personaAnimation * mouseCursorAnim;
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     dba:	move.l 18ae0 <mouseCursorAnim>,d0
     dc0:	move.l d0,-(sp)
     dc2:	jsr 6e8e <deleteAnim>
     dc8:	addq.l #4,sp
	mouseCursorAnim = pp;
     dca:	move.l 4(sp),18ae0 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     dd2:	clr.l 18ae4 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     dd8:	clr.l 18ae8 <mouseCursorCountUp>
}
     dde:	nop
     de0:	rts

00000de2 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
	KPrintF("pasteCursor: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
     de2:	pea 14449 <PutChar+0xaf>
     de8:	jsr 13a4a <KPrintF>
     dee:	addq.l #4,sp
     df0:	nop
     df2:	rts

00000df4 <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     df4:	             lea -24(sp),sp
     df8:	             move.l a6,-(sp)

  if(CstPalette) FreeVec(CstPalette);
     dfa:	             move.l 18b10 <CstPalette>,d0
     e00:	         /-- beq.s e1a <CstBlankScreen+0x26>
     e02:	         |   move.l 18b10 <CstPalette>,12(sp)
     e0a:	         |   move.l 18bc0 <SysBase>,d0
     e10:	         |   movea.l d0,a6
     e12:	         |   movea.l 12(sp),a1
     e16:	         |   jsr -690(a6)
  CstPaletteLoaded = 0;
     e1a:	         \-> clr.w 18af4 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e20:	             move.l #14675968,8(sp)

  width /= 16;
     e28:	             move.l 32(sp),d0
     e2c:	             movea.l d0,a0
     e2e:	             cmpa.w #0,a0
     e32:	         /-- bge.s e38 <CstBlankScreen+0x44>
     e34:	         |   lea 15(a0),a0
     e38:	         \-> move.l a0,d0
     e3a:	             asr.l #4,d0
     e3c:	             move.l d0,32(sp)

  WaitBlit();
     e40:	             move.l 18bcc <GfxBase>,d0
     e46:	             movea.l d0,a6
     e48:	             jsr -228(a6)

  //Both Buffers need to be done
  for(int i=0;i<2;i++) {
     e4c:	             clr.l 24(sp)
     e50:	   /-------- bra.w f2a <CstBlankScreen+0x136>
    custom->bltafwm = 0xffff;
     e54:	/--|-------> movea.l 8(sp),a0
     e58:	|  |         move.w #-1,68(a0)
    custom->bltalwm = 0xffff;
     e5e:	|  |         movea.l 8(sp),a0
     e62:	|  |         move.w #-1,70(a0)
    custom->bltamod = 0;
     e68:	|  |         movea.l 8(sp),a0
     e6c:	|  |         move.w #0,100(a0)
    custom->bltbmod = 0;
     e72:	|  |         movea.l 8(sp),a0
     e76:	|  |         move.w #0,98(a0)
    custom->bltcmod = 0;
     e7c:	|  |         movea.l 8(sp),a0
     e80:	|  |         move.w #0,96(a0)
    custom->bltdmod = 0;
     e86:	|  |         movea.l 8(sp),a0
     e8a:	|  |         move.w #0,102(a0)
    custom->bltcon1 = 0;
     e90:	|  |         movea.l 8(sp),a0
     e94:	|  |         move.w #0,66(a0)
    custom->bltcon0 = 0x0100;
     e9a:	|  |         movea.l 8(sp),a0
     e9e:	|  |         move.w #256,64(a0)
    ULONG bltdpt = (ULONG) CstDrawBuffer;
     ea4:	|  |         move.l 18b08 <CstDrawBuffer>,d0
     eaa:	|  |         move.l d0,20(sp)
    UWORD bltsize = height*64+width;    
     eae:	|  |         move.l 36(sp),d0
     eb2:	|  |         lsl.w #6,d0
     eb4:	|  |         move.l 32(sp),d1
     eb8:	|  |         movea.w d0,a0
     eba:	|  |         adda.w d1,a0
     ebc:	|  |         move.w a0,6(sp)
    UWORD blitsize = width*height*2;
     ec0:	|  |         move.l 32(sp),d1
     ec4:	|  |         move.l 36(sp),d0
     ec8:	|  |         muls.w d1,d0
     eca:	|  |         add.w d0,d0
     ecc:	|  |         move.w d0,4(sp)
    for(int i2=0;i2<5;i2++)
     ed0:	|  |         clr.l 16(sp)
     ed4:	|  |     /-- bra.s f06 <CstBlankScreen+0x112>
    {            
      custom->bltdpt = (APTR) bltdpt;
     ed6:	|  |  /--|-> move.l 20(sp),d0
     eda:	|  |  |  |   movea.l 8(sp),a0
     ede:	|  |  |  |   move.l d0,84(a0)
      custom->bltsize = bltsize;            
     ee2:	|  |  |  |   movea.l 8(sp),a0
     ee6:	|  |  |  |   move.w 6(sp),88(a0)
      WaitBlit();
     eec:	|  |  |  |   move.l 18bcc <GfxBase>,d0
     ef2:	|  |  |  |   movea.l d0,a6
     ef4:	|  |  |  |   jsr -228(a6)
      bltdpt += blitsize;
     ef8:	|  |  |  |   moveq #0,d0
     efa:	|  |  |  |   move.w 4(sp),d0
     efe:	|  |  |  |   add.l d0,20(sp)
    for(int i2=0;i2<5;i2++)
     f02:	|  |  |  |   addq.l #1,16(sp)
     f06:	|  |  |  \-> moveq #4,d0
     f08:	|  |  |      cmp.l 16(sp),d0
     f0c:	|  |  \----- bge.s ed6 <CstBlankScreen+0xe2>
    }

    WaitBlit();
     f0e:	|  |         move.l 18bcc <GfxBase>,d0
     f14:	|  |         movea.l d0,a6
     f16:	|  |         jsr -228(a6)
    WaitVbl();
     f1a:	|  |         jsr 1397e <WaitVbl>
    CstSwapBuffer();
     f20:	|  |         jsr 15e6 <CstSwapBuffer>
  for(int i=0;i<2;i++) {
     f26:	|  |         addq.l #1,24(sp)
     f2a:	|  \-------> moveq #1,d0
     f2c:	|            cmp.l 24(sp),d0
     f30:	\----------- bge.w e54 <CstBlankScreen+0x60>
  }

}
     f34:	             nop
     f36:	             nop
     f38:	             movea.l (sp)+,a6
     f3a:	             lea 24(sp),sp
     f3e:	             rts

00000f40 <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     f40:	       lea -52(sp),sp
     f44:	       move.l a6,-(sp)
     f46:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     f48:	       move.l #400,32(sp)
     f50:	       moveq #2,d0
     f52:	       move.l d0,28(sp)
     f56:	       move.l 18bc0 <SysBase>,d0
     f5c:	       movea.l d0,a6
     f5e:	       move.l 32(sp),d0
     f62:	       move.l 28(sp),d1
     f66:	       jsr -198(a6)
     f6a:	       move.l d0,24(sp)
     f6e:	       move.l 24(sp),d0
     f72:	       move.l d0,20(sp)
  
  if( retval == 0) {
     f76:	   /-- bne.s fa0 <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
     f78:	   |   pea 28 <_start+0x28>
     f7c:	   |   pea 14482 <PutChar+0xe8>
     f82:	   |   jsr 13a4a <KPrintF>
     f88:	   |   addq.l #8,sp
    Exit(1);
     f8a:	   |   moveq #1,d1
     f8c:	   |   move.l d1,16(sp)
     f90:	   |   move.l 18bc8 <DOSBase>,d0
     f96:	   |   movea.l d0,a6
     f98:	   |   move.l 16(sp),d1
     f9c:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
     fa0:	   \-> move.l 20(sp),56(sp)

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
     fa6:	       move.l #99384,52(sp)
  for(int i=0; i<16;i++)
     fae:	       clr.l 48(sp)
     fb2:	   /-- bra.s fd8 <CstCreateCopperlist+0x98>
    *cl++ = *clpartinstruction++;
     fb4:	/--|-> move.l 52(sp),d1
     fb8:	|  |   move.l d1,d2
     fba:	|  |   addq.l #4,d2
     fbc:	|  |   move.l d2,52(sp)
     fc0:	|  |   move.l 56(sp),d0
     fc4:	|  |   move.l d0,d2
     fc6:	|  |   addq.l #4,d2
     fc8:	|  |   move.l d2,56(sp)
     fcc:	|  |   movea.l d1,a0
     fce:	|  |   move.l (a0),d1
     fd0:	|  |   movea.l d0,a0
     fd2:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
     fd4:	|  |   addq.l #1,48(sp)
     fd8:	|  \-> moveq #15,d0
     fda:	|      cmp.l 48(sp),d0
     fde:	\----- bge.s fb4 <CstCreateCopperlist+0x74>

  clpartinstruction = CstClScreen;
     fe0:	       move.l #99448,52(sp)

  for(int i=0; i<12;i++)
     fe8:	       clr.l 44(sp)
     fec:	   /-- bra.s 1012 <CstCreateCopperlist+0xd2>
    *cl++ = *clpartinstruction++;
     fee:	/--|-> move.l 52(sp),d1
     ff2:	|  |   move.l d1,d2
     ff4:	|  |   addq.l #4,d2
     ff6:	|  |   move.l d2,52(sp)
     ffa:	|  |   move.l 56(sp),d0
     ffe:	|  |   move.l d0,d2
    1000:	|  |   addq.l #4,d2
    1002:	|  |   move.l d2,56(sp)
    1006:	|  |   movea.l d1,a0
    1008:	|  |   move.l (a0),d1
    100a:	|  |   movea.l d0,a0
    100c:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    100e:	|  |   addq.l #1,44(sp)
    1012:	|  \-> moveq #11,d0
    1014:	|      cmp.l 44(sp),d0
    1018:	\----- bge.s fee <CstCreateCopperlist+0xae>

  clpartinstruction = CstClBitplanes;
    101a:	       move.l #99496,52(sp)
  for(int i=0; i<10;i++)
    1022:	       clr.l 40(sp)
    1026:	   /-- bra.s 104c <CstCreateCopperlist+0x10c>
    *cl++ = *clpartinstruction++;        
    1028:	/--|-> move.l 52(sp),d1
    102c:	|  |   move.l d1,d2
    102e:	|  |   addq.l #4,d2
    1030:	|  |   move.l d2,52(sp)
    1034:	|  |   move.l 56(sp),d0
    1038:	|  |   move.l d0,d2
    103a:	|  |   addq.l #4,d2
    103c:	|  |   move.l d2,56(sp)
    1040:	|  |   movea.l d1,a0
    1042:	|  |   move.l (a0),d1
    1044:	|  |   movea.l d0,a0
    1046:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    1048:	|  |   addq.l #1,40(sp)
    104c:	|  \-> moveq #9,d0
    104e:	|      cmp.l 40(sp),d0
    1052:	\----- bge.s 1028 <CstCreateCopperlist+0xe8>

  
  clpartinstruction = CstClColorTemplate;
    1054:	       move.l #99536,52(sp)
  CstClColor = (UWORD *) cl;
    105c:	       move.l 56(sp),18b0c <CstClColor>
  for(int i=0; i<32;i++)
    1064:	       clr.l 36(sp)
    1068:	   /-- bra.s 108e <CstCreateCopperlist+0x14e>
    *cl++ = *clpartinstruction++;        
    106a:	/--|-> move.l 52(sp),d1
    106e:	|  |   move.l d1,d2
    1070:	|  |   addq.l #4,d2
    1072:	|  |   move.l d2,52(sp)
    1076:	|  |   move.l 56(sp),d0
    107a:	|  |   move.l d0,d2
    107c:	|  |   addq.l #4,d2
    107e:	|  |   move.l d2,56(sp)
    1082:	|  |   movea.l d1,a0
    1084:	|  |   move.l (a0),d1
    1086:	|  |   movea.l d0,a0
    1088:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    108a:	|  |   addq.l #1,36(sp)
    108e:	|  \-> moveq #31,d0
    1090:	|      cmp.l 36(sp),d0
    1094:	\----- bge.s 106a <CstCreateCopperlist+0x12a>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    1096:	       moveq #40,d1
    1098:	       cmp.l 64(sp),d1
    109c:	   /-- bge.s 10fa <CstCreateCopperlist+0x1ba>
    int tmp = width - 40;
    109e:	   |   moveq #-40,d2
    10a0:	   |   add.l 64(sp),d2
    10a4:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    10a8:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    10ae:	   |   move.l 8(sp),d0
    10b2:	   |   move.l d0,d1
    10b4:	   |   addq.l #2,d1
    10b6:	   |   move.l d1,8(sp)
    10ba:	   |   movea.l d0,a0
    10bc:	   |   move.w #264,(a0)
    *cw++ = tmp;
    10c0:	   |   move.l 8(sp),d0
    10c4:	   |   move.l d0,d1
    10c6:	   |   addq.l #2,d1
    10c8:	   |   move.l d1,8(sp)
    10cc:	   |   move.l 12(sp),d1
    10d0:	   |   movea.l d0,a0
    10d2:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    10d4:	   |   move.l 8(sp),d0
    10d8:	   |   move.l d0,d1
    10da:	   |   addq.l #2,d1
    10dc:	   |   move.l d1,8(sp)
    10e0:	   |   movea.l d0,a0
    10e2:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    10e6:	   |   move.l 8(sp),d0
    10ea:	   |   move.l d0,d1
    10ec:	   |   addq.l #2,d1
    10ee:	   |   move.l d1,8(sp)
    10f2:	   |   move.l 12(sp),d1
    10f6:	   |   movea.l d0,a0
    10f8:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    10fa:	   \-> move.l 56(sp),d0
    10fe:	       move.l d0,d1
    1100:	       addq.l #4,d1
    1102:	       move.l d1,56(sp)
    1106:	       moveq #-2,d2
    1108:	       movea.l d0,a0
    110a:	       move.l d2,(a0)
  return (UWORD *) retval;  
    110c:	       move.l 20(sp),d0
}
    1110:	       move.l (sp)+,d2
    1112:	       movea.l (sp)+,a6
    1114:	       lea 52(sp),sp
    1118:	       rts

0000111a <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    111a:	       lea -28(sp),sp
    111e:	       move.l d2,-(sp)
  ULONG *bplcursorsrc = (ULONG *) CstBackDrop;
    1120:	       move.l 18afa <CstBackDrop>,28(sp)
  ULONG *bplcursordst = (ULONG *) CstDrawBuffer;
    1128:	       move.l 18b08 <CstDrawBuffer>,24(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    1130:	       clr.l 20(sp)
    1134:	   /-- bra.s 115a <CstDisplayBackDrop+0x40>
  {
    *bplcursordst++ = *bplcursorsrc++;
    1136:	/--|-> move.l 28(sp),d1
    113a:	|  |   move.l d1,d0
    113c:	|  |   addq.l #4,d0
    113e:	|  |   move.l d0,28(sp)
    1142:	|  |   move.l 24(sp),d0
    1146:	|  |   move.l d0,d2
    1148:	|  |   addq.l #4,d2
    114a:	|  |   move.l d2,24(sp)
    114e:	|  |   movea.l d1,a0
    1150:	|  |   move.l (a0),d1
    1152:	|  |   movea.l d0,a0
    1154:	|  |   move.l d1,(a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    1156:	|  |   addq.l #1,20(sp)
    115a:	|  \-> move.w 18af6 <CstBackdropSize>,d0
    1160:	|      lsr.w #2,d0
    1162:	|      move.w d0,d0
    1164:	|      andi.l #65535,d0
    116a:	|      cmp.l 20(sp),d0
    116e:	\----- bgt.s 1136 <CstDisplayBackDrop+0x1c>
  }

  UWORD *tmp = CstClColor;
    1170:	       move.l 18b0c <CstClColor>,16(sp)
  UWORD reg = 0x180;
    1178:	       move.w #384,14(sp)
  UWORD *colorpos = CstPalette;
    117e:	       move.l 18b10 <CstPalette>,10(sp)

  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    1186:	       clr.l 6(sp)
    118a:	   /-- bra.s 11c6 <CstDisplayBackDrop+0xac>
    *tmp++ = reg;
    118c:	/--|-> move.l 16(sp),d0
    1190:	|  |   move.l d0,d1
    1192:	|  |   addq.l #2,d1
    1194:	|  |   move.l d1,16(sp)
    1198:	|  |   movea.l d0,a0
    119a:	|  |   move.w 14(sp),(a0)
    reg +=2;
    119e:	|  |   addq.w #2,14(sp)
    *tmp++ = *colorpos++;
    11a2:	|  |   move.l 10(sp),d1
    11a6:	|  |   move.l d1,d0
    11a8:	|  |   addq.l #2,d0
    11aa:	|  |   move.l d0,10(sp)
    11ae:	|  |   move.l 16(sp),d0
    11b2:	|  |   move.l d0,d2
    11b4:	|  |   addq.l #2,d2
    11b6:	|  |   move.l d2,16(sp)
    11ba:	|  |   movea.l d1,a0
    11bc:	|  |   move.w (a0),d1
    11be:	|  |   movea.l d0,a0
    11c0:	|  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    11c2:	|  |   addq.l #1,6(sp)
    11c6:	|  \-> moveq #31,d0
    11c8:	|      cmp.l 6(sp),d0
    11cc:	\----- bge.s 118c <CstDisplayBackDrop+0x72>
  }
}
    11ce:	       nop
    11d0:	       nop
    11d2:	       move.l (sp)+,d2
    11d4:	       lea 28(sp),sp
    11d8:	       rts

000011da <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    11da:	    move.w 18b02 <CstApplyBackDropCounter>,d0
    11e0:	/-- ble.s 11f6 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    11e2:	|   jsr 111a <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    11e8:	|   move.w 18b02 <CstApplyBackDropCounter>,d0
    11ee:	|   subq.w #1,d0
    11f0:	|   move.w d0,18b02 <CstApplyBackDropCounter>
  }    
}
    11f6:	\-> nop
    11f8:	    rts

000011fa <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    11fa:	             lea -140(sp),sp
    11fe:	             movem.l d2-d4/a6,-(sp)
	KPrintF("CstLoadBackDrop: Loading of Background started");
    1202:	             pea 144bd <PutChar+0x123>
    1208:	             jsr 13a4a <KPrintF>
    120e:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1210:	             move.l 160(sp),-(sp)
    1214:	             jsr 6bc <get2bytes>
    121a:	             addq.l #4,sp
    121c:	             move.w d0,130(sp)
  UWORD height = get2bytes(fp);  
    1220:	             move.l 160(sp),-(sp)
    1224:	             jsr 6bc <get2bytes>
    122a:	             addq.l #4,sp
    122c:	             move.w d0,128(sp)

  UWORD widthbyteslayer = width/8;
    1230:	             move.w 130(sp),d0
    1234:	             lsr.w #3,d0
    1236:	             move.w d0,126(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    123a:	             move.w 126(sp),d0
    123e:	             lsr.w #1,d0
    1240:	             move.w d0,124(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1244:	             move.l 18b14 <winWidth>,d0
    124a:	             lsr.l #3,d0
    124c:	             move.w d0,122(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1250:	             move.w 126(sp),d0
    1254:	             muls.w 128(sp),d0
    1258:	             move.w d0,120(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    125c:	             move.w 120(sp),d1
    1260:	             move.w d1,d0
    1262:	             add.w d0,d0
    1264:	             add.w d0,d0
    1266:	             move.w d0,d2
    1268:	             add.w d1,d2
    126a:	             move.w d2,118(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    126e:	             move.w 18af4 <CstPaletteLoaded>,d0
    1274:	/----------- bne.s 12ec <CstLoadBackdrop+0xf2>
  {    
    UWORD reg = 0x180;
    1276:	|            move.w #384,116(sp)
    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    127c:	|            moveq #64,d0
    127e:	|            move.l d0,112(sp)
    1282:	|            clr.l 108(sp)
    1286:	|            move.l 18bc0 <SysBase>,d0
    128c:	|            movea.l d0,a6
    128e:	|            move.l 112(sp),d0
    1292:	|            move.l 108(sp),d1
    1296:	|            jsr -684(a6)
    129a:	|            move.l d0,104(sp)
    129e:	|            move.l 104(sp),d0
    12a2:	|            move.l d0,18b10 <CstPalette>
    CstPaletteLoaded = 1;
    12a8:	|            move.w #1,18af4 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    12b0:	|            move.l 18b10 <CstPalette>,152(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    12b8:	|            clr.l 148(sp)
    12bc:	|        /-- bra.s 12e2 <CstLoadBackdrop+0xe8>
      *tmp++ = get2bytes(fp);
    12be:	|     /--|-> move.l 160(sp),-(sp)
    12c2:	|     |  |   jsr 6bc <get2bytes>
    12c8:	|     |  |   addq.l #4,sp
    12ca:	|     |  |   move.l d0,d1
    12cc:	|     |  |   move.l 152(sp),d0
    12d0:	|     |  |   move.l d0,d2
    12d2:	|     |  |   addq.l #2,d2
    12d4:	|     |  |   move.l d2,152(sp)
    12d8:	|     |  |   move.l d1,d1
    12da:	|     |  |   movea.l d0,a0
    12dc:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    12de:	|     |  |   addq.l #1,148(sp)
    12e2:	|     |  \-> moveq #31,d0
    12e4:	|     |      cmp.l 148(sp),d0
    12e8:	|     \----- bge.s 12be <CstLoadBackdrop+0xc4>
    12ea:	|  /-------- bra.s 130a <CstLoadBackdrop+0x110>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    12ec:	\--|-------> clr.l 144(sp)
    12f0:	   |     /-- bra.s 1302 <CstLoadBackdrop+0x108>
      get2bytes(fp);
    12f2:	   |  /--|-> move.l 160(sp),-(sp)
    12f6:	   |  |  |   jsr 6bc <get2bytes>
    12fc:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    12fe:	   |  |  |   addq.l #1,144(sp)
    1302:	   |  |  \-> moveq #31,d2
    1304:	   |  |      cmp.l 144(sp),d2
    1308:	   |  \----- bge.s 12f2 <CstLoadBackdrop+0xf8>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    130a:	   \-------> moveq #0,d0
    130c:	             move.w 118(sp),d0
    1310:	             move.l d0,100(sp)
    1314:	             moveq #2,d0
    1316:	             move.l d0,96(sp)
    131a:	             move.l 18bc0 <SysBase>,d0
    1320:	             movea.l d0,a6
    1322:	             move.l 100(sp),d0
    1326:	             move.l 96(sp),d1
    132a:	             jsr -684(a6)
    132e:	             move.l d0,92(sp)
    1332:	             move.l 92(sp),d0
    1336:	             move.l d0,88(sp)
   UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    133a:	             moveq #0,d0
    133c:	             move.w 120(sp),d0
    1340:	             move.l d0,84(sp)
    1344:	             moveq #2,d2
    1346:	             move.l d2,80(sp)
    134a:	             move.l 18bc0 <SysBase>,d0
    1350:	             movea.l d0,a6
    1352:	             move.l 84(sp),d0
    1356:	             move.l 80(sp),d1
    135a:	             jsr -684(a6)
    135e:	             move.l d0,76(sp)
    1362:	             move.l 76(sp),d0
    1366:	             move.l d0,72(sp)
#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    136a:	             move.l 160(sp),68(sp)
    1370:	             move.l 88(sp),64(sp)
    1376:	             moveq #2,d0
    1378:	             move.l d0,60(sp)
    137c:	             move.w 118(sp),d0
    1380:	             lsr.w #1,d0
    1382:	             move.w d0,d0
    1384:	             andi.l #65535,d0
    138a:	             move.l d0,56(sp)
    138e:	             move.l 18bc8 <DOSBase>,d0
    1394:	             movea.l d0,a6
    1396:	             move.l 68(sp),d1
    139a:	             move.l 64(sp),d2
    139e:	             move.l 60(sp),d3
    13a2:	             move.l 56(sp),d4
    13a6:	             jsr -324(a6)
    13aa:	             move.l d0,52(sp)
    13ae:	             move.l 52(sp),d0
    13b2:	             move.w d0,50(sp)
  if(!count) {
    13b6:	         /-- bne.s 13ca <CstLoadBackdrop+0x1d0>
    KPrintF("Error while reading stream");
    13b8:	         |   pea 144ec <PutChar+0x152>
    13be:	         |   jsr 13a4a <KPrintF>
    13c4:	         |   addq.l #4,sp
    return;
    13c6:	   /-----|-- bra.w 15aa <CstLoadBackdrop+0x3b0>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    13ca:	   |     \-> move.l 160(sp),46(sp)
    13d0:	   |         move.l 72(sp),42(sp)
    13d6:	   |         moveq #2,d2
    13d8:	   |         move.l d2,38(sp)
    13dc:	   |         move.w 120(sp),d0
    13e0:	   |         lsr.w #1,d0
    13e2:	   |         move.w d0,d0
    13e4:	   |         andi.l #65535,d0
    13ea:	   |         move.l d0,34(sp)
    13ee:	   |         move.l 18bc8 <DOSBase>,d0
    13f4:	   |         movea.l d0,a6
    13f6:	   |         move.l 46(sp),d1
    13fa:	   |         move.l 42(sp),d2
    13fe:	   |         move.l 38(sp),d3
    1402:	   |         move.l 34(sp),d4
    1406:	   |         jsr -324(a6)
    140a:	   |         move.l d0,30(sp)
    140e:	   |         move.l 30(sp),d0
    1412:	   |         move.w d0,50(sp)
   

  if(!count) {
    1416:	   |     /-- bne.s 142a <CstLoadBackdrop+0x230>
    KPrintF("Error while reading stream");
    1418:	   |     |   pea 144ec <PutChar+0x152>
    141e:	   |     |   jsr 13a4a <KPrintF>
    1424:	   |     |   addq.l #4,sp
    return;
    1426:	   +-----|-- bra.w 15aa <CstLoadBackdrop+0x3b0>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    142a:	   |     \-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    1432:	   |         move.l 18afa <CstBackDrop>,d0
    1438:	   |         move.l d0,140(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    143c:	   |         move.l 168(sp),d0
    1440:	   |         move.w d0,d1
    1442:	   |         muls.w 122(sp),d1
    1446:	   |         move.l 164(sp),d0
    144a:	   |     /-- bpl.s 144e <CstLoadBackdrop+0x254>
    144c:	   |     |   addq.l #7,d0
    144e:	   |     \-> asr.l #3,d0
    1450:	   |         move.l d0,d0
    1452:	   |         movea.w d1,a0
    1454:	   |         adda.w d0,a0
    1456:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    145a:	   |         moveq #0,d0
    145c:	   |         move.w 24(sp),d0
    1460:	   |         add.l d0,140(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    1464:	   |         pea 14507 <PutChar+0x16d>
    146a:	   |         jsr 13a4a <KPrintF>
    1470:	   |         addq.l #4,sp


  WaitBlit();
    1472:	   |         move.l 18bcc <GfxBase>,d0
    1478:	   |         movea.l d0,a6
    147a:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    147e:	   |         movea.l 26(sp),a0
    1482:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    1488:	   |         movea.l 26(sp),a0
    148c:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    1492:	   |         movea.l 26(sp),a0
    1496:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    149c:	   |         movea.l 26(sp),a0
    14a0:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    14a6:	   |         move.w 122(sp),d0
    14aa:	   |         sub.w 126(sp),d0
    14ae:	   |         movea.l 26(sp),a0
    14b2:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    14b6:	   |         move.w 122(sp),d0
    14ba:	   |         sub.w 126(sp),d0
    14be:	   |         movea.l 26(sp),a0
    14c2:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    14c6:	   |         movea.l 26(sp),a0
    14ca:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    14d0:	   |         movea.l 26(sp),a0
    14d4:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    14da:	   |         move.l 88(sp),136(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    14e0:	   |         clr.l 132(sp)
    14e4:	   |     /-- bra.s 1546 <CstLoadBackdrop+0x34c>
  {    
    custom->bltapt = tmpmask;
    14e6:	   |  /--|-> movea.l 26(sp),a0
    14ea:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = tmpbuffercursor;
    14f0:	   |  |  |   move.l 136(sp),d0
    14f4:	   |  |  |   movea.l 26(sp),a0
    14f8:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = backdropcursor;
    14fc:	   |  |  |   move.l 140(sp),d0
    1500:	   |  |  |   movea.l 26(sp),a0
    1504:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = backdropcursor;
    1508:	   |  |  |   move.l 140(sp),d0
    150c:	   |  |  |   movea.l 26(sp),a0
    1510:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    1514:	   |  |  |   move.w 128(sp),d0
    1518:	   |  |  |   lsl.w #6,d0
    151a:	   |  |  |   add.w 124(sp),d0
    151e:	   |  |  |   movea.l 26(sp),a0
    1522:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    1526:	   |  |  |   moveq #0,d0
    1528:	   |  |  |   move.w 120(sp),d0
    152c:	   |  |  |   add.l d0,136(sp)
    backdropcursor += CstBackdropSizePlane;
    1530:	   |  |  |   move.w 18af8 <CstBackdropSizePlane>,d0
    1536:	   |  |  |   move.w d0,d0
    1538:	   |  |  |   andi.l #65535,d0
    153e:	   |  |  |   add.l d0,140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    1542:	   |  |  |   addq.l #1,132(sp)
    1546:	   |  |  \-> moveq #4,d0
    1548:	   |  |      cmp.l 132(sp),d0
    154c:	   |  \----- bge.s 14e6 <CstLoadBackdrop+0x2ec>
  }    

  WaitBlit();
    154e:	   |         move.l 18bcc <GfxBase>,d0
    1554:	   |         movea.l d0,a6
    1556:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    155a:	   |         pea 14526 <PutChar+0x18c>
    1560:	   |         jsr 13a4a <KPrintF>
    1566:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    1568:	   |         move.l 88(sp),20(sp)
    156e:	   |         move.l 18bc0 <SysBase>,d0
    1574:	   |         movea.l d0,a6
    1576:	   |         movea.l 20(sp),a1
    157a:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    157e:	   |         move.l 72(sp),16(sp)
    1584:	   |         move.l 18bc0 <SysBase>,d0
    158a:	   |         movea.l d0,a6
    158c:	   |         movea.l 16(sp),a1
    1590:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    1594:	   |         move.w #2,18b02 <CstApplyBackDropCounter>

  KPrintF("CstLoadBackDrop: Finished");
    159c:	   |         pea 14546 <PutChar+0x1ac>
    15a2:	   |         jsr 13a4a <KPrintF>
    15a8:	   |         addq.l #4,sp

}
    15aa:	   \-------> movem.l (sp)+,d2-d4/a6
    15ae:	             lea 140(sp),sp
    15b2:	             rts

000015b4 <CstScaleSprite>:

void CstScaleSprite( struct sprite *single, UWORD x, UWORD y)
{
    15b4:	subq.l #4,sp
    15b6:	move.l 12(sp),d1
    15ba:	move.l 16(sp),d0
    15be:	move.w d1,d1
    15c0:	move.w d1,2(sp)
    15c4:	move.w d0,d0
    15c6:	move.w d0,(sp)
    tmpbuffercursor += sizeplane;
    backdropcursor += CstBackdropSizePlane;*/
  /*}    

  WaitBlit();*/
}
    15c8:	nop
    15ca:	addq.l #4,sp
    15cc:	rts

000015ce <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    15ce:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    15d0:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    15d6:	move.l 8(sp),d0
    15da:	movea.l (sp),a0
    15dc:	move.l d0,128(a0)
}
    15e0:	nop
    15e2:	addq.l #4,sp
    15e4:	rts

000015e6 <CstSwapBuffer>:

void CstSwapBuffer( ) {
    15e6:	lea -16(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    15ea:	move.l 18b04 <CstViewBuffer>,12(sp)
  CstViewBuffer = CstDrawBuffer;
    15f2:	move.l 18b08 <CstDrawBuffer>,d0
    15f8:	move.l d0,18b04 <CstViewBuffer>
  CstDrawBuffer = tmp;
    15fe:	move.l 12(sp),18b08 <CstDrawBuffer>

  UWORD *copword = CstCopperList;
    1606:	move.l 18afe <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    160e:	move.l 18b04 <CstViewBuffer>,d0
    1614:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    1618:	move.l 4(sp),d0
    161c:	clr.w d0
    161e:	swap d0
    1620:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    1624:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    1628:	movea.w #118,a0
    162c:	adda.l 8(sp),a0
    1630:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    1632:	movea.w #114,a0
    1636:	adda.l 8(sp),a0
    163a:	move.w 2(sp),(a0)

  ptr +=  40*256;
    163e:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    1646:	move.l 4(sp),d0
    164a:	clr.w d0
    164c:	swap d0
    164e:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    1652:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    1656:	movea.w #126,a0
    165a:	adda.l 8(sp),a0
    165e:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    1660:	movea.w #122,a0
    1664:	adda.l 8(sp),a0
    1668:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    166c:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    1674:	move.l 4(sp),d0
    1678:	clr.w d0
    167a:	swap d0
    167c:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    1680:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    1684:	movea.l 8(sp),a0
    1688:	lea 134(a0),a0
    168c:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    168e:	movea.l 8(sp),a0
    1692:	lea 130(a0),a0
    1696:	move.w 2(sp),(a0)

  ptr +=  40*256;
    169a:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    16a2:	move.l 4(sp),d0
    16a6:	clr.w d0
    16a8:	swap d0
    16aa:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    16ae:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    16b2:	movea.l 8(sp),a0
    16b6:	lea 142(a0),a0
    16ba:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    16bc:	movea.l 8(sp),a0
    16c0:	lea 138(a0),a0
    16c4:	move.w 2(sp),(a0)

  ptr +=  40*256;
    16c8:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    16d0:	move.l 4(sp),d0
    16d4:	clr.w d0
    16d6:	swap d0
    16d8:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    16dc:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    16e0:	movea.l 8(sp),a0
    16e4:	lea 150(a0),a0
    16e8:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    16ea:	movea.l 8(sp),a0
    16ee:	lea 146(a0),a0
    16f2:	move.w 2(sp),(a0)

}
    16f6:	nop
    16f8:	lea 16(sp),sp
    16fc:	rts

000016fe <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    16fe:	          lea -44(sp),sp
    1702:	          move.l a6,-(sp)

  width = width / 8;
    1704:	          move.l 52(sp),d0
    1708:	      /-- bpl.s 170c <CstReserveBackdrop+0xe>
    170a:	      |   addq.l #7,d0
    170c:	      \-> asr.l #3,d0
    170e:	          move.l d0,52(sp)

  if( width < 40) 
    1712:	          moveq #39,d0
    1714:	          cmp.l 52(sp),d0
    1718:	      /-- blt.s 172e <CstReserveBackdrop+0x30>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    171a:	      |   pea 14560 <PutChar+0x1c6>
    1720:	      |   jsr 13a4a <KPrintF>
    1726:	      |   addq.l #4,sp
    return FALSE;
    1728:	      |   clr.w d0
    172a:	/-----|-- bra.w 18a2 <CstReserveBackdrop+0x1a4>
  }  

  CstCopperList = CstCreateCopperlist( width);
    172e:	|     \-> move.l 52(sp),-(sp)
    1732:	|         jsr f40 <CstCreateCopperlist>
    1738:	|         addq.l #4,sp
    173a:	|         move.l d0,18afe <CstCopperList>
  CstBackdropSizePlane = width*height;
    1740:	|         move.l 52(sp),d1
    1744:	|         move.l 56(sp),d0
    1748:	|         muls.w d1,d0
    174a:	|         move.w d0,18af8 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;
    1750:	|         move.w 18af8 <CstBackdropSizePlane>,d1
    1756:	|         move.w d1,d0
    1758:	|         add.w d0,d0
    175a:	|         add.w d0,d0
    175c:	|         add.w d1,d0
    175e:	|         move.w d0,18af6 <CstBackdropSize>

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    1764:	|         move.w 18af6 <CstBackdropSize>,d0
    176a:	|         move.w d0,d0
    176c:	|         andi.l #65535,d0
    1772:	|         move.l d0,36(sp)
    1776:	|         moveq #2,d1
    1778:	|         move.l d1,32(sp)
    177c:	|         move.l 18bc0 <SysBase>,d0
    1782:	|         movea.l d0,a6
    1784:	|         move.l 36(sp),d0
    1788:	|         move.l 32(sp),d1
    178c:	|         jsr -684(a6)
    1790:	|         move.l d0,28(sp)
    1794:	|         move.l 28(sp),d0
    1798:	|         move.l d0,18afa <CstBackDrop>
  if( !CstBackDrop)
    179e:	|         move.l 18afa <CstBackDrop>,d0
    17a4:	|     /-- bne.s 17ba <CstReserveBackdrop+0xbc>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    17a6:	|     |   pea 1459e <PutChar+0x204>
    17ac:	|     |   jsr 13a4a <KPrintF>
    17b2:	|     |   addq.l #4,sp
    return FALSE;  
    17b4:	|     |   clr.w d0
    17b6:	+-----|-- bra.w 18a2 <CstReserveBackdrop+0x1a4>
  }

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    17ba:	|     \-> move.l 18afa <CstBackDrop>,44(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    17c2:	|         clr.l 40(sp)
    17c6:	|     /-- bra.s 17dc <CstReserveBackdrop+0xde>
  {
    *cursor++ = 0;
    17c8:	|  /--|-> move.l 44(sp),d0
    17cc:	|  |  |   move.l d0,d1
    17ce:	|  |  |   addq.l #4,d1
    17d0:	|  |  |   move.l d1,44(sp)
    17d4:	|  |  |   movea.l d0,a0
    17d6:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    17d8:	|  |  |   addq.l #1,40(sp)
    17dc:	|  |  \-> move.w 18af6 <CstBackdropSize>,d0
    17e2:	|  |      lsr.w #2,d0
    17e4:	|  |      move.w d0,d0
    17e6:	|  |      andi.l #65535,d0
    17ec:	|  |      cmp.l 40(sp),d0
    17f0:	|  \----- bgt.s 17c8 <CstReserveBackdrop+0xca>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize,MEMF_CHIP);
    17f2:	|         move.w 18af6 <CstBackdropSize>,d0
    17f8:	|         move.w d0,d0
    17fa:	|         andi.l #65535,d0
    1800:	|         move.l d0,24(sp)
    1804:	|         moveq #2,d0
    1806:	|         move.l d0,20(sp)
    180a:	|         move.l 18bc0 <SysBase>,d0
    1810:	|         movea.l d0,a6
    1812:	|         move.l 24(sp),d0
    1816:	|         move.l 20(sp),d1
    181a:	|         jsr -684(a6)
    181e:	|         move.l d0,16(sp)
    1822:	|         move.l 16(sp),d0
    1826:	|         move.l d0,18b08 <CstDrawBuffer>
  CstViewBuffer = AllocVec(CstBackdropSize,MEMF_CHIP);
    182c:	|         move.w 18af6 <CstBackdropSize>,d0
    1832:	|         move.w d0,d0
    1834:	|         andi.l #65535,d0
    183a:	|         move.l d0,12(sp)
    183e:	|         moveq #2,d1
    1840:	|         move.l d1,8(sp)
    1844:	|         move.l 18bc0 <SysBase>,d0
    184a:	|         movea.l d0,a6
    184c:	|         move.l 12(sp),d0
    1850:	|         move.l 8(sp),d1
    1854:	|         jsr -684(a6)
    1858:	|         move.l d0,4(sp)
    185c:	|         move.l 4(sp),d0
    1860:	|         move.l d0,18b04 <CstViewBuffer>
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    1866:	|         move.l 18afe <CstCopperList>,d0
    186c:	|     /-- beq.s 187e <CstReserveBackdrop+0x180>
    186e:	|     |   move.l 18b08 <CstDrawBuffer>,d0
    1874:	|     +-- beq.s 187e <CstReserveBackdrop+0x180>
    1876:	|     |   move.l 18b04 <CstViewBuffer>,d0
    187c:	|  /--|-- bne.s 1890 <CstReserveBackdrop+0x192>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    187e:	|  |  \-> pea 145d6 <PutChar+0x23c>
    1884:	|  |      jsr 13a4a <KPrintF>
    188a:	|  |      addq.l #4,sp
    return FALSE;
    188c:	|  |      clr.w d0
    188e:	+--|----- bra.s 18a2 <CstReserveBackdrop+0x1a4>
  }

  CstSetCl( CstCopperList);
    1890:	|  \----> move.l 18afe <CstCopperList>,d0
    1896:	|         move.l d0,-(sp)
    1898:	|         jsr 15ce <CstSetCl>
    189e:	|         addq.l #4,sp
  return TRUE;
    18a0:	|         moveq #1,d0

}
    18a2:	\-------> movea.l (sp)+,a6
    18a4:	          lea 44(sp),sp
    18a8:	          rts

000018aa <CstFreeBuffer>:

void CstFreeBuffer( ) {
    18aa:	    lea -12(sp),sp
    18ae:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    18b0:	    move.l 18b08 <CstDrawBuffer>,d0
    18b6:	/-- beq.s 18d0 <CstFreeBuffer+0x26>
    18b8:	|   move.l 18b08 <CstDrawBuffer>,12(sp)
    18c0:	|   move.l 18bc0 <SysBase>,d0
    18c6:	|   movea.l d0,a6
    18c8:	|   movea.l 12(sp),a1
    18cc:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    18d0:	\-> move.l 18b04 <CstViewBuffer>,d0
    18d6:	/-- beq.s 18f0 <CstFreeBuffer+0x46>
    18d8:	|   move.l 18b04 <CstViewBuffer>,8(sp)
    18e0:	|   move.l 18bc0 <SysBase>,d0
    18e6:	|   movea.l d0,a6
    18e8:	|   movea.l 8(sp),a1
    18ec:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    18f0:	\-> move.l 18afe <CstCopperList>,d0
    18f6:	/-- beq.s 1910 <CstFreeBuffer+0x66>
    18f8:	|   move.l 18afe <CstCopperList>,4(sp)
    1900:	|   move.l 18bc0 <SysBase>,d0
    1906:	|   movea.l d0,a6
    1908:	|   movea.l 4(sp),a1
    190c:	|   jsr -690(a6)
}
    1910:	\-> nop
    1912:	    movea.l (sp)+,a6
    1914:	    lea 12(sp),sp
    1918:	    rts

0000191a <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    191a:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    191e:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    1922:	       tst.l 24(sp)
    1926:	   /-- bge.s 192c <drawLine+0x12>
    1928:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    192c:	   \-> tst.l 28(sp)
    1930:	   /-- bge.s 1936 <drawLine+0x1c>
    1932:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    1936:	   \-> tst.l 32(sp)
    193a:	   /-- bge.s 1940 <drawLine+0x26>
    193c:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    1940:	   \-> tst.l 36(sp)
    1944:	   /-- bge.s 194a <drawLine+0x30>
    1946:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    194a:	   \-> move.l 18cb0 <sceneWidth>,d0
    1950:	       cmp.l 24(sp),d0
    1954:	   /-- bge.s 1964 <drawLine+0x4a>
    1956:	   |   move.l 18cb0 <sceneWidth>,d0
    195c:	   |   move.l d0,d1
    195e:	   |   subq.l #1,d1
    1960:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    1964:	   \-> move.l 18cb0 <sceneWidth>,d0
    196a:	       cmp.l 32(sp),d0
    196e:	   /-- bge.s 197e <drawLine+0x64>
    1970:	   |   move.l 18cb0 <sceneWidth>,d0
    1976:	   |   move.l d0,d1
    1978:	   |   subq.l #1,d1
    197a:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    197e:	   \-> move.l 18cb4 <sceneHeight>,d0
    1984:	       cmp.l 28(sp),d0
    1988:	   /-- bge.s 1998 <drawLine+0x7e>
    198a:	   |   move.l 18cb4 <sceneHeight>,d0
    1990:	   |   move.l d0,d1
    1992:	   |   subq.l #1,d1
    1994:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    1998:	   \-> move.l 18cb4 <sceneHeight>,d0
    199e:	       cmp.l 36(sp),d0
    19a2:	   /-- bge.s 19b2 <drawLine+0x98>
    19a4:	   |   move.l 18cb4 <sceneHeight>,d0
    19aa:	   |   move.l d0,d1
    19ac:	   |   subq.l #1,d1
    19ae:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    19b2:	   \-> move.l 24(sp),d0
    19b6:	       cmp.l 32(sp),d0
    19ba:	/----- ble.s 19d6 <drawLine+0xbc>
		x = x2; 
    19bc:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    19c2:	|      tst.w 10(sp)
    19c6:	|      seq d0
    19c8:	|      neg.b d0
    19ca:	|      move.b d0,d0
    19cc:	|      andi.w #255,d0
    19d0:	|      move.w d0,10(sp)
    19d4:	|  /-- bra.s 19dc <drawLine+0xc2>
	} else x = x1;
    19d6:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    19dc:	   \-> move.l 28(sp),d1
    19e0:	       cmp.l 36(sp),d1
    19e4:	/----- ble.s 1a00 <drawLine+0xe6>
		y = y2; 
    19e6:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    19ec:	|      tst.w 10(sp)
    19f0:	|      seq d0
    19f2:	|      neg.b d0
    19f4:	|      move.b d0,d0
    19f6:	|      andi.w #255,d0
    19fa:	|      move.w d0,10(sp)
    19fe:	|  /-- bra.s 1a06 <drawLine+0xec>
	} else y = y1;	
    1a00:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    1a06:	   \-> move.l 32(sp),d0
    1a0a:	       sub.l 24(sp),d0
    1a0e:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    1a12:	       move.l 6(sp),d0
    1a16:	   /-- bpl.s 1a1a <drawLine+0x100>
    1a18:	   |   neg.l d0
    1a1a:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    1a1e:	       move.l 36(sp),d1
    1a22:	       sub.l 28(sp),d1
    1a26:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    1a2a:	       move.l 2(sp),d0
    1a2e:	   /-- bpl.s 1a32 <drawLine+0x118>
    1a30:	   |   neg.l d0
    1a32:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    1a36:	       tst.l 6(sp)
    1a3a:	   /-- bne.s 1a5e <drawLine+0x144>
		diffX = 1;
    1a3c:	   |   moveq #1,d0
    1a3e:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    1a42:	   |   move.l 18cb0 <sceneWidth>,d0
    1a48:	   |   subq.l #1,d0
    1a4a:	   |   cmp.l 16(sp),d0
    1a4e:	   +-- bne.s 1a5e <drawLine+0x144>
    1a50:	   |   move.l 18cb0 <sceneWidth>,d0
    1a56:	   |   move.l d0,d1
    1a58:	   |   subq.l #2,d1
    1a5a:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    1a5e:	   \-> tst.l 2(sp)
    1a62:	   /-- bne.s 1a86 <drawLine+0x16c>
		diffY = 1;
    1a64:	   |   moveq #1,d0
    1a66:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    1a6a:	   |   move.l 18cb4 <sceneHeight>,d0
    1a70:	   |   subq.l #1,d0
    1a72:	   |   cmp.l 12(sp),d0
    1a76:	   +-- bne.s 1a86 <drawLine+0x16c>
    1a78:	   |   move.l 18cb4 <sceneHeight>,d0
    1a7e:	   |   move.l d0,d1
    1a80:	   |   subq.l #2,d1
    1a82:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    1a86:	   \-> pea 14603 <PutChar+0x269>
    1a8c:	       jsr 13a4a <KPrintF>
    1a92:	       addq.l #4,sp
	
}
    1a94:	       nop
    1a96:	       lea 20(sp),sp
    1a9a:	       rts

00001a9c <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    1a9c:	                      lea -24(sp),sp
    1aa0:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    1aa2:	                      move.l 18b1c <firstTexture>,d0
    1aa8:	/-------------------- beq.w 1b86 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    1aac:	|                     clr.l 24(sp)
    1ab0:	|     /-------------- bra.w 1b7a <deleteTextures+0xde>
			BOOL found = FALSE;
    1ab4:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    1ab8:	|  |  |               move.l 18b1c <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    1ac0:	|  |  |               movea.l 20(sp),a0
    1ac4:	|  |  |               move.l (a0),d1
    1ac6:	|  |  |               move.l 24(sp),d0
    1aca:	|  |  |               add.l d0,d0
    1acc:	|  |  |               add.l d0,d0
    1ace:	|  |  |               movea.l 36(sp),a0
    1ad2:	|  |  |               adda.l d0,a0
    1ad4:	|  |  |               move.l (a0),d0
    1ad6:	|  |  |               cmp.l d1,d0
    1ad8:	|  |  |  /----------- bne.w 1b6c <deleteTextures+0xd0>
				found = TRUE;
    1adc:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    1ae2:	|  |  |  |            movea.l 20(sp),a0
    1ae6:	|  |  |  |            move.l 12(a0),d0
    1aea:	|  |  |  |            move.l d0,18b1c <firstTexture>
				FreeVec(list);
    1af0:	|  |  |  |            move.l 20(sp),6(sp)
    1af6:	|  |  |  |            move.l 18bc0 <SysBase>,d0
    1afc:	|  |  |  |            movea.l d0,a6
    1afe:	|  |  |  |            movea.l 6(sp),a1
    1b02:	|  |  |  |            jsr -690(a6)
				continue;
    1b06:	|  |  |  |  /-------- bra.s 1b76 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    1b08:	|  |  |  |  |  /----> movea.l 20(sp),a0
    1b0c:	|  |  |  |  |  |      movea.l 12(a0),a0
    1b10:	|  |  |  |  |  |      move.l (a0),d1
    1b12:	|  |  |  |  |  |      move.l 24(sp),d0
    1b16:	|  |  |  |  |  |      add.l d0,d0
    1b18:	|  |  |  |  |  |      add.l d0,d0
    1b1a:	|  |  |  |  |  |      movea.l 36(sp),a0
    1b1e:	|  |  |  |  |  |      adda.l d0,a0
    1b20:	|  |  |  |  |  |      move.l (a0),d0
    1b22:	|  |  |  |  |  |      cmp.l d1,d0
    1b24:	|  |  |  |  |  |  /-- bne.s 1b62 <deleteTextures+0xc6>
					found = TRUE;
    1b26:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    1b2c:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    1b30:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    1b36:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    1b3a:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    1b3e:	|  |  |  |  |  |  |   move.l 12(a0),d0
    1b42:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    1b46:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    1b4a:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    1b50:	|  |  |  |  |  |  |   move.l 18bc0 <SysBase>,d0
    1b56:	|  |  |  |  |  |  |   movea.l d0,a6
    1b58:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    1b5c:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    1b60:	|  |  |  |  +--|--|-- bra.s 1b76 <deleteTextures+0xda>
				}
				list = list->next;
    1b62:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    1b66:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    1b6c:	|  |  |  \--|--|----> movea.l 20(sp),a0
    1b70:	|  |  |     |  |      move.l 12(a0),d0
    1b74:	|  |  |     |  \----- bne.s 1b08 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    1b76:	|  |  |     \-------> addq.l #1,24(sp)
    1b7a:	|  |  \-------------> move.l 24(sp),d0
    1b7e:	|  |                  cmp.l 32(sp),d0
    1b82:	|  \----------------- bcs.w 1ab4 <deleteTextures+0x18>
			}
		}
	}
}
    1b86:	\-------------------> nop
    1b88:	                      movea.l (sp)+,a6
    1b8a:	                      lea 24(sp),sp
    1b8e:	                      rts

00001b90 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    1b90:	subq.l #4,sp
    1b92:	move.l 8(sp),d0
    1b96:	move.w d0,d0
    1b98:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    1b9c:	pea 14626 <PutChar+0x28c>
    1ba2:	jsr 13a4a <KPrintF>
    1ba8:	addq.l #4,sp
}
    1baa:	nop
    1bac:	addq.l #4,sp
    1bae:	rts

00001bb0 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    1bb0:	       moveq #-1,d0
    1bb2:	       cmp.l 4(sp),d0
    1bb6:	   /-- bne.s 1bbc <resourceNameFromNum+0xc>
    1bb8:	   |   moveq #0,d0
    1bba:	/--|-- bra.s 1bf4 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    1bbc:	|  \-> move.l 18b9c <numResourceNames>,d0
    1bc2:	|  /-- bne.s 1bcc <resourceNameFromNum+0x1c>
    1bc4:	|  |   move.l #83542,d0
    1bca:	+--|-- bra.s 1bf4 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    1bcc:	|  \-> move.l 18b9c <numResourceNames>,d0
    1bd2:	|      cmp.l 4(sp),d0
    1bd6:	|  /-- ble.s 1bee <resourceNameFromNum+0x3e>
    1bd8:	|  |   move.l 18b54 <allResourceNames>,d1
    1bde:	|  |   move.l 4(sp),d0
    1be2:	|  |   add.l d0,d0
    1be4:	|  |   add.l d0,d0
    1be6:	|  |   movea.l d1,a0
    1be8:	|  |   adda.l d0,a0
    1bea:	|  |   move.l (a0),d0
    1bec:	+--|-- bra.s 1bf4 <resourceNameFromNum+0x44>
	return "Unknown resource";
    1bee:	|  \-> move.l #83551,d0
    1bf4:	\----> rts

00001bf6 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    1bf6:	          lea -40(sp),sp
    1bfa:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    1bfe:	          move.l #320,18b14 <winWidth>
    winHeight = 256;
    1c08:	          move.l #256,18b18 <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    1c12:	          tst.l 56(sp)
    1c16:	      /-- bne.s 1c2e <main_sludge+0x38>
		bundleFolder = copyString("game/");
    1c18:	      |   pea 14670 <PutChar+0x2d6>
    1c1e:	      |   jsr b8 <copyString>
    1c24:	      |   addq.l #4,sp
    1c26:	      |   move.l d0,18b2c <bundleFolder>
    1c2c:	   /--|-- bra.s 1c44 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    1c2e:	   |  \-> movea.l 60(sp),a0
    1c32:	   |      move.l (a0),d0
    1c34:	   |      move.l d0,-(sp)
    1c36:	   |      jsr b8 <copyString>
    1c3c:	   |      addq.l #4,sp
    1c3e:	   |      move.l d0,18b2c <bundleFolder>
	}
    
	int lastSlash = -1;
    1c44:	   \----> moveq #-1,d0
    1c46:	          move.l d0,44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    1c4a:	          clr.l 40(sp)
    1c4e:	   /----- bra.s 1c70 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    1c50:	/--|----> move.l 18b2c <bundleFolder>,d1
    1c56:	|  |      move.l 40(sp),d0
    1c5a:	|  |      movea.l d1,a0
    1c5c:	|  |      adda.l d0,a0
    1c5e:	|  |      move.b (a0),d0
    1c60:	|  |      cmpi.b #47,d0
    1c64:	|  |  /-- bne.s 1c6c <main_sludge+0x76>
    1c66:	|  |  |   move.l 40(sp),44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    1c6c:	|  |  \-> addq.l #1,40(sp)
    1c70:	|  \----> move.l 18b2c <bundleFolder>,d1
    1c76:	|         move.l 40(sp),d0
    1c7a:	|         movea.l d1,a0
    1c7c:	|         adda.l d0,a0
    1c7e:	|         move.b (a0),d0
    1c80:	\-------- bne.s 1c50 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    1c82:	          move.l 18b2c <bundleFolder>,d0
    1c88:	          move.l 44(sp),d1
    1c8c:	          addq.l #1,d1
    1c8e:	          movea.l d0,a0
    1c90:	          adda.l d1,a0
    1c92:	          clr.b (a0)

	if (argc > 1) {
    1c94:	          moveq #1,d0
    1c96:	          cmp.l 56(sp),d0
    1c9a:	      /-- bge.s 1cb6 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    1c9c:	      |   move.l 56(sp),d0
    1ca0:	      |   addi.l #1073741823,d0
    1ca6:	      |   add.l d0,d0
    1ca8:	      |   add.l d0,d0
    1caa:	      |   movea.l 60(sp),a0
    1cae:	      |   adda.l d0,a0
    1cb0:	      |   move.l (a0),48(sp)
    1cb4:	   /--|-- bra.s 1d10 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    1cb6:	   |  \-> move.l 18b2c <bundleFolder>,d0
    1cbc:	   |      pea 14676 <PutChar+0x2dc>
    1cc2:	   |      move.l d0,-(sp)
    1cc4:	   |      jsr 10f2e <joinStrings>
    1cca:	   |      addq.l #8,sp
    1ccc:	   |      move.l d0,48(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    1cd0:	   |      move.l 48(sp),-(sp)
    1cd4:	   |      jsr 10e28 <fileExists>
    1cda:	   |      addq.l #4,sp
    1cdc:	   |      tst.b d0
    1cde:	   +----- bne.s 1d10 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    1ce0:	   |      move.l 48(sp),36(sp)
    1ce6:	   |      move.l 18bc0 <SysBase>,d0
    1cec:	   |      movea.l d0,a6
    1cee:	   |      movea.l 36(sp),a1
    1cf2:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    1cf6:	   |      move.l 18b2c <bundleFolder>,d0
    1cfc:	   |      pea 14683 <PutChar+0x2e9>
    1d02:	   |      move.l d0,-(sp)
    1d04:	   |      jsr 10f2e <joinStrings>
    1d0a:	   |      addq.l #8,sp
    1d0c:	   |      move.l d0,48(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    1d10:	   \----> pea 1468c <PutChar+0x2f2>
    1d16:	          jsr 13a4a <KPrintF>
    1d1c:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    1d1e:	          move.l 48(sp),-(sp)
    1d22:	          jsr 10e28 <fileExists>
    1d28:	          addq.l #4,sp
    1d2a:	          tst.b d0
    1d2c:	      /-- bne.s 1d84 <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    1d2e:	      |   move.l 18bc8 <DOSBase>,d0
    1d34:	      |   movea.l d0,a6
    1d36:	      |   jsr -60(a6)
    1d3a:	      |   move.l d0,28(sp)
    1d3e:	      |   move.l 28(sp),d0
    1d42:	      |   move.l d0,24(sp)
    1d46:	      |   move.l #83596,20(sp)
    1d4e:	      |   moveq #21,d0
    1d50:	      |   move.l d0,16(sp)
    1d54:	      |   move.l 18bc8 <DOSBase>,d0
    1d5a:	      |   movea.l d0,a6
    1d5c:	      |   move.l 24(sp),d1
    1d60:	      |   move.l 20(sp),d2
    1d64:	      |   move.l 16(sp),d3
    1d68:	      |   jsr -48(a6)
    1d6c:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    1d70:	      |   pea 1468c <PutChar+0x2f2>
    1d76:	      |   jsr 13a4a <KPrintF>
    1d7c:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    1d7e:	      |   moveq #0,d0
    1d80:	/-----|-- bra.w 1f6e <main_sludge+0x378>
	}

	KPrintF("Setgamefilepath\n");
    1d84:	|     \-> pea 146a2 <PutChar+0x308>
    1d8a:	|         jsr 13a4a <KPrintF>
    1d90:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    1d92:	|         move.l 48(sp),-(sp)
    1d96:	|         jsr 1f78 <setGameFilePath>
    1d9c:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    1d9e:	|         move.l 48(sp),-(sp)
    1da2:	|         jsr 32ac <initSludge>
    1da8:	|         addq.l #4,sp
    1daa:	|         tst.w d0
    1dac:	|     /-- bne.s 1db4 <main_sludge+0x1be>
    1dae:	|     |   moveq #0,d0
    1db0:	+-----|-- bra.w 1f6e <main_sludge+0x378>
	
	if( winWidth != 320 || winHeight != 256) {
    1db4:	|     \-> move.l 18b14 <winWidth>,d0
    1dba:	|         cmpi.l #320,d0
    1dc0:	|     /-- bne.s 1dd0 <main_sludge+0x1da>
    1dc2:	|     |   move.l 18b18 <winHeight>,d0
    1dc8:	|     |   cmpi.l #256,d0
    1dce:	|  /--|-- beq.s 1df2 <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    1dd0:	|  |  \-> pea 146b3 <PutChar+0x319>
    1dd6:	|  |      jsr 13a4a <KPrintF>
    1ddc:	|  |      addq.l #4,sp
		winWidth = 320;
    1dde:	|  |      move.l #320,18b14 <winWidth>
		winHeight = 256;
    1de8:	|  |      move.l #256,18b18 <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    1df2:	|  \----> pea 14730 <PutChar+0x396>
    1df8:	|         jsr 13a4a <KPrintF>
    1dfe:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    1e00:	|         move.l 18b18 <winHeight>,d0
    1e06:	|         move.l d0,d1
    1e08:	|         move.l 18b14 <winWidth>,d0
    1e0e:	|         move.l d1,-(sp)
    1e10:	|         move.l d0,-(sp)
    1e12:	|         jsr a716 <resizeBackdrop>
    1e18:	|         addq.l #8,sp
    1e1a:	|         tst.w d0
    1e1c:	|     /-- bne.s 1e32 <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    1e1e:	|     |   pea 14743 <PutChar+0x3a9>
    1e24:	|     |   jsr 13a4a <KPrintF>
    1e2a:	|     |   addq.l #4,sp
		return FALSE;
    1e2c:	|     |   moveq #0,d0
    1e2e:	+-----|-- bra.w 1f6e <main_sludge+0x378>
	}

	KPrintF("Init People\n");
    1e32:	|     \-> pea 14769 <PutChar+0x3cf>
    1e38:	|         jsr 13a4a <KPrintF>
    1e3e:	|         addq.l #4,sp
	if (! initPeople ())
    1e40:	|         jsr 7e28 <initPeople>
    1e46:	|         tst.w d0
    1e48:	|     /-- bne.s 1e5e <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    1e4a:	|     |   pea 14776 <PutChar+0x3dc>
    1e50:	|     |   jsr 13a4a <KPrintF>
    1e56:	|     |   addq.l #4,sp
		return FALSE;
    1e58:	|     |   moveq #0,d0
    1e5a:	+-----|-- bra.w 1f6e <main_sludge+0x378>
	}

	KPrintF("Init Floor\n");
    1e5e:	|     \-> pea 14797 <PutChar+0x3fd>
    1e64:	|         jsr 13a4a <KPrintF>
    1e6a:	|         addq.l #4,sp
	if (! initFloor ())
    1e6c:	|         jsr 12e00 <initFloor>
    1e72:	|         tst.w d0
    1e74:	|     /-- bne.s 1e8a <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    1e76:	|     |   pea 147a3 <PutChar+0x409>
    1e7c:	|     |   jsr 13a4a <KPrintF>
    1e82:	|     |   addq.l #4,sp
		
		return FALSE;
    1e84:	|     |   moveq #0,d0
    1e86:	+-----|-- bra.w 1f6e <main_sludge+0x378>
	}

	KPrintF("Init Objecttype\n");
    1e8a:	|     \-> pea 147c3 <cursors.c.412ac4f3+0x1a>
    1e90:	|         jsr 13a4a <KPrintF>
    1e96:	|         addq.l #4,sp
	if (! initObjectTypes ())
    1e98:	|         jsr a8d2 <initObjectTypes>
    1e9e:	|         tst.w d0
    1ea0:	|     /-- bne.s 1eb6 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    1ea2:	|     |   pea 147d4 <cursors.c.412ac4f3+0x2b>
    1ea8:	|     |   jsr 13a4a <KPrintF>
    1eae:	|     |   addq.l #4,sp
		return FALSE;
    1eb0:	|     |   moveq #0,d0
    1eb2:	+-----|-- bra.w 1f6e <main_sludge+0x378>
	}

	KPrintF("Init speech\n");
    1eb6:	|     \-> pea 147fa <cursors.c.412ac4f3+0x51>
    1ebc:	|         jsr 13a4a <KPrintF>
    1ec2:	|         addq.l #4,sp
	initSpeech ();
    1ec4:	|         jsr 5676 <initSpeech>
	KPrintF("Init status bar\n");
    1eca:	|         pea 14807 <cursors.c.412ac4f3+0x5e>
    1ed0:	|         jsr 13a4a <KPrintF>
    1ed6:	|         addq.l #4,sp
	initStatusBar ();
    1ed8:	|         jsr 513a <initStatusBar>

	KPrintF("Get numbered string\n");
    1ede:	|         pea 14818 <cursors.c.412ac4f3+0x6f>
    1ee4:	|         jsr 13a4a <KPrintF>
    1eea:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    1eec:	|         pea 1 <_start+0x1>
    1ef0:	|         jsr 4458 <getNumberedString>
    1ef6:	|         addq.l #4,sp
    1ef8:	|         move.l d0,18b24 <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    1efe:	|         pea 1482d <cursors.c.412ac4f3+0x84>
    1f04:	|         jsr 13a4a <KPrintF>
    1f0a:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    1f0c:	|         move.l 18b90 <noStack>,d0
    1f12:	|         pea 1 <_start+0x1>
    1f16:	|         move.l d0,-(sp)
    1f18:	|         clr.l -(sp)
    1f1a:	|         clr.l -(sp)
    1f1c:	|         clr.l -(sp)
    1f1e:	|         jsr 42e0 <startNewFunctionNum>
    1f24:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    1f28:	|         pea 14845 <cursors.c.412ac4f3+0x9c>
    1f2e:	|         jsr 13a4a <KPrintF>
    1f34:	|         addq.l #4,sp

	weAreDoneSoQuit = 0;
    1f36:	|         clr.l 18b30 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {				
    1f3c:	|     /-- bra.s 1f50 <main_sludge+0x35a>
		sludgeDisplay ();
    1f3e:	|  /--|-> jsr 4286 <sludgeDisplay>
		handleInput();
    1f44:	|  |  |   jsr 32a4 <handleInput>
		WaitVbl();
    1f4a:	|  |  |   jsr 1397e <WaitVbl>
	while ( !weAreDoneSoQuit ) {				
    1f50:	|  |  \-> move.l 18b30 <weAreDoneSoQuit>,d0
    1f56:	|  \----- beq.s 1f3e <main_sludge+0x348>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    1f58:	|         move.l 48(sp),32(sp)
    1f5e:	|         move.l 18bc0 <SysBase>,d0
    1f64:	|         movea.l d0,a6
    1f66:	|         movea.l 32(sp),a1
    1f6a:	|         jsr -690(a6)
}
    1f6e:	\-------> movem.l (sp)+,d2-d3/a6
    1f72:	          lea 40(sp),sp
    1f76:	          rts

00001f78 <setGameFilePath>:

void setGameFilePath (char * f) {
    1f78:	          lea -1104(sp),sp
    1f7c:	          move.l a6,-(sp)
    1f7e:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    1f80:	          move.l #1112,d0
    1f86:	          add.l sp,d0
    1f88:	          addi.l #-1102,d0
    1f8e:	          move.l d0,1100(sp)
    1f92:	          move.l #998,1096(sp)
    1f9a:	          move.l 18bc8 <DOSBase>,d0
    1fa0:	          movea.l d0,a6
    1fa2:	          move.l 1100(sp),d1
    1fa6:	          move.l 1096(sp),d2
    1faa:	          jsr -564(a6)
    1fae:	          move.w d0,1094(sp)
    1fb2:	          move.w 1094(sp),d0
    1fb6:	      /-- bne.s 1fc6 <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    1fb8:	      |   pea 14858 <cursors.c.412ac4f3+0xaf>
    1fbe:	      |   jsr 13a4a <KPrintF>
    1fc4:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    1fc6:	      \-> moveq #-1,d0
    1fc8:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    1fcc:	          clr.l 1104(sp)
    1fd0:	   /----- bra.s 1fee <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    1fd2:	/--|----> move.l 1104(sp),d0
    1fd6:	|  |      movea.l 1116(sp),a0
    1fda:	|  |      adda.l d0,a0
    1fdc:	|  |      move.b (a0),d0
    1fde:	|  |      cmpi.b #47,d0
    1fe2:	|  |  /-- bne.s 1fea <setGameFilePath+0x72>
    1fe4:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    1fea:	|  |  \-> addq.l #1,1104(sp)
    1fee:	|  \----> move.l 1104(sp),d0
    1ff2:	|         movea.l 1116(sp),a0
    1ff6:	|         adda.l d0,a0
    1ff8:	|         move.b (a0),d0
    1ffa:	\-------- bne.s 1fd2 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    1ffc:	          moveq #-1,d0
    1ffe:	          cmp.l 1108(sp),d0
    2002:	   /----- beq.s 207c <setGameFilePath+0x104>
		f[got] = 0;	
    2004:	   |      move.l 1108(sp),d0
    2008:	   |      movea.l 1116(sp),a0
    200c:	   |      adda.l d0,a0
    200e:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    2010:	   |      move.l 1116(sp),1090(sp)
    2016:	   |      moveq #-2,d0
    2018:	   |      move.l d0,1086(sp)
    201c:	   |      move.l 18bc8 <DOSBase>,d0
    2022:	   |      movea.l d0,a6
    2024:	   |      move.l 1090(sp),d1
    2028:	   |      move.l 1086(sp),d2
    202c:	   |      jsr -84(a6)
    2030:	   |      move.l d0,1082(sp)
    2034:	   |      move.l 1082(sp),d0
    2038:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    203c:	   |      move.l 1078(sp),1074(sp)
    2042:	   |      move.l 18bc8 <DOSBase>,d0
    2048:	   |      movea.l d0,a6
    204a:	   |      move.l 1074(sp),d1
    204e:	   |      jsr -126(a6)
    2052:	   |      move.l d0,1070(sp)
    2056:	   |      move.l 1070(sp),d0
    205a:	   |  /-- bne.s 206e <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    205c:	   |  |   move.l 1116(sp),-(sp)
    2060:	   |  |   pea 1487e <cursors.c.412ac4f3+0xd5>
    2066:	   |  |   jsr 13a4a <KPrintF>
    206c:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    206e:	   |  \-> move.l 1108(sp),d0
    2072:	   |      movea.l 1116(sp),a0
    2076:	   |      adda.l d0,a0
    2078:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    207c:	   \----> move.l #400,1066(sp)
    2084:	          clr.l 1062(sp)
    2088:	          move.l 18bc0 <SysBase>,d0
    208e:	          movea.l d0,a6
    2090:	          move.l 1066(sp),d0
    2094:	          move.l 1062(sp),d1
    2098:	          jsr -684(a6)
    209c:	          move.l d0,1058(sp)
    20a0:	          move.l 1058(sp),d0
    20a4:	          move.l d0,18b28 <gamePath>
	if (gamePath==0) {
    20aa:	          move.l 18b28 <gamePath>,d0
    20b0:	      /-- bne.s 20c4 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    20b2:	      |   pea 148b1 <cursors.c.412ac4f3+0x108>
    20b8:	      |   jsr 13a4a <KPrintF>
    20be:	      |   addq.l #4,sp
    20c0:	   /--|-- bra.w 21ac <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    20c4:	   |  \-> move.l 18b28 <gamePath>,1054(sp)
    20cc:	   |      moveq #-2,d0
    20ce:	   |      move.l d0,1050(sp)
    20d2:	   |      move.l 18bc8 <DOSBase>,d0
    20d8:	   |      movea.l d0,a6
    20da:	   |      move.l 1054(sp),d1
    20de:	   |      move.l 1050(sp),d2
    20e2:	   |      jsr -84(a6)
    20e6:	   |      move.l d0,1046(sp)
    20ea:	   |      move.l 1046(sp),d0
    20ee:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    20f2:	   |      move.l 1042(sp),1038(sp)
    20f8:	   |      move.l 18bc8 <DOSBase>,d0
    20fe:	   |      movea.l d0,a6
    2100:	   |      move.l 1038(sp),d1
    2104:	   |      jsr -126(a6)
    2108:	   |      move.l d0,1034(sp)
    210c:	   |      move.l 1034(sp),d0
    2110:	   |  /-- bne.s 2120 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    2112:	   |  |   pea 148ec <cursors.c.412ac4f3+0x143>
    2118:	   |  |   jsr 13a4a <KPrintF>
    211e:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    2120:	   |  \-> move.l #1112,d0
    2126:	   |      add.l sp,d0
    2128:	   |      addi.l #-1102,d0
    212e:	   |      move.l d0,1030(sp)
    2132:	   |      moveq #-2,d0
    2134:	   |      move.l d0,1026(sp)
    2138:	   |      move.l 18bc8 <DOSBase>,d0
    213e:	   |      movea.l d0,a6
    2140:	   |      move.l 1030(sp),d1
    2144:	   |      move.l 1026(sp),d2
    2148:	   |      jsr -84(a6)
    214c:	   |      move.l d0,1022(sp)
    2150:	   |      move.l 1022(sp),d0
    2154:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    2158:	   |      move.l 1042(sp),1018(sp)
    215e:	   |      move.l 18bc8 <DOSBase>,d0
    2164:	   |      movea.l d0,a6
    2166:	   |      move.l 1018(sp),d1
    216a:	   |      jsr -126(a6)
    216e:	   |      move.l d0,1014(sp)
    2172:	   |      move.l 1014(sp),d0
    2176:	   |  /-- bne.s 218c <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    2178:	   |  |   moveq #10,d0
    217a:	   |  |   add.l sp,d0
    217c:	   |  |   move.l d0,-(sp)
    217e:	   |  |   pea 14918 <cursors.c.412ac4f3+0x16f>
    2184:	   |  |   jsr 13a4a <KPrintF>
    218a:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    218c:	   |  \-> move.l 18b28 <gamePath>,d0
    2192:	   +----- beq.s 21ac <setGameFilePath+0x234>
    2194:	   |      move.l 18b28 <gamePath>,1010(sp)
    219c:	   |      move.l 18bc0 <SysBase>,d0
    21a2:	   |      movea.l d0,a6
    21a4:	   |      movea.l 1010(sp),a1
    21a8:	   |      jsr -690(a6)
}
    21ac:	   \----> move.l (sp)+,d2
    21ae:	          movea.l (sp)+,a6
    21b0:	          lea 1104(sp),sp
    21b4:	          rts

000021b6 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    21b6:	/-------> lea -16(sp),sp
    21ba:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    21bc:	|         move.l 24(sp),-(sp)
    21c0:	|         jsr 4068 <pauseFunction>
    21c6:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    21c8:	|     /-- bra.s 21da <abortFunction+0x24>
    21ca:	|  /--|-> moveq #24,d0
    21cc:	|  |  |   add.l 24(sp),d0
    21d0:	|  |  |   move.l d0,-(sp)
    21d2:	|  |  |   jsr 12386 <trimStack>
    21d8:	|  |  |   addq.l #4,sp
    21da:	|  |  \-> movea.l 24(sp),a0
    21de:	|  |      move.l 24(a0),d0
    21e2:	|  \----- bne.s 21ca <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    21e4:	|         movea.l 24(sp),a0
    21e8:	|         move.l 4(a0),12(sp)
    21ee:	|         move.l 18bc0 <SysBase>,d0
    21f4:	|         movea.l d0,a6
    21f6:	|         movea.l 12(sp),a1
    21fa:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    21fe:	|         clr.l 16(sp)
    2202:	|     /-- bra.s 2222 <abortFunction+0x6c>
    2204:	|  /--|-> movea.l 24(sp),a0
    2208:	|  |  |   move.l 20(a0),d1
    220c:	|  |  |   move.l 16(sp),d0
    2210:	|  |  |   lsl.l #3,d0
    2212:	|  |  |   add.l d1,d0
    2214:	|  |  |   move.l d0,-(sp)
    2216:	|  |  |   jsr 11c50 <unlinkVar>
    221c:	|  |  |   addq.l #4,sp
    221e:	|  |  |   addq.l #1,16(sp)
    2222:	|  |  \-> movea.l 24(sp),a0
    2226:	|  |      move.l 8(a0),d0
    222a:	|  |      cmp.l 16(sp),d0
    222e:	|  \----- bgt.s 2204 <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    2230:	|         movea.l 24(sp),a0
    2234:	|         move.l 20(a0),8(sp)
    223a:	|         move.l 18bc0 <SysBase>,d0
    2240:	|         movea.l d0,a6
    2242:	|         movea.l 8(sp),a1
    2246:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    224a:	|         moveq #28,d0
    224c:	|         add.l 24(sp),d0
    2250:	|         move.l d0,-(sp)
    2252:	|         jsr 11c50 <unlinkVar>
    2258:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    225a:	|         movea.l 24(sp),a0
    225e:	|         move.l 40(a0),d0
    2262:	|     /-- beq.s 2274 <abortFunction+0xbe>
    2264:	|     |   movea.l 24(sp),a0
    2268:	|     |   move.l 40(a0),d0
    226c:	|     |   move.l d0,-(sp)
    226e:	\-----|-- jsr 21b6 <abortFunction>(pc)
    2272:	      |   addq.l #4,sp
	FreeVec(fun);
    2274:	      \-> move.l 24(sp),4(sp)
    227a:	          move.l 18bc0 <SysBase>,d0
    2280:	          movea.l d0,a6
    2282:	          movea.l 4(sp),a1
    2286:	          jsr -690(a6)
	fun = NULL;
    228a:	          clr.l 24(sp)
}
    228e:	          nop
    2290:	          movea.l (sp)+,a6
    2292:	          lea 16(sp),sp
    2296:	          rts

00002298 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    2298:	          subq.l #8,sp
	int n = 0;
    229a:	          clr.l 4(sp)
	*killedMyself = FALSE;
    229e:	          movea.l 20(sp),a0
    22a2:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    22a4:	          move.l 18b58 <allRunningFunctions>,(sp)
	while (fun) {
    22aa:	   /----- bra.s 22d8 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    22ac:	/--|----> movea.l (sp),a0
    22ae:	|  |      move.l (a0),d0
    22b0:	|  |      cmp.l 12(sp),d0
    22b4:	|  |  /-- bne.s 22d2 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    22b6:	|  |  |   movea.l (sp),a0
    22b8:	|  |  |   move.w #1,54(a0)
			n++;
    22be:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    22c2:	|  |  |   move.l (sp),d0
    22c4:	|  |  |   cmp.l 16(sp),d0
    22c8:	|  |  +-- bne.s 22d2 <cancelAFunction+0x3a>
    22ca:	|  |  |   movea.l 20(sp),a0
    22ce:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    22d2:	|  |  \-> movea.l (sp),a0
    22d4:	|  |      move.l 44(a0),(sp)
	while (fun) {
    22d8:	|  \----> tst.l (sp)
    22da:	\-------- bne.s 22ac <cancelAFunction+0x14>
	}
	return n;
    22dc:	          move.l 4(sp),d0
}
    22e0:	          addq.l #8,sp
    22e2:	          rts

000022e4 <completeTimers>:


void completeTimers () {
    22e4:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    22e6:	          move.l 18b58 <allRunningFunctions>,(sp)

	while (thisFunction) {
    22ec:	   /----- bra.s 2302 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    22ee:	/--|----> movea.l (sp),a0
    22f0:	|  |      move.b 56(a0),d0
    22f4:	|  |  /-- bne.s 22fc <completeTimers+0x18>
    22f6:	|  |  |   movea.l (sp),a0
    22f8:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    22fc:	|  |  \-> movea.l (sp),a0
    22fe:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    2302:	|  \----> tst.l (sp)
    2304:	\-------- bne.s 22ee <completeTimers+0xa>
	}
}
    2306:	          nop
    2308:	          nop
    230a:	          addq.l #4,sp
    230c:	          rts

0000230e <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    230e:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    2312:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    2318:	                                                             movea.l 80(sp),a0
    231c:	                                                             move.w 54(a0),d0
    2320:	/----------------------------------------------------------- beq.w 31c0 <continueFunction+0xeb2>
		abortFunction (fun);
    2324:	|                                                            move.l 80(sp),-(sp)
    2328:	|                                                            jsr 21b6 <abortFunction>
    232e:	|                                                            addq.l #4,sp
		return TRUE;
    2330:	|                                                            moveq #1,d0
    2332:	|  /-------------------------------------------------------- bra.w 31ca <continueFunction+0xebc>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    2336:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    233c:	|  |  |                                                      movea.l 80(sp),a0
    2340:	|  |  |                                                      move.l 4(a0),d1
    2344:	|  |  |                                                      movea.l 80(sp),a0
    2348:	|  |  |                                                      move.l 36(a0),d0
    234c:	|  |  |                                                      lsl.l #3,d0
    234e:	|  |  |                                                      movea.l d1,a0
    2350:	|  |  |                                                      adda.l d0,a0
    2352:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    2358:	|  |  |                                                      movea.l 80(sp),a0
    235c:	|  |  |                                                      move.l 4(a0),d1
    2360:	|  |  |                                                      movea.l 80(sp),a0
    2364:	|  |  |                                                      move.l 36(a0),d0
    2368:	|  |  |                                                      lsl.l #3,d0
    236a:	|  |  |                                                      movea.l d1,a0
    236c:	|  |  |                                                      adda.l d0,a0
    236e:	|  |  |                                                      move.l (a0),64(sp)
		KPrintF("Processing Type %ld",com);
    2372:	|  |  |                                                      move.l 64(sp),-(sp)
    2376:	|  |  |                                                      pea 14a20 <cursors.c.412ac4f3+0x277>
    237c:	|  |  |                                                      jsr 13a4a <KPrintF>
    2382:	|  |  |                                                      addq.l #8,sp

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    2384:	|  |  |                                                      moveq #41,d0
    2386:	|  |  |                                                      cmp.l 64(sp),d0
    238a:	|  |  |  /-------------------------------------------------- bcs.w 3174 <continueFunction+0xe66>
    238e:	|  |  |  |                                                   move.l 64(sp),d0
    2392:	|  |  |  |                                                   add.l d0,d0
    2394:	|  |  |  |                                                   movea.l d0,a0
    2396:	|  |  |  |                                                   adda.l #9122,a0
    239c:	|  |  |  |                                                   move.w (a0),d0
    239e:	|  |  |  |                                                   jmp (23a2 <continueFunction+0x94>,pc,d0.w)
    23a2:	|  |  |  |                                                   bset d6,(a2)
    23a4:	|  |  |  |                                                   ori.w #2670,(a4)
    23a8:	|  |  |  |                                                   eori.w #2416,d6
    23ac:	|  |  |  |                                                   bchg d4,d2
    23ae:	|  |  |  |                                                   bclr d4,(a4)+
    23b0:	|  |  |  |                                                   andi.l #181013194,d4
    23b6:	|  |  |  |                                                   .short 0x0aca
    23b8:	|  |  |  |                                                   .short 0x0aca
    23ba:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    23c2:	|  |  |  |                                                   .short 0x0aca
    23c4:	|  |  |  |                                                   andi.w #906,-(a4)
    23c8:	|  |  |  |                                                   bchg d1,196(a2)
    23cc:	|  |  |  |                                                   bset d1,580(a4)
    23d0:	|  |  |  |                                                   bclr d1,2576(a2)
    23d4:	|  |  |  |                                                   andi.b #-56,2762(a2)
    23da:	|  |  |  |                                                   .short 0x0aca
    23dc:	|  |  |  |                                                   eori.l #63572682,d0
    23e2:	|  |  |  |                                                   .short 0x0aca
    23e4:	|  |  |  |                                                   bchg d3,-(a2)
    23e6:	|  |  |  |                                                   bchg #-36,(a2)
    23ea:	|  |  |  |                                                   .short 0x08cc
    23ec:	|  |  |  |                                                   addi.b #14,1038(a0)
    23f2:	|  |  |  |                                                   .short 0x040e
    23f4:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    23f8:	|  |  |  |                                                   ori.w #8232,(a0)
    23fc:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    2402:	|  |  |  |                                                   ori.w #12136,(a0)
    2406:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    240c:	|  |  |  |                                                   ori.w #12328,(a0)
    2410:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    2416:	|  |  |  |                                                   add.l 44(sp),d1
    241a:	|  |  |  |                                                   moveq #28,d0
    241c:	|  |  |  |                                                   add.l 80(sp),d0
    2420:	|  |  |  |                                                   move.l d1,-(sp)
    2422:	|  |  |  |                                                   move.l d0,-(sp)
    2424:	|  |  |  |                                                   jsr 11ebc <copyVariable>
    242a:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    242c:	|  |  |  |                                                   move.l 80(sp),-(sp)
    2430:	|  |  |  |                                                   jsr 31d0 <finishFunction>
    2436:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    2438:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    243e:	|  |  |  |                                                   move.l 80(sp),-(sp)
    2442:	|  |  |  |                                                   jsr 40aa <restartFunction>
    2448:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    244a:	|  |  |  |  /----------------------------------------------- bra.w 31a8 <continueFunction+0xe9a>
				finishFunction (fun);
    244e:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    2452:	|  |  |  |  |                                                jsr 31d0 <finishFunction>
    2458:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    245a:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    245e:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    2462:	|  |  |  |  +----------------------------------------------- bra.w 31a8 <continueFunction+0xe9a>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    2466:	|  |  |  |  |                                                movea.l 80(sp),a0
    246a:	|  |  |  |  |                                                move.l 28(a0),d0
    246e:	|  |  |  |  |                                                moveq #2,d1
    2470:	|  |  |  |  |                                                cmp.l d0,d1
    2472:	|  |  |  |  |                                            /-- beq.s 247e <continueFunction+0x170>
    2474:	|  |  |  |  |                                            |   moveq #4,d1
    2476:	|  |  |  |  |                                            |   cmp.l d0,d1
    2478:	|  |  |  |  |                                         /--|-- beq.s 24cc <continueFunction+0x1be>
    247a:	|  |  |  |  |                                /--------|--|-- bra.w 25b4 <continueFunction+0x2a6>
				case SVT_FUNC:
				pauseFunction (fun);		
    247e:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    2482:	|  |  |  |  |                                |        |      jsr 4068 <pauseFunction>
    2488:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    248a:	|  |  |  |  |                                |        |      moveq #24,d0
    248c:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    2490:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    2494:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    2498:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    249c:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    249e:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    24a2:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    24a6:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    24a8:	|  |  |  |  |                                |        |      jsr 42e0 <startNewFunctionNum>
    24ae:	|  |  |  |  |                                |        |      lea 20(sp),sp
    24b2:	|  |  |  |  |                                |        |      tst.l d0
    24b4:	|  |  |  |  |                                |        |  /-- bne.s 24bc <continueFunction+0x1ae>
    24b6:	|  |  |  |  |                                |        |  |   clr.w d0
    24b8:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 31ca <continueFunction+0xebc>
				fun = allRunningFunctions;
    24bc:	|  |  |  |  |                                |        |  \-> move.l 18b58 <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    24c4:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    24c8:	|  |  |  |  |                                |  /-----|----- bra.w 25c8 <continueFunction+0x2ba>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    24cc:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    24d0:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    24d4:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    24d8:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    24dc:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    24de:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    24e0:	|  |  |  |  |                                |  |            jsr 106e4 <callBuiltIn>
    24e6:	|  |  |  |  |                                |  |            lea 12(sp),sp
    24ea:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    24ee:	|  |  |  |  |                                |  |            moveq #5,d0
    24f0:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    24f4:	|  |  |  |  |                                |  |  /-------- bcs.w 25b0 <continueFunction+0x2a2>
    24f8:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    24fc:	|  |  |  |  |                                |  |  |         add.l d0,d0
    24fe:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    2500:	|  |  |  |  |                                |  |  |         adda.l #9484,a0
    2506:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    2508:	|  |  |  |  |                                |  |  |         jmp (250c <continueFunction+0x1fe>,pc,d0.w)
    250c:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    2512:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    2516:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    251c:	|  |  |  |  |                                |  |  |         tst.b (-71,a4,d4.l:8)
    2520:	|  |  |  |  |                                |  |  |         ori.b #74,d1
    2524:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    2526:	|  |  |  |  |                                |  |  |         clr.w d0
    2528:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 31ca <continueFunction+0xebc>

						case BR_PAUSE:
						pauseFunction (fun);
    252c:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    2530:	|  |  |  |  |                                |  |  |         jsr 4068 <pauseFunction>
    2536:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    2538:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    253c:	|  |  |  |  |                                |  |  |  /----- bra.s 25b2 <continueFunction+0x2a4>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    253e:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    2542:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    2546:	|  |  |  |  |                                |  |  |  +----- bra.s 25b2 <continueFunction+0x2a4>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    2548:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    254c:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    2552:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    2554:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    2558:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    255c:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    2560:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    2562:	|  |  |  |  |                                |  |  |  |      jsr 122f4 <setVariable>
    2568:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    256c:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    2570:	|  |  |  |  |                                |  |  |  |      jsr 4068 <pauseFunction>
    2576:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    2578:	|  |  |  |  |                                |  |  |  |      move.l 18b90 <noStack>,d1
    257e:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    2582:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    2584:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    2586:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    258a:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    258c:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    258e:	|  |  |  |  |                                |  |  |  |      jsr 42e0 <startNewFunctionNum>
    2594:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    2598:	|  |  |  |  |                                |  |  |  |      tst.l d0
    259a:	|  |  |  |  |                                |  |  |  |  /-- bne.s 25a2 <continueFunction+0x294>
    259c:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    259e:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 31ca <continueFunction+0xebc>
							fun = allRunningFunctions;
    25a2:	|  |  |  |  |                                |  |  |  |  \-> move.l 18b58 <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    25aa:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    25ae:	|  |  |  |  |                                |  |  |  +----- bra.s 25b2 <continueFunction+0x2a4>

						default:
						break;
    25b0:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    25b2:	|  |  |  |  |                                |  +-----\----X bra.s 25c8 <continueFunction+0x2ba>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    25b4:	|  |  |  |  |                                \--|----------> pea 14a7f <cursors.c.412ac4f3+0x2d6>
    25ba:	|  |  |  |  |                                   |            jsr 13a4a <KPrintF>
    25c0:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    25c2:	|  |  |  |  |                                   |            clr.w d0
    25c4:	|  +--|--|--|-----------------------------------|----------- bra.w 31ca <continueFunction+0xebc>
			}
			break;
    25c8:	|  |  |  |  +-----------------------------------\----------X bra.w 31a8 <continueFunction+0xe9a>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    25cc:	|  |  |  |  |                                                moveq #28,d0
    25ce:	|  |  |  |  |                                                add.l 80(sp),d0
    25d2:	|  |  |  |  |                                                clr.l -(sp)
    25d4:	|  |  |  |  |                                                clr.l -(sp)
    25d6:	|  |  |  |  |                                                move.l d0,-(sp)
    25d8:	|  |  |  |  |                                                jsr 122f4 <setVariable>
    25de:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    25e2:	|  |  |  |  +----------------------------------------------- bra.w 31a8 <continueFunction+0xe9a>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    25e6:	|  |  |  |  |                                                move.l 68(sp),d1
    25ea:	|  |  |  |  |                                                moveq #28,d0
    25ec:	|  |  |  |  |                                                add.l 80(sp),d0
    25f0:	|  |  |  |  |                                                move.l d1,-(sp)
    25f2:	|  |  |  |  |                                                pea 5 <_start+0x5>
    25f6:	|  |  |  |  |                                                move.l d0,-(sp)
    25f8:	|  |  |  |  |                                                jsr 122f4 <setVariable>
    25fe:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    2602:	|  |  |  |  +----------------------------------------------- bra.w 31a8 <continueFunction+0xe9a>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    2606:	|  |  |  |  |                                                move.l 68(sp),d1
    260a:	|  |  |  |  |                                                moveq #28,d0
    260c:	|  |  |  |  |                                                add.l 80(sp),d0
    2610:	|  |  |  |  |                                                move.l d1,-(sp)
    2612:	|  |  |  |  |                                                pea 1 <_start+0x1>
    2616:	|  |  |  |  |                                                move.l d0,-(sp)
    2618:	|  |  |  |  |                                                jsr 122f4 <setVariable>
    261e:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    2622:	|  |  |  |  +----------------------------------------------- bra.w 31a8 <continueFunction+0xe9a>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    2626:	|  |  |  |  |                                                moveq #28,d0
    2628:	|  |  |  |  |                                                add.l 80(sp),d0
    262c:	|  |  |  |  |                                                movea.l 80(sp),a0
    2630:	|  |  |  |  |                                                movea.l 20(a0),a0
    2634:	|  |  |  |  |                                                move.l 68(sp),d1
    2638:	|  |  |  |  |                                                lsl.l #3,d1
    263a:	|  |  |  |  |                                                add.l a0,d1
    263c:	|  |  |  |  |                                                move.l d0,-(sp)
    263e:	|  |  |  |  |                                                move.l d1,-(sp)
    2640:	|  |  |  |  |                                                jsr 11ebc <copyVariable>
    2646:	|  |  |  |  |                                                addq.l #8,sp
    2648:	|  |  |  |  |                                                tst.w d0
    264a:	|  |  |  |  |  /-------------------------------------------- bne.w 3186 <continueFunction+0xe78>
    264e:	|  |  |  |  |  |                                             clr.w d0
    2650:	|  +--|--|--|--|-------------------------------------------- bra.w 31ca <continueFunction+0xebc>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    2654:	|  |  |  |  |  |                                             moveq #28,d0
    2656:	|  |  |  |  |  |                                             add.l 80(sp),d0
    265a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    265c:	|  |  |  |  |  |                                             jsr 11f42 <getBoolean>
    2662:	|  |  |  |  |  |                                             addq.l #4,sp
    2664:	|  |  |  |  |  |                                             tst.w d0
    2666:	|  |  |  |  |  |                                      /----- beq.s 2682 <continueFunction+0x374>
    2668:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    266c:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    2670:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    2672:	|  |  |  |  |  |                                      |      jsr 11f42 <getBoolean>
    2678:	|  |  |  |  |  |                                      |      addq.l #4,sp
    267a:	|  |  |  |  |  |                                      |      tst.w d0
    267c:	|  |  |  |  |  |                                      +----- beq.s 2682 <continueFunction+0x374>
    267e:	|  |  |  |  |  |                                      |      moveq #1,d0
    2680:	|  |  |  |  |  |                                      |  /-- bra.s 2684 <continueFunction+0x376>
    2682:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    2684:	|  |  |  |  |  |                                         \-> moveq #28,d1
    2686:	|  |  |  |  |  |                                             add.l 80(sp),d1
    268a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    268c:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    2690:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2692:	|  |  |  |  |  |                                             jsr 122f4 <setVariable>
    2698:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    269c:	|  |  |  |  |  |                                             moveq #24,d0
    269e:	|  |  |  |  |  |                                             add.l 80(sp),d0
    26a2:	|  |  |  |  |  |                                             move.l d0,-(sp)
    26a4:	|  |  |  |  |  |                                             jsr 12386 <trimStack>
    26aa:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    26ac:	|  |  |  |  +--|-------------------------------------------- bra.w 31a8 <continueFunction+0xe9a>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    26b0:	|  |  |  |  |  |                                             moveq #28,d0
    26b2:	|  |  |  |  |  |                                             add.l 80(sp),d0
    26b6:	|  |  |  |  |  |                                             move.l d0,-(sp)
    26b8:	|  |  |  |  |  |                                             jsr 11f42 <getBoolean>
    26be:	|  |  |  |  |  |                                             addq.l #4,sp
    26c0:	|  |  |  |  |  |                                             tst.w d0
    26c2:	|  |  |  |  |  |                                         /-- bne.s 26da <continueFunction+0x3cc>
    26c4:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    26c8:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    26cc:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    26ce:	|  |  |  |  |  |                                         |   jsr 11f42 <getBoolean>
    26d4:	|  |  |  |  |  |                                         |   addq.l #4,sp
    26d6:	|  |  |  |  |  |                                         |   tst.w d0
    26d8:	|  |  |  |  |  |                                      /--|-- beq.s 26de <continueFunction+0x3d0>
    26da:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    26dc:	|  |  |  |  |  |                                      |  /-- bra.s 26e0 <continueFunction+0x3d2>
    26de:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    26e0:	|  |  |  |  |  |                                         \-> moveq #28,d1
    26e2:	|  |  |  |  |  |                                             add.l 80(sp),d1
    26e6:	|  |  |  |  |  |                                             move.l d0,-(sp)
    26e8:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    26ec:	|  |  |  |  |  |                                             move.l d1,-(sp)
    26ee:	|  |  |  |  |  |                                             jsr 122f4 <setVariable>
    26f4:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    26f8:	|  |  |  |  |  |                                             moveq #24,d0
    26fa:	|  |  |  |  |  |                                             add.l 80(sp),d0
    26fe:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2700:	|  |  |  |  |  |                                             jsr 12386 <trimStack>
    2706:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    2708:	|  |  |  |  +--|-------------------------------------------- bra.w 31a8 <continueFunction+0xe9a>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    270c:	|  |  |  |  |  |                                             move.l 68(sp),d1
    2710:	|  |  |  |  |  |                                             moveq #28,d0
    2712:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2716:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2718:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    271c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    271e:	|  |  |  |  |  |                                             jsr 122f4 <setVariable>
    2724:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    2728:	|  |  |  |  +--|-------------------------------------------- bra.w 31a8 <continueFunction+0xe9a>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    272c:	|  |  |  |  |  |                                             move.l 68(sp),d1
    2730:	|  |  |  |  |  |                                             moveq #28,d0
    2732:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2736:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2738:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    273c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    273e:	|  |  |  |  |  |                                             jsr 122f4 <setVariable>
    2744:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    2748:	|  |  |  |  +--|-------------------------------------------- bra.w 31a8 <continueFunction+0xe9a>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    274c:	|  |  |  |  |  |                                             move.l 68(sp),d1
    2750:	|  |  |  |  |  |                                             moveq #28,d0
    2752:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2756:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2758:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    275c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    275e:	|  |  |  |  |  |                                             jsr 122f4 <setVariable>
    2764:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    2768:	|  |  |  |  +--|-------------------------------------------- bra.w 31a8 <continueFunction+0xe9a>

			case SLU_UNREG:
			if (dialogValue != 1) {
    276c:	|  |  |  |  |  |                                             move.l 18b20 <dialogValue>,d0
    2772:	|  |  |  |  |  |                                             moveq #1,d1
    2774:	|  |  |  |  |  |                                             cmp.l d0,d1
    2776:	|  |  |  |  |  |  /----------------------------------------- beq.w 318a <continueFunction+0xe7c>
				KPrintF(ERROR_HACKER);
    277a:	|  |  |  |  |  |  |                                          pea 14a94 <cursors.c.412ac4f3+0x2eb>
    2780:	|  |  |  |  |  |  |                                          jsr 13a4a <KPrintF>
    2786:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    2788:	|  |  |  |  |  |  |                                          clr.w d0
    278a:	|  +--|--|--|--|--|----------------------------------------- bra.w 31ca <continueFunction+0xebc>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    278e:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    2792:	|  |  |  |  |  |  |                                          moveq #28,d0
    2794:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    2798:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    279a:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    279c:	|  |  |  |  |  |  |                                          jsr 11a86 <loadStringToVar>
    27a2:	|  |  |  |  |  |  |                                          addq.l #8,sp
    27a4:	|  |  |  |  |  |  |                                          tst.w d0
    27a6:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 318e <continueFunction+0xe80>
					return FALSE;
    27aa:	|  |  |  |  |  |  |  |                                       clr.w d0
    27ac:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 31ca <continueFunction+0xebc>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    27b0:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    27b4:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    27b8:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    27ba:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    27bc:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    27be:	|  |  |  |  |  |  |  |                                /----- beq.s 281c <continueFunction+0x50e>
    27c0:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    27c2:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    27c4:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 29b0 <continueFunction+0x6a2>
    27c8:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    27ca:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 27d6 <continueFunction+0x4c8>
    27cc:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    27ce:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    27d0:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 281c <continueFunction+0x50e>
    27d2:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 29b0 <continueFunction+0x6a2>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    27d6:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    27d8:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    27dc:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 2808 <continueFunction+0x4fa>
					setVariable (&fun -> reg, SVT_NULL, 0);
    27de:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    27e0:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    27e4:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    27e6:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    27e8:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    27ea:	|  |  |  |  |  |  |  |              |                 |  |   jsr 122f4 <setVariable>
    27f0:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    27f4:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    27f6:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    27fa:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    27fc:	|  |  |  |  |  |  |  |              |                 |  |   jsr 12386 <trimStack>
    2802:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    2804:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 29c6 <continueFunction+0x6b8>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    2808:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 14ad5 <thumbnail.c.7eb31449+0xf>
    280e:	|  |  |  |  |  |  |  |              |  |              |      jsr 13a4a <KPrintF>
    2814:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    2816:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    2818:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 31ca <continueFunction+0xebc>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    281c:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    2820:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    2824:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    2828:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    282a:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2840 <continueFunction+0x532>
					KPrintF((ERROR_INDEX_EMPTY));
    282c:	|  |  |  |  |  |  |  |              |  |                 |   pea 14b11 <thumbnail.c.7eb31449+0x4b>
    2832:	|  |  |  |  |  |  |  |              |  |                 |   jsr 13a4a <KPrintF>
    2838:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    283a:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    283c:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 31ca <continueFunction+0xebc>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    2840:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    2842:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    2846:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    2848:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    284c:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    2850:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    2852:	|  |  |  |  |  |  |  |              |  |                     jsr 11a02 <getValueType>
    2858:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    285c:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    285e:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2866 <continueFunction+0x558>
    2860:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    2862:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 31ca <continueFunction+0xebc>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    2866:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    286a:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    286e:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    2870:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    2872:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    2874:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2896 <continueFunction+0x588>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    2876:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    287a:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    287c:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    2880:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    2884:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    2888:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    288a:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    288c:	|  |  |  |  |  |  |  |              |  |                 |   jsr 1168c <fastArrayGetByIndex>
    2892:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    2894:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 28b6 <continueFunction+0x5a8>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    2896:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    289a:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    289c:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    28a0:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    28a4:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    28a8:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    28aa:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    28ac:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    28ae:	|  |  |  |  |  |  |  |              |  |              |      jsr 12316 <stackGetByIndex>
    28b4:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    28b6:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    28ba:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    28bc:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    28c0:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    28c2:	|  |  |  |  |  |  |  |              |  |                     jsr 12386 <trimStack>
    28c8:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    28ca:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    28ce:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 28ea <continueFunction+0x5dc>
						setVariable (&fun -> reg, SVT_NULL, 0);
    28d0:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    28d2:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    28d6:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    28d8:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    28da:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    28dc:	|  |  |  |  |  |  |  |              |  |                 |   jsr 122f4 <setVariable>
    28e2:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    28e6:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 29c4 <continueFunction+0x6b6>
    28ea:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    28ec:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    28f0:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 28fe <continueFunction+0x5f0>
    28f2:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    28f4:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    28f8:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 2948 <continueFunction+0x63a>
    28fa:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 2990 <continueFunction+0x682>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    28fe:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    2902:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    2906:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    290a:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    290c:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 11a02 <getValueType>
    2912:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    2916:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    2918:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 2920 <continueFunction+0x612>
    291a:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    291c:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 29aa <continueFunction+0x69c>
							setVariable (&fun -> reg, SVT_INT, ii);
    2920:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    2922:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    2924:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    2928:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    292a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    292e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    2930:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 122f4 <setVariable>
    2936:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    293a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    293c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    293e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    2942:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    2946:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 29ae <continueFunction+0x6a0>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    2948:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    294c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    2950:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    2954:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    2956:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 11a02 <getValueType>
    295c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    2960:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    2962:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 2968 <continueFunction+0x65a>
    2964:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    2966:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 29aa <continueFunction+0x69c>
							setVariable (&fun -> reg, SVT_INT, ii);
    2968:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    296a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    296c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    2970:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    2972:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    2976:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    2978:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 122f4 <setVariable>
    297e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    2982:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    2984:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    2986:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    298a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    298e:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 29ae <continueFunction+0x6a0>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    2990:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    2992:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    2996:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    2998:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    299c:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 11ebc <copyVariable>
    29a2:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    29a4:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    29a6:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 29c4 <continueFunction+0x6b6>
    29a8:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    29aa:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 31ca <continueFunction+0xebc>
				break;
    29ae:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 29c4 <continueFunction+0x6b6>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    29b0:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 14b2f <thumbnail.c.7eb31449+0x69>
    29b6:	|  |  |  |  |  |  |  |                 |  |                  jsr 13a4a <KPrintF>
    29bc:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    29be:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    29c0:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 31ca <continueFunction+0xebc>
				break;
    29c4:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    29c6:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 31a8 <continueFunction+0xe9a>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    29ca:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    29ce:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    29d2:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    29d4:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    29d6:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    29d8:	|  |  |  |  |  |  |  |                                   /-- beq.s 29e6 <continueFunction+0x6d8>
    29da:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    29dc:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    29de:	|  |  |  |  |  |  |  |                                /--|-- beq.w 2a92 <continueFunction+0x784>
    29e2:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 2af0 <continueFunction+0x7e2>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    29e6:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    29ea:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    29ee:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    29f2:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    29f4:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 2a0a <continueFunction+0x6fc>
					KPrintF((ERROR_INDEX_EMPTY));
    29f6:	|  |  |  |  |  |  |  |                             |  |  |   pea 14b11 <thumbnail.c.7eb31449+0x4b>
    29fc:	|  |  |  |  |  |  |  |                             |  |  |   jsr 13a4a <KPrintF>
    2a02:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    2a04:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    2a06:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 31ca <continueFunction+0xebc>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    2a0a:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    2a0c:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    2a10:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    2a12:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    2a16:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    2a1a:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    2a1c:	|  |  |  |  |  |  |  |                             |  |      jsr 11a02 <getValueType>
    2a22:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    2a26:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    2a28:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 2a30 <continueFunction+0x722>
    2a2a:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    2a2c:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 31ca <continueFunction+0xebc>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    2a30:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    2a34:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    2a38:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    2a3c:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    2a3e:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    2a42:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    2a44:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    2a48:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    2a4c:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    2a50:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    2a52:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    2a54:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    2a56:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    2a58:	|  |  |  |  |  |  |  |                             |  |      jsr 429c <stackSetByIndex>
    2a5e:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    2a62:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    2a64:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 2a6c <continueFunction+0x75e>
						return FALSE;
    2a66:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    2a68:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 31ca <continueFunction+0xebc>
					}
					trimStack (&fun -> stack);
    2a6c:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    2a6e:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    2a72:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    2a74:	|  |  |  |  |  |  |  |                             |  |      jsr 12386 <trimStack>
    2a7a:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    2a7c:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    2a7e:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    2a82:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    2a84:	|  |  |  |  |  |  |  |                             |  |      jsr 12386 <trimStack>
    2a8a:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    2a8c:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    2a8e:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 31a8 <continueFunction+0xe9a>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    2a92:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    2a94:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    2a98:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    2a9a:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    2a9e:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    2aa2:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    2aa4:	|  |  |  |  |  |  |  |                             |         jsr 11a02 <getValueType>
    2aaa:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    2aae:	|  |  |  |  |  |  |  |                             |         tst.w d0
    2ab0:	|  |  |  |  |  |  |  |                             |     /-- bne.s 2ab8 <continueFunction+0x7aa>
    2ab2:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    2ab4:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 31ca <continueFunction+0xebc>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    2ab8:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    2abc:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    2abe:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    2ac2:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    2ac6:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    2aca:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    2acc:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    2ace:	|  |  |  |  |  |  |  |                             |         jsr 1168c <fastArrayGetByIndex>
    2ad4:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    2ad6:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    2ada:	|  |  |  |  |  |  |  |                             |     /-- bne.s 2aea <continueFunction+0x7dc>
    2adc:	|  |  |  |  |  |  |  |                             |     |   pea 14b53 <thumbnail.c.7eb31449+0x8d>
    2ae2:	|  |  |  |  |  |  |  |                             |     |   jsr 13a4a <KPrintF>
    2ae8:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    2aea:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    2aec:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 31ca <continueFunction+0xebc>
				KPrintF((ERROR_INDEX_NONSTACK));
    2af0:	|  |  |  |  |  |  |  |                             \-------> pea 14b2f <thumbnail.c.7eb31449+0x69>
    2af6:	|  |  |  |  |  |  |  |                                       jsr 13a4a <KPrintF>
    2afc:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    2afe:	|  |  |  |  |  |  |  |                                       clr.w d0
    2b00:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 31ca <continueFunction+0xebc>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    2b04:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2b08:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    2b0c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2b10:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2b12:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2b14:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2b16:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2b1a:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    2b1e:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2b20:	|  |  |  |  |  |  |  |                                       jsr 11a02 <getValueType>
    2b26:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2b2a:	|  |  |  |  |  |  |  |                                       tst.w d0
    2b2c:	|  |  |  |  |  |  |  |                                   /-- bne.s 2b34 <continueFunction+0x826>
    2b2e:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2b30:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 31ca <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2b34:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    2b38:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2b3a:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2b3e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2b40:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2b44:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2b46:	|  |  |  |  |  |  |  |                                       jsr 122f4 <setVariable>
    2b4c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    2b50:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    2b54:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2b56:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    2b58:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2b5c:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    2b60:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2b64:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2b66:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2b68:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2b6a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2b6e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2b70:	|  |  |  |  |  |  |  |                                       jsr 122f4 <setVariable>
    2b76:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2b7a:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 31a8 <continueFunction+0xe9a>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    2b7e:	|  |  |  |  |  |  |  |                                       move.l 18b6e <globalVars>,d1
    2b84:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2b88:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2b8a:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2b8c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2b8e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2b92:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    2b96:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2b98:	|  |  |  |  |  |  |  |                                       jsr 11a02 <getValueType>
    2b9e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2ba2:	|  |  |  |  |  |  |  |                                       tst.w d0
    2ba4:	|  |  |  |  |  |  |  |                                   /-- bne.s 2bac <continueFunction+0x89e>
    2ba6:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2ba8:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 31ca <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2bac:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    2bb0:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2bb2:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2bb6:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2bb8:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2bbc:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2bbe:	|  |  |  |  |  |  |  |                                       jsr 122f4 <setVariable>
    2bc4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    2bc8:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    2bcc:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2bce:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    2bd0:	|  |  |  |  |  |  |  |                                       movea.l 18b6e <globalVars>,a0
    2bd6:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2bda:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2bdc:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2bde:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2be0:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2be4:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2be6:	|  |  |  |  |  |  |  |                                       jsr 122f4 <setVariable>
    2bec:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2bf0:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 31a8 <continueFunction+0xe9a>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    2bf4:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2bf8:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    2bfc:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2c00:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2c02:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2c04:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2c06:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2c0a:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    2c0e:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2c10:	|  |  |  |  |  |  |  |                                       jsr 11a02 <getValueType>
    2c16:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2c1a:	|  |  |  |  |  |  |  |                                       tst.w d0
    2c1c:	|  |  |  |  |  |  |  |                                   /-- bne.s 2c24 <continueFunction+0x916>
    2c1e:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2c20:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 31ca <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2c24:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    2c28:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2c2a:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2c2e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2c30:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2c34:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2c36:	|  |  |  |  |  |  |  |                                       jsr 122f4 <setVariable>
    2c3c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    2c40:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    2c44:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2c46:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    2c48:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2c4c:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    2c50:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2c54:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2c56:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2c58:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2c5a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2c5e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2c60:	|  |  |  |  |  |  |  |                                       jsr 122f4 <setVariable>
    2c66:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2c6a:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 31a8 <continueFunction+0xe9a>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    2c6e:	|  |  |  |  |  |  |  |                                       move.l 18b6e <globalVars>,d1
    2c74:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2c78:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2c7a:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2c7c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2c7e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2c82:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    2c86:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2c88:	|  |  |  |  |  |  |  |                                       jsr 11a02 <getValueType>
    2c8e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2c92:	|  |  |  |  |  |  |  |                                       tst.w d0
    2c94:	|  |  |  |  |  |  |  |                                   /-- bne.s 2c9c <continueFunction+0x98e>
    2c96:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2c98:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 31ca <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2c9c:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    2ca0:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2ca2:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2ca6:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2ca8:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2cac:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2cae:	|  |  |  |  |  |  |  |                                       jsr 122f4 <setVariable>
    2cb4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    2cb8:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    2cbc:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2cbe:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    2cc0:	|  |  |  |  |  |  |  |                                       movea.l 18b6e <globalVars>,a0
    2cc6:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2cca:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2ccc:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2cce:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2cd0:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2cd4:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2cd6:	|  |  |  |  |  |  |  |                                       jsr 122f4 <setVariable>
    2cdc:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2ce0:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 31a8 <continueFunction+0xe9a>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    2ce4:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2ce8:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    2cec:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2cf0:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2cf2:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    2cf4:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2cf6:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2cfa:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2cfc:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2cfe:	|  |  |  |  |  |  |  |                                       jsr 11ebc <copyVariable>
    2d04:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    2d06:	|  |  |  |  |  |  |  |                                       tst.w d0
    2d08:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 3192 <continueFunction+0xe84>
    2d0c:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    2d0e:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 31ca <continueFunction+0xebc>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    2d12:	|  |  |  |  |  |  |  |  |                                    move.l 18b6e <globalVars>,d1
    2d18:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    2d1c:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    2d1e:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    2d20:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    2d22:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    2d26:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    2d28:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    2d2a:	|  |  |  |  |  |  |  |  |                                    jsr 11ebc <copyVariable>
    2d30:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    2d32:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    2d34:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 3196 <continueFunction+0xe88>
    2d38:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    2d3a:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 31ca <continueFunction+0xebc>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    2d3e:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    2d40:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    2d44:	|  |  |  |  |  |  |  |  |  |                                 movea.l 18b6e <globalVars>,a0
    2d4a:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    2d4e:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    2d50:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    2d52:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    2d54:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    2d56:	|  |  |  |  |  |  |  |  |  |                                 jsr 11ebc <copyVariable>
    2d5c:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    2d5e:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    2d60:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 319a <continueFunction+0xe8c>
    2d64:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    2d66:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 31ca <continueFunction+0xebc>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    2d6a:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    2d6c:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    2d70:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    2d72:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    2d76:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    2d78:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    2d7a:	|  |  |  |  |  |  |  |  |  |  |                              jsr 1123e <addVarToStack>
    2d80:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    2d82:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    2d84:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 319e <continueFunction+0xe90>
    2d88:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    2d8a:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 31ca <continueFunction+0xebc>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    2d8e:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    2d90:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    2d94:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    2d96:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    2d9a:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    2d9c:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    2d9e:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 112c4 <addVarToStackQuick>
    2da4:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    2da6:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    2da8:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 31a2 <continueFunction+0xe94>
    2dac:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    2dae:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 31ca <continueFunction+0xebc>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    2db2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    2db4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    2db8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    2dba:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 11f42 <getBoolean>
    2dc0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    2dc2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    2dc4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    2dc6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    2dc8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    2dca:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    2dcc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    2dce:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    2dd2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    2dd4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    2dd8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    2dda:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 122f4 <setVariable>
    2de0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    2de4:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 31a8 <continueFunction+0xe9a>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    2de8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    2dea:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    2dee:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    2df0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 11f42 <getBoolean>
    2df6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    2df8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    2dfa:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 31a6 <continueFunction+0xe98>
				advanceNow = FALSE;
    2dfe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    2e02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    2e06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    2e0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 31a6 <continueFunction+0xe98>

			case SLU_BRANCH:
			advanceNow = FALSE;
    2e10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    2e14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    2e18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    2e1e:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 31a8 <continueFunction+0xe9a>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    2e22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    2e24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    2e28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    2e2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    2e2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    2e32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    2e34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 11a02 <getValueType>
    2e3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    2e3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    2e40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 2e48 <continueFunction+0xb3a>
    2e42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    2e44:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 31ca <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, -i);
    2e48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    2e4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    2e4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    2e50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    2e52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    2e56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    2e58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    2e5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    2e5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 122f4 <setVariable>
    2e64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    2e68:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 31a8 <continueFunction+0xe9a>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    2e6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    2e70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    2e74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 315e <continueFunction+0xe50>
    2e78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    2e7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    2e7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 2efa <continueFunction+0xbec>
    2e80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    2e82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    2e86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 2f44 <continueFunction+0xc36>
    2e8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    2e8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    2e90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 2e9e <continueFunction+0xb90>
    2e92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    2e94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    2e98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 2ecc <continueFunction+0xbbe>
    2e9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 2f44 <continueFunction+0xc36>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    2e9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    2ea0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    2ea4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    2ea8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    2eac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    2eae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    2eb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 11338 <addVariablesInSecond>
    2eb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    2eb8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    2eba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    2ebe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    2ec0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 12386 <trimStack>
    2ec6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    2ec8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 3172 <continueFunction+0xe64>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    2ecc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    2ece:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    2ed2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    2ed6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    2eda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    2edc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    2ede:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 113f6 <compareVariablesInSecond>
    2ee4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    2ee6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    2ee8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    2eec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    2eee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 12386 <trimStack>
    2ef4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    2ef6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 3172 <continueFunction+0xe64>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    2efa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    2efc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    2f00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    2f04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    2f08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    2f0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    2f0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 113f6 <compareVariablesInSecond>
    2f12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    2f14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    2f16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    2f1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    2f1c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 12386 <trimStack>
    2f22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    2f24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    2f28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    2f2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    2f2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    2f30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    2f32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    2f38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    2f3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    2f40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 3172 <continueFunction+0xe64>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    2f44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    2f48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    2f4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    2f4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    2f52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    2f56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    2f58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 11a02 <getValueType>
    2f5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    2f62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    2f64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 2f6c <continueFunction+0xc5e>
    2f66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    2f68:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 31ca <continueFunction+0xebc>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    2f6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    2f6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    2f72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    2f74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    2f78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    2f7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    2f7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 11a02 <getValueType>
    2f84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    2f88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    2f8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 2f92 <continueFunction+0xc84>
    2f8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    2f8e:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 31ca <continueFunction+0xebc>
					trimStack (&fun -> stack);
    2f92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    2f94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    2f98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    2f9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 12386 <trimStack>
    2fa0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    2fa2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    2fa4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    2fa8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    2faa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    2fac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 3170 <continueFunction+0xe62>
    2fb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    2fb2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    2fb4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #12224,a0
    2fba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    2fbc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (2fc0 <continueFunction+0xcb2>,pc,d0.w)
    2fc0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    2fc4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    2fc6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    2fce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    2fd0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    2fd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    2fe0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    2fe8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    2ff0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    2ff4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    2ff8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2ffa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2ffc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14284 <__mulsi3>
    3002:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    3004:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    3006:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3008:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    300c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    300e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3012:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3014:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 122f4 <setVariable>
    301a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    301e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 3172 <continueFunction+0xe64>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    3022:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    3026:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    302a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    302c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    302e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3032:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3034:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3038:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    303a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 122f4 <setVariable>
    3040:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3044:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 3172 <continueFunction+0xe64>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    3048:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    304c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    3050:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3052:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3054:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14330 <__modsi3>
    305a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    305c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    305e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3060:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3064:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3066:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    306a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    306c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 122f4 <setVariable>
    3072:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3076:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 3172 <continueFunction+0xe64>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    307a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    307e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    3082:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3084:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3086:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14302 <__divsi3>
    308c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    308e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    3090:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3092:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3096:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3098:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    309c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    309e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 122f4 <setVariable>
    30a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    30a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 3172 <continueFunction+0xe64>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    30ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    30b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    30b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    30b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    30b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    30ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    30bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    30be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    30c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    30c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    30c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    30ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    30cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 122f4 <setVariable>
    30d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    30d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 3172 <continueFunction+0xe64>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    30da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    30de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    30e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    30e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    30e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    30e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    30ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    30ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    30ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    30f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    30f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    30f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    30fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 122f4 <setVariable>
    3100:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3104:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 3172 <continueFunction+0xe64>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    3106:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    310a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    310e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    3110:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    3112:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    3114:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    3116:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    3118:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    311a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    311e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3120:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3124:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3126:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 122f4 <setVariable>
    312c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3130:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 3172 <continueFunction+0xe64>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    3132:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    3136:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    313a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    313c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    313e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    3140:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    3142:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    3144:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3146:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    314a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    314c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3150:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3152:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 122f4 <setVariable>
    3158:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    315c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 3172 <continueFunction+0xe64>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    315e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 14b74 <thumbnail.c.7eb31449+0xae>
    3164:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 13a4a <KPrintF>
    316a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    316c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    316e:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 31ca <continueFunction+0xebc>
						break;
    3170:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    3172:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 31a8 <continueFunction+0xe9a>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    3174:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 14b8c <thumbnail.c.7eb31449+0xc6>
    317a:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 13a4a <KPrintF>
    3180:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    3182:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    3184:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 31ca <continueFunction+0xebc>
			break;
    3186:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    3188:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 31a8 <continueFunction+0xe9a>
			break;
    318a:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    318c:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 31a8 <continueFunction+0xe9a>
			break;
    318e:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    3190:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 31a8 <continueFunction+0xe9a>
			break;
    3192:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    3194:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 31a8 <continueFunction+0xe9a>
			break;
    3196:	|  |  |     |              \--|--|--|--|-------------------> nop
    3198:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 31a8 <continueFunction+0xe9a>
			break;
    319a:	|  |  |     |                 \--|--|--|-------------------> nop
    319c:	|  |  |     +--------------------|--|--|-------------------- bra.s 31a8 <continueFunction+0xe9a>
			break;
    319e:	|  |  |     |                    \--|--|-------------------> nop
    31a0:	|  |  |     +-----------------------|--|-------------------- bra.s 31a8 <continueFunction+0xe9a>
			break;
    31a2:	|  |  |     |                       \--|-------------------> nop
    31a4:	|  |  |     +--------------------------|-------------------- bra.s 31a8 <continueFunction+0xe9a>
			break;
    31a6:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    31a8:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    31ac:	+--|--|----------------------------------------------------- beq.s 31c0 <continueFunction+0xeb2>
    31ae:	|  |  |                                                      movea.l 80(sp),a0
    31b2:	|  |  |                                                      move.l 36(a0),d0
    31b6:	|  |  |                                                      addq.l #1,d0
    31b8:	|  |  |                                                      movea.l 80(sp),a0
    31bc:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    31c0:	\--|--|----------------------------------------------------> tst.w 74(sp)
    31c4:	   |  \----------------------------------------------------- bne.w 2336 <continueFunction+0x28>

	}
	return TRUE;
    31c8:	   |                                                         moveq #1,d0
}
    31ca:	   \-------------------------------------------------------> lea 76(sp),sp
    31ce:	                                                             rts

000031d0 <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    31d0:	       lea -16(sp),sp
    31d4:	       move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    31d6:	       move.l 24(sp),-(sp)
    31da:	       jsr 4068 <pauseFunction>
    31e0:	       addq.l #4,sp
	if (fun -> stack) 
    31e2:	       movea.l 24(sp),a0
    31e6:	       move.l 24(a0),d0
    31ea:	   /-- beq.s 3200 <finishFunction+0x30>
		KPrintF("finishfunction:", ERROR_NON_EMPTY_STACK);
    31ec:	   |   pea 14bb8 <thumbnail.c.7eb31449+0xf2>
    31f2:	   |   pea 14be5 <thumbnail.c.7eb31449+0x11f>
    31f8:	   |   jsr 13a4a <KPrintF>
    31fe:	   |   addq.l #8,sp
	FreeVec( fun -> compiledLines);
    3200:	   \-> movea.l 24(sp),a0
    3204:	       move.l 4(a0),12(sp)
    320a:	       move.l 18bc0 <SysBase>,d0
    3210:	       movea.l d0,a6
    3212:	       movea.l 12(sp),a1
    3216:	       jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    321a:	       clr.l 16(sp)
    321e:	   /-- bra.s 323e <finishFunction+0x6e>
    3220:	/--|-> movea.l 24(sp),a0
    3224:	|  |   move.l 20(a0),d1
    3228:	|  |   move.l 16(sp),d0
    322c:	|  |   lsl.l #3,d0
    322e:	|  |   add.l d1,d0
    3230:	|  |   move.l d0,-(sp)
    3232:	|  |   jsr 11c50 <unlinkVar>
    3238:	|  |   addq.l #4,sp
    323a:	|  |   addq.l #1,16(sp)
    323e:	|  \-> movea.l 24(sp),a0
    3242:	|      move.l 8(a0),d0
    3246:	|      cmp.l 16(sp),d0
    324a:	\----- bgt.s 3220 <finishFunction+0x50>
	if( fun->numLocals > 0) {
    324c:	       movea.l 24(sp),a0
    3250:	       move.l 8(a0),d0
    3254:	   /-- ble.s 3270 <finishFunction+0xa0>
		FreeVec(fun -> localVars);
    3256:	   |   movea.l 24(sp),a0
    325a:	   |   move.l 20(a0),8(sp)
    3260:	   |   move.l 18bc0 <SysBase>,d0
    3266:	   |   movea.l d0,a6
    3268:	   |   movea.l 8(sp),a1
    326c:	   |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    3270:	   \-> moveq #28,d0
    3272:	       add.l 24(sp),d0
    3276:	       move.l d0,-(sp)
    3278:	       jsr 11c50 <unlinkVar>
    327e:	       addq.l #4,sp
	FreeVec(fun);
    3280:	       move.l 24(sp),4(sp)
    3286:	       move.l 18bc0 <SysBase>,d0
    328c:	       movea.l d0,a6
    328e:	       movea.l 4(sp),a1
    3292:	       jsr -690(a6)
	fun = NULL;
    3296:	       clr.l 24(sp)
}
    329a:	       nop
    329c:	       movea.l (sp)+,a6
    329e:	       lea 16(sp),sp
    32a2:	       rts

000032a4 <handleInput>:

BOOL handleInput () {
	//Amiga Todo: Actually handle input
	return runSludge ();
    32a4:	jsr 40c4 <runSludge>
}
    32aa:	rts

000032ac <initSludge>:

BOOL initSludge (char * filename) {
    32ac:	             lea -296(sp),sp
    32b0:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    32b4:	             clr.l 312(sp)
	mouseCursorAnim = makeNullAnim ();
    32b8:	             jsr 81ce <makeNullAnim>
    32be:	             move.l d0,18ae0 <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    32c4:	             pea 18b6a <gameVersion>
    32ca:	             pea 14bf5 <thumbnail.c.7eb31449+0x12f>
    32d0:	             pea 45 <_start+0x45>
    32d4:	             pea 47 <_start+0x47>
    32d8:	             move.l 336(sp),-(sp)
    32dc:	             jsr 3cf8 <openAndVerify>
    32e2:	             lea 20(sp),sp
    32e6:	             move.l d0,292(sp)
	if (! fp) return FALSE;
    32ea:	         /-- bne.s 32f2 <initSludge+0x46>
    32ec:	         |   clr.w d0
    32ee:	/--------|-- bra.w 3a18 <initSludge+0x76c>
	if (FGetC (fp)) {
    32f2:	|        \-> move.l 292(sp),288(sp)
    32f8:	|            move.l 18bc8 <DOSBase>,d0
    32fe:	|            movea.l d0,a6
    3300:	|            move.l 288(sp),d1
    3304:	|            jsr -306(a6)
    3308:	|            move.l d0,284(sp)
    330c:	|            move.l 284(sp),d0
    3310:	|  /-------- beq.w 34b6 <initSludge+0x20a>
		numBIFNames = get2bytes (fp);
    3314:	|  |         move.l 292(sp),-(sp)
    3318:	|  |         jsr 6bc <get2bytes>
    331e:	|  |         addq.l #4,sp
    3320:	|  |         move.l d0,18b94 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    3326:	|  |         move.l 18b94 <numBIFNames>,d0
    332c:	|  |         move.l d0,280(sp)
    3330:	|  |         clr.l 276(sp)
    3334:	|  |         move.l 18bc0 <SysBase>,d0
    333a:	|  |         movea.l d0,a6
    333c:	|  |         move.l 280(sp),d0
    3340:	|  |         move.l 276(sp),d1
    3344:	|  |         jsr -684(a6)
    3348:	|  |         move.l d0,272(sp)
    334c:	|  |         move.l 272(sp),d0
    3350:	|  |         move.l d0,18b50 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    3356:	|  |         move.l 18b50 <allBIFNames>,d0
    335c:	|  |     /-- bne.s 3364 <initSludge+0xb8>
    335e:	|  |     |   clr.w d0
    3360:	+--|-----|-- bra.w 3a18 <initSludge+0x76c>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    3364:	|  |     \-> clr.l 308(sp)
    3368:	|  |     /-- bra.s 338e <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    336a:	|  |  /--|-> move.l 18b50 <allBIFNames>,d1
    3370:	|  |  |  |   move.l 308(sp),d0
    3374:	|  |  |  |   add.l d0,d0
    3376:	|  |  |  |   add.l d0,d0
    3378:	|  |  |  |   movea.l d1,a2
    337a:	|  |  |  |   adda.l d0,a2
    337c:	|  |  |  |   move.l 292(sp),-(sp)
    3380:	|  |  |  |   jsr b02 <readString>
    3386:	|  |  |  |   addq.l #4,sp
    3388:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    338a:	|  |  |  |   addq.l #1,308(sp)
    338e:	|  |  |  \-> move.l 18b94 <numBIFNames>,d0
    3394:	|  |  |      cmp.l 308(sp),d0
    3398:	|  |  \----- bgt.s 336a <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    339a:	|  |         move.l 292(sp),-(sp)
    339e:	|  |         jsr 6bc <get2bytes>
    33a4:	|  |         addq.l #4,sp
    33a6:	|  |         move.l d0,18ba0 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    33ac:	|  |         move.l 18ba0 <numUserFunc>,d0
    33b2:	|  |         move.l d0,268(sp)
    33b6:	|  |         clr.l 264(sp)
    33ba:	|  |         move.l 18bc0 <SysBase>,d0
    33c0:	|  |         movea.l d0,a6
    33c2:	|  |         move.l 268(sp),d0
    33c6:	|  |         move.l 264(sp),d1
    33ca:	|  |         jsr -684(a6)
    33ce:	|  |         move.l d0,260(sp)
    33d2:	|  |         move.l 260(sp),d0
    33d6:	|  |         move.l d0,18b5c <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    33dc:	|  |         move.l 18b5c <allUserFunc>,d0
    33e2:	|  |     /-- bne.s 33ea <initSludge+0x13e>
    33e4:	|  |     |   clr.w d0
    33e6:	+--|-----|-- bra.w 3a18 <initSludge+0x76c>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    33ea:	|  |     \-> clr.l 304(sp)
    33ee:	|  |     /-- bra.s 3414 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    33f0:	|  |  /--|-> move.l 18b5c <allUserFunc>,d1
    33f6:	|  |  |  |   move.l 304(sp),d0
    33fa:	|  |  |  |   add.l d0,d0
    33fc:	|  |  |  |   add.l d0,d0
    33fe:	|  |  |  |   movea.l d1,a2
    3400:	|  |  |  |   adda.l d0,a2
    3402:	|  |  |  |   move.l 292(sp),-(sp)
    3406:	|  |  |  |   jsr b02 <readString>
    340c:	|  |  |  |   addq.l #4,sp
    340e:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    3410:	|  |  |  |   addq.l #1,304(sp)
    3414:	|  |  |  \-> move.l 18ba0 <numUserFunc>,d0
    341a:	|  |  |      cmp.l 304(sp),d0
    341e:	|  |  \----- bgt.s 33f0 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    3420:	|  |         move.l 18b6a <gameVersion>,d0
    3426:	|  |         cmpi.l #258,d0
    342c:	|  +-------- ble.w 34b6 <initSludge+0x20a>
			numResourceNames = get2bytes (fp);
    3430:	|  |         move.l 292(sp),-(sp)
    3434:	|  |         jsr 6bc <get2bytes>
    343a:	|  |         addq.l #4,sp
    343c:	|  |         move.l d0,18b9c <numResourceNames>
			allResourceNames = AllocVec(numResourceNames,MEMF_ANY);
    3442:	|  |         move.l 18b9c <numResourceNames>,d0
    3448:	|  |         move.l d0,256(sp)
    344c:	|  |         clr.l 252(sp)
    3450:	|  |         move.l 18bc0 <SysBase>,d0
    3456:	|  |         movea.l d0,a6
    3458:	|  |         move.l 256(sp),d0
    345c:	|  |         move.l 252(sp),d1
    3460:	|  |         jsr -684(a6)
    3464:	|  |         move.l d0,248(sp)
    3468:	|  |         move.l 248(sp),d0
    346c:	|  |         move.l d0,18b54 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    3472:	|  |         move.l 18b54 <allResourceNames>,d0
    3478:	|  |     /-- bne.s 3480 <initSludge+0x1d4>
    347a:	|  |     |   clr.w d0
    347c:	+--|-----|-- bra.w 3a18 <initSludge+0x76c>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    3480:	|  |     \-> clr.l 300(sp)
    3484:	|  |     /-- bra.s 34aa <initSludge+0x1fe>
				allResourceNames[fn] =  (char *) readString (fp);
    3486:	|  |  /--|-> move.l 18b54 <allResourceNames>,d1
    348c:	|  |  |  |   move.l 300(sp),d0
    3490:	|  |  |  |   add.l d0,d0
    3492:	|  |  |  |   add.l d0,d0
    3494:	|  |  |  |   movea.l d1,a2
    3496:	|  |  |  |   adda.l d0,a2
    3498:	|  |  |  |   move.l 292(sp),-(sp)
    349c:	|  |  |  |   jsr b02 <readString>
    34a2:	|  |  |  |   addq.l #4,sp
    34a4:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    34a6:	|  |  |  |   addq.l #1,300(sp)
    34aa:	|  |  |  \-> move.l 18b9c <numResourceNames>,d0
    34b0:	|  |  |      cmp.l 300(sp),d0
    34b4:	|  |  \----- bgt.s 3486 <initSludge+0x1da>
			}
		}
	}
	winWidth = get2bytes (fp);
    34b6:	|  \-------> move.l 292(sp),-(sp)
    34ba:	|            jsr 6bc <get2bytes>
    34c0:	|            addq.l #4,sp
    34c2:	|            move.l d0,18b14 <winWidth>
	winHeight = get2bytes (fp);
    34c8:	|            move.l 292(sp),-(sp)
    34cc:	|            jsr 6bc <get2bytes>
    34d2:	|            addq.l #4,sp
    34d4:	|            move.l d0,18b18 <winHeight>
	specialSettings = FGetC (fp);
    34da:	|            move.l 292(sp),244(sp)
    34e0:	|            move.l 18bc8 <DOSBase>,d0
    34e6:	|            movea.l d0,a6
    34e8:	|            move.l 244(sp),d1
    34ec:	|            jsr -306(a6)
    34f0:	|            move.l d0,240(sp)
    34f4:	|            move.l 240(sp),d0
    34f8:	|            move.l d0,18ba4 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    34fe:	|            move.l 292(sp),236(sp)
    3504:	|            move.l 18bc8 <DOSBase>,d0
    350a:	|            movea.l d0,a6
    350c:	|            move.l 236(sp),d1
    3510:	|            jsr -306(a6)
    3514:	|            move.l d0,232(sp)
    3518:	|            move.l 232(sp),d0
    351c:	|            move.l d0,-(sp)
    351e:	|            pea 3e8 <encodeFilename+0xea>
    3522:	|            jsr 14302 <__divsi3>
    3528:	|            addq.l #8,sp
    352a:	|            move.l d0,18568 <desiredfps>

	FreeVec(readString (fp));
    3530:	|            move.l 292(sp),-(sp)
    3534:	|            jsr b02 <readString>
    353a:	|            addq.l #4,sp
    353c:	|            move.l d0,228(sp)
    3540:	|            move.l 18bc0 <SysBase>,d0
    3546:	|            movea.l d0,a6
    3548:	|            movea.l 228(sp),a1
    354c:	|            jsr -690(a6)

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    3550:	|            move.l 292(sp),224(sp)
    3556:	|            move.l #101218,220(sp)
    355e:	|            moveq #8,d0
    3560:	|            move.l d0,216(sp)
    3564:	|            moveq #1,d1
    3566:	|            move.l d1,212(sp)
    356a:	|            move.l 18bc8 <DOSBase>,d0
    3570:	|            movea.l d0,a6
    3572:	|            move.l 224(sp),d1
    3576:	|            move.l 220(sp),d2
    357a:	|            move.l 216(sp),d3
    357e:	|            move.l 212(sp),d4
    3582:	|            jsr -324(a6)
    3586:	|            move.l d0,208(sp)
    358a:	|            move.l 208(sp),d0
    358e:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    3592:	|            moveq #1,d0
    3594:	|            cmp.l 204(sp),d0
    3598:	|        /-- beq.s 35a8 <initSludge+0x2fc>
		KPrintF("Reading error in initSludge.\n");
    359a:	|        |   pea 14c2e <custom.c.36a9b171+0x34>
    35a0:	|        |   jsr 13a4a <KPrintF>
    35a6:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    35a8:	|        \-> move.l 18b6a <gameVersion>,d0
    35ae:	|            cmpi.l #258,d0
    35b4:	|        /-- ble.s 35c4 <initSludge+0x318>
    35b6:	|        |   move.l 292(sp),-(sp)
    35ba:	|        |   jsr b02 <readString>
    35c0:	|        |   addq.l #4,sp
    35c2:	|     /--|-- bra.s 35d8 <initSludge+0x32c>
    35c4:	|     |  \-> pea 14c4c <custom.c.36a9b171+0x52>
    35ca:	|     |      pea 14c4c <custom.c.36a9b171+0x52>
    35d0:	|     |      jsr 10f2e <joinStrings>
    35d6:	|     |      addq.l #8,sp
    35d8:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    35dc:	|            move.l 18b6a <gameVersion>,d0
    35e2:	|            cmpi.l #258,d0
    35e8:	|     /----- ble.s 360a <initSludge+0x35e>
    35ea:	|     |      move.l 292(sp),196(sp)
    35f0:	|     |      move.l 18bc8 <DOSBase>,d0
    35f6:	|     |      movea.l d0,a6
    35f8:	|     |      move.l 196(sp),d1
    35fc:	|     |      jsr -306(a6)
    3600:	|     |      move.l d0,192(sp)
    3604:	|     |      move.l 192(sp),d0
    3608:	|     |  /-- bra.s 360c <initSludge+0x360>
    360a:	|     \--|-> moveq #0,d0
    360c:	|        \-> move.l d0,18cf4 <gameSettings+0x4>
	makeLanguageTable (fp);
    3612:	|            move.l 292(sp),-(sp)
    3616:	|            jsr 108e4 <makeLanguageTable>
    361c:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    361e:	|            move.l 18b6a <gameVersion>,d0
    3624:	|            cmpi.l #261,d0
    362a:	|        /-- ble.s 3678 <initSludge+0x3cc>
	{
		FGetC(fp);
    362c:	|        |   move.l 292(sp),188(sp)
    3632:	|        |   move.l 18bc8 <DOSBase>,d0
    3638:	|        |   movea.l d0,a6
    363a:	|        |   move.l 188(sp),d1
    363e:	|        |   jsr -306(a6)
    3642:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    3646:	|        |   move.l 292(sp),180(sp)
    364c:	|        |   move.l 18bc8 <DOSBase>,d0
    3652:	|        |   movea.l d0,a6
    3654:	|        |   move.l 180(sp),d1
    3658:	|        |   jsr -306(a6)
    365c:	|        |   move.l d0,176(sp)
		getFloat (fp);
    3660:	|        |   move.l 292(sp),-(sp)
    3664:	|        |   jsr 7d8 <getFloat>
    366a:	|        |   addq.l #4,sp
		getFloat (fp);
    366c:	|        |   move.l 292(sp),-(sp)
    3670:	|        |   jsr 7d8 <getFloat>
    3676:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    3678:	|        \-> move.l 292(sp),-(sp)
    367c:	|            jsr b02 <readString>
    3682:	|            addq.l #4,sp
    3684:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    3688:	|            pea 14c4d <custom.c.36a9b171+0x53>
    368e:	|            move.l 176(sp),-(sp)
    3692:	|            jsr 10eae <strcmp>
    3698:	|            addq.l #8,sp
    369a:	|            tst.l d0
    369c:	|        /-- beq.s 36a4 <initSludge+0x3f8>
		return FALSE;
    369e:	|        |   clr.w d0
    36a0:	+--------|-- bra.w 3a18 <initSludge+0x76c>
	}
	FreeVec( checker);
    36a4:	|        \-> move.l 172(sp),168(sp)
    36aa:	|            move.l 18bc0 <SysBase>,d0
    36b0:	|            movea.l d0,a6
    36b2:	|            movea.l 168(sp),a1
    36b6:	|            jsr -690(a6)
	checker = NULL;
    36ba:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    36be:	|            move.l 292(sp),164(sp)
    36c4:	|            move.l 18bc8 <DOSBase>,d0
    36ca:	|            movea.l d0,a6
    36cc:	|            move.l 164(sp),d1
    36d0:	|            jsr -306(a6)
    36d4:	|            move.l d0,160(sp)
    36d8:	|            move.l 160(sp),d0
    36dc:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    36e0:	|            moveq #0,d0
    36e2:	|            move.b 159(sp),d0
    36e6:	|            moveq #1,d1
    36e8:	|            and.l d1,d0
    36ea:	|        /-- beq.s 3742 <initSludge+0x496>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    36ec:	|        |   move.l 18bc8 <DOSBase>,d0
    36f2:	|        |   movea.l d0,a6
    36f4:	|        |   jsr -60(a6)
    36f8:	|        |   move.l d0,38(sp)
    36fc:	|        |   move.l 38(sp),d0
    3700:	|        |   move.l d0,34(sp)
    3704:	|        |   move.l #85077,30(sp)
    370c:	|        |   moveq #54,d0
    370e:	|        |   move.l d0,26(sp)
    3712:	|        |   move.l 18bc8 <DOSBase>,d0
    3718:	|        |   movea.l d0,a6
    371a:	|        |   move.l 34(sp),d1
    371e:	|        |   move.l 30(sp),d2
    3722:	|        |   move.l 26(sp),d3
    3726:	|        |   jsr -48(a6)
    372a:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    372e:	|        |   pea 14c8c <custom.c.36a9b171+0x92>
    3734:	|        |   jsr 13a4a <KPrintF>
    373a:	|        |   addq.l #4,sp
		return FALSE;
    373c:	|        |   clr.w d0
    373e:	+--------|-- bra.w 3a18 <initSludge+0x76c>
	}

	numGlobals = get2bytes (fp);
    3742:	|        \-> move.l 292(sp),-(sp)
    3746:	|            jsr 6bc <get2bytes>
    374c:	|            addq.l #4,sp
    374e:	|            move.l d0,18b98 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    3754:	|            move.l 18b98 <numGlobals>,d0
    375a:	|            lsl.l #3,d0
    375c:	|            move.l d0,154(sp)
    3760:	|            clr.l 150(sp)
    3764:	|            move.l 18bc0 <SysBase>,d0
    376a:	|            movea.l d0,a6
    376c:	|            move.l 154(sp),d0
    3770:	|            move.l 150(sp),d1
    3774:	|            jsr -684(a6)
    3778:	|            move.l d0,146(sp)
    377c:	|            move.l 146(sp),d0
    3780:	|            move.l d0,18b6e <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    3786:	|            move.l 18b6e <globalVars>,d0
    378c:	|        /-- bne.s 37aa <initSludge+0x4fe>
    378e:	|        |   move.l 18b98 <numGlobals>,d0
    3794:	|        +-- ble.s 37aa <initSludge+0x4fe>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    3796:	|        |   pea 14cc4 <custom.c.36a9b171+0xca>
    379c:	|        |   jsr 13a4a <KPrintF>
    37a2:	|        |   addq.l #4,sp
		return FALSE;
    37a4:	|        |   clr.w d0
    37a6:	+--------|-- bra.w 3a18 <initSludge+0x76c>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    37aa:	|        \-> clr.l 312(sp)
    37ae:	|        /-- bra.s 37c6 <initSludge+0x51a>
    37b0:	|     /--|-> move.l 18b6e <globalVars>,d1
    37b6:	|     |  |   move.l 312(sp),d0
    37ba:	|     |  |   lsl.l #3,d0
    37bc:	|     |  |   movea.l d1,a0
    37be:	|     |  |   adda.l d0,a0
    37c0:	|     |  |   clr.l (a0)
    37c2:	|     |  |   addq.l #1,312(sp)
    37c6:	|     |  \-> move.l 18b98 <numGlobals>,d0
    37cc:	|     |      cmp.l 312(sp),d0
    37d0:	|     \----- bgt.s 37b0 <initSludge+0x504>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    37d2:	|            move.l 18cf4 <gameSettings+0x4>,d0
    37d8:	|            clr.l -(sp)
    37da:	|            move.l d0,-(sp)
    37dc:	|            move.l 300(sp),-(sp)
    37e0:	|            jsr 479e <setFileIndices>
    37e6:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    37ea:	|            pea 1 <_start+0x1>
    37ee:	|            jsr 4458 <getNumberedString>
    37f4:	|            addq.l #4,sp
    37f6:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    37fa:	|            move.l 142(sp),-(sp)
    37fe:	|            jsr 2fe <encodeFilename>
    3804:	|            addq.l #4,sp
    3806:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    380a:	|            move.l 142(sp),134(sp)
    3810:	|            move.l 18bc0 <SysBase>,d0
    3816:	|            movea.l d0,a6
    3818:	|            movea.l 134(sp),a1
    381c:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    3820:	|            move.l 138(sp),130(sp)
    3826:	|            move.l 18bc8 <DOSBase>,d0
    382c:	|            movea.l d0,a6
    382e:	|            move.l 130(sp),d1
    3832:	|            jsr -120(a6)
    3836:	|            move.l d0,126(sp)
    383a:	|            move.l 126(sp),d0
    383e:	|            move.l d0,296(sp)
	if(lock == 0) {
    3842:	|        /-- bne.s 3870 <initSludge+0x5c4>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    3844:	|        |   move.l 138(sp),122(sp)
    384a:	|        |   moveq #-2,d1
    384c:	|        |   move.l d1,118(sp)
    3850:	|        |   move.l 18bc8 <DOSBase>,d0
    3856:	|        |   movea.l d0,a6
    3858:	|        |   move.l 122(sp),d1
    385c:	|        |   move.l 118(sp),d2
    3860:	|        |   jsr -84(a6)
    3864:	|        |   move.l d0,114(sp)
    3868:	|        |   move.l 114(sp),d0
    386c:	|        |   move.l d0,296(sp)
	}

	if (!CurrentDir(lock)) {
    3870:	|        \-> move.l 296(sp),110(sp)
    3876:	|            move.l 18bc8 <DOSBase>,d0
    387c:	|            movea.l d0,a6
    387e:	|            move.l 110(sp),d1
    3882:	|            jsr -126(a6)
    3886:	|            move.l d0,106(sp)
    388a:	|            move.l 106(sp),d0
    388e:	|        /-- bne.s 38ea <initSludge+0x63e>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    3890:	|        |   move.l 138(sp),-(sp)
    3894:	|        |   pea 14cf7 <custom.c.36a9b171+0xfd>
    389a:	|        |   jsr 13a4a <KPrintF>
    38a0:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    38a2:	|        |   move.l 18bc8 <DOSBase>,d0
    38a8:	|        |   movea.l d0,a6
    38aa:	|        |   jsr -60(a6)
    38ae:	|        |   move.l d0,58(sp)
    38b2:	|        |   move.l 58(sp),d0
    38b6:	|        |   move.l d0,54(sp)
    38ba:	|        |   move.l #85284,50(sp)
    38c2:	|        |   moveq #40,d0
    38c4:	|        |   move.l d0,46(sp)
    38c8:	|        |   move.l 18bc8 <DOSBase>,d0
    38ce:	|        |   movea.l d0,a6
    38d0:	|        |   move.l 54(sp),d1
    38d4:	|        |   move.l 50(sp),d2
    38d8:	|        |   move.l 46(sp),d3
    38dc:	|        |   jsr -48(a6)
    38e0:	|        |   move.l d0,42(sp)
		return FALSE;
    38e4:	|        |   clr.w d0
    38e6:	+--------|-- bra.w 3a18 <initSludge+0x76c>
	}

	FreeVec(gameName);
    38ea:	|        \-> move.l 138(sp),102(sp)
    38f0:	|            move.l 18bc0 <SysBase>,d0
    38f6:	|            movea.l d0,a6
    38f8:	|            movea.l 102(sp),a1
    38fc:	|            jsr -690(a6)

	readIniFile (filename);
    3900:	|            move.l 320(sp),-(sp)
    3904:	|            jsr 10a18 <readIniFile>
    390a:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    390c:	|            jsr 107ea <getLanguageForFileB>
    3912:	|            move.l d0,18556 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    3918:	|            move.l 18556 <languageNum>,d0
    391e:	|        /-- bpl.s 392e <initSludge+0x682>
    3920:	|        |   pea 14d4d <custom.c.36a9b171+0x153>
    3926:	|        |   jsr 13a4a <KPrintF>
    392c:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    392e:	|        \-> move.l 18556 <languageNum>,d0
    3934:	|            move.l d0,d1
    3936:	|            move.l 18cf4 <gameSettings+0x4>,d0
    393c:	|            move.l d1,-(sp)
    393e:	|            move.l d0,-(sp)
    3940:	|            clr.l -(sp)
    3942:	|            jsr 479e <setFileIndices>
    3948:	|            lea 12(sp),sp

	if (dataFol[0]) {
    394c:	|            movea.l 200(sp),a0
    3950:	|            move.b (a0),d0
    3952:	|     /----- beq.w 39fc <initSludge+0x750>
		char *dataFolder = encodeFilename(dataFol);
    3956:	|     |      move.l 200(sp),-(sp)
    395a:	|     |      jsr 2fe <encodeFilename>
    3960:	|     |      addq.l #4,sp
    3962:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    3966:	|     |      move.l 98(sp),94(sp)
    396c:	|     |      move.l 18bc8 <DOSBase>,d0
    3972:	|     |      movea.l d0,a6
    3974:	|     |      move.l 94(sp),d1
    3978:	|     |      jsr -120(a6)
    397c:	|     |      move.l d0,90(sp)
    3980:	|     |      move.l 90(sp),d0
    3984:	|     |      move.l d0,296(sp)
		if(lock == 0) {
    3988:	|     |  /-- bne.s 39b6 <initSludge+0x70a>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    398a:	|     |  |   move.l 98(sp),86(sp)
    3990:	|     |  |   moveq #-2,d1
    3992:	|     |  |   move.l d1,82(sp)
    3996:	|     |  |   move.l 18bc8 <DOSBase>,d0
    399c:	|     |  |   movea.l d0,a6
    399e:	|     |  |   move.l 86(sp),d1
    39a2:	|     |  |   move.l 82(sp),d2
    39a6:	|     |  |   jsr -84(a6)
    39aa:	|     |  |   move.l d0,78(sp)
    39ae:	|     |  |   move.l 78(sp),d0
    39b2:	|     |  |   move.l d0,296(sp)
		}


		if (!CurrentDir(lock)) {
    39b6:	|     |  \-> move.l 296(sp),74(sp)
    39bc:	|     |      move.l 18bc8 <DOSBase>,d0
    39c2:	|     |      movea.l d0,a6
    39c4:	|     |      move.l 74(sp),d1
    39c8:	|     |      jsr -126(a6)
    39cc:	|     |      move.l d0,70(sp)
    39d0:	|     |      move.l 70(sp),d0
    39d4:	|     |  /-- bne.s 39e6 <initSludge+0x73a>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    39d6:	|     |  |   move.l 18bc8 <DOSBase>,d0
    39dc:	|     |  |   movea.l d0,a6
    39de:	|     |  |   jsr -60(a6)
    39e2:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    39e6:	|     |  \-> move.l 98(sp),62(sp)
    39ec:	|     |      move.l 18bc0 <SysBase>,d0
    39f2:	|     |      movea.l d0,a6
    39f4:	|     |      movea.l 62(sp),a1
    39f8:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    39fc:	|     \----> movea.l 18b18 <winHeight>,a0
    3a02:	|            lea -15(a0),a0
    3a06:	|            move.l a0,d0
    3a08:	|            move.l d0,-(sp)
    3a0a:	|            pea a <_start+0xa>
    3a0e:	|            jsr 51d0 <positionStatus>
    3a14:	|            addq.l #8,sp

	return TRUE;
    3a16:	|            moveq #1,d0
}
    3a18:	\----------> movem.l (sp)+,d2-d4/a2/a6
    3a1c:	             lea 296(sp),sp
    3a20:	             rts

00003a22 <killSpeechTimers>:

void killSpeechTimers () {
    3a22:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    3a24:	          move.l 18b58 <allRunningFunctions>,(sp)

	while (thisFunction) {
    3a2a:	   /----- bra.s 3a56 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    3a2c:	/--|----> movea.l (sp),a0
    3a2e:	|  |      move.b 56(a0),d0
    3a32:	|  |  /-- bne.s 3a50 <killSpeechTimers+0x2e>
    3a34:	|  |  |   movea.l (sp),a0
    3a36:	|  |  |   move.w 50(a0),d0
    3a3a:	|  |  +-- beq.s 3a50 <killSpeechTimers+0x2e>
    3a3c:	|  |  |   movea.l (sp),a0
    3a3e:	|  |  |   move.l 12(a0),d0
    3a42:	|  |  +-- beq.s 3a50 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    3a44:	|  |  |   movea.l (sp),a0
    3a46:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    3a4a:	|  |  |   movea.l (sp),a0
    3a4c:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    3a50:	|  |  \-> movea.l (sp),a0
    3a52:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    3a56:	|  \----> tst.l (sp)
    3a58:	\-------- bne.s 3a2c <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    3a5a:	          jsr 570e <killAllSpeech>
}
    3a60:	          nop
    3a62:	          addq.l #4,sp
    3a64:	          rts

00003a66 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    3a66:	             lea -52(sp),sp
    3a6a:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    3a6c:	             movea.l 60(sp),a0
    3a70:	             move.l (a0),d0
    3a72:	             move.l d0,-(sp)
    3a74:	             jsr 46de <openSubSlice>
    3a7a:	             addq.l #4,sp
    3a7c:	             tst.w d0
    3a7e:	         /-- bne.s 3a86 <loadFunctionCode+0x20>
    3a80:	         |   clr.w d0
    3a82:	/--------|-- bra.w 3c50 <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    3a86:	|        \-> move.l 18ba8 <bigDataFile>,44(sp)
    3a8e:	|            move.l 18bc8 <DOSBase>,d0
    3a94:	|            movea.l d0,a6
    3a96:	|            move.l 44(sp),d1
    3a9a:	|            jsr -306(a6)
    3a9e:	|            move.l d0,40(sp)
    3aa2:	|            move.l 40(sp),d0
    3aa6:	|            move.l d0,d0
    3aa8:	|            movea.l 60(sp),a0
    3aac:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    3ab0:	|            move.l 18ba8 <bigDataFile>,d0
    3ab6:	|            move.l d0,-(sp)
    3ab8:	|            jsr 6bc <get2bytes>
    3abe:	|            addq.l #4,sp
    3ac0:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    3ac4:	|            move.l 18ba8 <bigDataFile>,d0
    3aca:	|            move.l d0,-(sp)
    3acc:	|            jsr 6bc <get2bytes>
    3ad2:	|            addq.l #4,sp
    3ad4:	|            movea.l 60(sp),a0
    3ad8:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    3adc:	|            move.l 18ba8 <bigDataFile>,d0
    3ae2:	|            move.l d0,-(sp)
    3ae4:	|            jsr 6bc <get2bytes>
    3aea:	|            addq.l #4,sp
    3aec:	|            movea.l 60(sp),a0
    3af0:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    3af4:	|            move.l 36(sp),d0
    3af8:	|            lsl.l #3,d0
    3afa:	|            move.l d0,32(sp)
    3afe:	|            clr.l 28(sp)
    3b02:	|            move.l 18bc0 <SysBase>,d0
    3b08:	|            movea.l d0,a6
    3b0a:	|            move.l 32(sp),d0
    3b0e:	|            move.l 28(sp),d1
    3b12:	|            jsr -684(a6)
    3b16:	|            move.l d0,24(sp)
    3b1a:	|            move.l 24(sp),d0
    3b1e:	|            movea.l 60(sp),a0
    3b22:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    3b26:	|            movea.l 60(sp),a0
    3b2a:	|            move.l 4(a0),d0
    3b2e:	|        /-- bne.s 3b44 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    3b30:	|        |   pea 14d78 <custom.c.36a9b171+0x17e>
    3b36:	|        |   jsr 13a4a <KPrintF>
    3b3c:	|        |   addq.l #4,sp
		return FALSE;
    3b3e:	|        |   clr.w d0
    3b40:	+--------|-- bra.w 3c50 <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    3b44:	|        \-> clr.l 52(sp)
    3b48:	|        /-- bra.s 3baa <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    3b4a:	|     /--|-> move.l 18ba8 <bigDataFile>,8(sp)
    3b52:	|     |  |   move.l 18bc8 <DOSBase>,d0
    3b58:	|     |  |   movea.l d0,a6
    3b5a:	|     |  |   move.l 8(sp),d1
    3b5e:	|     |  |   jsr -306(a6)
    3b62:	|     |  |   move.l d0,4(sp)
    3b66:	|     |  |   move.l 4(sp),d1
    3b6a:	|     |  |   movea.l 60(sp),a0
    3b6e:	|     |  |   movea.l 4(a0),a0
    3b72:	|     |  |   move.l 52(sp),d0
    3b76:	|     |  |   lsl.l #3,d0
    3b78:	|     |  |   adda.l d0,a0
    3b7a:	|     |  |   move.l d1,d0
    3b7c:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    3b7e:	|     |  |   move.l 18ba8 <bigDataFile>,d0
    3b84:	|     |  |   move.l d0,-(sp)
    3b86:	|     |  |   jsr 6bc <get2bytes>
    3b8c:	|     |  |   addq.l #4,sp
    3b8e:	|     |  |   move.l d0,d1
    3b90:	|     |  |   movea.l 60(sp),a0
    3b94:	|     |  |   movea.l 4(a0),a0
    3b98:	|     |  |   move.l 52(sp),d0
    3b9c:	|     |  |   lsl.l #3,d0
    3b9e:	|     |  |   adda.l d0,a0
    3ba0:	|     |  |   move.l d1,d0
    3ba2:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    3ba6:	|     |  |   addq.l #1,52(sp)
    3baa:	|     |  \-> move.l 52(sp),d0
    3bae:	|     |      cmp.l 36(sp),d0
    3bb2:	|     \----- bcs.s 3b4a <loadFunctionCode+0xe4>
	}

	finishAccess ();
    3bb4:	|            jsr 444e <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    3bba:	|            movea.l 60(sp),a0
    3bbe:	|            move.l 8(a0),d0
    3bc2:	|  /-------- ble.w 3c46 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    3bc6:	|  |         movea.l 60(sp),a0
    3bca:	|  |         move.l 8(a0),d0
    3bce:	|  |         lsl.l #3,d0
    3bd0:	|  |         move.l d0,20(sp)
    3bd4:	|  |         clr.l 16(sp)
    3bd8:	|  |         move.l 18bc0 <SysBase>,d0
    3bde:	|  |         movea.l d0,a6
    3be0:	|  |         move.l 20(sp),d0
    3be4:	|  |         move.l 16(sp),d1
    3be8:	|  |         jsr -684(a6)
    3bec:	|  |         move.l d0,12(sp)
    3bf0:	|  |         move.l 12(sp),d0
    3bf4:	|  |         movea.l 60(sp),a0
    3bf8:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    3bfc:	|  |         movea.l 60(sp),a0
    3c00:	|  |         move.l 20(a0),d0
    3c04:	|  |     /-- bne.s 3c18 <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    3c06:	|  |     |   pea 14d78 <custom.c.36a9b171+0x17e>
    3c0c:	|  |     |   jsr 13a4a <KPrintF>
    3c12:	|  |     |   addq.l #4,sp
			return FALSE;
    3c14:	|  |     |   clr.w d0
    3c16:	+--|-----|-- bra.s 3c50 <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    3c18:	|  |     \-> clr.l 48(sp)
    3c1c:	|  |     /-- bra.s 3c36 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    3c1e:	|  |  /--|-> movea.l 60(sp),a0
    3c22:	|  |  |  |   move.l 20(a0),d1
    3c26:	|  |  |  |   move.l 48(sp),d0
    3c2a:	|  |  |  |   lsl.l #3,d0
    3c2c:	|  |  |  |   movea.l d1,a0
    3c2e:	|  |  |  |   adda.l d0,a0
    3c30:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    3c32:	|  |  |  |   addq.l #1,48(sp)
    3c36:	|  |  |  \-> movea.l 60(sp),a0
    3c3a:	|  |  |      move.l 8(a0),d0
    3c3e:	|  |  |      cmp.l 48(sp),d0
    3c42:	|  |  \----- bgt.s 3c1e <loadFunctionCode+0x1b8>
    3c44:	|  |     /-- bra.s 3c4e <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    3c46:	|  \-----|-> movea.l 60(sp),a0
    3c4a:	|        |   clr.l 8(a0)
	}
	return TRUE;
    3c4e:	|        \-> moveq #1,d0
}
    3c50:	\----------> movea.l (sp)+,a6
    3c52:	             lea 52(sp),sp
    3c56:	             rts

00003c58 <loadHandlers>:

void loadHandlers (BPTR fp) {
    3c58:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    3c5a:	movea.l 18552 <currentEvents>,a2
    3c60:	move.l 8(sp),-(sp)
    3c64:	jsr 6bc <get2bytes>
    3c6a:	addq.l #4,sp
    3c6c:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    3c6e:	movea.l 18552 <currentEvents>,a2
    3c74:	move.l 8(sp),-(sp)
    3c78:	jsr 6bc <get2bytes>
    3c7e:	addq.l #4,sp
    3c80:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    3c84:	movea.l 18552 <currentEvents>,a2
    3c8a:	move.l 8(sp),-(sp)
    3c8e:	jsr 6bc <get2bytes>
    3c94:	addq.l #4,sp
    3c96:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    3c9a:	movea.l 18552 <currentEvents>,a2
    3ca0:	move.l 8(sp),-(sp)
    3ca4:	jsr 6bc <get2bytes>
    3caa:	addq.l #4,sp
    3cac:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    3cb0:	movea.l 18552 <currentEvents>,a2
    3cb6:	move.l 8(sp),-(sp)
    3cba:	jsr 6bc <get2bytes>
    3cc0:	addq.l #4,sp
    3cc2:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    3cc6:	movea.l 18552 <currentEvents>,a2
    3ccc:	move.l 8(sp),-(sp)
    3cd0:	jsr 6bc <get2bytes>
    3cd6:	addq.l #4,sp
    3cd8:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    3cdc:	movea.l 18552 <currentEvents>,a2
    3ce2:	move.l 8(sp),-(sp)
    3ce6:	jsr 6bc <get2bytes>
    3cec:	addq.l #4,sp
    3cee:	move.l d0,24(a2)
}
    3cf2:	nop
    3cf4:	movea.l (sp)+,a2
    3cf6:	rts

00003cf8 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    3cf8:	       lea -312(sp),sp
    3cfc:	       movem.l d2-d3/a6,-(sp)
    3d00:	       move.l 332(sp),d1
    3d04:	       move.l 336(sp),d0
    3d08:	       move.b d1,d1
    3d0a:	       move.b d1,16(sp)
    3d0e:	       move.b d0,d0
    3d10:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    3d14:	       move.l 328(sp),318(sp)
    3d1a:	       move.l #1005,314(sp)
    3d22:	       move.l 18bc8 <DOSBase>,d0
    3d28:	       movea.l d0,a6
    3d2a:	       move.l 318(sp),d1
    3d2e:	       move.l 314(sp),d2
    3d32:	       jsr -30(a6)
    3d36:	       move.l d0,310(sp)
    3d3a:	       move.l 310(sp),d0
    3d3e:	       move.l d0,306(sp)

	if (! fp) {
    3d42:	   /-- bne.s 3d9e <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    3d44:	   |   move.l 18bc8 <DOSBase>,d0
    3d4a:	   |   movea.l d0,a6
    3d4c:	   |   jsr -60(a6)
    3d50:	   |   move.l d0,154(sp)
    3d54:	   |   move.l 154(sp),d0
    3d58:	   |   move.l d0,150(sp)
    3d5c:	   |   move.l #85409,146(sp)
    3d64:	   |   moveq #31,d0
    3d66:	   |   move.l d0,142(sp)
    3d6a:	   |   move.l 18bc8 <DOSBase>,d0
    3d70:	   |   movea.l d0,a6
    3d72:	   |   move.l 150(sp),d1
    3d76:	   |   move.l 146(sp),d2
    3d7a:	   |   move.l 142(sp),d3
    3d7e:	   |   jsr -48(a6)
    3d82:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    3d86:	   |   move.l 328(sp),-(sp)
    3d8a:	   |   pea 14dc1 <custom.c.36a9b171+0x1c7>
    3d90:	   |   jsr 13a4a <KPrintF>
    3d96:	   |   addq.l #8,sp
		return NULL;
    3d98:	   |   moveq #0,d0
    3d9a:	/--|-- bra.w 405e <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    3d9e:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    3da2:	|      move.l 306(sp),302(sp)
    3da8:	|      move.l 18bc8 <DOSBase>,d0
    3dae:	|      movea.l d0,a6
    3db0:	|      move.l 302(sp),d1
    3db4:	|      jsr -306(a6)
    3db8:	|      move.l d0,298(sp)
    3dbc:	|      move.l 298(sp),d0
    3dc0:	|      moveq #83,d1
    3dc2:	|      cmp.l d0,d1
    3dc4:	|  /-- beq.s 3dcc <openAndVerify+0xd4>
    3dc6:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    3dcc:	|  \-> move.l 306(sp),294(sp)
    3dd2:	|      move.l 18bc8 <DOSBase>,d0
    3dd8:	|      movea.l d0,a6
    3dda:	|      move.l 294(sp),d1
    3dde:	|      jsr -306(a6)
    3de2:	|      move.l d0,290(sp)
    3de6:	|      move.l 290(sp),d0
    3dea:	|      moveq #76,d1
    3dec:	|      cmp.l d0,d1
    3dee:	|  /-- beq.s 3df6 <openAndVerify+0xfe>
    3df0:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    3df6:	|  \-> move.l 306(sp),286(sp)
    3dfc:	|      move.l 18bc8 <DOSBase>,d0
    3e02:	|      movea.l d0,a6
    3e04:	|      move.l 286(sp),d1
    3e08:	|      jsr -306(a6)
    3e0c:	|      move.l d0,282(sp)
    3e10:	|      move.l 282(sp),d0
    3e14:	|      moveq #85,d1
    3e16:	|      cmp.l d0,d1
    3e18:	|  /-- beq.s 3e20 <openAndVerify+0x128>
    3e1a:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    3e20:	|  \-> move.l 306(sp),278(sp)
    3e26:	|      move.l 18bc8 <DOSBase>,d0
    3e2c:	|      movea.l d0,a6
    3e2e:	|      move.l 278(sp),d1
    3e32:	|      jsr -306(a6)
    3e36:	|      move.l d0,274(sp)
    3e3a:	|      move.l 274(sp),d0
    3e3e:	|      moveq #68,d1
    3e40:	|      cmp.l d0,d1
    3e42:	|  /-- beq.s 3e4a <openAndVerify+0x152>
    3e44:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    3e4a:	|  \-> move.l 306(sp),270(sp)
    3e50:	|      move.l 18bc8 <DOSBase>,d0
    3e56:	|      movea.l d0,a6
    3e58:	|      move.l 270(sp),d1
    3e5c:	|      jsr -306(a6)
    3e60:	|      move.l d0,266(sp)
    3e64:	|      move.l 266(sp),d1
    3e68:	|      move.b 16(sp),d0
    3e6c:	|      ext.w d0
    3e6e:	|      movea.w d0,a0
    3e70:	|      cmpa.l d1,a0
    3e72:	|  /-- beq.s 3e7a <openAndVerify+0x182>
    3e74:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    3e7a:	|  \-> move.l 306(sp),262(sp)
    3e80:	|      move.l 18bc8 <DOSBase>,d0
    3e86:	|      movea.l d0,a6
    3e88:	|      move.l 262(sp),d1
    3e8c:	|      jsr -306(a6)
    3e90:	|      move.l d0,258(sp)
    3e94:	|      move.l 258(sp),d1
    3e98:	|      move.b 14(sp),d0
    3e9c:	|      ext.w d0
    3e9e:	|      movea.w d0,a0
    3ea0:	|      cmpa.l d1,a0
    3ea2:	|  /-- beq.s 3eaa <openAndVerify+0x1b2>
    3ea4:	|  |   move.w #1,322(sp)
	if (headerBad) {
    3eaa:	|  \-> tst.w 322(sp)
    3eae:	|  /-- beq.s 3f06 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    3eb0:	|  |   move.l 18bc8 <DOSBase>,d0
    3eb6:	|  |   movea.l d0,a6
    3eb8:	|  |   jsr -60(a6)
    3ebc:	|  |   move.l d0,174(sp)
    3ec0:	|  |   move.l 174(sp),d0
    3ec4:	|  |   move.l d0,170(sp)
    3ec8:	|  |   move.l #85472,166(sp)
    3ed0:	|  |   moveq #31,d0
    3ed2:	|  |   move.l d0,162(sp)
    3ed6:	|  |   move.l 18bc8 <DOSBase>,d0
    3edc:	|  |   movea.l d0,a6
    3ede:	|  |   move.l 170(sp),d1
    3ee2:	|  |   move.l 166(sp),d2
    3ee6:	|  |   move.l 162(sp),d3
    3eea:	|  |   jsr -48(a6)
    3eee:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    3ef2:	|  |   pea 14de0 <custom.c.36a9b171+0x1e6>
    3ef8:	|  |   jsr 13a4a <KPrintF>
    3efe:	|  |   addq.l #4,sp
		return NULL;
    3f00:	|  |   moveq #0,d0
    3f02:	+--|-- bra.w 405e <openAndVerify+0x366>
	}
	FGetC (fp);
    3f06:	|  \-> move.l 306(sp),254(sp)
    3f0c:	|      move.l 18bc8 <DOSBase>,d0
    3f12:	|      movea.l d0,a6
    3f14:	|      move.l 254(sp),d1
    3f18:	|      jsr -306(a6)
    3f1c:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    3f20:	|      nop
    3f22:	|  /-> move.l 306(sp),246(sp)
    3f28:	|  |   move.l 18bc8 <DOSBase>,d0
    3f2e:	|  |   movea.l d0,a6
    3f30:	|  |   move.l 246(sp),d1
    3f34:	|  |   jsr -306(a6)
    3f38:	|  |   move.l d0,242(sp)
    3f3c:	|  |   move.l 242(sp),d0
    3f40:	|  \-- bne.s 3f22 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    3f42:	|      move.l 306(sp),238(sp)
    3f48:	|      move.l 18bc8 <DOSBase>,d0
    3f4e:	|      movea.l d0,a6
    3f50:	|      move.l 238(sp),d1
    3f54:	|      jsr -306(a6)
    3f58:	|      move.l d0,234(sp)
    3f5c:	|      move.l 234(sp),d0
    3f60:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    3f64:	|      move.l 306(sp),226(sp)
    3f6a:	|      move.l 18bc8 <DOSBase>,d0
    3f70:	|      movea.l d0,a6
    3f72:	|      move.l 226(sp),d1
    3f76:	|      jsr -306(a6)
    3f7a:	|      move.l d0,222(sp)
    3f7e:	|      move.l 222(sp),d0
    3f82:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    3f86:	|      move.l 230(sp),d0
    3f8a:	|      lsl.l #8,d0
    3f8c:	|      add.l 218(sp),d0
    3f90:	|      movea.l 344(sp),a0
    3f94:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    3f96:	|      movea.l 344(sp),a0
    3f9a:	|      move.l (a0),d0
    3f9c:	|      cmpi.l #514,d0
    3fa2:	|  /-- ble.s 3ff8 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    3fa4:	|  |   move.l 18bc8 <DOSBase>,d0
    3faa:	|  |   movea.l d0,a6
    3fac:	|  |   jsr -60(a6)
    3fb0:	|  |   move.l d0,194(sp)
    3fb4:	|  |   move.l 194(sp),d0
    3fb8:	|  |   move.l d0,190(sp)
    3fbc:	|  |   move.l #85499,186(sp)
    3fc4:	|  |   moveq #100,d1
    3fc6:	|  |   move.l d1,182(sp)
    3fca:	|  |   move.l 18bc8 <DOSBase>,d0
    3fd0:	|  |   movea.l d0,a6
    3fd2:	|  |   move.l 190(sp),d1
    3fd6:	|  |   move.l 186(sp),d2
    3fda:	|  |   move.l 182(sp),d3
    3fde:	|  |   jsr -48(a6)
    3fe2:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    3fe6:	|  |   pea 14dfb <custom.c.36a9b171+0x201>
    3fec:	|  |   jsr 13a4a <KPrintF>
    3ff2:	|  |   addq.l #4,sp
		return NULL;
    3ff4:	|  |   moveq #0,d0
    3ff6:	+--|-- bra.s 405e <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    3ff8:	|  \-> movea.l 344(sp),a0
    3ffc:	|      move.l (a0),d0
    3ffe:	|      cmpi.l #257,d0
    4004:	|  /-- bgt.s 405a <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    4006:	|  |   move.l 18bc8 <DOSBase>,d0
    400c:	|  |   movea.l d0,a6
    400e:	|  |   jsr -60(a6)
    4012:	|  |   move.l d0,214(sp)
    4016:	|  |   move.l 214(sp),d0
    401a:	|  |   move.l d0,210(sp)
    401e:	|  |   move.l #85568,206(sp)
    4026:	|  |   moveq #100,d0
    4028:	|  |   move.l d0,202(sp)
    402c:	|  |   move.l 18bc8 <DOSBase>,d0
    4032:	|  |   movea.l d0,a6
    4034:	|  |   move.l 210(sp),d1
    4038:	|  |   move.l 206(sp),d2
    403c:	|  |   move.l 202(sp),d3
    4040:	|  |   jsr -48(a6)
    4044:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    4048:	|  |   pea 14e40 <custom.c.36a9b171+0x246>
    404e:	|  |   jsr 13a4a <KPrintF>
    4054:	|  |   addq.l #4,sp
		return NULL;
    4056:	|  |   moveq #0,d0
    4058:	+--|-- bra.s 405e <openAndVerify+0x366>
	}
	return fp;
    405a:	|  \-> move.l 306(sp),d0
}
    405e:	\----> movem.l (sp)+,d2-d3/a6
    4062:	       lea 312(sp),sp
    4066:	       rts

00004068 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    4068:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    406a:	          move.l #101208,(sp)
	while (* huntAndDestroy) {
    4070:	   /----- bra.s 409c <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    4072:	/--|----> movea.l (sp),a0
    4074:	|  |      move.l (a0),d0
    4076:	|  |      cmp.l 8(sp),d0
    407a:	|  |  /-- bne.s 4092 <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    407c:	|  |  |   movea.l (sp),a0
    407e:	|  |  |   movea.l (a0),a0
    4080:	|  |  |   move.l 44(a0),d0
    4084:	|  |  |   movea.l (sp),a0
    4086:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    4088:	|  |  |   movea.l 8(sp),a0
    408c:	|  |  |   clr.l 44(a0)
    4090:	|  +--|-- bra.s 409c <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    4092:	|  |  \-> movea.l (sp),a0
    4094:	|  |      move.l (a0),d0
    4096:	|  |      moveq #44,d1
    4098:	|  |      add.l d0,d1
    409a:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    409c:	|  \----> movea.l (sp),a0
    409e:	|         move.l (a0),d0
    40a0:	\-------- bne.s 4072 <pauseFunction+0xa>
		}
	}
}
    40a2:	          nop
    40a4:	          nop
    40a6:	          addq.l #4,sp
    40a8:	          rts

000040aa <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    40aa:	move.l 18b58 <allRunningFunctions>,d0
    40b0:	movea.l 4(sp),a0
    40b4:	move.l d0,44(a0)
	allRunningFunctions = fun;
    40b8:	move.l 4(sp),18b58 <allRunningFunctions>
}
    40c0:	nop
    40c2:	rts

000040c4 <runSludge>:

BOOL runSludge () {
    40c4:	                   lea -12(sp),sp
    40c8:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    40ca:	                   move.l 18b58 <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    40d2:	      /----------- bra.s 414e <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    40d4:	   /--|----------> movea.l 12(sp),a0
    40d8:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    40de:	   |  |            movea.l 12(sp),a0
    40e2:	   |  |            move.b 56(a0),d0
    40e6:	   |  |  /-------- bne.s 4148 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    40e8:	   |  |  |         movea.l 12(sp),a0
    40ec:	   |  |  |         move.l 12(a0),d0
    40f0:	   |  |  |  /----- beq.s 411a <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    40f2:	   |  |  |  |      movea.l 12(sp),a0
    40f6:	   |  |  |  |      move.l 12(a0),d0
    40fa:	   |  |  |  |  /-- bpl.s 4106 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    40fc:	   |  |  |  |  |   movea.l 12(sp),a0
    4100:	   |  |  |  |  |   clr.l 12(a0)
    4104:	   |  |  +--|--|-- bra.s 4148 <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    4106:	   |  |  |  |  \-> movea.l 12(sp),a0
    410a:	   |  |  |  |      move.l 12(a0),d0
    410e:	   |  |  |  |      subq.l #1,d0
    4110:	   |  |  |  |      movea.l 12(sp),a0
    4114:	   |  |  |  |      move.l d0,12(a0)
    4118:	   |  |  +--|----- bra.s 4148 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    411a:	   |  |  |  \----> movea.l 12(sp),a0
    411e:	   |  |  |         move.w 50(a0),d0
    4122:	   |  |  |     /-- beq.s 4132 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    4124:	   |  |  |     |   movea.l 12(sp),a0
    4128:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    412c:	   |  |  |     |   jsr 570e <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    4132:	   |  |  |     \-> move.l 12(sp),-(sp)
    4136:	   |  |  |         jsr 230e <continueFunction>
    413c:	   |  |  |         addq.l #4,sp
    413e:	   |  |  |         tst.w d0
    4140:	   |  |  +-------- bne.s 4148 <runSludge+0x84>
					return FALSE;
    4142:	   |  |  |         clr.w d0
    4144:	/--|--|--|-------- bra.w 41d4 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    4148:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    414e:	|  |  \----------> tst.l 12(sp)
    4152:	|  \-------------- bne.s 40d4 <runSludge+0x10>
	}

	if (loadNow) {
    4154:	|                  move.l 18b8c <loadNow>,d0
    415a:	|        /-------- beq.s 41d2 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    415c:	|        |         movea.l 18b8c <loadNow>,a0
    4162:	|        |         move.b (a0),d0
    4164:	|        |         cmpi.b #58,d0
    4168:	|        |  /----- bne.s 419c <runSludge+0xd8>
			saveGame (loadNow + 1);
    416a:	|        |  |      move.l 18b8c <loadNow>,d0
    4170:	|        |  |      addq.l #1,d0
    4172:	|        |  |      move.l d0,-(sp)
    4174:	|        |  |      jsr 9c44 <saveGame>
    417a:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    417c:	|        |  |      movea.l 18cde <saverFunc>,a0
    4182:	|        |  |      lea 28(a0),a0
    4186:	|        |  |      pea 1 <_start+0x1>
    418a:	|        |  |      pea 1 <_start+0x1>
    418e:	|        |  |      move.l a0,-(sp)
    4190:	|        |  |      jsr 122f4 <setVariable>
    4196:	|        |  |      lea 12(sp),sp
    419a:	|        |  |  /-- bra.s 41b4 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    419c:	|        |  \--|-> move.l 18b8c <loadNow>,d0
    41a2:	|        |     |   move.l d0,-(sp)
    41a4:	|        |     |   jsr 978c <loadGame>
    41aa:	|        |     |   addq.l #4,sp
    41ac:	|        |     |   tst.w d0
    41ae:	|        |     +-- bne.s 41b4 <runSludge+0xf0>
    41b0:	|        |     |   clr.w d0
    41b2:	+--------|-----|-- bra.s 41d4 <runSludge+0x110>
		}
		FreeVec(loadNow);
    41b4:	|        |     \-> move.l 18b8c <loadNow>,8(sp)
    41bc:	|        |         move.l 18bc0 <SysBase>,d0
    41c2:	|        |         movea.l d0,a6
    41c4:	|        |         movea.l 8(sp),a1
    41c8:	|        |         jsr -690(a6)
		loadNow = NULL;
    41cc:	|        |         clr.l 18b8c <loadNow>
	}

	return TRUE;
    41d2:	|        \-------> moveq #1,d0
}
    41d4:	\----------------> movea.l (sp)+,a6
    41d6:	                   lea 12(sp),sp
    41da:	                   rts

000041dc <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    41dc:	movea.l 18552 <currentEvents>,a0
    41e2:	move.l (a0),d0
    41e4:	move.l 4(sp),-(sp)
    41e8:	move.l d0,-(sp)
    41ea:	jsr 8d0 <put2bytes>
    41f0:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    41f2:	movea.l 18552 <currentEvents>,a0
    41f8:	move.l 4(a0),d0
    41fc:	move.l 4(sp),-(sp)
    4200:	move.l d0,-(sp)
    4202:	jsr 8d0 <put2bytes>
    4208:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    420a:	movea.l 18552 <currentEvents>,a0
    4210:	move.l 8(a0),d0
    4214:	move.l 4(sp),-(sp)
    4218:	move.l d0,-(sp)
    421a:	jsr 8d0 <put2bytes>
    4220:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    4222:	movea.l 18552 <currentEvents>,a0
    4228:	move.l 12(a0),d0
    422c:	move.l 4(sp),-(sp)
    4230:	move.l d0,-(sp)
    4232:	jsr 8d0 <put2bytes>
    4238:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    423a:	movea.l 18552 <currentEvents>,a0
    4240:	move.l 16(a0),d0
    4244:	move.l 4(sp),-(sp)
    4248:	move.l d0,-(sp)
    424a:	jsr 8d0 <put2bytes>
    4250:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    4252:	movea.l 18552 <currentEvents>,a0
    4258:	move.l 20(a0),d0
    425c:	move.l 4(sp),-(sp)
    4260:	move.l d0,-(sp)
    4262:	jsr 8d0 <put2bytes>
    4268:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    426a:	movea.l 18552 <currentEvents>,a0
    4270:	move.l 24(a0),d0
    4274:	move.l 4(sp),-(sp)
    4278:	move.l d0,-(sp)
    427a:	jsr 8d0 <put2bytes>
    4280:	addq.l #8,sp
}
    4282:	nop
    4284:	rts

00004286 <sludgeDisplay>:

void sludgeDisplay () {	
	CstDrawBackdrop();
    4286:	jsr 11da <CstDrawBackdrop>
	drawPeople();
    428c:	jsr 7598 <drawPeople>
	CstSwapBuffer();
    4292:	jsr 15e6 <CstSwapBuffer>
}
    4298:	nop
    429a:	rts

0000429c <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    429c:	      /-- bra.s 42bc <stackSetByIndex+0x20>
		vS = vS->next;
    429e:	/-----|-> movea.l 4(sp),a0
    42a2:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    42a8:	|     +-- bne.s 42bc <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    42aa:	|     |   pea 14e87 <custom.c.36a9b171+0x28d>
    42b0:	|     |   jsr 13a4a <KPrintF>
    42b6:	|     |   addq.l #4,sp
			return FALSE;
    42b8:	|     |   clr.w d0
    42ba:	|  /--|-- bra.s 42de <stackSetByIndex+0x42>
	while (theIndex--) {
    42bc:	|  |  \-> move.l 8(sp),d0
    42c0:	|  |      move.l d0,d1
    42c2:	|  |      subq.l #1,d1
    42c4:	|  |      move.l d1,8(sp)
    42c8:	|  |      tst.l d0
    42ca:	\--|----- bne.s 429e <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    42cc:	   |      move.l 4(sp),d0
    42d0:	   |      move.l d0,-(sp)
    42d2:	   |      move.l 16(sp),-(sp)
    42d6:	   |      jsr 11ebc <copyVariable>
    42dc:	   |      addq.l #8,sp
}
    42de:	   \----> rts

000042e0 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    42e0:	             lea -24(sp),sp
    42e4:	             move.l a6,-(sp)
    42e6:	             move.l 48(sp),d0
    42ea:	             move.w d0,d0
    42ec:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    42f0:	             moveq #58,d0
    42f2:	             move.l d0,24(sp)
    42f6:	             clr.l 20(sp)
    42fa:	             move.l 18bc0 <SysBase>,d0
    4300:	             movea.l d0,a6
    4302:	             move.l 24(sp),d0
    4306:	             move.l 20(sp),d1
    430a:	             jsr -684(a6)
    430e:	             move.l d0,16(sp)
    4312:	             move.l 16(sp),d0
    4316:	             move.l d0,12(sp)
	if(!newFunc) {
    431a:	         /-- bne.s 4330 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    431c:	         |   pea 14ea0 <custom.c.36a9b171+0x2a6>
    4322:	         |   jsr 13a4a <KPrintF>
    4328:	         |   addq.l #4,sp
		return 0;
    432a:	         |   moveq #0,d0
    432c:	/--------|-- bra.w 4446 <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    4330:	|        \-> move.l 32(sp),d0
    4334:	|            movea.l 12(sp),a0
    4338:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    433a:	|            move.l 12(sp),-(sp)
    433e:	|            jsr 3a66 <loadFunctionCode>
    4344:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    4346:	|            movea.l 12(sp),a0
    434a:	|            move.l 16(a0),d1
    434e:	|            move.l 36(sp),d0
    4352:	|            cmp.l d1,d0
    4354:	|        /-- beq.s 436a <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    4356:	|        |   pea 14ec9 <custom.c.36a9b171+0x2cf>
    435c:	|        |   jsr 13a4a <KPrintF>
    4362:	|        |   addq.l #4,sp
		return NULL; 
    4364:	|        |   moveq #0,d0
    4366:	+--------|-- bra.w 4446 <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    436a:	|        \-> movea.l 12(sp),a0
    436e:	|            move.l 16(a0),d1
    4372:	|            movea.l 12(sp),a0
    4376:	|            move.l 8(a0),d0
    437a:	|            cmp.l d1,d0
    437c:	|  /-------- bge.s 43e6 <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    437e:	|  |         pea 14ee5 <custom.c.36a9b171+0x2eb>
    4384:	|  |         jsr 13a4a <KPrintF>
    438a:	|  |         addq.l #4,sp
		return NULL; 
    438c:	|  |         moveq #0,d0
    438e:	+--|-------- bra.w 4446 <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    4392:	|  |  /----> movea.l 44(sp),a0
    4396:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    439a:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    439e:	|  |  |      movea.l 44(sp),a0
    43a2:	|  |  |      move.l (a0),d0
    43a4:	|  |  |  /-- bne.s 43ba <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    43a6:	|  |  |  |   pea 14f0f <custom.c.36a9b171+0x315>
    43ac:	|  |  |  |   jsr 13a4a <KPrintF>
    43b2:	|  |  |  |   addq.l #4,sp
			return NULL;
    43b4:	|  |  |  |   moveq #0,d0
    43b6:	+--|--|--|-- bra.w 4446 <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    43ba:	|  |  |  \-> movea.l 12(sp),a0
    43be:	|  |  |      move.l 20(a0),d1
    43c2:	|  |  |      move.l 36(sp),d0
    43c6:	|  |  |      lsl.l #3,d0
    43c8:	|  |  |      add.l d0,d1
    43ca:	|  |  |      move.l 8(sp),d0
    43ce:	|  |  |      move.l d1,-(sp)
    43d0:	|  |  |      move.l d0,-(sp)
    43d2:	|  |  |      jsr 11ebc <copyVariable>
    43d8:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    43da:	|  |  |      move.l 44(sp),-(sp)
    43de:	|  |  |      jsr 12386 <trimStack>
    43e4:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    43e6:	|  \--|----> tst.l 36(sp)
    43ea:	|     \----- bne.s 4392 <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    43ec:	|            movea.l 12(sp),a0
    43f0:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    43f4:	|            movea.l 12(sp),a0
    43f8:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    43fc:	|            movea.l 12(sp),a0
    4400:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    4406:	|            movea.l 12(sp),a0
    440a:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    4410:	|            movea.l 12(sp),a0
    4414:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    4418:	|            movea.l 12(sp),a0
    441c:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    4420:	|            movea.l 12(sp),a0
    4424:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    4428:	|            movea.l 12(sp),a0
    442c:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    4430:	|            movea.l 12(sp),a0
    4434:	|            clr.l 28(a0)

	restartFunction (newFunc);
    4438:	|            move.l 12(sp),-(sp)
    443c:	|            jsr 40aa <restartFunction>
    4442:	|            addq.l #4,sp
	return 1;
    4444:	|            moveq #1,d0
}
    4446:	\----------> movea.l (sp)+,a6
    4448:	             lea 24(sp),sp
    444c:	             rts

0000444e <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    444e:	clr.w 1855e <sliceBusy>
}
    4454:	nop
    4456:	rts

00004458 <getNumberedString>:

char * getNumberedString (int value) {
    4458:	       lea -56(sp),sp
    445c:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    4460:	       move.w 1855e <sliceBusy>,d0
    4466:	   /-- beq.s 44b0 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    4468:	   |   move.l 18bc8 <DOSBase>,d0
    446e:	   |   movea.l d0,a6
    4470:	   |   jsr -60(a6)
    4474:	   |   move.l d0,28(sp)
    4478:	   |   move.l 28(sp),d0
    447c:	   |   move.l d0,24(sp)
    4480:	   |   move.l #85850,20(sp)
    4488:	   |   moveq #76,d0
    448a:	   |   move.l d0,16(sp)
    448e:	   |   move.l 18bc8 <DOSBase>,d0
    4494:	   |   movea.l d0,a6
    4496:	   |   move.l 24(sp),d1
    449a:	   |   move.l 20(sp),d2
    449e:	   |   move.l 16(sp),d3
    44a2:	   |   jsr -48(a6)
    44a6:	   |   move.l d0,12(sp)
		return NULL;
    44aa:	   |   moveq #0,d0
    44ac:	/--|-- bra.w 454c <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    44b0:	|  \-> move.l 18ba8 <bigDataFile>,64(sp)
    44b8:	|      move.l 72(sp),d0
    44bc:	|      add.l d0,d0
    44be:	|      add.l d0,d0
    44c0:	|      move.l d0,d1
    44c2:	|      move.l 18bb4 <startOfTextIndex>,d0
    44c8:	|      add.l d1,d0
    44ca:	|      move.l d0,60(sp)
    44ce:	|      moveq #-1,d0
    44d0:	|      move.l d0,56(sp)
    44d4:	|      move.l 18bc8 <DOSBase>,d0
    44da:	|      movea.l d0,a6
    44dc:	|      move.l 64(sp),d1
    44e0:	|      move.l 60(sp),d2
    44e4:	|      move.l 56(sp),d3
    44e8:	|      jsr -66(a6)
    44ec:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    44f0:	|      move.l 18ba8 <bigDataFile>,d0
    44f6:	|      move.l d0,-(sp)
    44f8:	|      jsr 718 <get4bytes>
    44fe:	|      addq.l #4,sp
    4500:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    4504:	|      move.l 18ba8 <bigDataFile>,48(sp)
    450c:	|      move.l 72(sp),44(sp)
    4512:	|      moveq #-1,d0
    4514:	|      move.l d0,40(sp)
    4518:	|      move.l 18bc8 <DOSBase>,d0
    451e:	|      movea.l d0,a6
    4520:	|      move.l 48(sp),d1
    4524:	|      move.l 44(sp),d2
    4528:	|      move.l 40(sp),d3
    452c:	|      jsr -66(a6)
    4530:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    4534:	|      move.l 18ba8 <bigDataFile>,d0
    453a:	|      move.l d0,-(sp)
    453c:	|      jsr b02 <readString>
    4542:	|      addq.l #4,sp
    4544:	|      move.l d0,32(sp)
	
	return s;
    4548:	|      move.l 32(sp),d0
}
    454c:	\----> movem.l (sp)+,d2-d3/a6
    4550:	       lea 56(sp),sp
    4554:	       rts

00004556 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    4556:	       lea -32(sp),sp
    455a:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    455e:	       move.w 1855e <sliceBusy>,d0
    4564:	   /-- beq.s 4580 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    4566:	   |   pea 14fa7 <custom.c.36a9b171+0x3ad>
    456c:	   |   pea 14fc5 <custom.c.36a9b171+0x3cb>
    4572:	   |   jsr 13a4a <KPrintF>
    4578:	   |   addq.l #8,sp
		return 0;
    457a:	   |   moveq #0,d0
    457c:	/--|-- bra.w 4614 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    4580:	|  \-> move.l 18ba8 <bigDataFile>,40(sp)
    4588:	|      move.l 48(sp),d0
    458c:	|      add.l d0,d0
    458e:	|      add.l d0,d0
    4590:	|      move.l d0,d1
    4592:	|      move.l 18bb0 <startOfDataIndex>,d0
    4598:	|      add.l d1,d0
    459a:	|      move.l d0,36(sp)
    459e:	|      moveq #-1,d0
    45a0:	|      move.l d0,32(sp)
    45a4:	|      move.l 18bc8 <DOSBase>,d0
    45aa:	|      movea.l d0,a6
    45ac:	|      move.l 40(sp),d1
    45b0:	|      move.l 36(sp),d2
    45b4:	|      move.l 32(sp),d3
    45b8:	|      jsr -66(a6)
    45bc:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    45c0:	|      move.l 18ba8 <bigDataFile>,24(sp)
    45c8:	|      move.l 18ba8 <bigDataFile>,d0
    45ce:	|      move.l d0,-(sp)
    45d0:	|      jsr 718 <get4bytes>
    45d6:	|      addq.l #4,sp
    45d8:	|      move.l d0,20(sp)
    45dc:	|      clr.l 16(sp)
    45e0:	|      move.l 18bc8 <DOSBase>,d0
    45e6:	|      movea.l d0,a6
    45e8:	|      move.l 24(sp),d1
    45ec:	|      move.l 20(sp),d2
    45f0:	|      move.l 16(sp),d3
    45f4:	|      jsr -66(a6)
    45f8:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    45fc:	|      move.w #1,1855e <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    4604:	|      move.l 18ba8 <bigDataFile>,d0
    460a:	|      move.l d0,-(sp)
    460c:	|      jsr 718 <get4bytes>
    4612:	|      addq.l #4,sp
}
    4614:	\----> movem.l (sp)+,d2-d3/a6
    4618:	       lea 32(sp),sp
    461c:	       rts

0000461e <openObjectSlice>:

BOOL openObjectSlice (int num) {
    461e:	       lea -32(sp),sp
    4622:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    4626:	       move.w 1855e <sliceBusy>,d0
    462c:	   /-- beq.s 4648 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    462e:	   |   pea 14fa7 <custom.c.36a9b171+0x3ad>
    4634:	   |   pea 14fc5 <custom.c.36a9b171+0x3cb>
    463a:	   |   jsr 13a4a <KPrintF>
    4640:	   |   addq.l #8,sp
        return FALSE;
    4642:	   |   clr.w d0
    4644:	/--|-- bra.w 46d4 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    4648:	|  \-> move.l 18ba8 <bigDataFile>,40(sp)
    4650:	|      move.l 48(sp),d0
    4654:	|      add.l d0,d0
    4656:	|      add.l d0,d0
    4658:	|      move.l d0,d1
    465a:	|      move.l 18bbc <startOfObjectIndex>,d0
    4660:	|      add.l d1,d0
    4662:	|      move.l d0,36(sp)
    4666:	|      moveq #-1,d0
    4668:	|      move.l d0,32(sp)
    466c:	|      move.l 18bc8 <DOSBase>,d0
    4672:	|      movea.l d0,a6
    4674:	|      move.l 40(sp),d1
    4678:	|      move.l 36(sp),d2
    467c:	|      move.l 32(sp),d3
    4680:	|      jsr -66(a6)
    4684:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    4688:	|      move.l 18ba8 <bigDataFile>,24(sp)
    4690:	|      move.l 18ba8 <bigDataFile>,d0
    4696:	|      move.l d0,-(sp)
    4698:	|      jsr 718 <get4bytes>
    469e:	|      addq.l #4,sp
    46a0:	|      move.l d0,20(sp)
    46a4:	|      moveq #-1,d0
    46a6:	|      move.l d0,16(sp)
    46aa:	|      move.l 18bc8 <DOSBase>,d0
    46b0:	|      movea.l d0,a6
    46b2:	|      move.l 24(sp),d1
    46b6:	|      move.l 20(sp),d2
    46ba:	|      move.l 16(sp),d3
    46be:	|      jsr -66(a6)
    46c2:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    46c6:	|      move.w #1,1855e <sliceBusy>
    46ce:	|      move.w 1855e <sliceBusy>,d0
}
    46d4:	\----> movem.l (sp)+,d2-d3/a6
    46d8:	       lea 32(sp),sp
    46dc:	       rts

000046de <openSubSlice>:

BOOL openSubSlice (int num) {
    46de:	       lea -32(sp),sp
    46e2:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    46e6:	       move.w 1855e <sliceBusy>,d0
    46ec:	   /-- beq.s 4708 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    46ee:	   |   pea 14fa7 <custom.c.36a9b171+0x3ad>
    46f4:	   |   pea 14fc5 <custom.c.36a9b171+0x3cb>
    46fa:	   |   jsr 13a4a <KPrintF>
    4700:	   |   addq.l #8,sp
		return FALSE;
    4702:	   |   clr.w d0
    4704:	/--|-- bra.w 4794 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    4708:	|  \-> move.l 18ba8 <bigDataFile>,40(sp)
    4710:	|      move.l 48(sp),d0
    4714:	|      add.l d0,d0
    4716:	|      add.l d0,d0
    4718:	|      move.l d0,d1
    471a:	|      move.l 18bb8 <startOfSubIndex>,d0
    4720:	|      add.l d1,d0
    4722:	|      move.l d0,36(sp)
    4726:	|      moveq #-1,d0
    4728:	|      move.l d0,32(sp)
    472c:	|      move.l 18bc8 <DOSBase>,d0
    4732:	|      movea.l d0,a6
    4734:	|      move.l 40(sp),d1
    4738:	|      move.l 36(sp),d2
    473c:	|      move.l 32(sp),d3
    4740:	|      jsr -66(a6)
    4744:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    4748:	|      move.l 18ba8 <bigDataFile>,24(sp)
    4750:	|      move.l 18ba8 <bigDataFile>,d0
    4756:	|      move.l d0,-(sp)
    4758:	|      jsr 718 <get4bytes>
    475e:	|      addq.l #4,sp
    4760:	|      move.l d0,20(sp)
    4764:	|      moveq #-1,d0
    4766:	|      move.l d0,16(sp)
    476a:	|      move.l 18bc8 <DOSBase>,d0
    4770:	|      movea.l d0,a6
    4772:	|      move.l 24(sp),d1
    4776:	|      move.l 20(sp),d2
    477a:	|      move.l 16(sp),d3
    477e:	|      jsr -66(a6)
    4782:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    4786:	|      move.w #1,1855e <sliceBusy>
    478e:	|      move.w 1855e <sliceBusy>,d0
}
    4794:	\----> movem.l (sp)+,d2-d3/a6
    4798:	       lea 32(sp),sp
    479c:	       rts

0000479e <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    479e:	       lea -180(sp),sp
    47a2:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    47a6:	       tst.l 196(sp)
    47aa:	/----- beq.s 47ea <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    47ac:	|      move.l 196(sp),18ba8 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    47b4:	|      move.l 196(sp),168(sp)
    47ba:	|      clr.l 164(sp)
    47be:	|      clr.l 160(sp)
    47c2:	|      move.l 18bc8 <DOSBase>,d0
    47c8:	|      movea.l d0,a6
    47ca:	|      move.l 168(sp),d1
    47ce:	|      move.l 164(sp),d2
    47d2:	|      move.l 160(sp),d3
    47d6:	|      jsr -66(a6)
    47da:	|      move.l d0,156(sp)
    47de:	|      move.l 156(sp),d0
    47e2:	|      move.l d0,18bac <startIndex>
    47e8:	|  /-- bra.s 4824 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    47ea:	\--|-> move.l 18ba8 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    47f2:	   |   move.l 196(sp),184(sp)
    47f8:	   |   move.l 18bac <startIndex>,d0
    47fe:	   |   move.l d0,180(sp)
    4802:	   |   moveq #-1,d0
    4804:	   |   move.l d0,176(sp)
    4808:	   |   move.l 18bc8 <DOSBase>,d0
    480e:	   |   movea.l d0,a6
    4810:	   |   move.l 184(sp),d1
    4814:	   |   move.l 180(sp),d2
    4818:	   |   move.l 176(sp),d3
    481c:	   |   jsr -66(a6)
    4820:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    4824:	   \-> clr.w 1855e <sliceBusy>

	if (skipBefore > numLanguages) {
    482a:	       move.l 204(sp),d0
    482e:	       cmp.l 200(sp),d0
    4832:	   /-- bls.s 4846 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    4834:	   |   pea 14fdf <custom.c.36a9b171+0x3e5>
    483a:	   |   jsr 13a4a <KPrintF>
    4840:	   |   addq.l #4,sp
		skipBefore = 0;
    4842:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    4846:	   \-> move.l 200(sp),d0
    484a:	       sub.l 204(sp),d0
    484e:	       move.l d0,188(sp)
	while (skipBefore) {
    4852:	   /-- bra.s 4890 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    4854:	/--|-> move.l 196(sp),24(sp)
    485a:	|  |   move.l 196(sp),-(sp)
    485e:	|  |   jsr 718 <get4bytes>
    4864:	|  |   addq.l #4,sp
    4866:	|  |   move.l d0,20(sp)
    486a:	|  |   moveq #-1,d0
    486c:	|  |   move.l d0,16(sp)
    4870:	|  |   move.l 18bc8 <DOSBase>,d0
    4876:	|  |   movea.l d0,a6
    4878:	|  |   move.l 24(sp),d1
    487c:	|  |   move.l 20(sp),d2
    4880:	|  |   move.l 16(sp),d3
    4884:	|  |   jsr -66(a6)
    4888:	|  |   move.l d0,12(sp)
		skipBefore --;
    488c:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    4890:	|  \-> tst.l 204(sp)
    4894:	\----- bne.s 4854 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    4896:	       move.l 196(sp),152(sp)
    489c:	       clr.l 148(sp)
    48a0:	       clr.l 144(sp)
    48a4:	       move.l 18bc8 <DOSBase>,d0
    48aa:	       movea.l d0,a6
    48ac:	       move.l 152(sp),d1
    48b0:	       move.l 148(sp),d2
    48b4:	       move.l 144(sp),d3
    48b8:	       jsr -66(a6)
    48bc:	       move.l d0,140(sp)
    48c0:	       move.l 140(sp),d0
    48c4:	       addq.l #4,d0
    48c6:	       move.l d0,18bb4 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    48cc:	       move.l 196(sp),136(sp)
    48d2:	       move.l 196(sp),-(sp)
    48d6:	       jsr 718 <get4bytes>
    48dc:	       addq.l #4,sp
    48de:	       move.l d0,132(sp)
    48e2:	       moveq #-1,d0
    48e4:	       move.l d0,128(sp)
    48e8:	       move.l 18bc8 <DOSBase>,d0
    48ee:	       movea.l d0,a6
    48f0:	       move.l 136(sp),d1
    48f4:	       move.l 132(sp),d2
    48f8:	       move.l 128(sp),d3
    48fc:	       jsr -66(a6)
    4900:	       move.l d0,124(sp)

	while (skipAfter) {
    4904:	   /-- bra.s 4942 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    4906:	/--|-> move.l 196(sp),40(sp)
    490c:	|  |   move.l 196(sp),-(sp)
    4910:	|  |   jsr 718 <get4bytes>
    4916:	|  |   addq.l #4,sp
    4918:	|  |   move.l d0,36(sp)
    491c:	|  |   moveq #-1,d0
    491e:	|  |   move.l d0,32(sp)
    4922:	|  |   move.l 18bc8 <DOSBase>,d0
    4928:	|  |   movea.l d0,a6
    492a:	|  |   move.l 40(sp),d1
    492e:	|  |   move.l 36(sp),d2
    4932:	|  |   move.l 32(sp),d3
    4936:	|  |   jsr -66(a6)
    493a:	|  |   move.l d0,28(sp)
		skipAfter --;
    493e:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    4942:	|  \-> tst.l 188(sp)
    4946:	\----- bne.s 4906 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    4948:	       move.l 196(sp),120(sp)
    494e:	       clr.l 116(sp)
    4952:	       clr.l 112(sp)
    4956:	       move.l 18bc8 <DOSBase>,d0
    495c:	       movea.l d0,a6
    495e:	       move.l 120(sp),d1
    4962:	       move.l 116(sp),d2
    4966:	       move.l 112(sp),d3
    496a:	       jsr -66(a6)
    496e:	       move.l d0,108(sp)
    4972:	       move.l 108(sp),d0
    4976:	       addq.l #4,d0
    4978:	       move.l d0,18bb8 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    497e:	       move.l 196(sp),104(sp)
    4984:	       move.l 196(sp),-(sp)
    4988:	       jsr 718 <get4bytes>
    498e:	       addq.l #4,sp
    4990:	       move.l d0,100(sp)
    4994:	       clr.l 96(sp)
    4998:	       move.l 18bc8 <DOSBase>,d0
    499e:	       movea.l d0,a6
    49a0:	       move.l 104(sp),d1
    49a4:	       move.l 100(sp),d2
    49a8:	       move.l 96(sp),d3
    49ac:	       jsr -66(a6)
    49b0:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    49b4:	       move.l 196(sp),88(sp)
    49ba:	       clr.l 84(sp)
    49be:	       clr.l 80(sp)
    49c2:	       move.l 18bc8 <DOSBase>,d0
    49c8:	       movea.l d0,a6
    49ca:	       move.l 88(sp),d1
    49ce:	       move.l 84(sp),d2
    49d2:	       move.l 80(sp),d3
    49d6:	       jsr -66(a6)
    49da:	       move.l d0,76(sp)
    49de:	       move.l 76(sp),d0
    49e2:	       addq.l #4,d0
    49e4:	       move.l d0,18bbc <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    49ea:	       move.l 196(sp),72(sp)
    49f0:	       move.l 196(sp),-(sp)
    49f4:	       jsr 718 <get4bytes>
    49fa:	       addq.l #4,sp
    49fc:	       move.l d0,68(sp)
    4a00:	       clr.l 64(sp)
    4a04:	       move.l 18bc8 <DOSBase>,d0
    4a0a:	       movea.l d0,a6
    4a0c:	       move.l 72(sp),d1
    4a10:	       move.l 68(sp),d2
    4a14:	       move.l 64(sp),d3
    4a18:	       jsr -66(a6)
    4a1c:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    4a20:	       move.l 196(sp),56(sp)
    4a26:	       clr.l 52(sp)
    4a2a:	       clr.l 48(sp)
    4a2e:	       move.l 18bc8 <DOSBase>,d0
    4a34:	       movea.l d0,a6
    4a36:	       move.l 56(sp),d1
    4a3a:	       move.l 52(sp),d2
    4a3e:	       move.l 48(sp),d3
    4a42:	       jsr -66(a6)
    4a46:	       move.l d0,44(sp)
    4a4a:	       move.l 44(sp),d0
    4a4e:	       move.l d0,18bb0 <startOfDataIndex>
    4a54:	       nop
    4a56:	       movem.l (sp)+,d2-d3/a6
    4a5a:	       lea 180(sp),sp
    4a5e:	       rts

00004a60 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    4a60:	    lea -20(sp),sp
    4a64:	    move.l a6,-(sp)
    4a66:	    move.l d7,-(sp)
	APTR vbr = 0;
    4a68:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    4a6c:	    move.w #20090,10(sp)
    4a72:	    move.w #2049,12(sp)
    4a78:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    4a7e:	    movea.l 18bc0 <SysBase>,a0
    4a84:	    move.w 296(a0),d0
    4a88:	    move.w d0,d0
    4a8a:	    andi.l #65535,d0
    4a90:	    moveq #1,d1
    4a92:	    and.l d1,d0
    4a94:	/-- beq.s 4ac2 <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    4a96:	|   lea 28(sp),a0
    4a9a:	|   lea -18(a0),a0
    4a9e:	|   move.l a0,20(sp)
    4aa2:	|   move.l 18bc0 <SysBase>,d0
    4aa8:	|   movea.l d0,a6
    4aaa:	|   move.l 20(sp),d7
    4aae:	|   exg d7,a5
    4ab0:	|   jsr -30(a6)
    4ab4:	|   exg d7,a5
    4ab6:	|   move.l d0,16(sp)
    4aba:	|   move.l 16(sp),d0
    4abe:	|   move.l d0,24(sp)

	return vbr;
    4ac2:	\-> move.l 24(sp),d0
}
    4ac6:	    move.l (sp)+,d7
    4ac8:	    movea.l (sp)+,a6
    4aca:	    lea 20(sp),sp
    4ace:	    rts

00004ad0 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    4ad0:	movea.l 18be6 <VBR>,a0
    4ad6:	lea 108(a0),a0
    4ada:	move.l 4(sp),(a0)
}
    4ade:	nop
    4ae0:	rts

00004ae2 <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    4ae2:	movea.l 18be6 <VBR>,a0
    4ae8:	move.l 108(a0),d0
}
    4aec:	rts

00004aee <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    4aee:	       subq.l #8,sp
    4af0:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    4af2:	       pea 15028 <custom.c.36a9b171+0x42e>
    4af8:	       jsr 13a4a <KPrintF>
    4afe:	       addq.l #4,sp
	Forbid();
    4b00:	       move.l 18bc0 <SysBase>,d0
    4b06:	       movea.l d0,a6
    4b08:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    4b0c:	       pea 15040 <custom.c.36a9b171+0x446>
    4b12:	       jsr 13a4a <KPrintF>
    4b18:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    4b1a:	       movea.l 18bc4 <custom>,a0
    4b20:	       move.w 16(a0),d0
    4b24:	       move.w d0,18be4 <SystemADKCON>
	SystemInts=custom->intenar;
    4b2a:	       movea.l 18bc4 <custom>,a0
    4b30:	       move.w 28(a0),d0
    4b34:	       move.w d0,18be0 <SystemInts>
	SystemDMA=custom->dmaconr;
    4b3a:	       movea.l 18bc4 <custom>,a0
    4b40:	       move.w 2(a0),d0
    4b44:	       move.w d0,18be2 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    4b4a:	       movea.l 18bcc <GfxBase>,a0
    4b50:	       move.l 34(a0),d0
    4b54:	       move.l d0,18bee <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    4b5a:	       pea 1505e <custom.c.36a9b171+0x464>
    4b60:	       jsr 13a4a <KPrintF>
    4b66:	       addq.l #4,sp
	LoadView(0);
    4b68:	       clr.l 4(sp)
    4b6c:	       move.l 18bcc <GfxBase>,d0
    4b72:	       movea.l d0,a6
    4b74:	       movea.l 4(sp),a1
    4b78:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    4b7c:	       pea 15074 <custom.c.36a9b171+0x47a>
    4b82:	       jsr 13a4a <KPrintF>
    4b88:	       addq.l #4,sp
	WaitTOF();
    4b8a:	       move.l 18bcc <GfxBase>,d0
    4b90:	       movea.l d0,a6
    4b92:	       jsr -270(a6)
	WaitTOF();
    4b96:	       move.l 18bcc <GfxBase>,d0
    4b9c:	       movea.l d0,a6
    4b9e:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    4ba2:	       pea 15089 <custom.c.36a9b171+0x48f>
    4ba8:	       jsr 13a4a <KPrintF>
    4bae:	       addq.l #4,sp
	WaitVbl();
    4bb0:	       jsr 1397e <WaitVbl>
	WaitVbl();
    4bb6:	       jsr 1397e <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    4bbc:	       pea 1509e <custom.c.36a9b171+0x4a4>
    4bc2:	       jsr 13a4a <KPrintF>
    4bc8:	       addq.l #4,sp
	OwnBlitter();
    4bca:	       move.l 18bcc <GfxBase>,d0
    4bd0:	       movea.l d0,a6
    4bd2:	       jsr -456(a6)
	WaitBlit();	
    4bd6:	       move.l 18bcc <GfxBase>,d0
    4bdc:	       movea.l d0,a6
    4bde:	       jsr -228(a6)
	Disable();
    4be2:	       move.l 18bc0 <SysBase>,d0
    4be8:	       movea.l d0,a6
    4bea:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    4bee:	       pea 150bf <custom.c.36a9b171+0x4c5>
    4bf4:	       jsr 13a4a <KPrintF>
    4bfa:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    4bfc:	       movea.l 18bc4 <custom>,a0
    4c02:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    4c08:	       pea 150d6 <custom.c.36a9b171+0x4dc>
    4c0e:	       jsr 13a4a <KPrintF>
    4c14:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    4c16:	       clr.l 8(sp)
    4c1a:	   /-- bra.s 4c38 <TakeSystem+0x14a>
		custom->color[a]=0;
    4c1c:	/--|-> movea.l 18bc4 <custom>,a0
    4c22:	|  |   move.l 8(sp),d0
    4c26:	|  |   addi.l #192,d0
    4c2c:	|  |   add.l d0,d0
    4c2e:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    4c34:	|  |   addq.l #1,8(sp)
    4c38:	|  \-> moveq #31,d0
    4c3a:	|      cmp.l 8(sp),d0
    4c3e:	\----- bge.s 4c1c <TakeSystem+0x12e>

	WaitVbl();
    4c40:	       jsr 1397e <WaitVbl>
	WaitVbl();
    4c46:	       jsr 1397e <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    4c4c:	       pea 150fb <custom.c.36a9b171+0x501>
    4c52:	       jsr 13a4a <KPrintF>
    4c58:	       addq.l #4,sp
	VBR=GetVBR();
    4c5a:	       jsr 4a60 <GetVBR>
    4c60:	       move.l d0,18be6 <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    4c66:	       jsr 4ae2 <GetInterruptHandler>
    4c6c:	       move.l d0,18bea <SystemIrq>
}
    4c72:	       nop
    4c74:	       movea.l (sp)+,a6
    4c76:	       addq.l #8,sp
    4c78:	       rts

00004c7a <FreeSystem>:

void FreeSystem() { 
    4c7a:	subq.l #4,sp
    4c7c:	move.l a6,-(sp)
	WaitVbl();
    4c7e:	jsr 1397e <WaitVbl>
	WaitBlit();
    4c84:	move.l 18bcc <GfxBase>,d0
    4c8a:	movea.l d0,a6
    4c8c:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    4c90:	movea.l 18bc4 <custom>,a0
    4c96:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    4c9c:	movea.l 18bc4 <custom>,a0
    4ca2:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    4ca8:	movea.l 18bc4 <custom>,a0
    4cae:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    4cb4:	move.l 18bea <SystemIrq>,d0
    4cba:	move.l d0,-(sp)
    4cbc:	jsr 4ad0 <SetInterruptHandler>
    4cc2:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    4cc4:	movea.l 18bcc <GfxBase>,a0
    4cca:	move.l 38(a0),d0
    4cce:	movea.l 18bc4 <custom>,a0
    4cd4:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    4cd8:	movea.l 18bcc <GfxBase>,a0
    4cde:	move.l 50(a0),d0
    4ce2:	movea.l 18bc4 <custom>,a0
    4ce8:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    4cec:	movea.l 18bc4 <custom>,a0
    4cf2:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    4cf8:	move.w 18be2 <SystemDMA>,d0
    4cfe:	movea.l 18bc4 <custom>,a0
    4d04:	ori.w #-32768,d0
    4d08:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    4d0c:	move.w 18be4 <SystemADKCON>,d0
    4d12:	movea.l 18bc4 <custom>,a0
    4d18:	ori.w #-32768,d0
    4d1c:	move.w d0,158(a0)

	WaitBlit();	
    4d20:	move.l 18bcc <GfxBase>,d0
    4d26:	movea.l d0,a6
    4d28:	jsr -228(a6)
	DisownBlitter();
    4d2c:	move.l 18bcc <GfxBase>,d0
    4d32:	movea.l d0,a6
    4d34:	jsr -462(a6)
	Enable();
    4d38:	move.l 18bc0 <SysBase>,d0
    4d3e:	movea.l d0,a6
    4d40:	jsr -126(a6)

	LoadView(ActiView);
    4d44:	move.l 18bee <ActiView>,4(sp)
    4d4c:	move.l 18bcc <GfxBase>,d0
    4d52:	movea.l d0,a6
    4d54:	movea.l 4(sp),a1
    4d58:	jsr -222(a6)
	WaitTOF();
    4d5c:	move.l 18bcc <GfxBase>,d0
    4d62:	movea.l d0,a6
    4d64:	jsr -270(a6)
	WaitTOF();
    4d68:	move.l 18bcc <GfxBase>,d0
    4d6e:	movea.l d0,a6
    4d70:	jsr -270(a6)

	Permit();
    4d74:	move.l 18bc0 <SysBase>,d0
    4d7a:	movea.l d0,a6
    4d7c:	jsr -138(a6)
}
    4d80:	nop
    4d82:	movea.l (sp)+,a6
    4d84:	addq.l #4,sp
    4d86:	rts

00004d88 <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    4d88:	    lea -128(sp),sp
    4d8c:	    movem.l d2-d3/a6,-(sp)
	SysBase = *((struct ExecBase**)4UL);
    4d90:	    movea.w #4,a0
    4d94:	    move.l (a0),d0
    4d96:	    move.l d0,18bc0 <SysBase>
	custom = (struct Custom*)0xdff000;	
    4d9c:	    move.l #14675968,18bc4 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    4da6:	    move.l #86303,136(sp)
    4dae:	    clr.l 132(sp)
    4db2:	    move.l 18bc0 <SysBase>,d0
    4db8:	    movea.l d0,a6
    4dba:	    movea.l 136(sp),a1
    4dbe:	    move.l 132(sp),d0
    4dc2:	    jsr -552(a6)
    4dc6:	    move.l d0,128(sp)
    4dca:	    move.l 128(sp),d0
    4dce:	    move.l d0,18bcc <GfxBase>
	if (!GfxBase)
    4dd4:	    move.l 18bcc <GfxBase>,d0
    4dda:	/-- bne.s 4df0 <main+0x68>
		Exit(0);
    4ddc:	|   clr.l 124(sp)
    4de0:	|   move.l 18bc8 <DOSBase>,d0
    4de6:	|   movea.l d0,a6
    4de8:	|   move.l 124(sp),d1
    4dec:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    4df0:	\-> move.l #86320,120(sp)
    4df8:	    clr.l 116(sp)
    4dfc:	    move.l 18bc0 <SysBase>,d0
    4e02:	    movea.l d0,a6
    4e04:	    movea.l 120(sp),a1
    4e08:	    move.l 116(sp),d0
    4e0c:	    jsr -552(a6)
    4e10:	    move.l d0,112(sp)
    4e14:	    move.l 112(sp),d0
    4e18:	    move.l d0,18bc8 <DOSBase>
	if (!DOSBase)
    4e1e:	    move.l 18bc8 <DOSBase>,d0
    4e24:	/-- bne.s 4e3a <main+0xb2>
		Exit(0);
    4e26:	|   clr.l 108(sp)
    4e2a:	|   move.l 18bc8 <DOSBase>,d0
    4e30:	|   movea.l d0,a6
    4e32:	|   move.l 108(sp),d1
    4e36:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    4e3a:	\-> move.l #86332,104(sp)
    4e42:	    clr.l 100(sp)
    4e46:	    move.l 18bc0 <SysBase>,d0
    4e4c:	    movea.l d0,a6
    4e4e:	    movea.l 104(sp),a1
    4e52:	    move.l 100(sp),d0
    4e56:	    jsr -552(a6)
    4e5a:	    move.l d0,96(sp)
    4e5e:	    move.l 96(sp),d0
    4e62:	    move.l d0,18bd0 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    4e68:	    move.l 18bd0 <MathIeeeSingBasBase>,d0
    4e6e:	/-- bne.s 4e84 <main+0xfc>
		Exit(0);	
    4e70:	|   clr.l 92(sp)
    4e74:	|   move.l 18bc8 <DOSBase>,d0
    4e7a:	|   movea.l d0,a6
    4e7c:	|   move.l 92(sp),d1
    4e80:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    4e84:	\-> move.l #86356,88(sp)
    4e8c:	    clr.l 84(sp)
    4e90:	    move.l 18bc0 <SysBase>,d0
    4e96:	    movea.l d0,a6
    4e98:	    movea.l 88(sp),a1
    4e9c:	    move.l 84(sp),d0
    4ea0:	    jsr -552(a6)
    4ea4:	    move.l d0,80(sp)
    4ea8:	    move.l 80(sp),d0
    4eac:	    move.l d0,18bd4 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    4eb2:	    move.l 18bd4 <MathIeeeSingTransBase>,d0
    4eb8:	/-- bne.s 4ece <main+0x146>
		Exit(0);
    4eba:	|   clr.l 76(sp)
    4ebe:	|   move.l 18bc8 <DOSBase>,d0
    4ec4:	|   movea.l d0,a6
    4ec6:	|   move.l 76(sp),d1
    4eca:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    4ece:	\-> move.l #86382,72(sp)
    4ed6:	    clr.l 68(sp)
    4eda:	    move.l 18bc0 <SysBase>,d0
    4ee0:	    movea.l d0,a6
    4ee2:	    movea.l 72(sp),a1
    4ee6:	    move.l 68(sp),d0
    4eea:	    jsr -552(a6)
    4eee:	    move.l d0,64(sp)
    4ef2:	    move.l 64(sp),d0
    4ef6:	    move.l d0,18bdc <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    4efc:	    move.l 18bdc <MathIeeeDoubTransBase>,d0
    4f02:	/-- bne.s 4f18 <main+0x190>
		Exit(0);
    4f04:	|   clr.l 60(sp)
    4f08:	|   move.l 18bc8 <DOSBase>,d0
    4f0e:	|   movea.l d0,a6
    4f10:	|   move.l 60(sp),d1
    4f14:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    4f18:	\-> move.l #86408,56(sp)
    4f20:	    clr.l 52(sp)
    4f24:	    move.l 18bc0 <SysBase>,d0
    4f2a:	    movea.l d0,a6
    4f2c:	    movea.l 56(sp),a1
    4f30:	    move.l 52(sp),d0
    4f34:	    jsr -552(a6)
    4f38:	    move.l d0,48(sp)
    4f3c:	    move.l 48(sp),d0
    4f40:	    move.l d0,18bd8 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    4f46:	    move.l 18bd8 <MathIeeeDoubBasBase>,d0
    4f4c:	/-- bne.s 4f62 <main+0x1da>
		Exit(0);
    4f4e:	|   clr.l 44(sp)
    4f52:	|   move.l 18bc8 <DOSBase>,d0
    4f58:	|   movea.l d0,a6
    4f5a:	|   move.l 44(sp),d1
    4f5e:	|   jsr -144(a6)
	

	KPrintF("Hello debugger from Amiga!\n");
    4f62:	\-> pea 151a0 <custom.c.36a9b171+0x5a6>
    4f68:	    jsr 13a4a <KPrintF>
    4f6e:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console!\n", 15);
    4f70:	    move.l 18bc8 <DOSBase>,d0
    4f76:	    movea.l d0,a6
    4f78:	    jsr -60(a6)
    4f7c:	    move.l d0,40(sp)
    4f80:	    move.l 40(sp),d0
    4f84:	    move.l d0,36(sp)
    4f88:	    move.l #86460,32(sp)
    4f90:	    moveq #15,d0
    4f92:	    move.l d0,28(sp)
    4f96:	    move.l 18bc8 <DOSBase>,d0
    4f9c:	    movea.l d0,a6
    4f9e:	    move.l 36(sp),d1
    4fa2:	    move.l 32(sp),d2
    4fa6:	    move.l 28(sp),d3
    4faa:	    jsr -48(a6)
    4fae:	    move.l d0,24(sp)
	Delay(50);
    4fb2:	    moveq #50,d0
    4fb4:	    move.l d0,20(sp)
    4fb8:	    move.l 18bc8 <DOSBase>,d0
    4fbe:	    movea.l d0,a6
    4fc0:	    move.l 20(sp),d1
    4fc4:	    jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    4fc8:	    pea 151cc <custom.c.36a9b171+0x5d2>
    4fce:	    jsr 13a4a <KPrintF>
    4fd4:	    addq.l #4,sp
	TakeSystem();
    4fd6:	    jsr 4aee <TakeSystem>
	KPrintF("System Taken\n");
    4fdc:	    pea 151db <custom.c.36a9b171+0x5e1>
    4fe2:	    jsr 13a4a <KPrintF>
    4fe8:	    addq.l #4,sp

	custom->dmacon = 0x87ff;
    4fea:	    movea.l 18bc4 <custom>,a0
    4ff0:	    move.w #-30721,150(a0)
	WaitVbl();
    4ff6:	    jsr 1397e <WaitVbl>

	KPrintF("Starting main_sludge\n");
    4ffc:	    pea 151e9 <custom.c.36a9b171+0x5ef>
    5002:	    jsr 13a4a <KPrintF>
    5008:	    addq.l #4,sp
	main_sludge(argc, argv);	
    500a:	    move.l 148(sp),-(sp)
    500e:	    move.l 148(sp),-(sp)
    5012:	    jsr 1bf6 <main_sludge>
    5018:	    addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    501a:	    jsr 4c7a <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    5020:	    move.l 18bc8 <DOSBase>,16(sp)
    5028:	    move.l 18bc0 <SysBase>,d0
    502e:	    movea.l d0,a6
    5030:	    movea.l 16(sp),a1
    5034:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    5038:	    move.l 18bcc <GfxBase>,12(sp)
    5040:	    move.l 18bc0 <SysBase>,d0
    5046:	    movea.l d0,a6
    5048:	    movea.l 12(sp),a1
    504c:	    jsr -414(a6)
    5050:	    moveq #0,d0
}
    5052:	    movem.l (sp)+,d2-d3/a6
    5056:	    lea 128(sp),sp
    505a:	    rts

0000505c <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    505c:	    lea -16(sp),sp
    5060:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    5062:	    moveq #8,d0
    5064:	    move.l d0,16(sp)
    5068:	    clr.l 12(sp)
    506c:	    move.l 18bc0 <SysBase>,d0
    5072:	    movea.l d0,a6
    5074:	    move.l 16(sp),d0
    5078:	    move.l 12(sp),d1
    507c:	    jsr -684(a6)
    5080:	    move.l d0,8(sp)
    5084:	    move.l 8(sp),d0
    5088:	    move.l d0,4(sp)
	if (!newStat) {
    508c:	/-- bne.s 50bc <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    508e:	|   movea.l 18560 <nowStatus>,a0
    5094:	|   move.l (a0),d0
    5096:	|   movea.l 4(sp),a0
    509a:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    509e:	|   pea 14c4c <custom.c.36a9b171+0x52>
    50a4:	|   jsr b8 <copyString>
    50aa:	|   addq.l #4,sp
    50ac:	|   movea.l 4(sp),a0
    50b0:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    50b2:	|   movea.l 18560 <nowStatus>,a0
    50b8:	|   move.l 4(sp),(a0)
	}
}
    50bc:	\-> nop
    50be:	    movea.l (sp)+,a6
    50c0:	    lea 16(sp),sp
    50c4:	    rts

000050c6 <clearStatusBar>:

void clearStatusBar () {
    50c6:	       lea -16(sp),sp
    50ca:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    50cc:	       movea.l 18560 <nowStatus>,a0
    50d2:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    50d6:	       movea.l 18560 <nowStatus>,a0
    50dc:	       moveq #-1,d0
    50de:	       move.l d0,6(a0)
	while (stat) {
    50e2:	   /-- bra.s 5122 <clearStatusBar+0x5c>
		kill = stat;
    50e4:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    50ea:	|  |   movea.l 16(sp),a0
    50ee:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    50f4:	|  |   movea.l 12(sp),a0
    50f8:	|  |   move.l (a0),8(sp)
    50fc:	|  |   move.l 18bc0 <SysBase>,d0
    5102:	|  |   movea.l d0,a6
    5104:	|  |   movea.l 8(sp),a1
    5108:	|  |   jsr -690(a6)
		FreeVec(kill);
    510c:	|  |   move.l 12(sp),4(sp)
    5112:	|  |   move.l 18bc0 <SysBase>,d0
    5118:	|  |   movea.l d0,a6
    511a:	|  |   movea.l 4(sp),a1
    511e:	|  |   jsr -690(a6)
	while (stat) {
    5122:	|  \-> tst.l 16(sp)
    5126:	\----- bne.s 50e4 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    5128:	       movea.l 18560 <nowStatus>,a0
    512e:	       clr.l (a0)
}
    5130:	       nop
    5132:	       movea.l (sp)+,a6
    5134:	       lea 16(sp),sp
    5138:	       rts

0000513a <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    513a:	clr.l 18bf2 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    5140:	move.w #-1,18bf6 <mainStatus+0x4>
	mainStatus.litStatus = -1;
    5148:	moveq #-1,d0
    514a:	move.l d0,18bf8 <mainStatus+0x6>
	mainStatus.statusX = 10;
    5150:	moveq #10,d0
    5152:	move.l d0,18bfc <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    5158:	movea.l 18b18 <winHeight>,a0
    515e:	lea -15(a0),a0
    5162:	move.l a0,d0
    5164:	move.l d0,18c00 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    516a:	nop
    516c:	rts

0000516e <killLastStatus>:

void killLastStatus () {
    516e:	    lea -12(sp),sp
    5172:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    5174:	    movea.l 18560 <nowStatus>,a0
    517a:	    move.l (a0),d0
    517c:	/-- beq.s 51c6 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    517e:	|   movea.l 18560 <nowStatus>,a0
    5184:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    5188:	|   movea.l 18560 <nowStatus>,a0
    518e:	|   movea.l 12(sp),a1
    5192:	|   move.l 4(a1),d0
    5196:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    5198:	|   movea.l 12(sp),a0
    519c:	|   move.l (a0),8(sp)
    51a0:	|   move.l 18bc0 <SysBase>,d0
    51a6:	|   movea.l d0,a6
    51a8:	|   movea.l 8(sp),a1
    51ac:	|   jsr -690(a6)
		FreeVec(kill);
    51b0:	|   move.l 12(sp),4(sp)
    51b6:	|   move.l 18bc0 <SysBase>,d0
    51bc:	|   movea.l d0,a6
    51be:	|   movea.l 4(sp),a1
    51c2:	|   jsr -690(a6)
	}
}
    51c6:	\-> nop
    51c8:	    movea.l (sp)+,a6
    51ca:	    lea 12(sp),sp
    51ce:	    rts

000051d0 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    51d0:	movea.l 18560 <nowStatus>,a0
    51d6:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    51dc:	movea.l 18560 <nowStatus>,a0
    51e2:	move.l 8(sp),14(a0)
}
    51e8:	nop
    51ea:	rts

000051ec <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    51ec:	       lea -100(sp),sp
    51f0:	       move.l a6,-(sp)
    51f2:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    51f4:	       movea.l 18560 <nowStatus>,a0
    51fa:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    51fe:	       movea.l 18560 <nowStatus>,a0
    5204:	       move.w 4(a0),d0
    5208:	       move.w d0,d0
    520a:	       andi.l #65535,d0
    5210:	       move.l 112(sp),-(sp)
    5214:	       move.l d0,-(sp)
    5216:	       jsr 8d0 <put2bytes>
    521c:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    521e:	       movea.l 18560 <nowStatus>,a0
    5224:	       move.l 6(a0),d0
    5228:	       move.l d0,d0
    522a:	       movea.w d0,a0
    522c:	       move.l 112(sp),-(sp)
    5230:	       move.l a0,-(sp)
    5232:	       jsr a9c <putSigned>
    5238:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    523a:	       movea.l 18560 <nowStatus>,a0
    5240:	       move.l 10(a0),d0
    5244:	       move.l 112(sp),-(sp)
    5248:	       move.l d0,-(sp)
    524a:	       jsr 8d0 <put2bytes>
    5250:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    5252:	       movea.l 18560 <nowStatus>,a0
    5258:	       move.l 14(a0),d0
    525c:	       move.l 112(sp),-(sp)
    5260:	       move.l d0,-(sp)
    5262:	       jsr 8d0 <put2bytes>
    5268:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    526a:	       move.l 112(sp),100(sp)
    5270:	       movea.l 18560 <nowStatus>,a0
    5276:	       move.l 18(a0),96(sp)
    527c:	       move.l 18bc8 <DOSBase>,d0
    5282:	       movea.l d0,a6
    5284:	       move.l 100(sp),d1
    5288:	       move.l 96(sp),d2
    528c:	       jsr -312(a6)
    5290:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    5294:	       move.l 112(sp),88(sp)
    529a:	       movea.l 18560 <nowStatus>,a0
    52a0:	       move.l 22(a0),84(sp)
    52a6:	       move.l 18bc8 <DOSBase>,d0
    52ac:	       movea.l d0,a6
    52ae:	       move.l 88(sp),d1
    52b2:	       move.l 84(sp),d2
    52b6:	       jsr -312(a6)
    52ba:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    52be:	       move.l 112(sp),76(sp)
    52c4:	       movea.l 18560 <nowStatus>,a0
    52ca:	       move.l 26(a0),72(sp)
    52d0:	       move.l 18bc8 <DOSBase>,d0
    52d6:	       movea.l d0,a6
    52d8:	       move.l 76(sp),d1
    52dc:	       move.l 72(sp),d2
    52e0:	       jsr -312(a6)
    52e4:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    52e8:	       move.l 112(sp),64(sp)
    52ee:	       movea.l 18560 <nowStatus>,a0
    52f4:	       move.l 30(a0),60(sp)
    52fa:	       move.l 18bc8 <DOSBase>,d0
    5300:	       movea.l d0,a6
    5302:	       move.l 64(sp),d1
    5306:	       move.l 60(sp),d2
    530a:	       jsr -312(a6)
    530e:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    5312:	       move.l 112(sp),52(sp)
    5318:	       movea.l 18560 <nowStatus>,a0
    531e:	       move.l 34(a0),48(sp)
    5324:	       move.l 18bc8 <DOSBase>,d0
    532a:	       movea.l d0,a6
    532c:	       move.l 52(sp),d1
    5330:	       move.l 48(sp),d2
    5334:	       jsr -312(a6)
    5338:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    533c:	       move.l 112(sp),40(sp)
    5342:	       movea.l 18560 <nowStatus>,a0
    5348:	       move.l 38(a0),36(sp)
    534e:	       move.l 18bc8 <DOSBase>,d0
    5354:	       movea.l d0,a6
    5356:	       move.l 40(sp),d1
    535a:	       move.l 36(sp),d2
    535e:	       jsr -312(a6)
    5362:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    5366:	   /-- bra.s 53aa <saveStatusBars+0x1be>
		FPutC (fp,1);
    5368:	/--|-> move.l 112(sp),16(sp)
    536e:	|  |   moveq #1,d0
    5370:	|  |   move.l d0,12(sp)
    5374:	|  |   move.l 18bc8 <DOSBase>,d0
    537a:	|  |   movea.l d0,a6
    537c:	|  |   move.l 16(sp),d1
    5380:	|  |   move.l 12(sp),d2
    5384:	|  |   jsr -312(a6)
    5388:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    538c:	|  |   movea.l 104(sp),a0
    5390:	|  |   move.l (a0),d0
    5392:	|  |   move.l 112(sp),-(sp)
    5396:	|  |   move.l d0,-(sp)
    5398:	|  |   jsr bd8 <writeString>
    539e:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    53a0:	|  |   movea.l 104(sp),a0
    53a4:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    53aa:	|  \-> tst.l 104(sp)
    53ae:	\----- bne.s 5368 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    53b0:	       move.l 112(sp),28(sp)
    53b6:	       clr.l 24(sp)
    53ba:	       move.l 18bc8 <DOSBase>,d0
    53c0:	       movea.l d0,a6
    53c2:	       move.l 28(sp),d1
    53c6:	       move.l 24(sp),d2
    53ca:	       jsr -312(a6)
    53ce:	       move.l d0,20(sp)
}
    53d2:	       nop
    53d4:	       move.l (sp)+,d2
    53d6:	       movea.l (sp)+,a6
    53d8:	       lea 100(sp),sp
    53dc:	       rts

000053de <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    53de:	movea.l 18560 <nowStatus>,a0
    53e4:	move.l 4(sp),6(a0)
}
    53ea:	nop
    53ec:	rts

000053ee <setStatusBar>:

void setStatusBar (char * txt) {
    53ee:	    subq.l #4,sp
    53f0:	    move.l a6,-(sp)
    53f2:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    53f4:	    movea.l 18560 <nowStatus>,a0
    53fa:	    move.l (a0),d0
    53fc:	/-- beq.s 5430 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    53fe:	|   movea.l 18560 <nowStatus>,a0
    5404:	|   movea.l (a0),a0
    5406:	|   move.l (a0),8(sp)
    540a:	|   move.l 18bc0 <SysBase>,d0
    5410:	|   movea.l d0,a6
    5412:	|   movea.l 8(sp),a1
    5416:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    541a:	|   movea.l 18560 <nowStatus>,a0
    5420:	|   movea.l (a0),a2
    5422:	|   move.l 16(sp),-(sp)
    5426:	|   jsr b8 <copyString>
    542c:	|   addq.l #4,sp
    542e:	|   move.l d0,(a2)
	}
}
    5430:	\-> nop
    5432:	    movea.l (sp)+,a2
    5434:	    movea.l (sp)+,a6
    5436:	    addq.l #4,sp
    5438:	    rts

0000543a <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    543a:	       movea.l 18560 <nowStatus>,a0
    5440:	       move.l (a0),d0
    5442:	/----- beq.s 5450 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    5444:	|      movea.l 18560 <nowStatus>,a0
    544a:	|      movea.l (a0),a0
    544c:	|      move.l (a0),d0
    544e:	|  /-- bra.s 5456 <statusBarText+0x1c>
	} else {
		return "";
    5450:	\--|-> move.l #85068,d0
	}
    5456:	   \-> rts

00005458 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    5458:	       lea -28(sp),sp
    545c:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    5460:	       move.l 52(sp),-(sp)
    5464:	       jsr 123e0 <stringWidth>
    546a:	       addq.l #4,sp
    546c:	       asr.l #1,d0
    546e:	       move.l d0,-(sp)
    5470:	       jsr 13d02 <__floatsisf>
    5476:	       addq.l #4,sp
    5478:	       move.l d0,d1
    547a:	       move.l 18578 <cameraZoom>,d0
    5480:	       move.l d0,-(sp)
    5482:	       move.l d1,-(sp)
    5484:	       jsr 13bae <__divsf3>
    548a:	       addq.l #8,sp
    548c:	       move.l d0,-(sp)
    548e:	       jsr 13c9a <__fixsfsi>
    5494:	       addq.l #4,sp
    5496:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    549a:	       move.l 56(sp),d0
    549e:	       sub.l 44(sp),d0
    54a2:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    54a6:	       move.l 56(sp),d0
    54aa:	       add.l 44(sp),d0
    54ae:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    54b2:	       moveq #12,d0
    54b4:	       move.l d0,32(sp)
    54b8:	       clr.l 28(sp)
    54bc:	       move.l 18bc0 <SysBase>,d0
    54c2:	       movea.l d0,a6
    54c4:	       move.l 32(sp),d0
    54c8:	       move.l 28(sp),d1
    54cc:	       jsr -684(a6)
    54d0:	       move.l d0,24(sp)
    54d4:	       move.l 24(sp),d0
    54d8:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    54dc:	       movea.l 18c1c <speech>,a0
    54e2:	       move.l 4(a0),d0
    54e6:	       movea.l 20(sp),a0
    54ea:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    54ee:	       move.l 52(sp),-(sp)
    54f2:	       jsr b8 <copyString>
    54f8:	       addq.l #4,sp
    54fa:	       movea.l 20(sp),a0
    54fe:	       move.l d0,(a0)
	newLine -> x = xx1;
    5500:	       movea.l 20(sp),a0
    5504:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    550a:	       movea.l 18c1c <speech>,a0
    5510:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    5516:	       moveq #4,d0
    5518:	       cmp.l 40(sp),d0
    551c:	   /-- blt.s 553e <addSpeechLine+0xe6>
    551e:	   |   movea.l 60(sp),a0
    5522:	   |   move.l (a0),d1
    5524:	   |   moveq #5,d0
    5526:	   |   sub.l 40(sp),d0
    552a:	   |   cmp.l d1,d0
    552c:	   +-- ble.s 553e <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    552e:	   |   moveq #5,d0
    5530:	   |   sub.l 40(sp),d0
    5534:	   |   movea.l 60(sp),a0
    5538:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    553a:	/--|-- bra.w 566a <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    553e:	|  \-> move.l 36(sp),-(sp)
    5542:	|      jsr 13d02 <__floatsisf>
    5548:	|      addq.l #4,sp
    554a:	|      move.l d0,d2
    554c:	|      move.l 18b14 <winWidth>,d0
    5552:	|      move.l d0,-(sp)
    5554:	|      jsr 13d2a <__floatunsisf>
    555a:	|      addq.l #4,sp
    555c:	|      move.l d0,d1
    555e:	|      move.l 18578 <cameraZoom>,d0
    5564:	|      move.l d0,-(sp)
    5566:	|      move.l d1,-(sp)
    5568:	|      jsr 13bae <__divsf3>
    556e:	|      addq.l #8,sp
    5570:	|      move.l #1084227584,-(sp)
    5576:	|      move.l d0,-(sp)
    5578:	|      jsr 13ff6 <__subsf3>
    557e:	|      addq.l #8,sp
    5580:	|      move.l d0,-(sp)
    5582:	|      move.l d2,-(sp)
    5584:	|      jsr 13dea <__gesf2>
    558a:	|      addq.l #8,sp
    558c:	|      tst.l d0
    558e:	|  /-- bge.s 5594 <addSpeechLine+0x13c>
}
    5590:	+--|-- bra.w 566a <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    5594:	|  \-> movea.l 60(sp),a0
    5598:	|      move.l (a0),d0
    559a:	|      move.l d0,-(sp)
    559c:	|      jsr 13d02 <__floatsisf>
    55a2:	|      addq.l #4,sp
    55a4:	|      move.l d0,-(sp)
    55a6:	|      jsr 13c1a <__extendsfdf2>
    55ac:	|      addq.l #4,sp
    55ae:	|      move.l d0,d4
    55b0:	|      move.l d1,d5
    55b2:	|      move.l 18b14 <winWidth>,d0
    55b8:	|      move.l d0,-(sp)
    55ba:	|      jsr 13d2a <__floatunsisf>
    55c0:	|      addq.l #4,sp
    55c2:	|      move.l d0,d1
    55c4:	|      move.l 18578 <cameraZoom>,d0
    55ca:	|      move.l d0,-(sp)
    55cc:	|      move.l d1,-(sp)
    55ce:	|      jsr 13bae <__divsf3>
    55d4:	|      addq.l #8,sp
    55d6:	|      move.l d0,-(sp)
    55d8:	|      jsr 13c1a <__extendsfdf2>
    55de:	|      addq.l #4,sp
    55e0:	|      clr.l -(sp)
    55e2:	|      move.l #1075052544,-(sp)
    55e8:	|      move.l d1,-(sp)
    55ea:	|      move.l d0,-(sp)
    55ec:	|      jsr 13f94 <__subdf3>
    55f2:	|      lea 16(sp),sp
    55f6:	|      move.l d0,d2
    55f8:	|      move.l d1,d3
    55fa:	|      move.l 36(sp),-(sp)
    55fe:	|      jsr 13cc2 <__floatsidf>
    5604:	|      addq.l #4,sp
    5606:	|      move.l d1,-(sp)
    5608:	|      move.l d0,-(sp)
    560a:	|      move.l d3,-(sp)
    560c:	|      move.l d2,-(sp)
    560e:	|      jsr 13f94 <__subdf3>
    5614:	|      lea 16(sp),sp
    5618:	|      move.l d1,-(sp)
    561a:	|      move.l d0,-(sp)
    561c:	|      move.l d5,-(sp)
    561e:	|      move.l d4,-(sp)
    5620:	|      jsr 13e20 <__gtdf2>
    5626:	|      lea 16(sp),sp
    562a:	|      tst.l d0
    562c:	|  /-- bgt.s 5630 <addSpeechLine+0x1d8>
}
    562e:	+--|-- bra.s 566a <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    5630:	|  \-> move.l 18b14 <winWidth>,d0
    5636:	|      move.l d0,-(sp)
    5638:	|      jsr 13d2a <__floatunsisf>
    563e:	|      addq.l #4,sp
    5640:	|      move.l d0,d1
    5642:	|      move.l 18578 <cameraZoom>,d0
    5648:	|      move.l d0,-(sp)
    564a:	|      move.l d1,-(sp)
    564c:	|      jsr 13bae <__divsf3>
    5652:	|      addq.l #8,sp
    5654:	|      move.l d0,-(sp)
    5656:	|      jsr 13c9a <__fixsfsi>
    565c:	|      addq.l #4,sp
    565e:	|      subq.l #5,d0
    5660:	|      sub.l 36(sp),d0
    5664:	|      movea.l 60(sp),a0
    5668:	|      move.l d0,(a0)
}
    566a:	\----> nop
    566c:	       movem.l (sp)+,d2-d5/a6
    5670:	       lea 28(sp),sp
    5674:	       rts

00005676 <initSpeech>:


void initSpeech () {
    5676:	       lea -12(sp),sp
    567a:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    567c:	       moveq #20,d0
    567e:	       move.l d0,12(sp)
    5682:	       clr.l 8(sp)
    5686:	       move.l 18bc0 <SysBase>,d0
    568c:	       movea.l d0,a6
    568e:	       move.l 12(sp),d0
    5692:	       move.l 8(sp),d1
    5696:	       jsr -684(a6)
    569a:	       move.l d0,4(sp)
    569e:	       move.l 4(sp),d0
    56a2:	       move.l d0,18c1c <speech>
	if (speech) {
    56a8:	       move.l 18c1c <speech>,d0
    56ae:	/----- beq.s 56da <initSpeech+0x64>
		speech -> currentTalker = NULL;
    56b0:	|      movea.l 18c1c <speech>,a0
    56b6:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    56b8:	|      movea.l 18c1c <speech>,a0
    56be:	|      clr.l 4(a0)
		speech -> speechY = 0;
    56c2:	|      movea.l 18c1c <speech>,a0
    56c8:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    56cc:	|      movea.l 18c1c <speech>,a0
    56d2:	|      moveq #-1,d0
    56d4:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    56d8:	|  /-- bra.s 56e8 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    56da:	\--|-> pea 15226 <custom.c.36a9b171+0x62c>
    56e0:	   |   jsr 13a4a <KPrintF>
    56e6:	   |   addq.l #4,sp
}
    56e8:	   \-> nop
    56ea:	       movea.l (sp)+,a6
    56ec:	       lea 12(sp),sp
    56f0:	       rts

000056f2 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    56f2:	       movea.l 18c1c <speech>,a0
    56f8:	       move.l 4(a0),d0
    56fc:	/----- beq.s 570a <isThereAnySpeechGoingOn+0x18>
    56fe:	|      movea.l 18c1c <speech>,a0
    5704:	|      move.l 16(a0),d0
    5708:	|  /-- bra.s 570c <isThereAnySpeechGoingOn+0x1a>
    570a:	\--|-> moveq #-1,d0
}
    570c:	   \-> rts

0000570e <killAllSpeech>:

void killAllSpeech () {
    570e:	       lea -12(sp),sp
    5712:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    5714:	       movea.l 18c1c <speech>,a0
    571a:	       move.l 12(a0),d0
    571e:	       moveq #-1,d1
    5720:	       cmp.l d0,d1
    5722:	   /-- beq.s 5730 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    5724:	   |   movea.l 18c1c <speech>,a0
    572a:	   |   moveq #-1,d0
    572c:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    5730:	   \-> movea.l 18c1c <speech>,a0
    5736:	       move.l (a0),d0
    5738:	/----- beq.w 57c4 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    573c:	|      movea.l 18c1c <speech>,a0
    5742:	|      move.l (a0),d0
    5744:	|      lea -120(sp),sp
    5748:	|      move.l sp,d1
    574a:	|      movea.l d0,a0
    574c:	|      moveq #120,d0
    574e:	|      move.l d0,-(sp)
    5750:	|      move.l a0,-(sp)
    5752:	|      move.l d1,-(sp)
    5754:	|      jsr 139fe <memcpy>
    575a:	|      lea 12(sp),sp
    575e:	|      jsr 8002 <makeSilent>
    5764:	|      lea 120(sp),sp
		speech -> currentTalker = NULL;
    5768:	|      movea.l 18c1c <speech>,a0
    576e:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    5770:	+----- bra.s 57c4 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    5772:	|  /-> movea.l 18c1c <speech>,a0
    5778:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    577e:	|  |   movea.l 18c1c <speech>,a0
    5784:	|  |   movea.l 4(a0),a1
    5788:	|  |   movea.l 18c1c <speech>,a0
    578e:	|  |   move.l 4(a1),d0
    5792:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    5796:	|  |   movea.l 12(sp),a0
    579a:	|  |   move.l (a0),8(sp)
    579e:	|  |   move.l 18bc0 <SysBase>,d0
    57a4:	|  |   movea.l d0,a6
    57a6:	|  |   movea.l 8(sp),a1
    57aa:	|  |   jsr -690(a6)
		FreeVec(killMe);
    57ae:	|  |   move.l 12(sp),4(sp)
    57b4:	|  |   move.l 18bc0 <SysBase>,d0
    57ba:	|  |   movea.l d0,a6
    57bc:	|  |   movea.l 4(sp),a1
    57c0:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    57c4:	\--|-> movea.l 18c1c <speech>,a0
    57ca:	   |   move.l 4(a0),d0
    57ce:	   \-- bne.s 5772 <killAllSpeech+0x64>
	}
}
    57d0:	       nop
    57d2:	       nop
    57d4:	       movea.l (sp)+,a6
    57d6:	       lea 12(sp),sp
    57da:	       rts

000057dc <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    57dc:	pea 2 <_start+0x2>
    57e0:	move.l 8(sp),-(sp)
    57e4:	jsr 593c <setFrames>
    57ea:	addq.l #8,sp
}
    57ec:	nop
    57ee:	rts

000057f0 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    57f0:	       lea -52(sp),sp
    57f4:	       move.l a6,-(sp)
    57f6:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    57f8:	       movea.l 64(sp),a0
    57fc:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    5802:	       move.l 18564 <speechSpeed>,d0
    5808:	       move.l 68(sp),-(sp)
    580c:	       move.l d0,-(sp)
    580e:	       jsr a46 <putFloat>
    5814:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    5816:	       movea.l 64(sp),a0
    581a:	       move.l 8(a0),d0
    581e:	       move.l 68(sp),-(sp)
    5822:	       move.l d0,-(sp)
    5824:	       jsr 8d0 <put2bytes>
    582a:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    582c:	       movea.l 64(sp),a0
    5830:	       move.l 16(a0),d0
    5834:	       move.l 68(sp),-(sp)
    5838:	       move.l d0,-(sp)
    583a:	       jsr 8d0 <put2bytes>
    5840:	       addq.l #8,sp
		if (sS -> currentTalker) {
    5842:	       movea.l 64(sp),a0
    5846:	       move.l (a0),d0
    5848:	   /-- beq.s 588c <saveSpeech+0x9c>
			FPutC (fp, 1);
    584a:	   |   move.l 68(sp),40(sp)
    5850:	   |   moveq #1,d0
    5852:	   |   move.l d0,36(sp)
    5856:	   |   move.l 18bc8 <DOSBase>,d0
    585c:	   |   movea.l d0,a6
    585e:	   |   move.l 40(sp),d1
    5862:	   |   move.l 36(sp),d2
    5866:	   |   jsr -312(a6)
    586a:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    586e:	   |   movea.l 64(sp),a0
    5872:	   |   movea.l (a0),a0
    5874:	   |   movea.l 102(a0),a0
    5878:	   |   move.l 4(a0),d0
    587c:	   |   move.l 68(sp),-(sp)
    5880:	   |   move.l d0,-(sp)
    5882:	   |   jsr 8d0 <put2bytes>
    5888:	   |   addq.l #8,sp
    588a:	/--|-- bra.s 5908 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    588c:	|  \-> move.l 68(sp),52(sp)
    5892:	|      clr.l 48(sp)
    5896:	|      move.l 18bc8 <DOSBase>,d0
    589c:	|      movea.l d0,a6
    589e:	|      move.l 52(sp),d1
    58a2:	|      move.l 48(sp),d2
    58a6:	|      jsr -312(a6)
    58aa:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    58ae:	+----- bra.s 5908 <saveSpeech+0x118>
			FPutC (fp, 1);
    58b0:	|  /-> move.l 68(sp),16(sp)
    58b6:	|  |   moveq #1,d0
    58b8:	|  |   move.l d0,12(sp)
    58bc:	|  |   move.l 18bc8 <DOSBase>,d0
    58c2:	|  |   movea.l d0,a6
    58c4:	|  |   move.l 16(sp),d1
    58c8:	|  |   move.l 12(sp),d2
    58cc:	|  |   jsr -312(a6)
    58d0:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    58d4:	|  |   movea.l 56(sp),a0
    58d8:	|  |   move.l (a0),d0
    58da:	|  |   move.l 68(sp),-(sp)
    58de:	|  |   move.l d0,-(sp)
    58e0:	|  |   jsr bd8 <writeString>
    58e6:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    58e8:	|  |   movea.l 56(sp),a0
    58ec:	|  |   move.l 8(a0),d0
    58f0:	|  |   move.l 68(sp),-(sp)
    58f4:	|  |   move.l d0,-(sp)
    58f6:	|  |   jsr 8d0 <put2bytes>
    58fc:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    58fe:	|  |   movea.l 56(sp),a0
    5902:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    5908:	\--|-> tst.l 56(sp)
    590c:	   \-- bne.s 58b0 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    590e:	       move.l 68(sp),28(sp)
    5914:	       clr.l 24(sp)
    5918:	       move.l 18bc8 <DOSBase>,d0
    591e:	       movea.l d0,a6
    5920:	       move.l 28(sp),d1
    5924:	       move.l 24(sp),d2
    5928:	       jsr -312(a6)
    592c:	       move.l d0,20(sp)
}
    5930:	       nop
    5932:	       move.l (sp)+,d2
    5934:	       movea.l (sp)+,a6
    5936:	       lea 52(sp),sp
    593a:	       rts

0000593c <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    593c:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    593e:	movea.l 8(sp),a0
    5942:	movea.l 68(a0),a0
    5946:	move.l (a0),d2
    5948:	movea.l 8(sp),a0
    594c:	movea.l 68(a0),a0
    5950:	move.l 4(a0),d0
    5954:	move.l 12(sp),-(sp)
    5958:	move.l d0,-(sp)
    595a:	jsr 14284 <__mulsi3>
    5960:	addq.l #8,sp
    5962:	move.l d0,d1
    5964:	movea.l 8(sp),a0
    5968:	move.l 94(a0),d0
    596c:	add.l d1,d0
    596e:	add.l d0,d0
    5970:	add.l d0,d0
    5972:	movea.l d2,a0
    5974:	adda.l d0,a0
    5976:	move.l (a0),d0
    5978:	movea.l 8(sp),a0
    597c:	move.l d0,60(a0)
}
    5980:	nop
    5982:	move.l (sp)+,d2
    5984:	rts

00005986 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    5986:	       lea -20(sp),sp
    598a:	       move.l d2,-(sp)
    598c:	       move.l 40(sp),d0
    5990:	       move.w d0,d0
    5992:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    5996:	       movea.l 18c1c <speech>,a0
    599c:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    59a2:	       move.l 32(sp),-(sp)
    59a6:	       jsr 7aec <findPerson>
    59ac:	       addq.l #4,sp
    59ae:	       move.l d0,16(sp)
    if (thisPerson) {
    59b2:	   /-- beq.s 59d8 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    59b4:	   |   movea.w 6(sp),a0
    59b8:	   |   move.l a0,-(sp)
    59ba:	   |   move.l 40(sp),-(sp)
    59be:	   |   move.l 24(sp),-(sp)
    59c2:	   |   move.l 40(sp),-(sp)
    59c6:	   |   jsr 5a9e <wrapSpeechPerson>
    59cc:	   |   lea 16(sp),sp
    59d0:	   |   move.l d0,20(sp)
    59d4:	/--|-- bra.w 5a92 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    59d8:	|  \-> move.l 32(sp),-(sp)
    59dc:	|      jsr 124cc <getRegionForObject>
    59e2:	|      addq.l #4,sp
    59e4:	|      move.l d0,12(sp)
        if (thisRegion) {
    59e8:	|  /-- beq.s 5a54 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    59ea:	|  |   movea.l 12(sp),a0
    59ee:	|  |   movea.l 28(a0),a0
    59f2:	|  |   move.l 28(a0),d0
    59f6:	|  |   movea.l 12(sp),a0
    59fa:	|  |   movea.l 4(a0),a1
    59fe:	|  |   movea.l 12(sp),a0
    5a02:	|  |   movea.l 28(a0),a0
    5a06:	|  |   move.l 20(a0),d1
    5a0a:	|  |   movea.l a1,a0
    5a0c:	|  |   suba.l d1,a0
    5a0e:	|  |   move.l 18cd2 <cameraY>,d1
    5a14:	|  |   movea.l a0,a1
    5a16:	|  |   suba.l d1,a1
    5a18:	|  |   movea.l 12(sp),a0
    5a1c:	|  |   move.l (a0),d2
    5a1e:	|  |   movea.l 12(sp),a0
    5a22:	|  |   move.l 8(a0),d1
    5a26:	|  |   add.l d2,d1
    5a28:	|  |   move.l d1,d2
    5a2a:	|  |   asr.l #1,d2
    5a2c:	|  |   move.l 18cce <cameraX>,d1
    5a32:	|  |   movea.l d2,a0
    5a34:	|  |   suba.l d1,a0
    5a36:	|  |   move.l 36(sp),-(sp)
    5a3a:	|  |   move.l d0,-(sp)
    5a3c:	|  |   move.l a1,-(sp)
    5a3e:	|  |   move.l a0,-(sp)
    5a40:	|  |   move.l 44(sp),-(sp)
    5a44:	|  |   jsr 5bbc <wrapSpeechXY>
    5a4a:	|  |   lea 20(sp),sp
    5a4e:	|  |   move.l d0,20(sp)
    5a52:	+--|-- bra.s 5a92 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    5a54:	|  \-> move.l 32(sp),-(sp)
    5a58:	|      jsr a838 <findObjectType>
    5a5e:	|      addq.l #4,sp
    5a60:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    5a64:	|      movea.l 8(sp),a0
    5a68:	|      move.l 28(a0),d1
    5a6c:	|      move.l 18b14 <winWidth>,d0
    5a72:	|      lsr.l #1,d0
    5a74:	|      move.l 36(sp),-(sp)
    5a78:	|      move.l d1,-(sp)
    5a7a:	|      pea a <_start+0xa>
    5a7e:	|      move.l d0,-(sp)
    5a80:	|      move.l 44(sp),-(sp)
    5a84:	|      jsr 5bbc <wrapSpeechXY>
    5a8a:	|      lea 20(sp),sp
    5a8e:	|      move.l d0,20(sp)
        }
    }
    return i;
    5a92:	\----> move.l 20(sp),d0
}
    5a96:	       move.l (sp)+,d2
    5a98:	       lea 20(sp),sp
    5a9c:	       rts

00005a9e <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    5a9e:	    subq.l #8,sp
    5aa0:	    movem.l d2-d4,-(sp)
    5aa4:	    move.l 36(sp),d0
    5aa8:	    move.w d0,d0
    5aaa:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    5aae:	    movea.l 28(sp),a0
    5ab2:	    movea.l 102(a0),a0
    5ab6:	    move.l 28(a0),d2
    5aba:	    movea.l 28(sp),a0
    5abe:	    move.l 4(a0),d3
    5ac2:	    move.l 18cd2 <cameraY>,d0
    5ac8:	    move.l d0,-(sp)
    5aca:	    jsr 13d02 <__floatsisf>
    5ad0:	    addq.l #4,sp
    5ad2:	    move.l d0,-(sp)
    5ad4:	    move.l d3,-(sp)
    5ad6:	    jsr 13ff6 <__subsf3>
    5adc:	    addq.l #8,sp
    5ade:	    move.l d0,d3
    5ae0:	    movea.l 28(sp),a0
    5ae4:	    move.l 20(a0),d4
    5ae8:	    movea.l 28(sp),a0
    5aec:	    move.l 8(a0),d1
    5af0:	    movea.l 28(sp),a0
    5af4:	    move.l 12(a0),d0
    5af8:	    sub.l d0,d1
    5afa:	    move.l d1,-(sp)
    5afc:	    jsr 13d02 <__floatsisf>
    5b02:	    addq.l #4,sp
    5b04:	    move.l d0,-(sp)
    5b06:	    move.l d4,-(sp)
    5b08:	    jsr 13db4 <__mulsf3>
    5b0e:	    addq.l #8,sp
    5b10:	    move.l d0,-(sp)
    5b12:	    move.l d3,-(sp)
    5b14:	    jsr 13ff6 <__subsf3>
    5b1a:	    addq.l #8,sp
    5b1c:	    move.l d0,d3
    5b1e:	    movea.l 28(sp),a0
    5b22:	    movea.l 102(a0),a0
    5b26:	    move.l 20(a0),d0
    5b2a:	    move.l d0,-(sp)
    5b2c:	    jsr 13d02 <__floatsisf>
    5b32:	    addq.l #4,sp
    5b34:	    move.l d0,-(sp)
    5b36:	    move.l d3,-(sp)
    5b38:	    jsr 13ff6 <__subsf3>
    5b3e:	    addq.l #8,sp
    5b40:	    move.l d0,-(sp)
    5b42:	    jsr 13c9a <__fixsfsi>
    5b48:	    addq.l #4,sp
    5b4a:	    move.l d0,d4
    5b4c:	    movea.l 28(sp),a0
    5b50:	    move.l (a0),d3
    5b52:	    move.l 18cce <cameraX>,d0
    5b58:	    move.l d0,-(sp)
    5b5a:	    jsr 13d02 <__floatsisf>
    5b60:	    addq.l #4,sp
    5b62:	    move.l d0,-(sp)
    5b64:	    move.l d3,-(sp)
    5b66:	    jsr 13ff6 <__subsf3>
    5b6c:	    addq.l #8,sp
    5b6e:	    move.l d0,-(sp)
    5b70:	    jsr 13c9a <__fixsfsi>
    5b76:	    addq.l #4,sp
    5b78:	    move.l 32(sp),-(sp)
    5b7c:	    move.l d2,-(sp)
    5b7e:	    move.l d4,-(sp)
    5b80:	    move.l d0,-(sp)
    5b82:	    move.l 40(sp),-(sp)
    5b86:	    jsr 5bbc <wrapSpeechXY>
    5b8c:	    lea 20(sp),sp
    5b90:	    move.l d0,16(sp)
	if (animPerson) {
    5b94:	    tst.w 14(sp)
    5b98:	/-- beq.s 5bb0 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    5b9a:	|   move.l 28(sp),-(sp)
    5b9e:	|   jsr 57dc <makeTalker>
    5ba4:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    5ba6:	|   movea.l 18c1c <speech>,a0
    5bac:	|   move.l 28(sp),(a0)
	}
	return i;
    5bb0:	\-> move.l 16(sp),d0
}
    5bb4:	    movem.l (sp)+,d2-d4
    5bb8:	    addq.l #8,sp
    5bba:	    rts

00005bbc <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    5bbc:	                   lea -16(sp),sp
    5bc0:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    5bc4:	                   clr.l 16(sp)
    killAllSpeech();
    5bc8:	                   jsr 570e <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    5bce:	                   move.l 36(sp),-(sp)
    5bd2:	                   jsr 10eee <strlen>
    5bd8:	                   addq.l #4,sp
    5bda:	                   movea.l d0,a0
    5bdc:	                   lea 20(a0),a0
    5be0:	                   move.l a0,-(sp)
    5be2:	                   jsr 13d2a <__floatunsisf>
    5be8:	                   addq.l #4,sp
    5bea:	                   move.l d0,d1
    5bec:	                   move.l 18564 <speechSpeed>,d0
    5bf2:	                   move.l d0,-(sp)
    5bf4:	                   move.l d1,-(sp)
    5bf6:	                   jsr 13db4 <__mulsf3>
    5bfc:	                   addq.l #8,sp
    5bfe:	                   move.l d0,-(sp)
    5c00:	                   jsr 13c9a <__fixsfsi>
    5c06:	                   addq.l #4,sp
    5c08:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    5c0c:	               /-- bgt.s 5c14 <wrapSpeechXY+0x58>
    5c0e:	               |   moveq #1,d0
    5c10:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    5c14:	               \-> moveq #-1,d1
    5c16:	                   cmp.l 52(sp),d1
    5c1a:	               /-- beq.s 5c5a <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    5c1c:	               |   move.l 18ce2 <speechMode>,d0
    5c22:	               +-- ble.s 5c5a <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    5c24:	               |   clr.l -(sp)
    5c26:	               |   move.l 56(sp),-(sp)
    5c2a:	               |   jsr a50e <startSound>
    5c30:	               |   addq.l #8,sp
    5c32:	               |   tst.w d0
    5c34:	               +-- beq.s 5c5a <wrapSpeechXY+0x9e>
                speechTime = -10;
    5c36:	               |   moveq #-10,d0
    5c38:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    5c3c:	               |   movea.l 18c1c <speech>,a0
    5c42:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    5c48:	               |   move.l 18ce2 <speechMode>,d0
    5c4e:	               |   moveq #2,d1
    5c50:	               |   cmp.l d0,d1
    5c52:	               +-- bne.s 5c5a <wrapSpeechXY+0x9e>
    5c54:	               |   moveq #-10,d0
    5c56:	/--------------|-- bra.w 5ee0 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    5c5a:	|              \-> movea.l 18c1c <speech>,a0
    5c60:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    5c66:	|     /----------- bra.w 5d1a <wrapSpeechXY+0x15e>
        a = wrap;
    5c6a:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    5c70:	|  |  |        /-- bra.s 5c80 <wrapSpeechXY+0xc4>
            a--;
    5c72:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    5c76:	|  |  |  |     +-- bne.s 5c80 <wrapSpeechXY+0xc4>
                a = wrap;
    5c78:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    5c7e:	|  |  |  |  /--|-- bra.s 5c92 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    5c80:	|  |  |  |  |  \-> move.l 28(sp),d0
    5c84:	|  |  |  |  |      movea.l 36(sp),a0
    5c88:	|  |  |  |  |      adda.l d0,a0
    5c8a:	|  |  |  |  |      move.b (a0),d0
    5c8c:	|  |  |  |  |      cmpi.b #32,d0
    5c90:	|  |  |  \--|----- bne.s 5c72 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    5c92:	|  |  |     \----> move.l 28(sp),d0
    5c96:	|  |  |            movea.l 36(sp),a0
    5c9a:	|  |  |            adda.l d0,a0
    5c9c:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    5c9e:	|  |  |            lea 16(sp),a0
    5ca2:	|  |  |            move.l a0,-(sp)
    5ca4:	|  |  |            move.l 44(sp),-(sp)
    5ca8:	|  |  |            move.l 44(sp),-(sp)
    5cac:	|  |  |            jsr 5458 <addSpeechLine>
    5cb2:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    5cb6:	|  |  |            move.l 28(sp),d0
    5cba:	|  |  |            movea.l 36(sp),a0
    5cbe:	|  |  |            adda.l d0,a0
    5cc0:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    5cc4:	|  |  |            move.l 28(sp),d0
    5cc8:	|  |  |            addq.l #1,d0
    5cca:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    5cce:	|  |  |            move.l 44(sp),-(sp)
    5cd2:	|  |  |            jsr 13d02 <__floatsisf>
    5cd8:	|  |  |            addq.l #4,sp
    5cda:	|  |  |            move.l d0,d2
    5cdc:	|  |  |            move.l 18d08 <fontHeight>,d0
    5ce2:	|  |  |            move.l d0,-(sp)
    5ce4:	|  |  |            jsr 13d02 <__floatsisf>
    5cea:	|  |  |            addq.l #4,sp
    5cec:	|  |  |            move.l d0,d1
    5cee:	|  |  |            move.l 18578 <cameraZoom>,d0
    5cf4:	|  |  |            move.l d0,-(sp)
    5cf6:	|  |  |            move.l d1,-(sp)
    5cf8:	|  |  |            jsr 13bae <__divsf3>
    5cfe:	|  |  |            addq.l #8,sp
    5d00:	|  |  |            move.l d0,-(sp)
    5d02:	|  |  |            move.l d2,-(sp)
    5d04:	|  |  |            jsr 13ff6 <__subsf3>
    5d0a:	|  |  |            addq.l #8,sp
    5d0c:	|  |  |            move.l d0,-(sp)
    5d0e:	|  |  |            jsr 13c9a <__fixsfsi>
    5d14:	|  |  |            addq.l #4,sp
    5d16:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    5d1a:	|  |  \----------> move.l 36(sp),-(sp)
    5d1e:	|  |               jsr 10eee <strlen>
    5d24:	|  |               addq.l #4,sp
    5d26:	|  |               move.l d0,d1
    5d28:	|  |               move.l 48(sp),d0
    5d2c:	|  |               cmp.l d1,d0
    5d2e:	|  \-------------- bcs.w 5c6a <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    5d32:	|                  lea 16(sp),a0
    5d36:	|                  move.l a0,-(sp)
    5d38:	|                  move.l 44(sp),-(sp)
    5d3c:	|                  move.l 44(sp),-(sp)
    5d40:	|                  jsr 5458 <addSpeechLine>
    5d46:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    5d4a:	|                  move.l 44(sp),-(sp)
    5d4e:	|                  jsr 13d02 <__floatsisf>
    5d54:	|                  addq.l #4,sp
    5d56:	|                  move.l d0,d2
    5d58:	|                  move.l 18d08 <fontHeight>,d0
    5d5e:	|                  move.l d0,-(sp)
    5d60:	|                  jsr 13d02 <__floatsisf>
    5d66:	|                  addq.l #4,sp
    5d68:	|                  move.l d0,d1
    5d6a:	|                  move.l 18578 <cameraZoom>,d0
    5d70:	|                  move.l d0,-(sp)
    5d72:	|                  move.l d1,-(sp)
    5d74:	|                  jsr 13bae <__divsf3>
    5d7a:	|                  addq.l #8,sp
    5d7c:	|                  move.l d0,-(sp)
    5d7e:	|                  move.l d2,-(sp)
    5d80:	|                  jsr 13ff6 <__subsf3>
    5d86:	|                  addq.l #8,sp
    5d88:	|                  move.l d0,-(sp)
    5d8a:	|                  jsr 13c9a <__fixsfsi>
    5d90:	|                  addq.l #4,sp
    5d92:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    5d96:	|              /-- bpl.s 5db4 <wrapSpeechXY+0x1f8>
    5d98:	|              |   movea.l 18c1c <speech>,a0
    5d9e:	|              |   move.l 8(a0),d0
    5da2:	|              |   movea.l 18c1c <speech>,a0
    5da8:	|              |   sub.l 44(sp),d0
    5dac:	|              |   move.l d0,8(a0)
    5db0:	|           /--|-- bra.w 5ea2 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    5db4:	|           |  \-> movea.l 18c1c <speech>,a0
    5dba:	|           |      move.l 8(a0),d0
    5dbe:	|           |      move.l d0,-(sp)
    5dc0:	|           |      jsr 13d02 <__floatsisf>
    5dc6:	|           |      addq.l #4,sp
    5dc8:	|           |      move.l d0,d2
    5dca:	|           |      move.l 18cd2 <cameraY>,d0
    5dd0:	|           |      move.l d0,-(sp)
    5dd2:	|           |      jsr 13d02 <__floatsisf>
    5dd8:	|           |      addq.l #4,sp
    5dda:	|           |      move.l d0,d3
    5ddc:	|           |      move.l 18b18 <winHeight>,d4
    5de2:	|           |      move.l 18d08 <fontHeight>,d0
    5de8:	|           |      pea 3 <_start+0x3>
    5dec:	|           |      move.l d0,-(sp)
    5dee:	|           |      jsr 14302 <__divsi3>
    5df4:	|           |      addq.l #8,sp
    5df6:	|           |      move.l d4,d1
    5df8:	|           |      sub.l d0,d1
    5dfa:	|           |      move.l d1,-(sp)
    5dfc:	|           |      jsr 13d2a <__floatunsisf>
    5e02:	|           |      addq.l #4,sp
    5e04:	|           |      move.l d0,d1
    5e06:	|           |      move.l 18578 <cameraZoom>,d0
    5e0c:	|           |      move.l d0,-(sp)
    5e0e:	|           |      move.l d1,-(sp)
    5e10:	|           |      jsr 13bae <__divsf3>
    5e16:	|           |      addq.l #8,sp
    5e18:	|           |      move.l d0,-(sp)
    5e1a:	|           |      move.l d3,-(sp)
    5e1c:	|           |      jsr 13ab4 <__addsf3>
    5e22:	|           |      addq.l #8,sp
    5e24:	|           |      move.l d0,-(sp)
    5e26:	|           |      move.l d2,-(sp)
    5e28:	|           |      jsr 13e6e <__gtsf2>
    5e2e:	|           |      addq.l #8,sp
    5e30:	|           |      tst.l d0
    5e32:	|           +----- ble.s 5ea2 <wrapSpeechXY+0x2e6>
    5e34:	|           |      move.l 18cd2 <cameraY>,d0
    5e3a:	|           |      move.l d0,-(sp)
    5e3c:	|           |      jsr 13d02 <__floatsisf>
    5e42:	|           |      addq.l #4,sp
    5e44:	|           |      move.l d0,d2
    5e46:	|           |      move.l 18b18 <winHeight>,d3
    5e4c:	|           |      move.l 18d08 <fontHeight>,d0
    5e52:	|           |      pea 3 <_start+0x3>
    5e56:	|           |      move.l d0,-(sp)
    5e58:	|           |      jsr 14302 <__divsi3>
    5e5e:	|           |      addq.l #8,sp
    5e60:	|           |      move.l d3,d1
    5e62:	|           |      sub.l d0,d1
    5e64:	|           |      move.l d1,-(sp)
    5e66:	|           |      jsr 13d2a <__floatunsisf>
    5e6c:	|           |      addq.l #4,sp
    5e6e:	|           |      move.l d0,d1
    5e70:	|           |      move.l 18578 <cameraZoom>,d0
    5e76:	|           |      move.l d0,-(sp)
    5e78:	|           |      move.l d1,-(sp)
    5e7a:	|           |      jsr 13bae <__divsf3>
    5e80:	|           |      addq.l #8,sp
    5e82:	|           |      move.l d0,-(sp)
    5e84:	|           |      move.l d2,-(sp)
    5e86:	|           |      jsr 13ab4 <__addsf3>
    5e8c:	|           |      addq.l #8,sp
    5e8e:	|           |      movea.l 18c1c <speech>,a2
    5e94:	|           |      move.l d0,-(sp)
    5e96:	|           |      jsr 13c9a <__fixsfsi>
    5e9c:	|           |      addq.l #4,sp
    5e9e:	|           |      move.l d0,8(a2)

    if (offset) {
    5ea2:	|           \----> move.l 16(sp),d0
    5ea6:	|        /-------- beq.s 5edc <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    5ea8:	|        |         movea.l 18c1c <speech>,a0
    5eae:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    5eb4:	|        |     /-- bra.s 5ed6 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    5eb6:	|        |  /--|-> movea.l 20(sp),a0
    5eba:	|        |  |  |   move.l 8(a0),d1
    5ebe:	|        |  |  |   move.l 16(sp),d0
    5ec2:	|        |  |  |   add.l d1,d0
    5ec4:	|        |  |  |   movea.l 20(sp),a0
    5ec8:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    5ecc:	|        |  |  |   movea.l 20(sp),a0
    5ed0:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    5ed6:	|        |  |  \-> tst.l 20(sp)
    5eda:	|        |  \----- bne.s 5eb6 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    5edc:	|        \-------> move.l 24(sp),d0
}
    5ee0:	\----------------> movem.l (sp)+,d2-d4/a2
    5ee4:	                   lea 16(sp),sp
    5ee8:	                   rts

00005eea <killZBuffer>:
#include "stringy.h"
#include "support/gcc8_c_support.h"

struct zBufferData zBuffer;

void killZBuffer () {
    5eea:	    subq.l #4,sp
    5eec:	    move.l a6,-(sp)
	if (zBuffer.tex) {
    5eee:	    move.l 18c70 <zBuffer+0x50>,d0
    5ef4:	/-- beq.s 5f2c <killZBuffer+0x42>
		deleteTextures (1, &zBuffer.texName);
    5ef6:	|   pea 18c74 <zBuffer+0x54>
    5efc:	|   pea 1 <_start+0x1>
    5f00:	|   jsr 1a9c <deleteTextures>
    5f06:	|   addq.l #8,sp
		zBuffer.texName = 0;
    5f08:	|   clr.l 18c74 <zBuffer+0x54>
        FreeVec(zBuffer.tex);
    5f0e:	|   move.l 18c70 <zBuffer+0x50>,4(sp)
    5f16:	|   move.l 18bc0 <SysBase>,d0
    5f1c:	|   movea.l d0,a6
    5f1e:	|   movea.l 4(sp),a1
    5f22:	|   jsr -690(a6)
		zBuffer.tex = NULL;
    5f26:	|   clr.l 18c70 <zBuffer+0x50>
	}
	zBuffer.numPanels = 0;
    5f2c:	\-> clr.l 18c28 <zBuffer+0x8>
	zBuffer.originalNum =0;
    5f32:	    clr.l 18c6c <zBuffer+0x4c>
}
    5f38:	    nop
    5f3a:	    movea.l (sp)+,a6
    5f3c:	    addq.l #4,sp
    5f3e:	    rts

00005f40 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    5f40:	                         lea -528(sp),sp
    5f44:	                         movem.l d2-d3/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    5f48:	                         clr.l 528(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();
    5f4c:	                         jsr 5eea <killZBuffer>

	zBuffer.originalNum = y;
    5f52:	                         move.l 544(sp),d0
    5f56:	                         move.l d0,18c6c <zBuffer+0x4c>
	if (! openFileFromNum (y)) return FALSE;
    5f5c:	                         move.l 544(sp),d0
    5f60:	                         move.l d0,-(sp)
    5f62:	                         jsr 4556 <openFileFromNum>
    5f68:	                         addq.l #4,sp
    5f6a:	                         tst.l d0
    5f6c:	                     /-- bne.s 5f74 <setZBuffer+0x34>
    5f6e:	                     |   clr.w d0
    5f70:	/--------------------|-- bra.w 6352 <setZBuffer+0x412>
	if (FGetC (bigDataFile) != 'S' && FGetC (bigDataFile) != 'z' && FGetC (bigDataFile) != 'b') 
    5f74:	|                    \-> move.l 18ba8 <bigDataFile>,524(sp)
    5f7c:	|                        move.l 18bc8 <DOSBase>,d0
    5f82:	|                        movea.l d0,a6
    5f84:	|                        move.l 524(sp),d1
    5f88:	|                        jsr -306(a6)
    5f8c:	|                        move.l d0,520(sp)
    5f90:	|                        move.l 520(sp),d0
    5f94:	|                        moveq #83,d1
    5f96:	|                        cmp.l d0,d1
    5f98:	|                    /-- beq.s 5ffa <setZBuffer+0xba>
    5f9a:	|                    |   move.l 18ba8 <bigDataFile>,516(sp)
    5fa2:	|                    |   move.l 18bc8 <DOSBase>,d0
    5fa8:	|                    |   movea.l d0,a6
    5faa:	|                    |   move.l 516(sp),d1
    5fae:	|                    |   jsr -306(a6)
    5fb2:	|                    |   move.l d0,512(sp)
    5fb6:	|                    |   move.l 512(sp),d0
    5fba:	|                    |   moveq #122,d1
    5fbc:	|                    |   cmp.l d0,d1
    5fbe:	|                    +-- beq.s 5ffa <setZBuffer+0xba>
    5fc0:	|                    |   move.l 18ba8 <bigDataFile>,508(sp)
    5fc8:	|                    |   move.l 18bc8 <DOSBase>,d0
    5fce:	|                    |   movea.l d0,a6
    5fd0:	|                    |   move.l 508(sp),d1
    5fd4:	|                    |   jsr -306(a6)
    5fd8:	|                    |   move.l d0,504(sp)
    5fdc:	|                    |   move.l 504(sp),d0
    5fe0:	|                    |   moveq #98,d1
    5fe2:	|                    |   cmp.l d0,d1
    5fe4:	|                    +-- beq.s 5ffa <setZBuffer+0xba>
	{
		 KPrintF("Not a Z-buffer file");
    5fe6:	|                    |   pea 15263 <custom.c.36a9b171+0x669>
    5fec:	|                    |   jsr 13a4a <KPrintF>
    5ff2:	|                    |   addq.l #4,sp
		 return FALSE;
    5ff4:	|                    |   clr.w d0
    5ff6:	+--------------------|-- bra.w 6352 <setZBuffer+0x412>
	}

	switch (FGetC (bigDataFile)) {
    5ffa:	|                    \-> move.l 18ba8 <bigDataFile>,500(sp)
    6002:	|                        move.l 18bc8 <DOSBase>,d0
    6008:	|                        movea.l d0,a6
    600a:	|                        move.l 500(sp),d1
    600e:	|                        jsr -306(a6)
    6012:	|                        move.l d0,496(sp)
    6016:	|                        move.l 496(sp),d0
    601a:	|                    /-- beq.s 6024 <setZBuffer+0xe4>
    601c:	|                    |   moveq #1,d1
    601e:	|                    |   cmp.l d0,d1
    6020:	|                 /--|-- beq.s 603a <setZBuffer+0xfa>
    6022:	|              /--|--|-- bra.s 6068 <setZBuffer+0x128>
		case 0:
		zBuffer.width = 640;
    6024:	|              |  |  \-> move.l #640,18c20 <zBuffer>
		zBuffer.height = 480;
    602e:	|              |  |      move.l #480,18c24 <zBuffer+0x4>
		break;
    6038:	|              |  |  /-- bra.s 607c <setZBuffer+0x13c>
		
		case 1:
		zBuffer.width = get2bytes (bigDataFile);
    603a:	|              |  \--|-> move.l 18ba8 <bigDataFile>,d0
    6040:	|              |     |   move.l d0,-(sp)
    6042:	|              |     |   jsr 6bc <get2bytes>
    6048:	|              |     |   addq.l #4,sp
    604a:	|              |     |   move.l d0,18c20 <zBuffer>
		zBuffer.height = get2bytes (bigDataFile);
    6050:	|              |     |   move.l 18ba8 <bigDataFile>,d0
    6056:	|              |     |   move.l d0,-(sp)
    6058:	|              |     |   jsr 6bc <get2bytes>
    605e:	|              |     |   addq.l #4,sp
    6060:	|              |     |   move.l d0,18c24 <zBuffer+0x4>
		break;
    6066:	|              |     +-- bra.s 607c <setZBuffer+0x13c>
		
		default:
		KPrintF("Extended Z-buffer format not supported in this version of the SLUDGE engine");
    6068:	|              \-----|-> pea 15277 <custom.c.36a9b171+0x67d>
    606e:	|                    |   jsr 13a4a <KPrintF>
    6074:	|                    |   addq.l #4,sp
		return FALSE;
    6076:	|                    |   clr.w d0
    6078:	+--------------------|-- bra.w 6352 <setZBuffer+0x412>
	}
	if ((unsigned int) zBuffer.width != sceneWidth || (unsigned int) zBuffer.height != sceneHeight) {
    607c:	|                    \-> move.l 18c20 <zBuffer>,d0
    6082:	|                        move.l d0,d1
    6084:	|                        move.l 18cb0 <sceneWidth>,d0
    608a:	|                        cmp.l d1,d0
    608c:	|                    /-- bne.s 60a0 <setZBuffer+0x160>
    608e:	|                    |   move.l 18c24 <zBuffer+0x4>,d0
    6094:	|                    |   move.l d0,d1
    6096:	|                    |   move.l 18cb4 <sceneHeight>,d0
    609c:	|                    |   cmp.l d1,d0
    609e:	|                 /--|-- beq.s 60f0 <setZBuffer+0x1b0>
		char tmp[256];
		sprintf (tmp, "Z-w: %d Z-h:%d w: %d, h:%d", zBuffer.width, zBuffer.height, sceneWidth, sceneHeight);
    60a0:	|                 |  \-> movea.l 18cb4 <sceneHeight>,a1
    60a6:	|                 |      movea.l 18cb0 <sceneWidth>,a0
    60ac:	|                 |      move.l 18c24 <zBuffer+0x4>,d1
    60b2:	|                 |      move.l 18c20 <zBuffer>,d0
    60b8:	|                 |      move.l a1,-(sp)
    60ba:	|                 |      move.l a0,-(sp)
    60bc:	|                 |      move.l d1,-(sp)
    60be:	|                 |      move.l d0,-(sp)
    60c0:	|                 |      pea 152c3 <custom.c.36a9b171+0x6c9>
    60c6:	|                 |      moveq #32,d0
    60c8:	|                 |      add.l sp,d0
    60ca:	|                 |      move.l d0,-(sp)
    60cc:	|                 |      jsr 1120c <sprintf>
    60d2:	|                 |      lea 24(sp),sp
		KPrintF("Z-buffer width and height don't match scene width and height", tmp);
    60d6:	|                 |      moveq #12,d0
    60d8:	|                 |      add.l sp,d0
    60da:	|                 |      move.l d0,-(sp)
    60dc:	|                 |      pea 152de <custom.c.36a9b171+0x6e4>
    60e2:	|                 |      jsr 13a4a <KPrintF>
    60e8:	|                 |      addq.l #8,sp
		return FALSE;
    60ea:	|                 |      clr.w d0
    60ec:	+-----------------|----- bra.w 6352 <setZBuffer+0x412>
	}
		
	zBuffer.numPanels = FGetC (bigDataFile);
    60f0:	|                 \----> move.l 18ba8 <bigDataFile>,492(sp)
    60f8:	|                        move.l 18bc8 <DOSBase>,d0
    60fe:	|                        movea.l d0,a6
    6100:	|                        move.l 492(sp),d1
    6104:	|                        jsr -306(a6)
    6108:	|                        move.l d0,488(sp)
    610c:	|                        move.l 488(sp),d0
    6110:	|                        move.l d0,18c28 <zBuffer+0x8>
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    6116:	|                        clr.l 544(sp)
    611a:	|                    /-- bra.s 6146 <setZBuffer+0x206>
		yPalette[y] = get2bytes (bigDataFile);
    611c:	|                 /--|-> move.l 18ba8 <bigDataFile>,d0
    6122:	|                 |  |   move.l d0,-(sp)
    6124:	|                 |  |   jsr 6bc <get2bytes>
    612a:	|                 |  |   addq.l #4,sp
    612c:	|                 |  |   move.l 544(sp),d1
    6130:	|                 |  |   add.l d1,d1
    6132:	|                 |  |   add.l d1,d1
    6134:	|                 |  |   lea 540(sp),a0
    6138:	|                 |  |   add.l a0,d1
    613a:	|                 |  |   movea.l d1,a0
    613c:	|                 |  |   lea -144(a0),a0
    6140:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    6142:	|                 |  |   addq.l #1,544(sp)
    6146:	|                 |  \-> move.l 18c28 <zBuffer+0x8>,d0
    614c:	|                 |      cmp.l 544(sp),d0
    6150:	|                 \----- bhi.s 611c <setZBuffer+0x1dc>
	}
	sortZPal (yPalette, sorted, zBuffer.numPanels);
    6152:	|                        move.l 18c28 <zBuffer+0x8>,d0
    6158:	|                        move.l d0,-(sp)
    615a:	|                        move.l sp,d0
    615c:	|                        addi.l #336,d0
    6162:	|                        move.l d0,-(sp)
    6164:	|                        move.l sp,d0
    6166:	|                        addi.l #404,d0
    616c:	|                        move.l d0,-(sp)
    616e:	|                        jsr 635c <sortZPal>
    6174:	|                        lea 12(sp),sp
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    6178:	|                        clr.l 544(sp)
    617c:	|                    /-- bra.s 61f4 <setZBuffer+0x2b4>
		zBuffer.panel[y] = yPalette[sorted[y]];
    617e:	|                 /--|-> move.l 544(sp),d0
    6182:	|                 |  |   add.l d0,d0
    6184:	|                 |  |   add.l d0,d0
    6186:	|                 |  |   move.l #540,d1
    618c:	|                 |  |   add.l sp,d1
    618e:	|                 |  |   add.l d1,d0
    6190:	|                 |  |   movea.l d0,a0
    6192:	|                 |  |   lea -208(a0),a0
    6196:	|                 |  |   move.l (a0),d0
    6198:	|                 |  |   add.l d0,d0
    619a:	|                 |  |   add.l d0,d0
    619c:	|                 |  |   lea 540(sp),a0
    61a0:	|                 |  |   add.l a0,d0
    61a2:	|                 |  |   movea.l d0,a0
    61a4:	|                 |  |   lea -144(a0),a0
    61a8:	|                 |  |   move.l (a0),d0
    61aa:	|                 |  |   move.l 544(sp),d1
    61ae:	|                 |  |   addq.l #3,d1
    61b0:	|                 |  |   add.l d1,d1
    61b2:	|                 |  |   movea.l d1,a1
    61b4:	|                 |  |   adda.l d1,a1
    61b6:	|                 |  |   lea 18c20 <zBuffer>,a0
    61bc:	|                 |  |   move.l d0,(0,a1,a0.l)
		sortback[sorted[y]] = y; 
    61c0:	|                 |  |   move.l 544(sp),d0
    61c4:	|                 |  |   add.l d0,d0
    61c6:	|                 |  |   add.l d0,d0
    61c8:	|                 |  |   move.l #540,d1
    61ce:	|                 |  |   add.l sp,d1
    61d0:	|                 |  |   add.l d1,d0
    61d2:	|                 |  |   movea.l d0,a0
    61d4:	|                 |  |   lea -208(a0),a0
    61d8:	|                 |  |   move.l (a0),d1
    61da:	|                 |  |   move.l 544(sp),d0
    61de:	|                 |  |   add.l d1,d1
    61e0:	|                 |  |   add.l d1,d1
    61e2:	|                 |  |   lea 540(sp),a0
    61e6:	|                 |  |   add.l a0,d1
    61e8:	|                 |  |   movea.l d1,a0
    61ea:	|                 |  |   lea -272(a0),a0
    61ee:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    61f0:	|                 |  |   addq.l #1,544(sp)
    61f4:	|                 |  \-> move.l 18c28 <zBuffer+0x8>,d0
    61fa:	|                 |      cmp.l 544(sp),d0
    61fe:	|                 \----- bhi.w 617e <setZBuffer+0x23e>
	}
	
	int picWidth = sceneWidth;
    6202:	|                        move.l 18cb0 <sceneWidth>,d0
    6208:	|                        move.l d0,484(sp)
	int picHeight = sceneHeight;
    620c:	|                        move.l 18cb4 <sceneHeight>,d0
    6212:	|                        move.l d0,480(sp)

	zBuffer.tex = AllocVec(picHeight*picWidth,MEMF_ANY);
    6216:	|                        move.l 484(sp),-(sp)
    621a:	|                        move.l 484(sp),-(sp)
    621e:	|                        jsr 14284 <__mulsi3>
    6224:	|                        addq.l #8,sp
    6226:	|                        move.l d0,476(sp)
    622a:	|                        clr.l 472(sp)
    622e:	|                        move.l 18bc0 <SysBase>,d0
    6234:	|                        movea.l d0,a6
    6236:	|                        move.l 476(sp),d0
    623a:	|                        move.l 472(sp),d1
    623e:	|                        jsr -684(a6)
    6242:	|                        move.l d0,468(sp)
    6246:	|                        move.l 468(sp),d0
    624a:	|                        move.l d0,18c70 <zBuffer+0x50>
	if (!zBuffer.tex) {
    6250:	|                        move.l 18c70 <zBuffer+0x50>,d0
    6256:	|                    /-- bne.s 626c <setZBuffer+0x32c>
		KPrintF("setZBuffer: Cannot allocate memory");
    6258:	|                    |   pea 1531b <custom.c.36a9b171+0x721>
    625e:	|                    |   jsr 13a4a <KPrintF>
    6264:	|                    |   addq.l #4,sp
		return FALSE;
    6266:	|                    |   clr.w d0
    6268:	+--------------------|-- bra.w 6352 <setZBuffer+0x412>
	}

	for (y = 0; y < sceneHeight; y ++) {
    626c:	|                    \-> clr.l 544(sp)
    6270:	|     /----------------- bra.w 633c <setZBuffer+0x3fc>
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    6274:	|  /--|----------------> clr.l 536(sp)
    6278:	|  |  |     /----------- bra.w 6328 <setZBuffer+0x3e8>
			if (stillToGo == 0) {
    627c:	|  |  |  /--|----------> tst.l 528(sp)
    6280:	|  |  |  |  |  /-------- bne.s 62de <setZBuffer+0x39e>
				n = FGetC (bigDataFile);
    6282:	|  |  |  |  |  |         move.l 18ba8 <bigDataFile>,464(sp)
    628a:	|  |  |  |  |  |         move.l 18bc8 <DOSBase>,d0
    6290:	|  |  |  |  |  |         movea.l d0,a6
    6292:	|  |  |  |  |  |         move.l 464(sp),d1
    6296:	|  |  |  |  |  |         jsr -306(a6)
    629a:	|  |  |  |  |  |         move.l d0,460(sp)
    629e:	|  |  |  |  |  |         move.l 460(sp),d0
    62a2:	|  |  |  |  |  |         move.l d0,532(sp)
				stillToGo = n >> 4;
    62a6:	|  |  |  |  |  |         move.l 532(sp),d0
    62aa:	|  |  |  |  |  |         asr.l #4,d0
    62ac:	|  |  |  |  |  |         move.l d0,528(sp)
				if (stillToGo == 15) stillToGo = get2bytes (bigDataFile) + 16l;
    62b0:	|  |  |  |  |  |         moveq #15,d0
    62b2:	|  |  |  |  |  |         cmp.l 528(sp),d0
    62b6:	|  |  |  |  |  |  /----- bne.s 62d4 <setZBuffer+0x394>
    62b8:	|  |  |  |  |  |  |      move.l 18ba8 <bigDataFile>,d0
    62be:	|  |  |  |  |  |  |      move.l d0,-(sp)
    62c0:	|  |  |  |  |  |  |      jsr 6bc <get2bytes>
    62c6:	|  |  |  |  |  |  |      addq.l #4,sp
    62c8:	|  |  |  |  |  |  |      movea.l d0,a0
    62ca:	|  |  |  |  |  |  |      lea 16(a0),a0
    62ce:	|  |  |  |  |  |  |      move.l a0,528(sp)
    62d2:	|  |  |  |  |  |  |  /-- bra.s 62d8 <setZBuffer+0x398>
				else stillToGo ++;
    62d4:	|  |  |  |  |  |  \--|-> addq.l #1,528(sp)
				n &= 15;
    62d8:	|  |  |  |  |  |     \-> moveq #15,d1
    62da:	|  |  |  |  |  |         and.l d1,532(sp)
			}
			zBuffer.tex[y*picWidth + x] = sortback[n]*16;
    62de:	|  |  |  |  |  \-------> move.l 532(sp),d0
    62e2:	|  |  |  |  |            add.l d0,d0
    62e4:	|  |  |  |  |            add.l d0,d0
    62e6:	|  |  |  |  |            lea 540(sp),a0
    62ea:	|  |  |  |  |            add.l a0,d0
    62ec:	|  |  |  |  |            movea.l d0,a0
    62ee:	|  |  |  |  |            lea -272(a0),a0
    62f2:	|  |  |  |  |            move.l (a0),d0
    62f4:	|  |  |  |  |            move.l d0,d2
    62f6:	|  |  |  |  |            move.l 18c70 <zBuffer+0x50>,d3
    62fc:	|  |  |  |  |            move.l 484(sp),d0
    6300:	|  |  |  |  |            move.l 544(sp),-(sp)
    6304:	|  |  |  |  |            move.l d0,-(sp)
    6306:	|  |  |  |  |            jsr 14284 <__mulsi3>
    630c:	|  |  |  |  |            addq.l #8,sp
    630e:	|  |  |  |  |            move.l d0,d1
    6310:	|  |  |  |  |            move.l 536(sp),d0
    6314:	|  |  |  |  |            add.l d1,d0
    6316:	|  |  |  |  |            movea.l d3,a0
    6318:	|  |  |  |  |            adda.l d0,a0
    631a:	|  |  |  |  |            move.b d2,d0
    631c:	|  |  |  |  |            lsl.b #4,d0
    631e:	|  |  |  |  |            move.b d0,(a0)
			stillToGo --;
    6320:	|  |  |  |  |            subq.l #1,528(sp)
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    6324:	|  |  |  |  |            addq.l #1,536(sp)
    6328:	|  |  |  |  \----------> move.l 536(sp),d1
    632c:	|  |  |  |               move.l 18cb0 <sceneWidth>,d0
    6332:	|  |  |  |               cmp.l d1,d0
    6334:	|  |  |  \-------------- bhi.w 627c <setZBuffer+0x33c>
	for (y = 0; y < sceneHeight; y ++) {
    6338:	|  |  |                  addq.l #1,544(sp)
    633c:	|  |  \----------------> move.l 18cb4 <sceneHeight>,d0
    6342:	|  |                     cmp.l 544(sp),d0
    6346:	|  \-------------------- bhi.w 6274 <setZBuffer+0x334>
		}
	}

	finishAccess ();
    634a:	|                        jsr 444e <finishAccess>
	
	return TRUE;
    6350:	|                        moveq #1,d0
}
    6352:	\----------------------> movem.l (sp)+,d2-d3/a6
    6356:	                         lea 528(sp),sp
    635a:	                         rts

0000635c <sortZPal>:

void sortZPal (int *oldpal, int *newpal, int size) {
    635c:	             subq.l #8,sp
	int i, tmp;

	for (i = 0; i < size; i ++) {
    635e:	             clr.l 4(sp)
    6362:	         /-- bra.s 637a <sortZPal+0x1e>
		newpal[i] = i;
    6364:	      /--|-> move.l 4(sp),d0
    6368:	      |  |   add.l d0,d0
    636a:	      |  |   add.l d0,d0
    636c:	      |  |   movea.l 16(sp),a0
    6370:	      |  |   adda.l d0,a0
    6372:	      |  |   move.l 4(sp),(a0)
	for (i = 0; i < size; i ++) {
    6376:	      |  |   addq.l #1,4(sp)
    637a:	      |  \-> move.l 4(sp),d0
    637e:	      |      cmp.l 20(sp),d0
    6382:	      \----- blt.s 6364 <sortZPal+0x8>
	}

	if (size < 2) return;		
    6384:	             moveq #1,d0
    6386:	             cmp.l 20(sp),d0
    638a:	/----------- bge.w 643c <sortZPal+0xe0>
		
	for (i = 1; i < size; i ++) {
    638e:	|            moveq #1,d0
    6390:	|            move.l d0,4(sp)
    6394:	|     /----- bra.w 642e <sortZPal+0xd2>
		if (oldpal[newpal[i]] < oldpal[newpal[i-1]]) {
    6398:	|  /--|----> move.l 4(sp),d0
    639c:	|  |  |      add.l d0,d0
    639e:	|  |  |      add.l d0,d0
    63a0:	|  |  |      movea.l 16(sp),a0
    63a4:	|  |  |      adda.l d0,a0
    63a6:	|  |  |      move.l (a0),d0
    63a8:	|  |  |      add.l d0,d0
    63aa:	|  |  |      add.l d0,d0
    63ac:	|  |  |      movea.l 12(sp),a0
    63b0:	|  |  |      adda.l d0,a0
    63b2:	|  |  |      move.l (a0),d1
    63b4:	|  |  |      move.l 4(sp),d0
    63b8:	|  |  |      addi.l #1073741823,d0
    63be:	|  |  |      add.l d0,d0
    63c0:	|  |  |      add.l d0,d0
    63c2:	|  |  |      movea.l 16(sp),a0
    63c6:	|  |  |      adda.l d0,a0
    63c8:	|  |  |      move.l (a0),d0
    63ca:	|  |  |      add.l d0,d0
    63cc:	|  |  |      add.l d0,d0
    63ce:	|  |  |      movea.l 12(sp),a0
    63d2:	|  |  |      adda.l d0,a0
    63d4:	|  |  |      move.l (a0),d0
    63d6:	|  |  |      cmp.l d1,d0
    63d8:	|  |  |  /-- ble.s 642a <sortZPal+0xce>
			tmp = newpal[i];
    63da:	|  |  |  |   move.l 4(sp),d0
    63de:	|  |  |  |   add.l d0,d0
    63e0:	|  |  |  |   add.l d0,d0
    63e2:	|  |  |  |   movea.l 16(sp),a0
    63e6:	|  |  |  |   adda.l d0,a0
    63e8:	|  |  |  |   move.l (a0),(sp)
			newpal[i] = newpal[i-1];
    63ea:	|  |  |  |   move.l 4(sp),d0
    63ee:	|  |  |  |   addi.l #1073741823,d0
    63f4:	|  |  |  |   add.l d0,d0
    63f6:	|  |  |  |   add.l d0,d0
    63f8:	|  |  |  |   movea.l 16(sp),a1
    63fc:	|  |  |  |   adda.l d0,a1
    63fe:	|  |  |  |   move.l 4(sp),d0
    6402:	|  |  |  |   add.l d0,d0
    6404:	|  |  |  |   add.l d0,d0
    6406:	|  |  |  |   movea.l 16(sp),a0
    640a:	|  |  |  |   adda.l d0,a0
    640c:	|  |  |  |   move.l (a1),d0
    640e:	|  |  |  |   move.l d0,(a0)
			newpal[i-1] = tmp;
    6410:	|  |  |  |   move.l 4(sp),d0
    6414:	|  |  |  |   addi.l #1073741823,d0
    641a:	|  |  |  |   add.l d0,d0
    641c:	|  |  |  |   add.l d0,d0
    641e:	|  |  |  |   movea.l 16(sp),a0
    6422:	|  |  |  |   adda.l d0,a0
    6424:	|  |  |  |   move.l (sp),(a0)
			i = 0;
    6426:	|  |  |  |   clr.l 4(sp)
	for (i = 1; i < size; i ++) {
    642a:	|  |  |  \-> addq.l #1,4(sp)
    642e:	|  |  \----> move.l 4(sp),d0
    6432:	|  |         cmp.l 20(sp),d0
    6436:	|  \-------- blt.w 6398 <sortZPal+0x3c>
    643a:	|        /-- bra.s 643e <sortZPal+0xe2>
	if (size < 2) return;		
    643c:	\--------|-> nop
		}
	}
    643e:	         \-> addq.l #8,sp
    6440:	             rts

00006442 <loadSpriteBank>:
#include "sprites.h"
#include "fileset.h"
#include "moreio.h"
#include "support/gcc8_c_support.h"

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere, BOOL isFont) {
    6442:	             lea -84(sp),sp
    6446:	             movem.l d2-d4/a2/a6,-(sp)
    644a:	             move.l 116(sp),d0
    644e:	             move.w d0,d0
    6450:	             move.w d0,22(sp)
	int i, tex_num, total, picwidth, picheight, spriteBankVersion = 0, howmany = 0, startIndex = 0;
    6454:	             clr.l 96(sp)
    6458:	             clr.l 92(sp)
    645c:	             clr.l 88(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    6460:	             clr.l 84(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    6464:	             move.l 108(sp),-(sp)
    6468:	             jsr 4556 <openFileFromNum>
    646e:	             addq.l #4,sp
    6470:	             tst.l d0
    6472:	         /-- bne.s 6488 <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    6474:	         |   pea 1533e <custom.c.36a9b171+0x744>
    647a:	         |   jsr 13a4a <KPrintF>
    6480:	         |   addq.l #4,sp
		return FALSE;
    6482:	         |   clr.w d0
    6484:	/--------|-- bra.w 674e <loadSpriteBank+0x30c>
	}

	loadhere->isFont = isFont;
    6488:	|        \-> movea.l 112(sp),a0
    648c:	|            move.w 22(sp),12(a0)

	get2bytes(bigDataFile); // Ignore first 2 bytes
    6492:	|            move.l 18ba8 <bigDataFile>,d0
    6498:	|            move.l d0,-(sp)
    649a:	|            jsr 6bc <get2bytes>
    64a0:	|            addq.l #4,sp
	spriteBankVersion = FGetC(bigDataFile);
    64a2:	|            move.l 18ba8 <bigDataFile>,80(sp)
    64aa:	|            move.l 18bc8 <DOSBase>,d0
    64b0:	|            movea.l d0,a6
    64b2:	|            move.l 80(sp),d1
    64b6:	|            jsr -306(a6)
    64ba:	|            move.l d0,76(sp)
    64be:	|            move.l 76(sp),d0
    64c2:	|            move.l d0,96(sp)
	total = get2bytes(bigDataFile);
    64c6:	|            move.l 18ba8 <bigDataFile>,d0
    64cc:	|            move.l d0,-(sp)
    64ce:	|            jsr 6bc <get2bytes>
    64d4:	|            addq.l #4,sp
    64d6:	|            move.l d0,72(sp)

	if (total <= 0) {
    64da:	|        /-- bgt.s 64f0 <loadSpriteBank+0xae>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    64dc:	|        |   pea 1536c <custom.c.36a9b171+0x772>
    64e2:	|        |   jsr 13a4a <KPrintF>
    64e8:	|        |   addq.l #4,sp
		return FALSE;
    64ea:	|        |   clr.w d0
    64ec:	+--------|-- bra.w 674e <loadSpriteBank+0x30c>
	}
	if (spriteBankVersion > 3) {
    64f0:	|        \-> moveq #3,d0
    64f2:	|            cmp.l 96(sp),d0
    64f6:	|        /-- bge.s 650c <loadSpriteBank+0xca>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    64f8:	|        |   pea 153ac <custom.c.36a9b171+0x7b2>
    64fe:	|        |   jsr 13a4a <KPrintF>
    6504:	|        |   addq.l #4,sp
		return FALSE;
    6506:	|        |   clr.w d0
    6508:	+--------|-- bra.w 674e <loadSpriteBank+0x30c>
	}

	loadhere->total = total;
    650c:	|        \-> movea.l 112(sp),a0
    6510:	|            move.l 72(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    6514:	|            move.l 72(sp),d1
    6518:	|            move.l d1,d0
    651a:	|            lsl.l #3,d0
    651c:	|            sub.l d1,d0
    651e:	|            add.l d0,d0
    6520:	|            add.l d0,d0
    6522:	|            move.l d0,68(sp)
    6526:	|            clr.l 64(sp)
    652a:	|            move.l 18bc0 <SysBase>,d0
    6530:	|            movea.l d0,a6
    6532:	|            move.l 68(sp),d0
    6536:	|            move.l 64(sp),d1
    653a:	|            jsr -684(a6)
    653e:	|            move.l d0,60(sp)
    6542:	|            move.l 60(sp),d0
    6546:	|            movea.l 112(sp),a0
    654a:	|            move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    654e:	|            movea.l 112(sp),a0
    6552:	|            move.l 8(a0),d0
    6556:	|        /-- bne.s 655e <loadSpriteBank+0x11c>
    6558:	|        |   clr.w d0
    655a:	+--------|-- bra.w 674e <loadSpriteBank+0x30c>
	
	startIndex = 1;
    655e:	|        \-> moveq #1,d0
    6560:	|            move.l d0,88(sp)

	for (i = 0; i < total; i++) {
    6564:	|            clr.l 100(sp)
    6568:	|     /----- bra.w 673a <loadSpriteBank+0x2f8>
		loadhere->sprites[i].width = get2bytes(bigDataFile);
    656c:	|  /--|----> movea.l 18ba8 <bigDataFile>,a1
    6572:	|  |  |      movea.l 112(sp),a0
    6576:	|  |  |      movea.l 8(a0),a0
    657a:	|  |  |      move.l 100(sp),d1
    657e:	|  |  |      move.l d1,d0
    6580:	|  |  |      lsl.l #3,d0
    6582:	|  |  |      sub.l d1,d0
    6584:	|  |  |      add.l d0,d0
    6586:	|  |  |      add.l d0,d0
    6588:	|  |  |      lea (0,a0,d0.l),a2
    658c:	|  |  |      move.l a1,-(sp)
    658e:	|  |  |      jsr 6bc <get2bytes>
    6594:	|  |  |      addq.l #4,sp
    6596:	|  |  |      move.l d0,(a2)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    6598:	|  |  |      movea.l 18ba8 <bigDataFile>,a1
    659e:	|  |  |      movea.l 112(sp),a0
    65a2:	|  |  |      movea.l 8(a0),a0
    65a6:	|  |  |      move.l 100(sp),d1
    65aa:	|  |  |      move.l d1,d0
    65ac:	|  |  |      lsl.l #3,d0
    65ae:	|  |  |      sub.l d1,d0
    65b0:	|  |  |      add.l d0,d0
    65b2:	|  |  |      add.l d0,d0
    65b4:	|  |  |      lea (0,a0,d0.l),a2
    65b8:	|  |  |      move.l a1,-(sp)
    65ba:	|  |  |      jsr 6bc <get2bytes>
    65c0:	|  |  |      addq.l #4,sp
    65c2:	|  |  |      move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    65c6:	|  |  |      movea.l 18ba8 <bigDataFile>,a1
    65cc:	|  |  |      movea.l 112(sp),a0
    65d0:	|  |  |      movea.l 8(a0),a0
    65d4:	|  |  |      move.l 100(sp),d1
    65d8:	|  |  |      move.l d1,d0
    65da:	|  |  |      lsl.l #3,d0
    65dc:	|  |  |      sub.l d1,d0
    65de:	|  |  |      add.l d0,d0
    65e0:	|  |  |      add.l d0,d0
    65e2:	|  |  |      lea (0,a0,d0.l),a2
    65e6:	|  |  |      move.l a1,-(sp)
    65e8:	|  |  |      jsr 6bc <get2bytes>
    65ee:	|  |  |      addq.l #4,sp
    65f0:	|  |  |      move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    65f4:	|  |  |      movea.l 18ba8 <bigDataFile>,a1
    65fa:	|  |  |      movea.l 112(sp),a0
    65fe:	|  |  |      movea.l 8(a0),a0
    6602:	|  |  |      move.l 100(sp),d1
    6606:	|  |  |      move.l d1,d0
    6608:	|  |  |      lsl.l #3,d0
    660a:	|  |  |      sub.l d1,d0
    660c:	|  |  |      add.l d0,d0
    660e:	|  |  |      add.l d0,d0
    6610:	|  |  |      lea (0,a0,d0.l),a2
    6614:	|  |  |      move.l a1,-(sp)
    6616:	|  |  |      jsr 6bc <get2bytes>
    661c:	|  |  |      addq.l #4,sp
    661e:	|  |  |      move.l d0,12(a2)

		// ToDo Load Data
		UWORD size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    6622:	|  |  |      movea.l 112(sp),a0
    6626:	|  |  |      movea.l 8(a0),a0
    662a:	|  |  |      move.l 100(sp),d1
    662e:	|  |  |      move.l d1,d0
    6630:	|  |  |      lsl.l #3,d0
    6632:	|  |  |      sub.l d1,d0
    6634:	|  |  |      add.l d0,d0
    6636:	|  |  |      add.l d0,d0
    6638:	|  |  |      adda.l d0,a0
    663a:	|  |  |      move.l (a0),d0
    663c:	|  |  |  /-- bpl.s 6640 <loadSpriteBank+0x1fe>
    663e:	|  |  |  |   addq.l #7,d0
    6640:	|  |  |  \-> asr.l #3,d0
    6642:	|  |  |      move.l d0,d2
    6644:	|  |  |      movea.l 112(sp),a0
    6648:	|  |  |      movea.l 8(a0),a0
    664c:	|  |  |      move.l 100(sp),d1
    6650:	|  |  |      move.l d1,d0
    6652:	|  |  |      lsl.l #3,d0
    6654:	|  |  |      sub.l d1,d0
    6656:	|  |  |      add.l d0,d0
    6658:	|  |  |      add.l d0,d0
    665a:	|  |  |      adda.l d0,a0
    665c:	|  |  |      move.l 4(a0),d0
    6660:	|  |  |      move.l d0,d0
    6662:	|  |  |      move.w d2,d1
    6664:	|  |  |      muls.w d0,d1
    6666:	|  |  |      move.w d1,d0
    6668:	|  |  |      add.w d0,d0
    666a:	|  |  |      add.w d1,d0
    666c:	|  |  |      add.w d0,d0
    666e:	|  |  |      move.w d0,58(sp)
		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    6672:	|  |  |      moveq #0,d0
    6674:	|  |  |      move.w 58(sp),d0
    6678:	|  |  |      add.l d0,d0
    667a:	|  |  |      move.l d0,54(sp)
    667e:	|  |  |      moveq #2,d0
    6680:	|  |  |      move.l d0,50(sp)
    6684:	|  |  |      move.l 18bc0 <SysBase>,d0
    668a:	|  |  |      movea.l d0,a6
    668c:	|  |  |      move.l 54(sp),d0
    6690:	|  |  |      move.l 50(sp),d1
    6694:	|  |  |      jsr -684(a6)
    6698:	|  |  |      move.l d0,46(sp)
    669c:	|  |  |      movea.l 46(sp),a1
    66a0:	|  |  |      movea.l 112(sp),a0
    66a4:	|  |  |      movea.l 8(a0),a0
    66a8:	|  |  |      move.l 100(sp),d1
    66ac:	|  |  |      move.l d1,d0
    66ae:	|  |  |      lsl.l #3,d0
    66b0:	|  |  |      sub.l d1,d0
    66b2:	|  |  |      add.l d0,d0
    66b4:	|  |  |      add.l d0,d0
    66b6:	|  |  |      adda.l d0,a0
    66b8:	|  |  |      move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    66bc:	|  |  |      move.l 18ba8 <bigDataFile>,42(sp)
    66c4:	|  |  |      movea.l 112(sp),a0
    66c8:	|  |  |      movea.l 8(a0),a0
    66cc:	|  |  |      move.l 100(sp),d1
    66d0:	|  |  |      move.l d1,d0
    66d2:	|  |  |      lsl.l #3,d0
    66d4:	|  |  |      sub.l d1,d0
    66d6:	|  |  |      add.l d0,d0
    66d8:	|  |  |      add.l d0,d0
    66da:	|  |  |      adda.l d0,a0
    66dc:	|  |  |      move.l 24(a0),38(sp)
    66e2:	|  |  |      moveq #2,d0
    66e4:	|  |  |      move.l d0,34(sp)
    66e8:	|  |  |      move.w 58(sp),d0
    66ec:	|  |  |      lsr.w #1,d0
    66ee:	|  |  |      move.w d0,d0
    66f0:	|  |  |      andi.l #65535,d0
    66f6:	|  |  |      move.l d0,30(sp)
    66fa:	|  |  |      move.l 18bc8 <DOSBase>,d0
    6700:	|  |  |      movea.l d0,a6
    6702:	|  |  |      move.l 42(sp),d1
    6706:	|  |  |      move.l 38(sp),d2
    670a:	|  |  |      move.l 34(sp),d3
    670e:	|  |  |      move.l 30(sp),d4
    6712:	|  |  |      jsr -324(a6)
    6716:	|  |  |      move.l d0,26(sp)
    671a:	|  |  |      move.l 26(sp),d0
    671e:	|  |  |      move.w d0,24(sp)
		if (!count) {
    6722:	|  |  |  /-- bne.s 6736 <loadSpriteBank+0x2f4>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    6724:	|  |  |  |   pea 153e1 <custom.c.36a9b171+0x7e7>
    672a:	|  |  |  |   jsr 13a4a <KPrintF>
    6730:	|  |  |  |   addq.l #4,sp
			return FALSE;
    6732:	|  |  |  |   clr.w d0
    6734:	+--|--|--|-- bra.s 674e <loadSpriteBank+0x30c>
	for (i = 0; i < total; i++) {
    6736:	|  |  |  \-> addq.l #1,100(sp)
    673a:	|  |  \----> move.l 100(sp),d0
    673e:	|  |         cmp.l 72(sp),d0
    6742:	|  \-------- blt.w 656c <loadSpriteBank+0x12a>
		}
	}

	finishAccess ();
    6746:	|            jsr 444e <finishAccess>

	return TRUE;
    674c:	|            moveq #1,d0
}
    674e:	\----------> movem.l (sp)+,d2-d4/a2/a6
    6752:	             lea 84(sp),sp
    6756:	             rts

00006758 <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    6758:	subq.l #4,sp
    675a:	move.l d2,-(sp)
    675c:	move.l 20(sp),d0
    6760:	move.w d0,d0
    6762:	move.w d0,6(sp)
	CstScaleSprite( single, (UWORD) thisPerson->x, (UWORD) thisPerson->y);
    6766:	movea.l 16(sp),a0
    676a:	move.l 4(a0),d0
    676e:	move.l d0,-(sp)
    6770:	jsr 14062 <__fixunssfsi>
    6776:	addq.l #4,sp
    6778:	move.l d0,d0
    677a:	moveq #0,d2
    677c:	move.w d0,d2
    677e:	movea.l 16(sp),a0
    6782:	move.l (a0),d0
    6784:	move.l d0,-(sp)
    6786:	jsr 14062 <__fixunssfsi>
    678c:	addq.l #4,sp
    678e:	move.l d0,d0
    6790:	move.w d0,d0
    6792:	andi.l #65535,d0
    6798:	move.l d2,-(sp)
    679a:	move.l d0,-(sp)
    679c:	move.l 20(sp),-(sp)
    67a0:	jsr 15b4 <CstScaleSprite>
    67a6:	lea 12(sp),sp
	//KPrintF("scaleSprite: This function is not implemented yet");
    67aa:	nop
    67ac:	move.l (sp)+,d2
    67ae:	addq.l #4,sp
    67b0:	rts

000067b2 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    67b2:	    move.l 4(sp),d0
    67b6:	/-- bpl.s 67ba <TF_abs+0x8>
    67b8:	|   neg.l d0
}
    67ba:	\-> rts

000067bc <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    67bc:	             lea -28(sp),sp
    67c0:	             move.l a6,-(sp)
    67c2:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    67c4:	             moveq #120,d0
    67c6:	             move.l d0,28(sp)
    67ca:	             clr.l 24(sp)
    67ce:	             move.l 18bc0 <SysBase>,d0
    67d4:	             movea.l d0,a6
    67d6:	             move.l 28(sp),d0
    67da:	             move.l 24(sp),d1
    67de:	             jsr -684(a6)
    67e2:	             move.l d0,20(sp)
    67e6:	             move.l 20(sp),d0
    67ea:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    67ee:	         /-- bne.s 67f6 <addPerson+0x3a>
    67f0:	         |   clr.w d0
    67f2:	/--------|-- bra.w 6a26 <addPerson+0x26a>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    67f6:	|        \-> move.l 48(sp),-(sp)
    67fa:	|            jsr a928 <loadObjectType>
    6800:	|            addq.l #4,sp
    6802:	|            movea.l 16(sp),a0
    6806:	|            move.l d0,102(a0)
    newPerson->scale = 1;
    680a:	|            movea.l 16(sp),a0
    680e:	|            move.l #1065353216,20(a0)
    newPerson->extra = 0;
    6816:	|            movea.l 16(sp),a0
    681a:	|            clr.l 106(a0)
    newPerson->continueAfterWalking = NULL;
    681e:	|            movea.l 16(sp),a0
    6822:	|            clr.l 56(a0)
    moveAndScale(newPerson, x, y);
    6826:	|            move.l 44(sp),-(sp)
    682a:	|            jsr 13d02 <__floatsisf>
    6830:	|            addq.l #4,sp
    6832:	|            move.l d0,d2
    6834:	|            move.l 40(sp),-(sp)
    6838:	|            jsr 13d02 <__floatsisf>
    683e:	|            addq.l #4,sp
    6840:	|            move.l d2,-(sp)
    6842:	|            move.l d0,-(sp)
    6844:	|            move.l 24(sp),-(sp)
    6848:	|            jsr 8234 <moveAndScale>
    684e:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    6852:	|            movea.l 16(sp),a0
    6856:	|            clr.l 72(a0)
    newPerson->walkToX = x;
    685a:	|            movea.l 16(sp),a0
    685e:	|            move.l 40(sp),28(a0)
    newPerson->walkToY = y;
    6864:	|            movea.l 16(sp),a0
    6868:	|            move.l 44(sp),32(a0)
    newPerson->walking = FALSE;
    686e:	|            movea.l 16(sp),a0
    6872:	|            clr.w 52(a0)
    newPerson->spinning = FALSE;
    6876:	|            movea.l 16(sp),a0
    687a:	|            clr.w 54(a0)
    newPerson->show = TRUE;
    687e:	|            movea.l 16(sp),a0
    6882:	|            move.w #1,92(a0)
    newPerson->direction = 0;
    6888:	|            movea.l 16(sp),a0
    688c:	|            clr.l 94(a0)
    newPerson->angle = 180;
    6890:	|            movea.l 16(sp),a0
    6894:	|            move.l #180,80(a0)
    newPerson->wantAngle = 180;
    689c:	|            movea.l 16(sp),a0
    68a0:	|            move.l #180,84(a0)
    newPerson->angleOffset = 0;
    68a8:	|            movea.l 16(sp),a0
    68ac:	|            clr.l 88(a0)
    newPerson->floaty = 0;
    68b0:	|            movea.l 16(sp),a0
    68b4:	|            clr.l 12(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    68b8:	|            movea.l 16(sp),a0
    68bc:	|            movea.l 102(a0),a0
    68c0:	|            move.l 24(a0),d0
    68c4:	|            movea.l 16(sp),a0
    68c8:	|            move.l d0,16(a0)
    newPerson->myAnim = NULL;
    68cc:	|            movea.l 16(sp),a0
    68d0:	|            clr.l 60(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    68d4:	|            movea.l 16(sp),a0
    68d8:	|            movea.l 102(a0),a0
    68dc:	|            move.l 32(a0),d0
    68e0:	|            movea.l 16(sp),a0
    68e4:	|            move.l d0,110(a0)
    newPerson->r = 0;
    68e8:	|            movea.l 16(sp),a0
    68ec:	|            clr.b 114(a0)
    newPerson->g = 0;
    68f0:	|            movea.l 16(sp),a0
    68f4:	|            clr.b 115(a0)
    newPerson->b = 0;
    68f8:	|            movea.l 16(sp),a0
    68fc:	|            clr.b 116(a0)
    newPerson->colourmix = 0;
    6900:	|            movea.l 16(sp),a0
    6904:	|            clr.b 117(a0)
    newPerson->transparency = 0;
    6908:	|            movea.l 16(sp),a0
    690c:	|            clr.b 118(a0)
    newPerson->myPersona = p;
    6910:	|            movea.l 16(sp),a0
    6914:	|            move.l 52(sp),68(a0)

    setFrames(newPerson, ANI_STAND);
    691a:	|            clr.l -(sp)
    691c:	|            move.l 20(sp),-(sp)
    6920:	|            jsr 593c <setFrames>
    6926:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    6928:	|            movea.l 52(sp),a0
    692c:	|            movea.l (a0),a0
    692e:	|            movea.l (a0),a0
    6930:	|            movea.l 4(a0),a0
    6934:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    6938:	|     /----- bpl.s 6942 <addPerson+0x186>
    693a:	|     |      move.l 12(sp),d0
    693e:	|     |      neg.l d0
    6940:	|     |  /-- bra.s 6944 <addPerson+0x188>
    6942:	|     \--|-> moveq #1,d0
    6944:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    6948:	|            movea.l 52(sp),a0
    694c:	|            movea.l (a0),a0
    694e:	|            movea.l (a0),a0
    6950:	|            movea.l (a0),a0
    6952:	|            move.l 8(a0),d0
    6956:	|            cmp.l 8(sp),d0
    695a:	|     /----- bgt.s 698c <addPerson+0x1d0>
        if (fNumSigned < 0) {
    695c:	|     |      tst.l 12(sp)
    6960:	|     |  /-- bge.s 696e <addPerson+0x1b2>
            newPerson->height = 5;
    6962:	|     |  |   movea.l 16(sp),a0
    6966:	|     |  |   moveq #5,d1
    6968:	|     |  |   move.l d1,8(a0)
    696c:	|  /--|--|-- bra.s 69b8 <addPerson+0x1fc>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    696e:	|  |  |  \-> movea.l 52(sp),a0
    6972:	|  |  |      movea.l (a0),a0
    6974:	|  |  |      movea.l (a0),a0
    6976:	|  |  |      movea.l (a0),a0
    6978:	|  |  |      movea.l 16(a0),a0
    697c:	|  |  |      move.l 12(a0),d0
    6980:	|  |  |      addq.l #5,d0
    6982:	|  |  |      movea.l 16(sp),a0
    6986:	|  |  |      move.l d0,8(a0)
    698a:	|  +--|----- bra.s 69b8 <addPerson+0x1fc>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    698c:	|  |  \----> movea.l 52(sp),a0
    6990:	|  |         movea.l (a0),a0
    6992:	|  |         movea.l (a0),a0
    6994:	|  |         movea.l (a0),a0
    6996:	|  |         movea.l 16(a0),a0
    699a:	|  |         move.l 8(sp),d1
    699e:	|  |         move.l d1,d0
    69a0:	|  |         lsl.l #3,d0
    69a2:	|  |         sub.l d1,d0
    69a4:	|  |         add.l d0,d0
    69a6:	|  |         add.l d0,d0
    69a8:	|  |         adda.l d0,a0
    69aa:	|  |         move.l 12(a0),d0
    69ae:	|  |         addq.l #5,d0
    69b0:	|  |         movea.l 16(sp),a0
    69b4:	|  |         move.l d0,8(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    69b8:	|  \-------> move.l #101496,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    69c0:	|        /-- bra.s 69d0 <addPerson+0x214>
        changethat = &((*changethat)->next);
    69c2:	|     /--|-> movea.l 32(sp),a0
    69c6:	|     |  |   move.l (a0),d0
    69c8:	|     |  |   moveq #24,d1
    69ca:	|     |  |   add.l d0,d1
    69cc:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    69d0:	|     |  \-> movea.l 32(sp),a0
    69d4:	|     |      move.l (a0),d0
    69d6:	|     |  /-- beq.s 69fe <addPerson+0x242>
    69d8:	|     |  |   movea.l 32(sp),a0
    69dc:	|     |  |   movea.l (a0),a0
    69de:	|     |  |   move.l 4(a0),d2
    69e2:	|     |  |   move.l 44(sp),-(sp)
    69e6:	|     |  |   jsr 13d02 <__floatsisf>
    69ec:	|     |  |   addq.l #4,sp
    69ee:	|     |  |   move.l d0,-(sp)
    69f0:	|     |  |   move.l d2,-(sp)
    69f2:	|     |  |   jsr 13f28 <__ltsf2>
    69f8:	|     |  |   addq.l #8,sp
    69fa:	|     |  |   tst.l d0
    69fc:	|     \--|-- blt.s 69c2 <addPerson+0x206>
    }

    newPerson->next = (*changethat);
    69fe:	|        \-> movea.l 32(sp),a0
    6a02:	|            move.l (a0),d0
    6a04:	|            movea.l 16(sp),a0
    6a08:	|            move.l d0,24(a0)
    (*changethat) = newPerson;
    6a0c:	|            movea.l 32(sp),a0
    6a10:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    6a14:	|            movea.l 16(sp),a0
    6a18:	|            move.l 102(a0),d0
    6a1c:	|            sne d0
    6a1e:	|            neg.b d0
    6a20:	|            move.b d0,d0
    6a22:	|            andi.w #255,d0
}
    6a26:	\----------> move.l (sp)+,d2
    6a28:	             movea.l (sp)+,a6
    6a2a:	             lea 28(sp),sp
    6a2e:	             rts

00006a30 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    6a30:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    6a32:	       move.l 8(sp),-(sp)
    6a36:	       jsr 7aec <findPerson>
    6a3c:	       addq.l #4,sp
    6a3e:	       move.l d0,(sp)
    if (moveMe) {
    6a40:	/----- beq.s 6a74 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    6a42:	|      movea.l (sp),a0
    6a44:	|      move.l 56(a0),d0
    6a48:	|  /-- beq.s 6a5a <animatePerson+0x2a>
    6a4a:	|  |   movea.l (sp),a0
    6a4c:	|  |   move.l 56(a0),d0
    6a50:	|  |   move.l d0,-(sp)
    6a52:	|  |   jsr 21b6 <abortFunction>
    6a58:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    6a5a:	|  \-> movea.l (sp),a0
    6a5c:	|      clr.l 56(a0)
        moveMe -> walking = FALSE;
    6a60:	|      movea.l (sp),a0
    6a62:	|      clr.w 52(a0)
        moveMe -> spinning = FALSE;
    6a66:	|      movea.l (sp),a0
    6a68:	|      clr.w 54(a0)
        moveMe -> myAnim = fram;
    6a6c:	|      movea.l (sp),a0
    6a6e:	|      move.l 12(sp),60(a0)
    }
}
    6a74:	\----> nop
    6a76:	       addq.l #4,sp
    6a78:	       rts

00006a7a <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    6a7a:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    6a7c:	       move.l 8(sp),-(sp)
    6a80:	       jsr 7aec <findPerson>
    6a86:	       addq.l #4,sp
    6a88:	       move.l d0,(sp)
    if (moveMe) {
    6a8a:	/----- beq.s 6acc <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    6a8c:	|      movea.l (sp),a0
    6a8e:	|      clr.w 54(a0)
        moveMe -> myPersona = per;
    6a92:	|      movea.l (sp),a0
    6a94:	|      move.l 12(sp),68(a0)
        rethinkAngle(moveMe);
    6a9a:	|      move.l (sp),-(sp)
    6a9c:	|      jsr 837e <rethinkAngle>
    6aa2:	|      addq.l #4,sp
        if (moveMe->walking) {
    6aa4:	|      movea.l (sp),a0
    6aa6:	|      move.w 52(a0),d0
    6aaa:	|  /-- beq.s 6abe <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    6aac:	|  |   pea 1 <_start+0x1>
    6ab0:	|  |   move.l 4(sp),-(sp)
    6ab4:	|  |   jsr 593c <setFrames>
    6aba:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    6abc:	+--|-- bra.s 6acc <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    6abe:	|  \-> clr.l -(sp)
    6ac0:	|      move.l 4(sp),-(sp)
    6ac4:	|      jsr 593c <setFrames>
    6aca:	|      addq.l #8,sp
}
    6acc:	\----> nop
    6ace:	       addq.l #4,sp
    6ad0:	       rts

00006ad2 <copyAnim>:


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    6ad2:	             lea -36(sp),sp
    6ad6:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    6ad8:	             movea.l 44(sp),a0
    6adc:	             move.l 8(a0),32(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    6ae2:	             moveq #12,d0
    6ae4:	             move.l d0,28(sp)
    6ae8:	             clr.l 24(sp)
    6aec:	             move.l 18bc0 <SysBase>,d0
    6af2:	             movea.l d0,a6
    6af4:	             move.l 28(sp),d0
    6af8:	             move.l 24(sp),d1
    6afc:	             jsr -684(a6)
    6b00:	             move.l d0,20(sp)
    6b04:	             move.l 20(sp),d0
    6b08:	             move.l d0,16(sp)
	if (!(newAnim)) {
    6b0c:	         /-- bne.s 6b22 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    6b0e:	         |   pea 15414 <custom.c.36a9b171+0x81a>
    6b14:	         |   jsr 13a4a <KPrintF>
    6b1a:	         |   addq.l #4,sp
		return NULL;
    6b1c:	         |   moveq #0,d0
    6b1e:	/--------|-- bra.w 6c64 <copyAnim+0x192>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    6b22:	|        \-> movea.l 44(sp),a0
    6b26:	|            move.l (a0),d0
    6b28:	|            movea.l 16(sp),a0
    6b2c:	|            move.l d0,(a0)
	newAnim -> numFrames		= num;
    6b2e:	|            movea.l 16(sp),a0
    6b32:	|            move.l 32(sp),8(a0)

	if (num) {
    6b38:	|  /-------- beq.w 6c58 <copyAnim+0x186>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    6b3c:	|  |         move.l 32(sp),d1
    6b40:	|  |         move.l d1,d0
    6b42:	|  |         add.l d0,d0
    6b44:	|  |         add.l d1,d0
    6b46:	|  |         add.l d0,d0
    6b48:	|  |         add.l d0,d0
    6b4a:	|  |         move.l d0,12(sp)
    6b4e:	|  |         clr.l 8(sp)
    6b52:	|  |         move.l 18bc0 <SysBase>,d0
    6b58:	|  |         movea.l d0,a6
    6b5a:	|  |         move.l 12(sp),d0
    6b5e:	|  |         move.l 8(sp),d1
    6b62:	|  |         jsr -684(a6)
    6b66:	|  |         move.l d0,4(sp)
    6b6a:	|  |         move.l 4(sp),d0
    6b6e:	|  |         movea.l 16(sp),a0
    6b72:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    6b76:	|  |         movea.l 16(sp),a0
    6b7a:	|  |         move.l 4(a0),d0
    6b7e:	|  |     /-- bne.s 6b94 <copyAnim+0xc2>
			KPrintF("copyAnim: Cannot allocate memory");
    6b80:	|  |     |   pea 15414 <custom.c.36a9b171+0x81a>
    6b86:	|  |     |   jsr 13a4a <KPrintF>
    6b8c:	|  |     |   addq.l #4,sp
			return NULL;
    6b8e:	|  |     |   moveq #0,d0
    6b90:	+--|-----|-- bra.w 6c64 <copyAnim+0x192>
		}

		for (int a = 0; a < num; a ++) {
    6b94:	|  |     \-> clr.l 36(sp)
    6b98:	|  |     /-- bra.w 6c4a <copyAnim+0x178>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    6b9c:	|  |  /--|-> movea.l 44(sp),a0
    6ba0:	|  |  |  |   movea.l 4(a0),a0
    6ba4:	|  |  |  |   move.l 36(sp),d1
    6ba8:	|  |  |  |   move.l d1,d0
    6baa:	|  |  |  |   add.l d0,d0
    6bac:	|  |  |  |   add.l d1,d0
    6bae:	|  |  |  |   add.l d0,d0
    6bb0:	|  |  |  |   add.l d0,d0
    6bb2:	|  |  |  |   lea (0,a0,d0.l),a1
    6bb6:	|  |  |  |   movea.l 16(sp),a0
    6bba:	|  |  |  |   movea.l 4(a0),a0
    6bbe:	|  |  |  |   move.l 36(sp),d1
    6bc2:	|  |  |  |   move.l d1,d0
    6bc4:	|  |  |  |   add.l d0,d0
    6bc6:	|  |  |  |   add.l d1,d0
    6bc8:	|  |  |  |   add.l d0,d0
    6bca:	|  |  |  |   add.l d0,d0
    6bcc:	|  |  |  |   adda.l d0,a0
    6bce:	|  |  |  |   move.l (a1),d0
    6bd0:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    6bd2:	|  |  |  |   movea.l 44(sp),a0
    6bd6:	|  |  |  |   movea.l 4(a0),a0
    6bda:	|  |  |  |   move.l 36(sp),d1
    6bde:	|  |  |  |   move.l d1,d0
    6be0:	|  |  |  |   add.l d0,d0
    6be2:	|  |  |  |   add.l d1,d0
    6be4:	|  |  |  |   add.l d0,d0
    6be6:	|  |  |  |   add.l d0,d0
    6be8:	|  |  |  |   lea (0,a0,d0.l),a1
    6bec:	|  |  |  |   movea.l 16(sp),a0
    6bf0:	|  |  |  |   movea.l 4(a0),a0
    6bf4:	|  |  |  |   move.l 36(sp),d1
    6bf8:	|  |  |  |   move.l d1,d0
    6bfa:	|  |  |  |   add.l d0,d0
    6bfc:	|  |  |  |   add.l d1,d0
    6bfe:	|  |  |  |   add.l d0,d0
    6c00:	|  |  |  |   add.l d0,d0
    6c02:	|  |  |  |   adda.l d0,a0
    6c04:	|  |  |  |   move.l 4(a1),d0
    6c08:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    6c0c:	|  |  |  |   movea.l 44(sp),a0
    6c10:	|  |  |  |   movea.l 4(a0),a0
    6c14:	|  |  |  |   move.l 36(sp),d1
    6c18:	|  |  |  |   move.l d1,d0
    6c1a:	|  |  |  |   add.l d0,d0
    6c1c:	|  |  |  |   add.l d1,d0
    6c1e:	|  |  |  |   add.l d0,d0
    6c20:	|  |  |  |   add.l d0,d0
    6c22:	|  |  |  |   lea (0,a0,d0.l),a1
    6c26:	|  |  |  |   movea.l 16(sp),a0
    6c2a:	|  |  |  |   movea.l 4(a0),a0
    6c2e:	|  |  |  |   move.l 36(sp),d1
    6c32:	|  |  |  |   move.l d1,d0
    6c34:	|  |  |  |   add.l d0,d0
    6c36:	|  |  |  |   add.l d1,d0
    6c38:	|  |  |  |   add.l d0,d0
    6c3a:	|  |  |  |   add.l d0,d0
    6c3c:	|  |  |  |   adda.l d0,a0
    6c3e:	|  |  |  |   move.l 8(a1),d0
    6c42:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    6c46:	|  |  |  |   addq.l #1,36(sp)
    6c4a:	|  |  |  \-> move.l 36(sp),d0
    6c4e:	|  |  |      cmp.l 32(sp),d0
    6c52:	|  |  \----- blt.w 6b9c <copyAnim+0xca>
    6c56:	|  |     /-- bra.s 6c60 <copyAnim+0x18e>
		}
	} else {
		newAnim -> frames = NULL;
    6c58:	|  \-----|-> movea.l 16(sp),a0
    6c5c:	|        |   clr.l 4(a0)
	}

	return newAnim;
    6c60:	|        \-> move.l 16(sp),d0
}
    6c64:	\----------> movea.l (sp)+,a6
    6c66:	             lea 36(sp),sp
    6c6a:	             rts

00006c6c <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    6c6c:	                lea -44(sp),sp
    6c70:	                move.l a6,-(sp)
    6c72:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    6c74:	                moveq #12,d0
    6c76:	                move.l d0,40(sp)
    6c7a:	                clr.l 36(sp)
    6c7e:	                move.l 18bc0 <SysBase>,d0
    6c84:	                movea.l d0,a6
    6c86:	                move.l 40(sp),d0
    6c8a:	                move.l 36(sp),d1
    6c8e:	                jsr -684(a6)
    6c92:	                move.l d0,32(sp)
    6c96:	                move.l 32(sp),d0
    6c9a:	                move.l d0,28(sp)
	if( !newP) {
    6c9e:	            /-- bne.s 6cb4 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    6ca0:	            |   pea 15435 <custom.c.36a9b171+0x83b>
    6ca6:	            |   jsr 13a4a <KPrintF>
    6cac:	            |   addq.l #4,sp
		return NULL;
    6cae:	            |   moveq #0,d0
    6cb0:	/-----------|-- bra.w 6e84 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    6cb4:	|           \-> movea.l 28(sp),a0
    6cb8:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    6cbe:	|               move.l 56(sp),d1
    6cc2:	|               move.l d1,d0
    6cc4:	|               add.l d0,d0
    6cc6:	|               add.l d1,d0
    6cc8:	|               add.l d0,d0
    6cca:	|               add.l d0,d0
    6ccc:	|               move.l d0,24(sp)
    6cd0:	|               clr.l 20(sp)
    6cd4:	|               move.l 18bc0 <SysBase>,d0
    6cda:	|               movea.l d0,a6
    6cdc:	|               move.l 24(sp),d0
    6ce0:	|               move.l 20(sp),d1
    6ce4:	|               jsr -684(a6)
    6ce8:	|               move.l d0,16(sp)
    6cec:	|               move.l 16(sp),d0
    6cf0:	|               movea.l 28(sp),a0
    6cf4:	|               move.l d0,4(a0)
	if( !newP->frames) {
    6cf8:	|               movea.l 28(sp),a0
    6cfc:	|               move.l 4(a0),d0
    6d00:	|           /-- bne.s 6d16 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    6d02:	|           |   pea 15435 <custom.c.36a9b171+0x83b>
    6d08:	|           |   jsr 13a4a <KPrintF>
    6d0e:	|           |   addq.l #4,sp
		return NULL;
    6d10:	|           |   moveq #0,d0
    6d12:	+-----------|-- bra.w 6e84 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    6d16:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    6d1c:	|               movea.l 60(sp),a0
    6d20:	|               move.l (a0),44(sp)
	while (a) {
    6d24:	|     /-------- bra.w 6e78 <createPersonaAnim+0x20c>
		a --;
    6d28:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    6d2c:	|  |  |         movea.l 28(sp),a0
    6d30:	|  |  |         movea.l 4(a0),a0
    6d34:	|  |  |         move.l 48(sp),d1
    6d38:	|  |  |         move.l d1,d0
    6d3a:	|  |  |         add.l d0,d0
    6d3c:	|  |  |         add.l d1,d0
    6d3e:	|  |  |         add.l d0,d0
    6d40:	|  |  |         add.l d0,d0
    6d42:	|  |  |         adda.l d0,a0
    6d44:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    6d48:	|  |  |         movea.l 44(sp),a0
    6d4c:	|  |  |         move.l (a0),d0
    6d4e:	|  |  |         moveq #5,d1
    6d50:	|  |  |         cmp.l d0,d1
    6d52:	|  |  |     /-- bne.s 6d7e <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    6d54:	|  |  |     |   movea.l 28(sp),a0
    6d58:	|  |  |     |   movea.l 4(a0),a0
    6d5c:	|  |  |     |   move.l 48(sp),d1
    6d60:	|  |  |     |   move.l d1,d0
    6d62:	|  |  |     |   add.l d0,d0
    6d64:	|  |  |     |   add.l d1,d0
    6d66:	|  |  |     |   add.l d0,d0
    6d68:	|  |  |     |   add.l d0,d0
    6d6a:	|  |  |     |   lea (0,a0,d0.l),a1
    6d6e:	|  |  |     |   movea.l 44(sp),a0
    6d72:	|  |  |     |   move.l 4(a0),d0
    6d76:	|  |  |     |   move.l d0,8(a1)
    6d7a:	|  |  |  /--|-- bra.w 6e26 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    6d7e:	|  |  |  |  \-> movea.l 44(sp),a0
    6d82:	|  |  |  |      move.l (a0),d0
    6d84:	|  |  |  |      moveq #2,d1
    6d86:	|  |  |  |      cmp.l d0,d1
    6d88:	|  |  |  |  /-- bne.s 6db4 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    6d8a:	|  |  |  |  |   movea.l 44(sp),a0
    6d8e:	|  |  |  |  |   move.l 4(a0),d2
    6d92:	|  |  |  |  |   movea.l 28(sp),a0
    6d96:	|  |  |  |  |   movea.l 4(a0),a0
    6d9a:	|  |  |  |  |   move.l 48(sp),d1
    6d9e:	|  |  |  |  |   move.l d1,d0
    6da0:	|  |  |  |  |   add.l d0,d0
    6da2:	|  |  |  |  |   add.l d1,d0
    6da4:	|  |  |  |  |   add.l d0,d0
    6da6:	|  |  |  |  |   add.l d0,d0
    6da8:	|  |  |  |  |   adda.l d0,a0
    6daa:	|  |  |  |  |   move.l d2,d0
    6dac:	|  |  |  |  |   neg.l d0
    6dae:	|  |  |  |  |   move.l d0,8(a0)
    6db2:	|  |  |  +--|-- bra.s 6e26 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    6db4:	|  |  |  |  \-> movea.l 44(sp),a0
    6db8:	|  |  |  |      move.l (a0),d0
    6dba:	|  |  |  |      moveq #6,d1
    6dbc:	|  |  |  |      cmp.l d0,d1
    6dbe:	|  |  |  |  /-- bne.s 6e06 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    6dc0:	|  |  |  |  |   movea.l 44(sp),a0
    6dc4:	|  |  |  |  |   movea.l 4(a0),a0
    6dc8:	|  |  |  |  |   move.l (a0),d0
    6dca:	|  |  |  |  |   move.l d0,-(sp)
    6dcc:	|  |  |  |  |   pea 1 <_start+0x1>
    6dd0:	|  |  |  |  |   lea 20(sp),a0
    6dd4:	|  |  |  |  |   move.l a0,-(sp)
    6dd6:	|  |  |  |  |   jsr 11a02 <getValueType>
    6ddc:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    6de0:	|  |  |  |  |   movea.l 44(sp),a0
    6de4:	|  |  |  |  |   movea.l 4(a0),a0
    6de8:	|  |  |  |  |   movea.l (a0),a0
    6dea:	|  |  |  |  |   move.l 8(a0),d0
    6dee:	|  |  |  |  |   move.l d0,-(sp)
    6df0:	|  |  |  |  |   pea 1 <_start+0x1>
    6df4:	|  |  |  |  |   lea 16(sp),a0
    6df8:	|  |  |  |  |   move.l a0,-(sp)
    6dfa:	|  |  |  |  |   jsr 11a02 <getValueType>
    6e00:	|  |  |  |  |   lea 12(sp),sp
    6e04:	|  |  |  +--|-- bra.s 6e26 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    6e06:	|  |  |  |  \-> move.l 44(sp),d0
    6e0a:	|  |  |  |      move.l d0,-(sp)
    6e0c:	|  |  |  |      pea 1 <_start+0x1>
    6e10:	|  |  |  |      lea 20(sp),a0
    6e14:	|  |  |  |      move.l a0,-(sp)
    6e16:	|  |  |  |      jsr 11a02 <getValueType>
    6e1c:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    6e20:	|  |  |  |      moveq #1,d0
    6e22:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    6e26:	|  |  |  \----> move.l 60(sp),-(sp)
    6e2a:	|  |  |         jsr 12386 <trimStack>
    6e30:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    6e32:	|  |  |         movea.l 28(sp),a0
    6e36:	|  |  |         movea.l 4(a0),a0
    6e3a:	|  |  |         move.l 48(sp),d1
    6e3e:	|  |  |         move.l d1,d0
    6e40:	|  |  |         add.l d0,d0
    6e42:	|  |  |         add.l d1,d0
    6e44:	|  |  |         add.l d0,d0
    6e46:	|  |  |         add.l d0,d0
    6e48:	|  |  |         adda.l d0,a0
    6e4a:	|  |  |         move.l 12(sp),d0
    6e4e:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    6e50:	|  |  |         movea.l 28(sp),a0
    6e54:	|  |  |         movea.l 4(a0),a0
    6e58:	|  |  |         move.l 48(sp),d1
    6e5c:	|  |  |         move.l d1,d0
    6e5e:	|  |  |         add.l d0,d0
    6e60:	|  |  |         add.l d1,d0
    6e62:	|  |  |         add.l d0,d0
    6e64:	|  |  |         add.l d0,d0
    6e66:	|  |  |         adda.l d0,a0
    6e68:	|  |  |         move.l 8(sp),d0
    6e6c:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    6e70:	|  |  |         movea.l 60(sp),a0
    6e74:	|  |  |         move.l (a0),44(sp)
	while (a) {
    6e78:	|  |  \-------> tst.l 48(sp)
    6e7c:	|  \----------- bne.w 6d28 <createPersonaAnim+0xbc>
	}

	return newP;
    6e80:	|               move.l 28(sp),d0
}
    6e84:	\-------------> move.l (sp)+,d2
    6e86:	                movea.l (sp)+,a6
    6e88:	                lea 44(sp),sp
    6e8c:	                rts

00006e8e <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    6e8e:	       subq.l #8,sp
    6e90:	       move.l a6,-(sp)

	if (orig)
    6e92:	       tst.l 16(sp)
    6e96:	/----- beq.s 6ed6 <deleteAnim+0x48>
	{
		if (orig -> numFrames) {
    6e98:	|      movea.l 16(sp),a0
    6e9c:	|      move.l 8(a0),d0
    6ea0:	|  /-- beq.s 6ebc <deleteAnim+0x2e>
			FreeVec( orig->frames);
    6ea2:	|  |   movea.l 16(sp),a0
    6ea6:	|  |   move.l 4(a0),8(sp)
    6eac:	|  |   move.l 18bc0 <SysBase>,d0
    6eb2:	|  |   movea.l d0,a6
    6eb4:	|  |   movea.l 8(sp),a1
    6eb8:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    6ebc:	|  \-> move.l 16(sp),4(sp)
    6ec2:	|      move.l 18bc0 <SysBase>,d0
    6ec8:	|      movea.l d0,a6
    6eca:	|      movea.l 4(sp),a1
    6ece:	|      jsr -690(a6)
		orig = NULL;
    6ed2:	|      clr.l 16(sp)
	}
}
    6ed6:	\----> nop
    6ed8:	       movea.l (sp)+,a6
    6eda:	       addq.l #8,sp
    6edc:	       rts

00006ede <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    6ede:	          lea -124(sp),sp
    6ee2:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    6ee6:	          movea.l 152(sp),a0
    6eea:	          move.l 44(a0),d1
    6eee:	          movea.l 152(sp),a0
    6ef2:	          move.l 48(a0),d0
    6ef6:	          cmp.l d1,d0
    6ef8:	      /-- bne.s 6f28 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    6efa:	      |   movea.l 152(sp),a0
    6efe:	      |   moveq #-1,d0
    6f00:	      |   move.l d0,44(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    6f04:	      |   movea.l 152(sp),a0
    6f08:	      |   move.l 28(a0),d0
    6f0c:	      |   movea.l 152(sp),a0
    6f10:	      |   move.l d0,36(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    6f14:	      |   movea.l 152(sp),a0
    6f18:	      |   move.l 32(a0),d0
    6f1c:	      |   movea.l 152(sp),a0
    6f20:	      |   move.l d0,40(a0)
    6f24:	   /--|-- bra.w 748e <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    6f28:	   |  \-> movea.l 18d20 <currentFloor>,a0
    6f2e:	   |      move.l 16(a0),d1
    6f32:	   |      movea.l 152(sp),a0
    6f36:	   |      move.l 44(a0),d0
    6f3a:	   |      add.l d0,d0
    6f3c:	   |      add.l d0,d0
    6f3e:	   |      movea.l d1,a0
    6f40:	   |      adda.l d0,a0
    6f42:	   |      move.l (a0),d1
    6f44:	   |      movea.l 152(sp),a0
    6f48:	   |      move.l 48(a0),d0
    6f4c:	   |      add.l d0,d0
    6f4e:	   |      add.l d0,d0
    6f50:	   |      movea.l d1,a0
    6f52:	   |      adda.l d0,a0
    6f54:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    6f58:	   |      moveq #-1,d0
    6f5a:	   |      cmp.l 144(sp),d0
    6f5e:	   |  /-- bne.s 6f66 <doBorderStuff+0x88>
    6f60:	   |  |   clr.w d0
    6f62:	/--|--|-- bra.w 758e <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    6f66:	|  |  \-> movea.l 18d20 <currentFloor>,a0
    6f6c:	|  |      move.l 12(a0),d1
    6f70:	|  |      move.l 144(sp),d0
    6f74:	|  |      lsl.l #3,d0
    6f76:	|  |      add.l d0,d1
    6f78:	|  |      movea.l 18d20 <currentFloor>,a0
    6f7e:	|  |      movea.l 12(a0),a1
    6f82:	|  |      movea.l 152(sp),a0
    6f86:	|  |      move.l 44(a0),d0
    6f8a:	|  |      lsl.l #3,d0
    6f8c:	|  |      add.l a1,d0
    6f8e:	|  |      lea 40(sp),a0
    6f92:	|  |      move.l a0,-(sp)
    6f94:	|  |      lea 48(sp),a0
    6f98:	|  |      move.l a0,-(sp)
    6f9a:	|  |      move.l d1,-(sp)
    6f9c:	|  |      move.l d0,-(sp)
    6f9e:	|  |      jsr 12ccc <getMatchingCorners>
    6fa4:	|  |      lea 16(sp),sp
    6fa8:	|  |      tst.w d0
    6faa:	|  |  /-- bne.s 6fc0 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    6fac:	|  |  |   pea 1545f <custom.c.36a9b171+0x865>
    6fb2:	|  |  |   jsr 13a4a <KPrintF>
    6fb8:	|  |  |   addq.l #4,sp
            return FALSE;
    6fba:	|  |  |   clr.w d0
    6fbc:	+--|--|-- bra.w 758e <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    6fc0:	|  |  \-> movea.l 152(sp),a0
    6fc4:	|  |      move.l 144(sp),44(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    6fca:	|  |      movea.l 152(sp),a0
    6fce:	|  |      move.l (a0),d0
    6fd0:	|  |      move.l d0,-(sp)
    6fd2:	|  |      jsr 13c9a <__fixsfsi>
    6fd8:	|  |      addq.l #4,sp
    6fda:	|  |      move.l d0,140(sp)
    6fde:	|  |      movea.l 152(sp),a0
    6fe2:	|  |      move.l 4(a0),d0
    6fe6:	|  |      move.l d0,-(sp)
    6fe8:	|  |      jsr 13c9a <__fixsfsi>
    6fee:	|  |      addq.l #4,sp
    6ff0:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    6ff4:	|  |      movea.l 152(sp),a0
    6ff8:	|  |      move.l 28(a0),132(sp)
    6ffe:	|  |      movea.l 152(sp),a0
    7002:	|  |      move.l 32(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    7008:	|  |      movea.l 18d20 <currentFloor>,a0
    700e:	|  |      move.l 4(a0),d1
    7012:	|  |      move.l 44(sp),d0
    7016:	|  |      lsl.l #3,d0
    7018:	|  |      movea.l d1,a0
    701a:	|  |      adda.l d0,a0
    701c:	|  |      move.l (a0),124(sp)
    7020:	|  |      movea.l 18d20 <currentFloor>,a0
    7026:	|  |      move.l 4(a0),d1
    702a:	|  |      move.l 44(sp),d0
    702e:	|  |      lsl.l #3,d0
    7030:	|  |      movea.l d1,a0
    7032:	|  |      adda.l d0,a0
    7034:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    703a:	|  |      movea.l 18d20 <currentFloor>,a0
    7040:	|  |      move.l 4(a0),d1
    7044:	|  |      move.l 40(sp),d0
    7048:	|  |      lsl.l #3,d0
    704a:	|  |      movea.l d1,a0
    704c:	|  |      adda.l d0,a0
    704e:	|  |      move.l (a0),116(sp)
    7052:	|  |      movea.l 18d20 <currentFloor>,a0
    7058:	|  |      move.l 4(a0),d1
    705c:	|  |      move.l 40(sp),d0
    7060:	|  |      lsl.l #3,d0
    7062:	|  |      movea.l d1,a0
    7064:	|  |      adda.l d0,a0
    7066:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    706c:	|  |      move.l 140(sp),d0
    7070:	|  |      sub.l 132(sp),d0
    7074:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    7078:	|  |      move.l 136(sp),d0
    707c:	|  |      sub.l 128(sp),d0
    7080:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    7084:	|  |      move.l 116(sp),d0
    7088:	|  |      sub.l 124(sp),d0
    708c:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    7090:	|  |      move.l 112(sp),d0
    7094:	|  |      sub.l 120(sp),d0
    7098:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    709c:	|  |      move.l 124(sp),d0
    70a0:	|  |      sub.l 140(sp),d0
    70a4:	|  |      move.l 104(sp),-(sp)
    70a8:	|  |      move.l d0,-(sp)
    70aa:	|  |      jsr 14284 <__mulsi3>
    70b0:	|  |      addq.l #8,sp
    70b2:	|  |      move.l d0,d2
    70b4:	|  |      move.l 120(sp),d0
    70b8:	|  |      sub.l 136(sp),d0
    70bc:	|  |      move.l 108(sp),-(sp)
    70c0:	|  |      move.l d0,-(sp)
    70c2:	|  |      jsr 14284 <__mulsi3>
    70c8:	|  |      addq.l #8,sp
    70ca:	|  |      move.l d2,d1
    70cc:	|  |      sub.l d0,d1
    70ce:	|  |      move.l d1,-(sp)
    70d0:	|  |      jsr 13cc2 <__floatsidf>
    70d6:	|  |      addq.l #4,sp
    70d8:	|  |      move.l d0,32(sp)
    70dc:	|  |      move.l d1,36(sp)
    70e0:	|  |      move.l 32(sp),88(sp)
    70e6:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    70ec:	|  |      move.l 96(sp),-(sp)
    70f0:	|  |      move.l 112(sp),-(sp)
    70f4:	|  |      jsr 14284 <__mulsi3>
    70fa:	|  |      addq.l #8,sp
    70fc:	|  |      move.l d0,d2
    70fe:	|  |      move.l 100(sp),-(sp)
    7102:	|  |      move.l 108(sp),-(sp)
    7106:	|  |      jsr 14284 <__mulsi3>
    710c:	|  |      addq.l #8,sp
    710e:	|  |      move.l d2,d1
    7110:	|  |      sub.l d0,d1
    7112:	|  |      move.l d1,-(sp)
    7114:	|  |      jsr 13cc2 <__floatsidf>
    711a:	|  |      addq.l #4,sp
    711c:	|  |      move.l d1,-(sp)
    711e:	|  |      move.l d0,-(sp)
    7120:	|  |      move.l 100(sp),-(sp)
    7124:	|  |      move.l 100(sp),-(sp)
    7128:	|  |      jsr 13b4c <__divdf3>
    712e:	|  |      lea 16(sp),sp
    7132:	|  |      move.l d0,24(sp)
    7136:	|  |      move.l d1,28(sp)
    713a:	|  |      move.l 24(sp),88(sp)
    7140:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    7146:	|  |      clr.l -(sp)
    7148:	|  |      clr.l -(sp)
    714a:	|  |      move.l 100(sp),-(sp)
    714e:	|  |      move.l 100(sp),-(sp)
    7152:	|  |      jsr 13e20 <__gtdf2>
    7158:	|  |      lea 16(sp),sp
    715c:	|  |      tst.l d0
    715e:	|  |  /-- ble.w 7236 <doBorderStuff+0x358>
    7162:	|  |  |   clr.l -(sp)
    7164:	|  |  |   move.l #1072693248,-(sp)
    716a:	|  |  |   move.l 100(sp),-(sp)
    716e:	|  |  |   move.l 100(sp),-(sp)
    7172:	|  |  |   jsr 13eda <__ltdf2>
    7178:	|  |  |   lea 16(sp),sp
    717c:	|  |  |   tst.l d0
    717e:	|  |  +-- bge.w 7236 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    7182:	|  |  |   move.l 124(sp),-(sp)
    7186:	|  |  |   jsr 13cc2 <__floatsidf>
    718c:	|  |  |   addq.l #4,sp
    718e:	|  |  |   move.l d0,d2
    7190:	|  |  |   move.l d1,d3
    7192:	|  |  |   move.l 100(sp),-(sp)
    7196:	|  |  |   jsr 13cc2 <__floatsidf>
    719c:	|  |  |   addq.l #4,sp
    719e:	|  |  |   move.l 92(sp),-(sp)
    71a2:	|  |  |   move.l 92(sp),-(sp)
    71a6:	|  |  |   move.l d1,-(sp)
    71a8:	|  |  |   move.l d0,-(sp)
    71aa:	|  |  |   jsr 13d52 <__muldf3>
    71b0:	|  |  |   lea 16(sp),sp
    71b4:	|  |  |   move.l d1,-(sp)
    71b6:	|  |  |   move.l d0,-(sp)
    71b8:	|  |  |   move.l d3,-(sp)
    71ba:	|  |  |   move.l d2,-(sp)
    71bc:	|  |  |   jsr 13aea <__adddf3>
    71c2:	|  |  |   lea 16(sp),sp
    71c6:	|  |  |   move.l d1,-(sp)
    71c8:	|  |  |   move.l d0,-(sp)
    71ca:	|  |  |   jsr 13c5a <__fixdfsi>
    71d0:	|  |  |   addq.l #8,sp
    71d2:	|  |  |   movea.l 152(sp),a0
    71d6:	|  |  |   move.l d0,36(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    71da:	|  |  |   move.l 120(sp),-(sp)
    71de:	|  |  |   jsr 13cc2 <__floatsidf>
    71e4:	|  |  |   addq.l #4,sp
    71e6:	|  |  |   move.l d0,d2
    71e8:	|  |  |   move.l d1,d3
    71ea:	|  |  |   move.l 96(sp),-(sp)
    71ee:	|  |  |   jsr 13cc2 <__floatsidf>
    71f4:	|  |  |   addq.l #4,sp
    71f6:	|  |  |   move.l 92(sp),-(sp)
    71fa:	|  |  |   move.l 92(sp),-(sp)
    71fe:	|  |  |   move.l d1,-(sp)
    7200:	|  |  |   move.l d0,-(sp)
    7202:	|  |  |   jsr 13d52 <__muldf3>
    7208:	|  |  |   lea 16(sp),sp
    720c:	|  |  |   move.l d1,-(sp)
    720e:	|  |  |   move.l d0,-(sp)
    7210:	|  |  |   move.l d3,-(sp)
    7212:	|  |  |   move.l d2,-(sp)
    7214:	|  |  |   jsr 13aea <__adddf3>
    721a:	|  |  |   lea 16(sp),sp
    721e:	|  |  |   move.l d1,-(sp)
    7220:	|  |  |   move.l d0,-(sp)
    7222:	|  |  |   jsr 13c5a <__fixdfsi>
    7228:	|  |  |   addq.l #8,sp
    722a:	|  |  |   movea.l 152(sp),a0
    722e:	|  |  |   move.l d0,40(a0)
    7232:	|  +--|-- bra.w 748e <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    7236:	|  |  \-> move.l 140(sp),d0
    723a:	|  |      sub.l 124(sp),d0
    723e:	|  |      move.l d0,84(sp)
    7242:	|  |      move.l 140(sp),d0
    7246:	|  |      sub.l 116(sp),d0
    724a:	|  |      move.l d0,80(sp)
    724e:	|  |      move.l 132(sp),d0
    7252:	|  |      sub.l 124(sp),d0
    7256:	|  |      move.l d0,76(sp)
    725a:	|  |      move.l 132(sp),d0
    725e:	|  |      sub.l 116(sp),d0
    7262:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    7266:	|  |      move.l 136(sp),d0
    726a:	|  |      sub.l 120(sp),d0
    726e:	|  |      move.l d0,68(sp)
    7272:	|  |      move.l 136(sp),d0
    7276:	|  |      sub.l 112(sp),d0
    727a:	|  |      move.l d0,64(sp)
    727e:	|  |      move.l 128(sp),d0
    7282:	|  |      sub.l 120(sp),d0
    7286:	|  |      move.l d0,60(sp)
    728a:	|  |      move.l 128(sp),d0
    728e:	|  |      sub.l 112(sp),d0
    7292:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    7296:	|  |      move.l 84(sp),-(sp)
    729a:	|  |      move.l 88(sp),-(sp)
    729e:	|  |      jsr 14284 <__mulsi3>
    72a4:	|  |      addq.l #8,sp
    72a6:	|  |      move.l d0,84(sp)
    72aa:	|  |      move.l 80(sp),-(sp)
    72ae:	|  |      move.l 84(sp),-(sp)
    72b2:	|  |      jsr 14284 <__mulsi3>
    72b8:	|  |      addq.l #8,sp
    72ba:	|  |      move.l d0,80(sp)
    72be:	|  |      move.l 76(sp),-(sp)
    72c2:	|  |      move.l 80(sp),-(sp)
    72c6:	|  |      jsr 14284 <__mulsi3>
    72cc:	|  |      addq.l #8,sp
    72ce:	|  |      move.l d0,76(sp)
    72d2:	|  |      move.l 72(sp),-(sp)
    72d6:	|  |      move.l 76(sp),-(sp)
    72da:	|  |      jsr 14284 <__mulsi3>
    72e0:	|  |      addq.l #8,sp
    72e2:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    72e6:	|  |      move.l 68(sp),-(sp)
    72ea:	|  |      move.l 72(sp),-(sp)
    72ee:	|  |      jsr 14284 <__mulsi3>
    72f4:	|  |      addq.l #8,sp
    72f6:	|  |      move.l d0,68(sp)
    72fa:	|  |      move.l 64(sp),-(sp)
    72fe:	|  |      move.l 68(sp),-(sp)
    7302:	|  |      jsr 14284 <__mulsi3>
    7308:	|  |      addq.l #8,sp
    730a:	|  |      move.l d0,64(sp)
    730e:	|  |      move.l 60(sp),-(sp)
    7312:	|  |      move.l 64(sp),-(sp)
    7316:	|  |      jsr 14284 <__mulsi3>
    731c:	|  |      addq.l #8,sp
    731e:	|  |      move.l d0,60(sp)
    7322:	|  |      move.l 56(sp),-(sp)
    7326:	|  |      move.l 60(sp),-(sp)
    732a:	|  |      jsr 14284 <__mulsi3>
    7330:	|  |      addq.l #8,sp
    7332:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    7336:	|  |      move.l 84(sp),-(sp)
    733a:	|  |      jsr 13cc2 <__floatsidf>
    7340:	|  |      addq.l #4,sp
    7342:	|  |      move.l d0,d2
    7344:	|  |      move.l d1,d3
    7346:	|  |      move.l 68(sp),-(sp)
    734a:	|  |      jsr 13cc2 <__floatsidf>
    7350:	|  |      addq.l #4,sp
    7352:	|  |      move.l d1,-(sp)
    7354:	|  |      move.l d0,-(sp)
    7356:	|  |      move.l d3,-(sp)
    7358:	|  |      move.l d2,-(sp)
    735a:	|  |      jsr 13aea <__adddf3>
    7360:	|  |      lea 16(sp),sp
    7364:	|  |      move.l d1,-(sp)
    7366:	|  |      move.l d0,-(sp)
    7368:	|  |      jsr 1423a <sqrt>
    736e:	|  |      addq.l #8,sp
    7370:	|  |      move.l d0,d2
    7372:	|  |      move.l d1,d3
    7374:	|  |      move.l 76(sp),-(sp)
    7378:	|  |      jsr 13cc2 <__floatsidf>
    737e:	|  |      addq.l #4,sp
    7380:	|  |      move.l d0,d4
    7382:	|  |      move.l d1,d5
    7384:	|  |      move.l 60(sp),-(sp)
    7388:	|  |      jsr 13cc2 <__floatsidf>
    738e:	|  |      addq.l #4,sp
    7390:	|  |      move.l d1,-(sp)
    7392:	|  |      move.l d0,-(sp)
    7394:	|  |      move.l d5,-(sp)
    7396:	|  |      move.l d4,-(sp)
    7398:	|  |      jsr 13aea <__adddf3>
    739e:	|  |      lea 16(sp),sp
    73a2:	|  |      move.l d1,-(sp)
    73a4:	|  |      move.l d0,-(sp)
    73a6:	|  |      jsr 1423a <sqrt>
    73ac:	|  |      addq.l #8,sp
    73ae:	|  |      move.l d1,-(sp)
    73b0:	|  |      move.l d0,-(sp)
    73b2:	|  |      move.l d3,-(sp)
    73b4:	|  |      move.l d2,-(sp)
    73b6:	|  |      jsr 13aea <__adddf3>
    73bc:	|  |      lea 16(sp),sp
    73c0:	|  |      move.l d0,d2
    73c2:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    73c4:	|  |      move.l 80(sp),-(sp)
    73c8:	|  |      jsr 13cc2 <__floatsidf>
    73ce:	|  |      addq.l #4,sp
    73d0:	|  |      move.l d0,d4
    73d2:	|  |      move.l d1,d5
    73d4:	|  |      move.l 64(sp),-(sp)
    73d8:	|  |      jsr 13cc2 <__floatsidf>
    73de:	|  |      addq.l #4,sp
    73e0:	|  |      move.l d1,-(sp)
    73e2:	|  |      move.l d0,-(sp)
    73e4:	|  |      move.l d5,-(sp)
    73e6:	|  |      move.l d4,-(sp)
    73e8:	|  |      jsr 13aea <__adddf3>
    73ee:	|  |      lea 16(sp),sp
    73f2:	|  |      move.l d1,-(sp)
    73f4:	|  |      move.l d0,-(sp)
    73f6:	|  |      jsr 1423a <sqrt>
    73fc:	|  |      addq.l #8,sp
    73fe:	|  |      move.l d0,d4
    7400:	|  |      move.l d1,d5
    7402:	|  |      move.l 72(sp),-(sp)
    7406:	|  |      jsr 13cc2 <__floatsidf>
    740c:	|  |      addq.l #4,sp
    740e:	|  |      move.l d0,d6
    7410:	|  |      move.l d1,d7
    7412:	|  |      move.l 56(sp),-(sp)
    7416:	|  |      jsr 13cc2 <__floatsidf>
    741c:	|  |      addq.l #4,sp
    741e:	|  |      move.l d1,-(sp)
    7420:	|  |      move.l d0,-(sp)
    7422:	|  |      move.l d7,-(sp)
    7424:	|  |      move.l d6,-(sp)
    7426:	|  |      jsr 13aea <__adddf3>
    742c:	|  |      lea 16(sp),sp
    7430:	|  |      move.l d1,-(sp)
    7432:	|  |      move.l d0,-(sp)
    7434:	|  |      jsr 1423a <sqrt>
    743a:	|  |      addq.l #8,sp
    743c:	|  |      move.l d1,-(sp)
    743e:	|  |      move.l d0,-(sp)
    7440:	|  |      move.l d5,-(sp)
    7442:	|  |      move.l d4,-(sp)
    7444:	|  |      jsr 13aea <__adddf3>
    744a:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    744e:	|  |      move.l d1,-(sp)
    7450:	|  |      move.l d0,-(sp)
    7452:	|  |      move.l d3,-(sp)
    7454:	|  |      move.l d2,-(sp)
    7456:	|  |      jsr 13eda <__ltdf2>
    745c:	|  |      lea 16(sp),sp
    7460:	|  |      tst.l d0
    7462:	|  |  /-- bge.s 747a <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    7464:	|  |  |   movea.l 152(sp),a0
    7468:	|  |  |   move.l 124(sp),36(a0)
                moveMe -> thisStepY = y3;
    746e:	|  |  |   movea.l 152(sp),a0
    7472:	|  |  |   move.l 120(sp),40(a0)
    7478:	|  +--|-- bra.s 748e <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    747a:	|  |  \-> movea.l 152(sp),a0
    747e:	|  |      move.l 116(sp),36(a0)
                moveMe -> thisStepY = y4;
    7484:	|  |      movea.l 152(sp),a0
    7488:	|  |      move.l 112(sp),40(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    748e:	|  \----> movea.l 152(sp),a0
    7492:	|         move.l 40(a0),d0
    7496:	|         move.l d0,-(sp)
    7498:	|         jsr 13d02 <__floatsisf>
    749e:	|         addq.l #4,sp
    74a0:	|         move.l d0,d1
    74a2:	|         movea.l 152(sp),a0
    74a6:	|         move.l 4(a0),d0
    74aa:	|         move.l d0,-(sp)
    74ac:	|         move.l d1,-(sp)
    74ae:	|         jsr 13ff6 <__subsf3>
    74b4:	|         addq.l #8,sp
    74b6:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    74ba:	|         movea.l 152(sp),a0
    74be:	|         move.l (a0),d2
    74c0:	|         movea.l 152(sp),a0
    74c4:	|         move.l 36(a0),d0
    74c8:	|         move.l d0,-(sp)
    74ca:	|         jsr 13d02 <__floatsisf>
    74d0:	|         addq.l #4,sp
    74d2:	|         move.l d0,-(sp)
    74d4:	|         move.l d2,-(sp)
    74d6:	|         jsr 13ff6 <__subsf3>
    74dc:	|         addq.l #8,sp
    74de:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    74e2:	|         clr.l -(sp)
    74e4:	|         move.l 52(sp),-(sp)
    74e8:	|         jsr 13f5e <__nesf2>
    74ee:	|         addq.l #8,sp
    74f0:	|         tst.l d0
    74f2:	|     /-- bne.s 7506 <doBorderStuff+0x628>
    74f4:	|     |   clr.l -(sp)
    74f6:	|     |   move.l 56(sp),-(sp)
    74fa:	|     |   jsr 13f5e <__nesf2>
    7500:	|     |   addq.l #8,sp
    7502:	|     |   tst.l d0
    7504:	|  /--|-- beq.s 757c <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    7506:	|  |  \-> move.l 52(sp),d0
    750a:	|  |      move.l d0,-(sp)
    750c:	|  |      move.l d0,-(sp)
    750e:	|  |      jsr 13ab4 <__addsf3>
    7514:	|  |      addq.l #8,sp
    7516:	|  |      move.l d0,-(sp)
    7518:	|  |      move.l 52(sp),-(sp)
    751c:	|  |      jsr 1408a <atan2f>
    7522:	|  |      addq.l #8,sp
    7524:	|  |      move.l d0,-(sp)
    7526:	|  |      jsr 13c1a <__extendsfdf2>
    752c:	|  |      addq.l #4,sp
    752e:	|  |      move.l #-1540411785,-(sp)
    7534:	|  |      move.l #1078765033,-(sp)
    753a:	|  |      move.l d1,-(sp)
    753c:	|  |      move.l d0,-(sp)
    753e:	|  |      jsr 13d52 <__muldf3>
    7544:	|  |      lea 16(sp),sp
    7548:	|  |      clr.l -(sp)
    754a:	|  |      move.l #1080459264,-(sp)
    7550:	|  |      move.l d1,-(sp)
    7552:	|  |      move.l d0,-(sp)
    7554:	|  |      jsr 13aea <__adddf3>
    755a:	|  |      lea 16(sp),sp
    755e:	|  |      move.l d1,-(sp)
    7560:	|  |      move.l d0,-(sp)
    7562:	|  |      jsr 13c5a <__fixdfsi>
    7568:	|  |      addq.l #8,sp
    756a:	|  |      movea.l 152(sp),a0
    756e:	|  |      move.l d0,84(a0)
        moveMe -> spinning = TRUE;
    7572:	|  |      movea.l 152(sp),a0
    7576:	|  |      move.w #1,54(a0)
    }

    setFrames (moveMe, ANI_WALK);
    757c:	|  \----> pea 1 <_start+0x1>
    7580:	|         move.l 156(sp),-(sp)
    7584:	|         jsr 593c <setFrames>
    758a:	|         addq.l #8,sp
    return TRUE;
    758c:	|         moveq #1,d0
}
    758e:	\-------> movem.l (sp)+,d2-d7
    7592:	          lea 124(sp),sp
    7596:	          rts

00007598 <drawPeople>:

void drawPeople () {
    7598:	                lea -24(sp),sp
    759c:	                move.l d2,-(sp)
	shufflePeople ();
    759e:	                jsr 8f60 <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    75a4:	                move.l 18c78 <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    75ac:	                clr.l 20(sp)
	overRegion = NULL;
    75b0:	                clr.l 18d1c <overRegion>

	while (thisPerson) {
    75b6:	   /----------- bra.w 7ad8 <drawPeople+0x540>
		if (thisPerson -> show) {
    75ba:	/--|----------> movea.l 24(sp),a0
    75be:	|  |            move.w 92(a0),d0
    75c2:	|  |  /-------- beq.w 788c <drawPeople+0x2f4>
			myAnim = thisPerson -> myAnim;
    75c6:	|  |  |         movea.l 24(sp),a0
    75ca:	|  |  |         move.l 60(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    75d0:	|  |  |         movea.l 24(sp),a0
    75d4:	|  |  |         move.l 64(a0),d0
    75d8:	|  |  |         cmp.l 20(sp),d0
    75dc:	|  |  |  /----- beq.w 77a0 <drawPeople+0x208>
				thisPerson -> lastUsedAnim = myAnim;
    75e0:	|  |  |  |      movea.l 24(sp),a0
    75e4:	|  |  |  |      move.l 20(sp),64(a0)
				thisPerson -> frameNum = 0;
    75ea:	|  |  |  |      movea.l 24(sp),a0
    75ee:	|  |  |  |      clr.l 72(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    75f2:	|  |  |  |      movea.l 20(sp),a0
    75f6:	|  |  |  |      movea.l 4(a0),a0
    75fa:	|  |  |  |      move.l 4(a0),d0
    75fe:	|  |  |  |      movea.l 24(sp),a0
    7602:	|  |  |  |      move.l d0,76(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    7606:	|  |  |  |      movea.l 20(sp),a0
    760a:	|  |  |  |      movea.l 4(a0),a1
    760e:	|  |  |  |      movea.l 24(sp),a0
    7612:	|  |  |  |      move.l 72(a0),d0
    7616:	|  |  |  |      move.l d0,d1
    7618:	|  |  |  |      move.l d1,d0
    761a:	|  |  |  |      add.l d0,d0
    761c:	|  |  |  |      add.l d1,d0
    761e:	|  |  |  |      add.l d0,d0
    7620:	|  |  |  |      add.l d0,d0
    7622:	|  |  |  |      lea (0,a1,d0.l),a0
    7626:	|  |  |  |      move.l 8(a0),d0
    762a:	|  |  |  |  /-- ble.w 76cc <drawPeople+0x134>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    762e:	|  |  |  |  |   movea.l 20(sp),a0
    7632:	|  |  |  |  |   movea.l 4(a0),a1
    7636:	|  |  |  |  |   movea.l 24(sp),a0
    763a:	|  |  |  |  |   move.l 72(a0),d0
    763e:	|  |  |  |  |   move.l d0,d1
    7640:	|  |  |  |  |   move.l d1,d0
    7642:	|  |  |  |  |   add.l d0,d0
    7644:	|  |  |  |  |   add.l d1,d0
    7646:	|  |  |  |  |   add.l d0,d0
    7648:	|  |  |  |  |   add.l d0,d0
    764a:	|  |  |  |  |   lea (0,a1,d0.l),a0
    764e:	|  |  |  |  |   move.l 8(a0),d0
    7652:	|  |  |  |  |   clr.l -(sp)
    7654:	|  |  |  |  |   move.l d0,-(sp)
    7656:	|  |  |  |  |   jsr a50e <startSound>
    765c:	|  |  |  |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    765e:	|  |  |  |  |   movea.l 24(sp),a0
    7662:	|  |  |  |  |   move.l 72(a0),d0
    7666:	|  |  |  |  |   addq.l #1,d0
    7668:	|  |  |  |  |   movea.l 24(sp),a0
    766c:	|  |  |  |  |   move.l d0,72(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    7670:	|  |  |  |  |   movea.l 24(sp),a0
    7674:	|  |  |  |  |   move.l 72(a0),d0
    7678:	|  |  |  |  |   movea.l 24(sp),a0
    767c:	|  |  |  |  |   movea.l 60(a0),a0
    7680:	|  |  |  |  |   move.l 8(a0),d1
    7684:	|  |  |  |  |   move.l d1,-(sp)
    7686:	|  |  |  |  |   move.l d0,-(sp)
    7688:	|  |  |  |  |   jsr 14330 <__modsi3>
    768e:	|  |  |  |  |   addq.l #8,sp
    7690:	|  |  |  |  |   movea.l 24(sp),a0
    7694:	|  |  |  |  |   move.l d0,72(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    7698:	|  |  |  |  |   movea.l 24(sp),a0
    769c:	|  |  |  |  |   movea.l 60(a0),a0
    76a0:	|  |  |  |  |   movea.l 4(a0),a1
    76a4:	|  |  |  |  |   movea.l 24(sp),a0
    76a8:	|  |  |  |  |   move.l 72(a0),d0
    76ac:	|  |  |  |  |   move.l d0,d1
    76ae:	|  |  |  |  |   move.l d1,d0
    76b0:	|  |  |  |  |   add.l d0,d0
    76b2:	|  |  |  |  |   add.l d1,d0
    76b4:	|  |  |  |  |   add.l d0,d0
    76b6:	|  |  |  |  |   add.l d0,d0
    76b8:	|  |  |  |  |   lea (0,a1,d0.l),a0
    76bc:	|  |  |  |  |   move.l 4(a0),d0
    76c0:	|  |  |  |  |   movea.l 24(sp),a0
    76c4:	|  |  |  |  |   move.l d0,76(a0)
    76c8:	|  |  |  +--|-- bra.w 77a0 <drawPeople+0x208>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    76cc:	|  |  |  |  \-> movea.l 20(sp),a0
    76d0:	|  |  |  |      movea.l 4(a0),a1
    76d4:	|  |  |  |      movea.l 24(sp),a0
    76d8:	|  |  |  |      move.l 72(a0),d0
    76dc:	|  |  |  |      move.l d0,d1
    76de:	|  |  |  |      move.l d1,d0
    76e0:	|  |  |  |      add.l d0,d0
    76e2:	|  |  |  |      add.l d1,d0
    76e4:	|  |  |  |      add.l d0,d0
    76e6:	|  |  |  |      add.l d0,d0
    76e8:	|  |  |  |      lea (0,a1,d0.l),a0
    76ec:	|  |  |  |      move.l 8(a0),d0
    76f0:	|  |  |  +----- beq.w 77a0 <drawPeople+0x208>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    76f4:	|  |  |  |      movea.l 18b90 <noStack>,a1
    76fa:	|  |  |  |      movea.l 20(sp),a0
    76fe:	|  |  |  |      move.l 4(a0),d2
    7702:	|  |  |  |      movea.l 24(sp),a0
    7706:	|  |  |  |      move.l 72(a0),d0
    770a:	|  |  |  |      move.l d0,d1
    770c:	|  |  |  |      move.l d1,d0
    770e:	|  |  |  |      add.l d0,d0
    7710:	|  |  |  |      add.l d1,d0
    7712:	|  |  |  |      add.l d0,d0
    7714:	|  |  |  |      add.l d0,d0
    7716:	|  |  |  |      movea.l d2,a0
    7718:	|  |  |  |      adda.l d0,a0
    771a:	|  |  |  |      move.l 8(a0),d0
    771e:	|  |  |  |      neg.l d0
    7720:	|  |  |  |      pea 1 <_start+0x1>
    7724:	|  |  |  |      move.l a1,-(sp)
    7726:	|  |  |  |      clr.l -(sp)
    7728:	|  |  |  |      clr.l -(sp)
    772a:	|  |  |  |      move.l d0,-(sp)
    772c:	|  |  |  |      jsr 42e0 <startNewFunctionNum>
    7732:	|  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    7736:	|  |  |  |      movea.l 24(sp),a0
    773a:	|  |  |  |      move.l 72(a0),d0
    773e:	|  |  |  |      addq.l #1,d0
    7740:	|  |  |  |      movea.l 24(sp),a0
    7744:	|  |  |  |      move.l d0,72(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    7748:	|  |  |  |      movea.l 24(sp),a0
    774c:	|  |  |  |      move.l 72(a0),d0
    7750:	|  |  |  |      movea.l 24(sp),a0
    7754:	|  |  |  |      movea.l 60(a0),a0
    7758:	|  |  |  |      move.l 8(a0),d1
    775c:	|  |  |  |      move.l d1,-(sp)
    775e:	|  |  |  |      move.l d0,-(sp)
    7760:	|  |  |  |      jsr 14330 <__modsi3>
    7766:	|  |  |  |      addq.l #8,sp
    7768:	|  |  |  |      movea.l 24(sp),a0
    776c:	|  |  |  |      move.l d0,72(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    7770:	|  |  |  |      movea.l 24(sp),a0
    7774:	|  |  |  |      movea.l 60(a0),a0
    7778:	|  |  |  |      movea.l 4(a0),a1
    777c:	|  |  |  |      movea.l 24(sp),a0
    7780:	|  |  |  |      move.l 72(a0),d0
    7784:	|  |  |  |      move.l d0,d1
    7786:	|  |  |  |      move.l d1,d0
    7788:	|  |  |  |      add.l d0,d0
    778a:	|  |  |  |      add.l d1,d0
    778c:	|  |  |  |      add.l d0,d0
    778e:	|  |  |  |      add.l d0,d0
    7790:	|  |  |  |      lea (0,a1,d0.l),a0
    7794:	|  |  |  |      move.l 4(a0),d0
    7798:	|  |  |  |      movea.l 24(sp),a0
    779c:	|  |  |  |      move.l d0,76(a0)
				}
			}
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    77a0:	|  |  |  \----> movea.l 20(sp),a0
    77a4:	|  |  |         movea.l 4(a0),a1
    77a8:	|  |  |         movea.l 24(sp),a0
    77ac:	|  |  |         move.l 72(a0),d0
    77b0:	|  |  |         move.l d0,d1
    77b2:	|  |  |         move.l d1,d0
    77b4:	|  |  |         add.l d0,d0
    77b6:	|  |  |         add.l d1,d0
    77b8:	|  |  |         add.l d0,d0
    77ba:	|  |  |         add.l d0,d0
    77bc:	|  |  |         lea (0,a1,d0.l),a0
    77c0:	|  |  |         move.l (a0),8(sp)
			int m = fNumSign < 0;
    77c4:	|  |  |         move.l 8(sp),d0
    77c8:	|  |  |         add.l d0,d0
    77ca:	|  |  |         subx.l d0,d0
    77cc:	|  |  |         neg.l d0
    77ce:	|  |  |         move.b d0,d0
    77d0:	|  |  |         move.b d0,d0
    77d2:	|  |  |         andi.l #255,d0
    77d8:	|  |  |         move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    77dc:	|  |  |         move.l 8(sp),-(sp)
    77e0:	|  |  |         jsr 67b2 <TF_abs>
    77e6:	|  |  |         addq.l #4,sp
    77e8:	|  |  |         move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    77ec:	|  |  |         movea.l 20(sp),a0
    77f0:	|  |  |         movea.l (a0),a0
    77f2:	|  |  |         move.l 8(a0),d0
    77f6:	|  |  |         cmp.l 12(sp),d0
    77fa:	|  |  |     /-- bgt.s 780a <drawPeople+0x272>
				fNum = 0;
    77fc:	|  |  |     |   clr.l 12(sp)
				m = 2 - m;
    7800:	|  |  |     |   moveq #2,d0
    7802:	|  |  |     |   sub.l 16(sp),d0
    7806:	|  |  |     |   move.l d0,16(sp)
			}
			if (m != 2) {
    780a:	|  |  |     \-> moveq #2,d0
    780c:	|  |  |         cmp.l 16(sp),d0
    7810:	|  |  +-------- beq.s 788c <drawPeople+0x2f4>
				BOOL r = FALSE;
    7812:	|  |  |         clr.w 6(sp)
				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    7816:	|  |  |         move.l 16(sp),d0
    781a:	|  |  |         movea.w d0,a0
    781c:	|  |  |         movea.l 20(sp),a1
    7820:	|  |  |         movea.l (a1),a1
    7822:	|  |  |         movea.l 16(a1),a1
    7826:	|  |  |         move.l 12(sp),d1
    782a:	|  |  |         move.l d1,d0
    782c:	|  |  |         lsl.l #3,d0
    782e:	|  |  |         sub.l d1,d0
    7830:	|  |  |         add.l d0,d0
    7832:	|  |  |         add.l d0,d0
    7834:	|  |  |         add.l a1,d0
    7836:	|  |  |         move.l a0,-(sp)
    7838:	|  |  |         move.l 28(sp),-(sp)
    783c:	|  |  |         move.l d0,-(sp)
    783e:	|  |  |         jsr 6758 <scaleSprite>
    7844:	|  |  |         lea 12(sp),sp
    7848:	|  |  |         move.w d0,6(sp)
				if (r) {
    784c:	|  |  +-------- beq.s 788c <drawPeople+0x2f4>
					if (thisPerson -> thisType -> screenName[0]) {
    784e:	|  |  |         movea.l 24(sp),a0
    7852:	|  |  |         movea.l 102(a0),a0
    7856:	|  |  |         movea.l (a0),a0
    7858:	|  |  |         move.b (a0),d0
    785a:	|  |  +-------- beq.s 788c <drawPeople+0x2f4>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    785c:	|  |  |         move.l 18c98 <personRegion+0x1c>,d1
    7862:	|  |  |         movea.l 24(sp),a0
    7866:	|  |  |         move.l 102(a0),d0
    786a:	|  |  |         cmp.l d1,d0
    786c:	|  |  |     /-- beq.s 7874 <drawPeople+0x2dc>
    786e:	|  |  |     |   clr.l 18b88 <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    7874:	|  |  |     \-> movea.l 24(sp),a0
    7878:	|  |  |         move.l 102(a0),d0
    787c:	|  |  |         move.l d0,18c98 <personRegion+0x1c>
						overRegion = & personRegion;
    7882:	|  |  |         move.l #101500,18d1c <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    788c:	|  |  \-------> movea.l 24(sp),a0
    7890:	|  |            move.l 76(a0),d0
    7894:	|  |            subq.l #1,d0
    7896:	|  |            movea.l 24(sp),a0
    789a:	|  |            move.l d0,76(a0)
    789e:	|  |            movea.l 24(sp),a0
    78a2:	|  |            move.l 76(a0),d0
    78a6:	|  |     /----- bne.w 7ace <drawPeople+0x536>
			thisPerson -> frameNum ++;
    78aa:	|  |     |      movea.l 24(sp),a0
    78ae:	|  |     |      move.l 72(a0),d0
    78b2:	|  |     |      addq.l #1,d0
    78b4:	|  |     |      movea.l 24(sp),a0
    78b8:	|  |     |      move.l d0,72(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    78bc:	|  |     |      movea.l 24(sp),a0
    78c0:	|  |     |      move.l 72(a0),d0
    78c4:	|  |     |      movea.l 24(sp),a0
    78c8:	|  |     |      movea.l 60(a0),a0
    78cc:	|  |     |      move.l 8(a0),d1
    78d0:	|  |     |      move.l d1,-(sp)
    78d2:	|  |     |      move.l d0,-(sp)
    78d4:	|  |     |      jsr 14330 <__modsi3>
    78da:	|  |     |      addq.l #8,sp
    78dc:	|  |     |      movea.l 24(sp),a0
    78e0:	|  |     |      move.l d0,72(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    78e4:	|  |     |      movea.l 24(sp),a0
    78e8:	|  |     |      movea.l 60(a0),a0
    78ec:	|  |     |      movea.l 4(a0),a1
    78f0:	|  |     |      movea.l 24(sp),a0
    78f4:	|  |     |      move.l 72(a0),d0
    78f8:	|  |     |      move.l d0,d1
    78fa:	|  |     |      move.l d1,d0
    78fc:	|  |     |      add.l d0,d0
    78fe:	|  |     |      add.l d1,d0
    7900:	|  |     |      add.l d0,d0
    7902:	|  |     |      add.l d0,d0
    7904:	|  |     |      lea (0,a1,d0.l),a0
    7908:	|  |     |      move.l 4(a0),d0
    790c:	|  |     |      movea.l 24(sp),a0
    7910:	|  |     |      move.l d0,76(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    7914:	|  |     |      movea.l 24(sp),a0
    7918:	|  |     |      move.w 92(a0),d0
    791c:	|  |     +----- beq.w 7ace <drawPeople+0x536>
    7920:	|  |     |      tst.l 20(sp)
    7924:	|  |     +----- beq.w 7ace <drawPeople+0x536>
    7928:	|  |     |      movea.l 20(sp),a0
    792c:	|  |     |      move.l 4(a0),d0
    7930:	|  |     +----- beq.w 7ace <drawPeople+0x536>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    7934:	|  |     |      movea.l 20(sp),a0
    7938:	|  |     |      movea.l 4(a0),a1
    793c:	|  |     |      movea.l 24(sp),a0
    7940:	|  |     |      move.l 72(a0),d0
    7944:	|  |     |      move.l d0,d1
    7946:	|  |     |      move.l d1,d0
    7948:	|  |     |      add.l d0,d0
    794a:	|  |     |      add.l d1,d0
    794c:	|  |     |      add.l d0,d0
    794e:	|  |     |      add.l d0,d0
    7950:	|  |     |      lea (0,a1,d0.l),a0
    7954:	|  |     |      move.l 8(a0),d0
    7958:	|  |     |  /-- ble.w 79fa <drawPeople+0x462>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    795c:	|  |     |  |   movea.l 20(sp),a0
    7960:	|  |     |  |   movea.l 4(a0),a1
    7964:	|  |     |  |   movea.l 24(sp),a0
    7968:	|  |     |  |   move.l 72(a0),d0
    796c:	|  |     |  |   move.l d0,d1
    796e:	|  |     |  |   move.l d1,d0
    7970:	|  |     |  |   add.l d0,d0
    7972:	|  |     |  |   add.l d1,d0
    7974:	|  |     |  |   add.l d0,d0
    7976:	|  |     |  |   add.l d0,d0
    7978:	|  |     |  |   lea (0,a1,d0.l),a0
    797c:	|  |     |  |   move.l 8(a0),d0
    7980:	|  |     |  |   clr.l -(sp)
    7982:	|  |     |  |   move.l d0,-(sp)
    7984:	|  |     |  |   jsr a50e <startSound>
    798a:	|  |     |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    798c:	|  |     |  |   movea.l 24(sp),a0
    7990:	|  |     |  |   move.l 72(a0),d0
    7994:	|  |     |  |   addq.l #1,d0
    7996:	|  |     |  |   movea.l 24(sp),a0
    799a:	|  |     |  |   move.l d0,72(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    799e:	|  |     |  |   movea.l 24(sp),a0
    79a2:	|  |     |  |   move.l 72(a0),d0
    79a6:	|  |     |  |   movea.l 24(sp),a0
    79aa:	|  |     |  |   movea.l 60(a0),a0
    79ae:	|  |     |  |   move.l 8(a0),d1
    79b2:	|  |     |  |   move.l d1,-(sp)
    79b4:	|  |     |  |   move.l d0,-(sp)
    79b6:	|  |     |  |   jsr 14330 <__modsi3>
    79bc:	|  |     |  |   addq.l #8,sp
    79be:	|  |     |  |   movea.l 24(sp),a0
    79c2:	|  |     |  |   move.l d0,72(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    79c6:	|  |     |  |   movea.l 24(sp),a0
    79ca:	|  |     |  |   movea.l 60(a0),a0
    79ce:	|  |     |  |   movea.l 4(a0),a1
    79d2:	|  |     |  |   movea.l 24(sp),a0
    79d6:	|  |     |  |   move.l 72(a0),d0
    79da:	|  |     |  |   move.l d0,d1
    79dc:	|  |     |  |   move.l d1,d0
    79de:	|  |     |  |   add.l d0,d0
    79e0:	|  |     |  |   add.l d1,d0
    79e2:	|  |     |  |   add.l d0,d0
    79e4:	|  |     |  |   add.l d0,d0
    79e6:	|  |     |  |   lea (0,a1,d0.l),a0
    79ea:	|  |     |  |   move.l 4(a0),d0
    79ee:	|  |     |  |   movea.l 24(sp),a0
    79f2:	|  |     |  |   move.l d0,76(a0)
    79f6:	|  |     +--|-- bra.w 7ace <drawPeople+0x536>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    79fa:	|  |     |  \-> movea.l 20(sp),a0
    79fe:	|  |     |      movea.l 4(a0),a1
    7a02:	|  |     |      movea.l 24(sp),a0
    7a06:	|  |     |      move.l 72(a0),d0
    7a0a:	|  |     |      move.l d0,d1
    7a0c:	|  |     |      move.l d1,d0
    7a0e:	|  |     |      add.l d0,d0
    7a10:	|  |     |      add.l d1,d0
    7a12:	|  |     |      add.l d0,d0
    7a14:	|  |     |      add.l d0,d0
    7a16:	|  |     |      lea (0,a1,d0.l),a0
    7a1a:	|  |     |      move.l 8(a0),d0
    7a1e:	|  |     +----- beq.w 7ace <drawPeople+0x536>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    7a22:	|  |     |      movea.l 18b90 <noStack>,a1
    7a28:	|  |     |      movea.l 20(sp),a0
    7a2c:	|  |     |      move.l 4(a0),d2
    7a30:	|  |     |      movea.l 24(sp),a0
    7a34:	|  |     |      move.l 72(a0),d0
    7a38:	|  |     |      move.l d0,d1
    7a3a:	|  |     |      move.l d1,d0
    7a3c:	|  |     |      add.l d0,d0
    7a3e:	|  |     |      add.l d1,d0
    7a40:	|  |     |      add.l d0,d0
    7a42:	|  |     |      add.l d0,d0
    7a44:	|  |     |      movea.l d2,a0
    7a46:	|  |     |      adda.l d0,a0
    7a48:	|  |     |      move.l 8(a0),d0
    7a4c:	|  |     |      neg.l d0
    7a4e:	|  |     |      pea 1 <_start+0x1>
    7a52:	|  |     |      move.l a1,-(sp)
    7a54:	|  |     |      clr.l -(sp)
    7a56:	|  |     |      clr.l -(sp)
    7a58:	|  |     |      move.l d0,-(sp)
    7a5a:	|  |     |      jsr 42e0 <startNewFunctionNum>
    7a60:	|  |     |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    7a64:	|  |     |      movea.l 24(sp),a0
    7a68:	|  |     |      move.l 72(a0),d0
    7a6c:	|  |     |      addq.l #1,d0
    7a6e:	|  |     |      movea.l 24(sp),a0
    7a72:	|  |     |      move.l d0,72(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    7a76:	|  |     |      movea.l 24(sp),a0
    7a7a:	|  |     |      move.l 72(a0),d0
    7a7e:	|  |     |      movea.l 24(sp),a0
    7a82:	|  |     |      movea.l 60(a0),a0
    7a86:	|  |     |      move.l 8(a0),d1
    7a8a:	|  |     |      move.l d1,-(sp)
    7a8c:	|  |     |      move.l d0,-(sp)
    7a8e:	|  |     |      jsr 14330 <__modsi3>
    7a94:	|  |     |      addq.l #8,sp
    7a96:	|  |     |      movea.l 24(sp),a0
    7a9a:	|  |     |      move.l d0,72(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    7a9e:	|  |     |      movea.l 24(sp),a0
    7aa2:	|  |     |      movea.l 60(a0),a0
    7aa6:	|  |     |      movea.l 4(a0),a1
    7aaa:	|  |     |      movea.l 24(sp),a0
    7aae:	|  |     |      move.l 72(a0),d0
    7ab2:	|  |     |      move.l d0,d1
    7ab4:	|  |     |      move.l d1,d0
    7ab6:	|  |     |      add.l d0,d0
    7ab8:	|  |     |      add.l d1,d0
    7aba:	|  |     |      add.l d0,d0
    7abc:	|  |     |      add.l d0,d0
    7abe:	|  |     |      lea (0,a1,d0.l),a0
    7ac2:	|  |     |      move.l 4(a0),d0
    7ac6:	|  |     |      movea.l 24(sp),a0
    7aca:	|  |     |      move.l d0,76(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    7ace:	|  |     \----> movea.l 24(sp),a0
    7ad2:	|  |            move.l 24(a0),24(sp)
	while (thisPerson) {
    7ad8:	|  \----------> tst.l 24(sp)
    7adc:	\-------------- bne.w 75ba <drawPeople+0x22>
	}
}
    7ae0:	                nop
    7ae2:	                nop
    7ae4:	                move.l (sp)+,d2
    7ae6:	                lea 24(sp),sp
    7aea:	                rts

00007aec <findPerson>:


struct onScreenPerson * findPerson (int v) {
    7aec:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    7aee:	          move.l 18c78 <allPeople>,(sp)
	while (thisPerson) {
    7af4:	      /-- bra.s 7b0c <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    7af6:	/-----|-> movea.l (sp),a0
    7af8:	|     |   movea.l 102(a0),a0
    7afc:	|     |   move.l 4(a0),d0
    7b00:	|     |   cmp.l 8(sp),d0
    7b04:	|  /--|-- beq.s 7b12 <findPerson+0x26>
		thisPerson = thisPerson -> next;
    7b06:	|  |  |   movea.l (sp),a0
    7b08:	|  |  |   move.l 24(a0),(sp)
	while (thisPerson) {
    7b0c:	|  |  \-> tst.l (sp)
    7b0e:	\--|----- bne.s 7af6 <findPerson+0xa>
    7b10:	   |  /-- bra.s 7b14 <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    7b12:	   \--|-> nop
	}
	return thisPerson;
    7b14:	      \-> move.l (sp),d0
}
    7b16:	          addq.l #4,sp
    7b18:	          rts

00007b1a <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    7b1a:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    7b1c:	       move.l 12(sp),-(sp)
    7b20:	       jsr 7aec <findPerson>
    7b26:	       addq.l #4,sp
    7b28:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    7b2a:	   /-- bne.s 7b30 <floatCharacter+0x16>
    7b2c:	   |   clr.w d0
    7b2e:	/--|-- bra.s 7b3a <floatCharacter+0x20>
	moveMe -> floaty = f;
    7b30:	|  \-> movea.l (sp),a0
    7b32:	|      move.l 8(sp),12(a0)
	return TRUE;
    7b38:	|      moveq #1,d0
}
    7b3a:	\----> addq.l #4,sp
    7b3c:	       rts

00007b3e <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    7b3e:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    7b40:	          tst.l 8(sp)
    7b44:	      /-- bne.s 7b52 <forceWalkingPerson+0x14>
    7b46:	      |   tst.l 12(sp)
    7b4a:	      +-- bne.s 7b52 <forceWalkingPerson+0x14>
    7b4c:	      |   clr.w d0
    7b4e:	/-----|-- bra.w 7be4 <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    7b52:	|     \-> move.l 16(sp),-(sp)
    7b56:	|         jsr 7aec <findPerson>
    7b5c:	|         addq.l #4,sp
    7b5e:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    7b60:	|     /-- bne.s 7b66 <forceWalkingPerson+0x28>
    7b62:	|     |   clr.w d0
    7b64:	+-----|-- bra.s 7be4 <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    7b66:	|     \-> movea.l (sp),a0
    7b68:	|         move.l 56(a0),d0
    7b6c:	|     /-- beq.s 7b7e <forceWalkingPerson+0x40>
    7b6e:	|     |   movea.l (sp),a0
    7b70:	|     |   move.l 56(a0),d0
    7b74:	|     |   move.l d0,-(sp)
    7b76:	|     |   jsr 21b6 <abortFunction>
    7b7c:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    7b7e:	|     \-> movea.l (sp),a0
    7b80:	|         move.w #1,52(a0)
    moveMe->continueAfterWalking = NULL;
    7b86:	|         movea.l (sp),a0
    7b88:	|         clr.l 56(a0)
    moveMe->directionWhenDoneWalking = di;
    7b8c:	|         movea.l (sp),a0
    7b8e:	|         move.l 24(sp),98(a0)

    moveMe->walkToX = x;
    7b94:	|         movea.l (sp),a0
    7b96:	|         move.l 8(sp),28(a0)
    moveMe->walkToY = y;
    7b9c:	|         movea.l (sp),a0
    7b9e:	|         move.l 12(sp),32(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    7ba4:	|         movea.l (sp),a0
    7ba6:	|         clr.l 44(a0)
    moveMe->walkToPoly = 0;
    7baa:	|         movea.l (sp),a0
    7bac:	|         clr.l 48(a0)

    doBorderStuff(moveMe);
    7bb0:	|         move.l (sp),-(sp)
    7bb2:	|         jsr 6ede <doBorderStuff>
    7bb8:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    7bba:	|         pea 1 <_start+0x1>
    7bbe:	|         move.l 4(sp),-(sp)
    7bc2:	|         jsr 936a <walkMe>
    7bc8:	|         addq.l #8,sp
    7bca:	|         tst.w d0
    7bcc:	|     /-- bne.s 7bd6 <forceWalkingPerson+0x98>
    7bce:	|     |   movea.l (sp),a0
    7bd0:	|     |   move.w 54(a0),d0
    7bd4:	|  /--|-- beq.s 7be2 <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    7bd6:	|  |  \-> movea.l (sp),a0
    7bd8:	|  |      move.l 20(sp),56(a0)
        return TRUE;
    7bde:	|  |      moveq #1,d0
    7be0:	+--|----- bra.s 7be4 <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    7be2:	|  \----> clr.w d0
    }
}
    7be4:	\-------> addq.l #4,sp
    7be6:	          rts

00007be8 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    7be8:	                lea -56(sp),sp
    7bec:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    7bee:	                move.l #320,56(sp)
    7bf6:	                move.l #200,52(sp)
    7bfe:	                moveq #-1,d0
    7c00:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    7c04:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    7c0c:	                clr.l 44(sp)
    7c10:	   /----------- bra.w 7de8 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    7c14:	/--|----------> movea.l 18d20 <currentFloor>,a0
    7c1a:	|  |            move.l 12(a0),d1
    7c1e:	|  |            move.l 44(sp),d0
    7c22:	|  |            lsl.l #3,d0
    7c24:	|  |            movea.l d1,a0
    7c26:	|  |            adda.l d0,a0
    7c28:	|  |            move.l (a0),d0
    7c2a:	|  |            move.l d0,d1
    7c2c:	|  |            subq.l #1,d1
    7c2e:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    7c32:	|  |            clr.l 40(sp)
    7c36:	|  |     /----- bra.w 7dc6 <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    7c3a:	|  |  /--|----> movea.l 18d20 <currentFloor>,a0
    7c40:	|  |  |  |      move.l 4(a0),d1
    7c44:	|  |  |  |      movea.l 18d20 <currentFloor>,a0
    7c4a:	|  |  |  |      movea.l 12(a0),a0
    7c4e:	|  |  |  |      move.l 44(sp),d0
    7c52:	|  |  |  |      lsl.l #3,d0
    7c54:	|  |  |  |      adda.l d0,a0
    7c56:	|  |  |  |      movea.l 4(a0),a0
    7c5a:	|  |  |  |      move.l 40(sp),d0
    7c5e:	|  |  |  |      add.l d0,d0
    7c60:	|  |  |  |      add.l d0,d0
    7c62:	|  |  |  |      adda.l d0,a0
    7c64:	|  |  |  |      move.l (a0),d0
    7c66:	|  |  |  |      lsl.l #3,d0
    7c68:	|  |  |  |      movea.l d1,a0
    7c6a:	|  |  |  |      adda.l d0,a0
    7c6c:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    7c70:	|  |  |  |      movea.l 18d20 <currentFloor>,a0
    7c76:	|  |  |  |      move.l 4(a0),d1
    7c7a:	|  |  |  |      movea.l 18d20 <currentFloor>,a0
    7c80:	|  |  |  |      movea.l 12(a0),a0
    7c84:	|  |  |  |      move.l 44(sp),d0
    7c88:	|  |  |  |      lsl.l #3,d0
    7c8a:	|  |  |  |      adda.l d0,a0
    7c8c:	|  |  |  |      movea.l 4(a0),a0
    7c90:	|  |  |  |      move.l 40(sp),d0
    7c94:	|  |  |  |      add.l d0,d0
    7c96:	|  |  |  |      add.l d0,d0
    7c98:	|  |  |  |      adda.l d0,a0
    7c9a:	|  |  |  |      move.l (a0),d0
    7c9c:	|  |  |  |      lsl.l #3,d0
    7c9e:	|  |  |  |      movea.l d1,a0
    7ca0:	|  |  |  |      adda.l d0,a0
    7ca2:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    7ca8:	|  |  |  |      movea.l 18d20 <currentFloor>,a0
    7cae:	|  |  |  |      move.l 4(a0),d1
    7cb2:	|  |  |  |      movea.l 18d20 <currentFloor>,a0
    7cb8:	|  |  |  |      movea.l 12(a0),a0
    7cbc:	|  |  |  |      move.l 44(sp),d0
    7cc0:	|  |  |  |      lsl.l #3,d0
    7cc2:	|  |  |  |      adda.l d0,a0
    7cc4:	|  |  |  |      movea.l 4(a0),a0
    7cc8:	|  |  |  |      move.l 36(sp),d0
    7ccc:	|  |  |  |      add.l d0,d0
    7cce:	|  |  |  |      add.l d0,d0
    7cd0:	|  |  |  |      adda.l d0,a0
    7cd2:	|  |  |  |      move.l (a0),d0
    7cd4:	|  |  |  |      lsl.l #3,d0
    7cd6:	|  |  |  |      movea.l d1,a0
    7cd8:	|  |  |  |      adda.l d0,a0
    7cda:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    7cde:	|  |  |  |      movea.l 18d20 <currentFloor>,a0
    7ce4:	|  |  |  |      move.l 4(a0),d1
    7ce8:	|  |  |  |      movea.l 18d20 <currentFloor>,a0
    7cee:	|  |  |  |      movea.l 12(a0),a0
    7cf2:	|  |  |  |      move.l 44(sp),d0
    7cf6:	|  |  |  |      lsl.l #3,d0
    7cf8:	|  |  |  |      adda.l d0,a0
    7cfa:	|  |  |  |      movea.l 4(a0),a0
    7cfe:	|  |  |  |      move.l 36(sp),d0
    7d02:	|  |  |  |      add.l d0,d0
    7d04:	|  |  |  |      add.l d0,d0
    7d06:	|  |  |  |      adda.l d0,a0
    7d08:	|  |  |  |      move.l (a0),d0
    7d0a:	|  |  |  |      lsl.l #3,d0
    7d0c:	|  |  |  |      movea.l d1,a0
    7d0e:	|  |  |  |      adda.l d0,a0
    7d10:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    7d16:	|  |  |  |      movea.l 68(sp),a0
    7d1a:	|  |  |  |      move.l (a0),d1
    7d1c:	|  |  |  |      movea.l 64(sp),a0
    7d20:	|  |  |  |      move.l (a0),d0
    7d22:	|  |  |  |      move.l d1,-(sp)
    7d24:	|  |  |  |      move.l d0,-(sp)
    7d26:	|  |  |  |      move.l 24(sp),-(sp)
    7d2a:	|  |  |  |      move.l 32(sp),-(sp)
    7d2e:	|  |  |  |      move.l 40(sp),-(sp)
    7d32:	|  |  |  |      move.l 48(sp),-(sp)
    7d36:	|  |  |  |      lea 28(sp),a0
    7d3a:	|  |  |  |      move.l a0,-(sp)
    7d3c:	|  |  |  |      lea 36(sp),a0
    7d40:	|  |  |  |      move.l a0,-(sp)
    7d42:	|  |  |  |      jsr 128aa <closestPointOnLine>
    7d48:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    7d4c:	|  |  |  |      movea.l 64(sp),a0
    7d50:	|  |  |  |      move.l (a0),d0
    7d52:	|  |  |  |      move.l 8(sp),d1
    7d56:	|  |  |  |      move.l d0,d2
    7d58:	|  |  |  |      sub.l d1,d2
    7d5a:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    7d5e:	|  |  |  |      movea.l 68(sp),a0
    7d62:	|  |  |  |      move.l (a0),d0
    7d64:	|  |  |  |      move.l 4(sp),d1
    7d68:	|  |  |  |      move.l d0,d2
    7d6a:	|  |  |  |      sub.l d1,d2
    7d6c:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    7d70:	|  |  |  |      move.l 28(sp),-(sp)
    7d74:	|  |  |  |      move.l 32(sp),-(sp)
    7d78:	|  |  |  |      jsr 14284 <__mulsi3>
    7d7e:	|  |  |  |      addq.l #8,sp
    7d80:	|  |  |  |      move.l d0,d2
    7d82:	|  |  |  |      move.l 24(sp),-(sp)
    7d86:	|  |  |  |      move.l 28(sp),-(sp)
    7d8a:	|  |  |  |      jsr 14284 <__mulsi3>
    7d90:	|  |  |  |      addq.l #8,sp
    7d92:	|  |  |  |      move.l d2,d1
    7d94:	|  |  |  |      add.l d0,d1
    7d96:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    7d9a:	|  |  |  |      move.l 12(sp),d2
    7d9e:	|  |  |  |      cmp.l 32(sp),d2
    7da2:	|  |  |  |  /-- bge.s 7dbc <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    7da4:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    7daa:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    7db0:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    7db6:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    7dbc:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    7dc2:	|  |  |  |      addq.l #1,40(sp)
    7dc6:	|  |  |  \----> movea.l 18d20 <currentFloor>,a0
    7dcc:	|  |  |         move.l 12(a0),d1
    7dd0:	|  |  |         move.l 44(sp),d0
    7dd4:	|  |  |         lsl.l #3,d0
    7dd6:	|  |  |         movea.l d1,a0
    7dd8:	|  |  |         adda.l d0,a0
    7dda:	|  |  |         move.l (a0),d0
    7ddc:	|  |  |         cmp.l 40(sp),d0
    7de0:	|  |  \-------- bgt.w 7c3a <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    7de4:	|  |            addq.l #1,44(sp)
    7de8:	|  \----------> movea.l 18d20 <currentFloor>,a0
    7dee:	|               move.l 8(a0),d0
    7df2:	|               cmp.l 44(sp),d0
    7df6:	\-------------- bgt.w 7c14 <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    7dfa:	                moveq #-1,d0
    7dfc:	                cmp.l 48(sp),d0
    7e00:	            /-- bne.s 7e06 <handleClosestPoint+0x21e>
    7e02:	            |   clr.w d0
    7e04:	         /--|-- bra.s 7e20 <handleClosestPoint+0x238>
	*setX = gotX;
    7e06:	         |  \-> movea.l 64(sp),a0
    7e0a:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    7e0e:	         |      movea.l 68(sp),a0
    7e12:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    7e16:	         |      movea.l 72(sp),a0
    7e1a:	         |      move.l 48(sp),(a0)

	return TRUE;
    7e1e:	         |      moveq #1,d0
}
    7e20:	         \----> move.l (sp)+,d2
    7e22:	                lea 56(sp),sp
    7e26:	                rts

00007e28 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    7e28:	clr.l 18c8c <personRegion+0x10>
	personRegion.sY = 0;
    7e2e:	clr.l 18c90 <personRegion+0x14>
	personRegion.di = -1;
    7e34:	moveq #-1,d0
    7e36:	move.l d0,18c94 <personRegion+0x18>
	allScreenRegions = NULL;
    7e3c:	clr.l 18d18 <allScreenRegions>

	return TRUE;
    7e42:	moveq #1,d0
}
    7e44:	rts

00007e46 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    7e46:	          subq.l #4,sp
    7e48:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    7e4a:	          tst.l 12(sp)
    7e4e:	      /-- bne.s 7e56 <jumpPerson+0x10>
    7e50:	      |   tst.l 16(sp)
    7e54:	/-----|-- beq.s 7eca <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    7e56:	|     \-> move.l 20(sp),-(sp)
    7e5a:	|         jsr 7aec <findPerson>
    7e60:	|         addq.l #4,sp
    7e62:	|         move.l d0,4(sp)
    if (!moveMe) return;
    7e66:	|  /----- beq.s 7ece <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    7e68:	|  |      movea.l 4(sp),a0
    7e6c:	|  |      move.l 56(a0),d0
    7e70:	|  |  /-- beq.s 7e84 <jumpPerson+0x3e>
    7e72:	|  |  |   movea.l 4(sp),a0
    7e76:	|  |  |   move.l 56(a0),d0
    7e7a:	|  |  |   move.l d0,-(sp)
    7e7c:	|  |  |   jsr 21b6 <abortFunction>
    7e82:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    7e84:	|  |  \-> movea.l 4(sp),a0
    7e88:	|  |      clr.l 56(a0)
    moveMe->walking = FALSE;
    7e8c:	|  |      movea.l 4(sp),a0
    7e90:	|  |      clr.w 52(a0)
    moveMe->spinning = FALSE;
    7e94:	|  |      movea.l 4(sp),a0
    7e98:	|  |      clr.w 54(a0)
    moveAndScale(moveMe, x, y);
    7e9c:	|  |      move.l 16(sp),-(sp)
    7ea0:	|  |      jsr 13d02 <__floatsisf>
    7ea6:	|  |      addq.l #4,sp
    7ea8:	|  |      move.l d0,d2
    7eaa:	|  |      move.l 12(sp),-(sp)
    7eae:	|  |      jsr 13d02 <__floatsisf>
    7eb4:	|  |      addq.l #4,sp
    7eb6:	|  |      move.l d2,-(sp)
    7eb8:	|  |      move.l d0,-(sp)
    7eba:	|  |      move.l 12(sp),-(sp)
    7ebe:	|  |      jsr 8234 <moveAndScale>
    7ec4:	|  |      lea 12(sp),sp
    7ec8:	|  |  /-- bra.s 7ed0 <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    7eca:	\--|--|-> nop
    7ecc:	   |  +-- bra.s 7ed0 <jumpPerson+0x8a>
    if (!moveMe) return;
    7ece:	   \--|-> nop
}
    7ed0:	      \-> move.l (sp)+,d2
    7ed2:	          addq.l #4,sp
    7ed4:	          rts

00007ed6 <killAllPeople>:


void killAllPeople () {
    7ed6:	          subq.l #8,sp
    7ed8:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    7eda:	   /----- bra.s 7f46 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    7edc:	/--|----> movea.l 18c78 <allPeople>,a0
    7ee2:	|  |      move.l 56(a0),d0
    7ee6:	|  |  /-- beq.s 7efc <killAllPeople+0x26>
    7ee8:	|  |  |   movea.l 18c78 <allPeople>,a0
    7eee:	|  |  |   move.l 56(a0),d0
    7ef2:	|  |  |   move.l d0,-(sp)
    7ef4:	|  |  |   jsr 21b6 <abortFunction>
    7efa:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    7efc:	|  |  \-> movea.l 18c78 <allPeople>,a0
    7f02:	|  |      clr.l 56(a0)
		killPeople = allPeople;
    7f06:	|  |      move.l 18c78 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    7f0e:	|  |      movea.l 18c78 <allPeople>,a0
    7f14:	|  |      move.l 24(a0),d0
    7f18:	|  |      move.l d0,18c78 <allPeople>
		removeObjectType (killPeople -> thisType);
    7f1e:	|  |      movea.l 8(sp),a0
    7f22:	|  |      move.l 102(a0),d0
    7f26:	|  |      move.l d0,-(sp)
    7f28:	|  |      jsr abe0 <removeObjectType>
    7f2e:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    7f30:	|  |      move.l 8(sp),4(sp)
    7f36:	|  |      move.l 18bc0 <SysBase>,d0
    7f3c:	|  |      movea.l d0,a6
    7f3e:	|  |      movea.l 4(sp),a1
    7f42:	|  |      jsr -690(a6)
	while (allPeople) {
    7f46:	|  \----> move.l 18c78 <allPeople>,d0
    7f4c:	\-------- bne.s 7edc <killAllPeople+0x6>
	}
}
    7f4e:	          nop
    7f50:	          nop
    7f52:	          movea.l (sp)+,a6
    7f54:	          addq.l #8,sp
    7f56:	          rts

00007f58 <killMostPeople>:

void killMostPeople() {
    7f58:	          lea -12(sp),sp
    7f5c:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    7f5e:	          move.l #101496,12(sp)

    while (*lookyHere) {
    7f66:	   /----- bra.w 7fec <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    7f6a:	/--|----> movea.l 12(sp),a0
    7f6e:	|  |      movea.l (a0),a0
    7f70:	|  |      move.l 106(a0),d0
    7f74:	|  |      moveq #32,d1
    7f76:	|  |      and.l d1,d0
    7f78:	|  |  /-- beq.s 7f8a <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    7f7a:	|  |  |   movea.l 12(sp),a0
    7f7e:	|  |  |   move.l (a0),d0
    7f80:	|  |  |   moveq #24,d1
    7f82:	|  |  |   add.l d0,d1
    7f84:	|  |  |   move.l d1,12(sp)
    7f88:	|  +--|-- bra.s 7fec <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    7f8a:	|  |  \-> movea.l 12(sp),a0
    7f8e:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    7f92:	|  |      movea.l 8(sp),a0
    7f96:	|  |      move.l 24(a0),d0
    7f9a:	|  |      movea.l 12(sp),a0
    7f9e:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    7fa0:	|  |      movea.l 8(sp),a0
    7fa4:	|  |      move.l 56(a0),d0
    7fa8:	|  |  /-- beq.s 7fbc <killMostPeople+0x64>
    7faa:	|  |  |   movea.l 8(sp),a0
    7fae:	|  |  |   move.l 56(a0),d0
    7fb2:	|  |  |   move.l d0,-(sp)
    7fb4:	|  |  |   jsr 21b6 <abortFunction>
    7fba:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    7fbc:	|  |  \-> movea.l 8(sp),a0
    7fc0:	|  |      clr.l 56(a0)
            removeObjectType(killPeople->thisType);
    7fc4:	|  |      movea.l 8(sp),a0
    7fc8:	|  |      move.l 102(a0),d0
    7fcc:	|  |      move.l d0,-(sp)
    7fce:	|  |      jsr abe0 <removeObjectType>
    7fd4:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    7fd6:	|  |      move.l 8(sp),4(sp)
    7fdc:	|  |      move.l 18bc0 <SysBase>,d0
    7fe2:	|  |      movea.l d0,a6
    7fe4:	|  |      movea.l 4(sp),a1
    7fe8:	|  |      jsr -690(a6)
    while (*lookyHere) {
    7fec:	|  \----> movea.l 12(sp),a0
    7ff0:	|         move.l (a0),d0
    7ff2:	\-------- bne.w 7f6a <killMostPeople+0x12>
        }
    }
}
    7ff6:	          nop
    7ff8:	          nop
    7ffa:	          movea.l (sp)+,a6
    7ffc:	          lea 12(sp),sp
    8000:	          rts

00008002 <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    8002:	clr.l -(sp)
    8004:	move.l sp,d0
    8006:	addq.l #8,d0
    8008:	move.l d0,-(sp)
    800a:	jsr 593c <setFrames>
    8010:	addq.l #8,sp
}
    8012:	nop
    8014:	rts

00008016 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    8016:	          lea -12(sp),sp
    801a:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    801c:	          tst.l 20(sp)
    8020:	      /-- bne.s 802e <makeWalkingPerson+0x18>
    8022:	      |   tst.l 24(sp)
    8026:	      +-- bne.s 802e <makeWalkingPerson+0x18>
    8028:	      |   clr.w d0
    802a:	/-----|-- bra.w 81c6 <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    802e:	|     \-> movea.l 18d20 <currentFloor>,a0
    8034:	|         move.l 8(a0),d0
    8038:	|     /-- bne.s 8040 <makeWalkingPerson+0x2a>
    803a:	|     |   clr.w d0
    803c:	+-----|-- bra.w 81c6 <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    8040:	|     \-> move.l 28(sp),-(sp)
    8044:	|         jsr 7aec <findPerson>
    804a:	|         addq.l #4,sp
    804c:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    8050:	|     /-- bne.s 8058 <makeWalkingPerson+0x42>
    8052:	|     |   clr.w d0
    8054:	+-----|-- bra.w 81c6 <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    8058:	|     \-> movea.l 12(sp),a0
    805c:	|         move.l 56(a0),d0
    8060:	|     /-- beq.s 8074 <makeWalkingPerson+0x5e>
    8062:	|     |   movea.l 12(sp),a0
    8066:	|     |   move.l 56(a0),d0
    806a:	|     |   move.l d0,-(sp)
    806c:	|     |   jsr 21b6 <abortFunction>
    8072:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    8074:	|     \-> movea.l 12(sp),a0
    8078:	|         clr.l 56(a0)
	moveMe -> walking = TRUE;
    807c:	|         movea.l 12(sp),a0
    8080:	|         move.w #1,52(a0)
	moveMe -> directionWhenDoneWalking = di;
    8086:	|         movea.l 12(sp),a0
    808a:	|         move.l 36(sp),98(a0)

	moveMe -> walkToX = x;
    8090:	|         movea.l 12(sp),a0
    8094:	|         move.l 20(sp),28(a0)
	moveMe -> walkToY = y;
    809a:	|         movea.l 12(sp),a0
    809e:	|         move.l 24(sp),32(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    80a4:	|         move.l 24(sp),-(sp)
    80a8:	|         move.l 24(sp),-(sp)
    80ac:	|         jsr 12dac <inFloor>
    80b2:	|         addq.l #8,sp
    80b4:	|         movea.l 12(sp),a0
    80b8:	|         move.l d0,48(a0)
	if (moveMe -> walkToPoly == -1) {
    80bc:	|         movea.l 12(sp),a0
    80c0:	|         move.l 48(a0),d0
    80c4:	|         moveq #-1,d1
    80c6:	|         cmp.l d0,d1
    80c8:	|     /-- bne.s 80f8 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    80ca:	|     |   movea.w #48,a0
    80ce:	|     |   adda.l 12(sp),a0
    80d2:	|     |   moveq #32,d1
    80d4:	|     |   add.l 12(sp),d1
    80d8:	|     |   moveq #28,d0
    80da:	|     |   add.l 12(sp),d0
    80de:	|     |   move.l a0,-(sp)
    80e0:	|     |   move.l d1,-(sp)
    80e2:	|     |   move.l d0,-(sp)
    80e4:	|     |   jsr 7be8 <handleClosestPoint>
    80ea:	|     |   lea 12(sp),sp
    80ee:	|     |   tst.w d0
    80f0:	|     +-- bne.s 80f8 <makeWalkingPerson+0xe2>
    80f2:	|     |   clr.w d0
    80f4:	+-----|-- bra.w 81c6 <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    80f8:	|     \-> movea.l 12(sp),a0
    80fc:	|         move.l 4(a0),d0
    8100:	|         move.l d0,-(sp)
    8102:	|         jsr 13c9a <__fixsfsi>
    8108:	|         addq.l #4,sp
    810a:	|         move.l d0,d2
    810c:	|         movea.l 12(sp),a0
    8110:	|         move.l (a0),d0
    8112:	|         move.l d0,-(sp)
    8114:	|         jsr 13c9a <__fixsfsi>
    811a:	|         addq.l #4,sp
    811c:	|         move.l d2,-(sp)
    811e:	|         move.l d0,-(sp)
    8120:	|         jsr 12dac <inFloor>
    8126:	|         addq.l #8,sp
    8128:	|         movea.l 12(sp),a0
    812c:	|         move.l d0,44(a0)
	if (moveMe -> inPoly == -1) {
    8130:	|         movea.l 12(sp),a0
    8134:	|         move.l 44(a0),d0
    8138:	|         moveq #-1,d1
    813a:	|         cmp.l d0,d1
    813c:	|     /-- bne.s 818e <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    813e:	|     |   movea.l 12(sp),a0
    8142:	|     |   move.l (a0),d0
    8144:	|     |   move.l d0,-(sp)
    8146:	|     |   jsr 13c9a <__fixsfsi>
    814c:	|     |   addq.l #4,sp
    814e:	|     |   move.l d0,8(sp)
    8152:	|     |   movea.l 12(sp),a0
    8156:	|     |   move.l 4(a0),d0
    815a:	|     |   move.l d0,-(sp)
    815c:	|     |   jsr 13c9a <__fixsfsi>
    8162:	|     |   addq.l #4,sp
    8164:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    8168:	|     |   moveq #44,d0
    816a:	|     |   add.l 12(sp),d0
    816e:	|     |   move.l d0,-(sp)
    8170:	|     |   lea 8(sp),a0
    8174:	|     |   move.l a0,-(sp)
    8176:	|     |   moveq #16,d0
    8178:	|     |   add.l sp,d0
    817a:	|     |   move.l d0,-(sp)
    817c:	|     |   jsr 7be8 <handleClosestPoint>
    8182:	|     |   lea 12(sp),sp
    8186:	|     |   tst.w d0
    8188:	|     +-- bne.s 818e <makeWalkingPerson+0x178>
    818a:	|     |   clr.w d0
    818c:	+-----|-- bra.s 81c6 <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    818e:	|     \-> move.l 12(sp),-(sp)
    8192:	|         jsr 6ede <doBorderStuff>
    8198:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    819a:	|         clr.l -(sp)
    819c:	|         move.l 16(sp),-(sp)
    81a0:	|         jsr 936a <walkMe>
    81a6:	|         addq.l #8,sp
    81a8:	|         tst.w d0
    81aa:	|     /-- bne.s 81b6 <makeWalkingPerson+0x1a0>
    81ac:	|     |   movea.l 12(sp),a0
    81b0:	|     |   move.w 54(a0),d0
    81b4:	|  /--|-- beq.s 81c4 <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    81b6:	|  |  \-> movea.l 12(sp),a0
    81ba:	|  |      move.l 32(sp),56(a0)
		return TRUE;
    81c0:	|  |      moveq #1,d0
    81c2:	+--|----- bra.s 81c6 <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    81c4:	|  \----> clr.w d0
	}
}
    81c6:	\-------> move.l (sp)+,d2
    81c8:	          lea 12(sp),sp
    81cc:	          rts

000081ce <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    81ce:	       lea -16(sp),sp
    81d2:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    81d4:	       moveq #12,d0
    81d6:	       move.l d0,16(sp)
    81da:	       clr.l 12(sp)
    81de:	       move.l 18bc0 <SysBase>,d0
    81e4:	       movea.l d0,a6
    81e6:	       move.l 16(sp),d0
    81ea:	       move.l 12(sp),d1
    81ee:	       jsr -684(a6)
    81f2:	       move.l d0,8(sp)
    81f6:	       move.l 8(sp),d0
    81fa:	       move.l d0,4(sp)
    if(newAnim == 0) {
    81fe:	   /-- bne.s 8212 <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    8200:	   |   pea 154df <custom.c.36a9b171+0x8e5>
    8206:	   |   jsr 13a4a <KPrintF>
    820c:	   |   addq.l #4,sp
        return NULL;    
    820e:	   |   moveq #0,d0
    8210:	/--|-- bra.s 822c <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    8212:	|  \-> movea.l 4(sp),a0
    8216:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    8218:	|      movea.l 4(sp),a0
    821c:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    8220:	|      movea.l 4(sp),a0
    8224:	|      clr.l 4(a0)
	return newAnim;
    8228:	|      move.l 4(sp),d0
}
    822c:	\----> movea.l (sp)+,a6
    822e:	       lea 16(sp),sp
    8232:	       rts

00008234 <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    8234:	    move.l d2,-(sp)
	me->x = x;
    8236:	    movea.l 8(sp),a0
    823a:	    move.l 12(sp),(a0)
	me->y = y;
    823e:	    movea.l 8(sp),a0
    8242:	    move.l 16(sp),4(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    8248:	    movea.l 8(sp),a0
    824c:	    move.l 106(a0),d0
    8250:	    moveq #2,d1
    8252:	    and.l d1,d0
    8254:	/-- bne.s 82ac <moveAndScale+0x78>
    8256:	|   move.w 1856e <scaleDivide>,d0
    825c:	+-- beq.s 82ac <moveAndScale+0x78>
    825e:	|   movea.l 8(sp),a0
    8262:	|   move.l 4(a0),d2
    8266:	|   move.w 1856c <scaleHorizon>,d0
    826c:	|   movea.w d0,a0
    826e:	|   move.l a0,-(sp)
    8270:	|   jsr 13d02 <__floatsisf>
    8276:	|   addq.l #4,sp
    8278:	|   move.l d0,-(sp)
    827a:	|   move.l d2,-(sp)
    827c:	|   jsr 13ff6 <__subsf3>
    8282:	|   addq.l #8,sp
    8284:	|   move.l d0,d2
    8286:	|   move.w 1856e <scaleDivide>,d0
    828c:	|   movea.w d0,a0
    828e:	|   move.l a0,-(sp)
    8290:	|   jsr 13d02 <__floatsisf>
    8296:	|   addq.l #4,sp
    8298:	|   move.l d0,-(sp)
    829a:	|   move.l d2,-(sp)
    829c:	|   jsr 13bae <__divsf3>
    82a2:	|   addq.l #8,sp
    82a4:	|   movea.l 8(sp),a0
    82a8:	|   move.l d0,20(a0)
}
    82ac:	\-> nop
    82ae:	    move.l (sp)+,d2
    82b0:	    rts

000082b2 <removeOneCharacter>:

void removeOneCharacter (int i) {
    82b2:	          lea -12(sp),sp
    82b6:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);
    82b8:	          move.l 20(sp),-(sp)
    82bc:	          jsr 7aec <findPerson>
    82c2:	          addq.l #4,sp
    82c4:	          move.l d0,8(sp)

    if (p) {
    82c8:	/-------- beq.w 8374 <removeOneCharacter+0xc2>
        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    82cc:	|         move.l 18d1c <overRegion>,d0
    82d2:	|         cmpi.l #101500,d0
    82d8:	|     /-- bne.s 82f6 <removeOneCharacter+0x44>
    82da:	|     |   movea.l 18d1c <overRegion>,a0
    82e0:	|     |   move.l 28(a0),d1
    82e4:	|     |   movea.l 8(sp),a0
    82e8:	|     |   move.l 102(a0),d0
    82ec:	|     |   cmp.l d1,d0
    82ee:	|     +-- bne.s 82f6 <removeOneCharacter+0x44>
            overRegion = NULL;
    82f0:	|     |   clr.l 18d1c <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    82f6:	|     \-> movea.l 8(sp),a0
    82fa:	|         move.l 56(a0),d0
    82fe:	|     /-- beq.s 8312 <removeOneCharacter+0x60>
    8300:	|     |   movea.l 8(sp),a0
    8304:	|     |   move.l 56(a0),d0
    8308:	|     |   move.l d0,-(sp)
    830a:	|     |   jsr 21b6 <abortFunction>
    8310:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    8312:	|     \-> movea.l 8(sp),a0
    8316:	|         clr.l 56(a0)
        struct onScreenPerson ** killPeople;

        for (killPeople = &allPeople;
    831a:	|         move.l #101496,12(sp)
    8322:	|     /-- bra.s 8332 <removeOneCharacter+0x80>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    8324:	|  /--|-> movea.l 12(sp),a0
    8328:	|  |  |   move.l (a0),d0
    832a:	|  |  |   moveq #24,d1
    832c:	|  |  |   add.l d0,d1
    832e:	|  |  |   move.l d1,12(sp)
            *killPeople != p;
    8332:	|  |  \-> movea.l 12(sp),a0
    8336:	|  |      move.l (a0),d0
    8338:	|  |      cmp.l 8(sp),d0
    833c:	|  \----- bne.s 8324 <removeOneCharacter+0x72>

        *killPeople = p->next;
    833e:	|         movea.l 8(sp),a0
    8342:	|         move.l 24(a0),d0
    8346:	|         movea.l 12(sp),a0
    834a:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    834c:	|         movea.l 8(sp),a0
    8350:	|         move.l 102(a0),d0
    8354:	|         move.l d0,-(sp)
    8356:	|         jsr abe0 <removeObjectType>
    835c:	|         addq.l #4,sp
        FreeVec(p);
    835e:	|         move.l 8(sp),4(sp)
    8364:	|         move.l 18bc0 <SysBase>,d0
    836a:	|         movea.l d0,a6
    836c:	|         movea.l 4(sp),a1
    8370:	|         jsr -690(a6)
    }
}
    8374:	\-------> nop
    8376:	          movea.l (sp)+,a6
    8378:	          lea 12(sp),sp
    837c:	          rts

0000837e <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    837e:	       subq.l #8,sp
    8380:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    8382:	       movea.l 16(sp),a0
    8386:	       movea.l 68(a0),a0
    838a:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    8390:	       movea.l 16(sp),a0
    8394:	       move.l 80(a0),d2
    8398:	       move.l 4(sp),-(sp)
    839c:	       pea b4 <_start+0xb4>
    83a0:	       jsr 14302 <__divsi3>
    83a6:	       addq.l #8,sp
    83a8:	       add.l d2,d0
    83aa:	       move.l d0,d1
    83ac:	       addi.l #180,d1
    83b2:	       movea.l 16(sp),a0
    83b6:	       move.l 88(a0),d0
    83ba:	       move.l d1,d2
    83bc:	       add.l d0,d2
    83be:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    83c2:	   /-- bra.s 83cc <rethinkAngle+0x4e>
    83c4:	/--|-> addi.l #-360,8(sp)
    83cc:	|  \-> cmpi.l #359,8(sp)
    83d4:	\----- bgt.s 83c4 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    83d6:	       move.l 4(sp),-(sp)
    83da:	       move.l 12(sp),-(sp)
    83de:	       jsr 14284 <__mulsi3>
    83e4:	       addq.l #8,sp
    83e6:	       pea 168 <decodeFilename+0x50>
    83ea:	       move.l d0,-(sp)
    83ec:	       jsr 14302 <__divsi3>
    83f2:	       addq.l #8,sp
    83f4:	       movea.l 16(sp),a0
    83f8:	       move.l d0,94(a0)
}
    83fc:	       nop
    83fe:	       move.l (sp)+,d2
    8400:	       addq.l #8,sp
    8402:	       rts

00008404 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    8404:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    8406:	          movea.l 8(sp),a0
    840a:	          move.l 8(a0),d0
    840e:	          move.l 12(sp),-(sp)
    8412:	          move.l d0,-(sp)
    8414:	          jsr 8d0 <put2bytes>
    841a:	          addq.l #8,sp
	if (p -> numFrames) {
    841c:	          movea.l 8(sp),a0
    8420:	          move.l 8(a0),d0
    8424:	/-------- beq.w 84c8 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    8428:	|         movea.l 8(sp),a0
    842c:	|         movea.l (a0),a0
    842e:	|         move.l (a0),d0
    8430:	|         move.l 12(sp),-(sp)
    8434:	|         move.l d0,-(sp)
    8436:	|         jsr 958 <put4bytes>
    843c:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    843e:	|         clr.l (sp)
    8440:	|     /-- bra.s 84ba <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    8442:	|  /--|-> movea.l 8(sp),a0
    8446:	|  |  |   movea.l 4(a0),a0
    844a:	|  |  |   move.l (sp),d1
    844c:	|  |  |   move.l d1,d0
    844e:	|  |  |   add.l d0,d0
    8450:	|  |  |   add.l d1,d0
    8452:	|  |  |   add.l d0,d0
    8454:	|  |  |   add.l d0,d0
    8456:	|  |  |   adda.l d0,a0
    8458:	|  |  |   move.l (a0),d0
    845a:	|  |  |   move.l 12(sp),-(sp)
    845e:	|  |  |   move.l d0,-(sp)
    8460:	|  |  |   jsr 958 <put4bytes>
    8466:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    8468:	|  |  |   movea.l 8(sp),a0
    846c:	|  |  |   movea.l 4(a0),a0
    8470:	|  |  |   move.l (sp),d1
    8472:	|  |  |   move.l d1,d0
    8474:	|  |  |   add.l d0,d0
    8476:	|  |  |   add.l d1,d0
    8478:	|  |  |   add.l d0,d0
    847a:	|  |  |   add.l d0,d0
    847c:	|  |  |   adda.l d0,a0
    847e:	|  |  |   move.l 4(a0),d0
    8482:	|  |  |   move.l 12(sp),-(sp)
    8486:	|  |  |   move.l d0,-(sp)
    8488:	|  |  |   jsr 958 <put4bytes>
    848e:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    8490:	|  |  |   movea.l 8(sp),a0
    8494:	|  |  |   movea.l 4(a0),a0
    8498:	|  |  |   move.l (sp),d1
    849a:	|  |  |   move.l d1,d0
    849c:	|  |  |   add.l d0,d0
    849e:	|  |  |   add.l d1,d0
    84a0:	|  |  |   add.l d0,d0
    84a2:	|  |  |   add.l d0,d0
    84a4:	|  |  |   adda.l d0,a0
    84a6:	|  |  |   move.l 8(a0),d0
    84aa:	|  |  |   move.l 12(sp),-(sp)
    84ae:	|  |  |   move.l d0,-(sp)
    84b0:	|  |  |   jsr 958 <put4bytes>
    84b6:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    84b8:	|  |  |   addq.l #1,(sp)
    84ba:	|  |  \-> movea.l 8(sp),a0
    84be:	|  |      move.l 8(a0),d0
    84c2:	|  |      cmp.l (sp),d0
    84c4:	|  \----- bgt.w 8442 <saveAnim+0x3e>
		}
	}
	return TRUE;
    84c8:	\-------> moveq #1,d0
}
    84ca:	          addq.l #4,sp
    84cc:	          rts

000084ce <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    84ce:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    84d0:	             movea.l 8(sp),a0
    84d4:	             move.l 4(a0),d0
    84d8:	             move.l 12(sp),-(sp)
    84dc:	             move.l d0,-(sp)
    84de:	             jsr 8d0 <put2bytes>
    84e4:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    84e6:	             clr.l (sp)
    84e8:	   /-------- bra.s 8514 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    84ea:	/--|-------> movea.l 8(sp),a0
    84ee:	|  |         move.l (a0),d1
    84f0:	|  |         move.l (sp),d0
    84f2:	|  |         add.l d0,d0
    84f4:	|  |         add.l d0,d0
    84f6:	|  |         movea.l d1,a0
    84f8:	|  |         adda.l d0,a0
    84fa:	|  |         move.l (a0),d0
    84fc:	|  |         move.l 12(sp),-(sp)
    8500:	|  |         move.l d0,-(sp)
    8502:	|  |         jsr 8404 <saveAnim>
    8508:	|  |         addq.l #8,sp
    850a:	|  |         tst.w d0
    850c:	|  |     /-- bne.s 8512 <saveCostume+0x44>
    850e:	|  |     |   clr.w d0
    8510:	|  |  /--|-- bra.s 8528 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    8512:	|  |  |  \-> addq.l #1,(sp)
    8514:	|  \--|----> movea.l 8(sp),a0
    8518:	|     |      move.l 4(a0),d1
    851c:	|     |      move.l d1,d0
    851e:	|     |      add.l d0,d0
    8520:	|     |      add.l d1,d0
    8522:	|     |      cmp.l (sp),d0
    8524:	\-----|----- bgt.s 84ea <saveCostume+0x1c>
	}

	return TRUE;
    8526:	      |      moveq #1,d0
}
    8528:	      \----> addq.l #4,sp
    852a:	             rts

0000852c <savePeople>:

BOOL savePeople (BPTR fp) {
    852c:	             lea -144(sp),sp
    8530:	             move.l a6,-(sp)
    8532:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    8534:	             move.l 18c78 <allPeople>,148(sp)
	int countPeople = 0, a;
    853c:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    8540:	             move.w 1856c <scaleHorizon>,d0
    8546:	             movea.w d0,a0
    8548:	             move.l 156(sp),-(sp)
    854c:	             move.l a0,-(sp)
    854e:	             jsr a9c <putSigned>
    8554:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    8556:	             move.w 1856e <scaleDivide>,d0
    855c:	             movea.w d0,a0
    855e:	             move.l 156(sp),-(sp)
    8562:	             move.l a0,-(sp)
    8564:	             jsr a9c <putSigned>
    856a:	             addq.l #8,sp

	while (me) {
    856c:	         /-- bra.s 857c <savePeople+0x50>
		countPeople ++;
    856e:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    8572:	      |  |   movea.l 148(sp),a0
    8576:	      |  |   move.l 24(a0),148(sp)
	while (me) {
    857c:	      |  \-> tst.l 148(sp)
    8580:	      \----- bne.s 856e <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    8582:	             move.l 156(sp),-(sp)
    8586:	             move.l 148(sp),-(sp)
    858a:	             jsr 8d0 <put2bytes>
    8590:	             addq.l #8,sp

	me = allPeople;
    8592:	             move.l 18c78 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    859a:	             clr.l 140(sp)
    859e:	   /-------- bra.w 89f6 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    85a2:	/--|-------> movea.l 148(sp),a0
    85a6:	|  |         move.l (a0),d0
    85a8:	|  |         move.l 156(sp),-(sp)
    85ac:	|  |         move.l d0,-(sp)
    85ae:	|  |         jsr a46 <putFloat>
    85b4:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    85b6:	|  |         movea.l 148(sp),a0
    85ba:	|  |         move.l 4(a0),d0
    85be:	|  |         move.l 156(sp),-(sp)
    85c2:	|  |         move.l d0,-(sp)
    85c4:	|  |         jsr a46 <putFloat>
    85ca:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    85cc:	|  |         movea.l 148(sp),a0
    85d0:	|  |         move.l 68(a0),d0
    85d4:	|  |         move.l 156(sp),-(sp)
    85d8:	|  |         move.l d0,-(sp)
    85da:	|  |         jsr 84ce <saveCostume>
    85e0:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    85e2:	|  |         movea.l 148(sp),a0
    85e6:	|  |         move.l 60(a0),d0
    85ea:	|  |         move.l 156(sp),-(sp)
    85ee:	|  |         move.l d0,-(sp)
    85f0:	|  |         jsr 8404 <saveAnim>
    85f6:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    85f8:	|  |         move.l 156(sp),136(sp)
    85fe:	|  |         movea.l 148(sp),a0
    8602:	|  |         move.l 60(a0),d1
    8606:	|  |         movea.l 148(sp),a0
    860a:	|  |         move.l 64(a0),d0
    860e:	|  |         cmp.l d1,d0
    8610:	|  |         seq d0
    8612:	|  |         neg.b d0
    8614:	|  |         move.b d0,d0
    8616:	|  |         andi.l #255,d0
    861c:	|  |         move.l d0,132(sp)
    8620:	|  |         move.l 18bc8 <DOSBase>,d0
    8626:	|  |         movea.l d0,a6
    8628:	|  |         move.l 136(sp),d1
    862c:	|  |         move.l 132(sp),d2
    8630:	|  |         jsr -312(a6)
    8634:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    8638:	|  |         movea.l 148(sp),a0
    863c:	|  |         move.l 20(a0),d0
    8640:	|  |         move.l 156(sp),-(sp)
    8644:	|  |         move.l d0,-(sp)
    8646:	|  |         jsr a46 <putFloat>
    864c:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    864e:	|  |         movea.l 148(sp),a0
    8652:	|  |         move.l 106(a0),d0
    8656:	|  |         move.l 156(sp),-(sp)
    865a:	|  |         move.l d0,-(sp)
    865c:	|  |         jsr 8d0 <put2bytes>
    8662:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    8664:	|  |         movea.l 148(sp),a0
    8668:	|  |         move.l 8(a0),d0
    866c:	|  |         move.l 156(sp),-(sp)
    8670:	|  |         move.l d0,-(sp)
    8672:	|  |         jsr 8d0 <put2bytes>
    8678:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    867a:	|  |         movea.l 148(sp),a0
    867e:	|  |         move.l 28(a0),d0
    8682:	|  |         move.l 156(sp),-(sp)
    8686:	|  |         move.l d0,-(sp)
    8688:	|  |         jsr 8d0 <put2bytes>
    868e:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    8690:	|  |         movea.l 148(sp),a0
    8694:	|  |         move.l 32(a0),d0
    8698:	|  |         move.l 156(sp),-(sp)
    869c:	|  |         move.l d0,-(sp)
    869e:	|  |         jsr 8d0 <put2bytes>
    86a4:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    86a6:	|  |         movea.l 148(sp),a0
    86aa:	|  |         move.l 36(a0),d0
    86ae:	|  |         move.l 156(sp),-(sp)
    86b2:	|  |         move.l d0,-(sp)
    86b4:	|  |         jsr 8d0 <put2bytes>
    86ba:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    86bc:	|  |         movea.l 148(sp),a0
    86c0:	|  |         move.l 40(a0),d0
    86c4:	|  |         move.l 156(sp),-(sp)
    86c8:	|  |         move.l d0,-(sp)
    86ca:	|  |         jsr 8d0 <put2bytes>
    86d0:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    86d2:	|  |         movea.l 148(sp),a0
    86d6:	|  |         move.l 72(a0),d0
    86da:	|  |         move.l 156(sp),-(sp)
    86de:	|  |         move.l d0,-(sp)
    86e0:	|  |         jsr 8d0 <put2bytes>
    86e6:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    86e8:	|  |         movea.l 148(sp),a0
    86ec:	|  |         move.l 76(a0),d0
    86f0:	|  |         move.l 156(sp),-(sp)
    86f4:	|  |         move.l d0,-(sp)
    86f6:	|  |         jsr 8d0 <put2bytes>
    86fc:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    86fe:	|  |         movea.l 148(sp),a0
    8702:	|  |         move.l 16(a0),d0
    8706:	|  |         move.l 156(sp),-(sp)
    870a:	|  |         move.l d0,-(sp)
    870c:	|  |         jsr 8d0 <put2bytes>
    8712:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    8714:	|  |         movea.l 148(sp),a0
    8718:	|  |         move.l 110(a0),d0
    871c:	|  |         move.l 156(sp),-(sp)
    8720:	|  |         move.l d0,-(sp)
    8722:	|  |         jsr 8d0 <put2bytes>
    8728:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    872a:	|  |         movea.l 148(sp),a0
    872e:	|  |         move.l 12(a0),d0
    8732:	|  |         move.l d0,d0
    8734:	|  |         movea.w d0,a0
    8736:	|  |         move.l 156(sp),-(sp)
    873a:	|  |         move.l a0,-(sp)
    873c:	|  |         jsr a9c <putSigned>
    8742:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    8744:	|  |         move.l 156(sp),124(sp)
    874a:	|  |         movea.l 148(sp),a0
    874e:	|  |         move.w 92(a0),d0
    8752:	|  |         movea.w d0,a0
    8754:	|  |         move.l a0,120(sp)
    8758:	|  |         move.l 18bc8 <DOSBase>,d0
    875e:	|  |         movea.l d0,a6
    8760:	|  |         move.l 124(sp),d1
    8764:	|  |         move.l 120(sp),d2
    8768:	|  |         jsr -312(a6)
    876c:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    8770:	|  |         move.l 156(sp),112(sp)
    8776:	|  |         movea.l 148(sp),a0
    877a:	|  |         move.w 52(a0),d0
    877e:	|  |         movea.w d0,a0
    8780:	|  |         move.l a0,108(sp)
    8784:	|  |         move.l 18bc8 <DOSBase>,d0
    878a:	|  |         movea.l d0,a6
    878c:	|  |         move.l 112(sp),d1
    8790:	|  |         move.l 108(sp),d2
    8794:	|  |         jsr -312(a6)
    8798:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    879c:	|  |         move.l 156(sp),100(sp)
    87a2:	|  |         movea.l 148(sp),a0
    87a6:	|  |         move.w 54(a0),d0
    87aa:	|  |         movea.w d0,a0
    87ac:	|  |         move.l a0,96(sp)
    87b0:	|  |         move.l 18bc8 <DOSBase>,d0
    87b6:	|  |         movea.l d0,a6
    87b8:	|  |         move.l 100(sp),d1
    87bc:	|  |         move.l 96(sp),d2
    87c0:	|  |         jsr -312(a6)
    87c4:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    87c8:	|  |         movea.l 148(sp),a0
    87cc:	|  |         move.l 56(a0),d0
    87d0:	|  |  /----- beq.s 880e <savePeople+0x2e2>
			FPutC (fp, 1);
    87d2:	|  |  |      move.l 156(sp),76(sp)
    87d8:	|  |  |      moveq #1,d0
    87da:	|  |  |      move.l d0,72(sp)
    87de:	|  |  |      move.l 18bc8 <DOSBase>,d0
    87e4:	|  |  |      movea.l d0,a6
    87e6:	|  |  |      move.l 76(sp),d1
    87ea:	|  |  |      move.l 72(sp),d2
    87ee:	|  |  |      jsr -312(a6)
    87f2:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    87f6:	|  |  |      movea.l 148(sp),a0
    87fa:	|  |  |      move.l 56(a0),d0
    87fe:	|  |  |      move.l 156(sp),-(sp)
    8802:	|  |  |      move.l d0,-(sp)
    8804:	|  |  |      jsr 9a8c <saveFunction>
    880a:	|  |  |      addq.l #8,sp
    880c:	|  |  |  /-- bra.s 8832 <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    880e:	|  |  \--|-> move.l 156(sp),88(sp)
    8814:	|  |     |   moveq #1,d0
    8816:	|  |     |   move.l d0,84(sp)
    881a:	|  |     |   move.l 18bc8 <DOSBase>,d0
    8820:	|  |     |   movea.l d0,a6
    8822:	|  |     |   move.l 88(sp),d1
    8826:	|  |     |   move.l 84(sp),d2
    882a:	|  |     |   jsr -312(a6)
    882e:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    8832:	|  |     \-> movea.l 148(sp),a0
    8836:	|  |         move.l 94(a0),d0
    883a:	|  |         move.l 156(sp),-(sp)
    883e:	|  |         move.l d0,-(sp)
    8840:	|  |         jsr 8d0 <put2bytes>
    8846:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    8848:	|  |         movea.l 148(sp),a0
    884c:	|  |         move.l 80(a0),d0
    8850:	|  |         move.l 156(sp),-(sp)
    8854:	|  |         move.l d0,-(sp)
    8856:	|  |         jsr 8d0 <put2bytes>
    885c:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    885e:	|  |         movea.l 148(sp),a0
    8862:	|  |         move.l 88(a0),d0
    8866:	|  |         move.l 156(sp),-(sp)
    886a:	|  |         move.l d0,-(sp)
    886c:	|  |         jsr 8d0 <put2bytes>
    8872:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    8874:	|  |         movea.l 148(sp),a0
    8878:	|  |         move.l 84(a0),d0
    887c:	|  |         move.l 156(sp),-(sp)
    8880:	|  |         move.l d0,-(sp)
    8882:	|  |         jsr 8d0 <put2bytes>
    8888:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    888a:	|  |         movea.l 148(sp),a0
    888e:	|  |         move.l 98(a0),d0
    8892:	|  |         move.l d0,d0
    8894:	|  |         movea.w d0,a0
    8896:	|  |         move.l 156(sp),-(sp)
    889a:	|  |         move.l a0,-(sp)
    889c:	|  |         jsr a9c <putSigned>
    88a2:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    88a4:	|  |         movea.l 148(sp),a0
    88a8:	|  |         move.l 44(a0),d0
    88ac:	|  |         move.l d0,d0
    88ae:	|  |         movea.w d0,a0
    88b0:	|  |         move.l 156(sp),-(sp)
    88b4:	|  |         move.l a0,-(sp)
    88b6:	|  |         jsr a9c <putSigned>
    88bc:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    88be:	|  |         movea.l 148(sp),a0
    88c2:	|  |         move.l 48(a0),d0
    88c6:	|  |         move.l d0,d0
    88c8:	|  |         movea.w d0,a0
    88ca:	|  |         move.l 156(sp),-(sp)
    88ce:	|  |         move.l a0,-(sp)
    88d0:	|  |         jsr a9c <putSigned>
    88d6:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    88d8:	|  |         move.l 156(sp),64(sp)
    88de:	|  |         movea.l 148(sp),a0
    88e2:	|  |         move.b 114(a0),d0
    88e6:	|  |         move.b d0,d0
    88e8:	|  |         andi.l #255,d0
    88ee:	|  |         move.l d0,60(sp)
    88f2:	|  |         move.l 18bc8 <DOSBase>,d0
    88f8:	|  |         movea.l d0,a6
    88fa:	|  |         move.l 64(sp),d1
    88fe:	|  |         move.l 60(sp),d2
    8902:	|  |         jsr -312(a6)
    8906:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    890a:	|  |         move.l 156(sp),52(sp)
    8910:	|  |         movea.l 148(sp),a0
    8914:	|  |         move.b 115(a0),d0
    8918:	|  |         move.b d0,d0
    891a:	|  |         andi.l #255,d0
    8920:	|  |         move.l d0,48(sp)
    8924:	|  |         move.l 18bc8 <DOSBase>,d0
    892a:	|  |         movea.l d0,a6
    892c:	|  |         move.l 52(sp),d1
    8930:	|  |         move.l 48(sp),d2
    8934:	|  |         jsr -312(a6)
    8938:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    893c:	|  |         move.l 156(sp),40(sp)
    8942:	|  |         movea.l 148(sp),a0
    8946:	|  |         move.b 116(a0),d0
    894a:	|  |         move.b d0,d0
    894c:	|  |         andi.l #255,d0
    8952:	|  |         move.l d0,36(sp)
    8956:	|  |         move.l 18bc8 <DOSBase>,d0
    895c:	|  |         movea.l d0,a6
    895e:	|  |         move.l 40(sp),d1
    8962:	|  |         move.l 36(sp),d2
    8966:	|  |         jsr -312(a6)
    896a:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    896e:	|  |         move.l 156(sp),28(sp)
    8974:	|  |         movea.l 148(sp),a0
    8978:	|  |         move.b 117(a0),d0
    897c:	|  |         move.b d0,d0
    897e:	|  |         andi.l #255,d0
    8984:	|  |         move.l d0,24(sp)
    8988:	|  |         move.l 18bc8 <DOSBase>,d0
    898e:	|  |         movea.l d0,a6
    8990:	|  |         move.l 28(sp),d1
    8994:	|  |         move.l 24(sp),d2
    8998:	|  |         jsr -312(a6)
    899c:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    89a0:	|  |         move.l 156(sp),16(sp)
    89a6:	|  |         movea.l 148(sp),a0
    89aa:	|  |         move.b 118(a0),d0
    89ae:	|  |         move.b d0,d0
    89b0:	|  |         andi.l #255,d0
    89b6:	|  |         move.l d0,12(sp)
    89ba:	|  |         move.l 18bc8 <DOSBase>,d0
    89c0:	|  |         movea.l d0,a6
    89c2:	|  |         move.l 16(sp),d1
    89c6:	|  |         move.l 12(sp),d2
    89ca:	|  |         jsr -312(a6)
    89ce:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    89d2:	|  |         movea.l 148(sp),a0
    89d6:	|  |         move.l 102(a0),d0
    89da:	|  |         move.l 156(sp),-(sp)
    89de:	|  |         move.l d0,-(sp)
    89e0:	|  |         jsr ac80 <saveObjectRef>
    89e6:	|  |         addq.l #8,sp

		me = me -> next;
    89e8:	|  |         movea.l 148(sp),a0
    89ec:	|  |         move.l 24(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    89f2:	|  |         addq.l #1,140(sp)
    89f6:	|  \-------> movea.l 140(sp),a0
    89fa:	|            cmpa.l 144(sp),a0
    89fe:	\----------- blt.w 85a2 <savePeople+0x76>
	}
	return TRUE;
    8a02:	             moveq #1,d0
}
    8a04:	             move.l (sp)+,d2
    8a06:	             movea.l (sp)+,a6
    8a08:	             lea 144(sp),sp
    8a0c:	             rts

00008a0e <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    8a0e:	movea.l 4(sp),a0
    8a12:	move.l 8(sp),(a0)
}
    8a16:	nop
    8a18:	rts

00008a1a <setDrawMode>:


void setDrawMode (int h, int ob) {
    8a1a:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    8a1c:	       move.l 12(sp),-(sp)
    8a20:	       jsr 7aec <findPerson>
    8a26:	       addq.l #4,sp
    8a28:	       move.l d0,(sp)
	if (! moveMe) return;
    8a2a:	/----- beq.s 8a3e <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    8a2c:	|      move.l 8(sp),-(sp)
    8a30:	|      move.l 4(sp),-(sp)
    8a34:	|      jsr 8a44 <setMyDrawMode>
    8a3a:	|      addq.l #8,sp
    8a3c:	|  /-- bra.s 8a40 <setDrawMode+0x26>
	if (! moveMe) return;
    8a3e:	\--|-> nop
}
    8a40:	   \-> addq.l #4,sp
    8a42:	       rts

00008a44 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    8a44:	       moveq #19,d0
    8a46:	       cmp.l 8(sp),d0
    8a4a:	/----- bcs.w 8f22 <setMyDrawMode+0x4de>
    8a4e:	|      move.l 8(sp),d0
    8a52:	|      add.l d0,d0
    8a54:	|      movea.l d0,a0
    8a56:	|      adda.l #35426,a0
    8a5c:	|      move.w (a0),d0
    8a5e:	|      jmp (8a62 <setMyDrawMode+0x1e>,pc,d0.w)
    8a62:	|      .short 0x04c0
    8a64:	|      ori.l #6684712,-(a4)
    8a6a:	|      btst d0,-(a0)
    8a6c:	|      bchg d0,(a6)+
    8a6e:	|      bclr d0,(a4)+
    8a70:	|      bset d0,(a2)+
    8a72:	|      andi.b #84,(a6)
    8a76:	|      andi.l #55575312,(a2)
    8a7c:	|      .short 0x02d0
    8a7e:	|      bclr d1,(a0)
    8a80:	|      .short 0x044a
    8a82:	|      .short 0x040c
    8a84:	|      movep.l d1,1158(a6)
    8a88:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8a8a:	|      movea.l 4(sp),a0
    8a8e:	|      clr.b 116(a0)
    8a92:	|      movea.l 4(sp),a0
    8a96:	|      move.b 116(a0),d0
    8a9a:	|      movea.l 4(sp),a0
    8a9e:	|      move.b d0,115(a0)
    8aa2:	|      movea.l 4(sp),a0
    8aa6:	|      move.b 115(a0),d0
    8aaa:	|      movea.l 4(sp),a0
    8aae:	|      move.b d0,114(a0)
			moveMe->colourmix = 0;
    8ab2:	|      movea.l 4(sp),a0
    8ab6:	|      clr.b 117(a0)
			moveMe->transparency = 64;
    8aba:	|      movea.l 4(sp),a0
    8abe:	|      move.b #64,118(a0)
			break;
    8ac4:	|  /-- bra.w 8f5c <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8ac8:	|  |   movea.l 4(sp),a0
    8acc:	|  |   clr.b 116(a0)
    8ad0:	|  |   movea.l 4(sp),a0
    8ad4:	|  |   move.b 116(a0),d0
    8ad8:	|  |   movea.l 4(sp),a0
    8adc:	|  |   move.b d0,115(a0)
    8ae0:	|  |   movea.l 4(sp),a0
    8ae4:	|  |   move.b 115(a0),d0
    8ae8:	|  |   movea.l 4(sp),a0
    8aec:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    8af0:	|  |   movea.l 4(sp),a0
    8af4:	|  |   clr.b 117(a0)
			moveMe->transparency = 128;
    8af8:	|  |   movea.l 4(sp),a0
    8afc:	|  |   move.b #-128,118(a0)
			break;
    8b02:	|  +-- bra.w 8f5c <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8b06:	|  |   movea.l 4(sp),a0
    8b0a:	|  |   clr.b 116(a0)
    8b0e:	|  |   movea.l 4(sp),a0
    8b12:	|  |   move.b 116(a0),d0
    8b16:	|  |   movea.l 4(sp),a0
    8b1a:	|  |   move.b d0,115(a0)
    8b1e:	|  |   movea.l 4(sp),a0
    8b22:	|  |   move.b 115(a0),d0
    8b26:	|  |   movea.l 4(sp),a0
    8b2a:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    8b2e:	|  |   movea.l 4(sp),a0
    8b32:	|  |   clr.b 117(a0)
			moveMe->transparency = 192;
    8b36:	|  |   movea.l 4(sp),a0
    8b3a:	|  |   move.b #-64,118(a0)
			break;
    8b40:	|  +-- bra.w 8f5c <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8b44:	|  |   movea.l 4(sp),a0
    8b48:	|  |   clr.b 116(a0)
    8b4c:	|  |   movea.l 4(sp),a0
    8b50:	|  |   move.b 116(a0),d0
    8b54:	|  |   movea.l 4(sp),a0
    8b58:	|  |   move.b d0,115(a0)
    8b5c:	|  |   movea.l 4(sp),a0
    8b60:	|  |   move.b 115(a0),d0
    8b64:	|  |   movea.l 4(sp),a0
    8b68:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    8b6c:	|  |   movea.l 4(sp),a0
    8b70:	|  |   clr.b 117(a0)
			moveMe->transparency = 254;
    8b74:	|  |   movea.l 4(sp),a0
    8b78:	|  |   move.b #-2,118(a0)
			break;
    8b7e:	|  +-- bra.w 8f5c <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8b82:	|  |   movea.l 4(sp),a0
    8b86:	|  |   clr.b 116(a0)
    8b8a:	|  |   movea.l 4(sp),a0
    8b8e:	|  |   move.b 116(a0),d0
    8b92:	|  |   movea.l 4(sp),a0
    8b96:	|  |   move.b d0,115(a0)
    8b9a:	|  |   movea.l 4(sp),a0
    8b9e:	|  |   move.b 115(a0),d0
    8ba2:	|  |   movea.l 4(sp),a0
    8ba6:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    8baa:	|  |   movea.l 4(sp),a0
    8bae:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    8bb4:	|  |   movea.l 4(sp),a0
    8bb8:	|  |   clr.b 118(a0)
			break;
    8bbc:	|  +-- bra.w 8f5c <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8bc0:	|  |   movea.l 4(sp),a0
    8bc4:	|  |   clr.b 116(a0)
    8bc8:	|  |   movea.l 4(sp),a0
    8bcc:	|  |   move.b 116(a0),d0
    8bd0:	|  |   movea.l 4(sp),a0
    8bd4:	|  |   move.b d0,115(a0)
    8bd8:	|  |   movea.l 4(sp),a0
    8bdc:	|  |   move.b 115(a0),d0
    8be0:	|  |   movea.l 4(sp),a0
    8be4:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    8be8:	|  |   movea.l 4(sp),a0
    8bec:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    8bf2:	|  |   movea.l 4(sp),a0
    8bf6:	|  |   clr.b 118(a0)
			break;
    8bfa:	|  +-- bra.w 8f5c <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8bfe:	|  |   movea.l 4(sp),a0
    8c02:	|  |   clr.b 116(a0)
    8c06:	|  |   movea.l 4(sp),a0
    8c0a:	|  |   move.b 116(a0),d0
    8c0e:	|  |   movea.l 4(sp),a0
    8c12:	|  |   move.b d0,115(a0)
    8c16:	|  |   movea.l 4(sp),a0
    8c1a:	|  |   move.b 115(a0),d0
    8c1e:	|  |   movea.l 4(sp),a0
    8c22:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    8c26:	|  |   movea.l 4(sp),a0
    8c2a:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    8c30:	|  |   movea.l 4(sp),a0
    8c34:	|  |   clr.b 118(a0)
			break;
    8c38:	|  +-- bra.w 8f5c <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8c3c:	|  |   movea.l 4(sp),a0
    8c40:	|  |   clr.b 116(a0)
    8c44:	|  |   movea.l 4(sp),a0
    8c48:	|  |   move.b 116(a0),d0
    8c4c:	|  |   movea.l 4(sp),a0
    8c50:	|  |   move.b d0,115(a0)
    8c54:	|  |   movea.l 4(sp),a0
    8c58:	|  |   move.b 115(a0),d0
    8c5c:	|  |   movea.l 4(sp),a0
    8c60:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    8c64:	|  |   movea.l 4(sp),a0
    8c68:	|  |   st 117(a0)
			moveMe->transparency = 0;
    8c6c:	|  |   movea.l 4(sp),a0
    8c70:	|  |   clr.b 118(a0)
			break;
    8c74:	|  +-- bra.w 8f5c <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8c78:	|  |   movea.l 4(sp),a0
    8c7c:	|  |   clr.b 116(a0)
    8c80:	|  |   movea.l 4(sp),a0
    8c84:	|  |   move.b 116(a0),d0
    8c88:	|  |   movea.l 4(sp),a0
    8c8c:	|  |   move.b d0,115(a0)
    8c90:	|  |   movea.l 4(sp),a0
    8c94:	|  |   move.b 115(a0),d0
    8c98:	|  |   movea.l 4(sp),a0
    8c9c:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    8ca0:	|  |   movea.l 4(sp),a0
    8ca4:	|  |   st 117(a0)
			moveMe->transparency = 64;
    8ca8:	|  |   movea.l 4(sp),a0
    8cac:	|  |   move.b #64,118(a0)
			break;
    8cb2:	|  +-- bra.w 8f5c <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8cb6:	|  |   movea.l 4(sp),a0
    8cba:	|  |   clr.b 116(a0)
    8cbe:	|  |   movea.l 4(sp),a0
    8cc2:	|  |   move.b 116(a0),d0
    8cc6:	|  |   movea.l 4(sp),a0
    8cca:	|  |   move.b d0,115(a0)
    8cce:	|  |   movea.l 4(sp),a0
    8cd2:	|  |   move.b 115(a0),d0
    8cd6:	|  |   movea.l 4(sp),a0
    8cda:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    8cde:	|  |   movea.l 4(sp),a0
    8ce2:	|  |   st 117(a0)
			moveMe->transparency = 128;
    8ce6:	|  |   movea.l 4(sp),a0
    8cea:	|  |   move.b #-128,118(a0)
			break;
    8cf0:	|  +-- bra.w 8f5c <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8cf4:	|  |   movea.l 4(sp),a0
    8cf8:	|  |   clr.b 116(a0)
    8cfc:	|  |   movea.l 4(sp),a0
    8d00:	|  |   move.b 116(a0),d0
    8d04:	|  |   movea.l 4(sp),a0
    8d08:	|  |   move.b d0,115(a0)
    8d0c:	|  |   movea.l 4(sp),a0
    8d10:	|  |   move.b 115(a0),d0
    8d14:	|  |   movea.l 4(sp),a0
    8d18:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    8d1c:	|  |   movea.l 4(sp),a0
    8d20:	|  |   st 117(a0)
			moveMe->transparency = 192;
    8d24:	|  |   movea.l 4(sp),a0
    8d28:	|  |   move.b #-64,118(a0)
			break;
    8d2e:	|  +-- bra.w 8f5c <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    8d32:	|  |   movea.l 4(sp),a0
    8d36:	|  |   move.b #-128,116(a0)
    8d3c:	|  |   movea.l 4(sp),a0
    8d40:	|  |   move.b 116(a0),d0
    8d44:	|  |   movea.l 4(sp),a0
    8d48:	|  |   move.b d0,115(a0)
    8d4c:	|  |   movea.l 4(sp),a0
    8d50:	|  |   move.b 115(a0),d0
    8d54:	|  |   movea.l 4(sp),a0
    8d58:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    8d5c:	|  |   movea.l 4(sp),a0
    8d60:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    8d66:	|  |   movea.l 4(sp),a0
    8d6a:	|  |   clr.b 118(a0)
			break;
    8d6e:	|  +-- bra.w 8f5c <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    8d72:	|  |   movea.l 4(sp),a0
    8d76:	|  |   move.b #-128,116(a0)
    8d7c:	|  |   movea.l 4(sp),a0
    8d80:	|  |   move.b 116(a0),d0
    8d84:	|  |   movea.l 4(sp),a0
    8d88:	|  |   move.b d0,115(a0)
    8d8c:	|  |   movea.l 4(sp),a0
    8d90:	|  |   move.b 115(a0),d0
    8d94:	|  |   movea.l 4(sp),a0
    8d98:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    8d9c:	|  |   movea.l 4(sp),a0
    8da0:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    8da6:	|  |   movea.l 4(sp),a0
    8daa:	|  |   clr.b 118(a0)
			break;
    8dae:	|  +-- bra.w 8f5c <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    8db2:	|  |   movea.l 4(sp),a0
    8db6:	|  |   move.b #-128,116(a0)
    8dbc:	|  |   movea.l 4(sp),a0
    8dc0:	|  |   move.b 116(a0),d0
    8dc4:	|  |   movea.l 4(sp),a0
    8dc8:	|  |   move.b d0,115(a0)
    8dcc:	|  |   movea.l 4(sp),a0
    8dd0:	|  |   move.b 115(a0),d0
    8dd4:	|  |   movea.l 4(sp),a0
    8dd8:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    8ddc:	|  |   movea.l 4(sp),a0
    8de0:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    8de6:	|  |   movea.l 4(sp),a0
    8dea:	|  |   clr.b 118(a0)
			break;
    8dee:	|  +-- bra.w 8f5c <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    8df2:	|  |   movea.l 4(sp),a0
    8df6:	|  |   move.b #-128,116(a0)
    8dfc:	|  |   movea.l 4(sp),a0
    8e00:	|  |   move.b 116(a0),d0
    8e04:	|  |   movea.l 4(sp),a0
    8e08:	|  |   move.b d0,115(a0)
    8e0c:	|  |   movea.l 4(sp),a0
    8e10:	|  |   move.b 115(a0),d0
    8e14:	|  |   movea.l 4(sp),a0
    8e18:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    8e1c:	|  |   movea.l 4(sp),a0
    8e20:	|  |   st 117(a0)
			moveMe->transparency = 0;
    8e24:	|  |   movea.l 4(sp),a0
    8e28:	|  |   clr.b 118(a0)
			break;
    8e2c:	|  +-- bra.w 8f5c <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    8e30:	|  |   movea.l 4(sp),a0
    8e34:	|  |   st 116(a0)
    8e38:	|  |   movea.l 4(sp),a0
    8e3c:	|  |   move.b 116(a0),d0
    8e40:	|  |   movea.l 4(sp),a0
    8e44:	|  |   move.b d0,115(a0)
    8e48:	|  |   movea.l 4(sp),a0
    8e4c:	|  |   move.b 115(a0),d0
    8e50:	|  |   movea.l 4(sp),a0
    8e54:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    8e58:	|  |   movea.l 4(sp),a0
    8e5c:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    8e62:	|  |   movea.l 4(sp),a0
    8e66:	|  |   clr.b 118(a0)
			break;
    8e6a:	|  +-- bra.w 8f5c <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    8e6e:	|  |   movea.l 4(sp),a0
    8e72:	|  |   st 116(a0)
    8e76:	|  |   movea.l 4(sp),a0
    8e7a:	|  |   move.b 116(a0),d0
    8e7e:	|  |   movea.l 4(sp),a0
    8e82:	|  |   move.b d0,115(a0)
    8e86:	|  |   movea.l 4(sp),a0
    8e8a:	|  |   move.b 115(a0),d0
    8e8e:	|  |   movea.l 4(sp),a0
    8e92:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    8e96:	|  |   movea.l 4(sp),a0
    8e9a:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    8ea0:	|  |   movea.l 4(sp),a0
    8ea4:	|  |   clr.b 118(a0)
			break;
    8ea8:	|  +-- bra.w 8f5c <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    8eac:	|  |   movea.l 4(sp),a0
    8eb0:	|  |   st 116(a0)
    8eb4:	|  |   movea.l 4(sp),a0
    8eb8:	|  |   move.b 116(a0),d0
    8ebc:	|  |   movea.l 4(sp),a0
    8ec0:	|  |   move.b d0,115(a0)
    8ec4:	|  |   movea.l 4(sp),a0
    8ec8:	|  |   move.b 115(a0),d0
    8ecc:	|  |   movea.l 4(sp),a0
    8ed0:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    8ed4:	|  |   movea.l 4(sp),a0
    8ed8:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    8ede:	|  |   movea.l 4(sp),a0
    8ee2:	|  |   clr.b 118(a0)
			break;
    8ee6:	|  +-- bra.s 8f5c <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    8ee8:	|  |   movea.l 4(sp),a0
    8eec:	|  |   st 116(a0)
    8ef0:	|  |   movea.l 4(sp),a0
    8ef4:	|  |   move.b 116(a0),d0
    8ef8:	|  |   movea.l 4(sp),a0
    8efc:	|  |   move.b d0,115(a0)
    8f00:	|  |   movea.l 4(sp),a0
    8f04:	|  |   move.b 115(a0),d0
    8f08:	|  |   movea.l 4(sp),a0
    8f0c:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    8f10:	|  |   movea.l 4(sp),a0
    8f14:	|  |   st 117(a0)
			moveMe->transparency = 0;
    8f18:	|  |   movea.l 4(sp),a0
    8f1c:	|  |   clr.b 118(a0)
			break;
    8f20:	|  +-- bra.s 8f5c <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8f22:	\--|-> movea.l 4(sp),a0
    8f26:	   |   clr.b 116(a0)
    8f2a:	   |   movea.l 4(sp),a0
    8f2e:	   |   move.b 116(a0),d0
    8f32:	   |   movea.l 4(sp),a0
    8f36:	   |   move.b d0,115(a0)
    8f3a:	   |   movea.l 4(sp),a0
    8f3e:	   |   move.b 115(a0),d0
    8f42:	   |   movea.l 4(sp),a0
    8f46:	   |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    8f4a:	   |   movea.l 4(sp),a0
    8f4e:	   |   clr.b 117(a0)
			moveMe->transparency = 0;
    8f52:	   |   movea.l 4(sp),a0
    8f56:	   |   clr.b 118(a0)
			break;
    8f5a:	   |   nop
	}
}
    8f5c:	   \-> nop
    8f5e:	       rts

00008f60 <shufflePeople>:

void shufflePeople () {
    8f60:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    8f64:	             move.l #101496,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    8f6c:	             move.l 18c78 <allPeople>,d0
    8f72:	/----------- beq.w 9048 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    8f76:	|     /----- bra.w 9038 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    8f7a:	|  /--|----> movea.l 16(sp),a0
    8f7e:	|  |  |      movea.l (a0),a0
    8f80:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    8f86:	|  |  |      movea.l 16(sp),a0
    8f8a:	|  |  |      movea.l (a0),a0
    8f8c:	|  |  |      move.l 106(a0),d0
    8f90:	|  |  |      moveq #1,d1
    8f92:	|  |  |      and.l d1,d0
    8f94:	|  |  |  /-- beq.s 8fac <shufflePeople+0x4c>
    8f96:	|  |  |  |   move.l #1148846080,-(sp)
    8f9c:	|  |  |  |   move.l 16(sp),-(sp)
    8fa0:	|  |  |  |   jsr 13ab4 <__addsf3>
    8fa6:	|  |  |  |   addq.l #8,sp
    8fa8:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    8fac:	|  |  |  \-> movea.l 16(sp),a0
    8fb0:	|  |  |      movea.l (a0),a0
    8fb2:	|  |  |      movea.l 24(a0),a0
    8fb6:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    8fbc:	|  |  |      movea.l 16(sp),a0
    8fc0:	|  |  |      movea.l (a0),a0
    8fc2:	|  |  |      movea.l 24(a0),a0
    8fc6:	|  |  |      move.l 106(a0),d0
    8fca:	|  |  |      moveq #1,d1
    8fcc:	|  |  |      and.l d1,d0
    8fce:	|  |  |  /-- beq.s 8fe6 <shufflePeople+0x86>
    8fd0:	|  |  |  |   move.l #1148846080,-(sp)
    8fd6:	|  |  |  |   move.l 12(sp),-(sp)
    8fda:	|  |  |  |   jsr 13ab4 <__addsf3>
    8fe0:	|  |  |  |   addq.l #8,sp
    8fe2:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    8fe6:	|  |  |  \-> move.l 8(sp),-(sp)
    8fea:	|  |  |      move.l 16(sp),-(sp)
    8fee:	|  |  |      jsr 13e6e <__gtsf2>
    8ff4:	|  |  |      addq.l #8,sp
    8ff6:	|  |  |      tst.l d0
    8ff8:	|  |  |  /-- ble.s 902a <shufflePeople+0xca>
			A = (*thisReference);
    8ffa:	|  |  |  |   movea.l 16(sp),a0
    8ffe:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    9002:	|  |  |  |   movea.l 16(sp),a0
    9006:	|  |  |  |   movea.l (a0),a0
    9008:	|  |  |  |   move.l 24(a0),(sp)
			A->next = B->next;
    900c:	|  |  |  |   movea.l (sp),a0
    900e:	|  |  |  |   move.l 24(a0),d0
    9012:	|  |  |  |   movea.l 4(sp),a0
    9016:	|  |  |  |   move.l d0,24(a0)
			B->next = A;
    901a:	|  |  |  |   movea.l (sp),a0
    901c:	|  |  |  |   move.l 4(sp),24(a0)
			(*thisReference) = B;
    9022:	|  |  |  |   movea.l 16(sp),a0
    9026:	|  |  |  |   move.l (sp),(a0)
    9028:	|  |  +--|-- bra.s 9038 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    902a:	|  |  |  \-> movea.l 16(sp),a0
    902e:	|  |  |      move.l (a0),d0
    9030:	|  |  |      moveq #24,d1
    9032:	|  |  |      add.l d0,d1
    9034:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    9038:	|  |  \----> movea.l 16(sp),a0
    903c:	|  |         movea.l (a0),a0
    903e:	|  |         move.l 24(a0),d0
    9042:	|  \-------- bne.w 8f7a <shufflePeople+0x1a>
    9046:	|        /-- bra.s 904a <shufflePeople+0xea>
	if (!allPeople) return;
    9048:	\--------|-> nop
		}
	}
}
    904a:	         \-> lea 20(sp),sp
    904e:	             rts

00009050 <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    9050:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    9052:	       tst.l 8(sp)
    9056:	   /-- bgt.s 905c <setCharacterWalkSpeed+0xc>
    9058:	   |   clr.w d0
    905a:	/--|-- bra.s 907a <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    905c:	|  \-> move.l 12(sp),-(sp)
    9060:	|      jsr 7aec <findPerson>
    9066:	|      addq.l #4,sp
    9068:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    906a:	|  /-- bne.s 9070 <setCharacterWalkSpeed+0x20>
    906c:	|  |   clr.w d0
    906e:	+--|-- bra.s 907a <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    9070:	|  \-> movea.l (sp),a0
    9072:	|      move.l 8(sp),16(a0)
	return TRUE;
    9078:	|      moveq #1,d0
}
    907a:	\----> addq.l #4,sp
    907c:	       rts

0000907e <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    907e:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    9080:	       move.l 8(sp),-(sp)
    9084:	       jsr 7aec <findPerson>
    908a:	       addq.l #4,sp
    908c:	       move.l d0,(sp)
    if (thisPerson) {
    908e:	/----- beq.s 90ae <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    9090:	|      movea.l (sp),a0
    9092:	|      move.l 12(sp),106(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    9098:	|      moveq #2,d0
    909a:	|      and.l 12(sp),d0
    909e:	|  /-- beq.s 90aa <setPersonExtra+0x2c>
    90a0:	|  |   movea.l (sp),a0
    90a2:	|  |   move.l #1065353216,20(a0)
        return TRUE;
    90aa:	|  \-> moveq #1,d0
    90ac:	|  /-- bra.s 90b0 <setPersonExtra+0x32>
    }
    return FALSE;
    90ae:	\--|-> clr.w d0
}
    90b0:	   \-> addq.l #4,sp
    90b2:	       rts

000090b4 <setScale>:


void setScale (short int h, short int d) {
    90b4:	subq.l #4,sp
    90b6:	move.l 8(sp),d1
    90ba:	move.l 12(sp),d0
    90be:	move.w d1,d1
    90c0:	move.w d1,2(sp)
    90c4:	move.w d0,d0
    90c6:	move.w d0,(sp)
	scaleHorizon = h;
    90c8:	move.w 2(sp),1856c <scaleHorizon>
	scaleDivide = d;
    90d0:	move.w (sp),1856e <scaleDivide>
}
    90d6:	nop
    90d8:	addq.l #4,sp
    90da:	rts

000090dc <setShown>:

void setShown (BOOL h, int ob) {
    90dc:	    subq.l #8,sp
    90de:	    move.l 12(sp),d0
    90e2:	    move.w d0,d0
    90e4:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    90e8:	    move.l 16(sp),-(sp)
    90ec:	    jsr 7aec <findPerson>
    90f2:	    addq.l #4,sp
    90f4:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    90f8:	/-- beq.s 9104 <setShown+0x28>
    90fa:	|   movea.l 4(sp),a0
    90fe:	|   move.w 2(sp),92(a0)
}
    9104:	\-> nop
    9106:	    addq.l #8,sp
    9108:	    rts

0000910a <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    910a:	       subq.l #8,sp
    910c:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    910e:	       movea.l 16(sp),a0
    9112:	       move.l 80(a0),d0
    9116:	       move.l d0,d1
    9118:	       addi.l #360,d1
    911e:	       movea.l 16(sp),a0
    9122:	       move.l 84(a0),d0
    9126:	       move.l d1,d2
    9128:	       sub.l d0,d2
    912a:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    912e:	       movea.l 16(sp),a0
    9132:	       move.l 110(a0),d0
    9136:	   /-- beq.s 9142 <spinStep+0x38>
    9138:	   |   movea.l 16(sp),a0
    913c:	   |   move.l 110(a0),d0
    9140:	/--|-- bra.s 915c <spinStep+0x52>
    9142:	|  \-> movea.l 16(sp),a0
    9146:	|      movea.l 68(a0),a0
    914a:	|      move.l 4(a0),d0
    914e:	|      move.l d0,-(sp)
    9150:	|      pea 168 <decodeFilename+0x50>
    9154:	|      jsr 14302 <__divsi3>
    915a:	|      addq.l #8,sp
    915c:	\----> move.l d0,4(sp)
	while (diff > 180) {
    9160:	   /-- bra.s 916a <spinStep+0x60>
		diff -= 360;
    9162:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    916a:	|  \-> cmpi.l #180,8(sp)
    9172:	\----- bgt.s 9162 <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    9174:	       move.l 8(sp),d0
    9178:	       cmp.l 4(sp),d0
    917c:	   /-- blt.s 919a <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    917e:	   |   movea.l 16(sp),a0
    9182:	   |   move.l 80(a0),d0
    9186:	   |   sub.l 4(sp),d0
    918a:	   |   move.l d0,-(sp)
    918c:	   |   move.l 20(sp),-(sp)
    9190:	   |   jsr 927a <turnMeAngle>
    9196:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    9198:	/--|-- bra.s 91e0 <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    919a:	|  \-> move.l 4(sp),d0
    919e:	|      neg.l d0
    91a0:	|      cmp.l 8(sp),d0
    91a4:	|  /-- blt.s 91c2 <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    91a6:	|  |   movea.l 16(sp),a0
    91aa:	|  |   move.l 80(a0),d0
    91ae:	|  |   add.l 4(sp),d0
    91b2:	|  |   move.l d0,-(sp)
    91b4:	|  |   move.l 20(sp),-(sp)
    91b8:	|  |   jsr 927a <turnMeAngle>
    91be:	|  |   addq.l #8,sp
}
    91c0:	+--|-- bra.s 91e0 <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    91c2:	|  \-> movea.l 16(sp),a0
    91c6:	|      move.l 84(a0),d0
    91ca:	|      move.l d0,-(sp)
    91cc:	|      move.l 20(sp),-(sp)
    91d0:	|      jsr 927a <turnMeAngle>
    91d6:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    91d8:	|      movea.l 16(sp),a0
    91dc:	|      clr.w 54(a0)
}
    91e0:	\----> nop
    91e2:	       move.l (sp)+,d2
    91e4:	       addq.l #8,sp
    91e6:	       rts

000091e8 <stopPerson>:


BOOL stopPerson (int o) {
    91e8:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    91ea:	       move.l 8(sp),-(sp)
    91ee:	       jsr 7aec <findPerson>
    91f4:	       addq.l #4,sp
    91f6:	       move.l d0,(sp)
    if (moveMe)
    91f8:	/----- beq.s 9236 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    91fa:	|      movea.l (sp),a0
    91fc:	|      move.l 56(a0),d0
    9200:	+----- beq.s 9236 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    9202:	|      movea.l (sp),a0
    9204:	|      move.l 56(a0),d0
    9208:	|      move.l d0,-(sp)
    920a:	|      jsr 21b6 <abortFunction>
    9210:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    9212:	|      movea.l (sp),a0
    9214:	|      clr.l 56(a0)
            moveMe -> walking = FALSE;
    9218:	|      movea.l (sp),a0
    921a:	|      clr.w 52(a0)
            moveMe -> spinning = FALSE;
    921e:	|      movea.l (sp),a0
    9220:	|      clr.w 54(a0)
            setFrames(moveMe, ANI_STAND);
    9224:	|      clr.l -(sp)
    9226:	|      move.l 4(sp),-(sp)
    922a:	|      jsr 593c <setFrames>
    9230:	|      addq.l #8,sp
            return TRUE;
    9232:	|      moveq #1,d0
    9234:	|  /-- bra.s 9238 <stopPerson+0x50>
        }
    return FALSE;
    9236:	\--|-> clr.w d0
}
    9238:	   \-> addq.l #4,sp
    923a:	       rts

0000923c <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    923c:	       subq.l #8,sp
	int total = 0;
    923e:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    9242:	       clr.l (sp)
    9244:	   /-- bra.s 9266 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    9246:	/--|-> movea.l 12(sp),a0
    924a:	|  |   movea.l 4(a0),a0
    924e:	|  |   move.l (sp),d1
    9250:	|  |   move.l d1,d0
    9252:	|  |   add.l d0,d0
    9254:	|  |   add.l d1,d0
    9256:	|  |   add.l d0,d0
    9258:	|  |   add.l d0,d0
    925a:	|  |   adda.l d0,a0
    925c:	|  |   move.l 4(a0),d0
    9260:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    9264:	|  |   addq.l #1,(sp)
    9266:	|  \-> movea.l 12(sp),a0
    926a:	|      move.l 8(a0),d0
    926e:	|      cmp.l (sp),d0
    9270:	\----- bgt.s 9246 <timeForAnim+0xa>
	}
	return total;
    9272:	       move.l 4(sp),d0
}
    9276:	       addq.l #8,sp
    9278:	       rts

0000927a <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    927a:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    927c:	       movea.l 8(sp),a0
    9280:	       movea.l 68(a0),a0
    9284:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    9288:	       movea.l 8(sp),a0
    928c:	       move.l 12(sp),80(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    9292:	       move.l (sp),-(sp)
    9294:	       pea b4 <_start+0xb4>
    9298:	       jsr 14302 <__divsi3>
    929e:	       addq.l #8,sp
    92a0:	       move.l d0,d1
    92a2:	       addi.l #180,d1
    92a8:	       movea.l 8(sp),a0
    92ac:	       move.l 88(a0),d0
    92b0:	       add.l d1,d0
    92b2:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    92b6:	   /-- bra.s 92c0 <turnMeAngle+0x46>
    92b8:	/--|-> addi.l #-360,12(sp)
    92c0:	|  \-> cmpi.l #359,12(sp)
    92c8:	\----- bgt.s 92b8 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    92ca:	       move.l (sp),-(sp)
    92cc:	       move.l 16(sp),-(sp)
    92d0:	       jsr 14284 <__mulsi3>
    92d6:	       addq.l #8,sp
    92d8:	       pea 168 <decodeFilename+0x50>
    92dc:	       move.l d0,-(sp)
    92de:	       jsr 14302 <__divsi3>
    92e4:	       addq.l #8,sp
    92e6:	       movea.l 8(sp),a0
    92ea:	       move.l d0,94(a0)
}
    92ee:	       nop
    92f0:	       addq.l #4,sp
    92f2:	       rts

000092f4 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    92f4:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    92f6:	          move.l 8(sp),-(sp)
    92fa:	          jsr 7aec <findPerson>
    9300:	          addq.l #4,sp
    9302:	          move.l d0,(sp)
    if (thisPerson) {
    9304:	/-------- beq.s 9364 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    9306:	|         movea.l (sp),a0
    9308:	|         move.l 56(a0),d0
    930c:	|     /-- beq.s 931e <turnPersonToFace+0x2a>
    930e:	|     |   movea.l (sp),a0
    9310:	|     |   move.l 56(a0),d0
    9314:	|     |   move.l d0,-(sp)
    9316:	|     |   jsr 21b6 <abortFunction>
    931c:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    931e:	|     \-> movea.l (sp),a0
    9320:	|         clr.l 56(a0)
        thisPerson -> walking = FALSE;
    9324:	|         movea.l (sp),a0
    9326:	|         clr.w 52(a0)
        thisPerson -> spinning = FALSE;
    932a:	|         movea.l (sp),a0
    932c:	|         clr.w 54(a0)
        turnMeAngle(thisPerson, direc);
    9330:	|         move.l 12(sp),-(sp)
    9334:	|         move.l 4(sp),-(sp)
    9338:	|         jsr 927a <turnMeAngle>
    933e:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    9340:	|         movea.l 18c1c <speech>,a0
    9346:	|         move.l (a0),d0
    9348:	|         cmp.l (sp),d0
    934a:	|  /----- bne.s 9350 <turnPersonToFace+0x5c>
    934c:	|  |      moveq #2,d0
    934e:	|  |  /-- bra.s 9352 <turnPersonToFace+0x5e>
    9350:	|  \--|-> moveq #0,d0
    9352:	|     \-> move.l d0,-(sp)
    9354:	|         move.l 4(sp),-(sp)
    9358:	|         jsr 593c <setFrames>
    935e:	|         addq.l #8,sp
        return TRUE;
    9360:	|         moveq #1,d0
    9362:	|     /-- bra.s 9366 <turnPersonToFace+0x72>
    }
    return FALSE;
    9364:	\-----|-> clr.w d0
}
    9366:	      \-> addq.l #4,sp
    9368:	          rts

0000936a <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    936a:	                lea -20(sp),sp
    936e:	                move.l d3,-(sp)
    9370:	                move.l d2,-(sp)
    9372:	                move.l 36(sp),d0
    9376:	                move.w d0,d0
    9378:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    937c:	                cmpi.w #-1,10(sp)
    9382:	/-------------- bne.s 938a <walkMe+0x20>
    9384:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    938a:	>-------------> movea.l 32(sp),a0
    938e:	|               move.l 36(a0),d0
    9392:	|               move.l d0,-(sp)
    9394:	|               jsr 13d02 <__floatsisf>
    939a:	|               addq.l #4,sp
    939c:	|               move.l d0,d1
    939e:	|               movea.l 32(sp),a0
    93a2:	|               move.l (a0),d0
    93a4:	|               move.l d0,-(sp)
    93a6:	|               move.l d1,-(sp)
    93a8:	|               jsr 13ff6 <__subsf3>
    93ae:	|               addq.l #8,sp
    93b0:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    93b4:	|               movea.l 32(sp),a0
    93b8:	|               move.l 40(a0),d0
    93bc:	|               move.l d0,-(sp)
    93be:	|               jsr 13d02 <__floatsisf>
    93c4:	|               addq.l #4,sp
    93c6:	|               move.l d0,d1
    93c8:	|               movea.l 32(sp),a0
    93cc:	|               move.l 4(a0),d0
    93d0:	|               move.l d0,-(sp)
    93d2:	|               move.l d1,-(sp)
    93d4:	|               jsr 13ff6 <__subsf3>
    93da:	|               addq.l #8,sp
    93dc:	|               move.l d0,-(sp)
    93de:	|               move.l d0,-(sp)
    93e0:	|               jsr 13ab4 <__addsf3>
    93e6:	|               addq.l #8,sp
    93e8:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    93ec:	|               movea.l 32(sp),a0
    93f0:	|               move.l 20(a0),d2
    93f4:	|               movea.l 32(sp),a0
    93f8:	|               move.l 16(a0),d0
    93fc:	|               move.l d0,-(sp)
    93fe:	|               jsr 13d02 <__floatsisf>
    9404:	|               addq.l #4,sp
    9406:	|               move.l d0,-(sp)
    9408:	|               move.l d2,-(sp)
    940a:	|               jsr 13db4 <__mulsf3>
    9410:	|               addq.l #8,sp
    9412:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    9416:	|               move.l 24(sp),-(sp)
    941a:	|               jsr 13c1a <__extendsfdf2>
    9420:	|               addq.l #4,sp
    9422:	|               move.l #-1717986918,-(sp)
    9428:	|               move.l #1070176665,-(sp)
    942e:	|               move.l d1,-(sp)
    9430:	|               move.l d0,-(sp)
    9432:	|               jsr 13eda <__ltdf2>
    9438:	|               lea 16(sp),sp
    943c:	|               tst.l d0
    943e:	|           /-- bge.s 9448 <walkMe+0xde>
    9440:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    9448:	|           \-> move.l 20(sp),-(sp)
    944c:	|               jsr 13c9a <__fixsfsi>
    9452:	|               addq.l #4,sp
    9454:	|               move.l d0,-(sp)
    9456:	|               jsr 67b2 <TF_abs>
    945c:	|               addq.l #4,sp
    945e:	|               move.l d0,d2
    9460:	|               move.l 16(sp),-(sp)
    9464:	|               jsr 13c9a <__fixsfsi>
    946a:	|               addq.l #4,sp
    946c:	|               move.l d0,-(sp)
    946e:	|               jsr 67b2 <TF_abs>
    9474:	|               addq.l #4,sp
    9476:	|               cmp.l d2,d0
    9478:	|        /----- bgt.s 949c <walkMe+0x132>
    947a:	|        |      move.l 20(sp),-(sp)
    947e:	|        |      jsr 13c9a <__fixsfsi>
    9484:	|        |      addq.l #4,sp
    9486:	|        |      move.l d0,-(sp)
    9488:	|        |      jsr 67b2 <TF_abs>
    948e:	|        |      addq.l #4,sp
    9490:	|        |      move.l d0,-(sp)
    9492:	|        |      jsr 13d02 <__floatsisf>
    9498:	|        |      addq.l #4,sp
    949a:	|        |  /-- bra.s 94bc <walkMe+0x152>
    949c:	|        \--|-> move.l 16(sp),-(sp)
    94a0:	|           |   jsr 13c9a <__fixsfsi>
    94a6:	|           |   addq.l #4,sp
    94a8:	|           |   move.l d0,-(sp)
    94aa:	|           |   jsr 67b2 <TF_abs>
    94b0:	|           |   addq.l #4,sp
    94b2:	|           |   move.l d0,-(sp)
    94b4:	|           |   jsr 13d02 <__floatsisf>
    94ba:	|           |   addq.l #4,sp
    94bc:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    94c0:	|               move.l 12(sp),-(sp)
    94c4:	|               jsr 13c9a <__fixsfsi>
    94ca:	|               addq.l #4,sp
    94cc:	|               move.l d0,-(sp)
    94ce:	|               jsr 67b2 <TF_abs>
    94d4:	|               addq.l #4,sp
    94d6:	|               move.l d0,-(sp)
    94d8:	|               jsr 13d02 <__floatsisf>
    94de:	|               addq.l #4,sp
    94e0:	|               move.l d0,-(sp)
    94e2:	|               move.l 28(sp),-(sp)
    94e6:	|               jsr 13f28 <__ltsf2>
    94ec:	|               addq.l #8,sp
    94ee:	|               tst.l d0
    94f0:	|        /----- bge.w 95a2 <walkMe+0x238>
			if (thisPerson->spinning) {
    94f4:	|        |      movea.l 32(sp),a0
    94f8:	|        |      move.w 54(a0),d0
    94fc:	|        |  /-- beq.s 951a <walkMe+0x1b0>
				spinStep(thisPerson);
    94fe:	|        |  |   move.l 32(sp),-(sp)
    9502:	|        |  |   jsr 910a <spinStep>
    9508:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    950a:	|        |  |   pea 1 <_start+0x1>
    950e:	|        |  |   move.l 36(sp),-(sp)
    9512:	|        |  |   jsr 593c <setFrames>
    9518:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    951a:	|        |  \-> move.l 24(sp),-(sp)
    951e:	|        |      move.l 16(sp),-(sp)
    9522:	|        |      jsr 13bae <__divsf3>
    9528:	|        |      addq.l #8,sp
    952a:	|        |      move.l d0,24(sp)
			if (move)
    952e:	|        |      tst.w 10(sp)
    9532:	|        |  /-- beq.s 959c <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    9534:	|        |  |   movea.l 32(sp),a0
    9538:	|        |  |   move.l 4(a0),d2
    953c:	|        |  |   move.l 24(sp),d0
    9540:	|        |  |   move.l d0,-(sp)
    9542:	|        |  |   move.l d0,-(sp)
    9544:	|        |  |   jsr 13ab4 <__addsf3>
    954a:	|        |  |   addq.l #8,sp
    954c:	|        |  |   move.l d0,-(sp)
    954e:	|        |  |   move.l 20(sp),-(sp)
    9552:	|        |  |   jsr 13bae <__divsf3>
    9558:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    955a:	|        |  |   move.l d0,-(sp)
    955c:	|        |  |   move.l d2,-(sp)
    955e:	|        |  |   jsr 13ab4 <__addsf3>
    9564:	|        |  |   addq.l #8,sp
    9566:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    9568:	|        |  |   movea.l 32(sp),a0
    956c:	|        |  |   move.l (a0),d3
    956e:	|        |  |   move.l 24(sp),-(sp)
    9572:	|        |  |   move.l 24(sp),-(sp)
    9576:	|        |  |   jsr 13bae <__divsf3>
    957c:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    957e:	|        |  |   move.l d0,-(sp)
    9580:	|        |  |   move.l d3,-(sp)
    9582:	|        |  |   jsr 13ab4 <__addsf3>
    9588:	|        |  |   addq.l #8,sp
    958a:	|        |  |   move.l d2,-(sp)
    958c:	|        |  |   move.l d0,-(sp)
    958e:	|        |  |   move.l 40(sp),-(sp)
    9592:	|        |  |   jsr 8234 <moveAndScale>
    9598:	|        |  |   lea 12(sp),sp
			return TRUE;
    959c:	|        |  \-> moveq #1,d0
    959e:	|  /-----|----- bra.w 9650 <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    95a2:	|  |     \----> movea.l 32(sp),a0
    95a6:	|  |            move.l 44(a0),d0
    95aa:	|  |            moveq #-1,d1
    95ac:	|  |            cmp.l d0,d1
    95ae:	|  |        /-- bne.s 95e6 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    95b0:	|  |        |   movea.l 32(sp),a0
    95b4:	|  |        |   move.l 98(a0),d0
    95b8:	|  |        |   moveq #-1,d1
    95ba:	|  |        |   cmp.l d0,d1
    95bc:	|  |  /-----|-- beq.s 95fa <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    95be:	|  |  |     |   movea.l 32(sp),a0
    95c2:	|  |  |     |   move.l 98(a0),d0
    95c6:	|  |  |     |   movea.l 32(sp),a0
    95ca:	|  |  |     |   move.l d0,84(a0)
				thisPerson->spinning = TRUE;
    95ce:	|  |  |     |   movea.l 32(sp),a0
    95d2:	|  |  |     |   move.w #1,54(a0)
				spinStep(thisPerson);
    95d8:	|  |  |     |   move.l 32(sp),-(sp)
    95dc:	|  |  |     |   jsr 910a <spinStep>
    95e2:	|  |  |     |   addq.l #4,sp
			}
			break;
    95e4:	|  |  +-----|-- bra.s 95fa <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    95e6:	|  |  |     \-> move.l 32(sp),-(sp)
    95ea:	|  |  |         jsr 6ede <doBorderStuff>
    95f0:	|  |  |         addq.l #4,sp
    95f2:	|  |  |         tst.w d0
    95f4:	|  |  |  /----- beq.s 95fe <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    95f6:	\--|--|--|----- bra.w 938a <walkMe+0x20>
			break;
    95fa:	   |  \--|----> nop
    95fc:	   |     |  /-- bra.s 9600 <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    95fe:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    9600:	   |        \-> movea.l 32(sp),a0
    9604:	   |            clr.w 52(a0)
	setFrames(thisPerson, ANI_STAND);
    9608:	   |            clr.l -(sp)
    960a:	   |            move.l 36(sp),-(sp)
    960e:	   |            jsr 593c <setFrames>
    9614:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    9616:	   |            movea.l 32(sp),a0
    961a:	   |            move.l 32(a0),d0
	moveAndScale(thisPerson,
    961e:	   |            move.l d0,-(sp)
    9620:	   |            jsr 13d02 <__floatsisf>
    9626:	   |            addq.l #4,sp
    9628:	   |            move.l d0,d2
				 thisPerson->walkToX,
    962a:	   |            movea.l 32(sp),a0
    962e:	   |            move.l 28(a0),d0
	moveAndScale(thisPerson,
    9632:	   |            move.l d0,-(sp)
    9634:	   |            jsr 13d02 <__floatsisf>
    963a:	   |            addq.l #4,sp
    963c:	   |            move.l d2,-(sp)
    963e:	   |            move.l d0,-(sp)
    9640:	   |            move.l 40(sp),-(sp)
    9644:	   |            jsr 8234 <moveAndScale>
    964a:	   |            lea 12(sp),sp
	return FALSE;
    964e:	   |            clr.w d0
}
    9650:	   \----------> move.l (sp)+,d2
    9652:	                move.l (sp)+,d3
    9654:	                lea 20(sp),sp
    9658:	                rts

0000965a <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
    965a:	             lea -20(sp),sp
    965e:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);
	struct loadedSpriteBank * returnMe = allLoadedBanks;
    9660:	             move.l 18ca0 <allLoadedBanks>,20(sp)
	while (returnMe) {
    9668:	      /----- bra.s 9688 <loadBankForAnim+0x2e>
		if (returnMe->ID == ID) {
    966a:	   /--|----> movea.l 20(sp),a0
    966e:	   |  |      move.l (a0),d0
    9670:	   |  |      cmp.l 28(sp),d0
    9674:	   |  |  /-- bne.s 967e <loadBankForAnim+0x24>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			return returnMe;
    9676:	   |  |  |   move.l 20(sp),d0
    967a:	/--|--|--|-- bra.w 973a <loadBankForAnim+0xe0>
		}
		returnMe = returnMe->next;
    967e:	|  |  |  \-> movea.l 20(sp),a0
    9682:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
    9688:	|  |  \----> tst.l 20(sp)
    968c:	|  \-------- bne.s 966a <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
    968e:	|            moveq #26,d0
    9690:	|            move.l d0,16(sp)
    9694:	|            clr.l 12(sp)
    9698:	|            move.l 18bc0 <SysBase>,d0
    969e:	|            movea.l d0,a6
    96a0:	|            move.l 16(sp),d0
    96a4:	|            move.l 12(sp),d1
    96a8:	|            jsr -684(a6)
    96ac:	|            move.l d0,8(sp)
    96b0:	|            move.l 8(sp),d0
    96b4:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
    96b8:	|     /----- beq.s 9738 <loadBankForAnim+0xde>
		returnMe->ID = ID;
    96ba:	|     |      movea.l 20(sp),a0
    96be:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank, FALSE)) {
    96c2:	|     |      move.l 20(sp),d0
    96c6:	|     |      addq.l #8,d0
    96c8:	|     |      clr.l -(sp)
    96ca:	|     |      move.l d0,-(sp)
    96cc:	|     |      move.l 36(sp),-(sp)
    96d0:	|     |      jsr 6442 <loadSpriteBank>
    96d6:	|     |      lea 12(sp),sp
    96da:	|     |      tst.w d0
    96dc:	|     |  /-- beq.s 9710 <loadBankForAnim+0xb6>
			returnMe->timesUsed = 0;
    96de:	|     |  |   movea.l 20(sp),a0
    96e2:	|     |  |   clr.l 4(a0)
			returnMe->next = allLoadedBanks;
    96e6:	|     |  |   move.l 18ca0 <allLoadedBanks>,d0
    96ec:	|     |  |   movea.l 20(sp),a0
    96f0:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
    96f4:	|     |  |   move.l 20(sp),18ca0 <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
    96fc:	|     |  |   pea 15503 <custom.c.36a9b171+0x909>
    9702:	|     |  |   jsr 13a4a <KPrintF>
    9708:	|     |  |   addq.l #4,sp
			return returnMe;
    970a:	|     |  |   move.l 20(sp),d0
    970e:	+-----|--|-- bra.s 973a <loadBankForAnim+0xe0>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
    9710:	|     |  \-> pea 15530 <custom.c.36a9b171+0x936>
    9716:	|     |      jsr 13a4a <KPrintF>
    971c:	|     |      addq.l #4,sp
			FreeVec(returnMe);
    971e:	|     |      move.l 20(sp),4(sp)
    9724:	|     |      move.l 18bc0 <SysBase>,d0
    972a:	|     |      movea.l d0,a6
    972c:	|     |      movea.l 4(sp),a1
    9730:	|     |      jsr -690(a6)
			return NULL;
    9734:	|     |      moveq #0,d0
    9736:	+-----|----- bra.s 973a <loadBankForAnim+0xe0>
		}
	} else return NULL;
    9738:	|     \----> moveq #0,d0
}
    973a:	\----------> movea.l (sp)+,a6
    973c:	             lea 20(sp),sp
    9740:	             rts

00009742 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    9742:	       subq.l #8,sp
    9744:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    9746:	   /-- bra.s 9776 <clearStackLib+0x34>
		k = stackLib;
    9748:	/--|-> move.l 18ca8 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    9750:	|  |   movea.l 18ca8 <stackLib>,a0
    9756:	|  |   move.l 4(a0),d0
    975a:	|  |   move.l d0,18ca8 <stackLib>
		FreeVec(k);
    9760:	|  |   move.l 8(sp),4(sp)
    9766:	|  |   move.l 18bc0 <SysBase>,d0
    976c:	|  |   movea.l d0,a6
    976e:	|  |   movea.l 4(sp),a1
    9772:	|  |   jsr -690(a6)
	while (stackLib) {
    9776:	|  \-> move.l 18ca8 <stackLib>,d0
    977c:	\----- bne.s 9748 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    977e:	       clr.l 18ca4 <stackLibTotal>
}
    9784:	       nop
    9786:	       movea.l (sp)+,a6
    9788:	       addq.l #8,sp
    978a:	       rts

0000978c <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    978c:	          lea -128(sp),sp
    9790:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    9794:	      /-- bra.s 97a6 <loadGame+0x1a>
    9796:	   /--|-> move.l 18b58 <allRunningFunctions>,d0
    979c:	   |  |   move.l d0,-(sp)
    979e:	   |  |   jsr 31d0 <finishFunction>
    97a4:	   |  |   addq.l #4,sp
    97a6:	   |  \-> move.l 18b58 <allRunningFunctions>,d0
    97ac:	   \----- bne.s 9796 <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    97ae:	          pea 18cac <ssgVersion>
    97b4:	          pea 1558e <custom.c.36a9b171+0x994>
    97ba:	          pea 41 <_start+0x41>
    97be:	          pea 53 <_start+0x53>
    97c2:	          move.l 160(sp),-(sp)
    97c6:	          jsr 3cf8 <openAndVerify>
    97cc:	          lea 20(sp),sp
    97d0:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    97d4:	      /-- bne.s 97dc <loadGame+0x50>
    97d6:	      |   clr.w d0
    97d8:	/-----|-- bra.w 9a82 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    97dc:	|     \-> move.l 112(sp),108(sp)
    97e2:	|         lea 140(sp),a0
    97e6:	|         lea -126(a0),a0
    97ea:	|         move.l a0,120(sp)
    97ee:	|         moveq #8,d0
    97f0:	|         move.l d0,116(sp)
    97f4:	|         move.l 18bc8 <DOSBase>,d0
    97fa:	|         movea.l d0,a6
    97fc:	|         move.l 108(sp),d1
    9800:	|         move.l 120(sp),d2
    9804:	|         move.l 116(sp),d3
    9808:	|         jsr -42(a6)
    980c:	|         move.l d0,132(sp)
    9810:	|         move.l 132(sp),d0
    9814:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    9818:	|         moveq #8,d0
    981a:	|         cmp.l 128(sp),d0
    981e:	|     /-- beq.s 982e <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    9820:	|     |   pea 155af <custom.c.36a9b171+0x9b5>
    9826:	|     |   jsr 13a4a <KPrintF>
    982c:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    982e:	|     \-> move.l 14(sp),d1
    9832:	|         move.l 18b62 <fileTime>,d0
    9838:	|         cmp.l d1,d0
    983a:	|     /-- bne.s 984a <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    983c:	|     |   move.l 18(sp),d1
    9840:	|     |   move.l 18b66 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    9846:	|     |   cmp.l d1,d0
    9848:	|  /--|-- beq.s 986a <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    984a:	|  |  \-> move.l 144(sp),-(sp)
    984e:	|  |      pea 155cb <custom.c.36a9b171+0x9d1>
    9854:	|  |      pea 15692 <custom.c.36a9b171+0xa98>
    985a:	|  |      jsr 13a4a <KPrintF>
    9860:	|  |      lea 12(sp),sp
		return FALSE; 
    9864:	|  |      clr.w d0
    9866:	+--|----- bra.w 9a82 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    986a:	|  \----> move.l 112(sp),124(sp)
    9870:	|         move.l 18bc8 <DOSBase>,d0
    9876:	|         movea.l d0,a6
    9878:	|         move.l 124(sp),d1
    987c:	|         jsr -306(a6)
    9880:	|         move.l d0,136(sp)
    9884:	|         move.l 136(sp),d0
    9888:	|         move.l d0,d0
    988a:	|         move.w d0,18436 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    9890:	|         move.l 112(sp),100(sp)
    9896:	|         move.l 18bc8 <DOSBase>,d0
    989c:	|         movea.l d0,a6
    989e:	|         move.l 100(sp),d1
    98a2:	|         jsr -306(a6)
    98a6:	|         move.l d0,96(sp)
    98aa:	|         move.l 96(sp),d0
    98ae:	|         move.l d0,d0
    98b0:	|         move.w d0,18b60 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    98b6:	|         move.l 112(sp),92(sp)
    98bc:	|         move.l 18bc8 <DOSBase>,d0
    98c2:	|         movea.l d0,a6
    98c4:	|         move.l 92(sp),d1
    98c8:	|         jsr -306(a6)
    98cc:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    98d0:	|         move.l 112(sp),84(sp)
    98d6:	|         move.l 18bc8 <DOSBase>,d0
    98dc:	|         movea.l d0,a6
    98de:	|         move.l 84(sp),d1
    98e2:	|         jsr -306(a6)
    98e6:	|         move.l d0,80(sp)
    98ea:	|         move.l 80(sp),d0
    98ee:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    98f2:	|     /-- beq.s 9926 <loadGame+0x19a>
		fontNum = get2bytes (fp);
    98f4:	|     |   move.l 112(sp),-(sp)
    98f8:	|     |   jsr 6bc <get2bytes>
    98fe:	|     |   addq.l #4,sp
    9900:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    9904:	|     |   move.l 112(sp),-(sp)
    9908:	|     |   jsr 6bc <get2bytes>
    990e:	|     |   addq.l #4,sp
    9910:	|     |   move.l d0,18d08 <fontHeight>
		charOrder = readString(fp);		
    9916:	|     |   move.l 112(sp),-(sp)
    991a:	|     |   jsr b02 <readString>
    9920:	|     |   addq.l #4,sp
    9922:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    9926:	|     \-> move.l 104(sp),70(sp)
    992c:	|         move.l 18bc0 <SysBase>,d0
    9932:	|         movea.l d0,a6
    9934:	|         movea.l 70(sp),a1
    9938:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    993c:	|         move.l 112(sp),-(sp)
    9940:	|         jsr 854 <getSigned>
    9946:	|         addq.l #4,sp
    9948:	|         move.w d0,18ade <fontSpace>

	killAllPeople ();
    994e:	|         jsr 7ed6 <killAllPeople>
	killAllRegions ();
    9954:	|         jsr 124fa <killAllRegions>

	int camerX = get2bytes (fp);
    995a:	|         move.l 112(sp),-(sp)
    995e:	|         jsr 6bc <get2bytes>
    9964:	|         addq.l #4,sp
    9966:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    996a:	|         move.l 112(sp),-(sp)
    996e:	|         jsr 6bc <get2bytes>
    9974:	|         addq.l #4,sp
    9976:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    997a:	|         move.l 112(sp),-(sp)
    997e:	|         jsr 7d8 <getFloat>
    9984:	|         addq.l #4,sp
    9986:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    998a:	|         move.l 112(sp),54(sp)
    9990:	|         move.l 18bc8 <DOSBase>,d0
    9996:	|         movea.l d0,a6
    9998:	|         move.l 54(sp),d1
    999c:	|         jsr -306(a6)
    99a0:	|         move.l d0,50(sp)
    99a4:	|         move.l 50(sp),d0
    99a8:	|         move.l d0,d0
    99aa:	|         move.b d0,18550 <brightnessLevel>

	loadHandlers (fp);
    99b0:	|         move.l 112(sp),-(sp)
    99b4:	|         jsr 3c58 <loadHandlers>
    99ba:	|         addq.l #4,sp
	loadRegions (fp);
    99bc:	|         move.l 112(sp),-(sp)
    99c0:	|         jsr 12556 <loadRegions>
    99c6:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    99c8:	|         moveq #12,d0
    99ca:	|         move.l d0,46(sp)
    99ce:	|         clr.l 42(sp)
    99d2:	|         move.l 18bc0 <SysBase>,d0
    99d8:	|         movea.l d0,a6
    99da:	|         move.l 46(sp),d0
    99de:	|         move.l 42(sp),d1
    99e2:	|         jsr -684(a6)
    99e6:	|         move.l d0,38(sp)
    99ea:	|         move.l 38(sp),d0
    99ee:	|         move.l d0,18ae0 <mouseCursorAnim>
	if (! mouseCursorAnim) {
    99f4:	|         move.l 18ae0 <mouseCursorAnim>,d0
    99fa:	|     /-- bne.s 9a0e <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    99fc:	|     |   pea 1569c <custom.c.36a9b171+0xaa2>
    9a02:	|     |   jsr 13a4a <KPrintF>
    9a08:	|     |   addq.l #4,sp
		return FALSE;
    9a0a:	|     |   clr.w d0
    9a0c:	+-----|-- bra.s 9a82 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    9a0e:	|     \-> jsr a6de <nosnapshot>
	if (FGetC (fp)) {
    9a14:	|         move.l 112(sp),34(sp)
    9a1a:	|         move.l 18bc8 <DOSBase>,d0
    9a20:	|         movea.l d0,a6
    9a22:	|         move.l 34(sp),d1
    9a26:	|         jsr -306(a6)
    9a2a:	|         move.l d0,30(sp)
    9a2e:	|         move.l 30(sp),d0
    9a32:	|     /-- beq.s 9a48 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    9a34:	|     |   move.l 112(sp),-(sp)
    9a38:	|     |   jsr a752 <restoreSnapshot>
    9a3e:	|     |   addq.l #4,sp
    9a40:	|     |   tst.w d0
    9a42:	|     +-- bne.s 9a48 <loadGame+0x2bc>
    9a44:	|     |   clr.w d0
    9a46:	+-----|-- bra.s 9a82 <loadGame+0x2f6>
	}

	Close (fp);
    9a48:	|     \-> move.l 112(sp),26(sp)
    9a4e:	|         move.l 18bc8 <DOSBase>,d0
    9a54:	|         movea.l d0,a6
    9a56:	|         move.l 26(sp),d1
    9a5a:	|         jsr -36(a6)
    9a5e:	|         move.l d0,22(sp)
	clearStackLib ();
    9a62:	|         jsr 9742 <clearStackLib>

	cameraX = camerX;
    9a68:	|         move.l 66(sp),18cce <cameraX>
	cameraY = camerY;
    9a70:	|         move.l 62(sp),18cd2 <cameraY>
	cameraZoom = camerZ;
    9a78:	|         move.l 58(sp),18578 <cameraZoom>

	return TRUE;
    9a80:	|         moveq #1,d0
}
    9a82:	\-------> movem.l (sp)+,d2-d3/a6
    9a86:	          lea 128(sp),sp
    9a8a:	          rts

00009a8c <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    9a8c:	   /-> lea -64(sp),sp
    9a90:	   |   move.l a6,-(sp)
    9a92:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    9a94:	   |   movea.l 76(sp),a0
    9a98:	   |   move.l (a0),d0
    9a9a:	   |   move.l 80(sp),-(sp)
    9a9e:	   |   move.l d0,-(sp)
    9aa0:	   |   jsr 8d0 <put2bytes>
    9aa6:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    9aa8:	   |   movea.l 76(sp),a0
    9aac:	   |   move.l 40(a0),d0
    9ab0:	/--|-- beq.s 9aec <saveFunction+0x60>
		FPutC (fp, 1);
    9ab2:	|  |   move.l 80(sp),52(sp)
    9ab8:	|  |   moveq #1,d0
    9aba:	|  |   move.l d0,48(sp)
    9abe:	|  |   move.l 18bc8 <DOSBase>,d0
    9ac4:	|  |   movea.l d0,a6
    9ac6:	|  |   move.l 52(sp),d1
    9aca:	|  |   move.l 48(sp),d2
    9ace:	|  |   jsr -312(a6)
    9ad2:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    9ad6:	|  |   movea.l 76(sp),a0
    9ada:	|  |   move.l 40(a0),d0
    9ade:	|  |   move.l 80(sp),-(sp)
    9ae2:	|  |   move.l d0,-(sp)
    9ae4:	|  \-- jsr 9a8c <saveFunction>(pc)
    9ae8:	|      addq.l #8,sp
    9aea:	|  /-- bra.s 9b0e <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    9aec:	\--|-> move.l 80(sp),64(sp)
    9af2:	   |   clr.l 60(sp)
    9af6:	   |   move.l 18bc8 <DOSBase>,d0
    9afc:	   |   movea.l d0,a6
    9afe:	   |   move.l 64(sp),d1
    9b02:	   |   move.l 60(sp),d2
    9b06:	   |   jsr -312(a6)
    9b0a:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    9b0e:	   \-> movea.l 76(sp),a0
    9b12:	       move.l 12(a0),d0
    9b16:	       move.l 80(sp),-(sp)
    9b1a:	       move.l d0,-(sp)
    9b1c:	       jsr 958 <put4bytes>
    9b22:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    9b24:	       movea.l 76(sp),a0
    9b28:	       move.l 36(a0),d0
    9b2c:	       move.l 80(sp),-(sp)
    9b30:	       move.l d0,-(sp)
    9b32:	       jsr 8d0 <put2bytes>
    9b38:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    9b3a:	       move.l 80(sp),40(sp)
    9b40:	       movea.l 76(sp),a0
    9b44:	       move.w 54(a0),d0
    9b48:	       movea.w d0,a0
    9b4a:	       move.l a0,36(sp)
    9b4e:	       move.l 18bc8 <DOSBase>,d0
    9b54:	       movea.l d0,a6
    9b56:	       move.l 40(sp),d1
    9b5a:	       move.l 36(sp),d2
    9b5e:	       jsr -312(a6)
    9b62:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    9b66:	       move.l 80(sp),28(sp)
    9b6c:	       movea.l 76(sp),a0
    9b70:	       move.w 48(a0),d0
    9b74:	       movea.w d0,a0
    9b76:	       move.l a0,24(sp)
    9b7a:	       move.l 18bc8 <DOSBase>,d0
    9b80:	       movea.l d0,a6
    9b82:	       move.l 28(sp),d1
    9b86:	       move.l 24(sp),d2
    9b8a:	       jsr -312(a6)
    9b8e:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    9b92:	       move.l 80(sp),16(sp)
    9b98:	       movea.l 76(sp),a0
    9b9c:	       move.w 50(a0),d0
    9ba0:	       movea.w d0,a0
    9ba2:	       move.l a0,12(sp)
    9ba6:	       move.l 18bc8 <DOSBase>,d0
    9bac:	       movea.l d0,a6
    9bae:	       move.l 16(sp),d1
    9bb2:	       move.l 12(sp),d2
    9bb6:	       jsr -312(a6)
    9bba:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    9bbe:	       moveq #28,d0
    9bc0:	       add.l 76(sp),d0
    9bc4:	       move.l 80(sp),-(sp)
    9bc8:	       move.l d0,-(sp)
    9bca:	       jsr a348 <saveVariable>
    9bd0:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    9bd2:	       movea.l 76(sp),a0
    9bd6:	       move.b 56(a0),d0
    9bda:	   /-- beq.s 9bea <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    9bdc:	   |   pea 156bd <custom.c.36a9b171+0xac3>
    9be2:	   |   jsr 13a4a <KPrintF>
    9be8:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    9bea:	   \-> movea.l 76(sp),a0
    9bee:	       move.l 24(a0),d0
    9bf2:	       move.l 80(sp),-(sp)
    9bf6:	       move.l d0,-(sp)
    9bf8:	       jsr a1bc <saveStack>
    9bfe:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    9c00:	       clr.l 68(sp)
    9c04:	   /-- bra.s 9c28 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    9c06:	/--|-> movea.l 76(sp),a0
    9c0a:	|  |   move.l 20(a0),d1
    9c0e:	|  |   move.l 68(sp),d0
    9c12:	|  |   lsl.l #3,d0
    9c14:	|  |   add.l d1,d0
    9c16:	|  |   move.l 80(sp),-(sp)
    9c1a:	|  |   move.l d0,-(sp)
    9c1c:	|  |   jsr a348 <saveVariable>
    9c22:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    9c24:	|  |   addq.l #1,68(sp)
    9c28:	|  \-> movea.l 76(sp),a0
    9c2c:	|      move.l 8(a0),d0
    9c30:	|      cmp.l 68(sp),d0
    9c34:	\----- bgt.s 9c06 <saveFunction+0x17a>
	}
}
    9c36:	       nop
    9c38:	       nop
    9c3a:	       move.l (sp)+,d2
    9c3c:	       movea.l (sp)+,a6
    9c3e:	       lea 64(sp),sp
    9c42:	       rts

00009c44 <saveGame>:

BOOL saveGame (char * fname) {
    9c44:	          lea -272(sp),sp
    9c48:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    9c4c:	          move.l 288(sp),268(sp)
    9c52:	          move.l #1006,264(sp)
    9c5a:	          move.l 18bc8 <DOSBase>,d0
    9c60:	          movea.l d0,a6
    9c62:	          move.l 268(sp),d1
    9c66:	          move.l 264(sp),d2
    9c6a:	          jsr -30(a6)
    9c6e:	          move.l d0,260(sp)
    9c72:	          move.l 260(sp),d0
    9c76:	          move.l d0,256(sp)
	if (fp == NULL) {
    9c7a:	      /-- bne.s 9c90 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    9c7c:	      |   pea 156df <custom.c.36a9b171+0xae5>
    9c82:	      |   jsr 13a4a <KPrintF>
    9c88:	      |   addq.l #4,sp
		return FALSE;
    9c8a:	      |   clr.w d0
    9c8c:	/-----|-- bra.w a1b2 <saveGame+0x56e>
	}

	Write( fp, &"SLUDSA", 6);
    9c90:	|     \-> move.l 256(sp),252(sp)
    9c96:	|         move.l #87804,248(sp)
    9c9e:	|         moveq #6,d0
    9ca0:	|         move.l d0,244(sp)
    9ca4:	|         move.l 18bc8 <DOSBase>,d0
    9caa:	|         movea.l d0,a6
    9cac:	|         move.l 252(sp),d1
    9cb0:	|         move.l 248(sp),d2
    9cb4:	|         move.l 244(sp),d3
    9cb8:	|         jsr -48(a6)
    9cbc:	|         move.l d0,240(sp)
	FPutC (fp, 0);
    9cc0:	|         move.l 256(sp),236(sp)
    9cc6:	|         clr.l 232(sp)
    9cca:	|         move.l 18bc8 <DOSBase>,d0
    9cd0:	|         movea.l d0,a6
    9cd2:	|         move.l 236(sp),d1
    9cd6:	|         move.l 232(sp),d2
    9cda:	|         jsr -312(a6)
    9cde:	|         move.l d0,228(sp)
	FPutC (fp, 0);
    9ce2:	|         move.l 256(sp),224(sp)
    9ce8:	|         clr.l 220(sp)
    9cec:	|         move.l 18bc8 <DOSBase>,d0
    9cf2:	|         movea.l d0,a6
    9cf4:	|         move.l 224(sp),d1
    9cf8:	|         move.l 220(sp),d2
    9cfc:	|         jsr -312(a6)
    9d00:	|         move.l d0,216(sp)
	FPutC (fp, MAJOR_VERSION);
    9d04:	|         move.l 256(sp),212(sp)
    9d0a:	|         moveq #2,d0
    9d0c:	|         move.l d0,208(sp)
    9d10:	|         move.l 18bc8 <DOSBase>,d0
    9d16:	|         movea.l d0,a6
    9d18:	|         move.l 212(sp),d1
    9d1c:	|         move.l 208(sp),d2
    9d20:	|         jsr -312(a6)
    9d24:	|         move.l d0,204(sp)
	FPutC (fp, MINOR_VERSION);
    9d28:	|         move.l 256(sp),200(sp)
    9d2e:	|         moveq #2,d0
    9d30:	|         move.l d0,196(sp)
    9d34:	|         move.l 18bc8 <DOSBase>,d0
    9d3a:	|         movea.l d0,a6
    9d3c:	|         move.l 200(sp),d1
    9d40:	|         move.l 196(sp),d2
    9d44:	|         jsr -312(a6)
    9d48:	|         move.l d0,192(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    9d4c:	|         move.l 256(sp),188(sp)
    9d52:	|         move.l #101218,184(sp)
    9d5a:	|         moveq #8,d0
    9d5c:	|         move.l d0,180(sp)
    9d60:	|         move.l 18bc8 <DOSBase>,d0
    9d66:	|         movea.l d0,a6
    9d68:	|         move.l 188(sp),d1
    9d6c:	|         move.l 184(sp),d2
    9d70:	|         move.l 180(sp),d3
    9d74:	|         jsr -48(a6)
    9d78:	|         move.l d0,176(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    9d7c:	|         move.l 256(sp),172(sp)
    9d82:	|         move.w 18436 <allowAnyFilename>,d0
    9d88:	|         movea.w d0,a0
    9d8a:	|         move.l a0,168(sp)
    9d8e:	|         move.l 18bc8 <DOSBase>,d0
    9d94:	|         movea.l d0,a6
    9d96:	|         move.l 172(sp),d1
    9d9a:	|         move.l 168(sp),d2
    9d9e:	|         jsr -312(a6)
    9da2:	|         move.l d0,164(sp)
	FPutC (fp, captureAllKeys);
    9da6:	|         move.l 256(sp),160(sp)
    9dac:	|         move.w 18b60 <captureAllKeys>,d0
    9db2:	|         movea.w d0,a0
    9db4:	|         move.l a0,156(sp)
    9db8:	|         move.l 18bc8 <DOSBase>,d0
    9dbe:	|         movea.l d0,a6
    9dc0:	|         move.l 160(sp),d1
    9dc4:	|         move.l 156(sp),d2
    9dc8:	|         jsr -312(a6)
    9dcc:	|         move.l d0,152(sp)
	FPutC (fp, TRUE); // updateDisplay
    9dd0:	|         move.l 256(sp),148(sp)
    9dd6:	|         moveq #1,d0
    9dd8:	|         move.l d0,144(sp)
    9ddc:	|         move.l 18bc8 <DOSBase>,d0
    9de2:	|         movea.l d0,a6
    9de4:	|         move.l 148(sp),d1
    9de8:	|         move.l 144(sp),d2
    9dec:	|         jsr -312(a6)
    9df0:	|         move.l d0,140(sp)
	FPutC (fp, fontTableSize>0);
    9df4:	|         move.l 256(sp),136(sp)
    9dfa:	|         move.l 18d14 <fontTableSize>,d0
    9e00:	|         sgt d0
    9e02:	|         neg.b d0
    9e04:	|         move.b d0,d0
    9e06:	|         andi.l #255,d0
    9e0c:	|         move.l d0,132(sp)
    9e10:	|         move.l 18bc8 <DOSBase>,d0
    9e16:	|         movea.l d0,a6
    9e18:	|         move.l 136(sp),d1
    9e1c:	|         move.l 132(sp),d2
    9e20:	|         jsr -312(a6)
    9e24:	|         move.l d0,128(sp)

	if (fontTableSize>0) {
    9e28:	|         move.l 18d14 <fontTableSize>,d0
    9e2e:	|     /-- ble.s 9e6c <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    9e30:	|     |   move.l 18d0c <loadedFontNum>,d0
    9e36:	|     |   move.l 256(sp),-(sp)
    9e3a:	|     |   move.l d0,-(sp)
    9e3c:	|     |   jsr 8d0 <put2bytes>
    9e42:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    9e44:	|     |   move.l 18d08 <fontHeight>,d0
    9e4a:	|     |   move.l 256(sp),-(sp)
    9e4e:	|     |   move.l d0,-(sp)
    9e50:	|     |   jsr 8d0 <put2bytes>
    9e56:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    9e58:	|     |   move.l 18d10 <fontOrderString>,d0
    9e5e:	|     |   move.l 256(sp),-(sp)
    9e62:	|     |   move.l d0,-(sp)
    9e64:	|     |   jsr bd8 <writeString>
    9e6a:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    9e6c:	|     \-> move.w 18ade <fontSpace>,d0
    9e72:	|         movea.w d0,a0
    9e74:	|         move.l 256(sp),-(sp)
    9e78:	|         move.l a0,-(sp)
    9e7a:	|         jsr a9c <putSigned>
    9e80:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    9e82:	|         move.l 18cce <cameraX>,d0
    9e88:	|         move.l 256(sp),-(sp)
    9e8c:	|         move.l d0,-(sp)
    9e8e:	|         jsr 8d0 <put2bytes>
    9e94:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    9e96:	|         move.l 18cd2 <cameraY>,d0
    9e9c:	|         move.l 256(sp),-(sp)
    9ea0:	|         move.l d0,-(sp)
    9ea2:	|         jsr 8d0 <put2bytes>
    9ea8:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    9eaa:	|         move.l 18578 <cameraZoom>,d0
    9eb0:	|         move.l 256(sp),-(sp)
    9eb4:	|         move.l d0,-(sp)
    9eb6:	|         jsr a46 <putFloat>
    9ebc:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    9ebe:	|         move.l 256(sp),124(sp)
    9ec4:	|         move.b 18550 <brightnessLevel>,d0
    9eca:	|         move.b d0,d0
    9ecc:	|         andi.l #255,d0
    9ed2:	|         move.l d0,120(sp)
    9ed6:	|         move.l 18bc8 <DOSBase>,d0
    9edc:	|         movea.l d0,a6
    9ede:	|         move.l 124(sp),d1
    9ee2:	|         move.l 120(sp),d2
    9ee6:	|         jsr -312(a6)
    9eea:	|         move.l d0,116(sp)

	// Save event handlers
	saveHandlers (fp);
    9eee:	|         move.l 256(sp),-(sp)
    9ef2:	|         jsr 41dc <saveHandlers>
    9ef8:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    9efa:	|         move.l 256(sp),-(sp)
    9efe:	|         jsr 12710 <saveRegions>
    9f04:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    9f06:	|         move.l 18ae0 <mouseCursorAnim>,d0
    9f0c:	|         move.l 256(sp),-(sp)
    9f10:	|         move.l d0,-(sp)
    9f12:	|         jsr 8404 <saveAnim>
    9f18:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    9f1a:	|         move.l 18ae4 <mouseCursorFrameNum>,d0
    9f20:	|         move.l 256(sp),-(sp)
    9f24:	|         move.l d0,-(sp)
    9f26:	|         jsr 8d0 <put2bytes>
    9f2c:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    9f2e:	|         move.l 18b58 <allRunningFunctions>,276(sp)
	int countFunctions = 0;
    9f36:	|         clr.l 272(sp)
	while (thisFunction) {
    9f3a:	|     /-- bra.s 9f4a <saveGame+0x306>
		countFunctions ++;
    9f3c:	|  /--|-> addq.l #1,272(sp)
		thisFunction = thisFunction -> next;
    9f40:	|  |  |   movea.l 276(sp),a0
    9f44:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    9f4a:	|  |  \-> tst.l 276(sp)
    9f4e:	|  \----- bne.s 9f3c <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    9f50:	|         move.l 256(sp),-(sp)
    9f54:	|         move.l 276(sp),-(sp)
    9f58:	|         jsr 8d0 <put2bytes>
    9f5e:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    9f60:	|         move.l 18b58 <allRunningFunctions>,276(sp)
	while (thisFunction) {
    9f68:	|     /-- bra.s 9f84 <saveGame+0x340>
		saveFunction (thisFunction, fp);
    9f6a:	|  /--|-> move.l 256(sp),-(sp)
    9f6e:	|  |  |   move.l 280(sp),-(sp)
    9f72:	|  |  |   jsr 9a8c <saveFunction>
    9f78:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    9f7a:	|  |  |   movea.l 276(sp),a0
    9f7e:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    9f84:	|  |  \-> tst.l 276(sp)
    9f88:	|  \----- bne.s 9f6a <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    9f8a:	|         clr.l 280(sp)
    9f8e:	|     /-- bra.s 9fb0 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    9f90:	|  /--|-> move.l 18b6e <globalVars>,d1
    9f96:	|  |  |   move.l 280(sp),d0
    9f9a:	|  |  |   lsl.l #3,d0
    9f9c:	|  |  |   add.l d1,d0
    9f9e:	|  |  |   move.l 256(sp),-(sp)
    9fa2:	|  |  |   move.l d0,-(sp)
    9fa4:	|  |  |   jsr a348 <saveVariable>
    9faa:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    9fac:	|  |  |   addq.l #1,280(sp)
    9fb0:	|  |  \-> move.l 18b98 <numGlobals>,d0
    9fb6:	|  |      cmp.l 280(sp),d0
    9fba:	|  \----- bgt.s 9f90 <saveGame+0x34c>
	}

	savePeople (fp);
    9fbc:	|         move.l 256(sp),-(sp)
    9fc0:	|         jsr 852c <savePeople>
    9fc6:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    9fc8:	|         movea.l 18d20 <currentFloor>,a0
    9fce:	|         move.l 8(a0),d0
    9fd2:	|  /----- beq.s a010 <saveGame+0x3cc>
		FPutC (fp, 1);
    9fd4:	|  |      move.l 256(sp),100(sp)
    9fda:	|  |      moveq #1,d0
    9fdc:	|  |      move.l d0,96(sp)
    9fe0:	|  |      move.l 18bc8 <DOSBase>,d0
    9fe6:	|  |      movea.l d0,a6
    9fe8:	|  |      move.l 100(sp),d1
    9fec:	|  |      move.l 96(sp),d2
    9ff0:	|  |      jsr -312(a6)
    9ff4:	|  |      move.l d0,92(sp)
		put2bytes (currentFloor -> originalNum, fp);
    9ff8:	|  |      movea.l 18d20 <currentFloor>,a0
    9ffe:	|  |      move.l (a0),d0
    a000:	|  |      move.l 256(sp),-(sp)
    a004:	|  |      move.l d0,-(sp)
    a006:	|  |      jsr 8d0 <put2bytes>
    a00c:	|  |      addq.l #8,sp
    a00e:	|  |  /-- bra.s a032 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    a010:	|  \--|-> move.l 256(sp),112(sp)
    a016:	|     |   clr.l 108(sp)
    a01a:	|     |   move.l 18bc8 <DOSBase>,d0
    a020:	|     |   movea.l d0,a6
    a022:	|     |   move.l 112(sp),d1
    a026:	|     |   move.l 108(sp),d2
    a02a:	|     |   jsr -312(a6)
    a02e:	|     |   move.l d0,104(sp)

	if (zBuffer.tex) {
    a032:	|     \-> move.l 18c70 <zBuffer+0x50>,d0
    a038:	|  /----- beq.s a074 <saveGame+0x430>
		FPutC (fp, 1);
    a03a:	|  |      move.l 256(sp),76(sp)
    a040:	|  |      moveq #1,d0
    a042:	|  |      move.l d0,72(sp)
    a046:	|  |      move.l 18bc8 <DOSBase>,d0
    a04c:	|  |      movea.l d0,a6
    a04e:	|  |      move.l 76(sp),d1
    a052:	|  |      move.l 72(sp),d2
    a056:	|  |      jsr -312(a6)
    a05a:	|  |      move.l d0,68(sp)
		put2bytes (zBuffer.originalNum, fp);
    a05e:	|  |      move.l 18c6c <zBuffer+0x4c>,d0
    a064:	|  |      move.l 256(sp),-(sp)
    a068:	|  |      move.l d0,-(sp)
    a06a:	|  |      jsr 8d0 <put2bytes>
    a070:	|  |      addq.l #8,sp
    a072:	|  |  /-- bra.s a096 <saveGame+0x452>
	} else FPutC (fp,0);
    a074:	|  \--|-> move.l 256(sp),88(sp)
    a07a:	|     |   clr.l 84(sp)
    a07e:	|     |   move.l 18bc8 <DOSBase>,d0
    a084:	|     |   movea.l d0,a6
    a086:	|     |   move.l 88(sp),d1
    a08a:	|     |   move.l 84(sp),d2
    a08e:	|     |   jsr -312(a6)
    a092:	|     |   move.l d0,80(sp)

	FPutC (fp, speechMode);
    a096:	|     \-> move.l 256(sp),64(sp)
    a09c:	|         move.l 18ce2 <speechMode>,60(sp)
    a0a4:	|         move.l 18bc8 <DOSBase>,d0
    a0aa:	|         movea.l d0,a6
    a0ac:	|         move.l 64(sp),d1
    a0b0:	|         move.l 60(sp),d2
    a0b4:	|         jsr -312(a6)
    a0b8:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    a0bc:	|         move.b 18ab4 <fadeMode>,d0
    a0c2:	|         move.b d0,d0
    a0c4:	|         andi.l #255,d0
    a0ca:	|         move.l d0,52(sp)
    a0ce:	|         move.l 256(sp),48(sp)
    a0d4:	|         move.l 18bc8 <DOSBase>,d0
    a0da:	|         movea.l d0,a6
    a0dc:	|         move.l 52(sp),d1
    a0e0:	|         move.l 48(sp),d2
    a0e4:	|         jsr -312(a6)
    a0e8:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    a0ec:	|         move.l 18c1c <speech>,d0
    a0f2:	|         move.l 256(sp),-(sp)
    a0f6:	|         move.l d0,-(sp)
    a0f8:	|         jsr 57f0 <saveSpeech>
    a0fe:	|         addq.l #8,sp
	saveStatusBars (fp);
    a100:	|         move.l 256(sp),-(sp)
    a104:	|         jsr 51ec <saveStatusBars>
    a10a:	|         addq.l #4,sp
	saveSounds (fp);
    a10c:	|         move.l 256(sp),-(sp)
    a110:	|         jsr a48c <saveSounds>
    a116:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    a118:	|         move.w 18ccc <saveEncoding>,d0
    a11e:	|         move.w d0,d0
    a120:	|         andi.l #65535,d0
    a126:	|         move.l 256(sp),-(sp)
    a12a:	|         move.l d0,-(sp)
    a12c:	|         jsr 8d0 <put2bytes>
    a132:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    a134:	|         move.l 18cbe <parallaxStuff>,d0
    a13a:	|         move.l 256(sp),-(sp)
    a13e:	|         move.l d0,-(sp)
    a140:	|         jsr a778 <saveParallaxRecursive>
    a146:	|         addq.l #8,sp
	FPutC (fp, 0);
    a148:	|         move.l 256(sp),40(sp)
    a14e:	|         clr.l 36(sp)
    a152:	|         move.l 18bc8 <DOSBase>,d0
    a158:	|         movea.l d0,a6
    a15a:	|         move.l 40(sp),d1
    a15e:	|         move.l 36(sp),d2
    a162:	|         jsr -312(a6)
    a166:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    a16a:	|         move.l 256(sp),28(sp)
    a170:	|         move.l 18556 <languageNum>,24(sp)
    a178:	|         move.l 18bc8 <DOSBase>,d0
    a17e:	|         movea.l d0,a6
    a180:	|         move.l 28(sp),d1
    a184:	|         move.l 24(sp),d2
    a188:	|         jsr -312(a6)
    a18c:	|         move.l d0,20(sp)

	Close(fp);
    a190:	|         move.l 256(sp),16(sp)
    a196:	|         move.l 18bc8 <DOSBase>,d0
    a19c:	|         movea.l d0,a6
    a19e:	|         move.l 16(sp),d1
    a1a2:	|         jsr -36(a6)
    a1a6:	|         move.l d0,12(sp)
	clearStackLib ();
    a1aa:	|         jsr 9742 <clearStackLib>
	return TRUE;
    a1b0:	|         moveq #1,d0
}
    a1b2:	\-------> movem.l (sp)+,d2-d3/a6
    a1b6:	          lea 272(sp),sp
    a1ba:	          rts

0000a1bc <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    a1bc:	       lea -12(sp),sp
	int elements = 0;
    a1c0:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    a1c4:	       move.l 16(sp),(sp)
	while (search) {
    a1c8:	   /-- bra.s a1d4 <saveStack+0x18>
		elements ++;
    a1ca:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    a1ce:	|  |   movea.l (sp),a0
    a1d0:	|  |   move.l 8(a0),(sp)
	while (search) {
    a1d4:	|  \-> tst.l (sp)
    a1d6:	\----- bne.s a1ca <saveStack+0xe>
	}

	put2bytes (elements, fp);
    a1d8:	       move.l 20(sp),-(sp)
    a1dc:	       move.l 12(sp),-(sp)
    a1e0:	       jsr 8d0 <put2bytes>
    a1e6:	       addq.l #8,sp
	search = vs;
    a1e8:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    a1ec:	       clr.l 4(sp)
    a1f0:	   /-- bra.s a20c <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    a1f2:	/--|-> move.l (sp),d0
    a1f4:	|  |   move.l 20(sp),-(sp)
    a1f8:	|  |   move.l d0,-(sp)
    a1fa:	|  |   jsr a348 <saveVariable>
    a200:	|  |   addq.l #8,sp
		search = search -> next;
    a202:	|  |   movea.l (sp),a0
    a204:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    a208:	|  |   addq.l #1,4(sp)
    a20c:	|  \-> move.l 4(sp),d0
    a210:	|      cmp.l 8(sp),d0
    a214:	\----- blt.s a1f2 <saveStack+0x36>
	}
}
    a216:	       nop
    a218:	       nop
    a21a:	       lea 12(sp),sp
    a21e:	       rts

0000a220 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    a220:	             lea -44(sp),sp
    a224:	             move.l a6,-(sp)
    a226:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    a228:	             move.l 18ca8 <stackLib>,48(sp)
	int a = 0;
    a230:	             clr.l 44(sp)
	while (s) {
    a234:	      /----- bra.s a292 <saveStackRef+0x72>
		if (s -> stack == vs) {
    a236:	   /--|----> movea.l 48(sp),a0
    a23a:	   |  |      move.l (a0),d0
    a23c:	   |  |      cmp.l 56(sp),d0
    a240:	   |  |  /-- bne.s a284 <saveStackRef+0x64>
			FPutC (fp, 1);
    a242:	   |  |  |   move.l 60(sp),16(sp)
    a248:	   |  |  |   moveq #1,d0
    a24a:	   |  |  |   move.l d0,12(sp)
    a24e:	   |  |  |   move.l 18bc8 <DOSBase>,d0
    a254:	   |  |  |   movea.l d0,a6
    a256:	   |  |  |   move.l 16(sp),d1
    a25a:	   |  |  |   move.l 12(sp),d2
    a25e:	   |  |  |   jsr -312(a6)
    a262:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    a266:	   |  |  |   move.l 18ca4 <stackLibTotal>,d0
    a26c:	   |  |  |   sub.l 44(sp),d0
    a270:	   |  |  |   move.l 60(sp),-(sp)
    a274:	   |  |  |   move.l d0,-(sp)
    a276:	   |  |  |   jsr 8d0 <put2bytes>
    a27c:	   |  |  |   addq.l #8,sp
			return TRUE;
    a27e:	   |  |  |   moveq #1,d0
    a280:	/--|--|--|-- bra.w a33e <saveStackRef+0x11e>
		}
		s = s -> next;
    a284:	|  |  |  \-> movea.l 48(sp),a0
    a288:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    a28e:	|  |  |      addq.l #1,44(sp)
	while (s) {
    a292:	|  |  \----> tst.l 48(sp)
    a296:	|  \-------- bne.s a236 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    a298:	|            move.l 60(sp),40(sp)
    a29e:	|            clr.l 36(sp)
    a2a2:	|            move.l 18bc8 <DOSBase>,d0
    a2a8:	|            movea.l d0,a6
    a2aa:	|            move.l 40(sp),d1
    a2ae:	|            move.l 36(sp),d2
    a2b2:	|            jsr -312(a6)
    a2b6:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    a2ba:	|            movea.l 56(sp),a0
    a2be:	|            move.l (a0),d0
    a2c0:	|            move.l 60(sp),-(sp)
    a2c4:	|            move.l d0,-(sp)
    a2c6:	|            jsr a1bc <saveStack>
    a2cc:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    a2ce:	|            moveq #8,d0
    a2d0:	|            move.l d0,28(sp)
    a2d4:	|            clr.l 24(sp)
    a2d8:	|            move.l 18bc0 <SysBase>,d0
    a2de:	|            movea.l d0,a6
    a2e0:	|            move.l 28(sp),d0
    a2e4:	|            move.l 24(sp),d1
    a2e8:	|            jsr -684(a6)
    a2ec:	|            move.l d0,20(sp)
    a2f0:	|            move.l 20(sp),d0
    a2f4:	|            move.l d0,48(sp)
	stackLibTotal ++;
    a2f8:	|            move.l 18ca4 <stackLibTotal>,d0
    a2fe:	|            addq.l #1,d0
    a300:	|            move.l d0,18ca4 <stackLibTotal>
	if (! s) {
    a306:	|            tst.l 48(sp)
    a30a:	|        /-- bne.s a31e <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    a30c:	|        |   pea 1572b <custom.c.36a9b171+0xb31>
    a312:	|        |   jsr 13a4a <KPrintF>
    a318:	|        |   addq.l #4,sp
		return FALSE;
    a31a:	|        |   clr.w d0
    a31c:	+--------|-- bra.s a33e <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    a31e:	|        \-> move.l 18ca8 <stackLib>,d0
    a324:	|            movea.l 48(sp),a0
    a328:	|            move.l d0,4(a0)
	s -> stack = vs;
    a32c:	|            movea.l 48(sp),a0
    a330:	|            move.l 56(sp),(a0)
	stackLib = s;
    a334:	|            move.l 48(sp),18ca8 <stackLib>
	return TRUE;
    a33c:	|            moveq #1,d0
}
    a33e:	\----------> move.l (sp)+,d2
    a340:	             movea.l (sp)+,a6
    a342:	             lea 44(sp),sp
    a346:	             rts

0000a348 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    a348:	          lea -12(sp),sp
    a34c:	          move.l a6,-(sp)
    a34e:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    a350:	          move.l 28(sp),16(sp)
    a356:	          movea.l 24(sp),a0
    a35a:	          move.l (a0),d0
    a35c:	          move.l d0,12(sp)
    a360:	          move.l 18bc8 <DOSBase>,d0
    a366:	          movea.l d0,a6
    a368:	          move.l 16(sp),d1
    a36c:	          move.l 12(sp),d2
    a370:	          jsr -312(a6)
    a374:	          move.l d0,8(sp)
	switch (from -> varType) {
    a378:	          movea.l 24(sp),a0
    a37c:	          move.l (a0),d0
    a37e:	          moveq #9,d1
    a380:	          cmp.l d0,d1
    a382:	      /-- bcs.w a432 <saveVariable+0xea>
    a386:	      |   add.l d0,d0
    a388:	      |   movea.l d0,a0
    a38a:	      |   adda.l #41878,a0
    a390:	      |   move.w (a0),d0
    a392:	      |   jmp (a396 <saveVariable+0x4e>,pc,d0.w)
    a396:	      |   ori.l #1310740,(a0)+
    a39c:	      |   ori.b #20,(20,a0,d0.w)
    a3a2:	      |   .short 0x004c
    a3a4:	      |   ori.b #126,(a4)
    a3a8:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    a3ac:	      |   ori.b #40,(a0)+
    a3b0:	      |   ori.b #47,d4
    a3b4:	      |   ori.b #0,(a4)+
    a3b8:	      |   jsr 958 <put4bytes>
    a3be:	      |   addq.l #8,sp
		return TRUE;
    a3c0:	      |   moveq #1,d0
    a3c2:	/-----|-- bra.w a46e <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    a3c6:	|     |   movea.l 24(sp),a0
    a3ca:	|     |   move.l 4(a0),d0
    a3ce:	|     |   move.l 28(sp),-(sp)
    a3d2:	|     |   move.l d0,-(sp)
    a3d4:	|     |   jsr bd8 <writeString>
    a3da:	|     |   addq.l #8,sp
		return TRUE;
    a3dc:	|     |   moveq #1,d0
    a3de:	+-----|-- bra.w a46e <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    a3e2:	|     |   movea.l 24(sp),a0
    a3e6:	|     |   move.l 4(a0),d0
    a3ea:	|     |   move.l 28(sp),-(sp)
    a3ee:	|     |   move.l d0,-(sp)
    a3f0:	|     |   jsr a220 <saveStackRef>
    a3f6:	|     |   addq.l #8,sp
    a3f8:	+-----|-- bra.s a46e <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    a3fa:	|     |   movea.l 24(sp),a0
    a3fe:	|     |   move.l 4(a0),d0
    a402:	|     |   move.l 28(sp),-(sp)
    a406:	|     |   move.l d0,-(sp)
    a408:	|     |   jsr 84ce <saveCostume>
    a40e:	|     |   addq.l #8,sp
		return FALSE;
    a410:	|     |   clr.w d0
    a412:	+-----|-- bra.s a46e <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    a414:	|     |   movea.l 24(sp),a0
    a418:	|     |   move.l 4(a0),d0
    a41c:	|     |   move.l 28(sp),-(sp)
    a420:	|     |   move.l d0,-(sp)
    a422:	|     |   jsr 8404 <saveAnim>
    a428:	|     |   addq.l #8,sp
		return FALSE;
    a42a:	|     |   clr.w d0
    a42c:	+-----|-- bra.s a46e <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    a42e:	|     |   clr.w d0
    a430:	+-----|-- bra.s a46e <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    a432:	|     \-> movea.l 24(sp),a0
    a436:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    a438:	|         moveq #10,d1
    a43a:	|         cmp.l d0,d1
    a43c:	|  /----- bcs.s a456 <saveVariable+0x10e>
						typeName[from->varType] :
    a43e:	|  |      movea.l 24(sp),a0
    a442:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    a444:	|  |      add.l d0,d0
    a446:	|  |      movea.l d0,a1
    a448:	|  |      adda.l d0,a1
    a44a:	|  |      lea 18ab6 <typeName>,a0
    a450:	|  |      move.l (0,a1,a0.l),d0
    a454:	|  |  /-- bra.s a45c <saveVariable+0x114>
    a456:	|  \--|-> move.l #87888,d0
    a45c:	|     \-> move.l d0,-(sp)
    a45e:	|         pea 15757 <custom.c.36a9b171+0xb5d>
    a464:	|         jsr 13a4a <KPrintF>
    a46a:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    a46c:	|         moveq #1,d0
    a46e:	\-------> move.l (sp)+,d2
    a470:	          movea.l (sp)+,a6
    a472:	          lea 12(sp),sp
    a476:	          rts

0000a478 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    a478:	moveq #0,d0
}
    a47a:	rts

0000a47c <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    a47c:	nop
    a47e:	rts

0000a480 <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    a480:	nop
    a482:	rts

0000a484 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    a484:	moveq #1,d0
}
    a486:	rts

0000a488 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    a488:	nop
    a48a:	rts

0000a48c <saveSounds>:

void saveSounds (BPTR fp) {
    a48c:	lea -12(sp),sp
    a490:	move.l a6,-(sp)
    a492:	move.l d2,-(sp)
	FPutC (fp,0);
    a494:	move.l 24(sp),16(sp)
    a49a:	clr.l 12(sp)
    a49e:	move.l 18bc8 <DOSBase>,d0
    a4a4:	movea.l d0,a6
    a4a6:	move.l 16(sp),d1
    a4aa:	move.l 12(sp),d2
    a4ae:	jsr -312(a6)
    a4b2:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    a4b6:	move.l 18574 <defSoundVol>,d0
    a4bc:	move.l 24(sp),-(sp)
    a4c0:	move.l d0,-(sp)
    a4c2:	jsr 8d0 <put2bytes>
    a4c8:	addq.l #8,sp
	put2bytes (defVol, fp);
    a4ca:	move.l 18570 <defVol>,d0
    a4d0:	move.l 24(sp),-(sp)
    a4d4:	move.l d0,-(sp)
    a4d6:	jsr 8d0 <put2bytes>
    a4dc:	addq.l #8,sp
}
    a4de:	nop
    a4e0:	move.l (sp)+,d2
    a4e2:	movea.l (sp)+,a6
    a4e4:	lea 12(sp),sp
    a4e8:	rts

0000a4ea <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    a4ea:	move.l 4(sp),18570 <defVol>
}
    a4f2:	nop
    a4f4:	rts

0000a4f6 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    a4f6:	move.l 4(sp),18574 <defSoundVol>
}
    a4fe:	nop
    a500:	rts

0000a502 <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    a502:	nop
    a504:	rts

0000a506 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    a506:	nop
    a508:	rts

0000a50a <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    a50a:	nop
    a50c:	rts

0000a50e <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    a50e:	subq.l #4,sp
    a510:	move.l 12(sp),d0
    a514:	move.w d0,d0
    a516:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    a51a:	moveq #1,d0
}
    a51c:	addq.l #4,sp
    a51e:	rts

0000a520 <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    a520:	nop
    a522:	rts

0000a524 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    a524:	move.l 16(sp),-(sp)
    a528:	move.l 16(sp),-(sp)
    a52c:	jsr df4 <CstBlankScreen>
    a532:	addq.l #8,sp
}
    a534:	nop
    a536:	rts

0000a538 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    a538:	pea 1577a <custom.c.36a9b171+0xb80>
    a53e:	jsr 13a4a <KPrintF>
    a544:	addq.l #4,sp
}
    a546:	nop
    a548:	rts

0000a54a <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    a54a:	movea.l 8(sp),a1
    a54e:	movea.l 12(sp),a0
    a552:	move.l 8(sp),d1
    a556:	move.l 4(sp),d0
    a55a:	move.l a1,-(sp)
    a55c:	move.l a0,-(sp)
    a55e:	move.l d1,-(sp)
    a560:	move.l d0,-(sp)
    a562:	jsr 191a <drawLine>
    a568:	lea 16(sp),sp
}
    a56c:	nop
    a56e:	rts

0000a570 <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    a570:	movea.l 12(sp),a1
    a574:	movea.l 4(sp),a0
    a578:	move.l 8(sp),d1
    a57c:	move.l 4(sp),d0
    a580:	move.l a1,-(sp)
    a582:	move.l a0,-(sp)
    a584:	move.l d1,-(sp)
    a586:	move.l d0,-(sp)
    a588:	jsr 191a <drawLine>
    a58e:	lea 16(sp),sp
}
    a592:	nop
    a594:	rts

0000a596 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    a596:	pea 157b3 <custom.c.36a9b171+0xbb9>
    a59c:	jsr 13a4a <KPrintF>
    a5a2:	addq.l #4,sp
}
    a5a4:	nop
    a5a6:	rts

0000a5a8 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    a5a8:	jsr 18aa <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    a5ae:	pea 18cb8 <backdropTextureName>
    a5b4:	pea 1 <_start+0x1>
    a5b8:	jsr 1a9c <deleteTextures>
    a5be:	addq.l #8,sp
	backdropTextureName = 0;
    a5c0:	clr.l 18cb8 <backdropTextureName>
	backdropExists = FALSE;
    a5c6:	clr.w 18cbc <backdropExists>
}
    a5cc:	nop
    a5ce:	rts

0000a5d0 <killParallax>:

void killParallax () {
    a5d0:	          lea -12(sp),sp
    a5d4:	          move.l a6,-(sp)
	while (parallaxStuff) {
    a5d6:	   /----- bra.s a642 <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    a5d8:	/--|----> move.l 18cbe <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    a5e0:	|  |      movea.l 12(sp),a0
    a5e4:	|  |      move.l 42(a0),d0
    a5e8:	|  |      move.l d0,18cbe <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    a5ee:	|  |      move.l 12(sp),d0
    a5f2:	|  |      addq.l #4,d0
    a5f4:	|  |      move.l d0,-(sp)
    a5f6:	|  |      pea 1 <_start+0x1>
    a5fa:	|  |      jsr 1a9c <deleteTextures>
    a600:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    a602:	|  |      movea.l 12(sp),a0
    a606:	|  |      move.l (a0),d0
    a608:	|  |  /-- beq.s a622 <killParallax+0x52>
    a60a:	|  |  |   movea.l 12(sp),a0
    a60e:	|  |  |   move.l (a0),8(sp)
    a612:	|  |  |   move.l 18bc0 <SysBase>,d0
    a618:	|  |  |   movea.l d0,a6
    a61a:	|  |  |   movea.l 8(sp),a1
    a61e:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    a622:	|  |  \-> tst.l 12(sp)
    a626:	|  |  /-- beq.s a63e <killParallax+0x6e>
    a628:	|  |  |   move.l 12(sp),4(sp)
    a62e:	|  |  |   move.l 18bc0 <SysBase>,d0
    a634:	|  |  |   movea.l d0,a6
    a636:	|  |  |   movea.l 4(sp),a1
    a63a:	|  |  |   jsr -690(a6)
		k = NULL;
    a63e:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    a642:	|  \----> move.l 18cbe <parallaxStuff>,d0
    a648:	\-------- bne.s a5d8 <killParallax+0x8>
	}
}
    a64a:	          nop
    a64c:	          nop
    a64e:	          movea.l (sp)+,a6
    a650:	          lea 12(sp),sp
    a654:	          rts

0000a656 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    a656:	       move.l 4(sp),-(sp)
    a65a:	       jsr 4556 <openFileFromNum>
    a660:	       addq.l #4,sp
    a662:	       tst.l d0
    a664:	   /-- bne.s a676 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    a666:	   |   pea 157d4 <custom.c.36a9b171+0xbda>
    a66c:	   |   jsr 13a4a <KPrintF>
    a672:	   |   addq.l #4,sp
		return;
    a674:	/--|-- bra.s a696 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    a676:	|  \-> move.l 18ba8 <bigDataFile>,d0
    a67c:	|      move.l 12(sp),-(sp)
    a680:	|      move.l 12(sp),-(sp)
    a684:	|      move.l d0,-(sp)
    a686:	|      jsr 11fa <CstLoadBackdrop>
    a68c:	|      lea 12(sp),sp
	finishAccess ();
    a690:	|      jsr 444e <finishAccess>
	
}
    a696:	\----> rts

0000a698 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    a698:	subq.l #8,sp
    a69a:	movea.l 12(sp),a0
    a69e:	move.l 16(sp),d1
    a6a2:	move.l 20(sp),d0
    a6a6:	movea.w a0,a0
    a6a8:	move.w a0,6(sp)
    a6ac:	move.w d1,d1
    a6ae:	move.w d1,4(sp)
    a6b2:	move.w d0,d0
    a6b4:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    a6b8:	pea 15823 <custom.c.36a9b171+0xc29>
    a6be:	jsr 13a4a <KPrintF>
    a6c4:	addq.l #4,sp

}
    a6c6:	nop
    a6c8:	addq.l #8,sp
    a6ca:	rts

0000a6cc <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    a6cc:	pea 15846 <custom.c.36a9b171+0xc4c>
    a6d2:	jsr 13a4a <KPrintF>
    a6d8:	addq.l #4,sp
}
    a6da:	nop
    a6dc:	rts

0000a6de <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    a6de:	pea 18cc2 <snapshotTextureName>
    a6e4:	pea 1 <_start+0x1>
    a6e8:	jsr 1a9c <deleteTextures>
    a6ee:	addq.l #8,sp
	snapshotTextureName = 0;
    a6f0:	clr.l 18cc2 <snapshotTextureName>
}
    a6f6:	nop
    a6f8:	rts

0000a6fa <reserveBackdrop>:

BOOL reserveBackdrop () {	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    a6fa:	move.l 18cb4 <sceneHeight>,d0
    a700:	move.l d0,d1
    a702:	move.l 18cb0 <sceneWidth>,d0
    a708:	move.l d1,-(sp)
    a70a:	move.l d0,-(sp)
    a70c:	jsr 16fe <CstReserveBackdrop>
    a712:	addq.l #8,sp
}
    a714:	rts

0000a716 <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    a716:	jsr a5a8 <killBackDrop>
	killParallax ();
    a71c:	jsr a5d0 <killParallax>
	killZBuffer ();
    a722:	jsr 5eea <killZBuffer>
	sceneWidth = x;
    a728:	move.l 4(sp),d0
    a72c:	move.l d0,18cb0 <sceneWidth>
	sceneHeight = y;
    a732:	move.l 8(sp),d0
    a736:	move.l d0,18cb4 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    a73c:	pea 1587f <custom.c.36a9b171+0xc85>
    a742:	jsr 13a4a <KPrintF>
    a748:	addq.l #4,sp
	return reserveBackdrop();
    a74a:	jsr a6fa <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    a750:	rts

0000a752 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    a752:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    a754:	move.l 12(sp),-(sp)
    a758:	jsr 6bc <get2bytes>
    a75e:	addq.l #4,sp
    a760:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    a764:	move.l 12(sp),-(sp)
    a768:	jsr 6bc <get2bytes>
    a76e:	addq.l #4,sp
    a770:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    a772:	moveq #1,d0
}
    a774:	addq.l #8,sp
    a776:	rts

0000a778 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    a778:	   /-> lea -12(sp),sp
    a77c:	   |   move.l a6,-(sp)
    a77e:	   |   move.l d2,-(sp)
	if (me) {
    a780:	   |   tst.l 24(sp)
    a784:	/--|-- beq.w a81a <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    a788:	|  |   movea.l 24(sp),a0
    a78c:	|  |   move.l 42(a0),d0
    a790:	|  |   move.l 28(sp),-(sp)
    a794:	|  |   move.l d0,-(sp)
    a796:	|  \-- jsr a778 <saveParallaxRecursive>(pc)
    a79a:	|      addq.l #8,sp
		FPutC (fp, 1);
    a79c:	|      move.l 28(sp),16(sp)
    a7a2:	|      moveq #1,d0
    a7a4:	|      move.l d0,12(sp)
    a7a8:	|      move.l 18bc8 <DOSBase>,d0
    a7ae:	|      movea.l d0,a6
    a7b0:	|      move.l 16(sp),d1
    a7b4:	|      move.l 12(sp),d2
    a7b8:	|      jsr -312(a6)
    a7bc:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    a7c0:	|      movea.l 24(sp),a0
    a7c4:	|      move.w 28(a0),d0
    a7c8:	|      move.w d0,d0
    a7ca:	|      andi.l #65535,d0
    a7d0:	|      move.l 28(sp),-(sp)
    a7d4:	|      move.l d0,-(sp)
    a7d6:	|      jsr 8d0 <put2bytes>
    a7dc:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    a7de:	|      movea.l 24(sp),a0
    a7e2:	|      move.w 30(a0),d0
    a7e6:	|      move.w d0,d0
    a7e8:	|      andi.l #65535,d0
    a7ee:	|      move.l 28(sp),-(sp)
    a7f2:	|      move.l d0,-(sp)
    a7f4:	|      jsr 8d0 <put2bytes>
    a7fa:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    a7fc:	|      movea.l 24(sp),a0
    a800:	|      move.w 32(a0),d0
    a804:	|      move.w d0,d0
    a806:	|      andi.l #65535,d0
    a80c:	|      move.l 28(sp),-(sp)
    a810:	|      move.l d0,-(sp)
    a812:	|      jsr 8d0 <put2bytes>
    a818:	|      addq.l #8,sp
	}
}
    a81a:	\----> nop
    a81c:	       move.l (sp)+,d2
    a81e:	       movea.l (sp)+,a6
    a820:	       lea 12(sp),sp
    a824:	       rts

0000a826 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    a826:	pea 158a6 <custom.c.36a9b171+0xcac>
    a82c:	jsr 13a4a <KPrintF>
    a832:	addq.l #4,sp
	return TRUE;
    a834:	moveq #1,d0
    a836:	rts

0000a838 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    a838:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    a83a:	             move.l 18cc6 <allObjectTypes>,(sp)

	while (huntType) {
    a840:	      /----- bra.s a858 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    a842:	   /--|----> movea.l (sp),a0
    a844:	   |  |      move.l 4(a0),d0
    a848:	   |  |      cmp.l 8(sp),d0
    a84c:	   |  |  /-- bne.s a852 <findObjectType+0x1a>
    a84e:	   |  |  |   move.l (sp),d0
    a850:	/--|--|--|-- bra.s a868 <findObjectType+0x30>
		huntType = huntType -> next;
    a852:	|  |  |  \-> movea.l (sp),a0
    a854:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    a858:	|  |  \----> tst.l (sp)
    a85a:	|  \-------- bne.s a842 <findObjectType+0xa>
	}

	return loadObjectType (i);
    a85c:	|            move.l 8(sp),-(sp)
    a860:	|            jsr a928 <loadObjectType>
    a866:	|            addq.l #4,sp
}
    a868:	\----------> addq.l #4,sp
    a86a:	             rts

0000a86c <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    a86c:	             lea -12(sp),sp
	int i, num = 0;
    a870:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    a874:	             move.l 20(sp),-(sp)
    a878:	             jsr a838 <findObjectType>
    a87e:	             addq.l #4,sp
    a880:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    a882:	             clr.l 8(sp)
    a886:	   /-------- bra.s a8bc <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    a888:	/--|-------> movea.l (sp),a0
    a88a:	|  |         move.l 38(a0),d1
    a88e:	|  |         move.l 8(sp),d0
    a892:	|  |         lsl.l #3,d0
    a894:	|  |         movea.l d1,a0
    a896:	|  |         adda.l d0,a0
    a898:	|  |         move.l (a0),d0
    a89a:	|  |         cmp.l 16(sp),d0
    a89e:	|  |  /----- bne.s a8b8 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    a8a0:	|  |  |      movea.l (sp),a0
    a8a2:	|  |  |      move.l 38(a0),d1
    a8a6:	|  |  |      move.l 8(sp),d0
    a8aa:	|  |  |      lsl.l #3,d0
    a8ac:	|  |  |      movea.l d1,a0
    a8ae:	|  |  |      adda.l d0,a0
    a8b0:	|  |  |      move.l 4(a0),4(sp)
			break;
    a8b6:	|  |  |  /-- bra.s a8c8 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    a8b8:	|  |  \--|-> addq.l #1,8(sp)
    a8bc:	|  \-----|-> movea.l (sp),a0
    a8be:	|        |   move.l 16(a0),d0
    a8c2:	|        |   cmp.l 8(sp),d0
    a8c6:	\--------|-- bgt.s a888 <getCombinationFunction+0x1c>
		}
	}

	return num;
    a8c8:	         \-> move.l 4(sp),d0
}
    a8cc:	             lea 12(sp),sp
    a8d0:	             rts

0000a8d2 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    a8d2:	moveq #1,d0
}
    a8d4:	rts

0000a8d6 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    a8d6:	subq.l #8,sp
    a8d8:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    a8da:	move.l 16(sp),-(sp)
    a8de:	jsr 6bc <get2bytes>
    a8e4:	addq.l #4,sp
    a8e6:	move.l d0,-(sp)
    a8e8:	jsr a928 <loadObjectType>
    a8ee:	addq.l #4,sp
    a8f0:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    a8f4:	movea.l 8(sp),a0
    a8f8:	move.l (a0),4(sp)
    a8fc:	move.l 18bc0 <SysBase>,d0
    a902:	movea.l d0,a6
    a904:	movea.l 4(sp),a1
    a908:	jsr -690(a6)
	r -> screenName = readString (fp);
    a90c:	move.l 16(sp),-(sp)
    a910:	jsr b02 <readString>
    a916:	addq.l #4,sp
    a918:	movea.l 8(sp),a0
    a91c:	move.l d0,(a0)
	return r;
    a91e:	move.l 8(sp),d0
}
    a922:	movea.l (sp)+,a6
    a924:	addq.l #8,sp
    a926:	rts

0000a928 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    a928:	          lea -84(sp),sp
    a92c:	          move.l a6,-(sp)
    a92e:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    a930:	          moveq #42,d0
    a932:	          move.l d0,84(sp)
    a936:	          clr.l 80(sp)
    a93a:	          move.l 18bc0 <SysBase>,d0
    a940:	          movea.l d0,a6
    a942:	          move.l 84(sp),d0
    a946:	          move.l 80(sp),d1
    a94a:	          jsr -684(a6)
    a94e:	          move.l d0,76(sp)
    a952:	          move.l 76(sp),d0
    a956:	          move.l d0,72(sp)

    if (newType) {
    a95a:	/-------- beq.w abd4 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    a95e:	|         move.l 96(sp),-(sp)
    a962:	|         jsr 461e <openObjectSlice>
    a968:	|         addq.l #4,sp
    a96a:	|         tst.w d0
    a96c:	+-------- beq.w abd4 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    a970:	|         move.l 18ba8 <bigDataFile>,d0
    a976:	|         move.l d0,-(sp)
    a978:	|         jsr 6bc <get2bytes>
    a97e:	|         addq.l #4,sp
    a980:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    a984:	|         move.l 18ba8 <bigDataFile>,64(sp)
    a98c:	|         move.l 18bc8 <DOSBase>,d0
    a992:	|         movea.l d0,a6
    a994:	|         move.l 64(sp),d1
    a998:	|         jsr -306(a6)
    a99c:	|         move.l d0,60(sp)
    a9a0:	|         move.l 60(sp),d0
    a9a4:	|         move.l d0,d0
    a9a6:	|         movea.l 72(sp),a0
    a9aa:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    a9ae:	|         move.l 18ba8 <bigDataFile>,56(sp)
    a9b6:	|         move.l 18bc8 <DOSBase>,d0
    a9bc:	|         movea.l d0,a6
    a9be:	|         move.l 56(sp),d1
    a9c2:	|         jsr -306(a6)
    a9c6:	|         move.l d0,52(sp)
    a9ca:	|         move.l 52(sp),d0
    a9ce:	|         move.l d0,d0
    a9d0:	|         movea.l 72(sp),a0
    a9d4:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    a9d8:	|         move.l 18ba8 <bigDataFile>,48(sp)
    a9e0:	|         move.l 18bc8 <DOSBase>,d0
    a9e6:	|         movea.l d0,a6
    a9e8:	|         move.l 48(sp),d1
    a9ec:	|         jsr -306(a6)
    a9f0:	|         move.l d0,44(sp)
    a9f4:	|         move.l 44(sp),d0
    a9f8:	|         move.l d0,d0
    a9fa:	|         movea.l 72(sp),a0
    a9fe:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    aa02:	|         move.l 18ba8 <bigDataFile>,40(sp)
    aa0a:	|         move.l 18bc8 <DOSBase>,d0
    aa10:	|         movea.l d0,a6
    aa12:	|         move.l 40(sp),d1
    aa16:	|         jsr -306(a6)
    aa1a:	|         move.l d0,36(sp)
    aa1e:	|         move.l 36(sp),d0
    aa22:	|         movea.l 72(sp),a0
    aa26:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    aa2a:	|         move.l 18ba8 <bigDataFile>,32(sp)
    aa32:	|         move.l 18bc8 <DOSBase>,d0
    aa38:	|         movea.l d0,a6
    aa3a:	|         move.l 32(sp),d1
    aa3e:	|         jsr -306(a6)
    aa42:	|         move.l d0,28(sp)
    aa46:	|         move.l 28(sp),d0
    aa4a:	|         movea.l 72(sp),a0
    aa4e:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    aa52:	|         move.l 18ba8 <bigDataFile>,d0
    aa58:	|         move.l d0,-(sp)
    aa5a:	|         jsr 718 <get4bytes>
    aa60:	|         addq.l #4,sp
    aa62:	|         movea.l 72(sp),a0
    aa66:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    aa6a:	|         move.l 18ba8 <bigDataFile>,d0
    aa70:	|         move.l d0,-(sp)
    aa72:	|         jsr 6bc <get2bytes>
    aa78:	|         addq.l #4,sp
    aa7a:	|         movea.l 72(sp),a0
    aa7e:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    aa82:	|         move.l 18ba8 <bigDataFile>,24(sp)
    aa8a:	|         move.l 18bc8 <DOSBase>,d0
    aa90:	|         movea.l d0,a6
    aa92:	|         move.l 24(sp),d1
    aa96:	|         jsr -306(a6)
    aa9a:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    aa9e:	|         move.l 18ba8 <bigDataFile>,d0
    aaa4:	|         move.l d0,-(sp)
    aaa6:	|         jsr 7d8 <getFloat>
    aaac:	|         addq.l #4,sp
            getFloat(bigDataFile);
    aaae:	|         move.l 18ba8 <bigDataFile>,d0
    aab4:	|         move.l d0,-(sp)
    aab6:	|         jsr 7d8 <getFloat>
    aabc:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    aabe:	|         move.l 18ba8 <bigDataFile>,d0
    aac4:	|         move.l d0,-(sp)
    aac6:	|         jsr 6bc <get2bytes>
    aacc:	|         addq.l #4,sp
    aace:	|         move.l d0,d0
    aad0:	|         movea.l 72(sp),a0
    aad4:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    aad8:	|         move.l 18ba8 <bigDataFile>,d0
    aade:	|         move.l d0,-(sp)
    aae0:	|         jsr 6bc <get2bytes>
    aae6:	|         addq.l #4,sp
    aae8:	|         movea.l 72(sp),a0
    aaec:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    aaf0:	|         movea.l 72(sp),a0
    aaf4:	|         move.l 16(a0),d0
    aaf8:	|  /----- beq.s ab2a <loadObjectType+0x202>
    aafa:	|  |      movea.l 72(sp),a0
    aafe:	|  |      move.l 16(a0),d0
    ab02:	|  |      lsl.l #3,d0
    ab04:	|  |      move.l d0,16(sp)
    ab08:	|  |      clr.l 12(sp)
    ab0c:	|  |      move.l 18bc0 <SysBase>,d0
    ab12:	|  |      movea.l d0,a6
    ab14:	|  |      move.l 16(sp),d0
    ab18:	|  |      move.l 12(sp),d1
    ab1c:	|  |      jsr -684(a6)
    ab20:	|  |      move.l d0,8(sp)
    ab24:	|  |      move.l 8(sp),d0
    ab28:	|  |  /-- bra.s ab2c <loadObjectType+0x204>
    ab2a:	|  \--|-> moveq #0,d0
    ab2c:	|     \-> movea.l 72(sp),a0
    ab30:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    ab34:	|         clr.l 88(sp)
    ab38:	|     /-- bra.s ab88 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    ab3a:	|  /--|-> move.l 18ba8 <bigDataFile>,d1
    ab40:	|  |  |   movea.l 72(sp),a0
    ab44:	|  |  |   movea.l 38(a0),a0
    ab48:	|  |  |   move.l 88(sp),d0
    ab4c:	|  |  |   lsl.l #3,d0
    ab4e:	|  |  |   lea (0,a0,d0.l),a2
    ab52:	|  |  |   move.l d1,-(sp)
    ab54:	|  |  |   jsr 6bc <get2bytes>
    ab5a:	|  |  |   addq.l #4,sp
    ab5c:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    ab5e:	|  |  |   move.l 18ba8 <bigDataFile>,d1
    ab64:	|  |  |   movea.l 72(sp),a0
    ab68:	|  |  |   movea.l 38(a0),a0
    ab6c:	|  |  |   move.l 88(sp),d0
    ab70:	|  |  |   lsl.l #3,d0
    ab72:	|  |  |   lea (0,a0,d0.l),a2
    ab76:	|  |  |   move.l d1,-(sp)
    ab78:	|  |  |   jsr 6bc <get2bytes>
    ab7e:	|  |  |   addq.l #4,sp
    ab80:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    ab84:	|  |  |   addq.l #1,88(sp)
    ab88:	|  |  \-> movea.l 72(sp),a0
    ab8c:	|  |      move.l 16(a0),d0
    ab90:	|  |      cmp.l 88(sp),d0
    ab94:	|  \----- bgt.s ab3a <loadObjectType+0x212>
            }
            finishAccess();
    ab96:	|         jsr 444e <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    ab9c:	|         move.l 68(sp),-(sp)
    aba0:	|         jsr 4458 <getNumberedString>
    aba6:	|         addq.l #4,sp
    aba8:	|         movea.l 72(sp),a0
    abac:	|         move.l d0,(a0)
            newType->objectNum = i;
    abae:	|         movea.l 72(sp),a0
    abb2:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    abb8:	|         move.l 18cc6 <allObjectTypes>,d0
    abbe:	|         movea.l 72(sp),a0
    abc2:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    abc6:	|         move.l 72(sp),18cc6 <allObjectTypes>
            return newType;
    abce:	|         move.l 72(sp),d0
    abd2:	|     /-- bra.s abd6 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    abd4:	\-----|-> moveq #0,d0
}
    abd6:	      \-> movea.l (sp)+,a2
    abd8:	          movea.l (sp)+,a6
    abda:	          lea 84(sp),sp
    abde:	          rts

0000abe0 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    abe0:	             lea -16(sp),sp
    abe4:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    abe6:	             move.l #101574,16(sp)

	while (* huntRegion) {
    abee:	   /-------- bra.s ac62 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    abf0:	/--|-------> movea.l 16(sp),a0
    abf4:	|  |         move.l (a0),d0
    abf6:	|  |         cmp.l 24(sp),d0
    abfa:	|  |  /----- bne.s ac54 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    abfc:	|  |  |      movea.l 24(sp),a0
    ac00:	|  |  |      move.l 8(a0),d0
    ac04:	|  |  |      movea.l 16(sp),a0
    ac08:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    ac0a:	|  |  |      movea.l 24(sp),a0
    ac0e:	|  |  |      move.l 38(a0),12(sp)
    ac14:	|  |  |      move.l 18bc0 <SysBase>,d0
    ac1a:	|  |  |      movea.l d0,a6
    ac1c:	|  |  |      movea.l 12(sp),a1
    ac20:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    ac24:	|  |  |      movea.l 24(sp),a0
    ac28:	|  |  |      move.l (a0),8(sp)
    ac2c:	|  |  |      move.l 18bc0 <SysBase>,d0
    ac32:	|  |  |      movea.l d0,a6
    ac34:	|  |  |      movea.l 8(sp),a1
    ac38:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    ac3c:	|  |  |      move.l 24(sp),4(sp)
    ac42:	|  |  |      move.l 18bc0 <SysBase>,d0
    ac48:	|  |  |      movea.l d0,a6
    ac4a:	|  |  |      movea.l 4(sp),a1
    ac4e:	|  |  |      jsr -690(a6)
			return;
    ac52:	|  |  |  /-- bra.s ac78 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    ac54:	|  |  \--|-> movea.l 16(sp),a0
    ac58:	|  |     |   move.l (a0),d0
    ac5a:	|  |     |   move.l d0,d1
    ac5c:	|  |     |   addq.l #8,d1
    ac5e:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    ac62:	|  \-----|-> movea.l 16(sp),a0
    ac66:	|        |   move.l (a0),d0
    ac68:	\--------|-- bne.s abf0 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    ac6a:	         |   pea 158cd <custom.c.36a9b171+0xcd3>
    ac70:	         |   jsr 13a4a <KPrintF>
    ac76:	         |   addq.l #4,sp
}
    ac78:	         \-> movea.l (sp)+,a6
    ac7a:	             lea 16(sp),sp
    ac7e:	             rts

0000ac80 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    ac80:	movea.l 4(sp),a0
    ac84:	move.l 4(a0),d0
    ac88:	move.l 8(sp),-(sp)
    ac8c:	move.l d0,-(sp)
    ac8e:	jsr 8d0 <put2bytes>
    ac94:	addq.l #8,sp
	writeString (r -> screenName, fp);
    ac96:	movea.l 4(sp),a0
    ac9a:	move.l (a0),d0
    ac9c:	move.l 8(sp),-(sp)
    aca0:	move.l d0,-(sp)
    aca2:	jsr bd8 <writeString>
    aca8:	addq.l #8,sp
    acaa:	nop
    acac:	rts

0000acae <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    acae:	                         lea -112(sp),sp
    acb2:	                         move.l a6,-(sp)
    acb4:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    acb6:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    acba:	                         move.w 18ccc <saveEncoding>,d0
    acc0:	                  /----- beq.s acca <fileToStack+0x1c>
    acc2:	                  |      move.l #88307,d0
    acc8:	                  |  /-- bra.s acd0 <fileToStack+0x22>
    acca:	                  \--|-> move.l #88333,d0
    acd0:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    acd4:	                         move.l 124(sp),112(sp)
    acda:	                         move.l #1005,108(sp)
    ace2:	                         move.l 18bc8 <DOSBase>,d0
    ace8:	                         movea.l d0,a6
    acea:	                         move.l 112(sp),d1
    acee:	                         move.l 108(sp),d2
    acf2:	                         jsr -30(a6)
    acf6:	                         move.l d0,104(sp)
    acfa:	                         move.l 104(sp),d0
    acfe:	                         move.l d0,100(sp)
    if (!fp) {
    ad02:	                     /-- bne.s ad1c <fileToStack+0x6e>
        KPrintF("No such file", filename);
    ad04:	                     |   move.l 124(sp),-(sp)
    ad08:	                     |   pea 15924 <custom.c.36a9b171+0xd2a>
    ad0e:	                     |   jsr 13a4a <KPrintF>
    ad14:	                     |   addq.l #8,sp
        return FALSE;
    ad16:	                     |   clr.w d0
    ad18:	/--------------------|-- bra.w b012 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    ad1c:	|                    \-> move.w 18ccc <saveEncoding>,d0
    ad22:	|                        move.l d0,d0
    ad24:	|                        move.b d0,18cca <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    ad2a:	|                        move.w 18ccc <saveEncoding>,d0
    ad30:	|                        lsr.w #8,d0
    ad32:	|                        move.l d0,d0
    ad34:	|                        move.b d0,18ccb <encode2>

    while (*checker) {
    ad3a:	|                 /----- bra.s ad9e <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    ad3c:	|              /--|----> move.l 100(sp),30(sp)
    ad42:	|              |  |      move.l 18bc8 <DOSBase>,d0
    ad48:	|              |  |      movea.l d0,a6
    ad4a:	|              |  |      move.l 30(sp),d1
    ad4e:	|              |  |      jsr -306(a6)
    ad52:	|              |  |      move.l d0,26(sp)
    ad56:	|              |  |      move.l 26(sp),d1
    ad5a:	|              |  |      movea.l 116(sp),a0
    ad5e:	|              |  |      move.b (a0),d0
    ad60:	|              |  |      ext.w d0
    ad62:	|              |  |      movea.w d0,a0
    ad64:	|              |  |      cmpa.l d1,a0
    ad66:	|              |  |  /-- beq.s ad9a <fileToStack+0xec>
            Close(fp);
    ad68:	|              |  |  |   move.l 100(sp),22(sp)
    ad6e:	|              |  |  |   move.l 18bc8 <DOSBase>,d0
    ad74:	|              |  |  |   movea.l d0,a6
    ad76:	|              |  |  |   move.l 22(sp),d1
    ad7a:	|              |  |  |   jsr -36(a6)
    ad7e:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    ad82:	|              |  |  |   move.l 124(sp),-(sp)
    ad86:	|              |  |  |   pea 15931 <custom.c.36a9b171+0xd37>
    ad8c:	|              |  |  |   jsr 13a4a <KPrintF>
    ad92:	|              |  |  |   addq.l #8,sp
            return FALSE;
    ad94:	|              |  |  |   clr.w d0
    ad96:	+--------------|--|--|-- bra.w b012 <fileToStack+0x364>
        }
        checker++;
    ad9a:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    ad9e:	|              |  \----> movea.l 116(sp),a0
    ada2:	|              |         move.b (a0),d0
    ada4:	|              \-------- bne.s ad3c <fileToStack+0x8e>
    }

    if (saveEncoding) {
    ada6:	|                        move.w 18ccc <saveEncoding>,d0
    adac:	|  /-------------------- beq.s ae20 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    adae:	|  |                     move.l 100(sp),-(sp)
    adb2:	|  |                     jsr b01c <readStringEncoded>
    adb8:	|  |                     addq.l #4,sp
    adba:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    adbe:	|  |                     pea 15972 <custom.c.36a9b171+0xd78>
    adc4:	|  |                     move.l 100(sp),-(sp)
    adc8:	|  |                     jsr 10eae <strcmp>
    adce:	|  |                     addq.l #8,sp
    add0:	|  |                     tst.l d0
    add2:	|  |                 /-- beq.s ae06 <fileToStack+0x158>
            Close(fp);
    add4:	|  |                 |   move.l 100(sp),88(sp)
    adda:	|  |                 |   move.l 18bc8 <DOSBase>,d0
    ade0:	|  |                 |   movea.l d0,a6
    ade2:	|  |                 |   move.l 88(sp),d1
    ade6:	|  |                 |   jsr -36(a6)
    adea:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    adee:	|  |                 |   move.l 124(sp),-(sp)
    adf2:	|  |                 |   pea 15981 <custom.c.36a9b171+0xd87>
    adf8:	|  |                 |   jsr 13a4a <KPrintF>
    adfe:	|  |                 |   addq.l #8,sp
            return FALSE;
    ae00:	|  |                 |   clr.w d0
    ae02:	+--|-----------------|-- bra.w b012 <fileToStack+0x364>
        }
        FreeVec(checker);
    ae06:	|  |                 \-> move.l 96(sp),92(sp)
    ae0c:	|  |                     move.l 18bc0 <SysBase>,d0
    ae12:	|  |                     movea.l d0,a6
    ae14:	|  |                     movea.l 92(sp),a1
    ae18:	|  |                     jsr -690(a6)
        checker = NULL;
    ae1c:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    ae20:	|  >-------------------> move.w 18ccc <saveEncoding>,d0
    ae26:	|  |     /-------------- beq.w af5a <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    ae2a:	|  |     |               move.l 100(sp),76(sp)
    ae30:	|  |     |               move.l 18bc8 <DOSBase>,d0
    ae36:	|  |     |               movea.l d0,a6
    ae38:	|  |     |               move.l 76(sp),d1
    ae3c:	|  |     |               jsr -306(a6)
    ae40:	|  |     |               move.l d0,72(sp)
    ae44:	|  |     |               move.l 72(sp),d0
    ae48:	|  |     |               move.b 18cca <encode1>,d1
    ae4e:	|  |     |               ext.w d1
    ae50:	|  |     |               ext.l d1
    ae52:	|  |     |               move.l d0,d2
    ae54:	|  |     |               eor.l d1,d2
    ae56:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    ae5a:	|  |     |               moveq #-1,d0
    ae5c:	|  |     |               cmp.l 68(sp),d0
    ae60:	|  |  /--|-------------- beq.w aff0 <fileToStack+0x342>

            char i = (char) tmp;
    ae64:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    ae6a:	|  |  |  |               move.b 67(sp),d0
    ae6e:	|  |  |  |               ext.w d0
    ae70:	|  |  |  |               movea.w d0,a0
    ae72:	|  |  |  |               moveq #2,d2
    ae74:	|  |  |  |               cmp.l a0,d2
    ae76:	|  |  |  |     /-------- beq.s aef2 <fileToStack+0x244>
    ae78:	|  |  |  |     |         moveq #2,d0
    ae7a:	|  |  |  |     |         cmp.l a0,d0
    ae7c:	|  |  |  |  /--|-------- blt.w af28 <fileToStack+0x27a>
    ae80:	|  |  |  |  |  |         cmpa.w #0,a0
    ae84:	|  |  |  |  |  |     /-- beq.s ae90 <fileToStack+0x1e2>
    ae86:	|  |  |  |  |  |     |   moveq #1,d2
    ae88:	|  |  |  |  |  |     |   cmp.l a0,d2
    ae8a:	|  |  |  |  |  |  /--|-- beq.s aecc <fileToStack+0x21e>
    ae8c:	|  |  |  |  +--|--|--|-- bra.w af28 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    ae90:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    ae94:	|  |  |  |  |  |  |      jsr b01c <readStringEncoded>
    ae9a:	|  |  |  |  |  |  |      addq.l #4,sp
    ae9c:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    aea0:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    aea4:	|  |  |  |  |  |  |      lea 14(sp),a0
    aea8:	|  |  |  |  |  |  |      move.l a0,-(sp)
    aeaa:	|  |  |  |  |  |  |      jsr 11c24 <makeTextVar>
    aeb0:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    aeb2:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    aeb8:	|  |  |  |  |  |  |      move.l 18bc0 <SysBase>,d0
    aebe:	|  |  |  |  |  |  |      movea.l d0,a6
    aec0:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    aec4:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    aec8:	|  |  |  |  |  |  |  /-- bra.w af80 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    aecc:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    aed0:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    aed6:	|  |  |  |  |  |     |   addq.l #4,sp
    aed8:	|  |  |  |  |  |     |   move.l d0,-(sp)
    aeda:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    aede:	|  |  |  |  |  |     |   lea 18(sp),a0
    aee2:	|  |  |  |  |  |     |   move.l a0,-(sp)
    aee4:	|  |  |  |  |  |     |   jsr 122f4 <setVariable>
    aeea:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    aeee:	|  |  |  |  |  |     +-- bra.w af80 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    aef2:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    aef8:	|  |  |  |  |        |   move.l 18bc8 <DOSBase>,d0
    aefe:	|  |  |  |  |        |   movea.l d0,a6
    af00:	|  |  |  |  |        |   move.l 62(sp),d1
    af04:	|  |  |  |  |        |   jsr -306(a6)
    af08:	|  |  |  |  |        |   move.l d0,58(sp)
    af0c:	|  |  |  |  |        |   move.l 58(sp),d0
    af10:	|  |  |  |  |        |   move.l d0,-(sp)
    af12:	|  |  |  |  |        |   pea 1 <_start+0x1>
    af16:	|  |  |  |  |        |   lea 18(sp),a0
    af1a:	|  |  |  |  |        |   move.l a0,-(sp)
    af1c:	|  |  |  |  |        |   jsr 122f4 <setVariable>
    af22:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    af26:	|  |  |  |  |        +-- bra.s af80 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    af28:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    af2c:	|  |  |  |           |   pea 15a03 <custom.c.36a9b171+0xe09>
    af32:	|  |  |  |           |   jsr 13a4a <KPrintF>
    af38:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    af3a:	|  |  |  |           |   move.l 100(sp),46(sp)
    af40:	|  |  |  |           |   move.l 18bc8 <DOSBase>,d0
    af46:	|  |  |  |           |   movea.l d0,a6
    af48:	|  |  |  |           |   move.l 46(sp),d1
    af4c:	|  |  |  |           |   jsr -36(a6)
    af50:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    af54:	|  |  |  |           |   clr.w d0
    af56:	+--|--|--|-----------|-- bra.w b012 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    af5a:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    af5e:	|  |  |              |   jsr b0e2 <readTextPlain>
    af64:	|  |  |              |   addq.l #4,sp
    af66:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    af6a:	|  |  |        /-----|-- beq.w aff4 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    af6e:	|  |  |        |     |   move.l 80(sp),-(sp)
    af72:	|  |  |        |     |   lea 14(sp),a0
    af76:	|  |  |        |     |   move.l a0,-(sp)
    af78:	|  |  |        |     |   jsr 11c24 <makeTextVar>
    af7e:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    af80:	|  |  |        |     \-> movea.l 128(sp),a0
    af84:	|  |  |        |         move.l (a0),d0
    af86:	|  |  |        |  /----- bne.s afb6 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    af88:	|  |  |        |  |      move.l 128(sp),d0
    af8c:	|  |  |        |  |      move.l d0,-(sp)
    af8e:	|  |  |        |  |      lea 14(sp),a0
    af92:	|  |  |        |  |      move.l a0,-(sp)
    af94:	|  |  |        |  |      jsr 112c4 <addVarToStackQuick>
    af9a:	|  |  |        |  |      addq.l #8,sp
    af9c:	|  |  |        |  |      tst.w d0
    af9e:	|  |  |        |  |  /-- bne.s afa4 <fileToStack+0x2f6>
    afa0:	|  |  |        |  |  |   clr.w d0
    afa2:	+--|--|--------|--|--|-- bra.s b012 <fileToStack+0x364>
            sH->last = sH->first;
    afa4:	|  |  |        |  |  \-> movea.l 128(sp),a0
    afa8:	|  |  |        |  |      move.l (a0),d0
    afaa:	|  |  |        |  |      movea.l 128(sp),a0
    afae:	|  |  |        |  |      move.l d0,4(a0)
    afb2:	|  +--|--------|--|----- bra.w ae20 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    afb6:	|  |  |        |  \----> movea.l 128(sp),a0
    afba:	|  |  |        |         move.l 4(a0),d0
    afbe:	|  |  |        |         addq.l #8,d0
    afc0:	|  |  |        |         move.l d0,-(sp)
    afc2:	|  |  |        |         lea 14(sp),a0
    afc6:	|  |  |        |         move.l a0,-(sp)
    afc8:	|  |  |        |         jsr 112c4 <addVarToStackQuick>
    afce:	|  |  |        |         addq.l #8,sp
    afd0:	|  |  |        |         tst.w d0
    afd2:	|  |  |        |     /-- bne.s afd8 <fileToStack+0x32a>
    afd4:	|  |  |        |     |   clr.w d0
    afd6:	+--|--|--------|-----|-- bra.s b012 <fileToStack+0x364>
            sH->last = sH->last->next;
    afd8:	|  |  |        |     \-> movea.l 128(sp),a0
    afdc:	|  |  |        |         movea.l 4(a0),a0
    afe0:	|  |  |        |         move.l 8(a0),d0
    afe4:	|  |  |        |         movea.l 128(sp),a0
    afe8:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    afec:	|  \--|--------|-------- bra.w ae20 <fileToStack+0x172>
            if (tmp == -1) break;
    aff0:	|     \--------|-------> nop
    aff2:	|              |     /-- bra.s aff6 <fileToStack+0x348>
            if (!line) break;
    aff4:	|              \-----|-> nop
        }
    }
    Close(fp);
    aff6:	|                    \-> move.l 100(sp),38(sp)
    affc:	|                        move.l 18bc8 <DOSBase>,d0
    b002:	|                        movea.l d0,a6
    b004:	|                        move.l 38(sp),d1
    b008:	|                        jsr -36(a6)
    b00c:	|                        move.l d0,34(sp)
    return TRUE;
    b010:	|                        moveq #1,d0
}
    b012:	\----------------------> move.l (sp)+,d2
    b014:	                         movea.l (sp)+,a6
    b016:	                         lea 112(sp),sp
    b01a:	                         rts

0000b01c <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    b01c:	          lea -32(sp),sp
    b020:	          move.l a6,-(sp)
    b022:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    b024:	          move.l 44(sp),-(sp)
    b028:	          jsr 6bc <get2bytes>
    b02e:	          addq.l #4,sp
    b030:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    b034:	          move.l 32(sp),d0
    b038:	          addq.l #1,d0
    b03a:	          move.l d0,28(sp)
    b03e:	          clr.l 24(sp)
    b042:	          move.l 18bc0 <SysBase>,d0
    b048:	          movea.l d0,a6
    b04a:	          move.l 28(sp),d0
    b04e:	          move.l 24(sp),d1
    b052:	          jsr -684(a6)
    b056:	          move.l d0,20(sp)
    b05a:	          move.l 20(sp),d0
    b05e:	          move.l d0,16(sp)
    if (!s) return NULL;
    b062:	      /-- bne.s b068 <readStringEncoded+0x4c>
    b064:	      |   moveq #0,d0
    b066:	/-----|-- bra.s b0d8 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    b068:	|     \-> clr.l 36(sp)
    b06c:	|     /-- bra.s b0be <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    b06e:	|  /--|-> move.l 44(sp),12(sp)
    b074:	|  |  |   move.l 18bc8 <DOSBase>,d0
    b07a:	|  |  |   movea.l d0,a6
    b07c:	|  |  |   move.l 12(sp),d1
    b080:	|  |  |   jsr -306(a6)
    b084:	|  |  |   move.l d0,8(sp)
    b088:	|  |  |   move.l 8(sp),d0
    b08c:	|  |  |   move.l d0,d1
    b08e:	|  |  |   move.b 18cca <encode1>,d2
    b094:	|  |  |   move.l 36(sp),d0
    b098:	|  |  |   movea.l 16(sp),a0
    b09c:	|  |  |   adda.l d0,a0
    b09e:	|  |  |   move.b d1,d0
    b0a0:	|  |  |   eor.b d2,d0
    b0a2:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    b0a4:	|  |  |   move.b 18cca <encode1>,d0
    b0aa:	|  |  |   move.b d0,d1
    b0ac:	|  |  |   move.b 18ccb <encode2>,d0
    b0b2:	|  |  |   add.b d1,d0
    b0b4:	|  |  |   move.b d0,18cca <encode1>
    for (a = 0; a < len; a++) {
    b0ba:	|  |  |   addq.l #1,36(sp)
    b0be:	|  |  \-> move.l 36(sp),d0
    b0c2:	|  |      cmp.l 32(sp),d0
    b0c6:	|  \----- blt.s b06e <readStringEncoded+0x52>
    }
    s[len] = 0;
    b0c8:	|         move.l 32(sp),d0
    b0cc:	|         movea.l 16(sp),a0
    b0d0:	|         adda.l d0,a0
    b0d2:	|         clr.b (a0)
    return s;
    b0d4:	|         move.l 16(sp),d0
}
    b0d8:	\-------> move.l (sp)+,d2
    b0da:	          movea.l (sp)+,a6
    b0dc:	          lea 32(sp),sp
    b0e0:	          rts

0000b0e2 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    b0e2:	             lea -104(sp),sp
    b0e6:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    b0ea:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    b0ee:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    b0f4:	             move.l 124(sp),106(sp)
    b0fa:	             clr.l 102(sp)
    b0fe:	             clr.l 98(sp)
    b102:	             move.l 18bc8 <DOSBase>,d0
    b108:	             movea.l d0,a6
    b10a:	             move.l 106(sp),d1
    b10e:	             move.l 102(sp),d2
    b112:	             move.l 98(sp),d3
    b116:	             jsr -66(a6)
    b11a:	             move.l d0,94(sp)
    b11e:	             move.l 94(sp),d0
    b122:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    b126:	   /-------- bra.s b16a <readTextPlain+0x88>
        tmp = FGetC(fp);
    b128:	/--|-------> move.l 124(sp),22(sp)
    b12e:	|  |         move.l 18bc8 <DOSBase>,d0
    b134:	|  |         movea.l d0,a6
    b136:	|  |         move.l 22(sp),d1
    b13a:	|  |         jsr -306(a6)
    b13e:	|  |         move.l d0,18(sp)
    b142:	|  |         move.l 18(sp),d0
    b146:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    b14a:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    b150:	|  |         cmpi.b #10,17(sp)
    b156:	|  |  /----- beq.s b160 <readTextPlain+0x7e>
    b158:	|  |  |      moveq #-1,d0
    b15a:	|  |  |      cmp.l 110(sp),d0
    b15e:	|  |  |  /-- bne.s b166 <readTextPlain+0x84>
            keepGoing = FALSE;
    b160:	|  |  \--|-> clr.w 114(sp)
    b164:	|  +-----|-- bra.s b16a <readTextPlain+0x88>
        } else {
            stringSize++;
    b166:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    b16a:	|  \-------> tst.w 114(sp)
    b16e:	\----------- bne.s b128 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    b170:	             tst.l 116(sp)
    b174:	         /-- bne.s b184 <readTextPlain+0xa2>
    b176:	         |   moveq #-1,d0
    b178:	         |   cmp.l 110(sp),d0
    b17c:	         +-- bne.s b184 <readTextPlain+0xa2>
        return NULL;
    b17e:	         |   moveq #0,d0
    b180:	      /--|-- bra.w b26a <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    b184:	      |  \-> move.l 124(sp),86(sp)
    b18a:	      |      move.l 90(sp),82(sp)
    b190:	      |      moveq #-1,d0
    b192:	      |      move.l d0,78(sp)
    b196:	      |      move.l 18bc8 <DOSBase>,d0
    b19c:	      |      movea.l d0,a6
    b19e:	      |      move.l 86(sp),d1
    b1a2:	      |      move.l 82(sp),d2
    b1a6:	      |      move.l 78(sp),d3
    b1aa:	      |      jsr -66(a6)
    b1ae:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    b1b2:	      |      move.l 116(sp),d0
    b1b6:	      |      addq.l #1,d0
    b1b8:	      |      move.l d0,70(sp)
    b1bc:	      |      clr.l 66(sp)
    b1c0:	      |      move.l 18bc0 <SysBase>,d0
    b1c6:	      |      movea.l d0,a6
    b1c8:	      |      move.l 70(sp),d0
    b1cc:	      |      move.l 66(sp),d1
    b1d0:	      |      jsr -684(a6)
    b1d4:	      |      move.l d0,62(sp)
    b1d8:	      |      move.l 62(sp),d0
    b1dc:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    b1e0:	      |  /-- bne.s b1e8 <readTextPlain+0x106>
    b1e2:	      |  |   moveq #0,d0
    b1e4:	      +--|-- bra.w b26a <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    b1e8:	      |  \-> move.l 124(sp),54(sp)
    b1ee:	      |      move.l 58(sp),50(sp)
    b1f4:	      |      moveq #1,d0
    b1f6:	      |      move.l d0,46(sp)
    b1fa:	      |      move.l 116(sp),42(sp)
    b200:	      |      move.l 18bc8 <DOSBase>,d0
    b206:	      |      movea.l d0,a6
    b208:	      |      move.l 54(sp),d1
    b20c:	      |      move.l 50(sp),d2
    b210:	      |      move.l 46(sp),d3
    b214:	      |      move.l 42(sp),d4
    b218:	      |      jsr -324(a6)
    b21c:	      |      move.l d0,38(sp)
    b220:	      |      move.l 38(sp),d0
    b224:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    b228:	      |      move.l 34(sp),d0
    b22c:	      |      cmp.l 116(sp),d0
    b230:	      |  /-- beq.s b240 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    b232:	      |  |   pea 15a38 <custom.c.36a9b171+0xe3e>
    b238:	      |  |   jsr 13a4a <KPrintF>
    b23e:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    b240:	      |  \-> move.l 124(sp),30(sp)
    b246:	      |      move.l 18bc8 <DOSBase>,d0
    b24c:	      |      movea.l d0,a6
    b24e:	      |      move.l 30(sp),d1
    b252:	      |      jsr -306(a6)
    b256:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    b25a:	      |      move.l 116(sp),d0
    b25e:	      |      movea.l 58(sp),a0
    b262:	      |      adda.l d0,a0
    b264:	      |      clr.b (a0)
    }

    return reply;
    b266:	      |      move.l 58(sp),d0
}
    b26a:	      \----> movem.l (sp)+,d2-d4/a6
    b26e:	             lea 104(sp),sp
    b272:	             rts

0000b274 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    b274:	                      lea -144(sp),sp
    b278:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    b27c:	                      move.l 160(sp),148(sp)
    b282:	                      move.l #1006,144(sp)
    b28a:	                      move.l 18bc8 <DOSBase>,d0
    b290:	                      movea.l d0,a6
    b292:	                      move.l 148(sp),d1
    b296:	                      move.l 144(sp),d2
    b29a:	                      jsr -30(a6)
    b29e:	                      move.l d0,140(sp)
    b2a2:	                      move.l 140(sp),d0
    b2a6:	                      move.l d0,136(sp)

    if (!fp) {
    b2aa:	                  /-- bne.s b2c4 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    b2ac:	                  |   move.l 160(sp),-(sp)
    b2b0:	                  |   pea 15a59 <custom.c.36a9b171+0xe5f>
    b2b6:	                  |   jsr 13a4a <KPrintF>
    b2bc:	                  |   addq.l #8,sp
        return FALSE;
    b2be:	                  |   clr.w d0
    b2c0:	/-----------------|-- bra.w b580 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    b2c4:	|                 \-> movea.l 164(sp),a0
    b2c8:	|                     movea.l 4(a0),a0
    b2cc:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    b2d0:	|                     move.w 18ccc <saveEncoding>,d0
    b2d6:	|                     move.l d0,d0
    b2d8:	|                     move.b d0,18cca <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    b2de:	|                     move.w 18ccc <saveEncoding>,d0
    b2e4:	|                     lsr.w #8,d0
    b2e6:	|                     move.l d0,d0
    b2e8:	|                     move.b d0,18ccb <encode2>

    if (saveEncoding) {
    b2ee:	|                     move.w 18ccc <saveEncoding>,d0
    b2f4:	|                 /-- beq.s b346 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    b2f6:	|                 |   move.l 136(sp),116(sp)
    b2fc:	|                 |   move.l #88307,112(sp)
    b304:	|                 |   moveq #99,d0
    b306:	|                 |   not.b d0
    b308:	|                 |   add.l sp,d0
    b30a:	|                 |   addi.l #-144,d0
    b310:	|                 |   move.l d0,108(sp)
    b314:	|                 |   move.l 18bc8 <DOSBase>,d0
    b31a:	|                 |   movea.l d0,a6
    b31c:	|                 |   move.l 116(sp),d1
    b320:	|                 |   move.l 112(sp),d2
    b324:	|                 |   move.l 108(sp),d3
    b328:	|                 |   jsr -354(a6)
    b32c:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    b330:	|                 |   move.l 136(sp),-(sp)
    b334:	|                 |   pea 15972 <custom.c.36a9b171+0xd78>
    b33a:	|                 |   jsr b58a <writeStringEncoded>
    b340:	|                 |   addq.l #8,sp
    b342:	|  /--------------|-- bra.w b558 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    b346:	|  |              \-> move.l 136(sp),132(sp)
    b34c:	|  |                  move.l #88333,128(sp)
    b354:	|  |                  moveq #99,d1
    b356:	|  |                  not.b d1
    b358:	|  |                  add.l sp,d1
    b35a:	|  |                  addi.l #-144,d1
    b360:	|  |                  move.l d1,124(sp)
    b364:	|  |                  move.l 18bc8 <DOSBase>,d0
    b36a:	|  |                  movea.l d0,a6
    b36c:	|  |                  move.l 132(sp),d1
    b370:	|  |                  move.l 128(sp),d2
    b374:	|  |                  move.l 124(sp),d3
    b378:	|  |                  jsr -354(a6)
    b37c:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    b380:	|  +----------------- bra.w b558 <stackToFile+0x2e4>
        if (saveEncoding) {
    b384:	|  |  /-------------> move.w 18ccc <saveEncoding>,d0
    b38a:	|  |  |     /-------- beq.w b4dc <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    b38e:	|  |  |     |         movea.l 152(sp),a0
    b392:	|  |  |     |         move.l (a0),d0
    b394:	|  |  |     |         moveq #1,d1
    b396:	|  |  |     |         cmp.l d0,d1
    b398:	|  |  |     |     /-- beq.s b3e8 <stackToFile+0x174>
    b39a:	|  |  |     |     |   moveq #3,d1
    b39c:	|  |  |     |     |   cmp.l d0,d1
    b39e:	|  |  |     |  /--|-- bne.w b4aa <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    b3a2:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    b3a8:	|  |  |     |  |  |   move.b 18cca <encode1>,d0
    b3ae:	|  |  |     |  |  |   ext.w d0
    b3b0:	|  |  |     |  |  |   movea.w d0,a0
    b3b2:	|  |  |     |  |  |   move.l a0,72(sp)
    b3b6:	|  |  |     |  |  |   move.l 18bc8 <DOSBase>,d0
    b3bc:	|  |  |     |  |  |   movea.l d0,a6
    b3be:	|  |  |     |  |  |   move.l 76(sp),d1
    b3c2:	|  |  |     |  |  |   move.l 72(sp),d2
    b3c6:	|  |  |     |  |  |   jsr -312(a6)
    b3ca:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    b3ce:	|  |  |     |  |  |   movea.l 152(sp),a0
    b3d2:	|  |  |     |  |  |   move.l 4(a0),d0
    b3d6:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    b3da:	|  |  |     |  |  |   move.l d0,-(sp)
    b3dc:	|  |  |     |  |  |   jsr b58a <writeStringEncoded>
    b3e2:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    b3e4:	|  |  |  /--|--|--|-- bra.w b54e <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    b3e8:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    b3ec:	|  |  |  |  |  |      move.l 4(a0),d0
    b3f0:	|  |  |  |  |  |  /-- bmi.s b460 <stackToFile+0x1ec>
    b3f2:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    b3f6:	|  |  |  |  |  |  |   move.l 4(a0),d0
    b3fa:	|  |  |  |  |  |  |   cmpi.l #255,d0
    b400:	|  |  |  |  |  |  +-- bgt.s b460 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    b402:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    b408:	|  |  |  |  |  |  |   move.b 18cca <encode1>,d0
    b40e:	|  |  |  |  |  |  |   eori.b #2,d0
    b412:	|  |  |  |  |  |  |   ext.w d0
    b414:	|  |  |  |  |  |  |   movea.w d0,a0
    b416:	|  |  |  |  |  |  |   move.l a0,60(sp)
    b41a:	|  |  |  |  |  |  |   move.l 18bc8 <DOSBase>,d0
    b420:	|  |  |  |  |  |  |   movea.l d0,a6
    b422:	|  |  |  |  |  |  |   move.l 64(sp),d1
    b426:	|  |  |  |  |  |  |   move.l 60(sp),d2
    b42a:	|  |  |  |  |  |  |   jsr -312(a6)
    b42e:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    b432:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    b438:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    b43c:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    b442:	|  |  |  |  |  |  |   move.l 18bc8 <DOSBase>,d0
    b448:	|  |  |  |  |  |  |   movea.l d0,a6
    b44a:	|  |  |  |  |  |  |   move.l 52(sp),d1
    b44e:	|  |  |  |  |  |  |   move.l 48(sp),d2
    b452:	|  |  |  |  |  |  |   jsr -312(a6)
    b456:	|  |  |  |  |  |  |   move.l d0,44(sp)
    b45a:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    b45c:	|  |  |  +--|--|--|-- bra.w b54e <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    b460:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    b466:	|  |  |  |  |  |      move.b 18cca <encode1>,d0
    b46c:	|  |  |  |  |  |      eori.b #1,d0
    b470:	|  |  |  |  |  |      ext.w d0
    b472:	|  |  |  |  |  |      movea.w d0,a0
    b474:	|  |  |  |  |  |      move.l a0,36(sp)
    b478:	|  |  |  |  |  |      move.l 18bc8 <DOSBase>,d0
    b47e:	|  |  |  |  |  |      movea.l d0,a6
    b480:	|  |  |  |  |  |      move.l 40(sp),d1
    b484:	|  |  |  |  |  |      move.l 36(sp),d2
    b488:	|  |  |  |  |  |      jsr -312(a6)
    b48c:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    b490:	|  |  |  |  |  |      movea.l 152(sp),a0
    b494:	|  |  |  |  |  |      move.l 4(a0),d0
    b498:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    b49c:	|  |  |  |  |  |      move.l d0,-(sp)
    b49e:	|  |  |  |  |  |      jsr 958 <put4bytes>
    b4a4:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    b4a6:	|  |  |  +--|--|----- bra.w b54e <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    b4aa:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    b4ae:	|  |  |  |  |         pea 15a6b <custom.c.36a9b171+0xe71>
    b4b4:	|  |  |  |  |         jsr 13a4a <KPrintF>
    b4ba:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    b4bc:	|  |  |  |  |         move.l 136(sp),28(sp)
    b4c2:	|  |  |  |  |         move.l 18bc8 <DOSBase>,d0
    b4c8:	|  |  |  |  |         movea.l d0,a6
    b4ca:	|  |  |  |  |         move.l 28(sp),d1
    b4ce:	|  |  |  |  |         jsr -36(a6)
    b4d2:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    b4d6:	|  |  |  |  |         clr.w d0
    b4d8:	+--|--|--|--|-------- bra.w b580 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    b4dc:	|  |  |  |  \-------> move.l 152(sp),d0
    b4e0:	|  |  |  |            move.l d0,-(sp)
    b4e2:	|  |  |  |            jsr 11fd8 <getTextFromAnyVar>
    b4e8:	|  |  |  |            addq.l #4,sp
    b4ea:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    b4ee:	|  |  |  |     /----- beq.s b562 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    b4f0:	|  |  |  |     |      movea.l 100(sp),a0
    b4f4:	|  |  |  |     |      move.b (a0),d0
    b4f6:	|  |  |  |     |      ext.w d0
    b4f8:	|  |  |  |     |      movea.w d0,a0
    b4fa:	|  |  |  |     |      move.l a0,12(sp)
    b4fe:	|  |  |  |     |      move.l 136(sp),96(sp)
    b504:	|  |  |  |     |      move.l #88775,92(sp)
    b50c:	|  |  |  |     |      moveq #99,d0
    b50e:	|  |  |  |     |      not.b d0
    b510:	|  |  |  |     |      add.l sp,d0
    b512:	|  |  |  |     |      addi.l #-144,d0
    b518:	|  |  |  |     |      move.l d0,88(sp)
    b51c:	|  |  |  |     |      move.l 18bc8 <DOSBase>,d0
    b522:	|  |  |  |     |      movea.l d0,a6
    b524:	|  |  |  |     |      move.l 96(sp),d1
    b528:	|  |  |  |     |      move.l 92(sp),d2
    b52c:	|  |  |  |     |      move.l 88(sp),d3
    b530:	|  |  |  |     |      jsr -354(a6)
    b534:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    b538:	|  |  |  |     |      move.l 100(sp),80(sp)
    b53e:	|  |  |  |     |      move.l 18bc0 <SysBase>,d0
    b544:	|  |  |  |     |      movea.l d0,a6
    b546:	|  |  |  |     |      movea.l 80(sp),a1
    b54a:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    b54e:	|  |  |  \-----|----> movea.l 152(sp),a0
    b552:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    b558:	|  \--|--------|----> tst.l 152(sp)
    b55c:	|     \--------|----- bne.w b384 <stackToFile+0x110>
    b560:	|              |  /-- bra.s b564 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    b562:	|              \--|-> nop
    }
    Close(fp);
    b564:	|                 \-> move.l 136(sp),20(sp)
    b56a:	|                     move.l 18bc8 <DOSBase>,d0
    b570:	|                     movea.l d0,a6
    b572:	|                     move.l 20(sp),d1
    b576:	|                     jsr -36(a6)
    b57a:	|                     move.l d0,16(sp)
    return TRUE;
    b57e:	|                     moveq #1,d0
}
    b580:	\-------------------> movem.l (sp)+,d2-d3/a6
    b584:	                      lea 144(sp),sp
    b588:	                      rts

0000b58a <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    b58a:	       lea -20(sp),sp
    b58e:	       move.l a6,-(sp)
    b590:	       move.l d2,-(sp)
	int a, len = strlen (s);
    b592:	       move.l 32(sp),-(sp)
    b596:	       jsr 10eee <strlen>
    b59c:	       addq.l #4,sp
    b59e:	       move.l d0,20(sp)

	put2bytes (len, fp);
    b5a2:	       move.l 36(sp),-(sp)
    b5a6:	       move.l 24(sp),-(sp)
    b5aa:	       jsr 8d0 <put2bytes>
    b5b0:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    b5b2:	       clr.l 24(sp)
    b5b6:	   /-- bra.s b60c <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    b5b8:	/--|-> move.l 36(sp),16(sp)
    b5be:	|  |   move.l 24(sp),d0
    b5c2:	|  |   movea.l 32(sp),a0
    b5c6:	|  |   adda.l d0,a0
    b5c8:	|  |   move.b (a0),d1
    b5ca:	|  |   move.b 18cca <encode1>,d0
    b5d0:	|  |   eor.b d1,d0
    b5d2:	|  |   ext.w d0
    b5d4:	|  |   movea.w d0,a0
    b5d6:	|  |   move.l a0,12(sp)
    b5da:	|  |   move.l 18bc8 <DOSBase>,d0
    b5e0:	|  |   movea.l d0,a6
    b5e2:	|  |   move.l 16(sp),d1
    b5e6:	|  |   move.l 12(sp),d2
    b5ea:	|  |   jsr -312(a6)
    b5ee:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    b5f2:	|  |   move.b 18cca <encode1>,d0
    b5f8:	|  |   move.b d0,d1
    b5fa:	|  |   move.b 18ccb <encode2>,d0
    b600:	|  |   add.b d1,d0
    b602:	|  |   move.b d0,18cca <encode1>
	for (a = 0; a < len; a ++) {
    b608:	|  |   addq.l #1,24(sp)
    b60c:	|  \-> move.l 24(sp),d0
    b610:	|      cmp.l 20(sp),d0
    b614:	\----- blt.s b5b8 <writeStringEncoded+0x2e>
	}
}
    b616:	       nop
    b618:	       nop
    b61a:	       move.l (sp)+,d2
    b61c:	       movea.l (sp)+,a6
    b61e:	       lea 20(sp),sp
    b622:	       rts

0000b624 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    b624:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    b626:	                   tst.l 8(sp)
    b62a:	               /-- bne.s b630 <failSecurityCheck+0xc>
    b62c:	               |   moveq #1,d0
    b62e:	/--------------|-- bra.s b6ae <failSecurityCheck+0x8a>

	int a = 0;
    b630:	|              \-> clr.l (sp)

	while (fn[a]) {
    b632:	|     /----------- bra.s b6a0 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    b634:	|  /--|----------> move.l (sp),d0
    b636:	|  |  |            movea.l 8(sp),a0
    b63a:	|  |  |            adda.l d0,a0
    b63c:	|  |  |            move.b (a0),d0
    b63e:	|  |  |            ext.w d0
    b640:	|  |  |            movea.w d0,a0
    b642:	|  |  |            moveq #124,d0
    b644:	|  |  |            cmp.l a0,d0
    b646:	|  |  |     /----- beq.s b688 <failSecurityCheck+0x64>
    b648:	|  |  |     |      moveq #124,d1
    b64a:	|  |  |     |      cmp.l a0,d1
    b64c:	|  |  |  /--|----- blt.s b69e <failSecurityCheck+0x7a>
    b64e:	|  |  |  |  |      moveq #92,d0
    b650:	|  |  |  |  |      cmp.l a0,d0
    b652:	|  |  |  |  +----- beq.s b688 <failSecurityCheck+0x64>
    b654:	|  |  |  |  |      moveq #92,d1
    b656:	|  |  |  |  |      cmp.l a0,d1
    b658:	|  |  |  +--|----- blt.s b69e <failSecurityCheck+0x7a>
    b65a:	|  |  |  |  |      moveq #60,d0
    b65c:	|  |  |  |  |      cmp.l a0,d0
    b65e:	|  |  |  |  |  /-- blt.s b67e <failSecurityCheck+0x5a>
    b660:	|  |  |  |  |  |   moveq #34,d1
    b662:	|  |  |  |  |  |   cmp.l a0,d1
    b664:	|  |  |  +--|--|-- bgt.s b69e <failSecurityCheck+0x7a>
    b666:	|  |  |  |  |  |   moveq #-34,d1
    b668:	|  |  |  |  |  |   add.l a0,d1
    b66a:	|  |  |  |  |  |   move.l #83894529,d0
    b670:	|  |  |  |  |  |   lsr.l d1,d0
    b672:	|  |  |  |  |  |   moveq #1,d1
    b674:	|  |  |  |  |  |   and.l d1,d0
    b676:	|  |  |  |  |  |   sne d0
    b678:	|  |  |  |  |  |   neg.b d0
    b67a:	|  |  |  |  +--|-- bne.s b688 <failSecurityCheck+0x64>
    b67c:	|  |  |  +--|--|-- bra.s b69e <failSecurityCheck+0x7a>
    b67e:	|  |  |  |  |  \-> lea -62(a0),a0
    b682:	|  |  |  |  |      moveq #1,d0
    b684:	|  |  |  |  |      cmp.l a0,d0
    b686:	|  |  |  +--|----- bcs.s b69e <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    b688:	|  |  |  |  \----> move.l 8(sp),-(sp)
    b68c:	|  |  |  |         pea 15acb <custom.c.36a9b171+0xed1>
    b692:	|  |  |  |         jsr 13a4a <KPrintF>
    b698:	|  |  |  |         addq.l #8,sp
				return TRUE;
    b69a:	|  |  |  |         moveq #1,d0
    b69c:	+--|--|--|-------- bra.s b6ae <failSecurityCheck+0x8a>
		}
		a++;
    b69e:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    b6a0:	|  |  \----------> move.l (sp),d0
    b6a2:	|  |               movea.l 8(sp),a0
    b6a6:	|  |               adda.l d0,a0
    b6a8:	|  |               move.b (a0),d0
    b6aa:	|  \-------------- bne.s b634 <failSecurityCheck+0x10>
	}
	return FALSE;
    b6ac:	|                  clr.w d0
}
    b6ae:	\----------------> addq.l #4,sp
    b6b0:	                   rts

0000b6b2 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    b6b2:	             lea -24(sp),sp
    b6b6:	             move.l a6,-(sp)
    b6b8:	             move.l 40(sp),d0
    b6bc:	             move.w d0,d0
    b6be:	             move.w d0,6(sp)
	int fileNum = -1;
    b6c2:	             moveq #-1,d0
    b6c4:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    b6c8:	             jsr 3a22 <killSpeechTimers>

	switch (numParams) {
    b6ce:	             moveq #2,d0
    b6d0:	             cmp.l 32(sp),d0
    b6d4:	      /----- beq.s b718 <sayCore+0x66>
    b6d6:	      |      moveq #3,d0
    b6d8:	      |      cmp.l 32(sp),d0
    b6dc:	/-----|----- bne.w b7fa <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    b6e0:	|     |      movea.l 36(sp),a0
    b6e4:	|     |      move.l 24(a0),d0
    b6e8:	|     |      move.l d0,-(sp)
    b6ea:	|     |      pea 5 <_start+0x5>
    b6ee:	|     |      lea 20(sp),a0
    b6f2:	|     |      move.l a0,-(sp)
    b6f4:	|     |      jsr 11a02 <getValueType>
    b6fa:	|     |      lea 12(sp),sp
    b6fe:	|     |      tst.w d0
    b700:	|     |  /-- bne.s b708 <sayCore+0x56>
    b702:	|     |  |   moveq #1,d0
    b704:	|  /--|--|-- bra.w b80a <sayCore+0x158>
			trimStack (&fun -> stack);
    b708:	|  |  |  \-> moveq #24,d0
    b70a:	|  |  |      add.l 36(sp),d0
    b70e:	|  |  |      move.l d0,-(sp)
    b710:	|  |  |      jsr 12386 <trimStack>
    b716:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    b718:	|  |  \----> movea.l 36(sp),a0
    b71c:	|  |         move.l 24(a0),d0
    b720:	|  |         move.l d0,-(sp)
    b722:	|  |         jsr 11fd8 <getTextFromAnyVar>
    b728:	|  |         addq.l #4,sp
    b72a:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    b72e:	|  |     /-- bne.s b736 <sayCore+0x84>
    b730:	|  |     |   moveq #1,d0
    b732:	|  +-----|-- bra.w b80a <sayCore+0x158>
			trimStack (&fun -> stack);
    b736:	|  |     \-> moveq #24,d0
    b738:	|  |         add.l 36(sp),d0
    b73c:	|  |         move.l d0,-(sp)
    b73e:	|  |         jsr 12386 <trimStack>
    b744:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    b746:	|  |         movea.l 36(sp),a0
    b74a:	|  |         move.l 24(a0),d0
    b74e:	|  |         move.l d0,-(sp)
    b750:	|  |         pea 7 <_start+0x7>
    b754:	|  |         lea 16(sp),a0
    b758:	|  |         move.l a0,-(sp)
    b75a:	|  |         jsr 11a02 <getValueType>
    b760:	|  |         lea 12(sp),sp
    b764:	|  |         tst.w d0
    b766:	|  |     /-- bne.s b76e <sayCore+0xbc>
    b768:	|  |     |   moveq #1,d0
    b76a:	|  +-----|-- bra.w b80a <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    b76e:	|  |     \-> movea.l 36(sp),a0
    b772:	|  |         move.l 24(a0),d0
    b776:	|  |         move.l d0,-(sp)
    b778:	|  |         pea 7 <_start+0x7>
    b77c:	|  |         lea 16(sp),a0
    b780:	|  |         move.l a0,-(sp)
    b782:	|  |         jsr 11a02 <getValueType>
    b788:	|  |         lea 12(sp),sp
    b78c:	|  |         tst.w d0
    b78e:	|  |     /-- bne.s b794 <sayCore+0xe2>
    b790:	|  |     |   moveq #1,d0
    b792:	|  +-----|-- bra.s b80a <sayCore+0x158>
			trimStack (&fun -> stack);
    b794:	|  |     \-> moveq #24,d0
    b796:	|  |         add.l 36(sp),d0
    b79a:	|  |         move.l d0,-(sp)
    b79c:	|  |         jsr 12386 <trimStack>
    b7a2:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    b7a4:	|  |         movea.w 6(sp),a0
    b7a8:	|  |         move.l 12(sp),d1
    b7ac:	|  |         move.l 8(sp),d0
    b7b0:	|  |         move.l a0,-(sp)
    b7b2:	|  |         move.l d1,-(sp)
    b7b4:	|  |         move.l d0,-(sp)
    b7b6:	|  |         move.l 36(sp),-(sp)
    b7ba:	|  |         jsr 5986 <wrapSpeech>
    b7c0:	|  |         lea 16(sp),sp
    b7c4:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    b7c8:	|  |         movea.l 36(sp),a0
    b7cc:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    b7d2:	|  |         movea.l 36(sp),a0
    b7d6:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    b7dc:	|  |         move.l 24(sp),16(sp)
    b7e2:	|  |         move.l 18bc0 <SysBase>,d0
    b7e8:	|  |         movea.l d0,a6
    b7ea:	|  |         movea.l 16(sp),a1
    b7ee:	|  |         jsr -690(a6)
			newText = NULL;
    b7f2:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    b7f6:	|  |         moveq #0,d0
    b7f8:	|  +-------- bra.s b80a <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    b7fa:	\--|-------> pea 15b51 <custom.c.36a9b171+0xf57>
    b800:	   |         jsr 13a4a <KPrintF>
    b806:	   |         addq.l #4,sp
	return BR_ERROR;
    b808:	   |         moveq #1,d0
}
    b80a:	   \-------> movea.l (sp)+,a6
    b80c:	             lea 24(sp),sp
    b810:	             rts

0000b812 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	//KPrintF("say something");
	return sayCore (numParams, fun, TRUE);
    b812:	pea 1 <_start+0x1>
    b816:	move.l 12(sp),-(sp)
    b81a:	move.l 12(sp),-(sp)
    b81e:	jsr b6b2 <sayCore>
    b824:	lea 12(sp),sp
}
    b828:	rts

0000b82a <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    b82a:	clr.l -(sp)
    b82c:	move.l 12(sp),-(sp)
    b830:	move.l 12(sp),-(sp)
    b834:	jsr b6b2 <sayCore>
    b83a:	lea 12(sp),sp
}
    b83e:	rts

0000b840 <builtIn_freeze>:
{
	UNUSEDALL
	/*freeze ();
	freezeSubs (); Amiga todo: implement */
	//fun -> freezerLevel = 0;
	return BR_CONTINUE;
    b840:	moveq #2,d0
}
    b842:	rts

0000b844 <builtIn_unfreeze>:
builtIn(unfreeze)
{
	UNUSEDALL
	/*unfreeze ();
	unfreezeSubs (); Amiga todo: Implement*/
	return BR_CONTINUE;
    b844:	moveq #2,d0
}
    b846:	rts

0000b848 <builtIn_howFrozen>:
builtIn(howFrozen)
{
	UNUSEDALL
	/*setVariable (&fun -> reg, SVT_INT, howFrozen ());
	return BR_CONTINUE; Amiga todo implement*/
}
    b848:	nop
    b84a:	rts

0000b84c <builtIn_setCursor>:

builtIn(setCursor)
{
    b84c:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    b84e:	movea.l 12(sp),a0
    b852:	move.l 24(a0),d0
    b856:	move.l d0,-(sp)
    b858:	jsr 11eda <getAnimationFromVar>
    b85e:	addq.l #4,sp
    b860:	move.l d0,(sp)
	pickAnimCursor (aa);
    b862:	move.l (sp),-(sp)
    b864:	jsr dba <pickAnimCursor>
    b86a:	addq.l #4,sp
	trimStack (&fun -> stack);
    b86c:	moveq #24,d0
    b86e:	add.l 12(sp),d0
    b872:	move.l d0,-(sp)
    b874:	jsr 12386 <trimStack>
    b87a:	addq.l #4,sp
	return BR_CONTINUE;
    b87c:	moveq #2,d0
}
    b87e:	addq.l #4,sp
    b880:	rts

0000b882 <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    b882:	move.l 18b7c <input+0xa>,d1
    b888:	move.l 18cce <cameraX>,d0
    b88e:	add.l d0,d1
    b890:	moveq #28,d0
    b892:	add.l 8(sp),d0
    b896:	move.l d1,-(sp)
    b898:	pea 1 <_start+0x1>
    b89c:	move.l d0,-(sp)
    b89e:	jsr 122f4 <setVariable>
    b8a4:	lea 12(sp),sp
	return BR_CONTINUE;
    b8a8:	moveq #2,d0
}
    b8aa:	rts

0000b8ac <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    b8ac:	move.l 18b80 <input+0xe>,d1
    b8b2:	move.l 18cd2 <cameraY>,d0
    b8b8:	add.l d0,d1
    b8ba:	moveq #28,d0
    b8bc:	add.l 8(sp),d0
    b8c0:	move.l d1,-(sp)
    b8c2:	pea 1 <_start+0x1>
    b8c6:	move.l d0,-(sp)
    b8c8:	jsr 122f4 <setVariable>
    b8ce:	lea 12(sp),sp
	return BR_CONTINUE;
    b8d2:	moveq #2,d0
}
    b8d4:	rts

0000b8d6 <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    b8d6:	move.l 18b7c <input+0xa>,d0
    b8dc:	move.l d0,-(sp)
    b8de:	jsr 13d02 <__floatsisf>
    b8e4:	addq.l #4,sp
    b8e6:	move.l d0,d1
    b8e8:	move.l 18578 <cameraZoom>,d0
    b8ee:	move.l d0,-(sp)
    b8f0:	move.l d1,-(sp)
    b8f2:	jsr 13db4 <__mulsf3>
    b8f8:	addq.l #8,sp
    b8fa:	move.l d0,-(sp)
    b8fc:	jsr 13c9a <__fixsfsi>
    b902:	addq.l #4,sp
    b904:	move.l d0,d1
    b906:	moveq #28,d0
    b908:	add.l 8(sp),d0
    b90c:	move.l d1,-(sp)
    b90e:	pea 1 <_start+0x1>
    b912:	move.l d0,-(sp)
    b914:	jsr 122f4 <setVariable>
    b91a:	lea 12(sp),sp
	return BR_CONTINUE;
    b91e:	moveq #2,d0
}
    b920:	rts

0000b922 <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    b922:	move.l 18b80 <input+0xe>,d0
    b928:	move.l d0,-(sp)
    b92a:	jsr 13d02 <__floatsisf>
    b930:	addq.l #4,sp
    b932:	move.l d0,d1
    b934:	move.l 18578 <cameraZoom>,d0
    b93a:	move.l d0,-(sp)
    b93c:	move.l d1,-(sp)
    b93e:	jsr 13db4 <__mulsf3>
    b944:	addq.l #8,sp
    b946:	move.l d0,-(sp)
    b948:	jsr 13c9a <__fixsfsi>
    b94e:	addq.l #4,sp
    b950:	move.l d0,d1
    b952:	moveq #28,d0
    b954:	add.l 8(sp),d0
    b958:	move.l d1,-(sp)
    b95a:	pea 1 <_start+0x1>
    b95e:	move.l d0,-(sp)
    b960:	jsr 122f4 <setVariable>
    b966:	lea 12(sp),sp
	return BR_CONTINUE;
    b96a:	moveq #2,d0
}
    b96c:	rts

0000b96e <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    b96e:	jsr 543a <statusBarText>
    b974:	move.l d0,d1
    b976:	moveq #28,d0
    b978:	add.l 8(sp),d0
    b97c:	move.l d1,-(sp)
    b97e:	move.l d0,-(sp)
    b980:	jsr 11c24 <makeTextVar>
    b986:	addq.l #8,sp
	return BR_CONTINUE;
    b988:	moveq #2,d0
}
    b98a:	rts

0000b98c <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    b98c:	       lea -20(sp),sp
    b990:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    b992:	       movea.l 32(sp),a0
    b996:	       move.l 24(a0),d0
    b99a:	       move.l d0,-(sp)
    b99c:	       jsr 11fd8 <getTextFromAnyVar>
    b9a2:	       addq.l #4,sp
    b9a4:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    b9a8:	   /-- bne.s b9b0 <builtIn_getMatchingFiles+0x24>
    b9aa:	   |   moveq #1,d0
    b9ac:	/--|-- bra.w ba72 <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    b9b0:	|  \-> moveq #24,d0
    b9b2:	|      add.l 32(sp),d0
    b9b6:	|      move.l d0,-(sp)
    b9b8:	|      jsr 12386 <trimStack>
    b9be:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    b9c0:	|      moveq #28,d0
    b9c2:	|      add.l 32(sp),d0
    b9c6:	|      move.l d0,-(sp)
    b9c8:	|      jsr 11c50 <unlinkVar>
    b9ce:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    b9d0:	|      movea.l 32(sp),a0
    b9d4:	|      moveq #6,d0
    b9d6:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    b9da:	|      moveq #12,d0
    b9dc:	|      move.l d0,16(sp)
    b9e0:	|      clr.l 12(sp)
    b9e4:	|      move.l 18bc0 <SysBase>,d0
    b9ea:	|      movea.l d0,a6
    b9ec:	|      move.l 16(sp),d0
    b9f0:	|      move.l 12(sp),d1
    b9f4:	|      jsr -684(a6)
    b9f8:	|      move.l d0,8(sp)
    b9fc:	|      move.l 8(sp),d0
    ba00:	|      movea.l 32(sp),a0
    ba04:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    ba08:	|      moveq #32,d0
    ba0a:	|      add.l 32(sp),d0
    ba0e:	|  /-- bne.s ba14 <builtIn_getMatchingFiles+0x88>
    ba10:	|  |   moveq #1,d0
    ba12:	+--|-- bra.s ba72 <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    ba14:	|  \-> movea.l 32(sp),a0
    ba18:	|      movea.l 32(a0),a0
    ba1c:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    ba1e:	|      movea.l 32(sp),a0
    ba22:	|      movea.l 32(a0),a0
    ba26:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    ba2a:	|      movea.l 32(sp),a0
    ba2e:	|      movea.l 32(a0),a0
    ba32:	|      moveq #1,d0
    ba34:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    ba38:	|      movea.l 32(sp),a0
    ba3c:	|      move.l 32(a0),d0
    ba40:	|      move.l 20(sp),-(sp)
    ba44:	|      move.l d0,-(sp)
    ba46:	|      jsr 117be <getSavedGamesStack>
    ba4c:	|      addq.l #8,sp
    ba4e:	|      tst.w d0
    ba50:	|  /-- bne.s ba56 <builtIn_getMatchingFiles+0xca>
    ba52:	|  |   moveq #1,d0
    ba54:	+--|-- bra.s ba72 <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    ba56:	|  \-> move.l 20(sp),4(sp)
    ba5c:	|      move.l 18bc0 <SysBase>,d0
    ba62:	|      movea.l d0,a6
    ba64:	|      movea.l 4(sp),a1
    ba68:	|      jsr -690(a6)
	newText = NULL;
    ba6c:	|      clr.l 20(sp)
	return BR_CONTINUE;
    ba70:	|      moveq #2,d0
}
    ba72:	\----> movea.l (sp)+,a6
    ba74:	       lea 20(sp),sp
    ba78:	       rts

0000ba7a <builtIn_saveGame>:

builtIn(saveGame)
{
    ba7a:	       lea -12(sp),sp
    ba7e:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    ba80:	       movea.l 24(sp),a0
    ba84:	       move.l 24(a0),d0
    ba88:	       move.l d0,-(sp)
    ba8a:	       jsr 11fd8 <getTextFromAnyVar>
    ba90:	       addq.l #4,sp
    ba92:	       move.l d0,18b8c <loadNow>
    trimStack(&fun->stack);
    ba98:	       moveq #24,d0
    ba9a:	       add.l 24(sp),d0
    ba9e:	       move.l d0,-(sp)
    baa0:	       jsr 12386 <trimStack>
    baa6:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    baa8:	       move.l 18b8c <loadNow>,d0
    baae:	       move.l d0,-(sp)
    bab0:	       jsr 2fe <encodeFilename>
    bab6:	       addq.l #4,sp
    bab8:	       move.l d0,12(sp)
    FreeVec(loadNow);
    babc:	       move.l 18b8c <loadNow>,8(sp)
    bac4:	       move.l 18bc0 <SysBase>,d0
    baca:	       movea.l d0,a6
    bacc:	       movea.l 8(sp),a1
    bad0:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    bad4:	       move.l 12(sp),-(sp)
    bad8:	       jsr b624 <failSecurityCheck>
    bade:	       addq.l #4,sp
    bae0:	       tst.w d0
    bae2:	   /-- beq.s bae8 <builtIn_saveGame+0x6e>
    bae4:	   |   moveq #1,d0
    bae6:	/--|-- bra.s bb38 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    bae8:	|  \-> move.l 12(sp),-(sp)
    baec:	|      pea 15b7f <custom.c.36a9b171+0xf85>
    baf2:	|      jsr 10f2e <joinStrings>
    baf8:	|      addq.l #8,sp
    bafa:	|      move.l d0,18b8c <loadNow>
    FreeVec(aaaaa);
    bb00:	|      move.l 12(sp),4(sp)
    bb06:	|      move.l 18bc0 <SysBase>,d0
    bb0c:	|      movea.l d0,a6
    bb0e:	|      movea.l 4(sp),a1
    bb12:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    bb16:	|      moveq #28,d0
    bb18:	|      add.l 24(sp),d0
    bb1c:	|      clr.l -(sp)
    bb1e:	|      pea 1 <_start+0x1>
    bb22:	|      move.l d0,-(sp)
    bb24:	|      jsr 122f4 <setVariable>
    bb2a:	|      lea 12(sp),sp
    saverFunc = fun;
    bb2e:	|      move.l 24(sp),18cde <saverFunc>
    return BR_KEEP_AND_PAUSE;
    bb36:	|      moveq #0,d0
}
    bb38:	\----> movea.l (sp)+,a6
    bb3a:	       lea 12(sp),sp
    bb3e:	       rts

0000bb40 <builtIn_fileExists>:

builtIn(fileExists)
{
    bb40:	       lea -36(sp),sp
    bb44:	       move.l a6,-(sp)
    bb46:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    bb48:	       movea.l 52(sp),a0
    bb4c:	       move.l 24(a0),d0
    bb50:	       move.l d0,-(sp)
    bb52:	       jsr 11fd8 <getTextFromAnyVar>
    bb58:	       addq.l #4,sp
    bb5a:	       move.l d0,18b8c <loadNow>
    trimStack(&fun->stack);
    bb60:	       moveq #24,d0
    bb62:	       add.l 52(sp),d0
    bb66:	       move.l d0,-(sp)
    bb68:	       jsr 12386 <trimStack>
    bb6e:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    bb70:	       move.l 18b8c <loadNow>,d0
    bb76:	       move.l d0,-(sp)
    bb78:	       jsr 2fe <encodeFilename>
    bb7e:	       addq.l #4,sp
    bb80:	       move.l d0,40(sp)
    FreeVec(loadNow);
    bb84:	       move.l 18b8c <loadNow>,36(sp)
    bb8c:	       move.l 18bc0 <SysBase>,d0
    bb92:	       movea.l d0,a6
    bb94:	       movea.l 36(sp),a1
    bb98:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    bb9c:	       move.l 40(sp),-(sp)
    bba0:	       jsr b624 <failSecurityCheck>
    bba6:	       addq.l #4,sp
    bba8:	       tst.w d0
    bbaa:	   /-- beq.s bbb2 <builtIn_fileExists+0x72>
    bbac:	   |   moveq #1,d0
    bbae:	/--|-- bra.w bc52 <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    bbb2:	|  \-> move.l 40(sp),32(sp)
    bbb8:	|      move.l #1005,28(sp)
    bbc0:	|      move.l 18bc8 <DOSBase>,d0
    bbc6:	|      movea.l d0,a6
    bbc8:	|      move.l 32(sp),d1
    bbcc:	|      move.l 28(sp),d2
    bbd0:	|      jsr -30(a6)
    bbd4:	|      move.l d0,24(sp)
    bbd8:	|      move.l 24(sp),d0
    bbdc:	|      move.l d0,20(sp)
    if (!fp) {        
    bbe0:	|  /-- bne.s bbf0 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    bbe2:	|  |   pea 15b81 <custom.c.36a9b171+0xf87>
    bbe8:	|  |   jsr 13a4a <KPrintF>
    bbee:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    bbf0:	|  \-> tst.l 20(sp)
    bbf4:	|      sne d0
    bbf6:	|      neg.b d0
    bbf8:	|      moveq #0,d1
    bbfa:	|      move.b d0,d1
    bbfc:	|      moveq #28,d0
    bbfe:	|      add.l 52(sp),d0
    bc02:	|      move.l d1,-(sp)
    bc04:	|      pea 1 <_start+0x1>
    bc08:	|      move.l d0,-(sp)
    bc0a:	|      jsr 122f4 <setVariable>
    bc10:	|      lea 12(sp),sp
    if (fp) Close(fp);
    bc14:	|      tst.l 20(sp)
    bc18:	|  /-- beq.s bc34 <builtIn_fileExists+0xf4>
    bc1a:	|  |   move.l 20(sp),16(sp)
    bc20:	|  |   move.l 18bc8 <DOSBase>,d0
    bc26:	|  |   movea.l d0,a6
    bc28:	|  |   move.l 16(sp),d1
    bc2c:	|  |   jsr -36(a6)
    bc30:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    bc34:	|  \-> move.l 40(sp),8(sp)
    bc3a:	|      move.l 18bc0 <SysBase>,d0
    bc40:	|      movea.l d0,a6
    bc42:	|      movea.l 8(sp),a1
    bc46:	|      jsr -690(a6)
    loadNow = NULL;
    bc4a:	|      clr.l 18b8c <loadNow>
    return BR_CONTINUE;
    bc50:	|      moveq #2,d0
}
    bc52:	\----> move.l (sp)+,d2
    bc54:	       movea.l (sp)+,a6
    bc56:	       lea 36(sp),sp
    bc5a:	       rts

0000bc5c <builtIn_loadGame>:

builtIn(loadGame)
{
    bc5c:	       lea -36(sp),sp
    bc60:	       move.l a6,-(sp)
    bc62:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    bc64:	       movea.l 52(sp),a0
    bc68:	       move.l 24(a0),d0
    bc6c:	       move.l d0,-(sp)
    bc6e:	       jsr 11fd8 <getTextFromAnyVar>
    bc74:	       addq.l #4,sp
    bc76:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    bc7a:	       moveq #24,d0
    bc7c:	       add.l 52(sp),d0
    bc80:	       move.l d0,-(sp)
    bc82:	       jsr 12386 <trimStack>
    bc88:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    bc8a:	       move.l 40(sp),-(sp)
    bc8e:	       jsr 2fe <encodeFilename>
    bc94:	       addq.l #4,sp
    bc96:	       move.l d0,18b8c <loadNow>
    FreeVec(aaaaa);
    bc9c:	       move.l 40(sp),36(sp)
    bca2:	       move.l 18bc0 <SysBase>,d0
    bca8:	       movea.l d0,a6
    bcaa:	       movea.l 36(sp),a1
    bcae:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    bcb2:	       move.l 18b8c <loadNow>,d0
    bcb8:	       move.l d0,-(sp)
    bcba:	       jsr b624 <failSecurityCheck>
    bcc0:	       addq.l #4,sp
    bcc2:	       tst.w d0
    bcc4:	   /-- beq.s bcca <builtIn_loadGame+0x6e>
    bcc6:	   |   moveq #1,d0
    bcc8:	/--|-- bra.s bd3a <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    bcca:	|  \-> move.l 18b8c <loadNow>,32(sp)
    bcd2:	|      move.l #1005,28(sp)
    bcda:	|      move.l 18bc8 <DOSBase>,d0
    bce0:	|      movea.l d0,a6
    bce2:	|      move.l 32(sp),d1
    bce6:	|      move.l 28(sp),d2
    bcea:	|      jsr -30(a6)
    bcee:	|      move.l d0,24(sp)
    bcf2:	|      move.l 24(sp),d0
    bcf6:	|      move.l d0,20(sp)
    if (fp) {
    bcfa:	|  /-- beq.s bd1a <builtIn_loadGame+0xbe>
        Close(fp);
    bcfc:	|  |   move.l 20(sp),12(sp)
    bd02:	|  |   move.l 18bc8 <DOSBase>,d0
    bd08:	|  |   movea.l d0,a6
    bd0a:	|  |   move.l 12(sp),d1
    bd0e:	|  |   jsr -36(a6)
    bd12:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    bd16:	|  |   moveq #0,d0
    bd18:	+--|-- bra.s bd3a <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    bd1a:	|  \-> move.l 18b8c <loadNow>,16(sp)
    bd22:	|      move.l 18bc0 <SysBase>,d0
    bd28:	|      movea.l d0,a6
    bd2a:	|      movea.l 16(sp),a1
    bd2e:	|      jsr -690(a6)
    loadNow = NULL;
    bd32:	|      clr.l 18b8c <loadNow>
    return BR_CONTINUE;
    bd38:	|      moveq #2,d0
}
    bd3a:	\----> move.l (sp)+,d2
    bd3c:	       movea.l (sp)+,a6
    bd3e:	       lea 36(sp),sp
    bd42:	       rts

0000bd44 <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    bd44:	move.l 18cb4 <sceneHeight>,d0
    bd4a:	move.l d0,d1
    bd4c:	move.l 18cb0 <sceneWidth>,d0
    bd52:	move.l d1,-(sp)
    bd54:	move.l d0,-(sp)
    bd56:	clr.l -(sp)
    bd58:	clr.l -(sp)
    bd5a:	jsr a524 <blankScreen>
    bd60:	lea 16(sp),sp
	return BR_CONTINUE;
    bd64:	moveq #2,d0
}
    bd66:	rts

0000bd68 <builtIn_blankArea>:

builtIn(blankArea)
{
    bd68:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    bd6c:	       movea.l 24(sp),a0
    bd70:	       move.l 24(a0),d0
    bd74:	       move.l d0,-(sp)
    bd76:	       pea 1 <_start+0x1>
    bd7a:	       lea 8(sp),a0
    bd7e:	       move.l a0,-(sp)
    bd80:	       jsr 11a02 <getValueType>
    bd86:	       lea 12(sp),sp
    bd8a:	       tst.w d0
    bd8c:	   /-- bne.s bd94 <builtIn_blankArea+0x2c>
    bd8e:	   |   moveq #1,d0
    bd90:	/--|-- bra.w be6a <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    bd94:	|  \-> moveq #24,d0
    bd96:	|      add.l 24(sp),d0
    bd9a:	|      move.l d0,-(sp)
    bd9c:	|      jsr 12386 <trimStack>
    bda2:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    bda4:	|      movea.l 24(sp),a0
    bda8:	|      move.l 24(a0),d0
    bdac:	|      move.l d0,-(sp)
    bdae:	|      pea 1 <_start+0x1>
    bdb2:	|      lea 12(sp),a0
    bdb6:	|      move.l a0,-(sp)
    bdb8:	|      jsr 11a02 <getValueType>
    bdbe:	|      lea 12(sp),sp
    bdc2:	|      tst.w d0
    bdc4:	|  /-- bne.s bdcc <builtIn_blankArea+0x64>
    bdc6:	|  |   moveq #1,d0
    bdc8:	+--|-- bra.w be6a <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    bdcc:	|  \-> moveq #24,d0
    bdce:	|      add.l 24(sp),d0
    bdd2:	|      move.l d0,-(sp)
    bdd4:	|      jsr 12386 <trimStack>
    bdda:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    bddc:	|      movea.l 24(sp),a0
    bde0:	|      move.l 24(a0),d0
    bde4:	|      move.l d0,-(sp)
    bde6:	|      pea 1 <_start+0x1>
    bdea:	|      moveq #16,d0
    bdec:	|      add.l sp,d0
    bdee:	|      move.l d0,-(sp)
    bdf0:	|      jsr 11a02 <getValueType>
    bdf6:	|      lea 12(sp),sp
    bdfa:	|      tst.w d0
    bdfc:	|  /-- bne.s be02 <builtIn_blankArea+0x9a>
    bdfe:	|  |   moveq #1,d0
    be00:	+--|-- bra.s be6a <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    be02:	|  \-> moveq #24,d0
    be04:	|      add.l 24(sp),d0
    be08:	|      move.l d0,-(sp)
    be0a:	|      jsr 12386 <trimStack>
    be10:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    be12:	|      movea.l 24(sp),a0
    be16:	|      move.l 24(a0),d0
    be1a:	|      move.l d0,-(sp)
    be1c:	|      pea 1 <_start+0x1>
    be20:	|      moveq #20,d0
    be22:	|      add.l sp,d0
    be24:	|      move.l d0,-(sp)
    be26:	|      jsr 11a02 <getValueType>
    be2c:	|      lea 12(sp),sp
    be30:	|      tst.w d0
    be32:	|  /-- bne.s be38 <builtIn_blankArea+0xd0>
    be34:	|  |   moveq #1,d0
    be36:	+--|-- bra.s be6a <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    be38:	|  \-> moveq #24,d0
    be3a:	|      add.l 24(sp),d0
    be3e:	|      move.l d0,-(sp)
    be40:	|      jsr 12386 <trimStack>
    be46:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    be48:	|      movea.l (sp),a1
    be4a:	|      movea.l 4(sp),a0
    be4e:	|      move.l 8(sp),d1
    be52:	|      move.l 12(sp),d0
    be56:	|      move.l a1,-(sp)
    be58:	|      move.l a0,-(sp)
    be5a:	|      move.l d1,-(sp)
    be5c:	|      move.l d0,-(sp)
    be5e:	|      jsr a524 <blankScreen>
    be64:	|      lea 16(sp),sp
	return BR_CONTINUE;
    be68:	|      moveq #2,d0
}
    be6a:	\----> lea 16(sp),sp
    be6e:	       rts

0000be70 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    be70:	jsr a538 <darkScreen>
	return BR_CONTINUE;
    be76:	moveq #2,d0
}
    be78:	rts

0000be7a <builtIn_addOverlay>:

builtIn(addOverlay)
{
    be7a:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    be7e:	       movea.l 20(sp),a0
    be82:	       move.l 24(a0),d0
    be86:	       move.l d0,-(sp)
    be88:	       pea 1 <_start+0x1>
    be8c:	       lea 8(sp),a0
    be90:	       move.l a0,-(sp)
    be92:	       jsr 11a02 <getValueType>
    be98:	       lea 12(sp),sp
    be9c:	       tst.w d0
    be9e:	   /-- bne.s bea6 <builtIn_addOverlay+0x2c>
    bea0:	   |   moveq #1,d0
    bea2:	/--|-- bra.w bf3e <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    bea6:	|  \-> moveq #24,d0
    bea8:	|      add.l 20(sp),d0
    beac:	|      move.l d0,-(sp)
    beae:	|      jsr 12386 <trimStack>
    beb4:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    beb6:	|      movea.l 20(sp),a0
    beba:	|      move.l 24(a0),d0
    bebe:	|      move.l d0,-(sp)
    bec0:	|      pea 1 <_start+0x1>
    bec4:	|      moveq #12,d0
    bec6:	|      add.l sp,d0
    bec8:	|      move.l d0,-(sp)
    beca:	|      jsr 11a02 <getValueType>
    bed0:	|      lea 12(sp),sp
    bed4:	|      tst.w d0
    bed6:	|  /-- bne.s bedc <builtIn_addOverlay+0x62>
    bed8:	|  |   moveq #1,d0
    beda:	+--|-- bra.s bf3e <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    bedc:	|  \-> moveq #24,d0
    bede:	|      add.l 20(sp),d0
    bee2:	|      move.l d0,-(sp)
    bee4:	|      jsr 12386 <trimStack>
    beea:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    beec:	|      movea.l 20(sp),a0
    bef0:	|      move.l 24(a0),d0
    bef4:	|      move.l d0,-(sp)
    bef6:	|      pea 5 <_start+0x5>
    befa:	|      moveq #16,d0
    befc:	|      add.l sp,d0
    befe:	|      move.l d0,-(sp)
    bf00:	|      jsr 11a02 <getValueType>
    bf06:	|      lea 12(sp),sp
    bf0a:	|      tst.w d0
    bf0c:	|  /-- bne.s bf12 <builtIn_addOverlay+0x98>
    bf0e:	|  |   moveq #1,d0
    bf10:	+--|-- bra.s bf3e <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    bf12:	|  \-> moveq #24,d0
    bf14:	|      add.l 20(sp),d0
    bf18:	|      move.l d0,-(sp)
    bf1a:	|      jsr 12386 <trimStack>
    bf20:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    bf22:	|      movea.l (sp),a0
    bf24:	|      move.l 4(sp),d1
    bf28:	|      move.l 8(sp),d0
    bf2c:	|      move.l a0,-(sp)
    bf2e:	|      move.l d1,-(sp)
    bf30:	|      move.l d0,-(sp)
    bf32:	|      jsr a656 <loadBackDrop>
    bf38:	|      lea 12(sp),sp
	return BR_CONTINUE;
    bf3c:	|      moveq #2,d0
}
    bf3e:	\----> lea 12(sp),sp
    bf42:	       rts

0000bf44 <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    bf44:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    bf48:	       movea.l 20(sp),a0
    bf4c:	       move.l 24(a0),d0
    bf50:	       move.l d0,-(sp)
    bf52:	       pea 1 <_start+0x1>
    bf56:	       lea 8(sp),a0
    bf5a:	       move.l a0,-(sp)
    bf5c:	       jsr 11a02 <getValueType>
    bf62:	       lea 12(sp),sp
    bf66:	       tst.w d0
    bf68:	   /-- bne.s bf70 <builtIn_mixOverlay+0x2c>
    bf6a:	   |   moveq #1,d0
    bf6c:	/--|-- bra.w c008 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    bf70:	|  \-> moveq #24,d0
    bf72:	|      add.l 20(sp),d0
    bf76:	|      move.l d0,-(sp)
    bf78:	|      jsr 12386 <trimStack>
    bf7e:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    bf80:	|      movea.l 20(sp),a0
    bf84:	|      move.l 24(a0),d0
    bf88:	|      move.l d0,-(sp)
    bf8a:	|      pea 1 <_start+0x1>
    bf8e:	|      moveq #12,d0
    bf90:	|      add.l sp,d0
    bf92:	|      move.l d0,-(sp)
    bf94:	|      jsr 11a02 <getValueType>
    bf9a:	|      lea 12(sp),sp
    bf9e:	|      tst.w d0
    bfa0:	|  /-- bne.s bfa6 <builtIn_mixOverlay+0x62>
    bfa2:	|  |   moveq #1,d0
    bfa4:	+--|-- bra.s c008 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    bfa6:	|  \-> moveq #24,d0
    bfa8:	|      add.l 20(sp),d0
    bfac:	|      move.l d0,-(sp)
    bfae:	|      jsr 12386 <trimStack>
    bfb4:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    bfb6:	|      movea.l 20(sp),a0
    bfba:	|      move.l 24(a0),d0
    bfbe:	|      move.l d0,-(sp)
    bfc0:	|      pea 5 <_start+0x5>
    bfc4:	|      moveq #16,d0
    bfc6:	|      add.l sp,d0
    bfc8:	|      move.l d0,-(sp)
    bfca:	|      jsr 11a02 <getValueType>
    bfd0:	|      lea 12(sp),sp
    bfd4:	|      tst.w d0
    bfd6:	|  /-- bne.s bfdc <builtIn_mixOverlay+0x98>
    bfd8:	|  |   moveq #1,d0
    bfda:	+--|-- bra.s c008 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    bfdc:	|  \-> moveq #24,d0
    bfde:	|      add.l 20(sp),d0
    bfe2:	|      move.l d0,-(sp)
    bfe4:	|      jsr 12386 <trimStack>
    bfea:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    bfec:	|      movea.l (sp),a0
    bfee:	|      move.l 4(sp),d1
    bff2:	|      move.l 8(sp),d0
    bff6:	|      move.l a0,-(sp)
    bff8:	|      move.l d1,-(sp)
    bffa:	|      move.l d0,-(sp)
    bffc:	|      jsr a6cc <mixBackDrop>
    c002:	|      lea 12(sp),sp
	return BR_CONTINUE;
    c006:	|      moveq #2,d0
}
    c008:	\----> lea 12(sp),sp
    c00c:	       rts

0000c00e <builtIn_pasteImage>:

builtIn(pasteImage)
{
    c00e:	       lea -12(sp),sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c012:	       movea.l 20(sp),a0
    c016:	       move.l 24(a0),d0
    c01a:	       move.l d0,-(sp)
    c01c:	       pea 1 <_start+0x1>
    c020:	       lea 8(sp),a0
    c024:	       move.l a0,-(sp)
    c026:	       jsr 11a02 <getValueType>
    c02c:	       lea 12(sp),sp
    c030:	       tst.w d0
    c032:	   /-- bne.s c03a <builtIn_pasteImage+0x2c>
    c034:	   |   moveq #1,d0
    c036:	/--|-- bra.w c0ca <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    c03a:	|  \-> moveq #24,d0
    c03c:	|      add.l 20(sp),d0
    c040:	|      move.l d0,-(sp)
    c042:	|      jsr 12386 <trimStack>
    c048:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c04a:	|      movea.l 20(sp),a0
    c04e:	|      move.l 24(a0),d0
    c052:	|      move.l d0,-(sp)
    c054:	|      pea 1 <_start+0x1>
    c058:	|      moveq #12,d0
    c05a:	|      add.l sp,d0
    c05c:	|      move.l d0,-(sp)
    c05e:	|      jsr 11a02 <getValueType>
    c064:	|      lea 12(sp),sp
    c068:	|      tst.w d0
    c06a:	|  /-- bne.s c070 <builtIn_pasteImage+0x62>
    c06c:	|  |   moveq #1,d0
    c06e:	+--|-- bra.s c0ca <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    c070:	|  \-> moveq #24,d0
    c072:	|      add.l 20(sp),d0
    c076:	|      move.l d0,-(sp)
    c078:	|      jsr 12386 <trimStack>
    c07e:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    c080:	|      movea.l 20(sp),a0
    c084:	|      move.l 24(a0),d0
    c088:	|      move.l d0,-(sp)
    c08a:	|      jsr 11eda <getAnimationFromVar>
    c090:	|      addq.l #4,sp
    c092:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    c096:	|      moveq #24,d0
    c098:	|      add.l 20(sp),d0
    c09c:	|      move.l d0,-(sp)
    c09e:	|      jsr 12386 <trimStack>
    c0a4:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    c0a6:	|      tst.l 8(sp)
    c0aa:	|  /-- bne.s c0b0 <builtIn_pasteImage+0xa2>
    c0ac:	|  |   moveq #2,d0
    c0ae:	+--|-- bra.s c0ca <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    c0b0:	|  \-> move.l (sp),d1
    c0b2:	|      move.l 4(sp),d0
    c0b6:	|      move.l 8(sp),-(sp)
    c0ba:	|      move.l d1,-(sp)
    c0bc:	|      move.l d0,-(sp)
    c0be:	|      jsr de2 <pasteCursor>
    c0c4:	|      lea 12(sp),sp
	return BR_CONTINUE;
    c0c8:	|      moveq #2,d0
}
    c0ca:	\----> lea 12(sp),sp
    c0ce:	       rts

0000c0d0 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    c0d0:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c0d2:	       movea.l 16(sp),a0
    c0d6:	       move.l 24(a0),d0
    c0da:	       move.l d0,-(sp)
    c0dc:	       pea 1 <_start+0x1>
    c0e0:	       move.l sp,d0
    c0e2:	       addq.l #8,d0
    c0e4:	       move.l d0,-(sp)
    c0e6:	       jsr 11a02 <getValueType>
    c0ec:	       lea 12(sp),sp
    c0f0:	       tst.w d0
    c0f2:	   /-- bne.s c0fa <builtIn_setSceneDimensions+0x2a>
    c0f4:	   |   moveq #1,d0
    c0f6:	/--|-- bra.w c182 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    c0fa:	|  \-> moveq #24,d0
    c0fc:	|      add.l 16(sp),d0
    c100:	|      move.l d0,-(sp)
    c102:	|      jsr 12386 <trimStack>
    c108:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c10a:	|      movea.l 16(sp),a0
    c10e:	|      move.l 24(a0),d0
    c112:	|      move.l d0,-(sp)
    c114:	|      pea 1 <_start+0x1>
    c118:	|      moveq #12,d0
    c11a:	|      add.l sp,d0
    c11c:	|      move.l d0,-(sp)
    c11e:	|      jsr 11a02 <getValueType>
    c124:	|      lea 12(sp),sp
    c128:	|      tst.w d0
    c12a:	|  /-- bne.s c130 <builtIn_setSceneDimensions+0x60>
    c12c:	|  |   moveq #1,d0
    c12e:	+--|-- bra.s c182 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    c130:	|  \-> moveq #24,d0
    c132:	|      add.l 16(sp),d0
    c136:	|      move.l d0,-(sp)
    c138:	|      jsr 12386 <trimStack>
    c13e:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    c140:	|      move.l (sp),d1
    c142:	|      move.l 4(sp),d0
    c146:	|      move.l d1,-(sp)
    c148:	|      move.l d0,-(sp)
    c14a:	|      jsr a716 <resizeBackdrop>
    c150:	|      addq.l #8,sp
    c152:	|      tst.w d0
    c154:	|  /-- beq.s c172 <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    c156:	|  |   move.l (sp),d1
    c158:	|  |   move.l 4(sp),d0
    c15c:	|  |   move.l d1,-(sp)
    c15e:	|  |   move.l d0,-(sp)
    c160:	|  |   clr.l -(sp)
    c162:	|  |   clr.l -(sp)
    c164:	|  |   jsr a524 <blankScreen>
    c16a:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    c16e:	|  |   moveq #2,d0
    c170:	+--|-- bra.s c182 <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    c172:	|  \-> pea 15b9f <custom.c.36a9b171+0xfa5>
    c178:	|      jsr 13a4a <KPrintF>
    c17e:	|      addq.l #4,sp
	return BR_ERROR;
    c180:	|      moveq #1,d0
}
    c182:	\----> addq.l #8,sp
    c184:	       rts

0000c186 <builtIn_aimCamera>:

builtIn(aimCamera)
{
    c186:	          move.l d3,-(sp)
    c188:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c18a:	          movea.l 16(sp),a0
    c18e:	          move.l 24(a0),d0
    c192:	          move.l d0,-(sp)
    c194:	          pea 1 <_start+0x1>
    c198:	          pea 18cd2 <cameraY>
    c19e:	          jsr 11a02 <getValueType>
    c1a4:	          lea 12(sp),sp
    c1a8:	          tst.w d0
    c1aa:	      /-- bne.s c1b2 <builtIn_aimCamera+0x2c>
    c1ac:	      |   moveq #1,d0
    c1ae:	/-----|-- bra.w c434 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    c1b2:	|     \-> moveq #24,d0
    c1b4:	|         add.l 16(sp),d0
    c1b8:	|         move.l d0,-(sp)
    c1ba:	|         jsr 12386 <trimStack>
    c1c0:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c1c2:	|         movea.l 16(sp),a0
    c1c6:	|         move.l 24(a0),d0
    c1ca:	|         move.l d0,-(sp)
    c1cc:	|         pea 1 <_start+0x1>
    c1d0:	|         pea 18cce <cameraX>
    c1d6:	|         jsr 11a02 <getValueType>
    c1dc:	|         lea 12(sp),sp
    c1e0:	|         tst.w d0
    c1e2:	|     /-- bne.s c1ea <builtIn_aimCamera+0x64>
    c1e4:	|     |   moveq #1,d0
    c1e6:	+-----|-- bra.w c434 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    c1ea:	|     \-> moveq #24,d0
    c1ec:	|         add.l 16(sp),d0
    c1f0:	|         move.l d0,-(sp)
    c1f2:	|         jsr 12386 <trimStack>
    c1f8:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    c1fa:	|         move.l 18cce <cameraX>,d0
    c200:	|         move.l d0,-(sp)
    c202:	|         jsr 13d02 <__floatsisf>
    c208:	|         addq.l #4,sp
    c20a:	|         move.l d0,d2
    c20c:	|         move.l 18b14 <winWidth>,d0
    c212:	|         lsr.l #1,d0
    c214:	|         move.l d0,-(sp)
    c216:	|         jsr 13d2a <__floatunsisf>
    c21c:	|         addq.l #4,sp
    c21e:	|         move.l d0,d1
    c220:	|         move.l 18578 <cameraZoom>,d0
    c226:	|         move.l d0,-(sp)
    c228:	|         move.l d1,-(sp)
    c22a:	|         jsr 13bae <__divsf3>
    c230:	|         addq.l #8,sp
    c232:	|         move.l d0,-(sp)
    c234:	|         move.l d2,-(sp)
    c236:	|         jsr 13ff6 <__subsf3>
    c23c:	|         addq.l #8,sp
    c23e:	|         move.l d0,-(sp)
    c240:	|         jsr 13c9a <__fixsfsi>
    c246:	|         addq.l #4,sp
    c248:	|         move.l d0,18cce <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    c24e:	|         move.l 18cd2 <cameraY>,d0
    c254:	|         move.l d0,-(sp)
    c256:	|         jsr 13d02 <__floatsisf>
    c25c:	|         addq.l #4,sp
    c25e:	|         move.l d0,d2
    c260:	|         move.l 18b18 <winHeight>,d0
    c266:	|         lsr.l #1,d0
    c268:	|         move.l d0,-(sp)
    c26a:	|         jsr 13d2a <__floatunsisf>
    c270:	|         addq.l #4,sp
    c272:	|         move.l d0,d1
    c274:	|         move.l 18578 <cameraZoom>,d0
    c27a:	|         move.l d0,-(sp)
    c27c:	|         move.l d1,-(sp)
    c27e:	|         jsr 13bae <__divsf3>
    c284:	|         addq.l #8,sp
    c286:	|         move.l d0,-(sp)
    c288:	|         move.l d2,-(sp)
    c28a:	|         jsr 13ff6 <__subsf3>
    c290:	|         addq.l #8,sp
    c292:	|         move.l d0,-(sp)
    c294:	|         jsr 13c9a <__fixsfsi>
    c29a:	|         addq.l #4,sp
    c29c:	|         move.l d0,18cd2 <cameraY>

	if (cameraX < 0) cameraX = 0;
    c2a2:	|         move.l 18cce <cameraX>,d0
    c2a8:	|     /-- bpl.s c2b4 <builtIn_aimCamera+0x12e>
    c2aa:	|     |   clr.l 18cce <cameraX>
    c2b0:	|  /--|-- bra.w c36a <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    c2b4:	|  |  \-> move.l 18cce <cameraX>,d0
    c2ba:	|  |      move.l d0,-(sp)
    c2bc:	|  |      jsr 13d02 <__floatsisf>
    c2c2:	|  |      addq.l #4,sp
    c2c4:	|  |      move.l d0,d2
    c2c6:	|  |      move.l 18cb0 <sceneWidth>,d0
    c2cc:	|  |      move.l d0,-(sp)
    c2ce:	|  |      jsr 13d2a <__floatunsisf>
    c2d4:	|  |      addq.l #4,sp
    c2d6:	|  |      move.l d0,d3
    c2d8:	|  |      move.l 18b14 <winWidth>,d0
    c2de:	|  |      move.l d0,-(sp)
    c2e0:	|  |      jsr 13d2a <__floatunsisf>
    c2e6:	|  |      addq.l #4,sp
    c2e8:	|  |      move.l d0,d1
    c2ea:	|  |      move.l 18578 <cameraZoom>,d0
    c2f0:	|  |      move.l d0,-(sp)
    c2f2:	|  |      move.l d1,-(sp)
    c2f4:	|  |      jsr 13bae <__divsf3>
    c2fa:	|  |      addq.l #8,sp
    c2fc:	|  |      move.l d0,-(sp)
    c2fe:	|  |      move.l d3,-(sp)
    c300:	|  |      jsr 13ff6 <__subsf3>
    c306:	|  |      addq.l #8,sp
    c308:	|  |      move.l d0,-(sp)
    c30a:	|  |      move.l d2,-(sp)
    c30c:	|  |      jsr 13e6e <__gtsf2>
    c312:	|  |      addq.l #8,sp
    c314:	|  |      tst.l d0
    c316:	|  +----- ble.s c36a <builtIn_aimCamera+0x1e4>
    c318:	|  |      move.l 18cb0 <sceneWidth>,d0
    c31e:	|  |      move.l d0,-(sp)
    c320:	|  |      jsr 13d2a <__floatunsisf>
    c326:	|  |      addq.l #4,sp
    c328:	|  |      move.l d0,d2
    c32a:	|  |      move.l 18b14 <winWidth>,d0
    c330:	|  |      move.l d0,-(sp)
    c332:	|  |      jsr 13d2a <__floatunsisf>
    c338:	|  |      addq.l #4,sp
    c33a:	|  |      move.l d0,d1
    c33c:	|  |      move.l 18578 <cameraZoom>,d0
    c342:	|  |      move.l d0,-(sp)
    c344:	|  |      move.l d1,-(sp)
    c346:	|  |      jsr 13bae <__divsf3>
    c34c:	|  |      addq.l #8,sp
    c34e:	|  |      move.l d0,-(sp)
    c350:	|  |      move.l d2,-(sp)
    c352:	|  |      jsr 13ff6 <__subsf3>
    c358:	|  |      addq.l #8,sp
    c35a:	|  |      move.l d0,-(sp)
    c35c:	|  |      jsr 13c9a <__fixsfsi>
    c362:	|  |      addq.l #4,sp
    c364:	|  |      move.l d0,18cce <cameraX>
	if (cameraY < 0) cameraY = 0;
    c36a:	|  \----> move.l 18cd2 <cameraY>,d0
    c370:	|     /-- bpl.s c37c <builtIn_aimCamera+0x1f6>
    c372:	|     |   clr.l 18cd2 <cameraY>
    c378:	|  /--|-- bra.w c432 <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    c37c:	|  |  \-> move.l 18cd2 <cameraY>,d0
    c382:	|  |      move.l d0,-(sp)
    c384:	|  |      jsr 13d02 <__floatsisf>
    c38a:	|  |      addq.l #4,sp
    c38c:	|  |      move.l d0,d2
    c38e:	|  |      move.l 18cb4 <sceneHeight>,d0
    c394:	|  |      move.l d0,-(sp)
    c396:	|  |      jsr 13d2a <__floatunsisf>
    c39c:	|  |      addq.l #4,sp
    c39e:	|  |      move.l d0,d3
    c3a0:	|  |      move.l 18b18 <winHeight>,d0
    c3a6:	|  |      move.l d0,-(sp)
    c3a8:	|  |      jsr 13d2a <__floatunsisf>
    c3ae:	|  |      addq.l #4,sp
    c3b0:	|  |      move.l d0,d1
    c3b2:	|  |      move.l 18578 <cameraZoom>,d0
    c3b8:	|  |      move.l d0,-(sp)
    c3ba:	|  |      move.l d1,-(sp)
    c3bc:	|  |      jsr 13bae <__divsf3>
    c3c2:	|  |      addq.l #8,sp
    c3c4:	|  |      move.l d0,-(sp)
    c3c6:	|  |      move.l d3,-(sp)
    c3c8:	|  |      jsr 13ff6 <__subsf3>
    c3ce:	|  |      addq.l #8,sp
    c3d0:	|  |      move.l d0,-(sp)
    c3d2:	|  |      move.l d2,-(sp)
    c3d4:	|  |      jsr 13e6e <__gtsf2>
    c3da:	|  |      addq.l #8,sp
    c3dc:	|  |      tst.l d0
    c3de:	|  +----- ble.s c432 <builtIn_aimCamera+0x2ac>
    c3e0:	|  |      move.l 18cb4 <sceneHeight>,d0
    c3e6:	|  |      move.l d0,-(sp)
    c3e8:	|  |      jsr 13d2a <__floatunsisf>
    c3ee:	|  |      addq.l #4,sp
    c3f0:	|  |      move.l d0,d2
    c3f2:	|  |      move.l 18b18 <winHeight>,d0
    c3f8:	|  |      move.l d0,-(sp)
    c3fa:	|  |      jsr 13d2a <__floatunsisf>
    c400:	|  |      addq.l #4,sp
    c402:	|  |      move.l d0,d1
    c404:	|  |      move.l 18578 <cameraZoom>,d0
    c40a:	|  |      move.l d0,-(sp)
    c40c:	|  |      move.l d1,-(sp)
    c40e:	|  |      jsr 13bae <__divsf3>
    c414:	|  |      addq.l #8,sp
    c416:	|  |      move.l d0,-(sp)
    c418:	|  |      move.l d2,-(sp)
    c41a:	|  |      jsr 13ff6 <__subsf3>
    c420:	|  |      addq.l #8,sp
    c422:	|  |      move.l d0,-(sp)
    c424:	|  |      jsr 13c9a <__fixsfsi>
    c42a:	|  |      addq.l #4,sp
    c42c:	|  |      move.l d0,18cd2 <cameraY>
	return BR_CONTINUE;
    c432:	|  \----> moveq #2,d0
}
    c434:	\-------> move.l (sp)+,d2
    c436:	          move.l (sp)+,d3
    c438:	          rts

0000c43a <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    c43a:	       subq.l #4,sp
    c43c:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c43e:	       movea.l 16(sp),a0
    c442:	       move.l 24(a0),d0
    c446:	       move.l d0,-(sp)
    c448:	       pea 1 <_start+0x1>
    c44c:	       moveq #12,d0
    c44e:	       add.l sp,d0
    c450:	       move.l d0,-(sp)
    c452:	       jsr 11a02 <getValueType>
    c458:	       lea 12(sp),sp
    c45c:	       tst.w d0
    c45e:	   /-- bne.s c466 <builtIn_zoomCamera+0x2c>
    c460:	   |   moveq #1,d0
    c462:	/--|-- bra.w c660 <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    c466:	|  \-> moveq #24,d0
    c468:	|      add.l 16(sp),d0
    c46c:	|      move.l d0,-(sp)
    c46e:	|      jsr 12386 <trimStack>
    c474:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    c476:	|      move.l 18b7c <input+0xa>,d0
    c47c:	|      move.l d0,-(sp)
    c47e:	|      jsr 13d02 <__floatsisf>
    c484:	|      addq.l #4,sp
    c486:	|      move.l d0,d1
    c488:	|      move.l 18578 <cameraZoom>,d0
    c48e:	|      move.l d0,-(sp)
    c490:	|      move.l d1,-(sp)
    c492:	|      jsr 13db4 <__mulsf3>
    c498:	|      addq.l #8,sp
    c49a:	|      move.l d0,-(sp)
    c49c:	|      jsr 13c9a <__fixsfsi>
    c4a2:	|      addq.l #4,sp
    c4a4:	|      move.l d0,18b7c <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    c4aa:	|      move.l 18b80 <input+0xe>,d0
    c4b0:	|      move.l d0,-(sp)
    c4b2:	|      jsr 13d02 <__floatsisf>
    c4b8:	|      addq.l #4,sp
    c4ba:	|      move.l d0,d1
    c4bc:	|      move.l 18578 <cameraZoom>,d0
    c4c2:	|      move.l d0,-(sp)
    c4c4:	|      move.l d1,-(sp)
    c4c6:	|      jsr 13db4 <__mulsf3>
    c4cc:	|      addq.l #8,sp
    c4ce:	|      move.l d0,-(sp)
    c4d0:	|      jsr 13c9a <__fixsfsi>
    c4d6:	|      addq.l #4,sp
    c4d8:	|      move.l d0,18b80 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    c4de:	|      move.l 4(sp),d0
    c4e2:	|      move.l d0,-(sp)
    c4e4:	|      jsr 13d02 <__floatsisf>
    c4ea:	|      addq.l #4,sp
    c4ec:	|      move.l #1008981770,-(sp)
    c4f2:	|      move.l d0,-(sp)
    c4f4:	|      jsr 13db4 <__mulsf3>
    c4fa:	|      addq.l #8,sp
    c4fc:	|      move.l d0,18578 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    c502:	|      move.l 18b14 <winWidth>,d0
    c508:	|      move.l d0,-(sp)
    c50a:	|      jsr 13d2a <__floatunsisf>
    c510:	|      addq.l #4,sp
    c512:	|      move.l d0,d1
    c514:	|      move.l 18578 <cameraZoom>,d0
    c51a:	|      move.l d0,-(sp)
    c51c:	|      move.l d1,-(sp)
    c51e:	|      jsr 13bae <__divsf3>
    c524:	|      addq.l #8,sp
    c526:	|      move.l d0,d2
    c528:	|      move.l 18cb0 <sceneWidth>,d0
    c52e:	|      move.l d0,-(sp)
    c530:	|      jsr 13d2a <__floatunsisf>
    c536:	|      addq.l #4,sp
    c538:	|      move.l d0,-(sp)
    c53a:	|      move.l d2,-(sp)
    c53c:	|      jsr 13e6e <__gtsf2>
    c542:	|      addq.l #8,sp
    c544:	|      tst.l d0
    c546:	|  /-- ble.s c57c <builtIn_zoomCamera+0x142>
    c548:	|  |   move.l 18b14 <winWidth>,d0
    c54e:	|  |   move.l d0,-(sp)
    c550:	|  |   jsr 13d2a <__floatunsisf>
    c556:	|  |   addq.l #4,sp
    c558:	|  |   move.l d0,d2
    c55a:	|  |   move.l 18cb0 <sceneWidth>,d0
    c560:	|  |   move.l d0,-(sp)
    c562:	|  |   jsr 13d2a <__floatunsisf>
    c568:	|  |   addq.l #4,sp
    c56a:	|  |   move.l d0,-(sp)
    c56c:	|  |   move.l d2,-(sp)
    c56e:	|  |   jsr 13bae <__divsf3>
    c574:	|  |   addq.l #8,sp
    c576:	|  |   move.l d0,18578 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    c57c:	|  \-> move.l 18b18 <winHeight>,d0
    c582:	|      move.l d0,-(sp)
    c584:	|      jsr 13d2a <__floatunsisf>
    c58a:	|      addq.l #4,sp
    c58c:	|      move.l d0,d1
    c58e:	|      move.l 18578 <cameraZoom>,d0
    c594:	|      move.l d0,-(sp)
    c596:	|      move.l d1,-(sp)
    c598:	|      jsr 13bae <__divsf3>
    c59e:	|      addq.l #8,sp
    c5a0:	|      move.l d0,d2
    c5a2:	|      move.l 18cb4 <sceneHeight>,d0
    c5a8:	|      move.l d0,-(sp)
    c5aa:	|      jsr 13d2a <__floatunsisf>
    c5b0:	|      addq.l #4,sp
    c5b2:	|      move.l d0,-(sp)
    c5b4:	|      move.l d2,-(sp)
    c5b6:	|      jsr 13e6e <__gtsf2>
    c5bc:	|      addq.l #8,sp
    c5be:	|      tst.l d0
    c5c0:	|  /-- ble.s c5f6 <builtIn_zoomCamera+0x1bc>
    c5c2:	|  |   move.l 18b18 <winHeight>,d0
    c5c8:	|  |   move.l d0,-(sp)
    c5ca:	|  |   jsr 13d2a <__floatunsisf>
    c5d0:	|  |   addq.l #4,sp
    c5d2:	|  |   move.l d0,d2
    c5d4:	|  |   move.l 18cb4 <sceneHeight>,d0
    c5da:	|  |   move.l d0,-(sp)
    c5dc:	|  |   jsr 13d2a <__floatunsisf>
    c5e2:	|  |   addq.l #4,sp
    c5e4:	|  |   move.l d0,-(sp)
    c5e6:	|  |   move.l d2,-(sp)
    c5e8:	|  |   jsr 13bae <__divsf3>
    c5ee:	|  |   addq.l #8,sp
    c5f0:	|  |   move.l d0,18578 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    c5f6:	|  \-> move.l 18b7c <input+0xa>,d0
    c5fc:	|      move.l d0,-(sp)
    c5fe:	|      jsr 13d02 <__floatsisf>
    c604:	|      addq.l #4,sp
    c606:	|      move.l d0,d1
    c608:	|      move.l 18578 <cameraZoom>,d0
    c60e:	|      move.l d0,-(sp)
    c610:	|      move.l d1,-(sp)
    c612:	|      jsr 13bae <__divsf3>
    c618:	|      addq.l #8,sp
    c61a:	|      move.l d0,-(sp)
    c61c:	|      jsr 13c9a <__fixsfsi>
    c622:	|      addq.l #4,sp
    c624:	|      move.l d0,18b7c <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    c62a:	|      move.l 18b80 <input+0xe>,d0
    c630:	|      move.l d0,-(sp)
    c632:	|      jsr 13d02 <__floatsisf>
    c638:	|      addq.l #4,sp
    c63a:	|      move.l d0,d1
    c63c:	|      move.l 18578 <cameraZoom>,d0
    c642:	|      move.l d0,-(sp)
    c644:	|      move.l d1,-(sp)
    c646:	|      jsr 13bae <__divsf3>
    c64c:	|      addq.l #8,sp
    c64e:	|      move.l d0,-(sp)
    c650:	|      jsr 13c9a <__fixsfsi>
    c656:	|      addq.l #4,sp
    c658:	|      move.l d0,18b80 <input+0xe>

	return BR_CONTINUE;
    c65e:	|      moveq #2,d0
}
    c660:	\----> move.l (sp)+,d2
    c662:	       addq.l #4,sp
    c664:	       rts

0000c666 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    c666:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    c668:	             tst.l 8(sp)
    c66c:	         /-- bne.s c680 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    c66e:	         |   pea 15bc4 <custom.c.36a9b171+0xfca>
    c674:	         |   jsr 13a4a <KPrintF>
    c67a:	         |   addq.l #4,sp
		return BR_ERROR;
    c67c:	         |   moveq #1,d0
    c67e:	/--------|-- bra.s c6e0 <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    c680:	|        \-> jsr c58 <rand>
    c686:	|            move.l d0,d1
    c688:	|            move.l 8(sp),d0
    c68c:	|            move.l d0,-(sp)
    c68e:	|            move.l d1,-(sp)
    c690:	|            jsr 1435e <__umodsi3>
    c696:	|            addq.l #8,sp
    c698:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    c69a:	|     /----- bra.s c6ce <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    c69c:	|  /--|----> move.l (sp),d0
    c69e:	|  |  |      cmp.l 8(sp),d0
    c6a2:	|  |  |  /-- bne.s c6be <builtIn_pickOne+0x58>
    c6a4:	|  |  |  |   moveq #28,d0
    c6a6:	|  |  |  |   add.l 12(sp),d0
    c6aa:	|  |  |  |   movea.l 12(sp),a0
    c6ae:	|  |  |  |   move.l 24(a0),d1
    c6b2:	|  |  |  |   move.l d0,-(sp)
    c6b4:	|  |  |  |   move.l d1,-(sp)
    c6b6:	|  |  |  |   jsr 11ebc <copyVariable>
    c6bc:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    c6be:	|  |  |  \-> moveq #24,d0
    c6c0:	|  |  |      add.l 12(sp),d0
    c6c4:	|  |  |      move.l d0,-(sp)
    c6c6:	|  |  |      jsr 12386 <trimStack>
    c6cc:	|  |  |      addq.l #4,sp
	while (numParams --) {
    c6ce:	|  |  \----> move.l 8(sp),d0
    c6d2:	|  |         move.l d0,d1
    c6d4:	|  |         subq.l #1,d1
    c6d6:	|  |         move.l d1,8(sp)
    c6da:	|  |         tst.l d0
    c6dc:	|  \-------- bne.s c69c <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    c6de:	|            moveq #2,d0
}
    c6e0:	\----------> addq.l #4,sp
    c6e2:	             rts

0000c6e4 <builtIn_substring>:

builtIn(substring)
{
    c6e4:	       lea -40(sp),sp
    c6e8:	       move.l a6,-(sp)
    c6ea:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    c6ec:	       movea.l 56(sp),a0
    c6f0:	       move.l 24(a0),d0
    c6f4:	       move.l d0,-(sp)
    c6f6:	       pea 1 <_start+0x1>
    c6fa:	       lea 16(sp),a0
    c6fe:	       move.l a0,-(sp)
    c700:	       jsr 11a02 <getValueType>
    c706:	       lea 12(sp),sp
    c70a:	       tst.w d0
    c70c:	   /-- bne.s c714 <builtIn_substring+0x30>
    c70e:	   |   moveq #1,d0
    c710:	/--|-- bra.w c88c <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    c714:	|  \-> moveq #24,d0
    c716:	|      add.l 56(sp),d0
    c71a:	|      move.l d0,-(sp)
    c71c:	|      jsr 12386 <trimStack>
    c722:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    c724:	|      movea.l 56(sp),a0
    c728:	|      move.l 24(a0),d0
    c72c:	|      move.l d0,-(sp)
    c72e:	|      pea 1 <_start+0x1>
    c732:	|      lea 20(sp),a0
    c736:	|      move.l a0,-(sp)
    c738:	|      jsr 11a02 <getValueType>
    c73e:	|      lea 12(sp),sp
    c742:	|      tst.w d0
    c744:	|  /-- bne.s c74c <builtIn_substring+0x68>
    c746:	|  |   moveq #1,d0
    c748:	+--|-- bra.w c88c <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    c74c:	|  \-> moveq #24,d0
    c74e:	|      add.l 56(sp),d0
    c752:	|      move.l d0,-(sp)
    c754:	|      jsr 12386 <trimStack>
    c75a:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    c75c:	|      movea.l 56(sp),a0
    c760:	|      move.l 24(a0),d0
    c764:	|      move.l d0,-(sp)
    c766:	|      jsr 11fd8 <getTextFromAnyVar>
    c76c:	|      addq.l #4,sp
    c76e:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    c772:	|      moveq #24,d0
    c774:	|      add.l 56(sp),d0
    c778:	|      move.l d0,-(sp)
    c77a:	|      jsr 12386 <trimStack>
    c780:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    c782:	|      move.l 44(sp),-(sp)
    c786:	|      jsr 10eee <strlen>
    c78c:	|      addq.l #4,sp
    c78e:	|      move.l d0,d1
    c790:	|      move.l 12(sp),d0
    c794:	|      movea.l d0,a0
    c796:	|      move.l 8(sp),d0
    c79a:	|      add.l a0,d0
    c79c:	|      cmp.l d1,d0
    c79e:	|  /-- bls.s c7d4 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    c7a0:	|  |   move.l 44(sp),-(sp)
    c7a4:	|  |   jsr 10eee <strlen>
    c7aa:	|  |   addq.l #4,sp
    c7ac:	|  |   move.l d0,d1
    c7ae:	|  |   move.l 12(sp),d0
    c7b2:	|  |   sub.l d0,d1
    c7b4:	|  |   move.l d1,d0
    c7b6:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    c7ba:	|  |   move.l 44(sp),-(sp)
    c7be:	|  |   jsr 10eee <strlen>
    c7c4:	|  |   addq.l #4,sp
    c7c6:	|  |   move.l d0,d1
    c7c8:	|  |   move.l 12(sp),d0
    c7cc:	|  |   cmp.l d1,d0
    c7ce:	|  +-- bls.s c7d4 <builtIn_substring+0xf0>
            start = 0;
    c7d0:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    c7d4:	|  \-> move.l 8(sp),d0
    c7d8:	|  /-- bpl.s c7de <builtIn_substring+0xfa>
        length = 0;
    c7da:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    c7de:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    c7e4:	|      move.l 12(sp),d1
    c7e8:	|      move.l 8(sp),d0
    c7ec:	|      move.l d1,d2
    c7ee:	|      add.l d0,d2
    c7f0:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    c7f4:	|      move.l 36(sp),d0
    c7f8:	|      sub.l 40(sp),d0
    c7fc:	|      addq.l #1,d0
    c7fe:	|      move.l d0,32(sp)
    c802:	|      clr.l 28(sp)
    c806:	|      move.l 18bc0 <SysBase>,d0
    c80c:	|      movea.l d0,a6
    c80e:	|      move.l 32(sp),d0
    c812:	|      move.l 28(sp),d1
    c816:	|      jsr -684(a6)
    c81a:	|      move.l d0,24(sp)
    c81e:	|      move.l 24(sp),d0
    c822:	|      move.l d0,20(sp)
    if (!newString) {
    c826:	|  /-- bne.s c82c <builtIn_substring+0x148>
        return BR_ERROR;
    c828:	|  |   moveq #1,d0
    c82a:	+--|-- bra.s c88c <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    c82c:	|  \-> move.l 36(sp),d0
    c830:	|      sub.l 40(sp),d0
    c834:	|      move.l d0,d1
    c836:	|      move.l 40(sp),d0
    c83a:	|      add.l 44(sp),d0
    c83e:	|      move.l d1,-(sp)
    c840:	|      move.l d0,-(sp)
    c842:	|      move.l 28(sp),-(sp)
    c846:	|      jsr 139fe <memcpy>
    c84c:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    c850:	|      move.l 36(sp),d0
    c854:	|      sub.l 40(sp),d0
    c858:	|      movea.l 20(sp),a0
    c85c:	|      adda.l d0,a0
    c85e:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    c860:	|      moveq #28,d0
    c862:	|      add.l 56(sp),d0
    c866:	|      move.l 20(sp),-(sp)
    c86a:	|      move.l d0,-(sp)
    c86c:	|      jsr 11c24 <makeTextVar>
    c872:	|      addq.l #8,sp
    FreeVec(newString);
    c874:	|      move.l 20(sp),16(sp)
    c87a:	|      move.l 18bc0 <SysBase>,d0
    c880:	|      movea.l d0,a6
    c882:	|      movea.l 16(sp),a1
    c886:	|      jsr -690(a6)
    return BR_CONTINUE;
    c88a:	|      moveq #2,d0
}
    c88c:	\----> move.l (sp)+,d2
    c88e:	       movea.l (sp)+,a6
    c890:	       lea 40(sp),sp
    c894:	       rts

0000c896 <builtIn_stringLength>:

builtIn(stringLength)
{
    c896:	subq.l #8,sp
    c898:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    c89a:	movea.l 20(sp),a0
    c89e:	move.l 24(a0),d0
    c8a2:	move.l d0,-(sp)
    c8a4:	jsr 11fd8 <getTextFromAnyVar>
    c8aa:	addq.l #4,sp
    c8ac:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    c8b0:	moveq #24,d0
    c8b2:	add.l 20(sp),d0
    c8b6:	move.l d0,-(sp)
    c8b8:	jsr 12386 <trimStack>
    c8be:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    c8c0:	move.l 8(sp),-(sp)
    c8c4:	jsr 10eee <strlen>
    c8ca:	addq.l #4,sp
    c8cc:	move.l d0,d1
    c8ce:	moveq #28,d0
    c8d0:	add.l 20(sp),d0
    c8d4:	move.l d1,-(sp)
    c8d6:	pea 1 <_start+0x1>
    c8da:	move.l d0,-(sp)
    c8dc:	jsr 122f4 <setVariable>
    c8e2:	lea 12(sp),sp
	FreeVec(newText);
    c8e6:	move.l 8(sp),4(sp)
    c8ec:	move.l 18bc0 <SysBase>,d0
    c8f2:	movea.l d0,a6
    c8f4:	movea.l 4(sp),a1
    c8f8:	jsr -690(a6)
	return BR_CONTINUE;
    c8fc:	moveq #2,d0
}
    c8fe:	movea.l (sp)+,a6
    c900:	addq.l #8,sp
    c902:	rts

0000c904 <builtIn_newStack>:

builtIn(newStack)
{
    c904:	             lea -12(sp),sp
    c908:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    c90a:	             moveq #28,d0
    c90c:	             add.l 24(sp),d0
    c910:	             move.l d0,-(sp)
    c912:	             jsr 11c50 <unlinkVar>
    c918:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    c91a:	             movea.l 24(sp),a0
    c91e:	             moveq #6,d0
    c920:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    c924:	             moveq #12,d1
    c926:	             move.l d1,12(sp)
    c92a:	             clr.l 8(sp)
    c92e:	             move.l 18bc0 <SysBase>,d0
    c934:	             movea.l d0,a6
    c936:	             move.l 12(sp),d0
    c93a:	             move.l 8(sp),d1
    c93e:	             jsr -684(a6)
    c942:	             move.l d0,4(sp)
    c946:	             move.l 4(sp),d0
    c94a:	             movea.l 24(sp),a0
    c94e:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    c952:	             movea.l 24(sp),a0
    c956:	             move.l 32(a0),d0
    c95a:	         /-- bne.s c962 <builtIn_newStack+0x5e>
    c95c:	         |   moveq #1,d0
    c95e:	/--------|-- bra.w c9f4 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    c962:	|        \-> movea.l 24(sp),a0
    c966:	|            movea.l 32(a0),a0
    c96a:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    c96c:	|            movea.l 24(sp),a0
    c970:	|            movea.l 32(a0),a0
    c974:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    c978:	|            movea.l 24(sp),a0
    c97c:	|            movea.l 32(a0),a0
    c980:	|            moveq #1,d0
    c982:	|            move.l d0,8(a0)
    
    while (numParams--) {
    c986:	|     /----- bra.s c9e2 <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    c988:	|  /--|----> movea.l 24(sp),a0
    c98c:	|  |  |      move.l 32(a0),d0
    c990:	|  |  |      move.l d0,d1
    c992:	|  |  |      movea.l 24(sp),a0
    c996:	|  |  |      move.l 24(a0),d0
    c99a:	|  |  |      move.l d1,-(sp)
    c99c:	|  |  |      move.l d0,-(sp)
    c99e:	|  |  |      jsr 1123e <addVarToStack>
    c9a4:	|  |  |      addq.l #8,sp
    c9a6:	|  |  |      tst.w d0
    c9a8:	|  |  |  /-- bne.s c9ae <builtIn_newStack+0xaa>
    c9aa:	|  |  |  |   moveq #1,d0
    c9ac:	+--|--|--|-- bra.s c9f4 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    c9ae:	|  |  |  \-> movea.l 24(sp),a0
    c9b2:	|  |  |      movea.l 32(a0),a0
    c9b6:	|  |  |      move.l 4(a0),d0
    c9ba:	|  |  |  /-- bne.s c9d2 <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    c9bc:	|  |  |  |   movea.l 24(sp),a0
    c9c0:	|  |  |  |   movea.l 32(a0),a1
    c9c4:	|  |  |  |   movea.l 24(sp),a0
    c9c8:	|  |  |  |   movea.l 32(a0),a0
    c9cc:	|  |  |  |   move.l (a1),d0
    c9ce:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    c9d2:	|  |  |  \-> moveq #24,d0
    c9d4:	|  |  |      add.l 24(sp),d0
    c9d8:	|  |  |      move.l d0,-(sp)
    c9da:	|  |  |      jsr 12386 <trimStack>
    c9e0:	|  |  |      addq.l #4,sp
    while (numParams--) {
    c9e2:	|  |  \----> move.l 20(sp),d0
    c9e6:	|  |         move.l d0,d1
    c9e8:	|  |         subq.l #1,d1
    c9ea:	|  |         move.l d1,20(sp)
    c9ee:	|  |         tst.l d0
    c9f0:	|  \-------- bne.s c988 <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    c9f2:	|            moveq #2,d0
}
    c9f4:	\----------> movea.l (sp)+,a6
    c9f6:	             lea 12(sp),sp
    c9fa:	             rts

0000c9fc <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    c9fc:	          movea.l 8(sp),a0
    ca00:	          movea.l 24(a0),a0
    ca04:	          move.l (a0),d0
    ca06:	          moveq #6,d1
    ca08:	          cmp.l d0,d1
    ca0a:	      /-- beq.s ca26 <builtIn_stackSize+0x2a>
    ca0c:	      |   moveq #10,d1
    ca0e:	      |   cmp.l d0,d1
    ca10:	   /--|-- beq.s ca6a <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    ca12:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    ca14:	   |  |   pea 15bf7 <custom.c.36a9b171+0xffd>
    ca1a:	   |  |   jsr 13a4a <KPrintF>
    ca20:	   |  |   addq.l #4,sp
	return BR_ERROR;
    ca22:	   |  |   moveq #1,d0
    ca24:	/--|--|-- bra.s caa4 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    ca26:	|  |  \-> movea.l 8(sp),a0
    ca2a:	|  |      movea.l 24(a0),a0
    ca2e:	|  |      move.l 4(a0),d0
    ca32:	|  |      move.l d0,-(sp)
    ca34:	|  |      jsr 12362 <stackSize>
    ca3a:	|  |      addq.l #4,sp
    ca3c:	|  |      move.l d0,d1
    ca3e:	|  |      moveq #28,d0
    ca40:	|  |      add.l 8(sp),d0
    ca44:	|  |      move.l d1,-(sp)
    ca46:	|  |      pea 1 <_start+0x1>
    ca4a:	|  |      move.l d0,-(sp)
    ca4c:	|  |      jsr 122f4 <setVariable>
    ca52:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    ca56:	|  |      moveq #24,d0
    ca58:	|  |      add.l 8(sp),d0
    ca5c:	|  |      move.l d0,-(sp)
    ca5e:	|  |      jsr 12386 <trimStack>
    ca64:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    ca66:	|  |      moveq #2,d0
    ca68:	+--|----- bra.s caa4 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    ca6a:	|  \----> movea.l 8(sp),a0
    ca6e:	|         movea.l 24(a0),a0
    ca72:	|         movea.l 4(a0),a0
    ca76:	|         move.l 4(a0),d1
    ca7a:	|         moveq #28,d0
    ca7c:	|         add.l 8(sp),d0
    ca80:	|         move.l d1,-(sp)
    ca82:	|         pea 1 <_start+0x1>
    ca86:	|         move.l d0,-(sp)
    ca88:	|         jsr 122f4 <setVariable>
    ca8e:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    ca92:	|         moveq #24,d0
    ca94:	|         add.l 8(sp),d0
    ca98:	|         move.l d0,-(sp)
    ca9a:	|         jsr 12386 <trimStack>
    caa0:	|         addq.l #4,sp
			return BR_CONTINUE;
    caa2:	|         moveq #2,d0
}
    caa4:	\-------> rts

0000caa6 <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    caa6:	       movea.l 8(sp),a0
    caaa:	       movea.l 24(a0),a0
    caae:	       move.l (a0),d0
    cab0:	       moveq #6,d1
    cab2:	       cmp.l d0,d1
    cab4:	   /-- beq.s cac8 <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    cab6:	   |   pea 15c20 <custom.c.36a9b171+0x1026>
    cabc:	   |   jsr 13a4a <KPrintF>
    cac2:	   |   addq.l #4,sp
		return BR_ERROR;
    cac4:	   |   moveq #1,d0
    cac6:	/--|-- bra.s cafc <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    cac8:	|  \-> moveq #28,d0
    caca:	|      add.l 8(sp),d0
    cace:	|      movea.l 8(sp),a0
    cad2:	|      move.l 24(a0),d1
    cad6:	|      move.l d0,-(sp)
    cad8:	|      move.l d1,-(sp)
    cada:	|      jsr 11508 <copyStack>
    cae0:	|      addq.l #8,sp
    cae2:	|      tst.w d0
    cae4:	|  /-- bne.s caea <builtIn_copyStack+0x44>
    cae6:	|  |   moveq #1,d0
    cae8:	+--|-- bra.s cafc <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    caea:	|  \-> moveq #24,d0
    caec:	|      add.l 8(sp),d0
    caf0:	|      move.l d0,-(sp)
    caf2:	|      jsr 12386 <trimStack>
    caf8:	|      addq.l #4,sp
	return BR_CONTINUE;
    cafa:	|      moveq #2,d0
}
    cafc:	\----> rts

0000cafe <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    cafe:	       movea.l 8(sp),a0
    cb02:	       movea.l 24(a0),a0
    cb06:	       movea.l 8(a0),a0
    cb0a:	       move.l (a0),d0
    cb0c:	       moveq #6,d1
    cb0e:	       cmp.l d0,d1
    cb10:	   /-- beq.s cb26 <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    cb12:	   |   pea 15c39 <custom.c.36a9b171+0x103f>
    cb18:	   |   jsr 13a4a <KPrintF>
    cb1e:	   |   addq.l #4,sp
		return BR_ERROR;
    cb20:	   |   moveq #1,d0
    cb22:	/--|-- bra.w cbb4 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    cb26:	|  \-> movea.l 8(sp),a0
    cb2a:	|      movea.l 24(a0),a0
    cb2e:	|      movea.l 8(a0),a0
    cb32:	|      move.l 4(a0),d0
    cb36:	|      move.l d0,d1
    cb38:	|      movea.l 8(sp),a0
    cb3c:	|      move.l 24(a0),d0
    cb40:	|      move.l d1,-(sp)
    cb42:	|      move.l d0,-(sp)
    cb44:	|      jsr 1123e <addVarToStack>
    cb4a:	|      addq.l #8,sp
    cb4c:	|      tst.w d0
    cb4e:	|  /-- bne.s cb54 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    cb50:	|  |   moveq #1,d0
    cb52:	+--|-- bra.s cbb4 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    cb54:	|  \-> movea.l 8(sp),a0
    cb58:	|      movea.l 24(a0),a0
    cb5c:	|      movea.l 8(a0),a0
    cb60:	|      movea.l 4(a0),a0
    cb64:	|      movea.l (a0),a0
    cb66:	|      move.l 8(a0),d0
    cb6a:	|  /-- bne.s cb92 <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    cb6c:	|  |   movea.l 8(sp),a0
    cb70:	|  |   movea.l 24(a0),a0
    cb74:	|  |   movea.l 8(a0),a0
    cb78:	|  |   movea.l 4(a0),a1
    cb7c:	|  |   movea.l 8(sp),a0
    cb80:	|  |   movea.l 24(a0),a0
    cb84:	|  |   movea.l 8(a0),a0
    cb88:	|  |   movea.l 4(a0),a0
    cb8c:	|  |   move.l (a1),d0
    cb8e:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    cb92:	|  \-> moveq #24,d0
    cb94:	|      add.l 8(sp),d0
    cb98:	|      move.l d0,-(sp)
    cb9a:	|      jsr 12386 <trimStack>
    cba0:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    cba2:	|      moveq #24,d0
    cba4:	|      add.l 8(sp),d0
    cba8:	|      move.l d0,-(sp)
    cbaa:	|      jsr 12386 <trimStack>
    cbb0:	|      addq.l #4,sp
	return BR_CONTINUE;
    cbb2:	|      moveq #2,d0
}
    cbb4:	\----> rts

0000cbb6 <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    cbb6:	             movea.l 8(sp),a0
    cbba:	             movea.l 24(a0),a0
    cbbe:	             movea.l 8(a0),a0
    cbc2:	             move.l (a0),d0
    cbc4:	             moveq #6,d1
    cbc6:	             cmp.l d0,d1
    cbc8:	         /-- beq.s cbde <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    cbca:	         |   pea 15c39 <custom.c.36a9b171+0x103f>
    cbd0:	         |   jsr 13a4a <KPrintF>
    cbd6:	         |   addq.l #4,sp
		return BR_ERROR;
    cbd8:	         |   moveq #1,d0
    cbda:	/--------|-- bra.w cccc <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    cbde:	|        \-> movea.l 8(sp),a0
    cbe2:	|            movea.l 24(a0),a0
    cbe6:	|            movea.l 8(a0),a0
    cbea:	|            movea.l 4(a0),a0
    cbee:	|            move.l (a0),d0
    cbf0:	|     /----- bne.s cc4a <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    cbf2:	|     |      movea.l 8(sp),a0
    cbf6:	|     |      movea.l 24(a0),a0
    cbfa:	|     |      movea.l 8(a0),a0
    cbfe:	|     |      move.l 4(a0),d0
    cc02:	|     |      move.l d0,d1
    cc04:	|     |      movea.l 8(sp),a0
    cc08:	|     |      move.l 24(a0),d0
    cc0c:	|     |      move.l d1,-(sp)
    cc0e:	|     |      move.l d0,-(sp)
    cc10:	|     |      jsr 1123e <addVarToStack>
    cc16:	|     |      addq.l #8,sp
    cc18:	|     |      tst.w d0
    cc1a:	|     |  /-- bne.s cc22 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    cc1c:	|     |  |   moveq #1,d0
    cc1e:	+-----|--|-- bra.w cccc <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    cc22:	|     |  \-> movea.l 8(sp),a0
    cc26:	|     |      movea.l 24(a0),a0
    cc2a:	|     |      movea.l 8(a0),a0
    cc2e:	|     |      movea.l 4(a0),a1
    cc32:	|     |      movea.l 8(sp),a0
    cc36:	|     |      movea.l 24(a0),a0
    cc3a:	|     |      movea.l 8(a0),a0
    cc3e:	|     |      movea.l 4(a0),a0
    cc42:	|     |      move.l (a1),d0
    cc44:	|     |      move.l d0,4(a0)
    cc48:	|  /--|----- bra.s ccaa <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    cc4a:	|  |  \----> movea.l 8(sp),a0
    cc4e:	|  |         movea.l 24(a0),a0
    cc52:	|  |         movea.l 8(a0),a0
    cc56:	|  |         movea.l 4(a0),a0
    cc5a:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    cc5e:	|  |         move.l d0,d1
    cc60:	|  |         addq.l #8,d1
    cc62:	|  |         movea.l 8(sp),a0
    cc66:	|  |         move.l 24(a0),d0
    cc6a:	|  |         move.l d1,-(sp)
    cc6c:	|  |         move.l d0,-(sp)
    cc6e:	|  |         jsr 1123e <addVarToStack>
    cc74:	|  |         addq.l #8,sp
    cc76:	|  |         tst.w d0
    cc78:	|  |     /-- bne.s cc7e <builtIn_enqueue+0xc8>
			return BR_ERROR;
    cc7a:	|  |     |   moveq #1,d0
    cc7c:	+--|-----|-- bra.s cccc <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    cc7e:	|  |     \-> movea.l 8(sp),a0
    cc82:	|  |         movea.l 24(a0),a0
    cc86:	|  |         movea.l 8(a0),a0
    cc8a:	|  |         movea.l 4(a0),a0
    cc8e:	|  |         movea.l 4(a0),a1
    cc92:	|  |         movea.l 8(sp),a0
    cc96:	|  |         movea.l 24(a0),a0
    cc9a:	|  |         movea.l 8(a0),a0
    cc9e:	|  |         movea.l 4(a0),a0
    cca2:	|  |         move.l 8(a1),d0
    cca6:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    ccaa:	|  \-------> moveq #24,d0
    ccac:	|            add.l 8(sp),d0
    ccb0:	|            move.l d0,-(sp)
    ccb2:	|            jsr 12386 <trimStack>
    ccb8:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    ccba:	|            moveq #24,d0
    ccbc:	|            add.l 8(sp),d0
    ccc0:	|            move.l d0,-(sp)
    ccc2:	|            jsr 12386 <trimStack>
    ccc8:	|            addq.l #4,sp
	return BR_CONTINUE;
    ccca:	|            moveq #2,d0
}
    cccc:	\----------> rts

0000ccce <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    ccce:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    ccd0:	       movea.l 12(sp),a0
    ccd4:	       movea.l 24(a0),a0
    ccd8:	       movea.l 8(a0),a0
    ccdc:	       move.l (a0),d0
    ccde:	       moveq #6,d1
    cce0:	       cmp.l d0,d1
    cce2:	   /-- beq.s ccf8 <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    cce4:	   |   pea 15c20 <custom.c.36a9b171+0x1026>
    ccea:	   |   jsr 13a4a <KPrintF>
    ccf0:	   |   addq.l #4,sp
		return BR_ERROR;
    ccf2:	   |   moveq #1,d0
    ccf4:	/--|-- bra.w cd8e <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    ccf8:	|  \-> movea.l 12(sp),a0
    ccfc:	|      movea.l 24(a0),a0
    cd00:	|      movea.l 8(a0),a0
    cd04:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    cd08:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    cd0a:	|      movea.l 12(sp),a0
    cd0e:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    cd12:	|      clr.l -(sp)
    cd14:	|      move.l d1,-(sp)
    cd16:	|      move.l d0,-(sp)
    cd18:	|      jsr 115de <deleteVarFromStack>
    cd1e:	|      lea 12(sp),sp
    cd22:	|      move.l d0,d1
    cd24:	|      moveq #28,d0
    cd26:	|      add.l 12(sp),d0
    cd2a:	|      move.l d1,-(sp)
    cd2c:	|      pea 1 <_start+0x1>
    cd30:	|      move.l d0,-(sp)
    cd32:	|      jsr 122f4 <setVariable>
    cd38:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    cd3c:	|      movea.l 12(sp),a0
    cd40:	|      movea.l 24(a0),a0
    cd44:	|      movea.l 8(a0),a0
    cd48:	|      movea.l 4(a0),a0
    cd4c:	|      move.l (a0),d0
    cd4e:	|      movea.l 12(sp),a0
    cd52:	|      movea.l 24(a0),a0
    cd56:	|      movea.l 8(a0),a0
    cd5a:	|      movea.l 4(a0),a2
    cd5e:	|      move.l d0,-(sp)
    cd60:	|      jsr 1233e <stackFindLast>
    cd66:	|      addq.l #4,sp
    cd68:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    cd6c:	|      moveq #24,d0
    cd6e:	|      add.l 12(sp),d0
    cd72:	|      move.l d0,-(sp)
    cd74:	|      jsr 12386 <trimStack>
    cd7a:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    cd7c:	|      moveq #24,d0
    cd7e:	|      add.l 12(sp),d0
    cd82:	|      move.l d0,-(sp)
    cd84:	|      jsr 12386 <trimStack>
    cd8a:	|      addq.l #4,sp
	return BR_CONTINUE;
    cd8c:	|      moveq #2,d0
}
    cd8e:	\----> movea.l (sp)+,a2
    cd90:	       rts

0000cd92 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    cd92:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    cd94:	       movea.l 12(sp),a0
    cd98:	       movea.l 24(a0),a0
    cd9c:	       movea.l 8(a0),a0
    cda0:	       move.l (a0),d0
    cda2:	       moveq #6,d1
    cda4:	       cmp.l d0,d1
    cda6:	   /-- beq.s cdbc <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    cda8:	   |   pea 15c20 <custom.c.36a9b171+0x1026>
    cdae:	   |   jsr 13a4a <KPrintF>
    cdb4:	   |   addq.l #4,sp
		return BR_ERROR;
    cdb6:	   |   moveq #1,d0
    cdb8:	/--|-- bra.w ce54 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    cdbc:	|  \-> movea.l 12(sp),a0
    cdc0:	|      movea.l 24(a0),a0
    cdc4:	|      movea.l 8(a0),a0
    cdc8:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    cdcc:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    cdce:	|      movea.l 12(sp),a0
    cdd2:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    cdd6:	|      pea 1 <_start+0x1>
    cdda:	|      move.l d1,-(sp)
    cddc:	|      move.l d0,-(sp)
    cdde:	|      jsr 115de <deleteVarFromStack>
    cde4:	|      lea 12(sp),sp
    cde8:	|      move.l d0,d1
    cdea:	|      moveq #28,d0
    cdec:	|      add.l 12(sp),d0
    cdf0:	|      move.l d1,-(sp)
    cdf2:	|      pea 1 <_start+0x1>
    cdf6:	|      move.l d0,-(sp)
    cdf8:	|      jsr 122f4 <setVariable>
    cdfe:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    ce02:	|      movea.l 12(sp),a0
    ce06:	|      movea.l 24(a0),a0
    ce0a:	|      movea.l 8(a0),a0
    ce0e:	|      movea.l 4(a0),a0
    ce12:	|      move.l (a0),d0
    ce14:	|      movea.l 12(sp),a0
    ce18:	|      movea.l 24(a0),a0
    ce1c:	|      movea.l 8(a0),a0
    ce20:	|      movea.l 4(a0),a2
    ce24:	|      move.l d0,-(sp)
    ce26:	|      jsr 1233e <stackFindLast>
    ce2c:	|      addq.l #4,sp
    ce2e:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    ce32:	|      moveq #24,d0
    ce34:	|      add.l 12(sp),d0
    ce38:	|      move.l d0,-(sp)
    ce3a:	|      jsr 12386 <trimStack>
    ce40:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    ce42:	|      moveq #24,d0
    ce44:	|      add.l 12(sp),d0
    ce48:	|      move.l d0,-(sp)
    ce4a:	|      jsr 12386 <trimStack>
    ce50:	|      addq.l #4,sp
	return BR_CONTINUE;
    ce52:	|      moveq #2,d0
}
    ce54:	\----> movea.l (sp)+,a2
    ce56:	       rts

0000ce58 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    ce58:	       movea.l 8(sp),a0
    ce5c:	       movea.l 24(a0),a0
    ce60:	       move.l (a0),d0
    ce62:	       moveq #6,d1
    ce64:	       cmp.l d0,d1
    ce66:	   /-- beq.s ce7a <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    ce68:	   |   pea 15c20 <custom.c.36a9b171+0x1026>
    ce6e:	   |   jsr 13a4a <KPrintF>
    ce74:	   |   addq.l #4,sp
		return BR_ERROR;
    ce76:	   |   moveq #1,d0
    ce78:	/--|-- bra.s cee4 <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    ce7a:	|  \-> movea.l 8(sp),a0
    ce7e:	|      movea.l 24(a0),a0
    ce82:	|      movea.l 4(a0),a0
    ce86:	|      move.l (a0),d0
    ce88:	|  /-- bne.s ce9c <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    ce8a:	|  |   pea 15c51 <custom.c.36a9b171+0x1057>
    ce90:	|  |   jsr 13a4a <KPrintF>
    ce96:	|  |   addq.l #4,sp
		return BR_ERROR;
    ce98:	|  |   moveq #1,d0
    ce9a:	+--|-- bra.s cee4 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    ce9c:	|  \-> moveq #28,d0
    ce9e:	|      add.l 8(sp),d0
    cea2:	|      movea.l 8(sp),a0
    cea6:	|      movea.l 24(a0),a0
    ceaa:	|      movea.l 4(a0),a0
    ceae:	|      move.l (a0),d1
    ceb0:	|      move.l d0,-(sp)
    ceb2:	|      move.l d1,-(sp)
    ceb4:	|      jsr 11ebc <copyVariable>
    ceba:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    cebc:	|      movea.l 8(sp),a0
    cec0:	|      movea.l 24(a0),a0
    cec4:	|      move.l 4(a0),d0
    cec8:	|      move.l d0,-(sp)
    ceca:	|      jsr 12386 <trimStack>
    ced0:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    ced2:	|      moveq #24,d0
    ced4:	|      add.l 8(sp),d0
    ced8:	|      move.l d0,-(sp)
    ceda:	|      jsr 12386 <trimStack>
    cee0:	|      addq.l #4,sp
	return BR_CONTINUE;
    cee2:	|      moveq #2,d0
}
    cee4:	\----> rts

0000cee6 <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    cee6:	       movea.l 8(sp),a0
    ceea:	       movea.l 24(a0),a0
    ceee:	       move.l (a0),d0
    cef0:	       moveq #6,d1
    cef2:	       cmp.l d0,d1
    cef4:	   /-- beq.s cf08 <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    cef6:	   |   pea 15c20 <custom.c.36a9b171+0x1026>
    cefc:	   |   jsr 13a4a <KPrintF>
    cf02:	   |   addq.l #4,sp
		return BR_ERROR;
    cf04:	   |   moveq #1,d0
    cf06:	/--|-- bra.s cf5c <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    cf08:	|  \-> movea.l 8(sp),a0
    cf0c:	|      movea.l 24(a0),a0
    cf10:	|      movea.l 4(a0),a0
    cf14:	|      move.l (a0),d0
    cf16:	|  /-- bne.s cf2a <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    cf18:	|  |   pea 15c51 <custom.c.36a9b171+0x1057>
    cf1e:	|  |   jsr 13a4a <KPrintF>
    cf24:	|  |   addq.l #4,sp
		return BR_ERROR;
    cf26:	|  |   moveq #1,d0
    cf28:	+--|-- bra.s cf5c <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    cf2a:	|  \-> moveq #28,d0
    cf2c:	|      add.l 8(sp),d0
    cf30:	|      movea.l 8(sp),a0
    cf34:	|      movea.l 24(a0),a0
    cf38:	|      movea.l 4(a0),a0
    cf3c:	|      move.l (a0),d1
    cf3e:	|      move.l d0,-(sp)
    cf40:	|      move.l d1,-(sp)
    cf42:	|      jsr 11ebc <copyVariable>
    cf48:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    cf4a:	|      moveq #24,d0
    cf4c:	|      add.l 8(sp),d0
    cf50:	|      move.l d0,-(sp)
    cf52:	|      jsr 12386 <trimStack>
    cf58:	|      addq.l #4,sp
	return BR_CONTINUE;
    cf5a:	|      moveq #2,d0
}
    cf5c:	\----> rts

0000cf5e <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    cf5e:	       movea.l 8(sp),a0
    cf62:	       movea.l 24(a0),a0
    cf66:	       move.l (a0),d0
    cf68:	       moveq #6,d1
    cf6a:	       cmp.l d0,d1
    cf6c:	   /-- beq.s cf80 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    cf6e:	   |   pea 15c20 <custom.c.36a9b171+0x1026>
    cf74:	   |   jsr 13a4a <KPrintF>
    cf7a:	   |   addq.l #4,sp
		return BR_ERROR;
    cf7c:	   |   moveq #1,d0
    cf7e:	/--|-- bra.s cfd6 <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    cf80:	|  \-> movea.l 8(sp),a0
    cf84:	|      movea.l 24(a0),a0
    cf88:	|      movea.l 4(a0),a0
    cf8c:	|      move.l (a0),d0
    cf8e:	|  /-- bne.s cfa2 <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    cf90:	|  |   pea 15c51 <custom.c.36a9b171+0x1057>
    cf96:	|  |   jsr 13a4a <KPrintF>
    cf9c:	|  |   addq.l #4,sp
		return BR_ERROR;
    cf9e:	|  |   moveq #1,d0
    cfa0:	+--|-- bra.s cfd6 <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    cfa2:	|  \-> moveq #28,d0
    cfa4:	|      add.l 8(sp),d0
    cfa8:	|      movea.l 8(sp),a0
    cfac:	|      movea.l 24(a0),a0
    cfb0:	|      movea.l 4(a0),a0
    cfb4:	|      move.l 4(a0),d1
    cfb8:	|      move.l d0,-(sp)
    cfba:	|      move.l d1,-(sp)
    cfbc:	|      jsr 11ebc <copyVariable>
    cfc2:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    cfc4:	|      moveq #24,d0
    cfc6:	|      add.l 8(sp),d0
    cfca:	|      move.l d0,-(sp)
    cfcc:	|      jsr 12386 <trimStack>
    cfd2:	|      addq.l #4,sp
	return BR_CONTINUE;
    cfd4:	|      moveq #2,d0
}
    cfd6:	\----> rts

0000cfd8 <builtIn_random>:

builtIn(random)
{
    cfd8:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    cfda:	       movea.l 12(sp),a0
    cfde:	       move.l 24(a0),d0
    cfe2:	       move.l d0,-(sp)
    cfe4:	       pea 1 <_start+0x1>
    cfe8:	       move.l sp,d0
    cfea:	       addq.l #8,d0
    cfec:	       move.l d0,-(sp)
    cfee:	       jsr 11a02 <getValueType>
    cff4:	       lea 12(sp),sp
    cff8:	       tst.w d0
    cffa:	   /-- bne.s d000 <builtIn_random+0x28>
		return BR_ERROR;
    cffc:	   |   moveq #1,d0
    cffe:	/--|-- bra.s d04a <builtIn_random+0x72>

	trimStack (&fun -> stack);
    d000:	|  \-> moveq #24,d0
    d002:	|      add.l 12(sp),d0
    d006:	|      move.l d0,-(sp)
    d008:	|      jsr 12386 <trimStack>
    d00e:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    d010:	|      move.l (sp),d0
    d012:	|  /-- bgt.s d018 <builtIn_random+0x40>
    d014:	|  |   moveq #1,d0
    d016:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    d018:	|  \-> jsr c58 <rand>
    d01e:	|      move.l d0,d1
    d020:	|      move.l (sp),d0
    d022:	|      move.l d0,-(sp)
    d024:	|      move.l d1,-(sp)
    d026:	|      jsr 1435e <__umodsi3>
    d02c:	|      addq.l #8,sp
    d02e:	|      move.l d0,d1
    d030:	|      moveq #28,d0
    d032:	|      add.l 12(sp),d0
    d036:	|      move.l d1,-(sp)
    d038:	|      pea 1 <_start+0x1>
    d03c:	|      move.l d0,-(sp)
    d03e:	|      jsr 122f4 <setVariable>
    d044:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d048:	|      moveq #2,d0
}
    d04a:	\----> addq.l #4,sp
    d04c:	       rts

0000d04e <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    d04e:	nop
    d050:	rts

0000d052 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    d052:	moveq #2,d0
}
    d054:	rts

0000d056 <builtIn_setPasteColour>:

	/*if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);Todo Amigize This?*/
	return BR_CONTINUE;
    d056:	moveq #2,d0
}
    d058:	rts

0000d05a <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    d05a:	moveq #2,d0
}
    d05c:	rts

0000d05e <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    d05e:	moveq #2,d0
}
    d060:	rts

0000d062 <builtIn_setFont>:


builtIn(setFont)
{
    d062:	       lea -16(sp),sp
    d066:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    d068:	       movea.l 28(sp),a0
    d06c:	       move.l 24(a0),d0
    d070:	       move.l d0,-(sp)
    d072:	       pea 1 <_start+0x1>
    d076:	       lea 12(sp),a0
    d07a:	       move.l a0,-(sp)
    d07c:	       jsr 11a02 <getValueType>
    d082:	       lea 12(sp),sp
    d086:	       tst.w d0
    d088:	   /-- bne.s d090 <builtIn_setFont+0x2e>
    d08a:	   |   moveq #1,d0
    d08c:	/--|-- bra.w d13e <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    d090:	|  \-> moveq #24,d0
    d092:	|      add.l 28(sp),d0
    d096:	|      move.l d0,-(sp)
    d098:	|      jsr 12386 <trimStack>
    d09e:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    d0a0:	|      movea.l 28(sp),a0
    d0a4:	|      move.l 24(a0),d0
    d0a8:	|      move.l d0,-(sp)
    d0aa:	|      jsr 11fd8 <getTextFromAnyVar>
    d0b0:	|      addq.l #4,sp
    d0b2:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    d0b6:	|  /-- bne.s d0be <builtIn_setFont+0x5c>
    d0b8:	|  |   moveq #1,d0
    d0ba:	+--|-- bra.w d13e <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    d0be:	|  \-> moveq #24,d0
    d0c0:	|      add.l 28(sp),d0
    d0c4:	|      move.l d0,-(sp)
    d0c6:	|      jsr 12386 <trimStack>
    d0cc:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    d0ce:	|      movea.l 28(sp),a0
    d0d2:	|      move.l 24(a0),d0
    d0d6:	|      move.l d0,-(sp)
    d0d8:	|      pea 5 <_start+0x5>
    d0dc:	|      lea 16(sp),a0
    d0e0:	|      move.l a0,-(sp)
    d0e2:	|      jsr 11a02 <getValueType>
    d0e8:	|      lea 12(sp),sp
    d0ec:	|      tst.w d0
    d0ee:	|  /-- bne.s d0f4 <builtIn_setFont+0x92>
    d0f0:	|  |   moveq #1,d0
    d0f2:	+--|-- bra.s d13e <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    d0f4:	|  \-> moveq #24,d0
    d0f6:	|      add.l 28(sp),d0
    d0fa:	|      move.l d0,-(sp)
    d0fc:	|      jsr 12386 <trimStack>
    d102:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    d104:	|      move.l 4(sp),d1
    d108:	|      move.l 8(sp),d0
    d10c:	|      move.l d1,-(sp)
    d10e:	|      move.l 20(sp),-(sp)
    d112:	|      move.l d0,-(sp)
    d114:	|      jsr 123fa <loadFont>
    d11a:	|      lea 12(sp),sp
    d11e:	|      tst.w d0
    d120:	|  /-- bne.s d126 <builtIn_setFont+0xc4>
    d122:	|  |   moveq #1,d0
    d124:	+--|-- bra.s d13e <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    d126:	|  \-> move.l 16(sp),12(sp)
    d12c:	|      move.l 18bc0 <SysBase>,d0
    d132:	|      movea.l d0,a6
    d134:	|      movea.l 12(sp),a1
    d138:	|      jsr -690(a6)

    return BR_CONTINUE;
    d13c:	|      moveq #2,d0
}
    d13e:	\----> movea.l (sp)+,a6
    d140:	       lea 16(sp),sp
    d144:	       rts

0000d146 <builtIn_inFont>:

builtIn(inFont)
{
    d146:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    d148:	       movea.l 12(sp),a0
    d14c:	       move.l 24(a0),d0
    d150:	       move.l d0,-(sp)
    d152:	       jsr 11fd8 <getTextFromAnyVar>
    d158:	       addq.l #4,sp
    d15a:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    d15c:	   /-- bne.s d162 <builtIn_inFont+0x1c>
    d15e:	   |   moveq #1,d0
    d160:	/--|-- bra.s d198 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    d162:	|  \-> moveq #24,d0
    d164:	|      add.l 12(sp),d0
    d168:	|      move.l d0,-(sp)
    d16a:	|      jsr 12386 <trimStack>
    d170:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    d172:	|      move.l (sp),-(sp)
    d174:	|      jsr 123ce <isInFont>
    d17a:	|      addq.l #4,sp
    d17c:	|      movea.w d0,a0
    d17e:	|      moveq #28,d0
    d180:	|      add.l 12(sp),d0
    d184:	|      move.l a0,-(sp)
    d186:	|      pea 1 <_start+0x1>
    d18a:	|      move.l d0,-(sp)
    d18c:	|      jsr 122f4 <setVariable>
    d192:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d196:	|      moveq #2,d0
}
    d198:	\----> addq.l #4,sp
    d19a:	       rts

0000d19c <builtIn_pasteString>:

builtIn(pasteString)
{
    d19c:	       lea -16(sp),sp
    d1a0:	       move.l a6,-(sp)
    d1a2:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    d1a4:	       movea.l 32(sp),a0
    d1a8:	       move.l 24(a0),d0
    d1ac:	       move.l d0,-(sp)
    d1ae:	       jsr 11fd8 <getTextFromAnyVar>
    d1b4:	       addq.l #4,sp
    d1b6:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    d1ba:	       moveq #24,d0
    d1bc:	       add.l 32(sp),d0
    d1c0:	       move.l d0,-(sp)
    d1c2:	       jsr 12386 <trimStack>
    d1c8:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    d1ca:	       movea.l 32(sp),a0
    d1ce:	       move.l 24(a0),d0
    d1d2:	       move.l d0,-(sp)
    d1d4:	       pea 1 <_start+0x1>
    d1d8:	       lea 20(sp),a0
    d1dc:	       move.l a0,-(sp)
    d1de:	       jsr 11a02 <getValueType>
    d1e4:	       lea 12(sp),sp
    d1e8:	       tst.w d0
    d1ea:	   /-- bne.s d1f2 <builtIn_pasteString+0x56>
    d1ec:	   |   moveq #1,d0
    d1ee:	/--|-- bra.w d27a <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    d1f2:	|  \-> moveq #24,d0
    d1f4:	|      add.l 32(sp),d0
    d1f8:	|      move.l d0,-(sp)
    d1fa:	|      jsr 12386 <trimStack>
    d200:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    d202:	|      movea.l 32(sp),a0
    d206:	|      move.l 24(a0),d0
    d20a:	|      move.l d0,-(sp)
    d20c:	|      pea 1 <_start+0x1>
    d210:	|      lea 16(sp),a0
    d214:	|      move.l a0,-(sp)
    d216:	|      jsr 11a02 <getValueType>
    d21c:	|      lea 12(sp),sp
    d220:	|      tst.w d0
    d222:	|  /-- bne.s d228 <builtIn_pasteString+0x8c>
    d224:	|  |   moveq #1,d0
    d226:	+--|-- bra.s d27a <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    d228:	|  \-> moveq #24,d0
    d22a:	|      add.l 32(sp),d0
    d22e:	|      move.l d0,-(sp)
    d230:	|      jsr 12386 <trimStack>
    d236:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    d238:	|      move.l 8(sp),d0
    d23c:	|      cmpi.l #65535,d0
    d242:	|  /-- bne.s d262 <builtIn_pasteString+0xc6>
    d244:	|  |   move.l 18b14 <winWidth>,d2
    d24a:	|  |   move.l 20(sp),-(sp)
    d24e:	|  |   jsr 123e0 <stringWidth>
    d254:	|  |   addq.l #4,sp
    d256:	|  |   move.l d2,d1
    d258:	|  |   sub.l d0,d1
    d25a:	|  |   move.l d1,d0
    d25c:	|  |   lsr.l #1,d0
    d25e:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette);
    //pasteStringToBackdrop(newText, x, y, pastePalette); //Todo: Amigize this
    FreeVec(newText); 
    d262:	|  \-> move.l 20(sp),16(sp)
    d268:	|      move.l 18bc0 <SysBase>,d0
    d26e:	|      movea.l d0,a6
    d270:	|      movea.l 16(sp),a1
    d274:	|      jsr -690(a6)
    return BR_CONTINUE;
    d278:	|      moveq #2,d0
}
    d27a:	\----> move.l (sp)+,d2
    d27c:	       movea.l (sp)+,a6
    d27e:	       lea 16(sp),sp
    d282:	       rts

0000d284 <builtIn_anim>:

builtIn(anim)
{
    d284:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    d288:	       moveq #1,d0
    d28a:	       cmp.l 16(sp),d0
    d28e:	   /-- blt.s d2a4 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    d290:	   |   pea 15c64 <custom.c.36a9b171+0x106a>
    d296:	   |   jsr 13a4a <KPrintF>
    d29c:	   |   addq.l #4,sp
		return BR_ERROR;
    d29e:	   |   moveq #1,d0
    d2a0:	/--|-- bra.w d332 <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    d2a4:	|  \-> moveq #24,d1
    d2a6:	|      add.l 20(sp),d1
    d2aa:	|      move.l 16(sp),d0
    d2ae:	|      subq.l #1,d0
    d2b0:	|      move.l d1,-(sp)
    d2b2:	|      move.l d0,-(sp)
    d2b4:	|      jsr 6c6c <createPersonaAnim>
    d2ba:	|      addq.l #8,sp
    d2bc:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    d2c0:	|      movea.l 20(sp),a0
    d2c4:	|      move.l 24(a0),d0
    d2c8:	|      move.l d0,-(sp)
    d2ca:	|      pea 5 <_start+0x5>
    d2ce:	|      lea 8(sp),a0
    d2d2:	|      move.l a0,-(sp)
    d2d4:	|      jsr 11a02 <getValueType>
    d2da:	|      lea 12(sp),sp
    d2de:	|      tst.w d0
    d2e0:	|  /-- bne.s d2e6 <builtIn_anim+0x62>
    d2e2:	|  |   moveq #1,d0
    d2e4:	+--|-- bra.s d332 <builtIn_anim+0xae>
	trimStack (&fun -> stack);
    d2e6:	|  \-> moveq #24,d0
    d2e8:	|      add.l 20(sp),d0
    d2ec:	|      move.l d0,-(sp)
    d2ee:	|      jsr 12386 <trimStack>
    d2f4:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
    d2f6:	|      move.l (sp),d0
    d2f8:	|      move.l d0,-(sp)
    d2fa:	|      jsr 965a <loadBankForAnim>
    d300:	|      addq.l #4,sp
    d302:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
    d306:	|  /-- bne.s d30c <builtIn_anim+0x88>
    d308:	|  |   moveq #1,d0
    d30a:	+--|-- bra.s d332 <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
    d30c:	|  \-> move.l 4(sp),-(sp)
    d310:	|      move.l 12(sp),-(sp)
    d314:	|      jsr 8a0e <setBankFile>
    d31a:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
    d31c:	|      moveq #28,d0
    d31e:	|      add.l 20(sp),d0
    d322:	|      move.l 8(sp),-(sp)
    d326:	|      move.l d0,-(sp)
    d328:	|      jsr 122b0 <newAnimationVariable>
    d32e:	|      addq.l #8,sp
	return BR_CONTINUE;
    d330:	|      moveq #2,d0
}
    d332:	\----> lea 12(sp),sp
    d336:	       rts

0000d338 <builtIn_costume>:

builtIn(costume)
{
    d338:	          lea -32(sp),sp
    d33c:	          move.l a6,-(sp)
    d33e:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    d340:	          moveq #8,d0
    d342:	          move.l d0,32(sp)
    d346:	          clr.l 28(sp)
    d34a:	          move.l 18bc0 <SysBase>,d0
    d350:	          movea.l d0,a6
    d352:	          move.l 32(sp),d0
    d356:	          move.l 28(sp),d1
    d35a:	          jsr -684(a6)
    d35e:	          move.l d0,24(sp)
    d362:	          move.l 24(sp),d0
    d366:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    d36a:	      /-- bne.s d372 <builtIn_costume+0x3a>
    d36c:	      |   moveq #1,d0
    d36e:	/-----|-- bra.w d45a <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    d372:	|     \-> move.l 44(sp),d0
    d376:	|         pea 3 <_start+0x3>
    d37a:	|         move.l d0,-(sp)
    d37c:	|         jsr 14302 <__divsi3>
    d382:	|         addq.l #8,sp
    d384:	|         movea.l 20(sp),a0
    d388:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    d38c:	|         tst.l 44(sp)
    d390:	|     /-- beq.s d3a6 <builtIn_costume+0x6e>
    d392:	|     |   movea.l 20(sp),a0
    d396:	|     |   move.l 4(a0),d1
    d39a:	|     |   move.l d1,d0
    d39c:	|     |   add.l d0,d0
    d39e:	|     |   add.l d1,d0
    d3a0:	|     |   cmp.l 44(sp),d0
    d3a4:	|  /--|-- beq.s d3ba <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    d3a6:	|  |  \-> pea 15c9e <custom.c.36a9b171+0x10a4>
    d3ac:	|  |      jsr 13a4a <KPrintF>
    d3b2:	|  |      addq.l #4,sp
        return BR_ERROR;
    d3b4:	|  |      moveq #1,d0
    d3b6:	+--|----- bra.w d45a <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    d3ba:	|  \----> move.l 44(sp),d0
    d3be:	|         add.l d0,d0
    d3c0:	|         add.l d0,d0
    d3c2:	|         move.l d0,16(sp)
    d3c6:	|         clr.l 12(sp)
    d3ca:	|         move.l 18bc0 <SysBase>,d0
    d3d0:	|         movea.l d0,a6
    d3d2:	|         move.l 16(sp),d0
    d3d6:	|         move.l 12(sp),d1
    d3da:	|         jsr -684(a6)
    d3de:	|         move.l d0,8(sp)
    d3e2:	|         move.l 8(sp),d0
    d3e6:	|         movea.l 20(sp),a0
    d3ea:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    d3ec:	|         movea.l 20(sp),a0
    d3f0:	|         move.l (a0),d0
    d3f2:	|     /-- bne.s d3f8 <builtIn_costume+0xc0>
    d3f4:	|     |   moveq #1,d0
    d3f6:	+-----|-- bra.s d45a <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
    d3f8:	|     \-> move.l 44(sp),d0
    d3fc:	|         subq.l #1,d0
    d3fe:	|         move.l d0,36(sp)
    d402:	|     /-- bra.s d43e <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
    d404:	|  /--|-> movea.l 48(sp),a0
    d408:	|  |  |   move.l 24(a0),d0
    d40c:	|  |  |   movea.l 20(sp),a0
    d410:	|  |  |   movea.l (a0),a0
    d412:	|  |  |   move.l 36(sp),d1
    d416:	|  |  |   add.l d1,d1
    d418:	|  |  |   add.l d1,d1
    d41a:	|  |  |   lea (0,a0,d1.l),a2
    d41e:	|  |  |   move.l d0,-(sp)
    d420:	|  |  |   jsr 11eda <getAnimationFromVar>
    d426:	|  |  |   addq.l #4,sp
    d428:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
    d42a:	|  |  |   moveq #24,d0
    d42c:	|  |  |   add.l 48(sp),d0
    d430:	|  |  |   move.l d0,-(sp)
    d432:	|  |  |   jsr 12386 <trimStack>
    d438:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
    d43a:	|  |  |   subq.l #1,36(sp)
    d43e:	|  |  \-> tst.l 36(sp)
    d442:	|  \----- bge.s d404 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
    d444:	|         moveq #28,d0
    d446:	|         add.l 48(sp),d0
    d44a:	|         move.l 20(sp),-(sp)
    d44e:	|         move.l d0,-(sp)
    d450:	|         jsr 122d2 <newCostumeVariable>
    d456:	|         addq.l #8,sp
    return BR_CONTINUE;
    d458:	|         moveq #2,d0
}
    d45a:	\-------> movea.l (sp)+,a2
    d45c:	          movea.l (sp)+,a6
    d45e:	          lea 32(sp),sp
    d462:	          rts

0000d464 <builtIn_launch>:

builtIn(launch)
{
    d464:	          lea -20(sp),sp
    d468:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    d46a:	          movea.l 32(sp),a0
    d46e:	          move.l 24(a0),d0
    d472:	          move.l d0,-(sp)
    d474:	          jsr 11fd8 <getTextFromAnyVar>
    d47a:	          addq.l #4,sp
    d47c:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
    d480:	      /-- bne.s d488 <builtIn_launch+0x24>
    d482:	      |   moveq #1,d0
    d484:	/-----|-- bra.w d5b6 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
    d488:	|     \-> move.l 20(sp),-(sp)
    d48c:	|         jsr 2fe <encodeFilename>
    d492:	|         addq.l #4,sp
    d494:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
    d498:	|         moveq #24,d0
    d49a:	|         add.l 32(sp),d0
    d49e:	|         move.l d0,-(sp)
    d4a0:	|         jsr 12386 <trimStack>
    d4a6:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
    d4a8:	|         movea.l 20(sp),a0
    d4ac:	|         move.b (a0),d0
    d4ae:	|         cmpi.b #104,d0
    d4b2:	|  /----- bne.s d51c <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
    d4b4:	|  |      movea.l 20(sp),a0
    d4b8:	|  |      addq.l #1,a0
    d4ba:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
    d4bc:	|  |      cmpi.b #116,d0
    d4c0:	|  +----- bne.s d51c <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
    d4c2:	|  |      movea.l 20(sp),a0
    d4c6:	|  |      addq.l #2,a0
    d4c8:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
    d4ca:	|  |      cmpi.b #116,d0
    d4ce:	|  +----- bne.s d51c <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
    d4d0:	|  |      movea.l 20(sp),a0
    d4d4:	|  |      addq.l #3,a0
    d4d6:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
    d4d8:	|  |      cmpi.b #112,d0
    d4dc:	|  +----- bne.s d51c <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    d4de:	|  |      movea.l 20(sp),a0
    d4e2:	|  |      addq.l #4,a0
    d4e4:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
    d4e6:	|  |      cmpi.b #58,d0
    d4ea:	|  |  /-- beq.s d508 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    d4ec:	|  |  |   movea.l 20(sp),a0
    d4f0:	|  |  |   addq.l #4,a0
    d4f2:	|  |  |   move.b (a0),d0
    d4f4:	|  |  |   cmpi.b #115,d0
    d4f8:	|  +--|-- bne.s d51c <builtIn_launch+0xb8>
    d4fa:	|  |  |   movea.l 20(sp),a0
    d4fe:	|  |  |   addq.l #5,a0
    d500:	|  |  |   move.b (a0),d0
    d502:	|  |  |   cmpi.b #58,d0
    d506:	|  +--|-- bne.s d51c <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
    d508:	|  |  \-> move.l 20(sp),-(sp)
    d50c:	|  |      jsr b8 <copyString>
    d512:	|  |      addq.l #4,sp
    d514:	|  |      move.l d0,18cd6 <launchMe>
    d51a:	|  |  /-- bra.s d56e <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
    d51c:	|  \--|-> move.l 18b28 <gamePath>,d0
    d522:	|     |   pea 15ce9 <custom.c.36a9b171+0x10ef>
    d528:	|     |   move.l d0,-(sp)
    d52a:	|     |   jsr 10f2e <joinStrings>
    d530:	|     |   addq.l #8,sp
    d532:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
    d536:	|     |   move.l 16(sp),-(sp)
    d53a:	|     |   move.l 16(sp),-(sp)
    d53e:	|     |   jsr 10f2e <joinStrings>
    d544:	|     |   addq.l #8,sp
    d546:	|     |   move.l d0,18cd6 <launchMe>
        FreeVec(newText);
    d54c:	|     |   move.l 16(sp),8(sp)
    d552:	|     |   move.l 18bc0 <SysBase>,d0
    d558:	|     |   movea.l d0,a6
    d55a:	|     |   movea.l 8(sp),a1
    d55e:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
    d562:	|     |   move.l 18cd6 <launchMe>,d0
    d568:	|     +-- bne.s d56e <builtIn_launch+0x10a>
    d56a:	|     |   moveq #1,d0
    d56c:	+-----|-- bra.s d5b6 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
    d56e:	|     \-> move.l 20(sp),4(sp)
    d574:	|         move.l 18bc0 <SysBase>,d0
    d57a:	|         movea.l d0,a6
    d57c:	|         movea.l 4(sp),a1
    d580:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
    d584:	|         clr.l -(sp)
    d586:	|         jsr 1b90 <setGraphicsWindow>
    d58c:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
    d58e:	|         moveq #28,d0
    d590:	|         add.l 32(sp),d0
    d594:	|         pea 1 <_start+0x1>
    d598:	|         pea 1 <_start+0x1>
    d59c:	|         move.l d0,-(sp)
    d59e:	|         jsr 122f4 <setVariable>
    d5a4:	|         lea 12(sp),sp
    launchResult = &fun->reg;
    d5a8:	|         moveq #28,d0
    d5aa:	|         add.l 32(sp),d0
    d5ae:	|         move.l d0,18cda <launchResult>

    return BR_KEEP_AND_PAUSE;
    d5b4:	|         moveq #0,d0
}
    d5b6:	\-------> movea.l (sp)+,a6
    d5b8:	          lea 20(sp),sp
    d5bc:	          rts

0000d5be <builtIn_pause>:

builtIn(pause)
{
    d5be:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d5c0:	       movea.l 12(sp),a0
    d5c4:	       move.l 24(a0),d0
    d5c8:	       move.l d0,-(sp)
    d5ca:	       pea 1 <_start+0x1>
    d5ce:	       move.l sp,d0
    d5d0:	       addq.l #8,d0
    d5d2:	       move.l d0,-(sp)
    d5d4:	       jsr 11a02 <getValueType>
    d5da:	       lea 12(sp),sp
    d5de:	       tst.w d0
    d5e0:	   /-- bne.s d5e6 <builtIn_pause+0x28>
    d5e2:	   |   moveq #1,d0
    d5e4:	/--|-- bra.s d614 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
    d5e6:	|  \-> moveq #24,d0
    d5e8:	|      add.l 12(sp),d0
    d5ec:	|      move.l d0,-(sp)
    d5ee:	|      jsr 12386 <trimStack>
    d5f4:	|      addq.l #4,sp
	if (theTime > 0) {
    d5f6:	|      move.l (sp),d0
    d5f8:	|  /-- ble.s d612 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
    d5fa:	|  |   move.l (sp),d0
    d5fc:	|  |   subq.l #1,d0
    d5fe:	|  |   movea.l 12(sp),a0
    d602:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
    d606:	|  |   movea.l 12(sp),a0
    d60a:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
    d60e:	|  |   moveq #0,d0
    d610:	+--|-- bra.s d614 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
    d612:	|  \-> moveq #2,d0
}
    d614:	\----> addq.l #4,sp
    d616:	       rts

0000d618 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
    d618:	jsr 22e4 <completeTimers>
	return BR_CONTINUE;
    d61e:	moveq #2,d0
}
    d620:	rts

0000d622 <builtIn_callEvent>:

builtIn(callEvent)
{
    d622:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d626:	       movea.l 20(sp),a0
    d62a:	       move.l 24(a0),d0
    d62e:	       move.l d0,-(sp)
    d630:	       pea 7 <_start+0x7>
    d634:	       lea 8(sp),a0
    d638:	       move.l a0,-(sp)
    d63a:	       jsr 11a02 <getValueType>
    d640:	       lea 12(sp),sp
    d644:	       tst.w d0
    d646:	   /-- bne.s d64e <builtIn_callEvent+0x2c>
    d648:	   |   moveq #1,d0
    d64a:	/--|-- bra.w d6e4 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    d64e:	|  \-> moveq #24,d0
    d650:	|      add.l 20(sp),d0
    d654:	|      move.l d0,-(sp)
    d656:	|      jsr 12386 <trimStack>
    d65c:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d65e:	|      movea.l 20(sp),a0
    d662:	|      move.l 24(a0),d0
    d666:	|      move.l d0,-(sp)
    d668:	|      pea 7 <_start+0x7>
    d66c:	|      moveq #12,d0
    d66e:	|      add.l sp,d0
    d670:	|      move.l d0,-(sp)
    d672:	|      jsr 11a02 <getValueType>
    d678:	|      lea 12(sp),sp
    d67c:	|      tst.w d0
    d67e:	|  /-- bne.s d684 <builtIn_callEvent+0x62>
    d680:	|  |   moveq #1,d0
    d682:	+--|-- bra.s d6e4 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    d684:	|  \-> moveq #24,d0
    d686:	|      add.l 20(sp),d0
    d68a:	|      move.l d0,-(sp)
    d68c:	|      jsr 12386 <trimStack>
    d692:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    d694:	|      move.l (sp),d1
    d696:	|      move.l 4(sp),d0
    d69a:	|      move.l d1,-(sp)
    d69c:	|      move.l d0,-(sp)
    d69e:	|      jsr a86c <getCombinationFunction>
    d6a4:	|      addq.l #8,sp
    d6a6:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
    d6aa:	|  /-- beq.s d6ca <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    d6ac:	|  |   moveq #28,d0
    d6ae:	|  |   add.l 20(sp),d0
    d6b2:	|  |   move.l 8(sp),-(sp)
    d6b6:	|  |   pea 2 <_start+0x2>
    d6ba:	|  |   move.l d0,-(sp)
    d6bc:	|  |   jsr 122f4 <setVariable>
    d6c2:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
    d6c6:	|  |   moveq #4,d0
    d6c8:	+--|-- bra.s d6e4 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
    d6ca:	|  \-> moveq #28,d0
    d6cc:	|      add.l 20(sp),d0
    d6d0:	|      clr.l -(sp)
    d6d2:	|      pea 1 <_start+0x1>
    d6d6:	|      move.l d0,-(sp)
    d6d8:	|      jsr 122f4 <setVariable>
    d6de:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d6e2:	|      moveq #2,d0
}
    d6e4:	\----> lea 12(sp),sp
    d6e8:	       rts

0000d6ea <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
    d6ea:	move.w #1,18ce6 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
    d6f2:	moveq #2,d0
}
    d6f4:	rts

0000d6f6 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    d6f6:	moveq #24,d0
    d6f8:	add.l 8(sp),d0
    d6fc:	move.l d0,-(sp)
    d6fe:	jsr 12386 <trimStack>
    d704:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
    d706:	pea 15ceb <custom.c.36a9b171+0x10f1>
    d70c:	jsr 13a4a <KPrintF>
    d712:	addq.l #4,sp
	return BR_CONTINUE;
    d714:	moveq #2,d0
}
    d716:	rts

0000d718 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
    d718:	pea 15ceb <custom.c.36a9b171+0x10f1>
    d71e:	jsr 13a4a <KPrintF>
    d724:	addq.l #4,sp
	return BR_CONTINUE;
    d726:	moveq #2,d0
}
    d728:	rts

0000d72a <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
    d72a:	pea 15ceb <custom.c.36a9b171+0x10f1>
    d730:	jsr 13a4a <KPrintF>
    d736:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
    d738:	moveq #2,d0
}
    d73a:	rts

0000d73c <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
    d73c:	pea 15ceb <custom.c.36a9b171+0x10f1>
    d742:	jsr 13a4a <KPrintF>
    d748:	addq.l #4,sp
	return BR_CONTINUE;
    d74a:	moveq #2,d0
}
    d74c:	rts

0000d74e <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    d74e:	pea 15ceb <custom.c.36a9b171+0x10f1>
    d754:	jsr 13a4a <KPrintF>
    d75a:	addq.l #4,sp
	return BR_CONTINUE;
    d75c:	moveq #2,d0
}
    d75e:	rts

0000d760 <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    d760:	pea 15ceb <custom.c.36a9b171+0x10f1>
    d766:	jsr 13a4a <KPrintF>
    d76c:	addq.l #4,sp
	return BR_CONTINUE;
    d76e:	moveq #2,d0
}
    d770:	rts

0000d772 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
    d772:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d776:	       movea.l 20(sp),a0
    d77a:	       move.l 24(a0),d0
    d77e:	       move.l d0,-(sp)
    d780:	       pea 1 <_start+0x1>
    d784:	       moveq #16,d0
    d786:	       add.l sp,d0
    d788:	       move.l d0,-(sp)
    d78a:	       jsr 11a02 <getValueType>
    d790:	       lea 12(sp),sp
    d794:	       tst.w d0
    d796:	   /-- bne.s d79e <builtIn_startMusic+0x2c>
    d798:	   |   moveq #1,d0
    d79a:	/--|-- bra.w d83e <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    d79e:	|  \-> moveq #24,d0
    d7a0:	|      add.l 20(sp),d0
    d7a4:	|      move.l d0,-(sp)
    d7a6:	|      jsr 12386 <trimStack>
    d7ac:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d7ae:	|      movea.l 20(sp),a0
    d7b2:	|      move.l 24(a0),d0
    d7b6:	|      move.l d0,-(sp)
    d7b8:	|      pea 1 <_start+0x1>
    d7bc:	|      moveq #12,d0
    d7be:	|      add.l sp,d0
    d7c0:	|      move.l d0,-(sp)
    d7c2:	|      jsr 11a02 <getValueType>
    d7c8:	|      lea 12(sp),sp
    d7cc:	|      tst.w d0
    d7ce:	|  /-- bne.s d7d4 <builtIn_startMusic+0x62>
    d7d0:	|  |   moveq #1,d0
    d7d2:	+--|-- bra.s d83e <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    d7d4:	|  \-> moveq #24,d0
    d7d6:	|      add.l 20(sp),d0
    d7da:	|      move.l d0,-(sp)
    d7dc:	|      jsr 12386 <trimStack>
    d7e2:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    d7e4:	|      movea.l 20(sp),a0
    d7e8:	|      move.l 24(a0),d0
    d7ec:	|      move.l d0,-(sp)
    d7ee:	|      pea 5 <_start+0x5>
    d7f2:	|      lea 8(sp),a0
    d7f6:	|      move.l a0,-(sp)
    d7f8:	|      jsr 11a02 <getValueType>
    d7fe:	|      lea 12(sp),sp
    d802:	|      tst.w d0
    d804:	|  /-- bne.s d80a <builtIn_startMusic+0x98>
    d806:	|  |   moveq #1,d0
    d808:	+--|-- bra.s d83e <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    d80a:	|  \-> moveq #24,d0
    d80c:	|      add.l 20(sp),d0
    d810:	|      move.l d0,-(sp)
    d812:	|      jsr 12386 <trimStack>
    d818:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
    d81a:	|      movea.l 8(sp),a0
    d81e:	|      move.l 4(sp),d1
    d822:	|      move.l (sp),d0
    d824:	|      move.l a0,-(sp)
    d826:	|      move.l d1,-(sp)
    d828:	|      move.l d0,-(sp)
    d82a:	|      jsr a484 <playMOD>
    d830:	|      lea 12(sp),sp
    d834:	|      tst.w d0
    d836:	|  /-- bne.s d83c <builtIn_startMusic+0xca>
    d838:	|  |   moveq #2,d0
    d83a:	+--|-- bra.s d83e <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
    d83c:	|  \-> moveq #2,d0
}
    d83e:	\----> lea 12(sp),sp
    d842:	       rts

0000d844 <builtIn_stopMusic>:

builtIn(stopMusic)
{
    d844:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d846:	       movea.l 12(sp),a0
    d84a:	       move.l 24(a0),d0
    d84e:	       move.l d0,-(sp)
    d850:	       pea 1 <_start+0x1>
    d854:	       move.l sp,d0
    d856:	       addq.l #8,d0
    d858:	       move.l d0,-(sp)
    d85a:	       jsr 11a02 <getValueType>
    d860:	       lea 12(sp),sp
    d864:	       tst.w d0
    d866:	   /-- bne.s d86c <builtIn_stopMusic+0x28>
    d868:	   |   moveq #1,d0
    d86a:	/--|-- bra.s d88a <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
    d86c:	|  \-> moveq #24,d0
    d86e:	|      add.l 12(sp),d0
    d872:	|      move.l d0,-(sp)
    d874:	|      jsr 12386 <trimStack>
    d87a:	|      addq.l #4,sp
	stopMOD (v);
    d87c:	|      move.l (sp),d0
    d87e:	|      move.l d0,-(sp)
    d880:	|      jsr a520 <stopMOD>
    d886:	|      addq.l #4,sp
	return BR_CONTINUE;
    d888:	|      moveq #2,d0
}
    d88a:	\----> addq.l #4,sp
    d88c:	       rts

0000d88e <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
    d88e:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d890:	       movea.l 16(sp),a0
    d894:	       move.l 24(a0),d0
    d898:	       move.l d0,-(sp)
    d89a:	       pea 1 <_start+0x1>
    d89e:	       move.l sp,d0
    d8a0:	       addq.l #8,d0
    d8a2:	       move.l d0,-(sp)
    d8a4:	       jsr 11a02 <getValueType>
    d8aa:	       lea 12(sp),sp
    d8ae:	       tst.w d0
    d8b0:	   /-- bne.s d8b6 <builtIn_setMusicVolume+0x28>
    d8b2:	   |   moveq #1,d0
    d8b4:	/--|-- bra.s d910 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    d8b6:	|  \-> moveq #24,d0
    d8b8:	|      add.l 16(sp),d0
    d8bc:	|      move.l d0,-(sp)
    d8be:	|      jsr 12386 <trimStack>
    d8c4:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d8c6:	|      movea.l 16(sp),a0
    d8ca:	|      move.l 24(a0),d0
    d8ce:	|      move.l d0,-(sp)
    d8d0:	|      pea 1 <_start+0x1>
    d8d4:	|      moveq #12,d0
    d8d6:	|      add.l sp,d0
    d8d8:	|      move.l d0,-(sp)
    d8da:	|      jsr 11a02 <getValueType>
    d8e0:	|      lea 12(sp),sp
    d8e4:	|      tst.w d0
    d8e6:	|  /-- bne.s d8ec <builtIn_setMusicVolume+0x5e>
    d8e8:	|  |   moveq #1,d0
    d8ea:	+--|-- bra.s d910 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    d8ec:	|  \-> moveq #24,d0
    d8ee:	|      add.l 16(sp),d0
    d8f2:	|      move.l d0,-(sp)
    d8f4:	|      jsr 12386 <trimStack>
    d8fa:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
    d8fc:	|      move.l (sp),d1
    d8fe:	|      move.l 4(sp),d0
    d902:	|      move.l d1,-(sp)
    d904:	|      move.l d0,-(sp)
    d906:	|      jsr a506 <setMusicVolume>
    d90c:	|      addq.l #8,sp
	return BR_CONTINUE;
    d90e:	|      moveq #2,d0
}
    d910:	\----> addq.l #8,sp
    d912:	       rts

0000d914 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
    d914:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d916:	       movea.l 12(sp),a0
    d91a:	       move.l 24(a0),d0
    d91e:	       move.l d0,-(sp)
    d920:	       pea 1 <_start+0x1>
    d924:	       move.l sp,d0
    d926:	       addq.l #8,d0
    d928:	       move.l d0,-(sp)
    d92a:	       jsr 11a02 <getValueType>
    d930:	       lea 12(sp),sp
    d934:	       tst.w d0
    d936:	   /-- bne.s d93c <builtIn_setDefaultMusicVolume+0x28>
    d938:	   |   moveq #1,d0
    d93a:	/--|-- bra.s d95a <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
    d93c:	|  \-> moveq #24,d0
    d93e:	|      add.l 12(sp),d0
    d942:	|      move.l d0,-(sp)
    d944:	|      jsr 12386 <trimStack>
    d94a:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
    d94c:	|      move.l (sp),d0
    d94e:	|      move.l d0,-(sp)
    d950:	|      jsr a4ea <setDefaultMusicVolume>
    d956:	|      addq.l #4,sp
	return BR_CONTINUE;
    d958:	|      moveq #2,d0
}
    d95a:	\----> addq.l #4,sp
    d95c:	       rts

0000d95e <builtIn_playSound>:

builtIn(playSound)
{
    d95e:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    d960:	       movea.l 12(sp),a0
    d964:	       move.l 24(a0),d0
    d968:	       move.l d0,-(sp)
    d96a:	       pea 5 <_start+0x5>
    d96e:	       move.l sp,d0
    d970:	       addq.l #8,d0
    d972:	       move.l d0,-(sp)
    d974:	       jsr 11a02 <getValueType>
    d97a:	       lea 12(sp),sp
    d97e:	       tst.w d0
    d980:	   /-- bne.s d986 <builtIn_playSound+0x28>
    d982:	   |   moveq #1,d0
    d984:	/--|-- bra.s d9ae <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
    d986:	|  \-> moveq #24,d0
    d988:	|      add.l 12(sp),d0
    d98c:	|      move.l d0,-(sp)
    d98e:	|      jsr 12386 <trimStack>
    d994:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
    d996:	|      move.l (sp),d0
    d998:	|      clr.l -(sp)
    d99a:	|      move.l d0,-(sp)
    d99c:	|      jsr a50e <startSound>
    d9a2:	|      addq.l #8,sp
    d9a4:	|      tst.w d0
    d9a6:	|  /-- bne.s d9ac <builtIn_playSound+0x4e>
    d9a8:	|  |   moveq #2,d0
    d9aa:	+--|-- bra.s d9ae <builtIn_playSound+0x50>
	return BR_CONTINUE;
    d9ac:	|  \-> moveq #2,d0
}
    d9ae:	\----> addq.l #4,sp
    d9b0:	       rts

0000d9b2 <builtIn_loopSound>:

builtIn(loopSound)
{
    d9b2:	             lea -28(sp),sp
    d9b6:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
    d9b8:	             tst.l 36(sp)
    d9bc:	         /-- bgt.s d9d2 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
    d9be:	         |   pea 15d0e <custom.c.36a9b171+0x1114>
    d9c4:	         |   jsr 13a4a <KPrintF>
    d9ca:	         |   addq.l #4,sp
		return BR_ERROR;
    d9cc:	         |   moveq #1,d0
    d9ce:	/--------|-- bra.w db8e <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
    d9d2:	|        \-> moveq #1,d0
    d9d4:	|            cmp.l 36(sp),d0
    d9d8:	|     /----- blt.s da34 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    d9da:	|     |      movea.l 40(sp),a0
    d9de:	|     |      move.l 24(a0),d0
    d9e2:	|     |      move.l d0,-(sp)
    d9e4:	|     |      pea 5 <_start+0x5>
    d9e8:	|     |      lea 16(sp),a0
    d9ec:	|     |      move.l a0,-(sp)
    d9ee:	|     |      jsr 11a02 <getValueType>
    d9f4:	|     |      lea 12(sp),sp
    d9f8:	|     |      tst.w d0
    d9fa:	|     |  /-- bne.s da02 <builtIn_loopSound+0x50>
    d9fc:	|     |  |   moveq #1,d0
    d9fe:	+-----|--|-- bra.w db8e <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
    da02:	|     |  \-> moveq #24,d0
    da04:	|     |      add.l 40(sp),d0
    da08:	|     |      move.l d0,-(sp)
    da0a:	|     |      jsr 12386 <trimStack>
    da10:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
    da12:	|     |      move.l 8(sp),d0
    da16:	|     |      pea 1 <_start+0x1>
    da1a:	|     |      move.l d0,-(sp)
    da1c:	|     |      jsr a50e <startSound>
    da22:	|     |      addq.l #8,sp
    da24:	|     |      tst.w d0
    da26:	|     |  /-- bne.s da2e <builtIn_loopSound+0x7c>
    da28:	|     |  |   moveq #2,d0
    da2a:	+-----|--|-- bra.w db8e <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
    da2e:	|     |  \-> moveq #2,d0
    da30:	+-----|----- bra.w db8e <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
    da34:	|     \----> moveq #2,d1
    da36:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
    da3a:	|            clr.l 28(sp)
		struct soundList *old = NULL;
    da3e:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
    da42:	|            movea.l 40(sp),a0
    da46:	|            movea.l 24(a0),a0
    da4a:	|            move.l (a0),d0
    da4c:	|            moveq #5,d1
    da4e:	|            cmp.l d0,d1
    da50:	|  /-------- beq.w db28 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
    da54:	|  |         movea.l 40(sp),a0
    da58:	|  |         move.l 24(a0),d0
    da5c:	|  |         move.l d0,-(sp)
    da5e:	|  |         pea 1 <_start+0x1>
    da62:	|  |         lea 12(sp),a0
    da66:	|  |         move.l a0,-(sp)
    da68:	|  |         jsr 11a02 <getValueType>
    da6e:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
    da72:	|  |         moveq #24,d0
    da74:	|  |         add.l 40(sp),d0
    da78:	|  |         move.l d0,-(sp)
    da7a:	|  |         jsr 12386 <trimStack>
    da80:	|  |         addq.l #4,sp
			numParams--;
    da82:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
    da86:	|  +-------- bra.w db28 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
    da8a:	|  |  /----> movea.l 40(sp),a0
    da8e:	|  |  |      move.l 24(a0),d0
    da92:	|  |  |      move.l d0,-(sp)
    da94:	|  |  |      pea 5 <_start+0x5>
    da98:	|  |  |      lea 16(sp),a0
    da9c:	|  |  |      move.l a0,-(sp)
    da9e:	|  |  |      jsr 11a02 <getValueType>
    daa4:	|  |  |      lea 12(sp),sp
    daa8:	|  |  |      tst.w d0
    daaa:	|  |  |  /-- bne.s dac0 <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
    daac:	|  |  |  |   pea 15d4c <custom.c.36a9b171+0x1152>
    dab2:	|  |  |  |   jsr 13a4a <KPrintF>
    dab8:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
    daba:	|  |  |  |   moveq #1,d0
    dabc:	+--|--|--|-- bra.w db8e <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
    dac0:	|  |  |  \-> moveq #20,d0
    dac2:	|  |  |      move.l d0,20(sp)
    dac6:	|  |  |      clr.l 16(sp)
    daca:	|  |  |      move.l 18bc0 <SysBase>,d0
    dad0:	|  |  |      movea.l d0,a6
    dad2:	|  |  |      move.l 20(sp),d0
    dad6:	|  |  |      move.l 16(sp),d1
    dada:	|  |  |      jsr -684(a6)
    dade:	|  |  |      move.l d0,12(sp)
    dae2:	|  |  |      move.l 12(sp),d0
    dae6:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
    daea:	|  |  |  /-- bne.s daf2 <builtIn_loopSound+0x140>
    daec:	|  |  |  |   moveq #1,d0
    daee:	+--|--|--|-- bra.w db8e <builtIn_loopSound+0x1dc>

			s->next = old;
    daf2:	|  |  |  \-> movea.l 28(sp),a0
    daf6:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
    dafc:	|  |  |      movea.l 28(sp),a0
    db00:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
    db04:	|  |  |      move.l 8(sp),d0
    db08:	|  |  |      movea.l 28(sp),a0
    db0c:	|  |  |      move.l d0,(a0)
			old = s;
    db0e:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
    db14:	|  |  |      moveq #24,d0
    db16:	|  |  |      add.l 40(sp),d0
    db1a:	|  |  |      move.l d0,-(sp)
    db1c:	|  |  |      jsr 12386 <trimStack>
    db22:	|  |  |      addq.l #4,sp
			numParams--;
    db24:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
    db28:	|  \--|----> tst.l 36(sp)
    db2c:	|     \----- bne.w da8a <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
    db30:	|        /-- bra.s db3c <builtIn_loopSound+0x18a>
    db32:	|     /--|-> movea.l 28(sp),a0
    db36:	|     |  |   move.l 4(a0),28(sp)
    db3c:	|     |  \-> movea.l 28(sp),a0
    db40:	|     |      move.l 4(a0),d0
    db44:	|     \----- bne.s db32 <builtIn_loopSound+0x180>
		if (doLoop > 1) {
    db46:	|            move.l 4(sp),d0
    db4a:	|            moveq #1,d1
    db4c:	|            cmp.l d0,d1
    db4e:	|     /----- bge.s db66 <builtIn_loopSound+0x1b4>
			s->next = old;
    db50:	|     |      movea.l 28(sp),a0
    db54:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
    db5a:	|     |      movea.l 24(sp),a0
    db5e:	|     |      move.l 28(sp),8(a0)
    db64:	|     |  /-- bra.s db76 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
    db66:	|     \--|-> move.l 4(sp),d0
    db6a:	|        +-- beq.s db76 <builtIn_loopSound+0x1c4>
			s->next = s;
    db6c:	|        |   movea.l 28(sp),a0
    db70:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
    db76:	|        \-> movea.l 24(sp),a0
    db7a:	|            moveq #-1,d0
    db7c:	|            move.l d0,16(a0)
		playSoundList(old);
    db80:	|            move.l 24(sp),-(sp)
    db84:	|            jsr a488 <playSoundList>
    db8a:	|            addq.l #4,sp
		return BR_CONTINUE;
    db8c:	|            moveq #2,d0
	}
}
    db8e:	\----------> movea.l (sp)+,a6
    db90:	             lea 28(sp),sp
    db94:	             rts

0000db96 <builtIn_stopSound>:

builtIn(stopSound)
{
    db96:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    db98:	       movea.l 12(sp),a0
    db9c:	       move.l 24(a0),d0
    dba0:	       move.l d0,-(sp)
    dba2:	       pea 5 <_start+0x5>
    dba6:	       move.l sp,d0
    dba8:	       addq.l #8,d0
    dbaa:	       move.l d0,-(sp)
    dbac:	       jsr 11a02 <getValueType>
    dbb2:	       lea 12(sp),sp
    dbb6:	       tst.w d0
    dbb8:	   /-- bne.s dbbe <builtIn_stopSound+0x28>
    dbba:	   |   moveq #1,d0
    dbbc:	/--|-- bra.s dbdc <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
    dbbe:	|  \-> moveq #24,d0
    dbc0:	|      add.l 12(sp),d0
    dbc4:	|      move.l d0,-(sp)
    dbc6:	|      jsr 12386 <trimStack>
    dbcc:	|      addq.l #4,sp
	huntKillSound (v);
    dbce:	|      move.l (sp),d0
    dbd0:	|      move.l d0,-(sp)
    dbd2:	|      jsr a480 <huntKillSound>
    dbd8:	|      addq.l #4,sp
	return BR_CONTINUE;
    dbda:	|      moveq #2,d0
}
    dbdc:	\----> addq.l #4,sp
    dbde:	       rts

0000dbe0 <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
    dbe0:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dbe2:	       movea.l 12(sp),a0
    dbe6:	       move.l 24(a0),d0
    dbea:	       move.l d0,-(sp)
    dbec:	       pea 1 <_start+0x1>
    dbf0:	       move.l sp,d0
    dbf2:	       addq.l #8,d0
    dbf4:	       move.l d0,-(sp)
    dbf6:	       jsr 11a02 <getValueType>
    dbfc:	       lea 12(sp),sp
    dc00:	       tst.w d0
    dc02:	   /-- bne.s dc08 <builtIn_setDefaultSoundVolume+0x28>
    dc04:	   |   moveq #1,d0
    dc06:	/--|-- bra.s dc26 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
    dc08:	|  \-> moveq #24,d0
    dc0a:	|      add.l 12(sp),d0
    dc0e:	|      move.l d0,-(sp)
    dc10:	|      jsr 12386 <trimStack>
    dc16:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
    dc18:	|      move.l (sp),d0
    dc1a:	|      move.l d0,-(sp)
    dc1c:	|      jsr a4f6 <setDefaultSoundVolume>
    dc22:	|      addq.l #4,sp
	return BR_CONTINUE;
    dc24:	|      moveq #2,d0
}
    dc26:	\----> addq.l #4,sp
    dc28:	       rts

0000dc2a <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
    dc2a:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dc2c:	       movea.l 16(sp),a0
    dc30:	       move.l 24(a0),d0
    dc34:	       move.l d0,-(sp)
    dc36:	       pea 1 <_start+0x1>
    dc3a:	       move.l sp,d0
    dc3c:	       addq.l #8,d0
    dc3e:	       move.l d0,-(sp)
    dc40:	       jsr 11a02 <getValueType>
    dc46:	       lea 12(sp),sp
    dc4a:	       tst.w d0
    dc4c:	   /-- bne.s dc52 <builtIn_setSoundVolume+0x28>
    dc4e:	   |   moveq #1,d0
    dc50:	/--|-- bra.s dcac <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    dc52:	|  \-> moveq #24,d0
    dc54:	|      add.l 16(sp),d0
    dc58:	|      move.l d0,-(sp)
    dc5a:	|      jsr 12386 <trimStack>
    dc60:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    dc62:	|      movea.l 16(sp),a0
    dc66:	|      move.l 24(a0),d0
    dc6a:	|      move.l d0,-(sp)
    dc6c:	|      pea 5 <_start+0x5>
    dc70:	|      moveq #12,d0
    dc72:	|      add.l sp,d0
    dc74:	|      move.l d0,-(sp)
    dc76:	|      jsr 11a02 <getValueType>
    dc7c:	|      lea 12(sp),sp
    dc80:	|      tst.w d0
    dc82:	|  /-- bne.s dc88 <builtIn_setSoundVolume+0x5e>
    dc84:	|  |   moveq #1,d0
    dc86:	+--|-- bra.s dcac <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    dc88:	|  \-> moveq #24,d0
    dc8a:	|      add.l 16(sp),d0
    dc8e:	|      move.l d0,-(sp)
    dc90:	|      jsr 12386 <trimStack>
    dc96:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
    dc98:	|      move.l (sp),d1
    dc9a:	|      move.l 4(sp),d0
    dc9e:	|      move.l d1,-(sp)
    dca0:	|      move.l d0,-(sp)
    dca2:	|      jsr a50a <setSoundVolume>
    dca8:	|      addq.l #8,sp
	return BR_CONTINUE;
    dcaa:	|      moveq #2,d0
}
    dcac:	\----> addq.l #8,sp
    dcae:	       rts

0000dcb0 <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
    dcb0:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dcb4:	       movea.l 20(sp),a0
    dcb8:	       move.l 24(a0),d0
    dcbc:	       move.l d0,-(sp)
    dcbe:	       pea 1 <_start+0x1>
    dcc2:	       moveq #12,d0
    dcc4:	       add.l sp,d0
    dcc6:	       move.l d0,-(sp)
    dcc8:	       jsr 11a02 <getValueType>
    dcce:	       lea 12(sp),sp
    dcd2:	       tst.w d0
    dcd4:	   /-- bne.s dcdc <builtIn_setSoundLoopPoints+0x2c>
    dcd6:	   |   moveq #1,d0
    dcd8:	/--|-- bra.w dd74 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    dcdc:	|  \-> moveq #24,d0
    dcde:	|      add.l 20(sp),d0
    dce2:	|      move.l d0,-(sp)
    dce4:	|      jsr 12386 <trimStack>
    dcea:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dcec:	|      movea.l 20(sp),a0
    dcf0:	|      move.l 24(a0),d0
    dcf4:	|      move.l d0,-(sp)
    dcf6:	|      pea 1 <_start+0x1>
    dcfa:	|      lea 8(sp),a0
    dcfe:	|      move.l a0,-(sp)
    dd00:	|      jsr 11a02 <getValueType>
    dd06:	|      lea 12(sp),sp
    dd0a:	|      tst.w d0
    dd0c:	|  /-- bne.s dd12 <builtIn_setSoundLoopPoints+0x62>
    dd0e:	|  |   moveq #1,d0
    dd10:	+--|-- bra.s dd74 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    dd12:	|  \-> moveq #24,d0
    dd14:	|      add.l 20(sp),d0
    dd18:	|      move.l d0,-(sp)
    dd1a:	|      jsr 12386 <trimStack>
    dd20:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    dd22:	|      movea.l 20(sp),a0
    dd26:	|      move.l 24(a0),d0
    dd2a:	|      move.l d0,-(sp)
    dd2c:	|      pea 5 <_start+0x5>
    dd30:	|      moveq #16,d0
    dd32:	|      add.l sp,d0
    dd34:	|      move.l d0,-(sp)
    dd36:	|      jsr 11a02 <getValueType>
    dd3c:	|      lea 12(sp),sp
    dd40:	|      tst.w d0
    dd42:	|  /-- bne.s dd48 <builtIn_setSoundLoopPoints+0x98>
    dd44:	|  |   moveq #1,d0
    dd46:	+--|-- bra.s dd74 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    dd48:	|  \-> moveq #24,d0
    dd4a:	|      add.l 20(sp),d0
    dd4e:	|      move.l d0,-(sp)
    dd50:	|      jsr 12386 <trimStack>
    dd56:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
    dd58:	|      movea.l 4(sp),a0
    dd5c:	|      move.l (sp),d1
    dd5e:	|      move.l 8(sp),d0
    dd62:	|      move.l a0,-(sp)
    dd64:	|      move.l d1,-(sp)
    dd66:	|      move.l d0,-(sp)
    dd68:	|      jsr a502 <setSoundLoop>
    dd6e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    dd72:	|      moveq #2,d0
}
    dd74:	\----> lea 12(sp),sp
    dd78:	       rts

0000dd7a <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
    dd7a:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    dd7c:	          movea.l 12(sp),a0
    dd80:	          movea.l 24(a0),a0
    dd84:	          move.l (a0),d0
    dd86:	          moveq #5,d1
    dd88:	          cmp.l d0,d1
    dd8a:	/-------- bne.s ddce <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    dd8c:	|         movea.l 12(sp),a0
    dd90:	|         move.l 24(a0),d0
    dd94:	|         move.l d0,-(sp)
    dd96:	|         pea 5 <_start+0x5>
    dd9a:	|         move.l sp,d0
    dd9c:	|         addq.l #8,d0
    dd9e:	|         move.l d0,-(sp)
    dda0:	|         jsr 11a02 <getValueType>
    dda6:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    ddaa:	|         moveq #24,d0
    ddac:	|         add.l 12(sp),d0
    ddb0:	|         move.l d0,-(sp)
    ddb2:	|         jsr 12386 <trimStack>
    ddb8:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
    ddba:	|         move.l (sp),d0
    ddbc:	|         move.l d0,-(sp)
    ddbe:	|         jsr 131f4 <setFloor>
    ddc4:	|         addq.l #4,sp
    ddc6:	|         tst.w d0
    ddc8:	|  /----- bne.s dde4 <builtIn_setFloor+0x6a>
    ddca:	|  |      moveq #1,d0
    ddcc:	|  |  /-- bra.s dde6 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
    ddce:	\--|--|-> moveq #24,d0
    ddd0:	   |  |   add.l 12(sp),d0
    ddd4:	   |  |   move.l d0,-(sp)
    ddd6:	   |  |   jsr 12386 <trimStack>
    dddc:	   |  |   addq.l #4,sp
		setFloorNull ();
    ddde:	   |  |   jsr 1396e <setFloorNull>
	}
	return BR_CONTINUE;
    dde4:	   \--|-> moveq #2,d0
}
    dde6:	      \-> addq.l #4,sp
    dde8:	          rts

0000ddea <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
    ddea:	jsr 12a8c <drawFloor>
	return BR_CONTINUE;
    ddf0:	moveq #2,d0
}
    ddf2:	rts

0000ddf4 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
    ddf4:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    ddf6:	          movea.l 12(sp),a0
    ddfa:	          movea.l 24(a0),a0
    ddfe:	          move.l (a0),d0
    de00:	          moveq #5,d1
    de02:	          cmp.l d0,d1
    de04:	/-------- bne.s de48 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    de06:	|         movea.l 12(sp),a0
    de0a:	|         move.l 24(a0),d0
    de0e:	|         move.l d0,-(sp)
    de10:	|         pea 5 <_start+0x5>
    de14:	|         move.l sp,d0
    de16:	|         addq.l #8,d0
    de18:	|         move.l d0,-(sp)
    de1a:	|         jsr 11a02 <getValueType>
    de20:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    de24:	|         moveq #24,d0
    de26:	|         add.l 12(sp),d0
    de2a:	|         move.l d0,-(sp)
    de2c:	|         jsr 12386 <trimStack>
    de32:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
    de34:	|         move.l (sp),d0
    de36:	|         move.l d0,-(sp)
    de38:	|         jsr 5f40 <setZBuffer>
    de3e:	|         addq.l #4,sp
    de40:	|         tst.w d0
    de42:	|  /----- bne.s de5e <builtIn_setZBuffer+0x6a>
    de44:	|  |      moveq #1,d0
    de46:	|  |  /-- bra.s de60 <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
    de48:	\--|--|-> moveq #24,d0
    de4a:	   |  |   add.l 12(sp),d0
    de4e:	   |  |   move.l d0,-(sp)
    de50:	   |  |   jsr 12386 <trimStack>
    de56:	   |  |   addq.l #4,sp
		killZBuffer ();
    de58:	   |  |   jsr 5eea <killZBuffer>
	}
	return BR_CONTINUE;
    de5e:	   \--|-> moveq #2,d0
}
    de60:	      \-> addq.l #4,sp
    de62:	          rts

0000de64 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
    de64:	pea 15d83 <custom.c.36a9b171+0x1189>
    de6a:	jsr 13a4a <KPrintF>
    de70:	addq.l #4,sp
	return BR_CONTINUE;
    de72:	moveq #2,d0
}
    de74:	rts

0000de76 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    de76:	          movea.l 8(sp),a0
    de7a:	          move.l 24(a0),d0
    de7e:	          move.l d0,-(sp)
    de80:	          pea 1 <_start+0x1>
    de84:	          pea 18ce2 <speechMode>
    de8a:	          jsr 11a02 <getValueType>
    de90:	          lea 12(sp),sp
    de94:	          tst.w d0
    de96:	      /-- bne.s de9c <builtIn_setSpeechMode+0x26>
    de98:	      |   moveq #1,d0
    de9a:	/-----|-- bra.s ded4 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
    de9c:	|     \-> moveq #24,d0
    de9e:	|         add.l 8(sp),d0
    dea2:	|         move.l d0,-(sp)
    dea4:	|         jsr 12386 <trimStack>
    deaa:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
    deac:	|         move.l 18ce2 <speechMode>,d0
    deb2:	|     /-- bmi.s dec0 <builtIn_setSpeechMode+0x4a>
    deb4:	|     |   move.l 18ce2 <speechMode>,d0
    deba:	|     |   moveq #2,d1
    debc:	|     |   cmp.l d0,d1
    debe:	|  /--|-- bge.s ded2 <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
    dec0:	|  |  \-> pea 15d9c <custom.c.36a9b171+0x11a2>
    dec6:	|  |      jsr 13a4a <KPrintF>
    decc:	|  |      addq.l #4,sp
		return BR_ERROR;
    dece:	|  |      moveq #1,d0
    ded0:	+--|----- bra.s ded4 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
    ded2:	|  \----> moveq #2,d0
}
    ded4:	\-------> rts

0000ded6 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
    ded6:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
    ded8:	       jsr 56f2 <isThereAnySpeechGoingOn>
    dede:	       move.l d0,(sp)
	if (i == -1) {
    dee0:	       moveq #-1,d0
    dee2:	       cmp.l (sp),d0
    dee4:	/----- bne.s df00 <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
    dee6:	|      moveq #28,d0
    dee8:	|      add.l 12(sp),d0
    deec:	|      clr.l -(sp)
    deee:	|      pea 1 <_start+0x1>
    def2:	|      move.l d0,-(sp)
    def4:	|      jsr 122f4 <setVariable>
    defa:	|      lea 12(sp),sp
    defe:	|  /-- bra.s df18 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
    df00:	\--|-> moveq #28,d0
    df02:	   |   add.l 12(sp),d0
    df06:	   |   move.l (sp),-(sp)
    df08:	   |   pea 7 <_start+0x7>
    df0c:	   |   move.l d0,-(sp)
    df0e:	   |   jsr 122f4 <setVariable>
    df14:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    df18:	   \-> moveq #2,d0
}
    df1a:	       addq.l #4,sp
    df1c:	       rts

0000df1e <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
    df1e:	jsr 3a22 <killSpeechTimers>
	return BR_CONTINUE;
    df24:	moveq #2,d0
}
    df26:	rts

0000df28 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
    df28:	       move.l 18d1c <overRegion>,d0
    df2e:	/----- beq.s df58 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    df30:	|      movea.l 18d1c <overRegion>,a0
    df36:	|      movea.l 28(a0),a0
    df3a:	|      move.l 4(a0),d1
    df3e:	|      moveq #28,d0
    df40:	|      add.l 8(sp),d0
    df44:	|      move.l d1,-(sp)
    df46:	|      pea 7 <_start+0x7>
    df4a:	|      move.l d0,-(sp)
    df4c:	|      jsr 122f4 <setVariable>
    df52:	|      lea 12(sp),sp
    df56:	|  /-- bra.s df70 <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
    df58:	\--|-> moveq #28,d0
    df5a:	   |   add.l 8(sp),d0
    df5e:	   |   clr.l -(sp)
    df60:	   |   pea 1 <_start+0x1>
    df64:	   |   move.l d0,-(sp)
    df66:	   |   jsr 122f4 <setVariable>
    df6c:	   |   lea 12(sp),sp
	return BR_CONTINUE;
    df70:	   \-> moveq #2,d0
}
    df72:	       rts

0000df74 <builtIn_rename>:

builtIn(rename)
{
    df74:	       lea -16(sp),sp
    df78:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    df7a:	       movea.l 28(sp),a0
    df7e:	       move.l 24(a0),d0
    df82:	       move.l d0,-(sp)
    df84:	       jsr 11fd8 <getTextFromAnyVar>
    df8a:	       addq.l #4,sp
    df8c:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
    df90:	   /-- bne.s df96 <builtIn_rename+0x22>
    df92:	   |   moveq #1,d0
    df94:	/--|-- bra.s e010 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    df96:	|  \-> moveq #24,d0
    df98:	|      add.l 28(sp),d0
    df9c:	|      move.l d0,-(sp)
    df9e:	|      jsr 12386 <trimStack>
    dfa4:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
    dfa6:	|      movea.l 28(sp),a0
    dfaa:	|      move.l 24(a0),d0
    dfae:	|      move.l d0,-(sp)
    dfb0:	|      pea 7 <_start+0x7>
    dfb4:	|      lea 12(sp),a0
    dfb8:	|      move.l a0,-(sp)
    dfba:	|      jsr 11a02 <getValueType>
    dfc0:	|      lea 12(sp),sp
    dfc4:	|      tst.w d0
    dfc6:	|  /-- bne.s dfcc <builtIn_rename+0x58>
    dfc8:	|  |   moveq #1,d0
    dfca:	+--|-- bra.s e010 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    dfcc:	|  \-> moveq #24,d0
    dfce:	|      add.l 28(sp),d0
    dfd2:	|      move.l d0,-(sp)
    dfd4:	|      jsr 12386 <trimStack>
    dfda:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
    dfdc:	|      move.l 4(sp),d0
    dfe0:	|      move.l d0,-(sp)
    dfe2:	|      jsr a838 <findObjectType>
    dfe8:	|      addq.l #4,sp
    dfea:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
    dfee:	|      movea.l 12(sp),a0
    dff2:	|      move.l (a0),8(sp)
    dff6:	|      move.l 18bc0 <SysBase>,d0
    dffc:	|      movea.l d0,a6
    dffe:	|      movea.l 8(sp),a1
    e002:	|      jsr -690(a6)
	o->screenName = newText;
    e006:	|      movea.l 12(sp),a0
    e00a:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
    e00e:	|      moveq #2,d0
}
    e010:	\----> movea.l (sp)+,a6
    e012:	       lea 16(sp),sp
    e016:	       rts

0000e018 <builtIn_getObjectX>:

builtIn (getObjectX)
{
    e018:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e01c:	          movea.l 20(sp),a0
    e020:	          move.l 24(a0),d0
    e024:	          move.l d0,-(sp)
    e026:	          pea 7 <_start+0x7>
    e02a:	          lea 8(sp),a0
    e02e:	          move.l a0,-(sp)
    e030:	          jsr 11a02 <getValueType>
    e036:	          lea 12(sp),sp
    e03a:	          tst.w d0
    e03c:	      /-- bne.s e044 <builtIn_getObjectX+0x2c>
    e03e:	      |   moveq #1,d0
    e040:	/-----|-- bra.w e0e0 <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
    e044:	|     \-> moveq #24,d0
    e046:	|         add.l 20(sp),d0
    e04a:	|         move.l d0,-(sp)
    e04c:	|         jsr 12386 <trimStack>
    e052:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    e054:	|         move.l (sp),d0
    e056:	|         move.l d0,-(sp)
    e058:	|         jsr 7aec <findPerson>
    e05e:	|         addq.l #4,sp
    e060:	|         move.l d0,8(sp)
	if (pers) {
    e064:	|     /-- beq.s e092 <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
    e066:	|     |   movea.l 8(sp),a0
    e06a:	|     |   move.l (a0),d0
    e06c:	|     |   move.l d0,-(sp)
    e06e:	|     |   jsr 13c9a <__fixsfsi>
    e074:	|     |   addq.l #4,sp
    e076:	|     |   move.l d0,d1
    e078:	|     |   moveq #28,d0
    e07a:	|     |   add.l 20(sp),d0
    e07e:	|     |   move.l d1,-(sp)
    e080:	|     |   pea 1 <_start+0x1>
    e084:	|     |   move.l d0,-(sp)
    e086:	|     |   jsr 122f4 <setVariable>
    e08c:	|     |   lea 12(sp),sp
    e090:	|  /--|-- bra.s e0de <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    e092:	|  |  \-> move.l (sp),d0
    e094:	|  |      move.l d0,-(sp)
    e096:	|  |      jsr 124cc <getRegionForObject>
    e09c:	|  |      addq.l #4,sp
    e09e:	|  |      move.l d0,4(sp)
		if (la) {
    e0a2:	|  |  /-- beq.s e0c6 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
    e0a4:	|  |  |   movea.l 4(sp),a0
    e0a8:	|  |  |   move.l 16(a0),d1
    e0ac:	|  |  |   moveq #28,d0
    e0ae:	|  |  |   add.l 20(sp),d0
    e0b2:	|  |  |   move.l d1,-(sp)
    e0b4:	|  |  |   pea 1 <_start+0x1>
    e0b8:	|  |  |   move.l d0,-(sp)
    e0ba:	|  |  |   jsr 122f4 <setVariable>
    e0c0:	|  |  |   lea 12(sp),sp
    e0c4:	|  +--|-- bra.s e0de <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    e0c6:	|  |  \-> moveq #28,d0
    e0c8:	|  |      add.l 20(sp),d0
    e0cc:	|  |      clr.l -(sp)
    e0ce:	|  |      pea 1 <_start+0x1>
    e0d2:	|  |      move.l d0,-(sp)
    e0d4:	|  |      jsr 122f4 <setVariable>
    e0da:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    e0de:	|  \----> moveq #2,d0
}
    e0e0:	\-------> lea 12(sp),sp
    e0e4:	          rts

0000e0e6 <builtIn_getObjectY>:

builtIn (getObjectY)
{
    e0e6:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e0ea:	          movea.l 20(sp),a0
    e0ee:	          move.l 24(a0),d0
    e0f2:	          move.l d0,-(sp)
    e0f4:	          pea 7 <_start+0x7>
    e0f8:	          lea 8(sp),a0
    e0fc:	          move.l a0,-(sp)
    e0fe:	          jsr 11a02 <getValueType>
    e104:	          lea 12(sp),sp
    e108:	          tst.w d0
    e10a:	      /-- bne.s e112 <builtIn_getObjectY+0x2c>
    e10c:	      |   moveq #1,d0
    e10e:	/-----|-- bra.w e1b0 <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
    e112:	|     \-> moveq #24,d0
    e114:	|         add.l 20(sp),d0
    e118:	|         move.l d0,-(sp)
    e11a:	|         jsr 12386 <trimStack>
    e120:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    e122:	|         move.l (sp),d0
    e124:	|         move.l d0,-(sp)
    e126:	|         jsr 7aec <findPerson>
    e12c:	|         addq.l #4,sp
    e12e:	|         move.l d0,8(sp)
	if (pers) {
    e132:	|     /-- beq.s e162 <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
    e134:	|     |   movea.l 8(sp),a0
    e138:	|     |   move.l 4(a0),d0
    e13c:	|     |   move.l d0,-(sp)
    e13e:	|     |   jsr 13c9a <__fixsfsi>
    e144:	|     |   addq.l #4,sp
    e146:	|     |   move.l d0,d1
    e148:	|     |   moveq #28,d0
    e14a:	|     |   add.l 20(sp),d0
    e14e:	|     |   move.l d1,-(sp)
    e150:	|     |   pea 1 <_start+0x1>
    e154:	|     |   move.l d0,-(sp)
    e156:	|     |   jsr 122f4 <setVariable>
    e15c:	|     |   lea 12(sp),sp
    e160:	|  /--|-- bra.s e1ae <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    e162:	|  |  \-> move.l (sp),d0
    e164:	|  |      move.l d0,-(sp)
    e166:	|  |      jsr 124cc <getRegionForObject>
    e16c:	|  |      addq.l #4,sp
    e16e:	|  |      move.l d0,4(sp)
		if (la) {
    e172:	|  |  /-- beq.s e196 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
    e174:	|  |  |   movea.l 4(sp),a0
    e178:	|  |  |   move.l 20(a0),d1
    e17c:	|  |  |   moveq #28,d0
    e17e:	|  |  |   add.l 20(sp),d0
    e182:	|  |  |   move.l d1,-(sp)
    e184:	|  |  |   pea 1 <_start+0x1>
    e188:	|  |  |   move.l d0,-(sp)
    e18a:	|  |  |   jsr 122f4 <setVariable>
    e190:	|  |  |   lea 12(sp),sp
    e194:	|  +--|-- bra.s e1ae <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    e196:	|  |  \-> moveq #28,d0
    e198:	|  |      add.l 20(sp),d0
    e19c:	|  |      clr.l -(sp)
    e19e:	|  |      pea 1 <_start+0x1>
    e1a2:	|  |      move.l d0,-(sp)
    e1a4:	|  |      jsr 122f4 <setVariable>
    e1aa:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    e1ae:	|  \----> moveq #2,d0
}
    e1b0:	\-------> lea 12(sp),sp
    e1b4:	          rts

0000e1b6 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
    e1b6:	       lea -32(sp),sp
    e1ba:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e1be:	       movea.l 56(sp),a0
    e1c2:	       move.l 24(a0),d0
    e1c6:	       move.l d0,-(sp)
    e1c8:	       pea 1 <_start+0x1>
    e1cc:	       lea 28(sp),a0
    e1d0:	       move.l a0,-(sp)
    e1d2:	       jsr 11a02 <getValueType>
    e1d8:	       lea 12(sp),sp
    e1dc:	       tst.w d0
    e1de:	   /-- bne.s e1e6 <builtIn_addScreenRegion+0x30>
    e1e0:	   |   moveq #1,d0
    e1e2:	/--|-- bra.w e3c0 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    e1e6:	|  \-> moveq #24,d0
    e1e8:	|      add.l 56(sp),d0
    e1ec:	|      move.l d0,-(sp)
    e1ee:	|      jsr 12386 <trimStack>
    e1f4:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e1f6:	|      movea.l 56(sp),a0
    e1fa:	|      move.l 24(a0),d0
    e1fe:	|      move.l d0,-(sp)
    e200:	|      pea 1 <_start+0x1>
    e204:	|      moveq #48,d0
    e206:	|      add.l sp,d0
    e208:	|      move.l d0,-(sp)
    e20a:	|      jsr 11a02 <getValueType>
    e210:	|      lea 12(sp),sp
    e214:	|      tst.w d0
    e216:	|  /-- bne.s e21e <builtIn_addScreenRegion+0x68>
    e218:	|  |   moveq #1,d0
    e21a:	+--|-- bra.w e3c0 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    e21e:	|  \-> moveq #24,d0
    e220:	|      add.l 56(sp),d0
    e224:	|      move.l d0,-(sp)
    e226:	|      jsr 12386 <trimStack>
    e22c:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e22e:	|      movea.l 56(sp),a0
    e232:	|      move.l 24(a0),d0
    e236:	|      move.l d0,-(sp)
    e238:	|      pea 1 <_start+0x1>
    e23c:	|      moveq #52,d0
    e23e:	|      add.l sp,d0
    e240:	|      move.l d0,-(sp)
    e242:	|      jsr 11a02 <getValueType>
    e248:	|      lea 12(sp),sp
    e24c:	|      tst.w d0
    e24e:	|  /-- bne.s e256 <builtIn_addScreenRegion+0xa0>
    e250:	|  |   moveq #1,d0
    e252:	+--|-- bra.w e3c0 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    e256:	|  \-> moveq #24,d0
    e258:	|      add.l 56(sp),d0
    e25c:	|      move.l d0,-(sp)
    e25e:	|      jsr 12386 <trimStack>
    e264:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e266:	|      movea.l 56(sp),a0
    e26a:	|      move.l 24(a0),d0
    e26e:	|      move.l d0,-(sp)
    e270:	|      pea 1 <_start+0x1>
    e274:	|      lea 32(sp),a0
    e278:	|      move.l a0,-(sp)
    e27a:	|      jsr 11a02 <getValueType>
    e280:	|      lea 12(sp),sp
    e284:	|      tst.w d0
    e286:	|  /-- bne.s e28e <builtIn_addScreenRegion+0xd8>
    e288:	|  |   moveq #1,d0
    e28a:	+--|-- bra.w e3c0 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    e28e:	|  \-> moveq #24,d0
    e290:	|      add.l 56(sp),d0
    e294:	|      move.l d0,-(sp)
    e296:	|      jsr 12386 <trimStack>
    e29c:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e29e:	|      movea.l 56(sp),a0
    e2a2:	|      move.l 24(a0),d0
    e2a6:	|      move.l d0,-(sp)
    e2a8:	|      pea 1 <_start+0x1>
    e2ac:	|      lea 36(sp),a0
    e2b0:	|      move.l a0,-(sp)
    e2b2:	|      jsr 11a02 <getValueType>
    e2b8:	|      lea 12(sp),sp
    e2bc:	|      tst.w d0
    e2be:	|  /-- bne.s e2c6 <builtIn_addScreenRegion+0x110>
    e2c0:	|  |   moveq #1,d0
    e2c2:	+--|-- bra.w e3c0 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    e2c6:	|  \-> moveq #24,d0
    e2c8:	|      add.l 56(sp),d0
    e2cc:	|      move.l d0,-(sp)
    e2ce:	|      jsr 12386 <trimStack>
    e2d4:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e2d6:	|      movea.l 56(sp),a0
    e2da:	|      move.l 24(a0),d0
    e2de:	|      move.l d0,-(sp)
    e2e0:	|      pea 1 <_start+0x1>
    e2e4:	|      lea 40(sp),a0
    e2e8:	|      move.l a0,-(sp)
    e2ea:	|      jsr 11a02 <getValueType>
    e2f0:	|      lea 12(sp),sp
    e2f4:	|      tst.w d0
    e2f6:	|  /-- bne.s e2fe <builtIn_addScreenRegion+0x148>
    e2f8:	|  |   moveq #1,d0
    e2fa:	+--|-- bra.w e3c0 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    e2fe:	|  \-> moveq #24,d0
    e300:	|      add.l 56(sp),d0
    e304:	|      move.l d0,-(sp)
    e306:	|      jsr 12386 <trimStack>
    e30c:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e30e:	|      movea.l 56(sp),a0
    e312:	|      move.l 24(a0),d0
    e316:	|      move.l d0,-(sp)
    e318:	|      pea 1 <_start+0x1>
    e31c:	|      lea 44(sp),a0
    e320:	|      move.l a0,-(sp)
    e322:	|      jsr 11a02 <getValueType>
    e328:	|      lea 12(sp),sp
    e32c:	|      tst.w d0
    e32e:	|  /-- bne.s e336 <builtIn_addScreenRegion+0x180>
    e330:	|  |   moveq #1,d0
    e332:	+--|-- bra.w e3c0 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    e336:	|  \-> moveq #24,d0
    e338:	|      add.l 56(sp),d0
    e33c:	|      move.l d0,-(sp)
    e33e:	|      jsr 12386 <trimStack>
    e344:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e346:	|      movea.l 56(sp),a0
    e34a:	|      move.l 24(a0),d0
    e34e:	|      move.l d0,-(sp)
    e350:	|      pea 7 <_start+0x7>
    e354:	|      lea 24(sp),a0
    e358:	|      move.l a0,-(sp)
    e35a:	|      jsr 11a02 <getValueType>
    e360:	|      lea 12(sp),sp
    e364:	|      tst.w d0
    e366:	|  /-- bne.s e36c <builtIn_addScreenRegion+0x1b6>
    e368:	|  |   moveq #1,d0
    e36a:	+--|-- bra.s e3c0 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    e36c:	|  \-> moveq #24,d0
    e36e:	|      add.l 56(sp),d0
    e372:	|      move.l d0,-(sp)
    e374:	|      jsr 12386 <trimStack>
    e37a:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
    e37c:	|      move.l 16(sp),d5
    e380:	|      move.l 20(sp),d4
    e384:	|      move.l 40(sp),d3
    e388:	|      move.l 44(sp),d2
    e38c:	|      movea.l 24(sp),a1
    e390:	|      movea.l 28(sp),a0
    e394:	|      move.l 32(sp),d1
    e398:	|      move.l 36(sp),d0
    e39c:	|      move.l d5,-(sp)
    e39e:	|      move.l d4,-(sp)
    e3a0:	|      move.l d3,-(sp)
    e3a2:	|      move.l d2,-(sp)
    e3a4:	|      move.l a1,-(sp)
    e3a6:	|      move.l a0,-(sp)
    e3a8:	|      move.l d1,-(sp)
    e3aa:	|      move.l d0,-(sp)
    e3ac:	|      jsr 1240c <addScreenRegion>
    e3b2:	|      lea 32(sp),sp
    e3b6:	|      tst.w d0
    e3b8:	|  /-- beq.s e3be <builtIn_addScreenRegion+0x208>
    e3ba:	|  |   moveq #2,d0
    e3bc:	+--|-- bra.s e3c0 <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
    e3be:	|  \-> moveq #1,d0

}
    e3c0:	\----> movem.l (sp)+,d2-d5
    e3c4:	       lea 32(sp),sp
    e3c8:	       rts

0000e3ca <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
    e3ca:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e3cc:	       movea.l 12(sp),a0
    e3d0:	       move.l 24(a0),d0
    e3d4:	       move.l d0,-(sp)
    e3d6:	       pea 7 <_start+0x7>
    e3da:	       move.l sp,d0
    e3dc:	       addq.l #8,d0
    e3de:	       move.l d0,-(sp)
    e3e0:	       jsr 11a02 <getValueType>
    e3e6:	       lea 12(sp),sp
    e3ea:	       tst.w d0
    e3ec:	   /-- bne.s e3f2 <builtIn_removeScreenRegion+0x28>
    e3ee:	   |   moveq #1,d0
    e3f0:	/--|-- bra.s e410 <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
    e3f2:	|  \-> moveq #24,d0
    e3f4:	|      add.l 12(sp),d0
    e3f8:	|      move.l d0,-(sp)
    e3fa:	|      jsr 12386 <trimStack>
    e400:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
    e402:	|      move.l (sp),d0
    e404:	|      move.l d0,-(sp)
    e406:	|      jsr 12674 <removeScreenRegion>
    e40c:	|      addq.l #4,sp
	return BR_CONTINUE;
    e40e:	|      moveq #2,d0
}
    e410:	\----> addq.l #4,sp
    e412:	       rts

0000e414 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
    e414:	jsr 127f8 <showBoxes>
	return BR_CONTINUE;
    e41a:	moveq #2,d0
}
    e41c:	rts

0000e41e <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
    e41e:	jsr 124fa <killAllRegions>
	return BR_CONTINUE;
    e424:	moveq #2,d0
}
    e426:	rts

0000e428 <builtIn_addCharacter>:

builtIn(addCharacter)
{
    e428:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
    e42c:	       movea.l 24(sp),a0
    e430:	       move.l 24(a0),d0
    e434:	       move.l d0,-(sp)
    e436:	       jsr 116ae <getCostumeFromVar>
    e43c:	       addq.l #4,sp
    e43e:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
    e442:	   /-- bne.s e44a <builtIn_addCharacter+0x22>
    e444:	   |   moveq #1,d0
    e446:	/--|-- bra.w e526 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
    e44a:	|  \-> moveq #24,d0
    e44c:	|      add.l 24(sp),d0
    e450:	|      move.l d0,-(sp)
    e452:	|      jsr 12386 <trimStack>
    e458:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e45a:	|      movea.l 24(sp),a0
    e45e:	|      move.l 24(a0),d0
    e462:	|      move.l d0,-(sp)
    e464:	|      pea 1 <_start+0x1>
    e468:	|      lea 12(sp),a0
    e46c:	|      move.l a0,-(sp)
    e46e:	|      jsr 11a02 <getValueType>
    e474:	|      lea 12(sp),sp
    e478:	|      tst.w d0
    e47a:	|  /-- bne.s e482 <builtIn_addCharacter+0x5a>
    e47c:	|  |   moveq #1,d0
    e47e:	+--|-- bra.w e526 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    e482:	|  \-> moveq #24,d0
    e484:	|      add.l 24(sp),d0
    e488:	|      move.l d0,-(sp)
    e48a:	|      jsr 12386 <trimStack>
    e490:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e492:	|      movea.l 24(sp),a0
    e496:	|      move.l 24(a0),d0
    e49a:	|      move.l d0,-(sp)
    e49c:	|      pea 1 <_start+0x1>
    e4a0:	|      moveq #16,d0
    e4a2:	|      add.l sp,d0
    e4a4:	|      move.l d0,-(sp)
    e4a6:	|      jsr 11a02 <getValueType>
    e4ac:	|      lea 12(sp),sp
    e4b0:	|      tst.w d0
    e4b2:	|  /-- bne.s e4b8 <builtIn_addCharacter+0x90>
    e4b4:	|  |   moveq #1,d0
    e4b6:	+--|-- bra.s e526 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    e4b8:	|  \-> moveq #24,d0
    e4ba:	|      add.l 24(sp),d0
    e4be:	|      move.l d0,-(sp)
    e4c0:	|      jsr 12386 <trimStack>
    e4c6:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e4c8:	|      movea.l 24(sp),a0
    e4cc:	|      move.l 24(a0),d0
    e4d0:	|      move.l d0,-(sp)
    e4d2:	|      pea 7 <_start+0x7>
    e4d6:	|      lea 8(sp),a0
    e4da:	|      move.l a0,-(sp)
    e4dc:	|      jsr 11a02 <getValueType>
    e4e2:	|      lea 12(sp),sp
    e4e6:	|      tst.w d0
    e4e8:	|  /-- bne.s e4ee <builtIn_addCharacter+0xc6>
    e4ea:	|  |   moveq #1,d0
    e4ec:	+--|-- bra.s e526 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    e4ee:	|  \-> moveq #24,d0
    e4f0:	|      add.l 24(sp),d0
    e4f4:	|      move.l d0,-(sp)
    e4f6:	|      jsr 12386 <trimStack>
    e4fc:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
    e4fe:	|      movea.l (sp),a0
    e500:	|      move.l 4(sp),d1
    e504:	|      move.l 8(sp),d0
    e508:	|      move.l 12(sp),-(sp)
    e50c:	|      move.l a0,-(sp)
    e50e:	|      move.l d1,-(sp)
    e510:	|      move.l d0,-(sp)
    e512:	|      jsr 67bc <addPerson>
    e518:	|      lea 16(sp),sp
    e51c:	|      tst.w d0
    e51e:	|  /-- beq.s e524 <builtIn_addCharacter+0xfc>
    e520:	|  |   moveq #2,d0
    e522:	+--|-- bra.s e526 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
    e524:	|  \-> moveq #1,d0
}
    e526:	\----> lea 16(sp),sp
    e52a:	       rts

0000e52c <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
    e52c:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e52e:	       movea.l 12(sp),a0
    e532:	       move.l 24(a0),d0
    e536:	       move.l d0,-(sp)
    e538:	       pea 7 <_start+0x7>
    e53c:	       move.l sp,d0
    e53e:	       addq.l #8,d0
    e540:	       move.l d0,-(sp)
    e542:	       jsr 11a02 <getValueType>
    e548:	       lea 12(sp),sp
    e54c:	       tst.w d0
    e54e:	   /-- bne.s e554 <builtIn_hideCharacter+0x28>
    e550:	   |   moveq #1,d0
    e552:	/--|-- bra.s e574 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
    e554:	|  \-> moveq #24,d0
    e556:	|      add.l 12(sp),d0
    e55a:	|      move.l d0,-(sp)
    e55c:	|      jsr 12386 <trimStack>
    e562:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
    e564:	|      move.l (sp),d0
    e566:	|      move.l d0,-(sp)
    e568:	|      clr.l -(sp)
    e56a:	|      jsr 90dc <setShown>
    e570:	|      addq.l #8,sp
	return BR_CONTINUE;
    e572:	|      moveq #2,d0
}
    e574:	\----> addq.l #4,sp
    e576:	       rts

0000e578 <builtIn_showCharacter>:

builtIn(showCharacter)
{
    e578:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e57a:	       movea.l 12(sp),a0
    e57e:	       move.l 24(a0),d0
    e582:	       move.l d0,-(sp)
    e584:	       pea 7 <_start+0x7>
    e588:	       move.l sp,d0
    e58a:	       addq.l #8,d0
    e58c:	       move.l d0,-(sp)
    e58e:	       jsr 11a02 <getValueType>
    e594:	       lea 12(sp),sp
    e598:	       tst.w d0
    e59a:	   /-- bne.s e5a0 <builtIn_showCharacter+0x28>
    e59c:	   |   moveq #1,d0
    e59e:	/--|-- bra.s e5c2 <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
    e5a0:	|  \-> moveq #24,d0
    e5a2:	|      add.l 12(sp),d0
    e5a6:	|      move.l d0,-(sp)
    e5a8:	|      jsr 12386 <trimStack>
    e5ae:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
    e5b0:	|      move.l (sp),d0
    e5b2:	|      move.l d0,-(sp)
    e5b4:	|      pea 1 <_start+0x1>
    e5b8:	|      jsr 90dc <setShown>
    e5be:	|      addq.l #8,sp
	return BR_CONTINUE;
    e5c0:	|      moveq #2,d0
}
    e5c2:	\----> addq.l #4,sp
    e5c4:	       rts

0000e5c6 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
    e5c6:	jsr 3a22 <killSpeechTimers>
	killMostPeople ();
    e5cc:	jsr 7f58 <killMostPeople>
	return BR_CONTINUE;
    e5d2:	moveq #2,d0
}
    e5d4:	rts

0000e5d6 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
    e5d6:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e5d8:	       movea.l 16(sp),a0
    e5dc:	       move.l 24(a0),d0
    e5e0:	       move.l d0,-(sp)
    e5e2:	       pea 1 <_start+0x1>
    e5e6:	       move.l sp,d0
    e5e8:	       addq.l #8,d0
    e5ea:	       move.l d0,-(sp)
    e5ec:	       jsr 11a02 <getValueType>
    e5f2:	       lea 12(sp),sp
    e5f6:	       tst.w d0
    e5f8:	   /-- bne.s e5fe <builtIn_setCharacterDrawMode+0x28>
    e5fa:	   |   moveq #1,d0
    e5fc:	/--|-- bra.s e658 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
    e5fe:	|  \-> moveq #24,d0
    e600:	|      add.l 16(sp),d0
    e604:	|      move.l d0,-(sp)
    e606:	|      jsr 12386 <trimStack>
    e60c:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e60e:	|      movea.l 16(sp),a0
    e612:	|      move.l 24(a0),d0
    e616:	|      move.l d0,-(sp)
    e618:	|      pea 7 <_start+0x7>
    e61c:	|      moveq #12,d0
    e61e:	|      add.l sp,d0
    e620:	|      move.l d0,-(sp)
    e622:	|      jsr 11a02 <getValueType>
    e628:	|      lea 12(sp),sp
    e62c:	|      tst.w d0
    e62e:	|  /-- bne.s e634 <builtIn_setCharacterDrawMode+0x5e>
    e630:	|  |   moveq #1,d0
    e632:	+--|-- bra.s e658 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
    e634:	|  \-> moveq #24,d0
    e636:	|      add.l 16(sp),d0
    e63a:	|      move.l d0,-(sp)
    e63c:	|      jsr 12386 <trimStack>
    e642:	|      addq.l #4,sp
	setDrawMode (di, obj);
    e644:	|      move.l 4(sp),d1
    e648:	|      move.l (sp),d0
    e64a:	|      move.l d1,-(sp)
    e64c:	|      move.l d0,-(sp)
    e64e:	|      jsr 8a1a <setDrawMode>
    e654:	|      addq.l #8,sp
	return BR_CONTINUE;
    e656:	|      moveq #2,d0
}
    e658:	\----> addq.l #8,sp
    e65a:	       rts

0000e65c <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
    e65c:	pea 15dda <custom.c.36a9b171+0x11e0>
    e662:	jsr 13a4a <KPrintF>
    e668:	addq.l #4,sp
	return BR_CONTINUE;
    e66a:	moveq #2,d0
}
    e66c:	rts

0000e66e <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
    e66e:	pea 15e0d <custom.c.36a9b171+0x1213>
    e674:	jsr 13a4a <KPrintF>
    e67a:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
    e67c:	moveq #2,d0
}
    e67e:	rts

0000e680 <builtIn_setScale>:

builtIn(setScale)
{
    e680:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e682:	       movea.l 16(sp),a0
    e686:	       move.l 24(a0),d0
    e68a:	       move.l d0,-(sp)
    e68c:	       pea 1 <_start+0x1>
    e690:	       move.l sp,d0
    e692:	       addq.l #8,d0
    e694:	       move.l d0,-(sp)
    e696:	       jsr 11a02 <getValueType>
    e69c:	       lea 12(sp),sp
    e6a0:	       tst.w d0
    e6a2:	   /-- bne.s e6a8 <builtIn_setScale+0x28>
    e6a4:	   |   moveq #1,d0
    e6a6:	/--|-- bra.s e70a <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
    e6a8:	|  \-> moveq #24,d0
    e6aa:	|      add.l 16(sp),d0
    e6ae:	|      move.l d0,-(sp)
    e6b0:	|      jsr 12386 <trimStack>
    e6b6:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e6b8:	|      movea.l 16(sp),a0
    e6bc:	|      move.l 24(a0),d0
    e6c0:	|      move.l d0,-(sp)
    e6c2:	|      pea 1 <_start+0x1>
    e6c6:	|      moveq #12,d0
    e6c8:	|      add.l sp,d0
    e6ca:	|      move.l d0,-(sp)
    e6cc:	|      jsr 11a02 <getValueType>
    e6d2:	|      lea 12(sp),sp
    e6d6:	|      tst.w d0
    e6d8:	|  /-- bne.s e6de <builtIn_setScale+0x5e>
    e6da:	|  |   moveq #1,d0
    e6dc:	+--|-- bra.s e70a <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
    e6de:	|  \-> moveq #24,d0
    e6e0:	|      add.l 16(sp),d0
    e6e4:	|      move.l d0,-(sp)
    e6e6:	|      jsr 12386 <trimStack>
    e6ec:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
    e6ee:	|      move.l (sp),d0
    e6f0:	|      move.l d0,d0
    e6f2:	|      movea.w d0,a1
    e6f4:	|      move.l 4(sp),d0
    e6f8:	|      move.l d0,d0
    e6fa:	|      movea.w d0,a0
    e6fc:	|      move.l a1,-(sp)
    e6fe:	|      move.l a0,-(sp)
    e700:	|      jsr 90b4 <setScale>
    e706:	|      addq.l #8,sp
	return BR_CONTINUE;
    e708:	|      moveq #2,d0
}
    e70a:	\----> addq.l #8,sp
    e70c:	       rts

0000e70e <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
    e70e:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e710:	       movea.l 12(sp),a0
    e714:	       move.l 24(a0),d0
    e718:	       move.l d0,-(sp)
    e71a:	       pea 7 <_start+0x7>
    e71e:	       move.l sp,d0
    e720:	       addq.l #8,d0
    e722:	       move.l d0,-(sp)
    e724:	       jsr 11a02 <getValueType>
    e72a:	       lea 12(sp),sp
    e72e:	       tst.w d0
    e730:	   /-- bne.s e736 <builtIn_stopCharacter+0x28>
    e732:	   |   moveq #1,d0
    e734:	/--|-- bra.s e76e <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
    e736:	|  \-> moveq #24,d0
    e738:	|      add.l 12(sp),d0
    e73c:	|      move.l d0,-(sp)
    e73e:	|      jsr 12386 <trimStack>
    e744:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
    e746:	|      move.l (sp),d0
    e748:	|      move.l d0,-(sp)
    e74a:	|      jsr 91e8 <stopPerson>
    e750:	|      addq.l #4,sp
    e752:	|      movea.w d0,a0
    e754:	|      moveq #28,d0
    e756:	|      add.l 12(sp),d0
    e75a:	|      move.l a0,-(sp)
    e75c:	|      pea 1 <_start+0x1>
    e760:	|      move.l d0,-(sp)
    e762:	|      jsr 122f4 <setVariable>
    e768:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e76c:	|      moveq #2,d0
}
    e76e:	\----> addq.l #4,sp
    e770:	       rts

0000e772 <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
    e772:	pea 15e47 <custom.c.36a9b171+0x124d>
    e778:	jsr 13a4a <KPrintF>
    e77e:	addq.l #4,sp
	return BR_CONTINUE;
    e780:	moveq #2,d0
}
    e782:	rts

0000e784 <builtIn_animate>:

builtIn(animate)
{
    e784:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    e786:	       movea.l 16(sp),a0
    e78a:	       move.l 24(a0),d0
    e78e:	       move.l d0,-(sp)
    e790:	       jsr 11eda <getAnimationFromVar>
    e796:	       addq.l #4,sp
    e798:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    e79c:	   /-- bne.s e7a2 <builtIn_animate+0x1e>
    e79e:	   |   moveq #1,d0
    e7a0:	/--|-- bra.s e820 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
    e7a2:	|  \-> moveq #24,d0
    e7a4:	|      add.l 16(sp),d0
    e7a8:	|      move.l d0,-(sp)
    e7aa:	|      jsr 12386 <trimStack>
    e7b0:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e7b2:	|      movea.l 16(sp),a0
    e7b6:	|      move.l 24(a0),d0
    e7ba:	|      move.l d0,-(sp)
    e7bc:	|      pea 7 <_start+0x7>
    e7c0:	|      move.l sp,d0
    e7c2:	|      addq.l #8,d0
    e7c4:	|      move.l d0,-(sp)
    e7c6:	|      jsr 11a02 <getValueType>
    e7cc:	|      lea 12(sp),sp
    e7d0:	|      tst.w d0
    e7d2:	|  /-- bne.s e7d8 <builtIn_animate+0x54>
    e7d4:	|  |   moveq #1,d0
    e7d6:	+--|-- bra.s e820 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
    e7d8:	|  \-> moveq #24,d0
    e7da:	|      add.l 16(sp),d0
    e7de:	|      move.l d0,-(sp)
    e7e0:	|      jsr 12386 <trimStack>
    e7e6:	|      addq.l #4,sp
	animatePerson (obj, pp);
    e7e8:	|      move.l (sp),d0
    e7ea:	|      move.l 4(sp),-(sp)
    e7ee:	|      move.l d0,-(sp)
    e7f0:	|      jsr 6a30 <animatePerson>
    e7f6:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
    e7f8:	|      move.l 4(sp),-(sp)
    e7fc:	|      jsr 923c <timeForAnim>
    e802:	|      addq.l #4,sp
    e804:	|      move.l d0,d1
    e806:	|      moveq #28,d0
    e808:	|      add.l 16(sp),d0
    e80c:	|      move.l d1,-(sp)
    e80e:	|      pea 1 <_start+0x1>
    e812:	|      move.l d0,-(sp)
    e814:	|      jsr 122f4 <setVariable>
    e81a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e81e:	|      moveq #2,d0
}
    e820:	\----> addq.l #8,sp
    e822:	       rts

0000e824 <builtIn_setCostume>:

builtIn(setCostume)
{
    e824:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
    e826:	       movea.l 16(sp),a0
    e82a:	       move.l 24(a0),d0
    e82e:	       move.l d0,-(sp)
    e830:	       jsr 116ae <getCostumeFromVar>
    e836:	       addq.l #4,sp
    e838:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    e83c:	   /-- bne.s e842 <builtIn_setCostume+0x1e>
    e83e:	   |   moveq #1,d0
    e840:	/--|-- bra.s e89a <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
    e842:	|  \-> moveq #24,d0
    e844:	|      add.l 16(sp),d0
    e848:	|      move.l d0,-(sp)
    e84a:	|      jsr 12386 <trimStack>
    e850:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e852:	|      movea.l 16(sp),a0
    e856:	|      move.l 24(a0),d0
    e85a:	|      move.l d0,-(sp)
    e85c:	|      pea 7 <_start+0x7>
    e860:	|      move.l sp,d0
    e862:	|      addq.l #8,d0
    e864:	|      move.l d0,-(sp)
    e866:	|      jsr 11a02 <getValueType>
    e86c:	|      lea 12(sp),sp
    e870:	|      tst.w d0
    e872:	|  /-- bne.s e878 <builtIn_setCostume+0x54>
    e874:	|  |   moveq #1,d0
    e876:	+--|-- bra.s e89a <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
    e878:	|  \-> moveq #24,d0
    e87a:	|      add.l 16(sp),d0
    e87e:	|      move.l d0,-(sp)
    e880:	|      jsr 12386 <trimStack>
    e886:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
    e888:	|      move.l (sp),d0
    e88a:	|      move.l 4(sp),-(sp)
    e88e:	|      move.l d0,-(sp)
    e890:	|      jsr 6a7a <animatePersonUsingPersona>
    e896:	|      addq.l #8,sp
	return BR_CONTINUE;
    e898:	|      moveq #2,d0
}
    e89a:	\----> addq.l #8,sp
    e89c:	       rts

0000e89e <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
    e89e:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e8a0:	       movea.l 16(sp),a0
    e8a4:	       move.l 24(a0),d0
    e8a8:	       move.l d0,-(sp)
    e8aa:	       pea 1 <_start+0x1>
    e8ae:	       move.l sp,d0
    e8b0:	       addq.l #8,d0
    e8b2:	       move.l d0,-(sp)
    e8b4:	       jsr 11a02 <getValueType>
    e8ba:	       lea 12(sp),sp
    e8be:	       tst.w d0
    e8c0:	   /-- bne.s e8c6 <builtIn_floatCharacter+0x28>
    e8c2:	   |   moveq #1,d0
    e8c4:	/--|-- bra.s e93a <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
    e8c6:	|  \-> moveq #24,d0
    e8c8:	|      add.l 16(sp),d0
    e8cc:	|      move.l d0,-(sp)
    e8ce:	|      jsr 12386 <trimStack>
    e8d4:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e8d6:	|      movea.l 16(sp),a0
    e8da:	|      move.l 24(a0),d0
    e8de:	|      move.l d0,-(sp)
    e8e0:	|      pea 7 <_start+0x7>
    e8e4:	|      moveq #12,d0
    e8e6:	|      add.l sp,d0
    e8e8:	|      move.l d0,-(sp)
    e8ea:	|      jsr 11a02 <getValueType>
    e8f0:	|      lea 12(sp),sp
    e8f4:	|      tst.w d0
    e8f6:	|  /-- bne.s e8fc <builtIn_floatCharacter+0x5e>
    e8f8:	|  |   moveq #1,d0
    e8fa:	+--|-- bra.s e93a <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
    e8fc:	|  \-> moveq #24,d0
    e8fe:	|      add.l 16(sp),d0
    e902:	|      move.l d0,-(sp)
    e904:	|      jsr 12386 <trimStack>
    e90a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
    e90c:	|      move.l 4(sp),d1
    e910:	|      move.l (sp),d0
    e912:	|      move.l d1,-(sp)
    e914:	|      move.l d0,-(sp)
    e916:	|      jsr 7b1a <floatCharacter>
    e91c:	|      addq.l #8,sp
    e91e:	|      movea.w d0,a0
    e920:	|      moveq #28,d0
    e922:	|      add.l 16(sp),d0
    e926:	|      move.l a0,-(sp)
    e928:	|      pea 1 <_start+0x1>
    e92c:	|      move.l d0,-(sp)
    e92e:	|      jsr 122f4 <setVariable>
    e934:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e938:	|      moveq #2,d0
}
    e93a:	\----> addq.l #8,sp
    e93c:	       rts

0000e93e <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
    e93e:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e940:	       movea.l 16(sp),a0
    e944:	       move.l 24(a0),d0
    e948:	       move.l d0,-(sp)
    e94a:	       pea 1 <_start+0x1>
    e94e:	       move.l sp,d0
    e950:	       addq.l #8,d0
    e952:	       move.l d0,-(sp)
    e954:	       jsr 11a02 <getValueType>
    e95a:	       lea 12(sp),sp
    e95e:	       tst.w d0
    e960:	   /-- bne.s e966 <builtIn_setCharacterWalkSpeed+0x28>
    e962:	   |   moveq #1,d0
    e964:	/--|-- bra.s e9da <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
    e966:	|  \-> moveq #24,d0
    e968:	|      add.l 16(sp),d0
    e96c:	|      move.l d0,-(sp)
    e96e:	|      jsr 12386 <trimStack>
    e974:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e976:	|      movea.l 16(sp),a0
    e97a:	|      move.l 24(a0),d0
    e97e:	|      move.l d0,-(sp)
    e980:	|      pea 7 <_start+0x7>
    e984:	|      moveq #12,d0
    e986:	|      add.l sp,d0
    e988:	|      move.l d0,-(sp)
    e98a:	|      jsr 11a02 <getValueType>
    e990:	|      lea 12(sp),sp
    e994:	|      tst.w d0
    e996:	|  /-- bne.s e99c <builtIn_setCharacterWalkSpeed+0x5e>
    e998:	|  |   moveq #1,d0
    e99a:	+--|-- bra.s e9da <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
    e99c:	|  \-> moveq #24,d0
    e99e:	|      add.l 16(sp),d0
    e9a2:	|      move.l d0,-(sp)
    e9a4:	|      jsr 12386 <trimStack>
    e9aa:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
    e9ac:	|      move.l 4(sp),d1
    e9b0:	|      move.l (sp),d0
    e9b2:	|      move.l d1,-(sp)
    e9b4:	|      move.l d0,-(sp)
    e9b6:	|      jsr 9050 <setCharacterWalkSpeed>
    e9bc:	|      addq.l #8,sp
    e9be:	|      movea.w d0,a0
    e9c0:	|      moveq #28,d0
    e9c2:	|      add.l 16(sp),d0
    e9c6:	|      move.l a0,-(sp)
    e9c8:	|      pea 1 <_start+0x1>
    e9cc:	|      move.l d0,-(sp)
    e9ce:	|      jsr 122f4 <setVariable>
    e9d4:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e9d8:	|      moveq #2,d0
}
    e9da:	\----> addq.l #8,sp
    e9dc:	       rts

0000e9de <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
    e9de:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e9e0:	       movea.l 16(sp),a0
    e9e4:	       move.l 24(a0),d0
    e9e8:	       move.l d0,-(sp)
    e9ea:	       pea 1 <_start+0x1>
    e9ee:	       move.l sp,d0
    e9f0:	       addq.l #8,d0
    e9f2:	       move.l d0,-(sp)
    e9f4:	       jsr 11a02 <getValueType>
    e9fa:	       lea 12(sp),sp
    e9fe:	       tst.w d0
    ea00:	   /-- bne.s ea06 <builtIn_turnCharacter+0x28>
    ea02:	   |   moveq #1,d0
    ea04:	/--|-- bra.s ea7a <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
    ea06:	|  \-> moveq #24,d0
    ea08:	|      add.l 16(sp),d0
    ea0c:	|      move.l d0,-(sp)
    ea0e:	|      jsr 12386 <trimStack>
    ea14:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ea16:	|      movea.l 16(sp),a0
    ea1a:	|      move.l 24(a0),d0
    ea1e:	|      move.l d0,-(sp)
    ea20:	|      pea 7 <_start+0x7>
    ea24:	|      moveq #12,d0
    ea26:	|      add.l sp,d0
    ea28:	|      move.l d0,-(sp)
    ea2a:	|      jsr 11a02 <getValueType>
    ea30:	|      lea 12(sp),sp
    ea34:	|      tst.w d0
    ea36:	|  /-- bne.s ea3c <builtIn_turnCharacter+0x5e>
    ea38:	|  |   moveq #1,d0
    ea3a:	+--|-- bra.s ea7a <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
    ea3c:	|  \-> moveq #24,d0
    ea3e:	|      add.l 16(sp),d0
    ea42:	|      move.l d0,-(sp)
    ea44:	|      jsr 12386 <trimStack>
    ea4a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
    ea4c:	|      move.l (sp),d1
    ea4e:	|      move.l 4(sp),d0
    ea52:	|      move.l d1,-(sp)
    ea54:	|      move.l d0,-(sp)
    ea56:	|      jsr 92f4 <turnPersonToFace>
    ea5c:	|      addq.l #8,sp
    ea5e:	|      movea.w d0,a0
    ea60:	|      moveq #28,d0
    ea62:	|      add.l 16(sp),d0
    ea66:	|      move.l a0,-(sp)
    ea68:	|      pea 1 <_start+0x1>
    ea6c:	|      move.l d0,-(sp)
    ea6e:	|      jsr 122f4 <setVariable>
    ea74:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ea78:	|      moveq #2,d0
}
    ea7a:	\----> addq.l #8,sp
    ea7c:	       rts

0000ea7e <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
    ea7e:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ea80:	       movea.l 16(sp),a0
    ea84:	       move.l 24(a0),d0
    ea88:	       move.l d0,-(sp)
    ea8a:	       pea 1 <_start+0x1>
    ea8e:	       move.l sp,d0
    ea90:	       addq.l #8,d0
    ea92:	       move.l d0,-(sp)
    ea94:	       jsr 11a02 <getValueType>
    ea9a:	       lea 12(sp),sp
    ea9e:	       tst.w d0
    eaa0:	   /-- bne.s eaa6 <builtIn_setCharacterExtra+0x28>
    eaa2:	   |   moveq #1,d0
    eaa4:	/--|-- bra.s eb1a <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
    eaa6:	|  \-> moveq #24,d0
    eaa8:	|      add.l 16(sp),d0
    eaac:	|      move.l d0,-(sp)
    eaae:	|      jsr 12386 <trimStack>
    eab4:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    eab6:	|      movea.l 16(sp),a0
    eaba:	|      move.l 24(a0),d0
    eabe:	|      move.l d0,-(sp)
    eac0:	|      pea 7 <_start+0x7>
    eac4:	|      moveq #12,d0
    eac6:	|      add.l sp,d0
    eac8:	|      move.l d0,-(sp)
    eaca:	|      jsr 11a02 <getValueType>
    ead0:	|      lea 12(sp),sp
    ead4:	|      tst.w d0
    ead6:	|  /-- bne.s eadc <builtIn_setCharacterExtra+0x5e>
    ead8:	|  |   moveq #1,d0
    eada:	+--|-- bra.s eb1a <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
    eadc:	|  \-> moveq #24,d0
    eade:	|      add.l 16(sp),d0
    eae2:	|      move.l d0,-(sp)
    eae4:	|      jsr 12386 <trimStack>
    eaea:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
    eaec:	|      move.l (sp),d1
    eaee:	|      move.l 4(sp),d0
    eaf2:	|      move.l d1,-(sp)
    eaf4:	|      move.l d0,-(sp)
    eaf6:	|      jsr 907e <setPersonExtra>
    eafc:	|      addq.l #8,sp
    eafe:	|      movea.w d0,a0
    eb00:	|      moveq #28,d0
    eb02:	|      add.l 16(sp),d0
    eb06:	|      move.l a0,-(sp)
    eb08:	|      pea 1 <_start+0x1>
    eb0c:	|      move.l d0,-(sp)
    eb0e:	|      jsr 122f4 <setVariable>
    eb14:	|      lea 12(sp),sp
	return BR_CONTINUE;
    eb18:	|      moveq #2,d0
}
    eb1a:	\----> addq.l #8,sp
    eb1c:	       rts

0000eb1e <builtIn_removeCharacter>:

builtIn(removeCharacter)
{
    eb1e:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    eb20:	       movea.l 12(sp),a0
    eb24:	       move.l 24(a0),d0
    eb28:	       move.l d0,-(sp)
    eb2a:	       pea 7 <_start+0x7>
    eb2e:	       move.l sp,d0
    eb30:	       addq.l #8,d0
    eb32:	       move.l d0,-(sp)
    eb34:	       jsr 11a02 <getValueType>
    eb3a:	       lea 12(sp),sp
    eb3e:	       tst.w d0
    eb40:	   /-- bne.s eb46 <builtIn_removeCharacter+0x28>
    eb42:	   |   moveq #1,d0
    eb44:	/--|-- bra.s eb64 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
    eb46:	|  \-> moveq #24,d0
    eb48:	|      add.l 12(sp),d0
    eb4c:	|      move.l d0,-(sp)
    eb4e:	|      jsr 12386 <trimStack>
    eb54:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
    eb56:	|      move.l (sp),d0
    eb58:	|      move.l d0,-(sp)
    eb5a:	|      jsr 82b2 <removeOneCharacter>
    eb60:	|      addq.l #4,sp
	return BR_CONTINUE;
    eb62:	|      moveq #2,d0
}
    eb64:	\----> addq.l #4,sp
    eb66:	       rts

0000eb68 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
    eb68:	                lea -28(sp),sp
    eb6c:	                move.l d2,-(sp)
    eb6e:	                move.l 44(sp),d1
    eb72:	                move.l 48(sp),d0
    eb76:	                move.w d1,d1
    eb78:	                move.w d1,6(sp)
    eb7c:	                move.w d0,d0
    eb7e:	                move.w d0,4(sp)
	switch (numParams) {
    eb82:	                moveq #2,d0
    eb84:	                cmp.l 36(sp),d0
    eb88:	      /-------- beq.w ecca <moveChr+0x162>
    eb8c:	      |         moveq #3,d0
    eb8e:	      |         cmp.l 36(sp),d0
    eb92:	/-----|-------- bne.w edfe <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eb96:	|     |         movea.l 40(sp),a0
    eb9a:	|     |         move.l 24(a0),d0
    eb9e:	|     |         move.l d0,-(sp)
    eba0:	|     |         pea 1 <_start+0x1>
    eba4:	|     |         lea 20(sp),a0
    eba8:	|     |         move.l a0,-(sp)
    ebaa:	|     |         jsr 11a02 <getValueType>
    ebb0:	|     |         lea 12(sp),sp
    ebb4:	|     |         tst.w d0
    ebb6:	|     |     /-- bne.s ebbe <moveChr+0x56>
    ebb8:	|     |     |   moveq #1,d0
    ebba:	|  /--|-----|-- bra.w ee0e <moveChr+0x2a6>
			trimStack (&fun -> stack);
    ebbe:	|  |  |     \-> moveq #24,d0
    ebc0:	|  |  |         add.l 40(sp),d0
    ebc4:	|  |  |         move.l d0,-(sp)
    ebc6:	|  |  |         jsr 12386 <trimStack>
    ebcc:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ebce:	|  |  |         movea.l 40(sp),a0
    ebd2:	|  |  |         move.l 24(a0),d0
    ebd6:	|  |  |         move.l d0,-(sp)
    ebd8:	|  |  |         pea 1 <_start+0x1>
    ebdc:	|  |  |         lea 24(sp),a0
    ebe0:	|  |  |         move.l a0,-(sp)
    ebe2:	|  |  |         jsr 11a02 <getValueType>
    ebe8:	|  |  |         lea 12(sp),sp
    ebec:	|  |  |         tst.w d0
    ebee:	|  |  |     /-- bne.s ebf6 <moveChr+0x8e>
    ebf0:	|  |  |     |   moveq #1,d0
    ebf2:	|  +--|-----|-- bra.w ee0e <moveChr+0x2a6>
			trimStack (&fun -> stack);
    ebf6:	|  |  |     \-> moveq #24,d0
    ebf8:	|  |  |         add.l 40(sp),d0
    ebfc:	|  |  |         move.l d0,-(sp)
    ebfe:	|  |  |         jsr 12386 <trimStack>
    ec04:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ec06:	|  |  |         movea.l 40(sp),a0
    ec0a:	|  |  |         move.l 24(a0),d0
    ec0e:	|  |  |         move.l d0,-(sp)
    ec10:	|  |  |         pea 7 <_start+0x7>
    ec14:	|  |  |         lea 16(sp),a0
    ec18:	|  |  |         move.l a0,-(sp)
    ec1a:	|  |  |         jsr 11a02 <getValueType>
    ec20:	|  |  |         lea 12(sp),sp
    ec24:	|  |  |         tst.w d0
    ec26:	|  |  |     /-- bne.s ec2e <moveChr+0xc6>
    ec28:	|  |  |     |   moveq #1,d0
    ec2a:	|  +--|-----|-- bra.w ee0e <moveChr+0x2a6>
			trimStack (&fun -> stack);
    ec2e:	|  |  |     \-> moveq #24,d0
    ec30:	|  |  |         add.l 40(sp),d0
    ec34:	|  |  |         move.l d0,-(sp)
    ec36:	|  |  |         jsr 12386 <trimStack>
    ec3c:	|  |  |         addq.l #4,sp

			if (force) {
    ec3e:	|  |  |         tst.w 6(sp)
    ec42:	|  |  |     /-- beq.s ec72 <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    ec44:	|  |  |     |   movea.l 8(sp),a0
    ec48:	|  |  |     |   move.l 12(sp),d1
    ec4c:	|  |  |     |   move.l 16(sp),d0
    ec50:	|  |  |     |   pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffbd39f>
    ec54:	|  |  |     |   move.l 44(sp),-(sp)
    ec58:	|  |  |     |   move.l a0,-(sp)
    ec5a:	|  |  |     |   move.l d1,-(sp)
    ec5c:	|  |  |     |   move.l d0,-(sp)
    ec5e:	|  |  |     |   jsr 7b3e <forceWalkingPerson>
    ec64:	|  |  |     |   lea 20(sp),sp
    ec68:	|  |  |     |   tst.w d0
    ec6a:	|  |  |  /--|-- beq.s ecc4 <moveChr+0x15c>
    ec6c:	|  |  |  |  |   moveq #3,d0
    ec6e:	|  +--|--|--|-- bra.w ee0e <moveChr+0x2a6>
			} else if (immediate) {
    ec72:	|  |  |  |  \-> tst.w 4(sp)
    ec76:	|  |  |  |  /-- beq.s ec96 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
    ec78:	|  |  |  |  |   movea.l 8(sp),a0
    ec7c:	|  |  |  |  |   move.l 12(sp),d1
    ec80:	|  |  |  |  |   move.l 16(sp),d0
    ec84:	|  |  |  |  |   move.l a0,-(sp)
    ec86:	|  |  |  |  |   move.l d1,-(sp)
    ec88:	|  |  |  |  |   move.l d0,-(sp)
    ec8a:	|  |  |  |  |   jsr 7e46 <jumpPerson>
    ec90:	|  |  |  |  |   lea 12(sp),sp
    ec94:	|  |  |  +--|-- bra.s ecc4 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    ec96:	|  |  |  |  \-> movea.l 8(sp),a0
    ec9a:	|  |  |  |      move.l 12(sp),d1
    ec9e:	|  |  |  |      move.l 16(sp),d0
    eca2:	|  |  |  |      pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffbd39f>
    eca6:	|  |  |  |      move.l 44(sp),-(sp)
    ecaa:	|  |  |  |      move.l a0,-(sp)
    ecac:	|  |  |  |      move.l d1,-(sp)
    ecae:	|  |  |  |      move.l d0,-(sp)
    ecb0:	|  |  |  |      jsr 8016 <makeWalkingPerson>
    ecb6:	|  |  |  |      lea 20(sp),sp
    ecba:	|  |  |  |      tst.w d0
    ecbc:	|  |  |  +----- beq.s ecc4 <moveChr+0x15c>
    ecbe:	|  |  |  |      moveq #3,d0
    ecc0:	|  +--|--|----- bra.w ee0e <moveChr+0x2a6>
			}
			return BR_CONTINUE;
    ecc4:	|  |  |  \----> moveq #2,d0
    ecc6:	|  +--|-------- bra.w ee0e <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ecca:	|  |  \-------> movea.l 40(sp),a0
    ecce:	|  |            move.l 24(a0),d0
    ecd2:	|  |            move.l d0,-(sp)
    ecd4:	|  |            pea 7 <_start+0x7>
    ecd8:	|  |            moveq #32,d0
    ecda:	|  |            add.l sp,d0
    ecdc:	|  |            move.l d0,-(sp)
    ecde:	|  |            jsr 11a02 <getValueType>
    ece4:	|  |            lea 12(sp),sp
    ece8:	|  |            tst.w d0
    ecea:	|  |        /-- bne.s ecf2 <moveChr+0x18a>
    ecec:	|  |        |   moveq #1,d0
    ecee:	|  +--------|-- bra.w ee0e <moveChr+0x2a6>
			trimStack (&fun -> stack);
    ecf2:	|  |        \-> moveq #24,d0
    ecf4:	|  |            add.l 40(sp),d0
    ecf8:	|  |            move.l d0,-(sp)
    ecfa:	|  |            jsr 12386 <trimStack>
    ed00:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ed02:	|  |            movea.l 40(sp),a0
    ed06:	|  |            move.l 24(a0),d0
    ed0a:	|  |            move.l d0,-(sp)
    ed0c:	|  |            pea 7 <_start+0x7>
    ed10:	|  |            lea 28(sp),a0
    ed14:	|  |            move.l a0,-(sp)
    ed16:	|  |            jsr 11a02 <getValueType>
    ed1c:	|  |            lea 12(sp),sp
    ed20:	|  |            tst.w d0
    ed22:	|  |        /-- bne.s ed2a <moveChr+0x1c2>
    ed24:	|  |        |   moveq #1,d0
    ed26:	|  +--------|-- bra.w ee0e <moveChr+0x2a6>
			trimStack (&fun -> stack);
    ed2a:	|  |        \-> moveq #24,d0
    ed2c:	|  |            add.l 40(sp),d0
    ed30:	|  |            move.l d0,-(sp)
    ed32:	|  |            jsr 12386 <trimStack>
    ed38:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
    ed3a:	|  |            move.l 24(sp),d0
    ed3e:	|  |            move.l d0,-(sp)
    ed40:	|  |            jsr 124cc <getRegionForObject>
    ed46:	|  |            addq.l #4,sp
    ed48:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
    ed4c:	|  |        /-- bne.s ed54 <moveChr+0x1ec>
    ed4e:	|  |        |   moveq #2,d0
    ed50:	|  +--------|-- bra.w ee0e <moveChr+0x2a6>

			if (force)
    ed54:	|  |        \-> tst.w 6(sp)
    ed58:	|  |        /-- beq.s ed94 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
    ed5a:	|  |        |   movea.l 28(sp),a0
    ed5e:	|  |        |   move.l 24(a0),d2
    ed62:	|  |        |   movea.l 20(sp),a1
    ed66:	|  |        |   movea.l 28(sp),a0
    ed6a:	|  |        |   move.l 20(a0),d1
    ed6e:	|  |        |   movea.l 28(sp),a0
    ed72:	|  |        |   move.l 16(a0),d0
    ed76:	|  |        |   move.l d2,-(sp)
    ed78:	|  |        |   move.l 44(sp),-(sp)
    ed7c:	|  |        |   move.l a1,-(sp)
    ed7e:	|  |        |   move.l d1,-(sp)
    ed80:	|  |        |   move.l d0,-(sp)
    ed82:	|  |        |   jsr 7b3e <forceWalkingPerson>
    ed88:	|  |        |   lea 20(sp),sp
    ed8c:	|  |        |   tst.w d0
    ed8e:	|  |     /--|-- beq.s edfa <moveChr+0x292>
    ed90:	|  |     |  |   moveq #3,d0
    ed92:	|  +-----|--|-- bra.s ee0e <moveChr+0x2a6>
			}
			else if (immediate)
    ed94:	|  |     |  \-> tst.w 4(sp)
    ed98:	|  |     |  /-- beq.s edc0 <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
    ed9a:	|  |     |  |   movea.l 20(sp),a1
    ed9e:	|  |     |  |   movea.l 28(sp),a0
    eda2:	|  |     |  |   move.l 20(a0),d1
    eda6:	|  |     |  |   movea.l 28(sp),a0
    edaa:	|  |     |  |   move.l 16(a0),d0
    edae:	|  |     |  |   move.l a1,-(sp)
    edb0:	|  |     |  |   move.l d1,-(sp)
    edb2:	|  |     |  |   move.l d0,-(sp)
    edb4:	|  |     |  |   jsr 7e46 <jumpPerson>
    edba:	|  |     |  |   lea 12(sp),sp
    edbe:	|  |     +--|-- bra.s edfa <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
    edc0:	|  |     |  \-> movea.l 28(sp),a0
    edc4:	|  |     |      move.l 24(a0),d2
    edc8:	|  |     |      movea.l 20(sp),a1
    edcc:	|  |     |      movea.l 28(sp),a0
    edd0:	|  |     |      move.l 20(a0),d1
    edd4:	|  |     |      movea.l 28(sp),a0
    edd8:	|  |     |      move.l 16(a0),d0
    eddc:	|  |     |      move.l d2,-(sp)
    edde:	|  |     |      move.l 44(sp),-(sp)
    ede2:	|  |     |      move.l a1,-(sp)
    ede4:	|  |     |      move.l d1,-(sp)
    ede6:	|  |     |      move.l d0,-(sp)
    ede8:	|  |     |      jsr 8016 <makeWalkingPerson>
    edee:	|  |     |      lea 20(sp),sp
    edf2:	|  |     |      tst.w d0
    edf4:	|  |     +----- beq.s edfa <moveChr+0x292>
    edf6:	|  |     |      moveq #3,d0
    edf8:	|  +-----|----- bra.s ee0e <moveChr+0x2a6>
			}
			return BR_CONTINUE;
    edfa:	|  |     \----> moveq #2,d0
    edfc:	|  +----------- bra.s ee0e <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
    edfe:	\--|----------> pea 15e65 <custom.c.36a9b171+0x126b>
    ee04:	   |            jsr 13a4a <KPrintF>
    ee0a:	   |            addq.l #4,sp
			return BR_ERROR;
    ee0c:	   |            moveq #1,d0
	}
}
    ee0e:	   \----------> move.l (sp)+,d2
    ee10:	                lea 28(sp),sp
    ee14:	                rts

0000ee16 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
    ee16:	clr.l -(sp)
    ee18:	clr.l -(sp)
    ee1a:	move.l 16(sp),-(sp)
    ee1e:	move.l 16(sp),-(sp)
    ee22:	jsr eb68 <moveChr>
    ee28:	lea 16(sp),sp
}
    ee2c:	rts

0000ee2e <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
    ee2e:	clr.l -(sp)
    ee30:	pea 1 <_start+0x1>
    ee34:	move.l 16(sp),-(sp)
    ee38:	move.l 16(sp),-(sp)
    ee3c:	jsr eb68 <moveChr>
    ee42:	lea 16(sp),sp
}
    ee46:	rts

0000ee48 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
    ee48:	pea 1 <_start+0x1>
    ee4c:	clr.l -(sp)
    ee4e:	move.l 16(sp),-(sp)
    ee52:	move.l 16(sp),-(sp)
    ee56:	jsr eb68 <moveChr>
    ee5c:	lea 16(sp),sp
}
    ee60:	rts

0000ee62 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
    ee62:	jsr 50c6 <clearStatusBar>
	return BR_CONTINUE;
    ee68:	moveq #2,d0
}
    ee6a:	rts

0000ee6c <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
    ee6c:	jsr 516e <killLastStatus>
	return BR_CONTINUE;
    ee72:	moveq #2,d0
}
    ee74:	rts

0000ee76 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
    ee76:	jsr 505c <addStatusBar>
	return BR_CONTINUE;
    ee7c:	moveq #2,d0
}
    ee7e:	rts

0000ee80 <builtIn_statusText>:

builtIn(statusText)
{
    ee80:	       subq.l #8,sp
    ee82:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    ee84:	       movea.l 20(sp),a0
    ee88:	       move.l 24(a0),d0
    ee8c:	       move.l d0,-(sp)
    ee8e:	       jsr 11fd8 <getTextFromAnyVar>
    ee94:	       addq.l #4,sp
    ee96:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
    ee9a:	   /-- bne.s eea0 <builtIn_statusText+0x20>
    ee9c:	   |   moveq #1,d0
    ee9e:	/--|-- bra.s eed4 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
    eea0:	|  \-> moveq #24,d0
    eea2:	|      add.l 20(sp),d0
    eea6:	|      move.l d0,-(sp)
    eea8:	|      jsr 12386 <trimStack>
    eeae:	|      addq.l #4,sp
	setStatusBar(newText);
    eeb0:	|      move.l 8(sp),-(sp)
    eeb4:	|      jsr 53ee <setStatusBar>
    eeba:	|      addq.l #4,sp
	FreeVec(newText);
    eebc:	|      move.l 8(sp),4(sp)
    eec2:	|      move.l 18bc0 <SysBase>,d0
    eec8:	|      movea.l d0,a6
    eeca:	|      movea.l 4(sp),a1
    eece:	|      jsr -690(a6)
	return BR_CONTINUE;
    eed2:	|      moveq #2,d0
}
    eed4:	\----> movea.l (sp)+,a6
    eed6:	       addq.l #8,sp
    eed8:	       rts

0000eeda <builtIn_lightStatus>:

builtIn(lightStatus)
{
    eeda:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eedc:	       movea.l 12(sp),a0
    eee0:	       move.l 24(a0),d0
    eee4:	       move.l d0,-(sp)
    eee6:	       pea 1 <_start+0x1>
    eeea:	       move.l sp,d0
    eeec:	       addq.l #8,d0
    eeee:	       move.l d0,-(sp)
    eef0:	       jsr 11a02 <getValueType>
    eef6:	       lea 12(sp),sp
    eefa:	       tst.w d0
    eefc:	   /-- bne.s ef02 <builtIn_lightStatus+0x28>
    eefe:	   |   moveq #1,d0
    ef00:	/--|-- bra.s ef20 <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
    ef02:	|  \-> moveq #24,d0
    ef04:	|      add.l 12(sp),d0
    ef08:	|      move.l d0,-(sp)
    ef0a:	|      jsr 12386 <trimStack>
    ef10:	|      addq.l #4,sp
	setLitStatus (val);
    ef12:	|      move.l (sp),d0
    ef14:	|      move.l d0,-(sp)
    ef16:	|      jsr 53de <setLitStatus>
    ef1c:	|      addq.l #4,sp
	return BR_CONTINUE;
    ef1e:	|      moveq #2,d0
}
    ef20:	\----> addq.l #4,sp
    ef22:	       rts

0000ef24 <builtIn_positionStatus>:

builtIn(positionStatus)
{
    ef24:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ef26:	       movea.l 16(sp),a0
    ef2a:	       move.l 24(a0),d0
    ef2e:	       move.l d0,-(sp)
    ef30:	       pea 1 <_start+0x1>
    ef34:	       move.l sp,d0
    ef36:	       addq.l #8,d0
    ef38:	       move.l d0,-(sp)
    ef3a:	       jsr 11a02 <getValueType>
    ef40:	       lea 12(sp),sp
    ef44:	       tst.w d0
    ef46:	   /-- bne.s ef4c <builtIn_positionStatus+0x28>
    ef48:	   |   moveq #1,d0
    ef4a:	/--|-- bra.s efa6 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
    ef4c:	|  \-> moveq #24,d0
    ef4e:	|      add.l 16(sp),d0
    ef52:	|      move.l d0,-(sp)
    ef54:	|      jsr 12386 <trimStack>
    ef5a:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ef5c:	|      movea.l 16(sp),a0
    ef60:	|      move.l 24(a0),d0
    ef64:	|      move.l d0,-(sp)
    ef66:	|      pea 1 <_start+0x1>
    ef6a:	|      moveq #12,d0
    ef6c:	|      add.l sp,d0
    ef6e:	|      move.l d0,-(sp)
    ef70:	|      jsr 11a02 <getValueType>
    ef76:	|      lea 12(sp),sp
    ef7a:	|      tst.w d0
    ef7c:	|  /-- bne.s ef82 <builtIn_positionStatus+0x5e>
    ef7e:	|  |   moveq #1,d0
    ef80:	+--|-- bra.s efa6 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
    ef82:	|  \-> moveq #24,d0
    ef84:	|      add.l 16(sp),d0
    ef88:	|      move.l d0,-(sp)
    ef8a:	|      jsr 12386 <trimStack>
    ef90:	|      addq.l #4,sp
	positionStatus (x, y);
    ef92:	|      move.l (sp),d1
    ef94:	|      move.l 4(sp),d0
    ef98:	|      move.l d1,-(sp)
    ef9a:	|      move.l d0,-(sp)
    ef9c:	|      jsr 51d0 <positionStatus>
    efa2:	|      addq.l #8,sp
	return BR_CONTINUE;
    efa4:	|      moveq #2,d0
}
    efa6:	\----> addq.l #8,sp
    efa8:	       rts

0000efaa <builtIn_alignStatus>:

builtIn(alignStatus)
{
    efaa:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    efac:	       movea.l 12(sp),a0
    efb0:	       move.l 24(a0),d0
    efb4:	       move.l d0,-(sp)
    efb6:	       pea 1 <_start+0x1>
    efba:	       move.l sp,d0
    efbc:	       addq.l #8,d0
    efbe:	       move.l d0,-(sp)
    efc0:	       jsr 11a02 <getValueType>
    efc6:	       lea 12(sp),sp
    efca:	       tst.w d0
    efcc:	   /-- bne.s efd2 <builtIn_alignStatus+0x28>
    efce:	   |   moveq #1,d0
    efd0:	/--|-- bra.s eff2 <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
    efd2:	|  \-> moveq #24,d0
    efd4:	|      add.l 12(sp),d0
    efd8:	|      move.l d0,-(sp)
    efda:	|      jsr 12386 <trimStack>
    efe0:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
    efe2:	|      move.l (sp),d0
    efe4:	|      movea.l 18560 <nowStatus>,a0
    efea:	|      move.l d0,d0
    efec:	|      move.w d0,4(a0)
	return BR_CONTINUE;
    eff0:	|      moveq #2,d0
}
    eff2:	\----> addq.l #4,sp
    eff4:	       rts

0000eff6 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
    eff6:	             tst.l 4(sp)
    effa:	      /----- beq.s f006 <getFuncNumForCallback+0x10>
    effc:	      |      moveq #1,d0
    effe:	      |      cmp.l 4(sp),d0
    f002:	      |  /-- beq.s f00c <getFuncNumForCallback+0x16>
    f004:	   /--|--|-- bra.s f042 <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
    f006:	   |  \--|-> clr.l 12(sp)
			break;
    f00a:	/--|-----|-- bra.s f054 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
    f00c:	|  |     \-> movea.l 8(sp),a0
    f010:	|  |         move.l 24(a0),d0
    f014:	|  |         move.l d0,-(sp)
    f016:	|  |         pea 2 <_start+0x2>
    f01a:	|  |         move.l 20(sp),-(sp)
    f01e:	|  |         jsr 11a02 <getValueType>
    f024:	|  |         lea 12(sp),sp
    f028:	|  |         tst.w d0
    f02a:	|  |     /-- bne.s f030 <getFuncNumForCallback+0x3a>
    f02c:	|  |     |   clr.w d0
    f02e:	|  |  /--|-- bra.s f056 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
    f030:	|  |  |  \-> moveq #24,d0
    f032:	|  |  |      add.l 8(sp),d0
    f036:	|  |  |      move.l d0,-(sp)
    f038:	|  |  |      jsr 12386 <trimStack>
    f03e:	|  |  |      addq.l #4,sp
			break;
    f040:	+--|--|----- bra.s f054 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
    f042:	|  \--|----> pea 15e9b <custom.c.36a9b171+0x12a1>
    f048:	|     |      jsr 13a4a <KPrintF>
    f04e:	|     |      addq.l #4,sp
			return FALSE;
    f050:	|     |      clr.w d0
    f052:	|     +----- bra.s f056 <getFuncNumForCallback+0x60>
	}
	return TRUE;
    f054:	\-----|----> moveq #1,d0
}
    f056:	      \----> rts

0000f058 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
    f058:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f05a:	       move.l sp,d0
    f05c:	       move.l d0,-(sp)
    f05e:	       move.l 16(sp),-(sp)
    f062:	       move.l 16(sp),-(sp)
    f066:	       jsr eff6 <getFuncNumForCallback>
    f06c:	       lea 12(sp),sp
    f070:	       tst.w d0
    f072:	/----- beq.s f082 <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
    f074:	|      movea.l 18552 <currentEvents>,a0
    f07a:	|      move.l (sp),d0
    f07c:	|      move.l d0,(a0)
		return BR_CONTINUE;
    f07e:	|      moveq #2,d0
    f080:	|  /-- bra.s f084 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
    f082:	\--|-> moveq #1,d0
}
    f084:	   \-> addq.l #4,sp
    f086:	       rts

0000f088 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
    f088:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f08a:	       move.l sp,d0
    f08c:	       move.l d0,-(sp)
    f08e:	       move.l 16(sp),-(sp)
    f092:	       move.l 16(sp),-(sp)
    f096:	       jsr eff6 <getFuncNumForCallback>
    f09c:	       lea 12(sp),sp
    f0a0:	       tst.w d0
    f0a2:	/----- beq.s f0b4 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
    f0a4:	|      movea.l 18552 <currentEvents>,a0
    f0aa:	|      move.l (sp),d0
    f0ac:	|      move.l d0,4(a0)
		return BR_CONTINUE;
    f0b0:	|      moveq #2,d0
    f0b2:	|  /-- bra.s f0b6 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
    f0b4:	\--|-> moveq #1,d0
}
    f0b6:	   \-> addq.l #4,sp
    f0b8:	       rts

0000f0ba <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
    f0ba:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f0bc:	       move.l sp,d0
    f0be:	       move.l d0,-(sp)
    f0c0:	       move.l 16(sp),-(sp)
    f0c4:	       move.l 16(sp),-(sp)
    f0c8:	       jsr eff6 <getFuncNumForCallback>
    f0ce:	       lea 12(sp),sp
    f0d2:	       tst.w d0
    f0d4:	/----- beq.s f0e6 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
    f0d6:	|      movea.l 18552 <currentEvents>,a0
    f0dc:	|      move.l (sp),d0
    f0de:	|      move.l d0,8(a0)
		return BR_CONTINUE;
    f0e2:	|      moveq #2,d0
    f0e4:	|  /-- bra.s f0e8 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
    f0e6:	\--|-> moveq #1,d0
}
    f0e8:	   \-> addq.l #4,sp
    f0ea:	       rts

0000f0ec <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
    f0ec:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f0ee:	       move.l sp,d0
    f0f0:	       move.l d0,-(sp)
    f0f2:	       move.l 16(sp),-(sp)
    f0f6:	       move.l 16(sp),-(sp)
    f0fa:	       jsr eff6 <getFuncNumForCallback>
    f100:	       lea 12(sp),sp
    f104:	       tst.w d0
    f106:	/----- beq.s f118 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
    f108:	|      movea.l 18552 <currentEvents>,a0
    f10e:	|      move.l (sp),d0
    f110:	|      move.l d0,12(a0)
		return BR_CONTINUE;
    f114:	|      moveq #2,d0
    f116:	|  /-- bra.s f11a <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
    f118:	\--|-> moveq #1,d0
}
    f11a:	   \-> addq.l #4,sp
    f11c:	       rts

0000f11e <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
    f11e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f120:	       move.l sp,d0
    f122:	       move.l d0,-(sp)
    f124:	       move.l 16(sp),-(sp)
    f128:	       move.l 16(sp),-(sp)
    f12c:	       jsr eff6 <getFuncNumForCallback>
    f132:	       lea 12(sp),sp
    f136:	       tst.w d0
    f138:	/----- beq.s f14a <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
    f13a:	|      movea.l 18552 <currentEvents>,a0
    f140:	|      move.l (sp),d0
    f142:	|      move.l d0,20(a0)
		return BR_CONTINUE;
    f146:	|      moveq #2,d0
    f148:	|  /-- bra.s f14c <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
    f14a:	\--|-> moveq #1,d0
}
    f14c:	   \-> addq.l #4,sp
    f14e:	       rts

0000f150 <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
    f150:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f152:	       move.l sp,d0
    f154:	       move.l d0,-(sp)
    f156:	       move.l 16(sp),-(sp)
    f15a:	       move.l 16(sp),-(sp)
    f15e:	       jsr eff6 <getFuncNumForCallback>
    f164:	       lea 12(sp),sp
    f168:	       tst.w d0
    f16a:	/----- beq.s f17c <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
    f16c:	|      movea.l 18552 <currentEvents>,a0
    f172:	|      move.l (sp),d0
    f174:	|      move.l d0,16(a0)
		return BR_CONTINUE;
    f178:	|      moveq #2,d0
    f17a:	|  /-- bra.s f17e <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
    f17c:	\--|-> moveq #1,d0
}
    f17e:	   \-> addq.l #4,sp
    f180:	       rts

0000f182 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
    f182:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f184:	       move.l sp,d0
    f186:	       move.l d0,-(sp)
    f188:	       move.l 16(sp),-(sp)
    f18c:	       move.l 16(sp),-(sp)
    f190:	       jsr eff6 <getFuncNumForCallback>
    f196:	       lea 12(sp),sp
    f19a:	       tst.w d0
    f19c:	/----- beq.s f1ae <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
    f19e:	|      movea.l 18552 <currentEvents>,a0
    f1a4:	|      move.l (sp),d0
    f1a6:	|      move.l d0,24(a0)
		return BR_CONTINUE;
    f1aa:	|      moveq #2,d0
    f1ac:	|  /-- bra.s f1b0 <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
    f1ae:	\--|-> moveq #1,d0
}
    f1b0:	   \-> addq.l #4,sp
    f1b2:	       rts

0000f1b4 <builtIn_spawnSub>:

builtIn (spawnSub)
{
    f1b4:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f1b6:	          move.l sp,d0
    f1b8:	          move.l d0,-(sp)
    f1ba:	          move.l 16(sp),-(sp)
    f1be:	          move.l 16(sp),-(sp)
    f1c2:	          jsr eff6 <getFuncNumForCallback>
    f1c8:	          lea 12(sp),sp
    f1cc:	          tst.w d0
    f1ce:	/-------- beq.s f1fa <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
    f1d0:	|         move.l 18b90 <noStack>,d1
    f1d6:	|         move.l (sp),d0
    f1d8:	|         pea 1 <_start+0x1>
    f1dc:	|         move.l d1,-(sp)
    f1de:	|         clr.l -(sp)
    f1e0:	|         clr.l -(sp)
    f1e2:	|         move.l d0,-(sp)
    f1e4:	|         jsr 42e0 <startNewFunctionNum>
    f1ea:	|         lea 20(sp),sp
    f1ee:	|         tst.l d0
    f1f0:	|     /-- bne.s f1f6 <builtIn_spawnSub+0x42>
    f1f2:	|     |   moveq #1,d0
    f1f4:	|  /--|-- bra.s f1fc <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
    f1f6:	|  |  \-> moveq #2,d0
    f1f8:	|  +----- bra.s f1fc <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
    f1fa:	\--|----> moveq #1,d0
}
    f1fc:	   \----> addq.l #4,sp
    f1fe:	          rts

0000f200 <builtIn_cancelSub>:

builtIn (cancelSub)
{
    f200:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f202:	          move.l sp,d0
    f204:	          addq.l #4,d0
    f206:	          move.l d0,-(sp)
    f208:	          move.l 20(sp),-(sp)
    f20c:	          move.l 20(sp),-(sp)
    f210:	          jsr eff6 <getFuncNumForCallback>
    f216:	          lea 12(sp),sp
    f21a:	          tst.w d0
    f21c:	/-------- beq.s f252 <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
    f21e:	|         move.l 4(sp),d1
    f222:	|         move.l sp,d0
    f224:	|         addq.l #2,d0
    f226:	|         move.l d0,-(sp)
    f228:	|         move.l 20(sp),-(sp)
    f22c:	|         move.l d1,-(sp)
    f22e:	|         jsr 2298 <cancelAFunction>
    f234:	|         lea 12(sp),sp
		if (killedMyself) {
    f238:	|         move.w 2(sp),d0
    f23c:	|  /----- beq.s f24e <builtIn_cancelSub+0x4e>
			abortFunction (fun);
    f23e:	|  |      move.l 16(sp),-(sp)
    f242:	|  |      jsr 21b6 <abortFunction>
    f248:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
    f24a:	|  |      moveq #5,d0
    f24c:	|  |  /-- bra.s f254 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
    f24e:	|  \--|-> moveq #2,d0
    f250:	|     +-- bra.s f254 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
    f252:	\-----|-> moveq #1,d0
}
    f254:	      \-> addq.l #8,sp
    f256:	          rts

0000f258 <builtIn_stringWidth>:

builtIn(stringWidth)
{
    f258:	       subq.l #8,sp
    f25a:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
    f25c:	       movea.l 20(sp),a0
    f260:	       move.l 24(a0),d0
    f264:	       move.l d0,-(sp)
    f266:	       jsr 11fd8 <getTextFromAnyVar>
    f26c:	       addq.l #4,sp
    f26e:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
    f272:	   /-- bne.s f278 <builtIn_stringWidth+0x20>
    f274:	   |   moveq #1,d0
    f276:	/--|-- bra.s f2c6 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
    f278:	|  \-> moveq #24,d0
    f27a:	|      add.l 20(sp),d0
    f27e:	|      move.l d0,-(sp)
    f280:	|      jsr 12386 <trimStack>
    f286:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
    f288:	|      move.l 8(sp),-(sp)
    f28c:	|      jsr 123e0 <stringWidth>
    f292:	|      addq.l #4,sp
    f294:	|      move.l d0,d1
    f296:	|      moveq #28,d0
    f298:	|      add.l 20(sp),d0
    f29c:	|      move.l d1,-(sp)
    f29e:	|      pea 1 <_start+0x1>
    f2a2:	|      move.l d0,-(sp)
    f2a4:	|      jsr 122f4 <setVariable>
    f2aa:	|      lea 12(sp),sp
	FreeVec(theText);
    f2ae:	|      move.l 8(sp),4(sp)
    f2b4:	|      move.l 18bc0 <SysBase>,d0
    f2ba:	|      movea.l d0,a6
    f2bc:	|      movea.l 4(sp),a1
    f2c0:	|      jsr -690(a6)
	return BR_CONTINUE;
    f2c4:	|      moveq #2,d0
}
    f2c6:	\----> movea.l (sp)+,a6
    f2c8:	       addq.l #8,sp
    f2ca:	       rts

0000f2cc <builtIn_hardScroll>:

builtIn(hardScroll)
{
    f2cc:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f2ce:	       movea.l 12(sp),a0
    f2d2:	       move.l 24(a0),d0
    f2d6:	       move.l d0,-(sp)
    f2d8:	       pea 1 <_start+0x1>
    f2dc:	       move.l sp,d0
    f2de:	       addq.l #8,d0
    f2e0:	       move.l d0,-(sp)
    f2e2:	       jsr 11a02 <getValueType>
    f2e8:	       lea 12(sp),sp
    f2ec:	       tst.w d0
    f2ee:	   /-- bne.s f2f4 <builtIn_hardScroll+0x28>
    f2f0:	   |   moveq #1,d0
    f2f2:	/--|-- bra.s f312 <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
    f2f4:	|  \-> moveq #24,d0
    f2f6:	|      add.l 12(sp),d0
    f2fa:	|      move.l d0,-(sp)
    f2fc:	|      jsr 12386 <trimStack>
    f302:	|      addq.l #4,sp
	hardScroll (v);
    f304:	|      move.l (sp),d0
    f306:	|      move.l d0,-(sp)
    f308:	|      jsr a596 <hardScroll>
    f30e:	|      addq.l #4,sp
	return BR_CONTINUE;
    f310:	|      moveq #2,d0
}
    f312:	\----> addq.l #4,sp
    f314:	       rts

0000f316 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
    f316:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f318:	       movea.l 12(sp),a0
    f31c:	       move.l 24(a0),d0
    f320:	       move.l d0,-(sp)
    f322:	       pea 7 <_start+0x7>
    f326:	       move.l sp,d0
    f328:	       addq.l #8,d0
    f32a:	       move.l d0,-(sp)
    f32c:	       jsr 11a02 <getValueType>
    f332:	       lea 12(sp),sp
    f336:	       tst.w d0
    f338:	   /-- bne.s f33e <builtIn_isScreenRegion+0x28>
    f33a:	   |   moveq #1,d0
    f33c:	/--|-- bra.s f37e <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
    f33e:	|  \-> moveq #24,d0
    f340:	|      add.l 12(sp),d0
    f344:	|      move.l d0,-(sp)
    f346:	|      jsr 12386 <trimStack>
    f34c:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
    f34e:	|      move.l (sp),d0
    f350:	|      move.l d0,-(sp)
    f352:	|      jsr 124cc <getRegionForObject>
    f358:	|      addq.l #4,sp
    f35a:	|      tst.l d0
    f35c:	|      sne d0
    f35e:	|      neg.b d0
    f360:	|      moveq #0,d1
    f362:	|      move.b d0,d1
    f364:	|      moveq #28,d0
    f366:	|      add.l 12(sp),d0
    f36a:	|      move.l d1,-(sp)
    f36c:	|      pea 1 <_start+0x1>
    f370:	|      move.l d0,-(sp)
    f372:	|      jsr 122f4 <setVariable>
    f378:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f37c:	|      moveq #2,d0
}
    f37e:	\----> addq.l #4,sp
    f380:	       rts

0000f382 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
    f382:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f384:	       movea.l 12(sp),a0
    f388:	       move.l 24(a0),d0
    f38c:	       move.l d0,-(sp)
    f38e:	       pea 1 <_start+0x1>
    f392:	       move.l sp,d0
    f394:	       addq.l #8,d0
    f396:	       move.l d0,-(sp)
    f398:	       jsr 11a02 <getValueType>
    f39e:	       lea 12(sp),sp
    f3a2:	       tst.w d0
    f3a4:	   /-- bne.s f3aa <builtIn_setSpeechSpeed+0x28>
    f3a6:	   |   moveq #1,d0
    f3a8:	/--|-- bra.s f3f8 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
    f3aa:	|  \-> moveq #24,d0
    f3ac:	|      add.l 12(sp),d0
    f3b0:	|      move.l d0,-(sp)
    f3b2:	|      jsr 12386 <trimStack>
    f3b8:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
    f3ba:	|      move.l (sp),d0
    f3bc:	|      move.l d0,-(sp)
    f3be:	|      jsr 13d02 <__floatsisf>
    f3c4:	|      addq.l #4,sp
    f3c6:	|      move.l #1008981770,-(sp)
    f3cc:	|      move.l d0,-(sp)
    f3ce:	|      jsr 13db4 <__mulsf3>
    f3d4:	|      addq.l #8,sp
    f3d6:	|      move.l d0,18564 <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
    f3dc:	|      moveq #28,d0
    f3de:	|      add.l 12(sp),d0
    f3e2:	|      pea 1 <_start+0x1>
    f3e6:	|      pea 1 <_start+0x1>
    f3ea:	|      move.l d0,-(sp)
    f3ec:	|      jsr 122f4 <setVariable>
    f3f2:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f3f6:	|      moveq #2,d0
}
    f3f8:	\----> addq.l #4,sp
    f3fa:	       rts

0000f3fc <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
    f3fc:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f3fe:	       movea.l 12(sp),a0
    f402:	       move.l 24(a0),d0
    f406:	       move.l d0,-(sp)
    f408:	       pea 1 <_start+0x1>
    f40c:	       move.l sp,d0
    f40e:	       addq.l #8,d0
    f410:	       move.l d0,-(sp)
    f412:	       jsr 11a02 <getValueType>
    f418:	       lea 12(sp),sp
    f41c:	       tst.w d0
    f41e:	   /-- bne.s f424 <builtIn_setFontSpacing+0x28>
    f420:	   |   moveq #1,d0
    f422:	/--|-- bra.s f45a <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
    f424:	|  \-> move.l (sp),d0
    f426:	|      move.l d0,d0
    f428:	|      move.w d0,18ade <fontSpace>
	trimStack (&fun -> stack);
    f42e:	|      moveq #24,d0
    f430:	|      add.l 12(sp),d0
    f434:	|      move.l d0,-(sp)
    f436:	|      jsr 12386 <trimStack>
    f43c:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    f43e:	|      moveq #28,d0
    f440:	|      add.l 12(sp),d0
    f444:	|      pea 1 <_start+0x1>
    f448:	|      pea 1 <_start+0x1>
    f44c:	|      move.l d0,-(sp)
    f44e:	|      jsr 122f4 <setVariable>
    f454:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f458:	|      moveq #2,d0
}
    f45a:	\----> addq.l #4,sp
    f45c:	       rts

0000f45e <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
    f45e:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f460:	          movea.l 12(sp),a0
    f464:	          move.l 24(a0),d0
    f468:	          move.l d0,-(sp)
    f46a:	          pea 1 <_start+0x1>
    f46e:	          move.l sp,d0
    f470:	          addq.l #8,d0
    f472:	          move.l d0,-(sp)
    f474:	          jsr 11a02 <getValueType>
    f47a:	          lea 12(sp),sp
    f47e:	          tst.w d0
    f480:	      /-- bne.s f486 <builtIn_transitionLevel+0x28>
    f482:	      |   moveq #1,d0
    f484:	/-----|-- bra.s f4da <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
    f486:	|     \-> moveq #24,d0
    f488:	|         add.l 12(sp),d0
    f48c:	|         move.l d0,-(sp)
    f48e:	|         jsr 12386 <trimStack>
    f494:	|         addq.l #4,sp

	if (number < 0)
    f496:	|         move.l (sp),d0
    f498:	|     /-- bpl.s f4a2 <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
    f49a:	|     |   clr.b 18550 <brightnessLevel>
    f4a0:	|  /--|-- bra.s f4be <builtIn_transitionLevel+0x60>
	else if (number > 255)
    f4a2:	|  |  \-> move.l (sp),d0
    f4a4:	|  |      cmpi.l #255,d0
    f4aa:	|  |  /-- ble.s f4b4 <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
    f4ac:	|  |  |   st 18550 <brightnessLevel>
    f4b2:	|  +--|-- bra.s f4be <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
    f4b4:	|  |  \-> move.l (sp),d0
    f4b6:	|  |      move.l d0,d0
    f4b8:	|  |      move.b d0,18550 <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
    f4be:	|  \----> moveq #28,d0
    f4c0:	|         add.l 12(sp),d0
    f4c4:	|         pea 1 <_start+0x1>
    f4c8:	|         pea 1 <_start+0x1>
    f4cc:	|         move.l d0,-(sp)
    f4ce:	|         jsr 122f4 <setVariable>
    f4d4:	|         lea 12(sp),sp
	return BR_CONTINUE;
    f4d8:	|         moveq #2,d0
}
    f4da:	\-------> addq.l #4,sp
    f4dc:	          rts

0000f4de <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
    f4de:	movea.l 8(sp),a0
    f4e2:	move.l 24(a0),d0
    f4e6:	move.l d0,-(sp)
    f4e8:	jsr 11f42 <getBoolean>
    f4ee:	addq.l #4,sp
    f4f0:	move.w d0,18b60 <captureAllKeys>
	trimStack (&fun -> stack);
    f4f6:	moveq #24,d0
    f4f8:	add.l 8(sp),d0
    f4fc:	move.l d0,-(sp)
    f4fe:	jsr 12386 <trimStack>
    f504:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
    f506:	move.w 18b60 <captureAllKeys>,d0
    f50c:	movea.w d0,a0
    f50e:	moveq #28,d0
    f510:	add.l 8(sp),d0
    f514:	move.l a0,-(sp)
    f516:	pea 1 <_start+0x1>
    f51a:	move.l d0,-(sp)
    f51c:	jsr 122f4 <setVariable>
    f522:	lea 12(sp),sp
	return BR_CONTINUE;
    f526:	moveq #2,d0
}
    f528:	rts

0000f52a <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
    f52a:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f52e:	       movea.l 20(sp),a0
    f532:	       move.l 24(a0),d0
    f536:	       move.l d0,-(sp)
    f538:	       pea 1 <_start+0x1>
    f53c:	       moveq #12,d0
    f53e:	       add.l sp,d0
    f540:	       move.l d0,-(sp)
    f542:	       jsr 11a02 <getValueType>
    f548:	       lea 12(sp),sp
    f54c:	       tst.w d0
    f54e:	   /-- bne.s f556 <builtIn_spinCharacter+0x2c>
    f550:	   |   moveq #1,d0
    f552:	/--|-- bra.w f606 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
    f556:	|  \-> moveq #24,d0
    f558:	|      add.l 20(sp),d0
    f55c:	|      move.l d0,-(sp)
    f55e:	|      jsr 12386 <trimStack>
    f564:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f566:	|      movea.l 20(sp),a0
    f56a:	|      move.l 24(a0),d0
    f56e:	|      move.l d0,-(sp)
    f570:	|      pea 7 <_start+0x7>
    f574:	|      lea 8(sp),a0
    f578:	|      move.l a0,-(sp)
    f57a:	|      jsr 11a02 <getValueType>
    f580:	|      lea 12(sp),sp
    f584:	|      tst.w d0
    f586:	|  /-- bne.s f58c <builtIn_spinCharacter+0x62>
    f588:	|  |   moveq #1,d0
    f58a:	+--|-- bra.s f606 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
    f58c:	|  \-> moveq #24,d0
    f58e:	|      add.l 20(sp),d0
    f592:	|      move.l d0,-(sp)
    f594:	|      jsr 12386 <trimStack>
    f59a:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    f59c:	|      move.l (sp),d0
    f59e:	|      move.l d0,-(sp)
    f5a0:	|      jsr 7aec <findPerson>
    f5a6:	|      addq.l #4,sp
    f5a8:	|      move.l d0,8(sp)
	if (thisPerson) {
    f5ac:	|  /-- beq.s f5ec <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
    f5ae:	|  |   move.l 4(sp),d0
    f5b2:	|  |   movea.l 8(sp),a0
    f5b6:	|  |   move.l d0,84(a0)
		thisPerson -> spinning = TRUE;
    f5ba:	|  |   movea.l 8(sp),a0
    f5be:	|  |   move.w #1,54(a0)
		thisPerson -> continueAfterWalking = fun;
    f5c4:	|  |   movea.l 8(sp),a0
    f5c8:	|  |   move.l 20(sp),56(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    f5ce:	|  |   moveq #28,d0
    f5d0:	|  |   add.l 20(sp),d0
    f5d4:	|  |   pea 1 <_start+0x1>
    f5d8:	|  |   pea 1 <_start+0x1>
    f5dc:	|  |   move.l d0,-(sp)
    f5de:	|  |   jsr 122f4 <setVariable>
    f5e4:	|  |   lea 12(sp),sp
		return BR_PAUSE;
    f5e8:	|  |   moveq #3,d0
    f5ea:	+--|-- bra.s f606 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    f5ec:	|  \-> moveq #28,d0
    f5ee:	|      add.l 20(sp),d0
    f5f2:	|      clr.l -(sp)
    f5f4:	|      pea 1 <_start+0x1>
    f5f8:	|      move.l d0,-(sp)
    f5fa:	|      jsr 122f4 <setVariable>
    f600:	|      lea 12(sp),sp
		return BR_CONTINUE;
    f604:	|      moveq #2,d0
	}
}
    f606:	\----> lea 12(sp),sp
    f60a:	       rts

0000f60c <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
    f60c:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f60e:	          movea.l 16(sp),a0
    f612:	          move.l 24(a0),d0
    f616:	          move.l d0,-(sp)
    f618:	          pea 7 <_start+0x7>
    f61c:	          move.l sp,d0
    f61e:	          addq.l #8,d0
    f620:	          move.l d0,-(sp)
    f622:	          jsr 11a02 <getValueType>
    f628:	          lea 12(sp),sp
    f62c:	          tst.w d0
    f62e:	      /-- bne.s f634 <builtIn_getCharacterDirection+0x28>
    f630:	      |   moveq #1,d0
    f632:	/-----|-- bra.s f692 <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
    f634:	|     \-> moveq #24,d0
    f636:	|         add.l 16(sp),d0
    f63a:	|         move.l d0,-(sp)
    f63c:	|         jsr 12386 <trimStack>
    f642:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    f644:	|         move.l (sp),d0
    f646:	|         move.l d0,-(sp)
    f648:	|         jsr 7aec <findPerson>
    f64e:	|         addq.l #4,sp
    f650:	|         move.l d0,4(sp)
	if (thisPerson) {
    f654:	|  /----- beq.s f678 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
    f656:	|  |      movea.l 4(sp),a0
    f65a:	|  |      move.l 94(a0),d1
    f65e:	|  |      moveq #28,d0
    f660:	|  |      add.l 16(sp),d0
    f664:	|  |      move.l d1,-(sp)
    f666:	|  |      pea 1 <_start+0x1>
    f66a:	|  |      move.l d0,-(sp)
    f66c:	|  |      jsr 122f4 <setVariable>
    f672:	|  |      lea 12(sp),sp
    f676:	|  |  /-- bra.s f690 <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    f678:	|  \--|-> moveq #28,d0
    f67a:	|     |   add.l 16(sp),d0
    f67e:	|     |   clr.l -(sp)
    f680:	|     |   pea 1 <_start+0x1>
    f684:	|     |   move.l d0,-(sp)
    f686:	|     |   jsr 122f4 <setVariable>
    f68c:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    f690:	|     \-> moveq #2,d0
}
    f692:	\-------> addq.l #8,sp
    f694:	          rts

0000f696 <builtIn_isCharacter>:

builtIn(isCharacter)
{
    f696:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f698:	       movea.l 16(sp),a0
    f69c:	       move.l 24(a0),d0
    f6a0:	       move.l d0,-(sp)
    f6a2:	       pea 7 <_start+0x7>
    f6a6:	       move.l sp,d0
    f6a8:	       addq.l #8,d0
    f6aa:	       move.l d0,-(sp)
    f6ac:	       jsr 11a02 <getValueType>
    f6b2:	       lea 12(sp),sp
    f6b6:	       tst.w d0
    f6b8:	   /-- bne.s f6be <builtIn_isCharacter+0x28>
    f6ba:	   |   moveq #1,d0
    f6bc:	/--|-- bra.s f700 <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
    f6be:	|  \-> moveq #24,d0
    f6c0:	|      add.l 16(sp),d0
    f6c4:	|      move.l d0,-(sp)
    f6c6:	|      jsr 12386 <trimStack>
    f6cc:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    f6ce:	|      move.l (sp),d0
    f6d0:	|      move.l d0,-(sp)
    f6d2:	|      jsr 7aec <findPerson>
    f6d8:	|      addq.l #4,sp
    f6da:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
    f6de:	|      sne d0
    f6e0:	|      neg.b d0
    f6e2:	|      moveq #0,d1
    f6e4:	|      move.b d0,d1
    f6e6:	|      moveq #28,d0
    f6e8:	|      add.l 16(sp),d0
    f6ec:	|      move.l d1,-(sp)
    f6ee:	|      pea 1 <_start+0x1>
    f6f2:	|      move.l d0,-(sp)
    f6f4:	|      jsr 122f4 <setVariable>
    f6fa:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f6fe:	|      moveq #2,d0
}
    f700:	\----> addq.l #8,sp
    f702:	       rts

0000f704 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
    f704:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f706:	          movea.l 16(sp),a0
    f70a:	          move.l 24(a0),d0
    f70e:	          move.l d0,-(sp)
    f710:	          pea 7 <_start+0x7>
    f714:	          move.l sp,d0
    f716:	          addq.l #8,d0
    f718:	          move.l d0,-(sp)
    f71a:	          jsr 11a02 <getValueType>
    f720:	          lea 12(sp),sp
    f724:	          tst.w d0
    f726:	      /-- bne.s f72c <builtIn_normalCharacter+0x28>
    f728:	      |   moveq #1,d0
    f72a:	/-----|-- bra.s f7a8 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
    f72c:	|     \-> moveq #24,d0
    f72e:	|         add.l 16(sp),d0
    f732:	|         move.l d0,-(sp)
    f734:	|         jsr 12386 <trimStack>
    f73a:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    f73c:	|         move.l (sp),d0
    f73e:	|         move.l d0,-(sp)
    f740:	|         jsr 7aec <findPerson>
    f746:	|         addq.l #4,sp
    f748:	|         move.l d0,4(sp)
	if (thisPerson)
    f74c:	|  /----- beq.s f78e <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
    f74e:	|  |      movea.l 4(sp),a0
    f752:	|  |      movea.l 68(a0),a0
    f756:	|  |      move.l (a0),d1
    f758:	|  |      movea.l 4(sp),a0
    f75c:	|  |      move.l 94(a0),d0
    f760:	|  |      add.l d0,d0
    f762:	|  |      add.l d0,d0
    f764:	|  |      movea.l d1,a0
    f766:	|  |      adda.l d0,a0
    f768:	|  |      move.l (a0),d0
    f76a:	|  |      movea.l 4(sp),a0
    f76e:	|  |      move.l d0,60(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    f772:	|  |      moveq #28,d0
    f774:	|  |      add.l 16(sp),d0
    f778:	|  |      pea 1 <_start+0x1>
    f77c:	|  |      pea 1 <_start+0x1>
    f780:	|  |      move.l d0,-(sp)
    f782:	|  |      jsr 122f4 <setVariable>
    f788:	|  |      lea 12(sp),sp
    f78c:	|  |  /-- bra.s f7a6 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    f78e:	|  \--|-> moveq #28,d0
    f790:	|     |   add.l 16(sp),d0
    f794:	|     |   clr.l -(sp)
    f796:	|     |   pea 1 <_start+0x1>
    f79a:	|     |   move.l d0,-(sp)
    f79c:	|     |   jsr 122f4 <setVariable>
    f7a2:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    f7a6:	|     \-> moveq #2,d0
}
    f7a8:	\-------> addq.l #8,sp
    f7aa:	          rts

0000f7ac <builtIn_isMoving>:

builtIn(isMoving)
{
    f7ac:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f7ae:	          movea.l 16(sp),a0
    f7b2:	          move.l 24(a0),d0
    f7b6:	          move.l d0,-(sp)
    f7b8:	          pea 7 <_start+0x7>
    f7bc:	          move.l sp,d0
    f7be:	          addq.l #8,d0
    f7c0:	          move.l d0,-(sp)
    f7c2:	          jsr 11a02 <getValueType>
    f7c8:	          lea 12(sp),sp
    f7cc:	          tst.w d0
    f7ce:	      /-- bne.s f7d4 <builtIn_isMoving+0x28>
    f7d0:	      |   moveq #1,d0
    f7d2:	/-----|-- bra.s f834 <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
    f7d4:	|     \-> moveq #24,d0
    f7d6:	|         add.l 16(sp),d0
    f7da:	|         move.l d0,-(sp)
    f7dc:	|         jsr 12386 <trimStack>
    f7e2:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    f7e4:	|         move.l (sp),d0
    f7e6:	|         move.l d0,-(sp)
    f7e8:	|         jsr 7aec <findPerson>
    f7ee:	|         addq.l #4,sp
    f7f0:	|         move.l d0,4(sp)
	if (thisPerson)
    f7f4:	|  /----- beq.s f81a <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
    f7f6:	|  |      movea.l 4(sp),a0
    f7fa:	|  |      move.w 52(a0),d0
    f7fe:	|  |      movea.w d0,a0
    f800:	|  |      moveq #28,d0
    f802:	|  |      add.l 16(sp),d0
    f806:	|  |      move.l a0,-(sp)
    f808:	|  |      pea 1 <_start+0x1>
    f80c:	|  |      move.l d0,-(sp)
    f80e:	|  |      jsr 122f4 <setVariable>
    f814:	|  |      lea 12(sp),sp
    f818:	|  |  /-- bra.s f832 <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    f81a:	|  \--|-> moveq #28,d0
    f81c:	|     |   add.l 16(sp),d0
    f820:	|     |   clr.l -(sp)
    f822:	|     |   pea 1 <_start+0x1>
    f826:	|     |   move.l d0,-(sp)
    f828:	|     |   jsr 122f4 <setVariable>
    f82e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    f832:	|     \-> moveq #2,d0
}
    f834:	\-------> addq.l #8,sp
    f836:	          rts

0000f838 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
    f838:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f83c:	          movea.l 20(sp),a0
    f840:	          move.l 24(a0),d0
    f844:	          move.l d0,-(sp)
    f846:	          pea 7 <_start+0x7>
    f84a:	          lea 8(sp),a0
    f84e:	          move.l a0,-(sp)
    f850:	          jsr 11a02 <getValueType>
    f856:	          lea 12(sp),sp
    f85a:	          tst.w d0
    f85c:	      /-- bne.s f864 <builtIn_fetchEvent+0x2c>
    f85e:	      |   moveq #1,d0
    f860:	/-----|-- bra.w f8f8 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
    f864:	|     \-> moveq #24,d0
    f866:	|         add.l 20(sp),d0
    f86a:	|         move.l d0,-(sp)
    f86c:	|         jsr 12386 <trimStack>
    f872:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f874:	|         movea.l 20(sp),a0
    f878:	|         move.l 24(a0),d0
    f87c:	|         move.l d0,-(sp)
    f87e:	|         pea 7 <_start+0x7>
    f882:	|         moveq #12,d0
    f884:	|         add.l sp,d0
    f886:	|         move.l d0,-(sp)
    f888:	|         jsr 11a02 <getValueType>
    f88e:	|         lea 12(sp),sp
    f892:	|         tst.w d0
    f894:	|     /-- bne.s f89a <builtIn_fetchEvent+0x62>
    f896:	|     |   moveq #1,d0
    f898:	+-----|-- bra.s f8f8 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
    f89a:	|     \-> moveq #24,d0
    f89c:	|         add.l 20(sp),d0
    f8a0:	|         move.l d0,-(sp)
    f8a2:	|         jsr 12386 <trimStack>
    f8a8:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    f8aa:	|         move.l (sp),d1
    f8ac:	|         move.l 4(sp),d0
    f8b0:	|         move.l d1,-(sp)
    f8b2:	|         move.l d0,-(sp)
    f8b4:	|         jsr a86c <getCombinationFunction>
    f8ba:	|         addq.l #8,sp
    f8bc:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
    f8c0:	|  /----- beq.s f8de <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    f8c2:	|  |      moveq #28,d0
    f8c4:	|  |      add.l 20(sp),d0
    f8c8:	|  |      move.l 8(sp),-(sp)
    f8cc:	|  |      pea 2 <_start+0x2>
    f8d0:	|  |      move.l d0,-(sp)
    f8d2:	|  |      jsr 122f4 <setVariable>
    f8d8:	|  |      lea 12(sp),sp
    f8dc:	|  |  /-- bra.s f8f6 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    f8de:	|  \--|-> moveq #28,d0
    f8e0:	|     |   add.l 20(sp),d0
    f8e4:	|     |   clr.l -(sp)
    f8e6:	|     |   pea 1 <_start+0x1>
    f8ea:	|     |   move.l d0,-(sp)
    f8ec:	|     |   jsr 122f4 <setVariable>
    f8f2:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    f8f6:	|     \-> moveq #2,d0
}
    f8f8:	\-------> lea 12(sp),sp
    f8fc:	          rts

0000f8fe <builtIn_deleteFile>:

builtIn(deleteFile)
{
    f8fe:	       lea -24(sp),sp
    f902:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
    f904:	       movea.l 36(sp),a0
    f908:	       move.l 24(a0),d0
    f90c:	       move.l d0,-(sp)
    f90e:	       jsr 11fd8 <getTextFromAnyVar>
    f914:	       addq.l #4,sp
    f916:	       move.l d0,24(sp)
    trimStack(&fun->stack);
    f91a:	       moveq #24,d0
    f91c:	       add.l 36(sp),d0
    f920:	       move.l d0,-(sp)
    f922:	       jsr 12386 <trimStack>
    f928:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
    f92a:	       move.l 24(sp),-(sp)
    f92e:	       jsr 2fe <encodeFilename>
    f934:	       addq.l #4,sp
    f936:	       move.l d0,20(sp)
    FreeVec(namNormal);
    f93a:	       move.l 24(sp),16(sp)
    f940:	       move.l 18bc0 <SysBase>,d0
    f946:	       movea.l d0,a6
    f948:	       movea.l 16(sp),a1
    f94c:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
    f950:	       move.l 20(sp),-(sp)
    f954:	       jsr b624 <failSecurityCheck>
    f95a:	       addq.l #4,sp
    f95c:	       tst.w d0
    f95e:	   /-- beq.s f964 <builtIn_deleteFile+0x66>
    f960:	   |   moveq #1,d0
    f962:	/--|-- bra.s f9b2 <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
    f964:	|  \-> move.l 20(sp),12(sp)
    f96a:	|      move.l 18bc8 <DOSBase>,d0
    f970:	|      movea.l d0,a6
    f972:	|      move.l 12(sp),d1
    f976:	|      jsr -72(a6)
    f97a:	|      move.l d0,8(sp)
    f97e:	|      move.l 8(sp),d1
    f982:	|      moveq #28,d0
    f984:	|      add.l 36(sp),d0
    f988:	|      move.l d1,-(sp)
    f98a:	|      pea 1 <_start+0x1>
    f98e:	|      move.l d0,-(sp)
    f990:	|      jsr 122f4 <setVariable>
    f996:	|      lea 12(sp),sp
    FreeVec(nam);
    f99a:	|      move.l 20(sp),4(sp)
    f9a0:	|      move.l 18bc0 <SysBase>,d0
    f9a6:	|      movea.l d0,a6
    f9a8:	|      movea.l 4(sp),a1
    f9ac:	|      jsr -690(a6)

    return BR_CONTINUE;
    f9b0:	|      moveq #2,d0
}
    f9b2:	\----> movea.l (sp)+,a6
    f9b4:	       lea 24(sp),sp
    f9b8:	       rts

0000f9ba <builtIn_renameFile>:

builtIn(renameFile)
{
    f9ba:	       lea -40(sp),sp
    f9be:	       move.l a6,-(sp)
    f9c0:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
    f9c2:	       movea.l 56(sp),a0
    f9c6:	       move.l 24(a0),d0
    f9ca:	       move.l d0,-(sp)
    f9cc:	       jsr 11fd8 <getTextFromAnyVar>
    f9d2:	       addq.l #4,sp
    f9d4:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
    f9d8:	       move.l 44(sp),-(sp)
    f9dc:	       jsr 2fe <encodeFilename>
    f9e2:	       addq.l #4,sp
    f9e4:	       move.l d0,40(sp)
	trimStack(&fun->stack);
    f9e8:	       moveq #24,d0
    f9ea:	       add.l 56(sp),d0
    f9ee:	       move.l d0,-(sp)
    f9f0:	       jsr 12386 <trimStack>
    f9f6:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
    f9f8:	       move.l 40(sp),-(sp)
    f9fc:	       jsr b624 <failSecurityCheck>
    fa02:	       addq.l #4,sp
    fa04:	       tst.w d0
    fa06:	   /-- beq.s fa0e <builtIn_renameFile+0x54>
    fa08:	   |   moveq #1,d0
    fa0a:	/--|-- bra.w faf4 <builtIn_renameFile+0x13a>
	FreeVec(temp);
    fa0e:	|  \-> move.l 44(sp),36(sp)
    fa14:	|      move.l 18bc0 <SysBase>,d0
    fa1a:	|      movea.l d0,a6
    fa1c:	|      movea.l 36(sp),a1
    fa20:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
    fa24:	|      movea.l 56(sp),a0
    fa28:	|      move.l 24(a0),d0
    fa2c:	|      move.l d0,-(sp)
    fa2e:	|      jsr 11fd8 <getTextFromAnyVar>
    fa34:	|      addq.l #4,sp
    fa36:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
    fa3a:	|      move.l 44(sp),-(sp)
    fa3e:	|      jsr 2fe <encodeFilename>
    fa44:	|      addq.l #4,sp
    fa46:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
    fa4a:	|      moveq #24,d0
    fa4c:	|      add.l 56(sp),d0
    fa50:	|      move.l d0,-(sp)
    fa52:	|      jsr 12386 <trimStack>
    fa58:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
    fa5a:	|      move.l 32(sp),-(sp)
    fa5e:	|      jsr b624 <failSecurityCheck>
    fa64:	|      addq.l #4,sp
    fa66:	|      tst.w d0
    fa68:	|  /-- beq.s fa70 <builtIn_renameFile+0xb6>
    fa6a:	|  |   moveq #1,d0
    fa6c:	+--|-- bra.w faf4 <builtIn_renameFile+0x13a>
	FreeVec(temp);
    fa70:	|  \-> move.l 44(sp),28(sp)
    fa76:	|      move.l 18bc0 <SysBase>,d0
    fa7c:	|      movea.l d0,a6
    fa7e:	|      movea.l 28(sp),a1
    fa82:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
    fa86:	|      move.l 32(sp),24(sp)
    fa8c:	|      move.l 40(sp),20(sp)
    fa92:	|      move.l 18bc8 <DOSBase>,d0
    fa98:	|      movea.l d0,a6
    fa9a:	|      move.l 24(sp),d1
    fa9e:	|      move.l 20(sp),d2
    faa2:	|      jsr -78(a6)
    faa6:	|      move.l d0,16(sp)
    faaa:	|      move.l 16(sp),d1
    faae:	|      moveq #28,d0
    fab0:	|      add.l 56(sp),d0
    fab4:	|      move.l d1,-(sp)
    fab6:	|      pea 1 <_start+0x1>
    faba:	|      move.l d0,-(sp)
    fabc:	|      jsr 122f4 <setVariable>
    fac2:	|      lea 12(sp),sp
	FreeVec(nam);
    fac6:	|      move.l 32(sp),12(sp)
    facc:	|      move.l 18bc0 <SysBase>,d0
    fad2:	|      movea.l d0,a6
    fad4:	|      movea.l 12(sp),a1
    fad8:	|      jsr -690(a6)
	FreeVec(newnam);
    fadc:	|      move.l 40(sp),8(sp)
    fae2:	|      move.l 18bc0 <SysBase>,d0
    fae8:	|      movea.l d0,a6
    faea:	|      movea.l 8(sp),a1
    faee:	|      jsr -690(a6)

	return BR_CONTINUE;
    faf2:	|      moveq #2,d0
}
    faf4:	\----> move.l (sp)+,d2
    faf6:	       movea.l (sp)+,a6
    faf8:	       lea 40(sp),sp
    fafc:	       rts

0000fafe <builtIn_cacheSound>:

builtIn(cacheSound)
{
    fafe:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    fb00:	       movea.l 12(sp),a0
    fb04:	       move.l 24(a0),d0
    fb08:	       move.l d0,-(sp)
    fb0a:	       pea 5 <_start+0x5>
    fb0e:	       move.l sp,d0
    fb10:	       addq.l #8,d0
    fb12:	       move.l d0,-(sp)
    fb14:	       jsr 11a02 <getValueType>
    fb1a:	       lea 12(sp),sp
    fb1e:	       tst.w d0
    fb20:	   /-- bne.s fb26 <builtIn_cacheSound+0x28>
    fb22:	   |   moveq #1,d0
    fb24:	/--|-- bra.s fb4e <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
    fb26:	|  \-> moveq #24,d0
    fb28:	|      add.l 12(sp),d0
    fb2c:	|      move.l d0,-(sp)
    fb2e:	|      jsr 12386 <trimStack>
    fb34:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
    fb36:	|      move.l (sp),d0
    fb38:	|      move.l d0,-(sp)
    fb3a:	|      jsr a478 <cacheSound>
    fb40:	|      addq.l #4,sp
    fb42:	|      moveq #-1,d1
    fb44:	|      cmp.l d0,d1
    fb46:	|  /-- bne.s fb4c <builtIn_cacheSound+0x4e>
    fb48:	|  |   moveq #1,d0
    fb4a:	+--|-- bra.s fb4e <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
    fb4c:	|  \-> moveq #2,d0
}
    fb4e:	\----> addq.l #4,sp
    fb50:	       rts

0000fb52 <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
    fb52:	pea 15eb0 <custom.c.36a9b171+0x12b6>
    fb58:	jsr 13a4a <KPrintF>
    fb5e:	addq.l #4,sp
	return BR_CONTINUE;
    fb60:	moveq #2,d0
}
    fb62:	rts

0000fb64 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
    fb64:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fb68:	          movea.l 20(sp),a0
    fb6c:	          move.l 24(a0),d0
    fb70:	          move.l d0,-(sp)
    fb72:	          pea 1 <_start+0x1>
    fb76:	          moveq #12,d0
    fb78:	          add.l sp,d0
    fb7a:	          move.l d0,-(sp)
    fb7c:	          jsr 11a02 <getValueType>
    fb82:	          lea 12(sp),sp
    fb86:	          tst.w d0
    fb88:	      /-- bne.s fb90 <builtIn_setCharacterSpinSpeed+0x2c>
    fb8a:	      |   moveq #1,d0
    fb8c:	/-----|-- bra.w fc2a <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
    fb90:	|     \-> moveq #24,d0
    fb92:	|         add.l 20(sp),d0
    fb96:	|         move.l d0,-(sp)
    fb98:	|         jsr 12386 <trimStack>
    fb9e:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fba0:	|         movea.l 20(sp),a0
    fba4:	|         move.l 24(a0),d0
    fba8:	|         move.l d0,-(sp)
    fbaa:	|         pea 7 <_start+0x7>
    fbae:	|         lea 8(sp),a0
    fbb2:	|         move.l a0,-(sp)
    fbb4:	|         jsr 11a02 <getValueType>
    fbba:	|         lea 12(sp),sp
    fbbe:	|         tst.w d0
    fbc0:	|     /-- bne.s fbc6 <builtIn_setCharacterSpinSpeed+0x62>
    fbc2:	|     |   moveq #1,d0
    fbc4:	+-----|-- bra.s fc2a <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
    fbc6:	|     \-> moveq #24,d0
    fbc8:	|         add.l 20(sp),d0
    fbcc:	|         move.l d0,-(sp)
    fbce:	|         jsr 12386 <trimStack>
    fbd4:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
    fbd6:	|         move.l (sp),d0
    fbd8:	|         move.l d0,-(sp)
    fbda:	|         jsr 7aec <findPerson>
    fbe0:	|         addq.l #4,sp
    fbe2:	|         move.l d0,8(sp)

	if (thisPerson) {
    fbe6:	|  /----- beq.s fc10 <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
    fbe8:	|  |      move.l 4(sp),d0
    fbec:	|  |      movea.l 8(sp),a0
    fbf0:	|  |      move.l d0,110(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    fbf4:	|  |      moveq #28,d0
    fbf6:	|  |      add.l 20(sp),d0
    fbfa:	|  |      pea 1 <_start+0x1>
    fbfe:	|  |      pea 1 <_start+0x1>
    fc02:	|  |      move.l d0,-(sp)
    fc04:	|  |      jsr 122f4 <setVariable>
    fc0a:	|  |      lea 12(sp),sp
    fc0e:	|  |  /-- bra.s fc28 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    fc10:	|  \--|-> moveq #28,d0
    fc12:	|     |   add.l 20(sp),d0
    fc16:	|     |   clr.l -(sp)
    fc18:	|     |   pea 1 <_start+0x1>
    fc1c:	|     |   move.l d0,-(sp)
    fc1e:	|     |   jsr 122f4 <setVariable>
    fc24:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    fc28:	|     \-> moveq #2,d0
}
    fc2a:	\-------> lea 12(sp),sp
    fc2e:	          rts

0000fc30 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
    fc30:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fc34:	          movea.l 20(sp),a0
    fc38:	          move.l 24(a0),d0
    fc3c:	          move.l d0,-(sp)
    fc3e:	          pea 1 <_start+0x1>
    fc42:	          moveq #12,d0
    fc44:	          add.l sp,d0
    fc46:	          move.l d0,-(sp)
    fc48:	          jsr 11a02 <getValueType>
    fc4e:	          lea 12(sp),sp
    fc52:	          tst.w d0
    fc54:	      /-- bne.s fc5c <builtIn_setCharacterAngleOffset+0x2c>
    fc56:	      |   moveq #1,d0
    fc58:	/-----|-- bra.w fcf6 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
    fc5c:	|     \-> moveq #24,d0
    fc5e:	|         add.l 20(sp),d0
    fc62:	|         move.l d0,-(sp)
    fc64:	|         jsr 12386 <trimStack>
    fc6a:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fc6c:	|         movea.l 20(sp),a0
    fc70:	|         move.l 24(a0),d0
    fc74:	|         move.l d0,-(sp)
    fc76:	|         pea 7 <_start+0x7>
    fc7a:	|         lea 8(sp),a0
    fc7e:	|         move.l a0,-(sp)
    fc80:	|         jsr 11a02 <getValueType>
    fc86:	|         lea 12(sp),sp
    fc8a:	|         tst.w d0
    fc8c:	|     /-- bne.s fc92 <builtIn_setCharacterAngleOffset+0x62>
    fc8e:	|     |   moveq #1,d0
    fc90:	+-----|-- bra.s fcf6 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
    fc92:	|     \-> moveq #24,d0
    fc94:	|         add.l 20(sp),d0
    fc98:	|         move.l d0,-(sp)
    fc9a:	|         jsr 12386 <trimStack>
    fca0:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
    fca2:	|         move.l (sp),d0
    fca4:	|         move.l d0,-(sp)
    fca6:	|         jsr 7aec <findPerson>
    fcac:	|         addq.l #4,sp
    fcae:	|         move.l d0,8(sp)

	if (thisPerson) {
    fcb2:	|  /----- beq.s fcdc <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
    fcb4:	|  |      move.l 4(sp),d0
    fcb8:	|  |      movea.l 8(sp),a0
    fcbc:	|  |      move.l d0,88(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    fcc0:	|  |      moveq #28,d0
    fcc2:	|  |      add.l 20(sp),d0
    fcc6:	|  |      pea 1 <_start+0x1>
    fcca:	|  |      pea 1 <_start+0x1>
    fcce:	|  |      move.l d0,-(sp)
    fcd0:	|  |      jsr 122f4 <setVariable>
    fcd6:	|  |      lea 12(sp),sp
    fcda:	|  |  /-- bra.s fcf4 <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    fcdc:	|  \--|-> moveq #28,d0
    fcde:	|     |   add.l 20(sp),d0
    fce2:	|     |   clr.l -(sp)
    fce4:	|     |   pea 1 <_start+0x1>
    fce8:	|     |   move.l d0,-(sp)
    fcea:	|     |   jsr 122f4 <setVariable>
    fcf0:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    fcf4:	|     \-> moveq #2,d0
}
    fcf6:	\-------> lea 12(sp),sp
    fcfa:	          rts

0000fcfc <builtIn_transitionMode>:


builtIn(transitionMode)
{
    fcfc:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fcfe:	       movea.l 12(sp),a0
    fd02:	       move.l 24(a0),d0
    fd06:	       move.l d0,-(sp)
    fd08:	       pea 1 <_start+0x1>
    fd0c:	       move.l sp,d0
    fd0e:	       addq.l #8,d0
    fd10:	       move.l d0,-(sp)
    fd12:	       jsr 11a02 <getValueType>
    fd18:	       lea 12(sp),sp
    fd1c:	       tst.w d0
    fd1e:	   /-- bne.s fd24 <builtIn_transitionMode+0x28>
    fd20:	   |   moveq #1,d0
    fd22:	/--|-- bra.s fd5a <builtIn_transitionMode+0x5e>
	fadeMode = n;
    fd24:	|  \-> move.l (sp),d0
    fd26:	|      move.l d0,d0
    fd28:	|      move.b d0,18ab4 <fadeMode>
	trimStack (&fun -> stack);
    fd2e:	|      moveq #24,d0
    fd30:	|      add.l 12(sp),d0
    fd34:	|      move.l d0,-(sp)
    fd36:	|      jsr 12386 <trimStack>
    fd3c:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    fd3e:	|      moveq #28,d0
    fd40:	|      add.l 12(sp),d0
    fd44:	|      pea 1 <_start+0x1>
    fd48:	|      pea 1 <_start+0x1>
    fd4c:	|      move.l d0,-(sp)
    fd4e:	|      jsr 122f4 <setVariable>
    fd54:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fd58:	|      moveq #2,d0
}
    fd5a:	\----> addq.l #4,sp
    fd5c:	       rts

0000fd5e <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    fd5e:	moveq #24,d0
    fd60:	add.l 8(sp),d0
    fd64:	move.l d0,-(sp)
    fd66:	jsr 12386 <trimStack>
    fd6c:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
    fd6e:	moveq #28,d0
    fd70:	add.l 8(sp),d0
    fd74:	pea 1 <_start+0x1>
    fd78:	pea 1 <_start+0x1>
    fd7c:	move.l d0,-(sp)
    fd7e:	jsr 122f4 <setVariable>
    fd84:	lea 12(sp),sp
	return BR_CONTINUE;
    fd88:	moveq #2,d0
}
    fd8a:	rts

0000fd8c <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
    fd8c:	pea 15eda <custom.c.36a9b171+0x12e0>
    fd92:	jsr 13a4a <KPrintF>
    fd98:	addq.l #4,sp
	return BR_CONTINUE;
    fd9a:	moveq #2,d0
}
    fd9c:	rts

0000fd9e <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
    fd9e:	       lea -16(sp),sp
    fda2:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
    fda4:	       movea.l 28(sp),a0
    fda8:	       move.l 24(a0),d0
    fdac:	       move.l d0,-(sp)
    fdae:	       jsr 11fd8 <getTextFromAnyVar>
    fdb4:	       addq.l #4,sp
    fdb6:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
    fdba:	   /-- bne.s fdc2 <builtIn_saveCustomData+0x24>
    fdbc:	   |   moveq #1,d0
    fdbe:	/--|-- bra.w fe74 <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
    fdc2:	|  \-> move.l 16(sp),-(sp)
    fdc6:	|      jsr 2fe <encodeFilename>
    fdcc:	|      addq.l #4,sp
    fdce:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
    fdd2:	|      move.l 16(sp),8(sp)
    fdd8:	|      move.l 18bc0 <SysBase>,d0
    fdde:	|      movea.l d0,a6
    fde0:	|      movea.l 8(sp),a1
    fde4:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
    fde8:	|      move.l 12(sp),-(sp)
    fdec:	|      jsr b624 <failSecurityCheck>
    fdf2:	|      addq.l #4,sp
    fdf4:	|      tst.w d0
    fdf6:	|  /-- beq.s fdfc <builtIn_saveCustomData+0x5e>
    fdf8:	|  |   moveq #1,d0
    fdfa:	+--|-- bra.s fe74 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
    fdfc:	|  \-> moveq #24,d0
    fdfe:	|      add.l 28(sp),d0
    fe02:	|      move.l d0,-(sp)
    fe04:	|      jsr 12386 <trimStack>
    fe0a:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
    fe0c:	|      movea.l 28(sp),a0
    fe10:	|      movea.l 24(a0),a0
    fe14:	|      move.l (a0),d0
    fe16:	|      moveq #6,d1
    fe18:	|      cmp.l d0,d1
    fe1a:	|  /-- beq.s fe2e <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
    fe1c:	|  |   pea 15f07 <custom.c.36a9b171+0x130d>
    fe22:	|  |   jsr 13a4a <KPrintF>
    fe28:	|  |   addq.l #4,sp
		return BR_ERROR;
    fe2a:	|  |   moveq #1,d0
    fe2c:	+--|-- bra.s fe74 <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
    fe2e:	|  \-> movea.l 28(sp),a0
    fe32:	|      move.l 24(a0),d0
    fe36:	|      move.l d0,-(sp)
    fe38:	|      move.l 16(sp),-(sp)
    fe3c:	|      jsr b274 <stackToFile>
    fe42:	|      addq.l #8,sp
    fe44:	|      tst.w d0
    fe46:	|  /-- bne.s fe4c <builtIn_saveCustomData+0xae>
    fe48:	|  |   moveq #1,d0
    fe4a:	+--|-- bra.s fe74 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
    fe4c:	|  \-> moveq #24,d0
    fe4e:	|      add.l 28(sp),d0
    fe52:	|      move.l d0,-(sp)
    fe54:	|      jsr 12386 <trimStack>
    fe5a:	|      addq.l #4,sp
	FreeVec(fileName);
    fe5c:	|      move.l 12(sp),4(sp)
    fe62:	|      move.l 18bc0 <SysBase>,d0
    fe68:	|      movea.l d0,a6
    fe6a:	|      movea.l 4(sp),a1
    fe6e:	|      jsr -690(a6)
	return BR_CONTINUE;
    fe72:	|      moveq #2,d0
}
    fe74:	\----> movea.l (sp)+,a6
    fe76:	       lea 16(sp),sp
    fe7a:	       rts

0000fe7c <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
    fe7c:	       lea -28(sp),sp
    fe80:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    fe82:	       movea.l 40(sp),a0
    fe86:	       move.l 24(a0),d0
    fe8a:	       move.l d0,-(sp)
    fe8c:	       jsr 11fd8 <getTextFromAnyVar>
    fe92:	       addq.l #4,sp
    fe94:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
    fe98:	   /-- bne.s fea0 <builtIn_loadCustomData+0x24>
    fe9a:	   |   moveq #1,d0
    fe9c:	/--|-- bra.w ff9c <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
    fea0:	|  \-> move.l 28(sp),-(sp)
    fea4:	|      jsr 2fe <encodeFilename>
    feaa:	|      addq.l #4,sp
    feac:	|      move.l d0,24(sp)
	FreeVec(newTextA);
    feb0:	|      move.l 28(sp),20(sp)
    feb6:	|      move.l 18bc0 <SysBase>,d0
    febc:	|      movea.l d0,a6
    febe:	|      movea.l 20(sp),a1
    fec2:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
    fec6:	|      move.l 24(sp),-(sp)
    feca:	|      jsr b624 <failSecurityCheck>
    fed0:	|      addq.l #4,sp
    fed2:	|      tst.w d0
    fed4:	|  /-- beq.s fedc <builtIn_loadCustomData+0x60>
    fed6:	|  |   moveq #1,d0
    fed8:	+--|-- bra.w ff9c <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
    fedc:	|  \-> moveq #24,d0
    fede:	|      add.l 40(sp),d0
    fee2:	|      move.l d0,-(sp)
    fee4:	|      jsr 12386 <trimStack>
    feea:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
    feec:	|      moveq #28,d0
    feee:	|      add.l 40(sp),d0
    fef2:	|      move.l d0,-(sp)
    fef4:	|      jsr 11c50 <unlinkVar>
    fefa:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
    fefc:	|      movea.l 40(sp),a0
    ff00:	|      moveq #6,d0
    ff02:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    ff06:	|      moveq #12,d0
    ff08:	|      move.l d0,16(sp)
    ff0c:	|      clr.l 12(sp)
    ff10:	|      move.l 18bc0 <SysBase>,d0
    ff16:	|      movea.l d0,a6
    ff18:	|      move.l 16(sp),d0
    ff1c:	|      move.l 12(sp),d1
    ff20:	|      jsr -684(a6)
    ff24:	|      move.l d0,8(sp)
    ff28:	|      move.l 8(sp),d0
    ff2c:	|      movea.l 40(sp),a0
    ff30:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
    ff34:	|      movea.l 40(sp),a0
    ff38:	|      move.l 32(a0),d0
    ff3c:	|  /-- bne.s ff42 <builtIn_loadCustomData+0xc6>
    ff3e:	|  |   moveq #1,d0
    ff40:	+--|-- bra.s ff9c <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
    ff42:	|  \-> movea.l 40(sp),a0
    ff46:	|      movea.l 32(a0),a0
    ff4a:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
    ff4c:	|      movea.l 40(sp),a0
    ff50:	|      movea.l 32(a0),a0
    ff54:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
    ff58:	|      movea.l 40(sp),a0
    ff5c:	|      movea.l 32(a0),a0
    ff60:	|      moveq #1,d0
    ff62:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
    ff66:	|      movea.l 40(sp),a0
    ff6a:	|      move.l 32(a0),d0
    ff6e:	|      move.l d0,-(sp)
    ff70:	|      move.l 28(sp),-(sp)
    ff74:	|      jsr acae <fileToStack>
    ff7a:	|      addq.l #8,sp
    ff7c:	|      tst.w d0
    ff7e:	|  /-- bne.s ff84 <builtIn_loadCustomData+0x108>
    ff80:	|  |   moveq #1,d0
    ff82:	+--|-- bra.s ff9c <builtIn_loadCustomData+0x120>
	FreeVec(newText);
    ff84:	|  \-> move.l 24(sp),4(sp)
    ff8a:	|      move.l 18bc0 <SysBase>,d0
    ff90:	|      movea.l d0,a6
    ff92:	|      movea.l 4(sp),a1
    ff96:	|      jsr -690(a6)
	return BR_CONTINUE;
    ff9a:	|      moveq #2,d0
}
    ff9c:	\----> movea.l (sp)+,a6
    ff9e:	       lea 28(sp),sp
    ffa2:	       rts

0000ffa4 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
    ffa4:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ffa6:	       movea.l 12(sp),a0
    ffaa:	       move.l 24(a0),d0
    ffae:	       move.l d0,-(sp)
    ffb0:	       pea 1 <_start+0x1>
    ffb4:	       move.l sp,d0
    ffb6:	       addq.l #8,d0
    ffb8:	       move.l d0,-(sp)
    ffba:	       jsr 11a02 <getValueType>
    ffc0:	       lea 12(sp),sp
    ffc4:	       tst.w d0
    ffc6:	   /-- bne.s ffcc <builtIn_setCustomEncoding+0x28>
    ffc8:	   |   moveq #1,d0
    ffca:	/--|-- bra.s 10002 <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
    ffcc:	|  \-> move.l (sp),d0
    ffce:	|      move.l d0,d0
    ffd0:	|      move.w d0,18ccc <saveEncoding>
	trimStack (&fun -> stack);
    ffd6:	|      moveq #24,d0
    ffd8:	|      add.l 12(sp),d0
    ffdc:	|      move.l d0,-(sp)
    ffde:	|      jsr 12386 <trimStack>
    ffe4:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    ffe6:	|      moveq #28,d0
    ffe8:	|      add.l 12(sp),d0
    ffec:	|      pea 1 <_start+0x1>
    fff0:	|      pea 1 <_start+0x1>
    fff4:	|      move.l d0,-(sp)
    fff6:	|      jsr 122f4 <setVariable>
    fffc:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10000:	|      moveq #2,d0
}
   10002:	\----> addq.l #4,sp
   10004:	       rts

00010006 <builtIn_freeSound>:

builtIn(freeSound)
{
   10006:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10008:	       movea.l 12(sp),a0
   1000c:	       move.l 24(a0),d0
   10010:	       move.l d0,-(sp)
   10012:	       pea 5 <_start+0x5>
   10016:	       move.l sp,d0
   10018:	       addq.l #8,d0
   1001a:	       move.l d0,-(sp)
   1001c:	       jsr 11a02 <getValueType>
   10022:	       lea 12(sp),sp
   10026:	       tst.w d0
   10028:	   /-- bne.s 1002e <builtIn_freeSound+0x28>
   1002a:	   |   moveq #1,d0
   1002c:	/--|-- bra.s 1004c <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   1002e:	|  \-> moveq #24,d0
   10030:	|      add.l 12(sp),d0
   10034:	|      move.l d0,-(sp)
   10036:	|      jsr 12386 <trimStack>
   1003c:	|      addq.l #4,sp
	huntKillFreeSound (v);
   1003e:	|      move.l (sp),d0
   10040:	|      move.l d0,-(sp)
   10042:	|      jsr a47c <huntKillFreeSound>
   10048:	|      addq.l #4,sp
	return BR_CONTINUE;
   1004a:	|      moveq #2,d0
}
   1004c:	\----> addq.l #4,sp
   1004e:	       rts

00010050 <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   10050:	       lea -12(sp),sp
   10054:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10056:	       movea.l 24(sp),a0
   1005a:	       move.l 24(a0),d0
   1005e:	       move.l d0,-(sp)
   10060:	       pea 1 <_start+0x1>
   10064:	       moveq #16,d0
   10066:	       add.l sp,d0
   10068:	       move.l d0,-(sp)
   1006a:	       jsr 11a02 <getValueType>
   10070:	       lea 12(sp),sp
   10074:	       tst.w d0
   10076:	   /-- bne.s 1007e <builtIn_parallaxAdd+0x2e>
   10078:	   |   moveq #1,d0
   1007a:	/--|-- bra.w 10152 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   1007e:	|  \-> moveq #24,d0
   10080:	|      add.l 24(sp),d0
   10084:	|      move.l d0,-(sp)
   10086:	|      jsr 12386 <trimStack>
   1008c:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1008e:	|      movea.l 24(sp),a0
   10092:	|      move.l 24(a0),d0
   10096:	|      move.l d0,-(sp)
   10098:	|      pea 1 <_start+0x1>
   1009c:	|      moveq #20,d0
   1009e:	|      add.l sp,d0
   100a0:	|      move.l d0,-(sp)
   100a2:	|      jsr 11a02 <getValueType>
   100a8:	|      lea 12(sp),sp
   100ac:	|      tst.w d0
   100ae:	|  /-- bne.s 100b6 <builtIn_parallaxAdd+0x66>
   100b0:	|  |   moveq #1,d0
   100b2:	+--|-- bra.w 10152 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   100b6:	|  \-> moveq #24,d0
   100b8:	|      add.l 24(sp),d0
   100bc:	|      move.l d0,-(sp)
   100be:	|      jsr 12386 <trimStack>
   100c4:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   100c6:	|      movea.l 24(sp),a0
   100ca:	|      move.l 24(a0),d0
   100ce:	|      move.l d0,-(sp)
   100d0:	|      pea 5 <_start+0x5>
   100d4:	|      lea 12(sp),a0
   100d8:	|      move.l a0,-(sp)
   100da:	|      jsr 11a02 <getValueType>
   100e0:	|      lea 12(sp),sp
   100e4:	|      tst.w d0
   100e6:	|  /-- bne.s 100ec <builtIn_parallaxAdd+0x9c>
   100e8:	|  |   moveq #1,d0
   100ea:	+--|-- bra.s 10152 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   100ec:	|  \-> moveq #24,d0
   100ee:	|      add.l 24(sp),d0
   100f2:	|      move.l d0,-(sp)
   100f4:	|      jsr 12386 <trimStack>
   100fa:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   100fc:	|      move.l 8(sp),d0
   10100:	|      move.l d0,d0
   10102:	|      moveq #0,d2
   10104:	|      move.w d0,d2
   10106:	|      move.l 12(sp),d0
   1010a:	|      move.l d0,d0
   1010c:	|      moveq #0,d1
   1010e:	|      move.w d0,d1
   10110:	|      move.l 4(sp),d0
   10114:	|      move.l d0,d0
   10116:	|      move.w d0,d0
   10118:	|      andi.l #65535,d0
   1011e:	|      move.l d2,-(sp)
   10120:	|      move.l d1,-(sp)
   10122:	|      move.l d0,-(sp)
   10124:	|      jsr a698 <loadParallax>
   1012a:	|      lea 12(sp),sp
   1012e:	|      tst.w d0
   10130:	|  /-- bne.s 10136 <builtIn_parallaxAdd+0xe6>
   10132:	|  |   moveq #1,d0
   10134:	+--|-- bra.s 10152 <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   10136:	|  \-> moveq #28,d0
   10138:	|      add.l 24(sp),d0
   1013c:	|      pea 1 <_start+0x1>
   10140:	|      pea 1 <_start+0x1>
   10144:	|      move.l d0,-(sp)
   10146:	|      jsr 122f4 <setVariable>
   1014c:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   10150:	|      moveq #2,d0
}
   10152:	\----> move.l (sp)+,d2
   10154:	       lea 12(sp),sp
   10158:	       rts

0001015a <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   1015a:	jsr a5d0 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   10160:	moveq #28,d0
   10162:	add.l 8(sp),d0
   10166:	pea 1 <_start+0x1>
   1016a:	pea 1 <_start+0x1>
   1016e:	move.l d0,-(sp)
   10170:	jsr 122f4 <setVariable>
   10176:	lea 12(sp),sp
	return BR_CONTINUE;
   1017a:	moveq #2,d0
}
   1017c:	rts

0001017e <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   1017e:	pea 15f25 <custom.c.36a9b171+0x132b>
   10184:	jsr 13a4a <KPrintF>
   1018a:	addq.l #4,sp

	return BR_CONTINUE;
   1018c:	moveq #2,d0
}
   1018e:	rts

00010190 <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   10190:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   10192:	             movea.l 16(sp),a0
   10196:	             movea.l 24(a0),a0
   1019a:	             move.l (a0),d0
   1019c:	             moveq #1,d1
   1019e:	             cmp.l d0,d1
   101a0:	      /----- beq.s 101e8 <builtIn_makeFastArray+0x58>
   101a2:	      |      moveq #6,d1
   101a4:	      |      cmp.l d0,d1
   101a6:	/-----|----- bne.s 10226 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   101a8:	|     |      movea.l 16(sp),a0
   101ac:	|     |      movea.l 24(a0),a0
   101b0:	|     |      move.l 4(a0),d1
   101b4:	|     |      moveq #28,d0
   101b6:	|     |      add.l 16(sp),d0
   101ba:	|     |      move.l d1,-(sp)
   101bc:	|     |      move.l d0,-(sp)
   101be:	|     |      jsr 11ab4 <makeFastArrayFromStack>
   101c4:	|     |      addq.l #8,sp
   101c6:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   101ca:	|     |      moveq #24,d0
   101cc:	|     |      add.l 16(sp),d0
   101d0:	|     |      move.l d0,-(sp)
   101d2:	|     |      jsr 12386 <trimStack>
   101d8:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   101da:	|     |      tst.w 6(sp)
   101de:	|     |  /-- beq.s 101e4 <builtIn_makeFastArray+0x54>
   101e0:	|     |  |   moveq #2,d0
   101e2:	|  /--|--|-- bra.s 10238 <builtIn_makeFastArray+0xa8>
   101e4:	|  |  |  \-> moveq #1,d0
   101e6:	|  +--|----- bra.s 10238 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   101e8:	|  |  \----> movea.l 16(sp),a0
   101ec:	|  |         movea.l 24(a0),a0
   101f0:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   101f6:	|  |         moveq #24,d0
   101f8:	|  |         add.l 16(sp),d0
   101fc:	|  |         move.l d0,-(sp)
   101fe:	|  |         jsr 12386 <trimStack>
   10204:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   10206:	|  |         moveq #28,d0
   10208:	|  |         add.l 16(sp),d0
   1020c:	|  |         move.l 2(sp),-(sp)
   10210:	|  |         move.l d0,-(sp)
   10212:	|  |         jsr 11b1e <makeFastArraySize>
   10218:	|  |         addq.l #8,sp
   1021a:	|  |         tst.w d0
   1021c:	|  |     /-- beq.s 10222 <builtIn_makeFastArray+0x92>
   1021e:	|  |     |   moveq #2,d0
   10220:	|  +-----|-- bra.s 10238 <builtIn_makeFastArray+0xa8>
   10222:	|  |     \-> moveq #1,d0
   10224:	|  +-------- bra.s 10238 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   10226:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   10228:	   |         pea 15f4e <custom.c.36a9b171+0x1354>
   1022e:	   |         jsr 13a4a <KPrintF>
   10234:	   |         addq.l #4,sp
	return BR_ERROR;
   10236:	   |         moveq #1,d0
}
   10238:	   \-------> addq.l #8,sp
   1023a:	             rts

0001023c <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   1023c:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1023e:	          movea.l 16(sp),a0
   10242:	          move.l 24(a0),d0
   10246:	          move.l d0,-(sp)
   10248:	          pea 7 <_start+0x7>
   1024c:	          move.l sp,d0
   1024e:	          addq.l #8,d0
   10250:	          move.l d0,-(sp)
   10252:	          jsr 11a02 <getValueType>
   10258:	          lea 12(sp),sp
   1025c:	          tst.w d0
   1025e:	      /-- bne.s 10264 <builtIn_getCharacterScale+0x28>
   10260:	      |   moveq #1,d0
   10262:	/-----|-- bra.s 102de <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   10264:	|     \-> moveq #24,d0
   10266:	|         add.l 16(sp),d0
   1026a:	|         move.l d0,-(sp)
   1026c:	|         jsr 12386 <trimStack>
   10272:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10274:	|         move.l (sp),d0
   10276:	|         move.l d0,-(sp)
   10278:	|         jsr 7aec <findPerson>
   1027e:	|         addq.l #4,sp
   10280:	|         move.l d0,4(sp)
	if (pers) {
   10284:	|  /----- beq.s 102c4 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   10286:	|  |      movea.l 4(sp),a0
   1028a:	|  |      move.l 20(a0),d0
   1028e:	|  |      move.l #1120403456,-(sp)
   10294:	|  |      move.l d0,-(sp)
   10296:	|  |      jsr 13db4 <__mulsf3>
   1029c:	|  |      addq.l #8,sp
   1029e:	|  |      move.l d0,-(sp)
   102a0:	|  |      jsr 13c9a <__fixsfsi>
   102a6:	|  |      addq.l #4,sp
   102a8:	|  |      move.l d0,d1
   102aa:	|  |      moveq #28,d0
   102ac:	|  |      add.l 16(sp),d0
   102b0:	|  |      move.l d1,-(sp)
   102b2:	|  |      pea 1 <_start+0x1>
   102b6:	|  |      move.l d0,-(sp)
   102b8:	|  |      jsr 122f4 <setVariable>
   102be:	|  |      lea 12(sp),sp
   102c2:	|  |  /-- bra.s 102dc <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   102c4:	|  \--|-> moveq #28,d0
   102c6:	|     |   add.l 16(sp),d0
   102ca:	|     |   clr.l -(sp)
   102cc:	|     |   pea 1 <_start+0x1>
   102d0:	|     |   move.l d0,-(sp)
   102d2:	|     |   jsr 122f4 <setVariable>
   102d8:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   102dc:	|     \-> moveq #2,d0
}
   102de:	\-------> addq.l #8,sp
   102e0:	          rts

000102e2 <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   102e2:	move.l 18cf0 <gameSettings>,d0
   102e8:	move.l d0,d1
   102ea:	moveq #28,d0
   102ec:	add.l 8(sp),d0
   102f0:	move.l d1,-(sp)
   102f2:	pea 1 <_start+0x1>
   102f6:	move.l d0,-(sp)
   102f8:	jsr 122f4 <setVariable>
   102fe:	lea 12(sp),sp
	return BR_CONTINUE;
   10302:	moveq #2,d0
}
   10304:	rts

00010306 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   10306:	moveq #24,d0
   10308:	add.l 8(sp),d0
   1030c:	move.l d0,-(sp)
   1030e:	jsr 12386 <trimStack>
   10314:	addq.l #4,sp
	trimStack (&fun -> stack);
   10316:	moveq #24,d0
   10318:	add.l 8(sp),d0
   1031c:	move.l d0,-(sp)
   1031e:	jsr 12386 <trimStack>
   10324:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   10326:	moveq #28,d0
   10328:	add.l 8(sp),d0
   1032c:	clr.l -(sp)
   1032e:	pea 1 <_start+0x1>
   10332:	move.l d0,-(sp)
   10334:	jsr 122f4 <setVariable>
   1033a:	lea 12(sp),sp

	return BR_CONTINUE;
   1033e:	moveq #2,d0

}
   10340:	rts

00010342 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   10342:	move.l 1855a <lastFramesPerSecond>,d1
   10348:	moveq #28,d0
   1034a:	add.l 8(sp),d0
   1034e:	move.l d1,-(sp)
   10350:	pea 1 <_start+0x1>
   10354:	move.l d0,-(sp)
   10356:	jsr 122f4 <setVariable>
   1035c:	lea 12(sp),sp
	return BR_CONTINUE;
   10360:	moveq #2,d0
}
   10362:	rts

00010364 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   10364:	moveq #2,d0
}
   10366:	rts

00010368 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   10368:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1036c:	          movea.l 60(sp),a0
   10370:	          move.l 24(a0),d0
   10374:	          move.l d0,-(sp)
   10376:	          pea 1 <_start+0x1>
   1037a:	          pea 18af0 <thumbHeight>
   10380:	          jsr 11a02 <getValueType>
   10386:	          lea 12(sp),sp
   1038a:	          tst.w d0
   1038c:	      /-- bne.s 10394 <builtIn_setThumbnailSize+0x2c>
   1038e:	      |   moveq #1,d0
   10390:	/-----|-- bra.w 10450 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   10394:	|     \-> moveq #24,d0
   10396:	|         add.l 60(sp),d0
   1039a:	|         move.l d0,-(sp)
   1039c:	|         jsr 12386 <trimStack>
   103a2:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   103a4:	|         movea.l 60(sp),a0
   103a8:	|         move.l 24(a0),d0
   103ac:	|         move.l d0,-(sp)
   103ae:	|         pea 1 <_start+0x1>
   103b2:	|         pea 18aec <thumbWidth>
   103b8:	|         jsr 11a02 <getValueType>
   103be:	|         lea 12(sp),sp
   103c2:	|         tst.w d0
   103c4:	|     /-- bne.s 103cc <builtIn_setThumbnailSize+0x64>
   103c6:	|     |   moveq #1,d0
   103c8:	+-----|-- bra.w 10450 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   103cc:	|     \-> moveq #24,d0
   103ce:	|         add.l 60(sp),d0
   103d2:	|         move.l d0,-(sp)
   103d4:	|         jsr 12386 <trimStack>
   103da:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   103dc:	|         move.l 18aec <thumbWidth>,d0
   103e2:	|     /-- bmi.s 10410 <builtIn_setThumbnailSize+0xa8>
   103e4:	|     |   move.l 18af0 <thumbHeight>,d0
   103ea:	|     +-- bmi.s 10410 <builtIn_setThumbnailSize+0xa8>
   103ec:	|     |   move.l 18aec <thumbWidth>,d0
   103f2:	|     |   move.l d0,d1
   103f4:	|     |   move.l 18b14 <winWidth>,d0
   103fa:	|     |   cmp.l d1,d0
   103fc:	|     +-- bcs.s 10410 <builtIn_setThumbnailSize+0xa8>
   103fe:	|     |   move.l 18af0 <thumbHeight>,d0
   10404:	|     |   move.l d0,d1
   10406:	|     |   move.l 18b18 <winHeight>,d0
   1040c:	|     |   cmp.l d1,d0
   1040e:	|  /--|-- bcc.s 1044e <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   10410:	|  |  \-> move.l 18af0 <thumbHeight>,d1
   10416:	|  |      move.l 18aec <thumbWidth>,d0
   1041c:	|  |      move.l d1,-(sp)
   1041e:	|  |      move.l d0,-(sp)
   10420:	|  |      pea 15f75 <custom.c.36a9b171+0x137b>
   10426:	|  |      lea 14(sp),a0
   1042a:	|  |      move.l a0,-(sp)
   1042c:	|  |      jsr 1120c <sprintf>
   10432:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   10436:	|  |      lea 2(sp),a0
   1043a:	|  |      move.l a0,-(sp)
   1043c:	|  |      pea 15f7d <custom.c.36a9b171+0x1383>
   10442:	|  |      jsr 13a4a <KPrintF>
   10448:	|  |      addq.l #8,sp
		return BR_ERROR;
   1044a:	|  |      moveq #1,d0
   1044c:	+--|----- bra.s 10450 <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   1044e:	|  \----> moveq #2,d0
}
   10450:	\-------> lea 52(sp),sp
   10454:	          rts

00010456 <builtIn_hasFlag>:

builtIn(hasFlag)
{
   10456:	       lea -12(sp),sp
   1045a:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1045c:	       movea.l 24(sp),a0
   10460:	       move.l 24(a0),d0
   10464:	       move.l d0,-(sp)
   10466:	       pea 1 <_start+0x1>
   1046a:	       lea 12(sp),a0
   1046e:	       move.l a0,-(sp)
   10470:	       jsr 11a02 <getValueType>
   10476:	       lea 12(sp),sp
   1047a:	       tst.w d0
   1047c:	   /-- bne.s 10484 <builtIn_hasFlag+0x2e>
   1047e:	   |   moveq #1,d0
   10480:	/--|-- bra.w 10514 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   10484:	|  \-> moveq #24,d0
   10486:	|      add.l 24(sp),d0
   1048a:	|      move.l d0,-(sp)
   1048c:	|      jsr 12386 <trimStack>
   10492:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10494:	|      movea.l 24(sp),a0
   10498:	|      move.l 24(a0),d0
   1049c:	|      move.l d0,-(sp)
   1049e:	|      pea 7 <_start+0x7>
   104a2:	|      moveq #16,d0
   104a4:	|      add.l sp,d0
   104a6:	|      move.l d0,-(sp)
   104a8:	|      jsr 11a02 <getValueType>
   104ae:	|      lea 12(sp),sp
   104b2:	|      tst.w d0
   104b4:	|  /-- bne.s 104ba <builtIn_hasFlag+0x64>
   104b6:	|  |   moveq #1,d0
   104b8:	+--|-- bra.s 10514 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   104ba:	|  \-> moveq #24,d0
   104bc:	|      add.l 24(sp),d0
   104c0:	|      move.l d0,-(sp)
   104c2:	|      jsr 12386 <trimStack>
   104c8:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   104ca:	|      move.l 8(sp),d0
   104ce:	|      move.l d0,-(sp)
   104d0:	|      jsr a838 <findObjectType>
   104d6:	|      addq.l #4,sp
   104d8:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   104dc:	|  /-- bne.s 104e2 <builtIn_hasFlag+0x8c>
   104de:	|  |   moveq #1,d0
   104e0:	+--|-- bra.s 10514 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   104e2:	|  \-> movea.l 12(sp),a0
   104e6:	|      move.w 36(a0),d0
   104ea:	|      moveq #0,d2
   104ec:	|      move.w d0,d2
   104ee:	|      move.l 4(sp),d1
   104f2:	|      moveq #1,d0
   104f4:	|      lsl.l d1,d0
   104f6:	|      move.l d2,d1
   104f8:	|      and.l d0,d1
   104fa:	|      moveq #28,d0
   104fc:	|      add.l 24(sp),d0
   10500:	|      move.l d1,-(sp)
   10502:	|      pea 1 <_start+0x1>
   10506:	|      move.l d0,-(sp)
   10508:	|      jsr 122f4 <setVariable>
   1050e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10512:	|      moveq #2,d0
}
   10514:	\----> move.l (sp)+,d2
   10516:	       lea 12(sp),sp
   1051a:	       rts

0001051c <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   1051c:	       jsr a826 <snapshot>
   10522:	       tst.w d0
   10524:	/----- beq.s 1052a <builtIn_snapshotGrab+0xe>
   10526:	|      moveq #2,d0
   10528:	|  /-- bra.s 1052c <builtIn_snapshotGrab+0x10>
   1052a:	\--|-> moveq #1,d0
}
   1052c:	   \-> rts

0001052e <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   1052e:	jsr a6de <nosnapshot>
	return BR_CONTINUE;
   10534:	moveq #2,d0
}
   10536:	rts

00010538 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   10538:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   1053a:	move.w 18436 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   10542:	movea.l 12(sp),a0
   10546:	move.l 24(a0),d0
   1054a:	move.l d0,-(sp)
   1054c:	jsr 11f42 <getBoolean>
   10552:	addq.l #4,sp
   10554:	move.w d0,18436 <allowAnyFilename>
	trimStack (&fun -> stack);
   1055a:	moveq #24,d0
   1055c:	add.l 12(sp),d0
   10560:	move.l d0,-(sp)
   10562:	jsr 12386 <trimStack>
   10568:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   1056a:	movea.w 2(sp),a0
   1056e:	moveq #28,d0
   10570:	add.l 12(sp),d0
   10574:	move.l a0,-(sp)
   10576:	pea 1 <_start+0x1>
   1057a:	move.l d0,-(sp)
   1057c:	jsr 122f4 <setVariable>
   10582:	lea 12(sp),sp
	return BR_CONTINUE;
   10586:	moveq #2,d0
}
   10588:	addq.l #4,sp
   1058a:	rts

0001058c <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   1058c:	moveq #24,d0
   1058e:	add.l 8(sp),d0
   10592:	move.l d0,-(sp)
   10594:	jsr 12386 <trimStack>
   1059a:	addq.l #4,sp
	trimStack (&fun -> stack);
   1059c:	moveq #24,d0
   1059e:	add.l 8(sp),d0
   105a2:	move.l d0,-(sp)
   105a4:	jsr 12386 <trimStack>
   105aa:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   105ac:	moveq #28,d0
   105ae:	add.l 8(sp),d0
   105b2:	clr.l -(sp)
   105b4:	pea 1 <_start+0x1>
   105b8:	move.l d0,-(sp)
   105ba:	jsr 122f4 <setVariable>
   105c0:	lea 12(sp),sp

	return BR_CONTINUE;
   105c4:	moveq #2,d0
}
   105c6:	rts

000105c8 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   105c8:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   105ca:	movea.l 12(sp),a0
   105ce:	move.l 24(a0),d0
   105d2:	move.l d0,-(sp)
   105d4:	jsr 11fd8 <getTextFromAnyVar>
   105da:	addq.l #4,sp
   105dc:	move.l d0,(sp)
	trimStack (&fun -> stack);
   105de:	moveq #24,d0
   105e0:	add.l 12(sp),d0
   105e4:	move.l d0,-(sp)
   105e6:	jsr 12386 <trimStack>
   105ec:	addq.l #4,sp
	KPrintF (mess);
   105ee:	move.l (sp),-(sp)
   105f0:	jsr 13a4a <KPrintF>
   105f6:	addq.l #4,sp
	return BR_ERROR;
   105f8:	moveq #1,d0
}
   105fa:	addq.l #4,sp
   105fc:	rts

000105fe <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   105fe:	moveq #24,d0
   10600:	add.l 8(sp),d0
   10604:	move.l d0,-(sp)
   10606:	jsr 12386 <trimStack>
   1060c:	addq.l #4,sp
	trimStack (&fun -> stack);
   1060e:	moveq #24,d0
   10610:	add.l 8(sp),d0
   10614:	move.l d0,-(sp)
   10616:	jsr 12386 <trimStack>
   1061c:	addq.l #4,sp
	trimStack (&fun -> stack);
   1061e:	moveq #24,d0
   10620:	add.l 8(sp),d0
   10624:	move.l d0,-(sp)
   10626:	jsr 12386 <trimStack>
   1062c:	addq.l #4,sp
	trimStack (&fun -> stack);
   1062e:	moveq #24,d0
   10630:	add.l 8(sp),d0
   10634:	move.l d0,-(sp)
   10636:	jsr 12386 <trimStack>
   1063c:	addq.l #4,sp

	return BR_CONTINUE;
   1063e:	moveq #2,d0
}
   10640:	rts

00010642 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   10642:	moveq #24,d0
   10644:	add.l 8(sp),d0
   10648:	move.l d0,-(sp)
   1064a:	jsr 12386 <trimStack>
   10650:	addq.l #4,sp
	trimStack (&fun -> stack);
   10652:	moveq #24,d0
   10654:	add.l 8(sp),d0
   10658:	move.l d0,-(sp)
   1065a:	jsr 12386 <trimStack>
   10660:	addq.l #4,sp
	trimStack (&fun -> stack);
   10662:	moveq #24,d0
   10664:	add.l 8(sp),d0
   10668:	move.l d0,-(sp)
   1066a:	jsr 12386 <trimStack>
   10670:	addq.l #4,sp

	return BR_CONTINUE;
   10672:	moveq #2,d0

}
   10674:	rts

00010676 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   10676:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   10678:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   1067e:	sne d0
   10680:	neg.b d0
   10682:	moveq #0,d1
   10684:	move.b d0,d1
   10686:	moveq #28,d0
   10688:	add.l 12(sp),d0
   1068c:	move.l d1,-(sp)
   1068e:	pea 1 <_start+0x1>
   10692:	move.l d0,-(sp)
   10694:	jsr 122f4 <setVariable>
   1069a:	lea 12(sp),sp
	return BR_CONTINUE;
   1069e:	moveq #2,d0
}
   106a0:	addq.l #4,sp
   106a2:	rts

000106a4 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   106a4:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   106a6:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   106ac:	pea 15f94 <custom.c.36a9b171+0x139a>
   106b2:	jsr 13a4a <KPrintF>
   106b8:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   106ba:	tst.w 2(sp)
   106be:	sne d0
   106c0:	neg.b d0
   106c2:	moveq #0,d1
   106c4:	move.b d0,d1
   106c6:	moveq #28,d0
   106c8:	add.l 12(sp),d0
   106cc:	move.l d1,-(sp)
   106ce:	pea 1 <_start+0x1>
   106d2:	move.l d0,-(sp)
   106d4:	jsr 122f4 <setVariable>
   106da:	lea 12(sp),sp
	return BR_CONTINUE;
   106de:	moveq #2,d0
}
   106e0:	addq.l #4,sp
   106e2:	rts

000106e4 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   106e4:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   106e8:	             move.l 104(sp),d0
   106ec:	             cmpi.l #166,d0
   106f2:	/----------- bhi.w 107d4 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   106f6:	|            move.l 104(sp),d0
   106fa:	|            add.l d0,d0
   106fc:	|            movea.l d0,a1
   106fe:	|            adda.l d0,a1
   10700:	|            lea 1857c <paramNum>,a0
   10706:	|            move.l (0,a1,a0.l),d0
   1070a:	|            moveq #-1,d1
   1070c:	|            cmp.l d0,d1
   1070e:	|  /-------- beq.w 1079c <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   10712:	|  |         move.l 104(sp),d0
   10716:	|  |         add.l d0,d0
   10718:	|  |         movea.l d0,a1
   1071a:	|  |         adda.l d0,a1
   1071c:	|  |         lea 1857c <paramNum>,a0
   10722:	|  |         move.l (0,a1,a0.l),d0
   10726:	|  |         cmp.l 108(sp),d0
   1072a:	|  +-------- beq.s 1079c <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   1072c:	|  |         move.l 104(sp),d0
   10730:	|  |         add.l d0,d0
   10732:	|  |         movea.l d0,a1
   10734:	|  |         adda.l d0,a1
   10736:	|  |         lea 1857c <paramNum>,a0
   1073c:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   10740:	|  |         moveq #1,d1
   10742:	|  |         cmp.l d0,d1
   10744:	|  |  /----- bne.s 1074e <callBuiltIn+0x6a>
   10746:	|  |  |      move.l #85068,d0
   1074c:	|  |  |  /-- bra.s 10754 <callBuiltIn+0x70>
   1074e:	|  |  \--|-> move.l #90058,d0
   10754:	|  |     \-> move.l 104(sp),d1
   10758:	|  |         add.l d1,d1
   1075a:	|  |         movea.l d1,a1
   1075c:	|  |         adda.l d1,a1
   1075e:	|  |         lea 1857c <paramNum>,a0
   10764:	|  |         move.l (0,a1,a0.l),d1
   10768:	|  |         move.l d0,-(sp)
   1076a:	|  |         move.l d1,-(sp)
   1076c:	|  |         pea 15fcc <custom.c.36a9b171+0x13d2>
   10772:	|  |         lea 12(sp),a0
   10776:	|  |         move.l a0,-(sp)
   10778:	|  |         jsr 1120c <sprintf>
   1077e:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   10782:	|  |         movea.l sp,a0
   10784:	|  |         move.l a0,-(sp)
   10786:	|  |         jsr b8 <copyString>
   1078c:	|  |         addq.l #4,sp
   1078e:	|  |         move.l d0,-(sp)
   10790:	|  |         jsr 13a4a <KPrintF>
   10796:	|  |         addq.l #4,sp
				return BR_ERROR;
   10798:	|  |         moveq #1,d0
   1079a:	|  |     /-- bra.s 107e4 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   1079c:	|  \-----|-> move.l 104(sp),d0
   107a0:	|        |   add.l d0,d0
   107a2:	|        |   movea.l d0,a1
   107a4:	|        |   adda.l d0,a1
   107a6:	|        |   lea 18818 <builtInFunctionArray>,a0
   107ac:	|        |   move.l (0,a1,a0.l),d0
   107b0:	+--------|-- beq.s 107d4 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   107b2:	|        |   move.l 104(sp),d0
   107b6:	|        |   add.l d0,d0
   107b8:	|        |   movea.l d0,a1
   107ba:	|        |   adda.l d0,a1
   107bc:	|        |   lea 18818 <builtInFunctionArray>,a0
   107c2:	|        |   movea.l (0,a1,a0.l),a0
   107c6:	|        |   move.l 112(sp),-(sp)
   107ca:	|        |   move.l 112(sp),-(sp)
   107ce:	|        |   jsr (a0)
   107d0:	|        |   addq.l #8,sp
   107d2:	|        +-- bra.s 107e4 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   107d4:	\--------|-> pea 15ff7 <custom.c.36a9b171+0x13fd>
   107da:	         |   jsr 13a4a <KPrintF>
   107e0:	         |   addq.l #4,sp
	return BR_ERROR;
   107e2:	         |   moveq #1,d0
}
   107e4:	         \-> lea 100(sp),sp
   107e8:	             rts

000107ea <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   107ea:	          subq.l #8,sp
	int indexNum = -1;
   107ec:	          moveq #-1,d0
   107ee:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   107f2:	          clr.l (sp)
   107f4:	   /----- bra.s 1081a <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   107f6:	/--|----> move.l 18ce8 <languageTable>,d1
   107fc:	|  |      move.l (sp),d0
   107fe:	|  |      add.l d0,d0
   10800:	|  |      add.l d0,d0
   10802:	|  |      movea.l d1,a0
   10804:	|  |      adda.l d0,a0
   10806:	|  |      move.l (a0),d0
   10808:	|  |      move.l d0,d1
   1080a:	|  |      move.l 18cf0 <gameSettings>,d0
   10810:	|  |      cmp.l d1,d0
   10812:	|  |  /-- bne.s 10818 <getLanguageForFileB+0x2e>
   10814:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   10818:	|  |  \-> addq.l #1,(sp)
   1081a:	|  \----> move.l 18cf4 <gameSettings+0x4>,d0
   10820:	|         cmp.l (sp),d0
   10822:	\-------- bcc.s 107f6 <getLanguageForFileB+0xc>
	}

	return indexNum;
   10824:	          move.l 4(sp),d0
}
   10828:	          addq.l #8,sp
   1082a:	          rts

0001082c <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   1082c:	          lea -20(sp),sp
   10830:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   10832:	          move.l 28(sp),-(sp)
   10836:	          jsr 10eee <strlen>
   1083c:	          addq.l #4,sp
   1083e:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   10842:	          moveq #4,d0
   10844:	          cmp.l 12(sp),d0
   10848:	      /-- bge.s 1086c <getPrefsFilename+0x40>
   1084a:	      |   move.l 12(sp),d0
   1084e:	      |   subq.l #4,d0
   10850:	      |   movea.l 28(sp),a0
   10854:	      |   adda.l d0,a0
   10856:	      |   move.b (a0),d0
   10858:	      |   cmpi.b #46,d0
   1085c:	      +-- bne.s 1086c <getPrefsFilename+0x40>
		filename[n-4] = 0;
   1085e:	      |   move.l 12(sp),d0
   10862:	      |   subq.l #4,d0
   10864:	      |   movea.l 28(sp),a0
   10868:	      |   adda.l d0,a0
   1086a:	      |   clr.b (a0)
	}

	char * f = filename;
   1086c:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   10872:	          clr.l 20(sp)
   10876:	   /----- bra.s 1089e <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   10878:	/--|----> move.l 20(sp),d0
   1087c:	|  |      movea.l 28(sp),a0
   10880:	|  |      adda.l d0,a0
   10882:	|  |      move.b (a0),d0
   10884:	|  |      cmpi.b #47,d0
   10888:	|  |  /-- bne.s 1089a <getPrefsFilename+0x6e>
   1088a:	|  |  |   move.l 20(sp),d0
   1088e:	|  |  |   addq.l #1,d0
   10890:	|  |  |   move.l 28(sp),d1
   10894:	|  |  |   add.l d0,d1
   10896:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   1089a:	|  |  \-> addq.l #1,20(sp)
   1089e:	|  \----> move.l 20(sp),d0
   108a2:	|         cmp.l 12(sp),d0
   108a6:	\-------- blt.s 10878 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   108a8:	          pea 16022 <custom.c.36a9b171+0x1428>
   108ae:	          move.l 20(sp),-(sp)
   108b2:	          jsr 10f2e <joinStrings>
   108b8:	          addq.l #8,sp
   108ba:	          move.l d0,8(sp)

	FreeVec(filename);
   108be:	          move.l 28(sp),4(sp)
   108c4:	          move.l 18bc0 <SysBase>,d0
   108ca:	          movea.l d0,a6
   108cc:	          movea.l 4(sp),a1
   108d0:	          jsr -690(a6)
	filename = NULL;
   108d4:	          clr.l 28(sp)
	return joined;
   108d8:	          move.l 8(sp),d0
}
   108dc:	          movea.l (sp)+,a6
   108de:	          lea 20(sp),sp
   108e2:	          rts

000108e4 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   108e4:	             lea -28(sp),sp
   108e8:	             move.l a6,-(sp)
   108ea:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   108ec:	             move.l 18cf4 <gameSettings+0x4>,d0
   108f2:	             move.l d0,d1
   108f4:	             addq.l #1,d1
   108f6:	             move.l d1,28(sp)
   108fa:	             clr.l 24(sp)
   108fe:	             move.l 18bc0 <SysBase>,d0
   10904:	             movea.l d0,a6
   10906:	             move.l 28(sp),d0
   1090a:	             move.l 24(sp),d1
   1090e:	             jsr -684(a6)
   10912:	             move.l d0,20(sp)
   10916:	             move.l 20(sp),d0
   1091a:	             move.l d0,18ce8 <languageTable>
    if( languageTable == 0) {
   10920:	             move.l 18ce8 <languageTable>,d0
   10926:	         /-- bne.s 10936 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   10928:	         |   pea 16027 <custom.c.36a9b171+0x142d>
   1092e:	         |   jsr 13a4a <KPrintF>
   10934:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   10936:	         \-> move.l 18cf4 <gameSettings+0x4>,d0
   1093c:	             move.l d0,d1
   1093e:	             addq.l #1,d1
   10940:	             move.l d1,16(sp)
   10944:	             clr.l 12(sp)
   10948:	             move.l 18bc0 <SysBase>,d0
   1094e:	             movea.l d0,a6
   10950:	             move.l 16(sp),d0
   10954:	             move.l 12(sp),d1
   10958:	             jsr -684(a6)
   1095c:	             move.l d0,8(sp)
   10960:	             move.l 8(sp),d0
   10964:	             move.l d0,18cec <languageName>
	if( languageName == 0) {
   1096a:	             move.l 18cec <languageName>,d0
   10970:	         /-- bne.s 10980 <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   10972:	         |   pea 1605d <custom.c.36a9b171+0x1463>
   10978:	         |   jsr 13a4a <KPrintF>
   1097e:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   10980:	         \-> clr.l 32(sp)
   10984:	   /-------- bra.s 109fc <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   10986:	/--|-------> tst.l 32(sp)
   1098a:	|  |  /----- beq.s 1099a <makeLanguageTable+0xb6>
   1098c:	|  |  |      move.l 40(sp),-(sp)
   10990:	|  |  |      jsr 6bc <get2bytes>
   10996:	|  |  |      addq.l #4,sp
   10998:	|  |  |  /-- bra.s 1099c <makeLanguageTable+0xb8>
   1099a:	|  |  \--|-> moveq #0,d0
   1099c:	|  |     \-> movea.l 18ce8 <languageTable>,a0
   109a2:	|  |         move.l 32(sp),d1
   109a6:	|  |         add.l d1,d1
   109a8:	|  |         add.l d1,d1
   109aa:	|  |         adda.l d1,a0
   109ac:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   109ae:	|  |         move.l 18cec <languageName>,d1
   109b4:	|  |         move.l 32(sp),d0
   109b8:	|  |         add.l d0,d0
   109ba:	|  |         add.l d0,d0
   109bc:	|  |         movea.l d1,a0
   109be:	|  |         adda.l d0,a0
   109c0:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   109c2:	|  |         move.l 18b6a <gameVersion>,d0
   109c8:	|  |         cmpi.l #511,d0
   109ce:	|  |     /-- ble.s 109f8 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   109d0:	|  |     |   move.l 18cf4 <gameSettings+0x4>,d0
   109d6:	|  |     +-- beq.s 109f8 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   109d8:	|  |     |   move.l 18cec <languageName>,d1
   109de:	|  |     |   move.l 32(sp),d0
   109e2:	|  |     |   add.l d0,d0
   109e4:	|  |     |   add.l d0,d0
   109e6:	|  |     |   movea.l d1,a2
   109e8:	|  |     |   adda.l d0,a2
   109ea:	|  |     |   move.l 40(sp),-(sp)
   109ee:	|  |     |   jsr b02 <readString>
   109f4:	|  |     |   addq.l #4,sp
   109f6:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   109f8:	|  |     \-> addq.l #1,32(sp)
   109fc:	|  \-------> move.l 18cf4 <gameSettings+0x4>,d0
   10a02:	|            cmp.l 32(sp),d0
   10a06:	\----------- bcc.w 10986 <makeLanguageTable+0xa2>
		}
	}
}
   10a0a:	             nop
   10a0c:	             nop
   10a0e:	             movea.l (sp)+,a2
   10a10:	             movea.l (sp)+,a6
   10a12:	             lea 28(sp),sp
   10a16:	             rts

00010a18 <readIniFile>:

void readIniFile (char * filename) {
   10a18:	                      lea -564(sp),sp
   10a1c:	                      move.l a6,-(sp)
   10a1e:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   10a20:	                      move.l 576(sp),-(sp)
   10a24:	                      jsr b8 <copyString>
   10a2a:	                      addq.l #4,sp
   10a2c:	                      move.l d0,-(sp)
   10a2e:	                      jsr 1082c <getPrefsFilename>
   10a34:	                      addq.l #4,sp
   10a36:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   10a3a:	                      move.l 562(sp),558(sp)
   10a40:	                      move.l #1005,554(sp)
   10a48:	                      move.l 18bc8 <DOSBase>,d0
   10a4e:	                      movea.l d0,a6
   10a50:	                      move.l 558(sp),d1
   10a54:	                      move.l 554(sp),d2
   10a58:	                      jsr -30(a6)
   10a5c:	                      move.l d0,550(sp)
   10a60:	                      move.l 550(sp),d0
   10a64:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   10a68:	                      clr.l 18cf0 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   10a6e:	                      move.w #1,18cf8 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   10a76:	                      clr.l 18cfa <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   10a7c:	                      moveq #1,d0
   10a7e:	                      move.l d0,18cfe <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   10a84:	                      clr.w 18d02 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   10a8a:	                      clr.w 18d04 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   10a90:	                      clr.w 18d06 <gameSettings+0x16>

	FreeVec(langName);
   10a96:	                      move.l 562(sp),542(sp)
   10a9c:	                      move.l 18bc0 <SysBase>,d0
   10aa2:	                      movea.l d0,a6
   10aa4:	                      movea.l 542(sp),a1
   10aa8:	                      jsr -690(a6)
	langName = NULL;
   10aac:	                      clr.l 562(sp)

	if (fp) {
   10ab0:	                      tst.l 546(sp)
   10ab4:	/-------------------- beq.w 10d92 <readIniFile+0x37a>
		char lineSoFar[257] = "";
   10ab8:	|                     move.l sp,d0
   10aba:	|                     addi.l #265,d0
   10ac0:	|                     move.l #257,d1
   10ac6:	|                     move.l d1,-(sp)
   10ac8:	|                     clr.l -(sp)
   10aca:	|                     move.l d0,-(sp)
   10acc:	|                     jsr 139ce <memset>
   10ad2:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   10ad6:	|                     move.l sp,d0
   10ad8:	|                     addq.l #8,d0
   10ada:	|                     move.l #257,d1
   10ae0:	|                     move.l d1,-(sp)
   10ae2:	|                     clr.l -(sp)
   10ae4:	|                     move.l d0,-(sp)
   10ae6:	|                     jsr 139ce <memset>
   10aec:	|                     lea 12(sp),sp
		unsigned char here = 0;
   10af0:	|                     clr.b 571(sp)
		char readChar = ' ';
   10af4:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   10afa:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   10b00:	|                     clr.w 566(sp)
		LONG tmp = 0;
   10b04:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   10b08:	|  /----------------> move.l 546(sp),534(sp)
   10b0e:	|  |                  move.l 18bc8 <DOSBase>,d0
   10b14:	|  |                  movea.l d0,a6
   10b16:	|  |                  move.l 534(sp),d1
   10b1a:	|  |                  jsr -306(a6)
   10b1e:	|  |                  move.l d0,530(sp)
   10b22:	|  |                  move.l 530(sp),d0
   10b26:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   10b2a:	|  |                  moveq #-1,d1
   10b2c:	|  |                  cmp.l 538(sp),d1
   10b30:	|  |           /----- bne.s 10b3e <readIniFile+0x126>
				readChar = '\n';
   10b32:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   10b38:	|  |           |      clr.w 568(sp)
   10b3c:	|  |           |  /-- bra.s 10b44 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   10b3e:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   10b44:	|  |              \-> move.b 570(sp),d0
   10b48:	|  |                  ext.w d0
   10b4a:	|  |                  movea.w d0,a0
   10b4c:	|  |                  moveq #61,d0
   10b4e:	|  |                  cmp.l a0,d0
   10b50:	|  |     /----------- beq.w 10cfa <readIniFile+0x2e2>
   10b54:	|  |     |            moveq #61,d1
   10b56:	|  |     |            cmp.l a0,d1
   10b58:	|  |  /--|----------- blt.w 10d06 <readIniFile+0x2ee>
   10b5c:	|  |  |  |            moveq #10,d0
   10b5e:	|  |  |  |            cmp.l a0,d0
   10b60:	|  |  |  |        /-- beq.s 10b6a <readIniFile+0x152>
   10b62:	|  |  |  |        |   moveq #13,d1
   10b64:	|  |  |  |        |   cmp.l a0,d1
   10b66:	|  |  +--|--------|-- bne.w 10d06 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   10b6a:	|  |  |  |        \-> tst.w 566(sp)
   10b6e:	|  |  |  |     /----- beq.w 10ce8 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   10b72:	|  |  |  |     |      pea 16091 <custom.c.36a9b171+0x1497>
   10b78:	|  |  |  |     |      move.l sp,d0
   10b7a:	|  |  |  |     |      addi.l #269,d0
   10b80:	|  |  |  |     |      move.l d0,-(sp)
   10b82:	|  |  |  |     |      jsr 10eae <strcmp>
   10b88:	|  |  |  |     |      addq.l #8,sp
   10b8a:	|  |  |  |     |      tst.l d0
   10b8c:	|  |  |  |     |  /-- bne.s 10ba6 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   10b8e:	|  |  |  |     |  |   move.l sp,d0
   10b90:	|  |  |  |     |  |   addq.l #8,d0
   10b92:	|  |  |  |     |  |   move.l d0,-(sp)
   10b94:	|  |  |  |     |  |   jsr 10d9e <stringToInt>
   10b9a:	|  |  |  |     |  |   addq.l #4,sp
   10b9c:	|  |  |  |     |  |   move.l d0,18cf0 <gameSettings>
   10ba2:	|  |  |  |     +--|-- bra.w 10ce8 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   10ba6:	|  |  |  |     |  \-> pea 1609a <custom.c.36a9b171+0x14a0>
   10bac:	|  |  |  |     |      move.l sp,d0
   10bae:	|  |  |  |     |      addi.l #269,d0
   10bb4:	|  |  |  |     |      move.l d0,-(sp)
   10bb6:	|  |  |  |     |      jsr 10eae <strcmp>
   10bbc:	|  |  |  |     |      addq.l #8,sp
   10bbe:	|  |  |  |     |      tst.l d0
   10bc0:	|  |  |  |     |  /-- bne.s 10be6 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   10bc2:	|  |  |  |     |  |   move.l sp,d0
   10bc4:	|  |  |  |     |  |   addq.l #8,d0
   10bc6:	|  |  |  |     |  |   move.l d0,-(sp)
   10bc8:	|  |  |  |     |  |   jsr 10d9e <stringToInt>
   10bce:	|  |  |  |     |  |   addq.l #4,sp
   10bd0:	|  |  |  |     |  |   tst.l d0
   10bd2:	|  |  |  |     |  |   seq d0
   10bd4:	|  |  |  |     |  |   neg.b d0
   10bd6:	|  |  |  |     |  |   move.b d0,d0
   10bd8:	|  |  |  |     |  |   andi.w #255,d0
   10bdc:	|  |  |  |     |  |   move.w d0,18cf8 <gameSettings+0x8>
   10be2:	|  |  |  |     +--|-- bra.w 10ce8 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   10be6:	|  |  |  |     |  \-> pea 160a1 <custom.c.36a9b171+0x14a7>
   10bec:	|  |  |  |     |      move.l sp,d0
   10bee:	|  |  |  |     |      addi.l #269,d0
   10bf4:	|  |  |  |     |      move.l d0,-(sp)
   10bf6:	|  |  |  |     |      jsr 10eae <strcmp>
   10bfc:	|  |  |  |     |      addq.l #8,sp
   10bfe:	|  |  |  |     |      tst.l d0
   10c00:	|  |  |  |     |  /-- bne.s 10c1a <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   10c02:	|  |  |  |     |  |   move.l sp,d0
   10c04:	|  |  |  |     |  |   addq.l #8,d0
   10c06:	|  |  |  |     |  |   move.l d0,-(sp)
   10c08:	|  |  |  |     |  |   jsr 10d9e <stringToInt>
   10c0e:	|  |  |  |     |  |   addq.l #4,sp
   10c10:	|  |  |  |     |  |   move.l d0,18cfa <gameSettings+0xa>
   10c16:	|  |  |  |     +--|-- bra.w 10ce8 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   10c1a:	|  |  |  |     |  \-> pea 160a9 <custom.c.36a9b171+0x14af>
   10c20:	|  |  |  |     |      move.l sp,d0
   10c22:	|  |  |  |     |      addi.l #269,d0
   10c28:	|  |  |  |     |      move.l d0,-(sp)
   10c2a:	|  |  |  |     |      jsr 10eae <strcmp>
   10c30:	|  |  |  |     |      addq.l #8,sp
   10c32:	|  |  |  |     |      tst.l d0
   10c34:	|  |  |  |     |  /-- bne.s 10c4e <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   10c36:	|  |  |  |     |  |   move.l sp,d0
   10c38:	|  |  |  |     |  |   addq.l #8,d0
   10c3a:	|  |  |  |     |  |   move.l d0,-(sp)
   10c3c:	|  |  |  |     |  |   jsr 10d9e <stringToInt>
   10c42:	|  |  |  |     |  |   addq.l #4,sp
   10c44:	|  |  |  |     |  |   move.l d0,18cfe <gameSettings+0xe>
   10c4a:	|  |  |  |     +--|-- bra.w 10ce8 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   10c4e:	|  |  |  |     |  \-> pea 160b3 <custom.c.36a9b171+0x14b9>
   10c54:	|  |  |  |     |      move.l sp,d0
   10c56:	|  |  |  |     |      addi.l #269,d0
   10c5c:	|  |  |  |     |      move.l d0,-(sp)
   10c5e:	|  |  |  |     |      jsr 10eae <strcmp>
   10c64:	|  |  |  |     |      addq.l #8,sp
   10c66:	|  |  |  |     |      tst.l d0
   10c68:	|  |  |  |     |  /-- bne.s 10c82 <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   10c6a:	|  |  |  |     |  |   move.l sp,d0
   10c6c:	|  |  |  |     |  |   addq.l #8,d0
   10c6e:	|  |  |  |     |  |   move.l d0,-(sp)
   10c70:	|  |  |  |     |  |   jsr 10d9e <stringToInt>
   10c76:	|  |  |  |     |  |   addq.l #4,sp
   10c78:	|  |  |  |     |  |   move.l d0,d0
   10c7a:	|  |  |  |     |  |   move.w d0,18d02 <gameSettings+0x12>
   10c80:	|  |  |  |     +--|-- bra.s 10ce8 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   10c82:	|  |  |  |     |  \-> pea 160bf <custom.c.36a9b171+0x14c5>
   10c88:	|  |  |  |     |      move.l sp,d0
   10c8a:	|  |  |  |     |      addi.l #269,d0
   10c90:	|  |  |  |     |      move.l d0,-(sp)
   10c92:	|  |  |  |     |      jsr 10eae <strcmp>
   10c98:	|  |  |  |     |      addq.l #8,sp
   10c9a:	|  |  |  |     |      tst.l d0
   10c9c:	|  |  |  |     |  /-- bne.s 10cb6 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   10c9e:	|  |  |  |     |  |   move.l sp,d0
   10ca0:	|  |  |  |     |  |   addq.l #8,d0
   10ca2:	|  |  |  |     |  |   move.l d0,-(sp)
   10ca4:	|  |  |  |     |  |   jsr 10d9e <stringToInt>
   10caa:	|  |  |  |     |  |   addq.l #4,sp
   10cac:	|  |  |  |     |  |   move.l d0,d0
   10cae:	|  |  |  |     |  |   move.w d0,18d04 <gameSettings+0x14>
   10cb4:	|  |  |  |     +--|-- bra.s 10ce8 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   10cb6:	|  |  |  |     |  \-> pea 160cd <custom.c.36a9b171+0x14d3>
   10cbc:	|  |  |  |     |      move.l sp,d0
   10cbe:	|  |  |  |     |      addi.l #269,d0
   10cc4:	|  |  |  |     |      move.l d0,-(sp)
   10cc6:	|  |  |  |     |      jsr 10eae <strcmp>
   10ccc:	|  |  |  |     |      addq.l #8,sp
   10cce:	|  |  |  |     |      tst.l d0
   10cd0:	|  |  |  |     +----- bne.s 10ce8 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   10cd2:	|  |  |  |     |      move.l sp,d0
   10cd4:	|  |  |  |     |      addq.l #8,d0
   10cd6:	|  |  |  |     |      move.l d0,-(sp)
   10cd8:	|  |  |  |     |      jsr 10d9e <stringToInt>
   10cde:	|  |  |  |     |      addq.l #4,sp
   10ce0:	|  |  |  |     |      move.l d0,d0
   10ce2:	|  |  |  |     |      move.w d0,18d06 <gameSettings+0x16>
					}
				}
				here = 0;
   10ce8:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
   10cec:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   10cf0:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   10cf4:	|  |  |  |            clr.b 8(sp)
				break;
   10cf8:	|  |  |  |  /-------- bra.s 10d70 <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   10cfa:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
   10d00:	|  |  |     |         clr.b 571(sp)
				break;
   10d04:	|  |  |     +-------- bra.s 10d70 <readIniFile+0x358>

				default:
				if (doingSecond) {
   10d06:	|  |  \-----|-------> tst.w 566(sp)
   10d0a:	|  |        |  /----- beq.s 10d3e <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   10d0c:	|  |        |  |      move.b 571(sp),d0
   10d10:	|  |        |  |      move.b d0,d1
   10d12:	|  |        |  |      addq.b #1,d1
   10d14:	|  |        |  |      move.b d1,571(sp)
   10d18:	|  |        |  |      move.b d0,d0
   10d1a:	|  |        |  |      andi.l #255,d0
   10d20:	|  |        |  |      lea 572(sp),a0
   10d24:	|  |        |  |      adda.l d0,a0
   10d26:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   10d2c:	|  |        |  |      moveq #0,d0
   10d2e:	|  |        |  |      move.b 571(sp),d0
   10d32:	|  |        |  |      lea 572(sp),a0
   10d36:	|  |        |  |      adda.l d0,a0
   10d38:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   10d3c:	|  |        |  |  /-- bra.s 10d6e <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   10d3e:	|  |        |  \--|-> move.b 571(sp),d0
   10d42:	|  |        |     |   move.b d0,d1
   10d44:	|  |        |     |   addq.b #1,d1
   10d46:	|  |        |     |   move.b d1,571(sp)
   10d4a:	|  |        |     |   move.b d0,d0
   10d4c:	|  |        |     |   andi.l #255,d0
   10d52:	|  |        |     |   lea 572(sp),a0
   10d56:	|  |        |     |   adda.l d0,a0
   10d58:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   10d5e:	|  |        |     |   moveq #0,d0
   10d60:	|  |        |     |   move.b 571(sp),d0
   10d64:	|  |        |     |   lea 572(sp),a0
   10d68:	|  |        |     |   adda.l d0,a0
   10d6a:	|  |        |     |   clr.b -307(a0)
				break;
   10d6e:	|  |        |     \-> nop
			}
		} while (keepGoing);
   10d70:	|  |        \-------> tst.w 568(sp)
   10d74:	|  \----------------- bne.w 10b08 <readIniFile+0xf0>

		Close(fp);
   10d78:	|                     move.l 546(sp),526(sp)
   10d7e:	|                     move.l 18bc8 <DOSBase>,d0
   10d84:	|                     movea.l d0,a6
   10d86:	|                     move.l 526(sp),d1
   10d8a:	|                     jsr -36(a6)
   10d8e:	|                     move.l d0,522(sp)
	}
}
   10d92:	\-------------------> nop
   10d94:	                      move.l (sp)+,d2
   10d96:	                      movea.l (sp)+,a6
   10d98:	                      lea 564(sp),sp
   10d9c:	                      rts

00010d9e <stringToInt>:

unsigned int stringToInt (char * s) {
   10d9e:	             subq.l #8,sp
	int i = 0;
   10da0:	             clr.l 4(sp)
	BOOL negative = FALSE;
   10da4:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   10da8:	/----------> movea.l 12(sp),a0
   10dac:	|            move.b (a0),d0
   10dae:	|            cmpi.b #47,d0
   10db2:	|        /-- ble.s 10dea <stringToInt+0x4c>
   10db4:	|        |   movea.l 12(sp),a0
   10db8:	|        |   move.b (a0),d0
   10dba:	|        |   cmpi.b #57,d0
   10dbe:	|        +-- bgt.s 10dea <stringToInt+0x4c>
			i *= 10;
   10dc0:	|        |   move.l 4(sp),d1
   10dc4:	|        |   move.l d1,d0
   10dc6:	|        |   add.l d0,d0
   10dc8:	|        |   add.l d0,d0
   10dca:	|        |   add.l d1,d0
   10dcc:	|        |   add.l d0,d0
   10dce:	|        |   move.l d0,4(sp)
			i += *s - '0';
   10dd2:	|        |   movea.l 12(sp),a0
   10dd6:	|        |   move.b (a0),d0
   10dd8:	|        |   ext.w d0
   10dda:	|        |   movea.w d0,a0
   10ddc:	|        |   moveq #-48,d0
   10dde:	|        |   add.l a0,d0
   10de0:	|        |   add.l d0,4(sp)
			s ++;
   10de4:	|        |   addq.l #1,12(sp)
   10de8:	|  /-----|-- bra.s 10e22 <stringToInt+0x84>
		} else if (*s == '-') {
   10dea:	|  |     \-> movea.l 12(sp),a0
   10dee:	|  |         move.b (a0),d0
   10df0:	|  |         cmpi.b #45,d0
   10df4:	|  |     /-- bne.s 10e0e <stringToInt+0x70>
			negative = ! negative;
   10df6:	|  |     |   tst.w 2(sp)
   10dfa:	|  |     |   seq d0
   10dfc:	|  |     |   neg.b d0
   10dfe:	|  |     |   move.b d0,d0
   10e00:	|  |     |   andi.w #255,d0
   10e04:	|  |     |   move.w d0,2(sp)
			s++;
   10e08:	|  |     |   addq.l #1,12(sp)
   10e0c:	+--|-----|-- bra.s 10da8 <stringToInt+0xa>
		} else {
			if (negative)
   10e0e:	|  |     \-> tst.w 2(sp)
   10e12:	|  |     /-- beq.s 10e1c <stringToInt+0x7e>
				return -i;
   10e14:	|  |     |   move.l 4(sp),d0
   10e18:	|  |     |   neg.l d0
   10e1a:	|  |  /--|-- bra.s 10e24 <stringToInt+0x86>
			return i;
   10e1c:	|  |  |  \-> move.l 4(sp),d0
   10e20:	|  |  +----- bra.s 10e24 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   10e22:	\--\--|----X bra.s 10da8 <stringToInt+0xa>
		}
	}
   10e24:	      \----> addq.l #8,sp
   10e26:	             rts

00010e28 <fileExists>:
 *  Helper functions that don't depend on other source files.
 */
#include <proto/dos.h>
#include "helpers.h"

BYTE fileExists(const char * file) {
   10e28:	    lea -28(sp),sp
   10e2c:	    move.l a6,-(sp)
   10e2e:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   10e30:	    pea 160d7 <custom.c.36a9b171+0x14dd>
   10e36:	    jsr 13a4a <KPrintF>
   10e3c:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   10e3e:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   10e42:	    move.l 40(sp),30(sp)
   10e48:	    move.l #1005,26(sp)
   10e50:	    move.l 18bc8 <DOSBase>,d0
   10e56:	    movea.l d0,a6
   10e58:	    move.l 30(sp),d1
   10e5c:	    move.l 26(sp),d2
   10e60:	    jsr -30(a6)
   10e64:	    move.l d0,22(sp)
   10e68:	    move.l 22(sp),d0
   10e6c:	    move.l d0,18(sp)
	if (tester) {
   10e70:	/-- beq.s 10ea0 <fileExists+0x78>
		KPrintF("fileexists: File exists");
   10e72:	|   pea 160f1 <custom.c.36a9b171+0x14f7>
   10e78:	|   jsr 13a4a <KPrintF>
   10e7e:	|   addq.l #4,sp
		retval = 1;
   10e80:	|   move.b #1,35(sp)
		Close(tester);
   10e86:	|   move.l 18(sp),14(sp)
   10e8c:	|   move.l 18bc8 <DOSBase>,d0
   10e92:	|   movea.l d0,a6
   10e94:	|   move.l 14(sp),d1
   10e98:	|   jsr -36(a6)
   10e9c:	|   move.l d0,10(sp)
	}
	return retval;
   10ea0:	\-> move.b 35(sp),d0
   10ea4:	    move.l (sp)+,d2
   10ea6:	    movea.l (sp)+,a6
   10ea8:	    lea 28(sp),sp
   10eac:	    rts

00010eae <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   10eae:	   /-- bra.s 10eb8 <strcmp+0xa>
    {
        s1++;
   10eb0:	/--|-> addq.l #1,4(sp)
        s2++;
   10eb4:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   10eb8:	|  \-> movea.l 4(sp),a0
   10ebc:	|      move.b (a0),d0
   10ebe:	|  /-- beq.s 10ed0 <strcmp+0x22>
   10ec0:	|  |   movea.l 4(sp),a0
   10ec4:	|  |   move.b (a0),d1
   10ec6:	|  |   movea.l 8(sp),a0
   10eca:	|  |   move.b (a0),d0
   10ecc:	|  |   cmp.b d1,d0
   10ece:	\--|-- beq.s 10eb0 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   10ed0:	   \-> movea.l 4(sp),a0
   10ed4:	       move.b (a0),d0
   10ed6:	       moveq #0,d1
   10ed8:	       move.b d0,d1
   10eda:	       movea.l 8(sp),a0
   10ede:	       move.b (a0),d0
   10ee0:	       move.b d0,d0
   10ee2:	       andi.l #255,d0
   10ee8:	       sub.l d0,d1
   10eea:	       move.l d1,d0
}
   10eec:	       rts

00010eee <strlen>:

long unsigned int strlen (const char *s) 
{  
   10eee:	       subq.l #4,sp
	long unsigned int i = 0;
   10ef0:	       clr.l (sp)
	while(s[i]) i++; 
   10ef2:	   /-- bra.s 10ef6 <strlen+0x8>
   10ef4:	/--|-> addq.l #1,(sp)
   10ef6:	|  \-> movea.l 8(sp),a0
   10efa:	|      adda.l (sp),a0
   10efc:	|      move.b (a0),d0
   10efe:	\----- bne.s 10ef4 <strlen+0x6>
	return(i);
   10f00:	       move.l (sp),d0
}
   10f02:	       addq.l #4,sp
   10f04:	       rts

00010f06 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   10f06:	    nop
   10f08:	/-> move.l 8(sp),d0
   10f0c:	|   move.l d0,d1
   10f0e:	|   addq.l #1,d1
   10f10:	|   move.l d1,8(sp)
   10f14:	|   movea.l 4(sp),a0
   10f18:	|   lea 1(a0),a1
   10f1c:	|   move.l a1,4(sp)
   10f20:	|   movea.l d0,a1
   10f22:	|   move.b (a1),d0
   10f24:	|   move.b d0,(a0)
   10f26:	|   move.b (a0),d0
   10f28:	\-- bne.s 10f08 <strcpy+0x2>
}
   10f2a:	    nop
   10f2c:	    rts

00010f2e <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   10f2e:	    lea -20(sp),sp
   10f32:	    move.l a6,-(sp)
   10f34:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   10f36:	    move.l 32(sp),-(sp)
   10f3a:	    jsr 10eee <strlen>
   10f40:	    addq.l #4,sp
   10f42:	    move.l d0,d2
   10f44:	    move.l 36(sp),-(sp)
   10f48:	    jsr 10eee <strlen>
   10f4e:	    addq.l #4,sp
   10f50:	    add.l d2,d0
   10f52:	    move.l d0,d1
   10f54:	    addq.l #1,d1
   10f56:	    move.l d1,20(sp)
   10f5a:	    clr.l 16(sp)
   10f5e:	    move.l 18bc0 <SysBase>,d0
   10f64:	    movea.l d0,a6
   10f66:	    move.l 20(sp),d0
   10f6a:	    move.l 16(sp),d1
   10f6e:	    jsr -684(a6)
   10f72:	    move.l d0,12(sp)
   10f76:	    move.l 12(sp),d0
   10f7a:	    move.l d0,8(sp)
	char * t = newString;
   10f7e:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   10f84:	    nop
   10f86:	/-> move.l 32(sp),d0
   10f8a:	|   move.l d0,d1
   10f8c:	|   addq.l #1,d1
   10f8e:	|   move.l d1,32(sp)
   10f92:	|   movea.l 24(sp),a0
   10f96:	|   lea 1(a0),a1
   10f9a:	|   move.l a1,24(sp)
   10f9e:	|   movea.l d0,a1
   10fa0:	|   move.b (a1),d0
   10fa2:	|   move.b d0,(a0)
   10fa4:	|   move.b (a0),d0
   10fa6:	\-- bne.s 10f86 <joinStrings+0x58>
	t--;
   10fa8:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   10fac:	    nop
   10fae:	/-> move.l 36(sp),d0
   10fb2:	|   move.l d0,d1
   10fb4:	|   addq.l #1,d1
   10fb6:	|   move.l d1,36(sp)
   10fba:	|   movea.l 24(sp),a0
   10fbe:	|   lea 1(a0),a1
   10fc2:	|   move.l a1,24(sp)
   10fc6:	|   movea.l d0,a1
   10fc8:	|   move.b (a1),d0
   10fca:	|   move.b d0,(a0)
   10fcc:	|   move.b (a0),d0
   10fce:	\-- bne.s 10fae <joinStrings+0x80>

	return newString;
   10fd0:	    move.l 8(sp),d0
}
   10fd4:	    move.l (sp)+,d2
   10fd6:	    movea.l (sp)+,a6
   10fd8:	    lea 20(sp),sp
   10fdc:	    rts

00010fde <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   10fde:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   10fe2:	       moveq #10,d0
   10fe4:	       cmp.l 28(sp),d0
   10fe8:	   /-- bne.s 11006 <itoa+0x28>
   10fea:	   |   tst.l 20(sp)
   10fee:	   +-- bge.s 11006 <itoa+0x28>
        *str++ = '-';
   10ff0:	   |   move.l 24(sp),d0
   10ff4:	   |   move.l d0,d1
   10ff6:	   |   addq.l #1,d1
   10ff8:	   |   move.l d1,24(sp)
   10ffc:	   |   movea.l d0,a0
   10ffe:	   |   move.b #45,(a0)
        value *= -1;
   11002:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   11006:	   \-> move.l 24(sp),12(sp)
   1100c:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   11012:	   /-> move.l 20(sp),d0
   11016:	   |   move.l 28(sp),-(sp)
   1101a:	   |   move.l d0,-(sp)
   1101c:	   |   jsr 14330 <__modsi3>
   11022:	   |   addq.l #8,sp
   11024:	   |   movea.l d0,a1
   11026:	   |   move.l 12(sp),d0
   1102a:	   |   move.l d0,d1
   1102c:	   |   addq.l #1,d1
   1102e:	   |   move.l d1,12(sp)
   11032:	   |   lea 16109 <custom.c.36a9b171+0x150f>,a0
   11038:	   |   move.b (0,a1,a0.l),d1
   1103c:	   |   movea.l d0,a0
   1103e:	   |   move.b d1,(a0)
        value /= base;
   11040:	   |   move.l 28(sp),-(sp)
   11044:	   |   move.l 24(sp),-(sp)
   11048:	   |   jsr 14302 <__divsi3>
   1104e:	   |   addq.l #8,sp
   11050:	   |   move.l d0,20(sp)
    } while (value);
   11054:	   \-- bne.s 11012 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   11056:	       move.l 12(sp),d0
   1105a:	       move.l d0,d1
   1105c:	       subq.l #1,d1
   1105e:	       move.l d1,12(sp)
   11062:	       movea.l d0,a0
   11064:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   11066:	       move.l 4(sp),8(sp)
   1106c:	   /-- bra.s 11092 <itoa+0xb4>
        char temp = *low;
   1106e:	/--|-> movea.l 8(sp),a0
   11072:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   11076:	|  |   movea.l 12(sp),a0
   1107a:	|  |   move.b (a0),d0
   1107c:	|  |   movea.l 8(sp),a0
   11080:	|  |   move.b d0,(a0)
        *ptr = temp;
   11082:	|  |   movea.l 12(sp),a0
   11086:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   1108a:	|  |   addq.l #1,8(sp)
   1108e:	|  |   subq.l #1,12(sp)
   11092:	|  \-> move.l 8(sp),d0
   11096:	|      cmp.l 12(sp),d0
   1109a:	\----- bcs.s 1106e <itoa+0x90>
    }
    return rc;
   1109c:	       move.l 4(sp),d0
}
   110a0:	       lea 16(sp),sp
   110a4:	       rts

000110a6 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   110a6:	                            lea -40(sp),sp
   110aa:	                            move.l d2,-(sp)
    char* s = str;
   110ac:	                            move.l 48(sp),40(sp)
    const char* p = format;
   110b2:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   110b8:	   /----------------------- bra.w 111ec <vsprintf2+0x146>
        if (*p == '%') {
   110bc:	/--|----------------------> movea.l 36(sp),a0
   110c0:	|  |                        move.b (a0),d0
   110c2:	|  |                        cmpi.b #37,d0
   110c6:	|  |  /-------------------- bne.w 111d2 <vsprintf2+0x12c>
            switch (*++p) {
   110ca:	|  |  |                     addq.l #1,36(sp)
   110ce:	|  |  |                     movea.l 36(sp),a0
   110d2:	|  |  |                     move.b (a0),d0
   110d4:	|  |  |                     ext.w d0
   110d6:	|  |  |                     movea.w d0,a0
   110d8:	|  |  |                     moveq #115,d0
   110da:	|  |  |                     cmp.l a0,d0
   110dc:	|  |  |           /-------- beq.s 11154 <vsprintf2+0xae>
   110de:	|  |  |           |         moveq #115,d1
   110e0:	|  |  |           |         cmp.l a0,d1
   110e2:	|  |  |  /--------|-------- blt.w 111ba <vsprintf2+0x114>
   110e6:	|  |  |  |        |         moveq #99,d2
   110e8:	|  |  |  |        |         cmp.l a0,d2
   110ea:	|  |  |  |  /-----|-------- beq.w 11192 <vsprintf2+0xec>
   110ee:	|  |  |  |  |     |         moveq #100,d0
   110f0:	|  |  |  |  |     |         cmp.l a0,d0
   110f2:	|  |  |  +--|-----|-------- bne.w 111ba <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   110f6:	|  |  |  |  |     |         addq.l #4,56(sp)
   110fa:	|  |  |  |  |     |         movea.l 56(sp),a0
   110fe:	|  |  |  |  |     |         move.l (a0),d0
   11100:	|  |  |  |  |     |         move.l d0,d1
   11102:	|  |  |  |  |     |         subq.l #1,d1
   11104:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   11108:	|  |  |  |  |     |         pea a <_start+0xa>
   1110c:	|  |  |  |  |     |         lea 8(sp),a0
   11110:	|  |  |  |  |     |         move.l a0,-(sp)
   11112:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   11116:	|  |  |  |  |     |         jsr 10fde <itoa>
   1111c:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   11120:	|  |  |  |  |     |         lea 44(sp),a0
   11124:	|  |  |  |  |     |         lea -40(a0),a0
   11128:	|  |  |  |  |     |         move.l a0,28(sp)
   1112c:	|  |  |  |  |     |     /-- bra.s 11148 <vsprintf2+0xa2>
                        *s++ = *b;
   1112e:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   11132:	|  |  |  |  |     |  |  |   move.l d0,d1
   11134:	|  |  |  |  |     |  |  |   addq.l #1,d1
   11136:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   1113a:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   1113e:	|  |  |  |  |     |  |  |   move.b (a0),d1
   11140:	|  |  |  |  |     |  |  |   movea.l d0,a0
   11142:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   11144:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   11148:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   1114c:	|  |  |  |  |     |  |      move.b (a0),d0
   1114e:	|  |  |  |  |     |  \----- bne.s 1112e <vsprintf2+0x88>
                    }
                    break;
   11150:	|  |  |  |  |  /--|-------- bra.w 111e8 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   11154:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   11158:	|  |  |  |  |  |            movea.l 56(sp),a0
   1115c:	|  |  |  |  |  |            move.l (a0),d0
   1115e:	|  |  |  |  |  |            move.l d0,d1
   11160:	|  |  |  |  |  |            subq.l #1,d1
   11162:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   11166:	|  |  |  |  |  |        /-- bra.s 11188 <vsprintf2+0xe2>
                        *s++ = *sval++;
   11168:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   1116c:	|  |  |  |  |  |     |  |   move.l d1,d2
   1116e:	|  |  |  |  |  |     |  |   addq.l #1,d2
   11170:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   11174:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   11178:	|  |  |  |  |  |     |  |   move.l d0,d2
   1117a:	|  |  |  |  |  |     |  |   addq.l #1,d2
   1117c:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   11180:	|  |  |  |  |  |     |  |   movea.l d1,a0
   11182:	|  |  |  |  |  |     |  |   move.b (a0),d1
   11184:	|  |  |  |  |  |     |  |   movea.l d0,a0
   11186:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   11188:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   1118c:	|  |  |  |  |  |     |      move.b (a0),d0
   1118e:	|  |  |  |  |  |     \----- bne.s 11168 <vsprintf2+0xc2>
                    }
                    break;
   11190:	|  |  |  |  |  +----------- bra.s 111e8 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   11192:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   11196:	|  |  |  |     |            movea.l 56(sp),a0
   1119a:	|  |  |  |     |            move.l (a0),d0
   1119c:	|  |  |  |     |            move.l d0,d1
   1119e:	|  |  |  |     |            subq.l #1,d1
   111a0:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   111a4:	|  |  |  |     |            move.l 40(sp),d0
   111a8:	|  |  |  |     |            move.l d0,d2
   111aa:	|  |  |  |     |            addq.l #1,d2
   111ac:	|  |  |  |     |            move.l d2,40(sp)
   111b0:	|  |  |  |     |            move.l 24(sp),d1
   111b4:	|  |  |  |     |            movea.l d0,a0
   111b6:	|  |  |  |     |            move.b d1,(a0)
                    break;
   111b8:	|  |  |  |     +----------- bra.s 111e8 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   111ba:	|  |  |  \-----|----------> move.l 40(sp),d0
   111be:	|  |  |        |            move.l d0,d1
   111c0:	|  |  |        |            addq.l #1,d1
   111c2:	|  |  |        |            move.l d1,40(sp)
   111c6:	|  |  |        |            movea.l 36(sp),a0
   111ca:	|  |  |        |            move.b (a0),d1
   111cc:	|  |  |        |            movea.l d0,a0
   111ce:	|  |  |        |            move.b d1,(a0)
                    break;
   111d0:	|  |  |        +----------- bra.s 111e8 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   111d2:	|  |  \--------|----------> move.l 40(sp),d0
   111d6:	|  |           |            move.l d0,d1
   111d8:	|  |           |            addq.l #1,d1
   111da:	|  |           |            move.l d1,40(sp)
   111de:	|  |           |            movea.l 36(sp),a0
   111e2:	|  |           |            move.b (a0),d1
   111e4:	|  |           |            movea.l d0,a0
   111e6:	|  |           |            move.b d1,(a0)
        }
        p++;
   111e8:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   111ec:	|  \----------------------> movea.l 36(sp),a0
   111f0:	|                           move.b (a0),d0
   111f2:	\-------------------------- bne.w 110bc <vsprintf2+0x16>
    }
    *s = '\0';
   111f6:	                            movea.l 40(sp),a0
   111fa:	                            clr.b (a0)
    return s - str;
   111fc:	                            move.l 40(sp),d0
   11200:	                            sub.l 48(sp),d0
}
   11204:	                            move.l (sp)+,d2
   11206:	                            lea 40(sp),sp
   1120a:	                            rts

0001120c <sprintf>:

int sprintf(char* str, const char* format, ...) {
   1120c:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   1120e:	moveq #16,d0
   11210:	add.l sp,d0
   11212:	move.l d0,d1
   11214:	addq.l #4,d1
   11216:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   1121a:	move.l 16(sp),d0
   1121e:	move.l 4(sp),-(sp)
   11222:	move.l d0,-(sp)
   11224:	move.l 20(sp),-(sp)
   11228:	jsr 110a6 <vsprintf2>
   1122e:	lea 12(sp),sp
   11232:	move.l d0,(sp)
    va_end(args);
   11234:	clr.l 4(sp)

    return done;
   11238:	move.l (sp),d0
}
   1123a:	addq.l #8,sp
   1123c:	rts

0001123e <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   1123e:	       lea -20(sp),sp
   11242:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   11244:	       moveq #12,d0
   11246:	       move.l d0,20(sp)
   1124a:	       clr.l 16(sp)
   1124e:	       move.l 18bc0 <SysBase>,d0
   11254:	       movea.l d0,a6
   11256:	       move.l 20(sp),d0
   1125a:	       move.l 16(sp),d1
   1125e:	       jsr -684(a6)
   11262:	       move.l d0,12(sp)
   11266:	       move.l 12(sp),d0
   1126a:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   1126e:	   /-- bne.s 11274 <addVarToStack+0x36>
   11270:	   |   clr.w d0
   11272:	/--|-- bra.s 112bc <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   11274:	|  \-> move.l 8(sp),d0
   11278:	|      move.l d0,-(sp)
   1127a:	|      move.l 32(sp),-(sp)
   1127e:	|      jsr 11da0 <copyMain>
   11284:	|      addq.l #8,sp
   11286:	|      tst.w d0
   11288:	|  /-- bne.s 112a4 <addVarToStack+0x66>
        FreeVec(newStack);
   1128a:	|  |   move.l 8(sp),4(sp)
   11290:	|  |   move.l 18bc0 <SysBase>,d0
   11296:	|  |   movea.l d0,a6
   11298:	|  |   movea.l 4(sp),a1
   1129c:	|  |   jsr -690(a6)
        return FALSE;
   112a0:	|  |   clr.w d0
   112a2:	+--|-- bra.s 112bc <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   112a4:	|  \-> movea.l 32(sp),a0
   112a8:	|      move.l (a0),d0
   112aa:	|      movea.l 8(sp),a0
   112ae:	|      move.l d0,8(a0)
    *thisStack = newStack;
   112b2:	|      movea.l 32(sp),a0
   112b6:	|      move.l 8(sp),(a0)
    return TRUE;
   112ba:	|      moveq #1,d0
}
   112bc:	\----> movea.l (sp)+,a6
   112be:	       lea 20(sp),sp
   112c2:	       rts

000112c4 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   112c4:	       lea -16(sp),sp
   112c8:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   112ca:	       moveq #12,d0
   112cc:	       move.l d0,16(sp)
   112d0:	       clr.l 12(sp)
   112d4:	       move.l 18bc0 <SysBase>,d0
   112da:	       movea.l d0,a6
   112dc:	       move.l 16(sp),d0
   112e0:	       move.l 12(sp),d1
   112e4:	       jsr -684(a6)
   112e8:	       move.l d0,8(sp)
   112ec:	       move.l 8(sp),d0
   112f0:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   112f4:	   /-- bne.s 112fa <addVarToStackQuick+0x36>
   112f6:	   |   clr.w d0
   112f8:	/--|-- bra.s 11330 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   112fa:	|  \-> move.l 4(sp),d0
   112fe:	|      pea 8 <_start+0x8>
   11302:	|      move.l 28(sp),-(sp)
   11306:	|      move.l d0,-(sp)
   11308:	|      jsr 139fe <memcpy>
   1130e:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   11312:	|      movea.l 24(sp),a0
   11316:	|      clr.l (a0)

    newStack->next = *thisStack;
   11318:	|      movea.l 28(sp),a0
   1131c:	|      move.l (a0),d0
   1131e:	|      movea.l 4(sp),a0
   11322:	|      move.l d0,8(a0)
    *thisStack = newStack;
   11326:	|      movea.l 28(sp),a0
   1132a:	|      move.l 4(sp),(a0)
    return TRUE;
   1132e:	|      moveq #1,d0
}
   11330:	\----> movea.l (sp)+,a6
   11332:	       lea 16(sp),sp
   11336:	       rts

00011338 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   11338:	       lea -16(sp),sp
   1133c:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   1133e:	       movea.l 24(sp),a0
   11342:	       move.l (a0),d0
   11344:	       moveq #1,d1
   11346:	       cmp.l d0,d1
   11348:	   /-- bne.s 11372 <addVariablesInSecond+0x3a>
   1134a:	   |   movea.l 28(sp),a0
   1134e:	   |   move.l (a0),d0
   11350:	   |   moveq #1,d1
   11352:	   |   cmp.l d0,d1
   11354:	   +-- bne.s 11372 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   11356:	   |   movea.l 28(sp),a0
   1135a:	   |   move.l 4(a0),d1
   1135e:	   |   movea.l 24(sp),a0
   11362:	   |   move.l 4(a0),d0
   11366:	   |   add.l d1,d0
   11368:	   |   movea.l 28(sp),a0
   1136c:	   |   move.l d0,4(a0)
   11370:	/--|-- bra.s 113ec <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   11372:	|  \-> move.l 24(sp),-(sp)
   11376:	|      jsr 11fd8 <getTextFromAnyVar>
   1137c:	|      addq.l #4,sp
   1137e:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   11382:	|      move.l 28(sp),-(sp)
   11386:	|      jsr 11fd8 <getTextFromAnyVar>
   1138c:	|      addq.l #4,sp
   1138e:	|      move.l d0,12(sp)

		unlinkVar(var2);
   11392:	|      move.l 28(sp),-(sp)
   11396:	|      jsr 11c50 <unlinkVar>
   1139c:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   1139e:	|      move.l 12(sp),-(sp)
   113a2:	|      move.l 20(sp),-(sp)
   113a6:	|      jsr 10f2e <joinStrings>
   113ac:	|      addq.l #8,sp
   113ae:	|      movea.l 28(sp),a0
   113b2:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   113b6:	|      movea.l 28(sp),a0
   113ba:	|      moveq #3,d0
   113bc:	|      move.l d0,(a0)
		FreeVec(string1);
   113be:	|      move.l 16(sp),8(sp)
   113c4:	|      move.l 18bc0 <SysBase>,d0
   113ca:	|      movea.l d0,a6
   113cc:	|      movea.l 8(sp),a1
   113d0:	|      jsr -690(a6)
		FreeVec(string2);
   113d4:	|      move.l 12(sp),4(sp)
   113da:	|      move.l 18bc0 <SysBase>,d0
   113e0:	|      movea.l d0,a6
   113e2:	|      movea.l 4(sp),a1
   113e6:	|      jsr -690(a6)
	}
}
   113ea:	|      nop
   113ec:	\----> nop
   113ee:	       movea.l (sp)+,a6
   113f0:	       lea 16(sp),sp
   113f4:	       rts

000113f6 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   113f6:	movea.l 8(sp),a0
   113fa:	move.l 4(a0),-(sp)
   113fe:	move.l (a0),-(sp)
   11400:	movea.l 12(sp),a0
   11404:	move.l 4(a0),-(sp)
   11408:	move.l (a0),-(sp)
   1140a:	jsr 1142c <compareVars>
   11410:	lea 16(sp),sp
   11414:	move.l d0,-(sp)
   11416:	pea 1 <_start+0x1>
   1141a:	move.l 16(sp),-(sp)
   1141e:	jsr 122f4 <setVariable>
   11424:	lea 12(sp),sp
}
   11428:	nop
   1142a:	rts

0001142c <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   1142c:	       subq.l #4,sp
	int re = 0;
   1142e:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   11430:	       move.l 8(sp),d1
   11434:	       move.l 16(sp),d0
   11438:	       cmp.l d1,d0
   1143a:	/----- bne.w 11502 <compareVars+0xd6>
		switch (var1.varType) {
   1143e:	|      move.l 8(sp),d0
   11442:	|      moveq #9,d1
   11444:	|      cmp.l d0,d1
   11446:	|  /-- bcs.w 114ea <compareVars+0xbe>
   1144a:	|  |   add.l d0,d0
   1144c:	|  |   movea.l d0,a0
   1144e:	|  |   adda.l #70746,a0
   11454:	|  |   move.w (a0),d0
   11456:	|  |   jmp (1145a <compareVars+0x2e>,pc,d0.w)
   1145a:	|  |   ori.b #-112,(a4)
   1145e:	|  |   ori.l #5243024,(a0)
   11464:	|  |   ori.l #7733392,(a0)
   1146a:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   11470:	|  |   move.l d0,(sp)
			break;
   11472:	+--|-- bra.w 11502 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   11476:	|  |   move.l 12(sp),d1
   1147a:	|  |   move.l 20(sp),d0
   1147e:	|  |   cmp.l d1,d0
   11480:	|  |   seq d0
   11482:	|  |   neg.b d0
   11484:	|  |   move.b d0,d0
   11486:	|  |   andi.l #255,d0
   1148c:	|  |   move.l d0,(sp)
			break;
   1148e:	+--|-- bra.s 11502 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   11490:	|  |   move.l 12(sp),d1
   11494:	|  |   move.l 20(sp),d0
   11498:	|  |   cmp.l d1,d0
   1149a:	|  |   seq d0
   1149c:	|  |   neg.b d0
   1149e:	|  |   move.b d0,d0
   114a0:	|  |   andi.l #255,d0
   114a6:	|  |   move.l d0,(sp)
			break;
   114a8:	+--|-- bra.s 11502 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   114aa:	|  |   move.l 20(sp),d1
   114ae:	|  |   move.l 12(sp),d0
   114b2:	|  |   move.l d1,-(sp)
   114b4:	|  |   move.l d0,-(sp)
   114b6:	|  |   jsr 10eae <strcmp>
   114bc:	|  |   addq.l #8,sp
   114be:	|  |   tst.l d0
   114c0:	|  |   seq d0
   114c2:	|  |   neg.b d0
   114c4:	|  |   move.b d0,d0
   114c6:	|  |   andi.l #255,d0
   114cc:	|  |   move.l d0,(sp)
			break;
   114ce:	+--|-- bra.s 11502 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   114d0:	|  |   move.l 12(sp),d1
   114d4:	|  |   move.l 20(sp),d0
   114d8:	|  |   cmp.l d1,d0
   114da:	|  |   seq d0
   114dc:	|  |   neg.b d0
   114de:	|  |   move.b d0,d0
   114e0:	|  |   andi.l #255,d0
   114e6:	|  |   move.l d0,(sp)
			break;
   114e8:	+--|-- bra.s 11502 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   114ea:	|  \-> move.l 12(sp),d1
   114ee:	|      move.l 20(sp),d0
   114f2:	|      cmp.l d1,d0
   114f4:	|      seq d0
   114f6:	|      neg.b d0
   114f8:	|      move.b d0,d0
   114fa:	|      andi.l #255,d0
   11500:	|      move.l d0,(sp)
		}
	}
	return re;
   11502:	\----> move.l (sp),d0
}
   11504:	       addq.l #4,sp
   11506:	       rts

00011508 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   11508:	             lea -16(sp),sp
   1150c:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   1150e:	             movea.l 28(sp),a0
   11512:	             moveq #6,d0
   11514:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   11516:	             moveq #12,d0
   11518:	             move.l d0,12(sp)
   1151c:	             clr.l 8(sp)
   11520:	             move.l 18bc0 <SysBase>,d0
   11526:	             movea.l d0,a6
   11528:	             move.l 12(sp),d0
   1152c:	             move.l 8(sp),d1
   11530:	             jsr -684(a6)
   11534:	             move.l d0,4(sp)
   11538:	             move.l 4(sp),d0
   1153c:	             movea.l 28(sp),a0
   11540:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   11544:	             movea.l 28(sp),a0
   11548:	             move.l 4(a0),d0
   1154c:	         /-- bne.s 11554 <copyStack+0x4c>
   1154e:	         |   clr.w d0
   11550:	/--------|-- bra.w 115d6 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   11554:	|        \-> movea.l 28(sp),a0
   11558:	|            movea.l 4(a0),a0
   1155c:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   1155e:	|            movea.l 28(sp),a0
   11562:	|            movea.l 4(a0),a0
   11566:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   1156a:	|            movea.l 28(sp),a0
   1156e:	|            movea.l 4(a0),a0
   11572:	|            moveq #1,d0
   11574:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   11578:	|            movea.l 24(sp),a0
   1157c:	|            movea.l 4(a0),a0
   11580:	|            move.l (a0),16(sp)

	while (a) {
   11584:	|     /----- bra.s 115ce <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   11586:	|  /--|----> movea.l 28(sp),a0
   1158a:	|  |  |      move.l 4(a0),d0
   1158e:	|  |  |      move.l d0,d1
   11590:	|  |  |      move.l 16(sp),d0
   11594:	|  |  |      move.l d1,-(sp)
   11596:	|  |  |      move.l d0,-(sp)
   11598:	|  |  |      jsr 1123e <addVarToStack>
   1159e:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   115a0:	|  |  |      movea.l 28(sp),a0
   115a4:	|  |  |      movea.l 4(a0),a0
   115a8:	|  |  |      move.l 4(a0),d0
   115ac:	|  |  |  /-- bne.s 115c4 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   115ae:	|  |  |  |   movea.l 28(sp),a0
   115b2:	|  |  |  |   movea.l 4(a0),a1
   115b6:	|  |  |  |   movea.l 28(sp),a0
   115ba:	|  |  |  |   movea.l 4(a0),a0
   115be:	|  |  |  |   move.l (a1),d0
   115c0:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   115c4:	|  |  |  \-> movea.l 16(sp),a0
   115c8:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   115ce:	|  |  \----> tst.l 16(sp)
   115d2:	|  \-------- bne.s 11586 <copyStack+0x7e>
	}

	return TRUE;
   115d4:	|            moveq #1,d0
}
   115d6:	\----------> movea.l (sp)+,a6
   115d8:	             lea 16(sp),sp
   115dc:	             rts

000115de <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   115de:	                lea -20(sp),sp
   115e2:	                move.l a6,-(sp)
   115e4:	                move.l 36(sp),d0
   115e8:	                move.w d0,d0
   115ea:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   115ee:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   115f4:	                clr.l 16(sp)

    while (*huntVar) {
   115f8:	   /----------- bra.s 11676 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   115fa:	/--|----------> movea.l 20(sp),a0
   115fe:	|  |            movea.l (a0),a0
   11600:	|  |            movea.l 28(sp),a1
   11604:	|  |            move.l 4(a1),-(sp)
   11608:	|  |            move.l (a1),-(sp)
   1160a:	|  |            move.l 4(a0),-(sp)
   1160e:	|  |            move.l (a0),-(sp)
   11610:	|  |            jsr 1142c <compareVars>
   11616:	|  |            lea 16(sp),sp
   1161a:	|  |            tst.l d0
   1161c:	|  |  /-------- beq.s 11668 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   1161e:	|  |  |         movea.l 20(sp),a0
   11622:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   11626:	|  |  |         movea.l 12(sp),a0
   1162a:	|  |  |         move.l 8(a0),d0
   1162e:	|  |  |         movea.l 20(sp),a0
   11632:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   11634:	|  |  |         move.l 12(sp),d0
   11638:	|  |  |         move.l d0,-(sp)
   1163a:	|  |  |         jsr 11c50 <unlinkVar>
   11640:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   11642:	|  |  |         move.l 12(sp),8(sp)
   11648:	|  |  |         move.l 18bc0 <SysBase>,d0
   1164e:	|  |  |         movea.l d0,a6
   11650:	|  |  |         movea.l 8(sp),a1
   11654:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   11658:	|  |  |         tst.w 6(sp)
   1165c:	|  |  |     /-- bne.s 11662 <deleteVarFromStack+0x84>
   1165e:	|  |  |     |   moveq #1,d0
   11660:	|  |  |  /--|-- bra.s 11684 <deleteVarFromStack+0xa6>
            reply++;
   11662:	|  |  |  |  \-> addq.l #1,16(sp)
   11666:	|  +--|--|----- bra.s 11676 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   11668:	|  |  \--|----> movea.l 20(sp),a0
   1166c:	|  |     |      move.l (a0),d0
   1166e:	|  |     |      move.l d0,d1
   11670:	|  |     |      addq.l #8,d1
   11672:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   11676:	|  \-----|----> movea.l 20(sp),a0
   1167a:	|        |      move.l (a0),d0
   1167c:	\--------|----- bne.w 115fa <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   11680:	         |      move.l 16(sp),d0
}
   11684:	         \----> movea.l (sp)+,a6
   11686:	                lea 20(sp),sp
   1168a:	                rts

0001168c <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   1168c:	       movea.l 4(sp),a0
   11690:	       move.l 4(a0),d0
   11694:	       cmp.l 8(sp),d0
   11698:	   /-- bhi.s 1169e <fastArrayGetByIndex+0x12>
   1169a:	   |   moveq #0,d0
   1169c:	/--|-- bra.s 116ac <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   1169e:	|  \-> movea.l 4(sp),a0
   116a2:	|      move.l (a0),d1
   116a4:	|      move.l 8(sp),d0
   116a8:	|      lsl.l #3,d0
   116aa:	|      add.l d1,d0
}
   116ac:	\----> rts

000116ae <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   116ae:	                lea -32(sp),sp
   116b2:	                move.l a6,-(sp)
   116b4:	                move.l a2,-(sp)
    struct persona *p = NULL;
   116b6:	                clr.l 36(sp)

    switch (thisVar->varType) {
   116ba:	                movea.l 44(sp),a0
   116be:	                move.l (a0),d0
   116c0:	                moveq #8,d1
   116c2:	                cmp.l d0,d1
   116c4:	            /-- beq.s 116d2 <getCostumeFromVar+0x24>
   116c6:	            |   moveq #9,d1
   116c8:	            |   cmp.l d0,d1
   116ca:	   /--------|-- beq.w 11780 <getCostumeFromVar+0xd2>
   116ce:	/--|--------|-- bra.w 1178a <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   116d2:	|  |        \-> moveq #8,d0
   116d4:	|  |            move.l d0,28(sp)
   116d8:	|  |            clr.l 24(sp)
   116dc:	|  |            move.l 18bc0 <SysBase>,d0
   116e2:	|  |            movea.l d0,a6
   116e4:	|  |            move.l 28(sp),d0
   116e8:	|  |            move.l 24(sp),d1
   116ec:	|  |            jsr -684(a6)
   116f0:	|  |            move.l d0,20(sp)
   116f4:	|  |            move.l 20(sp),d0
   116f8:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   116fc:	|  |        /-- bne.s 11704 <getCostumeFromVar+0x56>
   116fe:	|  |        |   moveq #0,d0
   11700:	|  |  /-----|-- bra.w 117b4 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   11704:	|  |  |     \-> movea.l 36(sp),a0
   11708:	|  |  |         moveq #1,d1
   1170a:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   1170e:	|  |  |         moveq #12,d0
   11710:	|  |  |         move.l d0,16(sp)
   11714:	|  |  |         clr.l 12(sp)
   11718:	|  |  |         move.l 18bc0 <SysBase>,d0
   1171e:	|  |  |         movea.l d0,a6
   11720:	|  |  |         move.l 16(sp),d0
   11724:	|  |  |         move.l 12(sp),d1
   11728:	|  |  |         jsr -684(a6)
   1172c:	|  |  |         move.l d0,8(sp)
   11730:	|  |  |         move.l 8(sp),d0
   11734:	|  |  |         movea.l 36(sp),a0
   11738:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   1173a:	|  |  |         movea.l 36(sp),a0
   1173e:	|  |  |         move.l (a0),d0
   11740:	|  |  |     /-- bne.s 11746 <getCostumeFromVar+0x98>
   11742:	|  |  |     |   moveq #0,d0
   11744:	|  |  +-----|-- bra.s 117b4 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   11746:	|  |  |     \-> clr.l 32(sp)
   1174a:	|  |  |     /-- bra.s 11776 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   1174c:	|  |  |  /--|-> movea.l 44(sp),a0
   11750:	|  |  |  |  |   move.l 4(a0),d0
   11754:	|  |  |  |  |   movea.l 36(sp),a0
   11758:	|  |  |  |  |   movea.l (a0),a0
   1175a:	|  |  |  |  |   move.l 32(sp),d1
   1175e:	|  |  |  |  |   add.l d1,d1
   11760:	|  |  |  |  |   add.l d1,d1
   11762:	|  |  |  |  |   lea (0,a0,d1.l),a2
   11766:	|  |  |  |  |   move.l d0,-(sp)
   11768:	|  |  |  |  |   jsr 6ad2 <copyAnim>
   1176e:	|  |  |  |  |   addq.l #4,sp
   11770:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   11772:	|  |  |  |  |   addq.l #1,32(sp)
   11776:	|  |  |  |  \-> moveq #2,d1
   11778:	|  |  |  |      cmp.l 32(sp),d1
   1177c:	|  |  |  \----- bge.s 1174c <getCostumeFromVar+0x9e>
            }
            break;
   1177e:	|  |  |     /-- bra.s 117b0 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   11780:	|  \--|-----|-> movea.l 44(sp),a0
   11784:	|     |     |   move.l 4(a0),d0
   11788:	|     +-----|-- bra.s 117b4 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   1178a:	\-----|-----|-> movea.l 44(sp),a0
   1178e:	      |     |   move.l (a0),d0
   11790:	      |     |   add.l d0,d0
   11792:	      |     |   movea.l d0,a1
   11794:	      |     |   adda.l d0,a1
   11796:	      |     |   lea 18ab6 <typeName>,a0
   1179c:	      |     |   move.l (0,a1,a0.l),d0
   117a0:	      |     |   move.l d0,-(sp)
   117a2:	      |     |   pea 1617b <custom.c.36a9b171+0x1581>
   117a8:	      |     |   jsr 13a4a <KPrintF>
   117ae:	      |     |   addq.l #8,sp
    }

    return p;
   117b0:	      |     \-> move.l 36(sp),d0
}
   117b4:	      \-------> movea.l (sp)+,a2
   117b6:	                movea.l (sp)+,a6
   117b8:	                lea 32(sp),sp
   117bc:	                rts

000117be <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   117be:	                lea -96(sp),sp
   117c2:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   117c6:	                move.l 116(sp),-(sp)
   117ca:	                pea 161b3 <custom.c.36a9b171+0x15b9>
   117d0:	                jsr 10f2e <joinStrings>
   117d6:	                addq.l #8,sp
   117d8:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   117dc:	            /-- bne.s 117e4 <getSavedGamesStack+0x26>
   117de:	            |   clr.w d0
   117e0:	/-----------|-- bra.w 119f8 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   117e4:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   117e8:	|               move.l #90549,98(sp)
   117f0:	|               moveq #-2,d0
   117f2:	|               move.l d0,94(sp)
   117f6:	|               move.l 18bc8 <DOSBase>,d0
   117fc:	|               movea.l d0,a6
   117fe:	|               move.l 98(sp),d1
   11802:	|               move.l 94(sp),d2
   11806:	|               jsr -84(a6)
   1180a:	|               move.l d0,90(sp)
   1180e:	|               move.l 90(sp),d0
   11812:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   11816:	|           /-- bne.s 1181e <getSavedGamesStack+0x60>
   11818:	|           |   clr.w d0
   1181a:	+-----------|-- bra.w 119f8 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   1181e:	|           \-> move.l #260,82(sp)
   11826:	|               move.l #65536,78(sp)
   1182e:	|               move.l 18bc0 <SysBase>,d0
   11834:	|               movea.l d0,a6
   11836:	|               move.l 82(sp),d0
   1183a:	|               move.l 78(sp),d1
   1183e:	|               jsr -684(a6)
   11842:	|               move.l d0,74(sp)
   11846:	|               move.l 74(sp),d0
   1184a:	|               move.l d0,70(sp)
	if (!fib) {
   1184e:	|           /-- bne.s 1186c <getSavedGamesStack+0xae>
		UnLock(dirLock);
   11850:	|           |   move.l 86(sp),22(sp)
   11856:	|           |   move.l 18bc8 <DOSBase>,d0
   1185c:	|           |   movea.l d0,a6
   1185e:	|           |   move.l 22(sp),d1
   11862:	|           |   jsr -90(a6)
		return FALSE;
   11866:	|           |   clr.w d0
   11868:	+-----------|-- bra.w 119f8 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   1186c:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   11870:	|               move.l 86(sp),66(sp)
   11876:	|               move.l 70(sp),62(sp)
   1187c:	|               move.l 18bc8 <DOSBase>,d0
   11882:	|               movea.l d0,a6
   11884:	|               move.l 66(sp),d1
   11888:	|               move.l 62(sp),d2
   1188c:	|               jsr -102(a6)
   11890:	|               move.l d0,58(sp)
   11894:	|               move.l 58(sp),d0
   11898:	|  /----------- beq.w 119ac <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   1189c:	|  |        /-- bra.w 11978 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   118a0:	|  |  /-----|-> move.l 70(sp),d2
   118a4:	|  |  |     |   addq.l #8,d2
   118a6:	|  |  |     |   move.l 70(sp),d0
   118aa:	|  |  |     |   addq.l #8,d0
   118ac:	|  |  |     |   move.l d0,-(sp)
   118ae:	|  |  |     |   jsr 10eee <strlen>
   118b4:	|  |  |     |   addq.l #4,sp
   118b6:	|  |  |     |   move.l d0,d3
   118b8:	|  |  |     |   move.l 116(sp),-(sp)
   118bc:	|  |  |     |   jsr 10eee <strlen>
   118c2:	|  |  |     |   addq.l #4,sp
   118c4:	|  |  |     |   move.l d3,d1
   118c6:	|  |  |     |   sub.l d0,d1
   118c8:	|  |  |     |   move.l d2,d0
   118ca:	|  |  |     |   add.l d1,d0
   118cc:	|  |  |     |   move.l 116(sp),-(sp)
   118d0:	|  |  |     |   move.l d0,-(sp)
   118d2:	|  |  |     |   jsr 10eae <strcmp>
   118d8:	|  |  |     |   addq.l #8,sp
   118da:	|  |  |     |   tst.l d0
   118dc:	|  |  |     +-- bne.w 11978 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   118e0:	|  |  |     |   move.l 70(sp),d0
   118e4:	|  |  |     |   addq.l #8,d0
   118e6:	|  |  |     |   move.l d0,-(sp)
   118e8:	|  |  |     |   jsr 10eee <strlen>
   118ee:	|  |  |     |   addq.l #4,sp
   118f0:	|  |  |     |   move.l d0,d2
   118f2:	|  |  |     |   move.l 116(sp),-(sp)
   118f6:	|  |  |     |   jsr 10eee <strlen>
   118fc:	|  |  |     |   addq.l #4,sp
   118fe:	|  |  |     |   move.l d0,d1
   11900:	|  |  |     |   move.l d2,d0
   11902:	|  |  |     |   sub.l d1,d0
   11904:	|  |  |     |   movea.l 70(sp),a0
   11908:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   1190c:	|  |  |     |   move.l 70(sp),d0
   11910:	|  |  |     |   addq.l #8,d0
   11912:	|  |  |     |   move.l d0,-(sp)
   11914:	|  |  |     |   jsr 118 <decodeFilename>
   1191a:	|  |  |     |   addq.l #4,sp
   1191c:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   11920:	|  |  |     |   move.l 42(sp),-(sp)
   11924:	|  |  |     |   lea 18(sp),a0
   11928:	|  |  |     |   move.l a0,-(sp)
   1192a:	|  |  |     |   jsr 11c24 <makeTextVar>
   11930:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   11932:	|  |  |     |   move.l 42(sp),38(sp)
   11938:	|  |  |     |   move.l 18bc0 <SysBase>,d0
   1193e:	|  |  |     |   movea.l d0,a6
   11940:	|  |  |     |   movea.l 38(sp),a1
   11944:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   11948:	|  |  |     |   move.l 112(sp),d0
   1194c:	|  |  |     |   move.l d0,-(sp)
   1194e:	|  |  |     |   lea 18(sp),a0
   11952:	|  |  |     |   move.l a0,-(sp)
   11954:	|  |  |     |   jsr 1123e <addVarToStack>
   1195a:	|  |  |     |   addq.l #8,sp
   1195c:	|  |  |     |   tst.w d0
   1195e:	|  |  |  /--|-- beq.s 119b0 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   11960:	|  |  |  |  |   movea.l 112(sp),a0
   11964:	|  |  |  |  |   move.l 4(a0),d0
   11968:	|  |  |  |  +-- bne.s 11978 <getSavedGamesStack+0x1ba>
   1196a:	|  |  |  |  |   movea.l 112(sp),a0
   1196e:	|  |  |  |  |   move.l (a0),d0
   11970:	|  |  |  |  |   movea.l 112(sp),a0
   11974:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   11978:	|  |  |  |  \-> move.l 86(sp),54(sp)
   1197e:	|  |  |  |      move.l 70(sp),50(sp)
   11984:	|  |  |  |      move.l 18bc8 <DOSBase>,d0
   1198a:	|  |  |  |      movea.l d0,a6
   1198c:	|  |  |  |      move.l 54(sp),d1
   11990:	|  |  |  |      move.l 50(sp),d2
   11994:	|  |  |  |      jsr -108(a6)
   11998:	|  |  |  |      move.l d0,46(sp)
   1199c:	|  |  |  |      move.l 46(sp),d0
   119a0:	|  |  \--|----- bne.w 118a0 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   119a4:	|  |     |      move.w #1,106(sp)
   119aa:	|  |     |  /-- bra.s 119b2 <getSavedGamesStack+0x1f4>
	}

cleanup:
   119ac:	|  \-----|--|-> nop
   119ae:	|        |  +-- bra.s 119b2 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   119b0:	|        \--|-> nop
	FreeVec(fib);
   119b2:	|           \-> move.l 70(sp),34(sp)
   119b8:	|               move.l 18bc0 <SysBase>,d0
   119be:	|               movea.l d0,a6
   119c0:	|               movea.l 34(sp),a1
   119c4:	|               jsr -690(a6)
	UnLock(dirLock);
   119c8:	|               move.l 86(sp),30(sp)
   119ce:	|               move.l 18bc8 <DOSBase>,d0
   119d4:	|               movea.l d0,a6
   119d6:	|               move.l 30(sp),d1
   119da:	|               jsr -90(a6)
	FreeVec(pattern);
   119de:	|               move.l 102(sp),26(sp)
   119e4:	|               move.l 18bc0 <SysBase>,d0
   119ea:	|               movea.l d0,a6
   119ec:	|               movea.l 26(sp),a1
   119f0:	|               jsr -690(a6)
	return result;
   119f4:	|               move.w 106(sp),d0
}
   119f8:	\-------------> movem.l (sp)+,d2-d3/a6
   119fc:	                lea 96(sp),sp
   11a00:	                rts

00011a02 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   11a02:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   11a04:	       movea.l 20(sp),a0
   11a08:	       move.l (a0),d0
   11a0a:	       cmp.l 16(sp),d0
   11a0e:	/----- beq.s 11a72 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   11a10:	|      move.l 16(sp),d0
   11a14:	|      add.l d0,d0
   11a16:	|      movea.l d0,a1
   11a18:	|      adda.l d0,a1
   11a1a:	|      lea 18ab6 <typeName>,a0
   11a20:	|      move.l (0,a1,a0.l),d0
   11a24:	|      move.l d0,-(sp)
   11a26:	|      pea 161b7 <custom.c.36a9b171+0x15bd>
   11a2c:	|      jsr 10f2e <joinStrings>
   11a32:	|      addq.l #8,sp
   11a34:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   11a38:	|      movea.l 20(sp),a0
   11a3c:	|      move.l (a0),d0
   11a3e:	|      add.l d0,d0
   11a40:	|      movea.l d0,a1
   11a42:	|      adda.l d0,a1
   11a44:	|      lea 18ab6 <typeName>,a0
   11a4a:	|      move.l (0,a1,a0.l),d0
   11a4e:	|      move.l d0,-(sp)
   11a50:	|      pea 161f9 <custom.c.36a9b171+0x15ff>
   11a56:	|      jsr 10f2e <joinStrings>
   11a5c:	|      addq.l #8,sp
   11a5e:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   11a60:	|      move.l (sp),-(sp)
   11a62:	|      move.l 8(sp),-(sp)
   11a66:	|      jsr 13a4a <KPrintF>
   11a6c:	|      addq.l #8,sp

		return FALSE;
   11a6e:	|      clr.w d0
   11a70:	|  /-- bra.s 11a82 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   11a72:	\--|-> movea.l 20(sp),a0
   11a76:	   |   move.l 4(a0),d0
   11a7a:	   |   movea.l 12(sp),a0
   11a7e:	   |   move.l d0,(a0)
	return TRUE;
   11a80:	   |   moveq #1,d0
}
   11a82:	   \-> addq.l #8,sp
   11a84:	       rts

00011a86 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   11a86:	move.l 8(sp),-(sp)
   11a8a:	jsr 4458 <getNumberedString>
   11a90:	addq.l #4,sp
   11a92:	move.l d0,-(sp)
   11a94:	move.l 8(sp),-(sp)
   11a98:	jsr 11c24 <makeTextVar>
   11a9e:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   11aa0:	movea.l 4(sp),a0
   11aa4:	move.l 4(a0),d0
   11aa8:	sne d0
   11aaa:	neg.b d0
   11aac:	move.b d0,d0
   11aae:	andi.w #255,d0
}
   11ab2:	rts

00011ab4 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   11ab4:	          subq.l #8,sp
    int size = stackSize(stacky);
   11ab6:	          move.l 16(sp),-(sp)
   11aba:	          jsr 12362 <stackSize>
   11ac0:	          addq.l #4,sp
   11ac2:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   11ac6:	          move.l 4(sp),-(sp)
   11aca:	          move.l 16(sp),-(sp)
   11ace:	          jsr 11b1e <makeFastArraySize>
   11ad4:	          addq.l #8,sp
   11ad6:	          tst.w d0
   11ad8:	      /-- bne.s 11ade <makeFastArrayFromStack+0x2a>
   11ada:	      |   clr.w d0
   11adc:	/-----|-- bra.s 11b1a <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   11ade:	|     \-> movea.l 16(sp),a0
   11ae2:	|         move.l (a0),(sp)
    size = 0;
   11ae4:	|         clr.l 4(sp)
    while (allV) {
   11ae8:	|     /-- bra.s 11b14 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   11aea:	|  /--|-> movea.l 12(sp),a0
   11aee:	|  |  |   movea.l 4(a0),a0
   11af2:	|  |  |   move.l (a0),d1
   11af4:	|  |  |   move.l 4(sp),d0
   11af8:	|  |  |   lsl.l #3,d0
   11afa:	|  |  |   add.l d0,d1
   11afc:	|  |  |   move.l (sp),d0
   11afe:	|  |  |   move.l d1,-(sp)
   11b00:	|  |  |   move.l d0,-(sp)
   11b02:	|  |  |   jsr 11da0 <copyMain>
   11b08:	|  |  |   addq.l #8,sp
        size++;
   11b0a:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   11b0e:	|  |  |   movea.l (sp),a0
   11b10:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   11b14:	|  |  \-> tst.l (sp)
   11b16:	|  \----- bne.s 11aea <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   11b18:	|         moveq #1,d0
}
   11b1a:	\-------> addq.l #8,sp
   11b1c:	          rts

00011b1e <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   11b1e:	          lea -28(sp),sp
   11b22:	          move.l a6,-(sp)
    if (size < 0) {
   11b24:	          tst.l 40(sp)
   11b28:	      /-- bge.s 11b3e <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   11b2a:	      |   pea 1623e <custom.c.36a9b171+0x1644>
   11b30:	      |   jsr 13a4a <KPrintF>
   11b36:	      |   addq.l #4,sp
		return FALSE;
   11b38:	      |   clr.w d0
   11b3a:	/-----|-- bra.w 11c1c <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   11b3e:	|     \-> move.l 36(sp),-(sp)
   11b42:	|         jsr 11c50 <unlinkVar>
   11b48:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   11b4a:	|         movea.l 36(sp),a0
   11b4e:	|         moveq #10,d0
   11b50:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   11b52:	|         moveq #12,d0
   11b54:	|         move.l d0,24(sp)
   11b58:	|         clr.l 20(sp)
   11b5c:	|         move.l 18bc0 <SysBase>,d0
   11b62:	|         movea.l d0,a6
   11b64:	|         move.l 24(sp),d0
   11b68:	|         move.l 20(sp),d1
   11b6c:	|         jsr -684(a6)
   11b70:	|         move.l d0,16(sp)
   11b74:	|         move.l 16(sp),d0
   11b78:	|         movea.l 36(sp),a0
   11b7c:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   11b80:	|         movea.l 36(sp),a0
   11b84:	|         move.l 4(a0),d0
   11b88:	|     /-- bne.s 11b90 <makeFastArraySize+0x72>
   11b8a:	|     |   clr.w d0
   11b8c:	+-----|-- bra.w 11c1c <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   11b90:	|     \-> move.l 40(sp),d0
   11b94:	|         lsl.l #3,d0
   11b96:	|         move.l d0,12(sp)
   11b9a:	|         clr.l 8(sp)
   11b9e:	|         move.l 18bc0 <SysBase>,d0
   11ba4:	|         movea.l d0,a6
   11ba6:	|         move.l 12(sp),d0
   11baa:	|         move.l 8(sp),d1
   11bae:	|         jsr -684(a6)
   11bb2:	|         move.l d0,4(sp)
   11bb6:	|         move.l 4(sp),d0
   11bba:	|         movea.l 36(sp),a0
   11bbe:	|         movea.l 4(a0),a0
   11bc2:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   11bc4:	|         movea.l 36(sp),a0
   11bc8:	|         movea.l 4(a0),a0
   11bcc:	|         move.l (a0),d0
   11bce:	|     /-- bne.s 11bd4 <makeFastArraySize+0xb6>
   11bd0:	|     |   clr.w d0
   11bd2:	+-----|-- bra.s 11c1c <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   11bd4:	|     \-> clr.l 28(sp)
   11bd8:	|     /-- bra.s 11bf4 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   11bda:	|  /--|-> movea.l 36(sp),a0
   11bde:	|  |  |   movea.l 4(a0),a0
   11be2:	|  |  |   move.l (a0),d1
   11be4:	|  |  |   move.l 28(sp),d0
   11be8:	|  |  |   lsl.l #3,d0
   11bea:	|  |  |   movea.l d1,a0
   11bec:	|  |  |   adda.l d0,a0
   11bee:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   11bf0:	|  |  |   addq.l #1,28(sp)
   11bf4:	|  |  \-> move.l 28(sp),d0
   11bf8:	|  |      cmp.l 40(sp),d0
   11bfc:	|  \----- blt.s 11bda <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   11bfe:	|         movea.l 36(sp),a0
   11c02:	|         movea.l 4(a0),a0
   11c06:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   11c0c:	|         movea.l 36(sp),a0
   11c10:	|         movea.l 4(a0),a0
   11c14:	|         moveq #1,d0
   11c16:	|         move.l d0,8(a0)
    return TRUE;
   11c1a:	|         moveq #1,d0
}
   11c1c:	\-------> movea.l (sp)+,a6
   11c1e:	          lea 28(sp),sp
   11c22:	          rts

00011c24 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   11c24:	move.l 4(sp),-(sp)
   11c28:	jsr 11c50 <unlinkVar>
   11c2e:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   11c30:	movea.l 4(sp),a0
   11c34:	moveq #3,d0
   11c36:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   11c38:	move.l 8(sp),-(sp)
   11c3c:	jsr b8 <copyString>
   11c42:	addq.l #4,sp
   11c44:	movea.l 4(sp),a0
   11c48:	move.l d0,4(a0)
}
   11c4c:	nop
   11c4e:	rts

00011c50 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   11c50:	                      lea -16(sp),sp
   11c54:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   11c56:	                      movea.l 24(sp),a0
   11c5a:	                      move.l (a0),d0
   11c5c:	                      moveq #10,d1
   11c5e:	                      cmp.l d0,d1
   11c60:	            /-------- beq.w 11d18 <unlinkVar+0xc8>
   11c64:	            |         moveq #10,d1
   11c66:	            |         cmp.l d0,d1
   11c68:	/-----------|-------- bcs.w 11d8c <unlinkVar+0x13c>
   11c6c:	|           |         moveq #8,d1
   11c6e:	|           |         cmp.l d0,d1
   11c70:	|  /--------|-------- beq.w 11d78 <unlinkVar+0x128>
   11c74:	|  |        |         moveq #8,d1
   11c76:	|  |        |         cmp.l d0,d1
   11c78:	+--|--------|-------- bcs.w 11d8c <unlinkVar+0x13c>
   11c7c:	|  |        |         moveq #3,d1
   11c7e:	|  |        |         cmp.l d0,d1
   11c80:	|  |        |     /-- beq.s 11c8c <unlinkVar+0x3c>
   11c82:	|  |        |     |   moveq #6,d1
   11c84:	|  |        |     |   cmp.l d0,d1
   11c86:	|  |        |  /--|-- beq.s 11cb2 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   11c88:	+--|--------|--|--|-- bra.w 11d8c <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   11c8c:	|  |        |  |  \-> movea.l 24(sp),a0
   11c90:	|  |        |  |      move.l 4(a0),4(sp)
   11c96:	|  |        |  |      move.l 18bc0 <SysBase>,d0
   11c9c:	|  |        |  |      movea.l d0,a6
   11c9e:	|  |        |  |      movea.l 4(sp),a1
   11ca2:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   11ca6:	|  |        |  |      movea.l 24(sp),a0
   11caa:	|  |        |  |      clr.l 4(a0)
		break;
   11cae:	|  |  /-----|--|----- bra.w 11d96 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   11cb2:	|  |  |     |  \----> movea.l 24(sp),a0
   11cb6:	|  |  |     |         movea.l 4(a0),a0
   11cba:	|  |  |     |         move.l 8(a0),d0
   11cbe:	|  |  |     |         subq.l #1,d0
   11cc0:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   11cc4:	|  |  |     |         movea.l 24(sp),a0
   11cc8:	|  |  |     |         movea.l 4(a0),a0
   11ccc:	|  |  |     |         move.l 8(a0),d0
   11cd0:	|  |  |  /--|-------- bgt.w 11d90 <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   11cd4:	|  |  |  |  |     /-- bra.s 11ce8 <unlinkVar+0x98>
   11cd6:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   11cda:	|  |  |  |  |  |  |   move.l 4(a0),d0
   11cde:	|  |  |  |  |  |  |   move.l d0,-(sp)
   11ce0:	|  |  |  |  |  |  |   jsr 12386 <trimStack>
   11ce6:	|  |  |  |  |  |  |   addq.l #4,sp
   11ce8:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   11cec:	|  |  |  |  |  |      movea.l 4(a0),a0
   11cf0:	|  |  |  |  |  |      move.l (a0),d0
   11cf2:	|  |  |  |  |  \----- bne.s 11cd6 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   11cf4:	|  |  |  |  |         movea.l 24(sp),a0
   11cf8:	|  |  |  |  |         move.l 4(a0),8(sp)
   11cfe:	|  |  |  |  |         move.l 18bc0 <SysBase>,d0
   11d04:	|  |  |  |  |         movea.l d0,a6
   11d06:	|  |  |  |  |         movea.l 8(sp),a1
   11d0a:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   11d0e:	|  |  |  |  |         movea.l 24(sp),a0
   11d12:	|  |  |  |  |         clr.l 4(a0)
		break;
   11d16:	|  |  |  +--|-------- bra.s 11d90 <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   11d18:	|  |  |  |  \-------> movea.l 24(sp),a0
   11d1c:	|  |  |  |            movea.l 4(a0),a0
   11d20:	|  |  |  |            move.l 8(a0),d0
   11d24:	|  |  |  |            subq.l #1,d0
   11d26:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   11d2a:	|  |  |  |            movea.l 24(sp),a0
   11d2e:	|  |  |  |            movea.l 4(a0),a0
   11d32:	|  |  |  |            move.l 8(a0),d0
   11d36:	|  |  |  |        /-- bgt.s 11d94 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   11d38:	|  |  |  |        |   movea.l 24(sp),a0
   11d3c:	|  |  |  |        |   movea.l 4(a0),a0
   11d40:	|  |  |  |        |   move.l (a0),16(sp)
   11d44:	|  |  |  |        |   move.l 18bc0 <SysBase>,d0
   11d4a:	|  |  |  |        |   movea.l d0,a6
   11d4c:	|  |  |  |        |   movea.l 16(sp),a1
   11d50:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   11d54:	|  |  |  |        |   movea.l 24(sp),a0
   11d58:	|  |  |  |        |   move.l 4(a0),12(sp)
   11d5e:	|  |  |  |        |   move.l 18bc0 <SysBase>,d0
   11d64:	|  |  |  |        |   movea.l d0,a6
   11d66:	|  |  |  |        |   movea.l 12(sp),a1
   11d6a:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   11d6e:	|  |  |  |        |   movea.l 24(sp),a0
   11d72:	|  |  |  |        |   clr.l 4(a0)
		break;
   11d76:	|  |  |  |        +-- bra.s 11d94 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   11d78:	|  \--|--|--------|-> movea.l 24(sp),a0
   11d7c:	|     |  |        |   move.l 4(a0),d0
   11d80:	|     |  |        |   move.l d0,-(sp)
   11d82:	|     |  |        |   jsr 6e8e <deleteAnim>
   11d88:	|     |  |        |   addq.l #4,sp
		break;
   11d8a:	|     +--|--------|-- bra.s 11d96 <unlinkVar+0x146>
		break;
   11d8c:	\-----|--|--------|-> nop
   11d8e:	      +--|--------|-- bra.s 11d96 <unlinkVar+0x146>
		break;
   11d90:	      |  \--------|-> nop
   11d92:	      +-----------|-- bra.s 11d96 <unlinkVar+0x146>
		break;
   11d94:	      |           \-> nop
	}
}
   11d96:	      \-------------> nop
   11d98:	                      movea.l (sp)+,a6
   11d9a:	                      lea 16(sp),sp
   11d9e:	                      rts

00011da0 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   11da0:	       movea.l 4(sp),a0
   11da4:	       move.l (a0),d0
   11da6:	       movea.l 8(sp),a0
   11daa:	       move.l d0,(a0)
	switch (to->varType) {
   11dac:	       movea.l 8(sp),a0
   11db0:	       move.l (a0),d0
   11db2:	       moveq #10,d1
   11db4:	       cmp.l d0,d1
   11db6:	/----- bcs.w 11ea8 <copyMain+0x108>
   11dba:	|      add.l d0,d0
   11dbc:	|      movea.l d0,a0
   11dbe:	|      adda.l #73162,a0
   11dc4:	|      move.w (a0),d0
   11dc6:	|      jmp (11dca <copyMain+0x2a>,pc,d0.w)
   11dca:	|      .short 0x00da
   11dcc:	|      ori.b #22,(a6)
   11dd0:	|      ori.w #22,(a4)
   11dd4:	|      ori.b #-126,(a6)
   11dd8:	|      ori.b #-68,(a6)
   11ddc:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   11de4:	|      move.l 4(a0),d0
   11de8:	|      movea.l 8(sp),a0
   11dec:	|      move.l d0,4(a0)
		return TRUE;
   11df0:	|      moveq #1,d0
   11df2:	|  /-- bra.w 11eba <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   11df6:	|  |   movea.l 4(sp),a0
   11dfa:	|  |   move.l 4(a0),d0
   11dfe:	|  |   movea.l 8(sp),a0
   11e02:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   11e06:	|  |   movea.l 8(sp),a0
   11e0a:	|  |   movea.l 4(a0),a0
   11e0e:	|  |   move.l 8(a0),d0
   11e12:	|  |   addq.l #1,d0
   11e14:	|  |   move.l d0,8(a0)
		return TRUE;
   11e18:	|  |   moveq #1,d0
   11e1a:	|  +-- bra.w 11eba <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   11e1e:	|  |   movea.l 4(sp),a0
   11e22:	|  |   move.l 4(a0),d0
   11e26:	|  |   move.l d0,-(sp)
   11e28:	|  |   jsr b8 <copyString>
   11e2e:	|  |   addq.l #4,sp
   11e30:	|  |   movea.l 8(sp),a0
   11e34:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   11e38:	|  |   movea.l 8(sp),a0
   11e3c:	|  |   move.l 4(a0),d0
   11e40:	|  |   sne d0
   11e42:	|  |   neg.b d0
   11e44:	|  |   move.b d0,d0
   11e46:	|  |   andi.w #255,d0
   11e4a:	|  +-- bra.s 11eba <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   11e4c:	|  |   movea.l 4(sp),a0
   11e50:	|  |   move.l 4(a0),d0
   11e54:	|  |   movea.l 8(sp),a0
   11e58:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   11e5c:	|  |   movea.l 8(sp),a0
   11e60:	|  |   movea.l 4(a0),a0
   11e64:	|  |   move.l 8(a0),d0
   11e68:	|  |   addq.l #1,d0
   11e6a:	|  |   move.l d0,8(a0)
		return TRUE;
   11e6e:	|  |   moveq #1,d0
   11e70:	|  +-- bra.s 11eba <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   11e72:	|  |   movea.l 4(sp),a0
   11e76:	|  |   move.l 4(a0),d0
   11e7a:	|  |   movea.l 8(sp),a0
   11e7e:	|  |   move.l d0,4(a0)
		return TRUE;
   11e82:	|  |   moveq #1,d0
   11e84:	|  +-- bra.s 11eba <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   11e86:	|  |   movea.l 4(sp),a0
   11e8a:	|  |   move.l 4(a0),d0
   11e8e:	|  |   move.l d0,-(sp)
   11e90:	|  |   jsr 6ad2 <copyAnim>
   11e96:	|  |   addq.l #4,sp
   11e98:	|  |   movea.l 8(sp),a0
   11e9c:	|  |   move.l d0,4(a0)
		return TRUE;
   11ea0:	|  |   moveq #1,d0
   11ea2:	|  +-- bra.s 11eba <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   11ea4:	|  |   moveq #1,d0
   11ea6:	|  +-- bra.s 11eba <copyMain+0x11a>

		default:
		break;
   11ea8:	\--|-> nop
	}
	KPrintF("Unknown value type");
   11eaa:	   |   pea 1628f <custom.c.36a9b171+0x1695>
   11eb0:	   |   jsr 13a4a <KPrintF>
   11eb6:	   |   addq.l #4,sp
	return FALSE;
   11eb8:	   |   clr.w d0
}
   11eba:	   \-> rts

00011ebc <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   11ebc:	move.l 8(sp),-(sp)
   11ec0:	jsr 11c50 <unlinkVar>
   11ec6:	addq.l #4,sp
	return copyMain(from, to);
   11ec8:	move.l 8(sp),-(sp)
   11ecc:	move.l 8(sp),-(sp)
   11ed0:	jsr 11da0 <copyMain>
   11ed6:	addq.l #8,sp
}
   11ed8:	rts

00011eda <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   11eda:	       movea.l 4(sp),a0
   11ede:	       move.l (a0),d0
   11ee0:	       moveq #8,d1
   11ee2:	       cmp.l d0,d1
   11ee4:	   /-- bne.s 11efa <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   11ee6:	   |   movea.l 4(sp),a0
   11eea:	   |   move.l 4(a0),d0
   11eee:	   |   move.l d0,-(sp)
   11ef0:	   |   jsr 6ad2 <copyAnim>
   11ef6:	   |   addq.l #4,sp
   11ef8:	/--|-- bra.s 11f40 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   11efa:	|  \-> movea.l 4(sp),a0
   11efe:	|      move.l (a0),d0
   11f00:	|      moveq #1,d1
   11f02:	|      cmp.l d0,d1
   11f04:	|  /-- bne.s 11f18 <getAnimationFromVar+0x3e>
   11f06:	|  |   movea.l 4(sp),a0
   11f0a:	|  |   move.l 4(a0),d0
   11f0e:	|  +-- bne.s 11f18 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   11f10:	|  |   jsr 81ce <makeNullAnim>
   11f16:	+--|-- bra.s 11f40 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   11f18:	|  \-> movea.l 4(sp),a0
   11f1c:	|      move.l (a0),d0
   11f1e:	|      add.l d0,d0
   11f20:	|      movea.l d0,a1
   11f22:	|      adda.l d0,a1
   11f24:	|      lea 18ab6 <typeName>,a0
   11f2a:	|      move.l (0,a1,a0.l),d0
   11f2e:	|      move.l d0,-(sp)
   11f30:	|      pea 1617b <custom.c.36a9b171+0x1581>
   11f36:	|      jsr 13a4a <KPrintF>
   11f3c:	|      addq.l #8,sp
	return NULL;
   11f3e:	|      moveq #0,d0
}
   11f40:	\----> rts

00011f42 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   11f42:	       movea.l 4(sp),a0
   11f46:	       move.l (a0),d0
   11f48:	       moveq #10,d1
   11f4a:	       cmp.l d0,d1
   11f4c:	/----- bcs.w 11fd2 <getBoolean+0x90>
   11f50:	|      add.l d0,d0
   11f52:	|      movea.l d0,a0
   11f54:	|      adda.l #73568,a0
   11f5a:	|      move.w (a0),d0
   11f5c:	|      jmp (11f60 <getBoolean+0x1e>,pc,d0.w)
   11f60:	|      ori.b #26,(a6)
   11f64:	|      ori.w #68,(114,a2,d0.w)
   11f6a:	|      ori.w #46,(114,a2,d0.w)
   11f70:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   11f76:	|      clr.w d0
   11f78:	|  /-- bra.s 11fd6 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   11f7a:	|  |   movea.l 4(sp),a0
   11f7e:	|  |   move.l 4(a0),d0
   11f82:	|  |   sne d0
   11f84:	|  |   neg.b d0
   11f86:	|  |   move.b d0,d0
   11f88:	|  |   andi.w #255,d0
   11f8c:	|  +-- bra.s 11fd6 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   11f8e:	|  |   movea.l 4(sp),a0
   11f92:	|  |   movea.l 4(a0),a0
   11f96:	|  |   move.l (a0),d0
   11f98:	|  |   sne d0
   11f9a:	|  |   neg.b d0
   11f9c:	|  |   move.b d0,d0
   11f9e:	|  |   andi.w #255,d0
   11fa2:	|  +-- bra.s 11fd6 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   11fa4:	|  |   movea.l 4(sp),a0
   11fa8:	|  |   movea.l 4(a0),a0
   11fac:	|  |   move.b (a0),d0
   11fae:	|  |   sne d0
   11fb0:	|  |   neg.b d0
   11fb2:	|  |   move.b d0,d0
   11fb4:	|  |   andi.w #255,d0
   11fb8:	|  +-- bra.s 11fd6 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   11fba:	|  |   movea.l 4(sp),a0
   11fbe:	|  |   movea.l 4(a0),a0
   11fc2:	|  |   move.l 4(a0),d0
   11fc6:	|  |   sne d0
   11fc8:	|  |   neg.b d0
   11fca:	|  |   move.b d0,d0
   11fcc:	|  |   andi.w #255,d0
   11fd0:	|  +-- bra.s 11fd6 <getBoolean+0x94>

		default:
		break;
   11fd2:	\--|-> nop
	}
	return TRUE;
   11fd4:	   |   moveq #1,d0
}
   11fd6:	   \-> rts

00011fd8 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   11fd8:	      /----------> lea -76(sp),sp
   11fdc:	      |            move.l a6,-(sp)
	switch (from->varType) {
   11fde:	      |            movea.l 84(sp),a0
   11fe2:	      |            move.l (a0),d0
   11fe4:	      |            moveq #10,d1
   11fe6:	      |            cmp.l d0,d1
   11fe8:	/-----|----------- bcs.w 12286 <getTextFromAnyVar+0x2ae>
   11fec:	|     |            add.l d0,d0
   11fee:	|     |            movea.l d0,a0
   11ff0:	|     |            adda.l #73724,a0
   11ff6:	|     |            move.w (a0),d0
   11ff8:	|     |            jmp (11ffc <getTextFromAnyVar+0x24>,pc,d0.w)
   11ffc:	|     |            .short 0x028a
   11ffe:	|     |            bset d0,(a0)+
   12000:	|     |            .short 0x028a
   12002:	|     |            ori.b #-118,(a6)
   12006:	|     |            andi.b #8,ccr
   1200a:	|     |            andi.w #650,-(a0)
   1200e:	|     |            .short 0x028a
   12010:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   12016:	|     |            move.l 4(a0),d0
   1201a:	|     |            move.l d0,-(sp)
   1201c:	|     |            jsr b8 <copyString>
   12022:	|     |            addq.l #4,sp
   12024:	|  /--|----------- bra.w 122a8 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   12028:	|  |  |            pea 162a2 <custom.c.36a9b171+0x16a8>
   1202e:	|  |  |            jsr b8 <copyString>
   12034:	|  |  |            addq.l #4,sp
   12036:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   1203a:	|  |  |            clr.l 72(sp)
   1203e:	|  |  |     /----- bra.w 120e8 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   12042:	|  |  |  /--|----> pea 162a8 <custom.c.36a9b171+0x16ae>
   12048:	|  |  |  |  |      move.l 80(sp),-(sp)
   1204c:	|  |  |  |  |      jsr 10f2e <joinStrings>
   12052:	|  |  |  |  |      addq.l #8,sp
   12054:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   12058:	|  |  |  |  |  /-- bne.s 12060 <getTextFromAnyVar+0x88>
   1205a:	|  |  |  |  |  |   moveq #0,d0
   1205c:	|  +--|--|--|--|-- bra.w 122a8 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   12060:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   12066:	|  |  |  |  |      move.l 18bc0 <SysBase>,d0
   1206c:	|  |  |  |  |      movea.l d0,a6
   1206e:	|  |  |  |  |      movea.l 56(sp),a1
   12072:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   12076:	|  |  |  |  |      movea.l 84(sp),a0
   1207a:	|  |  |  |  |      movea.l 4(a0),a0
   1207e:	|  |  |  |  |      move.l (a0),d1
   12080:	|  |  |  |  |      move.l 72(sp),d0
   12084:	|  |  |  |  |      lsl.l #3,d0
   12086:	|  |  |  |  |      add.l d1,d0
   12088:	|  |  |  |  |      move.l d0,-(sp)
   1208a:	|  |  +--|--|----- jsr 11fd8 <getTextFromAnyVar>(pc)
   1208e:	|  |  |  |  |      addq.l #4,sp
   12090:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   12094:	|  |  |  |  |      move.l 52(sp),-(sp)
   12098:	|  |  |  |  |      move.l 64(sp),-(sp)
   1209c:	|  |  |  |  |      jsr 10f2e <joinStrings>
   120a2:	|  |  |  |  |      addq.l #8,sp
   120a4:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   120a8:	|  |  |  |  |  /-- bne.s 120b0 <getTextFromAnyVar+0xd8>
   120aa:	|  |  |  |  |  |   moveq #0,d0
   120ac:	|  +--|--|--|--|-- bra.w 122a8 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   120b0:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   120b6:	|  |  |  |  |      move.l 18bc0 <SysBase>,d0
   120bc:	|  |  |  |  |      movea.l d0,a6
   120be:	|  |  |  |  |      movea.l 48(sp),a1
   120c2:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   120c6:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   120ca:	|  |  |  |  |      move.l 60(sp),44(sp)
   120d0:	|  |  |  |  |      move.l 18bc0 <SysBase>,d0
   120d6:	|  |  |  |  |      movea.l d0,a6
   120d8:	|  |  |  |  |      movea.l 44(sp),a1
   120dc:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   120e0:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   120e4:	|  |  |  |  |      addq.l #1,72(sp)
   120e8:	|  |  |  |  \----> movea.l 84(sp),a0
   120ec:	|  |  |  |         movea.l 4(a0),a0
   120f0:	|  |  |  |         move.l 4(a0),d0
   120f4:	|  |  |  |         cmp.l 72(sp),d0
   120f8:	|  |  |  \-------- bgt.w 12042 <getTextFromAnyVar+0x6a>
			}
			return builder;
   120fc:	|  |  |            move.l 76(sp),d0
   12100:	|  +--|----------- bra.w 122a8 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   12104:	|  |  |            pea 162aa <custom.c.36a9b171+0x16b0>
   1210a:	|  |  |            jsr b8 <copyString>
   12110:	|  |  |            addq.l #4,sp
   12112:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   12116:	|  |  |            movea.l 84(sp),a0
   1211a:	|  |  |            movea.l 4(a0),a0
   1211e:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   12122:	|  |  |     /----- bra.w 121c4 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   12126:	|  |  |  /--|----> pea 162a8 <custom.c.36a9b171+0x16ae>
   1212c:	|  |  |  |  |      move.l 72(sp),-(sp)
   12130:	|  |  |  |  |      jsr 10f2e <joinStrings>
   12136:	|  |  |  |  |      addq.l #8,sp
   12138:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   1213c:	|  |  |  |  |  /-- bne.s 12144 <getTextFromAnyVar+0x16c>
   1213e:	|  |  |  |  |  |   moveq #0,d0
   12140:	|  +--|--|--|--|-- bra.w 122a8 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   12144:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   1214a:	|  |  |  |  |      move.l 18bc0 <SysBase>,d0
   12150:	|  |  |  |  |      movea.l d0,a6
   12152:	|  |  |  |  |      movea.l 32(sp),a1
   12156:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   1215a:	|  |  |  |  |      move.l 64(sp),d0
   1215e:	|  |  |  |  |      move.l d0,-(sp)
   12160:	|  |  \--|--|----- jsr 11fd8 <getTextFromAnyVar>(pc)
   12164:	|  |     |  |      addq.l #4,sp
   12166:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   1216a:	|  |     |  |      move.l 28(sp),-(sp)
   1216e:	|  |     |  |      move.l 40(sp),-(sp)
   12172:	|  |     |  |      jsr 10f2e <joinStrings>
   12178:	|  |     |  |      addq.l #8,sp
   1217a:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   1217e:	|  |     |  |  /-- bne.s 12186 <getTextFromAnyVar+0x1ae>
   12180:	|  |     |  |  |   moveq #0,d0
   12182:	|  +-----|--|--|-- bra.w 122a8 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   12186:	|  |     |  |  \-> move.l 28(sp),24(sp)
   1218c:	|  |     |  |      move.l 18bc0 <SysBase>,d0
   12192:	|  |     |  |      movea.l d0,a6
   12194:	|  |     |  |      movea.l 24(sp),a1
   12198:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   1219c:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   121a0:	|  |     |  |      move.l 36(sp),20(sp)
   121a6:	|  |     |  |      move.l 18bc0 <SysBase>,d0
   121ac:	|  |     |  |      movea.l d0,a6
   121ae:	|  |     |  |      movea.l 20(sp),a1
   121b2:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   121b6:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   121ba:	|  |     |  |      movea.l 64(sp),a0
   121be:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   121c4:	|  |     |  \----> tst.l 64(sp)
   121c8:	|  |     \-------- bne.w 12126 <getTextFromAnyVar+0x14e>
			}
			return builder;
   121cc:	|  |               move.l 68(sp),d0
   121d0:	|  +-------------- bra.w 122a8 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   121d4:	|  |               moveq #10,d0
   121d6:	|  |               move.l d0,16(sp)
   121da:	|  |               clr.l 12(sp)
   121de:	|  |               move.l 18bc0 <SysBase>,d0
   121e4:	|  |               movea.l d0,a6
   121e6:	|  |               move.l 16(sp),d0
   121ea:	|  |               move.l 12(sp),d1
   121ee:	|  |               jsr -684(a6)
   121f2:	|  |               move.l d0,8(sp)
   121f6:	|  |               move.l 8(sp),d0
   121fa:	|  |               move.l d0,4(sp)
			if (! buff) {
   121fe:	|  |           /-- bne.s 12214 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   12200:	|  |           |   pea 162b1 <custom.c.36a9b171+0x16b7>
   12206:	|  |           |   jsr 13a4a <KPrintF>
   1220c:	|  |           |   addq.l #4,sp
				return NULL;
   1220e:	|  |           |   moveq #0,d0
   12210:	|  +-----------|-- bra.w 122a8 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   12214:	|  |           \-> movea.l 84(sp),a0
   12218:	|  |               move.l 4(a0),d0
   1221c:	|  |               move.l d0,-(sp)
   1221e:	|  |               pea 162db <custom.c.36a9b171+0x16e1>
   12224:	|  |               move.l 12(sp),-(sp)
   12228:	|  |               jsr 1120c <sprintf>
   1222e:	|  |               lea 12(sp),sp
			return buff;
   12232:	|  |               move.l 4(sp),d0
   12236:	|  +-------------- bra.s 122a8 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   12238:	|  |               movea.l 84(sp),a0
   1223c:	|  |               move.l 4(a0),d0
   12240:	|  |               move.l d0,-(sp)
   12242:	|  |               jsr 1bb0 <resourceNameFromNum>
   12248:	|  |               addq.l #4,sp
   1224a:	|  |               move.l d0,-(sp)
   1224c:	|  |               pea 14c4c <custom.c.36a9b171+0x52>
   12252:	|  |               jsr 10f2e <joinStrings>
   12258:	|  |               addq.l #8,sp
   1225a:	|  +-------------- bra.s 122a8 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   1225c:	|  |               movea.l 84(sp),a0
   12260:	|  |               move.l 4(a0),d0
   12264:	|  |               move.l d0,-(sp)
   12266:	|  |               jsr a838 <findObjectType>
   1226c:	|  |               addq.l #4,sp
   1226e:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   12272:	+--|-------------- beq.s 12286 <getTextFromAnyVar+0x2ae>
   12274:	|  |               movea.l 40(sp),a0
   12278:	|  |               move.l (a0),d0
   1227a:	|  |               move.l d0,-(sp)
   1227c:	|  |               jsr b8 <copyString>
   12282:	|  |               addq.l #4,sp
   12284:	|  +-------------- bra.s 122a8 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   12286:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   12288:	   |               movea.l 84(sp),a0
   1228c:	   |               move.l (a0),d0
   1228e:	   |               add.l d0,d0
   12290:	   |               movea.l d0,a1
   12292:	   |               adda.l d0,a1
   12294:	   |               lea 18ab6 <typeName>,a0
   1229a:	   |               move.l (0,a1,a0.l),d0
   1229e:	   |               move.l d0,-(sp)
   122a0:	   |               jsr b8 <copyString>
   122a6:	   |               addq.l #4,sp
}
   122a8:	   \-------------> movea.l (sp)+,a6
   122aa:	                   lea 76(sp),sp
   122ae:	                   rts

000122b0 <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   122b0:	move.l 4(sp),-(sp)
   122b4:	jsr 11c50 <unlinkVar>
   122ba:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   122bc:	movea.l 4(sp),a0
   122c0:	moveq #8,d0
   122c2:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   122c4:	movea.l 4(sp),a0
   122c8:	move.l 8(sp),4(a0)
}
   122ce:	nop
   122d0:	rts

000122d2 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   122d2:	move.l 4(sp),-(sp)
   122d6:	jsr 11c50 <unlinkVar>
   122dc:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   122de:	movea.l 4(sp),a0
   122e2:	moveq #9,d0
   122e4:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   122e6:	movea.l 4(sp),a0
   122ea:	move.l 8(sp),4(a0)
}
   122f0:	nop
   122f2:	rts

000122f4 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   122f4:	move.l 4(sp),-(sp)
   122f8:	jsr 11c50 <unlinkVar>
   122fe:	addq.l #4,sp
	thisVar->varType = vT;
   12300:	movea.l 4(sp),a0
   12304:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   12308:	movea.l 4(sp),a0
   1230c:	move.l 12(sp),4(a0)
}
   12312:	nop
   12314:	rts

00012316 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   12316:	      /-- bra.s 12328 <stackGetByIndex+0x12>
        vS = vS->next;
   12318:	/-----|-> movea.l 4(sp),a0
   1231c:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   12322:	|     +-- bne.s 12328 <stackGetByIndex+0x12>
            return NULL;
   12324:	|     |   moveq #0,d0
   12326:	|  /--|-- bra.s 1233c <stackGetByIndex+0x26>
    while (theIndex--) {
   12328:	|  |  \-> move.l 8(sp),d0
   1232c:	|  |      move.l d0,d1
   1232e:	|  |      subq.l #1,d1
   12330:	|  |      move.l d1,8(sp)
   12334:	|  |      tst.l d0
   12336:	\--|----- bne.s 12318 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   12338:	   |      move.l 4(sp),d0
}
   1233c:	   \----> rts

0001233e <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   1233e:	          tst.l 4(sp)
   12342:	      /-- bne.s 12352 <stackFindLast+0x14>
		return NULL;
   12344:	      |   moveq #0,d0
   12346:	/-----|-- bra.s 12360 <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   12348:	|  /--|-> movea.l 4(sp),a0
   1234c:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   12352:	|  |  \-> movea.l 4(sp),a0
   12356:	|  |      move.l 8(a0),d0
   1235a:	|  \----- bne.s 12348 <stackFindLast+0xa>

	return hunt;
   1235c:	|         move.l 4(sp),d0
}
   12360:	\-------> rts

00012362 <stackSize>:

int stackSize (const struct stackHandler * me) {
   12362:	       subq.l #8,sp
	int r = 0;
   12364:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   12368:	       movea.l 12(sp),a0
   1236c:	       move.l (a0),(sp)
	while (a) {
   1236e:	   /-- bra.s 1237a <stackSize+0x18>
		r ++;
   12370:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   12374:	|  |   movea.l (sp),a0
   12376:	|  |   move.l 8(a0),(sp)
	while (a) {
   1237a:	|  \-> tst.l (sp)
   1237c:	\----- bne.s 12370 <stackSize+0xe>
	}
	return r;
   1237e:	       move.l 4(sp),d0
}
   12382:	       addq.l #8,sp
   12384:	       rts

00012386 <trimStack>:

void trimStack (struct variableStack ** stack) {
   12386:	subq.l #8,sp
   12388:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   1238a:	movea.l 16(sp),a0
   1238e:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   12392:	movea.l 16(sp),a0
   12396:	movea.l (a0),a0
   12398:	move.l 8(a0),d0
   1239c:	movea.l 16(sp),a0
   123a0:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   123a2:	move.l 8(sp),d0
   123a6:	move.l d0,-(sp)
   123a8:	jsr 11c50 <unlinkVar>
   123ae:	addq.l #4,sp
	FreeVec(killMe);
   123b0:	move.l 8(sp),4(sp)
   123b6:	move.l 18bc0 <SysBase>,d0
   123bc:	movea.l d0,a6
   123be:	movea.l 4(sp),a1
   123c2:	jsr -690(a6)
   123c6:	nop
   123c8:	movea.l (sp)+,a6
   123ca:	addq.l #8,sp
   123cc:	rts

000123ce <isInFont>:

ULONG * fontTable = NULL;
unsigned int fontTableSize = 0;

BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   123ce:	pea 162de <custom.c.36a9b171+0x16e4>
   123d4:	jsr 13a4a <KPrintF>
   123da:	addq.l #4,sp
	return FALSE;
   123dc:	clr.w d0
}
   123de:	rts

000123e0 <stringWidth>:

int stringWidth (char * theText) {
   123e0:	       subq.l #8,sp
	int a = 0;
   123e2:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   123e6:	       clr.l (sp)

	if (! fontTableSize) return 0;
   123e8:	       move.l 18d14 <fontTableSize>,d0
   123ee:	/----- bne.s 123f4 <stringWidth+0x14>
   123f0:	|      moveq #0,d0
   123f2:	|  /-- bra.s 123f6 <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   123f4:	\--|-> move.l (sp),d0
}
   123f6:	   \-> addq.l #8,sp
   123f8:	       rts

000123fa <loadFont>:

	FreeVec(fontOrderString);
	fontOrderString = copyString(charOrder);*/

	//forgetSpriteBank(theFont);
	KPrintF("loadFont: Not implemented on Amiga");	
   123fa:	pea 16305 <custom.c.36a9b171+0x170b>
   12400:	jsr 13a4a <KPrintF>
   12406:	addq.l #4,sp
		return FALSE;
	}*/

	//numFontColours = theFont.myPalette.total;*/
	//fontHeight = h;
	return TRUE;
   12408:	moveq #1,d0
}
   1240a:	rts

0001240c <addScreenRegion>:
#include "region.h"

struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;

BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   1240c:	       lea -16(sp),sp
   12410:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   12412:	       moveq #36,d0
   12414:	       move.l d0,16(sp)
   12418:	       clr.l 12(sp)
   1241c:	       move.l 18bc0 <SysBase>,d0
   12422:	       movea.l d0,a6
   12424:	       move.l 16(sp),d0
   12428:	       move.l 12(sp),d1
   1242c:	       jsr -684(a6)
   12430:	       move.l d0,8(sp)
   12434:	       move.l 8(sp),d0
   12438:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   1243c:	   /-- bne.s 12444 <addScreenRegion+0x38>
   1243e:	   |   clr.w d0
   12440:	/--|-- bra.w 124c4 <addScreenRegion+0xb8>
    newRegion->di = di;
   12444:	|  \-> movea.l 4(sp),a0
   12448:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   1244e:	|      movea.l 4(sp),a0
   12452:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   12456:	|      movea.l 4(sp),a0
   1245a:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   12460:	|      movea.l 4(sp),a0
   12464:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   1246a:	|      movea.l 4(sp),a0
   1246e:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   12474:	|      movea.l 4(sp),a0
   12478:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   1247e:	|      movea.l 4(sp),a0
   12482:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   12488:	|      move.l 52(sp),-(sp)
   1248c:	|      jsr a928 <loadObjectType>
   12492:	|      addq.l #4,sp
   12494:	|      movea.l 4(sp),a0
   12498:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   1249c:	|      move.l 18d18 <allScreenRegions>,d0
   124a2:	|      movea.l 4(sp),a0
   124a6:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   124aa:	|      move.l 4(sp),18d18 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   124b2:	|      movea.l 4(sp),a0
   124b6:	|      move.l 28(a0),d0
   124ba:	|      sne d0
   124bc:	|      neg.b d0
   124be:	|      move.b d0,d0
   124c0:	|      andi.w #255,d0
}
   124c4:	\----> movea.l (sp)+,a6
   124c6:	       lea 16(sp),sp
   124ca:	       rts

000124cc <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   124cc:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   124ce:	             move.l 18d18 <allScreenRegions>,(sp)

	while (thisRegion) {
   124d4:	   /-------- bra.s 124f0 <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   124d6:	/--|-------> movea.l (sp),a0
   124d8:	|  |         movea.l 28(a0),a0
   124dc:	|  |         move.l 4(a0),d0
   124e0:	|  |         cmp.l 8(sp),d0
   124e4:	|  |     /-- bne.s 124ea <getRegionForObject+0x1e>
			return thisRegion;
   124e6:	|  |     |   move.l (sp),d0
   124e8:	|  |  /--|-- bra.s 124f6 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   124ea:	|  |  |  \-> movea.l (sp),a0
   124ec:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   124f0:	|  \--|----> tst.l (sp)
   124f2:	\-----|----- bne.s 124d6 <getRegionForObject+0xa>
	}

	return NULL;
   124f4:	      |      moveq #0,d0
}
   124f6:	      \----> addq.l #4,sp
   124f8:	             rts

000124fa <killAllRegions>:

void killAllRegions () {
   124fa:	       subq.l #8,sp
   124fc:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   124fe:	   /-- bra.s 12540 <killAllRegions+0x46>
		killRegion = allScreenRegions;
   12500:	/--|-> move.l 18d18 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   12508:	|  |   movea.l 18d18 <allScreenRegions>,a0
   1250e:	|  |   move.l 32(a0),d0
   12512:	|  |   move.l d0,18d18 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   12518:	|  |   movea.l 8(sp),a0
   1251c:	|  |   move.l 28(a0),d0
   12520:	|  |   move.l d0,-(sp)
   12522:	|  |   jsr abe0 <removeObjectType>
   12528:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   1252a:	|  |   move.l 8(sp),4(sp)
   12530:	|  |   move.l 18bc0 <SysBase>,d0
   12536:	|  |   movea.l d0,a6
   12538:	|  |   movea.l 4(sp),a1
   1253c:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   12540:	|  \-> move.l 18d18 <allScreenRegions>,d0
   12546:	\----- bne.s 12500 <killAllRegions+0x6>
	}
	overRegion = NULL;
   12548:	       clr.l 18d1c <overRegion>
}
   1254e:	       nop
   12550:	       movea.l (sp)+,a6
   12552:	       addq.l #8,sp
   12554:	       rts

00012556 <loadRegions>:

void loadRegions (BPTR fp) {
   12556:	       lea -24(sp),sp
   1255a:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   1255c:	       move.l 32(sp),-(sp)
   12560:	       jsr 6bc <get2bytes>
   12566:	       addq.l #4,sp
   12568:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   1256c:	       move.l #101656,20(sp)

	while (numRegions --) {
   12574:	   /-- bra.w 12652 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   12578:	/--|-> moveq #36,d0
   1257a:	|  |   move.l d0,16(sp)
   1257e:	|  |   clr.l 12(sp)
   12582:	|  |   move.l 18bc0 <SysBase>,d0
   12588:	|  |   movea.l d0,a6
   1258a:	|  |   move.l 16(sp),d0
   1258e:	|  |   move.l 12(sp),d1
   12592:	|  |   jsr -684(a6)
   12596:	|  |   move.l d0,8(sp)
   1259a:	|  |   move.l 8(sp),d0
   1259e:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   125a2:	|  |   movea.l 20(sp),a0
   125a6:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   125aa:	|  |   moveq #32,d1
   125ac:	|  |   add.l 4(sp),d1
   125b0:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   125b4:	|  |   move.l 32(sp),-(sp)
   125b8:	|  |   jsr 6bc <get2bytes>
   125be:	|  |   addq.l #4,sp
   125c0:	|  |   movea.l 4(sp),a0
   125c4:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   125c6:	|  |   move.l 32(sp),-(sp)
   125ca:	|  |   jsr 6bc <get2bytes>
   125d0:	|  |   addq.l #4,sp
   125d2:	|  |   movea.l 4(sp),a0
   125d6:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   125da:	|  |   move.l 32(sp),-(sp)
   125de:	|  |   jsr 6bc <get2bytes>
   125e4:	|  |   addq.l #4,sp
   125e6:	|  |   movea.l 4(sp),a0
   125ea:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   125ee:	|  |   move.l 32(sp),-(sp)
   125f2:	|  |   jsr 6bc <get2bytes>
   125f8:	|  |   addq.l #4,sp
   125fa:	|  |   movea.l 4(sp),a0
   125fe:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   12602:	|  |   move.l 32(sp),-(sp)
   12606:	|  |   jsr 6bc <get2bytes>
   1260c:	|  |   addq.l #4,sp
   1260e:	|  |   movea.l 4(sp),a0
   12612:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   12616:	|  |   move.l 32(sp),-(sp)
   1261a:	|  |   jsr 6bc <get2bytes>
   12620:	|  |   addq.l #4,sp
   12622:	|  |   movea.l 4(sp),a0
   12626:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   1262a:	|  |   move.l 32(sp),-(sp)
   1262e:	|  |   jsr 6bc <get2bytes>
   12634:	|  |   addq.l #4,sp
   12636:	|  |   movea.l 4(sp),a0
   1263a:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   1263e:	|  |   move.l 32(sp),-(sp)
   12642:	|  |   jsr a8d6 <loadObjectRef>
   12648:	|  |   addq.l #4,sp
   1264a:	|  |   movea.l 4(sp),a0
   1264e:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   12652:	|  \-> move.l 24(sp),d0
   12656:	|      move.l d0,d1
   12658:	|      subq.l #1,d1
   1265a:	|      move.l d1,24(sp)
   1265e:	|      tst.l d0
   12660:	\----- bne.w 12578 <loadRegions+0x22>
	}
	* pointy = NULL;
   12664:	       movea.l 20(sp),a0
   12668:	       clr.l (a0)
}
   1266a:	       nop
   1266c:	       movea.l (sp)+,a6
   1266e:	       lea 24(sp),sp
   12672:	       rts

00012674 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   12674:	             lea -12(sp),sp
   12678:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   1267a:	             move.l #101656,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   12682:	   /-------- bra.s 126fc <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   12684:	/--|-------> movea.l 12(sp),a0
   12688:	|  |         movea.l (a0),a0
   1268a:	|  |         movea.l 28(a0),a0
   1268e:	|  |         move.l 4(a0),d0
   12692:	|  |         cmp.l 20(sp),d0
   12696:	|  |  /----- bne.s 126ee <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   12698:	|  |  |      movea.l 12(sp),a0
   1269c:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   126a0:	|  |  |      movea.l 8(sp),a0
   126a4:	|  |  |      move.l 32(a0),d0
   126a8:	|  |  |      movea.l 12(sp),a0
   126ac:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   126ae:	|  |  |      movea.l 8(sp),a0
   126b2:	|  |  |      move.l 28(a0),d0
   126b6:	|  |  |      move.l d0,-(sp)
   126b8:	|  |  |      jsr abe0 <removeObjectType>
   126be:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   126c0:	|  |  |      move.l 18d1c <overRegion>,d0
   126c6:	|  |  |      cmp.l 8(sp),d0
   126ca:	|  |  |  /-- bne.s 126d2 <removeScreenRegion+0x5e>
   126cc:	|  |  |  |   clr.l 18d1c <overRegion>
            FreeVec(killMe);
   126d2:	|  |  |  \-> move.l 8(sp),4(sp)
   126d8:	|  |  |      move.l 18bc0 <SysBase>,d0
   126de:	|  |  |      movea.l d0,a6
   126e0:	|  |  |      movea.l 4(sp),a1
   126e4:	|  |  |      jsr -690(a6)
            killMe = NULL;
   126e8:	|  |  |      clr.l 8(sp)
   126ec:	|  +--|----- bra.s 126fc <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   126ee:	|  |  \----> movea.l 12(sp),a0
   126f2:	|  |         move.l (a0),d0
   126f4:	|  |         moveq #32,d1
   126f6:	|  |         add.l d0,d1
   126f8:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   126fc:	|  \-------> movea.l 12(sp),a0
   12700:	|            move.l (a0),d0
   12702:	\----------- bne.s 12684 <removeScreenRegion+0x10>
        }
    }
}
   12704:	             nop
   12706:	             nop
   12708:	             movea.l (sp)+,a6
   1270a:	             lea 12(sp),sp
   1270e:	             rts

00012710 <saveRegions>:

void saveRegions (BPTR fp) {
   12710:	       subq.l #8,sp
	int numRegions = 0;
   12712:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   12716:	       move.l 18d18 <allScreenRegions>,(sp)
	while (thisRegion) {
   1271c:	   /-- bra.s 12728 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   1271e:	/--|-> movea.l (sp),a0
   12720:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   12724:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   12728:	|  \-> tst.l (sp)
   1272a:	\----- bne.s 1271e <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   1272c:	       move.l 12(sp),-(sp)
   12730:	       move.l 8(sp),-(sp)
   12734:	       jsr 8d0 <put2bytes>
   1273a:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   1273c:	       move.l 18d18 <allScreenRegions>,(sp)
	while (thisRegion) {
   12742:	/----- bra.w 127ea <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   12746:	|  /-> movea.l (sp),a0
   12748:	|  |   move.l (a0),d0
   1274a:	|  |   move.l 12(sp),-(sp)
   1274e:	|  |   move.l d0,-(sp)
   12750:	|  |   jsr 8d0 <put2bytes>
   12756:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   12758:	|  |   movea.l (sp),a0
   1275a:	|  |   move.l 4(a0),d0
   1275e:	|  |   move.l 12(sp),-(sp)
   12762:	|  |   move.l d0,-(sp)
   12764:	|  |   jsr 8d0 <put2bytes>
   1276a:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   1276c:	|  |   movea.l (sp),a0
   1276e:	|  |   move.l 8(a0),d0
   12772:	|  |   move.l 12(sp),-(sp)
   12776:	|  |   move.l d0,-(sp)
   12778:	|  |   jsr 8d0 <put2bytes>
   1277e:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   12780:	|  |   movea.l (sp),a0
   12782:	|  |   move.l 12(a0),d0
   12786:	|  |   move.l 12(sp),-(sp)
   1278a:	|  |   move.l d0,-(sp)
   1278c:	|  |   jsr 8d0 <put2bytes>
   12792:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   12794:	|  |   movea.l (sp),a0
   12796:	|  |   move.l 16(a0),d0
   1279a:	|  |   move.l 12(sp),-(sp)
   1279e:	|  |   move.l d0,-(sp)
   127a0:	|  |   jsr 8d0 <put2bytes>
   127a6:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   127a8:	|  |   movea.l (sp),a0
   127aa:	|  |   move.l 20(a0),d0
   127ae:	|  |   move.l 12(sp),-(sp)
   127b2:	|  |   move.l d0,-(sp)
   127b4:	|  |   jsr 8d0 <put2bytes>
   127ba:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   127bc:	|  |   movea.l (sp),a0
   127be:	|  |   move.l 24(a0),d0
   127c2:	|  |   move.l 12(sp),-(sp)
   127c6:	|  |   move.l d0,-(sp)
   127c8:	|  |   jsr 8d0 <put2bytes>
   127ce:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   127d0:	|  |   movea.l (sp),a0
   127d2:	|  |   move.l 28(a0),d0
   127d6:	|  |   move.l 12(sp),-(sp)
   127da:	|  |   move.l d0,-(sp)
   127dc:	|  |   jsr ac80 <saveObjectRef>
   127e2:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   127e4:	|  |   movea.l (sp),a0
   127e6:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   127ea:	\--|-> tst.l (sp)
   127ec:	   \-- bne.w 12746 <saveRegions+0x36>
	}
}
   127f0:	       nop
   127f2:	       nop
   127f4:	       addq.l #8,sp
   127f6:	       rts

000127f8 <showBoxes>:

void showBoxes () {
   127f8:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   127fa:	       move.l 18d18 <allScreenRegions>,(sp)

	while (huntRegion) {
   12800:	/----- bra.w 1289c <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   12804:	|  /-> movea.l (sp),a0
   12806:	|  |   move.l 12(a0),d0
   1280a:	|  |   movea.l d0,a1
   1280c:	|  |   movea.l (sp),a0
   1280e:	|  |   move.l 4(a0),d0
   12812:	|  |   move.l d0,d1
   12814:	|  |   movea.l (sp),a0
   12816:	|  |   move.l (a0),d0
   12818:	|  |   move.l a1,-(sp)
   1281a:	|  |   move.l d1,-(sp)
   1281c:	|  |   move.l d0,-(sp)
   1281e:	|  |   jsr a570 <drawVerticalLine>
   12824:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   12828:	|  |   movea.l (sp),a0
   1282a:	|  |   move.l 12(a0),d0
   1282e:	|  |   movea.l d0,a1
   12830:	|  |   movea.l (sp),a0
   12832:	|  |   move.l 4(a0),d0
   12836:	|  |   move.l d0,d1
   12838:	|  |   movea.l (sp),a0
   1283a:	|  |   move.l 8(a0),d0
   1283e:	|  |   move.l a1,-(sp)
   12840:	|  |   move.l d1,-(sp)
   12842:	|  |   move.l d0,-(sp)
   12844:	|  |   jsr a570 <drawVerticalLine>
   1284a:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   1284e:	|  |   movea.l (sp),a0
   12850:	|  |   move.l 8(a0),d0
   12854:	|  |   movea.l d0,a1
   12856:	|  |   movea.l (sp),a0
   12858:	|  |   move.l 4(a0),d0
   1285c:	|  |   move.l d0,d1
   1285e:	|  |   movea.l (sp),a0
   12860:	|  |   move.l (a0),d0
   12862:	|  |   move.l a1,-(sp)
   12864:	|  |   move.l d1,-(sp)
   12866:	|  |   move.l d0,-(sp)
   12868:	|  |   jsr a54a <drawHorizontalLine>
   1286e:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   12872:	|  |   movea.l (sp),a0
   12874:	|  |   move.l 8(a0),d0
   12878:	|  |   movea.l d0,a1
   1287a:	|  |   movea.l (sp),a0
   1287c:	|  |   move.l 12(a0),d0
   12880:	|  |   move.l d0,d1
   12882:	|  |   movea.l (sp),a0
   12884:	|  |   move.l (a0),d0
   12886:	|  |   move.l a1,-(sp)
   12888:	|  |   move.l d1,-(sp)
   1288a:	|  |   move.l d0,-(sp)
   1288c:	|  |   jsr a54a <drawHorizontalLine>
   12892:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   12896:	|  |   movea.l (sp),a0
   12898:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   1289c:	\--|-> tst.l (sp)
   1289e:	   \-- bne.w 12804 <showBoxes+0xc>
	}
   128a2:	       nop
   128a4:	       nop
   128a6:	       addq.l #4,sp
   128a8:	       rts

000128aa <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   128aa:	       lea -32(sp),sp
   128ae:	       move.l d3,-(sp)
   128b0:	       move.l d2,-(sp)
	int xDiff = x2 - x1;
   128b2:	       move.l 60(sp),d0
   128b6:	       sub.l 52(sp),d0
   128ba:	       move.l d0,36(sp)
	int yDiff = y2 - y1;
   128be:	       move.l 64(sp),d0
   128c2:	       sub.l 56(sp),d0
   128c6:	       move.l d0,32(sp)

	double m = xDiff * (xP - x1) + yDiff * (yP - y1);
   128ca:	       move.l 68(sp),d0
   128ce:	       sub.l 52(sp),d0
   128d2:	       move.l 36(sp),-(sp)
   128d6:	       move.l d0,-(sp)
   128d8:	       jsr 14284 <__mulsi3>
   128de:	       addq.l #8,sp
   128e0:	       move.l d0,d2
   128e2:	       move.l 72(sp),d0
   128e6:	       sub.l 56(sp),d0
   128ea:	       move.l 32(sp),-(sp)
   128ee:	       move.l d0,-(sp)
   128f0:	       jsr 14284 <__mulsi3>
   128f6:	       addq.l #8,sp
   128f8:	       add.l d2,d0
   128fa:	       move.l d0,-(sp)
   128fc:	       jsr 13cc2 <__floatsidf>
   12902:	       addq.l #4,sp
   12904:	       move.l d0,16(sp)
   12908:	       move.l d1,20(sp)
   1290c:	       move.l 16(sp),24(sp)
   12912:	       move.l 20(sp),28(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   12918:	       move.l 36(sp),-(sp)
   1291c:	       move.l 40(sp),-(sp)
   12920:	       jsr 14284 <__mulsi3>
   12926:	       addq.l #8,sp
   12928:	       move.l d0,d2
   1292a:	       move.l 32(sp),-(sp)
   1292e:	       move.l 36(sp),-(sp)
   12932:	       jsr 14284 <__mulsi3>
   12938:	       addq.l #8,sp
   1293a:	       add.l d2,d0
   1293c:	       move.l d0,-(sp)
   1293e:	       jsr 13cc2 <__floatsidf>
   12944:	       addq.l #4,sp
   12946:	       move.l d1,-(sp)
   12948:	       move.l d0,-(sp)
   1294a:	       move.l 36(sp),-(sp)
   1294e:	       move.l 36(sp),-(sp)
   12952:	       jsr 13b4c <__divdf3>
   12958:	       lea 16(sp),sp
   1295c:	       move.l d0,8(sp)
   12960:	       move.l d1,12(sp)
   12964:	       move.l 8(sp),24(sp)
   1296a:	       move.l 12(sp),28(sp)

	if (m < 0) {
   12970:	       clr.l -(sp)
   12972:	       clr.l -(sp)
   12974:	       move.l 36(sp),-(sp)
   12978:	       move.l 36(sp),-(sp)
   1297c:	       jsr 13eda <__ltdf2>
   12982:	       lea 16(sp),sp
   12986:	       tst.l d0
   12988:	   /-- bge.s 1299e <closestPointOnLine+0xf4>
		*closestX = x1;
   1298a:	   |   movea.l 44(sp),a0
   1298e:	   |   move.l 52(sp),(a0)
		*closestY = y1;
   12992:	   |   movea.l 48(sp),a0
   12996:	   |   move.l 56(sp),(a0)
   1299a:	/--|-- bra.w 12a80 <closestPointOnLine+0x1d6>
	} else if (m > 1) {
   1299e:	|  \-> clr.l -(sp)
   129a0:	|      move.l #1072693248,-(sp)
   129a6:	|      move.l 36(sp),-(sp)
   129aa:	|      move.l 36(sp),-(sp)
   129ae:	|      jsr 13e20 <__gtdf2>
   129b4:	|      lea 16(sp),sp
   129b8:	|      tst.l d0
   129ba:	|  /-- ble.s 129d0 <closestPointOnLine+0x126>
		*closestX = x2;
   129bc:	|  |   movea.l 44(sp),a0
   129c0:	|  |   move.l 60(sp),(a0)
		*closestY = y2;
   129c4:	|  |   movea.l 48(sp),a0
   129c8:	|  |   move.l 64(sp),(a0)
   129cc:	+--|-- bra.w 12a80 <closestPointOnLine+0x1d6>
	} else {
		*closestX = x1 + m * xDiff;
   129d0:	|  \-> move.l 52(sp),-(sp)
   129d4:	|      jsr 13cc2 <__floatsidf>
   129da:	|      addq.l #4,sp
   129dc:	|      move.l d0,d2
   129de:	|      move.l d1,d3
   129e0:	|      move.l 36(sp),-(sp)
   129e4:	|      jsr 13cc2 <__floatsidf>
   129ea:	|      addq.l #4,sp
   129ec:	|      move.l 28(sp),-(sp)
   129f0:	|      move.l 28(sp),-(sp)
   129f4:	|      move.l d1,-(sp)
   129f6:	|      move.l d0,-(sp)
   129f8:	|      jsr 13d52 <__muldf3>
   129fe:	|      lea 16(sp),sp
   12a02:	|      move.l d1,-(sp)
   12a04:	|      move.l d0,-(sp)
   12a06:	|      move.l d3,-(sp)
   12a08:	|      move.l d2,-(sp)
   12a0a:	|      jsr 13aea <__adddf3>
   12a10:	|      lea 16(sp),sp
   12a14:	|      move.l d1,-(sp)
   12a16:	|      move.l d0,-(sp)
   12a18:	|      jsr 13c5a <__fixdfsi>
   12a1e:	|      addq.l #8,sp
   12a20:	|      movea.l 44(sp),a0
   12a24:	|      move.l d0,(a0)
		*closestY = y1 + m * yDiff;
   12a26:	|      move.l 56(sp),-(sp)
   12a2a:	|      jsr 13cc2 <__floatsidf>
   12a30:	|      addq.l #4,sp
   12a32:	|      move.l d0,d2
   12a34:	|      move.l d1,d3
   12a36:	|      move.l 32(sp),-(sp)
   12a3a:	|      jsr 13cc2 <__floatsidf>
   12a40:	|      addq.l #4,sp
   12a42:	|      move.l 28(sp),-(sp)
   12a46:	|      move.l 28(sp),-(sp)
   12a4a:	|      move.l d1,-(sp)
   12a4c:	|      move.l d0,-(sp)
   12a4e:	|      jsr 13d52 <__muldf3>
   12a54:	|      lea 16(sp),sp
   12a58:	|      move.l d1,-(sp)
   12a5a:	|      move.l d0,-(sp)
   12a5c:	|      move.l d3,-(sp)
   12a5e:	|      move.l d2,-(sp)
   12a60:	|      jsr 13aea <__adddf3>
   12a66:	|      lea 16(sp),sp
   12a6a:	|      move.l d1,-(sp)
   12a6c:	|      move.l d0,-(sp)
   12a6e:	|      jsr 13c5a <__fixdfsi>
   12a74:	|      addq.l #8,sp
   12a76:	|      movea.l 48(sp),a0
   12a7a:	|      move.l d0,(a0)
		return TRUE;
   12a7c:	|      moveq #1,d0
   12a7e:	|  /-- bra.s 12a82 <closestPointOnLine+0x1d8>
	}
	return FALSE;
   12a80:	\--|-> clr.w d0
}
   12a82:	   \-> move.l (sp)+,d2
   12a84:	       move.l (sp)+,d3
   12a86:	       lea 32(sp),sp
   12a8a:	       rts

00012a8c <drawFloor>:

void drawFloor() {
   12a8c:	                lea -12(sp),sp
   12a90:	                move.l d3,-(sp)
   12a92:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   12a94:	                clr.l 16(sp)
   12a98:	   /----------- bra.w 12cac <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   12a9c:	/--|----------> movea.l 18d20 <currentFloor>,a0
   12aa2:	|  |            move.l 12(a0),d1
   12aa6:	|  |            move.l 16(sp),d0
   12aaa:	|  |            lsl.l #3,d0
   12aac:	|  |            movea.l d1,a0
   12aae:	|  |            adda.l d0,a0
   12ab0:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   12ab4:	|  |            moveq #1,d0
   12ab6:	|  |            cmp.l 8(sp),d0
   12aba:	|  |  /-------- bge.w 12ca8 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   12abe:	|  |  |         moveq #1,d0
   12ac0:	|  |  |         move.l d0,12(sp)
   12ac4:	|  |  |     /-- bra.w 12bbe <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   12ac8:	|  |  |  /--|-> movea.l 18d20 <currentFloor>,a0
   12ace:	|  |  |  |  |   move.l 4(a0),d1
   12ad2:	|  |  |  |  |   movea.l 18d20 <currentFloor>,a0
   12ad8:	|  |  |  |  |   movea.l 12(a0),a0
   12adc:	|  |  |  |  |   move.l 16(sp),d0
   12ae0:	|  |  |  |  |   lsl.l #3,d0
   12ae2:	|  |  |  |  |   adda.l d0,a0
   12ae4:	|  |  |  |  |   movea.l 4(a0),a0
   12ae8:	|  |  |  |  |   move.l 12(sp),d0
   12aec:	|  |  |  |  |   add.l d0,d0
   12aee:	|  |  |  |  |   add.l d0,d0
   12af0:	|  |  |  |  |   adda.l d0,a0
   12af2:	|  |  |  |  |   move.l (a0),d0
   12af4:	|  |  |  |  |   lsl.l #3,d0
   12af6:	|  |  |  |  |   movea.l d1,a0
   12af8:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   12afa:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   12afe:	|  |  |  |  |   movea.l 18d20 <currentFloor>,a0
   12b04:	|  |  |  |  |   move.l 4(a0),d1
   12b08:	|  |  |  |  |   movea.l 18d20 <currentFloor>,a0
   12b0e:	|  |  |  |  |   movea.l 12(a0),a0
   12b12:	|  |  |  |  |   move.l 16(sp),d0
   12b16:	|  |  |  |  |   lsl.l #3,d0
   12b18:	|  |  |  |  |   adda.l d0,a0
   12b1a:	|  |  |  |  |   movea.l 4(a0),a0
   12b1e:	|  |  |  |  |   move.l 12(sp),d0
   12b22:	|  |  |  |  |   add.l d0,d0
   12b24:	|  |  |  |  |   add.l d0,d0
   12b26:	|  |  |  |  |   adda.l d0,a0
   12b28:	|  |  |  |  |   move.l (a0),d0
   12b2a:	|  |  |  |  |   lsl.l #3,d0
   12b2c:	|  |  |  |  |   movea.l d1,a0
   12b2e:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   12b30:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   12b32:	|  |  |  |  |   movea.l 18d20 <currentFloor>,a0
   12b38:	|  |  |  |  |   move.l 4(a0),d1
   12b3c:	|  |  |  |  |   movea.l 18d20 <currentFloor>,a0
   12b42:	|  |  |  |  |   movea.l 12(a0),a0
   12b46:	|  |  |  |  |   move.l 16(sp),d0
   12b4a:	|  |  |  |  |   lsl.l #3,d0
   12b4c:	|  |  |  |  |   adda.l d0,a0
   12b4e:	|  |  |  |  |   movea.l 4(a0),a0
   12b52:	|  |  |  |  |   move.l 12(sp),d0
   12b56:	|  |  |  |  |   addi.l #1073741823,d0
   12b5c:	|  |  |  |  |   add.l d0,d0
   12b5e:	|  |  |  |  |   add.l d0,d0
   12b60:	|  |  |  |  |   adda.l d0,a0
   12b62:	|  |  |  |  |   move.l (a0),d0
   12b64:	|  |  |  |  |   lsl.l #3,d0
   12b66:	|  |  |  |  |   movea.l d1,a0
   12b68:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   12b6a:	|  |  |  |  |   move.l 4(a0),d1
   12b6e:	|  |  |  |  |   movea.l 18d20 <currentFloor>,a0
   12b74:	|  |  |  |  |   move.l 4(a0),d3
   12b78:	|  |  |  |  |   movea.l 18d20 <currentFloor>,a0
   12b7e:	|  |  |  |  |   movea.l 12(a0),a0
   12b82:	|  |  |  |  |   move.l 16(sp),d0
   12b86:	|  |  |  |  |   lsl.l #3,d0
   12b88:	|  |  |  |  |   adda.l d0,a0
   12b8a:	|  |  |  |  |   movea.l 4(a0),a0
   12b8e:	|  |  |  |  |   move.l 12(sp),d0
   12b92:	|  |  |  |  |   addi.l #1073741823,d0
   12b98:	|  |  |  |  |   add.l d0,d0
   12b9a:	|  |  |  |  |   add.l d0,d0
   12b9c:	|  |  |  |  |   adda.l d0,a0
   12b9e:	|  |  |  |  |   move.l (a0),d0
   12ba0:	|  |  |  |  |   lsl.l #3,d0
   12ba2:	|  |  |  |  |   movea.l d3,a0
   12ba4:	|  |  |  |  |   adda.l d0,a0
   12ba6:	|  |  |  |  |   move.l (a0),d0
   12ba8:	|  |  |  |  |   move.l d2,-(sp)
   12baa:	|  |  |  |  |   move.l a1,-(sp)
   12bac:	|  |  |  |  |   move.l d1,-(sp)
   12bae:	|  |  |  |  |   move.l d0,-(sp)
   12bb0:	|  |  |  |  |   jsr 191a <drawLine>
   12bb6:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   12bba:	|  |  |  |  |   addq.l #1,12(sp)
   12bbe:	|  |  |  |  \-> move.l 12(sp),d0
   12bc2:	|  |  |  |      cmp.l 8(sp),d0
   12bc6:	|  |  |  \----- blt.w 12ac8 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   12bca:	|  |  |         movea.l 18d20 <currentFloor>,a0
   12bd0:	|  |  |         move.l 4(a0),d1
   12bd4:	|  |  |         movea.l 18d20 <currentFloor>,a0
   12bda:	|  |  |         movea.l 12(a0),a0
   12bde:	|  |  |         move.l 16(sp),d0
   12be2:	|  |  |         lsl.l #3,d0
   12be4:	|  |  |         adda.l d0,a0
   12be6:	|  |  |         movea.l 4(a0),a0
   12bea:	|  |  |         move.l 8(sp),d0
   12bee:	|  |  |         addi.l #1073741823,d0
   12bf4:	|  |  |         add.l d0,d0
   12bf6:	|  |  |         add.l d0,d0
   12bf8:	|  |  |         adda.l d0,a0
   12bfa:	|  |  |         move.l (a0),d0
   12bfc:	|  |  |         lsl.l #3,d0
   12bfe:	|  |  |         movea.l d1,a0
   12c00:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   12c02:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   12c06:	|  |  |         movea.l 18d20 <currentFloor>,a0
   12c0c:	|  |  |         move.l 4(a0),d1
   12c10:	|  |  |         movea.l 18d20 <currentFloor>,a0
   12c16:	|  |  |         movea.l 12(a0),a0
   12c1a:	|  |  |         move.l 16(sp),d0
   12c1e:	|  |  |         lsl.l #3,d0
   12c20:	|  |  |         adda.l d0,a0
   12c22:	|  |  |         movea.l 4(a0),a0
   12c26:	|  |  |         move.l 8(sp),d0
   12c2a:	|  |  |         addi.l #1073741823,d0
   12c30:	|  |  |         add.l d0,d0
   12c32:	|  |  |         add.l d0,d0
   12c34:	|  |  |         adda.l d0,a0
   12c36:	|  |  |         move.l (a0),d0
   12c38:	|  |  |         lsl.l #3,d0
   12c3a:	|  |  |         movea.l d1,a0
   12c3c:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   12c3e:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   12c40:	|  |  |         movea.l 18d20 <currentFloor>,a0
   12c46:	|  |  |         move.l 4(a0),d1
   12c4a:	|  |  |         movea.l 18d20 <currentFloor>,a0
   12c50:	|  |  |         movea.l 12(a0),a0
   12c54:	|  |  |         move.l 16(sp),d0
   12c58:	|  |  |         lsl.l #3,d0
   12c5a:	|  |  |         adda.l d0,a0
   12c5c:	|  |  |         movea.l 4(a0),a0
   12c60:	|  |  |         move.l (a0),d0
   12c62:	|  |  |         lsl.l #3,d0
   12c64:	|  |  |         movea.l d1,a0
   12c66:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   12c68:	|  |  |         move.l 4(a0),d1
   12c6c:	|  |  |         movea.l 18d20 <currentFloor>,a0
   12c72:	|  |  |         move.l 4(a0),d3
   12c76:	|  |  |         movea.l 18d20 <currentFloor>,a0
   12c7c:	|  |  |         movea.l 12(a0),a0
   12c80:	|  |  |         move.l 16(sp),d0
   12c84:	|  |  |         lsl.l #3,d0
   12c86:	|  |  |         adda.l d0,a0
   12c88:	|  |  |         movea.l 4(a0),a0
   12c8c:	|  |  |         move.l (a0),d0
   12c8e:	|  |  |         lsl.l #3,d0
   12c90:	|  |  |         movea.l d3,a0
   12c92:	|  |  |         adda.l d0,a0
   12c94:	|  |  |         move.l (a0),d0
   12c96:	|  |  |         move.l d2,-(sp)
   12c98:	|  |  |         move.l a1,-(sp)
   12c9a:	|  |  |         move.l d1,-(sp)
   12c9c:	|  |  |         move.l d0,-(sp)
   12c9e:	|  |  |         jsr 191a <drawLine>
   12ca4:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   12ca8:	|  |  \-------> addq.l #1,16(sp)
   12cac:	|  \----------> movea.l 18d20 <currentFloor>,a0
   12cb2:	|               move.l 8(a0),d0
   12cb6:	|               cmp.l 16(sp),d0
   12cba:	\-------------- bgt.w 12a9c <drawFloor+0x10>
        }
    }
}
   12cbe:	                nop
   12cc0:	                nop
   12cc2:	                move.l (sp)+,d2
   12cc4:	                move.l (sp)+,d3
   12cc6:	                lea 12(sp),sp
   12cca:	                rts

00012ccc <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   12ccc:	                      lea -12(sp),sp
    int sharedVertices = 0;
   12cd0:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   12cd4:	                      clr.l 4(sp)
   12cd8:	   /----------------- bra.w 12d6a <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   12cdc:	/--|----------------> clr.l (sp)
   12cde:	|  |     /----------- bra.s 12d5a <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   12ce0:	|  |  /--|----------> movea.l 16(sp),a0
   12ce4:	|  |  |  |            move.l 4(a0),d1
   12ce8:	|  |  |  |            move.l 4(sp),d0
   12cec:	|  |  |  |            add.l d0,d0
   12cee:	|  |  |  |            add.l d0,d0
   12cf0:	|  |  |  |            movea.l d1,a0
   12cf2:	|  |  |  |            adda.l d0,a0
   12cf4:	|  |  |  |            move.l (a0),d1
   12cf6:	|  |  |  |            movea.l 20(sp),a0
   12cfa:	|  |  |  |            movea.l 4(a0),a0
   12cfe:	|  |  |  |            move.l (sp),d0
   12d00:	|  |  |  |            add.l d0,d0
   12d02:	|  |  |  |            add.l d0,d0
   12d04:	|  |  |  |            adda.l d0,a0
   12d06:	|  |  |  |            move.l (a0),d0
   12d08:	|  |  |  |            cmp.l d1,d0
   12d0a:	|  |  |  |  /-------- bne.s 12d58 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   12d0c:	|  |  |  |  |         move.l 8(sp),d0
   12d10:	|  |  |  |  |         move.l d0,d1
   12d12:	|  |  |  |  |         addq.l #1,d1
   12d14:	|  |  |  |  |         move.l d1,8(sp)
   12d18:	|  |  |  |  |         tst.l d0
   12d1a:	|  |  |  |  |     /-- beq.s 12d3c <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   12d1c:	|  |  |  |  |     |   movea.l 16(sp),a0
   12d20:	|  |  |  |  |     |   move.l 4(a0),d1
   12d24:	|  |  |  |  |     |   move.l 4(sp),d0
   12d28:	|  |  |  |  |     |   add.l d0,d0
   12d2a:	|  |  |  |  |     |   add.l d0,d0
   12d2c:	|  |  |  |  |     |   movea.l d1,a0
   12d2e:	|  |  |  |  |     |   adda.l d0,a0
   12d30:	|  |  |  |  |     |   move.l (a0),d0
   12d32:	|  |  |  |  |     |   movea.l 28(sp),a0
   12d36:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   12d38:	|  |  |  |  |     |   moveq #1,d0
   12d3a:	|  |  |  |  |  /--|-- bra.s 12d7a <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   12d3c:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   12d40:	|  |  |  |  |  |      move.l 4(a0),d1
   12d44:	|  |  |  |  |  |      move.l 4(sp),d0
   12d48:	|  |  |  |  |  |      add.l d0,d0
   12d4a:	|  |  |  |  |  |      add.l d0,d0
   12d4c:	|  |  |  |  |  |      movea.l d1,a0
   12d4e:	|  |  |  |  |  |      adda.l d0,a0
   12d50:	|  |  |  |  |  |      move.l (a0),d0
   12d52:	|  |  |  |  |  |      movea.l 24(sp),a0
   12d56:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   12d58:	|  |  |  |  \--|----> addq.l #1,(sp)
   12d5a:	|  |  |  \-----|----> movea.l 20(sp),a0
   12d5e:	|  |  |        |      move.l (a0),d0
   12d60:	|  |  |        |      cmp.l (sp),d0
   12d62:	|  |  \--------|----- bgt.w 12ce0 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   12d66:	|  |           |      addq.l #1,4(sp)
   12d6a:	|  \-----------|----> movea.l 16(sp),a0
   12d6e:	|              |      move.l (a0),d0
   12d70:	|              |      cmp.l 4(sp),d0
   12d74:	\--------------|----- bgt.w 12cdc <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   12d78:	               |      clr.w d0
}
   12d7a:	               \----> lea 12(sp),sp
   12d7e:	                      rts

00012d80 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   12d80:	movea.l 18d20 <currentFloor>,a0
   12d86:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   12d8a:	movea.l 18d20 <currentFloor>,a0
   12d90:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   12d94:	movea.l 18d20 <currentFloor>,a0
   12d9a:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   12d9e:	movea.l 18d20 <currentFloor>,a0
   12da4:	clr.l 16(a0)
}
   12da8:	nop
   12daa:	rts

00012dac <inFloor>:

int inFloor (int x, int y) {
   12dac:	          subq.l #8,sp
	int i, r = -1;
   12dae:	          moveq #-1,d0
   12db0:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   12db2:	          clr.l 4(sp)
   12db6:	   /----- bra.s 12dea <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   12db8:	/--|----> movea.l 18d20 <currentFloor>,a0
   12dbe:	|  |      move.l 12(a0),d1
   12dc2:	|  |      move.l 4(sp),d0
   12dc6:	|  |      lsl.l #3,d0
   12dc8:	|  |      add.l d1,d0
   12dca:	|  |      move.l 16(sp),-(sp)
   12dce:	|  |      move.l 16(sp),-(sp)
   12dd2:	|  |      move.l d0,-(sp)
   12dd4:	|  |      jsr 12fb6 <pointInFloorPolygon>
   12dda:	|  |      lea 12(sp),sp
   12dde:	|  |      tst.w d0
   12de0:	|  |  /-- beq.s 12de6 <inFloor+0x3a>
			r = i;
   12de2:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   12de6:	|  |  \-> addq.l #1,4(sp)
   12dea:	|  \----> movea.l 18d20 <currentFloor>,a0
   12df0:	|         move.l 8(a0),d0
   12df4:	|         cmp.l 4(sp),d0
   12df8:	\-------- bgt.s 12db8 <inFloor+0xc>

	return r;
   12dfa:	          move.l (sp),d0
}
   12dfc:	          addq.l #8,sp
   12dfe:	          rts

00012e00 <initFloor>:

BOOL initFloor () {
   12e00:	       lea -12(sp),sp
   12e04:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   12e06:	       moveq #20,d0
   12e08:	       move.l d0,12(sp)
   12e0c:	       clr.l 8(sp)
   12e10:	       move.l 18bc0 <SysBase>,d0
   12e16:	       movea.l d0,a6
   12e18:	       move.l 12(sp),d0
   12e1c:	       move.l 8(sp),d1
   12e20:	       jsr -684(a6)
   12e24:	       move.l d0,4(sp)
   12e28:	       move.l 4(sp),d0
   12e2c:	       move.l d0,18d20 <currentFloor>

    if(currentFloor == 0) {
   12e32:	       move.l 18d20 <currentFloor>,d0
   12e38:	/----- bne.s 12e4c <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   12e3a:	|      pea 16328 <custom.c.36a9b171+0x172e>
   12e40:	|      jsr 13a4a <KPrintF>
   12e46:	|      addq.l #4,sp
        return FALSE;
   12e48:	|      clr.w d0
   12e4a:	|  /-- bra.s 12e54 <initFloor+0x54>
    }

	noFloor ();
   12e4c:	\--|-> jsr 12d80 <noFloor>
	return TRUE;
   12e52:	   |   moveq #1,d0
}
   12e54:	   \-> movea.l (sp)+,a6
   12e56:	       lea 12(sp),sp
   12e5a:	       rts

00012e5c <killFloor>:

void killFloor () {
   12e5c:	       lea -24(sp),sp
   12e60:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   12e62:	       clr.l 24(sp)
   12e66:	   /-- bra.s 12ec0 <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   12e68:	/--|-> movea.l 18d20 <currentFloor>,a0
   12e6e:	|  |   move.l 12(a0),d1
   12e72:	|  |   move.l 24(sp),d0
   12e76:	|  |   lsl.l #3,d0
   12e78:	|  |   movea.l d1,a0
   12e7a:	|  |   adda.l d0,a0
   12e7c:	|  |   move.l 4(a0),8(sp)
   12e82:	|  |   move.l 18bc0 <SysBase>,d0
   12e88:	|  |   movea.l d0,a6
   12e8a:	|  |   movea.l 8(sp),a1
   12e8e:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   12e92:	|  |   movea.l 18d20 <currentFloor>,a0
   12e98:	|  |   move.l 16(a0),d1
   12e9c:	|  |   move.l 24(sp),d0
   12ea0:	|  |   add.l d0,d0
   12ea2:	|  |   add.l d0,d0
   12ea4:	|  |   movea.l d1,a0
   12ea6:	|  |   adda.l d0,a0
   12ea8:	|  |   move.l (a0),4(sp)
   12eac:	|  |   move.l 18bc0 <SysBase>,d0
   12eb2:	|  |   movea.l d0,a6
   12eb4:	|  |   movea.l 4(sp),a1
   12eb8:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   12ebc:	|  |   addq.l #1,24(sp)
   12ec0:	|  \-> movea.l 18d20 <currentFloor>,a0
   12ec6:	|      move.l 8(a0),d0
   12eca:	|      cmp.l 24(sp),d0
   12ece:	\----- bgt.s 12e68 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   12ed0:	       movea.l 18d20 <currentFloor>,a0
   12ed6:	       move.l 12(a0),20(sp)
   12edc:	       move.l 18bc0 <SysBase>,d0
   12ee2:	       movea.l d0,a6
   12ee4:	       movea.l 20(sp),a1
   12ee8:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   12eec:	       movea.l 18d20 <currentFloor>,a0
   12ef2:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   12ef6:	       movea.l 18d20 <currentFloor>,a0
   12efc:	       move.l 4(a0),16(sp)
   12f02:	       move.l 18bc0 <SysBase>,d0
   12f08:	       movea.l d0,a6
   12f0a:	       movea.l 16(sp),a1
   12f0e:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   12f12:	       movea.l 18d20 <currentFloor>,a0
   12f18:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   12f1c:	       movea.l 18d20 <currentFloor>,a0
   12f22:	       move.l 16(a0),12(sp)
   12f28:	       move.l 18bc0 <SysBase>,d0
   12f2e:	       movea.l d0,a6
   12f30:	       movea.l 12(sp),a1
   12f34:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   12f38:	       movea.l 18d20 <currentFloor>,a0
   12f3e:	       clr.l 16(a0)
}
   12f42:	       nop
   12f44:	       movea.l (sp)+,a6
   12f46:	       lea 24(sp),sp
   12f4a:	       rts

00012f4c <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   12f4c:	                   lea -12(sp),sp
	int sharedVertices = 0;
   12f50:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   12f54:	                   clr.l 4(sp)
   12f58:	   /-------------- bra.s 12fa4 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   12f5a:	/--|-------------> clr.l (sp)
   12f5c:	|  |     /-------- bra.s 12f98 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   12f5e:	|  |  /--|-------> move.l 20(sp),d1
   12f62:	|  |  |  |         move.l 4(sp),d0
   12f66:	|  |  |  |         add.l d0,d0
   12f68:	|  |  |  |         add.l d0,d0
   12f6a:	|  |  |  |         movea.l d1,a0
   12f6c:	|  |  |  |         adda.l d0,a0
   12f6e:	|  |  |  |         move.l (a0),d1
   12f70:	|  |  |  |         movea.l 28(sp),a0
   12f74:	|  |  |  |         move.l (sp),d0
   12f76:	|  |  |  |         add.l d0,d0
   12f78:	|  |  |  |         add.l d0,d0
   12f7a:	|  |  |  |         adda.l d0,a0
   12f7c:	|  |  |  |         move.l (a0),d0
   12f7e:	|  |  |  |         cmp.l d1,d0
   12f80:	|  |  |  |     /-- bne.s 12f96 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   12f82:	|  |  |  |     |   move.l 8(sp),d0
   12f86:	|  |  |  |     |   move.l d0,d1
   12f88:	|  |  |  |     |   addq.l #1,d1
   12f8a:	|  |  |  |     |   move.l d1,8(sp)
   12f8e:	|  |  |  |     |   tst.l d0
   12f90:	|  |  |  |     +-- beq.s 12f96 <polysShareSide+0x4a>
   12f92:	|  |  |  |     |   moveq #1,d0
   12f94:	|  |  |  |  /--|-- bra.s 12fb0 <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   12f96:	|  |  |  |  |  \-> addq.l #1,(sp)
   12f98:	|  |  |  \--|----> move.l 24(sp),d0
   12f9c:	|  |  |     |      cmp.l (sp),d0
   12f9e:	|  |  \-----|----- bgt.s 12f5e <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   12fa0:	|  |        |      addq.l #1,4(sp)
   12fa4:	|  \--------|----> move.l 16(sp),d0
   12fa8:	|           |      cmp.l 4(sp),d0
   12fac:	\-----------|----- bgt.s 12f5a <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   12fae:	            |      clr.w d0
}
   12fb0:	            \----> lea 12(sp),sp
   12fb4:	                   rts

00012fb6 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   12fb6:	             lea -28(sp),sp
   12fba:	             move.l d3,-(sp)
   12fbc:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   12fbe:	             clr.l 32(sp)
   12fc2:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   12fc6:	             movea.l 40(sp),a0
   12fca:	             move.l (a0),d0
   12fcc:	             move.l d0,d1
   12fce:	             subq.l #1,d1
   12fd0:	             move.l d1,28(sp)
   12fd4:	   /-------- bra.w 131ce <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   12fd8:	/--|-------> movea.l 18d20 <currentFloor>,a0
   12fde:	|  |         move.l 4(a0),d1
   12fe2:	|  |         movea.l 40(sp),a0
   12fe6:	|  |         movea.l 4(a0),a0
   12fea:	|  |         move.l 32(sp),d0
   12fee:	|  |         add.l d0,d0
   12ff0:	|  |         add.l d0,d0
   12ff2:	|  |         adda.l d0,a0
   12ff4:	|  |         move.l (a0),d0
   12ff6:	|  |         lsl.l #3,d0
   12ff8:	|  |         movea.l d1,a0
   12ffa:	|  |         adda.l d0,a0
   12ffc:	|  |         move.l (a0),d0
   12ffe:	|  |         move.l d0,-(sp)
   13000:	|  |         jsr 13d02 <__floatsisf>
   13006:	|  |         addq.l #4,sp
   13008:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   1300c:	|  |         movea.l 18d20 <currentFloor>,a0
   13012:	|  |         move.l 4(a0),d1
   13016:	|  |         movea.l 40(sp),a0
   1301a:	|  |         movea.l 4(a0),a0
   1301e:	|  |         move.l 32(sp),d0
   13022:	|  |         add.l d0,d0
   13024:	|  |         add.l d0,d0
   13026:	|  |         adda.l d0,a0
   13028:	|  |         move.l (a0),d0
   1302a:	|  |         lsl.l #3,d0
   1302c:	|  |         movea.l d1,a0
   1302e:	|  |         adda.l d0,a0
   13030:	|  |         move.l 4(a0),d0
   13034:	|  |         move.l d0,-(sp)
   13036:	|  |         jsr 13d02 <__floatsisf>
   1303c:	|  |         addq.l #4,sp
   1303e:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   13042:	|  |         movea.l 18d20 <currentFloor>,a0
   13048:	|  |         move.l 4(a0),d1
   1304c:	|  |         movea.l 40(sp),a0
   13050:	|  |         movea.l 4(a0),a0
   13054:	|  |         move.l 28(sp),d0
   13058:	|  |         add.l d0,d0
   1305a:	|  |         add.l d0,d0
   1305c:	|  |         adda.l d0,a0
   1305e:	|  |         move.l (a0),d0
   13060:	|  |         lsl.l #3,d0
   13062:	|  |         movea.l d1,a0
   13064:	|  |         adda.l d0,a0
   13066:	|  |         move.l (a0),d0
   13068:	|  |         move.l d0,-(sp)
   1306a:	|  |         jsr 13d02 <__floatsisf>
   13070:	|  |         addq.l #4,sp
   13072:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   13076:	|  |         movea.l 18d20 <currentFloor>,a0
   1307c:	|  |         move.l 4(a0),d1
   13080:	|  |         movea.l 40(sp),a0
   13084:	|  |         movea.l 4(a0),a0
   13088:	|  |         move.l 28(sp),d0
   1308c:	|  |         add.l d0,d0
   1308e:	|  |         add.l d0,d0
   13090:	|  |         adda.l d0,a0
   13092:	|  |         move.l (a0),d0
   13094:	|  |         lsl.l #3,d0
   13096:	|  |         movea.l d1,a0
   13098:	|  |         adda.l d0,a0
   1309a:	|  |         move.l 4(a0),d0
   1309e:	|  |         move.l d0,-(sp)
   130a0:	|  |         jsr 13d02 <__floatsisf>
   130a6:	|  |         addq.l #4,sp
   130a8:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   130ac:	|  |         move.l 48(sp),-(sp)
   130b0:	|  |         jsr 13d02 <__floatsisf>
   130b6:	|  |         addq.l #4,sp
   130b8:	|  |         move.l d0,-(sp)
   130ba:	|  |         move.l 20(sp),-(sp)
   130be:	|  |         jsr 13ea4 <__lesf2>
   130c4:	|  |         addq.l #8,sp
   130c6:	|  |         tst.l d0
   130c8:	|  |     /-- bgt.s 130e8 <pointInFloorPolygon+0x132>
   130ca:	|  |     |   move.l 48(sp),-(sp)
   130ce:	|  |     |   jsr 13d02 <__floatsisf>
   130d4:	|  |     |   addq.l #4,sp
   130d6:	|  |     |   move.l d0,-(sp)
   130d8:	|  |     |   move.l 12(sp),-(sp)
   130dc:	|  |     |   jsr 13e6e <__gtsf2>
   130e2:	|  |     |   addq.l #8,sp
   130e4:	|  |     |   tst.l d0
   130e6:	|  |  /--|-- bgt.s 13128 <pointInFloorPolygon+0x172>
   130e8:	|  |  |  \-> move.l 48(sp),-(sp)
   130ec:	|  |  |      jsr 13d02 <__floatsisf>
   130f2:	|  |  |      addq.l #4,sp
   130f4:	|  |  |      move.l d0,-(sp)
   130f6:	|  |  |      move.l 12(sp),-(sp)
   130fa:	|  |  |      jsr 13ea4 <__lesf2>
   13100:	|  |  |      addq.l #8,sp
   13102:	|  |  |      tst.l d0
   13104:	|  |  |  /-- bgt.w 131be <pointInFloorPolygon+0x208>
   13108:	|  |  |  |   move.l 48(sp),-(sp)
   1310c:	|  |  |  |   jsr 13d02 <__floatsisf>
   13112:	|  |  |  |   addq.l #4,sp
   13114:	|  |  |  |   move.l d0,-(sp)
   13116:	|  |  |  |   move.l 20(sp),-(sp)
   1311a:	|  |  |  |   jsr 13e6e <__gtsf2>
   13120:	|  |  |  |   addq.l #8,sp
   13122:	|  |  |  |   tst.l d0
   13124:	|  |  |  +-- ble.w 131be <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   13128:	|  |  \--|-> move.l 44(sp),-(sp)
   1312c:	|  |     |   jsr 13d02 <__floatsisf>
   13132:	|  |     |   addq.l #4,sp
   13134:	|  |     |   move.l d0,d3
   13136:	|  |     |   move.l 20(sp),-(sp)
   1313a:	|  |     |   move.l 16(sp),-(sp)
   1313e:	|  |     |   jsr 13ff6 <__subsf3>
   13144:	|  |     |   addq.l #8,sp
   13146:	|  |     |   move.l d0,d2
   13148:	|  |     |   move.l 48(sp),-(sp)
   1314c:	|  |     |   jsr 13d02 <__floatsisf>
   13152:	|  |     |   addq.l #4,sp
   13154:	|  |     |   move.l 16(sp),-(sp)
   13158:	|  |     |   move.l d0,-(sp)
   1315a:	|  |     |   jsr 13ff6 <__subsf3>
   13160:	|  |     |   addq.l #8,sp
   13162:	|  |     |   move.l d0,-(sp)
   13164:	|  |     |   move.l d2,-(sp)
   13166:	|  |     |   jsr 13db4 <__mulsf3>
   1316c:	|  |     |   addq.l #8,sp
   1316e:	|  |     |   move.l d0,d2
   13170:	|  |     |   move.l 16(sp),-(sp)
   13174:	|  |     |   move.l 12(sp),-(sp)
   13178:	|  |     |   jsr 13ff6 <__subsf3>
   1317e:	|  |     |   addq.l #8,sp
   13180:	|  |     |   move.l d0,-(sp)
   13182:	|  |     |   move.l d2,-(sp)
   13184:	|  |     |   jsr 13bae <__divsf3>
   1318a:	|  |     |   addq.l #8,sp
   1318c:	|  |     |   move.l 20(sp),-(sp)
   13190:	|  |     |   move.l d0,-(sp)
   13192:	|  |     |   jsr 13ab4 <__addsf3>
   13198:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   1319a:	|  |     |   move.l d0,-(sp)
   1319c:	|  |     |   move.l d3,-(sp)
   1319e:	|  |     |   jsr 13f28 <__ltsf2>
   131a4:	|  |     |   addq.l #8,sp
   131a6:	|  |     |   tst.l d0
   131a8:	|  |     +-- bge.s 131be <pointInFloorPolygon+0x208>

			c = !c;
   131aa:	|  |     |   tst.l 24(sp)
   131ae:	|  |     |   seq d0
   131b0:	|  |     |   neg.b d0
   131b2:	|  |     |   move.b d0,d0
   131b4:	|  |     |   andi.l #255,d0
   131ba:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   131be:	|  |     \-> move.l 32(sp),d0
   131c2:	|  |         move.l d0,d1
   131c4:	|  |         addq.l #1,d1
   131c6:	|  |         move.l d1,32(sp)
   131ca:	|  |         move.l d0,28(sp)
   131ce:	|  \-------> movea.l 40(sp),a0
   131d2:	|            move.l (a0),d0
   131d4:	|            cmp.l 32(sp),d0
   131d8:	\----------- bgt.w 12fd8 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   131dc:	             tst.l 24(sp)
   131e0:	             sne d0
   131e2:	             neg.b d0
   131e4:	             move.b d0,d0
   131e6:	             andi.w #255,d0
}
   131ea:	             move.l (sp)+,d2
   131ec:	             move.l (sp)+,d3
   131ee:	             lea 28(sp),sp
   131f2:	             rts

000131f4 <setFloor>:

BOOL setFloor (int fileNum) {
   131f4:	                               lea -132(sp),sp
   131f8:	                               move.l a6,-(sp)
   131fa:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   131fc:	                               jsr 12e5c <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   13202:	                               move.l 144(sp),-(sp)
   13206:	                               jsr 4556 <openFileFromNum>
   1320c:	                               addq.l #4,sp
   1320e:	                               tst.l d0
   13210:	                           /-- bne.s 13218 <setFloor+0x24>
   13212:	                           |   clr.w d0
   13214:	/--------------------------|-- bra.w 13964 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   13218:	|                          \-> movea.l 18d20 <currentFloor>,a0
   1321e:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   13222:	|                              move.l 18ba8 <bigDataFile>,118(sp)
   1322a:	|                              move.l 18bc8 <DOSBase>,d0
   13230:	|                              movea.l d0,a6
   13232:	|                              move.l 118(sp),d1
   13236:	|                              jsr -306(a6)
   1323a:	|                              move.l d0,114(sp)
   1323e:	|                              move.l 114(sp),d0
   13242:	|                              movea.l 18d20 <currentFloor>,a0
   13248:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   1324c:	|                              movea.l 18d20 <currentFloor>,a0
   13252:	|                              move.l 8(a0),d0
   13256:	|                              lsl.l #3,d0
   13258:	|                              move.l d0,110(sp)
   1325c:	|                              clr.l 106(sp)
   13260:	|                              move.l 18bc0 <SysBase>,d0
   13266:	|                              movea.l d0,a6
   13268:	|                              move.l 110(sp),d0
   1326c:	|                              move.l 106(sp),d1
   13270:	|                              jsr -684(a6)
   13274:	|                              move.l d0,102(sp)
   13278:	|                              move.l 102(sp),d0
   1327c:	|                              movea.l 18d20 <currentFloor>,a0
   13282:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   13286:	|                              movea.l 18d20 <currentFloor>,a0
   1328c:	|                              move.l 12(a0),d0
   13290:	|                          /-- bne.s 132a6 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   13292:	|                          |   pea 1634c <custom.c.36a9b171+0x1752>
   13298:	|                          |   jsr 13a4a <KPrintF>
   1329e:	|                          |   addq.l #4,sp
		return FALSE;
   132a0:	|                          |   clr.w d0
   132a2:	+--------------------------|-- bra.w 13964 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   132a6:	|                          \-> clr.l 136(sp)
   132aa:	|                    /-------- bra.w 133c2 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   132ae:	|                 /--|-------> move.l 18ba8 <bigDataFile>,26(sp)
   132b6:	|                 |  |         move.l 18bc8 <DOSBase>,d0
   132bc:	|                 |  |         movea.l d0,a6
   132be:	|                 |  |         move.l 26(sp),d1
   132c2:	|                 |  |         jsr -306(a6)
   132c6:	|                 |  |         move.l d0,22(sp)
   132ca:	|                 |  |         move.l 22(sp),d1
   132ce:	|                 |  |         movea.l 18d20 <currentFloor>,a0
   132d4:	|                 |  |         movea.l 12(a0),a0
   132d8:	|                 |  |         move.l 136(sp),d0
   132dc:	|                 |  |         lsl.l #3,d0
   132de:	|                 |  |         adda.l d0,a0
   132e0:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   132e2:	|                 |  |         movea.l 18d20 <currentFloor>,a0
   132e8:	|                 |  |         move.l 12(a0),d1
   132ec:	|                 |  |         move.l 136(sp),d0
   132f0:	|                 |  |         lsl.l #3,d0
   132f2:	|                 |  |         movea.l d1,a0
   132f4:	|                 |  |         adda.l d0,a0
   132f6:	|                 |  |         move.l (a0),d0
   132f8:	|                 |  |         add.l d0,d0
   132fa:	|                 |  |         add.l d0,d0
   132fc:	|                 |  |         move.l d0,18(sp)
   13300:	|                 |  |         clr.l 14(sp)
   13304:	|                 |  |         move.l 18bc0 <SysBase>,d0
   1330a:	|                 |  |         movea.l d0,a6
   1330c:	|                 |  |         move.l 18(sp),d0
   13310:	|                 |  |         move.l 14(sp),d1
   13314:	|                 |  |         jsr -684(a6)
   13318:	|                 |  |         move.l d0,10(sp)
   1331c:	|                 |  |         move.l 10(sp),d1
   13320:	|                 |  |         movea.l 18d20 <currentFloor>,a0
   13326:	|                 |  |         movea.l 12(a0),a0
   1332a:	|                 |  |         move.l 136(sp),d0
   1332e:	|                 |  |         lsl.l #3,d0
   13330:	|                 |  |         adda.l d0,a0
   13332:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   13336:	|                 |  |         movea.l 18d20 <currentFloor>,a0
   1333c:	|                 |  |         move.l 12(a0),d1
   13340:	|                 |  |         move.l 136(sp),d0
   13344:	|                 |  |         lsl.l #3,d0
   13346:	|                 |  |         movea.l d1,a0
   13348:	|                 |  |         adda.l d0,a0
   1334a:	|                 |  |         move.l 4(a0),d0
   1334e:	|                 |  |     /-- bne.s 13364 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   13350:	|                 |  |     |   pea 1634c <custom.c.36a9b171+0x1752>
   13356:	|                 |  |     |   jsr 13a4a <KPrintF>
   1335c:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   1335e:	|                 |  |     |   clr.w d0
   13360:	+-----------------|--|-----|-- bra.w 13964 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   13364:	|                 |  |     \-> clr.l 132(sp)
   13368:	|                 |  |     /-- bra.s 133a2 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   1336a:	|                 |  |  /--|-> move.l 18ba8 <bigDataFile>,d1
   13370:	|                 |  |  |  |   movea.l 18d20 <currentFloor>,a0
   13376:	|                 |  |  |  |   movea.l 12(a0),a0
   1337a:	|                 |  |  |  |   move.l 136(sp),d0
   1337e:	|                 |  |  |  |   lsl.l #3,d0
   13380:	|                 |  |  |  |   adda.l d0,a0
   13382:	|                 |  |  |  |   movea.l 4(a0),a0
   13386:	|                 |  |  |  |   move.l 132(sp),d0
   1338a:	|                 |  |  |  |   add.l d0,d0
   1338c:	|                 |  |  |  |   add.l d0,d0
   1338e:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   13392:	|                 |  |  |  |   move.l d1,-(sp)
   13394:	|                 |  |  |  |   jsr 6bc <get2bytes>
   1339a:	|                 |  |  |  |   addq.l #4,sp
   1339c:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   1339e:	|                 |  |  |  |   addq.l #1,132(sp)
   133a2:	|                 |  |  |  \-> movea.l 18d20 <currentFloor>,a0
   133a8:	|                 |  |  |      move.l 12(a0),d1
   133ac:	|                 |  |  |      move.l 136(sp),d0
   133b0:	|                 |  |  |      lsl.l #3,d0
   133b2:	|                 |  |  |      movea.l d1,a0
   133b4:	|                 |  |  |      adda.l d0,a0
   133b6:	|                 |  |  |      move.l (a0),d0
   133b8:	|                 |  |  |      cmp.l 132(sp),d0
   133bc:	|                 |  |  \----- bgt.s 1336a <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   133be:	|                 |  |         addq.l #1,136(sp)
   133c2:	|                 |  \-------> movea.l 18d20 <currentFloor>,a0
   133c8:	|                 |            move.l 8(a0),d0
   133cc:	|                 |            cmp.l 136(sp),d0
   133d0:	|                 \----------- bgt.w 132ae <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   133d4:	|                              move.l 18ba8 <bigDataFile>,d0
   133da:	|                              move.l d0,-(sp)
   133dc:	|                              jsr 6bc <get2bytes>
   133e2:	|                              addq.l #4,sp
   133e4:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   133e8:	|                              move.l 136(sp),d0
   133ec:	|                              lsl.l #3,d0
   133ee:	|                              move.l d0,98(sp)
   133f2:	|                              clr.l 94(sp)
   133f6:	|                              move.l 18bc0 <SysBase>,d0
   133fc:	|                              movea.l d0,a6
   133fe:	|                              move.l 98(sp),d0
   13402:	|                              move.l 94(sp),d1
   13406:	|                              jsr -684(a6)
   1340a:	|                              move.l d0,90(sp)
   1340e:	|                              move.l 90(sp),d0
   13412:	|                              movea.l 18d20 <currentFloor>,a0
   13418:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   1341c:	|                              movea.l 18d20 <currentFloor>,a0
   13422:	|                              move.l 4(a0),d0
   13426:	|                          /-- bne.s 1343c <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   13428:	|                          |   pea 1634c <custom.c.36a9b171+0x1752>
   1342e:	|                          |   jsr 13a4a <KPrintF>
   13434:	|                          |   addq.l #4,sp
		return FALSE;
   13436:	|                          |   clr.w d0
   13438:	+--------------------------|-- bra.w 13964 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   1343c:	|                          \-> clr.l 132(sp)
   13440:	|                          /-- bra.s 13494 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   13442:	|                       /--|-> move.l 18ba8 <bigDataFile>,d1
   13448:	|                       |  |   movea.l 18d20 <currentFloor>,a0
   1344e:	|                       |  |   movea.l 4(a0),a0
   13452:	|                       |  |   move.l 132(sp),d0
   13456:	|                       |  |   lsl.l #3,d0
   13458:	|                       |  |   lea (0,a0,d0.l),a2
   1345c:	|                       |  |   move.l d1,-(sp)
   1345e:	|                       |  |   jsr 6bc <get2bytes>
   13464:	|                       |  |   addq.l #4,sp
   13466:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   13468:	|                       |  |   move.l 18ba8 <bigDataFile>,d1
   1346e:	|                       |  |   movea.l 18d20 <currentFloor>,a0
   13474:	|                       |  |   movea.l 4(a0),a0
   13478:	|                       |  |   move.l 132(sp),d0
   1347c:	|                       |  |   lsl.l #3,d0
   1347e:	|                       |  |   lea (0,a0,d0.l),a2
   13482:	|                       |  |   move.l d1,-(sp)
   13484:	|                       |  |   jsr 6bc <get2bytes>
   1348a:	|                       |  |   addq.l #4,sp
   1348c:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   13490:	|                       |  |   addq.l #1,132(sp)
   13494:	|                       |  \-> move.l 132(sp),d0
   13498:	|                       |      cmp.l 136(sp),d0
   1349c:	|                       \----- blt.s 13442 <setFloor+0x24e>
	}

	finishAccess ();
   1349e:	|                              jsr 444e <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   134a4:	|                              movea.l 18d20 <currentFloor>,a0
   134aa:	|                              move.l 8(a0),d0
   134ae:	|                              add.l d0,d0
   134b0:	|                              add.l d0,d0
   134b2:	|                              move.l d0,86(sp)
   134b6:	|                              clr.l 82(sp)
   134ba:	|                              move.l 18bc0 <SysBase>,d0
   134c0:	|                              movea.l d0,a6
   134c2:	|                              move.l 86(sp),d0
   134c6:	|                              move.l 82(sp),d1
   134ca:	|                              jsr -684(a6)
   134ce:	|                              move.l d0,78(sp)
   134d2:	|                              move.l 78(sp),d0
   134d6:	|                              movea.l 18d20 <currentFloor>,a0
   134dc:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   134e0:	|                              movea.l 18d20 <currentFloor>,a0
   134e6:	|                              move.l 8(a0),d0
   134ea:	|                              add.l d0,d0
   134ec:	|                              add.l d0,d0
   134ee:	|                              move.l d0,74(sp)
   134f2:	|                              clr.l 70(sp)
   134f6:	|                              move.l 18bc0 <SysBase>,d0
   134fc:	|                              movea.l d0,a6
   134fe:	|                              move.l 74(sp),d0
   13502:	|                              move.l 70(sp),d1
   13506:	|                              jsr -684(a6)
   1350a:	|                              move.l d0,66(sp)
   1350e:	|                              move.l 66(sp),d0
   13512:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   13516:	|                              movea.l 18d20 <currentFloor>,a0
   1351c:	|                              move.l 16(a0),d0
   13520:	|                          /-- bne.s 13536 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   13522:	|                          |   pea 1634c <custom.c.36a9b171+0x1752>
   13528:	|                          |   jsr 13a4a <KPrintF>
   1352e:	|                          |   addq.l #4,sp
		return FALSE;
   13530:	|                          |   clr.w d0
   13532:	+--------------------------|-- bra.w 13964 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   13536:	|                          \-> clr.l 136(sp)
   1353a:	|                    /-------- bra.w 1365e <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   1353e:	|                 /--|-------> movea.l 18d20 <currentFloor>,a0
   13544:	|                 |  |         move.l 8(a0),d0
   13548:	|                 |  |         add.l d0,d0
   1354a:	|                 |  |         add.l d0,d0
   1354c:	|                 |  |         move.l d0,50(sp)
   13550:	|                 |  |         clr.l 46(sp)
   13554:	|                 |  |         move.l 18bc0 <SysBase>,d0
   1355a:	|                 |  |         movea.l d0,a6
   1355c:	|                 |  |         move.l 50(sp),d0
   13560:	|                 |  |         move.l 46(sp),d1
   13564:	|                 |  |         jsr -684(a6)
   13568:	|                 |  |         move.l d0,42(sp)
   1356c:	|                 |  |         move.l 42(sp),d0
   13570:	|                 |  |         movea.l 18d20 <currentFloor>,a0
   13576:	|                 |  |         movea.l 16(a0),a0
   1357a:	|                 |  |         move.l 136(sp),d1
   1357e:	|                 |  |         add.l d1,d1
   13580:	|                 |  |         add.l d1,d1
   13582:	|                 |  |         adda.l d1,a0
   13584:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   13586:	|                 |  |         movea.l 18d20 <currentFloor>,a0
   1358c:	|                 |  |         move.l 8(a0),d0
   13590:	|                 |  |         add.l d0,d0
   13592:	|                 |  |         add.l d0,d0
   13594:	|                 |  |         move.l d0,38(sp)
   13598:	|                 |  |         clr.l 34(sp)
   1359c:	|                 |  |         move.l 18bc0 <SysBase>,d0
   135a2:	|                 |  |         movea.l d0,a6
   135a4:	|                 |  |         move.l 38(sp),d0
   135a8:	|                 |  |         move.l 34(sp),d1
   135ac:	|                 |  |         jsr -684(a6)
   135b0:	|                 |  |         move.l d0,30(sp)
   135b4:	|                 |  |         move.l 30(sp),d1
   135b8:	|                 |  |         move.l 136(sp),d0
   135bc:	|                 |  |         add.l d0,d0
   135be:	|                 |  |         add.l d0,d0
   135c0:	|                 |  |         movea.l 62(sp),a0
   135c4:	|                 |  |         adda.l d0,a0
   135c6:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   135c8:	|                 |  |         movea.l 18d20 <currentFloor>,a0
   135ce:	|                 |  |         move.l 16(a0),d1
   135d2:	|                 |  |         move.l 136(sp),d0
   135d6:	|                 |  |         add.l d0,d0
   135d8:	|                 |  |         add.l d0,d0
   135da:	|                 |  |         movea.l d1,a0
   135dc:	|                 |  |         adda.l d0,a0
   135de:	|                 |  |         move.l (a0),d0
   135e0:	|                 |  |     /-- bne.s 135f6 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   135e2:	|                 |  |     |   pea 1634c <custom.c.36a9b171+0x1752>
   135e8:	|                 |  |     |   jsr 13a4a <KPrintF>
   135ee:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   135f0:	|                 |  |     |   clr.w d0
   135f2:	+-----------------|--|-----|-- bra.w 13964 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   135f6:	|                 |  |     \-> clr.l 132(sp)
   135fa:	|                 |  |     /-- bra.s 1364a <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   135fc:	|                 |  |  /--|-> movea.l 18d20 <currentFloor>,a0
   13602:	|                 |  |  |  |   move.l 16(a0),d1
   13606:	|                 |  |  |  |   move.l 136(sp),d0
   1360a:	|                 |  |  |  |   add.l d0,d0
   1360c:	|                 |  |  |  |   add.l d0,d0
   1360e:	|                 |  |  |  |   movea.l d1,a0
   13610:	|                 |  |  |  |   adda.l d0,a0
   13612:	|                 |  |  |  |   move.l (a0),d1
   13614:	|                 |  |  |  |   move.l 132(sp),d0
   13618:	|                 |  |  |  |   add.l d0,d0
   1361a:	|                 |  |  |  |   add.l d0,d0
   1361c:	|                 |  |  |  |   movea.l d1,a0
   1361e:	|                 |  |  |  |   adda.l d0,a0
   13620:	|                 |  |  |  |   moveq #-1,d1
   13622:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   13624:	|                 |  |  |  |   move.l 136(sp),d0
   13628:	|                 |  |  |  |   add.l d0,d0
   1362a:	|                 |  |  |  |   add.l d0,d0
   1362c:	|                 |  |  |  |   movea.l 62(sp),a0
   13630:	|                 |  |  |  |   adda.l d0,a0
   13632:	|                 |  |  |  |   move.l (a0),d1
   13634:	|                 |  |  |  |   move.l 132(sp),d0
   13638:	|                 |  |  |  |   add.l d0,d0
   1363a:	|                 |  |  |  |   add.l d0,d0
   1363c:	|                 |  |  |  |   movea.l d1,a0
   1363e:	|                 |  |  |  |   adda.l d0,a0
   13640:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   13646:	|                 |  |  |  |   addq.l #1,132(sp)
   1364a:	|                 |  |  |  \-> movea.l 18d20 <currentFloor>,a0
   13650:	|                 |  |  |      move.l 8(a0),d0
   13654:	|                 |  |  |      cmp.l 132(sp),d0
   13658:	|                 |  |  \----- bgt.s 135fc <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1365a:	|                 |  |         addq.l #1,136(sp)
   1365e:	|                 |  \-------> movea.l 18d20 <currentFloor>,a0
   13664:	|                 |            move.l 8(a0),d0
   13668:	|                 |            cmp.l 136(sp),d0
   1366c:	|                 \----------- bgt.w 1353e <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   13670:	|                              clr.l 136(sp)
   13674:	|              /-------------- bra.w 1377a <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   13678:	|           /--|-------------> clr.l 132(sp)
   1367c:	|           |  |     /-------- bra.w 13764 <setFloor+0x570>
			if (i != j) {
   13680:	|           |  |  /--|-------> move.l 136(sp),d0
   13684:	|           |  |  |  |         cmp.l 132(sp),d0
   13688:	|           |  |  |  |     /-- beq.w 1371a <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   1368c:	|           |  |  |  |     |   movea.l 18d20 <currentFloor>,a0
   13692:	|           |  |  |  |     |   move.l 12(a0),d1
   13696:	|           |  |  |  |     |   move.l 132(sp),d0
   1369a:	|           |  |  |  |     |   lsl.l #3,d0
   1369c:	|           |  |  |  |     |   movea.l d1,a1
   1369e:	|           |  |  |  |     |   adda.l d0,a1
   136a0:	|           |  |  |  |     |   movea.l 18d20 <currentFloor>,a0
   136a6:	|           |  |  |  |     |   move.l 12(a0),d1
   136aa:	|           |  |  |  |     |   move.l 136(sp),d0
   136ae:	|           |  |  |  |     |   lsl.l #3,d0
   136b0:	|           |  |  |  |     |   movea.l d1,a0
   136b2:	|           |  |  |  |     |   adda.l d0,a0
   136b4:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   136b8:	|           |  |  |  |     |   move.l (a1),-(sp)
   136ba:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   136be:	|           |  |  |  |     |   move.l (a0),-(sp)
   136c0:	|           |  |  |  |     |   jsr 12f4c <polysShareSide>
   136c6:	|           |  |  |  |     |   lea 16(sp),sp
   136ca:	|           |  |  |  |     |   tst.w d0
   136cc:	|           |  |  |  |  /--|-- beq.w 13760 <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   136d0:	|           |  |  |  |  |  |   movea.l 18d20 <currentFloor>,a0
   136d6:	|           |  |  |  |  |  |   move.l 16(a0),d1
   136da:	|           |  |  |  |  |  |   move.l 136(sp),d0
   136de:	|           |  |  |  |  |  |   add.l d0,d0
   136e0:	|           |  |  |  |  |  |   add.l d0,d0
   136e2:	|           |  |  |  |  |  |   movea.l d1,a0
   136e4:	|           |  |  |  |  |  |   adda.l d0,a0
   136e6:	|           |  |  |  |  |  |   move.l (a0),d1
   136e8:	|           |  |  |  |  |  |   move.l 132(sp),d0
   136ec:	|           |  |  |  |  |  |   add.l d0,d0
   136ee:	|           |  |  |  |  |  |   add.l d0,d0
   136f0:	|           |  |  |  |  |  |   movea.l d1,a0
   136f2:	|           |  |  |  |  |  |   adda.l d0,a0
   136f4:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   136f8:	|           |  |  |  |  |  |   move.l 136(sp),d0
   136fc:	|           |  |  |  |  |  |   add.l d0,d0
   136fe:	|           |  |  |  |  |  |   add.l d0,d0
   13700:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   13704:	|           |  |  |  |  |  |   adda.l d0,a0
   13706:	|           |  |  |  |  |  |   move.l (a0),d1
   13708:	|           |  |  |  |  |  |   move.l 132(sp),d0
   1370c:	|           |  |  |  |  |  |   add.l d0,d0
   1370e:	|           |  |  |  |  |  |   add.l d0,d0
   13710:	|           |  |  |  |  |  |   movea.l d1,a0
   13712:	|           |  |  |  |  |  |   adda.l d0,a0
   13714:	|           |  |  |  |  |  |   moveq #1,d1
   13716:	|           |  |  |  |  |  |   move.l d1,(a0)
   13718:	|           |  |  |  |  +--|-- bra.s 13760 <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   1371a:	|           |  |  |  |  |  \-> movea.l 18d20 <currentFloor>,a0
   13720:	|           |  |  |  |  |      move.l 16(a0),d1
   13724:	|           |  |  |  |  |      move.l 136(sp),d0
   13728:	|           |  |  |  |  |      add.l d0,d0
   1372a:	|           |  |  |  |  |      add.l d0,d0
   1372c:	|           |  |  |  |  |      movea.l d1,a0
   1372e:	|           |  |  |  |  |      adda.l d0,a0
   13730:	|           |  |  |  |  |      move.l (a0),d1
   13732:	|           |  |  |  |  |      move.l 132(sp),d0
   13736:	|           |  |  |  |  |      add.l d0,d0
   13738:	|           |  |  |  |  |      add.l d0,d0
   1373a:	|           |  |  |  |  |      movea.l d1,a0
   1373c:	|           |  |  |  |  |      adda.l d0,a0
   1373e:	|           |  |  |  |  |      moveq #-2,d0
   13740:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   13742:	|           |  |  |  |  |      move.l 136(sp),d0
   13746:	|           |  |  |  |  |      add.l d0,d0
   13748:	|           |  |  |  |  |      add.l d0,d0
   1374a:	|           |  |  |  |  |      movea.l 62(sp),a0
   1374e:	|           |  |  |  |  |      adda.l d0,a0
   13750:	|           |  |  |  |  |      move.l (a0),d1
   13752:	|           |  |  |  |  |      move.l 132(sp),d0
   13756:	|           |  |  |  |  |      add.l d0,d0
   13758:	|           |  |  |  |  |      add.l d0,d0
   1375a:	|           |  |  |  |  |      movea.l d1,a0
   1375c:	|           |  |  |  |  |      adda.l d0,a0
   1375e:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   13760:	|           |  |  |  |  \----> addq.l #1,132(sp)
   13764:	|           |  |  |  \-------> movea.l 18d20 <currentFloor>,a0
   1376a:	|           |  |  |            move.l 8(a0),d0
   1376e:	|           |  |  |            cmp.l 132(sp),d0
   13772:	|           |  |  \----------- bgt.w 13680 <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   13776:	|           |  |               addq.l #1,136(sp)
   1377a:	|           |  \-------------> movea.l 18d20 <currentFloor>,a0
   13780:	|           |                  move.l 8(a0),d0
   13784:	|           |                  cmp.l 136(sp),d0
   13788:	|           \----------------- bgt.w 13678 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   1378c:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   13790:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   13794:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   13798:	|  |                           clr.l 136(sp)
   1379c:	|  |     /-------------------- bra.w 138f2 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   137a0:	|  |  /--|-------------------> clr.l 132(sp)
   137a4:	|  |  |  |     /-------------- bra.w 138dc <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   137a8:	|  |  |  |  /--|-------------> movea.l 18d20 <currentFloor>,a0
   137ae:	|  |  |  |  |  |               move.l 16(a0),d1
   137b2:	|  |  |  |  |  |               move.l 136(sp),d0
   137b6:	|  |  |  |  |  |               add.l d0,d0
   137b8:	|  |  |  |  |  |               add.l d0,d0
   137ba:	|  |  |  |  |  |               movea.l d1,a0
   137bc:	|  |  |  |  |  |               adda.l d0,a0
   137be:	|  |  |  |  |  |               move.l (a0),d1
   137c0:	|  |  |  |  |  |               move.l 132(sp),d0
   137c4:	|  |  |  |  |  |               add.l d0,d0
   137c6:	|  |  |  |  |  |               add.l d0,d0
   137c8:	|  |  |  |  |  |               movea.l d1,a0
   137ca:	|  |  |  |  |  |               adda.l d0,a0
   137cc:	|  |  |  |  |  |               move.l (a0),d0
   137ce:	|  |  |  |  |  |               moveq #-1,d1
   137d0:	|  |  |  |  |  |               cmp.l d0,d1
   137d2:	|  |  |  |  |  |  /----------- bne.w 138d8 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   137d6:	|  |  |  |  |  |  |            clr.l 122(sp)
   137da:	|  |  |  |  |  |  |     /----- bra.w 138c6 <setFloor+0x6d2>
						if (d != i && d != j) {
   137de:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   137e2:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   137e6:	|  |  |  |  |  |  |  |  |  /-- beq.w 138c2 <setFloor+0x6ce>
   137ea:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   137ee:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   137f2:	|  |  |  |  |  |  |  |  |  +-- beq.w 138c2 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   137f6:	|  |  |  |  |  |  |  |  |  |   movea.l 18d20 <currentFloor>,a0
   137fc:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   13800:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   13804:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13806:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13808:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1380a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1380c:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1380e:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   13812:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13814:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13816:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   13818:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1381a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   1381c:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   13820:	|  |  |  |  |  |  |  |  |  +-- bne.w 138c2 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   13824:	|  |  |  |  |  |  |  |  |  |   movea.l 18d20 <currentFloor>,a0
   1382a:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   1382e:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   13832:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13834:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13836:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   13838:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1383a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1383c:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   13840:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13842:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13844:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   13846:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   13848:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   1384a:	|  |  |  |  |  |  |  |  |  +-- bmi.s 138c2 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   1384c:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   13850:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13852:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13854:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   13858:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1385a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1385c:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   13860:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13862:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13864:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   13866:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   13868:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   1386a:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   1386e:	|  |  |  |  |  |  |  |  |  +-- bgt.s 138c2 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   13870:	|  |  |  |  |  |  |  |  |  |   movea.l 18d20 <currentFloor>,a0
   13876:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   1387a:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   1387e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13880:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13882:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   13884:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   13886:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   13888:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1388c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1388e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13890:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   13892:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   13894:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   13898:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   1389c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1389e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   138a0:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   138a4:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   138a6:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   138a8:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   138ac:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   138ae:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   138b0:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   138b2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   138b4:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   138b8:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   138ba:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   138bc:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   138c2:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   138c6:	|  |  |  |  |  |  |  |  \----> movea.l 18d20 <currentFloor>,a0
   138cc:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   138d0:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   138d4:	|  |  |  |  |  |  |  \-------- bgt.w 137de <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   138d8:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   138dc:	|  |  |  |  |  \-------------> movea.l 18d20 <currentFloor>,a0
   138e2:	|  |  |  |  |                  move.l 8(a0),d0
   138e6:	|  |  |  |  |                  cmp.l 132(sp),d0
   138ea:	|  |  |  |  \----------------- bgt.w 137a8 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   138ee:	|  |  |  |                     addq.l #1,136(sp)
   138f2:	|  |  |  \-------------------> movea.l 18d20 <currentFloor>,a0
   138f8:	|  |  |                        move.l 8(a0),d0
   138fc:	|  |  |                        cmp.l 136(sp),d0
   13900:	|  |  \----------------------- bgt.w 137a0 <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   13904:	|  |                           tst.w 130(sp)
   13908:	|  \-------------------------- bne.w 13790 <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1390c:	|                              clr.l 136(sp)
   13910:	|                          /-- bra.s 13938 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   13912:	|                       /--|-> move.l 136(sp),d0
   13916:	|                       |  |   add.l d0,d0
   13918:	|                       |  |   add.l d0,d0
   1391a:	|                       |  |   movea.l 62(sp),a0
   1391e:	|                       |  |   adda.l d0,a0
   13920:	|                       |  |   move.l (a0),54(sp)
   13924:	|                       |  |   move.l 18bc0 <SysBase>,d0
   1392a:	|                       |  |   movea.l d0,a6
   1392c:	|                       |  |   movea.l 54(sp),a1
   13930:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   13934:	|                       |  |   addq.l #1,136(sp)
   13938:	|                       |  \-> movea.l 18d20 <currentFloor>,a0
   1393e:	|                       |      move.l 8(a0),d0
   13942:	|                       |      cmp.l 136(sp),d0
   13946:	|                       \----- bgt.s 13912 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   13948:	|                              move.l 62(sp),58(sp)
   1394e:	|                              move.l 18bc0 <SysBase>,d0
   13954:	|                              movea.l d0,a6
   13956:	|                              movea.l 58(sp),a1
   1395a:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   1395e:	|                              clr.l 62(sp)

	return TRUE;
   13962:	|                              moveq #1,d0
}
   13964:	\----------------------------> movea.l (sp)+,a2
   13966:	                               movea.l (sp)+,a6
   13968:	                               lea 132(sp),sp
   1396c:	                               rts

0001396e <setFloorNull>:

void setFloorNull () {
	killFloor ();
   1396e:	jsr 12e5c <killFloor>
	noFloor ();
   13974:	jsr 12d80 <noFloor>
   1397a:	nop
   1397c:	rts

0001397e <WaitVbl>:
void WaitVbl() {
   1397e:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   13980:	   /-> movea.l #14675972,a0
   13986:	   |   move.l (a0),d0
   13988:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   1398a:	   |   move.l (sp),d0
   1398c:	   |   andi.l #130816,d0
   13992:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   13994:	   |   move.l (sp),d0
   13996:	   |   cmpi.l #76800,d0
   1399c:	   \-- beq.s 13980 <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   1399e:	/----> movea.l #14675972,a0
   139a4:	|      move.l (a0),d0
   139a6:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   139aa:	|      move.l 4(sp),d0
   139ae:	|      andi.l #130816,d0
   139b4:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   139b8:	|      move.l 4(sp),d0
   139bc:	|      cmpi.l #76800,d0
   139c2:	|  /-- beq.s 139c6 <WaitVbl+0x48>
	while (1) {
   139c4:	\--|-- bra.s 1399e <WaitVbl+0x20>
			break;
   139c6:	   \-> nop
}
   139c8:	       nop
   139ca:	       addq.l #8,sp
   139cc:	       rts

000139ce <memset>:
void* memset(void *dest, int val, unsigned long len) {
   139ce:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   139d0:	       move.l 8(sp),(sp)
	while(len-- > 0)
   139d4:	   /-- bra.s 139e6 <memset+0x18>
		*ptr++ = val;
   139d6:	/--|-> move.l (sp),d0
   139d8:	|  |   move.l d0,d1
   139da:	|  |   addq.l #1,d1
   139dc:	|  |   move.l d1,(sp)
   139de:	|  |   move.l 12(sp),d1
   139e2:	|  |   movea.l d0,a0
   139e4:	|  |   move.b d1,(a0)
	while(len-- > 0)
   139e6:	|  \-> move.l 16(sp),d0
   139ea:	|      move.l d0,d1
   139ec:	|      subq.l #1,d1
   139ee:	|      move.l d1,16(sp)
   139f2:	|      tst.l d0
   139f4:	\----- bne.s 139d6 <memset+0x8>
	return dest;
   139f6:	       move.l 8(sp),d0
}
   139fa:	       addq.l #4,sp
   139fc:	       rts

000139fe <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   139fe:	       subq.l #8,sp
   13a00:	       move.l d2,-(sp)
	char *d = (char *)dest;
   13a02:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   13a08:	       move.l 20(sp),4(sp)
	while(len--)
   13a0e:	   /-- bra.s 13a30 <memcpy+0x32>
		*d++ = *s++;
   13a10:	/--|-> move.l 4(sp),d1
   13a14:	|  |   move.l d1,d0
   13a16:	|  |   addq.l #1,d0
   13a18:	|  |   move.l d0,4(sp)
   13a1c:	|  |   move.l 8(sp),d0
   13a20:	|  |   move.l d0,d2
   13a22:	|  |   addq.l #1,d2
   13a24:	|  |   move.l d2,8(sp)
   13a28:	|  |   movea.l d1,a0
   13a2a:	|  |   move.b (a0),d1
   13a2c:	|  |   movea.l d0,a0
   13a2e:	|  |   move.b d1,(a0)
	while(len--)
   13a30:	|  \-> move.l 24(sp),d0
   13a34:	|      move.l d0,d1
   13a36:	|      subq.l #1,d1
   13a38:	|      move.l d1,24(sp)
   13a3c:	|      tst.l d0
   13a3e:	\----- bne.s 13a10 <memcpy+0x12>
	return dest;
   13a40:	       move.l 16(sp),d0
}
   13a44:	       move.l (sp)+,d2
   13a46:	       addq.l #8,sp
   13a48:	       rts

00013a4a <KPrintF>:
void KPrintF(const char* fmt, ...) {
   13a4a:	       lea -128(sp),sp
   13a4e:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   13a52:	       move.w f0ff60 <gcc8_c_support.c.cce2f5c3+0xecd300>,d0
   13a58:	       cmpi.w #20153,d0
   13a5c:	   /-- beq.s 13a80 <KPrintF+0x36>
   13a5e:	   |   cmpi.w #-24562,d0
   13a62:	   +-- beq.s 13a80 <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   13a64:	   |   movea.l 18bc0 <SysBase>,a6
   13a6a:	   |   movea.l 144(sp),a0
   13a6e:	   |   lea 148(sp),a1
   13a72:	   |   lea 1438c <KPutCharX>,a2
   13a78:	   |   suba.l a3,a3
   13a7a:	   |   jsr -522(a6)
}
   13a7e:	/--|-- bra.s 13aaa <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   13a80:	|  \-> movea.l 18bc0 <SysBase>,a6
   13a86:	|      movea.l 144(sp),a0
   13a8a:	|      lea 148(sp),a1
   13a8e:	|      lea 1439a <PutChar>,a2
   13a94:	|      lea 12(sp),a3
   13a98:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   13a9c:	|      move.l a3,-(sp)
   13a9e:	|      pea 56 <_start+0x56>
   13aa2:	|      jsr f0ff60 <gcc8_c_support.c.cce2f5c3+0xecd300>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   13aa8:	|      addq.l #8,sp
}
   13aaa:	\----> movem.l (sp)+,a2-a3/a6
   13aae:	       lea 128(sp),sp
   13ab2:	       rts

00013ab4 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   13ab4:	lea -12(sp),sp
   13ab8:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   13aba:	move.l 20(sp),12(sp)
   13ac0:	move.l 24(sp),8(sp)
   13ac6:	move.l 18bd0 <MathIeeeSingBasBase>,d0
   13acc:	movea.l d0,a6
   13ace:	move.l 12(sp),d0
   13ad2:	move.l 8(sp),d1
   13ad6:	jsr -66(a6)
   13ada:	move.l d0,4(sp)
   13ade:	move.l 4(sp),d0
}
   13ae2:	movea.l (sp)+,a6
   13ae4:	lea 12(sp),sp
   13ae8:	rts

00013aea <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   13aea:	lea -32(sp),sp
   13aee:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   13af2:	move.l 48(sp),36(sp)
   13af8:	move.l 52(sp),40(sp)
   13afe:	move.l 56(sp),28(sp)
   13b04:	move.l 60(sp),32(sp)
   13b0a:	move.l 18bd8 <MathIeeeDoubBasBase>,d0
   13b10:	movea.l d0,a6
   13b12:	move.l 36(sp),d0
   13b16:	move.l 40(sp),d1
   13b1a:	move.l 28(sp),d2
   13b1e:	move.l 32(sp),d3
   13b22:	jsr -66(a6)
   13b26:	move.l d0,12(sp)
   13b2a:	move.l d1,16(sp)
   13b2e:	move.l 12(sp),20(sp)
   13b34:	move.l 16(sp),24(sp)
   13b3a:	move.l 20(sp),d0
   13b3e:	move.l 24(sp),d1
}
   13b42:	movem.l (sp)+,d2-d3/a6
   13b46:	lea 32(sp),sp
   13b4a:	rts

00013b4c <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   13b4c:	lea -32(sp),sp
   13b50:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   13b54:	move.l 48(sp),36(sp)
   13b5a:	move.l 52(sp),40(sp)
   13b60:	move.l 56(sp),28(sp)
   13b66:	move.l 60(sp),32(sp)
   13b6c:	move.l 18bd8 <MathIeeeDoubBasBase>,d0
   13b72:	movea.l d0,a6
   13b74:	move.l 36(sp),d0
   13b78:	move.l 40(sp),d1
   13b7c:	move.l 28(sp),d2
   13b80:	move.l 32(sp),d3
   13b84:	jsr -84(a6)
   13b88:	move.l d0,12(sp)
   13b8c:	move.l d1,16(sp)
   13b90:	move.l 12(sp),20(sp)
   13b96:	move.l 16(sp),24(sp)
   13b9c:	move.l 20(sp),d0
   13ba0:	move.l 24(sp),d1
}
   13ba4:	movem.l (sp)+,d2-d3/a6
   13ba8:	lea 32(sp),sp
   13bac:	rts

00013bae <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   13bae:	lea -12(sp),sp
   13bb2:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   13bb4:	move.l 20(sp),12(sp)
   13bba:	move.l 24(sp),8(sp)
   13bc0:	move.l 18bd0 <MathIeeeSingBasBase>,d0
   13bc6:	movea.l d0,a6
   13bc8:	move.l 12(sp),d0
   13bcc:	move.l 8(sp),d1
   13bd0:	jsr -84(a6)
   13bd4:	move.l d0,4(sp)
   13bd8:	move.l 4(sp),d0
}
   13bdc:	movea.l (sp)+,a6
   13bde:	lea 12(sp),sp
   13be2:	rts

00013be4 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   13be4:	lea -12(sp),sp
   13be8:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   13bea:	move.l 20(sp),12(sp)
   13bf0:	move.l 24(sp),8(sp)
   13bf6:	move.l 18bd0 <MathIeeeSingBasBase>,d0
   13bfc:	movea.l d0,a6
   13bfe:	move.l 12(sp),d0
   13c02:	move.l 8(sp),d1
   13c06:	jsr -42(a6)
   13c0a:	move.l d0,4(sp)
   13c0e:	move.l 4(sp),d0
}
   13c12:	movea.l (sp)+,a6
   13c14:	lea 12(sp),sp
   13c18:	rts

00013c1a <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   13c1a:	lea -20(sp),sp
   13c1e:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   13c20:	move.l 28(sp),20(sp)
   13c26:	move.l 18bdc <MathIeeeDoubTransBase>,d0
   13c2c:	movea.l d0,a6
   13c2e:	move.l 20(sp),d0
   13c32:	jsr -108(a6)
   13c36:	move.l d0,4(sp)
   13c3a:	move.l d1,8(sp)
   13c3e:	move.l 4(sp),12(sp)
   13c44:	move.l 8(sp),16(sp)
   13c4a:	move.l 12(sp),d0
   13c4e:	move.l 16(sp),d1
}
   13c52:	movea.l (sp)+,a6
   13c54:	lea 20(sp),sp
   13c58:	rts

00013c5a <__fixdfsi>:

DOUBLE __fixdfsi(DOUBLE value) {
   13c5a:	lea -12(sp),sp
   13c5e:	move.l a6,-(sp)
	return IEEEDPFix(value);
   13c60:	move.l 20(sp),8(sp)
   13c66:	move.l 24(sp),12(sp)
   13c6c:	move.l 18bd8 <MathIeeeDoubBasBase>,d0
   13c72:	movea.l d0,a6
   13c74:	move.l 8(sp),d0
   13c78:	move.l 12(sp),d1
   13c7c:	jsr -30(a6)
   13c80:	move.l d0,4(sp)
   13c84:	move.l 4(sp),d0
   13c88:	move.l d0,-(sp)
   13c8a:	jsr 13cc2 <__floatsidf>
   13c90:	addq.l #4,sp
}
   13c92:	movea.l (sp)+,a6
   13c94:	lea 12(sp),sp
   13c98:	rts

00013c9a <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   13c9a:	subq.l #8,sp
   13c9c:	move.l a6,-(sp)
	return IEEESPFix(value);
   13c9e:	move.l 16(sp),8(sp)
   13ca4:	move.l 18bd0 <MathIeeeSingBasBase>,d0
   13caa:	movea.l d0,a6
   13cac:	move.l 8(sp),d0
   13cb0:	jsr -30(a6)
   13cb4:	move.l d0,4(sp)
   13cb8:	move.l 4(sp),d0
}
   13cbc:	movea.l (sp)+,a6
   13cbe:	addq.l #8,sp
   13cc0:	rts

00013cc2 <__floatsidf>:


DOUBLE __floatsidf (int i) {
   13cc2:	lea -20(sp),sp
   13cc6:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   13cc8:	move.l 28(sp),20(sp)
   13cce:	move.l 18bd8 <MathIeeeDoubBasBase>,d0
   13cd4:	movea.l d0,a6
   13cd6:	move.l 20(sp),d0
   13cda:	jsr -36(a6)
   13cde:	move.l d0,4(sp)
   13ce2:	move.l d1,8(sp)
   13ce6:	move.l 4(sp),12(sp)
   13cec:	move.l 8(sp),16(sp)
   13cf2:	move.l 12(sp),d0
   13cf6:	move.l 16(sp),d1
}
   13cfa:	movea.l (sp)+,a6
   13cfc:	lea 20(sp),sp
   13d00:	rts

00013d02 <__floatsisf>:

FLOAT __floatsisf(int i) {
   13d02:	subq.l #8,sp
   13d04:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   13d06:	move.l 16(sp),8(sp)
   13d0c:	move.l 18bd0 <MathIeeeSingBasBase>,d0
   13d12:	movea.l d0,a6
   13d14:	move.l 8(sp),d0
   13d18:	jsr -36(a6)
   13d1c:	move.l d0,4(sp)
   13d20:	move.l 4(sp),d0
}
   13d24:	movea.l (sp)+,a6
   13d26:	addq.l #8,sp
   13d28:	rts

00013d2a <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   13d2a:	subq.l #8,sp
   13d2c:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   13d2e:	move.l 16(sp),8(sp)
   13d34:	move.l 18bd0 <MathIeeeSingBasBase>,d0
   13d3a:	movea.l d0,a6
   13d3c:	move.l 8(sp),d0
   13d40:	jsr -36(a6)
   13d44:	move.l d0,4(sp)
   13d48:	move.l 4(sp),d0
}
   13d4c:	movea.l (sp)+,a6
   13d4e:	addq.l #8,sp
   13d50:	rts

00013d52 <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   13d52:	lea -32(sp),sp
   13d56:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   13d5a:	move.l 48(sp),36(sp)
   13d60:	move.l 52(sp),40(sp)
   13d66:	move.l 56(sp),28(sp)
   13d6c:	move.l 60(sp),32(sp)
   13d72:	move.l 18bd8 <MathIeeeDoubBasBase>,d0
   13d78:	movea.l d0,a6
   13d7a:	move.l 36(sp),d0
   13d7e:	move.l 40(sp),d1
   13d82:	move.l 28(sp),d2
   13d86:	move.l 32(sp),d3
   13d8a:	jsr -78(a6)
   13d8e:	move.l d0,12(sp)
   13d92:	move.l d1,16(sp)
   13d96:	move.l 12(sp),20(sp)
   13d9c:	move.l 16(sp),24(sp)
   13da2:	move.l 20(sp),d0
   13da6:	move.l 24(sp),d1
}
   13daa:	movem.l (sp)+,d2-d3/a6
   13dae:	lea 32(sp),sp
   13db2:	rts

00013db4 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   13db4:	lea -12(sp),sp
   13db8:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   13dba:	move.l 20(sp),12(sp)
   13dc0:	move.l 24(sp),8(sp)
   13dc6:	move.l 18bd0 <MathIeeeSingBasBase>,d0
   13dcc:	movea.l d0,a6
   13dce:	move.l 12(sp),d0
   13dd2:	move.l 8(sp),d1
   13dd6:	jsr -78(a6)
   13dda:	move.l d0,4(sp)
   13dde:	move.l 4(sp),d0
}
   13de2:	movea.l (sp)+,a6
   13de4:	lea 12(sp),sp
   13de8:	rts

00013dea <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   13dea:	lea -12(sp),sp
   13dee:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   13df0:	move.l 20(sp),12(sp)
   13df6:	move.l 24(sp),8(sp)
   13dfc:	move.l 18bd0 <MathIeeeSingBasBase>,d0
   13e02:	movea.l d0,a6
   13e04:	move.l 12(sp),d0
   13e08:	move.l 8(sp),d1
   13e0c:	jsr -42(a6)
   13e10:	move.l d0,4(sp)
   13e14:	move.l 4(sp),d0
}
   13e18:	movea.l (sp)+,a6
   13e1a:	lea 12(sp),sp
   13e1e:	rts

00013e20 <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   13e20:	lea -20(sp),sp
   13e24:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   13e28:	move.l 36(sp),24(sp)
   13e2e:	move.l 40(sp),28(sp)
   13e34:	move.l 44(sp),16(sp)
   13e3a:	move.l 48(sp),20(sp)
   13e40:	move.l 18bd8 <MathIeeeDoubBasBase>,d0
   13e46:	movea.l d0,a6
   13e48:	move.l 24(sp),d0
   13e4c:	move.l 28(sp),d1
   13e50:	move.l 16(sp),d2
   13e54:	move.l 20(sp),d3
   13e58:	jsr -42(a6)
   13e5c:	move.l d0,12(sp)
   13e60:	move.l 12(sp),d0
}
   13e64:	movem.l (sp)+,d2-d3/a6
   13e68:	lea 20(sp),sp
   13e6c:	rts

00013e6e <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   13e6e:	lea -12(sp),sp
   13e72:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   13e74:	move.l 20(sp),12(sp)
   13e7a:	move.l 24(sp),8(sp)
   13e80:	move.l 18bd0 <MathIeeeSingBasBase>,d0
   13e86:	movea.l d0,a6
   13e88:	move.l 12(sp),d0
   13e8c:	move.l 8(sp),d1
   13e90:	jsr -42(a6)
   13e94:	move.l d0,4(sp)
   13e98:	move.l 4(sp),d0
}
   13e9c:	movea.l (sp)+,a6
   13e9e:	lea 12(sp),sp
   13ea2:	rts

00013ea4 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   13ea4:	lea -12(sp),sp
   13ea8:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   13eaa:	move.l 20(sp),12(sp)
   13eb0:	move.l 24(sp),8(sp)
   13eb6:	move.l 18bd0 <MathIeeeSingBasBase>,d0
   13ebc:	movea.l d0,a6
   13ebe:	move.l 12(sp),d0
   13ec2:	move.l 8(sp),d1
   13ec6:	jsr -42(a6)
   13eca:	move.l d0,4(sp)
   13ece:	move.l 4(sp),d0
}
   13ed2:	movea.l (sp)+,a6
   13ed4:	lea 12(sp),sp
   13ed8:	rts

00013eda <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   13eda:	lea -20(sp),sp
   13ede:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   13ee2:	move.l 36(sp),24(sp)
   13ee8:	move.l 40(sp),28(sp)
   13eee:	move.l 44(sp),16(sp)
   13ef4:	move.l 48(sp),20(sp)
   13efa:	move.l 18bd8 <MathIeeeDoubBasBase>,d0
   13f00:	movea.l d0,a6
   13f02:	move.l 24(sp),d0
   13f06:	move.l 28(sp),d1
   13f0a:	move.l 16(sp),d2
   13f0e:	move.l 20(sp),d3
   13f12:	jsr -42(a6)
   13f16:	move.l d0,12(sp)
   13f1a:	move.l 12(sp),d0
}
   13f1e:	movem.l (sp)+,d2-d3/a6
   13f22:	lea 20(sp),sp
   13f26:	rts

00013f28 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   13f28:	lea -12(sp),sp
   13f2c:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   13f2e:	move.l 20(sp),12(sp)
   13f34:	move.l 24(sp),8(sp)
   13f3a:	move.l 18bd0 <MathIeeeSingBasBase>,d0
   13f40:	movea.l d0,a6
   13f42:	move.l 12(sp),d0
   13f46:	move.l 8(sp),d1
   13f4a:	jsr -42(a6)
   13f4e:	move.l d0,4(sp)
   13f52:	move.l 4(sp),d0
}
   13f56:	movea.l (sp)+,a6
   13f58:	lea 12(sp),sp
   13f5c:	rts

00013f5e <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   13f5e:	lea -12(sp),sp
   13f62:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   13f64:	move.l 20(sp),12(sp)
   13f6a:	move.l 24(sp),8(sp)
   13f70:	move.l 18bd0 <MathIeeeSingBasBase>,d0
   13f76:	movea.l d0,a6
   13f78:	move.l 12(sp),d0
   13f7c:	move.l 8(sp),d1
   13f80:	jsr -42(a6)
   13f84:	move.l d0,4(sp)
   13f88:	move.l 4(sp),d0
}
   13f8c:	movea.l (sp)+,a6
   13f8e:	lea 12(sp),sp
   13f92:	rts

00013f94 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   13f94:	lea -32(sp),sp
   13f98:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   13f9c:	move.l 48(sp),36(sp)
   13fa2:	move.l 52(sp),40(sp)
   13fa8:	move.l 56(sp),28(sp)
   13fae:	move.l 60(sp),32(sp)
   13fb4:	move.l 18bd8 <MathIeeeDoubBasBase>,d0
   13fba:	movea.l d0,a6
   13fbc:	move.l 36(sp),d0
   13fc0:	move.l 40(sp),d1
   13fc4:	move.l 28(sp),d2
   13fc8:	move.l 32(sp),d3
   13fcc:	jsr -72(a6)
   13fd0:	move.l d0,12(sp)
   13fd4:	move.l d1,16(sp)
   13fd8:	move.l 12(sp),20(sp)
   13fde:	move.l 16(sp),24(sp)
   13fe4:	move.l 20(sp),d0
   13fe8:	move.l 24(sp),d1
}
   13fec:	movem.l (sp)+,d2-d3/a6
   13ff0:	lea 32(sp),sp
   13ff4:	rts

00013ff6 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   13ff6:	lea -12(sp),sp
   13ffa:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   13ffc:	move.l 20(sp),12(sp)
   14002:	move.l 24(sp),8(sp)
   14008:	move.l 18bd0 <MathIeeeSingBasBase>,d0
   1400e:	movea.l d0,a6
   14010:	move.l 12(sp),d0
   14014:	move.l 8(sp),d1
   14018:	jsr -72(a6)
   1401c:	move.l d0,4(sp)
   14020:	move.l 4(sp),d0
}
   14024:	movea.l (sp)+,a6
   14026:	lea 12(sp),sp
   1402a:	rts

0001402c <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   1402c:	lea -12(sp),sp
   14030:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   14032:	move.l 20(sp),8(sp)
   14038:	move.l 24(sp),12(sp)
   1403e:	move.l 18bdc <MathIeeeDoubTransBase>,d0
   14044:	movea.l d0,a6
   14046:	move.l 8(sp),d0
   1404a:	move.l 12(sp),d1
   1404e:	jsr -102(a6)
   14052:	move.l d0,4(sp)
   14056:	move.l 4(sp),d0
}
   1405a:	movea.l (sp)+,a6
   1405c:	lea 12(sp),sp
   14060:	rts

00014062 <__fixunssfsi>:

unsigned int __fixunssfsi (float a) {
   14062:	subq.l #8,sp
   14064:	move.l a6,-(sp)
	return IEEESPFix(a);
   14066:	move.l 16(sp),8(sp)
   1406c:	move.l 18bd0 <MathIeeeSingBasBase>,d0
   14072:	movea.l d0,a6
   14074:	move.l 8(sp),d0
   14078:	jsr -30(a6)
   1407c:	move.l d0,4(sp)
   14080:	move.l 4(sp),d0
}
   14084:	movea.l (sp)+,a6
   14086:	addq.l #8,sp
   14088:	rts

0001408a <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   1408a:	       lea -24(sp),sp
   1408e:	       move.l a6,-(sp)
    if (x > 0) {
   14090:	       clr.l -(sp)
   14092:	       move.l 40(sp),-(sp)
   14096:	       jsr 13e6e <__gtsf2>
   1409c:	       addq.l #8,sp
   1409e:	       tst.l d0
   140a0:	   /-- ble.s 140d2 <atan2f+0x48>
        return IEEESPAtan(y / x);
   140a2:	   |   move.l 36(sp),-(sp)
   140a6:	   |   move.l 36(sp),-(sp)
   140aa:	   |   jsr 13bae <__divsf3>
   140b0:	   |   addq.l #8,sp
   140b2:	   |   move.l d0,8(sp)
   140b6:	   |   move.l 18bd4 <MathIeeeSingTransBase>,d0
   140bc:	   |   movea.l d0,a6
   140be:	   |   move.l 8(sp),d0
   140c2:	   |   jsr -30(a6)
   140c6:	   |   move.l d0,4(sp)
   140ca:	   |   move.l 4(sp),d0
   140ce:	/--|-- bra.w 14232 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   140d2:	|  \-> clr.l -(sp)
   140d4:	|      move.l 40(sp),-(sp)
   140d8:	|      jsr 13f28 <__ltsf2>
   140de:	|      addq.l #8,sp
   140e0:	|      tst.l d0
   140e2:	|  /-- bge.s 14156 <atan2f+0xcc>
   140e4:	|  |   clr.l -(sp)
   140e6:	|  |   move.l 36(sp),-(sp)
   140ea:	|  |   jsr 13dea <__gesf2>
   140f0:	|  |   addq.l #8,sp
   140f2:	|  |   tst.l d0
   140f4:	|  +-- blt.s 14156 <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   140f6:	|  |   move.l 36(sp),-(sp)
   140fa:	|  |   move.l 36(sp),-(sp)
   140fe:	|  |   jsr 13bae <__divsf3>
   14104:	|  |   addq.l #8,sp
   14106:	|  |   move.l d0,24(sp)
   1410a:	|  |   move.l 18bd4 <MathIeeeSingTransBase>,d0
   14110:	|  |   movea.l d0,a6
   14112:	|  |   move.l 24(sp),d0
   14116:	|  |   jsr -30(a6)
   1411a:	|  |   move.l d0,20(sp)
   1411e:	|  |   move.l 20(sp),d0
   14122:	|  |   move.l d0,-(sp)
   14124:	|  |   jsr 13c1a <__extendsfdf2>
   1412a:	|  |   addq.l #4,sp
   1412c:	|  |   move.l #1413754136,-(sp)
   14132:	|  |   move.l #1074340347,-(sp)
   14138:	|  |   move.l d1,-(sp)
   1413a:	|  |   move.l d0,-(sp)
   1413c:	|  |   jsr 13aea <__adddf3>
   14142:	|  |   lea 16(sp),sp
   14146:	|  |   move.l d1,-(sp)
   14148:	|  |   move.l d0,-(sp)
   1414a:	|  |   jsr 1402c <__truncdfsf2>
   14150:	|  |   addq.l #8,sp
   14152:	+--|-- bra.w 14232 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   14156:	|  \-> clr.l -(sp)
   14158:	|      move.l 40(sp),-(sp)
   1415c:	|      jsr 13f28 <__ltsf2>
   14162:	|      addq.l #8,sp
   14164:	|      tst.l d0
   14166:	|  /-- bge.s 141d8 <atan2f+0x14e>
   14168:	|  |   clr.l -(sp)
   1416a:	|  |   move.l 36(sp),-(sp)
   1416e:	|  |   jsr 13f28 <__ltsf2>
   14174:	|  |   addq.l #8,sp
   14176:	|  |   tst.l d0
   14178:	|  +-- bge.s 141d8 <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   1417a:	|  |   move.l 36(sp),-(sp)
   1417e:	|  |   move.l 36(sp),-(sp)
   14182:	|  |   jsr 13bae <__divsf3>
   14188:	|  |   addq.l #8,sp
   1418a:	|  |   move.l d0,16(sp)
   1418e:	|  |   move.l 18bd4 <MathIeeeSingTransBase>,d0
   14194:	|  |   movea.l d0,a6
   14196:	|  |   move.l 16(sp),d0
   1419a:	|  |   jsr -30(a6)
   1419e:	|  |   move.l d0,12(sp)
   141a2:	|  |   move.l 12(sp),d0
   141a6:	|  |   move.l d0,-(sp)
   141a8:	|  |   jsr 13c1a <__extendsfdf2>
   141ae:	|  |   addq.l #4,sp
   141b0:	|  |   move.l #1413754136,-(sp)
   141b6:	|  |   move.l #1074340347,-(sp)
   141bc:	|  |   move.l d1,-(sp)
   141be:	|  |   move.l d0,-(sp)
   141c0:	|  |   jsr 13f94 <__subdf3>
   141c6:	|  |   lea 16(sp),sp
   141ca:	|  |   move.l d1,-(sp)
   141cc:	|  |   move.l d0,-(sp)
   141ce:	|  |   jsr 1402c <__truncdfsf2>
   141d4:	|  |   addq.l #8,sp
   141d6:	+--|-- bra.s 14232 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   141d8:	|  \-> clr.l -(sp)
   141da:	|      move.l 40(sp),-(sp)
   141de:	|      jsr 13be4 <__eqsf2>
   141e4:	|      addq.l #8,sp
   141e6:	|      tst.l d0
   141e8:	|  /-- bne.s 14204 <atan2f+0x17a>
   141ea:	|  |   clr.l -(sp)
   141ec:	|  |   move.l 36(sp),-(sp)
   141f0:	|  |   jsr 13e6e <__gtsf2>
   141f6:	|  |   addq.l #8,sp
   141f8:	|  |   tst.l d0
   141fa:	|  +-- ble.s 14204 <atan2f+0x17a>
        return PI / 2;
   141fc:	|  |   move.l #1070141403,d0
   14202:	+--|-- bra.s 14232 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   14204:	|  \-> clr.l -(sp)
   14206:	|      move.l 40(sp),-(sp)
   1420a:	|      jsr 13be4 <__eqsf2>
   14210:	|      addq.l #8,sp
   14212:	|      tst.l d0
   14214:	|  /-- bne.s 14230 <atan2f+0x1a6>
   14216:	|  |   clr.l -(sp)
   14218:	|  |   move.l 36(sp),-(sp)
   1421c:	|  |   jsr 13f28 <__ltsf2>
   14222:	|  |   addq.l #8,sp
   14224:	|  |   tst.l d0
   14226:	|  +-- bge.s 14230 <atan2f+0x1a6>
        return -PI / 2;
   14228:	|  |   move.l #-1077342245,d0
   1422e:	+--|-- bra.s 14232 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   14230:	|  \-> moveq #0,d0
    }
}
   14232:	\----> movea.l (sp)+,a6
   14234:	       lea 24(sp),sp
   14238:	       rts

0001423a <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   1423a:	lea -24(sp),sp
   1423e:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   14240:	move.l 32(sp),20(sp)
   14246:	move.l 36(sp),24(sp)
   1424c:	move.l 18bdc <MathIeeeDoubTransBase>,d0
   14252:	movea.l d0,a6
   14254:	move.l 20(sp),d0
   14258:	move.l 24(sp),d1
   1425c:	jsr -96(a6)
   14260:	move.l d0,4(sp)
   14264:	move.l d1,8(sp)
   14268:	move.l 4(sp),12(sp)
   1426e:	move.l 8(sp),16(sp)
   14274:	move.l 12(sp),d0
   14278:	move.l 16(sp),d1
}
   1427c:	movea.l (sp)+,a6
   1427e:	lea 24(sp),sp
   14282:	rts

00014284 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   14284:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   14288:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   1428c:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   14290:	mulu.w 8(sp),d1
	addw	d1, d0
   14294:	add.w d1,d0
	swap	d0
   14296:	swap d0
	clrw	d0
   14298:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   1429a:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   1429e:	mulu.w 10(sp),d1
	addl	d1, d0
   142a2:	add.l d1,d0
	rts
   142a4:	rts

000142a6 <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   142a6:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   142a8:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   142ac:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   142b0:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   142b6:	   /-- bcc.s 142ce <__udivsi3+0x28>
	movel	d0, d2
   142b8:	   |   move.l d0,d2
	clrw	d2
   142ba:	   |   clr.w d2
	swap	d2
   142bc:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   142be:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   142c0:	   |   move.w d2,d0
	swap	d0
   142c2:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   142c4:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   142c8:	   |   divu.w d1,d2
	movew	d2, d0
   142ca:	   |   move.w d2,d0
	jra	6f
   142cc:	/--|-- bra.s 142fe <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   142ce:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   142d0:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   142d2:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   142d4:	|  |   cmpi.l #65536,d1
	jcc	4b
   142da:	|  \-- bcc.s 142d0 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   142dc:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   142de:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   142e4:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   142e6:	|      mulu.w d0,d1
	swap	d2
   142e8:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   142ea:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   142ec:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   142ee:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   142f0:	|  /-- bne.s 142fc <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   142f2:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   142f4:	|  +-- bcs.s 142fc <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   142f6:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   142fa:	+--|-- bls.s 142fe <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   142fc:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   142fe:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   14300:	       rts

00014302 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   14302:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   14304:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   14306:	    move.l 12(sp),d1
	jpl	1f
   1430a:	/-- bpl.s 14310 <__divsi3+0xe>
	negl	d1
   1430c:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   1430e:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   14310:	\-> move.l 8(sp),d0
	jpl	2f
   14314:	/-- bpl.s 1431a <__divsi3+0x18>
	negl	d0
   14316:	|   neg.l d0
	negb	d2
   14318:	|   neg.b d2

2:	movel	d1, sp@-
   1431a:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1431c:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   1431e:	    jsr 142a6 <__udivsi3>
	addql	#8, sp
   14324:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   14326:	    tst.b d2
	jpl	3f
   14328:	/-- bpl.s 1432c <__divsi3+0x2a>
	negl	d0
   1432a:	|   neg.l d0

3:	movel	sp@+, d2
   1432c:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   1432e:	    rts

00014330 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   14330:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   14334:	move.l 4(sp),d0
	movel	d1, sp@-
   14338:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1433a:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   1433c:	jsr 14302 <__divsi3>
	addql	#8, sp
   14342:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   14344:	move.l 8(sp),d1
	movel	d1, sp@-
   14348:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1434a:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   1434c:	jsr 14284 <__mulsi3>
	addql	#8, sp
   14352:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   14354:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   14358:	sub.l d0,d1
	movel	d1, d0
   1435a:	move.l d1,d0
	rts
   1435c:	rts

0001435e <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   1435e:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   14362:	move.l 4(sp),d0
	movel	d1, sp@-
   14366:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   14368:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   1436a:	jsr 142a6 <__udivsi3>
	addql	#8, sp
   14370:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   14372:	move.l 8(sp),d1
	movel	d1, sp@-
   14376:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   14378:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   1437a:	jsr 14284 <__mulsi3>
	addql	#8, sp
   14380:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   14382:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   14386:	sub.l d0,d1
	movel	d1, d0
   14388:	move.l d1,d0
	rts
   1438a:	rts

0001438c <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   1438c:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   1438e:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   14392:	jsr -516(a6)
    move.l (sp)+, a6
   14396:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   14398:	rts

0001439a <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   1439a:	move.b d0,(a3)+
	rts
   1439c:	rts
