
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #98405,d0
       8:	       subi.l #98405,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 18065 <__fini_array_end>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #98405,d0
      40:	       subi.l #98405,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 18065 <__fini_array_end>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 43ca <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #98405,d0
      7e:	       subi.l #98405,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 18065 <__fini_array_end>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr f5c8 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 19b8e <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr f5e0 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 18066 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr f5c8 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 19b8e <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 18066 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr f5c8 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 19b8e <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 12bfc <PutChar+0x4>
     35c:	|  |              |   jsr 12130 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 19b96 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 19b96 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 19b96 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 19b96 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 19b96 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 19b96 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 19b96 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 12c26 <PutChar+0x2e>
     834:	|   jsr 12130 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 19b96 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 12c42 <PutChar+0x4a>
     8a6:	|   jsr 12130 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 19b96 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 19b96 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 19b96 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 19b96 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 19b96 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 19b96 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 19b96 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 19b96 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 19b8e <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 19b96 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr f5c8 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 19b96 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
     c58:	       lea -88(sp),sp
     c5c:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
     c5e:	       move.l 19b8e <SysBase>,d0
     c64:	       movea.l d0,a6
     c66:	       jsr -666(a6)
     c6a:	       move.l d0,88(sp)
     c6e:	       move.l 88(sp),d0
     c72:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
     c76:	       move.l 84(sp),80(sp)
     c7c:	       moveq #40,d0
     c7e:	       move.l d0,76(sp)
     c82:	       move.l 19b8e <SysBase>,d0
     c88:	       movea.l d0,a6
     c8a:	       movea.l 80(sp),a0
     c8e:	       move.l 76(sp),d0
     c92:	       jsr -654(a6)
     c96:	       move.l d0,72(sp)
     c9a:	       move.l 72(sp),d0
     c9e:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
     ca2:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
     ca8:	       move.l #76906,60(sp)
     cb0:	       clr.l 56(sp)
     cb4:	       move.l 64(sp),52(sp)
     cba:	       clr.l 48(sp)
     cbe:	       move.l 19b8e <SysBase>,d0
     cc4:	       movea.l d0,a6
     cc6:	       movea.l 60(sp),a0
     cca:	       move.l 56(sp),d0
     cce:	       movea.l 52(sp),a1
     cd2:	       move.l 48(sp),d1
     cd6:	       jsr -444(a6)
     cda:	       move.b d0,47(sp)
     cde:	       move.b 47(sp),d0
     ce2:	   /-- beq.s cf8 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
     ce4:	   |   pea 12c77 <PutChar+0x7f>
     cea:	   |   jsr 12130 <KPrintF>
     cf0:	   |   addq.l #4,sp
        return 0;
     cf2:	   |   moveq #0,d0
     cf4:	/--|-- bra.w db2 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
     cf8:	|  \-> movea.l 64(sp),a0
     cfc:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
     d02:	|      lea 92(sp),a0
     d06:	|      lea -86(a0),a0
     d0a:	|      move.l a0,38(sp)
     d0e:	|      movea.l 42(sp),a6
     d12:	|      movea.l 38(sp),a0
     d16:	|      jsr -60(a6)
     d1a:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
     d1e:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
     d24:	|      move.l #1103515245,-(sp)
     d2a:	|      move.l 34(sp),-(sp)
     d2e:	|      jsr 12ae2 <__mulsi3>
     d34:	|      addq.l #8,sp
     d36:	|      addi.l #12345,d0
     d3c:	|      move.l d0,d1
     d3e:	|      bclr #31,d1
     d42:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
     d46:	|      move.l 30(sp),d0
     d4a:	|      pea 64 <_start+0x64>
     d4e:	|      move.l d0,-(sp)
     d50:	|      jsr 12bbc <__umodsi3>
     d56:	|      addq.l #8,sp
     d58:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
     d5c:	|      move.l 26(sp),-(sp)
     d60:	|      pea 12c94 <PutChar+0x9c>
     d66:	|      jsr 12130 <KPrintF>
     d6c:	|      addq.l #8,sp

    CloseDevice(ioreq);
     d6e:	|      move.l 64(sp),22(sp)
     d74:	|      move.l 19b8e <SysBase>,d0
     d7a:	|      movea.l d0,a6
     d7c:	|      movea.l 22(sp),a1
     d80:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
     d84:	|      move.l 64(sp),18(sp)
     d8a:	|      move.l 19b8e <SysBase>,d0
     d90:	|      movea.l d0,a6
     d92:	|      movea.l 18(sp),a0
     d96:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
     d9a:	|      move.l 84(sp),14(sp)
     da0:	|      move.l 19b8e <SysBase>,d0
     da6:	|      movea.l d0,a6
     da8:	|      movea.l 14(sp),a0
     dac:	|      jsr -672(a6)
    return 0;
     db0:	|      moveq #0,d0
}
     db2:	\----> movea.l (sp)+,a6
     db4:	       lea 88(sp),sp
     db8:	       rts

00000dba <pickAnimCursor>:
struct personaAnimation * mouseCursorAnim;
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     dba:	move.l 19a7a <mouseCursorAnim>,d0
     dc0:	move.l d0,-(sp)
     dc2:	jsr 5c2e <deleteAnim>
     dc8:	addq.l #4,sp
	mouseCursorAnim = pp;
     dca:	move.l 4(sp),19a7a <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     dd2:	clr.l 19a7e <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     dd8:	clr.l 19a82 <mouseCursorCountUp>
}
     dde:	nop
     de0:	rts

00000de2 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
	KPrintF("pasteCursor: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
     de2:	pea 12ca7 <PutChar+0xaf>
     de8:	jsr 12130 <KPrintF>
     dee:	addq.l #4,sp
     df0:	nop
     df2:	rts

00000df4 <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
     df4:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
     df8:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
     dfc:	       tst.l 24(sp)
     e00:	   /-- bge.s e06 <drawLine+0x12>
     e02:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
     e06:	   \-> tst.l 28(sp)
     e0a:	   /-- bge.s e10 <drawLine+0x1c>
     e0c:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
     e10:	   \-> tst.l 32(sp)
     e14:	   /-- bge.s e1a <drawLine+0x26>
     e16:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
     e1a:	   \-> tst.l 36(sp)
     e1e:	   /-- bge.s e24 <drawLine+0x30>
     e20:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
     e24:	   \-> move.l 19c14 <sceneWidth>,d0
     e2a:	       cmp.l 24(sp),d0
     e2e:	   /-- bge.s e3e <drawLine+0x4a>
     e30:	   |   move.l 19c14 <sceneWidth>,d0
     e36:	   |   move.l d0,d1
     e38:	   |   subq.l #1,d1
     e3a:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
     e3e:	   \-> move.l 19c14 <sceneWidth>,d0
     e44:	       cmp.l 32(sp),d0
     e48:	   /-- bge.s e58 <drawLine+0x64>
     e4a:	   |   move.l 19c14 <sceneWidth>,d0
     e50:	   |   move.l d0,d1
     e52:	   |   subq.l #1,d1
     e54:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
     e58:	   \-> move.l 19c18 <sceneHeight>,d0
     e5e:	       cmp.l 28(sp),d0
     e62:	   /-- bge.s e72 <drawLine+0x7e>
     e64:	   |   move.l 19c18 <sceneHeight>,d0
     e6a:	   |   move.l d0,d1
     e6c:	   |   subq.l #1,d1
     e6e:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
     e72:	   \-> move.l 19c18 <sceneHeight>,d0
     e78:	       cmp.l 36(sp),d0
     e7c:	   /-- bge.s e8c <drawLine+0x98>
     e7e:	   |   move.l 19c18 <sceneHeight>,d0
     e84:	   |   move.l d0,d1
     e86:	   |   subq.l #1,d1
     e88:	   |   move.l d1,36(sp)

	if (x1 > x2) {
     e8c:	   \-> move.l 24(sp),d0
     e90:	       cmp.l 32(sp),d0
     e94:	/----- ble.s eb0 <drawLine+0xbc>
		x = x2; 
     e96:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
     e9c:	|      tst.w 10(sp)
     ea0:	|      seq d0
     ea2:	|      neg.b d0
     ea4:	|      move.b d0,d0
     ea6:	|      andi.w #255,d0
     eaa:	|      move.w d0,10(sp)
     eae:	|  /-- bra.s eb6 <drawLine+0xc2>
	} else x = x1;
     eb0:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
     eb6:	   \-> move.l 28(sp),d1
     eba:	       cmp.l 36(sp),d1
     ebe:	/----- ble.s eda <drawLine+0xe6>
		y = y2; 
     ec0:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
     ec6:	|      tst.w 10(sp)
     eca:	|      seq d0
     ecc:	|      neg.b d0
     ece:	|      move.b d0,d0
     ed0:	|      andi.w #255,d0
     ed4:	|      move.w d0,10(sp)
     ed8:	|  /-- bra.s ee0 <drawLine+0xec>
	} else y = y1;	
     eda:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
     ee0:	   \-> move.l 32(sp),d0
     ee4:	       sub.l 24(sp),d0
     ee8:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
     eec:	       move.l 6(sp),d0
     ef0:	   /-- bpl.s ef4 <drawLine+0x100>
     ef2:	   |   neg.l d0
     ef4:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
     ef8:	       move.l 36(sp),d1
     efc:	       sub.l 28(sp),d1
     f00:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
     f04:	       move.l 2(sp),d0
     f08:	   /-- bpl.s f0c <drawLine+0x118>
     f0a:	   |   neg.l d0
     f0c:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
     f10:	       tst.l 6(sp)
     f14:	   /-- bne.s f38 <drawLine+0x144>
		diffX = 1;
     f16:	   |   moveq #1,d0
     f18:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
     f1c:	   |   move.l 19c14 <sceneWidth>,d0
     f22:	   |   subq.l #1,d0
     f24:	   |   cmp.l 16(sp),d0
     f28:	   +-- bne.s f38 <drawLine+0x144>
     f2a:	   |   move.l 19c14 <sceneWidth>,d0
     f30:	   |   move.l d0,d1
     f32:	   |   subq.l #2,d1
     f34:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
     f38:	   \-> tst.l 2(sp)
     f3c:	   /-- bne.s f60 <drawLine+0x16c>
		diffY = 1;
     f3e:	   |   moveq #1,d0
     f40:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
     f44:	   |   move.l 19c18 <sceneHeight>,d0
     f4a:	   |   subq.l #1,d0
     f4c:	   |   cmp.l 12(sp),d0
     f50:	   +-- bne.s f60 <drawLine+0x16c>
     f52:	   |   move.l 19c18 <sceneHeight>,d0
     f58:	   |   move.l d0,d1
     f5a:	   |   subq.l #2,d1
     f5c:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
     f60:	   \-> pea 12ce0 <PutChar+0xe8>
     f66:	       jsr 12130 <KPrintF>
     f6c:	       addq.l #4,sp
	
}
     f6e:	       nop
     f70:	       lea 20(sp),sp
     f74:	       rts

00000f76 <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
     f76:	                      lea -24(sp),sp
     f7a:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
     f7c:	                      move.l 19a96 <firstTexture>,d0
     f82:	/-------------------- beq.w 1060 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
     f86:	|                     clr.l 24(sp)
     f8a:	|     /-------------- bra.w 1054 <deleteTextures+0xde>
			BOOL found = FALSE;
     f8e:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
     f92:	|  |  |               move.l 19a96 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
     f9a:	|  |  |               movea.l 20(sp),a0
     f9e:	|  |  |               move.l (a0),d1
     fa0:	|  |  |               move.l 24(sp),d0
     fa4:	|  |  |               add.l d0,d0
     fa6:	|  |  |               add.l d0,d0
     fa8:	|  |  |               movea.l 36(sp),a0
     fac:	|  |  |               adda.l d0,a0
     fae:	|  |  |               move.l (a0),d0
     fb0:	|  |  |               cmp.l d1,d0
     fb2:	|  |  |  /----------- bne.w 1046 <deleteTextures+0xd0>
				found = TRUE;
     fb6:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
     fbc:	|  |  |  |            movea.l 20(sp),a0
     fc0:	|  |  |  |            move.l 12(a0),d0
     fc4:	|  |  |  |            move.l d0,19a96 <firstTexture>
				FreeVec(list);
     fca:	|  |  |  |            move.l 20(sp),6(sp)
     fd0:	|  |  |  |            move.l 19b8e <SysBase>,d0
     fd6:	|  |  |  |            movea.l d0,a6
     fd8:	|  |  |  |            movea.l 6(sp),a1
     fdc:	|  |  |  |            jsr -690(a6)
				continue;
     fe0:	|  |  |  |  /-------- bra.s 1050 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
     fe2:	|  |  |  |  |  /----> movea.l 20(sp),a0
     fe6:	|  |  |  |  |  |      movea.l 12(a0),a0
     fea:	|  |  |  |  |  |      move.l (a0),d1
     fec:	|  |  |  |  |  |      move.l 24(sp),d0
     ff0:	|  |  |  |  |  |      add.l d0,d0
     ff2:	|  |  |  |  |  |      add.l d0,d0
     ff4:	|  |  |  |  |  |      movea.l 36(sp),a0
     ff8:	|  |  |  |  |  |      adda.l d0,a0
     ffa:	|  |  |  |  |  |      move.l (a0),d0
     ffc:	|  |  |  |  |  |      cmp.l d1,d0
     ffe:	|  |  |  |  |  |  /-- bne.s 103c <deleteTextures+0xc6>
					found = TRUE;
    1000:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    1006:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    100a:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    1010:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    1014:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    1018:	|  |  |  |  |  |  |   move.l 12(a0),d0
    101c:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    1020:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    1024:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    102a:	|  |  |  |  |  |  |   move.l 19b8e <SysBase>,d0
    1030:	|  |  |  |  |  |  |   movea.l d0,a6
    1032:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    1036:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    103a:	|  |  |  |  +--|--|-- bra.s 1050 <deleteTextures+0xda>
				}
				list = list->next;
    103c:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    1040:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    1046:	|  |  |  \--|--|----> movea.l 20(sp),a0
    104a:	|  |  |     |  |      move.l 12(a0),d0
    104e:	|  |  |     |  \----- bne.s fe2 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    1050:	|  |  |     \-------> addq.l #1,24(sp)
    1054:	|  |  \-------------> move.l 24(sp),d0
    1058:	|  |                  cmp.l 32(sp),d0
    105c:	|  \----------------- bcs.w f8e <deleteTextures+0x18>
			}
		}
	}
}
    1060:	\-------------------> nop
    1062:	                      movea.l (sp)+,a6
    1064:	                      lea 24(sp),sp
    1068:	                      rts

0000106a <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    106a:	subq.l #4,sp
    106c:	move.l 8(sp),d0
    1070:	move.w d0,d0
    1072:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    1076:	pea 12d03 <PutChar+0x10b>
    107c:	jsr 12130 <KPrintF>
    1082:	addq.l #4,sp
    1084:	nop
    1086:	addq.l #4,sp
    1088:	rts

0000108a <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    108a:	       moveq #-1,d0
    108c:	       cmp.l 4(sp),d0
    1090:	   /-- bne.s 1096 <resourceNameFromNum+0xc>
    1092:	   |   moveq #0,d0
    1094:	/--|-- bra.s 10ce <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    1096:	|  \-> move.l 19b6a <numResourceNames>,d0
    109c:	|  /-- bne.s 10a6 <resourceNameFromNum+0x1c>
    109e:	|  |   move.l #77107,d0
    10a4:	+--|-- bra.s 10ce <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    10a6:	|  \-> move.l 19b6a <numResourceNames>,d0
    10ac:	|      cmp.l 4(sp),d0
    10b0:	|  /-- ble.s 10c8 <resourceNameFromNum+0x3e>
    10b2:	|  |   move.l 19b26 <allResourceNames>,d1
    10b8:	|  |   move.l 4(sp),d0
    10bc:	|  |   add.l d0,d0
    10be:	|  |   add.l d0,d0
    10c0:	|  |   movea.l d1,a0
    10c2:	|  |   adda.l d0,a0
    10c4:	|  |   move.l (a0),d0
    10c6:	+--|-- bra.s 10ce <resourceNameFromNum+0x44>
	return "Unknown resource";
    10c8:	|  \-> move.l #77116,d0
    10ce:	\----> rts

000010d0 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{	
    10d0:	          lea -40(sp),sp
    10d4:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    10d8:	          move.l #320,19a8e <winWidth>
    winHeight = 256;
    10e2:	          move.l #256,19a92 <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    10ec:	          tst.l 56(sp)
    10f0:	      /-- bne.s 1108 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    10f2:	      |   pea 12d4d <PutChar+0x155>
    10f8:	      |   jsr b8 <copyString>
    10fe:	      |   addq.l #4,sp
    1100:	      |   move.l d0,19aa6 <bundleFolder>
    1106:	   /--|-- bra.s 111e <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    1108:	   |  \-> movea.l 60(sp),a0
    110c:	   |      move.l (a0),d0
    110e:	   |      move.l d0,-(sp)
    1110:	   |      jsr b8 <copyString>
    1116:	   |      addq.l #4,sp
    1118:	   |      move.l d0,19aa6 <bundleFolder>
	}
    
	int lastSlash = -1;
    111e:	   \----> moveq #-1,d0
    1120:	          move.l d0,44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    1124:	          clr.l 40(sp)
    1128:	   /----- bra.s 114a <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    112a:	/--|----> move.l 19aa6 <bundleFolder>,d1
    1130:	|  |      move.l 40(sp),d0
    1134:	|  |      movea.l d1,a0
    1136:	|  |      adda.l d0,a0
    1138:	|  |      move.b (a0),d0
    113a:	|  |      cmpi.b #47,d0
    113e:	|  |  /-- bne.s 1146 <main_sludge+0x76>
    1140:	|  |  |   move.l 40(sp),44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    1146:	|  |  \-> addq.l #1,40(sp)
    114a:	|  \----> move.l 19aa6 <bundleFolder>,d1
    1150:	|         move.l 40(sp),d0
    1154:	|         movea.l d1,a0
    1156:	|         adda.l d0,a0
    1158:	|         move.b (a0),d0
    115a:	\-------- bne.s 112a <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    115c:	          move.l 19aa6 <bundleFolder>,d0
    1162:	          move.l 44(sp),d1
    1166:	          addq.l #1,d1
    1168:	          movea.l d0,a0
    116a:	          adda.l d1,a0
    116c:	          clr.b (a0)

	if (argc > 1) {
    116e:	          moveq #1,d0
    1170:	          cmp.l 56(sp),d0
    1174:	      /-- bge.s 1190 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    1176:	      |   move.l 56(sp),d0
    117a:	      |   addi.l #1073741823,d0
    1180:	      |   add.l d0,d0
    1182:	      |   add.l d0,d0
    1184:	      |   movea.l 60(sp),a0
    1188:	      |   adda.l d0,a0
    118a:	      |   move.l (a0),48(sp)
    118e:	   /--|-- bra.s 11ea <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    1190:	   |  \-> move.l 19aa6 <bundleFolder>,d0
    1196:	   |      pea 12d53 <PutChar+0x15b>
    119c:	   |      move.l d0,-(sp)
    119e:	   |      jsr f608 <joinStrings>
    11a4:	   |      addq.l #8,sp
    11a6:	   |      move.l d0,48(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    11aa:	   |      move.l 48(sp),-(sp)
    11ae:	   |      jsr f51e <fileExists>
    11b4:	   |      addq.l #4,sp
    11b6:	   |      tst.b d0
    11b8:	   +----- bne.s 11ea <main_sludge+0x11a>
			FreeVec(sludgeFile);
    11ba:	   |      move.l 48(sp),36(sp)
    11c0:	   |      move.l 19b8e <SysBase>,d0
    11c6:	   |      movea.l d0,a6
    11c8:	   |      movea.l 36(sp),a1
    11cc:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    11d0:	   |      move.l 19aa6 <bundleFolder>,d0
    11d6:	   |      pea 12d60 <PutChar+0x168>
    11dc:	   |      move.l d0,-(sp)
    11de:	   |      jsr f608 <joinStrings>
    11e4:	   |      addq.l #8,sp
    11e6:	   |      move.l d0,48(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	if (! fileExists(sludgeFile) ) {	
    11ea:	   \----> move.l 48(sp),-(sp)
    11ee:	          jsr f51e <fileExists>
    11f4:	          addq.l #4,sp
    11f6:	          tst.b d0
    11f8:	      /-- bne.s 1242 <main_sludge+0x172>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    11fa:	      |   move.l 19b96 <DOSBase>,d0
    1200:	      |   movea.l d0,a6
    1202:	      |   jsr -60(a6)
    1206:	      |   move.l d0,28(sp)
    120a:	      |   move.l 28(sp),d0
    120e:	      |   move.l d0,24(sp)
    1212:	      |   move.l #77161,20(sp)
    121a:	      |   moveq #21,d0
    121c:	      |   move.l d0,16(sp)
    1220:	      |   move.l 19b96 <DOSBase>,d0
    1226:	      |   movea.l d0,a6
    1228:	      |   move.l 24(sp),d1
    122c:	      |   move.l 20(sp),d2
    1230:	      |   move.l 16(sp),d3
    1234:	      |   jsr -48(a6)
    1238:	      |   move.l d0,12(sp)
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    123c:	      |   moveq #0,d0
    123e:	/-----|-- bra.w 1366 <main_sludge+0x296>
	}

	setGameFilePath (sludgeFile);
    1242:	|     \-> move.l 48(sp),-(sp)
    1246:	|         jsr 1370 <setGameFilePath>
    124c:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    124e:	|         move.l 48(sp),-(sp)
    1252:	|         jsr 2bea <initSludge>
    1258:	|         addq.l #4,sp
    125a:	|         tst.w d0
    125c:	|     /-- bne.s 1264 <main_sludge+0x194>
    125e:	|     |   moveq #0,d0
    1260:	+-----|-- bra.w 1366 <main_sludge+0x296>
	
	if (! resizeBackdrop (winWidth, winHeight)) {
    1264:	|     \-> move.l 19a92 <winHeight>,d0
    126a:	|         move.l d0,d1
    126c:	|         move.l 19a8e <winWidth>,d0
    1272:	|         move.l d1,-(sp)
    1274:	|         move.l d0,-(sp)
    1276:	|         jsr 8e1e <resizeBackdrop>
    127c:	|         addq.l #8,sp
    127e:	|         tst.w d0
    1280:	|     /-- bne.s 1296 <main_sludge+0x1c6>
		KPrintF("Couldn't allocate memory for backdrop");
    1282:	|     |   pea 12d7f <PutChar+0x187>
    1288:	|     |   jsr 12130 <KPrintF>
    128e:	|     |   addq.l #4,sp
		return FALSE;
    1290:	|     |   moveq #0,d0
    1292:	+-----|-- bra.w 1366 <main_sludge+0x296>
	}

	if (! initPeople ())
    1296:	|     \-> jsr 6674 <initPeople>
    129c:	|         tst.w d0
    129e:	|     /-- bne.s 12b4 <main_sludge+0x1e4>
	{
		KPrintF("Couldn't initialise people stuff");
    12a0:	|     |   pea 12da5 <PutChar+0x1ad>
    12a6:	|     |   jsr 12130 <KPrintF>
    12ac:	|     |   addq.l #4,sp
		return FALSE;
    12ae:	|     |   moveq #0,d0
    12b0:	+-----|-- bra.w 1366 <main_sludge+0x296>
	}

	if (! initFloor ())
    12b4:	|     \-> jsr 114da <initFloor>
    12ba:	|         tst.w d0
    12bc:	|     /-- bne.s 12d2 <main_sludge+0x202>
	{
		KPrintF("Couldn't initialise floor stuff");
    12be:	|     |   pea 12dc6 <PutChar+0x1ce>
    12c4:	|     |   jsr 12130 <KPrintF>
    12ca:	|     |   addq.l #4,sp
		
		return FALSE;
    12cc:	|     |   moveq #0,d0
    12ce:	+-----|-- bra.w 1366 <main_sludge+0x296>
	}

	if (! initObjectTypes ())
    12d2:	|     \-> jsr 8fc8 <initObjectTypes>
    12d8:	|         tst.w d0
    12da:	|     /-- bne.s 12ee <main_sludge+0x21e>
	{
		KPrintF("Couldn't initialise object type stuff");
    12dc:	|     |   pea 12de6 <PutChar+0x1ee>
    12e2:	|     |   jsr 12130 <KPrintF>
    12e8:	|     |   addq.l #4,sp
		return FALSE;
    12ea:	|     |   moveq #0,d0
    12ec:	+-----|-- bra.s 1366 <main_sludge+0x296>
	}

	initSpeech ();
    12ee:	|     \-> jsr 4cc0 <initSpeech>
	initStatusBar ();
    12f4:	|         jsr 4784 <initStatusBar>

	gameName = getNumberedString(1);
    12fa:	|         pea 1 <_start+0x1>
    12fe:	|         jsr 3d78 <getNumberedString>
    1304:	|         addq.l #4,sp
    1306:	|         move.l d0,19a9e <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    130c:	|         move.l 19b5e <noStack>,d0
    1312:	|         pea 1 <_start+0x1>
    1316:	|         move.l d0,-(sp)
    1318:	|         clr.l -(sp)
    131a:	|         clr.l -(sp)
    131c:	|         clr.l -(sp)
    131e:	|         jsr 3c00 <startNewFunctionNum>
    1324:	|         lea 20(sp),sp

	weAreDoneSoQuit = 0;
    1328:	|         clr.l 19aaa <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {		
    132e:	|     /-- bra.s 1348 <main_sludge+0x278>
		handleInput();
    1330:	|  /--|-> jsr 2be2 <handleInput>
		debug_start_idle();
    1336:	|  |  |   jsr 12308 <debug_start_idle>
		WaitVbl();
    133c:	|  |  |   jsr 12058 <WaitVbl>
		debug_stop_idle();		
    1342:	|  |  |   jsr 12322 <debug_stop_idle>
	while ( !weAreDoneSoQuit ) {		
    1348:	|  |  \-> move.l 19aaa <weAreDoneSoQuit>,d0
    134e:	|  \----- beq.s 1330 <main_sludge+0x260>
	}
	//Amiga Cleanup
	FreeVec(sludgeFile);
    1350:	|         move.l 48(sp),32(sp)
    1356:	|         move.l 19b8e <SysBase>,d0
    135c:	|         movea.l d0,a6
    135e:	|         movea.l 32(sp),a1
    1362:	|         jsr -690(a6)
}
    1366:	\-------> movem.l (sp)+,d2-d3/a6
    136a:	          lea 40(sp),sp
    136e:	          rts

00001370 <setGameFilePath>:

void setGameFilePath (char * f) {
    1370:	          lea -1104(sp),sp
    1374:	          move.l a6,-(sp)
    1376:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    1378:	          move.l #1112,d0
    137e:	          add.l sp,d0
    1380:	          addi.l #-1102,d0
    1386:	          move.l d0,1100(sp)
    138a:	          move.l #998,1096(sp)
    1392:	          move.l 19b96 <DOSBase>,d0
    1398:	          movea.l d0,a6
    139a:	          move.l 1100(sp),d1
    139e:	          move.l 1096(sp),d2
    13a2:	          jsr -564(a6)
    13a6:	          move.w d0,1094(sp)
    13aa:	          move.w 1094(sp),d0
    13ae:	      /-- bne.s 13be <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    13b0:	      |   pea 12e0c <PutChar+0x214>
    13b6:	      |   jsr 12130 <KPrintF>
    13bc:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    13be:	      \-> moveq #-1,d0
    13c0:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    13c4:	          clr.l 1104(sp)
    13c8:	   /----- bra.s 13e6 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    13ca:	/--|----> move.l 1104(sp),d0
    13ce:	|  |      movea.l 1116(sp),a0
    13d2:	|  |      adda.l d0,a0
    13d4:	|  |      move.b (a0),d0
    13d6:	|  |      cmpi.b #47,d0
    13da:	|  |  /-- bne.s 13e2 <setGameFilePath+0x72>
    13dc:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    13e2:	|  |  \-> addq.l #1,1104(sp)
    13e6:	|  \----> move.l 1104(sp),d0
    13ea:	|         movea.l 1116(sp),a0
    13ee:	|         adda.l d0,a0
    13f0:	|         move.b (a0),d0
    13f2:	\-------- bne.s 13ca <setGameFilePath+0x5a>
	}

	if (got != -1) {
    13f4:	          moveq #-1,d0
    13f6:	          cmp.l 1108(sp),d0
    13fa:	   /----- beq.s 1474 <setGameFilePath+0x104>
		f[got] = 0;	
    13fc:	   |      move.l 1108(sp),d0
    1400:	   |      movea.l 1116(sp),a0
    1404:	   |      adda.l d0,a0
    1406:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    1408:	   |      move.l 1116(sp),1090(sp)
    140e:	   |      moveq #-2,d0
    1410:	   |      move.l d0,1086(sp)
    1414:	   |      move.l 19b96 <DOSBase>,d0
    141a:	   |      movea.l d0,a6
    141c:	   |      move.l 1090(sp),d1
    1420:	   |      move.l 1086(sp),d2
    1424:	   |      jsr -84(a6)
    1428:	   |      move.l d0,1082(sp)
    142c:	   |      move.l 1082(sp),d0
    1430:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    1434:	   |      move.l 1078(sp),1074(sp)
    143a:	   |      move.l 19b96 <DOSBase>,d0
    1440:	   |      movea.l d0,a6
    1442:	   |      move.l 1074(sp),d1
    1446:	   |      jsr -126(a6)
    144a:	   |      move.l d0,1070(sp)
    144e:	   |      move.l 1070(sp),d0
    1452:	   |  /-- bne.s 1466 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    1454:	   |  |   move.l 1116(sp),-(sp)
    1458:	   |  |   pea 12e32 <PutChar+0x23a>
    145e:	   |  |   jsr 12130 <KPrintF>
    1464:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    1466:	   |  \-> move.l 1108(sp),d0
    146a:	   |      movea.l 1116(sp),a0
    146e:	   |      adda.l d0,a0
    1470:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    1474:	   \----> move.l #400,1066(sp)
    147c:	          clr.l 1062(sp)
    1480:	          move.l 19b8e <SysBase>,d0
    1486:	          movea.l d0,a6
    1488:	          move.l 1066(sp),d0
    148c:	          move.l 1062(sp),d1
    1490:	          jsr -684(a6)
    1494:	          move.l d0,1058(sp)
    1498:	          move.l 1058(sp),d0
    149c:	          move.l d0,19aa2 <gamePath>
	if (gamePath==0) {
    14a2:	          move.l 19aa2 <gamePath>,d0
    14a8:	      /-- bne.s 14bc <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    14aa:	      |   pea 12e65 <PutChar+0x26d>
    14b0:	      |   jsr 12130 <KPrintF>
    14b6:	      |   addq.l #4,sp
    14b8:	   /--|-- bra.w 15a4 <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    14bc:	   |  \-> move.l 19aa2 <gamePath>,1054(sp)
    14c4:	   |      moveq #-2,d0
    14c6:	   |      move.l d0,1050(sp)
    14ca:	   |      move.l 19b96 <DOSBase>,d0
    14d0:	   |      movea.l d0,a6
    14d2:	   |      move.l 1054(sp),d1
    14d6:	   |      move.l 1050(sp),d2
    14da:	   |      jsr -84(a6)
    14de:	   |      move.l d0,1046(sp)
    14e2:	   |      move.l 1046(sp),d0
    14e6:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    14ea:	   |      move.l 1042(sp),1038(sp)
    14f0:	   |      move.l 19b96 <DOSBase>,d0
    14f6:	   |      movea.l d0,a6
    14f8:	   |      move.l 1038(sp),d1
    14fc:	   |      jsr -126(a6)
    1500:	   |      move.l d0,1034(sp)
    1504:	   |      move.l 1034(sp),d0
    1508:	   |  /-- bne.s 1518 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    150a:	   |  |   pea 12ea0 <PutChar+0x2a8>
    1510:	   |  |   jsr 12130 <KPrintF>
    1516:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    1518:	   |  \-> move.l #1112,d0
    151e:	   |      add.l sp,d0
    1520:	   |      addi.l #-1102,d0
    1526:	   |      move.l d0,1030(sp)
    152a:	   |      moveq #-2,d0
    152c:	   |      move.l d0,1026(sp)
    1530:	   |      move.l 19b96 <DOSBase>,d0
    1536:	   |      movea.l d0,a6
    1538:	   |      move.l 1030(sp),d1
    153c:	   |      move.l 1026(sp),d2
    1540:	   |      jsr -84(a6)
    1544:	   |      move.l d0,1022(sp)
    1548:	   |      move.l 1022(sp),d0
    154c:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    1550:	   |      move.l 1042(sp),1018(sp)
    1556:	   |      move.l 19b96 <DOSBase>,d0
    155c:	   |      movea.l d0,a6
    155e:	   |      move.l 1018(sp),d1
    1562:	   |      jsr -126(a6)
    1566:	   |      move.l d0,1014(sp)
    156a:	   |      move.l 1014(sp),d0
    156e:	   |  /-- bne.s 1584 <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    1570:	   |  |   moveq #10,d0
    1572:	   |  |   add.l sp,d0
    1574:	   |  |   move.l d0,-(sp)
    1576:	   |  |   pea 12ecc <PutChar+0x2d4>
    157c:	   |  |   jsr 12130 <KPrintF>
    1582:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    1584:	   |  \-> move.l 19aa2 <gamePath>,d0
    158a:	   +----- beq.s 15a4 <setGameFilePath+0x234>
    158c:	   |      move.l 19aa2 <gamePath>,1010(sp)
    1594:	   |      move.l 19b8e <SysBase>,d0
    159a:	   |      movea.l d0,a6
    159c:	   |      movea.l 1010(sp),a1
    15a0:	   |      jsr -690(a6)
}
    15a4:	   \----> move.l (sp)+,d2
    15a6:	          movea.l (sp)+,a6
    15a8:	          lea 1104(sp),sp
    15ac:	          rts

000015ae <killZBuffer>:
#include "stringy.h"
#include "support/gcc8_c_support.h"

struct zBufferData zBuffer;

void killZBuffer () {
    15ae:	    subq.l #4,sp
    15b0:	    move.l a6,-(sp)
	if (zBuffer.tex) {
    15b2:	    move.l 19afe <zBuffer+0x50>,d0
    15b8:	/-- beq.s 15f0 <killZBuffer+0x42>
		deleteTextures (1, &zBuffer.texName);
    15ba:	|   pea 19b02 <zBuffer+0x54>
    15c0:	|   pea 1 <_start+0x1>
    15c4:	|   jsr f76 <deleteTextures>
    15ca:	|   addq.l #8,sp
		zBuffer.texName = 0;
    15cc:	|   clr.l 19b02 <zBuffer+0x54>
        FreeVec(zBuffer.tex);
    15d2:	|   move.l 19afe <zBuffer+0x50>,4(sp)
    15da:	|   move.l 19b8e <SysBase>,d0
    15e0:	|   movea.l d0,a6
    15e2:	|   movea.l 4(sp),a1
    15e6:	|   jsr -690(a6)
		zBuffer.tex = NULL;
    15ea:	|   clr.l 19afe <zBuffer+0x50>
	}
	zBuffer.numPanels = 0;
    15f0:	\-> clr.l 19ab6 <zBuffer+0x8>
	zBuffer.originalNum =0;
    15f6:	    clr.l 19afa <zBuffer+0x4c>
}
    15fc:	    nop
    15fe:	    movea.l (sp)+,a6
    1600:	    addq.l #4,sp
    1602:	    rts

00001604 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    1604:	                         lea -528(sp),sp
    1608:	                         movem.l d2-d3/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    160c:	                         clr.l 528(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();
    1610:	                         jsr 15ae <killZBuffer>

	zBuffer.originalNum = y;
    1616:	                         move.l 544(sp),d0
    161a:	                         move.l d0,19afa <zBuffer+0x4c>
	if (! openFileFromNum (y)) return FALSE;
    1620:	                         move.l 544(sp),d0
    1624:	                         move.l d0,-(sp)
    1626:	                         jsr 3e76 <openFileFromNum>
    162c:	                         addq.l #4,sp
    162e:	                         tst.l d0
    1630:	                     /-- bne.s 1638 <setZBuffer+0x34>
    1632:	                     |   clr.w d0
    1634:	/--------------------|-- bra.w 1a16 <setZBuffer+0x412>
	if (FGetC (bigDataFile) != 'S' && FGetC (bigDataFile) != 'z' && FGetC (bigDataFile) != 'b') 
    1638:	|                    \-> move.l 19b76 <bigDataFile>,524(sp)
    1640:	|                        move.l 19b96 <DOSBase>,d0
    1646:	|                        movea.l d0,a6
    1648:	|                        move.l 524(sp),d1
    164c:	|                        jsr -306(a6)
    1650:	|                        move.l d0,520(sp)
    1654:	|                        move.l 520(sp),d0
    1658:	|                        moveq #83,d1
    165a:	|                        cmp.l d0,d1
    165c:	|                    /-- beq.s 16be <setZBuffer+0xba>
    165e:	|                    |   move.l 19b76 <bigDataFile>,516(sp)
    1666:	|                    |   move.l 19b96 <DOSBase>,d0
    166c:	|                    |   movea.l d0,a6
    166e:	|                    |   move.l 516(sp),d1
    1672:	|                    |   jsr -306(a6)
    1676:	|                    |   move.l d0,512(sp)
    167a:	|                    |   move.l 512(sp),d0
    167e:	|                    |   moveq #122,d1
    1680:	|                    |   cmp.l d0,d1
    1682:	|                    +-- beq.s 16be <setZBuffer+0xba>
    1684:	|                    |   move.l 19b76 <bigDataFile>,508(sp)
    168c:	|                    |   move.l 19b96 <DOSBase>,d0
    1692:	|                    |   movea.l d0,a6
    1694:	|                    |   move.l 508(sp),d1
    1698:	|                    |   jsr -306(a6)
    169c:	|                    |   move.l d0,504(sp)
    16a0:	|                    |   move.l 504(sp),d0
    16a4:	|                    |   moveq #98,d1
    16a6:	|                    |   cmp.l d0,d1
    16a8:	|                    +-- beq.s 16be <setZBuffer+0xba>
	{
		 KPrintF("Not a Z-buffer file");
    16aa:	|                    |   pea 12efe <PutChar+0x306>
    16b0:	|                    |   jsr 12130 <KPrintF>
    16b6:	|                    |   addq.l #4,sp
		 return FALSE;
    16b8:	|                    |   clr.w d0
    16ba:	+--------------------|-- bra.w 1a16 <setZBuffer+0x412>
	}

	switch (FGetC (bigDataFile)) {
    16be:	|                    \-> move.l 19b76 <bigDataFile>,500(sp)
    16c6:	|                        move.l 19b96 <DOSBase>,d0
    16cc:	|                        movea.l d0,a6
    16ce:	|                        move.l 500(sp),d1
    16d2:	|                        jsr -306(a6)
    16d6:	|                        move.l d0,496(sp)
    16da:	|                        move.l 496(sp),d0
    16de:	|                    /-- beq.s 16e8 <setZBuffer+0xe4>
    16e0:	|                    |   moveq #1,d1
    16e2:	|                    |   cmp.l d0,d1
    16e4:	|                 /--|-- beq.s 16fe <setZBuffer+0xfa>
    16e6:	|              /--|--|-- bra.s 172c <setZBuffer+0x128>
		case 0:
		zBuffer.width = 640;
    16e8:	|              |  |  \-> move.l #640,19aae <zBuffer>
		zBuffer.height = 480;
    16f2:	|              |  |      move.l #480,19ab2 <zBuffer+0x4>
		break;
    16fc:	|              |  |  /-- bra.s 1740 <setZBuffer+0x13c>
		
		case 1:
		zBuffer.width = get2bytes (bigDataFile);
    16fe:	|              |  \--|-> move.l 19b76 <bigDataFile>,d0
    1704:	|              |     |   move.l d0,-(sp)
    1706:	|              |     |   jsr 6bc <get2bytes>
    170c:	|              |     |   addq.l #4,sp
    170e:	|              |     |   move.l d0,19aae <zBuffer>
		zBuffer.height = get2bytes (bigDataFile);
    1714:	|              |     |   move.l 19b76 <bigDataFile>,d0
    171a:	|              |     |   move.l d0,-(sp)
    171c:	|              |     |   jsr 6bc <get2bytes>
    1722:	|              |     |   addq.l #4,sp
    1724:	|              |     |   move.l d0,19ab2 <zBuffer+0x4>
		break;
    172a:	|              |     +-- bra.s 1740 <setZBuffer+0x13c>
		
		default:
		KPrintF("Extended Z-buffer format not supported in this version of the SLUDGE engine");
    172c:	|              \-----|-> pea 12f12 <PutChar+0x31a>
    1732:	|                    |   jsr 12130 <KPrintF>
    1738:	|                    |   addq.l #4,sp
		return FALSE;
    173a:	|                    |   clr.w d0
    173c:	+--------------------|-- bra.w 1a16 <setZBuffer+0x412>
	}
	if ((unsigned int) zBuffer.width != sceneWidth || (unsigned int) zBuffer.height != sceneHeight) {
    1740:	|                    \-> move.l 19aae <zBuffer>,d0
    1746:	|                        move.l d0,d1
    1748:	|                        move.l 19c14 <sceneWidth>,d0
    174e:	|                        cmp.l d1,d0
    1750:	|                    /-- bne.s 1764 <setZBuffer+0x160>
    1752:	|                    |   move.l 19ab2 <zBuffer+0x4>,d0
    1758:	|                    |   move.l d0,d1
    175a:	|                    |   move.l 19c18 <sceneHeight>,d0
    1760:	|                    |   cmp.l d1,d0
    1762:	|                 /--|-- beq.s 17b4 <setZBuffer+0x1b0>
		char tmp[256];
		sprintf (tmp, "Z-w: %d Z-h:%d w: %d, h:%d", zBuffer.width, zBuffer.height, sceneWidth, sceneHeight);
    1764:	|                 |  \-> movea.l 19c18 <sceneHeight>,a1
    176a:	|                 |      movea.l 19c14 <sceneWidth>,a0
    1770:	|                 |      move.l 19ab2 <zBuffer+0x4>,d1
    1776:	|                 |      move.l 19aae <zBuffer>,d0
    177c:	|                 |      move.l a1,-(sp)
    177e:	|                 |      move.l a0,-(sp)
    1780:	|                 |      move.l d1,-(sp)
    1782:	|                 |      move.l d0,-(sp)
    1784:	|                 |      pea 12f5e <PutChar+0x366>
    178a:	|                 |      moveq #32,d0
    178c:	|                 |      add.l sp,d0
    178e:	|                 |      move.l d0,-(sp)
    1790:	|                 |      jsr f8e6 <sprintf>
    1796:	|                 |      lea 24(sp),sp
		KPrintF("Z-buffer width and height don't match scene width and height", tmp);
    179a:	|                 |      moveq #12,d0
    179c:	|                 |      add.l sp,d0
    179e:	|                 |      move.l d0,-(sp)
    17a0:	|                 |      pea 12f79 <cursors.c.412ac4f3+0x4>
    17a6:	|                 |      jsr 12130 <KPrintF>
    17ac:	|                 |      addq.l #8,sp
		return FALSE;
    17ae:	|                 |      clr.w d0
    17b0:	+-----------------|----- bra.w 1a16 <setZBuffer+0x412>
	}
		
	zBuffer.numPanels = FGetC (bigDataFile);
    17b4:	|                 \----> move.l 19b76 <bigDataFile>,492(sp)
    17bc:	|                        move.l 19b96 <DOSBase>,d0
    17c2:	|                        movea.l d0,a6
    17c4:	|                        move.l 492(sp),d1
    17c8:	|                        jsr -306(a6)
    17cc:	|                        move.l d0,488(sp)
    17d0:	|                        move.l 488(sp),d0
    17d4:	|                        move.l d0,19ab6 <zBuffer+0x8>
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    17da:	|                        clr.l 544(sp)
    17de:	|                    /-- bra.s 180a <setZBuffer+0x206>
		yPalette[y] = get2bytes (bigDataFile);
    17e0:	|                 /--|-> move.l 19b76 <bigDataFile>,d0
    17e6:	|                 |  |   move.l d0,-(sp)
    17e8:	|                 |  |   jsr 6bc <get2bytes>
    17ee:	|                 |  |   addq.l #4,sp
    17f0:	|                 |  |   move.l 544(sp),d1
    17f4:	|                 |  |   add.l d1,d1
    17f6:	|                 |  |   add.l d1,d1
    17f8:	|                 |  |   lea 540(sp),a0
    17fc:	|                 |  |   add.l a0,d1
    17fe:	|                 |  |   movea.l d1,a0
    1800:	|                 |  |   lea -144(a0),a0
    1804:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    1806:	|                 |  |   addq.l #1,544(sp)
    180a:	|                 |  \-> move.l 19ab6 <zBuffer+0x8>,d0
    1810:	|                 |      cmp.l 544(sp),d0
    1814:	|                 \----- bhi.s 17e0 <setZBuffer+0x1dc>
	}
	sortZPal (yPalette, sorted, zBuffer.numPanels);
    1816:	|                        move.l 19ab6 <zBuffer+0x8>,d0
    181c:	|                        move.l d0,-(sp)
    181e:	|                        move.l sp,d0
    1820:	|                        addi.l #336,d0
    1826:	|                        move.l d0,-(sp)
    1828:	|                        move.l sp,d0
    182a:	|                        addi.l #404,d0
    1830:	|                        move.l d0,-(sp)
    1832:	|                        jsr 1a20 <sortZPal>
    1838:	|                        lea 12(sp),sp
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    183c:	|                        clr.l 544(sp)
    1840:	|                    /-- bra.s 18b8 <setZBuffer+0x2b4>
		zBuffer.panel[y] = yPalette[sorted[y]];
    1842:	|                 /--|-> move.l 544(sp),d0
    1846:	|                 |  |   add.l d0,d0
    1848:	|                 |  |   add.l d0,d0
    184a:	|                 |  |   move.l #540,d1
    1850:	|                 |  |   add.l sp,d1
    1852:	|                 |  |   add.l d1,d0
    1854:	|                 |  |   movea.l d0,a0
    1856:	|                 |  |   lea -208(a0),a0
    185a:	|                 |  |   move.l (a0),d0
    185c:	|                 |  |   add.l d0,d0
    185e:	|                 |  |   add.l d0,d0
    1860:	|                 |  |   lea 540(sp),a0
    1864:	|                 |  |   add.l a0,d0
    1866:	|                 |  |   movea.l d0,a0
    1868:	|                 |  |   lea -144(a0),a0
    186c:	|                 |  |   move.l (a0),d0
    186e:	|                 |  |   move.l 544(sp),d1
    1872:	|                 |  |   addq.l #3,d1
    1874:	|                 |  |   add.l d1,d1
    1876:	|                 |  |   movea.l d1,a1
    1878:	|                 |  |   adda.l d1,a1
    187a:	|                 |  |   lea 19aae <zBuffer>,a0
    1880:	|                 |  |   move.l d0,(0,a1,a0.l)
		sortback[sorted[y]] = y; 
    1884:	|                 |  |   move.l 544(sp),d0
    1888:	|                 |  |   add.l d0,d0
    188a:	|                 |  |   add.l d0,d0
    188c:	|                 |  |   move.l #540,d1
    1892:	|                 |  |   add.l sp,d1
    1894:	|                 |  |   add.l d1,d0
    1896:	|                 |  |   movea.l d0,a0
    1898:	|                 |  |   lea -208(a0),a0
    189c:	|                 |  |   move.l (a0),d1
    189e:	|                 |  |   move.l 544(sp),d0
    18a2:	|                 |  |   add.l d1,d1
    18a4:	|                 |  |   add.l d1,d1
    18a6:	|                 |  |   lea 540(sp),a0
    18aa:	|                 |  |   add.l a0,d1
    18ac:	|                 |  |   movea.l d1,a0
    18ae:	|                 |  |   lea -272(a0),a0
    18b2:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    18b4:	|                 |  |   addq.l #1,544(sp)
    18b8:	|                 |  \-> move.l 19ab6 <zBuffer+0x8>,d0
    18be:	|                 |      cmp.l 544(sp),d0
    18c2:	|                 \----- bhi.w 1842 <setZBuffer+0x23e>
	}
	
	int picWidth = sceneWidth;
    18c6:	|                        move.l 19c14 <sceneWidth>,d0
    18cc:	|                        move.l d0,484(sp)
	int picHeight = sceneHeight;
    18d0:	|                        move.l 19c18 <sceneHeight>,d0
    18d6:	|                        move.l d0,480(sp)

	zBuffer.tex = AllocVec(picHeight*picWidth,MEMF_ANY);
    18da:	|                        move.l 484(sp),-(sp)
    18de:	|                        move.l 484(sp),-(sp)
    18e2:	|                        jsr 12ae2 <__mulsi3>
    18e8:	|                        addq.l #8,sp
    18ea:	|                        move.l d0,476(sp)
    18ee:	|                        clr.l 472(sp)
    18f2:	|                        move.l 19b8e <SysBase>,d0
    18f8:	|                        movea.l d0,a6
    18fa:	|                        move.l 476(sp),d0
    18fe:	|                        move.l 472(sp),d1
    1902:	|                        jsr -684(a6)
    1906:	|                        move.l d0,468(sp)
    190a:	|                        move.l 468(sp),d0
    190e:	|                        move.l d0,19afe <zBuffer+0x50>
	if (!zBuffer.tex) {
    1914:	|                        move.l 19afe <zBuffer+0x50>,d0
    191a:	|                    /-- bne.s 1930 <setZBuffer+0x32c>
		KPrintF("setZBuffer: Cannot allocate memory");
    191c:	|                    |   pea 12fb6 <cursors.c.412ac4f3+0x41>
    1922:	|                    |   jsr 12130 <KPrintF>
    1928:	|                    |   addq.l #4,sp
		return FALSE;
    192a:	|                    |   clr.w d0
    192c:	+--------------------|-- bra.w 1a16 <setZBuffer+0x412>
	}

	for (y = 0; y < sceneHeight; y ++) {
    1930:	|                    \-> clr.l 544(sp)
    1934:	|     /----------------- bra.w 1a00 <setZBuffer+0x3fc>
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    1938:	|  /--|----------------> clr.l 536(sp)
    193c:	|  |  |     /----------- bra.w 19ec <setZBuffer+0x3e8>
			if (stillToGo == 0) {
    1940:	|  |  |  /--|----------> tst.l 528(sp)
    1944:	|  |  |  |  |  /-------- bne.s 19a2 <setZBuffer+0x39e>
				n = FGetC (bigDataFile);
    1946:	|  |  |  |  |  |         move.l 19b76 <bigDataFile>,464(sp)
    194e:	|  |  |  |  |  |         move.l 19b96 <DOSBase>,d0
    1954:	|  |  |  |  |  |         movea.l d0,a6
    1956:	|  |  |  |  |  |         move.l 464(sp),d1
    195a:	|  |  |  |  |  |         jsr -306(a6)
    195e:	|  |  |  |  |  |         move.l d0,460(sp)
    1962:	|  |  |  |  |  |         move.l 460(sp),d0
    1966:	|  |  |  |  |  |         move.l d0,532(sp)
				stillToGo = n >> 4;
    196a:	|  |  |  |  |  |         move.l 532(sp),d0
    196e:	|  |  |  |  |  |         asr.l #4,d0
    1970:	|  |  |  |  |  |         move.l d0,528(sp)
				if (stillToGo == 15) stillToGo = get2bytes (bigDataFile) + 16l;
    1974:	|  |  |  |  |  |         moveq #15,d0
    1976:	|  |  |  |  |  |         cmp.l 528(sp),d0
    197a:	|  |  |  |  |  |  /----- bne.s 1998 <setZBuffer+0x394>
    197c:	|  |  |  |  |  |  |      move.l 19b76 <bigDataFile>,d0
    1982:	|  |  |  |  |  |  |      move.l d0,-(sp)
    1984:	|  |  |  |  |  |  |      jsr 6bc <get2bytes>
    198a:	|  |  |  |  |  |  |      addq.l #4,sp
    198c:	|  |  |  |  |  |  |      movea.l d0,a0
    198e:	|  |  |  |  |  |  |      lea 16(a0),a0
    1992:	|  |  |  |  |  |  |      move.l a0,528(sp)
    1996:	|  |  |  |  |  |  |  /-- bra.s 199c <setZBuffer+0x398>
				else stillToGo ++;
    1998:	|  |  |  |  |  |  \--|-> addq.l #1,528(sp)
				n &= 15;
    199c:	|  |  |  |  |  |     \-> moveq #15,d1
    199e:	|  |  |  |  |  |         and.l d1,532(sp)
			}
			zBuffer.tex[y*picWidth + x] = sortback[n]*16;
    19a2:	|  |  |  |  |  \-------> move.l 532(sp),d0
    19a6:	|  |  |  |  |            add.l d0,d0
    19a8:	|  |  |  |  |            add.l d0,d0
    19aa:	|  |  |  |  |            lea 540(sp),a0
    19ae:	|  |  |  |  |            add.l a0,d0
    19b0:	|  |  |  |  |            movea.l d0,a0
    19b2:	|  |  |  |  |            lea -272(a0),a0
    19b6:	|  |  |  |  |            move.l (a0),d0
    19b8:	|  |  |  |  |            move.l d0,d2
    19ba:	|  |  |  |  |            move.l 19afe <zBuffer+0x50>,d3
    19c0:	|  |  |  |  |            move.l 484(sp),d0
    19c4:	|  |  |  |  |            move.l 544(sp),-(sp)
    19c8:	|  |  |  |  |            move.l d0,-(sp)
    19ca:	|  |  |  |  |            jsr 12ae2 <__mulsi3>
    19d0:	|  |  |  |  |            addq.l #8,sp
    19d2:	|  |  |  |  |            move.l d0,d1
    19d4:	|  |  |  |  |            move.l 536(sp),d0
    19d8:	|  |  |  |  |            add.l d1,d0
    19da:	|  |  |  |  |            movea.l d3,a0
    19dc:	|  |  |  |  |            adda.l d0,a0
    19de:	|  |  |  |  |            move.b d2,d0
    19e0:	|  |  |  |  |            lsl.b #4,d0
    19e2:	|  |  |  |  |            move.b d0,(a0)
			stillToGo --;
    19e4:	|  |  |  |  |            subq.l #1,528(sp)
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    19e8:	|  |  |  |  |            addq.l #1,536(sp)
    19ec:	|  |  |  |  \----------> move.l 536(sp),d1
    19f0:	|  |  |  |               move.l 19c14 <sceneWidth>,d0
    19f6:	|  |  |  |               cmp.l d1,d0
    19f8:	|  |  |  \-------------- bhi.w 1940 <setZBuffer+0x33c>
	for (y = 0; y < sceneHeight; y ++) {
    19fc:	|  |  |                  addq.l #1,544(sp)
    1a00:	|  |  \----------------> move.l 19c18 <sceneHeight>,d0
    1a06:	|  |                     cmp.l 544(sp),d0
    1a0a:	|  \-------------------- bhi.w 1938 <setZBuffer+0x334>
		}
	}

	finishAccess ();
    1a0e:	|                        jsr 3d6e <finishAccess>
	
	return TRUE;
    1a14:	|                        moveq #1,d0
}
    1a16:	\----------------------> movem.l (sp)+,d2-d3/a6
    1a1a:	                         lea 528(sp),sp
    1a1e:	                         rts

00001a20 <sortZPal>:

void sortZPal (int *oldpal, int *newpal, int size) {
    1a20:	             subq.l #8,sp
	int i, tmp;

	for (i = 0; i < size; i ++) {
    1a22:	             clr.l 4(sp)
    1a26:	         /-- bra.s 1a3e <sortZPal+0x1e>
		newpal[i] = i;
    1a28:	      /--|-> move.l 4(sp),d0
    1a2c:	      |  |   add.l d0,d0
    1a2e:	      |  |   add.l d0,d0
    1a30:	      |  |   movea.l 16(sp),a0
    1a34:	      |  |   adda.l d0,a0
    1a36:	      |  |   move.l 4(sp),(a0)
	for (i = 0; i < size; i ++) {
    1a3a:	      |  |   addq.l #1,4(sp)
    1a3e:	      |  \-> move.l 4(sp),d0
    1a42:	      |      cmp.l 20(sp),d0
    1a46:	      \----- blt.s 1a28 <sortZPal+0x8>
	}

	if (size < 2) return;		
    1a48:	             moveq #1,d0
    1a4a:	             cmp.l 20(sp),d0
    1a4e:	/----------- bge.w 1b00 <sortZPal+0xe0>
		
	for (i = 1; i < size; i ++) {
    1a52:	|            moveq #1,d0
    1a54:	|            move.l d0,4(sp)
    1a58:	|     /----- bra.w 1af2 <sortZPal+0xd2>
		if (oldpal[newpal[i]] < oldpal[newpal[i-1]]) {
    1a5c:	|  /--|----> move.l 4(sp),d0
    1a60:	|  |  |      add.l d0,d0
    1a62:	|  |  |      add.l d0,d0
    1a64:	|  |  |      movea.l 16(sp),a0
    1a68:	|  |  |      adda.l d0,a0
    1a6a:	|  |  |      move.l (a0),d0
    1a6c:	|  |  |      add.l d0,d0
    1a6e:	|  |  |      add.l d0,d0
    1a70:	|  |  |      movea.l 12(sp),a0
    1a74:	|  |  |      adda.l d0,a0
    1a76:	|  |  |      move.l (a0),d1
    1a78:	|  |  |      move.l 4(sp),d0
    1a7c:	|  |  |      addi.l #1073741823,d0
    1a82:	|  |  |      add.l d0,d0
    1a84:	|  |  |      add.l d0,d0
    1a86:	|  |  |      movea.l 16(sp),a0
    1a8a:	|  |  |      adda.l d0,a0
    1a8c:	|  |  |      move.l (a0),d0
    1a8e:	|  |  |      add.l d0,d0
    1a90:	|  |  |      add.l d0,d0
    1a92:	|  |  |      movea.l 12(sp),a0
    1a96:	|  |  |      adda.l d0,a0
    1a98:	|  |  |      move.l (a0),d0
    1a9a:	|  |  |      cmp.l d1,d0
    1a9c:	|  |  |  /-- ble.s 1aee <sortZPal+0xce>
			tmp = newpal[i];
    1a9e:	|  |  |  |   move.l 4(sp),d0
    1aa2:	|  |  |  |   add.l d0,d0
    1aa4:	|  |  |  |   add.l d0,d0
    1aa6:	|  |  |  |   movea.l 16(sp),a0
    1aaa:	|  |  |  |   adda.l d0,a0
    1aac:	|  |  |  |   move.l (a0),(sp)
			newpal[i] = newpal[i-1];
    1aae:	|  |  |  |   move.l 4(sp),d0
    1ab2:	|  |  |  |   addi.l #1073741823,d0
    1ab8:	|  |  |  |   add.l d0,d0
    1aba:	|  |  |  |   add.l d0,d0
    1abc:	|  |  |  |   movea.l 16(sp),a1
    1ac0:	|  |  |  |   adda.l d0,a1
    1ac2:	|  |  |  |   move.l 4(sp),d0
    1ac6:	|  |  |  |   add.l d0,d0
    1ac8:	|  |  |  |   add.l d0,d0
    1aca:	|  |  |  |   movea.l 16(sp),a0
    1ace:	|  |  |  |   adda.l d0,a0
    1ad0:	|  |  |  |   move.l (a1),d0
    1ad2:	|  |  |  |   move.l d0,(a0)
			newpal[i-1] = tmp;
    1ad4:	|  |  |  |   move.l 4(sp),d0
    1ad8:	|  |  |  |   addi.l #1073741823,d0
    1ade:	|  |  |  |   add.l d0,d0
    1ae0:	|  |  |  |   add.l d0,d0
    1ae2:	|  |  |  |   movea.l 16(sp),a0
    1ae6:	|  |  |  |   adda.l d0,a0
    1ae8:	|  |  |  |   move.l (sp),(a0)
			i = 0;
    1aea:	|  |  |  |   clr.l 4(sp)
	for (i = 1; i < size; i ++) {
    1aee:	|  |  |  \-> addq.l #1,4(sp)
    1af2:	|  |  \----> move.l 4(sp),d0
    1af6:	|  |         cmp.l 20(sp),d0
    1afa:	|  \-------- blt.w 1a5c <sortZPal+0x3c>
    1afe:	|        /-- bra.s 1b02 <sortZPal+0xe2>
	if (size < 2) return;		
    1b00:	\--------|-> nop
		}
	}
    1b02:	         \-> addq.l #8,sp
    1b04:	             rts

00001b06 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    1b06:	/-------> lea -16(sp),sp
    1b0a:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    1b0c:	|         move.l 24(sp),-(sp)
    1b10:	|         jsr 399e <pauseFunction>
    1b16:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    1b18:	|     /-- bra.s 1b2a <abortFunction+0x24>
    1b1a:	|  /--|-> moveq #24,d0
    1b1c:	|  |  |   add.l 24(sp),d0
    1b20:	|  |  |   move.l d0,-(sp)
    1b22:	|  |  |   jsr 10a60 <trimStack>
    1b28:	|  |  |   addq.l #4,sp
    1b2a:	|  |  \-> movea.l 24(sp),a0
    1b2e:	|  |      move.l 24(a0),d0
    1b32:	|  \----- bne.s 1b1a <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    1b34:	|         movea.l 24(sp),a0
    1b38:	|         move.l 4(a0),12(sp)
    1b3e:	|         move.l 19b8e <SysBase>,d0
    1b44:	|         movea.l d0,a6
    1b46:	|         movea.l 12(sp),a1
    1b4a:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    1b4e:	|         clr.l 16(sp)
    1b52:	|     /-- bra.s 1b72 <abortFunction+0x6c>
    1b54:	|  /--|-> movea.l 24(sp),a0
    1b58:	|  |  |   move.l 20(a0),d1
    1b5c:	|  |  |   move.l 16(sp),d0
    1b60:	|  |  |   lsl.l #3,d0
    1b62:	|  |  |   add.l d1,d0
    1b64:	|  |  |   move.l d0,-(sp)
    1b66:	|  |  |   jsr 1032a <unlinkVar>
    1b6c:	|  |  |   addq.l #4,sp
    1b6e:	|  |  |   addq.l #1,16(sp)
    1b72:	|  |  \-> movea.l 24(sp),a0
    1b76:	|  |      move.l 8(a0),d0
    1b7a:	|  |      cmp.l 16(sp),d0
    1b7e:	|  \----- bgt.s 1b54 <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    1b80:	|         movea.l 24(sp),a0
    1b84:	|         move.l 20(a0),8(sp)
    1b8a:	|         move.l 19b8e <SysBase>,d0
    1b90:	|         movea.l d0,a6
    1b92:	|         movea.l 8(sp),a1
    1b96:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    1b9a:	|         moveq #28,d0
    1b9c:	|         add.l 24(sp),d0
    1ba0:	|         move.l d0,-(sp)
    1ba2:	|         jsr 1032a <unlinkVar>
    1ba8:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    1baa:	|         movea.l 24(sp),a0
    1bae:	|         move.l 40(a0),d0
    1bb2:	|     /-- beq.s 1bc4 <abortFunction+0xbe>
    1bb4:	|     |   movea.l 24(sp),a0
    1bb8:	|     |   move.l 40(a0),d0
    1bbc:	|     |   move.l d0,-(sp)
    1bbe:	\-----|-- jsr 1b06 <abortFunction>(pc)
    1bc2:	      |   addq.l #4,sp
	FreeVec(fun);
    1bc4:	      \-> move.l 24(sp),4(sp)
    1bca:	          move.l 19b8e <SysBase>,d0
    1bd0:	          movea.l d0,a6
    1bd2:	          movea.l 4(sp),a1
    1bd6:	          jsr -690(a6)
	fun = NULL;
    1bda:	          clr.l 24(sp)
}
    1bde:	          nop
    1be0:	          movea.l (sp)+,a6
    1be2:	          lea 16(sp),sp
    1be6:	          rts

00001be8 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    1be8:	          subq.l #8,sp
	int n = 0;
    1bea:	          clr.l 4(sp)
	*killedMyself = FALSE;
    1bee:	          movea.l 20(sp),a0
    1bf2:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    1bf4:	          move.l 19b2a <allRunningFunctions>,(sp)
	while (fun) {
    1bfa:	   /----- bra.s 1c28 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    1bfc:	/--|----> movea.l (sp),a0
    1bfe:	|  |      move.l (a0),d0
    1c00:	|  |      cmp.l 12(sp),d0
    1c04:	|  |  /-- bne.s 1c22 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    1c06:	|  |  |   movea.l (sp),a0
    1c08:	|  |  |   move.w #1,54(a0)
			n++;
    1c0e:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    1c12:	|  |  |   move.l (sp),d0
    1c14:	|  |  |   cmp.l 16(sp),d0
    1c18:	|  |  +-- bne.s 1c22 <cancelAFunction+0x3a>
    1c1a:	|  |  |   movea.l 20(sp),a0
    1c1e:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    1c22:	|  |  \-> movea.l (sp),a0
    1c24:	|  |      move.l 44(a0),(sp)
	while (fun) {
    1c28:	|  \----> tst.l (sp)
    1c2a:	\-------- bne.s 1bfc <cancelAFunction+0x14>
	}
	return n;
    1c2c:	          move.l 4(sp),d0
}
    1c30:	          addq.l #8,sp
    1c32:	          rts

00001c34 <completeTimers>:


void completeTimers () {
    1c34:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    1c36:	          move.l 19b2a <allRunningFunctions>,(sp)

	while (thisFunction) {
    1c3c:	   /----- bra.s 1c52 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    1c3e:	/--|----> movea.l (sp),a0
    1c40:	|  |      move.b 56(a0),d0
    1c44:	|  |  /-- bne.s 1c4c <completeTimers+0x18>
    1c46:	|  |  |   movea.l (sp),a0
    1c48:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    1c4c:	|  |  \-> movea.l (sp),a0
    1c4e:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    1c52:	|  \----> tst.l (sp)
    1c54:	\-------- bne.s 1c3e <completeTimers+0xa>
	}
}
    1c56:	          nop
    1c58:	          nop
    1c5a:	          addq.l #4,sp
    1c5c:	          rts

00001c5e <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    1c5e:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    1c62:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    1c68:	                                                             movea.l 80(sp),a0
    1c6c:	                                                             move.w 54(a0),d0
    1c70:	/----------------------------------------------------------- beq.w 2afe <continueFunction+0xea0>
		abortFunction (fun);
    1c74:	|                                                            move.l 80(sp),-(sp)
    1c78:	|                                                            jsr 1b06 <abortFunction>
    1c7e:	|                                                            addq.l #4,sp
		return TRUE;
    1c80:	|                                                            moveq #1,d0
    1c82:	|  /-------------------------------------------------------- bra.w 2b08 <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    1c86:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    1c8c:	|  |  |                                                      movea.l 80(sp),a0
    1c90:	|  |  |                                                      move.l 4(a0),d1
    1c94:	|  |  |                                                      movea.l 80(sp),a0
    1c98:	|  |  |                                                      move.l 36(a0),d0
    1c9c:	|  |  |                                                      lsl.l #3,d0
    1c9e:	|  |  |                                                      movea.l d1,a0
    1ca0:	|  |  |                                                      adda.l d0,a0
    1ca2:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    1ca8:	|  |  |                                                      movea.l 80(sp),a0
    1cac:	|  |  |                                                      move.l 4(a0),d1
    1cb0:	|  |  |                                                      movea.l 80(sp),a0
    1cb4:	|  |  |                                                      move.l 36(a0),d0
    1cb8:	|  |  |                                                      lsl.l #3,d0
    1cba:	|  |  |                                                      movea.l d1,a0
    1cbc:	|  |  |                                                      adda.l d0,a0
    1cbe:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    1cc2:	|  |  |                                                      moveq #41,d0
    1cc4:	|  |  |                                                      cmp.l 64(sp),d0
    1cc8:	|  |  |  /-------------------------------------------------- bcs.w 2ab2 <continueFunction+0xe54>
    1ccc:	|  |  |  |                                                   move.l 64(sp),d0
    1cd0:	|  |  |  |                                                   add.l d0,d0
    1cd2:	|  |  |  |                                                   movea.l d0,a0
    1cd4:	|  |  |  |                                                   adda.l #7392,a0
    1cda:	|  |  |  |                                                   move.w (a0),d0
    1cdc:	|  |  |  |                                                   jmp (1ce0 <continueFunction+0x82>,pc,d0.w)
    1ce0:	|  |  |  |                                                   bset d6,(a2)
    1ce2:	|  |  |  |                                                   ori.w #2670,(a4)
    1ce6:	|  |  |  |                                                   eori.w #2416,d6
    1cea:	|  |  |  |                                                   bchg d4,d2
    1cec:	|  |  |  |                                                   bclr d4,(a4)+
    1cee:	|  |  |  |                                                   andi.l #181013194,d4
    1cf4:	|  |  |  |                                                   .short 0x0aca
    1cf6:	|  |  |  |                                                   .short 0x0aca
    1cf8:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    1d00:	|  |  |  |                                                   .short 0x0aca
    1d02:	|  |  |  |                                                   andi.w #906,-(a4)
    1d06:	|  |  |  |                                                   bchg d1,196(a2)
    1d0a:	|  |  |  |                                                   bset d1,580(a4)
    1d0e:	|  |  |  |                                                   bclr d1,2576(a2)
    1d12:	|  |  |  |                                                   andi.b #-56,2762(a2)
    1d18:	|  |  |  |                                                   .short 0x0aca
    1d1a:	|  |  |  |                                                   eori.l #63572682,d0
    1d20:	|  |  |  |                                                   .short 0x0aca
    1d22:	|  |  |  |                                                   bchg d3,-(a2)
    1d24:	|  |  |  |                                                   bchg #-36,(a2)
    1d28:	|  |  |  |                                                   .short 0x08cc
    1d2a:	|  |  |  |                                                   addi.b #14,1038(a0)
    1d30:	|  |  |  |                                                   .short 0x040e
    1d32:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    1d36:	|  |  |  |                                                   ori.w #8232,(a0)
    1d3a:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    1d40:	|  |  |  |                                                   ori.w #12136,(a0)
    1d44:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    1d4a:	|  |  |  |                                                   ori.w #12328,(a0)
    1d4e:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    1d54:	|  |  |  |                                                   add.l 44(sp),d1
    1d58:	|  |  |  |                                                   moveq #28,d0
    1d5a:	|  |  |  |                                                   add.l 80(sp),d0
    1d5e:	|  |  |  |                                                   move.l d1,-(sp)
    1d60:	|  |  |  |                                                   move.l d0,-(sp)
    1d62:	|  |  |  |                                                   jsr 10596 <copyVariable>
    1d68:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    1d6a:	|  |  |  |                                                   move.l 80(sp),-(sp)
    1d6e:	|  |  |  |                                                   jsr 2b0e <finishFunction>
    1d74:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    1d76:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    1d7c:	|  |  |  |                                                   move.l 80(sp),-(sp)
    1d80:	|  |  |  |                                                   jsr 39e0 <restartFunction>
    1d86:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    1d88:	|  |  |  |  /----------------------------------------------- bra.w 2ae6 <continueFunction+0xe88>
				finishFunction (fun);
    1d8c:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    1d90:	|  |  |  |  |                                                jsr 2b0e <finishFunction>
    1d96:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    1d98:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    1d9c:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    1da0:	|  |  |  |  +----------------------------------------------- bra.w 2ae6 <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    1da4:	|  |  |  |  |                                                movea.l 80(sp),a0
    1da8:	|  |  |  |  |                                                move.l 28(a0),d0
    1dac:	|  |  |  |  |                                                moveq #2,d1
    1dae:	|  |  |  |  |                                                cmp.l d0,d1
    1db0:	|  |  |  |  |                                            /-- beq.s 1dbc <continueFunction+0x15e>
    1db2:	|  |  |  |  |                                            |   moveq #4,d1
    1db4:	|  |  |  |  |                                            |   cmp.l d0,d1
    1db6:	|  |  |  |  |                                         /--|-- beq.s 1e0a <continueFunction+0x1ac>
    1db8:	|  |  |  |  |                                /--------|--|-- bra.w 1ef2 <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    1dbc:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    1dc0:	|  |  |  |  |                                |        |      jsr 399e <pauseFunction>
    1dc6:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    1dc8:	|  |  |  |  |                                |        |      moveq #24,d0
    1dca:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    1dce:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    1dd2:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    1dd6:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    1dda:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    1ddc:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    1de0:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    1de4:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    1de6:	|  |  |  |  |                                |        |      jsr 3c00 <startNewFunctionNum>
    1dec:	|  |  |  |  |                                |        |      lea 20(sp),sp
    1df0:	|  |  |  |  |                                |        |      tst.l d0
    1df2:	|  |  |  |  |                                |        |  /-- bne.s 1dfa <continueFunction+0x19c>
    1df4:	|  |  |  |  |                                |        |  |   clr.w d0
    1df6:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 2b08 <continueFunction+0xeaa>
				fun = allRunningFunctions;
    1dfa:	|  |  |  |  |                                |        |  \-> move.l 19b2a <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    1e02:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    1e06:	|  |  |  |  |                                |  /-----|----- bra.w 1f06 <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    1e0a:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    1e0e:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    1e12:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    1e16:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    1e1a:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    1e1c:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    1e1e:	|  |  |  |  |                                |  |            jsr edda <callBuiltIn>
    1e24:	|  |  |  |  |                                |  |            lea 12(sp),sp
    1e28:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    1e2c:	|  |  |  |  |                                |  |            moveq #5,d0
    1e2e:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    1e32:	|  |  |  |  |                                |  |  /-------- bcs.w 1eee <continueFunction+0x290>
    1e36:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    1e3a:	|  |  |  |  |                                |  |  |         add.l d0,d0
    1e3c:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    1e3e:	|  |  |  |  |                                |  |  |         adda.l #7754,a0
    1e44:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    1e46:	|  |  |  |  |                                |  |  |         jmp (1e4a <continueFunction+0x1ec>,pc,d0.w)
    1e4a:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    1e50:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    1e54:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    1e5a:	|  |  |  |  |                                |  |  |         .short 0x2fd9
    1e5c:	|  |  |  |  |                                |  |  |         jsr 12130 <KPrintF>
    1e62:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    1e64:	|  |  |  |  |                                |  |  |         clr.w d0
    1e66:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 2b08 <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    1e6a:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    1e6e:	|  |  |  |  |                                |  |  |         jsr 399e <pauseFunction>
    1e74:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    1e76:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    1e7a:	|  |  |  |  |                                |  |  |  /----- bra.s 1ef0 <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    1e7c:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    1e80:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    1e84:	|  |  |  |  |                                |  |  |  +----- bra.s 1ef0 <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    1e86:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    1e8a:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    1e90:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    1e92:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    1e96:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    1e9a:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    1e9e:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    1ea0:	|  |  |  |  |                                |  |  |  |      jsr 109ce <setVariable>
    1ea6:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    1eaa:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    1eae:	|  |  |  |  |                                |  |  |  |      jsr 399e <pauseFunction>
    1eb4:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    1eb6:	|  |  |  |  |                                |  |  |  |      move.l 19b5e <noStack>,d1
    1ebc:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    1ec0:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    1ec2:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    1ec4:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    1ec8:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    1eca:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    1ecc:	|  |  |  |  |                                |  |  |  |      jsr 3c00 <startNewFunctionNum>
    1ed2:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    1ed6:	|  |  |  |  |                                |  |  |  |      tst.l d0
    1ed8:	|  |  |  |  |                                |  |  |  |  /-- bne.s 1ee0 <continueFunction+0x282>
    1eda:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    1edc:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 2b08 <continueFunction+0xeaa>
							fun = allRunningFunctions;
    1ee0:	|  |  |  |  |                                |  |  |  |  \-> move.l 19b2a <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    1ee8:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    1eec:	|  |  |  |  |                                |  |  |  +----- bra.s 1ef0 <continueFunction+0x292>

						default:
						break;
    1eee:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    1ef0:	|  |  |  |  |                                |  +-----\----X bra.s 1f06 <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    1ef2:	|  |  |  |  |                                \--|----------> pea 13024 <cursors.c.412ac4f3+0xaf>
    1ef8:	|  |  |  |  |                                   |            jsr 12130 <KPrintF>
    1efe:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    1f00:	|  |  |  |  |                                   |            clr.w d0
    1f02:	|  +--|--|--|-----------------------------------|----------- bra.w 2b08 <continueFunction+0xeaa>
			}
			break;
    1f06:	|  |  |  |  +-----------------------------------\----------X bra.w 2ae6 <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    1f0a:	|  |  |  |  |                                                moveq #28,d0
    1f0c:	|  |  |  |  |                                                add.l 80(sp),d0
    1f10:	|  |  |  |  |                                                clr.l -(sp)
    1f12:	|  |  |  |  |                                                clr.l -(sp)
    1f14:	|  |  |  |  |                                                move.l d0,-(sp)
    1f16:	|  |  |  |  |                                                jsr 109ce <setVariable>
    1f1c:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    1f20:	|  |  |  |  +----------------------------------------------- bra.w 2ae6 <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    1f24:	|  |  |  |  |                                                move.l 68(sp),d1
    1f28:	|  |  |  |  |                                                moveq #28,d0
    1f2a:	|  |  |  |  |                                                add.l 80(sp),d0
    1f2e:	|  |  |  |  |                                                move.l d1,-(sp)
    1f30:	|  |  |  |  |                                                pea 5 <_start+0x5>
    1f34:	|  |  |  |  |                                                move.l d0,-(sp)
    1f36:	|  |  |  |  |                                                jsr 109ce <setVariable>
    1f3c:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    1f40:	|  |  |  |  +----------------------------------------------- bra.w 2ae6 <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    1f44:	|  |  |  |  |                                                move.l 68(sp),d1
    1f48:	|  |  |  |  |                                                moveq #28,d0
    1f4a:	|  |  |  |  |                                                add.l 80(sp),d0
    1f4e:	|  |  |  |  |                                                move.l d1,-(sp)
    1f50:	|  |  |  |  |                                                pea 1 <_start+0x1>
    1f54:	|  |  |  |  |                                                move.l d0,-(sp)
    1f56:	|  |  |  |  |                                                jsr 109ce <setVariable>
    1f5c:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    1f60:	|  |  |  |  +----------------------------------------------- bra.w 2ae6 <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    1f64:	|  |  |  |  |                                                moveq #28,d0
    1f66:	|  |  |  |  |                                                add.l 80(sp),d0
    1f6a:	|  |  |  |  |                                                movea.l 80(sp),a0
    1f6e:	|  |  |  |  |                                                movea.l 20(a0),a0
    1f72:	|  |  |  |  |                                                move.l 68(sp),d1
    1f76:	|  |  |  |  |                                                lsl.l #3,d1
    1f78:	|  |  |  |  |                                                add.l a0,d1
    1f7a:	|  |  |  |  |                                                move.l d0,-(sp)
    1f7c:	|  |  |  |  |                                                move.l d1,-(sp)
    1f7e:	|  |  |  |  |                                                jsr 10596 <copyVariable>
    1f84:	|  |  |  |  |                                                addq.l #8,sp
    1f86:	|  |  |  |  |                                                tst.w d0
    1f88:	|  |  |  |  |  /-------------------------------------------- bne.w 2ac4 <continueFunction+0xe66>
    1f8c:	|  |  |  |  |  |                                             clr.w d0
    1f8e:	|  +--|--|--|--|-------------------------------------------- bra.w 2b08 <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    1f92:	|  |  |  |  |  |                                             moveq #28,d0
    1f94:	|  |  |  |  |  |                                             add.l 80(sp),d0
    1f98:	|  |  |  |  |  |                                             move.l d0,-(sp)
    1f9a:	|  |  |  |  |  |                                             jsr 1061c <getBoolean>
    1fa0:	|  |  |  |  |  |                                             addq.l #4,sp
    1fa2:	|  |  |  |  |  |                                             tst.w d0
    1fa4:	|  |  |  |  |  |                                      /----- beq.s 1fc0 <continueFunction+0x362>
    1fa6:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    1faa:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    1fae:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    1fb0:	|  |  |  |  |  |                                      |      jsr 1061c <getBoolean>
    1fb6:	|  |  |  |  |  |                                      |      addq.l #4,sp
    1fb8:	|  |  |  |  |  |                                      |      tst.w d0
    1fba:	|  |  |  |  |  |                                      +----- beq.s 1fc0 <continueFunction+0x362>
    1fbc:	|  |  |  |  |  |                                      |      moveq #1,d0
    1fbe:	|  |  |  |  |  |                                      |  /-- bra.s 1fc2 <continueFunction+0x364>
    1fc0:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    1fc2:	|  |  |  |  |  |                                         \-> moveq #28,d1
    1fc4:	|  |  |  |  |  |                                             add.l 80(sp),d1
    1fc8:	|  |  |  |  |  |                                             move.l d0,-(sp)
    1fca:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    1fce:	|  |  |  |  |  |                                             move.l d1,-(sp)
    1fd0:	|  |  |  |  |  |                                             jsr 109ce <setVariable>
    1fd6:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    1fda:	|  |  |  |  |  |                                             moveq #24,d0
    1fdc:	|  |  |  |  |  |                                             add.l 80(sp),d0
    1fe0:	|  |  |  |  |  |                                             move.l d0,-(sp)
    1fe2:	|  |  |  |  |  |                                             jsr 10a60 <trimStack>
    1fe8:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    1fea:	|  |  |  |  +--|-------------------------------------------- bra.w 2ae6 <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    1fee:	|  |  |  |  |  |                                             moveq #28,d0
    1ff0:	|  |  |  |  |  |                                             add.l 80(sp),d0
    1ff4:	|  |  |  |  |  |                                             move.l d0,-(sp)
    1ff6:	|  |  |  |  |  |                                             jsr 1061c <getBoolean>
    1ffc:	|  |  |  |  |  |                                             addq.l #4,sp
    1ffe:	|  |  |  |  |  |                                             tst.w d0
    2000:	|  |  |  |  |  |                                         /-- bne.s 2018 <continueFunction+0x3ba>
    2002:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    2006:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    200a:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    200c:	|  |  |  |  |  |                                         |   jsr 1061c <getBoolean>
    2012:	|  |  |  |  |  |                                         |   addq.l #4,sp
    2014:	|  |  |  |  |  |                                         |   tst.w d0
    2016:	|  |  |  |  |  |                                      /--|-- beq.s 201c <continueFunction+0x3be>
    2018:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    201a:	|  |  |  |  |  |                                      |  /-- bra.s 201e <continueFunction+0x3c0>
    201c:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    201e:	|  |  |  |  |  |                                         \-> moveq #28,d1
    2020:	|  |  |  |  |  |                                             add.l 80(sp),d1
    2024:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2026:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    202a:	|  |  |  |  |  |                                             move.l d1,-(sp)
    202c:	|  |  |  |  |  |                                             jsr 109ce <setVariable>
    2032:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    2036:	|  |  |  |  |  |                                             moveq #24,d0
    2038:	|  |  |  |  |  |                                             add.l 80(sp),d0
    203c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    203e:	|  |  |  |  |  |                                             jsr 10a60 <trimStack>
    2044:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    2046:	|  |  |  |  +--|-------------------------------------------- bra.w 2ae6 <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    204a:	|  |  |  |  |  |                                             move.l 68(sp),d1
    204e:	|  |  |  |  |  |                                             moveq #28,d0
    2050:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2054:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2056:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    205a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    205c:	|  |  |  |  |  |                                             jsr 109ce <setVariable>
    2062:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    2066:	|  |  |  |  +--|-------------------------------------------- bra.w 2ae6 <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    206a:	|  |  |  |  |  |                                             move.l 68(sp),d1
    206e:	|  |  |  |  |  |                                             moveq #28,d0
    2070:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2074:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2076:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    207a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    207c:	|  |  |  |  |  |                                             jsr 109ce <setVariable>
    2082:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    2086:	|  |  |  |  +--|-------------------------------------------- bra.w 2ae6 <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    208a:	|  |  |  |  |  |                                             move.l 68(sp),d1
    208e:	|  |  |  |  |  |                                             moveq #28,d0
    2090:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2094:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2096:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    209a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    209c:	|  |  |  |  |  |                                             jsr 109ce <setVariable>
    20a2:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    20a6:	|  |  |  |  +--|-------------------------------------------- bra.w 2ae6 <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    20aa:	|  |  |  |  |  |                                             move.l 19a9a <dialogValue>,d0
    20b0:	|  |  |  |  |  |                                             moveq #1,d1
    20b2:	|  |  |  |  |  |                                             cmp.l d0,d1
    20b4:	|  |  |  |  |  |  /----------------------------------------- beq.w 2ac8 <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    20b8:	|  |  |  |  |  |  |                                          pea 13039 <cursors.c.412ac4f3+0xc4>
    20be:	|  |  |  |  |  |  |                                          jsr 12130 <KPrintF>
    20c4:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    20c6:	|  |  |  |  |  |  |                                          clr.w d0
    20c8:	|  +--|--|--|--|--|----------------------------------------- bra.w 2b08 <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    20cc:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    20d0:	|  |  |  |  |  |  |                                          moveq #28,d0
    20d2:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    20d6:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    20d8:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    20da:	|  |  |  |  |  |  |                                          jsr 10160 <loadStringToVar>
    20e0:	|  |  |  |  |  |  |                                          addq.l #8,sp
    20e2:	|  |  |  |  |  |  |                                          tst.w d0
    20e4:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 2acc <continueFunction+0xe6e>
					return FALSE;
    20e8:	|  |  |  |  |  |  |  |                                       clr.w d0
    20ea:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 2b08 <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    20ee:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    20f2:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    20f6:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    20f8:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    20fa:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    20fc:	|  |  |  |  |  |  |  |                                /----- beq.s 215a <continueFunction+0x4fc>
    20fe:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    2100:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    2102:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 22ee <continueFunction+0x690>
    2106:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    2108:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 2114 <continueFunction+0x4b6>
    210a:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    210c:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    210e:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 215a <continueFunction+0x4fc>
    2110:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 22ee <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    2114:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    2116:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    211a:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 2146 <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    211c:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    211e:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    2122:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    2124:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    2126:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    2128:	|  |  |  |  |  |  |  |              |                 |  |   jsr 109ce <setVariable>
    212e:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    2132:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    2134:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    2138:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    213a:	|  |  |  |  |  |  |  |              |                 |  |   jsr 10a60 <trimStack>
    2140:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    2142:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 2304 <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    2146:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 1307a <cursors.c.412ac4f3+0x105>
    214c:	|  |  |  |  |  |  |  |              |  |              |      jsr 12130 <KPrintF>
    2152:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    2154:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    2156:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 2b08 <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    215a:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    215e:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    2162:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    2166:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    2168:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 217e <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    216a:	|  |  |  |  |  |  |  |              |  |                 |   pea 130b6 <cursors.c.412ac4f3+0x141>
    2170:	|  |  |  |  |  |  |  |              |  |                 |   jsr 12130 <KPrintF>
    2176:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    2178:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    217a:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 2b08 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    217e:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    2180:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    2184:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    2186:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    218a:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    218e:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    2190:	|  |  |  |  |  |  |  |              |  |                     jsr 100dc <getValueType>
    2196:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    219a:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    219c:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 21a4 <continueFunction+0x546>
    219e:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    21a0:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 2b08 <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    21a4:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    21a8:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    21ac:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    21ae:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    21b0:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    21b2:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 21d4 <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    21b4:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    21b8:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    21ba:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    21be:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    21c2:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    21c6:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    21c8:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    21ca:	|  |  |  |  |  |  |  |              |  |                 |   jsr fd66 <fastArrayGetByIndex>
    21d0:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    21d2:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 21f4 <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    21d4:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    21d8:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    21da:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    21de:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    21e2:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    21e6:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    21e8:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    21ea:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    21ec:	|  |  |  |  |  |  |  |              |  |              |      jsr 109f0 <stackGetByIndex>
    21f2:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    21f4:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    21f8:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    21fa:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    21fe:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    2200:	|  |  |  |  |  |  |  |              |  |                     jsr 10a60 <trimStack>
    2206:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    2208:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    220c:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2228 <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    220e:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    2210:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    2214:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    2216:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    2218:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    221a:	|  |  |  |  |  |  |  |              |  |                 |   jsr 109ce <setVariable>
    2220:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    2224:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 2302 <continueFunction+0x6a4>
    2228:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    222a:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    222e:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 223c <continueFunction+0x5de>
    2230:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    2232:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    2236:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 2286 <continueFunction+0x628>
    2238:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 22ce <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    223c:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    2240:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    2244:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    2248:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    224a:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 100dc <getValueType>
    2250:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    2254:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    2256:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 225e <continueFunction+0x600>
    2258:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    225a:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 22e8 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    225e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    2260:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    2262:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    2266:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    2268:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    226c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    226e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 109ce <setVariable>
    2274:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    2278:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    227a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    227c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    2280:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    2284:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 22ec <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    2286:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    228a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    228e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    2292:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    2294:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 100dc <getValueType>
    229a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    229e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    22a0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 22a6 <continueFunction+0x648>
    22a2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    22a4:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 22e8 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    22a6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    22a8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    22aa:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    22ae:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    22b0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    22b4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    22b6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 109ce <setVariable>
    22bc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    22c0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    22c2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    22c4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    22c8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    22cc:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 22ec <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    22ce:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    22d0:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    22d4:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    22d6:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    22da:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 10596 <copyVariable>
    22e0:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    22e2:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    22e4:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 2302 <continueFunction+0x6a4>
    22e6:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    22e8:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 2b08 <continueFunction+0xeaa>
				break;
    22ec:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 2302 <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    22ee:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 130d4 <cursors.c.412ac4f3+0x15f>
    22f4:	|  |  |  |  |  |  |  |                 |  |                  jsr 12130 <KPrintF>
    22fa:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    22fc:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    22fe:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 2b08 <continueFunction+0xeaa>
				break;
    2302:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    2304:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 2ae6 <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    2308:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    230c:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    2310:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    2312:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    2314:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    2316:	|  |  |  |  |  |  |  |                                   /-- beq.s 2324 <continueFunction+0x6c6>
    2318:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    231a:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    231c:	|  |  |  |  |  |  |  |                                /--|-- beq.w 23d0 <continueFunction+0x772>
    2320:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 242e <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    2324:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    2328:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    232c:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    2330:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    2332:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 2348 <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    2334:	|  |  |  |  |  |  |  |                             |  |  |   pea 130b6 <cursors.c.412ac4f3+0x141>
    233a:	|  |  |  |  |  |  |  |                             |  |  |   jsr 12130 <KPrintF>
    2340:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    2342:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    2344:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 2b08 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    2348:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    234a:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    234e:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    2350:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    2354:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    2358:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    235a:	|  |  |  |  |  |  |  |                             |  |      jsr 100dc <getValueType>
    2360:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    2364:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    2366:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 236e <continueFunction+0x710>
    2368:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    236a:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 2b08 <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    236e:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    2372:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    2376:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    237a:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    237c:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    2380:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    2382:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    2386:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    238a:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    238e:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    2390:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    2392:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    2394:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    2396:	|  |  |  |  |  |  |  |                             |  |      jsr 3bbc <stackSetByIndex>
    239c:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    23a0:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    23a2:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 23aa <continueFunction+0x74c>
						return FALSE;
    23a4:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    23a6:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 2b08 <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    23aa:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    23ac:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    23b0:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    23b2:	|  |  |  |  |  |  |  |                             |  |      jsr 10a60 <trimStack>
    23b8:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    23ba:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    23bc:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    23c0:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    23c2:	|  |  |  |  |  |  |  |                             |  |      jsr 10a60 <trimStack>
    23c8:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    23ca:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    23cc:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 2ae6 <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    23d0:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    23d2:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    23d6:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    23d8:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    23dc:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    23e0:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    23e2:	|  |  |  |  |  |  |  |                             |         jsr 100dc <getValueType>
    23e8:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    23ec:	|  |  |  |  |  |  |  |                             |         tst.w d0
    23ee:	|  |  |  |  |  |  |  |                             |     /-- bne.s 23f6 <continueFunction+0x798>
    23f0:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    23f2:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 2b08 <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    23f6:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    23fa:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    23fc:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    2400:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    2404:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    2408:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    240a:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    240c:	|  |  |  |  |  |  |  |                             |         jsr fd66 <fastArrayGetByIndex>
    2412:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    2414:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    2418:	|  |  |  |  |  |  |  |                             |     /-- bne.s 2428 <continueFunction+0x7ca>
    241a:	|  |  |  |  |  |  |  |                             |     |   pea 130f8 <cursors.c.412ac4f3+0x183>
    2420:	|  |  |  |  |  |  |  |                             |     |   jsr 12130 <KPrintF>
    2426:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    2428:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    242a:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 2b08 <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    242e:	|  |  |  |  |  |  |  |                             \-------> pea 130d4 <cursors.c.412ac4f3+0x15f>
    2434:	|  |  |  |  |  |  |  |                                       jsr 12130 <KPrintF>
    243a:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    243c:	|  |  |  |  |  |  |  |                                       clr.w d0
    243e:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 2b08 <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    2442:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2446:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    244a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    244e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2450:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2452:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2454:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2458:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    245c:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    245e:	|  |  |  |  |  |  |  |                                       jsr 100dc <getValueType>
    2464:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2468:	|  |  |  |  |  |  |  |                                       tst.w d0
    246a:	|  |  |  |  |  |  |  |                                   /-- bne.s 2472 <continueFunction+0x814>
    246c:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    246e:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 2b08 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    2472:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    2476:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2478:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    247c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    247e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2482:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2484:	|  |  |  |  |  |  |  |                                       jsr 109ce <setVariable>
    248a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    248e:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    2492:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2494:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    2496:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    249a:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    249e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    24a2:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    24a4:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    24a6:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    24a8:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    24ac:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    24ae:	|  |  |  |  |  |  |  |                                       jsr 109ce <setVariable>
    24b4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    24b8:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 2ae6 <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    24bc:	|  |  |  |  |  |  |  |                                       move.l 19b40 <globalVars>,d1
    24c2:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    24c6:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    24c8:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    24ca:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    24cc:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    24d0:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    24d4:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    24d6:	|  |  |  |  |  |  |  |                                       jsr 100dc <getValueType>
    24dc:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    24e0:	|  |  |  |  |  |  |  |                                       tst.w d0
    24e2:	|  |  |  |  |  |  |  |                                   /-- bne.s 24ea <continueFunction+0x88c>
    24e4:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    24e6:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 2b08 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    24ea:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    24ee:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    24f0:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    24f4:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    24f6:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    24fa:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    24fc:	|  |  |  |  |  |  |  |                                       jsr 109ce <setVariable>
    2502:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    2506:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    250a:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    250c:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    250e:	|  |  |  |  |  |  |  |                                       movea.l 19b40 <globalVars>,a0
    2514:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2518:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    251a:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    251c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    251e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2522:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2524:	|  |  |  |  |  |  |  |                                       jsr 109ce <setVariable>
    252a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    252e:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 2ae6 <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    2532:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2536:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    253a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    253e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2540:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2542:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2544:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2548:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    254c:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    254e:	|  |  |  |  |  |  |  |                                       jsr 100dc <getValueType>
    2554:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2558:	|  |  |  |  |  |  |  |                                       tst.w d0
    255a:	|  |  |  |  |  |  |  |                                   /-- bne.s 2562 <continueFunction+0x904>
    255c:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    255e:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 2b08 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    2562:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    2566:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2568:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    256c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    256e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2572:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2574:	|  |  |  |  |  |  |  |                                       jsr 109ce <setVariable>
    257a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    257e:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    2582:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2584:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    2586:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    258a:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    258e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2592:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2594:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2596:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2598:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    259c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    259e:	|  |  |  |  |  |  |  |                                       jsr 109ce <setVariable>
    25a4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    25a8:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 2ae6 <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    25ac:	|  |  |  |  |  |  |  |                                       move.l 19b40 <globalVars>,d1
    25b2:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    25b6:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    25b8:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    25ba:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    25bc:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    25c0:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    25c4:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    25c6:	|  |  |  |  |  |  |  |                                       jsr 100dc <getValueType>
    25cc:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    25d0:	|  |  |  |  |  |  |  |                                       tst.w d0
    25d2:	|  |  |  |  |  |  |  |                                   /-- bne.s 25da <continueFunction+0x97c>
    25d4:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    25d6:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 2b08 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    25da:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    25de:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    25e0:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    25e4:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    25e6:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    25ea:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    25ec:	|  |  |  |  |  |  |  |                                       jsr 109ce <setVariable>
    25f2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    25f6:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    25fa:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    25fc:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    25fe:	|  |  |  |  |  |  |  |                                       movea.l 19b40 <globalVars>,a0
    2604:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2608:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    260a:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    260c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    260e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2612:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2614:	|  |  |  |  |  |  |  |                                       jsr 109ce <setVariable>
    261a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    261e:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 2ae6 <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    2622:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2626:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    262a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    262e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2630:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    2632:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2634:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2638:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    263a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    263c:	|  |  |  |  |  |  |  |                                       jsr 10596 <copyVariable>
    2642:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    2644:	|  |  |  |  |  |  |  |                                       tst.w d0
    2646:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 2ad0 <continueFunction+0xe72>
    264a:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    264c:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 2b08 <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    2650:	|  |  |  |  |  |  |  |  |                                    move.l 19b40 <globalVars>,d1
    2656:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    265a:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    265c:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    265e:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    2660:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    2664:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    2666:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    2668:	|  |  |  |  |  |  |  |  |                                    jsr 10596 <copyVariable>
    266e:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    2670:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    2672:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 2ad4 <continueFunction+0xe76>
    2676:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    2678:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 2b08 <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    267c:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    267e:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    2682:	|  |  |  |  |  |  |  |  |  |                                 movea.l 19b40 <globalVars>,a0
    2688:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    268c:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    268e:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    2690:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    2692:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    2694:	|  |  |  |  |  |  |  |  |  |                                 jsr 10596 <copyVariable>
    269a:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    269c:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    269e:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 2ad8 <continueFunction+0xe7a>
    26a2:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    26a4:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 2b08 <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    26a8:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    26aa:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    26ae:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    26b0:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    26b4:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    26b6:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    26b8:	|  |  |  |  |  |  |  |  |  |  |                              jsr f918 <addVarToStack>
    26be:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    26c0:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    26c2:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 2adc <continueFunction+0xe7e>
    26c6:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    26c8:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 2b08 <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    26cc:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    26ce:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    26d2:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    26d4:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    26d8:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    26da:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    26dc:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr f99e <addVarToStackQuick>
    26e2:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    26e4:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    26e6:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 2ae0 <continueFunction+0xe82>
    26ea:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    26ec:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 2b08 <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    26f0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    26f2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    26f6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    26f8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 1061c <getBoolean>
    26fe:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    2700:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    2702:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    2704:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    2706:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    2708:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    270a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    270c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    2710:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    2712:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    2716:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    2718:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 109ce <setVariable>
    271e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    2722:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 2ae6 <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    2726:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    2728:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    272c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    272e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 1061c <getBoolean>
    2734:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    2736:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    2738:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 2ae4 <continueFunction+0xe86>
				advanceNow = FALSE;
    273c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    2740:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    2744:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    274a:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 2ae4 <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    274e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    2752:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    2756:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    275c:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 2ae6 <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    2760:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    2762:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    2766:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    2768:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    276c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    2770:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    2772:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 100dc <getValueType>
    2778:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    277c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    277e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 2786 <continueFunction+0xb28>
    2780:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    2782:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 2b08 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    2786:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    278a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    278c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    278e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    2790:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    2794:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    2796:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    279a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    279c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 109ce <setVariable>
    27a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    27a6:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 2ae6 <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    27aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    27ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    27b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 2a9c <continueFunction+0xe3e>
    27b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    27b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    27bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 2838 <continueFunction+0xbda>
    27be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    27c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    27c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 2882 <continueFunction+0xc24>
    27c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    27ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    27ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 27dc <continueFunction+0xb7e>
    27d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    27d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    27d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 280a <continueFunction+0xbac>
    27d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 2882 <continueFunction+0xc24>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    27dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    27de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    27e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    27e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    27ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    27ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    27ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr fa12 <addVariablesInSecond>
    27f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    27f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    27f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    27fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    27fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 10a60 <trimStack>
    2804:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    2806:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 2ab0 <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    280a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    280c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    2810:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    2814:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    2818:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    281a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    281c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr fad0 <compareVariablesInSecond>
    2822:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    2824:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    2826:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    282a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    282c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 10a60 <trimStack>
    2832:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    2834:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 2ab0 <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    2838:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    283a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    283e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    2842:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    2846:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    2848:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    284a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr fad0 <compareVariablesInSecond>
    2850:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    2852:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    2854:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    2858:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    285a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 10a60 <trimStack>
    2860:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    2862:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    2866:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    286a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    286c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    286e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    2870:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    2876:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    287a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    287e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 2ab0 <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    2882:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    2886:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    288a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    288c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    2890:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    2894:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    2896:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 100dc <getValueType>
    289c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    28a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    28a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 28aa <continueFunction+0xc4c>
    28a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    28a6:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 2b08 <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    28aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    28ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    28b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    28b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    28b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    28ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    28bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 100dc <getValueType>
    28c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    28c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    28c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 28d0 <continueFunction+0xc72>
    28ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    28cc:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 2b08 <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    28d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    28d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    28d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    28d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 10a60 <trimStack>
    28de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    28e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    28e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    28e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    28e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    28ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 2aae <continueFunction+0xe50>
    28ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    28f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    28f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #10494,a0
    28f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    28fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (28fe <continueFunction+0xca0>,pc,d0.w)
    28fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    2902:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    2904:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    290c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    290e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    2916:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    291e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    2926:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    292e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    2932:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    2936:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2938:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    293a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12ae2 <__mulsi3>
    2940:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    2942:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    2944:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2946:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    294a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    294c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2950:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2952:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 109ce <setVariable>
    2958:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    295c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 2ab0 <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    2960:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    2964:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    2968:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    296a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    296c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2970:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2972:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2976:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2978:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 109ce <setVariable>
    297e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2982:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 2ab0 <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    2986:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    298a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    298e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2990:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2992:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12b8e <__modsi3>
    2998:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    299a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    299c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    299e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    29a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    29a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    29a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    29aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 109ce <setVariable>
    29b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    29b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 2ab0 <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    29b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    29bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    29c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    29c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    29c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12b60 <__divsi3>
    29ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    29cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    29ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    29d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    29d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    29d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    29da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    29dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 109ce <setVariable>
    29e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    29e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 2ab0 <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    29ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    29ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    29f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    29f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    29f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    29f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    29fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    29fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    29fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2a02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2a04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2a08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2a0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 109ce <setVariable>
    2a10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2a14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 2ab0 <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    2a18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    2a1c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    2a20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    2a22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    2a24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    2a26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    2a28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    2a2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2a2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2a30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2a32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2a36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2a38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 109ce <setVariable>
    2a3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2a42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 2ab0 <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    2a44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    2a48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    2a4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    2a4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    2a50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    2a52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    2a54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    2a56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2a58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2a5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2a5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2a62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2a64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 109ce <setVariable>
    2a6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2a6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 2ab0 <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    2a70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    2a74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    2a78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    2a7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    2a7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    2a7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    2a80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    2a82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2a84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2a88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2a8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2a8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2a90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 109ce <setVariable>
    2a96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2a9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 2ab0 <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    2a9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 13119 <cursors.c.412ac4f3+0x1a4>
    2aa2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 12130 <KPrintF>
    2aa8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    2aaa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    2aac:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 2b08 <continueFunction+0xeaa>
						break;
    2aae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    2ab0:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 2ae6 <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    2ab2:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 13131 <cursors.c.412ac4f3+0x1bc>
    2ab8:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 12130 <KPrintF>
    2abe:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    2ac0:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    2ac2:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 2b08 <continueFunction+0xeaa>
			break;
    2ac4:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    2ac6:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 2ae6 <continueFunction+0xe88>
			break;
    2ac8:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    2aca:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 2ae6 <continueFunction+0xe88>
			break;
    2acc:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    2ace:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 2ae6 <continueFunction+0xe88>
			break;
    2ad0:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    2ad2:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 2ae6 <continueFunction+0xe88>
			break;
    2ad4:	|  |  |     |              \--|--|--|--|-------------------> nop
    2ad6:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 2ae6 <continueFunction+0xe88>
			break;
    2ad8:	|  |  |     |                 \--|--|--|-------------------> nop
    2ada:	|  |  |     +--------------------|--|--|-------------------- bra.s 2ae6 <continueFunction+0xe88>
			break;
    2adc:	|  |  |     |                    \--|--|-------------------> nop
    2ade:	|  |  |     +-----------------------|--|-------------------- bra.s 2ae6 <continueFunction+0xe88>
			break;
    2ae0:	|  |  |     |                       \--|-------------------> nop
    2ae2:	|  |  |     +--------------------------|-------------------- bra.s 2ae6 <continueFunction+0xe88>
			break;
    2ae4:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    2ae6:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    2aea:	+--|--|----------------------------------------------------- beq.s 2afe <continueFunction+0xea0>
    2aec:	|  |  |                                                      movea.l 80(sp),a0
    2af0:	|  |  |                                                      move.l 36(a0),d0
    2af4:	|  |  |                                                      addq.l #1,d0
    2af6:	|  |  |                                                      movea.l 80(sp),a0
    2afa:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    2afe:	\--|--|----------------------------------------------------> tst.w 74(sp)
    2b02:	   |  \----------------------------------------------------- bne.w 1c86 <continueFunction+0x28>

	}
	return TRUE;
    2b06:	   |                                                         moveq #1,d0
}
    2b08:	   \-------------------------------------------------------> lea 76(sp),sp
    2b0c:	                                                             rts

00002b0e <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    2b0e:	       lea -16(sp),sp
    2b12:	       move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    2b14:	       move.l 24(sp),-(sp)
    2b18:	       jsr 399e <pauseFunction>
    2b1e:	       addq.l #4,sp
	if (fun -> stack) 
    2b20:	       movea.l 24(sp),a0
    2b24:	       move.l 24(a0),d0
    2b28:	   /-- beq.s 2b3e <finishFunction+0x30>
		KPrintF("finishfunction:", ERROR_NON_EMPTY_STACK);
    2b2a:	   |   pea 1315d <cursors.c.412ac4f3+0x1e8>
    2b30:	   |   pea 1318a <cursors.c.412ac4f3+0x215>
    2b36:	   |   jsr 12130 <KPrintF>
    2b3c:	   |   addq.l #8,sp
	FreeVec( fun -> compiledLines);
    2b3e:	   \-> movea.l 24(sp),a0
    2b42:	       move.l 4(a0),12(sp)
    2b48:	       move.l 19b8e <SysBase>,d0
    2b4e:	       movea.l d0,a6
    2b50:	       movea.l 12(sp),a1
    2b54:	       jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    2b58:	       clr.l 16(sp)
    2b5c:	   /-- bra.s 2b7c <finishFunction+0x6e>
    2b5e:	/--|-> movea.l 24(sp),a0
    2b62:	|  |   move.l 20(a0),d1
    2b66:	|  |   move.l 16(sp),d0
    2b6a:	|  |   lsl.l #3,d0
    2b6c:	|  |   add.l d1,d0
    2b6e:	|  |   move.l d0,-(sp)
    2b70:	|  |   jsr 1032a <unlinkVar>
    2b76:	|  |   addq.l #4,sp
    2b78:	|  |   addq.l #1,16(sp)
    2b7c:	|  \-> movea.l 24(sp),a0
    2b80:	|      move.l 8(a0),d0
    2b84:	|      cmp.l 16(sp),d0
    2b88:	\----- bgt.s 2b5e <finishFunction+0x50>
	if( fun->numLocals > 0) {
    2b8a:	       movea.l 24(sp),a0
    2b8e:	       move.l 8(a0),d0
    2b92:	   /-- ble.s 2bae <finishFunction+0xa0>
		FreeVec(fun -> localVars);
    2b94:	   |   movea.l 24(sp),a0
    2b98:	   |   move.l 20(a0),8(sp)
    2b9e:	   |   move.l 19b8e <SysBase>,d0
    2ba4:	   |   movea.l d0,a6
    2ba6:	   |   movea.l 8(sp),a1
    2baa:	   |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    2bae:	   \-> moveq #28,d0
    2bb0:	       add.l 24(sp),d0
    2bb4:	       move.l d0,-(sp)
    2bb6:	       jsr 1032a <unlinkVar>
    2bbc:	       addq.l #4,sp
	FreeVec(fun);
    2bbe:	       move.l 24(sp),4(sp)
    2bc4:	       move.l 19b8e <SysBase>,d0
    2bca:	       movea.l d0,a6
    2bcc:	       movea.l 4(sp),a1
    2bd0:	       jsr -690(a6)
	fun = NULL;
    2bd4:	       clr.l 24(sp)
}
    2bd8:	       nop
    2bda:	       movea.l (sp)+,a6
    2bdc:	       lea 16(sp),sp
    2be0:	       rts

00002be2 <handleInput>:

BOOL handleInput () {
	//Amiga Todo: Actually handle input
	return runSludge ();
    2be2:	jsr 39fa <runSludge>
}
    2be8:	rts

00002bea <initSludge>:

BOOL initSludge (char * filename) {
    2bea:	             lea -296(sp),sp
    2bee:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    2bf2:	             clr.l 312(sp)
	mouseCursorAnim = makeNullAnim ();
    2bf6:	             jsr 6a1a <makeNullAnim>
    2bfc:	             move.l d0,19a7a <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    2c02:	             pea 19b3c <gameVersion>
    2c08:	             pea 1319a <cursors.c.412ac4f3+0x225>
    2c0e:	             pea 45 <_start+0x45>
    2c12:	             pea 47 <_start+0x47>
    2c16:	             move.l 336(sp),-(sp)
    2c1a:	             jsr 362e <openAndVerify>
    2c20:	             lea 20(sp),sp
    2c24:	             move.l d0,292(sp)
	if (! fp) return FALSE;
    2c28:	         /-- bne.s 2c30 <initSludge+0x46>
    2c2a:	         |   clr.w d0
    2c2c:	/--------|-- bra.w 334e <initSludge+0x764>
	if (FGetC (fp)) {
    2c30:	|        \-> move.l 292(sp),288(sp)
    2c36:	|            move.l 19b96 <DOSBase>,d0
    2c3c:	|            movea.l d0,a6
    2c3e:	|            move.l 288(sp),d1
    2c42:	|            jsr -306(a6)
    2c46:	|            move.l d0,284(sp)
    2c4a:	|            move.l 284(sp),d0
    2c4e:	|  /-------- beq.w 2df4 <initSludge+0x20a>
		numBIFNames = get2bytes (fp);
    2c52:	|  |         move.l 292(sp),-(sp)
    2c56:	|  |         jsr 6bc <get2bytes>
    2c5c:	|  |         addq.l #4,sp
    2c5e:	|  |         move.l d0,19b62 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    2c64:	|  |         move.l 19b62 <numBIFNames>,d0
    2c6a:	|  |         move.l d0,280(sp)
    2c6e:	|  |         clr.l 276(sp)
    2c72:	|  |         move.l 19b8e <SysBase>,d0
    2c78:	|  |         movea.l d0,a6
    2c7a:	|  |         move.l 280(sp),d0
    2c7e:	|  |         move.l 276(sp),d1
    2c82:	|  |         jsr -684(a6)
    2c86:	|  |         move.l d0,272(sp)
    2c8a:	|  |         move.l 272(sp),d0
    2c8e:	|  |         move.l d0,19b22 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    2c94:	|  |         move.l 19b22 <allBIFNames>,d0
    2c9a:	|  |     /-- bne.s 2ca2 <initSludge+0xb8>
    2c9c:	|  |     |   clr.w d0
    2c9e:	+--|-----|-- bra.w 334e <initSludge+0x764>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    2ca2:	|  |     \-> clr.l 308(sp)
    2ca6:	|  |     /-- bra.s 2ccc <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    2ca8:	|  |  /--|-> move.l 19b22 <allBIFNames>,d1
    2cae:	|  |  |  |   move.l 308(sp),d0
    2cb2:	|  |  |  |   add.l d0,d0
    2cb4:	|  |  |  |   add.l d0,d0
    2cb6:	|  |  |  |   movea.l d1,a2
    2cb8:	|  |  |  |   adda.l d0,a2
    2cba:	|  |  |  |   move.l 292(sp),-(sp)
    2cbe:	|  |  |  |   jsr b02 <readString>
    2cc4:	|  |  |  |   addq.l #4,sp
    2cc6:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    2cc8:	|  |  |  |   addq.l #1,308(sp)
    2ccc:	|  |  |  \-> move.l 19b62 <numBIFNames>,d0
    2cd2:	|  |  |      cmp.l 308(sp),d0
    2cd6:	|  |  \----- bgt.s 2ca8 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    2cd8:	|  |         move.l 292(sp),-(sp)
    2cdc:	|  |         jsr 6bc <get2bytes>
    2ce2:	|  |         addq.l #4,sp
    2ce4:	|  |         move.l d0,19b6e <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    2cea:	|  |         move.l 19b6e <numUserFunc>,d0
    2cf0:	|  |         move.l d0,268(sp)
    2cf4:	|  |         clr.l 264(sp)
    2cf8:	|  |         move.l 19b8e <SysBase>,d0
    2cfe:	|  |         movea.l d0,a6
    2d00:	|  |         move.l 268(sp),d0
    2d04:	|  |         move.l 264(sp),d1
    2d08:	|  |         jsr -684(a6)
    2d0c:	|  |         move.l d0,260(sp)
    2d10:	|  |         move.l 260(sp),d0
    2d14:	|  |         move.l d0,19b2e <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    2d1a:	|  |         move.l 19b2e <allUserFunc>,d0
    2d20:	|  |     /-- bne.s 2d28 <initSludge+0x13e>
    2d22:	|  |     |   clr.w d0
    2d24:	+--|-----|-- bra.w 334e <initSludge+0x764>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    2d28:	|  |     \-> clr.l 304(sp)
    2d2c:	|  |     /-- bra.s 2d52 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    2d2e:	|  |  /--|-> move.l 19b2e <allUserFunc>,d1
    2d34:	|  |  |  |   move.l 304(sp),d0
    2d38:	|  |  |  |   add.l d0,d0
    2d3a:	|  |  |  |   add.l d0,d0
    2d3c:	|  |  |  |   movea.l d1,a2
    2d3e:	|  |  |  |   adda.l d0,a2
    2d40:	|  |  |  |   move.l 292(sp),-(sp)
    2d44:	|  |  |  |   jsr b02 <readString>
    2d4a:	|  |  |  |   addq.l #4,sp
    2d4c:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    2d4e:	|  |  |  |   addq.l #1,304(sp)
    2d52:	|  |  |  \-> move.l 19b6e <numUserFunc>,d0
    2d58:	|  |  |      cmp.l 304(sp),d0
    2d5c:	|  |  \----- bgt.s 2d2e <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    2d5e:	|  |         move.l 19b3c <gameVersion>,d0
    2d64:	|  |         cmpi.l #258,d0
    2d6a:	|  +-------- ble.w 2df4 <initSludge+0x20a>
			numResourceNames = get2bytes (fp);
    2d6e:	|  |         move.l 292(sp),-(sp)
    2d72:	|  |         jsr 6bc <get2bytes>
    2d78:	|  |         addq.l #4,sp
    2d7a:	|  |         move.l d0,19b6a <numResourceNames>
			allResourceNames = AllocVec(numResourceNames,MEMF_ANY);
    2d80:	|  |         move.l 19b6a <numResourceNames>,d0
    2d86:	|  |         move.l d0,256(sp)
    2d8a:	|  |         clr.l 252(sp)
    2d8e:	|  |         move.l 19b8e <SysBase>,d0
    2d94:	|  |         movea.l d0,a6
    2d96:	|  |         move.l 256(sp),d0
    2d9a:	|  |         move.l 252(sp),d1
    2d9e:	|  |         jsr -684(a6)
    2da2:	|  |         move.l d0,248(sp)
    2da6:	|  |         move.l 248(sp),d0
    2daa:	|  |         move.l d0,19b26 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    2db0:	|  |         move.l 19b26 <allResourceNames>,d0
    2db6:	|  |     /-- bne.s 2dbe <initSludge+0x1d4>
    2db8:	|  |     |   clr.w d0
    2dba:	+--|-----|-- bra.w 334e <initSludge+0x764>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    2dbe:	|  |     \-> clr.l 300(sp)
    2dc2:	|  |     /-- bra.s 2de8 <initSludge+0x1fe>
				allResourceNames[fn] =  (char *) readString (fp);
    2dc4:	|  |  /--|-> move.l 19b26 <allResourceNames>,d1
    2dca:	|  |  |  |   move.l 300(sp),d0
    2dce:	|  |  |  |   add.l d0,d0
    2dd0:	|  |  |  |   add.l d0,d0
    2dd2:	|  |  |  |   movea.l d1,a2
    2dd4:	|  |  |  |   adda.l d0,a2
    2dd6:	|  |  |  |   move.l 292(sp),-(sp)
    2dda:	|  |  |  |   jsr b02 <readString>
    2de0:	|  |  |  |   addq.l #4,sp
    2de2:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    2de4:	|  |  |  |   addq.l #1,300(sp)
    2de8:	|  |  |  \-> move.l 19b6a <numResourceNames>,d0
    2dee:	|  |  |      cmp.l 300(sp),d0
    2df2:	|  |  \----- bgt.s 2dc4 <initSludge+0x1da>
			}
		}
	}
	winWidth = get2bytes (fp);
    2df4:	|  \-------> move.l 292(sp),-(sp)
    2df8:	|            jsr 6bc <get2bytes>
    2dfe:	|            addq.l #4,sp
    2e00:	|            move.l d0,19a8e <winWidth>
	winHeight = get2bytes (fp);
    2e06:	|            move.l 292(sp),-(sp)
    2e0a:	|            jsr 6bc <get2bytes>
    2e10:	|            addq.l #4,sp
    2e12:	|            move.l d0,19a92 <winHeight>
	specialSettings = FGetC (fp);
    2e18:	|            move.l 292(sp),244(sp)
    2e1e:	|            move.l 19b96 <DOSBase>,d0
    2e24:	|            movea.l d0,a6
    2e26:	|            move.l 244(sp),d1
    2e2a:	|            jsr -306(a6)
    2e2e:	|            move.l d0,240(sp)
    2e32:	|            move.l 240(sp),d0
    2e36:	|            move.l d0,19b72 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    2e3c:	|            move.l 292(sp),236(sp)
    2e42:	|            move.l 19b96 <DOSBase>,d0
    2e48:	|            movea.l d0,a6
    2e4a:	|            move.l 236(sp),d1
    2e4e:	|            jsr -306(a6)
    2e52:	|            move.l d0,232(sp)
    2e56:	|            move.l 232(sp),d0
    2e5a:	|            move.l d0,-(sp)
    2e5c:	|            pea 3e8 <encodeFilename+0xea>
    2e60:	|            jsr 12b60 <__divsi3>
    2e66:	|            addq.l #8,sp
    2e68:	|            move.l d0,18088 <desiredfps>

	FreeVec(readString (fp));
    2e6e:	|            move.l 292(sp),-(sp)
    2e72:	|            jsr b02 <readString>
    2e78:	|            addq.l #4,sp
    2e7a:	|            move.l d0,228(sp)
    2e7e:	|            move.l 19b8e <SysBase>,d0
    2e84:	|            movea.l d0,a6
    2e86:	|            movea.l 228(sp),a1
    2e8a:	|            jsr -690(a6)

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    2e8e:	|            move.l 292(sp),224(sp)
    2e94:	|            move.l #105268,220(sp)
    2e9c:	|            moveq #8,d0
    2e9e:	|            move.l d0,216(sp)
    2ea2:	|            moveq #1,d1
    2ea4:	|            move.l d1,212(sp)
    2ea8:	|            move.l 19b96 <DOSBase>,d0
    2eae:	|            movea.l d0,a6
    2eb0:	|            move.l 224(sp),d1
    2eb4:	|            move.l 220(sp),d2
    2eb8:	|            move.l 216(sp),d3
    2ebc:	|            move.l 212(sp),d4
    2ec0:	|            jsr -324(a6)
    2ec4:	|            move.l d0,208(sp)
    2ec8:	|            move.l 208(sp),d0
    2ecc:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    2ed0:	|            moveq #1,d0
    2ed2:	|            cmp.l 204(sp),d0
    2ed6:	|        /-- beq.s 2ee6 <initSludge+0x2fc>
		KPrintF("Reading error in initSludge.\n");
    2ed8:	|        |   pea 131d3 <cursors.c.412ac4f3+0x25e>
    2ede:	|        |   jsr 12130 <KPrintF>
    2ee4:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    2ee6:	|        \-> move.l 19b3c <gameVersion>,d0
    2eec:	|            cmpi.l #258,d0
    2ef2:	|        /-- ble.s 2f02 <initSludge+0x318>
    2ef4:	|        |   move.l 292(sp),-(sp)
    2ef8:	|        |   jsr b02 <readString>
    2efe:	|        |   addq.l #4,sp
    2f00:	|     /--|-- bra.s 2f16 <initSludge+0x32c>
    2f02:	|     |  \-> pea 131f1 <cursors.c.412ac4f3+0x27c>
    2f08:	|     |      pea 131f1 <cursors.c.412ac4f3+0x27c>
    2f0e:	|     |      jsr f608 <joinStrings>
    2f14:	|     |      addq.l #8,sp
    2f16:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    2f1a:	|            move.l 19b3c <gameVersion>,d0
    2f20:	|            cmpi.l #258,d0
    2f26:	|     /----- ble.s 2f48 <initSludge+0x35e>
    2f28:	|     |      move.l 292(sp),196(sp)
    2f2e:	|     |      move.l 19b96 <DOSBase>,d0
    2f34:	|     |      movea.l d0,a6
    2f36:	|     |      move.l 196(sp),d1
    2f3a:	|     |      jsr -306(a6)
    2f3e:	|     |      move.l d0,192(sp)
    2f42:	|     |      move.l 192(sp),d0
    2f46:	|     |  /-- bra.s 2f4a <initSludge+0x360>
    2f48:	|     \--|-> moveq #0,d0
    2f4a:	|        \-> move.l d0,19c58 <gameSettings+0x4>
	makeLanguageTable (fp);
    2f50:	|            move.l 292(sp),-(sp)
    2f54:	|            jsr efda <makeLanguageTable>
    2f5a:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    2f5c:	|            move.l 19b3c <gameVersion>,d0
    2f62:	|            cmpi.l #261,d0
    2f68:	|        /-- ble.s 2fb6 <initSludge+0x3cc>
	{
		FGetC(fp);
    2f6a:	|        |   move.l 292(sp),188(sp)
    2f70:	|        |   move.l 19b96 <DOSBase>,d0
    2f76:	|        |   movea.l d0,a6
    2f78:	|        |   move.l 188(sp),d1
    2f7c:	|        |   jsr -306(a6)
    2f80:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    2f84:	|        |   move.l 292(sp),180(sp)
    2f8a:	|        |   move.l 19b96 <DOSBase>,d0
    2f90:	|        |   movea.l d0,a6
    2f92:	|        |   move.l 180(sp),d1
    2f96:	|        |   jsr -306(a6)
    2f9a:	|        |   move.l d0,176(sp)
		getFloat (fp);
    2f9e:	|        |   move.l 292(sp),-(sp)
    2fa2:	|        |   jsr 7d8 <getFloat>
    2fa8:	|        |   addq.l #4,sp
		getFloat (fp);
    2faa:	|        |   move.l 292(sp),-(sp)
    2fae:	|        |   jsr 7d8 <getFloat>
    2fb4:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    2fb6:	|        \-> move.l 292(sp),-(sp)
    2fba:	|            jsr b02 <readString>
    2fc0:	|            addq.l #4,sp
    2fc2:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    2fc6:	|            pea 131f2 <cursors.c.412ac4f3+0x27d>
    2fcc:	|            move.l 176(sp),-(sp)
    2fd0:	|            jsr f588 <strcmp>
    2fd6:	|            addq.l #8,sp
    2fd8:	|            tst.l d0
    2fda:	|        /-- beq.s 2fe2 <initSludge+0x3f8>
		return FALSE;
    2fdc:	|        |   clr.w d0
    2fde:	+--------|-- bra.w 334e <initSludge+0x764>
	}
	FreeVec( checker);
    2fe2:	|        \-> move.l 172(sp),168(sp)
    2fe8:	|            move.l 19b8e <SysBase>,d0
    2fee:	|            movea.l d0,a6
    2ff0:	|            movea.l 168(sp),a1
    2ff4:	|            jsr -690(a6)
	checker = NULL;
    2ff8:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    2ffc:	|            move.l 292(sp),164(sp)
    3002:	|            move.l 19b96 <DOSBase>,d0
    3008:	|            movea.l d0,a6
    300a:	|            move.l 164(sp),d1
    300e:	|            jsr -306(a6)
    3012:	|            move.l d0,160(sp)
    3016:	|            move.l 160(sp),d0
    301a:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    301e:	|            moveq #0,d0
    3020:	|            move.b 159(sp),d0
    3024:	|            moveq #1,d1
    3026:	|            and.l d1,d0
    3028:	|        /-- beq.s 3080 <initSludge+0x496>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    302a:	|        |   move.l 19b96 <DOSBase>,d0
    3030:	|        |   movea.l d0,a6
    3032:	|        |   jsr -60(a6)
    3036:	|        |   move.l d0,38(sp)
    303a:	|        |   move.l 38(sp),d0
    303e:	|        |   move.l d0,34(sp)
    3042:	|        |   move.l #78330,30(sp)
    304a:	|        |   moveq #54,d0
    304c:	|        |   move.l d0,26(sp)
    3050:	|        |   move.l 19b96 <DOSBase>,d0
    3056:	|        |   movea.l d0,a6
    3058:	|        |   move.l 34(sp),d1
    305c:	|        |   move.l 30(sp),d2
    3060:	|        |   move.l 26(sp),d3
    3064:	|        |   jsr -48(a6)
    3068:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    306c:	|        |   pea 13231 <cursors.c.412ac4f3+0x2bc>
    3072:	|        |   jsr 12130 <KPrintF>
    3078:	|        |   addq.l #4,sp
		return FALSE;
    307a:	|        |   clr.w d0
    307c:	+--------|-- bra.w 334e <initSludge+0x764>
	}

	numGlobals = get2bytes (fp);
    3080:	|        \-> move.l 292(sp),-(sp)
    3084:	|            jsr 6bc <get2bytes>
    308a:	|            addq.l #4,sp
    308c:	|            move.l d0,19b66 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    3092:	|            move.l 19b66 <numGlobals>,d0
    3098:	|            lsl.l #3,d0
    309a:	|            move.l d0,154(sp)
    309e:	|            clr.l 150(sp)
    30a2:	|            move.l 19b8e <SysBase>,d0
    30a8:	|            movea.l d0,a6
    30aa:	|            move.l 154(sp),d0
    30ae:	|            move.l 150(sp),d1
    30b2:	|            jsr -684(a6)
    30b6:	|            move.l d0,146(sp)
    30ba:	|            move.l 146(sp),d0
    30be:	|            move.l d0,19b40 <globalVars>
	if(globalVars == 0) {
    30c4:	|            move.l 19b40 <globalVars>,d0
    30ca:	|        /-- bne.s 30e0 <initSludge+0x4f6>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    30cc:	|        |   pea 13269 <cursors.c.412ac4f3+0x2f4>
    30d2:	|        |   jsr 12130 <KPrintF>
    30d8:	|        |   addq.l #4,sp
		return FALSE;
    30da:	|        |   clr.w d0
    30dc:	+--------|-- bra.w 334e <initSludge+0x764>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    30e0:	|        \-> clr.l 312(sp)
    30e4:	|        /-- bra.s 30fc <initSludge+0x512>
    30e6:	|     /--|-> move.l 19b40 <globalVars>,d1
    30ec:	|     |  |   move.l 312(sp),d0
    30f0:	|     |  |   lsl.l #3,d0
    30f2:	|     |  |   movea.l d1,a0
    30f4:	|     |  |   adda.l d0,a0
    30f6:	|     |  |   clr.l (a0)
    30f8:	|     |  |   addq.l #1,312(sp)
    30fc:	|     |  \-> move.l 19b66 <numGlobals>,d0
    3102:	|     |      cmp.l 312(sp),d0
    3106:	|     \----- bgt.s 30e6 <initSludge+0x4fc>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    3108:	|            move.l 19c58 <gameSettings+0x4>,d0
    310e:	|            clr.l -(sp)
    3110:	|            move.l d0,-(sp)
    3112:	|            move.l 300(sp),-(sp)
    3116:	|            jsr 40be <setFileIndices>
    311c:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    3120:	|            pea 1 <_start+0x1>
    3124:	|            jsr 3d78 <getNumberedString>
    312a:	|            addq.l #4,sp
    312c:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    3130:	|            move.l 142(sp),-(sp)
    3134:	|            jsr 2fe <encodeFilename>
    313a:	|            addq.l #4,sp
    313c:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    3140:	|            move.l 142(sp),134(sp)
    3146:	|            move.l 19b8e <SysBase>,d0
    314c:	|            movea.l d0,a6
    314e:	|            movea.l 134(sp),a1
    3152:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    3156:	|            move.l 138(sp),130(sp)
    315c:	|            move.l 19b96 <DOSBase>,d0
    3162:	|            movea.l d0,a6
    3164:	|            move.l 130(sp),d1
    3168:	|            jsr -120(a6)
    316c:	|            move.l d0,126(sp)
    3170:	|            move.l 126(sp),d0
    3174:	|            move.l d0,296(sp)
	if(lock == 0) {
    3178:	|        /-- bne.s 31a6 <initSludge+0x5bc>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    317a:	|        |   move.l 138(sp),122(sp)
    3180:	|        |   moveq #-2,d1
    3182:	|        |   move.l d1,118(sp)
    3186:	|        |   move.l 19b96 <DOSBase>,d0
    318c:	|        |   movea.l d0,a6
    318e:	|        |   move.l 122(sp),d1
    3192:	|        |   move.l 118(sp),d2
    3196:	|        |   jsr -84(a6)
    319a:	|        |   move.l d0,114(sp)
    319e:	|        |   move.l 114(sp),d0
    31a2:	|        |   move.l d0,296(sp)
	}

	if (!CurrentDir(lock)) {
    31a6:	|        \-> move.l 296(sp),110(sp)
    31ac:	|            move.l 19b96 <DOSBase>,d0
    31b2:	|            movea.l d0,a6
    31b4:	|            move.l 110(sp),d1
    31b8:	|            jsr -126(a6)
    31bc:	|            move.l d0,106(sp)
    31c0:	|            move.l 106(sp),d0
    31c4:	|        /-- bne.s 3220 <initSludge+0x636>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    31c6:	|        |   move.l 138(sp),-(sp)
    31ca:	|        |   pea 1329c <thumbnail.c.7eb31449+0xa>
    31d0:	|        |   jsr 12130 <KPrintF>
    31d6:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    31d8:	|        |   move.l 19b96 <DOSBase>,d0
    31de:	|        |   movea.l d0,a6
    31e0:	|        |   jsr -60(a6)
    31e4:	|        |   move.l d0,58(sp)
    31e8:	|        |   move.l 58(sp),d0
    31ec:	|        |   move.l d0,54(sp)
    31f0:	|        |   move.l #78537,50(sp)
    31f8:	|        |   moveq #40,d0
    31fa:	|        |   move.l d0,46(sp)
    31fe:	|        |   move.l 19b96 <DOSBase>,d0
    3204:	|        |   movea.l d0,a6
    3206:	|        |   move.l 54(sp),d1
    320a:	|        |   move.l 50(sp),d2
    320e:	|        |   move.l 46(sp),d3
    3212:	|        |   jsr -48(a6)
    3216:	|        |   move.l d0,42(sp)
		return FALSE;
    321a:	|        |   clr.w d0
    321c:	+--------|-- bra.w 334e <initSludge+0x764>
	}

	FreeVec(gameName);
    3220:	|        \-> move.l 138(sp),102(sp)
    3226:	|            move.l 19b8e <SysBase>,d0
    322c:	|            movea.l d0,a6
    322e:	|            movea.l 102(sp),a1
    3232:	|            jsr -690(a6)

	readIniFile (filename);
    3236:	|            move.l 320(sp),-(sp)
    323a:	|            jsr f10e <readIniFile>
    3240:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    3242:	|            jsr eee0 <getLanguageForFileB>
    3248:	|            move.l d0,1806e <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    324e:	|            move.l 1806e <languageNum>,d0
    3254:	|        /-- bpl.s 3264 <initSludge+0x67a>
    3256:	|        |   pea 132f2 <thumbnail.c.7eb31449+0x60>
    325c:	|        |   jsr 12130 <KPrintF>
    3262:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    3264:	|        \-> move.l 1806e <languageNum>,d0
    326a:	|            move.l d0,d1
    326c:	|            move.l 19c58 <gameSettings+0x4>,d0
    3272:	|            move.l d1,-(sp)
    3274:	|            move.l d0,-(sp)
    3276:	|            clr.l -(sp)
    3278:	|            jsr 40be <setFileIndices>
    327e:	|            lea 12(sp),sp

	if (dataFol[0]) {
    3282:	|            movea.l 200(sp),a0
    3286:	|            move.b (a0),d0
    3288:	|     /----- beq.w 3332 <initSludge+0x748>
		char *dataFolder = encodeFilename(dataFol);
    328c:	|     |      move.l 200(sp),-(sp)
    3290:	|     |      jsr 2fe <encodeFilename>
    3296:	|     |      addq.l #4,sp
    3298:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    329c:	|     |      move.l 98(sp),94(sp)
    32a2:	|     |      move.l 19b96 <DOSBase>,d0
    32a8:	|     |      movea.l d0,a6
    32aa:	|     |      move.l 94(sp),d1
    32ae:	|     |      jsr -120(a6)
    32b2:	|     |      move.l d0,90(sp)
    32b6:	|     |      move.l 90(sp),d0
    32ba:	|     |      move.l d0,296(sp)
		if(lock == 0) {
    32be:	|     |  /-- bne.s 32ec <initSludge+0x702>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    32c0:	|     |  |   move.l 98(sp),86(sp)
    32c6:	|     |  |   moveq #-2,d1
    32c8:	|     |  |   move.l d1,82(sp)
    32cc:	|     |  |   move.l 19b96 <DOSBase>,d0
    32d2:	|     |  |   movea.l d0,a6
    32d4:	|     |  |   move.l 86(sp),d1
    32d8:	|     |  |   move.l 82(sp),d2
    32dc:	|     |  |   jsr -84(a6)
    32e0:	|     |  |   move.l d0,78(sp)
    32e4:	|     |  |   move.l 78(sp),d0
    32e8:	|     |  |   move.l d0,296(sp)
		}


		if (!CurrentDir(lock)) {
    32ec:	|     |  \-> move.l 296(sp),74(sp)
    32f2:	|     |      move.l 19b96 <DOSBase>,d0
    32f8:	|     |      movea.l d0,a6
    32fa:	|     |      move.l 74(sp),d1
    32fe:	|     |      jsr -126(a6)
    3302:	|     |      move.l d0,70(sp)
    3306:	|     |      move.l 70(sp),d0
    330a:	|     |  /-- bne.s 331c <initSludge+0x732>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    330c:	|     |  |   move.l 19b96 <DOSBase>,d0
    3312:	|     |  |   movea.l d0,a6
    3314:	|     |  |   jsr -60(a6)
    3318:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    331c:	|     |  \-> move.l 98(sp),62(sp)
    3322:	|     |      move.l 19b8e <SysBase>,d0
    3328:	|     |      movea.l d0,a6
    332a:	|     |      movea.l 62(sp),a1
    332e:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    3332:	|     \----> movea.l 19a92 <winHeight>,a0
    3338:	|            lea -15(a0),a0
    333c:	|            move.l a0,d0
    333e:	|            move.l d0,-(sp)
    3340:	|            pea a <_start+0xa>
    3344:	|            jsr 481a <positionStatus>
    334a:	|            addq.l #8,sp

	return TRUE;
    334c:	|            moveq #1,d0
}
    334e:	\----------> movem.l (sp)+,d2-d4/a2/a6
    3352:	             lea 296(sp),sp
    3356:	             rts

00003358 <killSpeechTimers>:

void killSpeechTimers () {
    3358:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    335a:	          move.l 19b2a <allRunningFunctions>,(sp)

	while (thisFunction) {
    3360:	   /----- bra.s 338c <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    3362:	/--|----> movea.l (sp),a0
    3364:	|  |      move.b 56(a0),d0
    3368:	|  |  /-- bne.s 3386 <killSpeechTimers+0x2e>
    336a:	|  |  |   movea.l (sp),a0
    336c:	|  |  |   move.w 50(a0),d0
    3370:	|  |  +-- beq.s 3386 <killSpeechTimers+0x2e>
    3372:	|  |  |   movea.l (sp),a0
    3374:	|  |  |   move.l 12(a0),d0
    3378:	|  |  +-- beq.s 3386 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    337a:	|  |  |   movea.l (sp),a0
    337c:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    3380:	|  |  |   movea.l (sp),a0
    3382:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    3386:	|  |  \-> movea.l (sp),a0
    3388:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    338c:	|  \----> tst.l (sp)
    338e:	\-------- bne.s 3362 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    3390:	          jsr 4d58 <killAllSpeech>
}
    3396:	          nop
    3398:	          addq.l #4,sp
    339a:	          rts

0000339c <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    339c:	             lea -52(sp),sp
    33a0:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    33a2:	             movea.l 60(sp),a0
    33a6:	             move.l (a0),d0
    33a8:	             move.l d0,-(sp)
    33aa:	             jsr 3ffe <openSubSlice>
    33b0:	             addq.l #4,sp
    33b2:	             tst.w d0
    33b4:	         /-- bne.s 33bc <loadFunctionCode+0x20>
    33b6:	         |   clr.w d0
    33b8:	/--------|-- bra.w 3586 <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    33bc:	|        \-> move.l 19b76 <bigDataFile>,44(sp)
    33c4:	|            move.l 19b96 <DOSBase>,d0
    33ca:	|            movea.l d0,a6
    33cc:	|            move.l 44(sp),d1
    33d0:	|            jsr -306(a6)
    33d4:	|            move.l d0,40(sp)
    33d8:	|            move.l 40(sp),d0
    33dc:	|            move.l d0,d0
    33de:	|            movea.l 60(sp),a0
    33e2:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    33e6:	|            move.l 19b76 <bigDataFile>,d0
    33ec:	|            move.l d0,-(sp)
    33ee:	|            jsr 6bc <get2bytes>
    33f4:	|            addq.l #4,sp
    33f6:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    33fa:	|            move.l 19b76 <bigDataFile>,d0
    3400:	|            move.l d0,-(sp)
    3402:	|            jsr 6bc <get2bytes>
    3408:	|            addq.l #4,sp
    340a:	|            movea.l 60(sp),a0
    340e:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    3412:	|            move.l 19b76 <bigDataFile>,d0
    3418:	|            move.l d0,-(sp)
    341a:	|            jsr 6bc <get2bytes>
    3420:	|            addq.l #4,sp
    3422:	|            movea.l 60(sp),a0
    3426:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    342a:	|            move.l 36(sp),d0
    342e:	|            lsl.l #3,d0
    3430:	|            move.l d0,32(sp)
    3434:	|            clr.l 28(sp)
    3438:	|            move.l 19b8e <SysBase>,d0
    343e:	|            movea.l d0,a6
    3440:	|            move.l 32(sp),d0
    3444:	|            move.l 28(sp),d1
    3448:	|            jsr -684(a6)
    344c:	|            move.l d0,24(sp)
    3450:	|            move.l 24(sp),d0
    3454:	|            movea.l 60(sp),a0
    3458:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    345c:	|            movea.l 60(sp),a0
    3460:	|            move.l 4(a0),d0
    3464:	|        /-- bne.s 347a <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    3466:	|        |   pea 1331d <thumbnail.c.7eb31449+0x8b>
    346c:	|        |   jsr 12130 <KPrintF>
    3472:	|        |   addq.l #4,sp
		return FALSE;
    3474:	|        |   clr.w d0
    3476:	+--------|-- bra.w 3586 <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    347a:	|        \-> clr.l 52(sp)
    347e:	|        /-- bra.s 34e0 <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    3480:	|     /--|-> move.l 19b76 <bigDataFile>,8(sp)
    3488:	|     |  |   move.l 19b96 <DOSBase>,d0
    348e:	|     |  |   movea.l d0,a6
    3490:	|     |  |   move.l 8(sp),d1
    3494:	|     |  |   jsr -306(a6)
    3498:	|     |  |   move.l d0,4(sp)
    349c:	|     |  |   move.l 4(sp),d1
    34a0:	|     |  |   movea.l 60(sp),a0
    34a4:	|     |  |   movea.l 4(a0),a0
    34a8:	|     |  |   move.l 52(sp),d0
    34ac:	|     |  |   lsl.l #3,d0
    34ae:	|     |  |   adda.l d0,a0
    34b0:	|     |  |   move.l d1,d0
    34b2:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    34b4:	|     |  |   move.l 19b76 <bigDataFile>,d0
    34ba:	|     |  |   move.l d0,-(sp)
    34bc:	|     |  |   jsr 6bc <get2bytes>
    34c2:	|     |  |   addq.l #4,sp
    34c4:	|     |  |   move.l d0,d1
    34c6:	|     |  |   movea.l 60(sp),a0
    34ca:	|     |  |   movea.l 4(a0),a0
    34ce:	|     |  |   move.l 52(sp),d0
    34d2:	|     |  |   lsl.l #3,d0
    34d4:	|     |  |   adda.l d0,a0
    34d6:	|     |  |   move.l d1,d0
    34d8:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    34dc:	|     |  |   addq.l #1,52(sp)
    34e0:	|     |  \-> move.l 52(sp),d0
    34e4:	|     |      cmp.l 36(sp),d0
    34e8:	|     \----- bcs.s 3480 <loadFunctionCode+0xe4>
	}

	finishAccess ();
    34ea:	|            jsr 3d6e <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    34f0:	|            movea.l 60(sp),a0
    34f4:	|            move.l 8(a0),d0
    34f8:	|  /-------- ble.w 357c <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    34fc:	|  |         movea.l 60(sp),a0
    3500:	|  |         move.l 8(a0),d0
    3504:	|  |         lsl.l #3,d0
    3506:	|  |         move.l d0,20(sp)
    350a:	|  |         clr.l 16(sp)
    350e:	|  |         move.l 19b8e <SysBase>,d0
    3514:	|  |         movea.l d0,a6
    3516:	|  |         move.l 20(sp),d0
    351a:	|  |         move.l 16(sp),d1
    351e:	|  |         jsr -684(a6)
    3522:	|  |         move.l d0,12(sp)
    3526:	|  |         move.l 12(sp),d0
    352a:	|  |         movea.l 60(sp),a0
    352e:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    3532:	|  |         movea.l 60(sp),a0
    3536:	|  |         move.l 20(a0),d0
    353a:	|  |     /-- bne.s 354e <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    353c:	|  |     |   pea 1331d <thumbnail.c.7eb31449+0x8b>
    3542:	|  |     |   jsr 12130 <KPrintF>
    3548:	|  |     |   addq.l #4,sp
			return FALSE;
    354a:	|  |     |   clr.w d0
    354c:	+--|-----|-- bra.s 3586 <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    354e:	|  |     \-> clr.l 48(sp)
    3552:	|  |     /-- bra.s 356c <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    3554:	|  |  /--|-> movea.l 60(sp),a0
    3558:	|  |  |  |   move.l 20(a0),d1
    355c:	|  |  |  |   move.l 48(sp),d0
    3560:	|  |  |  |   lsl.l #3,d0
    3562:	|  |  |  |   movea.l d1,a0
    3564:	|  |  |  |   adda.l d0,a0
    3566:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    3568:	|  |  |  |   addq.l #1,48(sp)
    356c:	|  |  |  \-> movea.l 60(sp),a0
    3570:	|  |  |      move.l 8(a0),d0
    3574:	|  |  |      cmp.l 48(sp),d0
    3578:	|  |  \----- bgt.s 3554 <loadFunctionCode+0x1b8>
    357a:	|  |     /-- bra.s 3584 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    357c:	|  \-----|-> movea.l 60(sp),a0
    3580:	|        |   clr.l 8(a0)
	}
	return TRUE;
    3584:	|        \-> moveq #1,d0
}
    3586:	\----------> movea.l (sp)+,a6
    3588:	             lea 52(sp),sp
    358c:	             rts

0000358e <loadHandlers>:

void loadHandlers (BPTR fp) {
    358e:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    3590:	movea.l 1806a <currentEvents>,a2
    3596:	move.l 8(sp),-(sp)
    359a:	jsr 6bc <get2bytes>
    35a0:	addq.l #4,sp
    35a2:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    35a4:	movea.l 1806a <currentEvents>,a2
    35aa:	move.l 8(sp),-(sp)
    35ae:	jsr 6bc <get2bytes>
    35b4:	addq.l #4,sp
    35b6:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    35ba:	movea.l 1806a <currentEvents>,a2
    35c0:	move.l 8(sp),-(sp)
    35c4:	jsr 6bc <get2bytes>
    35ca:	addq.l #4,sp
    35cc:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    35d0:	movea.l 1806a <currentEvents>,a2
    35d6:	move.l 8(sp),-(sp)
    35da:	jsr 6bc <get2bytes>
    35e0:	addq.l #4,sp
    35e2:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    35e6:	movea.l 1806a <currentEvents>,a2
    35ec:	move.l 8(sp),-(sp)
    35f0:	jsr 6bc <get2bytes>
    35f6:	addq.l #4,sp
    35f8:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    35fc:	movea.l 1806a <currentEvents>,a2
    3602:	move.l 8(sp),-(sp)
    3606:	jsr 6bc <get2bytes>
    360c:	addq.l #4,sp
    360e:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    3612:	movea.l 1806a <currentEvents>,a2
    3618:	move.l 8(sp),-(sp)
    361c:	jsr 6bc <get2bytes>
    3622:	addq.l #4,sp
    3624:	move.l d0,24(a2)
}
    3628:	nop
    362a:	movea.l (sp)+,a2
    362c:	rts

0000362e <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    362e:	       lea -312(sp),sp
    3632:	       movem.l d2-d3/a6,-(sp)
    3636:	       move.l 332(sp),d1
    363a:	       move.l 336(sp),d0
    363e:	       move.b d1,d1
    3640:	       move.b d1,16(sp)
    3644:	       move.b d0,d0
    3646:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    364a:	       move.l 328(sp),318(sp)
    3650:	       move.l #1005,314(sp)
    3658:	       move.l 19b96 <DOSBase>,d0
    365e:	       movea.l d0,a6
    3660:	       move.l 318(sp),d1
    3664:	       move.l 314(sp),d2
    3668:	       jsr -30(a6)
    366c:	       move.l d0,310(sp)
    3670:	       move.l 310(sp),d0
    3674:	       move.l d0,306(sp)

	if (! fp) {
    3678:	   /-- bne.s 36d4 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    367a:	   |   move.l 19b96 <DOSBase>,d0
    3680:	   |   movea.l d0,a6
    3682:	   |   jsr -60(a6)
    3686:	   |   move.l d0,154(sp)
    368a:	   |   move.l 154(sp),d0
    368e:	   |   move.l d0,150(sp)
    3692:	   |   move.l #78662,146(sp)
    369a:	   |   moveq #31,d0
    369c:	   |   move.l d0,142(sp)
    36a0:	   |   move.l 19b96 <DOSBase>,d0
    36a6:	   |   movea.l d0,a6
    36a8:	   |   move.l 150(sp),d1
    36ac:	   |   move.l 146(sp),d2
    36b0:	   |   move.l 142(sp),d3
    36b4:	   |   jsr -48(a6)
    36b8:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    36bc:	   |   move.l 328(sp),-(sp)
    36c0:	   |   pea 13366 <thumbnail.c.7eb31449+0xd4>
    36c6:	   |   jsr 12130 <KPrintF>
    36cc:	   |   addq.l #8,sp
		return NULL;
    36ce:	   |   moveq #0,d0
    36d0:	/--|-- bra.w 3994 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    36d4:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    36d8:	|      move.l 306(sp),302(sp)
    36de:	|      move.l 19b96 <DOSBase>,d0
    36e4:	|      movea.l d0,a6
    36e6:	|      move.l 302(sp),d1
    36ea:	|      jsr -306(a6)
    36ee:	|      move.l d0,298(sp)
    36f2:	|      move.l 298(sp),d0
    36f6:	|      moveq #83,d1
    36f8:	|      cmp.l d0,d1
    36fa:	|  /-- beq.s 3702 <openAndVerify+0xd4>
    36fc:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    3702:	|  \-> move.l 306(sp),294(sp)
    3708:	|      move.l 19b96 <DOSBase>,d0
    370e:	|      movea.l d0,a6
    3710:	|      move.l 294(sp),d1
    3714:	|      jsr -306(a6)
    3718:	|      move.l d0,290(sp)
    371c:	|      move.l 290(sp),d0
    3720:	|      moveq #76,d1
    3722:	|      cmp.l d0,d1
    3724:	|  /-- beq.s 372c <openAndVerify+0xfe>
    3726:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    372c:	|  \-> move.l 306(sp),286(sp)
    3732:	|      move.l 19b96 <DOSBase>,d0
    3738:	|      movea.l d0,a6
    373a:	|      move.l 286(sp),d1
    373e:	|      jsr -306(a6)
    3742:	|      move.l d0,282(sp)
    3746:	|      move.l 282(sp),d0
    374a:	|      moveq #85,d1
    374c:	|      cmp.l d0,d1
    374e:	|  /-- beq.s 3756 <openAndVerify+0x128>
    3750:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    3756:	|  \-> move.l 306(sp),278(sp)
    375c:	|      move.l 19b96 <DOSBase>,d0
    3762:	|      movea.l d0,a6
    3764:	|      move.l 278(sp),d1
    3768:	|      jsr -306(a6)
    376c:	|      move.l d0,274(sp)
    3770:	|      move.l 274(sp),d0
    3774:	|      moveq #68,d1
    3776:	|      cmp.l d0,d1
    3778:	|  /-- beq.s 3780 <openAndVerify+0x152>
    377a:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    3780:	|  \-> move.l 306(sp),270(sp)
    3786:	|      move.l 19b96 <DOSBase>,d0
    378c:	|      movea.l d0,a6
    378e:	|      move.l 270(sp),d1
    3792:	|      jsr -306(a6)
    3796:	|      move.l d0,266(sp)
    379a:	|      move.l 266(sp),d1
    379e:	|      move.b 16(sp),d0
    37a2:	|      ext.w d0
    37a4:	|      movea.w d0,a0
    37a6:	|      cmpa.l d1,a0
    37a8:	|  /-- beq.s 37b0 <openAndVerify+0x182>
    37aa:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    37b0:	|  \-> move.l 306(sp),262(sp)
    37b6:	|      move.l 19b96 <DOSBase>,d0
    37bc:	|      movea.l d0,a6
    37be:	|      move.l 262(sp),d1
    37c2:	|      jsr -306(a6)
    37c6:	|      move.l d0,258(sp)
    37ca:	|      move.l 258(sp),d1
    37ce:	|      move.b 14(sp),d0
    37d2:	|      ext.w d0
    37d4:	|      movea.w d0,a0
    37d6:	|      cmpa.l d1,a0
    37d8:	|  /-- beq.s 37e0 <openAndVerify+0x1b2>
    37da:	|  |   move.w #1,322(sp)
	if (headerBad) {
    37e0:	|  \-> tst.w 322(sp)
    37e4:	|  /-- beq.s 383c <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    37e6:	|  |   move.l 19b96 <DOSBase>,d0
    37ec:	|  |   movea.l d0,a6
    37ee:	|  |   jsr -60(a6)
    37f2:	|  |   move.l d0,174(sp)
    37f6:	|  |   move.l 174(sp),d0
    37fa:	|  |   move.l d0,170(sp)
    37fe:	|  |   move.l #78725,166(sp)
    3806:	|  |   moveq #31,d0
    3808:	|  |   move.l d0,162(sp)
    380c:	|  |   move.l 19b96 <DOSBase>,d0
    3812:	|  |   movea.l d0,a6
    3814:	|  |   move.l 170(sp),d1
    3818:	|  |   move.l 166(sp),d2
    381c:	|  |   move.l 162(sp),d3
    3820:	|  |   jsr -48(a6)
    3824:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    3828:	|  |   pea 13385 <thumbnail.c.7eb31449+0xf3>
    382e:	|  |   jsr 12130 <KPrintF>
    3834:	|  |   addq.l #4,sp
		return NULL;
    3836:	|  |   moveq #0,d0
    3838:	+--|-- bra.w 3994 <openAndVerify+0x366>
	}
	FGetC (fp);
    383c:	|  \-> move.l 306(sp),254(sp)
    3842:	|      move.l 19b96 <DOSBase>,d0
    3848:	|      movea.l d0,a6
    384a:	|      move.l 254(sp),d1
    384e:	|      jsr -306(a6)
    3852:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    3856:	|      nop
    3858:	|  /-> move.l 306(sp),246(sp)
    385e:	|  |   move.l 19b96 <DOSBase>,d0
    3864:	|  |   movea.l d0,a6
    3866:	|  |   move.l 246(sp),d1
    386a:	|  |   jsr -306(a6)
    386e:	|  |   move.l d0,242(sp)
    3872:	|  |   move.l 242(sp),d0
    3876:	|  \-- bne.s 3858 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    3878:	|      move.l 306(sp),238(sp)
    387e:	|      move.l 19b96 <DOSBase>,d0
    3884:	|      movea.l d0,a6
    3886:	|      move.l 238(sp),d1
    388a:	|      jsr -306(a6)
    388e:	|      move.l d0,234(sp)
    3892:	|      move.l 234(sp),d0
    3896:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    389a:	|      move.l 306(sp),226(sp)
    38a0:	|      move.l 19b96 <DOSBase>,d0
    38a6:	|      movea.l d0,a6
    38a8:	|      move.l 226(sp),d1
    38ac:	|      jsr -306(a6)
    38b0:	|      move.l d0,222(sp)
    38b4:	|      move.l 222(sp),d0
    38b8:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    38bc:	|      move.l 230(sp),d0
    38c0:	|      lsl.l #8,d0
    38c2:	|      add.l 218(sp),d0
    38c6:	|      movea.l 344(sp),a0
    38ca:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    38cc:	|      movea.l 344(sp),a0
    38d0:	|      move.l (a0),d0
    38d2:	|      cmpi.l #514,d0
    38d8:	|  /-- ble.s 392e <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    38da:	|  |   move.l 19b96 <DOSBase>,d0
    38e0:	|  |   movea.l d0,a6
    38e2:	|  |   jsr -60(a6)
    38e6:	|  |   move.l d0,194(sp)
    38ea:	|  |   move.l 194(sp),d0
    38ee:	|  |   move.l d0,190(sp)
    38f2:	|  |   move.l #78752,186(sp)
    38fa:	|  |   moveq #100,d1
    38fc:	|  |   move.l d1,182(sp)
    3900:	|  |   move.l 19b96 <DOSBase>,d0
    3906:	|  |   movea.l d0,a6
    3908:	|  |   move.l 190(sp),d1
    390c:	|  |   move.l 186(sp),d2
    3910:	|  |   move.l 182(sp),d3
    3914:	|  |   jsr -48(a6)
    3918:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    391c:	|  |   pea 133a0 <thumbnail.c.7eb31449+0x10e>
    3922:	|  |   jsr 12130 <KPrintF>
    3928:	|  |   addq.l #4,sp
		return NULL;
    392a:	|  |   moveq #0,d0
    392c:	+--|-- bra.s 3994 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    392e:	|  \-> movea.l 344(sp),a0
    3932:	|      move.l (a0),d0
    3934:	|      cmpi.l #257,d0
    393a:	|  /-- bgt.s 3990 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    393c:	|  |   move.l 19b96 <DOSBase>,d0
    3942:	|  |   movea.l d0,a6
    3944:	|  |   jsr -60(a6)
    3948:	|  |   move.l d0,214(sp)
    394c:	|  |   move.l 214(sp),d0
    3950:	|  |   move.l d0,210(sp)
    3954:	|  |   move.l #78821,206(sp)
    395c:	|  |   moveq #100,d0
    395e:	|  |   move.l d0,202(sp)
    3962:	|  |   move.l 19b96 <DOSBase>,d0
    3968:	|  |   movea.l d0,a6
    396a:	|  |   move.l 210(sp),d1
    396e:	|  |   move.l 206(sp),d2
    3972:	|  |   move.l 202(sp),d3
    3976:	|  |   jsr -48(a6)
    397a:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    397e:	|  |   pea 133e5 <line.c.05397aaf+0x1f>
    3984:	|  |   jsr 12130 <KPrintF>
    398a:	|  |   addq.l #4,sp
		return NULL;
    398c:	|  |   moveq #0,d0
    398e:	+--|-- bra.s 3994 <openAndVerify+0x366>
	}
	return fp;
    3990:	|  \-> move.l 306(sp),d0
}
    3994:	\----> movem.l (sp)+,d2-d3/a6
    3998:	       lea 312(sp),sp
    399c:	       rts

0000399e <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    399e:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    39a0:	          move.l #105258,(sp)
	while (* huntAndDestroy) {
    39a6:	   /----- bra.s 39d2 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    39a8:	/--|----> movea.l (sp),a0
    39aa:	|  |      move.l (a0),d0
    39ac:	|  |      cmp.l 8(sp),d0
    39b0:	|  |  /-- bne.s 39c8 <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    39b2:	|  |  |   movea.l (sp),a0
    39b4:	|  |  |   movea.l (a0),a0
    39b6:	|  |  |   move.l 44(a0),d0
    39ba:	|  |  |   movea.l (sp),a0
    39bc:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    39be:	|  |  |   movea.l 8(sp),a0
    39c2:	|  |  |   clr.l 44(a0)
    39c6:	|  +--|-- bra.s 39d2 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    39c8:	|  |  \-> movea.l (sp),a0
    39ca:	|  |      move.l (a0),d0
    39cc:	|  |      moveq #44,d1
    39ce:	|  |      add.l d0,d1
    39d0:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    39d2:	|  \----> movea.l (sp),a0
    39d4:	|         move.l (a0),d0
    39d6:	\-------- bne.s 39a8 <pauseFunction+0xa>
		}
	}
}
    39d8:	          nop
    39da:	          nop
    39dc:	          addq.l #4,sp
    39de:	          rts

000039e0 <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    39e0:	move.l 19b2a <allRunningFunctions>,d0
    39e6:	movea.l 4(sp),a0
    39ea:	move.l d0,44(a0)
	allRunningFunctions = fun;
    39ee:	move.l 4(sp),19b2a <allRunningFunctions>
}
    39f6:	nop
    39f8:	rts

000039fa <runSludge>:

BOOL runSludge () {
    39fa:	                   lea -12(sp),sp
    39fe:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    3a00:	                   move.l 19b2a <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    3a08:	      /----------- bra.s 3a84 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    3a0a:	   /--|----------> movea.l 12(sp),a0
    3a0e:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    3a14:	   |  |            movea.l 12(sp),a0
    3a18:	   |  |            move.b 56(a0),d0
    3a1c:	   |  |  /-------- bne.s 3a7e <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    3a1e:	   |  |  |         movea.l 12(sp),a0
    3a22:	   |  |  |         move.l 12(a0),d0
    3a26:	   |  |  |  /----- beq.s 3a50 <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    3a28:	   |  |  |  |      movea.l 12(sp),a0
    3a2c:	   |  |  |  |      move.l 12(a0),d0
    3a30:	   |  |  |  |  /-- bpl.s 3a3c <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    3a32:	   |  |  |  |  |   movea.l 12(sp),a0
    3a36:	   |  |  |  |  |   clr.l 12(a0)
    3a3a:	   |  |  +--|--|-- bra.s 3a7e <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    3a3c:	   |  |  |  |  \-> movea.l 12(sp),a0
    3a40:	   |  |  |  |      move.l 12(a0),d0
    3a44:	   |  |  |  |      subq.l #1,d0
    3a46:	   |  |  |  |      movea.l 12(sp),a0
    3a4a:	   |  |  |  |      move.l d0,12(a0)
    3a4e:	   |  |  +--|----- bra.s 3a7e <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    3a50:	   |  |  |  \----> movea.l 12(sp),a0
    3a54:	   |  |  |         move.w 50(a0),d0
    3a58:	   |  |  |     /-- beq.s 3a68 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    3a5a:	   |  |  |     |   movea.l 12(sp),a0
    3a5e:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    3a62:	   |  |  |     |   jsr 4d58 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    3a68:	   |  |  |     \-> move.l 12(sp),-(sp)
    3a6c:	   |  |  |         jsr 1c5e <continueFunction>
    3a72:	   |  |  |         addq.l #4,sp
    3a74:	   |  |  |         tst.w d0
    3a76:	   |  |  +-------- bne.s 3a7e <runSludge+0x84>
					return FALSE;
    3a78:	   |  |  |         clr.w d0
    3a7a:	/--|--|--|-------- bra.w 3b0a <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    3a7e:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    3a84:	|  |  \----------> tst.l 12(sp)
    3a88:	|  \-------------- bne.s 3a0a <runSludge+0x10>
	}

	if (loadNow) {
    3a8a:	|                  move.l 19b5a <loadNow>,d0
    3a90:	|        /-------- beq.s 3b08 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    3a92:	|        |         movea.l 19b5a <loadNow>,a0
    3a98:	|        |         move.b (a0),d0
    3a9a:	|        |         cmpi.b #58,d0
    3a9e:	|        |  /----- bne.s 3ad2 <runSludge+0xd8>
			saveGame (loadNow + 1);
    3aa0:	|        |  |      move.l 19b5a <loadNow>,d0
    3aa6:	|        |  |      addq.l #1,d0
    3aa8:	|        |  |      move.l d0,-(sp)
    3aaa:	|        |  |      jsr 83a0 <saveGame>
    3ab0:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    3ab2:	|        |  |      movea.l 19c42 <saverFunc>,a0
    3ab8:	|        |  |      lea 28(a0),a0
    3abc:	|        |  |      pea 1 <_start+0x1>
    3ac0:	|        |  |      pea 1 <_start+0x1>
    3ac4:	|        |  |      move.l a0,-(sp)
    3ac6:	|        |  |      jsr 109ce <setVariable>
    3acc:	|        |  |      lea 12(sp),sp
    3ad0:	|        |  |  /-- bra.s 3aea <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    3ad2:	|        |  \--|-> move.l 19b5a <loadNow>,d0
    3ad8:	|        |     |   move.l d0,-(sp)
    3ada:	|        |     |   jsr 7ee8 <loadGame>
    3ae0:	|        |     |   addq.l #4,sp
    3ae2:	|        |     |   tst.w d0
    3ae4:	|        |     +-- bne.s 3aea <runSludge+0xf0>
    3ae6:	|        |     |   clr.w d0
    3ae8:	+--------|-----|-- bra.s 3b0a <runSludge+0x110>
		}
		FreeVec(loadNow);
    3aea:	|        |     \-> move.l 19b5a <loadNow>,8(sp)
    3af2:	|        |         move.l 19b8e <SysBase>,d0
    3af8:	|        |         movea.l d0,a6
    3afa:	|        |         movea.l 8(sp),a1
    3afe:	|        |         jsr -690(a6)
		loadNow = NULL;
    3b02:	|        |         clr.l 19b5a <loadNow>
	}

	return TRUE;
    3b08:	|        \-------> moveq #1,d0
}
    3b0a:	\----------------> movea.l (sp)+,a6
    3b0c:	                   lea 12(sp),sp
    3b10:	                   rts

00003b12 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    3b12:	movea.l 1806a <currentEvents>,a0
    3b18:	move.l (a0),d0
    3b1a:	move.l 4(sp),-(sp)
    3b1e:	move.l d0,-(sp)
    3b20:	jsr 8d0 <put2bytes>
    3b26:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    3b28:	movea.l 1806a <currentEvents>,a0
    3b2e:	move.l 4(a0),d0
    3b32:	move.l 4(sp),-(sp)
    3b36:	move.l d0,-(sp)
    3b38:	jsr 8d0 <put2bytes>
    3b3e:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    3b40:	movea.l 1806a <currentEvents>,a0
    3b46:	move.l 8(a0),d0
    3b4a:	move.l 4(sp),-(sp)
    3b4e:	move.l d0,-(sp)
    3b50:	jsr 8d0 <put2bytes>
    3b56:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    3b58:	movea.l 1806a <currentEvents>,a0
    3b5e:	move.l 12(a0),d0
    3b62:	move.l 4(sp),-(sp)
    3b66:	move.l d0,-(sp)
    3b68:	jsr 8d0 <put2bytes>
    3b6e:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    3b70:	movea.l 1806a <currentEvents>,a0
    3b76:	move.l 16(a0),d0
    3b7a:	move.l 4(sp),-(sp)
    3b7e:	move.l d0,-(sp)
    3b80:	jsr 8d0 <put2bytes>
    3b86:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    3b88:	movea.l 1806a <currentEvents>,a0
    3b8e:	move.l 20(a0),d0
    3b92:	move.l 4(sp),-(sp)
    3b96:	move.l d0,-(sp)
    3b98:	jsr 8d0 <put2bytes>
    3b9e:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    3ba0:	movea.l 1806a <currentEvents>,a0
    3ba6:	move.l 24(a0),d0
    3baa:	move.l 4(sp),-(sp)
    3bae:	move.l d0,-(sp)
    3bb0:	jsr 8d0 <put2bytes>
    3bb6:	addq.l #8,sp
}
    3bb8:	nop
    3bba:	rts

00003bbc <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    3bbc:	      /-- bra.s 3bdc <stackSetByIndex+0x20>
		vS = vS->next;
    3bbe:	/-----|-> movea.l 4(sp),a0
    3bc2:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    3bc8:	|     +-- bne.s 3bdc <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    3bca:	|     |   pea 1342c <line.c.05397aaf+0x66>
    3bd0:	|     |   jsr 12130 <KPrintF>
    3bd6:	|     |   addq.l #4,sp
			return FALSE;
    3bd8:	|     |   clr.w d0
    3bda:	|  /--|-- bra.s 3bfe <stackSetByIndex+0x42>
	while (theIndex--) {
    3bdc:	|  |  \-> move.l 8(sp),d0
    3be0:	|  |      move.l d0,d1
    3be2:	|  |      subq.l #1,d1
    3be4:	|  |      move.l d1,8(sp)
    3be8:	|  |      tst.l d0
    3bea:	\--|----- bne.s 3bbe <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    3bec:	   |      move.l 4(sp),d0
    3bf0:	   |      move.l d0,-(sp)
    3bf2:	   |      move.l 16(sp),-(sp)
    3bf6:	   |      jsr 10596 <copyVariable>
    3bfc:	   |      addq.l #8,sp
}
    3bfe:	   \----> rts

00003c00 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    3c00:	             lea -24(sp),sp
    3c04:	             move.l a6,-(sp)
    3c06:	             move.l 48(sp),d0
    3c0a:	             move.w d0,d0
    3c0c:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    3c10:	             moveq #58,d0
    3c12:	             move.l d0,24(sp)
    3c16:	             clr.l 20(sp)
    3c1a:	             move.l 19b8e <SysBase>,d0
    3c20:	             movea.l d0,a6
    3c22:	             move.l 24(sp),d0
    3c26:	             move.l 20(sp),d1
    3c2a:	             jsr -684(a6)
    3c2e:	             move.l d0,16(sp)
    3c32:	             move.l 16(sp),d0
    3c36:	             move.l d0,12(sp)
	if(!newFunc) {
    3c3a:	         /-- bne.s 3c50 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    3c3c:	         |   pea 13445 <line.c.05397aaf+0x7f>
    3c42:	         |   jsr 12130 <KPrintF>
    3c48:	         |   addq.l #4,sp
		return 0;
    3c4a:	         |   moveq #0,d0
    3c4c:	/--------|-- bra.w 3d66 <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    3c50:	|        \-> move.l 32(sp),d0
    3c54:	|            movea.l 12(sp),a0
    3c58:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    3c5a:	|            move.l 12(sp),-(sp)
    3c5e:	|            jsr 339c <loadFunctionCode>
    3c64:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    3c66:	|            movea.l 12(sp),a0
    3c6a:	|            move.l 16(a0),d1
    3c6e:	|            move.l 36(sp),d0
    3c72:	|            cmp.l d1,d0
    3c74:	|        /-- beq.s 3c8a <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    3c76:	|        |   pea 1346e <line.c.05397aaf+0xa8>
    3c7c:	|        |   jsr 12130 <KPrintF>
    3c82:	|        |   addq.l #4,sp
		return NULL; 
    3c84:	|        |   moveq #0,d0
    3c86:	+--------|-- bra.w 3d66 <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    3c8a:	|        \-> movea.l 12(sp),a0
    3c8e:	|            move.l 16(a0),d1
    3c92:	|            movea.l 12(sp),a0
    3c96:	|            move.l 8(a0),d0
    3c9a:	|            cmp.l d1,d0
    3c9c:	|  /-------- bge.s 3d06 <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    3c9e:	|  |         pea 1348a <line.c.05397aaf+0xc4>
    3ca4:	|  |         jsr 12130 <KPrintF>
    3caa:	|  |         addq.l #4,sp
		return NULL; 
    3cac:	|  |         moveq #0,d0
    3cae:	+--|-------- bra.w 3d66 <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    3cb2:	|  |  /----> movea.l 44(sp),a0
    3cb6:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    3cba:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    3cbe:	|  |  |      movea.l 44(sp),a0
    3cc2:	|  |  |      move.l (a0),d0
    3cc4:	|  |  |  /-- bne.s 3cda <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    3cc6:	|  |  |  |   pea 134b4 <line.c.05397aaf+0xee>
    3ccc:	|  |  |  |   jsr 12130 <KPrintF>
    3cd2:	|  |  |  |   addq.l #4,sp
			return NULL;
    3cd4:	|  |  |  |   moveq #0,d0
    3cd6:	+--|--|--|-- bra.w 3d66 <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    3cda:	|  |  |  \-> movea.l 12(sp),a0
    3cde:	|  |  |      move.l 20(a0),d1
    3ce2:	|  |  |      move.l 36(sp),d0
    3ce6:	|  |  |      lsl.l #3,d0
    3ce8:	|  |  |      add.l d0,d1
    3cea:	|  |  |      move.l 8(sp),d0
    3cee:	|  |  |      move.l d1,-(sp)
    3cf0:	|  |  |      move.l d0,-(sp)
    3cf2:	|  |  |      jsr 10596 <copyVariable>
    3cf8:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    3cfa:	|  |  |      move.l 44(sp),-(sp)
    3cfe:	|  |  |      jsr 10a60 <trimStack>
    3d04:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    3d06:	|  \--|----> tst.l 36(sp)
    3d0a:	|     \----- bne.s 3cb2 <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    3d0c:	|            movea.l 12(sp),a0
    3d10:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    3d14:	|            movea.l 12(sp),a0
    3d18:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    3d1c:	|            movea.l 12(sp),a0
    3d20:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    3d26:	|            movea.l 12(sp),a0
    3d2a:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    3d30:	|            movea.l 12(sp),a0
    3d34:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    3d38:	|            movea.l 12(sp),a0
    3d3c:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    3d40:	|            movea.l 12(sp),a0
    3d44:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    3d48:	|            movea.l 12(sp),a0
    3d4c:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    3d50:	|            movea.l 12(sp),a0
    3d54:	|            clr.l 28(a0)

	restartFunction (newFunc);
    3d58:	|            move.l 12(sp),-(sp)
    3d5c:	|            jsr 39e0 <restartFunction>
    3d62:	|            addq.l #4,sp
	return 1;
    3d64:	|            moveq #1,d0
}
    3d66:	\----------> movea.l (sp)+,a6
    3d68:	             lea 24(sp),sp
    3d6c:	             rts

00003d6e <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    3d6e:	clr.w 18076 <sliceBusy>
}
    3d74:	nop
    3d76:	rts

00003d78 <getNumberedString>:

char * getNumberedString (int value) {
    3d78:	       lea -56(sp),sp
    3d7c:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    3d80:	       move.w 18076 <sliceBusy>,d0
    3d86:	   /-- beq.s 3dd0 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    3d88:	   |   move.l 19b96 <DOSBase>,d0
    3d8e:	   |   movea.l d0,a6
    3d90:	   |   jsr -60(a6)
    3d94:	   |   move.l d0,28(sp)
    3d98:	   |   move.l 28(sp),d0
    3d9c:	   |   move.l d0,24(sp)
    3da0:	   |   move.l #79103,20(sp)
    3da8:	   |   moveq #76,d0
    3daa:	   |   move.l d0,16(sp)
    3dae:	   |   move.l 19b96 <DOSBase>,d0
    3db4:	   |   movea.l d0,a6
    3db6:	   |   move.l 24(sp),d1
    3dba:	   |   move.l 20(sp),d2
    3dbe:	   |   move.l 16(sp),d3
    3dc2:	   |   jsr -48(a6)
    3dc6:	   |   move.l d0,12(sp)
		return NULL;
    3dca:	   |   moveq #0,d0
    3dcc:	/--|-- bra.w 3e6c <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    3dd0:	|  \-> move.l 19b76 <bigDataFile>,64(sp)
    3dd8:	|      move.l 72(sp),d0
    3ddc:	|      add.l d0,d0
    3dde:	|      add.l d0,d0
    3de0:	|      move.l d0,d1
    3de2:	|      move.l 19b82 <startOfTextIndex>,d0
    3de8:	|      add.l d1,d0
    3dea:	|      move.l d0,60(sp)
    3dee:	|      moveq #-1,d0
    3df0:	|      move.l d0,56(sp)
    3df4:	|      move.l 19b96 <DOSBase>,d0
    3dfa:	|      movea.l d0,a6
    3dfc:	|      move.l 64(sp),d1
    3e00:	|      move.l 60(sp),d2
    3e04:	|      move.l 56(sp),d3
    3e08:	|      jsr -66(a6)
    3e0c:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    3e10:	|      move.l 19b76 <bigDataFile>,d0
    3e16:	|      move.l d0,-(sp)
    3e18:	|      jsr 718 <get4bytes>
    3e1e:	|      addq.l #4,sp
    3e20:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    3e24:	|      move.l 19b76 <bigDataFile>,48(sp)
    3e2c:	|      move.l 72(sp),44(sp)
    3e32:	|      moveq #-1,d0
    3e34:	|      move.l d0,40(sp)
    3e38:	|      move.l 19b96 <DOSBase>,d0
    3e3e:	|      movea.l d0,a6
    3e40:	|      move.l 48(sp),d1
    3e44:	|      move.l 44(sp),d2
    3e48:	|      move.l 40(sp),d3
    3e4c:	|      jsr -66(a6)
    3e50:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    3e54:	|      move.l 19b76 <bigDataFile>,d0
    3e5a:	|      move.l d0,-(sp)
    3e5c:	|      jsr b02 <readString>
    3e62:	|      addq.l #4,sp
    3e64:	|      move.l d0,32(sp)
	
	return s;
    3e68:	|      move.l 32(sp),d0
}
    3e6c:	\----> movem.l (sp)+,d2-d3/a6
    3e70:	       lea 56(sp),sp
    3e74:	       rts

00003e76 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    3e76:	       lea -32(sp),sp
    3e7a:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    3e7e:	       move.w 18076 <sliceBusy>,d0
    3e84:	   /-- beq.s 3ea0 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    3e86:	   |   pea 1354c <line.c.05397aaf+0x186>
    3e8c:	   |   pea 1356a <line.c.05397aaf+0x1a4>
    3e92:	   |   jsr 12130 <KPrintF>
    3e98:	   |   addq.l #8,sp
		return 0;
    3e9a:	   |   moveq #0,d0
    3e9c:	/--|-- bra.w 3f34 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    3ea0:	|  \-> move.l 19b76 <bigDataFile>,40(sp)
    3ea8:	|      move.l 48(sp),d0
    3eac:	|      add.l d0,d0
    3eae:	|      add.l d0,d0
    3eb0:	|      move.l d0,d1
    3eb2:	|      move.l 19b7e <startOfDataIndex>,d0
    3eb8:	|      add.l d1,d0
    3eba:	|      move.l d0,36(sp)
    3ebe:	|      moveq #-1,d0
    3ec0:	|      move.l d0,32(sp)
    3ec4:	|      move.l 19b96 <DOSBase>,d0
    3eca:	|      movea.l d0,a6
    3ecc:	|      move.l 40(sp),d1
    3ed0:	|      move.l 36(sp),d2
    3ed4:	|      move.l 32(sp),d3
    3ed8:	|      jsr -66(a6)
    3edc:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    3ee0:	|      move.l 19b76 <bigDataFile>,24(sp)
    3ee8:	|      move.l 19b76 <bigDataFile>,d0
    3eee:	|      move.l d0,-(sp)
    3ef0:	|      jsr 718 <get4bytes>
    3ef6:	|      addq.l #4,sp
    3ef8:	|      move.l d0,20(sp)
    3efc:	|      clr.l 16(sp)
    3f00:	|      move.l 19b96 <DOSBase>,d0
    3f06:	|      movea.l d0,a6
    3f08:	|      move.l 24(sp),d1
    3f0c:	|      move.l 20(sp),d2
    3f10:	|      move.l 16(sp),d3
    3f14:	|      jsr -66(a6)
    3f18:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    3f1c:	|      move.w #1,18076 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    3f24:	|      move.l 19b76 <bigDataFile>,d0
    3f2a:	|      move.l d0,-(sp)
    3f2c:	|      jsr 718 <get4bytes>
    3f32:	|      addq.l #4,sp
}
    3f34:	\----> movem.l (sp)+,d2-d3/a6
    3f38:	       lea 32(sp),sp
    3f3c:	       rts

00003f3e <openObjectSlice>:

BOOL openObjectSlice (int num) {
    3f3e:	       lea -32(sp),sp
    3f42:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    3f46:	       move.w 18076 <sliceBusy>,d0
    3f4c:	   /-- beq.s 3f68 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    3f4e:	   |   pea 1354c <line.c.05397aaf+0x186>
    3f54:	   |   pea 1356a <line.c.05397aaf+0x1a4>
    3f5a:	   |   jsr 12130 <KPrintF>
    3f60:	   |   addq.l #8,sp
        return FALSE;
    3f62:	   |   clr.w d0
    3f64:	/--|-- bra.w 3ff4 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    3f68:	|  \-> move.l 19b76 <bigDataFile>,40(sp)
    3f70:	|      move.l 48(sp),d0
    3f74:	|      add.l d0,d0
    3f76:	|      add.l d0,d0
    3f78:	|      move.l d0,d1
    3f7a:	|      move.l 19b8a <startOfObjectIndex>,d0
    3f80:	|      add.l d1,d0
    3f82:	|      move.l d0,36(sp)
    3f86:	|      moveq #-1,d0
    3f88:	|      move.l d0,32(sp)
    3f8c:	|      move.l 19b96 <DOSBase>,d0
    3f92:	|      movea.l d0,a6
    3f94:	|      move.l 40(sp),d1
    3f98:	|      move.l 36(sp),d2
    3f9c:	|      move.l 32(sp),d3
    3fa0:	|      jsr -66(a6)
    3fa4:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    3fa8:	|      move.l 19b76 <bigDataFile>,24(sp)
    3fb0:	|      move.l 19b76 <bigDataFile>,d0
    3fb6:	|      move.l d0,-(sp)
    3fb8:	|      jsr 718 <get4bytes>
    3fbe:	|      addq.l #4,sp
    3fc0:	|      move.l d0,20(sp)
    3fc4:	|      moveq #-1,d0
    3fc6:	|      move.l d0,16(sp)
    3fca:	|      move.l 19b96 <DOSBase>,d0
    3fd0:	|      movea.l d0,a6
    3fd2:	|      move.l 24(sp),d1
    3fd6:	|      move.l 20(sp),d2
    3fda:	|      move.l 16(sp),d3
    3fde:	|      jsr -66(a6)
    3fe2:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    3fe6:	|      move.w #1,18076 <sliceBusy>
    3fee:	|      move.w 18076 <sliceBusy>,d0
}
    3ff4:	\----> movem.l (sp)+,d2-d3/a6
    3ff8:	       lea 32(sp),sp
    3ffc:	       rts

00003ffe <openSubSlice>:

BOOL openSubSlice (int num) {
    3ffe:	       lea -32(sp),sp
    4002:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    4006:	       move.w 18076 <sliceBusy>,d0
    400c:	   /-- beq.s 4028 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    400e:	   |   pea 1354c <line.c.05397aaf+0x186>
    4014:	   |   pea 1356a <line.c.05397aaf+0x1a4>
    401a:	   |   jsr 12130 <KPrintF>
    4020:	   |   addq.l #8,sp
		return FALSE;
    4022:	   |   clr.w d0
    4024:	/--|-- bra.w 40b4 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    4028:	|  \-> move.l 19b76 <bigDataFile>,40(sp)
    4030:	|      move.l 48(sp),d0
    4034:	|      add.l d0,d0
    4036:	|      add.l d0,d0
    4038:	|      move.l d0,d1
    403a:	|      move.l 19b86 <startOfSubIndex>,d0
    4040:	|      add.l d1,d0
    4042:	|      move.l d0,36(sp)
    4046:	|      moveq #-1,d0
    4048:	|      move.l d0,32(sp)
    404c:	|      move.l 19b96 <DOSBase>,d0
    4052:	|      movea.l d0,a6
    4054:	|      move.l 40(sp),d1
    4058:	|      move.l 36(sp),d2
    405c:	|      move.l 32(sp),d3
    4060:	|      jsr -66(a6)
    4064:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    4068:	|      move.l 19b76 <bigDataFile>,24(sp)
    4070:	|      move.l 19b76 <bigDataFile>,d0
    4076:	|      move.l d0,-(sp)
    4078:	|      jsr 718 <get4bytes>
    407e:	|      addq.l #4,sp
    4080:	|      move.l d0,20(sp)
    4084:	|      moveq #-1,d0
    4086:	|      move.l d0,16(sp)
    408a:	|      move.l 19b96 <DOSBase>,d0
    4090:	|      movea.l d0,a6
    4092:	|      move.l 24(sp),d1
    4096:	|      move.l 20(sp),d2
    409a:	|      move.l 16(sp),d3
    409e:	|      jsr -66(a6)
    40a2:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    40a6:	|      move.w #1,18076 <sliceBusy>
    40ae:	|      move.w 18076 <sliceBusy>,d0
}
    40b4:	\----> movem.l (sp)+,d2-d3/a6
    40b8:	       lea 32(sp),sp
    40bc:	       rts

000040be <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    40be:	       lea -180(sp),sp
    40c2:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    40c6:	       tst.l 196(sp)
    40ca:	/----- beq.s 410a <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    40cc:	|      move.l 196(sp),19b76 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    40d4:	|      move.l 196(sp),168(sp)
    40da:	|      clr.l 164(sp)
    40de:	|      clr.l 160(sp)
    40e2:	|      move.l 19b96 <DOSBase>,d0
    40e8:	|      movea.l d0,a6
    40ea:	|      move.l 168(sp),d1
    40ee:	|      move.l 164(sp),d2
    40f2:	|      move.l 160(sp),d3
    40f6:	|      jsr -66(a6)
    40fa:	|      move.l d0,156(sp)
    40fe:	|      move.l 156(sp),d0
    4102:	|      move.l d0,19b7a <startIndex>
    4108:	|  /-- bra.s 4144 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    410a:	\--|-> move.l 19b76 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    4112:	   |   move.l 196(sp),184(sp)
    4118:	   |   move.l 19b7a <startIndex>,d0
    411e:	   |   move.l d0,180(sp)
    4122:	   |   moveq #-1,d0
    4124:	   |   move.l d0,176(sp)
    4128:	   |   move.l 19b96 <DOSBase>,d0
    412e:	   |   movea.l d0,a6
    4130:	   |   move.l 184(sp),d1
    4134:	   |   move.l 180(sp),d2
    4138:	   |   move.l 176(sp),d3
    413c:	   |   jsr -66(a6)
    4140:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    4144:	   \-> clr.w 18076 <sliceBusy>

	if (skipBefore > numLanguages) {
    414a:	       move.l 204(sp),d0
    414e:	       cmp.l 200(sp),d0
    4152:	   /-- bls.s 4166 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    4154:	   |   pea 13584 <line.c.05397aaf+0x1be>
    415a:	   |   jsr 12130 <KPrintF>
    4160:	   |   addq.l #4,sp
		skipBefore = 0;
    4162:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    4166:	   \-> move.l 200(sp),d0
    416a:	       sub.l 204(sp),d0
    416e:	       move.l d0,188(sp)
	while (skipBefore) {
    4172:	   /-- bra.s 41b0 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    4174:	/--|-> move.l 196(sp),24(sp)
    417a:	|  |   move.l 196(sp),-(sp)
    417e:	|  |   jsr 718 <get4bytes>
    4184:	|  |   addq.l #4,sp
    4186:	|  |   move.l d0,20(sp)
    418a:	|  |   moveq #-1,d0
    418c:	|  |   move.l d0,16(sp)
    4190:	|  |   move.l 19b96 <DOSBase>,d0
    4196:	|  |   movea.l d0,a6
    4198:	|  |   move.l 24(sp),d1
    419c:	|  |   move.l 20(sp),d2
    41a0:	|  |   move.l 16(sp),d3
    41a4:	|  |   jsr -66(a6)
    41a8:	|  |   move.l d0,12(sp)
		skipBefore --;
    41ac:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    41b0:	|  \-> tst.l 204(sp)
    41b4:	\----- bne.s 4174 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    41b6:	       move.l 196(sp),152(sp)
    41bc:	       clr.l 148(sp)
    41c0:	       clr.l 144(sp)
    41c4:	       move.l 19b96 <DOSBase>,d0
    41ca:	       movea.l d0,a6
    41cc:	       move.l 152(sp),d1
    41d0:	       move.l 148(sp),d2
    41d4:	       move.l 144(sp),d3
    41d8:	       jsr -66(a6)
    41dc:	       move.l d0,140(sp)
    41e0:	       move.l 140(sp),d0
    41e4:	       addq.l #4,d0
    41e6:	       move.l d0,19b82 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    41ec:	       move.l 196(sp),136(sp)
    41f2:	       move.l 196(sp),-(sp)
    41f6:	       jsr 718 <get4bytes>
    41fc:	       addq.l #4,sp
    41fe:	       move.l d0,132(sp)
    4202:	       moveq #-1,d0
    4204:	       move.l d0,128(sp)
    4208:	       move.l 19b96 <DOSBase>,d0
    420e:	       movea.l d0,a6
    4210:	       move.l 136(sp),d1
    4214:	       move.l 132(sp),d2
    4218:	       move.l 128(sp),d3
    421c:	       jsr -66(a6)
    4220:	       move.l d0,124(sp)

	while (skipAfter) {
    4224:	   /-- bra.s 4262 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    4226:	/--|-> move.l 196(sp),40(sp)
    422c:	|  |   move.l 196(sp),-(sp)
    4230:	|  |   jsr 718 <get4bytes>
    4236:	|  |   addq.l #4,sp
    4238:	|  |   move.l d0,36(sp)
    423c:	|  |   moveq #-1,d0
    423e:	|  |   move.l d0,32(sp)
    4242:	|  |   move.l 19b96 <DOSBase>,d0
    4248:	|  |   movea.l d0,a6
    424a:	|  |   move.l 40(sp),d1
    424e:	|  |   move.l 36(sp),d2
    4252:	|  |   move.l 32(sp),d3
    4256:	|  |   jsr -66(a6)
    425a:	|  |   move.l d0,28(sp)
		skipAfter --;
    425e:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    4262:	|  \-> tst.l 188(sp)
    4266:	\----- bne.s 4226 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    4268:	       move.l 196(sp),120(sp)
    426e:	       clr.l 116(sp)
    4272:	       clr.l 112(sp)
    4276:	       move.l 19b96 <DOSBase>,d0
    427c:	       movea.l d0,a6
    427e:	       move.l 120(sp),d1
    4282:	       move.l 116(sp),d2
    4286:	       move.l 112(sp),d3
    428a:	       jsr -66(a6)
    428e:	       move.l d0,108(sp)
    4292:	       move.l 108(sp),d0
    4296:	       addq.l #4,d0
    4298:	       move.l d0,19b86 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    429e:	       move.l 196(sp),104(sp)
    42a4:	       move.l 196(sp),-(sp)
    42a8:	       jsr 718 <get4bytes>
    42ae:	       addq.l #4,sp
    42b0:	       move.l d0,100(sp)
    42b4:	       clr.l 96(sp)
    42b8:	       move.l 19b96 <DOSBase>,d0
    42be:	       movea.l d0,a6
    42c0:	       move.l 104(sp),d1
    42c4:	       move.l 100(sp),d2
    42c8:	       move.l 96(sp),d3
    42cc:	       jsr -66(a6)
    42d0:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    42d4:	       move.l 196(sp),88(sp)
    42da:	       clr.l 84(sp)
    42de:	       clr.l 80(sp)
    42e2:	       move.l 19b96 <DOSBase>,d0
    42e8:	       movea.l d0,a6
    42ea:	       move.l 88(sp),d1
    42ee:	       move.l 84(sp),d2
    42f2:	       move.l 80(sp),d3
    42f6:	       jsr -66(a6)
    42fa:	       move.l d0,76(sp)
    42fe:	       move.l 76(sp),d0
    4302:	       addq.l #4,d0
    4304:	       move.l d0,19b8a <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    430a:	       move.l 196(sp),72(sp)
    4310:	       move.l 196(sp),-(sp)
    4314:	       jsr 718 <get4bytes>
    431a:	       addq.l #4,sp
    431c:	       move.l d0,68(sp)
    4320:	       clr.l 64(sp)
    4324:	       move.l 19b96 <DOSBase>,d0
    432a:	       movea.l d0,a6
    432c:	       move.l 72(sp),d1
    4330:	       move.l 68(sp),d2
    4334:	       move.l 64(sp),d3
    4338:	       jsr -66(a6)
    433c:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    4340:	       move.l 196(sp),56(sp)
    4346:	       clr.l 52(sp)
    434a:	       clr.l 48(sp)
    434e:	       move.l 19b96 <DOSBase>,d0
    4354:	       movea.l d0,a6
    4356:	       move.l 56(sp),d1
    435a:	       move.l 52(sp),d2
    435e:	       move.l 48(sp),d3
    4362:	       jsr -66(a6)
    4366:	       move.l d0,44(sp)
    436a:	       move.l 44(sp),d0
    436e:	       move.l d0,19b7e <startOfDataIndex>
    4374:	       nop
    4376:	       movem.l (sp)+,d2-d3/a6
    437a:	       lea 180(sp),sp
    437e:	       rts

00004380 <p61Init>:
	// The Player® 6.1A: Copyright © 1992-95 Jarno Paananen
	// P61.testmod - Module by Skylord/Sector 7 
	INCBIN(player, "player610.6.no_cia.bin")
	INCBIN_CHIP(module, "testmod.p61")

	int p61Init(const void* module) { // returns 0 if success, non-zero otherwise
    4380:	move.l a3,-(sp)
    4382:	move.l a2,-(sp)
		register volatile const void* _a0 ASM("a0") = module;
    4384:	movea.l 12(sp),a0
		register volatile const void* _a1 ASM("a1") = NULL;
    4388:	suba.l a1,a1
		register volatile const void* _a2 ASM("a2") = NULL;
    438a:	suba.l a2,a2
		register volatile const void* _a3 ASM("a3") = player;
    438c:	move.l 18078 <player>,d0
    4392:	movea.l d0,a3
		register                int   _d0 ASM("d0"); // return value
		__asm volatile (
    4394:	movem.l d1-d7/a4-a6,-(sp)
    4398:	jsr (a3)
    439a:	movem.l (sp)+,d1-d7/a4-a6
			"movem.l (%%sp)+,%%d1-%%d7/%%a4-%%a6"
		: "=r" (_d0), "+rf"(_a0), "+rf"(_a1), "+rf"(_a2), "+rf"(_a3)
		:
		: "cc", "memory");
		return _d0;
	}
    439e:	movea.l (sp)+,a2
    43a0:	movea.l (sp)+,a3
    43a2:	rts

000043a4 <p61End>:
		: "+rf"(_a3), "+rf"(_a6)
		:
		: "cc", "memory");
	}

	void p61End() {
    43a4:	move.l a6,-(sp)
    43a6:	move.l a3,-(sp)
		register volatile const void* _a3 ASM("a3") = player;
    43a8:	move.l 18078 <player>,d0
    43ae:	movea.l d0,a3
		register volatile const void* _a6 ASM("a6") = (void*)0xdff000;
    43b0:	movea.l #14675968,a6
		__asm volatile (
    43b6:	movem.l d0-d1/a0-a1,-(sp)
    43ba:	jsr 8(a3)
    43be:	movem.l (sp)+,d0-d1/a0-a1
			"jsr 8(%%a3)\n"
			"movem.l (%%sp)+,%%d0-%%d1/%%a0-%%a1"
		: "+rf"(_a3), "+rf"(_a6)
		:
		: "cc", "memory");
	}
    43c2:	nop
    43c4:	movea.l (sp)+,a3
    43c6:	movea.l (sp)+,a6
    43c8:	rts

000043ca <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    43ca:	    lea -128(sp),sp
    43ce:	    movem.l d2-d3/a6,-(sp)
	SysBase = *((struct ExecBase**)4UL);
    43d2:	    movea.w #4,a0
    43d6:	    move.l (a0),d0
    43d8:	    move.l d0,19b8e <SysBase>
	custom = (struct Custom*)0xdff000;	
    43de:	    move.l #14675968,19b92 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    43e8:	    move.l #85813,136(sp)
    43f0:	    clr.l 132(sp)
    43f4:	    move.l 19b8e <SysBase>,d0
    43fa:	    movea.l d0,a6
    43fc:	    movea.l 136(sp),a1
    4400:	    move.l 132(sp),d0
    4404:	    jsr -552(a6)
    4408:	    move.l d0,128(sp)
    440c:	    move.l 128(sp),d0
    4410:	    move.l d0,19b9a <GfxBase>
	if (!GfxBase)
    4416:	    move.l 19b9a <GfxBase>,d0
    441c:	/-- bne.s 4432 <main+0x68>
		Exit(0);
    441e:	|   clr.l 124(sp)
    4422:	|   move.l 19b96 <DOSBase>,d0
    4428:	|   movea.l d0,a6
    442a:	|   move.l 124(sp),d1
    442e:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    4432:	\-> move.l #85830,120(sp)
    443a:	    clr.l 116(sp)
    443e:	    move.l 19b8e <SysBase>,d0
    4444:	    movea.l d0,a6
    4446:	    movea.l 120(sp),a1
    444a:	    move.l 116(sp),d0
    444e:	    jsr -552(a6)
    4452:	    move.l d0,112(sp)
    4456:	    move.l 112(sp),d0
    445a:	    move.l d0,19b96 <DOSBase>
	if (!DOSBase)
    4460:	    move.l 19b96 <DOSBase>,d0
    4466:	/-- bne.s 447c <main+0xb2>
		Exit(0);
    4468:	|   clr.l 108(sp)
    446c:	|   move.l 19b96 <DOSBase>,d0
    4472:	|   movea.l d0,a6
    4474:	|   move.l 108(sp),d1
    4478:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    447c:	\-> move.l #85842,104(sp)
    4484:	    clr.l 100(sp)
    4488:	    move.l 19b8e <SysBase>,d0
    448e:	    movea.l d0,a6
    4490:	    movea.l 104(sp),a1
    4494:	    move.l 100(sp),d0
    4498:	    jsr -552(a6)
    449c:	    move.l d0,96(sp)
    44a0:	    move.l 96(sp),d0
    44a4:	    move.l d0,19b9e <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    44aa:	    move.l 19b9e <MathIeeeSingBasBase>,d0
    44b0:	/-- bne.s 44c6 <main+0xfc>
		Exit(0);	
    44b2:	|   clr.l 92(sp)
    44b6:	|   move.l 19b96 <DOSBase>,d0
    44bc:	|   movea.l d0,a6
    44be:	|   move.l 92(sp),d1
    44c2:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    44c6:	\-> move.l #85866,88(sp)
    44ce:	    clr.l 84(sp)
    44d2:	    move.l 19b8e <SysBase>,d0
    44d8:	    movea.l d0,a6
    44da:	    movea.l 88(sp),a1
    44de:	    move.l 84(sp),d0
    44e2:	    jsr -552(a6)
    44e6:	    move.l d0,80(sp)
    44ea:	    move.l 80(sp),d0
    44ee:	    move.l d0,19ba2 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    44f4:	    move.l 19ba2 <MathIeeeSingTransBase>,d0
    44fa:	/-- bne.s 4510 <main+0x146>
		Exit(0);
    44fc:	|   clr.l 76(sp)
    4500:	|   move.l 19b96 <DOSBase>,d0
    4506:	|   movea.l d0,a6
    4508:	|   move.l 76(sp),d1
    450c:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    4510:	\-> move.l #85892,72(sp)
    4518:	    clr.l 68(sp)
    451c:	    move.l 19b8e <SysBase>,d0
    4522:	    movea.l d0,a6
    4524:	    movea.l 72(sp),a1
    4528:	    move.l 68(sp),d0
    452c:	    jsr -552(a6)
    4530:	    move.l d0,64(sp)
    4534:	    move.l 64(sp),d0
    4538:	    move.l d0,19baa <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    453e:	    move.l 19baa <MathIeeeDoubTransBase>,d0
    4544:	/-- bne.s 455a <main+0x190>
		Exit(0);
    4546:	|   clr.l 60(sp)
    454a:	|   move.l 19b96 <DOSBase>,d0
    4550:	|   movea.l d0,a6
    4552:	|   move.l 60(sp),d1
    4556:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    455a:	\-> move.l #85918,56(sp)
    4562:	    clr.l 52(sp)
    4566:	    move.l 19b8e <SysBase>,d0
    456c:	    movea.l d0,a6
    456e:	    movea.l 56(sp),a1
    4572:	    move.l 52(sp),d0
    4576:	    jsr -552(a6)
    457a:	    move.l d0,48(sp)
    457e:	    move.l 48(sp),d0
    4582:	    move.l d0,19ba6 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    4588:	    move.l 19ba6 <MathIeeeDoubBasBase>,d0
    458e:	/-- bne.s 45a4 <main+0x1da>
		Exit(0);
    4590:	|   clr.l 44(sp)
    4594:	|   move.l 19b96 <DOSBase>,d0
    459a:	|   movea.l d0,a6
    459c:	|   move.l 44(sp),d1
    45a0:	|   jsr -144(a6)
	

	KPrintF("Hello debugger from Amiga!\n");
    45a4:	\-> pea 14fb6 <incbin_player_end+0x82>
    45aa:	    jsr 12130 <KPrintF>
    45b0:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console!\n", 15);
    45b2:	    move.l 19b96 <DOSBase>,d0
    45b8:	    movea.l d0,a6
    45ba:	    jsr -60(a6)
    45be:	    move.l d0,40(sp)
    45c2:	    move.l 40(sp),d0
    45c6:	    move.l d0,36(sp)
    45ca:	    move.l #85970,32(sp)
    45d2:	    moveq #15,d0
    45d4:	    move.l d0,28(sp)
    45d8:	    move.l 19b96 <DOSBase>,d0
    45de:	    movea.l d0,a6
    45e0:	    move.l 36(sp),d1
    45e4:	    move.l 32(sp),d2
    45e8:	    move.l 28(sp),d3
    45ec:	    jsr -48(a6)
    45f0:	    move.l d0,24(sp)
	Delay(50);
    45f4:	    moveq #50,d0
    45f6:	    move.l d0,20(sp)
    45fa:	    move.l 19b96 <DOSBase>,d0
    4600:	    movea.l d0,a6
    4602:	    move.l 20(sp),d1
    4606:	    jsr -198(a6)

	warpmode(1);
    460a:	    pea 1 <_start+0x1>
    460e:	    jsr 1219a <warpmode>
    4614:	    addq.l #4,sp
	// TODO: precalc stuff here
#ifdef MUSIC
	if(p61Init(module) != 0)
    4616:	    move.l 1807c <module>,d0
    461c:	    move.l d0,-(sp)
    461e:	    jsr 4380 <p61Init>
    4624:	    addq.l #4,sp
    4626:	    tst.l d0
    4628:	/-- beq.s 4638 <main+0x26e>
		KPrintF("p61Init failed!\n");
    462a:	|   pea 14fe2 <incbin_player_end+0xae>
    4630:	|   jsr 12130 <KPrintF>
    4636:	|   addq.l #4,sp
#endif
	warpmode(0);
    4638:	\-> clr.l -(sp)
    463a:	    jsr 1219a <warpmode>
    4640:	    addq.l #4,sp

	//TakeSystem();
	custom->dmacon = 0x87ff;
    4642:	    movea.l 19b92 <custom>,a0
    4648:	    move.w #-30721,150(a0)
	WaitVbl();
    464e:	    jsr 12058 <WaitVbl>

	main_sludge(argc, argv);
    4654:	    move.l 148(sp),-(sp)
    4658:	    move.l 148(sp),-(sp)
    465c:	    jsr 10d0 <main_sludge>
    4662:	    addq.l #8,sp
	debug_register_palette(colors, "image.pal", 32, 0);
	debug_register_copperlist(copper1, "copper1", 1024, 0);
	debug_register_copperlist(copper2, "copper2", sizeof(copper2), 0);*/

#ifdef MUSIC
	p61End();
    4664:	    jsr 43a4 <p61End>
#endif

	// END
	//FreeSystem();

	CloseLibrary((struct Library*)DOSBase);
    466a:	    move.l 19b96 <DOSBase>,16(sp)
    4672:	    move.l 19b8e <SysBase>,d0
    4678:	    movea.l d0,a6
    467a:	    movea.l 16(sp),a1
    467e:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    4682:	    move.l 19b9a <GfxBase>,12(sp)
    468a:	    move.l 19b8e <SysBase>,d0
    4690:	    movea.l d0,a6
    4692:	    movea.l 12(sp),a1
    4696:	    jsr -414(a6)
    469a:	    moveq #0,d0
}
    469c:	    movem.l (sp)+,d2-d3/a6
    46a0:	    lea 128(sp),sp
    46a4:	    rts

000046a6 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    46a6:	    lea -16(sp),sp
    46aa:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    46ac:	    moveq #8,d0
    46ae:	    move.l d0,16(sp)
    46b2:	    clr.l 12(sp)
    46b6:	    move.l 19b8e <SysBase>,d0
    46bc:	    movea.l d0,a6
    46be:	    move.l 16(sp),d0
    46c2:	    move.l 12(sp),d1
    46c6:	    jsr -684(a6)
    46ca:	    move.l d0,8(sp)
    46ce:	    move.l 8(sp),d0
    46d2:	    move.l d0,4(sp)
	if (!newStat) {
    46d6:	/-- bne.s 4706 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    46d8:	|   movea.l 18080 <nowStatus>,a0
    46de:	|   move.l (a0),d0
    46e0:	|   movea.l 4(sp),a0
    46e4:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    46e8:	|   pea 131f1 <cursors.c.412ac4f3+0x27c>
    46ee:	|   jsr b8 <copyString>
    46f4:	|   addq.l #4,sp
    46f6:	|   movea.l 4(sp),a0
    46fa:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    46fc:	|   movea.l 18080 <nowStatus>,a0
    4702:	|   move.l 4(sp),(a0)
	}
}
    4706:	\-> nop
    4708:	    movea.l (sp)+,a6
    470a:	    lea 16(sp),sp
    470e:	    rts

00004710 <clearStatusBar>:

void clearStatusBar () {
    4710:	       lea -16(sp),sp
    4714:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    4716:	       movea.l 18080 <nowStatus>,a0
    471c:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    4720:	       movea.l 18080 <nowStatus>,a0
    4726:	       moveq #-1,d0
    4728:	       move.l d0,6(a0)
	while (stat) {
    472c:	   /-- bra.s 476c <clearStatusBar+0x5c>
		kill = stat;
    472e:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    4734:	|  |   movea.l 16(sp),a0
    4738:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    473e:	|  |   movea.l 12(sp),a0
    4742:	|  |   move.l (a0),8(sp)
    4746:	|  |   move.l 19b8e <SysBase>,d0
    474c:	|  |   movea.l d0,a6
    474e:	|  |   movea.l 8(sp),a1
    4752:	|  |   jsr -690(a6)
		FreeVec(kill);
    4756:	|  |   move.l 12(sp),4(sp)
    475c:	|  |   move.l 19b8e <SysBase>,d0
    4762:	|  |   movea.l d0,a6
    4764:	|  |   movea.l 4(sp),a1
    4768:	|  |   jsr -690(a6)
	while (stat) {
    476c:	|  \-> tst.l 16(sp)
    4770:	\----- bne.s 472e <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    4772:	       movea.l 18080 <nowStatus>,a0
    4778:	       clr.l (a0)
}
    477a:	       nop
    477c:	       movea.l (sp)+,a6
    477e:	       lea 16(sp),sp
    4782:	       rts

00004784 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    4784:	clr.l 19bae <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    478a:	move.w #-1,19bb2 <mainStatus+0x4>
	mainStatus.litStatus = -1;
    4792:	moveq #-1,d0
    4794:	move.l d0,19bb4 <mainStatus+0x6>
	mainStatus.statusX = 10;
    479a:	moveq #10,d0
    479c:	move.l d0,19bb8 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    47a2:	movea.l 19a92 <winHeight>,a0
    47a8:	lea -15(a0),a0
    47ac:	move.l a0,d0
    47ae:	move.l d0,19bbc <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    47b4:	nop
    47b6:	rts

000047b8 <killLastStatus>:

void killLastStatus () {
    47b8:	    lea -12(sp),sp
    47bc:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    47be:	    movea.l 18080 <nowStatus>,a0
    47c4:	    move.l (a0),d0
    47c6:	/-- beq.s 4810 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    47c8:	|   movea.l 18080 <nowStatus>,a0
    47ce:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    47d2:	|   movea.l 18080 <nowStatus>,a0
    47d8:	|   movea.l 12(sp),a1
    47dc:	|   move.l 4(a1),d0
    47e0:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    47e2:	|   movea.l 12(sp),a0
    47e6:	|   move.l (a0),8(sp)
    47ea:	|   move.l 19b8e <SysBase>,d0
    47f0:	|   movea.l d0,a6
    47f2:	|   movea.l 8(sp),a1
    47f6:	|   jsr -690(a6)
		FreeVec(kill);
    47fa:	|   move.l 12(sp),4(sp)
    4800:	|   move.l 19b8e <SysBase>,d0
    4806:	|   movea.l d0,a6
    4808:	|   movea.l 4(sp),a1
    480c:	|   jsr -690(a6)
	}
}
    4810:	\-> nop
    4812:	    movea.l (sp)+,a6
    4814:	    lea 12(sp),sp
    4818:	    rts

0000481a <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    481a:	movea.l 18080 <nowStatus>,a0
    4820:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    4826:	movea.l 18080 <nowStatus>,a0
    482c:	move.l 8(sp),14(a0)
}
    4832:	nop
    4834:	rts

00004836 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    4836:	       lea -100(sp),sp
    483a:	       move.l a6,-(sp)
    483c:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    483e:	       movea.l 18080 <nowStatus>,a0
    4844:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    4848:	       movea.l 18080 <nowStatus>,a0
    484e:	       move.w 4(a0),d0
    4852:	       move.w d0,d0
    4854:	       andi.l #65535,d0
    485a:	       move.l 112(sp),-(sp)
    485e:	       move.l d0,-(sp)
    4860:	       jsr 8d0 <put2bytes>
    4866:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    4868:	       movea.l 18080 <nowStatus>,a0
    486e:	       move.l 6(a0),d0
    4872:	       move.l d0,d0
    4874:	       movea.w d0,a0
    4876:	       move.l 112(sp),-(sp)
    487a:	       move.l a0,-(sp)
    487c:	       jsr a9c <putSigned>
    4882:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    4884:	       movea.l 18080 <nowStatus>,a0
    488a:	       move.l 10(a0),d0
    488e:	       move.l 112(sp),-(sp)
    4892:	       move.l d0,-(sp)
    4894:	       jsr 8d0 <put2bytes>
    489a:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    489c:	       movea.l 18080 <nowStatus>,a0
    48a2:	       move.l 14(a0),d0
    48a6:	       move.l 112(sp),-(sp)
    48aa:	       move.l d0,-(sp)
    48ac:	       jsr 8d0 <put2bytes>
    48b2:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    48b4:	       move.l 112(sp),100(sp)
    48ba:	       movea.l 18080 <nowStatus>,a0
    48c0:	       move.l 18(a0),96(sp)
    48c6:	       move.l 19b96 <DOSBase>,d0
    48cc:	       movea.l d0,a6
    48ce:	       move.l 100(sp),d1
    48d2:	       move.l 96(sp),d2
    48d6:	       jsr -312(a6)
    48da:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    48de:	       move.l 112(sp),88(sp)
    48e4:	       movea.l 18080 <nowStatus>,a0
    48ea:	       move.l 22(a0),84(sp)
    48f0:	       move.l 19b96 <DOSBase>,d0
    48f6:	       movea.l d0,a6
    48f8:	       move.l 88(sp),d1
    48fc:	       move.l 84(sp),d2
    4900:	       jsr -312(a6)
    4904:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    4908:	       move.l 112(sp),76(sp)
    490e:	       movea.l 18080 <nowStatus>,a0
    4914:	       move.l 26(a0),72(sp)
    491a:	       move.l 19b96 <DOSBase>,d0
    4920:	       movea.l d0,a6
    4922:	       move.l 76(sp),d1
    4926:	       move.l 72(sp),d2
    492a:	       jsr -312(a6)
    492e:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    4932:	       move.l 112(sp),64(sp)
    4938:	       movea.l 18080 <nowStatus>,a0
    493e:	       move.l 30(a0),60(sp)
    4944:	       move.l 19b96 <DOSBase>,d0
    494a:	       movea.l d0,a6
    494c:	       move.l 64(sp),d1
    4950:	       move.l 60(sp),d2
    4954:	       jsr -312(a6)
    4958:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    495c:	       move.l 112(sp),52(sp)
    4962:	       movea.l 18080 <nowStatus>,a0
    4968:	       move.l 34(a0),48(sp)
    496e:	       move.l 19b96 <DOSBase>,d0
    4974:	       movea.l d0,a6
    4976:	       move.l 52(sp),d1
    497a:	       move.l 48(sp),d2
    497e:	       jsr -312(a6)
    4982:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    4986:	       move.l 112(sp),40(sp)
    498c:	       movea.l 18080 <nowStatus>,a0
    4992:	       move.l 38(a0),36(sp)
    4998:	       move.l 19b96 <DOSBase>,d0
    499e:	       movea.l d0,a6
    49a0:	       move.l 40(sp),d1
    49a4:	       move.l 36(sp),d2
    49a8:	       jsr -312(a6)
    49ac:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    49b0:	   /-- bra.s 49f4 <saveStatusBars+0x1be>
		FPutC (fp,1);
    49b2:	/--|-> move.l 112(sp),16(sp)
    49b8:	|  |   moveq #1,d0
    49ba:	|  |   move.l d0,12(sp)
    49be:	|  |   move.l 19b96 <DOSBase>,d0
    49c4:	|  |   movea.l d0,a6
    49c6:	|  |   move.l 16(sp),d1
    49ca:	|  |   move.l 12(sp),d2
    49ce:	|  |   jsr -312(a6)
    49d2:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    49d6:	|  |   movea.l 104(sp),a0
    49da:	|  |   move.l (a0),d0
    49dc:	|  |   move.l 112(sp),-(sp)
    49e0:	|  |   move.l d0,-(sp)
    49e2:	|  |   jsr bd8 <writeString>
    49e8:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    49ea:	|  |   movea.l 104(sp),a0
    49ee:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    49f4:	|  \-> tst.l 104(sp)
    49f8:	\----- bne.s 49b2 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    49fa:	       move.l 112(sp),28(sp)
    4a00:	       clr.l 24(sp)
    4a04:	       move.l 19b96 <DOSBase>,d0
    4a0a:	       movea.l d0,a6
    4a0c:	       move.l 28(sp),d1
    4a10:	       move.l 24(sp),d2
    4a14:	       jsr -312(a6)
    4a18:	       move.l d0,20(sp)
}
    4a1c:	       nop
    4a1e:	       move.l (sp)+,d2
    4a20:	       movea.l (sp)+,a6
    4a22:	       lea 100(sp),sp
    4a26:	       rts

00004a28 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    4a28:	movea.l 18080 <nowStatus>,a0
    4a2e:	move.l 4(sp),6(a0)
}
    4a34:	nop
    4a36:	rts

00004a38 <setStatusBar>:

void setStatusBar (char * txt) {
    4a38:	    subq.l #4,sp
    4a3a:	    move.l a6,-(sp)
    4a3c:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    4a3e:	    movea.l 18080 <nowStatus>,a0
    4a44:	    move.l (a0),d0
    4a46:	/-- beq.s 4a7a <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    4a48:	|   movea.l 18080 <nowStatus>,a0
    4a4e:	|   movea.l (a0),a0
    4a50:	|   move.l (a0),8(sp)
    4a54:	|   move.l 19b8e <SysBase>,d0
    4a5a:	|   movea.l d0,a6
    4a5c:	|   movea.l 8(sp),a1
    4a60:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    4a64:	|   movea.l 18080 <nowStatus>,a0
    4a6a:	|   movea.l (a0),a2
    4a6c:	|   move.l 16(sp),-(sp)
    4a70:	|   jsr b8 <copyString>
    4a76:	|   addq.l #4,sp
    4a78:	|   move.l d0,(a2)
	}
}
    4a7a:	\-> nop
    4a7c:	    movea.l (sp)+,a2
    4a7e:	    movea.l (sp)+,a6
    4a80:	    addq.l #4,sp
    4a82:	    rts

00004a84 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    4a84:	       movea.l 18080 <nowStatus>,a0
    4a8a:	       move.l (a0),d0
    4a8c:	/----- beq.s 4a9a <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    4a8e:	|      movea.l 18080 <nowStatus>,a0
    4a94:	|      movea.l (a0),a0
    4a96:	|      move.l (a0),d0
    4a98:	|  /-- bra.s 4aa0 <statusBarText+0x1c>
	} else {
		return "";
    4a9a:	\--|-> move.l #78321,d0
	}
    4aa0:	   \-> rts

00004aa2 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    4aa2:	       lea -28(sp),sp
    4aa6:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    4aaa:	       move.l 52(sp),-(sp)
    4aae:	       jsr 10aba <stringWidth>
    4ab4:	       addq.l #4,sp
    4ab6:	       asr.l #1,d0
    4ab8:	       move.l d0,-(sp)
    4aba:	       jsr 12588 <__floatsisf>
    4ac0:	       addq.l #4,sp
    4ac2:	       move.l d0,d1
    4ac4:	       move.l 18098 <cameraZoom>,d0
    4aca:	       move.l d0,-(sp)
    4acc:	       move.l d1,-(sp)
    4ace:	       jsr 12434 <__divsf3>
    4ad4:	       addq.l #8,sp
    4ad6:	       move.l d0,-(sp)
    4ad8:	       jsr 12520 <__fixsfsi>
    4ade:	       addq.l #4,sp
    4ae0:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    4ae4:	       move.l 56(sp),d0
    4ae8:	       sub.l 44(sp),d0
    4aec:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    4af0:	       move.l 56(sp),d0
    4af4:	       add.l 44(sp),d0
    4af8:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    4afc:	       moveq #12,d0
    4afe:	       move.l d0,32(sp)
    4b02:	       clr.l 28(sp)
    4b06:	       move.l 19b8e <SysBase>,d0
    4b0c:	       movea.l d0,a6
    4b0e:	       move.l 32(sp),d0
    4b12:	       move.l 28(sp),d1
    4b16:	       jsr -684(a6)
    4b1a:	       move.l d0,24(sp)
    4b1e:	       move.l 24(sp),d0
    4b22:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    4b26:	       movea.l 19bd8 <speech>,a0
    4b2c:	       move.l 4(a0),d0
    4b30:	       movea.l 20(sp),a0
    4b34:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    4b38:	       move.l 52(sp),-(sp)
    4b3c:	       jsr b8 <copyString>
    4b42:	       addq.l #4,sp
    4b44:	       movea.l 20(sp),a0
    4b48:	       move.l d0,(a0)
	newLine -> x = xx1;
    4b4a:	       movea.l 20(sp),a0
    4b4e:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    4b54:	       movea.l 19bd8 <speech>,a0
    4b5a:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    4b60:	       moveq #4,d0
    4b62:	       cmp.l 40(sp),d0
    4b66:	   /-- blt.s 4b88 <addSpeechLine+0xe6>
    4b68:	   |   movea.l 60(sp),a0
    4b6c:	   |   move.l (a0),d1
    4b6e:	   |   moveq #5,d0
    4b70:	   |   sub.l 40(sp),d0
    4b74:	   |   cmp.l d1,d0
    4b76:	   +-- ble.s 4b88 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    4b78:	   |   moveq #5,d0
    4b7a:	   |   sub.l 40(sp),d0
    4b7e:	   |   movea.l 60(sp),a0
    4b82:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    4b84:	/--|-- bra.w 4cb4 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    4b88:	|  \-> move.l 36(sp),-(sp)
    4b8c:	|      jsr 12588 <__floatsisf>
    4b92:	|      addq.l #4,sp
    4b94:	|      move.l d0,d2
    4b96:	|      move.l 19a8e <winWidth>,d0
    4b9c:	|      move.l d0,-(sp)
    4b9e:	|      jsr 125b0 <__floatunsisf>
    4ba4:	|      addq.l #4,sp
    4ba6:	|      move.l d0,d1
    4ba8:	|      move.l 18098 <cameraZoom>,d0
    4bae:	|      move.l d0,-(sp)
    4bb0:	|      move.l d1,-(sp)
    4bb2:	|      jsr 12434 <__divsf3>
    4bb8:	|      addq.l #8,sp
    4bba:	|      move.l #1084227584,-(sp)
    4bc0:	|      move.l d0,-(sp)
    4bc2:	|      jsr 1287c <__subsf3>
    4bc8:	|      addq.l #8,sp
    4bca:	|      move.l d0,-(sp)
    4bcc:	|      move.l d2,-(sp)
    4bce:	|      jsr 12670 <__gesf2>
    4bd4:	|      addq.l #8,sp
    4bd6:	|      tst.l d0
    4bd8:	|  /-- bge.s 4bde <addSpeechLine+0x13c>
}
    4bda:	+--|-- bra.w 4cb4 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    4bde:	|  \-> movea.l 60(sp),a0
    4be2:	|      move.l (a0),d0
    4be4:	|      move.l d0,-(sp)
    4be6:	|      jsr 12588 <__floatsisf>
    4bec:	|      addq.l #4,sp
    4bee:	|      move.l d0,-(sp)
    4bf0:	|      jsr 124a0 <__extendsfdf2>
    4bf6:	|      addq.l #4,sp
    4bf8:	|      move.l d0,d4
    4bfa:	|      move.l d1,d5
    4bfc:	|      move.l 19a8e <winWidth>,d0
    4c02:	|      move.l d0,-(sp)
    4c04:	|      jsr 125b0 <__floatunsisf>
    4c0a:	|      addq.l #4,sp
    4c0c:	|      move.l d0,d1
    4c0e:	|      move.l 18098 <cameraZoom>,d0
    4c14:	|      move.l d0,-(sp)
    4c16:	|      move.l d1,-(sp)
    4c18:	|      jsr 12434 <__divsf3>
    4c1e:	|      addq.l #8,sp
    4c20:	|      move.l d0,-(sp)
    4c22:	|      jsr 124a0 <__extendsfdf2>
    4c28:	|      addq.l #4,sp
    4c2a:	|      clr.l -(sp)
    4c2c:	|      move.l #1075052544,-(sp)
    4c32:	|      move.l d1,-(sp)
    4c34:	|      move.l d0,-(sp)
    4c36:	|      jsr 1281a <__subdf3>
    4c3c:	|      lea 16(sp),sp
    4c40:	|      move.l d0,d2
    4c42:	|      move.l d1,d3
    4c44:	|      move.l 36(sp),-(sp)
    4c48:	|      jsr 12548 <__floatsidf>
    4c4e:	|      addq.l #4,sp
    4c50:	|      move.l d1,-(sp)
    4c52:	|      move.l d0,-(sp)
    4c54:	|      move.l d3,-(sp)
    4c56:	|      move.l d2,-(sp)
    4c58:	|      jsr 1281a <__subdf3>
    4c5e:	|      lea 16(sp),sp
    4c62:	|      move.l d1,-(sp)
    4c64:	|      move.l d0,-(sp)
    4c66:	|      move.l d5,-(sp)
    4c68:	|      move.l d4,-(sp)
    4c6a:	|      jsr 126a6 <__gtdf2>
    4c70:	|      lea 16(sp),sp
    4c74:	|      tst.l d0
    4c76:	|  /-- bgt.s 4c7a <addSpeechLine+0x1d8>
}
    4c78:	+--|-- bra.s 4cb4 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    4c7a:	|  \-> move.l 19a8e <winWidth>,d0
    4c80:	|      move.l d0,-(sp)
    4c82:	|      jsr 125b0 <__floatunsisf>
    4c88:	|      addq.l #4,sp
    4c8a:	|      move.l d0,d1
    4c8c:	|      move.l 18098 <cameraZoom>,d0
    4c92:	|      move.l d0,-(sp)
    4c94:	|      move.l d1,-(sp)
    4c96:	|      jsr 12434 <__divsf3>
    4c9c:	|      addq.l #8,sp
    4c9e:	|      move.l d0,-(sp)
    4ca0:	|      jsr 12520 <__fixsfsi>
    4ca6:	|      addq.l #4,sp
    4ca8:	|      subq.l #5,d0
    4caa:	|      sub.l 36(sp),d0
    4cae:	|      movea.l 60(sp),a0
    4cb2:	|      move.l d0,(a0)
}
    4cb4:	\----> nop
    4cb6:	       movem.l (sp)+,d2-d5/a6
    4cba:	       lea 28(sp),sp
    4cbe:	       rts

00004cc0 <initSpeech>:


void initSpeech () {
    4cc0:	       lea -12(sp),sp
    4cc4:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    4cc6:	       moveq #20,d0
    4cc8:	       move.l d0,12(sp)
    4ccc:	       clr.l 8(sp)
    4cd0:	       move.l 19b8e <SysBase>,d0
    4cd6:	       movea.l d0,a6
    4cd8:	       move.l 12(sp),d0
    4cdc:	       move.l 8(sp),d1
    4ce0:	       jsr -684(a6)
    4ce4:	       move.l d0,4(sp)
    4ce8:	       move.l 4(sp),d0
    4cec:	       move.l d0,19bd8 <speech>
	if (speech) {
    4cf2:	       move.l 19bd8 <speech>,d0
    4cf8:	/----- beq.s 4d24 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    4cfa:	|      movea.l 19bd8 <speech>,a0
    4d00:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    4d02:	|      movea.l 19bd8 <speech>,a0
    4d08:	|      clr.l 4(a0)
		speech -> speechY = 0;
    4d0c:	|      movea.l 19bd8 <speech>,a0
    4d12:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    4d16:	|      movea.l 19bd8 <speech>,a0
    4d1c:	|      moveq #-1,d0
    4d1e:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    4d22:	|  /-- bra.s 4d32 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    4d24:	\--|-> pea 1501a <incbin_player_end+0xe6>
    4d2a:	   |   jsr 12130 <KPrintF>
    4d30:	   |   addq.l #4,sp
}
    4d32:	   \-> nop
    4d34:	       movea.l (sp)+,a6
    4d36:	       lea 12(sp),sp
    4d3a:	       rts

00004d3c <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    4d3c:	       movea.l 19bd8 <speech>,a0
    4d42:	       move.l 4(a0),d0
    4d46:	/----- beq.s 4d54 <isThereAnySpeechGoingOn+0x18>
    4d48:	|      movea.l 19bd8 <speech>,a0
    4d4e:	|      move.l 16(a0),d0
    4d52:	|  /-- bra.s 4d56 <isThereAnySpeechGoingOn+0x1a>
    4d54:	\--|-> moveq #-1,d0
}
    4d56:	   \-> rts

00004d58 <killAllSpeech>:

void killAllSpeech () {
    4d58:	       lea -12(sp),sp
    4d5c:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    4d5e:	       movea.l 19bd8 <speech>,a0
    4d64:	       move.l 12(a0),d0
    4d68:	       moveq #-1,d1
    4d6a:	       cmp.l d0,d1
    4d6c:	   /-- beq.s 4d7a <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    4d6e:	   |   movea.l 19bd8 <speech>,a0
    4d74:	   |   moveq #-1,d0
    4d76:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    4d7a:	   \-> movea.l 19bd8 <speech>,a0
    4d80:	       move.l (a0),d0
    4d82:	/----- beq.w 4e0e <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    4d86:	|      movea.l 19bd8 <speech>,a0
    4d8c:	|      move.l (a0),d0
    4d8e:	|      lea -120(sp),sp
    4d92:	|      move.l sp,d1
    4d94:	|      movea.l d0,a0
    4d96:	|      moveq #120,d0
    4d98:	|      move.l d0,-(sp)
    4d9a:	|      move.l a0,-(sp)
    4d9c:	|      move.l d1,-(sp)
    4d9e:	|      jsr 120e4 <memcpy>
    4da4:	|      lea 12(sp),sp
    4da8:	|      jsr 684e <makeSilent>
    4dae:	|      lea 120(sp),sp
		speech -> currentTalker = NULL;
    4db2:	|      movea.l 19bd8 <speech>,a0
    4db8:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    4dba:	+----- bra.s 4e0e <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    4dbc:	|  /-> movea.l 19bd8 <speech>,a0
    4dc2:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    4dc8:	|  |   movea.l 19bd8 <speech>,a0
    4dce:	|  |   movea.l 4(a0),a1
    4dd2:	|  |   movea.l 19bd8 <speech>,a0
    4dd8:	|  |   move.l 4(a1),d0
    4ddc:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    4de0:	|  |   movea.l 12(sp),a0
    4de4:	|  |   move.l (a0),8(sp)
    4de8:	|  |   move.l 19b8e <SysBase>,d0
    4dee:	|  |   movea.l d0,a6
    4df0:	|  |   movea.l 8(sp),a1
    4df4:	|  |   jsr -690(a6)
		FreeVec(killMe);
    4df8:	|  |   move.l 12(sp),4(sp)
    4dfe:	|  |   move.l 19b8e <SysBase>,d0
    4e04:	|  |   movea.l d0,a6
    4e06:	|  |   movea.l 4(sp),a1
    4e0a:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    4e0e:	\--|-> movea.l 19bd8 <speech>,a0
    4e14:	   |   move.l 4(a0),d0
    4e18:	   \-- bne.s 4dbc <killAllSpeech+0x64>
	}
}
    4e1a:	       nop
    4e1c:	       nop
    4e1e:	       movea.l (sp)+,a6
    4e20:	       lea 12(sp),sp
    4e24:	       rts

00004e26 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    4e26:	pea 2 <_start+0x2>
    4e2a:	move.l 8(sp),-(sp)
    4e2e:	jsr 4f86 <setFrames>
    4e34:	addq.l #8,sp
}
    4e36:	nop
    4e38:	rts

00004e3a <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    4e3a:	       lea -52(sp),sp
    4e3e:	       move.l a6,-(sp)
    4e40:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    4e42:	       movea.l 64(sp),a0
    4e46:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    4e4c:	       move.l 18084 <speechSpeed>,d0
    4e52:	       move.l 68(sp),-(sp)
    4e56:	       move.l d0,-(sp)
    4e58:	       jsr a46 <putFloat>
    4e5e:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    4e60:	       movea.l 64(sp),a0
    4e64:	       move.l 8(a0),d0
    4e68:	       move.l 68(sp),-(sp)
    4e6c:	       move.l d0,-(sp)
    4e6e:	       jsr 8d0 <put2bytes>
    4e74:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    4e76:	       movea.l 64(sp),a0
    4e7a:	       move.l 16(a0),d0
    4e7e:	       move.l 68(sp),-(sp)
    4e82:	       move.l d0,-(sp)
    4e84:	       jsr 8d0 <put2bytes>
    4e8a:	       addq.l #8,sp
		if (sS -> currentTalker) {
    4e8c:	       movea.l 64(sp),a0
    4e90:	       move.l (a0),d0
    4e92:	   /-- beq.s 4ed6 <saveSpeech+0x9c>
			FPutC (fp, 1);
    4e94:	   |   move.l 68(sp),40(sp)
    4e9a:	   |   moveq #1,d0
    4e9c:	   |   move.l d0,36(sp)
    4ea0:	   |   move.l 19b96 <DOSBase>,d0
    4ea6:	   |   movea.l d0,a6
    4ea8:	   |   move.l 40(sp),d1
    4eac:	   |   move.l 36(sp),d2
    4eb0:	   |   jsr -312(a6)
    4eb4:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    4eb8:	   |   movea.l 64(sp),a0
    4ebc:	   |   movea.l (a0),a0
    4ebe:	   |   movea.l 102(a0),a0
    4ec2:	   |   move.l 4(a0),d0
    4ec6:	   |   move.l 68(sp),-(sp)
    4eca:	   |   move.l d0,-(sp)
    4ecc:	   |   jsr 8d0 <put2bytes>
    4ed2:	   |   addq.l #8,sp
    4ed4:	/--|-- bra.s 4f52 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    4ed6:	|  \-> move.l 68(sp),52(sp)
    4edc:	|      clr.l 48(sp)
    4ee0:	|      move.l 19b96 <DOSBase>,d0
    4ee6:	|      movea.l d0,a6
    4ee8:	|      move.l 52(sp),d1
    4eec:	|      move.l 48(sp),d2
    4ef0:	|      jsr -312(a6)
    4ef4:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    4ef8:	+----- bra.s 4f52 <saveSpeech+0x118>
			FPutC (fp, 1);
    4efa:	|  /-> move.l 68(sp),16(sp)
    4f00:	|  |   moveq #1,d0
    4f02:	|  |   move.l d0,12(sp)
    4f06:	|  |   move.l 19b96 <DOSBase>,d0
    4f0c:	|  |   movea.l d0,a6
    4f0e:	|  |   move.l 16(sp),d1
    4f12:	|  |   move.l 12(sp),d2
    4f16:	|  |   jsr -312(a6)
    4f1a:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    4f1e:	|  |   movea.l 56(sp),a0
    4f22:	|  |   move.l (a0),d0
    4f24:	|  |   move.l 68(sp),-(sp)
    4f28:	|  |   move.l d0,-(sp)
    4f2a:	|  |   jsr bd8 <writeString>
    4f30:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    4f32:	|  |   movea.l 56(sp),a0
    4f36:	|  |   move.l 8(a0),d0
    4f3a:	|  |   move.l 68(sp),-(sp)
    4f3e:	|  |   move.l d0,-(sp)
    4f40:	|  |   jsr 8d0 <put2bytes>
    4f46:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    4f48:	|  |   movea.l 56(sp),a0
    4f4c:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    4f52:	\--|-> tst.l 56(sp)
    4f56:	   \-- bne.s 4efa <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    4f58:	       move.l 68(sp),28(sp)
    4f5e:	       clr.l 24(sp)
    4f62:	       move.l 19b96 <DOSBase>,d0
    4f68:	       movea.l d0,a6
    4f6a:	       move.l 28(sp),d1
    4f6e:	       move.l 24(sp),d2
    4f72:	       jsr -312(a6)
    4f76:	       move.l d0,20(sp)
}
    4f7a:	       nop
    4f7c:	       move.l (sp)+,d2
    4f7e:	       movea.l (sp)+,a6
    4f80:	       lea 52(sp),sp
    4f84:	       rts

00004f86 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    4f86:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    4f88:	movea.l 8(sp),a0
    4f8c:	movea.l 68(a0),a0
    4f90:	move.l (a0),d2
    4f92:	movea.l 8(sp),a0
    4f96:	movea.l 68(a0),a0
    4f9a:	move.l 4(a0),d0
    4f9e:	move.l 12(sp),-(sp)
    4fa2:	move.l d0,-(sp)
    4fa4:	jsr 12ae2 <__mulsi3>
    4faa:	addq.l #8,sp
    4fac:	move.l d0,d1
    4fae:	movea.l 8(sp),a0
    4fb2:	move.l 94(a0),d0
    4fb6:	add.l d1,d0
    4fb8:	add.l d0,d0
    4fba:	add.l d0,d0
    4fbc:	movea.l d2,a0
    4fbe:	adda.l d0,a0
    4fc0:	move.l (a0),d0
    4fc2:	movea.l 8(sp),a0
    4fc6:	move.l d0,60(a0)
}
    4fca:	nop
    4fcc:	move.l (sp)+,d2
    4fce:	rts

00004fd0 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    4fd0:	       lea -20(sp),sp
    4fd4:	       move.l d2,-(sp)
    4fd6:	       move.l 40(sp),d0
    4fda:	       move.w d0,d0
    4fdc:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    4fe0:	       movea.l 19bd8 <speech>,a0
    4fe6:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    4fec:	       move.l 32(sp),-(sp)
    4ff0:	       jsr 6338 <findPerson>
    4ff6:	       addq.l #4,sp
    4ff8:	       move.l d0,16(sp)
    if (thisPerson) {
    4ffc:	   /-- beq.s 5022 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    4ffe:	   |   movea.w 6(sp),a0
    5002:	   |   move.l a0,-(sp)
    5004:	   |   move.l 40(sp),-(sp)
    5008:	   |   move.l 24(sp),-(sp)
    500c:	   |   move.l 40(sp),-(sp)
    5010:	   |   jsr 50e8 <wrapSpeechPerson>
    5016:	   |   lea 16(sp),sp
    501a:	   |   move.l d0,20(sp)
    501e:	/--|-- bra.w 50dc <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    5022:	|  \-> move.l 32(sp),-(sp)
    5026:	|      jsr 10ba6 <getRegionForObject>
    502c:	|      addq.l #4,sp
    502e:	|      move.l d0,12(sp)
        if (thisRegion) {
    5032:	|  /-- beq.s 509e <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    5034:	|  |   movea.l 12(sp),a0
    5038:	|  |   movea.l 28(a0),a0
    503c:	|  |   move.l 28(a0),d0
    5040:	|  |   movea.l 12(sp),a0
    5044:	|  |   movea.l 4(a0),a1
    5048:	|  |   movea.l 12(sp),a0
    504c:	|  |   movea.l 28(a0),a0
    5050:	|  |   move.l 20(a0),d1
    5054:	|  |   movea.l a1,a0
    5056:	|  |   suba.l d1,a0
    5058:	|  |   move.l 19c36 <cameraY>,d1
    505e:	|  |   movea.l a0,a1
    5060:	|  |   suba.l d1,a1
    5062:	|  |   movea.l 12(sp),a0
    5066:	|  |   move.l (a0),d2
    5068:	|  |   movea.l 12(sp),a0
    506c:	|  |   move.l 8(a0),d1
    5070:	|  |   add.l d2,d1
    5072:	|  |   move.l d1,d2
    5074:	|  |   asr.l #1,d2
    5076:	|  |   move.l 19c32 <cameraX>,d1
    507c:	|  |   movea.l d2,a0
    507e:	|  |   suba.l d1,a0
    5080:	|  |   move.l 36(sp),-(sp)
    5084:	|  |   move.l d0,-(sp)
    5086:	|  |   move.l a1,-(sp)
    5088:	|  |   move.l a0,-(sp)
    508a:	|  |   move.l 44(sp),-(sp)
    508e:	|  |   jsr 5206 <wrapSpeechXY>
    5094:	|  |   lea 20(sp),sp
    5098:	|  |   move.l d0,20(sp)
    509c:	+--|-- bra.s 50dc <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    509e:	|  \-> move.l 32(sp),-(sp)
    50a2:	|      jsr 8f2e <findObjectType>
    50a8:	|      addq.l #4,sp
    50aa:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    50ae:	|      movea.l 8(sp),a0
    50b2:	|      move.l 28(a0),d1
    50b6:	|      move.l 19a8e <winWidth>,d0
    50bc:	|      lsr.l #1,d0
    50be:	|      move.l 36(sp),-(sp)
    50c2:	|      move.l d1,-(sp)
    50c4:	|      pea a <_start+0xa>
    50c8:	|      move.l d0,-(sp)
    50ca:	|      move.l 44(sp),-(sp)
    50ce:	|      jsr 5206 <wrapSpeechXY>
    50d4:	|      lea 20(sp),sp
    50d8:	|      move.l d0,20(sp)
        }
    }
    return i;
    50dc:	\----> move.l 20(sp),d0
}
    50e0:	       move.l (sp)+,d2
    50e2:	       lea 20(sp),sp
    50e6:	       rts

000050e8 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    50e8:	    subq.l #8,sp
    50ea:	    movem.l d2-d4,-(sp)
    50ee:	    move.l 36(sp),d0
    50f2:	    move.w d0,d0
    50f4:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    50f8:	    movea.l 28(sp),a0
    50fc:	    movea.l 102(a0),a0
    5100:	    move.l 28(a0),d2
    5104:	    movea.l 28(sp),a0
    5108:	    move.l 4(a0),d3
    510c:	    move.l 19c36 <cameraY>,d0
    5112:	    move.l d0,-(sp)
    5114:	    jsr 12588 <__floatsisf>
    511a:	    addq.l #4,sp
    511c:	    move.l d0,-(sp)
    511e:	    move.l d3,-(sp)
    5120:	    jsr 1287c <__subsf3>
    5126:	    addq.l #8,sp
    5128:	    move.l d0,d3
    512a:	    movea.l 28(sp),a0
    512e:	    move.l 20(a0),d4
    5132:	    movea.l 28(sp),a0
    5136:	    move.l 8(a0),d1
    513a:	    movea.l 28(sp),a0
    513e:	    move.l 12(a0),d0
    5142:	    sub.l d0,d1
    5144:	    move.l d1,-(sp)
    5146:	    jsr 12588 <__floatsisf>
    514c:	    addq.l #4,sp
    514e:	    move.l d0,-(sp)
    5150:	    move.l d4,-(sp)
    5152:	    jsr 1263a <__mulsf3>
    5158:	    addq.l #8,sp
    515a:	    move.l d0,-(sp)
    515c:	    move.l d3,-(sp)
    515e:	    jsr 1287c <__subsf3>
    5164:	    addq.l #8,sp
    5166:	    move.l d0,d3
    5168:	    movea.l 28(sp),a0
    516c:	    movea.l 102(a0),a0
    5170:	    move.l 20(a0),d0
    5174:	    move.l d0,-(sp)
    5176:	    jsr 12588 <__floatsisf>
    517c:	    addq.l #4,sp
    517e:	    move.l d0,-(sp)
    5180:	    move.l d3,-(sp)
    5182:	    jsr 1287c <__subsf3>
    5188:	    addq.l #8,sp
    518a:	    move.l d0,-(sp)
    518c:	    jsr 12520 <__fixsfsi>
    5192:	    addq.l #4,sp
    5194:	    move.l d0,d4
    5196:	    movea.l 28(sp),a0
    519a:	    move.l (a0),d3
    519c:	    move.l 19c32 <cameraX>,d0
    51a2:	    move.l d0,-(sp)
    51a4:	    jsr 12588 <__floatsisf>
    51aa:	    addq.l #4,sp
    51ac:	    move.l d0,-(sp)
    51ae:	    move.l d3,-(sp)
    51b0:	    jsr 1287c <__subsf3>
    51b6:	    addq.l #8,sp
    51b8:	    move.l d0,-(sp)
    51ba:	    jsr 12520 <__fixsfsi>
    51c0:	    addq.l #4,sp
    51c2:	    move.l 32(sp),-(sp)
    51c6:	    move.l d2,-(sp)
    51c8:	    move.l d4,-(sp)
    51ca:	    move.l d0,-(sp)
    51cc:	    move.l 40(sp),-(sp)
    51d0:	    jsr 5206 <wrapSpeechXY>
    51d6:	    lea 20(sp),sp
    51da:	    move.l d0,16(sp)
	if (animPerson) {
    51de:	    tst.w 14(sp)
    51e2:	/-- beq.s 51fa <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    51e4:	|   move.l 28(sp),-(sp)
    51e8:	|   jsr 4e26 <makeTalker>
    51ee:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    51f0:	|   movea.l 19bd8 <speech>,a0
    51f6:	|   move.l 28(sp),(a0)
	}
	return i;
    51fa:	\-> move.l 16(sp),d0
}
    51fe:	    movem.l (sp)+,d2-d4
    5202:	    addq.l #8,sp
    5204:	    rts

00005206 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    5206:	                   lea -16(sp),sp
    520a:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    520e:	                   clr.l 16(sp)
    killAllSpeech();
    5212:	                   jsr 4d58 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    5218:	                   move.l 36(sp),-(sp)
    521c:	                   jsr f5c8 <strlen>
    5222:	                   addq.l #4,sp
    5224:	                   movea.l d0,a0
    5226:	                   lea 20(a0),a0
    522a:	                   move.l a0,-(sp)
    522c:	                   jsr 125b0 <__floatunsisf>
    5232:	                   addq.l #4,sp
    5234:	                   move.l d0,d1
    5236:	                   move.l 18084 <speechSpeed>,d0
    523c:	                   move.l d0,-(sp)
    523e:	                   move.l d1,-(sp)
    5240:	                   jsr 1263a <__mulsf3>
    5246:	                   addq.l #8,sp
    5248:	                   move.l d0,-(sp)
    524a:	                   jsr 12520 <__fixsfsi>
    5250:	                   addq.l #4,sp
    5252:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    5256:	               /-- bgt.s 525e <wrapSpeechXY+0x58>
    5258:	               |   moveq #1,d0
    525a:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    525e:	               \-> moveq #-1,d1
    5260:	                   cmp.l 52(sp),d1
    5264:	               /-- beq.s 52a4 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    5266:	               |   move.l 19c46 <speechMode>,d0
    526c:	               +-- ble.s 52a4 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    526e:	               |   clr.l -(sp)
    5270:	               |   move.l 56(sp),-(sp)
    5274:	               |   jsr 8c6a <startSound>
    527a:	               |   addq.l #8,sp
    527c:	               |   tst.w d0
    527e:	               +-- beq.s 52a4 <wrapSpeechXY+0x9e>
                speechTime = -10;
    5280:	               |   moveq #-10,d0
    5282:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    5286:	               |   movea.l 19bd8 <speech>,a0
    528c:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    5292:	               |   move.l 19c46 <speechMode>,d0
    5298:	               |   moveq #2,d1
    529a:	               |   cmp.l d0,d1
    529c:	               +-- bne.s 52a4 <wrapSpeechXY+0x9e>
    529e:	               |   moveq #-10,d0
    52a0:	/--------------|-- bra.w 552a <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    52a4:	|              \-> movea.l 19bd8 <speech>,a0
    52aa:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    52b0:	|     /----------- bra.w 5364 <wrapSpeechXY+0x15e>
        a = wrap;
    52b4:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    52ba:	|  |  |        /-- bra.s 52ca <wrapSpeechXY+0xc4>
            a--;
    52bc:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    52c0:	|  |  |  |     +-- bne.s 52ca <wrapSpeechXY+0xc4>
                a = wrap;
    52c2:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    52c8:	|  |  |  |  /--|-- bra.s 52dc <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    52ca:	|  |  |  |  |  \-> move.l 28(sp),d0
    52ce:	|  |  |  |  |      movea.l 36(sp),a0
    52d2:	|  |  |  |  |      adda.l d0,a0
    52d4:	|  |  |  |  |      move.b (a0),d0
    52d6:	|  |  |  |  |      cmpi.b #32,d0
    52da:	|  |  |  \--|----- bne.s 52bc <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    52dc:	|  |  |     \----> move.l 28(sp),d0
    52e0:	|  |  |            movea.l 36(sp),a0
    52e4:	|  |  |            adda.l d0,a0
    52e6:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    52e8:	|  |  |            lea 16(sp),a0
    52ec:	|  |  |            move.l a0,-(sp)
    52ee:	|  |  |            move.l 44(sp),-(sp)
    52f2:	|  |  |            move.l 44(sp),-(sp)
    52f6:	|  |  |            jsr 4aa2 <addSpeechLine>
    52fc:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    5300:	|  |  |            move.l 28(sp),d0
    5304:	|  |  |            movea.l 36(sp),a0
    5308:	|  |  |            adda.l d0,a0
    530a:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    530e:	|  |  |            move.l 28(sp),d0
    5312:	|  |  |            addq.l #1,d0
    5314:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    5318:	|  |  |            move.l 44(sp),-(sp)
    531c:	|  |  |            jsr 12588 <__floatsisf>
    5322:	|  |  |            addq.l #4,sp
    5324:	|  |  |            move.l d0,d2
    5326:	|  |  |            move.l 19c6c <fontHeight>,d0
    532c:	|  |  |            move.l d0,-(sp)
    532e:	|  |  |            jsr 12588 <__floatsisf>
    5334:	|  |  |            addq.l #4,sp
    5336:	|  |  |            move.l d0,d1
    5338:	|  |  |            move.l 18098 <cameraZoom>,d0
    533e:	|  |  |            move.l d0,-(sp)
    5340:	|  |  |            move.l d1,-(sp)
    5342:	|  |  |            jsr 12434 <__divsf3>
    5348:	|  |  |            addq.l #8,sp
    534a:	|  |  |            move.l d0,-(sp)
    534c:	|  |  |            move.l d2,-(sp)
    534e:	|  |  |            jsr 1287c <__subsf3>
    5354:	|  |  |            addq.l #8,sp
    5356:	|  |  |            move.l d0,-(sp)
    5358:	|  |  |            jsr 12520 <__fixsfsi>
    535e:	|  |  |            addq.l #4,sp
    5360:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    5364:	|  |  \----------> move.l 36(sp),-(sp)
    5368:	|  |               jsr f5c8 <strlen>
    536e:	|  |               addq.l #4,sp
    5370:	|  |               move.l d0,d1
    5372:	|  |               move.l 48(sp),d0
    5376:	|  |               cmp.l d1,d0
    5378:	|  \-------------- bcs.w 52b4 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    537c:	|                  lea 16(sp),a0
    5380:	|                  move.l a0,-(sp)
    5382:	|                  move.l 44(sp),-(sp)
    5386:	|                  move.l 44(sp),-(sp)
    538a:	|                  jsr 4aa2 <addSpeechLine>
    5390:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    5394:	|                  move.l 44(sp),-(sp)
    5398:	|                  jsr 12588 <__floatsisf>
    539e:	|                  addq.l #4,sp
    53a0:	|                  move.l d0,d2
    53a2:	|                  move.l 19c6c <fontHeight>,d0
    53a8:	|                  move.l d0,-(sp)
    53aa:	|                  jsr 12588 <__floatsisf>
    53b0:	|                  addq.l #4,sp
    53b2:	|                  move.l d0,d1
    53b4:	|                  move.l 18098 <cameraZoom>,d0
    53ba:	|                  move.l d0,-(sp)
    53bc:	|                  move.l d1,-(sp)
    53be:	|                  jsr 12434 <__divsf3>
    53c4:	|                  addq.l #8,sp
    53c6:	|                  move.l d0,-(sp)
    53c8:	|                  move.l d2,-(sp)
    53ca:	|                  jsr 1287c <__subsf3>
    53d0:	|                  addq.l #8,sp
    53d2:	|                  move.l d0,-(sp)
    53d4:	|                  jsr 12520 <__fixsfsi>
    53da:	|                  addq.l #4,sp
    53dc:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    53e0:	|              /-- bpl.s 53fe <wrapSpeechXY+0x1f8>
    53e2:	|              |   movea.l 19bd8 <speech>,a0
    53e8:	|              |   move.l 8(a0),d0
    53ec:	|              |   movea.l 19bd8 <speech>,a0
    53f2:	|              |   sub.l 44(sp),d0
    53f6:	|              |   move.l d0,8(a0)
    53fa:	|           /--|-- bra.w 54ec <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    53fe:	|           |  \-> movea.l 19bd8 <speech>,a0
    5404:	|           |      move.l 8(a0),d0
    5408:	|           |      move.l d0,-(sp)
    540a:	|           |      jsr 12588 <__floatsisf>
    5410:	|           |      addq.l #4,sp
    5412:	|           |      move.l d0,d2
    5414:	|           |      move.l 19c36 <cameraY>,d0
    541a:	|           |      move.l d0,-(sp)
    541c:	|           |      jsr 12588 <__floatsisf>
    5422:	|           |      addq.l #4,sp
    5424:	|           |      move.l d0,d3
    5426:	|           |      move.l 19a92 <winHeight>,d4
    542c:	|           |      move.l 19c6c <fontHeight>,d0
    5432:	|           |      pea 3 <_start+0x3>
    5436:	|           |      move.l d0,-(sp)
    5438:	|           |      jsr 12b60 <__divsi3>
    543e:	|           |      addq.l #8,sp
    5440:	|           |      move.l d4,d1
    5442:	|           |      sub.l d0,d1
    5444:	|           |      move.l d1,-(sp)
    5446:	|           |      jsr 125b0 <__floatunsisf>
    544c:	|           |      addq.l #4,sp
    544e:	|           |      move.l d0,d1
    5450:	|           |      move.l 18098 <cameraZoom>,d0
    5456:	|           |      move.l d0,-(sp)
    5458:	|           |      move.l d1,-(sp)
    545a:	|           |      jsr 12434 <__divsf3>
    5460:	|           |      addq.l #8,sp
    5462:	|           |      move.l d0,-(sp)
    5464:	|           |      move.l d3,-(sp)
    5466:	|           |      jsr 1233a <__addsf3>
    546c:	|           |      addq.l #8,sp
    546e:	|           |      move.l d0,-(sp)
    5470:	|           |      move.l d2,-(sp)
    5472:	|           |      jsr 126f4 <__gtsf2>
    5478:	|           |      addq.l #8,sp
    547a:	|           |      tst.l d0
    547c:	|           +----- ble.s 54ec <wrapSpeechXY+0x2e6>
    547e:	|           |      move.l 19c36 <cameraY>,d0
    5484:	|           |      move.l d0,-(sp)
    5486:	|           |      jsr 12588 <__floatsisf>
    548c:	|           |      addq.l #4,sp
    548e:	|           |      move.l d0,d2
    5490:	|           |      move.l 19a92 <winHeight>,d3
    5496:	|           |      move.l 19c6c <fontHeight>,d0
    549c:	|           |      pea 3 <_start+0x3>
    54a0:	|           |      move.l d0,-(sp)
    54a2:	|           |      jsr 12b60 <__divsi3>
    54a8:	|           |      addq.l #8,sp
    54aa:	|           |      move.l d3,d1
    54ac:	|           |      sub.l d0,d1
    54ae:	|           |      move.l d1,-(sp)
    54b0:	|           |      jsr 125b0 <__floatunsisf>
    54b6:	|           |      addq.l #4,sp
    54b8:	|           |      move.l d0,d1
    54ba:	|           |      move.l 18098 <cameraZoom>,d0
    54c0:	|           |      move.l d0,-(sp)
    54c2:	|           |      move.l d1,-(sp)
    54c4:	|           |      jsr 12434 <__divsf3>
    54ca:	|           |      addq.l #8,sp
    54cc:	|           |      move.l d0,-(sp)
    54ce:	|           |      move.l d2,-(sp)
    54d0:	|           |      jsr 1233a <__addsf3>
    54d6:	|           |      addq.l #8,sp
    54d8:	|           |      movea.l 19bd8 <speech>,a2
    54de:	|           |      move.l d0,-(sp)
    54e0:	|           |      jsr 12520 <__fixsfsi>
    54e6:	|           |      addq.l #4,sp
    54e8:	|           |      move.l d0,8(a2)

    if (offset) {
    54ec:	|           \----> move.l 16(sp),d0
    54f0:	|        /-------- beq.s 5526 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    54f2:	|        |         movea.l 19bd8 <speech>,a0
    54f8:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    54fe:	|        |     /-- bra.s 5520 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    5500:	|        |  /--|-> movea.l 20(sp),a0
    5504:	|        |  |  |   move.l 8(a0),d1
    5508:	|        |  |  |   move.l 16(sp),d0
    550c:	|        |  |  |   add.l d1,d0
    550e:	|        |  |  |   movea.l 20(sp),a0
    5512:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    5516:	|        |  |  |   movea.l 20(sp),a0
    551a:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    5520:	|        |  |  \-> tst.l 20(sp)
    5524:	|        |  \----- bne.s 5500 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    5526:	|        \-------> move.l 24(sp),d0
}
    552a:	\----------------> movem.l (sp)+,d2-d4/a2
    552e:	                   lea 16(sp),sp
    5532:	                   rts

00005534 <loadSpriteBank>:
#include <exec/types.h>

#include "sprites.h"
#include "support/gcc8_c_support.h"

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere, BOOL isFont) {
    5534:	subq.l #4,sp
    5536:	move.l 16(sp),d0
    553a:	move.w d0,d0
    553c:	move.w d0,2(sp)
    KPrintF("loadSpriteBank: Not implemented"); //Amiga Todo
    5540:	pea 15057 <incbin_player_end+0x123>
    5546:	jsr 12130 <KPrintF>
    554c:	addq.l #4,sp
    return TRUE;
    554e:	moveq #1,d0
}    
    5550:	addq.l #4,sp
    5552:	rts

00005554 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    5554:	    move.l 4(sp),d0
    5558:	/-- bpl.s 555c <TF_abs+0x8>
    555a:	|   neg.l d0
}
    555c:	\-> rts

0000555e <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    555e:	             lea -28(sp),sp
    5562:	             move.l a6,-(sp)
    5564:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    5566:	             moveq #120,d0
    5568:	             move.l d0,28(sp)
    556c:	             clr.l 24(sp)
    5570:	             move.l 19b8e <SysBase>,d0
    5576:	             movea.l d0,a6
    5578:	             move.l 28(sp),d0
    557c:	             move.l 24(sp),d1
    5580:	             jsr -684(a6)
    5584:	             move.l d0,20(sp)
    5588:	             move.l 20(sp),d0
    558c:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    5590:	         /-- bne.s 5598 <addPerson+0x3a>
    5592:	         |   clr.w d0
    5594:	/--------|-- bra.w 57c6 <addPerson+0x268>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    5598:	|        \-> move.l 48(sp),-(sp)
    559c:	|            jsr 901e <loadObjectType>
    55a2:	|            addq.l #4,sp
    55a4:	|            movea.l 16(sp),a0
    55a8:	|            move.l d0,102(a0)
    newPerson->scale = 1;
    55ac:	|            movea.l 16(sp),a0
    55b0:	|            move.l #1065353216,20(a0)
    newPerson->extra = 0;
    55b8:	|            movea.l 16(sp),a0
    55bc:	|            clr.l 106(a0)
    newPerson->continueAfterWalking = NULL;
    55c0:	|            movea.l 16(sp),a0
    55c4:	|            clr.l 56(a0)
    moveAndScale(newPerson, x, y);
    55c8:	|            move.l 44(sp),-(sp)
    55cc:	|            jsr 12588 <__floatsisf>
    55d2:	|            addq.l #4,sp
    55d4:	|            move.l d0,d2
    55d6:	|            move.l 40(sp),-(sp)
    55da:	|            jsr 12588 <__floatsisf>
    55e0:	|            addq.l #4,sp
    55e2:	|            move.l d2,-(sp)
    55e4:	|            move.l d0,-(sp)
    55e6:	|            move.l 24(sp),-(sp)
    55ea:	|            jsr 6a80 <moveAndScale>
    55f0:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    55f4:	|            movea.l 16(sp),a0
    55f8:	|            clr.l 72(a0)
    newPerson->walkToX = x;
    55fc:	|            movea.l 16(sp),a0
    5600:	|            move.l 40(sp),28(a0)
    newPerson->walkToY = y;
    5606:	|            movea.l 16(sp),a0
    560a:	|            move.l 44(sp),32(a0)
    newPerson->walking = FALSE;
    5610:	|            movea.l 16(sp),a0
    5614:	|            clr.w 52(a0)
    newPerson->spinning = FALSE;
    5618:	|            movea.l 16(sp),a0
    561c:	|            clr.w 54(a0)
    newPerson->show = TRUE;
    5620:	|            movea.l 16(sp),a0
    5624:	|            move.w #1,92(a0)
    newPerson->direction = 0;
    562a:	|            movea.l 16(sp),a0
    562e:	|            clr.l 94(a0)
    newPerson->angle = 180;
    5632:	|            movea.l 16(sp),a0
    5636:	|            move.l #180,80(a0)
    newPerson->wantAngle = 180;
    563e:	|            movea.l 16(sp),a0
    5642:	|            move.l #180,84(a0)
    newPerson->angleOffset = 0;
    564a:	|            movea.l 16(sp),a0
    564e:	|            clr.l 88(a0)
    newPerson->floaty = 0;
    5652:	|            movea.l 16(sp),a0
    5656:	|            clr.l 12(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    565a:	|            movea.l 16(sp),a0
    565e:	|            movea.l 102(a0),a0
    5662:	|            move.l 24(a0),d0
    5666:	|            movea.l 16(sp),a0
    566a:	|            move.l d0,16(a0)
    newPerson->myAnim = NULL;
    566e:	|            movea.l 16(sp),a0
    5672:	|            clr.l 60(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    5676:	|            movea.l 16(sp),a0
    567a:	|            movea.l 102(a0),a0
    567e:	|            move.l 32(a0),d0
    5682:	|            movea.l 16(sp),a0
    5686:	|            move.l d0,110(a0)
    newPerson->r = 0;
    568a:	|            movea.l 16(sp),a0
    568e:	|            clr.b 114(a0)
    newPerson->g = 0;
    5692:	|            movea.l 16(sp),a0
    5696:	|            clr.b 115(a0)
    newPerson->b = 0;
    569a:	|            movea.l 16(sp),a0
    569e:	|            clr.b 116(a0)
    newPerson->colourmix = 0;
    56a2:	|            movea.l 16(sp),a0
    56a6:	|            clr.b 117(a0)
    newPerson->transparency = 0;
    56aa:	|            movea.l 16(sp),a0
    56ae:	|            clr.b 118(a0)
    newPerson->myPersona = p;
    56b2:	|            movea.l 16(sp),a0
    56b6:	|            move.l 52(sp),68(a0)

    setFrames(newPerson, ANI_STAND);
    56bc:	|            clr.l -(sp)
    56be:	|            move.l 20(sp),-(sp)
    56c2:	|            jsr 4f86 <setFrames>
    56c8:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    56ca:	|            movea.l 52(sp),a0
    56ce:	|            movea.l (a0),a0
    56d0:	|            movea.l (a0),a0
    56d2:	|            movea.l 4(a0),a0
    56d6:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    56da:	|     /----- bpl.s 56e4 <addPerson+0x186>
    56dc:	|     |      move.l 12(sp),d0
    56e0:	|     |      neg.l d0
    56e2:	|     |  /-- bra.s 56e6 <addPerson+0x188>
    56e4:	|     \--|-> moveq #1,d0
    56e6:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    56ea:	|            movea.l 52(sp),a0
    56ee:	|            movea.l (a0),a0
    56f0:	|            movea.l (a0),a0
    56f2:	|            movea.l (a0),a0
    56f4:	|            move.l 8(a0),d0
    56f8:	|            cmp.l 8(sp),d0
    56fc:	|     /----- bgt.s 572e <addPerson+0x1d0>
        if (fNumSigned < 0) {
    56fe:	|     |      tst.l 12(sp)
    5702:	|     |  /-- bge.s 5710 <addPerson+0x1b2>
            newPerson->height = 5;
    5704:	|     |  |   movea.l 16(sp),a0
    5708:	|     |  |   moveq #5,d1
    570a:	|     |  |   move.l d1,8(a0)
    570e:	|  /--|--|-- bra.s 5758 <addPerson+0x1fa>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    5710:	|  |  |  \-> movea.l 52(sp),a0
    5714:	|  |  |      movea.l (a0),a0
    5716:	|  |  |      movea.l (a0),a0
    5718:	|  |  |      movea.l (a0),a0
    571a:	|  |  |      movea.l 16(a0),a0
    571e:	|  |  |      move.l 12(a0),d0
    5722:	|  |  |      addq.l #5,d0
    5724:	|  |  |      movea.l 16(sp),a0
    5728:	|  |  |      move.l d0,8(a0)
    572c:	|  +--|----- bra.s 5758 <addPerson+0x1fa>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    572e:	|  |  \----> movea.l 52(sp),a0
    5732:	|  |         movea.l (a0),a0
    5734:	|  |         movea.l (a0),a0
    5736:	|  |         movea.l (a0),a0
    5738:	|  |         movea.l 16(a0),a0
    573c:	|  |         move.l 8(sp),d1
    5740:	|  |         move.l d1,d0
    5742:	|  |         add.l d0,d0
    5744:	|  |         add.l d1,d0
    5746:	|  |         lsl.l #3,d0
    5748:	|  |         adda.l d0,a0
    574a:	|  |         move.l 12(a0),d0
    574e:	|  |         addq.l #5,d0
    5750:	|  |         movea.l 16(sp),a0
    5754:	|  |         move.l d0,8(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    5758:	|  \-------> move.l #105436,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    5760:	|        /-- bra.s 5770 <addPerson+0x212>
        changethat = &((*changethat)->next);
    5762:	|     /--|-> movea.l 32(sp),a0
    5766:	|     |  |   move.l (a0),d0
    5768:	|     |  |   moveq #24,d1
    576a:	|     |  |   add.l d0,d1
    576c:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    5770:	|     |  \-> movea.l 32(sp),a0
    5774:	|     |      move.l (a0),d0
    5776:	|     |  /-- beq.s 579e <addPerson+0x240>
    5778:	|     |  |   movea.l 32(sp),a0
    577c:	|     |  |   movea.l (a0),a0
    577e:	|     |  |   move.l 4(a0),d2
    5782:	|     |  |   move.l 44(sp),-(sp)
    5786:	|     |  |   jsr 12588 <__floatsisf>
    578c:	|     |  |   addq.l #4,sp
    578e:	|     |  |   move.l d0,-(sp)
    5790:	|     |  |   move.l d2,-(sp)
    5792:	|     |  |   jsr 127ae <__ltsf2>
    5798:	|     |  |   addq.l #8,sp
    579a:	|     |  |   tst.l d0
    579c:	|     \--|-- blt.s 5762 <addPerson+0x204>
    }

    newPerson->next = (*changethat);
    579e:	|        \-> movea.l 32(sp),a0
    57a2:	|            move.l (a0),d0
    57a4:	|            movea.l 16(sp),a0
    57a8:	|            move.l d0,24(a0)
    (*changethat) = newPerson;
    57ac:	|            movea.l 32(sp),a0
    57b0:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    57b4:	|            movea.l 16(sp),a0
    57b8:	|            move.l 102(a0),d0
    57bc:	|            sne d0
    57be:	|            neg.b d0
    57c0:	|            move.b d0,d0
    57c2:	|            andi.w #255,d0
}
    57c6:	\----------> move.l (sp)+,d2
    57c8:	             movea.l (sp)+,a6
    57ca:	             lea 28(sp),sp
    57ce:	             rts

000057d0 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    57d0:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    57d2:	       move.l 8(sp),-(sp)
    57d6:	       jsr 6338 <findPerson>
    57dc:	       addq.l #4,sp
    57de:	       move.l d0,(sp)
    if (moveMe) {
    57e0:	/----- beq.s 5814 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    57e2:	|      movea.l (sp),a0
    57e4:	|      move.l 56(a0),d0
    57e8:	|  /-- beq.s 57fa <animatePerson+0x2a>
    57ea:	|  |   movea.l (sp),a0
    57ec:	|  |   move.l 56(a0),d0
    57f0:	|  |   move.l d0,-(sp)
    57f2:	|  |   jsr 1b06 <abortFunction>
    57f8:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    57fa:	|  \-> movea.l (sp),a0
    57fc:	|      clr.l 56(a0)
        moveMe -> walking = FALSE;
    5800:	|      movea.l (sp),a0
    5802:	|      clr.w 52(a0)
        moveMe -> spinning = FALSE;
    5806:	|      movea.l (sp),a0
    5808:	|      clr.w 54(a0)
        moveMe -> myAnim = fram;
    580c:	|      movea.l (sp),a0
    580e:	|      move.l 12(sp),60(a0)
    }
}
    5814:	\----> nop
    5816:	       addq.l #4,sp
    5818:	       rts

0000581a <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    581a:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    581c:	       move.l 8(sp),-(sp)
    5820:	       jsr 6338 <findPerson>
    5826:	       addq.l #4,sp
    5828:	       move.l d0,(sp)
    if (moveMe) {
    582a:	/----- beq.s 586c <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    582c:	|      movea.l (sp),a0
    582e:	|      clr.w 54(a0)
        moveMe -> myPersona = per;
    5832:	|      movea.l (sp),a0
    5834:	|      move.l 12(sp),68(a0)
        rethinkAngle(moveMe);
    583a:	|      move.l (sp),-(sp)
    583c:	|      jsr 6bca <rethinkAngle>
    5842:	|      addq.l #4,sp
        if (moveMe->walking) {
    5844:	|      movea.l (sp),a0
    5846:	|      move.w 52(a0),d0
    584a:	|  /-- beq.s 585e <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    584c:	|  |   pea 1 <_start+0x1>
    5850:	|  |   move.l 4(sp),-(sp)
    5854:	|  |   jsr 4f86 <setFrames>
    585a:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    585c:	+--|-- bra.s 586c <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    585e:	|  \-> clr.l -(sp)
    5860:	|      move.l 4(sp),-(sp)
    5864:	|      jsr 4f86 <setFrames>
    586a:	|      addq.l #8,sp
}
    586c:	\----> nop
    586e:	       addq.l #4,sp
    5870:	       rts

00005872 <copyAnim>:


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    5872:	             lea -36(sp),sp
    5876:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    5878:	             movea.l 44(sp),a0
    587c:	             move.l 8(a0),32(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    5882:	             moveq #12,d0
    5884:	             move.l d0,28(sp)
    5888:	             clr.l 24(sp)
    588c:	             move.l 19b8e <SysBase>,d0
    5892:	             movea.l d0,a6
    5894:	             move.l 28(sp),d0
    5898:	             move.l 24(sp),d1
    589c:	             jsr -684(a6)
    58a0:	             move.l d0,20(sp)
    58a4:	             move.l 20(sp),d0
    58a8:	             move.l d0,16(sp)
	if (!(newAnim)) {
    58ac:	         /-- bne.s 58c2 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    58ae:	         |   pea 15077 <incbin_player_end+0x143>
    58b4:	         |   jsr 12130 <KPrintF>
    58ba:	         |   addq.l #4,sp
		return NULL;
    58bc:	         |   moveq #0,d0
    58be:	/--------|-- bra.w 5a04 <copyAnim+0x192>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    58c2:	|        \-> movea.l 44(sp),a0
    58c6:	|            move.l (a0),d0
    58c8:	|            movea.l 16(sp),a0
    58cc:	|            move.l d0,(a0)
	newAnim -> numFrames		= num;
    58ce:	|            movea.l 16(sp),a0
    58d2:	|            move.l 32(sp),8(a0)

	if (num) {
    58d8:	|  /-------- beq.w 59f8 <copyAnim+0x186>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    58dc:	|  |         move.l 32(sp),d1
    58e0:	|  |         move.l d1,d0
    58e2:	|  |         add.l d0,d0
    58e4:	|  |         add.l d1,d0
    58e6:	|  |         add.l d0,d0
    58e8:	|  |         add.l d0,d0
    58ea:	|  |         move.l d0,12(sp)
    58ee:	|  |         clr.l 8(sp)
    58f2:	|  |         move.l 19b8e <SysBase>,d0
    58f8:	|  |         movea.l d0,a6
    58fa:	|  |         move.l 12(sp),d0
    58fe:	|  |         move.l 8(sp),d1
    5902:	|  |         jsr -684(a6)
    5906:	|  |         move.l d0,4(sp)
    590a:	|  |         move.l 4(sp),d0
    590e:	|  |         movea.l 16(sp),a0
    5912:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    5916:	|  |         movea.l 16(sp),a0
    591a:	|  |         move.l 4(a0),d0
    591e:	|  |     /-- bne.s 5934 <copyAnim+0xc2>
			KPrintF("copyAnim: Cannot allocate memory");
    5920:	|  |     |   pea 15077 <incbin_player_end+0x143>
    5926:	|  |     |   jsr 12130 <KPrintF>
    592c:	|  |     |   addq.l #4,sp
			return NULL;
    592e:	|  |     |   moveq #0,d0
    5930:	+--|-----|-- bra.w 5a04 <copyAnim+0x192>
		}

		for (int a = 0; a < num; a ++) {
    5934:	|  |     \-> clr.l 36(sp)
    5938:	|  |     /-- bra.w 59ea <copyAnim+0x178>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    593c:	|  |  /--|-> movea.l 44(sp),a0
    5940:	|  |  |  |   movea.l 4(a0),a0
    5944:	|  |  |  |   move.l 36(sp),d1
    5948:	|  |  |  |   move.l d1,d0
    594a:	|  |  |  |   add.l d0,d0
    594c:	|  |  |  |   add.l d1,d0
    594e:	|  |  |  |   add.l d0,d0
    5950:	|  |  |  |   add.l d0,d0
    5952:	|  |  |  |   lea (0,a0,d0.l),a1
    5956:	|  |  |  |   movea.l 16(sp),a0
    595a:	|  |  |  |   movea.l 4(a0),a0
    595e:	|  |  |  |   move.l 36(sp),d1
    5962:	|  |  |  |   move.l d1,d0
    5964:	|  |  |  |   add.l d0,d0
    5966:	|  |  |  |   add.l d1,d0
    5968:	|  |  |  |   add.l d0,d0
    596a:	|  |  |  |   add.l d0,d0
    596c:	|  |  |  |   adda.l d0,a0
    596e:	|  |  |  |   move.l (a1),d0
    5970:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    5972:	|  |  |  |   movea.l 44(sp),a0
    5976:	|  |  |  |   movea.l 4(a0),a0
    597a:	|  |  |  |   move.l 36(sp),d1
    597e:	|  |  |  |   move.l d1,d0
    5980:	|  |  |  |   add.l d0,d0
    5982:	|  |  |  |   add.l d1,d0
    5984:	|  |  |  |   add.l d0,d0
    5986:	|  |  |  |   add.l d0,d0
    5988:	|  |  |  |   lea (0,a0,d0.l),a1
    598c:	|  |  |  |   movea.l 16(sp),a0
    5990:	|  |  |  |   movea.l 4(a0),a0
    5994:	|  |  |  |   move.l 36(sp),d1
    5998:	|  |  |  |   move.l d1,d0
    599a:	|  |  |  |   add.l d0,d0
    599c:	|  |  |  |   add.l d1,d0
    599e:	|  |  |  |   add.l d0,d0
    59a0:	|  |  |  |   add.l d0,d0
    59a2:	|  |  |  |   adda.l d0,a0
    59a4:	|  |  |  |   move.l 4(a1),d0
    59a8:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    59ac:	|  |  |  |   movea.l 44(sp),a0
    59b0:	|  |  |  |   movea.l 4(a0),a0
    59b4:	|  |  |  |   move.l 36(sp),d1
    59b8:	|  |  |  |   move.l d1,d0
    59ba:	|  |  |  |   add.l d0,d0
    59bc:	|  |  |  |   add.l d1,d0
    59be:	|  |  |  |   add.l d0,d0
    59c0:	|  |  |  |   add.l d0,d0
    59c2:	|  |  |  |   lea (0,a0,d0.l),a1
    59c6:	|  |  |  |   movea.l 16(sp),a0
    59ca:	|  |  |  |   movea.l 4(a0),a0
    59ce:	|  |  |  |   move.l 36(sp),d1
    59d2:	|  |  |  |   move.l d1,d0
    59d4:	|  |  |  |   add.l d0,d0
    59d6:	|  |  |  |   add.l d1,d0
    59d8:	|  |  |  |   add.l d0,d0
    59da:	|  |  |  |   add.l d0,d0
    59dc:	|  |  |  |   adda.l d0,a0
    59de:	|  |  |  |   move.l 8(a1),d0
    59e2:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    59e6:	|  |  |  |   addq.l #1,36(sp)
    59ea:	|  |  |  \-> move.l 36(sp),d0
    59ee:	|  |  |      cmp.l 32(sp),d0
    59f2:	|  |  \----- blt.w 593c <copyAnim+0xca>
    59f6:	|  |     /-- bra.s 5a00 <copyAnim+0x18e>
		}
	} else {
		newAnim -> frames = NULL;
    59f8:	|  \-----|-> movea.l 16(sp),a0
    59fc:	|        |   clr.l 4(a0)
	}

	return newAnim;
    5a00:	|        \-> move.l 16(sp),d0
}
    5a04:	\----------> movea.l (sp)+,a6
    5a06:	             lea 36(sp),sp
    5a0a:	             rts

00005a0c <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    5a0c:	                lea -44(sp),sp
    5a10:	                move.l a6,-(sp)
    5a12:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    5a14:	                moveq #12,d0
    5a16:	                move.l d0,40(sp)
    5a1a:	                clr.l 36(sp)
    5a1e:	                move.l 19b8e <SysBase>,d0
    5a24:	                movea.l d0,a6
    5a26:	                move.l 40(sp),d0
    5a2a:	                move.l 36(sp),d1
    5a2e:	                jsr -684(a6)
    5a32:	                move.l d0,32(sp)
    5a36:	                move.l 32(sp),d0
    5a3a:	                move.l d0,28(sp)
	if( !newP) {
    5a3e:	            /-- bne.s 5a54 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    5a40:	            |   pea 15098 <incbin_player_end+0x164>
    5a46:	            |   jsr 12130 <KPrintF>
    5a4c:	            |   addq.l #4,sp
		return NULL;
    5a4e:	            |   moveq #0,d0
    5a50:	/-----------|-- bra.w 5c24 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    5a54:	|           \-> movea.l 28(sp),a0
    5a58:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    5a5e:	|               move.l 56(sp),d1
    5a62:	|               move.l d1,d0
    5a64:	|               add.l d0,d0
    5a66:	|               add.l d1,d0
    5a68:	|               add.l d0,d0
    5a6a:	|               add.l d0,d0
    5a6c:	|               move.l d0,24(sp)
    5a70:	|               clr.l 20(sp)
    5a74:	|               move.l 19b8e <SysBase>,d0
    5a7a:	|               movea.l d0,a6
    5a7c:	|               move.l 24(sp),d0
    5a80:	|               move.l 20(sp),d1
    5a84:	|               jsr -684(a6)
    5a88:	|               move.l d0,16(sp)
    5a8c:	|               move.l 16(sp),d0
    5a90:	|               movea.l 28(sp),a0
    5a94:	|               move.l d0,4(a0)
	if( !newP->frames) {
    5a98:	|               movea.l 28(sp),a0
    5a9c:	|               move.l 4(a0),d0
    5aa0:	|           /-- bne.s 5ab6 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    5aa2:	|           |   pea 15098 <incbin_player_end+0x164>
    5aa8:	|           |   jsr 12130 <KPrintF>
    5aae:	|           |   addq.l #4,sp
		return NULL;
    5ab0:	|           |   moveq #0,d0
    5ab2:	+-----------|-- bra.w 5c24 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    5ab6:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    5abc:	|               movea.l 60(sp),a0
    5ac0:	|               move.l (a0),44(sp)
	while (a) {
    5ac4:	|     /-------- bra.w 5c18 <createPersonaAnim+0x20c>
		a --;
    5ac8:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    5acc:	|  |  |         movea.l 28(sp),a0
    5ad0:	|  |  |         movea.l 4(a0),a0
    5ad4:	|  |  |         move.l 48(sp),d1
    5ad8:	|  |  |         move.l d1,d0
    5ada:	|  |  |         add.l d0,d0
    5adc:	|  |  |         add.l d1,d0
    5ade:	|  |  |         add.l d0,d0
    5ae0:	|  |  |         add.l d0,d0
    5ae2:	|  |  |         adda.l d0,a0
    5ae4:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    5ae8:	|  |  |         movea.l 44(sp),a0
    5aec:	|  |  |         move.l (a0),d0
    5aee:	|  |  |         moveq #5,d1
    5af0:	|  |  |         cmp.l d0,d1
    5af2:	|  |  |     /-- bne.s 5b1e <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    5af4:	|  |  |     |   movea.l 28(sp),a0
    5af8:	|  |  |     |   movea.l 4(a0),a0
    5afc:	|  |  |     |   move.l 48(sp),d1
    5b00:	|  |  |     |   move.l d1,d0
    5b02:	|  |  |     |   add.l d0,d0
    5b04:	|  |  |     |   add.l d1,d0
    5b06:	|  |  |     |   add.l d0,d0
    5b08:	|  |  |     |   add.l d0,d0
    5b0a:	|  |  |     |   lea (0,a0,d0.l),a1
    5b0e:	|  |  |     |   movea.l 44(sp),a0
    5b12:	|  |  |     |   move.l 4(a0),d0
    5b16:	|  |  |     |   move.l d0,8(a1)
    5b1a:	|  |  |  /--|-- bra.w 5bc6 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    5b1e:	|  |  |  |  \-> movea.l 44(sp),a0
    5b22:	|  |  |  |      move.l (a0),d0
    5b24:	|  |  |  |      moveq #2,d1
    5b26:	|  |  |  |      cmp.l d0,d1
    5b28:	|  |  |  |  /-- bne.s 5b54 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    5b2a:	|  |  |  |  |   movea.l 44(sp),a0
    5b2e:	|  |  |  |  |   move.l 4(a0),d2
    5b32:	|  |  |  |  |   movea.l 28(sp),a0
    5b36:	|  |  |  |  |   movea.l 4(a0),a0
    5b3a:	|  |  |  |  |   move.l 48(sp),d1
    5b3e:	|  |  |  |  |   move.l d1,d0
    5b40:	|  |  |  |  |   add.l d0,d0
    5b42:	|  |  |  |  |   add.l d1,d0
    5b44:	|  |  |  |  |   add.l d0,d0
    5b46:	|  |  |  |  |   add.l d0,d0
    5b48:	|  |  |  |  |   adda.l d0,a0
    5b4a:	|  |  |  |  |   move.l d2,d0
    5b4c:	|  |  |  |  |   neg.l d0
    5b4e:	|  |  |  |  |   move.l d0,8(a0)
    5b52:	|  |  |  +--|-- bra.s 5bc6 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    5b54:	|  |  |  |  \-> movea.l 44(sp),a0
    5b58:	|  |  |  |      move.l (a0),d0
    5b5a:	|  |  |  |      moveq #6,d1
    5b5c:	|  |  |  |      cmp.l d0,d1
    5b5e:	|  |  |  |  /-- bne.s 5ba6 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    5b60:	|  |  |  |  |   movea.l 44(sp),a0
    5b64:	|  |  |  |  |   movea.l 4(a0),a0
    5b68:	|  |  |  |  |   move.l (a0),d0
    5b6a:	|  |  |  |  |   move.l d0,-(sp)
    5b6c:	|  |  |  |  |   pea 1 <_start+0x1>
    5b70:	|  |  |  |  |   lea 20(sp),a0
    5b74:	|  |  |  |  |   move.l a0,-(sp)
    5b76:	|  |  |  |  |   jsr 100dc <getValueType>
    5b7c:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    5b80:	|  |  |  |  |   movea.l 44(sp),a0
    5b84:	|  |  |  |  |   movea.l 4(a0),a0
    5b88:	|  |  |  |  |   movea.l (a0),a0
    5b8a:	|  |  |  |  |   move.l 8(a0),d0
    5b8e:	|  |  |  |  |   move.l d0,-(sp)
    5b90:	|  |  |  |  |   pea 1 <_start+0x1>
    5b94:	|  |  |  |  |   lea 16(sp),a0
    5b98:	|  |  |  |  |   move.l a0,-(sp)
    5b9a:	|  |  |  |  |   jsr 100dc <getValueType>
    5ba0:	|  |  |  |  |   lea 12(sp),sp
    5ba4:	|  |  |  +--|-- bra.s 5bc6 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    5ba6:	|  |  |  |  \-> move.l 44(sp),d0
    5baa:	|  |  |  |      move.l d0,-(sp)
    5bac:	|  |  |  |      pea 1 <_start+0x1>
    5bb0:	|  |  |  |      lea 20(sp),a0
    5bb4:	|  |  |  |      move.l a0,-(sp)
    5bb6:	|  |  |  |      jsr 100dc <getValueType>
    5bbc:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    5bc0:	|  |  |  |      moveq #1,d0
    5bc2:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    5bc6:	|  |  |  \----> move.l 60(sp),-(sp)
    5bca:	|  |  |         jsr 10a60 <trimStack>
    5bd0:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    5bd2:	|  |  |         movea.l 28(sp),a0
    5bd6:	|  |  |         movea.l 4(a0),a0
    5bda:	|  |  |         move.l 48(sp),d1
    5bde:	|  |  |         move.l d1,d0
    5be0:	|  |  |         add.l d0,d0
    5be2:	|  |  |         add.l d1,d0
    5be4:	|  |  |         add.l d0,d0
    5be6:	|  |  |         add.l d0,d0
    5be8:	|  |  |         adda.l d0,a0
    5bea:	|  |  |         move.l 12(sp),d0
    5bee:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    5bf0:	|  |  |         movea.l 28(sp),a0
    5bf4:	|  |  |         movea.l 4(a0),a0
    5bf8:	|  |  |         move.l 48(sp),d1
    5bfc:	|  |  |         move.l d1,d0
    5bfe:	|  |  |         add.l d0,d0
    5c00:	|  |  |         add.l d1,d0
    5c02:	|  |  |         add.l d0,d0
    5c04:	|  |  |         add.l d0,d0
    5c06:	|  |  |         adda.l d0,a0
    5c08:	|  |  |         move.l 8(sp),d0
    5c0c:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    5c10:	|  |  |         movea.l 60(sp),a0
    5c14:	|  |  |         move.l (a0),44(sp)
	while (a) {
    5c18:	|  |  \-------> tst.l 48(sp)
    5c1c:	|  \----------- bne.w 5ac8 <createPersonaAnim+0xbc>
	}

	return newP;
    5c20:	|               move.l 28(sp),d0
}
    5c24:	\-------------> move.l (sp)+,d2
    5c26:	                movea.l (sp)+,a6
    5c28:	                lea 44(sp),sp
    5c2c:	                rts

00005c2e <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    5c2e:	       subq.l #8,sp
    5c30:	       move.l a6,-(sp)

	if (orig)
    5c32:	       tst.l 16(sp)
    5c36:	/----- beq.s 5c76 <deleteAnim+0x48>
	{
		if (orig -> numFrames) {
    5c38:	|      movea.l 16(sp),a0
    5c3c:	|      move.l 8(a0),d0
    5c40:	|  /-- beq.s 5c5c <deleteAnim+0x2e>
			FreeVec( orig->frames);
    5c42:	|  |   movea.l 16(sp),a0
    5c46:	|  |   move.l 4(a0),8(sp)
    5c4c:	|  |   move.l 19b8e <SysBase>,d0
    5c52:	|  |   movea.l d0,a6
    5c54:	|  |   movea.l 8(sp),a1
    5c58:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    5c5c:	|  \-> move.l 16(sp),4(sp)
    5c62:	|      move.l 19b8e <SysBase>,d0
    5c68:	|      movea.l d0,a6
    5c6a:	|      movea.l 4(sp),a1
    5c6e:	|      jsr -690(a6)
		orig = NULL;
    5c72:	|      clr.l 16(sp)
	}
}
    5c76:	\----> nop
    5c78:	       movea.l (sp)+,a6
    5c7a:	       addq.l #8,sp
    5c7c:	       rts

00005c7e <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    5c7e:	          lea -124(sp),sp
    5c82:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    5c86:	          movea.l 152(sp),a0
    5c8a:	          move.l 44(a0),d1
    5c8e:	          movea.l 152(sp),a0
    5c92:	          move.l 48(a0),d0
    5c96:	          cmp.l d1,d0
    5c98:	      /-- bne.s 5cc8 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    5c9a:	      |   movea.l 152(sp),a0
    5c9e:	      |   moveq #-1,d0
    5ca0:	      |   move.l d0,44(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    5ca4:	      |   movea.l 152(sp),a0
    5ca8:	      |   move.l 28(a0),d0
    5cac:	      |   movea.l 152(sp),a0
    5cb0:	      |   move.l d0,36(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    5cb4:	      |   movea.l 152(sp),a0
    5cb8:	      |   move.l 32(a0),d0
    5cbc:	      |   movea.l 152(sp),a0
    5cc0:	      |   move.l d0,40(a0)
    5cc4:	   /--|-- bra.w 622e <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    5cc8:	   |  \-> movea.l 19c84 <currentFloor>,a0
    5cce:	   |      move.l 16(a0),d1
    5cd2:	   |      movea.l 152(sp),a0
    5cd6:	   |      move.l 44(a0),d0
    5cda:	   |      add.l d0,d0
    5cdc:	   |      add.l d0,d0
    5cde:	   |      movea.l d1,a0
    5ce0:	   |      adda.l d0,a0
    5ce2:	   |      move.l (a0),d1
    5ce4:	   |      movea.l 152(sp),a0
    5ce8:	   |      move.l 48(a0),d0
    5cec:	   |      add.l d0,d0
    5cee:	   |      add.l d0,d0
    5cf0:	   |      movea.l d1,a0
    5cf2:	   |      adda.l d0,a0
    5cf4:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    5cf8:	   |      moveq #-1,d0
    5cfa:	   |      cmp.l 144(sp),d0
    5cfe:	   |  /-- bne.s 5d06 <doBorderStuff+0x88>
    5d00:	   |  |   clr.w d0
    5d02:	/--|--|-- bra.w 632e <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    5d06:	|  |  \-> movea.l 19c84 <currentFloor>,a0
    5d0c:	|  |      move.l 12(a0),d1
    5d10:	|  |      move.l 144(sp),d0
    5d14:	|  |      lsl.l #3,d0
    5d16:	|  |      add.l d0,d1
    5d18:	|  |      movea.l 19c84 <currentFloor>,a0
    5d1e:	|  |      movea.l 12(a0),a1
    5d22:	|  |      movea.l 152(sp),a0
    5d26:	|  |      move.l 44(a0),d0
    5d2a:	|  |      lsl.l #3,d0
    5d2c:	|  |      add.l a1,d0
    5d2e:	|  |      lea 40(sp),a0
    5d32:	|  |      move.l a0,-(sp)
    5d34:	|  |      lea 48(sp),a0
    5d38:	|  |      move.l a0,-(sp)
    5d3a:	|  |      move.l d1,-(sp)
    5d3c:	|  |      move.l d0,-(sp)
    5d3e:	|  |      jsr 113a6 <getMatchingCorners>
    5d44:	|  |      lea 16(sp),sp
    5d48:	|  |      tst.w d0
    5d4a:	|  |  /-- bne.s 5d60 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    5d4c:	|  |  |   pea 150c2 <incbin_player_end+0x18e>
    5d52:	|  |  |   jsr 12130 <KPrintF>
    5d58:	|  |  |   addq.l #4,sp
            return FALSE;
    5d5a:	|  |  |   clr.w d0
    5d5c:	+--|--|-- bra.w 632e <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    5d60:	|  |  \-> movea.l 152(sp),a0
    5d64:	|  |      move.l 144(sp),44(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    5d6a:	|  |      movea.l 152(sp),a0
    5d6e:	|  |      move.l (a0),d0
    5d70:	|  |      move.l d0,-(sp)
    5d72:	|  |      jsr 12520 <__fixsfsi>
    5d78:	|  |      addq.l #4,sp
    5d7a:	|  |      move.l d0,140(sp)
    5d7e:	|  |      movea.l 152(sp),a0
    5d82:	|  |      move.l 4(a0),d0
    5d86:	|  |      move.l d0,-(sp)
    5d88:	|  |      jsr 12520 <__fixsfsi>
    5d8e:	|  |      addq.l #4,sp
    5d90:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    5d94:	|  |      movea.l 152(sp),a0
    5d98:	|  |      move.l 28(a0),132(sp)
    5d9e:	|  |      movea.l 152(sp),a0
    5da2:	|  |      move.l 32(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    5da8:	|  |      movea.l 19c84 <currentFloor>,a0
    5dae:	|  |      move.l 4(a0),d1
    5db2:	|  |      move.l 44(sp),d0
    5db6:	|  |      lsl.l #3,d0
    5db8:	|  |      movea.l d1,a0
    5dba:	|  |      adda.l d0,a0
    5dbc:	|  |      move.l (a0),124(sp)
    5dc0:	|  |      movea.l 19c84 <currentFloor>,a0
    5dc6:	|  |      move.l 4(a0),d1
    5dca:	|  |      move.l 44(sp),d0
    5dce:	|  |      lsl.l #3,d0
    5dd0:	|  |      movea.l d1,a0
    5dd2:	|  |      adda.l d0,a0
    5dd4:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    5dda:	|  |      movea.l 19c84 <currentFloor>,a0
    5de0:	|  |      move.l 4(a0),d1
    5de4:	|  |      move.l 40(sp),d0
    5de8:	|  |      lsl.l #3,d0
    5dea:	|  |      movea.l d1,a0
    5dec:	|  |      adda.l d0,a0
    5dee:	|  |      move.l (a0),116(sp)
    5df2:	|  |      movea.l 19c84 <currentFloor>,a0
    5df8:	|  |      move.l 4(a0),d1
    5dfc:	|  |      move.l 40(sp),d0
    5e00:	|  |      lsl.l #3,d0
    5e02:	|  |      movea.l d1,a0
    5e04:	|  |      adda.l d0,a0
    5e06:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    5e0c:	|  |      move.l 140(sp),d0
    5e10:	|  |      sub.l 132(sp),d0
    5e14:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    5e18:	|  |      move.l 136(sp),d0
    5e1c:	|  |      sub.l 128(sp),d0
    5e20:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    5e24:	|  |      move.l 116(sp),d0
    5e28:	|  |      sub.l 124(sp),d0
    5e2c:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    5e30:	|  |      move.l 112(sp),d0
    5e34:	|  |      sub.l 120(sp),d0
    5e38:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    5e3c:	|  |      move.l 124(sp),d0
    5e40:	|  |      sub.l 140(sp),d0
    5e44:	|  |      move.l 104(sp),-(sp)
    5e48:	|  |      move.l d0,-(sp)
    5e4a:	|  |      jsr 12ae2 <__mulsi3>
    5e50:	|  |      addq.l #8,sp
    5e52:	|  |      move.l d0,d2
    5e54:	|  |      move.l 120(sp),d0
    5e58:	|  |      sub.l 136(sp),d0
    5e5c:	|  |      move.l 108(sp),-(sp)
    5e60:	|  |      move.l d0,-(sp)
    5e62:	|  |      jsr 12ae2 <__mulsi3>
    5e68:	|  |      addq.l #8,sp
    5e6a:	|  |      move.l d2,d1
    5e6c:	|  |      sub.l d0,d1
    5e6e:	|  |      move.l d1,-(sp)
    5e70:	|  |      jsr 12548 <__floatsidf>
    5e76:	|  |      addq.l #4,sp
    5e78:	|  |      move.l d0,32(sp)
    5e7c:	|  |      move.l d1,36(sp)
    5e80:	|  |      move.l 32(sp),88(sp)
    5e86:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    5e8c:	|  |      move.l 96(sp),-(sp)
    5e90:	|  |      move.l 112(sp),-(sp)
    5e94:	|  |      jsr 12ae2 <__mulsi3>
    5e9a:	|  |      addq.l #8,sp
    5e9c:	|  |      move.l d0,d2
    5e9e:	|  |      move.l 100(sp),-(sp)
    5ea2:	|  |      move.l 108(sp),-(sp)
    5ea6:	|  |      jsr 12ae2 <__mulsi3>
    5eac:	|  |      addq.l #8,sp
    5eae:	|  |      move.l d2,d1
    5eb0:	|  |      sub.l d0,d1
    5eb2:	|  |      move.l d1,-(sp)
    5eb4:	|  |      jsr 12548 <__floatsidf>
    5eba:	|  |      addq.l #4,sp
    5ebc:	|  |      move.l d1,-(sp)
    5ebe:	|  |      move.l d0,-(sp)
    5ec0:	|  |      move.l 100(sp),-(sp)
    5ec4:	|  |      move.l 100(sp),-(sp)
    5ec8:	|  |      jsr 123d2 <__divdf3>
    5ece:	|  |      lea 16(sp),sp
    5ed2:	|  |      move.l d0,24(sp)
    5ed6:	|  |      move.l d1,28(sp)
    5eda:	|  |      move.l 24(sp),88(sp)
    5ee0:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    5ee6:	|  |      clr.l -(sp)
    5ee8:	|  |      clr.l -(sp)
    5eea:	|  |      move.l 100(sp),-(sp)
    5eee:	|  |      move.l 100(sp),-(sp)
    5ef2:	|  |      jsr 126a6 <__gtdf2>
    5ef8:	|  |      lea 16(sp),sp
    5efc:	|  |      tst.l d0
    5efe:	|  |  /-- ble.w 5fd6 <doBorderStuff+0x358>
    5f02:	|  |  |   clr.l -(sp)
    5f04:	|  |  |   move.l #1072693248,-(sp)
    5f0a:	|  |  |   move.l 100(sp),-(sp)
    5f0e:	|  |  |   move.l 100(sp),-(sp)
    5f12:	|  |  |   jsr 12760 <__ltdf2>
    5f18:	|  |  |   lea 16(sp),sp
    5f1c:	|  |  |   tst.l d0
    5f1e:	|  |  +-- bge.w 5fd6 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    5f22:	|  |  |   move.l 124(sp),-(sp)
    5f26:	|  |  |   jsr 12548 <__floatsidf>
    5f2c:	|  |  |   addq.l #4,sp
    5f2e:	|  |  |   move.l d0,d2
    5f30:	|  |  |   move.l d1,d3
    5f32:	|  |  |   move.l 100(sp),-(sp)
    5f36:	|  |  |   jsr 12548 <__floatsidf>
    5f3c:	|  |  |   addq.l #4,sp
    5f3e:	|  |  |   move.l 92(sp),-(sp)
    5f42:	|  |  |   move.l 92(sp),-(sp)
    5f46:	|  |  |   move.l d1,-(sp)
    5f48:	|  |  |   move.l d0,-(sp)
    5f4a:	|  |  |   jsr 125d8 <__muldf3>
    5f50:	|  |  |   lea 16(sp),sp
    5f54:	|  |  |   move.l d1,-(sp)
    5f56:	|  |  |   move.l d0,-(sp)
    5f58:	|  |  |   move.l d3,-(sp)
    5f5a:	|  |  |   move.l d2,-(sp)
    5f5c:	|  |  |   jsr 12370 <__adddf3>
    5f62:	|  |  |   lea 16(sp),sp
    5f66:	|  |  |   move.l d1,-(sp)
    5f68:	|  |  |   move.l d0,-(sp)
    5f6a:	|  |  |   jsr 124e0 <__fixdfsi>
    5f70:	|  |  |   addq.l #8,sp
    5f72:	|  |  |   movea.l 152(sp),a0
    5f76:	|  |  |   move.l d0,36(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    5f7a:	|  |  |   move.l 120(sp),-(sp)
    5f7e:	|  |  |   jsr 12548 <__floatsidf>
    5f84:	|  |  |   addq.l #4,sp
    5f86:	|  |  |   move.l d0,d2
    5f88:	|  |  |   move.l d1,d3
    5f8a:	|  |  |   move.l 96(sp),-(sp)
    5f8e:	|  |  |   jsr 12548 <__floatsidf>
    5f94:	|  |  |   addq.l #4,sp
    5f96:	|  |  |   move.l 92(sp),-(sp)
    5f9a:	|  |  |   move.l 92(sp),-(sp)
    5f9e:	|  |  |   move.l d1,-(sp)
    5fa0:	|  |  |   move.l d0,-(sp)
    5fa2:	|  |  |   jsr 125d8 <__muldf3>
    5fa8:	|  |  |   lea 16(sp),sp
    5fac:	|  |  |   move.l d1,-(sp)
    5fae:	|  |  |   move.l d0,-(sp)
    5fb0:	|  |  |   move.l d3,-(sp)
    5fb2:	|  |  |   move.l d2,-(sp)
    5fb4:	|  |  |   jsr 12370 <__adddf3>
    5fba:	|  |  |   lea 16(sp),sp
    5fbe:	|  |  |   move.l d1,-(sp)
    5fc0:	|  |  |   move.l d0,-(sp)
    5fc2:	|  |  |   jsr 124e0 <__fixdfsi>
    5fc8:	|  |  |   addq.l #8,sp
    5fca:	|  |  |   movea.l 152(sp),a0
    5fce:	|  |  |   move.l d0,40(a0)
    5fd2:	|  +--|-- bra.w 622e <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    5fd6:	|  |  \-> move.l 140(sp),d0
    5fda:	|  |      sub.l 124(sp),d0
    5fde:	|  |      move.l d0,84(sp)
    5fe2:	|  |      move.l 140(sp),d0
    5fe6:	|  |      sub.l 116(sp),d0
    5fea:	|  |      move.l d0,80(sp)
    5fee:	|  |      move.l 132(sp),d0
    5ff2:	|  |      sub.l 124(sp),d0
    5ff6:	|  |      move.l d0,76(sp)
    5ffa:	|  |      move.l 132(sp),d0
    5ffe:	|  |      sub.l 116(sp),d0
    6002:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    6006:	|  |      move.l 136(sp),d0
    600a:	|  |      sub.l 120(sp),d0
    600e:	|  |      move.l d0,68(sp)
    6012:	|  |      move.l 136(sp),d0
    6016:	|  |      sub.l 112(sp),d0
    601a:	|  |      move.l d0,64(sp)
    601e:	|  |      move.l 128(sp),d0
    6022:	|  |      sub.l 120(sp),d0
    6026:	|  |      move.l d0,60(sp)
    602a:	|  |      move.l 128(sp),d0
    602e:	|  |      sub.l 112(sp),d0
    6032:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    6036:	|  |      move.l 84(sp),-(sp)
    603a:	|  |      move.l 88(sp),-(sp)
    603e:	|  |      jsr 12ae2 <__mulsi3>
    6044:	|  |      addq.l #8,sp
    6046:	|  |      move.l d0,84(sp)
    604a:	|  |      move.l 80(sp),-(sp)
    604e:	|  |      move.l 84(sp),-(sp)
    6052:	|  |      jsr 12ae2 <__mulsi3>
    6058:	|  |      addq.l #8,sp
    605a:	|  |      move.l d0,80(sp)
    605e:	|  |      move.l 76(sp),-(sp)
    6062:	|  |      move.l 80(sp),-(sp)
    6066:	|  |      jsr 12ae2 <__mulsi3>
    606c:	|  |      addq.l #8,sp
    606e:	|  |      move.l d0,76(sp)
    6072:	|  |      move.l 72(sp),-(sp)
    6076:	|  |      move.l 76(sp),-(sp)
    607a:	|  |      jsr 12ae2 <__mulsi3>
    6080:	|  |      addq.l #8,sp
    6082:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    6086:	|  |      move.l 68(sp),-(sp)
    608a:	|  |      move.l 72(sp),-(sp)
    608e:	|  |      jsr 12ae2 <__mulsi3>
    6094:	|  |      addq.l #8,sp
    6096:	|  |      move.l d0,68(sp)
    609a:	|  |      move.l 64(sp),-(sp)
    609e:	|  |      move.l 68(sp),-(sp)
    60a2:	|  |      jsr 12ae2 <__mulsi3>
    60a8:	|  |      addq.l #8,sp
    60aa:	|  |      move.l d0,64(sp)
    60ae:	|  |      move.l 60(sp),-(sp)
    60b2:	|  |      move.l 64(sp),-(sp)
    60b6:	|  |      jsr 12ae2 <__mulsi3>
    60bc:	|  |      addq.l #8,sp
    60be:	|  |      move.l d0,60(sp)
    60c2:	|  |      move.l 56(sp),-(sp)
    60c6:	|  |      move.l 60(sp),-(sp)
    60ca:	|  |      jsr 12ae2 <__mulsi3>
    60d0:	|  |      addq.l #8,sp
    60d2:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    60d6:	|  |      move.l 84(sp),-(sp)
    60da:	|  |      jsr 12548 <__floatsidf>
    60e0:	|  |      addq.l #4,sp
    60e2:	|  |      move.l d0,d2
    60e4:	|  |      move.l d1,d3
    60e6:	|  |      move.l 68(sp),-(sp)
    60ea:	|  |      jsr 12548 <__floatsidf>
    60f0:	|  |      addq.l #4,sp
    60f2:	|  |      move.l d1,-(sp)
    60f4:	|  |      move.l d0,-(sp)
    60f6:	|  |      move.l d3,-(sp)
    60f8:	|  |      move.l d2,-(sp)
    60fa:	|  |      jsr 12370 <__adddf3>
    6100:	|  |      lea 16(sp),sp
    6104:	|  |      move.l d1,-(sp)
    6106:	|  |      move.l d0,-(sp)
    6108:	|  |      jsr 12a98 <sqrt>
    610e:	|  |      addq.l #8,sp
    6110:	|  |      move.l d0,d2
    6112:	|  |      move.l d1,d3
    6114:	|  |      move.l 76(sp),-(sp)
    6118:	|  |      jsr 12548 <__floatsidf>
    611e:	|  |      addq.l #4,sp
    6120:	|  |      move.l d0,d4
    6122:	|  |      move.l d1,d5
    6124:	|  |      move.l 60(sp),-(sp)
    6128:	|  |      jsr 12548 <__floatsidf>
    612e:	|  |      addq.l #4,sp
    6130:	|  |      move.l d1,-(sp)
    6132:	|  |      move.l d0,-(sp)
    6134:	|  |      move.l d5,-(sp)
    6136:	|  |      move.l d4,-(sp)
    6138:	|  |      jsr 12370 <__adddf3>
    613e:	|  |      lea 16(sp),sp
    6142:	|  |      move.l d1,-(sp)
    6144:	|  |      move.l d0,-(sp)
    6146:	|  |      jsr 12a98 <sqrt>
    614c:	|  |      addq.l #8,sp
    614e:	|  |      move.l d1,-(sp)
    6150:	|  |      move.l d0,-(sp)
    6152:	|  |      move.l d3,-(sp)
    6154:	|  |      move.l d2,-(sp)
    6156:	|  |      jsr 12370 <__adddf3>
    615c:	|  |      lea 16(sp),sp
    6160:	|  |      move.l d0,d2
    6162:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    6164:	|  |      move.l 80(sp),-(sp)
    6168:	|  |      jsr 12548 <__floatsidf>
    616e:	|  |      addq.l #4,sp
    6170:	|  |      move.l d0,d4
    6172:	|  |      move.l d1,d5
    6174:	|  |      move.l 64(sp),-(sp)
    6178:	|  |      jsr 12548 <__floatsidf>
    617e:	|  |      addq.l #4,sp
    6180:	|  |      move.l d1,-(sp)
    6182:	|  |      move.l d0,-(sp)
    6184:	|  |      move.l d5,-(sp)
    6186:	|  |      move.l d4,-(sp)
    6188:	|  |      jsr 12370 <__adddf3>
    618e:	|  |      lea 16(sp),sp
    6192:	|  |      move.l d1,-(sp)
    6194:	|  |      move.l d0,-(sp)
    6196:	|  |      jsr 12a98 <sqrt>
    619c:	|  |      addq.l #8,sp
    619e:	|  |      move.l d0,d4
    61a0:	|  |      move.l d1,d5
    61a2:	|  |      move.l 72(sp),-(sp)
    61a6:	|  |      jsr 12548 <__floatsidf>
    61ac:	|  |      addq.l #4,sp
    61ae:	|  |      move.l d0,d6
    61b0:	|  |      move.l d1,d7
    61b2:	|  |      move.l 56(sp),-(sp)
    61b6:	|  |      jsr 12548 <__floatsidf>
    61bc:	|  |      addq.l #4,sp
    61be:	|  |      move.l d1,-(sp)
    61c0:	|  |      move.l d0,-(sp)
    61c2:	|  |      move.l d7,-(sp)
    61c4:	|  |      move.l d6,-(sp)
    61c6:	|  |      jsr 12370 <__adddf3>
    61cc:	|  |      lea 16(sp),sp
    61d0:	|  |      move.l d1,-(sp)
    61d2:	|  |      move.l d0,-(sp)
    61d4:	|  |      jsr 12a98 <sqrt>
    61da:	|  |      addq.l #8,sp
    61dc:	|  |      move.l d1,-(sp)
    61de:	|  |      move.l d0,-(sp)
    61e0:	|  |      move.l d5,-(sp)
    61e2:	|  |      move.l d4,-(sp)
    61e4:	|  |      jsr 12370 <__adddf3>
    61ea:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    61ee:	|  |      move.l d1,-(sp)
    61f0:	|  |      move.l d0,-(sp)
    61f2:	|  |      move.l d3,-(sp)
    61f4:	|  |      move.l d2,-(sp)
    61f6:	|  |      jsr 12760 <__ltdf2>
    61fc:	|  |      lea 16(sp),sp
    6200:	|  |      tst.l d0
    6202:	|  |  /-- bge.s 621a <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    6204:	|  |  |   movea.l 152(sp),a0
    6208:	|  |  |   move.l 124(sp),36(a0)
                moveMe -> thisStepY = y3;
    620e:	|  |  |   movea.l 152(sp),a0
    6212:	|  |  |   move.l 120(sp),40(a0)
    6218:	|  +--|-- bra.s 622e <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    621a:	|  |  \-> movea.l 152(sp),a0
    621e:	|  |      move.l 116(sp),36(a0)
                moveMe -> thisStepY = y4;
    6224:	|  |      movea.l 152(sp),a0
    6228:	|  |      move.l 112(sp),40(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    622e:	|  \----> movea.l 152(sp),a0
    6232:	|         move.l 40(a0),d0
    6236:	|         move.l d0,-(sp)
    6238:	|         jsr 12588 <__floatsisf>
    623e:	|         addq.l #4,sp
    6240:	|         move.l d0,d1
    6242:	|         movea.l 152(sp),a0
    6246:	|         move.l 4(a0),d0
    624a:	|         move.l d0,-(sp)
    624c:	|         move.l d1,-(sp)
    624e:	|         jsr 1287c <__subsf3>
    6254:	|         addq.l #8,sp
    6256:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    625a:	|         movea.l 152(sp),a0
    625e:	|         move.l (a0),d2
    6260:	|         movea.l 152(sp),a0
    6264:	|         move.l 36(a0),d0
    6268:	|         move.l d0,-(sp)
    626a:	|         jsr 12588 <__floatsisf>
    6270:	|         addq.l #4,sp
    6272:	|         move.l d0,-(sp)
    6274:	|         move.l d2,-(sp)
    6276:	|         jsr 1287c <__subsf3>
    627c:	|         addq.l #8,sp
    627e:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    6282:	|         clr.l -(sp)
    6284:	|         move.l 52(sp),-(sp)
    6288:	|         jsr 127e4 <__nesf2>
    628e:	|         addq.l #8,sp
    6290:	|         tst.l d0
    6292:	|     /-- bne.s 62a6 <doBorderStuff+0x628>
    6294:	|     |   clr.l -(sp)
    6296:	|     |   move.l 56(sp),-(sp)
    629a:	|     |   jsr 127e4 <__nesf2>
    62a0:	|     |   addq.l #8,sp
    62a2:	|     |   tst.l d0
    62a4:	|  /--|-- beq.s 631c <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    62a6:	|  |  \-> move.l 52(sp),d0
    62aa:	|  |      move.l d0,-(sp)
    62ac:	|  |      move.l d0,-(sp)
    62ae:	|  |      jsr 1233a <__addsf3>
    62b4:	|  |      addq.l #8,sp
    62b6:	|  |      move.l d0,-(sp)
    62b8:	|  |      move.l 52(sp),-(sp)
    62bc:	|  |      jsr 128e8 <atan2f>
    62c2:	|  |      addq.l #8,sp
    62c4:	|  |      move.l d0,-(sp)
    62c6:	|  |      jsr 124a0 <__extendsfdf2>
    62cc:	|  |      addq.l #4,sp
    62ce:	|  |      move.l #-1540411785,-(sp)
    62d4:	|  |      move.l #1078765033,-(sp)
    62da:	|  |      move.l d1,-(sp)
    62dc:	|  |      move.l d0,-(sp)
    62de:	|  |      jsr 125d8 <__muldf3>
    62e4:	|  |      lea 16(sp),sp
    62e8:	|  |      clr.l -(sp)
    62ea:	|  |      move.l #1080459264,-(sp)
    62f0:	|  |      move.l d1,-(sp)
    62f2:	|  |      move.l d0,-(sp)
    62f4:	|  |      jsr 12370 <__adddf3>
    62fa:	|  |      lea 16(sp),sp
    62fe:	|  |      move.l d1,-(sp)
    6300:	|  |      move.l d0,-(sp)
    6302:	|  |      jsr 124e0 <__fixdfsi>
    6308:	|  |      addq.l #8,sp
    630a:	|  |      movea.l 152(sp),a0
    630e:	|  |      move.l d0,84(a0)
        moveMe -> spinning = TRUE;
    6312:	|  |      movea.l 152(sp),a0
    6316:	|  |      move.w #1,54(a0)
    }

    setFrames (moveMe, ANI_WALK);
    631c:	|  \----> pea 1 <_start+0x1>
    6320:	|         move.l 156(sp),-(sp)
    6324:	|         jsr 4f86 <setFrames>
    632a:	|         addq.l #8,sp
    return TRUE;
    632c:	|         moveq #1,d0
}
    632e:	\-------> movem.l (sp)+,d2-d7
    6332:	          lea 124(sp),sp
    6336:	          rts

00006338 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    6338:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    633a:	          move.l 19bdc <allPeople>,(sp)
	while (thisPerson) {
    6340:	      /-- bra.s 6358 <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    6342:	/-----|-> movea.l (sp),a0
    6344:	|     |   movea.l 102(a0),a0
    6348:	|     |   move.l 4(a0),d0
    634c:	|     |   cmp.l 8(sp),d0
    6350:	|  /--|-- beq.s 635e <findPerson+0x26>
		thisPerson = thisPerson -> next;
    6352:	|  |  |   movea.l (sp),a0
    6354:	|  |  |   move.l 24(a0),(sp)
	while (thisPerson) {
    6358:	|  |  \-> tst.l (sp)
    635a:	\--|----- bne.s 6342 <findPerson+0xa>
    635c:	   |  /-- bra.s 6360 <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    635e:	   \--|-> nop
	}
	return thisPerson;
    6360:	      \-> move.l (sp),d0
}
    6362:	          addq.l #4,sp
    6364:	          rts

00006366 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    6366:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    6368:	       move.l 12(sp),-(sp)
    636c:	       jsr 6338 <findPerson>
    6372:	       addq.l #4,sp
    6374:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    6376:	   /-- bne.s 637c <floatCharacter+0x16>
    6378:	   |   clr.w d0
    637a:	/--|-- bra.s 6386 <floatCharacter+0x20>
	moveMe -> floaty = f;
    637c:	|  \-> movea.l (sp),a0
    637e:	|      move.l 8(sp),12(a0)
	return TRUE;
    6384:	|      moveq #1,d0
}
    6386:	\----> addq.l #4,sp
    6388:	       rts

0000638a <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    638a:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    638c:	          tst.l 8(sp)
    6390:	      /-- bne.s 639e <forceWalkingPerson+0x14>
    6392:	      |   tst.l 12(sp)
    6396:	      +-- bne.s 639e <forceWalkingPerson+0x14>
    6398:	      |   clr.w d0
    639a:	/-----|-- bra.w 6430 <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    639e:	|     \-> move.l 16(sp),-(sp)
    63a2:	|         jsr 6338 <findPerson>
    63a8:	|         addq.l #4,sp
    63aa:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    63ac:	|     /-- bne.s 63b2 <forceWalkingPerson+0x28>
    63ae:	|     |   clr.w d0
    63b0:	+-----|-- bra.s 6430 <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    63b2:	|     \-> movea.l (sp),a0
    63b4:	|         move.l 56(a0),d0
    63b8:	|     /-- beq.s 63ca <forceWalkingPerson+0x40>
    63ba:	|     |   movea.l (sp),a0
    63bc:	|     |   move.l 56(a0),d0
    63c0:	|     |   move.l d0,-(sp)
    63c2:	|     |   jsr 1b06 <abortFunction>
    63c8:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    63ca:	|     \-> movea.l (sp),a0
    63cc:	|         move.w #1,52(a0)
    moveMe->continueAfterWalking = NULL;
    63d2:	|         movea.l (sp),a0
    63d4:	|         clr.l 56(a0)
    moveMe->directionWhenDoneWalking = di;
    63d8:	|         movea.l (sp),a0
    63da:	|         move.l 24(sp),98(a0)

    moveMe->walkToX = x;
    63e0:	|         movea.l (sp),a0
    63e2:	|         move.l 8(sp),28(a0)
    moveMe->walkToY = y;
    63e8:	|         movea.l (sp),a0
    63ea:	|         move.l 12(sp),32(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    63f0:	|         movea.l (sp),a0
    63f2:	|         clr.l 44(a0)
    moveMe->walkToPoly = 0;
    63f6:	|         movea.l (sp),a0
    63f8:	|         clr.l 48(a0)

    doBorderStuff(moveMe);
    63fc:	|         move.l (sp),-(sp)
    63fe:	|         jsr 5c7e <doBorderStuff>
    6404:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    6406:	|         pea 1 <_start+0x1>
    640a:	|         move.l 4(sp),-(sp)
    640e:	|         jsr 7ac6 <walkMe>
    6414:	|         addq.l #8,sp
    6416:	|         tst.w d0
    6418:	|     /-- bne.s 6422 <forceWalkingPerson+0x98>
    641a:	|     |   movea.l (sp),a0
    641c:	|     |   move.w 54(a0),d0
    6420:	|  /--|-- beq.s 642e <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    6422:	|  |  \-> movea.l (sp),a0
    6424:	|  |      move.l 20(sp),56(a0)
        return TRUE;
    642a:	|  |      moveq #1,d0
    642c:	+--|----- bra.s 6430 <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    642e:	|  \----> clr.w d0
    }
}
    6430:	\-------> addq.l #4,sp
    6432:	          rts

00006434 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    6434:	                lea -56(sp),sp
    6438:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    643a:	                move.l #320,56(sp)
    6442:	                move.l #200,52(sp)
    644a:	                moveq #-1,d0
    644c:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    6450:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    6458:	                clr.l 44(sp)
    645c:	   /----------- bra.w 6634 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    6460:	/--|----------> movea.l 19c84 <currentFloor>,a0
    6466:	|  |            move.l 12(a0),d1
    646a:	|  |            move.l 44(sp),d0
    646e:	|  |            lsl.l #3,d0
    6470:	|  |            movea.l d1,a0
    6472:	|  |            adda.l d0,a0
    6474:	|  |            move.l (a0),d0
    6476:	|  |            move.l d0,d1
    6478:	|  |            subq.l #1,d1
    647a:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    647e:	|  |            clr.l 40(sp)
    6482:	|  |     /----- bra.w 6612 <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    6486:	|  |  /--|----> movea.l 19c84 <currentFloor>,a0
    648c:	|  |  |  |      move.l 4(a0),d1
    6490:	|  |  |  |      movea.l 19c84 <currentFloor>,a0
    6496:	|  |  |  |      movea.l 12(a0),a0
    649a:	|  |  |  |      move.l 44(sp),d0
    649e:	|  |  |  |      lsl.l #3,d0
    64a0:	|  |  |  |      adda.l d0,a0
    64a2:	|  |  |  |      movea.l 4(a0),a0
    64a6:	|  |  |  |      move.l 40(sp),d0
    64aa:	|  |  |  |      add.l d0,d0
    64ac:	|  |  |  |      add.l d0,d0
    64ae:	|  |  |  |      adda.l d0,a0
    64b0:	|  |  |  |      move.l (a0),d0
    64b2:	|  |  |  |      lsl.l #3,d0
    64b4:	|  |  |  |      movea.l d1,a0
    64b6:	|  |  |  |      adda.l d0,a0
    64b8:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    64bc:	|  |  |  |      movea.l 19c84 <currentFloor>,a0
    64c2:	|  |  |  |      move.l 4(a0),d1
    64c6:	|  |  |  |      movea.l 19c84 <currentFloor>,a0
    64cc:	|  |  |  |      movea.l 12(a0),a0
    64d0:	|  |  |  |      move.l 44(sp),d0
    64d4:	|  |  |  |      lsl.l #3,d0
    64d6:	|  |  |  |      adda.l d0,a0
    64d8:	|  |  |  |      movea.l 4(a0),a0
    64dc:	|  |  |  |      move.l 40(sp),d0
    64e0:	|  |  |  |      add.l d0,d0
    64e2:	|  |  |  |      add.l d0,d0
    64e4:	|  |  |  |      adda.l d0,a0
    64e6:	|  |  |  |      move.l (a0),d0
    64e8:	|  |  |  |      lsl.l #3,d0
    64ea:	|  |  |  |      movea.l d1,a0
    64ec:	|  |  |  |      adda.l d0,a0
    64ee:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    64f4:	|  |  |  |      movea.l 19c84 <currentFloor>,a0
    64fa:	|  |  |  |      move.l 4(a0),d1
    64fe:	|  |  |  |      movea.l 19c84 <currentFloor>,a0
    6504:	|  |  |  |      movea.l 12(a0),a0
    6508:	|  |  |  |      move.l 44(sp),d0
    650c:	|  |  |  |      lsl.l #3,d0
    650e:	|  |  |  |      adda.l d0,a0
    6510:	|  |  |  |      movea.l 4(a0),a0
    6514:	|  |  |  |      move.l 36(sp),d0
    6518:	|  |  |  |      add.l d0,d0
    651a:	|  |  |  |      add.l d0,d0
    651c:	|  |  |  |      adda.l d0,a0
    651e:	|  |  |  |      move.l (a0),d0
    6520:	|  |  |  |      lsl.l #3,d0
    6522:	|  |  |  |      movea.l d1,a0
    6524:	|  |  |  |      adda.l d0,a0
    6526:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    652a:	|  |  |  |      movea.l 19c84 <currentFloor>,a0
    6530:	|  |  |  |      move.l 4(a0),d1
    6534:	|  |  |  |      movea.l 19c84 <currentFloor>,a0
    653a:	|  |  |  |      movea.l 12(a0),a0
    653e:	|  |  |  |      move.l 44(sp),d0
    6542:	|  |  |  |      lsl.l #3,d0
    6544:	|  |  |  |      adda.l d0,a0
    6546:	|  |  |  |      movea.l 4(a0),a0
    654a:	|  |  |  |      move.l 36(sp),d0
    654e:	|  |  |  |      add.l d0,d0
    6550:	|  |  |  |      add.l d0,d0
    6552:	|  |  |  |      adda.l d0,a0
    6554:	|  |  |  |      move.l (a0),d0
    6556:	|  |  |  |      lsl.l #3,d0
    6558:	|  |  |  |      movea.l d1,a0
    655a:	|  |  |  |      adda.l d0,a0
    655c:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    6562:	|  |  |  |      movea.l 68(sp),a0
    6566:	|  |  |  |      move.l (a0),d1
    6568:	|  |  |  |      movea.l 64(sp),a0
    656c:	|  |  |  |      move.l (a0),d0
    656e:	|  |  |  |      move.l d1,-(sp)
    6570:	|  |  |  |      move.l d0,-(sp)
    6572:	|  |  |  |      move.l 24(sp),-(sp)
    6576:	|  |  |  |      move.l 32(sp),-(sp)
    657a:	|  |  |  |      move.l 40(sp),-(sp)
    657e:	|  |  |  |      move.l 48(sp),-(sp)
    6582:	|  |  |  |      lea 28(sp),a0
    6586:	|  |  |  |      move.l a0,-(sp)
    6588:	|  |  |  |      lea 36(sp),a0
    658c:	|  |  |  |      move.l a0,-(sp)
    658e:	|  |  |  |      jsr 10f84 <closestPointOnLine>
    6594:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    6598:	|  |  |  |      movea.l 64(sp),a0
    659c:	|  |  |  |      move.l (a0),d0
    659e:	|  |  |  |      move.l 8(sp),d1
    65a2:	|  |  |  |      move.l d0,d2
    65a4:	|  |  |  |      sub.l d1,d2
    65a6:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    65aa:	|  |  |  |      movea.l 68(sp),a0
    65ae:	|  |  |  |      move.l (a0),d0
    65b0:	|  |  |  |      move.l 4(sp),d1
    65b4:	|  |  |  |      move.l d0,d2
    65b6:	|  |  |  |      sub.l d1,d2
    65b8:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    65bc:	|  |  |  |      move.l 28(sp),-(sp)
    65c0:	|  |  |  |      move.l 32(sp),-(sp)
    65c4:	|  |  |  |      jsr 12ae2 <__mulsi3>
    65ca:	|  |  |  |      addq.l #8,sp
    65cc:	|  |  |  |      move.l d0,d2
    65ce:	|  |  |  |      move.l 24(sp),-(sp)
    65d2:	|  |  |  |      move.l 28(sp),-(sp)
    65d6:	|  |  |  |      jsr 12ae2 <__mulsi3>
    65dc:	|  |  |  |      addq.l #8,sp
    65de:	|  |  |  |      move.l d2,d1
    65e0:	|  |  |  |      add.l d0,d1
    65e2:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    65e6:	|  |  |  |      move.l 12(sp),d2
    65ea:	|  |  |  |      cmp.l 32(sp),d2
    65ee:	|  |  |  |  /-- bge.s 6608 <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    65f0:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    65f6:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    65fc:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    6602:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    6608:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    660e:	|  |  |  |      addq.l #1,40(sp)
    6612:	|  |  |  \----> movea.l 19c84 <currentFloor>,a0
    6618:	|  |  |         move.l 12(a0),d1
    661c:	|  |  |         move.l 44(sp),d0
    6620:	|  |  |         lsl.l #3,d0
    6622:	|  |  |         movea.l d1,a0
    6624:	|  |  |         adda.l d0,a0
    6626:	|  |  |         move.l (a0),d0
    6628:	|  |  |         cmp.l 40(sp),d0
    662c:	|  |  \-------- bgt.w 6486 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    6630:	|  |            addq.l #1,44(sp)
    6634:	|  \----------> movea.l 19c84 <currentFloor>,a0
    663a:	|               move.l 8(a0),d0
    663e:	|               cmp.l 44(sp),d0
    6642:	\-------------- bgt.w 6460 <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    6646:	                moveq #-1,d0
    6648:	                cmp.l 48(sp),d0
    664c:	            /-- bne.s 6652 <handleClosestPoint+0x21e>
    664e:	            |   clr.w d0
    6650:	         /--|-- bra.s 666c <handleClosestPoint+0x238>
	*setX = gotX;
    6652:	         |  \-> movea.l 64(sp),a0
    6656:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    665a:	         |      movea.l 68(sp),a0
    665e:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    6662:	         |      movea.l 72(sp),a0
    6666:	         |      move.l 48(sp),(a0)

	return TRUE;
    666a:	         |      moveq #1,d0
}
    666c:	         \----> move.l (sp)+,d2
    666e:	                lea 56(sp),sp
    6672:	                rts

00006674 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    6674:	clr.l 19bf0 <personRegion+0x10>
	personRegion.sY = 0;
    667a:	clr.l 19bf4 <personRegion+0x14>
	personRegion.di = -1;
    6680:	moveq #-1,d0
    6682:	move.l d0,19bf8 <personRegion+0x18>
	allScreenRegions = NULL;
    6688:	clr.l 19c7c <allScreenRegions>

	return TRUE;
    668e:	moveq #1,d0
}
    6690:	rts

00006692 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    6692:	          subq.l #4,sp
    6694:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    6696:	          tst.l 12(sp)
    669a:	      /-- bne.s 66a2 <jumpPerson+0x10>
    669c:	      |   tst.l 16(sp)
    66a0:	/-----|-- beq.s 6716 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    66a2:	|     \-> move.l 20(sp),-(sp)
    66a6:	|         jsr 6338 <findPerson>
    66ac:	|         addq.l #4,sp
    66ae:	|         move.l d0,4(sp)
    if (!moveMe) return;
    66b2:	|  /----- beq.s 671a <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    66b4:	|  |      movea.l 4(sp),a0
    66b8:	|  |      move.l 56(a0),d0
    66bc:	|  |  /-- beq.s 66d0 <jumpPerson+0x3e>
    66be:	|  |  |   movea.l 4(sp),a0
    66c2:	|  |  |   move.l 56(a0),d0
    66c6:	|  |  |   move.l d0,-(sp)
    66c8:	|  |  |   jsr 1b06 <abortFunction>
    66ce:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    66d0:	|  |  \-> movea.l 4(sp),a0
    66d4:	|  |      clr.l 56(a0)
    moveMe->walking = FALSE;
    66d8:	|  |      movea.l 4(sp),a0
    66dc:	|  |      clr.w 52(a0)
    moveMe->spinning = FALSE;
    66e0:	|  |      movea.l 4(sp),a0
    66e4:	|  |      clr.w 54(a0)
    moveAndScale(moveMe, x, y);
    66e8:	|  |      move.l 16(sp),-(sp)
    66ec:	|  |      jsr 12588 <__floatsisf>
    66f2:	|  |      addq.l #4,sp
    66f4:	|  |      move.l d0,d2
    66f6:	|  |      move.l 12(sp),-(sp)
    66fa:	|  |      jsr 12588 <__floatsisf>
    6700:	|  |      addq.l #4,sp
    6702:	|  |      move.l d2,-(sp)
    6704:	|  |      move.l d0,-(sp)
    6706:	|  |      move.l 12(sp),-(sp)
    670a:	|  |      jsr 6a80 <moveAndScale>
    6710:	|  |      lea 12(sp),sp
    6714:	|  |  /-- bra.s 671c <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    6716:	\--|--|-> nop
    6718:	   |  +-- bra.s 671c <jumpPerson+0x8a>
    if (!moveMe) return;
    671a:	   \--|-> nop
}
    671c:	      \-> move.l (sp)+,d2
    671e:	          addq.l #4,sp
    6720:	          rts

00006722 <killAllPeople>:


void killAllPeople () {
    6722:	          subq.l #8,sp
    6724:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    6726:	   /----- bra.s 6792 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    6728:	/--|----> movea.l 19bdc <allPeople>,a0
    672e:	|  |      move.l 56(a0),d0
    6732:	|  |  /-- beq.s 6748 <killAllPeople+0x26>
    6734:	|  |  |   movea.l 19bdc <allPeople>,a0
    673a:	|  |  |   move.l 56(a0),d0
    673e:	|  |  |   move.l d0,-(sp)
    6740:	|  |  |   jsr 1b06 <abortFunction>
    6746:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    6748:	|  |  \-> movea.l 19bdc <allPeople>,a0
    674e:	|  |      clr.l 56(a0)
		killPeople = allPeople;
    6752:	|  |      move.l 19bdc <allPeople>,8(sp)
		allPeople = allPeople -> next;
    675a:	|  |      movea.l 19bdc <allPeople>,a0
    6760:	|  |      move.l 24(a0),d0
    6764:	|  |      move.l d0,19bdc <allPeople>
		removeObjectType (killPeople -> thisType);
    676a:	|  |      movea.l 8(sp),a0
    676e:	|  |      move.l 102(a0),d0
    6772:	|  |      move.l d0,-(sp)
    6774:	|  |      jsr 92d6 <removeObjectType>
    677a:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    677c:	|  |      move.l 8(sp),4(sp)
    6782:	|  |      move.l 19b8e <SysBase>,d0
    6788:	|  |      movea.l d0,a6
    678a:	|  |      movea.l 4(sp),a1
    678e:	|  |      jsr -690(a6)
	while (allPeople) {
    6792:	|  \----> move.l 19bdc <allPeople>,d0
    6798:	\-------- bne.s 6728 <killAllPeople+0x6>
	}
}
    679a:	          nop
    679c:	          nop
    679e:	          movea.l (sp)+,a6
    67a0:	          addq.l #8,sp
    67a2:	          rts

000067a4 <killMostPeople>:

void killMostPeople() {
    67a4:	          lea -12(sp),sp
    67a8:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    67aa:	          move.l #105436,12(sp)

    while (*lookyHere) {
    67b2:	   /----- bra.w 6838 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    67b6:	/--|----> movea.l 12(sp),a0
    67ba:	|  |      movea.l (a0),a0
    67bc:	|  |      move.l 106(a0),d0
    67c0:	|  |      moveq #32,d1
    67c2:	|  |      and.l d1,d0
    67c4:	|  |  /-- beq.s 67d6 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    67c6:	|  |  |   movea.l 12(sp),a0
    67ca:	|  |  |   move.l (a0),d0
    67cc:	|  |  |   moveq #24,d1
    67ce:	|  |  |   add.l d0,d1
    67d0:	|  |  |   move.l d1,12(sp)
    67d4:	|  +--|-- bra.s 6838 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    67d6:	|  |  \-> movea.l 12(sp),a0
    67da:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    67de:	|  |      movea.l 8(sp),a0
    67e2:	|  |      move.l 24(a0),d0
    67e6:	|  |      movea.l 12(sp),a0
    67ea:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    67ec:	|  |      movea.l 8(sp),a0
    67f0:	|  |      move.l 56(a0),d0
    67f4:	|  |  /-- beq.s 6808 <killMostPeople+0x64>
    67f6:	|  |  |   movea.l 8(sp),a0
    67fa:	|  |  |   move.l 56(a0),d0
    67fe:	|  |  |   move.l d0,-(sp)
    6800:	|  |  |   jsr 1b06 <abortFunction>
    6806:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    6808:	|  |  \-> movea.l 8(sp),a0
    680c:	|  |      clr.l 56(a0)
            removeObjectType(killPeople->thisType);
    6810:	|  |      movea.l 8(sp),a0
    6814:	|  |      move.l 102(a0),d0
    6818:	|  |      move.l d0,-(sp)
    681a:	|  |      jsr 92d6 <removeObjectType>
    6820:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    6822:	|  |      move.l 8(sp),4(sp)
    6828:	|  |      move.l 19b8e <SysBase>,d0
    682e:	|  |      movea.l d0,a6
    6830:	|  |      movea.l 4(sp),a1
    6834:	|  |      jsr -690(a6)
    while (*lookyHere) {
    6838:	|  \----> movea.l 12(sp),a0
    683c:	|         move.l (a0),d0
    683e:	\-------- bne.w 67b6 <killMostPeople+0x12>
        }
    }
}
    6842:	          nop
    6844:	          nop
    6846:	          movea.l (sp)+,a6
    6848:	          lea 12(sp),sp
    684c:	          rts

0000684e <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    684e:	clr.l -(sp)
    6850:	move.l sp,d0
    6852:	addq.l #8,d0
    6854:	move.l d0,-(sp)
    6856:	jsr 4f86 <setFrames>
    685c:	addq.l #8,sp
}
    685e:	nop
    6860:	rts

00006862 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    6862:	          lea -12(sp),sp
    6866:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    6868:	          tst.l 20(sp)
    686c:	      /-- bne.s 687a <makeWalkingPerson+0x18>
    686e:	      |   tst.l 24(sp)
    6872:	      +-- bne.s 687a <makeWalkingPerson+0x18>
    6874:	      |   clr.w d0
    6876:	/-----|-- bra.w 6a12 <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    687a:	|     \-> movea.l 19c84 <currentFloor>,a0
    6880:	|         move.l 8(a0),d0
    6884:	|     /-- bne.s 688c <makeWalkingPerson+0x2a>
    6886:	|     |   clr.w d0
    6888:	+-----|-- bra.w 6a12 <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    688c:	|     \-> move.l 28(sp),-(sp)
    6890:	|         jsr 6338 <findPerson>
    6896:	|         addq.l #4,sp
    6898:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    689c:	|     /-- bne.s 68a4 <makeWalkingPerson+0x42>
    689e:	|     |   clr.w d0
    68a0:	+-----|-- bra.w 6a12 <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    68a4:	|     \-> movea.l 12(sp),a0
    68a8:	|         move.l 56(a0),d0
    68ac:	|     /-- beq.s 68c0 <makeWalkingPerson+0x5e>
    68ae:	|     |   movea.l 12(sp),a0
    68b2:	|     |   move.l 56(a0),d0
    68b6:	|     |   move.l d0,-(sp)
    68b8:	|     |   jsr 1b06 <abortFunction>
    68be:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    68c0:	|     \-> movea.l 12(sp),a0
    68c4:	|         clr.l 56(a0)
	moveMe -> walking = TRUE;
    68c8:	|         movea.l 12(sp),a0
    68cc:	|         move.w #1,52(a0)
	moveMe -> directionWhenDoneWalking = di;
    68d2:	|         movea.l 12(sp),a0
    68d6:	|         move.l 36(sp),98(a0)

	moveMe -> walkToX = x;
    68dc:	|         movea.l 12(sp),a0
    68e0:	|         move.l 20(sp),28(a0)
	moveMe -> walkToY = y;
    68e6:	|         movea.l 12(sp),a0
    68ea:	|         move.l 24(sp),32(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    68f0:	|         move.l 24(sp),-(sp)
    68f4:	|         move.l 24(sp),-(sp)
    68f8:	|         jsr 11486 <inFloor>
    68fe:	|         addq.l #8,sp
    6900:	|         movea.l 12(sp),a0
    6904:	|         move.l d0,48(a0)
	if (moveMe -> walkToPoly == -1) {
    6908:	|         movea.l 12(sp),a0
    690c:	|         move.l 48(a0),d0
    6910:	|         moveq #-1,d1
    6912:	|         cmp.l d0,d1
    6914:	|     /-- bne.s 6944 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    6916:	|     |   movea.w #48,a0
    691a:	|     |   adda.l 12(sp),a0
    691e:	|     |   moveq #32,d1
    6920:	|     |   add.l 12(sp),d1
    6924:	|     |   moveq #28,d0
    6926:	|     |   add.l 12(sp),d0
    692a:	|     |   move.l a0,-(sp)
    692c:	|     |   move.l d1,-(sp)
    692e:	|     |   move.l d0,-(sp)
    6930:	|     |   jsr 6434 <handleClosestPoint>
    6936:	|     |   lea 12(sp),sp
    693a:	|     |   tst.w d0
    693c:	|     +-- bne.s 6944 <makeWalkingPerson+0xe2>
    693e:	|     |   clr.w d0
    6940:	+-----|-- bra.w 6a12 <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    6944:	|     \-> movea.l 12(sp),a0
    6948:	|         move.l 4(a0),d0
    694c:	|         move.l d0,-(sp)
    694e:	|         jsr 12520 <__fixsfsi>
    6954:	|         addq.l #4,sp
    6956:	|         move.l d0,d2
    6958:	|         movea.l 12(sp),a0
    695c:	|         move.l (a0),d0
    695e:	|         move.l d0,-(sp)
    6960:	|         jsr 12520 <__fixsfsi>
    6966:	|         addq.l #4,sp
    6968:	|         move.l d2,-(sp)
    696a:	|         move.l d0,-(sp)
    696c:	|         jsr 11486 <inFloor>
    6972:	|         addq.l #8,sp
    6974:	|         movea.l 12(sp),a0
    6978:	|         move.l d0,44(a0)
	if (moveMe -> inPoly == -1) {
    697c:	|         movea.l 12(sp),a0
    6980:	|         move.l 44(a0),d0
    6984:	|         moveq #-1,d1
    6986:	|         cmp.l d0,d1
    6988:	|     /-- bne.s 69da <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    698a:	|     |   movea.l 12(sp),a0
    698e:	|     |   move.l (a0),d0
    6990:	|     |   move.l d0,-(sp)
    6992:	|     |   jsr 12520 <__fixsfsi>
    6998:	|     |   addq.l #4,sp
    699a:	|     |   move.l d0,8(sp)
    699e:	|     |   movea.l 12(sp),a0
    69a2:	|     |   move.l 4(a0),d0
    69a6:	|     |   move.l d0,-(sp)
    69a8:	|     |   jsr 12520 <__fixsfsi>
    69ae:	|     |   addq.l #4,sp
    69b0:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    69b4:	|     |   moveq #44,d0
    69b6:	|     |   add.l 12(sp),d0
    69ba:	|     |   move.l d0,-(sp)
    69bc:	|     |   lea 8(sp),a0
    69c0:	|     |   move.l a0,-(sp)
    69c2:	|     |   moveq #16,d0
    69c4:	|     |   add.l sp,d0
    69c6:	|     |   move.l d0,-(sp)
    69c8:	|     |   jsr 6434 <handleClosestPoint>
    69ce:	|     |   lea 12(sp),sp
    69d2:	|     |   tst.w d0
    69d4:	|     +-- bne.s 69da <makeWalkingPerson+0x178>
    69d6:	|     |   clr.w d0
    69d8:	+-----|-- bra.s 6a12 <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    69da:	|     \-> move.l 12(sp),-(sp)
    69de:	|         jsr 5c7e <doBorderStuff>
    69e4:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    69e6:	|         clr.l -(sp)
    69e8:	|         move.l 16(sp),-(sp)
    69ec:	|         jsr 7ac6 <walkMe>
    69f2:	|         addq.l #8,sp
    69f4:	|         tst.w d0
    69f6:	|     /-- bne.s 6a02 <makeWalkingPerson+0x1a0>
    69f8:	|     |   movea.l 12(sp),a0
    69fc:	|     |   move.w 54(a0),d0
    6a00:	|  /--|-- beq.s 6a10 <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    6a02:	|  |  \-> movea.l 12(sp),a0
    6a06:	|  |      move.l 32(sp),56(a0)
		return TRUE;
    6a0c:	|  |      moveq #1,d0
    6a0e:	+--|----- bra.s 6a12 <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    6a10:	|  \----> clr.w d0
	}
}
    6a12:	\-------> move.l (sp)+,d2
    6a14:	          lea 12(sp),sp
    6a18:	          rts

00006a1a <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    6a1a:	       lea -16(sp),sp
    6a1e:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    6a20:	       moveq #12,d0
    6a22:	       move.l d0,16(sp)
    6a26:	       clr.l 12(sp)
    6a2a:	       move.l 19b8e <SysBase>,d0
    6a30:	       movea.l d0,a6
    6a32:	       move.l 16(sp),d0
    6a36:	       move.l 12(sp),d1
    6a3a:	       jsr -684(a6)
    6a3e:	       move.l d0,8(sp)
    6a42:	       move.l 8(sp),d0
    6a46:	       move.l d0,4(sp)
    if(newAnim == 0) {
    6a4a:	   /-- bne.s 6a5e <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    6a4c:	   |   pea 15142 <incbin_player_end+0x20e>
    6a52:	   |   jsr 12130 <KPrintF>
    6a58:	   |   addq.l #4,sp
        return NULL;    
    6a5a:	   |   moveq #0,d0
    6a5c:	/--|-- bra.s 6a78 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    6a5e:	|  \-> movea.l 4(sp),a0
    6a62:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    6a64:	|      movea.l 4(sp),a0
    6a68:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    6a6c:	|      movea.l 4(sp),a0
    6a70:	|      clr.l 4(a0)
	return newAnim;
    6a74:	|      move.l 4(sp),d0
}
    6a78:	\----> movea.l (sp)+,a6
    6a7a:	       lea 16(sp),sp
    6a7e:	       rts

00006a80 <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    6a80:	    move.l d2,-(sp)
	me->x = x;
    6a82:	    movea.l 8(sp),a0
    6a86:	    move.l 12(sp),(a0)
	me->y = y;
    6a8a:	    movea.l 8(sp),a0
    6a8e:	    move.l 16(sp),4(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    6a94:	    movea.l 8(sp),a0
    6a98:	    move.l 106(a0),d0
    6a9c:	    moveq #2,d1
    6a9e:	    and.l d1,d0
    6aa0:	/-- bne.s 6af8 <moveAndScale+0x78>
    6aa2:	|   move.w 1808e <scaleDivide>,d0
    6aa8:	+-- beq.s 6af8 <moveAndScale+0x78>
    6aaa:	|   movea.l 8(sp),a0
    6aae:	|   move.l 4(a0),d2
    6ab2:	|   move.w 1808c <scaleHorizon>,d0
    6ab8:	|   movea.w d0,a0
    6aba:	|   move.l a0,-(sp)
    6abc:	|   jsr 12588 <__floatsisf>
    6ac2:	|   addq.l #4,sp
    6ac4:	|   move.l d0,-(sp)
    6ac6:	|   move.l d2,-(sp)
    6ac8:	|   jsr 1287c <__subsf3>
    6ace:	|   addq.l #8,sp
    6ad0:	|   move.l d0,d2
    6ad2:	|   move.w 1808e <scaleDivide>,d0
    6ad8:	|   movea.w d0,a0
    6ada:	|   move.l a0,-(sp)
    6adc:	|   jsr 12588 <__floatsisf>
    6ae2:	|   addq.l #4,sp
    6ae4:	|   move.l d0,-(sp)
    6ae6:	|   move.l d2,-(sp)
    6ae8:	|   jsr 12434 <__divsf3>
    6aee:	|   addq.l #8,sp
    6af0:	|   movea.l 8(sp),a0
    6af4:	|   move.l d0,20(a0)
}
    6af8:	\-> nop
    6afa:	    move.l (sp)+,d2
    6afc:	    rts

00006afe <removeOneCharacter>:

void removeOneCharacter (int i) {
    6afe:	          lea -12(sp),sp
    6b02:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);
    6b04:	          move.l 20(sp),-(sp)
    6b08:	          jsr 6338 <findPerson>
    6b0e:	          addq.l #4,sp
    6b10:	          move.l d0,8(sp)

    if (p) {
    6b14:	/-------- beq.w 6bc0 <removeOneCharacter+0xc2>
        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    6b18:	|         move.l 19c80 <overRegion>,d0
    6b1e:	|         cmpi.l #105440,d0
    6b24:	|     /-- bne.s 6b42 <removeOneCharacter+0x44>
    6b26:	|     |   movea.l 19c80 <overRegion>,a0
    6b2c:	|     |   move.l 28(a0),d1
    6b30:	|     |   movea.l 8(sp),a0
    6b34:	|     |   move.l 102(a0),d0
    6b38:	|     |   cmp.l d1,d0
    6b3a:	|     +-- bne.s 6b42 <removeOneCharacter+0x44>
            overRegion = NULL;
    6b3c:	|     |   clr.l 19c80 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    6b42:	|     \-> movea.l 8(sp),a0
    6b46:	|         move.l 56(a0),d0
    6b4a:	|     /-- beq.s 6b5e <removeOneCharacter+0x60>
    6b4c:	|     |   movea.l 8(sp),a0
    6b50:	|     |   move.l 56(a0),d0
    6b54:	|     |   move.l d0,-(sp)
    6b56:	|     |   jsr 1b06 <abortFunction>
    6b5c:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    6b5e:	|     \-> movea.l 8(sp),a0
    6b62:	|         clr.l 56(a0)
        struct onScreenPerson ** killPeople;

        for (killPeople = &allPeople;
    6b66:	|         move.l #105436,12(sp)
    6b6e:	|     /-- bra.s 6b7e <removeOneCharacter+0x80>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    6b70:	|  /--|-> movea.l 12(sp),a0
    6b74:	|  |  |   move.l (a0),d0
    6b76:	|  |  |   moveq #24,d1
    6b78:	|  |  |   add.l d0,d1
    6b7a:	|  |  |   move.l d1,12(sp)
            *killPeople != p;
    6b7e:	|  |  \-> movea.l 12(sp),a0
    6b82:	|  |      move.l (a0),d0
    6b84:	|  |      cmp.l 8(sp),d0
    6b88:	|  \----- bne.s 6b70 <removeOneCharacter+0x72>

        *killPeople = p->next;
    6b8a:	|         movea.l 8(sp),a0
    6b8e:	|         move.l 24(a0),d0
    6b92:	|         movea.l 12(sp),a0
    6b96:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    6b98:	|         movea.l 8(sp),a0
    6b9c:	|         move.l 102(a0),d0
    6ba0:	|         move.l d0,-(sp)
    6ba2:	|         jsr 92d6 <removeObjectType>
    6ba8:	|         addq.l #4,sp
        FreeVec(p);
    6baa:	|         move.l 8(sp),4(sp)
    6bb0:	|         move.l 19b8e <SysBase>,d0
    6bb6:	|         movea.l d0,a6
    6bb8:	|         movea.l 4(sp),a1
    6bbc:	|         jsr -690(a6)
    }
}
    6bc0:	\-------> nop
    6bc2:	          movea.l (sp)+,a6
    6bc4:	          lea 12(sp),sp
    6bc8:	          rts

00006bca <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    6bca:	       subq.l #8,sp
    6bcc:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    6bce:	       movea.l 16(sp),a0
    6bd2:	       movea.l 68(a0),a0
    6bd6:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    6bdc:	       movea.l 16(sp),a0
    6be0:	       move.l 80(a0),d2
    6be4:	       move.l 4(sp),-(sp)
    6be8:	       pea b4 <_start+0xb4>
    6bec:	       jsr 12b60 <__divsi3>
    6bf2:	       addq.l #8,sp
    6bf4:	       add.l d2,d0
    6bf6:	       move.l d0,d1
    6bf8:	       addi.l #180,d1
    6bfe:	       movea.l 16(sp),a0
    6c02:	       move.l 88(a0),d0
    6c06:	       move.l d1,d2
    6c08:	       add.l d0,d2
    6c0a:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    6c0e:	   /-- bra.s 6c18 <rethinkAngle+0x4e>
    6c10:	/--|-> addi.l #-360,8(sp)
    6c18:	|  \-> cmpi.l #359,8(sp)
    6c20:	\----- bgt.s 6c10 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    6c22:	       move.l 4(sp),-(sp)
    6c26:	       move.l 12(sp),-(sp)
    6c2a:	       jsr 12ae2 <__mulsi3>
    6c30:	       addq.l #8,sp
    6c32:	       pea 168 <decodeFilename+0x50>
    6c36:	       move.l d0,-(sp)
    6c38:	       jsr 12b60 <__divsi3>
    6c3e:	       addq.l #8,sp
    6c40:	       movea.l 16(sp),a0
    6c44:	       move.l d0,94(a0)
}
    6c48:	       nop
    6c4a:	       move.l (sp)+,d2
    6c4c:	       addq.l #8,sp
    6c4e:	       rts

00006c50 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    6c50:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    6c52:	          movea.l 8(sp),a0
    6c56:	          move.l 8(a0),d0
    6c5a:	          move.l 12(sp),-(sp)
    6c5e:	          move.l d0,-(sp)
    6c60:	          jsr 8d0 <put2bytes>
    6c66:	          addq.l #8,sp
	if (p -> numFrames) {
    6c68:	          movea.l 8(sp),a0
    6c6c:	          move.l 8(a0),d0
    6c70:	/-------- beq.w 6d14 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    6c74:	|         movea.l 8(sp),a0
    6c78:	|         movea.l (a0),a0
    6c7a:	|         move.l (a0),d0
    6c7c:	|         move.l 12(sp),-(sp)
    6c80:	|         move.l d0,-(sp)
    6c82:	|         jsr 958 <put4bytes>
    6c88:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    6c8a:	|         clr.l (sp)
    6c8c:	|     /-- bra.s 6d06 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    6c8e:	|  /--|-> movea.l 8(sp),a0
    6c92:	|  |  |   movea.l 4(a0),a0
    6c96:	|  |  |   move.l (sp),d1
    6c98:	|  |  |   move.l d1,d0
    6c9a:	|  |  |   add.l d0,d0
    6c9c:	|  |  |   add.l d1,d0
    6c9e:	|  |  |   add.l d0,d0
    6ca0:	|  |  |   add.l d0,d0
    6ca2:	|  |  |   adda.l d0,a0
    6ca4:	|  |  |   move.l (a0),d0
    6ca6:	|  |  |   move.l 12(sp),-(sp)
    6caa:	|  |  |   move.l d0,-(sp)
    6cac:	|  |  |   jsr 958 <put4bytes>
    6cb2:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    6cb4:	|  |  |   movea.l 8(sp),a0
    6cb8:	|  |  |   movea.l 4(a0),a0
    6cbc:	|  |  |   move.l (sp),d1
    6cbe:	|  |  |   move.l d1,d0
    6cc0:	|  |  |   add.l d0,d0
    6cc2:	|  |  |   add.l d1,d0
    6cc4:	|  |  |   add.l d0,d0
    6cc6:	|  |  |   add.l d0,d0
    6cc8:	|  |  |   adda.l d0,a0
    6cca:	|  |  |   move.l 4(a0),d0
    6cce:	|  |  |   move.l 12(sp),-(sp)
    6cd2:	|  |  |   move.l d0,-(sp)
    6cd4:	|  |  |   jsr 958 <put4bytes>
    6cda:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    6cdc:	|  |  |   movea.l 8(sp),a0
    6ce0:	|  |  |   movea.l 4(a0),a0
    6ce4:	|  |  |   move.l (sp),d1
    6ce6:	|  |  |   move.l d1,d0
    6ce8:	|  |  |   add.l d0,d0
    6cea:	|  |  |   add.l d1,d0
    6cec:	|  |  |   add.l d0,d0
    6cee:	|  |  |   add.l d0,d0
    6cf0:	|  |  |   adda.l d0,a0
    6cf2:	|  |  |   move.l 8(a0),d0
    6cf6:	|  |  |   move.l 12(sp),-(sp)
    6cfa:	|  |  |   move.l d0,-(sp)
    6cfc:	|  |  |   jsr 958 <put4bytes>
    6d02:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    6d04:	|  |  |   addq.l #1,(sp)
    6d06:	|  |  \-> movea.l 8(sp),a0
    6d0a:	|  |      move.l 8(a0),d0
    6d0e:	|  |      cmp.l (sp),d0
    6d10:	|  \----- bgt.w 6c8e <saveAnim+0x3e>
		}
	}
	return TRUE;
    6d14:	\-------> moveq #1,d0
}
    6d16:	          addq.l #4,sp
    6d18:	          rts

00006d1a <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    6d1a:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    6d1c:	             movea.l 8(sp),a0
    6d20:	             move.l 4(a0),d0
    6d24:	             move.l 12(sp),-(sp)
    6d28:	             move.l d0,-(sp)
    6d2a:	             jsr 8d0 <put2bytes>
    6d30:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    6d32:	             clr.l (sp)
    6d34:	   /-------- bra.s 6d60 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    6d36:	/--|-------> movea.l 8(sp),a0
    6d3a:	|  |         move.l (a0),d1
    6d3c:	|  |         move.l (sp),d0
    6d3e:	|  |         add.l d0,d0
    6d40:	|  |         add.l d0,d0
    6d42:	|  |         movea.l d1,a0
    6d44:	|  |         adda.l d0,a0
    6d46:	|  |         move.l (a0),d0
    6d48:	|  |         move.l 12(sp),-(sp)
    6d4c:	|  |         move.l d0,-(sp)
    6d4e:	|  |         jsr 6c50 <saveAnim>
    6d54:	|  |         addq.l #8,sp
    6d56:	|  |         tst.w d0
    6d58:	|  |     /-- bne.s 6d5e <saveCostume+0x44>
    6d5a:	|  |     |   clr.w d0
    6d5c:	|  |  /--|-- bra.s 6d74 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    6d5e:	|  |  |  \-> addq.l #1,(sp)
    6d60:	|  \--|----> movea.l 8(sp),a0
    6d64:	|     |      move.l 4(a0),d1
    6d68:	|     |      move.l d1,d0
    6d6a:	|     |      add.l d0,d0
    6d6c:	|     |      add.l d1,d0
    6d6e:	|     |      cmp.l (sp),d0
    6d70:	\-----|----- bgt.s 6d36 <saveCostume+0x1c>
	}

	return TRUE;
    6d72:	      |      moveq #1,d0
}
    6d74:	      \----> addq.l #4,sp
    6d76:	             rts

00006d78 <savePeople>:

BOOL savePeople (BPTR fp) {
    6d78:	             lea -144(sp),sp
    6d7c:	             move.l a6,-(sp)
    6d7e:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    6d80:	             move.l 19bdc <allPeople>,148(sp)
	int countPeople = 0, a;
    6d88:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    6d8c:	             move.w 1808c <scaleHorizon>,d0
    6d92:	             movea.w d0,a0
    6d94:	             move.l 156(sp),-(sp)
    6d98:	             move.l a0,-(sp)
    6d9a:	             jsr a9c <putSigned>
    6da0:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    6da2:	             move.w 1808e <scaleDivide>,d0
    6da8:	             movea.w d0,a0
    6daa:	             move.l 156(sp),-(sp)
    6dae:	             move.l a0,-(sp)
    6db0:	             jsr a9c <putSigned>
    6db6:	             addq.l #8,sp

	while (me) {
    6db8:	         /-- bra.s 6dc8 <savePeople+0x50>
		countPeople ++;
    6dba:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    6dbe:	      |  |   movea.l 148(sp),a0
    6dc2:	      |  |   move.l 24(a0),148(sp)
	while (me) {
    6dc8:	      |  \-> tst.l 148(sp)
    6dcc:	      \----- bne.s 6dba <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    6dce:	             move.l 156(sp),-(sp)
    6dd2:	             move.l 148(sp),-(sp)
    6dd6:	             jsr 8d0 <put2bytes>
    6ddc:	             addq.l #8,sp

	me = allPeople;
    6dde:	             move.l 19bdc <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    6de6:	             clr.l 140(sp)
    6dea:	   /-------- bra.w 7242 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    6dee:	/--|-------> movea.l 148(sp),a0
    6df2:	|  |         move.l (a0),d0
    6df4:	|  |         move.l 156(sp),-(sp)
    6df8:	|  |         move.l d0,-(sp)
    6dfa:	|  |         jsr a46 <putFloat>
    6e00:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    6e02:	|  |         movea.l 148(sp),a0
    6e06:	|  |         move.l 4(a0),d0
    6e0a:	|  |         move.l 156(sp),-(sp)
    6e0e:	|  |         move.l d0,-(sp)
    6e10:	|  |         jsr a46 <putFloat>
    6e16:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    6e18:	|  |         movea.l 148(sp),a0
    6e1c:	|  |         move.l 68(a0),d0
    6e20:	|  |         move.l 156(sp),-(sp)
    6e24:	|  |         move.l d0,-(sp)
    6e26:	|  |         jsr 6d1a <saveCostume>
    6e2c:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    6e2e:	|  |         movea.l 148(sp),a0
    6e32:	|  |         move.l 60(a0),d0
    6e36:	|  |         move.l 156(sp),-(sp)
    6e3a:	|  |         move.l d0,-(sp)
    6e3c:	|  |         jsr 6c50 <saveAnim>
    6e42:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    6e44:	|  |         move.l 156(sp),136(sp)
    6e4a:	|  |         movea.l 148(sp),a0
    6e4e:	|  |         move.l 60(a0),d1
    6e52:	|  |         movea.l 148(sp),a0
    6e56:	|  |         move.l 64(a0),d0
    6e5a:	|  |         cmp.l d1,d0
    6e5c:	|  |         seq d0
    6e5e:	|  |         neg.b d0
    6e60:	|  |         move.b d0,d0
    6e62:	|  |         andi.l #255,d0
    6e68:	|  |         move.l d0,132(sp)
    6e6c:	|  |         move.l 19b96 <DOSBase>,d0
    6e72:	|  |         movea.l d0,a6
    6e74:	|  |         move.l 136(sp),d1
    6e78:	|  |         move.l 132(sp),d2
    6e7c:	|  |         jsr -312(a6)
    6e80:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    6e84:	|  |         movea.l 148(sp),a0
    6e88:	|  |         move.l 20(a0),d0
    6e8c:	|  |         move.l 156(sp),-(sp)
    6e90:	|  |         move.l d0,-(sp)
    6e92:	|  |         jsr a46 <putFloat>
    6e98:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    6e9a:	|  |         movea.l 148(sp),a0
    6e9e:	|  |         move.l 106(a0),d0
    6ea2:	|  |         move.l 156(sp),-(sp)
    6ea6:	|  |         move.l d0,-(sp)
    6ea8:	|  |         jsr 8d0 <put2bytes>
    6eae:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    6eb0:	|  |         movea.l 148(sp),a0
    6eb4:	|  |         move.l 8(a0),d0
    6eb8:	|  |         move.l 156(sp),-(sp)
    6ebc:	|  |         move.l d0,-(sp)
    6ebe:	|  |         jsr 8d0 <put2bytes>
    6ec4:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    6ec6:	|  |         movea.l 148(sp),a0
    6eca:	|  |         move.l 28(a0),d0
    6ece:	|  |         move.l 156(sp),-(sp)
    6ed2:	|  |         move.l d0,-(sp)
    6ed4:	|  |         jsr 8d0 <put2bytes>
    6eda:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    6edc:	|  |         movea.l 148(sp),a0
    6ee0:	|  |         move.l 32(a0),d0
    6ee4:	|  |         move.l 156(sp),-(sp)
    6ee8:	|  |         move.l d0,-(sp)
    6eea:	|  |         jsr 8d0 <put2bytes>
    6ef0:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    6ef2:	|  |         movea.l 148(sp),a0
    6ef6:	|  |         move.l 36(a0),d0
    6efa:	|  |         move.l 156(sp),-(sp)
    6efe:	|  |         move.l d0,-(sp)
    6f00:	|  |         jsr 8d0 <put2bytes>
    6f06:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    6f08:	|  |         movea.l 148(sp),a0
    6f0c:	|  |         move.l 40(a0),d0
    6f10:	|  |         move.l 156(sp),-(sp)
    6f14:	|  |         move.l d0,-(sp)
    6f16:	|  |         jsr 8d0 <put2bytes>
    6f1c:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    6f1e:	|  |         movea.l 148(sp),a0
    6f22:	|  |         move.l 72(a0),d0
    6f26:	|  |         move.l 156(sp),-(sp)
    6f2a:	|  |         move.l d0,-(sp)
    6f2c:	|  |         jsr 8d0 <put2bytes>
    6f32:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    6f34:	|  |         movea.l 148(sp),a0
    6f38:	|  |         move.l 76(a0),d0
    6f3c:	|  |         move.l 156(sp),-(sp)
    6f40:	|  |         move.l d0,-(sp)
    6f42:	|  |         jsr 8d0 <put2bytes>
    6f48:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    6f4a:	|  |         movea.l 148(sp),a0
    6f4e:	|  |         move.l 16(a0),d0
    6f52:	|  |         move.l 156(sp),-(sp)
    6f56:	|  |         move.l d0,-(sp)
    6f58:	|  |         jsr 8d0 <put2bytes>
    6f5e:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    6f60:	|  |         movea.l 148(sp),a0
    6f64:	|  |         move.l 110(a0),d0
    6f68:	|  |         move.l 156(sp),-(sp)
    6f6c:	|  |         move.l d0,-(sp)
    6f6e:	|  |         jsr 8d0 <put2bytes>
    6f74:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    6f76:	|  |         movea.l 148(sp),a0
    6f7a:	|  |         move.l 12(a0),d0
    6f7e:	|  |         move.l d0,d0
    6f80:	|  |         movea.w d0,a0
    6f82:	|  |         move.l 156(sp),-(sp)
    6f86:	|  |         move.l a0,-(sp)
    6f88:	|  |         jsr a9c <putSigned>
    6f8e:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    6f90:	|  |         move.l 156(sp),124(sp)
    6f96:	|  |         movea.l 148(sp),a0
    6f9a:	|  |         move.w 92(a0),d0
    6f9e:	|  |         movea.w d0,a0
    6fa0:	|  |         move.l a0,120(sp)
    6fa4:	|  |         move.l 19b96 <DOSBase>,d0
    6faa:	|  |         movea.l d0,a6
    6fac:	|  |         move.l 124(sp),d1
    6fb0:	|  |         move.l 120(sp),d2
    6fb4:	|  |         jsr -312(a6)
    6fb8:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    6fbc:	|  |         move.l 156(sp),112(sp)
    6fc2:	|  |         movea.l 148(sp),a0
    6fc6:	|  |         move.w 52(a0),d0
    6fca:	|  |         movea.w d0,a0
    6fcc:	|  |         move.l a0,108(sp)
    6fd0:	|  |         move.l 19b96 <DOSBase>,d0
    6fd6:	|  |         movea.l d0,a6
    6fd8:	|  |         move.l 112(sp),d1
    6fdc:	|  |         move.l 108(sp),d2
    6fe0:	|  |         jsr -312(a6)
    6fe4:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    6fe8:	|  |         move.l 156(sp),100(sp)
    6fee:	|  |         movea.l 148(sp),a0
    6ff2:	|  |         move.w 54(a0),d0
    6ff6:	|  |         movea.w d0,a0
    6ff8:	|  |         move.l a0,96(sp)
    6ffc:	|  |         move.l 19b96 <DOSBase>,d0
    7002:	|  |         movea.l d0,a6
    7004:	|  |         move.l 100(sp),d1
    7008:	|  |         move.l 96(sp),d2
    700c:	|  |         jsr -312(a6)
    7010:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    7014:	|  |         movea.l 148(sp),a0
    7018:	|  |         move.l 56(a0),d0
    701c:	|  |  /----- beq.s 705a <savePeople+0x2e2>
			FPutC (fp, 1);
    701e:	|  |  |      move.l 156(sp),76(sp)
    7024:	|  |  |      moveq #1,d0
    7026:	|  |  |      move.l d0,72(sp)
    702a:	|  |  |      move.l 19b96 <DOSBase>,d0
    7030:	|  |  |      movea.l d0,a6
    7032:	|  |  |      move.l 76(sp),d1
    7036:	|  |  |      move.l 72(sp),d2
    703a:	|  |  |      jsr -312(a6)
    703e:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    7042:	|  |  |      movea.l 148(sp),a0
    7046:	|  |  |      move.l 56(a0),d0
    704a:	|  |  |      move.l 156(sp),-(sp)
    704e:	|  |  |      move.l d0,-(sp)
    7050:	|  |  |      jsr 81e8 <saveFunction>
    7056:	|  |  |      addq.l #8,sp
    7058:	|  |  |  /-- bra.s 707e <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    705a:	|  |  \--|-> move.l 156(sp),88(sp)
    7060:	|  |     |   moveq #1,d0
    7062:	|  |     |   move.l d0,84(sp)
    7066:	|  |     |   move.l 19b96 <DOSBase>,d0
    706c:	|  |     |   movea.l d0,a6
    706e:	|  |     |   move.l 88(sp),d1
    7072:	|  |     |   move.l 84(sp),d2
    7076:	|  |     |   jsr -312(a6)
    707a:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    707e:	|  |     \-> movea.l 148(sp),a0
    7082:	|  |         move.l 94(a0),d0
    7086:	|  |         move.l 156(sp),-(sp)
    708a:	|  |         move.l d0,-(sp)
    708c:	|  |         jsr 8d0 <put2bytes>
    7092:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    7094:	|  |         movea.l 148(sp),a0
    7098:	|  |         move.l 80(a0),d0
    709c:	|  |         move.l 156(sp),-(sp)
    70a0:	|  |         move.l d0,-(sp)
    70a2:	|  |         jsr 8d0 <put2bytes>
    70a8:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    70aa:	|  |         movea.l 148(sp),a0
    70ae:	|  |         move.l 88(a0),d0
    70b2:	|  |         move.l 156(sp),-(sp)
    70b6:	|  |         move.l d0,-(sp)
    70b8:	|  |         jsr 8d0 <put2bytes>
    70be:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    70c0:	|  |         movea.l 148(sp),a0
    70c4:	|  |         move.l 84(a0),d0
    70c8:	|  |         move.l 156(sp),-(sp)
    70cc:	|  |         move.l d0,-(sp)
    70ce:	|  |         jsr 8d0 <put2bytes>
    70d4:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    70d6:	|  |         movea.l 148(sp),a0
    70da:	|  |         move.l 98(a0),d0
    70de:	|  |         move.l d0,d0
    70e0:	|  |         movea.w d0,a0
    70e2:	|  |         move.l 156(sp),-(sp)
    70e6:	|  |         move.l a0,-(sp)
    70e8:	|  |         jsr a9c <putSigned>
    70ee:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    70f0:	|  |         movea.l 148(sp),a0
    70f4:	|  |         move.l 44(a0),d0
    70f8:	|  |         move.l d0,d0
    70fa:	|  |         movea.w d0,a0
    70fc:	|  |         move.l 156(sp),-(sp)
    7100:	|  |         move.l a0,-(sp)
    7102:	|  |         jsr a9c <putSigned>
    7108:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    710a:	|  |         movea.l 148(sp),a0
    710e:	|  |         move.l 48(a0),d0
    7112:	|  |         move.l d0,d0
    7114:	|  |         movea.w d0,a0
    7116:	|  |         move.l 156(sp),-(sp)
    711a:	|  |         move.l a0,-(sp)
    711c:	|  |         jsr a9c <putSigned>
    7122:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    7124:	|  |         move.l 156(sp),64(sp)
    712a:	|  |         movea.l 148(sp),a0
    712e:	|  |         move.b 114(a0),d0
    7132:	|  |         move.b d0,d0
    7134:	|  |         andi.l #255,d0
    713a:	|  |         move.l d0,60(sp)
    713e:	|  |         move.l 19b96 <DOSBase>,d0
    7144:	|  |         movea.l d0,a6
    7146:	|  |         move.l 64(sp),d1
    714a:	|  |         move.l 60(sp),d2
    714e:	|  |         jsr -312(a6)
    7152:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    7156:	|  |         move.l 156(sp),52(sp)
    715c:	|  |         movea.l 148(sp),a0
    7160:	|  |         move.b 115(a0),d0
    7164:	|  |         move.b d0,d0
    7166:	|  |         andi.l #255,d0
    716c:	|  |         move.l d0,48(sp)
    7170:	|  |         move.l 19b96 <DOSBase>,d0
    7176:	|  |         movea.l d0,a6
    7178:	|  |         move.l 52(sp),d1
    717c:	|  |         move.l 48(sp),d2
    7180:	|  |         jsr -312(a6)
    7184:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    7188:	|  |         move.l 156(sp),40(sp)
    718e:	|  |         movea.l 148(sp),a0
    7192:	|  |         move.b 116(a0),d0
    7196:	|  |         move.b d0,d0
    7198:	|  |         andi.l #255,d0
    719e:	|  |         move.l d0,36(sp)
    71a2:	|  |         move.l 19b96 <DOSBase>,d0
    71a8:	|  |         movea.l d0,a6
    71aa:	|  |         move.l 40(sp),d1
    71ae:	|  |         move.l 36(sp),d2
    71b2:	|  |         jsr -312(a6)
    71b6:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    71ba:	|  |         move.l 156(sp),28(sp)
    71c0:	|  |         movea.l 148(sp),a0
    71c4:	|  |         move.b 117(a0),d0
    71c8:	|  |         move.b d0,d0
    71ca:	|  |         andi.l #255,d0
    71d0:	|  |         move.l d0,24(sp)
    71d4:	|  |         move.l 19b96 <DOSBase>,d0
    71da:	|  |         movea.l d0,a6
    71dc:	|  |         move.l 28(sp),d1
    71e0:	|  |         move.l 24(sp),d2
    71e4:	|  |         jsr -312(a6)
    71e8:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    71ec:	|  |         move.l 156(sp),16(sp)
    71f2:	|  |         movea.l 148(sp),a0
    71f6:	|  |         move.b 118(a0),d0
    71fa:	|  |         move.b d0,d0
    71fc:	|  |         andi.l #255,d0
    7202:	|  |         move.l d0,12(sp)
    7206:	|  |         move.l 19b96 <DOSBase>,d0
    720c:	|  |         movea.l d0,a6
    720e:	|  |         move.l 16(sp),d1
    7212:	|  |         move.l 12(sp),d2
    7216:	|  |         jsr -312(a6)
    721a:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    721e:	|  |         movea.l 148(sp),a0
    7222:	|  |         move.l 102(a0),d0
    7226:	|  |         move.l 156(sp),-(sp)
    722a:	|  |         move.l d0,-(sp)
    722c:	|  |         jsr 9376 <saveObjectRef>
    7232:	|  |         addq.l #8,sp

		me = me -> next;
    7234:	|  |         movea.l 148(sp),a0
    7238:	|  |         move.l 24(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    723e:	|  |         addq.l #1,140(sp)
    7242:	|  \-------> movea.l 140(sp),a0
    7246:	|            cmpa.l 144(sp),a0
    724a:	\----------- blt.w 6dee <savePeople+0x76>
	}
	return TRUE;
    724e:	             moveq #1,d0
}
    7250:	             move.l (sp)+,d2
    7252:	             movea.l (sp)+,a6
    7254:	             lea 144(sp),sp
    7258:	             rts

0000725a <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    725a:	movea.l 4(sp),a0
    725e:	move.l 8(sp),(a0)
}
    7262:	nop
    7264:	rts

00007266 <setDrawMode>:


void setDrawMode (int h, int ob) {
    7266:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    7268:	       move.l 12(sp),-(sp)
    726c:	       jsr 6338 <findPerson>
    7272:	       addq.l #4,sp
    7274:	       move.l d0,(sp)
	if (! moveMe) return;
    7276:	/----- beq.s 728a <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    7278:	|      move.l 8(sp),-(sp)
    727c:	|      move.l 4(sp),-(sp)
    7280:	|      jsr 7290 <setMyDrawMode>
    7286:	|      addq.l #8,sp
    7288:	|  /-- bra.s 728c <setDrawMode+0x26>
	if (! moveMe) return;
    728a:	\--|-> nop
}
    728c:	   \-> addq.l #4,sp
    728e:	       rts

00007290 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    7290:	       moveq #19,d0
    7292:	       cmp.l 8(sp),d0
    7296:	/----- bcs.w 776e <setMyDrawMode+0x4de>
    729a:	|      move.l 8(sp),d0
    729e:	|      add.l d0,d0
    72a0:	|      movea.l d0,a0
    72a2:	|      adda.l #29358,a0
    72a8:	|      move.w (a0),d0
    72aa:	|      jmp (72ae <setMyDrawMode+0x1e>,pc,d0.w)
    72ae:	|      .short 0x04c0
    72b0:	|      ori.l #6684712,-(a4)
    72b6:	|      btst d0,-(a0)
    72b8:	|      bchg d0,(a6)+
    72ba:	|      bclr d0,(a4)+
    72bc:	|      bset d0,(a2)+
    72be:	|      andi.b #84,(a6)
    72c2:	|      andi.l #55575312,(a2)
    72c8:	|      .short 0x02d0
    72ca:	|      bclr d1,(a0)
    72cc:	|      .short 0x044a
    72ce:	|      .short 0x040c
    72d0:	|      movep.l d1,1158(a6)
    72d4:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    72d6:	|      movea.l 4(sp),a0
    72da:	|      clr.b 116(a0)
    72de:	|      movea.l 4(sp),a0
    72e2:	|      move.b 116(a0),d0
    72e6:	|      movea.l 4(sp),a0
    72ea:	|      move.b d0,115(a0)
    72ee:	|      movea.l 4(sp),a0
    72f2:	|      move.b 115(a0),d0
    72f6:	|      movea.l 4(sp),a0
    72fa:	|      move.b d0,114(a0)
			moveMe->colourmix = 0;
    72fe:	|      movea.l 4(sp),a0
    7302:	|      clr.b 117(a0)
			moveMe->transparency = 64;
    7306:	|      movea.l 4(sp),a0
    730a:	|      move.b #64,118(a0)
			break;
    7310:	|  /-- bra.w 77a8 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7314:	|  |   movea.l 4(sp),a0
    7318:	|  |   clr.b 116(a0)
    731c:	|  |   movea.l 4(sp),a0
    7320:	|  |   move.b 116(a0),d0
    7324:	|  |   movea.l 4(sp),a0
    7328:	|  |   move.b d0,115(a0)
    732c:	|  |   movea.l 4(sp),a0
    7330:	|  |   move.b 115(a0),d0
    7334:	|  |   movea.l 4(sp),a0
    7338:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    733c:	|  |   movea.l 4(sp),a0
    7340:	|  |   clr.b 117(a0)
			moveMe->transparency = 128;
    7344:	|  |   movea.l 4(sp),a0
    7348:	|  |   move.b #-128,118(a0)
			break;
    734e:	|  +-- bra.w 77a8 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7352:	|  |   movea.l 4(sp),a0
    7356:	|  |   clr.b 116(a0)
    735a:	|  |   movea.l 4(sp),a0
    735e:	|  |   move.b 116(a0),d0
    7362:	|  |   movea.l 4(sp),a0
    7366:	|  |   move.b d0,115(a0)
    736a:	|  |   movea.l 4(sp),a0
    736e:	|  |   move.b 115(a0),d0
    7372:	|  |   movea.l 4(sp),a0
    7376:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    737a:	|  |   movea.l 4(sp),a0
    737e:	|  |   clr.b 117(a0)
			moveMe->transparency = 192;
    7382:	|  |   movea.l 4(sp),a0
    7386:	|  |   move.b #-64,118(a0)
			break;
    738c:	|  +-- bra.w 77a8 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7390:	|  |   movea.l 4(sp),a0
    7394:	|  |   clr.b 116(a0)
    7398:	|  |   movea.l 4(sp),a0
    739c:	|  |   move.b 116(a0),d0
    73a0:	|  |   movea.l 4(sp),a0
    73a4:	|  |   move.b d0,115(a0)
    73a8:	|  |   movea.l 4(sp),a0
    73ac:	|  |   move.b 115(a0),d0
    73b0:	|  |   movea.l 4(sp),a0
    73b4:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    73b8:	|  |   movea.l 4(sp),a0
    73bc:	|  |   clr.b 117(a0)
			moveMe->transparency = 254;
    73c0:	|  |   movea.l 4(sp),a0
    73c4:	|  |   move.b #-2,118(a0)
			break;
    73ca:	|  +-- bra.w 77a8 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    73ce:	|  |   movea.l 4(sp),a0
    73d2:	|  |   clr.b 116(a0)
    73d6:	|  |   movea.l 4(sp),a0
    73da:	|  |   move.b 116(a0),d0
    73de:	|  |   movea.l 4(sp),a0
    73e2:	|  |   move.b d0,115(a0)
    73e6:	|  |   movea.l 4(sp),a0
    73ea:	|  |   move.b 115(a0),d0
    73ee:	|  |   movea.l 4(sp),a0
    73f2:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    73f6:	|  |   movea.l 4(sp),a0
    73fa:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    7400:	|  |   movea.l 4(sp),a0
    7404:	|  |   clr.b 118(a0)
			break;
    7408:	|  +-- bra.w 77a8 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    740c:	|  |   movea.l 4(sp),a0
    7410:	|  |   clr.b 116(a0)
    7414:	|  |   movea.l 4(sp),a0
    7418:	|  |   move.b 116(a0),d0
    741c:	|  |   movea.l 4(sp),a0
    7420:	|  |   move.b d0,115(a0)
    7424:	|  |   movea.l 4(sp),a0
    7428:	|  |   move.b 115(a0),d0
    742c:	|  |   movea.l 4(sp),a0
    7430:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    7434:	|  |   movea.l 4(sp),a0
    7438:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    743e:	|  |   movea.l 4(sp),a0
    7442:	|  |   clr.b 118(a0)
			break;
    7446:	|  +-- bra.w 77a8 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    744a:	|  |   movea.l 4(sp),a0
    744e:	|  |   clr.b 116(a0)
    7452:	|  |   movea.l 4(sp),a0
    7456:	|  |   move.b 116(a0),d0
    745a:	|  |   movea.l 4(sp),a0
    745e:	|  |   move.b d0,115(a0)
    7462:	|  |   movea.l 4(sp),a0
    7466:	|  |   move.b 115(a0),d0
    746a:	|  |   movea.l 4(sp),a0
    746e:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    7472:	|  |   movea.l 4(sp),a0
    7476:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    747c:	|  |   movea.l 4(sp),a0
    7480:	|  |   clr.b 118(a0)
			break;
    7484:	|  +-- bra.w 77a8 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7488:	|  |   movea.l 4(sp),a0
    748c:	|  |   clr.b 116(a0)
    7490:	|  |   movea.l 4(sp),a0
    7494:	|  |   move.b 116(a0),d0
    7498:	|  |   movea.l 4(sp),a0
    749c:	|  |   move.b d0,115(a0)
    74a0:	|  |   movea.l 4(sp),a0
    74a4:	|  |   move.b 115(a0),d0
    74a8:	|  |   movea.l 4(sp),a0
    74ac:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    74b0:	|  |   movea.l 4(sp),a0
    74b4:	|  |   st 117(a0)
			moveMe->transparency = 0;
    74b8:	|  |   movea.l 4(sp),a0
    74bc:	|  |   clr.b 118(a0)
			break;
    74c0:	|  +-- bra.w 77a8 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    74c4:	|  |   movea.l 4(sp),a0
    74c8:	|  |   clr.b 116(a0)
    74cc:	|  |   movea.l 4(sp),a0
    74d0:	|  |   move.b 116(a0),d0
    74d4:	|  |   movea.l 4(sp),a0
    74d8:	|  |   move.b d0,115(a0)
    74dc:	|  |   movea.l 4(sp),a0
    74e0:	|  |   move.b 115(a0),d0
    74e4:	|  |   movea.l 4(sp),a0
    74e8:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    74ec:	|  |   movea.l 4(sp),a0
    74f0:	|  |   st 117(a0)
			moveMe->transparency = 64;
    74f4:	|  |   movea.l 4(sp),a0
    74f8:	|  |   move.b #64,118(a0)
			break;
    74fe:	|  +-- bra.w 77a8 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7502:	|  |   movea.l 4(sp),a0
    7506:	|  |   clr.b 116(a0)
    750a:	|  |   movea.l 4(sp),a0
    750e:	|  |   move.b 116(a0),d0
    7512:	|  |   movea.l 4(sp),a0
    7516:	|  |   move.b d0,115(a0)
    751a:	|  |   movea.l 4(sp),a0
    751e:	|  |   move.b 115(a0),d0
    7522:	|  |   movea.l 4(sp),a0
    7526:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    752a:	|  |   movea.l 4(sp),a0
    752e:	|  |   st 117(a0)
			moveMe->transparency = 128;
    7532:	|  |   movea.l 4(sp),a0
    7536:	|  |   move.b #-128,118(a0)
			break;
    753c:	|  +-- bra.w 77a8 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7540:	|  |   movea.l 4(sp),a0
    7544:	|  |   clr.b 116(a0)
    7548:	|  |   movea.l 4(sp),a0
    754c:	|  |   move.b 116(a0),d0
    7550:	|  |   movea.l 4(sp),a0
    7554:	|  |   move.b d0,115(a0)
    7558:	|  |   movea.l 4(sp),a0
    755c:	|  |   move.b 115(a0),d0
    7560:	|  |   movea.l 4(sp),a0
    7564:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    7568:	|  |   movea.l 4(sp),a0
    756c:	|  |   st 117(a0)
			moveMe->transparency = 192;
    7570:	|  |   movea.l 4(sp),a0
    7574:	|  |   move.b #-64,118(a0)
			break;
    757a:	|  +-- bra.w 77a8 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    757e:	|  |   movea.l 4(sp),a0
    7582:	|  |   move.b #-128,116(a0)
    7588:	|  |   movea.l 4(sp),a0
    758c:	|  |   move.b 116(a0),d0
    7590:	|  |   movea.l 4(sp),a0
    7594:	|  |   move.b d0,115(a0)
    7598:	|  |   movea.l 4(sp),a0
    759c:	|  |   move.b 115(a0),d0
    75a0:	|  |   movea.l 4(sp),a0
    75a4:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    75a8:	|  |   movea.l 4(sp),a0
    75ac:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    75b2:	|  |   movea.l 4(sp),a0
    75b6:	|  |   clr.b 118(a0)
			break;
    75ba:	|  +-- bra.w 77a8 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    75be:	|  |   movea.l 4(sp),a0
    75c2:	|  |   move.b #-128,116(a0)
    75c8:	|  |   movea.l 4(sp),a0
    75cc:	|  |   move.b 116(a0),d0
    75d0:	|  |   movea.l 4(sp),a0
    75d4:	|  |   move.b d0,115(a0)
    75d8:	|  |   movea.l 4(sp),a0
    75dc:	|  |   move.b 115(a0),d0
    75e0:	|  |   movea.l 4(sp),a0
    75e4:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    75e8:	|  |   movea.l 4(sp),a0
    75ec:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    75f2:	|  |   movea.l 4(sp),a0
    75f6:	|  |   clr.b 118(a0)
			break;
    75fa:	|  +-- bra.w 77a8 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    75fe:	|  |   movea.l 4(sp),a0
    7602:	|  |   move.b #-128,116(a0)
    7608:	|  |   movea.l 4(sp),a0
    760c:	|  |   move.b 116(a0),d0
    7610:	|  |   movea.l 4(sp),a0
    7614:	|  |   move.b d0,115(a0)
    7618:	|  |   movea.l 4(sp),a0
    761c:	|  |   move.b 115(a0),d0
    7620:	|  |   movea.l 4(sp),a0
    7624:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    7628:	|  |   movea.l 4(sp),a0
    762c:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    7632:	|  |   movea.l 4(sp),a0
    7636:	|  |   clr.b 118(a0)
			break;
    763a:	|  +-- bra.w 77a8 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    763e:	|  |   movea.l 4(sp),a0
    7642:	|  |   move.b #-128,116(a0)
    7648:	|  |   movea.l 4(sp),a0
    764c:	|  |   move.b 116(a0),d0
    7650:	|  |   movea.l 4(sp),a0
    7654:	|  |   move.b d0,115(a0)
    7658:	|  |   movea.l 4(sp),a0
    765c:	|  |   move.b 115(a0),d0
    7660:	|  |   movea.l 4(sp),a0
    7664:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    7668:	|  |   movea.l 4(sp),a0
    766c:	|  |   st 117(a0)
			moveMe->transparency = 0;
    7670:	|  |   movea.l 4(sp),a0
    7674:	|  |   clr.b 118(a0)
			break;
    7678:	|  +-- bra.w 77a8 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    767c:	|  |   movea.l 4(sp),a0
    7680:	|  |   st 116(a0)
    7684:	|  |   movea.l 4(sp),a0
    7688:	|  |   move.b 116(a0),d0
    768c:	|  |   movea.l 4(sp),a0
    7690:	|  |   move.b d0,115(a0)
    7694:	|  |   movea.l 4(sp),a0
    7698:	|  |   move.b 115(a0),d0
    769c:	|  |   movea.l 4(sp),a0
    76a0:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    76a4:	|  |   movea.l 4(sp),a0
    76a8:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    76ae:	|  |   movea.l 4(sp),a0
    76b2:	|  |   clr.b 118(a0)
			break;
    76b6:	|  +-- bra.w 77a8 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    76ba:	|  |   movea.l 4(sp),a0
    76be:	|  |   st 116(a0)
    76c2:	|  |   movea.l 4(sp),a0
    76c6:	|  |   move.b 116(a0),d0
    76ca:	|  |   movea.l 4(sp),a0
    76ce:	|  |   move.b d0,115(a0)
    76d2:	|  |   movea.l 4(sp),a0
    76d6:	|  |   move.b 115(a0),d0
    76da:	|  |   movea.l 4(sp),a0
    76de:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    76e2:	|  |   movea.l 4(sp),a0
    76e6:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    76ec:	|  |   movea.l 4(sp),a0
    76f0:	|  |   clr.b 118(a0)
			break;
    76f4:	|  +-- bra.w 77a8 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    76f8:	|  |   movea.l 4(sp),a0
    76fc:	|  |   st 116(a0)
    7700:	|  |   movea.l 4(sp),a0
    7704:	|  |   move.b 116(a0),d0
    7708:	|  |   movea.l 4(sp),a0
    770c:	|  |   move.b d0,115(a0)
    7710:	|  |   movea.l 4(sp),a0
    7714:	|  |   move.b 115(a0),d0
    7718:	|  |   movea.l 4(sp),a0
    771c:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    7720:	|  |   movea.l 4(sp),a0
    7724:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    772a:	|  |   movea.l 4(sp),a0
    772e:	|  |   clr.b 118(a0)
			break;
    7732:	|  +-- bra.s 77a8 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    7734:	|  |   movea.l 4(sp),a0
    7738:	|  |   st 116(a0)
    773c:	|  |   movea.l 4(sp),a0
    7740:	|  |   move.b 116(a0),d0
    7744:	|  |   movea.l 4(sp),a0
    7748:	|  |   move.b d0,115(a0)
    774c:	|  |   movea.l 4(sp),a0
    7750:	|  |   move.b 115(a0),d0
    7754:	|  |   movea.l 4(sp),a0
    7758:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    775c:	|  |   movea.l 4(sp),a0
    7760:	|  |   st 117(a0)
			moveMe->transparency = 0;
    7764:	|  |   movea.l 4(sp),a0
    7768:	|  |   clr.b 118(a0)
			break;
    776c:	|  +-- bra.s 77a8 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    776e:	\--|-> movea.l 4(sp),a0
    7772:	   |   clr.b 116(a0)
    7776:	   |   movea.l 4(sp),a0
    777a:	   |   move.b 116(a0),d0
    777e:	   |   movea.l 4(sp),a0
    7782:	   |   move.b d0,115(a0)
    7786:	   |   movea.l 4(sp),a0
    778a:	   |   move.b 115(a0),d0
    778e:	   |   movea.l 4(sp),a0
    7792:	   |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    7796:	   |   movea.l 4(sp),a0
    779a:	   |   clr.b 117(a0)
			moveMe->transparency = 0;
    779e:	   |   movea.l 4(sp),a0
    77a2:	   |   clr.b 118(a0)
			break;
    77a6:	   |   nop
	}
}
    77a8:	   \-> nop
    77aa:	       rts

000077ac <setCharacterWalkSpeed>:



BOOL setCharacterWalkSpeed (int f, int objNum) {
    77ac:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    77ae:	       tst.l 8(sp)
    77b2:	   /-- bgt.s 77b8 <setCharacterWalkSpeed+0xc>
    77b4:	   |   clr.w d0
    77b6:	/--|-- bra.s 77d6 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    77b8:	|  \-> move.l 12(sp),-(sp)
    77bc:	|      jsr 6338 <findPerson>
    77c2:	|      addq.l #4,sp
    77c4:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    77c6:	|  /-- bne.s 77cc <setCharacterWalkSpeed+0x20>
    77c8:	|  |   clr.w d0
    77ca:	+--|-- bra.s 77d6 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    77cc:	|  \-> movea.l (sp),a0
    77ce:	|      move.l 8(sp),16(a0)
	return TRUE;
    77d4:	|      moveq #1,d0
}
    77d6:	\----> addq.l #4,sp
    77d8:	       rts

000077da <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    77da:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    77dc:	       move.l 8(sp),-(sp)
    77e0:	       jsr 6338 <findPerson>
    77e6:	       addq.l #4,sp
    77e8:	       move.l d0,(sp)
    if (thisPerson) {
    77ea:	/----- beq.s 780a <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    77ec:	|      movea.l (sp),a0
    77ee:	|      move.l 12(sp),106(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    77f4:	|      moveq #2,d0
    77f6:	|      and.l 12(sp),d0
    77fa:	|  /-- beq.s 7806 <setPersonExtra+0x2c>
    77fc:	|  |   movea.l (sp),a0
    77fe:	|  |   move.l #1065353216,20(a0)
        return TRUE;
    7806:	|  \-> moveq #1,d0
    7808:	|  /-- bra.s 780c <setPersonExtra+0x32>
    }
    return FALSE;
    780a:	\--|-> clr.w d0
}
    780c:	   \-> addq.l #4,sp
    780e:	       rts

00007810 <setScale>:


void setScale (short int h, short int d) {
    7810:	subq.l #4,sp
    7812:	move.l 8(sp),d1
    7816:	move.l 12(sp),d0
    781a:	move.w d1,d1
    781c:	move.w d1,2(sp)
    7820:	move.w d0,d0
    7822:	move.w d0,(sp)
	scaleHorizon = h;
    7824:	move.w 2(sp),1808c <scaleHorizon>
	scaleDivide = d;
    782c:	move.w (sp),1808e <scaleDivide>
}
    7832:	nop
    7834:	addq.l #4,sp
    7836:	rts

00007838 <setShown>:

void setShown (BOOL h, int ob) {
    7838:	    subq.l #8,sp
    783a:	    move.l 12(sp),d0
    783e:	    move.w d0,d0
    7840:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    7844:	    move.l 16(sp),-(sp)
    7848:	    jsr 6338 <findPerson>
    784e:	    addq.l #4,sp
    7850:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    7854:	/-- beq.s 7860 <setShown+0x28>
    7856:	|   movea.l 4(sp),a0
    785a:	|   move.w 2(sp),92(a0)
}
    7860:	\-> nop
    7862:	    addq.l #8,sp
    7864:	    rts

00007866 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    7866:	       subq.l #8,sp
    7868:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    786a:	       movea.l 16(sp),a0
    786e:	       move.l 80(a0),d0
    7872:	       move.l d0,d1
    7874:	       addi.l #360,d1
    787a:	       movea.l 16(sp),a0
    787e:	       move.l 84(a0),d0
    7882:	       move.l d1,d2
    7884:	       sub.l d0,d2
    7886:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    788a:	       movea.l 16(sp),a0
    788e:	       move.l 110(a0),d0
    7892:	   /-- beq.s 789e <spinStep+0x38>
    7894:	   |   movea.l 16(sp),a0
    7898:	   |   move.l 110(a0),d0
    789c:	/--|-- bra.s 78b8 <spinStep+0x52>
    789e:	|  \-> movea.l 16(sp),a0
    78a2:	|      movea.l 68(a0),a0
    78a6:	|      move.l 4(a0),d0
    78aa:	|      move.l d0,-(sp)
    78ac:	|      pea 168 <decodeFilename+0x50>
    78b0:	|      jsr 12b60 <__divsi3>
    78b6:	|      addq.l #8,sp
    78b8:	\----> move.l d0,4(sp)
	while (diff > 180) {
    78bc:	   /-- bra.s 78c6 <spinStep+0x60>
		diff -= 360;
    78be:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    78c6:	|  \-> cmpi.l #180,8(sp)
    78ce:	\----- bgt.s 78be <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    78d0:	       move.l 8(sp),d0
    78d4:	       cmp.l 4(sp),d0
    78d8:	   /-- blt.s 78f6 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    78da:	   |   movea.l 16(sp),a0
    78de:	   |   move.l 80(a0),d0
    78e2:	   |   sub.l 4(sp),d0
    78e6:	   |   move.l d0,-(sp)
    78e8:	   |   move.l 20(sp),-(sp)
    78ec:	   |   jsr 79d6 <turnMeAngle>
    78f2:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    78f4:	/--|-- bra.s 793c <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    78f6:	|  \-> move.l 4(sp),d0
    78fa:	|      neg.l d0
    78fc:	|      cmp.l 8(sp),d0
    7900:	|  /-- blt.s 791e <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    7902:	|  |   movea.l 16(sp),a0
    7906:	|  |   move.l 80(a0),d0
    790a:	|  |   add.l 4(sp),d0
    790e:	|  |   move.l d0,-(sp)
    7910:	|  |   move.l 20(sp),-(sp)
    7914:	|  |   jsr 79d6 <turnMeAngle>
    791a:	|  |   addq.l #8,sp
}
    791c:	+--|-- bra.s 793c <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    791e:	|  \-> movea.l 16(sp),a0
    7922:	|      move.l 84(a0),d0
    7926:	|      move.l d0,-(sp)
    7928:	|      move.l 20(sp),-(sp)
    792c:	|      jsr 79d6 <turnMeAngle>
    7932:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    7934:	|      movea.l 16(sp),a0
    7938:	|      clr.w 54(a0)
}
    793c:	\----> nop
    793e:	       move.l (sp)+,d2
    7940:	       addq.l #8,sp
    7942:	       rts

00007944 <stopPerson>:


BOOL stopPerson (int o) {
    7944:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    7946:	       move.l 8(sp),-(sp)
    794a:	       jsr 6338 <findPerson>
    7950:	       addq.l #4,sp
    7952:	       move.l d0,(sp)
    if (moveMe)
    7954:	/----- beq.s 7992 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    7956:	|      movea.l (sp),a0
    7958:	|      move.l 56(a0),d0
    795c:	+----- beq.s 7992 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    795e:	|      movea.l (sp),a0
    7960:	|      move.l 56(a0),d0
    7964:	|      move.l d0,-(sp)
    7966:	|      jsr 1b06 <abortFunction>
    796c:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    796e:	|      movea.l (sp),a0
    7970:	|      clr.l 56(a0)
            moveMe -> walking = FALSE;
    7974:	|      movea.l (sp),a0
    7976:	|      clr.w 52(a0)
            moveMe -> spinning = FALSE;
    797a:	|      movea.l (sp),a0
    797c:	|      clr.w 54(a0)
            setFrames(moveMe, ANI_STAND);
    7980:	|      clr.l -(sp)
    7982:	|      move.l 4(sp),-(sp)
    7986:	|      jsr 4f86 <setFrames>
    798c:	|      addq.l #8,sp
            return TRUE;
    798e:	|      moveq #1,d0
    7990:	|  /-- bra.s 7994 <stopPerson+0x50>
        }
    return FALSE;
    7992:	\--|-> clr.w d0
}
    7994:	   \-> addq.l #4,sp
    7996:	       rts

00007998 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    7998:	       subq.l #8,sp
	int total = 0;
    799a:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    799e:	       clr.l (sp)
    79a0:	   /-- bra.s 79c2 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    79a2:	/--|-> movea.l 12(sp),a0
    79a6:	|  |   movea.l 4(a0),a0
    79aa:	|  |   move.l (sp),d1
    79ac:	|  |   move.l d1,d0
    79ae:	|  |   add.l d0,d0
    79b0:	|  |   add.l d1,d0
    79b2:	|  |   add.l d0,d0
    79b4:	|  |   add.l d0,d0
    79b6:	|  |   adda.l d0,a0
    79b8:	|  |   move.l 4(a0),d0
    79bc:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    79c0:	|  |   addq.l #1,(sp)
    79c2:	|  \-> movea.l 12(sp),a0
    79c6:	|      move.l 8(a0),d0
    79ca:	|      cmp.l (sp),d0
    79cc:	\----- bgt.s 79a2 <timeForAnim+0xa>
	}
	return total;
    79ce:	       move.l 4(sp),d0
}
    79d2:	       addq.l #8,sp
    79d4:	       rts

000079d6 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    79d6:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    79d8:	       movea.l 8(sp),a0
    79dc:	       movea.l 68(a0),a0
    79e0:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    79e4:	       movea.l 8(sp),a0
    79e8:	       move.l 12(sp),80(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    79ee:	       move.l (sp),-(sp)
    79f0:	       pea b4 <_start+0xb4>
    79f4:	       jsr 12b60 <__divsi3>
    79fa:	       addq.l #8,sp
    79fc:	       move.l d0,d1
    79fe:	       addi.l #180,d1
    7a04:	       movea.l 8(sp),a0
    7a08:	       move.l 88(a0),d0
    7a0c:	       add.l d1,d0
    7a0e:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    7a12:	   /-- bra.s 7a1c <turnMeAngle+0x46>
    7a14:	/--|-> addi.l #-360,12(sp)
    7a1c:	|  \-> cmpi.l #359,12(sp)
    7a24:	\----- bgt.s 7a14 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    7a26:	       move.l (sp),-(sp)
    7a28:	       move.l 16(sp),-(sp)
    7a2c:	       jsr 12ae2 <__mulsi3>
    7a32:	       addq.l #8,sp
    7a34:	       pea 168 <decodeFilename+0x50>
    7a38:	       move.l d0,-(sp)
    7a3a:	       jsr 12b60 <__divsi3>
    7a40:	       addq.l #8,sp
    7a42:	       movea.l 8(sp),a0
    7a46:	       move.l d0,94(a0)
}
    7a4a:	       nop
    7a4c:	       addq.l #4,sp
    7a4e:	       rts

00007a50 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    7a50:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    7a52:	          move.l 8(sp),-(sp)
    7a56:	          jsr 6338 <findPerson>
    7a5c:	          addq.l #4,sp
    7a5e:	          move.l d0,(sp)
    if (thisPerson) {
    7a60:	/-------- beq.s 7ac0 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    7a62:	|         movea.l (sp),a0
    7a64:	|         move.l 56(a0),d0
    7a68:	|     /-- beq.s 7a7a <turnPersonToFace+0x2a>
    7a6a:	|     |   movea.l (sp),a0
    7a6c:	|     |   move.l 56(a0),d0
    7a70:	|     |   move.l d0,-(sp)
    7a72:	|     |   jsr 1b06 <abortFunction>
    7a78:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    7a7a:	|     \-> movea.l (sp),a0
    7a7c:	|         clr.l 56(a0)
        thisPerson -> walking = FALSE;
    7a80:	|         movea.l (sp),a0
    7a82:	|         clr.w 52(a0)
        thisPerson -> spinning = FALSE;
    7a86:	|         movea.l (sp),a0
    7a88:	|         clr.w 54(a0)
        turnMeAngle(thisPerson, direc);
    7a8c:	|         move.l 12(sp),-(sp)
    7a90:	|         move.l 4(sp),-(sp)
    7a94:	|         jsr 79d6 <turnMeAngle>
    7a9a:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    7a9c:	|         movea.l 19bd8 <speech>,a0
    7aa2:	|         move.l (a0),d0
    7aa4:	|         cmp.l (sp),d0
    7aa6:	|  /----- bne.s 7aac <turnPersonToFace+0x5c>
    7aa8:	|  |      moveq #2,d0
    7aaa:	|  |  /-- bra.s 7aae <turnPersonToFace+0x5e>
    7aac:	|  \--|-> moveq #0,d0
    7aae:	|     \-> move.l d0,-(sp)
    7ab0:	|         move.l 4(sp),-(sp)
    7ab4:	|         jsr 4f86 <setFrames>
    7aba:	|         addq.l #8,sp
        return TRUE;
    7abc:	|         moveq #1,d0
    7abe:	|     /-- bra.s 7ac2 <turnPersonToFace+0x72>
    }
    return FALSE;
    7ac0:	\-----|-> clr.w d0
}
    7ac2:	      \-> addq.l #4,sp
    7ac4:	          rts

00007ac6 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    7ac6:	                lea -20(sp),sp
    7aca:	                move.l d3,-(sp)
    7acc:	                move.l d2,-(sp)
    7ace:	                move.l 36(sp),d0
    7ad2:	                move.w d0,d0
    7ad4:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    7ad8:	                cmpi.w #-1,10(sp)
    7ade:	/-------------- bne.s 7ae6 <walkMe+0x20>
    7ae0:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    7ae6:	>-------------> movea.l 32(sp),a0
    7aea:	|               move.l 36(a0),d0
    7aee:	|               move.l d0,-(sp)
    7af0:	|               jsr 12588 <__floatsisf>
    7af6:	|               addq.l #4,sp
    7af8:	|               move.l d0,d1
    7afa:	|               movea.l 32(sp),a0
    7afe:	|               move.l (a0),d0
    7b00:	|               move.l d0,-(sp)
    7b02:	|               move.l d1,-(sp)
    7b04:	|               jsr 1287c <__subsf3>
    7b0a:	|               addq.l #8,sp
    7b0c:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    7b10:	|               movea.l 32(sp),a0
    7b14:	|               move.l 40(a0),d0
    7b18:	|               move.l d0,-(sp)
    7b1a:	|               jsr 12588 <__floatsisf>
    7b20:	|               addq.l #4,sp
    7b22:	|               move.l d0,d1
    7b24:	|               movea.l 32(sp),a0
    7b28:	|               move.l 4(a0),d0
    7b2c:	|               move.l d0,-(sp)
    7b2e:	|               move.l d1,-(sp)
    7b30:	|               jsr 1287c <__subsf3>
    7b36:	|               addq.l #8,sp
    7b38:	|               move.l d0,-(sp)
    7b3a:	|               move.l d0,-(sp)
    7b3c:	|               jsr 1233a <__addsf3>
    7b42:	|               addq.l #8,sp
    7b44:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    7b48:	|               movea.l 32(sp),a0
    7b4c:	|               move.l 20(a0),d2
    7b50:	|               movea.l 32(sp),a0
    7b54:	|               move.l 16(a0),d0
    7b58:	|               move.l d0,-(sp)
    7b5a:	|               jsr 12588 <__floatsisf>
    7b60:	|               addq.l #4,sp
    7b62:	|               move.l d0,-(sp)
    7b64:	|               move.l d2,-(sp)
    7b66:	|               jsr 1263a <__mulsf3>
    7b6c:	|               addq.l #8,sp
    7b6e:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    7b72:	|               move.l 24(sp),-(sp)
    7b76:	|               jsr 124a0 <__extendsfdf2>
    7b7c:	|               addq.l #4,sp
    7b7e:	|               move.l #-1717986918,-(sp)
    7b84:	|               move.l #1070176665,-(sp)
    7b8a:	|               move.l d1,-(sp)
    7b8c:	|               move.l d0,-(sp)
    7b8e:	|               jsr 12760 <__ltdf2>
    7b94:	|               lea 16(sp),sp
    7b98:	|               tst.l d0
    7b9a:	|           /-- bge.s 7ba4 <walkMe+0xde>
    7b9c:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    7ba4:	|           \-> move.l 20(sp),-(sp)
    7ba8:	|               jsr 12520 <__fixsfsi>
    7bae:	|               addq.l #4,sp
    7bb0:	|               move.l d0,-(sp)
    7bb2:	|               jsr 5554 <TF_abs>
    7bb8:	|               addq.l #4,sp
    7bba:	|               move.l d0,d2
    7bbc:	|               move.l 16(sp),-(sp)
    7bc0:	|               jsr 12520 <__fixsfsi>
    7bc6:	|               addq.l #4,sp
    7bc8:	|               move.l d0,-(sp)
    7bca:	|               jsr 5554 <TF_abs>
    7bd0:	|               addq.l #4,sp
    7bd2:	|               cmp.l d2,d0
    7bd4:	|        /----- bgt.s 7bf8 <walkMe+0x132>
    7bd6:	|        |      move.l 20(sp),-(sp)
    7bda:	|        |      jsr 12520 <__fixsfsi>
    7be0:	|        |      addq.l #4,sp
    7be2:	|        |      move.l d0,-(sp)
    7be4:	|        |      jsr 5554 <TF_abs>
    7bea:	|        |      addq.l #4,sp
    7bec:	|        |      move.l d0,-(sp)
    7bee:	|        |      jsr 12588 <__floatsisf>
    7bf4:	|        |      addq.l #4,sp
    7bf6:	|        |  /-- bra.s 7c18 <walkMe+0x152>
    7bf8:	|        \--|-> move.l 16(sp),-(sp)
    7bfc:	|           |   jsr 12520 <__fixsfsi>
    7c02:	|           |   addq.l #4,sp
    7c04:	|           |   move.l d0,-(sp)
    7c06:	|           |   jsr 5554 <TF_abs>
    7c0c:	|           |   addq.l #4,sp
    7c0e:	|           |   move.l d0,-(sp)
    7c10:	|           |   jsr 12588 <__floatsisf>
    7c16:	|           |   addq.l #4,sp
    7c18:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    7c1c:	|               move.l 12(sp),-(sp)
    7c20:	|               jsr 12520 <__fixsfsi>
    7c26:	|               addq.l #4,sp
    7c28:	|               move.l d0,-(sp)
    7c2a:	|               jsr 5554 <TF_abs>
    7c30:	|               addq.l #4,sp
    7c32:	|               move.l d0,-(sp)
    7c34:	|               jsr 12588 <__floatsisf>
    7c3a:	|               addq.l #4,sp
    7c3c:	|               move.l d0,-(sp)
    7c3e:	|               move.l 28(sp),-(sp)
    7c42:	|               jsr 127ae <__ltsf2>
    7c48:	|               addq.l #8,sp
    7c4a:	|               tst.l d0
    7c4c:	|        /----- bge.w 7cfe <walkMe+0x238>
			if (thisPerson->spinning) {
    7c50:	|        |      movea.l 32(sp),a0
    7c54:	|        |      move.w 54(a0),d0
    7c58:	|        |  /-- beq.s 7c76 <walkMe+0x1b0>
				spinStep(thisPerson);
    7c5a:	|        |  |   move.l 32(sp),-(sp)
    7c5e:	|        |  |   jsr 7866 <spinStep>
    7c64:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    7c66:	|        |  |   pea 1 <_start+0x1>
    7c6a:	|        |  |   move.l 36(sp),-(sp)
    7c6e:	|        |  |   jsr 4f86 <setFrames>
    7c74:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    7c76:	|        |  \-> move.l 24(sp),-(sp)
    7c7a:	|        |      move.l 16(sp),-(sp)
    7c7e:	|        |      jsr 12434 <__divsf3>
    7c84:	|        |      addq.l #8,sp
    7c86:	|        |      move.l d0,24(sp)
			if (move)
    7c8a:	|        |      tst.w 10(sp)
    7c8e:	|        |  /-- beq.s 7cf8 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    7c90:	|        |  |   movea.l 32(sp),a0
    7c94:	|        |  |   move.l 4(a0),d2
    7c98:	|        |  |   move.l 24(sp),d0
    7c9c:	|        |  |   move.l d0,-(sp)
    7c9e:	|        |  |   move.l d0,-(sp)
    7ca0:	|        |  |   jsr 1233a <__addsf3>
    7ca6:	|        |  |   addq.l #8,sp
    7ca8:	|        |  |   move.l d0,-(sp)
    7caa:	|        |  |   move.l 20(sp),-(sp)
    7cae:	|        |  |   jsr 12434 <__divsf3>
    7cb4:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    7cb6:	|        |  |   move.l d0,-(sp)
    7cb8:	|        |  |   move.l d2,-(sp)
    7cba:	|        |  |   jsr 1233a <__addsf3>
    7cc0:	|        |  |   addq.l #8,sp
    7cc2:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    7cc4:	|        |  |   movea.l 32(sp),a0
    7cc8:	|        |  |   move.l (a0),d3
    7cca:	|        |  |   move.l 24(sp),-(sp)
    7cce:	|        |  |   move.l 24(sp),-(sp)
    7cd2:	|        |  |   jsr 12434 <__divsf3>
    7cd8:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    7cda:	|        |  |   move.l d0,-(sp)
    7cdc:	|        |  |   move.l d3,-(sp)
    7cde:	|        |  |   jsr 1233a <__addsf3>
    7ce4:	|        |  |   addq.l #8,sp
    7ce6:	|        |  |   move.l d2,-(sp)
    7ce8:	|        |  |   move.l d0,-(sp)
    7cea:	|        |  |   move.l 40(sp),-(sp)
    7cee:	|        |  |   jsr 6a80 <moveAndScale>
    7cf4:	|        |  |   lea 12(sp),sp
			return TRUE;
    7cf8:	|        |  \-> moveq #1,d0
    7cfa:	|  /-----|----- bra.w 7dac <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    7cfe:	|  |     \----> movea.l 32(sp),a0
    7d02:	|  |            move.l 44(a0),d0
    7d06:	|  |            moveq #-1,d1
    7d08:	|  |            cmp.l d0,d1
    7d0a:	|  |        /-- bne.s 7d42 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    7d0c:	|  |        |   movea.l 32(sp),a0
    7d10:	|  |        |   move.l 98(a0),d0
    7d14:	|  |        |   moveq #-1,d1
    7d16:	|  |        |   cmp.l d0,d1
    7d18:	|  |  /-----|-- beq.s 7d56 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    7d1a:	|  |  |     |   movea.l 32(sp),a0
    7d1e:	|  |  |     |   move.l 98(a0),d0
    7d22:	|  |  |     |   movea.l 32(sp),a0
    7d26:	|  |  |     |   move.l d0,84(a0)
				thisPerson->spinning = TRUE;
    7d2a:	|  |  |     |   movea.l 32(sp),a0
    7d2e:	|  |  |     |   move.w #1,54(a0)
				spinStep(thisPerson);
    7d34:	|  |  |     |   move.l 32(sp),-(sp)
    7d38:	|  |  |     |   jsr 7866 <spinStep>
    7d3e:	|  |  |     |   addq.l #4,sp
			}
			break;
    7d40:	|  |  +-----|-- bra.s 7d56 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    7d42:	|  |  |     \-> move.l 32(sp),-(sp)
    7d46:	|  |  |         jsr 5c7e <doBorderStuff>
    7d4c:	|  |  |         addq.l #4,sp
    7d4e:	|  |  |         tst.w d0
    7d50:	|  |  |  /----- beq.s 7d5a <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    7d52:	\--|--|--|----- bra.w 7ae6 <walkMe+0x20>
			break;
    7d56:	   |  \--|----> nop
    7d58:	   |     |  /-- bra.s 7d5c <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    7d5a:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    7d5c:	   |        \-> movea.l 32(sp),a0
    7d60:	   |            clr.w 52(a0)
	setFrames(thisPerson, ANI_STAND);
    7d64:	   |            clr.l -(sp)
    7d66:	   |            move.l 36(sp),-(sp)
    7d6a:	   |            jsr 4f86 <setFrames>
    7d70:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    7d72:	   |            movea.l 32(sp),a0
    7d76:	   |            move.l 32(a0),d0
	moveAndScale(thisPerson,
    7d7a:	   |            move.l d0,-(sp)
    7d7c:	   |            jsr 12588 <__floatsisf>
    7d82:	   |            addq.l #4,sp
    7d84:	   |            move.l d0,d2
				 thisPerson->walkToX,
    7d86:	   |            movea.l 32(sp),a0
    7d8a:	   |            move.l 28(a0),d0
	moveAndScale(thisPerson,
    7d8e:	   |            move.l d0,-(sp)
    7d90:	   |            jsr 12588 <__floatsisf>
    7d96:	   |            addq.l #4,sp
    7d98:	   |            move.l d2,-(sp)
    7d9a:	   |            move.l d0,-(sp)
    7d9c:	   |            move.l 40(sp),-(sp)
    7da0:	   |            jsr 6a80 <moveAndScale>
    7da6:	   |            lea 12(sp),sp
	return FALSE;
    7daa:	   |            clr.w d0
}
    7dac:	   \----------> move.l (sp)+,d2
    7dae:	                move.l (sp)+,d3
    7db0:	                lea 20(sp),sp
    7db4:	                rts

00007db6 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
    7db6:	             lea -20(sp),sp
    7dba:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);
	struct loadedSpriteBank * returnMe = allLoadedBanks;
    7dbc:	             move.l 19c04 <allLoadedBanks>,20(sp)
	while (returnMe) {
    7dc4:	      /----- bra.s 7de4 <loadBankForAnim+0x2e>
		if (returnMe->ID == ID) {
    7dc6:	   /--|----> movea.l 20(sp),a0
    7dca:	   |  |      move.l (a0),d0
    7dcc:	   |  |      cmp.l 28(sp),d0
    7dd0:	   |  |  /-- bne.s 7dda <loadBankForAnim+0x24>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			return returnMe;
    7dd2:	   |  |  |   move.l 20(sp),d0
    7dd6:	/--|--|--|-- bra.w 7e96 <loadBankForAnim+0xe0>
		}
		returnMe = returnMe->next;
    7dda:	|  |  |  \-> movea.l 20(sp),a0
    7dde:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
    7de4:	|  |  \----> tst.l 20(sp)
    7de8:	|  \-------- bne.s 7dc6 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
    7dea:	|            moveq #26,d0
    7dec:	|            move.l d0,16(sp)
    7df0:	|            clr.l 12(sp)
    7df4:	|            move.l 19b8e <SysBase>,d0
    7dfa:	|            movea.l d0,a6
    7dfc:	|            move.l 16(sp),d0
    7e00:	|            move.l 12(sp),d1
    7e04:	|            jsr -684(a6)
    7e08:	|            move.l d0,8(sp)
    7e0c:	|            move.l 8(sp),d0
    7e10:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
    7e14:	|     /----- beq.s 7e94 <loadBankForAnim+0xde>
		returnMe->ID = ID;
    7e16:	|     |      movea.l 20(sp),a0
    7e1a:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank, FALSE)) {
    7e1e:	|     |      move.l 20(sp),d0
    7e22:	|     |      addq.l #8,d0
    7e24:	|     |      clr.l -(sp)
    7e26:	|     |      move.l d0,-(sp)
    7e28:	|     |      move.l 36(sp),-(sp)
    7e2c:	|     |      jsr 5534 <loadSpriteBank>
    7e32:	|     |      lea 12(sp),sp
    7e36:	|     |      tst.w d0
    7e38:	|     |  /-- beq.s 7e6c <loadBankForAnim+0xb6>
			returnMe->timesUsed = 0;
    7e3a:	|     |  |   movea.l 20(sp),a0
    7e3e:	|     |  |   clr.l 4(a0)
			returnMe->next = allLoadedBanks;
    7e42:	|     |  |   move.l 19c04 <allLoadedBanks>,d0
    7e48:	|     |  |   movea.l 20(sp),a0
    7e4c:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
    7e50:	|     |  |   move.l 20(sp),19c04 <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
    7e58:	|     |  |   pea 15166 <incbin_player_end+0x232>
    7e5e:	|     |  |   jsr 12130 <KPrintF>
    7e64:	|     |  |   addq.l #4,sp
			return returnMe;
    7e66:	|     |  |   move.l 20(sp),d0
    7e6a:	+-----|--|-- bra.s 7e96 <loadBankForAnim+0xe0>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
    7e6c:	|     |  \-> pea 15193 <incbin_player_end+0x25f>
    7e72:	|     |      jsr 12130 <KPrintF>
    7e78:	|     |      addq.l #4,sp
			FreeVec(returnMe);
    7e7a:	|     |      move.l 20(sp),4(sp)
    7e80:	|     |      move.l 19b8e <SysBase>,d0
    7e86:	|     |      movea.l d0,a6
    7e88:	|     |      movea.l 4(sp),a1
    7e8c:	|     |      jsr -690(a6)
			return NULL;
    7e90:	|     |      moveq #0,d0
    7e92:	+-----|----- bra.s 7e96 <loadBankForAnim+0xe0>
		}
	} else return NULL;
    7e94:	|     \----> moveq #0,d0
}
    7e96:	\----------> movea.l (sp)+,a6
    7e98:	             lea 20(sp),sp
    7e9c:	             rts

00007e9e <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    7e9e:	       subq.l #8,sp
    7ea0:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    7ea2:	   /-- bra.s 7ed2 <clearStackLib+0x34>
		k = stackLib;
    7ea4:	/--|-> move.l 19c0c <stackLib>,8(sp)
		stackLib = stackLib -> next;
    7eac:	|  |   movea.l 19c0c <stackLib>,a0
    7eb2:	|  |   move.l 4(a0),d0
    7eb6:	|  |   move.l d0,19c0c <stackLib>
		FreeVec(k);
    7ebc:	|  |   move.l 8(sp),4(sp)
    7ec2:	|  |   move.l 19b8e <SysBase>,d0
    7ec8:	|  |   movea.l d0,a6
    7eca:	|  |   movea.l 4(sp),a1
    7ece:	|  |   jsr -690(a6)
	while (stackLib) {
    7ed2:	|  \-> move.l 19c0c <stackLib>,d0
    7ed8:	\----- bne.s 7ea4 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    7eda:	       clr.l 19c08 <stackLibTotal>
}
    7ee0:	       nop
    7ee2:	       movea.l (sp)+,a6
    7ee4:	       addq.l #8,sp
    7ee6:	       rts

00007ee8 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    7ee8:	          lea -128(sp),sp
    7eec:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    7ef0:	      /-- bra.s 7f02 <loadGame+0x1a>
    7ef2:	   /--|-> move.l 19b2a <allRunningFunctions>,d0
    7ef8:	   |  |   move.l d0,-(sp)
    7efa:	   |  |   jsr 2b0e <finishFunction>
    7f00:	   |  |   addq.l #4,sp
    7f02:	   |  \-> move.l 19b2a <allRunningFunctions>,d0
    7f08:	   \----- bne.s 7ef2 <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    7f0a:	          pea 19c10 <ssgVersion>
    7f10:	          pea 151f1 <incbin_player_end+0x2bd>
    7f16:	          pea 41 <_start+0x41>
    7f1a:	          pea 53 <_start+0x53>
    7f1e:	          move.l 160(sp),-(sp)
    7f22:	          jsr 362e <openAndVerify>
    7f28:	          lea 20(sp),sp
    7f2c:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    7f30:	      /-- bne.s 7f38 <loadGame+0x50>
    7f32:	      |   clr.w d0
    7f34:	/-----|-- bra.w 81de <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    7f38:	|     \-> move.l 112(sp),108(sp)
    7f3e:	|         lea 140(sp),a0
    7f42:	|         lea -126(a0),a0
    7f46:	|         move.l a0,120(sp)
    7f4a:	|         moveq #8,d0
    7f4c:	|         move.l d0,116(sp)
    7f50:	|         move.l 19b96 <DOSBase>,d0
    7f56:	|         movea.l d0,a6
    7f58:	|         move.l 108(sp),d1
    7f5c:	|         move.l 120(sp),d2
    7f60:	|         move.l 116(sp),d3
    7f64:	|         jsr -42(a6)
    7f68:	|         move.l d0,132(sp)
    7f6c:	|         move.l 132(sp),d0
    7f70:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    7f74:	|         moveq #8,d0
    7f76:	|         cmp.l 128(sp),d0
    7f7a:	|     /-- beq.s 7f8a <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    7f7c:	|     |   pea 15212 <incbin_player_end+0x2de>
    7f82:	|     |   jsr 12130 <KPrintF>
    7f88:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    7f8a:	|     \-> move.l 14(sp),d1
    7f8e:	|         move.l 19b34 <fileTime>,d0
    7f94:	|         cmp.l d1,d0
    7f96:	|     /-- bne.s 7fa6 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    7f98:	|     |   move.l 18(sp),d1
    7f9c:	|     |   move.l 19b38 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    7fa2:	|     |   cmp.l d1,d0
    7fa4:	|  /--|-- beq.s 7fc6 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    7fa6:	|  |  \-> move.l 144(sp),-(sp)
    7faa:	|  |      pea 1522e <incbin_player_end+0x2fa>
    7fb0:	|  |      pea 152f5 <incbin_player_end+0x3c1>
    7fb6:	|  |      jsr 12130 <KPrintF>
    7fbc:	|  |      lea 12(sp),sp
		return FALSE; 
    7fc0:	|  |      clr.w d0
    7fc2:	+--|----- bra.w 81de <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    7fc6:	|  \----> move.l 112(sp),124(sp)
    7fcc:	|         move.l 19b96 <DOSBase>,d0
    7fd2:	|         movea.l d0,a6
    7fd4:	|         move.l 124(sp),d1
    7fd8:	|         jsr -306(a6)
    7fdc:	|         move.l d0,136(sp)
    7fe0:	|         move.l 136(sp),d0
    7fe4:	|         move.l d0,d0
    7fe6:	|         move.w d0,18066 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    7fec:	|         move.l 112(sp),100(sp)
    7ff2:	|         move.l 19b96 <DOSBase>,d0
    7ff8:	|         movea.l d0,a6
    7ffa:	|         move.l 100(sp),d1
    7ffe:	|         jsr -306(a6)
    8002:	|         move.l d0,96(sp)
    8006:	|         move.l 96(sp),d0
    800a:	|         move.l d0,d0
    800c:	|         move.w d0,19b32 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    8012:	|         move.l 112(sp),92(sp)
    8018:	|         move.l 19b96 <DOSBase>,d0
    801e:	|         movea.l d0,a6
    8020:	|         move.l 92(sp),d1
    8024:	|         jsr -306(a6)
    8028:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    802c:	|         move.l 112(sp),84(sp)
    8032:	|         move.l 19b96 <DOSBase>,d0
    8038:	|         movea.l d0,a6
    803a:	|         move.l 84(sp),d1
    803e:	|         jsr -306(a6)
    8042:	|         move.l d0,80(sp)
    8046:	|         move.l 80(sp),d0
    804a:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    804e:	|     /-- beq.s 8082 <loadGame+0x19a>
		fontNum = get2bytes (fp);
    8050:	|     |   move.l 112(sp),-(sp)
    8054:	|     |   jsr 6bc <get2bytes>
    805a:	|     |   addq.l #4,sp
    805c:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    8060:	|     |   move.l 112(sp),-(sp)
    8064:	|     |   jsr 6bc <get2bytes>
    806a:	|     |   addq.l #4,sp
    806c:	|     |   move.l d0,19c6c <fontHeight>
		charOrder = readString(fp);		
    8072:	|     |   move.l 112(sp),-(sp)
    8076:	|     |   jsr b02 <readString>
    807c:	|     |   addq.l #4,sp
    807e:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    8082:	|     \-> move.l 104(sp),70(sp)
    8088:	|         move.l 19b8e <SysBase>,d0
    808e:	|         movea.l d0,a6
    8090:	|         movea.l 70(sp),a1
    8094:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    8098:	|         move.l 112(sp),-(sp)
    809c:	|         jsr 854 <getSigned>
    80a2:	|         addq.l #4,sp
    80a4:	|         move.w d0,185fe <fontSpace>

	killAllPeople ();
    80aa:	|         jsr 6722 <killAllPeople>
	killAllRegions ();
    80b0:	|         jsr 10bd4 <killAllRegions>

	int camerX = get2bytes (fp);
    80b6:	|         move.l 112(sp),-(sp)
    80ba:	|         jsr 6bc <get2bytes>
    80c0:	|         addq.l #4,sp
    80c2:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    80c6:	|         move.l 112(sp),-(sp)
    80ca:	|         jsr 6bc <get2bytes>
    80d0:	|         addq.l #4,sp
    80d2:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    80d6:	|         move.l 112(sp),-(sp)
    80da:	|         jsr 7d8 <getFloat>
    80e0:	|         addq.l #4,sp
    80e2:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    80e6:	|         move.l 112(sp),54(sp)
    80ec:	|         move.l 19b96 <DOSBase>,d0
    80f2:	|         movea.l d0,a6
    80f4:	|         move.l 54(sp),d1
    80f8:	|         jsr -306(a6)
    80fc:	|         move.l d0,50(sp)
    8100:	|         move.l 50(sp),d0
    8104:	|         move.l d0,d0
    8106:	|         move.b d0,18068 <brightnessLevel>

	loadHandlers (fp);
    810c:	|         move.l 112(sp),-(sp)
    8110:	|         jsr 358e <loadHandlers>
    8116:	|         addq.l #4,sp
	loadRegions (fp);
    8118:	|         move.l 112(sp),-(sp)
    811c:	|         jsr 10c30 <loadRegions>
    8122:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    8124:	|         moveq #12,d0
    8126:	|         move.l d0,46(sp)
    812a:	|         clr.l 42(sp)
    812e:	|         move.l 19b8e <SysBase>,d0
    8134:	|         movea.l d0,a6
    8136:	|         move.l 46(sp),d0
    813a:	|         move.l 42(sp),d1
    813e:	|         jsr -684(a6)
    8142:	|         move.l d0,38(sp)
    8146:	|         move.l 38(sp),d0
    814a:	|         move.l d0,19a7a <mouseCursorAnim>
	if (! mouseCursorAnim) {
    8150:	|         move.l 19a7a <mouseCursorAnim>,d0
    8156:	|     /-- bne.s 816a <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    8158:	|     |   pea 152ff <incbin_player_end+0x3cb>
    815e:	|     |   jsr 12130 <KPrintF>
    8164:	|     |   addq.l #4,sp
		return FALSE;
    8166:	|     |   clr.w d0
    8168:	+-----|-- bra.s 81de <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    816a:	|     \-> jsr 8e02 <nosnapshot>
	if (FGetC (fp)) {
    8170:	|         move.l 112(sp),34(sp)
    8176:	|         move.l 19b96 <DOSBase>,d0
    817c:	|         movea.l d0,a6
    817e:	|         move.l 34(sp),d1
    8182:	|         jsr -306(a6)
    8186:	|         move.l d0,30(sp)
    818a:	|         move.l 30(sp),d0
    818e:	|     /-- beq.s 81a4 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    8190:	|     |   move.l 112(sp),-(sp)
    8194:	|     |   jsr 8e48 <restoreSnapshot>
    819a:	|     |   addq.l #4,sp
    819c:	|     |   tst.w d0
    819e:	|     +-- bne.s 81a4 <loadGame+0x2bc>
    81a0:	|     |   clr.w d0
    81a2:	+-----|-- bra.s 81de <loadGame+0x2f6>
	}

	Close (fp);
    81a4:	|     \-> move.l 112(sp),26(sp)
    81aa:	|         move.l 19b96 <DOSBase>,d0
    81b0:	|         movea.l d0,a6
    81b2:	|         move.l 26(sp),d1
    81b6:	|         jsr -36(a6)
    81ba:	|         move.l d0,22(sp)
	clearStackLib ();
    81be:	|         jsr 7e9e <clearStackLib>

	cameraX = camerX;
    81c4:	|         move.l 66(sp),19c32 <cameraX>
	cameraY = camerY;
    81cc:	|         move.l 62(sp),19c36 <cameraY>
	cameraZoom = camerZ;
    81d4:	|         move.l 58(sp),18098 <cameraZoom>

	return TRUE;
    81dc:	|         moveq #1,d0
}
    81de:	\-------> movem.l (sp)+,d2-d3/a6
    81e2:	          lea 128(sp),sp
    81e6:	          rts

000081e8 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    81e8:	   /-> lea -64(sp),sp
    81ec:	   |   move.l a6,-(sp)
    81ee:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    81f0:	   |   movea.l 76(sp),a0
    81f4:	   |   move.l (a0),d0
    81f6:	   |   move.l 80(sp),-(sp)
    81fa:	   |   move.l d0,-(sp)
    81fc:	   |   jsr 8d0 <put2bytes>
    8202:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    8204:	   |   movea.l 76(sp),a0
    8208:	   |   move.l 40(a0),d0
    820c:	/--|-- beq.s 8248 <saveFunction+0x60>
		FPutC (fp, 1);
    820e:	|  |   move.l 80(sp),52(sp)
    8214:	|  |   moveq #1,d0
    8216:	|  |   move.l d0,48(sp)
    821a:	|  |   move.l 19b96 <DOSBase>,d0
    8220:	|  |   movea.l d0,a6
    8222:	|  |   move.l 52(sp),d1
    8226:	|  |   move.l 48(sp),d2
    822a:	|  |   jsr -312(a6)
    822e:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    8232:	|  |   movea.l 76(sp),a0
    8236:	|  |   move.l 40(a0),d0
    823a:	|  |   move.l 80(sp),-(sp)
    823e:	|  |   move.l d0,-(sp)
    8240:	|  \-- jsr 81e8 <saveFunction>(pc)
    8244:	|      addq.l #8,sp
    8246:	|  /-- bra.s 826a <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    8248:	\--|-> move.l 80(sp),64(sp)
    824e:	   |   clr.l 60(sp)
    8252:	   |   move.l 19b96 <DOSBase>,d0
    8258:	   |   movea.l d0,a6
    825a:	   |   move.l 64(sp),d1
    825e:	   |   move.l 60(sp),d2
    8262:	   |   jsr -312(a6)
    8266:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    826a:	   \-> movea.l 76(sp),a0
    826e:	       move.l 12(a0),d0
    8272:	       move.l 80(sp),-(sp)
    8276:	       move.l d0,-(sp)
    8278:	       jsr 958 <put4bytes>
    827e:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    8280:	       movea.l 76(sp),a0
    8284:	       move.l 36(a0),d0
    8288:	       move.l 80(sp),-(sp)
    828c:	       move.l d0,-(sp)
    828e:	       jsr 8d0 <put2bytes>
    8294:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    8296:	       move.l 80(sp),40(sp)
    829c:	       movea.l 76(sp),a0
    82a0:	       move.w 54(a0),d0
    82a4:	       movea.w d0,a0
    82a6:	       move.l a0,36(sp)
    82aa:	       move.l 19b96 <DOSBase>,d0
    82b0:	       movea.l d0,a6
    82b2:	       move.l 40(sp),d1
    82b6:	       move.l 36(sp),d2
    82ba:	       jsr -312(a6)
    82be:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    82c2:	       move.l 80(sp),28(sp)
    82c8:	       movea.l 76(sp),a0
    82cc:	       move.w 48(a0),d0
    82d0:	       movea.w d0,a0
    82d2:	       move.l a0,24(sp)
    82d6:	       move.l 19b96 <DOSBase>,d0
    82dc:	       movea.l d0,a6
    82de:	       move.l 28(sp),d1
    82e2:	       move.l 24(sp),d2
    82e6:	       jsr -312(a6)
    82ea:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    82ee:	       move.l 80(sp),16(sp)
    82f4:	       movea.l 76(sp),a0
    82f8:	       move.w 50(a0),d0
    82fc:	       movea.w d0,a0
    82fe:	       move.l a0,12(sp)
    8302:	       move.l 19b96 <DOSBase>,d0
    8308:	       movea.l d0,a6
    830a:	       move.l 16(sp),d1
    830e:	       move.l 12(sp),d2
    8312:	       jsr -312(a6)
    8316:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    831a:	       moveq #28,d0
    831c:	       add.l 76(sp),d0
    8320:	       move.l 80(sp),-(sp)
    8324:	       move.l d0,-(sp)
    8326:	       jsr 8aa4 <saveVariable>
    832c:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    832e:	       movea.l 76(sp),a0
    8332:	       move.b 56(a0),d0
    8336:	   /-- beq.s 8346 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    8338:	   |   pea 15320 <incbin_player_end+0x3ec>
    833e:	   |   jsr 12130 <KPrintF>
    8344:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    8346:	   \-> movea.l 76(sp),a0
    834a:	       move.l 24(a0),d0
    834e:	       move.l 80(sp),-(sp)
    8352:	       move.l d0,-(sp)
    8354:	       jsr 8918 <saveStack>
    835a:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    835c:	       clr.l 68(sp)
    8360:	   /-- bra.s 8384 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    8362:	/--|-> movea.l 76(sp),a0
    8366:	|  |   move.l 20(a0),d1
    836a:	|  |   move.l 68(sp),d0
    836e:	|  |   lsl.l #3,d0
    8370:	|  |   add.l d1,d0
    8372:	|  |   move.l 80(sp),-(sp)
    8376:	|  |   move.l d0,-(sp)
    8378:	|  |   jsr 8aa4 <saveVariable>
    837e:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    8380:	|  |   addq.l #1,68(sp)
    8384:	|  \-> movea.l 76(sp),a0
    8388:	|      move.l 8(a0),d0
    838c:	|      cmp.l 68(sp),d0
    8390:	\----- bgt.s 8362 <saveFunction+0x17a>
	}
}
    8392:	       nop
    8394:	       nop
    8396:	       move.l (sp)+,d2
    8398:	       movea.l (sp)+,a6
    839a:	       lea 64(sp),sp
    839e:	       rts

000083a0 <saveGame>:

BOOL saveGame (char * fname) {
    83a0:	          lea -272(sp),sp
    83a4:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    83a8:	          move.l 288(sp),268(sp)
    83ae:	          move.l #1006,264(sp)
    83b6:	          move.l 19b96 <DOSBase>,d0
    83bc:	          movea.l d0,a6
    83be:	          move.l 268(sp),d1
    83c2:	          move.l 264(sp),d2
    83c6:	          jsr -30(a6)
    83ca:	          move.l d0,260(sp)
    83ce:	          move.l 260(sp),d0
    83d2:	          move.l d0,256(sp)
	if (fp == NULL) {
    83d6:	      /-- bne.s 83ec <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    83d8:	      |   pea 15342 <incbin_player_end+0x40e>
    83de:	      |   jsr 12130 <KPrintF>
    83e4:	      |   addq.l #4,sp
		return FALSE;
    83e6:	      |   clr.w d0
    83e8:	/-----|-- bra.w 890e <saveGame+0x56e>
	}

	Write( fp, &"SLUDSA", 6);
    83ec:	|     \-> move.l 256(sp),252(sp)
    83f2:	|         move.l #86879,248(sp)
    83fa:	|         moveq #6,d0
    83fc:	|         move.l d0,244(sp)
    8400:	|         move.l 19b96 <DOSBase>,d0
    8406:	|         movea.l d0,a6
    8408:	|         move.l 252(sp),d1
    840c:	|         move.l 248(sp),d2
    8410:	|         move.l 244(sp),d3
    8414:	|         jsr -48(a6)
    8418:	|         move.l d0,240(sp)
	FPutC (fp, 0);
    841c:	|         move.l 256(sp),236(sp)
    8422:	|         clr.l 232(sp)
    8426:	|         move.l 19b96 <DOSBase>,d0
    842c:	|         movea.l d0,a6
    842e:	|         move.l 236(sp),d1
    8432:	|         move.l 232(sp),d2
    8436:	|         jsr -312(a6)
    843a:	|         move.l d0,228(sp)
	FPutC (fp, 0);
    843e:	|         move.l 256(sp),224(sp)
    8444:	|         clr.l 220(sp)
    8448:	|         move.l 19b96 <DOSBase>,d0
    844e:	|         movea.l d0,a6
    8450:	|         move.l 224(sp),d1
    8454:	|         move.l 220(sp),d2
    8458:	|         jsr -312(a6)
    845c:	|         move.l d0,216(sp)
	FPutC (fp, MAJOR_VERSION);
    8460:	|         move.l 256(sp),212(sp)
    8466:	|         moveq #2,d0
    8468:	|         move.l d0,208(sp)
    846c:	|         move.l 19b96 <DOSBase>,d0
    8472:	|         movea.l d0,a6
    8474:	|         move.l 212(sp),d1
    8478:	|         move.l 208(sp),d2
    847c:	|         jsr -312(a6)
    8480:	|         move.l d0,204(sp)
	FPutC (fp, MINOR_VERSION);
    8484:	|         move.l 256(sp),200(sp)
    848a:	|         moveq #2,d0
    848c:	|         move.l d0,196(sp)
    8490:	|         move.l 19b96 <DOSBase>,d0
    8496:	|         movea.l d0,a6
    8498:	|         move.l 200(sp),d1
    849c:	|         move.l 196(sp),d2
    84a0:	|         jsr -312(a6)
    84a4:	|         move.l d0,192(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    84a8:	|         move.l 256(sp),188(sp)
    84ae:	|         move.l #105268,184(sp)
    84b6:	|         moveq #8,d0
    84b8:	|         move.l d0,180(sp)
    84bc:	|         move.l 19b96 <DOSBase>,d0
    84c2:	|         movea.l d0,a6
    84c4:	|         move.l 188(sp),d1
    84c8:	|         move.l 184(sp),d2
    84cc:	|         move.l 180(sp),d3
    84d0:	|         jsr -48(a6)
    84d4:	|         move.l d0,176(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    84d8:	|         move.l 256(sp),172(sp)
    84de:	|         move.w 18066 <allowAnyFilename>,d0
    84e4:	|         movea.w d0,a0
    84e6:	|         move.l a0,168(sp)
    84ea:	|         move.l 19b96 <DOSBase>,d0
    84f0:	|         movea.l d0,a6
    84f2:	|         move.l 172(sp),d1
    84f6:	|         move.l 168(sp),d2
    84fa:	|         jsr -312(a6)
    84fe:	|         move.l d0,164(sp)
	FPutC (fp, captureAllKeys);
    8502:	|         move.l 256(sp),160(sp)
    8508:	|         move.w 19b32 <captureAllKeys>,d0
    850e:	|         movea.w d0,a0
    8510:	|         move.l a0,156(sp)
    8514:	|         move.l 19b96 <DOSBase>,d0
    851a:	|         movea.l d0,a6
    851c:	|         move.l 160(sp),d1
    8520:	|         move.l 156(sp),d2
    8524:	|         jsr -312(a6)
    8528:	|         move.l d0,152(sp)
	FPutC (fp, TRUE); // updateDisplay
    852c:	|         move.l 256(sp),148(sp)
    8532:	|         moveq #1,d0
    8534:	|         move.l d0,144(sp)
    8538:	|         move.l 19b96 <DOSBase>,d0
    853e:	|         movea.l d0,a6
    8540:	|         move.l 148(sp),d1
    8544:	|         move.l 144(sp),d2
    8548:	|         jsr -312(a6)
    854c:	|         move.l d0,140(sp)
	FPutC (fp, fontTableSize>0);
    8550:	|         move.l 256(sp),136(sp)
    8556:	|         move.l 19c78 <fontTableSize>,d0
    855c:	|         sgt d0
    855e:	|         neg.b d0
    8560:	|         move.b d0,d0
    8562:	|         andi.l #255,d0
    8568:	|         move.l d0,132(sp)
    856c:	|         move.l 19b96 <DOSBase>,d0
    8572:	|         movea.l d0,a6
    8574:	|         move.l 136(sp),d1
    8578:	|         move.l 132(sp),d2
    857c:	|         jsr -312(a6)
    8580:	|         move.l d0,128(sp)

	if (fontTableSize>0) {
    8584:	|         move.l 19c78 <fontTableSize>,d0
    858a:	|     /-- ble.s 85c8 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    858c:	|     |   move.l 19c70 <loadedFontNum>,d0
    8592:	|     |   move.l 256(sp),-(sp)
    8596:	|     |   move.l d0,-(sp)
    8598:	|     |   jsr 8d0 <put2bytes>
    859e:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    85a0:	|     |   move.l 19c6c <fontHeight>,d0
    85a6:	|     |   move.l 256(sp),-(sp)
    85aa:	|     |   move.l d0,-(sp)
    85ac:	|     |   jsr 8d0 <put2bytes>
    85b2:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    85b4:	|     |   move.l 19c74 <fontOrderString>,d0
    85ba:	|     |   move.l 256(sp),-(sp)
    85be:	|     |   move.l d0,-(sp)
    85c0:	|     |   jsr bd8 <writeString>
    85c6:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    85c8:	|     \-> move.w 185fe <fontSpace>,d0
    85ce:	|         movea.w d0,a0
    85d0:	|         move.l 256(sp),-(sp)
    85d4:	|         move.l a0,-(sp)
    85d6:	|         jsr a9c <putSigned>
    85dc:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    85de:	|         move.l 19c32 <cameraX>,d0
    85e4:	|         move.l 256(sp),-(sp)
    85e8:	|         move.l d0,-(sp)
    85ea:	|         jsr 8d0 <put2bytes>
    85f0:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    85f2:	|         move.l 19c36 <cameraY>,d0
    85f8:	|         move.l 256(sp),-(sp)
    85fc:	|         move.l d0,-(sp)
    85fe:	|         jsr 8d0 <put2bytes>
    8604:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    8606:	|         move.l 18098 <cameraZoom>,d0
    860c:	|         move.l 256(sp),-(sp)
    8610:	|         move.l d0,-(sp)
    8612:	|         jsr a46 <putFloat>
    8618:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    861a:	|         move.l 256(sp),124(sp)
    8620:	|         move.b 18068 <brightnessLevel>,d0
    8626:	|         move.b d0,d0
    8628:	|         andi.l #255,d0
    862e:	|         move.l d0,120(sp)
    8632:	|         move.l 19b96 <DOSBase>,d0
    8638:	|         movea.l d0,a6
    863a:	|         move.l 124(sp),d1
    863e:	|         move.l 120(sp),d2
    8642:	|         jsr -312(a6)
    8646:	|         move.l d0,116(sp)

	// Save event handlers
	saveHandlers (fp);
    864a:	|         move.l 256(sp),-(sp)
    864e:	|         jsr 3b12 <saveHandlers>
    8654:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    8656:	|         move.l 256(sp),-(sp)
    865a:	|         jsr 10dea <saveRegions>
    8660:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    8662:	|         move.l 19a7a <mouseCursorAnim>,d0
    8668:	|         move.l 256(sp),-(sp)
    866c:	|         move.l d0,-(sp)
    866e:	|         jsr 6c50 <saveAnim>
    8674:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    8676:	|         move.l 19a7e <mouseCursorFrameNum>,d0
    867c:	|         move.l 256(sp),-(sp)
    8680:	|         move.l d0,-(sp)
    8682:	|         jsr 8d0 <put2bytes>
    8688:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    868a:	|         move.l 19b2a <allRunningFunctions>,276(sp)
	int countFunctions = 0;
    8692:	|         clr.l 272(sp)
	while (thisFunction) {
    8696:	|     /-- bra.s 86a6 <saveGame+0x306>
		countFunctions ++;
    8698:	|  /--|-> addq.l #1,272(sp)
		thisFunction = thisFunction -> next;
    869c:	|  |  |   movea.l 276(sp),a0
    86a0:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    86a6:	|  |  \-> tst.l 276(sp)
    86aa:	|  \----- bne.s 8698 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    86ac:	|         move.l 256(sp),-(sp)
    86b0:	|         move.l 276(sp),-(sp)
    86b4:	|         jsr 8d0 <put2bytes>
    86ba:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    86bc:	|         move.l 19b2a <allRunningFunctions>,276(sp)
	while (thisFunction) {
    86c4:	|     /-- bra.s 86e0 <saveGame+0x340>
		saveFunction (thisFunction, fp);
    86c6:	|  /--|-> move.l 256(sp),-(sp)
    86ca:	|  |  |   move.l 280(sp),-(sp)
    86ce:	|  |  |   jsr 81e8 <saveFunction>
    86d4:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    86d6:	|  |  |   movea.l 276(sp),a0
    86da:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    86e0:	|  |  \-> tst.l 276(sp)
    86e4:	|  \----- bne.s 86c6 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    86e6:	|         clr.l 280(sp)
    86ea:	|     /-- bra.s 870c <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    86ec:	|  /--|-> move.l 19b40 <globalVars>,d1
    86f2:	|  |  |   move.l 280(sp),d0
    86f6:	|  |  |   lsl.l #3,d0
    86f8:	|  |  |   add.l d1,d0
    86fa:	|  |  |   move.l 256(sp),-(sp)
    86fe:	|  |  |   move.l d0,-(sp)
    8700:	|  |  |   jsr 8aa4 <saveVariable>
    8706:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    8708:	|  |  |   addq.l #1,280(sp)
    870c:	|  |  \-> move.l 19b66 <numGlobals>,d0
    8712:	|  |      cmp.l 280(sp),d0
    8716:	|  \----- bgt.s 86ec <saveGame+0x34c>
	}

	savePeople (fp);
    8718:	|         move.l 256(sp),-(sp)
    871c:	|         jsr 6d78 <savePeople>
    8722:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    8724:	|         movea.l 19c84 <currentFloor>,a0
    872a:	|         move.l 8(a0),d0
    872e:	|  /----- beq.s 876c <saveGame+0x3cc>
		FPutC (fp, 1);
    8730:	|  |      move.l 256(sp),100(sp)
    8736:	|  |      moveq #1,d0
    8738:	|  |      move.l d0,96(sp)
    873c:	|  |      move.l 19b96 <DOSBase>,d0
    8742:	|  |      movea.l d0,a6
    8744:	|  |      move.l 100(sp),d1
    8748:	|  |      move.l 96(sp),d2
    874c:	|  |      jsr -312(a6)
    8750:	|  |      move.l d0,92(sp)
		put2bytes (currentFloor -> originalNum, fp);
    8754:	|  |      movea.l 19c84 <currentFloor>,a0
    875a:	|  |      move.l (a0),d0
    875c:	|  |      move.l 256(sp),-(sp)
    8760:	|  |      move.l d0,-(sp)
    8762:	|  |      jsr 8d0 <put2bytes>
    8768:	|  |      addq.l #8,sp
    876a:	|  |  /-- bra.s 878e <saveGame+0x3ee>
	} else FPutC (fp, 0);
    876c:	|  \--|-> move.l 256(sp),112(sp)
    8772:	|     |   clr.l 108(sp)
    8776:	|     |   move.l 19b96 <DOSBase>,d0
    877c:	|     |   movea.l d0,a6
    877e:	|     |   move.l 112(sp),d1
    8782:	|     |   move.l 108(sp),d2
    8786:	|     |   jsr -312(a6)
    878a:	|     |   move.l d0,104(sp)

	if (zBuffer.tex) {
    878e:	|     \-> move.l 19afe <zBuffer+0x50>,d0
    8794:	|  /----- beq.s 87d0 <saveGame+0x430>
		FPutC (fp, 1);
    8796:	|  |      move.l 256(sp),76(sp)
    879c:	|  |      moveq #1,d0
    879e:	|  |      move.l d0,72(sp)
    87a2:	|  |      move.l 19b96 <DOSBase>,d0
    87a8:	|  |      movea.l d0,a6
    87aa:	|  |      move.l 76(sp),d1
    87ae:	|  |      move.l 72(sp),d2
    87b2:	|  |      jsr -312(a6)
    87b6:	|  |      move.l d0,68(sp)
		put2bytes (zBuffer.originalNum, fp);
    87ba:	|  |      move.l 19afa <zBuffer+0x4c>,d0
    87c0:	|  |      move.l 256(sp),-(sp)
    87c4:	|  |      move.l d0,-(sp)
    87c6:	|  |      jsr 8d0 <put2bytes>
    87cc:	|  |      addq.l #8,sp
    87ce:	|  |  /-- bra.s 87f2 <saveGame+0x452>
	} else FPutC (fp,0);
    87d0:	|  \--|-> move.l 256(sp),88(sp)
    87d6:	|     |   clr.l 84(sp)
    87da:	|     |   move.l 19b96 <DOSBase>,d0
    87e0:	|     |   movea.l d0,a6
    87e2:	|     |   move.l 88(sp),d1
    87e6:	|     |   move.l 84(sp),d2
    87ea:	|     |   jsr -312(a6)
    87ee:	|     |   move.l d0,80(sp)

	FPutC (fp, speechMode);
    87f2:	|     \-> move.l 256(sp),64(sp)
    87f8:	|         move.l 19c46 <speechMode>,60(sp)
    8800:	|         move.l 19b96 <DOSBase>,d0
    8806:	|         movea.l d0,a6
    8808:	|         move.l 64(sp),d1
    880c:	|         move.l 60(sp),d2
    8810:	|         jsr -312(a6)
    8814:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    8818:	|         move.b 185d4 <fadeMode>,d0
    881e:	|         move.b d0,d0
    8820:	|         andi.l #255,d0
    8826:	|         move.l d0,52(sp)
    882a:	|         move.l 256(sp),48(sp)
    8830:	|         move.l 19b96 <DOSBase>,d0
    8836:	|         movea.l d0,a6
    8838:	|         move.l 52(sp),d1
    883c:	|         move.l 48(sp),d2
    8840:	|         jsr -312(a6)
    8844:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    8848:	|         move.l 19bd8 <speech>,d0
    884e:	|         move.l 256(sp),-(sp)
    8852:	|         move.l d0,-(sp)
    8854:	|         jsr 4e3a <saveSpeech>
    885a:	|         addq.l #8,sp
	saveStatusBars (fp);
    885c:	|         move.l 256(sp),-(sp)
    8860:	|         jsr 4836 <saveStatusBars>
    8866:	|         addq.l #4,sp
	saveSounds (fp);
    8868:	|         move.l 256(sp),-(sp)
    886c:	|         jsr 8be8 <saveSounds>
    8872:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    8874:	|         move.w 19c30 <saveEncoding>,d0
    887a:	|         move.w d0,d0
    887c:	|         andi.l #65535,d0
    8882:	|         move.l 256(sp),-(sp)
    8886:	|         move.l d0,-(sp)
    8888:	|         jsr 8d0 <put2bytes>
    888e:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    8890:	|         move.l 19c22 <parallaxStuff>,d0
    8896:	|         move.l 256(sp),-(sp)
    889a:	|         move.l d0,-(sp)
    889c:	|         jsr 8e6e <saveParallaxRecursive>
    88a2:	|         addq.l #8,sp
	FPutC (fp, 0);
    88a4:	|         move.l 256(sp),40(sp)
    88aa:	|         clr.l 36(sp)
    88ae:	|         move.l 19b96 <DOSBase>,d0
    88b4:	|         movea.l d0,a6
    88b6:	|         move.l 40(sp),d1
    88ba:	|         move.l 36(sp),d2
    88be:	|         jsr -312(a6)
    88c2:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    88c6:	|         move.l 256(sp),28(sp)
    88cc:	|         move.l 1806e <languageNum>,24(sp)
    88d4:	|         move.l 19b96 <DOSBase>,d0
    88da:	|         movea.l d0,a6
    88dc:	|         move.l 28(sp),d1
    88e0:	|         move.l 24(sp),d2
    88e4:	|         jsr -312(a6)
    88e8:	|         move.l d0,20(sp)

	Close(fp);
    88ec:	|         move.l 256(sp),16(sp)
    88f2:	|         move.l 19b96 <DOSBase>,d0
    88f8:	|         movea.l d0,a6
    88fa:	|         move.l 16(sp),d1
    88fe:	|         jsr -36(a6)
    8902:	|         move.l d0,12(sp)
	clearStackLib ();
    8906:	|         jsr 7e9e <clearStackLib>
	return TRUE;
    890c:	|         moveq #1,d0
}
    890e:	\-------> movem.l (sp)+,d2-d3/a6
    8912:	          lea 272(sp),sp
    8916:	          rts

00008918 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    8918:	       lea -12(sp),sp
	int elements = 0;
    891c:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    8920:	       move.l 16(sp),(sp)
	while (search) {
    8924:	   /-- bra.s 8930 <saveStack+0x18>
		elements ++;
    8926:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    892a:	|  |   movea.l (sp),a0
    892c:	|  |   move.l 8(a0),(sp)
	while (search) {
    8930:	|  \-> tst.l (sp)
    8932:	\----- bne.s 8926 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    8934:	       move.l 20(sp),-(sp)
    8938:	       move.l 12(sp),-(sp)
    893c:	       jsr 8d0 <put2bytes>
    8942:	       addq.l #8,sp
	search = vs;
    8944:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    8948:	       clr.l 4(sp)
    894c:	   /-- bra.s 8968 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    894e:	/--|-> move.l (sp),d0
    8950:	|  |   move.l 20(sp),-(sp)
    8954:	|  |   move.l d0,-(sp)
    8956:	|  |   jsr 8aa4 <saveVariable>
    895c:	|  |   addq.l #8,sp
		search = search -> next;
    895e:	|  |   movea.l (sp),a0
    8960:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    8964:	|  |   addq.l #1,4(sp)
    8968:	|  \-> move.l 4(sp),d0
    896c:	|      cmp.l 8(sp),d0
    8970:	\----- blt.s 894e <saveStack+0x36>
	}
}
    8972:	       nop
    8974:	       nop
    8976:	       lea 12(sp),sp
    897a:	       rts

0000897c <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    897c:	             lea -44(sp),sp
    8980:	             move.l a6,-(sp)
    8982:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    8984:	             move.l 19c0c <stackLib>,48(sp)
	int a = 0;
    898c:	             clr.l 44(sp)
	while (s) {
    8990:	      /----- bra.s 89ee <saveStackRef+0x72>
		if (s -> stack == vs) {
    8992:	   /--|----> movea.l 48(sp),a0
    8996:	   |  |      move.l (a0),d0
    8998:	   |  |      cmp.l 56(sp),d0
    899c:	   |  |  /-- bne.s 89e0 <saveStackRef+0x64>
			FPutC (fp, 1);
    899e:	   |  |  |   move.l 60(sp),16(sp)
    89a4:	   |  |  |   moveq #1,d0
    89a6:	   |  |  |   move.l d0,12(sp)
    89aa:	   |  |  |   move.l 19b96 <DOSBase>,d0
    89b0:	   |  |  |   movea.l d0,a6
    89b2:	   |  |  |   move.l 16(sp),d1
    89b6:	   |  |  |   move.l 12(sp),d2
    89ba:	   |  |  |   jsr -312(a6)
    89be:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    89c2:	   |  |  |   move.l 19c08 <stackLibTotal>,d0
    89c8:	   |  |  |   sub.l 44(sp),d0
    89cc:	   |  |  |   move.l 60(sp),-(sp)
    89d0:	   |  |  |   move.l d0,-(sp)
    89d2:	   |  |  |   jsr 8d0 <put2bytes>
    89d8:	   |  |  |   addq.l #8,sp
			return TRUE;
    89da:	   |  |  |   moveq #1,d0
    89dc:	/--|--|--|-- bra.w 8a9a <saveStackRef+0x11e>
		}
		s = s -> next;
    89e0:	|  |  |  \-> movea.l 48(sp),a0
    89e4:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    89ea:	|  |  |      addq.l #1,44(sp)
	while (s) {
    89ee:	|  |  \----> tst.l 48(sp)
    89f2:	|  \-------- bne.s 8992 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    89f4:	|            move.l 60(sp),40(sp)
    89fa:	|            clr.l 36(sp)
    89fe:	|            move.l 19b96 <DOSBase>,d0
    8a04:	|            movea.l d0,a6
    8a06:	|            move.l 40(sp),d1
    8a0a:	|            move.l 36(sp),d2
    8a0e:	|            jsr -312(a6)
    8a12:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    8a16:	|            movea.l 56(sp),a0
    8a1a:	|            move.l (a0),d0
    8a1c:	|            move.l 60(sp),-(sp)
    8a20:	|            move.l d0,-(sp)
    8a22:	|            jsr 8918 <saveStack>
    8a28:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    8a2a:	|            moveq #8,d0
    8a2c:	|            move.l d0,28(sp)
    8a30:	|            clr.l 24(sp)
    8a34:	|            move.l 19b8e <SysBase>,d0
    8a3a:	|            movea.l d0,a6
    8a3c:	|            move.l 28(sp),d0
    8a40:	|            move.l 24(sp),d1
    8a44:	|            jsr -684(a6)
    8a48:	|            move.l d0,20(sp)
    8a4c:	|            move.l 20(sp),d0
    8a50:	|            move.l d0,48(sp)
	stackLibTotal ++;
    8a54:	|            move.l 19c08 <stackLibTotal>,d0
    8a5a:	|            addq.l #1,d0
    8a5c:	|            move.l d0,19c08 <stackLibTotal>
	if (! s) {
    8a62:	|            tst.l 48(sp)
    8a66:	|        /-- bne.s 8a7a <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    8a68:	|        |   pea 1538e <incbin_player_end+0x45a>
    8a6e:	|        |   jsr 12130 <KPrintF>
    8a74:	|        |   addq.l #4,sp
		return FALSE;
    8a76:	|        |   clr.w d0
    8a78:	+--------|-- bra.s 8a9a <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    8a7a:	|        \-> move.l 19c0c <stackLib>,d0
    8a80:	|            movea.l 48(sp),a0
    8a84:	|            move.l d0,4(a0)
	s -> stack = vs;
    8a88:	|            movea.l 48(sp),a0
    8a8c:	|            move.l 56(sp),(a0)
	stackLib = s;
    8a90:	|            move.l 48(sp),19c0c <stackLib>
	return TRUE;
    8a98:	|            moveq #1,d0
}
    8a9a:	\----------> move.l (sp)+,d2
    8a9c:	             movea.l (sp)+,a6
    8a9e:	             lea 44(sp),sp
    8aa2:	             rts

00008aa4 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    8aa4:	          lea -12(sp),sp
    8aa8:	          move.l a6,-(sp)
    8aaa:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    8aac:	          move.l 28(sp),16(sp)
    8ab2:	          movea.l 24(sp),a0
    8ab6:	          move.l (a0),d0
    8ab8:	          move.l d0,12(sp)
    8abc:	          move.l 19b96 <DOSBase>,d0
    8ac2:	          movea.l d0,a6
    8ac4:	          move.l 16(sp),d1
    8ac8:	          move.l 12(sp),d2
    8acc:	          jsr -312(a6)
    8ad0:	          move.l d0,8(sp)
	switch (from -> varType) {
    8ad4:	          movea.l 24(sp),a0
    8ad8:	          move.l (a0),d0
    8ada:	          moveq #9,d1
    8adc:	          cmp.l d0,d1
    8ade:	      /-- bcs.w 8b8e <saveVariable+0xea>
    8ae2:	      |   add.l d0,d0
    8ae4:	      |   movea.l d0,a0
    8ae6:	      |   adda.l #35570,a0
    8aec:	      |   move.w (a0),d0
    8aee:	      |   jmp (8af2 <saveVariable+0x4e>,pc,d0.w)
    8af2:	      |   ori.l #1310740,(a0)+
    8af8:	      |   ori.b #20,(20,a0,d0.w)
    8afe:	      |   .short 0x004c
    8b00:	      |   ori.b #126,(a4)
    8b04:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    8b08:	      |   ori.b #40,(a0)+
    8b0c:	      |   ori.b #47,d4
    8b10:	      |   ori.b #0,(a4)+
    8b14:	      |   jsr 958 <put4bytes>
    8b1a:	      |   addq.l #8,sp
		return TRUE;
    8b1c:	      |   moveq #1,d0
    8b1e:	/-----|-- bra.w 8bca <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    8b22:	|     |   movea.l 24(sp),a0
    8b26:	|     |   move.l 4(a0),d0
    8b2a:	|     |   move.l 28(sp),-(sp)
    8b2e:	|     |   move.l d0,-(sp)
    8b30:	|     |   jsr bd8 <writeString>
    8b36:	|     |   addq.l #8,sp
		return TRUE;
    8b38:	|     |   moveq #1,d0
    8b3a:	+-----|-- bra.w 8bca <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    8b3e:	|     |   movea.l 24(sp),a0
    8b42:	|     |   move.l 4(a0),d0
    8b46:	|     |   move.l 28(sp),-(sp)
    8b4a:	|     |   move.l d0,-(sp)
    8b4c:	|     |   jsr 897c <saveStackRef>
    8b52:	|     |   addq.l #8,sp
    8b54:	+-----|-- bra.s 8bca <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    8b56:	|     |   movea.l 24(sp),a0
    8b5a:	|     |   move.l 4(a0),d0
    8b5e:	|     |   move.l 28(sp),-(sp)
    8b62:	|     |   move.l d0,-(sp)
    8b64:	|     |   jsr 6d1a <saveCostume>
    8b6a:	|     |   addq.l #8,sp
		return FALSE;
    8b6c:	|     |   clr.w d0
    8b6e:	+-----|-- bra.s 8bca <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    8b70:	|     |   movea.l 24(sp),a0
    8b74:	|     |   move.l 4(a0),d0
    8b78:	|     |   move.l 28(sp),-(sp)
    8b7c:	|     |   move.l d0,-(sp)
    8b7e:	|     |   jsr 6c50 <saveAnim>
    8b84:	|     |   addq.l #8,sp
		return FALSE;
    8b86:	|     |   clr.w d0
    8b88:	+-----|-- bra.s 8bca <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    8b8a:	|     |   clr.w d0
    8b8c:	+-----|-- bra.s 8bca <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    8b8e:	|     \-> movea.l 24(sp),a0
    8b92:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    8b94:	|         moveq #10,d1
    8b96:	|         cmp.l d0,d1
    8b98:	|  /----- bcs.s 8bb2 <saveVariable+0x10e>
						typeName[from->varType] :
    8b9a:	|  |      movea.l 24(sp),a0
    8b9e:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    8ba0:	|  |      add.l d0,d0
    8ba2:	|  |      movea.l d0,a1
    8ba4:	|  |      adda.l d0,a1
    8ba6:	|  |      lea 185d6 <typeName>,a0
    8bac:	|  |      move.l (0,a1,a0.l),d0
    8bb0:	|  |  /-- bra.s 8bb8 <saveVariable+0x114>
    8bb2:	|  \--|-> move.l #86963,d0
    8bb8:	|     \-> move.l d0,-(sp)
    8bba:	|         pea 153ba <incbin_player_end+0x486>
    8bc0:	|         jsr 12130 <KPrintF>
    8bc6:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    8bc8:	|         moveq #1,d0
    8bca:	\-------> move.l (sp)+,d2
    8bcc:	          movea.l (sp)+,a6
    8bce:	          lea 12(sp),sp
    8bd2:	          rts

00008bd4 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    8bd4:	moveq #0,d0
}
    8bd6:	rts

00008bd8 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    8bd8:	nop
    8bda:	rts

00008bdc <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    8bdc:	nop
    8bde:	rts

00008be0 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    8be0:	moveq #1,d0
}
    8be2:	rts

00008be4 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    8be4:	nop
    8be6:	rts

00008be8 <saveSounds>:

void saveSounds (BPTR fp) {
    8be8:	lea -12(sp),sp
    8bec:	move.l a6,-(sp)
    8bee:	move.l d2,-(sp)
	FPutC (fp,0);
    8bf0:	move.l 24(sp),16(sp)
    8bf6:	clr.l 12(sp)
    8bfa:	move.l 19b96 <DOSBase>,d0
    8c00:	movea.l d0,a6
    8c02:	move.l 16(sp),d1
    8c06:	move.l 12(sp),d2
    8c0a:	jsr -312(a6)
    8c0e:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    8c12:	move.l 18094 <defSoundVol>,d0
    8c18:	move.l 24(sp),-(sp)
    8c1c:	move.l d0,-(sp)
    8c1e:	jsr 8d0 <put2bytes>
    8c24:	addq.l #8,sp
	put2bytes (defVol, fp);
    8c26:	move.l 18090 <defVol>,d0
    8c2c:	move.l 24(sp),-(sp)
    8c30:	move.l d0,-(sp)
    8c32:	jsr 8d0 <put2bytes>
    8c38:	addq.l #8,sp
}
    8c3a:	nop
    8c3c:	move.l (sp)+,d2
    8c3e:	movea.l (sp)+,a6
    8c40:	lea 12(sp),sp
    8c44:	rts

00008c46 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    8c46:	move.l 4(sp),18090 <defVol>
}
    8c4e:	nop
    8c50:	rts

00008c52 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    8c52:	move.l 4(sp),18094 <defSoundVol>
}
    8c5a:	nop
    8c5c:	rts

00008c5e <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    8c5e:	nop
    8c60:	rts

00008c62 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    8c62:	nop
    8c64:	rts

00008c66 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    8c66:	nop
    8c68:	rts

00008c6a <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    8c6a:	subq.l #4,sp
    8c6c:	move.l 12(sp),d0
    8c70:	move.w d0,d0
    8c72:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    8c76:	moveq #1,d0
}
    8c78:	addq.l #4,sp
    8c7a:	rts

00008c7c <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    8c7c:	nop
    8c7e:	rts

00008c80 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	KPrintF("blankScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    8c80:	pea 153dd <incbin_player_end+0x4a9>
    8c86:	jsr 12130 <KPrintF>
    8c8c:	addq.l #4,sp
}
    8c8e:	nop
    8c90:	rts

00008c92 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    8c92:	pea 15417 <incbin_player_end+0x4e3>
    8c98:	jsr 12130 <KPrintF>
    8c9e:	addq.l #4,sp
}
    8ca0:	nop
    8ca2:	rts

00008ca4 <drawHorizontalLine>:

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    8ca4:	movea.l 8(sp),a1
    8ca8:	movea.l 12(sp),a0
    8cac:	move.l 8(sp),d1
    8cb0:	move.l 4(sp),d0
    8cb4:	move.l a1,-(sp)
    8cb6:	move.l a0,-(sp)
    8cb8:	move.l d1,-(sp)
    8cba:	move.l d0,-(sp)
    8cbc:	jsr df4 <drawLine>
    8cc2:	lea 16(sp),sp
}
    8cc6:	nop
    8cc8:	rts

00008cca <drawVerticalLine>:

void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    8cca:	movea.l 12(sp),a1
    8cce:	movea.l 4(sp),a0
    8cd2:	move.l 8(sp),d1
    8cd6:	move.l 4(sp),d0
    8cda:	move.l a1,-(sp)
    8cdc:	move.l a0,-(sp)
    8cde:	move.l d1,-(sp)
    8ce0:	move.l d0,-(sp)
    8ce2:	jsr df4 <drawLine>
    8ce8:	lea 16(sp),sp
}
    8cec:	nop
    8cee:	rts

00008cf0 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    8cf0:	pea 15450 <incbin_player_end+0x51c>
    8cf6:	jsr 12130 <KPrintF>
    8cfc:	addq.l #4,sp
}
    8cfe:	nop
    8d00:	rts

00008d02 <killBackDrop>:


void killBackDrop () {
	deleteTextures (1, &backdropTextureName);
    8d02:	pea 19c1c <backdropTextureName>
    8d08:	pea 1 <_start+0x1>
    8d0c:	jsr f76 <deleteTextures>
    8d12:	addq.l #8,sp
	backdropTextureName = 0;
    8d14:	clr.l 19c1c <backdropTextureName>
	backdropExists = FALSE;
    8d1a:	clr.w 19c20 <backdropExists>
}
    8d20:	nop
    8d22:	rts

00008d24 <killParallax>:

void killParallax () {
    8d24:	          lea -12(sp),sp
    8d28:	          move.l a6,-(sp)
	while (parallaxStuff) {
    8d2a:	   /----- bra.s 8d96 <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    8d2c:	/--|----> move.l 19c22 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    8d34:	|  |      movea.l 12(sp),a0
    8d38:	|  |      move.l 42(a0),d0
    8d3c:	|  |      move.l d0,19c22 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    8d42:	|  |      move.l 12(sp),d0
    8d46:	|  |      addq.l #4,d0
    8d48:	|  |      move.l d0,-(sp)
    8d4a:	|  |      pea 1 <_start+0x1>
    8d4e:	|  |      jsr f76 <deleteTextures>
    8d54:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    8d56:	|  |      movea.l 12(sp),a0
    8d5a:	|  |      move.l (a0),d0
    8d5c:	|  |  /-- beq.s 8d76 <killParallax+0x52>
    8d5e:	|  |  |   movea.l 12(sp),a0
    8d62:	|  |  |   move.l (a0),8(sp)
    8d66:	|  |  |   move.l 19b8e <SysBase>,d0
    8d6c:	|  |  |   movea.l d0,a6
    8d6e:	|  |  |   movea.l 8(sp),a1
    8d72:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    8d76:	|  |  \-> tst.l 12(sp)
    8d7a:	|  |  /-- beq.s 8d92 <killParallax+0x6e>
    8d7c:	|  |  |   move.l 12(sp),4(sp)
    8d82:	|  |  |   move.l 19b8e <SysBase>,d0
    8d88:	|  |  |   movea.l d0,a6
    8d8a:	|  |  |   movea.l 4(sp),a1
    8d8e:	|  |  |   jsr -690(a6)
		k = NULL;
    8d92:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    8d96:	|  \----> move.l 19c22 <parallaxStuff>,d0
    8d9c:	\-------- bne.s 8d2c <killParallax+0x8>
	}
}
    8d9e:	          nop
    8da0:	          nop
    8da2:	          movea.l (sp)+,a6
    8da4:	          lea 12(sp),sp
    8da8:	          rts

00008daa <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {

	KPrintF("loadBackDrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    8daa:	pea 15471 <incbin_player_end+0x53d>
    8db0:	jsr 12130 <KPrintF>
    8db6:	addq.l #4,sp
}
    8db8:	nop
    8dba:	rts

00008dbc <loadParallax>:

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    8dbc:	subq.l #8,sp
    8dbe:	movea.l 12(sp),a0
    8dc2:	move.l 16(sp),d1
    8dc6:	move.l 20(sp),d0
    8dca:	movea.w a0,a0
    8dcc:	move.w a0,6(sp)
    8dd0:	move.w d1,d1
    8dd2:	move.w d1,4(sp)
    8dd6:	move.w d0,d0
    8dd8:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    8ddc:	pea 154ab <incbin_player_end+0x577>
    8de2:	jsr 12130 <KPrintF>
    8de8:	addq.l #4,sp

}
    8dea:	nop
    8dec:	addq.l #8,sp
    8dee:	rts

00008df0 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    8df0:	pea 154ce <incbin_player_end+0x59a>
    8df6:	jsr 12130 <KPrintF>
    8dfc:	addq.l #4,sp
}
    8dfe:	nop
    8e00:	rts

00008e02 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    8e02:	pea 19c26 <snapshotTextureName>
    8e08:	pea 1 <_start+0x1>
    8e0c:	jsr f76 <deleteTextures>
    8e12:	addq.l #8,sp
	snapshotTextureName = 0;
    8e14:	clr.l 19c26 <snapshotTextureName>
}
    8e1a:	nop
    8e1c:	rts

00008e1e <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    8e1e:	jsr 8d02 <killBackDrop>
	killParallax ();
    8e24:	jsr 8d24 <killParallax>
	killZBuffer ();
    8e2a:	jsr 15ae <killZBuffer>
	sceneWidth = x;
    8e30:	move.l 4(sp),d0
    8e34:	move.l d0,19c14 <sceneWidth>
	sceneHeight = y;
    8e3a:	move.l 8(sp),d0
    8e3e:	move.l d0,19c18 <sceneHeight>
	return TRUE;
    8e44:	moveq #1,d0
}
    8e46:	rts

00008e48 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    8e48:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    8e4a:	move.l 12(sp),-(sp)
    8e4e:	jsr 6bc <get2bytes>
    8e54:	addq.l #4,sp
    8e56:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    8e5a:	move.l 12(sp),-(sp)
    8e5e:	jsr 6bc <get2bytes>
    8e64:	addq.l #4,sp
    8e66:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    8e68:	moveq #1,d0
}
    8e6a:	addq.l #8,sp
    8e6c:	rts

00008e6e <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    8e6e:	   /-> lea -12(sp),sp
    8e72:	   |   move.l a6,-(sp)
    8e74:	   |   move.l d2,-(sp)
	if (me) {
    8e76:	   |   tst.l 24(sp)
    8e7a:	/--|-- beq.w 8f10 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    8e7e:	|  |   movea.l 24(sp),a0
    8e82:	|  |   move.l 42(a0),d0
    8e86:	|  |   move.l 28(sp),-(sp)
    8e8a:	|  |   move.l d0,-(sp)
    8e8c:	|  \-- jsr 8e6e <saveParallaxRecursive>(pc)
    8e90:	|      addq.l #8,sp
		FPutC (fp, 1);
    8e92:	|      move.l 28(sp),16(sp)
    8e98:	|      moveq #1,d0
    8e9a:	|      move.l d0,12(sp)
    8e9e:	|      move.l 19b96 <DOSBase>,d0
    8ea4:	|      movea.l d0,a6
    8ea6:	|      move.l 16(sp),d1
    8eaa:	|      move.l 12(sp),d2
    8eae:	|      jsr -312(a6)
    8eb2:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    8eb6:	|      movea.l 24(sp),a0
    8eba:	|      move.w 28(a0),d0
    8ebe:	|      move.w d0,d0
    8ec0:	|      andi.l #65535,d0
    8ec6:	|      move.l 28(sp),-(sp)
    8eca:	|      move.l d0,-(sp)
    8ecc:	|      jsr 8d0 <put2bytes>
    8ed2:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    8ed4:	|      movea.l 24(sp),a0
    8ed8:	|      move.w 30(a0),d0
    8edc:	|      move.w d0,d0
    8ede:	|      andi.l #65535,d0
    8ee4:	|      move.l 28(sp),-(sp)
    8ee8:	|      move.l d0,-(sp)
    8eea:	|      jsr 8d0 <put2bytes>
    8ef0:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    8ef2:	|      movea.l 24(sp),a0
    8ef6:	|      move.w 32(a0),d0
    8efa:	|      move.w d0,d0
    8efc:	|      andi.l #65535,d0
    8f02:	|      move.l 28(sp),-(sp)
    8f06:	|      move.l d0,-(sp)
    8f08:	|      jsr 8d0 <put2bytes>
    8f0e:	|      addq.l #8,sp
	}
}
    8f10:	\----> nop
    8f12:	       move.l (sp)+,d2
    8f14:	       movea.l (sp)+,a6
    8f16:	       lea 12(sp),sp
    8f1a:	       rts

00008f1c <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    8f1c:	pea 15507 <incbin_player_end+0x5d3>
    8f22:	jsr 12130 <KPrintF>
    8f28:	addq.l #4,sp
	return TRUE;
    8f2a:	moveq #1,d0
    8f2c:	rts

00008f2e <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    8f2e:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    8f30:	             move.l 19c2a <allObjectTypes>,(sp)

	while (huntType) {
    8f36:	      /----- bra.s 8f4e <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    8f38:	   /--|----> movea.l (sp),a0
    8f3a:	   |  |      move.l 4(a0),d0
    8f3e:	   |  |      cmp.l 8(sp),d0
    8f42:	   |  |  /-- bne.s 8f48 <findObjectType+0x1a>
    8f44:	   |  |  |   move.l (sp),d0
    8f46:	/--|--|--|-- bra.s 8f5e <findObjectType+0x30>
		huntType = huntType -> next;
    8f48:	|  |  |  \-> movea.l (sp),a0
    8f4a:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    8f4e:	|  |  \----> tst.l (sp)
    8f50:	|  \-------- bne.s 8f38 <findObjectType+0xa>
	}

	return loadObjectType (i);
    8f52:	|            move.l 8(sp),-(sp)
    8f56:	|            jsr 901e <loadObjectType>
    8f5c:	|            addq.l #4,sp
}
    8f5e:	\----------> addq.l #4,sp
    8f60:	             rts

00008f62 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    8f62:	             lea -12(sp),sp
	int i, num = 0;
    8f66:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    8f6a:	             move.l 20(sp),-(sp)
    8f6e:	             jsr 8f2e <findObjectType>
    8f74:	             addq.l #4,sp
    8f76:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    8f78:	             clr.l 8(sp)
    8f7c:	   /-------- bra.s 8fb2 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    8f7e:	/--|-------> movea.l (sp),a0
    8f80:	|  |         move.l 38(a0),d1
    8f84:	|  |         move.l 8(sp),d0
    8f88:	|  |         lsl.l #3,d0
    8f8a:	|  |         movea.l d1,a0
    8f8c:	|  |         adda.l d0,a0
    8f8e:	|  |         move.l (a0),d0
    8f90:	|  |         cmp.l 16(sp),d0
    8f94:	|  |  /----- bne.s 8fae <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    8f96:	|  |  |      movea.l (sp),a0
    8f98:	|  |  |      move.l 38(a0),d1
    8f9c:	|  |  |      move.l 8(sp),d0
    8fa0:	|  |  |      lsl.l #3,d0
    8fa2:	|  |  |      movea.l d1,a0
    8fa4:	|  |  |      adda.l d0,a0
    8fa6:	|  |  |      move.l 4(a0),4(sp)
			break;
    8fac:	|  |  |  /-- bra.s 8fbe <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    8fae:	|  |  \--|-> addq.l #1,8(sp)
    8fb2:	|  \-----|-> movea.l (sp),a0
    8fb4:	|        |   move.l 16(a0),d0
    8fb8:	|        |   cmp.l 8(sp),d0
    8fbc:	\--------|-- bgt.s 8f7e <getCombinationFunction+0x1c>
		}
	}

	return num;
    8fbe:	         \-> move.l 4(sp),d0
}
    8fc2:	             lea 12(sp),sp
    8fc6:	             rts

00008fc8 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    8fc8:	moveq #1,d0
}
    8fca:	rts

00008fcc <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    8fcc:	subq.l #8,sp
    8fce:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    8fd0:	move.l 16(sp),-(sp)
    8fd4:	jsr 6bc <get2bytes>
    8fda:	addq.l #4,sp
    8fdc:	move.l d0,-(sp)
    8fde:	jsr 901e <loadObjectType>
    8fe4:	addq.l #4,sp
    8fe6:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    8fea:	movea.l 8(sp),a0
    8fee:	move.l (a0),4(sp)
    8ff2:	move.l 19b8e <SysBase>,d0
    8ff8:	movea.l d0,a6
    8ffa:	movea.l 4(sp),a1
    8ffe:	jsr -690(a6)
	r -> screenName = readString (fp);
    9002:	move.l 16(sp),-(sp)
    9006:	jsr b02 <readString>
    900c:	addq.l #4,sp
    900e:	movea.l 8(sp),a0
    9012:	move.l d0,(a0)
	return r;
    9014:	move.l 8(sp),d0
}
    9018:	movea.l (sp)+,a6
    901a:	addq.l #8,sp
    901c:	rts

0000901e <loadObjectType>:

struct objectType * loadObjectType (int i) {
    901e:	          lea -84(sp),sp
    9022:	          move.l a6,-(sp)
    9024:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    9026:	          moveq #42,d0
    9028:	          move.l d0,84(sp)
    902c:	          clr.l 80(sp)
    9030:	          move.l 19b8e <SysBase>,d0
    9036:	          movea.l d0,a6
    9038:	          move.l 84(sp),d0
    903c:	          move.l 80(sp),d1
    9040:	          jsr -684(a6)
    9044:	          move.l d0,76(sp)
    9048:	          move.l 76(sp),d0
    904c:	          move.l d0,72(sp)

    if (newType) {
    9050:	/-------- beq.w 92ca <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    9054:	|         move.l 96(sp),-(sp)
    9058:	|         jsr 3f3e <openObjectSlice>
    905e:	|         addq.l #4,sp
    9060:	|         tst.w d0
    9062:	+-------- beq.w 92ca <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    9066:	|         move.l 19b76 <bigDataFile>,d0
    906c:	|         move.l d0,-(sp)
    906e:	|         jsr 6bc <get2bytes>
    9074:	|         addq.l #4,sp
    9076:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    907a:	|         move.l 19b76 <bigDataFile>,64(sp)
    9082:	|         move.l 19b96 <DOSBase>,d0
    9088:	|         movea.l d0,a6
    908a:	|         move.l 64(sp),d1
    908e:	|         jsr -306(a6)
    9092:	|         move.l d0,60(sp)
    9096:	|         move.l 60(sp),d0
    909a:	|         move.l d0,d0
    909c:	|         movea.l 72(sp),a0
    90a0:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    90a4:	|         move.l 19b76 <bigDataFile>,56(sp)
    90ac:	|         move.l 19b96 <DOSBase>,d0
    90b2:	|         movea.l d0,a6
    90b4:	|         move.l 56(sp),d1
    90b8:	|         jsr -306(a6)
    90bc:	|         move.l d0,52(sp)
    90c0:	|         move.l 52(sp),d0
    90c4:	|         move.l d0,d0
    90c6:	|         movea.l 72(sp),a0
    90ca:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    90ce:	|         move.l 19b76 <bigDataFile>,48(sp)
    90d6:	|         move.l 19b96 <DOSBase>,d0
    90dc:	|         movea.l d0,a6
    90de:	|         move.l 48(sp),d1
    90e2:	|         jsr -306(a6)
    90e6:	|         move.l d0,44(sp)
    90ea:	|         move.l 44(sp),d0
    90ee:	|         move.l d0,d0
    90f0:	|         movea.l 72(sp),a0
    90f4:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    90f8:	|         move.l 19b76 <bigDataFile>,40(sp)
    9100:	|         move.l 19b96 <DOSBase>,d0
    9106:	|         movea.l d0,a6
    9108:	|         move.l 40(sp),d1
    910c:	|         jsr -306(a6)
    9110:	|         move.l d0,36(sp)
    9114:	|         move.l 36(sp),d0
    9118:	|         movea.l 72(sp),a0
    911c:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    9120:	|         move.l 19b76 <bigDataFile>,32(sp)
    9128:	|         move.l 19b96 <DOSBase>,d0
    912e:	|         movea.l d0,a6
    9130:	|         move.l 32(sp),d1
    9134:	|         jsr -306(a6)
    9138:	|         move.l d0,28(sp)
    913c:	|         move.l 28(sp),d0
    9140:	|         movea.l 72(sp),a0
    9144:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    9148:	|         move.l 19b76 <bigDataFile>,d0
    914e:	|         move.l d0,-(sp)
    9150:	|         jsr 718 <get4bytes>
    9156:	|         addq.l #4,sp
    9158:	|         movea.l 72(sp),a0
    915c:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    9160:	|         move.l 19b76 <bigDataFile>,d0
    9166:	|         move.l d0,-(sp)
    9168:	|         jsr 6bc <get2bytes>
    916e:	|         addq.l #4,sp
    9170:	|         movea.l 72(sp),a0
    9174:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    9178:	|         move.l 19b76 <bigDataFile>,24(sp)
    9180:	|         move.l 19b96 <DOSBase>,d0
    9186:	|         movea.l d0,a6
    9188:	|         move.l 24(sp),d1
    918c:	|         jsr -306(a6)
    9190:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    9194:	|         move.l 19b76 <bigDataFile>,d0
    919a:	|         move.l d0,-(sp)
    919c:	|         jsr 7d8 <getFloat>
    91a2:	|         addq.l #4,sp
            getFloat(bigDataFile);
    91a4:	|         move.l 19b76 <bigDataFile>,d0
    91aa:	|         move.l d0,-(sp)
    91ac:	|         jsr 7d8 <getFloat>
    91b2:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    91b4:	|         move.l 19b76 <bigDataFile>,d0
    91ba:	|         move.l d0,-(sp)
    91bc:	|         jsr 6bc <get2bytes>
    91c2:	|         addq.l #4,sp
    91c4:	|         move.l d0,d0
    91c6:	|         movea.l 72(sp),a0
    91ca:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    91ce:	|         move.l 19b76 <bigDataFile>,d0
    91d4:	|         move.l d0,-(sp)
    91d6:	|         jsr 6bc <get2bytes>
    91dc:	|         addq.l #4,sp
    91de:	|         movea.l 72(sp),a0
    91e2:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    91e6:	|         movea.l 72(sp),a0
    91ea:	|         move.l 16(a0),d0
    91ee:	|  /----- beq.s 9220 <loadObjectType+0x202>
    91f0:	|  |      movea.l 72(sp),a0
    91f4:	|  |      move.l 16(a0),d0
    91f8:	|  |      lsl.l #3,d0
    91fa:	|  |      move.l d0,16(sp)
    91fe:	|  |      clr.l 12(sp)
    9202:	|  |      move.l 19b8e <SysBase>,d0
    9208:	|  |      movea.l d0,a6
    920a:	|  |      move.l 16(sp),d0
    920e:	|  |      move.l 12(sp),d1
    9212:	|  |      jsr -684(a6)
    9216:	|  |      move.l d0,8(sp)
    921a:	|  |      move.l 8(sp),d0
    921e:	|  |  /-- bra.s 9222 <loadObjectType+0x204>
    9220:	|  \--|-> moveq #0,d0
    9222:	|     \-> movea.l 72(sp),a0
    9226:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    922a:	|         clr.l 88(sp)
    922e:	|     /-- bra.s 927e <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    9230:	|  /--|-> move.l 19b76 <bigDataFile>,d1
    9236:	|  |  |   movea.l 72(sp),a0
    923a:	|  |  |   movea.l 38(a0),a0
    923e:	|  |  |   move.l 88(sp),d0
    9242:	|  |  |   lsl.l #3,d0
    9244:	|  |  |   lea (0,a0,d0.l),a2
    9248:	|  |  |   move.l d1,-(sp)
    924a:	|  |  |   jsr 6bc <get2bytes>
    9250:	|  |  |   addq.l #4,sp
    9252:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    9254:	|  |  |   move.l 19b76 <bigDataFile>,d1
    925a:	|  |  |   movea.l 72(sp),a0
    925e:	|  |  |   movea.l 38(a0),a0
    9262:	|  |  |   move.l 88(sp),d0
    9266:	|  |  |   lsl.l #3,d0
    9268:	|  |  |   lea (0,a0,d0.l),a2
    926c:	|  |  |   move.l d1,-(sp)
    926e:	|  |  |   jsr 6bc <get2bytes>
    9274:	|  |  |   addq.l #4,sp
    9276:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    927a:	|  |  |   addq.l #1,88(sp)
    927e:	|  |  \-> movea.l 72(sp),a0
    9282:	|  |      move.l 16(a0),d0
    9286:	|  |      cmp.l 88(sp),d0
    928a:	|  \----- bgt.s 9230 <loadObjectType+0x212>
            }
            finishAccess();
    928c:	|         jsr 3d6e <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    9292:	|         move.l 68(sp),-(sp)
    9296:	|         jsr 3d78 <getNumberedString>
    929c:	|         addq.l #4,sp
    929e:	|         movea.l 72(sp),a0
    92a2:	|         move.l d0,(a0)
            newType->objectNum = i;
    92a4:	|         movea.l 72(sp),a0
    92a8:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    92ae:	|         move.l 19c2a <allObjectTypes>,d0
    92b4:	|         movea.l 72(sp),a0
    92b8:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    92bc:	|         move.l 72(sp),19c2a <allObjectTypes>
            return newType;
    92c4:	|         move.l 72(sp),d0
    92c8:	|     /-- bra.s 92cc <loadObjectType+0x2ae>
        }
    }
    return NULL;
    92ca:	\-----|-> moveq #0,d0
}
    92cc:	      \-> movea.l (sp)+,a2
    92ce:	          movea.l (sp)+,a6
    92d0:	          lea 84(sp),sp
    92d4:	          rts

000092d6 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    92d6:	             lea -16(sp),sp
    92da:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    92dc:	             move.l #105514,16(sp)

	while (* huntRegion) {
    92e4:	   /-------- bra.s 9358 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    92e6:	/--|-------> movea.l 16(sp),a0
    92ea:	|  |         move.l (a0),d0
    92ec:	|  |         cmp.l 24(sp),d0
    92f0:	|  |  /----- bne.s 934a <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    92f2:	|  |  |      movea.l 24(sp),a0
    92f6:	|  |  |      move.l 8(a0),d0
    92fa:	|  |  |      movea.l 16(sp),a0
    92fe:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    9300:	|  |  |      movea.l 24(sp),a0
    9304:	|  |  |      move.l 38(a0),12(sp)
    930a:	|  |  |      move.l 19b8e <SysBase>,d0
    9310:	|  |  |      movea.l d0,a6
    9312:	|  |  |      movea.l 12(sp),a1
    9316:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    931a:	|  |  |      movea.l 24(sp),a0
    931e:	|  |  |      move.l (a0),8(sp)
    9322:	|  |  |      move.l 19b8e <SysBase>,d0
    9328:	|  |  |      movea.l d0,a6
    932a:	|  |  |      movea.l 8(sp),a1
    932e:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    9332:	|  |  |      move.l 24(sp),4(sp)
    9338:	|  |  |      move.l 19b8e <SysBase>,d0
    933e:	|  |  |      movea.l d0,a6
    9340:	|  |  |      movea.l 4(sp),a1
    9344:	|  |  |      jsr -690(a6)
			return;
    9348:	|  |  |  /-- bra.s 936e <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    934a:	|  |  \--|-> movea.l 16(sp),a0
    934e:	|  |     |   move.l (a0),d0
    9350:	|  |     |   move.l d0,d1
    9352:	|  |     |   addq.l #8,d1
    9354:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    9358:	|  \-----|-> movea.l 16(sp),a0
    935c:	|        |   move.l (a0),d0
    935e:	\--------|-- bne.s 92e6 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    9360:	         |   pea 1552e <incbin_player_end+0x5fa>
    9366:	         |   jsr 12130 <KPrintF>
    936c:	         |   addq.l #4,sp
}
    936e:	         \-> movea.l (sp)+,a6
    9370:	             lea 16(sp),sp
    9374:	             rts

00009376 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    9376:	movea.l 4(sp),a0
    937a:	move.l 4(a0),d0
    937e:	move.l 8(sp),-(sp)
    9382:	move.l d0,-(sp)
    9384:	jsr 8d0 <put2bytes>
    938a:	addq.l #8,sp
	writeString (r -> screenName, fp);
    938c:	movea.l 4(sp),a0
    9390:	move.l (a0),d0
    9392:	move.l 8(sp),-(sp)
    9396:	move.l d0,-(sp)
    9398:	jsr bd8 <writeString>
    939e:	addq.l #8,sp
    93a0:	nop
    93a2:	rts

000093a4 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    93a4:	                         lea -112(sp),sp
    93a8:	                         move.l a6,-(sp)
    93aa:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    93ac:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    93b0:	                         move.w 19c30 <saveEncoding>,d0
    93b6:	                  /----- beq.s 93c0 <fileToStack+0x1c>
    93b8:	                  |      move.l #87380,d0
    93be:	                  |  /-- bra.s 93c6 <fileToStack+0x22>
    93c0:	                  \--|-> move.l #87406,d0
    93c6:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    93ca:	                         move.l 124(sp),112(sp)
    93d0:	                         move.l #1005,108(sp)
    93d8:	                         move.l 19b96 <DOSBase>,d0
    93de:	                         movea.l d0,a6
    93e0:	                         move.l 112(sp),d1
    93e4:	                         move.l 108(sp),d2
    93e8:	                         jsr -30(a6)
    93ec:	                         move.l d0,104(sp)
    93f0:	                         move.l 104(sp),d0
    93f4:	                         move.l d0,100(sp)
    if (!fp) {
    93f8:	                     /-- bne.s 9412 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    93fa:	                     |   move.l 124(sp),-(sp)
    93fe:	                     |   pea 15585 <incbin_player_end+0x651>
    9404:	                     |   jsr 12130 <KPrintF>
    940a:	                     |   addq.l #8,sp
        return FALSE;
    940c:	                     |   clr.w d0
    940e:	/--------------------|-- bra.w 9708 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    9412:	|                    \-> move.w 19c30 <saveEncoding>,d0
    9418:	|                        move.l d0,d0
    941a:	|                        move.b d0,19c2e <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    9420:	|                        move.w 19c30 <saveEncoding>,d0
    9426:	|                        lsr.w #8,d0
    9428:	|                        move.l d0,d0
    942a:	|                        move.b d0,19c2f <encode2>

    while (*checker) {
    9430:	|                 /----- bra.s 9494 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    9432:	|              /--|----> move.l 100(sp),30(sp)
    9438:	|              |  |      move.l 19b96 <DOSBase>,d0
    943e:	|              |  |      movea.l d0,a6
    9440:	|              |  |      move.l 30(sp),d1
    9444:	|              |  |      jsr -306(a6)
    9448:	|              |  |      move.l d0,26(sp)
    944c:	|              |  |      move.l 26(sp),d1
    9450:	|              |  |      movea.l 116(sp),a0
    9454:	|              |  |      move.b (a0),d0
    9456:	|              |  |      ext.w d0
    9458:	|              |  |      movea.w d0,a0
    945a:	|              |  |      cmpa.l d1,a0
    945c:	|              |  |  /-- beq.s 9490 <fileToStack+0xec>
            Close(fp);
    945e:	|              |  |  |   move.l 100(sp),22(sp)
    9464:	|              |  |  |   move.l 19b96 <DOSBase>,d0
    946a:	|              |  |  |   movea.l d0,a6
    946c:	|              |  |  |   move.l 22(sp),d1
    9470:	|              |  |  |   jsr -36(a6)
    9474:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    9478:	|              |  |  |   move.l 124(sp),-(sp)
    947c:	|              |  |  |   pea 15592 <incbin_player_end+0x65e>
    9482:	|              |  |  |   jsr 12130 <KPrintF>
    9488:	|              |  |  |   addq.l #8,sp
            return FALSE;
    948a:	|              |  |  |   clr.w d0
    948c:	+--------------|--|--|-- bra.w 9708 <fileToStack+0x364>
        }
        checker++;
    9490:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    9494:	|              |  \----> movea.l 116(sp),a0
    9498:	|              |         move.b (a0),d0
    949a:	|              \-------- bne.s 9432 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    949c:	|                        move.w 19c30 <saveEncoding>,d0
    94a2:	|  /-------------------- beq.s 9516 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    94a4:	|  |                     move.l 100(sp),-(sp)
    94a8:	|  |                     jsr 9712 <readStringEncoded>
    94ae:	|  |                     addq.l #4,sp
    94b0:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    94b4:	|  |                     pea 155d3 <incbin_player_end+0x69f>
    94ba:	|  |                     move.l 100(sp),-(sp)
    94be:	|  |                     jsr f588 <strcmp>
    94c4:	|  |                     addq.l #8,sp
    94c6:	|  |                     tst.l d0
    94c8:	|  |                 /-- beq.s 94fc <fileToStack+0x158>
            Close(fp);
    94ca:	|  |                 |   move.l 100(sp),88(sp)
    94d0:	|  |                 |   move.l 19b96 <DOSBase>,d0
    94d6:	|  |                 |   movea.l d0,a6
    94d8:	|  |                 |   move.l 88(sp),d1
    94dc:	|  |                 |   jsr -36(a6)
    94e0:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    94e4:	|  |                 |   move.l 124(sp),-(sp)
    94e8:	|  |                 |   pea 155e2 <incbin_player_end+0x6ae>
    94ee:	|  |                 |   jsr 12130 <KPrintF>
    94f4:	|  |                 |   addq.l #8,sp
            return FALSE;
    94f6:	|  |                 |   clr.w d0
    94f8:	+--|-----------------|-- bra.w 9708 <fileToStack+0x364>
        }
        FreeVec(checker);
    94fc:	|  |                 \-> move.l 96(sp),92(sp)
    9502:	|  |                     move.l 19b8e <SysBase>,d0
    9508:	|  |                     movea.l d0,a6
    950a:	|  |                     movea.l 92(sp),a1
    950e:	|  |                     jsr -690(a6)
        checker = NULL;
    9512:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    9516:	|  >-------------------> move.w 19c30 <saveEncoding>,d0
    951c:	|  |     /-------------- beq.w 9650 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    9520:	|  |     |               move.l 100(sp),76(sp)
    9526:	|  |     |               move.l 19b96 <DOSBase>,d0
    952c:	|  |     |               movea.l d0,a6
    952e:	|  |     |               move.l 76(sp),d1
    9532:	|  |     |               jsr -306(a6)
    9536:	|  |     |               move.l d0,72(sp)
    953a:	|  |     |               move.l 72(sp),d0
    953e:	|  |     |               move.b 19c2e <encode1>,d1
    9544:	|  |     |               ext.w d1
    9546:	|  |     |               ext.l d1
    9548:	|  |     |               move.l d0,d2
    954a:	|  |     |               eor.l d1,d2
    954c:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    9550:	|  |     |               moveq #-1,d0
    9552:	|  |     |               cmp.l 68(sp),d0
    9556:	|  |  /--|-------------- beq.w 96e6 <fileToStack+0x342>

            char i = (char) tmp;
    955a:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    9560:	|  |  |  |               move.b 67(sp),d0
    9564:	|  |  |  |               ext.w d0
    9566:	|  |  |  |               movea.w d0,a0
    9568:	|  |  |  |               moveq #2,d2
    956a:	|  |  |  |               cmp.l a0,d2
    956c:	|  |  |  |     /-------- beq.s 95e8 <fileToStack+0x244>
    956e:	|  |  |  |     |         moveq #2,d0
    9570:	|  |  |  |     |         cmp.l a0,d0
    9572:	|  |  |  |  /--|-------- blt.w 961e <fileToStack+0x27a>
    9576:	|  |  |  |  |  |         cmpa.w #0,a0
    957a:	|  |  |  |  |  |     /-- beq.s 9586 <fileToStack+0x1e2>
    957c:	|  |  |  |  |  |     |   moveq #1,d2
    957e:	|  |  |  |  |  |     |   cmp.l a0,d2
    9580:	|  |  |  |  |  |  /--|-- beq.s 95c2 <fileToStack+0x21e>
    9582:	|  |  |  |  +--|--|--|-- bra.w 961e <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    9586:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    958a:	|  |  |  |  |  |  |      jsr 9712 <readStringEncoded>
    9590:	|  |  |  |  |  |  |      addq.l #4,sp
    9592:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    9596:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    959a:	|  |  |  |  |  |  |      lea 14(sp),a0
    959e:	|  |  |  |  |  |  |      move.l a0,-(sp)
    95a0:	|  |  |  |  |  |  |      jsr 102fe <makeTextVar>
    95a6:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    95a8:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    95ae:	|  |  |  |  |  |  |      move.l 19b8e <SysBase>,d0
    95b4:	|  |  |  |  |  |  |      movea.l d0,a6
    95b6:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    95ba:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    95be:	|  |  |  |  |  |  |  /-- bra.w 9676 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    95c2:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    95c6:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    95cc:	|  |  |  |  |  |     |   addq.l #4,sp
    95ce:	|  |  |  |  |  |     |   move.l d0,-(sp)
    95d0:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    95d4:	|  |  |  |  |  |     |   lea 18(sp),a0
    95d8:	|  |  |  |  |  |     |   move.l a0,-(sp)
    95da:	|  |  |  |  |  |     |   jsr 109ce <setVariable>
    95e0:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    95e4:	|  |  |  |  |  |     +-- bra.w 9676 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    95e8:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    95ee:	|  |  |  |  |        |   move.l 19b96 <DOSBase>,d0
    95f4:	|  |  |  |  |        |   movea.l d0,a6
    95f6:	|  |  |  |  |        |   move.l 62(sp),d1
    95fa:	|  |  |  |  |        |   jsr -306(a6)
    95fe:	|  |  |  |  |        |   move.l d0,58(sp)
    9602:	|  |  |  |  |        |   move.l 58(sp),d0
    9606:	|  |  |  |  |        |   move.l d0,-(sp)
    9608:	|  |  |  |  |        |   pea 1 <_start+0x1>
    960c:	|  |  |  |  |        |   lea 18(sp),a0
    9610:	|  |  |  |  |        |   move.l a0,-(sp)
    9612:	|  |  |  |  |        |   jsr 109ce <setVariable>
    9618:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    961c:	|  |  |  |  |        +-- bra.s 9676 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    961e:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    9622:	|  |  |  |           |   pea 15664 <incbin_player_end+0x730>
    9628:	|  |  |  |           |   jsr 12130 <KPrintF>
    962e:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    9630:	|  |  |  |           |   move.l 100(sp),46(sp)
    9636:	|  |  |  |           |   move.l 19b96 <DOSBase>,d0
    963c:	|  |  |  |           |   movea.l d0,a6
    963e:	|  |  |  |           |   move.l 46(sp),d1
    9642:	|  |  |  |           |   jsr -36(a6)
    9646:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    964a:	|  |  |  |           |   clr.w d0
    964c:	+--|--|--|-----------|-- bra.w 9708 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    9650:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    9654:	|  |  |              |   jsr 97d8 <readTextPlain>
    965a:	|  |  |              |   addq.l #4,sp
    965c:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    9660:	|  |  |        /-----|-- beq.w 96ea <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    9664:	|  |  |        |     |   move.l 80(sp),-(sp)
    9668:	|  |  |        |     |   lea 14(sp),a0
    966c:	|  |  |        |     |   move.l a0,-(sp)
    966e:	|  |  |        |     |   jsr 102fe <makeTextVar>
    9674:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    9676:	|  |  |        |     \-> movea.l 128(sp),a0
    967a:	|  |  |        |         move.l (a0),d0
    967c:	|  |  |        |  /----- bne.s 96ac <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    967e:	|  |  |        |  |      move.l 128(sp),d0
    9682:	|  |  |        |  |      move.l d0,-(sp)
    9684:	|  |  |        |  |      lea 14(sp),a0
    9688:	|  |  |        |  |      move.l a0,-(sp)
    968a:	|  |  |        |  |      jsr f99e <addVarToStackQuick>
    9690:	|  |  |        |  |      addq.l #8,sp
    9692:	|  |  |        |  |      tst.w d0
    9694:	|  |  |        |  |  /-- bne.s 969a <fileToStack+0x2f6>
    9696:	|  |  |        |  |  |   clr.w d0
    9698:	+--|--|--------|--|--|-- bra.s 9708 <fileToStack+0x364>
            sH->last = sH->first;
    969a:	|  |  |        |  |  \-> movea.l 128(sp),a0
    969e:	|  |  |        |  |      move.l (a0),d0
    96a0:	|  |  |        |  |      movea.l 128(sp),a0
    96a4:	|  |  |        |  |      move.l d0,4(a0)
    96a8:	|  +--|--------|--|----- bra.w 9516 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    96ac:	|  |  |        |  \----> movea.l 128(sp),a0
    96b0:	|  |  |        |         move.l 4(a0),d0
    96b4:	|  |  |        |         addq.l #8,d0
    96b6:	|  |  |        |         move.l d0,-(sp)
    96b8:	|  |  |        |         lea 14(sp),a0
    96bc:	|  |  |        |         move.l a0,-(sp)
    96be:	|  |  |        |         jsr f99e <addVarToStackQuick>
    96c4:	|  |  |        |         addq.l #8,sp
    96c6:	|  |  |        |         tst.w d0
    96c8:	|  |  |        |     /-- bne.s 96ce <fileToStack+0x32a>
    96ca:	|  |  |        |     |   clr.w d0
    96cc:	+--|--|--------|-----|-- bra.s 9708 <fileToStack+0x364>
            sH->last = sH->last->next;
    96ce:	|  |  |        |     \-> movea.l 128(sp),a0
    96d2:	|  |  |        |         movea.l 4(a0),a0
    96d6:	|  |  |        |         move.l 8(a0),d0
    96da:	|  |  |        |         movea.l 128(sp),a0
    96de:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    96e2:	|  \--|--------|-------- bra.w 9516 <fileToStack+0x172>
            if (tmp == -1) break;
    96e6:	|     \--------|-------> nop
    96e8:	|              |     /-- bra.s 96ec <fileToStack+0x348>
            if (!line) break;
    96ea:	|              \-----|-> nop
        }
    }
    Close(fp);
    96ec:	|                    \-> move.l 100(sp),38(sp)
    96f2:	|                        move.l 19b96 <DOSBase>,d0
    96f8:	|                        movea.l d0,a6
    96fa:	|                        move.l 38(sp),d1
    96fe:	|                        jsr -36(a6)
    9702:	|                        move.l d0,34(sp)
    return TRUE;
    9706:	|                        moveq #1,d0
}
    9708:	\----------------------> move.l (sp)+,d2
    970a:	                         movea.l (sp)+,a6
    970c:	                         lea 112(sp),sp
    9710:	                         rts

00009712 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    9712:	          lea -32(sp),sp
    9716:	          move.l a6,-(sp)
    9718:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    971a:	          move.l 44(sp),-(sp)
    971e:	          jsr 6bc <get2bytes>
    9724:	          addq.l #4,sp
    9726:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    972a:	          move.l 32(sp),d0
    972e:	          addq.l #1,d0
    9730:	          move.l d0,28(sp)
    9734:	          clr.l 24(sp)
    9738:	          move.l 19b8e <SysBase>,d0
    973e:	          movea.l d0,a6
    9740:	          move.l 28(sp),d0
    9744:	          move.l 24(sp),d1
    9748:	          jsr -684(a6)
    974c:	          move.l d0,20(sp)
    9750:	          move.l 20(sp),d0
    9754:	          move.l d0,16(sp)
    if (!s) return NULL;
    9758:	      /-- bne.s 975e <readStringEncoded+0x4c>
    975a:	      |   moveq #0,d0
    975c:	/-----|-- bra.s 97ce <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    975e:	|     \-> clr.l 36(sp)
    9762:	|     /-- bra.s 97b4 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    9764:	|  /--|-> move.l 44(sp),12(sp)
    976a:	|  |  |   move.l 19b96 <DOSBase>,d0
    9770:	|  |  |   movea.l d0,a6
    9772:	|  |  |   move.l 12(sp),d1
    9776:	|  |  |   jsr -306(a6)
    977a:	|  |  |   move.l d0,8(sp)
    977e:	|  |  |   move.l 8(sp),d0
    9782:	|  |  |   move.l d0,d1
    9784:	|  |  |   move.b 19c2e <encode1>,d2
    978a:	|  |  |   move.l 36(sp),d0
    978e:	|  |  |   movea.l 16(sp),a0
    9792:	|  |  |   adda.l d0,a0
    9794:	|  |  |   move.b d1,d0
    9796:	|  |  |   eor.b d2,d0
    9798:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    979a:	|  |  |   move.b 19c2e <encode1>,d0
    97a0:	|  |  |   move.b d0,d1
    97a2:	|  |  |   move.b 19c2f <encode2>,d0
    97a8:	|  |  |   add.b d1,d0
    97aa:	|  |  |   move.b d0,19c2e <encode1>
    for (a = 0; a < len; a++) {
    97b0:	|  |  |   addq.l #1,36(sp)
    97b4:	|  |  \-> move.l 36(sp),d0
    97b8:	|  |      cmp.l 32(sp),d0
    97bc:	|  \----- blt.s 9764 <readStringEncoded+0x52>
    }
    s[len] = 0;
    97be:	|         move.l 32(sp),d0
    97c2:	|         movea.l 16(sp),a0
    97c6:	|         adda.l d0,a0
    97c8:	|         clr.b (a0)
    return s;
    97ca:	|         move.l 16(sp),d0
}
    97ce:	\-------> move.l (sp)+,d2
    97d0:	          movea.l (sp)+,a6
    97d2:	          lea 32(sp),sp
    97d6:	          rts

000097d8 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    97d8:	             lea -104(sp),sp
    97dc:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    97e0:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    97e4:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    97ea:	             move.l 124(sp),106(sp)
    97f0:	             clr.l 102(sp)
    97f4:	             clr.l 98(sp)
    97f8:	             move.l 19b96 <DOSBase>,d0
    97fe:	             movea.l d0,a6
    9800:	             move.l 106(sp),d1
    9804:	             move.l 102(sp),d2
    9808:	             move.l 98(sp),d3
    980c:	             jsr -66(a6)
    9810:	             move.l d0,94(sp)
    9814:	             move.l 94(sp),d0
    9818:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    981c:	   /-------- bra.s 9860 <readTextPlain+0x88>
        tmp = FGetC(fp);
    981e:	/--|-------> move.l 124(sp),22(sp)
    9824:	|  |         move.l 19b96 <DOSBase>,d0
    982a:	|  |         movea.l d0,a6
    982c:	|  |         move.l 22(sp),d1
    9830:	|  |         jsr -306(a6)
    9834:	|  |         move.l d0,18(sp)
    9838:	|  |         move.l 18(sp),d0
    983c:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    9840:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    9846:	|  |         cmpi.b #10,17(sp)
    984c:	|  |  /----- beq.s 9856 <readTextPlain+0x7e>
    984e:	|  |  |      moveq #-1,d0
    9850:	|  |  |      cmp.l 110(sp),d0
    9854:	|  |  |  /-- bne.s 985c <readTextPlain+0x84>
            keepGoing = FALSE;
    9856:	|  |  \--|-> clr.w 114(sp)
    985a:	|  +-----|-- bra.s 9860 <readTextPlain+0x88>
        } else {
            stringSize++;
    985c:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    9860:	|  \-------> tst.w 114(sp)
    9864:	\----------- bne.s 981e <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    9866:	             tst.l 116(sp)
    986a:	         /-- bne.s 987a <readTextPlain+0xa2>
    986c:	         |   moveq #-1,d0
    986e:	         |   cmp.l 110(sp),d0
    9872:	         +-- bne.s 987a <readTextPlain+0xa2>
        return NULL;
    9874:	         |   moveq #0,d0
    9876:	      /--|-- bra.w 9960 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    987a:	      |  \-> move.l 124(sp),86(sp)
    9880:	      |      move.l 90(sp),82(sp)
    9886:	      |      moveq #-1,d0
    9888:	      |      move.l d0,78(sp)
    988c:	      |      move.l 19b96 <DOSBase>,d0
    9892:	      |      movea.l d0,a6
    9894:	      |      move.l 86(sp),d1
    9898:	      |      move.l 82(sp),d2
    989c:	      |      move.l 78(sp),d3
    98a0:	      |      jsr -66(a6)
    98a4:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    98a8:	      |      move.l 116(sp),d0
    98ac:	      |      addq.l #1,d0
    98ae:	      |      move.l d0,70(sp)
    98b2:	      |      clr.l 66(sp)
    98b6:	      |      move.l 19b8e <SysBase>,d0
    98bc:	      |      movea.l d0,a6
    98be:	      |      move.l 70(sp),d0
    98c2:	      |      move.l 66(sp),d1
    98c6:	      |      jsr -684(a6)
    98ca:	      |      move.l d0,62(sp)
    98ce:	      |      move.l 62(sp),d0
    98d2:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    98d6:	      |  /-- bne.s 98de <readTextPlain+0x106>
    98d8:	      |  |   moveq #0,d0
    98da:	      +--|-- bra.w 9960 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    98de:	      |  \-> move.l 124(sp),54(sp)
    98e4:	      |      move.l 58(sp),50(sp)
    98ea:	      |      moveq #1,d0
    98ec:	      |      move.l d0,46(sp)
    98f0:	      |      move.l 116(sp),42(sp)
    98f6:	      |      move.l 19b96 <DOSBase>,d0
    98fc:	      |      movea.l d0,a6
    98fe:	      |      move.l 54(sp),d1
    9902:	      |      move.l 50(sp),d2
    9906:	      |      move.l 46(sp),d3
    990a:	      |      move.l 42(sp),d4
    990e:	      |      jsr -324(a6)
    9912:	      |      move.l d0,38(sp)
    9916:	      |      move.l 38(sp),d0
    991a:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    991e:	      |      move.l 34(sp),d0
    9922:	      |      cmp.l 116(sp),d0
    9926:	      |  /-- beq.s 9936 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    9928:	      |  |   pea 15699 <incbin_player_end+0x765>
    992e:	      |  |   jsr 12130 <KPrintF>
    9934:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    9936:	      |  \-> move.l 124(sp),30(sp)
    993c:	      |      move.l 19b96 <DOSBase>,d0
    9942:	      |      movea.l d0,a6
    9944:	      |      move.l 30(sp),d1
    9948:	      |      jsr -306(a6)
    994c:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    9950:	      |      move.l 116(sp),d0
    9954:	      |      movea.l 58(sp),a0
    9958:	      |      adda.l d0,a0
    995a:	      |      clr.b (a0)
    }

    return reply;
    995c:	      |      move.l 58(sp),d0
}
    9960:	      \----> movem.l (sp)+,d2-d4/a6
    9964:	             lea 104(sp),sp
    9968:	             rts

0000996a <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    996a:	                      lea -144(sp),sp
    996e:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    9972:	                      move.l 160(sp),148(sp)
    9978:	                      move.l #1006,144(sp)
    9980:	                      move.l 19b96 <DOSBase>,d0
    9986:	                      movea.l d0,a6
    9988:	                      move.l 148(sp),d1
    998c:	                      move.l 144(sp),d2
    9990:	                      jsr -30(a6)
    9994:	                      move.l d0,140(sp)
    9998:	                      move.l 140(sp),d0
    999c:	                      move.l d0,136(sp)

    if (!fp) {
    99a0:	                  /-- bne.s 99ba <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    99a2:	                  |   move.l 160(sp),-(sp)
    99a6:	                  |   pea 156ba <incbin_player_end+0x786>
    99ac:	                  |   jsr 12130 <KPrintF>
    99b2:	                  |   addq.l #8,sp
        return FALSE;
    99b4:	                  |   clr.w d0
    99b6:	/-----------------|-- bra.w 9c76 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    99ba:	|                 \-> movea.l 164(sp),a0
    99be:	|                     movea.l 4(a0),a0
    99c2:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    99c6:	|                     move.w 19c30 <saveEncoding>,d0
    99cc:	|                     move.l d0,d0
    99ce:	|                     move.b d0,19c2e <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    99d4:	|                     move.w 19c30 <saveEncoding>,d0
    99da:	|                     lsr.w #8,d0
    99dc:	|                     move.l d0,d0
    99de:	|                     move.b d0,19c2f <encode2>

    if (saveEncoding) {
    99e4:	|                     move.w 19c30 <saveEncoding>,d0
    99ea:	|                 /-- beq.s 9a3c <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    99ec:	|                 |   move.l 136(sp),116(sp)
    99f2:	|                 |   move.l #87380,112(sp)
    99fa:	|                 |   moveq #99,d0
    99fc:	|                 |   not.b d0
    99fe:	|                 |   add.l sp,d0
    9a00:	|                 |   addi.l #-144,d0
    9a06:	|                 |   move.l d0,108(sp)
    9a0a:	|                 |   move.l 19b96 <DOSBase>,d0
    9a10:	|                 |   movea.l d0,a6
    9a12:	|                 |   move.l 116(sp),d1
    9a16:	|                 |   move.l 112(sp),d2
    9a1a:	|                 |   move.l 108(sp),d3
    9a1e:	|                 |   jsr -354(a6)
    9a22:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    9a26:	|                 |   move.l 136(sp),-(sp)
    9a2a:	|                 |   pea 155d3 <incbin_player_end+0x69f>
    9a30:	|                 |   jsr 9c80 <writeStringEncoded>
    9a36:	|                 |   addq.l #8,sp
    9a38:	|  /--------------|-- bra.w 9c4e <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    9a3c:	|  |              \-> move.l 136(sp),132(sp)
    9a42:	|  |                  move.l #87406,128(sp)
    9a4a:	|  |                  moveq #99,d1
    9a4c:	|  |                  not.b d1
    9a4e:	|  |                  add.l sp,d1
    9a50:	|  |                  addi.l #-144,d1
    9a56:	|  |                  move.l d1,124(sp)
    9a5a:	|  |                  move.l 19b96 <DOSBase>,d0
    9a60:	|  |                  movea.l d0,a6
    9a62:	|  |                  move.l 132(sp),d1
    9a66:	|  |                  move.l 128(sp),d2
    9a6a:	|  |                  move.l 124(sp),d3
    9a6e:	|  |                  jsr -354(a6)
    9a72:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    9a76:	|  +----------------- bra.w 9c4e <stackToFile+0x2e4>
        if (saveEncoding) {
    9a7a:	|  |  /-------------> move.w 19c30 <saveEncoding>,d0
    9a80:	|  |  |     /-------- beq.w 9bd2 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    9a84:	|  |  |     |         movea.l 152(sp),a0
    9a88:	|  |  |     |         move.l (a0),d0
    9a8a:	|  |  |     |         moveq #1,d1
    9a8c:	|  |  |     |         cmp.l d0,d1
    9a8e:	|  |  |     |     /-- beq.s 9ade <stackToFile+0x174>
    9a90:	|  |  |     |     |   moveq #3,d1
    9a92:	|  |  |     |     |   cmp.l d0,d1
    9a94:	|  |  |     |  /--|-- bne.w 9ba0 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    9a98:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    9a9e:	|  |  |     |  |  |   move.b 19c2e <encode1>,d0
    9aa4:	|  |  |     |  |  |   ext.w d0
    9aa6:	|  |  |     |  |  |   movea.w d0,a0
    9aa8:	|  |  |     |  |  |   move.l a0,72(sp)
    9aac:	|  |  |     |  |  |   move.l 19b96 <DOSBase>,d0
    9ab2:	|  |  |     |  |  |   movea.l d0,a6
    9ab4:	|  |  |     |  |  |   move.l 76(sp),d1
    9ab8:	|  |  |     |  |  |   move.l 72(sp),d2
    9abc:	|  |  |     |  |  |   jsr -312(a6)
    9ac0:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    9ac4:	|  |  |     |  |  |   movea.l 152(sp),a0
    9ac8:	|  |  |     |  |  |   move.l 4(a0),d0
    9acc:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    9ad0:	|  |  |     |  |  |   move.l d0,-(sp)
    9ad2:	|  |  |     |  |  |   jsr 9c80 <writeStringEncoded>
    9ad8:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    9ada:	|  |  |  /--|--|--|-- bra.w 9c44 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    9ade:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    9ae2:	|  |  |  |  |  |      move.l 4(a0),d0
    9ae6:	|  |  |  |  |  |  /-- bmi.s 9b56 <stackToFile+0x1ec>
    9ae8:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    9aec:	|  |  |  |  |  |  |   move.l 4(a0),d0
    9af0:	|  |  |  |  |  |  |   cmpi.l #255,d0
    9af6:	|  |  |  |  |  |  +-- bgt.s 9b56 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    9af8:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    9afe:	|  |  |  |  |  |  |   move.b 19c2e <encode1>,d0
    9b04:	|  |  |  |  |  |  |   eori.b #2,d0
    9b08:	|  |  |  |  |  |  |   ext.w d0
    9b0a:	|  |  |  |  |  |  |   movea.w d0,a0
    9b0c:	|  |  |  |  |  |  |   move.l a0,60(sp)
    9b10:	|  |  |  |  |  |  |   move.l 19b96 <DOSBase>,d0
    9b16:	|  |  |  |  |  |  |   movea.l d0,a6
    9b18:	|  |  |  |  |  |  |   move.l 64(sp),d1
    9b1c:	|  |  |  |  |  |  |   move.l 60(sp),d2
    9b20:	|  |  |  |  |  |  |   jsr -312(a6)
    9b24:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    9b28:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    9b2e:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    9b32:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    9b38:	|  |  |  |  |  |  |   move.l 19b96 <DOSBase>,d0
    9b3e:	|  |  |  |  |  |  |   movea.l d0,a6
    9b40:	|  |  |  |  |  |  |   move.l 52(sp),d1
    9b44:	|  |  |  |  |  |  |   move.l 48(sp),d2
    9b48:	|  |  |  |  |  |  |   jsr -312(a6)
    9b4c:	|  |  |  |  |  |  |   move.l d0,44(sp)
    9b50:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    9b52:	|  |  |  +--|--|--|-- bra.w 9c44 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    9b56:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    9b5c:	|  |  |  |  |  |      move.b 19c2e <encode1>,d0
    9b62:	|  |  |  |  |  |      eori.b #1,d0
    9b66:	|  |  |  |  |  |      ext.w d0
    9b68:	|  |  |  |  |  |      movea.w d0,a0
    9b6a:	|  |  |  |  |  |      move.l a0,36(sp)
    9b6e:	|  |  |  |  |  |      move.l 19b96 <DOSBase>,d0
    9b74:	|  |  |  |  |  |      movea.l d0,a6
    9b76:	|  |  |  |  |  |      move.l 40(sp),d1
    9b7a:	|  |  |  |  |  |      move.l 36(sp),d2
    9b7e:	|  |  |  |  |  |      jsr -312(a6)
    9b82:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    9b86:	|  |  |  |  |  |      movea.l 152(sp),a0
    9b8a:	|  |  |  |  |  |      move.l 4(a0),d0
    9b8e:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    9b92:	|  |  |  |  |  |      move.l d0,-(sp)
    9b94:	|  |  |  |  |  |      jsr 958 <put4bytes>
    9b9a:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    9b9c:	|  |  |  +--|--|----- bra.w 9c44 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    9ba0:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    9ba4:	|  |  |  |  |         pea 156cc <incbin_player_end+0x798>
    9baa:	|  |  |  |  |         jsr 12130 <KPrintF>
    9bb0:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    9bb2:	|  |  |  |  |         move.l 136(sp),28(sp)
    9bb8:	|  |  |  |  |         move.l 19b96 <DOSBase>,d0
    9bbe:	|  |  |  |  |         movea.l d0,a6
    9bc0:	|  |  |  |  |         move.l 28(sp),d1
    9bc4:	|  |  |  |  |         jsr -36(a6)
    9bc8:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    9bcc:	|  |  |  |  |         clr.w d0
    9bce:	+--|--|--|--|-------- bra.w 9c76 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    9bd2:	|  |  |  |  \-------> move.l 152(sp),d0
    9bd6:	|  |  |  |            move.l d0,-(sp)
    9bd8:	|  |  |  |            jsr 106b2 <getTextFromAnyVar>
    9bde:	|  |  |  |            addq.l #4,sp
    9be0:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    9be4:	|  |  |  |     /----- beq.s 9c58 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    9be6:	|  |  |  |     |      movea.l 100(sp),a0
    9bea:	|  |  |  |     |      move.b (a0),d0
    9bec:	|  |  |  |     |      ext.w d0
    9bee:	|  |  |  |     |      movea.w d0,a0
    9bf0:	|  |  |  |     |      move.l a0,12(sp)
    9bf4:	|  |  |  |     |      move.l 136(sp),96(sp)
    9bfa:	|  |  |  |     |      move.l #87848,92(sp)
    9c02:	|  |  |  |     |      moveq #99,d0
    9c04:	|  |  |  |     |      not.b d0
    9c06:	|  |  |  |     |      add.l sp,d0
    9c08:	|  |  |  |     |      addi.l #-144,d0
    9c0e:	|  |  |  |     |      move.l d0,88(sp)
    9c12:	|  |  |  |     |      move.l 19b96 <DOSBase>,d0
    9c18:	|  |  |  |     |      movea.l d0,a6
    9c1a:	|  |  |  |     |      move.l 96(sp),d1
    9c1e:	|  |  |  |     |      move.l 92(sp),d2
    9c22:	|  |  |  |     |      move.l 88(sp),d3
    9c26:	|  |  |  |     |      jsr -354(a6)
    9c2a:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    9c2e:	|  |  |  |     |      move.l 100(sp),80(sp)
    9c34:	|  |  |  |     |      move.l 19b8e <SysBase>,d0
    9c3a:	|  |  |  |     |      movea.l d0,a6
    9c3c:	|  |  |  |     |      movea.l 80(sp),a1
    9c40:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    9c44:	|  |  |  \-----|----> movea.l 152(sp),a0
    9c48:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    9c4e:	|  \--|--------|----> tst.l 152(sp)
    9c52:	|     \--------|----- bne.w 9a7a <stackToFile+0x110>
    9c56:	|              |  /-- bra.s 9c5a <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    9c58:	|              \--|-> nop
    }
    Close(fp);
    9c5a:	|                 \-> move.l 136(sp),20(sp)
    9c60:	|                     move.l 19b96 <DOSBase>,d0
    9c66:	|                     movea.l d0,a6
    9c68:	|                     move.l 20(sp),d1
    9c6c:	|                     jsr -36(a6)
    9c70:	|                     move.l d0,16(sp)
    return TRUE;
    9c74:	|                     moveq #1,d0
}
    9c76:	\-------------------> movem.l (sp)+,d2-d3/a6
    9c7a:	                      lea 144(sp),sp
    9c7e:	                      rts

00009c80 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    9c80:	       lea -20(sp),sp
    9c84:	       move.l a6,-(sp)
    9c86:	       move.l d2,-(sp)
	int a, len = strlen (s);
    9c88:	       move.l 32(sp),-(sp)
    9c8c:	       jsr f5c8 <strlen>
    9c92:	       addq.l #4,sp
    9c94:	       move.l d0,20(sp)

	put2bytes (len, fp);
    9c98:	       move.l 36(sp),-(sp)
    9c9c:	       move.l 24(sp),-(sp)
    9ca0:	       jsr 8d0 <put2bytes>
    9ca6:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    9ca8:	       clr.l 24(sp)
    9cac:	   /-- bra.s 9d02 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    9cae:	/--|-> move.l 36(sp),16(sp)
    9cb4:	|  |   move.l 24(sp),d0
    9cb8:	|  |   movea.l 32(sp),a0
    9cbc:	|  |   adda.l d0,a0
    9cbe:	|  |   move.b (a0),d1
    9cc0:	|  |   move.b 19c2e <encode1>,d0
    9cc6:	|  |   eor.b d1,d0
    9cc8:	|  |   ext.w d0
    9cca:	|  |   movea.w d0,a0
    9ccc:	|  |   move.l a0,12(sp)
    9cd0:	|  |   move.l 19b96 <DOSBase>,d0
    9cd6:	|  |   movea.l d0,a6
    9cd8:	|  |   move.l 16(sp),d1
    9cdc:	|  |   move.l 12(sp),d2
    9ce0:	|  |   jsr -312(a6)
    9ce4:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    9ce8:	|  |   move.b 19c2e <encode1>,d0
    9cee:	|  |   move.b d0,d1
    9cf0:	|  |   move.b 19c2f <encode2>,d0
    9cf6:	|  |   add.b d1,d0
    9cf8:	|  |   move.b d0,19c2e <encode1>
	for (a = 0; a < len; a ++) {
    9cfe:	|  |   addq.l #1,24(sp)
    9d02:	|  \-> move.l 24(sp),d0
    9d06:	|      cmp.l 20(sp),d0
    9d0a:	\----- blt.s 9cae <writeStringEncoded+0x2e>
	}
}
    9d0c:	       nop
    9d0e:	       nop
    9d10:	       move.l (sp)+,d2
    9d12:	       movea.l (sp)+,a6
    9d14:	       lea 20(sp),sp
    9d18:	       rts

00009d1a <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    9d1a:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    9d1c:	                   tst.l 8(sp)
    9d20:	               /-- bne.s 9d26 <failSecurityCheck+0xc>
    9d22:	               |   moveq #1,d0
    9d24:	/--------------|-- bra.s 9da4 <failSecurityCheck+0x8a>

	int a = 0;
    9d26:	|              \-> clr.l (sp)

	while (fn[a]) {
    9d28:	|     /----------- bra.s 9d96 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    9d2a:	|  /--|----------> move.l (sp),d0
    9d2c:	|  |  |            movea.l 8(sp),a0
    9d30:	|  |  |            adda.l d0,a0
    9d32:	|  |  |            move.b (a0),d0
    9d34:	|  |  |            ext.w d0
    9d36:	|  |  |            movea.w d0,a0
    9d38:	|  |  |            moveq #124,d0
    9d3a:	|  |  |            cmp.l a0,d0
    9d3c:	|  |  |     /----- beq.s 9d7e <failSecurityCheck+0x64>
    9d3e:	|  |  |     |      moveq #124,d1
    9d40:	|  |  |     |      cmp.l a0,d1
    9d42:	|  |  |  /--|----- blt.s 9d94 <failSecurityCheck+0x7a>
    9d44:	|  |  |  |  |      moveq #92,d0
    9d46:	|  |  |  |  |      cmp.l a0,d0
    9d48:	|  |  |  |  +----- beq.s 9d7e <failSecurityCheck+0x64>
    9d4a:	|  |  |  |  |      moveq #92,d1
    9d4c:	|  |  |  |  |      cmp.l a0,d1
    9d4e:	|  |  |  +--|----- blt.s 9d94 <failSecurityCheck+0x7a>
    9d50:	|  |  |  |  |      moveq #60,d0
    9d52:	|  |  |  |  |      cmp.l a0,d0
    9d54:	|  |  |  |  |  /-- blt.s 9d74 <failSecurityCheck+0x5a>
    9d56:	|  |  |  |  |  |   moveq #34,d1
    9d58:	|  |  |  |  |  |   cmp.l a0,d1
    9d5a:	|  |  |  +--|--|-- bgt.s 9d94 <failSecurityCheck+0x7a>
    9d5c:	|  |  |  |  |  |   moveq #-34,d1
    9d5e:	|  |  |  |  |  |   add.l a0,d1
    9d60:	|  |  |  |  |  |   move.l #83894529,d0
    9d66:	|  |  |  |  |  |   lsr.l d1,d0
    9d68:	|  |  |  |  |  |   moveq #1,d1
    9d6a:	|  |  |  |  |  |   and.l d1,d0
    9d6c:	|  |  |  |  |  |   sne d0
    9d6e:	|  |  |  |  |  |   neg.b d0
    9d70:	|  |  |  |  +--|-- bne.s 9d7e <failSecurityCheck+0x64>
    9d72:	|  |  |  +--|--|-- bra.s 9d94 <failSecurityCheck+0x7a>
    9d74:	|  |  |  |  |  \-> lea -62(a0),a0
    9d78:	|  |  |  |  |      moveq #1,d0
    9d7a:	|  |  |  |  |      cmp.l a0,d0
    9d7c:	|  |  |  +--|----- bcs.s 9d94 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    9d7e:	|  |  |  |  \----> move.l 8(sp),-(sp)
    9d82:	|  |  |  |         pea 1572c <incbin_player_end+0x7f8>
    9d88:	|  |  |  |         jsr 12130 <KPrintF>
    9d8e:	|  |  |  |         addq.l #8,sp
				return TRUE;
    9d90:	|  |  |  |         moveq #1,d0
    9d92:	+--|--|--|-------- bra.s 9da4 <failSecurityCheck+0x8a>
		}
		a++;
    9d94:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    9d96:	|  |  \----------> move.l (sp),d0
    9d98:	|  |               movea.l 8(sp),a0
    9d9c:	|  |               adda.l d0,a0
    9d9e:	|  |               move.b (a0),d0
    9da0:	|  \-------------- bne.s 9d2a <failSecurityCheck+0x10>
	}
	return FALSE;
    9da2:	|                  clr.w d0
}
    9da4:	\----------------> addq.l #4,sp
    9da6:	                   rts

00009da8 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    9da8:	             lea -24(sp),sp
    9dac:	             move.l a6,-(sp)
    9dae:	             move.l 40(sp),d0
    9db2:	             move.w d0,d0
    9db4:	             move.w d0,6(sp)
	int fileNum = -1;
    9db8:	             moveq #-1,d0
    9dba:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    9dbe:	             jsr 3358 <killSpeechTimers>

	switch (numParams) {
    9dc4:	             moveq #2,d0
    9dc6:	             cmp.l 32(sp),d0
    9dca:	      /----- beq.s 9e0e <sayCore+0x66>
    9dcc:	      |      moveq #3,d0
    9dce:	      |      cmp.l 32(sp),d0
    9dd2:	/-----|----- bne.w 9ef0 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    9dd6:	|     |      movea.l 36(sp),a0
    9dda:	|     |      move.l 24(a0),d0
    9dde:	|     |      move.l d0,-(sp)
    9de0:	|     |      pea 5 <_start+0x5>
    9de4:	|     |      lea 20(sp),a0
    9de8:	|     |      move.l a0,-(sp)
    9dea:	|     |      jsr 100dc <getValueType>
    9df0:	|     |      lea 12(sp),sp
    9df4:	|     |      tst.w d0
    9df6:	|     |  /-- bne.s 9dfe <sayCore+0x56>
    9df8:	|     |  |   moveq #1,d0
    9dfa:	|  /--|--|-- bra.w 9f00 <sayCore+0x158>
			trimStack (&fun -> stack);
    9dfe:	|  |  |  \-> moveq #24,d0
    9e00:	|  |  |      add.l 36(sp),d0
    9e04:	|  |  |      move.l d0,-(sp)
    9e06:	|  |  |      jsr 10a60 <trimStack>
    9e0c:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    9e0e:	|  |  \----> movea.l 36(sp),a0
    9e12:	|  |         move.l 24(a0),d0
    9e16:	|  |         move.l d0,-(sp)
    9e18:	|  |         jsr 106b2 <getTextFromAnyVar>
    9e1e:	|  |         addq.l #4,sp
    9e20:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    9e24:	|  |     /-- bne.s 9e2c <sayCore+0x84>
    9e26:	|  |     |   moveq #1,d0
    9e28:	|  +-----|-- bra.w 9f00 <sayCore+0x158>
			trimStack (&fun -> stack);
    9e2c:	|  |     \-> moveq #24,d0
    9e2e:	|  |         add.l 36(sp),d0
    9e32:	|  |         move.l d0,-(sp)
    9e34:	|  |         jsr 10a60 <trimStack>
    9e3a:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    9e3c:	|  |         movea.l 36(sp),a0
    9e40:	|  |         move.l 24(a0),d0
    9e44:	|  |         move.l d0,-(sp)
    9e46:	|  |         pea 7 <_start+0x7>
    9e4a:	|  |         lea 16(sp),a0
    9e4e:	|  |         move.l a0,-(sp)
    9e50:	|  |         jsr 100dc <getValueType>
    9e56:	|  |         lea 12(sp),sp
    9e5a:	|  |         tst.w d0
    9e5c:	|  |     /-- bne.s 9e64 <sayCore+0xbc>
    9e5e:	|  |     |   moveq #1,d0
    9e60:	|  +-----|-- bra.w 9f00 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    9e64:	|  |     \-> movea.l 36(sp),a0
    9e68:	|  |         move.l 24(a0),d0
    9e6c:	|  |         move.l d0,-(sp)
    9e6e:	|  |         pea 7 <_start+0x7>
    9e72:	|  |         lea 16(sp),a0
    9e76:	|  |         move.l a0,-(sp)
    9e78:	|  |         jsr 100dc <getValueType>
    9e7e:	|  |         lea 12(sp),sp
    9e82:	|  |         tst.w d0
    9e84:	|  |     /-- bne.s 9e8a <sayCore+0xe2>
    9e86:	|  |     |   moveq #1,d0
    9e88:	|  +-----|-- bra.s 9f00 <sayCore+0x158>
			trimStack (&fun -> stack);
    9e8a:	|  |     \-> moveq #24,d0
    9e8c:	|  |         add.l 36(sp),d0
    9e90:	|  |         move.l d0,-(sp)
    9e92:	|  |         jsr 10a60 <trimStack>
    9e98:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    9e9a:	|  |         movea.w 6(sp),a0
    9e9e:	|  |         move.l 12(sp),d1
    9ea2:	|  |         move.l 8(sp),d0
    9ea6:	|  |         move.l a0,-(sp)
    9ea8:	|  |         move.l d1,-(sp)
    9eaa:	|  |         move.l d0,-(sp)
    9eac:	|  |         move.l 36(sp),-(sp)
    9eb0:	|  |         jsr 4fd0 <wrapSpeech>
    9eb6:	|  |         lea 16(sp),sp
    9eba:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    9ebe:	|  |         movea.l 36(sp),a0
    9ec2:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    9ec8:	|  |         movea.l 36(sp),a0
    9ecc:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    9ed2:	|  |         move.l 24(sp),16(sp)
    9ed8:	|  |         move.l 19b8e <SysBase>,d0
    9ede:	|  |         movea.l d0,a6
    9ee0:	|  |         movea.l 16(sp),a1
    9ee4:	|  |         jsr -690(a6)
			newText = NULL;
    9ee8:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    9eec:	|  |         moveq #0,d0
    9eee:	|  +-------- bra.s 9f00 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    9ef0:	\--|-------> pea 157b2 <zbuffer.c.4facf542+0x75>
    9ef6:	   |         jsr 12130 <KPrintF>
    9efc:	   |         addq.l #4,sp
	return BR_ERROR;
    9efe:	   |         moveq #1,d0
}
    9f00:	   \-------> movea.l (sp)+,a6
    9f02:	             lea 24(sp),sp
    9f06:	             rts

00009f08 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	//KPrintF("say something");
	return sayCore (numParams, fun, TRUE);
    9f08:	pea 1 <_start+0x1>
    9f0c:	move.l 12(sp),-(sp)
    9f10:	move.l 12(sp),-(sp)
    9f14:	jsr 9da8 <sayCore>
    9f1a:	lea 12(sp),sp
}
    9f1e:	rts

00009f20 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    9f20:	clr.l -(sp)
    9f22:	move.l 12(sp),-(sp)
    9f26:	move.l 12(sp),-(sp)
    9f2a:	jsr 9da8 <sayCore>
    9f30:	lea 12(sp),sp
}
    9f34:	rts

00009f36 <builtIn_freeze>:
{
	UNUSEDALL
	/*freeze ();
	freezeSubs (); Amiga todo: implement */
	//fun -> freezerLevel = 0;
	return BR_CONTINUE;
    9f36:	moveq #2,d0
}
    9f38:	rts

00009f3a <builtIn_unfreeze>:
builtIn(unfreeze)
{
	UNUSEDALL
	/*unfreeze ();
	unfreezeSubs (); Amiga todo: Implement*/
	return BR_CONTINUE;
    9f3a:	moveq #2,d0
}
    9f3c:	rts

00009f3e <builtIn_howFrozen>:
builtIn(howFrozen)
{
	UNUSEDALL
	/*setVariable (&fun -> reg, SVT_INT, howFrozen ());
	return BR_CONTINUE; Amiga todo implement*/
}
    9f3e:	nop
    9f40:	rts

00009f42 <builtIn_setCursor>:

builtIn(setCursor)
{
    9f42:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    9f44:	movea.l 12(sp),a0
    9f48:	move.l 24(a0),d0
    9f4c:	move.l d0,-(sp)
    9f4e:	jsr 105b4 <getAnimationFromVar>
    9f54:	addq.l #4,sp
    9f56:	move.l d0,(sp)
	pickAnimCursor (aa);
    9f58:	move.l (sp),-(sp)
    9f5a:	jsr dba <pickAnimCursor>
    9f60:	addq.l #4,sp
	trimStack (&fun -> stack);
    9f62:	moveq #24,d0
    9f64:	add.l 12(sp),d0
    9f68:	move.l d0,-(sp)
    9f6a:	jsr 10a60 <trimStack>
    9f70:	addq.l #4,sp
	return BR_CONTINUE;
    9f72:	moveq #2,d0
}
    9f74:	addq.l #4,sp
    9f76:	rts

00009f78 <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    9f78:	move.l 19b4e <input+0xa>,d1
    9f7e:	move.l 19c32 <cameraX>,d0
    9f84:	add.l d0,d1
    9f86:	moveq #28,d0
    9f88:	add.l 8(sp),d0
    9f8c:	move.l d1,-(sp)
    9f8e:	pea 1 <_start+0x1>
    9f92:	move.l d0,-(sp)
    9f94:	jsr 109ce <setVariable>
    9f9a:	lea 12(sp),sp
	return BR_CONTINUE;
    9f9e:	moveq #2,d0
}
    9fa0:	rts

00009fa2 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    9fa2:	move.l 19b52 <input+0xe>,d1
    9fa8:	move.l 19c36 <cameraY>,d0
    9fae:	add.l d0,d1
    9fb0:	moveq #28,d0
    9fb2:	add.l 8(sp),d0
    9fb6:	move.l d1,-(sp)
    9fb8:	pea 1 <_start+0x1>
    9fbc:	move.l d0,-(sp)
    9fbe:	jsr 109ce <setVariable>
    9fc4:	lea 12(sp),sp
	return BR_CONTINUE;
    9fc8:	moveq #2,d0
}
    9fca:	rts

00009fcc <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    9fcc:	move.l 19b4e <input+0xa>,d0
    9fd2:	move.l d0,-(sp)
    9fd4:	jsr 12588 <__floatsisf>
    9fda:	addq.l #4,sp
    9fdc:	move.l d0,d1
    9fde:	move.l 18098 <cameraZoom>,d0
    9fe4:	move.l d0,-(sp)
    9fe6:	move.l d1,-(sp)
    9fe8:	jsr 1263a <__mulsf3>
    9fee:	addq.l #8,sp
    9ff0:	move.l d0,-(sp)
    9ff2:	jsr 12520 <__fixsfsi>
    9ff8:	addq.l #4,sp
    9ffa:	move.l d0,d1
    9ffc:	moveq #28,d0
    9ffe:	add.l 8(sp),d0
    a002:	move.l d1,-(sp)
    a004:	pea 1 <_start+0x1>
    a008:	move.l d0,-(sp)
    a00a:	jsr 109ce <setVariable>
    a010:	lea 12(sp),sp
	return BR_CONTINUE;
    a014:	moveq #2,d0
}
    a016:	rts

0000a018 <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    a018:	move.l 19b52 <input+0xe>,d0
    a01e:	move.l d0,-(sp)
    a020:	jsr 12588 <__floatsisf>
    a026:	addq.l #4,sp
    a028:	move.l d0,d1
    a02a:	move.l 18098 <cameraZoom>,d0
    a030:	move.l d0,-(sp)
    a032:	move.l d1,-(sp)
    a034:	jsr 1263a <__mulsf3>
    a03a:	addq.l #8,sp
    a03c:	move.l d0,-(sp)
    a03e:	jsr 12520 <__fixsfsi>
    a044:	addq.l #4,sp
    a046:	move.l d0,d1
    a048:	moveq #28,d0
    a04a:	add.l 8(sp),d0
    a04e:	move.l d1,-(sp)
    a050:	pea 1 <_start+0x1>
    a054:	move.l d0,-(sp)
    a056:	jsr 109ce <setVariable>
    a05c:	lea 12(sp),sp
	return BR_CONTINUE;
    a060:	moveq #2,d0
}
    a062:	rts

0000a064 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    a064:	jsr 4a84 <statusBarText>
    a06a:	move.l d0,d1
    a06c:	moveq #28,d0
    a06e:	add.l 8(sp),d0
    a072:	move.l d1,-(sp)
    a074:	move.l d0,-(sp)
    a076:	jsr 102fe <makeTextVar>
    a07c:	addq.l #8,sp
	return BR_CONTINUE;
    a07e:	moveq #2,d0
}
    a080:	rts

0000a082 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    a082:	       lea -20(sp),sp
    a086:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    a088:	       movea.l 32(sp),a0
    a08c:	       move.l 24(a0),d0
    a090:	       move.l d0,-(sp)
    a092:	       jsr 106b2 <getTextFromAnyVar>
    a098:	       addq.l #4,sp
    a09a:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    a09e:	   /-- bne.s a0a6 <builtIn_getMatchingFiles+0x24>
    a0a0:	   |   moveq #1,d0
    a0a2:	/--|-- bra.w a168 <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    a0a6:	|  \-> moveq #24,d0
    a0a8:	|      add.l 32(sp),d0
    a0ac:	|      move.l d0,-(sp)
    a0ae:	|      jsr 10a60 <trimStack>
    a0b4:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    a0b6:	|      moveq #28,d0
    a0b8:	|      add.l 32(sp),d0
    a0bc:	|      move.l d0,-(sp)
    a0be:	|      jsr 1032a <unlinkVar>
    a0c4:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    a0c6:	|      movea.l 32(sp),a0
    a0ca:	|      moveq #6,d0
    a0cc:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    a0d0:	|      moveq #12,d0
    a0d2:	|      move.l d0,16(sp)
    a0d6:	|      clr.l 12(sp)
    a0da:	|      move.l 19b8e <SysBase>,d0
    a0e0:	|      movea.l d0,a6
    a0e2:	|      move.l 16(sp),d0
    a0e6:	|      move.l 12(sp),d1
    a0ea:	|      jsr -684(a6)
    a0ee:	|      move.l d0,8(sp)
    a0f2:	|      move.l 8(sp),d0
    a0f6:	|      movea.l 32(sp),a0
    a0fa:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    a0fe:	|      moveq #32,d0
    a100:	|      add.l 32(sp),d0
    a104:	|  /-- bne.s a10a <builtIn_getMatchingFiles+0x88>
    a106:	|  |   moveq #1,d0
    a108:	+--|-- bra.s a168 <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    a10a:	|  \-> movea.l 32(sp),a0
    a10e:	|      movea.l 32(a0),a0
    a112:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    a114:	|      movea.l 32(sp),a0
    a118:	|      movea.l 32(a0),a0
    a11c:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    a120:	|      movea.l 32(sp),a0
    a124:	|      movea.l 32(a0),a0
    a128:	|      moveq #1,d0
    a12a:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    a12e:	|      movea.l 32(sp),a0
    a132:	|      move.l 32(a0),d0
    a136:	|      move.l 20(sp),-(sp)
    a13a:	|      move.l d0,-(sp)
    a13c:	|      jsr fe98 <getSavedGamesStack>
    a142:	|      addq.l #8,sp
    a144:	|      tst.w d0
    a146:	|  /-- bne.s a14c <builtIn_getMatchingFiles+0xca>
    a148:	|  |   moveq #1,d0
    a14a:	+--|-- bra.s a168 <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    a14c:	|  \-> move.l 20(sp),4(sp)
    a152:	|      move.l 19b8e <SysBase>,d0
    a158:	|      movea.l d0,a6
    a15a:	|      movea.l 4(sp),a1
    a15e:	|      jsr -690(a6)
	newText = NULL;
    a162:	|      clr.l 20(sp)
	return BR_CONTINUE;
    a166:	|      moveq #2,d0
}
    a168:	\----> movea.l (sp)+,a6
    a16a:	       lea 20(sp),sp
    a16e:	       rts

0000a170 <builtIn_saveGame>:

builtIn(saveGame)
{
    a170:	       lea -12(sp),sp
    a174:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    a176:	       movea.l 24(sp),a0
    a17a:	       move.l 24(a0),d0
    a17e:	       move.l d0,-(sp)
    a180:	       jsr 106b2 <getTextFromAnyVar>
    a186:	       addq.l #4,sp
    a188:	       move.l d0,19b5a <loadNow>
    trimStack(&fun->stack);
    a18e:	       moveq #24,d0
    a190:	       add.l 24(sp),d0
    a194:	       move.l d0,-(sp)
    a196:	       jsr 10a60 <trimStack>
    a19c:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    a19e:	       move.l 19b5a <loadNow>,d0
    a1a4:	       move.l d0,-(sp)
    a1a6:	       jsr 2fe <encodeFilename>
    a1ac:	       addq.l #4,sp
    a1ae:	       move.l d0,12(sp)
    FreeVec(loadNow);
    a1b2:	       move.l 19b5a <loadNow>,8(sp)
    a1ba:	       move.l 19b8e <SysBase>,d0
    a1c0:	       movea.l d0,a6
    a1c2:	       movea.l 8(sp),a1
    a1c6:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    a1ca:	       move.l 12(sp),-(sp)
    a1ce:	       jsr 9d1a <failSecurityCheck>
    a1d4:	       addq.l #4,sp
    a1d6:	       tst.w d0
    a1d8:	   /-- beq.s a1de <builtIn_saveGame+0x6e>
    a1da:	   |   moveq #1,d0
    a1dc:	/--|-- bra.s a22e <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    a1de:	|  \-> move.l 12(sp),-(sp)
    a1e2:	|      pea 157e0 <zbuffer.c.4facf542+0xa3>
    a1e8:	|      jsr f608 <joinStrings>
    a1ee:	|      addq.l #8,sp
    a1f0:	|      move.l d0,19b5a <loadNow>
    FreeVec(aaaaa);
    a1f6:	|      move.l 12(sp),4(sp)
    a1fc:	|      move.l 19b8e <SysBase>,d0
    a202:	|      movea.l d0,a6
    a204:	|      movea.l 4(sp),a1
    a208:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    a20c:	|      moveq #28,d0
    a20e:	|      add.l 24(sp),d0
    a212:	|      clr.l -(sp)
    a214:	|      pea 1 <_start+0x1>
    a218:	|      move.l d0,-(sp)
    a21a:	|      jsr 109ce <setVariable>
    a220:	|      lea 12(sp),sp
    saverFunc = fun;
    a224:	|      move.l 24(sp),19c42 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    a22c:	|      moveq #0,d0
}
    a22e:	\----> movea.l (sp)+,a6
    a230:	       lea 12(sp),sp
    a234:	       rts

0000a236 <builtIn_fileExists>:

builtIn(fileExists)
{
    a236:	       lea -36(sp),sp
    a23a:	       move.l a6,-(sp)
    a23c:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    a23e:	       movea.l 52(sp),a0
    a242:	       move.l 24(a0),d0
    a246:	       move.l d0,-(sp)
    a248:	       jsr 106b2 <getTextFromAnyVar>
    a24e:	       addq.l #4,sp
    a250:	       move.l d0,19b5a <loadNow>
    trimStack(&fun->stack);
    a256:	       moveq #24,d0
    a258:	       add.l 52(sp),d0
    a25c:	       move.l d0,-(sp)
    a25e:	       jsr 10a60 <trimStack>
    a264:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    a266:	       move.l 19b5a <loadNow>,d0
    a26c:	       move.l d0,-(sp)
    a26e:	       jsr 2fe <encodeFilename>
    a274:	       addq.l #4,sp
    a276:	       move.l d0,40(sp)
    FreeVec(loadNow);
    a27a:	       move.l 19b5a <loadNow>,36(sp)
    a282:	       move.l 19b8e <SysBase>,d0
    a288:	       movea.l d0,a6
    a28a:	       movea.l 36(sp),a1
    a28e:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    a292:	       move.l 40(sp),-(sp)
    a296:	       jsr 9d1a <failSecurityCheck>
    a29c:	       addq.l #4,sp
    a29e:	       tst.w d0
    a2a0:	   /-- beq.s a2a8 <builtIn_fileExists+0x72>
    a2a2:	   |   moveq #1,d0
    a2a4:	/--|-- bra.w a348 <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    a2a8:	|  \-> move.l 40(sp),32(sp)
    a2ae:	|      move.l #1005,28(sp)
    a2b6:	|      move.l 19b96 <DOSBase>,d0
    a2bc:	|      movea.l d0,a6
    a2be:	|      move.l 32(sp),d1
    a2c2:	|      move.l 28(sp),d2
    a2c6:	|      jsr -30(a6)
    a2ca:	|      move.l d0,24(sp)
    a2ce:	|      move.l 24(sp),d0
    a2d2:	|      move.l d0,20(sp)
    if (!fp) {        
    a2d6:	|  /-- bne.s a2e6 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    a2d8:	|  |   pea 157e2 <zbuffer.c.4facf542+0xa5>
    a2de:	|  |   jsr 12130 <KPrintF>
    a2e4:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    a2e6:	|  \-> tst.l 20(sp)
    a2ea:	|      sne d0
    a2ec:	|      neg.b d0
    a2ee:	|      moveq #0,d1
    a2f0:	|      move.b d0,d1
    a2f2:	|      moveq #28,d0
    a2f4:	|      add.l 52(sp),d0
    a2f8:	|      move.l d1,-(sp)
    a2fa:	|      pea 1 <_start+0x1>
    a2fe:	|      move.l d0,-(sp)
    a300:	|      jsr 109ce <setVariable>
    a306:	|      lea 12(sp),sp
    if (fp) Close(fp);
    a30a:	|      tst.l 20(sp)
    a30e:	|  /-- beq.s a32a <builtIn_fileExists+0xf4>
    a310:	|  |   move.l 20(sp),16(sp)
    a316:	|  |   move.l 19b96 <DOSBase>,d0
    a31c:	|  |   movea.l d0,a6
    a31e:	|  |   move.l 16(sp),d1
    a322:	|  |   jsr -36(a6)
    a326:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    a32a:	|  \-> move.l 40(sp),8(sp)
    a330:	|      move.l 19b8e <SysBase>,d0
    a336:	|      movea.l d0,a6
    a338:	|      movea.l 8(sp),a1
    a33c:	|      jsr -690(a6)
    loadNow = NULL;
    a340:	|      clr.l 19b5a <loadNow>
    return BR_CONTINUE;
    a346:	|      moveq #2,d0
}
    a348:	\----> move.l (sp)+,d2
    a34a:	       movea.l (sp)+,a6
    a34c:	       lea 36(sp),sp
    a350:	       rts

0000a352 <builtIn_loadGame>:

builtIn(loadGame)
{
    a352:	       lea -36(sp),sp
    a356:	       move.l a6,-(sp)
    a358:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    a35a:	       movea.l 52(sp),a0
    a35e:	       move.l 24(a0),d0
    a362:	       move.l d0,-(sp)
    a364:	       jsr 106b2 <getTextFromAnyVar>
    a36a:	       addq.l #4,sp
    a36c:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    a370:	       moveq #24,d0
    a372:	       add.l 52(sp),d0
    a376:	       move.l d0,-(sp)
    a378:	       jsr 10a60 <trimStack>
    a37e:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    a380:	       move.l 40(sp),-(sp)
    a384:	       jsr 2fe <encodeFilename>
    a38a:	       addq.l #4,sp
    a38c:	       move.l d0,19b5a <loadNow>
    FreeVec(aaaaa);
    a392:	       move.l 40(sp),36(sp)
    a398:	       move.l 19b8e <SysBase>,d0
    a39e:	       movea.l d0,a6
    a3a0:	       movea.l 36(sp),a1
    a3a4:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    a3a8:	       move.l 19b5a <loadNow>,d0
    a3ae:	       move.l d0,-(sp)
    a3b0:	       jsr 9d1a <failSecurityCheck>
    a3b6:	       addq.l #4,sp
    a3b8:	       tst.w d0
    a3ba:	   /-- beq.s a3c0 <builtIn_loadGame+0x6e>
    a3bc:	   |   moveq #1,d0
    a3be:	/--|-- bra.s a430 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    a3c0:	|  \-> move.l 19b5a <loadNow>,32(sp)
    a3c8:	|      move.l #1005,28(sp)
    a3d0:	|      move.l 19b96 <DOSBase>,d0
    a3d6:	|      movea.l d0,a6
    a3d8:	|      move.l 32(sp),d1
    a3dc:	|      move.l 28(sp),d2
    a3e0:	|      jsr -30(a6)
    a3e4:	|      move.l d0,24(sp)
    a3e8:	|      move.l 24(sp),d0
    a3ec:	|      move.l d0,20(sp)
    if (fp) {
    a3f0:	|  /-- beq.s a410 <builtIn_loadGame+0xbe>
        Close(fp);
    a3f2:	|  |   move.l 20(sp),12(sp)
    a3f8:	|  |   move.l 19b96 <DOSBase>,d0
    a3fe:	|  |   movea.l d0,a6
    a400:	|  |   move.l 12(sp),d1
    a404:	|  |   jsr -36(a6)
    a408:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    a40c:	|  |   moveq #0,d0
    a40e:	+--|-- bra.s a430 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    a410:	|  \-> move.l 19b5a <loadNow>,16(sp)
    a418:	|      move.l 19b8e <SysBase>,d0
    a41e:	|      movea.l d0,a6
    a420:	|      movea.l 16(sp),a1
    a424:	|      jsr -690(a6)
    loadNow = NULL;
    a428:	|      clr.l 19b5a <loadNow>
    return BR_CONTINUE;
    a42e:	|      moveq #2,d0
}
    a430:	\----> move.l (sp)+,d2
    a432:	       movea.l (sp)+,a6
    a434:	       lea 36(sp),sp
    a438:	       rts

0000a43a <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    a43a:	move.l 19c18 <sceneHeight>,d0
    a440:	move.l d0,d1
    a442:	move.l 19c14 <sceneWidth>,d0
    a448:	move.l d1,-(sp)
    a44a:	move.l d0,-(sp)
    a44c:	clr.l -(sp)
    a44e:	clr.l -(sp)
    a450:	jsr 8c80 <blankScreen>
    a456:	lea 16(sp),sp
	return BR_CONTINUE;
    a45a:	moveq #2,d0
}
    a45c:	rts

0000a45e <builtIn_blankArea>:

builtIn(blankArea)
{
    a45e:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    a462:	       movea.l 24(sp),a0
    a466:	       move.l 24(a0),d0
    a46a:	       move.l d0,-(sp)
    a46c:	       pea 1 <_start+0x1>
    a470:	       lea 8(sp),a0
    a474:	       move.l a0,-(sp)
    a476:	       jsr 100dc <getValueType>
    a47c:	       lea 12(sp),sp
    a480:	       tst.w d0
    a482:	   /-- bne.s a48a <builtIn_blankArea+0x2c>
    a484:	   |   moveq #1,d0
    a486:	/--|-- bra.w a560 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    a48a:	|  \-> moveq #24,d0
    a48c:	|      add.l 24(sp),d0
    a490:	|      move.l d0,-(sp)
    a492:	|      jsr 10a60 <trimStack>
    a498:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    a49a:	|      movea.l 24(sp),a0
    a49e:	|      move.l 24(a0),d0
    a4a2:	|      move.l d0,-(sp)
    a4a4:	|      pea 1 <_start+0x1>
    a4a8:	|      lea 12(sp),a0
    a4ac:	|      move.l a0,-(sp)
    a4ae:	|      jsr 100dc <getValueType>
    a4b4:	|      lea 12(sp),sp
    a4b8:	|      tst.w d0
    a4ba:	|  /-- bne.s a4c2 <builtIn_blankArea+0x64>
    a4bc:	|  |   moveq #1,d0
    a4be:	+--|-- bra.w a560 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    a4c2:	|  \-> moveq #24,d0
    a4c4:	|      add.l 24(sp),d0
    a4c8:	|      move.l d0,-(sp)
    a4ca:	|      jsr 10a60 <trimStack>
    a4d0:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    a4d2:	|      movea.l 24(sp),a0
    a4d6:	|      move.l 24(a0),d0
    a4da:	|      move.l d0,-(sp)
    a4dc:	|      pea 1 <_start+0x1>
    a4e0:	|      moveq #16,d0
    a4e2:	|      add.l sp,d0
    a4e4:	|      move.l d0,-(sp)
    a4e6:	|      jsr 100dc <getValueType>
    a4ec:	|      lea 12(sp),sp
    a4f0:	|      tst.w d0
    a4f2:	|  /-- bne.s a4f8 <builtIn_blankArea+0x9a>
    a4f4:	|  |   moveq #1,d0
    a4f6:	+--|-- bra.s a560 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    a4f8:	|  \-> moveq #24,d0
    a4fa:	|      add.l 24(sp),d0
    a4fe:	|      move.l d0,-(sp)
    a500:	|      jsr 10a60 <trimStack>
    a506:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    a508:	|      movea.l 24(sp),a0
    a50c:	|      move.l 24(a0),d0
    a510:	|      move.l d0,-(sp)
    a512:	|      pea 1 <_start+0x1>
    a516:	|      moveq #20,d0
    a518:	|      add.l sp,d0
    a51a:	|      move.l d0,-(sp)
    a51c:	|      jsr 100dc <getValueType>
    a522:	|      lea 12(sp),sp
    a526:	|      tst.w d0
    a528:	|  /-- bne.s a52e <builtIn_blankArea+0xd0>
    a52a:	|  |   moveq #1,d0
    a52c:	+--|-- bra.s a560 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    a52e:	|  \-> moveq #24,d0
    a530:	|      add.l 24(sp),d0
    a534:	|      move.l d0,-(sp)
    a536:	|      jsr 10a60 <trimStack>
    a53c:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    a53e:	|      movea.l (sp),a1
    a540:	|      movea.l 4(sp),a0
    a544:	|      move.l 8(sp),d1
    a548:	|      move.l 12(sp),d0
    a54c:	|      move.l a1,-(sp)
    a54e:	|      move.l a0,-(sp)
    a550:	|      move.l d1,-(sp)
    a552:	|      move.l d0,-(sp)
    a554:	|      jsr 8c80 <blankScreen>
    a55a:	|      lea 16(sp),sp
	return BR_CONTINUE;
    a55e:	|      moveq #2,d0
}
    a560:	\----> lea 16(sp),sp
    a564:	       rts

0000a566 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    a566:	jsr 8c92 <darkScreen>
	return BR_CONTINUE;
    a56c:	moveq #2,d0
}
    a56e:	rts

0000a570 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    a570:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a574:	       movea.l 20(sp),a0
    a578:	       move.l 24(a0),d0
    a57c:	       move.l d0,-(sp)
    a57e:	       pea 1 <_start+0x1>
    a582:	       lea 8(sp),a0
    a586:	       move.l a0,-(sp)
    a588:	       jsr 100dc <getValueType>
    a58e:	       lea 12(sp),sp
    a592:	       tst.w d0
    a594:	   /-- bne.s a59c <builtIn_addOverlay+0x2c>
    a596:	   |   moveq #1,d0
    a598:	/--|-- bra.w a634 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    a59c:	|  \-> moveq #24,d0
    a59e:	|      add.l 20(sp),d0
    a5a2:	|      move.l d0,-(sp)
    a5a4:	|      jsr 10a60 <trimStack>
    a5aa:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a5ac:	|      movea.l 20(sp),a0
    a5b0:	|      move.l 24(a0),d0
    a5b4:	|      move.l d0,-(sp)
    a5b6:	|      pea 1 <_start+0x1>
    a5ba:	|      moveq #12,d0
    a5bc:	|      add.l sp,d0
    a5be:	|      move.l d0,-(sp)
    a5c0:	|      jsr 100dc <getValueType>
    a5c6:	|      lea 12(sp),sp
    a5ca:	|      tst.w d0
    a5cc:	|  /-- bne.s a5d2 <builtIn_addOverlay+0x62>
    a5ce:	|  |   moveq #1,d0
    a5d0:	+--|-- bra.s a634 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    a5d2:	|  \-> moveq #24,d0
    a5d4:	|      add.l 20(sp),d0
    a5d8:	|      move.l d0,-(sp)
    a5da:	|      jsr 10a60 <trimStack>
    a5e0:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    a5e2:	|      movea.l 20(sp),a0
    a5e6:	|      move.l 24(a0),d0
    a5ea:	|      move.l d0,-(sp)
    a5ec:	|      pea 5 <_start+0x5>
    a5f0:	|      moveq #16,d0
    a5f2:	|      add.l sp,d0
    a5f4:	|      move.l d0,-(sp)
    a5f6:	|      jsr 100dc <getValueType>
    a5fc:	|      lea 12(sp),sp
    a600:	|      tst.w d0
    a602:	|  /-- bne.s a608 <builtIn_addOverlay+0x98>
    a604:	|  |   moveq #1,d0
    a606:	+--|-- bra.s a634 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    a608:	|  \-> moveq #24,d0
    a60a:	|      add.l 20(sp),d0
    a60e:	|      move.l d0,-(sp)
    a610:	|      jsr 10a60 <trimStack>
    a616:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    a618:	|      movea.l (sp),a0
    a61a:	|      move.l 4(sp),d1
    a61e:	|      move.l 8(sp),d0
    a622:	|      move.l a0,-(sp)
    a624:	|      move.l d1,-(sp)
    a626:	|      move.l d0,-(sp)
    a628:	|      jsr 8daa <loadBackDrop>
    a62e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    a632:	|      moveq #2,d0
}
    a634:	\----> lea 12(sp),sp
    a638:	       rts

0000a63a <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    a63a:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a63e:	       movea.l 20(sp),a0
    a642:	       move.l 24(a0),d0
    a646:	       move.l d0,-(sp)
    a648:	       pea 1 <_start+0x1>
    a64c:	       lea 8(sp),a0
    a650:	       move.l a0,-(sp)
    a652:	       jsr 100dc <getValueType>
    a658:	       lea 12(sp),sp
    a65c:	       tst.w d0
    a65e:	   /-- bne.s a666 <builtIn_mixOverlay+0x2c>
    a660:	   |   moveq #1,d0
    a662:	/--|-- bra.w a6fe <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    a666:	|  \-> moveq #24,d0
    a668:	|      add.l 20(sp),d0
    a66c:	|      move.l d0,-(sp)
    a66e:	|      jsr 10a60 <trimStack>
    a674:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a676:	|      movea.l 20(sp),a0
    a67a:	|      move.l 24(a0),d0
    a67e:	|      move.l d0,-(sp)
    a680:	|      pea 1 <_start+0x1>
    a684:	|      moveq #12,d0
    a686:	|      add.l sp,d0
    a688:	|      move.l d0,-(sp)
    a68a:	|      jsr 100dc <getValueType>
    a690:	|      lea 12(sp),sp
    a694:	|      tst.w d0
    a696:	|  /-- bne.s a69c <builtIn_mixOverlay+0x62>
    a698:	|  |   moveq #1,d0
    a69a:	+--|-- bra.s a6fe <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    a69c:	|  \-> moveq #24,d0
    a69e:	|      add.l 20(sp),d0
    a6a2:	|      move.l d0,-(sp)
    a6a4:	|      jsr 10a60 <trimStack>
    a6aa:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    a6ac:	|      movea.l 20(sp),a0
    a6b0:	|      move.l 24(a0),d0
    a6b4:	|      move.l d0,-(sp)
    a6b6:	|      pea 5 <_start+0x5>
    a6ba:	|      moveq #16,d0
    a6bc:	|      add.l sp,d0
    a6be:	|      move.l d0,-(sp)
    a6c0:	|      jsr 100dc <getValueType>
    a6c6:	|      lea 12(sp),sp
    a6ca:	|      tst.w d0
    a6cc:	|  /-- bne.s a6d2 <builtIn_mixOverlay+0x98>
    a6ce:	|  |   moveq #1,d0
    a6d0:	+--|-- bra.s a6fe <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    a6d2:	|  \-> moveq #24,d0
    a6d4:	|      add.l 20(sp),d0
    a6d8:	|      move.l d0,-(sp)
    a6da:	|      jsr 10a60 <trimStack>
    a6e0:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    a6e2:	|      movea.l (sp),a0
    a6e4:	|      move.l 4(sp),d1
    a6e8:	|      move.l 8(sp),d0
    a6ec:	|      move.l a0,-(sp)
    a6ee:	|      move.l d1,-(sp)
    a6f0:	|      move.l d0,-(sp)
    a6f2:	|      jsr 8df0 <mixBackDrop>
    a6f8:	|      lea 12(sp),sp
	return BR_CONTINUE;
    a6fc:	|      moveq #2,d0
}
    a6fe:	\----> lea 12(sp),sp
    a702:	       rts

0000a704 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    a704:	       lea -12(sp),sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a708:	       movea.l 20(sp),a0
    a70c:	       move.l 24(a0),d0
    a710:	       move.l d0,-(sp)
    a712:	       pea 1 <_start+0x1>
    a716:	       lea 8(sp),a0
    a71a:	       move.l a0,-(sp)
    a71c:	       jsr 100dc <getValueType>
    a722:	       lea 12(sp),sp
    a726:	       tst.w d0
    a728:	   /-- bne.s a730 <builtIn_pasteImage+0x2c>
    a72a:	   |   moveq #1,d0
    a72c:	/--|-- bra.w a7c0 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    a730:	|  \-> moveq #24,d0
    a732:	|      add.l 20(sp),d0
    a736:	|      move.l d0,-(sp)
    a738:	|      jsr 10a60 <trimStack>
    a73e:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a740:	|      movea.l 20(sp),a0
    a744:	|      move.l 24(a0),d0
    a748:	|      move.l d0,-(sp)
    a74a:	|      pea 1 <_start+0x1>
    a74e:	|      moveq #12,d0
    a750:	|      add.l sp,d0
    a752:	|      move.l d0,-(sp)
    a754:	|      jsr 100dc <getValueType>
    a75a:	|      lea 12(sp),sp
    a75e:	|      tst.w d0
    a760:	|  /-- bne.s a766 <builtIn_pasteImage+0x62>
    a762:	|  |   moveq #1,d0
    a764:	+--|-- bra.s a7c0 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    a766:	|  \-> moveq #24,d0
    a768:	|      add.l 20(sp),d0
    a76c:	|      move.l d0,-(sp)
    a76e:	|      jsr 10a60 <trimStack>
    a774:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    a776:	|      movea.l 20(sp),a0
    a77a:	|      move.l 24(a0),d0
    a77e:	|      move.l d0,-(sp)
    a780:	|      jsr 105b4 <getAnimationFromVar>
    a786:	|      addq.l #4,sp
    a788:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    a78c:	|      moveq #24,d0
    a78e:	|      add.l 20(sp),d0
    a792:	|      move.l d0,-(sp)
    a794:	|      jsr 10a60 <trimStack>
    a79a:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    a79c:	|      tst.l 8(sp)
    a7a0:	|  /-- bne.s a7a6 <builtIn_pasteImage+0xa2>
    a7a2:	|  |   moveq #2,d0
    a7a4:	+--|-- bra.s a7c0 <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    a7a6:	|  \-> move.l (sp),d1
    a7a8:	|      move.l 4(sp),d0
    a7ac:	|      move.l 8(sp),-(sp)
    a7b0:	|      move.l d1,-(sp)
    a7b2:	|      move.l d0,-(sp)
    a7b4:	|      jsr de2 <pasteCursor>
    a7ba:	|      lea 12(sp),sp
	return BR_CONTINUE;
    a7be:	|      moveq #2,d0
}
    a7c0:	\----> lea 12(sp),sp
    a7c4:	       rts

0000a7c6 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    a7c6:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a7c8:	       movea.l 16(sp),a0
    a7cc:	       move.l 24(a0),d0
    a7d0:	       move.l d0,-(sp)
    a7d2:	       pea 1 <_start+0x1>
    a7d6:	       move.l sp,d0
    a7d8:	       addq.l #8,d0
    a7da:	       move.l d0,-(sp)
    a7dc:	       jsr 100dc <getValueType>
    a7e2:	       lea 12(sp),sp
    a7e6:	       tst.w d0
    a7e8:	   /-- bne.s a7f0 <builtIn_setSceneDimensions+0x2a>
    a7ea:	   |   moveq #1,d0
    a7ec:	/--|-- bra.w a878 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    a7f0:	|  \-> moveq #24,d0
    a7f2:	|      add.l 16(sp),d0
    a7f6:	|      move.l d0,-(sp)
    a7f8:	|      jsr 10a60 <trimStack>
    a7fe:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a800:	|      movea.l 16(sp),a0
    a804:	|      move.l 24(a0),d0
    a808:	|      move.l d0,-(sp)
    a80a:	|      pea 1 <_start+0x1>
    a80e:	|      moveq #12,d0
    a810:	|      add.l sp,d0
    a812:	|      move.l d0,-(sp)
    a814:	|      jsr 100dc <getValueType>
    a81a:	|      lea 12(sp),sp
    a81e:	|      tst.w d0
    a820:	|  /-- bne.s a826 <builtIn_setSceneDimensions+0x60>
    a822:	|  |   moveq #1,d0
    a824:	+--|-- bra.s a878 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    a826:	|  \-> moveq #24,d0
    a828:	|      add.l 16(sp),d0
    a82c:	|      move.l d0,-(sp)
    a82e:	|      jsr 10a60 <trimStack>
    a834:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    a836:	|      move.l (sp),d1
    a838:	|      move.l 4(sp),d0
    a83c:	|      move.l d1,-(sp)
    a83e:	|      move.l d0,-(sp)
    a840:	|      jsr 8e1e <resizeBackdrop>
    a846:	|      addq.l #8,sp
    a848:	|      tst.w d0
    a84a:	|  /-- beq.s a868 <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    a84c:	|  |   move.l (sp),d1
    a84e:	|  |   move.l 4(sp),d0
    a852:	|  |   move.l d1,-(sp)
    a854:	|  |   move.l d0,-(sp)
    a856:	|  |   clr.l -(sp)
    a858:	|  |   clr.l -(sp)
    a85a:	|  |   jsr 8c80 <blankScreen>
    a860:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    a864:	|  |   moveq #2,d0
    a866:	+--|-- bra.s a878 <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    a868:	|  \-> pea 15800 <zbuffer.c.4facf542+0xc3>
    a86e:	|      jsr 12130 <KPrintF>
    a874:	|      addq.l #4,sp
	return BR_ERROR;
    a876:	|      moveq #1,d0
}
    a878:	\----> addq.l #8,sp
    a87a:	       rts

0000a87c <builtIn_aimCamera>:

builtIn(aimCamera)
{
    a87c:	          move.l d3,-(sp)
    a87e:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a880:	          movea.l 16(sp),a0
    a884:	          move.l 24(a0),d0
    a888:	          move.l d0,-(sp)
    a88a:	          pea 1 <_start+0x1>
    a88e:	          pea 19c36 <cameraY>
    a894:	          jsr 100dc <getValueType>
    a89a:	          lea 12(sp),sp
    a89e:	          tst.w d0
    a8a0:	      /-- bne.s a8a8 <builtIn_aimCamera+0x2c>
    a8a2:	      |   moveq #1,d0
    a8a4:	/-----|-- bra.w ab2a <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    a8a8:	|     \-> moveq #24,d0
    a8aa:	|         add.l 16(sp),d0
    a8ae:	|         move.l d0,-(sp)
    a8b0:	|         jsr 10a60 <trimStack>
    a8b6:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a8b8:	|         movea.l 16(sp),a0
    a8bc:	|         move.l 24(a0),d0
    a8c0:	|         move.l d0,-(sp)
    a8c2:	|         pea 1 <_start+0x1>
    a8c6:	|         pea 19c32 <cameraX>
    a8cc:	|         jsr 100dc <getValueType>
    a8d2:	|         lea 12(sp),sp
    a8d6:	|         tst.w d0
    a8d8:	|     /-- bne.s a8e0 <builtIn_aimCamera+0x64>
    a8da:	|     |   moveq #1,d0
    a8dc:	+-----|-- bra.w ab2a <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    a8e0:	|     \-> moveq #24,d0
    a8e2:	|         add.l 16(sp),d0
    a8e6:	|         move.l d0,-(sp)
    a8e8:	|         jsr 10a60 <trimStack>
    a8ee:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    a8f0:	|         move.l 19c32 <cameraX>,d0
    a8f6:	|         move.l d0,-(sp)
    a8f8:	|         jsr 12588 <__floatsisf>
    a8fe:	|         addq.l #4,sp
    a900:	|         move.l d0,d2
    a902:	|         move.l 19a8e <winWidth>,d0
    a908:	|         lsr.l #1,d0
    a90a:	|         move.l d0,-(sp)
    a90c:	|         jsr 125b0 <__floatunsisf>
    a912:	|         addq.l #4,sp
    a914:	|         move.l d0,d1
    a916:	|         move.l 18098 <cameraZoom>,d0
    a91c:	|         move.l d0,-(sp)
    a91e:	|         move.l d1,-(sp)
    a920:	|         jsr 12434 <__divsf3>
    a926:	|         addq.l #8,sp
    a928:	|         move.l d0,-(sp)
    a92a:	|         move.l d2,-(sp)
    a92c:	|         jsr 1287c <__subsf3>
    a932:	|         addq.l #8,sp
    a934:	|         move.l d0,-(sp)
    a936:	|         jsr 12520 <__fixsfsi>
    a93c:	|         addq.l #4,sp
    a93e:	|         move.l d0,19c32 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    a944:	|         move.l 19c36 <cameraY>,d0
    a94a:	|         move.l d0,-(sp)
    a94c:	|         jsr 12588 <__floatsisf>
    a952:	|         addq.l #4,sp
    a954:	|         move.l d0,d2
    a956:	|         move.l 19a92 <winHeight>,d0
    a95c:	|         lsr.l #1,d0
    a95e:	|         move.l d0,-(sp)
    a960:	|         jsr 125b0 <__floatunsisf>
    a966:	|         addq.l #4,sp
    a968:	|         move.l d0,d1
    a96a:	|         move.l 18098 <cameraZoom>,d0
    a970:	|         move.l d0,-(sp)
    a972:	|         move.l d1,-(sp)
    a974:	|         jsr 12434 <__divsf3>
    a97a:	|         addq.l #8,sp
    a97c:	|         move.l d0,-(sp)
    a97e:	|         move.l d2,-(sp)
    a980:	|         jsr 1287c <__subsf3>
    a986:	|         addq.l #8,sp
    a988:	|         move.l d0,-(sp)
    a98a:	|         jsr 12520 <__fixsfsi>
    a990:	|         addq.l #4,sp
    a992:	|         move.l d0,19c36 <cameraY>

	if (cameraX < 0) cameraX = 0;
    a998:	|         move.l 19c32 <cameraX>,d0
    a99e:	|     /-- bpl.s a9aa <builtIn_aimCamera+0x12e>
    a9a0:	|     |   clr.l 19c32 <cameraX>
    a9a6:	|  /--|-- bra.w aa60 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    a9aa:	|  |  \-> move.l 19c32 <cameraX>,d0
    a9b0:	|  |      move.l d0,-(sp)
    a9b2:	|  |      jsr 12588 <__floatsisf>
    a9b8:	|  |      addq.l #4,sp
    a9ba:	|  |      move.l d0,d2
    a9bc:	|  |      move.l 19c14 <sceneWidth>,d0
    a9c2:	|  |      move.l d0,-(sp)
    a9c4:	|  |      jsr 125b0 <__floatunsisf>
    a9ca:	|  |      addq.l #4,sp
    a9cc:	|  |      move.l d0,d3
    a9ce:	|  |      move.l 19a8e <winWidth>,d0
    a9d4:	|  |      move.l d0,-(sp)
    a9d6:	|  |      jsr 125b0 <__floatunsisf>
    a9dc:	|  |      addq.l #4,sp
    a9de:	|  |      move.l d0,d1
    a9e0:	|  |      move.l 18098 <cameraZoom>,d0
    a9e6:	|  |      move.l d0,-(sp)
    a9e8:	|  |      move.l d1,-(sp)
    a9ea:	|  |      jsr 12434 <__divsf3>
    a9f0:	|  |      addq.l #8,sp
    a9f2:	|  |      move.l d0,-(sp)
    a9f4:	|  |      move.l d3,-(sp)
    a9f6:	|  |      jsr 1287c <__subsf3>
    a9fc:	|  |      addq.l #8,sp
    a9fe:	|  |      move.l d0,-(sp)
    aa00:	|  |      move.l d2,-(sp)
    aa02:	|  |      jsr 126f4 <__gtsf2>
    aa08:	|  |      addq.l #8,sp
    aa0a:	|  |      tst.l d0
    aa0c:	|  +----- ble.s aa60 <builtIn_aimCamera+0x1e4>
    aa0e:	|  |      move.l 19c14 <sceneWidth>,d0
    aa14:	|  |      move.l d0,-(sp)
    aa16:	|  |      jsr 125b0 <__floatunsisf>
    aa1c:	|  |      addq.l #4,sp
    aa1e:	|  |      move.l d0,d2
    aa20:	|  |      move.l 19a8e <winWidth>,d0
    aa26:	|  |      move.l d0,-(sp)
    aa28:	|  |      jsr 125b0 <__floatunsisf>
    aa2e:	|  |      addq.l #4,sp
    aa30:	|  |      move.l d0,d1
    aa32:	|  |      move.l 18098 <cameraZoom>,d0
    aa38:	|  |      move.l d0,-(sp)
    aa3a:	|  |      move.l d1,-(sp)
    aa3c:	|  |      jsr 12434 <__divsf3>
    aa42:	|  |      addq.l #8,sp
    aa44:	|  |      move.l d0,-(sp)
    aa46:	|  |      move.l d2,-(sp)
    aa48:	|  |      jsr 1287c <__subsf3>
    aa4e:	|  |      addq.l #8,sp
    aa50:	|  |      move.l d0,-(sp)
    aa52:	|  |      jsr 12520 <__fixsfsi>
    aa58:	|  |      addq.l #4,sp
    aa5a:	|  |      move.l d0,19c32 <cameraX>
	if (cameraY < 0) cameraY = 0;
    aa60:	|  \----> move.l 19c36 <cameraY>,d0
    aa66:	|     /-- bpl.s aa72 <builtIn_aimCamera+0x1f6>
    aa68:	|     |   clr.l 19c36 <cameraY>
    aa6e:	|  /--|-- bra.w ab28 <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    aa72:	|  |  \-> move.l 19c36 <cameraY>,d0
    aa78:	|  |      move.l d0,-(sp)
    aa7a:	|  |      jsr 12588 <__floatsisf>
    aa80:	|  |      addq.l #4,sp
    aa82:	|  |      move.l d0,d2
    aa84:	|  |      move.l 19c18 <sceneHeight>,d0
    aa8a:	|  |      move.l d0,-(sp)
    aa8c:	|  |      jsr 125b0 <__floatunsisf>
    aa92:	|  |      addq.l #4,sp
    aa94:	|  |      move.l d0,d3
    aa96:	|  |      move.l 19a92 <winHeight>,d0
    aa9c:	|  |      move.l d0,-(sp)
    aa9e:	|  |      jsr 125b0 <__floatunsisf>
    aaa4:	|  |      addq.l #4,sp
    aaa6:	|  |      move.l d0,d1
    aaa8:	|  |      move.l 18098 <cameraZoom>,d0
    aaae:	|  |      move.l d0,-(sp)
    aab0:	|  |      move.l d1,-(sp)
    aab2:	|  |      jsr 12434 <__divsf3>
    aab8:	|  |      addq.l #8,sp
    aaba:	|  |      move.l d0,-(sp)
    aabc:	|  |      move.l d3,-(sp)
    aabe:	|  |      jsr 1287c <__subsf3>
    aac4:	|  |      addq.l #8,sp
    aac6:	|  |      move.l d0,-(sp)
    aac8:	|  |      move.l d2,-(sp)
    aaca:	|  |      jsr 126f4 <__gtsf2>
    aad0:	|  |      addq.l #8,sp
    aad2:	|  |      tst.l d0
    aad4:	|  +----- ble.s ab28 <builtIn_aimCamera+0x2ac>
    aad6:	|  |      move.l 19c18 <sceneHeight>,d0
    aadc:	|  |      move.l d0,-(sp)
    aade:	|  |      jsr 125b0 <__floatunsisf>
    aae4:	|  |      addq.l #4,sp
    aae6:	|  |      move.l d0,d2
    aae8:	|  |      move.l 19a92 <winHeight>,d0
    aaee:	|  |      move.l d0,-(sp)
    aaf0:	|  |      jsr 125b0 <__floatunsisf>
    aaf6:	|  |      addq.l #4,sp
    aaf8:	|  |      move.l d0,d1
    aafa:	|  |      move.l 18098 <cameraZoom>,d0
    ab00:	|  |      move.l d0,-(sp)
    ab02:	|  |      move.l d1,-(sp)
    ab04:	|  |      jsr 12434 <__divsf3>
    ab0a:	|  |      addq.l #8,sp
    ab0c:	|  |      move.l d0,-(sp)
    ab0e:	|  |      move.l d2,-(sp)
    ab10:	|  |      jsr 1287c <__subsf3>
    ab16:	|  |      addq.l #8,sp
    ab18:	|  |      move.l d0,-(sp)
    ab1a:	|  |      jsr 12520 <__fixsfsi>
    ab20:	|  |      addq.l #4,sp
    ab22:	|  |      move.l d0,19c36 <cameraY>
	return BR_CONTINUE;
    ab28:	|  \----> moveq #2,d0
}
    ab2a:	\-------> move.l (sp)+,d2
    ab2c:	          move.l (sp)+,d3
    ab2e:	          rts

0000ab30 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    ab30:	       subq.l #4,sp
    ab32:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ab34:	       movea.l 16(sp),a0
    ab38:	       move.l 24(a0),d0
    ab3c:	       move.l d0,-(sp)
    ab3e:	       pea 1 <_start+0x1>
    ab42:	       moveq #12,d0
    ab44:	       add.l sp,d0
    ab46:	       move.l d0,-(sp)
    ab48:	       jsr 100dc <getValueType>
    ab4e:	       lea 12(sp),sp
    ab52:	       tst.w d0
    ab54:	   /-- bne.s ab5c <builtIn_zoomCamera+0x2c>
    ab56:	   |   moveq #1,d0
    ab58:	/--|-- bra.w ad56 <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    ab5c:	|  \-> moveq #24,d0
    ab5e:	|      add.l 16(sp),d0
    ab62:	|      move.l d0,-(sp)
    ab64:	|      jsr 10a60 <trimStack>
    ab6a:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    ab6c:	|      move.l 19b4e <input+0xa>,d0
    ab72:	|      move.l d0,-(sp)
    ab74:	|      jsr 12588 <__floatsisf>
    ab7a:	|      addq.l #4,sp
    ab7c:	|      move.l d0,d1
    ab7e:	|      move.l 18098 <cameraZoom>,d0
    ab84:	|      move.l d0,-(sp)
    ab86:	|      move.l d1,-(sp)
    ab88:	|      jsr 1263a <__mulsf3>
    ab8e:	|      addq.l #8,sp
    ab90:	|      move.l d0,-(sp)
    ab92:	|      jsr 12520 <__fixsfsi>
    ab98:	|      addq.l #4,sp
    ab9a:	|      move.l d0,19b4e <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    aba0:	|      move.l 19b52 <input+0xe>,d0
    aba6:	|      move.l d0,-(sp)
    aba8:	|      jsr 12588 <__floatsisf>
    abae:	|      addq.l #4,sp
    abb0:	|      move.l d0,d1
    abb2:	|      move.l 18098 <cameraZoom>,d0
    abb8:	|      move.l d0,-(sp)
    abba:	|      move.l d1,-(sp)
    abbc:	|      jsr 1263a <__mulsf3>
    abc2:	|      addq.l #8,sp
    abc4:	|      move.l d0,-(sp)
    abc6:	|      jsr 12520 <__fixsfsi>
    abcc:	|      addq.l #4,sp
    abce:	|      move.l d0,19b52 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    abd4:	|      move.l 4(sp),d0
    abd8:	|      move.l d0,-(sp)
    abda:	|      jsr 12588 <__floatsisf>
    abe0:	|      addq.l #4,sp
    abe2:	|      move.l #1008981770,-(sp)
    abe8:	|      move.l d0,-(sp)
    abea:	|      jsr 1263a <__mulsf3>
    abf0:	|      addq.l #8,sp
    abf2:	|      move.l d0,18098 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    abf8:	|      move.l 19a8e <winWidth>,d0
    abfe:	|      move.l d0,-(sp)
    ac00:	|      jsr 125b0 <__floatunsisf>
    ac06:	|      addq.l #4,sp
    ac08:	|      move.l d0,d1
    ac0a:	|      move.l 18098 <cameraZoom>,d0
    ac10:	|      move.l d0,-(sp)
    ac12:	|      move.l d1,-(sp)
    ac14:	|      jsr 12434 <__divsf3>
    ac1a:	|      addq.l #8,sp
    ac1c:	|      move.l d0,d2
    ac1e:	|      move.l 19c14 <sceneWidth>,d0
    ac24:	|      move.l d0,-(sp)
    ac26:	|      jsr 125b0 <__floatunsisf>
    ac2c:	|      addq.l #4,sp
    ac2e:	|      move.l d0,-(sp)
    ac30:	|      move.l d2,-(sp)
    ac32:	|      jsr 126f4 <__gtsf2>
    ac38:	|      addq.l #8,sp
    ac3a:	|      tst.l d0
    ac3c:	|  /-- ble.s ac72 <builtIn_zoomCamera+0x142>
    ac3e:	|  |   move.l 19a8e <winWidth>,d0
    ac44:	|  |   move.l d0,-(sp)
    ac46:	|  |   jsr 125b0 <__floatunsisf>
    ac4c:	|  |   addq.l #4,sp
    ac4e:	|  |   move.l d0,d2
    ac50:	|  |   move.l 19c14 <sceneWidth>,d0
    ac56:	|  |   move.l d0,-(sp)
    ac58:	|  |   jsr 125b0 <__floatunsisf>
    ac5e:	|  |   addq.l #4,sp
    ac60:	|  |   move.l d0,-(sp)
    ac62:	|  |   move.l d2,-(sp)
    ac64:	|  |   jsr 12434 <__divsf3>
    ac6a:	|  |   addq.l #8,sp
    ac6c:	|  |   move.l d0,18098 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    ac72:	|  \-> move.l 19a92 <winHeight>,d0
    ac78:	|      move.l d0,-(sp)
    ac7a:	|      jsr 125b0 <__floatunsisf>
    ac80:	|      addq.l #4,sp
    ac82:	|      move.l d0,d1
    ac84:	|      move.l 18098 <cameraZoom>,d0
    ac8a:	|      move.l d0,-(sp)
    ac8c:	|      move.l d1,-(sp)
    ac8e:	|      jsr 12434 <__divsf3>
    ac94:	|      addq.l #8,sp
    ac96:	|      move.l d0,d2
    ac98:	|      move.l 19c18 <sceneHeight>,d0
    ac9e:	|      move.l d0,-(sp)
    aca0:	|      jsr 125b0 <__floatunsisf>
    aca6:	|      addq.l #4,sp
    aca8:	|      move.l d0,-(sp)
    acaa:	|      move.l d2,-(sp)
    acac:	|      jsr 126f4 <__gtsf2>
    acb2:	|      addq.l #8,sp
    acb4:	|      tst.l d0
    acb6:	|  /-- ble.s acec <builtIn_zoomCamera+0x1bc>
    acb8:	|  |   move.l 19a92 <winHeight>,d0
    acbe:	|  |   move.l d0,-(sp)
    acc0:	|  |   jsr 125b0 <__floatunsisf>
    acc6:	|  |   addq.l #4,sp
    acc8:	|  |   move.l d0,d2
    acca:	|  |   move.l 19c18 <sceneHeight>,d0
    acd0:	|  |   move.l d0,-(sp)
    acd2:	|  |   jsr 125b0 <__floatunsisf>
    acd8:	|  |   addq.l #4,sp
    acda:	|  |   move.l d0,-(sp)
    acdc:	|  |   move.l d2,-(sp)
    acde:	|  |   jsr 12434 <__divsf3>
    ace4:	|  |   addq.l #8,sp
    ace6:	|  |   move.l d0,18098 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    acec:	|  \-> move.l 19b4e <input+0xa>,d0
    acf2:	|      move.l d0,-(sp)
    acf4:	|      jsr 12588 <__floatsisf>
    acfa:	|      addq.l #4,sp
    acfc:	|      move.l d0,d1
    acfe:	|      move.l 18098 <cameraZoom>,d0
    ad04:	|      move.l d0,-(sp)
    ad06:	|      move.l d1,-(sp)
    ad08:	|      jsr 12434 <__divsf3>
    ad0e:	|      addq.l #8,sp
    ad10:	|      move.l d0,-(sp)
    ad12:	|      jsr 12520 <__fixsfsi>
    ad18:	|      addq.l #4,sp
    ad1a:	|      move.l d0,19b4e <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    ad20:	|      move.l 19b52 <input+0xe>,d0
    ad26:	|      move.l d0,-(sp)
    ad28:	|      jsr 12588 <__floatsisf>
    ad2e:	|      addq.l #4,sp
    ad30:	|      move.l d0,d1
    ad32:	|      move.l 18098 <cameraZoom>,d0
    ad38:	|      move.l d0,-(sp)
    ad3a:	|      move.l d1,-(sp)
    ad3c:	|      jsr 12434 <__divsf3>
    ad42:	|      addq.l #8,sp
    ad44:	|      move.l d0,-(sp)
    ad46:	|      jsr 12520 <__fixsfsi>
    ad4c:	|      addq.l #4,sp
    ad4e:	|      move.l d0,19b52 <input+0xe>

	return BR_CONTINUE;
    ad54:	|      moveq #2,d0
}
    ad56:	\----> move.l (sp)+,d2
    ad58:	       addq.l #4,sp
    ad5a:	       rts

0000ad5c <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    ad5c:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    ad5e:	             tst.l 8(sp)
    ad62:	         /-- bne.s ad76 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    ad64:	         |   pea 15825 <zbuffer.c.4facf542+0xe8>
    ad6a:	         |   jsr 12130 <KPrintF>
    ad70:	         |   addq.l #4,sp
		return BR_ERROR;
    ad72:	         |   moveq #1,d0
    ad74:	/--------|-- bra.s add6 <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    ad76:	|        \-> jsr c58 <rand>
    ad7c:	|            move.l d0,d1
    ad7e:	|            move.l 8(sp),d0
    ad82:	|            move.l d0,-(sp)
    ad84:	|            move.l d1,-(sp)
    ad86:	|            jsr 12bbc <__umodsi3>
    ad8c:	|            addq.l #8,sp
    ad8e:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    ad90:	|     /----- bra.s adc4 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    ad92:	|  /--|----> move.l (sp),d0
    ad94:	|  |  |      cmp.l 8(sp),d0
    ad98:	|  |  |  /-- bne.s adb4 <builtIn_pickOne+0x58>
    ad9a:	|  |  |  |   moveq #28,d0
    ad9c:	|  |  |  |   add.l 12(sp),d0
    ada0:	|  |  |  |   movea.l 12(sp),a0
    ada4:	|  |  |  |   move.l 24(a0),d1
    ada8:	|  |  |  |   move.l d0,-(sp)
    adaa:	|  |  |  |   move.l d1,-(sp)
    adac:	|  |  |  |   jsr 10596 <copyVariable>
    adb2:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    adb4:	|  |  |  \-> moveq #24,d0
    adb6:	|  |  |      add.l 12(sp),d0
    adba:	|  |  |      move.l d0,-(sp)
    adbc:	|  |  |      jsr 10a60 <trimStack>
    adc2:	|  |  |      addq.l #4,sp
	while (numParams --) {
    adc4:	|  |  \----> move.l 8(sp),d0
    adc8:	|  |         move.l d0,d1
    adca:	|  |         subq.l #1,d1
    adcc:	|  |         move.l d1,8(sp)
    add0:	|  |         tst.l d0
    add2:	|  \-------- bne.s ad92 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    add4:	|            moveq #2,d0
}
    add6:	\----------> addq.l #4,sp
    add8:	             rts

0000adda <builtIn_substring>:

builtIn(substring)
{
    adda:	       lea -40(sp),sp
    adde:	       move.l a6,-(sp)
    ade0:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ade2:	       movea.l 56(sp),a0
    ade6:	       move.l 24(a0),d0
    adea:	       move.l d0,-(sp)
    adec:	       pea 1 <_start+0x1>
    adf0:	       lea 16(sp),a0
    adf4:	       move.l a0,-(sp)
    adf6:	       jsr 100dc <getValueType>
    adfc:	       lea 12(sp),sp
    ae00:	       tst.w d0
    ae02:	   /-- bne.s ae0a <builtIn_substring+0x30>
    ae04:	   |   moveq #1,d0
    ae06:	/--|-- bra.w af82 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    ae0a:	|  \-> moveq #24,d0
    ae0c:	|      add.l 56(sp),d0
    ae10:	|      move.l d0,-(sp)
    ae12:	|      jsr 10a60 <trimStack>
    ae18:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ae1a:	|      movea.l 56(sp),a0
    ae1e:	|      move.l 24(a0),d0
    ae22:	|      move.l d0,-(sp)
    ae24:	|      pea 1 <_start+0x1>
    ae28:	|      lea 20(sp),a0
    ae2c:	|      move.l a0,-(sp)
    ae2e:	|      jsr 100dc <getValueType>
    ae34:	|      lea 12(sp),sp
    ae38:	|      tst.w d0
    ae3a:	|  /-- bne.s ae42 <builtIn_substring+0x68>
    ae3c:	|  |   moveq #1,d0
    ae3e:	+--|-- bra.w af82 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    ae42:	|  \-> moveq #24,d0
    ae44:	|      add.l 56(sp),d0
    ae48:	|      move.l d0,-(sp)
    ae4a:	|      jsr 10a60 <trimStack>
    ae50:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    ae52:	|      movea.l 56(sp),a0
    ae56:	|      move.l 24(a0),d0
    ae5a:	|      move.l d0,-(sp)
    ae5c:	|      jsr 106b2 <getTextFromAnyVar>
    ae62:	|      addq.l #4,sp
    ae64:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    ae68:	|      moveq #24,d0
    ae6a:	|      add.l 56(sp),d0
    ae6e:	|      move.l d0,-(sp)
    ae70:	|      jsr 10a60 <trimStack>
    ae76:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    ae78:	|      move.l 44(sp),-(sp)
    ae7c:	|      jsr f5c8 <strlen>
    ae82:	|      addq.l #4,sp
    ae84:	|      move.l d0,d1
    ae86:	|      move.l 12(sp),d0
    ae8a:	|      movea.l d0,a0
    ae8c:	|      move.l 8(sp),d0
    ae90:	|      add.l a0,d0
    ae92:	|      cmp.l d1,d0
    ae94:	|  /-- bls.s aeca <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    ae96:	|  |   move.l 44(sp),-(sp)
    ae9a:	|  |   jsr f5c8 <strlen>
    aea0:	|  |   addq.l #4,sp
    aea2:	|  |   move.l d0,d1
    aea4:	|  |   move.l 12(sp),d0
    aea8:	|  |   sub.l d0,d1
    aeaa:	|  |   move.l d1,d0
    aeac:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    aeb0:	|  |   move.l 44(sp),-(sp)
    aeb4:	|  |   jsr f5c8 <strlen>
    aeba:	|  |   addq.l #4,sp
    aebc:	|  |   move.l d0,d1
    aebe:	|  |   move.l 12(sp),d0
    aec2:	|  |   cmp.l d1,d0
    aec4:	|  +-- bls.s aeca <builtIn_substring+0xf0>
            start = 0;
    aec6:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    aeca:	|  \-> move.l 8(sp),d0
    aece:	|  /-- bpl.s aed4 <builtIn_substring+0xfa>
        length = 0;
    aed0:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    aed4:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    aeda:	|      move.l 12(sp),d1
    aede:	|      move.l 8(sp),d0
    aee2:	|      move.l d1,d2
    aee4:	|      add.l d0,d2
    aee6:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    aeea:	|      move.l 36(sp),d0
    aeee:	|      sub.l 40(sp),d0
    aef2:	|      addq.l #1,d0
    aef4:	|      move.l d0,32(sp)
    aef8:	|      clr.l 28(sp)
    aefc:	|      move.l 19b8e <SysBase>,d0
    af02:	|      movea.l d0,a6
    af04:	|      move.l 32(sp),d0
    af08:	|      move.l 28(sp),d1
    af0c:	|      jsr -684(a6)
    af10:	|      move.l d0,24(sp)
    af14:	|      move.l 24(sp),d0
    af18:	|      move.l d0,20(sp)
    if (!newString) {
    af1c:	|  /-- bne.s af22 <builtIn_substring+0x148>
        return BR_ERROR;
    af1e:	|  |   moveq #1,d0
    af20:	+--|-- bra.s af82 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    af22:	|  \-> move.l 36(sp),d0
    af26:	|      sub.l 40(sp),d0
    af2a:	|      move.l d0,d1
    af2c:	|      move.l 40(sp),d0
    af30:	|      add.l 44(sp),d0
    af34:	|      move.l d1,-(sp)
    af36:	|      move.l d0,-(sp)
    af38:	|      move.l 28(sp),-(sp)
    af3c:	|      jsr 120e4 <memcpy>
    af42:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    af46:	|      move.l 36(sp),d0
    af4a:	|      sub.l 40(sp),d0
    af4e:	|      movea.l 20(sp),a0
    af52:	|      adda.l d0,a0
    af54:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    af56:	|      moveq #28,d0
    af58:	|      add.l 56(sp),d0
    af5c:	|      move.l 20(sp),-(sp)
    af60:	|      move.l d0,-(sp)
    af62:	|      jsr 102fe <makeTextVar>
    af68:	|      addq.l #8,sp
    FreeVec(newString);
    af6a:	|      move.l 20(sp),16(sp)
    af70:	|      move.l 19b8e <SysBase>,d0
    af76:	|      movea.l d0,a6
    af78:	|      movea.l 16(sp),a1
    af7c:	|      jsr -690(a6)
    return BR_CONTINUE;
    af80:	|      moveq #2,d0
}
    af82:	\----> move.l (sp)+,d2
    af84:	       movea.l (sp)+,a6
    af86:	       lea 40(sp),sp
    af8a:	       rts

0000af8c <builtIn_stringLength>:

builtIn(stringLength)
{
    af8c:	subq.l #8,sp
    af8e:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    af90:	movea.l 20(sp),a0
    af94:	move.l 24(a0),d0
    af98:	move.l d0,-(sp)
    af9a:	jsr 106b2 <getTextFromAnyVar>
    afa0:	addq.l #4,sp
    afa2:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    afa6:	moveq #24,d0
    afa8:	add.l 20(sp),d0
    afac:	move.l d0,-(sp)
    afae:	jsr 10a60 <trimStack>
    afb4:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    afb6:	move.l 8(sp),-(sp)
    afba:	jsr f5c8 <strlen>
    afc0:	addq.l #4,sp
    afc2:	move.l d0,d1
    afc4:	moveq #28,d0
    afc6:	add.l 20(sp),d0
    afca:	move.l d1,-(sp)
    afcc:	pea 1 <_start+0x1>
    afd0:	move.l d0,-(sp)
    afd2:	jsr 109ce <setVariable>
    afd8:	lea 12(sp),sp
	FreeVec(newText);
    afdc:	move.l 8(sp),4(sp)
    afe2:	move.l 19b8e <SysBase>,d0
    afe8:	movea.l d0,a6
    afea:	movea.l 4(sp),a1
    afee:	jsr -690(a6)
	return BR_CONTINUE;
    aff2:	moveq #2,d0
}
    aff4:	movea.l (sp)+,a6
    aff6:	addq.l #8,sp
    aff8:	rts

0000affa <builtIn_newStack>:

builtIn(newStack)
{
    affa:	             lea -12(sp),sp
    affe:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    b000:	             moveq #28,d0
    b002:	             add.l 24(sp),d0
    b006:	             move.l d0,-(sp)
    b008:	             jsr 1032a <unlinkVar>
    b00e:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    b010:	             movea.l 24(sp),a0
    b014:	             moveq #6,d0
    b016:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    b01a:	             moveq #12,d1
    b01c:	             move.l d1,12(sp)
    b020:	             clr.l 8(sp)
    b024:	             move.l 19b8e <SysBase>,d0
    b02a:	             movea.l d0,a6
    b02c:	             move.l 12(sp),d0
    b030:	             move.l 8(sp),d1
    b034:	             jsr -684(a6)
    b038:	             move.l d0,4(sp)
    b03c:	             move.l 4(sp),d0
    b040:	             movea.l 24(sp),a0
    b044:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    b048:	             movea.l 24(sp),a0
    b04c:	             move.l 32(a0),d0
    b050:	         /-- bne.s b058 <builtIn_newStack+0x5e>
    b052:	         |   moveq #1,d0
    b054:	/--------|-- bra.w b0ea <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    b058:	|        \-> movea.l 24(sp),a0
    b05c:	|            movea.l 32(a0),a0
    b060:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    b062:	|            movea.l 24(sp),a0
    b066:	|            movea.l 32(a0),a0
    b06a:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    b06e:	|            movea.l 24(sp),a0
    b072:	|            movea.l 32(a0),a0
    b076:	|            moveq #1,d0
    b078:	|            move.l d0,8(a0)
    
    while (numParams--) {
    b07c:	|     /----- bra.s b0d8 <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    b07e:	|  /--|----> movea.l 24(sp),a0
    b082:	|  |  |      move.l 32(a0),d0
    b086:	|  |  |      move.l d0,d1
    b088:	|  |  |      movea.l 24(sp),a0
    b08c:	|  |  |      move.l 24(a0),d0
    b090:	|  |  |      move.l d1,-(sp)
    b092:	|  |  |      move.l d0,-(sp)
    b094:	|  |  |      jsr f918 <addVarToStack>
    b09a:	|  |  |      addq.l #8,sp
    b09c:	|  |  |      tst.w d0
    b09e:	|  |  |  /-- bne.s b0a4 <builtIn_newStack+0xaa>
    b0a0:	|  |  |  |   moveq #1,d0
    b0a2:	+--|--|--|-- bra.s b0ea <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    b0a4:	|  |  |  \-> movea.l 24(sp),a0
    b0a8:	|  |  |      movea.l 32(a0),a0
    b0ac:	|  |  |      move.l 4(a0),d0
    b0b0:	|  |  |  /-- bne.s b0c8 <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    b0b2:	|  |  |  |   movea.l 24(sp),a0
    b0b6:	|  |  |  |   movea.l 32(a0),a1
    b0ba:	|  |  |  |   movea.l 24(sp),a0
    b0be:	|  |  |  |   movea.l 32(a0),a0
    b0c2:	|  |  |  |   move.l (a1),d0
    b0c4:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    b0c8:	|  |  |  \-> moveq #24,d0
    b0ca:	|  |  |      add.l 24(sp),d0
    b0ce:	|  |  |      move.l d0,-(sp)
    b0d0:	|  |  |      jsr 10a60 <trimStack>
    b0d6:	|  |  |      addq.l #4,sp
    while (numParams--) {
    b0d8:	|  |  \----> move.l 20(sp),d0
    b0dc:	|  |         move.l d0,d1
    b0de:	|  |         subq.l #1,d1
    b0e0:	|  |         move.l d1,20(sp)
    b0e4:	|  |         tst.l d0
    b0e6:	|  \-------- bne.s b07e <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    b0e8:	|            moveq #2,d0
}
    b0ea:	\----------> movea.l (sp)+,a6
    b0ec:	             lea 12(sp),sp
    b0f0:	             rts

0000b0f2 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    b0f2:	          movea.l 8(sp),a0
    b0f6:	          movea.l 24(a0),a0
    b0fa:	          move.l (a0),d0
    b0fc:	          moveq #6,d1
    b0fe:	          cmp.l d0,d1
    b100:	      /-- beq.s b11c <builtIn_stackSize+0x2a>
    b102:	      |   moveq #10,d1
    b104:	      |   cmp.l d0,d1
    b106:	   /--|-- beq.s b160 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    b108:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    b10a:	   |  |   pea 15858 <zbuffer.c.4facf542+0x11b>
    b110:	   |  |   jsr 12130 <KPrintF>
    b116:	   |  |   addq.l #4,sp
	return BR_ERROR;
    b118:	   |  |   moveq #1,d0
    b11a:	/--|--|-- bra.s b19a <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    b11c:	|  |  \-> movea.l 8(sp),a0
    b120:	|  |      movea.l 24(a0),a0
    b124:	|  |      move.l 4(a0),d0
    b128:	|  |      move.l d0,-(sp)
    b12a:	|  |      jsr 10a3c <stackSize>
    b130:	|  |      addq.l #4,sp
    b132:	|  |      move.l d0,d1
    b134:	|  |      moveq #28,d0
    b136:	|  |      add.l 8(sp),d0
    b13a:	|  |      move.l d1,-(sp)
    b13c:	|  |      pea 1 <_start+0x1>
    b140:	|  |      move.l d0,-(sp)
    b142:	|  |      jsr 109ce <setVariable>
    b148:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    b14c:	|  |      moveq #24,d0
    b14e:	|  |      add.l 8(sp),d0
    b152:	|  |      move.l d0,-(sp)
    b154:	|  |      jsr 10a60 <trimStack>
    b15a:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    b15c:	|  |      moveq #2,d0
    b15e:	+--|----- bra.s b19a <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    b160:	|  \----> movea.l 8(sp),a0
    b164:	|         movea.l 24(a0),a0
    b168:	|         movea.l 4(a0),a0
    b16c:	|         move.l 4(a0),d1
    b170:	|         moveq #28,d0
    b172:	|         add.l 8(sp),d0
    b176:	|         move.l d1,-(sp)
    b178:	|         pea 1 <_start+0x1>
    b17c:	|         move.l d0,-(sp)
    b17e:	|         jsr 109ce <setVariable>
    b184:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    b188:	|         moveq #24,d0
    b18a:	|         add.l 8(sp),d0
    b18e:	|         move.l d0,-(sp)
    b190:	|         jsr 10a60 <trimStack>
    b196:	|         addq.l #4,sp
			return BR_CONTINUE;
    b198:	|         moveq #2,d0
}
    b19a:	\-------> rts

0000b19c <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    b19c:	       movea.l 8(sp),a0
    b1a0:	       movea.l 24(a0),a0
    b1a4:	       move.l (a0),d0
    b1a6:	       moveq #6,d1
    b1a8:	       cmp.l d0,d1
    b1aa:	   /-- beq.s b1be <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    b1ac:	   |   pea 15881 <zbuffer.c.4facf542+0x144>
    b1b2:	   |   jsr 12130 <KPrintF>
    b1b8:	   |   addq.l #4,sp
		return BR_ERROR;
    b1ba:	   |   moveq #1,d0
    b1bc:	/--|-- bra.s b1f2 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    b1be:	|  \-> moveq #28,d0
    b1c0:	|      add.l 8(sp),d0
    b1c4:	|      movea.l 8(sp),a0
    b1c8:	|      move.l 24(a0),d1
    b1cc:	|      move.l d0,-(sp)
    b1ce:	|      move.l d1,-(sp)
    b1d0:	|      jsr fbe2 <copyStack>
    b1d6:	|      addq.l #8,sp
    b1d8:	|      tst.w d0
    b1da:	|  /-- bne.s b1e0 <builtIn_copyStack+0x44>
    b1dc:	|  |   moveq #1,d0
    b1de:	+--|-- bra.s b1f2 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    b1e0:	|  \-> moveq #24,d0
    b1e2:	|      add.l 8(sp),d0
    b1e6:	|      move.l d0,-(sp)
    b1e8:	|      jsr 10a60 <trimStack>
    b1ee:	|      addq.l #4,sp
	return BR_CONTINUE;
    b1f0:	|      moveq #2,d0
}
    b1f2:	\----> rts

0000b1f4 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    b1f4:	       movea.l 8(sp),a0
    b1f8:	       movea.l 24(a0),a0
    b1fc:	       movea.l 8(a0),a0
    b200:	       move.l (a0),d0
    b202:	       moveq #6,d1
    b204:	       cmp.l d0,d1
    b206:	   /-- beq.s b21c <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    b208:	   |   pea 1589a <zbuffer.c.4facf542+0x15d>
    b20e:	   |   jsr 12130 <KPrintF>
    b214:	   |   addq.l #4,sp
		return BR_ERROR;
    b216:	   |   moveq #1,d0
    b218:	/--|-- bra.w b2aa <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    b21c:	|  \-> movea.l 8(sp),a0
    b220:	|      movea.l 24(a0),a0
    b224:	|      movea.l 8(a0),a0
    b228:	|      move.l 4(a0),d0
    b22c:	|      move.l d0,d1
    b22e:	|      movea.l 8(sp),a0
    b232:	|      move.l 24(a0),d0
    b236:	|      move.l d1,-(sp)
    b238:	|      move.l d0,-(sp)
    b23a:	|      jsr f918 <addVarToStack>
    b240:	|      addq.l #8,sp
    b242:	|      tst.w d0
    b244:	|  /-- bne.s b24a <builtIn_pushToStack+0x56>
		return BR_ERROR;
    b246:	|  |   moveq #1,d0
    b248:	+--|-- bra.s b2aa <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    b24a:	|  \-> movea.l 8(sp),a0
    b24e:	|      movea.l 24(a0),a0
    b252:	|      movea.l 8(a0),a0
    b256:	|      movea.l 4(a0),a0
    b25a:	|      movea.l (a0),a0
    b25c:	|      move.l 8(a0),d0
    b260:	|  /-- bne.s b288 <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    b262:	|  |   movea.l 8(sp),a0
    b266:	|  |   movea.l 24(a0),a0
    b26a:	|  |   movea.l 8(a0),a0
    b26e:	|  |   movea.l 4(a0),a1
    b272:	|  |   movea.l 8(sp),a0
    b276:	|  |   movea.l 24(a0),a0
    b27a:	|  |   movea.l 8(a0),a0
    b27e:	|  |   movea.l 4(a0),a0
    b282:	|  |   move.l (a1),d0
    b284:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    b288:	|  \-> moveq #24,d0
    b28a:	|      add.l 8(sp),d0
    b28e:	|      move.l d0,-(sp)
    b290:	|      jsr 10a60 <trimStack>
    b296:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    b298:	|      moveq #24,d0
    b29a:	|      add.l 8(sp),d0
    b29e:	|      move.l d0,-(sp)
    b2a0:	|      jsr 10a60 <trimStack>
    b2a6:	|      addq.l #4,sp
	return BR_CONTINUE;
    b2a8:	|      moveq #2,d0
}
    b2aa:	\----> rts

0000b2ac <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    b2ac:	             movea.l 8(sp),a0
    b2b0:	             movea.l 24(a0),a0
    b2b4:	             movea.l 8(a0),a0
    b2b8:	             move.l (a0),d0
    b2ba:	             moveq #6,d1
    b2bc:	             cmp.l d0,d1
    b2be:	         /-- beq.s b2d4 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    b2c0:	         |   pea 1589a <zbuffer.c.4facf542+0x15d>
    b2c6:	         |   jsr 12130 <KPrintF>
    b2cc:	         |   addq.l #4,sp
		return BR_ERROR;
    b2ce:	         |   moveq #1,d0
    b2d0:	/--------|-- bra.w b3c2 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    b2d4:	|        \-> movea.l 8(sp),a0
    b2d8:	|            movea.l 24(a0),a0
    b2dc:	|            movea.l 8(a0),a0
    b2e0:	|            movea.l 4(a0),a0
    b2e4:	|            move.l (a0),d0
    b2e6:	|     /----- bne.s b340 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    b2e8:	|     |      movea.l 8(sp),a0
    b2ec:	|     |      movea.l 24(a0),a0
    b2f0:	|     |      movea.l 8(a0),a0
    b2f4:	|     |      move.l 4(a0),d0
    b2f8:	|     |      move.l d0,d1
    b2fa:	|     |      movea.l 8(sp),a0
    b2fe:	|     |      move.l 24(a0),d0
    b302:	|     |      move.l d1,-(sp)
    b304:	|     |      move.l d0,-(sp)
    b306:	|     |      jsr f918 <addVarToStack>
    b30c:	|     |      addq.l #8,sp
    b30e:	|     |      tst.w d0
    b310:	|     |  /-- bne.s b318 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    b312:	|     |  |   moveq #1,d0
    b314:	+-----|--|-- bra.w b3c2 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    b318:	|     |  \-> movea.l 8(sp),a0
    b31c:	|     |      movea.l 24(a0),a0
    b320:	|     |      movea.l 8(a0),a0
    b324:	|     |      movea.l 4(a0),a1
    b328:	|     |      movea.l 8(sp),a0
    b32c:	|     |      movea.l 24(a0),a0
    b330:	|     |      movea.l 8(a0),a0
    b334:	|     |      movea.l 4(a0),a0
    b338:	|     |      move.l (a1),d0
    b33a:	|     |      move.l d0,4(a0)
    b33e:	|  /--|----- bra.s b3a0 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    b340:	|  |  \----> movea.l 8(sp),a0
    b344:	|  |         movea.l 24(a0),a0
    b348:	|  |         movea.l 8(a0),a0
    b34c:	|  |         movea.l 4(a0),a0
    b350:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    b354:	|  |         move.l d0,d1
    b356:	|  |         addq.l #8,d1
    b358:	|  |         movea.l 8(sp),a0
    b35c:	|  |         move.l 24(a0),d0
    b360:	|  |         move.l d1,-(sp)
    b362:	|  |         move.l d0,-(sp)
    b364:	|  |         jsr f918 <addVarToStack>
    b36a:	|  |         addq.l #8,sp
    b36c:	|  |         tst.w d0
    b36e:	|  |     /-- bne.s b374 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    b370:	|  |     |   moveq #1,d0
    b372:	+--|-----|-- bra.s b3c2 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    b374:	|  |     \-> movea.l 8(sp),a0
    b378:	|  |         movea.l 24(a0),a0
    b37c:	|  |         movea.l 8(a0),a0
    b380:	|  |         movea.l 4(a0),a0
    b384:	|  |         movea.l 4(a0),a1
    b388:	|  |         movea.l 8(sp),a0
    b38c:	|  |         movea.l 24(a0),a0
    b390:	|  |         movea.l 8(a0),a0
    b394:	|  |         movea.l 4(a0),a0
    b398:	|  |         move.l 8(a1),d0
    b39c:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    b3a0:	|  \-------> moveq #24,d0
    b3a2:	|            add.l 8(sp),d0
    b3a6:	|            move.l d0,-(sp)
    b3a8:	|            jsr 10a60 <trimStack>
    b3ae:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    b3b0:	|            moveq #24,d0
    b3b2:	|            add.l 8(sp),d0
    b3b6:	|            move.l d0,-(sp)
    b3b8:	|            jsr 10a60 <trimStack>
    b3be:	|            addq.l #4,sp
	return BR_CONTINUE;
    b3c0:	|            moveq #2,d0
}
    b3c2:	\----------> rts

0000b3c4 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    b3c4:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    b3c6:	       movea.l 12(sp),a0
    b3ca:	       movea.l 24(a0),a0
    b3ce:	       movea.l 8(a0),a0
    b3d2:	       move.l (a0),d0
    b3d4:	       moveq #6,d1
    b3d6:	       cmp.l d0,d1
    b3d8:	   /-- beq.s b3ee <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    b3da:	   |   pea 15881 <zbuffer.c.4facf542+0x144>
    b3e0:	   |   jsr 12130 <KPrintF>
    b3e6:	   |   addq.l #4,sp
		return BR_ERROR;
    b3e8:	   |   moveq #1,d0
    b3ea:	/--|-- bra.w b484 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    b3ee:	|  \-> movea.l 12(sp),a0
    b3f2:	|      movea.l 24(a0),a0
    b3f6:	|      movea.l 8(a0),a0
    b3fa:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    b3fe:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    b400:	|      movea.l 12(sp),a0
    b404:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    b408:	|      clr.l -(sp)
    b40a:	|      move.l d1,-(sp)
    b40c:	|      move.l d0,-(sp)
    b40e:	|      jsr fcb8 <deleteVarFromStack>
    b414:	|      lea 12(sp),sp
    b418:	|      move.l d0,d1
    b41a:	|      moveq #28,d0
    b41c:	|      add.l 12(sp),d0
    b420:	|      move.l d1,-(sp)
    b422:	|      pea 1 <_start+0x1>
    b426:	|      move.l d0,-(sp)
    b428:	|      jsr 109ce <setVariable>
    b42e:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    b432:	|      movea.l 12(sp),a0
    b436:	|      movea.l 24(a0),a0
    b43a:	|      movea.l 8(a0),a0
    b43e:	|      movea.l 4(a0),a0
    b442:	|      move.l (a0),d0
    b444:	|      movea.l 12(sp),a0
    b448:	|      movea.l 24(a0),a0
    b44c:	|      movea.l 8(a0),a0
    b450:	|      movea.l 4(a0),a2
    b454:	|      move.l d0,-(sp)
    b456:	|      jsr 10a18 <stackFindLast>
    b45c:	|      addq.l #4,sp
    b45e:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    b462:	|      moveq #24,d0
    b464:	|      add.l 12(sp),d0
    b468:	|      move.l d0,-(sp)
    b46a:	|      jsr 10a60 <trimStack>
    b470:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    b472:	|      moveq #24,d0
    b474:	|      add.l 12(sp),d0
    b478:	|      move.l d0,-(sp)
    b47a:	|      jsr 10a60 <trimStack>
    b480:	|      addq.l #4,sp
	return BR_CONTINUE;
    b482:	|      moveq #2,d0
}
    b484:	\----> movea.l (sp)+,a2
    b486:	       rts

0000b488 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    b488:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    b48a:	       movea.l 12(sp),a0
    b48e:	       movea.l 24(a0),a0
    b492:	       movea.l 8(a0),a0
    b496:	       move.l (a0),d0
    b498:	       moveq #6,d1
    b49a:	       cmp.l d0,d1
    b49c:	   /-- beq.s b4b2 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    b49e:	   |   pea 15881 <zbuffer.c.4facf542+0x144>
    b4a4:	   |   jsr 12130 <KPrintF>
    b4aa:	   |   addq.l #4,sp
		return BR_ERROR;
    b4ac:	   |   moveq #1,d0
    b4ae:	/--|-- bra.w b54a <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    b4b2:	|  \-> movea.l 12(sp),a0
    b4b6:	|      movea.l 24(a0),a0
    b4ba:	|      movea.l 8(a0),a0
    b4be:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    b4c2:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    b4c4:	|      movea.l 12(sp),a0
    b4c8:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    b4cc:	|      pea 1 <_start+0x1>
    b4d0:	|      move.l d1,-(sp)
    b4d2:	|      move.l d0,-(sp)
    b4d4:	|      jsr fcb8 <deleteVarFromStack>
    b4da:	|      lea 12(sp),sp
    b4de:	|      move.l d0,d1
    b4e0:	|      moveq #28,d0
    b4e2:	|      add.l 12(sp),d0
    b4e6:	|      move.l d1,-(sp)
    b4e8:	|      pea 1 <_start+0x1>
    b4ec:	|      move.l d0,-(sp)
    b4ee:	|      jsr 109ce <setVariable>
    b4f4:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    b4f8:	|      movea.l 12(sp),a0
    b4fc:	|      movea.l 24(a0),a0
    b500:	|      movea.l 8(a0),a0
    b504:	|      movea.l 4(a0),a0
    b508:	|      move.l (a0),d0
    b50a:	|      movea.l 12(sp),a0
    b50e:	|      movea.l 24(a0),a0
    b512:	|      movea.l 8(a0),a0
    b516:	|      movea.l 4(a0),a2
    b51a:	|      move.l d0,-(sp)
    b51c:	|      jsr 10a18 <stackFindLast>
    b522:	|      addq.l #4,sp
    b524:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    b528:	|      moveq #24,d0
    b52a:	|      add.l 12(sp),d0
    b52e:	|      move.l d0,-(sp)
    b530:	|      jsr 10a60 <trimStack>
    b536:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    b538:	|      moveq #24,d0
    b53a:	|      add.l 12(sp),d0
    b53e:	|      move.l d0,-(sp)
    b540:	|      jsr 10a60 <trimStack>
    b546:	|      addq.l #4,sp
	return BR_CONTINUE;
    b548:	|      moveq #2,d0
}
    b54a:	\----> movea.l (sp)+,a2
    b54c:	       rts

0000b54e <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    b54e:	       movea.l 8(sp),a0
    b552:	       movea.l 24(a0),a0
    b556:	       move.l (a0),d0
    b558:	       moveq #6,d1
    b55a:	       cmp.l d0,d1
    b55c:	   /-- beq.s b570 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    b55e:	   |   pea 15881 <zbuffer.c.4facf542+0x144>
    b564:	   |   jsr 12130 <KPrintF>
    b56a:	   |   addq.l #4,sp
		return BR_ERROR;
    b56c:	   |   moveq #1,d0
    b56e:	/--|-- bra.s b5da <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    b570:	|  \-> movea.l 8(sp),a0
    b574:	|      movea.l 24(a0),a0
    b578:	|      movea.l 4(a0),a0
    b57c:	|      move.l (a0),d0
    b57e:	|  /-- bne.s b592 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    b580:	|  |   pea 158b2 <zbuffer.c.4facf542+0x175>
    b586:	|  |   jsr 12130 <KPrintF>
    b58c:	|  |   addq.l #4,sp
		return BR_ERROR;
    b58e:	|  |   moveq #1,d0
    b590:	+--|-- bra.s b5da <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    b592:	|  \-> moveq #28,d0
    b594:	|      add.l 8(sp),d0
    b598:	|      movea.l 8(sp),a0
    b59c:	|      movea.l 24(a0),a0
    b5a0:	|      movea.l 4(a0),a0
    b5a4:	|      move.l (a0),d1
    b5a6:	|      move.l d0,-(sp)
    b5a8:	|      move.l d1,-(sp)
    b5aa:	|      jsr 10596 <copyVariable>
    b5b0:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    b5b2:	|      movea.l 8(sp),a0
    b5b6:	|      movea.l 24(a0),a0
    b5ba:	|      move.l 4(a0),d0
    b5be:	|      move.l d0,-(sp)
    b5c0:	|      jsr 10a60 <trimStack>
    b5c6:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    b5c8:	|      moveq #24,d0
    b5ca:	|      add.l 8(sp),d0
    b5ce:	|      move.l d0,-(sp)
    b5d0:	|      jsr 10a60 <trimStack>
    b5d6:	|      addq.l #4,sp
	return BR_CONTINUE;
    b5d8:	|      moveq #2,d0
}
    b5da:	\----> rts

0000b5dc <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    b5dc:	       movea.l 8(sp),a0
    b5e0:	       movea.l 24(a0),a0
    b5e4:	       move.l (a0),d0
    b5e6:	       moveq #6,d1
    b5e8:	       cmp.l d0,d1
    b5ea:	   /-- beq.s b5fe <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    b5ec:	   |   pea 15881 <zbuffer.c.4facf542+0x144>
    b5f2:	   |   jsr 12130 <KPrintF>
    b5f8:	   |   addq.l #4,sp
		return BR_ERROR;
    b5fa:	   |   moveq #1,d0
    b5fc:	/--|-- bra.s b652 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    b5fe:	|  \-> movea.l 8(sp),a0
    b602:	|      movea.l 24(a0),a0
    b606:	|      movea.l 4(a0),a0
    b60a:	|      move.l (a0),d0
    b60c:	|  /-- bne.s b620 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    b60e:	|  |   pea 158b2 <zbuffer.c.4facf542+0x175>
    b614:	|  |   jsr 12130 <KPrintF>
    b61a:	|  |   addq.l #4,sp
		return BR_ERROR;
    b61c:	|  |   moveq #1,d0
    b61e:	+--|-- bra.s b652 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    b620:	|  \-> moveq #28,d0
    b622:	|      add.l 8(sp),d0
    b626:	|      movea.l 8(sp),a0
    b62a:	|      movea.l 24(a0),a0
    b62e:	|      movea.l 4(a0),a0
    b632:	|      move.l (a0),d1
    b634:	|      move.l d0,-(sp)
    b636:	|      move.l d1,-(sp)
    b638:	|      jsr 10596 <copyVariable>
    b63e:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    b640:	|      moveq #24,d0
    b642:	|      add.l 8(sp),d0
    b646:	|      move.l d0,-(sp)
    b648:	|      jsr 10a60 <trimStack>
    b64e:	|      addq.l #4,sp
	return BR_CONTINUE;
    b650:	|      moveq #2,d0
}
    b652:	\----> rts

0000b654 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    b654:	       movea.l 8(sp),a0
    b658:	       movea.l 24(a0),a0
    b65c:	       move.l (a0),d0
    b65e:	       moveq #6,d1
    b660:	       cmp.l d0,d1
    b662:	   /-- beq.s b676 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    b664:	   |   pea 15881 <zbuffer.c.4facf542+0x144>
    b66a:	   |   jsr 12130 <KPrintF>
    b670:	   |   addq.l #4,sp
		return BR_ERROR;
    b672:	   |   moveq #1,d0
    b674:	/--|-- bra.s b6cc <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    b676:	|  \-> movea.l 8(sp),a0
    b67a:	|      movea.l 24(a0),a0
    b67e:	|      movea.l 4(a0),a0
    b682:	|      move.l (a0),d0
    b684:	|  /-- bne.s b698 <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    b686:	|  |   pea 158b2 <zbuffer.c.4facf542+0x175>
    b68c:	|  |   jsr 12130 <KPrintF>
    b692:	|  |   addq.l #4,sp
		return BR_ERROR;
    b694:	|  |   moveq #1,d0
    b696:	+--|-- bra.s b6cc <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    b698:	|  \-> moveq #28,d0
    b69a:	|      add.l 8(sp),d0
    b69e:	|      movea.l 8(sp),a0
    b6a2:	|      movea.l 24(a0),a0
    b6a6:	|      movea.l 4(a0),a0
    b6aa:	|      move.l 4(a0),d1
    b6ae:	|      move.l d0,-(sp)
    b6b0:	|      move.l d1,-(sp)
    b6b2:	|      jsr 10596 <copyVariable>
    b6b8:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    b6ba:	|      moveq #24,d0
    b6bc:	|      add.l 8(sp),d0
    b6c0:	|      move.l d0,-(sp)
    b6c2:	|      jsr 10a60 <trimStack>
    b6c8:	|      addq.l #4,sp
	return BR_CONTINUE;
    b6ca:	|      moveq #2,d0
}
    b6cc:	\----> rts

0000b6ce <builtIn_random>:

builtIn(random)
{
    b6ce:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    b6d0:	       movea.l 12(sp),a0
    b6d4:	       move.l 24(a0),d0
    b6d8:	       move.l d0,-(sp)
    b6da:	       pea 1 <_start+0x1>
    b6de:	       move.l sp,d0
    b6e0:	       addq.l #8,d0
    b6e2:	       move.l d0,-(sp)
    b6e4:	       jsr 100dc <getValueType>
    b6ea:	       lea 12(sp),sp
    b6ee:	       tst.w d0
    b6f0:	   /-- bne.s b6f6 <builtIn_random+0x28>
		return BR_ERROR;
    b6f2:	   |   moveq #1,d0
    b6f4:	/--|-- bra.s b740 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    b6f6:	|  \-> moveq #24,d0
    b6f8:	|      add.l 12(sp),d0
    b6fc:	|      move.l d0,-(sp)
    b6fe:	|      jsr 10a60 <trimStack>
    b704:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    b706:	|      move.l (sp),d0
    b708:	|  /-- bgt.s b70e <builtIn_random+0x40>
    b70a:	|  |   moveq #1,d0
    b70c:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    b70e:	|  \-> jsr c58 <rand>
    b714:	|      move.l d0,d1
    b716:	|      move.l (sp),d0
    b718:	|      move.l d0,-(sp)
    b71a:	|      move.l d1,-(sp)
    b71c:	|      jsr 12bbc <__umodsi3>
    b722:	|      addq.l #8,sp
    b724:	|      move.l d0,d1
    b726:	|      moveq #28,d0
    b728:	|      add.l 12(sp),d0
    b72c:	|      move.l d1,-(sp)
    b72e:	|      pea 1 <_start+0x1>
    b732:	|      move.l d0,-(sp)
    b734:	|      jsr 109ce <setVariable>
    b73a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    b73e:	|      moveq #2,d0
}
    b740:	\----> addq.l #4,sp
    b742:	       rts

0000b744 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    b744:	nop
    b746:	rts

0000b748 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    b748:	moveq #2,d0
}
    b74a:	rts

0000b74c <builtIn_setPasteColour>:

	/*if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);Todo Amigize This?*/
	return BR_CONTINUE;
    b74c:	moveq #2,d0
}
    b74e:	rts

0000b750 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    b750:	moveq #2,d0
}
    b752:	rts

0000b754 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    b754:	moveq #2,d0
}
    b756:	rts

0000b758 <builtIn_setFont>:


builtIn(setFont)
{
    b758:	       lea -16(sp),sp
    b75c:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    b75e:	       movea.l 28(sp),a0
    b762:	       move.l 24(a0),d0
    b766:	       move.l d0,-(sp)
    b768:	       pea 1 <_start+0x1>
    b76c:	       lea 12(sp),a0
    b770:	       move.l a0,-(sp)
    b772:	       jsr 100dc <getValueType>
    b778:	       lea 12(sp),sp
    b77c:	       tst.w d0
    b77e:	   /-- bne.s b786 <builtIn_setFont+0x2e>
    b780:	   |   moveq #1,d0
    b782:	/--|-- bra.w b834 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    b786:	|  \-> moveq #24,d0
    b788:	|      add.l 28(sp),d0
    b78c:	|      move.l d0,-(sp)
    b78e:	|      jsr 10a60 <trimStack>
    b794:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    b796:	|      movea.l 28(sp),a0
    b79a:	|      move.l 24(a0),d0
    b79e:	|      move.l d0,-(sp)
    b7a0:	|      jsr 106b2 <getTextFromAnyVar>
    b7a6:	|      addq.l #4,sp
    b7a8:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    b7ac:	|  /-- bne.s b7b4 <builtIn_setFont+0x5c>
    b7ae:	|  |   moveq #1,d0
    b7b0:	+--|-- bra.w b834 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    b7b4:	|  \-> moveq #24,d0
    b7b6:	|      add.l 28(sp),d0
    b7ba:	|      move.l d0,-(sp)
    b7bc:	|      jsr 10a60 <trimStack>
    b7c2:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    b7c4:	|      movea.l 28(sp),a0
    b7c8:	|      move.l 24(a0),d0
    b7cc:	|      move.l d0,-(sp)
    b7ce:	|      pea 5 <_start+0x5>
    b7d2:	|      lea 16(sp),a0
    b7d6:	|      move.l a0,-(sp)
    b7d8:	|      jsr 100dc <getValueType>
    b7de:	|      lea 12(sp),sp
    b7e2:	|      tst.w d0
    b7e4:	|  /-- bne.s b7ea <builtIn_setFont+0x92>
    b7e6:	|  |   moveq #1,d0
    b7e8:	+--|-- bra.s b834 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    b7ea:	|  \-> moveq #24,d0
    b7ec:	|      add.l 28(sp),d0
    b7f0:	|      move.l d0,-(sp)
    b7f2:	|      jsr 10a60 <trimStack>
    b7f8:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    b7fa:	|      move.l 4(sp),d1
    b7fe:	|      move.l 8(sp),d0
    b802:	|      move.l d1,-(sp)
    b804:	|      move.l 20(sp),-(sp)
    b808:	|      move.l d0,-(sp)
    b80a:	|      jsr 10ad4 <loadFont>
    b810:	|      lea 12(sp),sp
    b814:	|      tst.w d0
    b816:	|  /-- bne.s b81c <builtIn_setFont+0xc4>
    b818:	|  |   moveq #1,d0
    b81a:	+--|-- bra.s b834 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    b81c:	|  \-> move.l 16(sp),12(sp)
    b822:	|      move.l 19b8e <SysBase>,d0
    b828:	|      movea.l d0,a6
    b82a:	|      movea.l 12(sp),a1
    b82e:	|      jsr -690(a6)

    return BR_CONTINUE;
    b832:	|      moveq #2,d0
}
    b834:	\----> movea.l (sp)+,a6
    b836:	       lea 16(sp),sp
    b83a:	       rts

0000b83c <builtIn_inFont>:

builtIn(inFont)
{
    b83c:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    b83e:	       movea.l 12(sp),a0
    b842:	       move.l 24(a0),d0
    b846:	       move.l d0,-(sp)
    b848:	       jsr 106b2 <getTextFromAnyVar>
    b84e:	       addq.l #4,sp
    b850:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    b852:	   /-- bne.s b858 <builtIn_inFont+0x1c>
    b854:	   |   moveq #1,d0
    b856:	/--|-- bra.s b88e <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    b858:	|  \-> moveq #24,d0
    b85a:	|      add.l 12(sp),d0
    b85e:	|      move.l d0,-(sp)
    b860:	|      jsr 10a60 <trimStack>
    b866:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    b868:	|      move.l (sp),-(sp)
    b86a:	|      jsr 10aa8 <isInFont>
    b870:	|      addq.l #4,sp
    b872:	|      movea.w d0,a0
    b874:	|      moveq #28,d0
    b876:	|      add.l 12(sp),d0
    b87a:	|      move.l a0,-(sp)
    b87c:	|      pea 1 <_start+0x1>
    b880:	|      move.l d0,-(sp)
    b882:	|      jsr 109ce <setVariable>
    b888:	|      lea 12(sp),sp
	return BR_CONTINUE;
    b88c:	|      moveq #2,d0
}
    b88e:	\----> addq.l #4,sp
    b890:	       rts

0000b892 <builtIn_pasteString>:

builtIn(pasteString)
{
    b892:	       lea -16(sp),sp
    b896:	       move.l a6,-(sp)
    b898:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    b89a:	       movea.l 32(sp),a0
    b89e:	       move.l 24(a0),d0
    b8a2:	       move.l d0,-(sp)
    b8a4:	       jsr 106b2 <getTextFromAnyVar>
    b8aa:	       addq.l #4,sp
    b8ac:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    b8b0:	       moveq #24,d0
    b8b2:	       add.l 32(sp),d0
    b8b6:	       move.l d0,-(sp)
    b8b8:	       jsr 10a60 <trimStack>
    b8be:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    b8c0:	       movea.l 32(sp),a0
    b8c4:	       move.l 24(a0),d0
    b8c8:	       move.l d0,-(sp)
    b8ca:	       pea 1 <_start+0x1>
    b8ce:	       lea 20(sp),a0
    b8d2:	       move.l a0,-(sp)
    b8d4:	       jsr 100dc <getValueType>
    b8da:	       lea 12(sp),sp
    b8de:	       tst.w d0
    b8e0:	   /-- bne.s b8e8 <builtIn_pasteString+0x56>
    b8e2:	   |   moveq #1,d0
    b8e4:	/--|-- bra.w b970 <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    b8e8:	|  \-> moveq #24,d0
    b8ea:	|      add.l 32(sp),d0
    b8ee:	|      move.l d0,-(sp)
    b8f0:	|      jsr 10a60 <trimStack>
    b8f6:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    b8f8:	|      movea.l 32(sp),a0
    b8fc:	|      move.l 24(a0),d0
    b900:	|      move.l d0,-(sp)
    b902:	|      pea 1 <_start+0x1>
    b906:	|      lea 16(sp),a0
    b90a:	|      move.l a0,-(sp)
    b90c:	|      jsr 100dc <getValueType>
    b912:	|      lea 12(sp),sp
    b916:	|      tst.w d0
    b918:	|  /-- bne.s b91e <builtIn_pasteString+0x8c>
    b91a:	|  |   moveq #1,d0
    b91c:	+--|-- bra.s b970 <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    b91e:	|  \-> moveq #24,d0
    b920:	|      add.l 32(sp),d0
    b924:	|      move.l d0,-(sp)
    b926:	|      jsr 10a60 <trimStack>
    b92c:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    b92e:	|      move.l 8(sp),d0
    b932:	|      cmpi.l #65535,d0
    b938:	|  /-- bne.s b958 <builtIn_pasteString+0xc6>
    b93a:	|  |   move.l 19a8e <winWidth>,d2
    b940:	|  |   move.l 20(sp),-(sp)
    b944:	|  |   jsr 10aba <stringWidth>
    b94a:	|  |   addq.l #4,sp
    b94c:	|  |   move.l d2,d1
    b94e:	|  |   sub.l d0,d1
    b950:	|  |   move.l d1,d0
    b952:	|  |   lsr.l #1,d0
    b954:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette);
    //pasteStringToBackdrop(newText, x, y, pastePalette); //Todo: Amigize this
    FreeVec(newText); 
    b958:	|  \-> move.l 20(sp),16(sp)
    b95e:	|      move.l 19b8e <SysBase>,d0
    b964:	|      movea.l d0,a6
    b966:	|      movea.l 16(sp),a1
    b96a:	|      jsr -690(a6)
    return BR_CONTINUE;
    b96e:	|      moveq #2,d0
}
    b970:	\----> move.l (sp)+,d2
    b972:	       movea.l (sp)+,a6
    b974:	       lea 16(sp),sp
    b978:	       rts

0000b97a <builtIn_anim>:

builtIn(anim)
{
    b97a:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    b97e:	       moveq #1,d0
    b980:	       cmp.l 16(sp),d0
    b984:	   /-- blt.s b99a <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    b986:	   |   pea 158c5 <zbuffer.c.4facf542+0x188>
    b98c:	   |   jsr 12130 <KPrintF>
    b992:	   |   addq.l #4,sp
		return BR_ERROR;
    b994:	   |   moveq #1,d0
    b996:	/--|-- bra.w ba28 <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    b99a:	|  \-> moveq #24,d1
    b99c:	|      add.l 20(sp),d1
    b9a0:	|      move.l 16(sp),d0
    b9a4:	|      subq.l #1,d0
    b9a6:	|      move.l d1,-(sp)
    b9a8:	|      move.l d0,-(sp)
    b9aa:	|      jsr 5a0c <createPersonaAnim>
    b9b0:	|      addq.l #8,sp
    b9b2:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    b9b6:	|      movea.l 20(sp),a0
    b9ba:	|      move.l 24(a0),d0
    b9be:	|      move.l d0,-(sp)
    b9c0:	|      pea 5 <_start+0x5>
    b9c4:	|      lea 8(sp),a0
    b9c8:	|      move.l a0,-(sp)
    b9ca:	|      jsr 100dc <getValueType>
    b9d0:	|      lea 12(sp),sp
    b9d4:	|      tst.w d0
    b9d6:	|  /-- bne.s b9dc <builtIn_anim+0x62>
    b9d8:	|  |   moveq #1,d0
    b9da:	+--|-- bra.s ba28 <builtIn_anim+0xae>
	trimStack (&fun -> stack);
    b9dc:	|  \-> moveq #24,d0
    b9de:	|      add.l 20(sp),d0
    b9e2:	|      move.l d0,-(sp)
    b9e4:	|      jsr 10a60 <trimStack>
    b9ea:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
    b9ec:	|      move.l (sp),d0
    b9ee:	|      move.l d0,-(sp)
    b9f0:	|      jsr 7db6 <loadBankForAnim>
    b9f6:	|      addq.l #4,sp
    b9f8:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
    b9fc:	|  /-- bne.s ba02 <builtIn_anim+0x88>
    b9fe:	|  |   moveq #1,d0
    ba00:	+--|-- bra.s ba28 <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
    ba02:	|  \-> move.l 4(sp),-(sp)
    ba06:	|      move.l 12(sp),-(sp)
    ba0a:	|      jsr 725a <setBankFile>
    ba10:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
    ba12:	|      moveq #28,d0
    ba14:	|      add.l 20(sp),d0
    ba18:	|      move.l 8(sp),-(sp)
    ba1c:	|      move.l d0,-(sp)
    ba1e:	|      jsr 1098a <newAnimationVariable>
    ba24:	|      addq.l #8,sp
	return BR_CONTINUE;
    ba26:	|      moveq #2,d0
}
    ba28:	\----> lea 12(sp),sp
    ba2c:	       rts

0000ba2e <builtIn_costume>:

builtIn(costume)
{
    ba2e:	          lea -32(sp),sp
    ba32:	          move.l a6,-(sp)
    ba34:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    ba36:	          moveq #8,d0
    ba38:	          move.l d0,32(sp)
    ba3c:	          clr.l 28(sp)
    ba40:	          move.l 19b8e <SysBase>,d0
    ba46:	          movea.l d0,a6
    ba48:	          move.l 32(sp),d0
    ba4c:	          move.l 28(sp),d1
    ba50:	          jsr -684(a6)
    ba54:	          move.l d0,24(sp)
    ba58:	          move.l 24(sp),d0
    ba5c:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    ba60:	      /-- bne.s ba68 <builtIn_costume+0x3a>
    ba62:	      |   moveq #1,d0
    ba64:	/-----|-- bra.w bb50 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    ba68:	|     \-> move.l 44(sp),d0
    ba6c:	|         pea 3 <_start+0x3>
    ba70:	|         move.l d0,-(sp)
    ba72:	|         jsr 12b60 <__divsi3>
    ba78:	|         addq.l #8,sp
    ba7a:	|         movea.l 20(sp),a0
    ba7e:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    ba82:	|         tst.l 44(sp)
    ba86:	|     /-- beq.s ba9c <builtIn_costume+0x6e>
    ba88:	|     |   movea.l 20(sp),a0
    ba8c:	|     |   move.l 4(a0),d1
    ba90:	|     |   move.l d1,d0
    ba92:	|     |   add.l d0,d0
    ba94:	|     |   add.l d1,d0
    ba96:	|     |   cmp.l 44(sp),d0
    ba9a:	|  /--|-- beq.s bab0 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    ba9c:	|  |  \-> pea 158ff <zbuffer.c.4facf542+0x1c2>
    baa2:	|  |      jsr 12130 <KPrintF>
    baa8:	|  |      addq.l #4,sp
        return BR_ERROR;
    baaa:	|  |      moveq #1,d0
    baac:	+--|----- bra.w bb50 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    bab0:	|  \----> move.l 44(sp),d0
    bab4:	|         add.l d0,d0
    bab6:	|         add.l d0,d0
    bab8:	|         move.l d0,16(sp)
    babc:	|         clr.l 12(sp)
    bac0:	|         move.l 19b8e <SysBase>,d0
    bac6:	|         movea.l d0,a6
    bac8:	|         move.l 16(sp),d0
    bacc:	|         move.l 12(sp),d1
    bad0:	|         jsr -684(a6)
    bad4:	|         move.l d0,8(sp)
    bad8:	|         move.l 8(sp),d0
    badc:	|         movea.l 20(sp),a0
    bae0:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    bae2:	|         movea.l 20(sp),a0
    bae6:	|         move.l (a0),d0
    bae8:	|     /-- bne.s baee <builtIn_costume+0xc0>
    baea:	|     |   moveq #1,d0
    baec:	+-----|-- bra.s bb50 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
    baee:	|     \-> move.l 44(sp),d0
    baf2:	|         subq.l #1,d0
    baf4:	|         move.l d0,36(sp)
    baf8:	|     /-- bra.s bb34 <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
    bafa:	|  /--|-> movea.l 48(sp),a0
    bafe:	|  |  |   move.l 24(a0),d0
    bb02:	|  |  |   movea.l 20(sp),a0
    bb06:	|  |  |   movea.l (a0),a0
    bb08:	|  |  |   move.l 36(sp),d1
    bb0c:	|  |  |   add.l d1,d1
    bb0e:	|  |  |   add.l d1,d1
    bb10:	|  |  |   lea (0,a0,d1.l),a2
    bb14:	|  |  |   move.l d0,-(sp)
    bb16:	|  |  |   jsr 105b4 <getAnimationFromVar>
    bb1c:	|  |  |   addq.l #4,sp
    bb1e:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
    bb20:	|  |  |   moveq #24,d0
    bb22:	|  |  |   add.l 48(sp),d0
    bb26:	|  |  |   move.l d0,-(sp)
    bb28:	|  |  |   jsr 10a60 <trimStack>
    bb2e:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
    bb30:	|  |  |   subq.l #1,36(sp)
    bb34:	|  |  \-> tst.l 36(sp)
    bb38:	|  \----- bge.s bafa <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
    bb3a:	|         moveq #28,d0
    bb3c:	|         add.l 48(sp),d0
    bb40:	|         move.l 20(sp),-(sp)
    bb44:	|         move.l d0,-(sp)
    bb46:	|         jsr 109ac <newCostumeVariable>
    bb4c:	|         addq.l #8,sp
    return BR_CONTINUE;
    bb4e:	|         moveq #2,d0
}
    bb50:	\-------> movea.l (sp)+,a2
    bb52:	          movea.l (sp)+,a6
    bb54:	          lea 32(sp),sp
    bb58:	          rts

0000bb5a <builtIn_launch>:

builtIn(launch)
{
    bb5a:	          lea -20(sp),sp
    bb5e:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    bb60:	          movea.l 32(sp),a0
    bb64:	          move.l 24(a0),d0
    bb68:	          move.l d0,-(sp)
    bb6a:	          jsr 106b2 <getTextFromAnyVar>
    bb70:	          addq.l #4,sp
    bb72:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
    bb76:	      /-- bne.s bb7e <builtIn_launch+0x24>
    bb78:	      |   moveq #1,d0
    bb7a:	/-----|-- bra.w bcac <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
    bb7e:	|     \-> move.l 20(sp),-(sp)
    bb82:	|         jsr 2fe <encodeFilename>
    bb88:	|         addq.l #4,sp
    bb8a:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
    bb8e:	|         moveq #24,d0
    bb90:	|         add.l 32(sp),d0
    bb94:	|         move.l d0,-(sp)
    bb96:	|         jsr 10a60 <trimStack>
    bb9c:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
    bb9e:	|         movea.l 20(sp),a0
    bba2:	|         move.b (a0),d0
    bba4:	|         cmpi.b #104,d0
    bba8:	|  /----- bne.s bc12 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
    bbaa:	|  |      movea.l 20(sp),a0
    bbae:	|  |      addq.l #1,a0
    bbb0:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
    bbb2:	|  |      cmpi.b #116,d0
    bbb6:	|  +----- bne.s bc12 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
    bbb8:	|  |      movea.l 20(sp),a0
    bbbc:	|  |      addq.l #2,a0
    bbbe:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
    bbc0:	|  |      cmpi.b #116,d0
    bbc4:	|  +----- bne.s bc12 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
    bbc6:	|  |      movea.l 20(sp),a0
    bbca:	|  |      addq.l #3,a0
    bbcc:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
    bbce:	|  |      cmpi.b #112,d0
    bbd2:	|  +----- bne.s bc12 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    bbd4:	|  |      movea.l 20(sp),a0
    bbd8:	|  |      addq.l #4,a0
    bbda:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
    bbdc:	|  |      cmpi.b #58,d0
    bbe0:	|  |  /-- beq.s bbfe <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    bbe2:	|  |  |   movea.l 20(sp),a0
    bbe6:	|  |  |   addq.l #4,a0
    bbe8:	|  |  |   move.b (a0),d0
    bbea:	|  |  |   cmpi.b #115,d0
    bbee:	|  +--|-- bne.s bc12 <builtIn_launch+0xb8>
    bbf0:	|  |  |   movea.l 20(sp),a0
    bbf4:	|  |  |   addq.l #5,a0
    bbf6:	|  |  |   move.b (a0),d0
    bbf8:	|  |  |   cmpi.b #58,d0
    bbfc:	|  +--|-- bne.s bc12 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
    bbfe:	|  |  \-> move.l 20(sp),-(sp)
    bc02:	|  |      jsr b8 <copyString>
    bc08:	|  |      addq.l #4,sp
    bc0a:	|  |      move.l d0,19c3a <launchMe>
    bc10:	|  |  /-- bra.s bc64 <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
    bc12:	|  \--|-> move.l 19aa2 <gamePath>,d0
    bc18:	|     |   pea 1594a <zbuffer.c.4facf542+0x20d>
    bc1e:	|     |   move.l d0,-(sp)
    bc20:	|     |   jsr f608 <joinStrings>
    bc26:	|     |   addq.l #8,sp
    bc28:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
    bc2c:	|     |   move.l 16(sp),-(sp)
    bc30:	|     |   move.l 16(sp),-(sp)
    bc34:	|     |   jsr f608 <joinStrings>
    bc3a:	|     |   addq.l #8,sp
    bc3c:	|     |   move.l d0,19c3a <launchMe>
        FreeVec(newText);
    bc42:	|     |   move.l 16(sp),8(sp)
    bc48:	|     |   move.l 19b8e <SysBase>,d0
    bc4e:	|     |   movea.l d0,a6
    bc50:	|     |   movea.l 8(sp),a1
    bc54:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
    bc58:	|     |   move.l 19c3a <launchMe>,d0
    bc5e:	|     +-- bne.s bc64 <builtIn_launch+0x10a>
    bc60:	|     |   moveq #1,d0
    bc62:	+-----|-- bra.s bcac <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
    bc64:	|     \-> move.l 20(sp),4(sp)
    bc6a:	|         move.l 19b8e <SysBase>,d0
    bc70:	|         movea.l d0,a6
    bc72:	|         movea.l 4(sp),a1
    bc76:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
    bc7a:	|         clr.l -(sp)
    bc7c:	|         jsr 106a <setGraphicsWindow>
    bc82:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
    bc84:	|         moveq #28,d0
    bc86:	|         add.l 32(sp),d0
    bc8a:	|         pea 1 <_start+0x1>
    bc8e:	|         pea 1 <_start+0x1>
    bc92:	|         move.l d0,-(sp)
    bc94:	|         jsr 109ce <setVariable>
    bc9a:	|         lea 12(sp),sp
    launchResult = &fun->reg;
    bc9e:	|         moveq #28,d0
    bca0:	|         add.l 32(sp),d0
    bca4:	|         move.l d0,19c3e <launchResult>

    return BR_KEEP_AND_PAUSE;
    bcaa:	|         moveq #0,d0
}
    bcac:	\-------> movea.l (sp)+,a6
    bcae:	          lea 20(sp),sp
    bcb2:	          rts

0000bcb4 <builtIn_pause>:

builtIn(pause)
{
    bcb4:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    bcb6:	       movea.l 12(sp),a0
    bcba:	       move.l 24(a0),d0
    bcbe:	       move.l d0,-(sp)
    bcc0:	       pea 1 <_start+0x1>
    bcc4:	       move.l sp,d0
    bcc6:	       addq.l #8,d0
    bcc8:	       move.l d0,-(sp)
    bcca:	       jsr 100dc <getValueType>
    bcd0:	       lea 12(sp),sp
    bcd4:	       tst.w d0
    bcd6:	   /-- bne.s bcdc <builtIn_pause+0x28>
    bcd8:	   |   moveq #1,d0
    bcda:	/--|-- bra.s bd0a <builtIn_pause+0x56>
	trimStack (&fun -> stack);
    bcdc:	|  \-> moveq #24,d0
    bcde:	|      add.l 12(sp),d0
    bce2:	|      move.l d0,-(sp)
    bce4:	|      jsr 10a60 <trimStack>
    bcea:	|      addq.l #4,sp
	if (theTime > 0) {
    bcec:	|      move.l (sp),d0
    bcee:	|  /-- ble.s bd08 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
    bcf0:	|  |   move.l (sp),d0
    bcf2:	|  |   subq.l #1,d0
    bcf4:	|  |   movea.l 12(sp),a0
    bcf8:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
    bcfc:	|  |   movea.l 12(sp),a0
    bd00:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
    bd04:	|  |   moveq #0,d0
    bd06:	+--|-- bra.s bd0a <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
    bd08:	|  \-> moveq #2,d0
}
    bd0a:	\----> addq.l #4,sp
    bd0c:	       rts

0000bd0e <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
    bd0e:	jsr 1c34 <completeTimers>
	return BR_CONTINUE;
    bd14:	moveq #2,d0
}
    bd16:	rts

0000bd18 <builtIn_callEvent>:

builtIn(callEvent)
{
    bd18:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    bd1c:	       movea.l 20(sp),a0
    bd20:	       move.l 24(a0),d0
    bd24:	       move.l d0,-(sp)
    bd26:	       pea 7 <_start+0x7>
    bd2a:	       lea 8(sp),a0
    bd2e:	       move.l a0,-(sp)
    bd30:	       jsr 100dc <getValueType>
    bd36:	       lea 12(sp),sp
    bd3a:	       tst.w d0
    bd3c:	   /-- bne.s bd44 <builtIn_callEvent+0x2c>
    bd3e:	   |   moveq #1,d0
    bd40:	/--|-- bra.w bdda <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    bd44:	|  \-> moveq #24,d0
    bd46:	|      add.l 20(sp),d0
    bd4a:	|      move.l d0,-(sp)
    bd4c:	|      jsr 10a60 <trimStack>
    bd52:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    bd54:	|      movea.l 20(sp),a0
    bd58:	|      move.l 24(a0),d0
    bd5c:	|      move.l d0,-(sp)
    bd5e:	|      pea 7 <_start+0x7>
    bd62:	|      moveq #12,d0
    bd64:	|      add.l sp,d0
    bd66:	|      move.l d0,-(sp)
    bd68:	|      jsr 100dc <getValueType>
    bd6e:	|      lea 12(sp),sp
    bd72:	|      tst.w d0
    bd74:	|  /-- bne.s bd7a <builtIn_callEvent+0x62>
    bd76:	|  |   moveq #1,d0
    bd78:	+--|-- bra.s bdda <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    bd7a:	|  \-> moveq #24,d0
    bd7c:	|      add.l 20(sp),d0
    bd80:	|      move.l d0,-(sp)
    bd82:	|      jsr 10a60 <trimStack>
    bd88:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    bd8a:	|      move.l (sp),d1
    bd8c:	|      move.l 4(sp),d0
    bd90:	|      move.l d1,-(sp)
    bd92:	|      move.l d0,-(sp)
    bd94:	|      jsr 8f62 <getCombinationFunction>
    bd9a:	|      addq.l #8,sp
    bd9c:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
    bda0:	|  /-- beq.s bdc0 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    bda2:	|  |   moveq #28,d0
    bda4:	|  |   add.l 20(sp),d0
    bda8:	|  |   move.l 8(sp),-(sp)
    bdac:	|  |   pea 2 <_start+0x2>
    bdb0:	|  |   move.l d0,-(sp)
    bdb2:	|  |   jsr 109ce <setVariable>
    bdb8:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
    bdbc:	|  |   moveq #4,d0
    bdbe:	+--|-- bra.s bdda <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
    bdc0:	|  \-> moveq #28,d0
    bdc2:	|      add.l 20(sp),d0
    bdc6:	|      clr.l -(sp)
    bdc8:	|      pea 1 <_start+0x1>
    bdcc:	|      move.l d0,-(sp)
    bdce:	|      jsr 109ce <setVariable>
    bdd4:	|      lea 12(sp),sp
	return BR_CONTINUE;
    bdd8:	|      moveq #2,d0
}
    bdda:	\----> lea 12(sp),sp
    bdde:	       rts

0000bde0 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
    bde0:	move.w #1,19c4a <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
    bde8:	moveq #2,d0
}
    bdea:	rts

0000bdec <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    bdec:	moveq #24,d0
    bdee:	add.l 8(sp),d0
    bdf2:	move.l d0,-(sp)
    bdf4:	jsr 10a60 <trimStack>
    bdfa:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
    bdfc:	pea 1594c <zbuffer.c.4facf542+0x20f>
    be02:	jsr 12130 <KPrintF>
    be08:	addq.l #4,sp
	return BR_CONTINUE;
    be0a:	moveq #2,d0
}
    be0c:	rts

0000be0e <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
    be0e:	pea 1594c <zbuffer.c.4facf542+0x20f>
    be14:	jsr 12130 <KPrintF>
    be1a:	addq.l #4,sp
	return BR_CONTINUE;
    be1c:	moveq #2,d0
}
    be1e:	rts

0000be20 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
    be20:	pea 1594c <zbuffer.c.4facf542+0x20f>
    be26:	jsr 12130 <KPrintF>
    be2c:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
    be2e:	moveq #2,d0
}
    be30:	rts

0000be32 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
    be32:	pea 1594c <zbuffer.c.4facf542+0x20f>
    be38:	jsr 12130 <KPrintF>
    be3e:	addq.l #4,sp
	return BR_CONTINUE;
    be40:	moveq #2,d0
}
    be42:	rts

0000be44 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    be44:	pea 1594c <zbuffer.c.4facf542+0x20f>
    be4a:	jsr 12130 <KPrintF>
    be50:	addq.l #4,sp
	return BR_CONTINUE;
    be52:	moveq #2,d0
}
    be54:	rts

0000be56 <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    be56:	pea 1594c <zbuffer.c.4facf542+0x20f>
    be5c:	jsr 12130 <KPrintF>
    be62:	addq.l #4,sp
	return BR_CONTINUE;
    be64:	moveq #2,d0
}
    be66:	rts

0000be68 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
    be68:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    be6c:	       movea.l 20(sp),a0
    be70:	       move.l 24(a0),d0
    be74:	       move.l d0,-(sp)
    be76:	       pea 1 <_start+0x1>
    be7a:	       moveq #16,d0
    be7c:	       add.l sp,d0
    be7e:	       move.l d0,-(sp)
    be80:	       jsr 100dc <getValueType>
    be86:	       lea 12(sp),sp
    be8a:	       tst.w d0
    be8c:	   /-- bne.s be94 <builtIn_startMusic+0x2c>
    be8e:	   |   moveq #1,d0
    be90:	/--|-- bra.w bf34 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    be94:	|  \-> moveq #24,d0
    be96:	|      add.l 20(sp),d0
    be9a:	|      move.l d0,-(sp)
    be9c:	|      jsr 10a60 <trimStack>
    bea2:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    bea4:	|      movea.l 20(sp),a0
    bea8:	|      move.l 24(a0),d0
    beac:	|      move.l d0,-(sp)
    beae:	|      pea 1 <_start+0x1>
    beb2:	|      moveq #12,d0
    beb4:	|      add.l sp,d0
    beb6:	|      move.l d0,-(sp)
    beb8:	|      jsr 100dc <getValueType>
    bebe:	|      lea 12(sp),sp
    bec2:	|      tst.w d0
    bec4:	|  /-- bne.s beca <builtIn_startMusic+0x62>
    bec6:	|  |   moveq #1,d0
    bec8:	+--|-- bra.s bf34 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    beca:	|  \-> moveq #24,d0
    becc:	|      add.l 20(sp),d0
    bed0:	|      move.l d0,-(sp)
    bed2:	|      jsr 10a60 <trimStack>
    bed8:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    beda:	|      movea.l 20(sp),a0
    bede:	|      move.l 24(a0),d0
    bee2:	|      move.l d0,-(sp)
    bee4:	|      pea 5 <_start+0x5>
    bee8:	|      lea 8(sp),a0
    beec:	|      move.l a0,-(sp)
    beee:	|      jsr 100dc <getValueType>
    bef4:	|      lea 12(sp),sp
    bef8:	|      tst.w d0
    befa:	|  /-- bne.s bf00 <builtIn_startMusic+0x98>
    befc:	|  |   moveq #1,d0
    befe:	+--|-- bra.s bf34 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    bf00:	|  \-> moveq #24,d0
    bf02:	|      add.l 20(sp),d0
    bf06:	|      move.l d0,-(sp)
    bf08:	|      jsr 10a60 <trimStack>
    bf0e:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
    bf10:	|      movea.l 8(sp),a0
    bf14:	|      move.l 4(sp),d1
    bf18:	|      move.l (sp),d0
    bf1a:	|      move.l a0,-(sp)
    bf1c:	|      move.l d1,-(sp)
    bf1e:	|      move.l d0,-(sp)
    bf20:	|      jsr 8be0 <playMOD>
    bf26:	|      lea 12(sp),sp
    bf2a:	|      tst.w d0
    bf2c:	|  /-- bne.s bf32 <builtIn_startMusic+0xca>
    bf2e:	|  |   moveq #2,d0
    bf30:	+--|-- bra.s bf34 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
    bf32:	|  \-> moveq #2,d0
}
    bf34:	\----> lea 12(sp),sp
    bf38:	       rts

0000bf3a <builtIn_stopMusic>:

builtIn(stopMusic)
{
    bf3a:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    bf3c:	       movea.l 12(sp),a0
    bf40:	       move.l 24(a0),d0
    bf44:	       move.l d0,-(sp)
    bf46:	       pea 1 <_start+0x1>
    bf4a:	       move.l sp,d0
    bf4c:	       addq.l #8,d0
    bf4e:	       move.l d0,-(sp)
    bf50:	       jsr 100dc <getValueType>
    bf56:	       lea 12(sp),sp
    bf5a:	       tst.w d0
    bf5c:	   /-- bne.s bf62 <builtIn_stopMusic+0x28>
    bf5e:	   |   moveq #1,d0
    bf60:	/--|-- bra.s bf80 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
    bf62:	|  \-> moveq #24,d0
    bf64:	|      add.l 12(sp),d0
    bf68:	|      move.l d0,-(sp)
    bf6a:	|      jsr 10a60 <trimStack>
    bf70:	|      addq.l #4,sp
	stopMOD (v);
    bf72:	|      move.l (sp),d0
    bf74:	|      move.l d0,-(sp)
    bf76:	|      jsr 8c7c <stopMOD>
    bf7c:	|      addq.l #4,sp
	return BR_CONTINUE;
    bf7e:	|      moveq #2,d0
}
    bf80:	\----> addq.l #4,sp
    bf82:	       rts

0000bf84 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
    bf84:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    bf86:	       movea.l 16(sp),a0
    bf8a:	       move.l 24(a0),d0
    bf8e:	       move.l d0,-(sp)
    bf90:	       pea 1 <_start+0x1>
    bf94:	       move.l sp,d0
    bf96:	       addq.l #8,d0
    bf98:	       move.l d0,-(sp)
    bf9a:	       jsr 100dc <getValueType>
    bfa0:	       lea 12(sp),sp
    bfa4:	       tst.w d0
    bfa6:	   /-- bne.s bfac <builtIn_setMusicVolume+0x28>
    bfa8:	   |   moveq #1,d0
    bfaa:	/--|-- bra.s c006 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    bfac:	|  \-> moveq #24,d0
    bfae:	|      add.l 16(sp),d0
    bfb2:	|      move.l d0,-(sp)
    bfb4:	|      jsr 10a60 <trimStack>
    bfba:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    bfbc:	|      movea.l 16(sp),a0
    bfc0:	|      move.l 24(a0),d0
    bfc4:	|      move.l d0,-(sp)
    bfc6:	|      pea 1 <_start+0x1>
    bfca:	|      moveq #12,d0
    bfcc:	|      add.l sp,d0
    bfce:	|      move.l d0,-(sp)
    bfd0:	|      jsr 100dc <getValueType>
    bfd6:	|      lea 12(sp),sp
    bfda:	|      tst.w d0
    bfdc:	|  /-- bne.s bfe2 <builtIn_setMusicVolume+0x5e>
    bfde:	|  |   moveq #1,d0
    bfe0:	+--|-- bra.s c006 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    bfe2:	|  \-> moveq #24,d0
    bfe4:	|      add.l 16(sp),d0
    bfe8:	|      move.l d0,-(sp)
    bfea:	|      jsr 10a60 <trimStack>
    bff0:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
    bff2:	|      move.l (sp),d1
    bff4:	|      move.l 4(sp),d0
    bff8:	|      move.l d1,-(sp)
    bffa:	|      move.l d0,-(sp)
    bffc:	|      jsr 8c62 <setMusicVolume>
    c002:	|      addq.l #8,sp
	return BR_CONTINUE;
    c004:	|      moveq #2,d0
}
    c006:	\----> addq.l #8,sp
    c008:	       rts

0000c00a <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
    c00a:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c00c:	       movea.l 12(sp),a0
    c010:	       move.l 24(a0),d0
    c014:	       move.l d0,-(sp)
    c016:	       pea 1 <_start+0x1>
    c01a:	       move.l sp,d0
    c01c:	       addq.l #8,d0
    c01e:	       move.l d0,-(sp)
    c020:	       jsr 100dc <getValueType>
    c026:	       lea 12(sp),sp
    c02a:	       tst.w d0
    c02c:	   /-- bne.s c032 <builtIn_setDefaultMusicVolume+0x28>
    c02e:	   |   moveq #1,d0
    c030:	/--|-- bra.s c050 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
    c032:	|  \-> moveq #24,d0
    c034:	|      add.l 12(sp),d0
    c038:	|      move.l d0,-(sp)
    c03a:	|      jsr 10a60 <trimStack>
    c040:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
    c042:	|      move.l (sp),d0
    c044:	|      move.l d0,-(sp)
    c046:	|      jsr 8c46 <setDefaultMusicVolume>
    c04c:	|      addq.l #4,sp
	return BR_CONTINUE;
    c04e:	|      moveq #2,d0
}
    c050:	\----> addq.l #4,sp
    c052:	       rts

0000c054 <builtIn_playSound>:

builtIn(playSound)
{
    c054:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    c056:	       movea.l 12(sp),a0
    c05a:	       move.l 24(a0),d0
    c05e:	       move.l d0,-(sp)
    c060:	       pea 5 <_start+0x5>
    c064:	       move.l sp,d0
    c066:	       addq.l #8,d0
    c068:	       move.l d0,-(sp)
    c06a:	       jsr 100dc <getValueType>
    c070:	       lea 12(sp),sp
    c074:	       tst.w d0
    c076:	   /-- bne.s c07c <builtIn_playSound+0x28>
    c078:	   |   moveq #1,d0
    c07a:	/--|-- bra.s c0a4 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
    c07c:	|  \-> moveq #24,d0
    c07e:	|      add.l 12(sp),d0
    c082:	|      move.l d0,-(sp)
    c084:	|      jsr 10a60 <trimStack>
    c08a:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
    c08c:	|      move.l (sp),d0
    c08e:	|      clr.l -(sp)
    c090:	|      move.l d0,-(sp)
    c092:	|      jsr 8c6a <startSound>
    c098:	|      addq.l #8,sp
    c09a:	|      tst.w d0
    c09c:	|  /-- bne.s c0a2 <builtIn_playSound+0x4e>
    c09e:	|  |   moveq #2,d0
    c0a0:	+--|-- bra.s c0a4 <builtIn_playSound+0x50>
	return BR_CONTINUE;
    c0a2:	|  \-> moveq #2,d0
}
    c0a4:	\----> addq.l #4,sp
    c0a6:	       rts

0000c0a8 <builtIn_loopSound>:

builtIn(loopSound)
{
    c0a8:	             lea -28(sp),sp
    c0ac:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
    c0ae:	             tst.l 36(sp)
    c0b2:	         /-- bgt.s c0c8 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
    c0b4:	         |   pea 1596f <zbuffer.c.4facf542+0x232>
    c0ba:	         |   jsr 12130 <KPrintF>
    c0c0:	         |   addq.l #4,sp
		return BR_ERROR;
    c0c2:	         |   moveq #1,d0
    c0c4:	/--------|-- bra.w c284 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
    c0c8:	|        \-> moveq #1,d0
    c0ca:	|            cmp.l 36(sp),d0
    c0ce:	|     /----- blt.s c12a <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    c0d0:	|     |      movea.l 40(sp),a0
    c0d4:	|     |      move.l 24(a0),d0
    c0d8:	|     |      move.l d0,-(sp)
    c0da:	|     |      pea 5 <_start+0x5>
    c0de:	|     |      lea 16(sp),a0
    c0e2:	|     |      move.l a0,-(sp)
    c0e4:	|     |      jsr 100dc <getValueType>
    c0ea:	|     |      lea 12(sp),sp
    c0ee:	|     |      tst.w d0
    c0f0:	|     |  /-- bne.s c0f8 <builtIn_loopSound+0x50>
    c0f2:	|     |  |   moveq #1,d0
    c0f4:	+-----|--|-- bra.w c284 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
    c0f8:	|     |  \-> moveq #24,d0
    c0fa:	|     |      add.l 40(sp),d0
    c0fe:	|     |      move.l d0,-(sp)
    c100:	|     |      jsr 10a60 <trimStack>
    c106:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
    c108:	|     |      move.l 8(sp),d0
    c10c:	|     |      pea 1 <_start+0x1>
    c110:	|     |      move.l d0,-(sp)
    c112:	|     |      jsr 8c6a <startSound>
    c118:	|     |      addq.l #8,sp
    c11a:	|     |      tst.w d0
    c11c:	|     |  /-- bne.s c124 <builtIn_loopSound+0x7c>
    c11e:	|     |  |   moveq #2,d0
    c120:	+-----|--|-- bra.w c284 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
    c124:	|     |  \-> moveq #2,d0
    c126:	+-----|----- bra.w c284 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
    c12a:	|     \----> moveq #2,d1
    c12c:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
    c130:	|            clr.l 28(sp)
		struct soundList *old = NULL;
    c134:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
    c138:	|            movea.l 40(sp),a0
    c13c:	|            movea.l 24(a0),a0
    c140:	|            move.l (a0),d0
    c142:	|            moveq #5,d1
    c144:	|            cmp.l d0,d1
    c146:	|  /-------- beq.w c21e <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
    c14a:	|  |         movea.l 40(sp),a0
    c14e:	|  |         move.l 24(a0),d0
    c152:	|  |         move.l d0,-(sp)
    c154:	|  |         pea 1 <_start+0x1>
    c158:	|  |         lea 12(sp),a0
    c15c:	|  |         move.l a0,-(sp)
    c15e:	|  |         jsr 100dc <getValueType>
    c164:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
    c168:	|  |         moveq #24,d0
    c16a:	|  |         add.l 40(sp),d0
    c16e:	|  |         move.l d0,-(sp)
    c170:	|  |         jsr 10a60 <trimStack>
    c176:	|  |         addq.l #4,sp
			numParams--;
    c178:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
    c17c:	|  +-------- bra.w c21e <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
    c180:	|  |  /----> movea.l 40(sp),a0
    c184:	|  |  |      move.l 24(a0),d0
    c188:	|  |  |      move.l d0,-(sp)
    c18a:	|  |  |      pea 5 <_start+0x5>
    c18e:	|  |  |      lea 16(sp),a0
    c192:	|  |  |      move.l a0,-(sp)
    c194:	|  |  |      jsr 100dc <getValueType>
    c19a:	|  |  |      lea 12(sp),sp
    c19e:	|  |  |      tst.w d0
    c1a0:	|  |  |  /-- bne.s c1b6 <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
    c1a2:	|  |  |  |   pea 159ad <zbuffer.c.4facf542+0x270>
    c1a8:	|  |  |  |   jsr 12130 <KPrintF>
    c1ae:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
    c1b0:	|  |  |  |   moveq #1,d0
    c1b2:	+--|--|--|-- bra.w c284 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
    c1b6:	|  |  |  \-> moveq #20,d0
    c1b8:	|  |  |      move.l d0,20(sp)
    c1bc:	|  |  |      clr.l 16(sp)
    c1c0:	|  |  |      move.l 19b8e <SysBase>,d0
    c1c6:	|  |  |      movea.l d0,a6
    c1c8:	|  |  |      move.l 20(sp),d0
    c1cc:	|  |  |      move.l 16(sp),d1
    c1d0:	|  |  |      jsr -684(a6)
    c1d4:	|  |  |      move.l d0,12(sp)
    c1d8:	|  |  |      move.l 12(sp),d0
    c1dc:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
    c1e0:	|  |  |  /-- bne.s c1e8 <builtIn_loopSound+0x140>
    c1e2:	|  |  |  |   moveq #1,d0
    c1e4:	+--|--|--|-- bra.w c284 <builtIn_loopSound+0x1dc>

			s->next = old;
    c1e8:	|  |  |  \-> movea.l 28(sp),a0
    c1ec:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
    c1f2:	|  |  |      movea.l 28(sp),a0
    c1f6:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
    c1fa:	|  |  |      move.l 8(sp),d0
    c1fe:	|  |  |      movea.l 28(sp),a0
    c202:	|  |  |      move.l d0,(a0)
			old = s;
    c204:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
    c20a:	|  |  |      moveq #24,d0
    c20c:	|  |  |      add.l 40(sp),d0
    c210:	|  |  |      move.l d0,-(sp)
    c212:	|  |  |      jsr 10a60 <trimStack>
    c218:	|  |  |      addq.l #4,sp
			numParams--;
    c21a:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
    c21e:	|  \--|----> tst.l 36(sp)
    c222:	|     \----- bne.w c180 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
    c226:	|        /-- bra.s c232 <builtIn_loopSound+0x18a>
    c228:	|     /--|-> movea.l 28(sp),a0
    c22c:	|     |  |   move.l 4(a0),28(sp)
    c232:	|     |  \-> movea.l 28(sp),a0
    c236:	|     |      move.l 4(a0),d0
    c23a:	|     \----- bne.s c228 <builtIn_loopSound+0x180>
		if (doLoop > 1) {
    c23c:	|            move.l 4(sp),d0
    c240:	|            moveq #1,d1
    c242:	|            cmp.l d0,d1
    c244:	|     /----- bge.s c25c <builtIn_loopSound+0x1b4>
			s->next = old;
    c246:	|     |      movea.l 28(sp),a0
    c24a:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
    c250:	|     |      movea.l 24(sp),a0
    c254:	|     |      move.l 28(sp),8(a0)
    c25a:	|     |  /-- bra.s c26c <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
    c25c:	|     \--|-> move.l 4(sp),d0
    c260:	|        +-- beq.s c26c <builtIn_loopSound+0x1c4>
			s->next = s;
    c262:	|        |   movea.l 28(sp),a0
    c266:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
    c26c:	|        \-> movea.l 24(sp),a0
    c270:	|            moveq #-1,d0
    c272:	|            move.l d0,16(a0)
		playSoundList(old);
    c276:	|            move.l 24(sp),-(sp)
    c27a:	|            jsr 8be4 <playSoundList>
    c280:	|            addq.l #4,sp
		return BR_CONTINUE;
    c282:	|            moveq #2,d0
	}
}
    c284:	\----------> movea.l (sp)+,a6
    c286:	             lea 28(sp),sp
    c28a:	             rts

0000c28c <builtIn_stopSound>:

builtIn(stopSound)
{
    c28c:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    c28e:	       movea.l 12(sp),a0
    c292:	       move.l 24(a0),d0
    c296:	       move.l d0,-(sp)
    c298:	       pea 5 <_start+0x5>
    c29c:	       move.l sp,d0
    c29e:	       addq.l #8,d0
    c2a0:	       move.l d0,-(sp)
    c2a2:	       jsr 100dc <getValueType>
    c2a8:	       lea 12(sp),sp
    c2ac:	       tst.w d0
    c2ae:	   /-- bne.s c2b4 <builtIn_stopSound+0x28>
    c2b0:	   |   moveq #1,d0
    c2b2:	/--|-- bra.s c2d2 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
    c2b4:	|  \-> moveq #24,d0
    c2b6:	|      add.l 12(sp),d0
    c2ba:	|      move.l d0,-(sp)
    c2bc:	|      jsr 10a60 <trimStack>
    c2c2:	|      addq.l #4,sp
	huntKillSound (v);
    c2c4:	|      move.l (sp),d0
    c2c6:	|      move.l d0,-(sp)
    c2c8:	|      jsr 8bdc <huntKillSound>
    c2ce:	|      addq.l #4,sp
	return BR_CONTINUE;
    c2d0:	|      moveq #2,d0
}
    c2d2:	\----> addq.l #4,sp
    c2d4:	       rts

0000c2d6 <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
    c2d6:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c2d8:	       movea.l 12(sp),a0
    c2dc:	       move.l 24(a0),d0
    c2e0:	       move.l d0,-(sp)
    c2e2:	       pea 1 <_start+0x1>
    c2e6:	       move.l sp,d0
    c2e8:	       addq.l #8,d0
    c2ea:	       move.l d0,-(sp)
    c2ec:	       jsr 100dc <getValueType>
    c2f2:	       lea 12(sp),sp
    c2f6:	       tst.w d0
    c2f8:	   /-- bne.s c2fe <builtIn_setDefaultSoundVolume+0x28>
    c2fa:	   |   moveq #1,d0
    c2fc:	/--|-- bra.s c31c <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
    c2fe:	|  \-> moveq #24,d0
    c300:	|      add.l 12(sp),d0
    c304:	|      move.l d0,-(sp)
    c306:	|      jsr 10a60 <trimStack>
    c30c:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
    c30e:	|      move.l (sp),d0
    c310:	|      move.l d0,-(sp)
    c312:	|      jsr 8c52 <setDefaultSoundVolume>
    c318:	|      addq.l #4,sp
	return BR_CONTINUE;
    c31a:	|      moveq #2,d0
}
    c31c:	\----> addq.l #4,sp
    c31e:	       rts

0000c320 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
    c320:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c322:	       movea.l 16(sp),a0
    c326:	       move.l 24(a0),d0
    c32a:	       move.l d0,-(sp)
    c32c:	       pea 1 <_start+0x1>
    c330:	       move.l sp,d0
    c332:	       addq.l #8,d0
    c334:	       move.l d0,-(sp)
    c336:	       jsr 100dc <getValueType>
    c33c:	       lea 12(sp),sp
    c340:	       tst.w d0
    c342:	   /-- bne.s c348 <builtIn_setSoundVolume+0x28>
    c344:	   |   moveq #1,d0
    c346:	/--|-- bra.s c3a2 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    c348:	|  \-> moveq #24,d0
    c34a:	|      add.l 16(sp),d0
    c34e:	|      move.l d0,-(sp)
    c350:	|      jsr 10a60 <trimStack>
    c356:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    c358:	|      movea.l 16(sp),a0
    c35c:	|      move.l 24(a0),d0
    c360:	|      move.l d0,-(sp)
    c362:	|      pea 5 <_start+0x5>
    c366:	|      moveq #12,d0
    c368:	|      add.l sp,d0
    c36a:	|      move.l d0,-(sp)
    c36c:	|      jsr 100dc <getValueType>
    c372:	|      lea 12(sp),sp
    c376:	|      tst.w d0
    c378:	|  /-- bne.s c37e <builtIn_setSoundVolume+0x5e>
    c37a:	|  |   moveq #1,d0
    c37c:	+--|-- bra.s c3a2 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    c37e:	|  \-> moveq #24,d0
    c380:	|      add.l 16(sp),d0
    c384:	|      move.l d0,-(sp)
    c386:	|      jsr 10a60 <trimStack>
    c38c:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
    c38e:	|      move.l (sp),d1
    c390:	|      move.l 4(sp),d0
    c394:	|      move.l d1,-(sp)
    c396:	|      move.l d0,-(sp)
    c398:	|      jsr 8c66 <setSoundVolume>
    c39e:	|      addq.l #8,sp
	return BR_CONTINUE;
    c3a0:	|      moveq #2,d0
}
    c3a2:	\----> addq.l #8,sp
    c3a4:	       rts

0000c3a6 <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
    c3a6:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c3aa:	       movea.l 20(sp),a0
    c3ae:	       move.l 24(a0),d0
    c3b2:	       move.l d0,-(sp)
    c3b4:	       pea 1 <_start+0x1>
    c3b8:	       moveq #12,d0
    c3ba:	       add.l sp,d0
    c3bc:	       move.l d0,-(sp)
    c3be:	       jsr 100dc <getValueType>
    c3c4:	       lea 12(sp),sp
    c3c8:	       tst.w d0
    c3ca:	   /-- bne.s c3d2 <builtIn_setSoundLoopPoints+0x2c>
    c3cc:	   |   moveq #1,d0
    c3ce:	/--|-- bra.w c46a <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    c3d2:	|  \-> moveq #24,d0
    c3d4:	|      add.l 20(sp),d0
    c3d8:	|      move.l d0,-(sp)
    c3da:	|      jsr 10a60 <trimStack>
    c3e0:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c3e2:	|      movea.l 20(sp),a0
    c3e6:	|      move.l 24(a0),d0
    c3ea:	|      move.l d0,-(sp)
    c3ec:	|      pea 1 <_start+0x1>
    c3f0:	|      lea 8(sp),a0
    c3f4:	|      move.l a0,-(sp)
    c3f6:	|      jsr 100dc <getValueType>
    c3fc:	|      lea 12(sp),sp
    c400:	|      tst.w d0
    c402:	|  /-- bne.s c408 <builtIn_setSoundLoopPoints+0x62>
    c404:	|  |   moveq #1,d0
    c406:	+--|-- bra.s c46a <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    c408:	|  \-> moveq #24,d0
    c40a:	|      add.l 20(sp),d0
    c40e:	|      move.l d0,-(sp)
    c410:	|      jsr 10a60 <trimStack>
    c416:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    c418:	|      movea.l 20(sp),a0
    c41c:	|      move.l 24(a0),d0
    c420:	|      move.l d0,-(sp)
    c422:	|      pea 5 <_start+0x5>
    c426:	|      moveq #16,d0
    c428:	|      add.l sp,d0
    c42a:	|      move.l d0,-(sp)
    c42c:	|      jsr 100dc <getValueType>
    c432:	|      lea 12(sp),sp
    c436:	|      tst.w d0
    c438:	|  /-- bne.s c43e <builtIn_setSoundLoopPoints+0x98>
    c43a:	|  |   moveq #1,d0
    c43c:	+--|-- bra.s c46a <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    c43e:	|  \-> moveq #24,d0
    c440:	|      add.l 20(sp),d0
    c444:	|      move.l d0,-(sp)
    c446:	|      jsr 10a60 <trimStack>
    c44c:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
    c44e:	|      movea.l 4(sp),a0
    c452:	|      move.l (sp),d1
    c454:	|      move.l 8(sp),d0
    c458:	|      move.l a0,-(sp)
    c45a:	|      move.l d1,-(sp)
    c45c:	|      move.l d0,-(sp)
    c45e:	|      jsr 8c5e <setSoundLoop>
    c464:	|      lea 12(sp),sp
	return BR_CONTINUE;
    c468:	|      moveq #2,d0
}
    c46a:	\----> lea 12(sp),sp
    c46e:	       rts

0000c470 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
    c470:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    c472:	          movea.l 12(sp),a0
    c476:	          movea.l 24(a0),a0
    c47a:	          move.l (a0),d0
    c47c:	          moveq #5,d1
    c47e:	          cmp.l d0,d1
    c480:	/-------- bne.s c4c4 <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    c482:	|         movea.l 12(sp),a0
    c486:	|         move.l 24(a0),d0
    c48a:	|         move.l d0,-(sp)
    c48c:	|         pea 5 <_start+0x5>
    c490:	|         move.l sp,d0
    c492:	|         addq.l #8,d0
    c494:	|         move.l d0,-(sp)
    c496:	|         jsr 100dc <getValueType>
    c49c:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    c4a0:	|         moveq #24,d0
    c4a2:	|         add.l 12(sp),d0
    c4a6:	|         move.l d0,-(sp)
    c4a8:	|         jsr 10a60 <trimStack>
    c4ae:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
    c4b0:	|         move.l (sp),d0
    c4b2:	|         move.l d0,-(sp)
    c4b4:	|         jsr 118ce <setFloor>
    c4ba:	|         addq.l #4,sp
    c4bc:	|         tst.w d0
    c4be:	|  /----- bne.s c4da <builtIn_setFloor+0x6a>
    c4c0:	|  |      moveq #1,d0
    c4c2:	|  |  /-- bra.s c4dc <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
    c4c4:	\--|--|-> moveq #24,d0
    c4c6:	   |  |   add.l 12(sp),d0
    c4ca:	   |  |   move.l d0,-(sp)
    c4cc:	   |  |   jsr 10a60 <trimStack>
    c4d2:	   |  |   addq.l #4,sp
		setFloorNull ();
    c4d4:	   |  |   jsr 12048 <setFloorNull>
	}
	return BR_CONTINUE;
    c4da:	   \--|-> moveq #2,d0
}
    c4dc:	      \-> addq.l #4,sp
    c4de:	          rts

0000c4e0 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
    c4e0:	jsr 11166 <drawFloor>
	return BR_CONTINUE;
    c4e6:	moveq #2,d0
}
    c4e8:	rts

0000c4ea <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
    c4ea:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    c4ec:	          movea.l 12(sp),a0
    c4f0:	          movea.l 24(a0),a0
    c4f4:	          move.l (a0),d0
    c4f6:	          moveq #5,d1
    c4f8:	          cmp.l d0,d1
    c4fa:	/-------- bne.s c53e <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    c4fc:	|         movea.l 12(sp),a0
    c500:	|         move.l 24(a0),d0
    c504:	|         move.l d0,-(sp)
    c506:	|         pea 5 <_start+0x5>
    c50a:	|         move.l sp,d0
    c50c:	|         addq.l #8,d0
    c50e:	|         move.l d0,-(sp)
    c510:	|         jsr 100dc <getValueType>
    c516:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    c51a:	|         moveq #24,d0
    c51c:	|         add.l 12(sp),d0
    c520:	|         move.l d0,-(sp)
    c522:	|         jsr 10a60 <trimStack>
    c528:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
    c52a:	|         move.l (sp),d0
    c52c:	|         move.l d0,-(sp)
    c52e:	|         jsr 1604 <setZBuffer>
    c534:	|         addq.l #4,sp
    c536:	|         tst.w d0
    c538:	|  /----- bne.s c554 <builtIn_setZBuffer+0x6a>
    c53a:	|  |      moveq #1,d0
    c53c:	|  |  /-- bra.s c556 <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
    c53e:	\--|--|-> moveq #24,d0
    c540:	   |  |   add.l 12(sp),d0
    c544:	   |  |   move.l d0,-(sp)
    c546:	   |  |   jsr 10a60 <trimStack>
    c54c:	   |  |   addq.l #4,sp
		killZBuffer ();
    c54e:	   |  |   jsr 15ae <killZBuffer>
	}
	return BR_CONTINUE;
    c554:	   \--|-> moveq #2,d0
}
    c556:	      \-> addq.l #4,sp
    c558:	          rts

0000c55a <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
    c55a:	pea 159e4 <zbuffer.c.4facf542+0x2a7>
    c560:	jsr 12130 <KPrintF>
    c566:	addq.l #4,sp
	return BR_CONTINUE;
    c568:	moveq #2,d0
}
    c56a:	rts

0000c56c <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c56c:	          movea.l 8(sp),a0
    c570:	          move.l 24(a0),d0
    c574:	          move.l d0,-(sp)
    c576:	          pea 1 <_start+0x1>
    c57a:	          pea 19c46 <speechMode>
    c580:	          jsr 100dc <getValueType>
    c586:	          lea 12(sp),sp
    c58a:	          tst.w d0
    c58c:	      /-- bne.s c592 <builtIn_setSpeechMode+0x26>
    c58e:	      |   moveq #1,d0
    c590:	/-----|-- bra.s c5ca <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
    c592:	|     \-> moveq #24,d0
    c594:	|         add.l 8(sp),d0
    c598:	|         move.l d0,-(sp)
    c59a:	|         jsr 10a60 <trimStack>
    c5a0:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
    c5a2:	|         move.l 19c46 <speechMode>,d0
    c5a8:	|     /-- bmi.s c5b6 <builtIn_setSpeechMode+0x4a>
    c5aa:	|     |   move.l 19c46 <speechMode>,d0
    c5b0:	|     |   moveq #2,d1
    c5b2:	|     |   cmp.l d0,d1
    c5b4:	|  /--|-- bge.s c5c8 <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
    c5b6:	|  |  \-> pea 159fd <zbuffer.c.4facf542+0x2c0>
    c5bc:	|  |      jsr 12130 <KPrintF>
    c5c2:	|  |      addq.l #4,sp
		return BR_ERROR;
    c5c4:	|  |      moveq #1,d0
    c5c6:	+--|----- bra.s c5ca <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
    c5c8:	|  \----> moveq #2,d0
}
    c5ca:	\-------> rts

0000c5cc <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
    c5cc:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
    c5ce:	       jsr 4d3c <isThereAnySpeechGoingOn>
    c5d4:	       move.l d0,(sp)
	if (i == -1) {
    c5d6:	       moveq #-1,d0
    c5d8:	       cmp.l (sp),d0
    c5da:	/----- bne.s c5f6 <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
    c5dc:	|      moveq #28,d0
    c5de:	|      add.l 12(sp),d0
    c5e2:	|      clr.l -(sp)
    c5e4:	|      pea 1 <_start+0x1>
    c5e8:	|      move.l d0,-(sp)
    c5ea:	|      jsr 109ce <setVariable>
    c5f0:	|      lea 12(sp),sp
    c5f4:	|  /-- bra.s c60e <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
    c5f6:	\--|-> moveq #28,d0
    c5f8:	   |   add.l 12(sp),d0
    c5fc:	   |   move.l (sp),-(sp)
    c5fe:	   |   pea 7 <_start+0x7>
    c602:	   |   move.l d0,-(sp)
    c604:	   |   jsr 109ce <setVariable>
    c60a:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    c60e:	   \-> moveq #2,d0
}
    c610:	       addq.l #4,sp
    c612:	       rts

0000c614 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
    c614:	jsr 3358 <killSpeechTimers>
	return BR_CONTINUE;
    c61a:	moveq #2,d0
}
    c61c:	rts

0000c61e <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
    c61e:	       move.l 19c80 <overRegion>,d0
    c624:	/----- beq.s c64e <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    c626:	|      movea.l 19c80 <overRegion>,a0
    c62c:	|      movea.l 28(a0),a0
    c630:	|      move.l 4(a0),d1
    c634:	|      moveq #28,d0
    c636:	|      add.l 8(sp),d0
    c63a:	|      move.l d1,-(sp)
    c63c:	|      pea 7 <_start+0x7>
    c640:	|      move.l d0,-(sp)
    c642:	|      jsr 109ce <setVariable>
    c648:	|      lea 12(sp),sp
    c64c:	|  /-- bra.s c666 <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
    c64e:	\--|-> moveq #28,d0
    c650:	   |   add.l 8(sp),d0
    c654:	   |   clr.l -(sp)
    c656:	   |   pea 1 <_start+0x1>
    c65a:	   |   move.l d0,-(sp)
    c65c:	   |   jsr 109ce <setVariable>
    c662:	   |   lea 12(sp),sp
	return BR_CONTINUE;
    c666:	   \-> moveq #2,d0
}
    c668:	       rts

0000c66a <builtIn_rename>:

builtIn(rename)
{
    c66a:	       lea -16(sp),sp
    c66e:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    c670:	       movea.l 28(sp),a0
    c674:	       move.l 24(a0),d0
    c678:	       move.l d0,-(sp)
    c67a:	       jsr 106b2 <getTextFromAnyVar>
    c680:	       addq.l #4,sp
    c682:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
    c686:	   /-- bne.s c68c <builtIn_rename+0x22>
    c688:	   |   moveq #1,d0
    c68a:	/--|-- bra.s c706 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    c68c:	|  \-> moveq #24,d0
    c68e:	|      add.l 28(sp),d0
    c692:	|      move.l d0,-(sp)
    c694:	|      jsr 10a60 <trimStack>
    c69a:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
    c69c:	|      movea.l 28(sp),a0
    c6a0:	|      move.l 24(a0),d0
    c6a4:	|      move.l d0,-(sp)
    c6a6:	|      pea 7 <_start+0x7>
    c6aa:	|      lea 12(sp),a0
    c6ae:	|      move.l a0,-(sp)
    c6b0:	|      jsr 100dc <getValueType>
    c6b6:	|      lea 12(sp),sp
    c6ba:	|      tst.w d0
    c6bc:	|  /-- bne.s c6c2 <builtIn_rename+0x58>
    c6be:	|  |   moveq #1,d0
    c6c0:	+--|-- bra.s c706 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    c6c2:	|  \-> moveq #24,d0
    c6c4:	|      add.l 28(sp),d0
    c6c8:	|      move.l d0,-(sp)
    c6ca:	|      jsr 10a60 <trimStack>
    c6d0:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
    c6d2:	|      move.l 4(sp),d0
    c6d6:	|      move.l d0,-(sp)
    c6d8:	|      jsr 8f2e <findObjectType>
    c6de:	|      addq.l #4,sp
    c6e0:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
    c6e4:	|      movea.l 12(sp),a0
    c6e8:	|      move.l (a0),8(sp)
    c6ec:	|      move.l 19b8e <SysBase>,d0
    c6f2:	|      movea.l d0,a6
    c6f4:	|      movea.l 8(sp),a1
    c6f8:	|      jsr -690(a6)
	o->screenName = newText;
    c6fc:	|      movea.l 12(sp),a0
    c700:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
    c704:	|      moveq #2,d0
}
    c706:	\----> movea.l (sp)+,a6
    c708:	       lea 16(sp),sp
    c70c:	       rts

0000c70e <builtIn_getObjectX>:

builtIn (getObjectX)
{
    c70e:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    c712:	          movea.l 20(sp),a0
    c716:	          move.l 24(a0),d0
    c71a:	          move.l d0,-(sp)
    c71c:	          pea 7 <_start+0x7>
    c720:	          lea 8(sp),a0
    c724:	          move.l a0,-(sp)
    c726:	          jsr 100dc <getValueType>
    c72c:	          lea 12(sp),sp
    c730:	          tst.w d0
    c732:	      /-- bne.s c73a <builtIn_getObjectX+0x2c>
    c734:	      |   moveq #1,d0
    c736:	/-----|-- bra.w c7d6 <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
    c73a:	|     \-> moveq #24,d0
    c73c:	|         add.l 20(sp),d0
    c740:	|         move.l d0,-(sp)
    c742:	|         jsr 10a60 <trimStack>
    c748:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    c74a:	|         move.l (sp),d0
    c74c:	|         move.l d0,-(sp)
    c74e:	|         jsr 6338 <findPerson>
    c754:	|         addq.l #4,sp
    c756:	|         move.l d0,8(sp)
	if (pers) {
    c75a:	|     /-- beq.s c788 <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
    c75c:	|     |   movea.l 8(sp),a0
    c760:	|     |   move.l (a0),d0
    c762:	|     |   move.l d0,-(sp)
    c764:	|     |   jsr 12520 <__fixsfsi>
    c76a:	|     |   addq.l #4,sp
    c76c:	|     |   move.l d0,d1
    c76e:	|     |   moveq #28,d0
    c770:	|     |   add.l 20(sp),d0
    c774:	|     |   move.l d1,-(sp)
    c776:	|     |   pea 1 <_start+0x1>
    c77a:	|     |   move.l d0,-(sp)
    c77c:	|     |   jsr 109ce <setVariable>
    c782:	|     |   lea 12(sp),sp
    c786:	|  /--|-- bra.s c7d4 <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    c788:	|  |  \-> move.l (sp),d0
    c78a:	|  |      move.l d0,-(sp)
    c78c:	|  |      jsr 10ba6 <getRegionForObject>
    c792:	|  |      addq.l #4,sp
    c794:	|  |      move.l d0,4(sp)
		if (la) {
    c798:	|  |  /-- beq.s c7bc <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
    c79a:	|  |  |   movea.l 4(sp),a0
    c79e:	|  |  |   move.l 16(a0),d1
    c7a2:	|  |  |   moveq #28,d0
    c7a4:	|  |  |   add.l 20(sp),d0
    c7a8:	|  |  |   move.l d1,-(sp)
    c7aa:	|  |  |   pea 1 <_start+0x1>
    c7ae:	|  |  |   move.l d0,-(sp)
    c7b0:	|  |  |   jsr 109ce <setVariable>
    c7b6:	|  |  |   lea 12(sp),sp
    c7ba:	|  +--|-- bra.s c7d4 <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    c7bc:	|  |  \-> moveq #28,d0
    c7be:	|  |      add.l 20(sp),d0
    c7c2:	|  |      clr.l -(sp)
    c7c4:	|  |      pea 1 <_start+0x1>
    c7c8:	|  |      move.l d0,-(sp)
    c7ca:	|  |      jsr 109ce <setVariable>
    c7d0:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    c7d4:	|  \----> moveq #2,d0
}
    c7d6:	\-------> lea 12(sp),sp
    c7da:	          rts

0000c7dc <builtIn_getObjectY>:

builtIn (getObjectY)
{
    c7dc:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    c7e0:	          movea.l 20(sp),a0
    c7e4:	          move.l 24(a0),d0
    c7e8:	          move.l d0,-(sp)
    c7ea:	          pea 7 <_start+0x7>
    c7ee:	          lea 8(sp),a0
    c7f2:	          move.l a0,-(sp)
    c7f4:	          jsr 100dc <getValueType>
    c7fa:	          lea 12(sp),sp
    c7fe:	          tst.w d0
    c800:	      /-- bne.s c808 <builtIn_getObjectY+0x2c>
    c802:	      |   moveq #1,d0
    c804:	/-----|-- bra.w c8a6 <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
    c808:	|     \-> moveq #24,d0
    c80a:	|         add.l 20(sp),d0
    c80e:	|         move.l d0,-(sp)
    c810:	|         jsr 10a60 <trimStack>
    c816:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    c818:	|         move.l (sp),d0
    c81a:	|         move.l d0,-(sp)
    c81c:	|         jsr 6338 <findPerson>
    c822:	|         addq.l #4,sp
    c824:	|         move.l d0,8(sp)
	if (pers) {
    c828:	|     /-- beq.s c858 <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
    c82a:	|     |   movea.l 8(sp),a0
    c82e:	|     |   move.l 4(a0),d0
    c832:	|     |   move.l d0,-(sp)
    c834:	|     |   jsr 12520 <__fixsfsi>
    c83a:	|     |   addq.l #4,sp
    c83c:	|     |   move.l d0,d1
    c83e:	|     |   moveq #28,d0
    c840:	|     |   add.l 20(sp),d0
    c844:	|     |   move.l d1,-(sp)
    c846:	|     |   pea 1 <_start+0x1>
    c84a:	|     |   move.l d0,-(sp)
    c84c:	|     |   jsr 109ce <setVariable>
    c852:	|     |   lea 12(sp),sp
    c856:	|  /--|-- bra.s c8a4 <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    c858:	|  |  \-> move.l (sp),d0
    c85a:	|  |      move.l d0,-(sp)
    c85c:	|  |      jsr 10ba6 <getRegionForObject>
    c862:	|  |      addq.l #4,sp
    c864:	|  |      move.l d0,4(sp)
		if (la) {
    c868:	|  |  /-- beq.s c88c <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
    c86a:	|  |  |   movea.l 4(sp),a0
    c86e:	|  |  |   move.l 20(a0),d1
    c872:	|  |  |   moveq #28,d0
    c874:	|  |  |   add.l 20(sp),d0
    c878:	|  |  |   move.l d1,-(sp)
    c87a:	|  |  |   pea 1 <_start+0x1>
    c87e:	|  |  |   move.l d0,-(sp)
    c880:	|  |  |   jsr 109ce <setVariable>
    c886:	|  |  |   lea 12(sp),sp
    c88a:	|  +--|-- bra.s c8a4 <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    c88c:	|  |  \-> moveq #28,d0
    c88e:	|  |      add.l 20(sp),d0
    c892:	|  |      clr.l -(sp)
    c894:	|  |      pea 1 <_start+0x1>
    c898:	|  |      move.l d0,-(sp)
    c89a:	|  |      jsr 109ce <setVariable>
    c8a0:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    c8a4:	|  \----> moveq #2,d0
}
    c8a6:	\-------> lea 12(sp),sp
    c8aa:	          rts

0000c8ac <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
    c8ac:	       lea -32(sp),sp
    c8b0:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c8b4:	       movea.l 56(sp),a0
    c8b8:	       move.l 24(a0),d0
    c8bc:	       move.l d0,-(sp)
    c8be:	       pea 1 <_start+0x1>
    c8c2:	       lea 28(sp),a0
    c8c6:	       move.l a0,-(sp)
    c8c8:	       jsr 100dc <getValueType>
    c8ce:	       lea 12(sp),sp
    c8d2:	       tst.w d0
    c8d4:	   /-- bne.s c8dc <builtIn_addScreenRegion+0x30>
    c8d6:	   |   moveq #1,d0
    c8d8:	/--|-- bra.w cab6 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    c8dc:	|  \-> moveq #24,d0
    c8de:	|      add.l 56(sp),d0
    c8e2:	|      move.l d0,-(sp)
    c8e4:	|      jsr 10a60 <trimStack>
    c8ea:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c8ec:	|      movea.l 56(sp),a0
    c8f0:	|      move.l 24(a0),d0
    c8f4:	|      move.l d0,-(sp)
    c8f6:	|      pea 1 <_start+0x1>
    c8fa:	|      moveq #48,d0
    c8fc:	|      add.l sp,d0
    c8fe:	|      move.l d0,-(sp)
    c900:	|      jsr 100dc <getValueType>
    c906:	|      lea 12(sp),sp
    c90a:	|      tst.w d0
    c90c:	|  /-- bne.s c914 <builtIn_addScreenRegion+0x68>
    c90e:	|  |   moveq #1,d0
    c910:	+--|-- bra.w cab6 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    c914:	|  \-> moveq #24,d0
    c916:	|      add.l 56(sp),d0
    c91a:	|      move.l d0,-(sp)
    c91c:	|      jsr 10a60 <trimStack>
    c922:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c924:	|      movea.l 56(sp),a0
    c928:	|      move.l 24(a0),d0
    c92c:	|      move.l d0,-(sp)
    c92e:	|      pea 1 <_start+0x1>
    c932:	|      moveq #52,d0
    c934:	|      add.l sp,d0
    c936:	|      move.l d0,-(sp)
    c938:	|      jsr 100dc <getValueType>
    c93e:	|      lea 12(sp),sp
    c942:	|      tst.w d0
    c944:	|  /-- bne.s c94c <builtIn_addScreenRegion+0xa0>
    c946:	|  |   moveq #1,d0
    c948:	+--|-- bra.w cab6 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    c94c:	|  \-> moveq #24,d0
    c94e:	|      add.l 56(sp),d0
    c952:	|      move.l d0,-(sp)
    c954:	|      jsr 10a60 <trimStack>
    c95a:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c95c:	|      movea.l 56(sp),a0
    c960:	|      move.l 24(a0),d0
    c964:	|      move.l d0,-(sp)
    c966:	|      pea 1 <_start+0x1>
    c96a:	|      lea 32(sp),a0
    c96e:	|      move.l a0,-(sp)
    c970:	|      jsr 100dc <getValueType>
    c976:	|      lea 12(sp),sp
    c97a:	|      tst.w d0
    c97c:	|  /-- bne.s c984 <builtIn_addScreenRegion+0xd8>
    c97e:	|  |   moveq #1,d0
    c980:	+--|-- bra.w cab6 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    c984:	|  \-> moveq #24,d0
    c986:	|      add.l 56(sp),d0
    c98a:	|      move.l d0,-(sp)
    c98c:	|      jsr 10a60 <trimStack>
    c992:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c994:	|      movea.l 56(sp),a0
    c998:	|      move.l 24(a0),d0
    c99c:	|      move.l d0,-(sp)
    c99e:	|      pea 1 <_start+0x1>
    c9a2:	|      lea 36(sp),a0
    c9a6:	|      move.l a0,-(sp)
    c9a8:	|      jsr 100dc <getValueType>
    c9ae:	|      lea 12(sp),sp
    c9b2:	|      tst.w d0
    c9b4:	|  /-- bne.s c9bc <builtIn_addScreenRegion+0x110>
    c9b6:	|  |   moveq #1,d0
    c9b8:	+--|-- bra.w cab6 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    c9bc:	|  \-> moveq #24,d0
    c9be:	|      add.l 56(sp),d0
    c9c2:	|      move.l d0,-(sp)
    c9c4:	|      jsr 10a60 <trimStack>
    c9ca:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c9cc:	|      movea.l 56(sp),a0
    c9d0:	|      move.l 24(a0),d0
    c9d4:	|      move.l d0,-(sp)
    c9d6:	|      pea 1 <_start+0x1>
    c9da:	|      lea 40(sp),a0
    c9de:	|      move.l a0,-(sp)
    c9e0:	|      jsr 100dc <getValueType>
    c9e6:	|      lea 12(sp),sp
    c9ea:	|      tst.w d0
    c9ec:	|  /-- bne.s c9f4 <builtIn_addScreenRegion+0x148>
    c9ee:	|  |   moveq #1,d0
    c9f0:	+--|-- bra.w cab6 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    c9f4:	|  \-> moveq #24,d0
    c9f6:	|      add.l 56(sp),d0
    c9fa:	|      move.l d0,-(sp)
    c9fc:	|      jsr 10a60 <trimStack>
    ca02:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ca04:	|      movea.l 56(sp),a0
    ca08:	|      move.l 24(a0),d0
    ca0c:	|      move.l d0,-(sp)
    ca0e:	|      pea 1 <_start+0x1>
    ca12:	|      lea 44(sp),a0
    ca16:	|      move.l a0,-(sp)
    ca18:	|      jsr 100dc <getValueType>
    ca1e:	|      lea 12(sp),sp
    ca22:	|      tst.w d0
    ca24:	|  /-- bne.s ca2c <builtIn_addScreenRegion+0x180>
    ca26:	|  |   moveq #1,d0
    ca28:	+--|-- bra.w cab6 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    ca2c:	|  \-> moveq #24,d0
    ca2e:	|      add.l 56(sp),d0
    ca32:	|      move.l d0,-(sp)
    ca34:	|      jsr 10a60 <trimStack>
    ca3a:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ca3c:	|      movea.l 56(sp),a0
    ca40:	|      move.l 24(a0),d0
    ca44:	|      move.l d0,-(sp)
    ca46:	|      pea 7 <_start+0x7>
    ca4a:	|      lea 24(sp),a0
    ca4e:	|      move.l a0,-(sp)
    ca50:	|      jsr 100dc <getValueType>
    ca56:	|      lea 12(sp),sp
    ca5a:	|      tst.w d0
    ca5c:	|  /-- bne.s ca62 <builtIn_addScreenRegion+0x1b6>
    ca5e:	|  |   moveq #1,d0
    ca60:	+--|-- bra.s cab6 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    ca62:	|  \-> moveq #24,d0
    ca64:	|      add.l 56(sp),d0
    ca68:	|      move.l d0,-(sp)
    ca6a:	|      jsr 10a60 <trimStack>
    ca70:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
    ca72:	|      move.l 16(sp),d5
    ca76:	|      move.l 20(sp),d4
    ca7a:	|      move.l 40(sp),d3
    ca7e:	|      move.l 44(sp),d2
    ca82:	|      movea.l 24(sp),a1
    ca86:	|      movea.l 28(sp),a0
    ca8a:	|      move.l 32(sp),d1
    ca8e:	|      move.l 36(sp),d0
    ca92:	|      move.l d5,-(sp)
    ca94:	|      move.l d4,-(sp)
    ca96:	|      move.l d3,-(sp)
    ca98:	|      move.l d2,-(sp)
    ca9a:	|      move.l a1,-(sp)
    ca9c:	|      move.l a0,-(sp)
    ca9e:	|      move.l d1,-(sp)
    caa0:	|      move.l d0,-(sp)
    caa2:	|      jsr 10ae6 <addScreenRegion>
    caa8:	|      lea 32(sp),sp
    caac:	|      tst.w d0
    caae:	|  /-- beq.s cab4 <builtIn_addScreenRegion+0x208>
    cab0:	|  |   moveq #2,d0
    cab2:	+--|-- bra.s cab6 <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
    cab4:	|  \-> moveq #1,d0

}
    cab6:	\----> movem.l (sp)+,d2-d5
    caba:	       lea 32(sp),sp
    cabe:	       rts

0000cac0 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
    cac0:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cac2:	       movea.l 12(sp),a0
    cac6:	       move.l 24(a0),d0
    caca:	       move.l d0,-(sp)
    cacc:	       pea 7 <_start+0x7>
    cad0:	       move.l sp,d0
    cad2:	       addq.l #8,d0
    cad4:	       move.l d0,-(sp)
    cad6:	       jsr 100dc <getValueType>
    cadc:	       lea 12(sp),sp
    cae0:	       tst.w d0
    cae2:	   /-- bne.s cae8 <builtIn_removeScreenRegion+0x28>
    cae4:	   |   moveq #1,d0
    cae6:	/--|-- bra.s cb06 <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
    cae8:	|  \-> moveq #24,d0
    caea:	|      add.l 12(sp),d0
    caee:	|      move.l d0,-(sp)
    caf0:	|      jsr 10a60 <trimStack>
    caf6:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
    caf8:	|      move.l (sp),d0
    cafa:	|      move.l d0,-(sp)
    cafc:	|      jsr 10d4e <removeScreenRegion>
    cb02:	|      addq.l #4,sp
	return BR_CONTINUE;
    cb04:	|      moveq #2,d0
}
    cb06:	\----> addq.l #4,sp
    cb08:	       rts

0000cb0a <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
    cb0a:	jsr 10ed2 <showBoxes>
	return BR_CONTINUE;
    cb10:	moveq #2,d0
}
    cb12:	rts

0000cb14 <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
    cb14:	jsr 10bd4 <killAllRegions>
	return BR_CONTINUE;
    cb1a:	moveq #2,d0
}
    cb1c:	rts

0000cb1e <builtIn_addCharacter>:

builtIn(addCharacter)
{
    cb1e:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
    cb22:	       movea.l 24(sp),a0
    cb26:	       move.l 24(a0),d0
    cb2a:	       move.l d0,-(sp)
    cb2c:	       jsr fd88 <getCostumeFromVar>
    cb32:	       addq.l #4,sp
    cb34:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
    cb38:	   /-- bne.s cb40 <builtIn_addCharacter+0x22>
    cb3a:	   |   moveq #1,d0
    cb3c:	/--|-- bra.w cc1c <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
    cb40:	|  \-> moveq #24,d0
    cb42:	|      add.l 24(sp),d0
    cb46:	|      move.l d0,-(sp)
    cb48:	|      jsr 10a60 <trimStack>
    cb4e:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cb50:	|      movea.l 24(sp),a0
    cb54:	|      move.l 24(a0),d0
    cb58:	|      move.l d0,-(sp)
    cb5a:	|      pea 1 <_start+0x1>
    cb5e:	|      lea 12(sp),a0
    cb62:	|      move.l a0,-(sp)
    cb64:	|      jsr 100dc <getValueType>
    cb6a:	|      lea 12(sp),sp
    cb6e:	|      tst.w d0
    cb70:	|  /-- bne.s cb78 <builtIn_addCharacter+0x5a>
    cb72:	|  |   moveq #1,d0
    cb74:	+--|-- bra.w cc1c <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    cb78:	|  \-> moveq #24,d0
    cb7a:	|      add.l 24(sp),d0
    cb7e:	|      move.l d0,-(sp)
    cb80:	|      jsr 10a60 <trimStack>
    cb86:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cb88:	|      movea.l 24(sp),a0
    cb8c:	|      move.l 24(a0),d0
    cb90:	|      move.l d0,-(sp)
    cb92:	|      pea 1 <_start+0x1>
    cb96:	|      moveq #16,d0
    cb98:	|      add.l sp,d0
    cb9a:	|      move.l d0,-(sp)
    cb9c:	|      jsr 100dc <getValueType>
    cba2:	|      lea 12(sp),sp
    cba6:	|      tst.w d0
    cba8:	|  /-- bne.s cbae <builtIn_addCharacter+0x90>
    cbaa:	|  |   moveq #1,d0
    cbac:	+--|-- bra.s cc1c <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    cbae:	|  \-> moveq #24,d0
    cbb0:	|      add.l 24(sp),d0
    cbb4:	|      move.l d0,-(sp)
    cbb6:	|      jsr 10a60 <trimStack>
    cbbc:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cbbe:	|      movea.l 24(sp),a0
    cbc2:	|      move.l 24(a0),d0
    cbc6:	|      move.l d0,-(sp)
    cbc8:	|      pea 7 <_start+0x7>
    cbcc:	|      lea 8(sp),a0
    cbd0:	|      move.l a0,-(sp)
    cbd2:	|      jsr 100dc <getValueType>
    cbd8:	|      lea 12(sp),sp
    cbdc:	|      tst.w d0
    cbde:	|  /-- bne.s cbe4 <builtIn_addCharacter+0xc6>
    cbe0:	|  |   moveq #1,d0
    cbe2:	+--|-- bra.s cc1c <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    cbe4:	|  \-> moveq #24,d0
    cbe6:	|      add.l 24(sp),d0
    cbea:	|      move.l d0,-(sp)
    cbec:	|      jsr 10a60 <trimStack>
    cbf2:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
    cbf4:	|      movea.l (sp),a0
    cbf6:	|      move.l 4(sp),d1
    cbfa:	|      move.l 8(sp),d0
    cbfe:	|      move.l 12(sp),-(sp)
    cc02:	|      move.l a0,-(sp)
    cc04:	|      move.l d1,-(sp)
    cc06:	|      move.l d0,-(sp)
    cc08:	|      jsr 555e <addPerson>
    cc0e:	|      lea 16(sp),sp
    cc12:	|      tst.w d0
    cc14:	|  /-- beq.s cc1a <builtIn_addCharacter+0xfc>
    cc16:	|  |   moveq #2,d0
    cc18:	+--|-- bra.s cc1c <builtIn_addCharacter+0xfe>
	return BR_ERROR;
    cc1a:	|  \-> moveq #1,d0
}
    cc1c:	\----> lea 16(sp),sp
    cc20:	       rts

0000cc22 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
    cc22:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cc24:	       movea.l 12(sp),a0
    cc28:	       move.l 24(a0),d0
    cc2c:	       move.l d0,-(sp)
    cc2e:	       pea 7 <_start+0x7>
    cc32:	       move.l sp,d0
    cc34:	       addq.l #8,d0
    cc36:	       move.l d0,-(sp)
    cc38:	       jsr 100dc <getValueType>
    cc3e:	       lea 12(sp),sp
    cc42:	       tst.w d0
    cc44:	   /-- bne.s cc4a <builtIn_hideCharacter+0x28>
    cc46:	   |   moveq #1,d0
    cc48:	/--|-- bra.s cc6a <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
    cc4a:	|  \-> moveq #24,d0
    cc4c:	|      add.l 12(sp),d0
    cc50:	|      move.l d0,-(sp)
    cc52:	|      jsr 10a60 <trimStack>
    cc58:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
    cc5a:	|      move.l (sp),d0
    cc5c:	|      move.l d0,-(sp)
    cc5e:	|      clr.l -(sp)
    cc60:	|      jsr 7838 <setShown>
    cc66:	|      addq.l #8,sp
	return BR_CONTINUE;
    cc68:	|      moveq #2,d0
}
    cc6a:	\----> addq.l #4,sp
    cc6c:	       rts

0000cc6e <builtIn_showCharacter>:

builtIn(showCharacter)
{
    cc6e:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cc70:	       movea.l 12(sp),a0
    cc74:	       move.l 24(a0),d0
    cc78:	       move.l d0,-(sp)
    cc7a:	       pea 7 <_start+0x7>
    cc7e:	       move.l sp,d0
    cc80:	       addq.l #8,d0
    cc82:	       move.l d0,-(sp)
    cc84:	       jsr 100dc <getValueType>
    cc8a:	       lea 12(sp),sp
    cc8e:	       tst.w d0
    cc90:	   /-- bne.s cc96 <builtIn_showCharacter+0x28>
    cc92:	   |   moveq #1,d0
    cc94:	/--|-- bra.s ccb8 <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
    cc96:	|  \-> moveq #24,d0
    cc98:	|      add.l 12(sp),d0
    cc9c:	|      move.l d0,-(sp)
    cc9e:	|      jsr 10a60 <trimStack>
    cca4:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
    cca6:	|      move.l (sp),d0
    cca8:	|      move.l d0,-(sp)
    ccaa:	|      pea 1 <_start+0x1>
    ccae:	|      jsr 7838 <setShown>
    ccb4:	|      addq.l #8,sp
	return BR_CONTINUE;
    ccb6:	|      moveq #2,d0
}
    ccb8:	\----> addq.l #4,sp
    ccba:	       rts

0000ccbc <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
    ccbc:	jsr 3358 <killSpeechTimers>
	killMostPeople ();
    ccc2:	jsr 67a4 <killMostPeople>
	return BR_CONTINUE;
    ccc8:	moveq #2,d0
}
    ccca:	rts

0000cccc <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
    cccc:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ccce:	       movea.l 16(sp),a0
    ccd2:	       move.l 24(a0),d0
    ccd6:	       move.l d0,-(sp)
    ccd8:	       pea 1 <_start+0x1>
    ccdc:	       move.l sp,d0
    ccde:	       addq.l #8,d0
    cce0:	       move.l d0,-(sp)
    cce2:	       jsr 100dc <getValueType>
    cce8:	       lea 12(sp),sp
    ccec:	       tst.w d0
    ccee:	   /-- bne.s ccf4 <builtIn_setCharacterDrawMode+0x28>
    ccf0:	   |   moveq #1,d0
    ccf2:	/--|-- bra.s cd4e <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
    ccf4:	|  \-> moveq #24,d0
    ccf6:	|      add.l 16(sp),d0
    ccfa:	|      move.l d0,-(sp)
    ccfc:	|      jsr 10a60 <trimStack>
    cd02:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cd04:	|      movea.l 16(sp),a0
    cd08:	|      move.l 24(a0),d0
    cd0c:	|      move.l d0,-(sp)
    cd0e:	|      pea 7 <_start+0x7>
    cd12:	|      moveq #12,d0
    cd14:	|      add.l sp,d0
    cd16:	|      move.l d0,-(sp)
    cd18:	|      jsr 100dc <getValueType>
    cd1e:	|      lea 12(sp),sp
    cd22:	|      tst.w d0
    cd24:	|  /-- bne.s cd2a <builtIn_setCharacterDrawMode+0x5e>
    cd26:	|  |   moveq #1,d0
    cd28:	+--|-- bra.s cd4e <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
    cd2a:	|  \-> moveq #24,d0
    cd2c:	|      add.l 16(sp),d0
    cd30:	|      move.l d0,-(sp)
    cd32:	|      jsr 10a60 <trimStack>
    cd38:	|      addq.l #4,sp
	setDrawMode (di, obj);
    cd3a:	|      move.l 4(sp),d1
    cd3e:	|      move.l (sp),d0
    cd40:	|      move.l d1,-(sp)
    cd42:	|      move.l d0,-(sp)
    cd44:	|      jsr 7266 <setDrawMode>
    cd4a:	|      addq.l #8,sp
	return BR_CONTINUE;
    cd4c:	|      moveq #2,d0
}
    cd4e:	\----> addq.l #8,sp
    cd50:	       rts

0000cd52 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
    cd52:	pea 15a3b <zbuffer.c.4facf542+0x2fe>
    cd58:	jsr 12130 <KPrintF>
    cd5e:	addq.l #4,sp
	return BR_CONTINUE;
    cd60:	moveq #2,d0
}
    cd62:	rts

0000cd64 <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
    cd64:	pea 15a6e <zbuffer.c.4facf542+0x331>
    cd6a:	jsr 12130 <KPrintF>
    cd70:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
    cd72:	moveq #2,d0
}
    cd74:	rts

0000cd76 <builtIn_setScale>:

builtIn(setScale)
{
    cd76:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cd78:	       movea.l 16(sp),a0
    cd7c:	       move.l 24(a0),d0
    cd80:	       move.l d0,-(sp)
    cd82:	       pea 1 <_start+0x1>
    cd86:	       move.l sp,d0
    cd88:	       addq.l #8,d0
    cd8a:	       move.l d0,-(sp)
    cd8c:	       jsr 100dc <getValueType>
    cd92:	       lea 12(sp),sp
    cd96:	       tst.w d0
    cd98:	   /-- bne.s cd9e <builtIn_setScale+0x28>
    cd9a:	   |   moveq #1,d0
    cd9c:	/--|-- bra.s ce00 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
    cd9e:	|  \-> moveq #24,d0
    cda0:	|      add.l 16(sp),d0
    cda4:	|      move.l d0,-(sp)
    cda6:	|      jsr 10a60 <trimStack>
    cdac:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cdae:	|      movea.l 16(sp),a0
    cdb2:	|      move.l 24(a0),d0
    cdb6:	|      move.l d0,-(sp)
    cdb8:	|      pea 1 <_start+0x1>
    cdbc:	|      moveq #12,d0
    cdbe:	|      add.l sp,d0
    cdc0:	|      move.l d0,-(sp)
    cdc2:	|      jsr 100dc <getValueType>
    cdc8:	|      lea 12(sp),sp
    cdcc:	|      tst.w d0
    cdce:	|  /-- bne.s cdd4 <builtIn_setScale+0x5e>
    cdd0:	|  |   moveq #1,d0
    cdd2:	+--|-- bra.s ce00 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
    cdd4:	|  \-> moveq #24,d0
    cdd6:	|      add.l 16(sp),d0
    cdda:	|      move.l d0,-(sp)
    cddc:	|      jsr 10a60 <trimStack>
    cde2:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
    cde4:	|      move.l (sp),d0
    cde6:	|      move.l d0,d0
    cde8:	|      movea.w d0,a1
    cdea:	|      move.l 4(sp),d0
    cdee:	|      move.l d0,d0
    cdf0:	|      movea.w d0,a0
    cdf2:	|      move.l a1,-(sp)
    cdf4:	|      move.l a0,-(sp)
    cdf6:	|      jsr 7810 <setScale>
    cdfc:	|      addq.l #8,sp
	return BR_CONTINUE;
    cdfe:	|      moveq #2,d0
}
    ce00:	\----> addq.l #8,sp
    ce02:	       rts

0000ce04 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
    ce04:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ce06:	       movea.l 12(sp),a0
    ce0a:	       move.l 24(a0),d0
    ce0e:	       move.l d0,-(sp)
    ce10:	       pea 7 <_start+0x7>
    ce14:	       move.l sp,d0
    ce16:	       addq.l #8,d0
    ce18:	       move.l d0,-(sp)
    ce1a:	       jsr 100dc <getValueType>
    ce20:	       lea 12(sp),sp
    ce24:	       tst.w d0
    ce26:	   /-- bne.s ce2c <builtIn_stopCharacter+0x28>
    ce28:	   |   moveq #1,d0
    ce2a:	/--|-- bra.s ce64 <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
    ce2c:	|  \-> moveq #24,d0
    ce2e:	|      add.l 12(sp),d0
    ce32:	|      move.l d0,-(sp)
    ce34:	|      jsr 10a60 <trimStack>
    ce3a:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
    ce3c:	|      move.l (sp),d0
    ce3e:	|      move.l d0,-(sp)
    ce40:	|      jsr 7944 <stopPerson>
    ce46:	|      addq.l #4,sp
    ce48:	|      movea.w d0,a0
    ce4a:	|      moveq #28,d0
    ce4c:	|      add.l 12(sp),d0
    ce50:	|      move.l a0,-(sp)
    ce52:	|      pea 1 <_start+0x1>
    ce56:	|      move.l d0,-(sp)
    ce58:	|      jsr 109ce <setVariable>
    ce5e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ce62:	|      moveq #2,d0
}
    ce64:	\----> addq.l #4,sp
    ce66:	       rts

0000ce68 <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
    ce68:	pea 15aa8 <zbuffer.c.4facf542+0x36b>
    ce6e:	jsr 12130 <KPrintF>
    ce74:	addq.l #4,sp
	return BR_CONTINUE;
    ce76:	moveq #2,d0
}
    ce78:	rts

0000ce7a <builtIn_animate>:

builtIn(animate)
{
    ce7a:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    ce7c:	       movea.l 16(sp),a0
    ce80:	       move.l 24(a0),d0
    ce84:	       move.l d0,-(sp)
    ce86:	       jsr 105b4 <getAnimationFromVar>
    ce8c:	       addq.l #4,sp
    ce8e:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    ce92:	   /-- bne.s ce98 <builtIn_animate+0x1e>
    ce94:	   |   moveq #1,d0
    ce96:	/--|-- bra.s cf16 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
    ce98:	|  \-> moveq #24,d0
    ce9a:	|      add.l 16(sp),d0
    ce9e:	|      move.l d0,-(sp)
    cea0:	|      jsr 10a60 <trimStack>
    cea6:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cea8:	|      movea.l 16(sp),a0
    ceac:	|      move.l 24(a0),d0
    ceb0:	|      move.l d0,-(sp)
    ceb2:	|      pea 7 <_start+0x7>
    ceb6:	|      move.l sp,d0
    ceb8:	|      addq.l #8,d0
    ceba:	|      move.l d0,-(sp)
    cebc:	|      jsr 100dc <getValueType>
    cec2:	|      lea 12(sp),sp
    cec6:	|      tst.w d0
    cec8:	|  /-- bne.s cece <builtIn_animate+0x54>
    ceca:	|  |   moveq #1,d0
    cecc:	+--|-- bra.s cf16 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
    cece:	|  \-> moveq #24,d0
    ced0:	|      add.l 16(sp),d0
    ced4:	|      move.l d0,-(sp)
    ced6:	|      jsr 10a60 <trimStack>
    cedc:	|      addq.l #4,sp
	animatePerson (obj, pp);
    cede:	|      move.l (sp),d0
    cee0:	|      move.l 4(sp),-(sp)
    cee4:	|      move.l d0,-(sp)
    cee6:	|      jsr 57d0 <animatePerson>
    ceec:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
    ceee:	|      move.l 4(sp),-(sp)
    cef2:	|      jsr 7998 <timeForAnim>
    cef8:	|      addq.l #4,sp
    cefa:	|      move.l d0,d1
    cefc:	|      moveq #28,d0
    cefe:	|      add.l 16(sp),d0
    cf02:	|      move.l d1,-(sp)
    cf04:	|      pea 1 <_start+0x1>
    cf08:	|      move.l d0,-(sp)
    cf0a:	|      jsr 109ce <setVariable>
    cf10:	|      lea 12(sp),sp
	return BR_CONTINUE;
    cf14:	|      moveq #2,d0
}
    cf16:	\----> addq.l #8,sp
    cf18:	       rts

0000cf1a <builtIn_setCostume>:

builtIn(setCostume)
{
    cf1a:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
    cf1c:	       movea.l 16(sp),a0
    cf20:	       move.l 24(a0),d0
    cf24:	       move.l d0,-(sp)
    cf26:	       jsr fd88 <getCostumeFromVar>
    cf2c:	       addq.l #4,sp
    cf2e:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    cf32:	   /-- bne.s cf38 <builtIn_setCostume+0x1e>
    cf34:	   |   moveq #1,d0
    cf36:	/--|-- bra.s cf90 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
    cf38:	|  \-> moveq #24,d0
    cf3a:	|      add.l 16(sp),d0
    cf3e:	|      move.l d0,-(sp)
    cf40:	|      jsr 10a60 <trimStack>
    cf46:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cf48:	|      movea.l 16(sp),a0
    cf4c:	|      move.l 24(a0),d0
    cf50:	|      move.l d0,-(sp)
    cf52:	|      pea 7 <_start+0x7>
    cf56:	|      move.l sp,d0
    cf58:	|      addq.l #8,d0
    cf5a:	|      move.l d0,-(sp)
    cf5c:	|      jsr 100dc <getValueType>
    cf62:	|      lea 12(sp),sp
    cf66:	|      tst.w d0
    cf68:	|  /-- bne.s cf6e <builtIn_setCostume+0x54>
    cf6a:	|  |   moveq #1,d0
    cf6c:	+--|-- bra.s cf90 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
    cf6e:	|  \-> moveq #24,d0
    cf70:	|      add.l 16(sp),d0
    cf74:	|      move.l d0,-(sp)
    cf76:	|      jsr 10a60 <trimStack>
    cf7c:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
    cf7e:	|      move.l (sp),d0
    cf80:	|      move.l 4(sp),-(sp)
    cf84:	|      move.l d0,-(sp)
    cf86:	|      jsr 581a <animatePersonUsingPersona>
    cf8c:	|      addq.l #8,sp
	return BR_CONTINUE;
    cf8e:	|      moveq #2,d0
}
    cf90:	\----> addq.l #8,sp
    cf92:	       rts

0000cf94 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
    cf94:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cf96:	       movea.l 16(sp),a0
    cf9a:	       move.l 24(a0),d0
    cf9e:	       move.l d0,-(sp)
    cfa0:	       pea 1 <_start+0x1>
    cfa4:	       move.l sp,d0
    cfa6:	       addq.l #8,d0
    cfa8:	       move.l d0,-(sp)
    cfaa:	       jsr 100dc <getValueType>
    cfb0:	       lea 12(sp),sp
    cfb4:	       tst.w d0
    cfb6:	   /-- bne.s cfbc <builtIn_floatCharacter+0x28>
    cfb8:	   |   moveq #1,d0
    cfba:	/--|-- bra.s d030 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
    cfbc:	|  \-> moveq #24,d0
    cfbe:	|      add.l 16(sp),d0
    cfc2:	|      move.l d0,-(sp)
    cfc4:	|      jsr 10a60 <trimStack>
    cfca:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cfcc:	|      movea.l 16(sp),a0
    cfd0:	|      move.l 24(a0),d0
    cfd4:	|      move.l d0,-(sp)
    cfd6:	|      pea 7 <_start+0x7>
    cfda:	|      moveq #12,d0
    cfdc:	|      add.l sp,d0
    cfde:	|      move.l d0,-(sp)
    cfe0:	|      jsr 100dc <getValueType>
    cfe6:	|      lea 12(sp),sp
    cfea:	|      tst.w d0
    cfec:	|  /-- bne.s cff2 <builtIn_floatCharacter+0x5e>
    cfee:	|  |   moveq #1,d0
    cff0:	+--|-- bra.s d030 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
    cff2:	|  \-> moveq #24,d0
    cff4:	|      add.l 16(sp),d0
    cff8:	|      move.l d0,-(sp)
    cffa:	|      jsr 10a60 <trimStack>
    d000:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
    d002:	|      move.l 4(sp),d1
    d006:	|      move.l (sp),d0
    d008:	|      move.l d1,-(sp)
    d00a:	|      move.l d0,-(sp)
    d00c:	|      jsr 6366 <floatCharacter>
    d012:	|      addq.l #8,sp
    d014:	|      movea.w d0,a0
    d016:	|      moveq #28,d0
    d018:	|      add.l 16(sp),d0
    d01c:	|      move.l a0,-(sp)
    d01e:	|      pea 1 <_start+0x1>
    d022:	|      move.l d0,-(sp)
    d024:	|      jsr 109ce <setVariable>
    d02a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d02e:	|      moveq #2,d0
}
    d030:	\----> addq.l #8,sp
    d032:	       rts

0000d034 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
    d034:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d036:	       movea.l 16(sp),a0
    d03a:	       move.l 24(a0),d0
    d03e:	       move.l d0,-(sp)
    d040:	       pea 1 <_start+0x1>
    d044:	       move.l sp,d0
    d046:	       addq.l #8,d0
    d048:	       move.l d0,-(sp)
    d04a:	       jsr 100dc <getValueType>
    d050:	       lea 12(sp),sp
    d054:	       tst.w d0
    d056:	   /-- bne.s d05c <builtIn_setCharacterWalkSpeed+0x28>
    d058:	   |   moveq #1,d0
    d05a:	/--|-- bra.s d0d0 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
    d05c:	|  \-> moveq #24,d0
    d05e:	|      add.l 16(sp),d0
    d062:	|      move.l d0,-(sp)
    d064:	|      jsr 10a60 <trimStack>
    d06a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d06c:	|      movea.l 16(sp),a0
    d070:	|      move.l 24(a0),d0
    d074:	|      move.l d0,-(sp)
    d076:	|      pea 7 <_start+0x7>
    d07a:	|      moveq #12,d0
    d07c:	|      add.l sp,d0
    d07e:	|      move.l d0,-(sp)
    d080:	|      jsr 100dc <getValueType>
    d086:	|      lea 12(sp),sp
    d08a:	|      tst.w d0
    d08c:	|  /-- bne.s d092 <builtIn_setCharacterWalkSpeed+0x5e>
    d08e:	|  |   moveq #1,d0
    d090:	+--|-- bra.s d0d0 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
    d092:	|  \-> moveq #24,d0
    d094:	|      add.l 16(sp),d0
    d098:	|      move.l d0,-(sp)
    d09a:	|      jsr 10a60 <trimStack>
    d0a0:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
    d0a2:	|      move.l 4(sp),d1
    d0a6:	|      move.l (sp),d0
    d0a8:	|      move.l d1,-(sp)
    d0aa:	|      move.l d0,-(sp)
    d0ac:	|      jsr 77ac <setCharacterWalkSpeed>
    d0b2:	|      addq.l #8,sp
    d0b4:	|      movea.w d0,a0
    d0b6:	|      moveq #28,d0
    d0b8:	|      add.l 16(sp),d0
    d0bc:	|      move.l a0,-(sp)
    d0be:	|      pea 1 <_start+0x1>
    d0c2:	|      move.l d0,-(sp)
    d0c4:	|      jsr 109ce <setVariable>
    d0ca:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d0ce:	|      moveq #2,d0
}
    d0d0:	\----> addq.l #8,sp
    d0d2:	       rts

0000d0d4 <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
    d0d4:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d0d6:	       movea.l 16(sp),a0
    d0da:	       move.l 24(a0),d0
    d0de:	       move.l d0,-(sp)
    d0e0:	       pea 1 <_start+0x1>
    d0e4:	       move.l sp,d0
    d0e6:	       addq.l #8,d0
    d0e8:	       move.l d0,-(sp)
    d0ea:	       jsr 100dc <getValueType>
    d0f0:	       lea 12(sp),sp
    d0f4:	       tst.w d0
    d0f6:	   /-- bne.s d0fc <builtIn_turnCharacter+0x28>
    d0f8:	   |   moveq #1,d0
    d0fa:	/--|-- bra.s d170 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
    d0fc:	|  \-> moveq #24,d0
    d0fe:	|      add.l 16(sp),d0
    d102:	|      move.l d0,-(sp)
    d104:	|      jsr 10a60 <trimStack>
    d10a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d10c:	|      movea.l 16(sp),a0
    d110:	|      move.l 24(a0),d0
    d114:	|      move.l d0,-(sp)
    d116:	|      pea 7 <_start+0x7>
    d11a:	|      moveq #12,d0
    d11c:	|      add.l sp,d0
    d11e:	|      move.l d0,-(sp)
    d120:	|      jsr 100dc <getValueType>
    d126:	|      lea 12(sp),sp
    d12a:	|      tst.w d0
    d12c:	|  /-- bne.s d132 <builtIn_turnCharacter+0x5e>
    d12e:	|  |   moveq #1,d0
    d130:	+--|-- bra.s d170 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
    d132:	|  \-> moveq #24,d0
    d134:	|      add.l 16(sp),d0
    d138:	|      move.l d0,-(sp)
    d13a:	|      jsr 10a60 <trimStack>
    d140:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
    d142:	|      move.l (sp),d1
    d144:	|      move.l 4(sp),d0
    d148:	|      move.l d1,-(sp)
    d14a:	|      move.l d0,-(sp)
    d14c:	|      jsr 7a50 <turnPersonToFace>
    d152:	|      addq.l #8,sp
    d154:	|      movea.w d0,a0
    d156:	|      moveq #28,d0
    d158:	|      add.l 16(sp),d0
    d15c:	|      move.l a0,-(sp)
    d15e:	|      pea 1 <_start+0x1>
    d162:	|      move.l d0,-(sp)
    d164:	|      jsr 109ce <setVariable>
    d16a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d16e:	|      moveq #2,d0
}
    d170:	\----> addq.l #8,sp
    d172:	       rts

0000d174 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
    d174:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d176:	       movea.l 16(sp),a0
    d17a:	       move.l 24(a0),d0
    d17e:	       move.l d0,-(sp)
    d180:	       pea 1 <_start+0x1>
    d184:	       move.l sp,d0
    d186:	       addq.l #8,d0
    d188:	       move.l d0,-(sp)
    d18a:	       jsr 100dc <getValueType>
    d190:	       lea 12(sp),sp
    d194:	       tst.w d0
    d196:	   /-- bne.s d19c <builtIn_setCharacterExtra+0x28>
    d198:	   |   moveq #1,d0
    d19a:	/--|-- bra.s d210 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
    d19c:	|  \-> moveq #24,d0
    d19e:	|      add.l 16(sp),d0
    d1a2:	|      move.l d0,-(sp)
    d1a4:	|      jsr 10a60 <trimStack>
    d1aa:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d1ac:	|      movea.l 16(sp),a0
    d1b0:	|      move.l 24(a0),d0
    d1b4:	|      move.l d0,-(sp)
    d1b6:	|      pea 7 <_start+0x7>
    d1ba:	|      moveq #12,d0
    d1bc:	|      add.l sp,d0
    d1be:	|      move.l d0,-(sp)
    d1c0:	|      jsr 100dc <getValueType>
    d1c6:	|      lea 12(sp),sp
    d1ca:	|      tst.w d0
    d1cc:	|  /-- bne.s d1d2 <builtIn_setCharacterExtra+0x5e>
    d1ce:	|  |   moveq #1,d0
    d1d0:	+--|-- bra.s d210 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
    d1d2:	|  \-> moveq #24,d0
    d1d4:	|      add.l 16(sp),d0
    d1d8:	|      move.l d0,-(sp)
    d1da:	|      jsr 10a60 <trimStack>
    d1e0:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
    d1e2:	|      move.l (sp),d1
    d1e4:	|      move.l 4(sp),d0
    d1e8:	|      move.l d1,-(sp)
    d1ea:	|      move.l d0,-(sp)
    d1ec:	|      jsr 77da <setPersonExtra>
    d1f2:	|      addq.l #8,sp
    d1f4:	|      movea.w d0,a0
    d1f6:	|      moveq #28,d0
    d1f8:	|      add.l 16(sp),d0
    d1fc:	|      move.l a0,-(sp)
    d1fe:	|      pea 1 <_start+0x1>
    d202:	|      move.l d0,-(sp)
    d204:	|      jsr 109ce <setVariable>
    d20a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d20e:	|      moveq #2,d0
}
    d210:	\----> addq.l #8,sp
    d212:	       rts

0000d214 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{
    d214:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d216:	       movea.l 12(sp),a0
    d21a:	       move.l 24(a0),d0
    d21e:	       move.l d0,-(sp)
    d220:	       pea 7 <_start+0x7>
    d224:	       move.l sp,d0
    d226:	       addq.l #8,d0
    d228:	       move.l d0,-(sp)
    d22a:	       jsr 100dc <getValueType>
    d230:	       lea 12(sp),sp
    d234:	       tst.w d0
    d236:	   /-- bne.s d23c <builtIn_removeCharacter+0x28>
    d238:	   |   moveq #1,d0
    d23a:	/--|-- bra.s d25a <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
    d23c:	|  \-> moveq #24,d0
    d23e:	|      add.l 12(sp),d0
    d242:	|      move.l d0,-(sp)
    d244:	|      jsr 10a60 <trimStack>
    d24a:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
    d24c:	|      move.l (sp),d0
    d24e:	|      move.l d0,-(sp)
    d250:	|      jsr 6afe <removeOneCharacter>
    d256:	|      addq.l #4,sp
	return BR_CONTINUE;
    d258:	|      moveq #2,d0
}
    d25a:	\----> addq.l #4,sp
    d25c:	       rts

0000d25e <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
    d25e:	                lea -28(sp),sp
    d262:	                move.l d2,-(sp)
    d264:	                move.l 44(sp),d1
    d268:	                move.l 48(sp),d0
    d26c:	                move.w d1,d1
    d26e:	                move.w d1,6(sp)
    d272:	                move.w d0,d0
    d274:	                move.w d0,4(sp)
	switch (numParams) {
    d278:	                moveq #2,d0
    d27a:	                cmp.l 36(sp),d0
    d27e:	      /-------- beq.w d3c0 <moveChr+0x162>
    d282:	      |         moveq #3,d0
    d284:	      |         cmp.l 36(sp),d0
    d288:	/-----|-------- bne.w d4f4 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d28c:	|     |         movea.l 40(sp),a0
    d290:	|     |         move.l 24(a0),d0
    d294:	|     |         move.l d0,-(sp)
    d296:	|     |         pea 1 <_start+0x1>
    d29a:	|     |         lea 20(sp),a0
    d29e:	|     |         move.l a0,-(sp)
    d2a0:	|     |         jsr 100dc <getValueType>
    d2a6:	|     |         lea 12(sp),sp
    d2aa:	|     |         tst.w d0
    d2ac:	|     |     /-- bne.s d2b4 <moveChr+0x56>
    d2ae:	|     |     |   moveq #1,d0
    d2b0:	|  /--|-----|-- bra.w d504 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    d2b4:	|  |  |     \-> moveq #24,d0
    d2b6:	|  |  |         add.l 40(sp),d0
    d2ba:	|  |  |         move.l d0,-(sp)
    d2bc:	|  |  |         jsr 10a60 <trimStack>
    d2c2:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d2c4:	|  |  |         movea.l 40(sp),a0
    d2c8:	|  |  |         move.l 24(a0),d0
    d2cc:	|  |  |         move.l d0,-(sp)
    d2ce:	|  |  |         pea 1 <_start+0x1>
    d2d2:	|  |  |         lea 24(sp),a0
    d2d6:	|  |  |         move.l a0,-(sp)
    d2d8:	|  |  |         jsr 100dc <getValueType>
    d2de:	|  |  |         lea 12(sp),sp
    d2e2:	|  |  |         tst.w d0
    d2e4:	|  |  |     /-- bne.s d2ec <moveChr+0x8e>
    d2e6:	|  |  |     |   moveq #1,d0
    d2e8:	|  +--|-----|-- bra.w d504 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    d2ec:	|  |  |     \-> moveq #24,d0
    d2ee:	|  |  |         add.l 40(sp),d0
    d2f2:	|  |  |         move.l d0,-(sp)
    d2f4:	|  |  |         jsr 10a60 <trimStack>
    d2fa:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d2fc:	|  |  |         movea.l 40(sp),a0
    d300:	|  |  |         move.l 24(a0),d0
    d304:	|  |  |         move.l d0,-(sp)
    d306:	|  |  |         pea 7 <_start+0x7>
    d30a:	|  |  |         lea 16(sp),a0
    d30e:	|  |  |         move.l a0,-(sp)
    d310:	|  |  |         jsr 100dc <getValueType>
    d316:	|  |  |         lea 12(sp),sp
    d31a:	|  |  |         tst.w d0
    d31c:	|  |  |     /-- bne.s d324 <moveChr+0xc6>
    d31e:	|  |  |     |   moveq #1,d0
    d320:	|  +--|-----|-- bra.w d504 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    d324:	|  |  |     \-> moveq #24,d0
    d326:	|  |  |         add.l 40(sp),d0
    d32a:	|  |  |         move.l d0,-(sp)
    d32c:	|  |  |         jsr 10a60 <trimStack>
    d332:	|  |  |         addq.l #4,sp

			if (force) {
    d334:	|  |  |         tst.w 6(sp)
    d338:	|  |  |     /-- beq.s d368 <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    d33a:	|  |  |     |   movea.l 8(sp),a0
    d33e:	|  |  |     |   move.l 12(sp),d1
    d342:	|  |  |     |   move.l 16(sp),d0
    d346:	|  |  |     |   pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffc37f9>
    d34a:	|  |  |     |   move.l 44(sp),-(sp)
    d34e:	|  |  |     |   move.l a0,-(sp)
    d350:	|  |  |     |   move.l d1,-(sp)
    d352:	|  |  |     |   move.l d0,-(sp)
    d354:	|  |  |     |   jsr 638a <forceWalkingPerson>
    d35a:	|  |  |     |   lea 20(sp),sp
    d35e:	|  |  |     |   tst.w d0
    d360:	|  |  |  /--|-- beq.s d3ba <moveChr+0x15c>
    d362:	|  |  |  |  |   moveq #3,d0
    d364:	|  +--|--|--|-- bra.w d504 <moveChr+0x2a6>
			} else if (immediate) {
    d368:	|  |  |  |  \-> tst.w 4(sp)
    d36c:	|  |  |  |  /-- beq.s d38c <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
    d36e:	|  |  |  |  |   movea.l 8(sp),a0
    d372:	|  |  |  |  |   move.l 12(sp),d1
    d376:	|  |  |  |  |   move.l 16(sp),d0
    d37a:	|  |  |  |  |   move.l a0,-(sp)
    d37c:	|  |  |  |  |   move.l d1,-(sp)
    d37e:	|  |  |  |  |   move.l d0,-(sp)
    d380:	|  |  |  |  |   jsr 6692 <jumpPerson>
    d386:	|  |  |  |  |   lea 12(sp),sp
    d38a:	|  |  |  +--|-- bra.s d3ba <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    d38c:	|  |  |  |  \-> movea.l 8(sp),a0
    d390:	|  |  |  |      move.l 12(sp),d1
    d394:	|  |  |  |      move.l 16(sp),d0
    d398:	|  |  |  |      pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffc37f9>
    d39c:	|  |  |  |      move.l 44(sp),-(sp)
    d3a0:	|  |  |  |      move.l a0,-(sp)
    d3a2:	|  |  |  |      move.l d1,-(sp)
    d3a4:	|  |  |  |      move.l d0,-(sp)
    d3a6:	|  |  |  |      jsr 6862 <makeWalkingPerson>
    d3ac:	|  |  |  |      lea 20(sp),sp
    d3b0:	|  |  |  |      tst.w d0
    d3b2:	|  |  |  +----- beq.s d3ba <moveChr+0x15c>
    d3b4:	|  |  |  |      moveq #3,d0
    d3b6:	|  +--|--|----- bra.w d504 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
    d3ba:	|  |  |  \----> moveq #2,d0
    d3bc:	|  +--|-------- bra.w d504 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d3c0:	|  |  \-------> movea.l 40(sp),a0
    d3c4:	|  |            move.l 24(a0),d0
    d3c8:	|  |            move.l d0,-(sp)
    d3ca:	|  |            pea 7 <_start+0x7>
    d3ce:	|  |            moveq #32,d0
    d3d0:	|  |            add.l sp,d0
    d3d2:	|  |            move.l d0,-(sp)
    d3d4:	|  |            jsr 100dc <getValueType>
    d3da:	|  |            lea 12(sp),sp
    d3de:	|  |            tst.w d0
    d3e0:	|  |        /-- bne.s d3e8 <moveChr+0x18a>
    d3e2:	|  |        |   moveq #1,d0
    d3e4:	|  +--------|-- bra.w d504 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    d3e8:	|  |        \-> moveq #24,d0
    d3ea:	|  |            add.l 40(sp),d0
    d3ee:	|  |            move.l d0,-(sp)
    d3f0:	|  |            jsr 10a60 <trimStack>
    d3f6:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d3f8:	|  |            movea.l 40(sp),a0
    d3fc:	|  |            move.l 24(a0),d0
    d400:	|  |            move.l d0,-(sp)
    d402:	|  |            pea 7 <_start+0x7>
    d406:	|  |            lea 28(sp),a0
    d40a:	|  |            move.l a0,-(sp)
    d40c:	|  |            jsr 100dc <getValueType>
    d412:	|  |            lea 12(sp),sp
    d416:	|  |            tst.w d0
    d418:	|  |        /-- bne.s d420 <moveChr+0x1c2>
    d41a:	|  |        |   moveq #1,d0
    d41c:	|  +--------|-- bra.w d504 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    d420:	|  |        \-> moveq #24,d0
    d422:	|  |            add.l 40(sp),d0
    d426:	|  |            move.l d0,-(sp)
    d428:	|  |            jsr 10a60 <trimStack>
    d42e:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
    d430:	|  |            move.l 24(sp),d0
    d434:	|  |            move.l d0,-(sp)
    d436:	|  |            jsr 10ba6 <getRegionForObject>
    d43c:	|  |            addq.l #4,sp
    d43e:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
    d442:	|  |        /-- bne.s d44a <moveChr+0x1ec>
    d444:	|  |        |   moveq #2,d0
    d446:	|  +--------|-- bra.w d504 <moveChr+0x2a6>

			if (force)
    d44a:	|  |        \-> tst.w 6(sp)
    d44e:	|  |        /-- beq.s d48a <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
    d450:	|  |        |   movea.l 28(sp),a0
    d454:	|  |        |   move.l 24(a0),d2
    d458:	|  |        |   movea.l 20(sp),a1
    d45c:	|  |        |   movea.l 28(sp),a0
    d460:	|  |        |   move.l 20(a0),d1
    d464:	|  |        |   movea.l 28(sp),a0
    d468:	|  |        |   move.l 16(a0),d0
    d46c:	|  |        |   move.l d2,-(sp)
    d46e:	|  |        |   move.l 44(sp),-(sp)
    d472:	|  |        |   move.l a1,-(sp)
    d474:	|  |        |   move.l d1,-(sp)
    d476:	|  |        |   move.l d0,-(sp)
    d478:	|  |        |   jsr 638a <forceWalkingPerson>
    d47e:	|  |        |   lea 20(sp),sp
    d482:	|  |        |   tst.w d0
    d484:	|  |     /--|-- beq.s d4f0 <moveChr+0x292>
    d486:	|  |     |  |   moveq #3,d0
    d488:	|  +-----|--|-- bra.s d504 <moveChr+0x2a6>
			}
			else if (immediate)
    d48a:	|  |     |  \-> tst.w 4(sp)
    d48e:	|  |     |  /-- beq.s d4b6 <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
    d490:	|  |     |  |   movea.l 20(sp),a1
    d494:	|  |     |  |   movea.l 28(sp),a0
    d498:	|  |     |  |   move.l 20(a0),d1
    d49c:	|  |     |  |   movea.l 28(sp),a0
    d4a0:	|  |     |  |   move.l 16(a0),d0
    d4a4:	|  |     |  |   move.l a1,-(sp)
    d4a6:	|  |     |  |   move.l d1,-(sp)
    d4a8:	|  |     |  |   move.l d0,-(sp)
    d4aa:	|  |     |  |   jsr 6692 <jumpPerson>
    d4b0:	|  |     |  |   lea 12(sp),sp
    d4b4:	|  |     +--|-- bra.s d4f0 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
    d4b6:	|  |     |  \-> movea.l 28(sp),a0
    d4ba:	|  |     |      move.l 24(a0),d2
    d4be:	|  |     |      movea.l 20(sp),a1
    d4c2:	|  |     |      movea.l 28(sp),a0
    d4c6:	|  |     |      move.l 20(a0),d1
    d4ca:	|  |     |      movea.l 28(sp),a0
    d4ce:	|  |     |      move.l 16(a0),d0
    d4d2:	|  |     |      move.l d2,-(sp)
    d4d4:	|  |     |      move.l 44(sp),-(sp)
    d4d8:	|  |     |      move.l a1,-(sp)
    d4da:	|  |     |      move.l d1,-(sp)
    d4dc:	|  |     |      move.l d0,-(sp)
    d4de:	|  |     |      jsr 6862 <makeWalkingPerson>
    d4e4:	|  |     |      lea 20(sp),sp
    d4e8:	|  |     |      tst.w d0
    d4ea:	|  |     +----- beq.s d4f0 <moveChr+0x292>
    d4ec:	|  |     |      moveq #3,d0
    d4ee:	|  +-----|----- bra.s d504 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
    d4f0:	|  |     \----> moveq #2,d0
    d4f2:	|  +----------- bra.s d504 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
    d4f4:	\--|----------> pea 15ac6 <zbuffer.c.4facf542+0x389>
    d4fa:	   |            jsr 12130 <KPrintF>
    d500:	   |            addq.l #4,sp
			return BR_ERROR;
    d502:	   |            moveq #1,d0
	}
}
    d504:	   \----------> move.l (sp)+,d2
    d506:	                lea 28(sp),sp
    d50a:	                rts

0000d50c <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
    d50c:	clr.l -(sp)
    d50e:	clr.l -(sp)
    d510:	move.l 16(sp),-(sp)
    d514:	move.l 16(sp),-(sp)
    d518:	jsr d25e <moveChr>
    d51e:	lea 16(sp),sp
}
    d522:	rts

0000d524 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
    d524:	clr.l -(sp)
    d526:	pea 1 <_start+0x1>
    d52a:	move.l 16(sp),-(sp)
    d52e:	move.l 16(sp),-(sp)
    d532:	jsr d25e <moveChr>
    d538:	lea 16(sp),sp
}
    d53c:	rts

0000d53e <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
    d53e:	pea 1 <_start+0x1>
    d542:	clr.l -(sp)
    d544:	move.l 16(sp),-(sp)
    d548:	move.l 16(sp),-(sp)
    d54c:	jsr d25e <moveChr>
    d552:	lea 16(sp),sp
}
    d556:	rts

0000d558 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
    d558:	jsr 4710 <clearStatusBar>
	return BR_CONTINUE;
    d55e:	moveq #2,d0
}
    d560:	rts

0000d562 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
    d562:	jsr 47b8 <killLastStatus>
	return BR_CONTINUE;
    d568:	moveq #2,d0
}
    d56a:	rts

0000d56c <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
    d56c:	jsr 46a6 <addStatusBar>
	return BR_CONTINUE;
    d572:	moveq #2,d0
}
    d574:	rts

0000d576 <builtIn_statusText>:

builtIn(statusText)
{
    d576:	       subq.l #8,sp
    d578:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    d57a:	       movea.l 20(sp),a0
    d57e:	       move.l 24(a0),d0
    d582:	       move.l d0,-(sp)
    d584:	       jsr 106b2 <getTextFromAnyVar>
    d58a:	       addq.l #4,sp
    d58c:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
    d590:	   /-- bne.s d596 <builtIn_statusText+0x20>
    d592:	   |   moveq #1,d0
    d594:	/--|-- bra.s d5ca <builtIn_statusText+0x54>
	trimStack(&fun->stack);
    d596:	|  \-> moveq #24,d0
    d598:	|      add.l 20(sp),d0
    d59c:	|      move.l d0,-(sp)
    d59e:	|      jsr 10a60 <trimStack>
    d5a4:	|      addq.l #4,sp
	setStatusBar(newText);
    d5a6:	|      move.l 8(sp),-(sp)
    d5aa:	|      jsr 4a38 <setStatusBar>
    d5b0:	|      addq.l #4,sp
	FreeVec(newText);
    d5b2:	|      move.l 8(sp),4(sp)
    d5b8:	|      move.l 19b8e <SysBase>,d0
    d5be:	|      movea.l d0,a6
    d5c0:	|      movea.l 4(sp),a1
    d5c4:	|      jsr -690(a6)
	return BR_CONTINUE;
    d5c8:	|      moveq #2,d0
}
    d5ca:	\----> movea.l (sp)+,a6
    d5cc:	       addq.l #8,sp
    d5ce:	       rts

0000d5d0 <builtIn_lightStatus>:

builtIn(lightStatus)
{
    d5d0:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d5d2:	       movea.l 12(sp),a0
    d5d6:	       move.l 24(a0),d0
    d5da:	       move.l d0,-(sp)
    d5dc:	       pea 1 <_start+0x1>
    d5e0:	       move.l sp,d0
    d5e2:	       addq.l #8,d0
    d5e4:	       move.l d0,-(sp)
    d5e6:	       jsr 100dc <getValueType>
    d5ec:	       lea 12(sp),sp
    d5f0:	       tst.w d0
    d5f2:	   /-- bne.s d5f8 <builtIn_lightStatus+0x28>
    d5f4:	   |   moveq #1,d0
    d5f6:	/--|-- bra.s d616 <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
    d5f8:	|  \-> moveq #24,d0
    d5fa:	|      add.l 12(sp),d0
    d5fe:	|      move.l d0,-(sp)
    d600:	|      jsr 10a60 <trimStack>
    d606:	|      addq.l #4,sp
	setLitStatus (val);
    d608:	|      move.l (sp),d0
    d60a:	|      move.l d0,-(sp)
    d60c:	|      jsr 4a28 <setLitStatus>
    d612:	|      addq.l #4,sp
	return BR_CONTINUE;
    d614:	|      moveq #2,d0
}
    d616:	\----> addq.l #4,sp
    d618:	       rts

0000d61a <builtIn_positionStatus>:

builtIn(positionStatus)
{
    d61a:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d61c:	       movea.l 16(sp),a0
    d620:	       move.l 24(a0),d0
    d624:	       move.l d0,-(sp)
    d626:	       pea 1 <_start+0x1>
    d62a:	       move.l sp,d0
    d62c:	       addq.l #8,d0
    d62e:	       move.l d0,-(sp)
    d630:	       jsr 100dc <getValueType>
    d636:	       lea 12(sp),sp
    d63a:	       tst.w d0
    d63c:	   /-- bne.s d642 <builtIn_positionStatus+0x28>
    d63e:	   |   moveq #1,d0
    d640:	/--|-- bra.s d69c <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
    d642:	|  \-> moveq #24,d0
    d644:	|      add.l 16(sp),d0
    d648:	|      move.l d0,-(sp)
    d64a:	|      jsr 10a60 <trimStack>
    d650:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d652:	|      movea.l 16(sp),a0
    d656:	|      move.l 24(a0),d0
    d65a:	|      move.l d0,-(sp)
    d65c:	|      pea 1 <_start+0x1>
    d660:	|      moveq #12,d0
    d662:	|      add.l sp,d0
    d664:	|      move.l d0,-(sp)
    d666:	|      jsr 100dc <getValueType>
    d66c:	|      lea 12(sp),sp
    d670:	|      tst.w d0
    d672:	|  /-- bne.s d678 <builtIn_positionStatus+0x5e>
    d674:	|  |   moveq #1,d0
    d676:	+--|-- bra.s d69c <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
    d678:	|  \-> moveq #24,d0
    d67a:	|      add.l 16(sp),d0
    d67e:	|      move.l d0,-(sp)
    d680:	|      jsr 10a60 <trimStack>
    d686:	|      addq.l #4,sp
	positionStatus (x, y);
    d688:	|      move.l (sp),d1
    d68a:	|      move.l 4(sp),d0
    d68e:	|      move.l d1,-(sp)
    d690:	|      move.l d0,-(sp)
    d692:	|      jsr 481a <positionStatus>
    d698:	|      addq.l #8,sp
	return BR_CONTINUE;
    d69a:	|      moveq #2,d0
}
    d69c:	\----> addq.l #8,sp
    d69e:	       rts

0000d6a0 <builtIn_alignStatus>:

builtIn(alignStatus)
{
    d6a0:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d6a2:	       movea.l 12(sp),a0
    d6a6:	       move.l 24(a0),d0
    d6aa:	       move.l d0,-(sp)
    d6ac:	       pea 1 <_start+0x1>
    d6b0:	       move.l sp,d0
    d6b2:	       addq.l #8,d0
    d6b4:	       move.l d0,-(sp)
    d6b6:	       jsr 100dc <getValueType>
    d6bc:	       lea 12(sp),sp
    d6c0:	       tst.w d0
    d6c2:	   /-- bne.s d6c8 <builtIn_alignStatus+0x28>
    d6c4:	   |   moveq #1,d0
    d6c6:	/--|-- bra.s d6e8 <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
    d6c8:	|  \-> moveq #24,d0
    d6ca:	|      add.l 12(sp),d0
    d6ce:	|      move.l d0,-(sp)
    d6d0:	|      jsr 10a60 <trimStack>
    d6d6:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
    d6d8:	|      move.l (sp),d0
    d6da:	|      movea.l 18080 <nowStatus>,a0
    d6e0:	|      move.l d0,d0
    d6e2:	|      move.w d0,4(a0)
	return BR_CONTINUE;
    d6e6:	|      moveq #2,d0
}
    d6e8:	\----> addq.l #4,sp
    d6ea:	       rts

0000d6ec <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
    d6ec:	             tst.l 4(sp)
    d6f0:	      /----- beq.s d6fc <getFuncNumForCallback+0x10>
    d6f2:	      |      moveq #1,d0
    d6f4:	      |      cmp.l 4(sp),d0
    d6f8:	      |  /-- beq.s d702 <getFuncNumForCallback+0x16>
    d6fa:	   /--|--|-- bra.s d738 <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
    d6fc:	   |  \--|-> clr.l 12(sp)
			break;
    d700:	/--|-----|-- bra.s d74a <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
    d702:	|  |     \-> movea.l 8(sp),a0
    d706:	|  |         move.l 24(a0),d0
    d70a:	|  |         move.l d0,-(sp)
    d70c:	|  |         pea 2 <_start+0x2>
    d710:	|  |         move.l 20(sp),-(sp)
    d714:	|  |         jsr 100dc <getValueType>
    d71a:	|  |         lea 12(sp),sp
    d71e:	|  |         tst.w d0
    d720:	|  |     /-- bne.s d726 <getFuncNumForCallback+0x3a>
    d722:	|  |     |   clr.w d0
    d724:	|  |  /--|-- bra.s d74c <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
    d726:	|  |  |  \-> moveq #24,d0
    d728:	|  |  |      add.l 8(sp),d0
    d72c:	|  |  |      move.l d0,-(sp)
    d72e:	|  |  |      jsr 10a60 <trimStack>
    d734:	|  |  |      addq.l #4,sp
			break;
    d736:	+--|--|----- bra.s d74a <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
    d738:	|  \--|----> pea 15afc <zbuffer.c.4facf542+0x3bf>
    d73e:	|     |      jsr 12130 <KPrintF>
    d744:	|     |      addq.l #4,sp
			return FALSE;
    d746:	|     |      clr.w d0
    d748:	|     +----- bra.s d74c <getFuncNumForCallback+0x60>
	}
	return TRUE;
    d74a:	\-----|----> moveq #1,d0
}
    d74c:	      \----> rts

0000d74e <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
    d74e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d750:	       move.l sp,d0
    d752:	       move.l d0,-(sp)
    d754:	       move.l 16(sp),-(sp)
    d758:	       move.l 16(sp),-(sp)
    d75c:	       jsr d6ec <getFuncNumForCallback>
    d762:	       lea 12(sp),sp
    d766:	       tst.w d0
    d768:	/----- beq.s d778 <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
    d76a:	|      movea.l 1806a <currentEvents>,a0
    d770:	|      move.l (sp),d0
    d772:	|      move.l d0,(a0)
		return BR_CONTINUE;
    d774:	|      moveq #2,d0
    d776:	|  /-- bra.s d77a <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
    d778:	\--|-> moveq #1,d0
}
    d77a:	   \-> addq.l #4,sp
    d77c:	       rts

0000d77e <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
    d77e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d780:	       move.l sp,d0
    d782:	       move.l d0,-(sp)
    d784:	       move.l 16(sp),-(sp)
    d788:	       move.l 16(sp),-(sp)
    d78c:	       jsr d6ec <getFuncNumForCallback>
    d792:	       lea 12(sp),sp
    d796:	       tst.w d0
    d798:	/----- beq.s d7aa <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
    d79a:	|      movea.l 1806a <currentEvents>,a0
    d7a0:	|      move.l (sp),d0
    d7a2:	|      move.l d0,4(a0)
		return BR_CONTINUE;
    d7a6:	|      moveq #2,d0
    d7a8:	|  /-- bra.s d7ac <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
    d7aa:	\--|-> moveq #1,d0
}
    d7ac:	   \-> addq.l #4,sp
    d7ae:	       rts

0000d7b0 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
    d7b0:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d7b2:	       move.l sp,d0
    d7b4:	       move.l d0,-(sp)
    d7b6:	       move.l 16(sp),-(sp)
    d7ba:	       move.l 16(sp),-(sp)
    d7be:	       jsr d6ec <getFuncNumForCallback>
    d7c4:	       lea 12(sp),sp
    d7c8:	       tst.w d0
    d7ca:	/----- beq.s d7dc <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
    d7cc:	|      movea.l 1806a <currentEvents>,a0
    d7d2:	|      move.l (sp),d0
    d7d4:	|      move.l d0,8(a0)
		return BR_CONTINUE;
    d7d8:	|      moveq #2,d0
    d7da:	|  /-- bra.s d7de <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
    d7dc:	\--|-> moveq #1,d0
}
    d7de:	   \-> addq.l #4,sp
    d7e0:	       rts

0000d7e2 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
    d7e2:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d7e4:	       move.l sp,d0
    d7e6:	       move.l d0,-(sp)
    d7e8:	       move.l 16(sp),-(sp)
    d7ec:	       move.l 16(sp),-(sp)
    d7f0:	       jsr d6ec <getFuncNumForCallback>
    d7f6:	       lea 12(sp),sp
    d7fa:	       tst.w d0
    d7fc:	/----- beq.s d80e <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
    d7fe:	|      movea.l 1806a <currentEvents>,a0
    d804:	|      move.l (sp),d0
    d806:	|      move.l d0,12(a0)
		return BR_CONTINUE;
    d80a:	|      moveq #2,d0
    d80c:	|  /-- bra.s d810 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
    d80e:	\--|-> moveq #1,d0
}
    d810:	   \-> addq.l #4,sp
    d812:	       rts

0000d814 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
    d814:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d816:	       move.l sp,d0
    d818:	       move.l d0,-(sp)
    d81a:	       move.l 16(sp),-(sp)
    d81e:	       move.l 16(sp),-(sp)
    d822:	       jsr d6ec <getFuncNumForCallback>
    d828:	       lea 12(sp),sp
    d82c:	       tst.w d0
    d82e:	/----- beq.s d840 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
    d830:	|      movea.l 1806a <currentEvents>,a0
    d836:	|      move.l (sp),d0
    d838:	|      move.l d0,20(a0)
		return BR_CONTINUE;
    d83c:	|      moveq #2,d0
    d83e:	|  /-- bra.s d842 <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
    d840:	\--|-> moveq #1,d0
}
    d842:	   \-> addq.l #4,sp
    d844:	       rts

0000d846 <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
    d846:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d848:	       move.l sp,d0
    d84a:	       move.l d0,-(sp)
    d84c:	       move.l 16(sp),-(sp)
    d850:	       move.l 16(sp),-(sp)
    d854:	       jsr d6ec <getFuncNumForCallback>
    d85a:	       lea 12(sp),sp
    d85e:	       tst.w d0
    d860:	/----- beq.s d872 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
    d862:	|      movea.l 1806a <currentEvents>,a0
    d868:	|      move.l (sp),d0
    d86a:	|      move.l d0,16(a0)
		return BR_CONTINUE;
    d86e:	|      moveq #2,d0
    d870:	|  /-- bra.s d874 <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
    d872:	\--|-> moveq #1,d0
}
    d874:	   \-> addq.l #4,sp
    d876:	       rts

0000d878 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
    d878:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d87a:	       move.l sp,d0
    d87c:	       move.l d0,-(sp)
    d87e:	       move.l 16(sp),-(sp)
    d882:	       move.l 16(sp),-(sp)
    d886:	       jsr d6ec <getFuncNumForCallback>
    d88c:	       lea 12(sp),sp
    d890:	       tst.w d0
    d892:	/----- beq.s d8a4 <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
    d894:	|      movea.l 1806a <currentEvents>,a0
    d89a:	|      move.l (sp),d0
    d89c:	|      move.l d0,24(a0)
		return BR_CONTINUE;
    d8a0:	|      moveq #2,d0
    d8a2:	|  /-- bra.s d8a6 <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
    d8a4:	\--|-> moveq #1,d0
}
    d8a6:	   \-> addq.l #4,sp
    d8a8:	       rts

0000d8aa <builtIn_spawnSub>:

builtIn (spawnSub)
{
    d8aa:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d8ac:	          move.l sp,d0
    d8ae:	          move.l d0,-(sp)
    d8b0:	          move.l 16(sp),-(sp)
    d8b4:	          move.l 16(sp),-(sp)
    d8b8:	          jsr d6ec <getFuncNumForCallback>
    d8be:	          lea 12(sp),sp
    d8c2:	          tst.w d0
    d8c4:	/-------- beq.s d8f0 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
    d8c6:	|         move.l 19b5e <noStack>,d1
    d8cc:	|         move.l (sp),d0
    d8ce:	|         pea 1 <_start+0x1>
    d8d2:	|         move.l d1,-(sp)
    d8d4:	|         clr.l -(sp)
    d8d6:	|         clr.l -(sp)
    d8d8:	|         move.l d0,-(sp)
    d8da:	|         jsr 3c00 <startNewFunctionNum>
    d8e0:	|         lea 20(sp),sp
    d8e4:	|         tst.l d0
    d8e6:	|     /-- bne.s d8ec <builtIn_spawnSub+0x42>
    d8e8:	|     |   moveq #1,d0
    d8ea:	|  /--|-- bra.s d8f2 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
    d8ec:	|  |  \-> moveq #2,d0
    d8ee:	|  +----- bra.s d8f2 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
    d8f0:	\--|----> moveq #1,d0
}
    d8f2:	   \----> addq.l #4,sp
    d8f4:	          rts

0000d8f6 <builtIn_cancelSub>:

builtIn (cancelSub)
{
    d8f6:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d8f8:	          move.l sp,d0
    d8fa:	          addq.l #4,d0
    d8fc:	          move.l d0,-(sp)
    d8fe:	          move.l 20(sp),-(sp)
    d902:	          move.l 20(sp),-(sp)
    d906:	          jsr d6ec <getFuncNumForCallback>
    d90c:	          lea 12(sp),sp
    d910:	          tst.w d0
    d912:	/-------- beq.s d948 <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
    d914:	|         move.l 4(sp),d1
    d918:	|         move.l sp,d0
    d91a:	|         addq.l #2,d0
    d91c:	|         move.l d0,-(sp)
    d91e:	|         move.l 20(sp),-(sp)
    d922:	|         move.l d1,-(sp)
    d924:	|         jsr 1be8 <cancelAFunction>
    d92a:	|         lea 12(sp),sp
		if (killedMyself) {
    d92e:	|         move.w 2(sp),d0
    d932:	|  /----- beq.s d944 <builtIn_cancelSub+0x4e>
			abortFunction (fun);
    d934:	|  |      move.l 16(sp),-(sp)
    d938:	|  |      jsr 1b06 <abortFunction>
    d93e:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
    d940:	|  |      moveq #5,d0
    d942:	|  |  /-- bra.s d94a <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
    d944:	|  \--|-> moveq #2,d0
    d946:	|     +-- bra.s d94a <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
    d948:	\-----|-> moveq #1,d0
}
    d94a:	      \-> addq.l #8,sp
    d94c:	          rts

0000d94e <builtIn_stringWidth>:

builtIn(stringWidth)
{
    d94e:	       subq.l #8,sp
    d950:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
    d952:	       movea.l 20(sp),a0
    d956:	       move.l 24(a0),d0
    d95a:	       move.l d0,-(sp)
    d95c:	       jsr 106b2 <getTextFromAnyVar>
    d962:	       addq.l #4,sp
    d964:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
    d968:	   /-- bne.s d96e <builtIn_stringWidth+0x20>
    d96a:	   |   moveq #1,d0
    d96c:	/--|-- bra.s d9bc <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
    d96e:	|  \-> moveq #24,d0
    d970:	|      add.l 20(sp),d0
    d974:	|      move.l d0,-(sp)
    d976:	|      jsr 10a60 <trimStack>
    d97c:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
    d97e:	|      move.l 8(sp),-(sp)
    d982:	|      jsr 10aba <stringWidth>
    d988:	|      addq.l #4,sp
    d98a:	|      move.l d0,d1
    d98c:	|      moveq #28,d0
    d98e:	|      add.l 20(sp),d0
    d992:	|      move.l d1,-(sp)
    d994:	|      pea 1 <_start+0x1>
    d998:	|      move.l d0,-(sp)
    d99a:	|      jsr 109ce <setVariable>
    d9a0:	|      lea 12(sp),sp
	FreeVec(theText);
    d9a4:	|      move.l 8(sp),4(sp)
    d9aa:	|      move.l 19b8e <SysBase>,d0
    d9b0:	|      movea.l d0,a6
    d9b2:	|      movea.l 4(sp),a1
    d9b6:	|      jsr -690(a6)
	return BR_CONTINUE;
    d9ba:	|      moveq #2,d0
}
    d9bc:	\----> movea.l (sp)+,a6
    d9be:	       addq.l #8,sp
    d9c0:	       rts

0000d9c2 <builtIn_hardScroll>:

builtIn(hardScroll)
{
    d9c2:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d9c4:	       movea.l 12(sp),a0
    d9c8:	       move.l 24(a0),d0
    d9cc:	       move.l d0,-(sp)
    d9ce:	       pea 1 <_start+0x1>
    d9d2:	       move.l sp,d0
    d9d4:	       addq.l #8,d0
    d9d6:	       move.l d0,-(sp)
    d9d8:	       jsr 100dc <getValueType>
    d9de:	       lea 12(sp),sp
    d9e2:	       tst.w d0
    d9e4:	   /-- bne.s d9ea <builtIn_hardScroll+0x28>
    d9e6:	   |   moveq #1,d0
    d9e8:	/--|-- bra.s da08 <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
    d9ea:	|  \-> moveq #24,d0
    d9ec:	|      add.l 12(sp),d0
    d9f0:	|      move.l d0,-(sp)
    d9f2:	|      jsr 10a60 <trimStack>
    d9f8:	|      addq.l #4,sp
	hardScroll (v);
    d9fa:	|      move.l (sp),d0
    d9fc:	|      move.l d0,-(sp)
    d9fe:	|      jsr 8cf0 <hardScroll>
    da04:	|      addq.l #4,sp
	return BR_CONTINUE;
    da06:	|      moveq #2,d0
}
    da08:	\----> addq.l #4,sp
    da0a:	       rts

0000da0c <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
    da0c:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    da0e:	       movea.l 12(sp),a0
    da12:	       move.l 24(a0),d0
    da16:	       move.l d0,-(sp)
    da18:	       pea 7 <_start+0x7>
    da1c:	       move.l sp,d0
    da1e:	       addq.l #8,d0
    da20:	       move.l d0,-(sp)
    da22:	       jsr 100dc <getValueType>
    da28:	       lea 12(sp),sp
    da2c:	       tst.w d0
    da2e:	   /-- bne.s da34 <builtIn_isScreenRegion+0x28>
    da30:	   |   moveq #1,d0
    da32:	/--|-- bra.s da74 <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
    da34:	|  \-> moveq #24,d0
    da36:	|      add.l 12(sp),d0
    da3a:	|      move.l d0,-(sp)
    da3c:	|      jsr 10a60 <trimStack>
    da42:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
    da44:	|      move.l (sp),d0
    da46:	|      move.l d0,-(sp)
    da48:	|      jsr 10ba6 <getRegionForObject>
    da4e:	|      addq.l #4,sp
    da50:	|      tst.l d0
    da52:	|      sne d0
    da54:	|      neg.b d0
    da56:	|      moveq #0,d1
    da58:	|      move.b d0,d1
    da5a:	|      moveq #28,d0
    da5c:	|      add.l 12(sp),d0
    da60:	|      move.l d1,-(sp)
    da62:	|      pea 1 <_start+0x1>
    da66:	|      move.l d0,-(sp)
    da68:	|      jsr 109ce <setVariable>
    da6e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    da72:	|      moveq #2,d0
}
    da74:	\----> addq.l #4,sp
    da76:	       rts

0000da78 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
    da78:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    da7a:	       movea.l 12(sp),a0
    da7e:	       move.l 24(a0),d0
    da82:	       move.l d0,-(sp)
    da84:	       pea 1 <_start+0x1>
    da88:	       move.l sp,d0
    da8a:	       addq.l #8,d0
    da8c:	       move.l d0,-(sp)
    da8e:	       jsr 100dc <getValueType>
    da94:	       lea 12(sp),sp
    da98:	       tst.w d0
    da9a:	   /-- bne.s daa0 <builtIn_setSpeechSpeed+0x28>
    da9c:	   |   moveq #1,d0
    da9e:	/--|-- bra.s daee <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
    daa0:	|  \-> moveq #24,d0
    daa2:	|      add.l 12(sp),d0
    daa6:	|      move.l d0,-(sp)
    daa8:	|      jsr 10a60 <trimStack>
    daae:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
    dab0:	|      move.l (sp),d0
    dab2:	|      move.l d0,-(sp)
    dab4:	|      jsr 12588 <__floatsisf>
    daba:	|      addq.l #4,sp
    dabc:	|      move.l #1008981770,-(sp)
    dac2:	|      move.l d0,-(sp)
    dac4:	|      jsr 1263a <__mulsf3>
    daca:	|      addq.l #8,sp
    dacc:	|      move.l d0,18084 <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
    dad2:	|      moveq #28,d0
    dad4:	|      add.l 12(sp),d0
    dad8:	|      pea 1 <_start+0x1>
    dadc:	|      pea 1 <_start+0x1>
    dae0:	|      move.l d0,-(sp)
    dae2:	|      jsr 109ce <setVariable>
    dae8:	|      lea 12(sp),sp
	return BR_CONTINUE;
    daec:	|      moveq #2,d0
}
    daee:	\----> addq.l #4,sp
    daf0:	       rts

0000daf2 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
    daf2:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    daf4:	       movea.l 12(sp),a0
    daf8:	       move.l 24(a0),d0
    dafc:	       move.l d0,-(sp)
    dafe:	       pea 1 <_start+0x1>
    db02:	       move.l sp,d0
    db04:	       addq.l #8,d0
    db06:	       move.l d0,-(sp)
    db08:	       jsr 100dc <getValueType>
    db0e:	       lea 12(sp),sp
    db12:	       tst.w d0
    db14:	   /-- bne.s db1a <builtIn_setFontSpacing+0x28>
    db16:	   |   moveq #1,d0
    db18:	/--|-- bra.s db50 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
    db1a:	|  \-> move.l (sp),d0
    db1c:	|      move.l d0,d0
    db1e:	|      move.w d0,185fe <fontSpace>
	trimStack (&fun -> stack);
    db24:	|      moveq #24,d0
    db26:	|      add.l 12(sp),d0
    db2a:	|      move.l d0,-(sp)
    db2c:	|      jsr 10a60 <trimStack>
    db32:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    db34:	|      moveq #28,d0
    db36:	|      add.l 12(sp),d0
    db3a:	|      pea 1 <_start+0x1>
    db3e:	|      pea 1 <_start+0x1>
    db42:	|      move.l d0,-(sp)
    db44:	|      jsr 109ce <setVariable>
    db4a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    db4e:	|      moveq #2,d0
}
    db50:	\----> addq.l #4,sp
    db52:	       rts

0000db54 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
    db54:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    db56:	          movea.l 12(sp),a0
    db5a:	          move.l 24(a0),d0
    db5e:	          move.l d0,-(sp)
    db60:	          pea 1 <_start+0x1>
    db64:	          move.l sp,d0
    db66:	          addq.l #8,d0
    db68:	          move.l d0,-(sp)
    db6a:	          jsr 100dc <getValueType>
    db70:	          lea 12(sp),sp
    db74:	          tst.w d0
    db76:	      /-- bne.s db7c <builtIn_transitionLevel+0x28>
    db78:	      |   moveq #1,d0
    db7a:	/-----|-- bra.s dbd0 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
    db7c:	|     \-> moveq #24,d0
    db7e:	|         add.l 12(sp),d0
    db82:	|         move.l d0,-(sp)
    db84:	|         jsr 10a60 <trimStack>
    db8a:	|         addq.l #4,sp

	if (number < 0)
    db8c:	|         move.l (sp),d0
    db8e:	|     /-- bpl.s db98 <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
    db90:	|     |   clr.b 18068 <brightnessLevel>
    db96:	|  /--|-- bra.s dbb4 <builtIn_transitionLevel+0x60>
	else if (number > 255)
    db98:	|  |  \-> move.l (sp),d0
    db9a:	|  |      cmpi.l #255,d0
    dba0:	|  |  /-- ble.s dbaa <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
    dba2:	|  |  |   st 18068 <brightnessLevel>
    dba8:	|  +--|-- bra.s dbb4 <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
    dbaa:	|  |  \-> move.l (sp),d0
    dbac:	|  |      move.l d0,d0
    dbae:	|  |      move.b d0,18068 <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
    dbb4:	|  \----> moveq #28,d0
    dbb6:	|         add.l 12(sp),d0
    dbba:	|         pea 1 <_start+0x1>
    dbbe:	|         pea 1 <_start+0x1>
    dbc2:	|         move.l d0,-(sp)
    dbc4:	|         jsr 109ce <setVariable>
    dbca:	|         lea 12(sp),sp
	return BR_CONTINUE;
    dbce:	|         moveq #2,d0
}
    dbd0:	\-------> addq.l #4,sp
    dbd2:	          rts

0000dbd4 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
    dbd4:	movea.l 8(sp),a0
    dbd8:	move.l 24(a0),d0
    dbdc:	move.l d0,-(sp)
    dbde:	jsr 1061c <getBoolean>
    dbe4:	addq.l #4,sp
    dbe6:	move.w d0,19b32 <captureAllKeys>
	trimStack (&fun -> stack);
    dbec:	moveq #24,d0
    dbee:	add.l 8(sp),d0
    dbf2:	move.l d0,-(sp)
    dbf4:	jsr 10a60 <trimStack>
    dbfa:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
    dbfc:	move.w 19b32 <captureAllKeys>,d0
    dc02:	movea.w d0,a0
    dc04:	moveq #28,d0
    dc06:	add.l 8(sp),d0
    dc0a:	move.l a0,-(sp)
    dc0c:	pea 1 <_start+0x1>
    dc10:	move.l d0,-(sp)
    dc12:	jsr 109ce <setVariable>
    dc18:	lea 12(sp),sp
	return BR_CONTINUE;
    dc1c:	moveq #2,d0
}
    dc1e:	rts

0000dc20 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
    dc20:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dc24:	       movea.l 20(sp),a0
    dc28:	       move.l 24(a0),d0
    dc2c:	       move.l d0,-(sp)
    dc2e:	       pea 1 <_start+0x1>
    dc32:	       moveq #12,d0
    dc34:	       add.l sp,d0
    dc36:	       move.l d0,-(sp)
    dc38:	       jsr 100dc <getValueType>
    dc3e:	       lea 12(sp),sp
    dc42:	       tst.w d0
    dc44:	   /-- bne.s dc4c <builtIn_spinCharacter+0x2c>
    dc46:	   |   moveq #1,d0
    dc48:	/--|-- bra.w dcfc <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
    dc4c:	|  \-> moveq #24,d0
    dc4e:	|      add.l 20(sp),d0
    dc52:	|      move.l d0,-(sp)
    dc54:	|      jsr 10a60 <trimStack>
    dc5a:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dc5c:	|      movea.l 20(sp),a0
    dc60:	|      move.l 24(a0),d0
    dc64:	|      move.l d0,-(sp)
    dc66:	|      pea 7 <_start+0x7>
    dc6a:	|      lea 8(sp),a0
    dc6e:	|      move.l a0,-(sp)
    dc70:	|      jsr 100dc <getValueType>
    dc76:	|      lea 12(sp),sp
    dc7a:	|      tst.w d0
    dc7c:	|  /-- bne.s dc82 <builtIn_spinCharacter+0x62>
    dc7e:	|  |   moveq #1,d0
    dc80:	+--|-- bra.s dcfc <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
    dc82:	|  \-> moveq #24,d0
    dc84:	|      add.l 20(sp),d0
    dc88:	|      move.l d0,-(sp)
    dc8a:	|      jsr 10a60 <trimStack>
    dc90:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    dc92:	|      move.l (sp),d0
    dc94:	|      move.l d0,-(sp)
    dc96:	|      jsr 6338 <findPerson>
    dc9c:	|      addq.l #4,sp
    dc9e:	|      move.l d0,8(sp)
	if (thisPerson) {
    dca2:	|  /-- beq.s dce2 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
    dca4:	|  |   move.l 4(sp),d0
    dca8:	|  |   movea.l 8(sp),a0
    dcac:	|  |   move.l d0,84(a0)
		thisPerson -> spinning = TRUE;
    dcb0:	|  |   movea.l 8(sp),a0
    dcb4:	|  |   move.w #1,54(a0)
		thisPerson -> continueAfterWalking = fun;
    dcba:	|  |   movea.l 8(sp),a0
    dcbe:	|  |   move.l 20(sp),56(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    dcc4:	|  |   moveq #28,d0
    dcc6:	|  |   add.l 20(sp),d0
    dcca:	|  |   pea 1 <_start+0x1>
    dcce:	|  |   pea 1 <_start+0x1>
    dcd2:	|  |   move.l d0,-(sp)
    dcd4:	|  |   jsr 109ce <setVariable>
    dcda:	|  |   lea 12(sp),sp
		return BR_PAUSE;
    dcde:	|  |   moveq #3,d0
    dce0:	+--|-- bra.s dcfc <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    dce2:	|  \-> moveq #28,d0
    dce4:	|      add.l 20(sp),d0
    dce8:	|      clr.l -(sp)
    dcea:	|      pea 1 <_start+0x1>
    dcee:	|      move.l d0,-(sp)
    dcf0:	|      jsr 109ce <setVariable>
    dcf6:	|      lea 12(sp),sp
		return BR_CONTINUE;
    dcfa:	|      moveq #2,d0
	}
}
    dcfc:	\----> lea 12(sp),sp
    dd00:	       rts

0000dd02 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
    dd02:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dd04:	          movea.l 16(sp),a0
    dd08:	          move.l 24(a0),d0
    dd0c:	          move.l d0,-(sp)
    dd0e:	          pea 7 <_start+0x7>
    dd12:	          move.l sp,d0
    dd14:	          addq.l #8,d0
    dd16:	          move.l d0,-(sp)
    dd18:	          jsr 100dc <getValueType>
    dd1e:	          lea 12(sp),sp
    dd22:	          tst.w d0
    dd24:	      /-- bne.s dd2a <builtIn_getCharacterDirection+0x28>
    dd26:	      |   moveq #1,d0
    dd28:	/-----|-- bra.s dd88 <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
    dd2a:	|     \-> moveq #24,d0
    dd2c:	|         add.l 16(sp),d0
    dd30:	|         move.l d0,-(sp)
    dd32:	|         jsr 10a60 <trimStack>
    dd38:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    dd3a:	|         move.l (sp),d0
    dd3c:	|         move.l d0,-(sp)
    dd3e:	|         jsr 6338 <findPerson>
    dd44:	|         addq.l #4,sp
    dd46:	|         move.l d0,4(sp)
	if (thisPerson) {
    dd4a:	|  /----- beq.s dd6e <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
    dd4c:	|  |      movea.l 4(sp),a0
    dd50:	|  |      move.l 94(a0),d1
    dd54:	|  |      moveq #28,d0
    dd56:	|  |      add.l 16(sp),d0
    dd5a:	|  |      move.l d1,-(sp)
    dd5c:	|  |      pea 1 <_start+0x1>
    dd60:	|  |      move.l d0,-(sp)
    dd62:	|  |      jsr 109ce <setVariable>
    dd68:	|  |      lea 12(sp),sp
    dd6c:	|  |  /-- bra.s dd86 <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    dd6e:	|  \--|-> moveq #28,d0
    dd70:	|     |   add.l 16(sp),d0
    dd74:	|     |   clr.l -(sp)
    dd76:	|     |   pea 1 <_start+0x1>
    dd7a:	|     |   move.l d0,-(sp)
    dd7c:	|     |   jsr 109ce <setVariable>
    dd82:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    dd86:	|     \-> moveq #2,d0
}
    dd88:	\-------> addq.l #8,sp
    dd8a:	          rts

0000dd8c <builtIn_isCharacter>:

builtIn(isCharacter)
{
    dd8c:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dd8e:	       movea.l 16(sp),a0
    dd92:	       move.l 24(a0),d0
    dd96:	       move.l d0,-(sp)
    dd98:	       pea 7 <_start+0x7>
    dd9c:	       move.l sp,d0
    dd9e:	       addq.l #8,d0
    dda0:	       move.l d0,-(sp)
    dda2:	       jsr 100dc <getValueType>
    dda8:	       lea 12(sp),sp
    ddac:	       tst.w d0
    ddae:	   /-- bne.s ddb4 <builtIn_isCharacter+0x28>
    ddb0:	   |   moveq #1,d0
    ddb2:	/--|-- bra.s ddf6 <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
    ddb4:	|  \-> moveq #24,d0
    ddb6:	|      add.l 16(sp),d0
    ddba:	|      move.l d0,-(sp)
    ddbc:	|      jsr 10a60 <trimStack>
    ddc2:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    ddc4:	|      move.l (sp),d0
    ddc6:	|      move.l d0,-(sp)
    ddc8:	|      jsr 6338 <findPerson>
    ddce:	|      addq.l #4,sp
    ddd0:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
    ddd4:	|      sne d0
    ddd6:	|      neg.b d0
    ddd8:	|      moveq #0,d1
    ddda:	|      move.b d0,d1
    dddc:	|      moveq #28,d0
    ddde:	|      add.l 16(sp),d0
    dde2:	|      move.l d1,-(sp)
    dde4:	|      pea 1 <_start+0x1>
    dde8:	|      move.l d0,-(sp)
    ddea:	|      jsr 109ce <setVariable>
    ddf0:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ddf4:	|      moveq #2,d0
}
    ddf6:	\----> addq.l #8,sp
    ddf8:	       rts

0000ddfa <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
    ddfa:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ddfc:	          movea.l 16(sp),a0
    de00:	          move.l 24(a0),d0
    de04:	          move.l d0,-(sp)
    de06:	          pea 7 <_start+0x7>
    de0a:	          move.l sp,d0
    de0c:	          addq.l #8,d0
    de0e:	          move.l d0,-(sp)
    de10:	          jsr 100dc <getValueType>
    de16:	          lea 12(sp),sp
    de1a:	          tst.w d0
    de1c:	      /-- bne.s de22 <builtIn_normalCharacter+0x28>
    de1e:	      |   moveq #1,d0
    de20:	/-----|-- bra.s de9e <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
    de22:	|     \-> moveq #24,d0
    de24:	|         add.l 16(sp),d0
    de28:	|         move.l d0,-(sp)
    de2a:	|         jsr 10a60 <trimStack>
    de30:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    de32:	|         move.l (sp),d0
    de34:	|         move.l d0,-(sp)
    de36:	|         jsr 6338 <findPerson>
    de3c:	|         addq.l #4,sp
    de3e:	|         move.l d0,4(sp)
	if (thisPerson)
    de42:	|  /----- beq.s de84 <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
    de44:	|  |      movea.l 4(sp),a0
    de48:	|  |      movea.l 68(a0),a0
    de4c:	|  |      move.l (a0),d1
    de4e:	|  |      movea.l 4(sp),a0
    de52:	|  |      move.l 94(a0),d0
    de56:	|  |      add.l d0,d0
    de58:	|  |      add.l d0,d0
    de5a:	|  |      movea.l d1,a0
    de5c:	|  |      adda.l d0,a0
    de5e:	|  |      move.l (a0),d0
    de60:	|  |      movea.l 4(sp),a0
    de64:	|  |      move.l d0,60(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    de68:	|  |      moveq #28,d0
    de6a:	|  |      add.l 16(sp),d0
    de6e:	|  |      pea 1 <_start+0x1>
    de72:	|  |      pea 1 <_start+0x1>
    de76:	|  |      move.l d0,-(sp)
    de78:	|  |      jsr 109ce <setVariable>
    de7e:	|  |      lea 12(sp),sp
    de82:	|  |  /-- bra.s de9c <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    de84:	|  \--|-> moveq #28,d0
    de86:	|     |   add.l 16(sp),d0
    de8a:	|     |   clr.l -(sp)
    de8c:	|     |   pea 1 <_start+0x1>
    de90:	|     |   move.l d0,-(sp)
    de92:	|     |   jsr 109ce <setVariable>
    de98:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    de9c:	|     \-> moveq #2,d0
}
    de9e:	\-------> addq.l #8,sp
    dea0:	          rts

0000dea2 <builtIn_isMoving>:

builtIn(isMoving)
{
    dea2:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dea4:	          movea.l 16(sp),a0
    dea8:	          move.l 24(a0),d0
    deac:	          move.l d0,-(sp)
    deae:	          pea 7 <_start+0x7>
    deb2:	          move.l sp,d0
    deb4:	          addq.l #8,d0
    deb6:	          move.l d0,-(sp)
    deb8:	          jsr 100dc <getValueType>
    debe:	          lea 12(sp),sp
    dec2:	          tst.w d0
    dec4:	      /-- bne.s deca <builtIn_isMoving+0x28>
    dec6:	      |   moveq #1,d0
    dec8:	/-----|-- bra.s df2a <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
    deca:	|     \-> moveq #24,d0
    decc:	|         add.l 16(sp),d0
    ded0:	|         move.l d0,-(sp)
    ded2:	|         jsr 10a60 <trimStack>
    ded8:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    deda:	|         move.l (sp),d0
    dedc:	|         move.l d0,-(sp)
    dede:	|         jsr 6338 <findPerson>
    dee4:	|         addq.l #4,sp
    dee6:	|         move.l d0,4(sp)
	if (thisPerson)
    deea:	|  /----- beq.s df10 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
    deec:	|  |      movea.l 4(sp),a0
    def0:	|  |      move.w 52(a0),d0
    def4:	|  |      movea.w d0,a0
    def6:	|  |      moveq #28,d0
    def8:	|  |      add.l 16(sp),d0
    defc:	|  |      move.l a0,-(sp)
    defe:	|  |      pea 1 <_start+0x1>
    df02:	|  |      move.l d0,-(sp)
    df04:	|  |      jsr 109ce <setVariable>
    df0a:	|  |      lea 12(sp),sp
    df0e:	|  |  /-- bra.s df28 <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    df10:	|  \--|-> moveq #28,d0
    df12:	|     |   add.l 16(sp),d0
    df16:	|     |   clr.l -(sp)
    df18:	|     |   pea 1 <_start+0x1>
    df1c:	|     |   move.l d0,-(sp)
    df1e:	|     |   jsr 109ce <setVariable>
    df24:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    df28:	|     \-> moveq #2,d0
}
    df2a:	\-------> addq.l #8,sp
    df2c:	          rts

0000df2e <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
    df2e:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    df32:	          movea.l 20(sp),a0
    df36:	          move.l 24(a0),d0
    df3a:	          move.l d0,-(sp)
    df3c:	          pea 7 <_start+0x7>
    df40:	          lea 8(sp),a0
    df44:	          move.l a0,-(sp)
    df46:	          jsr 100dc <getValueType>
    df4c:	          lea 12(sp),sp
    df50:	          tst.w d0
    df52:	      /-- bne.s df5a <builtIn_fetchEvent+0x2c>
    df54:	      |   moveq #1,d0
    df56:	/-----|-- bra.w dfee <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
    df5a:	|     \-> moveq #24,d0
    df5c:	|         add.l 20(sp),d0
    df60:	|         move.l d0,-(sp)
    df62:	|         jsr 10a60 <trimStack>
    df68:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    df6a:	|         movea.l 20(sp),a0
    df6e:	|         move.l 24(a0),d0
    df72:	|         move.l d0,-(sp)
    df74:	|         pea 7 <_start+0x7>
    df78:	|         moveq #12,d0
    df7a:	|         add.l sp,d0
    df7c:	|         move.l d0,-(sp)
    df7e:	|         jsr 100dc <getValueType>
    df84:	|         lea 12(sp),sp
    df88:	|         tst.w d0
    df8a:	|     /-- bne.s df90 <builtIn_fetchEvent+0x62>
    df8c:	|     |   moveq #1,d0
    df8e:	+-----|-- bra.s dfee <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
    df90:	|     \-> moveq #24,d0
    df92:	|         add.l 20(sp),d0
    df96:	|         move.l d0,-(sp)
    df98:	|         jsr 10a60 <trimStack>
    df9e:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    dfa0:	|         move.l (sp),d1
    dfa2:	|         move.l 4(sp),d0
    dfa6:	|         move.l d1,-(sp)
    dfa8:	|         move.l d0,-(sp)
    dfaa:	|         jsr 8f62 <getCombinationFunction>
    dfb0:	|         addq.l #8,sp
    dfb2:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
    dfb6:	|  /----- beq.s dfd4 <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    dfb8:	|  |      moveq #28,d0
    dfba:	|  |      add.l 20(sp),d0
    dfbe:	|  |      move.l 8(sp),-(sp)
    dfc2:	|  |      pea 2 <_start+0x2>
    dfc6:	|  |      move.l d0,-(sp)
    dfc8:	|  |      jsr 109ce <setVariable>
    dfce:	|  |      lea 12(sp),sp
    dfd2:	|  |  /-- bra.s dfec <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    dfd4:	|  \--|-> moveq #28,d0
    dfd6:	|     |   add.l 20(sp),d0
    dfda:	|     |   clr.l -(sp)
    dfdc:	|     |   pea 1 <_start+0x1>
    dfe0:	|     |   move.l d0,-(sp)
    dfe2:	|     |   jsr 109ce <setVariable>
    dfe8:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    dfec:	|     \-> moveq #2,d0
}
    dfee:	\-------> lea 12(sp),sp
    dff2:	          rts

0000dff4 <builtIn_deleteFile>:

builtIn(deleteFile)
{
    dff4:	       lea -24(sp),sp
    dff8:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
    dffa:	       movea.l 36(sp),a0
    dffe:	       move.l 24(a0),d0
    e002:	       move.l d0,-(sp)
    e004:	       jsr 106b2 <getTextFromAnyVar>
    e00a:	       addq.l #4,sp
    e00c:	       move.l d0,24(sp)
    trimStack(&fun->stack);
    e010:	       moveq #24,d0
    e012:	       add.l 36(sp),d0
    e016:	       move.l d0,-(sp)
    e018:	       jsr 10a60 <trimStack>
    e01e:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
    e020:	       move.l 24(sp),-(sp)
    e024:	       jsr 2fe <encodeFilename>
    e02a:	       addq.l #4,sp
    e02c:	       move.l d0,20(sp)
    FreeVec(namNormal);
    e030:	       move.l 24(sp),16(sp)
    e036:	       move.l 19b8e <SysBase>,d0
    e03c:	       movea.l d0,a6
    e03e:	       movea.l 16(sp),a1
    e042:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
    e046:	       move.l 20(sp),-(sp)
    e04a:	       jsr 9d1a <failSecurityCheck>
    e050:	       addq.l #4,sp
    e052:	       tst.w d0
    e054:	   /-- beq.s e05a <builtIn_deleteFile+0x66>
    e056:	   |   moveq #1,d0
    e058:	/--|-- bra.s e0a8 <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
    e05a:	|  \-> move.l 20(sp),12(sp)
    e060:	|      move.l 19b96 <DOSBase>,d0
    e066:	|      movea.l d0,a6
    e068:	|      move.l 12(sp),d1
    e06c:	|      jsr -72(a6)
    e070:	|      move.l d0,8(sp)
    e074:	|      move.l 8(sp),d1
    e078:	|      moveq #28,d0
    e07a:	|      add.l 36(sp),d0
    e07e:	|      move.l d1,-(sp)
    e080:	|      pea 1 <_start+0x1>
    e084:	|      move.l d0,-(sp)
    e086:	|      jsr 109ce <setVariable>
    e08c:	|      lea 12(sp),sp
    FreeVec(nam);
    e090:	|      move.l 20(sp),4(sp)
    e096:	|      move.l 19b8e <SysBase>,d0
    e09c:	|      movea.l d0,a6
    e09e:	|      movea.l 4(sp),a1
    e0a2:	|      jsr -690(a6)

    return BR_CONTINUE;
    e0a6:	|      moveq #2,d0
}
    e0a8:	\----> movea.l (sp)+,a6
    e0aa:	       lea 24(sp),sp
    e0ae:	       rts

0000e0b0 <builtIn_renameFile>:

builtIn(renameFile)
{
    e0b0:	       lea -40(sp),sp
    e0b4:	       move.l a6,-(sp)
    e0b6:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
    e0b8:	       movea.l 56(sp),a0
    e0bc:	       move.l 24(a0),d0
    e0c0:	       move.l d0,-(sp)
    e0c2:	       jsr 106b2 <getTextFromAnyVar>
    e0c8:	       addq.l #4,sp
    e0ca:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
    e0ce:	       move.l 44(sp),-(sp)
    e0d2:	       jsr 2fe <encodeFilename>
    e0d8:	       addq.l #4,sp
    e0da:	       move.l d0,40(sp)
	trimStack(&fun->stack);
    e0de:	       moveq #24,d0
    e0e0:	       add.l 56(sp),d0
    e0e4:	       move.l d0,-(sp)
    e0e6:	       jsr 10a60 <trimStack>
    e0ec:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
    e0ee:	       move.l 40(sp),-(sp)
    e0f2:	       jsr 9d1a <failSecurityCheck>
    e0f8:	       addq.l #4,sp
    e0fa:	       tst.w d0
    e0fc:	   /-- beq.s e104 <builtIn_renameFile+0x54>
    e0fe:	   |   moveq #1,d0
    e100:	/--|-- bra.w e1ea <builtIn_renameFile+0x13a>
	FreeVec(temp);
    e104:	|  \-> move.l 44(sp),36(sp)
    e10a:	|      move.l 19b8e <SysBase>,d0
    e110:	|      movea.l d0,a6
    e112:	|      movea.l 36(sp),a1
    e116:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
    e11a:	|      movea.l 56(sp),a0
    e11e:	|      move.l 24(a0),d0
    e122:	|      move.l d0,-(sp)
    e124:	|      jsr 106b2 <getTextFromAnyVar>
    e12a:	|      addq.l #4,sp
    e12c:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
    e130:	|      move.l 44(sp),-(sp)
    e134:	|      jsr 2fe <encodeFilename>
    e13a:	|      addq.l #4,sp
    e13c:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
    e140:	|      moveq #24,d0
    e142:	|      add.l 56(sp),d0
    e146:	|      move.l d0,-(sp)
    e148:	|      jsr 10a60 <trimStack>
    e14e:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
    e150:	|      move.l 32(sp),-(sp)
    e154:	|      jsr 9d1a <failSecurityCheck>
    e15a:	|      addq.l #4,sp
    e15c:	|      tst.w d0
    e15e:	|  /-- beq.s e166 <builtIn_renameFile+0xb6>
    e160:	|  |   moveq #1,d0
    e162:	+--|-- bra.w e1ea <builtIn_renameFile+0x13a>
	FreeVec(temp);
    e166:	|  \-> move.l 44(sp),28(sp)
    e16c:	|      move.l 19b8e <SysBase>,d0
    e172:	|      movea.l d0,a6
    e174:	|      movea.l 28(sp),a1
    e178:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
    e17c:	|      move.l 32(sp),24(sp)
    e182:	|      move.l 40(sp),20(sp)
    e188:	|      move.l 19b96 <DOSBase>,d0
    e18e:	|      movea.l d0,a6
    e190:	|      move.l 24(sp),d1
    e194:	|      move.l 20(sp),d2
    e198:	|      jsr -78(a6)
    e19c:	|      move.l d0,16(sp)
    e1a0:	|      move.l 16(sp),d1
    e1a4:	|      moveq #28,d0
    e1a6:	|      add.l 56(sp),d0
    e1aa:	|      move.l d1,-(sp)
    e1ac:	|      pea 1 <_start+0x1>
    e1b0:	|      move.l d0,-(sp)
    e1b2:	|      jsr 109ce <setVariable>
    e1b8:	|      lea 12(sp),sp
	FreeVec(nam);
    e1bc:	|      move.l 32(sp),12(sp)
    e1c2:	|      move.l 19b8e <SysBase>,d0
    e1c8:	|      movea.l d0,a6
    e1ca:	|      movea.l 12(sp),a1
    e1ce:	|      jsr -690(a6)
	FreeVec(newnam);
    e1d2:	|      move.l 40(sp),8(sp)
    e1d8:	|      move.l 19b8e <SysBase>,d0
    e1de:	|      movea.l d0,a6
    e1e0:	|      movea.l 8(sp),a1
    e1e4:	|      jsr -690(a6)

	return BR_CONTINUE;
    e1e8:	|      moveq #2,d0
}
    e1ea:	\----> move.l (sp)+,d2
    e1ec:	       movea.l (sp)+,a6
    e1ee:	       lea 40(sp),sp
    e1f2:	       rts

0000e1f4 <builtIn_cacheSound>:

builtIn(cacheSound)
{
    e1f4:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e1f6:	       movea.l 12(sp),a0
    e1fa:	       move.l 24(a0),d0
    e1fe:	       move.l d0,-(sp)
    e200:	       pea 5 <_start+0x5>
    e204:	       move.l sp,d0
    e206:	       addq.l #8,d0
    e208:	       move.l d0,-(sp)
    e20a:	       jsr 100dc <getValueType>
    e210:	       lea 12(sp),sp
    e214:	       tst.w d0
    e216:	   /-- bne.s e21c <builtIn_cacheSound+0x28>
    e218:	   |   moveq #1,d0
    e21a:	/--|-- bra.s e244 <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
    e21c:	|  \-> moveq #24,d0
    e21e:	|      add.l 12(sp),d0
    e222:	|      move.l d0,-(sp)
    e224:	|      jsr 10a60 <trimStack>
    e22a:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
    e22c:	|      move.l (sp),d0
    e22e:	|      move.l d0,-(sp)
    e230:	|      jsr 8bd4 <cacheSound>
    e236:	|      addq.l #4,sp
    e238:	|      moveq #-1,d1
    e23a:	|      cmp.l d0,d1
    e23c:	|  /-- bne.s e242 <builtIn_cacheSound+0x4e>
    e23e:	|  |   moveq #1,d0
    e240:	+--|-- bra.s e244 <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
    e242:	|  \-> moveq #2,d0
}
    e244:	\----> addq.l #4,sp
    e246:	       rts

0000e248 <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
    e248:	pea 15b11 <zbuffer.c.4facf542+0x3d4>
    e24e:	jsr 12130 <KPrintF>
    e254:	addq.l #4,sp
	return BR_CONTINUE;
    e256:	moveq #2,d0
}
    e258:	rts

0000e25a <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
    e25a:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e25e:	          movea.l 20(sp),a0
    e262:	          move.l 24(a0),d0
    e266:	          move.l d0,-(sp)
    e268:	          pea 1 <_start+0x1>
    e26c:	          moveq #12,d0
    e26e:	          add.l sp,d0
    e270:	          move.l d0,-(sp)
    e272:	          jsr 100dc <getValueType>
    e278:	          lea 12(sp),sp
    e27c:	          tst.w d0
    e27e:	      /-- bne.s e286 <builtIn_setCharacterSpinSpeed+0x2c>
    e280:	      |   moveq #1,d0
    e282:	/-----|-- bra.w e320 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
    e286:	|     \-> moveq #24,d0
    e288:	|         add.l 20(sp),d0
    e28c:	|         move.l d0,-(sp)
    e28e:	|         jsr 10a60 <trimStack>
    e294:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e296:	|         movea.l 20(sp),a0
    e29a:	|         move.l 24(a0),d0
    e29e:	|         move.l d0,-(sp)
    e2a0:	|         pea 7 <_start+0x7>
    e2a4:	|         lea 8(sp),a0
    e2a8:	|         move.l a0,-(sp)
    e2aa:	|         jsr 100dc <getValueType>
    e2b0:	|         lea 12(sp),sp
    e2b4:	|         tst.w d0
    e2b6:	|     /-- bne.s e2bc <builtIn_setCharacterSpinSpeed+0x62>
    e2b8:	|     |   moveq #1,d0
    e2ba:	+-----|-- bra.s e320 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
    e2bc:	|     \-> moveq #24,d0
    e2be:	|         add.l 20(sp),d0
    e2c2:	|         move.l d0,-(sp)
    e2c4:	|         jsr 10a60 <trimStack>
    e2ca:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
    e2cc:	|         move.l (sp),d0
    e2ce:	|         move.l d0,-(sp)
    e2d0:	|         jsr 6338 <findPerson>
    e2d6:	|         addq.l #4,sp
    e2d8:	|         move.l d0,8(sp)

	if (thisPerson) {
    e2dc:	|  /----- beq.s e306 <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
    e2de:	|  |      move.l 4(sp),d0
    e2e2:	|  |      movea.l 8(sp),a0
    e2e6:	|  |      move.l d0,110(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    e2ea:	|  |      moveq #28,d0
    e2ec:	|  |      add.l 20(sp),d0
    e2f0:	|  |      pea 1 <_start+0x1>
    e2f4:	|  |      pea 1 <_start+0x1>
    e2f8:	|  |      move.l d0,-(sp)
    e2fa:	|  |      jsr 109ce <setVariable>
    e300:	|  |      lea 12(sp),sp
    e304:	|  |  /-- bra.s e31e <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    e306:	|  \--|-> moveq #28,d0
    e308:	|     |   add.l 20(sp),d0
    e30c:	|     |   clr.l -(sp)
    e30e:	|     |   pea 1 <_start+0x1>
    e312:	|     |   move.l d0,-(sp)
    e314:	|     |   jsr 109ce <setVariable>
    e31a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    e31e:	|     \-> moveq #2,d0
}
    e320:	\-------> lea 12(sp),sp
    e324:	          rts

0000e326 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
    e326:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e32a:	          movea.l 20(sp),a0
    e32e:	          move.l 24(a0),d0
    e332:	          move.l d0,-(sp)
    e334:	          pea 1 <_start+0x1>
    e338:	          moveq #12,d0
    e33a:	          add.l sp,d0
    e33c:	          move.l d0,-(sp)
    e33e:	          jsr 100dc <getValueType>
    e344:	          lea 12(sp),sp
    e348:	          tst.w d0
    e34a:	      /-- bne.s e352 <builtIn_setCharacterAngleOffset+0x2c>
    e34c:	      |   moveq #1,d0
    e34e:	/-----|-- bra.w e3ec <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
    e352:	|     \-> moveq #24,d0
    e354:	|         add.l 20(sp),d0
    e358:	|         move.l d0,-(sp)
    e35a:	|         jsr 10a60 <trimStack>
    e360:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e362:	|         movea.l 20(sp),a0
    e366:	|         move.l 24(a0),d0
    e36a:	|         move.l d0,-(sp)
    e36c:	|         pea 7 <_start+0x7>
    e370:	|         lea 8(sp),a0
    e374:	|         move.l a0,-(sp)
    e376:	|         jsr 100dc <getValueType>
    e37c:	|         lea 12(sp),sp
    e380:	|         tst.w d0
    e382:	|     /-- bne.s e388 <builtIn_setCharacterAngleOffset+0x62>
    e384:	|     |   moveq #1,d0
    e386:	+-----|-- bra.s e3ec <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
    e388:	|     \-> moveq #24,d0
    e38a:	|         add.l 20(sp),d0
    e38e:	|         move.l d0,-(sp)
    e390:	|         jsr 10a60 <trimStack>
    e396:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
    e398:	|         move.l (sp),d0
    e39a:	|         move.l d0,-(sp)
    e39c:	|         jsr 6338 <findPerson>
    e3a2:	|         addq.l #4,sp
    e3a4:	|         move.l d0,8(sp)

	if (thisPerson) {
    e3a8:	|  /----- beq.s e3d2 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
    e3aa:	|  |      move.l 4(sp),d0
    e3ae:	|  |      movea.l 8(sp),a0
    e3b2:	|  |      move.l d0,88(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    e3b6:	|  |      moveq #28,d0
    e3b8:	|  |      add.l 20(sp),d0
    e3bc:	|  |      pea 1 <_start+0x1>
    e3c0:	|  |      pea 1 <_start+0x1>
    e3c4:	|  |      move.l d0,-(sp)
    e3c6:	|  |      jsr 109ce <setVariable>
    e3cc:	|  |      lea 12(sp),sp
    e3d0:	|  |  /-- bra.s e3ea <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    e3d2:	|  \--|-> moveq #28,d0
    e3d4:	|     |   add.l 20(sp),d0
    e3d8:	|     |   clr.l -(sp)
    e3da:	|     |   pea 1 <_start+0x1>
    e3de:	|     |   move.l d0,-(sp)
    e3e0:	|     |   jsr 109ce <setVariable>
    e3e6:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    e3ea:	|     \-> moveq #2,d0
}
    e3ec:	\-------> lea 12(sp),sp
    e3f0:	          rts

0000e3f2 <builtIn_transitionMode>:


builtIn(transitionMode)
{
    e3f2:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e3f4:	       movea.l 12(sp),a0
    e3f8:	       move.l 24(a0),d0
    e3fc:	       move.l d0,-(sp)
    e3fe:	       pea 1 <_start+0x1>
    e402:	       move.l sp,d0
    e404:	       addq.l #8,d0
    e406:	       move.l d0,-(sp)
    e408:	       jsr 100dc <getValueType>
    e40e:	       lea 12(sp),sp
    e412:	       tst.w d0
    e414:	   /-- bne.s e41a <builtIn_transitionMode+0x28>
    e416:	   |   moveq #1,d0
    e418:	/--|-- bra.s e450 <builtIn_transitionMode+0x5e>
	fadeMode = n;
    e41a:	|  \-> move.l (sp),d0
    e41c:	|      move.l d0,d0
    e41e:	|      move.b d0,185d4 <fadeMode>
	trimStack (&fun -> stack);
    e424:	|      moveq #24,d0
    e426:	|      add.l 12(sp),d0
    e42a:	|      move.l d0,-(sp)
    e42c:	|      jsr 10a60 <trimStack>
    e432:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    e434:	|      moveq #28,d0
    e436:	|      add.l 12(sp),d0
    e43a:	|      pea 1 <_start+0x1>
    e43e:	|      pea 1 <_start+0x1>
    e442:	|      move.l d0,-(sp)
    e444:	|      jsr 109ce <setVariable>
    e44a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e44e:	|      moveq #2,d0
}
    e450:	\----> addq.l #4,sp
    e452:	       rts

0000e454 <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    e454:	moveq #24,d0
    e456:	add.l 8(sp),d0
    e45a:	move.l d0,-(sp)
    e45c:	jsr 10a60 <trimStack>
    e462:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
    e464:	moveq #28,d0
    e466:	add.l 8(sp),d0
    e46a:	pea 1 <_start+0x1>
    e46e:	pea 1 <_start+0x1>
    e472:	move.l d0,-(sp)
    e474:	jsr 109ce <setVariable>
    e47a:	lea 12(sp),sp
	return BR_CONTINUE;
    e47e:	moveq #2,d0
}
    e480:	rts

0000e482 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
    e482:	pea 15b3b <zbuffer.c.4facf542+0x3fe>
    e488:	jsr 12130 <KPrintF>
    e48e:	addq.l #4,sp
	return BR_CONTINUE;
    e490:	moveq #2,d0
}
    e492:	rts

0000e494 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
    e494:	       lea -16(sp),sp
    e498:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
    e49a:	       movea.l 28(sp),a0
    e49e:	       move.l 24(a0),d0
    e4a2:	       move.l d0,-(sp)
    e4a4:	       jsr 106b2 <getTextFromAnyVar>
    e4aa:	       addq.l #4,sp
    e4ac:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
    e4b0:	   /-- bne.s e4b8 <builtIn_saveCustomData+0x24>
    e4b2:	   |   moveq #1,d0
    e4b4:	/--|-- bra.w e56a <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
    e4b8:	|  \-> move.l 16(sp),-(sp)
    e4bc:	|      jsr 2fe <encodeFilename>
    e4c2:	|      addq.l #4,sp
    e4c4:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
    e4c8:	|      move.l 16(sp),8(sp)
    e4ce:	|      move.l 19b8e <SysBase>,d0
    e4d4:	|      movea.l d0,a6
    e4d6:	|      movea.l 8(sp),a1
    e4da:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
    e4de:	|      move.l 12(sp),-(sp)
    e4e2:	|      jsr 9d1a <failSecurityCheck>
    e4e8:	|      addq.l #4,sp
    e4ea:	|      tst.w d0
    e4ec:	|  /-- beq.s e4f2 <builtIn_saveCustomData+0x5e>
    e4ee:	|  |   moveq #1,d0
    e4f0:	+--|-- bra.s e56a <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
    e4f2:	|  \-> moveq #24,d0
    e4f4:	|      add.l 28(sp),d0
    e4f8:	|      move.l d0,-(sp)
    e4fa:	|      jsr 10a60 <trimStack>
    e500:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
    e502:	|      movea.l 28(sp),a0
    e506:	|      movea.l 24(a0),a0
    e50a:	|      move.l (a0),d0
    e50c:	|      moveq #6,d1
    e50e:	|      cmp.l d0,d1
    e510:	|  /-- beq.s e524 <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
    e512:	|  |   pea 15b68 <zbuffer.c.4facf542+0x42b>
    e518:	|  |   jsr 12130 <KPrintF>
    e51e:	|  |   addq.l #4,sp
		return BR_ERROR;
    e520:	|  |   moveq #1,d0
    e522:	+--|-- bra.s e56a <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
    e524:	|  \-> movea.l 28(sp),a0
    e528:	|      move.l 24(a0),d0
    e52c:	|      move.l d0,-(sp)
    e52e:	|      move.l 16(sp),-(sp)
    e532:	|      jsr 996a <stackToFile>
    e538:	|      addq.l #8,sp
    e53a:	|      tst.w d0
    e53c:	|  /-- bne.s e542 <builtIn_saveCustomData+0xae>
    e53e:	|  |   moveq #1,d0
    e540:	+--|-- bra.s e56a <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
    e542:	|  \-> moveq #24,d0
    e544:	|      add.l 28(sp),d0
    e548:	|      move.l d0,-(sp)
    e54a:	|      jsr 10a60 <trimStack>
    e550:	|      addq.l #4,sp
	FreeVec(fileName);
    e552:	|      move.l 12(sp),4(sp)
    e558:	|      move.l 19b8e <SysBase>,d0
    e55e:	|      movea.l d0,a6
    e560:	|      movea.l 4(sp),a1
    e564:	|      jsr -690(a6)
	return BR_CONTINUE;
    e568:	|      moveq #2,d0
}
    e56a:	\----> movea.l (sp)+,a6
    e56c:	       lea 16(sp),sp
    e570:	       rts

0000e572 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
    e572:	       lea -28(sp),sp
    e576:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    e578:	       movea.l 40(sp),a0
    e57c:	       move.l 24(a0),d0
    e580:	       move.l d0,-(sp)
    e582:	       jsr 106b2 <getTextFromAnyVar>
    e588:	       addq.l #4,sp
    e58a:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
    e58e:	   /-- bne.s e596 <builtIn_loadCustomData+0x24>
    e590:	   |   moveq #1,d0
    e592:	/--|-- bra.w e692 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
    e596:	|  \-> move.l 28(sp),-(sp)
    e59a:	|      jsr 2fe <encodeFilename>
    e5a0:	|      addq.l #4,sp
    e5a2:	|      move.l d0,24(sp)
	FreeVec(newTextA);
    e5a6:	|      move.l 28(sp),20(sp)
    e5ac:	|      move.l 19b8e <SysBase>,d0
    e5b2:	|      movea.l d0,a6
    e5b4:	|      movea.l 20(sp),a1
    e5b8:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
    e5bc:	|      move.l 24(sp),-(sp)
    e5c0:	|      jsr 9d1a <failSecurityCheck>
    e5c6:	|      addq.l #4,sp
    e5c8:	|      tst.w d0
    e5ca:	|  /-- beq.s e5d2 <builtIn_loadCustomData+0x60>
    e5cc:	|  |   moveq #1,d0
    e5ce:	+--|-- bra.w e692 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
    e5d2:	|  \-> moveq #24,d0
    e5d4:	|      add.l 40(sp),d0
    e5d8:	|      move.l d0,-(sp)
    e5da:	|      jsr 10a60 <trimStack>
    e5e0:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
    e5e2:	|      moveq #28,d0
    e5e4:	|      add.l 40(sp),d0
    e5e8:	|      move.l d0,-(sp)
    e5ea:	|      jsr 1032a <unlinkVar>
    e5f0:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
    e5f2:	|      movea.l 40(sp),a0
    e5f6:	|      moveq #6,d0
    e5f8:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    e5fc:	|      moveq #12,d0
    e5fe:	|      move.l d0,16(sp)
    e602:	|      clr.l 12(sp)
    e606:	|      move.l 19b8e <SysBase>,d0
    e60c:	|      movea.l d0,a6
    e60e:	|      move.l 16(sp),d0
    e612:	|      move.l 12(sp),d1
    e616:	|      jsr -684(a6)
    e61a:	|      move.l d0,8(sp)
    e61e:	|      move.l 8(sp),d0
    e622:	|      movea.l 40(sp),a0
    e626:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
    e62a:	|      movea.l 40(sp),a0
    e62e:	|      move.l 32(a0),d0
    e632:	|  /-- bne.s e638 <builtIn_loadCustomData+0xc6>
    e634:	|  |   moveq #1,d0
    e636:	+--|-- bra.s e692 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
    e638:	|  \-> movea.l 40(sp),a0
    e63c:	|      movea.l 32(a0),a0
    e640:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
    e642:	|      movea.l 40(sp),a0
    e646:	|      movea.l 32(a0),a0
    e64a:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
    e64e:	|      movea.l 40(sp),a0
    e652:	|      movea.l 32(a0),a0
    e656:	|      moveq #1,d0
    e658:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
    e65c:	|      movea.l 40(sp),a0
    e660:	|      move.l 32(a0),d0
    e664:	|      move.l d0,-(sp)
    e666:	|      move.l 28(sp),-(sp)
    e66a:	|      jsr 93a4 <fileToStack>
    e670:	|      addq.l #8,sp
    e672:	|      tst.w d0
    e674:	|  /-- bne.s e67a <builtIn_loadCustomData+0x108>
    e676:	|  |   moveq #1,d0
    e678:	+--|-- bra.s e692 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
    e67a:	|  \-> move.l 24(sp),4(sp)
    e680:	|      move.l 19b8e <SysBase>,d0
    e686:	|      movea.l d0,a6
    e688:	|      movea.l 4(sp),a1
    e68c:	|      jsr -690(a6)
	return BR_CONTINUE;
    e690:	|      moveq #2,d0
}
    e692:	\----> movea.l (sp)+,a6
    e694:	       lea 28(sp),sp
    e698:	       rts

0000e69a <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
    e69a:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e69c:	       movea.l 12(sp),a0
    e6a0:	       move.l 24(a0),d0
    e6a4:	       move.l d0,-(sp)
    e6a6:	       pea 1 <_start+0x1>
    e6aa:	       move.l sp,d0
    e6ac:	       addq.l #8,d0
    e6ae:	       move.l d0,-(sp)
    e6b0:	       jsr 100dc <getValueType>
    e6b6:	       lea 12(sp),sp
    e6ba:	       tst.w d0
    e6bc:	   /-- bne.s e6c2 <builtIn_setCustomEncoding+0x28>
    e6be:	   |   moveq #1,d0
    e6c0:	/--|-- bra.s e6f8 <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
    e6c2:	|  \-> move.l (sp),d0
    e6c4:	|      move.l d0,d0
    e6c6:	|      move.w d0,19c30 <saveEncoding>
	trimStack (&fun -> stack);
    e6cc:	|      moveq #24,d0
    e6ce:	|      add.l 12(sp),d0
    e6d2:	|      move.l d0,-(sp)
    e6d4:	|      jsr 10a60 <trimStack>
    e6da:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    e6dc:	|      moveq #28,d0
    e6de:	|      add.l 12(sp),d0
    e6e2:	|      pea 1 <_start+0x1>
    e6e6:	|      pea 1 <_start+0x1>
    e6ea:	|      move.l d0,-(sp)
    e6ec:	|      jsr 109ce <setVariable>
    e6f2:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e6f6:	|      moveq #2,d0
}
    e6f8:	\----> addq.l #4,sp
    e6fa:	       rts

0000e6fc <builtIn_freeSound>:

builtIn(freeSound)
{
    e6fc:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e6fe:	       movea.l 12(sp),a0
    e702:	       move.l 24(a0),d0
    e706:	       move.l d0,-(sp)
    e708:	       pea 5 <_start+0x5>
    e70c:	       move.l sp,d0
    e70e:	       addq.l #8,d0
    e710:	       move.l d0,-(sp)
    e712:	       jsr 100dc <getValueType>
    e718:	       lea 12(sp),sp
    e71c:	       tst.w d0
    e71e:	   /-- bne.s e724 <builtIn_freeSound+0x28>
    e720:	   |   moveq #1,d0
    e722:	/--|-- bra.s e742 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
    e724:	|  \-> moveq #24,d0
    e726:	|      add.l 12(sp),d0
    e72a:	|      move.l d0,-(sp)
    e72c:	|      jsr 10a60 <trimStack>
    e732:	|      addq.l #4,sp
	huntKillFreeSound (v);
    e734:	|      move.l (sp),d0
    e736:	|      move.l d0,-(sp)
    e738:	|      jsr 8bd8 <huntKillFreeSound>
    e73e:	|      addq.l #4,sp
	return BR_CONTINUE;
    e740:	|      moveq #2,d0
}
    e742:	\----> addq.l #4,sp
    e744:	       rts

0000e746 <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
    e746:	       lea -12(sp),sp
    e74a:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e74c:	       movea.l 24(sp),a0
    e750:	       move.l 24(a0),d0
    e754:	       move.l d0,-(sp)
    e756:	       pea 1 <_start+0x1>
    e75a:	       moveq #16,d0
    e75c:	       add.l sp,d0
    e75e:	       move.l d0,-(sp)
    e760:	       jsr 100dc <getValueType>
    e766:	       lea 12(sp),sp
    e76a:	       tst.w d0
    e76c:	   /-- bne.s e774 <builtIn_parallaxAdd+0x2e>
    e76e:	   |   moveq #1,d0
    e770:	/--|-- bra.w e848 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
    e774:	|  \-> moveq #24,d0
    e776:	|      add.l 24(sp),d0
    e77a:	|      move.l d0,-(sp)
    e77c:	|      jsr 10a60 <trimStack>
    e782:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e784:	|      movea.l 24(sp),a0
    e788:	|      move.l 24(a0),d0
    e78c:	|      move.l d0,-(sp)
    e78e:	|      pea 1 <_start+0x1>
    e792:	|      moveq #20,d0
    e794:	|      add.l sp,d0
    e796:	|      move.l d0,-(sp)
    e798:	|      jsr 100dc <getValueType>
    e79e:	|      lea 12(sp),sp
    e7a2:	|      tst.w d0
    e7a4:	|  /-- bne.s e7ac <builtIn_parallaxAdd+0x66>
    e7a6:	|  |   moveq #1,d0
    e7a8:	+--|-- bra.w e848 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
    e7ac:	|  \-> moveq #24,d0
    e7ae:	|      add.l 24(sp),d0
    e7b2:	|      move.l d0,-(sp)
    e7b4:	|      jsr 10a60 <trimStack>
    e7ba:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e7bc:	|      movea.l 24(sp),a0
    e7c0:	|      move.l 24(a0),d0
    e7c4:	|      move.l d0,-(sp)
    e7c6:	|      pea 5 <_start+0x5>
    e7ca:	|      lea 12(sp),a0
    e7ce:	|      move.l a0,-(sp)
    e7d0:	|      jsr 100dc <getValueType>
    e7d6:	|      lea 12(sp),sp
    e7da:	|      tst.w d0
    e7dc:	|  /-- bne.s e7e2 <builtIn_parallaxAdd+0x9c>
    e7de:	|  |   moveq #1,d0
    e7e0:	+--|-- bra.s e848 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
    e7e2:	|  \-> moveq #24,d0
    e7e4:	|      add.l 24(sp),d0
    e7e8:	|      move.l d0,-(sp)
    e7ea:	|      jsr 10a60 <trimStack>
    e7f0:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
    e7f2:	|      move.l 8(sp),d0
    e7f6:	|      move.l d0,d0
    e7f8:	|      moveq #0,d2
    e7fa:	|      move.w d0,d2
    e7fc:	|      move.l 12(sp),d0
    e800:	|      move.l d0,d0
    e802:	|      moveq #0,d1
    e804:	|      move.w d0,d1
    e806:	|      move.l 4(sp),d0
    e80a:	|      move.l d0,d0
    e80c:	|      move.w d0,d0
    e80e:	|      andi.l #65535,d0
    e814:	|      move.l d2,-(sp)
    e816:	|      move.l d1,-(sp)
    e818:	|      move.l d0,-(sp)
    e81a:	|      jsr 8dbc <loadParallax>
    e820:	|      lea 12(sp),sp
    e824:	|      tst.w d0
    e826:	|  /-- bne.s e82c <builtIn_parallaxAdd+0xe6>
    e828:	|  |   moveq #1,d0
    e82a:	+--|-- bra.s e848 <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
    e82c:	|  \-> moveq #28,d0
    e82e:	|      add.l 24(sp),d0
    e832:	|      pea 1 <_start+0x1>
    e836:	|      pea 1 <_start+0x1>
    e83a:	|      move.l d0,-(sp)
    e83c:	|      jsr 109ce <setVariable>
    e842:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
    e846:	|      moveq #2,d0
}
    e848:	\----> move.l (sp)+,d2
    e84a:	       lea 12(sp),sp
    e84e:	       rts

0000e850 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
    e850:	jsr 8d24 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
    e856:	moveq #28,d0
    e858:	add.l 8(sp),d0
    e85c:	pea 1 <_start+0x1>
    e860:	pea 1 <_start+0x1>
    e864:	move.l d0,-(sp)
    e866:	jsr 109ce <setVariable>
    e86c:	lea 12(sp),sp
	return BR_CONTINUE;
    e870:	moveq #2,d0
}
    e872:	rts

0000e874 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
    e874:	pea 15b86 <zbuffer.c.4facf542+0x449>
    e87a:	jsr 12130 <KPrintF>
    e880:	addq.l #4,sp

	return BR_CONTINUE;
    e882:	moveq #2,d0
}
    e884:	rts

0000e886 <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
    e886:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    e888:	             movea.l 16(sp),a0
    e88c:	             movea.l 24(a0),a0
    e890:	             move.l (a0),d0
    e892:	             moveq #1,d1
    e894:	             cmp.l d0,d1
    e896:	      /----- beq.s e8de <builtIn_makeFastArray+0x58>
    e898:	      |      moveq #6,d1
    e89a:	      |      cmp.l d0,d1
    e89c:	/-----|----- bne.s e91c <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
    e89e:	|     |      movea.l 16(sp),a0
    e8a2:	|     |      movea.l 24(a0),a0
    e8a6:	|     |      move.l 4(a0),d1
    e8aa:	|     |      moveq #28,d0
    e8ac:	|     |      add.l 16(sp),d0
    e8b0:	|     |      move.l d1,-(sp)
    e8b2:	|     |      move.l d0,-(sp)
    e8b4:	|     |      jsr 1018e <makeFastArrayFromStack>
    e8ba:	|     |      addq.l #8,sp
    e8bc:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
    e8c0:	|     |      moveq #24,d0
    e8c2:	|     |      add.l 16(sp),d0
    e8c6:	|     |      move.l d0,-(sp)
    e8c8:	|     |      jsr 10a60 <trimStack>
    e8ce:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
    e8d0:	|     |      tst.w 6(sp)
    e8d4:	|     |  /-- beq.s e8da <builtIn_makeFastArray+0x54>
    e8d6:	|     |  |   moveq #2,d0
    e8d8:	|  /--|--|-- bra.s e92e <builtIn_makeFastArray+0xa8>
    e8da:	|  |  |  \-> moveq #1,d0
    e8dc:	|  +--|----- bra.s e92e <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
    e8de:	|  |  \----> movea.l 16(sp),a0
    e8e2:	|  |         movea.l 24(a0),a0
    e8e6:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
    e8ec:	|  |         moveq #24,d0
    e8ee:	|  |         add.l 16(sp),d0
    e8f2:	|  |         move.l d0,-(sp)
    e8f4:	|  |         jsr 10a60 <trimStack>
    e8fa:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
    e8fc:	|  |         moveq #28,d0
    e8fe:	|  |         add.l 16(sp),d0
    e902:	|  |         move.l 2(sp),-(sp)
    e906:	|  |         move.l d0,-(sp)
    e908:	|  |         jsr 101f8 <makeFastArraySize>
    e90e:	|  |         addq.l #8,sp
    e910:	|  |         tst.w d0
    e912:	|  |     /-- beq.s e918 <builtIn_makeFastArray+0x92>
    e914:	|  |     |   moveq #2,d0
    e916:	|  +-----|-- bra.s e92e <builtIn_makeFastArray+0xa8>
    e918:	|  |     \-> moveq #1,d0
    e91a:	|  +-------- bra.s e92e <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
    e91c:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
    e91e:	   |         pea 15baf <zbuffer.c.4facf542+0x472>
    e924:	   |         jsr 12130 <KPrintF>
    e92a:	   |         addq.l #4,sp
	return BR_ERROR;
    e92c:	   |         moveq #1,d0
}
    e92e:	   \-------> addq.l #8,sp
    e930:	             rts

0000e932 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
    e932:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e934:	          movea.l 16(sp),a0
    e938:	          move.l 24(a0),d0
    e93c:	          move.l d0,-(sp)
    e93e:	          pea 7 <_start+0x7>
    e942:	          move.l sp,d0
    e944:	          addq.l #8,d0
    e946:	          move.l d0,-(sp)
    e948:	          jsr 100dc <getValueType>
    e94e:	          lea 12(sp),sp
    e952:	          tst.w d0
    e954:	      /-- bne.s e95a <builtIn_getCharacterScale+0x28>
    e956:	      |   moveq #1,d0
    e958:	/-----|-- bra.s e9d4 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
    e95a:	|     \-> moveq #24,d0
    e95c:	|         add.l 16(sp),d0
    e960:	|         move.l d0,-(sp)
    e962:	|         jsr 10a60 <trimStack>
    e968:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    e96a:	|         move.l (sp),d0
    e96c:	|         move.l d0,-(sp)
    e96e:	|         jsr 6338 <findPerson>
    e974:	|         addq.l #4,sp
    e976:	|         move.l d0,4(sp)
	if (pers) {
    e97a:	|  /----- beq.s e9ba <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
    e97c:	|  |      movea.l 4(sp),a0
    e980:	|  |      move.l 20(a0),d0
    e984:	|  |      move.l #1120403456,-(sp)
    e98a:	|  |      move.l d0,-(sp)
    e98c:	|  |      jsr 1263a <__mulsf3>
    e992:	|  |      addq.l #8,sp
    e994:	|  |      move.l d0,-(sp)
    e996:	|  |      jsr 12520 <__fixsfsi>
    e99c:	|  |      addq.l #4,sp
    e99e:	|  |      move.l d0,d1
    e9a0:	|  |      moveq #28,d0
    e9a2:	|  |      add.l 16(sp),d0
    e9a6:	|  |      move.l d1,-(sp)
    e9a8:	|  |      pea 1 <_start+0x1>
    e9ac:	|  |      move.l d0,-(sp)
    e9ae:	|  |      jsr 109ce <setVariable>
    e9b4:	|  |      lea 12(sp),sp
    e9b8:	|  |  /-- bra.s e9d2 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    e9ba:	|  \--|-> moveq #28,d0
    e9bc:	|     |   add.l 16(sp),d0
    e9c0:	|     |   clr.l -(sp)
    e9c2:	|     |   pea 1 <_start+0x1>
    e9c6:	|     |   move.l d0,-(sp)
    e9c8:	|     |   jsr 109ce <setVariable>
    e9ce:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    e9d2:	|     \-> moveq #2,d0
}
    e9d4:	\-------> addq.l #8,sp
    e9d6:	          rts

0000e9d8 <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
    e9d8:	move.l 19c54 <gameSettings>,d0
    e9de:	move.l d0,d1
    e9e0:	moveq #28,d0
    e9e2:	add.l 8(sp),d0
    e9e6:	move.l d1,-(sp)
    e9e8:	pea 1 <_start+0x1>
    e9ec:	move.l d0,-(sp)
    e9ee:	jsr 109ce <setVariable>
    e9f4:	lea 12(sp),sp
	return BR_CONTINUE;
    e9f8:	moveq #2,d0
}
    e9fa:	rts

0000e9fc <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
    e9fc:	moveq #24,d0
    e9fe:	add.l 8(sp),d0
    ea02:	move.l d0,-(sp)
    ea04:	jsr 10a60 <trimStack>
    ea0a:	addq.l #4,sp
	trimStack (&fun -> stack);
    ea0c:	moveq #24,d0
    ea0e:	add.l 8(sp),d0
    ea12:	move.l d0,-(sp)
    ea14:	jsr 10a60 <trimStack>
    ea1a:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
    ea1c:	moveq #28,d0
    ea1e:	add.l 8(sp),d0
    ea22:	clr.l -(sp)
    ea24:	pea 1 <_start+0x1>
    ea28:	move.l d0,-(sp)
    ea2a:	jsr 109ce <setVariable>
    ea30:	lea 12(sp),sp

	return BR_CONTINUE;
    ea34:	moveq #2,d0

}
    ea36:	rts

0000ea38 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
    ea38:	move.l 18072 <lastFramesPerSecond>,d1
    ea3e:	moveq #28,d0
    ea40:	add.l 8(sp),d0
    ea44:	move.l d1,-(sp)
    ea46:	pea 1 <_start+0x1>
    ea4a:	move.l d0,-(sp)
    ea4c:	jsr 109ce <setVariable>
    ea52:	lea 12(sp),sp
	return BR_CONTINUE;
    ea56:	moveq #2,d0
}
    ea58:	rts

0000ea5a <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
    ea5a:	moveq #2,d0
}
    ea5c:	rts

0000ea5e <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
    ea5e:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ea62:	          movea.l 60(sp),a0
    ea66:	          move.l 24(a0),d0
    ea6a:	          move.l d0,-(sp)
    ea6c:	          pea 1 <_start+0x1>
    ea70:	          pea 19a8a <thumbHeight>
    ea76:	          jsr 100dc <getValueType>
    ea7c:	          lea 12(sp),sp
    ea80:	          tst.w d0
    ea82:	      /-- bne.s ea8a <builtIn_setThumbnailSize+0x2c>
    ea84:	      |   moveq #1,d0
    ea86:	/-----|-- bra.w eb46 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
    ea8a:	|     \-> moveq #24,d0
    ea8c:	|         add.l 60(sp),d0
    ea90:	|         move.l d0,-(sp)
    ea92:	|         jsr 10a60 <trimStack>
    ea98:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ea9a:	|         movea.l 60(sp),a0
    ea9e:	|         move.l 24(a0),d0
    eaa2:	|         move.l d0,-(sp)
    eaa4:	|         pea 1 <_start+0x1>
    eaa8:	|         pea 19a86 <thumbWidth>
    eaae:	|         jsr 100dc <getValueType>
    eab4:	|         lea 12(sp),sp
    eab8:	|         tst.w d0
    eaba:	|     /-- bne.s eac2 <builtIn_setThumbnailSize+0x64>
    eabc:	|     |   moveq #1,d0
    eabe:	+-----|-- bra.w eb46 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
    eac2:	|     \-> moveq #24,d0
    eac4:	|         add.l 60(sp),d0
    eac8:	|         move.l d0,-(sp)
    eaca:	|         jsr 10a60 <trimStack>
    ead0:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
    ead2:	|         move.l 19a86 <thumbWidth>,d0
    ead8:	|     /-- bmi.s eb06 <builtIn_setThumbnailSize+0xa8>
    eada:	|     |   move.l 19a8a <thumbHeight>,d0
    eae0:	|     +-- bmi.s eb06 <builtIn_setThumbnailSize+0xa8>
    eae2:	|     |   move.l 19a86 <thumbWidth>,d0
    eae8:	|     |   move.l d0,d1
    eaea:	|     |   move.l 19a8e <winWidth>,d0
    eaf0:	|     |   cmp.l d1,d0
    eaf2:	|     +-- bcs.s eb06 <builtIn_setThumbnailSize+0xa8>
    eaf4:	|     |   move.l 19a8a <thumbHeight>,d0
    eafa:	|     |   move.l d0,d1
    eafc:	|     |   move.l 19a92 <winHeight>,d0
    eb02:	|     |   cmp.l d1,d0
    eb04:	|  /--|-- bcc.s eb44 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
    eb06:	|  |  \-> move.l 19a8a <thumbHeight>,d1
    eb0c:	|  |      move.l 19a86 <thumbWidth>,d0
    eb12:	|  |      move.l d1,-(sp)
    eb14:	|  |      move.l d0,-(sp)
    eb16:	|  |      pea 15bd6 <zbuffer.c.4facf542+0x499>
    eb1c:	|  |      lea 14(sp),a0
    eb20:	|  |      move.l a0,-(sp)
    eb22:	|  |      jsr f8e6 <sprintf>
    eb28:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
    eb2c:	|  |      lea 2(sp),a0
    eb30:	|  |      move.l a0,-(sp)
    eb32:	|  |      pea 15bde <zbuffer.c.4facf542+0x4a1>
    eb38:	|  |      jsr 12130 <KPrintF>
    eb3e:	|  |      addq.l #8,sp
		return BR_ERROR;
    eb40:	|  |      moveq #1,d0
    eb42:	+--|----- bra.s eb46 <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
    eb44:	|  \----> moveq #2,d0
}
    eb46:	\-------> lea 52(sp),sp
    eb4a:	          rts

0000eb4c <builtIn_hasFlag>:

builtIn(hasFlag)
{
    eb4c:	       lea -12(sp),sp
    eb50:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eb52:	       movea.l 24(sp),a0
    eb56:	       move.l 24(a0),d0
    eb5a:	       move.l d0,-(sp)
    eb5c:	       pea 1 <_start+0x1>
    eb60:	       lea 12(sp),a0
    eb64:	       move.l a0,-(sp)
    eb66:	       jsr 100dc <getValueType>
    eb6c:	       lea 12(sp),sp
    eb70:	       tst.w d0
    eb72:	   /-- bne.s eb7a <builtIn_hasFlag+0x2e>
    eb74:	   |   moveq #1,d0
    eb76:	/--|-- bra.w ec0a <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
    eb7a:	|  \-> moveq #24,d0
    eb7c:	|      add.l 24(sp),d0
    eb80:	|      move.l d0,-(sp)
    eb82:	|      jsr 10a60 <trimStack>
    eb88:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    eb8a:	|      movea.l 24(sp),a0
    eb8e:	|      move.l 24(a0),d0
    eb92:	|      move.l d0,-(sp)
    eb94:	|      pea 7 <_start+0x7>
    eb98:	|      moveq #16,d0
    eb9a:	|      add.l sp,d0
    eb9c:	|      move.l d0,-(sp)
    eb9e:	|      jsr 100dc <getValueType>
    eba4:	|      lea 12(sp),sp
    eba8:	|      tst.w d0
    ebaa:	|  /-- bne.s ebb0 <builtIn_hasFlag+0x64>
    ebac:	|  |   moveq #1,d0
    ebae:	+--|-- bra.s ec0a <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
    ebb0:	|  \-> moveq #24,d0
    ebb2:	|      add.l 24(sp),d0
    ebb6:	|      move.l d0,-(sp)
    ebb8:	|      jsr 10a60 <trimStack>
    ebbe:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
    ebc0:	|      move.l 8(sp),d0
    ebc4:	|      move.l d0,-(sp)
    ebc6:	|      jsr 8f2e <findObjectType>
    ebcc:	|      addq.l #4,sp
    ebce:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
    ebd2:	|  /-- bne.s ebd8 <builtIn_hasFlag+0x8c>
    ebd4:	|  |   moveq #1,d0
    ebd6:	+--|-- bra.s ec0a <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
    ebd8:	|  \-> movea.l 12(sp),a0
    ebdc:	|      move.w 36(a0),d0
    ebe0:	|      moveq #0,d2
    ebe2:	|      move.w d0,d2
    ebe4:	|      move.l 4(sp),d1
    ebe8:	|      moveq #1,d0
    ebea:	|      lsl.l d1,d0
    ebec:	|      move.l d2,d1
    ebee:	|      and.l d0,d1
    ebf0:	|      moveq #28,d0
    ebf2:	|      add.l 24(sp),d0
    ebf6:	|      move.l d1,-(sp)
    ebf8:	|      pea 1 <_start+0x1>
    ebfc:	|      move.l d0,-(sp)
    ebfe:	|      jsr 109ce <setVariable>
    ec04:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ec08:	|      moveq #2,d0
}
    ec0a:	\----> move.l (sp)+,d2
    ec0c:	       lea 12(sp),sp
    ec10:	       rts

0000ec12 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
    ec12:	       jsr 8f1c <snapshot>
    ec18:	       tst.w d0
    ec1a:	/----- beq.s ec20 <builtIn_snapshotGrab+0xe>
    ec1c:	|      moveq #2,d0
    ec1e:	|  /-- bra.s ec22 <builtIn_snapshotGrab+0x10>
    ec20:	\--|-> moveq #1,d0
}
    ec22:	   \-> rts

0000ec24 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
    ec24:	jsr 8e02 <nosnapshot>
	return BR_CONTINUE;
    ec2a:	moveq #2,d0
}
    ec2c:	rts

0000ec2e <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
    ec2e:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
    ec30:	move.w 18066 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
    ec38:	movea.l 12(sp),a0
    ec3c:	move.l 24(a0),d0
    ec40:	move.l d0,-(sp)
    ec42:	jsr 1061c <getBoolean>
    ec48:	addq.l #4,sp
    ec4a:	move.w d0,18066 <allowAnyFilename>
	trimStack (&fun -> stack);
    ec50:	moveq #24,d0
    ec52:	add.l 12(sp),d0
    ec56:	move.l d0,-(sp)
    ec58:	jsr 10a60 <trimStack>
    ec5e:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
    ec60:	movea.w 2(sp),a0
    ec64:	moveq #28,d0
    ec66:	add.l 12(sp),d0
    ec6a:	move.l a0,-(sp)
    ec6c:	pea 1 <_start+0x1>
    ec70:	move.l d0,-(sp)
    ec72:	jsr 109ce <setVariable>
    ec78:	lea 12(sp),sp
	return BR_CONTINUE;
    ec7c:	moveq #2,d0
}
    ec7e:	addq.l #4,sp
    ec80:	rts

0000ec82 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    ec82:	moveq #24,d0
    ec84:	add.l 8(sp),d0
    ec88:	move.l d0,-(sp)
    ec8a:	jsr 10a60 <trimStack>
    ec90:	addq.l #4,sp
	trimStack (&fun -> stack);
    ec92:	moveq #24,d0
    ec94:	add.l 8(sp),d0
    ec98:	move.l d0,-(sp)
    ec9a:	jsr 10a60 <trimStack>
    eca0:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
    eca2:	moveq #28,d0
    eca4:	add.l 8(sp),d0
    eca8:	clr.l -(sp)
    ecaa:	pea 1 <_start+0x1>
    ecae:	move.l d0,-(sp)
    ecb0:	jsr 109ce <setVariable>
    ecb6:	lea 12(sp),sp

	return BR_CONTINUE;
    ecba:	moveq #2,d0
}
    ecbc:	rts

0000ecbe <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
    ecbe:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
    ecc0:	movea.l 12(sp),a0
    ecc4:	move.l 24(a0),d0
    ecc8:	move.l d0,-(sp)
    ecca:	jsr 106b2 <getTextFromAnyVar>
    ecd0:	addq.l #4,sp
    ecd2:	move.l d0,(sp)
	trimStack (&fun -> stack);
    ecd4:	moveq #24,d0
    ecd6:	add.l 12(sp),d0
    ecda:	move.l d0,-(sp)
    ecdc:	jsr 10a60 <trimStack>
    ece2:	addq.l #4,sp
	KPrintF (mess);
    ece4:	move.l (sp),-(sp)
    ece6:	jsr 12130 <KPrintF>
    ecec:	addq.l #4,sp
	return BR_ERROR;
    ecee:	moveq #1,d0
}
    ecf0:	addq.l #4,sp
    ecf2:	rts

0000ecf4 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
    ecf4:	moveq #24,d0
    ecf6:	add.l 8(sp),d0
    ecfa:	move.l d0,-(sp)
    ecfc:	jsr 10a60 <trimStack>
    ed02:	addq.l #4,sp
	trimStack (&fun -> stack);
    ed04:	moveq #24,d0
    ed06:	add.l 8(sp),d0
    ed0a:	move.l d0,-(sp)
    ed0c:	jsr 10a60 <trimStack>
    ed12:	addq.l #4,sp
	trimStack (&fun -> stack);
    ed14:	moveq #24,d0
    ed16:	add.l 8(sp),d0
    ed1a:	move.l d0,-(sp)
    ed1c:	jsr 10a60 <trimStack>
    ed22:	addq.l #4,sp
	trimStack (&fun -> stack);
    ed24:	moveq #24,d0
    ed26:	add.l 8(sp),d0
    ed2a:	move.l d0,-(sp)
    ed2c:	jsr 10a60 <trimStack>
    ed32:	addq.l #4,sp

	return BR_CONTINUE;
    ed34:	moveq #2,d0
}
    ed36:	rts

0000ed38 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
    ed38:	moveq #24,d0
    ed3a:	add.l 8(sp),d0
    ed3e:	move.l d0,-(sp)
    ed40:	jsr 10a60 <trimStack>
    ed46:	addq.l #4,sp
	trimStack (&fun -> stack);
    ed48:	moveq #24,d0
    ed4a:	add.l 8(sp),d0
    ed4e:	move.l d0,-(sp)
    ed50:	jsr 10a60 <trimStack>
    ed56:	addq.l #4,sp
	trimStack (&fun -> stack);
    ed58:	moveq #24,d0
    ed5a:	add.l 8(sp),d0
    ed5e:	move.l d0,-(sp)
    ed60:	jsr 10a60 <trimStack>
    ed66:	addq.l #4,sp

	return BR_CONTINUE;
    ed68:	moveq #2,d0

}
    ed6a:	rts

0000ed6c <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
    ed6c:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
    ed6e:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
    ed74:	sne d0
    ed76:	neg.b d0
    ed78:	moveq #0,d1
    ed7a:	move.b d0,d1
    ed7c:	moveq #28,d0
    ed7e:	add.l 12(sp),d0
    ed82:	move.l d1,-(sp)
    ed84:	pea 1 <_start+0x1>
    ed88:	move.l d0,-(sp)
    ed8a:	jsr 109ce <setVariable>
    ed90:	lea 12(sp),sp
	return BR_CONTINUE;
    ed94:	moveq #2,d0
}
    ed96:	addq.l #4,sp
    ed98:	rts

0000ed9a <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
    ed9a:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
    ed9c:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
    eda2:	pea 15bf5 <zbuffer.c.4facf542+0x4b8>
    eda8:	jsr 12130 <KPrintF>
    edae:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
    edb0:	tst.w 2(sp)
    edb4:	sne d0
    edb6:	neg.b d0
    edb8:	moveq #0,d1
    edba:	move.b d0,d1
    edbc:	moveq #28,d0
    edbe:	add.l 12(sp),d0
    edc2:	move.l d1,-(sp)
    edc4:	pea 1 <_start+0x1>
    edc8:	move.l d0,-(sp)
    edca:	jsr 109ce <setVariable>
    edd0:	lea 12(sp),sp
	return BR_CONTINUE;
    edd4:	moveq #2,d0
}
    edd6:	addq.l #4,sp
    edd8:	rts

0000edda <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
    edda:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
    edde:	             move.l 104(sp),d0
    ede2:	             cmpi.l #166,d0
    ede8:	/----------- bhi.w eeca <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
    edec:	|            move.l 104(sp),d0
    edf0:	|            add.l d0,d0
    edf2:	|            movea.l d0,a1
    edf4:	|            adda.l d0,a1
    edf6:	|            lea 1809c <paramNum>,a0
    edfc:	|            move.l (0,a1,a0.l),d0
    ee00:	|            moveq #-1,d1
    ee02:	|            cmp.l d0,d1
    ee04:	|  /-------- beq.w ee92 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
    ee08:	|  |         move.l 104(sp),d0
    ee0c:	|  |         add.l d0,d0
    ee0e:	|  |         movea.l d0,a1
    ee10:	|  |         adda.l d0,a1
    ee12:	|  |         lea 1809c <paramNum>,a0
    ee18:	|  |         move.l (0,a1,a0.l),d0
    ee1c:	|  |         cmp.l 108(sp),d0
    ee20:	|  +-------- beq.s ee92 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
    ee22:	|  |         move.l 104(sp),d0
    ee26:	|  |         add.l d0,d0
    ee28:	|  |         movea.l d0,a1
    ee2a:	|  |         adda.l d0,a1
    ee2c:	|  |         lea 1809c <paramNum>,a0
    ee32:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
    ee36:	|  |         moveq #1,d1
    ee38:	|  |         cmp.l d0,d1
    ee3a:	|  |  /----- bne.s ee44 <callBuiltIn+0x6a>
    ee3c:	|  |  |      move.l #78321,d0
    ee42:	|  |  |  /-- bra.s ee4a <callBuiltIn+0x70>
    ee44:	|  |  \--|-> move.l #89131,d0
    ee4a:	|  |     \-> move.l 104(sp),d1
    ee4e:	|  |         add.l d1,d1
    ee50:	|  |         movea.l d1,a1
    ee52:	|  |         adda.l d1,a1
    ee54:	|  |         lea 1809c <paramNum>,a0
    ee5a:	|  |         move.l (0,a1,a0.l),d1
    ee5e:	|  |         move.l d0,-(sp)
    ee60:	|  |         move.l d1,-(sp)
    ee62:	|  |         pea 15c2d <zbuffer.c.4facf542+0x4f0>
    ee68:	|  |         lea 12(sp),a0
    ee6c:	|  |         move.l a0,-(sp)
    ee6e:	|  |         jsr f8e6 <sprintf>
    ee74:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
    ee78:	|  |         movea.l sp,a0
    ee7a:	|  |         move.l a0,-(sp)
    ee7c:	|  |         jsr b8 <copyString>
    ee82:	|  |         addq.l #4,sp
    ee84:	|  |         move.l d0,-(sp)
    ee86:	|  |         jsr 12130 <KPrintF>
    ee8c:	|  |         addq.l #4,sp
				return BR_ERROR;
    ee8e:	|  |         moveq #1,d0
    ee90:	|  |     /-- bra.s eeda <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
    ee92:	|  \-----|-> move.l 104(sp),d0
    ee96:	|        |   add.l d0,d0
    ee98:	|        |   movea.l d0,a1
    ee9a:	|        |   adda.l d0,a1
    ee9c:	|        |   lea 18338 <builtInFunctionArray>,a0
    eea2:	|        |   move.l (0,a1,a0.l),d0
    eea6:	+--------|-- beq.s eeca <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
    eea8:	|        |   move.l 104(sp),d0
    eeac:	|        |   add.l d0,d0
    eeae:	|        |   movea.l d0,a1
    eeb0:	|        |   adda.l d0,a1
    eeb2:	|        |   lea 18338 <builtInFunctionArray>,a0
    eeb8:	|        |   movea.l (0,a1,a0.l),a0
    eebc:	|        |   move.l 112(sp),-(sp)
    eec0:	|        |   move.l 112(sp),-(sp)
    eec4:	|        |   jsr (a0)
    eec6:	|        |   addq.l #8,sp
    eec8:	|        +-- bra.s eeda <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
    eeca:	\--------|-> pea 15c58 <zbuffer.c.4facf542+0x51b>
    eed0:	         |   jsr 12130 <KPrintF>
    eed6:	         |   addq.l #4,sp
	return BR_ERROR;
    eed8:	         |   moveq #1,d0
}
    eeda:	         \-> lea 100(sp),sp
    eede:	             rts

0000eee0 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
    eee0:	          subq.l #8,sp
	int indexNum = -1;
    eee2:	          moveq #-1,d0
    eee4:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    eee8:	          clr.l (sp)
    eeea:	   /----- bra.s ef10 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
    eeec:	/--|----> move.l 19c4c <languageTable>,d1
    eef2:	|  |      move.l (sp),d0
    eef4:	|  |      add.l d0,d0
    eef6:	|  |      add.l d0,d0
    eef8:	|  |      movea.l d1,a0
    eefa:	|  |      adda.l d0,a0
    eefc:	|  |      move.l (a0),d0
    eefe:	|  |      move.l d0,d1
    ef00:	|  |      move.l 19c54 <gameSettings>,d0
    ef06:	|  |      cmp.l d1,d0
    ef08:	|  |  /-- bne.s ef0e <getLanguageForFileB+0x2e>
    ef0a:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    ef0e:	|  |  \-> addq.l #1,(sp)
    ef10:	|  \----> move.l 19c58 <gameSettings+0x4>,d0
    ef16:	|         cmp.l (sp),d0
    ef18:	\-------- bcc.s eeec <getLanguageForFileB+0xc>
	}

	return indexNum;
    ef1a:	          move.l 4(sp),d0
}
    ef1e:	          addq.l #8,sp
    ef20:	          rts

0000ef22 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
    ef22:	          lea -20(sp),sp
    ef26:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
    ef28:	          move.l 28(sp),-(sp)
    ef2c:	          jsr f5c8 <strlen>
    ef32:	          addq.l #4,sp
    ef34:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
    ef38:	          moveq #4,d0
    ef3a:	          cmp.l 12(sp),d0
    ef3e:	      /-- bge.s ef62 <getPrefsFilename+0x40>
    ef40:	      |   move.l 12(sp),d0
    ef44:	      |   subq.l #4,d0
    ef46:	      |   movea.l 28(sp),a0
    ef4a:	      |   adda.l d0,a0
    ef4c:	      |   move.b (a0),d0
    ef4e:	      |   cmpi.b #46,d0
    ef52:	      +-- bne.s ef62 <getPrefsFilename+0x40>
		filename[n-4] = 0;
    ef54:	      |   move.l 12(sp),d0
    ef58:	      |   subq.l #4,d0
    ef5a:	      |   movea.l 28(sp),a0
    ef5e:	      |   adda.l d0,a0
    ef60:	      |   clr.b (a0)
	}

	char * f = filename;
    ef62:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
    ef68:	          clr.l 20(sp)
    ef6c:	   /----- bra.s ef94 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
    ef6e:	/--|----> move.l 20(sp),d0
    ef72:	|  |      movea.l 28(sp),a0
    ef76:	|  |      adda.l d0,a0
    ef78:	|  |      move.b (a0),d0
    ef7a:	|  |      cmpi.b #47,d0
    ef7e:	|  |  /-- bne.s ef90 <getPrefsFilename+0x6e>
    ef80:	|  |  |   move.l 20(sp),d0
    ef84:	|  |  |   addq.l #1,d0
    ef86:	|  |  |   move.l 28(sp),d1
    ef8a:	|  |  |   add.l d0,d1
    ef8c:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
    ef90:	|  |  \-> addq.l #1,20(sp)
    ef94:	|  \----> move.l 20(sp),d0
    ef98:	|         cmp.l 12(sp),d0
    ef9c:	\-------- blt.s ef6e <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
    ef9e:	          pea 15c83 <zbuffer.c.4facf542+0x546>
    efa4:	          move.l 20(sp),-(sp)
    efa8:	          jsr f608 <joinStrings>
    efae:	          addq.l #8,sp
    efb0:	          move.l d0,8(sp)

	FreeVec(filename);
    efb4:	          move.l 28(sp),4(sp)
    efba:	          move.l 19b8e <SysBase>,d0
    efc0:	          movea.l d0,a6
    efc2:	          movea.l 4(sp),a1
    efc6:	          jsr -690(a6)
	filename = NULL;
    efca:	          clr.l 28(sp)
	return joined;
    efce:	          move.l 8(sp),d0
}
    efd2:	          movea.l (sp)+,a6
    efd4:	          lea 20(sp),sp
    efd8:	          rts

0000efda <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
    efda:	             lea -28(sp),sp
    efde:	             move.l a6,-(sp)
    efe0:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
    efe2:	             move.l 19c58 <gameSettings+0x4>,d0
    efe8:	             move.l d0,d1
    efea:	             addq.l #1,d1
    efec:	             move.l d1,28(sp)
    eff0:	             clr.l 24(sp)
    eff4:	             move.l 19b8e <SysBase>,d0
    effa:	             movea.l d0,a6
    effc:	             move.l 28(sp),d0
    f000:	             move.l 24(sp),d1
    f004:	             jsr -684(a6)
    f008:	             move.l d0,20(sp)
    f00c:	             move.l 20(sp),d0
    f010:	             move.l d0,19c4c <languageTable>
    if( languageTable == 0) {
    f016:	             move.l 19c4c <languageTable>,d0
    f01c:	         /-- bne.s f02c <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
    f01e:	         |   pea 15c88 <zbuffer.c.4facf542+0x54b>
    f024:	         |   jsr 12130 <KPrintF>
    f02a:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
    f02c:	         \-> move.l 19c58 <gameSettings+0x4>,d0
    f032:	             move.l d0,d1
    f034:	             addq.l #1,d1
    f036:	             move.l d1,16(sp)
    f03a:	             clr.l 12(sp)
    f03e:	             move.l 19b8e <SysBase>,d0
    f044:	             movea.l d0,a6
    f046:	             move.l 16(sp),d0
    f04a:	             move.l 12(sp),d1
    f04e:	             jsr -684(a6)
    f052:	             move.l d0,8(sp)
    f056:	             move.l 8(sp),d0
    f05a:	             move.l d0,19c50 <languageName>
	if( languageName == 0) {
    f060:	             move.l 19c50 <languageName>,d0
    f066:	         /-- bne.s f076 <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
    f068:	         |   pea 15cbe <zbuffer.c.4facf542+0x581>
    f06e:	         |   jsr 12130 <KPrintF>
    f074:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    f076:	         \-> clr.l 32(sp)
    f07a:	   /-------- bra.s f0f2 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
    f07c:	/--|-------> tst.l 32(sp)
    f080:	|  |  /----- beq.s f090 <makeLanguageTable+0xb6>
    f082:	|  |  |      move.l 40(sp),-(sp)
    f086:	|  |  |      jsr 6bc <get2bytes>
    f08c:	|  |  |      addq.l #4,sp
    f08e:	|  |  |  /-- bra.s f092 <makeLanguageTable+0xb8>
    f090:	|  |  \--|-> moveq #0,d0
    f092:	|  |     \-> movea.l 19c4c <languageTable>,a0
    f098:	|  |         move.l 32(sp),d1
    f09c:	|  |         add.l d1,d1
    f09e:	|  |         add.l d1,d1
    f0a0:	|  |         adda.l d1,a0
    f0a2:	|  |         move.l d0,(a0)
		languageName[i] = 0;
    f0a4:	|  |         move.l 19c50 <languageName>,d1
    f0aa:	|  |         move.l 32(sp),d0
    f0ae:	|  |         add.l d0,d0
    f0b0:	|  |         add.l d0,d0
    f0b2:	|  |         movea.l d1,a0
    f0b4:	|  |         adda.l d0,a0
    f0b6:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
    f0b8:	|  |         move.l 19b3c <gameVersion>,d0
    f0be:	|  |         cmpi.l #511,d0
    f0c4:	|  |     /-- ble.s f0ee <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
    f0c6:	|  |     |   move.l 19c58 <gameSettings+0x4>,d0
    f0cc:	|  |     +-- beq.s f0ee <makeLanguageTable+0x114>
				languageName[i] = readString (table);
    f0ce:	|  |     |   move.l 19c50 <languageName>,d1
    f0d4:	|  |     |   move.l 32(sp),d0
    f0d8:	|  |     |   add.l d0,d0
    f0da:	|  |     |   add.l d0,d0
    f0dc:	|  |     |   movea.l d1,a2
    f0de:	|  |     |   adda.l d0,a2
    f0e0:	|  |     |   move.l 40(sp),-(sp)
    f0e4:	|  |     |   jsr b02 <readString>
    f0ea:	|  |     |   addq.l #4,sp
    f0ec:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    f0ee:	|  |     \-> addq.l #1,32(sp)
    f0f2:	|  \-------> move.l 19c58 <gameSettings+0x4>,d0
    f0f8:	|            cmp.l 32(sp),d0
    f0fc:	\----------- bcc.w f07c <makeLanguageTable+0xa2>
		}
	}
}
    f100:	             nop
    f102:	             nop
    f104:	             movea.l (sp)+,a2
    f106:	             movea.l (sp)+,a6
    f108:	             lea 28(sp),sp
    f10c:	             rts

0000f10e <readIniFile>:

void readIniFile (char * filename) {
    f10e:	                      lea -564(sp),sp
    f112:	                      move.l a6,-(sp)
    f114:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
    f116:	                      move.l 576(sp),-(sp)
    f11a:	                      jsr b8 <copyString>
    f120:	                      addq.l #4,sp
    f122:	                      move.l d0,-(sp)
    f124:	                      jsr ef22 <getPrefsFilename>
    f12a:	                      addq.l #4,sp
    f12c:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
    f130:	                      move.l 562(sp),558(sp)
    f136:	                      move.l #1005,554(sp)
    f13e:	                      move.l 19b96 <DOSBase>,d0
    f144:	                      movea.l d0,a6
    f146:	                      move.l 558(sp),d1
    f14a:	                      move.l 554(sp),d2
    f14e:	                      jsr -30(a6)
    f152:	                      move.l d0,550(sp)
    f156:	                      move.l 550(sp),d0
    f15a:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
    f15e:	                      clr.l 19c54 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
    f164:	                      move.w #1,19c5c <gameSettings+0x8>
	gameSettings.refreshRate = 0;
    f16c:	                      clr.l 19c5e <gameSettings+0xa>
	gameSettings.antiAlias = 1;
    f172:	                      moveq #1,d0
    f174:	                      move.l d0,19c62 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
    f17a:	                      clr.w 19c66 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
    f180:	                      clr.w 19c68 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
    f186:	                      clr.w 19c6a <gameSettings+0x16>

	FreeVec(langName);
    f18c:	                      move.l 562(sp),542(sp)
    f192:	                      move.l 19b8e <SysBase>,d0
    f198:	                      movea.l d0,a6
    f19a:	                      movea.l 542(sp),a1
    f19e:	                      jsr -690(a6)
	langName = NULL;
    f1a2:	                      clr.l 562(sp)

	if (fp) {
    f1a6:	                      tst.l 546(sp)
    f1aa:	/-------------------- beq.w f488 <readIniFile+0x37a>
		char lineSoFar[257] = "";
    f1ae:	|                     move.l sp,d0
    f1b0:	|                     addi.l #265,d0
    f1b6:	|                     move.l #257,d1
    f1bc:	|                     move.l d1,-(sp)
    f1be:	|                     clr.l -(sp)
    f1c0:	|                     move.l d0,-(sp)
    f1c2:	|                     jsr 120b4 <memset>
    f1c8:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
    f1cc:	|                     move.l sp,d0
    f1ce:	|                     addq.l #8,d0
    f1d0:	|                     move.l #257,d1
    f1d6:	|                     move.l d1,-(sp)
    f1d8:	|                     clr.l -(sp)
    f1da:	|                     move.l d0,-(sp)
    f1dc:	|                     jsr 120b4 <memset>
    f1e2:	|                     lea 12(sp),sp
		unsigned char here = 0;
    f1e6:	|                     clr.b 571(sp)
		char readChar = ' ';
    f1ea:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
    f1f0:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
    f1f6:	|                     clr.w 566(sp)
		LONG tmp = 0;
    f1fa:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
    f1fe:	|  /----------------> move.l 546(sp),534(sp)
    f204:	|  |                  move.l 19b96 <DOSBase>,d0
    f20a:	|  |                  movea.l d0,a6
    f20c:	|  |                  move.l 534(sp),d1
    f210:	|  |                  jsr -306(a6)
    f214:	|  |                  move.l d0,530(sp)
    f218:	|  |                  move.l 530(sp),d0
    f21c:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
    f220:	|  |                  moveq #-1,d1
    f222:	|  |                  cmp.l 538(sp),d1
    f226:	|  |           /----- bne.s f234 <readIniFile+0x126>
				readChar = '\n';
    f228:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
    f22e:	|  |           |      clr.w 568(sp)
    f232:	|  |           |  /-- bra.s f23a <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
    f234:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
    f23a:	|  |              \-> move.b 570(sp),d0
    f23e:	|  |                  ext.w d0
    f240:	|  |                  movea.w d0,a0
    f242:	|  |                  moveq #61,d0
    f244:	|  |                  cmp.l a0,d0
    f246:	|  |     /----------- beq.w f3f0 <readIniFile+0x2e2>
    f24a:	|  |     |            moveq #61,d1
    f24c:	|  |     |            cmp.l a0,d1
    f24e:	|  |  /--|----------- blt.w f3fc <readIniFile+0x2ee>
    f252:	|  |  |  |            moveq #10,d0
    f254:	|  |  |  |            cmp.l a0,d0
    f256:	|  |  |  |        /-- beq.s f260 <readIniFile+0x152>
    f258:	|  |  |  |        |   moveq #13,d1
    f25a:	|  |  |  |        |   cmp.l a0,d1
    f25c:	|  |  +--|--------|-- bne.w f3fc <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
    f260:	|  |  |  |        \-> tst.w 566(sp)
    f264:	|  |  |  |     /----- beq.w f3de <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
    f268:	|  |  |  |     |      pea 15cf2 <zbuffer.c.4facf542+0x5b5>
    f26e:	|  |  |  |     |      move.l sp,d0
    f270:	|  |  |  |     |      addi.l #269,d0
    f276:	|  |  |  |     |      move.l d0,-(sp)
    f278:	|  |  |  |     |      jsr f588 <strcmp>
    f27e:	|  |  |  |     |      addq.l #8,sp
    f280:	|  |  |  |     |      tst.l d0
    f282:	|  |  |  |     |  /-- bne.s f29c <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
    f284:	|  |  |  |     |  |   move.l sp,d0
    f286:	|  |  |  |     |  |   addq.l #8,d0
    f288:	|  |  |  |     |  |   move.l d0,-(sp)
    f28a:	|  |  |  |     |  |   jsr f494 <stringToInt>
    f290:	|  |  |  |     |  |   addq.l #4,sp
    f292:	|  |  |  |     |  |   move.l d0,19c54 <gameSettings>
    f298:	|  |  |  |     +--|-- bra.w f3de <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
    f29c:	|  |  |  |     |  \-> pea 15cfb <zbuffer.c.4facf542+0x5be>
    f2a2:	|  |  |  |     |      move.l sp,d0
    f2a4:	|  |  |  |     |      addi.l #269,d0
    f2aa:	|  |  |  |     |      move.l d0,-(sp)
    f2ac:	|  |  |  |     |      jsr f588 <strcmp>
    f2b2:	|  |  |  |     |      addq.l #8,sp
    f2b4:	|  |  |  |     |      tst.l d0
    f2b6:	|  |  |  |     |  /-- bne.s f2dc <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
    f2b8:	|  |  |  |     |  |   move.l sp,d0
    f2ba:	|  |  |  |     |  |   addq.l #8,d0
    f2bc:	|  |  |  |     |  |   move.l d0,-(sp)
    f2be:	|  |  |  |     |  |   jsr f494 <stringToInt>
    f2c4:	|  |  |  |     |  |   addq.l #4,sp
    f2c6:	|  |  |  |     |  |   tst.l d0
    f2c8:	|  |  |  |     |  |   seq d0
    f2ca:	|  |  |  |     |  |   neg.b d0
    f2cc:	|  |  |  |     |  |   move.b d0,d0
    f2ce:	|  |  |  |     |  |   andi.w #255,d0
    f2d2:	|  |  |  |     |  |   move.w d0,19c5c <gameSettings+0x8>
    f2d8:	|  |  |  |     +--|-- bra.w f3de <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
    f2dc:	|  |  |  |     |  \-> pea 15d02 <zbuffer.c.4facf542+0x5c5>
    f2e2:	|  |  |  |     |      move.l sp,d0
    f2e4:	|  |  |  |     |      addi.l #269,d0
    f2ea:	|  |  |  |     |      move.l d0,-(sp)
    f2ec:	|  |  |  |     |      jsr f588 <strcmp>
    f2f2:	|  |  |  |     |      addq.l #8,sp
    f2f4:	|  |  |  |     |      tst.l d0
    f2f6:	|  |  |  |     |  /-- bne.s f310 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
    f2f8:	|  |  |  |     |  |   move.l sp,d0
    f2fa:	|  |  |  |     |  |   addq.l #8,d0
    f2fc:	|  |  |  |     |  |   move.l d0,-(sp)
    f2fe:	|  |  |  |     |  |   jsr f494 <stringToInt>
    f304:	|  |  |  |     |  |   addq.l #4,sp
    f306:	|  |  |  |     |  |   move.l d0,19c5e <gameSettings+0xa>
    f30c:	|  |  |  |     +--|-- bra.w f3de <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
    f310:	|  |  |  |     |  \-> pea 15d0a <zbuffer.c.4facf542+0x5cd>
    f316:	|  |  |  |     |      move.l sp,d0
    f318:	|  |  |  |     |      addi.l #269,d0
    f31e:	|  |  |  |     |      move.l d0,-(sp)
    f320:	|  |  |  |     |      jsr f588 <strcmp>
    f326:	|  |  |  |     |      addq.l #8,sp
    f328:	|  |  |  |     |      tst.l d0
    f32a:	|  |  |  |     |  /-- bne.s f344 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
    f32c:	|  |  |  |     |  |   move.l sp,d0
    f32e:	|  |  |  |     |  |   addq.l #8,d0
    f330:	|  |  |  |     |  |   move.l d0,-(sp)
    f332:	|  |  |  |     |  |   jsr f494 <stringToInt>
    f338:	|  |  |  |     |  |   addq.l #4,sp
    f33a:	|  |  |  |     |  |   move.l d0,19c62 <gameSettings+0xe>
    f340:	|  |  |  |     +--|-- bra.w f3de <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
    f344:	|  |  |  |     |  \-> pea 15d14 <zbuffer.c.4facf542+0x5d7>
    f34a:	|  |  |  |     |      move.l sp,d0
    f34c:	|  |  |  |     |      addi.l #269,d0
    f352:	|  |  |  |     |      move.l d0,-(sp)
    f354:	|  |  |  |     |      jsr f588 <strcmp>
    f35a:	|  |  |  |     |      addq.l #8,sp
    f35c:	|  |  |  |     |      tst.l d0
    f35e:	|  |  |  |     |  /-- bne.s f378 <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
    f360:	|  |  |  |     |  |   move.l sp,d0
    f362:	|  |  |  |     |  |   addq.l #8,d0
    f364:	|  |  |  |     |  |   move.l d0,-(sp)
    f366:	|  |  |  |     |  |   jsr f494 <stringToInt>
    f36c:	|  |  |  |     |  |   addq.l #4,sp
    f36e:	|  |  |  |     |  |   move.l d0,d0
    f370:	|  |  |  |     |  |   move.w d0,19c66 <gameSettings+0x12>
    f376:	|  |  |  |     +--|-- bra.s f3de <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
    f378:	|  |  |  |     |  \-> pea 15d20 <zbuffer.c.4facf542+0x5e3>
    f37e:	|  |  |  |     |      move.l sp,d0
    f380:	|  |  |  |     |      addi.l #269,d0
    f386:	|  |  |  |     |      move.l d0,-(sp)
    f388:	|  |  |  |     |      jsr f588 <strcmp>
    f38e:	|  |  |  |     |      addq.l #8,sp
    f390:	|  |  |  |     |      tst.l d0
    f392:	|  |  |  |     |  /-- bne.s f3ac <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
    f394:	|  |  |  |     |  |   move.l sp,d0
    f396:	|  |  |  |     |  |   addq.l #8,d0
    f398:	|  |  |  |     |  |   move.l d0,-(sp)
    f39a:	|  |  |  |     |  |   jsr f494 <stringToInt>
    f3a0:	|  |  |  |     |  |   addq.l #4,sp
    f3a2:	|  |  |  |     |  |   move.l d0,d0
    f3a4:	|  |  |  |     |  |   move.w d0,19c68 <gameSettings+0x14>
    f3aa:	|  |  |  |     +--|-- bra.s f3de <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
    f3ac:	|  |  |  |     |  \-> pea 15d2e <zbuffer.c.4facf542+0x5f1>
    f3b2:	|  |  |  |     |      move.l sp,d0
    f3b4:	|  |  |  |     |      addi.l #269,d0
    f3ba:	|  |  |  |     |      move.l d0,-(sp)
    f3bc:	|  |  |  |     |      jsr f588 <strcmp>
    f3c2:	|  |  |  |     |      addq.l #8,sp
    f3c4:	|  |  |  |     |      tst.l d0
    f3c6:	|  |  |  |     +----- bne.s f3de <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
    f3c8:	|  |  |  |     |      move.l sp,d0
    f3ca:	|  |  |  |     |      addq.l #8,d0
    f3cc:	|  |  |  |     |      move.l d0,-(sp)
    f3ce:	|  |  |  |     |      jsr f494 <stringToInt>
    f3d4:	|  |  |  |     |      addq.l #4,sp
    f3d6:	|  |  |  |     |      move.l d0,d0
    f3d8:	|  |  |  |     |      move.w d0,19c6a <gameSettings+0x16>
					}
				}
				here = 0;
    f3de:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
    f3e2:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
    f3e6:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
    f3ea:	|  |  |  |            clr.b 8(sp)
				break;
    f3ee:	|  |  |  |  /-------- bra.s f466 <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
    f3f0:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
    f3f6:	|  |  |     |         clr.b 571(sp)
				break;
    f3fa:	|  |  |     +-------- bra.s f466 <readIniFile+0x358>

				default:
				if (doingSecond) {
    f3fc:	|  |  \-----|-------> tst.w 566(sp)
    f400:	|  |        |  /----- beq.s f434 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
    f402:	|  |        |  |      move.b 571(sp),d0
    f406:	|  |        |  |      move.b d0,d1
    f408:	|  |        |  |      addq.b #1,d1
    f40a:	|  |        |  |      move.b d1,571(sp)
    f40e:	|  |        |  |      move.b d0,d0
    f410:	|  |        |  |      andi.l #255,d0
    f416:	|  |        |  |      lea 572(sp),a0
    f41a:	|  |        |  |      adda.l d0,a0
    f41c:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
    f422:	|  |        |  |      moveq #0,d0
    f424:	|  |        |  |      move.b 571(sp),d0
    f428:	|  |        |  |      lea 572(sp),a0
    f42c:	|  |        |  |      adda.l d0,a0
    f42e:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
    f432:	|  |        |  |  /-- bra.s f464 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
    f434:	|  |        |  \--|-> move.b 571(sp),d0
    f438:	|  |        |     |   move.b d0,d1
    f43a:	|  |        |     |   addq.b #1,d1
    f43c:	|  |        |     |   move.b d1,571(sp)
    f440:	|  |        |     |   move.b d0,d0
    f442:	|  |        |     |   andi.l #255,d0
    f448:	|  |        |     |   lea 572(sp),a0
    f44c:	|  |        |     |   adda.l d0,a0
    f44e:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
    f454:	|  |        |     |   moveq #0,d0
    f456:	|  |        |     |   move.b 571(sp),d0
    f45a:	|  |        |     |   lea 572(sp),a0
    f45e:	|  |        |     |   adda.l d0,a0
    f460:	|  |        |     |   clr.b -307(a0)
				break;
    f464:	|  |        |     \-> nop
			}
		} while (keepGoing);
    f466:	|  |        \-------> tst.w 568(sp)
    f46a:	|  \----------------- bne.w f1fe <readIniFile+0xf0>

		Close(fp);
    f46e:	|                     move.l 546(sp),526(sp)
    f474:	|                     move.l 19b96 <DOSBase>,d0
    f47a:	|                     movea.l d0,a6
    f47c:	|                     move.l 526(sp),d1
    f480:	|                     jsr -36(a6)
    f484:	|                     move.l d0,522(sp)
	}
}
    f488:	\-------------------> nop
    f48a:	                      move.l (sp)+,d2
    f48c:	                      movea.l (sp)+,a6
    f48e:	                      lea 564(sp),sp
    f492:	                      rts

0000f494 <stringToInt>:

unsigned int stringToInt (char * s) {
    f494:	             subq.l #8,sp
	int i = 0;
    f496:	             clr.l 4(sp)
	BOOL negative = FALSE;
    f49a:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
    f49e:	/----------> movea.l 12(sp),a0
    f4a2:	|            move.b (a0),d0
    f4a4:	|            cmpi.b #47,d0
    f4a8:	|        /-- ble.s f4e0 <stringToInt+0x4c>
    f4aa:	|        |   movea.l 12(sp),a0
    f4ae:	|        |   move.b (a0),d0
    f4b0:	|        |   cmpi.b #57,d0
    f4b4:	|        +-- bgt.s f4e0 <stringToInt+0x4c>
			i *= 10;
    f4b6:	|        |   move.l 4(sp),d1
    f4ba:	|        |   move.l d1,d0
    f4bc:	|        |   add.l d0,d0
    f4be:	|        |   add.l d0,d0
    f4c0:	|        |   add.l d1,d0
    f4c2:	|        |   add.l d0,d0
    f4c4:	|        |   move.l d0,4(sp)
			i += *s - '0';
    f4c8:	|        |   movea.l 12(sp),a0
    f4cc:	|        |   move.b (a0),d0
    f4ce:	|        |   ext.w d0
    f4d0:	|        |   movea.w d0,a0
    f4d2:	|        |   moveq #-48,d0
    f4d4:	|        |   add.l a0,d0
    f4d6:	|        |   add.l d0,4(sp)
			s ++;
    f4da:	|        |   addq.l #1,12(sp)
    f4de:	|  /-----|-- bra.s f518 <stringToInt+0x84>
		} else if (*s == '-') {
    f4e0:	|  |     \-> movea.l 12(sp),a0
    f4e4:	|  |         move.b (a0),d0
    f4e6:	|  |         cmpi.b #45,d0
    f4ea:	|  |     /-- bne.s f504 <stringToInt+0x70>
			negative = ! negative;
    f4ec:	|  |     |   tst.w 2(sp)
    f4f0:	|  |     |   seq d0
    f4f2:	|  |     |   neg.b d0
    f4f4:	|  |     |   move.b d0,d0
    f4f6:	|  |     |   andi.w #255,d0
    f4fa:	|  |     |   move.w d0,2(sp)
			s++;
    f4fe:	|  |     |   addq.l #1,12(sp)
    f502:	+--|-----|-- bra.s f49e <stringToInt+0xa>
		} else {
			if (negative)
    f504:	|  |     \-> tst.w 2(sp)
    f508:	|  |     /-- beq.s f512 <stringToInt+0x7e>
				return -i;
    f50a:	|  |     |   move.l 4(sp),d0
    f50e:	|  |     |   neg.l d0
    f510:	|  |  /--|-- bra.s f51a <stringToInt+0x86>
			return i;
    f512:	|  |  |  \-> move.l 4(sp),d0
    f516:	|  |  +----- bra.s f51a <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
    f518:	\--\--|----X bra.s f49e <stringToInt+0xa>
		}
	}
    f51a:	      \----> addq.l #8,sp
    f51c:	             rts

0000f51e <fileExists>:
 *  Helper functions that don't depend on other source files.
 */
#include <proto/dos.h>
#include "helpers.h"

BYTE fileExists(const char * file) {
    f51e:	    lea -28(sp),sp
    f522:	    move.l a6,-(sp)
    f524:	    move.l d2,-(sp)
	BPTR tester;
	BYTE retval = 0;
    f526:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
    f52a:	    move.l 40(sp),30(sp)
    f530:	    move.l #1005,26(sp)
    f538:	    move.l 19b96 <DOSBase>,d0
    f53e:	    movea.l d0,a6
    f540:	    move.l 30(sp),d1
    f544:	    move.l 26(sp),d2
    f548:	    jsr -30(a6)
    f54c:	    move.l d0,22(sp)
    f550:	    move.l 22(sp),d0
    f554:	    move.l d0,18(sp)
	if (tester) {
    f558:	/-- beq.s f57a <fileExists+0x5c>
		retval = 1;
    f55a:	|   move.b #1,35(sp)
		Close(tester);
    f560:	|   move.l 18(sp),14(sp)
    f566:	|   move.l 19b96 <DOSBase>,d0
    f56c:	|   movea.l d0,a6
    f56e:	|   move.l 14(sp),d1
    f572:	|   jsr -36(a6)
    f576:	|   move.l d0,10(sp)
	}
	return retval;
    f57a:	\-> move.b 35(sp),d0
    f57e:	    move.l (sp)+,d2
    f580:	    movea.l (sp)+,a6
    f582:	    lea 28(sp),sp
    f586:	    rts

0000f588 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
    f588:	   /-- bra.s f592 <strcmp+0xa>
    {
        s1++;
    f58a:	/--|-> addq.l #1,4(sp)
        s2++;
    f58e:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
    f592:	|  \-> movea.l 4(sp),a0
    f596:	|      move.b (a0),d0
    f598:	|  /-- beq.s f5aa <strcmp+0x22>
    f59a:	|  |   movea.l 4(sp),a0
    f59e:	|  |   move.b (a0),d1
    f5a0:	|  |   movea.l 8(sp),a0
    f5a4:	|  |   move.b (a0),d0
    f5a6:	|  |   cmp.b d1,d0
    f5a8:	\--|-- beq.s f58a <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
    f5aa:	   \-> movea.l 4(sp),a0
    f5ae:	       move.b (a0),d0
    f5b0:	       moveq #0,d1
    f5b2:	       move.b d0,d1
    f5b4:	       movea.l 8(sp),a0
    f5b8:	       move.b (a0),d0
    f5ba:	       move.b d0,d0
    f5bc:	       andi.l #255,d0
    f5c2:	       sub.l d0,d1
    f5c4:	       move.l d1,d0
}
    f5c6:	       rts

0000f5c8 <strlen>:

long unsigned int strlen (const char *s) 
{  
    f5c8:	       subq.l #4,sp
	long unsigned int i = 0;
    f5ca:	       clr.l (sp)
	while(s[i]) i++; 
    f5cc:	   /-- bra.s f5d0 <strlen+0x8>
    f5ce:	/--|-> addq.l #1,(sp)
    f5d0:	|  \-> movea.l 8(sp),a0
    f5d4:	|      adda.l (sp),a0
    f5d6:	|      move.b (a0),d0
    f5d8:	\----- bne.s f5ce <strlen+0x6>
	return(i);
    f5da:	       move.l (sp),d0
}
    f5dc:	       addq.l #4,sp
    f5de:	       rts

0000f5e0 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
    f5e0:	    nop
    f5e2:	/-> move.l 8(sp),d0
    f5e6:	|   move.l d0,d1
    f5e8:	|   addq.l #1,d1
    f5ea:	|   move.l d1,8(sp)
    f5ee:	|   movea.l 4(sp),a0
    f5f2:	|   lea 1(a0),a1
    f5f6:	|   move.l a1,4(sp)
    f5fa:	|   movea.l d0,a1
    f5fc:	|   move.b (a1),d0
    f5fe:	|   move.b d0,(a0)
    f600:	|   move.b (a0),d0
    f602:	\-- bne.s f5e2 <strcpy+0x2>
}
    f604:	    nop
    f606:	    rts

0000f608 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
    f608:	    lea -20(sp),sp
    f60c:	    move.l a6,-(sp)
    f60e:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
    f610:	    move.l 32(sp),-(sp)
    f614:	    jsr f5c8 <strlen>
    f61a:	    addq.l #4,sp
    f61c:	    move.l d0,d2
    f61e:	    move.l 36(sp),-(sp)
    f622:	    jsr f5c8 <strlen>
    f628:	    addq.l #4,sp
    f62a:	    add.l d2,d0
    f62c:	    move.l d0,d1
    f62e:	    addq.l #1,d1
    f630:	    move.l d1,20(sp)
    f634:	    clr.l 16(sp)
    f638:	    move.l 19b8e <SysBase>,d0
    f63e:	    movea.l d0,a6
    f640:	    move.l 20(sp),d0
    f644:	    move.l 16(sp),d1
    f648:	    jsr -684(a6)
    f64c:	    move.l d0,12(sp)
    f650:	    move.l 12(sp),d0
    f654:	    move.l d0,8(sp)
	char * t = newString;
    f658:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
    f65e:	    nop
    f660:	/-> move.l 32(sp),d0
    f664:	|   move.l d0,d1
    f666:	|   addq.l #1,d1
    f668:	|   move.l d1,32(sp)
    f66c:	|   movea.l 24(sp),a0
    f670:	|   lea 1(a0),a1
    f674:	|   move.l a1,24(sp)
    f678:	|   movea.l d0,a1
    f67a:	|   move.b (a1),d0
    f67c:	|   move.b d0,(a0)
    f67e:	|   move.b (a0),d0
    f680:	\-- bne.s f660 <joinStrings+0x58>
	t--;
    f682:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
    f686:	    nop
    f688:	/-> move.l 36(sp),d0
    f68c:	|   move.l d0,d1
    f68e:	|   addq.l #1,d1
    f690:	|   move.l d1,36(sp)
    f694:	|   movea.l 24(sp),a0
    f698:	|   lea 1(a0),a1
    f69c:	|   move.l a1,24(sp)
    f6a0:	|   movea.l d0,a1
    f6a2:	|   move.b (a1),d0
    f6a4:	|   move.b d0,(a0)
    f6a6:	|   move.b (a0),d0
    f6a8:	\-- bne.s f688 <joinStrings+0x80>

	return newString;
    f6aa:	    move.l 8(sp),d0
}
    f6ae:	    move.l (sp)+,d2
    f6b0:	    movea.l (sp)+,a6
    f6b2:	    lea 20(sp),sp
    f6b6:	    rts

0000f6b8 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
    f6b8:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
    f6bc:	       moveq #10,d0
    f6be:	       cmp.l 28(sp),d0
    f6c2:	   /-- bne.s f6e0 <itoa+0x28>
    f6c4:	   |   tst.l 20(sp)
    f6c8:	   +-- bge.s f6e0 <itoa+0x28>
        *str++ = '-';
    f6ca:	   |   move.l 24(sp),d0
    f6ce:	   |   move.l d0,d1
    f6d0:	   |   addq.l #1,d1
    f6d2:	   |   move.l d1,24(sp)
    f6d6:	   |   movea.l d0,a0
    f6d8:	   |   move.b #45,(a0)
        value *= -1;
    f6dc:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
    f6e0:	   \-> move.l 24(sp),12(sp)
    f6e6:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
    f6ec:	   /-> move.l 20(sp),d0
    f6f0:	   |   move.l 28(sp),-(sp)
    f6f4:	   |   move.l d0,-(sp)
    f6f6:	   |   jsr 12b8e <__modsi3>
    f6fc:	   |   addq.l #8,sp
    f6fe:	   |   movea.l d0,a1
    f700:	   |   move.l 12(sp),d0
    f704:	   |   move.l d0,d1
    f706:	   |   addq.l #1,d1
    f708:	   |   move.l d1,12(sp)
    f70c:	   |   lea 15d38 <zbuffer.c.4facf542+0x5fb>,a0
    f712:	   |   move.b (0,a1,a0.l),d1
    f716:	   |   movea.l d0,a0
    f718:	   |   move.b d1,(a0)
        value /= base;
    f71a:	   |   move.l 28(sp),-(sp)
    f71e:	   |   move.l 24(sp),-(sp)
    f722:	   |   jsr 12b60 <__divsi3>
    f728:	   |   addq.l #8,sp
    f72a:	   |   move.l d0,20(sp)
    } while (value);
    f72e:	   \-- bne.s f6ec <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
    f730:	       move.l 12(sp),d0
    f734:	       move.l d0,d1
    f736:	       subq.l #1,d1
    f738:	       move.l d1,12(sp)
    f73c:	       movea.l d0,a0
    f73e:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
    f740:	       move.l 4(sp),8(sp)
    f746:	   /-- bra.s f76c <itoa+0xb4>
        char temp = *low;
    f748:	/--|-> movea.l 8(sp),a0
    f74c:	|  |   move.b (a0),3(sp)
        *low = *ptr;
    f750:	|  |   movea.l 12(sp),a0
    f754:	|  |   move.b (a0),d0
    f756:	|  |   movea.l 8(sp),a0
    f75a:	|  |   move.b d0,(a0)
        *ptr = temp;
    f75c:	|  |   movea.l 12(sp),a0
    f760:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
    f764:	|  |   addq.l #1,8(sp)
    f768:	|  |   subq.l #1,12(sp)
    f76c:	|  \-> move.l 8(sp),d0
    f770:	|      cmp.l 12(sp),d0
    f774:	\----- bcs.s f748 <itoa+0x90>
    }
    return rc;
    f776:	       move.l 4(sp),d0
}
    f77a:	       lea 16(sp),sp
    f77e:	       rts

0000f780 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
    f780:	                            lea -40(sp),sp
    f784:	                            move.l d2,-(sp)
    char* s = str;
    f786:	                            move.l 48(sp),40(sp)
    const char* p = format;
    f78c:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
    f792:	   /----------------------- bra.w f8c6 <vsprintf2+0x146>
        if (*p == '%') {
    f796:	/--|----------------------> movea.l 36(sp),a0
    f79a:	|  |                        move.b (a0),d0
    f79c:	|  |                        cmpi.b #37,d0
    f7a0:	|  |  /-------------------- bne.w f8ac <vsprintf2+0x12c>
            switch (*++p) {
    f7a4:	|  |  |                     addq.l #1,36(sp)
    f7a8:	|  |  |                     movea.l 36(sp),a0
    f7ac:	|  |  |                     move.b (a0),d0
    f7ae:	|  |  |                     ext.w d0
    f7b0:	|  |  |                     movea.w d0,a0
    f7b2:	|  |  |                     moveq #115,d0
    f7b4:	|  |  |                     cmp.l a0,d0
    f7b6:	|  |  |           /-------- beq.s f82e <vsprintf2+0xae>
    f7b8:	|  |  |           |         moveq #115,d1
    f7ba:	|  |  |           |         cmp.l a0,d1
    f7bc:	|  |  |  /--------|-------- blt.w f894 <vsprintf2+0x114>
    f7c0:	|  |  |  |        |         moveq #99,d2
    f7c2:	|  |  |  |        |         cmp.l a0,d2
    f7c4:	|  |  |  |  /-----|-------- beq.w f86c <vsprintf2+0xec>
    f7c8:	|  |  |  |  |     |         moveq #100,d0
    f7ca:	|  |  |  |  |     |         cmp.l a0,d0
    f7cc:	|  |  |  +--|-----|-------- bne.w f894 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
    f7d0:	|  |  |  |  |     |         addq.l #4,56(sp)
    f7d4:	|  |  |  |  |     |         movea.l 56(sp),a0
    f7d8:	|  |  |  |  |     |         move.l (a0),d0
    f7da:	|  |  |  |  |     |         move.l d0,d1
    f7dc:	|  |  |  |  |     |         subq.l #1,d1
    f7de:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
    f7e2:	|  |  |  |  |     |         pea a <_start+0xa>
    f7e6:	|  |  |  |  |     |         lea 8(sp),a0
    f7ea:	|  |  |  |  |     |         move.l a0,-(sp)
    f7ec:	|  |  |  |  |     |         move.l 32(sp),-(sp)
    f7f0:	|  |  |  |  |     |         jsr f6b8 <itoa>
    f7f6:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
    f7fa:	|  |  |  |  |     |         lea 44(sp),a0
    f7fe:	|  |  |  |  |     |         lea -40(a0),a0
    f802:	|  |  |  |  |     |         move.l a0,28(sp)
    f806:	|  |  |  |  |     |     /-- bra.s f822 <vsprintf2+0xa2>
                        *s++ = *b;
    f808:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
    f80c:	|  |  |  |  |     |  |  |   move.l d0,d1
    f80e:	|  |  |  |  |     |  |  |   addq.l #1,d1
    f810:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
    f814:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
    f818:	|  |  |  |  |     |  |  |   move.b (a0),d1
    f81a:	|  |  |  |  |     |  |  |   movea.l d0,a0
    f81c:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
    f81e:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
    f822:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
    f826:	|  |  |  |  |     |  |      move.b (a0),d0
    f828:	|  |  |  |  |     |  \----- bne.s f808 <vsprintf2+0x88>
                    }
                    break;
    f82a:	|  |  |  |  |  /--|-------- bra.w f8c2 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
    f82e:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
    f832:	|  |  |  |  |  |            movea.l 56(sp),a0
    f836:	|  |  |  |  |  |            move.l (a0),d0
    f838:	|  |  |  |  |  |            move.l d0,d1
    f83a:	|  |  |  |  |  |            subq.l #1,d1
    f83c:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
    f840:	|  |  |  |  |  |        /-- bra.s f862 <vsprintf2+0xe2>
                        *s++ = *sval++;
    f842:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
    f846:	|  |  |  |  |  |     |  |   move.l d1,d2
    f848:	|  |  |  |  |  |     |  |   addq.l #1,d2
    f84a:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
    f84e:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
    f852:	|  |  |  |  |  |     |  |   move.l d0,d2
    f854:	|  |  |  |  |  |     |  |   addq.l #1,d2
    f856:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
    f85a:	|  |  |  |  |  |     |  |   movea.l d1,a0
    f85c:	|  |  |  |  |  |     |  |   move.b (a0),d1
    f85e:	|  |  |  |  |  |     |  |   movea.l d0,a0
    f860:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
    f862:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
    f866:	|  |  |  |  |  |     |      move.b (a0),d0
    f868:	|  |  |  |  |  |     \----- bne.s f842 <vsprintf2+0xc2>
                    }
                    break;
    f86a:	|  |  |  |  |  +----------- bra.s f8c2 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
    f86c:	|  |  |  |  \--|----------> addq.l #4,56(sp)
    f870:	|  |  |  |     |            movea.l 56(sp),a0
    f874:	|  |  |  |     |            move.l (a0),d0
    f876:	|  |  |  |     |            move.l d0,d1
    f878:	|  |  |  |     |            subq.l #1,d1
    f87a:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
    f87e:	|  |  |  |     |            move.l 40(sp),d0
    f882:	|  |  |  |     |            move.l d0,d2
    f884:	|  |  |  |     |            addq.l #1,d2
    f886:	|  |  |  |     |            move.l d2,40(sp)
    f88a:	|  |  |  |     |            move.l 24(sp),d1
    f88e:	|  |  |  |     |            movea.l d0,a0
    f890:	|  |  |  |     |            move.b d1,(a0)
                    break;
    f892:	|  |  |  |     +----------- bra.s f8c2 <vsprintf2+0x142>
                default:
                    *s++ = *p;
    f894:	|  |  |  \-----|----------> move.l 40(sp),d0
    f898:	|  |  |        |            move.l d0,d1
    f89a:	|  |  |        |            addq.l #1,d1
    f89c:	|  |  |        |            move.l d1,40(sp)
    f8a0:	|  |  |        |            movea.l 36(sp),a0
    f8a4:	|  |  |        |            move.b (a0),d1
    f8a6:	|  |  |        |            movea.l d0,a0
    f8a8:	|  |  |        |            move.b d1,(a0)
                    break;
    f8aa:	|  |  |        +----------- bra.s f8c2 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
    f8ac:	|  |  \--------|----------> move.l 40(sp),d0
    f8b0:	|  |           |            move.l d0,d1
    f8b2:	|  |           |            addq.l #1,d1
    f8b4:	|  |           |            move.l d1,40(sp)
    f8b8:	|  |           |            movea.l 36(sp),a0
    f8bc:	|  |           |            move.b (a0),d1
    f8be:	|  |           |            movea.l d0,a0
    f8c0:	|  |           |            move.b d1,(a0)
        }
        p++;
    f8c2:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
    f8c6:	|  \----------------------> movea.l 36(sp),a0
    f8ca:	|                           move.b (a0),d0
    f8cc:	\-------------------------- bne.w f796 <vsprintf2+0x16>
    }
    *s = '\0';
    f8d0:	                            movea.l 40(sp),a0
    f8d4:	                            clr.b (a0)
    return s - str;
    f8d6:	                            move.l 40(sp),d0
    f8da:	                            sub.l 48(sp),d0
}
    f8de:	                            move.l (sp)+,d2
    f8e0:	                            lea 40(sp),sp
    f8e4:	                            rts

0000f8e6 <sprintf>:

int sprintf(char* str, const char* format, ...) {
    f8e6:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
    f8e8:	moveq #16,d0
    f8ea:	add.l sp,d0
    f8ec:	move.l d0,d1
    f8ee:	addq.l #4,d1
    f8f0:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
    f8f4:	move.l 16(sp),d0
    f8f8:	move.l 4(sp),-(sp)
    f8fc:	move.l d0,-(sp)
    f8fe:	move.l 20(sp),-(sp)
    f902:	jsr f780 <vsprintf2>
    f908:	lea 12(sp),sp
    f90c:	move.l d0,(sp)
    va_end(args);
    f90e:	clr.l 4(sp)

    return done;
    f912:	move.l (sp),d0
}
    f914:	addq.l #8,sp
    f916:	rts

0000f918 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
    f918:	       lea -20(sp),sp
    f91c:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
    f91e:	       moveq #12,d0
    f920:	       move.l d0,20(sp)
    f924:	       clr.l 16(sp)
    f928:	       move.l 19b8e <SysBase>,d0
    f92e:	       movea.l d0,a6
    f930:	       move.l 20(sp),d0
    f934:	       move.l 16(sp),d1
    f938:	       jsr -684(a6)
    f93c:	       move.l d0,12(sp)
    f940:	       move.l 12(sp),d0
    f944:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
    f948:	   /-- bne.s f94e <addVarToStack+0x36>
    f94a:	   |   clr.w d0
    f94c:	/--|-- bra.s f996 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
    f94e:	|  \-> move.l 8(sp),d0
    f952:	|      move.l d0,-(sp)
    f954:	|      move.l 32(sp),-(sp)
    f958:	|      jsr 1047a <copyMain>
    f95e:	|      addq.l #8,sp
    f960:	|      tst.w d0
    f962:	|  /-- bne.s f97e <addVarToStack+0x66>
        FreeVec(newStack);
    f964:	|  |   move.l 8(sp),4(sp)
    f96a:	|  |   move.l 19b8e <SysBase>,d0
    f970:	|  |   movea.l d0,a6
    f972:	|  |   movea.l 4(sp),a1
    f976:	|  |   jsr -690(a6)
        return FALSE;
    f97a:	|  |   clr.w d0
    f97c:	+--|-- bra.s f996 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
    f97e:	|  \-> movea.l 32(sp),a0
    f982:	|      move.l (a0),d0
    f984:	|      movea.l 8(sp),a0
    f988:	|      move.l d0,8(a0)
    *thisStack = newStack;
    f98c:	|      movea.l 32(sp),a0
    f990:	|      move.l 8(sp),(a0)
    return TRUE;
    f994:	|      moveq #1,d0
}
    f996:	\----> movea.l (sp)+,a6
    f998:	       lea 20(sp),sp
    f99c:	       rts

0000f99e <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
    f99e:	       lea -16(sp),sp
    f9a2:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
    f9a4:	       moveq #12,d0
    f9a6:	       move.l d0,16(sp)
    f9aa:	       clr.l 12(sp)
    f9ae:	       move.l 19b8e <SysBase>,d0
    f9b4:	       movea.l d0,a6
    f9b6:	       move.l 16(sp),d0
    f9ba:	       move.l 12(sp),d1
    f9be:	       jsr -684(a6)
    f9c2:	       move.l d0,8(sp)
    f9c6:	       move.l 8(sp),d0
    f9ca:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
    f9ce:	   /-- bne.s f9d4 <addVarToStackQuick+0x36>
    f9d0:	   |   clr.w d0
    f9d2:	/--|-- bra.s fa0a <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
    f9d4:	|  \-> move.l 4(sp),d0
    f9d8:	|      pea 8 <_start+0x8>
    f9dc:	|      move.l 28(sp),-(sp)
    f9e0:	|      move.l d0,-(sp)
    f9e2:	|      jsr 120e4 <memcpy>
    f9e8:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
    f9ec:	|      movea.l 24(sp),a0
    f9f0:	|      clr.l (a0)

    newStack->next = *thisStack;
    f9f2:	|      movea.l 28(sp),a0
    f9f6:	|      move.l (a0),d0
    f9f8:	|      movea.l 4(sp),a0
    f9fc:	|      move.l d0,8(a0)
    *thisStack = newStack;
    fa00:	|      movea.l 28(sp),a0
    fa04:	|      move.l 4(sp),(a0)
    return TRUE;
    fa08:	|      moveq #1,d0
}
    fa0a:	\----> movea.l (sp)+,a6
    fa0c:	       lea 16(sp),sp
    fa10:	       rts

0000fa12 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
    fa12:	       lea -16(sp),sp
    fa16:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
    fa18:	       movea.l 24(sp),a0
    fa1c:	       move.l (a0),d0
    fa1e:	       moveq #1,d1
    fa20:	       cmp.l d0,d1
    fa22:	   /-- bne.s fa4c <addVariablesInSecond+0x3a>
    fa24:	   |   movea.l 28(sp),a0
    fa28:	   |   move.l (a0),d0
    fa2a:	   |   moveq #1,d1
    fa2c:	   |   cmp.l d0,d1
    fa2e:	   +-- bne.s fa4c <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
    fa30:	   |   movea.l 28(sp),a0
    fa34:	   |   move.l 4(a0),d1
    fa38:	   |   movea.l 24(sp),a0
    fa3c:	   |   move.l 4(a0),d0
    fa40:	   |   add.l d1,d0
    fa42:	   |   movea.l 28(sp),a0
    fa46:	   |   move.l d0,4(a0)
    fa4a:	/--|-- bra.s fac6 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
    fa4c:	|  \-> move.l 24(sp),-(sp)
    fa50:	|      jsr 106b2 <getTextFromAnyVar>
    fa56:	|      addq.l #4,sp
    fa58:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
    fa5c:	|      move.l 28(sp),-(sp)
    fa60:	|      jsr 106b2 <getTextFromAnyVar>
    fa66:	|      addq.l #4,sp
    fa68:	|      move.l d0,12(sp)

		unlinkVar(var2);
    fa6c:	|      move.l 28(sp),-(sp)
    fa70:	|      jsr 1032a <unlinkVar>
    fa76:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
    fa78:	|      move.l 12(sp),-(sp)
    fa7c:	|      move.l 20(sp),-(sp)
    fa80:	|      jsr f608 <joinStrings>
    fa86:	|      addq.l #8,sp
    fa88:	|      movea.l 28(sp),a0
    fa8c:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
    fa90:	|      movea.l 28(sp),a0
    fa94:	|      moveq #3,d0
    fa96:	|      move.l d0,(a0)
		FreeVec(string1);
    fa98:	|      move.l 16(sp),8(sp)
    fa9e:	|      move.l 19b8e <SysBase>,d0
    faa4:	|      movea.l d0,a6
    faa6:	|      movea.l 8(sp),a1
    faaa:	|      jsr -690(a6)
		FreeVec(string2);
    faae:	|      move.l 12(sp),4(sp)
    fab4:	|      move.l 19b8e <SysBase>,d0
    faba:	|      movea.l d0,a6
    fabc:	|      movea.l 4(sp),a1
    fac0:	|      jsr -690(a6)
	}
}
    fac4:	|      nop
    fac6:	\----> nop
    fac8:	       movea.l (sp)+,a6
    faca:	       lea 16(sp),sp
    face:	       rts

0000fad0 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
    fad0:	movea.l 8(sp),a0
    fad4:	move.l 4(a0),-(sp)
    fad8:	move.l (a0),-(sp)
    fada:	movea.l 12(sp),a0
    fade:	move.l 4(a0),-(sp)
    fae2:	move.l (a0),-(sp)
    fae4:	jsr fb06 <compareVars>
    faea:	lea 16(sp),sp
    faee:	move.l d0,-(sp)
    faf0:	pea 1 <_start+0x1>
    faf4:	move.l 16(sp),-(sp)
    faf8:	jsr 109ce <setVariable>
    fafe:	lea 12(sp),sp
}
    fb02:	nop
    fb04:	rts

0000fb06 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
    fb06:	       subq.l #4,sp
	int re = 0;
    fb08:	       clr.l (sp)
	if (var1.varType == var2.varType) {
    fb0a:	       move.l 8(sp),d1
    fb0e:	       move.l 16(sp),d0
    fb12:	       cmp.l d1,d0
    fb14:	/----- bne.w fbdc <compareVars+0xd6>
		switch (var1.varType) {
    fb18:	|      move.l 8(sp),d0
    fb1c:	|      moveq #9,d1
    fb1e:	|      cmp.l d0,d1
    fb20:	|  /-- bcs.w fbc4 <compareVars+0xbe>
    fb24:	|  |   add.l d0,d0
    fb26:	|  |   movea.l d0,a0
    fb28:	|  |   adda.l #64308,a0
    fb2e:	|  |   move.w (a0),d0
    fb30:	|  |   jmp (fb34 <compareVars+0x2e>,pc,d0.w)
    fb34:	|  |   ori.b #-112,(a4)
    fb38:	|  |   ori.l #5243024,(a0)
    fb3e:	|  |   ori.l #7733392,(a0)
    fb44:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
    fb4a:	|  |   move.l d0,(sp)
			break;
    fb4c:	+--|-- bra.w fbdc <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
    fb50:	|  |   move.l 12(sp),d1
    fb54:	|  |   move.l 20(sp),d0
    fb58:	|  |   cmp.l d1,d0
    fb5a:	|  |   seq d0
    fb5c:	|  |   neg.b d0
    fb5e:	|  |   move.b d0,d0
    fb60:	|  |   andi.l #255,d0
    fb66:	|  |   move.l d0,(sp)
			break;
    fb68:	+--|-- bra.s fbdc <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
    fb6a:	|  |   move.l 12(sp),d1
    fb6e:	|  |   move.l 20(sp),d0
    fb72:	|  |   cmp.l d1,d0
    fb74:	|  |   seq d0
    fb76:	|  |   neg.b d0
    fb78:	|  |   move.b d0,d0
    fb7a:	|  |   andi.l #255,d0
    fb80:	|  |   move.l d0,(sp)
			break;
    fb82:	+--|-- bra.s fbdc <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
    fb84:	|  |   move.l 20(sp),d1
    fb88:	|  |   move.l 12(sp),d0
    fb8c:	|  |   move.l d1,-(sp)
    fb8e:	|  |   move.l d0,-(sp)
    fb90:	|  |   jsr f588 <strcmp>
    fb96:	|  |   addq.l #8,sp
    fb98:	|  |   tst.l d0
    fb9a:	|  |   seq d0
    fb9c:	|  |   neg.b d0
    fb9e:	|  |   move.b d0,d0
    fba0:	|  |   andi.l #255,d0
    fba6:	|  |   move.l d0,(sp)
			break;
    fba8:	+--|-- bra.s fbdc <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
    fbaa:	|  |   move.l 12(sp),d1
    fbae:	|  |   move.l 20(sp),d0
    fbb2:	|  |   cmp.l d1,d0
    fbb4:	|  |   seq d0
    fbb6:	|  |   neg.b d0
    fbb8:	|  |   move.b d0,d0
    fbba:	|  |   andi.l #255,d0
    fbc0:	|  |   move.l d0,(sp)
			break;
    fbc2:	+--|-- bra.s fbdc <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
    fbc4:	|  \-> move.l 12(sp),d1
    fbc8:	|      move.l 20(sp),d0
    fbcc:	|      cmp.l d1,d0
    fbce:	|      seq d0
    fbd0:	|      neg.b d0
    fbd2:	|      move.b d0,d0
    fbd4:	|      andi.l #255,d0
    fbda:	|      move.l d0,(sp)
		}
	}
	return re;
    fbdc:	\----> move.l (sp),d0
}
    fbde:	       addq.l #4,sp
    fbe0:	       rts

0000fbe2 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
    fbe2:	             lea -16(sp),sp
    fbe6:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
    fbe8:	             movea.l 28(sp),a0
    fbec:	             moveq #6,d0
    fbee:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    fbf0:	             moveq #12,d0
    fbf2:	             move.l d0,12(sp)
    fbf6:	             clr.l 8(sp)
    fbfa:	             move.l 19b8e <SysBase>,d0
    fc00:	             movea.l d0,a6
    fc02:	             move.l 12(sp),d0
    fc06:	             move.l 8(sp),d1
    fc0a:	             jsr -684(a6)
    fc0e:	             move.l d0,4(sp)
    fc12:	             move.l 4(sp),d0
    fc16:	             movea.l 28(sp),a0
    fc1a:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
    fc1e:	             movea.l 28(sp),a0
    fc22:	             move.l 4(a0),d0
    fc26:	         /-- bne.s fc2e <copyStack+0x4c>
    fc28:	         |   clr.w d0
    fc2a:	/--------|-- bra.w fcb0 <copyStack+0xce>
	to->varData.theStack->first = NULL;
    fc2e:	|        \-> movea.l 28(sp),a0
    fc32:	|            movea.l 4(a0),a0
    fc36:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
    fc38:	|            movea.l 28(sp),a0
    fc3c:	|            movea.l 4(a0),a0
    fc40:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
    fc44:	|            movea.l 28(sp),a0
    fc48:	|            movea.l 4(a0),a0
    fc4c:	|            moveq #1,d0
    fc4e:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
    fc52:	|            movea.l 24(sp),a0
    fc56:	|            movea.l 4(a0),a0
    fc5a:	|            move.l (a0),16(sp)

	while (a) {
    fc5e:	|     /----- bra.s fca8 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
    fc60:	|  /--|----> movea.l 28(sp),a0
    fc64:	|  |  |      move.l 4(a0),d0
    fc68:	|  |  |      move.l d0,d1
    fc6a:	|  |  |      move.l 16(sp),d0
    fc6e:	|  |  |      move.l d1,-(sp)
    fc70:	|  |  |      move.l d0,-(sp)
    fc72:	|  |  |      jsr f918 <addVarToStack>
    fc78:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
    fc7a:	|  |  |      movea.l 28(sp),a0
    fc7e:	|  |  |      movea.l 4(a0),a0
    fc82:	|  |  |      move.l 4(a0),d0
    fc86:	|  |  |  /-- bne.s fc9e <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
    fc88:	|  |  |  |   movea.l 28(sp),a0
    fc8c:	|  |  |  |   movea.l 4(a0),a1
    fc90:	|  |  |  |   movea.l 28(sp),a0
    fc94:	|  |  |  |   movea.l 4(a0),a0
    fc98:	|  |  |  |   move.l (a1),d0
    fc9a:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
    fc9e:	|  |  |  \-> movea.l 16(sp),a0
    fca2:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
    fca8:	|  |  \----> tst.l 16(sp)
    fcac:	|  \-------- bne.s fc60 <copyStack+0x7e>
	}

	return TRUE;
    fcae:	|            moveq #1,d0
}
    fcb0:	\----------> movea.l (sp)+,a6
    fcb2:	             lea 16(sp),sp
    fcb6:	             rts

0000fcb8 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
    fcb8:	                lea -20(sp),sp
    fcbc:	                move.l a6,-(sp)
    fcbe:	                move.l 36(sp),d0
    fcc2:	                move.w d0,d0
    fcc4:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
    fcc8:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
    fcce:	                clr.l 16(sp)

    while (*huntVar) {
    fcd2:	   /----------- bra.s fd50 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
    fcd4:	/--|----------> movea.l 20(sp),a0
    fcd8:	|  |            movea.l (a0),a0
    fcda:	|  |            movea.l 28(sp),a1
    fcde:	|  |            move.l 4(a1),-(sp)
    fce2:	|  |            move.l (a1),-(sp)
    fce4:	|  |            move.l 4(a0),-(sp)
    fce8:	|  |            move.l (a0),-(sp)
    fcea:	|  |            jsr fb06 <compareVars>
    fcf0:	|  |            lea 16(sp),sp
    fcf4:	|  |            tst.l d0
    fcf6:	|  |  /-------- beq.s fd42 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
    fcf8:	|  |  |         movea.l 20(sp),a0
    fcfc:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
    fd00:	|  |  |         movea.l 12(sp),a0
    fd04:	|  |  |         move.l 8(a0),d0
    fd08:	|  |  |         movea.l 20(sp),a0
    fd0c:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
    fd0e:	|  |  |         move.l 12(sp),d0
    fd12:	|  |  |         move.l d0,-(sp)
    fd14:	|  |  |         jsr 1032a <unlinkVar>
    fd1a:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
    fd1c:	|  |  |         move.l 12(sp),8(sp)
    fd22:	|  |  |         move.l 19b8e <SysBase>,d0
    fd28:	|  |  |         movea.l d0,a6
    fd2a:	|  |  |         movea.l 8(sp),a1
    fd2e:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
    fd32:	|  |  |         tst.w 6(sp)
    fd36:	|  |  |     /-- bne.s fd3c <deleteVarFromStack+0x84>
    fd38:	|  |  |     |   moveq #1,d0
    fd3a:	|  |  |  /--|-- bra.s fd5e <deleteVarFromStack+0xa6>
            reply++;
    fd3c:	|  |  |  |  \-> addq.l #1,16(sp)
    fd40:	|  +--|--|----- bra.s fd50 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
    fd42:	|  |  \--|----> movea.l 20(sp),a0
    fd46:	|  |     |      move.l (a0),d0
    fd48:	|  |     |      move.l d0,d1
    fd4a:	|  |     |      addq.l #8,d1
    fd4c:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
    fd50:	|  \-----|----> movea.l 20(sp),a0
    fd54:	|        |      move.l (a0),d0
    fd56:	\--------|----- bne.w fcd4 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
    fd5a:	         |      move.l 16(sp),d0
}
    fd5e:	         \----> movea.l (sp)+,a6
    fd60:	                lea 20(sp),sp
    fd64:	                rts

0000fd66 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
    fd66:	       movea.l 4(sp),a0
    fd6a:	       move.l 4(a0),d0
    fd6e:	       cmp.l 8(sp),d0
    fd72:	   /-- bhi.s fd78 <fastArrayGetByIndex+0x12>
    fd74:	   |   moveq #0,d0
    fd76:	/--|-- bra.s fd86 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
    fd78:	|  \-> movea.l 4(sp),a0
    fd7c:	|      move.l (a0),d1
    fd7e:	|      move.l 8(sp),d0
    fd82:	|      lsl.l #3,d0
    fd84:	|      add.l d1,d0
}
    fd86:	\----> rts

0000fd88 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
    fd88:	                lea -32(sp),sp
    fd8c:	                move.l a6,-(sp)
    fd8e:	                move.l a2,-(sp)
    struct persona *p = NULL;
    fd90:	                clr.l 36(sp)

    switch (thisVar->varType) {
    fd94:	                movea.l 44(sp),a0
    fd98:	                move.l (a0),d0
    fd9a:	                moveq #8,d1
    fd9c:	                cmp.l d0,d1
    fd9e:	            /-- beq.s fdac <getCostumeFromVar+0x24>
    fda0:	            |   moveq #9,d1
    fda2:	            |   cmp.l d0,d1
    fda4:	   /--------|-- beq.w fe5a <getCostumeFromVar+0xd2>
    fda8:	/--|--------|-- bra.w fe64 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
    fdac:	|  |        \-> moveq #8,d0
    fdae:	|  |            move.l d0,28(sp)
    fdb2:	|  |            clr.l 24(sp)
    fdb6:	|  |            move.l 19b8e <SysBase>,d0
    fdbc:	|  |            movea.l d0,a6
    fdbe:	|  |            move.l 28(sp),d0
    fdc2:	|  |            move.l 24(sp),d1
    fdc6:	|  |            jsr -684(a6)
    fdca:	|  |            move.l d0,20(sp)
    fdce:	|  |            move.l 20(sp),d0
    fdd2:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
    fdd6:	|  |        /-- bne.s fdde <getCostumeFromVar+0x56>
    fdd8:	|  |        |   moveq #0,d0
    fdda:	|  |  /-----|-- bra.w fe8e <getCostumeFromVar+0x106>
            p->numDirections = 1;
    fdde:	|  |  |     \-> movea.l 36(sp),a0
    fde2:	|  |  |         moveq #1,d1
    fde4:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
    fde8:	|  |  |         moveq #12,d0
    fdea:	|  |  |         move.l d0,16(sp)
    fdee:	|  |  |         clr.l 12(sp)
    fdf2:	|  |  |         move.l 19b8e <SysBase>,d0
    fdf8:	|  |  |         movea.l d0,a6
    fdfa:	|  |  |         move.l 16(sp),d0
    fdfe:	|  |  |         move.l 12(sp),d1
    fe02:	|  |  |         jsr -684(a6)
    fe06:	|  |  |         move.l d0,8(sp)
    fe0a:	|  |  |         move.l 8(sp),d0
    fe0e:	|  |  |         movea.l 36(sp),a0
    fe12:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
    fe14:	|  |  |         movea.l 36(sp),a0
    fe18:	|  |  |         move.l (a0),d0
    fe1a:	|  |  |     /-- bne.s fe20 <getCostumeFromVar+0x98>
    fe1c:	|  |  |     |   moveq #0,d0
    fe1e:	|  |  +-----|-- bra.s fe8e <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
    fe20:	|  |  |     \-> clr.l 32(sp)
    fe24:	|  |  |     /-- bra.s fe50 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
    fe26:	|  |  |  /--|-> movea.l 44(sp),a0
    fe2a:	|  |  |  |  |   move.l 4(a0),d0
    fe2e:	|  |  |  |  |   movea.l 36(sp),a0
    fe32:	|  |  |  |  |   movea.l (a0),a0
    fe34:	|  |  |  |  |   move.l 32(sp),d1
    fe38:	|  |  |  |  |   add.l d1,d1
    fe3a:	|  |  |  |  |   add.l d1,d1
    fe3c:	|  |  |  |  |   lea (0,a0,d1.l),a2
    fe40:	|  |  |  |  |   move.l d0,-(sp)
    fe42:	|  |  |  |  |   jsr 5872 <copyAnim>
    fe48:	|  |  |  |  |   addq.l #4,sp
    fe4a:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
    fe4c:	|  |  |  |  |   addq.l #1,32(sp)
    fe50:	|  |  |  |  \-> moveq #2,d1
    fe52:	|  |  |  |      cmp.l 32(sp),d1
    fe56:	|  |  |  \----- bge.s fe26 <getCostumeFromVar+0x9e>
            }
            break;
    fe58:	|  |  |     /-- bra.s fe8a <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
    fe5a:	|  \--|-----|-> movea.l 44(sp),a0
    fe5e:	|     |     |   move.l 4(a0),d0
    fe62:	|     +-----|-- bra.s fe8e <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
    fe64:	\-----|-----|-> movea.l 44(sp),a0
    fe68:	      |     |   move.l (a0),d0
    fe6a:	      |     |   add.l d0,d0
    fe6c:	      |     |   movea.l d0,a1
    fe6e:	      |     |   adda.l d0,a1
    fe70:	      |     |   lea 185d6 <typeName>,a0
    fe76:	      |     |   move.l (0,a1,a0.l),d0
    fe7a:	      |     |   move.l d0,-(sp)
    fe7c:	      |     |   pea 15daa <zbuffer.c.4facf542+0x66d>
    fe82:	      |     |   jsr 12130 <KPrintF>
    fe88:	      |     |   addq.l #8,sp
    }

    return p;
    fe8a:	      |     \-> move.l 36(sp),d0
}
    fe8e:	      \-------> movea.l (sp)+,a2
    fe90:	                movea.l (sp)+,a6
    fe92:	                lea 32(sp),sp
    fe96:	                rts

0000fe98 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
    fe98:	                lea -96(sp),sp
    fe9c:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
    fea0:	                move.l 116(sp),-(sp)
    fea4:	                pea 15de2 <zbuffer.c.4facf542+0x6a5>
    feaa:	                jsr f608 <joinStrings>
    feb0:	                addq.l #8,sp
    feb2:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
    feb6:	            /-- bne.s febe <getSavedGamesStack+0x26>
    feb8:	            |   clr.w d0
    feba:	/-----------|-- bra.w 100d2 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
    febe:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
    fec2:	|               move.l #89572,98(sp)
    feca:	|               moveq #-2,d0
    fecc:	|               move.l d0,94(sp)
    fed0:	|               move.l 19b96 <DOSBase>,d0
    fed6:	|               movea.l d0,a6
    fed8:	|               move.l 98(sp),d1
    fedc:	|               move.l 94(sp),d2
    fee0:	|               jsr -84(a6)
    fee4:	|               move.l d0,90(sp)
    fee8:	|               move.l 90(sp),d0
    feec:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
    fef0:	|           /-- bne.s fef8 <getSavedGamesStack+0x60>
    fef2:	|           |   clr.w d0
    fef4:	+-----------|-- bra.w 100d2 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
    fef8:	|           \-> move.l #260,82(sp)
    ff00:	|               move.l #65536,78(sp)
    ff08:	|               move.l 19b8e <SysBase>,d0
    ff0e:	|               movea.l d0,a6
    ff10:	|               move.l 82(sp),d0
    ff14:	|               move.l 78(sp),d1
    ff18:	|               jsr -684(a6)
    ff1c:	|               move.l d0,74(sp)
    ff20:	|               move.l 74(sp),d0
    ff24:	|               move.l d0,70(sp)
	if (!fib) {
    ff28:	|           /-- bne.s ff46 <getSavedGamesStack+0xae>
		UnLock(dirLock);
    ff2a:	|           |   move.l 86(sp),22(sp)
    ff30:	|           |   move.l 19b96 <DOSBase>,d0
    ff36:	|           |   movea.l d0,a6
    ff38:	|           |   move.l 22(sp),d1
    ff3c:	|           |   jsr -90(a6)
		return FALSE;
    ff40:	|           |   clr.w d0
    ff42:	+-----------|-- bra.w 100d2 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
    ff46:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
    ff4a:	|               move.l 86(sp),66(sp)
    ff50:	|               move.l 70(sp),62(sp)
    ff56:	|               move.l 19b96 <DOSBase>,d0
    ff5c:	|               movea.l d0,a6
    ff5e:	|               move.l 66(sp),d1
    ff62:	|               move.l 62(sp),d2
    ff66:	|               jsr -102(a6)
    ff6a:	|               move.l d0,58(sp)
    ff6e:	|               move.l 58(sp),d0
    ff72:	|  /----------- beq.w 10086 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
    ff76:	|  |        /-- bra.w 10052 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
    ff7a:	|  |  /-----|-> move.l 70(sp),d2
    ff7e:	|  |  |     |   addq.l #8,d2
    ff80:	|  |  |     |   move.l 70(sp),d0
    ff84:	|  |  |     |   addq.l #8,d0
    ff86:	|  |  |     |   move.l d0,-(sp)
    ff88:	|  |  |     |   jsr f5c8 <strlen>
    ff8e:	|  |  |     |   addq.l #4,sp
    ff90:	|  |  |     |   move.l d0,d3
    ff92:	|  |  |     |   move.l 116(sp),-(sp)
    ff96:	|  |  |     |   jsr f5c8 <strlen>
    ff9c:	|  |  |     |   addq.l #4,sp
    ff9e:	|  |  |     |   move.l d3,d1
    ffa0:	|  |  |     |   sub.l d0,d1
    ffa2:	|  |  |     |   move.l d2,d0
    ffa4:	|  |  |     |   add.l d1,d0
    ffa6:	|  |  |     |   move.l 116(sp),-(sp)
    ffaa:	|  |  |     |   move.l d0,-(sp)
    ffac:	|  |  |     |   jsr f588 <strcmp>
    ffb2:	|  |  |     |   addq.l #8,sp
    ffb4:	|  |  |     |   tst.l d0
    ffb6:	|  |  |     +-- bne.w 10052 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
    ffba:	|  |  |     |   move.l 70(sp),d0
    ffbe:	|  |  |     |   addq.l #8,d0
    ffc0:	|  |  |     |   move.l d0,-(sp)
    ffc2:	|  |  |     |   jsr f5c8 <strlen>
    ffc8:	|  |  |     |   addq.l #4,sp
    ffca:	|  |  |     |   move.l d0,d2
    ffcc:	|  |  |     |   move.l 116(sp),-(sp)
    ffd0:	|  |  |     |   jsr f5c8 <strlen>
    ffd6:	|  |  |     |   addq.l #4,sp
    ffd8:	|  |  |     |   move.l d0,d1
    ffda:	|  |  |     |   move.l d2,d0
    ffdc:	|  |  |     |   sub.l d1,d0
    ffde:	|  |  |     |   movea.l 70(sp),a0
    ffe2:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
    ffe6:	|  |  |     |   move.l 70(sp),d0
    ffea:	|  |  |     |   addq.l #8,d0
    ffec:	|  |  |     |   move.l d0,-(sp)
    ffee:	|  |  |     |   jsr 118 <decodeFilename>
    fff4:	|  |  |     |   addq.l #4,sp
    fff6:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
    fffa:	|  |  |     |   move.l 42(sp),-(sp)
    fffe:	|  |  |     |   lea 18(sp),a0
   10002:	|  |  |     |   move.l a0,-(sp)
   10004:	|  |  |     |   jsr 102fe <makeTextVar>
   1000a:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   1000c:	|  |  |     |   move.l 42(sp),38(sp)
   10012:	|  |  |     |   move.l 19b8e <SysBase>,d0
   10018:	|  |  |     |   movea.l d0,a6
   1001a:	|  |  |     |   movea.l 38(sp),a1
   1001e:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   10022:	|  |  |     |   move.l 112(sp),d0
   10026:	|  |  |     |   move.l d0,-(sp)
   10028:	|  |  |     |   lea 18(sp),a0
   1002c:	|  |  |     |   move.l a0,-(sp)
   1002e:	|  |  |     |   jsr f918 <addVarToStack>
   10034:	|  |  |     |   addq.l #8,sp
   10036:	|  |  |     |   tst.w d0
   10038:	|  |  |  /--|-- beq.s 1008a <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   1003a:	|  |  |  |  |   movea.l 112(sp),a0
   1003e:	|  |  |  |  |   move.l 4(a0),d0
   10042:	|  |  |  |  +-- bne.s 10052 <getSavedGamesStack+0x1ba>
   10044:	|  |  |  |  |   movea.l 112(sp),a0
   10048:	|  |  |  |  |   move.l (a0),d0
   1004a:	|  |  |  |  |   movea.l 112(sp),a0
   1004e:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   10052:	|  |  |  |  \-> move.l 86(sp),54(sp)
   10058:	|  |  |  |      move.l 70(sp),50(sp)
   1005e:	|  |  |  |      move.l 19b96 <DOSBase>,d0
   10064:	|  |  |  |      movea.l d0,a6
   10066:	|  |  |  |      move.l 54(sp),d1
   1006a:	|  |  |  |      move.l 50(sp),d2
   1006e:	|  |  |  |      jsr -108(a6)
   10072:	|  |  |  |      move.l d0,46(sp)
   10076:	|  |  |  |      move.l 46(sp),d0
   1007a:	|  |  \--|----- bne.w ff7a <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   1007e:	|  |     |      move.w #1,106(sp)
   10084:	|  |     |  /-- bra.s 1008c <getSavedGamesStack+0x1f4>
	}

cleanup:
   10086:	|  \-----|--|-> nop
   10088:	|        |  +-- bra.s 1008c <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   1008a:	|        \--|-> nop
	FreeVec(fib);
   1008c:	|           \-> move.l 70(sp),34(sp)
   10092:	|               move.l 19b8e <SysBase>,d0
   10098:	|               movea.l d0,a6
   1009a:	|               movea.l 34(sp),a1
   1009e:	|               jsr -690(a6)
	UnLock(dirLock);
   100a2:	|               move.l 86(sp),30(sp)
   100a8:	|               move.l 19b96 <DOSBase>,d0
   100ae:	|               movea.l d0,a6
   100b0:	|               move.l 30(sp),d1
   100b4:	|               jsr -90(a6)
	FreeVec(pattern);
   100b8:	|               move.l 102(sp),26(sp)
   100be:	|               move.l 19b8e <SysBase>,d0
   100c4:	|               movea.l d0,a6
   100c6:	|               movea.l 26(sp),a1
   100ca:	|               jsr -690(a6)
	return result;
   100ce:	|               move.w 106(sp),d0
}
   100d2:	\-------------> movem.l (sp)+,d2-d3/a6
   100d6:	                lea 96(sp),sp
   100da:	                rts

000100dc <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   100dc:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   100de:	       movea.l 20(sp),a0
   100e2:	       move.l (a0),d0
   100e4:	       cmp.l 16(sp),d0
   100e8:	/----- beq.s 1014c <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   100ea:	|      move.l 16(sp),d0
   100ee:	|      add.l d0,d0
   100f0:	|      movea.l d0,a1
   100f2:	|      adda.l d0,a1
   100f4:	|      lea 185d6 <typeName>,a0
   100fa:	|      move.l (0,a1,a0.l),d0
   100fe:	|      move.l d0,-(sp)
   10100:	|      pea 15de6 <zbuffer.c.4facf542+0x6a9>
   10106:	|      jsr f608 <joinStrings>
   1010c:	|      addq.l #8,sp
   1010e:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   10112:	|      movea.l 20(sp),a0
   10116:	|      move.l (a0),d0
   10118:	|      add.l d0,d0
   1011a:	|      movea.l d0,a1
   1011c:	|      adda.l d0,a1
   1011e:	|      lea 185d6 <typeName>,a0
   10124:	|      move.l (0,a1,a0.l),d0
   10128:	|      move.l d0,-(sp)
   1012a:	|      pea 15e28 <zbuffer.c.4facf542+0x6eb>
   10130:	|      jsr f608 <joinStrings>
   10136:	|      addq.l #8,sp
   10138:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   1013a:	|      move.l (sp),-(sp)
   1013c:	|      move.l 8(sp),-(sp)
   10140:	|      jsr 12130 <KPrintF>
   10146:	|      addq.l #8,sp

		return FALSE;
   10148:	|      clr.w d0
   1014a:	|  /-- bra.s 1015c <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   1014c:	\--|-> movea.l 20(sp),a0
   10150:	   |   move.l 4(a0),d0
   10154:	   |   movea.l 12(sp),a0
   10158:	   |   move.l d0,(a0)
	return TRUE;
   1015a:	   |   moveq #1,d0
}
   1015c:	   \-> addq.l #8,sp
   1015e:	       rts

00010160 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   10160:	move.l 8(sp),-(sp)
   10164:	jsr 3d78 <getNumberedString>
   1016a:	addq.l #4,sp
   1016c:	move.l d0,-(sp)
   1016e:	move.l 8(sp),-(sp)
   10172:	jsr 102fe <makeTextVar>
   10178:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   1017a:	movea.l 4(sp),a0
   1017e:	move.l 4(a0),d0
   10182:	sne d0
   10184:	neg.b d0
   10186:	move.b d0,d0
   10188:	andi.w #255,d0
}
   1018c:	rts

0001018e <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   1018e:	          subq.l #8,sp
    int size = stackSize(stacky);
   10190:	          move.l 16(sp),-(sp)
   10194:	          jsr 10a3c <stackSize>
   1019a:	          addq.l #4,sp
   1019c:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   101a0:	          move.l 4(sp),-(sp)
   101a4:	          move.l 16(sp),-(sp)
   101a8:	          jsr 101f8 <makeFastArraySize>
   101ae:	          addq.l #8,sp
   101b0:	          tst.w d0
   101b2:	      /-- bne.s 101b8 <makeFastArrayFromStack+0x2a>
   101b4:	      |   clr.w d0
   101b6:	/-----|-- bra.s 101f4 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   101b8:	|     \-> movea.l 16(sp),a0
   101bc:	|         move.l (a0),(sp)
    size = 0;
   101be:	|         clr.l 4(sp)
    while (allV) {
   101c2:	|     /-- bra.s 101ee <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   101c4:	|  /--|-> movea.l 12(sp),a0
   101c8:	|  |  |   movea.l 4(a0),a0
   101cc:	|  |  |   move.l (a0),d1
   101ce:	|  |  |   move.l 4(sp),d0
   101d2:	|  |  |   lsl.l #3,d0
   101d4:	|  |  |   add.l d0,d1
   101d6:	|  |  |   move.l (sp),d0
   101d8:	|  |  |   move.l d1,-(sp)
   101da:	|  |  |   move.l d0,-(sp)
   101dc:	|  |  |   jsr 1047a <copyMain>
   101e2:	|  |  |   addq.l #8,sp
        size++;
   101e4:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   101e8:	|  |  |   movea.l (sp),a0
   101ea:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   101ee:	|  |  \-> tst.l (sp)
   101f0:	|  \----- bne.s 101c4 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   101f2:	|         moveq #1,d0
}
   101f4:	\-------> addq.l #8,sp
   101f6:	          rts

000101f8 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   101f8:	          lea -28(sp),sp
   101fc:	          move.l a6,-(sp)
    if (size < 0) {
   101fe:	          tst.l 40(sp)
   10202:	      /-- bge.s 10218 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   10204:	      |   pea 15e6d <zbuffer.c.4facf542+0x730>
   1020a:	      |   jsr 12130 <KPrintF>
   10210:	      |   addq.l #4,sp
		return FALSE;
   10212:	      |   clr.w d0
   10214:	/-----|-- bra.w 102f6 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   10218:	|     \-> move.l 36(sp),-(sp)
   1021c:	|         jsr 1032a <unlinkVar>
   10222:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   10224:	|         movea.l 36(sp),a0
   10228:	|         moveq #10,d0
   1022a:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   1022c:	|         moveq #12,d0
   1022e:	|         move.l d0,24(sp)
   10232:	|         clr.l 20(sp)
   10236:	|         move.l 19b8e <SysBase>,d0
   1023c:	|         movea.l d0,a6
   1023e:	|         move.l 24(sp),d0
   10242:	|         move.l 20(sp),d1
   10246:	|         jsr -684(a6)
   1024a:	|         move.l d0,16(sp)
   1024e:	|         move.l 16(sp),d0
   10252:	|         movea.l 36(sp),a0
   10256:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   1025a:	|         movea.l 36(sp),a0
   1025e:	|         move.l 4(a0),d0
   10262:	|     /-- bne.s 1026a <makeFastArraySize+0x72>
   10264:	|     |   clr.w d0
   10266:	+-----|-- bra.w 102f6 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   1026a:	|     \-> move.l 40(sp),d0
   1026e:	|         lsl.l #3,d0
   10270:	|         move.l d0,12(sp)
   10274:	|         clr.l 8(sp)
   10278:	|         move.l 19b8e <SysBase>,d0
   1027e:	|         movea.l d0,a6
   10280:	|         move.l 12(sp),d0
   10284:	|         move.l 8(sp),d1
   10288:	|         jsr -684(a6)
   1028c:	|         move.l d0,4(sp)
   10290:	|         move.l 4(sp),d0
   10294:	|         movea.l 36(sp),a0
   10298:	|         movea.l 4(a0),a0
   1029c:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   1029e:	|         movea.l 36(sp),a0
   102a2:	|         movea.l 4(a0),a0
   102a6:	|         move.l (a0),d0
   102a8:	|     /-- bne.s 102ae <makeFastArraySize+0xb6>
   102aa:	|     |   clr.w d0
   102ac:	+-----|-- bra.s 102f6 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   102ae:	|     \-> clr.l 28(sp)
   102b2:	|     /-- bra.s 102ce <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   102b4:	|  /--|-> movea.l 36(sp),a0
   102b8:	|  |  |   movea.l 4(a0),a0
   102bc:	|  |  |   move.l (a0),d1
   102be:	|  |  |   move.l 28(sp),d0
   102c2:	|  |  |   lsl.l #3,d0
   102c4:	|  |  |   movea.l d1,a0
   102c6:	|  |  |   adda.l d0,a0
   102c8:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   102ca:	|  |  |   addq.l #1,28(sp)
   102ce:	|  |  \-> move.l 28(sp),d0
   102d2:	|  |      cmp.l 40(sp),d0
   102d6:	|  \----- blt.s 102b4 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   102d8:	|         movea.l 36(sp),a0
   102dc:	|         movea.l 4(a0),a0
   102e0:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   102e6:	|         movea.l 36(sp),a0
   102ea:	|         movea.l 4(a0),a0
   102ee:	|         moveq #1,d0
   102f0:	|         move.l d0,8(a0)
    return TRUE;
   102f4:	|         moveq #1,d0
}
   102f6:	\-------> movea.l (sp)+,a6
   102f8:	          lea 28(sp),sp
   102fc:	          rts

000102fe <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   102fe:	move.l 4(sp),-(sp)
   10302:	jsr 1032a <unlinkVar>
   10308:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   1030a:	movea.l 4(sp),a0
   1030e:	moveq #3,d0
   10310:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   10312:	move.l 8(sp),-(sp)
   10316:	jsr b8 <copyString>
   1031c:	addq.l #4,sp
   1031e:	movea.l 4(sp),a0
   10322:	move.l d0,4(a0)
}
   10326:	nop
   10328:	rts

0001032a <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   1032a:	                      lea -16(sp),sp
   1032e:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   10330:	                      movea.l 24(sp),a0
   10334:	                      move.l (a0),d0
   10336:	                      moveq #10,d1
   10338:	                      cmp.l d0,d1
   1033a:	            /-------- beq.w 103f2 <unlinkVar+0xc8>
   1033e:	            |         moveq #10,d1
   10340:	            |         cmp.l d0,d1
   10342:	/-----------|-------- bcs.w 10466 <unlinkVar+0x13c>
   10346:	|           |         moveq #8,d1
   10348:	|           |         cmp.l d0,d1
   1034a:	|  /--------|-------- beq.w 10452 <unlinkVar+0x128>
   1034e:	|  |        |         moveq #8,d1
   10350:	|  |        |         cmp.l d0,d1
   10352:	+--|--------|-------- bcs.w 10466 <unlinkVar+0x13c>
   10356:	|  |        |         moveq #3,d1
   10358:	|  |        |         cmp.l d0,d1
   1035a:	|  |        |     /-- beq.s 10366 <unlinkVar+0x3c>
   1035c:	|  |        |     |   moveq #6,d1
   1035e:	|  |        |     |   cmp.l d0,d1
   10360:	|  |        |  /--|-- beq.s 1038c <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   10362:	+--|--------|--|--|-- bra.w 10466 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   10366:	|  |        |  |  \-> movea.l 24(sp),a0
   1036a:	|  |        |  |      move.l 4(a0),4(sp)
   10370:	|  |        |  |      move.l 19b8e <SysBase>,d0
   10376:	|  |        |  |      movea.l d0,a6
   10378:	|  |        |  |      movea.l 4(sp),a1
   1037c:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   10380:	|  |        |  |      movea.l 24(sp),a0
   10384:	|  |        |  |      clr.l 4(a0)
		break;
   10388:	|  |  /-----|--|----- bra.w 10470 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   1038c:	|  |  |     |  \----> movea.l 24(sp),a0
   10390:	|  |  |     |         movea.l 4(a0),a0
   10394:	|  |  |     |         move.l 8(a0),d0
   10398:	|  |  |     |         subq.l #1,d0
   1039a:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   1039e:	|  |  |     |         movea.l 24(sp),a0
   103a2:	|  |  |     |         movea.l 4(a0),a0
   103a6:	|  |  |     |         move.l 8(a0),d0
   103aa:	|  |  |  /--|-------- bgt.w 1046a <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   103ae:	|  |  |  |  |     /-- bra.s 103c2 <unlinkVar+0x98>
   103b0:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   103b4:	|  |  |  |  |  |  |   move.l 4(a0),d0
   103b8:	|  |  |  |  |  |  |   move.l d0,-(sp)
   103ba:	|  |  |  |  |  |  |   jsr 10a60 <trimStack>
   103c0:	|  |  |  |  |  |  |   addq.l #4,sp
   103c2:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   103c6:	|  |  |  |  |  |      movea.l 4(a0),a0
   103ca:	|  |  |  |  |  |      move.l (a0),d0
   103cc:	|  |  |  |  |  \----- bne.s 103b0 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   103ce:	|  |  |  |  |         movea.l 24(sp),a0
   103d2:	|  |  |  |  |         move.l 4(a0),8(sp)
   103d8:	|  |  |  |  |         move.l 19b8e <SysBase>,d0
   103de:	|  |  |  |  |         movea.l d0,a6
   103e0:	|  |  |  |  |         movea.l 8(sp),a1
   103e4:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   103e8:	|  |  |  |  |         movea.l 24(sp),a0
   103ec:	|  |  |  |  |         clr.l 4(a0)
		break;
   103f0:	|  |  |  +--|-------- bra.s 1046a <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   103f2:	|  |  |  |  \-------> movea.l 24(sp),a0
   103f6:	|  |  |  |            movea.l 4(a0),a0
   103fa:	|  |  |  |            move.l 8(a0),d0
   103fe:	|  |  |  |            subq.l #1,d0
   10400:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   10404:	|  |  |  |            movea.l 24(sp),a0
   10408:	|  |  |  |            movea.l 4(a0),a0
   1040c:	|  |  |  |            move.l 8(a0),d0
   10410:	|  |  |  |        /-- bgt.s 1046e <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   10412:	|  |  |  |        |   movea.l 24(sp),a0
   10416:	|  |  |  |        |   movea.l 4(a0),a0
   1041a:	|  |  |  |        |   move.l (a0),16(sp)
   1041e:	|  |  |  |        |   move.l 19b8e <SysBase>,d0
   10424:	|  |  |  |        |   movea.l d0,a6
   10426:	|  |  |  |        |   movea.l 16(sp),a1
   1042a:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   1042e:	|  |  |  |        |   movea.l 24(sp),a0
   10432:	|  |  |  |        |   move.l 4(a0),12(sp)
   10438:	|  |  |  |        |   move.l 19b8e <SysBase>,d0
   1043e:	|  |  |  |        |   movea.l d0,a6
   10440:	|  |  |  |        |   movea.l 12(sp),a1
   10444:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   10448:	|  |  |  |        |   movea.l 24(sp),a0
   1044c:	|  |  |  |        |   clr.l 4(a0)
		break;
   10450:	|  |  |  |        +-- bra.s 1046e <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   10452:	|  \--|--|--------|-> movea.l 24(sp),a0
   10456:	|     |  |        |   move.l 4(a0),d0
   1045a:	|     |  |        |   move.l d0,-(sp)
   1045c:	|     |  |        |   jsr 5c2e <deleteAnim>
   10462:	|     |  |        |   addq.l #4,sp
		break;
   10464:	|     +--|--------|-- bra.s 10470 <unlinkVar+0x146>
		break;
   10466:	\-----|--|--------|-> nop
   10468:	      +--|--------|-- bra.s 10470 <unlinkVar+0x146>
		break;
   1046a:	      |  \--------|-> nop
   1046c:	      +-----------|-- bra.s 10470 <unlinkVar+0x146>
		break;
   1046e:	      |           \-> nop
	}
}
   10470:	      \-------------> nop
   10472:	                      movea.l (sp)+,a6
   10474:	                      lea 16(sp),sp
   10478:	                      rts

0001047a <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   1047a:	       movea.l 4(sp),a0
   1047e:	       move.l (a0),d0
   10480:	       movea.l 8(sp),a0
   10484:	       move.l d0,(a0)
	switch (to->varType) {
   10486:	       movea.l 8(sp),a0
   1048a:	       move.l (a0),d0
   1048c:	       moveq #10,d1
   1048e:	       cmp.l d0,d1
   10490:	/----- bcs.w 10582 <copyMain+0x108>
   10494:	|      add.l d0,d0
   10496:	|      movea.l d0,a0
   10498:	|      adda.l #66724,a0
   1049e:	|      move.w (a0),d0
   104a0:	|      jmp (104a4 <copyMain+0x2a>,pc,d0.w)
   104a4:	|      .short 0x00da
   104a6:	|      ori.b #22,(a6)
   104aa:	|      ori.w #22,(a4)
   104ae:	|      ori.b #-126,(a6)
   104b2:	|      ori.b #-68,(a6)
   104b6:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   104be:	|      move.l 4(a0),d0
   104c2:	|      movea.l 8(sp),a0
   104c6:	|      move.l d0,4(a0)
		return TRUE;
   104ca:	|      moveq #1,d0
   104cc:	|  /-- bra.w 10594 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   104d0:	|  |   movea.l 4(sp),a0
   104d4:	|  |   move.l 4(a0),d0
   104d8:	|  |   movea.l 8(sp),a0
   104dc:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   104e0:	|  |   movea.l 8(sp),a0
   104e4:	|  |   movea.l 4(a0),a0
   104e8:	|  |   move.l 8(a0),d0
   104ec:	|  |   addq.l #1,d0
   104ee:	|  |   move.l d0,8(a0)
		return TRUE;
   104f2:	|  |   moveq #1,d0
   104f4:	|  +-- bra.w 10594 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   104f8:	|  |   movea.l 4(sp),a0
   104fc:	|  |   move.l 4(a0),d0
   10500:	|  |   move.l d0,-(sp)
   10502:	|  |   jsr b8 <copyString>
   10508:	|  |   addq.l #4,sp
   1050a:	|  |   movea.l 8(sp),a0
   1050e:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   10512:	|  |   movea.l 8(sp),a0
   10516:	|  |   move.l 4(a0),d0
   1051a:	|  |   sne d0
   1051c:	|  |   neg.b d0
   1051e:	|  |   move.b d0,d0
   10520:	|  |   andi.w #255,d0
   10524:	|  +-- bra.s 10594 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   10526:	|  |   movea.l 4(sp),a0
   1052a:	|  |   move.l 4(a0),d0
   1052e:	|  |   movea.l 8(sp),a0
   10532:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   10536:	|  |   movea.l 8(sp),a0
   1053a:	|  |   movea.l 4(a0),a0
   1053e:	|  |   move.l 8(a0),d0
   10542:	|  |   addq.l #1,d0
   10544:	|  |   move.l d0,8(a0)
		return TRUE;
   10548:	|  |   moveq #1,d0
   1054a:	|  +-- bra.s 10594 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   1054c:	|  |   movea.l 4(sp),a0
   10550:	|  |   move.l 4(a0),d0
   10554:	|  |   movea.l 8(sp),a0
   10558:	|  |   move.l d0,4(a0)
		return TRUE;
   1055c:	|  |   moveq #1,d0
   1055e:	|  +-- bra.s 10594 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   10560:	|  |   movea.l 4(sp),a0
   10564:	|  |   move.l 4(a0),d0
   10568:	|  |   move.l d0,-(sp)
   1056a:	|  |   jsr 5872 <copyAnim>
   10570:	|  |   addq.l #4,sp
   10572:	|  |   movea.l 8(sp),a0
   10576:	|  |   move.l d0,4(a0)
		return TRUE;
   1057a:	|  |   moveq #1,d0
   1057c:	|  +-- bra.s 10594 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   1057e:	|  |   moveq #1,d0
   10580:	|  +-- bra.s 10594 <copyMain+0x11a>

		default:
		break;
   10582:	\--|-> nop
	}
	KPrintF("Unknown value type");
   10584:	   |   pea 15ebe <zbuffer.c.4facf542+0x781>
   1058a:	   |   jsr 12130 <KPrintF>
   10590:	   |   addq.l #4,sp
	return FALSE;
   10592:	   |   clr.w d0
}
   10594:	   \-> rts

00010596 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   10596:	move.l 8(sp),-(sp)
   1059a:	jsr 1032a <unlinkVar>
   105a0:	addq.l #4,sp
	return copyMain(from, to);
   105a2:	move.l 8(sp),-(sp)
   105a6:	move.l 8(sp),-(sp)
   105aa:	jsr 1047a <copyMain>
   105b0:	addq.l #8,sp
}
   105b2:	rts

000105b4 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   105b4:	       movea.l 4(sp),a0
   105b8:	       move.l (a0),d0
   105ba:	       moveq #8,d1
   105bc:	       cmp.l d0,d1
   105be:	   /-- bne.s 105d4 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   105c0:	   |   movea.l 4(sp),a0
   105c4:	   |   move.l 4(a0),d0
   105c8:	   |   move.l d0,-(sp)
   105ca:	   |   jsr 5872 <copyAnim>
   105d0:	   |   addq.l #4,sp
   105d2:	/--|-- bra.s 1061a <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   105d4:	|  \-> movea.l 4(sp),a0
   105d8:	|      move.l (a0),d0
   105da:	|      moveq #1,d1
   105dc:	|      cmp.l d0,d1
   105de:	|  /-- bne.s 105f2 <getAnimationFromVar+0x3e>
   105e0:	|  |   movea.l 4(sp),a0
   105e4:	|  |   move.l 4(a0),d0
   105e8:	|  +-- bne.s 105f2 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   105ea:	|  |   jsr 6a1a <makeNullAnim>
   105f0:	+--|-- bra.s 1061a <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   105f2:	|  \-> movea.l 4(sp),a0
   105f6:	|      move.l (a0),d0
   105f8:	|      add.l d0,d0
   105fa:	|      movea.l d0,a1
   105fc:	|      adda.l d0,a1
   105fe:	|      lea 185d6 <typeName>,a0
   10604:	|      move.l (0,a1,a0.l),d0
   10608:	|      move.l d0,-(sp)
   1060a:	|      pea 15daa <zbuffer.c.4facf542+0x66d>
   10610:	|      jsr 12130 <KPrintF>
   10616:	|      addq.l #8,sp
	return NULL;
   10618:	|      moveq #0,d0
}
   1061a:	\----> rts

0001061c <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   1061c:	       movea.l 4(sp),a0
   10620:	       move.l (a0),d0
   10622:	       moveq #10,d1
   10624:	       cmp.l d0,d1
   10626:	/----- bcs.w 106ac <getBoolean+0x90>
   1062a:	|      add.l d0,d0
   1062c:	|      movea.l d0,a0
   1062e:	|      adda.l #67130,a0
   10634:	|      move.w (a0),d0
   10636:	|      jmp (1063a <getBoolean+0x1e>,pc,d0.w)
   1063a:	|      ori.b #26,(a6)
   1063e:	|      ori.w #68,(114,a2,d0.w)
   10644:	|      ori.w #46,(114,a2,d0.w)
   1064a:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   10650:	|      clr.w d0
   10652:	|  /-- bra.s 106b0 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   10654:	|  |   movea.l 4(sp),a0
   10658:	|  |   move.l 4(a0),d0
   1065c:	|  |   sne d0
   1065e:	|  |   neg.b d0
   10660:	|  |   move.b d0,d0
   10662:	|  |   andi.w #255,d0
   10666:	|  +-- bra.s 106b0 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   10668:	|  |   movea.l 4(sp),a0
   1066c:	|  |   movea.l 4(a0),a0
   10670:	|  |   move.l (a0),d0
   10672:	|  |   sne d0
   10674:	|  |   neg.b d0
   10676:	|  |   move.b d0,d0
   10678:	|  |   andi.w #255,d0
   1067c:	|  +-- bra.s 106b0 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   1067e:	|  |   movea.l 4(sp),a0
   10682:	|  |   movea.l 4(a0),a0
   10686:	|  |   move.b (a0),d0
   10688:	|  |   sne d0
   1068a:	|  |   neg.b d0
   1068c:	|  |   move.b d0,d0
   1068e:	|  |   andi.w #255,d0
   10692:	|  +-- bra.s 106b0 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   10694:	|  |   movea.l 4(sp),a0
   10698:	|  |   movea.l 4(a0),a0
   1069c:	|  |   move.l 4(a0),d0
   106a0:	|  |   sne d0
   106a2:	|  |   neg.b d0
   106a4:	|  |   move.b d0,d0
   106a6:	|  |   andi.w #255,d0
   106aa:	|  +-- bra.s 106b0 <getBoolean+0x94>

		default:
		break;
   106ac:	\--|-> nop
	}
	return TRUE;
   106ae:	   |   moveq #1,d0
}
   106b0:	   \-> rts

000106b2 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   106b2:	      /----------> lea -76(sp),sp
   106b6:	      |            move.l a6,-(sp)
	switch (from->varType) {
   106b8:	      |            movea.l 84(sp),a0
   106bc:	      |            move.l (a0),d0
   106be:	      |            moveq #10,d1
   106c0:	      |            cmp.l d0,d1
   106c2:	/-----|----------- bcs.w 10960 <getTextFromAnyVar+0x2ae>
   106c6:	|     |            add.l d0,d0
   106c8:	|     |            movea.l d0,a0
   106ca:	|     |            adda.l #67286,a0
   106d0:	|     |            move.w (a0),d0
   106d2:	|     |            jmp (106d6 <getTextFromAnyVar+0x24>,pc,d0.w)
   106d6:	|     |            .short 0x028a
   106d8:	|     |            bset d0,(a0)+
   106da:	|     |            .short 0x028a
   106dc:	|     |            ori.b #-118,(a6)
   106e0:	|     |            andi.b #8,ccr
   106e4:	|     |            andi.w #650,-(a0)
   106e8:	|     |            .short 0x028a
   106ea:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   106f0:	|     |            move.l 4(a0),d0
   106f4:	|     |            move.l d0,-(sp)
   106f6:	|     |            jsr b8 <copyString>
   106fc:	|     |            addq.l #4,sp
   106fe:	|  /--|----------- bra.w 10982 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   10702:	|  |  |            pea 15ed1 <zbuffer.c.4facf542+0x794>
   10708:	|  |  |            jsr b8 <copyString>
   1070e:	|  |  |            addq.l #4,sp
   10710:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   10714:	|  |  |            clr.l 72(sp)
   10718:	|  |  |     /----- bra.w 107c2 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   1071c:	|  |  |  /--|----> pea 15ed7 <zbuffer.c.4facf542+0x79a>
   10722:	|  |  |  |  |      move.l 80(sp),-(sp)
   10726:	|  |  |  |  |      jsr f608 <joinStrings>
   1072c:	|  |  |  |  |      addq.l #8,sp
   1072e:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   10732:	|  |  |  |  |  /-- bne.s 1073a <getTextFromAnyVar+0x88>
   10734:	|  |  |  |  |  |   moveq #0,d0
   10736:	|  +--|--|--|--|-- bra.w 10982 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   1073a:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   10740:	|  |  |  |  |      move.l 19b8e <SysBase>,d0
   10746:	|  |  |  |  |      movea.l d0,a6
   10748:	|  |  |  |  |      movea.l 56(sp),a1
   1074c:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   10750:	|  |  |  |  |      movea.l 84(sp),a0
   10754:	|  |  |  |  |      movea.l 4(a0),a0
   10758:	|  |  |  |  |      move.l (a0),d1
   1075a:	|  |  |  |  |      move.l 72(sp),d0
   1075e:	|  |  |  |  |      lsl.l #3,d0
   10760:	|  |  |  |  |      add.l d1,d0
   10762:	|  |  |  |  |      move.l d0,-(sp)
   10764:	|  |  +--|--|----- jsr 106b2 <getTextFromAnyVar>(pc)
   10768:	|  |  |  |  |      addq.l #4,sp
   1076a:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   1076e:	|  |  |  |  |      move.l 52(sp),-(sp)
   10772:	|  |  |  |  |      move.l 64(sp),-(sp)
   10776:	|  |  |  |  |      jsr f608 <joinStrings>
   1077c:	|  |  |  |  |      addq.l #8,sp
   1077e:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   10782:	|  |  |  |  |  /-- bne.s 1078a <getTextFromAnyVar+0xd8>
   10784:	|  |  |  |  |  |   moveq #0,d0
   10786:	|  +--|--|--|--|-- bra.w 10982 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   1078a:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   10790:	|  |  |  |  |      move.l 19b8e <SysBase>,d0
   10796:	|  |  |  |  |      movea.l d0,a6
   10798:	|  |  |  |  |      movea.l 48(sp),a1
   1079c:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   107a0:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   107a4:	|  |  |  |  |      move.l 60(sp),44(sp)
   107aa:	|  |  |  |  |      move.l 19b8e <SysBase>,d0
   107b0:	|  |  |  |  |      movea.l d0,a6
   107b2:	|  |  |  |  |      movea.l 44(sp),a1
   107b6:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   107ba:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   107be:	|  |  |  |  |      addq.l #1,72(sp)
   107c2:	|  |  |  |  \----> movea.l 84(sp),a0
   107c6:	|  |  |  |         movea.l 4(a0),a0
   107ca:	|  |  |  |         move.l 4(a0),d0
   107ce:	|  |  |  |         cmp.l 72(sp),d0
   107d2:	|  |  |  \-------- bgt.w 1071c <getTextFromAnyVar+0x6a>
			}
			return builder;
   107d6:	|  |  |            move.l 76(sp),d0
   107da:	|  +--|----------- bra.w 10982 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   107de:	|  |  |            pea 15ed9 <zbuffer.c.4facf542+0x79c>
   107e4:	|  |  |            jsr b8 <copyString>
   107ea:	|  |  |            addq.l #4,sp
   107ec:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   107f0:	|  |  |            movea.l 84(sp),a0
   107f4:	|  |  |            movea.l 4(a0),a0
   107f8:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   107fc:	|  |  |     /----- bra.w 1089e <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   10800:	|  |  |  /--|----> pea 15ed7 <zbuffer.c.4facf542+0x79a>
   10806:	|  |  |  |  |      move.l 72(sp),-(sp)
   1080a:	|  |  |  |  |      jsr f608 <joinStrings>
   10810:	|  |  |  |  |      addq.l #8,sp
   10812:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   10816:	|  |  |  |  |  /-- bne.s 1081e <getTextFromAnyVar+0x16c>
   10818:	|  |  |  |  |  |   moveq #0,d0
   1081a:	|  +--|--|--|--|-- bra.w 10982 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   1081e:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   10824:	|  |  |  |  |      move.l 19b8e <SysBase>,d0
   1082a:	|  |  |  |  |      movea.l d0,a6
   1082c:	|  |  |  |  |      movea.l 32(sp),a1
   10830:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   10834:	|  |  |  |  |      move.l 64(sp),d0
   10838:	|  |  |  |  |      move.l d0,-(sp)
   1083a:	|  |  \--|--|----- jsr 106b2 <getTextFromAnyVar>(pc)
   1083e:	|  |     |  |      addq.l #4,sp
   10840:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   10844:	|  |     |  |      move.l 28(sp),-(sp)
   10848:	|  |     |  |      move.l 40(sp),-(sp)
   1084c:	|  |     |  |      jsr f608 <joinStrings>
   10852:	|  |     |  |      addq.l #8,sp
   10854:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   10858:	|  |     |  |  /-- bne.s 10860 <getTextFromAnyVar+0x1ae>
   1085a:	|  |     |  |  |   moveq #0,d0
   1085c:	|  +-----|--|--|-- bra.w 10982 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   10860:	|  |     |  |  \-> move.l 28(sp),24(sp)
   10866:	|  |     |  |      move.l 19b8e <SysBase>,d0
   1086c:	|  |     |  |      movea.l d0,a6
   1086e:	|  |     |  |      movea.l 24(sp),a1
   10872:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   10876:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   1087a:	|  |     |  |      move.l 36(sp),20(sp)
   10880:	|  |     |  |      move.l 19b8e <SysBase>,d0
   10886:	|  |     |  |      movea.l d0,a6
   10888:	|  |     |  |      movea.l 20(sp),a1
   1088c:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   10890:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   10894:	|  |     |  |      movea.l 64(sp),a0
   10898:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   1089e:	|  |     |  \----> tst.l 64(sp)
   108a2:	|  |     \-------- bne.w 10800 <getTextFromAnyVar+0x14e>
			}
			return builder;
   108a6:	|  |               move.l 68(sp),d0
   108aa:	|  +-------------- bra.w 10982 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   108ae:	|  |               moveq #10,d0
   108b0:	|  |               move.l d0,16(sp)
   108b4:	|  |               clr.l 12(sp)
   108b8:	|  |               move.l 19b8e <SysBase>,d0
   108be:	|  |               movea.l d0,a6
   108c0:	|  |               move.l 16(sp),d0
   108c4:	|  |               move.l 12(sp),d1
   108c8:	|  |               jsr -684(a6)
   108cc:	|  |               move.l d0,8(sp)
   108d0:	|  |               move.l 8(sp),d0
   108d4:	|  |               move.l d0,4(sp)
			if (! buff) {
   108d8:	|  |           /-- bne.s 108ee <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   108da:	|  |           |   pea 15ee0 <zbuffer.c.4facf542+0x7a3>
   108e0:	|  |           |   jsr 12130 <KPrintF>
   108e6:	|  |           |   addq.l #4,sp
				return NULL;
   108e8:	|  |           |   moveq #0,d0
   108ea:	|  +-----------|-- bra.w 10982 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   108ee:	|  |           \-> movea.l 84(sp),a0
   108f2:	|  |               move.l 4(a0),d0
   108f6:	|  |               move.l d0,-(sp)
   108f8:	|  |               pea 15f0a <zbuffer.c.4facf542+0x7cd>
   108fe:	|  |               move.l 12(sp),-(sp)
   10902:	|  |               jsr f8e6 <sprintf>
   10908:	|  |               lea 12(sp),sp
			return buff;
   1090c:	|  |               move.l 4(sp),d0
   10910:	|  +-------------- bra.s 10982 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   10912:	|  |               movea.l 84(sp),a0
   10916:	|  |               move.l 4(a0),d0
   1091a:	|  |               move.l d0,-(sp)
   1091c:	|  |               jsr 108a <resourceNameFromNum>
   10922:	|  |               addq.l #4,sp
   10924:	|  |               move.l d0,-(sp)
   10926:	|  |               pea 131f1 <cursors.c.412ac4f3+0x27c>
   1092c:	|  |               jsr f608 <joinStrings>
   10932:	|  |               addq.l #8,sp
   10934:	|  +-------------- bra.s 10982 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   10936:	|  |               movea.l 84(sp),a0
   1093a:	|  |               move.l 4(a0),d0
   1093e:	|  |               move.l d0,-(sp)
   10940:	|  |               jsr 8f2e <findObjectType>
   10946:	|  |               addq.l #4,sp
   10948:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   1094c:	+--|-------------- beq.s 10960 <getTextFromAnyVar+0x2ae>
   1094e:	|  |               movea.l 40(sp),a0
   10952:	|  |               move.l (a0),d0
   10954:	|  |               move.l d0,-(sp)
   10956:	|  |               jsr b8 <copyString>
   1095c:	|  |               addq.l #4,sp
   1095e:	|  +-------------- bra.s 10982 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   10960:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   10962:	   |               movea.l 84(sp),a0
   10966:	   |               move.l (a0),d0
   10968:	   |               add.l d0,d0
   1096a:	   |               movea.l d0,a1
   1096c:	   |               adda.l d0,a1
   1096e:	   |               lea 185d6 <typeName>,a0
   10974:	   |               move.l (0,a1,a0.l),d0
   10978:	   |               move.l d0,-(sp)
   1097a:	   |               jsr b8 <copyString>
   10980:	   |               addq.l #4,sp
}
   10982:	   \-------------> movea.l (sp)+,a6
   10984:	                   lea 76(sp),sp
   10988:	                   rts

0001098a <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   1098a:	move.l 4(sp),-(sp)
   1098e:	jsr 1032a <unlinkVar>
   10994:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   10996:	movea.l 4(sp),a0
   1099a:	moveq #8,d0
   1099c:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   1099e:	movea.l 4(sp),a0
   109a2:	move.l 8(sp),4(a0)
}
   109a8:	nop
   109aa:	rts

000109ac <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   109ac:	move.l 4(sp),-(sp)
   109b0:	jsr 1032a <unlinkVar>
   109b6:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   109b8:	movea.l 4(sp),a0
   109bc:	moveq #9,d0
   109be:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   109c0:	movea.l 4(sp),a0
   109c4:	move.l 8(sp),4(a0)
}
   109ca:	nop
   109cc:	rts

000109ce <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   109ce:	move.l 4(sp),-(sp)
   109d2:	jsr 1032a <unlinkVar>
   109d8:	addq.l #4,sp
	thisVar->varType = vT;
   109da:	movea.l 4(sp),a0
   109de:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   109e2:	movea.l 4(sp),a0
   109e6:	move.l 12(sp),4(a0)
}
   109ec:	nop
   109ee:	rts

000109f0 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   109f0:	      /-- bra.s 10a02 <stackGetByIndex+0x12>
        vS = vS->next;
   109f2:	/-----|-> movea.l 4(sp),a0
   109f6:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   109fc:	|     +-- bne.s 10a02 <stackGetByIndex+0x12>
            return NULL;
   109fe:	|     |   moveq #0,d0
   10a00:	|  /--|-- bra.s 10a16 <stackGetByIndex+0x26>
    while (theIndex--) {
   10a02:	|  |  \-> move.l 8(sp),d0
   10a06:	|  |      move.l d0,d1
   10a08:	|  |      subq.l #1,d1
   10a0a:	|  |      move.l d1,8(sp)
   10a0e:	|  |      tst.l d0
   10a10:	\--|----- bne.s 109f2 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   10a12:	   |      move.l 4(sp),d0
}
   10a16:	   \----> rts

00010a18 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   10a18:	          tst.l 4(sp)
   10a1c:	      /-- bne.s 10a2c <stackFindLast+0x14>
		return NULL;
   10a1e:	      |   moveq #0,d0
   10a20:	/-----|-- bra.s 10a3a <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   10a22:	|  /--|-> movea.l 4(sp),a0
   10a26:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   10a2c:	|  |  \-> movea.l 4(sp),a0
   10a30:	|  |      move.l 8(a0),d0
   10a34:	|  \----- bne.s 10a22 <stackFindLast+0xa>

	return hunt;
   10a36:	|         move.l 4(sp),d0
}
   10a3a:	\-------> rts

00010a3c <stackSize>:

int stackSize (const struct stackHandler * me) {
   10a3c:	       subq.l #8,sp
	int r = 0;
   10a3e:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   10a42:	       movea.l 12(sp),a0
   10a46:	       move.l (a0),(sp)
	while (a) {
   10a48:	   /-- bra.s 10a54 <stackSize+0x18>
		r ++;
   10a4a:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   10a4e:	|  |   movea.l (sp),a0
   10a50:	|  |   move.l 8(a0),(sp)
	while (a) {
   10a54:	|  \-> tst.l (sp)
   10a56:	\----- bne.s 10a4a <stackSize+0xe>
	}
	return r;
   10a58:	       move.l 4(sp),d0
}
   10a5c:	       addq.l #8,sp
   10a5e:	       rts

00010a60 <trimStack>:

void trimStack (struct variableStack ** stack) {
   10a60:	subq.l #8,sp
   10a62:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   10a64:	movea.l 16(sp),a0
   10a68:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   10a6c:	movea.l 16(sp),a0
   10a70:	movea.l (a0),a0
   10a72:	move.l 8(a0),d0
   10a76:	movea.l 16(sp),a0
   10a7a:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   10a7c:	move.l 8(sp),d0
   10a80:	move.l d0,-(sp)
   10a82:	jsr 1032a <unlinkVar>
   10a88:	addq.l #4,sp
	FreeVec(killMe);
   10a8a:	move.l 8(sp),4(sp)
   10a90:	move.l 19b8e <SysBase>,d0
   10a96:	movea.l d0,a6
   10a98:	movea.l 4(sp),a1
   10a9c:	jsr -690(a6)
   10aa0:	nop
   10aa2:	movea.l (sp)+,a6
   10aa4:	addq.l #8,sp
   10aa6:	rts

00010aa8 <isInFont>:

ULONG * fontTable = NULL;
unsigned int fontTableSize = 0;

BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   10aa8:	pea 15f0d <zbuffer.c.4facf542+0x7d0>
   10aae:	jsr 12130 <KPrintF>
   10ab4:	addq.l #4,sp
	return FALSE;
   10ab6:	clr.w d0
}
   10ab8:	rts

00010aba <stringWidth>:

int stringWidth (char * theText) {
   10aba:	       subq.l #8,sp
	int a = 0;
   10abc:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   10ac0:	       clr.l (sp)

	if (! fontTableSize) return 0;
   10ac2:	       move.l 19c78 <fontTableSize>,d0
   10ac8:	/----- bne.s 10ace <stringWidth+0x14>
   10aca:	|      moveq #0,d0
   10acc:	|  /-- bra.s 10ad0 <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   10ace:	\--|-> move.l (sp),d0
}
   10ad0:	   \-> addq.l #8,sp
   10ad2:	       rts

00010ad4 <loadFont>:

	FreeVec(fontOrderString);
	fontOrderString = copyString(charOrder);*/

	//forgetSpriteBank(theFont);
	KPrintF("loadFont: Not implemented on Amiga");	
   10ad4:	pea 15f34 <zbuffer.c.4facf542+0x7f7>
   10ada:	jsr 12130 <KPrintF>
   10ae0:	addq.l #4,sp
		return FALSE;
	}*/

	//numFontColours = theFont.myPalette.total;*/
	//fontHeight = h;
	return TRUE;
   10ae2:	moveq #1,d0
}
   10ae4:	rts

00010ae6 <addScreenRegion>:
#include "region.h"

struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;

BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   10ae6:	       lea -16(sp),sp
   10aea:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   10aec:	       moveq #36,d0
   10aee:	       move.l d0,16(sp)
   10af2:	       clr.l 12(sp)
   10af6:	       move.l 19b8e <SysBase>,d0
   10afc:	       movea.l d0,a6
   10afe:	       move.l 16(sp),d0
   10b02:	       move.l 12(sp),d1
   10b06:	       jsr -684(a6)
   10b0a:	       move.l d0,8(sp)
   10b0e:	       move.l 8(sp),d0
   10b12:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   10b16:	   /-- bne.s 10b1e <addScreenRegion+0x38>
   10b18:	   |   clr.w d0
   10b1a:	/--|-- bra.w 10b9e <addScreenRegion+0xb8>
    newRegion->di = di;
   10b1e:	|  \-> movea.l 4(sp),a0
   10b22:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   10b28:	|      movea.l 4(sp),a0
   10b2c:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   10b30:	|      movea.l 4(sp),a0
   10b34:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   10b3a:	|      movea.l 4(sp),a0
   10b3e:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   10b44:	|      movea.l 4(sp),a0
   10b48:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   10b4e:	|      movea.l 4(sp),a0
   10b52:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   10b58:	|      movea.l 4(sp),a0
   10b5c:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   10b62:	|      move.l 52(sp),-(sp)
   10b66:	|      jsr 901e <loadObjectType>
   10b6c:	|      addq.l #4,sp
   10b6e:	|      movea.l 4(sp),a0
   10b72:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   10b76:	|      move.l 19c7c <allScreenRegions>,d0
   10b7c:	|      movea.l 4(sp),a0
   10b80:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   10b84:	|      move.l 4(sp),19c7c <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   10b8c:	|      movea.l 4(sp),a0
   10b90:	|      move.l 28(a0),d0
   10b94:	|      sne d0
   10b96:	|      neg.b d0
   10b98:	|      move.b d0,d0
   10b9a:	|      andi.w #255,d0
}
   10b9e:	\----> movea.l (sp)+,a6
   10ba0:	       lea 16(sp),sp
   10ba4:	       rts

00010ba6 <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   10ba6:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   10ba8:	             move.l 19c7c <allScreenRegions>,(sp)

	while (thisRegion) {
   10bae:	   /-------- bra.s 10bca <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   10bb0:	/--|-------> movea.l (sp),a0
   10bb2:	|  |         movea.l 28(a0),a0
   10bb6:	|  |         move.l 4(a0),d0
   10bba:	|  |         cmp.l 8(sp),d0
   10bbe:	|  |     /-- bne.s 10bc4 <getRegionForObject+0x1e>
			return thisRegion;
   10bc0:	|  |     |   move.l (sp),d0
   10bc2:	|  |  /--|-- bra.s 10bd0 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   10bc4:	|  |  |  \-> movea.l (sp),a0
   10bc6:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   10bca:	|  \--|----> tst.l (sp)
   10bcc:	\-----|----- bne.s 10bb0 <getRegionForObject+0xa>
	}

	return NULL;
   10bce:	      |      moveq #0,d0
}
   10bd0:	      \----> addq.l #4,sp
   10bd2:	             rts

00010bd4 <killAllRegions>:

void killAllRegions () {
   10bd4:	       subq.l #8,sp
   10bd6:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   10bd8:	   /-- bra.s 10c1a <killAllRegions+0x46>
		killRegion = allScreenRegions;
   10bda:	/--|-> move.l 19c7c <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   10be2:	|  |   movea.l 19c7c <allScreenRegions>,a0
   10be8:	|  |   move.l 32(a0),d0
   10bec:	|  |   move.l d0,19c7c <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   10bf2:	|  |   movea.l 8(sp),a0
   10bf6:	|  |   move.l 28(a0),d0
   10bfa:	|  |   move.l d0,-(sp)
   10bfc:	|  |   jsr 92d6 <removeObjectType>
   10c02:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   10c04:	|  |   move.l 8(sp),4(sp)
   10c0a:	|  |   move.l 19b8e <SysBase>,d0
   10c10:	|  |   movea.l d0,a6
   10c12:	|  |   movea.l 4(sp),a1
   10c16:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   10c1a:	|  \-> move.l 19c7c <allScreenRegions>,d0
   10c20:	\----- bne.s 10bda <killAllRegions+0x6>
	}
	overRegion = NULL;
   10c22:	       clr.l 19c80 <overRegion>
}
   10c28:	       nop
   10c2a:	       movea.l (sp)+,a6
   10c2c:	       addq.l #8,sp
   10c2e:	       rts

00010c30 <loadRegions>:

void loadRegions (BPTR fp) {
   10c30:	       lea -24(sp),sp
   10c34:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   10c36:	       move.l 32(sp),-(sp)
   10c3a:	       jsr 6bc <get2bytes>
   10c40:	       addq.l #4,sp
   10c42:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   10c46:	       move.l #105596,20(sp)

	while (numRegions --) {
   10c4e:	   /-- bra.w 10d2c <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   10c52:	/--|-> moveq #36,d0
   10c54:	|  |   move.l d0,16(sp)
   10c58:	|  |   clr.l 12(sp)
   10c5c:	|  |   move.l 19b8e <SysBase>,d0
   10c62:	|  |   movea.l d0,a6
   10c64:	|  |   move.l 16(sp),d0
   10c68:	|  |   move.l 12(sp),d1
   10c6c:	|  |   jsr -684(a6)
   10c70:	|  |   move.l d0,8(sp)
   10c74:	|  |   move.l 8(sp),d0
   10c78:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   10c7c:	|  |   movea.l 20(sp),a0
   10c80:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   10c84:	|  |   moveq #32,d1
   10c86:	|  |   add.l 4(sp),d1
   10c8a:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   10c8e:	|  |   move.l 32(sp),-(sp)
   10c92:	|  |   jsr 6bc <get2bytes>
   10c98:	|  |   addq.l #4,sp
   10c9a:	|  |   movea.l 4(sp),a0
   10c9e:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   10ca0:	|  |   move.l 32(sp),-(sp)
   10ca4:	|  |   jsr 6bc <get2bytes>
   10caa:	|  |   addq.l #4,sp
   10cac:	|  |   movea.l 4(sp),a0
   10cb0:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   10cb4:	|  |   move.l 32(sp),-(sp)
   10cb8:	|  |   jsr 6bc <get2bytes>
   10cbe:	|  |   addq.l #4,sp
   10cc0:	|  |   movea.l 4(sp),a0
   10cc4:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   10cc8:	|  |   move.l 32(sp),-(sp)
   10ccc:	|  |   jsr 6bc <get2bytes>
   10cd2:	|  |   addq.l #4,sp
   10cd4:	|  |   movea.l 4(sp),a0
   10cd8:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   10cdc:	|  |   move.l 32(sp),-(sp)
   10ce0:	|  |   jsr 6bc <get2bytes>
   10ce6:	|  |   addq.l #4,sp
   10ce8:	|  |   movea.l 4(sp),a0
   10cec:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   10cf0:	|  |   move.l 32(sp),-(sp)
   10cf4:	|  |   jsr 6bc <get2bytes>
   10cfa:	|  |   addq.l #4,sp
   10cfc:	|  |   movea.l 4(sp),a0
   10d00:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   10d04:	|  |   move.l 32(sp),-(sp)
   10d08:	|  |   jsr 6bc <get2bytes>
   10d0e:	|  |   addq.l #4,sp
   10d10:	|  |   movea.l 4(sp),a0
   10d14:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   10d18:	|  |   move.l 32(sp),-(sp)
   10d1c:	|  |   jsr 8fcc <loadObjectRef>
   10d22:	|  |   addq.l #4,sp
   10d24:	|  |   movea.l 4(sp),a0
   10d28:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   10d2c:	|  \-> move.l 24(sp),d0
   10d30:	|      move.l d0,d1
   10d32:	|      subq.l #1,d1
   10d34:	|      move.l d1,24(sp)
   10d38:	|      tst.l d0
   10d3a:	\----- bne.w 10c52 <loadRegions+0x22>
	}
	* pointy = NULL;
   10d3e:	       movea.l 20(sp),a0
   10d42:	       clr.l (a0)
}
   10d44:	       nop
   10d46:	       movea.l (sp)+,a6
   10d48:	       lea 24(sp),sp
   10d4c:	       rts

00010d4e <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   10d4e:	             lea -12(sp),sp
   10d52:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   10d54:	             move.l #105596,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   10d5c:	   /-------- bra.s 10dd6 <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   10d5e:	/--|-------> movea.l 12(sp),a0
   10d62:	|  |         movea.l (a0),a0
   10d64:	|  |         movea.l 28(a0),a0
   10d68:	|  |         move.l 4(a0),d0
   10d6c:	|  |         cmp.l 20(sp),d0
   10d70:	|  |  /----- bne.s 10dc8 <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   10d72:	|  |  |      movea.l 12(sp),a0
   10d76:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   10d7a:	|  |  |      movea.l 8(sp),a0
   10d7e:	|  |  |      move.l 32(a0),d0
   10d82:	|  |  |      movea.l 12(sp),a0
   10d86:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   10d88:	|  |  |      movea.l 8(sp),a0
   10d8c:	|  |  |      move.l 28(a0),d0
   10d90:	|  |  |      move.l d0,-(sp)
   10d92:	|  |  |      jsr 92d6 <removeObjectType>
   10d98:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   10d9a:	|  |  |      move.l 19c80 <overRegion>,d0
   10da0:	|  |  |      cmp.l 8(sp),d0
   10da4:	|  |  |  /-- bne.s 10dac <removeScreenRegion+0x5e>
   10da6:	|  |  |  |   clr.l 19c80 <overRegion>
            FreeVec(killMe);
   10dac:	|  |  |  \-> move.l 8(sp),4(sp)
   10db2:	|  |  |      move.l 19b8e <SysBase>,d0
   10db8:	|  |  |      movea.l d0,a6
   10dba:	|  |  |      movea.l 4(sp),a1
   10dbe:	|  |  |      jsr -690(a6)
            killMe = NULL;
   10dc2:	|  |  |      clr.l 8(sp)
   10dc6:	|  +--|----- bra.s 10dd6 <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   10dc8:	|  |  \----> movea.l 12(sp),a0
   10dcc:	|  |         move.l (a0),d0
   10dce:	|  |         moveq #32,d1
   10dd0:	|  |         add.l d0,d1
   10dd2:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   10dd6:	|  \-------> movea.l 12(sp),a0
   10dda:	|            move.l (a0),d0
   10ddc:	\----------- bne.s 10d5e <removeScreenRegion+0x10>
        }
    }
}
   10dde:	             nop
   10de0:	             nop
   10de2:	             movea.l (sp)+,a6
   10de4:	             lea 12(sp),sp
   10de8:	             rts

00010dea <saveRegions>:

void saveRegions (BPTR fp) {
   10dea:	       subq.l #8,sp
	int numRegions = 0;
   10dec:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   10df0:	       move.l 19c7c <allScreenRegions>,(sp)
	while (thisRegion) {
   10df6:	   /-- bra.s 10e02 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   10df8:	/--|-> movea.l (sp),a0
   10dfa:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   10dfe:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   10e02:	|  \-> tst.l (sp)
   10e04:	\----- bne.s 10df8 <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   10e06:	       move.l 12(sp),-(sp)
   10e0a:	       move.l 8(sp),-(sp)
   10e0e:	       jsr 8d0 <put2bytes>
   10e14:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   10e16:	       move.l 19c7c <allScreenRegions>,(sp)
	while (thisRegion) {
   10e1c:	/----- bra.w 10ec4 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   10e20:	|  /-> movea.l (sp),a0
   10e22:	|  |   move.l (a0),d0
   10e24:	|  |   move.l 12(sp),-(sp)
   10e28:	|  |   move.l d0,-(sp)
   10e2a:	|  |   jsr 8d0 <put2bytes>
   10e30:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   10e32:	|  |   movea.l (sp),a0
   10e34:	|  |   move.l 4(a0),d0
   10e38:	|  |   move.l 12(sp),-(sp)
   10e3c:	|  |   move.l d0,-(sp)
   10e3e:	|  |   jsr 8d0 <put2bytes>
   10e44:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   10e46:	|  |   movea.l (sp),a0
   10e48:	|  |   move.l 8(a0),d0
   10e4c:	|  |   move.l 12(sp),-(sp)
   10e50:	|  |   move.l d0,-(sp)
   10e52:	|  |   jsr 8d0 <put2bytes>
   10e58:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   10e5a:	|  |   movea.l (sp),a0
   10e5c:	|  |   move.l 12(a0),d0
   10e60:	|  |   move.l 12(sp),-(sp)
   10e64:	|  |   move.l d0,-(sp)
   10e66:	|  |   jsr 8d0 <put2bytes>
   10e6c:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   10e6e:	|  |   movea.l (sp),a0
   10e70:	|  |   move.l 16(a0),d0
   10e74:	|  |   move.l 12(sp),-(sp)
   10e78:	|  |   move.l d0,-(sp)
   10e7a:	|  |   jsr 8d0 <put2bytes>
   10e80:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   10e82:	|  |   movea.l (sp),a0
   10e84:	|  |   move.l 20(a0),d0
   10e88:	|  |   move.l 12(sp),-(sp)
   10e8c:	|  |   move.l d0,-(sp)
   10e8e:	|  |   jsr 8d0 <put2bytes>
   10e94:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   10e96:	|  |   movea.l (sp),a0
   10e98:	|  |   move.l 24(a0),d0
   10e9c:	|  |   move.l 12(sp),-(sp)
   10ea0:	|  |   move.l d0,-(sp)
   10ea2:	|  |   jsr 8d0 <put2bytes>
   10ea8:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   10eaa:	|  |   movea.l (sp),a0
   10eac:	|  |   move.l 28(a0),d0
   10eb0:	|  |   move.l 12(sp),-(sp)
   10eb4:	|  |   move.l d0,-(sp)
   10eb6:	|  |   jsr 9376 <saveObjectRef>
   10ebc:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   10ebe:	|  |   movea.l (sp),a0
   10ec0:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   10ec4:	\--|-> tst.l (sp)
   10ec6:	   \-- bne.w 10e20 <saveRegions+0x36>
	}
}
   10eca:	       nop
   10ecc:	       nop
   10ece:	       addq.l #8,sp
   10ed0:	       rts

00010ed2 <showBoxes>:

void showBoxes () {
   10ed2:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   10ed4:	       move.l 19c7c <allScreenRegions>,(sp)

	while (huntRegion) {
   10eda:	/----- bra.w 10f76 <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   10ede:	|  /-> movea.l (sp),a0
   10ee0:	|  |   move.l 12(a0),d0
   10ee4:	|  |   movea.l d0,a1
   10ee6:	|  |   movea.l (sp),a0
   10ee8:	|  |   move.l 4(a0),d0
   10eec:	|  |   move.l d0,d1
   10eee:	|  |   movea.l (sp),a0
   10ef0:	|  |   move.l (a0),d0
   10ef2:	|  |   move.l a1,-(sp)
   10ef4:	|  |   move.l d1,-(sp)
   10ef6:	|  |   move.l d0,-(sp)
   10ef8:	|  |   jsr 8cca <drawVerticalLine>
   10efe:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   10f02:	|  |   movea.l (sp),a0
   10f04:	|  |   move.l 12(a0),d0
   10f08:	|  |   movea.l d0,a1
   10f0a:	|  |   movea.l (sp),a0
   10f0c:	|  |   move.l 4(a0),d0
   10f10:	|  |   move.l d0,d1
   10f12:	|  |   movea.l (sp),a0
   10f14:	|  |   move.l 8(a0),d0
   10f18:	|  |   move.l a1,-(sp)
   10f1a:	|  |   move.l d1,-(sp)
   10f1c:	|  |   move.l d0,-(sp)
   10f1e:	|  |   jsr 8cca <drawVerticalLine>
   10f24:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   10f28:	|  |   movea.l (sp),a0
   10f2a:	|  |   move.l 8(a0),d0
   10f2e:	|  |   movea.l d0,a1
   10f30:	|  |   movea.l (sp),a0
   10f32:	|  |   move.l 4(a0),d0
   10f36:	|  |   move.l d0,d1
   10f38:	|  |   movea.l (sp),a0
   10f3a:	|  |   move.l (a0),d0
   10f3c:	|  |   move.l a1,-(sp)
   10f3e:	|  |   move.l d1,-(sp)
   10f40:	|  |   move.l d0,-(sp)
   10f42:	|  |   jsr 8ca4 <drawHorizontalLine>
   10f48:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   10f4c:	|  |   movea.l (sp),a0
   10f4e:	|  |   move.l 8(a0),d0
   10f52:	|  |   movea.l d0,a1
   10f54:	|  |   movea.l (sp),a0
   10f56:	|  |   move.l 12(a0),d0
   10f5a:	|  |   move.l d0,d1
   10f5c:	|  |   movea.l (sp),a0
   10f5e:	|  |   move.l (a0),d0
   10f60:	|  |   move.l a1,-(sp)
   10f62:	|  |   move.l d1,-(sp)
   10f64:	|  |   move.l d0,-(sp)
   10f66:	|  |   jsr 8ca4 <drawHorizontalLine>
   10f6c:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   10f70:	|  |   movea.l (sp),a0
   10f72:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   10f76:	\--|-> tst.l (sp)
   10f78:	   \-- bne.w 10ede <showBoxes+0xc>
	}
   10f7c:	       nop
   10f7e:	       nop
   10f80:	       addq.l #4,sp
   10f82:	       rts

00010f84 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   10f84:	       lea -32(sp),sp
   10f88:	       move.l d3,-(sp)
   10f8a:	       move.l d2,-(sp)
	int xDiff = x2 - x1;
   10f8c:	       move.l 60(sp),d0
   10f90:	       sub.l 52(sp),d0
   10f94:	       move.l d0,36(sp)
	int yDiff = y2 - y1;
   10f98:	       move.l 64(sp),d0
   10f9c:	       sub.l 56(sp),d0
   10fa0:	       move.l d0,32(sp)

	double m = xDiff * (xP - x1) + yDiff * (yP - y1);
   10fa4:	       move.l 68(sp),d0
   10fa8:	       sub.l 52(sp),d0
   10fac:	       move.l 36(sp),-(sp)
   10fb0:	       move.l d0,-(sp)
   10fb2:	       jsr 12ae2 <__mulsi3>
   10fb8:	       addq.l #8,sp
   10fba:	       move.l d0,d2
   10fbc:	       move.l 72(sp),d0
   10fc0:	       sub.l 56(sp),d0
   10fc4:	       move.l 32(sp),-(sp)
   10fc8:	       move.l d0,-(sp)
   10fca:	       jsr 12ae2 <__mulsi3>
   10fd0:	       addq.l #8,sp
   10fd2:	       add.l d2,d0
   10fd4:	       move.l d0,-(sp)
   10fd6:	       jsr 12548 <__floatsidf>
   10fdc:	       addq.l #4,sp
   10fde:	       move.l d0,16(sp)
   10fe2:	       move.l d1,20(sp)
   10fe6:	       move.l 16(sp),24(sp)
   10fec:	       move.l 20(sp),28(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   10ff2:	       move.l 36(sp),-(sp)
   10ff6:	       move.l 40(sp),-(sp)
   10ffa:	       jsr 12ae2 <__mulsi3>
   11000:	       addq.l #8,sp
   11002:	       move.l d0,d2
   11004:	       move.l 32(sp),-(sp)
   11008:	       move.l 36(sp),-(sp)
   1100c:	       jsr 12ae2 <__mulsi3>
   11012:	       addq.l #8,sp
   11014:	       add.l d2,d0
   11016:	       move.l d0,-(sp)
   11018:	       jsr 12548 <__floatsidf>
   1101e:	       addq.l #4,sp
   11020:	       move.l d1,-(sp)
   11022:	       move.l d0,-(sp)
   11024:	       move.l 36(sp),-(sp)
   11028:	       move.l 36(sp),-(sp)
   1102c:	       jsr 123d2 <__divdf3>
   11032:	       lea 16(sp),sp
   11036:	       move.l d0,8(sp)
   1103a:	       move.l d1,12(sp)
   1103e:	       move.l 8(sp),24(sp)
   11044:	       move.l 12(sp),28(sp)

	if (m < 0) {
   1104a:	       clr.l -(sp)
   1104c:	       clr.l -(sp)
   1104e:	       move.l 36(sp),-(sp)
   11052:	       move.l 36(sp),-(sp)
   11056:	       jsr 12760 <__ltdf2>
   1105c:	       lea 16(sp),sp
   11060:	       tst.l d0
   11062:	   /-- bge.s 11078 <closestPointOnLine+0xf4>
		*closestX = x1;
   11064:	   |   movea.l 44(sp),a0
   11068:	   |   move.l 52(sp),(a0)
		*closestY = y1;
   1106c:	   |   movea.l 48(sp),a0
   11070:	   |   move.l 56(sp),(a0)
   11074:	/--|-- bra.w 1115a <closestPointOnLine+0x1d6>
	} else if (m > 1) {
   11078:	|  \-> clr.l -(sp)
   1107a:	|      move.l #1072693248,-(sp)
   11080:	|      move.l 36(sp),-(sp)
   11084:	|      move.l 36(sp),-(sp)
   11088:	|      jsr 126a6 <__gtdf2>
   1108e:	|      lea 16(sp),sp
   11092:	|      tst.l d0
   11094:	|  /-- ble.s 110aa <closestPointOnLine+0x126>
		*closestX = x2;
   11096:	|  |   movea.l 44(sp),a0
   1109a:	|  |   move.l 60(sp),(a0)
		*closestY = y2;
   1109e:	|  |   movea.l 48(sp),a0
   110a2:	|  |   move.l 64(sp),(a0)
   110a6:	+--|-- bra.w 1115a <closestPointOnLine+0x1d6>
	} else {
		*closestX = x1 + m * xDiff;
   110aa:	|  \-> move.l 52(sp),-(sp)
   110ae:	|      jsr 12548 <__floatsidf>
   110b4:	|      addq.l #4,sp
   110b6:	|      move.l d0,d2
   110b8:	|      move.l d1,d3
   110ba:	|      move.l 36(sp),-(sp)
   110be:	|      jsr 12548 <__floatsidf>
   110c4:	|      addq.l #4,sp
   110c6:	|      move.l 28(sp),-(sp)
   110ca:	|      move.l 28(sp),-(sp)
   110ce:	|      move.l d1,-(sp)
   110d0:	|      move.l d0,-(sp)
   110d2:	|      jsr 125d8 <__muldf3>
   110d8:	|      lea 16(sp),sp
   110dc:	|      move.l d1,-(sp)
   110de:	|      move.l d0,-(sp)
   110e0:	|      move.l d3,-(sp)
   110e2:	|      move.l d2,-(sp)
   110e4:	|      jsr 12370 <__adddf3>
   110ea:	|      lea 16(sp),sp
   110ee:	|      move.l d1,-(sp)
   110f0:	|      move.l d0,-(sp)
   110f2:	|      jsr 124e0 <__fixdfsi>
   110f8:	|      addq.l #8,sp
   110fa:	|      movea.l 44(sp),a0
   110fe:	|      move.l d0,(a0)
		*closestY = y1 + m * yDiff;
   11100:	|      move.l 56(sp),-(sp)
   11104:	|      jsr 12548 <__floatsidf>
   1110a:	|      addq.l #4,sp
   1110c:	|      move.l d0,d2
   1110e:	|      move.l d1,d3
   11110:	|      move.l 32(sp),-(sp)
   11114:	|      jsr 12548 <__floatsidf>
   1111a:	|      addq.l #4,sp
   1111c:	|      move.l 28(sp),-(sp)
   11120:	|      move.l 28(sp),-(sp)
   11124:	|      move.l d1,-(sp)
   11126:	|      move.l d0,-(sp)
   11128:	|      jsr 125d8 <__muldf3>
   1112e:	|      lea 16(sp),sp
   11132:	|      move.l d1,-(sp)
   11134:	|      move.l d0,-(sp)
   11136:	|      move.l d3,-(sp)
   11138:	|      move.l d2,-(sp)
   1113a:	|      jsr 12370 <__adddf3>
   11140:	|      lea 16(sp),sp
   11144:	|      move.l d1,-(sp)
   11146:	|      move.l d0,-(sp)
   11148:	|      jsr 124e0 <__fixdfsi>
   1114e:	|      addq.l #8,sp
   11150:	|      movea.l 48(sp),a0
   11154:	|      move.l d0,(a0)
		return TRUE;
   11156:	|      moveq #1,d0
   11158:	|  /-- bra.s 1115c <closestPointOnLine+0x1d8>
	}
	return FALSE;
   1115a:	\--|-> clr.w d0
}
   1115c:	   \-> move.l (sp)+,d2
   1115e:	       move.l (sp)+,d3
   11160:	       lea 32(sp),sp
   11164:	       rts

00011166 <drawFloor>:

void drawFloor() {
   11166:	                lea -12(sp),sp
   1116a:	                move.l d3,-(sp)
   1116c:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   1116e:	                clr.l 16(sp)
   11172:	   /----------- bra.w 11386 <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   11176:	/--|----------> movea.l 19c84 <currentFloor>,a0
   1117c:	|  |            move.l 12(a0),d1
   11180:	|  |            move.l 16(sp),d0
   11184:	|  |            lsl.l #3,d0
   11186:	|  |            movea.l d1,a0
   11188:	|  |            adda.l d0,a0
   1118a:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   1118e:	|  |            moveq #1,d0
   11190:	|  |            cmp.l 8(sp),d0
   11194:	|  |  /-------- bge.w 11382 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   11198:	|  |  |         moveq #1,d0
   1119a:	|  |  |         move.l d0,12(sp)
   1119e:	|  |  |     /-- bra.w 11298 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   111a2:	|  |  |  /--|-> movea.l 19c84 <currentFloor>,a0
   111a8:	|  |  |  |  |   move.l 4(a0),d1
   111ac:	|  |  |  |  |   movea.l 19c84 <currentFloor>,a0
   111b2:	|  |  |  |  |   movea.l 12(a0),a0
   111b6:	|  |  |  |  |   move.l 16(sp),d0
   111ba:	|  |  |  |  |   lsl.l #3,d0
   111bc:	|  |  |  |  |   adda.l d0,a0
   111be:	|  |  |  |  |   movea.l 4(a0),a0
   111c2:	|  |  |  |  |   move.l 12(sp),d0
   111c6:	|  |  |  |  |   add.l d0,d0
   111c8:	|  |  |  |  |   add.l d0,d0
   111ca:	|  |  |  |  |   adda.l d0,a0
   111cc:	|  |  |  |  |   move.l (a0),d0
   111ce:	|  |  |  |  |   lsl.l #3,d0
   111d0:	|  |  |  |  |   movea.l d1,a0
   111d2:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   111d4:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   111d8:	|  |  |  |  |   movea.l 19c84 <currentFloor>,a0
   111de:	|  |  |  |  |   move.l 4(a0),d1
   111e2:	|  |  |  |  |   movea.l 19c84 <currentFloor>,a0
   111e8:	|  |  |  |  |   movea.l 12(a0),a0
   111ec:	|  |  |  |  |   move.l 16(sp),d0
   111f0:	|  |  |  |  |   lsl.l #3,d0
   111f2:	|  |  |  |  |   adda.l d0,a0
   111f4:	|  |  |  |  |   movea.l 4(a0),a0
   111f8:	|  |  |  |  |   move.l 12(sp),d0
   111fc:	|  |  |  |  |   add.l d0,d0
   111fe:	|  |  |  |  |   add.l d0,d0
   11200:	|  |  |  |  |   adda.l d0,a0
   11202:	|  |  |  |  |   move.l (a0),d0
   11204:	|  |  |  |  |   lsl.l #3,d0
   11206:	|  |  |  |  |   movea.l d1,a0
   11208:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   1120a:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   1120c:	|  |  |  |  |   movea.l 19c84 <currentFloor>,a0
   11212:	|  |  |  |  |   move.l 4(a0),d1
   11216:	|  |  |  |  |   movea.l 19c84 <currentFloor>,a0
   1121c:	|  |  |  |  |   movea.l 12(a0),a0
   11220:	|  |  |  |  |   move.l 16(sp),d0
   11224:	|  |  |  |  |   lsl.l #3,d0
   11226:	|  |  |  |  |   adda.l d0,a0
   11228:	|  |  |  |  |   movea.l 4(a0),a0
   1122c:	|  |  |  |  |   move.l 12(sp),d0
   11230:	|  |  |  |  |   addi.l #1073741823,d0
   11236:	|  |  |  |  |   add.l d0,d0
   11238:	|  |  |  |  |   add.l d0,d0
   1123a:	|  |  |  |  |   adda.l d0,a0
   1123c:	|  |  |  |  |   move.l (a0),d0
   1123e:	|  |  |  |  |   lsl.l #3,d0
   11240:	|  |  |  |  |   movea.l d1,a0
   11242:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   11244:	|  |  |  |  |   move.l 4(a0),d1
   11248:	|  |  |  |  |   movea.l 19c84 <currentFloor>,a0
   1124e:	|  |  |  |  |   move.l 4(a0),d3
   11252:	|  |  |  |  |   movea.l 19c84 <currentFloor>,a0
   11258:	|  |  |  |  |   movea.l 12(a0),a0
   1125c:	|  |  |  |  |   move.l 16(sp),d0
   11260:	|  |  |  |  |   lsl.l #3,d0
   11262:	|  |  |  |  |   adda.l d0,a0
   11264:	|  |  |  |  |   movea.l 4(a0),a0
   11268:	|  |  |  |  |   move.l 12(sp),d0
   1126c:	|  |  |  |  |   addi.l #1073741823,d0
   11272:	|  |  |  |  |   add.l d0,d0
   11274:	|  |  |  |  |   add.l d0,d0
   11276:	|  |  |  |  |   adda.l d0,a0
   11278:	|  |  |  |  |   move.l (a0),d0
   1127a:	|  |  |  |  |   lsl.l #3,d0
   1127c:	|  |  |  |  |   movea.l d3,a0
   1127e:	|  |  |  |  |   adda.l d0,a0
   11280:	|  |  |  |  |   move.l (a0),d0
   11282:	|  |  |  |  |   move.l d2,-(sp)
   11284:	|  |  |  |  |   move.l a1,-(sp)
   11286:	|  |  |  |  |   move.l d1,-(sp)
   11288:	|  |  |  |  |   move.l d0,-(sp)
   1128a:	|  |  |  |  |   jsr df4 <drawLine>
   11290:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   11294:	|  |  |  |  |   addq.l #1,12(sp)
   11298:	|  |  |  |  \-> move.l 12(sp),d0
   1129c:	|  |  |  |      cmp.l 8(sp),d0
   112a0:	|  |  |  \----- blt.w 111a2 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   112a4:	|  |  |         movea.l 19c84 <currentFloor>,a0
   112aa:	|  |  |         move.l 4(a0),d1
   112ae:	|  |  |         movea.l 19c84 <currentFloor>,a0
   112b4:	|  |  |         movea.l 12(a0),a0
   112b8:	|  |  |         move.l 16(sp),d0
   112bc:	|  |  |         lsl.l #3,d0
   112be:	|  |  |         adda.l d0,a0
   112c0:	|  |  |         movea.l 4(a0),a0
   112c4:	|  |  |         move.l 8(sp),d0
   112c8:	|  |  |         addi.l #1073741823,d0
   112ce:	|  |  |         add.l d0,d0
   112d0:	|  |  |         add.l d0,d0
   112d2:	|  |  |         adda.l d0,a0
   112d4:	|  |  |         move.l (a0),d0
   112d6:	|  |  |         lsl.l #3,d0
   112d8:	|  |  |         movea.l d1,a0
   112da:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   112dc:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   112e0:	|  |  |         movea.l 19c84 <currentFloor>,a0
   112e6:	|  |  |         move.l 4(a0),d1
   112ea:	|  |  |         movea.l 19c84 <currentFloor>,a0
   112f0:	|  |  |         movea.l 12(a0),a0
   112f4:	|  |  |         move.l 16(sp),d0
   112f8:	|  |  |         lsl.l #3,d0
   112fa:	|  |  |         adda.l d0,a0
   112fc:	|  |  |         movea.l 4(a0),a0
   11300:	|  |  |         move.l 8(sp),d0
   11304:	|  |  |         addi.l #1073741823,d0
   1130a:	|  |  |         add.l d0,d0
   1130c:	|  |  |         add.l d0,d0
   1130e:	|  |  |         adda.l d0,a0
   11310:	|  |  |         move.l (a0),d0
   11312:	|  |  |         lsl.l #3,d0
   11314:	|  |  |         movea.l d1,a0
   11316:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   11318:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   1131a:	|  |  |         movea.l 19c84 <currentFloor>,a0
   11320:	|  |  |         move.l 4(a0),d1
   11324:	|  |  |         movea.l 19c84 <currentFloor>,a0
   1132a:	|  |  |         movea.l 12(a0),a0
   1132e:	|  |  |         move.l 16(sp),d0
   11332:	|  |  |         lsl.l #3,d0
   11334:	|  |  |         adda.l d0,a0
   11336:	|  |  |         movea.l 4(a0),a0
   1133a:	|  |  |         move.l (a0),d0
   1133c:	|  |  |         lsl.l #3,d0
   1133e:	|  |  |         movea.l d1,a0
   11340:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   11342:	|  |  |         move.l 4(a0),d1
   11346:	|  |  |         movea.l 19c84 <currentFloor>,a0
   1134c:	|  |  |         move.l 4(a0),d3
   11350:	|  |  |         movea.l 19c84 <currentFloor>,a0
   11356:	|  |  |         movea.l 12(a0),a0
   1135a:	|  |  |         move.l 16(sp),d0
   1135e:	|  |  |         lsl.l #3,d0
   11360:	|  |  |         adda.l d0,a0
   11362:	|  |  |         movea.l 4(a0),a0
   11366:	|  |  |         move.l (a0),d0
   11368:	|  |  |         lsl.l #3,d0
   1136a:	|  |  |         movea.l d3,a0
   1136c:	|  |  |         adda.l d0,a0
   1136e:	|  |  |         move.l (a0),d0
   11370:	|  |  |         move.l d2,-(sp)
   11372:	|  |  |         move.l a1,-(sp)
   11374:	|  |  |         move.l d1,-(sp)
   11376:	|  |  |         move.l d0,-(sp)
   11378:	|  |  |         jsr df4 <drawLine>
   1137e:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   11382:	|  |  \-------> addq.l #1,16(sp)
   11386:	|  \----------> movea.l 19c84 <currentFloor>,a0
   1138c:	|               move.l 8(a0),d0
   11390:	|               cmp.l 16(sp),d0
   11394:	\-------------- bgt.w 11176 <drawFloor+0x10>
        }
    }
}
   11398:	                nop
   1139a:	                nop
   1139c:	                move.l (sp)+,d2
   1139e:	                move.l (sp)+,d3
   113a0:	                lea 12(sp),sp
   113a4:	                rts

000113a6 <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   113a6:	                      lea -12(sp),sp
    int sharedVertices = 0;
   113aa:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   113ae:	                      clr.l 4(sp)
   113b2:	   /----------------- bra.w 11444 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   113b6:	/--|----------------> clr.l (sp)
   113b8:	|  |     /----------- bra.s 11434 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   113ba:	|  |  /--|----------> movea.l 16(sp),a0
   113be:	|  |  |  |            move.l 4(a0),d1
   113c2:	|  |  |  |            move.l 4(sp),d0
   113c6:	|  |  |  |            add.l d0,d0
   113c8:	|  |  |  |            add.l d0,d0
   113ca:	|  |  |  |            movea.l d1,a0
   113cc:	|  |  |  |            adda.l d0,a0
   113ce:	|  |  |  |            move.l (a0),d1
   113d0:	|  |  |  |            movea.l 20(sp),a0
   113d4:	|  |  |  |            movea.l 4(a0),a0
   113d8:	|  |  |  |            move.l (sp),d0
   113da:	|  |  |  |            add.l d0,d0
   113dc:	|  |  |  |            add.l d0,d0
   113de:	|  |  |  |            adda.l d0,a0
   113e0:	|  |  |  |            move.l (a0),d0
   113e2:	|  |  |  |            cmp.l d1,d0
   113e4:	|  |  |  |  /-------- bne.s 11432 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   113e6:	|  |  |  |  |         move.l 8(sp),d0
   113ea:	|  |  |  |  |         move.l d0,d1
   113ec:	|  |  |  |  |         addq.l #1,d1
   113ee:	|  |  |  |  |         move.l d1,8(sp)
   113f2:	|  |  |  |  |         tst.l d0
   113f4:	|  |  |  |  |     /-- beq.s 11416 <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   113f6:	|  |  |  |  |     |   movea.l 16(sp),a0
   113fa:	|  |  |  |  |     |   move.l 4(a0),d1
   113fe:	|  |  |  |  |     |   move.l 4(sp),d0
   11402:	|  |  |  |  |     |   add.l d0,d0
   11404:	|  |  |  |  |     |   add.l d0,d0
   11406:	|  |  |  |  |     |   movea.l d1,a0
   11408:	|  |  |  |  |     |   adda.l d0,a0
   1140a:	|  |  |  |  |     |   move.l (a0),d0
   1140c:	|  |  |  |  |     |   movea.l 28(sp),a0
   11410:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   11412:	|  |  |  |  |     |   moveq #1,d0
   11414:	|  |  |  |  |  /--|-- bra.s 11454 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   11416:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   1141a:	|  |  |  |  |  |      move.l 4(a0),d1
   1141e:	|  |  |  |  |  |      move.l 4(sp),d0
   11422:	|  |  |  |  |  |      add.l d0,d0
   11424:	|  |  |  |  |  |      add.l d0,d0
   11426:	|  |  |  |  |  |      movea.l d1,a0
   11428:	|  |  |  |  |  |      adda.l d0,a0
   1142a:	|  |  |  |  |  |      move.l (a0),d0
   1142c:	|  |  |  |  |  |      movea.l 24(sp),a0
   11430:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   11432:	|  |  |  |  \--|----> addq.l #1,(sp)
   11434:	|  |  |  \-----|----> movea.l 20(sp),a0
   11438:	|  |  |        |      move.l (a0),d0
   1143a:	|  |  |        |      cmp.l (sp),d0
   1143c:	|  |  \--------|----- bgt.w 113ba <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   11440:	|  |           |      addq.l #1,4(sp)
   11444:	|  \-----------|----> movea.l 16(sp),a0
   11448:	|              |      move.l (a0),d0
   1144a:	|              |      cmp.l 4(sp),d0
   1144e:	\--------------|----- bgt.w 113b6 <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   11452:	               |      clr.w d0
}
   11454:	               \----> lea 12(sp),sp
   11458:	                      rts

0001145a <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   1145a:	movea.l 19c84 <currentFloor>,a0
   11460:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   11464:	movea.l 19c84 <currentFloor>,a0
   1146a:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   1146e:	movea.l 19c84 <currentFloor>,a0
   11474:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   11478:	movea.l 19c84 <currentFloor>,a0
   1147e:	clr.l 16(a0)
}
   11482:	nop
   11484:	rts

00011486 <inFloor>:

int inFloor (int x, int y) {
   11486:	          subq.l #8,sp
	int i, r = -1;
   11488:	          moveq #-1,d0
   1148a:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   1148c:	          clr.l 4(sp)
   11490:	   /----- bra.s 114c4 <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   11492:	/--|----> movea.l 19c84 <currentFloor>,a0
   11498:	|  |      move.l 12(a0),d1
   1149c:	|  |      move.l 4(sp),d0
   114a0:	|  |      lsl.l #3,d0
   114a2:	|  |      add.l d1,d0
   114a4:	|  |      move.l 16(sp),-(sp)
   114a8:	|  |      move.l 16(sp),-(sp)
   114ac:	|  |      move.l d0,-(sp)
   114ae:	|  |      jsr 11690 <pointInFloorPolygon>
   114b4:	|  |      lea 12(sp),sp
   114b8:	|  |      tst.w d0
   114ba:	|  |  /-- beq.s 114c0 <inFloor+0x3a>
			r = i;
   114bc:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   114c0:	|  |  \-> addq.l #1,4(sp)
   114c4:	|  \----> movea.l 19c84 <currentFloor>,a0
   114ca:	|         move.l 8(a0),d0
   114ce:	|         cmp.l 4(sp),d0
   114d2:	\-------- bgt.s 11492 <inFloor+0xc>

	return r;
   114d4:	          move.l (sp),d0
}
   114d6:	          addq.l #8,sp
   114d8:	          rts

000114da <initFloor>:

BOOL initFloor () {
   114da:	       lea -12(sp),sp
   114de:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   114e0:	       moveq #20,d0
   114e2:	       move.l d0,12(sp)
   114e6:	       clr.l 8(sp)
   114ea:	       move.l 19b8e <SysBase>,d0
   114f0:	       movea.l d0,a6
   114f2:	       move.l 12(sp),d0
   114f6:	       move.l 8(sp),d1
   114fa:	       jsr -684(a6)
   114fe:	       move.l d0,4(sp)
   11502:	       move.l 4(sp),d0
   11506:	       move.l d0,19c84 <currentFloor>

    if(currentFloor == 0) {
   1150c:	       move.l 19c84 <currentFloor>,d0
   11512:	/----- bne.s 11526 <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   11514:	|      pea 15f57 <zbuffer.c.4facf542+0x81a>
   1151a:	|      jsr 12130 <KPrintF>
   11520:	|      addq.l #4,sp
        return FALSE;
   11522:	|      clr.w d0
   11524:	|  /-- bra.s 1152e <initFloor+0x54>
    }

	noFloor ();
   11526:	\--|-> jsr 1145a <noFloor>
	return TRUE;
   1152c:	   |   moveq #1,d0
}
   1152e:	   \-> movea.l (sp)+,a6
   11530:	       lea 12(sp),sp
   11534:	       rts

00011536 <killFloor>:

void killFloor () {
   11536:	       lea -24(sp),sp
   1153a:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   1153c:	       clr.l 24(sp)
   11540:	   /-- bra.s 1159a <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   11542:	/--|-> movea.l 19c84 <currentFloor>,a0
   11548:	|  |   move.l 12(a0),d1
   1154c:	|  |   move.l 24(sp),d0
   11550:	|  |   lsl.l #3,d0
   11552:	|  |   movea.l d1,a0
   11554:	|  |   adda.l d0,a0
   11556:	|  |   move.l 4(a0),8(sp)
   1155c:	|  |   move.l 19b8e <SysBase>,d0
   11562:	|  |   movea.l d0,a6
   11564:	|  |   movea.l 8(sp),a1
   11568:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   1156c:	|  |   movea.l 19c84 <currentFloor>,a0
   11572:	|  |   move.l 16(a0),d1
   11576:	|  |   move.l 24(sp),d0
   1157a:	|  |   add.l d0,d0
   1157c:	|  |   add.l d0,d0
   1157e:	|  |   movea.l d1,a0
   11580:	|  |   adda.l d0,a0
   11582:	|  |   move.l (a0),4(sp)
   11586:	|  |   move.l 19b8e <SysBase>,d0
   1158c:	|  |   movea.l d0,a6
   1158e:	|  |   movea.l 4(sp),a1
   11592:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   11596:	|  |   addq.l #1,24(sp)
   1159a:	|  \-> movea.l 19c84 <currentFloor>,a0
   115a0:	|      move.l 8(a0),d0
   115a4:	|      cmp.l 24(sp),d0
   115a8:	\----- bgt.s 11542 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   115aa:	       movea.l 19c84 <currentFloor>,a0
   115b0:	       move.l 12(a0),20(sp)
   115b6:	       move.l 19b8e <SysBase>,d0
   115bc:	       movea.l d0,a6
   115be:	       movea.l 20(sp),a1
   115c2:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   115c6:	       movea.l 19c84 <currentFloor>,a0
   115cc:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   115d0:	       movea.l 19c84 <currentFloor>,a0
   115d6:	       move.l 4(a0),16(sp)
   115dc:	       move.l 19b8e <SysBase>,d0
   115e2:	       movea.l d0,a6
   115e4:	       movea.l 16(sp),a1
   115e8:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   115ec:	       movea.l 19c84 <currentFloor>,a0
   115f2:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   115f6:	       movea.l 19c84 <currentFloor>,a0
   115fc:	       move.l 16(a0),12(sp)
   11602:	       move.l 19b8e <SysBase>,d0
   11608:	       movea.l d0,a6
   1160a:	       movea.l 12(sp),a1
   1160e:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   11612:	       movea.l 19c84 <currentFloor>,a0
   11618:	       clr.l 16(a0)
}
   1161c:	       nop
   1161e:	       movea.l (sp)+,a6
   11620:	       lea 24(sp),sp
   11624:	       rts

00011626 <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   11626:	                   lea -12(sp),sp
	int sharedVertices = 0;
   1162a:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   1162e:	                   clr.l 4(sp)
   11632:	   /-------------- bra.s 1167e <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   11634:	/--|-------------> clr.l (sp)
   11636:	|  |     /-------- bra.s 11672 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   11638:	|  |  /--|-------> move.l 20(sp),d1
   1163c:	|  |  |  |         move.l 4(sp),d0
   11640:	|  |  |  |         add.l d0,d0
   11642:	|  |  |  |         add.l d0,d0
   11644:	|  |  |  |         movea.l d1,a0
   11646:	|  |  |  |         adda.l d0,a0
   11648:	|  |  |  |         move.l (a0),d1
   1164a:	|  |  |  |         movea.l 28(sp),a0
   1164e:	|  |  |  |         move.l (sp),d0
   11650:	|  |  |  |         add.l d0,d0
   11652:	|  |  |  |         add.l d0,d0
   11654:	|  |  |  |         adda.l d0,a0
   11656:	|  |  |  |         move.l (a0),d0
   11658:	|  |  |  |         cmp.l d1,d0
   1165a:	|  |  |  |     /-- bne.s 11670 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   1165c:	|  |  |  |     |   move.l 8(sp),d0
   11660:	|  |  |  |     |   move.l d0,d1
   11662:	|  |  |  |     |   addq.l #1,d1
   11664:	|  |  |  |     |   move.l d1,8(sp)
   11668:	|  |  |  |     |   tst.l d0
   1166a:	|  |  |  |     +-- beq.s 11670 <polysShareSide+0x4a>
   1166c:	|  |  |  |     |   moveq #1,d0
   1166e:	|  |  |  |  /--|-- bra.s 1168a <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   11670:	|  |  |  |  |  \-> addq.l #1,(sp)
   11672:	|  |  |  \--|----> move.l 24(sp),d0
   11676:	|  |  |     |      cmp.l (sp),d0
   11678:	|  |  \-----|----- bgt.s 11638 <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   1167a:	|  |        |      addq.l #1,4(sp)
   1167e:	|  \--------|----> move.l 16(sp),d0
   11682:	|           |      cmp.l 4(sp),d0
   11686:	\-----------|----- bgt.s 11634 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   11688:	            |      clr.w d0
}
   1168a:	            \----> lea 12(sp),sp
   1168e:	                   rts

00011690 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   11690:	             lea -28(sp),sp
   11694:	             move.l d3,-(sp)
   11696:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   11698:	             clr.l 32(sp)
   1169c:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   116a0:	             movea.l 40(sp),a0
   116a4:	             move.l (a0),d0
   116a6:	             move.l d0,d1
   116a8:	             subq.l #1,d1
   116aa:	             move.l d1,28(sp)
   116ae:	   /-------- bra.w 118a8 <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   116b2:	/--|-------> movea.l 19c84 <currentFloor>,a0
   116b8:	|  |         move.l 4(a0),d1
   116bc:	|  |         movea.l 40(sp),a0
   116c0:	|  |         movea.l 4(a0),a0
   116c4:	|  |         move.l 32(sp),d0
   116c8:	|  |         add.l d0,d0
   116ca:	|  |         add.l d0,d0
   116cc:	|  |         adda.l d0,a0
   116ce:	|  |         move.l (a0),d0
   116d0:	|  |         lsl.l #3,d0
   116d2:	|  |         movea.l d1,a0
   116d4:	|  |         adda.l d0,a0
   116d6:	|  |         move.l (a0),d0
   116d8:	|  |         move.l d0,-(sp)
   116da:	|  |         jsr 12588 <__floatsisf>
   116e0:	|  |         addq.l #4,sp
   116e2:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   116e6:	|  |         movea.l 19c84 <currentFloor>,a0
   116ec:	|  |         move.l 4(a0),d1
   116f0:	|  |         movea.l 40(sp),a0
   116f4:	|  |         movea.l 4(a0),a0
   116f8:	|  |         move.l 32(sp),d0
   116fc:	|  |         add.l d0,d0
   116fe:	|  |         add.l d0,d0
   11700:	|  |         adda.l d0,a0
   11702:	|  |         move.l (a0),d0
   11704:	|  |         lsl.l #3,d0
   11706:	|  |         movea.l d1,a0
   11708:	|  |         adda.l d0,a0
   1170a:	|  |         move.l 4(a0),d0
   1170e:	|  |         move.l d0,-(sp)
   11710:	|  |         jsr 12588 <__floatsisf>
   11716:	|  |         addq.l #4,sp
   11718:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   1171c:	|  |         movea.l 19c84 <currentFloor>,a0
   11722:	|  |         move.l 4(a0),d1
   11726:	|  |         movea.l 40(sp),a0
   1172a:	|  |         movea.l 4(a0),a0
   1172e:	|  |         move.l 28(sp),d0
   11732:	|  |         add.l d0,d0
   11734:	|  |         add.l d0,d0
   11736:	|  |         adda.l d0,a0
   11738:	|  |         move.l (a0),d0
   1173a:	|  |         lsl.l #3,d0
   1173c:	|  |         movea.l d1,a0
   1173e:	|  |         adda.l d0,a0
   11740:	|  |         move.l (a0),d0
   11742:	|  |         move.l d0,-(sp)
   11744:	|  |         jsr 12588 <__floatsisf>
   1174a:	|  |         addq.l #4,sp
   1174c:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   11750:	|  |         movea.l 19c84 <currentFloor>,a0
   11756:	|  |         move.l 4(a0),d1
   1175a:	|  |         movea.l 40(sp),a0
   1175e:	|  |         movea.l 4(a0),a0
   11762:	|  |         move.l 28(sp),d0
   11766:	|  |         add.l d0,d0
   11768:	|  |         add.l d0,d0
   1176a:	|  |         adda.l d0,a0
   1176c:	|  |         move.l (a0),d0
   1176e:	|  |         lsl.l #3,d0
   11770:	|  |         movea.l d1,a0
   11772:	|  |         adda.l d0,a0
   11774:	|  |         move.l 4(a0),d0
   11778:	|  |         move.l d0,-(sp)
   1177a:	|  |         jsr 12588 <__floatsisf>
   11780:	|  |         addq.l #4,sp
   11782:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   11786:	|  |         move.l 48(sp),-(sp)
   1178a:	|  |         jsr 12588 <__floatsisf>
   11790:	|  |         addq.l #4,sp
   11792:	|  |         move.l d0,-(sp)
   11794:	|  |         move.l 20(sp),-(sp)
   11798:	|  |         jsr 1272a <__lesf2>
   1179e:	|  |         addq.l #8,sp
   117a0:	|  |         tst.l d0
   117a2:	|  |     /-- bgt.s 117c2 <pointInFloorPolygon+0x132>
   117a4:	|  |     |   move.l 48(sp),-(sp)
   117a8:	|  |     |   jsr 12588 <__floatsisf>
   117ae:	|  |     |   addq.l #4,sp
   117b0:	|  |     |   move.l d0,-(sp)
   117b2:	|  |     |   move.l 12(sp),-(sp)
   117b6:	|  |     |   jsr 126f4 <__gtsf2>
   117bc:	|  |     |   addq.l #8,sp
   117be:	|  |     |   tst.l d0
   117c0:	|  |  /--|-- bgt.s 11802 <pointInFloorPolygon+0x172>
   117c2:	|  |  |  \-> move.l 48(sp),-(sp)
   117c6:	|  |  |      jsr 12588 <__floatsisf>
   117cc:	|  |  |      addq.l #4,sp
   117ce:	|  |  |      move.l d0,-(sp)
   117d0:	|  |  |      move.l 12(sp),-(sp)
   117d4:	|  |  |      jsr 1272a <__lesf2>
   117da:	|  |  |      addq.l #8,sp
   117dc:	|  |  |      tst.l d0
   117de:	|  |  |  /-- bgt.w 11898 <pointInFloorPolygon+0x208>
   117e2:	|  |  |  |   move.l 48(sp),-(sp)
   117e6:	|  |  |  |   jsr 12588 <__floatsisf>
   117ec:	|  |  |  |   addq.l #4,sp
   117ee:	|  |  |  |   move.l d0,-(sp)
   117f0:	|  |  |  |   move.l 20(sp),-(sp)
   117f4:	|  |  |  |   jsr 126f4 <__gtsf2>
   117fa:	|  |  |  |   addq.l #8,sp
   117fc:	|  |  |  |   tst.l d0
   117fe:	|  |  |  +-- ble.w 11898 <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   11802:	|  |  \--|-> move.l 44(sp),-(sp)
   11806:	|  |     |   jsr 12588 <__floatsisf>
   1180c:	|  |     |   addq.l #4,sp
   1180e:	|  |     |   move.l d0,d3
   11810:	|  |     |   move.l 20(sp),-(sp)
   11814:	|  |     |   move.l 16(sp),-(sp)
   11818:	|  |     |   jsr 1287c <__subsf3>
   1181e:	|  |     |   addq.l #8,sp
   11820:	|  |     |   move.l d0,d2
   11822:	|  |     |   move.l 48(sp),-(sp)
   11826:	|  |     |   jsr 12588 <__floatsisf>
   1182c:	|  |     |   addq.l #4,sp
   1182e:	|  |     |   move.l 16(sp),-(sp)
   11832:	|  |     |   move.l d0,-(sp)
   11834:	|  |     |   jsr 1287c <__subsf3>
   1183a:	|  |     |   addq.l #8,sp
   1183c:	|  |     |   move.l d0,-(sp)
   1183e:	|  |     |   move.l d2,-(sp)
   11840:	|  |     |   jsr 1263a <__mulsf3>
   11846:	|  |     |   addq.l #8,sp
   11848:	|  |     |   move.l d0,d2
   1184a:	|  |     |   move.l 16(sp),-(sp)
   1184e:	|  |     |   move.l 12(sp),-(sp)
   11852:	|  |     |   jsr 1287c <__subsf3>
   11858:	|  |     |   addq.l #8,sp
   1185a:	|  |     |   move.l d0,-(sp)
   1185c:	|  |     |   move.l d2,-(sp)
   1185e:	|  |     |   jsr 12434 <__divsf3>
   11864:	|  |     |   addq.l #8,sp
   11866:	|  |     |   move.l 20(sp),-(sp)
   1186a:	|  |     |   move.l d0,-(sp)
   1186c:	|  |     |   jsr 1233a <__addsf3>
   11872:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   11874:	|  |     |   move.l d0,-(sp)
   11876:	|  |     |   move.l d3,-(sp)
   11878:	|  |     |   jsr 127ae <__ltsf2>
   1187e:	|  |     |   addq.l #8,sp
   11880:	|  |     |   tst.l d0
   11882:	|  |     +-- bge.s 11898 <pointInFloorPolygon+0x208>

			c = !c;
   11884:	|  |     |   tst.l 24(sp)
   11888:	|  |     |   seq d0
   1188a:	|  |     |   neg.b d0
   1188c:	|  |     |   move.b d0,d0
   1188e:	|  |     |   andi.l #255,d0
   11894:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   11898:	|  |     \-> move.l 32(sp),d0
   1189c:	|  |         move.l d0,d1
   1189e:	|  |         addq.l #1,d1
   118a0:	|  |         move.l d1,32(sp)
   118a4:	|  |         move.l d0,28(sp)
   118a8:	|  \-------> movea.l 40(sp),a0
   118ac:	|            move.l (a0),d0
   118ae:	|            cmp.l 32(sp),d0
   118b2:	\----------- bgt.w 116b2 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   118b6:	             tst.l 24(sp)
   118ba:	             sne d0
   118bc:	             neg.b d0
   118be:	             move.b d0,d0
   118c0:	             andi.w #255,d0
}
   118c4:	             move.l (sp)+,d2
   118c6:	             move.l (sp)+,d3
   118c8:	             lea 28(sp),sp
   118cc:	             rts

000118ce <setFloor>:

BOOL setFloor (int fileNum) {
   118ce:	                               lea -132(sp),sp
   118d2:	                               move.l a6,-(sp)
   118d4:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   118d6:	                               jsr 11536 <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   118dc:	                               move.l 144(sp),-(sp)
   118e0:	                               jsr 3e76 <openFileFromNum>
   118e6:	                               addq.l #4,sp
   118e8:	                               tst.l d0
   118ea:	                           /-- bne.s 118f2 <setFloor+0x24>
   118ec:	                           |   clr.w d0
   118ee:	/--------------------------|-- bra.w 1203e <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   118f2:	|                          \-> movea.l 19c84 <currentFloor>,a0
   118f8:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   118fc:	|                              move.l 19b76 <bigDataFile>,118(sp)
   11904:	|                              move.l 19b96 <DOSBase>,d0
   1190a:	|                              movea.l d0,a6
   1190c:	|                              move.l 118(sp),d1
   11910:	|                              jsr -306(a6)
   11914:	|                              move.l d0,114(sp)
   11918:	|                              move.l 114(sp),d0
   1191c:	|                              movea.l 19c84 <currentFloor>,a0
   11922:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   11926:	|                              movea.l 19c84 <currentFloor>,a0
   1192c:	|                              move.l 8(a0),d0
   11930:	|                              lsl.l #3,d0
   11932:	|                              move.l d0,110(sp)
   11936:	|                              clr.l 106(sp)
   1193a:	|                              move.l 19b8e <SysBase>,d0
   11940:	|                              movea.l d0,a6
   11942:	|                              move.l 110(sp),d0
   11946:	|                              move.l 106(sp),d1
   1194a:	|                              jsr -684(a6)
   1194e:	|                              move.l d0,102(sp)
   11952:	|                              move.l 102(sp),d0
   11956:	|                              movea.l 19c84 <currentFloor>,a0
   1195c:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   11960:	|                              movea.l 19c84 <currentFloor>,a0
   11966:	|                              move.l 12(a0),d0
   1196a:	|                          /-- bne.s 11980 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   1196c:	|                          |   pea 15f7b <zbuffer.c.4facf542+0x83e>
   11972:	|                          |   jsr 12130 <KPrintF>
   11978:	|                          |   addq.l #4,sp
		return FALSE;
   1197a:	|                          |   clr.w d0
   1197c:	+--------------------------|-- bra.w 1203e <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11980:	|                          \-> clr.l 136(sp)
   11984:	|                    /-------- bra.w 11a9c <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   11988:	|                 /--|-------> move.l 19b76 <bigDataFile>,26(sp)
   11990:	|                 |  |         move.l 19b96 <DOSBase>,d0
   11996:	|                 |  |         movea.l d0,a6
   11998:	|                 |  |         move.l 26(sp),d1
   1199c:	|                 |  |         jsr -306(a6)
   119a0:	|                 |  |         move.l d0,22(sp)
   119a4:	|                 |  |         move.l 22(sp),d1
   119a8:	|                 |  |         movea.l 19c84 <currentFloor>,a0
   119ae:	|                 |  |         movea.l 12(a0),a0
   119b2:	|                 |  |         move.l 136(sp),d0
   119b6:	|                 |  |         lsl.l #3,d0
   119b8:	|                 |  |         adda.l d0,a0
   119ba:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   119bc:	|                 |  |         movea.l 19c84 <currentFloor>,a0
   119c2:	|                 |  |         move.l 12(a0),d1
   119c6:	|                 |  |         move.l 136(sp),d0
   119ca:	|                 |  |         lsl.l #3,d0
   119cc:	|                 |  |         movea.l d1,a0
   119ce:	|                 |  |         adda.l d0,a0
   119d0:	|                 |  |         move.l (a0),d0
   119d2:	|                 |  |         add.l d0,d0
   119d4:	|                 |  |         add.l d0,d0
   119d6:	|                 |  |         move.l d0,18(sp)
   119da:	|                 |  |         clr.l 14(sp)
   119de:	|                 |  |         move.l 19b8e <SysBase>,d0
   119e4:	|                 |  |         movea.l d0,a6
   119e6:	|                 |  |         move.l 18(sp),d0
   119ea:	|                 |  |         move.l 14(sp),d1
   119ee:	|                 |  |         jsr -684(a6)
   119f2:	|                 |  |         move.l d0,10(sp)
   119f6:	|                 |  |         move.l 10(sp),d1
   119fa:	|                 |  |         movea.l 19c84 <currentFloor>,a0
   11a00:	|                 |  |         movea.l 12(a0),a0
   11a04:	|                 |  |         move.l 136(sp),d0
   11a08:	|                 |  |         lsl.l #3,d0
   11a0a:	|                 |  |         adda.l d0,a0
   11a0c:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   11a10:	|                 |  |         movea.l 19c84 <currentFloor>,a0
   11a16:	|                 |  |         move.l 12(a0),d1
   11a1a:	|                 |  |         move.l 136(sp),d0
   11a1e:	|                 |  |         lsl.l #3,d0
   11a20:	|                 |  |         movea.l d1,a0
   11a22:	|                 |  |         adda.l d0,a0
   11a24:	|                 |  |         move.l 4(a0),d0
   11a28:	|                 |  |     /-- bne.s 11a3e <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   11a2a:	|                 |  |     |   pea 15f7b <zbuffer.c.4facf542+0x83e>
   11a30:	|                 |  |     |   jsr 12130 <KPrintF>
   11a36:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   11a38:	|                 |  |     |   clr.w d0
   11a3a:	+-----------------|--|-----|-- bra.w 1203e <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   11a3e:	|                 |  |     \-> clr.l 132(sp)
   11a42:	|                 |  |     /-- bra.s 11a7c <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   11a44:	|                 |  |  /--|-> move.l 19b76 <bigDataFile>,d1
   11a4a:	|                 |  |  |  |   movea.l 19c84 <currentFloor>,a0
   11a50:	|                 |  |  |  |   movea.l 12(a0),a0
   11a54:	|                 |  |  |  |   move.l 136(sp),d0
   11a58:	|                 |  |  |  |   lsl.l #3,d0
   11a5a:	|                 |  |  |  |   adda.l d0,a0
   11a5c:	|                 |  |  |  |   movea.l 4(a0),a0
   11a60:	|                 |  |  |  |   move.l 132(sp),d0
   11a64:	|                 |  |  |  |   add.l d0,d0
   11a66:	|                 |  |  |  |   add.l d0,d0
   11a68:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   11a6c:	|                 |  |  |  |   move.l d1,-(sp)
   11a6e:	|                 |  |  |  |   jsr 6bc <get2bytes>
   11a74:	|                 |  |  |  |   addq.l #4,sp
   11a76:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   11a78:	|                 |  |  |  |   addq.l #1,132(sp)
   11a7c:	|                 |  |  |  \-> movea.l 19c84 <currentFloor>,a0
   11a82:	|                 |  |  |      move.l 12(a0),d1
   11a86:	|                 |  |  |      move.l 136(sp),d0
   11a8a:	|                 |  |  |      lsl.l #3,d0
   11a8c:	|                 |  |  |      movea.l d1,a0
   11a8e:	|                 |  |  |      adda.l d0,a0
   11a90:	|                 |  |  |      move.l (a0),d0
   11a92:	|                 |  |  |      cmp.l 132(sp),d0
   11a96:	|                 |  |  \----- bgt.s 11a44 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11a98:	|                 |  |         addq.l #1,136(sp)
   11a9c:	|                 |  \-------> movea.l 19c84 <currentFloor>,a0
   11aa2:	|                 |            move.l 8(a0),d0
   11aa6:	|                 |            cmp.l 136(sp),d0
   11aaa:	|                 \----------- bgt.w 11988 <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   11aae:	|                              move.l 19b76 <bigDataFile>,d0
   11ab4:	|                              move.l d0,-(sp)
   11ab6:	|                              jsr 6bc <get2bytes>
   11abc:	|                              addq.l #4,sp
   11abe:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   11ac2:	|                              move.l 136(sp),d0
   11ac6:	|                              lsl.l #3,d0
   11ac8:	|                              move.l d0,98(sp)
   11acc:	|                              clr.l 94(sp)
   11ad0:	|                              move.l 19b8e <SysBase>,d0
   11ad6:	|                              movea.l d0,a6
   11ad8:	|                              move.l 98(sp),d0
   11adc:	|                              move.l 94(sp),d1
   11ae0:	|                              jsr -684(a6)
   11ae4:	|                              move.l d0,90(sp)
   11ae8:	|                              move.l 90(sp),d0
   11aec:	|                              movea.l 19c84 <currentFloor>,a0
   11af2:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   11af6:	|                              movea.l 19c84 <currentFloor>,a0
   11afc:	|                              move.l 4(a0),d0
   11b00:	|                          /-- bne.s 11b16 <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   11b02:	|                          |   pea 15f7b <zbuffer.c.4facf542+0x83e>
   11b08:	|                          |   jsr 12130 <KPrintF>
   11b0e:	|                          |   addq.l #4,sp
		return FALSE;
   11b10:	|                          |   clr.w d0
   11b12:	+--------------------------|-- bra.w 1203e <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   11b16:	|                          \-> clr.l 132(sp)
   11b1a:	|                          /-- bra.s 11b6e <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   11b1c:	|                       /--|-> move.l 19b76 <bigDataFile>,d1
   11b22:	|                       |  |   movea.l 19c84 <currentFloor>,a0
   11b28:	|                       |  |   movea.l 4(a0),a0
   11b2c:	|                       |  |   move.l 132(sp),d0
   11b30:	|                       |  |   lsl.l #3,d0
   11b32:	|                       |  |   lea (0,a0,d0.l),a2
   11b36:	|                       |  |   move.l d1,-(sp)
   11b38:	|                       |  |   jsr 6bc <get2bytes>
   11b3e:	|                       |  |   addq.l #4,sp
   11b40:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   11b42:	|                       |  |   move.l 19b76 <bigDataFile>,d1
   11b48:	|                       |  |   movea.l 19c84 <currentFloor>,a0
   11b4e:	|                       |  |   movea.l 4(a0),a0
   11b52:	|                       |  |   move.l 132(sp),d0
   11b56:	|                       |  |   lsl.l #3,d0
   11b58:	|                       |  |   lea (0,a0,d0.l),a2
   11b5c:	|                       |  |   move.l d1,-(sp)
   11b5e:	|                       |  |   jsr 6bc <get2bytes>
   11b64:	|                       |  |   addq.l #4,sp
   11b66:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   11b6a:	|                       |  |   addq.l #1,132(sp)
   11b6e:	|                       |  \-> move.l 132(sp),d0
   11b72:	|                       |      cmp.l 136(sp),d0
   11b76:	|                       \----- blt.s 11b1c <setFloor+0x24e>
	}

	finishAccess ();
   11b78:	|                              jsr 3d6e <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   11b7e:	|                              movea.l 19c84 <currentFloor>,a0
   11b84:	|                              move.l 8(a0),d0
   11b88:	|                              add.l d0,d0
   11b8a:	|                              add.l d0,d0
   11b8c:	|                              move.l d0,86(sp)
   11b90:	|                              clr.l 82(sp)
   11b94:	|                              move.l 19b8e <SysBase>,d0
   11b9a:	|                              movea.l d0,a6
   11b9c:	|                              move.l 86(sp),d0
   11ba0:	|                              move.l 82(sp),d1
   11ba4:	|                              jsr -684(a6)
   11ba8:	|                              move.l d0,78(sp)
   11bac:	|                              move.l 78(sp),d0
   11bb0:	|                              movea.l 19c84 <currentFloor>,a0
   11bb6:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   11bba:	|                              movea.l 19c84 <currentFloor>,a0
   11bc0:	|                              move.l 8(a0),d0
   11bc4:	|                              add.l d0,d0
   11bc6:	|                              add.l d0,d0
   11bc8:	|                              move.l d0,74(sp)
   11bcc:	|                              clr.l 70(sp)
   11bd0:	|                              move.l 19b8e <SysBase>,d0
   11bd6:	|                              movea.l d0,a6
   11bd8:	|                              move.l 74(sp),d0
   11bdc:	|                              move.l 70(sp),d1
   11be0:	|                              jsr -684(a6)
   11be4:	|                              move.l d0,66(sp)
   11be8:	|                              move.l 66(sp),d0
   11bec:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   11bf0:	|                              movea.l 19c84 <currentFloor>,a0
   11bf6:	|                              move.l 16(a0),d0
   11bfa:	|                          /-- bne.s 11c10 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   11bfc:	|                          |   pea 15f7b <zbuffer.c.4facf542+0x83e>
   11c02:	|                          |   jsr 12130 <KPrintF>
   11c08:	|                          |   addq.l #4,sp
		return FALSE;
   11c0a:	|                          |   clr.w d0
   11c0c:	+--------------------------|-- bra.w 1203e <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11c10:	|                          \-> clr.l 136(sp)
   11c14:	|                    /-------- bra.w 11d38 <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   11c18:	|                 /--|-------> movea.l 19c84 <currentFloor>,a0
   11c1e:	|                 |  |         move.l 8(a0),d0
   11c22:	|                 |  |         add.l d0,d0
   11c24:	|                 |  |         add.l d0,d0
   11c26:	|                 |  |         move.l d0,50(sp)
   11c2a:	|                 |  |         clr.l 46(sp)
   11c2e:	|                 |  |         move.l 19b8e <SysBase>,d0
   11c34:	|                 |  |         movea.l d0,a6
   11c36:	|                 |  |         move.l 50(sp),d0
   11c3a:	|                 |  |         move.l 46(sp),d1
   11c3e:	|                 |  |         jsr -684(a6)
   11c42:	|                 |  |         move.l d0,42(sp)
   11c46:	|                 |  |         move.l 42(sp),d0
   11c4a:	|                 |  |         movea.l 19c84 <currentFloor>,a0
   11c50:	|                 |  |         movea.l 16(a0),a0
   11c54:	|                 |  |         move.l 136(sp),d1
   11c58:	|                 |  |         add.l d1,d1
   11c5a:	|                 |  |         add.l d1,d1
   11c5c:	|                 |  |         adda.l d1,a0
   11c5e:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   11c60:	|                 |  |         movea.l 19c84 <currentFloor>,a0
   11c66:	|                 |  |         move.l 8(a0),d0
   11c6a:	|                 |  |         add.l d0,d0
   11c6c:	|                 |  |         add.l d0,d0
   11c6e:	|                 |  |         move.l d0,38(sp)
   11c72:	|                 |  |         clr.l 34(sp)
   11c76:	|                 |  |         move.l 19b8e <SysBase>,d0
   11c7c:	|                 |  |         movea.l d0,a6
   11c7e:	|                 |  |         move.l 38(sp),d0
   11c82:	|                 |  |         move.l 34(sp),d1
   11c86:	|                 |  |         jsr -684(a6)
   11c8a:	|                 |  |         move.l d0,30(sp)
   11c8e:	|                 |  |         move.l 30(sp),d1
   11c92:	|                 |  |         move.l 136(sp),d0
   11c96:	|                 |  |         add.l d0,d0
   11c98:	|                 |  |         add.l d0,d0
   11c9a:	|                 |  |         movea.l 62(sp),a0
   11c9e:	|                 |  |         adda.l d0,a0
   11ca0:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   11ca2:	|                 |  |         movea.l 19c84 <currentFloor>,a0
   11ca8:	|                 |  |         move.l 16(a0),d1
   11cac:	|                 |  |         move.l 136(sp),d0
   11cb0:	|                 |  |         add.l d0,d0
   11cb2:	|                 |  |         add.l d0,d0
   11cb4:	|                 |  |         movea.l d1,a0
   11cb6:	|                 |  |         adda.l d0,a0
   11cb8:	|                 |  |         move.l (a0),d0
   11cba:	|                 |  |     /-- bne.s 11cd0 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   11cbc:	|                 |  |     |   pea 15f7b <zbuffer.c.4facf542+0x83e>
   11cc2:	|                 |  |     |   jsr 12130 <KPrintF>
   11cc8:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   11cca:	|                 |  |     |   clr.w d0
   11ccc:	+-----------------|--|-----|-- bra.w 1203e <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   11cd0:	|                 |  |     \-> clr.l 132(sp)
   11cd4:	|                 |  |     /-- bra.s 11d24 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   11cd6:	|                 |  |  /--|-> movea.l 19c84 <currentFloor>,a0
   11cdc:	|                 |  |  |  |   move.l 16(a0),d1
   11ce0:	|                 |  |  |  |   move.l 136(sp),d0
   11ce4:	|                 |  |  |  |   add.l d0,d0
   11ce6:	|                 |  |  |  |   add.l d0,d0
   11ce8:	|                 |  |  |  |   movea.l d1,a0
   11cea:	|                 |  |  |  |   adda.l d0,a0
   11cec:	|                 |  |  |  |   move.l (a0),d1
   11cee:	|                 |  |  |  |   move.l 132(sp),d0
   11cf2:	|                 |  |  |  |   add.l d0,d0
   11cf4:	|                 |  |  |  |   add.l d0,d0
   11cf6:	|                 |  |  |  |   movea.l d1,a0
   11cf8:	|                 |  |  |  |   adda.l d0,a0
   11cfa:	|                 |  |  |  |   moveq #-1,d1
   11cfc:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   11cfe:	|                 |  |  |  |   move.l 136(sp),d0
   11d02:	|                 |  |  |  |   add.l d0,d0
   11d04:	|                 |  |  |  |   add.l d0,d0
   11d06:	|                 |  |  |  |   movea.l 62(sp),a0
   11d0a:	|                 |  |  |  |   adda.l d0,a0
   11d0c:	|                 |  |  |  |   move.l (a0),d1
   11d0e:	|                 |  |  |  |   move.l 132(sp),d0
   11d12:	|                 |  |  |  |   add.l d0,d0
   11d14:	|                 |  |  |  |   add.l d0,d0
   11d16:	|                 |  |  |  |   movea.l d1,a0
   11d18:	|                 |  |  |  |   adda.l d0,a0
   11d1a:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   11d20:	|                 |  |  |  |   addq.l #1,132(sp)
   11d24:	|                 |  |  |  \-> movea.l 19c84 <currentFloor>,a0
   11d2a:	|                 |  |  |      move.l 8(a0),d0
   11d2e:	|                 |  |  |      cmp.l 132(sp),d0
   11d32:	|                 |  |  \----- bgt.s 11cd6 <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11d34:	|                 |  |         addq.l #1,136(sp)
   11d38:	|                 |  \-------> movea.l 19c84 <currentFloor>,a0
   11d3e:	|                 |            move.l 8(a0),d0
   11d42:	|                 |            cmp.l 136(sp),d0
   11d46:	|                 \----------- bgt.w 11c18 <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11d4a:	|                              clr.l 136(sp)
   11d4e:	|              /-------------- bra.w 11e54 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   11d52:	|           /--|-------------> clr.l 132(sp)
   11d56:	|           |  |     /-------- bra.w 11e3e <setFloor+0x570>
			if (i != j) {
   11d5a:	|           |  |  /--|-------> move.l 136(sp),d0
   11d5e:	|           |  |  |  |         cmp.l 132(sp),d0
   11d62:	|           |  |  |  |     /-- beq.w 11df4 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   11d66:	|           |  |  |  |     |   movea.l 19c84 <currentFloor>,a0
   11d6c:	|           |  |  |  |     |   move.l 12(a0),d1
   11d70:	|           |  |  |  |     |   move.l 132(sp),d0
   11d74:	|           |  |  |  |     |   lsl.l #3,d0
   11d76:	|           |  |  |  |     |   movea.l d1,a1
   11d78:	|           |  |  |  |     |   adda.l d0,a1
   11d7a:	|           |  |  |  |     |   movea.l 19c84 <currentFloor>,a0
   11d80:	|           |  |  |  |     |   move.l 12(a0),d1
   11d84:	|           |  |  |  |     |   move.l 136(sp),d0
   11d88:	|           |  |  |  |     |   lsl.l #3,d0
   11d8a:	|           |  |  |  |     |   movea.l d1,a0
   11d8c:	|           |  |  |  |     |   adda.l d0,a0
   11d8e:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   11d92:	|           |  |  |  |     |   move.l (a1),-(sp)
   11d94:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   11d98:	|           |  |  |  |     |   move.l (a0),-(sp)
   11d9a:	|           |  |  |  |     |   jsr 11626 <polysShareSide>
   11da0:	|           |  |  |  |     |   lea 16(sp),sp
   11da4:	|           |  |  |  |     |   tst.w d0
   11da6:	|           |  |  |  |  /--|-- beq.w 11e3a <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   11daa:	|           |  |  |  |  |  |   movea.l 19c84 <currentFloor>,a0
   11db0:	|           |  |  |  |  |  |   move.l 16(a0),d1
   11db4:	|           |  |  |  |  |  |   move.l 136(sp),d0
   11db8:	|           |  |  |  |  |  |   add.l d0,d0
   11dba:	|           |  |  |  |  |  |   add.l d0,d0
   11dbc:	|           |  |  |  |  |  |   movea.l d1,a0
   11dbe:	|           |  |  |  |  |  |   adda.l d0,a0
   11dc0:	|           |  |  |  |  |  |   move.l (a0),d1
   11dc2:	|           |  |  |  |  |  |   move.l 132(sp),d0
   11dc6:	|           |  |  |  |  |  |   add.l d0,d0
   11dc8:	|           |  |  |  |  |  |   add.l d0,d0
   11dca:	|           |  |  |  |  |  |   movea.l d1,a0
   11dcc:	|           |  |  |  |  |  |   adda.l d0,a0
   11dce:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   11dd2:	|           |  |  |  |  |  |   move.l 136(sp),d0
   11dd6:	|           |  |  |  |  |  |   add.l d0,d0
   11dd8:	|           |  |  |  |  |  |   add.l d0,d0
   11dda:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   11dde:	|           |  |  |  |  |  |   adda.l d0,a0
   11de0:	|           |  |  |  |  |  |   move.l (a0),d1
   11de2:	|           |  |  |  |  |  |   move.l 132(sp),d0
   11de6:	|           |  |  |  |  |  |   add.l d0,d0
   11de8:	|           |  |  |  |  |  |   add.l d0,d0
   11dea:	|           |  |  |  |  |  |   movea.l d1,a0
   11dec:	|           |  |  |  |  |  |   adda.l d0,a0
   11dee:	|           |  |  |  |  |  |   moveq #1,d1
   11df0:	|           |  |  |  |  |  |   move.l d1,(a0)
   11df2:	|           |  |  |  |  +--|-- bra.s 11e3a <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   11df4:	|           |  |  |  |  |  \-> movea.l 19c84 <currentFloor>,a0
   11dfa:	|           |  |  |  |  |      move.l 16(a0),d1
   11dfe:	|           |  |  |  |  |      move.l 136(sp),d0
   11e02:	|           |  |  |  |  |      add.l d0,d0
   11e04:	|           |  |  |  |  |      add.l d0,d0
   11e06:	|           |  |  |  |  |      movea.l d1,a0
   11e08:	|           |  |  |  |  |      adda.l d0,a0
   11e0a:	|           |  |  |  |  |      move.l (a0),d1
   11e0c:	|           |  |  |  |  |      move.l 132(sp),d0
   11e10:	|           |  |  |  |  |      add.l d0,d0
   11e12:	|           |  |  |  |  |      add.l d0,d0
   11e14:	|           |  |  |  |  |      movea.l d1,a0
   11e16:	|           |  |  |  |  |      adda.l d0,a0
   11e18:	|           |  |  |  |  |      moveq #-2,d0
   11e1a:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   11e1c:	|           |  |  |  |  |      move.l 136(sp),d0
   11e20:	|           |  |  |  |  |      add.l d0,d0
   11e22:	|           |  |  |  |  |      add.l d0,d0
   11e24:	|           |  |  |  |  |      movea.l 62(sp),a0
   11e28:	|           |  |  |  |  |      adda.l d0,a0
   11e2a:	|           |  |  |  |  |      move.l (a0),d1
   11e2c:	|           |  |  |  |  |      move.l 132(sp),d0
   11e30:	|           |  |  |  |  |      add.l d0,d0
   11e32:	|           |  |  |  |  |      add.l d0,d0
   11e34:	|           |  |  |  |  |      movea.l d1,a0
   11e36:	|           |  |  |  |  |      adda.l d0,a0
   11e38:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   11e3a:	|           |  |  |  |  \----> addq.l #1,132(sp)
   11e3e:	|           |  |  |  \-------> movea.l 19c84 <currentFloor>,a0
   11e44:	|           |  |  |            move.l 8(a0),d0
   11e48:	|           |  |  |            cmp.l 132(sp),d0
   11e4c:	|           |  |  \----------- bgt.w 11d5a <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11e50:	|           |  |               addq.l #1,136(sp)
   11e54:	|           |  \-------------> movea.l 19c84 <currentFloor>,a0
   11e5a:	|           |                  move.l 8(a0),d0
   11e5e:	|           |                  cmp.l 136(sp),d0
   11e62:	|           \----------------- bgt.w 11d52 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   11e66:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   11e6a:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   11e6e:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11e72:	|  |                           clr.l 136(sp)
   11e76:	|  |     /-------------------- bra.w 11fcc <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   11e7a:	|  |  /--|-------------------> clr.l 132(sp)
   11e7e:	|  |  |  |     /-------------- bra.w 11fb6 <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   11e82:	|  |  |  |  /--|-------------> movea.l 19c84 <currentFloor>,a0
   11e88:	|  |  |  |  |  |               move.l 16(a0),d1
   11e8c:	|  |  |  |  |  |               move.l 136(sp),d0
   11e90:	|  |  |  |  |  |               add.l d0,d0
   11e92:	|  |  |  |  |  |               add.l d0,d0
   11e94:	|  |  |  |  |  |               movea.l d1,a0
   11e96:	|  |  |  |  |  |               adda.l d0,a0
   11e98:	|  |  |  |  |  |               move.l (a0),d1
   11e9a:	|  |  |  |  |  |               move.l 132(sp),d0
   11e9e:	|  |  |  |  |  |               add.l d0,d0
   11ea0:	|  |  |  |  |  |               add.l d0,d0
   11ea2:	|  |  |  |  |  |               movea.l d1,a0
   11ea4:	|  |  |  |  |  |               adda.l d0,a0
   11ea6:	|  |  |  |  |  |               move.l (a0),d0
   11ea8:	|  |  |  |  |  |               moveq #-1,d1
   11eaa:	|  |  |  |  |  |               cmp.l d0,d1
   11eac:	|  |  |  |  |  |  /----------- bne.w 11fb2 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   11eb0:	|  |  |  |  |  |  |            clr.l 122(sp)
   11eb4:	|  |  |  |  |  |  |     /----- bra.w 11fa0 <setFloor+0x6d2>
						if (d != i && d != j) {
   11eb8:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   11ebc:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   11ec0:	|  |  |  |  |  |  |  |  |  /-- beq.w 11f9c <setFloor+0x6ce>
   11ec4:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   11ec8:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   11ecc:	|  |  |  |  |  |  |  |  |  +-- beq.w 11f9c <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   11ed0:	|  |  |  |  |  |  |  |  |  |   movea.l 19c84 <currentFloor>,a0
   11ed6:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   11eda:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   11ede:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11ee0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11ee2:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11ee4:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11ee6:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   11ee8:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   11eec:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11eee:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11ef0:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11ef2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11ef4:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   11ef6:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   11efa:	|  |  |  |  |  |  |  |  |  +-- bne.w 11f9c <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   11efe:	|  |  |  |  |  |  |  |  |  |   movea.l 19c84 <currentFloor>,a0
   11f04:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   11f08:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   11f0c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11f0e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11f10:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11f12:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11f14:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   11f16:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   11f1a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11f1c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11f1e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11f20:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11f22:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   11f24:	|  |  |  |  |  |  |  |  |  +-- bmi.s 11f9c <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   11f26:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   11f2a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11f2c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11f2e:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   11f32:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11f34:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   11f36:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   11f3a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11f3c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11f3e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11f40:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11f42:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   11f44:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   11f48:	|  |  |  |  |  |  |  |  |  +-- bgt.s 11f9c <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   11f4a:	|  |  |  |  |  |  |  |  |  |   movea.l 19c84 <currentFloor>,a0
   11f50:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   11f54:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   11f58:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11f5a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11f5c:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11f5e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11f60:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   11f62:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   11f66:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11f68:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11f6a:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11f6c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11f6e:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   11f72:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   11f76:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11f78:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11f7a:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   11f7e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11f80:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   11f82:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   11f86:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11f88:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11f8a:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11f8c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11f8e:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   11f92:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   11f94:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   11f96:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   11f9c:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   11fa0:	|  |  |  |  |  |  |  |  \----> movea.l 19c84 <currentFloor>,a0
   11fa6:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   11faa:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   11fae:	|  |  |  |  |  |  |  \-------- bgt.w 11eb8 <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   11fb2:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   11fb6:	|  |  |  |  |  \-------------> movea.l 19c84 <currentFloor>,a0
   11fbc:	|  |  |  |  |                  move.l 8(a0),d0
   11fc0:	|  |  |  |  |                  cmp.l 132(sp),d0
   11fc4:	|  |  |  |  \----------------- bgt.w 11e82 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11fc8:	|  |  |  |                     addq.l #1,136(sp)
   11fcc:	|  |  |  \-------------------> movea.l 19c84 <currentFloor>,a0
   11fd2:	|  |  |                        move.l 8(a0),d0
   11fd6:	|  |  |                        cmp.l 136(sp),d0
   11fda:	|  |  \----------------------- bgt.w 11e7a <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   11fde:	|  |                           tst.w 130(sp)
   11fe2:	|  \-------------------------- bne.w 11e6a <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11fe6:	|                              clr.l 136(sp)
   11fea:	|                          /-- bra.s 12012 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   11fec:	|                       /--|-> move.l 136(sp),d0
   11ff0:	|                       |  |   add.l d0,d0
   11ff2:	|                       |  |   add.l d0,d0
   11ff4:	|                       |  |   movea.l 62(sp),a0
   11ff8:	|                       |  |   adda.l d0,a0
   11ffa:	|                       |  |   move.l (a0),54(sp)
   11ffe:	|                       |  |   move.l 19b8e <SysBase>,d0
   12004:	|                       |  |   movea.l d0,a6
   12006:	|                       |  |   movea.l 54(sp),a1
   1200a:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1200e:	|                       |  |   addq.l #1,136(sp)
   12012:	|                       |  \-> movea.l 19c84 <currentFloor>,a0
   12018:	|                       |      move.l 8(a0),d0
   1201c:	|                       |      cmp.l 136(sp),d0
   12020:	|                       \----- bgt.s 11fec <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   12022:	|                              move.l 62(sp),58(sp)
   12028:	|                              move.l 19b8e <SysBase>,d0
   1202e:	|                              movea.l d0,a6
   12030:	|                              movea.l 58(sp),a1
   12034:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   12038:	|                              clr.l 62(sp)

	return TRUE;
   1203c:	|                              moveq #1,d0
}
   1203e:	\----------------------------> movea.l (sp)+,a2
   12040:	                               movea.l (sp)+,a6
   12042:	                               lea 132(sp),sp
   12046:	                               rts

00012048 <setFloorNull>:

void setFloorNull () {
	killFloor ();
   12048:	jsr 11536 <killFloor>
	noFloor ();
   1204e:	jsr 1145a <noFloor>
   12054:	nop
   12056:	rts

00012058 <WaitVbl>:
void WaitVbl() {
   12058:	       subq.l #8,sp
	debug_start_idle();
   1205a:	       jsr 12308 <debug_start_idle>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   12060:	   /-> movea.l #14675972,a0
   12066:	   |   move.l (a0),d0
   12068:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   1206a:	   |   move.l (sp),d0
   1206c:	   |   andi.l #130816,d0
   12072:	   |   move.l d0,(sp)
		if (vpos!=(311<<8))
   12074:	   |   move.l (sp),d0
   12076:	   |   cmpi.l #79616,d0
   1207c:	   \-- beq.s 12060 <WaitVbl+0x8>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   1207e:	/----> movea.l #14675972,a0
   12084:	|      move.l (a0),d0
   12086:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   1208a:	|      move.l 4(sp),d0
   1208e:	|      andi.l #130816,d0
   12094:	|      move.l d0,4(sp)
		if (vpos==(311<<8))
   12098:	|      move.l 4(sp),d0
   1209c:	|      cmpi.l #79616,d0
   120a2:	|  /-- beq.s 120a6 <WaitVbl+0x4e>
	while (1) {
   120a4:	\--|-- bra.s 1207e <WaitVbl+0x26>
			break;
   120a6:	   \-> nop
	debug_stop_idle();
   120a8:	       jsr 12322 <debug_stop_idle>
}
   120ae:	       nop
   120b0:	       addq.l #8,sp
   120b2:	       rts

000120b4 <memset>:
void* memset(void *dest, int val, unsigned long len) {
   120b4:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   120b6:	       move.l 8(sp),(sp)
	while(len-- > 0)
   120ba:	   /-- bra.s 120cc <memset+0x18>
		*ptr++ = val;
   120bc:	/--|-> move.l (sp),d0
   120be:	|  |   move.l d0,d1
   120c0:	|  |   addq.l #1,d1
   120c2:	|  |   move.l d1,(sp)
   120c4:	|  |   move.l 12(sp),d1
   120c8:	|  |   movea.l d0,a0
   120ca:	|  |   move.b d1,(a0)
	while(len-- > 0)
   120cc:	|  \-> move.l 16(sp),d0
   120d0:	|      move.l d0,d1
   120d2:	|      subq.l #1,d1
   120d4:	|      move.l d1,16(sp)
   120d8:	|      tst.l d0
   120da:	\----- bne.s 120bc <memset+0x8>
	return dest;
   120dc:	       move.l 8(sp),d0
}
   120e0:	       addq.l #4,sp
   120e2:	       rts

000120e4 <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   120e4:	       subq.l #8,sp
   120e6:	       move.l d2,-(sp)
	char *d = (char *)dest;
   120e8:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   120ee:	       move.l 20(sp),4(sp)
	while(len--)
   120f4:	   /-- bra.s 12116 <memcpy+0x32>
		*d++ = *s++;
   120f6:	/--|-> move.l 4(sp),d1
   120fa:	|  |   move.l d1,d0
   120fc:	|  |   addq.l #1,d0
   120fe:	|  |   move.l d0,4(sp)
   12102:	|  |   move.l 8(sp),d0
   12106:	|  |   move.l d0,d2
   12108:	|  |   addq.l #1,d2
   1210a:	|  |   move.l d2,8(sp)
   1210e:	|  |   movea.l d1,a0
   12110:	|  |   move.b (a0),d1
   12112:	|  |   movea.l d0,a0
   12114:	|  |   move.b d1,(a0)
	while(len--)
   12116:	|  \-> move.l 24(sp),d0
   1211a:	|      move.l d0,d1
   1211c:	|      subq.l #1,d1
   1211e:	|      move.l d1,24(sp)
   12122:	|      tst.l d0
   12124:	\----- bne.s 120f6 <memcpy+0x12>
	return dest;
   12126:	       move.l 16(sp),d0
}
   1212a:	       move.l (sp)+,d2
   1212c:	       addq.l #8,sp
   1212e:	       rts

00012130 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   12130:	       lea -128(sp),sp
   12134:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   12138:	       move.w f0ff60 <gcc8_c_support.c.8bf68f31+0xed375a>,d0
   1213e:	       cmpi.w #20153,d0
   12142:	   /-- beq.s 12166 <KPrintF+0x36>
   12144:	   |   cmpi.w #-24562,d0
   12148:	   +-- beq.s 12166 <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   1214a:	   |   movea.l 19b8e <SysBase>,a6
   12150:	   |   movea.l 144(sp),a0
   12154:	   |   lea 148(sp),a1
   12158:	   |   lea 12bea <KPutCharX>,a2
   1215e:	   |   suba.l a3,a3
   12160:	   |   jsr -522(a6)
}
   12164:	/--|-- bra.s 12190 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   12166:	|  \-> movea.l 19b8e <SysBase>,a6
   1216c:	|      movea.l 144(sp),a0
   12170:	|      lea 148(sp),a1
   12174:	|      lea 12bf8 <PutChar>,a2
   1217a:	|      lea 12(sp),a3
   1217e:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   12182:	|      move.l a3,-(sp)
   12184:	|      pea 56 <_start+0x56>
   12188:	|      jsr f0ff60 <gcc8_c_support.c.8bf68f31+0xed375a>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   1218e:	|      addq.l #8,sp
}
   12190:	\----> movem.l (sp)+,a2-a3/a6
   12194:	       lea 128(sp),sp
   12198:	       rts

0001219a <warpmode>:

void warpmode(int on) { // bool
   1219a:	          subq.l #8,sp
	long(*UaeConf)(long mode, int index, const char* param, int param_len, char* outbuf, int outbuf_len);
	UaeConf = (long(*)(long, int, const char*, int, char*, int))0xf0ff60;
   1219c:	          move.l #15794016,4(sp)
	if(*((UWORD *)UaeConf) == 0x4eb9 || *((UWORD *)UaeConf) == 0xa00e) {
   121a4:	          movea.l 4(sp),a0
   121a8:	          move.w (a0),d0
   121aa:	          cmpi.w #20153,d0
   121ae:	      /-- beq.s 121be <warpmode+0x24>
   121b0:	      |   movea.l 4(sp),a0
   121b4:	      |   move.w (a0),d0
   121b6:	      |   cmpi.w #-24562,d0
   121ba:	/-----|-- bne.w 122c2 <warpmode+0x128>
		char outbuf;
		UaeConf(82, -1, on ? "cpu_speed max" : "cpu_speed real", 0, &outbuf, 1);
   121be:	|     \-> tst.l 12(sp)
   121c2:	|  /----- beq.s 121cc <warpmode+0x32>
   121c4:	|  |      move.l #90012,d0
   121ca:	|  |  /-- bra.s 121d2 <warpmode+0x38>
   121cc:	|  \--|-> move.l #90026,d0
   121d2:	|     \-> pea 1 <_start+0x1>
   121d6:	|         move.l sp,d1
   121d8:	|         addq.l #7,d1
   121da:	|         move.l d1,-(sp)
   121dc:	|         clr.l -(sp)
   121de:	|         move.l d0,-(sp)
   121e0:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffc37f9>
   121e4:	|         pea 52 <_start+0x52>
   121e8:	|         movea.l 28(sp),a0
   121ec:	|         jsr (a0)
   121ee:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "cpu_cycle_exact false" : "cpu_cycle_exact true", 0, &outbuf, 1);
   121f2:	|         tst.l 12(sp)
   121f6:	|  /----- beq.s 12200 <warpmode+0x66>
   121f8:	|  |      move.l #90041,d0
   121fe:	|  |  /-- bra.s 12206 <warpmode+0x6c>
   12200:	|  \--|-> move.l #90063,d0
   12206:	|     \-> pea 1 <_start+0x1>
   1220a:	|         move.l sp,d1
   1220c:	|         addq.l #7,d1
   1220e:	|         move.l d1,-(sp)
   12210:	|         clr.l -(sp)
   12212:	|         move.l d0,-(sp)
   12214:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffc37f9>
   12218:	|         pea 52 <_start+0x52>
   1221c:	|         movea.l 28(sp),a0
   12220:	|         jsr (a0)
   12222:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "cpu_memory_cycle_exact false" : "cpu_memory_cycle_exact true", 0, &outbuf, 1);
   12226:	|         tst.l 12(sp)
   1222a:	|  /----- beq.s 12234 <warpmode+0x9a>
   1222c:	|  |      move.l #90084,d0
   12232:	|  |  /-- bra.s 1223a <warpmode+0xa0>
   12234:	|  \--|-> move.l #90113,d0
   1223a:	|     \-> pea 1 <_start+0x1>
   1223e:	|         move.l sp,d1
   12240:	|         addq.l #7,d1
   12242:	|         move.l d1,-(sp)
   12244:	|         clr.l -(sp)
   12246:	|         move.l d0,-(sp)
   12248:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffc37f9>
   1224c:	|         pea 52 <_start+0x52>
   12250:	|         movea.l 28(sp),a0
   12254:	|         jsr (a0)
   12256:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
   1225a:	|         tst.l 12(sp)
   1225e:	|  /----- beq.s 12268 <warpmode+0xce>
   12260:	|  |      move.l #90141,d0
   12266:	|  |  /-- bra.s 1226e <warpmode+0xd4>
   12268:	|  \--|-> move.l #90167,d0
   1226e:	|     \-> pea 1 <_start+0x1>
   12272:	|         move.l sp,d1
   12274:	|         addq.l #7,d1
   12276:	|         move.l d1,-(sp)
   12278:	|         clr.l -(sp)
   1227a:	|         move.l d0,-(sp)
   1227c:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffc37f9>
   12280:	|         pea 52 <_start+0x52>
   12284:	|         movea.l 28(sp),a0
   12288:	|         jsr (a0)
   1228a:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
   1228e:	|         tst.l 12(sp)
   12292:	|  /----- beq.s 1229c <warpmode+0x102>
   12294:	|  |      move.l #90192,d0
   1229a:	|  |  /-- bra.s 122a2 <warpmode+0x108>
   1229c:	|  \--|-> move.l #90202,d0
   122a2:	|     \-> pea 1 <_start+0x1>
   122a6:	|         move.l sp,d1
   122a8:	|         addq.l #7,d1
   122aa:	|         move.l d1,-(sp)
   122ac:	|         clr.l -(sp)
   122ae:	|         move.l d0,-(sp)
   122b0:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffc37f9>
   122b4:	|         pea 52 <_start+0x52>
   122b8:	|         movea.l 28(sp),a0
   122bc:	|         jsr (a0)
   122be:	|         lea 24(sp),sp
	}
}
   122c2:	\-------> nop
   122c4:	          addq.l #8,sp
   122c6:	          rts

000122c8 <debug_cmd>:

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   122c8:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   122ca:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   122d0:	       movea.l (sp),a0
   122d2:	       move.w (a0),d0
   122d4:	       cmpi.w #20153,d0
   122d8:	   /-- beq.s 122e4 <debug_cmd+0x1c>
   122da:	   |   movea.l (sp),a0
   122dc:	   |   move.w (a0),d0
   122de:	   |   cmpi.w #-24562,d0
   122e2:	/--|-- bne.s 12302 <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   122e4:	|  \-> move.l 20(sp),-(sp)
   122e8:	|      move.l 20(sp),-(sp)
   122ec:	|      move.l 20(sp),-(sp)
   122f0:	|      move.l 20(sp),-(sp)
   122f4:	|      pea 58 <_start+0x58>
   122f8:	|      movea.l 20(sp),a0
   122fc:	|      jsr (a0)
   122fe:	|      lea 20(sp),sp
	}
}
   12302:	\----> nop
   12304:	       addq.l #4,sp
   12306:	       rts

00012308 <debug_start_idle>:
	debug_cmd(barto_cmd_text, (((unsigned int)left) << 16) | ((unsigned int)top), (unsigned int)text, color);
}

// profiler
void debug_start_idle() {
	debug_cmd(barto_cmd_set_idle, 1, 0, 0);
   12308:	clr.l -(sp)
   1230a:	clr.l -(sp)
   1230c:	pea 1 <_start+0x1>
   12310:	pea 5 <_start+0x5>
   12314:	jsr 122c8 <debug_cmd>
   1231a:	lea 16(sp),sp
}
   1231e:	nop
   12320:	rts

00012322 <debug_stop_idle>:

void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
   12322:	clr.l -(sp)
   12324:	clr.l -(sp)
   12326:	clr.l -(sp)
   12328:	pea 5 <_start+0x5>
   1232c:	jsr 122c8 <debug_cmd>
   12332:	lea 16(sp),sp
}
   12336:	nop
   12338:	rts

0001233a <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   1233a:	lea -12(sp),sp
   1233e:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   12340:	move.l 20(sp),12(sp)
   12346:	move.l 24(sp),8(sp)
   1234c:	move.l 19b9e <MathIeeeSingBasBase>,d0
   12352:	movea.l d0,a6
   12354:	move.l 12(sp),d0
   12358:	move.l 8(sp),d1
   1235c:	jsr -66(a6)
   12360:	move.l d0,4(sp)
   12364:	move.l 4(sp),d0
}
   12368:	movea.l (sp)+,a6
   1236a:	lea 12(sp),sp
   1236e:	rts

00012370 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   12370:	lea -32(sp),sp
   12374:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   12378:	move.l 48(sp),36(sp)
   1237e:	move.l 52(sp),40(sp)
   12384:	move.l 56(sp),28(sp)
   1238a:	move.l 60(sp),32(sp)
   12390:	move.l 19ba6 <MathIeeeDoubBasBase>,d0
   12396:	movea.l d0,a6
   12398:	move.l 36(sp),d0
   1239c:	move.l 40(sp),d1
   123a0:	move.l 28(sp),d2
   123a4:	move.l 32(sp),d3
   123a8:	jsr -66(a6)
   123ac:	move.l d0,12(sp)
   123b0:	move.l d1,16(sp)
   123b4:	move.l 12(sp),20(sp)
   123ba:	move.l 16(sp),24(sp)
   123c0:	move.l 20(sp),d0
   123c4:	move.l 24(sp),d1
}
   123c8:	movem.l (sp)+,d2-d3/a6
   123cc:	lea 32(sp),sp
   123d0:	rts

000123d2 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   123d2:	lea -32(sp),sp
   123d6:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   123da:	move.l 48(sp),36(sp)
   123e0:	move.l 52(sp),40(sp)
   123e6:	move.l 56(sp),28(sp)
   123ec:	move.l 60(sp),32(sp)
   123f2:	move.l 19ba6 <MathIeeeDoubBasBase>,d0
   123f8:	movea.l d0,a6
   123fa:	move.l 36(sp),d0
   123fe:	move.l 40(sp),d1
   12402:	move.l 28(sp),d2
   12406:	move.l 32(sp),d3
   1240a:	jsr -84(a6)
   1240e:	move.l d0,12(sp)
   12412:	move.l d1,16(sp)
   12416:	move.l 12(sp),20(sp)
   1241c:	move.l 16(sp),24(sp)
   12422:	move.l 20(sp),d0
   12426:	move.l 24(sp),d1
}
   1242a:	movem.l (sp)+,d2-d3/a6
   1242e:	lea 32(sp),sp
   12432:	rts

00012434 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   12434:	lea -12(sp),sp
   12438:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   1243a:	move.l 20(sp),12(sp)
   12440:	move.l 24(sp),8(sp)
   12446:	move.l 19b9e <MathIeeeSingBasBase>,d0
   1244c:	movea.l d0,a6
   1244e:	move.l 12(sp),d0
   12452:	move.l 8(sp),d1
   12456:	jsr -84(a6)
   1245a:	move.l d0,4(sp)
   1245e:	move.l 4(sp),d0
}
   12462:	movea.l (sp)+,a6
   12464:	lea 12(sp),sp
   12468:	rts

0001246a <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   1246a:	lea -12(sp),sp
   1246e:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   12470:	move.l 20(sp),12(sp)
   12476:	move.l 24(sp),8(sp)
   1247c:	move.l 19b9e <MathIeeeSingBasBase>,d0
   12482:	movea.l d0,a6
   12484:	move.l 12(sp),d0
   12488:	move.l 8(sp),d1
   1248c:	jsr -42(a6)
   12490:	move.l d0,4(sp)
   12494:	move.l 4(sp),d0
}
   12498:	movea.l (sp)+,a6
   1249a:	lea 12(sp),sp
   1249e:	rts

000124a0 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   124a0:	lea -20(sp),sp
   124a4:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   124a6:	move.l 28(sp),20(sp)
   124ac:	move.l 19baa <MathIeeeDoubTransBase>,d0
   124b2:	movea.l d0,a6
   124b4:	move.l 20(sp),d0
   124b8:	jsr -108(a6)
   124bc:	move.l d0,4(sp)
   124c0:	move.l d1,8(sp)
   124c4:	move.l 4(sp),12(sp)
   124ca:	move.l 8(sp),16(sp)
   124d0:	move.l 12(sp),d0
   124d4:	move.l 16(sp),d1
}
   124d8:	movea.l (sp)+,a6
   124da:	lea 20(sp),sp
   124de:	rts

000124e0 <__fixdfsi>:

DOUBLE __fixdfsi(DOUBLE value) {
   124e0:	lea -12(sp),sp
   124e4:	move.l a6,-(sp)
	return IEEEDPFix(value);
   124e6:	move.l 20(sp),8(sp)
   124ec:	move.l 24(sp),12(sp)
   124f2:	move.l 19ba6 <MathIeeeDoubBasBase>,d0
   124f8:	movea.l d0,a6
   124fa:	move.l 8(sp),d0
   124fe:	move.l 12(sp),d1
   12502:	jsr -30(a6)
   12506:	move.l d0,4(sp)
   1250a:	move.l 4(sp),d0
   1250e:	move.l d0,-(sp)
   12510:	jsr 12548 <__floatsidf>
   12516:	addq.l #4,sp
}
   12518:	movea.l (sp)+,a6
   1251a:	lea 12(sp),sp
   1251e:	rts

00012520 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   12520:	subq.l #8,sp
   12522:	move.l a6,-(sp)
	return IEEESPFix(value);
   12524:	move.l 16(sp),8(sp)
   1252a:	move.l 19b9e <MathIeeeSingBasBase>,d0
   12530:	movea.l d0,a6
   12532:	move.l 8(sp),d0
   12536:	jsr -30(a6)
   1253a:	move.l d0,4(sp)
   1253e:	move.l 4(sp),d0
}
   12542:	movea.l (sp)+,a6
   12544:	addq.l #8,sp
   12546:	rts

00012548 <__floatsidf>:


DOUBLE __floatsidf (int i) {
   12548:	lea -20(sp),sp
   1254c:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   1254e:	move.l 28(sp),20(sp)
   12554:	move.l 19ba6 <MathIeeeDoubBasBase>,d0
   1255a:	movea.l d0,a6
   1255c:	move.l 20(sp),d0
   12560:	jsr -36(a6)
   12564:	move.l d0,4(sp)
   12568:	move.l d1,8(sp)
   1256c:	move.l 4(sp),12(sp)
   12572:	move.l 8(sp),16(sp)
   12578:	move.l 12(sp),d0
   1257c:	move.l 16(sp),d1
}
   12580:	movea.l (sp)+,a6
   12582:	lea 20(sp),sp
   12586:	rts

00012588 <__floatsisf>:

FLOAT __floatsisf(int i) {
   12588:	subq.l #8,sp
   1258a:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   1258c:	move.l 16(sp),8(sp)
   12592:	move.l 19b9e <MathIeeeSingBasBase>,d0
   12598:	movea.l d0,a6
   1259a:	move.l 8(sp),d0
   1259e:	jsr -36(a6)
   125a2:	move.l d0,4(sp)
   125a6:	move.l 4(sp),d0
}
   125aa:	movea.l (sp)+,a6
   125ac:	addq.l #8,sp
   125ae:	rts

000125b0 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   125b0:	subq.l #8,sp
   125b2:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   125b4:	move.l 16(sp),8(sp)
   125ba:	move.l 19b9e <MathIeeeSingBasBase>,d0
   125c0:	movea.l d0,a6
   125c2:	move.l 8(sp),d0
   125c6:	jsr -36(a6)
   125ca:	move.l d0,4(sp)
   125ce:	move.l 4(sp),d0
}
   125d2:	movea.l (sp)+,a6
   125d4:	addq.l #8,sp
   125d6:	rts

000125d8 <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   125d8:	lea -32(sp),sp
   125dc:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   125e0:	move.l 48(sp),36(sp)
   125e6:	move.l 52(sp),40(sp)
   125ec:	move.l 56(sp),28(sp)
   125f2:	move.l 60(sp),32(sp)
   125f8:	move.l 19ba6 <MathIeeeDoubBasBase>,d0
   125fe:	movea.l d0,a6
   12600:	move.l 36(sp),d0
   12604:	move.l 40(sp),d1
   12608:	move.l 28(sp),d2
   1260c:	move.l 32(sp),d3
   12610:	jsr -78(a6)
   12614:	move.l d0,12(sp)
   12618:	move.l d1,16(sp)
   1261c:	move.l 12(sp),20(sp)
   12622:	move.l 16(sp),24(sp)
   12628:	move.l 20(sp),d0
   1262c:	move.l 24(sp),d1
}
   12630:	movem.l (sp)+,d2-d3/a6
   12634:	lea 32(sp),sp
   12638:	rts

0001263a <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   1263a:	lea -12(sp),sp
   1263e:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   12640:	move.l 20(sp),12(sp)
   12646:	move.l 24(sp),8(sp)
   1264c:	move.l 19b9e <MathIeeeSingBasBase>,d0
   12652:	movea.l d0,a6
   12654:	move.l 12(sp),d0
   12658:	move.l 8(sp),d1
   1265c:	jsr -78(a6)
   12660:	move.l d0,4(sp)
   12664:	move.l 4(sp),d0
}
   12668:	movea.l (sp)+,a6
   1266a:	lea 12(sp),sp
   1266e:	rts

00012670 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   12670:	lea -12(sp),sp
   12674:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   12676:	move.l 20(sp),12(sp)
   1267c:	move.l 24(sp),8(sp)
   12682:	move.l 19b9e <MathIeeeSingBasBase>,d0
   12688:	movea.l d0,a6
   1268a:	move.l 12(sp),d0
   1268e:	move.l 8(sp),d1
   12692:	jsr -42(a6)
   12696:	move.l d0,4(sp)
   1269a:	move.l 4(sp),d0
}
   1269e:	movea.l (sp)+,a6
   126a0:	lea 12(sp),sp
   126a4:	rts

000126a6 <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   126a6:	lea -20(sp),sp
   126aa:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   126ae:	move.l 36(sp),24(sp)
   126b4:	move.l 40(sp),28(sp)
   126ba:	move.l 44(sp),16(sp)
   126c0:	move.l 48(sp),20(sp)
   126c6:	move.l 19ba6 <MathIeeeDoubBasBase>,d0
   126cc:	movea.l d0,a6
   126ce:	move.l 24(sp),d0
   126d2:	move.l 28(sp),d1
   126d6:	move.l 16(sp),d2
   126da:	move.l 20(sp),d3
   126de:	jsr -42(a6)
   126e2:	move.l d0,12(sp)
   126e6:	move.l 12(sp),d0
}
   126ea:	movem.l (sp)+,d2-d3/a6
   126ee:	lea 20(sp),sp
   126f2:	rts

000126f4 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   126f4:	lea -12(sp),sp
   126f8:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   126fa:	move.l 20(sp),12(sp)
   12700:	move.l 24(sp),8(sp)
   12706:	move.l 19b9e <MathIeeeSingBasBase>,d0
   1270c:	movea.l d0,a6
   1270e:	move.l 12(sp),d0
   12712:	move.l 8(sp),d1
   12716:	jsr -42(a6)
   1271a:	move.l d0,4(sp)
   1271e:	move.l 4(sp),d0
}
   12722:	movea.l (sp)+,a6
   12724:	lea 12(sp),sp
   12728:	rts

0001272a <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   1272a:	lea -12(sp),sp
   1272e:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   12730:	move.l 20(sp),12(sp)
   12736:	move.l 24(sp),8(sp)
   1273c:	move.l 19b9e <MathIeeeSingBasBase>,d0
   12742:	movea.l d0,a6
   12744:	move.l 12(sp),d0
   12748:	move.l 8(sp),d1
   1274c:	jsr -42(a6)
   12750:	move.l d0,4(sp)
   12754:	move.l 4(sp),d0
}
   12758:	movea.l (sp)+,a6
   1275a:	lea 12(sp),sp
   1275e:	rts

00012760 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   12760:	lea -20(sp),sp
   12764:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   12768:	move.l 36(sp),24(sp)
   1276e:	move.l 40(sp),28(sp)
   12774:	move.l 44(sp),16(sp)
   1277a:	move.l 48(sp),20(sp)
   12780:	move.l 19ba6 <MathIeeeDoubBasBase>,d0
   12786:	movea.l d0,a6
   12788:	move.l 24(sp),d0
   1278c:	move.l 28(sp),d1
   12790:	move.l 16(sp),d2
   12794:	move.l 20(sp),d3
   12798:	jsr -42(a6)
   1279c:	move.l d0,12(sp)
   127a0:	move.l 12(sp),d0
}
   127a4:	movem.l (sp)+,d2-d3/a6
   127a8:	lea 20(sp),sp
   127ac:	rts

000127ae <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   127ae:	lea -12(sp),sp
   127b2:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   127b4:	move.l 20(sp),12(sp)
   127ba:	move.l 24(sp),8(sp)
   127c0:	move.l 19b9e <MathIeeeSingBasBase>,d0
   127c6:	movea.l d0,a6
   127c8:	move.l 12(sp),d0
   127cc:	move.l 8(sp),d1
   127d0:	jsr -42(a6)
   127d4:	move.l d0,4(sp)
   127d8:	move.l 4(sp),d0
}
   127dc:	movea.l (sp)+,a6
   127de:	lea 12(sp),sp
   127e2:	rts

000127e4 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   127e4:	lea -12(sp),sp
   127e8:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   127ea:	move.l 20(sp),12(sp)
   127f0:	move.l 24(sp),8(sp)
   127f6:	move.l 19b9e <MathIeeeSingBasBase>,d0
   127fc:	movea.l d0,a6
   127fe:	move.l 12(sp),d0
   12802:	move.l 8(sp),d1
   12806:	jsr -42(a6)
   1280a:	move.l d0,4(sp)
   1280e:	move.l 4(sp),d0
}
   12812:	movea.l (sp)+,a6
   12814:	lea 12(sp),sp
   12818:	rts

0001281a <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   1281a:	lea -32(sp),sp
   1281e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   12822:	move.l 48(sp),36(sp)
   12828:	move.l 52(sp),40(sp)
   1282e:	move.l 56(sp),28(sp)
   12834:	move.l 60(sp),32(sp)
   1283a:	move.l 19ba6 <MathIeeeDoubBasBase>,d0
   12840:	movea.l d0,a6
   12842:	move.l 36(sp),d0
   12846:	move.l 40(sp),d1
   1284a:	move.l 28(sp),d2
   1284e:	move.l 32(sp),d3
   12852:	jsr -72(a6)
   12856:	move.l d0,12(sp)
   1285a:	move.l d1,16(sp)
   1285e:	move.l 12(sp),20(sp)
   12864:	move.l 16(sp),24(sp)
   1286a:	move.l 20(sp),d0
   1286e:	move.l 24(sp),d1
}
   12872:	movem.l (sp)+,d2-d3/a6
   12876:	lea 32(sp),sp
   1287a:	rts

0001287c <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   1287c:	lea -12(sp),sp
   12880:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   12882:	move.l 20(sp),12(sp)
   12888:	move.l 24(sp),8(sp)
   1288e:	move.l 19b9e <MathIeeeSingBasBase>,d0
   12894:	movea.l d0,a6
   12896:	move.l 12(sp),d0
   1289a:	move.l 8(sp),d1
   1289e:	jsr -72(a6)
   128a2:	move.l d0,4(sp)
   128a6:	move.l 4(sp),d0
}
   128aa:	movea.l (sp)+,a6
   128ac:	lea 12(sp),sp
   128b0:	rts

000128b2 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   128b2:	lea -12(sp),sp
   128b6:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   128b8:	move.l 20(sp),8(sp)
   128be:	move.l 24(sp),12(sp)
   128c4:	move.l 19baa <MathIeeeDoubTransBase>,d0
   128ca:	movea.l d0,a6
   128cc:	move.l 8(sp),d0
   128d0:	move.l 12(sp),d1
   128d4:	jsr -102(a6)
   128d8:	move.l d0,4(sp)
   128dc:	move.l 4(sp),d0
}
   128e0:	movea.l (sp)+,a6
   128e2:	lea 12(sp),sp
   128e6:	rts

000128e8 <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   128e8:	       lea -24(sp),sp
   128ec:	       move.l a6,-(sp)
    if (x > 0) {
   128ee:	       clr.l -(sp)
   128f0:	       move.l 40(sp),-(sp)
   128f4:	       jsr 126f4 <__gtsf2>
   128fa:	       addq.l #8,sp
   128fc:	       tst.l d0
   128fe:	   /-- ble.s 12930 <atan2f+0x48>
        return IEEESPAtan(y / x);
   12900:	   |   move.l 36(sp),-(sp)
   12904:	   |   move.l 36(sp),-(sp)
   12908:	   |   jsr 12434 <__divsf3>
   1290e:	   |   addq.l #8,sp
   12910:	   |   move.l d0,8(sp)
   12914:	   |   move.l 19ba2 <MathIeeeSingTransBase>,d0
   1291a:	   |   movea.l d0,a6
   1291c:	   |   move.l 8(sp),d0
   12920:	   |   jsr -30(a6)
   12924:	   |   move.l d0,4(sp)
   12928:	   |   move.l 4(sp),d0
   1292c:	/--|-- bra.w 12a90 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   12930:	|  \-> clr.l -(sp)
   12932:	|      move.l 40(sp),-(sp)
   12936:	|      jsr 127ae <__ltsf2>
   1293c:	|      addq.l #8,sp
   1293e:	|      tst.l d0
   12940:	|  /-- bge.s 129b4 <atan2f+0xcc>
   12942:	|  |   clr.l -(sp)
   12944:	|  |   move.l 36(sp),-(sp)
   12948:	|  |   jsr 12670 <__gesf2>
   1294e:	|  |   addq.l #8,sp
   12950:	|  |   tst.l d0
   12952:	|  +-- blt.s 129b4 <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   12954:	|  |   move.l 36(sp),-(sp)
   12958:	|  |   move.l 36(sp),-(sp)
   1295c:	|  |   jsr 12434 <__divsf3>
   12962:	|  |   addq.l #8,sp
   12964:	|  |   move.l d0,24(sp)
   12968:	|  |   move.l 19ba2 <MathIeeeSingTransBase>,d0
   1296e:	|  |   movea.l d0,a6
   12970:	|  |   move.l 24(sp),d0
   12974:	|  |   jsr -30(a6)
   12978:	|  |   move.l d0,20(sp)
   1297c:	|  |   move.l 20(sp),d0
   12980:	|  |   move.l d0,-(sp)
   12982:	|  |   jsr 124a0 <__extendsfdf2>
   12988:	|  |   addq.l #4,sp
   1298a:	|  |   move.l #1413754136,-(sp)
   12990:	|  |   move.l #1074340347,-(sp)
   12996:	|  |   move.l d1,-(sp)
   12998:	|  |   move.l d0,-(sp)
   1299a:	|  |   jsr 12370 <__adddf3>
   129a0:	|  |   lea 16(sp),sp
   129a4:	|  |   move.l d1,-(sp)
   129a6:	|  |   move.l d0,-(sp)
   129a8:	|  |   jsr 128b2 <__truncdfsf2>
   129ae:	|  |   addq.l #8,sp
   129b0:	+--|-- bra.w 12a90 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   129b4:	|  \-> clr.l -(sp)
   129b6:	|      move.l 40(sp),-(sp)
   129ba:	|      jsr 127ae <__ltsf2>
   129c0:	|      addq.l #8,sp
   129c2:	|      tst.l d0
   129c4:	|  /-- bge.s 12a36 <atan2f+0x14e>
   129c6:	|  |   clr.l -(sp)
   129c8:	|  |   move.l 36(sp),-(sp)
   129cc:	|  |   jsr 127ae <__ltsf2>
   129d2:	|  |   addq.l #8,sp
   129d4:	|  |   tst.l d0
   129d6:	|  +-- bge.s 12a36 <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   129d8:	|  |   move.l 36(sp),-(sp)
   129dc:	|  |   move.l 36(sp),-(sp)
   129e0:	|  |   jsr 12434 <__divsf3>
   129e6:	|  |   addq.l #8,sp
   129e8:	|  |   move.l d0,16(sp)
   129ec:	|  |   move.l 19ba2 <MathIeeeSingTransBase>,d0
   129f2:	|  |   movea.l d0,a6
   129f4:	|  |   move.l 16(sp),d0
   129f8:	|  |   jsr -30(a6)
   129fc:	|  |   move.l d0,12(sp)
   12a00:	|  |   move.l 12(sp),d0
   12a04:	|  |   move.l d0,-(sp)
   12a06:	|  |   jsr 124a0 <__extendsfdf2>
   12a0c:	|  |   addq.l #4,sp
   12a0e:	|  |   move.l #1413754136,-(sp)
   12a14:	|  |   move.l #1074340347,-(sp)
   12a1a:	|  |   move.l d1,-(sp)
   12a1c:	|  |   move.l d0,-(sp)
   12a1e:	|  |   jsr 1281a <__subdf3>
   12a24:	|  |   lea 16(sp),sp
   12a28:	|  |   move.l d1,-(sp)
   12a2a:	|  |   move.l d0,-(sp)
   12a2c:	|  |   jsr 128b2 <__truncdfsf2>
   12a32:	|  |   addq.l #8,sp
   12a34:	+--|-- bra.s 12a90 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   12a36:	|  \-> clr.l -(sp)
   12a38:	|      move.l 40(sp),-(sp)
   12a3c:	|      jsr 1246a <__eqsf2>
   12a42:	|      addq.l #8,sp
   12a44:	|      tst.l d0
   12a46:	|  /-- bne.s 12a62 <atan2f+0x17a>
   12a48:	|  |   clr.l -(sp)
   12a4a:	|  |   move.l 36(sp),-(sp)
   12a4e:	|  |   jsr 126f4 <__gtsf2>
   12a54:	|  |   addq.l #8,sp
   12a56:	|  |   tst.l d0
   12a58:	|  +-- ble.s 12a62 <atan2f+0x17a>
        return PI / 2;
   12a5a:	|  |   move.l #1070141403,d0
   12a60:	+--|-- bra.s 12a90 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   12a62:	|  \-> clr.l -(sp)
   12a64:	|      move.l 40(sp),-(sp)
   12a68:	|      jsr 1246a <__eqsf2>
   12a6e:	|      addq.l #8,sp
   12a70:	|      tst.l d0
   12a72:	|  /-- bne.s 12a8e <atan2f+0x1a6>
   12a74:	|  |   clr.l -(sp)
   12a76:	|  |   move.l 36(sp),-(sp)
   12a7a:	|  |   jsr 127ae <__ltsf2>
   12a80:	|  |   addq.l #8,sp
   12a82:	|  |   tst.l d0
   12a84:	|  +-- bge.s 12a8e <atan2f+0x1a6>
        return -PI / 2;
   12a86:	|  |   move.l #-1077342245,d0
   12a8c:	+--|-- bra.s 12a90 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   12a8e:	|  \-> moveq #0,d0
    }
}
   12a90:	\----> movea.l (sp)+,a6
   12a92:	       lea 24(sp),sp
   12a96:	       rts

00012a98 <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   12a98:	lea -24(sp),sp
   12a9c:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   12a9e:	move.l 32(sp),20(sp)
   12aa4:	move.l 36(sp),24(sp)
   12aaa:	move.l 19baa <MathIeeeDoubTransBase>,d0
   12ab0:	movea.l d0,a6
   12ab2:	move.l 20(sp),d0
   12ab6:	move.l 24(sp),d1
   12aba:	jsr -96(a6)
   12abe:	move.l d0,4(sp)
   12ac2:	move.l d1,8(sp)
   12ac6:	move.l 4(sp),12(sp)
   12acc:	move.l 8(sp),16(sp)
   12ad2:	move.l 12(sp),d0
   12ad6:	move.l 16(sp),d1
}
   12ada:	movea.l (sp)+,a6
   12adc:	lea 24(sp),sp
   12ae0:	rts

00012ae2 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   12ae2:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   12ae6:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   12aea:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   12aee:	mulu.w 8(sp),d1
	addw	d1, d0
   12af2:	add.w d1,d0
	swap	d0
   12af4:	swap d0
	clrw	d0
   12af6:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   12af8:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   12afc:	mulu.w 10(sp),d1
	addl	d1, d0
   12b00:	add.l d1,d0
	rts
   12b02:	rts

00012b04 <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   12b04:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   12b06:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   12b0a:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   12b0e:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   12b14:	   /-- bcc.s 12b2c <__udivsi3+0x28>
	movel	d0, d2
   12b16:	   |   move.l d0,d2
	clrw	d2
   12b18:	   |   clr.w d2
	swap	d2
   12b1a:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   12b1c:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   12b1e:	   |   move.w d2,d0
	swap	d0
   12b20:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   12b22:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   12b26:	   |   divu.w d1,d2
	movew	d2, d0
   12b28:	   |   move.w d2,d0
	jra	6f
   12b2a:	/--|-- bra.s 12b5c <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   12b2c:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   12b2e:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   12b30:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   12b32:	|  |   cmpi.l #65536,d1
	jcc	4b
   12b38:	|  \-- bcc.s 12b2e <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   12b3a:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   12b3c:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   12b42:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   12b44:	|      mulu.w d0,d1
	swap	d2
   12b46:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   12b48:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   12b4a:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   12b4c:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   12b4e:	|  /-- bne.s 12b5a <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   12b50:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   12b52:	|  +-- bcs.s 12b5a <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   12b54:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   12b58:	+--|-- bls.s 12b5c <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   12b5a:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   12b5c:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   12b5e:	       rts

00012b60 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   12b60:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   12b62:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   12b64:	    move.l 12(sp),d1
	jpl	1f
   12b68:	/-- bpl.s 12b6e <__divsi3+0xe>
	negl	d1
   12b6a:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   12b6c:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   12b6e:	\-> move.l 8(sp),d0
	jpl	2f
   12b72:	/-- bpl.s 12b78 <__divsi3+0x18>
	negl	d0
   12b74:	|   neg.l d0
	negb	d2
   12b76:	|   neg.b d2

2:	movel	d1, sp@-
   12b78:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   12b7a:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   12b7c:	    jsr 12b04 <__udivsi3>
	addql	#8, sp
   12b82:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   12b84:	    tst.b d2
	jpl	3f
   12b86:	/-- bpl.s 12b8a <__divsi3+0x2a>
	negl	d0
   12b88:	|   neg.l d0

3:	movel	sp@+, d2
   12b8a:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   12b8c:	    rts

00012b8e <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   12b8e:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   12b92:	move.l 4(sp),d0
	movel	d1, sp@-
   12b96:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   12b98:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   12b9a:	jsr 12b60 <__divsi3>
	addql	#8, sp
   12ba0:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   12ba2:	move.l 8(sp),d1
	movel	d1, sp@-
   12ba6:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   12ba8:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   12baa:	jsr 12ae2 <__mulsi3>
	addql	#8, sp
   12bb0:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   12bb2:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   12bb6:	sub.l d0,d1
	movel	d1, d0
   12bb8:	move.l d1,d0
	rts
   12bba:	rts

00012bbc <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   12bbc:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   12bc0:	move.l 4(sp),d0
	movel	d1, sp@-
   12bc4:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   12bc6:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   12bc8:	jsr 12b04 <__udivsi3>
	addql	#8, sp
   12bce:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   12bd0:	move.l 8(sp),d1
	movel	d1, sp@-
   12bd4:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   12bd6:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   12bd8:	jsr 12ae2 <__mulsi3>
	addql	#8, sp
   12bde:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   12be0:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   12be4:	sub.l d0,d1
	movel	d1, d0
   12be6:	move.l d1,d0
	rts
   12be8:	rts

00012bea <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   12bea:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   12bec:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   12bf0:	jsr -516(a6)
    move.l (sp)+, a6
   12bf4:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   12bf6:	rts

00012bf8 <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   12bf8:	move.b d0,(a3)+
	rts
   12bfa:	rts
