
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #110080,d0
       8:	       subi.l #110080,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1ae00 <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #110080,d0
      40:	       subi.l #110080,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1ae00 <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 65fc <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #110080,d0
      7e:	       subi.l #110080,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1ae00 <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 12d80 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1b5a2 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 12d98 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1ae00 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 12d80 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1b5a2 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 1ae00 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 12d80 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1b5a2 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 1691a <PutChar+0x4>
     35c:	|  |              |   jsr 15fc6 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1b5aa <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1b5aa <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1b5aa <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1b5aa <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1b5aa <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1b5aa <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1b5aa <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 16944 <PutChar+0x2e>
     834:	|   jsr 15fc6 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1b5aa <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 16960 <PutChar+0x4a>
     8a6:	|   jsr 15fc6 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1b5aa <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1b5aa <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1b5aa <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1b5aa <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1b5aa <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1b5aa <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1b5aa <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1b5aa <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1b5a2 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1b5aa <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 12d80 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1b5aa <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1b4aa <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	/-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1b4aa <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1b4aa <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1b4aa <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1b4aa <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1b562 <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1b4aa <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1b4aa <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1b55e <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1b4aa <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1b4aa <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 13ee <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	\-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1b4aa <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 8a84 <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1b4aa <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1b4ae <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1b4b2 <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 1df2 <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     e0e:	          lea -16(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 16988 <PutChar+0x72>
     e1a:	          jsr 15fc6 <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1b4c4 <CstBackDrop>,d0
     e28:	      /-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 169a1 <PutChar+0x8b>
     e30:	      |   jsr 15fc6 <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	/-----|-- bra.w fc6 <CstBlankScreen+0x1b8>
  }

  CstPaletteLoaded = 0;
     e3c:	|     \-> clr.w 1b4be <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,8(sp)

  width /= 16;
     e4a:	|         move.l 24(sp),d0
     e4e:	|         movea.l d0,a0
     e50:	|         cmpa.w #0,a0
     e54:	|     /-- bge.s e5a <CstBlankScreen+0x4c>
     e56:	|     |   lea 15(a0),a0
     e5a:	|     \-> move.l a0,d0
     e5c:	|         asr.l #4,d0
     e5e:	|         move.l d0,24(sp)

  WaitBlit();
     e62:	|         move.l 1b5ae <GfxBase>,d0
     e68:	|         movea.l d0,a6
     e6a:	|         jsr -228(a6)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e6e:	|         movea.l 8(sp),a0
     e72:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e78:	|         movea.l 8(sp),a0
     e7c:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e82:	|         movea.l 8(sp),a0
     e86:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e8c:	|         movea.l 8(sp),a0
     e90:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     e96:	|         movea.l 8(sp),a0
     e9a:	|         move.w #0,96(a0)
  custom->bltdmod = 0;
     ea0:	|         movea.l 8(sp),a0
     ea4:	|         move.w #0,102(a0)
  custom->bltcon1 = 0;
     eaa:	|         movea.l 8(sp),a0
     eae:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     eb4:	|         movea.l 8(sp),a0
     eb8:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ebe:	|         move.l 1b4c4 <CstBackDrop>,d0
     ec4:	|         move.l d0,16(sp)
  UWORD bltsize = height*64+width;    
     ec8:	|         move.l 28(sp),d0
     ecc:	|         lsl.w #6,d0
     ece:	|         move.l 24(sp),d1
     ed2:	|         movea.w d0,a0
     ed4:	|         adda.w d1,a0
     ed6:	|         move.w a0,6(sp)
  UWORD blitsize = width*height*2;
     eda:	|         move.l 24(sp),d1
     ede:	|         move.l 28(sp),d0
     ee2:	|         muls.w d1,d0
     ee4:	|         add.w d0,d0
     ee6:	|         move.w d0,4(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     eea:	|         pea 169cf <PutChar+0xb9>
     ef0:	|         jsr 15fc6 <KPrintF>
     ef6:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     ef8:	|         clr.l 12(sp)
     efc:	|     /-- bra.s f2e <CstBlankScreen+0x120>
  {            
    custom->bltdpt = (APTR) bltdpt;
     efe:	|  /--|-> move.l 16(sp),d0
     f02:	|  |  |   movea.l 8(sp),a0
     f06:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f0a:	|  |  |   movea.l 8(sp),a0
     f0e:	|  |  |   move.w 6(sp),88(a0)
    WaitBlit();
     f14:	|  |  |   move.l 1b5ae <GfxBase>,d0
     f1a:	|  |  |   movea.l d0,a6
     f1c:	|  |  |   jsr -228(a6)
    bltdpt += blitsize;
     f20:	|  |  |   moveq #0,d0
     f22:	|  |  |   move.w 4(sp),d0
     f26:	|  |  |   add.l d0,16(sp)
  for(int i2=0;i2<5;i2++)
     f2a:	|  |  |   addq.l #1,12(sp)
     f2e:	|  |  \-> moveq #4,d0
     f30:	|  |      cmp.l 12(sp),d0
     f34:	|  \----- bge.s efe <CstBlankScreen+0xf0>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f36:	|         pea 169ef <PutChar+0xd9>
     f3c:	|         jsr 15fc6 <KPrintF>
     f42:	|         addq.l #4,sp

  CstApplyBackDropCounter = 2;
     f44:	|         move.w #2,1b4d0 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
     f4c:	|         move.l 1b4f6 <winWidth>,d0
     f52:	|         lsr.l #4,d0
     f54:	|         movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
     f5a:	|         move.l a0,d1
     f5c:	|         addq.l #2,d1
     f5e:	|         move.l d1,1b4e6 <CstBackDropBufferApplyCursor>
     f64:	|         move.l d0,d0
     f66:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
     f68:	|         move.l 1b4fa <winHeight>,d0
     f6e:	|         movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
     f74:	|         move.l a0,d1
     f76:	|         addq.l #2,d1
     f78:	|         move.l d1,1b4e6 <CstBackDropBufferApplyCursor>
     f7e:	|         move.l d0,d0
     f80:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f82:	|         movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
     f88:	|         move.l a0,d0
     f8a:	|         addq.l #2,d0
     f8c:	|         move.l d0,1b4e6 <CstBackDropBufferApplyCursor>
     f92:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f94:	|         movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
     f9a:	|         move.l a0,d0
     f9c:	|         addq.l #2,d0
     f9e:	|         move.l d0,1b4e6 <CstBackDropBufferApplyCursor>
     fa4:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fa6:	|         movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
     fac:	|         move.l a0,d0
     fae:	|         addq.l #2,d0
     fb0:	|         move.l d0,1b4e6 <CstBackDropBufferApplyCursor>
     fb6:	|         clr.w (a0)

  KPrintF("CstBlankScreen: end\n");
     fb8:	|         pea 16a0f <PutChar+0xf9>
     fbe:	|         jsr 15fc6 <KPrintF>
     fc4:	|         addq.l #4,sp


}
     fc6:	\-------> movea.l (sp)+,a6
     fc8:	          lea 16(sp),sp
     fcc:	          rts

00000fce <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     fce:	       lea -52(sp),sp
     fd2:	       move.l a6,-(sp)
     fd4:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     fd6:	       move.l #400,32(sp)
     fde:	       moveq #2,d0
     fe0:	       move.l d0,28(sp)
     fe4:	       move.l 1b5a2 <SysBase>,d0
     fea:	       movea.l d0,a6
     fec:	       move.l 32(sp),d0
     ff0:	       move.l 28(sp),d1
     ff4:	       jsr -198(a6)
     ff8:	       move.l d0,24(sp)
     ffc:	       move.l 24(sp),d0
    1000:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1004:	   /-- bne.s 102e <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1006:	   |   pea 28 <_start+0x28>
    100a:	   |   pea 16a24 <PutChar+0x10e>
    1010:	   |   jsr 15fc6 <KPrintF>
    1016:	   |   addq.l #8,sp
    Exit(1);
    1018:	   |   moveq #1,d1
    101a:	   |   move.l d1,16(sp)
    101e:	   |   move.l 1b5aa <DOSBase>,d0
    1024:	   |   movea.l d0,a6
    1026:	   |   move.l 16(sp),d1
    102a:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    102e:	   \-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1034:	       move.l 56(sp),1b4f2 <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    103c:	       move.l #110082,52(sp)
  for(int i=0; i<16;i++)
    1044:	       clr.l 48(sp)
    1048:	   /-- bra.s 106e <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    104a:	/--|-> move.l 52(sp),d1
    104e:	|  |   move.l d1,d2
    1050:	|  |   addq.l #4,d2
    1052:	|  |   move.l d2,52(sp)
    1056:	|  |   move.l 56(sp),d0
    105a:	|  |   move.l d0,d2
    105c:	|  |   addq.l #4,d2
    105e:	|  |   move.l d2,56(sp)
    1062:	|  |   movea.l d1,a0
    1064:	|  |   move.l (a0),d1
    1066:	|  |   movea.l d0,a0
    1068:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    106a:	|  |   addq.l #1,48(sp)
    106e:	|  \-> moveq #15,d0
    1070:	|      cmp.l 48(sp),d0
    1074:	\----- bge.s 104a <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1076:	       move.l #110146,52(sp)

  for(int i=0; i<12;i++)
    107e:	       clr.l 44(sp)
    1082:	   /-- bra.s 10a8 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1084:	/--|-> move.l 52(sp),d1
    1088:	|  |   move.l d1,d2
    108a:	|  |   addq.l #4,d2
    108c:	|  |   move.l d2,52(sp)
    1090:	|  |   move.l 56(sp),d0
    1094:	|  |   move.l d0,d2
    1096:	|  |   addq.l #4,d2
    1098:	|  |   move.l d2,56(sp)
    109c:	|  |   movea.l d1,a0
    109e:	|  |   move.l (a0),d1
    10a0:	|  |   movea.l d0,a0
    10a2:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    10a4:	|  |   addq.l #1,44(sp)
    10a8:	|  \-> moveq #11,d0
    10aa:	|      cmp.l 44(sp),d0
    10ae:	\----- bge.s 1084 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    10b0:	       move.l #110194,52(sp)
  for(int i=0; i<10;i++)
    10b8:	       clr.l 40(sp)
    10bc:	   /-- bra.s 10e2 <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    10be:	/--|-> move.l 52(sp),d1
    10c2:	|  |   move.l d1,d2
    10c4:	|  |   addq.l #4,d2
    10c6:	|  |   move.l d2,52(sp)
    10ca:	|  |   move.l 56(sp),d0
    10ce:	|  |   move.l d0,d2
    10d0:	|  |   addq.l #4,d2
    10d2:	|  |   move.l d2,56(sp)
    10d6:	|  |   movea.l d1,a0
    10d8:	|  |   move.l (a0),d1
    10da:	|  |   movea.l d0,a0
    10dc:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    10de:	|  |   addq.l #1,40(sp)
    10e2:	|  \-> moveq #9,d0
    10e4:	|      cmp.l 40(sp),d0
    10e8:	\----- bge.s 10be <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    10ea:	       move.l #110234,52(sp)
  CstClColor = (UWORD *) cl;
    10f2:	       move.l 56(sp),1b4ea <CstClColor>
  for(int i=0; i<32;i++)
    10fa:	       clr.l 36(sp)
    10fe:	   /-- bra.s 1124 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    1100:	/--|-> move.l 52(sp),d1
    1104:	|  |   move.l d1,d2
    1106:	|  |   addq.l #4,d2
    1108:	|  |   move.l d2,52(sp)
    110c:	|  |   move.l 56(sp),d0
    1110:	|  |   move.l d0,d2
    1112:	|  |   addq.l #4,d2
    1114:	|  |   move.l d2,56(sp)
    1118:	|  |   movea.l d1,a0
    111a:	|  |   move.l (a0),d1
    111c:	|  |   movea.l d0,a0
    111e:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    1120:	|  |   addq.l #1,36(sp)
    1124:	|  \-> moveq #31,d0
    1126:	|      cmp.l 36(sp),d0
    112a:	\----- bge.s 1100 <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    112c:	       moveq #40,d1
    112e:	       cmp.l 64(sp),d1
    1132:	   /-- bge.s 1190 <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1134:	   |   moveq #-40,d2
    1136:	   |   add.l 64(sp),d2
    113a:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    113e:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1144:	   |   move.l 8(sp),d0
    1148:	   |   move.l d0,d1
    114a:	   |   addq.l #2,d1
    114c:	   |   move.l d1,8(sp)
    1150:	   |   movea.l d0,a0
    1152:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1156:	   |   move.l 8(sp),d0
    115a:	   |   move.l d0,d1
    115c:	   |   addq.l #2,d1
    115e:	   |   move.l d1,8(sp)
    1162:	   |   move.l 12(sp),d1
    1166:	   |   movea.l d0,a0
    1168:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    116a:	   |   move.l 8(sp),d0
    116e:	   |   move.l d0,d1
    1170:	   |   addq.l #2,d1
    1172:	   |   move.l d1,8(sp)
    1176:	   |   movea.l d0,a0
    1178:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    117c:	   |   move.l 8(sp),d0
    1180:	   |   move.l d0,d1
    1182:	   |   addq.l #2,d1
    1184:	   |   move.l d1,8(sp)
    1188:	   |   move.l 12(sp),d1
    118c:	   |   movea.l d0,a0
    118e:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    1190:	   \-> move.l 56(sp),d0
    1194:	       move.l d0,d1
    1196:	       addq.l #4,d1
    1198:	       move.l d1,56(sp)
    119c:	       moveq #-2,d2
    119e:	       movea.l d0,a0
    11a0:	       move.l d2,(a0)
  return (UWORD *) retval;  
    11a2:	       move.l 20(sp),d0
}
    11a6:	       move.l (sp)+,d2
    11a8:	       movea.l (sp)+,a6
    11aa:	       lea 52(sp),sp
    11ae:	       rts

000011b0 <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    11b0:	                lea -40(sp),sp
    11b4:	                move.l a6,-(sp)
    11b6:	                move.l d2,-(sp)
 volatile struct Custom *custom = (struct Custom*)0xdff000;  
    11b8:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    11c0:	                pea 16a5f <PutChar+0x149>
    11c6:	                jsr 15fc6 <KPrintF>
    11cc:	                addq.l #4,sp

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    11ce:	                move.l 1b4e2 <CstBackDropBufferApplyStart>,d0
    11d4:	                move.l d0,1b4e6 <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    11da:	                move.l 1b4e2 <CstBackDropBufferApplyStart>,44(sp)
  if(!*cursor || !CstDrawBuffer) {
    11e2:	                movea.l 44(sp),a0
    11e6:	                move.w (a0),d0
    11e8:	/-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    11ec:	|               move.l 1b4d6 <CstDrawBuffer>,d0
    11f2:	+-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    11f6:	|               move.l 1b5ae <GfxBase>,d0
    11fc:	|               movea.l d0,a6
    11fe:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1202:	|               movea.l 16(sp),a0
    1206:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    120c:	|               movea.l 16(sp),a0
    1210:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1216:	|               movea.l 16(sp),a0
    121a:	|               move.w #2544,64(a0)
  
  while(*cursor)
    1220:	|     /-------- bra.w 1388 <CstDisplayBackDrop+0x1d8>
  {    
    UWORD width = *cursor++;
    1224:	|  /--|-------> move.l 44(sp),d0
    1228:	|  |  |         move.l d0,d1
    122a:	|  |  |         addq.l #2,d1
    122c:	|  |  |         move.l d1,44(sp)
    1230:	|  |  |         movea.l d0,a0
    1232:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1236:	|  |  |         move.l 44(sp),d0
    123a:	|  |  |         move.l d0,d1
    123c:	|  |  |         addq.l #2,d1
    123e:	|  |  |         move.l d1,44(sp)
    1242:	|  |  |         movea.l d0,a0
    1244:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    1248:	|  |  |         move.l 44(sp),d0
    124c:	|  |  |         move.l d0,d1
    124e:	|  |  |         addq.l #2,d1
    1250:	|  |  |         move.l d1,44(sp)
    1254:	|  |  |         movea.l d0,a0
    1256:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    125a:	|  |  |         move.l 44(sp),d0
    125e:	|  |  |         move.l d0,d1
    1260:	|  |  |         addq.l #2,d1
    1262:	|  |  |         move.l d1,44(sp)
    1266:	|  |  |         movea.l d0,a0
    1268:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    126c:	|  |  |         move.l 1b4f6 <winWidth>,d0
    1272:	|  |  |         lsr.l #3,d0
    1274:	|  |  |         move.l d0,d1
    1276:	|  |  |         move.w 14(sp),d0
    127a:	|  |  |         add.w d0,d0
    127c:	|  |  |         sub.w d0,d1
    127e:	|  |  |         movea.l 16(sp),a0
    1282:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    1286:	|  |  |         move.l 1b4f6 <winWidth>,d0
    128c:	|  |  |         lsr.l #3,d0
    128e:	|  |  |         move.l d0,d1
    1290:	|  |  |         move.w 14(sp),d0
    1294:	|  |  |         add.w d0,d0
    1296:	|  |  |         sub.w d0,d1
    1298:	|  |  |         movea.l 16(sp),a0
    129c:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    12a0:	|  |  |         moveq #0,d0
    12a2:	|  |  |         move.w 8(sp),d0
    12a6:	|  |  |         move.l 1b4f6 <winWidth>,d1
    12ac:	|  |  |         move.l d1,-(sp)
    12ae:	|  |  |         move.l d0,-(sp)
    12b0:	|  |  |         jsr 16800 <__mulsi3>
    12b6:	|  |  |         addq.l #8,sp
    12b8:	|  |  |         move.l d0,d1
    12ba:	|  |  |         lsr.l #3,d1
    12bc:	|  |  |         move.l 1b4c4 <CstBackDrop>,d0
    12c2:	|  |  |         add.l d0,d1
    12c4:	|  |  |         moveq #0,d0
    12c6:	|  |  |         move.w 10(sp),d0
    12ca:	|  |  |         move.l d1,d2
    12cc:	|  |  |         add.l d0,d2
    12ce:	|  |  |         move.l d2,40(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    12d2:	|  |  |         moveq #0,d0
    12d4:	|  |  |         move.w 8(sp),d0
    12d8:	|  |  |         move.l 1b4f6 <winWidth>,d1
    12de:	|  |  |         move.l d1,-(sp)
    12e0:	|  |  |         move.l d0,-(sp)
    12e2:	|  |  |         jsr 16800 <__mulsi3>
    12e8:	|  |  |         addq.l #8,sp
    12ea:	|  |  |         move.l d0,d1
    12ec:	|  |  |         lsr.l #3,d1
    12ee:	|  |  |         move.l 1b4d6 <CstDrawBuffer>,d0
    12f4:	|  |  |         add.l d0,d1
    12f6:	|  |  |         moveq #0,d0
    12f8:	|  |  |         move.w 10(sp),d0
    12fc:	|  |  |         move.l d1,d2
    12fe:	|  |  |         add.l d0,d2
    1300:	|  |  |         move.l d2,36(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1304:	|  |  |         clr.l 32(sp)
    1308:	|  |  |     /-- bra.s 1380 <CstDisplayBackDrop+0x1d0>
    {
      custom->bltapt = (APTR) bltapt;
    130a:	|  |  |  /--|-> move.l 40(sp),d0
    130e:	|  |  |  |  |   movea.l 16(sp),a0
    1312:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1316:	|  |  |  |  |   move.l 36(sp),d0
    131a:	|  |  |  |  |   movea.l 16(sp),a0
    131e:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    1322:	|  |  |  |  |   move.w 12(sp),d0
    1326:	|  |  |  |  |   lsl.w #6,d0
    1328:	|  |  |  |  |   add.w 14(sp),d0
    132c:	|  |  |  |  |   movea.l 16(sp),a0
    1330:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1334:	|  |  |  |  |   move.l 1b4f6 <winWidth>,d0
    133a:	|  |  |  |  |   lsr.l #3,d0
    133c:	|  |  |  |  |   move.l 1b4fa <winHeight>,d1
    1342:	|  |  |  |  |   move.l d1,-(sp)
    1344:	|  |  |  |  |   move.l d0,-(sp)
    1346:	|  |  |  |  |   jsr 16800 <__mulsi3>
    134c:	|  |  |  |  |   addq.l #8,sp
    134e:	|  |  |  |  |   add.l d0,40(sp)
      bltdpt += winWidth/8*winHeight;
    1352:	|  |  |  |  |   move.l 1b4f6 <winWidth>,d0
    1358:	|  |  |  |  |   lsr.l #3,d0
    135a:	|  |  |  |  |   move.l 1b4fa <winHeight>,d1
    1360:	|  |  |  |  |   move.l d1,-(sp)
    1362:	|  |  |  |  |   move.l d0,-(sp)
    1364:	|  |  |  |  |   jsr 16800 <__mulsi3>
    136a:	|  |  |  |  |   addq.l #8,sp
    136c:	|  |  |  |  |   add.l d0,36(sp)
      WaitBlit();
    1370:	|  |  |  |  |   move.l 1b5ae <GfxBase>,d0
    1376:	|  |  |  |  |   movea.l d0,a6
    1378:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    137c:	|  |  |  |  |   addq.l #1,32(sp)
    1380:	|  |  |  |  \-> moveq #4,d0
    1382:	|  |  |  |      cmp.l 32(sp),d0
    1386:	|  |  |  \----- bge.s 130a <CstDisplayBackDrop+0x15a>
  while(*cursor)
    1388:	|  |  \-------> movea.l 44(sp),a0
    138c:	|  |            move.w (a0),d0
    138e:	|  \----------- bne.w 1224 <CstDisplayBackDrop+0x74>
    }  
  }
  UWORD *colorpos = CstPalette;
    1392:	|               move.l 1b4ee <CstPalette>,28(sp)
  
  UWORD *tmp = CstClColor;
    139a:	|               move.l 1b4ea <CstClColor>,24(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13a2:	|               clr.l 20(sp)
    13a6:	|           /-- bra.s 13d8 <CstDisplayBackDrop+0x228>
    *tmp++;
    13a8:	|        /--|-> move.l 24(sp),d0
    13ac:	|        |  |   move.l d0,d1
    13ae:	|        |  |   addq.l #2,d1
    13b0:	|        |  |   move.l d1,24(sp)
    *tmp++ = *colorpos++;
    13b4:	|        |  |   move.l 28(sp),d1
    13b8:	|        |  |   move.l d1,d2
    13ba:	|        |  |   addq.l #2,d2
    13bc:	|        |  |   move.l d2,28(sp)
    13c0:	|        |  |   move.l 24(sp),d0
    13c4:	|        |  |   move.l d0,d2
    13c6:	|        |  |   addq.l #2,d2
    13c8:	|        |  |   move.l d2,24(sp)
    13cc:	|        |  |   movea.l d1,a0
    13ce:	|        |  |   move.w (a0),d1
    13d0:	|        |  |   movea.l d0,a0
    13d2:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13d4:	|        |  |   addq.l #1,20(sp)
    13d8:	|        |  \-> moveq #31,d0
    13da:	|        |      cmp.l 20(sp),d0
    13de:	|        \----- bge.s 13a8 <CstDisplayBackDrop+0x1f8>
    13e0:	|           /-- bra.s 13e4 <CstDisplayBackDrop+0x234>
    return;
    13e2:	\-----------|-> nop
  }
}
    13e4:	            \-> move.l (sp)+,d2
    13e6:	                movea.l (sp)+,a6
    13e8:	                lea 40(sp),sp
    13ec:	                rts

000013ee <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    13ee:	lea -20(sp),sp
    13f2:	movea.l 24(sp),a0
    13f6:	move.l 28(sp),d1
    13fa:	move.l 32(sp),d0
    13fe:	movea.w a0,a0
    1400:	move.w a0,4(sp)
    1404:	move.w d1,d1
    1406:	move.w d1,2(sp)
    140a:	move.w d0,d0
    140c:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    140e:	move.w 2(sp),d0
    1412:	movea.l 36(sp),a0
    1416:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    1418:	move.w 4(sp),d0
    141c:	lsr.w #1,d0
    141e:	movea.l 36(sp),a0
    1422:	addq.l #1,a0
    1424:	move.l d0,d0
    1426:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    1428:	move.w 2(sp),d1
    142c:	move.w (sp),d0
    142e:	movea.l 36(sp),a0
    1432:	addq.l #2,a0
    1434:	add.b d1,d0
    1436:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    1438:	move.w 4(sp),d0
    143c:	andi.w #1,d0
    1440:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1444:	move.w 2(sp),d0
    1448:	add.w (sp),d0
    144a:	move.w d0,d0
    144c:	andi.l #65535,d0
    1452:	asr.l #7,d0
    1454:	move.l d0,d0
    1456:	move.w d0,d1
    1458:	andi.w #2,d1
    145c:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    1460:	moveq #0,d0
    1462:	move.w 2(sp),d0
    1466:	asr.l #6,d0
    1468:	move.l d0,d0
    146a:	move.w d0,d1
    146c:	andi.w #4,d1
    1470:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1474:	move.w 18(sp),d1
    1478:	move.w 16(sp),d0
    147c:	add.b d0,d1
    147e:	move.w 14(sp),d0
    1482:	movea.l 36(sp),a0
    1486:	addq.l #3,a0
    1488:	add.b d1,d0
    148a:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    148c:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    1492:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1498:	move.l 10(sp),d0
    149c:	clr.w d0
    149e:	swap d0
    14a0:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    14a4:	move.l 1b4f2 <CstClCursor>,d0
    14aa:	movea.l d0,a0
    14ac:	addq.l #2,a0
    14ae:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    14b2:	move.l 1b4f2 <CstClCursor>,d0
    14b8:	movea.l d0,a0
    14ba:	addq.l #6,a0
    14bc:	move.w 8(sp),(a0)

}
    14c0:	nop
    14c2:	lea 20(sp),sp
    14c6:	rts

000014c8 <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    14c8:	    move.w 1b4d0 <CstApplyBackDropCounter>,d0
    14ce:	/-- beq.s 14e4 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    14d0:	|   jsr 11b0 <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    14d6:	|   move.w 1b4d0 <CstApplyBackDropCounter>,d0
    14dc:	|   subq.w #1,d0
    14de:	|   move.w d0,1b4d0 <CstApplyBackDropCounter>
  }    
}
    14e4:	\-> nop
    14e6:	    rts

000014e8 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    14e8:	    lea -20(sp),sp
    14ec:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    14ee:	    move.l 1b4d6 <CstDrawBuffer>,d0
    14f4:	/-- beq.s 150e <CstFreeBuffer+0x26>
    14f6:	|   move.l 1b4d6 <CstDrawBuffer>,20(sp)
    14fe:	|   move.l 1b5a2 <SysBase>,d0
    1504:	|   movea.l d0,a6
    1506:	|   movea.l 20(sp),a1
    150a:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    150e:	\-> move.l 1b4d2 <CstViewBuffer>,d0
    1514:	/-- beq.s 152e <CstFreeBuffer+0x46>
    1516:	|   move.l 1b4d2 <CstViewBuffer>,16(sp)
    151e:	|   move.l 1b5a2 <SysBase>,d0
    1524:	|   movea.l d0,a6
    1526:	|   movea.l 16(sp),a1
    152a:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    152e:	\-> move.l 1b4cc <CstCopperList>,d0
    1534:	/-- beq.s 154e <CstFreeBuffer+0x66>
    1536:	|   move.l 1b4cc <CstCopperList>,12(sp)
    153e:	|   move.l 1b5a2 <SysBase>,d0
    1544:	|   movea.l d0,a6
    1546:	|   movea.l 12(sp),a1
    154a:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    154e:	\-> move.l 1b4c4 <CstBackDrop>,d0
    1554:	/-- beq.s 156e <CstFreeBuffer+0x86>
    1556:	|   move.l 1b4c4 <CstBackDrop>,8(sp)
    155e:	|   move.l 1b5a2 <SysBase>,d0
    1564:	|   movea.l d0,a6
    1566:	|   movea.l 8(sp),a1
    156a:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    156e:	\-> move.l 1b4c8 <CstBackDropBackup>,d0
    1574:	/-- beq.s 158e <CstFreeBuffer+0xa6>
    1576:	|   move.l 1b4c8 <CstBackDropBackup>,4(sp)
    157e:	|   move.l 1b5a2 <SysBase>,d0
    1584:	|   movea.l d0,a6
    1586:	|   movea.l 4(sp),a1
    158a:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    158e:	\-> clr.l 1b4d6 <CstDrawBuffer>
  CstViewBuffer = NULL;
    1594:	    clr.l 1b4d2 <CstViewBuffer>
  CstCopperList = NULL;
    159a:	    clr.l 1b4cc <CstCopperList>
  CstBackDrop = NULL;
    15a0:	    clr.l 1b4c4 <CstBackDrop>

}
    15a6:	    nop
    15a8:	    movea.l (sp)+,a6
    15aa:	    lea 20(sp),sp
    15ae:	    rts

000015b0 <CstFreeze>:



void CstFreeze( ) {
    15b0:	       lea -36(sp),sp
    15b4:	       move.l a6,-(sp)
    15b6:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    15b8:	       pea 16a7b <PutChar+0x165>
    15be:	       jsr 15fc6 <KPrintF>
    15c4:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    15c6:	       move.l 1b4f6 <winWidth>,d0
    15cc:	       lsr.l #3,d0
    15ce:	       move.l d0,d1
    15d0:	       move.l 1b4fa <winHeight>,d0
    15d6:	       move.l d0,d0
    15d8:	       muls.w d0,d1
    15da:	       move.w d1,d0
    15dc:	       add.w d0,d0
    15de:	       add.w d0,d0
    15e0:	       move.w d0,d2
    15e2:	       add.w d1,d2
    15e4:	       move.w d2,26(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    15e8:	       move.l #14675968,22(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    15f0:	       moveq #0,d0
    15f2:	       move.w 26(sp),d0
    15f6:	       move.l d0,18(sp)
    15fa:	       clr.l 14(sp)
    15fe:	       move.l 1b5a2 <SysBase>,d0
    1604:	       movea.l d0,a6
    1606:	       move.l 18(sp),d0
    160a:	       move.l 14(sp),d1
    160e:	       jsr -684(a6)
    1612:	       move.l d0,10(sp)
    1616:	       move.l 10(sp),d0
    161a:	       move.l d0,1b4c8 <CstBackDropBackup>
  if( !CstBackDropBackup)
    1620:	       move.l 1b4c8 <CstBackDropBackup>,d0
    1626:	   /-- bne.s 1636 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1628:	   |   pea 16aa2 <PutChar+0x18c>
    162e:	   |   jsr 15fc6 <KPrintF>
    1634:	   |   addq.l #4,sp

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1636:	   \-> move.l 1b4c4 <CstBackDrop>,40(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    163e:	       move.l 1b4c8 <CstBackDropBackup>,36(sp)
  for(int i=0;i<size/4;i++) 
    1646:	       clr.l 32(sp)
    164a:	   /-- bra.s 1670 <CstFreeze+0xc0>
  {
    *dst++ = *src++;
    164c:	/--|-> move.l 40(sp),d1
    1650:	|  |   move.l d1,d0
    1652:	|  |   addq.l #4,d0
    1654:	|  |   move.l d0,40(sp)
    1658:	|  |   move.l 36(sp),d0
    165c:	|  |   move.l d0,d2
    165e:	|  |   addq.l #4,d2
    1660:	|  |   move.l d2,36(sp)
    1664:	|  |   movea.l d1,a0
    1666:	|  |   move.l (a0),d1
    1668:	|  |   movea.l d0,a0
    166a:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    166c:	|  |   addq.l #1,32(sp)
    1670:	|  \-> move.w 26(sp),d0
    1674:	|      lsr.w #2,d0
    1676:	|      move.w d0,d0
    1678:	|      andi.l #65535,d0
    167e:	|      cmp.l 32(sp),d0
    1682:	\----- bgt.s 164c <CstFreeze+0x9c>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1684:	       move.l 1b4d2 <CstViewBuffer>,40(sp)
  dst = (ULONG *) CstBackDrop;
    168c:	       move.l 1b4c4 <CstBackDrop>,36(sp)

  for(int i=0;i<size/4;i++) 
    1694:	       clr.l 28(sp)
    1698:	   /-- bra.s 16be <CstFreeze+0x10e>
  {
    *dst++ = *src++;
    169a:	/--|-> move.l 40(sp),d1
    169e:	|  |   move.l d1,d0
    16a0:	|  |   addq.l #4,d0
    16a2:	|  |   move.l d0,40(sp)
    16a6:	|  |   move.l 36(sp),d0
    16aa:	|  |   move.l d0,d2
    16ac:	|  |   addq.l #4,d2
    16ae:	|  |   move.l d2,36(sp)
    16b2:	|  |   movea.l d1,a0
    16b4:	|  |   move.l (a0),d1
    16b6:	|  |   movea.l d0,a0
    16b8:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    16ba:	|  |   addq.l #1,28(sp)
    16be:	|  \-> move.w 26(sp),d0
    16c2:	|      lsr.w #2,d0
    16c4:	|      move.w d0,d0
    16c6:	|      andi.l #65535,d0
    16cc:	|      cmp.l 28(sp),d0
    16d0:	\----- bgt.s 169a <CstFreeze+0xea>
  }

  CstApplyBackDropCounter = 2;
    16d2:	       move.w #2,1b4d0 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    16da:	       move.l 1b4f6 <winWidth>,d0
    16e0:	       lsr.l #4,d0
    16e2:	       movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
    16e8:	       move.l a0,d1
    16ea:	       addq.l #2,d1
    16ec:	       move.l d1,1b4e6 <CstBackDropBufferApplyCursor>
    16f2:	       move.l d0,d0
    16f4:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    16f6:	       move.l 1b4fa <winHeight>,d0
    16fc:	       movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
    1702:	       move.l a0,d1
    1704:	       addq.l #2,d1
    1706:	       move.l d1,1b4e6 <CstBackDropBufferApplyCursor>
    170c:	       move.l d0,d0
    170e:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1710:	       movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
    1716:	       move.l a0,d0
    1718:	       addq.l #2,d0
    171a:	       move.l d0,1b4e6 <CstBackDropBufferApplyCursor>
    1720:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1722:	       movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
    1728:	       move.l a0,d0
    172a:	       addq.l #2,d0
    172c:	       move.l d0,1b4e6 <CstBackDropBufferApplyCursor>
    1732:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1734:	       movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
    173a:	       move.l a0,d0
    173c:	       addq.l #2,d0
    173e:	       move.l d0,1b4e6 <CstBackDropBufferApplyCursor>
    1744:	       clr.w (a0)

  KPrintF("CstFreeze: Finished");
    1746:	       pea 16ada <PutChar+0x1c4>
    174c:	       jsr 15fc6 <KPrintF>
    1752:	       addq.l #4,sp

}  
    1754:	       nop
    1756:	       move.l (sp)+,d2
    1758:	       movea.l (sp)+,a6
    175a:	       lea 36(sp),sp
    175e:	       rts

00001760 <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1760:	             lea -144(sp),sp
    1764:	             movem.l d2-d4/a6,-(sp)

	KPrintF("CstLoadBackDrop: Loading of Background started");
    1768:	             pea 16aee <PutChar+0x1d8>
    176e:	             jsr 15fc6 <KPrintF>
    1774:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1776:	             move.l 164(sp),-(sp)
    177a:	             jsr 6bc <get2bytes>
    1780:	             addq.l #4,sp
    1782:	             move.w d0,134(sp)
  UWORD height = get2bytes(fp);  
    1786:	             move.l 164(sp),-(sp)
    178a:	             jsr 6bc <get2bytes>
    1790:	             addq.l #4,sp
    1792:	             move.w d0,132(sp)

  UWORD widthbyteslayer = width/8;
    1796:	             move.w 134(sp),d0
    179a:	             lsr.w #3,d0
    179c:	             move.w d0,130(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    17a0:	             move.w 130(sp),d0
    17a4:	             lsr.w #1,d0
    17a6:	             move.w d0,128(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    17aa:	             move.l 1b4f6 <winWidth>,d0
    17b0:	             lsr.l #3,d0
    17b2:	             move.w d0,126(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    17b6:	             move.w 130(sp),d0
    17ba:	             muls.w 132(sp),d0
    17be:	             move.w d0,124(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    17c2:	             move.w 124(sp),d1
    17c6:	             move.w d1,d0
    17c8:	             add.w d0,d0
    17ca:	             add.w d0,d0
    17cc:	             move.w d0,d2
    17ce:	             add.w d1,d2
    17d0:	             move.w d2,122(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    17d4:	             move.w 1b4be <CstPaletteLoaded>,d0
    17da:	/----------- bne.w 1874 <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    17de:	|            move.w #384,120(sp)

    if(CstPalette) {
    17e4:	|            move.l 1b4ee <CstPalette>,d0
    17ea:	|        /-- beq.s 1804 <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    17ec:	|        |   move.l 1b4ee <CstPalette>,116(sp)
    17f4:	|        |   move.l 1b5a2 <SysBase>,d0
    17fa:	|        |   movea.l d0,a6
    17fc:	|        |   movea.l 116(sp),a1
    1800:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    1804:	|        \-> moveq #64,d0
    1806:	|            move.l d0,112(sp)
    180a:	|            clr.l 108(sp)
    180e:	|            move.l 1b5a2 <SysBase>,d0
    1814:	|            movea.l d0,a6
    1816:	|            move.l 112(sp),d0
    181a:	|            move.l 108(sp),d1
    181e:	|            jsr -684(a6)
    1822:	|            move.l d0,104(sp)
    1826:	|            move.l 104(sp),d0
    182a:	|            move.l d0,1b4ee <CstPalette>
    CstPaletteLoaded = 1;
    1830:	|            move.w #1,1b4be <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    1838:	|            move.l 1b4ee <CstPalette>,156(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1840:	|            clr.l 152(sp)
    1844:	|        /-- bra.s 186a <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    1846:	|     /--|-> move.l 164(sp),-(sp)
    184a:	|     |  |   jsr 6bc <get2bytes>
    1850:	|     |  |   addq.l #4,sp
    1852:	|     |  |   move.l d0,d1
    1854:	|     |  |   move.l 156(sp),d0
    1858:	|     |  |   move.l d0,d2
    185a:	|     |  |   addq.l #2,d2
    185c:	|     |  |   move.l d2,156(sp)
    1860:	|     |  |   move.l d1,d1
    1862:	|     |  |   movea.l d0,a0
    1864:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1866:	|     |  |   addq.l #1,152(sp)
    186a:	|     |  \-> moveq #31,d0
    186c:	|     |      cmp.l 152(sp),d0
    1870:	|     \----- bge.s 1846 <CstLoadBackdrop+0xe6>
    1872:	|  /-------- bra.s 1892 <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1874:	\--|-------> clr.l 148(sp)
    1878:	   |     /-- bra.s 188a <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    187a:	   |  /--|-> move.l 164(sp),-(sp)
    187e:	   |  |  |   jsr 6bc <get2bytes>
    1884:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1886:	   |  |  |   addq.l #1,148(sp)
    188a:	   |  |  \-> moveq #31,d2
    188c:	   |  |      cmp.l 148(sp),d2
    1890:	   |  \----- bge.s 187a <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    1892:	   \-------> moveq #0,d0
    1894:	             move.w 122(sp),d0
    1898:	             move.l d0,100(sp)
    189c:	             moveq #2,d0
    189e:	             move.l d0,96(sp)
    18a2:	             move.l 1b5a2 <SysBase>,d0
    18a8:	             movea.l d0,a6
    18aa:	             move.l 100(sp),d0
    18ae:	             move.l 96(sp),d1
    18b2:	             jsr -684(a6)
    18b6:	             move.l d0,92(sp)
    18ba:	             move.l 92(sp),d0
    18be:	             move.l d0,88(sp)
  if( !tmpbuffer)
    18c2:	         /-- bne.s 18d2 <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    18c4:	         |   pea 16b1d <PutChar+0x207>
    18ca:	         |   jsr 15fc6 <KPrintF>
    18d0:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    18d2:	         \-> moveq #0,d0
    18d4:	             move.w 124(sp),d0
    18d8:	             move.l d0,84(sp)
    18dc:	             moveq #2,d2
    18de:	             move.l d2,80(sp)
    18e2:	             move.l 1b5a2 <SysBase>,d0
    18e8:	             movea.l d0,a6
    18ea:	             move.l 84(sp),d0
    18ee:	             move.l 80(sp),d1
    18f2:	             jsr -684(a6)
    18f6:	             move.l d0,76(sp)
    18fa:	             move.l 76(sp),d0
    18fe:	             move.l d0,72(sp)
  if( !tmpmask)
    1902:	         /-- bne.s 1912 <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    1904:	         |   pea 16b53 <PutChar+0x23d>
    190a:	         |   jsr 15fc6 <KPrintF>
    1910:	         |   addq.l #4,sp
#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    1912:	         \-> move.l 164(sp),68(sp)
    1918:	             move.l 88(sp),64(sp)
    191e:	             moveq #2,d0
    1920:	             move.l d0,60(sp)
    1924:	             move.w 122(sp),d0
    1928:	             lsr.w #1,d0
    192a:	             move.w d0,d0
    192c:	             andi.l #65535,d0
    1932:	             move.l d0,56(sp)
    1936:	             move.l 1b5aa <DOSBase>,d0
    193c:	             movea.l d0,a6
    193e:	             move.l 68(sp),d1
    1942:	             move.l 64(sp),d2
    1946:	             move.l 60(sp),d3
    194a:	             move.l 56(sp),d4
    194e:	             jsr -324(a6)
    1952:	             move.l d0,52(sp)
    1956:	             move.l 52(sp),d0
    195a:	             move.w d0,50(sp)
  if(!count) {
    195e:	         /-- bne.s 1972 <CstLoadBackdrop+0x212>
    KPrintF("Error while reading stream");
    1960:	         |   pea 16b87 <PutChar+0x271>
    1966:	         |   jsr 15fc6 <KPrintF>
    196c:	         |   addq.l #4,sp
    return;
    196e:	   /-----|-- bra.w 1bbe <CstLoadBackdrop+0x45e>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    1972:	   |     \-> move.l 164(sp),46(sp)
    1978:	   |         move.l 72(sp),42(sp)
    197e:	   |         moveq #2,d2
    1980:	   |         move.l d2,38(sp)
    1984:	   |         move.w 124(sp),d0
    1988:	   |         lsr.w #1,d0
    198a:	   |         move.w d0,d0
    198c:	   |         andi.l #65535,d0
    1992:	   |         move.l d0,34(sp)
    1996:	   |         move.l 1b5aa <DOSBase>,d0
    199c:	   |         movea.l d0,a6
    199e:	   |         move.l 46(sp),d1
    19a2:	   |         move.l 42(sp),d2
    19a6:	   |         move.l 38(sp),d3
    19aa:	   |         move.l 34(sp),d4
    19ae:	   |         jsr -324(a6)
    19b2:	   |         move.l d0,30(sp)
    19b6:	   |         move.l 30(sp),d0
    19ba:	   |         move.w d0,50(sp)
   

  if(!count) {
    19be:	   |     /-- bne.s 19d2 <CstLoadBackdrop+0x272>
    KPrintF("Error while reading stream");
    19c0:	   |     |   pea 16b87 <PutChar+0x271>
    19c6:	   |     |   jsr 15fc6 <KPrintF>
    19cc:	   |     |   addq.l #4,sp
    return;
    19ce:	   +-----|-- bra.w 1bbe <CstLoadBackdrop+0x45e>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    19d2:	   |     \-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    19da:	   |         move.l 1b4c4 <CstBackDrop>,d0
    19e0:	   |         move.l d0,144(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    19e4:	   |         move.l 172(sp),d0
    19e8:	   |         move.w d0,d1
    19ea:	   |         muls.w 126(sp),d1
    19ee:	   |         move.l 168(sp),d0
    19f2:	   |     /-- bpl.s 19f6 <CstLoadBackdrop+0x296>
    19f4:	   |     |   addq.l #7,d0
    19f6:	   |     \-> asr.l #3,d0
    19f8:	   |         move.l d0,d0
    19fa:	   |         movea.w d1,a0
    19fc:	   |         adda.w d0,a0
    19fe:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    1a02:	   |         moveq #0,d0
    1a04:	   |         move.w 24(sp),d0
    1a08:	   |         add.l d0,144(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    1a0c:	   |         pea 16ba2 <PutChar+0x28c>
    1a12:	   |         jsr 15fc6 <KPrintF>
    1a18:	   |         addq.l #4,sp


  WaitBlit();
    1a1a:	   |         move.l 1b5ae <GfxBase>,d0
    1a20:	   |         movea.l d0,a6
    1a22:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    1a26:	   |         movea.l 26(sp),a0
    1a2a:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    1a30:	   |         movea.l 26(sp),a0
    1a34:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    1a3a:	   |         movea.l 26(sp),a0
    1a3e:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    1a44:	   |         movea.l 26(sp),a0
    1a48:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    1a4e:	   |         move.w 126(sp),d0
    1a52:	   |         sub.w 130(sp),d0
    1a56:	   |         movea.l 26(sp),a0
    1a5a:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    1a5e:	   |         move.w 126(sp),d0
    1a62:	   |         sub.w 130(sp),d0
    1a66:	   |         movea.l 26(sp),a0
    1a6a:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    1a6e:	   |         movea.l 26(sp),a0
    1a72:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    1a78:	   |         movea.l 26(sp),a0
    1a7c:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    1a82:	   |         move.l 88(sp),140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    1a88:	   |         clr.l 136(sp)
    1a8c:	   |     /-- bra.s 1aee <CstLoadBackdrop+0x38e>
  {    
    custom->bltapt = (APTR) tmpmask;
    1a8e:	   |  /--|-> movea.l 26(sp),a0
    1a92:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    1a98:	   |  |  |   move.l 140(sp),d0
    1a9c:	   |  |  |   movea.l 26(sp),a0
    1aa0:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    1aa4:	   |  |  |   move.l 144(sp),d0
    1aa8:	   |  |  |   movea.l 26(sp),a0
    1aac:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    1ab0:	   |  |  |   move.l 144(sp),d0
    1ab4:	   |  |  |   movea.l 26(sp),a0
    1ab8:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    1abc:	   |  |  |   move.w 132(sp),d0
    1ac0:	   |  |  |   lsl.w #6,d0
    1ac2:	   |  |  |   add.w 128(sp),d0
    1ac6:	   |  |  |   movea.l 26(sp),a0
    1aca:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    1ace:	   |  |  |   moveq #0,d0
    1ad0:	   |  |  |   move.w 124(sp),d0
    1ad4:	   |  |  |   add.l d0,140(sp)
    backdropcursor += CstBackdropSizePlane;
    1ad8:	   |  |  |   move.w 1b4c2 <CstBackdropSizePlane>,d0
    1ade:	   |  |  |   move.w d0,d0
    1ae0:	   |  |  |   andi.l #65535,d0
    1ae6:	   |  |  |   add.l d0,144(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    1aea:	   |  |  |   addq.l #1,136(sp)
    1aee:	   |  |  \-> moveq #4,d0
    1af0:	   |  |      cmp.l 136(sp),d0
    1af4:	   |  \----- bge.s 1a8e <CstLoadBackdrop+0x32e>
  }    

  WaitBlit();
    1af6:	   |         move.l 1b5ae <GfxBase>,d0
    1afc:	   |         movea.l d0,a6
    1afe:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    1b02:	   |         pea 16bc1 <PutChar+0x2ab>
    1b08:	   |         jsr 15fc6 <KPrintF>
    1b0e:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    1b10:	   |         move.l 88(sp),20(sp)
    1b16:	   |         move.l 1b5a2 <SysBase>,d0
    1b1c:	   |         movea.l d0,a6
    1b1e:	   |         movea.l 20(sp),a1
    1b22:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    1b26:	   |         move.l 72(sp),16(sp)
    1b2c:	   |         move.l 1b5a2 <SysBase>,d0
    1b32:	   |         movea.l d0,a6
    1b34:	   |         movea.l 16(sp),a1
    1b38:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    1b3c:	   |         move.w #2,1b4d0 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1b44:	   |         move.l 1b4f6 <winWidth>,d0
    1b4a:	   |         lsr.l #4,d0
    1b4c:	   |         movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
    1b52:	   |         move.l a0,d1
    1b54:	   |         addq.l #2,d1
    1b56:	   |         move.l d1,1b4e6 <CstBackDropBufferApplyCursor>
    1b5c:	   |         move.l d0,d0
    1b5e:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    1b60:	   |         move.l 1b4fa <winHeight>,d0
    1b66:	   |         movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
    1b6c:	   |         move.l a0,d1
    1b6e:	   |         addq.l #2,d1
    1b70:	   |         move.l d1,1b4e6 <CstBackDropBufferApplyCursor>
    1b76:	   |         move.l d0,d0
    1b78:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1b7a:	   |         movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
    1b80:	   |         move.l a0,d0
    1b82:	   |         addq.l #2,d0
    1b84:	   |         move.l d0,1b4e6 <CstBackDropBufferApplyCursor>
    1b8a:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1b8c:	   |         movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
    1b92:	   |         move.l a0,d0
    1b94:	   |         addq.l #2,d0
    1b96:	   |         move.l d0,1b4e6 <CstBackDropBufferApplyCursor>
    1b9c:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1b9e:	   |         movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
    1ba4:	   |         move.l a0,d0
    1ba6:	   |         addq.l #2,d0
    1ba8:	   |         move.l d0,1b4e6 <CstBackDropBufferApplyCursor>
    1bae:	   |         clr.w (a0)

  KPrintF("CstLoadBackDrop: Finished");
    1bb0:	   |         pea 16be1 <PutChar+0x2cb>
    1bb6:	   |         jsr 15fc6 <KPrintF>
    1bbc:	   |         addq.l #4,sp

}
    1bbe:	   \-------> movem.l (sp)+,d2-d4/a6
    1bc2:	             lea 144(sp),sp
    1bc6:	             rts

00001bc8 <CstRestoreScreen>:

ULONG test = 0;

void CstRestoreScreen()
{
    1bc8:	                   lea -24(sp),sp
    1bcc:	                   move.l a6,-(sp)
    1bce:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    1bd0:	                   move.l #14675968,16(sp)

  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    1bd8:	                   move.l 1b4de <CstCleanupQueueDrawBuffer>,d0
    1bde:	/----------------- beq.w 1de6 <CstRestoreScreen+0x21e>
    1be2:	|                  move.l 1b4d6 <CstDrawBuffer>,d0
    1be8:	+----------------- beq.w 1de6 <CstRestoreScreen+0x21e>
    return;
  } 

  WaitBlit();
    1bec:	|                  move.l 1b5ae <GfxBase>,d0
    1bf2:	|                  movea.l d0,a6
    1bf4:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1bf8:	|                  movea.l 16(sp),a0
    1bfc:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    1c02:	|                  movea.l 16(sp),a0
    1c06:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1c0c:	|                  movea.l 16(sp),a0
    1c10:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    1c16:	|     /----------- bra.w 1dda <CstRestoreScreen+0x212>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3)
    1c1a:	|  /--|----------> movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    1c20:	|  |  |            move.l 4(a0),d0
    1c24:	|  |  |  /-------- beq.w 1da8 <CstRestoreScreen+0x1e0>
    1c28:	|  |  |  |         movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    1c2e:	|  |  |  |         movea.l 4(a0),a0
    1c32:	|  |  |  |         move.l 16(a0),d0
    1c36:	|  |  |  |         moveq #2,d1
    1c38:	|  |  |  |         cmp.l d0,d1
    1c3a:	|  |  |  +-------- blt.w 1da8 <CstRestoreScreen+0x1e0>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    1c3e:	|  |  |  |         move.l 1b4f6 <winWidth>,d0
    1c44:	|  |  |  |         lsr.l #3,d0
    1c46:	|  |  |  |         move.l d0,d1
    1c48:	|  |  |  |         movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    1c4e:	|  |  |  |         move.w 8(a0),d0
    1c52:	|  |  |  |         add.w d0,d0
    1c54:	|  |  |  |         sub.w d0,d1
    1c56:	|  |  |  |         movea.l 16(sp),a0
    1c5a:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    1c5e:	|  |  |  |         move.l 1b4f6 <winWidth>,d0
    1c64:	|  |  |  |         lsr.l #3,d0
    1c66:	|  |  |  |         move.l d0,d1
    1c68:	|  |  |  |         movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    1c6e:	|  |  |  |         move.w 8(a0),d0
    1c72:	|  |  |  |         add.w d0,d0
    1c74:	|  |  |  |         sub.w d0,d1
    1c76:	|  |  |  |         movea.l 16(sp),a0
    1c7a:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    1c7e:	|  |  |  |         movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    1c84:	|  |  |  |         move.w 14(a0),d0
    1c88:	|  |  |  |         move.w d0,d0
    1c8a:	|  |  |  |         andi.l #65535,d0
    1c90:	|  |  |  |         move.l 1b4f6 <winWidth>,d1
    1c96:	|  |  |  |         move.l d1,-(sp)
    1c98:	|  |  |  |         move.l d0,-(sp)
    1c9a:	|  |  |  |         jsr 16800 <__mulsi3>
    1ca0:	|  |  |  |         addq.l #8,sp
    1ca2:	|  |  |  |         move.l d0,d1
    1ca4:	|  |  |  |         lsr.l #3,d1
    1ca6:	|  |  |  |         move.l 1b4c4 <CstBackDrop>,d0
    1cac:	|  |  |  |         add.l d0,d1
    1cae:	|  |  |  |         movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    1cb4:	|  |  |  |         move.w 12(a0),d0
    1cb8:	|  |  |  |         move.w d0,d0
    1cba:	|  |  |  |         andi.l #65535,d0
    1cc0:	|  |  |  |         move.l d1,d2
    1cc2:	|  |  |  |         add.l d0,d2
    1cc4:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    1cc8:	|  |  |  |         movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    1cce:	|  |  |  |         move.w 14(a0),d0
    1cd2:	|  |  |  |         move.w d0,d0
    1cd4:	|  |  |  |         andi.l #65535,d0
    1cda:	|  |  |  |         move.l 1b4f6 <winWidth>,d1
    1ce0:	|  |  |  |         move.l d1,-(sp)
    1ce2:	|  |  |  |         move.l d0,-(sp)
    1ce4:	|  |  |  |         jsr 16800 <__mulsi3>
    1cea:	|  |  |  |         addq.l #8,sp
    1cec:	|  |  |  |         move.l d0,d1
    1cee:	|  |  |  |         lsr.l #3,d1
    1cf0:	|  |  |  |         move.l 1b4d6 <CstDrawBuffer>,d0
    1cf6:	|  |  |  |         add.l d0,d1
    1cf8:	|  |  |  |         movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    1cfe:	|  |  |  |         move.w 12(a0),d0
    1d02:	|  |  |  |         move.w d0,d0
    1d04:	|  |  |  |         andi.l #65535,d0
    1d0a:	|  |  |  |         move.l d1,d2
    1d0c:	|  |  |  |         add.l d0,d2
    1d0e:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1d12:	|  |  |  |         clr.l 20(sp)
    1d16:	|  |  |  |     /-- bra.w 1d9e <CstRestoreScreen+0x1d6>
      {
        custom->bltapt = (APTR) bltapt;
    1d1a:	|  |  |  |  /--|-> move.l 28(sp),d0
    1d1e:	|  |  |  |  |  |   movea.l 16(sp),a0
    1d22:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    1d26:	|  |  |  |  |  |   move.l 24(sp),d0
    1d2a:	|  |  |  |  |  |   movea.l 16(sp),a0
    1d2e:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    1d32:	|  |  |  |  |  |   movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    1d38:	|  |  |  |  |  |   move.w 10(a0),d0
    1d3c:	|  |  |  |  |  |   lsl.w #6,d0
    1d3e:	|  |  |  |  |  |   movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    1d44:	|  |  |  |  |  |   move.w 8(a0),d1
    1d48:	|  |  |  |  |  |   add.w d1,d0
    1d4a:	|  |  |  |  |  |   movea.l 16(sp),a0
    1d4e:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    1d52:	|  |  |  |  |  |   move.l 1b4f6 <winWidth>,d0
    1d58:	|  |  |  |  |  |   lsr.l #3,d0
    1d5a:	|  |  |  |  |  |   move.l 1b4fa <winHeight>,d1
    1d60:	|  |  |  |  |  |   move.l d1,-(sp)
    1d62:	|  |  |  |  |  |   move.l d0,-(sp)
    1d64:	|  |  |  |  |  |   jsr 16800 <__mulsi3>
    1d6a:	|  |  |  |  |  |   addq.l #8,sp
    1d6c:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    1d70:	|  |  |  |  |  |   move.l 1b4f6 <winWidth>,d0
    1d76:	|  |  |  |  |  |   lsr.l #3,d0
    1d78:	|  |  |  |  |  |   move.l 1b4fa <winHeight>,d1
    1d7e:	|  |  |  |  |  |   move.l d1,-(sp)
    1d80:	|  |  |  |  |  |   move.l d0,-(sp)
    1d82:	|  |  |  |  |  |   jsr 16800 <__mulsi3>
    1d88:	|  |  |  |  |  |   addq.l #8,sp
    1d8a:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    1d8e:	|  |  |  |  |  |   move.l 1b5ae <GfxBase>,d0
    1d94:	|  |  |  |  |  |   movea.l d0,a6
    1d96:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1d9a:	|  |  |  |  |  |   addq.l #1,20(sp)
    1d9e:	|  |  |  |  |  \-> moveq #4,d0
    1da0:	|  |  |  |  |      cmp.l 20(sp),d0
    1da4:	|  |  |  |  \----- bge.w 1d1a <CstRestoreScreen+0x152>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    1da8:	|  |  |  \-------> move.l 1b4de <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    1db0:	|  |  |            movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    1db6:	|  |  |            move.l 16(a0),d0
    1dba:	|  |  |            move.l d0,1b4de <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    1dc0:	|  |  |            move.l 12(sp),8(sp)
    1dc6:	|  |  |            move.l 1b5a2 <SysBase>,d0
    1dcc:	|  |  |            movea.l d0,a6
    1dce:	|  |  |            movea.l 8(sp),a1
    1dd2:	|  |  |            jsr -690(a6)
    todelete = NULL;
    1dd6:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    1dda:	|  |  \----------> move.l 1b4de <CstCleanupQueueDrawBuffer>,d0
    1de0:	|  \-------------- bne.w 1c1a <CstRestoreScreen+0x52>
    1de4:	|              /-- bra.s 1de8 <CstRestoreScreen+0x220>
    return;
    1de6:	\--------------|-> nop
  }
  
}
    1de8:	               \-> move.l (sp)+,d2
    1dea:	                   movea.l (sp)+,a6
    1dec:	                   lea 24(sp),sp
    1df0:	                   rts

00001df2 <CstScaleSprite>:

void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    1df2:	                lea -124(sp),sp
    1df6:	                movem.l d2-d3/a6,-(sp)
    1dfa:	                movea.l 148(sp),a0
    1dfe:	                move.l 152(sp),d1
    1e02:	                move.l 156(sp),d0
    1e06:	                movea.w a0,a0
    1e08:	                move.w a0,16(sp)
    1e0c:	                move.w d1,d1
    1e0e:	                move.w d1,14(sp)
    1e12:	                move.w d0,d0
    1e14:	                move.w d0,12(sp)
  UWORD *destination = 0;
    1e18:	                clr.l 132(sp)
  switch(destinationtype)
    1e1c:	                moveq #0,d0
    1e1e:	                move.w 12(sp),d0
    1e22:	                moveq #1,d1
    1e24:	                cmp.l d0,d1
    1e26:	            /-- beq.s 1e30 <CstScaleSprite+0x3e>
    1e28:	            |   moveq #2,d2
    1e2a:	            |   cmp.l d0,d2
    1e2c:	         /--|-- beq.s 1e3a <CstScaleSprite+0x48>
    1e2e:	      /--|--|-- bra.s 1e4c <CstScaleSprite+0x5a>
  {
    case SCREEN:
      destination = (UWORD *) CstDrawBuffer;      
    1e30:	      |  |  \-> move.l 1b4d6 <CstDrawBuffer>,132(sp)
      break;
    1e38:	      +--|----- bra.s 1e4c <CstScaleSprite+0x5a>
    case BACKDROP:      
      CstApplyBackDropCounter = 2;
    1e3a:	      |  \----> move.w #2,1b4d0 <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    1e42:	      |         move.l 1b4c4 <CstBackDrop>,132(sp)
      break;
    1e4a:	      |         nop
  ULONG bltcon1; //Shift Source
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    1e4c:	      \-------> tst.w 14(sp)
    1e50:	         /----- bge.s 1e98 <CstScaleSprite+0xa6>
    if(y + single->height < 0) {
    1e52:	         |      movea.w 14(sp),a1
    1e56:	         |      movea.l 140(sp),a0
    1e5a:	         |      move.l 4(a0),d0
    1e5e:	         |      add.l a1,d0
    1e60:	         |  /-- bpl.s 1e74 <CstScaleSprite+0x82>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1e62:	         |  |   pea 16bfb <PutChar+0x2e5>
    1e68:	         |  |   jsr 15fc6 <KPrintF>
    1e6e:	         |  |   addq.l #4,sp
      return;
    1e70:	/--------|--|-- bra.w 2928 <CstScaleSprite+0xb36>
    }
    ystartdst = 0;
    1e74:	|        |  \-> clr.l 96(sp)
    ystartsrc = y*-1;
    1e78:	|        |      move.w 14(sp),d0
    1e7c:	|        |      ext.l d0
    1e7e:	|        |      neg.l d0
    1e80:	|        |      move.l d0,92(sp)
    blitheight = single->height+y;
    1e84:	|        |      movea.l 140(sp),a0
    1e88:	|        |      move.l 4(a0),d0
    1e8c:	|        |      movea.w 14(sp),a0
    1e90:	|        |      add.l a0,d0
    1e92:	|        |      move.l d0,88(sp)
    1e96:	|     /--|----- bra.s 1f0a <CstScaleSprite+0x118>
  } else if(y+single->height > (int) winHeight) {
    1e98:	|     |  \----> movea.w 14(sp),a1
    1e9c:	|     |         movea.l 140(sp),a0
    1ea0:	|     |         move.l 4(a0),d0
    1ea4:	|     |         move.l a1,d1
    1ea6:	|     |         add.l d0,d1
    1ea8:	|     |         move.l 1b4fa <winHeight>,d0
    1eae:	|     |         cmp.l d1,d0
    1eb0:	|     |  /----- bge.s 1ef2 <CstScaleSprite+0x100>
    if(y  > (int) winHeight) {
    1eb2:	|     |  |      movea.w 14(sp),a0
    1eb6:	|     |  |      move.l 1b4fa <winHeight>,d0
    1ebc:	|     |  |      cmp.l a0,d0
    1ebe:	|     |  |  /-- bge.s 1ed2 <CstScaleSprite+0xe0>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1ec0:	|     |  |  |   pea 16bfb <PutChar+0x2e5>
    1ec6:	|     |  |  |   jsr 15fc6 <KPrintF>
    1ecc:	|     |  |  |   addq.l #4,sp
      return;
    1ece:	+-----|--|--|-- bra.w 2928 <CstScaleSprite+0xb36>
    }
    ystartdst = y;
    1ed2:	|     |  |  \-> movea.w 14(sp),a0
    1ed6:	|     |  |      move.l a0,96(sp)
    ystartsrc = 0;
    1eda:	|     |  |      clr.l 92(sp)
    blitheight = winHeight-y;
    1ede:	|     |  |      move.l 1b4fa <winHeight>,d0
    1ee4:	|     |  |      movea.w 14(sp),a0
    1ee8:	|     |  |      move.l d0,d1
    1eea:	|     |  |      sub.l a0,d1
    1eec:	|     |  |      move.l d1,88(sp)
    1ef0:	|     +--|----- bra.s 1f0a <CstScaleSprite+0x118>
  } else {
    ystartdst = y;
    1ef2:	|     |  \----> movea.w 14(sp),a0
    1ef6:	|     |         move.l a0,96(sp)
    ystartsrc = 0;
    1efa:	|     |         clr.l 92(sp)
    blitheight = single->height;
    1efe:	|     |         movea.l 140(sp),a0
    1f02:	|     |         move.l 4(a0),d0
    1f06:	|     |         move.l d0,88(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    1f0a:	|     \-------> tst.w 16(sp)
    1f0e:	|     /-------- bge.w 21be <CstScaleSprite+0x3cc>
    if(x + single->width < 0) {
    1f12:	|     |         movea.w 16(sp),a1
    1f16:	|     |         movea.l 140(sp),a0
    1f1a:	|     |         move.l (a0),d0
    1f1c:	|     |         add.l a1,d0
    1f1e:	|     |     /-- bpl.s 1f32 <CstScaleSprite+0x140>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1f20:	|     |     |   pea 16bfb <PutChar+0x2e5>
    1f26:	|     |     |   jsr 15fc6 <KPrintF>
    1f2c:	|     |     |   addq.l #4,sp
      return;
    1f2e:	+-----|-----|-- bra.w 2928 <CstScaleSprite+0xb36>

    }
    
    extrawords = 1;
    1f32:	|     |     \-> move.w #1,130(sp)
    cutwordssource = (x*-1)/16; 
    1f38:	|     |         move.w 16(sp),d0
    1f3c:	|     |     /-- bpl.s 1f42 <CstScaleSprite+0x150>
    1f3e:	|     |     |   addi.w #15,d0
    1f42:	|     |     \-> asr.w #4,d0
    1f44:	|     |         neg.w d0
    1f46:	|     |         move.w d0,128(sp)
    cutmaskpixel = (x*-1)%16;     
    1f4a:	|     |         move.w 16(sp),d0
    1f4e:	|     |         ext.l d0
    1f50:	|     |         neg.l d0
    1f52:	|     |         andi.l #-2147483633,d0
    1f58:	|     |     /-- bpl.s 1f62 <CstScaleSprite+0x170>
    1f5a:	|     |     |   subq.l #1,d0
    1f5c:	|     |     |   moveq #-16,d1
    1f5e:	|     |     |   or.l d1,d0
    1f60:	|     |     |   addq.l #1,d0
    1f62:	|     |     \-> move.w d0,126(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    1f66:	|     |         clr.w 124(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+cutwordssource*2+ystartsrc*single->width/8;
    1f6a:	|     |         movea.l 140(sp),a0
    1f6e:	|     |         move.l 24(a0),d0
    1f72:	|     |         move.l d0,d2
    1f74:	|     |         moveq #0,d0
    1f76:	|     |         move.w 128(sp),d0
    1f7a:	|     |         add.l d0,d0
    1f7c:	|     |         move.l d0,d3
    1f7e:	|     |         movea.l 140(sp),a0
    1f82:	|     |         move.l (a0),d0
    1f84:	|     |     /-- bpl.s 1f88 <CstScaleSprite+0x196>
    1f86:	|     |     |   addq.l #7,d0
    1f88:	|     |     \-> asr.l #3,d0
    1f8a:	|     |         movea.l 140(sp),a0
    1f8e:	|     |         move.l 4(a0),d1
    1f92:	|     |         move.l d1,-(sp)
    1f94:	|     |         move.l d0,-(sp)
    1f96:	|     |         jsr 16800 <__mulsi3>
    1f9c:	|     |         addq.l #8,sp
    1f9e:	|     |         move.l d0,d1
    1fa0:	|     |         move.l d1,d0
    1fa2:	|     |         add.l d0,d0
    1fa4:	|     |         add.l d0,d0
    1fa6:	|     |         add.l d1,d0
    1fa8:	|     |         add.l d3,d0
    1faa:	|     |         add.l d0,d2
    1fac:	|     |         movea.l 140(sp),a0
    1fb0:	|     |         move.l (a0),d0
    1fb2:	|     |         move.l 92(sp),-(sp)
    1fb6:	|     |         move.l d0,-(sp)
    1fb8:	|     |         jsr 16800 <__mulsi3>
    1fbe:	|     |         addq.l #8,sp
    1fc0:	|     |         lsr.l #3,d0
    1fc2:	|     |         move.l d2,d1
    1fc4:	|     |         add.l d0,d1
    1fc6:	|     |         move.l d1,120(sp)
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    1fca:	|     |         movea.l 140(sp),a0
    1fce:	|     |         move.l 24(a0),d0
    1fd2:	|     |         move.l d0,d1
    1fd4:	|     |         moveq #0,d0
    1fd6:	|     |         move.w 128(sp),d0
    1fda:	|     |         add.l d0,d0
    1fdc:	|     |         move.l d1,d2
    1fde:	|     |         add.l d0,d2
    1fe0:	|     |         movea.l 140(sp),a0
    1fe4:	|     |         move.l (a0),d0
    1fe6:	|     |         move.l 92(sp),-(sp)
    1fea:	|     |         move.l d0,-(sp)
    1fec:	|     |         jsr 16800 <__mulsi3>
    1ff2:	|     |         addq.l #8,sp
    1ff4:	|     |         lsr.l #3,d0
    1ff6:	|     |         move.l d2,d1
    1ff8:	|     |         add.l d0,d1
    1ffa:	|     |         move.l d1,116(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    1ffe:	|     |         move.l 1b4f6 <winWidth>,d0
    2004:	|     |         move.l 96(sp),-(sp)
    2008:	|     |         move.l d0,-(sp)
    200a:	|     |         jsr 16800 <__mulsi3>
    2010:	|     |         addq.l #8,sp
    2012:	|     |         lsr.l #3,d0
    2014:	|     |         move.l 132(sp),d1
    2018:	|     |         add.l d1,d0
    201a:	|     |         move.l d0,d2
    201c:	|     |         subq.l #2,d2
    201e:	|     |         move.l d2,112(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2022:	|     |         move.l 1b4f6 <winWidth>,d0
    2028:	|     |         move.l 96(sp),-(sp)
    202c:	|     |         move.l d0,-(sp)
    202e:	|     |         jsr 16800 <__mulsi3>
    2034:	|     |         addq.l #8,sp
    2036:	|     |         lsr.l #3,d0
    2038:	|     |         move.l 132(sp),d1
    203c:	|     |         add.l d1,d0
    203e:	|     |         move.l d0,d1
    2040:	|     |         subq.l #2,d1
    2042:	|     |         move.l d1,108(sp)
    bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    2046:	|     |         moveq #0,d0
    2048:	|     |         move.w 126(sp),d0
    204c:	|     |         moveq #16,d1
    204e:	|     |         sub.l d0,d1
    2050:	|     |         move.l d1,d0
    2052:	|     |         moveq #12,d2
    2054:	|     |         lsl.l d2,d0
    2056:	|     |         addi.l #4042,d0
    205c:	|     |         move.l d0,104(sp)
    bltcon1 = ((16-cutmaskpixel) << 12);
    2060:	|     |         moveq #0,d0
    2062:	|     |         move.w 126(sp),d0
    2066:	|     |         moveq #16,d1
    2068:	|     |         sub.l d0,d1
    206a:	|     |         move.l d1,d0
    206c:	|     |         moveq #12,d1
    206e:	|     |         lsl.l d1,d0
    2070:	|     |         move.l d0,100(sp)
    if( destinationtype == SCREEN)
    2074:	|     |         cmpi.w #1,12(sp)
    207a:	|     |  /----- bne.w 2138 <CstScaleSprite+0x346>
    {      
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    207e:	|     |  |      move.l 1b4de <CstCleanupQueueDrawBuffer>,48(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    2086:	|     |  |      moveq #20,d2
    2088:	|     |  |      move.l d2,44(sp)
    208c:	|     |  |      clr.l 40(sp)
    2090:	|     |  |      move.l 1b5a2 <SysBase>,d0
    2096:	|     |  |      movea.l d0,a6
    2098:	|     |  |      move.l 44(sp),d0
    209c:	|     |  |      move.l 40(sp),d1
    20a0:	|     |  |      jsr -684(a6)
    20a4:	|     |  |      move.l d0,36(sp)
    20a8:	|     |  |      move.l 36(sp),d0
    20ac:	|     |  |      move.l d0,1b4de <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    20b2:	|     |  |      movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    20b8:	|     |  |      move.l 48(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    20be:	|     |  |      movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    20c4:	|     |  |      move.w 16(sp),d0
    20c8:	|     |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    20ca:	|     |  |      movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    20d0:	|     |  |      move.w 14(sp),d0
    20d4:	|     |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person;      
    20d8:	|     |  |      movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    20de:	|     |  |      move.l 144(sp),4(a0)

      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    20e4:	|     |  |      movea.l 140(sp),a0
    20e8:	|     |  |      move.l (a0),d0
    20ea:	|     |  |      movea.l d0,a0
    20ec:	|     |  |      cmpa.w #0,a0
    20f0:	|     |  |  /-- bge.s 20f6 <CstScaleSprite+0x304>
    20f2:	|     |  |  |   lea 15(a0),a0
    20f6:	|     |  |  \-> move.l a0,d0
    20f8:	|     |  |      asr.l #4,d0
    20fa:	|     |  |      move.l d0,d0
    20fc:	|     |  |      add.w 128(sp),d0
    2100:	|     |  |      movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    2106:	|     |  |      add.w 130(sp),d0
    210a:	|     |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    210e:	|     |  |      movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    2114:	|     |  |      move.l 88(sp),d0
    2118:	|     |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    211c:	|     |  |      movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    2122:	|     |  |      clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2126:	|     |  |      movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    212c:	|     |  |      move.l 96(sp),d0
    2130:	|     |  |      move.w d0,14(a0)
    2134:	|  /--|--|----- bra.w 2750 <CstScaleSprite+0x95e>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    2138:	|  |  |  \----> movea.l 140(sp),a0
    213c:	|  |  |         move.l (a0),d0
    213e:	|  |  |         movea.l d0,a0
    2140:	|  |  |         cmpa.w #0,a0
    2144:	|  |  |     /-- bge.s 214a <CstScaleSprite+0x358>
    2146:	|  |  |     |   lea 15(a0),a0
    214a:	|  |  |     \-> move.l a0,d0
    214c:	|  |  |         asr.l #4,d0
    214e:	|  |  |         move.l d0,d0
    2150:	|  |  |         add.w 128(sp),d0
    2154:	|  |  |         movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
    215a:	|  |  |         move.l a0,d1
    215c:	|  |  |         addq.l #2,d1
    215e:	|  |  |         move.l d1,1b4e6 <CstBackDropBufferApplyCursor>
    2164:	|  |  |         add.w 130(sp),d0
    2168:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    216a:	|  |  |         movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
    2170:	|  |  |         move.l a0,d0
    2172:	|  |  |         addq.l #2,d0
    2174:	|  |  |         move.l d0,1b4e6 <CstBackDropBufferApplyCursor>
    217a:	|  |  |         move.l 88(sp),d0
    217e:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2180:	|  |  |         movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
    2186:	|  |  |         move.l a0,d0
    2188:	|  |  |         addq.l #2,d0
    218a:	|  |  |         move.l d0,1b4e6 <CstBackDropBufferApplyCursor>
    2190:	|  |  |         clr.w (a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2192:	|  |  |         movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
    2198:	|  |  |         move.l a0,d0
    219a:	|  |  |         addq.l #2,d0
    219c:	|  |  |         move.l d0,1b4e6 <CstBackDropBufferApplyCursor>
    21a2:	|  |  |         move.l 96(sp),d0
    21a6:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    21a8:	|  |  |         movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
    21ae:	|  |  |         move.l a0,d0
    21b0:	|  |  |         addq.l #2,d0
    21b2:	|  |  |         move.l d0,1b4e6 <CstBackDropBufferApplyCursor>
    21b8:	|  |  |         clr.w (a0)
    21ba:	|  +--|-------- bra.w 2750 <CstScaleSprite+0x95e>
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    21be:	|  |  \-------> movea.w 16(sp),a1
    21c2:	|  |            movea.l 140(sp),a0
    21c6:	|  |            move.l (a0),d0
    21c8:	|  |            move.l a1,d1
    21ca:	|  |            add.l d0,d1
    21cc:	|  |            move.l 1b4f6 <winWidth>,d0
    21d2:	|  |            cmp.l d1,d0
    21d4:	|  |  /-------- bge.w 24b6 <CstScaleSprite+0x6c4>

    if(x - single->width > (int) winWidth)
    21d8:	|  |  |         movea.w 16(sp),a1
    21dc:	|  |  |         movea.l 140(sp),a0
    21e0:	|  |  |         move.l (a0),d0
    21e2:	|  |  |         move.l a1,d1
    21e4:	|  |  |         sub.l d0,d1
    21e6:	|  |  |         move.l 1b4f6 <winWidth>,d0
    21ec:	|  |  |         cmp.l d1,d0
    21ee:	|  |  |     /-- bge.s 2202 <CstScaleSprite+0x410>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    21f0:	|  |  |     |   pea 16bfb <PutChar+0x2e5>
    21f6:	|  |  |     |   jsr 15fc6 <KPrintF>
    21fc:	|  |  |     |   addq.l #4,sp
      return;
    21fe:	+--|--|-----|-- bra.w 2928 <CstScaleSprite+0xb36>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2202:	|  |  |     \-> clr.w 130(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    2206:	|  |  |         movea.w 16(sp),a1
    220a:	|  |  |         movea.l 140(sp),a0
    220e:	|  |  |         move.l (a0),d0
    2210:	|  |  |         add.l a1,d0
    2212:	|  |  |         move.l d0,d1
    2214:	|  |  |         move.l 1b4f6 <winWidth>,d0
    221a:	|  |  |         sub.l d0,d1
    221c:	|  |  |         move.l d1,d0
    221e:	|  |  |         lsr.l #4,d0
    2220:	|  |  |         move.w d0,128(sp)
    cutmaskpixel = 0;
    2224:	|  |  |         clr.w 126(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    2228:	|  |  |         move.w #-1,124(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+ystartsrc*single->width/8;
    222e:	|  |  |         movea.l 140(sp),a0
    2232:	|  |  |         move.l 24(a0),d0
    2236:	|  |  |         move.l d0,d2
    2238:	|  |  |         movea.l 140(sp),a0
    223c:	|  |  |         move.l (a0),d0
    223e:	|  |  |     /-- bpl.s 2242 <CstScaleSprite+0x450>
    2240:	|  |  |     |   addq.l #7,d0
    2242:	|  |  |     \-> asr.l #3,d0
    2244:	|  |  |         movea.l 140(sp),a0
    2248:	|  |  |         move.l 4(a0),d1
    224c:	|  |  |         move.l d1,-(sp)
    224e:	|  |  |         move.l d0,-(sp)
    2250:	|  |  |         jsr 16800 <__mulsi3>
    2256:	|  |  |         addq.l #8,sp
    2258:	|  |  |         move.l d0,d1
    225a:	|  |  |         move.l d1,d0
    225c:	|  |  |         add.l d0,d0
    225e:	|  |  |         add.l d0,d0
    2260:	|  |  |         add.l d1,d0
    2262:	|  |  |         add.l d0,d2
    2264:	|  |  |         movea.l 140(sp),a0
    2268:	|  |  |         move.l (a0),d0
    226a:	|  |  |         move.l 92(sp),-(sp)
    226e:	|  |  |         move.l d0,-(sp)
    2270:	|  |  |         jsr 16800 <__mulsi3>
    2276:	|  |  |         addq.l #8,sp
    2278:	|  |  |         lsr.l #3,d0
    227a:	|  |  |         move.l d2,d1
    227c:	|  |  |         add.l d0,d1
    227e:	|  |  |         move.l d1,120(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    2282:	|  |  |         movea.l 140(sp),a0
    2286:	|  |  |         move.l 24(a0),d0
    228a:	|  |  |         move.l d0,d2
    228c:	|  |  |         movea.l 140(sp),a0
    2290:	|  |  |         move.l (a0),d0
    2292:	|  |  |         move.l 92(sp),-(sp)
    2296:	|  |  |         move.l d0,-(sp)
    2298:	|  |  |         jsr 16800 <__mulsi3>
    229e:	|  |  |         addq.l #8,sp
    22a0:	|  |  |         lsr.l #3,d0
    22a2:	|  |  |         move.l d2,d1
    22a4:	|  |  |         add.l d0,d1
    22a6:	|  |  |         move.l d1,116(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    22aa:	|  |  |         move.l 1b4f6 <winWidth>,d0
    22b0:	|  |  |         move.l 96(sp),-(sp)
    22b4:	|  |  |         move.l d0,-(sp)
    22b6:	|  |  |         jsr 16800 <__mulsi3>
    22bc:	|  |  |         addq.l #8,sp
    22be:	|  |  |         lsr.l #3,d0
    22c0:	|  |  |         move.l 132(sp),d1
    22c4:	|  |  |         add.l d0,d1
    22c6:	|  |  |         move.w 16(sp),d0
    22ca:	|  |  |     /-- bpl.s 22d0 <CstScaleSprite+0x4de>
    22cc:	|  |  |     |   addi.w #15,d0
    22d0:	|  |  |     \-> asr.w #4,d0
    22d2:	|  |  |         movea.w d0,a0
    22d4:	|  |  |         move.l a0,d0
    22d6:	|  |  |         add.l a0,d0
    22d8:	|  |  |         move.l d1,d2
    22da:	|  |  |         add.l d0,d2
    22dc:	|  |  |         move.l d2,112(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    22e0:	|  |  |         move.l 1b4f6 <winWidth>,d0
    22e6:	|  |  |         move.l 96(sp),-(sp)
    22ea:	|  |  |         move.l d0,-(sp)
    22ec:	|  |  |         jsr 16800 <__mulsi3>
    22f2:	|  |  |         addq.l #8,sp
    22f4:	|  |  |         lsr.l #3,d0
    22f6:	|  |  |         move.l 132(sp),d1
    22fa:	|  |  |         add.l d0,d1
    22fc:	|  |  |         move.w 16(sp),d0
    2300:	|  |  |     /-- bpl.s 2306 <CstScaleSprite+0x514>
    2302:	|  |  |     |   addi.w #15,d0
    2306:	|  |  |     \-> asr.w #4,d0
    2308:	|  |  |         movea.w d0,a0
    230a:	|  |  |         move.l a0,d0
    230c:	|  |  |         add.l a0,d0
    230e:	|  |  |         move.l d1,d2
    2310:	|  |  |         add.l d0,d2
    2312:	|  |  |         move.l d2,108(sp)
    bltcon0 = 0xfca + ((single->width%16) << 12);
    2316:	|  |  |         movea.l 140(sp),a0
    231a:	|  |  |         move.l (a0),d0
    231c:	|  |  |         andi.l #-2147483633,d0
    2322:	|  |  |     /-- bpl.s 232c <CstScaleSprite+0x53a>
    2324:	|  |  |     |   subq.l #1,d0
    2326:	|  |  |     |   moveq #-16,d1
    2328:	|  |  |     |   or.l d1,d0
    232a:	|  |  |     |   addq.l #1,d0
    232c:	|  |  |     \-> moveq #12,d2
    232e:	|  |  |         lsl.l d2,d0
    2330:	|  |  |         addi.l #4042,d0
    2336:	|  |  |         move.l d0,104(sp)
    bltcon1 = ((single->width%16) << 12);
    233a:	|  |  |         movea.l 140(sp),a0
    233e:	|  |  |         move.l (a0),d0
    2340:	|  |  |         andi.l #-2147483633,d0
    2346:	|  |  |     /-- bpl.s 2350 <CstScaleSprite+0x55e>
    2348:	|  |  |     |   subq.l #1,d0
    234a:	|  |  |     |   moveq #-16,d1
    234c:	|  |  |     |   or.l d1,d0
    234e:	|  |  |     |   addq.l #1,d0
    2350:	|  |  |     \-> moveq #12,d2
    2352:	|  |  |         lsl.l d2,d0
    2354:	|  |  |         move.l d0,100(sp)
    if( destinationtype == SCREEN)
    2358:	|  |  |         cmpi.w #1,12(sp)
    235e:	|  |  |  /----- bne.w 2426 <CstScaleSprite+0x634>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2362:	|  |  |  |      move.l 1b4de <CstCleanupQueueDrawBuffer>,64(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    236a:	|  |  |  |      moveq #20,d0
    236c:	|  |  |  |      move.l d0,60(sp)
    2370:	|  |  |  |      clr.l 56(sp)
    2374:	|  |  |  |      move.l 1b5a2 <SysBase>,d0
    237a:	|  |  |  |      movea.l d0,a6
    237c:	|  |  |  |      move.l 60(sp),d0
    2380:	|  |  |  |      move.l 56(sp),d1
    2384:	|  |  |  |      jsr -684(a6)
    2388:	|  |  |  |      move.l d0,52(sp)
    238c:	|  |  |  |      move.l 52(sp),d0
    2390:	|  |  |  |      move.l d0,1b4de <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    2396:	|  |  |  |      movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    239c:	|  |  |  |      move.l 64(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    23a2:	|  |  |  |      movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    23a8:	|  |  |  |      move.w 16(sp),d0
    23ac:	|  |  |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    23ae:	|  |  |  |      movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    23b4:	|  |  |  |      move.w 14(sp),d0
    23b8:	|  |  |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    23bc:	|  |  |  |      movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    23c2:	|  |  |  |      move.l 144(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    23c8:	|  |  |  |      movea.l 140(sp),a0
    23cc:	|  |  |  |      move.l (a0),d0
    23ce:	|  |  |  |      movea.l d0,a0
    23d0:	|  |  |  |      cmpa.w #0,a0
    23d4:	|  |  |  |  /-- bge.s 23da <CstScaleSprite+0x5e8>
    23d6:	|  |  |  |  |   lea 15(a0),a0
    23da:	|  |  |  |  \-> move.l a0,d0
    23dc:	|  |  |  |      asr.l #4,d0
    23de:	|  |  |  |      move.l d0,d0
    23e0:	|  |  |  |      movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    23e6:	|  |  |  |      add.w 128(sp),d0
    23ea:	|  |  |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    23ee:	|  |  |  |      movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    23f4:	|  |  |  |      move.l 88(sp),d0
    23f8:	|  |  |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    23fc:	|  |  |  |      move.w 16(sp),d0
    2400:	|  |  |  |  /-- bpl.s 2406 <CstScaleSprite+0x614>
    2402:	|  |  |  |  |   addi.w #15,d0
    2406:	|  |  |  |  \-> asr.w #4,d0
    2408:	|  |  |  |      movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    240e:	|  |  |  |      add.w d0,d0
    2410:	|  |  |  |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2414:	|  |  |  |      movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    241a:	|  |  |  |      move.l 96(sp),d0
    241e:	|  |  |  |      move.w d0,14(a0)
    2422:	|  +--|--|----- bra.w 2750 <CstScaleSprite+0x95e>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    2426:	|  |  |  \----> movea.l 140(sp),a0
    242a:	|  |  |         move.l (a0),d0
    242c:	|  |  |         movea.l d0,a0
    242e:	|  |  |         cmpa.w #0,a0
    2432:	|  |  |     /-- bge.s 2438 <CstScaleSprite+0x646>
    2434:	|  |  |     |   lea 15(a0),a0
    2438:	|  |  |     \-> move.l a0,d0
    243a:	|  |  |         asr.l #4,d0
    243c:	|  |  |         move.l d0,d0
    243e:	|  |  |         movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
    2444:	|  |  |         move.l a0,d1
    2446:	|  |  |         addq.l #2,d1
    2448:	|  |  |         move.l d1,1b4e6 <CstBackDropBufferApplyCursor>
    244e:	|  |  |         add.w 128(sp),d0
    2452:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    2454:	|  |  |         movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
    245a:	|  |  |         move.l a0,d0
    245c:	|  |  |         addq.l #2,d0
    245e:	|  |  |         move.l d0,1b4e6 <CstBackDropBufferApplyCursor>
    2464:	|  |  |         move.l 88(sp),d0
    2468:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    246a:	|  |  |         move.w 16(sp),d0
    246e:	|  |  |     /-- bpl.s 2474 <CstScaleSprite+0x682>
    2470:	|  |  |     |   addi.w #15,d0
    2474:	|  |  |     \-> asr.w #4,d0
    2476:	|  |  |         movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
    247c:	|  |  |         move.l a0,d1
    247e:	|  |  |         addq.l #2,d1
    2480:	|  |  |         move.l d1,1b4e6 <CstBackDropBufferApplyCursor>
    2486:	|  |  |         add.w d0,d0
    2488:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    248a:	|  |  |         movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
    2490:	|  |  |         move.l a0,d0
    2492:	|  |  |         addq.l #2,d0
    2494:	|  |  |         move.l d0,1b4e6 <CstBackDropBufferApplyCursor>
    249a:	|  |  |         move.l 96(sp),d0
    249e:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    24a0:	|  |  |         movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
    24a6:	|  |  |         move.l a0,d0
    24a8:	|  |  |         addq.l #2,d0
    24aa:	|  |  |         move.l d0,1b4e6 <CstBackDropBufferApplyCursor>
    24b0:	|  |  |         clr.w (a0)
    24b2:	|  +--|-------- bra.w 2750 <CstScaleSprite+0x95e>
    }
  } else { //Whole Sprite on Screen

    extrawords = 1;
    24b6:	|  |  \-------> move.w #1,130(sp)
    cutwordssource = 0;
    24bc:	|  |            clr.w 128(sp)
    cutmaskpixel = 0;
    24c0:	|  |            clr.w 126(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    24c4:	|  |            clr.w 124(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+ystartsrc*single->width/8;
    24c8:	|  |            movea.l 140(sp),a0
    24cc:	|  |            move.l 24(a0),d0
    24d0:	|  |            move.l d0,d2
    24d2:	|  |            movea.l 140(sp),a0
    24d6:	|  |            move.l (a0),d0
    24d8:	|  |        /-- bpl.s 24dc <CstScaleSprite+0x6ea>
    24da:	|  |        |   addq.l #7,d0
    24dc:	|  |        \-> asr.l #3,d0
    24de:	|  |            movea.l 140(sp),a0
    24e2:	|  |            move.l 4(a0),d1
    24e6:	|  |            move.l d1,-(sp)
    24e8:	|  |            move.l d0,-(sp)
    24ea:	|  |            jsr 16800 <__mulsi3>
    24f0:	|  |            addq.l #8,sp
    24f2:	|  |            move.l d0,d1
    24f4:	|  |            move.l d1,d0
    24f6:	|  |            add.l d0,d0
    24f8:	|  |            add.l d0,d0
    24fa:	|  |            add.l d1,d0
    24fc:	|  |            add.l d0,d2
    24fe:	|  |            movea.l 140(sp),a0
    2502:	|  |            move.l (a0),d0
    2504:	|  |            move.l 92(sp),-(sp)
    2508:	|  |            move.l d0,-(sp)
    250a:	|  |            jsr 16800 <__mulsi3>
    2510:	|  |            addq.l #8,sp
    2512:	|  |            lsr.l #3,d0
    2514:	|  |            move.l d2,d1
    2516:	|  |            add.l d0,d1
    2518:	|  |            move.l d1,120(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    251c:	|  |            movea.l 140(sp),a0
    2520:	|  |            move.l 24(a0),d0
    2524:	|  |            move.l d0,d2
    2526:	|  |            movea.l 140(sp),a0
    252a:	|  |            move.l (a0),d0
    252c:	|  |            move.l 92(sp),-(sp)
    2530:	|  |            move.l d0,-(sp)
    2532:	|  |            jsr 16800 <__mulsi3>
    2538:	|  |            addq.l #8,sp
    253a:	|  |            lsr.l #3,d0
    253c:	|  |            move.l d2,d1
    253e:	|  |            add.l d0,d1
    2540:	|  |            move.l d1,116(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2544:	|  |            move.l 1b4f6 <winWidth>,d0
    254a:	|  |            move.l 96(sp),-(sp)
    254e:	|  |            move.l d0,-(sp)
    2550:	|  |            jsr 16800 <__mulsi3>
    2556:	|  |            addq.l #8,sp
    2558:	|  |            lsr.l #3,d0
    255a:	|  |            move.l 132(sp),d1
    255e:	|  |            add.l d0,d1
    2560:	|  |            move.w 16(sp),d0
    2564:	|  |        /-- bpl.s 256a <CstScaleSprite+0x778>
    2566:	|  |        |   addi.w #15,d0
    256a:	|  |        \-> asr.w #4,d0
    256c:	|  |            movea.w d0,a0
    256e:	|  |            move.l a0,d0
    2570:	|  |            add.l a0,d0
    2572:	|  |            move.l d1,d2
    2574:	|  |            add.l d0,d2
    2576:	|  |            move.l d2,112(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    257a:	|  |            move.l 1b4f6 <winWidth>,d0
    2580:	|  |            move.l 96(sp),-(sp)
    2584:	|  |            move.l d0,-(sp)
    2586:	|  |            jsr 16800 <__mulsi3>
    258c:	|  |            addq.l #8,sp
    258e:	|  |            lsr.l #3,d0
    2590:	|  |            move.l 132(sp),d1
    2594:	|  |            add.l d0,d1
    2596:	|  |            move.w 16(sp),d0
    259a:	|  |        /-- bpl.s 25a0 <CstScaleSprite+0x7ae>
    259c:	|  |        |   addi.w #15,d0
    25a0:	|  |        \-> asr.w #4,d0
    25a2:	|  |            movea.w d0,a0
    25a4:	|  |            move.l a0,d0
    25a6:	|  |            add.l a0,d0
    25a8:	|  |            move.l d1,d2
    25aa:	|  |            add.l d0,d2
    25ac:	|  |            move.l d2,108(sp)
    bltcon0 = 0xfca + ((x%16) << 12);
    25b0:	|  |            move.w 16(sp),d0
    25b4:	|  |            andi.w #-32753,d0
    25b8:	|  |        /-- bpl.s 25c2 <CstScaleSprite+0x7d0>
    25ba:	|  |        |   subq.w #1,d0
    25bc:	|  |        |   ori.w #-16,d0
    25c0:	|  |        |   addq.w #1,d0
    25c2:	|  |        \-> ext.l d0
    25c4:	|  |            moveq #12,d1
    25c6:	|  |            lsl.l d1,d0
    25c8:	|  |            addi.l #4042,d0
    25ce:	|  |            move.l d0,104(sp)
    bltcon1 = ((x%16) << 12);
    25d2:	|  |            move.w 16(sp),d0
    25d6:	|  |            andi.w #-32753,d0
    25da:	|  |        /-- bpl.s 25e4 <CstScaleSprite+0x7f2>
    25dc:	|  |        |   subq.w #1,d0
    25de:	|  |        |   ori.w #-16,d0
    25e2:	|  |        |   addq.w #1,d0
    25e4:	|  |        \-> ext.l d0
    25e6:	|  |            moveq #12,d2
    25e8:	|  |            lsl.l d2,d0
    25ea:	|  |            move.l d0,100(sp)
    if( destinationtype == SCREEN)
    25ee:	|  |            cmpi.w #1,12(sp)
    25f4:	|  |     /----- bne.w 26c0 <CstScaleSprite+0x8ce>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    25f8:	|  |     |      move.l 1b4de <CstCleanupQueueDrawBuffer>,80(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    2600:	|  |     |      moveq #20,d0
    2602:	|  |     |      move.l d0,76(sp)
    2606:	|  |     |      clr.l 72(sp)
    260a:	|  |     |      move.l 1b5a2 <SysBase>,d0
    2610:	|  |     |      movea.l d0,a6
    2612:	|  |     |      move.l 76(sp),d0
    2616:	|  |     |      move.l 72(sp),d1
    261a:	|  |     |      jsr -684(a6)
    261e:	|  |     |      move.l d0,68(sp)
    2622:	|  |     |      move.l 68(sp),d0
    2626:	|  |     |      move.l d0,1b4de <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    262c:	|  |     |      movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    2632:	|  |     |      move.l 80(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    2638:	|  |     |      movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    263e:	|  |     |      move.w 16(sp),d0
    2642:	|  |     |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    2644:	|  |     |      movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    264a:	|  |     |      move.w 14(sp),d0
    264e:	|  |     |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    2652:	|  |     |      movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    2658:	|  |     |      move.l 144(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    265e:	|  |     |      movea.l 140(sp),a0
    2662:	|  |     |      move.l (a0),d0
    2664:	|  |     |      movea.l d0,a0
    2666:	|  |     |      cmpa.w #0,a0
    266a:	|  |     |  /-- bge.s 2670 <CstScaleSprite+0x87e>
    266c:	|  |     |  |   lea 15(a0),a0
    2670:	|  |     |  \-> move.l a0,d0
    2672:	|  |     |      asr.l #4,d0
    2674:	|  |     |      move.l d0,d0
    2676:	|  |     |      add.w 128(sp),d0
    267a:	|  |     |      movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    2680:	|  |     |      add.w 130(sp),d0
    2684:	|  |     |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    2688:	|  |     |      movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    268e:	|  |     |      move.l 88(sp),d0
    2692:	|  |     |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    2696:	|  |     |      move.w 16(sp),d0
    269a:	|  |     |  /-- bpl.s 26a0 <CstScaleSprite+0x8ae>
    269c:	|  |     |  |   addi.w #15,d0
    26a0:	|  |     |  \-> asr.w #4,d0
    26a2:	|  |     |      movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    26a8:	|  |     |      add.w d0,d0
    26aa:	|  |     |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    26ae:	|  |     |      movea.l 1b4de <CstCleanupQueueDrawBuffer>,a0
    26b4:	|  |     |      move.l 96(sp),d0
    26b8:	|  |     |      move.w d0,14(a0)
    26bc:	|  +-----|----- bra.w 2750 <CstScaleSprite+0x95e>
    } else
    {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    26c0:	|  |     \----> movea.l 140(sp),a0
    26c4:	|  |            move.l (a0),d0
    26c6:	|  |            movea.l d0,a0
    26c8:	|  |            cmpa.w #0,a0
    26cc:	|  |        /-- bge.s 26d2 <CstScaleSprite+0x8e0>
    26ce:	|  |        |   lea 15(a0),a0
    26d2:	|  |        \-> move.l a0,d0
    26d4:	|  |            asr.l #4,d0
    26d6:	|  |            move.l d0,d0
    26d8:	|  |            add.w 128(sp),d0
    26dc:	|  |            movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
    26e2:	|  |            move.l a0,d1
    26e4:	|  |            addq.l #2,d1
    26e6:	|  |            move.l d1,1b4e6 <CstBackDropBufferApplyCursor>
    26ec:	|  |            add.w 130(sp),d0
    26f0:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    26f2:	|  |            movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
    26f8:	|  |            move.l a0,d0
    26fa:	|  |            addq.l #2,d0
    26fc:	|  |            move.l d0,1b4e6 <CstBackDropBufferApplyCursor>
    2702:	|  |            move.l 88(sp),d0
    2706:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2708:	|  |            move.w 16(sp),d0
    270c:	|  |        /-- bpl.s 2712 <CstScaleSprite+0x920>
    270e:	|  |        |   addi.w #15,d0
    2712:	|  |        \-> asr.w #4,d0
    2714:	|  |            movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
    271a:	|  |            move.l a0,d1
    271c:	|  |            addq.l #2,d1
    271e:	|  |            move.l d1,1b4e6 <CstBackDropBufferApplyCursor>
    2724:	|  |            add.w d0,d0
    2726:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2728:	|  |            movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
    272e:	|  |            move.l a0,d0
    2730:	|  |            addq.l #2,d0
    2732:	|  |            move.l d0,1b4e6 <CstBackDropBufferApplyCursor>
    2738:	|  |            move.l 96(sp),d0
    273c:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    273e:	|  |            movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
    2744:	|  |            move.l a0,d0
    2746:	|  |            addq.l #2,d0
    2748:	|  |            move.l d0,1b4e6 <CstBackDropBufferApplyCursor>
    274e:	|  |            clr.w (a0)

 /*if(person && person->samePosCount > 3) {
    return;
  }*/

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    2750:	|  \----------> moveq #0,d0
    2752:	|               move.w 126(sp),d0
    2756:	|               moveq #0,d1
    2758:	|               not.w d1
    275a:	|               asr.l d0,d1
    275c:	|               move.w d1,34(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2760:	|               moveq #0,d1
    2762:	|               move.w 128(sp),d1
    2766:	|               moveq #0,d0
    2768:	|               move.w 130(sp),d0
    276c:	|               sub.l d0,d1
    276e:	|               move.l d1,d0
    2770:	|               add.w d0,d0
    2772:	|               move.w d0,32(sp)
  WORD bltbmod = cutwordssource*2-(extrawords*2); //Jump to next line
    2776:	|               moveq #0,d1
    2778:	|               move.w 128(sp),d1
    277c:	|               moveq #0,d0
    277e:	|               move.w 130(sp),d0
    2782:	|               sub.l d0,d1
    2784:	|               move.l d1,d0
    2786:	|               add.w d0,d0
    2788:	|               move.w d0,30(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    278c:	|               move.l 1b4f6 <winWidth>,d0
    2792:	|               lsr.l #3,d0
    2794:	|               move.l d0,d1
    2796:	|               movea.l 140(sp),a0
    279a:	|               move.l (a0),d0
    279c:	|           /-- bpl.s 27a0 <CstScaleSprite+0x9ae>
    279e:	|           |   addq.l #7,d0
    27a0:	|           \-> asr.l #3,d0
    27a2:	|               move.l d0,d0
    27a4:	|               sub.w d0,d1
    27a6:	|               move.w 128(sp),d0
    27aa:	|               sub.w 130(sp),d0
    27ae:	|               add.w d0,d0
    27b0:	|               add.w d1,d0
    27b2:	|               move.w d0,28(sp)
  WORD bltdmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    27b6:	|               move.l 1b4f6 <winWidth>,d0
    27bc:	|               lsr.l #3,d0
    27be:	|               move.l d0,d1
    27c0:	|               movea.l 140(sp),a0
    27c4:	|               move.l (a0),d0
    27c6:	|           /-- bpl.s 27ca <CstScaleSprite+0x9d8>
    27c8:	|           |   addq.l #7,d0
    27ca:	|           \-> asr.l #3,d0
    27cc:	|               move.l d0,d0
    27ce:	|               sub.w d0,d1
    27d0:	|               move.w 128(sp),d0
    27d4:	|               sub.w 130(sp),d0
    27d8:	|               add.w d0,d0
    27da:	|               add.w d1,d0
    27dc:	|               move.w d0,26(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    27e0:	|               move.l #14675968,22(sp)
  WaitBlit();
    27e8:	|               move.l 1b5ae <GfxBase>,d0
    27ee:	|               movea.l d0,a6
    27f0:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    27f4:	|               movea.l 22(sp),a0
    27f8:	|               move.w 34(sp),68(a0)
  custom->bltalwm = bltalwm;
    27fe:	|               movea.l 22(sp),a0
    2802:	|               move.w 124(sp),70(a0)
  custom->bltamod = bltamod;
    2808:	|               move.w 32(sp),d0
    280c:	|               movea.l 22(sp),a0
    2810:	|               move.w d0,100(a0)
  custom->bltbmod = bltbmod;
    2814:	|               move.w 30(sp),d0
    2818:	|               movea.l 22(sp),a0
    281c:	|               move.w d0,98(a0)
  custom->bltcmod = bltcmod;
    2820:	|               move.w 28(sp),d0
    2824:	|               movea.l 22(sp),a0
    2828:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    282c:	|               move.w 26(sp),d0
    2830:	|               movea.l 22(sp),a0
    2834:	|               move.w d0,102(a0)
  custom->bltcon0 = bltcon0;
    2838:	|               move.l 104(sp),d0
    283c:	|               movea.l 22(sp),a0
    2840:	|               move.w d0,64(a0)
  custom->bltcon1 = bltcon1;  
    2844:	|               move.l 100(sp),d0
    2848:	|               movea.l 22(sp),a0
    284c:	|               move.w d0,66(a0)

  UWORD bltbptplus = (single->width >> 3)*single->height;
    2850:	|               movea.l 140(sp),a0
    2854:	|               move.l (a0),d0
    2856:	|               asr.l #3,d0
    2858:	|               move.l d0,d1
    285a:	|               movea.l 140(sp),a0
    285e:	|               move.l 4(a0),d0
    2862:	|               move.l d0,d0
    2864:	|               move.w d1,d2
    2866:	|               muls.w d0,d2
    2868:	|               move.w d2,20(sp)
  UWORD bltcptplus = winWidth/8*winHeight;
    286c:	|               move.l 1b4f6 <winWidth>,d0
    2872:	|               lsr.l #3,d0
    2874:	|               move.l d0,d1
    2876:	|               move.l 1b4fa <winHeight>,d0
    287c:	|               move.l d0,d0
    287e:	|               move.w d1,d2
    2880:	|               muls.w d0,d2
    2882:	|               move.w d2,18(sp)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2886:	|               clr.l 84(sp)
    288a:	|        /----- bra.w 291e <CstScaleSprite+0xb2c>
  {
    custom->bltapt = (APTR) bltapt;
    288e:	|     /--|----> move.l 120(sp),d0
    2892:	|     |  |      movea.l 22(sp),a0
    2896:	|     |  |      move.l d0,80(a0)
    custom->bltbpt = (APTR) bltbpt;
    289a:	|     |  |      move.l 116(sp),d0
    289e:	|     |  |      movea.l 22(sp),a0
    28a2:	|     |  |      move.l d0,76(a0)
    custom->bltcpt = (APTR) bltcpt;
    28a6:	|     |  |      move.l 112(sp),d0
    28aa:	|     |  |      movea.l 22(sp),a0
    28ae:	|     |  |      move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    28b2:	|     |  |      move.l 108(sp),d0
    28b6:	|     |  |      movea.l 22(sp),a0
    28ba:	|     |  |      move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    28be:	|     |  |      move.l 88(sp),d0
    28c2:	|     |  |      move.w d0,d1
    28c4:	|     |  |      lsl.w #6,d1
    28c6:	|     |  |      movea.l 140(sp),a0
    28ca:	|     |  |      move.l (a0),d0
    28cc:	|     |  |      movea.l d0,a0
    28ce:	|     |  |      cmpa.w #0,a0
    28d2:	|     |  |  /-- bge.s 28d8 <CstScaleSprite+0xae6>
    28d4:	|     |  |  |   lea 15(a0),a0
    28d8:	|     |  |  \-> move.l a0,d0
    28da:	|     |  |      asr.l #4,d0
    28dc:	|     |  |      move.l d0,d0
    28de:	|     |  |      add.w d1,d0
    28e0:	|     |  |      sub.w 128(sp),d0
    28e4:	|     |  |      add.w 130(sp),d0
    28e8:	|     |  |      movea.l 22(sp),a0
    28ec:	|     |  |      move.w d0,88(a0)
    bltbpt += bltbptplus;
    28f0:	|     |  |      moveq #0,d0
    28f2:	|     |  |      move.w 20(sp),d0
    28f6:	|     |  |      add.l d0,116(sp)
    bltcpt += bltcptplus;
    28fa:	|     |  |      moveq #0,d0
    28fc:	|     |  |      move.w 18(sp),d0
    2900:	|     |  |      add.l d0,112(sp)
    bltdpt += bltcptplus;
    2904:	|     |  |      moveq #0,d0
    2906:	|     |  |      move.w 18(sp),d0
    290a:	|     |  |      add.l d0,108(sp)
    WaitBlit();
    290e:	|     |  |      move.l 1b5ae <GfxBase>,d0
    2914:	|     |  |      movea.l d0,a6
    2916:	|     |  |      jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    291a:	|     |  |      addq.l #1,84(sp)
    291e:	|     |  \----> moveq #4,d0
    2920:	|     |         cmp.l 84(sp),d0
    2924:	|     \-------- bge.w 288e <CstScaleSprite+0xa9c>
  }   
}
    2928:	\-------------> movem.l (sp)+,d2-d3/a6
    292c:	                lea 124(sp),sp
    2930:	                rts

00002932 <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    2932:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    2934:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    293a:	move.l 8(sp),d0
    293e:	movea.l (sp),a0
    2940:	move.l d0,128(a0)
}
    2944:	nop
    2946:	addq.l #4,sp
    2948:	rts

0000294a <CstSwapBuffer>:

void CstSwapBuffer( ) {
    294a:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    294e:	move.l 1b4d2 <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    2956:	move.l 1b4d6 <CstDrawBuffer>,d0
    295c:	move.l d0,1b4d2 <CstViewBuffer>
  CstDrawBuffer = tmp;
    2962:	move.l 16(sp),1b4d6 <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    296a:	move.l 1b4da <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    2972:	move.l 1b4de <CstCleanupQueueDrawBuffer>,d0
    2978:	move.l d0,1b4da <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    297e:	move.l 12(sp),1b4de <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    2986:	move.l 1b4cc <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    298e:	move.l 1b4d2 <CstViewBuffer>,d0
    2994:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    2998:	move.l 4(sp),d0
    299c:	clr.w d0
    299e:	swap d0
    29a0:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    29a4:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    29a8:	movea.w #118,a0
    29ac:	adda.l 8(sp),a0
    29b0:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    29b2:	movea.w #114,a0
    29b6:	adda.l 8(sp),a0
    29ba:	move.w 2(sp),(a0)

  ptr +=  40*256;
    29be:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    29c6:	move.l 4(sp),d0
    29ca:	clr.w d0
    29cc:	swap d0
    29ce:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    29d2:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    29d6:	movea.w #126,a0
    29da:	adda.l 8(sp),a0
    29de:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    29e0:	movea.w #122,a0
    29e4:	adda.l 8(sp),a0
    29e8:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    29ec:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    29f4:	move.l 4(sp),d0
    29f8:	clr.w d0
    29fa:	swap d0
    29fc:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    2a00:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    2a04:	movea.l 8(sp),a0
    2a08:	lea 134(a0),a0
    2a0c:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    2a0e:	movea.l 8(sp),a0
    2a12:	lea 130(a0),a0
    2a16:	move.w 2(sp),(a0)

  ptr +=  40*256;
    2a1a:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    2a22:	move.l 4(sp),d0
    2a26:	clr.w d0
    2a28:	swap d0
    2a2a:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    2a2e:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    2a32:	movea.l 8(sp),a0
    2a36:	lea 142(a0),a0
    2a3a:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    2a3c:	movea.l 8(sp),a0
    2a40:	lea 138(a0),a0
    2a44:	move.w 2(sp),(a0)

  ptr +=  40*256;
    2a48:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    2a50:	move.l 4(sp),d0
    2a54:	clr.w d0
    2a56:	swap d0
    2a58:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    2a5c:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    2a60:	movea.l 8(sp),a0
    2a64:	lea 150(a0),a0
    2a68:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    2a6a:	movea.l 8(sp),a0
    2a6e:	lea 146(a0),a0
    2a72:	move.w 2(sp),(a0)

}
    2a76:	nop
    2a78:	lea 20(sp),sp
    2a7c:	rts

00002a7e <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    2a7e:	          lea -56(sp),sp
    2a82:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    2a84:	          pea 16c2e <PutChar+0x318>
    2a8a:	          jsr 15fc6 <KPrintF>
    2a90:	          addq.l #4,sp

  width = width / 8;
    2a92:	          move.l 64(sp),d0
    2a96:	      /-- bpl.s 2a9a <CstReserveBackdrop+0x1c>
    2a98:	      |   addq.l #7,d0
    2a9a:	      \-> asr.l #3,d0
    2a9c:	          move.l d0,64(sp)

  if( width < 40) 
    2aa0:	          moveq #39,d0
    2aa2:	          cmp.l 64(sp),d0
    2aa6:	      /-- blt.s 2abc <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    2aa8:	      |   pea 16c48 <PutChar+0x332>
    2aae:	      |   jsr 15fc6 <KPrintF>
    2ab4:	      |   addq.l #4,sp
    return FALSE;
    2ab6:	      |   clr.w d0
    2ab8:	/-----|-- bra.w 2d78 <CstReserveBackdrop+0x2fa>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    2abc:	|     \-> pea 16c86 <PutChar+0x370>
    2ac2:	|         jsr 15fc6 <KPrintF>
    2ac8:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    2aca:	|         move.l 64(sp),-(sp)
    2ace:	|         jsr fce <CstCreateCopperlist>
    2ad4:	|         addq.l #4,sp
    2ad6:	|         move.l d0,1b4cc <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    2adc:	|         pea 16ca6 <PutChar+0x390>
    2ae2:	|         jsr 15fc6 <KPrintF>
    2ae8:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    2aea:	|         move.l 64(sp),d1
    2aee:	|         move.l 68(sp),d0
    2af2:	|         muls.w d1,d0
    2af4:	|         move.w d0,1b4c2 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    2afa:	|         move.w 1b4c2 <CstBackdropSizePlane>,d1
    2b00:	|         move.w d1,d0
    2b02:	|         add.w d0,d0
    2b04:	|         add.w d0,d0
    2b06:	|         add.w d1,d0
    2b08:	|         move.w d0,1b4c0 <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    2b0e:	|         move.w 1b4c0 <CstBackdropSize>,d0
    2b14:	|         move.w d0,d0
    2b16:	|         andi.l #65535,d0
    2b1c:	|         move.l d0,48(sp)
    2b20:	|         moveq #2,d1
    2b22:	|         move.l d1,44(sp)
    2b26:	|         move.l 1b5a2 <SysBase>,d0
    2b2c:	|         movea.l d0,a6
    2b2e:	|         move.l 48(sp),d0
    2b32:	|         move.l 44(sp),d1
    2b36:	|         jsr -684(a6)
    2b3a:	|         move.l d0,40(sp)
    2b3e:	|         move.l 40(sp),d0
    2b42:	|         move.l d0,1b4c4 <CstBackDrop>
  if( !CstBackDrop)
    2b48:	|         move.l 1b4c4 <CstBackDrop>,d0
    2b4e:	|     /-- bne.s 2b64 <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    2b50:	|     |   pea 16ccd <PutChar+0x3b7>
    2b56:	|     |   jsr 15fc6 <KPrintF>
    2b5c:	|     |   addq.l #4,sp
    return FALSE;  
    2b5e:	|     |   clr.w d0
    2b60:	+-----|-- bra.w 2d78 <CstReserveBackdrop+0x2fa>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    2b64:	|     \-> pea 16d05 <PutChar+0x3ef>
    2b6a:	|         jsr 15fc6 <KPrintF>
    2b70:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    2b72:	|         move.l 1b4c4 <CstBackDrop>,56(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    2b7a:	|         clr.l 52(sp)
    2b7e:	|     /-- bra.s 2b94 <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    2b80:	|  /--|-> move.l 56(sp),d0
    2b84:	|  |  |   move.l d0,d1
    2b86:	|  |  |   addq.l #4,d1
    2b88:	|  |  |   move.l d1,56(sp)
    2b8c:	|  |  |   movea.l d0,a0
    2b8e:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    2b90:	|  |  |   addq.l #1,52(sp)
    2b94:	|  |  \-> move.w 1b4c0 <CstBackdropSize>,d0
    2b9a:	|  |      lsr.w #2,d0
    2b9c:	|  |      move.w d0,d0
    2b9e:	|  |      andi.l #65535,d0
    2ba4:	|  |      cmp.l 52(sp),d0
    2ba8:	|  \----- bgt.s 2b80 <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    2baa:	|         move.w 1b4c0 <CstBackdropSize>,d0
    2bb0:	|         move.w d0,d0
    2bb2:	|         andi.l #65535,d0
    2bb8:	|         move.l 64(sp),d1
    2bbc:	|         add.l d1,d1
    2bbe:	|         add.l d1,d0
    2bc0:	|         move.l d0,36(sp)
    2bc4:	|         moveq #2,d0
    2bc6:	|         move.l d0,32(sp)
    2bca:	|         move.l 1b5a2 <SysBase>,d0
    2bd0:	|         movea.l d0,a6
    2bd2:	|         move.l 36(sp),d0
    2bd6:	|         move.l 32(sp),d1
    2bda:	|         jsr -684(a6)
    2bde:	|         move.l d0,28(sp)
    2be2:	|         move.l 28(sp),d0
    2be6:	|         move.l d0,1b4d6 <CstDrawBuffer>
  if( !CstDrawBuffer)
    2bec:	|         move.l 1b4d6 <CstDrawBuffer>,d0
    2bf2:	|     /-- bne.s 2c08 <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    2bf4:	|     |   pea 16d2b <PutChar+0x415>
    2bfa:	|     |   jsr 15fc6 <KPrintF>
    2c00:	|     |   addq.l #4,sp
    return FALSE;  
    2c02:	|     |   clr.w d0
    2c04:	+-----|-- bra.w 2d78 <CstReserveBackdrop+0x2fa>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    2c08:	|     \-> pea 16d65 <PutChar+0x44f>
    2c0e:	|         jsr 15fc6 <KPrintF>
    2c14:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 1000*5*2,MEMF_ANY);
    2c16:	|         move.l #10000,24(sp)
    2c1e:	|         clr.l 20(sp)
    2c22:	|         move.l 1b5a2 <SysBase>,d0
    2c28:	|         movea.l d0,a6
    2c2a:	|         move.l 24(sp),d0
    2c2e:	|         move.l 20(sp),d1
    2c32:	|         jsr -684(a6)
    2c36:	|         move.l d0,16(sp)
    2c3a:	|         move.l 16(sp),d0
    2c3e:	|         move.l d0,1b4e2 <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    2c44:	|         move.l 1b4e2 <CstBackDropBufferApplyStart>,d0
    2c4a:	|     /-- bne.s 2c60 <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    2c4c:	|     |   pea 16d8d <PutChar+0x477>
    2c52:	|     |   jsr 15fc6 <KPrintF>
    2c58:	|     |   addq.l #4,sp
    return FALSE;  
    2c5a:	|     |   clr.w d0
    2c5c:	+-----|-- bra.w 2d78 <CstReserveBackdrop+0x2fa>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    2c60:	|     \-> move.l 1b4e2 <CstBackDropBufferApplyStart>,d0
    2c66:	|         move.l d0,1b4e6 <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    2c6c:	|         movea.l 1b4e2 <CstBackDropBufferApplyStart>,a0
    2c72:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    2c74:	|         movea.l 1b4e2 <CstBackDropBufferApplyStart>,a0
    2c7a:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    2c7c:	|         move.w 1b4c0 <CstBackdropSize>,d0
    2c82:	|         move.w d0,d0
    2c84:	|         andi.l #65535,d0
    2c8a:	|         move.l 64(sp),d1
    2c8e:	|         add.l d1,d1
    2c90:	|         add.l d1,d0
    2c92:	|         move.l d0,12(sp)
    2c96:	|         moveq #2,d1
    2c98:	|         move.l d1,8(sp)
    2c9c:	|         move.l 1b5a2 <SysBase>,d0
    2ca2:	|         movea.l d0,a6
    2ca4:	|         move.l 12(sp),d0
    2ca8:	|         move.l 8(sp),d1
    2cac:	|         jsr -684(a6)
    2cb0:	|         move.l d0,4(sp)
    2cb4:	|         move.l 4(sp),d0
    2cb8:	|         move.l d0,1b4d2 <CstViewBuffer>
  if( !CstViewBuffer)
    2cbe:	|         move.l 1b4d2 <CstViewBuffer>,d0
    2cc4:	|     /-- bne.s 2cda <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    2cc6:	|     |   pea 16dd8 <PutChar+0x4c2>
    2ccc:	|     |   jsr 15fc6 <KPrintF>
    2cd2:	|     |   addq.l #4,sp
    return FALSE;  
    2cd4:	|     |   clr.w d0
    2cd6:	+-----|-- bra.w 2d78 <CstReserveBackdrop+0x2fa>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    2cda:	|     \-> pea 16e12 <PutChar+0x4fc>
    2ce0:	|         jsr 15fc6 <KPrintF>
    2ce6:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    2ce8:	|         move.l 1b4d6 <CstDrawBuffer>,d1
    2cee:	|         move.l 64(sp),d0
    2cf2:	|     /-- bpl.s 2cf6 <CstReserveBackdrop+0x278>
    2cf4:	|     |   addq.l #3,d0
    2cf6:	|     \-> asr.l #2,d0
    2cf8:	|         add.l d0,d0
    2cfa:	|         add.l d0,d0
    2cfc:	|         add.l d1,d0
    2cfe:	|         move.l d0,1b4d6 <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    2d04:	|         move.l 1b4d2 <CstViewBuffer>,d1
    2d0a:	|         move.l 64(sp),d0
    2d0e:	|     /-- bpl.s 2d12 <CstReserveBackdrop+0x294>
    2d10:	|     |   addq.l #3,d0
    2d12:	|     \-> asr.l #2,d0
    2d14:	|         add.l d0,d0
    2d16:	|         add.l d0,d0
    2d18:	|         add.l d1,d0
    2d1a:	|         move.l d0,1b4d2 <CstViewBuffer>
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    2d20:	|         move.l 1b4cc <CstCopperList>,d0
    2d26:	|     /-- beq.s 2d38 <CstReserveBackdrop+0x2ba>
    2d28:	|     |   move.l 1b4d6 <CstDrawBuffer>,d0
    2d2e:	|     +-- beq.s 2d38 <CstReserveBackdrop+0x2ba>
    2d30:	|     |   move.l 1b4d2 <CstViewBuffer>,d0
    2d36:	|  /--|-- bne.s 2d4a <CstReserveBackdrop+0x2cc>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    2d38:	|  |  \-> pea 16e3a <PutChar+0x524>
    2d3e:	|  |      jsr 15fc6 <KPrintF>
    2d44:	|  |      addq.l #4,sp
    return FALSE;
    2d46:	|  |      clr.w d0
    2d48:	+--|----- bra.s 2d78 <CstReserveBackdrop+0x2fa>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    2d4a:	|  \----> pea 16e67 <PutChar+0x551>
    2d50:	|         jsr 15fc6 <KPrintF>
    2d56:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    2d58:	|         move.l 1b4cc <CstCopperList>,d0
    2d5e:	|         move.l d0,-(sp)
    2d60:	|         jsr 2932 <CstSetCl>
    2d66:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    2d68:	|         pea 16e8e <PutChar+0x578>
    2d6e:	|         jsr 15fc6 <KPrintF>
    2d74:	|         addq.l #4,sp
  return TRUE;
    2d76:	|         moveq #1,d0

}
    2d78:	\-------> movea.l (sp)+,a6
    2d7a:	          lea 56(sp),sp
    2d7e:	          rts

00002d80 <CstUnfreeze>:

void CstUnfreeze() {
    2d80:	       lea -24(sp),sp
    2d84:	       move.l a6,-(sp)
    2d86:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    2d88:	       pea 16eb1 <PutChar+0x59b>
    2d8e:	       jsr 15fc6 <KPrintF>
    2d94:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    2d96:	       move.l 1b4f6 <winWidth>,d0
    2d9c:	       lsr.l #3,d0
    2d9e:	       move.l d0,d1
    2da0:	       move.l 1b4fa <winHeight>,d0
    2da6:	       move.l d0,d0
    2da8:	       muls.w d0,d1
    2daa:	       move.w d1,d0
    2dac:	       add.w d0,d0
    2dae:	       add.w d0,d0
    2db0:	       move.w d0,d2
    2db2:	       add.w d1,d2
    2db4:	       move.w d2,18(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    2db8:	       move.l #14675968,14(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    2dc0:	       move.l 1b4c8 <CstBackDropBackup>,28(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    2dc8:	       move.l 1b4c4 <CstBackDrop>,24(sp)
  for(int i=0;i<size/4;i++) 
    2dd0:	       clr.l 20(sp)
    2dd4:	   /-- bra.s 2dfa <CstUnfreeze+0x7a>
  {
    *dst++ = *src++;
    2dd6:	/--|-> move.l 28(sp),d1
    2dda:	|  |   move.l d1,d0
    2ddc:	|  |   addq.l #4,d0
    2dde:	|  |   move.l d0,28(sp)
    2de2:	|  |   move.l 24(sp),d0
    2de6:	|  |   move.l d0,d2
    2de8:	|  |   addq.l #4,d2
    2dea:	|  |   move.l d2,24(sp)
    2dee:	|  |   movea.l d1,a0
    2df0:	|  |   move.l (a0),d1
    2df2:	|  |   movea.l d0,a0
    2df4:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    2df6:	|  |   addq.l #1,20(sp)
    2dfa:	|  \-> move.w 18(sp),d0
    2dfe:	|      lsr.w #2,d0
    2e00:	|      move.w d0,d0
    2e02:	|      andi.l #65535,d0
    2e08:	|      cmp.l 20(sp),d0
    2e0c:	\----- bgt.s 2dd6 <CstUnfreeze+0x56>
  }

  CstApplyBackDropCounter = 2;
    2e0e:	       move.w #2,1b4d0 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    2e16:	       move.l 1b4f6 <winWidth>,d0
    2e1c:	       lsr.l #4,d0
    2e1e:	       movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
    2e24:	       move.l a0,d1
    2e26:	       addq.l #2,d1
    2e28:	       move.l d1,1b4e6 <CstBackDropBufferApplyCursor>
    2e2e:	       move.l d0,d0
    2e30:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    2e32:	       move.l 1b4fa <winHeight>,d0
    2e38:	       movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
    2e3e:	       move.l a0,d1
    2e40:	       addq.l #2,d1
    2e42:	       move.l d1,1b4e6 <CstBackDropBufferApplyCursor>
    2e48:	       move.l d0,d0
    2e4a:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2e4c:	       movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
    2e52:	       move.l a0,d0
    2e54:	       addq.l #2,d0
    2e56:	       move.l d0,1b4e6 <CstBackDropBufferApplyCursor>
    2e5c:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2e5e:	       movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
    2e64:	       move.l a0,d0
    2e66:	       addq.l #2,d0
    2e68:	       move.l d0,1b4e6 <CstBackDropBufferApplyCursor>
    2e6e:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2e70:	       movea.l 1b4e6 <CstBackDropBufferApplyCursor>,a0
    2e76:	       move.l a0,d0
    2e78:	       addq.l #2,d0
    2e7a:	       move.l d0,1b4e6 <CstBackDropBufferApplyCursor>
    2e80:	       clr.w (a0)
  
  if( !CstBackDropBackup) {
    2e82:	       move.l 1b4c8 <CstBackDropBackup>,d0
    2e88:	   /-- bne.s 2ea2 <CstUnfreeze+0x122>
    FreeVec( CstBackDropBackup);
    2e8a:	   |   move.l 1b4c8 <CstBackDropBackup>,10(sp)
    2e92:	   |   move.l 1b5a2 <SysBase>,d0
    2e98:	   |   movea.l d0,a6
    2e9a:	   |   movea.l 10(sp),a1
    2e9e:	   |   jsr -690(a6)
  }

  KPrintF("CstFreeze: Finished");
    2ea2:	   \-> pea 16ada <PutChar+0x1c4>
    2ea8:	       jsr 15fc6 <KPrintF>
    2eae:	       addq.l #4,sp

}
    2eb0:	       nop
    2eb2:	       move.l (sp)+,d2
    2eb4:	       movea.l (sp)+,a6
    2eb6:	       lea 24(sp),sp
    2eba:	       rts

00002ebc <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    2ebc:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    2ec0:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    2ec4:	       tst.l 24(sp)
    2ec8:	   /-- bge.s 2ece <drawLine+0x12>
    2eca:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    2ece:	   \-> tst.l 28(sp)
    2ed2:	   /-- bge.s 2ed8 <drawLine+0x1c>
    2ed4:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    2ed8:	   \-> tst.l 32(sp)
    2edc:	   /-- bge.s 2ee2 <drawLine+0x26>
    2ede:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    2ee2:	   \-> tst.l 36(sp)
    2ee6:	   /-- bge.s 2eec <drawLine+0x30>
    2ee8:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    2eec:	   \-> move.l 1b696 <sceneWidth>,d0
    2ef2:	       cmp.l 24(sp),d0
    2ef6:	   /-- bge.s 2f06 <drawLine+0x4a>
    2ef8:	   |   move.l 1b696 <sceneWidth>,d0
    2efe:	   |   move.l d0,d1
    2f00:	   |   subq.l #1,d1
    2f02:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    2f06:	   \-> move.l 1b696 <sceneWidth>,d0
    2f0c:	       cmp.l 32(sp),d0
    2f10:	   /-- bge.s 2f20 <drawLine+0x64>
    2f12:	   |   move.l 1b696 <sceneWidth>,d0
    2f18:	   |   move.l d0,d1
    2f1a:	   |   subq.l #1,d1
    2f1c:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    2f20:	   \-> move.l 1b69a <sceneHeight>,d0
    2f26:	       cmp.l 28(sp),d0
    2f2a:	   /-- bge.s 2f3a <drawLine+0x7e>
    2f2c:	   |   move.l 1b69a <sceneHeight>,d0
    2f32:	   |   move.l d0,d1
    2f34:	   |   subq.l #1,d1
    2f36:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    2f3a:	   \-> move.l 1b69a <sceneHeight>,d0
    2f40:	       cmp.l 36(sp),d0
    2f44:	   /-- bge.s 2f54 <drawLine+0x98>
    2f46:	   |   move.l 1b69a <sceneHeight>,d0
    2f4c:	   |   move.l d0,d1
    2f4e:	   |   subq.l #1,d1
    2f50:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    2f54:	   \-> move.l 24(sp),d0
    2f58:	       cmp.l 32(sp),d0
    2f5c:	/----- ble.s 2f78 <drawLine+0xbc>
		x = x2; 
    2f5e:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    2f64:	|      tst.w 10(sp)
    2f68:	|      seq d0
    2f6a:	|      neg.b d0
    2f6c:	|      move.b d0,d0
    2f6e:	|      andi.w #255,d0
    2f72:	|      move.w d0,10(sp)
    2f76:	|  /-- bra.s 2f7e <drawLine+0xc2>
	} else x = x1;
    2f78:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    2f7e:	   \-> move.l 28(sp),d1
    2f82:	       cmp.l 36(sp),d1
    2f86:	/----- ble.s 2fa2 <drawLine+0xe6>
		y = y2; 
    2f88:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    2f8e:	|      tst.w 10(sp)
    2f92:	|      seq d0
    2f94:	|      neg.b d0
    2f96:	|      move.b d0,d0
    2f98:	|      andi.w #255,d0
    2f9c:	|      move.w d0,10(sp)
    2fa0:	|  /-- bra.s 2fa8 <drawLine+0xec>
	} else y = y1;	
    2fa2:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    2fa8:	   \-> move.l 32(sp),d0
    2fac:	       sub.l 24(sp),d0
    2fb0:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    2fb4:	       move.l 6(sp),d0
    2fb8:	   /-- bpl.s 2fbc <drawLine+0x100>
    2fba:	   |   neg.l d0
    2fbc:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    2fc0:	       move.l 36(sp),d1
    2fc4:	       sub.l 28(sp),d1
    2fc8:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    2fcc:	       move.l 2(sp),d0
    2fd0:	   /-- bpl.s 2fd4 <drawLine+0x118>
    2fd2:	   |   neg.l d0
    2fd4:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    2fd8:	       tst.l 6(sp)
    2fdc:	   /-- bne.s 3000 <drawLine+0x144>
		diffX = 1;
    2fde:	   |   moveq #1,d0
    2fe0:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    2fe4:	   |   move.l 1b696 <sceneWidth>,d0
    2fea:	   |   subq.l #1,d0
    2fec:	   |   cmp.l 16(sp),d0
    2ff0:	   +-- bne.s 3000 <drawLine+0x144>
    2ff2:	   |   move.l 1b696 <sceneWidth>,d0
    2ff8:	   |   move.l d0,d1
    2ffa:	   |   subq.l #2,d1
    2ffc:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    3000:	   \-> tst.l 2(sp)
    3004:	   /-- bne.s 3028 <drawLine+0x16c>
		diffY = 1;
    3006:	   |   moveq #1,d0
    3008:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    300c:	   |   move.l 1b69a <sceneHeight>,d0
    3012:	   |   subq.l #1,d0
    3014:	   |   cmp.l 12(sp),d0
    3018:	   +-- bne.s 3028 <drawLine+0x16c>
    301a:	   |   move.l 1b69a <sceneHeight>,d0
    3020:	   |   move.l d0,d1
    3022:	   |   subq.l #2,d1
    3024:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    3028:	   \-> pea 16edc <PutChar+0x5c6>
    302e:	       jsr 15fc6 <KPrintF>
    3034:	       addq.l #4,sp
	
}
    3036:	       nop
    3038:	       lea 20(sp),sp
    303c:	       rts

0000303e <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    303e:	                      lea -24(sp),sp
    3042:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    3044:	                      move.l 1b4fe <firstTexture>,d0
    304a:	/-------------------- beq.w 3128 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    304e:	|                     clr.l 24(sp)
    3052:	|     /-------------- bra.w 311c <deleteTextures+0xde>
			BOOL found = FALSE;
    3056:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    305a:	|  |  |               move.l 1b4fe <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    3062:	|  |  |               movea.l 20(sp),a0
    3066:	|  |  |               move.l (a0),d1
    3068:	|  |  |               move.l 24(sp),d0
    306c:	|  |  |               add.l d0,d0
    306e:	|  |  |               add.l d0,d0
    3070:	|  |  |               movea.l 36(sp),a0
    3074:	|  |  |               adda.l d0,a0
    3076:	|  |  |               move.l (a0),d0
    3078:	|  |  |               cmp.l d1,d0
    307a:	|  |  |  /----------- bne.w 310e <deleteTextures+0xd0>
				found = TRUE;
    307e:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    3084:	|  |  |  |            movea.l 20(sp),a0
    3088:	|  |  |  |            move.l 12(a0),d0
    308c:	|  |  |  |            move.l d0,1b4fe <firstTexture>
				FreeVec(list);
    3092:	|  |  |  |            move.l 20(sp),6(sp)
    3098:	|  |  |  |            move.l 1b5a2 <SysBase>,d0
    309e:	|  |  |  |            movea.l d0,a6
    30a0:	|  |  |  |            movea.l 6(sp),a1
    30a4:	|  |  |  |            jsr -690(a6)
				continue;
    30a8:	|  |  |  |  /-------- bra.s 3118 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    30aa:	|  |  |  |  |  /----> movea.l 20(sp),a0
    30ae:	|  |  |  |  |  |      movea.l 12(a0),a0
    30b2:	|  |  |  |  |  |      move.l (a0),d1
    30b4:	|  |  |  |  |  |      move.l 24(sp),d0
    30b8:	|  |  |  |  |  |      add.l d0,d0
    30ba:	|  |  |  |  |  |      add.l d0,d0
    30bc:	|  |  |  |  |  |      movea.l 36(sp),a0
    30c0:	|  |  |  |  |  |      adda.l d0,a0
    30c2:	|  |  |  |  |  |      move.l (a0),d0
    30c4:	|  |  |  |  |  |      cmp.l d1,d0
    30c6:	|  |  |  |  |  |  /-- bne.s 3104 <deleteTextures+0xc6>
					found = TRUE;
    30c8:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    30ce:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    30d2:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    30d8:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    30dc:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    30e0:	|  |  |  |  |  |  |   move.l 12(a0),d0
    30e4:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    30e8:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    30ec:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    30f2:	|  |  |  |  |  |  |   move.l 1b5a2 <SysBase>,d0
    30f8:	|  |  |  |  |  |  |   movea.l d0,a6
    30fa:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    30fe:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    3102:	|  |  |  |  +--|--|-- bra.s 3118 <deleteTextures+0xda>
				}
				list = list->next;
    3104:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    3108:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    310e:	|  |  |  \--|--|----> movea.l 20(sp),a0
    3112:	|  |  |     |  |      move.l 12(a0),d0
    3116:	|  |  |     |  \----- bne.s 30aa <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    3118:	|  |  |     \-------> addq.l #1,24(sp)
    311c:	|  |  \-------------> move.l 24(sp),d0
    3120:	|  |                  cmp.l 32(sp),d0
    3124:	|  \----------------- bcs.w 3056 <deleteTextures+0x18>
			}
		}
	}
}
    3128:	\-------------------> nop
    312a:	                      movea.l (sp)+,a6
    312c:	                      lea 24(sp),sp
    3130:	                      rts

00003132 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    3132:	subq.l #4,sp
    3134:	move.l 8(sp),d0
    3138:	move.w d0,d0
    313a:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    313e:	pea 16eff <PutChar+0x5e9>
    3144:	jsr 15fc6 <KPrintF>
    314a:	addq.l #4,sp
}
    314c:	nop
    314e:	addq.l #4,sp
    3150:	rts

00003152 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    3152:	       moveq #-1,d0
    3154:	       cmp.l 4(sp),d0
    3158:	   /-- bne.s 315e <resourceNameFromNum+0xc>
    315a:	   |   moveq #0,d0
    315c:	/--|-- bra.s 3196 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    315e:	|  \-> move.l 1b57e <numResourceNames>,d0
    3164:	|  /-- bne.s 316e <resourceNameFromNum+0x1c>
    3166:	|  |   move.l #93999,d0
    316c:	+--|-- bra.s 3196 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    316e:	|  \-> move.l 1b57e <numResourceNames>,d0
    3174:	|      cmp.l 4(sp),d0
    3178:	|  /-- ble.s 3190 <resourceNameFromNum+0x3e>
    317a:	|  |   move.l 1b536 <allResourceNames>,d1
    3180:	|  |   move.l 4(sp),d0
    3184:	|  |   add.l d0,d0
    3186:	|  |   add.l d0,d0
    3188:	|  |   movea.l d1,a0
    318a:	|  |   adda.l d0,a0
    318c:	|  |   move.l (a0),d0
    318e:	+--|-- bra.s 3196 <resourceNameFromNum+0x44>
	return "Unknown resource";
    3190:	|  \-> move.l #94008,d0
    3196:	\----> rts

00003198 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    3198:	          lea -44(sp),sp
    319c:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    31a0:	          move.l #320,1b4f6 <winWidth>
    winHeight = 256;
    31aa:	          move.l #256,1b4fa <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    31b4:	          tst.l 60(sp)
    31b8:	      /-- bne.s 31d0 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    31ba:	      |   pea 16f49 <PutChar+0x633>
    31c0:	      |   jsr b8 <copyString>
    31c6:	      |   addq.l #4,sp
    31c8:	      |   move.l d0,1b50e <bundleFolder>
    31ce:	   /--|-- bra.s 31e6 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    31d0:	   |  \-> movea.l 64(sp),a0
    31d4:	   |      move.l (a0),d0
    31d6:	   |      move.l d0,-(sp)
    31d8:	   |      jsr b8 <copyString>
    31de:	   |      addq.l #4,sp
    31e0:	   |      move.l d0,1b50e <bundleFolder>
	}
    
	int lastSlash = -1;
    31e6:	   \----> moveq #-1,d0
    31e8:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    31ec:	          clr.l 44(sp)
    31f0:	   /----- bra.s 3212 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    31f2:	/--|----> move.l 1b50e <bundleFolder>,d1
    31f8:	|  |      move.l 44(sp),d0
    31fc:	|  |      movea.l d1,a0
    31fe:	|  |      adda.l d0,a0
    3200:	|  |      move.b (a0),d0
    3202:	|  |      cmpi.b #47,d0
    3206:	|  |  /-- bne.s 320e <main_sludge+0x76>
    3208:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    320e:	|  |  \-> addq.l #1,44(sp)
    3212:	|  \----> move.l 1b50e <bundleFolder>,d1
    3218:	|         move.l 44(sp),d0
    321c:	|         movea.l d1,a0
    321e:	|         adda.l d0,a0
    3220:	|         move.b (a0),d0
    3222:	\-------- bne.s 31f2 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    3224:	          move.l 1b50e <bundleFolder>,d0
    322a:	          move.l 48(sp),d1
    322e:	          addq.l #1,d1
    3230:	          movea.l d0,a0
    3232:	          adda.l d1,a0
    3234:	          clr.b (a0)

	if (argc > 1) {
    3236:	          moveq #1,d0
    3238:	          cmp.l 60(sp),d0
    323c:	      /-- bge.s 3258 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    323e:	      |   move.l 60(sp),d0
    3242:	      |   addi.l #1073741823,d0
    3248:	      |   add.l d0,d0
    324a:	      |   add.l d0,d0
    324c:	      |   movea.l 64(sp),a0
    3250:	      |   adda.l d0,a0
    3252:	      |   move.l (a0),52(sp)
    3256:	   /--|-- bra.s 32b2 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    3258:	   |  \-> move.l 1b50e <bundleFolder>,d0
    325e:	   |      pea 16f4f <PutChar+0x639>
    3264:	   |      move.l d0,-(sp)
    3266:	   |      jsr 12dc0 <joinStrings>
    326c:	   |      addq.l #8,sp
    326e:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    3272:	   |      move.l 52(sp),-(sp)
    3276:	   |      jsr 12cba <fileExists>
    327c:	   |      addq.l #4,sp
    327e:	   |      tst.b d0
    3280:	   +----- bne.s 32b2 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    3282:	   |      move.l 52(sp),40(sp)
    3288:	   |      move.l 1b5a2 <SysBase>,d0
    328e:	   |      movea.l d0,a6
    3290:	   |      movea.l 40(sp),a1
    3294:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    3298:	   |      move.l 1b50e <bundleFolder>,d0
    329e:	   |      pea 16f5c <PutChar+0x646>
    32a4:	   |      move.l d0,-(sp)
    32a6:	   |      jsr 12dc0 <joinStrings>
    32ac:	   |      addq.l #8,sp
    32ae:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    32b2:	   \----> pea 16f65 <PutChar+0x64f>
    32b8:	          jsr 15fc6 <KPrintF>
    32be:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    32c0:	          move.l 52(sp),-(sp)
    32c4:	          jsr 12cba <fileExists>
    32ca:	          addq.l #4,sp
    32cc:	          tst.b d0
    32ce:	      /-- bne.s 3326 <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    32d0:	      |   move.l 1b5aa <DOSBase>,d0
    32d6:	      |   movea.l d0,a6
    32d8:	      |   jsr -60(a6)
    32dc:	      |   move.l d0,28(sp)
    32e0:	      |   move.l 28(sp),d0
    32e4:	      |   move.l d0,24(sp)
    32e8:	      |   move.l #94053,20(sp)
    32f0:	      |   moveq #21,d0
    32f2:	      |   move.l d0,16(sp)
    32f6:	      |   move.l 1b5aa <DOSBase>,d0
    32fc:	      |   movea.l d0,a6
    32fe:	      |   move.l 24(sp),d1
    3302:	      |   move.l 20(sp),d2
    3306:	      |   move.l 16(sp),d3
    330a:	      |   jsr -48(a6)
    330e:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    3312:	      |   pea 16f65 <PutChar+0x64f>
    3318:	      |   jsr 15fc6 <KPrintF>
    331e:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    3320:	      |   moveq #0,d0
    3322:	/-----|-- bra.w 351e <main_sludge+0x386>
	}

	KPrintF("Setgamefilepath\n");
    3326:	|     \-> pea 16f7b <PutChar+0x665>
    332c:	|         jsr 15fc6 <KPrintF>
    3332:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    3334:	|         move.l 52(sp),-(sp)
    3338:	|         jsr 3528 <setGameFilePath>
    333e:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    3340:	|         move.l 52(sp),-(sp)
    3344:	|         jsr 4ad6 <initSludge>
    334a:	|         addq.l #4,sp
    334c:	|         tst.w d0
    334e:	|     /-- bne.s 3356 <main_sludge+0x1be>
    3350:	|     |   moveq #0,d0
    3352:	+-----|-- bra.w 351e <main_sludge+0x386>
	
	if( winWidth != 320 || winHeight != 256) {
    3356:	|     \-> move.l 1b4f6 <winWidth>,d0
    335c:	|         cmpi.l #320,d0
    3362:	|     /-- bne.s 3372 <main_sludge+0x1da>
    3364:	|     |   move.l 1b4fa <winHeight>,d0
    336a:	|     |   cmpi.l #256,d0
    3370:	|  /--|-- beq.s 3394 <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    3372:	|  |  \-> pea 16f8c <PutChar+0x676>
    3378:	|  |      jsr 15fc6 <KPrintF>
    337e:	|  |      addq.l #4,sp
		winWidth = 320;
    3380:	|  |      move.l #320,1b4f6 <winWidth>
		winHeight = 256;
    338a:	|  |      move.l #256,1b4fa <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    3394:	|  \----> pea 17009 <PutChar+0x6f3>
    339a:	|         jsr 15fc6 <KPrintF>
    33a0:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    33a2:	|         move.l 1b4fa <winHeight>,d0
    33a8:	|         move.l d0,d1
    33aa:	|         move.l 1b4f6 <winWidth>,d0
    33b0:	|         move.l d1,-(sp)
    33b2:	|         move.l d0,-(sp)
    33b4:	|         jsr c55e <resizeBackdrop>
    33ba:	|         addq.l #8,sp
    33bc:	|         tst.w d0
    33be:	|     /-- bne.s 33d4 <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    33c0:	|     |   pea 1701c <PutChar+0x706>
    33c6:	|     |   jsr 15fc6 <KPrintF>
    33cc:	|     |   addq.l #4,sp
		return FALSE;
    33ce:	|     |   moveq #0,d0
    33d0:	+-----|-- bra.w 351e <main_sludge+0x386>
	}

	KPrintF("Init People\n");
    33d4:	|     \-> pea 17042 <PutChar+0x72c>
    33da:	|         jsr 15fc6 <KPrintF>
    33e0:	|         addq.l #4,sp
	if (! initPeople ())
    33e2:	|         jsr 9ae2 <initPeople>
    33e8:	|         tst.w d0
    33ea:	|     /-- bne.s 3400 <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    33ec:	|     |   pea 1704f <PutChar+0x739>
    33f2:	|     |   jsr 15fc6 <KPrintF>
    33f8:	|     |   addq.l #4,sp
		return FALSE;
    33fa:	|     |   moveq #0,d0
    33fc:	+-----|-- bra.w 351e <main_sludge+0x386>
	}

	KPrintF("Init Floor\n");
    3400:	|     \-> pea 17070 <PutChar+0x75a>
    3406:	|         jsr 15fc6 <KPrintF>
    340c:	|         addq.l #4,sp
	if (! initFloor ())
    340e:	|         jsr 1537c <initFloor>
    3414:	|         tst.w d0
    3416:	|     /-- bne.s 342c <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    3418:	|     |   pea 1707c <PutChar+0x766>
    341e:	|     |   jsr 15fc6 <KPrintF>
    3424:	|     |   addq.l #4,sp
		
		return FALSE;
    3426:	|     |   moveq #0,d0
    3428:	+-----|-- bra.w 351e <main_sludge+0x386>
	}

	KPrintF("Init Objecttype\n");
    342c:	|     \-> pea 1709c <PutChar+0x786>
    3432:	|         jsr 15fc6 <KPrintF>
    3438:	|         addq.l #4,sp
	if (! initObjectTypes ())
    343a:	|         jsr c71a <initObjectTypes>
    3440:	|         tst.w d0
    3442:	|     /-- bne.s 3458 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    3444:	|     |   pea 170ad <PutChar+0x797>
    344a:	|     |   jsr 15fc6 <KPrintF>
    3450:	|     |   addq.l #4,sp
		return FALSE;
    3452:	|     |   moveq #0,d0
    3454:	+-----|-- bra.w 351e <main_sludge+0x386>
	}

	KPrintF("Init speech\n");
    3458:	|     \-> pea 170d3 <PutChar+0x7bd>
    345e:	|         jsr 15fc6 <KPrintF>
    3464:	|         addq.l #4,sp
	initSpeech ();
    3466:	|         jsr 6eea <initSpeech>
	KPrintF("Init status bar\n");
    346c:	|         pea 170e0 <PutChar+0x7ca>
    3472:	|         jsr 15fc6 <KPrintF>
    3478:	|         addq.l #4,sp
	initStatusBar ();
    347a:	|         jsr 69ae <initStatusBar>

	KPrintF("Get numbered string\n");
    3480:	|         pea 170f1 <PutChar+0x7db>
    3486:	|         jsr 15fc6 <KPrintF>
    348c:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    348e:	|         pea 1 <_start+0x1>
    3492:	|         jsr 5ccc <getNumberedString>
    3498:	|         addq.l #4,sp
    349a:	|         move.l d0,1b506 <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    34a0:	|         pea 17106 <PutChar+0x7f0>
    34a6:	|         jsr 15fc6 <KPrintF>
    34ac:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    34ae:	|         move.l 1b572 <noStack>,d0
    34b4:	|         pea 1 <_start+0x1>
    34b8:	|         move.l d0,-(sp)
    34ba:	|         clr.l -(sp)
    34bc:	|         clr.l -(sp)
    34be:	|         clr.l -(sp)
    34c0:	|         jsr 5b22 <startNewFunctionNum>
    34c6:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    34ca:	|         pea 1711e <PutChar+0x808>
    34d0:	|         jsr 15fc6 <KPrintF>
    34d6:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    34d8:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    34e0:	|         clr.l 1b512 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    34e6:	|     /-- bra.s 3500 <main_sludge+0x368>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    34e8:	|  /--|-> jsr 5ab2 <sludgeDisplay>
		CsiCheckInput();
    34ee:	|  |  |   jsr c08e <CsiCheckInput>
		handleInput();
    34f4:	|  |  |   jsr 4870 <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    34fa:	|  |  |   jsr 15efa <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    3500:	|  |  \-> move.l 1b512 <weAreDoneSoQuit>,d0
    3506:	|  \----- beq.s 34e8 <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    3508:	|         move.l 52(sp),32(sp)
    350e:	|         move.l 1b5a2 <SysBase>,d0
    3514:	|         movea.l d0,a6
    3516:	|         movea.l 32(sp),a1
    351a:	|         jsr -690(a6)
}
    351e:	\-------> movem.l (sp)+,d2-d3/a6
    3522:	          lea 44(sp),sp
    3526:	          rts

00003528 <setGameFilePath>:

void setGameFilePath (char * f) {
    3528:	          lea -1104(sp),sp
    352c:	          move.l a6,-(sp)
    352e:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    3530:	          move.l #1112,d0
    3536:	          add.l sp,d0
    3538:	          addi.l #-1102,d0
    353e:	          move.l d0,1100(sp)
    3542:	          move.l #998,1096(sp)
    354a:	          move.l 1b5aa <DOSBase>,d0
    3550:	          movea.l d0,a6
    3552:	          move.l 1100(sp),d1
    3556:	          move.l 1096(sp),d2
    355a:	          jsr -564(a6)
    355e:	          move.w d0,1094(sp)
    3562:	          move.w 1094(sp),d0
    3566:	      /-- bne.s 3576 <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    3568:	      |   pea 17131 <PutChar+0x81b>
    356e:	      |   jsr 15fc6 <KPrintF>
    3574:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    3576:	      \-> moveq #-1,d0
    3578:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    357c:	          clr.l 1104(sp)
    3580:	   /----- bra.s 359e <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    3582:	/--|----> move.l 1104(sp),d0
    3586:	|  |      movea.l 1116(sp),a0
    358a:	|  |      adda.l d0,a0
    358c:	|  |      move.b (a0),d0
    358e:	|  |      cmpi.b #47,d0
    3592:	|  |  /-- bne.s 359a <setGameFilePath+0x72>
    3594:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    359a:	|  |  \-> addq.l #1,1104(sp)
    359e:	|  \----> move.l 1104(sp),d0
    35a2:	|         movea.l 1116(sp),a0
    35a6:	|         adda.l d0,a0
    35a8:	|         move.b (a0),d0
    35aa:	\-------- bne.s 3582 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    35ac:	          moveq #-1,d0
    35ae:	          cmp.l 1108(sp),d0
    35b2:	   /----- beq.s 362c <setGameFilePath+0x104>
		f[got] = 0;	
    35b4:	   |      move.l 1108(sp),d0
    35b8:	   |      movea.l 1116(sp),a0
    35bc:	   |      adda.l d0,a0
    35be:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    35c0:	   |      move.l 1116(sp),1090(sp)
    35c6:	   |      moveq #-2,d0
    35c8:	   |      move.l d0,1086(sp)
    35cc:	   |      move.l 1b5aa <DOSBase>,d0
    35d2:	   |      movea.l d0,a6
    35d4:	   |      move.l 1090(sp),d1
    35d8:	   |      move.l 1086(sp),d2
    35dc:	   |      jsr -84(a6)
    35e0:	   |      move.l d0,1082(sp)
    35e4:	   |      move.l 1082(sp),d0
    35e8:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    35ec:	   |      move.l 1078(sp),1074(sp)
    35f2:	   |      move.l 1b5aa <DOSBase>,d0
    35f8:	   |      movea.l d0,a6
    35fa:	   |      move.l 1074(sp),d1
    35fe:	   |      jsr -126(a6)
    3602:	   |      move.l d0,1070(sp)
    3606:	   |      move.l 1070(sp),d0
    360a:	   |  /-- bne.s 361e <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    360c:	   |  |   move.l 1116(sp),-(sp)
    3610:	   |  |   pea 17157 <PutChar+0x841>
    3616:	   |  |   jsr 15fc6 <KPrintF>
    361c:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    361e:	   |  \-> move.l 1108(sp),d0
    3622:	   |      movea.l 1116(sp),a0
    3626:	   |      adda.l d0,a0
    3628:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    362c:	   \----> move.l #400,1066(sp)
    3634:	          clr.l 1062(sp)
    3638:	          move.l 1b5a2 <SysBase>,d0
    363e:	          movea.l d0,a6
    3640:	          move.l 1066(sp),d0
    3644:	          move.l 1062(sp),d1
    3648:	          jsr -684(a6)
    364c:	          move.l d0,1058(sp)
    3650:	          move.l 1058(sp),d0
    3654:	          move.l d0,1b50a <gamePath>
	if (gamePath==0) {
    365a:	          move.l 1b50a <gamePath>,d0
    3660:	      /-- bne.s 3674 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    3662:	      |   pea 1718a <PutChar+0x874>
    3668:	      |   jsr 15fc6 <KPrintF>
    366e:	      |   addq.l #4,sp
    3670:	   /--|-- bra.w 375c <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    3674:	   |  \-> move.l 1b50a <gamePath>,1054(sp)
    367c:	   |      moveq #-2,d0
    367e:	   |      move.l d0,1050(sp)
    3682:	   |      move.l 1b5aa <DOSBase>,d0
    3688:	   |      movea.l d0,a6
    368a:	   |      move.l 1054(sp),d1
    368e:	   |      move.l 1050(sp),d2
    3692:	   |      jsr -84(a6)
    3696:	   |      move.l d0,1046(sp)
    369a:	   |      move.l 1046(sp),d0
    369e:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    36a2:	   |      move.l 1042(sp),1038(sp)
    36a8:	   |      move.l 1b5aa <DOSBase>,d0
    36ae:	   |      movea.l d0,a6
    36b0:	   |      move.l 1038(sp),d1
    36b4:	   |      jsr -126(a6)
    36b8:	   |      move.l d0,1034(sp)
    36bc:	   |      move.l 1034(sp),d0
    36c0:	   |  /-- bne.s 36d0 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    36c2:	   |  |   pea 171c5 <PutChar+0x8af>
    36c8:	   |  |   jsr 15fc6 <KPrintF>
    36ce:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    36d0:	   |  \-> move.l #1112,d0
    36d6:	   |      add.l sp,d0
    36d8:	   |      addi.l #-1102,d0
    36de:	   |      move.l d0,1030(sp)
    36e2:	   |      moveq #-2,d0
    36e4:	   |      move.l d0,1026(sp)
    36e8:	   |      move.l 1b5aa <DOSBase>,d0
    36ee:	   |      movea.l d0,a6
    36f0:	   |      move.l 1030(sp),d1
    36f4:	   |      move.l 1026(sp),d2
    36f8:	   |      jsr -84(a6)
    36fc:	   |      move.l d0,1022(sp)
    3700:	   |      move.l 1022(sp),d0
    3704:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    3708:	   |      move.l 1042(sp),1018(sp)
    370e:	   |      move.l 1b5aa <DOSBase>,d0
    3714:	   |      movea.l d0,a6
    3716:	   |      move.l 1018(sp),d1
    371a:	   |      jsr -126(a6)
    371e:	   |      move.l d0,1014(sp)
    3722:	   |      move.l 1014(sp),d0
    3726:	   |  /-- bne.s 373c <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    3728:	   |  |   moveq #10,d0
    372a:	   |  |   add.l sp,d0
    372c:	   |  |   move.l d0,-(sp)
    372e:	   |  |   pea 171f1 <PutChar+0x8db>
    3734:	   |  |   jsr 15fc6 <KPrintF>
    373a:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    373c:	   |  \-> move.l 1b50a <gamePath>,d0
    3742:	   +----- beq.s 375c <setGameFilePath+0x234>
    3744:	   |      move.l 1b50a <gamePath>,1010(sp)
    374c:	   |      move.l 1b5a2 <SysBase>,d0
    3752:	   |      movea.l d0,a6
    3754:	   |      movea.l 1010(sp),a1
    3758:	   |      jsr -690(a6)
}
    375c:	   \----> move.l (sp)+,d2
    375e:	          movea.l (sp)+,a6
    3760:	          lea 1104(sp),sp
    3764:	          rts

00003766 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    3766:	/-------> lea -16(sp),sp
    376a:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    376c:	|         move.l 24(sp),-(sp)
    3770:	|         jsr 5894 <pauseFunction>
    3776:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    3778:	|     /-- bra.s 378a <abortFunction+0x24>
    377a:	|  /--|-> moveq #24,d0
    377c:	|  |  |   add.l 24(sp),d0
    3780:	|  |  |   move.l d0,-(sp)
    3782:	|  |  |   jsr 14218 <trimStack>
    3788:	|  |  |   addq.l #4,sp
    378a:	|  |  \-> movea.l 24(sp),a0
    378e:	|  |      move.l 24(a0),d0
    3792:	|  \----- bne.s 377a <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    3794:	|         movea.l 24(sp),a0
    3798:	|         move.l 4(a0),12(sp)
    379e:	|         move.l 1b5a2 <SysBase>,d0
    37a4:	|         movea.l d0,a6
    37a6:	|         movea.l 12(sp),a1
    37aa:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    37ae:	|         clr.l 16(sp)
    37b2:	|     /-- bra.s 37d2 <abortFunction+0x6c>
    37b4:	|  /--|-> movea.l 24(sp),a0
    37b8:	|  |  |   move.l 20(a0),d1
    37bc:	|  |  |   move.l 16(sp),d0
    37c0:	|  |  |   lsl.l #3,d0
    37c2:	|  |  |   add.l d1,d0
    37c4:	|  |  |   move.l d0,-(sp)
    37c6:	|  |  |   jsr 13ae2 <unlinkVar>
    37cc:	|  |  |   addq.l #4,sp
    37ce:	|  |  |   addq.l #1,16(sp)
    37d2:	|  |  \-> movea.l 24(sp),a0
    37d6:	|  |      move.l 8(a0),d0
    37da:	|  |      cmp.l 16(sp),d0
    37de:	|  \----- bgt.s 37b4 <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    37e0:	|         movea.l 24(sp),a0
    37e4:	|         move.l 20(a0),8(sp)
    37ea:	|         move.l 1b5a2 <SysBase>,d0
    37f0:	|         movea.l d0,a6
    37f2:	|         movea.l 8(sp),a1
    37f6:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    37fa:	|         moveq #28,d0
    37fc:	|         add.l 24(sp),d0
    3800:	|         move.l d0,-(sp)
    3802:	|         jsr 13ae2 <unlinkVar>
    3808:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    380a:	|         movea.l 24(sp),a0
    380e:	|         move.l 40(a0),d0
    3812:	|     /-- beq.s 3824 <abortFunction+0xbe>
    3814:	|     |   movea.l 24(sp),a0
    3818:	|     |   move.l 40(a0),d0
    381c:	|     |   move.l d0,-(sp)
    381e:	\-----|-- jsr 3766 <abortFunction>(pc)
    3822:	      |   addq.l #4,sp
	FreeVec(fun);
    3824:	      \-> move.l 24(sp),4(sp)
    382a:	          move.l 1b5a2 <SysBase>,d0
    3830:	          movea.l d0,a6
    3832:	          movea.l 4(sp),a1
    3836:	          jsr -690(a6)
	fun = NULL;
    383a:	          clr.l 24(sp)
}
    383e:	          nop
    3840:	          movea.l (sp)+,a6
    3842:	          lea 16(sp),sp
    3846:	          rts

00003848 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    3848:	          subq.l #8,sp
	int n = 0;
    384a:	          clr.l 4(sp)
	*killedMyself = FALSE;
    384e:	          movea.l 20(sp),a0
    3852:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    3854:	          move.l 1b53a <allRunningFunctions>,(sp)
	while (fun) {
    385a:	   /----- bra.s 3888 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    385c:	/--|----> movea.l (sp),a0
    385e:	|  |      move.l (a0),d0
    3860:	|  |      cmp.l 12(sp),d0
    3864:	|  |  /-- bne.s 3882 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    3866:	|  |  |   movea.l (sp),a0
    3868:	|  |  |   move.w #1,54(a0)
			n++;
    386e:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    3872:	|  |  |   move.l (sp),d0
    3874:	|  |  |   cmp.l 16(sp),d0
    3878:	|  |  +-- bne.s 3882 <cancelAFunction+0x3a>
    387a:	|  |  |   movea.l 20(sp),a0
    387e:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    3882:	|  |  \-> movea.l (sp),a0
    3884:	|  |      move.l 44(a0),(sp)
	while (fun) {
    3888:	|  \----> tst.l (sp)
    388a:	\-------- bne.s 385c <cancelAFunction+0x14>
	}
	return n;
    388c:	          move.l 4(sp),d0
}
    3890:	          addq.l #8,sp
    3892:	          rts

00003894 <completeTimers>:


void completeTimers () {
    3894:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    3896:	          move.l 1b53a <allRunningFunctions>,(sp)

	while (thisFunction) {
    389c:	   /----- bra.s 38b2 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    389e:	/--|----> movea.l (sp),a0
    38a0:	|  |      move.b 56(a0),d0
    38a4:	|  |  /-- bne.s 38ac <completeTimers+0x18>
    38a6:	|  |  |   movea.l (sp),a0
    38a8:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    38ac:	|  |  \-> movea.l (sp),a0
    38ae:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    38b2:	|  \----> tst.l (sp)
    38b4:	\-------- bne.s 389e <completeTimers+0xa>
	}
}
    38b6:	          nop
    38b8:	          nop
    38ba:	          addq.l #4,sp
    38bc:	          rts

000038be <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    38be:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    38c2:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    38c8:	                                                             movea.l 80(sp),a0
    38cc:	                                                             move.w 54(a0),d0
    38d0:	/----------------------------------------------------------- beq.w 475e <continueFunction+0xea0>
		abortFunction (fun);
    38d4:	|                                                            move.l 80(sp),-(sp)
    38d8:	|                                                            jsr 3766 <abortFunction>
    38de:	|                                                            addq.l #4,sp
		return TRUE;
    38e0:	|                                                            moveq #1,d0
    38e2:	|  /-------------------------------------------------------- bra.w 4768 <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    38e6:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    38ec:	|  |  |                                                      movea.l 80(sp),a0
    38f0:	|  |  |                                                      move.l 4(a0),d1
    38f4:	|  |  |                                                      movea.l 80(sp),a0
    38f8:	|  |  |                                                      move.l 36(a0),d0
    38fc:	|  |  |                                                      lsl.l #3,d0
    38fe:	|  |  |                                                      movea.l d1,a0
    3900:	|  |  |                                                      adda.l d0,a0
    3902:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    3908:	|  |  |                                                      movea.l 80(sp),a0
    390c:	|  |  |                                                      move.l 4(a0),d1
    3910:	|  |  |                                                      movea.l 80(sp),a0
    3914:	|  |  |                                                      move.l 36(a0),d0
    3918:	|  |  |                                                      lsl.l #3,d0
    391a:	|  |  |                                                      movea.l d1,a0
    391c:	|  |  |                                                      adda.l d0,a0
    391e:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    3922:	|  |  |                                                      moveq #41,d0
    3924:	|  |  |                                                      cmp.l 64(sp),d0
    3928:	|  |  |  /-------------------------------------------------- bcs.w 4712 <continueFunction+0xe54>
    392c:	|  |  |  |                                                   move.l 64(sp),d0
    3930:	|  |  |  |                                                   add.l d0,d0
    3932:	|  |  |  |                                                   movea.l d0,a0
    3934:	|  |  |  |                                                   adda.l #14656,a0
    393a:	|  |  |  |                                                   move.w (a0),d0
    393c:	|  |  |  |                                                   jmp (3940 <continueFunction+0x82>,pc,d0.w)
    3940:	|  |  |  |                                                   bset d6,(a2)
    3942:	|  |  |  |                                                   ori.w #2670,(a4)
    3946:	|  |  |  |                                                   eori.w #2416,d6
    394a:	|  |  |  |                                                   bchg d4,d2
    394c:	|  |  |  |                                                   bclr d4,(a4)+
    394e:	|  |  |  |                                                   andi.l #181013194,d4
    3954:	|  |  |  |                                                   .short 0x0aca
    3956:	|  |  |  |                                                   .short 0x0aca
    3958:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    3960:	|  |  |  |                                                   .short 0x0aca
    3962:	|  |  |  |                                                   andi.w #906,-(a4)
    3966:	|  |  |  |                                                   bchg d1,196(a2)
    396a:	|  |  |  |                                                   bset d1,580(a4)
    396e:	|  |  |  |                                                   bclr d1,2576(a2)
    3972:	|  |  |  |                                                   andi.b #-56,2762(a2)
    3978:	|  |  |  |                                                   .short 0x0aca
    397a:	|  |  |  |                                                   eori.l #63572682,d0
    3980:	|  |  |  |                                                   .short 0x0aca
    3982:	|  |  |  |                                                   bchg d3,-(a2)
    3984:	|  |  |  |                                                   bchg #-36,(a2)
    3988:	|  |  |  |                                                   .short 0x08cc
    398a:	|  |  |  |                                                   addi.b #14,1038(a0)
    3990:	|  |  |  |                                                   .short 0x040e
    3992:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    3996:	|  |  |  |                                                   ori.w #8232,(a0)
    399a:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    39a0:	|  |  |  |                                                   ori.w #12136,(a0)
    39a4:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    39aa:	|  |  |  |                                                   ori.w #12328,(a0)
    39ae:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    39b4:	|  |  |  |                                                   add.l 44(sp),d1
    39b8:	|  |  |  |                                                   moveq #28,d0
    39ba:	|  |  |  |                                                   add.l 80(sp),d0
    39be:	|  |  |  |                                                   move.l d1,-(sp)
    39c0:	|  |  |  |                                                   move.l d0,-(sp)
    39c2:	|  |  |  |                                                   jsr 13d4e <copyVariable>
    39c8:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    39ca:	|  |  |  |                                                   move.l 80(sp),-(sp)
    39ce:	|  |  |  |                                                   jsr 476e <finishFunction>
    39d4:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    39d6:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    39dc:	|  |  |  |                                                   move.l 80(sp),-(sp)
    39e0:	|  |  |  |                                                   jsr 58d6 <restartFunction>
    39e6:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    39e8:	|  |  |  |  /----------------------------------------------- bra.w 4746 <continueFunction+0xe88>
				finishFunction (fun);
    39ec:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    39f0:	|  |  |  |  |                                                jsr 476e <finishFunction>
    39f6:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    39f8:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    39fc:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    3a00:	|  |  |  |  +----------------------------------------------- bra.w 4746 <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    3a04:	|  |  |  |  |                                                movea.l 80(sp),a0
    3a08:	|  |  |  |  |                                                move.l 28(a0),d0
    3a0c:	|  |  |  |  |                                                moveq #2,d1
    3a0e:	|  |  |  |  |                                                cmp.l d0,d1
    3a10:	|  |  |  |  |                                            /-- beq.s 3a1c <continueFunction+0x15e>
    3a12:	|  |  |  |  |                                            |   moveq #4,d1
    3a14:	|  |  |  |  |                                            |   cmp.l d0,d1
    3a16:	|  |  |  |  |                                         /--|-- beq.s 3a6a <continueFunction+0x1ac>
    3a18:	|  |  |  |  |                                /--------|--|-- bra.w 3b52 <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    3a1c:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    3a20:	|  |  |  |  |                                |        |      jsr 5894 <pauseFunction>
    3a26:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    3a28:	|  |  |  |  |                                |        |      moveq #24,d0
    3a2a:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    3a2e:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    3a32:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    3a36:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    3a3a:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    3a3c:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    3a40:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    3a44:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    3a46:	|  |  |  |  |                                |        |      jsr 5b22 <startNewFunctionNum>
    3a4c:	|  |  |  |  |                                |        |      lea 20(sp),sp
    3a50:	|  |  |  |  |                                |        |      tst.l d0
    3a52:	|  |  |  |  |                                |        |  /-- bne.s 3a5a <continueFunction+0x19c>
    3a54:	|  |  |  |  |                                |        |  |   clr.w d0
    3a56:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 4768 <continueFunction+0xeaa>
				fun = allRunningFunctions;
    3a5a:	|  |  |  |  |                                |        |  \-> move.l 1b53a <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    3a62:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    3a66:	|  |  |  |  |                                |  /-----|----- bra.w 3b66 <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    3a6a:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    3a6e:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    3a72:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    3a76:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    3a7a:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    3a7c:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    3a7e:	|  |  |  |  |                                |  |            jsr 12576 <callBuiltIn>
    3a84:	|  |  |  |  |                                |  |            lea 12(sp),sp
    3a88:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    3a8c:	|  |  |  |  |                                |  |            moveq #5,d0
    3a8e:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    3a92:	|  |  |  |  |                                |  |  /-------- bcs.w 3b4e <continueFunction+0x290>
    3a96:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    3a9a:	|  |  |  |  |                                |  |  |         add.l d0,d0
    3a9c:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    3a9e:	|  |  |  |  |                                |  |  |         adda.l #15018,a0
    3aa4:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    3aa6:	|  |  |  |  |                                |  |  |         jmp (3aaa <continueFunction+0x1ec>,pc,d0.w)
    3aaa:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    3ab0:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    3ab4:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    3aba:	|  |  |  |  |                                |  |  |         moveq #-7,d1
    3abc:	|  |  |  |  |                                |  |  |         jsr 15fc6 <KPrintF>
    3ac2:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    3ac4:	|  |  |  |  |                                |  |  |         clr.w d0
    3ac6:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 4768 <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    3aca:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    3ace:	|  |  |  |  |                                |  |  |         jsr 5894 <pauseFunction>
    3ad4:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    3ad6:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    3ada:	|  |  |  |  |                                |  |  |  /----- bra.s 3b50 <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    3adc:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    3ae0:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    3ae4:	|  |  |  |  |                                |  |  |  +----- bra.s 3b50 <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    3ae6:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    3aea:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    3af0:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    3af2:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    3af6:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    3afa:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    3afe:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    3b00:	|  |  |  |  |                                |  |  |  |      jsr 14186 <setVariable>
    3b06:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    3b0a:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    3b0e:	|  |  |  |  |                                |  |  |  |      jsr 5894 <pauseFunction>
    3b14:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    3b16:	|  |  |  |  |                                |  |  |  |      move.l 1b572 <noStack>,d1
    3b1c:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    3b20:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    3b22:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    3b24:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    3b28:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    3b2a:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    3b2c:	|  |  |  |  |                                |  |  |  |      jsr 5b22 <startNewFunctionNum>
    3b32:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    3b36:	|  |  |  |  |                                |  |  |  |      tst.l d0
    3b38:	|  |  |  |  |                                |  |  |  |  /-- bne.s 3b40 <continueFunction+0x282>
    3b3a:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    3b3c:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 4768 <continueFunction+0xeaa>
							fun = allRunningFunctions;
    3b40:	|  |  |  |  |                                |  |  |  |  \-> move.l 1b53a <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    3b48:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    3b4c:	|  |  |  |  |                                |  |  |  +----- bra.s 3b50 <continueFunction+0x292>

						default:
						break;
    3b4e:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    3b50:	|  |  |  |  |                                |  +-----\----X bra.s 3b66 <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    3b52:	|  |  |  |  |                                \--|----------> pea 17344 <PutChar+0xa2e>
    3b58:	|  |  |  |  |                                   |            jsr 15fc6 <KPrintF>
    3b5e:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    3b60:	|  |  |  |  |                                   |            clr.w d0
    3b62:	|  +--|--|--|-----------------------------------|----------- bra.w 4768 <continueFunction+0xeaa>
			}
			break;
    3b66:	|  |  |  |  +-----------------------------------\----------X bra.w 4746 <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    3b6a:	|  |  |  |  |                                                moveq #28,d0
    3b6c:	|  |  |  |  |                                                add.l 80(sp),d0
    3b70:	|  |  |  |  |                                                clr.l -(sp)
    3b72:	|  |  |  |  |                                                clr.l -(sp)
    3b74:	|  |  |  |  |                                                move.l d0,-(sp)
    3b76:	|  |  |  |  |                                                jsr 14186 <setVariable>
    3b7c:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    3b80:	|  |  |  |  +----------------------------------------------- bra.w 4746 <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    3b84:	|  |  |  |  |                                                move.l 68(sp),d1
    3b88:	|  |  |  |  |                                                moveq #28,d0
    3b8a:	|  |  |  |  |                                                add.l 80(sp),d0
    3b8e:	|  |  |  |  |                                                move.l d1,-(sp)
    3b90:	|  |  |  |  |                                                pea 5 <_start+0x5>
    3b94:	|  |  |  |  |                                                move.l d0,-(sp)
    3b96:	|  |  |  |  |                                                jsr 14186 <setVariable>
    3b9c:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    3ba0:	|  |  |  |  +----------------------------------------------- bra.w 4746 <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    3ba4:	|  |  |  |  |                                                move.l 68(sp),d1
    3ba8:	|  |  |  |  |                                                moveq #28,d0
    3baa:	|  |  |  |  |                                                add.l 80(sp),d0
    3bae:	|  |  |  |  |                                                move.l d1,-(sp)
    3bb0:	|  |  |  |  |                                                pea 1 <_start+0x1>
    3bb4:	|  |  |  |  |                                                move.l d0,-(sp)
    3bb6:	|  |  |  |  |                                                jsr 14186 <setVariable>
    3bbc:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    3bc0:	|  |  |  |  +----------------------------------------------- bra.w 4746 <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    3bc4:	|  |  |  |  |                                                moveq #28,d0
    3bc6:	|  |  |  |  |                                                add.l 80(sp),d0
    3bca:	|  |  |  |  |                                                movea.l 80(sp),a0
    3bce:	|  |  |  |  |                                                movea.l 20(a0),a0
    3bd2:	|  |  |  |  |                                                move.l 68(sp),d1
    3bd6:	|  |  |  |  |                                                lsl.l #3,d1
    3bd8:	|  |  |  |  |                                                add.l a0,d1
    3bda:	|  |  |  |  |                                                move.l d0,-(sp)
    3bdc:	|  |  |  |  |                                                move.l d1,-(sp)
    3bde:	|  |  |  |  |                                                jsr 13d4e <copyVariable>
    3be4:	|  |  |  |  |                                                addq.l #8,sp
    3be6:	|  |  |  |  |                                                tst.w d0
    3be8:	|  |  |  |  |  /-------------------------------------------- bne.w 4724 <continueFunction+0xe66>
    3bec:	|  |  |  |  |  |                                             clr.w d0
    3bee:	|  +--|--|--|--|-------------------------------------------- bra.w 4768 <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    3bf2:	|  |  |  |  |  |                                             moveq #28,d0
    3bf4:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3bf8:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3bfa:	|  |  |  |  |  |                                             jsr 13dd4 <getBoolean>
    3c00:	|  |  |  |  |  |                                             addq.l #4,sp
    3c02:	|  |  |  |  |  |                                             tst.w d0
    3c04:	|  |  |  |  |  |                                      /----- beq.s 3c20 <continueFunction+0x362>
    3c06:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    3c0a:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    3c0e:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    3c10:	|  |  |  |  |  |                                      |      jsr 13dd4 <getBoolean>
    3c16:	|  |  |  |  |  |                                      |      addq.l #4,sp
    3c18:	|  |  |  |  |  |                                      |      tst.w d0
    3c1a:	|  |  |  |  |  |                                      +----- beq.s 3c20 <continueFunction+0x362>
    3c1c:	|  |  |  |  |  |                                      |      moveq #1,d0
    3c1e:	|  |  |  |  |  |                                      |  /-- bra.s 3c22 <continueFunction+0x364>
    3c20:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    3c22:	|  |  |  |  |  |                                         \-> moveq #28,d1
    3c24:	|  |  |  |  |  |                                             add.l 80(sp),d1
    3c28:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3c2a:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    3c2e:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3c30:	|  |  |  |  |  |                                             jsr 14186 <setVariable>
    3c36:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    3c3a:	|  |  |  |  |  |                                             moveq #24,d0
    3c3c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3c40:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3c42:	|  |  |  |  |  |                                             jsr 14218 <trimStack>
    3c48:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    3c4a:	|  |  |  |  +--|-------------------------------------------- bra.w 4746 <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    3c4e:	|  |  |  |  |  |                                             moveq #28,d0
    3c50:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3c54:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3c56:	|  |  |  |  |  |                                             jsr 13dd4 <getBoolean>
    3c5c:	|  |  |  |  |  |                                             addq.l #4,sp
    3c5e:	|  |  |  |  |  |                                             tst.w d0
    3c60:	|  |  |  |  |  |                                         /-- bne.s 3c78 <continueFunction+0x3ba>
    3c62:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    3c66:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    3c6a:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    3c6c:	|  |  |  |  |  |                                         |   jsr 13dd4 <getBoolean>
    3c72:	|  |  |  |  |  |                                         |   addq.l #4,sp
    3c74:	|  |  |  |  |  |                                         |   tst.w d0
    3c76:	|  |  |  |  |  |                                      /--|-- beq.s 3c7c <continueFunction+0x3be>
    3c78:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    3c7a:	|  |  |  |  |  |                                      |  /-- bra.s 3c7e <continueFunction+0x3c0>
    3c7c:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    3c7e:	|  |  |  |  |  |                                         \-> moveq #28,d1
    3c80:	|  |  |  |  |  |                                             add.l 80(sp),d1
    3c84:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3c86:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    3c8a:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3c8c:	|  |  |  |  |  |                                             jsr 14186 <setVariable>
    3c92:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    3c96:	|  |  |  |  |  |                                             moveq #24,d0
    3c98:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3c9c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3c9e:	|  |  |  |  |  |                                             jsr 14218 <trimStack>
    3ca4:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    3ca6:	|  |  |  |  +--|-------------------------------------------- bra.w 4746 <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    3caa:	|  |  |  |  |  |                                             move.l 68(sp),d1
    3cae:	|  |  |  |  |  |                                             moveq #28,d0
    3cb0:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3cb4:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3cb6:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    3cba:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3cbc:	|  |  |  |  |  |                                             jsr 14186 <setVariable>
    3cc2:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    3cc6:	|  |  |  |  +--|-------------------------------------------- bra.w 4746 <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    3cca:	|  |  |  |  |  |                                             move.l 68(sp),d1
    3cce:	|  |  |  |  |  |                                             moveq #28,d0
    3cd0:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3cd4:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3cd6:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    3cda:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3cdc:	|  |  |  |  |  |                                             jsr 14186 <setVariable>
    3ce2:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    3ce6:	|  |  |  |  +--|-------------------------------------------- bra.w 4746 <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    3cea:	|  |  |  |  |  |                                             move.l 68(sp),d1
    3cee:	|  |  |  |  |  |                                             moveq #28,d0
    3cf0:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3cf4:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3cf6:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    3cfa:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3cfc:	|  |  |  |  |  |                                             jsr 14186 <setVariable>
    3d02:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    3d06:	|  |  |  |  +--|-------------------------------------------- bra.w 4746 <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    3d0a:	|  |  |  |  |  |                                             move.l 1b502 <dialogValue>,d0
    3d10:	|  |  |  |  |  |                                             moveq #1,d1
    3d12:	|  |  |  |  |  |                                             cmp.l d0,d1
    3d14:	|  |  |  |  |  |  /----------------------------------------- beq.w 4728 <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    3d18:	|  |  |  |  |  |  |                                          pea 17359 <PutChar+0xa43>
    3d1e:	|  |  |  |  |  |  |                                          jsr 15fc6 <KPrintF>
    3d24:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    3d26:	|  |  |  |  |  |  |                                          clr.w d0
    3d28:	|  +--|--|--|--|--|----------------------------------------- bra.w 4768 <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    3d2c:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    3d30:	|  |  |  |  |  |  |                                          moveq #28,d0
    3d32:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    3d36:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    3d38:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    3d3a:	|  |  |  |  |  |  |                                          jsr 13918 <loadStringToVar>
    3d40:	|  |  |  |  |  |  |                                          addq.l #8,sp
    3d42:	|  |  |  |  |  |  |                                          tst.w d0
    3d44:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 472c <continueFunction+0xe6e>
					return FALSE;
    3d48:	|  |  |  |  |  |  |  |                                       clr.w d0
    3d4a:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 4768 <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    3d4e:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    3d52:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    3d56:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    3d58:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    3d5a:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    3d5c:	|  |  |  |  |  |  |  |                                /----- beq.s 3dba <continueFunction+0x4fc>
    3d5e:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    3d60:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    3d62:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 3f4e <continueFunction+0x690>
    3d66:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    3d68:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 3d74 <continueFunction+0x4b6>
    3d6a:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    3d6c:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    3d6e:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 3dba <continueFunction+0x4fc>
    3d70:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 3f4e <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    3d74:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    3d76:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    3d7a:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 3da6 <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    3d7c:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    3d7e:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    3d82:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    3d84:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    3d86:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    3d88:	|  |  |  |  |  |  |  |              |                 |  |   jsr 14186 <setVariable>
    3d8e:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    3d92:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    3d94:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    3d98:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    3d9a:	|  |  |  |  |  |  |  |              |                 |  |   jsr 14218 <trimStack>
    3da0:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    3da2:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 3f64 <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    3da6:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 1739a <PutChar+0xa84>
    3dac:	|  |  |  |  |  |  |  |              |  |              |      jsr 15fc6 <KPrintF>
    3db2:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    3db4:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    3db6:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 4768 <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    3dba:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    3dbe:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    3dc2:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    3dc6:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    3dc8:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 3dde <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    3dca:	|  |  |  |  |  |  |  |              |  |                 |   pea 173d6 <PutChar+0xac0>
    3dd0:	|  |  |  |  |  |  |  |              |  |                 |   jsr 15fc6 <KPrintF>
    3dd6:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    3dd8:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    3dda:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 4768 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    3dde:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    3de0:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    3de4:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    3de6:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    3dea:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    3dee:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    3df0:	|  |  |  |  |  |  |  |              |  |                     jsr 13894 <getValueType>
    3df6:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    3dfa:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    3dfc:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 3e04 <continueFunction+0x546>
    3dfe:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    3e00:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 4768 <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    3e04:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    3e08:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    3e0c:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    3e0e:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    3e10:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    3e12:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 3e34 <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    3e14:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    3e18:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    3e1a:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    3e1e:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    3e22:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    3e26:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    3e28:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    3e2a:	|  |  |  |  |  |  |  |              |  |                 |   jsr 1351e <fastArrayGetByIndex>
    3e30:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    3e32:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 3e54 <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    3e34:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    3e38:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    3e3a:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    3e3e:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    3e42:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    3e46:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    3e48:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    3e4a:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    3e4c:	|  |  |  |  |  |  |  |              |  |              |      jsr 141a8 <stackGetByIndex>
    3e52:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    3e54:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    3e58:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    3e5a:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    3e5e:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    3e60:	|  |  |  |  |  |  |  |              |  |                     jsr 14218 <trimStack>
    3e66:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    3e68:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    3e6c:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 3e88 <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    3e6e:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    3e70:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    3e74:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    3e76:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    3e78:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    3e7a:	|  |  |  |  |  |  |  |              |  |                 |   jsr 14186 <setVariable>
    3e80:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    3e84:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 3f62 <continueFunction+0x6a4>
    3e88:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    3e8a:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    3e8e:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 3e9c <continueFunction+0x5de>
    3e90:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    3e92:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    3e96:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 3ee6 <continueFunction+0x628>
    3e98:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 3f2e <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    3e9c:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    3ea0:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    3ea4:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    3ea8:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    3eaa:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 13894 <getValueType>
    3eb0:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    3eb4:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    3eb6:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 3ebe <continueFunction+0x600>
    3eb8:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    3eba:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 3f48 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    3ebe:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    3ec0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    3ec2:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    3ec6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    3ec8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    3ecc:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    3ece:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 14186 <setVariable>
    3ed4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    3ed8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    3eda:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    3edc:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    3ee0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    3ee4:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 3f4c <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    3ee6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    3eea:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    3eee:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    3ef2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    3ef4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 13894 <getValueType>
    3efa:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    3efe:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    3f00:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 3f06 <continueFunction+0x648>
    3f02:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    3f04:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 3f48 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    3f06:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    3f08:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    3f0a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    3f0e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    3f10:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    3f14:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    3f16:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 14186 <setVariable>
    3f1c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    3f20:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    3f22:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    3f24:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    3f28:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    3f2c:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 3f4c <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    3f2e:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    3f30:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    3f34:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    3f36:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    3f3a:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 13d4e <copyVariable>
    3f40:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    3f42:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    3f44:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 3f62 <continueFunction+0x6a4>
    3f46:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    3f48:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 4768 <continueFunction+0xeaa>
				break;
    3f4c:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 3f62 <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    3f4e:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 173f4 <PutChar+0xade>
    3f54:	|  |  |  |  |  |  |  |                 |  |                  jsr 15fc6 <KPrintF>
    3f5a:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    3f5c:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    3f5e:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 4768 <continueFunction+0xeaa>
				break;
    3f62:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    3f64:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 4746 <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    3f68:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    3f6c:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    3f70:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    3f72:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    3f74:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    3f76:	|  |  |  |  |  |  |  |                                   /-- beq.s 3f84 <continueFunction+0x6c6>
    3f78:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    3f7a:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    3f7c:	|  |  |  |  |  |  |  |                                /--|-- beq.w 4030 <continueFunction+0x772>
    3f80:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 408e <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    3f84:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    3f88:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    3f8c:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    3f90:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    3f92:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 3fa8 <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    3f94:	|  |  |  |  |  |  |  |                             |  |  |   pea 173d6 <PutChar+0xac0>
    3f9a:	|  |  |  |  |  |  |  |                             |  |  |   jsr 15fc6 <KPrintF>
    3fa0:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    3fa2:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    3fa4:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 4768 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    3fa8:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    3faa:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    3fae:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    3fb0:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    3fb4:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    3fb8:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    3fba:	|  |  |  |  |  |  |  |                             |  |      jsr 13894 <getValueType>
    3fc0:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    3fc4:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    3fc6:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 3fce <continueFunction+0x710>
    3fc8:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    3fca:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 4768 <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    3fce:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    3fd2:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    3fd6:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    3fda:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    3fdc:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    3fe0:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    3fe2:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    3fe6:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    3fea:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    3fee:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    3ff0:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    3ff2:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    3ff4:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    3ff6:	|  |  |  |  |  |  |  |                             |  |      jsr 5ade <stackSetByIndex>
    3ffc:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    4000:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    4002:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 400a <continueFunction+0x74c>
						return FALSE;
    4004:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4006:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 4768 <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    400a:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    400c:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4010:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4012:	|  |  |  |  |  |  |  |                             |  |      jsr 14218 <trimStack>
    4018:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    401a:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    401c:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4020:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4022:	|  |  |  |  |  |  |  |                             |  |      jsr 14218 <trimStack>
    4028:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    402a:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    402c:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 4746 <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    4030:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    4032:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    4036:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    4038:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    403c:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    4040:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    4042:	|  |  |  |  |  |  |  |                             |         jsr 13894 <getValueType>
    4048:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    404c:	|  |  |  |  |  |  |  |                             |         tst.w d0
    404e:	|  |  |  |  |  |  |  |                             |     /-- bne.s 4056 <continueFunction+0x798>
    4050:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    4052:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 4768 <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    4056:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    405a:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    405c:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    4060:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    4064:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    4068:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    406a:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    406c:	|  |  |  |  |  |  |  |                             |         jsr 1351e <fastArrayGetByIndex>
    4072:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    4074:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    4078:	|  |  |  |  |  |  |  |                             |     /-- bne.s 4088 <continueFunction+0x7ca>
    407a:	|  |  |  |  |  |  |  |                             |     |   pea 17418 <PutChar+0xb02>
    4080:	|  |  |  |  |  |  |  |                             |     |   jsr 15fc6 <KPrintF>
    4086:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    4088:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    408a:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 4768 <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    408e:	|  |  |  |  |  |  |  |                             \-------> pea 173f4 <PutChar+0xade>
    4094:	|  |  |  |  |  |  |  |                                       jsr 15fc6 <KPrintF>
    409a:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    409c:	|  |  |  |  |  |  |  |                                       clr.w d0
    409e:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 4768 <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    40a2:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    40a6:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    40aa:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    40ae:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    40b0:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    40b2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    40b4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    40b8:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    40bc:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    40be:	|  |  |  |  |  |  |  |                                       jsr 13894 <getValueType>
    40c4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    40c8:	|  |  |  |  |  |  |  |                                       tst.w d0
    40ca:	|  |  |  |  |  |  |  |                                   /-- bne.s 40d2 <continueFunction+0x814>
    40cc:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    40ce:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4768 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    40d2:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    40d6:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    40d8:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    40dc:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    40de:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    40e2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    40e4:	|  |  |  |  |  |  |  |                                       jsr 14186 <setVariable>
    40ea:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    40ee:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    40f2:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    40f4:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    40f6:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    40fa:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    40fe:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4102:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4104:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4106:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4108:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    410c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    410e:	|  |  |  |  |  |  |  |                                       jsr 14186 <setVariable>
    4114:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4118:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4746 <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    411c:	|  |  |  |  |  |  |  |                                       move.l 1b550 <globalVars>,d1
    4122:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4126:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4128:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    412a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    412c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4130:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    4134:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4136:	|  |  |  |  |  |  |  |                                       jsr 13894 <getValueType>
    413c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4140:	|  |  |  |  |  |  |  |                                       tst.w d0
    4142:	|  |  |  |  |  |  |  |                                   /-- bne.s 414a <continueFunction+0x88c>
    4144:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4146:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4768 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    414a:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    414e:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4150:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4154:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4156:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    415a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    415c:	|  |  |  |  |  |  |  |                                       jsr 14186 <setVariable>
    4162:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    4166:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    416a:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    416c:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    416e:	|  |  |  |  |  |  |  |                                       movea.l 1b550 <globalVars>,a0
    4174:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4178:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    417a:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    417c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    417e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4182:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4184:	|  |  |  |  |  |  |  |                                       jsr 14186 <setVariable>
    418a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    418e:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4746 <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    4192:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4196:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    419a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    419e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    41a0:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    41a2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    41a4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    41a8:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    41ac:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    41ae:	|  |  |  |  |  |  |  |                                       jsr 13894 <getValueType>
    41b4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    41b8:	|  |  |  |  |  |  |  |                                       tst.w d0
    41ba:	|  |  |  |  |  |  |  |                                   /-- bne.s 41c2 <continueFunction+0x904>
    41bc:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    41be:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4768 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    41c2:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    41c6:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    41c8:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    41cc:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    41ce:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    41d2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    41d4:	|  |  |  |  |  |  |  |                                       jsr 14186 <setVariable>
    41da:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    41de:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    41e2:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    41e4:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    41e6:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    41ea:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    41ee:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    41f2:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    41f4:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    41f6:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    41f8:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    41fc:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    41fe:	|  |  |  |  |  |  |  |                                       jsr 14186 <setVariable>
    4204:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4208:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4746 <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    420c:	|  |  |  |  |  |  |  |                                       move.l 1b550 <globalVars>,d1
    4212:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4216:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4218:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    421a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    421c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4220:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    4224:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4226:	|  |  |  |  |  |  |  |                                       jsr 13894 <getValueType>
    422c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4230:	|  |  |  |  |  |  |  |                                       tst.w d0
    4232:	|  |  |  |  |  |  |  |                                   /-- bne.s 423a <continueFunction+0x97c>
    4234:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4236:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4768 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    423a:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    423e:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4240:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4244:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4246:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    424a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    424c:	|  |  |  |  |  |  |  |                                       jsr 14186 <setVariable>
    4252:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    4256:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    425a:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    425c:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    425e:	|  |  |  |  |  |  |  |                                       movea.l 1b550 <globalVars>,a0
    4264:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4268:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    426a:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    426c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    426e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4272:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4274:	|  |  |  |  |  |  |  |                                       jsr 14186 <setVariable>
    427a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    427e:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4746 <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    4282:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4286:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    428a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    428e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4290:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    4292:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4294:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4298:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    429a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    429c:	|  |  |  |  |  |  |  |                                       jsr 13d4e <copyVariable>
    42a2:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    42a4:	|  |  |  |  |  |  |  |                                       tst.w d0
    42a6:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 4730 <continueFunction+0xe72>
    42aa:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    42ac:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 4768 <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    42b0:	|  |  |  |  |  |  |  |  |                                    move.l 1b550 <globalVars>,d1
    42b6:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    42ba:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    42bc:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    42be:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    42c0:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    42c4:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    42c6:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    42c8:	|  |  |  |  |  |  |  |  |                                    jsr 13d4e <copyVariable>
    42ce:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    42d0:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    42d2:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 4734 <continueFunction+0xe76>
    42d6:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    42d8:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 4768 <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    42dc:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    42de:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    42e2:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1b550 <globalVars>,a0
    42e8:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    42ec:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    42ee:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    42f0:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    42f2:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    42f4:	|  |  |  |  |  |  |  |  |  |                                 jsr 13d4e <copyVariable>
    42fa:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    42fc:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    42fe:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 4738 <continueFunction+0xe7a>
    4302:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    4304:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 4768 <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    4308:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    430a:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    430e:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    4310:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    4314:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    4316:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    4318:	|  |  |  |  |  |  |  |  |  |  |                              jsr 130d0 <addVarToStack>
    431e:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    4320:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    4322:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 473c <continueFunction+0xe7e>
    4326:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    4328:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 4768 <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    432c:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    432e:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    4332:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    4334:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    4338:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    433a:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    433c:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 13156 <addVarToStackQuick>
    4342:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    4344:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    4346:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 4740 <continueFunction+0xe82>
    434a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    434c:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 4768 <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    4350:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    4352:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    4356:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    4358:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 13dd4 <getBoolean>
    435e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    4360:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    4362:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    4364:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    4366:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    4368:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    436a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    436c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    4370:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    4372:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    4376:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    4378:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14186 <setVariable>
    437e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    4382:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 4746 <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    4386:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    4388:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    438c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    438e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 13dd4 <getBoolean>
    4394:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    4396:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    4398:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 4744 <continueFunction+0xe86>
				advanceNow = FALSE;
    439c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    43a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    43a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    43aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 4744 <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    43ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    43b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    43b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    43bc:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 4746 <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    43c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    43c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    43c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    43c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    43cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    43d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    43d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 13894 <getValueType>
    43d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    43dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    43de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 43e6 <continueFunction+0xb28>
    43e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    43e2:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 4768 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    43e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    43ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    43ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    43ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    43f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    43f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    43f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    43fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    43fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 14186 <setVariable>
    4402:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    4406:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 4746 <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    440a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    440e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    4412:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 46fc <continueFunction+0xe3e>
    4416:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    4418:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    441c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 4498 <continueFunction+0xbda>
    441e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    4420:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    4424:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 44e2 <continueFunction+0xc24>
    4428:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    442a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    442e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 443c <continueFunction+0xb7e>
    4430:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    4432:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    4436:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 446a <continueFunction+0xbac>
    4438:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 44e2 <continueFunction+0xc24>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    443c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    443e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    4442:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    4446:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    444a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    444c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    444e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 131ca <addVariablesInSecond>
    4454:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    4456:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    4458:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    445c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    445e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 14218 <trimStack>
    4464:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    4466:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 4710 <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    446a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    446c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    4470:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    4474:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    4478:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    447a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    447c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 13288 <compareVariablesInSecond>
    4482:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    4484:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    4486:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    448a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    448c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 14218 <trimStack>
    4492:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    4494:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 4710 <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    4498:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    449a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    449e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    44a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    44a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    44a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    44aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 13288 <compareVariablesInSecond>
    44b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    44b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    44b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    44b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    44ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 14218 <trimStack>
    44c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    44c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    44c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    44ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    44cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    44ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    44d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    44d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    44da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    44de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 4710 <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    44e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    44e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    44ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    44ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    44f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    44f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    44f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 13894 <getValueType>
    44fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    4500:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    4502:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 450a <continueFunction+0xc4c>
    4504:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    4506:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 4768 <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    450a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    450c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    4510:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    4512:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    4516:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    451a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    451c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 13894 <getValueType>
    4522:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    4526:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    4528:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 4530 <continueFunction+0xc72>
    452a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    452c:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 4768 <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    4530:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    4532:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    4536:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    4538:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14218 <trimStack>
    453e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    4540:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    4542:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    4546:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    4548:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    454a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 470e <continueFunction+0xe50>
    454e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    4550:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    4552:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #17758,a0
    4558:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    455a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (455e <continueFunction+0xca0>,pc,d0.w)
    455e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    4562:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    4564:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    456c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    456e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    4576:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    457e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    4586:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    458e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    4592:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    4596:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4598:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    459a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16800 <__mulsi3>
    45a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    45a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    45a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    45a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    45aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    45ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    45b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    45b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14186 <setVariable>
    45b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    45bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 4710 <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    45c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    45c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    45c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    45ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    45cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    45d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    45d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    45d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    45d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14186 <setVariable>
    45de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    45e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 4710 <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    45e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    45ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    45ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    45f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    45f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 168ac <__modsi3>
    45f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    45fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    45fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    45fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4602:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4604:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4608:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    460a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14186 <setVariable>
    4610:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4614:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 4710 <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    4618:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    461c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    4620:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4622:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4624:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1687e <__divsi3>
    462a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    462c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    462e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4630:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4634:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4636:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    463a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    463c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14186 <setVariable>
    4642:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4646:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 4710 <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    464a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    464e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    4652:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    4654:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    4656:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    4658:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    465a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    465c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    465e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4662:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4664:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4668:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    466a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14186 <setVariable>
    4670:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4674:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 4710 <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    4678:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    467c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    4680:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    4682:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    4684:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    4686:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    4688:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    468a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    468c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4690:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4692:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4696:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4698:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14186 <setVariable>
    469e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    46a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 4710 <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    46a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    46a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    46ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    46ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    46b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    46b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    46b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    46b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    46b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    46bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    46be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    46c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    46c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14186 <setVariable>
    46ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    46ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 4710 <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    46d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    46d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    46d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    46da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    46dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    46de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    46e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    46e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    46e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    46e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    46ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    46ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    46f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14186 <setVariable>
    46f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    46fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 4710 <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    46fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 17439 <PutChar+0xb23>
    4702:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 15fc6 <KPrintF>
    4708:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    470a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    470c:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 4768 <continueFunction+0xeaa>
						break;
    470e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    4710:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 4746 <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    4712:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 17451 <PutChar+0xb3b>
    4718:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 15fc6 <KPrintF>
    471e:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    4720:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    4722:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 4768 <continueFunction+0xeaa>
			break;
    4724:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    4726:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 4746 <continueFunction+0xe88>
			break;
    4728:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    472a:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 4746 <continueFunction+0xe88>
			break;
    472c:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    472e:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 4746 <continueFunction+0xe88>
			break;
    4730:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    4732:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 4746 <continueFunction+0xe88>
			break;
    4734:	|  |  |     |              \--|--|--|--|-------------------> nop
    4736:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 4746 <continueFunction+0xe88>
			break;
    4738:	|  |  |     |                 \--|--|--|-------------------> nop
    473a:	|  |  |     +--------------------|--|--|-------------------- bra.s 4746 <continueFunction+0xe88>
			break;
    473c:	|  |  |     |                    \--|--|-------------------> nop
    473e:	|  |  |     +-----------------------|--|-------------------- bra.s 4746 <continueFunction+0xe88>
			break;
    4740:	|  |  |     |                       \--|-------------------> nop
    4742:	|  |  |     +--------------------------|-------------------- bra.s 4746 <continueFunction+0xe88>
			break;
    4744:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    4746:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    474a:	+--|--|----------------------------------------------------- beq.s 475e <continueFunction+0xea0>
    474c:	|  |  |                                                      movea.l 80(sp),a0
    4750:	|  |  |                                                      move.l 36(a0),d0
    4754:	|  |  |                                                      addq.l #1,d0
    4756:	|  |  |                                                      movea.l 80(sp),a0
    475a:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    475e:	\--|--|----------------------------------------------------> tst.w 74(sp)
    4762:	   |  \----------------------------------------------------- bne.w 38e6 <continueFunction+0x28>

	}
	return TRUE;
    4766:	   |                                                         moveq #1,d0
}
    4768:	   \-------------------------------------------------------> lea 76(sp),sp
    476c:	                                                             rts

0000476e <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    476e:	          lea -16(sp),sp
    4772:	          move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    4774:	          move.l 24(sp),-(sp)
    4778:	          jsr 5894 <pauseFunction>
    477e:	          addq.l #4,sp
	if (fun -> stack) 
    4780:	          movea.l 24(sp),a0
    4784:	          move.l 24(a0),d0
    4788:	      /-- beq.s 479c <finishFunction+0x2e>
	{
		KPrintF("finishfunction: error non empty stack");
    478a:	      |   pea 1747d <PutChar+0xb67>
    4790:	      |   jsr 15fc6 <KPrintF>
    4796:	      |   addq.l #4,sp
		return;
    4798:	/-----|-- bra.w 4836 <finishFunction+0xc8>
	}
	FreeVec( fun -> compiledLines);
    479c:	|     \-> movea.l 24(sp),a0
    47a0:	|         move.l 4(a0),12(sp)
    47a6:	|         move.l 1b5a2 <SysBase>,d0
    47ac:	|         movea.l d0,a6
    47ae:	|         movea.l 12(sp),a1
    47b2:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    47b6:	|         clr.l 16(sp)
    47ba:	|     /-- bra.s 47da <finishFunction+0x6c>
    47bc:	|  /--|-> movea.l 24(sp),a0
    47c0:	|  |  |   move.l 20(a0),d1
    47c4:	|  |  |   move.l 16(sp),d0
    47c8:	|  |  |   lsl.l #3,d0
    47ca:	|  |  |   add.l d1,d0
    47cc:	|  |  |   move.l d0,-(sp)
    47ce:	|  |  |   jsr 13ae2 <unlinkVar>
    47d4:	|  |  |   addq.l #4,sp
    47d6:	|  |  |   addq.l #1,16(sp)
    47da:	|  |  \-> movea.l 24(sp),a0
    47de:	|  |      move.l 8(a0),d0
    47e2:	|  |      cmp.l 16(sp),d0
    47e6:	|  \----- bgt.s 47bc <finishFunction+0x4e>
	if( fun->numLocals > 0) {
    47e8:	|         movea.l 24(sp),a0
    47ec:	|         move.l 8(a0),d0
    47f0:	|     /-- ble.s 480c <finishFunction+0x9e>
		FreeVec(fun -> localVars);
    47f2:	|     |   movea.l 24(sp),a0
    47f6:	|     |   move.l 20(a0),8(sp)
    47fc:	|     |   move.l 1b5a2 <SysBase>,d0
    4802:	|     |   movea.l d0,a6
    4804:	|     |   movea.l 8(sp),a1
    4808:	|     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    480c:	|     \-> moveq #28,d0
    480e:	|         add.l 24(sp),d0
    4812:	|         move.l d0,-(sp)
    4814:	|         jsr 13ae2 <unlinkVar>
    481a:	|         addq.l #4,sp
	FreeVec(fun);
    481c:	|         move.l 24(sp),4(sp)
    4822:	|         move.l 1b5a2 <SysBase>,d0
    4828:	|         movea.l d0,a6
    482a:	|         movea.l 4(sp),a1
    482e:	|         jsr -690(a6)
	fun = NULL;
    4832:	|         clr.l 24(sp)
}
    4836:	\-------> movea.l (sp)+,a6
    4838:	          lea 16(sp),sp
    483c:	          rts

0000483e <freezeSubs>:

void freezeSubs () {
    483e:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    4840:	          move.l 1b53a <allRunningFunctions>,(sp)

	while (thisFunction) {
    4846:	   /----- bra.s 4864 <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    4848:	/--|----> movea.l (sp),a0
    484a:	|  |      move.w 52(a0),d0
    484e:	|  |  /-- bne.s 485e <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    4850:	|  |  |   movea.l (sp),a0
    4852:	|  |  |   move.b 56(a0),d0
    4856:	|  |  |   addq.b #1,d0
    4858:	|  |  |   movea.l (sp),a0
    485a:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    485e:	|  |  \-> movea.l (sp),a0
    4860:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    4864:	|  \----> tst.l (sp)
    4866:	\-------- bne.s 4848 <freezeSubs+0xa>
	}
}
    4868:	          nop
    486a:	          nop
    486c:	          addq.l #4,sp
    486e:	          rts

00004870 <handleInput>:

BOOL handleInput () {
    4870:	             lea -16(sp),sp
    4874:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    4876:	             move.l 1b706 <overRegion>,d0
    487c:	         /-- bne.s 4884 <handleInput+0x14>
    487e:	         |   jsr 14762 <getOverRegion>

	if (input.justMoved) {
    4884:	         \-> move.w 1b558 <input+0x4>,d0
    488a:	         /-- beq.s 48c8 <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    488c:	         |   movea.l 1af1c <currentEvents>,a0
    4892:	         |   move.l 16(a0),d0
    4896:	         +-- beq.s 48c8 <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    4898:	         |   move.l 1b572 <noStack>,d1
    489e:	         |   movea.l 1af1c <currentEvents>,a0
    48a4:	         |   move.l 16(a0),d0
    48a8:	         |   pea 1 <_start+0x1>
    48ac:	         |   move.l d1,-(sp)
    48ae:	         |   clr.l -(sp)
    48b0:	         |   clr.l -(sp)
    48b2:	         |   move.l d0,-(sp)
    48b4:	         |   jsr 5b22 <startNewFunctionNum>
    48ba:	         |   lea 20(sp),sp
    48be:	         |   tst.l d0
    48c0:	         +-- bne.s 48c8 <handleInput+0x58>
    48c2:	         |   clr.w d0
    48c4:	/--------|-- bra.w 4ace <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    48c8:	|        \-> clr.w 1b558 <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    48ce:	|            move.l 1b56a <lastRegion>,d1
    48d4:	|            move.l 1b706 <overRegion>,d0
    48da:	|            cmp.l d1,d0
    48dc:	|  /-------- beq.w 49b4 <handleInput+0x144>
    48e0:	|  |         movea.l 1af1c <currentEvents>,a0
    48e6:	|  |         move.l 20(a0),d0
    48ea:	|  +-------- beq.w 49b4 <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    48ee:	|  |         moveq #12,d0
    48f0:	|  |         move.l d0,16(sp)
    48f4:	|  |         clr.l 12(sp)
    48f8:	|  |         move.l 1b5a2 <SysBase>,d0
    48fe:	|  |         movea.l d0,a6
    4900:	|  |         move.l 16(sp),d0
    4904:	|  |         move.l 12(sp),d1
    4908:	|  |         jsr -684(a6)
    490c:	|  |         move.l d0,8(sp)
    4910:	|  |         move.l 8(sp),d0
    4914:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    4918:	|  |         move.l 4(sp),d0
    491c:	|  |     /-- bne.s 4932 <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    491e:	|  |     |   pea 174a3 <PutChar+0xb8d>
    4924:	|  |     |   jsr 15fc6 <KPrintF>
    492a:	|  |     |   addq.l #4,sp
			return FALSE;
    492c:	|  |     |   clr.w d0
    492e:	+--|-----|-- bra.w 4ace <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    4932:	|  |     \-> movea.l 4(sp),a0
    4936:	|  |         clr.l (a0)
		if (overRegion) {
    4938:	|  |         move.l 1b706 <overRegion>,d0
    493e:	|  |  /----- beq.s 4966 <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    4940:	|  |  |      movea.l 1b706 <overRegion>,a0
    4946:	|  |  |      movea.l 28(a0),a0
    494a:	|  |  |      move.l 4(a0),d1
    494e:	|  |  |      move.l 4(sp),d0
    4952:	|  |  |      move.l d1,-(sp)
    4954:	|  |  |      pea 7 <_start+0x7>
    4958:	|  |  |      move.l d0,-(sp)
    495a:	|  |  |      jsr 14186 <setVariable>
    4960:	|  |  |      lea 12(sp),sp
    4964:	|  |  |  /-- bra.s 497c <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    4966:	|  |  \--|-> move.l 4(sp),d0
    496a:	|  |     |   clr.l -(sp)
    496c:	|  |     |   pea 1 <_start+0x1>
    4970:	|  |     |   move.l d0,-(sp)
    4972:	|  |     |   jsr 14186 <setVariable>
    4978:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;
    497c:	|  |     \-> movea.l 4(sp),a0
    4980:	|  |         clr.l 8(a0)
		if (! startNewFunctionNum (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    4984:	|  |         movea.l 1af1c <currentEvents>,a0
    498a:	|  |         move.l 20(a0),d0
    498e:	|  |         pea 1 <_start+0x1>
    4992:	|  |         lea 8(sp),a0
    4996:	|  |         move.l a0,-(sp)
    4998:	|  |         clr.l -(sp)
    499a:	|  |         pea 1 <_start+0x1>
    499e:	|  |         move.l d0,-(sp)
    49a0:	|  |         jsr 5b22 <startNewFunctionNum>
    49a6:	|  |         lea 20(sp),sp
    49aa:	|  |         tst.l d0
    49ac:	|  +-------- bne.s 49b4 <handleInput+0x144>
    49ae:	|  |         clr.w d0
    49b0:	+--|-------- bra.w 4ace <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    49b4:	|  \-------> move.w 1b55a <input+0x6>,d0
    49ba:	|        /-- beq.s 49f8 <handleInput+0x188>
    49bc:	|        |   movea.l 1af1c <currentEvents>,a0
    49c2:	|        |   move.l 4(a0),d0
    49c6:	|        +-- beq.s 49f8 <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    49c8:	|        |   move.l 1b572 <noStack>,d1
    49ce:	|        |   movea.l 1af1c <currentEvents>,a0
    49d4:	|        |   move.l 4(a0),d0
    49d8:	|        |   pea 1 <_start+0x1>
    49dc:	|        |   move.l d1,-(sp)
    49de:	|        |   clr.l -(sp)
    49e0:	|        |   clr.l -(sp)
    49e2:	|        |   move.l d0,-(sp)
    49e4:	|        |   jsr 5b22 <startNewFunctionNum>
    49ea:	|        |   lea 20(sp),sp
    49ee:	|        |   tst.l d0
    49f0:	|        +-- bne.s 49f8 <handleInput+0x188>
    49f2:	|        |   clr.w d0
    49f4:	+--------|-- bra.w 4ace <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    49f8:	|        \-> move.w 1b55c <input+0x8>,d0
    49fe:	|        /-- beq.s 4a3c <handleInput+0x1cc>
    4a00:	|        |   movea.l 1af1c <currentEvents>,a0
    4a06:	|        |   move.l 12(a0),d0
    4a0a:	|        +-- beq.s 4a3c <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    4a0c:	|        |   move.l 1b572 <noStack>,d1
    4a12:	|        |   movea.l 1af1c <currentEvents>,a0
    4a18:	|        |   move.l 12(a0),d0
    4a1c:	|        |   pea 1 <_start+0x1>
    4a20:	|        |   move.l d1,-(sp)
    4a22:	|        |   clr.l -(sp)
    4a24:	|        |   clr.l -(sp)
    4a26:	|        |   move.l d0,-(sp)
    4a28:	|        |   jsr 5b22 <startNewFunctionNum>
    4a2e:	|        |   lea 20(sp),sp
    4a32:	|        |   tst.l d0
    4a34:	|        +-- bne.s 4a3c <handleInput+0x1cc>
    4a36:	|        |   clr.w d0
    4a38:	+--------|-- bra.w 4ace <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    4a3c:	|        \-> move.w 1b554 <input>,d0
    4a42:	|        /-- beq.s 4a7a <handleInput+0x20a>
    4a44:	|        |   movea.l 1af1c <currentEvents>,a0
    4a4a:	|        |   move.l (a0),d0
    4a4c:	|        +-- beq.s 4a7a <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    4a4e:	|        |   move.l 1b572 <noStack>,d1
    4a54:	|        |   movea.l 1af1c <currentEvents>,a0
    4a5a:	|        |   move.l (a0),d0
    4a5c:	|        |   pea 1 <_start+0x1>
    4a60:	|        |   move.l d1,-(sp)
    4a62:	|        |   clr.l -(sp)
    4a64:	|        |   clr.l -(sp)
    4a66:	|        |   move.l d0,-(sp)
    4a68:	|        |   jsr 5b22 <startNewFunctionNum>
    4a6e:	|        |   lea 20(sp),sp
    4a72:	|        |   tst.l d0
    4a74:	|        +-- bne.s 4a7a <handleInput+0x20a>
    4a76:	|        |   clr.w d0
    4a78:	+--------|-- bra.s 4ace <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    4a7a:	|        \-> move.w 1b556 <input+0x2>,d0
    4a80:	|        /-- beq.s 4abc <handleInput+0x24c>
    4a82:	|        |   movea.l 1af1c <currentEvents>,a0
    4a88:	|        |   move.l 8(a0),d0
    4a8c:	|        +-- beq.s 4abc <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    4a8e:	|        |   move.l 1b572 <noStack>,d1
    4a94:	|        |   movea.l 1af1c <currentEvents>,a0
    4a9a:	|        |   move.l 8(a0),d0
    4a9e:	|        |   pea 1 <_start+0x1>
    4aa2:	|        |   move.l d1,-(sp)
    4aa4:	|        |   clr.l -(sp)
    4aa6:	|        |   clr.l -(sp)
    4aa8:	|        |   move.l d0,-(sp)
    4aaa:	|        |   jsr 5b22 <startNewFunctionNum>
    4ab0:	|        |   lea 20(sp),sp
    4ab4:	|        |   tst.l d0
    4ab6:	|        +-- bne.s 4abc <handleInput+0x24c>
    4ab8:	|        |   clr.w d0
    4aba:	+--------|-- bra.s 4ace <handleInput+0x25e>
	}

	lastRegion = overRegion;
    4abc:	|        \-> move.l 1b706 <overRegion>,d0
    4ac2:	|            move.l d0,1b56a <lastRegion>
	return runSludge ();
    4ac8:	|            jsr 58f0 <runSludge>
}
    4ace:	\----------> movea.l (sp)+,a6
    4ad0:	             lea 16(sp),sp
    4ad4:	             rts

00004ad6 <initSludge>:

BOOL initSludge (char * filename) {
    4ad6:	             lea -292(sp),sp
    4ada:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    4ade:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    4ae2:	             jsr 9e88 <makeNullAnim>
    4ae8:	             move.l d0,1b4aa <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    4aee:	             pea 1b54c <gameVersion>
    4af4:	             pea 174d9 <PutChar+0xbc3>
    4afa:	             pea 45 <_start+0x45>
    4afe:	             pea 47 <_start+0x47>
    4b02:	             move.l 332(sp),-(sp)
    4b06:	             jsr 5524 <openAndVerify>
    4b0c:	             lea 20(sp),sp
    4b10:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    4b14:	         /-- bne.s 4b1c <initSludge+0x46>
    4b16:	         |   clr.w d0
    4b18:	/--------|-- bra.w 5244 <initSludge+0x76e>
	if (FGetC (fp)) {
    4b1c:	|        \-> move.l 288(sp),284(sp)
    4b22:	|            move.l 1b5aa <DOSBase>,d0
    4b28:	|            movea.l d0,a6
    4b2a:	|            move.l 284(sp),d1
    4b2e:	|            jsr -306(a6)
    4b32:	|            move.l d0,280(sp)
    4b36:	|            move.l 280(sp),d0
    4b3a:	|  /-------- beq.w 4ce4 <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    4b3e:	|  |         move.l 288(sp),-(sp)
    4b42:	|  |         jsr 6bc <get2bytes>
    4b48:	|  |         addq.l #4,sp
    4b4a:	|  |         move.l d0,1b576 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    4b50:	|  |         move.l 1b576 <numBIFNames>,d0
    4b56:	|  |         move.l d0,276(sp)
    4b5a:	|  |         clr.l 272(sp)
    4b5e:	|  |         move.l 1b5a2 <SysBase>,d0
    4b64:	|  |         movea.l d0,a6
    4b66:	|  |         move.l 276(sp),d0
    4b6a:	|  |         move.l 272(sp),d1
    4b6e:	|  |         jsr -684(a6)
    4b72:	|  |         move.l d0,268(sp)
    4b76:	|  |         move.l 268(sp),d0
    4b7a:	|  |         move.l d0,1b532 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    4b80:	|  |         move.l 1b532 <allBIFNames>,d0
    4b86:	|  |     /-- bne.s 4b8e <initSludge+0xb8>
    4b88:	|  |     |   clr.w d0
    4b8a:	+--|-----|-- bra.w 5244 <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    4b8e:	|  |     \-> clr.l 304(sp)
    4b92:	|  |     /-- bra.s 4bb8 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    4b94:	|  |  /--|-> move.l 1b532 <allBIFNames>,d1
    4b9a:	|  |  |  |   move.l 304(sp),d0
    4b9e:	|  |  |  |   add.l d0,d0
    4ba0:	|  |  |  |   add.l d0,d0
    4ba2:	|  |  |  |   movea.l d1,a2
    4ba4:	|  |  |  |   adda.l d0,a2
    4ba6:	|  |  |  |   move.l 288(sp),-(sp)
    4baa:	|  |  |  |   jsr b02 <readString>
    4bb0:	|  |  |  |   addq.l #4,sp
    4bb2:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    4bb4:	|  |  |  |   addq.l #1,304(sp)
    4bb8:	|  |  |  \-> move.l 1b576 <numBIFNames>,d0
    4bbe:	|  |  |      cmp.l 304(sp),d0
    4bc2:	|  |  \----- bgt.s 4b94 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    4bc4:	|  |         move.l 288(sp),-(sp)
    4bc8:	|  |         jsr 6bc <get2bytes>
    4bce:	|  |         addq.l #4,sp
    4bd0:	|  |         move.l d0,1b582 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    4bd6:	|  |         move.l 1b582 <numUserFunc>,d0
    4bdc:	|  |         move.l d0,264(sp)
    4be0:	|  |         clr.l 260(sp)
    4be4:	|  |         move.l 1b5a2 <SysBase>,d0
    4bea:	|  |         movea.l d0,a6
    4bec:	|  |         move.l 264(sp),d0
    4bf0:	|  |         move.l 260(sp),d1
    4bf4:	|  |         jsr -684(a6)
    4bf8:	|  |         move.l d0,256(sp)
    4bfc:	|  |         move.l 256(sp),d0
    4c00:	|  |         move.l d0,1b53e <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    4c06:	|  |         move.l 1b53e <allUserFunc>,d0
    4c0c:	|  |     /-- bne.s 4c14 <initSludge+0x13e>
    4c0e:	|  |     |   clr.w d0
    4c10:	+--|-----|-- bra.w 5244 <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    4c14:	|  |     \-> clr.l 300(sp)
    4c18:	|  |     /-- bra.s 4c3e <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    4c1a:	|  |  /--|-> move.l 1b53e <allUserFunc>,d1
    4c20:	|  |  |  |   move.l 300(sp),d0
    4c24:	|  |  |  |   add.l d0,d0
    4c26:	|  |  |  |   add.l d0,d0
    4c28:	|  |  |  |   movea.l d1,a2
    4c2a:	|  |  |  |   adda.l d0,a2
    4c2c:	|  |  |  |   move.l 288(sp),-(sp)
    4c30:	|  |  |  |   jsr b02 <readString>
    4c36:	|  |  |  |   addq.l #4,sp
    4c38:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    4c3a:	|  |  |  |   addq.l #1,300(sp)
    4c3e:	|  |  |  \-> move.l 1b582 <numUserFunc>,d0
    4c44:	|  |  |      cmp.l 300(sp),d0
    4c48:	|  |  \----- bgt.s 4c1a <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    4c4a:	|  |         move.l 1b54c <gameVersion>,d0
    4c50:	|  |         cmpi.l #258,d0
    4c56:	|  +-------- ble.w 4ce4 <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    4c5a:	|  |         move.l 288(sp),-(sp)
    4c5e:	|  |         jsr 6bc <get2bytes>
    4c64:	|  |         addq.l #4,sp
    4c66:	|  |         move.l d0,1b57e <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    4c6c:	|  |         move.l 1b57e <numResourceNames>,d0
    4c72:	|  |         add.l d0,d0
    4c74:	|  |         add.l d0,d0
    4c76:	|  |         move.l d0,252(sp)
    4c7a:	|  |         clr.l 248(sp)
    4c7e:	|  |         move.l 1b5a2 <SysBase>,d0
    4c84:	|  |         movea.l d0,a6
    4c86:	|  |         move.l 252(sp),d0
    4c8a:	|  |         move.l 248(sp),d1
    4c8e:	|  |         jsr -684(a6)
    4c92:	|  |         move.l d0,244(sp)
    4c96:	|  |         move.l 244(sp),d0
    4c9a:	|  |         move.l d0,1b536 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    4ca0:	|  |         move.l 1b536 <allResourceNames>,d0
    4ca6:	|  |     /-- bne.s 4cae <initSludge+0x1d8>
    4ca8:	|  |     |   clr.w d0
    4caa:	+--|-----|-- bra.w 5244 <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    4cae:	|  |     \-> clr.l 296(sp)
    4cb2:	|  |     /-- bra.s 4cd8 <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    4cb4:	|  |  /--|-> move.l 1b536 <allResourceNames>,d1
    4cba:	|  |  |  |   move.l 296(sp),d0
    4cbe:	|  |  |  |   add.l d0,d0
    4cc0:	|  |  |  |   add.l d0,d0
    4cc2:	|  |  |  |   movea.l d1,a2
    4cc4:	|  |  |  |   adda.l d0,a2
    4cc6:	|  |  |  |   move.l 288(sp),-(sp)
    4cca:	|  |  |  |   jsr b02 <readString>
    4cd0:	|  |  |  |   addq.l #4,sp
    4cd2:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    4cd4:	|  |  |  |   addq.l #1,296(sp)
    4cd8:	|  |  |  \-> move.l 1b57e <numResourceNames>,d0
    4cde:	|  |  |      cmp.l 296(sp),d0
    4ce2:	|  |  \----- bgt.s 4cb4 <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    4ce4:	|  \-------> move.l #129,1b55e <input+0xa>
	input.mouseY = 100;
    4cee:	|            moveq #100,d0
    4cf0:	|            move.l d0,1b562 <input+0xe>
	winWidth = get2bytes (fp);
    4cf6:	|            move.l 288(sp),-(sp)
    4cfa:	|            jsr 6bc <get2bytes>
    4d00:	|            addq.l #4,sp
    4d02:	|            move.l d0,1b4f6 <winWidth>
	winHeight = get2bytes (fp);
    4d08:	|            move.l 288(sp),-(sp)
    4d0c:	|            jsr 6bc <get2bytes>
    4d12:	|            addq.l #4,sp
    4d14:	|            move.l d0,1b4fa <winHeight>
	specialSettings = FGetC (fp);
    4d1a:	|            move.l 288(sp),240(sp)
    4d20:	|            move.l 1b5aa <DOSBase>,d0
    4d26:	|            movea.l d0,a6
    4d28:	|            move.l 240(sp),d1
    4d2c:	|            jsr -306(a6)
    4d30:	|            move.l d0,236(sp)
    4d34:	|            move.l 236(sp),d0
    4d38:	|            move.l d0,1b586 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    4d3e:	|            move.l 288(sp),232(sp)
    4d44:	|            move.l 1b5aa <DOSBase>,d0
    4d4a:	|            movea.l d0,a6
    4d4c:	|            move.l 232(sp),d1
    4d50:	|            jsr -306(a6)
    4d54:	|            move.l d0,228(sp)
    4d58:	|            move.l 228(sp),d0
    4d5c:	|            move.l d0,-(sp)
    4d5e:	|            pea 3e8 <encodeFilename+0xea>
    4d62:	|            jsr 1687e <__divsi3>
    4d68:	|            addq.l #8,sp
    4d6a:	|            move.l d0,1af32 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    4d70:	|            move.l 288(sp),-(sp)
    4d74:	|            jsr b02 <readString>
    4d7a:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    4d7c:	|            move.l 288(sp),224(sp)
    4d82:	|            move.l #111940,220(sp)
    4d8a:	|            moveq #8,d1
    4d8c:	|            move.l d1,216(sp)
    4d90:	|            moveq #1,d0
    4d92:	|            move.l d0,212(sp)
    4d96:	|            move.l 1b5aa <DOSBase>,d0
    4d9c:	|            movea.l d0,a6
    4d9e:	|            move.l 224(sp),d1
    4da2:	|            move.l 220(sp),d2
    4da6:	|            move.l 216(sp),d3
    4daa:	|            move.l 212(sp),d4
    4dae:	|            jsr -324(a6)
    4db2:	|            move.l d0,208(sp)
    4db6:	|            move.l 208(sp),d0
    4dba:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    4dbe:	|            moveq #1,d1
    4dc0:	|            cmp.l 204(sp),d1
    4dc4:	|        /-- beq.s 4dd4 <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    4dc6:	|        |   pea 17512 <PutChar+0xbfc>
    4dcc:	|        |   jsr 15fc6 <KPrintF>
    4dd2:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    4dd4:	|        \-> move.l 1b54c <gameVersion>,d0
    4dda:	|            cmpi.l #258,d0
    4de0:	|        /-- ble.s 4df0 <initSludge+0x31a>
    4de2:	|        |   move.l 288(sp),-(sp)
    4de6:	|        |   jsr b02 <readString>
    4dec:	|        |   addq.l #4,sp
    4dee:	|     /--|-- bra.s 4e04 <initSludge+0x32e>
    4df0:	|     |  \-> pea 17530 <PutChar+0xc1a>
    4df6:	|     |      pea 17530 <PutChar+0xc1a>
    4dfc:	|     |      jsr 12dc0 <joinStrings>
    4e02:	|     |      addq.l #8,sp
    4e04:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    4e08:	|            move.l 1b54c <gameVersion>,d0
    4e0e:	|            cmpi.l #258,d0
    4e14:	|     /----- ble.s 4e36 <initSludge+0x360>
    4e16:	|     |      move.l 288(sp),196(sp)
    4e1c:	|     |      move.l 1b5aa <DOSBase>,d0
    4e22:	|     |      movea.l d0,a6
    4e24:	|     |      move.l 196(sp),d1
    4e28:	|     |      jsr -306(a6)
    4e2c:	|     |      move.l d0,192(sp)
    4e30:	|     |      move.l 192(sp),d0
    4e34:	|     |  /-- bra.s 4e38 <initSludge+0x362>
    4e36:	|     \--|-> moveq #0,d0
    4e38:	|        \-> move.l d0,1b6da <gameSettings+0x4>
	makeLanguageTable (fp);
    4e3e:	|            move.l 288(sp),-(sp)
    4e42:	|            jsr 12776 <makeLanguageTable>
    4e48:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    4e4a:	|            move.l 1b54c <gameVersion>,d0
    4e50:	|            cmpi.l #261,d0
    4e56:	|        /-- ble.s 4ea4 <initSludge+0x3ce>
	{
		FGetC(fp);
    4e58:	|        |   move.l 288(sp),188(sp)
    4e5e:	|        |   move.l 1b5aa <DOSBase>,d0
    4e64:	|        |   movea.l d0,a6
    4e66:	|        |   move.l 188(sp),d1
    4e6a:	|        |   jsr -306(a6)
    4e6e:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    4e72:	|        |   move.l 288(sp),180(sp)
    4e78:	|        |   move.l 1b5aa <DOSBase>,d0
    4e7e:	|        |   movea.l d0,a6
    4e80:	|        |   move.l 180(sp),d1
    4e84:	|        |   jsr -306(a6)
    4e88:	|        |   move.l d0,176(sp)
		getFloat (fp);
    4e8c:	|        |   move.l 288(sp),-(sp)
    4e90:	|        |   jsr 7d8 <getFloat>
    4e96:	|        |   addq.l #4,sp
		getFloat (fp);
    4e98:	|        |   move.l 288(sp),-(sp)
    4e9c:	|        |   jsr 7d8 <getFloat>
    4ea2:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    4ea4:	|        \-> move.l 288(sp),-(sp)
    4ea8:	|            jsr b02 <readString>
    4eae:	|            addq.l #4,sp
    4eb0:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    4eb4:	|            pea 17531 <PutChar+0xc1b>
    4eba:	|            move.l 176(sp),-(sp)
    4ebe:	|            jsr 12d40 <strcmp>
    4ec4:	|            addq.l #8,sp
    4ec6:	|            tst.l d0
    4ec8:	|        /-- beq.s 4ed0 <initSludge+0x3fa>
		return FALSE;
    4eca:	|        |   clr.w d0
    4ecc:	+--------|-- bra.w 5244 <initSludge+0x76e>
	}
	FreeVec( checker);
    4ed0:	|        \-> move.l 172(sp),168(sp)
    4ed6:	|            move.l 1b5a2 <SysBase>,d0
    4edc:	|            movea.l d0,a6
    4ede:	|            movea.l 168(sp),a1
    4ee2:	|            jsr -690(a6)
	checker = NULL;
    4ee6:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    4eea:	|            move.l 288(sp),164(sp)
    4ef0:	|            move.l 1b5aa <DOSBase>,d0
    4ef6:	|            movea.l d0,a6
    4ef8:	|            move.l 164(sp),d1
    4efc:	|            jsr -306(a6)
    4f00:	|            move.l d0,160(sp)
    4f04:	|            move.l 160(sp),d0
    4f08:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    4f0c:	|            moveq #0,d0
    4f0e:	|            move.b 159(sp),d0
    4f12:	|            moveq #1,d1
    4f14:	|            and.l d1,d0
    4f16:	|        /-- beq.s 4f6e <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    4f18:	|        |   move.l 1b5aa <DOSBase>,d0
    4f1e:	|        |   movea.l d0,a6
    4f20:	|        |   jsr -60(a6)
    4f24:	|        |   move.l d0,38(sp)
    4f28:	|        |   move.l 38(sp),d0
    4f2c:	|        |   move.l d0,34(sp)
    4f30:	|        |   move.l #95545,30(sp)
    4f38:	|        |   moveq #54,d0
    4f3a:	|        |   move.l d0,26(sp)
    4f3e:	|        |   move.l 1b5aa <DOSBase>,d0
    4f44:	|        |   movea.l d0,a6
    4f46:	|        |   move.l 34(sp),d1
    4f4a:	|        |   move.l 30(sp),d2
    4f4e:	|        |   move.l 26(sp),d3
    4f52:	|        |   jsr -48(a6)
    4f56:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    4f5a:	|        |   pea 17570 <PutChar+0xc5a>
    4f60:	|        |   jsr 15fc6 <KPrintF>
    4f66:	|        |   addq.l #4,sp
		return FALSE;
    4f68:	|        |   clr.w d0
    4f6a:	+--------|-- bra.w 5244 <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    4f6e:	|        \-> move.l 288(sp),-(sp)
    4f72:	|            jsr 6bc <get2bytes>
    4f78:	|            addq.l #4,sp
    4f7a:	|            move.l d0,1b57a <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    4f80:	|            move.l 1b57a <numGlobals>,d0
    4f86:	|            lsl.l #3,d0
    4f88:	|            move.l d0,154(sp)
    4f8c:	|            clr.l 150(sp)
    4f90:	|            move.l 1b5a2 <SysBase>,d0
    4f96:	|            movea.l d0,a6
    4f98:	|            move.l 154(sp),d0
    4f9c:	|            move.l 150(sp),d1
    4fa0:	|            jsr -684(a6)
    4fa4:	|            move.l d0,146(sp)
    4fa8:	|            move.l 146(sp),d0
    4fac:	|            move.l d0,1b550 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    4fb2:	|            move.l 1b550 <globalVars>,d0
    4fb8:	|        /-- bne.s 4fd6 <initSludge+0x500>
    4fba:	|        |   move.l 1b57a <numGlobals>,d0
    4fc0:	|        +-- ble.s 4fd6 <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    4fc2:	|        |   pea 175a8 <PutChar+0xc92>
    4fc8:	|        |   jsr 15fc6 <KPrintF>
    4fce:	|        |   addq.l #4,sp
		return FALSE;
    4fd0:	|        |   clr.w d0
    4fd2:	+--------|-- bra.w 5244 <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    4fd6:	|        \-> clr.l 308(sp)
    4fda:	|        /-- bra.s 4ff2 <initSludge+0x51c>
    4fdc:	|     /--|-> move.l 1b550 <globalVars>,d1
    4fe2:	|     |  |   move.l 308(sp),d0
    4fe6:	|     |  |   lsl.l #3,d0
    4fe8:	|     |  |   movea.l d1,a0
    4fea:	|     |  |   adda.l d0,a0
    4fec:	|     |  |   clr.l (a0)
    4fee:	|     |  |   addq.l #1,308(sp)
    4ff2:	|     |  \-> move.l 1b57a <numGlobals>,d0
    4ff8:	|     |      cmp.l 308(sp),d0
    4ffc:	|     \----- bgt.s 4fdc <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    4ffe:	|            move.l 1b6da <gameSettings+0x4>,d0
    5004:	|            clr.l -(sp)
    5006:	|            move.l d0,-(sp)
    5008:	|            move.l 296(sp),-(sp)
    500c:	|            jsr 6012 <setFileIndices>
    5012:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    5016:	|            pea 1 <_start+0x1>
    501a:	|            jsr 5ccc <getNumberedString>
    5020:	|            addq.l #4,sp
    5022:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    5026:	|            move.l 142(sp),-(sp)
    502a:	|            jsr 2fe <encodeFilename>
    5030:	|            addq.l #4,sp
    5032:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    5036:	|            move.l 142(sp),134(sp)
    503c:	|            move.l 1b5a2 <SysBase>,d0
    5042:	|            movea.l d0,a6
    5044:	|            movea.l 134(sp),a1
    5048:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    504c:	|            move.l 138(sp),130(sp)
    5052:	|            move.l 1b5aa <DOSBase>,d0
    5058:	|            movea.l d0,a6
    505a:	|            move.l 130(sp),d1
    505e:	|            jsr -120(a6)
    5062:	|            move.l d0,126(sp)
    5066:	|            move.l 126(sp),d0
    506a:	|            move.l d0,292(sp)
	if(lock == 0) {
    506e:	|        /-- bne.s 509c <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    5070:	|        |   move.l 138(sp),122(sp)
    5076:	|        |   moveq #-2,d1
    5078:	|        |   move.l d1,118(sp)
    507c:	|        |   move.l 1b5aa <DOSBase>,d0
    5082:	|        |   movea.l d0,a6
    5084:	|        |   move.l 122(sp),d1
    5088:	|        |   move.l 118(sp),d2
    508c:	|        |   jsr -84(a6)
    5090:	|        |   move.l d0,114(sp)
    5094:	|        |   move.l 114(sp),d0
    5098:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    509c:	|        \-> move.l 292(sp),110(sp)
    50a2:	|            move.l 1b5aa <DOSBase>,d0
    50a8:	|            movea.l d0,a6
    50aa:	|            move.l 110(sp),d1
    50ae:	|            jsr -126(a6)
    50b2:	|            move.l d0,106(sp)
    50b6:	|            move.l 106(sp),d0
    50ba:	|        /-- bne.s 5116 <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    50bc:	|        |   move.l 138(sp),-(sp)
    50c0:	|        |   pea 175db <PutChar+0xcc5>
    50c6:	|        |   jsr 15fc6 <KPrintF>
    50cc:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    50ce:	|        |   move.l 1b5aa <DOSBase>,d0
    50d4:	|        |   movea.l d0,a6
    50d6:	|        |   jsr -60(a6)
    50da:	|        |   move.l d0,58(sp)
    50de:	|        |   move.l 58(sp),d0
    50e2:	|        |   move.l d0,54(sp)
    50e6:	|        |   move.l #95752,50(sp)
    50ee:	|        |   moveq #40,d0
    50f0:	|        |   move.l d0,46(sp)
    50f4:	|        |   move.l 1b5aa <DOSBase>,d0
    50fa:	|        |   movea.l d0,a6
    50fc:	|        |   move.l 54(sp),d1
    5100:	|        |   move.l 50(sp),d2
    5104:	|        |   move.l 46(sp),d3
    5108:	|        |   jsr -48(a6)
    510c:	|        |   move.l d0,42(sp)
		return FALSE;
    5110:	|        |   clr.w d0
    5112:	+--------|-- bra.w 5244 <initSludge+0x76e>
	}

	FreeVec(gameName);
    5116:	|        \-> move.l 138(sp),102(sp)
    511c:	|            move.l 1b5a2 <SysBase>,d0
    5122:	|            movea.l d0,a6
    5124:	|            movea.l 102(sp),a1
    5128:	|            jsr -690(a6)

	readIniFile (filename);
    512c:	|            move.l 316(sp),-(sp)
    5130:	|            jsr 128aa <readIniFile>
    5136:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    5138:	|            jsr 1267c <getLanguageForFileB>
    513e:	|            move.l d0,1af20 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    5144:	|            move.l 1af20 <languageNum>,d0
    514a:	|        /-- bpl.s 515a <initSludge+0x684>
    514c:	|        |   pea 17631 <PutChar+0xd1b>
    5152:	|        |   jsr 15fc6 <KPrintF>
    5158:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    515a:	|        \-> move.l 1af20 <languageNum>,d0
    5160:	|            move.l d0,d1
    5162:	|            move.l 1b6da <gameSettings+0x4>,d0
    5168:	|            move.l d1,-(sp)
    516a:	|            move.l d0,-(sp)
    516c:	|            clr.l -(sp)
    516e:	|            jsr 6012 <setFileIndices>
    5174:	|            lea 12(sp),sp

	if (dataFol[0]) {
    5178:	|            movea.l 200(sp),a0
    517c:	|            move.b (a0),d0
    517e:	|     /----- beq.w 5228 <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    5182:	|     |      move.l 200(sp),-(sp)
    5186:	|     |      jsr 2fe <encodeFilename>
    518c:	|     |      addq.l #4,sp
    518e:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    5192:	|     |      move.l 98(sp),94(sp)
    5198:	|     |      move.l 1b5aa <DOSBase>,d0
    519e:	|     |      movea.l d0,a6
    51a0:	|     |      move.l 94(sp),d1
    51a4:	|     |      jsr -120(a6)
    51a8:	|     |      move.l d0,90(sp)
    51ac:	|     |      move.l 90(sp),d0
    51b0:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    51b4:	|     |  /-- bne.s 51e2 <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    51b6:	|     |  |   move.l 98(sp),86(sp)
    51bc:	|     |  |   moveq #-2,d1
    51be:	|     |  |   move.l d1,82(sp)
    51c2:	|     |  |   move.l 1b5aa <DOSBase>,d0
    51c8:	|     |  |   movea.l d0,a6
    51ca:	|     |  |   move.l 86(sp),d1
    51ce:	|     |  |   move.l 82(sp),d2
    51d2:	|     |  |   jsr -84(a6)
    51d6:	|     |  |   move.l d0,78(sp)
    51da:	|     |  |   move.l 78(sp),d0
    51de:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    51e2:	|     |  \-> move.l 292(sp),74(sp)
    51e8:	|     |      move.l 1b5aa <DOSBase>,d0
    51ee:	|     |      movea.l d0,a6
    51f0:	|     |      move.l 74(sp),d1
    51f4:	|     |      jsr -126(a6)
    51f8:	|     |      move.l d0,70(sp)
    51fc:	|     |      move.l 70(sp),d0
    5200:	|     |  /-- bne.s 5212 <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    5202:	|     |  |   move.l 1b5aa <DOSBase>,d0
    5208:	|     |  |   movea.l d0,a6
    520a:	|     |  |   jsr -60(a6)
    520e:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    5212:	|     |  \-> move.l 98(sp),62(sp)
    5218:	|     |      move.l 1b5a2 <SysBase>,d0
    521e:	|     |      movea.l d0,a6
    5220:	|     |      movea.l 62(sp),a1
    5224:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    5228:	|     \----> movea.l 1b4fa <winHeight>,a0
    522e:	|            lea -15(a0),a0
    5232:	|            move.l a0,d0
    5234:	|            move.l d0,-(sp)
    5236:	|            pea a <_start+0xa>
    523a:	|            jsr 6a44 <positionStatus>
    5240:	|            addq.l #8,sp

	return TRUE;
    5242:	|            moveq #1,d0
}
    5244:	\----------> movem.l (sp)+,d2-d4/a2/a6
    5248:	             lea 292(sp),sp
    524c:	             rts

0000524e <killSpeechTimers>:

void killSpeechTimers () {
    524e:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    5250:	          move.l 1b53a <allRunningFunctions>,(sp)

	while (thisFunction) {
    5256:	   /----- bra.s 5282 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    5258:	/--|----> movea.l (sp),a0
    525a:	|  |      move.b 56(a0),d0
    525e:	|  |  /-- bne.s 527c <killSpeechTimers+0x2e>
    5260:	|  |  |   movea.l (sp),a0
    5262:	|  |  |   move.w 50(a0),d0
    5266:	|  |  +-- beq.s 527c <killSpeechTimers+0x2e>
    5268:	|  |  |   movea.l (sp),a0
    526a:	|  |  |   move.l 12(a0),d0
    526e:	|  |  +-- beq.s 527c <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    5270:	|  |  |   movea.l (sp),a0
    5272:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    5276:	|  |  |   movea.l (sp),a0
    5278:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    527c:	|  |  \-> movea.l (sp),a0
    527e:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    5282:	|  \----> tst.l (sp)
    5284:	\-------- bne.s 5258 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    5286:	          jsr 6f82 <killAllSpeech>
}
    528c:	          nop
    528e:	          addq.l #4,sp
    5290:	          rts

00005292 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    5292:	             lea -52(sp),sp
    5296:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    5298:	             movea.l 60(sp),a0
    529c:	             move.l (a0),d0
    529e:	             move.l d0,-(sp)
    52a0:	             jsr 5f52 <openSubSlice>
    52a6:	             addq.l #4,sp
    52a8:	             tst.w d0
    52aa:	         /-- bne.s 52b2 <loadFunctionCode+0x20>
    52ac:	         |   clr.w d0
    52ae:	/--------|-- bra.w 547c <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    52b2:	|        \-> move.l 1b58a <bigDataFile>,44(sp)
    52ba:	|            move.l 1b5aa <DOSBase>,d0
    52c0:	|            movea.l d0,a6
    52c2:	|            move.l 44(sp),d1
    52c6:	|            jsr -306(a6)
    52ca:	|            move.l d0,40(sp)
    52ce:	|            move.l 40(sp),d0
    52d2:	|            move.l d0,d0
    52d4:	|            movea.l 60(sp),a0
    52d8:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    52dc:	|            move.l 1b58a <bigDataFile>,d0
    52e2:	|            move.l d0,-(sp)
    52e4:	|            jsr 6bc <get2bytes>
    52ea:	|            addq.l #4,sp
    52ec:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    52f0:	|            move.l 1b58a <bigDataFile>,d0
    52f6:	|            move.l d0,-(sp)
    52f8:	|            jsr 6bc <get2bytes>
    52fe:	|            addq.l #4,sp
    5300:	|            movea.l 60(sp),a0
    5304:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    5308:	|            move.l 1b58a <bigDataFile>,d0
    530e:	|            move.l d0,-(sp)
    5310:	|            jsr 6bc <get2bytes>
    5316:	|            addq.l #4,sp
    5318:	|            movea.l 60(sp),a0
    531c:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    5320:	|            move.l 36(sp),d0
    5324:	|            lsl.l #3,d0
    5326:	|            move.l d0,32(sp)
    532a:	|            clr.l 28(sp)
    532e:	|            move.l 1b5a2 <SysBase>,d0
    5334:	|            movea.l d0,a6
    5336:	|            move.l 32(sp),d0
    533a:	|            move.l 28(sp),d1
    533e:	|            jsr -684(a6)
    5342:	|            move.l d0,24(sp)
    5346:	|            move.l 24(sp),d0
    534a:	|            movea.l 60(sp),a0
    534e:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    5352:	|            movea.l 60(sp),a0
    5356:	|            move.l 4(a0),d0
    535a:	|        /-- bne.s 5370 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    535c:	|        |   pea 1765c <PutChar+0xd46>
    5362:	|        |   jsr 15fc6 <KPrintF>
    5368:	|        |   addq.l #4,sp
		return FALSE;
    536a:	|        |   clr.w d0
    536c:	+--------|-- bra.w 547c <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    5370:	|        \-> clr.l 52(sp)
    5374:	|        /-- bra.s 53d6 <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    5376:	|     /--|-> move.l 1b58a <bigDataFile>,8(sp)
    537e:	|     |  |   move.l 1b5aa <DOSBase>,d0
    5384:	|     |  |   movea.l d0,a6
    5386:	|     |  |   move.l 8(sp),d1
    538a:	|     |  |   jsr -306(a6)
    538e:	|     |  |   move.l d0,4(sp)
    5392:	|     |  |   move.l 4(sp),d1
    5396:	|     |  |   movea.l 60(sp),a0
    539a:	|     |  |   movea.l 4(a0),a0
    539e:	|     |  |   move.l 52(sp),d0
    53a2:	|     |  |   lsl.l #3,d0
    53a4:	|     |  |   adda.l d0,a0
    53a6:	|     |  |   move.l d1,d0
    53a8:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    53aa:	|     |  |   move.l 1b58a <bigDataFile>,d0
    53b0:	|     |  |   move.l d0,-(sp)
    53b2:	|     |  |   jsr 6bc <get2bytes>
    53b8:	|     |  |   addq.l #4,sp
    53ba:	|     |  |   move.l d0,d1
    53bc:	|     |  |   movea.l 60(sp),a0
    53c0:	|     |  |   movea.l 4(a0),a0
    53c4:	|     |  |   move.l 52(sp),d0
    53c8:	|     |  |   lsl.l #3,d0
    53ca:	|     |  |   adda.l d0,a0
    53cc:	|     |  |   move.l d1,d0
    53ce:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    53d2:	|     |  |   addq.l #1,52(sp)
    53d6:	|     |  \-> move.l 52(sp),d0
    53da:	|     |      cmp.l 36(sp),d0
    53de:	|     \----- bcs.s 5376 <loadFunctionCode+0xe4>
	}

	finishAccess ();
    53e0:	|            jsr 5cc2 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    53e6:	|            movea.l 60(sp),a0
    53ea:	|            move.l 8(a0),d0
    53ee:	|  /-------- ble.w 5472 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    53f2:	|  |         movea.l 60(sp),a0
    53f6:	|  |         move.l 8(a0),d0
    53fa:	|  |         lsl.l #3,d0
    53fc:	|  |         move.l d0,20(sp)
    5400:	|  |         clr.l 16(sp)
    5404:	|  |         move.l 1b5a2 <SysBase>,d0
    540a:	|  |         movea.l d0,a6
    540c:	|  |         move.l 20(sp),d0
    5410:	|  |         move.l 16(sp),d1
    5414:	|  |         jsr -684(a6)
    5418:	|  |         move.l d0,12(sp)
    541c:	|  |         move.l 12(sp),d0
    5420:	|  |         movea.l 60(sp),a0
    5424:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    5428:	|  |         movea.l 60(sp),a0
    542c:	|  |         move.l 20(a0),d0
    5430:	|  |     /-- bne.s 5444 <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    5432:	|  |     |   pea 1765c <PutChar+0xd46>
    5438:	|  |     |   jsr 15fc6 <KPrintF>
    543e:	|  |     |   addq.l #4,sp
			return FALSE;
    5440:	|  |     |   clr.w d0
    5442:	+--|-----|-- bra.s 547c <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    5444:	|  |     \-> clr.l 48(sp)
    5448:	|  |     /-- bra.s 5462 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    544a:	|  |  /--|-> movea.l 60(sp),a0
    544e:	|  |  |  |   move.l 20(a0),d1
    5452:	|  |  |  |   move.l 48(sp),d0
    5456:	|  |  |  |   lsl.l #3,d0
    5458:	|  |  |  |   movea.l d1,a0
    545a:	|  |  |  |   adda.l d0,a0
    545c:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    545e:	|  |  |  |   addq.l #1,48(sp)
    5462:	|  |  |  \-> movea.l 60(sp),a0
    5466:	|  |  |      move.l 8(a0),d0
    546a:	|  |  |      cmp.l 48(sp),d0
    546e:	|  |  \----- bgt.s 544a <loadFunctionCode+0x1b8>
    5470:	|  |     /-- bra.s 547a <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    5472:	|  \-----|-> movea.l 60(sp),a0
    5476:	|        |   clr.l 8(a0)
	}
	return TRUE;
    547a:	|        \-> moveq #1,d0
}
    547c:	\----------> movea.l (sp)+,a6
    547e:	             lea 52(sp),sp
    5482:	             rts

00005484 <loadHandlers>:

void loadHandlers (BPTR fp) {
    5484:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    5486:	movea.l 1af1c <currentEvents>,a2
    548c:	move.l 8(sp),-(sp)
    5490:	jsr 6bc <get2bytes>
    5496:	addq.l #4,sp
    5498:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    549a:	movea.l 1af1c <currentEvents>,a2
    54a0:	move.l 8(sp),-(sp)
    54a4:	jsr 6bc <get2bytes>
    54aa:	addq.l #4,sp
    54ac:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    54b0:	movea.l 1af1c <currentEvents>,a2
    54b6:	move.l 8(sp),-(sp)
    54ba:	jsr 6bc <get2bytes>
    54c0:	addq.l #4,sp
    54c2:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    54c6:	movea.l 1af1c <currentEvents>,a2
    54cc:	move.l 8(sp),-(sp)
    54d0:	jsr 6bc <get2bytes>
    54d6:	addq.l #4,sp
    54d8:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    54dc:	movea.l 1af1c <currentEvents>,a2
    54e2:	move.l 8(sp),-(sp)
    54e6:	jsr 6bc <get2bytes>
    54ec:	addq.l #4,sp
    54ee:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    54f2:	movea.l 1af1c <currentEvents>,a2
    54f8:	move.l 8(sp),-(sp)
    54fc:	jsr 6bc <get2bytes>
    5502:	addq.l #4,sp
    5504:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    5508:	movea.l 1af1c <currentEvents>,a2
    550e:	move.l 8(sp),-(sp)
    5512:	jsr 6bc <get2bytes>
    5518:	addq.l #4,sp
    551a:	move.l d0,24(a2)
}
    551e:	nop
    5520:	movea.l (sp)+,a2
    5522:	rts

00005524 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    5524:	       lea -312(sp),sp
    5528:	       movem.l d2-d3/a6,-(sp)
    552c:	       move.l 332(sp),d1
    5530:	       move.l 336(sp),d0
    5534:	       move.b d1,d1
    5536:	       move.b d1,16(sp)
    553a:	       move.b d0,d0
    553c:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    5540:	       move.l 328(sp),318(sp)
    5546:	       move.l #1005,314(sp)
    554e:	       move.l 1b5aa <DOSBase>,d0
    5554:	       movea.l d0,a6
    5556:	       move.l 318(sp),d1
    555a:	       move.l 314(sp),d2
    555e:	       jsr -30(a6)
    5562:	       move.l d0,310(sp)
    5566:	       move.l 310(sp),d0
    556a:	       move.l d0,306(sp)

	if (! fp) {
    556e:	   /-- bne.s 55ca <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    5570:	   |   move.l 1b5aa <DOSBase>,d0
    5576:	   |   movea.l d0,a6
    5578:	   |   jsr -60(a6)
    557c:	   |   move.l d0,154(sp)
    5580:	   |   move.l 154(sp),d0
    5584:	   |   move.l d0,150(sp)
    5588:	   |   move.l #95877,146(sp)
    5590:	   |   moveq #31,d0
    5592:	   |   move.l d0,142(sp)
    5596:	   |   move.l 1b5aa <DOSBase>,d0
    559c:	   |   movea.l d0,a6
    559e:	   |   move.l 150(sp),d1
    55a2:	   |   move.l 146(sp),d2
    55a6:	   |   move.l 142(sp),d3
    55aa:	   |   jsr -48(a6)
    55ae:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    55b2:	   |   move.l 328(sp),-(sp)
    55b6:	   |   pea 176a5 <PutChar+0xd8f>
    55bc:	   |   jsr 15fc6 <KPrintF>
    55c2:	   |   addq.l #8,sp
		return NULL;
    55c4:	   |   moveq #0,d0
    55c6:	/--|-- bra.w 588a <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    55ca:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    55ce:	|      move.l 306(sp),302(sp)
    55d4:	|      move.l 1b5aa <DOSBase>,d0
    55da:	|      movea.l d0,a6
    55dc:	|      move.l 302(sp),d1
    55e0:	|      jsr -306(a6)
    55e4:	|      move.l d0,298(sp)
    55e8:	|      move.l 298(sp),d0
    55ec:	|      moveq #83,d1
    55ee:	|      cmp.l d0,d1
    55f0:	|  /-- beq.s 55f8 <openAndVerify+0xd4>
    55f2:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    55f8:	|  \-> move.l 306(sp),294(sp)
    55fe:	|      move.l 1b5aa <DOSBase>,d0
    5604:	|      movea.l d0,a6
    5606:	|      move.l 294(sp),d1
    560a:	|      jsr -306(a6)
    560e:	|      move.l d0,290(sp)
    5612:	|      move.l 290(sp),d0
    5616:	|      moveq #76,d1
    5618:	|      cmp.l d0,d1
    561a:	|  /-- beq.s 5622 <openAndVerify+0xfe>
    561c:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    5622:	|  \-> move.l 306(sp),286(sp)
    5628:	|      move.l 1b5aa <DOSBase>,d0
    562e:	|      movea.l d0,a6
    5630:	|      move.l 286(sp),d1
    5634:	|      jsr -306(a6)
    5638:	|      move.l d0,282(sp)
    563c:	|      move.l 282(sp),d0
    5640:	|      moveq #85,d1
    5642:	|      cmp.l d0,d1
    5644:	|  /-- beq.s 564c <openAndVerify+0x128>
    5646:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    564c:	|  \-> move.l 306(sp),278(sp)
    5652:	|      move.l 1b5aa <DOSBase>,d0
    5658:	|      movea.l d0,a6
    565a:	|      move.l 278(sp),d1
    565e:	|      jsr -306(a6)
    5662:	|      move.l d0,274(sp)
    5666:	|      move.l 274(sp),d0
    566a:	|      moveq #68,d1
    566c:	|      cmp.l d0,d1
    566e:	|  /-- beq.s 5676 <openAndVerify+0x152>
    5670:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    5676:	|  \-> move.l 306(sp),270(sp)
    567c:	|      move.l 1b5aa <DOSBase>,d0
    5682:	|      movea.l d0,a6
    5684:	|      move.l 270(sp),d1
    5688:	|      jsr -306(a6)
    568c:	|      move.l d0,266(sp)
    5690:	|      move.l 266(sp),d1
    5694:	|      move.b 16(sp),d0
    5698:	|      ext.w d0
    569a:	|      movea.w d0,a0
    569c:	|      cmpa.l d1,a0
    569e:	|  /-- beq.s 56a6 <openAndVerify+0x182>
    56a0:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    56a6:	|  \-> move.l 306(sp),262(sp)
    56ac:	|      move.l 1b5aa <DOSBase>,d0
    56b2:	|      movea.l d0,a6
    56b4:	|      move.l 262(sp),d1
    56b8:	|      jsr -306(a6)
    56bc:	|      move.l d0,258(sp)
    56c0:	|      move.l 258(sp),d1
    56c4:	|      move.b 14(sp),d0
    56c8:	|      ext.w d0
    56ca:	|      movea.w d0,a0
    56cc:	|      cmpa.l d1,a0
    56ce:	|  /-- beq.s 56d6 <openAndVerify+0x1b2>
    56d0:	|  |   move.w #1,322(sp)
	if (headerBad) {
    56d6:	|  \-> tst.w 322(sp)
    56da:	|  /-- beq.s 5732 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    56dc:	|  |   move.l 1b5aa <DOSBase>,d0
    56e2:	|  |   movea.l d0,a6
    56e4:	|  |   jsr -60(a6)
    56e8:	|  |   move.l d0,174(sp)
    56ec:	|  |   move.l 174(sp),d0
    56f0:	|  |   move.l d0,170(sp)
    56f4:	|  |   move.l #95940,166(sp)
    56fc:	|  |   moveq #31,d0
    56fe:	|  |   move.l d0,162(sp)
    5702:	|  |   move.l 1b5aa <DOSBase>,d0
    5708:	|  |   movea.l d0,a6
    570a:	|  |   move.l 170(sp),d1
    570e:	|  |   move.l 166(sp),d2
    5712:	|  |   move.l 162(sp),d3
    5716:	|  |   jsr -48(a6)
    571a:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    571e:	|  |   pea 176c4 <PutChar+0xdae>
    5724:	|  |   jsr 15fc6 <KPrintF>
    572a:	|  |   addq.l #4,sp
		return NULL;
    572c:	|  |   moveq #0,d0
    572e:	+--|-- bra.w 588a <openAndVerify+0x366>
	}
	FGetC (fp);
    5732:	|  \-> move.l 306(sp),254(sp)
    5738:	|      move.l 1b5aa <DOSBase>,d0
    573e:	|      movea.l d0,a6
    5740:	|      move.l 254(sp),d1
    5744:	|      jsr -306(a6)
    5748:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    574c:	|      nop
    574e:	|  /-> move.l 306(sp),246(sp)
    5754:	|  |   move.l 1b5aa <DOSBase>,d0
    575a:	|  |   movea.l d0,a6
    575c:	|  |   move.l 246(sp),d1
    5760:	|  |   jsr -306(a6)
    5764:	|  |   move.l d0,242(sp)
    5768:	|  |   move.l 242(sp),d0
    576c:	|  \-- bne.s 574e <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    576e:	|      move.l 306(sp),238(sp)
    5774:	|      move.l 1b5aa <DOSBase>,d0
    577a:	|      movea.l d0,a6
    577c:	|      move.l 238(sp),d1
    5780:	|      jsr -306(a6)
    5784:	|      move.l d0,234(sp)
    5788:	|      move.l 234(sp),d0
    578c:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    5790:	|      move.l 306(sp),226(sp)
    5796:	|      move.l 1b5aa <DOSBase>,d0
    579c:	|      movea.l d0,a6
    579e:	|      move.l 226(sp),d1
    57a2:	|      jsr -306(a6)
    57a6:	|      move.l d0,222(sp)
    57aa:	|      move.l 222(sp),d0
    57ae:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    57b2:	|      move.l 230(sp),d0
    57b6:	|      lsl.l #8,d0
    57b8:	|      add.l 218(sp),d0
    57bc:	|      movea.l 344(sp),a0
    57c0:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    57c2:	|      movea.l 344(sp),a0
    57c6:	|      move.l (a0),d0
    57c8:	|      cmpi.l #514,d0
    57ce:	|  /-- ble.s 5824 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    57d0:	|  |   move.l 1b5aa <DOSBase>,d0
    57d6:	|  |   movea.l d0,a6
    57d8:	|  |   jsr -60(a6)
    57dc:	|  |   move.l d0,194(sp)
    57e0:	|  |   move.l 194(sp),d0
    57e4:	|  |   move.l d0,190(sp)
    57e8:	|  |   move.l #95967,186(sp)
    57f0:	|  |   moveq #100,d1
    57f2:	|  |   move.l d1,182(sp)
    57f6:	|  |   move.l 1b5aa <DOSBase>,d0
    57fc:	|  |   movea.l d0,a6
    57fe:	|  |   move.l 190(sp),d1
    5802:	|  |   move.l 186(sp),d2
    5806:	|  |   move.l 182(sp),d3
    580a:	|  |   jsr -48(a6)
    580e:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    5812:	|  |   pea 176df <PutChar+0xdc9>
    5818:	|  |   jsr 15fc6 <KPrintF>
    581e:	|  |   addq.l #4,sp
		return NULL;
    5820:	|  |   moveq #0,d0
    5822:	+--|-- bra.s 588a <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    5824:	|  \-> movea.l 344(sp),a0
    5828:	|      move.l (a0),d0
    582a:	|      cmpi.l #257,d0
    5830:	|  /-- bgt.s 5886 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    5832:	|  |   move.l 1b5aa <DOSBase>,d0
    5838:	|  |   movea.l d0,a6
    583a:	|  |   jsr -60(a6)
    583e:	|  |   move.l d0,214(sp)
    5842:	|  |   move.l 214(sp),d0
    5846:	|  |   move.l d0,210(sp)
    584a:	|  |   move.l #96036,206(sp)
    5852:	|  |   moveq #100,d0
    5854:	|  |   move.l d0,202(sp)
    5858:	|  |   move.l 1b5aa <DOSBase>,d0
    585e:	|  |   movea.l d0,a6
    5860:	|  |   move.l 210(sp),d1
    5864:	|  |   move.l 206(sp),d2
    5868:	|  |   move.l 202(sp),d3
    586c:	|  |   jsr -48(a6)
    5870:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    5874:	|  |   pea 17724 <PutChar+0xe0e>
    587a:	|  |   jsr 15fc6 <KPrintF>
    5880:	|  |   addq.l #4,sp
		return NULL;
    5882:	|  |   moveq #0,d0
    5884:	+--|-- bra.s 588a <openAndVerify+0x366>
	}
	return fp;
    5886:	|  \-> move.l 306(sp),d0
}
    588a:	\----> movem.l (sp)+,d2-d3/a6
    588e:	       lea 312(sp),sp
    5892:	       rts

00005894 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    5894:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    5896:	          move.l #111930,(sp)
	while (* huntAndDestroy) {
    589c:	   /----- bra.s 58c8 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    589e:	/--|----> movea.l (sp),a0
    58a0:	|  |      move.l (a0),d0
    58a2:	|  |      cmp.l 8(sp),d0
    58a6:	|  |  /-- bne.s 58be <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    58a8:	|  |  |   movea.l (sp),a0
    58aa:	|  |  |   movea.l (a0),a0
    58ac:	|  |  |   move.l 44(a0),d0
    58b0:	|  |  |   movea.l (sp),a0
    58b2:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    58b4:	|  |  |   movea.l 8(sp),a0
    58b8:	|  |  |   clr.l 44(a0)
    58bc:	|  +--|-- bra.s 58c8 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    58be:	|  |  \-> movea.l (sp),a0
    58c0:	|  |      move.l (a0),d0
    58c2:	|  |      moveq #44,d1
    58c4:	|  |      add.l d0,d1
    58c6:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    58c8:	|  \----> movea.l (sp),a0
    58ca:	|         move.l (a0),d0
    58cc:	\-------- bne.s 589e <pauseFunction+0xa>
		}
	}
}
    58ce:	          nop
    58d0:	          nop
    58d2:	          addq.l #4,sp
    58d4:	          rts

000058d6 <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    58d6:	move.l 1b53a <allRunningFunctions>,d0
    58dc:	movea.l 4(sp),a0
    58e0:	move.l d0,44(a0)
	allRunningFunctions = fun;
    58e4:	move.l 4(sp),1b53a <allRunningFunctions>
}
    58ec:	nop
    58ee:	rts

000058f0 <runSludge>:

BOOL runSludge () {
    58f0:	                   lea -12(sp),sp
    58f4:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    58f6:	                   move.l 1b53a <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    58fe:	      /----------- bra.s 597a <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    5900:	   /--|----------> movea.l 12(sp),a0
    5904:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    590a:	   |  |            movea.l 12(sp),a0
    590e:	   |  |            move.b 56(a0),d0
    5912:	   |  |  /-------- bne.s 5974 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    5914:	   |  |  |         movea.l 12(sp),a0
    5918:	   |  |  |         move.l 12(a0),d0
    591c:	   |  |  |  /----- beq.s 5946 <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    591e:	   |  |  |  |      movea.l 12(sp),a0
    5922:	   |  |  |  |      move.l 12(a0),d0
    5926:	   |  |  |  |  /-- bpl.s 5932 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    5928:	   |  |  |  |  |   movea.l 12(sp),a0
    592c:	   |  |  |  |  |   clr.l 12(a0)
    5930:	   |  |  +--|--|-- bra.s 5974 <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    5932:	   |  |  |  |  \-> movea.l 12(sp),a0
    5936:	   |  |  |  |      move.l 12(a0),d0
    593a:	   |  |  |  |      subq.l #1,d0
    593c:	   |  |  |  |      movea.l 12(sp),a0
    5940:	   |  |  |  |      move.l d0,12(a0)
    5944:	   |  |  +--|----- bra.s 5974 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    5946:	   |  |  |  \----> movea.l 12(sp),a0
    594a:	   |  |  |         move.w 50(a0),d0
    594e:	   |  |  |     /-- beq.s 595e <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    5950:	   |  |  |     |   movea.l 12(sp),a0
    5954:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    5958:	   |  |  |     |   jsr 6f82 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    595e:	   |  |  |     \-> move.l 12(sp),-(sp)
    5962:	   |  |  |         jsr 38be <continueFunction>
    5968:	   |  |  |         addq.l #4,sp
    596a:	   |  |  |         tst.w d0
    596c:	   |  |  +-------- bne.s 5974 <runSludge+0x84>
					return FALSE;
    596e:	   |  |  |         clr.w d0
    5970:	/--|--|--|-------- bra.w 5a00 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    5974:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    597a:	|  |  \----------> tst.l 12(sp)
    597e:	|  \-------------- bne.s 5900 <runSludge+0x10>
	}

	if (loadNow) {
    5980:	|                  move.l 1b56e <loadNow>,d0
    5986:	|        /-------- beq.s 59fe <runSludge+0x10e>
		if (loadNow[0] == ':') {
    5988:	|        |         movea.l 1b56e <loadNow>,a0
    598e:	|        |         move.b (a0),d0
    5990:	|        |         cmpi.b #58,d0
    5994:	|        |  /----- bne.s 59c8 <runSludge+0xd8>
			saveGame (loadNow + 1);
    5996:	|        |  |      move.l 1b56e <loadNow>,d0
    599c:	|        |  |      addq.l #1,d0
    599e:	|        |  |      move.l d0,-(sp)
    59a0:	|        |  |      jsr b85a <saveGame>
    59a6:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    59a8:	|        |  |      movea.l 1b6c4 <saverFunc>,a0
    59ae:	|        |  |      lea 28(a0),a0
    59b2:	|        |  |      pea 1 <_start+0x1>
    59b6:	|        |  |      pea 1 <_start+0x1>
    59ba:	|        |  |      move.l a0,-(sp)
    59bc:	|        |  |      jsr 14186 <setVariable>
    59c2:	|        |  |      lea 12(sp),sp
    59c6:	|        |  |  /-- bra.s 59e0 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    59c8:	|        |  \--|-> move.l 1b56e <loadNow>,d0
    59ce:	|        |     |   move.l d0,-(sp)
    59d0:	|        |     |   jsr b3a2 <loadGame>
    59d6:	|        |     |   addq.l #4,sp
    59d8:	|        |     |   tst.w d0
    59da:	|        |     +-- bne.s 59e0 <runSludge+0xf0>
    59dc:	|        |     |   clr.w d0
    59de:	+--------|-----|-- bra.s 5a00 <runSludge+0x110>
		}
		FreeVec(loadNow);
    59e0:	|        |     \-> move.l 1b56e <loadNow>,8(sp)
    59e8:	|        |         move.l 1b5a2 <SysBase>,d0
    59ee:	|        |         movea.l d0,a6
    59f0:	|        |         movea.l 8(sp),a1
    59f4:	|        |         jsr -690(a6)
		loadNow = NULL;
    59f8:	|        |         clr.l 1b56e <loadNow>
	}

	return TRUE;
    59fe:	|        \-------> moveq #1,d0
}
    5a00:	\----------------> movea.l (sp)+,a6
    5a02:	                   lea 12(sp),sp
    5a06:	                   rts

00005a08 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    5a08:	movea.l 1af1c <currentEvents>,a0
    5a0e:	move.l (a0),d0
    5a10:	move.l 4(sp),-(sp)
    5a14:	move.l d0,-(sp)
    5a16:	jsr 8d0 <put2bytes>
    5a1c:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    5a1e:	movea.l 1af1c <currentEvents>,a0
    5a24:	move.l 4(a0),d0
    5a28:	move.l 4(sp),-(sp)
    5a2c:	move.l d0,-(sp)
    5a2e:	jsr 8d0 <put2bytes>
    5a34:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    5a36:	movea.l 1af1c <currentEvents>,a0
    5a3c:	move.l 8(a0),d0
    5a40:	move.l 4(sp),-(sp)
    5a44:	move.l d0,-(sp)
    5a46:	jsr 8d0 <put2bytes>
    5a4c:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    5a4e:	movea.l 1af1c <currentEvents>,a0
    5a54:	move.l 12(a0),d0
    5a58:	move.l 4(sp),-(sp)
    5a5c:	move.l d0,-(sp)
    5a5e:	jsr 8d0 <put2bytes>
    5a64:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    5a66:	movea.l 1af1c <currentEvents>,a0
    5a6c:	move.l 16(a0),d0
    5a70:	move.l 4(sp),-(sp)
    5a74:	move.l d0,-(sp)
    5a76:	jsr 8d0 <put2bytes>
    5a7c:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    5a7e:	movea.l 1af1c <currentEvents>,a0
    5a84:	move.l 20(a0),d0
    5a88:	move.l 4(sp),-(sp)
    5a8c:	move.l d0,-(sp)
    5a8e:	jsr 8d0 <put2bytes>
    5a94:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    5a96:	movea.l 1af1c <currentEvents>,a0
    5a9c:	move.l 24(a0),d0
    5aa0:	move.l 4(sp),-(sp)
    5aa4:	move.l d0,-(sp)
    5aa6:	jsr 8d0 <put2bytes>
    5aac:	addq.l #8,sp
}
    5aae:	nop
    5ab0:	rts

00005ab2 <sludgeDisplay>:

void sludgeDisplay () {					
    5ab2:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    5ab4:	move.l #14675968,(sp)
	displayCursor();
    5aba:	jsr c58 <displayCursor>
	CstDrawBackdrop();
    5ac0:	jsr 14c8 <CstDrawBackdrop>
	CstRestoreScreen();
    5ac6:	jsr 1bc8 <CstRestoreScreen>
	drawPeople();
    5acc:	jsr 91c2 <drawPeople>
	CstSwapBuffer();
    5ad2:	jsr 294a <CstSwapBuffer>
}
    5ad8:	nop
    5ada:	addq.l #4,sp
    5adc:	rts

00005ade <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    5ade:	      /-- bra.s 5afe <stackSetByIndex+0x20>
		vS = vS->next;
    5ae0:	/-----|-> movea.l 4(sp),a0
    5ae4:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    5aea:	|     +-- bne.s 5afe <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    5aec:	|     |   pea 1776b <PutChar+0xe55>
    5af2:	|     |   jsr 15fc6 <KPrintF>
    5af8:	|     |   addq.l #4,sp
			return FALSE;
    5afa:	|     |   clr.w d0
    5afc:	|  /--|-- bra.s 5b20 <stackSetByIndex+0x42>
	while (theIndex--) {
    5afe:	|  |  \-> move.l 8(sp),d0
    5b02:	|  |      move.l d0,d1
    5b04:	|  |      subq.l #1,d1
    5b06:	|  |      move.l d1,8(sp)
    5b0a:	|  |      tst.l d0
    5b0c:	\--|----- bne.s 5ae0 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    5b0e:	   |      move.l 4(sp),d0
    5b12:	   |      move.l d0,-(sp)
    5b14:	   |      move.l 16(sp),-(sp)
    5b18:	   |      jsr 13d4e <copyVariable>
    5b1e:	   |      addq.l #8,sp
}
    5b20:	   \----> rts

00005b22 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    5b22:	             lea -24(sp),sp
    5b26:	             move.l a6,-(sp)
    5b28:	             move.l 48(sp),d0
    5b2c:	             move.w d0,d0
    5b2e:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    5b32:	             moveq #58,d0
    5b34:	             move.l d0,24(sp)
    5b38:	             clr.l 20(sp)
    5b3c:	             move.l 1b5a2 <SysBase>,d0
    5b42:	             movea.l d0,a6
    5b44:	             move.l 24(sp),d0
    5b48:	             move.l 20(sp),d1
    5b4c:	             jsr -684(a6)
    5b50:	             move.l d0,16(sp)
    5b54:	             move.l 16(sp),d0
    5b58:	             move.l d0,12(sp)
	if(!newFunc) {
    5b5c:	         /-- bne.s 5b72 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    5b5e:	         |   pea 17784 <PutChar+0xe6e>
    5b64:	         |   jsr 15fc6 <KPrintF>
    5b6a:	         |   addq.l #4,sp
		return 0;
    5b6c:	         |   moveq #0,d0
    5b6e:	/--------|-- bra.w 5c88 <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    5b72:	|        \-> move.l 32(sp),d0
    5b76:	|            movea.l 12(sp),a0
    5b7a:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    5b7c:	|            move.l 12(sp),-(sp)
    5b80:	|            jsr 5292 <loadFunctionCode>
    5b86:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    5b88:	|            movea.l 12(sp),a0
    5b8c:	|            move.l 16(a0),d1
    5b90:	|            move.l 36(sp),d0
    5b94:	|            cmp.l d1,d0
    5b96:	|        /-- beq.s 5bac <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    5b98:	|        |   pea 177ad <PutChar+0xe97>
    5b9e:	|        |   jsr 15fc6 <KPrintF>
    5ba4:	|        |   addq.l #4,sp
		return NULL; 
    5ba6:	|        |   moveq #0,d0
    5ba8:	+--------|-- bra.w 5c88 <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    5bac:	|        \-> movea.l 12(sp),a0
    5bb0:	|            move.l 16(a0),d1
    5bb4:	|            movea.l 12(sp),a0
    5bb8:	|            move.l 8(a0),d0
    5bbc:	|            cmp.l d1,d0
    5bbe:	|  /-------- bge.s 5c28 <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    5bc0:	|  |         pea 177c9 <PutChar+0xeb3>
    5bc6:	|  |         jsr 15fc6 <KPrintF>
    5bcc:	|  |         addq.l #4,sp
		return NULL; 
    5bce:	|  |         moveq #0,d0
    5bd0:	+--|-------- bra.w 5c88 <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    5bd4:	|  |  /----> movea.l 44(sp),a0
    5bd8:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    5bdc:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    5be0:	|  |  |      movea.l 44(sp),a0
    5be4:	|  |  |      move.l (a0),d0
    5be6:	|  |  |  /-- bne.s 5bfc <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    5be8:	|  |  |  |   pea 177f3 <PutChar+0xedd>
    5bee:	|  |  |  |   jsr 15fc6 <KPrintF>
    5bf4:	|  |  |  |   addq.l #4,sp
			return NULL;
    5bf6:	|  |  |  |   moveq #0,d0
    5bf8:	+--|--|--|-- bra.w 5c88 <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    5bfc:	|  |  |  \-> movea.l 12(sp),a0
    5c00:	|  |  |      move.l 20(a0),d1
    5c04:	|  |  |      move.l 36(sp),d0
    5c08:	|  |  |      lsl.l #3,d0
    5c0a:	|  |  |      add.l d0,d1
    5c0c:	|  |  |      move.l 8(sp),d0
    5c10:	|  |  |      move.l d1,-(sp)
    5c12:	|  |  |      move.l d0,-(sp)
    5c14:	|  |  |      jsr 13d4e <copyVariable>
    5c1a:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    5c1c:	|  |  |      move.l 44(sp),-(sp)
    5c20:	|  |  |      jsr 14218 <trimStack>
    5c26:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    5c28:	|  \--|----> tst.l 36(sp)
    5c2c:	|     \----- bne.s 5bd4 <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    5c2e:	|            movea.l 12(sp),a0
    5c32:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    5c36:	|            movea.l 12(sp),a0
    5c3a:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    5c3e:	|            movea.l 12(sp),a0
    5c42:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    5c48:	|            movea.l 12(sp),a0
    5c4c:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    5c52:	|            movea.l 12(sp),a0
    5c56:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    5c5a:	|            movea.l 12(sp),a0
    5c5e:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    5c62:	|            movea.l 12(sp),a0
    5c66:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    5c6a:	|            movea.l 12(sp),a0
    5c6e:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    5c72:	|            movea.l 12(sp),a0
    5c76:	|            clr.l 28(a0)

	restartFunction (newFunc);
    5c7a:	|            move.l 12(sp),-(sp)
    5c7e:	|            jsr 58d6 <restartFunction>
    5c84:	|            addq.l #4,sp
	return 1;
    5c86:	|            moveq #1,d0
}
    5c88:	\----------> movea.l (sp)+,a6
    5c8a:	             lea 24(sp),sp
    5c8e:	             rts

00005c90 <unfreezeSubs>:

void unfreezeSubs () {
    5c90:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    5c92:	          move.l 1b53a <allRunningFunctions>,(sp)

	while (thisFunction) {
    5c98:	   /----- bra.s 5cb6 <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    5c9a:	/--|----> movea.l (sp),a0
    5c9c:	|  |      move.b 56(a0),d0
    5ca0:	|  |  /-- beq.s 5cb0 <unfreezeSubs+0x20>
    5ca2:	|  |  |   movea.l (sp),a0
    5ca4:	|  |  |   move.b 56(a0),d0
    5ca8:	|  |  |   subq.b #1,d0
    5caa:	|  |  |   movea.l (sp),a0
    5cac:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    5cb0:	|  |  \-> movea.l (sp),a0
    5cb2:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    5cb6:	|  \----> tst.l (sp)
    5cb8:	\-------- bne.s 5c9a <unfreezeSubs+0xa>
	}
}
    5cba:	          nop
    5cbc:	          nop
    5cbe:	          addq.l #4,sp
    5cc0:	          rts

00005cc2 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    5cc2:	clr.w 1af28 <sliceBusy>
}
    5cc8:	nop
    5cca:	rts

00005ccc <getNumberedString>:

char * getNumberedString (int value) {
    5ccc:	       lea -56(sp),sp
    5cd0:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    5cd4:	       move.w 1af28 <sliceBusy>,d0
    5cda:	   /-- beq.s 5d24 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    5cdc:	   |   move.l 1b5aa <DOSBase>,d0
    5ce2:	   |   movea.l d0,a6
    5ce4:	   |   jsr -60(a6)
    5ce8:	   |   move.l d0,28(sp)
    5cec:	   |   move.l 28(sp),d0
    5cf0:	   |   move.l d0,24(sp)
    5cf4:	   |   move.l #96318,20(sp)
    5cfc:	   |   moveq #76,d0
    5cfe:	   |   move.l d0,16(sp)
    5d02:	   |   move.l 1b5aa <DOSBase>,d0
    5d08:	   |   movea.l d0,a6
    5d0a:	   |   move.l 24(sp),d1
    5d0e:	   |   move.l 20(sp),d2
    5d12:	   |   move.l 16(sp),d3
    5d16:	   |   jsr -48(a6)
    5d1a:	   |   move.l d0,12(sp)
		return NULL;
    5d1e:	   |   moveq #0,d0
    5d20:	/--|-- bra.w 5dc0 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    5d24:	|  \-> move.l 1b58a <bigDataFile>,64(sp)
    5d2c:	|      move.l 72(sp),d0
    5d30:	|      add.l d0,d0
    5d32:	|      add.l d0,d0
    5d34:	|      move.l d0,d1
    5d36:	|      move.l 1b596 <startOfTextIndex>,d0
    5d3c:	|      add.l d1,d0
    5d3e:	|      move.l d0,60(sp)
    5d42:	|      moveq #-1,d0
    5d44:	|      move.l d0,56(sp)
    5d48:	|      move.l 1b5aa <DOSBase>,d0
    5d4e:	|      movea.l d0,a6
    5d50:	|      move.l 64(sp),d1
    5d54:	|      move.l 60(sp),d2
    5d58:	|      move.l 56(sp),d3
    5d5c:	|      jsr -66(a6)
    5d60:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    5d64:	|      move.l 1b58a <bigDataFile>,d0
    5d6a:	|      move.l d0,-(sp)
    5d6c:	|      jsr 718 <get4bytes>
    5d72:	|      addq.l #4,sp
    5d74:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    5d78:	|      move.l 1b58a <bigDataFile>,48(sp)
    5d80:	|      move.l 72(sp),44(sp)
    5d86:	|      moveq #-1,d0
    5d88:	|      move.l d0,40(sp)
    5d8c:	|      move.l 1b5aa <DOSBase>,d0
    5d92:	|      movea.l d0,a6
    5d94:	|      move.l 48(sp),d1
    5d98:	|      move.l 44(sp),d2
    5d9c:	|      move.l 40(sp),d3
    5da0:	|      jsr -66(a6)
    5da4:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    5da8:	|      move.l 1b58a <bigDataFile>,d0
    5dae:	|      move.l d0,-(sp)
    5db0:	|      jsr b02 <readString>
    5db6:	|      addq.l #4,sp
    5db8:	|      move.l d0,32(sp)
	
	return s;
    5dbc:	|      move.l 32(sp),d0
}
    5dc0:	\----> movem.l (sp)+,d2-d3/a6
    5dc4:	       lea 56(sp),sp
    5dc8:	       rts

00005dca <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    5dca:	       lea -32(sp),sp
    5dce:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    5dd2:	       move.w 1af28 <sliceBusy>,d0
    5dd8:	   /-- beq.s 5df4 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    5dda:	   |   pea 1788b <PutChar+0xf75>
    5de0:	   |   pea 178a9 <PutChar+0xf93>
    5de6:	   |   jsr 15fc6 <KPrintF>
    5dec:	   |   addq.l #8,sp
		return 0;
    5dee:	   |   moveq #0,d0
    5df0:	/--|-- bra.w 5e88 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    5df4:	|  \-> move.l 1b58a <bigDataFile>,40(sp)
    5dfc:	|      move.l 48(sp),d0
    5e00:	|      add.l d0,d0
    5e02:	|      add.l d0,d0
    5e04:	|      move.l d0,d1
    5e06:	|      move.l 1b592 <startOfDataIndex>,d0
    5e0c:	|      add.l d1,d0
    5e0e:	|      move.l d0,36(sp)
    5e12:	|      moveq #-1,d0
    5e14:	|      move.l d0,32(sp)
    5e18:	|      move.l 1b5aa <DOSBase>,d0
    5e1e:	|      movea.l d0,a6
    5e20:	|      move.l 40(sp),d1
    5e24:	|      move.l 36(sp),d2
    5e28:	|      move.l 32(sp),d3
    5e2c:	|      jsr -66(a6)
    5e30:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    5e34:	|      move.l 1b58a <bigDataFile>,24(sp)
    5e3c:	|      move.l 1b58a <bigDataFile>,d0
    5e42:	|      move.l d0,-(sp)
    5e44:	|      jsr 718 <get4bytes>
    5e4a:	|      addq.l #4,sp
    5e4c:	|      move.l d0,20(sp)
    5e50:	|      clr.l 16(sp)
    5e54:	|      move.l 1b5aa <DOSBase>,d0
    5e5a:	|      movea.l d0,a6
    5e5c:	|      move.l 24(sp),d1
    5e60:	|      move.l 20(sp),d2
    5e64:	|      move.l 16(sp),d3
    5e68:	|      jsr -66(a6)
    5e6c:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    5e70:	|      move.w #1,1af28 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    5e78:	|      move.l 1b58a <bigDataFile>,d0
    5e7e:	|      move.l d0,-(sp)
    5e80:	|      jsr 718 <get4bytes>
    5e86:	|      addq.l #4,sp
}
    5e88:	\----> movem.l (sp)+,d2-d3/a6
    5e8c:	       lea 32(sp),sp
    5e90:	       rts

00005e92 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    5e92:	       lea -32(sp),sp
    5e96:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    5e9a:	       move.w 1af28 <sliceBusy>,d0
    5ea0:	   /-- beq.s 5ebc <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    5ea2:	   |   pea 1788b <PutChar+0xf75>
    5ea8:	   |   pea 178a9 <PutChar+0xf93>
    5eae:	   |   jsr 15fc6 <KPrintF>
    5eb4:	   |   addq.l #8,sp
        return FALSE;
    5eb6:	   |   clr.w d0
    5eb8:	/--|-- bra.w 5f48 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    5ebc:	|  \-> move.l 1b58a <bigDataFile>,40(sp)
    5ec4:	|      move.l 48(sp),d0
    5ec8:	|      add.l d0,d0
    5eca:	|      add.l d0,d0
    5ecc:	|      move.l d0,d1
    5ece:	|      move.l 1b59e <startOfObjectIndex>,d0
    5ed4:	|      add.l d1,d0
    5ed6:	|      move.l d0,36(sp)
    5eda:	|      moveq #-1,d0
    5edc:	|      move.l d0,32(sp)
    5ee0:	|      move.l 1b5aa <DOSBase>,d0
    5ee6:	|      movea.l d0,a6
    5ee8:	|      move.l 40(sp),d1
    5eec:	|      move.l 36(sp),d2
    5ef0:	|      move.l 32(sp),d3
    5ef4:	|      jsr -66(a6)
    5ef8:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    5efc:	|      move.l 1b58a <bigDataFile>,24(sp)
    5f04:	|      move.l 1b58a <bigDataFile>,d0
    5f0a:	|      move.l d0,-(sp)
    5f0c:	|      jsr 718 <get4bytes>
    5f12:	|      addq.l #4,sp
    5f14:	|      move.l d0,20(sp)
    5f18:	|      moveq #-1,d0
    5f1a:	|      move.l d0,16(sp)
    5f1e:	|      move.l 1b5aa <DOSBase>,d0
    5f24:	|      movea.l d0,a6
    5f26:	|      move.l 24(sp),d1
    5f2a:	|      move.l 20(sp),d2
    5f2e:	|      move.l 16(sp),d3
    5f32:	|      jsr -66(a6)
    5f36:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    5f3a:	|      move.w #1,1af28 <sliceBusy>
    5f42:	|      move.w 1af28 <sliceBusy>,d0
}
    5f48:	\----> movem.l (sp)+,d2-d3/a6
    5f4c:	       lea 32(sp),sp
    5f50:	       rts

00005f52 <openSubSlice>:

BOOL openSubSlice (int num) {
    5f52:	       lea -32(sp),sp
    5f56:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    5f5a:	       move.w 1af28 <sliceBusy>,d0
    5f60:	   /-- beq.s 5f7c <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    5f62:	   |   pea 1788b <PutChar+0xf75>
    5f68:	   |   pea 178a9 <PutChar+0xf93>
    5f6e:	   |   jsr 15fc6 <KPrintF>
    5f74:	   |   addq.l #8,sp
		return FALSE;
    5f76:	   |   clr.w d0
    5f78:	/--|-- bra.w 6008 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    5f7c:	|  \-> move.l 1b58a <bigDataFile>,40(sp)
    5f84:	|      move.l 48(sp),d0
    5f88:	|      add.l d0,d0
    5f8a:	|      add.l d0,d0
    5f8c:	|      move.l d0,d1
    5f8e:	|      move.l 1b59a <startOfSubIndex>,d0
    5f94:	|      add.l d1,d0
    5f96:	|      move.l d0,36(sp)
    5f9a:	|      moveq #-1,d0
    5f9c:	|      move.l d0,32(sp)
    5fa0:	|      move.l 1b5aa <DOSBase>,d0
    5fa6:	|      movea.l d0,a6
    5fa8:	|      move.l 40(sp),d1
    5fac:	|      move.l 36(sp),d2
    5fb0:	|      move.l 32(sp),d3
    5fb4:	|      jsr -66(a6)
    5fb8:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    5fbc:	|      move.l 1b58a <bigDataFile>,24(sp)
    5fc4:	|      move.l 1b58a <bigDataFile>,d0
    5fca:	|      move.l d0,-(sp)
    5fcc:	|      jsr 718 <get4bytes>
    5fd2:	|      addq.l #4,sp
    5fd4:	|      move.l d0,20(sp)
    5fd8:	|      moveq #-1,d0
    5fda:	|      move.l d0,16(sp)
    5fde:	|      move.l 1b5aa <DOSBase>,d0
    5fe4:	|      movea.l d0,a6
    5fe6:	|      move.l 24(sp),d1
    5fea:	|      move.l 20(sp),d2
    5fee:	|      move.l 16(sp),d3
    5ff2:	|      jsr -66(a6)
    5ff6:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    5ffa:	|      move.w #1,1af28 <sliceBusy>
    6002:	|      move.w 1af28 <sliceBusy>,d0
}
    6008:	\----> movem.l (sp)+,d2-d3/a6
    600c:	       lea 32(sp),sp
    6010:	       rts

00006012 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    6012:	       lea -180(sp),sp
    6016:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    601a:	       tst.l 196(sp)
    601e:	/----- beq.s 605e <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    6020:	|      move.l 196(sp),1b58a <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    6028:	|      move.l 196(sp),168(sp)
    602e:	|      clr.l 164(sp)
    6032:	|      clr.l 160(sp)
    6036:	|      move.l 1b5aa <DOSBase>,d0
    603c:	|      movea.l d0,a6
    603e:	|      move.l 168(sp),d1
    6042:	|      move.l 164(sp),d2
    6046:	|      move.l 160(sp),d3
    604a:	|      jsr -66(a6)
    604e:	|      move.l d0,156(sp)
    6052:	|      move.l 156(sp),d0
    6056:	|      move.l d0,1b58e <startIndex>
    605c:	|  /-- bra.s 6098 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    605e:	\--|-> move.l 1b58a <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    6066:	   |   move.l 196(sp),184(sp)
    606c:	   |   move.l 1b58e <startIndex>,d0
    6072:	   |   move.l d0,180(sp)
    6076:	   |   moveq #-1,d0
    6078:	   |   move.l d0,176(sp)
    607c:	   |   move.l 1b5aa <DOSBase>,d0
    6082:	   |   movea.l d0,a6
    6084:	   |   move.l 184(sp),d1
    6088:	   |   move.l 180(sp),d2
    608c:	   |   move.l 176(sp),d3
    6090:	   |   jsr -66(a6)
    6094:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    6098:	   \-> clr.w 1af28 <sliceBusy>

	if (skipBefore > numLanguages) {
    609e:	       move.l 204(sp),d0
    60a2:	       cmp.l 200(sp),d0
    60a6:	   /-- bls.s 60ba <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    60a8:	   |   pea 178c3 <PutChar+0xfad>
    60ae:	   |   jsr 15fc6 <KPrintF>
    60b4:	   |   addq.l #4,sp
		skipBefore = 0;
    60b6:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    60ba:	   \-> move.l 200(sp),d0
    60be:	       sub.l 204(sp),d0
    60c2:	       move.l d0,188(sp)
	while (skipBefore) {
    60c6:	   /-- bra.s 6104 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    60c8:	/--|-> move.l 196(sp),24(sp)
    60ce:	|  |   move.l 196(sp),-(sp)
    60d2:	|  |   jsr 718 <get4bytes>
    60d8:	|  |   addq.l #4,sp
    60da:	|  |   move.l d0,20(sp)
    60de:	|  |   moveq #-1,d0
    60e0:	|  |   move.l d0,16(sp)
    60e4:	|  |   move.l 1b5aa <DOSBase>,d0
    60ea:	|  |   movea.l d0,a6
    60ec:	|  |   move.l 24(sp),d1
    60f0:	|  |   move.l 20(sp),d2
    60f4:	|  |   move.l 16(sp),d3
    60f8:	|  |   jsr -66(a6)
    60fc:	|  |   move.l d0,12(sp)
		skipBefore --;
    6100:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    6104:	|  \-> tst.l 204(sp)
    6108:	\----- bne.s 60c8 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    610a:	       move.l 196(sp),152(sp)
    6110:	       clr.l 148(sp)
    6114:	       clr.l 144(sp)
    6118:	       move.l 1b5aa <DOSBase>,d0
    611e:	       movea.l d0,a6
    6120:	       move.l 152(sp),d1
    6124:	       move.l 148(sp),d2
    6128:	       move.l 144(sp),d3
    612c:	       jsr -66(a6)
    6130:	       move.l d0,140(sp)
    6134:	       move.l 140(sp),d0
    6138:	       addq.l #4,d0
    613a:	       move.l d0,1b596 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    6140:	       move.l 196(sp),136(sp)
    6146:	       move.l 196(sp),-(sp)
    614a:	       jsr 718 <get4bytes>
    6150:	       addq.l #4,sp
    6152:	       move.l d0,132(sp)
    6156:	       moveq #-1,d0
    6158:	       move.l d0,128(sp)
    615c:	       move.l 1b5aa <DOSBase>,d0
    6162:	       movea.l d0,a6
    6164:	       move.l 136(sp),d1
    6168:	       move.l 132(sp),d2
    616c:	       move.l 128(sp),d3
    6170:	       jsr -66(a6)
    6174:	       move.l d0,124(sp)

	while (skipAfter) {
    6178:	   /-- bra.s 61b6 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    617a:	/--|-> move.l 196(sp),40(sp)
    6180:	|  |   move.l 196(sp),-(sp)
    6184:	|  |   jsr 718 <get4bytes>
    618a:	|  |   addq.l #4,sp
    618c:	|  |   move.l d0,36(sp)
    6190:	|  |   moveq #-1,d0
    6192:	|  |   move.l d0,32(sp)
    6196:	|  |   move.l 1b5aa <DOSBase>,d0
    619c:	|  |   movea.l d0,a6
    619e:	|  |   move.l 40(sp),d1
    61a2:	|  |   move.l 36(sp),d2
    61a6:	|  |   move.l 32(sp),d3
    61aa:	|  |   jsr -66(a6)
    61ae:	|  |   move.l d0,28(sp)
		skipAfter --;
    61b2:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    61b6:	|  \-> tst.l 188(sp)
    61ba:	\----- bne.s 617a <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    61bc:	       move.l 196(sp),120(sp)
    61c2:	       clr.l 116(sp)
    61c6:	       clr.l 112(sp)
    61ca:	       move.l 1b5aa <DOSBase>,d0
    61d0:	       movea.l d0,a6
    61d2:	       move.l 120(sp),d1
    61d6:	       move.l 116(sp),d2
    61da:	       move.l 112(sp),d3
    61de:	       jsr -66(a6)
    61e2:	       move.l d0,108(sp)
    61e6:	       move.l 108(sp),d0
    61ea:	       addq.l #4,d0
    61ec:	       move.l d0,1b59a <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    61f2:	       move.l 196(sp),104(sp)
    61f8:	       move.l 196(sp),-(sp)
    61fc:	       jsr 718 <get4bytes>
    6202:	       addq.l #4,sp
    6204:	       move.l d0,100(sp)
    6208:	       clr.l 96(sp)
    620c:	       move.l 1b5aa <DOSBase>,d0
    6212:	       movea.l d0,a6
    6214:	       move.l 104(sp),d1
    6218:	       move.l 100(sp),d2
    621c:	       move.l 96(sp),d3
    6220:	       jsr -66(a6)
    6224:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    6228:	       move.l 196(sp),88(sp)
    622e:	       clr.l 84(sp)
    6232:	       clr.l 80(sp)
    6236:	       move.l 1b5aa <DOSBase>,d0
    623c:	       movea.l d0,a6
    623e:	       move.l 88(sp),d1
    6242:	       move.l 84(sp),d2
    6246:	       move.l 80(sp),d3
    624a:	       jsr -66(a6)
    624e:	       move.l d0,76(sp)
    6252:	       move.l 76(sp),d0
    6256:	       addq.l #4,d0
    6258:	       move.l d0,1b59e <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    625e:	       move.l 196(sp),72(sp)
    6264:	       move.l 196(sp),-(sp)
    6268:	       jsr 718 <get4bytes>
    626e:	       addq.l #4,sp
    6270:	       move.l d0,68(sp)
    6274:	       clr.l 64(sp)
    6278:	       move.l 1b5aa <DOSBase>,d0
    627e:	       movea.l d0,a6
    6280:	       move.l 72(sp),d1
    6284:	       move.l 68(sp),d2
    6288:	       move.l 64(sp),d3
    628c:	       jsr -66(a6)
    6290:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    6294:	       move.l 196(sp),56(sp)
    629a:	       clr.l 52(sp)
    629e:	       clr.l 48(sp)
    62a2:	       move.l 1b5aa <DOSBase>,d0
    62a8:	       movea.l d0,a6
    62aa:	       move.l 56(sp),d1
    62ae:	       move.l 52(sp),d2
    62b2:	       move.l 48(sp),d3
    62b6:	       jsr -66(a6)
    62ba:	       move.l d0,44(sp)
    62be:	       move.l 44(sp),d0
    62c2:	       move.l d0,1b592 <startOfDataIndex>
    62c8:	       nop
    62ca:	       movem.l (sp)+,d2-d3/a6
    62ce:	       lea 180(sp),sp
    62d2:	       rts

000062d4 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    62d4:	    lea -20(sp),sp
    62d8:	    move.l a6,-(sp)
    62da:	    move.l d7,-(sp)
	APTR vbr = 0;
    62dc:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    62e0:	    move.w #20090,10(sp)
    62e6:	    move.w #2049,12(sp)
    62ec:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    62f2:	    movea.l 1b5a2 <SysBase>,a0
    62f8:	    move.w 296(a0),d0
    62fc:	    move.w d0,d0
    62fe:	    andi.l #65535,d0
    6304:	    moveq #1,d1
    6306:	    and.l d1,d0
    6308:	/-- beq.s 6336 <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    630a:	|   lea 28(sp),a0
    630e:	|   lea -18(a0),a0
    6312:	|   move.l a0,20(sp)
    6316:	|   move.l 1b5a2 <SysBase>,d0
    631c:	|   movea.l d0,a6
    631e:	|   move.l 20(sp),d7
    6322:	|   exg d7,a5
    6324:	|   jsr -30(a6)
    6328:	|   exg d7,a5
    632a:	|   move.l d0,16(sp)
    632e:	|   move.l 16(sp),d0
    6332:	|   move.l d0,24(sp)

	return vbr;
    6336:	\-> move.l 24(sp),d0
}
    633a:	    move.l (sp)+,d7
    633c:	    movea.l (sp)+,a6
    633e:	    lea 20(sp),sp
    6342:	    rts

00006344 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    6344:	movea.l 1b5c8 <VBR>,a0
    634a:	lea 108(a0),a0
    634e:	move.l 4(sp),(a0)
}
    6352:	nop
    6354:	rts

00006356 <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    6356:	movea.l 1b5c8 <VBR>,a0
    635c:	move.l 108(a0),d0
}
    6360:	rts

00006362 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    6362:	       subq.l #8,sp
    6364:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    6366:	       pea 1790c <PutChar+0xff6>
    636c:	       jsr 15fc6 <KPrintF>
    6372:	       addq.l #4,sp
	Forbid();
    6374:	       move.l 1b5a2 <SysBase>,d0
    637a:	       movea.l d0,a6
    637c:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    6380:	       pea 17924 <PutChar+0x100e>
    6386:	       jsr 15fc6 <KPrintF>
    638c:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    638e:	       movea.l 1b5a6 <custom>,a0
    6394:	       move.w 16(a0),d0
    6398:	       move.w d0,1b5c6 <SystemADKCON>
	SystemInts=custom->intenar;
    639e:	       movea.l 1b5a6 <custom>,a0
    63a4:	       move.w 28(a0),d0
    63a8:	       move.w d0,1b5c2 <SystemInts>
	SystemDMA=custom->dmaconr;
    63ae:	       movea.l 1b5a6 <custom>,a0
    63b4:	       move.w 2(a0),d0
    63b8:	       move.w d0,1b5c4 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    63be:	       movea.l 1b5ae <GfxBase>,a0
    63c4:	       move.l 34(a0),d0
    63c8:	       move.l d0,1b5d0 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    63ce:	       pea 17942 <PutChar+0x102c>
    63d4:	       jsr 15fc6 <KPrintF>
    63da:	       addq.l #4,sp
	LoadView(0);
    63dc:	       clr.l 4(sp)
    63e0:	       move.l 1b5ae <GfxBase>,d0
    63e6:	       movea.l d0,a6
    63e8:	       movea.l 4(sp),a1
    63ec:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    63f0:	       pea 17958 <PutChar+0x1042>
    63f6:	       jsr 15fc6 <KPrintF>
    63fc:	       addq.l #4,sp
	WaitTOF();
    63fe:	       move.l 1b5ae <GfxBase>,d0
    6404:	       movea.l d0,a6
    6406:	       jsr -270(a6)
	WaitTOF();
    640a:	       move.l 1b5ae <GfxBase>,d0
    6410:	       movea.l d0,a6
    6412:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    6416:	       pea 1796d <PutChar+0x1057>
    641c:	       jsr 15fc6 <KPrintF>
    6422:	       addq.l #4,sp
	WaitVbl();
    6424:	       jsr 15efa <WaitVbl>
	WaitVbl();
    642a:	       jsr 15efa <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    6430:	       pea 17982 <PutChar+0x106c>
    6436:	       jsr 15fc6 <KPrintF>
    643c:	       addq.l #4,sp
	OwnBlitter();
    643e:	       move.l 1b5ae <GfxBase>,d0
    6444:	       movea.l d0,a6
    6446:	       jsr -456(a6)
	WaitBlit();	
    644a:	       move.l 1b5ae <GfxBase>,d0
    6450:	       movea.l d0,a6
    6452:	       jsr -228(a6)
	Disable();
    6456:	       move.l 1b5a2 <SysBase>,d0
    645c:	       movea.l d0,a6
    645e:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    6462:	       pea 179a3 <PutChar+0x108d>
    6468:	       jsr 15fc6 <KPrintF>
    646e:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    6470:	       movea.l 1b5a6 <custom>,a0
    6476:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    647c:	       pea 179ba <PutChar+0x10a4>
    6482:	       jsr 15fc6 <KPrintF>
    6488:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    648a:	       clr.l 8(sp)
    648e:	   /-- bra.s 64ac <TakeSystem+0x14a>
		custom->color[a]=0;
    6490:	/--|-> movea.l 1b5a6 <custom>,a0
    6496:	|  |   move.l 8(sp),d0
    649a:	|  |   addi.l #192,d0
    64a0:	|  |   add.l d0,d0
    64a2:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    64a8:	|  |   addq.l #1,8(sp)
    64ac:	|  \-> moveq #31,d0
    64ae:	|      cmp.l 8(sp),d0
    64b2:	\----- bge.s 6490 <TakeSystem+0x12e>

	WaitVbl();
    64b4:	       jsr 15efa <WaitVbl>
	WaitVbl();
    64ba:	       jsr 15efa <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    64c0:	       pea 179df <PutChar+0x10c9>
    64c6:	       jsr 15fc6 <KPrintF>
    64cc:	       addq.l #4,sp
	VBR=GetVBR();
    64ce:	       jsr 62d4 <GetVBR>
    64d4:	       move.l d0,1b5c8 <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    64da:	       jsr 6356 <GetInterruptHandler>
    64e0:	       move.l d0,1b5cc <SystemIrq>
}
    64e6:	       nop
    64e8:	       movea.l (sp)+,a6
    64ea:	       addq.l #8,sp
    64ec:	       rts

000064ee <FreeSystem>:

void FreeSystem() { 
    64ee:	subq.l #4,sp
    64f0:	move.l a6,-(sp)
	WaitVbl();
    64f2:	jsr 15efa <WaitVbl>
	WaitBlit();
    64f8:	move.l 1b5ae <GfxBase>,d0
    64fe:	movea.l d0,a6
    6500:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    6504:	movea.l 1b5a6 <custom>,a0
    650a:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    6510:	movea.l 1b5a6 <custom>,a0
    6516:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    651c:	movea.l 1b5a6 <custom>,a0
    6522:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    6528:	move.l 1b5cc <SystemIrq>,d0
    652e:	move.l d0,-(sp)
    6530:	jsr 6344 <SetInterruptHandler>
    6536:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    6538:	movea.l 1b5ae <GfxBase>,a0
    653e:	move.l 38(a0),d0
    6542:	movea.l 1b5a6 <custom>,a0
    6548:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    654c:	movea.l 1b5ae <GfxBase>,a0
    6552:	move.l 50(a0),d0
    6556:	movea.l 1b5a6 <custom>,a0
    655c:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    6560:	movea.l 1b5a6 <custom>,a0
    6566:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    656c:	move.w 1b5c4 <SystemDMA>,d0
    6572:	movea.l 1b5a6 <custom>,a0
    6578:	ori.w #-32768,d0
    657c:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    6580:	move.w 1b5c6 <SystemADKCON>,d0
    6586:	movea.l 1b5a6 <custom>,a0
    658c:	ori.w #-32768,d0
    6590:	move.w d0,158(a0)

	WaitBlit();	
    6594:	move.l 1b5ae <GfxBase>,d0
    659a:	movea.l d0,a6
    659c:	jsr -228(a6)
	DisownBlitter();
    65a0:	move.l 1b5ae <GfxBase>,d0
    65a6:	movea.l d0,a6
    65a8:	jsr -462(a6)
	Enable();
    65ac:	move.l 1b5a2 <SysBase>,d0
    65b2:	movea.l d0,a6
    65b4:	jsr -126(a6)

	LoadView(ActiView);
    65b8:	move.l 1b5d0 <ActiView>,4(sp)
    65c0:	move.l 1b5ae <GfxBase>,d0
    65c6:	movea.l d0,a6
    65c8:	movea.l 4(sp),a1
    65cc:	jsr -222(a6)
	WaitTOF();
    65d0:	move.l 1b5ae <GfxBase>,d0
    65d6:	movea.l d0,a6
    65d8:	jsr -270(a6)
	WaitTOF();
    65dc:	move.l 1b5ae <GfxBase>,d0
    65e2:	movea.l d0,a6
    65e4:	jsr -270(a6)

	Permit();
    65e8:	move.l 1b5a2 <SysBase>,d0
    65ee:	movea.l d0,a6
    65f0:	jsr -138(a6)
}
    65f4:	nop
    65f6:	movea.l (sp)+,a6
    65f8:	addq.l #4,sp
    65fa:	rts

000065fc <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    65fc:	    lea -128(sp),sp
    6600:	    movem.l d2-d3/a6,-(sp)
	SysBase = *((struct ExecBase**)4UL);
    6604:	    movea.w #4,a0
    6608:	    move.l (a0),d0
    660a:	    move.l d0,1b5a2 <SysBase>
	custom = (struct Custom*)0xdff000;	
    6610:	    move.l #14675968,1b5a6 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    661a:	    move.l #96771,136(sp)
    6622:	    clr.l 132(sp)
    6626:	    move.l 1b5a2 <SysBase>,d0
    662c:	    movea.l d0,a6
    662e:	    movea.l 136(sp),a1
    6632:	    move.l 132(sp),d0
    6636:	    jsr -552(a6)
    663a:	    move.l d0,128(sp)
    663e:	    move.l 128(sp),d0
    6642:	    move.l d0,1b5ae <GfxBase>
	if (!GfxBase)
    6648:	    move.l 1b5ae <GfxBase>,d0
    664e:	/-- bne.s 6664 <main+0x68>
		Exit(0);
    6650:	|   clr.l 124(sp)
    6654:	|   move.l 1b5aa <DOSBase>,d0
    665a:	|   movea.l d0,a6
    665c:	|   move.l 124(sp),d1
    6660:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    6664:	\-> move.l #96788,120(sp)
    666c:	    clr.l 116(sp)
    6670:	    move.l 1b5a2 <SysBase>,d0
    6676:	    movea.l d0,a6
    6678:	    movea.l 120(sp),a1
    667c:	    move.l 116(sp),d0
    6680:	    jsr -552(a6)
    6684:	    move.l d0,112(sp)
    6688:	    move.l 112(sp),d0
    668c:	    move.l d0,1b5aa <DOSBase>
	if (!DOSBase)
    6692:	    move.l 1b5aa <DOSBase>,d0
    6698:	/-- bne.s 66ae <main+0xb2>
		Exit(0);
    669a:	|   clr.l 108(sp)
    669e:	|   move.l 1b5aa <DOSBase>,d0
    66a4:	|   movea.l d0,a6
    66a6:	|   move.l 108(sp),d1
    66aa:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    66ae:	\-> move.l #96800,104(sp)
    66b6:	    clr.l 100(sp)
    66ba:	    move.l 1b5a2 <SysBase>,d0
    66c0:	    movea.l d0,a6
    66c2:	    movea.l 104(sp),a1
    66c6:	    move.l 100(sp),d0
    66ca:	    jsr -552(a6)
    66ce:	    move.l d0,96(sp)
    66d2:	    move.l 96(sp),d0
    66d6:	    move.l d0,1b5b2 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    66dc:	    move.l 1b5b2 <MathIeeeSingBasBase>,d0
    66e2:	/-- bne.s 66f8 <main+0xfc>
		Exit(0);	
    66e4:	|   clr.l 92(sp)
    66e8:	|   move.l 1b5aa <DOSBase>,d0
    66ee:	|   movea.l d0,a6
    66f0:	|   move.l 92(sp),d1
    66f4:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    66f8:	\-> move.l #96824,88(sp)
    6700:	    clr.l 84(sp)
    6704:	    move.l 1b5a2 <SysBase>,d0
    670a:	    movea.l d0,a6
    670c:	    movea.l 88(sp),a1
    6710:	    move.l 84(sp),d0
    6714:	    jsr -552(a6)
    6718:	    move.l d0,80(sp)
    671c:	    move.l 80(sp),d0
    6720:	    move.l d0,1b5b6 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    6726:	    move.l 1b5b6 <MathIeeeSingTransBase>,d0
    672c:	/-- bne.s 6742 <main+0x146>
		Exit(0);
    672e:	|   clr.l 76(sp)
    6732:	|   move.l 1b5aa <DOSBase>,d0
    6738:	|   movea.l d0,a6
    673a:	|   move.l 76(sp),d1
    673e:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    6742:	\-> move.l #96850,72(sp)
    674a:	    clr.l 68(sp)
    674e:	    move.l 1b5a2 <SysBase>,d0
    6754:	    movea.l d0,a6
    6756:	    movea.l 72(sp),a1
    675a:	    move.l 68(sp),d0
    675e:	    jsr -552(a6)
    6762:	    move.l d0,64(sp)
    6766:	    move.l 64(sp),d0
    676a:	    move.l d0,1b5be <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    6770:	    move.l 1b5be <MathIeeeDoubTransBase>,d0
    6776:	/-- bne.s 678c <main+0x190>
		Exit(0);
    6778:	|   clr.l 60(sp)
    677c:	|   move.l 1b5aa <DOSBase>,d0
    6782:	|   movea.l d0,a6
    6784:	|   move.l 60(sp),d1
    6788:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    678c:	\-> move.l #96876,56(sp)
    6794:	    clr.l 52(sp)
    6798:	    move.l 1b5a2 <SysBase>,d0
    679e:	    movea.l d0,a6
    67a0:	    movea.l 56(sp),a1
    67a4:	    move.l 52(sp),d0
    67a8:	    jsr -552(a6)
    67ac:	    move.l d0,48(sp)
    67b0:	    move.l 48(sp),d0
    67b4:	    move.l d0,1b5ba <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    67ba:	    move.l 1b5ba <MathIeeeDoubBasBase>,d0
    67c0:	/-- bne.s 67d6 <main+0x1da>
		Exit(0);
    67c2:	|   clr.l 44(sp)
    67c6:	|   move.l 1b5aa <DOSBase>,d0
    67cc:	|   movea.l d0,a6
    67ce:	|   move.l 44(sp),d1
    67d2:	|   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 026!\n");
    67d6:	\-> pea 17a84 <PutChar+0x116e>
    67dc:	    jsr 15fc6 <KPrintF>
    67e2:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 026!\n", 25);
    67e4:	    move.l 1b5aa <DOSBase>,d0
    67ea:	    movea.l d0,a6
    67ec:	    jsr -60(a6)
    67f0:	    move.l d0,40(sp)
    67f4:	    move.l 40(sp),d0
    67f8:	    move.l d0,36(sp)
    67fc:	    move.l #96932,32(sp)
    6804:	    moveq #25,d0
    6806:	    move.l d0,28(sp)
    680a:	    move.l 1b5aa <DOSBase>,d0
    6810:	    movea.l d0,a6
    6812:	    move.l 36(sp),d1
    6816:	    move.l 32(sp),d2
    681a:	    move.l 28(sp),d3
    681e:	    jsr -48(a6)
    6822:	    move.l d0,24(sp)
	Delay(50);
    6826:	    moveq #50,d0
    6828:	    move.l d0,20(sp)
    682c:	    move.l 1b5aa <DOSBase>,d0
    6832:	    movea.l d0,a6
    6834:	    move.l 20(sp),d1
    6838:	    jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    683c:	    pea 17abd <PutChar+0x11a7>
    6842:	    jsr 15fc6 <KPrintF>
    6848:	    addq.l #4,sp
	TakeSystem();
    684a:	    jsr 6362 <TakeSystem>
	KPrintF("System Taken\n");
    6850:	    pea 17acc <PutChar+0x11b6>
    6856:	    jsr 15fc6 <KPrintF>
    685c:	    addq.l #4,sp

	custom->dmacon = 0x87ff;
    685e:	    movea.l 1b5a6 <custom>,a0
    6864:	    move.w #-30721,150(a0)
	WaitVbl();
    686a:	    jsr 15efa <WaitVbl>

	KPrintF("Starting main_sludge\n");
    6870:	    pea 17ada <PutChar+0x11c4>
    6876:	    jsr 15fc6 <KPrintF>
    687c:	    addq.l #4,sp
	main_sludge(argc, argv);	
    687e:	    move.l 148(sp),-(sp)
    6882:	    move.l 148(sp),-(sp)
    6886:	    jsr 3198 <main_sludge>
    688c:	    addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    688e:	    jsr 64ee <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    6894:	    move.l 1b5aa <DOSBase>,16(sp)
    689c:	    move.l 1b5a2 <SysBase>,d0
    68a2:	    movea.l d0,a6
    68a4:	    movea.l 16(sp),a1
    68a8:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    68ac:	    move.l 1b5ae <GfxBase>,12(sp)
    68b4:	    move.l 1b5a2 <SysBase>,d0
    68ba:	    movea.l d0,a6
    68bc:	    movea.l 12(sp),a1
    68c0:	    jsr -414(a6)
    68c4:	    moveq #0,d0
}
    68c6:	    movem.l (sp)+,d2-d3/a6
    68ca:	    lea 128(sp),sp
    68ce:	    rts

000068d0 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    68d0:	    lea -16(sp),sp
    68d4:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    68d6:	    moveq #8,d0
    68d8:	    move.l d0,16(sp)
    68dc:	    clr.l 12(sp)
    68e0:	    move.l 1b5a2 <SysBase>,d0
    68e6:	    movea.l d0,a6
    68e8:	    move.l 16(sp),d0
    68ec:	    move.l 12(sp),d1
    68f0:	    jsr -684(a6)
    68f4:	    move.l d0,8(sp)
    68f8:	    move.l 8(sp),d0
    68fc:	    move.l d0,4(sp)
	if (!newStat) {
    6900:	/-- bne.s 6930 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    6902:	|   movea.l 1af2a <nowStatus>,a0
    6908:	|   move.l (a0),d0
    690a:	|   movea.l 4(sp),a0
    690e:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    6912:	|   pea 17530 <PutChar+0xc1a>
    6918:	|   jsr b8 <copyString>
    691e:	|   addq.l #4,sp
    6920:	|   movea.l 4(sp),a0
    6924:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    6926:	|   movea.l 1af2a <nowStatus>,a0
    692c:	|   move.l 4(sp),(a0)
	}
}
    6930:	\-> nop
    6932:	    movea.l (sp)+,a6
    6934:	    lea 16(sp),sp
    6938:	    rts

0000693a <clearStatusBar>:

void clearStatusBar () {
    693a:	       lea -16(sp),sp
    693e:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    6940:	       movea.l 1af2a <nowStatus>,a0
    6946:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    694a:	       movea.l 1af2a <nowStatus>,a0
    6950:	       moveq #-1,d0
    6952:	       move.l d0,6(a0)
	while (stat) {
    6956:	   /-- bra.s 6996 <clearStatusBar+0x5c>
		kill = stat;
    6958:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    695e:	|  |   movea.l 16(sp),a0
    6962:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    6968:	|  |   movea.l 12(sp),a0
    696c:	|  |   move.l (a0),8(sp)
    6970:	|  |   move.l 1b5a2 <SysBase>,d0
    6976:	|  |   movea.l d0,a6
    6978:	|  |   movea.l 8(sp),a1
    697c:	|  |   jsr -690(a6)
		FreeVec(kill);
    6980:	|  |   move.l 12(sp),4(sp)
    6986:	|  |   move.l 1b5a2 <SysBase>,d0
    698c:	|  |   movea.l d0,a6
    698e:	|  |   movea.l 4(sp),a1
    6992:	|  |   jsr -690(a6)
	while (stat) {
    6996:	|  \-> tst.l 16(sp)
    699a:	\----- bne.s 6958 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    699c:	       movea.l 1af2a <nowStatus>,a0
    69a2:	       clr.l (a0)
}
    69a4:	       nop
    69a6:	       movea.l (sp)+,a6
    69a8:	       lea 16(sp),sp
    69ac:	       rts

000069ae <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    69ae:	clr.l 1b5d4 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    69b4:	move.w #-1,1b5d8 <mainStatus+0x4>
	mainStatus.litStatus = -1;
    69bc:	moveq #-1,d0
    69be:	move.l d0,1b5da <mainStatus+0x6>
	mainStatus.statusX = 10;
    69c4:	moveq #10,d0
    69c6:	move.l d0,1b5de <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    69cc:	movea.l 1b4fa <winHeight>,a0
    69d2:	lea -15(a0),a0
    69d6:	move.l a0,d0
    69d8:	move.l d0,1b5e2 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    69de:	nop
    69e0:	rts

000069e2 <killLastStatus>:

void killLastStatus () {
    69e2:	    lea -12(sp),sp
    69e6:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    69e8:	    movea.l 1af2a <nowStatus>,a0
    69ee:	    move.l (a0),d0
    69f0:	/-- beq.s 6a3a <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    69f2:	|   movea.l 1af2a <nowStatus>,a0
    69f8:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    69fc:	|   movea.l 1af2a <nowStatus>,a0
    6a02:	|   movea.l 12(sp),a1
    6a06:	|   move.l 4(a1),d0
    6a0a:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    6a0c:	|   movea.l 12(sp),a0
    6a10:	|   move.l (a0),8(sp)
    6a14:	|   move.l 1b5a2 <SysBase>,d0
    6a1a:	|   movea.l d0,a6
    6a1c:	|   movea.l 8(sp),a1
    6a20:	|   jsr -690(a6)
		FreeVec(kill);
    6a24:	|   move.l 12(sp),4(sp)
    6a2a:	|   move.l 1b5a2 <SysBase>,d0
    6a30:	|   movea.l d0,a6
    6a32:	|   movea.l 4(sp),a1
    6a36:	|   jsr -690(a6)
	}
}
    6a3a:	\-> nop
    6a3c:	    movea.l (sp)+,a6
    6a3e:	    lea 12(sp),sp
    6a42:	    rts

00006a44 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    6a44:	movea.l 1af2a <nowStatus>,a0
    6a4a:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    6a50:	movea.l 1af2a <nowStatus>,a0
    6a56:	move.l 8(sp),14(a0)
}
    6a5c:	nop
    6a5e:	rts

00006a60 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    6a60:	       lea -100(sp),sp
    6a64:	       move.l a6,-(sp)
    6a66:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    6a68:	       movea.l 1af2a <nowStatus>,a0
    6a6e:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    6a72:	       movea.l 1af2a <nowStatus>,a0
    6a78:	       move.w 4(a0),d0
    6a7c:	       move.w d0,d0
    6a7e:	       andi.l #65535,d0
    6a84:	       move.l 112(sp),-(sp)
    6a88:	       move.l d0,-(sp)
    6a8a:	       jsr 8d0 <put2bytes>
    6a90:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    6a92:	       movea.l 1af2a <nowStatus>,a0
    6a98:	       move.l 6(a0),d0
    6a9c:	       move.l d0,d0
    6a9e:	       movea.w d0,a0
    6aa0:	       move.l 112(sp),-(sp)
    6aa4:	       move.l a0,-(sp)
    6aa6:	       jsr a9c <putSigned>
    6aac:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    6aae:	       movea.l 1af2a <nowStatus>,a0
    6ab4:	       move.l 10(a0),d0
    6ab8:	       move.l 112(sp),-(sp)
    6abc:	       move.l d0,-(sp)
    6abe:	       jsr 8d0 <put2bytes>
    6ac4:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    6ac6:	       movea.l 1af2a <nowStatus>,a0
    6acc:	       move.l 14(a0),d0
    6ad0:	       move.l 112(sp),-(sp)
    6ad4:	       move.l d0,-(sp)
    6ad6:	       jsr 8d0 <put2bytes>
    6adc:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    6ade:	       move.l 112(sp),100(sp)
    6ae4:	       movea.l 1af2a <nowStatus>,a0
    6aea:	       move.l 18(a0),96(sp)
    6af0:	       move.l 1b5aa <DOSBase>,d0
    6af6:	       movea.l d0,a6
    6af8:	       move.l 100(sp),d1
    6afc:	       move.l 96(sp),d2
    6b00:	       jsr -312(a6)
    6b04:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    6b08:	       move.l 112(sp),88(sp)
    6b0e:	       movea.l 1af2a <nowStatus>,a0
    6b14:	       move.l 22(a0),84(sp)
    6b1a:	       move.l 1b5aa <DOSBase>,d0
    6b20:	       movea.l d0,a6
    6b22:	       move.l 88(sp),d1
    6b26:	       move.l 84(sp),d2
    6b2a:	       jsr -312(a6)
    6b2e:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    6b32:	       move.l 112(sp),76(sp)
    6b38:	       movea.l 1af2a <nowStatus>,a0
    6b3e:	       move.l 26(a0),72(sp)
    6b44:	       move.l 1b5aa <DOSBase>,d0
    6b4a:	       movea.l d0,a6
    6b4c:	       move.l 76(sp),d1
    6b50:	       move.l 72(sp),d2
    6b54:	       jsr -312(a6)
    6b58:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    6b5c:	       move.l 112(sp),64(sp)
    6b62:	       movea.l 1af2a <nowStatus>,a0
    6b68:	       move.l 30(a0),60(sp)
    6b6e:	       move.l 1b5aa <DOSBase>,d0
    6b74:	       movea.l d0,a6
    6b76:	       move.l 64(sp),d1
    6b7a:	       move.l 60(sp),d2
    6b7e:	       jsr -312(a6)
    6b82:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    6b86:	       move.l 112(sp),52(sp)
    6b8c:	       movea.l 1af2a <nowStatus>,a0
    6b92:	       move.l 34(a0),48(sp)
    6b98:	       move.l 1b5aa <DOSBase>,d0
    6b9e:	       movea.l d0,a6
    6ba0:	       move.l 52(sp),d1
    6ba4:	       move.l 48(sp),d2
    6ba8:	       jsr -312(a6)
    6bac:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    6bb0:	       move.l 112(sp),40(sp)
    6bb6:	       movea.l 1af2a <nowStatus>,a0
    6bbc:	       move.l 38(a0),36(sp)
    6bc2:	       move.l 1b5aa <DOSBase>,d0
    6bc8:	       movea.l d0,a6
    6bca:	       move.l 40(sp),d1
    6bce:	       move.l 36(sp),d2
    6bd2:	       jsr -312(a6)
    6bd6:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    6bda:	   /-- bra.s 6c1e <saveStatusBars+0x1be>
		FPutC (fp,1);
    6bdc:	/--|-> move.l 112(sp),16(sp)
    6be2:	|  |   moveq #1,d0
    6be4:	|  |   move.l d0,12(sp)
    6be8:	|  |   move.l 1b5aa <DOSBase>,d0
    6bee:	|  |   movea.l d0,a6
    6bf0:	|  |   move.l 16(sp),d1
    6bf4:	|  |   move.l 12(sp),d2
    6bf8:	|  |   jsr -312(a6)
    6bfc:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    6c00:	|  |   movea.l 104(sp),a0
    6c04:	|  |   move.l (a0),d0
    6c06:	|  |   move.l 112(sp),-(sp)
    6c0a:	|  |   move.l d0,-(sp)
    6c0c:	|  |   jsr bd8 <writeString>
    6c12:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    6c14:	|  |   movea.l 104(sp),a0
    6c18:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    6c1e:	|  \-> tst.l 104(sp)
    6c22:	\----- bne.s 6bdc <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    6c24:	       move.l 112(sp),28(sp)
    6c2a:	       clr.l 24(sp)
    6c2e:	       move.l 1b5aa <DOSBase>,d0
    6c34:	       movea.l d0,a6
    6c36:	       move.l 28(sp),d1
    6c3a:	       move.l 24(sp),d2
    6c3e:	       jsr -312(a6)
    6c42:	       move.l d0,20(sp)
}
    6c46:	       nop
    6c48:	       move.l (sp)+,d2
    6c4a:	       movea.l (sp)+,a6
    6c4c:	       lea 100(sp),sp
    6c50:	       rts

00006c52 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    6c52:	movea.l 1af2a <nowStatus>,a0
    6c58:	move.l 4(sp),6(a0)
}
    6c5e:	nop
    6c60:	rts

00006c62 <setStatusBar>:

void setStatusBar (char * txt) {
    6c62:	    subq.l #4,sp
    6c64:	    move.l a6,-(sp)
    6c66:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    6c68:	    movea.l 1af2a <nowStatus>,a0
    6c6e:	    move.l (a0),d0
    6c70:	/-- beq.s 6ca4 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    6c72:	|   movea.l 1af2a <nowStatus>,a0
    6c78:	|   movea.l (a0),a0
    6c7a:	|   move.l (a0),8(sp)
    6c7e:	|   move.l 1b5a2 <SysBase>,d0
    6c84:	|   movea.l d0,a6
    6c86:	|   movea.l 8(sp),a1
    6c8a:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    6c8e:	|   movea.l 1af2a <nowStatus>,a0
    6c94:	|   movea.l (a0),a2
    6c96:	|   move.l 16(sp),-(sp)
    6c9a:	|   jsr b8 <copyString>
    6ca0:	|   addq.l #4,sp
    6ca2:	|   move.l d0,(a2)
	}
}
    6ca4:	\-> nop
    6ca6:	    movea.l (sp)+,a2
    6ca8:	    movea.l (sp)+,a6
    6caa:	    addq.l #4,sp
    6cac:	    rts

00006cae <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    6cae:	       movea.l 1af2a <nowStatus>,a0
    6cb4:	       move.l (a0),d0
    6cb6:	/----- beq.s 6cc4 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    6cb8:	|      movea.l 1af2a <nowStatus>,a0
    6cbe:	|      movea.l (a0),a0
    6cc0:	|      move.l (a0),d0
    6cc2:	|  /-- bra.s 6cca <statusBarText+0x1c>
	} else {
		return "";
    6cc4:	\--|-> move.l #95536,d0
	}
    6cca:	   \-> rts

00006ccc <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    6ccc:	       lea -28(sp),sp
    6cd0:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    6cd4:	       move.l 52(sp),-(sp)
    6cd8:	       jsr 14676 <stringWidth>
    6cde:	       addq.l #4,sp
    6ce0:	       asr.l #1,d0
    6ce2:	       move.l d0,-(sp)
    6ce4:	       jsr 1627e <__floatsisf>
    6cea:	       addq.l #4,sp
    6cec:	       move.l d0,d1
    6cee:	       move.l 1af42 <cameraZoom>,d0
    6cf4:	       move.l d0,-(sp)
    6cf6:	       move.l d1,-(sp)
    6cf8:	       jsr 1612a <__divsf3>
    6cfe:	       addq.l #8,sp
    6d00:	       move.l d0,-(sp)
    6d02:	       jsr 16216 <__fixsfsi>
    6d08:	       addq.l #4,sp
    6d0a:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    6d0e:	       move.l 56(sp),d0
    6d12:	       sub.l 44(sp),d0
    6d16:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    6d1a:	       move.l 56(sp),d0
    6d1e:	       add.l 44(sp),d0
    6d22:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    6d26:	       moveq #12,d0
    6d28:	       move.l d0,32(sp)
    6d2c:	       clr.l 28(sp)
    6d30:	       move.l 1b5a2 <SysBase>,d0
    6d36:	       movea.l d0,a6
    6d38:	       move.l 32(sp),d0
    6d3c:	       move.l 28(sp),d1
    6d40:	       jsr -684(a6)
    6d44:	       move.l d0,24(sp)
    6d48:	       move.l 24(sp),d0
    6d4c:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    6d50:	       movea.l 1b5fe <speech>,a0
    6d56:	       move.l 4(a0),d0
    6d5a:	       movea.l 20(sp),a0
    6d5e:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    6d62:	       move.l 52(sp),-(sp)
    6d66:	       jsr b8 <copyString>
    6d6c:	       addq.l #4,sp
    6d6e:	       movea.l 20(sp),a0
    6d72:	       move.l d0,(a0)
	newLine -> x = xx1;
    6d74:	       movea.l 20(sp),a0
    6d78:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    6d7e:	       movea.l 1b5fe <speech>,a0
    6d84:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    6d8a:	       moveq #4,d0
    6d8c:	       cmp.l 40(sp),d0
    6d90:	   /-- blt.s 6db2 <addSpeechLine+0xe6>
    6d92:	   |   movea.l 60(sp),a0
    6d96:	   |   move.l (a0),d1
    6d98:	   |   moveq #5,d0
    6d9a:	   |   sub.l 40(sp),d0
    6d9e:	   |   cmp.l d1,d0
    6da0:	   +-- ble.s 6db2 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    6da2:	   |   moveq #5,d0
    6da4:	   |   sub.l 40(sp),d0
    6da8:	   |   movea.l 60(sp),a0
    6dac:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    6dae:	/--|-- bra.w 6ede <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    6db2:	|  \-> move.l 36(sp),-(sp)
    6db6:	|      jsr 1627e <__floatsisf>
    6dbc:	|      addq.l #4,sp
    6dbe:	|      move.l d0,d2
    6dc0:	|      move.l 1b4f6 <winWidth>,d0
    6dc6:	|      move.l d0,-(sp)
    6dc8:	|      jsr 162a6 <__floatunsisf>
    6dce:	|      addq.l #4,sp
    6dd0:	|      move.l d0,d1
    6dd2:	|      move.l 1af42 <cameraZoom>,d0
    6dd8:	|      move.l d0,-(sp)
    6dda:	|      move.l d1,-(sp)
    6ddc:	|      jsr 1612a <__divsf3>
    6de2:	|      addq.l #8,sp
    6de4:	|      move.l #1084227584,-(sp)
    6dea:	|      move.l d0,-(sp)
    6dec:	|      jsr 16572 <__subsf3>
    6df2:	|      addq.l #8,sp
    6df4:	|      move.l d0,-(sp)
    6df6:	|      move.l d2,-(sp)
    6df8:	|      jsr 16366 <__gesf2>
    6dfe:	|      addq.l #8,sp
    6e00:	|      tst.l d0
    6e02:	|  /-- bge.s 6e08 <addSpeechLine+0x13c>
}
    6e04:	+--|-- bra.w 6ede <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    6e08:	|  \-> movea.l 60(sp),a0
    6e0c:	|      move.l (a0),d0
    6e0e:	|      move.l d0,-(sp)
    6e10:	|      jsr 1627e <__floatsisf>
    6e16:	|      addq.l #4,sp
    6e18:	|      move.l d0,-(sp)
    6e1a:	|      jsr 16196 <__extendsfdf2>
    6e20:	|      addq.l #4,sp
    6e22:	|      move.l d0,d4
    6e24:	|      move.l d1,d5
    6e26:	|      move.l 1b4f6 <winWidth>,d0
    6e2c:	|      move.l d0,-(sp)
    6e2e:	|      jsr 162a6 <__floatunsisf>
    6e34:	|      addq.l #4,sp
    6e36:	|      move.l d0,d1
    6e38:	|      move.l 1af42 <cameraZoom>,d0
    6e3e:	|      move.l d0,-(sp)
    6e40:	|      move.l d1,-(sp)
    6e42:	|      jsr 1612a <__divsf3>
    6e48:	|      addq.l #8,sp
    6e4a:	|      move.l d0,-(sp)
    6e4c:	|      jsr 16196 <__extendsfdf2>
    6e52:	|      addq.l #4,sp
    6e54:	|      clr.l -(sp)
    6e56:	|      move.l #1075052544,-(sp)
    6e5c:	|      move.l d1,-(sp)
    6e5e:	|      move.l d0,-(sp)
    6e60:	|      jsr 16510 <__subdf3>
    6e66:	|      lea 16(sp),sp
    6e6a:	|      move.l d0,d2
    6e6c:	|      move.l d1,d3
    6e6e:	|      move.l 36(sp),-(sp)
    6e72:	|      jsr 1623e <__floatsidf>
    6e78:	|      addq.l #4,sp
    6e7a:	|      move.l d1,-(sp)
    6e7c:	|      move.l d0,-(sp)
    6e7e:	|      move.l d3,-(sp)
    6e80:	|      move.l d2,-(sp)
    6e82:	|      jsr 16510 <__subdf3>
    6e88:	|      lea 16(sp),sp
    6e8c:	|      move.l d1,-(sp)
    6e8e:	|      move.l d0,-(sp)
    6e90:	|      move.l d5,-(sp)
    6e92:	|      move.l d4,-(sp)
    6e94:	|      jsr 1639c <__gtdf2>
    6e9a:	|      lea 16(sp),sp
    6e9e:	|      tst.l d0
    6ea0:	|  /-- bgt.s 6ea4 <addSpeechLine+0x1d8>
}
    6ea2:	+--|-- bra.s 6ede <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    6ea4:	|  \-> move.l 1b4f6 <winWidth>,d0
    6eaa:	|      move.l d0,-(sp)
    6eac:	|      jsr 162a6 <__floatunsisf>
    6eb2:	|      addq.l #4,sp
    6eb4:	|      move.l d0,d1
    6eb6:	|      move.l 1af42 <cameraZoom>,d0
    6ebc:	|      move.l d0,-(sp)
    6ebe:	|      move.l d1,-(sp)
    6ec0:	|      jsr 1612a <__divsf3>
    6ec6:	|      addq.l #8,sp
    6ec8:	|      move.l d0,-(sp)
    6eca:	|      jsr 16216 <__fixsfsi>
    6ed0:	|      addq.l #4,sp
    6ed2:	|      subq.l #5,d0
    6ed4:	|      sub.l 36(sp),d0
    6ed8:	|      movea.l 60(sp),a0
    6edc:	|      move.l d0,(a0)
}
    6ede:	\----> nop
    6ee0:	       movem.l (sp)+,d2-d5/a6
    6ee4:	       lea 28(sp),sp
    6ee8:	       rts

00006eea <initSpeech>:


void initSpeech () {
    6eea:	       lea -12(sp),sp
    6eee:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    6ef0:	       moveq #20,d0
    6ef2:	       move.l d0,12(sp)
    6ef6:	       clr.l 8(sp)
    6efa:	       move.l 1b5a2 <SysBase>,d0
    6f00:	       movea.l d0,a6
    6f02:	       move.l 12(sp),d0
    6f06:	       move.l 8(sp),d1
    6f0a:	       jsr -684(a6)
    6f0e:	       move.l d0,4(sp)
    6f12:	       move.l 4(sp),d0
    6f16:	       move.l d0,1b5fe <speech>
	if (speech) {
    6f1c:	       move.l 1b5fe <speech>,d0
    6f22:	/----- beq.s 6f4e <initSpeech+0x64>
		speech -> currentTalker = NULL;
    6f24:	|      movea.l 1b5fe <speech>,a0
    6f2a:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    6f2c:	|      movea.l 1b5fe <speech>,a0
    6f32:	|      clr.l 4(a0)
		speech -> speechY = 0;
    6f36:	|      movea.l 1b5fe <speech>,a0
    6f3c:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    6f40:	|      movea.l 1b5fe <speech>,a0
    6f46:	|      moveq #-1,d0
    6f48:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    6f4c:	|  /-- bra.s 6f5c <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    6f4e:	\--|-> pea 17b17 <PutChar+0x1201>
    6f54:	   |   jsr 15fc6 <KPrintF>
    6f5a:	   |   addq.l #4,sp
}
    6f5c:	   \-> nop
    6f5e:	       movea.l (sp)+,a6
    6f60:	       lea 12(sp),sp
    6f64:	       rts

00006f66 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    6f66:	       movea.l 1b5fe <speech>,a0
    6f6c:	       move.l 4(a0),d0
    6f70:	/----- beq.s 6f7e <isThereAnySpeechGoingOn+0x18>
    6f72:	|      movea.l 1b5fe <speech>,a0
    6f78:	|      move.l 16(a0),d0
    6f7c:	|  /-- bra.s 6f80 <isThereAnySpeechGoingOn+0x1a>
    6f7e:	\--|-> moveq #-1,d0
}
    6f80:	   \-> rts

00006f82 <killAllSpeech>:

void killAllSpeech () {
    6f82:	       lea -12(sp),sp
    6f86:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    6f88:	       movea.l 1b5fe <speech>,a0
    6f8e:	       move.l 12(a0),d0
    6f92:	       moveq #-1,d1
    6f94:	       cmp.l d0,d1
    6f96:	   /-- beq.s 6fa4 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    6f98:	   |   movea.l 1b5fe <speech>,a0
    6f9e:	   |   moveq #-1,d0
    6fa0:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    6fa4:	   \-> movea.l 1b5fe <speech>,a0
    6faa:	       move.l (a0),d0
    6fac:	/----- beq.w 7038 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    6fb0:	|      movea.l 1b5fe <speech>,a0
    6fb6:	|      move.l (a0),d1
    6fb8:	|      lea -132(sp),sp
    6fbc:	|      move.l sp,d0
    6fbe:	|      movea.w #132,a0
    6fc2:	|      move.l a0,-(sp)
    6fc4:	|      move.l d1,-(sp)
    6fc6:	|      move.l d0,-(sp)
    6fc8:	|      jsr 15f7a <memcpy>
    6fce:	|      lea 12(sp),sp
    6fd2:	|      jsr 9cbc <makeSilent>
    6fd8:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    6fdc:	|      movea.l 1b5fe <speech>,a0
    6fe2:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    6fe4:	+----- bra.s 7038 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    6fe6:	|  /-> movea.l 1b5fe <speech>,a0
    6fec:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    6ff2:	|  |   movea.l 1b5fe <speech>,a0
    6ff8:	|  |   movea.l 4(a0),a1
    6ffc:	|  |   movea.l 1b5fe <speech>,a0
    7002:	|  |   move.l 4(a1),d0
    7006:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    700a:	|  |   movea.l 12(sp),a0
    700e:	|  |   move.l (a0),8(sp)
    7012:	|  |   move.l 1b5a2 <SysBase>,d0
    7018:	|  |   movea.l d0,a6
    701a:	|  |   movea.l 8(sp),a1
    701e:	|  |   jsr -690(a6)
		FreeVec(killMe);
    7022:	|  |   move.l 12(sp),4(sp)
    7028:	|  |   move.l 1b5a2 <SysBase>,d0
    702e:	|  |   movea.l d0,a6
    7030:	|  |   movea.l 4(sp),a1
    7034:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    7038:	\--|-> movea.l 1b5fe <speech>,a0
    703e:	   |   move.l 4(a0),d0
    7042:	   \-- bne.s 6fe6 <killAllSpeech+0x64>
	}
}
    7044:	       nop
    7046:	       nop
    7048:	       movea.l (sp)+,a6
    704a:	       lea 12(sp),sp
    704e:	       rts

00007050 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    7050:	pea 2 <_start+0x2>
    7054:	move.l 8(sp),-(sp)
    7058:	jsr 71b0 <setFrames>
    705e:	addq.l #8,sp
}
    7060:	nop
    7062:	rts

00007064 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    7064:	       lea -52(sp),sp
    7068:	       move.l a6,-(sp)
    706a:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    706c:	       movea.l 64(sp),a0
    7070:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    7076:	       move.l 1af2e <speechSpeed>,d0
    707c:	       move.l 68(sp),-(sp)
    7080:	       move.l d0,-(sp)
    7082:	       jsr a46 <putFloat>
    7088:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    708a:	       movea.l 64(sp),a0
    708e:	       move.l 8(a0),d0
    7092:	       move.l 68(sp),-(sp)
    7096:	       move.l d0,-(sp)
    7098:	       jsr 8d0 <put2bytes>
    709e:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    70a0:	       movea.l 64(sp),a0
    70a4:	       move.l 16(a0),d0
    70a8:	       move.l 68(sp),-(sp)
    70ac:	       move.l d0,-(sp)
    70ae:	       jsr 8d0 <put2bytes>
    70b4:	       addq.l #8,sp
		if (sS -> currentTalker) {
    70b6:	       movea.l 64(sp),a0
    70ba:	       move.l (a0),d0
    70bc:	   /-- beq.s 7100 <saveSpeech+0x9c>
			FPutC (fp, 1);
    70be:	   |   move.l 68(sp),40(sp)
    70c4:	   |   moveq #1,d0
    70c6:	   |   move.l d0,36(sp)
    70ca:	   |   move.l 1b5aa <DOSBase>,d0
    70d0:	   |   movea.l d0,a6
    70d2:	   |   move.l 40(sp),d1
    70d6:	   |   move.l 36(sp),d2
    70da:	   |   jsr -312(a6)
    70de:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    70e2:	   |   movea.l 64(sp),a0
    70e6:	   |   movea.l (a0),a0
    70e8:	   |   movea.l 114(a0),a0
    70ec:	   |   move.l 4(a0),d0
    70f0:	   |   move.l 68(sp),-(sp)
    70f4:	   |   move.l d0,-(sp)
    70f6:	   |   jsr 8d0 <put2bytes>
    70fc:	   |   addq.l #8,sp
    70fe:	/--|-- bra.s 717c <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    7100:	|  \-> move.l 68(sp),52(sp)
    7106:	|      clr.l 48(sp)
    710a:	|      move.l 1b5aa <DOSBase>,d0
    7110:	|      movea.l d0,a6
    7112:	|      move.l 52(sp),d1
    7116:	|      move.l 48(sp),d2
    711a:	|      jsr -312(a6)
    711e:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    7122:	+----- bra.s 717c <saveSpeech+0x118>
			FPutC (fp, 1);
    7124:	|  /-> move.l 68(sp),16(sp)
    712a:	|  |   moveq #1,d0
    712c:	|  |   move.l d0,12(sp)
    7130:	|  |   move.l 1b5aa <DOSBase>,d0
    7136:	|  |   movea.l d0,a6
    7138:	|  |   move.l 16(sp),d1
    713c:	|  |   move.l 12(sp),d2
    7140:	|  |   jsr -312(a6)
    7144:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    7148:	|  |   movea.l 56(sp),a0
    714c:	|  |   move.l (a0),d0
    714e:	|  |   move.l 68(sp),-(sp)
    7152:	|  |   move.l d0,-(sp)
    7154:	|  |   jsr bd8 <writeString>
    715a:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    715c:	|  |   movea.l 56(sp),a0
    7160:	|  |   move.l 8(a0),d0
    7164:	|  |   move.l 68(sp),-(sp)
    7168:	|  |   move.l d0,-(sp)
    716a:	|  |   jsr 8d0 <put2bytes>
    7170:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    7172:	|  |   movea.l 56(sp),a0
    7176:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    717c:	\--|-> tst.l 56(sp)
    7180:	   \-- bne.s 7124 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    7182:	       move.l 68(sp),28(sp)
    7188:	       clr.l 24(sp)
    718c:	       move.l 1b5aa <DOSBase>,d0
    7192:	       movea.l d0,a6
    7194:	       move.l 28(sp),d1
    7198:	       move.l 24(sp),d2
    719c:	       jsr -312(a6)
    71a0:	       move.l d0,20(sp)
}
    71a4:	       nop
    71a6:	       move.l (sp)+,d2
    71a8:	       movea.l (sp)+,a6
    71aa:	       lea 52(sp),sp
    71ae:	       rts

000071b0 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    71b0:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    71b2:	movea.l 8(sp),a0
    71b6:	movea.l 80(a0),a0
    71ba:	move.l (a0),d2
    71bc:	movea.l 8(sp),a0
    71c0:	movea.l 80(a0),a0
    71c4:	move.l 4(a0),d0
    71c8:	move.l 12(sp),-(sp)
    71cc:	move.l d0,-(sp)
    71ce:	jsr 16800 <__mulsi3>
    71d4:	addq.l #8,sp
    71d6:	move.l d0,d1
    71d8:	movea.l 8(sp),a0
    71dc:	move.l 106(a0),d0
    71e0:	add.l d1,d0
    71e2:	add.l d0,d0
    71e4:	add.l d0,d0
    71e6:	movea.l d2,a0
    71e8:	adda.l d0,a0
    71ea:	move.l (a0),d0
    71ec:	movea.l 8(sp),a0
    71f0:	move.l d0,72(a0)
}
    71f4:	nop
    71f6:	move.l (sp)+,d2
    71f8:	rts

000071fa <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    71fa:	       lea -20(sp),sp
    71fe:	       move.l d2,-(sp)
    7200:	       move.l 40(sp),d0
    7204:	       move.w d0,d0
    7206:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    720a:	       movea.l 1b5fe <speech>,a0
    7210:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    7216:	       move.l 32(sp),-(sp)
    721a:	       jsr 97a6 <findPerson>
    7220:	       addq.l #4,sp
    7222:	       move.l d0,16(sp)
    if (thisPerson) {
    7226:	   /-- beq.s 724c <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    7228:	   |   movea.w 6(sp),a0
    722c:	   |   move.l a0,-(sp)
    722e:	   |   move.l 40(sp),-(sp)
    7232:	   |   move.l 24(sp),-(sp)
    7236:	   |   move.l 40(sp),-(sp)
    723a:	   |   jsr 7312 <wrapSpeechPerson>
    7240:	   |   lea 16(sp),sp
    7244:	   |   move.l d0,20(sp)
    7248:	/--|-- bra.w 7306 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    724c:	|  \-> move.l 32(sp),-(sp)
    7250:	|      jsr 147e8 <getRegionForObject>
    7256:	|      addq.l #4,sp
    7258:	|      move.l d0,12(sp)
        if (thisRegion) {
    725c:	|  /-- beq.s 72c8 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    725e:	|  |   movea.l 12(sp),a0
    7262:	|  |   movea.l 28(a0),a0
    7266:	|  |   move.l 28(a0),d0
    726a:	|  |   movea.l 12(sp),a0
    726e:	|  |   movea.l 4(a0),a1
    7272:	|  |   movea.l 12(sp),a0
    7276:	|  |   movea.l 28(a0),a0
    727a:	|  |   move.l 20(a0),d1
    727e:	|  |   movea.l a1,a0
    7280:	|  |   suba.l d1,a0
    7282:	|  |   move.l 1b6b8 <cameraY>,d1
    7288:	|  |   movea.l a0,a1
    728a:	|  |   suba.l d1,a1
    728c:	|  |   movea.l 12(sp),a0
    7290:	|  |   move.l (a0),d2
    7292:	|  |   movea.l 12(sp),a0
    7296:	|  |   move.l 8(a0),d1
    729a:	|  |   add.l d2,d1
    729c:	|  |   move.l d1,d2
    729e:	|  |   asr.l #1,d2
    72a0:	|  |   move.l 1b6b4 <cameraX>,d1
    72a6:	|  |   movea.l d2,a0
    72a8:	|  |   suba.l d1,a0
    72aa:	|  |   move.l 36(sp),-(sp)
    72ae:	|  |   move.l d0,-(sp)
    72b0:	|  |   move.l a1,-(sp)
    72b2:	|  |   move.l a0,-(sp)
    72b4:	|  |   move.l 44(sp),-(sp)
    72b8:	|  |   jsr 7430 <wrapSpeechXY>
    72be:	|  |   lea 20(sp),sp
    72c2:	|  |   move.l d0,20(sp)
    72c6:	+--|-- bra.s 7306 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    72c8:	|  \-> move.l 32(sp),-(sp)
    72cc:	|      jsr c680 <findObjectType>
    72d2:	|      addq.l #4,sp
    72d4:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    72d8:	|      movea.l 8(sp),a0
    72dc:	|      move.l 28(a0),d1
    72e0:	|      move.l 1b4f6 <winWidth>,d0
    72e6:	|      lsr.l #1,d0
    72e8:	|      move.l 36(sp),-(sp)
    72ec:	|      move.l d1,-(sp)
    72ee:	|      pea a <_start+0xa>
    72f2:	|      move.l d0,-(sp)
    72f4:	|      move.l 44(sp),-(sp)
    72f8:	|      jsr 7430 <wrapSpeechXY>
    72fe:	|      lea 20(sp),sp
    7302:	|      move.l d0,20(sp)
        }
    }
    return i;
    7306:	\----> move.l 20(sp),d0
}
    730a:	       move.l (sp)+,d2
    730c:	       lea 20(sp),sp
    7310:	       rts

00007312 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    7312:	    subq.l #8,sp
    7314:	    movem.l d2-d4,-(sp)
    7318:	    move.l 36(sp),d0
    731c:	    move.w d0,d0
    731e:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    7322:	    movea.l 28(sp),a0
    7326:	    movea.l 114(a0),a0
    732a:	    move.l 28(a0),d2
    732e:	    movea.l 28(sp),a0
    7332:	    move.l 4(a0),d3
    7336:	    move.l 1b6b8 <cameraY>,d0
    733c:	    move.l d0,-(sp)
    733e:	    jsr 1627e <__floatsisf>
    7344:	    addq.l #4,sp
    7346:	    move.l d0,-(sp)
    7348:	    move.l d3,-(sp)
    734a:	    jsr 16572 <__subsf3>
    7350:	    addq.l #8,sp
    7352:	    move.l d0,d3
    7354:	    movea.l 28(sp),a0
    7358:	    move.l 32(a0),d4
    735c:	    movea.l 28(sp),a0
    7360:	    move.l 20(a0),d1
    7364:	    movea.l 28(sp),a0
    7368:	    move.l 24(a0),d0
    736c:	    sub.l d0,d1
    736e:	    move.l d1,-(sp)
    7370:	    jsr 1627e <__floatsisf>
    7376:	    addq.l #4,sp
    7378:	    move.l d0,-(sp)
    737a:	    move.l d4,-(sp)
    737c:	    jsr 16330 <__mulsf3>
    7382:	    addq.l #8,sp
    7384:	    move.l d0,-(sp)
    7386:	    move.l d3,-(sp)
    7388:	    jsr 16572 <__subsf3>
    738e:	    addq.l #8,sp
    7390:	    move.l d0,d3
    7392:	    movea.l 28(sp),a0
    7396:	    movea.l 114(a0),a0
    739a:	    move.l 20(a0),d0
    739e:	    move.l d0,-(sp)
    73a0:	    jsr 1627e <__floatsisf>
    73a6:	    addq.l #4,sp
    73a8:	    move.l d0,-(sp)
    73aa:	    move.l d3,-(sp)
    73ac:	    jsr 16572 <__subsf3>
    73b2:	    addq.l #8,sp
    73b4:	    move.l d0,-(sp)
    73b6:	    jsr 16216 <__fixsfsi>
    73bc:	    addq.l #4,sp
    73be:	    move.l d0,d4
    73c0:	    movea.l 28(sp),a0
    73c4:	    move.l (a0),d3
    73c6:	    move.l 1b6b4 <cameraX>,d0
    73cc:	    move.l d0,-(sp)
    73ce:	    jsr 1627e <__floatsisf>
    73d4:	    addq.l #4,sp
    73d6:	    move.l d0,-(sp)
    73d8:	    move.l d3,-(sp)
    73da:	    jsr 16572 <__subsf3>
    73e0:	    addq.l #8,sp
    73e2:	    move.l d0,-(sp)
    73e4:	    jsr 16216 <__fixsfsi>
    73ea:	    addq.l #4,sp
    73ec:	    move.l 32(sp),-(sp)
    73f0:	    move.l d2,-(sp)
    73f2:	    move.l d4,-(sp)
    73f4:	    move.l d0,-(sp)
    73f6:	    move.l 40(sp),-(sp)
    73fa:	    jsr 7430 <wrapSpeechXY>
    7400:	    lea 20(sp),sp
    7404:	    move.l d0,16(sp)
	if (animPerson) {
    7408:	    tst.w 14(sp)
    740c:	/-- beq.s 7424 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    740e:	|   move.l 28(sp),-(sp)
    7412:	|   jsr 7050 <makeTalker>
    7418:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    741a:	|   movea.l 1b5fe <speech>,a0
    7420:	|   move.l 28(sp),(a0)
	}
	return i;
    7424:	\-> move.l 16(sp),d0
}
    7428:	    movem.l (sp)+,d2-d4
    742c:	    addq.l #8,sp
    742e:	    rts

00007430 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    7430:	                   lea -16(sp),sp
    7434:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    7438:	                   clr.l 16(sp)
    killAllSpeech();
    743c:	                   jsr 6f82 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    7442:	                   move.l 36(sp),-(sp)
    7446:	                   jsr 12d80 <strlen>
    744c:	                   addq.l #4,sp
    744e:	                   movea.l d0,a0
    7450:	                   lea 20(a0),a0
    7454:	                   move.l a0,-(sp)
    7456:	                   jsr 162a6 <__floatunsisf>
    745c:	                   addq.l #4,sp
    745e:	                   move.l d0,d1
    7460:	                   move.l 1af2e <speechSpeed>,d0
    7466:	                   move.l d0,-(sp)
    7468:	                   move.l d1,-(sp)
    746a:	                   jsr 16330 <__mulsf3>
    7470:	                   addq.l #8,sp
    7472:	                   move.l d0,-(sp)
    7474:	                   jsr 16216 <__fixsfsi>
    747a:	                   addq.l #4,sp
    747c:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    7480:	               /-- bgt.s 7488 <wrapSpeechXY+0x58>
    7482:	               |   moveq #1,d0
    7484:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    7488:	               \-> moveq #-1,d1
    748a:	                   cmp.l 52(sp),d1
    748e:	               /-- beq.s 74ce <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    7490:	               |   move.l 1b6c8 <speechMode>,d0
    7496:	               +-- ble.s 74ce <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    7498:	               |   clr.l -(sp)
    749a:	               |   move.l 56(sp),-(sp)
    749e:	               |   jsr c34a <startSound>
    74a4:	               |   addq.l #8,sp
    74a6:	               |   tst.w d0
    74a8:	               +-- beq.s 74ce <wrapSpeechXY+0x9e>
                speechTime = -10;
    74aa:	               |   moveq #-10,d0
    74ac:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    74b0:	               |   movea.l 1b5fe <speech>,a0
    74b6:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    74bc:	               |   move.l 1b6c8 <speechMode>,d0
    74c2:	               |   moveq #2,d1
    74c4:	               |   cmp.l d0,d1
    74c6:	               +-- bne.s 74ce <wrapSpeechXY+0x9e>
    74c8:	               |   moveq #-10,d0
    74ca:	/--------------|-- bra.w 7754 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    74ce:	|              \-> movea.l 1b5fe <speech>,a0
    74d4:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    74da:	|     /----------- bra.w 758e <wrapSpeechXY+0x15e>
        a = wrap;
    74de:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    74e4:	|  |  |        /-- bra.s 74f4 <wrapSpeechXY+0xc4>
            a--;
    74e6:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    74ea:	|  |  |  |     +-- bne.s 74f4 <wrapSpeechXY+0xc4>
                a = wrap;
    74ec:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    74f2:	|  |  |  |  /--|-- bra.s 7506 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    74f4:	|  |  |  |  |  \-> move.l 28(sp),d0
    74f8:	|  |  |  |  |      movea.l 36(sp),a0
    74fc:	|  |  |  |  |      adda.l d0,a0
    74fe:	|  |  |  |  |      move.b (a0),d0
    7500:	|  |  |  |  |      cmpi.b #32,d0
    7504:	|  |  |  \--|----- bne.s 74e6 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    7506:	|  |  |     \----> move.l 28(sp),d0
    750a:	|  |  |            movea.l 36(sp),a0
    750e:	|  |  |            adda.l d0,a0
    7510:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    7512:	|  |  |            lea 16(sp),a0
    7516:	|  |  |            move.l a0,-(sp)
    7518:	|  |  |            move.l 44(sp),-(sp)
    751c:	|  |  |            move.l 44(sp),-(sp)
    7520:	|  |  |            jsr 6ccc <addSpeechLine>
    7526:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    752a:	|  |  |            move.l 28(sp),d0
    752e:	|  |  |            movea.l 36(sp),a0
    7532:	|  |  |            adda.l d0,a0
    7534:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    7538:	|  |  |            move.l 28(sp),d0
    753c:	|  |  |            addq.l #1,d0
    753e:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    7542:	|  |  |            move.l 44(sp),-(sp)
    7546:	|  |  |            jsr 1627e <__floatsisf>
    754c:	|  |  |            addq.l #4,sp
    754e:	|  |  |            move.l d0,d2
    7550:	|  |  |            move.l 1b6f2 <fontHeight>,d0
    7556:	|  |  |            move.l d0,-(sp)
    7558:	|  |  |            jsr 1627e <__floatsisf>
    755e:	|  |  |            addq.l #4,sp
    7560:	|  |  |            move.l d0,d1
    7562:	|  |  |            move.l 1af42 <cameraZoom>,d0
    7568:	|  |  |            move.l d0,-(sp)
    756a:	|  |  |            move.l d1,-(sp)
    756c:	|  |  |            jsr 1612a <__divsf3>
    7572:	|  |  |            addq.l #8,sp
    7574:	|  |  |            move.l d0,-(sp)
    7576:	|  |  |            move.l d2,-(sp)
    7578:	|  |  |            jsr 16572 <__subsf3>
    757e:	|  |  |            addq.l #8,sp
    7580:	|  |  |            move.l d0,-(sp)
    7582:	|  |  |            jsr 16216 <__fixsfsi>
    7588:	|  |  |            addq.l #4,sp
    758a:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    758e:	|  |  \----------> move.l 36(sp),-(sp)
    7592:	|  |               jsr 12d80 <strlen>
    7598:	|  |               addq.l #4,sp
    759a:	|  |               move.l d0,d1
    759c:	|  |               move.l 48(sp),d0
    75a0:	|  |               cmp.l d1,d0
    75a2:	|  \-------------- bcs.w 74de <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    75a6:	|                  lea 16(sp),a0
    75aa:	|                  move.l a0,-(sp)
    75ac:	|                  move.l 44(sp),-(sp)
    75b0:	|                  move.l 44(sp),-(sp)
    75b4:	|                  jsr 6ccc <addSpeechLine>
    75ba:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    75be:	|                  move.l 44(sp),-(sp)
    75c2:	|                  jsr 1627e <__floatsisf>
    75c8:	|                  addq.l #4,sp
    75ca:	|                  move.l d0,d2
    75cc:	|                  move.l 1b6f2 <fontHeight>,d0
    75d2:	|                  move.l d0,-(sp)
    75d4:	|                  jsr 1627e <__floatsisf>
    75da:	|                  addq.l #4,sp
    75dc:	|                  move.l d0,d1
    75de:	|                  move.l 1af42 <cameraZoom>,d0
    75e4:	|                  move.l d0,-(sp)
    75e6:	|                  move.l d1,-(sp)
    75e8:	|                  jsr 1612a <__divsf3>
    75ee:	|                  addq.l #8,sp
    75f0:	|                  move.l d0,-(sp)
    75f2:	|                  move.l d2,-(sp)
    75f4:	|                  jsr 16572 <__subsf3>
    75fa:	|                  addq.l #8,sp
    75fc:	|                  move.l d0,-(sp)
    75fe:	|                  jsr 16216 <__fixsfsi>
    7604:	|                  addq.l #4,sp
    7606:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    760a:	|              /-- bpl.s 7628 <wrapSpeechXY+0x1f8>
    760c:	|              |   movea.l 1b5fe <speech>,a0
    7612:	|              |   move.l 8(a0),d0
    7616:	|              |   movea.l 1b5fe <speech>,a0
    761c:	|              |   sub.l 44(sp),d0
    7620:	|              |   move.l d0,8(a0)
    7624:	|           /--|-- bra.w 7716 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    7628:	|           |  \-> movea.l 1b5fe <speech>,a0
    762e:	|           |      move.l 8(a0),d0
    7632:	|           |      move.l d0,-(sp)
    7634:	|           |      jsr 1627e <__floatsisf>
    763a:	|           |      addq.l #4,sp
    763c:	|           |      move.l d0,d2
    763e:	|           |      move.l 1b6b8 <cameraY>,d0
    7644:	|           |      move.l d0,-(sp)
    7646:	|           |      jsr 1627e <__floatsisf>
    764c:	|           |      addq.l #4,sp
    764e:	|           |      move.l d0,d3
    7650:	|           |      move.l 1b4fa <winHeight>,d4
    7656:	|           |      move.l 1b6f2 <fontHeight>,d0
    765c:	|           |      pea 3 <_start+0x3>
    7660:	|           |      move.l d0,-(sp)
    7662:	|           |      jsr 1687e <__divsi3>
    7668:	|           |      addq.l #8,sp
    766a:	|           |      move.l d4,d1
    766c:	|           |      sub.l d0,d1
    766e:	|           |      move.l d1,-(sp)
    7670:	|           |      jsr 162a6 <__floatunsisf>
    7676:	|           |      addq.l #4,sp
    7678:	|           |      move.l d0,d1
    767a:	|           |      move.l 1af42 <cameraZoom>,d0
    7680:	|           |      move.l d0,-(sp)
    7682:	|           |      move.l d1,-(sp)
    7684:	|           |      jsr 1612a <__divsf3>
    768a:	|           |      addq.l #8,sp
    768c:	|           |      move.l d0,-(sp)
    768e:	|           |      move.l d3,-(sp)
    7690:	|           |      jsr 16030 <__addsf3>
    7696:	|           |      addq.l #8,sp
    7698:	|           |      move.l d0,-(sp)
    769a:	|           |      move.l d2,-(sp)
    769c:	|           |      jsr 163ea <__gtsf2>
    76a2:	|           |      addq.l #8,sp
    76a4:	|           |      tst.l d0
    76a6:	|           +----- ble.s 7716 <wrapSpeechXY+0x2e6>
    76a8:	|           |      move.l 1b6b8 <cameraY>,d0
    76ae:	|           |      move.l d0,-(sp)
    76b0:	|           |      jsr 1627e <__floatsisf>
    76b6:	|           |      addq.l #4,sp
    76b8:	|           |      move.l d0,d2
    76ba:	|           |      move.l 1b4fa <winHeight>,d3
    76c0:	|           |      move.l 1b6f2 <fontHeight>,d0
    76c6:	|           |      pea 3 <_start+0x3>
    76ca:	|           |      move.l d0,-(sp)
    76cc:	|           |      jsr 1687e <__divsi3>
    76d2:	|           |      addq.l #8,sp
    76d4:	|           |      move.l d3,d1
    76d6:	|           |      sub.l d0,d1
    76d8:	|           |      move.l d1,-(sp)
    76da:	|           |      jsr 162a6 <__floatunsisf>
    76e0:	|           |      addq.l #4,sp
    76e2:	|           |      move.l d0,d1
    76e4:	|           |      move.l 1af42 <cameraZoom>,d0
    76ea:	|           |      move.l d0,-(sp)
    76ec:	|           |      move.l d1,-(sp)
    76ee:	|           |      jsr 1612a <__divsf3>
    76f4:	|           |      addq.l #8,sp
    76f6:	|           |      move.l d0,-(sp)
    76f8:	|           |      move.l d2,-(sp)
    76fa:	|           |      jsr 16030 <__addsf3>
    7700:	|           |      addq.l #8,sp
    7702:	|           |      movea.l 1b5fe <speech>,a2
    7708:	|           |      move.l d0,-(sp)
    770a:	|           |      jsr 16216 <__fixsfsi>
    7710:	|           |      addq.l #4,sp
    7712:	|           |      move.l d0,8(a2)

    if (offset) {
    7716:	|           \----> move.l 16(sp),d0
    771a:	|        /-------- beq.s 7750 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    771c:	|        |         movea.l 1b5fe <speech>,a0
    7722:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    7728:	|        |     /-- bra.s 774a <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    772a:	|        |  /--|-> movea.l 20(sp),a0
    772e:	|        |  |  |   move.l 8(a0),d1
    7732:	|        |  |  |   move.l 16(sp),d0
    7736:	|        |  |  |   add.l d1,d0
    7738:	|        |  |  |   movea.l 20(sp),a0
    773c:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    7740:	|        |  |  |   movea.l 20(sp),a0
    7744:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    774a:	|        |  |  \-> tst.l 20(sp)
    774e:	|        |  \----- bne.s 772a <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    7750:	|        \-------> move.l 24(sp),d0
}
    7754:	\----------------> movem.l (sp)+,d2-d4/a2
    7758:	                   lea 16(sp),sp
    775c:	                   rts

0000775e <killZBuffer>:
#include "stringy.h"
#include "support/gcc8_c_support.h"

struct zBufferData zBuffer;

void killZBuffer () {
    775e:	    subq.l #4,sp
    7760:	    move.l a6,-(sp)
	if (zBuffer.tex) {
    7762:	    move.l 1b652 <zBuffer+0x50>,d0
    7768:	/-- beq.s 77a0 <killZBuffer+0x42>
		deleteTextures (1, &zBuffer.texName);
    776a:	|   pea 1b656 <zBuffer+0x54>
    7770:	|   pea 1 <_start+0x1>
    7774:	|   jsr 303e <deleteTextures>
    777a:	|   addq.l #8,sp
		zBuffer.texName = 0;
    777c:	|   clr.l 1b656 <zBuffer+0x54>
        FreeVec(zBuffer.tex);
    7782:	|   move.l 1b652 <zBuffer+0x50>,4(sp)
    778a:	|   move.l 1b5a2 <SysBase>,d0
    7790:	|   movea.l d0,a6
    7792:	|   movea.l 4(sp),a1
    7796:	|   jsr -690(a6)
		zBuffer.tex = NULL;
    779a:	|   clr.l 1b652 <zBuffer+0x50>
	}
	zBuffer.numPanels = 0;
    77a0:	\-> clr.l 1b60a <zBuffer+0x8>
	zBuffer.originalNum =0;
    77a6:	    clr.l 1b64e <zBuffer+0x4c>
}
    77ac:	    nop
    77ae:	    movea.l (sp)+,a6
    77b0:	    addq.l #4,sp
    77b2:	    rts

000077b4 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    77b4:	                         lea -528(sp),sp
    77b8:	                         movem.l d2-d3/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    77bc:	                         clr.l 528(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();
    77c0:	                         jsr 775e <killZBuffer>

	zBuffer.originalNum = y;
    77c6:	                         move.l 544(sp),d0
    77ca:	                         move.l d0,1b64e <zBuffer+0x4c>
	if (! openFileFromNum (y)) return FALSE;
    77d0:	                         move.l 544(sp),d0
    77d4:	                         move.l d0,-(sp)
    77d6:	                         jsr 5dca <openFileFromNum>
    77dc:	                         addq.l #4,sp
    77de:	                         tst.l d0
    77e0:	                     /-- bne.s 77e8 <setZBuffer+0x34>
    77e2:	                     |   clr.w d0
    77e4:	/--------------------|-- bra.w 7bc6 <setZBuffer+0x412>
	if (FGetC (bigDataFile) != 'S' && FGetC (bigDataFile) != 'z' && FGetC (bigDataFile) != 'b') 
    77e8:	|                    \-> move.l 1b58a <bigDataFile>,524(sp)
    77f0:	|                        move.l 1b5aa <DOSBase>,d0
    77f6:	|                        movea.l d0,a6
    77f8:	|                        move.l 524(sp),d1
    77fc:	|                        jsr -306(a6)
    7800:	|                        move.l d0,520(sp)
    7804:	|                        move.l 520(sp),d0
    7808:	|                        moveq #83,d1
    780a:	|                        cmp.l d0,d1
    780c:	|                    /-- beq.s 786e <setZBuffer+0xba>
    780e:	|                    |   move.l 1b58a <bigDataFile>,516(sp)
    7816:	|                    |   move.l 1b5aa <DOSBase>,d0
    781c:	|                    |   movea.l d0,a6
    781e:	|                    |   move.l 516(sp),d1
    7822:	|                    |   jsr -306(a6)
    7826:	|                    |   move.l d0,512(sp)
    782a:	|                    |   move.l 512(sp),d0
    782e:	|                    |   moveq #122,d1
    7830:	|                    |   cmp.l d0,d1
    7832:	|                    +-- beq.s 786e <setZBuffer+0xba>
    7834:	|                    |   move.l 1b58a <bigDataFile>,508(sp)
    783c:	|                    |   move.l 1b5aa <DOSBase>,d0
    7842:	|                    |   movea.l d0,a6
    7844:	|                    |   move.l 508(sp),d1
    7848:	|                    |   jsr -306(a6)
    784c:	|                    |   move.l d0,504(sp)
    7850:	|                    |   move.l 504(sp),d0
    7854:	|                    |   moveq #98,d1
    7856:	|                    |   cmp.l d0,d1
    7858:	|                    +-- beq.s 786e <setZBuffer+0xba>
	{
		 KPrintF("Not a Z-buffer file");
    785a:	|                    |   pea 17b54 <PutChar+0x123e>
    7860:	|                    |   jsr 15fc6 <KPrintF>
    7866:	|                    |   addq.l #4,sp
		 return FALSE;
    7868:	|                    |   clr.w d0
    786a:	+--------------------|-- bra.w 7bc6 <setZBuffer+0x412>
	}

	switch (FGetC (bigDataFile)) {
    786e:	|                    \-> move.l 1b58a <bigDataFile>,500(sp)
    7876:	|                        move.l 1b5aa <DOSBase>,d0
    787c:	|                        movea.l d0,a6
    787e:	|                        move.l 500(sp),d1
    7882:	|                        jsr -306(a6)
    7886:	|                        move.l d0,496(sp)
    788a:	|                        move.l 496(sp),d0
    788e:	|                    /-- beq.s 7898 <setZBuffer+0xe4>
    7890:	|                    |   moveq #1,d1
    7892:	|                    |   cmp.l d0,d1
    7894:	|                 /--|-- beq.s 78ae <setZBuffer+0xfa>
    7896:	|              /--|--|-- bra.s 78dc <setZBuffer+0x128>
		case 0:
		zBuffer.width = 640;
    7898:	|              |  |  \-> move.l #640,1b602 <zBuffer>
		zBuffer.height = 480;
    78a2:	|              |  |      move.l #480,1b606 <zBuffer+0x4>
		break;
    78ac:	|              |  |  /-- bra.s 78f0 <setZBuffer+0x13c>
		
		case 1:
		zBuffer.width = get2bytes (bigDataFile);
    78ae:	|              |  \--|-> move.l 1b58a <bigDataFile>,d0
    78b4:	|              |     |   move.l d0,-(sp)
    78b6:	|              |     |   jsr 6bc <get2bytes>
    78bc:	|              |     |   addq.l #4,sp
    78be:	|              |     |   move.l d0,1b602 <zBuffer>
		zBuffer.height = get2bytes (bigDataFile);
    78c4:	|              |     |   move.l 1b58a <bigDataFile>,d0
    78ca:	|              |     |   move.l d0,-(sp)
    78cc:	|              |     |   jsr 6bc <get2bytes>
    78d2:	|              |     |   addq.l #4,sp
    78d4:	|              |     |   move.l d0,1b606 <zBuffer+0x4>
		break;
    78da:	|              |     +-- bra.s 78f0 <setZBuffer+0x13c>
		
		default:
		KPrintF("Extended Z-buffer format not supported in this version of the SLUDGE engine");
    78dc:	|              \-----|-> pea 17b68 <PutChar+0x1252>
    78e2:	|                    |   jsr 15fc6 <KPrintF>
    78e8:	|                    |   addq.l #4,sp
		return FALSE;
    78ea:	|                    |   clr.w d0
    78ec:	+--------------------|-- bra.w 7bc6 <setZBuffer+0x412>
	}
	if ((unsigned int) zBuffer.width != sceneWidth || (unsigned int) zBuffer.height != sceneHeight) {
    78f0:	|                    \-> move.l 1b602 <zBuffer>,d0
    78f6:	|                        move.l d0,d1
    78f8:	|                        move.l 1b696 <sceneWidth>,d0
    78fe:	|                        cmp.l d1,d0
    7900:	|                    /-- bne.s 7914 <setZBuffer+0x160>
    7902:	|                    |   move.l 1b606 <zBuffer+0x4>,d0
    7908:	|                    |   move.l d0,d1
    790a:	|                    |   move.l 1b69a <sceneHeight>,d0
    7910:	|                    |   cmp.l d1,d0
    7912:	|                 /--|-- beq.s 7964 <setZBuffer+0x1b0>
		char tmp[256];
		sprintf (tmp, "Z-w: %d Z-h:%d w: %d, h:%d", zBuffer.width, zBuffer.height, sceneWidth, sceneHeight);
    7914:	|                 |  \-> movea.l 1b69a <sceneHeight>,a1
    791a:	|                 |      movea.l 1b696 <sceneWidth>,a0
    7920:	|                 |      move.l 1b606 <zBuffer+0x4>,d1
    7926:	|                 |      move.l 1b602 <zBuffer>,d0
    792c:	|                 |      move.l a1,-(sp)
    792e:	|                 |      move.l a0,-(sp)
    7930:	|                 |      move.l d1,-(sp)
    7932:	|                 |      move.l d0,-(sp)
    7934:	|                 |      pea 17bb4 <PutChar+0x129e>
    793a:	|                 |      moveq #32,d0
    793c:	|                 |      add.l sp,d0
    793e:	|                 |      move.l d0,-(sp)
    7940:	|                 |      jsr 1309e <sprintf>
    7946:	|                 |      lea 24(sp),sp
		KPrintF("Z-buffer width and height don't match scene width and height", tmp);
    794a:	|                 |      moveq #12,d0
    794c:	|                 |      add.l sp,d0
    794e:	|                 |      move.l d0,-(sp)
    7950:	|                 |      pea 17bcf <PutChar+0x12b9>
    7956:	|                 |      jsr 15fc6 <KPrintF>
    795c:	|                 |      addq.l #8,sp
		return FALSE;
    795e:	|                 |      clr.w d0
    7960:	+-----------------|----- bra.w 7bc6 <setZBuffer+0x412>
	}
		
	zBuffer.numPanels = FGetC (bigDataFile);
    7964:	|                 \----> move.l 1b58a <bigDataFile>,492(sp)
    796c:	|                        move.l 1b5aa <DOSBase>,d0
    7972:	|                        movea.l d0,a6
    7974:	|                        move.l 492(sp),d1
    7978:	|                        jsr -306(a6)
    797c:	|                        move.l d0,488(sp)
    7980:	|                        move.l 488(sp),d0
    7984:	|                        move.l d0,1b60a <zBuffer+0x8>
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    798a:	|                        clr.l 544(sp)
    798e:	|                    /-- bra.s 79ba <setZBuffer+0x206>
		yPalette[y] = get2bytes (bigDataFile);
    7990:	|                 /--|-> move.l 1b58a <bigDataFile>,d0
    7996:	|                 |  |   move.l d0,-(sp)
    7998:	|                 |  |   jsr 6bc <get2bytes>
    799e:	|                 |  |   addq.l #4,sp
    79a0:	|                 |  |   move.l 544(sp),d1
    79a4:	|                 |  |   add.l d1,d1
    79a6:	|                 |  |   add.l d1,d1
    79a8:	|                 |  |   lea 540(sp),a0
    79ac:	|                 |  |   add.l a0,d1
    79ae:	|                 |  |   movea.l d1,a0
    79b0:	|                 |  |   lea -144(a0),a0
    79b4:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    79b6:	|                 |  |   addq.l #1,544(sp)
    79ba:	|                 |  \-> move.l 1b60a <zBuffer+0x8>,d0
    79c0:	|                 |      cmp.l 544(sp),d0
    79c4:	|                 \----- bhi.s 7990 <setZBuffer+0x1dc>
	}
	sortZPal (yPalette, sorted, zBuffer.numPanels);
    79c6:	|                        move.l 1b60a <zBuffer+0x8>,d0
    79cc:	|                        move.l d0,-(sp)
    79ce:	|                        move.l sp,d0
    79d0:	|                        addi.l #336,d0
    79d6:	|                        move.l d0,-(sp)
    79d8:	|                        move.l sp,d0
    79da:	|                        addi.l #404,d0
    79e0:	|                        move.l d0,-(sp)
    79e2:	|                        jsr 7bd0 <sortZPal>
    79e8:	|                        lea 12(sp),sp
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    79ec:	|                        clr.l 544(sp)
    79f0:	|                    /-- bra.s 7a68 <setZBuffer+0x2b4>
		zBuffer.panel[y] = yPalette[sorted[y]];
    79f2:	|                 /--|-> move.l 544(sp),d0
    79f6:	|                 |  |   add.l d0,d0
    79f8:	|                 |  |   add.l d0,d0
    79fa:	|                 |  |   move.l #540,d1
    7a00:	|                 |  |   add.l sp,d1
    7a02:	|                 |  |   add.l d1,d0
    7a04:	|                 |  |   movea.l d0,a0
    7a06:	|                 |  |   lea -208(a0),a0
    7a0a:	|                 |  |   move.l (a0),d0
    7a0c:	|                 |  |   add.l d0,d0
    7a0e:	|                 |  |   add.l d0,d0
    7a10:	|                 |  |   lea 540(sp),a0
    7a14:	|                 |  |   add.l a0,d0
    7a16:	|                 |  |   movea.l d0,a0
    7a18:	|                 |  |   lea -144(a0),a0
    7a1c:	|                 |  |   move.l (a0),d0
    7a1e:	|                 |  |   move.l 544(sp),d1
    7a22:	|                 |  |   addq.l #3,d1
    7a24:	|                 |  |   add.l d1,d1
    7a26:	|                 |  |   movea.l d1,a1
    7a28:	|                 |  |   adda.l d1,a1
    7a2a:	|                 |  |   lea 1b602 <zBuffer>,a0
    7a30:	|                 |  |   move.l d0,(0,a1,a0.l)
		sortback[sorted[y]] = y; 
    7a34:	|                 |  |   move.l 544(sp),d0
    7a38:	|                 |  |   add.l d0,d0
    7a3a:	|                 |  |   add.l d0,d0
    7a3c:	|                 |  |   move.l #540,d1
    7a42:	|                 |  |   add.l sp,d1
    7a44:	|                 |  |   add.l d1,d0
    7a46:	|                 |  |   movea.l d0,a0
    7a48:	|                 |  |   lea -208(a0),a0
    7a4c:	|                 |  |   move.l (a0),d1
    7a4e:	|                 |  |   move.l 544(sp),d0
    7a52:	|                 |  |   add.l d1,d1
    7a54:	|                 |  |   add.l d1,d1
    7a56:	|                 |  |   lea 540(sp),a0
    7a5a:	|                 |  |   add.l a0,d1
    7a5c:	|                 |  |   movea.l d1,a0
    7a5e:	|                 |  |   lea -272(a0),a0
    7a62:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    7a64:	|                 |  |   addq.l #1,544(sp)
    7a68:	|                 |  \-> move.l 1b60a <zBuffer+0x8>,d0
    7a6e:	|                 |      cmp.l 544(sp),d0
    7a72:	|                 \----- bhi.w 79f2 <setZBuffer+0x23e>
	}
	
	int picWidth = sceneWidth;
    7a76:	|                        move.l 1b696 <sceneWidth>,d0
    7a7c:	|                        move.l d0,484(sp)
	int picHeight = sceneHeight;
    7a80:	|                        move.l 1b69a <sceneHeight>,d0
    7a86:	|                        move.l d0,480(sp)

	zBuffer.tex = AllocVec(picHeight*picWidth,MEMF_ANY);
    7a8a:	|                        move.l 484(sp),-(sp)
    7a8e:	|                        move.l 484(sp),-(sp)
    7a92:	|                        jsr 16800 <__mulsi3>
    7a98:	|                        addq.l #8,sp
    7a9a:	|                        move.l d0,476(sp)
    7a9e:	|                        clr.l 472(sp)
    7aa2:	|                        move.l 1b5a2 <SysBase>,d0
    7aa8:	|                        movea.l d0,a6
    7aaa:	|                        move.l 476(sp),d0
    7aae:	|                        move.l 472(sp),d1
    7ab2:	|                        jsr -684(a6)
    7ab6:	|                        move.l d0,468(sp)
    7aba:	|                        move.l 468(sp),d0
    7abe:	|                        move.l d0,1b652 <zBuffer+0x50>
	if (!zBuffer.tex) {
    7ac4:	|                        move.l 1b652 <zBuffer+0x50>,d0
    7aca:	|                    /-- bne.s 7ae0 <setZBuffer+0x32c>
		KPrintF("setZBuffer: Cannot allocate memory");
    7acc:	|                    |   pea 17c0c <PutChar+0x12f6>
    7ad2:	|                    |   jsr 15fc6 <KPrintF>
    7ad8:	|                    |   addq.l #4,sp
		return FALSE;
    7ada:	|                    |   clr.w d0
    7adc:	+--------------------|-- bra.w 7bc6 <setZBuffer+0x412>
	}

	for (y = 0; y < sceneHeight; y ++) {
    7ae0:	|                    \-> clr.l 544(sp)
    7ae4:	|     /----------------- bra.w 7bb0 <setZBuffer+0x3fc>
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    7ae8:	|  /--|----------------> clr.l 536(sp)
    7aec:	|  |  |     /----------- bra.w 7b9c <setZBuffer+0x3e8>
			if (stillToGo == 0) {
    7af0:	|  |  |  /--|----------> tst.l 528(sp)
    7af4:	|  |  |  |  |  /-------- bne.s 7b52 <setZBuffer+0x39e>
				n = FGetC (bigDataFile);
    7af6:	|  |  |  |  |  |         move.l 1b58a <bigDataFile>,464(sp)
    7afe:	|  |  |  |  |  |         move.l 1b5aa <DOSBase>,d0
    7b04:	|  |  |  |  |  |         movea.l d0,a6
    7b06:	|  |  |  |  |  |         move.l 464(sp),d1
    7b0a:	|  |  |  |  |  |         jsr -306(a6)
    7b0e:	|  |  |  |  |  |         move.l d0,460(sp)
    7b12:	|  |  |  |  |  |         move.l 460(sp),d0
    7b16:	|  |  |  |  |  |         move.l d0,532(sp)
				stillToGo = n >> 4;
    7b1a:	|  |  |  |  |  |         move.l 532(sp),d0
    7b1e:	|  |  |  |  |  |         asr.l #4,d0
    7b20:	|  |  |  |  |  |         move.l d0,528(sp)
				if (stillToGo == 15) stillToGo = get2bytes (bigDataFile) + 16l;
    7b24:	|  |  |  |  |  |         moveq #15,d0
    7b26:	|  |  |  |  |  |         cmp.l 528(sp),d0
    7b2a:	|  |  |  |  |  |  /----- bne.s 7b48 <setZBuffer+0x394>
    7b2c:	|  |  |  |  |  |  |      move.l 1b58a <bigDataFile>,d0
    7b32:	|  |  |  |  |  |  |      move.l d0,-(sp)
    7b34:	|  |  |  |  |  |  |      jsr 6bc <get2bytes>
    7b3a:	|  |  |  |  |  |  |      addq.l #4,sp
    7b3c:	|  |  |  |  |  |  |      movea.l d0,a0
    7b3e:	|  |  |  |  |  |  |      lea 16(a0),a0
    7b42:	|  |  |  |  |  |  |      move.l a0,528(sp)
    7b46:	|  |  |  |  |  |  |  /-- bra.s 7b4c <setZBuffer+0x398>
				else stillToGo ++;
    7b48:	|  |  |  |  |  |  \--|-> addq.l #1,528(sp)
				n &= 15;
    7b4c:	|  |  |  |  |  |     \-> moveq #15,d1
    7b4e:	|  |  |  |  |  |         and.l d1,532(sp)
			}
			zBuffer.tex[y*picWidth + x] = sortback[n]*16;
    7b52:	|  |  |  |  |  \-------> move.l 532(sp),d0
    7b56:	|  |  |  |  |            add.l d0,d0
    7b58:	|  |  |  |  |            add.l d0,d0
    7b5a:	|  |  |  |  |            lea 540(sp),a0
    7b5e:	|  |  |  |  |            add.l a0,d0
    7b60:	|  |  |  |  |            movea.l d0,a0
    7b62:	|  |  |  |  |            lea -272(a0),a0
    7b66:	|  |  |  |  |            move.l (a0),d0
    7b68:	|  |  |  |  |            move.l d0,d2
    7b6a:	|  |  |  |  |            move.l 1b652 <zBuffer+0x50>,d3
    7b70:	|  |  |  |  |            move.l 484(sp),d0
    7b74:	|  |  |  |  |            move.l 544(sp),-(sp)
    7b78:	|  |  |  |  |            move.l d0,-(sp)
    7b7a:	|  |  |  |  |            jsr 16800 <__mulsi3>
    7b80:	|  |  |  |  |            addq.l #8,sp
    7b82:	|  |  |  |  |            move.l d0,d1
    7b84:	|  |  |  |  |            move.l 536(sp),d0
    7b88:	|  |  |  |  |            add.l d1,d0
    7b8a:	|  |  |  |  |            movea.l d3,a0
    7b8c:	|  |  |  |  |            adda.l d0,a0
    7b8e:	|  |  |  |  |            move.b d2,d0
    7b90:	|  |  |  |  |            lsl.b #4,d0
    7b92:	|  |  |  |  |            move.b d0,(a0)
			stillToGo --;
    7b94:	|  |  |  |  |            subq.l #1,528(sp)
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    7b98:	|  |  |  |  |            addq.l #1,536(sp)
    7b9c:	|  |  |  |  \----------> move.l 536(sp),d1
    7ba0:	|  |  |  |               move.l 1b696 <sceneWidth>,d0
    7ba6:	|  |  |  |               cmp.l d1,d0
    7ba8:	|  |  |  \-------------- bhi.w 7af0 <setZBuffer+0x33c>
	for (y = 0; y < sceneHeight; y ++) {
    7bac:	|  |  |                  addq.l #1,544(sp)
    7bb0:	|  |  \----------------> move.l 1b69a <sceneHeight>,d0
    7bb6:	|  |                     cmp.l 544(sp),d0
    7bba:	|  \-------------------- bhi.w 7ae8 <setZBuffer+0x334>
		}
	}

	finishAccess ();
    7bbe:	|                        jsr 5cc2 <finishAccess>
	
	return TRUE;
    7bc4:	|                        moveq #1,d0
}
    7bc6:	\----------------------> movem.l (sp)+,d2-d3/a6
    7bca:	                         lea 528(sp),sp
    7bce:	                         rts

00007bd0 <sortZPal>:

void sortZPal (int *oldpal, int *newpal, int size) {
    7bd0:	             subq.l #8,sp
	int i, tmp;

	for (i = 0; i < size; i ++) {
    7bd2:	             clr.l 4(sp)
    7bd6:	         /-- bra.s 7bee <sortZPal+0x1e>
		newpal[i] = i;
    7bd8:	      /--|-> move.l 4(sp),d0
    7bdc:	      |  |   add.l d0,d0
    7bde:	      |  |   add.l d0,d0
    7be0:	      |  |   movea.l 16(sp),a0
    7be4:	      |  |   adda.l d0,a0
    7be6:	      |  |   move.l 4(sp),(a0)
	for (i = 0; i < size; i ++) {
    7bea:	      |  |   addq.l #1,4(sp)
    7bee:	      |  \-> move.l 4(sp),d0
    7bf2:	      |      cmp.l 20(sp),d0
    7bf6:	      \----- blt.s 7bd8 <sortZPal+0x8>
	}

	if (size < 2) return;		
    7bf8:	             moveq #1,d0
    7bfa:	             cmp.l 20(sp),d0
    7bfe:	/----------- bge.w 7cb0 <sortZPal+0xe0>
		
	for (i = 1; i < size; i ++) {
    7c02:	|            moveq #1,d0
    7c04:	|            move.l d0,4(sp)
    7c08:	|     /----- bra.w 7ca2 <sortZPal+0xd2>
		if (oldpal[newpal[i]] < oldpal[newpal[i-1]]) {
    7c0c:	|  /--|----> move.l 4(sp),d0
    7c10:	|  |  |      add.l d0,d0
    7c12:	|  |  |      add.l d0,d0
    7c14:	|  |  |      movea.l 16(sp),a0
    7c18:	|  |  |      adda.l d0,a0
    7c1a:	|  |  |      move.l (a0),d0
    7c1c:	|  |  |      add.l d0,d0
    7c1e:	|  |  |      add.l d0,d0
    7c20:	|  |  |      movea.l 12(sp),a0
    7c24:	|  |  |      adda.l d0,a0
    7c26:	|  |  |      move.l (a0),d1
    7c28:	|  |  |      move.l 4(sp),d0
    7c2c:	|  |  |      addi.l #1073741823,d0
    7c32:	|  |  |      add.l d0,d0
    7c34:	|  |  |      add.l d0,d0
    7c36:	|  |  |      movea.l 16(sp),a0
    7c3a:	|  |  |      adda.l d0,a0
    7c3c:	|  |  |      move.l (a0),d0
    7c3e:	|  |  |      add.l d0,d0
    7c40:	|  |  |      add.l d0,d0
    7c42:	|  |  |      movea.l 12(sp),a0
    7c46:	|  |  |      adda.l d0,a0
    7c48:	|  |  |      move.l (a0),d0
    7c4a:	|  |  |      cmp.l d1,d0
    7c4c:	|  |  |  /-- ble.s 7c9e <sortZPal+0xce>
			tmp = newpal[i];
    7c4e:	|  |  |  |   move.l 4(sp),d0
    7c52:	|  |  |  |   add.l d0,d0
    7c54:	|  |  |  |   add.l d0,d0
    7c56:	|  |  |  |   movea.l 16(sp),a0
    7c5a:	|  |  |  |   adda.l d0,a0
    7c5c:	|  |  |  |   move.l (a0),(sp)
			newpal[i] = newpal[i-1];
    7c5e:	|  |  |  |   move.l 4(sp),d0
    7c62:	|  |  |  |   addi.l #1073741823,d0
    7c68:	|  |  |  |   add.l d0,d0
    7c6a:	|  |  |  |   add.l d0,d0
    7c6c:	|  |  |  |   movea.l 16(sp),a1
    7c70:	|  |  |  |   adda.l d0,a1
    7c72:	|  |  |  |   move.l 4(sp),d0
    7c76:	|  |  |  |   add.l d0,d0
    7c78:	|  |  |  |   add.l d0,d0
    7c7a:	|  |  |  |   movea.l 16(sp),a0
    7c7e:	|  |  |  |   adda.l d0,a0
    7c80:	|  |  |  |   move.l (a1),d0
    7c82:	|  |  |  |   move.l d0,(a0)
			newpal[i-1] = tmp;
    7c84:	|  |  |  |   move.l 4(sp),d0
    7c88:	|  |  |  |   addi.l #1073741823,d0
    7c8e:	|  |  |  |   add.l d0,d0
    7c90:	|  |  |  |   add.l d0,d0
    7c92:	|  |  |  |   movea.l 16(sp),a0
    7c96:	|  |  |  |   adda.l d0,a0
    7c98:	|  |  |  |   move.l (sp),(a0)
			i = 0;
    7c9a:	|  |  |  |   clr.l 4(sp)
	for (i = 1; i < size; i ++) {
    7c9e:	|  |  |  \-> addq.l #1,4(sp)
    7ca2:	|  |  \----> move.l 4(sp),d0
    7ca6:	|  |         cmp.l 20(sp),d0
    7caa:	|  \-------- blt.w 7c0c <sortZPal+0x3c>
    7cae:	|        /-- bra.s 7cb2 <sortZPal+0xe2>
	if (size < 2) return;		
    7cb0:	\--------|-> nop
		}
	}
    7cb2:	         \-> addq.l #8,sp
    7cb4:	             rts

00007cb6 <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    7cb6:	          lea -36(sp),sp
    7cba:	          move.l a6,-(sp)

	struct spriteBank *spritebanktoforget = &forgetme->bank;
    7cbc:	          move.l 44(sp),d0
    7cc0:	          addq.l #8,d0
    7cc2:	          move.l d0,28(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    7cc6:	          clr.l 36(sp)
    7cca:	   /----- bra.s 7d10 <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    7ccc:	/--|----> movea.l 28(sp),a0
    7cd0:	|  |      movea.l 8(a0),a0
    7cd4:	|  |      move.l 36(sp),d1
    7cd8:	|  |      move.l d1,d0
    7cda:	|  |      lsl.l #3,d0
    7cdc:	|  |      sub.l d1,d0
    7cde:	|  |      add.l d0,d0
    7ce0:	|  |      add.l d0,d0
    7ce2:	|  |      adda.l d0,a0
    7ce4:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    7ce8:	|  |      movea.l 8(sp),a0
    7cec:	|  |      move.l 24(a0),d0
    7cf0:	|  |  /-- beq.s 7d0c <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    7cf2:	|  |  |   movea.l 8(sp),a0
    7cf6:	|  |  |   move.l 24(a0),4(sp)
    7cfc:	|  |  |   move.l 1b5a2 <SysBase>,d0
    7d02:	|  |  |   movea.l d0,a6
    7d04:	|  |  |   movea.l 4(sp),a1
    7d08:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    7d0c:	|  |  \-> addq.l #1,36(sp)
    7d10:	|  \----> movea.l 28(sp),a0
    7d14:	|         move.l (a0),d0
    7d16:	|         cmp.l 36(sp),d0
    7d1a:	\-------- bgt.s 7ccc <forgetSpriteBank+0x16>
		}
	}
	FreeVec(spritebanktoforget->sprites);
    7d1c:	          movea.l 28(sp),a0
    7d20:	          move.l 8(a0),24(sp)
    7d26:	          move.l 1b5a2 <SysBase>,d0
    7d2c:	          movea.l d0,a6
    7d2e:	          movea.l 24(sp),a1
    7d32:	          jsr -690(a6)
	FreeVec(spritebanktoforget);
    7d36:	          move.l 28(sp),20(sp)
    7d3c:	          move.l 1b5a2 <SysBase>,d0
    7d42:	          movea.l d0,a6
    7d44:	          movea.l 20(sp),a1
    7d48:	          jsr -690(a6)
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    7d4c:	          move.l 1b70a <allLoadedBanks>,32(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    7d54:	      /-- bra.s 7d60 <forgetSpriteBank+0xaa>
	{
		precedingbank = precedingbank->next;
    7d56:	   /--|-> movea.l 32(sp),a0
    7d5a:	   |  |   move.l 22(a0),32(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    7d60:	   |  \-> movea.l 32(sp),a0
    7d64:	   |      movea.l 22(a0),a0
    7d68:	   |      move.l (a0),d1
    7d6a:	   |      movea.l 44(sp),a0
    7d6e:	   |      move.l (a0),d0
    7d70:	   |      cmp.l d1,d0
    7d72:	   |  /-- beq.s 7d7a <forgetSpriteBank+0xc4>
    7d74:	   |  |   tst.l 32(sp)
    7d78:	   \--|-- bne.s 7d56 <forgetSpriteBank+0xa0>
	}	

	if(precedingbank)
    7d7a:	      \-> tst.l 32(sp)
    7d7e:	   /----- beq.s 7da8 <forgetSpriteBank+0xf2>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    7d80:	   |      movea.l 44(sp),a0
    7d84:	   |      move.l 22(a0),d0
    7d88:	   |      movea.l 32(sp),a0
    7d8c:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    7d90:	   |      move.l 44(sp),12(sp)
    7d96:	   |      move.l 1b5a2 <SysBase>,d0
    7d9c:	   |      movea.l d0,a6
    7d9e:	   |      movea.l 12(sp),a1
    7da2:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    7da6:	   |  /-- bra.s 7dce <forgetSpriteBank+0x118>
		allLoadedBanks = allLoadedBanks->next;
    7da8:	   \--|-> movea.l 1b70a <allLoadedBanks>,a0
    7dae:	      |   move.l 22(a0),d0
    7db2:	      |   move.l d0,1b70a <allLoadedBanks>
		FreeVec( forgetme);
    7db8:	      |   move.l 44(sp),16(sp)
    7dbe:	      |   move.l 1b5a2 <SysBase>,d0
    7dc4:	      |   movea.l d0,a6
    7dc6:	      |   movea.l 16(sp),a1
    7dca:	      |   jsr -690(a6)
}
    7dce:	      \-> nop
    7dd0:	          movea.l (sp)+,a6
    7dd2:	          lea 36(sp),sp
    7dd6:	          rts

00007dd8 <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere, BOOL isFont) {
    7dd8:	                lea -80(sp),sp
    7ddc:	                movem.l d2-d4/a2/a6,-(sp)
    7de0:	                move.l 112(sp),d0
    7de4:	                move.w d0,d0
    7de6:	                move.w d0,22(sp)
	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    7dea:	                clr.l 90(sp)
    7dee:	                clr.l 86(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    7df2:	                clr.l 82(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    7df6:	                move.l 104(sp),-(sp)
    7dfa:	                jsr 5dca <openFileFromNum>
    7e00:	                addq.l #4,sp
    7e02:	                tst.l d0
    7e04:	            /-- bne.s 7e1a <loadSpriteBank+0x42>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    7e06:	            |   pea 17c2f <PutChar+0x1319>
    7e0c:	            |   jsr 15fc6 <KPrintF>
    7e12:	            |   addq.l #4,sp
		return FALSE;
    7e14:	            |   clr.w d0
    7e16:	/-----------|-- bra.w 8122 <loadSpriteBank+0x34a>
	}

	loadhere->isFont = isFont;
    7e1a:	|           \-> movea.l 108(sp),a0
    7e1e:	|               move.w 22(sp),12(a0)

	get2bytes(bigDataFile); // Ignore first 2 bytes
    7e24:	|               move.l 1b58a <bigDataFile>,d0
    7e2a:	|               move.l d0,-(sp)
    7e2c:	|               jsr 6bc <get2bytes>
    7e32:	|               addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    7e34:	|               move.l 1b58a <bigDataFile>,78(sp)
    7e3c:	|               move.l 1b5aa <DOSBase>,d0
    7e42:	|               movea.l d0,a6
    7e44:	|               move.l 78(sp),d1
    7e48:	|               jsr -306(a6)
    7e4c:	|               move.l d0,74(sp)
    7e50:	|               move.l 74(sp),d0
    7e54:	|               movea.l 108(sp),a0
    7e58:	|               move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    7e5c:	|               move.l 1b58a <bigDataFile>,d0
    7e62:	|               move.l d0,-(sp)
    7e64:	|               jsr 6bc <get2bytes>
    7e6a:	|               addq.l #4,sp
    7e6c:	|               move.l d0,70(sp)

	if (total <= 0) {
    7e70:	|           /-- bgt.s 7e86 <loadSpriteBank+0xae>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    7e72:	|           |   pea 17c5d <PutChar+0x1347>
    7e78:	|           |   jsr 15fc6 <KPrintF>
    7e7e:	|           |   addq.l #4,sp
		return FALSE;
    7e80:	|           |   clr.w d0
    7e82:	+-----------|-- bra.w 8122 <loadSpriteBank+0x34a>
	}
	if (loadhere->type > 2) {
    7e86:	|           \-> movea.l 108(sp),a0
    7e8a:	|               move.l 4(a0),d0
    7e8e:	|               moveq #2,d1
    7e90:	|               cmp.l d0,d1
    7e92:	|           /-- bge.s 7ea8 <loadSpriteBank+0xd0>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    7e94:	|           |   pea 17c9d <PutChar+0x1387>
    7e9a:	|           |   jsr 15fc6 <KPrintF>
    7ea0:	|           |   addq.l #4,sp
		return FALSE;
    7ea2:	|           |   clr.w d0
    7ea4:	+-----------|-- bra.w 8122 <loadSpriteBank+0x34a>
	}

	loadhere->total = total;
    7ea8:	|           \-> movea.l 108(sp),a0
    7eac:	|               move.l 70(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    7eb0:	|               move.l 70(sp),d1
    7eb4:	|               move.l d1,d0
    7eb6:	|               lsl.l #3,d0
    7eb8:	|               sub.l d1,d0
    7eba:	|               add.l d0,d0
    7ebc:	|               add.l d0,d0
    7ebe:	|               move.l d0,66(sp)
    7ec2:	|               clr.l 62(sp)
    7ec6:	|               move.l 1b5a2 <SysBase>,d0
    7ecc:	|               movea.l d0,a6
    7ece:	|               move.l 66(sp),d0
    7ed2:	|               move.l 62(sp),d1
    7ed6:	|               jsr -684(a6)
    7eda:	|               move.l d0,58(sp)
    7ede:	|               move.l 58(sp),d0
    7ee2:	|               movea.l 108(sp),a0
    7ee6:	|               move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    7eea:	|               movea.l 108(sp),a0
    7eee:	|               move.l 8(a0),d0
    7ef2:	|           /-- bne.s 7efa <loadSpriteBank+0x122>
    7ef4:	|           |   clr.w d0
    7ef6:	+-----------|-- bra.w 8122 <loadSpriteBank+0x34a>
	
	startIndex = 1;
    7efa:	|           \-> moveq #1,d0
    7efc:	|               move.l d0,86(sp)

	for (i = 0; i < total; i++) {
    7f00:	|               clr.l 96(sp)
    7f04:	|     /-------- bra.w 810e <loadSpriteBank+0x336>
		loadhere->sprites[i].width = get2bytes(bigDataFile);
    7f08:	|  /--|-------> movea.l 1b58a <bigDataFile>,a1
    7f0e:	|  |  |         movea.l 108(sp),a0
    7f12:	|  |  |         movea.l 8(a0),a0
    7f16:	|  |  |         move.l 96(sp),d1
    7f1a:	|  |  |         move.l d1,d0
    7f1c:	|  |  |         lsl.l #3,d0
    7f1e:	|  |  |         sub.l d1,d0
    7f20:	|  |  |         add.l d0,d0
    7f22:	|  |  |         add.l d0,d0
    7f24:	|  |  |         lea (0,a0,d0.l),a2
    7f28:	|  |  |         move.l a1,-(sp)
    7f2a:	|  |  |         jsr 6bc <get2bytes>
    7f30:	|  |  |         addq.l #4,sp
    7f32:	|  |  |         move.l d0,(a2)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    7f34:	|  |  |         movea.l 1b58a <bigDataFile>,a1
    7f3a:	|  |  |         movea.l 108(sp),a0
    7f3e:	|  |  |         movea.l 8(a0),a0
    7f42:	|  |  |         move.l 96(sp),d1
    7f46:	|  |  |         move.l d1,d0
    7f48:	|  |  |         lsl.l #3,d0
    7f4a:	|  |  |         sub.l d1,d0
    7f4c:	|  |  |         add.l d0,d0
    7f4e:	|  |  |         add.l d0,d0
    7f50:	|  |  |         lea (0,a0,d0.l),a2
    7f54:	|  |  |         move.l a1,-(sp)
    7f56:	|  |  |         jsr 6bc <get2bytes>
    7f5c:	|  |  |         addq.l #4,sp
    7f5e:	|  |  |         move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    7f62:	|  |  |         movea.l 1b58a <bigDataFile>,a1
    7f68:	|  |  |         movea.l 108(sp),a0
    7f6c:	|  |  |         movea.l 8(a0),a0
    7f70:	|  |  |         move.l 96(sp),d1
    7f74:	|  |  |         move.l d1,d0
    7f76:	|  |  |         lsl.l #3,d0
    7f78:	|  |  |         sub.l d1,d0
    7f7a:	|  |  |         add.l d0,d0
    7f7c:	|  |  |         add.l d0,d0
    7f7e:	|  |  |         lea (0,a0,d0.l),a2
    7f82:	|  |  |         move.l a1,-(sp)
    7f84:	|  |  |         jsr 6bc <get2bytes>
    7f8a:	|  |  |         addq.l #4,sp
    7f8c:	|  |  |         move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    7f90:	|  |  |         movea.l 1b58a <bigDataFile>,a1
    7f96:	|  |  |         movea.l 108(sp),a0
    7f9a:	|  |  |         movea.l 8(a0),a0
    7f9e:	|  |  |         move.l 96(sp),d1
    7fa2:	|  |  |         move.l d1,d0
    7fa4:	|  |  |         lsl.l #3,d0
    7fa6:	|  |  |         sub.l d1,d0
    7fa8:	|  |  |         add.l d0,d0
    7faa:	|  |  |         add.l d0,d0
    7fac:	|  |  |         lea (0,a0,d0.l),a2
    7fb0:	|  |  |         move.l a1,-(sp)
    7fb2:	|  |  |         jsr 6bc <get2bytes>
    7fb8:	|  |  |         addq.l #4,sp
    7fba:	|  |  |         move.l d0,12(a2)

		UWORD size;
		// ToDo Load Data
		if( loadhere->type == 1) 
    7fbe:	|  |  |         movea.l 108(sp),a0
    7fc2:	|  |  |         move.l 4(a0),d0
    7fc6:	|  |  |         moveq #1,d1
    7fc8:	|  |  |         cmp.l d0,d1
    7fca:	|  |  |     /-- bne.s 7ff6 <loadSpriteBank+0x21e>
		//Mousecursor Data (4 Colors HW-Sprite)
		{
			size = 4*loadhere->sprites[i].height+8;
    7fcc:	|  |  |     |   movea.l 108(sp),a0
    7fd0:	|  |  |     |   movea.l 8(a0),a0
    7fd4:	|  |  |     |   move.l 96(sp),d1
    7fd8:	|  |  |     |   move.l d1,d0
    7fda:	|  |  |     |   lsl.l #3,d0
    7fdc:	|  |  |     |   sub.l d1,d0
    7fde:	|  |  |     |   add.l d0,d0
    7fe0:	|  |  |     |   add.l d0,d0
    7fe2:	|  |  |     |   adda.l d0,a0
    7fe4:	|  |  |     |   move.l 4(a0),d0
    7fe8:	|  |  |     |   addq.l #2,d0
    7fea:	|  |  |     |   move.l d0,d0
    7fec:	|  |  |     |   add.w d0,d0
    7fee:	|  |  |     |   add.w d0,d0
    7ff0:	|  |  |     |   move.w d0,94(sp)
    7ff4:	|  |  |  /--|-- bra.s 8046 <loadSpriteBank+0x26e>
		} else {
			size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    7ff6:	|  |  |  |  \-> movea.l 108(sp),a0
    7ffa:	|  |  |  |      movea.l 8(a0),a0
    7ffe:	|  |  |  |      move.l 96(sp),d1
    8002:	|  |  |  |      move.l d1,d0
    8004:	|  |  |  |      lsl.l #3,d0
    8006:	|  |  |  |      sub.l d1,d0
    8008:	|  |  |  |      add.l d0,d0
    800a:	|  |  |  |      add.l d0,d0
    800c:	|  |  |  |      adda.l d0,a0
    800e:	|  |  |  |      move.l (a0),d0
    8010:	|  |  |  |  /-- bpl.s 8014 <loadSpriteBank+0x23c>
    8012:	|  |  |  |  |   addq.l #7,d0
    8014:	|  |  |  |  \-> asr.l #3,d0
    8016:	|  |  |  |      move.l d0,d2
    8018:	|  |  |  |      movea.l 108(sp),a0
    801c:	|  |  |  |      movea.l 8(a0),a0
    8020:	|  |  |  |      move.l 96(sp),d1
    8024:	|  |  |  |      move.l d1,d0
    8026:	|  |  |  |      lsl.l #3,d0
    8028:	|  |  |  |      sub.l d1,d0
    802a:	|  |  |  |      add.l d0,d0
    802c:	|  |  |  |      add.l d0,d0
    802e:	|  |  |  |      adda.l d0,a0
    8030:	|  |  |  |      move.l 4(a0),d0
    8034:	|  |  |  |      move.l d0,d0
    8036:	|  |  |  |      move.w d2,d1
    8038:	|  |  |  |      muls.w d0,d1
    803a:	|  |  |  |      move.w d1,d0
    803c:	|  |  |  |      add.w d0,d0
    803e:	|  |  |  |      add.w d1,d0
    8040:	|  |  |  |      add.w d0,d0
    8042:	|  |  |  |      move.w d0,94(sp)
		}
		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    8046:	|  |  |  \----> moveq #0,d0
    8048:	|  |  |         move.w 94(sp),d0
    804c:	|  |  |         add.l d0,d0
    804e:	|  |  |         move.l d0,54(sp)
    8052:	|  |  |         moveq #2,d0
    8054:	|  |  |         move.l d0,50(sp)
    8058:	|  |  |         move.l 1b5a2 <SysBase>,d0
    805e:	|  |  |         movea.l d0,a6
    8060:	|  |  |         move.l 54(sp),d0
    8064:	|  |  |         move.l 50(sp),d1
    8068:	|  |  |         jsr -684(a6)
    806c:	|  |  |         move.l d0,46(sp)
    8070:	|  |  |         movea.l 46(sp),a1
    8074:	|  |  |         movea.l 108(sp),a0
    8078:	|  |  |         movea.l 8(a0),a0
    807c:	|  |  |         move.l 96(sp),d1
    8080:	|  |  |         move.l d1,d0
    8082:	|  |  |         lsl.l #3,d0
    8084:	|  |  |         sub.l d1,d0
    8086:	|  |  |         add.l d0,d0
    8088:	|  |  |         add.l d0,d0
    808a:	|  |  |         adda.l d0,a0
    808c:	|  |  |         move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    8090:	|  |  |         move.l 1b58a <bigDataFile>,42(sp)
    8098:	|  |  |         movea.l 108(sp),a0
    809c:	|  |  |         movea.l 8(a0),a0
    80a0:	|  |  |         move.l 96(sp),d1
    80a4:	|  |  |         move.l d1,d0
    80a6:	|  |  |         lsl.l #3,d0
    80a8:	|  |  |         sub.l d1,d0
    80aa:	|  |  |         add.l d0,d0
    80ac:	|  |  |         add.l d0,d0
    80ae:	|  |  |         adda.l d0,a0
    80b0:	|  |  |         move.l 24(a0),38(sp)
    80b6:	|  |  |         moveq #2,d1
    80b8:	|  |  |         move.l d1,34(sp)
    80bc:	|  |  |         move.w 94(sp),d0
    80c0:	|  |  |         lsr.w #1,d0
    80c2:	|  |  |         move.w d0,d0
    80c4:	|  |  |         andi.l #65535,d0
    80ca:	|  |  |         move.l d0,30(sp)
    80ce:	|  |  |         move.l 1b5aa <DOSBase>,d0
    80d4:	|  |  |         movea.l d0,a6
    80d6:	|  |  |         move.l 42(sp),d1
    80da:	|  |  |         move.l 38(sp),d2
    80de:	|  |  |         move.l 34(sp),d3
    80e2:	|  |  |         move.l 30(sp),d4
    80e6:	|  |  |         jsr -324(a6)
    80ea:	|  |  |         move.l d0,26(sp)
    80ee:	|  |  |         move.l 26(sp),d0
    80f2:	|  |  |         move.w d0,24(sp)
		if (!count) {
    80f6:	|  |  |     /-- bne.s 810a <loadSpriteBank+0x332>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    80f8:	|  |  |     |   pea 17cd2 <PutChar+0x13bc>
    80fe:	|  |  |     |   jsr 15fc6 <KPrintF>
    8104:	|  |  |     |   addq.l #4,sp
			return FALSE;
    8106:	|  |  |     |   clr.w d0
    8108:	+--|--|-----|-- bra.s 8122 <loadSpriteBank+0x34a>
	for (i = 0; i < total; i++) {
    810a:	|  |  |     \-> addq.l #1,96(sp)
    810e:	|  |  \-------> move.l 96(sp),d0
    8112:	|  |            cmp.l 70(sp),d0
    8116:	|  \----------- blt.w 7f08 <loadSpriteBank+0x130>
		}
	}

	finishAccess ();
    811a:	|               jsr 5cc2 <finishAccess>

	return TRUE;
    8120:	|               moveq #1,d0
}
    8122:	\-------------> movem.l (sp)+,d2-d4/a2/a6
    8126:	                lea 80(sp),sp
    812a:	                rts

0000812c <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    812c:	                   lea -16(sp),sp
    8130:	                   move.l 28(sp),d0
    8134:	                   move.w d0,d0
    8136:	                   move.w d0,2(sp)
	UWORD x =  (UWORD) thisPerson->x - single->xhot;
    813a:	                   movea.l 24(sp),a0
    813e:	                   move.l (a0),d0
    8140:	                   move.l d0,-(sp)
    8142:	                   jsr 165de <__fixunssfsi>
    8148:	                   addq.l #4,sp
    814a:	                   move.l d0,d0
    814c:	                   movea.l 20(sp),a0
    8150:	                   move.l 8(a0),d1
    8154:	                   move.l d1,d1
    8156:	                   movea.w d0,a0
    8158:	                   suba.w d1,a0
    815a:	                   move.w a0,6(sp)
	UWORD y =  (UWORD) thisPerson->y - single->yhot;			
    815e:	                   movea.l 24(sp),a0
    8162:	                   move.l 4(a0),d0
    8166:	                   move.l d0,-(sp)
    8168:	                   jsr 165de <__fixunssfsi>
    816e:	                   addq.l #4,sp
    8170:	                   move.l d0,d0
    8172:	                   movea.l 20(sp),a0
    8176:	                   move.l 12(a0),d1
    817a:	                   move.l d1,d1
    817c:	                   movea.w d0,a0
    817e:	                   suba.w d1,a0
    8180:	                   move.w a0,4(sp)

	CstScaleSprite( single, thisPerson, (WORD) x, (WORD) y,SCREEN);
    8184:	                   move.w 4(sp),d0
    8188:	                   movea.w d0,a1
    818a:	                   move.w 6(sp),d0
    818e:	                   movea.w d0,a0
    8190:	                   pea 1 <_start+0x1>
    8194:	                   move.l a1,-(sp)
    8196:	                   move.l a0,-(sp)
    8198:	                   move.l 36(sp),-(sp)
    819c:	                   move.l 36(sp),-(sp)
    81a0:	                   jsr 1df2 <CstScaleSprite>
    81a6:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    81aa:	                   movea.l 24(sp),a0
    81ae:	                   move.l 118(a0),d0
    81b2:	                   moveq #8,d1
    81b4:	                   and.l d1,d0
    81b6:	   /-------------- beq.w 8278 <scaleSprite+0x14c>
		if (single->xhot < 0)
    81ba:	   |               movea.l 20(sp),a0
    81be:	   |               move.l 8(a0),d0
    81c2:	   |  /----------- bpl.s 81fa <scaleSprite+0xce>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    81c4:	   |  |            tst.w 2(sp)
    81c8:	   |  |     /----- beq.s 81e0 <scaleSprite+0xb4>
    81ca:	   |  |     |      movea.l 20(sp),a0
    81ce:	   |  |     |      move.l (a0),d0
    81d0:	   |  |     |      move.l d0,d1
    81d2:	   |  |     |      movea.l 20(sp),a0
    81d6:	   |  |     |      move.l 8(a0),d0
    81da:	   |  |     |      move.l d0,d0
    81dc:	   |  |     |      sub.w d0,d1
    81de:	   |  |     |  /-- bra.s 81ee <scaleSprite+0xc2>
    81e0:	   |  |     \--|-> movea.l 20(sp),a0
    81e4:	   |  |        |   move.l 8(a0),d0
    81e8:	   |  |        |   move.l d0,d0
    81ea:	   |  |        |   move.w d0,d1
    81ec:	   |  |        |   addq.w #1,d1
    81ee:	   |  |        \-> movea.w 6(sp),a0
    81f2:	   |  |            suba.w d1,a0
    81f4:	   |  |            move.w a0,14(sp)
    81f8:	   |  |  /-------- bra.s 822e <scaleSprite+0x102>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    81fa:	   |  \--|-------> tst.w 2(sp)
    81fe:	   |     |  /----- beq.s 821a <scaleSprite+0xee>
    8200:	   |     |  |      movea.l 20(sp),a0
    8204:	   |     |  |      move.l (a0),d0
    8206:	   |     |  |      move.l d0,d1
    8208:	   |     |  |      movea.l 20(sp),a0
    820c:	   |     |  |      move.l 8(a0),d0
    8210:	   |     |  |      move.l d0,d0
    8212:	   |     |  |      sub.w d0,d1
    8214:	   |     |  |      move.w d1,d0
    8216:	   |     |  |      subq.w #1,d0
    8218:	   |     |  |  /-- bra.s 8224 <scaleSprite+0xf8>
    821a:	   |     |  \--|-> movea.l 20(sp),a0
    821e:	   |     |     |   move.l 8(a0),d0
    8222:	   |     |     |   move.l d0,d0
    8224:	   |     |     \-> move.w 6(sp),d1
    8228:	   |     |         sub.w d0,d1
    822a:	   |     |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    822e:	   |     \-------> movea.l 24(sp),a0
    8232:	   |               move.l 24(a0),d0
    8236:	   |               move.l d0,d1
    8238:	   |               movea.l 20(sp),a0
    823c:	   |               move.l 12(a0),d0
    8240:	   |               move.l d0,d0
    8242:	   |               sub.w d0,d1
    8244:	   |               movea.w 4(sp),a0
    8248:	   |               adda.w d1,a0
    824a:	   |               move.w a0,12(sp)
		x2 = x1 + single->width;
    824e:	   |               movea.l 20(sp),a0
    8252:	   |               move.l (a0),d0
    8254:	   |               move.l d0,d0
    8256:	   |               move.w 14(sp),d1
    825a:	   |               add.w d0,d1
    825c:	   |               move.w d1,10(sp)
		y2 = y1 + single->height;
    8260:	   |               movea.l 20(sp),a0
    8264:	   |               move.l 4(a0),d0
    8268:	   |               move.l d0,d0
    826a:	   |               movea.w 12(sp),a0
    826e:	   |               adda.w d0,a0
    8270:	   |               move.w a0,8(sp)
    8274:	/--|-------------- bra.w 834a <scaleSprite+0x21e>
	} else {
		x -= cameraX;
    8278:	|  \-------------> move.l 1b6b4 <cameraX>,d0
    827e:	|                  move.l d0,d0
    8280:	|                  sub.w d0,6(sp)
		y -= cameraY;
    8284:	|                  move.l 1b6b8 <cameraY>,d0
    828a:	|                  move.l d0,d0
    828c:	|                  sub.w d0,4(sp)
		if (single->xhot < 0)
    8290:	|                  movea.l 20(sp),a0
    8294:	|                  move.l 8(a0),d0
    8298:	|     /----------- bpl.s 82d0 <scaleSprite+0x1a4>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    829a:	|     |            tst.w 2(sp)
    829e:	|     |     /----- beq.s 82b6 <scaleSprite+0x18a>
    82a0:	|     |     |      movea.l 20(sp),a0
    82a4:	|     |     |      move.l (a0),d0
    82a6:	|     |     |      move.l d0,d1
    82a8:	|     |     |      movea.l 20(sp),a0
    82ac:	|     |     |      move.l 8(a0),d0
    82b0:	|     |     |      move.l d0,d0
    82b2:	|     |     |      sub.w d0,d1
    82b4:	|     |     |  /-- bra.s 82c4 <scaleSprite+0x198>
    82b6:	|     |     \--|-> movea.l 20(sp),a0
    82ba:	|     |        |   move.l 8(a0),d0
    82be:	|     |        |   move.l d0,d0
    82c0:	|     |        |   move.w d0,d1
    82c2:	|     |        |   addq.w #1,d1
    82c4:	|     |        \-> move.w 6(sp),d0
    82c8:	|     |            sub.w d1,d0
    82ca:	|     |            move.w d0,14(sp)
    82ce:	|     |  /-------- bra.s 8304 <scaleSprite+0x1d8>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    82d0:	|     \--|-------> tst.w 2(sp)
    82d4:	|        |  /----- beq.s 82f0 <scaleSprite+0x1c4>
    82d6:	|        |  |      movea.l 20(sp),a0
    82da:	|        |  |      move.l (a0),d0
    82dc:	|        |  |      move.l d0,d1
    82de:	|        |  |      movea.l 20(sp),a0
    82e2:	|        |  |      move.l 8(a0),d0
    82e6:	|        |  |      move.l d0,d0
    82e8:	|        |  |      sub.w d0,d1
    82ea:	|        |  |      move.w d1,d0
    82ec:	|        |  |      subq.w #1,d0
    82ee:	|        |  |  /-- bra.s 82fa <scaleSprite+0x1ce>
    82f0:	|        |  \--|-> movea.l 20(sp),a0
    82f4:	|        |     |   move.l 8(a0),d0
    82f8:	|        |     |   move.l d0,d0
    82fa:	|        |     \-> move.w 6(sp),d1
    82fe:	|        |         sub.w d0,d1
    8300:	|        |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    8304:	|        \-------> movea.l 24(sp),a0
    8308:	|                  move.l 24(a0),d0
    830c:	|                  move.l d0,d1
    830e:	|                  movea.l 20(sp),a0
    8312:	|                  move.l 12(a0),d0
    8316:	|                  move.l d0,d0
    8318:	|                  sub.w d0,d1
    831a:	|                  movea.w 4(sp),a0
    831e:	|                  adda.w d1,a0
    8320:	|                  move.w a0,12(sp)
		x2 = x1 + single->width;
    8324:	|                  movea.l 20(sp),a0
    8328:	|                  move.l (a0),d0
    832a:	|                  move.l d0,d0
    832c:	|                  move.w 14(sp),d1
    8330:	|                  add.w d0,d1
    8332:	|                  move.w d1,10(sp)
		y2 = y1 + single->height;
    8336:	|                  movea.l 20(sp),a0
    833a:	|                  move.l 4(a0),d0
    833e:	|                  move.l d0,d0
    8340:	|                  movea.w 12(sp),a0
    8344:	|                  adda.w d0,a0
    8346:	|                  move.w a0,8(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    834a:	\----------------> move.l 1b55e <input+0xa>,d1
    8350:	                   moveq #0,d0
    8352:	                   move.w 14(sp),d0
    8356:	                   cmp.l d1,d0
    8358:	            /----- bgt.s 838e <scaleSprite+0x262>
    835a:	            |      move.l 1b55e <input+0xa>,d1
    8360:	            |      moveq #0,d0
    8362:	            |      move.w 10(sp),d0
    8366:	            |      cmp.l d1,d0
    8368:	            +----- blt.s 838e <scaleSprite+0x262>
    836a:	            |      move.l 1b562 <input+0xe>,d1
    8370:	            |      moveq #0,d0
    8372:	            |      move.w 12(sp),d0
    8376:	            |      cmp.l d1,d0
    8378:	            +----- bgt.s 838e <scaleSprite+0x262>
    837a:	            |      move.l 1b562 <input+0xe>,d1
    8380:	            |      moveq #0,d0
    8382:	            |      move.w 8(sp),d0
    8386:	            |      cmp.l d1,d0
    8388:	            +----- blt.s 838e <scaleSprite+0x262>
		return TRUE;
    838a:	            |      moveq #1,d0
    838c:	            |  /-- bra.s 8390 <scaleSprite+0x264>
	}
	return FALSE;
    838e:	            \--|-> clr.w d0
    8390:	               \-> lea 16(sp),sp
    8394:	                   rts

00008396 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    8396:	    move.l 4(sp),d0
    839a:	/-- bpl.s 839e <TF_abs+0x8>
    839c:	|   neg.l d0
}
    839e:	\-> rts

000083a0 <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    83a0:	             lea -28(sp),sp
    83a4:	             move.l a6,-(sp)
    83a6:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    83a8:	             move.l #132,28(sp)
    83b0:	             clr.l 24(sp)
    83b4:	             move.l 1b5a2 <SysBase>,d0
    83ba:	             movea.l d0,a6
    83bc:	             move.l 28(sp),d0
    83c0:	             move.l 24(sp),d1
    83c4:	             jsr -684(a6)
    83c8:	             move.l d0,20(sp)
    83cc:	             move.l 20(sp),d0
    83d0:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    83d4:	         /-- bne.s 83dc <addPerson+0x3c>
    83d6:	         |   clr.w d0
    83d8:	/--------|-- bra.w 860c <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    83dc:	|        \-> move.l 48(sp),-(sp)
    83e0:	|            jsr c770 <loadObjectType>
    83e6:	|            addq.l #4,sp
    83e8:	|            movea.l 16(sp),a0
    83ec:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    83f0:	|            movea.l 16(sp),a0
    83f4:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    83fc:	|            movea.l 16(sp),a0
    8400:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    8404:	|            movea.l 16(sp),a0
    8408:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    840c:	|            move.l 44(sp),-(sp)
    8410:	|            jsr 1627e <__floatsisf>
    8416:	|            addq.l #4,sp
    8418:	|            move.l d0,d2
    841a:	|            move.l 40(sp),-(sp)
    841e:	|            jsr 1627e <__floatsisf>
    8424:	|            addq.l #4,sp
    8426:	|            move.l d2,-(sp)
    8428:	|            move.l d0,-(sp)
    842a:	|            move.l 24(sp),-(sp)
    842e:	|            jsr 9eee <moveAndScale>
    8434:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    8438:	|            movea.l 16(sp),a0
    843c:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    8440:	|            movea.l 16(sp),a0
    8444:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    844a:	|            movea.l 16(sp),a0
    844e:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    8454:	|            movea.l 16(sp),a0
    8458:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    845c:	|            movea.l 16(sp),a0
    8460:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    8464:	|            movea.l 16(sp),a0
    8468:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    846e:	|            movea.l 16(sp),a0
    8472:	|            clr.l 106(a0)
    newPerson->angle = 180;
    8476:	|            movea.l 16(sp),a0
    847a:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    8482:	|            movea.l 16(sp),a0
    8486:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    848e:	|            movea.l 16(sp),a0
    8492:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    8496:	|            movea.l 16(sp),a0
    849a:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    849e:	|            movea.l 16(sp),a0
    84a2:	|            movea.l 114(a0),a0
    84a6:	|            move.l 24(a0),d0
    84aa:	|            movea.l 16(sp),a0
    84ae:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    84b2:	|            movea.l 16(sp),a0
    84b6:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    84ba:	|            movea.l 16(sp),a0
    84be:	|            movea.l 114(a0),a0
    84c2:	|            move.l 32(a0),d0
    84c6:	|            movea.l 16(sp),a0
    84ca:	|            move.l d0,122(a0)
    newPerson->r = 0;
    84ce:	|            movea.l 16(sp),a0
    84d2:	|            clr.b 126(a0)
    newPerson->g = 0;
    84d6:	|            movea.l 16(sp),a0
    84da:	|            clr.b 127(a0)
    newPerson->b = 0;
    84de:	|            movea.l 16(sp),a0
    84e2:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    84e6:	|            movea.l 16(sp),a0
    84ea:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    84ee:	|            movea.l 16(sp),a0
    84f2:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    84f6:	|            movea.l 16(sp),a0
    84fa:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    8500:	|            clr.l -(sp)
    8502:	|            move.l 20(sp),-(sp)
    8506:	|            jsr 71b0 <setFrames>
    850c:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    850e:	|            movea.l 52(sp),a0
    8512:	|            movea.l (a0),a0
    8514:	|            movea.l (a0),a0
    8516:	|            movea.l 4(a0),a0
    851a:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    851e:	|     /----- bpl.s 8528 <addPerson+0x188>
    8520:	|     |      move.l 12(sp),d0
    8524:	|     |      neg.l d0
    8526:	|     |  /-- bra.s 852a <addPerson+0x18a>
    8528:	|     \--|-> moveq #1,d0
    852a:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    852e:	|            movea.l 52(sp),a0
    8532:	|            movea.l (a0),a0
    8534:	|            movea.l (a0),a0
    8536:	|            movea.l (a0),a0
    8538:	|            move.l 8(a0),d0
    853c:	|            cmp.l 8(sp),d0
    8540:	|     /----- bgt.s 8572 <addPerson+0x1d2>
        if (fNumSigned < 0) {
    8542:	|     |      tst.l 12(sp)
    8546:	|     |  /-- bge.s 8554 <addPerson+0x1b4>
            newPerson->height = 5;
    8548:	|     |  |   movea.l 16(sp),a0
    854c:	|     |  |   moveq #5,d0
    854e:	|     |  |   move.l d0,20(a0)
    8552:	|  /--|--|-- bra.s 859e <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    8554:	|  |  |  \-> movea.l 52(sp),a0
    8558:	|  |  |      movea.l (a0),a0
    855a:	|  |  |      movea.l (a0),a0
    855c:	|  |  |      movea.l (a0),a0
    855e:	|  |  |      movea.l 16(a0),a0
    8562:	|  |  |      move.l 12(a0),d0
    8566:	|  |  |      addq.l #5,d0
    8568:	|  |  |      movea.l 16(sp),a0
    856c:	|  |  |      move.l d0,20(a0)
    8570:	|  +--|----- bra.s 859e <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    8572:	|  |  \----> movea.l 52(sp),a0
    8576:	|  |         movea.l (a0),a0
    8578:	|  |         movea.l (a0),a0
    857a:	|  |         movea.l (a0),a0
    857c:	|  |         movea.l 16(a0),a0
    8580:	|  |         move.l 8(sp),d1
    8584:	|  |         move.l d1,d0
    8586:	|  |         lsl.l #3,d0
    8588:	|  |         sub.l d1,d0
    858a:	|  |         add.l d0,d0
    858c:	|  |         add.l d0,d0
    858e:	|  |         adda.l d0,a0
    8590:	|  |         move.l 12(a0),d0
    8594:	|  |         addq.l #5,d0
    8596:	|  |         movea.l 16(sp),a0
    859a:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    859e:	|  \-------> move.l #112218,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    85a6:	|        /-- bra.s 85b6 <addPerson+0x216>
        changethat = &((*changethat)->next);
    85a8:	|     /--|-> movea.l 32(sp),a0
    85ac:	|     |  |   move.l (a0),d0
    85ae:	|     |  |   moveq #36,d1
    85b0:	|     |  |   add.l d0,d1
    85b2:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    85b6:	|     |  \-> movea.l 32(sp),a0
    85ba:	|     |      move.l (a0),d0
    85bc:	|     |  /-- beq.s 85e4 <addPerson+0x244>
    85be:	|     |  |   movea.l 32(sp),a0
    85c2:	|     |  |   movea.l (a0),a0
    85c4:	|     |  |   move.l 4(a0),d2
    85c8:	|     |  |   move.l 44(sp),-(sp)
    85cc:	|     |  |   jsr 1627e <__floatsisf>
    85d2:	|     |  |   addq.l #4,sp
    85d4:	|     |  |   move.l d0,-(sp)
    85d6:	|     |  |   move.l d2,-(sp)
    85d8:	|     |  |   jsr 164a4 <__ltsf2>
    85de:	|     |  |   addq.l #8,sp
    85e0:	|     |  |   tst.l d0
    85e2:	|     \--|-- blt.s 85a8 <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    85e4:	|        \-> movea.l 32(sp),a0
    85e8:	|            move.l (a0),d0
    85ea:	|            movea.l 16(sp),a0
    85ee:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    85f2:	|            movea.l 32(sp),a0
    85f6:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    85fa:	|            movea.l 16(sp),a0
    85fe:	|            move.l 114(a0),d0
    8602:	|            sne d0
    8604:	|            neg.b d0
    8606:	|            move.b d0,d0
    8608:	|            andi.w #255,d0
}
    860c:	\----------> move.l (sp)+,d2
    860e:	             movea.l (sp)+,a6
    8610:	             lea 28(sp),sp
    8614:	             rts

00008616 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    8616:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    8618:	       move.l 8(sp),-(sp)
    861c:	       jsr 97a6 <findPerson>
    8622:	       addq.l #4,sp
    8624:	       move.l d0,(sp)
    if (moveMe) {
    8626:	/----- beq.s 865a <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    8628:	|      movea.l (sp),a0
    862a:	|      move.l 68(a0),d0
    862e:	|  /-- beq.s 8640 <animatePerson+0x2a>
    8630:	|  |   movea.l (sp),a0
    8632:	|  |   move.l 68(a0),d0
    8636:	|  |   move.l d0,-(sp)
    8638:	|  |   jsr 3766 <abortFunction>
    863e:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    8640:	|  \-> movea.l (sp),a0
    8642:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    8646:	|      movea.l (sp),a0
    8648:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    864c:	|      movea.l (sp),a0
    864e:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    8652:	|      movea.l (sp),a0
    8654:	|      move.l 12(sp),72(a0)
    }
}
    865a:	\----> nop
    865c:	       addq.l #4,sp
    865e:	       rts

00008660 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    8660:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    8662:	       move.l 8(sp),-(sp)
    8666:	       jsr 97a6 <findPerson>
    866c:	       addq.l #4,sp
    866e:	       move.l d0,(sp)
    if (moveMe) {
    8670:	/----- beq.s 86b2 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    8672:	|      movea.l (sp),a0
    8674:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    8678:	|      movea.l (sp),a0
    867a:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    8680:	|      move.l (sp),-(sp)
    8682:	|      jsr a07c <rethinkAngle>
    8688:	|      addq.l #4,sp
        if (moveMe->walking) {
    868a:	|      movea.l (sp),a0
    868c:	|      move.w 64(a0),d0
    8690:	|  /-- beq.s 86a4 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    8692:	|  |   pea 1 <_start+0x1>
    8696:	|  |   move.l 4(sp),-(sp)
    869a:	|  |   jsr 71b0 <setFrames>
    86a0:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    86a2:	+--|-- bra.s 86b2 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    86a4:	|  \-> clr.l -(sp)
    86a6:	|      move.l 4(sp),-(sp)
    86aa:	|      jsr 71b0 <setFrames>
    86b0:	|      addq.l #8,sp
}
    86b2:	\----> nop
    86b4:	       addq.l #4,sp
    86b6:	       rts

000086b8 <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    86b8:	             lea -36(sp),sp
    86bc:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    86be:	             movea.l 44(sp),a0
    86c2:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    86c8:	             moveq #12,d0
    86ca:	             move.l d0,28(sp)
    86ce:	             clr.l 24(sp)
    86d2:	             move.l 1b5a2 <SysBase>,d0
    86d8:	             movea.l d0,a6
    86da:	             move.l 28(sp),d0
    86de:	             move.l 24(sp),d1
    86e2:	             jsr -684(a6)
    86e6:	             move.l d0,20(sp)
    86ea:	             move.l 20(sp),d0
    86ee:	             move.l d0,16(sp)
	if (!(newAnim)) {
    86f2:	         /-- bne.s 8708 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    86f4:	         |   pea 17d05 <PutChar+0x13ef>
    86fa:	         |   jsr 15fc6 <KPrintF>
    8700:	         |   addq.l #4,sp
		return NULL;
    8702:	         |   moveq #0,d0
    8704:	/--------|-- bra.w 885a <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    8708:	|        \-> movea.l 44(sp),a0
    870c:	|            move.l (a0),d0
    870e:	|            movea.l 16(sp),a0
    8712:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    8714:	|            movea.l 16(sp),a0
    8718:	|            movea.l (a0),a0
    871a:	|            move.l 4(a0),d0
    871e:	|            addq.l #1,d0
    8720:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    8724:	|            movea.l 16(sp),a0
    8728:	|            move.l 32(sp),8(a0)

	if (num) {
    872e:	|  /-------- beq.w 884e <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    8732:	|  |         move.l 32(sp),d1
    8736:	|  |         move.l d1,d0
    8738:	|  |         add.l d0,d0
    873a:	|  |         add.l d1,d0
    873c:	|  |         add.l d0,d0
    873e:	|  |         add.l d0,d0
    8740:	|  |         move.l d0,12(sp)
    8744:	|  |         clr.l 8(sp)
    8748:	|  |         move.l 1b5a2 <SysBase>,d0
    874e:	|  |         movea.l d0,a6
    8750:	|  |         move.l 12(sp),d0
    8754:	|  |         move.l 8(sp),d1
    8758:	|  |         jsr -684(a6)
    875c:	|  |         move.l d0,4(sp)
    8760:	|  |         move.l 4(sp),d0
    8764:	|  |         movea.l 16(sp),a0
    8768:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    876c:	|  |         movea.l 16(sp),a0
    8770:	|  |         move.l 4(a0),d0
    8774:	|  |     /-- bne.s 878a <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    8776:	|  |     |   pea 17d05 <PutChar+0x13ef>
    877c:	|  |     |   jsr 15fc6 <KPrintF>
    8782:	|  |     |   addq.l #4,sp
			return NULL;
    8784:	|  |     |   moveq #0,d0
    8786:	+--|-----|-- bra.w 885a <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    878a:	|  |     \-> clr.l 36(sp)
    878e:	|  |     /-- bra.w 8840 <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    8792:	|  |  /--|-> movea.l 44(sp),a0
    8796:	|  |  |  |   movea.l 4(a0),a0
    879a:	|  |  |  |   move.l 36(sp),d1
    879e:	|  |  |  |   move.l d1,d0
    87a0:	|  |  |  |   add.l d0,d0
    87a2:	|  |  |  |   add.l d1,d0
    87a4:	|  |  |  |   add.l d0,d0
    87a6:	|  |  |  |   add.l d0,d0
    87a8:	|  |  |  |   lea (0,a0,d0.l),a1
    87ac:	|  |  |  |   movea.l 16(sp),a0
    87b0:	|  |  |  |   movea.l 4(a0),a0
    87b4:	|  |  |  |   move.l 36(sp),d1
    87b8:	|  |  |  |   move.l d1,d0
    87ba:	|  |  |  |   add.l d0,d0
    87bc:	|  |  |  |   add.l d1,d0
    87be:	|  |  |  |   add.l d0,d0
    87c0:	|  |  |  |   add.l d0,d0
    87c2:	|  |  |  |   adda.l d0,a0
    87c4:	|  |  |  |   move.l (a1),d0
    87c6:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    87c8:	|  |  |  |   movea.l 44(sp),a0
    87cc:	|  |  |  |   movea.l 4(a0),a0
    87d0:	|  |  |  |   move.l 36(sp),d1
    87d4:	|  |  |  |   move.l d1,d0
    87d6:	|  |  |  |   add.l d0,d0
    87d8:	|  |  |  |   add.l d1,d0
    87da:	|  |  |  |   add.l d0,d0
    87dc:	|  |  |  |   add.l d0,d0
    87de:	|  |  |  |   lea (0,a0,d0.l),a1
    87e2:	|  |  |  |   movea.l 16(sp),a0
    87e6:	|  |  |  |   movea.l 4(a0),a0
    87ea:	|  |  |  |   move.l 36(sp),d1
    87ee:	|  |  |  |   move.l d1,d0
    87f0:	|  |  |  |   add.l d0,d0
    87f2:	|  |  |  |   add.l d1,d0
    87f4:	|  |  |  |   add.l d0,d0
    87f6:	|  |  |  |   add.l d0,d0
    87f8:	|  |  |  |   adda.l d0,a0
    87fa:	|  |  |  |   move.l 4(a1),d0
    87fe:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    8802:	|  |  |  |   movea.l 44(sp),a0
    8806:	|  |  |  |   movea.l 4(a0),a0
    880a:	|  |  |  |   move.l 36(sp),d1
    880e:	|  |  |  |   move.l d1,d0
    8810:	|  |  |  |   add.l d0,d0
    8812:	|  |  |  |   add.l d1,d0
    8814:	|  |  |  |   add.l d0,d0
    8816:	|  |  |  |   add.l d0,d0
    8818:	|  |  |  |   lea (0,a0,d0.l),a1
    881c:	|  |  |  |   movea.l 16(sp),a0
    8820:	|  |  |  |   movea.l 4(a0),a0
    8824:	|  |  |  |   move.l 36(sp),d1
    8828:	|  |  |  |   move.l d1,d0
    882a:	|  |  |  |   add.l d0,d0
    882c:	|  |  |  |   add.l d1,d0
    882e:	|  |  |  |   add.l d0,d0
    8830:	|  |  |  |   add.l d0,d0
    8832:	|  |  |  |   adda.l d0,a0
    8834:	|  |  |  |   move.l 8(a1),d0
    8838:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    883c:	|  |  |  |   addq.l #1,36(sp)
    8840:	|  |  |  \-> move.l 36(sp),d0
    8844:	|  |  |      cmp.l 32(sp),d0
    8848:	|  |  \----- blt.w 8792 <copyAnim+0xda>
    884c:	|  |     /-- bra.s 8856 <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    884e:	|  \-----|-> movea.l 16(sp),a0
    8852:	|        |   clr.l 4(a0)
	}

	return newAnim;
    8856:	|        \-> move.l 16(sp),d0
}
    885a:	\----------> movea.l (sp)+,a6
    885c:	             lea 36(sp),sp
    8860:	             rts

00008862 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    8862:	                lea -44(sp),sp
    8866:	                move.l a6,-(sp)
    8868:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    886a:	                moveq #12,d0
    886c:	                move.l d0,40(sp)
    8870:	                clr.l 36(sp)
    8874:	                move.l 1b5a2 <SysBase>,d0
    887a:	                movea.l d0,a6
    887c:	                move.l 40(sp),d0
    8880:	                move.l 36(sp),d1
    8884:	                jsr -684(a6)
    8888:	                move.l d0,32(sp)
    888c:	                move.l 32(sp),d0
    8890:	                move.l d0,28(sp)
	if( !newP) {
    8894:	            /-- bne.s 88aa <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    8896:	            |   pea 17d26 <PutChar+0x1410>
    889c:	            |   jsr 15fc6 <KPrintF>
    88a2:	            |   addq.l #4,sp
		return NULL;
    88a4:	            |   moveq #0,d0
    88a6:	/-----------|-- bra.w 8a7a <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    88aa:	|           \-> movea.l 28(sp),a0
    88ae:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    88b4:	|               move.l 56(sp),d1
    88b8:	|               move.l d1,d0
    88ba:	|               add.l d0,d0
    88bc:	|               add.l d1,d0
    88be:	|               add.l d0,d0
    88c0:	|               add.l d0,d0
    88c2:	|               move.l d0,24(sp)
    88c6:	|               clr.l 20(sp)
    88ca:	|               move.l 1b5a2 <SysBase>,d0
    88d0:	|               movea.l d0,a6
    88d2:	|               move.l 24(sp),d0
    88d6:	|               move.l 20(sp),d1
    88da:	|               jsr -684(a6)
    88de:	|               move.l d0,16(sp)
    88e2:	|               move.l 16(sp),d0
    88e6:	|               movea.l 28(sp),a0
    88ea:	|               move.l d0,4(a0)
	if( !newP->frames) {
    88ee:	|               movea.l 28(sp),a0
    88f2:	|               move.l 4(a0),d0
    88f6:	|           /-- bne.s 890c <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    88f8:	|           |   pea 17d26 <PutChar+0x1410>
    88fe:	|           |   jsr 15fc6 <KPrintF>
    8904:	|           |   addq.l #4,sp
		return NULL;
    8906:	|           |   moveq #0,d0
    8908:	+-----------|-- bra.w 8a7a <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    890c:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    8912:	|               movea.l 60(sp),a0
    8916:	|               move.l (a0),44(sp)
	while (a) {
    891a:	|     /-------- bra.w 8a6e <createPersonaAnim+0x20c>
		a --;
    891e:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    8922:	|  |  |         movea.l 28(sp),a0
    8926:	|  |  |         movea.l 4(a0),a0
    892a:	|  |  |         move.l 48(sp),d1
    892e:	|  |  |         move.l d1,d0
    8930:	|  |  |         add.l d0,d0
    8932:	|  |  |         add.l d1,d0
    8934:	|  |  |         add.l d0,d0
    8936:	|  |  |         add.l d0,d0
    8938:	|  |  |         adda.l d0,a0
    893a:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    893e:	|  |  |         movea.l 44(sp),a0
    8942:	|  |  |         move.l (a0),d0
    8944:	|  |  |         moveq #5,d1
    8946:	|  |  |         cmp.l d0,d1
    8948:	|  |  |     /-- bne.s 8974 <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    894a:	|  |  |     |   movea.l 28(sp),a0
    894e:	|  |  |     |   movea.l 4(a0),a0
    8952:	|  |  |     |   move.l 48(sp),d1
    8956:	|  |  |     |   move.l d1,d0
    8958:	|  |  |     |   add.l d0,d0
    895a:	|  |  |     |   add.l d1,d0
    895c:	|  |  |     |   add.l d0,d0
    895e:	|  |  |     |   add.l d0,d0
    8960:	|  |  |     |   lea (0,a0,d0.l),a1
    8964:	|  |  |     |   movea.l 44(sp),a0
    8968:	|  |  |     |   move.l 4(a0),d0
    896c:	|  |  |     |   move.l d0,8(a1)
    8970:	|  |  |  /--|-- bra.w 8a1c <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    8974:	|  |  |  |  \-> movea.l 44(sp),a0
    8978:	|  |  |  |      move.l (a0),d0
    897a:	|  |  |  |      moveq #2,d1
    897c:	|  |  |  |      cmp.l d0,d1
    897e:	|  |  |  |  /-- bne.s 89aa <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    8980:	|  |  |  |  |   movea.l 44(sp),a0
    8984:	|  |  |  |  |   move.l 4(a0),d2
    8988:	|  |  |  |  |   movea.l 28(sp),a0
    898c:	|  |  |  |  |   movea.l 4(a0),a0
    8990:	|  |  |  |  |   move.l 48(sp),d1
    8994:	|  |  |  |  |   move.l d1,d0
    8996:	|  |  |  |  |   add.l d0,d0
    8998:	|  |  |  |  |   add.l d1,d0
    899a:	|  |  |  |  |   add.l d0,d0
    899c:	|  |  |  |  |   add.l d0,d0
    899e:	|  |  |  |  |   adda.l d0,a0
    89a0:	|  |  |  |  |   move.l d2,d0
    89a2:	|  |  |  |  |   neg.l d0
    89a4:	|  |  |  |  |   move.l d0,8(a0)
    89a8:	|  |  |  +--|-- bra.s 8a1c <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    89aa:	|  |  |  |  \-> movea.l 44(sp),a0
    89ae:	|  |  |  |      move.l (a0),d0
    89b0:	|  |  |  |      moveq #6,d1
    89b2:	|  |  |  |      cmp.l d0,d1
    89b4:	|  |  |  |  /-- bne.s 89fc <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    89b6:	|  |  |  |  |   movea.l 44(sp),a0
    89ba:	|  |  |  |  |   movea.l 4(a0),a0
    89be:	|  |  |  |  |   move.l (a0),d0
    89c0:	|  |  |  |  |   move.l d0,-(sp)
    89c2:	|  |  |  |  |   pea 1 <_start+0x1>
    89c6:	|  |  |  |  |   lea 20(sp),a0
    89ca:	|  |  |  |  |   move.l a0,-(sp)
    89cc:	|  |  |  |  |   jsr 13894 <getValueType>
    89d2:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    89d6:	|  |  |  |  |   movea.l 44(sp),a0
    89da:	|  |  |  |  |   movea.l 4(a0),a0
    89de:	|  |  |  |  |   movea.l (a0),a0
    89e0:	|  |  |  |  |   move.l 8(a0),d0
    89e4:	|  |  |  |  |   move.l d0,-(sp)
    89e6:	|  |  |  |  |   pea 1 <_start+0x1>
    89ea:	|  |  |  |  |   lea 16(sp),a0
    89ee:	|  |  |  |  |   move.l a0,-(sp)
    89f0:	|  |  |  |  |   jsr 13894 <getValueType>
    89f6:	|  |  |  |  |   lea 12(sp),sp
    89fa:	|  |  |  +--|-- bra.s 8a1c <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    89fc:	|  |  |  |  \-> move.l 44(sp),d0
    8a00:	|  |  |  |      move.l d0,-(sp)
    8a02:	|  |  |  |      pea 1 <_start+0x1>
    8a06:	|  |  |  |      lea 20(sp),a0
    8a0a:	|  |  |  |      move.l a0,-(sp)
    8a0c:	|  |  |  |      jsr 13894 <getValueType>
    8a12:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    8a16:	|  |  |  |      moveq #1,d0
    8a18:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    8a1c:	|  |  |  \----> move.l 60(sp),-(sp)
    8a20:	|  |  |         jsr 14218 <trimStack>
    8a26:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    8a28:	|  |  |         movea.l 28(sp),a0
    8a2c:	|  |  |         movea.l 4(a0),a0
    8a30:	|  |  |         move.l 48(sp),d1
    8a34:	|  |  |         move.l d1,d0
    8a36:	|  |  |         add.l d0,d0
    8a38:	|  |  |         add.l d1,d0
    8a3a:	|  |  |         add.l d0,d0
    8a3c:	|  |  |         add.l d0,d0
    8a3e:	|  |  |         adda.l d0,a0
    8a40:	|  |  |         move.l 12(sp),d0
    8a44:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    8a46:	|  |  |         movea.l 28(sp),a0
    8a4a:	|  |  |         movea.l 4(a0),a0
    8a4e:	|  |  |         move.l 48(sp),d1
    8a52:	|  |  |         move.l d1,d0
    8a54:	|  |  |         add.l d0,d0
    8a56:	|  |  |         add.l d1,d0
    8a58:	|  |  |         add.l d0,d0
    8a5a:	|  |  |         add.l d0,d0
    8a5c:	|  |  |         adda.l d0,a0
    8a5e:	|  |  |         move.l 8(sp),d0
    8a62:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    8a66:	|  |  |         movea.l 60(sp),a0
    8a6a:	|  |  |         move.l (a0),44(sp)
	while (a) {
    8a6e:	|  |  \-------> tst.l 48(sp)
    8a72:	|  \----------- bne.w 891e <createPersonaAnim+0xbc>
	}

	return newP;
    8a76:	|               move.l 28(sp),d0
}
    8a7a:	\-------------> move.l (sp)+,d2
    8a7c:	                movea.l (sp)+,a6
    8a7e:	                lea 44(sp),sp
    8a82:	                rts

00008a84 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    8a84:	       lea -12(sp),sp
    8a88:	       move.l a6,-(sp)

	if(orig->theSprites)
    8a8a:	       movea.l 20(sp),a0
    8a8e:	       move.l (a0),d0
    8a90:	   /-- beq.s 8aba <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    8a92:	   |   movea.l 20(sp),a0
    8a96:	   |   movea.l (a0),a0
    8a98:	   |   move.l 4(a0),d0
    8a9c:	   |   subq.l #1,d0
    8a9e:	   |   move.l d0,4(a0)
    8aa2:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    8aa8:	   +-- bne.s 8aba <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    8aaa:	   |   movea.l 20(sp),a0
    8aae:	   |   move.l (a0),d0
    8ab0:	   |   move.l d0,-(sp)
    8ab2:	   |   jsr 7cb6 <forgetSpriteBank>
    8ab8:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    8aba:	   \-> tst.l 20(sp)
    8abe:	/----- beq.s 8afe <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    8ac0:	|      movea.l 20(sp),a0
    8ac4:	|      move.l 8(a0),d0
    8ac8:	|  /-- beq.s 8ae4 <deleteAnim+0x60>
			FreeVec( orig->frames);
    8aca:	|  |   movea.l 20(sp),a0
    8ace:	|  |   move.l 4(a0),8(sp)
    8ad4:	|  |   move.l 1b5a2 <SysBase>,d0
    8ada:	|  |   movea.l d0,a6
    8adc:	|  |   movea.l 8(sp),a1
    8ae0:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    8ae4:	|  \-> move.l 20(sp),4(sp)
    8aea:	|      move.l 1b5a2 <SysBase>,d0
    8af0:	|      movea.l d0,a6
    8af2:	|      movea.l 4(sp),a1
    8af6:	|      jsr -690(a6)
		orig = NULL;
    8afa:	|      clr.l 20(sp)
	}	
	
}
    8afe:	\----> nop
    8b00:	       movea.l (sp)+,a6
    8b02:	       lea 12(sp),sp
    8b06:	       rts

00008b08 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    8b08:	          lea -124(sp),sp
    8b0c:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    8b10:	          movea.l 152(sp),a0
    8b14:	          move.l 56(a0),d1
    8b18:	          movea.l 152(sp),a0
    8b1c:	          move.l 60(a0),d0
    8b20:	          cmp.l d1,d0
    8b22:	      /-- bne.s 8b52 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    8b24:	      |   movea.l 152(sp),a0
    8b28:	      |   moveq #-1,d0
    8b2a:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    8b2e:	      |   movea.l 152(sp),a0
    8b32:	      |   move.l 40(a0),d0
    8b36:	      |   movea.l 152(sp),a0
    8b3a:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    8b3e:	      |   movea.l 152(sp),a0
    8b42:	      |   move.l 44(a0),d0
    8b46:	      |   movea.l 152(sp),a0
    8b4a:	      |   move.l d0,52(a0)
    8b4e:	   /--|-- bra.w 90b8 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    8b52:	   |  \-> movea.l 1b70e <currentFloor>,a0
    8b58:	   |      move.l 16(a0),d1
    8b5c:	   |      movea.l 152(sp),a0
    8b60:	   |      move.l 56(a0),d0
    8b64:	   |      add.l d0,d0
    8b66:	   |      add.l d0,d0
    8b68:	   |      movea.l d1,a0
    8b6a:	   |      adda.l d0,a0
    8b6c:	   |      move.l (a0),d1
    8b6e:	   |      movea.l 152(sp),a0
    8b72:	   |      move.l 60(a0),d0
    8b76:	   |      add.l d0,d0
    8b78:	   |      add.l d0,d0
    8b7a:	   |      movea.l d1,a0
    8b7c:	   |      adda.l d0,a0
    8b7e:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    8b82:	   |      moveq #-1,d0
    8b84:	   |      cmp.l 144(sp),d0
    8b88:	   |  /-- bne.s 8b90 <doBorderStuff+0x88>
    8b8a:	   |  |   clr.w d0
    8b8c:	/--|--|-- bra.w 91b8 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    8b90:	|  |  \-> movea.l 1b70e <currentFloor>,a0
    8b96:	|  |      move.l 12(a0),d1
    8b9a:	|  |      move.l 144(sp),d0
    8b9e:	|  |      lsl.l #3,d0
    8ba0:	|  |      add.l d0,d1
    8ba2:	|  |      movea.l 1b70e <currentFloor>,a0
    8ba8:	|  |      movea.l 12(a0),a1
    8bac:	|  |      movea.l 152(sp),a0
    8bb0:	|  |      move.l 56(a0),d0
    8bb4:	|  |      lsl.l #3,d0
    8bb6:	|  |      add.l a1,d0
    8bb8:	|  |      lea 40(sp),a0
    8bbc:	|  |      move.l a0,-(sp)
    8bbe:	|  |      lea 48(sp),a0
    8bc2:	|  |      move.l a0,-(sp)
    8bc4:	|  |      move.l d1,-(sp)
    8bc6:	|  |      move.l d0,-(sp)
    8bc8:	|  |      jsr 15248 <getMatchingCorners>
    8bce:	|  |      lea 16(sp),sp
    8bd2:	|  |      tst.w d0
    8bd4:	|  |  /-- bne.s 8bea <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    8bd6:	|  |  |   pea 17d50 <PutChar+0x143a>
    8bdc:	|  |  |   jsr 15fc6 <KPrintF>
    8be2:	|  |  |   addq.l #4,sp
            return FALSE;
    8be4:	|  |  |   clr.w d0
    8be6:	+--|--|-- bra.w 91b8 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    8bea:	|  |  \-> movea.l 152(sp),a0
    8bee:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    8bf4:	|  |      movea.l 152(sp),a0
    8bf8:	|  |      move.l (a0),d0
    8bfa:	|  |      move.l d0,-(sp)
    8bfc:	|  |      jsr 16216 <__fixsfsi>
    8c02:	|  |      addq.l #4,sp
    8c04:	|  |      move.l d0,140(sp)
    8c08:	|  |      movea.l 152(sp),a0
    8c0c:	|  |      move.l 4(a0),d0
    8c10:	|  |      move.l d0,-(sp)
    8c12:	|  |      jsr 16216 <__fixsfsi>
    8c18:	|  |      addq.l #4,sp
    8c1a:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    8c1e:	|  |      movea.l 152(sp),a0
    8c22:	|  |      move.l 40(a0),132(sp)
    8c28:	|  |      movea.l 152(sp),a0
    8c2c:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    8c32:	|  |      movea.l 1b70e <currentFloor>,a0
    8c38:	|  |      move.l 4(a0),d1
    8c3c:	|  |      move.l 44(sp),d0
    8c40:	|  |      lsl.l #3,d0
    8c42:	|  |      movea.l d1,a0
    8c44:	|  |      adda.l d0,a0
    8c46:	|  |      move.l (a0),124(sp)
    8c4a:	|  |      movea.l 1b70e <currentFloor>,a0
    8c50:	|  |      move.l 4(a0),d1
    8c54:	|  |      move.l 44(sp),d0
    8c58:	|  |      lsl.l #3,d0
    8c5a:	|  |      movea.l d1,a0
    8c5c:	|  |      adda.l d0,a0
    8c5e:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    8c64:	|  |      movea.l 1b70e <currentFloor>,a0
    8c6a:	|  |      move.l 4(a0),d1
    8c6e:	|  |      move.l 40(sp),d0
    8c72:	|  |      lsl.l #3,d0
    8c74:	|  |      movea.l d1,a0
    8c76:	|  |      adda.l d0,a0
    8c78:	|  |      move.l (a0),116(sp)
    8c7c:	|  |      movea.l 1b70e <currentFloor>,a0
    8c82:	|  |      move.l 4(a0),d1
    8c86:	|  |      move.l 40(sp),d0
    8c8a:	|  |      lsl.l #3,d0
    8c8c:	|  |      movea.l d1,a0
    8c8e:	|  |      adda.l d0,a0
    8c90:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    8c96:	|  |      move.l 140(sp),d0
    8c9a:	|  |      sub.l 132(sp),d0
    8c9e:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    8ca2:	|  |      move.l 136(sp),d0
    8ca6:	|  |      sub.l 128(sp),d0
    8caa:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    8cae:	|  |      move.l 116(sp),d0
    8cb2:	|  |      sub.l 124(sp),d0
    8cb6:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    8cba:	|  |      move.l 112(sp),d0
    8cbe:	|  |      sub.l 120(sp),d0
    8cc2:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    8cc6:	|  |      move.l 124(sp),d0
    8cca:	|  |      sub.l 140(sp),d0
    8cce:	|  |      move.l 104(sp),-(sp)
    8cd2:	|  |      move.l d0,-(sp)
    8cd4:	|  |      jsr 16800 <__mulsi3>
    8cda:	|  |      addq.l #8,sp
    8cdc:	|  |      move.l d0,d2
    8cde:	|  |      move.l 120(sp),d0
    8ce2:	|  |      sub.l 136(sp),d0
    8ce6:	|  |      move.l 108(sp),-(sp)
    8cea:	|  |      move.l d0,-(sp)
    8cec:	|  |      jsr 16800 <__mulsi3>
    8cf2:	|  |      addq.l #8,sp
    8cf4:	|  |      move.l d2,d1
    8cf6:	|  |      sub.l d0,d1
    8cf8:	|  |      move.l d1,-(sp)
    8cfa:	|  |      jsr 1623e <__floatsidf>
    8d00:	|  |      addq.l #4,sp
    8d02:	|  |      move.l d0,32(sp)
    8d06:	|  |      move.l d1,36(sp)
    8d0a:	|  |      move.l 32(sp),88(sp)
    8d10:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    8d16:	|  |      move.l 96(sp),-(sp)
    8d1a:	|  |      move.l 112(sp),-(sp)
    8d1e:	|  |      jsr 16800 <__mulsi3>
    8d24:	|  |      addq.l #8,sp
    8d26:	|  |      move.l d0,d2
    8d28:	|  |      move.l 100(sp),-(sp)
    8d2c:	|  |      move.l 108(sp),-(sp)
    8d30:	|  |      jsr 16800 <__mulsi3>
    8d36:	|  |      addq.l #8,sp
    8d38:	|  |      move.l d2,d1
    8d3a:	|  |      sub.l d0,d1
    8d3c:	|  |      move.l d1,-(sp)
    8d3e:	|  |      jsr 1623e <__floatsidf>
    8d44:	|  |      addq.l #4,sp
    8d46:	|  |      move.l d1,-(sp)
    8d48:	|  |      move.l d0,-(sp)
    8d4a:	|  |      move.l 100(sp),-(sp)
    8d4e:	|  |      move.l 100(sp),-(sp)
    8d52:	|  |      jsr 160c8 <__divdf3>
    8d58:	|  |      lea 16(sp),sp
    8d5c:	|  |      move.l d0,24(sp)
    8d60:	|  |      move.l d1,28(sp)
    8d64:	|  |      move.l 24(sp),88(sp)
    8d6a:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    8d70:	|  |      clr.l -(sp)
    8d72:	|  |      clr.l -(sp)
    8d74:	|  |      move.l 100(sp),-(sp)
    8d78:	|  |      move.l 100(sp),-(sp)
    8d7c:	|  |      jsr 1639c <__gtdf2>
    8d82:	|  |      lea 16(sp),sp
    8d86:	|  |      tst.l d0
    8d88:	|  |  /-- ble.w 8e60 <doBorderStuff+0x358>
    8d8c:	|  |  |   clr.l -(sp)
    8d8e:	|  |  |   move.l #1072693248,-(sp)
    8d94:	|  |  |   move.l 100(sp),-(sp)
    8d98:	|  |  |   move.l 100(sp),-(sp)
    8d9c:	|  |  |   jsr 16456 <__ltdf2>
    8da2:	|  |  |   lea 16(sp),sp
    8da6:	|  |  |   tst.l d0
    8da8:	|  |  +-- bge.w 8e60 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    8dac:	|  |  |   move.l 124(sp),-(sp)
    8db0:	|  |  |   jsr 1623e <__floatsidf>
    8db6:	|  |  |   addq.l #4,sp
    8db8:	|  |  |   move.l d0,d2
    8dba:	|  |  |   move.l d1,d3
    8dbc:	|  |  |   move.l 100(sp),-(sp)
    8dc0:	|  |  |   jsr 1623e <__floatsidf>
    8dc6:	|  |  |   addq.l #4,sp
    8dc8:	|  |  |   move.l 92(sp),-(sp)
    8dcc:	|  |  |   move.l 92(sp),-(sp)
    8dd0:	|  |  |   move.l d1,-(sp)
    8dd2:	|  |  |   move.l d0,-(sp)
    8dd4:	|  |  |   jsr 162ce <__muldf3>
    8dda:	|  |  |   lea 16(sp),sp
    8dde:	|  |  |   move.l d1,-(sp)
    8de0:	|  |  |   move.l d0,-(sp)
    8de2:	|  |  |   move.l d3,-(sp)
    8de4:	|  |  |   move.l d2,-(sp)
    8de6:	|  |  |   jsr 16066 <__adddf3>
    8dec:	|  |  |   lea 16(sp),sp
    8df0:	|  |  |   move.l d1,-(sp)
    8df2:	|  |  |   move.l d0,-(sp)
    8df4:	|  |  |   jsr 161d6 <__fixdfsi>
    8dfa:	|  |  |   addq.l #8,sp
    8dfc:	|  |  |   movea.l 152(sp),a0
    8e00:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    8e04:	|  |  |   move.l 120(sp),-(sp)
    8e08:	|  |  |   jsr 1623e <__floatsidf>
    8e0e:	|  |  |   addq.l #4,sp
    8e10:	|  |  |   move.l d0,d2
    8e12:	|  |  |   move.l d1,d3
    8e14:	|  |  |   move.l 96(sp),-(sp)
    8e18:	|  |  |   jsr 1623e <__floatsidf>
    8e1e:	|  |  |   addq.l #4,sp
    8e20:	|  |  |   move.l 92(sp),-(sp)
    8e24:	|  |  |   move.l 92(sp),-(sp)
    8e28:	|  |  |   move.l d1,-(sp)
    8e2a:	|  |  |   move.l d0,-(sp)
    8e2c:	|  |  |   jsr 162ce <__muldf3>
    8e32:	|  |  |   lea 16(sp),sp
    8e36:	|  |  |   move.l d1,-(sp)
    8e38:	|  |  |   move.l d0,-(sp)
    8e3a:	|  |  |   move.l d3,-(sp)
    8e3c:	|  |  |   move.l d2,-(sp)
    8e3e:	|  |  |   jsr 16066 <__adddf3>
    8e44:	|  |  |   lea 16(sp),sp
    8e48:	|  |  |   move.l d1,-(sp)
    8e4a:	|  |  |   move.l d0,-(sp)
    8e4c:	|  |  |   jsr 161d6 <__fixdfsi>
    8e52:	|  |  |   addq.l #8,sp
    8e54:	|  |  |   movea.l 152(sp),a0
    8e58:	|  |  |   move.l d0,52(a0)
    8e5c:	|  +--|-- bra.w 90b8 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    8e60:	|  |  \-> move.l 140(sp),d0
    8e64:	|  |      sub.l 124(sp),d0
    8e68:	|  |      move.l d0,84(sp)
    8e6c:	|  |      move.l 140(sp),d0
    8e70:	|  |      sub.l 116(sp),d0
    8e74:	|  |      move.l d0,80(sp)
    8e78:	|  |      move.l 132(sp),d0
    8e7c:	|  |      sub.l 124(sp),d0
    8e80:	|  |      move.l d0,76(sp)
    8e84:	|  |      move.l 132(sp),d0
    8e88:	|  |      sub.l 116(sp),d0
    8e8c:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    8e90:	|  |      move.l 136(sp),d0
    8e94:	|  |      sub.l 120(sp),d0
    8e98:	|  |      move.l d0,68(sp)
    8e9c:	|  |      move.l 136(sp),d0
    8ea0:	|  |      sub.l 112(sp),d0
    8ea4:	|  |      move.l d0,64(sp)
    8ea8:	|  |      move.l 128(sp),d0
    8eac:	|  |      sub.l 120(sp),d0
    8eb0:	|  |      move.l d0,60(sp)
    8eb4:	|  |      move.l 128(sp),d0
    8eb8:	|  |      sub.l 112(sp),d0
    8ebc:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    8ec0:	|  |      move.l 84(sp),-(sp)
    8ec4:	|  |      move.l 88(sp),-(sp)
    8ec8:	|  |      jsr 16800 <__mulsi3>
    8ece:	|  |      addq.l #8,sp
    8ed0:	|  |      move.l d0,84(sp)
    8ed4:	|  |      move.l 80(sp),-(sp)
    8ed8:	|  |      move.l 84(sp),-(sp)
    8edc:	|  |      jsr 16800 <__mulsi3>
    8ee2:	|  |      addq.l #8,sp
    8ee4:	|  |      move.l d0,80(sp)
    8ee8:	|  |      move.l 76(sp),-(sp)
    8eec:	|  |      move.l 80(sp),-(sp)
    8ef0:	|  |      jsr 16800 <__mulsi3>
    8ef6:	|  |      addq.l #8,sp
    8ef8:	|  |      move.l d0,76(sp)
    8efc:	|  |      move.l 72(sp),-(sp)
    8f00:	|  |      move.l 76(sp),-(sp)
    8f04:	|  |      jsr 16800 <__mulsi3>
    8f0a:	|  |      addq.l #8,sp
    8f0c:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    8f10:	|  |      move.l 68(sp),-(sp)
    8f14:	|  |      move.l 72(sp),-(sp)
    8f18:	|  |      jsr 16800 <__mulsi3>
    8f1e:	|  |      addq.l #8,sp
    8f20:	|  |      move.l d0,68(sp)
    8f24:	|  |      move.l 64(sp),-(sp)
    8f28:	|  |      move.l 68(sp),-(sp)
    8f2c:	|  |      jsr 16800 <__mulsi3>
    8f32:	|  |      addq.l #8,sp
    8f34:	|  |      move.l d0,64(sp)
    8f38:	|  |      move.l 60(sp),-(sp)
    8f3c:	|  |      move.l 64(sp),-(sp)
    8f40:	|  |      jsr 16800 <__mulsi3>
    8f46:	|  |      addq.l #8,sp
    8f48:	|  |      move.l d0,60(sp)
    8f4c:	|  |      move.l 56(sp),-(sp)
    8f50:	|  |      move.l 60(sp),-(sp)
    8f54:	|  |      jsr 16800 <__mulsi3>
    8f5a:	|  |      addq.l #8,sp
    8f5c:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    8f60:	|  |      move.l 84(sp),-(sp)
    8f64:	|  |      jsr 1623e <__floatsidf>
    8f6a:	|  |      addq.l #4,sp
    8f6c:	|  |      move.l d0,d2
    8f6e:	|  |      move.l d1,d3
    8f70:	|  |      move.l 68(sp),-(sp)
    8f74:	|  |      jsr 1623e <__floatsidf>
    8f7a:	|  |      addq.l #4,sp
    8f7c:	|  |      move.l d1,-(sp)
    8f7e:	|  |      move.l d0,-(sp)
    8f80:	|  |      move.l d3,-(sp)
    8f82:	|  |      move.l d2,-(sp)
    8f84:	|  |      jsr 16066 <__adddf3>
    8f8a:	|  |      lea 16(sp),sp
    8f8e:	|  |      move.l d1,-(sp)
    8f90:	|  |      move.l d0,-(sp)
    8f92:	|  |      jsr 167b6 <sqrt>
    8f98:	|  |      addq.l #8,sp
    8f9a:	|  |      move.l d0,d2
    8f9c:	|  |      move.l d1,d3
    8f9e:	|  |      move.l 76(sp),-(sp)
    8fa2:	|  |      jsr 1623e <__floatsidf>
    8fa8:	|  |      addq.l #4,sp
    8faa:	|  |      move.l d0,d4
    8fac:	|  |      move.l d1,d5
    8fae:	|  |      move.l 60(sp),-(sp)
    8fb2:	|  |      jsr 1623e <__floatsidf>
    8fb8:	|  |      addq.l #4,sp
    8fba:	|  |      move.l d1,-(sp)
    8fbc:	|  |      move.l d0,-(sp)
    8fbe:	|  |      move.l d5,-(sp)
    8fc0:	|  |      move.l d4,-(sp)
    8fc2:	|  |      jsr 16066 <__adddf3>
    8fc8:	|  |      lea 16(sp),sp
    8fcc:	|  |      move.l d1,-(sp)
    8fce:	|  |      move.l d0,-(sp)
    8fd0:	|  |      jsr 167b6 <sqrt>
    8fd6:	|  |      addq.l #8,sp
    8fd8:	|  |      move.l d1,-(sp)
    8fda:	|  |      move.l d0,-(sp)
    8fdc:	|  |      move.l d3,-(sp)
    8fde:	|  |      move.l d2,-(sp)
    8fe0:	|  |      jsr 16066 <__adddf3>
    8fe6:	|  |      lea 16(sp),sp
    8fea:	|  |      move.l d0,d2
    8fec:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    8fee:	|  |      move.l 80(sp),-(sp)
    8ff2:	|  |      jsr 1623e <__floatsidf>
    8ff8:	|  |      addq.l #4,sp
    8ffa:	|  |      move.l d0,d4
    8ffc:	|  |      move.l d1,d5
    8ffe:	|  |      move.l 64(sp),-(sp)
    9002:	|  |      jsr 1623e <__floatsidf>
    9008:	|  |      addq.l #4,sp
    900a:	|  |      move.l d1,-(sp)
    900c:	|  |      move.l d0,-(sp)
    900e:	|  |      move.l d5,-(sp)
    9010:	|  |      move.l d4,-(sp)
    9012:	|  |      jsr 16066 <__adddf3>
    9018:	|  |      lea 16(sp),sp
    901c:	|  |      move.l d1,-(sp)
    901e:	|  |      move.l d0,-(sp)
    9020:	|  |      jsr 167b6 <sqrt>
    9026:	|  |      addq.l #8,sp
    9028:	|  |      move.l d0,d4
    902a:	|  |      move.l d1,d5
    902c:	|  |      move.l 72(sp),-(sp)
    9030:	|  |      jsr 1623e <__floatsidf>
    9036:	|  |      addq.l #4,sp
    9038:	|  |      move.l d0,d6
    903a:	|  |      move.l d1,d7
    903c:	|  |      move.l 56(sp),-(sp)
    9040:	|  |      jsr 1623e <__floatsidf>
    9046:	|  |      addq.l #4,sp
    9048:	|  |      move.l d1,-(sp)
    904a:	|  |      move.l d0,-(sp)
    904c:	|  |      move.l d7,-(sp)
    904e:	|  |      move.l d6,-(sp)
    9050:	|  |      jsr 16066 <__adddf3>
    9056:	|  |      lea 16(sp),sp
    905a:	|  |      move.l d1,-(sp)
    905c:	|  |      move.l d0,-(sp)
    905e:	|  |      jsr 167b6 <sqrt>
    9064:	|  |      addq.l #8,sp
    9066:	|  |      move.l d1,-(sp)
    9068:	|  |      move.l d0,-(sp)
    906a:	|  |      move.l d5,-(sp)
    906c:	|  |      move.l d4,-(sp)
    906e:	|  |      jsr 16066 <__adddf3>
    9074:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9078:	|  |      move.l d1,-(sp)
    907a:	|  |      move.l d0,-(sp)
    907c:	|  |      move.l d3,-(sp)
    907e:	|  |      move.l d2,-(sp)
    9080:	|  |      jsr 16456 <__ltdf2>
    9086:	|  |      lea 16(sp),sp
    908a:	|  |      tst.l d0
    908c:	|  |  /-- bge.s 90a4 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    908e:	|  |  |   movea.l 152(sp),a0
    9092:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    9098:	|  |  |   movea.l 152(sp),a0
    909c:	|  |  |   move.l 120(sp),52(a0)
    90a2:	|  +--|-- bra.s 90b8 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    90a4:	|  |  \-> movea.l 152(sp),a0
    90a8:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    90ae:	|  |      movea.l 152(sp),a0
    90b2:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    90b8:	|  \----> movea.l 152(sp),a0
    90bc:	|         move.l 52(a0),d0
    90c0:	|         move.l d0,-(sp)
    90c2:	|         jsr 1627e <__floatsisf>
    90c8:	|         addq.l #4,sp
    90ca:	|         move.l d0,d1
    90cc:	|         movea.l 152(sp),a0
    90d0:	|         move.l 4(a0),d0
    90d4:	|         move.l d0,-(sp)
    90d6:	|         move.l d1,-(sp)
    90d8:	|         jsr 16572 <__subsf3>
    90de:	|         addq.l #8,sp
    90e0:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    90e4:	|         movea.l 152(sp),a0
    90e8:	|         move.l (a0),d2
    90ea:	|         movea.l 152(sp),a0
    90ee:	|         move.l 48(a0),d0
    90f2:	|         move.l d0,-(sp)
    90f4:	|         jsr 1627e <__floatsisf>
    90fa:	|         addq.l #4,sp
    90fc:	|         move.l d0,-(sp)
    90fe:	|         move.l d2,-(sp)
    9100:	|         jsr 16572 <__subsf3>
    9106:	|         addq.l #8,sp
    9108:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    910c:	|         clr.l -(sp)
    910e:	|         move.l 52(sp),-(sp)
    9112:	|         jsr 164da <__nesf2>
    9118:	|         addq.l #8,sp
    911a:	|         tst.l d0
    911c:	|     /-- bne.s 9130 <doBorderStuff+0x628>
    911e:	|     |   clr.l -(sp)
    9120:	|     |   move.l 56(sp),-(sp)
    9124:	|     |   jsr 164da <__nesf2>
    912a:	|     |   addq.l #8,sp
    912c:	|     |   tst.l d0
    912e:	|  /--|-- beq.s 91a6 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    9130:	|  |  \-> move.l 52(sp),d0
    9134:	|  |      move.l d0,-(sp)
    9136:	|  |      move.l d0,-(sp)
    9138:	|  |      jsr 16030 <__addsf3>
    913e:	|  |      addq.l #8,sp
    9140:	|  |      move.l d0,-(sp)
    9142:	|  |      move.l 52(sp),-(sp)
    9146:	|  |      jsr 16606 <atan2f>
    914c:	|  |      addq.l #8,sp
    914e:	|  |      move.l d0,-(sp)
    9150:	|  |      jsr 16196 <__extendsfdf2>
    9156:	|  |      addq.l #4,sp
    9158:	|  |      move.l #-1540411785,-(sp)
    915e:	|  |      move.l #1078765033,-(sp)
    9164:	|  |      move.l d1,-(sp)
    9166:	|  |      move.l d0,-(sp)
    9168:	|  |      jsr 162ce <__muldf3>
    916e:	|  |      lea 16(sp),sp
    9172:	|  |      clr.l -(sp)
    9174:	|  |      move.l #1080459264,-(sp)
    917a:	|  |      move.l d1,-(sp)
    917c:	|  |      move.l d0,-(sp)
    917e:	|  |      jsr 16066 <__adddf3>
    9184:	|  |      lea 16(sp),sp
    9188:	|  |      move.l d1,-(sp)
    918a:	|  |      move.l d0,-(sp)
    918c:	|  |      jsr 161d6 <__fixdfsi>
    9192:	|  |      addq.l #8,sp
    9194:	|  |      movea.l 152(sp),a0
    9198:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    919c:	|  |      movea.l 152(sp),a0
    91a0:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    91a6:	|  \----> pea 1 <_start+0x1>
    91aa:	|         move.l 156(sp),-(sp)
    91ae:	|         jsr 71b0 <setFrames>
    91b4:	|         addq.l #8,sp
    return TRUE;
    91b6:	|         moveq #1,d0
}
    91b8:	\-------> movem.l (sp)+,d2-d7
    91bc:	          lea 124(sp),sp
    91c0:	          rts

000091c2 <drawPeople>:

void drawPeople () {
    91c2:	                   lea -24(sp),sp
    91c6:	                   move.l d2,-(sp)

	shufflePeople ();
    91c8:	                   jsr ac5e <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    91ce:	                   move.l 1b65a <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    91d6:	                   clr.l 20(sp)
	overRegion = NULL;
    91da:	                   clr.l 1b706 <overRegion>

	while (thisPerson) {
    91e0:	   /-------------- bra.w 9792 <drawPeople+0x5d0>
		if (thisPerson -> show) {
    91e4:	/--|-------------> movea.l 24(sp),a0
    91e8:	|  |               move.w 104(a0),d0
    91ec:	|  |  /----------- beq.w 9546 <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    91f0:	|  |  |            movea.l 24(sp),a0
    91f4:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    91fa:	|  |  |            movea.l 24(sp),a0
    91fe:	|  |  |            move.l 76(a0),d0
    9202:	|  |  |            cmp.l 20(sp),d0
    9206:	|  |  |  /-------- beq.w 93d4 <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    920a:	|  |  |  |         movea.l 24(sp),a0
    920e:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    9212:	|  |  |  |         movea.l 24(sp),a0
    9216:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    921c:	|  |  |  |         movea.l 24(sp),a0
    9220:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    9224:	|  |  |  |         movea.l 20(sp),a0
    9228:	|  |  |  |         movea.l 4(a0),a0
    922c:	|  |  |  |         move.l 4(a0),d0
    9230:	|  |  |  |         movea.l 24(sp),a0
    9234:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    9238:	|  |  |  |         movea.l 20(sp),a0
    923c:	|  |  |  |         movea.l 4(a0),a1
    9240:	|  |  |  |         movea.l 24(sp),a0
    9244:	|  |  |  |         move.l 84(a0),d0
    9248:	|  |  |  |         move.l d0,d1
    924a:	|  |  |  |         move.l d1,d0
    924c:	|  |  |  |         add.l d0,d0
    924e:	|  |  |  |         add.l d1,d0
    9250:	|  |  |  |         add.l d0,d0
    9252:	|  |  |  |         add.l d0,d0
    9254:	|  |  |  |         lea (0,a1,d0.l),a0
    9258:	|  |  |  |         move.l 8(a0),d0
    925c:	|  |  |  |     /-- ble.w 92fe <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    9260:	|  |  |  |     |   movea.l 20(sp),a0
    9264:	|  |  |  |     |   movea.l 4(a0),a1
    9268:	|  |  |  |     |   movea.l 24(sp),a0
    926c:	|  |  |  |     |   move.l 84(a0),d0
    9270:	|  |  |  |     |   move.l d0,d1
    9272:	|  |  |  |     |   move.l d1,d0
    9274:	|  |  |  |     |   add.l d0,d0
    9276:	|  |  |  |     |   add.l d1,d0
    9278:	|  |  |  |     |   add.l d0,d0
    927a:	|  |  |  |     |   add.l d0,d0
    927c:	|  |  |  |     |   lea (0,a1,d0.l),a0
    9280:	|  |  |  |     |   move.l 8(a0),d0
    9284:	|  |  |  |     |   clr.l -(sp)
    9286:	|  |  |  |     |   move.l d0,-(sp)
    9288:	|  |  |  |     |   jsr c34a <startSound>
    928e:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    9290:	|  |  |  |     |   movea.l 24(sp),a0
    9294:	|  |  |  |     |   move.l 84(a0),d0
    9298:	|  |  |  |     |   addq.l #1,d0
    929a:	|  |  |  |     |   movea.l 24(sp),a0
    929e:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    92a2:	|  |  |  |     |   movea.l 24(sp),a0
    92a6:	|  |  |  |     |   move.l 84(a0),d0
    92aa:	|  |  |  |     |   movea.l 24(sp),a0
    92ae:	|  |  |  |     |   movea.l 72(a0),a0
    92b2:	|  |  |  |     |   move.l 8(a0),d1
    92b6:	|  |  |  |     |   move.l d1,-(sp)
    92b8:	|  |  |  |     |   move.l d0,-(sp)
    92ba:	|  |  |  |     |   jsr 168ac <__modsi3>
    92c0:	|  |  |  |     |   addq.l #8,sp
    92c2:	|  |  |  |     |   movea.l 24(sp),a0
    92c6:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    92ca:	|  |  |  |     |   movea.l 24(sp),a0
    92ce:	|  |  |  |     |   movea.l 72(a0),a0
    92d2:	|  |  |  |     |   movea.l 4(a0),a1
    92d6:	|  |  |  |     |   movea.l 24(sp),a0
    92da:	|  |  |  |     |   move.l 84(a0),d0
    92de:	|  |  |  |     |   move.l d0,d1
    92e0:	|  |  |  |     |   move.l d1,d0
    92e2:	|  |  |  |     |   add.l d0,d0
    92e4:	|  |  |  |     |   add.l d1,d0
    92e6:	|  |  |  |     |   add.l d0,d0
    92e8:	|  |  |  |     |   add.l d0,d0
    92ea:	|  |  |  |     |   lea (0,a1,d0.l),a0
    92ee:	|  |  |  |     |   move.l 4(a0),d0
    92f2:	|  |  |  |     |   movea.l 24(sp),a0
    92f6:	|  |  |  |     |   move.l d0,88(a0)
    92fa:	|  |  |  |  /--|-- bra.w 943c <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    92fe:	|  |  |  |  |  \-> movea.l 20(sp),a0
    9302:	|  |  |  |  |      movea.l 4(a0),a1
    9306:	|  |  |  |  |      movea.l 24(sp),a0
    930a:	|  |  |  |  |      move.l 84(a0),d0
    930e:	|  |  |  |  |      move.l d0,d1
    9310:	|  |  |  |  |      move.l d1,d0
    9312:	|  |  |  |  |      add.l d0,d0
    9314:	|  |  |  |  |      add.l d1,d0
    9316:	|  |  |  |  |      add.l d0,d0
    9318:	|  |  |  |  |      add.l d0,d0
    931a:	|  |  |  |  |      lea (0,a1,d0.l),a0
    931e:	|  |  |  |  |      move.l 8(a0),d0
    9322:	|  |  |  |  +----- beq.w 943c <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    9326:	|  |  |  |  |      movea.l 1b572 <noStack>,a1
    932c:	|  |  |  |  |      movea.l 20(sp),a0
    9330:	|  |  |  |  |      move.l 4(a0),d2
    9334:	|  |  |  |  |      movea.l 24(sp),a0
    9338:	|  |  |  |  |      move.l 84(a0),d0
    933c:	|  |  |  |  |      move.l d0,d1
    933e:	|  |  |  |  |      move.l d1,d0
    9340:	|  |  |  |  |      add.l d0,d0
    9342:	|  |  |  |  |      add.l d1,d0
    9344:	|  |  |  |  |      add.l d0,d0
    9346:	|  |  |  |  |      add.l d0,d0
    9348:	|  |  |  |  |      movea.l d2,a0
    934a:	|  |  |  |  |      adda.l d0,a0
    934c:	|  |  |  |  |      move.l 8(a0),d0
    9350:	|  |  |  |  |      neg.l d0
    9352:	|  |  |  |  |      pea 1 <_start+0x1>
    9356:	|  |  |  |  |      move.l a1,-(sp)
    9358:	|  |  |  |  |      clr.l -(sp)
    935a:	|  |  |  |  |      clr.l -(sp)
    935c:	|  |  |  |  |      move.l d0,-(sp)
    935e:	|  |  |  |  |      jsr 5b22 <startNewFunctionNum>
    9364:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    9368:	|  |  |  |  |      movea.l 24(sp),a0
    936c:	|  |  |  |  |      move.l 84(a0),d0
    9370:	|  |  |  |  |      addq.l #1,d0
    9372:	|  |  |  |  |      movea.l 24(sp),a0
    9376:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    937a:	|  |  |  |  |      movea.l 24(sp),a0
    937e:	|  |  |  |  |      move.l 84(a0),d0
    9382:	|  |  |  |  |      movea.l 24(sp),a0
    9386:	|  |  |  |  |      movea.l 72(a0),a0
    938a:	|  |  |  |  |      move.l 8(a0),d1
    938e:	|  |  |  |  |      move.l d1,-(sp)
    9390:	|  |  |  |  |      move.l d0,-(sp)
    9392:	|  |  |  |  |      jsr 168ac <__modsi3>
    9398:	|  |  |  |  |      addq.l #8,sp
    939a:	|  |  |  |  |      movea.l 24(sp),a0
    939e:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    93a2:	|  |  |  |  |      movea.l 24(sp),a0
    93a6:	|  |  |  |  |      movea.l 72(a0),a0
    93aa:	|  |  |  |  |      movea.l 4(a0),a1
    93ae:	|  |  |  |  |      movea.l 24(sp),a0
    93b2:	|  |  |  |  |      move.l 84(a0),d0
    93b6:	|  |  |  |  |      move.l d0,d1
    93b8:	|  |  |  |  |      move.l d1,d0
    93ba:	|  |  |  |  |      add.l d0,d0
    93bc:	|  |  |  |  |      add.l d1,d0
    93be:	|  |  |  |  |      add.l d0,d0
    93c0:	|  |  |  |  |      add.l d0,d0
    93c2:	|  |  |  |  |      lea (0,a1,d0.l),a0
    93c6:	|  |  |  |  |      move.l 4(a0),d0
    93ca:	|  |  |  |  |      movea.l 24(sp),a0
    93ce:	|  |  |  |  |      move.l d0,88(a0)
    93d2:	|  |  |  |  +----- bra.s 943c <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    93d4:	|  |  |  \--|----> movea.l 24(sp),a0
    93d8:	|  |  |     |      move.l (a0),d0
    93da:	|  |  |     |      movea.l 24(sp),a0
    93de:	|  |  |     |      move.l 8(a0),d1
    93e2:	|  |  |     |      move.l d1,-(sp)
    93e4:	|  |  |     |      move.l d0,-(sp)
    93e6:	|  |  |     |      jsr 16160 <__eqsf2>
    93ec:	|  |  |     |      addq.l #8,sp
    93ee:	|  |  |     |      tst.l d0
    93f0:	|  |  |     |  /-- bne.s 9434 <drawPeople+0x272>
    93f2:	|  |  |     |  |   movea.l 24(sp),a0
    93f6:	|  |  |     |  |   move.l 4(a0),d0
    93fa:	|  |  |     |  |   movea.l 24(sp),a0
    93fe:	|  |  |     |  |   move.l 12(a0),d1
    9402:	|  |  |     |  |   move.l d1,-(sp)
    9404:	|  |  |     |  |   move.l d0,-(sp)
    9406:	|  |  |     |  |   jsr 16160 <__eqsf2>
    940c:	|  |  |     |  |   addq.l #8,sp
    940e:	|  |  |     |  |   tst.l d0
    9410:	|  |  |     |  +-- bne.s 9434 <drawPeople+0x272>
    9412:	|  |  |     |  |   movea.l 20(sp),a0
    9416:	|  |  |     |  |   move.l 8(a0),d0
    941a:	|  |  |     |  |   moveq #1,d1
    941c:	|  |  |     |  |   cmp.l d0,d1
    941e:	|  |  |     |  +-- bne.s 9434 <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    9420:	|  |  |     |  |   movea.l 24(sp),a0
    9424:	|  |  |     |  |   move.l 16(a0),d0
    9428:	|  |  |     |  |   addq.l #1,d0
    942a:	|  |  |     |  |   movea.l 24(sp),a0
    942e:	|  |  |     |  |   move.l d0,16(a0)
    9432:	|  |  |     +--|-- bra.s 943c <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    9434:	|  |  |     |  \-> movea.l 24(sp),a0
    9438:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    943c:	|  |  |     \----> movea.l 24(sp),a0
    9440:	|  |  |            move.l (a0),d0
    9442:	|  |  |            movea.l 24(sp),a0
    9446:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    944a:	|  |  |            movea.l 24(sp),a0
    944e:	|  |  |            move.l 4(a0),d0
    9452:	|  |  |            movea.l 24(sp),a0
    9456:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    945a:	|  |  |            movea.l 20(sp),a0
    945e:	|  |  |            movea.l 4(a0),a1
    9462:	|  |  |            movea.l 24(sp),a0
    9466:	|  |  |            move.l 84(a0),d0
    946a:	|  |  |            move.l d0,d1
    946c:	|  |  |            move.l d1,d0
    946e:	|  |  |            add.l d0,d0
    9470:	|  |  |            add.l d1,d0
    9472:	|  |  |            add.l d0,d0
    9474:	|  |  |            add.l d0,d0
    9476:	|  |  |            lea (0,a1,d0.l),a0
    947a:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    947e:	|  |  |            move.l 8(sp),d0
    9482:	|  |  |            add.l d0,d0
    9484:	|  |  |            subx.l d0,d0
    9486:	|  |  |            neg.l d0
    9488:	|  |  |            move.b d0,d0
    948a:	|  |  |            move.b d0,d0
    948c:	|  |  |            andi.l #255,d0
    9492:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    9496:	|  |  |            move.l 8(sp),-(sp)
    949a:	|  |  |            jsr 8396 <TF_abs>
    94a0:	|  |  |            addq.l #4,sp
    94a2:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    94a6:	|  |  |            movea.l 20(sp),a0
    94aa:	|  |  |            movea.l (a0),a0
    94ac:	|  |  |            move.l 8(a0),d0
    94b0:	|  |  |            cmp.l 12(sp),d0
    94b4:	|  |  |        /-- bgt.s 94c4 <drawPeople+0x302>
				fNum = 0;
    94b6:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    94ba:	|  |  |        |   moveq #2,d0
    94bc:	|  |  |        |   sub.l 16(sp),d0
    94c0:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    94c4:	|  |  |        \-> moveq #2,d1
    94c6:	|  |  |            cmp.l 16(sp),d1
    94ca:	|  |  +----------- beq.s 9546 <drawPeople+0x384>
				BOOL r = FALSE;
    94cc:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    94d0:	|  |  |            move.l 16(sp),d0
    94d4:	|  |  |            movea.w d0,a0
    94d6:	|  |  |            movea.l 20(sp),a1
    94da:	|  |  |            movea.l (a1),a1
    94dc:	|  |  |            movea.l 16(a1),a1
    94e0:	|  |  |            move.l 12(sp),d1
    94e4:	|  |  |            move.l d1,d0
    94e6:	|  |  |            lsl.l #3,d0
    94e8:	|  |  |            sub.l d1,d0
    94ea:	|  |  |            add.l d0,d0
    94ec:	|  |  |            add.l d0,d0
    94ee:	|  |  |            add.l a1,d0
    94f0:	|  |  |            move.l a0,-(sp)
    94f2:	|  |  |            move.l 28(sp),-(sp)
    94f6:	|  |  |            move.l d0,-(sp)
    94f8:	|  |  |            jsr 812c <scaleSprite>
    94fe:	|  |  |            lea 12(sp),sp
    9502:	|  |  |            move.w d0,6(sp)
				if (r) {
    9506:	|  |  +----------- beq.s 9546 <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    9508:	|  |  |            movea.l 24(sp),a0
    950c:	|  |  |            movea.l 114(a0),a0
    9510:	|  |  |            movea.l (a0),a0
    9512:	|  |  |            move.b (a0),d0
    9514:	|  |  +----------- beq.s 9546 <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    9516:	|  |  |            move.l 1b67a <personRegion+0x1c>,d1
    951c:	|  |  |            movea.l 24(sp),a0
    9520:	|  |  |            move.l 114(a0),d0
    9524:	|  |  |            cmp.l d1,d0
    9526:	|  |  |        /-- beq.s 952e <drawPeople+0x36c>
    9528:	|  |  |        |   clr.l 1b56a <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    952e:	|  |  |        \-> movea.l 24(sp),a0
    9532:	|  |  |            move.l 114(a0),d0
    9536:	|  |  |            move.l d0,1b67a <personRegion+0x1c>
						overRegion = & personRegion;
    953c:	|  |  |            move.l #112222,1b706 <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    9546:	|  |  \----------> movea.l 24(sp),a0
    954a:	|  |               move.l 88(a0),d0
    954e:	|  |               subq.l #1,d0
    9550:	|  |               movea.l 24(sp),a0
    9554:	|  |               move.l d0,88(a0)
    9558:	|  |               movea.l 24(sp),a0
    955c:	|  |               move.l 88(a0),d0
    9560:	|  |        /----- bne.w 9788 <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    9564:	|  |        |      movea.l 24(sp),a0
    9568:	|  |        |      move.l 84(a0),d0
    956c:	|  |        |      addq.l #1,d0
    956e:	|  |        |      movea.l 24(sp),a0
    9572:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9576:	|  |        |      movea.l 24(sp),a0
    957a:	|  |        |      move.l 84(a0),d0
    957e:	|  |        |      movea.l 24(sp),a0
    9582:	|  |        |      movea.l 72(a0),a0
    9586:	|  |        |      move.l 8(a0),d1
    958a:	|  |        |      move.l d1,-(sp)
    958c:	|  |        |      move.l d0,-(sp)
    958e:	|  |        |      jsr 168ac <__modsi3>
    9594:	|  |        |      addq.l #8,sp
    9596:	|  |        |      movea.l 24(sp),a0
    959a:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    959e:	|  |        |      movea.l 24(sp),a0
    95a2:	|  |        |      movea.l 72(a0),a0
    95a6:	|  |        |      movea.l 4(a0),a1
    95aa:	|  |        |      movea.l 24(sp),a0
    95ae:	|  |        |      move.l 84(a0),d0
    95b2:	|  |        |      move.l d0,d1
    95b4:	|  |        |      move.l d1,d0
    95b6:	|  |        |      add.l d0,d0
    95b8:	|  |        |      add.l d1,d0
    95ba:	|  |        |      add.l d0,d0
    95bc:	|  |        |      add.l d0,d0
    95be:	|  |        |      lea (0,a1,d0.l),a0
    95c2:	|  |        |      move.l 4(a0),d0
    95c6:	|  |        |      movea.l 24(sp),a0
    95ca:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    95ce:	|  |        |      movea.l 24(sp),a0
    95d2:	|  |        |      move.w 104(a0),d0
    95d6:	|  |        +----- beq.w 9788 <drawPeople+0x5c6>
    95da:	|  |        |      tst.l 20(sp)
    95de:	|  |        +----- beq.w 9788 <drawPeople+0x5c6>
    95e2:	|  |        |      movea.l 20(sp),a0
    95e6:	|  |        |      move.l 4(a0),d0
    95ea:	|  |        +----- beq.w 9788 <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    95ee:	|  |        |      movea.l 20(sp),a0
    95f2:	|  |        |      movea.l 4(a0),a1
    95f6:	|  |        |      movea.l 24(sp),a0
    95fa:	|  |        |      move.l 84(a0),d0
    95fe:	|  |        |      move.l d0,d1
    9600:	|  |        |      move.l d1,d0
    9602:	|  |        |      add.l d0,d0
    9604:	|  |        |      add.l d1,d0
    9606:	|  |        |      add.l d0,d0
    9608:	|  |        |      add.l d0,d0
    960a:	|  |        |      lea (0,a1,d0.l),a0
    960e:	|  |        |      move.l 8(a0),d0
    9612:	|  |        |  /-- ble.w 96b4 <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    9616:	|  |        |  |   movea.l 20(sp),a0
    961a:	|  |        |  |   movea.l 4(a0),a1
    961e:	|  |        |  |   movea.l 24(sp),a0
    9622:	|  |        |  |   move.l 84(a0),d0
    9626:	|  |        |  |   move.l d0,d1
    9628:	|  |        |  |   move.l d1,d0
    962a:	|  |        |  |   add.l d0,d0
    962c:	|  |        |  |   add.l d1,d0
    962e:	|  |        |  |   add.l d0,d0
    9630:	|  |        |  |   add.l d0,d0
    9632:	|  |        |  |   lea (0,a1,d0.l),a0
    9636:	|  |        |  |   move.l 8(a0),d0
    963a:	|  |        |  |   clr.l -(sp)
    963c:	|  |        |  |   move.l d0,-(sp)
    963e:	|  |        |  |   jsr c34a <startSound>
    9644:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    9646:	|  |        |  |   movea.l 24(sp),a0
    964a:	|  |        |  |   move.l 84(a0),d0
    964e:	|  |        |  |   addq.l #1,d0
    9650:	|  |        |  |   movea.l 24(sp),a0
    9654:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9658:	|  |        |  |   movea.l 24(sp),a0
    965c:	|  |        |  |   move.l 84(a0),d0
    9660:	|  |        |  |   movea.l 24(sp),a0
    9664:	|  |        |  |   movea.l 72(a0),a0
    9668:	|  |        |  |   move.l 8(a0),d1
    966c:	|  |        |  |   move.l d1,-(sp)
    966e:	|  |        |  |   move.l d0,-(sp)
    9670:	|  |        |  |   jsr 168ac <__modsi3>
    9676:	|  |        |  |   addq.l #8,sp
    9678:	|  |        |  |   movea.l 24(sp),a0
    967c:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9680:	|  |        |  |   movea.l 24(sp),a0
    9684:	|  |        |  |   movea.l 72(a0),a0
    9688:	|  |        |  |   movea.l 4(a0),a1
    968c:	|  |        |  |   movea.l 24(sp),a0
    9690:	|  |        |  |   move.l 84(a0),d0
    9694:	|  |        |  |   move.l d0,d1
    9696:	|  |        |  |   move.l d1,d0
    9698:	|  |        |  |   add.l d0,d0
    969a:	|  |        |  |   add.l d1,d0
    969c:	|  |        |  |   add.l d0,d0
    969e:	|  |        |  |   add.l d0,d0
    96a0:	|  |        |  |   lea (0,a1,d0.l),a0
    96a4:	|  |        |  |   move.l 4(a0),d0
    96a8:	|  |        |  |   movea.l 24(sp),a0
    96ac:	|  |        |  |   move.l d0,88(a0)
    96b0:	|  |        +--|-- bra.w 9788 <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    96b4:	|  |        |  \-> movea.l 20(sp),a0
    96b8:	|  |        |      movea.l 4(a0),a1
    96bc:	|  |        |      movea.l 24(sp),a0
    96c0:	|  |        |      move.l 84(a0),d0
    96c4:	|  |        |      move.l d0,d1
    96c6:	|  |        |      move.l d1,d0
    96c8:	|  |        |      add.l d0,d0
    96ca:	|  |        |      add.l d1,d0
    96cc:	|  |        |      add.l d0,d0
    96ce:	|  |        |      add.l d0,d0
    96d0:	|  |        |      lea (0,a1,d0.l),a0
    96d4:	|  |        |      move.l 8(a0),d0
    96d8:	|  |        +----- beq.w 9788 <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    96dc:	|  |        |      movea.l 1b572 <noStack>,a1
    96e2:	|  |        |      movea.l 20(sp),a0
    96e6:	|  |        |      move.l 4(a0),d2
    96ea:	|  |        |      movea.l 24(sp),a0
    96ee:	|  |        |      move.l 84(a0),d0
    96f2:	|  |        |      move.l d0,d1
    96f4:	|  |        |      move.l d1,d0
    96f6:	|  |        |      add.l d0,d0
    96f8:	|  |        |      add.l d1,d0
    96fa:	|  |        |      add.l d0,d0
    96fc:	|  |        |      add.l d0,d0
    96fe:	|  |        |      movea.l d2,a0
    9700:	|  |        |      adda.l d0,a0
    9702:	|  |        |      move.l 8(a0),d0
    9706:	|  |        |      neg.l d0
    9708:	|  |        |      pea 1 <_start+0x1>
    970c:	|  |        |      move.l a1,-(sp)
    970e:	|  |        |      clr.l -(sp)
    9710:	|  |        |      clr.l -(sp)
    9712:	|  |        |      move.l d0,-(sp)
    9714:	|  |        |      jsr 5b22 <startNewFunctionNum>
    971a:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    971e:	|  |        |      movea.l 24(sp),a0
    9722:	|  |        |      move.l 84(a0),d0
    9726:	|  |        |      addq.l #1,d0
    9728:	|  |        |      movea.l 24(sp),a0
    972c:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9730:	|  |        |      movea.l 24(sp),a0
    9734:	|  |        |      move.l 84(a0),d0
    9738:	|  |        |      movea.l 24(sp),a0
    973c:	|  |        |      movea.l 72(a0),a0
    9740:	|  |        |      move.l 8(a0),d1
    9744:	|  |        |      move.l d1,-(sp)
    9746:	|  |        |      move.l d0,-(sp)
    9748:	|  |        |      jsr 168ac <__modsi3>
    974e:	|  |        |      addq.l #8,sp
    9750:	|  |        |      movea.l 24(sp),a0
    9754:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9758:	|  |        |      movea.l 24(sp),a0
    975c:	|  |        |      movea.l 72(a0),a0
    9760:	|  |        |      movea.l 4(a0),a1
    9764:	|  |        |      movea.l 24(sp),a0
    9768:	|  |        |      move.l 84(a0),d0
    976c:	|  |        |      move.l d0,d1
    976e:	|  |        |      move.l d1,d0
    9770:	|  |        |      add.l d0,d0
    9772:	|  |        |      add.l d1,d0
    9774:	|  |        |      add.l d0,d0
    9776:	|  |        |      add.l d0,d0
    9778:	|  |        |      lea (0,a1,d0.l),a0
    977c:	|  |        |      move.l 4(a0),d0
    9780:	|  |        |      movea.l 24(sp),a0
    9784:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    9788:	|  |        \----> movea.l 24(sp),a0
    978c:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    9792:	|  \-------------> tst.l 24(sp)
    9796:	\----------------- bne.w 91e4 <drawPeople+0x22>
	}
}
    979a:	                   nop
    979c:	                   nop
    979e:	                   move.l (sp)+,d2
    97a0:	                   lea 24(sp),sp
    97a4:	                   rts

000097a6 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    97a6:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    97a8:	          move.l 1b65a <allPeople>,(sp)
	while (thisPerson) {
    97ae:	      /-- bra.s 97c6 <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    97b0:	/-----|-> movea.l (sp),a0
    97b2:	|     |   movea.l 114(a0),a0
    97b6:	|     |   move.l 4(a0),d0
    97ba:	|     |   cmp.l 8(sp),d0
    97be:	|  /--|-- beq.s 97cc <findPerson+0x26>
		thisPerson = thisPerson -> next;
    97c0:	|  |  |   movea.l (sp),a0
    97c2:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    97c6:	|  |  \-> tst.l (sp)
    97c8:	\--|----- bne.s 97b0 <findPerson+0xa>
    97ca:	   |  /-- bra.s 97ce <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    97cc:	   \--|-> nop
	}
	return thisPerson;
    97ce:	      \-> move.l (sp),d0
}
    97d0:	          addq.l #4,sp
    97d2:	          rts

000097d4 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    97d4:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    97d6:	       move.l 12(sp),-(sp)
    97da:	       jsr 97a6 <findPerson>
    97e0:	       addq.l #4,sp
    97e2:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    97e4:	   /-- bne.s 97ea <floatCharacter+0x16>
    97e6:	   |   clr.w d0
    97e8:	/--|-- bra.s 97f4 <floatCharacter+0x20>
	moveMe -> floaty = f;
    97ea:	|  \-> movea.l (sp),a0
    97ec:	|      move.l 8(sp),24(a0)
	return TRUE;
    97f2:	|      moveq #1,d0
}
    97f4:	\----> addq.l #4,sp
    97f6:	       rts

000097f8 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    97f8:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    97fa:	          tst.l 8(sp)
    97fe:	      /-- bne.s 980c <forceWalkingPerson+0x14>
    9800:	      |   tst.l 12(sp)
    9804:	      +-- bne.s 980c <forceWalkingPerson+0x14>
    9806:	      |   clr.w d0
    9808:	/-----|-- bra.w 989e <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    980c:	|     \-> move.l 16(sp),-(sp)
    9810:	|         jsr 97a6 <findPerson>
    9816:	|         addq.l #4,sp
    9818:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    981a:	|     /-- bne.s 9820 <forceWalkingPerson+0x28>
    981c:	|     |   clr.w d0
    981e:	+-----|-- bra.s 989e <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    9820:	|     \-> movea.l (sp),a0
    9822:	|         move.l 68(a0),d0
    9826:	|     /-- beq.s 9838 <forceWalkingPerson+0x40>
    9828:	|     |   movea.l (sp),a0
    982a:	|     |   move.l 68(a0),d0
    982e:	|     |   move.l d0,-(sp)
    9830:	|     |   jsr 3766 <abortFunction>
    9836:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    9838:	|     \-> movea.l (sp),a0
    983a:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    9840:	|         movea.l (sp),a0
    9842:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    9846:	|         movea.l (sp),a0
    9848:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    984e:	|         movea.l (sp),a0
    9850:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    9856:	|         movea.l (sp),a0
    9858:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    985e:	|         movea.l (sp),a0
    9860:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    9864:	|         movea.l (sp),a0
    9866:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    986a:	|         move.l (sp),-(sp)
    986c:	|         jsr 8b08 <doBorderStuff>
    9872:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    9874:	|         pea 1 <_start+0x1>
    9878:	|         move.l 4(sp),-(sp)
    987c:	|         jsr b068 <walkMe>
    9882:	|         addq.l #8,sp
    9884:	|         tst.w d0
    9886:	|     /-- bne.s 9890 <forceWalkingPerson+0x98>
    9888:	|     |   movea.l (sp),a0
    988a:	|     |   move.w 66(a0),d0
    988e:	|  /--|-- beq.s 989c <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    9890:	|  |  \-> movea.l (sp),a0
    9892:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    9898:	|  |      moveq #1,d0
    989a:	+--|----- bra.s 989e <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    989c:	|  \----> clr.w d0
    }
}
    989e:	\-------> addq.l #4,sp
    98a0:	          rts

000098a2 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    98a2:	                lea -56(sp),sp
    98a6:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    98a8:	                move.l #320,56(sp)
    98b0:	                move.l #200,52(sp)
    98b8:	                moveq #-1,d0
    98ba:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    98be:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    98c6:	                clr.l 44(sp)
    98ca:	   /----------- bra.w 9aa2 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    98ce:	/--|----------> movea.l 1b70e <currentFloor>,a0
    98d4:	|  |            move.l 12(a0),d1
    98d8:	|  |            move.l 44(sp),d0
    98dc:	|  |            lsl.l #3,d0
    98de:	|  |            movea.l d1,a0
    98e0:	|  |            adda.l d0,a0
    98e2:	|  |            move.l (a0),d0
    98e4:	|  |            move.l d0,d1
    98e6:	|  |            subq.l #1,d1
    98e8:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    98ec:	|  |            clr.l 40(sp)
    98f0:	|  |     /----- bra.w 9a80 <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    98f4:	|  |  /--|----> movea.l 1b70e <currentFloor>,a0
    98fa:	|  |  |  |      move.l 4(a0),d1
    98fe:	|  |  |  |      movea.l 1b70e <currentFloor>,a0
    9904:	|  |  |  |      movea.l 12(a0),a0
    9908:	|  |  |  |      move.l 44(sp),d0
    990c:	|  |  |  |      lsl.l #3,d0
    990e:	|  |  |  |      adda.l d0,a0
    9910:	|  |  |  |      movea.l 4(a0),a0
    9914:	|  |  |  |      move.l 40(sp),d0
    9918:	|  |  |  |      add.l d0,d0
    991a:	|  |  |  |      add.l d0,d0
    991c:	|  |  |  |      adda.l d0,a0
    991e:	|  |  |  |      move.l (a0),d0
    9920:	|  |  |  |      lsl.l #3,d0
    9922:	|  |  |  |      movea.l d1,a0
    9924:	|  |  |  |      adda.l d0,a0
    9926:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    992a:	|  |  |  |      movea.l 1b70e <currentFloor>,a0
    9930:	|  |  |  |      move.l 4(a0),d1
    9934:	|  |  |  |      movea.l 1b70e <currentFloor>,a0
    993a:	|  |  |  |      movea.l 12(a0),a0
    993e:	|  |  |  |      move.l 44(sp),d0
    9942:	|  |  |  |      lsl.l #3,d0
    9944:	|  |  |  |      adda.l d0,a0
    9946:	|  |  |  |      movea.l 4(a0),a0
    994a:	|  |  |  |      move.l 40(sp),d0
    994e:	|  |  |  |      add.l d0,d0
    9950:	|  |  |  |      add.l d0,d0
    9952:	|  |  |  |      adda.l d0,a0
    9954:	|  |  |  |      move.l (a0),d0
    9956:	|  |  |  |      lsl.l #3,d0
    9958:	|  |  |  |      movea.l d1,a0
    995a:	|  |  |  |      adda.l d0,a0
    995c:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    9962:	|  |  |  |      movea.l 1b70e <currentFloor>,a0
    9968:	|  |  |  |      move.l 4(a0),d1
    996c:	|  |  |  |      movea.l 1b70e <currentFloor>,a0
    9972:	|  |  |  |      movea.l 12(a0),a0
    9976:	|  |  |  |      move.l 44(sp),d0
    997a:	|  |  |  |      lsl.l #3,d0
    997c:	|  |  |  |      adda.l d0,a0
    997e:	|  |  |  |      movea.l 4(a0),a0
    9982:	|  |  |  |      move.l 36(sp),d0
    9986:	|  |  |  |      add.l d0,d0
    9988:	|  |  |  |      add.l d0,d0
    998a:	|  |  |  |      adda.l d0,a0
    998c:	|  |  |  |      move.l (a0),d0
    998e:	|  |  |  |      lsl.l #3,d0
    9990:	|  |  |  |      movea.l d1,a0
    9992:	|  |  |  |      adda.l d0,a0
    9994:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    9998:	|  |  |  |      movea.l 1b70e <currentFloor>,a0
    999e:	|  |  |  |      move.l 4(a0),d1
    99a2:	|  |  |  |      movea.l 1b70e <currentFloor>,a0
    99a8:	|  |  |  |      movea.l 12(a0),a0
    99ac:	|  |  |  |      move.l 44(sp),d0
    99b0:	|  |  |  |      lsl.l #3,d0
    99b2:	|  |  |  |      adda.l d0,a0
    99b4:	|  |  |  |      movea.l 4(a0),a0
    99b8:	|  |  |  |      move.l 36(sp),d0
    99bc:	|  |  |  |      add.l d0,d0
    99be:	|  |  |  |      add.l d0,d0
    99c0:	|  |  |  |      adda.l d0,a0
    99c2:	|  |  |  |      move.l (a0),d0
    99c4:	|  |  |  |      lsl.l #3,d0
    99c6:	|  |  |  |      movea.l d1,a0
    99c8:	|  |  |  |      adda.l d0,a0
    99ca:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    99d0:	|  |  |  |      movea.l 68(sp),a0
    99d4:	|  |  |  |      move.l (a0),d1
    99d6:	|  |  |  |      movea.l 64(sp),a0
    99da:	|  |  |  |      move.l (a0),d0
    99dc:	|  |  |  |      move.l d1,-(sp)
    99de:	|  |  |  |      move.l d0,-(sp)
    99e0:	|  |  |  |      move.l 24(sp),-(sp)
    99e4:	|  |  |  |      move.l 32(sp),-(sp)
    99e8:	|  |  |  |      move.l 40(sp),-(sp)
    99ec:	|  |  |  |      move.l 48(sp),-(sp)
    99f0:	|  |  |  |      lea 28(sp),a0
    99f4:	|  |  |  |      move.l a0,-(sp)
    99f6:	|  |  |  |      lea 36(sp),a0
    99fa:	|  |  |  |      move.l a0,-(sp)
    99fc:	|  |  |  |      jsr 14e26 <closestPointOnLine>
    9a02:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    9a06:	|  |  |  |      movea.l 64(sp),a0
    9a0a:	|  |  |  |      move.l (a0),d0
    9a0c:	|  |  |  |      move.l 8(sp),d1
    9a10:	|  |  |  |      move.l d0,d2
    9a12:	|  |  |  |      sub.l d1,d2
    9a14:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    9a18:	|  |  |  |      movea.l 68(sp),a0
    9a1c:	|  |  |  |      move.l (a0),d0
    9a1e:	|  |  |  |      move.l 4(sp),d1
    9a22:	|  |  |  |      move.l d0,d2
    9a24:	|  |  |  |      sub.l d1,d2
    9a26:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    9a2a:	|  |  |  |      move.l 28(sp),-(sp)
    9a2e:	|  |  |  |      move.l 32(sp),-(sp)
    9a32:	|  |  |  |      jsr 16800 <__mulsi3>
    9a38:	|  |  |  |      addq.l #8,sp
    9a3a:	|  |  |  |      move.l d0,d2
    9a3c:	|  |  |  |      move.l 24(sp),-(sp)
    9a40:	|  |  |  |      move.l 28(sp),-(sp)
    9a44:	|  |  |  |      jsr 16800 <__mulsi3>
    9a4a:	|  |  |  |      addq.l #8,sp
    9a4c:	|  |  |  |      move.l d2,d1
    9a4e:	|  |  |  |      add.l d0,d1
    9a50:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    9a54:	|  |  |  |      move.l 12(sp),d2
    9a58:	|  |  |  |      cmp.l 32(sp),d2
    9a5c:	|  |  |  |  /-- bge.s 9a76 <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    9a5e:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    9a64:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    9a6a:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    9a70:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    9a76:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    9a7c:	|  |  |  |      addq.l #1,40(sp)
    9a80:	|  |  |  \----> movea.l 1b70e <currentFloor>,a0
    9a86:	|  |  |         move.l 12(a0),d1
    9a8a:	|  |  |         move.l 44(sp),d0
    9a8e:	|  |  |         lsl.l #3,d0
    9a90:	|  |  |         movea.l d1,a0
    9a92:	|  |  |         adda.l d0,a0
    9a94:	|  |  |         move.l (a0),d0
    9a96:	|  |  |         cmp.l 40(sp),d0
    9a9a:	|  |  \-------- bgt.w 98f4 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    9a9e:	|  |            addq.l #1,44(sp)
    9aa2:	|  \----------> movea.l 1b70e <currentFloor>,a0
    9aa8:	|               move.l 8(a0),d0
    9aac:	|               cmp.l 44(sp),d0
    9ab0:	\-------------- bgt.w 98ce <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    9ab4:	                moveq #-1,d0
    9ab6:	                cmp.l 48(sp),d0
    9aba:	            /-- bne.s 9ac0 <handleClosestPoint+0x21e>
    9abc:	            |   clr.w d0
    9abe:	         /--|-- bra.s 9ada <handleClosestPoint+0x238>
	*setX = gotX;
    9ac0:	         |  \-> movea.l 64(sp),a0
    9ac4:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    9ac8:	         |      movea.l 68(sp),a0
    9acc:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    9ad0:	         |      movea.l 72(sp),a0
    9ad4:	         |      move.l 48(sp),(a0)

	return TRUE;
    9ad8:	         |      moveq #1,d0
}
    9ada:	         \----> move.l (sp)+,d2
    9adc:	                lea 56(sp),sp
    9ae0:	                rts

00009ae2 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    9ae2:	clr.l 1b66e <personRegion+0x10>
	personRegion.sY = 0;
    9ae8:	clr.l 1b672 <personRegion+0x14>
	personRegion.di = -1;
    9aee:	moveq #-1,d0
    9af0:	move.l d0,1b676 <personRegion+0x18>
	allScreenRegions = NULL;
    9af6:	clr.l 1b702 <allScreenRegions>

	return TRUE;
    9afc:	moveq #1,d0
}
    9afe:	rts

00009b00 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    9b00:	          subq.l #4,sp
    9b02:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    9b04:	          tst.l 12(sp)
    9b08:	      /-- bne.s 9b10 <jumpPerson+0x10>
    9b0a:	      |   tst.l 16(sp)
    9b0e:	/-----|-- beq.s 9b84 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    9b10:	|     \-> move.l 20(sp),-(sp)
    9b14:	|         jsr 97a6 <findPerson>
    9b1a:	|         addq.l #4,sp
    9b1c:	|         move.l d0,4(sp)
    if (!moveMe) return;
    9b20:	|  /----- beq.s 9b88 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    9b22:	|  |      movea.l 4(sp),a0
    9b26:	|  |      move.l 68(a0),d0
    9b2a:	|  |  /-- beq.s 9b3e <jumpPerson+0x3e>
    9b2c:	|  |  |   movea.l 4(sp),a0
    9b30:	|  |  |   move.l 68(a0),d0
    9b34:	|  |  |   move.l d0,-(sp)
    9b36:	|  |  |   jsr 3766 <abortFunction>
    9b3c:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    9b3e:	|  |  \-> movea.l 4(sp),a0
    9b42:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    9b46:	|  |      movea.l 4(sp),a0
    9b4a:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    9b4e:	|  |      movea.l 4(sp),a0
    9b52:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    9b56:	|  |      move.l 16(sp),-(sp)
    9b5a:	|  |      jsr 1627e <__floatsisf>
    9b60:	|  |      addq.l #4,sp
    9b62:	|  |      move.l d0,d2
    9b64:	|  |      move.l 12(sp),-(sp)
    9b68:	|  |      jsr 1627e <__floatsisf>
    9b6e:	|  |      addq.l #4,sp
    9b70:	|  |      move.l d2,-(sp)
    9b72:	|  |      move.l d0,-(sp)
    9b74:	|  |      move.l 12(sp),-(sp)
    9b78:	|  |      jsr 9eee <moveAndScale>
    9b7e:	|  |      lea 12(sp),sp
    9b82:	|  |  /-- bra.s 9b8a <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    9b84:	\--|--|-> nop
    9b86:	   |  +-- bra.s 9b8a <jumpPerson+0x8a>
    if (!moveMe) return;
    9b88:	   \--|-> nop
}
    9b8a:	      \-> move.l (sp)+,d2
    9b8c:	          addq.l #4,sp
    9b8e:	          rts

00009b90 <killAllPeople>:


void killAllPeople () {
    9b90:	          subq.l #8,sp
    9b92:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    9b94:	   /----- bra.s 9c00 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    9b96:	/--|----> movea.l 1b65a <allPeople>,a0
    9b9c:	|  |      move.l 68(a0),d0
    9ba0:	|  |  /-- beq.s 9bb6 <killAllPeople+0x26>
    9ba2:	|  |  |   movea.l 1b65a <allPeople>,a0
    9ba8:	|  |  |   move.l 68(a0),d0
    9bac:	|  |  |   move.l d0,-(sp)
    9bae:	|  |  |   jsr 3766 <abortFunction>
    9bb4:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    9bb6:	|  |  \-> movea.l 1b65a <allPeople>,a0
    9bbc:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    9bc0:	|  |      move.l 1b65a <allPeople>,8(sp)
		allPeople = allPeople -> next;
    9bc8:	|  |      movea.l 1b65a <allPeople>,a0
    9bce:	|  |      move.l 36(a0),d0
    9bd2:	|  |      move.l d0,1b65a <allPeople>
		removeObjectType (killPeople -> thisType);
    9bd8:	|  |      movea.l 8(sp),a0
    9bdc:	|  |      move.l 114(a0),d0
    9be0:	|  |      move.l d0,-(sp)
    9be2:	|  |      jsr ca28 <removeObjectType>
    9be8:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    9bea:	|  |      move.l 8(sp),4(sp)
    9bf0:	|  |      move.l 1b5a2 <SysBase>,d0
    9bf6:	|  |      movea.l d0,a6
    9bf8:	|  |      movea.l 4(sp),a1
    9bfc:	|  |      jsr -690(a6)
	while (allPeople) {
    9c00:	|  \----> move.l 1b65a <allPeople>,d0
    9c06:	\-------- bne.s 9b96 <killAllPeople+0x6>
	}
}
    9c08:	          nop
    9c0a:	          nop
    9c0c:	          movea.l (sp)+,a6
    9c0e:	          addq.l #8,sp
    9c10:	          rts

00009c12 <killMostPeople>:

void killMostPeople() {
    9c12:	          lea -12(sp),sp
    9c16:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    9c18:	          move.l #112218,12(sp)

    while (*lookyHere) {
    9c20:	   /----- bra.w 9ca6 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    9c24:	/--|----> movea.l 12(sp),a0
    9c28:	|  |      movea.l (a0),a0
    9c2a:	|  |      move.l 118(a0),d0
    9c2e:	|  |      moveq #32,d1
    9c30:	|  |      and.l d1,d0
    9c32:	|  |  /-- beq.s 9c44 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    9c34:	|  |  |   movea.l 12(sp),a0
    9c38:	|  |  |   move.l (a0),d0
    9c3a:	|  |  |   moveq #36,d1
    9c3c:	|  |  |   add.l d0,d1
    9c3e:	|  |  |   move.l d1,12(sp)
    9c42:	|  +--|-- bra.s 9ca6 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    9c44:	|  |  \-> movea.l 12(sp),a0
    9c48:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    9c4c:	|  |      movea.l 8(sp),a0
    9c50:	|  |      move.l 36(a0),d0
    9c54:	|  |      movea.l 12(sp),a0
    9c58:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    9c5a:	|  |      movea.l 8(sp),a0
    9c5e:	|  |      move.l 68(a0),d0
    9c62:	|  |  /-- beq.s 9c76 <killMostPeople+0x64>
    9c64:	|  |  |   movea.l 8(sp),a0
    9c68:	|  |  |   move.l 68(a0),d0
    9c6c:	|  |  |   move.l d0,-(sp)
    9c6e:	|  |  |   jsr 3766 <abortFunction>
    9c74:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    9c76:	|  |  \-> movea.l 8(sp),a0
    9c7a:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    9c7e:	|  |      movea.l 8(sp),a0
    9c82:	|  |      move.l 114(a0),d0
    9c86:	|  |      move.l d0,-(sp)
    9c88:	|  |      jsr ca28 <removeObjectType>
    9c8e:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    9c90:	|  |      move.l 8(sp),4(sp)
    9c96:	|  |      move.l 1b5a2 <SysBase>,d0
    9c9c:	|  |      movea.l d0,a6
    9c9e:	|  |      movea.l 4(sp),a1
    9ca2:	|  |      jsr -690(a6)
    while (*lookyHere) {
    9ca6:	|  \----> movea.l 12(sp),a0
    9caa:	|         move.l (a0),d0
    9cac:	\-------- bne.w 9c24 <killMostPeople+0x12>
        }
    }
}
    9cb0:	          nop
    9cb2:	          nop
    9cb4:	          movea.l (sp)+,a6
    9cb6:	          lea 12(sp),sp
    9cba:	          rts

00009cbc <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    9cbc:	clr.l -(sp)
    9cbe:	move.l sp,d0
    9cc0:	addq.l #8,d0
    9cc2:	move.l d0,-(sp)
    9cc4:	jsr 71b0 <setFrames>
    9cca:	addq.l #8,sp
}
    9ccc:	nop
    9cce:	rts

00009cd0 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    9cd0:	          lea -12(sp),sp
    9cd4:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    9cd6:	          tst.l 20(sp)
    9cda:	      /-- bne.s 9ce8 <makeWalkingPerson+0x18>
    9cdc:	      |   tst.l 24(sp)
    9ce0:	      +-- bne.s 9ce8 <makeWalkingPerson+0x18>
    9ce2:	      |   clr.w d0
    9ce4:	/-----|-- bra.w 9e80 <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    9ce8:	|     \-> movea.l 1b70e <currentFloor>,a0
    9cee:	|         move.l 8(a0),d0
    9cf2:	|     /-- bne.s 9cfa <makeWalkingPerson+0x2a>
    9cf4:	|     |   clr.w d0
    9cf6:	+-----|-- bra.w 9e80 <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    9cfa:	|     \-> move.l 28(sp),-(sp)
    9cfe:	|         jsr 97a6 <findPerson>
    9d04:	|         addq.l #4,sp
    9d06:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    9d0a:	|     /-- bne.s 9d12 <makeWalkingPerson+0x42>
    9d0c:	|     |   clr.w d0
    9d0e:	+-----|-- bra.w 9e80 <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    9d12:	|     \-> movea.l 12(sp),a0
    9d16:	|         move.l 68(a0),d0
    9d1a:	|     /-- beq.s 9d2e <makeWalkingPerson+0x5e>
    9d1c:	|     |   movea.l 12(sp),a0
    9d20:	|     |   move.l 68(a0),d0
    9d24:	|     |   move.l d0,-(sp)
    9d26:	|     |   jsr 3766 <abortFunction>
    9d2c:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    9d2e:	|     \-> movea.l 12(sp),a0
    9d32:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    9d36:	|         movea.l 12(sp),a0
    9d3a:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    9d40:	|         movea.l 12(sp),a0
    9d44:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    9d4a:	|         movea.l 12(sp),a0
    9d4e:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    9d54:	|         movea.l 12(sp),a0
    9d58:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    9d5e:	|         move.l 24(sp),-(sp)
    9d62:	|         move.l 24(sp),-(sp)
    9d66:	|         jsr 15328 <inFloor>
    9d6c:	|         addq.l #8,sp
    9d6e:	|         movea.l 12(sp),a0
    9d72:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    9d76:	|         movea.l 12(sp),a0
    9d7a:	|         move.l 60(a0),d0
    9d7e:	|         moveq #-1,d1
    9d80:	|         cmp.l d0,d1
    9d82:	|     /-- bne.s 9db2 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    9d84:	|     |   movea.w #60,a0
    9d88:	|     |   adda.l 12(sp),a0
    9d8c:	|     |   moveq #44,d1
    9d8e:	|     |   add.l 12(sp),d1
    9d92:	|     |   moveq #40,d0
    9d94:	|     |   add.l 12(sp),d0
    9d98:	|     |   move.l a0,-(sp)
    9d9a:	|     |   move.l d1,-(sp)
    9d9c:	|     |   move.l d0,-(sp)
    9d9e:	|     |   jsr 98a2 <handleClosestPoint>
    9da4:	|     |   lea 12(sp),sp
    9da8:	|     |   tst.w d0
    9daa:	|     +-- bne.s 9db2 <makeWalkingPerson+0xe2>
    9dac:	|     |   clr.w d0
    9dae:	+-----|-- bra.w 9e80 <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    9db2:	|     \-> movea.l 12(sp),a0
    9db6:	|         move.l 4(a0),d0
    9dba:	|         move.l d0,-(sp)
    9dbc:	|         jsr 16216 <__fixsfsi>
    9dc2:	|         addq.l #4,sp
    9dc4:	|         move.l d0,d2
    9dc6:	|         movea.l 12(sp),a0
    9dca:	|         move.l (a0),d0
    9dcc:	|         move.l d0,-(sp)
    9dce:	|         jsr 16216 <__fixsfsi>
    9dd4:	|         addq.l #4,sp
    9dd6:	|         move.l d2,-(sp)
    9dd8:	|         move.l d0,-(sp)
    9dda:	|         jsr 15328 <inFloor>
    9de0:	|         addq.l #8,sp
    9de2:	|         movea.l 12(sp),a0
    9de6:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    9dea:	|         movea.l 12(sp),a0
    9dee:	|         move.l 56(a0),d0
    9df2:	|         moveq #-1,d1
    9df4:	|         cmp.l d0,d1
    9df6:	|     /-- bne.s 9e48 <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    9df8:	|     |   movea.l 12(sp),a0
    9dfc:	|     |   move.l (a0),d0
    9dfe:	|     |   move.l d0,-(sp)
    9e00:	|     |   jsr 16216 <__fixsfsi>
    9e06:	|     |   addq.l #4,sp
    9e08:	|     |   move.l d0,8(sp)
    9e0c:	|     |   movea.l 12(sp),a0
    9e10:	|     |   move.l 4(a0),d0
    9e14:	|     |   move.l d0,-(sp)
    9e16:	|     |   jsr 16216 <__fixsfsi>
    9e1c:	|     |   addq.l #4,sp
    9e1e:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    9e22:	|     |   moveq #56,d0
    9e24:	|     |   add.l 12(sp),d0
    9e28:	|     |   move.l d0,-(sp)
    9e2a:	|     |   lea 8(sp),a0
    9e2e:	|     |   move.l a0,-(sp)
    9e30:	|     |   moveq #16,d0
    9e32:	|     |   add.l sp,d0
    9e34:	|     |   move.l d0,-(sp)
    9e36:	|     |   jsr 98a2 <handleClosestPoint>
    9e3c:	|     |   lea 12(sp),sp
    9e40:	|     |   tst.w d0
    9e42:	|     +-- bne.s 9e48 <makeWalkingPerson+0x178>
    9e44:	|     |   clr.w d0
    9e46:	+-----|-- bra.s 9e80 <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    9e48:	|     \-> move.l 12(sp),-(sp)
    9e4c:	|         jsr 8b08 <doBorderStuff>
    9e52:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    9e54:	|         clr.l -(sp)
    9e56:	|         move.l 16(sp),-(sp)
    9e5a:	|         jsr b068 <walkMe>
    9e60:	|         addq.l #8,sp
    9e62:	|         tst.w d0
    9e64:	|     /-- bne.s 9e70 <makeWalkingPerson+0x1a0>
    9e66:	|     |   movea.l 12(sp),a0
    9e6a:	|     |   move.w 66(a0),d0
    9e6e:	|  /--|-- beq.s 9e7e <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    9e70:	|  |  \-> movea.l 12(sp),a0
    9e74:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    9e7a:	|  |      moveq #1,d0
    9e7c:	+--|----- bra.s 9e80 <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    9e7e:	|  \----> clr.w d0
	}
}
    9e80:	\-------> move.l (sp)+,d2
    9e82:	          lea 12(sp),sp
    9e86:	          rts

00009e88 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    9e88:	       lea -16(sp),sp
    9e8c:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    9e8e:	       moveq #12,d0
    9e90:	       move.l d0,16(sp)
    9e94:	       clr.l 12(sp)
    9e98:	       move.l 1b5a2 <SysBase>,d0
    9e9e:	       movea.l d0,a6
    9ea0:	       move.l 16(sp),d0
    9ea4:	       move.l 12(sp),d1
    9ea8:	       jsr -684(a6)
    9eac:	       move.l d0,8(sp)
    9eb0:	       move.l 8(sp),d0
    9eb4:	       move.l d0,4(sp)
    if(newAnim == 0) {
    9eb8:	   /-- bne.s 9ecc <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    9eba:	   |   pea 17dd0 <PutChar+0x14ba>
    9ec0:	   |   jsr 15fc6 <KPrintF>
    9ec6:	   |   addq.l #4,sp
        return NULL;    
    9ec8:	   |   moveq #0,d0
    9eca:	/--|-- bra.s 9ee6 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    9ecc:	|  \-> movea.l 4(sp),a0
    9ed0:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    9ed2:	|      movea.l 4(sp),a0
    9ed6:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    9eda:	|      movea.l 4(sp),a0
    9ede:	|      clr.l 4(a0)
	return newAnim;
    9ee2:	|      move.l 4(sp),d0
}
    9ee6:	\----> movea.l (sp)+,a6
    9ee8:	       lea 16(sp),sp
    9eec:	       rts

00009eee <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    9eee:	    move.l d2,-(sp)
	me->x = x;
    9ef0:	    movea.l 8(sp),a0
    9ef4:	    move.l 12(sp),(a0)
	me->y = y;
    9ef8:	    movea.l 8(sp),a0
    9efc:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    9f02:	    movea.l 8(sp),a0
    9f06:	    clr.l 8(a0)
	me->oldy = 0;
    9f0a:	    movea.l 8(sp),a0
    9f0e:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    9f12:	    movea.l 8(sp),a0
    9f16:	    move.l 118(a0),d0
    9f1a:	    moveq #2,d1
    9f1c:	    and.l d1,d0
    9f1e:	/-- bne.s 9f76 <moveAndScale+0x88>
    9f20:	|   move.w 1af38 <scaleDivide>,d0
    9f26:	+-- beq.s 9f76 <moveAndScale+0x88>
    9f28:	|   movea.l 8(sp),a0
    9f2c:	|   move.l 4(a0),d2
    9f30:	|   move.w 1af36 <scaleHorizon>,d0
    9f36:	|   movea.w d0,a0
    9f38:	|   move.l a0,-(sp)
    9f3a:	|   jsr 1627e <__floatsisf>
    9f40:	|   addq.l #4,sp
    9f42:	|   move.l d0,-(sp)
    9f44:	|   move.l d2,-(sp)
    9f46:	|   jsr 16572 <__subsf3>
    9f4c:	|   addq.l #8,sp
    9f4e:	|   move.l d0,d2
    9f50:	|   move.w 1af38 <scaleDivide>,d0
    9f56:	|   movea.w d0,a0
    9f58:	|   move.l a0,-(sp)
    9f5a:	|   jsr 1627e <__floatsisf>
    9f60:	|   addq.l #4,sp
    9f62:	|   move.l d0,-(sp)
    9f64:	|   move.l d2,-(sp)
    9f66:	|   jsr 1612a <__divsf3>
    9f6c:	|   addq.l #8,sp
    9f6e:	|   movea.l 8(sp),a0
    9f72:	|   move.l d0,32(a0)
}
    9f76:	\-> nop
    9f78:	    move.l (sp)+,d2
    9f7a:	    rts

00009f7c <removeOneCharacter>:

void removeOneCharacter (int i) {
    9f7c:	          lea -16(sp),sp
    9f80:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    9f82:	          move.l 24(sp),-(sp)
    9f86:	          jsr 97a6 <findPerson>
    9f8c:	          addq.l #4,sp
    9f8e:	          move.l d0,8(sp)

    if (p) {
    9f92:	/-------- beq.w a072 <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    9f96:	|         move.l 1b706 <overRegion>,d0
    9f9c:	|         cmpi.l #112222,d0
    9fa2:	|     /-- bne.s 9fc0 <removeOneCharacter+0x44>
    9fa4:	|     |   movea.l 1b706 <overRegion>,a0
    9faa:	|     |   move.l 28(a0),d1
    9fae:	|     |   movea.l 8(sp),a0
    9fb2:	|     |   move.l 114(a0),d0
    9fb6:	|     |   cmp.l d1,d0
    9fb8:	|     +-- bne.s 9fc0 <removeOneCharacter+0x44>
            overRegion = NULL;
    9fba:	|     |   clr.l 1b706 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    9fc0:	|     \-> movea.l 8(sp),a0
    9fc4:	|         move.l 68(a0),d0
    9fc8:	|     /-- beq.s 9fdc <removeOneCharacter+0x60>
    9fca:	|     |   movea.l 8(sp),a0
    9fce:	|     |   move.l 68(a0),d0
    9fd2:	|     |   move.l d0,-(sp)
    9fd4:	|     |   jsr 3766 <abortFunction>
    9fda:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    9fdc:	|     \-> movea.l 8(sp),a0
    9fe0:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    9fe4:	|         clr.l 12(sp)
    9fe8:	|     /-- bra.s a010 <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    9fea:	|  /--|-> movea.l 8(sp),a0
    9fee:	|  |  |   movea.l 80(a0),a0
    9ff2:	|  |  |   move.l (a0),d1
    9ff4:	|  |  |   move.l 12(sp),d0
    9ff8:	|  |  |   add.l d0,d0
    9ffa:	|  |  |   add.l d0,d0
    9ffc:	|  |  |   movea.l d1,a0
    9ffe:	|  |  |   adda.l d0,a0
    a000:	|  |  |   move.l (a0),d0
    a002:	|  |  |   move.l d0,-(sp)
    a004:	|  |  |   jsr 8a84 <deleteAnim>
    a00a:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    a00c:	|  |  |   addq.l #1,12(sp)
    a010:	|  |  \-> moveq #2,d0
    a012:	|  |      cmp.l 12(sp),d0
    a016:	|  \----- bge.s 9fea <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    a018:	|         move.l #112218,16(sp)
    a020:	|     /-- bra.s a030 <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    a022:	|  /--|-> movea.l 16(sp),a0
    a026:	|  |  |   move.l (a0),d0
    a028:	|  |  |   moveq #36,d1
    a02a:	|  |  |   add.l d0,d1
    a02c:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    a030:	|  |  \-> movea.l 16(sp),a0
    a034:	|  |      move.l (a0),d0
    a036:	|  |      cmp.l 8(sp),d0
    a03a:	|  \----- bne.s a022 <removeOneCharacter+0xa6>

        *killPeople = p->next;
    a03c:	|         movea.l 8(sp),a0
    a040:	|         move.l 36(a0),d0
    a044:	|         movea.l 16(sp),a0
    a048:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    a04a:	|         movea.l 8(sp),a0
    a04e:	|         move.l 114(a0),d0
    a052:	|         move.l d0,-(sp)
    a054:	|         jsr ca28 <removeObjectType>
    a05a:	|         addq.l #4,sp
        FreeVec(p);
    a05c:	|         move.l 8(sp),4(sp)
    a062:	|         move.l 1b5a2 <SysBase>,d0
    a068:	|         movea.l d0,a6
    a06a:	|         movea.l 4(sp),a1
    a06e:	|         jsr -690(a6)
    }
}
    a072:	\-------> nop
    a074:	          movea.l (sp)+,a6
    a076:	          lea 16(sp),sp
    a07a:	          rts

0000a07c <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    a07c:	       subq.l #8,sp
    a07e:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    a080:	       movea.l 16(sp),a0
    a084:	       movea.l 80(a0),a0
    a088:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    a08e:	       movea.l 16(sp),a0
    a092:	       move.l 92(a0),d2
    a096:	       move.l 4(sp),-(sp)
    a09a:	       pea b4 <_start+0xb4>
    a09e:	       jsr 1687e <__divsi3>
    a0a4:	       addq.l #8,sp
    a0a6:	       add.l d2,d0
    a0a8:	       move.l d0,d1
    a0aa:	       addi.l #180,d1
    a0b0:	       movea.l 16(sp),a0
    a0b4:	       move.l 100(a0),d0
    a0b8:	       move.l d1,d2
    a0ba:	       add.l d0,d2
    a0bc:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    a0c0:	   /-- bra.s a0ca <rethinkAngle+0x4e>
    a0c2:	/--|-> addi.l #-360,8(sp)
    a0ca:	|  \-> cmpi.l #359,8(sp)
    a0d2:	\----- bgt.s a0c2 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    a0d4:	       move.l 4(sp),-(sp)
    a0d8:	       move.l 12(sp),-(sp)
    a0dc:	       jsr 16800 <__mulsi3>
    a0e2:	       addq.l #8,sp
    a0e4:	       pea 168 <decodeFilename+0x50>
    a0e8:	       move.l d0,-(sp)
    a0ea:	       jsr 1687e <__divsi3>
    a0f0:	       addq.l #8,sp
    a0f2:	       movea.l 16(sp),a0
    a0f6:	       move.l d0,106(a0)
}
    a0fa:	       nop
    a0fc:	       move.l (sp)+,d2
    a0fe:	       addq.l #8,sp
    a100:	       rts

0000a102 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    a102:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    a104:	          movea.l 8(sp),a0
    a108:	          move.l 8(a0),d0
    a10c:	          move.l 12(sp),-(sp)
    a110:	          move.l d0,-(sp)
    a112:	          jsr 8d0 <put2bytes>
    a118:	          addq.l #8,sp
	if (p -> numFrames) {
    a11a:	          movea.l 8(sp),a0
    a11e:	          move.l 8(a0),d0
    a122:	/-------- beq.w a1c6 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    a126:	|         movea.l 8(sp),a0
    a12a:	|         movea.l (a0),a0
    a12c:	|         move.l (a0),d0
    a12e:	|         move.l 12(sp),-(sp)
    a132:	|         move.l d0,-(sp)
    a134:	|         jsr 958 <put4bytes>
    a13a:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    a13c:	|         clr.l (sp)
    a13e:	|     /-- bra.s a1b8 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    a140:	|  /--|-> movea.l 8(sp),a0
    a144:	|  |  |   movea.l 4(a0),a0
    a148:	|  |  |   move.l (sp),d1
    a14a:	|  |  |   move.l d1,d0
    a14c:	|  |  |   add.l d0,d0
    a14e:	|  |  |   add.l d1,d0
    a150:	|  |  |   add.l d0,d0
    a152:	|  |  |   add.l d0,d0
    a154:	|  |  |   adda.l d0,a0
    a156:	|  |  |   move.l (a0),d0
    a158:	|  |  |   move.l 12(sp),-(sp)
    a15c:	|  |  |   move.l d0,-(sp)
    a15e:	|  |  |   jsr 958 <put4bytes>
    a164:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    a166:	|  |  |   movea.l 8(sp),a0
    a16a:	|  |  |   movea.l 4(a0),a0
    a16e:	|  |  |   move.l (sp),d1
    a170:	|  |  |   move.l d1,d0
    a172:	|  |  |   add.l d0,d0
    a174:	|  |  |   add.l d1,d0
    a176:	|  |  |   add.l d0,d0
    a178:	|  |  |   add.l d0,d0
    a17a:	|  |  |   adda.l d0,a0
    a17c:	|  |  |   move.l 4(a0),d0
    a180:	|  |  |   move.l 12(sp),-(sp)
    a184:	|  |  |   move.l d0,-(sp)
    a186:	|  |  |   jsr 958 <put4bytes>
    a18c:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    a18e:	|  |  |   movea.l 8(sp),a0
    a192:	|  |  |   movea.l 4(a0),a0
    a196:	|  |  |   move.l (sp),d1
    a198:	|  |  |   move.l d1,d0
    a19a:	|  |  |   add.l d0,d0
    a19c:	|  |  |   add.l d1,d0
    a19e:	|  |  |   add.l d0,d0
    a1a0:	|  |  |   add.l d0,d0
    a1a2:	|  |  |   adda.l d0,a0
    a1a4:	|  |  |   move.l 8(a0),d0
    a1a8:	|  |  |   move.l 12(sp),-(sp)
    a1ac:	|  |  |   move.l d0,-(sp)
    a1ae:	|  |  |   jsr 958 <put4bytes>
    a1b4:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    a1b6:	|  |  |   addq.l #1,(sp)
    a1b8:	|  |  \-> movea.l 8(sp),a0
    a1bc:	|  |      move.l 8(a0),d0
    a1c0:	|  |      cmp.l (sp),d0
    a1c2:	|  \----- bgt.w a140 <saveAnim+0x3e>
		}
	}
	return TRUE;
    a1c6:	\-------> moveq #1,d0
}
    a1c8:	          addq.l #4,sp
    a1ca:	          rts

0000a1cc <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    a1cc:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    a1ce:	             movea.l 8(sp),a0
    a1d2:	             move.l 4(a0),d0
    a1d6:	             move.l 12(sp),-(sp)
    a1da:	             move.l d0,-(sp)
    a1dc:	             jsr 8d0 <put2bytes>
    a1e2:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    a1e4:	             clr.l (sp)
    a1e6:	   /-------- bra.s a212 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    a1e8:	/--|-------> movea.l 8(sp),a0
    a1ec:	|  |         move.l (a0),d1
    a1ee:	|  |         move.l (sp),d0
    a1f0:	|  |         add.l d0,d0
    a1f2:	|  |         add.l d0,d0
    a1f4:	|  |         movea.l d1,a0
    a1f6:	|  |         adda.l d0,a0
    a1f8:	|  |         move.l (a0),d0
    a1fa:	|  |         move.l 12(sp),-(sp)
    a1fe:	|  |         move.l d0,-(sp)
    a200:	|  |         jsr a102 <saveAnim>
    a206:	|  |         addq.l #8,sp
    a208:	|  |         tst.w d0
    a20a:	|  |     /-- bne.s a210 <saveCostume+0x44>
    a20c:	|  |     |   clr.w d0
    a20e:	|  |  /--|-- bra.s a226 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    a210:	|  |  |  \-> addq.l #1,(sp)
    a212:	|  \--|----> movea.l 8(sp),a0
    a216:	|     |      move.l 4(a0),d1
    a21a:	|     |      move.l d1,d0
    a21c:	|     |      add.l d0,d0
    a21e:	|     |      add.l d1,d0
    a220:	|     |      cmp.l (sp),d0
    a222:	\-----|----- bgt.s a1e8 <saveCostume+0x1c>
	}

	return TRUE;
    a224:	      |      moveq #1,d0
}
    a226:	      \----> addq.l #4,sp
    a228:	             rts

0000a22a <savePeople>:

BOOL savePeople (BPTR fp) {
    a22a:	             lea -144(sp),sp
    a22e:	             move.l a6,-(sp)
    a230:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    a232:	             move.l 1b65a <allPeople>,148(sp)
	int countPeople = 0, a;
    a23a:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    a23e:	             move.w 1af36 <scaleHorizon>,d0
    a244:	             movea.w d0,a0
    a246:	             move.l 156(sp),-(sp)
    a24a:	             move.l a0,-(sp)
    a24c:	             jsr a9c <putSigned>
    a252:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    a254:	             move.w 1af38 <scaleDivide>,d0
    a25a:	             movea.w d0,a0
    a25c:	             move.l 156(sp),-(sp)
    a260:	             move.l a0,-(sp)
    a262:	             jsr a9c <putSigned>
    a268:	             addq.l #8,sp

	while (me) {
    a26a:	         /-- bra.s a27a <savePeople+0x50>
		countPeople ++;
    a26c:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    a270:	      |  |   movea.l 148(sp),a0
    a274:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    a27a:	      |  \-> tst.l 148(sp)
    a27e:	      \----- bne.s a26c <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    a280:	             move.l 156(sp),-(sp)
    a284:	             move.l 148(sp),-(sp)
    a288:	             jsr 8d0 <put2bytes>
    a28e:	             addq.l #8,sp

	me = allPeople;
    a290:	             move.l 1b65a <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    a298:	             clr.l 140(sp)
    a29c:	   /-------- bra.w a6f4 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    a2a0:	/--|-------> movea.l 148(sp),a0
    a2a4:	|  |         move.l (a0),d0
    a2a6:	|  |         move.l 156(sp),-(sp)
    a2aa:	|  |         move.l d0,-(sp)
    a2ac:	|  |         jsr a46 <putFloat>
    a2b2:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    a2b4:	|  |         movea.l 148(sp),a0
    a2b8:	|  |         move.l 4(a0),d0
    a2bc:	|  |         move.l 156(sp),-(sp)
    a2c0:	|  |         move.l d0,-(sp)
    a2c2:	|  |         jsr a46 <putFloat>
    a2c8:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    a2ca:	|  |         movea.l 148(sp),a0
    a2ce:	|  |         move.l 80(a0),d0
    a2d2:	|  |         move.l 156(sp),-(sp)
    a2d6:	|  |         move.l d0,-(sp)
    a2d8:	|  |         jsr a1cc <saveCostume>
    a2de:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    a2e0:	|  |         movea.l 148(sp),a0
    a2e4:	|  |         move.l 72(a0),d0
    a2e8:	|  |         move.l 156(sp),-(sp)
    a2ec:	|  |         move.l d0,-(sp)
    a2ee:	|  |         jsr a102 <saveAnim>
    a2f4:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    a2f6:	|  |         move.l 156(sp),136(sp)
    a2fc:	|  |         movea.l 148(sp),a0
    a300:	|  |         move.l 72(a0),d1
    a304:	|  |         movea.l 148(sp),a0
    a308:	|  |         move.l 76(a0),d0
    a30c:	|  |         cmp.l d1,d0
    a30e:	|  |         seq d0
    a310:	|  |         neg.b d0
    a312:	|  |         move.b d0,d0
    a314:	|  |         andi.l #255,d0
    a31a:	|  |         move.l d0,132(sp)
    a31e:	|  |         move.l 1b5aa <DOSBase>,d0
    a324:	|  |         movea.l d0,a6
    a326:	|  |         move.l 136(sp),d1
    a32a:	|  |         move.l 132(sp),d2
    a32e:	|  |         jsr -312(a6)
    a332:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    a336:	|  |         movea.l 148(sp),a0
    a33a:	|  |         move.l 32(a0),d0
    a33e:	|  |         move.l 156(sp),-(sp)
    a342:	|  |         move.l d0,-(sp)
    a344:	|  |         jsr a46 <putFloat>
    a34a:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    a34c:	|  |         movea.l 148(sp),a0
    a350:	|  |         move.l 118(a0),d0
    a354:	|  |         move.l 156(sp),-(sp)
    a358:	|  |         move.l d0,-(sp)
    a35a:	|  |         jsr 8d0 <put2bytes>
    a360:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    a362:	|  |         movea.l 148(sp),a0
    a366:	|  |         move.l 20(a0),d0
    a36a:	|  |         move.l 156(sp),-(sp)
    a36e:	|  |         move.l d0,-(sp)
    a370:	|  |         jsr 8d0 <put2bytes>
    a376:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    a378:	|  |         movea.l 148(sp),a0
    a37c:	|  |         move.l 40(a0),d0
    a380:	|  |         move.l 156(sp),-(sp)
    a384:	|  |         move.l d0,-(sp)
    a386:	|  |         jsr 8d0 <put2bytes>
    a38c:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    a38e:	|  |         movea.l 148(sp),a0
    a392:	|  |         move.l 44(a0),d0
    a396:	|  |         move.l 156(sp),-(sp)
    a39a:	|  |         move.l d0,-(sp)
    a39c:	|  |         jsr 8d0 <put2bytes>
    a3a2:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    a3a4:	|  |         movea.l 148(sp),a0
    a3a8:	|  |         move.l 48(a0),d0
    a3ac:	|  |         move.l 156(sp),-(sp)
    a3b0:	|  |         move.l d0,-(sp)
    a3b2:	|  |         jsr 8d0 <put2bytes>
    a3b8:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    a3ba:	|  |         movea.l 148(sp),a0
    a3be:	|  |         move.l 52(a0),d0
    a3c2:	|  |         move.l 156(sp),-(sp)
    a3c6:	|  |         move.l d0,-(sp)
    a3c8:	|  |         jsr 8d0 <put2bytes>
    a3ce:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    a3d0:	|  |         movea.l 148(sp),a0
    a3d4:	|  |         move.l 84(a0),d0
    a3d8:	|  |         move.l 156(sp),-(sp)
    a3dc:	|  |         move.l d0,-(sp)
    a3de:	|  |         jsr 8d0 <put2bytes>
    a3e4:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    a3e6:	|  |         movea.l 148(sp),a0
    a3ea:	|  |         move.l 88(a0),d0
    a3ee:	|  |         move.l 156(sp),-(sp)
    a3f2:	|  |         move.l d0,-(sp)
    a3f4:	|  |         jsr 8d0 <put2bytes>
    a3fa:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    a3fc:	|  |         movea.l 148(sp),a0
    a400:	|  |         move.l 28(a0),d0
    a404:	|  |         move.l 156(sp),-(sp)
    a408:	|  |         move.l d0,-(sp)
    a40a:	|  |         jsr 8d0 <put2bytes>
    a410:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    a412:	|  |         movea.l 148(sp),a0
    a416:	|  |         move.l 122(a0),d0
    a41a:	|  |         move.l 156(sp),-(sp)
    a41e:	|  |         move.l d0,-(sp)
    a420:	|  |         jsr 8d0 <put2bytes>
    a426:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    a428:	|  |         movea.l 148(sp),a0
    a42c:	|  |         move.l 24(a0),d0
    a430:	|  |         move.l d0,d0
    a432:	|  |         movea.w d0,a0
    a434:	|  |         move.l 156(sp),-(sp)
    a438:	|  |         move.l a0,-(sp)
    a43a:	|  |         jsr a9c <putSigned>
    a440:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    a442:	|  |         move.l 156(sp),124(sp)
    a448:	|  |         movea.l 148(sp),a0
    a44c:	|  |         move.w 104(a0),d0
    a450:	|  |         movea.w d0,a0
    a452:	|  |         move.l a0,120(sp)
    a456:	|  |         move.l 1b5aa <DOSBase>,d0
    a45c:	|  |         movea.l d0,a6
    a45e:	|  |         move.l 124(sp),d1
    a462:	|  |         move.l 120(sp),d2
    a466:	|  |         jsr -312(a6)
    a46a:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    a46e:	|  |         move.l 156(sp),112(sp)
    a474:	|  |         movea.l 148(sp),a0
    a478:	|  |         move.w 64(a0),d0
    a47c:	|  |         movea.w d0,a0
    a47e:	|  |         move.l a0,108(sp)
    a482:	|  |         move.l 1b5aa <DOSBase>,d0
    a488:	|  |         movea.l d0,a6
    a48a:	|  |         move.l 112(sp),d1
    a48e:	|  |         move.l 108(sp),d2
    a492:	|  |         jsr -312(a6)
    a496:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    a49a:	|  |         move.l 156(sp),100(sp)
    a4a0:	|  |         movea.l 148(sp),a0
    a4a4:	|  |         move.w 66(a0),d0
    a4a8:	|  |         movea.w d0,a0
    a4aa:	|  |         move.l a0,96(sp)
    a4ae:	|  |         move.l 1b5aa <DOSBase>,d0
    a4b4:	|  |         movea.l d0,a6
    a4b6:	|  |         move.l 100(sp),d1
    a4ba:	|  |         move.l 96(sp),d2
    a4be:	|  |         jsr -312(a6)
    a4c2:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    a4c6:	|  |         movea.l 148(sp),a0
    a4ca:	|  |         move.l 68(a0),d0
    a4ce:	|  |  /----- beq.s a50c <savePeople+0x2e2>
			FPutC (fp, 1);
    a4d0:	|  |  |      move.l 156(sp),76(sp)
    a4d6:	|  |  |      moveq #1,d0
    a4d8:	|  |  |      move.l d0,72(sp)
    a4dc:	|  |  |      move.l 1b5aa <DOSBase>,d0
    a4e2:	|  |  |      movea.l d0,a6
    a4e4:	|  |  |      move.l 76(sp),d1
    a4e8:	|  |  |      move.l 72(sp),d2
    a4ec:	|  |  |      jsr -312(a6)
    a4f0:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    a4f4:	|  |  |      movea.l 148(sp),a0
    a4f8:	|  |  |      move.l 68(a0),d0
    a4fc:	|  |  |      move.l 156(sp),-(sp)
    a500:	|  |  |      move.l d0,-(sp)
    a502:	|  |  |      jsr b6a2 <saveFunction>
    a508:	|  |  |      addq.l #8,sp
    a50a:	|  |  |  /-- bra.s a530 <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    a50c:	|  |  \--|-> move.l 156(sp),88(sp)
    a512:	|  |     |   moveq #1,d0
    a514:	|  |     |   move.l d0,84(sp)
    a518:	|  |     |   move.l 1b5aa <DOSBase>,d0
    a51e:	|  |     |   movea.l d0,a6
    a520:	|  |     |   move.l 88(sp),d1
    a524:	|  |     |   move.l 84(sp),d2
    a528:	|  |     |   jsr -312(a6)
    a52c:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    a530:	|  |     \-> movea.l 148(sp),a0
    a534:	|  |         move.l 106(a0),d0
    a538:	|  |         move.l 156(sp),-(sp)
    a53c:	|  |         move.l d0,-(sp)
    a53e:	|  |         jsr 8d0 <put2bytes>
    a544:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    a546:	|  |         movea.l 148(sp),a0
    a54a:	|  |         move.l 92(a0),d0
    a54e:	|  |         move.l 156(sp),-(sp)
    a552:	|  |         move.l d0,-(sp)
    a554:	|  |         jsr 8d0 <put2bytes>
    a55a:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    a55c:	|  |         movea.l 148(sp),a0
    a560:	|  |         move.l 100(a0),d0
    a564:	|  |         move.l 156(sp),-(sp)
    a568:	|  |         move.l d0,-(sp)
    a56a:	|  |         jsr 8d0 <put2bytes>
    a570:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    a572:	|  |         movea.l 148(sp),a0
    a576:	|  |         move.l 96(a0),d0
    a57a:	|  |         move.l 156(sp),-(sp)
    a57e:	|  |         move.l d0,-(sp)
    a580:	|  |         jsr 8d0 <put2bytes>
    a586:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    a588:	|  |         movea.l 148(sp),a0
    a58c:	|  |         move.l 110(a0),d0
    a590:	|  |         move.l d0,d0
    a592:	|  |         movea.w d0,a0
    a594:	|  |         move.l 156(sp),-(sp)
    a598:	|  |         move.l a0,-(sp)
    a59a:	|  |         jsr a9c <putSigned>
    a5a0:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    a5a2:	|  |         movea.l 148(sp),a0
    a5a6:	|  |         move.l 56(a0),d0
    a5aa:	|  |         move.l d0,d0
    a5ac:	|  |         movea.w d0,a0
    a5ae:	|  |         move.l 156(sp),-(sp)
    a5b2:	|  |         move.l a0,-(sp)
    a5b4:	|  |         jsr a9c <putSigned>
    a5ba:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    a5bc:	|  |         movea.l 148(sp),a0
    a5c0:	|  |         move.l 60(a0),d0
    a5c4:	|  |         move.l d0,d0
    a5c6:	|  |         movea.w d0,a0
    a5c8:	|  |         move.l 156(sp),-(sp)
    a5cc:	|  |         move.l a0,-(sp)
    a5ce:	|  |         jsr a9c <putSigned>
    a5d4:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    a5d6:	|  |         move.l 156(sp),64(sp)
    a5dc:	|  |         movea.l 148(sp),a0
    a5e0:	|  |         move.b 126(a0),d0
    a5e4:	|  |         move.b d0,d0
    a5e6:	|  |         andi.l #255,d0
    a5ec:	|  |         move.l d0,60(sp)
    a5f0:	|  |         move.l 1b5aa <DOSBase>,d0
    a5f6:	|  |         movea.l d0,a6
    a5f8:	|  |         move.l 64(sp),d1
    a5fc:	|  |         move.l 60(sp),d2
    a600:	|  |         jsr -312(a6)
    a604:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    a608:	|  |         move.l 156(sp),52(sp)
    a60e:	|  |         movea.l 148(sp),a0
    a612:	|  |         move.b 127(a0),d0
    a616:	|  |         move.b d0,d0
    a618:	|  |         andi.l #255,d0
    a61e:	|  |         move.l d0,48(sp)
    a622:	|  |         move.l 1b5aa <DOSBase>,d0
    a628:	|  |         movea.l d0,a6
    a62a:	|  |         move.l 52(sp),d1
    a62e:	|  |         move.l 48(sp),d2
    a632:	|  |         jsr -312(a6)
    a636:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    a63a:	|  |         move.l 156(sp),40(sp)
    a640:	|  |         movea.l 148(sp),a0
    a644:	|  |         move.b 128(a0),d0
    a648:	|  |         move.b d0,d0
    a64a:	|  |         andi.l #255,d0
    a650:	|  |         move.l d0,36(sp)
    a654:	|  |         move.l 1b5aa <DOSBase>,d0
    a65a:	|  |         movea.l d0,a6
    a65c:	|  |         move.l 40(sp),d1
    a660:	|  |         move.l 36(sp),d2
    a664:	|  |         jsr -312(a6)
    a668:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    a66c:	|  |         move.l 156(sp),28(sp)
    a672:	|  |         movea.l 148(sp),a0
    a676:	|  |         move.b 129(a0),d0
    a67a:	|  |         move.b d0,d0
    a67c:	|  |         andi.l #255,d0
    a682:	|  |         move.l d0,24(sp)
    a686:	|  |         move.l 1b5aa <DOSBase>,d0
    a68c:	|  |         movea.l d0,a6
    a68e:	|  |         move.l 28(sp),d1
    a692:	|  |         move.l 24(sp),d2
    a696:	|  |         jsr -312(a6)
    a69a:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    a69e:	|  |         move.l 156(sp),16(sp)
    a6a4:	|  |         movea.l 148(sp),a0
    a6a8:	|  |         move.b 130(a0),d0
    a6ac:	|  |         move.b d0,d0
    a6ae:	|  |         andi.l #255,d0
    a6b4:	|  |         move.l d0,12(sp)
    a6b8:	|  |         move.l 1b5aa <DOSBase>,d0
    a6be:	|  |         movea.l d0,a6
    a6c0:	|  |         move.l 16(sp),d1
    a6c4:	|  |         move.l 12(sp),d2
    a6c8:	|  |         jsr -312(a6)
    a6cc:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    a6d0:	|  |         movea.l 148(sp),a0
    a6d4:	|  |         move.l 114(a0),d0
    a6d8:	|  |         move.l 156(sp),-(sp)
    a6dc:	|  |         move.l d0,-(sp)
    a6de:	|  |         jsr cac8 <saveObjectRef>
    a6e4:	|  |         addq.l #8,sp

		me = me -> next;
    a6e6:	|  |         movea.l 148(sp),a0
    a6ea:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    a6f0:	|  |         addq.l #1,140(sp)
    a6f4:	|  \-------> movea.l 140(sp),a0
    a6f8:	|            cmpa.l 144(sp),a0
    a6fc:	\----------- blt.w a2a0 <savePeople+0x76>
	}
	return TRUE;
    a700:	             moveq #1,d0
}
    a702:	             move.l (sp)+,d2
    a704:	             movea.l (sp)+,a6
    a706:	             lea 144(sp),sp
    a70a:	             rts

0000a70c <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    a70c:	movea.l 4(sp),a0
    a710:	move.l 8(sp),(a0)
}
    a714:	nop
    a716:	rts

0000a718 <setDrawMode>:


void setDrawMode (int h, int ob) {
    a718:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    a71a:	       move.l 12(sp),-(sp)
    a71e:	       jsr 97a6 <findPerson>
    a724:	       addq.l #4,sp
    a726:	       move.l d0,(sp)
	if (! moveMe) return;
    a728:	/----- beq.s a73c <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    a72a:	|      move.l 8(sp),-(sp)
    a72e:	|      move.l 4(sp),-(sp)
    a732:	|      jsr a742 <setMyDrawMode>
    a738:	|      addq.l #8,sp
    a73a:	|  /-- bra.s a73e <setDrawMode+0x26>
	if (! moveMe) return;
    a73c:	\--|-> nop
}
    a73e:	   \-> addq.l #4,sp
    a740:	       rts

0000a742 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    a742:	       moveq #19,d0
    a744:	       cmp.l 8(sp),d0
    a748:	/----- bcs.w ac20 <setMyDrawMode+0x4de>
    a74c:	|      move.l 8(sp),d0
    a750:	|      add.l d0,d0
    a752:	|      movea.l d0,a0
    a754:	|      adda.l #42848,a0
    a75a:	|      move.w (a0),d0
    a75c:	|      jmp (a760 <setMyDrawMode+0x1e>,pc,d0.w)
    a760:	|      .short 0x04c0
    a762:	|      ori.l #6684712,-(a4)
    a768:	|      btst d0,-(a0)
    a76a:	|      bchg d0,(a6)+
    a76c:	|      bclr d0,(a4)+
    a76e:	|      bset d0,(a2)+
    a770:	|      andi.b #84,(a6)
    a774:	|      andi.l #55575312,(a2)
    a77a:	|      .short 0x02d0
    a77c:	|      bclr d1,(a0)
    a77e:	|      .short 0x044a
    a780:	|      .short 0x040c
    a782:	|      movep.l d1,1158(a6)
    a786:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a788:	|      movea.l 4(sp),a0
    a78c:	|      clr.b 128(a0)
    a790:	|      movea.l 4(sp),a0
    a794:	|      move.b 128(a0),d0
    a798:	|      movea.l 4(sp),a0
    a79c:	|      move.b d0,127(a0)
    a7a0:	|      movea.l 4(sp),a0
    a7a4:	|      move.b 127(a0),d0
    a7a8:	|      movea.l 4(sp),a0
    a7ac:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    a7b0:	|      movea.l 4(sp),a0
    a7b4:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    a7b8:	|      movea.l 4(sp),a0
    a7bc:	|      move.b #64,130(a0)
			break;
    a7c2:	|  /-- bra.w ac5a <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a7c6:	|  |   movea.l 4(sp),a0
    a7ca:	|  |   clr.b 128(a0)
    a7ce:	|  |   movea.l 4(sp),a0
    a7d2:	|  |   move.b 128(a0),d0
    a7d6:	|  |   movea.l 4(sp),a0
    a7da:	|  |   move.b d0,127(a0)
    a7de:	|  |   movea.l 4(sp),a0
    a7e2:	|  |   move.b 127(a0),d0
    a7e6:	|  |   movea.l 4(sp),a0
    a7ea:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    a7ee:	|  |   movea.l 4(sp),a0
    a7f2:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    a7f6:	|  |   movea.l 4(sp),a0
    a7fa:	|  |   move.b #-128,130(a0)
			break;
    a800:	|  +-- bra.w ac5a <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a804:	|  |   movea.l 4(sp),a0
    a808:	|  |   clr.b 128(a0)
    a80c:	|  |   movea.l 4(sp),a0
    a810:	|  |   move.b 128(a0),d0
    a814:	|  |   movea.l 4(sp),a0
    a818:	|  |   move.b d0,127(a0)
    a81c:	|  |   movea.l 4(sp),a0
    a820:	|  |   move.b 127(a0),d0
    a824:	|  |   movea.l 4(sp),a0
    a828:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    a82c:	|  |   movea.l 4(sp),a0
    a830:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    a834:	|  |   movea.l 4(sp),a0
    a838:	|  |   move.b #-64,130(a0)
			break;
    a83e:	|  +-- bra.w ac5a <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a842:	|  |   movea.l 4(sp),a0
    a846:	|  |   clr.b 128(a0)
    a84a:	|  |   movea.l 4(sp),a0
    a84e:	|  |   move.b 128(a0),d0
    a852:	|  |   movea.l 4(sp),a0
    a856:	|  |   move.b d0,127(a0)
    a85a:	|  |   movea.l 4(sp),a0
    a85e:	|  |   move.b 127(a0),d0
    a862:	|  |   movea.l 4(sp),a0
    a866:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    a86a:	|  |   movea.l 4(sp),a0
    a86e:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    a872:	|  |   movea.l 4(sp),a0
    a876:	|  |   move.b #-2,130(a0)
			break;
    a87c:	|  +-- bra.w ac5a <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a880:	|  |   movea.l 4(sp),a0
    a884:	|  |   clr.b 128(a0)
    a888:	|  |   movea.l 4(sp),a0
    a88c:	|  |   move.b 128(a0),d0
    a890:	|  |   movea.l 4(sp),a0
    a894:	|  |   move.b d0,127(a0)
    a898:	|  |   movea.l 4(sp),a0
    a89c:	|  |   move.b 127(a0),d0
    a8a0:	|  |   movea.l 4(sp),a0
    a8a4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    a8a8:	|  |   movea.l 4(sp),a0
    a8ac:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    a8b2:	|  |   movea.l 4(sp),a0
    a8b6:	|  |   clr.b 130(a0)
			break;
    a8ba:	|  +-- bra.w ac5a <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a8be:	|  |   movea.l 4(sp),a0
    a8c2:	|  |   clr.b 128(a0)
    a8c6:	|  |   movea.l 4(sp),a0
    a8ca:	|  |   move.b 128(a0),d0
    a8ce:	|  |   movea.l 4(sp),a0
    a8d2:	|  |   move.b d0,127(a0)
    a8d6:	|  |   movea.l 4(sp),a0
    a8da:	|  |   move.b 127(a0),d0
    a8de:	|  |   movea.l 4(sp),a0
    a8e2:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    a8e6:	|  |   movea.l 4(sp),a0
    a8ea:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    a8f0:	|  |   movea.l 4(sp),a0
    a8f4:	|  |   clr.b 130(a0)
			break;
    a8f8:	|  +-- bra.w ac5a <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a8fc:	|  |   movea.l 4(sp),a0
    a900:	|  |   clr.b 128(a0)
    a904:	|  |   movea.l 4(sp),a0
    a908:	|  |   move.b 128(a0),d0
    a90c:	|  |   movea.l 4(sp),a0
    a910:	|  |   move.b d0,127(a0)
    a914:	|  |   movea.l 4(sp),a0
    a918:	|  |   move.b 127(a0),d0
    a91c:	|  |   movea.l 4(sp),a0
    a920:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    a924:	|  |   movea.l 4(sp),a0
    a928:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    a92e:	|  |   movea.l 4(sp),a0
    a932:	|  |   clr.b 130(a0)
			break;
    a936:	|  +-- bra.w ac5a <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a93a:	|  |   movea.l 4(sp),a0
    a93e:	|  |   clr.b 128(a0)
    a942:	|  |   movea.l 4(sp),a0
    a946:	|  |   move.b 128(a0),d0
    a94a:	|  |   movea.l 4(sp),a0
    a94e:	|  |   move.b d0,127(a0)
    a952:	|  |   movea.l 4(sp),a0
    a956:	|  |   move.b 127(a0),d0
    a95a:	|  |   movea.l 4(sp),a0
    a95e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    a962:	|  |   movea.l 4(sp),a0
    a966:	|  |   st 129(a0)
			moveMe->transparency = 0;
    a96a:	|  |   movea.l 4(sp),a0
    a96e:	|  |   clr.b 130(a0)
			break;
    a972:	|  +-- bra.w ac5a <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a976:	|  |   movea.l 4(sp),a0
    a97a:	|  |   clr.b 128(a0)
    a97e:	|  |   movea.l 4(sp),a0
    a982:	|  |   move.b 128(a0),d0
    a986:	|  |   movea.l 4(sp),a0
    a98a:	|  |   move.b d0,127(a0)
    a98e:	|  |   movea.l 4(sp),a0
    a992:	|  |   move.b 127(a0),d0
    a996:	|  |   movea.l 4(sp),a0
    a99a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    a99e:	|  |   movea.l 4(sp),a0
    a9a2:	|  |   st 129(a0)
			moveMe->transparency = 64;
    a9a6:	|  |   movea.l 4(sp),a0
    a9aa:	|  |   move.b #64,130(a0)
			break;
    a9b0:	|  +-- bra.w ac5a <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a9b4:	|  |   movea.l 4(sp),a0
    a9b8:	|  |   clr.b 128(a0)
    a9bc:	|  |   movea.l 4(sp),a0
    a9c0:	|  |   move.b 128(a0),d0
    a9c4:	|  |   movea.l 4(sp),a0
    a9c8:	|  |   move.b d0,127(a0)
    a9cc:	|  |   movea.l 4(sp),a0
    a9d0:	|  |   move.b 127(a0),d0
    a9d4:	|  |   movea.l 4(sp),a0
    a9d8:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    a9dc:	|  |   movea.l 4(sp),a0
    a9e0:	|  |   st 129(a0)
			moveMe->transparency = 128;
    a9e4:	|  |   movea.l 4(sp),a0
    a9e8:	|  |   move.b #-128,130(a0)
			break;
    a9ee:	|  +-- bra.w ac5a <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a9f2:	|  |   movea.l 4(sp),a0
    a9f6:	|  |   clr.b 128(a0)
    a9fa:	|  |   movea.l 4(sp),a0
    a9fe:	|  |   move.b 128(a0),d0
    aa02:	|  |   movea.l 4(sp),a0
    aa06:	|  |   move.b d0,127(a0)
    aa0a:	|  |   movea.l 4(sp),a0
    aa0e:	|  |   move.b 127(a0),d0
    aa12:	|  |   movea.l 4(sp),a0
    aa16:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    aa1a:	|  |   movea.l 4(sp),a0
    aa1e:	|  |   st 129(a0)
			moveMe->transparency = 192;
    aa22:	|  |   movea.l 4(sp),a0
    aa26:	|  |   move.b #-64,130(a0)
			break;
    aa2c:	|  +-- bra.w ac5a <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    aa30:	|  |   movea.l 4(sp),a0
    aa34:	|  |   move.b #-128,128(a0)
    aa3a:	|  |   movea.l 4(sp),a0
    aa3e:	|  |   move.b 128(a0),d0
    aa42:	|  |   movea.l 4(sp),a0
    aa46:	|  |   move.b d0,127(a0)
    aa4a:	|  |   movea.l 4(sp),a0
    aa4e:	|  |   move.b 127(a0),d0
    aa52:	|  |   movea.l 4(sp),a0
    aa56:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    aa5a:	|  |   movea.l 4(sp),a0
    aa5e:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    aa64:	|  |   movea.l 4(sp),a0
    aa68:	|  |   clr.b 130(a0)
			break;
    aa6c:	|  +-- bra.w ac5a <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    aa70:	|  |   movea.l 4(sp),a0
    aa74:	|  |   move.b #-128,128(a0)
    aa7a:	|  |   movea.l 4(sp),a0
    aa7e:	|  |   move.b 128(a0),d0
    aa82:	|  |   movea.l 4(sp),a0
    aa86:	|  |   move.b d0,127(a0)
    aa8a:	|  |   movea.l 4(sp),a0
    aa8e:	|  |   move.b 127(a0),d0
    aa92:	|  |   movea.l 4(sp),a0
    aa96:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    aa9a:	|  |   movea.l 4(sp),a0
    aa9e:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    aaa4:	|  |   movea.l 4(sp),a0
    aaa8:	|  |   clr.b 130(a0)
			break;
    aaac:	|  +-- bra.w ac5a <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    aab0:	|  |   movea.l 4(sp),a0
    aab4:	|  |   move.b #-128,128(a0)
    aaba:	|  |   movea.l 4(sp),a0
    aabe:	|  |   move.b 128(a0),d0
    aac2:	|  |   movea.l 4(sp),a0
    aac6:	|  |   move.b d0,127(a0)
    aaca:	|  |   movea.l 4(sp),a0
    aace:	|  |   move.b 127(a0),d0
    aad2:	|  |   movea.l 4(sp),a0
    aad6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    aada:	|  |   movea.l 4(sp),a0
    aade:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    aae4:	|  |   movea.l 4(sp),a0
    aae8:	|  |   clr.b 130(a0)
			break;
    aaec:	|  +-- bra.w ac5a <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    aaf0:	|  |   movea.l 4(sp),a0
    aaf4:	|  |   move.b #-128,128(a0)
    aafa:	|  |   movea.l 4(sp),a0
    aafe:	|  |   move.b 128(a0),d0
    ab02:	|  |   movea.l 4(sp),a0
    ab06:	|  |   move.b d0,127(a0)
    ab0a:	|  |   movea.l 4(sp),a0
    ab0e:	|  |   move.b 127(a0),d0
    ab12:	|  |   movea.l 4(sp),a0
    ab16:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    ab1a:	|  |   movea.l 4(sp),a0
    ab1e:	|  |   st 129(a0)
			moveMe->transparency = 0;
    ab22:	|  |   movea.l 4(sp),a0
    ab26:	|  |   clr.b 130(a0)
			break;
    ab2a:	|  +-- bra.w ac5a <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    ab2e:	|  |   movea.l 4(sp),a0
    ab32:	|  |   st 128(a0)
    ab36:	|  |   movea.l 4(sp),a0
    ab3a:	|  |   move.b 128(a0),d0
    ab3e:	|  |   movea.l 4(sp),a0
    ab42:	|  |   move.b d0,127(a0)
    ab46:	|  |   movea.l 4(sp),a0
    ab4a:	|  |   move.b 127(a0),d0
    ab4e:	|  |   movea.l 4(sp),a0
    ab52:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    ab56:	|  |   movea.l 4(sp),a0
    ab5a:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    ab60:	|  |   movea.l 4(sp),a0
    ab64:	|  |   clr.b 130(a0)
			break;
    ab68:	|  +-- bra.w ac5a <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    ab6c:	|  |   movea.l 4(sp),a0
    ab70:	|  |   st 128(a0)
    ab74:	|  |   movea.l 4(sp),a0
    ab78:	|  |   move.b 128(a0),d0
    ab7c:	|  |   movea.l 4(sp),a0
    ab80:	|  |   move.b d0,127(a0)
    ab84:	|  |   movea.l 4(sp),a0
    ab88:	|  |   move.b 127(a0),d0
    ab8c:	|  |   movea.l 4(sp),a0
    ab90:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    ab94:	|  |   movea.l 4(sp),a0
    ab98:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    ab9e:	|  |   movea.l 4(sp),a0
    aba2:	|  |   clr.b 130(a0)
			break;
    aba6:	|  +-- bra.w ac5a <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    abaa:	|  |   movea.l 4(sp),a0
    abae:	|  |   st 128(a0)
    abb2:	|  |   movea.l 4(sp),a0
    abb6:	|  |   move.b 128(a0),d0
    abba:	|  |   movea.l 4(sp),a0
    abbe:	|  |   move.b d0,127(a0)
    abc2:	|  |   movea.l 4(sp),a0
    abc6:	|  |   move.b 127(a0),d0
    abca:	|  |   movea.l 4(sp),a0
    abce:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    abd2:	|  |   movea.l 4(sp),a0
    abd6:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    abdc:	|  |   movea.l 4(sp),a0
    abe0:	|  |   clr.b 130(a0)
			break;
    abe4:	|  +-- bra.s ac5a <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    abe6:	|  |   movea.l 4(sp),a0
    abea:	|  |   st 128(a0)
    abee:	|  |   movea.l 4(sp),a0
    abf2:	|  |   move.b 128(a0),d0
    abf6:	|  |   movea.l 4(sp),a0
    abfa:	|  |   move.b d0,127(a0)
    abfe:	|  |   movea.l 4(sp),a0
    ac02:	|  |   move.b 127(a0),d0
    ac06:	|  |   movea.l 4(sp),a0
    ac0a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    ac0e:	|  |   movea.l 4(sp),a0
    ac12:	|  |   st 129(a0)
			moveMe->transparency = 0;
    ac16:	|  |   movea.l 4(sp),a0
    ac1a:	|  |   clr.b 130(a0)
			break;
    ac1e:	|  +-- bra.s ac5a <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    ac20:	\--|-> movea.l 4(sp),a0
    ac24:	   |   clr.b 128(a0)
    ac28:	   |   movea.l 4(sp),a0
    ac2c:	   |   move.b 128(a0),d0
    ac30:	   |   movea.l 4(sp),a0
    ac34:	   |   move.b d0,127(a0)
    ac38:	   |   movea.l 4(sp),a0
    ac3c:	   |   move.b 127(a0),d0
    ac40:	   |   movea.l 4(sp),a0
    ac44:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    ac48:	   |   movea.l 4(sp),a0
    ac4c:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    ac50:	   |   movea.l 4(sp),a0
    ac54:	   |   clr.b 130(a0)
			break;
    ac58:	   |   nop
	}
}
    ac5a:	   \-> nop
    ac5c:	       rts

0000ac5e <shufflePeople>:

void shufflePeople () {
    ac5e:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    ac62:	             move.l #112218,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    ac6a:	             move.l 1b65a <allPeople>,d0
    ac70:	/----------- beq.w ad46 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    ac74:	|     /----- bra.w ad36 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    ac78:	|  /--|----> movea.l 16(sp),a0
    ac7c:	|  |  |      movea.l (a0),a0
    ac7e:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    ac84:	|  |  |      movea.l 16(sp),a0
    ac88:	|  |  |      movea.l (a0),a0
    ac8a:	|  |  |      move.l 118(a0),d0
    ac8e:	|  |  |      moveq #1,d1
    ac90:	|  |  |      and.l d1,d0
    ac92:	|  |  |  /-- beq.s acaa <shufflePeople+0x4c>
    ac94:	|  |  |  |   move.l #1148846080,-(sp)
    ac9a:	|  |  |  |   move.l 16(sp),-(sp)
    ac9e:	|  |  |  |   jsr 16030 <__addsf3>
    aca4:	|  |  |  |   addq.l #8,sp
    aca6:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    acaa:	|  |  |  \-> movea.l 16(sp),a0
    acae:	|  |  |      movea.l (a0),a0
    acb0:	|  |  |      movea.l 36(a0),a0
    acb4:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    acba:	|  |  |      movea.l 16(sp),a0
    acbe:	|  |  |      movea.l (a0),a0
    acc0:	|  |  |      movea.l 36(a0),a0
    acc4:	|  |  |      move.l 118(a0),d0
    acc8:	|  |  |      moveq #1,d1
    acca:	|  |  |      and.l d1,d0
    accc:	|  |  |  /-- beq.s ace4 <shufflePeople+0x86>
    acce:	|  |  |  |   move.l #1148846080,-(sp)
    acd4:	|  |  |  |   move.l 12(sp),-(sp)
    acd8:	|  |  |  |   jsr 16030 <__addsf3>
    acde:	|  |  |  |   addq.l #8,sp
    ace0:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    ace4:	|  |  |  \-> move.l 8(sp),-(sp)
    ace8:	|  |  |      move.l 16(sp),-(sp)
    acec:	|  |  |      jsr 163ea <__gtsf2>
    acf2:	|  |  |      addq.l #8,sp
    acf4:	|  |  |      tst.l d0
    acf6:	|  |  |  /-- ble.s ad28 <shufflePeople+0xca>
			A = (*thisReference);
    acf8:	|  |  |  |   movea.l 16(sp),a0
    acfc:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    ad00:	|  |  |  |   movea.l 16(sp),a0
    ad04:	|  |  |  |   movea.l (a0),a0
    ad06:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    ad0a:	|  |  |  |   movea.l (sp),a0
    ad0c:	|  |  |  |   move.l 36(a0),d0
    ad10:	|  |  |  |   movea.l 4(sp),a0
    ad14:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    ad18:	|  |  |  |   movea.l (sp),a0
    ad1a:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    ad20:	|  |  |  |   movea.l 16(sp),a0
    ad24:	|  |  |  |   move.l (sp),(a0)
    ad26:	|  |  +--|-- bra.s ad36 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    ad28:	|  |  |  \-> movea.l 16(sp),a0
    ad2c:	|  |  |      move.l (a0),d0
    ad2e:	|  |  |      moveq #36,d1
    ad30:	|  |  |      add.l d0,d1
    ad32:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    ad36:	|  |  \----> movea.l 16(sp),a0
    ad3a:	|  |         movea.l (a0),a0
    ad3c:	|  |         move.l 36(a0),d0
    ad40:	|  \-------- bne.w ac78 <shufflePeople+0x1a>
    ad44:	|        /-- bra.s ad48 <shufflePeople+0xea>
	if (!allPeople) return;
    ad46:	\--------|-> nop
		}
	}
}
    ad48:	         \-> lea 20(sp),sp
    ad4c:	             rts

0000ad4e <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    ad4e:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    ad50:	       tst.l 8(sp)
    ad54:	   /-- bgt.s ad5a <setCharacterWalkSpeed+0xc>
    ad56:	   |   clr.w d0
    ad58:	/--|-- bra.s ad78 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    ad5a:	|  \-> move.l 12(sp),-(sp)
    ad5e:	|      jsr 97a6 <findPerson>
    ad64:	|      addq.l #4,sp
    ad66:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    ad68:	|  /-- bne.s ad6e <setCharacterWalkSpeed+0x20>
    ad6a:	|  |   clr.w d0
    ad6c:	+--|-- bra.s ad78 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    ad6e:	|  \-> movea.l (sp),a0
    ad70:	|      move.l 8(sp),28(a0)
	return TRUE;
    ad76:	|      moveq #1,d0
}
    ad78:	\----> addq.l #4,sp
    ad7a:	       rts

0000ad7c <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    ad7c:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    ad7e:	       move.l 8(sp),-(sp)
    ad82:	       jsr 97a6 <findPerson>
    ad88:	       addq.l #4,sp
    ad8a:	       move.l d0,(sp)
    if (thisPerson) {
    ad8c:	/----- beq.s adac <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    ad8e:	|      movea.l (sp),a0
    ad90:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    ad96:	|      moveq #2,d0
    ad98:	|      and.l 12(sp),d0
    ad9c:	|  /-- beq.s ada8 <setPersonExtra+0x2c>
    ad9e:	|  |   movea.l (sp),a0
    ada0:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    ada8:	|  \-> moveq #1,d0
    adaa:	|  /-- bra.s adae <setPersonExtra+0x32>
    }
    return FALSE;
    adac:	\--|-> clr.w d0
}
    adae:	   \-> addq.l #4,sp
    adb0:	       rts

0000adb2 <setScale>:


void setScale (short int h, short int d) {
    adb2:	subq.l #4,sp
    adb4:	move.l 8(sp),d1
    adb8:	move.l 12(sp),d0
    adbc:	move.w d1,d1
    adbe:	move.w d1,2(sp)
    adc2:	move.w d0,d0
    adc4:	move.w d0,(sp)
	scaleHorizon = h;
    adc6:	move.w 2(sp),1af36 <scaleHorizon>
	scaleDivide = d;
    adce:	move.w (sp),1af38 <scaleDivide>
}
    add4:	nop
    add6:	addq.l #4,sp
    add8:	rts

0000adda <setShown>:

void setShown (BOOL h, int ob) {
    adda:	    subq.l #8,sp
    addc:	    move.l 12(sp),d0
    ade0:	    move.w d0,d0
    ade2:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    ade6:	    move.l 16(sp),-(sp)
    adea:	    jsr 97a6 <findPerson>
    adf0:	    addq.l #4,sp
    adf2:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    adf6:	/-- beq.s ae02 <setShown+0x28>
    adf8:	|   movea.l 4(sp),a0
    adfc:	|   move.w 2(sp),104(a0)
}
    ae02:	\-> nop
    ae04:	    addq.l #8,sp
    ae06:	    rts

0000ae08 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    ae08:	       subq.l #8,sp
    ae0a:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    ae0c:	       movea.l 16(sp),a0
    ae10:	       move.l 92(a0),d0
    ae14:	       move.l d0,d1
    ae16:	       addi.l #360,d1
    ae1c:	       movea.l 16(sp),a0
    ae20:	       move.l 96(a0),d0
    ae24:	       move.l d1,d2
    ae26:	       sub.l d0,d2
    ae28:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    ae2c:	       movea.l 16(sp),a0
    ae30:	       move.l 122(a0),d0
    ae34:	   /-- beq.s ae40 <spinStep+0x38>
    ae36:	   |   movea.l 16(sp),a0
    ae3a:	   |   move.l 122(a0),d0
    ae3e:	/--|-- bra.s ae5a <spinStep+0x52>
    ae40:	|  \-> movea.l 16(sp),a0
    ae44:	|      movea.l 80(a0),a0
    ae48:	|      move.l 4(a0),d0
    ae4c:	|      move.l d0,-(sp)
    ae4e:	|      pea 168 <decodeFilename+0x50>
    ae52:	|      jsr 1687e <__divsi3>
    ae58:	|      addq.l #8,sp
    ae5a:	\----> move.l d0,4(sp)
	while (diff > 180) {
    ae5e:	   /-- bra.s ae68 <spinStep+0x60>
		diff -= 360;
    ae60:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    ae68:	|  \-> cmpi.l #180,8(sp)
    ae70:	\----- bgt.s ae60 <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    ae72:	       move.l 8(sp),d0
    ae76:	       cmp.l 4(sp),d0
    ae7a:	   /-- blt.s ae98 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    ae7c:	   |   movea.l 16(sp),a0
    ae80:	   |   move.l 92(a0),d0
    ae84:	   |   sub.l 4(sp),d0
    ae88:	   |   move.l d0,-(sp)
    ae8a:	   |   move.l 20(sp),-(sp)
    ae8e:	   |   jsr af78 <turnMeAngle>
    ae94:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    ae96:	/--|-- bra.s aede <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    ae98:	|  \-> move.l 4(sp),d0
    ae9c:	|      neg.l d0
    ae9e:	|      cmp.l 8(sp),d0
    aea2:	|  /-- blt.s aec0 <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    aea4:	|  |   movea.l 16(sp),a0
    aea8:	|  |   move.l 92(a0),d0
    aeac:	|  |   add.l 4(sp),d0
    aeb0:	|  |   move.l d0,-(sp)
    aeb2:	|  |   move.l 20(sp),-(sp)
    aeb6:	|  |   jsr af78 <turnMeAngle>
    aebc:	|  |   addq.l #8,sp
}
    aebe:	+--|-- bra.s aede <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    aec0:	|  \-> movea.l 16(sp),a0
    aec4:	|      move.l 96(a0),d0
    aec8:	|      move.l d0,-(sp)
    aeca:	|      move.l 20(sp),-(sp)
    aece:	|      jsr af78 <turnMeAngle>
    aed4:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    aed6:	|      movea.l 16(sp),a0
    aeda:	|      clr.w 66(a0)
}
    aede:	\----> nop
    aee0:	       move.l (sp)+,d2
    aee2:	       addq.l #8,sp
    aee4:	       rts

0000aee6 <stopPerson>:


BOOL stopPerson (int o) {
    aee6:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    aee8:	       move.l 8(sp),-(sp)
    aeec:	       jsr 97a6 <findPerson>
    aef2:	       addq.l #4,sp
    aef4:	       move.l d0,(sp)
    if (moveMe)
    aef6:	/----- beq.s af34 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    aef8:	|      movea.l (sp),a0
    aefa:	|      move.l 68(a0),d0
    aefe:	+----- beq.s af34 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    af00:	|      movea.l (sp),a0
    af02:	|      move.l 68(a0),d0
    af06:	|      move.l d0,-(sp)
    af08:	|      jsr 3766 <abortFunction>
    af0e:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    af10:	|      movea.l (sp),a0
    af12:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    af16:	|      movea.l (sp),a0
    af18:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    af1c:	|      movea.l (sp),a0
    af1e:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    af22:	|      clr.l -(sp)
    af24:	|      move.l 4(sp),-(sp)
    af28:	|      jsr 71b0 <setFrames>
    af2e:	|      addq.l #8,sp
            return TRUE;
    af30:	|      moveq #1,d0
    af32:	|  /-- bra.s af36 <stopPerson+0x50>
        }
    return FALSE;
    af34:	\--|-> clr.w d0
}
    af36:	   \-> addq.l #4,sp
    af38:	       rts

0000af3a <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    af3a:	       subq.l #8,sp
	int total = 0;
    af3c:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    af40:	       clr.l (sp)
    af42:	   /-- bra.s af64 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    af44:	/--|-> movea.l 12(sp),a0
    af48:	|  |   movea.l 4(a0),a0
    af4c:	|  |   move.l (sp),d1
    af4e:	|  |   move.l d1,d0
    af50:	|  |   add.l d0,d0
    af52:	|  |   add.l d1,d0
    af54:	|  |   add.l d0,d0
    af56:	|  |   add.l d0,d0
    af58:	|  |   adda.l d0,a0
    af5a:	|  |   move.l 4(a0),d0
    af5e:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    af62:	|  |   addq.l #1,(sp)
    af64:	|  \-> movea.l 12(sp),a0
    af68:	|      move.l 8(a0),d0
    af6c:	|      cmp.l (sp),d0
    af6e:	\----- bgt.s af44 <timeForAnim+0xa>
	}
	return total;
    af70:	       move.l 4(sp),d0
}
    af74:	       addq.l #8,sp
    af76:	       rts

0000af78 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    af78:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    af7a:	       movea.l 8(sp),a0
    af7e:	       movea.l 80(a0),a0
    af82:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    af86:	       movea.l 8(sp),a0
    af8a:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    af90:	       move.l (sp),-(sp)
    af92:	       pea b4 <_start+0xb4>
    af96:	       jsr 1687e <__divsi3>
    af9c:	       addq.l #8,sp
    af9e:	       move.l d0,d1
    afa0:	       addi.l #180,d1
    afa6:	       movea.l 8(sp),a0
    afaa:	       move.l 100(a0),d0
    afae:	       add.l d1,d0
    afb0:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    afb4:	   /-- bra.s afbe <turnMeAngle+0x46>
    afb6:	/--|-> addi.l #-360,12(sp)
    afbe:	|  \-> cmpi.l #359,12(sp)
    afc6:	\----- bgt.s afb6 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    afc8:	       move.l (sp),-(sp)
    afca:	       move.l 16(sp),-(sp)
    afce:	       jsr 16800 <__mulsi3>
    afd4:	       addq.l #8,sp
    afd6:	       pea 168 <decodeFilename+0x50>
    afda:	       move.l d0,-(sp)
    afdc:	       jsr 1687e <__divsi3>
    afe2:	       addq.l #8,sp
    afe4:	       movea.l 8(sp),a0
    afe8:	       move.l d0,106(a0)
}
    afec:	       nop
    afee:	       addq.l #4,sp
    aff0:	       rts

0000aff2 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    aff2:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    aff4:	          move.l 8(sp),-(sp)
    aff8:	          jsr 97a6 <findPerson>
    affe:	          addq.l #4,sp
    b000:	          move.l d0,(sp)
    if (thisPerson) {
    b002:	/-------- beq.s b062 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    b004:	|         movea.l (sp),a0
    b006:	|         move.l 68(a0),d0
    b00a:	|     /-- beq.s b01c <turnPersonToFace+0x2a>
    b00c:	|     |   movea.l (sp),a0
    b00e:	|     |   move.l 68(a0),d0
    b012:	|     |   move.l d0,-(sp)
    b014:	|     |   jsr 3766 <abortFunction>
    b01a:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    b01c:	|     \-> movea.l (sp),a0
    b01e:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    b022:	|         movea.l (sp),a0
    b024:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    b028:	|         movea.l (sp),a0
    b02a:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    b02e:	|         move.l 12(sp),-(sp)
    b032:	|         move.l 4(sp),-(sp)
    b036:	|         jsr af78 <turnMeAngle>
    b03c:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    b03e:	|         movea.l 1b5fe <speech>,a0
    b044:	|         move.l (a0),d0
    b046:	|         cmp.l (sp),d0
    b048:	|  /----- bne.s b04e <turnPersonToFace+0x5c>
    b04a:	|  |      moveq #2,d0
    b04c:	|  |  /-- bra.s b050 <turnPersonToFace+0x5e>
    b04e:	|  \--|-> moveq #0,d0
    b050:	|     \-> move.l d0,-(sp)
    b052:	|         move.l 4(sp),-(sp)
    b056:	|         jsr 71b0 <setFrames>
    b05c:	|         addq.l #8,sp
        return TRUE;
    b05e:	|         moveq #1,d0
    b060:	|     /-- bra.s b064 <turnPersonToFace+0x72>
    }
    return FALSE;
    b062:	\-----|-> clr.w d0
}
    b064:	      \-> addq.l #4,sp
    b066:	          rts

0000b068 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    b068:	                lea -20(sp),sp
    b06c:	                move.l d3,-(sp)
    b06e:	                move.l d2,-(sp)
    b070:	                move.l 36(sp),d0
    b074:	                move.w d0,d0
    b076:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    b07a:	                cmpi.w #-1,10(sp)
    b080:	/-------------- bne.s b088 <walkMe+0x20>
    b082:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    b088:	>-------------> movea.l 32(sp),a0
    b08c:	|               move.l 48(a0),d0
    b090:	|               move.l d0,-(sp)
    b092:	|               jsr 1627e <__floatsisf>
    b098:	|               addq.l #4,sp
    b09a:	|               move.l d0,d1
    b09c:	|               movea.l 32(sp),a0
    b0a0:	|               move.l (a0),d0
    b0a2:	|               move.l d0,-(sp)
    b0a4:	|               move.l d1,-(sp)
    b0a6:	|               jsr 16572 <__subsf3>
    b0ac:	|               addq.l #8,sp
    b0ae:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    b0b2:	|               movea.l 32(sp),a0
    b0b6:	|               move.l 52(a0),d0
    b0ba:	|               move.l d0,-(sp)
    b0bc:	|               jsr 1627e <__floatsisf>
    b0c2:	|               addq.l #4,sp
    b0c4:	|               move.l d0,d1
    b0c6:	|               movea.l 32(sp),a0
    b0ca:	|               move.l 4(a0),d0
    b0ce:	|               move.l d0,-(sp)
    b0d0:	|               move.l d1,-(sp)
    b0d2:	|               jsr 16572 <__subsf3>
    b0d8:	|               addq.l #8,sp
    b0da:	|               move.l d0,-(sp)
    b0dc:	|               move.l d0,-(sp)
    b0de:	|               jsr 16030 <__addsf3>
    b0e4:	|               addq.l #8,sp
    b0e6:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    b0ea:	|               movea.l 32(sp),a0
    b0ee:	|               move.l 32(a0),d2
    b0f2:	|               movea.l 32(sp),a0
    b0f6:	|               move.l 28(a0),d0
    b0fa:	|               move.l d0,-(sp)
    b0fc:	|               jsr 1627e <__floatsisf>
    b102:	|               addq.l #4,sp
    b104:	|               move.l d0,-(sp)
    b106:	|               move.l d2,-(sp)
    b108:	|               jsr 16330 <__mulsf3>
    b10e:	|               addq.l #8,sp
    b110:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    b114:	|               move.l 24(sp),-(sp)
    b118:	|               jsr 16196 <__extendsfdf2>
    b11e:	|               addq.l #4,sp
    b120:	|               move.l #-1717986918,-(sp)
    b126:	|               move.l #1070176665,-(sp)
    b12c:	|               move.l d1,-(sp)
    b12e:	|               move.l d0,-(sp)
    b130:	|               jsr 16456 <__ltdf2>
    b136:	|               lea 16(sp),sp
    b13a:	|               tst.l d0
    b13c:	|           /-- bge.s b146 <walkMe+0xde>
    b13e:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    b146:	|           \-> move.l 20(sp),-(sp)
    b14a:	|               jsr 16216 <__fixsfsi>
    b150:	|               addq.l #4,sp
    b152:	|               move.l d0,-(sp)
    b154:	|               jsr 8396 <TF_abs>
    b15a:	|               addq.l #4,sp
    b15c:	|               move.l d0,d2
    b15e:	|               move.l 16(sp),-(sp)
    b162:	|               jsr 16216 <__fixsfsi>
    b168:	|               addq.l #4,sp
    b16a:	|               move.l d0,-(sp)
    b16c:	|               jsr 8396 <TF_abs>
    b172:	|               addq.l #4,sp
    b174:	|               cmp.l d2,d0
    b176:	|        /----- bgt.s b19a <walkMe+0x132>
    b178:	|        |      move.l 20(sp),-(sp)
    b17c:	|        |      jsr 16216 <__fixsfsi>
    b182:	|        |      addq.l #4,sp
    b184:	|        |      move.l d0,-(sp)
    b186:	|        |      jsr 8396 <TF_abs>
    b18c:	|        |      addq.l #4,sp
    b18e:	|        |      move.l d0,-(sp)
    b190:	|        |      jsr 1627e <__floatsisf>
    b196:	|        |      addq.l #4,sp
    b198:	|        |  /-- bra.s b1ba <walkMe+0x152>
    b19a:	|        \--|-> move.l 16(sp),-(sp)
    b19e:	|           |   jsr 16216 <__fixsfsi>
    b1a4:	|           |   addq.l #4,sp
    b1a6:	|           |   move.l d0,-(sp)
    b1a8:	|           |   jsr 8396 <TF_abs>
    b1ae:	|           |   addq.l #4,sp
    b1b0:	|           |   move.l d0,-(sp)
    b1b2:	|           |   jsr 1627e <__floatsisf>
    b1b8:	|           |   addq.l #4,sp
    b1ba:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    b1be:	|               move.l 12(sp),-(sp)
    b1c2:	|               jsr 16216 <__fixsfsi>
    b1c8:	|               addq.l #4,sp
    b1ca:	|               move.l d0,-(sp)
    b1cc:	|               jsr 8396 <TF_abs>
    b1d2:	|               addq.l #4,sp
    b1d4:	|               move.l d0,-(sp)
    b1d6:	|               jsr 1627e <__floatsisf>
    b1dc:	|               addq.l #4,sp
    b1de:	|               move.l d0,-(sp)
    b1e0:	|               move.l 28(sp),-(sp)
    b1e4:	|               jsr 164a4 <__ltsf2>
    b1ea:	|               addq.l #8,sp
    b1ec:	|               tst.l d0
    b1ee:	|        /----- bge.w b2a0 <walkMe+0x238>
			if (thisPerson->spinning) {
    b1f2:	|        |      movea.l 32(sp),a0
    b1f6:	|        |      move.w 66(a0),d0
    b1fa:	|        |  /-- beq.s b218 <walkMe+0x1b0>
				spinStep(thisPerson);
    b1fc:	|        |  |   move.l 32(sp),-(sp)
    b200:	|        |  |   jsr ae08 <spinStep>
    b206:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    b208:	|        |  |   pea 1 <_start+0x1>
    b20c:	|        |  |   move.l 36(sp),-(sp)
    b210:	|        |  |   jsr 71b0 <setFrames>
    b216:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    b218:	|        |  \-> move.l 24(sp),-(sp)
    b21c:	|        |      move.l 16(sp),-(sp)
    b220:	|        |      jsr 1612a <__divsf3>
    b226:	|        |      addq.l #8,sp
    b228:	|        |      move.l d0,24(sp)
			if (move)
    b22c:	|        |      tst.w 10(sp)
    b230:	|        |  /-- beq.s b29a <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    b232:	|        |  |   movea.l 32(sp),a0
    b236:	|        |  |   move.l 4(a0),d2
    b23a:	|        |  |   move.l 24(sp),d0
    b23e:	|        |  |   move.l d0,-(sp)
    b240:	|        |  |   move.l d0,-(sp)
    b242:	|        |  |   jsr 16030 <__addsf3>
    b248:	|        |  |   addq.l #8,sp
    b24a:	|        |  |   move.l d0,-(sp)
    b24c:	|        |  |   move.l 20(sp),-(sp)
    b250:	|        |  |   jsr 1612a <__divsf3>
    b256:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    b258:	|        |  |   move.l d0,-(sp)
    b25a:	|        |  |   move.l d2,-(sp)
    b25c:	|        |  |   jsr 16030 <__addsf3>
    b262:	|        |  |   addq.l #8,sp
    b264:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    b266:	|        |  |   movea.l 32(sp),a0
    b26a:	|        |  |   move.l (a0),d3
    b26c:	|        |  |   move.l 24(sp),-(sp)
    b270:	|        |  |   move.l 24(sp),-(sp)
    b274:	|        |  |   jsr 1612a <__divsf3>
    b27a:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    b27c:	|        |  |   move.l d0,-(sp)
    b27e:	|        |  |   move.l d3,-(sp)
    b280:	|        |  |   jsr 16030 <__addsf3>
    b286:	|        |  |   addq.l #8,sp
    b288:	|        |  |   move.l d2,-(sp)
    b28a:	|        |  |   move.l d0,-(sp)
    b28c:	|        |  |   move.l 40(sp),-(sp)
    b290:	|        |  |   jsr 9eee <moveAndScale>
    b296:	|        |  |   lea 12(sp),sp
			return TRUE;
    b29a:	|        |  \-> moveq #1,d0
    b29c:	|  /-----|----- bra.w b34e <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    b2a0:	|  |     \----> movea.l 32(sp),a0
    b2a4:	|  |            move.l 56(a0),d0
    b2a8:	|  |            moveq #-1,d1
    b2aa:	|  |            cmp.l d0,d1
    b2ac:	|  |        /-- bne.s b2e4 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    b2ae:	|  |        |   movea.l 32(sp),a0
    b2b2:	|  |        |   move.l 110(a0),d0
    b2b6:	|  |        |   moveq #-1,d1
    b2b8:	|  |        |   cmp.l d0,d1
    b2ba:	|  |  /-----|-- beq.s b2f8 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    b2bc:	|  |  |     |   movea.l 32(sp),a0
    b2c0:	|  |  |     |   move.l 110(a0),d0
    b2c4:	|  |  |     |   movea.l 32(sp),a0
    b2c8:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    b2cc:	|  |  |     |   movea.l 32(sp),a0
    b2d0:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    b2d6:	|  |  |     |   move.l 32(sp),-(sp)
    b2da:	|  |  |     |   jsr ae08 <spinStep>
    b2e0:	|  |  |     |   addq.l #4,sp
			}
			break;
    b2e2:	|  |  +-----|-- bra.s b2f8 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    b2e4:	|  |  |     \-> move.l 32(sp),-(sp)
    b2e8:	|  |  |         jsr 8b08 <doBorderStuff>
    b2ee:	|  |  |         addq.l #4,sp
    b2f0:	|  |  |         tst.w d0
    b2f2:	|  |  |  /----- beq.s b2fc <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    b2f4:	\--|--|--|----- bra.w b088 <walkMe+0x20>
			break;
    b2f8:	   |  \--|----> nop
    b2fa:	   |     |  /-- bra.s b2fe <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    b2fc:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    b2fe:	   |        \-> movea.l 32(sp),a0
    b302:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    b306:	   |            clr.l -(sp)
    b308:	   |            move.l 36(sp),-(sp)
    b30c:	   |            jsr 71b0 <setFrames>
    b312:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    b314:	   |            movea.l 32(sp),a0
    b318:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    b31c:	   |            move.l d0,-(sp)
    b31e:	   |            jsr 1627e <__floatsisf>
    b324:	   |            addq.l #4,sp
    b326:	   |            move.l d0,d2
				 thisPerson->walkToX,
    b328:	   |            movea.l 32(sp),a0
    b32c:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    b330:	   |            move.l d0,-(sp)
    b332:	   |            jsr 1627e <__floatsisf>
    b338:	   |            addq.l #4,sp
    b33a:	   |            move.l d2,-(sp)
    b33c:	   |            move.l d0,-(sp)
    b33e:	   |            move.l 40(sp),-(sp)
    b342:	   |            jsr 9eee <moveAndScale>
    b348:	   |            lea 12(sp),sp
	return FALSE;
    b34c:	   |            clr.w d0
}
    b34e:	   \----------> move.l (sp)+,d2
    b350:	                move.l (sp)+,d3
    b352:	                lea 20(sp),sp
    b356:	                rts

0000b358 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    b358:	       subq.l #8,sp
    b35a:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    b35c:	   /-- bra.s b38c <clearStackLib+0x34>
		k = stackLib;
    b35e:	/--|-> move.l 1b686 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    b366:	|  |   movea.l 1b686 <stackLib>,a0
    b36c:	|  |   move.l 4(a0),d0
    b370:	|  |   move.l d0,1b686 <stackLib>
		FreeVec(k);
    b376:	|  |   move.l 8(sp),4(sp)
    b37c:	|  |   move.l 1b5a2 <SysBase>,d0
    b382:	|  |   movea.l d0,a6
    b384:	|  |   movea.l 4(sp),a1
    b388:	|  |   jsr -690(a6)
	while (stackLib) {
    b38c:	|  \-> move.l 1b686 <stackLib>,d0
    b392:	\----- bne.s b35e <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    b394:	       clr.l 1b682 <stackLibTotal>
}
    b39a:	       nop
    b39c:	       movea.l (sp)+,a6
    b39e:	       addq.l #8,sp
    b3a0:	       rts

0000b3a2 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    b3a2:	          lea -128(sp),sp
    b3a6:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    b3aa:	      /-- bra.s b3bc <loadGame+0x1a>
    b3ac:	   /--|-> move.l 1b53a <allRunningFunctions>,d0
    b3b2:	   |  |   move.l d0,-(sp)
    b3b4:	   |  |   jsr 476e <finishFunction>
    b3ba:	   |  |   addq.l #4,sp
    b3bc:	   |  \-> move.l 1b53a <allRunningFunctions>,d0
    b3c2:	   \----- bne.s b3ac <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    b3c4:	          pea 1b68a <ssgVersion>
    b3ca:	          pea 17e19 <PutChar+0x1503>
    b3d0:	          pea 41 <_start+0x41>
    b3d4:	          pea 53 <_start+0x53>
    b3d8:	          move.l 160(sp),-(sp)
    b3dc:	          jsr 5524 <openAndVerify>
    b3e2:	          lea 20(sp),sp
    b3e6:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    b3ea:	      /-- bne.s b3f2 <loadGame+0x50>
    b3ec:	      |   clr.w d0
    b3ee:	/-----|-- bra.w b698 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    b3f2:	|     \-> move.l 112(sp),108(sp)
    b3f8:	|         lea 140(sp),a0
    b3fc:	|         lea -126(a0),a0
    b400:	|         move.l a0,120(sp)
    b404:	|         moveq #8,d0
    b406:	|         move.l d0,116(sp)
    b40a:	|         move.l 1b5aa <DOSBase>,d0
    b410:	|         movea.l d0,a6
    b412:	|         move.l 108(sp),d1
    b416:	|         move.l 120(sp),d2
    b41a:	|         move.l 116(sp),d3
    b41e:	|         jsr -42(a6)
    b422:	|         move.l d0,132(sp)
    b426:	|         move.l 132(sp),d0
    b42a:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    b42e:	|         moveq #8,d0
    b430:	|         cmp.l 128(sp),d0
    b434:	|     /-- beq.s b444 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    b436:	|     |   pea 17e3a <PutChar+0x1524>
    b43c:	|     |   jsr 15fc6 <KPrintF>
    b442:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    b444:	|     \-> move.l 14(sp),d1
    b448:	|         move.l 1b544 <fileTime>,d0
    b44e:	|         cmp.l d1,d0
    b450:	|     /-- bne.s b460 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    b452:	|     |   move.l 18(sp),d1
    b456:	|     |   move.l 1b548 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    b45c:	|     |   cmp.l d1,d0
    b45e:	|  /--|-- beq.s b480 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    b460:	|  |  \-> move.l 144(sp),-(sp)
    b464:	|  |      pea 17e56 <PutChar+0x1540>
    b46a:	|  |      pea 17f1d <PutChar+0x1607>
    b470:	|  |      jsr 15fc6 <KPrintF>
    b476:	|  |      lea 12(sp),sp
		return FALSE; 
    b47a:	|  |      clr.w d0
    b47c:	+--|----- bra.w b698 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    b480:	|  \----> move.l 112(sp),124(sp)
    b486:	|         move.l 1b5aa <DOSBase>,d0
    b48c:	|         movea.l d0,a6
    b48e:	|         move.l 124(sp),d1
    b492:	|         jsr -306(a6)
    b496:	|         move.l d0,136(sp)
    b49a:	|         move.l 136(sp),d0
    b49e:	|         move.l d0,d0
    b4a0:	|         move.w d0,1ae00 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    b4a6:	|         move.l 112(sp),100(sp)
    b4ac:	|         move.l 1b5aa <DOSBase>,d0
    b4b2:	|         movea.l d0,a6
    b4b4:	|         move.l 100(sp),d1
    b4b8:	|         jsr -306(a6)
    b4bc:	|         move.l d0,96(sp)
    b4c0:	|         move.l 96(sp),d0
    b4c4:	|         move.l d0,d0
    b4c6:	|         move.w d0,1b542 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    b4cc:	|         move.l 112(sp),92(sp)
    b4d2:	|         move.l 1b5aa <DOSBase>,d0
    b4d8:	|         movea.l d0,a6
    b4da:	|         move.l 92(sp),d1
    b4de:	|         jsr -306(a6)
    b4e2:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    b4e6:	|         move.l 112(sp),84(sp)
    b4ec:	|         move.l 1b5aa <DOSBase>,d0
    b4f2:	|         movea.l d0,a6
    b4f4:	|         move.l 84(sp),d1
    b4f8:	|         jsr -306(a6)
    b4fc:	|         move.l d0,80(sp)
    b500:	|         move.l 80(sp),d0
    b504:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    b508:	|     /-- beq.s b53c <loadGame+0x19a>
		fontNum = get2bytes (fp);
    b50a:	|     |   move.l 112(sp),-(sp)
    b50e:	|     |   jsr 6bc <get2bytes>
    b514:	|     |   addq.l #4,sp
    b516:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    b51a:	|     |   move.l 112(sp),-(sp)
    b51e:	|     |   jsr 6bc <get2bytes>
    b524:	|     |   addq.l #4,sp
    b526:	|     |   move.l d0,1b6f2 <fontHeight>
		charOrder = readString(fp);		
    b52c:	|     |   move.l 112(sp),-(sp)
    b530:	|     |   jsr b02 <readString>
    b536:	|     |   addq.l #4,sp
    b538:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    b53c:	|     \-> move.l 104(sp),70(sp)
    b542:	|         move.l 1b5a2 <SysBase>,d0
    b548:	|         movea.l d0,a6
    b54a:	|         movea.l 70(sp),a1
    b54e:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    b552:	|         move.l 112(sp),-(sp)
    b556:	|         jsr 854 <getSigned>
    b55c:	|         addq.l #4,sp
    b55e:	|         move.w d0,1b4a8 <fontSpace>

	killAllPeople ();
    b564:	|         jsr 9b90 <killAllPeople>
	killAllRegions ();
    b56a:	|         jsr 14816 <killAllRegions>

	int camerX = get2bytes (fp);
    b570:	|         move.l 112(sp),-(sp)
    b574:	|         jsr 6bc <get2bytes>
    b57a:	|         addq.l #4,sp
    b57c:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    b580:	|         move.l 112(sp),-(sp)
    b584:	|         jsr 6bc <get2bytes>
    b58a:	|         addq.l #4,sp
    b58c:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    b590:	|         move.l 112(sp),-(sp)
    b594:	|         jsr 7d8 <getFloat>
    b59a:	|         addq.l #4,sp
    b59c:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    b5a0:	|         move.l 112(sp),54(sp)
    b5a6:	|         move.l 1b5aa <DOSBase>,d0
    b5ac:	|         movea.l d0,a6
    b5ae:	|         move.l 54(sp),d1
    b5b2:	|         jsr -306(a6)
    b5b6:	|         move.l d0,50(sp)
    b5ba:	|         move.l 50(sp),d0
    b5be:	|         move.l d0,d0
    b5c0:	|         move.b d0,1af1a <brightnessLevel>

	loadHandlers (fp);
    b5c6:	|         move.l 112(sp),-(sp)
    b5ca:	|         jsr 5484 <loadHandlers>
    b5d0:	|         addq.l #4,sp
	loadRegions (fp);
    b5d2:	|         move.l 112(sp),-(sp)
    b5d6:	|         jsr 14872 <loadRegions>
    b5dc:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    b5de:	|         moveq #12,d0
    b5e0:	|         move.l d0,46(sp)
    b5e4:	|         clr.l 42(sp)
    b5e8:	|         move.l 1b5a2 <SysBase>,d0
    b5ee:	|         movea.l d0,a6
    b5f0:	|         move.l 46(sp),d0
    b5f4:	|         move.l 42(sp),d1
    b5f8:	|         jsr -684(a6)
    b5fc:	|         move.l d0,38(sp)
    b600:	|         move.l 38(sp),d0
    b604:	|         move.l d0,1b4aa <mouseCursorAnim>
	if (! mouseCursorAnim) {
    b60a:	|         move.l 1b4aa <mouseCursorAnim>,d0
    b610:	|     /-- bne.s b624 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    b612:	|     |   pea 17f27 <PutChar+0x1611>
    b618:	|     |   jsr 15fc6 <KPrintF>
    b61e:	|     |   addq.l #4,sp
		return FALSE;
    b620:	|     |   clr.w d0
    b622:	+-----|-- bra.s b698 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    b624:	|     \-> jsr c51a <nosnapshot>
	if (FGetC (fp)) {
    b62a:	|         move.l 112(sp),34(sp)
    b630:	|         move.l 1b5aa <DOSBase>,d0
    b636:	|         movea.l d0,a6
    b638:	|         move.l 34(sp),d1
    b63c:	|         jsr -306(a6)
    b640:	|         move.l d0,30(sp)
    b644:	|         move.l 30(sp),d0
    b648:	|     /-- beq.s b65e <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    b64a:	|     |   move.l 112(sp),-(sp)
    b64e:	|     |   jsr c59a <restoreSnapshot>
    b654:	|     |   addq.l #4,sp
    b656:	|     |   tst.w d0
    b658:	|     +-- bne.s b65e <loadGame+0x2bc>
    b65a:	|     |   clr.w d0
    b65c:	+-----|-- bra.s b698 <loadGame+0x2f6>
	}

	Close (fp);
    b65e:	|     \-> move.l 112(sp),26(sp)
    b664:	|         move.l 1b5aa <DOSBase>,d0
    b66a:	|         movea.l d0,a6
    b66c:	|         move.l 26(sp),d1
    b670:	|         jsr -36(a6)
    b674:	|         move.l d0,22(sp)
	clearStackLib ();
    b678:	|         jsr b358 <clearStackLib>

	cameraX = camerX;
    b67e:	|         move.l 66(sp),1b6b4 <cameraX>
	cameraY = camerY;
    b686:	|         move.l 62(sp),1b6b8 <cameraY>
	cameraZoom = camerZ;
    b68e:	|         move.l 58(sp),1af42 <cameraZoom>

	return TRUE;
    b696:	|         moveq #1,d0
}
    b698:	\-------> movem.l (sp)+,d2-d3/a6
    b69c:	          lea 128(sp),sp
    b6a0:	          rts

0000b6a2 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    b6a2:	   /-> lea -64(sp),sp
    b6a6:	   |   move.l a6,-(sp)
    b6a8:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    b6aa:	   |   movea.l 76(sp),a0
    b6ae:	   |   move.l (a0),d0
    b6b0:	   |   move.l 80(sp),-(sp)
    b6b4:	   |   move.l d0,-(sp)
    b6b6:	   |   jsr 8d0 <put2bytes>
    b6bc:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    b6be:	   |   movea.l 76(sp),a0
    b6c2:	   |   move.l 40(a0),d0
    b6c6:	/--|-- beq.s b702 <saveFunction+0x60>
		FPutC (fp, 1);
    b6c8:	|  |   move.l 80(sp),52(sp)
    b6ce:	|  |   moveq #1,d0
    b6d0:	|  |   move.l d0,48(sp)
    b6d4:	|  |   move.l 1b5aa <DOSBase>,d0
    b6da:	|  |   movea.l d0,a6
    b6dc:	|  |   move.l 52(sp),d1
    b6e0:	|  |   move.l 48(sp),d2
    b6e4:	|  |   jsr -312(a6)
    b6e8:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    b6ec:	|  |   movea.l 76(sp),a0
    b6f0:	|  |   move.l 40(a0),d0
    b6f4:	|  |   move.l 80(sp),-(sp)
    b6f8:	|  |   move.l d0,-(sp)
    b6fa:	|  \-- jsr b6a2 <saveFunction>(pc)
    b6fe:	|      addq.l #8,sp
    b700:	|  /-- bra.s b724 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    b702:	\--|-> move.l 80(sp),64(sp)
    b708:	   |   clr.l 60(sp)
    b70c:	   |   move.l 1b5aa <DOSBase>,d0
    b712:	   |   movea.l d0,a6
    b714:	   |   move.l 64(sp),d1
    b718:	   |   move.l 60(sp),d2
    b71c:	   |   jsr -312(a6)
    b720:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    b724:	   \-> movea.l 76(sp),a0
    b728:	       move.l 12(a0),d0
    b72c:	       move.l 80(sp),-(sp)
    b730:	       move.l d0,-(sp)
    b732:	       jsr 958 <put4bytes>
    b738:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    b73a:	       movea.l 76(sp),a0
    b73e:	       move.l 36(a0),d0
    b742:	       move.l 80(sp),-(sp)
    b746:	       move.l d0,-(sp)
    b748:	       jsr 8d0 <put2bytes>
    b74e:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    b750:	       move.l 80(sp),40(sp)
    b756:	       movea.l 76(sp),a0
    b75a:	       move.w 54(a0),d0
    b75e:	       movea.w d0,a0
    b760:	       move.l a0,36(sp)
    b764:	       move.l 1b5aa <DOSBase>,d0
    b76a:	       movea.l d0,a6
    b76c:	       move.l 40(sp),d1
    b770:	       move.l 36(sp),d2
    b774:	       jsr -312(a6)
    b778:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    b77c:	       move.l 80(sp),28(sp)
    b782:	       movea.l 76(sp),a0
    b786:	       move.w 48(a0),d0
    b78a:	       movea.w d0,a0
    b78c:	       move.l a0,24(sp)
    b790:	       move.l 1b5aa <DOSBase>,d0
    b796:	       movea.l d0,a6
    b798:	       move.l 28(sp),d1
    b79c:	       move.l 24(sp),d2
    b7a0:	       jsr -312(a6)
    b7a4:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    b7a8:	       move.l 80(sp),16(sp)
    b7ae:	       movea.l 76(sp),a0
    b7b2:	       move.w 50(a0),d0
    b7b6:	       movea.w d0,a0
    b7b8:	       move.l a0,12(sp)
    b7bc:	       move.l 1b5aa <DOSBase>,d0
    b7c2:	       movea.l d0,a6
    b7c4:	       move.l 16(sp),d1
    b7c8:	       move.l 12(sp),d2
    b7cc:	       jsr -312(a6)
    b7d0:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    b7d4:	       moveq #28,d0
    b7d6:	       add.l 76(sp),d0
    b7da:	       move.l 80(sp),-(sp)
    b7de:	       move.l d0,-(sp)
    b7e0:	       jsr bf5e <saveVariable>
    b7e6:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    b7e8:	       movea.l 76(sp),a0
    b7ec:	       move.b 56(a0),d0
    b7f0:	   /-- beq.s b800 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    b7f2:	   |   pea 17f48 <PutChar+0x1632>
    b7f8:	   |   jsr 15fc6 <KPrintF>
    b7fe:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    b800:	   \-> movea.l 76(sp),a0
    b804:	       move.l 24(a0),d0
    b808:	       move.l 80(sp),-(sp)
    b80c:	       move.l d0,-(sp)
    b80e:	       jsr bdd2 <saveStack>
    b814:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    b816:	       clr.l 68(sp)
    b81a:	   /-- bra.s b83e <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    b81c:	/--|-> movea.l 76(sp),a0
    b820:	|  |   move.l 20(a0),d1
    b824:	|  |   move.l 68(sp),d0
    b828:	|  |   lsl.l #3,d0
    b82a:	|  |   add.l d1,d0
    b82c:	|  |   move.l 80(sp),-(sp)
    b830:	|  |   move.l d0,-(sp)
    b832:	|  |   jsr bf5e <saveVariable>
    b838:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    b83a:	|  |   addq.l #1,68(sp)
    b83e:	|  \-> movea.l 76(sp),a0
    b842:	|      move.l 8(a0),d0
    b846:	|      cmp.l 68(sp),d0
    b84a:	\----- bgt.s b81c <saveFunction+0x17a>
	}
}
    b84c:	       nop
    b84e:	       nop
    b850:	       move.l (sp)+,d2
    b852:	       movea.l (sp)+,a6
    b854:	       lea 64(sp),sp
    b858:	       rts

0000b85a <saveGame>:

BOOL saveGame (char * fname) {
    b85a:	          lea -272(sp),sp
    b85e:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    b862:	          move.l 288(sp),268(sp)
    b868:	          move.l #1006,264(sp)
    b870:	          move.l 1b5aa <DOSBase>,d0
    b876:	          movea.l d0,a6
    b878:	          move.l 268(sp),d1
    b87c:	          move.l 264(sp),d2
    b880:	          jsr -30(a6)
    b884:	          move.l d0,260(sp)
    b888:	          move.l 260(sp),d0
    b88c:	          move.l d0,256(sp)
	if (fp == NULL) {
    b890:	      /-- bne.s b8a6 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    b892:	      |   pea 17f6a <PutChar+0x1654>
    b898:	      |   jsr 15fc6 <KPrintF>
    b89e:	      |   addq.l #4,sp
		return FALSE;
    b8a0:	      |   clr.w d0
    b8a2:	/-----|-- bra.w bdc8 <saveGame+0x56e>
	}

	Write( fp, &"SLUDSA", 6);
    b8a6:	|     \-> move.l 256(sp),252(sp)
    b8ac:	|         move.l #98183,248(sp)
    b8b4:	|         moveq #6,d0
    b8b6:	|         move.l d0,244(sp)
    b8ba:	|         move.l 1b5aa <DOSBase>,d0
    b8c0:	|         movea.l d0,a6
    b8c2:	|         move.l 252(sp),d1
    b8c6:	|         move.l 248(sp),d2
    b8ca:	|         move.l 244(sp),d3
    b8ce:	|         jsr -48(a6)
    b8d2:	|         move.l d0,240(sp)
	FPutC (fp, 0);
    b8d6:	|         move.l 256(sp),236(sp)
    b8dc:	|         clr.l 232(sp)
    b8e0:	|         move.l 1b5aa <DOSBase>,d0
    b8e6:	|         movea.l d0,a6
    b8e8:	|         move.l 236(sp),d1
    b8ec:	|         move.l 232(sp),d2
    b8f0:	|         jsr -312(a6)
    b8f4:	|         move.l d0,228(sp)
	FPutC (fp, 0);
    b8f8:	|         move.l 256(sp),224(sp)
    b8fe:	|         clr.l 220(sp)
    b902:	|         move.l 1b5aa <DOSBase>,d0
    b908:	|         movea.l d0,a6
    b90a:	|         move.l 224(sp),d1
    b90e:	|         move.l 220(sp),d2
    b912:	|         jsr -312(a6)
    b916:	|         move.l d0,216(sp)
	FPutC (fp, MAJOR_VERSION);
    b91a:	|         move.l 256(sp),212(sp)
    b920:	|         moveq #2,d0
    b922:	|         move.l d0,208(sp)
    b926:	|         move.l 1b5aa <DOSBase>,d0
    b92c:	|         movea.l d0,a6
    b92e:	|         move.l 212(sp),d1
    b932:	|         move.l 208(sp),d2
    b936:	|         jsr -312(a6)
    b93a:	|         move.l d0,204(sp)
	FPutC (fp, MINOR_VERSION);
    b93e:	|         move.l 256(sp),200(sp)
    b944:	|         moveq #2,d0
    b946:	|         move.l d0,196(sp)
    b94a:	|         move.l 1b5aa <DOSBase>,d0
    b950:	|         movea.l d0,a6
    b952:	|         move.l 200(sp),d1
    b956:	|         move.l 196(sp),d2
    b95a:	|         jsr -312(a6)
    b95e:	|         move.l d0,192(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    b962:	|         move.l 256(sp),188(sp)
    b968:	|         move.l #111940,184(sp)
    b970:	|         moveq #8,d0
    b972:	|         move.l d0,180(sp)
    b976:	|         move.l 1b5aa <DOSBase>,d0
    b97c:	|         movea.l d0,a6
    b97e:	|         move.l 188(sp),d1
    b982:	|         move.l 184(sp),d2
    b986:	|         move.l 180(sp),d3
    b98a:	|         jsr -48(a6)
    b98e:	|         move.l d0,176(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    b992:	|         move.l 256(sp),172(sp)
    b998:	|         move.w 1ae00 <allowAnyFilename>,d0
    b99e:	|         movea.w d0,a0
    b9a0:	|         move.l a0,168(sp)
    b9a4:	|         move.l 1b5aa <DOSBase>,d0
    b9aa:	|         movea.l d0,a6
    b9ac:	|         move.l 172(sp),d1
    b9b0:	|         move.l 168(sp),d2
    b9b4:	|         jsr -312(a6)
    b9b8:	|         move.l d0,164(sp)
	FPutC (fp, captureAllKeys);
    b9bc:	|         move.l 256(sp),160(sp)
    b9c2:	|         move.w 1b542 <captureAllKeys>,d0
    b9c8:	|         movea.w d0,a0
    b9ca:	|         move.l a0,156(sp)
    b9ce:	|         move.l 1b5aa <DOSBase>,d0
    b9d4:	|         movea.l d0,a6
    b9d6:	|         move.l 160(sp),d1
    b9da:	|         move.l 156(sp),d2
    b9de:	|         jsr -312(a6)
    b9e2:	|         move.l d0,152(sp)
	FPutC (fp, TRUE); // updateDisplay
    b9e6:	|         move.l 256(sp),148(sp)
    b9ec:	|         moveq #1,d0
    b9ee:	|         move.l d0,144(sp)
    b9f2:	|         move.l 1b5aa <DOSBase>,d0
    b9f8:	|         movea.l d0,a6
    b9fa:	|         move.l 148(sp),d1
    b9fe:	|         move.l 144(sp),d2
    ba02:	|         jsr -312(a6)
    ba06:	|         move.l d0,140(sp)
	FPutC (fp, fontTableSize>0);
    ba0a:	|         move.l 256(sp),136(sp)
    ba10:	|         move.l 1b6fe <fontTableSize>,d0
    ba16:	|         sgt d0
    ba18:	|         neg.b d0
    ba1a:	|         move.b d0,d0
    ba1c:	|         andi.l #255,d0
    ba22:	|         move.l d0,132(sp)
    ba26:	|         move.l 1b5aa <DOSBase>,d0
    ba2c:	|         movea.l d0,a6
    ba2e:	|         move.l 136(sp),d1
    ba32:	|         move.l 132(sp),d2
    ba36:	|         jsr -312(a6)
    ba3a:	|         move.l d0,128(sp)

	if (fontTableSize>0) {
    ba3e:	|         move.l 1b6fe <fontTableSize>,d0
    ba44:	|     /-- ble.s ba82 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    ba46:	|     |   move.l 1b6f6 <loadedFontNum>,d0
    ba4c:	|     |   move.l 256(sp),-(sp)
    ba50:	|     |   move.l d0,-(sp)
    ba52:	|     |   jsr 8d0 <put2bytes>
    ba58:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    ba5a:	|     |   move.l 1b6f2 <fontHeight>,d0
    ba60:	|     |   move.l 256(sp),-(sp)
    ba64:	|     |   move.l d0,-(sp)
    ba66:	|     |   jsr 8d0 <put2bytes>
    ba6c:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    ba6e:	|     |   move.l 1b6fa <fontOrderString>,d0
    ba74:	|     |   move.l 256(sp),-(sp)
    ba78:	|     |   move.l d0,-(sp)
    ba7a:	|     |   jsr bd8 <writeString>
    ba80:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    ba82:	|     \-> move.w 1b4a8 <fontSpace>,d0
    ba88:	|         movea.w d0,a0
    ba8a:	|         move.l 256(sp),-(sp)
    ba8e:	|         move.l a0,-(sp)
    ba90:	|         jsr a9c <putSigned>
    ba96:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    ba98:	|         move.l 1b6b4 <cameraX>,d0
    ba9e:	|         move.l 256(sp),-(sp)
    baa2:	|         move.l d0,-(sp)
    baa4:	|         jsr 8d0 <put2bytes>
    baaa:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    baac:	|         move.l 1b6b8 <cameraY>,d0
    bab2:	|         move.l 256(sp),-(sp)
    bab6:	|         move.l d0,-(sp)
    bab8:	|         jsr 8d0 <put2bytes>
    babe:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    bac0:	|         move.l 1af42 <cameraZoom>,d0
    bac6:	|         move.l 256(sp),-(sp)
    baca:	|         move.l d0,-(sp)
    bacc:	|         jsr a46 <putFloat>
    bad2:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    bad4:	|         move.l 256(sp),124(sp)
    bada:	|         move.b 1af1a <brightnessLevel>,d0
    bae0:	|         move.b d0,d0
    bae2:	|         andi.l #255,d0
    bae8:	|         move.l d0,120(sp)
    baec:	|         move.l 1b5aa <DOSBase>,d0
    baf2:	|         movea.l d0,a6
    baf4:	|         move.l 124(sp),d1
    baf8:	|         move.l 120(sp),d2
    bafc:	|         jsr -312(a6)
    bb00:	|         move.l d0,116(sp)

	// Save event handlers
	saveHandlers (fp);
    bb04:	|         move.l 256(sp),-(sp)
    bb08:	|         jsr 5a08 <saveHandlers>
    bb0e:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    bb10:	|         move.l 256(sp),-(sp)
    bb14:	|         jsr 14a2c <saveRegions>
    bb1a:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    bb1c:	|         move.l 1b4aa <mouseCursorAnim>,d0
    bb22:	|         move.l 256(sp),-(sp)
    bb26:	|         move.l d0,-(sp)
    bb28:	|         jsr a102 <saveAnim>
    bb2e:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    bb30:	|         move.l 1b4ae <mouseCursorFrameNum>,d0
    bb36:	|         move.l 256(sp),-(sp)
    bb3a:	|         move.l d0,-(sp)
    bb3c:	|         jsr 8d0 <put2bytes>
    bb42:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    bb44:	|         move.l 1b53a <allRunningFunctions>,276(sp)
	int countFunctions = 0;
    bb4c:	|         clr.l 272(sp)
	while (thisFunction) {
    bb50:	|     /-- bra.s bb60 <saveGame+0x306>
		countFunctions ++;
    bb52:	|  /--|-> addq.l #1,272(sp)
		thisFunction = thisFunction -> next;
    bb56:	|  |  |   movea.l 276(sp),a0
    bb5a:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    bb60:	|  |  \-> tst.l 276(sp)
    bb64:	|  \----- bne.s bb52 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    bb66:	|         move.l 256(sp),-(sp)
    bb6a:	|         move.l 276(sp),-(sp)
    bb6e:	|         jsr 8d0 <put2bytes>
    bb74:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    bb76:	|         move.l 1b53a <allRunningFunctions>,276(sp)
	while (thisFunction) {
    bb7e:	|     /-- bra.s bb9a <saveGame+0x340>
		saveFunction (thisFunction, fp);
    bb80:	|  /--|-> move.l 256(sp),-(sp)
    bb84:	|  |  |   move.l 280(sp),-(sp)
    bb88:	|  |  |   jsr b6a2 <saveFunction>
    bb8e:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    bb90:	|  |  |   movea.l 276(sp),a0
    bb94:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    bb9a:	|  |  \-> tst.l 276(sp)
    bb9e:	|  \----- bne.s bb80 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    bba0:	|         clr.l 280(sp)
    bba4:	|     /-- bra.s bbc6 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    bba6:	|  /--|-> move.l 1b550 <globalVars>,d1
    bbac:	|  |  |   move.l 280(sp),d0
    bbb0:	|  |  |   lsl.l #3,d0
    bbb2:	|  |  |   add.l d1,d0
    bbb4:	|  |  |   move.l 256(sp),-(sp)
    bbb8:	|  |  |   move.l d0,-(sp)
    bbba:	|  |  |   jsr bf5e <saveVariable>
    bbc0:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    bbc2:	|  |  |   addq.l #1,280(sp)
    bbc6:	|  |  \-> move.l 1b57a <numGlobals>,d0
    bbcc:	|  |      cmp.l 280(sp),d0
    bbd0:	|  \----- bgt.s bba6 <saveGame+0x34c>
	}

	savePeople (fp);
    bbd2:	|         move.l 256(sp),-(sp)
    bbd6:	|         jsr a22a <savePeople>
    bbdc:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    bbde:	|         movea.l 1b70e <currentFloor>,a0
    bbe4:	|         move.l 8(a0),d0
    bbe8:	|  /----- beq.s bc26 <saveGame+0x3cc>
		FPutC (fp, 1);
    bbea:	|  |      move.l 256(sp),100(sp)
    bbf0:	|  |      moveq #1,d0
    bbf2:	|  |      move.l d0,96(sp)
    bbf6:	|  |      move.l 1b5aa <DOSBase>,d0
    bbfc:	|  |      movea.l d0,a6
    bbfe:	|  |      move.l 100(sp),d1
    bc02:	|  |      move.l 96(sp),d2
    bc06:	|  |      jsr -312(a6)
    bc0a:	|  |      move.l d0,92(sp)
		put2bytes (currentFloor -> originalNum, fp);
    bc0e:	|  |      movea.l 1b70e <currentFloor>,a0
    bc14:	|  |      move.l (a0),d0
    bc16:	|  |      move.l 256(sp),-(sp)
    bc1a:	|  |      move.l d0,-(sp)
    bc1c:	|  |      jsr 8d0 <put2bytes>
    bc22:	|  |      addq.l #8,sp
    bc24:	|  |  /-- bra.s bc48 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    bc26:	|  \--|-> move.l 256(sp),112(sp)
    bc2c:	|     |   clr.l 108(sp)
    bc30:	|     |   move.l 1b5aa <DOSBase>,d0
    bc36:	|     |   movea.l d0,a6
    bc38:	|     |   move.l 112(sp),d1
    bc3c:	|     |   move.l 108(sp),d2
    bc40:	|     |   jsr -312(a6)
    bc44:	|     |   move.l d0,104(sp)

	if (zBuffer.tex) {
    bc48:	|     \-> move.l 1b652 <zBuffer+0x50>,d0
    bc4e:	|  /----- beq.s bc8a <saveGame+0x430>
		FPutC (fp, 1);
    bc50:	|  |      move.l 256(sp),76(sp)
    bc56:	|  |      moveq #1,d0
    bc58:	|  |      move.l d0,72(sp)
    bc5c:	|  |      move.l 1b5aa <DOSBase>,d0
    bc62:	|  |      movea.l d0,a6
    bc64:	|  |      move.l 76(sp),d1
    bc68:	|  |      move.l 72(sp),d2
    bc6c:	|  |      jsr -312(a6)
    bc70:	|  |      move.l d0,68(sp)
		put2bytes (zBuffer.originalNum, fp);
    bc74:	|  |      move.l 1b64e <zBuffer+0x4c>,d0
    bc7a:	|  |      move.l 256(sp),-(sp)
    bc7e:	|  |      move.l d0,-(sp)
    bc80:	|  |      jsr 8d0 <put2bytes>
    bc86:	|  |      addq.l #8,sp
    bc88:	|  |  /-- bra.s bcac <saveGame+0x452>
	} else FPutC (fp,0);
    bc8a:	|  \--|-> move.l 256(sp),88(sp)
    bc90:	|     |   clr.l 84(sp)
    bc94:	|     |   move.l 1b5aa <DOSBase>,d0
    bc9a:	|     |   movea.l d0,a6
    bc9c:	|     |   move.l 88(sp),d1
    bca0:	|     |   move.l 84(sp),d2
    bca4:	|     |   jsr -312(a6)
    bca8:	|     |   move.l d0,80(sp)

	FPutC (fp, speechMode);
    bcac:	|     \-> move.l 256(sp),64(sp)
    bcb2:	|         move.l 1b6c8 <speechMode>,60(sp)
    bcba:	|         move.l 1b5aa <DOSBase>,d0
    bcc0:	|         movea.l d0,a6
    bcc2:	|         move.l 64(sp),d1
    bcc6:	|         move.l 60(sp),d2
    bcca:	|         jsr -312(a6)
    bcce:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    bcd2:	|         move.b 1b47e <fadeMode>,d0
    bcd8:	|         move.b d0,d0
    bcda:	|         andi.l #255,d0
    bce0:	|         move.l d0,52(sp)
    bce4:	|         move.l 256(sp),48(sp)
    bcea:	|         move.l 1b5aa <DOSBase>,d0
    bcf0:	|         movea.l d0,a6
    bcf2:	|         move.l 52(sp),d1
    bcf6:	|         move.l 48(sp),d2
    bcfa:	|         jsr -312(a6)
    bcfe:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    bd02:	|         move.l 1b5fe <speech>,d0
    bd08:	|         move.l 256(sp),-(sp)
    bd0c:	|         move.l d0,-(sp)
    bd0e:	|         jsr 7064 <saveSpeech>
    bd14:	|         addq.l #8,sp
	saveStatusBars (fp);
    bd16:	|         move.l 256(sp),-(sp)
    bd1a:	|         jsr 6a60 <saveStatusBars>
    bd20:	|         addq.l #4,sp
	saveSounds (fp);
    bd22:	|         move.l 256(sp),-(sp)
    bd26:	|         jsr c2c8 <saveSounds>
    bd2c:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    bd2e:	|         move.w 1b6b2 <saveEncoding>,d0
    bd34:	|         move.w d0,d0
    bd36:	|         andi.l #65535,d0
    bd3c:	|         move.l 256(sp),-(sp)
    bd40:	|         move.l d0,-(sp)
    bd42:	|         jsr 8d0 <put2bytes>
    bd48:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    bd4a:	|         move.l 1b6a4 <parallaxStuff>,d0
    bd50:	|         move.l 256(sp),-(sp)
    bd54:	|         move.l d0,-(sp)
    bd56:	|         jsr c5c0 <saveParallaxRecursive>
    bd5c:	|         addq.l #8,sp
	FPutC (fp, 0);
    bd5e:	|         move.l 256(sp),40(sp)
    bd64:	|         clr.l 36(sp)
    bd68:	|         move.l 1b5aa <DOSBase>,d0
    bd6e:	|         movea.l d0,a6
    bd70:	|         move.l 40(sp),d1
    bd74:	|         move.l 36(sp),d2
    bd78:	|         jsr -312(a6)
    bd7c:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    bd80:	|         move.l 256(sp),28(sp)
    bd86:	|         move.l 1af20 <languageNum>,24(sp)
    bd8e:	|         move.l 1b5aa <DOSBase>,d0
    bd94:	|         movea.l d0,a6
    bd96:	|         move.l 28(sp),d1
    bd9a:	|         move.l 24(sp),d2
    bd9e:	|         jsr -312(a6)
    bda2:	|         move.l d0,20(sp)

	Close(fp);
    bda6:	|         move.l 256(sp),16(sp)
    bdac:	|         move.l 1b5aa <DOSBase>,d0
    bdb2:	|         movea.l d0,a6
    bdb4:	|         move.l 16(sp),d1
    bdb8:	|         jsr -36(a6)
    bdbc:	|         move.l d0,12(sp)
	clearStackLib ();
    bdc0:	|         jsr b358 <clearStackLib>
	return TRUE;
    bdc6:	|         moveq #1,d0
}
    bdc8:	\-------> movem.l (sp)+,d2-d3/a6
    bdcc:	          lea 272(sp),sp
    bdd0:	          rts

0000bdd2 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    bdd2:	       lea -12(sp),sp
	int elements = 0;
    bdd6:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    bdda:	       move.l 16(sp),(sp)
	while (search) {
    bdde:	   /-- bra.s bdea <saveStack+0x18>
		elements ++;
    bde0:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    bde4:	|  |   movea.l (sp),a0
    bde6:	|  |   move.l 8(a0),(sp)
	while (search) {
    bdea:	|  \-> tst.l (sp)
    bdec:	\----- bne.s bde0 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    bdee:	       move.l 20(sp),-(sp)
    bdf2:	       move.l 12(sp),-(sp)
    bdf6:	       jsr 8d0 <put2bytes>
    bdfc:	       addq.l #8,sp
	search = vs;
    bdfe:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    be02:	       clr.l 4(sp)
    be06:	   /-- bra.s be22 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    be08:	/--|-> move.l (sp),d0
    be0a:	|  |   move.l 20(sp),-(sp)
    be0e:	|  |   move.l d0,-(sp)
    be10:	|  |   jsr bf5e <saveVariable>
    be16:	|  |   addq.l #8,sp
		search = search -> next;
    be18:	|  |   movea.l (sp),a0
    be1a:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    be1e:	|  |   addq.l #1,4(sp)
    be22:	|  \-> move.l 4(sp),d0
    be26:	|      cmp.l 8(sp),d0
    be2a:	\----- blt.s be08 <saveStack+0x36>
	}
}
    be2c:	       nop
    be2e:	       nop
    be30:	       lea 12(sp),sp
    be34:	       rts

0000be36 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    be36:	             lea -44(sp),sp
    be3a:	             move.l a6,-(sp)
    be3c:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    be3e:	             move.l 1b686 <stackLib>,48(sp)
	int a = 0;
    be46:	             clr.l 44(sp)
	while (s) {
    be4a:	      /----- bra.s bea8 <saveStackRef+0x72>
		if (s -> stack == vs) {
    be4c:	   /--|----> movea.l 48(sp),a0
    be50:	   |  |      move.l (a0),d0
    be52:	   |  |      cmp.l 56(sp),d0
    be56:	   |  |  /-- bne.s be9a <saveStackRef+0x64>
			FPutC (fp, 1);
    be58:	   |  |  |   move.l 60(sp),16(sp)
    be5e:	   |  |  |   moveq #1,d0
    be60:	   |  |  |   move.l d0,12(sp)
    be64:	   |  |  |   move.l 1b5aa <DOSBase>,d0
    be6a:	   |  |  |   movea.l d0,a6
    be6c:	   |  |  |   move.l 16(sp),d1
    be70:	   |  |  |   move.l 12(sp),d2
    be74:	   |  |  |   jsr -312(a6)
    be78:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    be7c:	   |  |  |   move.l 1b682 <stackLibTotal>,d0
    be82:	   |  |  |   sub.l 44(sp),d0
    be86:	   |  |  |   move.l 60(sp),-(sp)
    be8a:	   |  |  |   move.l d0,-(sp)
    be8c:	   |  |  |   jsr 8d0 <put2bytes>
    be92:	   |  |  |   addq.l #8,sp
			return TRUE;
    be94:	   |  |  |   moveq #1,d0
    be96:	/--|--|--|-- bra.w bf54 <saveStackRef+0x11e>
		}
		s = s -> next;
    be9a:	|  |  |  \-> movea.l 48(sp),a0
    be9e:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    bea4:	|  |  |      addq.l #1,44(sp)
	while (s) {
    bea8:	|  |  \----> tst.l 48(sp)
    beac:	|  \-------- bne.s be4c <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    beae:	|            move.l 60(sp),40(sp)
    beb4:	|            clr.l 36(sp)
    beb8:	|            move.l 1b5aa <DOSBase>,d0
    bebe:	|            movea.l d0,a6
    bec0:	|            move.l 40(sp),d1
    bec4:	|            move.l 36(sp),d2
    bec8:	|            jsr -312(a6)
    becc:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    bed0:	|            movea.l 56(sp),a0
    bed4:	|            move.l (a0),d0
    bed6:	|            move.l 60(sp),-(sp)
    beda:	|            move.l d0,-(sp)
    bedc:	|            jsr bdd2 <saveStack>
    bee2:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    bee4:	|            moveq #8,d0
    bee6:	|            move.l d0,28(sp)
    beea:	|            clr.l 24(sp)
    beee:	|            move.l 1b5a2 <SysBase>,d0
    bef4:	|            movea.l d0,a6
    bef6:	|            move.l 28(sp),d0
    befa:	|            move.l 24(sp),d1
    befe:	|            jsr -684(a6)
    bf02:	|            move.l d0,20(sp)
    bf06:	|            move.l 20(sp),d0
    bf0a:	|            move.l d0,48(sp)
	stackLibTotal ++;
    bf0e:	|            move.l 1b682 <stackLibTotal>,d0
    bf14:	|            addq.l #1,d0
    bf16:	|            move.l d0,1b682 <stackLibTotal>
	if (! s) {
    bf1c:	|            tst.l 48(sp)
    bf20:	|        /-- bne.s bf34 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    bf22:	|        |   pea 17fb6 <PutChar+0x16a0>
    bf28:	|        |   jsr 15fc6 <KPrintF>
    bf2e:	|        |   addq.l #4,sp
		return FALSE;
    bf30:	|        |   clr.w d0
    bf32:	+--------|-- bra.s bf54 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    bf34:	|        \-> move.l 1b686 <stackLib>,d0
    bf3a:	|            movea.l 48(sp),a0
    bf3e:	|            move.l d0,4(a0)
	s -> stack = vs;
    bf42:	|            movea.l 48(sp),a0
    bf46:	|            move.l 56(sp),(a0)
	stackLib = s;
    bf4a:	|            move.l 48(sp),1b686 <stackLib>
	return TRUE;
    bf52:	|            moveq #1,d0
}
    bf54:	\----------> move.l (sp)+,d2
    bf56:	             movea.l (sp)+,a6
    bf58:	             lea 44(sp),sp
    bf5c:	             rts

0000bf5e <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    bf5e:	          lea -12(sp),sp
    bf62:	          move.l a6,-(sp)
    bf64:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    bf66:	          move.l 28(sp),16(sp)
    bf6c:	          movea.l 24(sp),a0
    bf70:	          move.l (a0),d0
    bf72:	          move.l d0,12(sp)
    bf76:	          move.l 1b5aa <DOSBase>,d0
    bf7c:	          movea.l d0,a6
    bf7e:	          move.l 16(sp),d1
    bf82:	          move.l 12(sp),d2
    bf86:	          jsr -312(a6)
    bf8a:	          move.l d0,8(sp)
	switch (from -> varType) {
    bf8e:	          movea.l 24(sp),a0
    bf92:	          move.l (a0),d0
    bf94:	          moveq #9,d1
    bf96:	          cmp.l d0,d1
    bf98:	      /-- bcs.w c048 <saveVariable+0xea>
    bf9c:	      |   add.l d0,d0
    bf9e:	      |   movea.l d0,a0
    bfa0:	      |   adda.l #49068,a0
    bfa6:	      |   move.w (a0),d0
    bfa8:	      |   jmp (bfac <saveVariable+0x4e>,pc,d0.w)
    bfac:	      |   ori.l #1310740,(a0)+
    bfb2:	      |   ori.b #20,(20,a0,d0.w)
    bfb8:	      |   .short 0x004c
    bfba:	      |   ori.b #126,(a4)
    bfbe:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    bfc2:	      |   ori.b #40,(a0)+
    bfc6:	      |   ori.b #47,d4
    bfca:	      |   ori.b #0,(a4)+
    bfce:	      |   jsr 958 <put4bytes>
    bfd4:	      |   addq.l #8,sp
		return TRUE;
    bfd6:	      |   moveq #1,d0
    bfd8:	/-----|-- bra.w c084 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    bfdc:	|     |   movea.l 24(sp),a0
    bfe0:	|     |   move.l 4(a0),d0
    bfe4:	|     |   move.l 28(sp),-(sp)
    bfe8:	|     |   move.l d0,-(sp)
    bfea:	|     |   jsr bd8 <writeString>
    bff0:	|     |   addq.l #8,sp
		return TRUE;
    bff2:	|     |   moveq #1,d0
    bff4:	+-----|-- bra.w c084 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    bff8:	|     |   movea.l 24(sp),a0
    bffc:	|     |   move.l 4(a0),d0
    c000:	|     |   move.l 28(sp),-(sp)
    c004:	|     |   move.l d0,-(sp)
    c006:	|     |   jsr be36 <saveStackRef>
    c00c:	|     |   addq.l #8,sp
    c00e:	+-----|-- bra.s c084 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    c010:	|     |   movea.l 24(sp),a0
    c014:	|     |   move.l 4(a0),d0
    c018:	|     |   move.l 28(sp),-(sp)
    c01c:	|     |   move.l d0,-(sp)
    c01e:	|     |   jsr a1cc <saveCostume>
    c024:	|     |   addq.l #8,sp
		return FALSE;
    c026:	|     |   clr.w d0
    c028:	+-----|-- bra.s c084 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    c02a:	|     |   movea.l 24(sp),a0
    c02e:	|     |   move.l 4(a0),d0
    c032:	|     |   move.l 28(sp),-(sp)
    c036:	|     |   move.l d0,-(sp)
    c038:	|     |   jsr a102 <saveAnim>
    c03e:	|     |   addq.l #8,sp
		return FALSE;
    c040:	|     |   clr.w d0
    c042:	+-----|-- bra.s c084 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    c044:	|     |   clr.w d0
    c046:	+-----|-- bra.s c084 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    c048:	|     \-> movea.l 24(sp),a0
    c04c:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    c04e:	|         moveq #10,d1
    c050:	|         cmp.l d0,d1
    c052:	|  /----- bcs.s c06c <saveVariable+0x10e>
						typeName[from->varType] :
    c054:	|  |      movea.l 24(sp),a0
    c058:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    c05a:	|  |      add.l d0,d0
    c05c:	|  |      movea.l d0,a1
    c05e:	|  |      adda.l d0,a1
    c060:	|  |      lea 1b480 <typeName>,a0
    c066:	|  |      move.l (0,a1,a0.l),d0
    c06a:	|  |  /-- bra.s c072 <saveVariable+0x114>
    c06c:	|  \--|-> move.l #98267,d0
    c072:	|     \-> move.l d0,-(sp)
    c074:	|         pea 17fe2 <PutChar+0x16cc>
    c07a:	|         jsr 15fc6 <KPrintF>
    c080:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    c082:	|         moveq #1,d0
    c084:	\-------> move.l (sp)+,d2
    c086:	          movea.l (sp)+,a6
    c088:	          lea 12(sp),sp
    c08c:	          rts

0000c08e <CsiCheckInput>:
extern struct inputType input;

counterx_old = 0;
countery_old = 0;

void CsiCheckInput() {
    c08e:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    c092:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    c09a:	          movea.l 4(sp),a0
    c09e:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    c0a4:	          movea.l 4(sp),a0
    c0a8:	          move.w 10(a0),d0
    c0ac:	          lsr.w #8,d0
    c0ae:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    c0b2:	          movea.l 4(sp),a0
    c0b6:	          move.w 10(a0),d0
    c0ba:	          move.b d0,(sp)

    if(counterx_new)
    c0bc:	/-------- beq.w c164 <CsiCheckInput+0xd6>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    c0c0:	|         clr.w d1
    c0c2:	|         move.b (sp),d1
    c0c4:	|         move.l 1b68e <counterx_old>,d0
    c0ca:	|         move.l d0,d0
    c0cc:	|         sub.w d0,d1
    c0ce:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    c0d2:	|         cmpi.w #128,10(sp)
    c0d8:	|     /-- blt.s c0f0 <CsiCheckInput+0x62>
            input.justMoved = TRUE;                
    c0da:	|     |   move.w #1,1b558 <input+0x4>
            counterx_diff -= 256;    
    c0e2:	|     |   move.w 10(sp),d0
    c0e6:	|     |   addi.w #-256,d0
    c0ea:	|     |   move.w d0,10(sp)
    c0ee:	|  /--|-- bra.s c11c <CsiCheckInput+0x8e>
        } else if (counterx_diff < -128) {
    c0f0:	|  |  \-> cmpi.w #-129,10(sp)
    c0f6:	|  |  /-- bgt.s c10e <CsiCheckInput+0x80>
            counterx_diff += 256;
    c0f8:	|  |  |   move.w 10(sp),d0
    c0fc:	|  |  |   addi.w #256,d0
    c100:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    c104:	|  |  |   move.w #1,1b558 <input+0x4>
    c10c:	|  +--|-- bra.s c11c <CsiCheckInput+0x8e>
        } else if (counterx_diff) {
    c10e:	|  |  \-> tst.w 10(sp)
    c112:	|  +----- beq.s c11c <CsiCheckInput+0x8e>
            input.justMoved = TRUE;
    c114:	|  |      move.w #1,1b558 <input+0x4>
        }

        input.mouseX += counterx_diff;
    c11c:	|  \----> move.l 1b55e <input+0xa>,d0
    c122:	|         movea.w 10(sp),a0
    c126:	|         add.l a0,d0
    c128:	|         move.l d0,1b55e <input+0xa>

        if( input.mouseX > (int) winWidth) {
    c12e:	|         move.l 1b55e <input+0xa>,d1
    c134:	|         move.l 1b4f6 <winWidth>,d0
    c13a:	|         cmp.l d1,d0
    c13c:	|     /-- bge.s c14c <CsiCheckInput+0xbe>
            input.mouseX = winWidth;            
    c13e:	|     |   move.l 1b4f6 <winWidth>,d0
    c144:	|     |   move.l d0,1b55e <input+0xa>
    c14a:	|  /--|-- bra.s c15a <CsiCheckInput+0xcc>
        }
        else if(input.mouseX < 0) {
    c14c:	|  |  \-> move.l 1b55e <input+0xa>,d0
    c152:	|  +----- bpl.s c15a <CsiCheckInput+0xcc>
            input.mouseX = 0;
    c154:	|  |      clr.l 1b55e <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    c15a:	|  \----> moveq #0,d0
    c15c:	|         move.b (sp),d0
    c15e:	|         move.l d0,1b68e <counterx_old>
    }    

    if(countery_new)
    c164:	\-------> tst.b 1(sp)
    c168:	/-------- beq.w c214 <CsiCheckInput+0x186>
    {
        WORD countery_diff = countery_new - countery_old;
    c16c:	|         clr.w d1
    c16e:	|         move.b 1(sp),d1
    c172:	|         move.l 1b692 <countery_old>,d0
    c178:	|         move.l d0,d0
    c17a:	|         sub.w d0,d1
    c17c:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    c180:	|         cmpi.w #128,8(sp)
    c186:	|     /-- blt.s c19e <CsiCheckInput+0x110>
            input.justMoved = TRUE;                
    c188:	|     |   move.w #1,1b558 <input+0x4>
            countery_diff -= 256;    
    c190:	|     |   move.w 8(sp),d0
    c194:	|     |   addi.w #-256,d0
    c198:	|     |   move.w d0,8(sp)
    c19c:	|  /--|-- bra.s c1ca <CsiCheckInput+0x13c>
        } else if (countery_diff < -128) {
    c19e:	|  |  \-> cmpi.w #-129,8(sp)
    c1a4:	|  |  /-- bgt.s c1bc <CsiCheckInput+0x12e>
            input.justMoved = TRUE;                
    c1a6:	|  |  |   move.w #1,1b558 <input+0x4>
            countery_diff += 256;
    c1ae:	|  |  |   move.w 8(sp),d0
    c1b2:	|  |  |   addi.w #256,d0
    c1b6:	|  |  |   move.w d0,8(sp)
    c1ba:	|  +--|-- bra.s c1ca <CsiCheckInput+0x13c>
        } else if (countery_diff) {
    c1bc:	|  |  \-> tst.w 8(sp)
    c1c0:	|  +----- beq.s c1ca <CsiCheckInput+0x13c>
            input.justMoved = TRUE;
    c1c2:	|  |      move.w #1,1b558 <input+0x4>
        }

        input.mouseY += countery_diff;
    c1ca:	|  \----> move.l 1b562 <input+0xe>,d0
    c1d0:	|         movea.w 8(sp),a0
    c1d4:	|         add.l a0,d0
    c1d6:	|         move.l d0,1b562 <input+0xe>

        if( input.mouseY > (int) winHeight) {
    c1dc:	|         move.l 1b562 <input+0xe>,d1
    c1e2:	|         move.l 1b4fa <winHeight>,d0
    c1e8:	|         cmp.l d1,d0
    c1ea:	|     /-- bge.s c1fa <CsiCheckInput+0x16c>
            input.mouseY = winHeight;            
    c1ec:	|     |   move.l 1b4fa <winHeight>,d0
    c1f2:	|     |   move.l d0,1b562 <input+0xe>
    c1f8:	|  /--|-- bra.s c208 <CsiCheckInput+0x17a>
        }
        else if(input.mouseY < 0) {
    c1fa:	|  |  \-> move.l 1b562 <input+0xe>,d0
    c200:	|  +----- bpl.s c208 <CsiCheckInput+0x17a>
            input.mouseY = 0;
    c202:	|  |      clr.l 1b562 <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    c208:	|  \----> moveq #0,d0
    c20a:	|         move.b 1(sp),d0
    c20e:	|         move.l d0,1b692 <countery_old>
    } 

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    c214:	\-------> move.w 1b554 <input>,d0
    c21a:	      /-- beq.s c240 <CsiCheckInput+0x1b2>
    c21c:	      |   movea.l #12574721,a0
    c222:	      |   move.b (a0),d0
    c224:	      |   move.b d0,d0
    c226:	      |   andi.l #255,d0
    c22c:	      |   moveq #64,d1
    c22e:	      |   and.l d1,d0
    c230:	      +-- beq.s c240 <CsiCheckInput+0x1b2>
    {
        input.leftClick = FALSE;
    c232:	      |   clr.w 1b554 <input>
        input.leftRelease = TRUE;
    c238:	      |   move.w #1,1b55a <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    c240:	      \-> move.w 1b556 <input+0x2>,d0
    c246:	      /-- beq.s c26e <CsiCheckInput+0x1e0>
    c248:	      |   movea.l #14675990,a0
    c24e:	      |   move.w (a0),d0
    c250:	      |   move.w d0,d0
    c252:	      |   andi.l #65535,d0
    c258:	      |   andi.l #1024,d0
    c25e:	      +-- beq.s c26e <CsiCheckInput+0x1e0>
    {
        input.rightClick = FALSE;
    c260:	      |   clr.w 1b556 <input+0x2>
        input.rightRelease = TRUE;
    c266:	      |   move.w #1,1b55c <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    c26e:	      \-> movea.l #12574721,a0
    c274:	          move.b (a0),d0
    c276:	          move.b d0,d0
    c278:	          andi.l #255,d0
    c27e:	          moveq #64,d1
    c280:	          and.l d1,d0
    c282:	      /-- bne.s c28c <CsiCheckInput+0x1fe>
        input.leftClick = TRUE;        
    c284:	      |   move.w #1,1b554 <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    c28c:	      \-> movea.l #14675990,a0
    c292:	          move.w (a0),d0
    c294:	          move.w d0,d0
    c296:	          andi.l #65535,d0
    c29c:	          andi.l #1024,d0
    c2a2:	      /-- bne.s c2ac <CsiCheckInput+0x21e>
        input.rightClick = TRUE;
    c2a4:	      |   move.w #1,1b556 <input+0x2>
    }

    c2ac:	      \-> nop
    c2ae:	          lea 12(sp),sp
    c2b2:	          rts

0000c2b4 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    c2b4:	moveq #0,d0
}
    c2b6:	rts

0000c2b8 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    c2b8:	nop
    c2ba:	rts

0000c2bc <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    c2bc:	nop
    c2be:	rts

0000c2c0 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    c2c0:	moveq #1,d0
}
    c2c2:	rts

0000c2c4 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    c2c4:	nop
    c2c6:	rts

0000c2c8 <saveSounds>:

void saveSounds (BPTR fp) {
    c2c8:	lea -12(sp),sp
    c2cc:	move.l a6,-(sp)
    c2ce:	move.l d2,-(sp)
	FPutC (fp,0);
    c2d0:	move.l 24(sp),16(sp)
    c2d6:	clr.l 12(sp)
    c2da:	move.l 1b5aa <DOSBase>,d0
    c2e0:	movea.l d0,a6
    c2e2:	move.l 16(sp),d1
    c2e6:	move.l 12(sp),d2
    c2ea:	jsr -312(a6)
    c2ee:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    c2f2:	move.l 1af3e <defSoundVol>,d0
    c2f8:	move.l 24(sp),-(sp)
    c2fc:	move.l d0,-(sp)
    c2fe:	jsr 8d0 <put2bytes>
    c304:	addq.l #8,sp
	put2bytes (defVol, fp);
    c306:	move.l 1af3a <defVol>,d0
    c30c:	move.l 24(sp),-(sp)
    c310:	move.l d0,-(sp)
    c312:	jsr 8d0 <put2bytes>
    c318:	addq.l #8,sp
}
    c31a:	nop
    c31c:	move.l (sp)+,d2
    c31e:	movea.l (sp)+,a6
    c320:	lea 12(sp),sp
    c324:	rts

0000c326 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    c326:	move.l 4(sp),1af3a <defVol>
}
    c32e:	nop
    c330:	rts

0000c332 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    c332:	move.l 4(sp),1af3e <defSoundVol>
}
    c33a:	nop
    c33c:	rts

0000c33e <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    c33e:	nop
    c340:	rts

0000c342 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    c342:	nop
    c344:	rts

0000c346 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    c346:	nop
    c348:	rts

0000c34a <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    c34a:	subq.l #4,sp
    c34c:	move.l 12(sp),d0
    c350:	move.w d0,d0
    c352:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    c356:	moveq #1,d0
}
    c358:	addq.l #4,sp
    c35a:	rts

0000c35c <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    c35c:	nop
    c35e:	rts

0000c360 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    c360:	move.l 16(sp),-(sp)
    c364:	move.l 16(sp),-(sp)
    c368:	jsr e0e <CstBlankScreen>
    c36e:	addq.l #8,sp
}
    c370:	nop
    c372:	rts

0000c374 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    c374:	pea 18005 <PutChar+0x16ef>
    c37a:	jsr 15fc6 <KPrintF>
    c380:	addq.l #4,sp
}
    c382:	nop
    c384:	rts

0000c386 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    c386:	movea.l 8(sp),a1
    c38a:	movea.l 12(sp),a0
    c38e:	move.l 8(sp),d1
    c392:	move.l 4(sp),d0
    c396:	move.l a1,-(sp)
    c398:	move.l a0,-(sp)
    c39a:	move.l d1,-(sp)
    c39c:	move.l d0,-(sp)
    c39e:	jsr 2ebc <drawLine>
    c3a4:	lea 16(sp),sp
}
    c3a8:	nop
    c3aa:	rts

0000c3ac <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    c3ac:	movea.l 12(sp),a1
    c3b0:	movea.l 4(sp),a0
    c3b4:	move.l 8(sp),d1
    c3b8:	move.l 4(sp),d0
    c3bc:	move.l a1,-(sp)
    c3be:	move.l a0,-(sp)
    c3c0:	move.l d1,-(sp)
    c3c2:	move.l d0,-(sp)
    c3c4:	jsr 2ebc <drawLine>
    c3ca:	lea 16(sp),sp
}
    c3ce:	nop
    c3d0:	rts

0000c3d2 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    c3d2:	pea 1803e <PutChar+0x1728>
    c3d8:	jsr 15fc6 <KPrintF>
    c3de:	addq.l #4,sp
}
    c3e0:	nop
    c3e2:	rts

0000c3e4 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    c3e4:	jsr 14e8 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    c3ea:	pea 1b69e <backdropTextureName>
    c3f0:	pea 1 <_start+0x1>
    c3f4:	jsr 303e <deleteTextures>
    c3fa:	addq.l #8,sp
	backdropTextureName = 0;
    c3fc:	clr.l 1b69e <backdropTextureName>
	backdropExists = FALSE;
    c402:	clr.w 1b6a2 <backdropExists>
}
    c408:	nop
    c40a:	rts

0000c40c <killParallax>:

void killParallax () {
    c40c:	          lea -12(sp),sp
    c410:	          move.l a6,-(sp)
	while (parallaxStuff) {
    c412:	   /----- bra.s c47e <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    c414:	/--|----> move.l 1b6a4 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    c41c:	|  |      movea.l 12(sp),a0
    c420:	|  |      move.l 42(a0),d0
    c424:	|  |      move.l d0,1b6a4 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    c42a:	|  |      move.l 12(sp),d0
    c42e:	|  |      addq.l #4,d0
    c430:	|  |      move.l d0,-(sp)
    c432:	|  |      pea 1 <_start+0x1>
    c436:	|  |      jsr 303e <deleteTextures>
    c43c:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    c43e:	|  |      movea.l 12(sp),a0
    c442:	|  |      move.l (a0),d0
    c444:	|  |  /-- beq.s c45e <killParallax+0x52>
    c446:	|  |  |   movea.l 12(sp),a0
    c44a:	|  |  |   move.l (a0),8(sp)
    c44e:	|  |  |   move.l 1b5a2 <SysBase>,d0
    c454:	|  |  |   movea.l d0,a6
    c456:	|  |  |   movea.l 8(sp),a1
    c45a:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    c45e:	|  |  \-> tst.l 12(sp)
    c462:	|  |  /-- beq.s c47a <killParallax+0x6e>
    c464:	|  |  |   move.l 12(sp),4(sp)
    c46a:	|  |  |   move.l 1b5a2 <SysBase>,d0
    c470:	|  |  |   movea.l d0,a6
    c472:	|  |  |   movea.l 4(sp),a1
    c476:	|  |  |   jsr -690(a6)
		k = NULL;
    c47a:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    c47e:	|  \----> move.l 1b6a4 <parallaxStuff>,d0
    c484:	\-------- bne.s c414 <killParallax+0x8>
	}
}
    c486:	          nop
    c488:	          nop
    c48a:	          movea.l (sp)+,a6
    c48c:	          lea 12(sp),sp
    c490:	          rts

0000c492 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    c492:	       move.l 4(sp),-(sp)
    c496:	       jsr 5dca <openFileFromNum>
    c49c:	       addq.l #4,sp
    c49e:	       tst.l d0
    c4a0:	   /-- bne.s c4b2 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    c4a2:	   |   pea 1805f <PutChar+0x1749>
    c4a8:	   |   jsr 15fc6 <KPrintF>
    c4ae:	   |   addq.l #4,sp
		return;
    c4b0:	/--|-- bra.s c4d2 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    c4b2:	|  \-> move.l 1b58a <bigDataFile>,d0
    c4b8:	|      move.l 12(sp),-(sp)
    c4bc:	|      move.l 12(sp),-(sp)
    c4c0:	|      move.l d0,-(sp)
    c4c2:	|      jsr 1760 <CstLoadBackdrop>
    c4c8:	|      lea 12(sp),sp
	finishAccess ();
    c4cc:	|      jsr 5cc2 <finishAccess>
	
}
    c4d2:	\----> rts

0000c4d4 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    c4d4:	subq.l #8,sp
    c4d6:	movea.l 12(sp),a0
    c4da:	move.l 16(sp),d1
    c4de:	move.l 20(sp),d0
    c4e2:	movea.w a0,a0
    c4e4:	move.w a0,6(sp)
    c4e8:	move.w d1,d1
    c4ea:	move.w d1,4(sp)
    c4ee:	move.w d0,d0
    c4f0:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    c4f4:	pea 180ae <PutChar+0x1798>
    c4fa:	jsr 15fc6 <KPrintF>
    c500:	addq.l #4,sp

}
    c502:	nop
    c504:	addq.l #8,sp
    c506:	rts

0000c508 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    c508:	pea 180d1 <PutChar+0x17bb>
    c50e:	jsr 15fc6 <KPrintF>
    c514:	addq.l #4,sp
}
    c516:	nop
    c518:	rts

0000c51a <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    c51a:	pea 1b6a8 <snapshotTextureName>
    c520:	pea 1 <_start+0x1>
    c524:	jsr 303e <deleteTextures>
    c52a:	addq.l #8,sp
	snapshotTextureName = 0;
    c52c:	clr.l 1b6a8 <snapshotTextureName>
}
    c532:	nop
    c534:	rts

0000c536 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    c536:	clr.l 1b6b4 <cameraX>
	cameraY = 0;
    c53c:	clr.l 1b6b8 <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    c542:	move.l 1b69a <sceneHeight>,d0
    c548:	move.l d0,d1
    c54a:	move.l 1b696 <sceneWidth>,d0
    c550:	move.l d1,-(sp)
    c552:	move.l d0,-(sp)
    c554:	jsr 2a7e <CstReserveBackdrop>
    c55a:	addq.l #8,sp
}
    c55c:	rts

0000c55e <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    c55e:	jsr c3e4 <killBackDrop>
	killParallax ();
    c564:	jsr c40c <killParallax>
	killZBuffer ();
    c56a:	jsr 775e <killZBuffer>
	sceneWidth = x;
    c570:	move.l 4(sp),d0
    c574:	move.l d0,1b696 <sceneWidth>
	sceneHeight = y;
    c57a:	move.l 8(sp),d0
    c57e:	move.l d0,1b69a <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    c584:	pea 1810a <PutChar+0x17f4>
    c58a:	jsr 15fc6 <KPrintF>
    c590:	addq.l #4,sp
	return reserveBackdrop();
    c592:	jsr c536 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    c598:	rts

0000c59a <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    c59a:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    c59c:	move.l 12(sp),-(sp)
    c5a0:	jsr 6bc <get2bytes>
    c5a6:	addq.l #4,sp
    c5a8:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    c5ac:	move.l 12(sp),-(sp)
    c5b0:	jsr 6bc <get2bytes>
    c5b6:	addq.l #4,sp
    c5b8:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    c5ba:	moveq #1,d0
}
    c5bc:	addq.l #8,sp
    c5be:	rts

0000c5c0 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    c5c0:	   /-> lea -12(sp),sp
    c5c4:	   |   move.l a6,-(sp)
    c5c6:	   |   move.l d2,-(sp)
	if (me) {
    c5c8:	   |   tst.l 24(sp)
    c5cc:	/--|-- beq.w c662 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    c5d0:	|  |   movea.l 24(sp),a0
    c5d4:	|  |   move.l 42(a0),d0
    c5d8:	|  |   move.l 28(sp),-(sp)
    c5dc:	|  |   move.l d0,-(sp)
    c5de:	|  \-- jsr c5c0 <saveParallaxRecursive>(pc)
    c5e2:	|      addq.l #8,sp
		FPutC (fp, 1);
    c5e4:	|      move.l 28(sp),16(sp)
    c5ea:	|      moveq #1,d0
    c5ec:	|      move.l d0,12(sp)
    c5f0:	|      move.l 1b5aa <DOSBase>,d0
    c5f6:	|      movea.l d0,a6
    c5f8:	|      move.l 16(sp),d1
    c5fc:	|      move.l 12(sp),d2
    c600:	|      jsr -312(a6)
    c604:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    c608:	|      movea.l 24(sp),a0
    c60c:	|      move.w 28(a0),d0
    c610:	|      move.w d0,d0
    c612:	|      andi.l #65535,d0
    c618:	|      move.l 28(sp),-(sp)
    c61c:	|      move.l d0,-(sp)
    c61e:	|      jsr 8d0 <put2bytes>
    c624:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    c626:	|      movea.l 24(sp),a0
    c62a:	|      move.w 30(a0),d0
    c62e:	|      move.w d0,d0
    c630:	|      andi.l #65535,d0
    c636:	|      move.l 28(sp),-(sp)
    c63a:	|      move.l d0,-(sp)
    c63c:	|      jsr 8d0 <put2bytes>
    c642:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    c644:	|      movea.l 24(sp),a0
    c648:	|      move.w 32(a0),d0
    c64c:	|      move.w d0,d0
    c64e:	|      andi.l #65535,d0
    c654:	|      move.l 28(sp),-(sp)
    c658:	|      move.l d0,-(sp)
    c65a:	|      jsr 8d0 <put2bytes>
    c660:	|      addq.l #8,sp
	}
}
    c662:	\----> nop
    c664:	       move.l (sp)+,d2
    c666:	       movea.l (sp)+,a6
    c668:	       lea 12(sp),sp
    c66c:	       rts

0000c66e <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    c66e:	pea 18131 <PutChar+0x181b>
    c674:	jsr 15fc6 <KPrintF>
    c67a:	addq.l #4,sp
	return TRUE;
    c67c:	moveq #1,d0
    c67e:	rts

0000c680 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    c680:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    c682:	             move.l 1b6ac <allObjectTypes>,(sp)

	while (huntType) {
    c688:	      /----- bra.s c6a0 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    c68a:	   /--|----> movea.l (sp),a0
    c68c:	   |  |      move.l 4(a0),d0
    c690:	   |  |      cmp.l 8(sp),d0
    c694:	   |  |  /-- bne.s c69a <findObjectType+0x1a>
    c696:	   |  |  |   move.l (sp),d0
    c698:	/--|--|--|-- bra.s c6b0 <findObjectType+0x30>
		huntType = huntType -> next;
    c69a:	|  |  |  \-> movea.l (sp),a0
    c69c:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    c6a0:	|  |  \----> tst.l (sp)
    c6a2:	|  \-------- bne.s c68a <findObjectType+0xa>
	}

	return loadObjectType (i);
    c6a4:	|            move.l 8(sp),-(sp)
    c6a8:	|            jsr c770 <loadObjectType>
    c6ae:	|            addq.l #4,sp
}
    c6b0:	\----------> addq.l #4,sp
    c6b2:	             rts

0000c6b4 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    c6b4:	             lea -12(sp),sp
	int i, num = 0;
    c6b8:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    c6bc:	             move.l 20(sp),-(sp)
    c6c0:	             jsr c680 <findObjectType>
    c6c6:	             addq.l #4,sp
    c6c8:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    c6ca:	             clr.l 8(sp)
    c6ce:	   /-------- bra.s c704 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    c6d0:	/--|-------> movea.l (sp),a0
    c6d2:	|  |         move.l 38(a0),d1
    c6d6:	|  |         move.l 8(sp),d0
    c6da:	|  |         lsl.l #3,d0
    c6dc:	|  |         movea.l d1,a0
    c6de:	|  |         adda.l d0,a0
    c6e0:	|  |         move.l (a0),d0
    c6e2:	|  |         cmp.l 16(sp),d0
    c6e6:	|  |  /----- bne.s c700 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    c6e8:	|  |  |      movea.l (sp),a0
    c6ea:	|  |  |      move.l 38(a0),d1
    c6ee:	|  |  |      move.l 8(sp),d0
    c6f2:	|  |  |      lsl.l #3,d0
    c6f4:	|  |  |      movea.l d1,a0
    c6f6:	|  |  |      adda.l d0,a0
    c6f8:	|  |  |      move.l 4(a0),4(sp)
			break;
    c6fe:	|  |  |  /-- bra.s c710 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    c700:	|  |  \--|-> addq.l #1,8(sp)
    c704:	|  \-----|-> movea.l (sp),a0
    c706:	|        |   move.l 16(a0),d0
    c70a:	|        |   cmp.l 8(sp),d0
    c70e:	\--------|-- bgt.s c6d0 <getCombinationFunction+0x1c>
		}
	}

	return num;
    c710:	         \-> move.l 4(sp),d0
}
    c714:	             lea 12(sp),sp
    c718:	             rts

0000c71a <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    c71a:	moveq #1,d0
}
    c71c:	rts

0000c71e <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    c71e:	subq.l #8,sp
    c720:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    c722:	move.l 16(sp),-(sp)
    c726:	jsr 6bc <get2bytes>
    c72c:	addq.l #4,sp
    c72e:	move.l d0,-(sp)
    c730:	jsr c770 <loadObjectType>
    c736:	addq.l #4,sp
    c738:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    c73c:	movea.l 8(sp),a0
    c740:	move.l (a0),4(sp)
    c744:	move.l 1b5a2 <SysBase>,d0
    c74a:	movea.l d0,a6
    c74c:	movea.l 4(sp),a1
    c750:	jsr -690(a6)
	r -> screenName = readString (fp);
    c754:	move.l 16(sp),-(sp)
    c758:	jsr b02 <readString>
    c75e:	addq.l #4,sp
    c760:	movea.l 8(sp),a0
    c764:	move.l d0,(a0)
	return r;
    c766:	move.l 8(sp),d0
}
    c76a:	movea.l (sp)+,a6
    c76c:	addq.l #8,sp
    c76e:	rts

0000c770 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    c770:	          lea -84(sp),sp
    c774:	          move.l a6,-(sp)
    c776:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    c778:	          moveq #42,d0
    c77a:	          move.l d0,84(sp)
    c77e:	          clr.l 80(sp)
    c782:	          move.l 1b5a2 <SysBase>,d0
    c788:	          movea.l d0,a6
    c78a:	          move.l 84(sp),d0
    c78e:	          move.l 80(sp),d1
    c792:	          jsr -684(a6)
    c796:	          move.l d0,76(sp)
    c79a:	          move.l 76(sp),d0
    c79e:	          move.l d0,72(sp)

    if (newType) {
    c7a2:	/-------- beq.w ca1c <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    c7a6:	|         move.l 96(sp),-(sp)
    c7aa:	|         jsr 5e92 <openObjectSlice>
    c7b0:	|         addq.l #4,sp
    c7b2:	|         tst.w d0
    c7b4:	+-------- beq.w ca1c <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    c7b8:	|         move.l 1b58a <bigDataFile>,d0
    c7be:	|         move.l d0,-(sp)
    c7c0:	|         jsr 6bc <get2bytes>
    c7c6:	|         addq.l #4,sp
    c7c8:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    c7cc:	|         move.l 1b58a <bigDataFile>,64(sp)
    c7d4:	|         move.l 1b5aa <DOSBase>,d0
    c7da:	|         movea.l d0,a6
    c7dc:	|         move.l 64(sp),d1
    c7e0:	|         jsr -306(a6)
    c7e4:	|         move.l d0,60(sp)
    c7e8:	|         move.l 60(sp),d0
    c7ec:	|         move.l d0,d0
    c7ee:	|         movea.l 72(sp),a0
    c7f2:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    c7f6:	|         move.l 1b58a <bigDataFile>,56(sp)
    c7fe:	|         move.l 1b5aa <DOSBase>,d0
    c804:	|         movea.l d0,a6
    c806:	|         move.l 56(sp),d1
    c80a:	|         jsr -306(a6)
    c80e:	|         move.l d0,52(sp)
    c812:	|         move.l 52(sp),d0
    c816:	|         move.l d0,d0
    c818:	|         movea.l 72(sp),a0
    c81c:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    c820:	|         move.l 1b58a <bigDataFile>,48(sp)
    c828:	|         move.l 1b5aa <DOSBase>,d0
    c82e:	|         movea.l d0,a6
    c830:	|         move.l 48(sp),d1
    c834:	|         jsr -306(a6)
    c838:	|         move.l d0,44(sp)
    c83c:	|         move.l 44(sp),d0
    c840:	|         move.l d0,d0
    c842:	|         movea.l 72(sp),a0
    c846:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    c84a:	|         move.l 1b58a <bigDataFile>,40(sp)
    c852:	|         move.l 1b5aa <DOSBase>,d0
    c858:	|         movea.l d0,a6
    c85a:	|         move.l 40(sp),d1
    c85e:	|         jsr -306(a6)
    c862:	|         move.l d0,36(sp)
    c866:	|         move.l 36(sp),d0
    c86a:	|         movea.l 72(sp),a0
    c86e:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    c872:	|         move.l 1b58a <bigDataFile>,32(sp)
    c87a:	|         move.l 1b5aa <DOSBase>,d0
    c880:	|         movea.l d0,a6
    c882:	|         move.l 32(sp),d1
    c886:	|         jsr -306(a6)
    c88a:	|         move.l d0,28(sp)
    c88e:	|         move.l 28(sp),d0
    c892:	|         movea.l 72(sp),a0
    c896:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    c89a:	|         move.l 1b58a <bigDataFile>,d0
    c8a0:	|         move.l d0,-(sp)
    c8a2:	|         jsr 718 <get4bytes>
    c8a8:	|         addq.l #4,sp
    c8aa:	|         movea.l 72(sp),a0
    c8ae:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    c8b2:	|         move.l 1b58a <bigDataFile>,d0
    c8b8:	|         move.l d0,-(sp)
    c8ba:	|         jsr 6bc <get2bytes>
    c8c0:	|         addq.l #4,sp
    c8c2:	|         movea.l 72(sp),a0
    c8c6:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    c8ca:	|         move.l 1b58a <bigDataFile>,24(sp)
    c8d2:	|         move.l 1b5aa <DOSBase>,d0
    c8d8:	|         movea.l d0,a6
    c8da:	|         move.l 24(sp),d1
    c8de:	|         jsr -306(a6)
    c8e2:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    c8e6:	|         move.l 1b58a <bigDataFile>,d0
    c8ec:	|         move.l d0,-(sp)
    c8ee:	|         jsr 7d8 <getFloat>
    c8f4:	|         addq.l #4,sp
            getFloat(bigDataFile);
    c8f6:	|         move.l 1b58a <bigDataFile>,d0
    c8fc:	|         move.l d0,-(sp)
    c8fe:	|         jsr 7d8 <getFloat>
    c904:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    c906:	|         move.l 1b58a <bigDataFile>,d0
    c90c:	|         move.l d0,-(sp)
    c90e:	|         jsr 6bc <get2bytes>
    c914:	|         addq.l #4,sp
    c916:	|         move.l d0,d0
    c918:	|         movea.l 72(sp),a0
    c91c:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    c920:	|         move.l 1b58a <bigDataFile>,d0
    c926:	|         move.l d0,-(sp)
    c928:	|         jsr 6bc <get2bytes>
    c92e:	|         addq.l #4,sp
    c930:	|         movea.l 72(sp),a0
    c934:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    c938:	|         movea.l 72(sp),a0
    c93c:	|         move.l 16(a0),d0
    c940:	|  /----- beq.s c972 <loadObjectType+0x202>
    c942:	|  |      movea.l 72(sp),a0
    c946:	|  |      move.l 16(a0),d0
    c94a:	|  |      lsl.l #3,d0
    c94c:	|  |      move.l d0,16(sp)
    c950:	|  |      clr.l 12(sp)
    c954:	|  |      move.l 1b5a2 <SysBase>,d0
    c95a:	|  |      movea.l d0,a6
    c95c:	|  |      move.l 16(sp),d0
    c960:	|  |      move.l 12(sp),d1
    c964:	|  |      jsr -684(a6)
    c968:	|  |      move.l d0,8(sp)
    c96c:	|  |      move.l 8(sp),d0
    c970:	|  |  /-- bra.s c974 <loadObjectType+0x204>
    c972:	|  \--|-> moveq #0,d0
    c974:	|     \-> movea.l 72(sp),a0
    c978:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    c97c:	|         clr.l 88(sp)
    c980:	|     /-- bra.s c9d0 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    c982:	|  /--|-> move.l 1b58a <bigDataFile>,d1
    c988:	|  |  |   movea.l 72(sp),a0
    c98c:	|  |  |   movea.l 38(a0),a0
    c990:	|  |  |   move.l 88(sp),d0
    c994:	|  |  |   lsl.l #3,d0
    c996:	|  |  |   lea (0,a0,d0.l),a2
    c99a:	|  |  |   move.l d1,-(sp)
    c99c:	|  |  |   jsr 6bc <get2bytes>
    c9a2:	|  |  |   addq.l #4,sp
    c9a4:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    c9a6:	|  |  |   move.l 1b58a <bigDataFile>,d1
    c9ac:	|  |  |   movea.l 72(sp),a0
    c9b0:	|  |  |   movea.l 38(a0),a0
    c9b4:	|  |  |   move.l 88(sp),d0
    c9b8:	|  |  |   lsl.l #3,d0
    c9ba:	|  |  |   lea (0,a0,d0.l),a2
    c9be:	|  |  |   move.l d1,-(sp)
    c9c0:	|  |  |   jsr 6bc <get2bytes>
    c9c6:	|  |  |   addq.l #4,sp
    c9c8:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    c9cc:	|  |  |   addq.l #1,88(sp)
    c9d0:	|  |  \-> movea.l 72(sp),a0
    c9d4:	|  |      move.l 16(a0),d0
    c9d8:	|  |      cmp.l 88(sp),d0
    c9dc:	|  \----- bgt.s c982 <loadObjectType+0x212>
            }
            finishAccess();
    c9de:	|         jsr 5cc2 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    c9e4:	|         move.l 68(sp),-(sp)
    c9e8:	|         jsr 5ccc <getNumberedString>
    c9ee:	|         addq.l #4,sp
    c9f0:	|         movea.l 72(sp),a0
    c9f4:	|         move.l d0,(a0)
            newType->objectNum = i;
    c9f6:	|         movea.l 72(sp),a0
    c9fa:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    ca00:	|         move.l 1b6ac <allObjectTypes>,d0
    ca06:	|         movea.l 72(sp),a0
    ca0a:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    ca0e:	|         move.l 72(sp),1b6ac <allObjectTypes>
            return newType;
    ca16:	|         move.l 72(sp),d0
    ca1a:	|     /-- bra.s ca1e <loadObjectType+0x2ae>
        }
    }
    return NULL;
    ca1c:	\-----|-> moveq #0,d0
}
    ca1e:	      \-> movea.l (sp)+,a2
    ca20:	          movea.l (sp)+,a6
    ca22:	          lea 84(sp),sp
    ca26:	          rts

0000ca28 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    ca28:	             lea -16(sp),sp
    ca2c:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    ca2e:	             move.l #112300,16(sp)

	while (* huntRegion) {
    ca36:	   /-------- bra.s caaa <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    ca38:	/--|-------> movea.l 16(sp),a0
    ca3c:	|  |         move.l (a0),d0
    ca3e:	|  |         cmp.l 24(sp),d0
    ca42:	|  |  /----- bne.s ca9c <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    ca44:	|  |  |      movea.l 24(sp),a0
    ca48:	|  |  |      move.l 8(a0),d0
    ca4c:	|  |  |      movea.l 16(sp),a0
    ca50:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    ca52:	|  |  |      movea.l 24(sp),a0
    ca56:	|  |  |      move.l 38(a0),12(sp)
    ca5c:	|  |  |      move.l 1b5a2 <SysBase>,d0
    ca62:	|  |  |      movea.l d0,a6
    ca64:	|  |  |      movea.l 12(sp),a1
    ca68:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    ca6c:	|  |  |      movea.l 24(sp),a0
    ca70:	|  |  |      move.l (a0),8(sp)
    ca74:	|  |  |      move.l 1b5a2 <SysBase>,d0
    ca7a:	|  |  |      movea.l d0,a6
    ca7c:	|  |  |      movea.l 8(sp),a1
    ca80:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    ca84:	|  |  |      move.l 24(sp),4(sp)
    ca8a:	|  |  |      move.l 1b5a2 <SysBase>,d0
    ca90:	|  |  |      movea.l d0,a6
    ca92:	|  |  |      movea.l 4(sp),a1
    ca96:	|  |  |      jsr -690(a6)
			return;
    ca9a:	|  |  |  /-- bra.s cac0 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    ca9c:	|  |  \--|-> movea.l 16(sp),a0
    caa0:	|  |     |   move.l (a0),d0
    caa2:	|  |     |   move.l d0,d1
    caa4:	|  |     |   addq.l #8,d1
    caa6:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    caaa:	|  \-----|-> movea.l 16(sp),a0
    caae:	|        |   move.l (a0),d0
    cab0:	\--------|-- bne.s ca38 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    cab2:	         |   pea 18158 <PutChar+0x1842>
    cab8:	         |   jsr 15fc6 <KPrintF>
    cabe:	         |   addq.l #4,sp
}
    cac0:	         \-> movea.l (sp)+,a6
    cac2:	             lea 16(sp),sp
    cac6:	             rts

0000cac8 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    cac8:	movea.l 4(sp),a0
    cacc:	move.l 4(a0),d0
    cad0:	move.l 8(sp),-(sp)
    cad4:	move.l d0,-(sp)
    cad6:	jsr 8d0 <put2bytes>
    cadc:	addq.l #8,sp
	writeString (r -> screenName, fp);
    cade:	movea.l 4(sp),a0
    cae2:	move.l (a0),d0
    cae4:	move.l 8(sp),-(sp)
    cae8:	move.l d0,-(sp)
    caea:	jsr bd8 <writeString>
    caf0:	addq.l #8,sp
    caf2:	nop
    caf4:	rts

0000caf6 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    caf6:	                         lea -112(sp),sp
    cafa:	                         move.l a6,-(sp)
    cafc:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    cafe:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    cb02:	                         move.w 1b6b2 <saveEncoding>,d0
    cb08:	                  /----- beq.s cb12 <fileToStack+0x1c>
    cb0a:	                  |      move.l #98686,d0
    cb10:	                  |  /-- bra.s cb18 <fileToStack+0x22>
    cb12:	                  \--|-> move.l #98712,d0
    cb18:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    cb1c:	                         move.l 124(sp),112(sp)
    cb22:	                         move.l #1005,108(sp)
    cb2a:	                         move.l 1b5aa <DOSBase>,d0
    cb30:	                         movea.l d0,a6
    cb32:	                         move.l 112(sp),d1
    cb36:	                         move.l 108(sp),d2
    cb3a:	                         jsr -30(a6)
    cb3e:	                         move.l d0,104(sp)
    cb42:	                         move.l 104(sp),d0
    cb46:	                         move.l d0,100(sp)
    if (!fp) {
    cb4a:	                     /-- bne.s cb64 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    cb4c:	                     |   move.l 124(sp),-(sp)
    cb50:	                     |   pea 181af <PutChar+0x1899>
    cb56:	                     |   jsr 15fc6 <KPrintF>
    cb5c:	                     |   addq.l #8,sp
        return FALSE;
    cb5e:	                     |   clr.w d0
    cb60:	/--------------------|-- bra.w ce5a <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    cb64:	|                    \-> move.w 1b6b2 <saveEncoding>,d0
    cb6a:	|                        move.l d0,d0
    cb6c:	|                        move.b d0,1b6b0 <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    cb72:	|                        move.w 1b6b2 <saveEncoding>,d0
    cb78:	|                        lsr.w #8,d0
    cb7a:	|                        move.l d0,d0
    cb7c:	|                        move.b d0,1b6b1 <encode2>

    while (*checker) {
    cb82:	|                 /----- bra.s cbe6 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    cb84:	|              /--|----> move.l 100(sp),30(sp)
    cb8a:	|              |  |      move.l 1b5aa <DOSBase>,d0
    cb90:	|              |  |      movea.l d0,a6
    cb92:	|              |  |      move.l 30(sp),d1
    cb96:	|              |  |      jsr -306(a6)
    cb9a:	|              |  |      move.l d0,26(sp)
    cb9e:	|              |  |      move.l 26(sp),d1
    cba2:	|              |  |      movea.l 116(sp),a0
    cba6:	|              |  |      move.b (a0),d0
    cba8:	|              |  |      ext.w d0
    cbaa:	|              |  |      movea.w d0,a0
    cbac:	|              |  |      cmpa.l d1,a0
    cbae:	|              |  |  /-- beq.s cbe2 <fileToStack+0xec>
            Close(fp);
    cbb0:	|              |  |  |   move.l 100(sp),22(sp)
    cbb6:	|              |  |  |   move.l 1b5aa <DOSBase>,d0
    cbbc:	|              |  |  |   movea.l d0,a6
    cbbe:	|              |  |  |   move.l 22(sp),d1
    cbc2:	|              |  |  |   jsr -36(a6)
    cbc6:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    cbca:	|              |  |  |   move.l 124(sp),-(sp)
    cbce:	|              |  |  |   pea 181bc <PutChar+0x18a6>
    cbd4:	|              |  |  |   jsr 15fc6 <KPrintF>
    cbda:	|              |  |  |   addq.l #8,sp
            return FALSE;
    cbdc:	|              |  |  |   clr.w d0
    cbde:	+--------------|--|--|-- bra.w ce5a <fileToStack+0x364>
        }
        checker++;
    cbe2:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    cbe6:	|              |  \----> movea.l 116(sp),a0
    cbea:	|              |         move.b (a0),d0
    cbec:	|              \-------- bne.s cb84 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    cbee:	|                        move.w 1b6b2 <saveEncoding>,d0
    cbf4:	|  /-------------------- beq.s cc68 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    cbf6:	|  |                     move.l 100(sp),-(sp)
    cbfa:	|  |                     jsr ce64 <readStringEncoded>
    cc00:	|  |                     addq.l #4,sp
    cc02:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    cc06:	|  |                     pea 181fd <PutChar+0x18e7>
    cc0c:	|  |                     move.l 100(sp),-(sp)
    cc10:	|  |                     jsr 12d40 <strcmp>
    cc16:	|  |                     addq.l #8,sp
    cc18:	|  |                     tst.l d0
    cc1a:	|  |                 /-- beq.s cc4e <fileToStack+0x158>
            Close(fp);
    cc1c:	|  |                 |   move.l 100(sp),88(sp)
    cc22:	|  |                 |   move.l 1b5aa <DOSBase>,d0
    cc28:	|  |                 |   movea.l d0,a6
    cc2a:	|  |                 |   move.l 88(sp),d1
    cc2e:	|  |                 |   jsr -36(a6)
    cc32:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    cc36:	|  |                 |   move.l 124(sp),-(sp)
    cc3a:	|  |                 |   pea 1820c <PutChar+0x18f6>
    cc40:	|  |                 |   jsr 15fc6 <KPrintF>
    cc46:	|  |                 |   addq.l #8,sp
            return FALSE;
    cc48:	|  |                 |   clr.w d0
    cc4a:	+--|-----------------|-- bra.w ce5a <fileToStack+0x364>
        }
        FreeVec(checker);
    cc4e:	|  |                 \-> move.l 96(sp),92(sp)
    cc54:	|  |                     move.l 1b5a2 <SysBase>,d0
    cc5a:	|  |                     movea.l d0,a6
    cc5c:	|  |                     movea.l 92(sp),a1
    cc60:	|  |                     jsr -690(a6)
        checker = NULL;
    cc64:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    cc68:	|  >-------------------> move.w 1b6b2 <saveEncoding>,d0
    cc6e:	|  |     /-------------- beq.w cda2 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    cc72:	|  |     |               move.l 100(sp),76(sp)
    cc78:	|  |     |               move.l 1b5aa <DOSBase>,d0
    cc7e:	|  |     |               movea.l d0,a6
    cc80:	|  |     |               move.l 76(sp),d1
    cc84:	|  |     |               jsr -306(a6)
    cc88:	|  |     |               move.l d0,72(sp)
    cc8c:	|  |     |               move.l 72(sp),d0
    cc90:	|  |     |               move.b 1b6b0 <encode1>,d1
    cc96:	|  |     |               ext.w d1
    cc98:	|  |     |               ext.l d1
    cc9a:	|  |     |               move.l d0,d2
    cc9c:	|  |     |               eor.l d1,d2
    cc9e:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    cca2:	|  |     |               moveq #-1,d0
    cca4:	|  |     |               cmp.l 68(sp),d0
    cca8:	|  |  /--|-------------- beq.w ce38 <fileToStack+0x342>

            char i = (char) tmp;
    ccac:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    ccb2:	|  |  |  |               move.b 67(sp),d0
    ccb6:	|  |  |  |               ext.w d0
    ccb8:	|  |  |  |               movea.w d0,a0
    ccba:	|  |  |  |               moveq #2,d2
    ccbc:	|  |  |  |               cmp.l a0,d2
    ccbe:	|  |  |  |     /-------- beq.s cd3a <fileToStack+0x244>
    ccc0:	|  |  |  |     |         moveq #2,d0
    ccc2:	|  |  |  |     |         cmp.l a0,d0
    ccc4:	|  |  |  |  /--|-------- blt.w cd70 <fileToStack+0x27a>
    ccc8:	|  |  |  |  |  |         cmpa.w #0,a0
    cccc:	|  |  |  |  |  |     /-- beq.s ccd8 <fileToStack+0x1e2>
    ccce:	|  |  |  |  |  |     |   moveq #1,d2
    ccd0:	|  |  |  |  |  |     |   cmp.l a0,d2
    ccd2:	|  |  |  |  |  |  /--|-- beq.s cd14 <fileToStack+0x21e>
    ccd4:	|  |  |  |  +--|--|--|-- bra.w cd70 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    ccd8:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    ccdc:	|  |  |  |  |  |  |      jsr ce64 <readStringEncoded>
    cce2:	|  |  |  |  |  |  |      addq.l #4,sp
    cce4:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    cce8:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    ccec:	|  |  |  |  |  |  |      lea 14(sp),a0
    ccf0:	|  |  |  |  |  |  |      move.l a0,-(sp)
    ccf2:	|  |  |  |  |  |  |      jsr 13ab6 <makeTextVar>
    ccf8:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    ccfa:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    cd00:	|  |  |  |  |  |  |      move.l 1b5a2 <SysBase>,d0
    cd06:	|  |  |  |  |  |  |      movea.l d0,a6
    cd08:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    cd0c:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    cd10:	|  |  |  |  |  |  |  /-- bra.w cdc8 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    cd14:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    cd18:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    cd1e:	|  |  |  |  |  |     |   addq.l #4,sp
    cd20:	|  |  |  |  |  |     |   move.l d0,-(sp)
    cd22:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    cd26:	|  |  |  |  |  |     |   lea 18(sp),a0
    cd2a:	|  |  |  |  |  |     |   move.l a0,-(sp)
    cd2c:	|  |  |  |  |  |     |   jsr 14186 <setVariable>
    cd32:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    cd36:	|  |  |  |  |  |     +-- bra.w cdc8 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    cd3a:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    cd40:	|  |  |  |  |        |   move.l 1b5aa <DOSBase>,d0
    cd46:	|  |  |  |  |        |   movea.l d0,a6
    cd48:	|  |  |  |  |        |   move.l 62(sp),d1
    cd4c:	|  |  |  |  |        |   jsr -306(a6)
    cd50:	|  |  |  |  |        |   move.l d0,58(sp)
    cd54:	|  |  |  |  |        |   move.l 58(sp),d0
    cd58:	|  |  |  |  |        |   move.l d0,-(sp)
    cd5a:	|  |  |  |  |        |   pea 1 <_start+0x1>
    cd5e:	|  |  |  |  |        |   lea 18(sp),a0
    cd62:	|  |  |  |  |        |   move.l a0,-(sp)
    cd64:	|  |  |  |  |        |   jsr 14186 <setVariable>
    cd6a:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    cd6e:	|  |  |  |  |        +-- bra.s cdc8 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    cd70:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    cd74:	|  |  |  |           |   pea 1828e <PutChar+0x1978>
    cd7a:	|  |  |  |           |   jsr 15fc6 <KPrintF>
    cd80:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    cd82:	|  |  |  |           |   move.l 100(sp),46(sp)
    cd88:	|  |  |  |           |   move.l 1b5aa <DOSBase>,d0
    cd8e:	|  |  |  |           |   movea.l d0,a6
    cd90:	|  |  |  |           |   move.l 46(sp),d1
    cd94:	|  |  |  |           |   jsr -36(a6)
    cd98:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    cd9c:	|  |  |  |           |   clr.w d0
    cd9e:	+--|--|--|-----------|-- bra.w ce5a <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    cda2:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    cda6:	|  |  |              |   jsr cf2a <readTextPlain>
    cdac:	|  |  |              |   addq.l #4,sp
    cdae:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    cdb2:	|  |  |        /-----|-- beq.w ce3c <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    cdb6:	|  |  |        |     |   move.l 80(sp),-(sp)
    cdba:	|  |  |        |     |   lea 14(sp),a0
    cdbe:	|  |  |        |     |   move.l a0,-(sp)
    cdc0:	|  |  |        |     |   jsr 13ab6 <makeTextVar>
    cdc6:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    cdc8:	|  |  |        |     \-> movea.l 128(sp),a0
    cdcc:	|  |  |        |         move.l (a0),d0
    cdce:	|  |  |        |  /----- bne.s cdfe <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    cdd0:	|  |  |        |  |      move.l 128(sp),d0
    cdd4:	|  |  |        |  |      move.l d0,-(sp)
    cdd6:	|  |  |        |  |      lea 14(sp),a0
    cdda:	|  |  |        |  |      move.l a0,-(sp)
    cddc:	|  |  |        |  |      jsr 13156 <addVarToStackQuick>
    cde2:	|  |  |        |  |      addq.l #8,sp
    cde4:	|  |  |        |  |      tst.w d0
    cde6:	|  |  |        |  |  /-- bne.s cdec <fileToStack+0x2f6>
    cde8:	|  |  |        |  |  |   clr.w d0
    cdea:	+--|--|--------|--|--|-- bra.s ce5a <fileToStack+0x364>
            sH->last = sH->first;
    cdec:	|  |  |        |  |  \-> movea.l 128(sp),a0
    cdf0:	|  |  |        |  |      move.l (a0),d0
    cdf2:	|  |  |        |  |      movea.l 128(sp),a0
    cdf6:	|  |  |        |  |      move.l d0,4(a0)
    cdfa:	|  +--|--------|--|----- bra.w cc68 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    cdfe:	|  |  |        |  \----> movea.l 128(sp),a0
    ce02:	|  |  |        |         move.l 4(a0),d0
    ce06:	|  |  |        |         addq.l #8,d0
    ce08:	|  |  |        |         move.l d0,-(sp)
    ce0a:	|  |  |        |         lea 14(sp),a0
    ce0e:	|  |  |        |         move.l a0,-(sp)
    ce10:	|  |  |        |         jsr 13156 <addVarToStackQuick>
    ce16:	|  |  |        |         addq.l #8,sp
    ce18:	|  |  |        |         tst.w d0
    ce1a:	|  |  |        |     /-- bne.s ce20 <fileToStack+0x32a>
    ce1c:	|  |  |        |     |   clr.w d0
    ce1e:	+--|--|--------|-----|-- bra.s ce5a <fileToStack+0x364>
            sH->last = sH->last->next;
    ce20:	|  |  |        |     \-> movea.l 128(sp),a0
    ce24:	|  |  |        |         movea.l 4(a0),a0
    ce28:	|  |  |        |         move.l 8(a0),d0
    ce2c:	|  |  |        |         movea.l 128(sp),a0
    ce30:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    ce34:	|  \--|--------|-------- bra.w cc68 <fileToStack+0x172>
            if (tmp == -1) break;
    ce38:	|     \--------|-------> nop
    ce3a:	|              |     /-- bra.s ce3e <fileToStack+0x348>
            if (!line) break;
    ce3c:	|              \-----|-> nop
        }
    }
    Close(fp);
    ce3e:	|                    \-> move.l 100(sp),38(sp)
    ce44:	|                        move.l 1b5aa <DOSBase>,d0
    ce4a:	|                        movea.l d0,a6
    ce4c:	|                        move.l 38(sp),d1
    ce50:	|                        jsr -36(a6)
    ce54:	|                        move.l d0,34(sp)
    return TRUE;
    ce58:	|                        moveq #1,d0
}
    ce5a:	\----------------------> move.l (sp)+,d2
    ce5c:	                         movea.l (sp)+,a6
    ce5e:	                         lea 112(sp),sp
    ce62:	                         rts

0000ce64 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    ce64:	          lea -32(sp),sp
    ce68:	          move.l a6,-(sp)
    ce6a:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    ce6c:	          move.l 44(sp),-(sp)
    ce70:	          jsr 6bc <get2bytes>
    ce76:	          addq.l #4,sp
    ce78:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    ce7c:	          move.l 32(sp),d0
    ce80:	          addq.l #1,d0
    ce82:	          move.l d0,28(sp)
    ce86:	          clr.l 24(sp)
    ce8a:	          move.l 1b5a2 <SysBase>,d0
    ce90:	          movea.l d0,a6
    ce92:	          move.l 28(sp),d0
    ce96:	          move.l 24(sp),d1
    ce9a:	          jsr -684(a6)
    ce9e:	          move.l d0,20(sp)
    cea2:	          move.l 20(sp),d0
    cea6:	          move.l d0,16(sp)
    if (!s) return NULL;
    ceaa:	      /-- bne.s ceb0 <readStringEncoded+0x4c>
    ceac:	      |   moveq #0,d0
    ceae:	/-----|-- bra.s cf20 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    ceb0:	|     \-> clr.l 36(sp)
    ceb4:	|     /-- bra.s cf06 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    ceb6:	|  /--|-> move.l 44(sp),12(sp)
    cebc:	|  |  |   move.l 1b5aa <DOSBase>,d0
    cec2:	|  |  |   movea.l d0,a6
    cec4:	|  |  |   move.l 12(sp),d1
    cec8:	|  |  |   jsr -306(a6)
    cecc:	|  |  |   move.l d0,8(sp)
    ced0:	|  |  |   move.l 8(sp),d0
    ced4:	|  |  |   move.l d0,d1
    ced6:	|  |  |   move.b 1b6b0 <encode1>,d2
    cedc:	|  |  |   move.l 36(sp),d0
    cee0:	|  |  |   movea.l 16(sp),a0
    cee4:	|  |  |   adda.l d0,a0
    cee6:	|  |  |   move.b d1,d0
    cee8:	|  |  |   eor.b d2,d0
    ceea:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    ceec:	|  |  |   move.b 1b6b0 <encode1>,d0
    cef2:	|  |  |   move.b d0,d1
    cef4:	|  |  |   move.b 1b6b1 <encode2>,d0
    cefa:	|  |  |   add.b d1,d0
    cefc:	|  |  |   move.b d0,1b6b0 <encode1>
    for (a = 0; a < len; a++) {
    cf02:	|  |  |   addq.l #1,36(sp)
    cf06:	|  |  \-> move.l 36(sp),d0
    cf0a:	|  |      cmp.l 32(sp),d0
    cf0e:	|  \----- blt.s ceb6 <readStringEncoded+0x52>
    }
    s[len] = 0;
    cf10:	|         move.l 32(sp),d0
    cf14:	|         movea.l 16(sp),a0
    cf18:	|         adda.l d0,a0
    cf1a:	|         clr.b (a0)
    return s;
    cf1c:	|         move.l 16(sp),d0
}
    cf20:	\-------> move.l (sp)+,d2
    cf22:	          movea.l (sp)+,a6
    cf24:	          lea 32(sp),sp
    cf28:	          rts

0000cf2a <readTextPlain>:

char *readTextPlain(BPTR fp) {
    cf2a:	             lea -104(sp),sp
    cf2e:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    cf32:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    cf36:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    cf3c:	             move.l 124(sp),106(sp)
    cf42:	             clr.l 102(sp)
    cf46:	             clr.l 98(sp)
    cf4a:	             move.l 1b5aa <DOSBase>,d0
    cf50:	             movea.l d0,a6
    cf52:	             move.l 106(sp),d1
    cf56:	             move.l 102(sp),d2
    cf5a:	             move.l 98(sp),d3
    cf5e:	             jsr -66(a6)
    cf62:	             move.l d0,94(sp)
    cf66:	             move.l 94(sp),d0
    cf6a:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    cf6e:	   /-------- bra.s cfb2 <readTextPlain+0x88>
        tmp = FGetC(fp);
    cf70:	/--|-------> move.l 124(sp),22(sp)
    cf76:	|  |         move.l 1b5aa <DOSBase>,d0
    cf7c:	|  |         movea.l d0,a6
    cf7e:	|  |         move.l 22(sp),d1
    cf82:	|  |         jsr -306(a6)
    cf86:	|  |         move.l d0,18(sp)
    cf8a:	|  |         move.l 18(sp),d0
    cf8e:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    cf92:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    cf98:	|  |         cmpi.b #10,17(sp)
    cf9e:	|  |  /----- beq.s cfa8 <readTextPlain+0x7e>
    cfa0:	|  |  |      moveq #-1,d0
    cfa2:	|  |  |      cmp.l 110(sp),d0
    cfa6:	|  |  |  /-- bne.s cfae <readTextPlain+0x84>
            keepGoing = FALSE;
    cfa8:	|  |  \--|-> clr.w 114(sp)
    cfac:	|  +-----|-- bra.s cfb2 <readTextPlain+0x88>
        } else {
            stringSize++;
    cfae:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    cfb2:	|  \-------> tst.w 114(sp)
    cfb6:	\----------- bne.s cf70 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    cfb8:	             tst.l 116(sp)
    cfbc:	         /-- bne.s cfcc <readTextPlain+0xa2>
    cfbe:	         |   moveq #-1,d0
    cfc0:	         |   cmp.l 110(sp),d0
    cfc4:	         +-- bne.s cfcc <readTextPlain+0xa2>
        return NULL;
    cfc6:	         |   moveq #0,d0
    cfc8:	      /--|-- bra.w d0b2 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    cfcc:	      |  \-> move.l 124(sp),86(sp)
    cfd2:	      |      move.l 90(sp),82(sp)
    cfd8:	      |      moveq #-1,d0
    cfda:	      |      move.l d0,78(sp)
    cfde:	      |      move.l 1b5aa <DOSBase>,d0
    cfe4:	      |      movea.l d0,a6
    cfe6:	      |      move.l 86(sp),d1
    cfea:	      |      move.l 82(sp),d2
    cfee:	      |      move.l 78(sp),d3
    cff2:	      |      jsr -66(a6)
    cff6:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    cffa:	      |      move.l 116(sp),d0
    cffe:	      |      addq.l #1,d0
    d000:	      |      move.l d0,70(sp)
    d004:	      |      clr.l 66(sp)
    d008:	      |      move.l 1b5a2 <SysBase>,d0
    d00e:	      |      movea.l d0,a6
    d010:	      |      move.l 70(sp),d0
    d014:	      |      move.l 66(sp),d1
    d018:	      |      jsr -684(a6)
    d01c:	      |      move.l d0,62(sp)
    d020:	      |      move.l 62(sp),d0
    d024:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    d028:	      |  /-- bne.s d030 <readTextPlain+0x106>
    d02a:	      |  |   moveq #0,d0
    d02c:	      +--|-- bra.w d0b2 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    d030:	      |  \-> move.l 124(sp),54(sp)
    d036:	      |      move.l 58(sp),50(sp)
    d03c:	      |      moveq #1,d0
    d03e:	      |      move.l d0,46(sp)
    d042:	      |      move.l 116(sp),42(sp)
    d048:	      |      move.l 1b5aa <DOSBase>,d0
    d04e:	      |      movea.l d0,a6
    d050:	      |      move.l 54(sp),d1
    d054:	      |      move.l 50(sp),d2
    d058:	      |      move.l 46(sp),d3
    d05c:	      |      move.l 42(sp),d4
    d060:	      |      jsr -324(a6)
    d064:	      |      move.l d0,38(sp)
    d068:	      |      move.l 38(sp),d0
    d06c:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    d070:	      |      move.l 34(sp),d0
    d074:	      |      cmp.l 116(sp),d0
    d078:	      |  /-- beq.s d088 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    d07a:	      |  |   pea 182c3 <PutChar+0x19ad>
    d080:	      |  |   jsr 15fc6 <KPrintF>
    d086:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    d088:	      |  \-> move.l 124(sp),30(sp)
    d08e:	      |      move.l 1b5aa <DOSBase>,d0
    d094:	      |      movea.l d0,a6
    d096:	      |      move.l 30(sp),d1
    d09a:	      |      jsr -306(a6)
    d09e:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    d0a2:	      |      move.l 116(sp),d0
    d0a6:	      |      movea.l 58(sp),a0
    d0aa:	      |      adda.l d0,a0
    d0ac:	      |      clr.b (a0)
    }

    return reply;
    d0ae:	      |      move.l 58(sp),d0
}
    d0b2:	      \----> movem.l (sp)+,d2-d4/a6
    d0b6:	             lea 104(sp),sp
    d0ba:	             rts

0000d0bc <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    d0bc:	                      lea -144(sp),sp
    d0c0:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    d0c4:	                      move.l 160(sp),148(sp)
    d0ca:	                      move.l #1006,144(sp)
    d0d2:	                      move.l 1b5aa <DOSBase>,d0
    d0d8:	                      movea.l d0,a6
    d0da:	                      move.l 148(sp),d1
    d0de:	                      move.l 144(sp),d2
    d0e2:	                      jsr -30(a6)
    d0e6:	                      move.l d0,140(sp)
    d0ea:	                      move.l 140(sp),d0
    d0ee:	                      move.l d0,136(sp)

    if (!fp) {
    d0f2:	                  /-- bne.s d10c <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    d0f4:	                  |   move.l 160(sp),-(sp)
    d0f8:	                  |   pea 182e4 <PutChar+0x19ce>
    d0fe:	                  |   jsr 15fc6 <KPrintF>
    d104:	                  |   addq.l #8,sp
        return FALSE;
    d106:	                  |   clr.w d0
    d108:	/-----------------|-- bra.w d3c8 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    d10c:	|                 \-> movea.l 164(sp),a0
    d110:	|                     movea.l 4(a0),a0
    d114:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    d118:	|                     move.w 1b6b2 <saveEncoding>,d0
    d11e:	|                     move.l d0,d0
    d120:	|                     move.b d0,1b6b0 <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    d126:	|                     move.w 1b6b2 <saveEncoding>,d0
    d12c:	|                     lsr.w #8,d0
    d12e:	|                     move.l d0,d0
    d130:	|                     move.b d0,1b6b1 <encode2>

    if (saveEncoding) {
    d136:	|                     move.w 1b6b2 <saveEncoding>,d0
    d13c:	|                 /-- beq.s d18e <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    d13e:	|                 |   move.l 136(sp),116(sp)
    d144:	|                 |   move.l #98686,112(sp)
    d14c:	|                 |   moveq #99,d0
    d14e:	|                 |   not.b d0
    d150:	|                 |   add.l sp,d0
    d152:	|                 |   addi.l #-144,d0
    d158:	|                 |   move.l d0,108(sp)
    d15c:	|                 |   move.l 1b5aa <DOSBase>,d0
    d162:	|                 |   movea.l d0,a6
    d164:	|                 |   move.l 116(sp),d1
    d168:	|                 |   move.l 112(sp),d2
    d16c:	|                 |   move.l 108(sp),d3
    d170:	|                 |   jsr -354(a6)
    d174:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    d178:	|                 |   move.l 136(sp),-(sp)
    d17c:	|                 |   pea 181fd <PutChar+0x18e7>
    d182:	|                 |   jsr d3d2 <writeStringEncoded>
    d188:	|                 |   addq.l #8,sp
    d18a:	|  /--------------|-- bra.w d3a0 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    d18e:	|  |              \-> move.l 136(sp),132(sp)
    d194:	|  |                  move.l #98712,128(sp)
    d19c:	|  |                  moveq #99,d1
    d19e:	|  |                  not.b d1
    d1a0:	|  |                  add.l sp,d1
    d1a2:	|  |                  addi.l #-144,d1
    d1a8:	|  |                  move.l d1,124(sp)
    d1ac:	|  |                  move.l 1b5aa <DOSBase>,d0
    d1b2:	|  |                  movea.l d0,a6
    d1b4:	|  |                  move.l 132(sp),d1
    d1b8:	|  |                  move.l 128(sp),d2
    d1bc:	|  |                  move.l 124(sp),d3
    d1c0:	|  |                  jsr -354(a6)
    d1c4:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    d1c8:	|  +----------------- bra.w d3a0 <stackToFile+0x2e4>
        if (saveEncoding) {
    d1cc:	|  |  /-------------> move.w 1b6b2 <saveEncoding>,d0
    d1d2:	|  |  |     /-------- beq.w d324 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    d1d6:	|  |  |     |         movea.l 152(sp),a0
    d1da:	|  |  |     |         move.l (a0),d0
    d1dc:	|  |  |     |         moveq #1,d1
    d1de:	|  |  |     |         cmp.l d0,d1
    d1e0:	|  |  |     |     /-- beq.s d230 <stackToFile+0x174>
    d1e2:	|  |  |     |     |   moveq #3,d1
    d1e4:	|  |  |     |     |   cmp.l d0,d1
    d1e6:	|  |  |     |  /--|-- bne.w d2f2 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    d1ea:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    d1f0:	|  |  |     |  |  |   move.b 1b6b0 <encode1>,d0
    d1f6:	|  |  |     |  |  |   ext.w d0
    d1f8:	|  |  |     |  |  |   movea.w d0,a0
    d1fa:	|  |  |     |  |  |   move.l a0,72(sp)
    d1fe:	|  |  |     |  |  |   move.l 1b5aa <DOSBase>,d0
    d204:	|  |  |     |  |  |   movea.l d0,a6
    d206:	|  |  |     |  |  |   move.l 76(sp),d1
    d20a:	|  |  |     |  |  |   move.l 72(sp),d2
    d20e:	|  |  |     |  |  |   jsr -312(a6)
    d212:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    d216:	|  |  |     |  |  |   movea.l 152(sp),a0
    d21a:	|  |  |     |  |  |   move.l 4(a0),d0
    d21e:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    d222:	|  |  |     |  |  |   move.l d0,-(sp)
    d224:	|  |  |     |  |  |   jsr d3d2 <writeStringEncoded>
    d22a:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    d22c:	|  |  |  /--|--|--|-- bra.w d396 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    d230:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    d234:	|  |  |  |  |  |      move.l 4(a0),d0
    d238:	|  |  |  |  |  |  /-- bmi.s d2a8 <stackToFile+0x1ec>
    d23a:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    d23e:	|  |  |  |  |  |  |   move.l 4(a0),d0
    d242:	|  |  |  |  |  |  |   cmpi.l #255,d0
    d248:	|  |  |  |  |  |  +-- bgt.s d2a8 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    d24a:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    d250:	|  |  |  |  |  |  |   move.b 1b6b0 <encode1>,d0
    d256:	|  |  |  |  |  |  |   eori.b #2,d0
    d25a:	|  |  |  |  |  |  |   ext.w d0
    d25c:	|  |  |  |  |  |  |   movea.w d0,a0
    d25e:	|  |  |  |  |  |  |   move.l a0,60(sp)
    d262:	|  |  |  |  |  |  |   move.l 1b5aa <DOSBase>,d0
    d268:	|  |  |  |  |  |  |   movea.l d0,a6
    d26a:	|  |  |  |  |  |  |   move.l 64(sp),d1
    d26e:	|  |  |  |  |  |  |   move.l 60(sp),d2
    d272:	|  |  |  |  |  |  |   jsr -312(a6)
    d276:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    d27a:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    d280:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    d284:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    d28a:	|  |  |  |  |  |  |   move.l 1b5aa <DOSBase>,d0
    d290:	|  |  |  |  |  |  |   movea.l d0,a6
    d292:	|  |  |  |  |  |  |   move.l 52(sp),d1
    d296:	|  |  |  |  |  |  |   move.l 48(sp),d2
    d29a:	|  |  |  |  |  |  |   jsr -312(a6)
    d29e:	|  |  |  |  |  |  |   move.l d0,44(sp)
    d2a2:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    d2a4:	|  |  |  +--|--|--|-- bra.w d396 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    d2a8:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    d2ae:	|  |  |  |  |  |      move.b 1b6b0 <encode1>,d0
    d2b4:	|  |  |  |  |  |      eori.b #1,d0
    d2b8:	|  |  |  |  |  |      ext.w d0
    d2ba:	|  |  |  |  |  |      movea.w d0,a0
    d2bc:	|  |  |  |  |  |      move.l a0,36(sp)
    d2c0:	|  |  |  |  |  |      move.l 1b5aa <DOSBase>,d0
    d2c6:	|  |  |  |  |  |      movea.l d0,a6
    d2c8:	|  |  |  |  |  |      move.l 40(sp),d1
    d2cc:	|  |  |  |  |  |      move.l 36(sp),d2
    d2d0:	|  |  |  |  |  |      jsr -312(a6)
    d2d4:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    d2d8:	|  |  |  |  |  |      movea.l 152(sp),a0
    d2dc:	|  |  |  |  |  |      move.l 4(a0),d0
    d2e0:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    d2e4:	|  |  |  |  |  |      move.l d0,-(sp)
    d2e6:	|  |  |  |  |  |      jsr 958 <put4bytes>
    d2ec:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    d2ee:	|  |  |  +--|--|----- bra.w d396 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    d2f2:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    d2f6:	|  |  |  |  |         pea 182f6 <PutChar+0x19e0>
    d2fc:	|  |  |  |  |         jsr 15fc6 <KPrintF>
    d302:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    d304:	|  |  |  |  |         move.l 136(sp),28(sp)
    d30a:	|  |  |  |  |         move.l 1b5aa <DOSBase>,d0
    d310:	|  |  |  |  |         movea.l d0,a6
    d312:	|  |  |  |  |         move.l 28(sp),d1
    d316:	|  |  |  |  |         jsr -36(a6)
    d31a:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    d31e:	|  |  |  |  |         clr.w d0
    d320:	+--|--|--|--|-------- bra.w d3c8 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    d324:	|  |  |  |  \-------> move.l 152(sp),d0
    d328:	|  |  |  |            move.l d0,-(sp)
    d32a:	|  |  |  |            jsr 13e6a <getTextFromAnyVar>
    d330:	|  |  |  |            addq.l #4,sp
    d332:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    d336:	|  |  |  |     /----- beq.s d3aa <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    d338:	|  |  |  |     |      movea.l 100(sp),a0
    d33c:	|  |  |  |     |      move.b (a0),d0
    d33e:	|  |  |  |     |      ext.w d0
    d340:	|  |  |  |     |      movea.w d0,a0
    d342:	|  |  |  |     |      move.l a0,12(sp)
    d346:	|  |  |  |     |      move.l 136(sp),96(sp)
    d34c:	|  |  |  |     |      move.l #99154,92(sp)
    d354:	|  |  |  |     |      moveq #99,d0
    d356:	|  |  |  |     |      not.b d0
    d358:	|  |  |  |     |      add.l sp,d0
    d35a:	|  |  |  |     |      addi.l #-144,d0
    d360:	|  |  |  |     |      move.l d0,88(sp)
    d364:	|  |  |  |     |      move.l 1b5aa <DOSBase>,d0
    d36a:	|  |  |  |     |      movea.l d0,a6
    d36c:	|  |  |  |     |      move.l 96(sp),d1
    d370:	|  |  |  |     |      move.l 92(sp),d2
    d374:	|  |  |  |     |      move.l 88(sp),d3
    d378:	|  |  |  |     |      jsr -354(a6)
    d37c:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    d380:	|  |  |  |     |      move.l 100(sp),80(sp)
    d386:	|  |  |  |     |      move.l 1b5a2 <SysBase>,d0
    d38c:	|  |  |  |     |      movea.l d0,a6
    d38e:	|  |  |  |     |      movea.l 80(sp),a1
    d392:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    d396:	|  |  |  \-----|----> movea.l 152(sp),a0
    d39a:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    d3a0:	|  \--|--------|----> tst.l 152(sp)
    d3a4:	|     \--------|----- bne.w d1cc <stackToFile+0x110>
    d3a8:	|              |  /-- bra.s d3ac <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    d3aa:	|              \--|-> nop
    }
    Close(fp);
    d3ac:	|                 \-> move.l 136(sp),20(sp)
    d3b2:	|                     move.l 1b5aa <DOSBase>,d0
    d3b8:	|                     movea.l d0,a6
    d3ba:	|                     move.l 20(sp),d1
    d3be:	|                     jsr -36(a6)
    d3c2:	|                     move.l d0,16(sp)
    return TRUE;
    d3c6:	|                     moveq #1,d0
}
    d3c8:	\-------------------> movem.l (sp)+,d2-d3/a6
    d3cc:	                      lea 144(sp),sp
    d3d0:	                      rts

0000d3d2 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    d3d2:	       lea -20(sp),sp
    d3d6:	       move.l a6,-(sp)
    d3d8:	       move.l d2,-(sp)
	int a, len = strlen (s);
    d3da:	       move.l 32(sp),-(sp)
    d3de:	       jsr 12d80 <strlen>
    d3e4:	       addq.l #4,sp
    d3e6:	       move.l d0,20(sp)

	put2bytes (len, fp);
    d3ea:	       move.l 36(sp),-(sp)
    d3ee:	       move.l 24(sp),-(sp)
    d3f2:	       jsr 8d0 <put2bytes>
    d3f8:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    d3fa:	       clr.l 24(sp)
    d3fe:	   /-- bra.s d454 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    d400:	/--|-> move.l 36(sp),16(sp)
    d406:	|  |   move.l 24(sp),d0
    d40a:	|  |   movea.l 32(sp),a0
    d40e:	|  |   adda.l d0,a0
    d410:	|  |   move.b (a0),d1
    d412:	|  |   move.b 1b6b0 <encode1>,d0
    d418:	|  |   eor.b d1,d0
    d41a:	|  |   ext.w d0
    d41c:	|  |   movea.w d0,a0
    d41e:	|  |   move.l a0,12(sp)
    d422:	|  |   move.l 1b5aa <DOSBase>,d0
    d428:	|  |   movea.l d0,a6
    d42a:	|  |   move.l 16(sp),d1
    d42e:	|  |   move.l 12(sp),d2
    d432:	|  |   jsr -312(a6)
    d436:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    d43a:	|  |   move.b 1b6b0 <encode1>,d0
    d440:	|  |   move.b d0,d1
    d442:	|  |   move.b 1b6b1 <encode2>,d0
    d448:	|  |   add.b d1,d0
    d44a:	|  |   move.b d0,1b6b0 <encode1>
	for (a = 0; a < len; a ++) {
    d450:	|  |   addq.l #1,24(sp)
    d454:	|  \-> move.l 24(sp),d0
    d458:	|      cmp.l 20(sp),d0
    d45c:	\----- blt.s d400 <writeStringEncoded+0x2e>
	}
}
    d45e:	       nop
    d460:	       nop
    d462:	       move.l (sp)+,d2
    d464:	       movea.l (sp)+,a6
    d466:	       lea 20(sp),sp
    d46a:	       rts

0000d46c <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    d46c:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    d46e:	                   tst.l 8(sp)
    d472:	               /-- bne.s d478 <failSecurityCheck+0xc>
    d474:	               |   moveq #1,d0
    d476:	/--------------|-- bra.s d4f6 <failSecurityCheck+0x8a>

	int a = 0;
    d478:	|              \-> clr.l (sp)

	while (fn[a]) {
    d47a:	|     /----------- bra.s d4e8 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    d47c:	|  /--|----------> move.l (sp),d0
    d47e:	|  |  |            movea.l 8(sp),a0
    d482:	|  |  |            adda.l d0,a0
    d484:	|  |  |            move.b (a0),d0
    d486:	|  |  |            ext.w d0
    d488:	|  |  |            movea.w d0,a0
    d48a:	|  |  |            moveq #124,d0
    d48c:	|  |  |            cmp.l a0,d0
    d48e:	|  |  |     /----- beq.s d4d0 <failSecurityCheck+0x64>
    d490:	|  |  |     |      moveq #124,d1
    d492:	|  |  |     |      cmp.l a0,d1
    d494:	|  |  |  /--|----- blt.s d4e6 <failSecurityCheck+0x7a>
    d496:	|  |  |  |  |      moveq #92,d0
    d498:	|  |  |  |  |      cmp.l a0,d0
    d49a:	|  |  |  |  +----- beq.s d4d0 <failSecurityCheck+0x64>
    d49c:	|  |  |  |  |      moveq #92,d1
    d49e:	|  |  |  |  |      cmp.l a0,d1
    d4a0:	|  |  |  +--|----- blt.s d4e6 <failSecurityCheck+0x7a>
    d4a2:	|  |  |  |  |      moveq #60,d0
    d4a4:	|  |  |  |  |      cmp.l a0,d0
    d4a6:	|  |  |  |  |  /-- blt.s d4c6 <failSecurityCheck+0x5a>
    d4a8:	|  |  |  |  |  |   moveq #34,d1
    d4aa:	|  |  |  |  |  |   cmp.l a0,d1
    d4ac:	|  |  |  +--|--|-- bgt.s d4e6 <failSecurityCheck+0x7a>
    d4ae:	|  |  |  |  |  |   moveq #-34,d1
    d4b0:	|  |  |  |  |  |   add.l a0,d1
    d4b2:	|  |  |  |  |  |   move.l #83894529,d0
    d4b8:	|  |  |  |  |  |   lsr.l d1,d0
    d4ba:	|  |  |  |  |  |   moveq #1,d1
    d4bc:	|  |  |  |  |  |   and.l d1,d0
    d4be:	|  |  |  |  |  |   sne d0
    d4c0:	|  |  |  |  |  |   neg.b d0
    d4c2:	|  |  |  |  +--|-- bne.s d4d0 <failSecurityCheck+0x64>
    d4c4:	|  |  |  +--|--|-- bra.s d4e6 <failSecurityCheck+0x7a>
    d4c6:	|  |  |  |  |  \-> lea -62(a0),a0
    d4ca:	|  |  |  |  |      moveq #1,d0
    d4cc:	|  |  |  |  |      cmp.l a0,d0
    d4ce:	|  |  |  +--|----- bcs.s d4e6 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    d4d0:	|  |  |  |  \----> move.l 8(sp),-(sp)
    d4d4:	|  |  |  |         pea 18356 <PutChar+0x1a40>
    d4da:	|  |  |  |         jsr 15fc6 <KPrintF>
    d4e0:	|  |  |  |         addq.l #8,sp
				return TRUE;
    d4e2:	|  |  |  |         moveq #1,d0
    d4e4:	+--|--|--|-------- bra.s d4f6 <failSecurityCheck+0x8a>
		}
		a++;
    d4e6:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    d4e8:	|  |  \----------> move.l (sp),d0
    d4ea:	|  |               movea.l 8(sp),a0
    d4ee:	|  |               adda.l d0,a0
    d4f0:	|  |               move.b (a0),d0
    d4f2:	|  \-------------- bne.s d47c <failSecurityCheck+0x10>
	}
	return FALSE;
    d4f4:	|                  clr.w d0
}
    d4f6:	\----------------> addq.l #4,sp
    d4f8:	                   rts

0000d4fa <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    d4fa:	             lea -24(sp),sp
    d4fe:	             move.l a6,-(sp)
    d500:	             move.l 40(sp),d0
    d504:	             move.w d0,d0
    d506:	             move.w d0,6(sp)
	int fileNum = -1;
    d50a:	             moveq #-1,d0
    d50c:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    d510:	             jsr 524e <killSpeechTimers>

	switch (numParams) {
    d516:	             moveq #2,d0
    d518:	             cmp.l 32(sp),d0
    d51c:	      /----- beq.s d560 <sayCore+0x66>
    d51e:	      |      moveq #3,d0
    d520:	      |      cmp.l 32(sp),d0
    d524:	/-----|----- bne.w d642 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    d528:	|     |      movea.l 36(sp),a0
    d52c:	|     |      move.l 24(a0),d0
    d530:	|     |      move.l d0,-(sp)
    d532:	|     |      pea 5 <_start+0x5>
    d536:	|     |      lea 20(sp),a0
    d53a:	|     |      move.l a0,-(sp)
    d53c:	|     |      jsr 13894 <getValueType>
    d542:	|     |      lea 12(sp),sp
    d546:	|     |      tst.w d0
    d548:	|     |  /-- bne.s d550 <sayCore+0x56>
    d54a:	|     |  |   moveq #1,d0
    d54c:	|  /--|--|-- bra.w d652 <sayCore+0x158>
			trimStack (&fun -> stack);
    d550:	|  |  |  \-> moveq #24,d0
    d552:	|  |  |      add.l 36(sp),d0
    d556:	|  |  |      move.l d0,-(sp)
    d558:	|  |  |      jsr 14218 <trimStack>
    d55e:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    d560:	|  |  \----> movea.l 36(sp),a0
    d564:	|  |         move.l 24(a0),d0
    d568:	|  |         move.l d0,-(sp)
    d56a:	|  |         jsr 13e6a <getTextFromAnyVar>
    d570:	|  |         addq.l #4,sp
    d572:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    d576:	|  |     /-- bne.s d57e <sayCore+0x84>
    d578:	|  |     |   moveq #1,d0
    d57a:	|  +-----|-- bra.w d652 <sayCore+0x158>
			trimStack (&fun -> stack);
    d57e:	|  |     \-> moveq #24,d0
    d580:	|  |         add.l 36(sp),d0
    d584:	|  |         move.l d0,-(sp)
    d586:	|  |         jsr 14218 <trimStack>
    d58c:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d58e:	|  |         movea.l 36(sp),a0
    d592:	|  |         move.l 24(a0),d0
    d596:	|  |         move.l d0,-(sp)
    d598:	|  |         pea 7 <_start+0x7>
    d59c:	|  |         lea 16(sp),a0
    d5a0:	|  |         move.l a0,-(sp)
    d5a2:	|  |         jsr 13894 <getValueType>
    d5a8:	|  |         lea 12(sp),sp
    d5ac:	|  |         tst.w d0
    d5ae:	|  |     /-- bne.s d5b6 <sayCore+0xbc>
    d5b0:	|  |     |   moveq #1,d0
    d5b2:	|  +-----|-- bra.w d652 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d5b6:	|  |     \-> movea.l 36(sp),a0
    d5ba:	|  |         move.l 24(a0),d0
    d5be:	|  |         move.l d0,-(sp)
    d5c0:	|  |         pea 7 <_start+0x7>
    d5c4:	|  |         lea 16(sp),a0
    d5c8:	|  |         move.l a0,-(sp)
    d5ca:	|  |         jsr 13894 <getValueType>
    d5d0:	|  |         lea 12(sp),sp
    d5d4:	|  |         tst.w d0
    d5d6:	|  |     /-- bne.s d5dc <sayCore+0xe2>
    d5d8:	|  |     |   moveq #1,d0
    d5da:	|  +-----|-- bra.s d652 <sayCore+0x158>
			trimStack (&fun -> stack);
    d5dc:	|  |     \-> moveq #24,d0
    d5de:	|  |         add.l 36(sp),d0
    d5e2:	|  |         move.l d0,-(sp)
    d5e4:	|  |         jsr 14218 <trimStack>
    d5ea:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    d5ec:	|  |         movea.w 6(sp),a0
    d5f0:	|  |         move.l 12(sp),d1
    d5f4:	|  |         move.l 8(sp),d0
    d5f8:	|  |         move.l a0,-(sp)
    d5fa:	|  |         move.l d1,-(sp)
    d5fc:	|  |         move.l d0,-(sp)
    d5fe:	|  |         move.l 36(sp),-(sp)
    d602:	|  |         jsr 71fa <wrapSpeech>
    d608:	|  |         lea 16(sp),sp
    d60c:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    d610:	|  |         movea.l 36(sp),a0
    d614:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    d61a:	|  |         movea.l 36(sp),a0
    d61e:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    d624:	|  |         move.l 24(sp),16(sp)
    d62a:	|  |         move.l 1b5a2 <SysBase>,d0
    d630:	|  |         movea.l d0,a6
    d632:	|  |         movea.l 16(sp),a1
    d636:	|  |         jsr -690(a6)
			newText = NULL;
    d63a:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    d63e:	|  |         moveq #0,d0
    d640:	|  +-------- bra.s d652 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    d642:	\--|-------> pea 183dc <PutChar+0x1ac6>
    d648:	   |         jsr 15fc6 <KPrintF>
    d64e:	   |         addq.l #4,sp
	return BR_ERROR;
    d650:	   |         moveq #1,d0
}
    d652:	   \-------> movea.l (sp)+,a6
    d654:	             lea 24(sp),sp
    d658:	             rts

0000d65a <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    d65a:	pea 1 <_start+0x1>
    d65e:	move.l 12(sp),-(sp)
    d662:	move.l 12(sp),-(sp)
    d666:	jsr d4fa <sayCore>
    d66c:	lea 12(sp),sp
}
    d670:	rts

0000d672 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    d672:	clr.l -(sp)
    d674:	move.l 12(sp),-(sp)
    d678:	move.l 12(sp),-(sp)
    d67c:	jsr d4fa <sayCore>
    d682:	lea 12(sp),sp
}
    d686:	rts

0000d688 <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    d688:	jsr 14260 <freeze>
	freezeSubs (); 
    d68e:	jsr 483e <freezeSubs>
	fun -> freezerLevel = 0;
    d694:	movea.l 8(sp),a0
    d698:	clr.b 56(a0)
	return BR_CONTINUE;
    d69c:	moveq #2,d0
}
    d69e:	rts

0000d6a0 <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    d6a0:	jsr 14424 <unfreeze>
	unfreezeSubs (); 
    d6a6:	jsr 5c90 <unfreezeSubs>
	return BR_CONTINUE;
    d6ac:	moveq #2,d0
}
    d6ae:	rts

0000d6b0 <builtIn_howFrozen>:
builtIn(howFrozen)
{
	UNUSEDALL
	/*setVariable (&fun -> reg, SVT_INT, howFrozen ());
	return BR_CONTINUE; Amiga todo implement*/
}
    d6b0:	nop
    d6b2:	rts

0000d6b4 <builtIn_setCursor>:

builtIn(setCursor)
{
    d6b4:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    d6b6:	movea.l 12(sp),a0
    d6ba:	move.l 24(a0),d0
    d6be:	move.l d0,-(sp)
    d6c0:	jsr 13d6c <getAnimationFromVar>
    d6c6:	addq.l #4,sp
    d6c8:	move.l d0,(sp)
	pickAnimCursor (aa);
    d6ca:	move.l (sp),-(sp)
    d6cc:	jsr d6c <pickAnimCursor>
    d6d2:	addq.l #4,sp
	trimStack (&fun -> stack);
    d6d4:	moveq #24,d0
    d6d6:	add.l 12(sp),d0
    d6da:	move.l d0,-(sp)
    d6dc:	jsr 14218 <trimStack>
    d6e2:	addq.l #4,sp
	return BR_CONTINUE;
    d6e4:	moveq #2,d0
}
    d6e6:	addq.l #4,sp
    d6e8:	rts

0000d6ea <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    d6ea:	move.l 1b55e <input+0xa>,d1
    d6f0:	move.l 1b6b4 <cameraX>,d0
    d6f6:	add.l d0,d1
    d6f8:	moveq #28,d0
    d6fa:	add.l 8(sp),d0
    d6fe:	move.l d1,-(sp)
    d700:	pea 1 <_start+0x1>
    d704:	move.l d0,-(sp)
    d706:	jsr 14186 <setVariable>
    d70c:	lea 12(sp),sp
	return BR_CONTINUE;
    d710:	moveq #2,d0
}
    d712:	rts

0000d714 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    d714:	move.l 1b562 <input+0xe>,d1
    d71a:	move.l 1b6b8 <cameraY>,d0
    d720:	add.l d0,d1
    d722:	moveq #28,d0
    d724:	add.l 8(sp),d0
    d728:	move.l d1,-(sp)
    d72a:	pea 1 <_start+0x1>
    d72e:	move.l d0,-(sp)
    d730:	jsr 14186 <setVariable>
    d736:	lea 12(sp),sp
	return BR_CONTINUE;
    d73a:	moveq #2,d0
}
    d73c:	rts

0000d73e <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    d73e:	move.l 1b55e <input+0xa>,d0
    d744:	move.l d0,-(sp)
    d746:	jsr 1627e <__floatsisf>
    d74c:	addq.l #4,sp
    d74e:	move.l d0,d1
    d750:	move.l 1af42 <cameraZoom>,d0
    d756:	move.l d0,-(sp)
    d758:	move.l d1,-(sp)
    d75a:	jsr 16330 <__mulsf3>
    d760:	addq.l #8,sp
    d762:	move.l d0,-(sp)
    d764:	jsr 16216 <__fixsfsi>
    d76a:	addq.l #4,sp
    d76c:	move.l d0,d1
    d76e:	moveq #28,d0
    d770:	add.l 8(sp),d0
    d774:	move.l d1,-(sp)
    d776:	pea 1 <_start+0x1>
    d77a:	move.l d0,-(sp)
    d77c:	jsr 14186 <setVariable>
    d782:	lea 12(sp),sp
	return BR_CONTINUE;
    d786:	moveq #2,d0
}
    d788:	rts

0000d78a <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    d78a:	move.l 1b562 <input+0xe>,d0
    d790:	move.l d0,-(sp)
    d792:	jsr 1627e <__floatsisf>
    d798:	addq.l #4,sp
    d79a:	move.l d0,d1
    d79c:	move.l 1af42 <cameraZoom>,d0
    d7a2:	move.l d0,-(sp)
    d7a4:	move.l d1,-(sp)
    d7a6:	jsr 16330 <__mulsf3>
    d7ac:	addq.l #8,sp
    d7ae:	move.l d0,-(sp)
    d7b0:	jsr 16216 <__fixsfsi>
    d7b6:	addq.l #4,sp
    d7b8:	move.l d0,d1
    d7ba:	moveq #28,d0
    d7bc:	add.l 8(sp),d0
    d7c0:	move.l d1,-(sp)
    d7c2:	pea 1 <_start+0x1>
    d7c6:	move.l d0,-(sp)
    d7c8:	jsr 14186 <setVariable>
    d7ce:	lea 12(sp),sp
	return BR_CONTINUE;
    d7d2:	moveq #2,d0
}
    d7d4:	rts

0000d7d6 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    d7d6:	jsr 6cae <statusBarText>
    d7dc:	move.l d0,d1
    d7de:	moveq #28,d0
    d7e0:	add.l 8(sp),d0
    d7e4:	move.l d1,-(sp)
    d7e6:	move.l d0,-(sp)
    d7e8:	jsr 13ab6 <makeTextVar>
    d7ee:	addq.l #8,sp
	return BR_CONTINUE;
    d7f0:	moveq #2,d0
}
    d7f2:	rts

0000d7f4 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    d7f4:	       lea -20(sp),sp
    d7f8:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    d7fa:	       movea.l 32(sp),a0
    d7fe:	       move.l 24(a0),d0
    d802:	       move.l d0,-(sp)
    d804:	       jsr 13e6a <getTextFromAnyVar>
    d80a:	       addq.l #4,sp
    d80c:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    d810:	   /-- bne.s d818 <builtIn_getMatchingFiles+0x24>
    d812:	   |   moveq #1,d0
    d814:	/--|-- bra.w d8da <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    d818:	|  \-> moveq #24,d0
    d81a:	|      add.l 32(sp),d0
    d81e:	|      move.l d0,-(sp)
    d820:	|      jsr 14218 <trimStack>
    d826:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    d828:	|      moveq #28,d0
    d82a:	|      add.l 32(sp),d0
    d82e:	|      move.l d0,-(sp)
    d830:	|      jsr 13ae2 <unlinkVar>
    d836:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    d838:	|      movea.l 32(sp),a0
    d83c:	|      moveq #6,d0
    d83e:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    d842:	|      moveq #12,d0
    d844:	|      move.l d0,16(sp)
    d848:	|      clr.l 12(sp)
    d84c:	|      move.l 1b5a2 <SysBase>,d0
    d852:	|      movea.l d0,a6
    d854:	|      move.l 16(sp),d0
    d858:	|      move.l 12(sp),d1
    d85c:	|      jsr -684(a6)
    d860:	|      move.l d0,8(sp)
    d864:	|      move.l 8(sp),d0
    d868:	|      movea.l 32(sp),a0
    d86c:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    d870:	|      moveq #32,d0
    d872:	|      add.l 32(sp),d0
    d876:	|  /-- bne.s d87c <builtIn_getMatchingFiles+0x88>
    d878:	|  |   moveq #1,d0
    d87a:	+--|-- bra.s d8da <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    d87c:	|  \-> movea.l 32(sp),a0
    d880:	|      movea.l 32(a0),a0
    d884:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    d886:	|      movea.l 32(sp),a0
    d88a:	|      movea.l 32(a0),a0
    d88e:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    d892:	|      movea.l 32(sp),a0
    d896:	|      movea.l 32(a0),a0
    d89a:	|      moveq #1,d0
    d89c:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    d8a0:	|      movea.l 32(sp),a0
    d8a4:	|      move.l 32(a0),d0
    d8a8:	|      move.l 20(sp),-(sp)
    d8ac:	|      move.l d0,-(sp)
    d8ae:	|      jsr 13650 <getSavedGamesStack>
    d8b4:	|      addq.l #8,sp
    d8b6:	|      tst.w d0
    d8b8:	|  /-- bne.s d8be <builtIn_getMatchingFiles+0xca>
    d8ba:	|  |   moveq #1,d0
    d8bc:	+--|-- bra.s d8da <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    d8be:	|  \-> move.l 20(sp),4(sp)
    d8c4:	|      move.l 1b5a2 <SysBase>,d0
    d8ca:	|      movea.l d0,a6
    d8cc:	|      movea.l 4(sp),a1
    d8d0:	|      jsr -690(a6)
	newText = NULL;
    d8d4:	|      clr.l 20(sp)
	return BR_CONTINUE;
    d8d8:	|      moveq #2,d0
}
    d8da:	\----> movea.l (sp)+,a6
    d8dc:	       lea 20(sp),sp
    d8e0:	       rts

0000d8e2 <builtIn_saveGame>:

builtIn(saveGame)
{
    d8e2:	       lea -12(sp),sp
    d8e6:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    d8e8:	       movea.l 24(sp),a0
    d8ec:	       move.l 24(a0),d0
    d8f0:	       move.l d0,-(sp)
    d8f2:	       jsr 13e6a <getTextFromAnyVar>
    d8f8:	       addq.l #4,sp
    d8fa:	       move.l d0,1b56e <loadNow>
    trimStack(&fun->stack);
    d900:	       moveq #24,d0
    d902:	       add.l 24(sp),d0
    d906:	       move.l d0,-(sp)
    d908:	       jsr 14218 <trimStack>
    d90e:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    d910:	       move.l 1b56e <loadNow>,d0
    d916:	       move.l d0,-(sp)
    d918:	       jsr 2fe <encodeFilename>
    d91e:	       addq.l #4,sp
    d920:	       move.l d0,12(sp)
    FreeVec(loadNow);
    d924:	       move.l 1b56e <loadNow>,8(sp)
    d92c:	       move.l 1b5a2 <SysBase>,d0
    d932:	       movea.l d0,a6
    d934:	       movea.l 8(sp),a1
    d938:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    d93c:	       move.l 12(sp),-(sp)
    d940:	       jsr d46c <failSecurityCheck>
    d946:	       addq.l #4,sp
    d948:	       tst.w d0
    d94a:	   /-- beq.s d950 <builtIn_saveGame+0x6e>
    d94c:	   |   moveq #1,d0
    d94e:	/--|-- bra.s d9a0 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    d950:	|  \-> move.l 12(sp),-(sp)
    d954:	|      pea 1840a <PutChar+0x1af4>
    d95a:	|      jsr 12dc0 <joinStrings>
    d960:	|      addq.l #8,sp
    d962:	|      move.l d0,1b56e <loadNow>
    FreeVec(aaaaa);
    d968:	|      move.l 12(sp),4(sp)
    d96e:	|      move.l 1b5a2 <SysBase>,d0
    d974:	|      movea.l d0,a6
    d976:	|      movea.l 4(sp),a1
    d97a:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    d97e:	|      moveq #28,d0
    d980:	|      add.l 24(sp),d0
    d984:	|      clr.l -(sp)
    d986:	|      pea 1 <_start+0x1>
    d98a:	|      move.l d0,-(sp)
    d98c:	|      jsr 14186 <setVariable>
    d992:	|      lea 12(sp),sp
    saverFunc = fun;
    d996:	|      move.l 24(sp),1b6c4 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    d99e:	|      moveq #0,d0
}
    d9a0:	\----> movea.l (sp)+,a6
    d9a2:	       lea 12(sp),sp
    d9a6:	       rts

0000d9a8 <builtIn_fileExists>:

builtIn(fileExists)
{
    d9a8:	       lea -36(sp),sp
    d9ac:	       move.l a6,-(sp)
    d9ae:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    d9b0:	       movea.l 52(sp),a0
    d9b4:	       move.l 24(a0),d0
    d9b8:	       move.l d0,-(sp)
    d9ba:	       jsr 13e6a <getTextFromAnyVar>
    d9c0:	       addq.l #4,sp
    d9c2:	       move.l d0,1b56e <loadNow>
    trimStack(&fun->stack);
    d9c8:	       moveq #24,d0
    d9ca:	       add.l 52(sp),d0
    d9ce:	       move.l d0,-(sp)
    d9d0:	       jsr 14218 <trimStack>
    d9d6:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    d9d8:	       move.l 1b56e <loadNow>,d0
    d9de:	       move.l d0,-(sp)
    d9e0:	       jsr 2fe <encodeFilename>
    d9e6:	       addq.l #4,sp
    d9e8:	       move.l d0,40(sp)
    FreeVec(loadNow);
    d9ec:	       move.l 1b56e <loadNow>,36(sp)
    d9f4:	       move.l 1b5a2 <SysBase>,d0
    d9fa:	       movea.l d0,a6
    d9fc:	       movea.l 36(sp),a1
    da00:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    da04:	       move.l 40(sp),-(sp)
    da08:	       jsr d46c <failSecurityCheck>
    da0e:	       addq.l #4,sp
    da10:	       tst.w d0
    da12:	   /-- beq.s da1a <builtIn_fileExists+0x72>
    da14:	   |   moveq #1,d0
    da16:	/--|-- bra.w daba <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    da1a:	|  \-> move.l 40(sp),32(sp)
    da20:	|      move.l #1005,28(sp)
    da28:	|      move.l 1b5aa <DOSBase>,d0
    da2e:	|      movea.l d0,a6
    da30:	|      move.l 32(sp),d1
    da34:	|      move.l 28(sp),d2
    da38:	|      jsr -30(a6)
    da3c:	|      move.l d0,24(sp)
    da40:	|      move.l 24(sp),d0
    da44:	|      move.l d0,20(sp)
    if (!fp) {        
    da48:	|  /-- bne.s da58 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    da4a:	|  |   pea 1840c <PutChar+0x1af6>
    da50:	|  |   jsr 15fc6 <KPrintF>
    da56:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    da58:	|  \-> tst.l 20(sp)
    da5c:	|      sne d0
    da5e:	|      neg.b d0
    da60:	|      moveq #0,d1
    da62:	|      move.b d0,d1
    da64:	|      moveq #28,d0
    da66:	|      add.l 52(sp),d0
    da6a:	|      move.l d1,-(sp)
    da6c:	|      pea 1 <_start+0x1>
    da70:	|      move.l d0,-(sp)
    da72:	|      jsr 14186 <setVariable>
    da78:	|      lea 12(sp),sp
    if (fp) Close(fp);
    da7c:	|      tst.l 20(sp)
    da80:	|  /-- beq.s da9c <builtIn_fileExists+0xf4>
    da82:	|  |   move.l 20(sp),16(sp)
    da88:	|  |   move.l 1b5aa <DOSBase>,d0
    da8e:	|  |   movea.l d0,a6
    da90:	|  |   move.l 16(sp),d1
    da94:	|  |   jsr -36(a6)
    da98:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    da9c:	|  \-> move.l 40(sp),8(sp)
    daa2:	|      move.l 1b5a2 <SysBase>,d0
    daa8:	|      movea.l d0,a6
    daaa:	|      movea.l 8(sp),a1
    daae:	|      jsr -690(a6)
    loadNow = NULL;
    dab2:	|      clr.l 1b56e <loadNow>
    return BR_CONTINUE;
    dab8:	|      moveq #2,d0
}
    daba:	\----> move.l (sp)+,d2
    dabc:	       movea.l (sp)+,a6
    dabe:	       lea 36(sp),sp
    dac2:	       rts

0000dac4 <builtIn_loadGame>:

builtIn(loadGame)
{
    dac4:	       lea -36(sp),sp
    dac8:	       move.l a6,-(sp)
    daca:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    dacc:	       movea.l 52(sp),a0
    dad0:	       move.l 24(a0),d0
    dad4:	       move.l d0,-(sp)
    dad6:	       jsr 13e6a <getTextFromAnyVar>
    dadc:	       addq.l #4,sp
    dade:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    dae2:	       moveq #24,d0
    dae4:	       add.l 52(sp),d0
    dae8:	       move.l d0,-(sp)
    daea:	       jsr 14218 <trimStack>
    daf0:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    daf2:	       move.l 40(sp),-(sp)
    daf6:	       jsr 2fe <encodeFilename>
    dafc:	       addq.l #4,sp
    dafe:	       move.l d0,1b56e <loadNow>
    FreeVec(aaaaa);
    db04:	       move.l 40(sp),36(sp)
    db0a:	       move.l 1b5a2 <SysBase>,d0
    db10:	       movea.l d0,a6
    db12:	       movea.l 36(sp),a1
    db16:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    db1a:	       move.l 1b56e <loadNow>,d0
    db20:	       move.l d0,-(sp)
    db22:	       jsr d46c <failSecurityCheck>
    db28:	       addq.l #4,sp
    db2a:	       tst.w d0
    db2c:	   /-- beq.s db32 <builtIn_loadGame+0x6e>
    db2e:	   |   moveq #1,d0
    db30:	/--|-- bra.s dba2 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    db32:	|  \-> move.l 1b56e <loadNow>,32(sp)
    db3a:	|      move.l #1005,28(sp)
    db42:	|      move.l 1b5aa <DOSBase>,d0
    db48:	|      movea.l d0,a6
    db4a:	|      move.l 32(sp),d1
    db4e:	|      move.l 28(sp),d2
    db52:	|      jsr -30(a6)
    db56:	|      move.l d0,24(sp)
    db5a:	|      move.l 24(sp),d0
    db5e:	|      move.l d0,20(sp)
    if (fp) {
    db62:	|  /-- beq.s db82 <builtIn_loadGame+0xbe>
        Close(fp);
    db64:	|  |   move.l 20(sp),12(sp)
    db6a:	|  |   move.l 1b5aa <DOSBase>,d0
    db70:	|  |   movea.l d0,a6
    db72:	|  |   move.l 12(sp),d1
    db76:	|  |   jsr -36(a6)
    db7a:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    db7e:	|  |   moveq #0,d0
    db80:	+--|-- bra.s dba2 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    db82:	|  \-> move.l 1b56e <loadNow>,16(sp)
    db8a:	|      move.l 1b5a2 <SysBase>,d0
    db90:	|      movea.l d0,a6
    db92:	|      movea.l 16(sp),a1
    db96:	|      jsr -690(a6)
    loadNow = NULL;
    db9a:	|      clr.l 1b56e <loadNow>
    return BR_CONTINUE;
    dba0:	|      moveq #2,d0
}
    dba2:	\----> move.l (sp)+,d2
    dba4:	       movea.l (sp)+,a6
    dba6:	       lea 36(sp),sp
    dbaa:	       rts

0000dbac <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    dbac:	move.l 1b69a <sceneHeight>,d0
    dbb2:	move.l d0,d1
    dbb4:	move.l 1b696 <sceneWidth>,d0
    dbba:	move.l d1,-(sp)
    dbbc:	move.l d0,-(sp)
    dbbe:	clr.l -(sp)
    dbc0:	clr.l -(sp)
    dbc2:	jsr c360 <blankScreen>
    dbc8:	lea 16(sp),sp
	return BR_CONTINUE;
    dbcc:	moveq #2,d0
}
    dbce:	rts

0000dbd0 <builtIn_blankArea>:

builtIn(blankArea)
{
    dbd0:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    dbd4:	       movea.l 24(sp),a0
    dbd8:	       move.l 24(a0),d0
    dbdc:	       move.l d0,-(sp)
    dbde:	       pea 1 <_start+0x1>
    dbe2:	       lea 8(sp),a0
    dbe6:	       move.l a0,-(sp)
    dbe8:	       jsr 13894 <getValueType>
    dbee:	       lea 12(sp),sp
    dbf2:	       tst.w d0
    dbf4:	   /-- bne.s dbfc <builtIn_blankArea+0x2c>
    dbf6:	   |   moveq #1,d0
    dbf8:	/--|-- bra.w dcd2 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    dbfc:	|  \-> moveq #24,d0
    dbfe:	|      add.l 24(sp),d0
    dc02:	|      move.l d0,-(sp)
    dc04:	|      jsr 14218 <trimStack>
    dc0a:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    dc0c:	|      movea.l 24(sp),a0
    dc10:	|      move.l 24(a0),d0
    dc14:	|      move.l d0,-(sp)
    dc16:	|      pea 1 <_start+0x1>
    dc1a:	|      lea 12(sp),a0
    dc1e:	|      move.l a0,-(sp)
    dc20:	|      jsr 13894 <getValueType>
    dc26:	|      lea 12(sp),sp
    dc2a:	|      tst.w d0
    dc2c:	|  /-- bne.s dc34 <builtIn_blankArea+0x64>
    dc2e:	|  |   moveq #1,d0
    dc30:	+--|-- bra.w dcd2 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    dc34:	|  \-> moveq #24,d0
    dc36:	|      add.l 24(sp),d0
    dc3a:	|      move.l d0,-(sp)
    dc3c:	|      jsr 14218 <trimStack>
    dc42:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    dc44:	|      movea.l 24(sp),a0
    dc48:	|      move.l 24(a0),d0
    dc4c:	|      move.l d0,-(sp)
    dc4e:	|      pea 1 <_start+0x1>
    dc52:	|      moveq #16,d0
    dc54:	|      add.l sp,d0
    dc56:	|      move.l d0,-(sp)
    dc58:	|      jsr 13894 <getValueType>
    dc5e:	|      lea 12(sp),sp
    dc62:	|      tst.w d0
    dc64:	|  /-- bne.s dc6a <builtIn_blankArea+0x9a>
    dc66:	|  |   moveq #1,d0
    dc68:	+--|-- bra.s dcd2 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    dc6a:	|  \-> moveq #24,d0
    dc6c:	|      add.l 24(sp),d0
    dc70:	|      move.l d0,-(sp)
    dc72:	|      jsr 14218 <trimStack>
    dc78:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    dc7a:	|      movea.l 24(sp),a0
    dc7e:	|      move.l 24(a0),d0
    dc82:	|      move.l d0,-(sp)
    dc84:	|      pea 1 <_start+0x1>
    dc88:	|      moveq #20,d0
    dc8a:	|      add.l sp,d0
    dc8c:	|      move.l d0,-(sp)
    dc8e:	|      jsr 13894 <getValueType>
    dc94:	|      lea 12(sp),sp
    dc98:	|      tst.w d0
    dc9a:	|  /-- bne.s dca0 <builtIn_blankArea+0xd0>
    dc9c:	|  |   moveq #1,d0
    dc9e:	+--|-- bra.s dcd2 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    dca0:	|  \-> moveq #24,d0
    dca2:	|      add.l 24(sp),d0
    dca6:	|      move.l d0,-(sp)
    dca8:	|      jsr 14218 <trimStack>
    dcae:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    dcb0:	|      movea.l (sp),a1
    dcb2:	|      movea.l 4(sp),a0
    dcb6:	|      move.l 8(sp),d1
    dcba:	|      move.l 12(sp),d0
    dcbe:	|      move.l a1,-(sp)
    dcc0:	|      move.l a0,-(sp)
    dcc2:	|      move.l d1,-(sp)
    dcc4:	|      move.l d0,-(sp)
    dcc6:	|      jsr c360 <blankScreen>
    dccc:	|      lea 16(sp),sp
	return BR_CONTINUE;
    dcd0:	|      moveq #2,d0
}
    dcd2:	\----> lea 16(sp),sp
    dcd6:	       rts

0000dcd8 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    dcd8:	jsr c374 <darkScreen>
	return BR_CONTINUE;
    dcde:	moveq #2,d0
}
    dce0:	rts

0000dce2 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    dce2:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dce6:	       movea.l 20(sp),a0
    dcea:	       move.l 24(a0),d0
    dcee:	       move.l d0,-(sp)
    dcf0:	       pea 1 <_start+0x1>
    dcf4:	       lea 8(sp),a0
    dcf8:	       move.l a0,-(sp)
    dcfa:	       jsr 13894 <getValueType>
    dd00:	       lea 12(sp),sp
    dd04:	       tst.w d0
    dd06:	   /-- bne.s dd0e <builtIn_addOverlay+0x2c>
    dd08:	   |   moveq #1,d0
    dd0a:	/--|-- bra.w dda6 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    dd0e:	|  \-> moveq #24,d0
    dd10:	|      add.l 20(sp),d0
    dd14:	|      move.l d0,-(sp)
    dd16:	|      jsr 14218 <trimStack>
    dd1c:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dd1e:	|      movea.l 20(sp),a0
    dd22:	|      move.l 24(a0),d0
    dd26:	|      move.l d0,-(sp)
    dd28:	|      pea 1 <_start+0x1>
    dd2c:	|      moveq #12,d0
    dd2e:	|      add.l sp,d0
    dd30:	|      move.l d0,-(sp)
    dd32:	|      jsr 13894 <getValueType>
    dd38:	|      lea 12(sp),sp
    dd3c:	|      tst.w d0
    dd3e:	|  /-- bne.s dd44 <builtIn_addOverlay+0x62>
    dd40:	|  |   moveq #1,d0
    dd42:	+--|-- bra.s dda6 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    dd44:	|  \-> moveq #24,d0
    dd46:	|      add.l 20(sp),d0
    dd4a:	|      move.l d0,-(sp)
    dd4c:	|      jsr 14218 <trimStack>
    dd52:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    dd54:	|      movea.l 20(sp),a0
    dd58:	|      move.l 24(a0),d0
    dd5c:	|      move.l d0,-(sp)
    dd5e:	|      pea 5 <_start+0x5>
    dd62:	|      moveq #16,d0
    dd64:	|      add.l sp,d0
    dd66:	|      move.l d0,-(sp)
    dd68:	|      jsr 13894 <getValueType>
    dd6e:	|      lea 12(sp),sp
    dd72:	|      tst.w d0
    dd74:	|  /-- bne.s dd7a <builtIn_addOverlay+0x98>
    dd76:	|  |   moveq #1,d0
    dd78:	+--|-- bra.s dda6 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    dd7a:	|  \-> moveq #24,d0
    dd7c:	|      add.l 20(sp),d0
    dd80:	|      move.l d0,-(sp)
    dd82:	|      jsr 14218 <trimStack>
    dd88:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    dd8a:	|      movea.l (sp),a0
    dd8c:	|      move.l 4(sp),d1
    dd90:	|      move.l 8(sp),d0
    dd94:	|      move.l a0,-(sp)
    dd96:	|      move.l d1,-(sp)
    dd98:	|      move.l d0,-(sp)
    dd9a:	|      jsr c492 <loadBackDrop>
    dda0:	|      lea 12(sp),sp
	return BR_CONTINUE;
    dda4:	|      moveq #2,d0
}
    dda6:	\----> lea 12(sp),sp
    ddaa:	       rts

0000ddac <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    ddac:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ddb0:	       movea.l 20(sp),a0
    ddb4:	       move.l 24(a0),d0
    ddb8:	       move.l d0,-(sp)
    ddba:	       pea 1 <_start+0x1>
    ddbe:	       lea 8(sp),a0
    ddc2:	       move.l a0,-(sp)
    ddc4:	       jsr 13894 <getValueType>
    ddca:	       lea 12(sp),sp
    ddce:	       tst.w d0
    ddd0:	   /-- bne.s ddd8 <builtIn_mixOverlay+0x2c>
    ddd2:	   |   moveq #1,d0
    ddd4:	/--|-- bra.w de70 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ddd8:	|  \-> moveq #24,d0
    ddda:	|      add.l 20(sp),d0
    ddde:	|      move.l d0,-(sp)
    dde0:	|      jsr 14218 <trimStack>
    dde6:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dde8:	|      movea.l 20(sp),a0
    ddec:	|      move.l 24(a0),d0
    ddf0:	|      move.l d0,-(sp)
    ddf2:	|      pea 1 <_start+0x1>
    ddf6:	|      moveq #12,d0
    ddf8:	|      add.l sp,d0
    ddfa:	|      move.l d0,-(sp)
    ddfc:	|      jsr 13894 <getValueType>
    de02:	|      lea 12(sp),sp
    de06:	|      tst.w d0
    de08:	|  /-- bne.s de0e <builtIn_mixOverlay+0x62>
    de0a:	|  |   moveq #1,d0
    de0c:	+--|-- bra.s de70 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    de0e:	|  \-> moveq #24,d0
    de10:	|      add.l 20(sp),d0
    de14:	|      move.l d0,-(sp)
    de16:	|      jsr 14218 <trimStack>
    de1c:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    de1e:	|      movea.l 20(sp),a0
    de22:	|      move.l 24(a0),d0
    de26:	|      move.l d0,-(sp)
    de28:	|      pea 5 <_start+0x5>
    de2c:	|      moveq #16,d0
    de2e:	|      add.l sp,d0
    de30:	|      move.l d0,-(sp)
    de32:	|      jsr 13894 <getValueType>
    de38:	|      lea 12(sp),sp
    de3c:	|      tst.w d0
    de3e:	|  /-- bne.s de44 <builtIn_mixOverlay+0x98>
    de40:	|  |   moveq #1,d0
    de42:	+--|-- bra.s de70 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    de44:	|  \-> moveq #24,d0
    de46:	|      add.l 20(sp),d0
    de4a:	|      move.l d0,-(sp)
    de4c:	|      jsr 14218 <trimStack>
    de52:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    de54:	|      movea.l (sp),a0
    de56:	|      move.l 4(sp),d1
    de5a:	|      move.l 8(sp),d0
    de5e:	|      move.l a0,-(sp)
    de60:	|      move.l d1,-(sp)
    de62:	|      move.l d0,-(sp)
    de64:	|      jsr c508 <mixBackDrop>
    de6a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    de6e:	|      moveq #2,d0
}
    de70:	\----> lea 12(sp),sp
    de74:	       rts

0000de76 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    de76:	       lea -12(sp),sp
	UNUSEDALL
	KPrintF("pasteimage: Started\n");
    de7a:	       pea 1842a <PutChar+0x1b14>
    de80:	       jsr 15fc6 <KPrintF>
    de86:	       addq.l #4,sp
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    de88:	       movea.l 20(sp),a0
    de8c:	       move.l 24(a0),d0
    de90:	       move.l d0,-(sp)
    de92:	       pea 1 <_start+0x1>
    de96:	       lea 8(sp),a0
    de9a:	       move.l a0,-(sp)
    de9c:	       jsr 13894 <getValueType>
    dea2:	       lea 12(sp),sp
    dea6:	       tst.w d0
    dea8:	   /-- bne.s deb0 <builtIn_pasteImage+0x3a>
    deaa:	   |   moveq #1,d0
    deac:	/--|-- bra.w df4e <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    deb0:	|  \-> moveq #24,d0
    deb2:	|      add.l 20(sp),d0
    deb6:	|      move.l d0,-(sp)
    deb8:	|      jsr 14218 <trimStack>
    debe:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dec0:	|      movea.l 20(sp),a0
    dec4:	|      move.l 24(a0),d0
    dec8:	|      move.l d0,-(sp)
    deca:	|      pea 1 <_start+0x1>
    dece:	|      moveq #12,d0
    ded0:	|      add.l sp,d0
    ded2:	|      move.l d0,-(sp)
    ded4:	|      jsr 13894 <getValueType>
    deda:	|      lea 12(sp),sp
    dede:	|      tst.w d0
    dee0:	|  /-- bne.s dee6 <builtIn_pasteImage+0x70>
    dee2:	|  |   moveq #1,d0
    dee4:	+--|-- bra.s df4e <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    dee6:	|  \-> moveq #24,d0
    dee8:	|      add.l 20(sp),d0
    deec:	|      move.l d0,-(sp)
    deee:	|      jsr 14218 <trimStack>
    def4:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    def6:	|      movea.l 20(sp),a0
    defa:	|      move.l 24(a0),d0
    defe:	|      move.l d0,-(sp)
    df00:	|      jsr 13d6c <getAnimationFromVar>
    df06:	|      addq.l #4,sp
    df08:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    df0c:	|      moveq #24,d0
    df0e:	|      add.l 20(sp),d0
    df12:	|      move.l d0,-(sp)
    df14:	|      jsr 14218 <trimStack>
    df1a:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    df1c:	|      tst.l 8(sp)
    df20:	|  /-- bne.s df26 <builtIn_pasteImage+0xb0>
    df22:	|  |   moveq #2,d0
    df24:	+--|-- bra.s df4e <builtIn_pasteImage+0xd8>

	pasteCursor (x, y, pp);
    df26:	|  \-> move.l (sp),d1
    df28:	|      move.l 4(sp),d0
    df2c:	|      move.l 8(sp),-(sp)
    df30:	|      move.l d1,-(sp)
    df32:	|      move.l d0,-(sp)
    df34:	|      jsr d94 <pasteCursor>
    df3a:	|      lea 12(sp),sp
	KPrintF("pasteimage: Finished\n");
    df3e:	|      pea 1843f <PutChar+0x1b29>
    df44:	|      jsr 15fc6 <KPrintF>
    df4a:	|      addq.l #4,sp
	return BR_CONTINUE;	
    df4c:	|      moveq #2,d0
}
    df4e:	\----> lea 12(sp),sp
    df52:	       rts

0000df54 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    df54:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    df56:	       movea.l 16(sp),a0
    df5a:	       move.l 24(a0),d0
    df5e:	       move.l d0,-(sp)
    df60:	       pea 1 <_start+0x1>
    df64:	       move.l sp,d0
    df66:	       addq.l #8,d0
    df68:	       move.l d0,-(sp)
    df6a:	       jsr 13894 <getValueType>
    df70:	       lea 12(sp),sp
    df74:	       tst.w d0
    df76:	   /-- bne.s df7e <builtIn_setSceneDimensions+0x2a>
    df78:	   |   moveq #1,d0
    df7a:	/--|-- bra.w e006 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    df7e:	|  \-> moveq #24,d0
    df80:	|      add.l 16(sp),d0
    df84:	|      move.l d0,-(sp)
    df86:	|      jsr 14218 <trimStack>
    df8c:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    df8e:	|      movea.l 16(sp),a0
    df92:	|      move.l 24(a0),d0
    df96:	|      move.l d0,-(sp)
    df98:	|      pea 1 <_start+0x1>
    df9c:	|      moveq #12,d0
    df9e:	|      add.l sp,d0
    dfa0:	|      move.l d0,-(sp)
    dfa2:	|      jsr 13894 <getValueType>
    dfa8:	|      lea 12(sp),sp
    dfac:	|      tst.w d0
    dfae:	|  /-- bne.s dfb4 <builtIn_setSceneDimensions+0x60>
    dfb0:	|  |   moveq #1,d0
    dfb2:	+--|-- bra.s e006 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    dfb4:	|  \-> moveq #24,d0
    dfb6:	|      add.l 16(sp),d0
    dfba:	|      move.l d0,-(sp)
    dfbc:	|      jsr 14218 <trimStack>
    dfc2:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    dfc4:	|      move.l (sp),d1
    dfc6:	|      move.l 4(sp),d0
    dfca:	|      move.l d1,-(sp)
    dfcc:	|      move.l d0,-(sp)
    dfce:	|      jsr c55e <resizeBackdrop>
    dfd4:	|      addq.l #8,sp
    dfd6:	|      tst.w d0
    dfd8:	|  /-- beq.s dff6 <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    dfda:	|  |   move.l (sp),d1
    dfdc:	|  |   move.l 4(sp),d0
    dfe0:	|  |   move.l d1,-(sp)
    dfe2:	|  |   move.l d0,-(sp)
    dfe4:	|  |   clr.l -(sp)
    dfe6:	|  |   clr.l -(sp)
    dfe8:	|  |   jsr c360 <blankScreen>
    dfee:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    dff2:	|  |   moveq #2,d0
    dff4:	+--|-- bra.s e006 <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    dff6:	|  \-> pea 18455 <PutChar+0x1b3f>
    dffc:	|      jsr 15fc6 <KPrintF>
    e002:	|      addq.l #4,sp
	return BR_ERROR;
    e004:	|      moveq #1,d0
}
    e006:	\----> addq.l #8,sp
    e008:	       rts

0000e00a <builtIn_aimCamera>:

builtIn(aimCamera)
{
    e00a:	          move.l d3,-(sp)
    e00c:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e00e:	          movea.l 16(sp),a0
    e012:	          move.l 24(a0),d0
    e016:	          move.l d0,-(sp)
    e018:	          pea 1 <_start+0x1>
    e01c:	          pea 1b6b8 <cameraY>
    e022:	          jsr 13894 <getValueType>
    e028:	          lea 12(sp),sp
    e02c:	          tst.w d0
    e02e:	      /-- bne.s e036 <builtIn_aimCamera+0x2c>
    e030:	      |   moveq #1,d0
    e032:	/-----|-- bra.w e2b8 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    e036:	|     \-> moveq #24,d0
    e038:	|         add.l 16(sp),d0
    e03c:	|         move.l d0,-(sp)
    e03e:	|         jsr 14218 <trimStack>
    e044:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e046:	|         movea.l 16(sp),a0
    e04a:	|         move.l 24(a0),d0
    e04e:	|         move.l d0,-(sp)
    e050:	|         pea 1 <_start+0x1>
    e054:	|         pea 1b6b4 <cameraX>
    e05a:	|         jsr 13894 <getValueType>
    e060:	|         lea 12(sp),sp
    e064:	|         tst.w d0
    e066:	|     /-- bne.s e06e <builtIn_aimCamera+0x64>
    e068:	|     |   moveq #1,d0
    e06a:	+-----|-- bra.w e2b8 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    e06e:	|     \-> moveq #24,d0
    e070:	|         add.l 16(sp),d0
    e074:	|         move.l d0,-(sp)
    e076:	|         jsr 14218 <trimStack>
    e07c:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    e07e:	|         move.l 1b6b4 <cameraX>,d0
    e084:	|         move.l d0,-(sp)
    e086:	|         jsr 1627e <__floatsisf>
    e08c:	|         addq.l #4,sp
    e08e:	|         move.l d0,d2
    e090:	|         move.l 1b4f6 <winWidth>,d0
    e096:	|         lsr.l #1,d0
    e098:	|         move.l d0,-(sp)
    e09a:	|         jsr 162a6 <__floatunsisf>
    e0a0:	|         addq.l #4,sp
    e0a2:	|         move.l d0,d1
    e0a4:	|         move.l 1af42 <cameraZoom>,d0
    e0aa:	|         move.l d0,-(sp)
    e0ac:	|         move.l d1,-(sp)
    e0ae:	|         jsr 1612a <__divsf3>
    e0b4:	|         addq.l #8,sp
    e0b6:	|         move.l d0,-(sp)
    e0b8:	|         move.l d2,-(sp)
    e0ba:	|         jsr 16572 <__subsf3>
    e0c0:	|         addq.l #8,sp
    e0c2:	|         move.l d0,-(sp)
    e0c4:	|         jsr 16216 <__fixsfsi>
    e0ca:	|         addq.l #4,sp
    e0cc:	|         move.l d0,1b6b4 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    e0d2:	|         move.l 1b6b8 <cameraY>,d0
    e0d8:	|         move.l d0,-(sp)
    e0da:	|         jsr 1627e <__floatsisf>
    e0e0:	|         addq.l #4,sp
    e0e2:	|         move.l d0,d2
    e0e4:	|         move.l 1b4fa <winHeight>,d0
    e0ea:	|         lsr.l #1,d0
    e0ec:	|         move.l d0,-(sp)
    e0ee:	|         jsr 162a6 <__floatunsisf>
    e0f4:	|         addq.l #4,sp
    e0f6:	|         move.l d0,d1
    e0f8:	|         move.l 1af42 <cameraZoom>,d0
    e0fe:	|         move.l d0,-(sp)
    e100:	|         move.l d1,-(sp)
    e102:	|         jsr 1612a <__divsf3>
    e108:	|         addq.l #8,sp
    e10a:	|         move.l d0,-(sp)
    e10c:	|         move.l d2,-(sp)
    e10e:	|         jsr 16572 <__subsf3>
    e114:	|         addq.l #8,sp
    e116:	|         move.l d0,-(sp)
    e118:	|         jsr 16216 <__fixsfsi>
    e11e:	|         addq.l #4,sp
    e120:	|         move.l d0,1b6b8 <cameraY>

	if (cameraX < 0) cameraX = 0;
    e126:	|         move.l 1b6b4 <cameraX>,d0
    e12c:	|     /-- bpl.s e138 <builtIn_aimCamera+0x12e>
    e12e:	|     |   clr.l 1b6b4 <cameraX>
    e134:	|  /--|-- bra.w e1ee <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    e138:	|  |  \-> move.l 1b6b4 <cameraX>,d0
    e13e:	|  |      move.l d0,-(sp)
    e140:	|  |      jsr 1627e <__floatsisf>
    e146:	|  |      addq.l #4,sp
    e148:	|  |      move.l d0,d2
    e14a:	|  |      move.l 1b696 <sceneWidth>,d0
    e150:	|  |      move.l d0,-(sp)
    e152:	|  |      jsr 162a6 <__floatunsisf>
    e158:	|  |      addq.l #4,sp
    e15a:	|  |      move.l d0,d3
    e15c:	|  |      move.l 1b4f6 <winWidth>,d0
    e162:	|  |      move.l d0,-(sp)
    e164:	|  |      jsr 162a6 <__floatunsisf>
    e16a:	|  |      addq.l #4,sp
    e16c:	|  |      move.l d0,d1
    e16e:	|  |      move.l 1af42 <cameraZoom>,d0
    e174:	|  |      move.l d0,-(sp)
    e176:	|  |      move.l d1,-(sp)
    e178:	|  |      jsr 1612a <__divsf3>
    e17e:	|  |      addq.l #8,sp
    e180:	|  |      move.l d0,-(sp)
    e182:	|  |      move.l d3,-(sp)
    e184:	|  |      jsr 16572 <__subsf3>
    e18a:	|  |      addq.l #8,sp
    e18c:	|  |      move.l d0,-(sp)
    e18e:	|  |      move.l d2,-(sp)
    e190:	|  |      jsr 163ea <__gtsf2>
    e196:	|  |      addq.l #8,sp
    e198:	|  |      tst.l d0
    e19a:	|  +----- ble.s e1ee <builtIn_aimCamera+0x1e4>
    e19c:	|  |      move.l 1b696 <sceneWidth>,d0
    e1a2:	|  |      move.l d0,-(sp)
    e1a4:	|  |      jsr 162a6 <__floatunsisf>
    e1aa:	|  |      addq.l #4,sp
    e1ac:	|  |      move.l d0,d2
    e1ae:	|  |      move.l 1b4f6 <winWidth>,d0
    e1b4:	|  |      move.l d0,-(sp)
    e1b6:	|  |      jsr 162a6 <__floatunsisf>
    e1bc:	|  |      addq.l #4,sp
    e1be:	|  |      move.l d0,d1
    e1c0:	|  |      move.l 1af42 <cameraZoom>,d0
    e1c6:	|  |      move.l d0,-(sp)
    e1c8:	|  |      move.l d1,-(sp)
    e1ca:	|  |      jsr 1612a <__divsf3>
    e1d0:	|  |      addq.l #8,sp
    e1d2:	|  |      move.l d0,-(sp)
    e1d4:	|  |      move.l d2,-(sp)
    e1d6:	|  |      jsr 16572 <__subsf3>
    e1dc:	|  |      addq.l #8,sp
    e1de:	|  |      move.l d0,-(sp)
    e1e0:	|  |      jsr 16216 <__fixsfsi>
    e1e6:	|  |      addq.l #4,sp
    e1e8:	|  |      move.l d0,1b6b4 <cameraX>
	if (cameraY < 0) cameraY = 0;
    e1ee:	|  \----> move.l 1b6b8 <cameraY>,d0
    e1f4:	|     /-- bpl.s e200 <builtIn_aimCamera+0x1f6>
    e1f6:	|     |   clr.l 1b6b8 <cameraY>
    e1fc:	|  /--|-- bra.w e2b6 <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    e200:	|  |  \-> move.l 1b6b8 <cameraY>,d0
    e206:	|  |      move.l d0,-(sp)
    e208:	|  |      jsr 1627e <__floatsisf>
    e20e:	|  |      addq.l #4,sp
    e210:	|  |      move.l d0,d2
    e212:	|  |      move.l 1b69a <sceneHeight>,d0
    e218:	|  |      move.l d0,-(sp)
    e21a:	|  |      jsr 162a6 <__floatunsisf>
    e220:	|  |      addq.l #4,sp
    e222:	|  |      move.l d0,d3
    e224:	|  |      move.l 1b4fa <winHeight>,d0
    e22a:	|  |      move.l d0,-(sp)
    e22c:	|  |      jsr 162a6 <__floatunsisf>
    e232:	|  |      addq.l #4,sp
    e234:	|  |      move.l d0,d1
    e236:	|  |      move.l 1af42 <cameraZoom>,d0
    e23c:	|  |      move.l d0,-(sp)
    e23e:	|  |      move.l d1,-(sp)
    e240:	|  |      jsr 1612a <__divsf3>
    e246:	|  |      addq.l #8,sp
    e248:	|  |      move.l d0,-(sp)
    e24a:	|  |      move.l d3,-(sp)
    e24c:	|  |      jsr 16572 <__subsf3>
    e252:	|  |      addq.l #8,sp
    e254:	|  |      move.l d0,-(sp)
    e256:	|  |      move.l d2,-(sp)
    e258:	|  |      jsr 163ea <__gtsf2>
    e25e:	|  |      addq.l #8,sp
    e260:	|  |      tst.l d0
    e262:	|  +----- ble.s e2b6 <builtIn_aimCamera+0x2ac>
    e264:	|  |      move.l 1b69a <sceneHeight>,d0
    e26a:	|  |      move.l d0,-(sp)
    e26c:	|  |      jsr 162a6 <__floatunsisf>
    e272:	|  |      addq.l #4,sp
    e274:	|  |      move.l d0,d2
    e276:	|  |      move.l 1b4fa <winHeight>,d0
    e27c:	|  |      move.l d0,-(sp)
    e27e:	|  |      jsr 162a6 <__floatunsisf>
    e284:	|  |      addq.l #4,sp
    e286:	|  |      move.l d0,d1
    e288:	|  |      move.l 1af42 <cameraZoom>,d0
    e28e:	|  |      move.l d0,-(sp)
    e290:	|  |      move.l d1,-(sp)
    e292:	|  |      jsr 1612a <__divsf3>
    e298:	|  |      addq.l #8,sp
    e29a:	|  |      move.l d0,-(sp)
    e29c:	|  |      move.l d2,-(sp)
    e29e:	|  |      jsr 16572 <__subsf3>
    e2a4:	|  |      addq.l #8,sp
    e2a6:	|  |      move.l d0,-(sp)
    e2a8:	|  |      jsr 16216 <__fixsfsi>
    e2ae:	|  |      addq.l #4,sp
    e2b0:	|  |      move.l d0,1b6b8 <cameraY>
	return BR_CONTINUE;
    e2b6:	|  \----> moveq #2,d0
}
    e2b8:	\-------> move.l (sp)+,d2
    e2ba:	          move.l (sp)+,d3
    e2bc:	          rts

0000e2be <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    e2be:	       subq.l #4,sp
    e2c0:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e2c2:	       movea.l 16(sp),a0
    e2c6:	       move.l 24(a0),d0
    e2ca:	       move.l d0,-(sp)
    e2cc:	       pea 1 <_start+0x1>
    e2d0:	       moveq #12,d0
    e2d2:	       add.l sp,d0
    e2d4:	       move.l d0,-(sp)
    e2d6:	       jsr 13894 <getValueType>
    e2dc:	       lea 12(sp),sp
    e2e0:	       tst.w d0
    e2e2:	   /-- bne.s e2ea <builtIn_zoomCamera+0x2c>
    e2e4:	   |   moveq #1,d0
    e2e6:	/--|-- bra.w e4e4 <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    e2ea:	|  \-> moveq #24,d0
    e2ec:	|      add.l 16(sp),d0
    e2f0:	|      move.l d0,-(sp)
    e2f2:	|      jsr 14218 <trimStack>
    e2f8:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    e2fa:	|      move.l 1b55e <input+0xa>,d0
    e300:	|      move.l d0,-(sp)
    e302:	|      jsr 1627e <__floatsisf>
    e308:	|      addq.l #4,sp
    e30a:	|      move.l d0,d1
    e30c:	|      move.l 1af42 <cameraZoom>,d0
    e312:	|      move.l d0,-(sp)
    e314:	|      move.l d1,-(sp)
    e316:	|      jsr 16330 <__mulsf3>
    e31c:	|      addq.l #8,sp
    e31e:	|      move.l d0,-(sp)
    e320:	|      jsr 16216 <__fixsfsi>
    e326:	|      addq.l #4,sp
    e328:	|      move.l d0,1b55e <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    e32e:	|      move.l 1b562 <input+0xe>,d0
    e334:	|      move.l d0,-(sp)
    e336:	|      jsr 1627e <__floatsisf>
    e33c:	|      addq.l #4,sp
    e33e:	|      move.l d0,d1
    e340:	|      move.l 1af42 <cameraZoom>,d0
    e346:	|      move.l d0,-(sp)
    e348:	|      move.l d1,-(sp)
    e34a:	|      jsr 16330 <__mulsf3>
    e350:	|      addq.l #8,sp
    e352:	|      move.l d0,-(sp)
    e354:	|      jsr 16216 <__fixsfsi>
    e35a:	|      addq.l #4,sp
    e35c:	|      move.l d0,1b562 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    e362:	|      move.l 4(sp),d0
    e366:	|      move.l d0,-(sp)
    e368:	|      jsr 1627e <__floatsisf>
    e36e:	|      addq.l #4,sp
    e370:	|      move.l #1008981770,-(sp)
    e376:	|      move.l d0,-(sp)
    e378:	|      jsr 16330 <__mulsf3>
    e37e:	|      addq.l #8,sp
    e380:	|      move.l d0,1af42 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    e386:	|      move.l 1b4f6 <winWidth>,d0
    e38c:	|      move.l d0,-(sp)
    e38e:	|      jsr 162a6 <__floatunsisf>
    e394:	|      addq.l #4,sp
    e396:	|      move.l d0,d1
    e398:	|      move.l 1af42 <cameraZoom>,d0
    e39e:	|      move.l d0,-(sp)
    e3a0:	|      move.l d1,-(sp)
    e3a2:	|      jsr 1612a <__divsf3>
    e3a8:	|      addq.l #8,sp
    e3aa:	|      move.l d0,d2
    e3ac:	|      move.l 1b696 <sceneWidth>,d0
    e3b2:	|      move.l d0,-(sp)
    e3b4:	|      jsr 162a6 <__floatunsisf>
    e3ba:	|      addq.l #4,sp
    e3bc:	|      move.l d0,-(sp)
    e3be:	|      move.l d2,-(sp)
    e3c0:	|      jsr 163ea <__gtsf2>
    e3c6:	|      addq.l #8,sp
    e3c8:	|      tst.l d0
    e3ca:	|  /-- ble.s e400 <builtIn_zoomCamera+0x142>
    e3cc:	|  |   move.l 1b4f6 <winWidth>,d0
    e3d2:	|  |   move.l d0,-(sp)
    e3d4:	|  |   jsr 162a6 <__floatunsisf>
    e3da:	|  |   addq.l #4,sp
    e3dc:	|  |   move.l d0,d2
    e3de:	|  |   move.l 1b696 <sceneWidth>,d0
    e3e4:	|  |   move.l d0,-(sp)
    e3e6:	|  |   jsr 162a6 <__floatunsisf>
    e3ec:	|  |   addq.l #4,sp
    e3ee:	|  |   move.l d0,-(sp)
    e3f0:	|  |   move.l d2,-(sp)
    e3f2:	|  |   jsr 1612a <__divsf3>
    e3f8:	|  |   addq.l #8,sp
    e3fa:	|  |   move.l d0,1af42 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    e400:	|  \-> move.l 1b4fa <winHeight>,d0
    e406:	|      move.l d0,-(sp)
    e408:	|      jsr 162a6 <__floatunsisf>
    e40e:	|      addq.l #4,sp
    e410:	|      move.l d0,d1
    e412:	|      move.l 1af42 <cameraZoom>,d0
    e418:	|      move.l d0,-(sp)
    e41a:	|      move.l d1,-(sp)
    e41c:	|      jsr 1612a <__divsf3>
    e422:	|      addq.l #8,sp
    e424:	|      move.l d0,d2
    e426:	|      move.l 1b69a <sceneHeight>,d0
    e42c:	|      move.l d0,-(sp)
    e42e:	|      jsr 162a6 <__floatunsisf>
    e434:	|      addq.l #4,sp
    e436:	|      move.l d0,-(sp)
    e438:	|      move.l d2,-(sp)
    e43a:	|      jsr 163ea <__gtsf2>
    e440:	|      addq.l #8,sp
    e442:	|      tst.l d0
    e444:	|  /-- ble.s e47a <builtIn_zoomCamera+0x1bc>
    e446:	|  |   move.l 1b4fa <winHeight>,d0
    e44c:	|  |   move.l d0,-(sp)
    e44e:	|  |   jsr 162a6 <__floatunsisf>
    e454:	|  |   addq.l #4,sp
    e456:	|  |   move.l d0,d2
    e458:	|  |   move.l 1b69a <sceneHeight>,d0
    e45e:	|  |   move.l d0,-(sp)
    e460:	|  |   jsr 162a6 <__floatunsisf>
    e466:	|  |   addq.l #4,sp
    e468:	|  |   move.l d0,-(sp)
    e46a:	|  |   move.l d2,-(sp)
    e46c:	|  |   jsr 1612a <__divsf3>
    e472:	|  |   addq.l #8,sp
    e474:	|  |   move.l d0,1af42 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    e47a:	|  \-> move.l 1b55e <input+0xa>,d0
    e480:	|      move.l d0,-(sp)
    e482:	|      jsr 1627e <__floatsisf>
    e488:	|      addq.l #4,sp
    e48a:	|      move.l d0,d1
    e48c:	|      move.l 1af42 <cameraZoom>,d0
    e492:	|      move.l d0,-(sp)
    e494:	|      move.l d1,-(sp)
    e496:	|      jsr 1612a <__divsf3>
    e49c:	|      addq.l #8,sp
    e49e:	|      move.l d0,-(sp)
    e4a0:	|      jsr 16216 <__fixsfsi>
    e4a6:	|      addq.l #4,sp
    e4a8:	|      move.l d0,1b55e <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    e4ae:	|      move.l 1b562 <input+0xe>,d0
    e4b4:	|      move.l d0,-(sp)
    e4b6:	|      jsr 1627e <__floatsisf>
    e4bc:	|      addq.l #4,sp
    e4be:	|      move.l d0,d1
    e4c0:	|      move.l 1af42 <cameraZoom>,d0
    e4c6:	|      move.l d0,-(sp)
    e4c8:	|      move.l d1,-(sp)
    e4ca:	|      jsr 1612a <__divsf3>
    e4d0:	|      addq.l #8,sp
    e4d2:	|      move.l d0,-(sp)
    e4d4:	|      jsr 16216 <__fixsfsi>
    e4da:	|      addq.l #4,sp
    e4dc:	|      move.l d0,1b562 <input+0xe>

	return BR_CONTINUE;
    e4e2:	|      moveq #2,d0
}
    e4e4:	\----> move.l (sp)+,d2
    e4e6:	       addq.l #4,sp
    e4e8:	       rts

0000e4ea <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    e4ea:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    e4ec:	             tst.l 8(sp)
    e4f0:	         /-- bne.s e504 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    e4f2:	         |   pea 1847a <PutChar+0x1b64>
    e4f8:	         |   jsr 15fc6 <KPrintF>
    e4fe:	         |   addq.l #4,sp
		return BR_ERROR;
    e500:	         |   moveq #1,d0
    e502:	/--------|-- bra.s e564 <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    e504:	|        \-> jsr 14bc6 <rand>
    e50a:	|            move.l d0,d1
    e50c:	|            move.l 8(sp),d0
    e510:	|            move.l d0,-(sp)
    e512:	|            move.l d1,-(sp)
    e514:	|            jsr 168da <__umodsi3>
    e51a:	|            addq.l #8,sp
    e51c:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    e51e:	|     /----- bra.s e552 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    e520:	|  /--|----> move.l (sp),d0
    e522:	|  |  |      cmp.l 8(sp),d0
    e526:	|  |  |  /-- bne.s e542 <builtIn_pickOne+0x58>
    e528:	|  |  |  |   moveq #28,d0
    e52a:	|  |  |  |   add.l 12(sp),d0
    e52e:	|  |  |  |   movea.l 12(sp),a0
    e532:	|  |  |  |   move.l 24(a0),d1
    e536:	|  |  |  |   move.l d0,-(sp)
    e538:	|  |  |  |   move.l d1,-(sp)
    e53a:	|  |  |  |   jsr 13d4e <copyVariable>
    e540:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    e542:	|  |  |  \-> moveq #24,d0
    e544:	|  |  |      add.l 12(sp),d0
    e548:	|  |  |      move.l d0,-(sp)
    e54a:	|  |  |      jsr 14218 <trimStack>
    e550:	|  |  |      addq.l #4,sp
	while (numParams --) {
    e552:	|  |  \----> move.l 8(sp),d0
    e556:	|  |         move.l d0,d1
    e558:	|  |         subq.l #1,d1
    e55a:	|  |         move.l d1,8(sp)
    e55e:	|  |         tst.l d0
    e560:	|  \-------- bne.s e520 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    e562:	|            moveq #2,d0
}
    e564:	\----------> addq.l #4,sp
    e566:	             rts

0000e568 <builtIn_substring>:

builtIn(substring)
{
    e568:	       lea -40(sp),sp
    e56c:	       move.l a6,-(sp)
    e56e:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    e570:	       movea.l 56(sp),a0
    e574:	       move.l 24(a0),d0
    e578:	       move.l d0,-(sp)
    e57a:	       pea 1 <_start+0x1>
    e57e:	       lea 16(sp),a0
    e582:	       move.l a0,-(sp)
    e584:	       jsr 13894 <getValueType>
    e58a:	       lea 12(sp),sp
    e58e:	       tst.w d0
    e590:	   /-- bne.s e598 <builtIn_substring+0x30>
    e592:	   |   moveq #1,d0
    e594:	/--|-- bra.w e710 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    e598:	|  \-> moveq #24,d0
    e59a:	|      add.l 56(sp),d0
    e59e:	|      move.l d0,-(sp)
    e5a0:	|      jsr 14218 <trimStack>
    e5a6:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    e5a8:	|      movea.l 56(sp),a0
    e5ac:	|      move.l 24(a0),d0
    e5b0:	|      move.l d0,-(sp)
    e5b2:	|      pea 1 <_start+0x1>
    e5b6:	|      lea 20(sp),a0
    e5ba:	|      move.l a0,-(sp)
    e5bc:	|      jsr 13894 <getValueType>
    e5c2:	|      lea 12(sp),sp
    e5c6:	|      tst.w d0
    e5c8:	|  /-- bne.s e5d0 <builtIn_substring+0x68>
    e5ca:	|  |   moveq #1,d0
    e5cc:	+--|-- bra.w e710 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    e5d0:	|  \-> moveq #24,d0
    e5d2:	|      add.l 56(sp),d0
    e5d6:	|      move.l d0,-(sp)
    e5d8:	|      jsr 14218 <trimStack>
    e5de:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    e5e0:	|      movea.l 56(sp),a0
    e5e4:	|      move.l 24(a0),d0
    e5e8:	|      move.l d0,-(sp)
    e5ea:	|      jsr 13e6a <getTextFromAnyVar>
    e5f0:	|      addq.l #4,sp
    e5f2:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    e5f6:	|      moveq #24,d0
    e5f8:	|      add.l 56(sp),d0
    e5fc:	|      move.l d0,-(sp)
    e5fe:	|      jsr 14218 <trimStack>
    e604:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    e606:	|      move.l 44(sp),-(sp)
    e60a:	|      jsr 12d80 <strlen>
    e610:	|      addq.l #4,sp
    e612:	|      move.l d0,d1
    e614:	|      move.l 12(sp),d0
    e618:	|      movea.l d0,a0
    e61a:	|      move.l 8(sp),d0
    e61e:	|      add.l a0,d0
    e620:	|      cmp.l d1,d0
    e622:	|  /-- bls.s e658 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    e624:	|  |   move.l 44(sp),-(sp)
    e628:	|  |   jsr 12d80 <strlen>
    e62e:	|  |   addq.l #4,sp
    e630:	|  |   move.l d0,d1
    e632:	|  |   move.l 12(sp),d0
    e636:	|  |   sub.l d0,d1
    e638:	|  |   move.l d1,d0
    e63a:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    e63e:	|  |   move.l 44(sp),-(sp)
    e642:	|  |   jsr 12d80 <strlen>
    e648:	|  |   addq.l #4,sp
    e64a:	|  |   move.l d0,d1
    e64c:	|  |   move.l 12(sp),d0
    e650:	|  |   cmp.l d1,d0
    e652:	|  +-- bls.s e658 <builtIn_substring+0xf0>
            start = 0;
    e654:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    e658:	|  \-> move.l 8(sp),d0
    e65c:	|  /-- bpl.s e662 <builtIn_substring+0xfa>
        length = 0;
    e65e:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    e662:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    e668:	|      move.l 12(sp),d1
    e66c:	|      move.l 8(sp),d0
    e670:	|      move.l d1,d2
    e672:	|      add.l d0,d2
    e674:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    e678:	|      move.l 36(sp),d0
    e67c:	|      sub.l 40(sp),d0
    e680:	|      addq.l #1,d0
    e682:	|      move.l d0,32(sp)
    e686:	|      clr.l 28(sp)
    e68a:	|      move.l 1b5a2 <SysBase>,d0
    e690:	|      movea.l d0,a6
    e692:	|      move.l 32(sp),d0
    e696:	|      move.l 28(sp),d1
    e69a:	|      jsr -684(a6)
    e69e:	|      move.l d0,24(sp)
    e6a2:	|      move.l 24(sp),d0
    e6a6:	|      move.l d0,20(sp)
    if (!newString) {
    e6aa:	|  /-- bne.s e6b0 <builtIn_substring+0x148>
        return BR_ERROR;
    e6ac:	|  |   moveq #1,d0
    e6ae:	+--|-- bra.s e710 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    e6b0:	|  \-> move.l 36(sp),d0
    e6b4:	|      sub.l 40(sp),d0
    e6b8:	|      move.l d0,d1
    e6ba:	|      move.l 40(sp),d0
    e6be:	|      add.l 44(sp),d0
    e6c2:	|      move.l d1,-(sp)
    e6c4:	|      move.l d0,-(sp)
    e6c6:	|      move.l 28(sp),-(sp)
    e6ca:	|      jsr 15f7a <memcpy>
    e6d0:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    e6d4:	|      move.l 36(sp),d0
    e6d8:	|      sub.l 40(sp),d0
    e6dc:	|      movea.l 20(sp),a0
    e6e0:	|      adda.l d0,a0
    e6e2:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    e6e4:	|      moveq #28,d0
    e6e6:	|      add.l 56(sp),d0
    e6ea:	|      move.l 20(sp),-(sp)
    e6ee:	|      move.l d0,-(sp)
    e6f0:	|      jsr 13ab6 <makeTextVar>
    e6f6:	|      addq.l #8,sp
    FreeVec(newString);
    e6f8:	|      move.l 20(sp),16(sp)
    e6fe:	|      move.l 1b5a2 <SysBase>,d0
    e704:	|      movea.l d0,a6
    e706:	|      movea.l 16(sp),a1
    e70a:	|      jsr -690(a6)
    return BR_CONTINUE;
    e70e:	|      moveq #2,d0
}
    e710:	\----> move.l (sp)+,d2
    e712:	       movea.l (sp)+,a6
    e714:	       lea 40(sp),sp
    e718:	       rts

0000e71a <builtIn_stringLength>:

builtIn(stringLength)
{
    e71a:	subq.l #8,sp
    e71c:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    e71e:	movea.l 20(sp),a0
    e722:	move.l 24(a0),d0
    e726:	move.l d0,-(sp)
    e728:	jsr 13e6a <getTextFromAnyVar>
    e72e:	addq.l #4,sp
    e730:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    e734:	moveq #24,d0
    e736:	add.l 20(sp),d0
    e73a:	move.l d0,-(sp)
    e73c:	jsr 14218 <trimStack>
    e742:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    e744:	move.l 8(sp),-(sp)
    e748:	jsr 12d80 <strlen>
    e74e:	addq.l #4,sp
    e750:	move.l d0,d1
    e752:	moveq #28,d0
    e754:	add.l 20(sp),d0
    e758:	move.l d1,-(sp)
    e75a:	pea 1 <_start+0x1>
    e75e:	move.l d0,-(sp)
    e760:	jsr 14186 <setVariable>
    e766:	lea 12(sp),sp
	FreeVec(newText);
    e76a:	move.l 8(sp),4(sp)
    e770:	move.l 1b5a2 <SysBase>,d0
    e776:	movea.l d0,a6
    e778:	movea.l 4(sp),a1
    e77c:	jsr -690(a6)
	return BR_CONTINUE;
    e780:	moveq #2,d0
}
    e782:	movea.l (sp)+,a6
    e784:	addq.l #8,sp
    e786:	rts

0000e788 <builtIn_newStack>:

builtIn(newStack)
{
    e788:	             lea -12(sp),sp
    e78c:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    e78e:	             moveq #28,d0
    e790:	             add.l 24(sp),d0
    e794:	             move.l d0,-(sp)
    e796:	             jsr 13ae2 <unlinkVar>
    e79c:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    e79e:	             movea.l 24(sp),a0
    e7a2:	             moveq #6,d0
    e7a4:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    e7a8:	             moveq #12,d1
    e7aa:	             move.l d1,12(sp)
    e7ae:	             clr.l 8(sp)
    e7b2:	             move.l 1b5a2 <SysBase>,d0
    e7b8:	             movea.l d0,a6
    e7ba:	             move.l 12(sp),d0
    e7be:	             move.l 8(sp),d1
    e7c2:	             jsr -684(a6)
    e7c6:	             move.l d0,4(sp)
    e7ca:	             move.l 4(sp),d0
    e7ce:	             movea.l 24(sp),a0
    e7d2:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    e7d6:	             movea.l 24(sp),a0
    e7da:	             move.l 32(a0),d0
    e7de:	         /-- bne.s e7e6 <builtIn_newStack+0x5e>
    e7e0:	         |   moveq #1,d0
    e7e2:	/--------|-- bra.w e878 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    e7e6:	|        \-> movea.l 24(sp),a0
    e7ea:	|            movea.l 32(a0),a0
    e7ee:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    e7f0:	|            movea.l 24(sp),a0
    e7f4:	|            movea.l 32(a0),a0
    e7f8:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    e7fc:	|            movea.l 24(sp),a0
    e800:	|            movea.l 32(a0),a0
    e804:	|            moveq #1,d0
    e806:	|            move.l d0,8(a0)
    
    while (numParams--) {
    e80a:	|     /----- bra.s e866 <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    e80c:	|  /--|----> movea.l 24(sp),a0
    e810:	|  |  |      move.l 32(a0),d0
    e814:	|  |  |      move.l d0,d1
    e816:	|  |  |      movea.l 24(sp),a0
    e81a:	|  |  |      move.l 24(a0),d0
    e81e:	|  |  |      move.l d1,-(sp)
    e820:	|  |  |      move.l d0,-(sp)
    e822:	|  |  |      jsr 130d0 <addVarToStack>
    e828:	|  |  |      addq.l #8,sp
    e82a:	|  |  |      tst.w d0
    e82c:	|  |  |  /-- bne.s e832 <builtIn_newStack+0xaa>
    e82e:	|  |  |  |   moveq #1,d0
    e830:	+--|--|--|-- bra.s e878 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    e832:	|  |  |  \-> movea.l 24(sp),a0
    e836:	|  |  |      movea.l 32(a0),a0
    e83a:	|  |  |      move.l 4(a0),d0
    e83e:	|  |  |  /-- bne.s e856 <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    e840:	|  |  |  |   movea.l 24(sp),a0
    e844:	|  |  |  |   movea.l 32(a0),a1
    e848:	|  |  |  |   movea.l 24(sp),a0
    e84c:	|  |  |  |   movea.l 32(a0),a0
    e850:	|  |  |  |   move.l (a1),d0
    e852:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    e856:	|  |  |  \-> moveq #24,d0
    e858:	|  |  |      add.l 24(sp),d0
    e85c:	|  |  |      move.l d0,-(sp)
    e85e:	|  |  |      jsr 14218 <trimStack>
    e864:	|  |  |      addq.l #4,sp
    while (numParams--) {
    e866:	|  |  \----> move.l 20(sp),d0
    e86a:	|  |         move.l d0,d1
    e86c:	|  |         subq.l #1,d1
    e86e:	|  |         move.l d1,20(sp)
    e872:	|  |         tst.l d0
    e874:	|  \-------- bne.s e80c <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    e876:	|            moveq #2,d0
}
    e878:	\----------> movea.l (sp)+,a6
    e87a:	             lea 12(sp),sp
    e87e:	             rts

0000e880 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    e880:	          movea.l 8(sp),a0
    e884:	          movea.l 24(a0),a0
    e888:	          move.l (a0),d0
    e88a:	          moveq #6,d1
    e88c:	          cmp.l d0,d1
    e88e:	      /-- beq.s e8aa <builtIn_stackSize+0x2a>
    e890:	      |   moveq #10,d1
    e892:	      |   cmp.l d0,d1
    e894:	   /--|-- beq.s e8ee <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    e896:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    e898:	   |  |   pea 184ad <PutChar+0x1b97>
    e89e:	   |  |   jsr 15fc6 <KPrintF>
    e8a4:	   |  |   addq.l #4,sp
	return BR_ERROR;
    e8a6:	   |  |   moveq #1,d0
    e8a8:	/--|--|-- bra.s e928 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    e8aa:	|  |  \-> movea.l 8(sp),a0
    e8ae:	|  |      movea.l 24(a0),a0
    e8b2:	|  |      move.l 4(a0),d0
    e8b6:	|  |      move.l d0,-(sp)
    e8b8:	|  |      jsr 141f4 <stackSize>
    e8be:	|  |      addq.l #4,sp
    e8c0:	|  |      move.l d0,d1
    e8c2:	|  |      moveq #28,d0
    e8c4:	|  |      add.l 8(sp),d0
    e8c8:	|  |      move.l d1,-(sp)
    e8ca:	|  |      pea 1 <_start+0x1>
    e8ce:	|  |      move.l d0,-(sp)
    e8d0:	|  |      jsr 14186 <setVariable>
    e8d6:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    e8da:	|  |      moveq #24,d0
    e8dc:	|  |      add.l 8(sp),d0
    e8e0:	|  |      move.l d0,-(sp)
    e8e2:	|  |      jsr 14218 <trimStack>
    e8e8:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    e8ea:	|  |      moveq #2,d0
    e8ec:	+--|----- bra.s e928 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    e8ee:	|  \----> movea.l 8(sp),a0
    e8f2:	|         movea.l 24(a0),a0
    e8f6:	|         movea.l 4(a0),a0
    e8fa:	|         move.l 4(a0),d1
    e8fe:	|         moveq #28,d0
    e900:	|         add.l 8(sp),d0
    e904:	|         move.l d1,-(sp)
    e906:	|         pea 1 <_start+0x1>
    e90a:	|         move.l d0,-(sp)
    e90c:	|         jsr 14186 <setVariable>
    e912:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    e916:	|         moveq #24,d0
    e918:	|         add.l 8(sp),d0
    e91c:	|         move.l d0,-(sp)
    e91e:	|         jsr 14218 <trimStack>
    e924:	|         addq.l #4,sp
			return BR_CONTINUE;
    e926:	|         moveq #2,d0
}
    e928:	\-------> rts

0000e92a <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    e92a:	       movea.l 8(sp),a0
    e92e:	       movea.l 24(a0),a0
    e932:	       move.l (a0),d0
    e934:	       moveq #6,d1
    e936:	       cmp.l d0,d1
    e938:	   /-- beq.s e94c <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    e93a:	   |   pea 184d6 <PutChar+0x1bc0>
    e940:	   |   jsr 15fc6 <KPrintF>
    e946:	   |   addq.l #4,sp
		return BR_ERROR;
    e948:	   |   moveq #1,d0
    e94a:	/--|-- bra.s e980 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    e94c:	|  \-> moveq #28,d0
    e94e:	|      add.l 8(sp),d0
    e952:	|      movea.l 8(sp),a0
    e956:	|      move.l 24(a0),d1
    e95a:	|      move.l d0,-(sp)
    e95c:	|      move.l d1,-(sp)
    e95e:	|      jsr 1339a <copyStack>
    e964:	|      addq.l #8,sp
    e966:	|      tst.w d0
    e968:	|  /-- bne.s e96e <builtIn_copyStack+0x44>
    e96a:	|  |   moveq #1,d0
    e96c:	+--|-- bra.s e980 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    e96e:	|  \-> moveq #24,d0
    e970:	|      add.l 8(sp),d0
    e974:	|      move.l d0,-(sp)
    e976:	|      jsr 14218 <trimStack>
    e97c:	|      addq.l #4,sp
	return BR_CONTINUE;
    e97e:	|      moveq #2,d0
}
    e980:	\----> rts

0000e982 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    e982:	       movea.l 8(sp),a0
    e986:	       movea.l 24(a0),a0
    e98a:	       movea.l 8(a0),a0
    e98e:	       move.l (a0),d0
    e990:	       moveq #6,d1
    e992:	       cmp.l d0,d1
    e994:	   /-- beq.s e9aa <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    e996:	   |   pea 184ef <PutChar+0x1bd9>
    e99c:	   |   jsr 15fc6 <KPrintF>
    e9a2:	   |   addq.l #4,sp
		return BR_ERROR;
    e9a4:	   |   moveq #1,d0
    e9a6:	/--|-- bra.w ea38 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    e9aa:	|  \-> movea.l 8(sp),a0
    e9ae:	|      movea.l 24(a0),a0
    e9b2:	|      movea.l 8(a0),a0
    e9b6:	|      move.l 4(a0),d0
    e9ba:	|      move.l d0,d1
    e9bc:	|      movea.l 8(sp),a0
    e9c0:	|      move.l 24(a0),d0
    e9c4:	|      move.l d1,-(sp)
    e9c6:	|      move.l d0,-(sp)
    e9c8:	|      jsr 130d0 <addVarToStack>
    e9ce:	|      addq.l #8,sp
    e9d0:	|      tst.w d0
    e9d2:	|  /-- bne.s e9d8 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    e9d4:	|  |   moveq #1,d0
    e9d6:	+--|-- bra.s ea38 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    e9d8:	|  \-> movea.l 8(sp),a0
    e9dc:	|      movea.l 24(a0),a0
    e9e0:	|      movea.l 8(a0),a0
    e9e4:	|      movea.l 4(a0),a0
    e9e8:	|      movea.l (a0),a0
    e9ea:	|      move.l 8(a0),d0
    e9ee:	|  /-- bne.s ea16 <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    e9f0:	|  |   movea.l 8(sp),a0
    e9f4:	|  |   movea.l 24(a0),a0
    e9f8:	|  |   movea.l 8(a0),a0
    e9fc:	|  |   movea.l 4(a0),a1
    ea00:	|  |   movea.l 8(sp),a0
    ea04:	|  |   movea.l 24(a0),a0
    ea08:	|  |   movea.l 8(a0),a0
    ea0c:	|  |   movea.l 4(a0),a0
    ea10:	|  |   move.l (a1),d0
    ea12:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    ea16:	|  \-> moveq #24,d0
    ea18:	|      add.l 8(sp),d0
    ea1c:	|      move.l d0,-(sp)
    ea1e:	|      jsr 14218 <trimStack>
    ea24:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    ea26:	|      moveq #24,d0
    ea28:	|      add.l 8(sp),d0
    ea2c:	|      move.l d0,-(sp)
    ea2e:	|      jsr 14218 <trimStack>
    ea34:	|      addq.l #4,sp
	return BR_CONTINUE;
    ea36:	|      moveq #2,d0
}
    ea38:	\----> rts

0000ea3a <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    ea3a:	             movea.l 8(sp),a0
    ea3e:	             movea.l 24(a0),a0
    ea42:	             movea.l 8(a0),a0
    ea46:	             move.l (a0),d0
    ea48:	             moveq #6,d1
    ea4a:	             cmp.l d0,d1
    ea4c:	         /-- beq.s ea62 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    ea4e:	         |   pea 184ef <PutChar+0x1bd9>
    ea54:	         |   jsr 15fc6 <KPrintF>
    ea5a:	         |   addq.l #4,sp
		return BR_ERROR;
    ea5c:	         |   moveq #1,d0
    ea5e:	/--------|-- bra.w eb50 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    ea62:	|        \-> movea.l 8(sp),a0
    ea66:	|            movea.l 24(a0),a0
    ea6a:	|            movea.l 8(a0),a0
    ea6e:	|            movea.l 4(a0),a0
    ea72:	|            move.l (a0),d0
    ea74:	|     /----- bne.s eace <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    ea76:	|     |      movea.l 8(sp),a0
    ea7a:	|     |      movea.l 24(a0),a0
    ea7e:	|     |      movea.l 8(a0),a0
    ea82:	|     |      move.l 4(a0),d0
    ea86:	|     |      move.l d0,d1
    ea88:	|     |      movea.l 8(sp),a0
    ea8c:	|     |      move.l 24(a0),d0
    ea90:	|     |      move.l d1,-(sp)
    ea92:	|     |      move.l d0,-(sp)
    ea94:	|     |      jsr 130d0 <addVarToStack>
    ea9a:	|     |      addq.l #8,sp
    ea9c:	|     |      tst.w d0
    ea9e:	|     |  /-- bne.s eaa6 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    eaa0:	|     |  |   moveq #1,d0
    eaa2:	+-----|--|-- bra.w eb50 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    eaa6:	|     |  \-> movea.l 8(sp),a0
    eaaa:	|     |      movea.l 24(a0),a0
    eaae:	|     |      movea.l 8(a0),a0
    eab2:	|     |      movea.l 4(a0),a1
    eab6:	|     |      movea.l 8(sp),a0
    eaba:	|     |      movea.l 24(a0),a0
    eabe:	|     |      movea.l 8(a0),a0
    eac2:	|     |      movea.l 4(a0),a0
    eac6:	|     |      move.l (a1),d0
    eac8:	|     |      move.l d0,4(a0)
    eacc:	|  /--|----- bra.s eb2e <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    eace:	|  |  \----> movea.l 8(sp),a0
    ead2:	|  |         movea.l 24(a0),a0
    ead6:	|  |         movea.l 8(a0),a0
    eada:	|  |         movea.l 4(a0),a0
    eade:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    eae2:	|  |         move.l d0,d1
    eae4:	|  |         addq.l #8,d1
    eae6:	|  |         movea.l 8(sp),a0
    eaea:	|  |         move.l 24(a0),d0
    eaee:	|  |         move.l d1,-(sp)
    eaf0:	|  |         move.l d0,-(sp)
    eaf2:	|  |         jsr 130d0 <addVarToStack>
    eaf8:	|  |         addq.l #8,sp
    eafa:	|  |         tst.w d0
    eafc:	|  |     /-- bne.s eb02 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    eafe:	|  |     |   moveq #1,d0
    eb00:	+--|-----|-- bra.s eb50 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    eb02:	|  |     \-> movea.l 8(sp),a0
    eb06:	|  |         movea.l 24(a0),a0
    eb0a:	|  |         movea.l 8(a0),a0
    eb0e:	|  |         movea.l 4(a0),a0
    eb12:	|  |         movea.l 4(a0),a1
    eb16:	|  |         movea.l 8(sp),a0
    eb1a:	|  |         movea.l 24(a0),a0
    eb1e:	|  |         movea.l 8(a0),a0
    eb22:	|  |         movea.l 4(a0),a0
    eb26:	|  |         move.l 8(a1),d0
    eb2a:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    eb2e:	|  \-------> moveq #24,d0
    eb30:	|            add.l 8(sp),d0
    eb34:	|            move.l d0,-(sp)
    eb36:	|            jsr 14218 <trimStack>
    eb3c:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    eb3e:	|            moveq #24,d0
    eb40:	|            add.l 8(sp),d0
    eb44:	|            move.l d0,-(sp)
    eb46:	|            jsr 14218 <trimStack>
    eb4c:	|            addq.l #4,sp
	return BR_CONTINUE;
    eb4e:	|            moveq #2,d0
}
    eb50:	\----------> rts

0000eb52 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    eb52:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    eb54:	       movea.l 12(sp),a0
    eb58:	       movea.l 24(a0),a0
    eb5c:	       movea.l 8(a0),a0
    eb60:	       move.l (a0),d0
    eb62:	       moveq #6,d1
    eb64:	       cmp.l d0,d1
    eb66:	   /-- beq.s eb7c <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    eb68:	   |   pea 184d6 <PutChar+0x1bc0>
    eb6e:	   |   jsr 15fc6 <KPrintF>
    eb74:	   |   addq.l #4,sp
		return BR_ERROR;
    eb76:	   |   moveq #1,d0
    eb78:	/--|-- bra.w ec12 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    eb7c:	|  \-> movea.l 12(sp),a0
    eb80:	|      movea.l 24(a0),a0
    eb84:	|      movea.l 8(a0),a0
    eb88:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    eb8c:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    eb8e:	|      movea.l 12(sp),a0
    eb92:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    eb96:	|      clr.l -(sp)
    eb98:	|      move.l d1,-(sp)
    eb9a:	|      move.l d0,-(sp)
    eb9c:	|      jsr 13470 <deleteVarFromStack>
    eba2:	|      lea 12(sp),sp
    eba6:	|      move.l d0,d1
    eba8:	|      moveq #28,d0
    ebaa:	|      add.l 12(sp),d0
    ebae:	|      move.l d1,-(sp)
    ebb0:	|      pea 1 <_start+0x1>
    ebb4:	|      move.l d0,-(sp)
    ebb6:	|      jsr 14186 <setVariable>
    ebbc:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    ebc0:	|      movea.l 12(sp),a0
    ebc4:	|      movea.l 24(a0),a0
    ebc8:	|      movea.l 8(a0),a0
    ebcc:	|      movea.l 4(a0),a0
    ebd0:	|      move.l (a0),d0
    ebd2:	|      movea.l 12(sp),a0
    ebd6:	|      movea.l 24(a0),a0
    ebda:	|      movea.l 8(a0),a0
    ebde:	|      movea.l 4(a0),a2
    ebe2:	|      move.l d0,-(sp)
    ebe4:	|      jsr 141d0 <stackFindLast>
    ebea:	|      addq.l #4,sp
    ebec:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    ebf0:	|      moveq #24,d0
    ebf2:	|      add.l 12(sp),d0
    ebf6:	|      move.l d0,-(sp)
    ebf8:	|      jsr 14218 <trimStack>
    ebfe:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    ec00:	|      moveq #24,d0
    ec02:	|      add.l 12(sp),d0
    ec06:	|      move.l d0,-(sp)
    ec08:	|      jsr 14218 <trimStack>
    ec0e:	|      addq.l #4,sp
	return BR_CONTINUE;
    ec10:	|      moveq #2,d0
}
    ec12:	\----> movea.l (sp)+,a2
    ec14:	       rts

0000ec16 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    ec16:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    ec18:	       movea.l 12(sp),a0
    ec1c:	       movea.l 24(a0),a0
    ec20:	       movea.l 8(a0),a0
    ec24:	       move.l (a0),d0
    ec26:	       moveq #6,d1
    ec28:	       cmp.l d0,d1
    ec2a:	   /-- beq.s ec40 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    ec2c:	   |   pea 184d6 <PutChar+0x1bc0>
    ec32:	   |   jsr 15fc6 <KPrintF>
    ec38:	   |   addq.l #4,sp
		return BR_ERROR;
    ec3a:	   |   moveq #1,d0
    ec3c:	/--|-- bra.w ecd8 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    ec40:	|  \-> movea.l 12(sp),a0
    ec44:	|      movea.l 24(a0),a0
    ec48:	|      movea.l 8(a0),a0
    ec4c:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    ec50:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    ec52:	|      movea.l 12(sp),a0
    ec56:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    ec5a:	|      pea 1 <_start+0x1>
    ec5e:	|      move.l d1,-(sp)
    ec60:	|      move.l d0,-(sp)
    ec62:	|      jsr 13470 <deleteVarFromStack>
    ec68:	|      lea 12(sp),sp
    ec6c:	|      move.l d0,d1
    ec6e:	|      moveq #28,d0
    ec70:	|      add.l 12(sp),d0
    ec74:	|      move.l d1,-(sp)
    ec76:	|      pea 1 <_start+0x1>
    ec7a:	|      move.l d0,-(sp)
    ec7c:	|      jsr 14186 <setVariable>
    ec82:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    ec86:	|      movea.l 12(sp),a0
    ec8a:	|      movea.l 24(a0),a0
    ec8e:	|      movea.l 8(a0),a0
    ec92:	|      movea.l 4(a0),a0
    ec96:	|      move.l (a0),d0
    ec98:	|      movea.l 12(sp),a0
    ec9c:	|      movea.l 24(a0),a0
    eca0:	|      movea.l 8(a0),a0
    eca4:	|      movea.l 4(a0),a2
    eca8:	|      move.l d0,-(sp)
    ecaa:	|      jsr 141d0 <stackFindLast>
    ecb0:	|      addq.l #4,sp
    ecb2:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    ecb6:	|      moveq #24,d0
    ecb8:	|      add.l 12(sp),d0
    ecbc:	|      move.l d0,-(sp)
    ecbe:	|      jsr 14218 <trimStack>
    ecc4:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    ecc6:	|      moveq #24,d0
    ecc8:	|      add.l 12(sp),d0
    eccc:	|      move.l d0,-(sp)
    ecce:	|      jsr 14218 <trimStack>
    ecd4:	|      addq.l #4,sp
	return BR_CONTINUE;
    ecd6:	|      moveq #2,d0
}
    ecd8:	\----> movea.l (sp)+,a2
    ecda:	       rts

0000ecdc <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    ecdc:	       movea.l 8(sp),a0
    ece0:	       movea.l 24(a0),a0
    ece4:	       move.l (a0),d0
    ece6:	       moveq #6,d1
    ece8:	       cmp.l d0,d1
    ecea:	   /-- beq.s ecfe <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    ecec:	   |   pea 184d6 <PutChar+0x1bc0>
    ecf2:	   |   jsr 15fc6 <KPrintF>
    ecf8:	   |   addq.l #4,sp
		return BR_ERROR;
    ecfa:	   |   moveq #1,d0
    ecfc:	/--|-- bra.s ed68 <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    ecfe:	|  \-> movea.l 8(sp),a0
    ed02:	|      movea.l 24(a0),a0
    ed06:	|      movea.l 4(a0),a0
    ed0a:	|      move.l (a0),d0
    ed0c:	|  /-- bne.s ed20 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    ed0e:	|  |   pea 18507 <PutChar+0x1bf1>
    ed14:	|  |   jsr 15fc6 <KPrintF>
    ed1a:	|  |   addq.l #4,sp
		return BR_ERROR;
    ed1c:	|  |   moveq #1,d0
    ed1e:	+--|-- bra.s ed68 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    ed20:	|  \-> moveq #28,d0
    ed22:	|      add.l 8(sp),d0
    ed26:	|      movea.l 8(sp),a0
    ed2a:	|      movea.l 24(a0),a0
    ed2e:	|      movea.l 4(a0),a0
    ed32:	|      move.l (a0),d1
    ed34:	|      move.l d0,-(sp)
    ed36:	|      move.l d1,-(sp)
    ed38:	|      jsr 13d4e <copyVariable>
    ed3e:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    ed40:	|      movea.l 8(sp),a0
    ed44:	|      movea.l 24(a0),a0
    ed48:	|      move.l 4(a0),d0
    ed4c:	|      move.l d0,-(sp)
    ed4e:	|      jsr 14218 <trimStack>
    ed54:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    ed56:	|      moveq #24,d0
    ed58:	|      add.l 8(sp),d0
    ed5c:	|      move.l d0,-(sp)
    ed5e:	|      jsr 14218 <trimStack>
    ed64:	|      addq.l #4,sp
	return BR_CONTINUE;
    ed66:	|      moveq #2,d0
}
    ed68:	\----> rts

0000ed6a <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    ed6a:	       movea.l 8(sp),a0
    ed6e:	       movea.l 24(a0),a0
    ed72:	       move.l (a0),d0
    ed74:	       moveq #6,d1
    ed76:	       cmp.l d0,d1
    ed78:	   /-- beq.s ed8c <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    ed7a:	   |   pea 184d6 <PutChar+0x1bc0>
    ed80:	   |   jsr 15fc6 <KPrintF>
    ed86:	   |   addq.l #4,sp
		return BR_ERROR;
    ed88:	   |   moveq #1,d0
    ed8a:	/--|-- bra.s ede0 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    ed8c:	|  \-> movea.l 8(sp),a0
    ed90:	|      movea.l 24(a0),a0
    ed94:	|      movea.l 4(a0),a0
    ed98:	|      move.l (a0),d0
    ed9a:	|  /-- bne.s edae <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    ed9c:	|  |   pea 18507 <PutChar+0x1bf1>
    eda2:	|  |   jsr 15fc6 <KPrintF>
    eda8:	|  |   addq.l #4,sp
		return BR_ERROR;
    edaa:	|  |   moveq #1,d0
    edac:	+--|-- bra.s ede0 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    edae:	|  \-> moveq #28,d0
    edb0:	|      add.l 8(sp),d0
    edb4:	|      movea.l 8(sp),a0
    edb8:	|      movea.l 24(a0),a0
    edbc:	|      movea.l 4(a0),a0
    edc0:	|      move.l (a0),d1
    edc2:	|      move.l d0,-(sp)
    edc4:	|      move.l d1,-(sp)
    edc6:	|      jsr 13d4e <copyVariable>
    edcc:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    edce:	|      moveq #24,d0
    edd0:	|      add.l 8(sp),d0
    edd4:	|      move.l d0,-(sp)
    edd6:	|      jsr 14218 <trimStack>
    eddc:	|      addq.l #4,sp
	return BR_CONTINUE;
    edde:	|      moveq #2,d0
}
    ede0:	\----> rts

0000ede2 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    ede2:	       movea.l 8(sp),a0
    ede6:	       movea.l 24(a0),a0
    edea:	       move.l (a0),d0
    edec:	       moveq #6,d1
    edee:	       cmp.l d0,d1
    edf0:	   /-- beq.s ee04 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    edf2:	   |   pea 184d6 <PutChar+0x1bc0>
    edf8:	   |   jsr 15fc6 <KPrintF>
    edfe:	   |   addq.l #4,sp
		return BR_ERROR;
    ee00:	   |   moveq #1,d0
    ee02:	/--|-- bra.s ee5a <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    ee04:	|  \-> movea.l 8(sp),a0
    ee08:	|      movea.l 24(a0),a0
    ee0c:	|      movea.l 4(a0),a0
    ee10:	|      move.l (a0),d0
    ee12:	|  /-- bne.s ee26 <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    ee14:	|  |   pea 18507 <PutChar+0x1bf1>
    ee1a:	|  |   jsr 15fc6 <KPrintF>
    ee20:	|  |   addq.l #4,sp
		return BR_ERROR;
    ee22:	|  |   moveq #1,d0
    ee24:	+--|-- bra.s ee5a <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    ee26:	|  \-> moveq #28,d0
    ee28:	|      add.l 8(sp),d0
    ee2c:	|      movea.l 8(sp),a0
    ee30:	|      movea.l 24(a0),a0
    ee34:	|      movea.l 4(a0),a0
    ee38:	|      move.l 4(a0),d1
    ee3c:	|      move.l d0,-(sp)
    ee3e:	|      move.l d1,-(sp)
    ee40:	|      jsr 13d4e <copyVariable>
    ee46:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    ee48:	|      moveq #24,d0
    ee4a:	|      add.l 8(sp),d0
    ee4e:	|      move.l d0,-(sp)
    ee50:	|      jsr 14218 <trimStack>
    ee56:	|      addq.l #4,sp
	return BR_CONTINUE;
    ee58:	|      moveq #2,d0
}
    ee5a:	\----> rts

0000ee5c <builtIn_random>:

builtIn(random)
{
    ee5c:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    ee5e:	       movea.l 12(sp),a0
    ee62:	       move.l 24(a0),d0
    ee66:	       move.l d0,-(sp)
    ee68:	       pea 1 <_start+0x1>
    ee6c:	       move.l sp,d0
    ee6e:	       addq.l #8,d0
    ee70:	       move.l d0,-(sp)
    ee72:	       jsr 13894 <getValueType>
    ee78:	       lea 12(sp),sp
    ee7c:	       tst.w d0
    ee7e:	   /-- bne.s ee84 <builtIn_random+0x28>
		return BR_ERROR;
    ee80:	   |   moveq #1,d0
    ee82:	/--|-- bra.s eece <builtIn_random+0x72>

	trimStack (&fun -> stack);
    ee84:	|  \-> moveq #24,d0
    ee86:	|      add.l 12(sp),d0
    ee8a:	|      move.l d0,-(sp)
    ee8c:	|      jsr 14218 <trimStack>
    ee92:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    ee94:	|      move.l (sp),d0
    ee96:	|  /-- bgt.s ee9c <builtIn_random+0x40>
    ee98:	|  |   moveq #1,d0
    ee9a:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    ee9c:	|  \-> jsr 14bc6 <rand>
    eea2:	|      move.l d0,d1
    eea4:	|      move.l (sp),d0
    eea6:	|      move.l d0,-(sp)
    eea8:	|      move.l d1,-(sp)
    eeaa:	|      jsr 168da <__umodsi3>
    eeb0:	|      addq.l #8,sp
    eeb2:	|      move.l d0,d1
    eeb4:	|      moveq #28,d0
    eeb6:	|      add.l 12(sp),d0
    eeba:	|      move.l d1,-(sp)
    eebc:	|      pea 1 <_start+0x1>
    eec0:	|      move.l d0,-(sp)
    eec2:	|      jsr 14186 <setVariable>
    eec8:	|      lea 12(sp),sp
	return BR_CONTINUE;
    eecc:	|      moveq #2,d0
}
    eece:	\----> addq.l #4,sp
    eed0:	       rts

0000eed2 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    eed2:	nop
    eed4:	rts

0000eed6 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    eed6:	moveq #2,d0
}
    eed8:	rts

0000eeda <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
	UNUSEDALL
	int red, green, blue;
	KPrintF("setPasteColour: Function not implemented on Amiga. Attention using this might cause problems!\n");
    eeda:	pea 1851a <PutChar+0x1c04>
    eee0:	jsr 15fc6 <KPrintF>
    eee6:	addq.l #4,sp
	/*if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);Todo Amigize This?*/
	return BR_CONTINUE;
    eee8:	moveq #2,d0
}
    eeea:	rts

0000eeec <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    eeec:	moveq #2,d0
}
    eeee:	rts

0000eef0 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    eef0:	moveq #2,d0
}
    eef2:	rts

0000eef4 <builtIn_setFont>:


builtIn(setFont)
{
    eef4:	       lea -16(sp),sp
    eef8:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    eefa:	       movea.l 28(sp),a0
    eefe:	       move.l 24(a0),d0
    ef02:	       move.l d0,-(sp)
    ef04:	       pea 1 <_start+0x1>
    ef08:	       lea 12(sp),a0
    ef0c:	       move.l a0,-(sp)
    ef0e:	       jsr 13894 <getValueType>
    ef14:	       lea 12(sp),sp
    ef18:	       tst.w d0
    ef1a:	   /-- bne.s ef22 <builtIn_setFont+0x2e>
    ef1c:	   |   moveq #1,d0
    ef1e:	/--|-- bra.w efd0 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    ef22:	|  \-> moveq #24,d0
    ef24:	|      add.l 28(sp),d0
    ef28:	|      move.l d0,-(sp)
    ef2a:	|      jsr 14218 <trimStack>
    ef30:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    ef32:	|      movea.l 28(sp),a0
    ef36:	|      move.l 24(a0),d0
    ef3a:	|      move.l d0,-(sp)
    ef3c:	|      jsr 13e6a <getTextFromAnyVar>
    ef42:	|      addq.l #4,sp
    ef44:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    ef48:	|  /-- bne.s ef50 <builtIn_setFont+0x5c>
    ef4a:	|  |   moveq #1,d0
    ef4c:	+--|-- bra.w efd0 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    ef50:	|  \-> moveq #24,d0
    ef52:	|      add.l 28(sp),d0
    ef56:	|      move.l d0,-(sp)
    ef58:	|      jsr 14218 <trimStack>
    ef5e:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    ef60:	|      movea.l 28(sp),a0
    ef64:	|      move.l 24(a0),d0
    ef68:	|      move.l d0,-(sp)
    ef6a:	|      pea 5 <_start+0x5>
    ef6e:	|      lea 16(sp),a0
    ef72:	|      move.l a0,-(sp)
    ef74:	|      jsr 13894 <getValueType>
    ef7a:	|      lea 12(sp),sp
    ef7e:	|      tst.w d0
    ef80:	|  /-- bne.s ef86 <builtIn_setFont+0x92>
    ef82:	|  |   moveq #1,d0
    ef84:	+--|-- bra.s efd0 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    ef86:	|  \-> moveq #24,d0
    ef88:	|      add.l 28(sp),d0
    ef8c:	|      move.l d0,-(sp)
    ef8e:	|      jsr 14218 <trimStack>
    ef94:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    ef96:	|      move.l 4(sp),d1
    ef9a:	|      move.l 8(sp),d0
    ef9e:	|      move.l d1,-(sp)
    efa0:	|      move.l 20(sp),-(sp)
    efa4:	|      move.l d0,-(sp)
    efa6:	|      jsr 14690 <loadFont>
    efac:	|      lea 12(sp),sp
    efb0:	|      tst.w d0
    efb2:	|  /-- bne.s efb8 <builtIn_setFont+0xc4>
    efb4:	|  |   moveq #1,d0
    efb6:	+--|-- bra.s efd0 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    efb8:	|  \-> move.l 16(sp),12(sp)
    efbe:	|      move.l 1b5a2 <SysBase>,d0
    efc4:	|      movea.l d0,a6
    efc6:	|      movea.l 12(sp),a1
    efca:	|      jsr -690(a6)

    return BR_CONTINUE;
    efce:	|      moveq #2,d0
}
    efd0:	\----> movea.l (sp)+,a6
    efd2:	       lea 16(sp),sp
    efd6:	       rts

0000efd8 <builtIn_inFont>:

builtIn(inFont)
{
    efd8:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    efda:	       movea.l 12(sp),a0
    efde:	       move.l 24(a0),d0
    efe2:	       move.l d0,-(sp)
    efe4:	       jsr 13e6a <getTextFromAnyVar>
    efea:	       addq.l #4,sp
    efec:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    efee:	   /-- bne.s eff4 <builtIn_inFont+0x1c>
    eff0:	   |   moveq #1,d0
    eff2:	/--|-- bra.s f02a <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    eff4:	|  \-> moveq #24,d0
    eff6:	|      add.l 12(sp),d0
    effa:	|      move.l d0,-(sp)
    effc:	|      jsr 14218 <trimStack>
    f002:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    f004:	|      move.l (sp),-(sp)
    f006:	|      jsr 14664 <isInFont>
    f00c:	|      addq.l #4,sp
    f00e:	|      movea.w d0,a0
    f010:	|      moveq #28,d0
    f012:	|      add.l 12(sp),d0
    f016:	|      move.l a0,-(sp)
    f018:	|      pea 1 <_start+0x1>
    f01c:	|      move.l d0,-(sp)
    f01e:	|      jsr 14186 <setVariable>
    f024:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f028:	|      moveq #2,d0
}
    f02a:	\----> addq.l #4,sp
    f02c:	       rts

0000f02e <builtIn_pasteString>:

builtIn(pasteString)
{
    f02e:	       lea -16(sp),sp
    f032:	       move.l a6,-(sp)
    f034:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    f036:	       movea.l 32(sp),a0
    f03a:	       move.l 24(a0),d0
    f03e:	       move.l d0,-(sp)
    f040:	       jsr 13e6a <getTextFromAnyVar>
    f046:	       addq.l #4,sp
    f048:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    f04c:	       moveq #24,d0
    f04e:	       add.l 32(sp),d0
    f052:	       move.l d0,-(sp)
    f054:	       jsr 14218 <trimStack>
    f05a:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f05c:	       movea.l 32(sp),a0
    f060:	       move.l 24(a0),d0
    f064:	       move.l d0,-(sp)
    f066:	       pea 1 <_start+0x1>
    f06a:	       lea 20(sp),a0
    f06e:	       move.l a0,-(sp)
    f070:	       jsr 13894 <getValueType>
    f076:	       lea 12(sp),sp
    f07a:	       tst.w d0
    f07c:	   /-- bne.s f084 <builtIn_pasteString+0x56>
    f07e:	   |   moveq #1,d0
    f080:	/--|-- bra.w f10c <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    f084:	|  \-> moveq #24,d0
    f086:	|      add.l 32(sp),d0
    f08a:	|      move.l d0,-(sp)
    f08c:	|      jsr 14218 <trimStack>
    f092:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f094:	|      movea.l 32(sp),a0
    f098:	|      move.l 24(a0),d0
    f09c:	|      move.l d0,-(sp)
    f09e:	|      pea 1 <_start+0x1>
    f0a2:	|      lea 16(sp),a0
    f0a6:	|      move.l a0,-(sp)
    f0a8:	|      jsr 13894 <getValueType>
    f0ae:	|      lea 12(sp),sp
    f0b2:	|      tst.w d0
    f0b4:	|  /-- bne.s f0ba <builtIn_pasteString+0x8c>
    f0b6:	|  |   moveq #1,d0
    f0b8:	+--|-- bra.s f10c <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    f0ba:	|  \-> moveq #24,d0
    f0bc:	|      add.l 32(sp),d0
    f0c0:	|      move.l d0,-(sp)
    f0c2:	|      jsr 14218 <trimStack>
    f0c8:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    f0ca:	|      move.l 8(sp),d0
    f0ce:	|      cmpi.l #65535,d0
    f0d4:	|  /-- bne.s f0f4 <builtIn_pasteString+0xc6>
    f0d6:	|  |   move.l 1b4f6 <winWidth>,d2
    f0dc:	|  |   move.l 20(sp),-(sp)
    f0e0:	|  |   jsr 14676 <stringWidth>
    f0e6:	|  |   addq.l #4,sp
    f0e8:	|  |   move.l d2,d1
    f0ea:	|  |   sub.l d0,d1
    f0ec:	|  |   move.l d1,d0
    f0ee:	|  |   lsr.l #1,d0
    f0f0:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette);
    //pasteStringToBackdrop(newText, x, y, pastePalette); //Todo: Amigize this
    FreeVec(newText); 
    f0f4:	|  \-> move.l 20(sp),16(sp)
    f0fa:	|      move.l 1b5a2 <SysBase>,d0
    f100:	|      movea.l d0,a6
    f102:	|      movea.l 16(sp),a1
    f106:	|      jsr -690(a6)
    return BR_CONTINUE;
    f10a:	|      moveq #2,d0
}
    f10c:	\----> move.l (sp)+,d2
    f10e:	       movea.l (sp)+,a6
    f110:	       lea 16(sp),sp
    f114:	       rts

0000f116 <builtIn_anim>:

builtIn(anim)
{
    f116:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    f11a:	       moveq #1,d0
    f11c:	       cmp.l 16(sp),d0
    f120:	   /-- blt.s f136 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    f122:	   |   pea 18579 <PutChar+0x1c63>
    f128:	   |   jsr 15fc6 <KPrintF>
    f12e:	   |   addq.l #4,sp
		return BR_ERROR;
    f130:	   |   moveq #1,d0
    f132:	/--|-- bra.w f1c4 <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    f136:	|  \-> moveq #24,d1
    f138:	|      add.l 20(sp),d1
    f13c:	|      move.l 16(sp),d0
    f140:	|      subq.l #1,d0
    f142:	|      move.l d1,-(sp)
    f144:	|      move.l d0,-(sp)
    f146:	|      jsr 8862 <createPersonaAnim>
    f14c:	|      addq.l #8,sp
    f14e:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f152:	|      movea.l 20(sp),a0
    f156:	|      move.l 24(a0),d0
    f15a:	|      move.l d0,-(sp)
    f15c:	|      pea 5 <_start+0x5>
    f160:	|      lea 8(sp),a0
    f164:	|      move.l a0,-(sp)
    f166:	|      jsr 13894 <getValueType>
    f16c:	|      lea 12(sp),sp
    f170:	|      tst.w d0
    f172:	|  /-- bne.s f178 <builtIn_anim+0x62>
    f174:	|  |   moveq #1,d0
    f176:	+--|-- bra.s f1c4 <builtIn_anim+0xae>
	trimStack (&fun -> stack);
    f178:	|  \-> moveq #24,d0
    f17a:	|      add.l 20(sp),d0
    f17e:	|      move.l d0,-(sp)
    f180:	|      jsr 14218 <trimStack>
    f186:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
    f188:	|      move.l (sp),d0
    f18a:	|      move.l d0,-(sp)
    f18c:	|      jsr 14d28 <loadBankForAnim>
    f192:	|      addq.l #4,sp
    f194:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
    f198:	|  /-- bne.s f19e <builtIn_anim+0x88>
    f19a:	|  |   moveq #1,d0
    f19c:	+--|-- bra.s f1c4 <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
    f19e:	|  \-> move.l 4(sp),-(sp)
    f1a2:	|      move.l 12(sp),-(sp)
    f1a6:	|      jsr a70c <setBankFile>
    f1ac:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
    f1ae:	|      moveq #28,d0
    f1b0:	|      add.l 20(sp),d0
    f1b4:	|      move.l 8(sp),-(sp)
    f1b8:	|      move.l d0,-(sp)
    f1ba:	|      jsr 14142 <newAnimationVariable>
    f1c0:	|      addq.l #8,sp
	return BR_CONTINUE;
    f1c2:	|      moveq #2,d0
}
    f1c4:	\----> lea 12(sp),sp
    f1c8:	       rts

0000f1ca <builtIn_costume>:

builtIn(costume)
{
    f1ca:	          lea -32(sp),sp
    f1ce:	          move.l a6,-(sp)
    f1d0:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    f1d2:	          moveq #8,d0
    f1d4:	          move.l d0,32(sp)
    f1d8:	          clr.l 28(sp)
    f1dc:	          move.l 1b5a2 <SysBase>,d0
    f1e2:	          movea.l d0,a6
    f1e4:	          move.l 32(sp),d0
    f1e8:	          move.l 28(sp),d1
    f1ec:	          jsr -684(a6)
    f1f0:	          move.l d0,24(sp)
    f1f4:	          move.l 24(sp),d0
    f1f8:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    f1fc:	      /-- bne.s f204 <builtIn_costume+0x3a>
    f1fe:	      |   moveq #1,d0
    f200:	/-----|-- bra.w f2ec <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    f204:	|     \-> move.l 44(sp),d0
    f208:	|         pea 3 <_start+0x3>
    f20c:	|         move.l d0,-(sp)
    f20e:	|         jsr 1687e <__divsi3>
    f214:	|         addq.l #8,sp
    f216:	|         movea.l 20(sp),a0
    f21a:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    f21e:	|         tst.l 44(sp)
    f222:	|     /-- beq.s f238 <builtIn_costume+0x6e>
    f224:	|     |   movea.l 20(sp),a0
    f228:	|     |   move.l 4(a0),d1
    f22c:	|     |   move.l d1,d0
    f22e:	|     |   add.l d0,d0
    f230:	|     |   add.l d1,d0
    f232:	|     |   cmp.l 44(sp),d0
    f236:	|  /--|-- beq.s f24c <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    f238:	|  |  \-> pea 185b3 <PutChar+0x1c9d>
    f23e:	|  |      jsr 15fc6 <KPrintF>
    f244:	|  |      addq.l #4,sp
        return BR_ERROR;
    f246:	|  |      moveq #1,d0
    f248:	+--|----- bra.w f2ec <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    f24c:	|  \----> move.l 44(sp),d0
    f250:	|         add.l d0,d0
    f252:	|         add.l d0,d0
    f254:	|         move.l d0,16(sp)
    f258:	|         clr.l 12(sp)
    f25c:	|         move.l 1b5a2 <SysBase>,d0
    f262:	|         movea.l d0,a6
    f264:	|         move.l 16(sp),d0
    f268:	|         move.l 12(sp),d1
    f26c:	|         jsr -684(a6)
    f270:	|         move.l d0,8(sp)
    f274:	|         move.l 8(sp),d0
    f278:	|         movea.l 20(sp),a0
    f27c:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    f27e:	|         movea.l 20(sp),a0
    f282:	|         move.l (a0),d0
    f284:	|     /-- bne.s f28a <builtIn_costume+0xc0>
    f286:	|     |   moveq #1,d0
    f288:	+-----|-- bra.s f2ec <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
    f28a:	|     \-> move.l 44(sp),d0
    f28e:	|         subq.l #1,d0
    f290:	|         move.l d0,36(sp)
    f294:	|     /-- bra.s f2d0 <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
    f296:	|  /--|-> movea.l 48(sp),a0
    f29a:	|  |  |   move.l 24(a0),d0
    f29e:	|  |  |   movea.l 20(sp),a0
    f2a2:	|  |  |   movea.l (a0),a0
    f2a4:	|  |  |   move.l 36(sp),d1
    f2a8:	|  |  |   add.l d1,d1
    f2aa:	|  |  |   add.l d1,d1
    f2ac:	|  |  |   lea (0,a0,d1.l),a2
    f2b0:	|  |  |   move.l d0,-(sp)
    f2b2:	|  |  |   jsr 13d6c <getAnimationFromVar>
    f2b8:	|  |  |   addq.l #4,sp
    f2ba:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
    f2bc:	|  |  |   moveq #24,d0
    f2be:	|  |  |   add.l 48(sp),d0
    f2c2:	|  |  |   move.l d0,-(sp)
    f2c4:	|  |  |   jsr 14218 <trimStack>
    f2ca:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
    f2cc:	|  |  |   subq.l #1,36(sp)
    f2d0:	|  |  \-> tst.l 36(sp)
    f2d4:	|  \----- bge.s f296 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
    f2d6:	|         moveq #28,d0
    f2d8:	|         add.l 48(sp),d0
    f2dc:	|         move.l 20(sp),-(sp)
    f2e0:	|         move.l d0,-(sp)
    f2e2:	|         jsr 14164 <newCostumeVariable>
    f2e8:	|         addq.l #8,sp
    return BR_CONTINUE;
    f2ea:	|         moveq #2,d0
}
    f2ec:	\-------> movea.l (sp)+,a2
    f2ee:	          movea.l (sp)+,a6
    f2f0:	          lea 32(sp),sp
    f2f4:	          rts

0000f2f6 <builtIn_launch>:

builtIn(launch)
{
    f2f6:	          lea -20(sp),sp
    f2fa:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    f2fc:	          movea.l 32(sp),a0
    f300:	          move.l 24(a0),d0
    f304:	          move.l d0,-(sp)
    f306:	          jsr 13e6a <getTextFromAnyVar>
    f30c:	          addq.l #4,sp
    f30e:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
    f312:	      /-- bne.s f31a <builtIn_launch+0x24>
    f314:	      |   moveq #1,d0
    f316:	/-----|-- bra.w f448 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
    f31a:	|     \-> move.l 20(sp),-(sp)
    f31e:	|         jsr 2fe <encodeFilename>
    f324:	|         addq.l #4,sp
    f326:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
    f32a:	|         moveq #24,d0
    f32c:	|         add.l 32(sp),d0
    f330:	|         move.l d0,-(sp)
    f332:	|         jsr 14218 <trimStack>
    f338:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
    f33a:	|         movea.l 20(sp),a0
    f33e:	|         move.b (a0),d0
    f340:	|         cmpi.b #104,d0
    f344:	|  /----- bne.s f3ae <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
    f346:	|  |      movea.l 20(sp),a0
    f34a:	|  |      addq.l #1,a0
    f34c:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
    f34e:	|  |      cmpi.b #116,d0
    f352:	|  +----- bne.s f3ae <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
    f354:	|  |      movea.l 20(sp),a0
    f358:	|  |      addq.l #2,a0
    f35a:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
    f35c:	|  |      cmpi.b #116,d0
    f360:	|  +----- bne.s f3ae <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
    f362:	|  |      movea.l 20(sp),a0
    f366:	|  |      addq.l #3,a0
    f368:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
    f36a:	|  |      cmpi.b #112,d0
    f36e:	|  +----- bne.s f3ae <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    f370:	|  |      movea.l 20(sp),a0
    f374:	|  |      addq.l #4,a0
    f376:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
    f378:	|  |      cmpi.b #58,d0
    f37c:	|  |  /-- beq.s f39a <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    f37e:	|  |  |   movea.l 20(sp),a0
    f382:	|  |  |   addq.l #4,a0
    f384:	|  |  |   move.b (a0),d0
    f386:	|  |  |   cmpi.b #115,d0
    f38a:	|  +--|-- bne.s f3ae <builtIn_launch+0xb8>
    f38c:	|  |  |   movea.l 20(sp),a0
    f390:	|  |  |   addq.l #5,a0
    f392:	|  |  |   move.b (a0),d0
    f394:	|  |  |   cmpi.b #58,d0
    f398:	|  +--|-- bne.s f3ae <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
    f39a:	|  |  \-> move.l 20(sp),-(sp)
    f39e:	|  |      jsr b8 <copyString>
    f3a4:	|  |      addq.l #4,sp
    f3a6:	|  |      move.l d0,1b6bc <launchMe>
    f3ac:	|  |  /-- bra.s f400 <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
    f3ae:	|  \--|-> move.l 1b50a <gamePath>,d0
    f3b4:	|     |   pea 185fe <PutChar+0x1ce8>
    f3ba:	|     |   move.l d0,-(sp)
    f3bc:	|     |   jsr 12dc0 <joinStrings>
    f3c2:	|     |   addq.l #8,sp
    f3c4:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
    f3c8:	|     |   move.l 16(sp),-(sp)
    f3cc:	|     |   move.l 16(sp),-(sp)
    f3d0:	|     |   jsr 12dc0 <joinStrings>
    f3d6:	|     |   addq.l #8,sp
    f3d8:	|     |   move.l d0,1b6bc <launchMe>
        FreeVec(newText);
    f3de:	|     |   move.l 16(sp),8(sp)
    f3e4:	|     |   move.l 1b5a2 <SysBase>,d0
    f3ea:	|     |   movea.l d0,a6
    f3ec:	|     |   movea.l 8(sp),a1
    f3f0:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
    f3f4:	|     |   move.l 1b6bc <launchMe>,d0
    f3fa:	|     +-- bne.s f400 <builtIn_launch+0x10a>
    f3fc:	|     |   moveq #1,d0
    f3fe:	+-----|-- bra.s f448 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
    f400:	|     \-> move.l 20(sp),4(sp)
    f406:	|         move.l 1b5a2 <SysBase>,d0
    f40c:	|         movea.l d0,a6
    f40e:	|         movea.l 4(sp),a1
    f412:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
    f416:	|         clr.l -(sp)
    f418:	|         jsr 3132 <setGraphicsWindow>
    f41e:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
    f420:	|         moveq #28,d0
    f422:	|         add.l 32(sp),d0
    f426:	|         pea 1 <_start+0x1>
    f42a:	|         pea 1 <_start+0x1>
    f42e:	|         move.l d0,-(sp)
    f430:	|         jsr 14186 <setVariable>
    f436:	|         lea 12(sp),sp
    launchResult = &fun->reg;
    f43a:	|         moveq #28,d0
    f43c:	|         add.l 32(sp),d0
    f440:	|         move.l d0,1b6c0 <launchResult>

    return BR_KEEP_AND_PAUSE;
    f446:	|         moveq #0,d0
}
    f448:	\-------> movea.l (sp)+,a6
    f44a:	          lea 20(sp),sp
    f44e:	          rts

0000f450 <builtIn_pause>:

builtIn(pause)
{
    f450:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f452:	       movea.l 12(sp),a0
    f456:	       move.l 24(a0),d0
    f45a:	       move.l d0,-(sp)
    f45c:	       pea 1 <_start+0x1>
    f460:	       move.l sp,d0
    f462:	       addq.l #8,d0
    f464:	       move.l d0,-(sp)
    f466:	       jsr 13894 <getValueType>
    f46c:	       lea 12(sp),sp
    f470:	       tst.w d0
    f472:	   /-- bne.s f478 <builtIn_pause+0x28>
    f474:	   |   moveq #1,d0
    f476:	/--|-- bra.s f4a6 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
    f478:	|  \-> moveq #24,d0
    f47a:	|      add.l 12(sp),d0
    f47e:	|      move.l d0,-(sp)
    f480:	|      jsr 14218 <trimStack>
    f486:	|      addq.l #4,sp
	if (theTime > 0) {
    f488:	|      move.l (sp),d0
    f48a:	|  /-- ble.s f4a4 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
    f48c:	|  |   move.l (sp),d0
    f48e:	|  |   subq.l #1,d0
    f490:	|  |   movea.l 12(sp),a0
    f494:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
    f498:	|  |   movea.l 12(sp),a0
    f49c:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
    f4a0:	|  |   moveq #0,d0
    f4a2:	+--|-- bra.s f4a6 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
    f4a4:	|  \-> moveq #2,d0
}
    f4a6:	\----> addq.l #4,sp
    f4a8:	       rts

0000f4aa <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
    f4aa:	jsr 3894 <completeTimers>
	return BR_CONTINUE;
    f4b0:	moveq #2,d0
}
    f4b2:	rts

0000f4b4 <builtIn_callEvent>:

builtIn(callEvent)
{
    f4b4:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f4b8:	       movea.l 20(sp),a0
    f4bc:	       move.l 24(a0),d0
    f4c0:	       move.l d0,-(sp)
    f4c2:	       pea 7 <_start+0x7>
    f4c6:	       lea 8(sp),a0
    f4ca:	       move.l a0,-(sp)
    f4cc:	       jsr 13894 <getValueType>
    f4d2:	       lea 12(sp),sp
    f4d6:	       tst.w d0
    f4d8:	   /-- bne.s f4e0 <builtIn_callEvent+0x2c>
    f4da:	   |   moveq #1,d0
    f4dc:	/--|-- bra.w f576 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    f4e0:	|  \-> moveq #24,d0
    f4e2:	|      add.l 20(sp),d0
    f4e6:	|      move.l d0,-(sp)
    f4e8:	|      jsr 14218 <trimStack>
    f4ee:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f4f0:	|      movea.l 20(sp),a0
    f4f4:	|      move.l 24(a0),d0
    f4f8:	|      move.l d0,-(sp)
    f4fa:	|      pea 7 <_start+0x7>
    f4fe:	|      moveq #12,d0
    f500:	|      add.l sp,d0
    f502:	|      move.l d0,-(sp)
    f504:	|      jsr 13894 <getValueType>
    f50a:	|      lea 12(sp),sp
    f50e:	|      tst.w d0
    f510:	|  /-- bne.s f516 <builtIn_callEvent+0x62>
    f512:	|  |   moveq #1,d0
    f514:	+--|-- bra.s f576 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    f516:	|  \-> moveq #24,d0
    f518:	|      add.l 20(sp),d0
    f51c:	|      move.l d0,-(sp)
    f51e:	|      jsr 14218 <trimStack>
    f524:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    f526:	|      move.l (sp),d1
    f528:	|      move.l 4(sp),d0
    f52c:	|      move.l d1,-(sp)
    f52e:	|      move.l d0,-(sp)
    f530:	|      jsr c6b4 <getCombinationFunction>
    f536:	|      addq.l #8,sp
    f538:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
    f53c:	|  /-- beq.s f55c <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    f53e:	|  |   moveq #28,d0
    f540:	|  |   add.l 20(sp),d0
    f544:	|  |   move.l 8(sp),-(sp)
    f548:	|  |   pea 2 <_start+0x2>
    f54c:	|  |   move.l d0,-(sp)
    f54e:	|  |   jsr 14186 <setVariable>
    f554:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
    f558:	|  |   moveq #4,d0
    f55a:	+--|-- bra.s f576 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
    f55c:	|  \-> moveq #28,d0
    f55e:	|      add.l 20(sp),d0
    f562:	|      clr.l -(sp)
    f564:	|      pea 1 <_start+0x1>
    f568:	|      move.l d0,-(sp)
    f56a:	|      jsr 14186 <setVariable>
    f570:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f574:	|      moveq #2,d0
}
    f576:	\----> lea 12(sp),sp
    f57a:	       rts

0000f57c <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
    f57c:	move.w #1,1b6cc <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
    f584:	moveq #2,d0
}
    f586:	rts

0000f588 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    f588:	moveq #24,d0
    f58a:	add.l 8(sp),d0
    f58e:	move.l d0,-(sp)
    f590:	jsr 14218 <trimStack>
    f596:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
    f598:	pea 18600 <PutChar+0x1cea>
    f59e:	jsr 15fc6 <KPrintF>
    f5a4:	addq.l #4,sp
	return BR_CONTINUE;
    f5a6:	moveq #2,d0
}
    f5a8:	rts

0000f5aa <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
    f5aa:	pea 18600 <PutChar+0x1cea>
    f5b0:	jsr 15fc6 <KPrintF>
    f5b6:	addq.l #4,sp
	return BR_CONTINUE;
    f5b8:	moveq #2,d0
}
    f5ba:	rts

0000f5bc <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
    f5bc:	pea 18600 <PutChar+0x1cea>
    f5c2:	jsr 15fc6 <KPrintF>
    f5c8:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
    f5ca:	moveq #2,d0
}
    f5cc:	rts

0000f5ce <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
    f5ce:	pea 18600 <PutChar+0x1cea>
    f5d4:	jsr 15fc6 <KPrintF>
    f5da:	addq.l #4,sp
	return BR_CONTINUE;
    f5dc:	moveq #2,d0
}
    f5de:	rts

0000f5e0 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    f5e0:	pea 18600 <PutChar+0x1cea>
    f5e6:	jsr 15fc6 <KPrintF>
    f5ec:	addq.l #4,sp
	return BR_CONTINUE;
    f5ee:	moveq #2,d0
}
    f5f0:	rts

0000f5f2 <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    f5f2:	pea 18600 <PutChar+0x1cea>
    f5f8:	jsr 15fc6 <KPrintF>
    f5fe:	addq.l #4,sp
	return BR_CONTINUE;
    f600:	moveq #2,d0
}
    f602:	rts

0000f604 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
    f604:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f608:	       movea.l 20(sp),a0
    f60c:	       move.l 24(a0),d0
    f610:	       move.l d0,-(sp)
    f612:	       pea 1 <_start+0x1>
    f616:	       moveq #16,d0
    f618:	       add.l sp,d0
    f61a:	       move.l d0,-(sp)
    f61c:	       jsr 13894 <getValueType>
    f622:	       lea 12(sp),sp
    f626:	       tst.w d0
    f628:	   /-- bne.s f630 <builtIn_startMusic+0x2c>
    f62a:	   |   moveq #1,d0
    f62c:	/--|-- bra.w f6d0 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    f630:	|  \-> moveq #24,d0
    f632:	|      add.l 20(sp),d0
    f636:	|      move.l d0,-(sp)
    f638:	|      jsr 14218 <trimStack>
    f63e:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f640:	|      movea.l 20(sp),a0
    f644:	|      move.l 24(a0),d0
    f648:	|      move.l d0,-(sp)
    f64a:	|      pea 1 <_start+0x1>
    f64e:	|      moveq #12,d0
    f650:	|      add.l sp,d0
    f652:	|      move.l d0,-(sp)
    f654:	|      jsr 13894 <getValueType>
    f65a:	|      lea 12(sp),sp
    f65e:	|      tst.w d0
    f660:	|  /-- bne.s f666 <builtIn_startMusic+0x62>
    f662:	|  |   moveq #1,d0
    f664:	+--|-- bra.s f6d0 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    f666:	|  \-> moveq #24,d0
    f668:	|      add.l 20(sp),d0
    f66c:	|      move.l d0,-(sp)
    f66e:	|      jsr 14218 <trimStack>
    f674:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f676:	|      movea.l 20(sp),a0
    f67a:	|      move.l 24(a0),d0
    f67e:	|      move.l d0,-(sp)
    f680:	|      pea 5 <_start+0x5>
    f684:	|      lea 8(sp),a0
    f688:	|      move.l a0,-(sp)
    f68a:	|      jsr 13894 <getValueType>
    f690:	|      lea 12(sp),sp
    f694:	|      tst.w d0
    f696:	|  /-- bne.s f69c <builtIn_startMusic+0x98>
    f698:	|  |   moveq #1,d0
    f69a:	+--|-- bra.s f6d0 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    f69c:	|  \-> moveq #24,d0
    f69e:	|      add.l 20(sp),d0
    f6a2:	|      move.l d0,-(sp)
    f6a4:	|      jsr 14218 <trimStack>
    f6aa:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
    f6ac:	|      movea.l 8(sp),a0
    f6b0:	|      move.l 4(sp),d1
    f6b4:	|      move.l (sp),d0
    f6b6:	|      move.l a0,-(sp)
    f6b8:	|      move.l d1,-(sp)
    f6ba:	|      move.l d0,-(sp)
    f6bc:	|      jsr c2c0 <playMOD>
    f6c2:	|      lea 12(sp),sp
    f6c6:	|      tst.w d0
    f6c8:	|  /-- bne.s f6ce <builtIn_startMusic+0xca>
    f6ca:	|  |   moveq #2,d0
    f6cc:	+--|-- bra.s f6d0 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
    f6ce:	|  \-> moveq #2,d0
}
    f6d0:	\----> lea 12(sp),sp
    f6d4:	       rts

0000f6d6 <builtIn_stopMusic>:

builtIn(stopMusic)
{
    f6d6:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f6d8:	       movea.l 12(sp),a0
    f6dc:	       move.l 24(a0),d0
    f6e0:	       move.l d0,-(sp)
    f6e2:	       pea 1 <_start+0x1>
    f6e6:	       move.l sp,d0
    f6e8:	       addq.l #8,d0
    f6ea:	       move.l d0,-(sp)
    f6ec:	       jsr 13894 <getValueType>
    f6f2:	       lea 12(sp),sp
    f6f6:	       tst.w d0
    f6f8:	   /-- bne.s f6fe <builtIn_stopMusic+0x28>
    f6fa:	   |   moveq #1,d0
    f6fc:	/--|-- bra.s f71c <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
    f6fe:	|  \-> moveq #24,d0
    f700:	|      add.l 12(sp),d0
    f704:	|      move.l d0,-(sp)
    f706:	|      jsr 14218 <trimStack>
    f70c:	|      addq.l #4,sp
	stopMOD (v);
    f70e:	|      move.l (sp),d0
    f710:	|      move.l d0,-(sp)
    f712:	|      jsr c35c <stopMOD>
    f718:	|      addq.l #4,sp
	return BR_CONTINUE;
    f71a:	|      moveq #2,d0
}
    f71c:	\----> addq.l #4,sp
    f71e:	       rts

0000f720 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
    f720:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f722:	       movea.l 16(sp),a0
    f726:	       move.l 24(a0),d0
    f72a:	       move.l d0,-(sp)
    f72c:	       pea 1 <_start+0x1>
    f730:	       move.l sp,d0
    f732:	       addq.l #8,d0
    f734:	       move.l d0,-(sp)
    f736:	       jsr 13894 <getValueType>
    f73c:	       lea 12(sp),sp
    f740:	       tst.w d0
    f742:	   /-- bne.s f748 <builtIn_setMusicVolume+0x28>
    f744:	   |   moveq #1,d0
    f746:	/--|-- bra.s f7a2 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    f748:	|  \-> moveq #24,d0
    f74a:	|      add.l 16(sp),d0
    f74e:	|      move.l d0,-(sp)
    f750:	|      jsr 14218 <trimStack>
    f756:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f758:	|      movea.l 16(sp),a0
    f75c:	|      move.l 24(a0),d0
    f760:	|      move.l d0,-(sp)
    f762:	|      pea 1 <_start+0x1>
    f766:	|      moveq #12,d0
    f768:	|      add.l sp,d0
    f76a:	|      move.l d0,-(sp)
    f76c:	|      jsr 13894 <getValueType>
    f772:	|      lea 12(sp),sp
    f776:	|      tst.w d0
    f778:	|  /-- bne.s f77e <builtIn_setMusicVolume+0x5e>
    f77a:	|  |   moveq #1,d0
    f77c:	+--|-- bra.s f7a2 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    f77e:	|  \-> moveq #24,d0
    f780:	|      add.l 16(sp),d0
    f784:	|      move.l d0,-(sp)
    f786:	|      jsr 14218 <trimStack>
    f78c:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
    f78e:	|      move.l (sp),d1
    f790:	|      move.l 4(sp),d0
    f794:	|      move.l d1,-(sp)
    f796:	|      move.l d0,-(sp)
    f798:	|      jsr c342 <setMusicVolume>
    f79e:	|      addq.l #8,sp
	return BR_CONTINUE;
    f7a0:	|      moveq #2,d0
}
    f7a2:	\----> addq.l #8,sp
    f7a4:	       rts

0000f7a6 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
    f7a6:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f7a8:	       movea.l 12(sp),a0
    f7ac:	       move.l 24(a0),d0
    f7b0:	       move.l d0,-(sp)
    f7b2:	       pea 1 <_start+0x1>
    f7b6:	       move.l sp,d0
    f7b8:	       addq.l #8,d0
    f7ba:	       move.l d0,-(sp)
    f7bc:	       jsr 13894 <getValueType>
    f7c2:	       lea 12(sp),sp
    f7c6:	       tst.w d0
    f7c8:	   /-- bne.s f7ce <builtIn_setDefaultMusicVolume+0x28>
    f7ca:	   |   moveq #1,d0
    f7cc:	/--|-- bra.s f7ec <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
    f7ce:	|  \-> moveq #24,d0
    f7d0:	|      add.l 12(sp),d0
    f7d4:	|      move.l d0,-(sp)
    f7d6:	|      jsr 14218 <trimStack>
    f7dc:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
    f7de:	|      move.l (sp),d0
    f7e0:	|      move.l d0,-(sp)
    f7e2:	|      jsr c326 <setDefaultMusicVolume>
    f7e8:	|      addq.l #4,sp
	return BR_CONTINUE;
    f7ea:	|      moveq #2,d0
}
    f7ec:	\----> addq.l #4,sp
    f7ee:	       rts

0000f7f0 <builtIn_playSound>:

builtIn(playSound)
{
    f7f0:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f7f2:	       movea.l 12(sp),a0
    f7f6:	       move.l 24(a0),d0
    f7fa:	       move.l d0,-(sp)
    f7fc:	       pea 5 <_start+0x5>
    f800:	       move.l sp,d0
    f802:	       addq.l #8,d0
    f804:	       move.l d0,-(sp)
    f806:	       jsr 13894 <getValueType>
    f80c:	       lea 12(sp),sp
    f810:	       tst.w d0
    f812:	   /-- bne.s f818 <builtIn_playSound+0x28>
    f814:	   |   moveq #1,d0
    f816:	/--|-- bra.s f840 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
    f818:	|  \-> moveq #24,d0
    f81a:	|      add.l 12(sp),d0
    f81e:	|      move.l d0,-(sp)
    f820:	|      jsr 14218 <trimStack>
    f826:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
    f828:	|      move.l (sp),d0
    f82a:	|      clr.l -(sp)
    f82c:	|      move.l d0,-(sp)
    f82e:	|      jsr c34a <startSound>
    f834:	|      addq.l #8,sp
    f836:	|      tst.w d0
    f838:	|  /-- bne.s f83e <builtIn_playSound+0x4e>
    f83a:	|  |   moveq #2,d0
    f83c:	+--|-- bra.s f840 <builtIn_playSound+0x50>
	return BR_CONTINUE;
    f83e:	|  \-> moveq #2,d0
}
    f840:	\----> addq.l #4,sp
    f842:	       rts

0000f844 <builtIn_loopSound>:

builtIn(loopSound)
{
    f844:	             lea -28(sp),sp
    f848:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
    f84a:	             tst.l 36(sp)
    f84e:	         /-- bgt.s f864 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
    f850:	         |   pea 18623 <PutChar+0x1d0d>
    f856:	         |   jsr 15fc6 <KPrintF>
    f85c:	         |   addq.l #4,sp
		return BR_ERROR;
    f85e:	         |   moveq #1,d0
    f860:	/--------|-- bra.w fa20 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
    f864:	|        \-> moveq #1,d0
    f866:	|            cmp.l 36(sp),d0
    f86a:	|     /----- blt.s f8c6 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    f86c:	|     |      movea.l 40(sp),a0
    f870:	|     |      move.l 24(a0),d0
    f874:	|     |      move.l d0,-(sp)
    f876:	|     |      pea 5 <_start+0x5>
    f87a:	|     |      lea 16(sp),a0
    f87e:	|     |      move.l a0,-(sp)
    f880:	|     |      jsr 13894 <getValueType>
    f886:	|     |      lea 12(sp),sp
    f88a:	|     |      tst.w d0
    f88c:	|     |  /-- bne.s f894 <builtIn_loopSound+0x50>
    f88e:	|     |  |   moveq #1,d0
    f890:	+-----|--|-- bra.w fa20 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
    f894:	|     |  \-> moveq #24,d0
    f896:	|     |      add.l 40(sp),d0
    f89a:	|     |      move.l d0,-(sp)
    f89c:	|     |      jsr 14218 <trimStack>
    f8a2:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
    f8a4:	|     |      move.l 8(sp),d0
    f8a8:	|     |      pea 1 <_start+0x1>
    f8ac:	|     |      move.l d0,-(sp)
    f8ae:	|     |      jsr c34a <startSound>
    f8b4:	|     |      addq.l #8,sp
    f8b6:	|     |      tst.w d0
    f8b8:	|     |  /-- bne.s f8c0 <builtIn_loopSound+0x7c>
    f8ba:	|     |  |   moveq #2,d0
    f8bc:	+-----|--|-- bra.w fa20 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
    f8c0:	|     |  \-> moveq #2,d0
    f8c2:	+-----|----- bra.w fa20 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
    f8c6:	|     \----> moveq #2,d1
    f8c8:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
    f8cc:	|            clr.l 28(sp)
		struct soundList *old = NULL;
    f8d0:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
    f8d4:	|            movea.l 40(sp),a0
    f8d8:	|            movea.l 24(a0),a0
    f8dc:	|            move.l (a0),d0
    f8de:	|            moveq #5,d1
    f8e0:	|            cmp.l d0,d1
    f8e2:	|  /-------- beq.w f9ba <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
    f8e6:	|  |         movea.l 40(sp),a0
    f8ea:	|  |         move.l 24(a0),d0
    f8ee:	|  |         move.l d0,-(sp)
    f8f0:	|  |         pea 1 <_start+0x1>
    f8f4:	|  |         lea 12(sp),a0
    f8f8:	|  |         move.l a0,-(sp)
    f8fa:	|  |         jsr 13894 <getValueType>
    f900:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
    f904:	|  |         moveq #24,d0
    f906:	|  |         add.l 40(sp),d0
    f90a:	|  |         move.l d0,-(sp)
    f90c:	|  |         jsr 14218 <trimStack>
    f912:	|  |         addq.l #4,sp
			numParams--;
    f914:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
    f918:	|  +-------- bra.w f9ba <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
    f91c:	|  |  /----> movea.l 40(sp),a0
    f920:	|  |  |      move.l 24(a0),d0
    f924:	|  |  |      move.l d0,-(sp)
    f926:	|  |  |      pea 5 <_start+0x5>
    f92a:	|  |  |      lea 16(sp),a0
    f92e:	|  |  |      move.l a0,-(sp)
    f930:	|  |  |      jsr 13894 <getValueType>
    f936:	|  |  |      lea 12(sp),sp
    f93a:	|  |  |      tst.w d0
    f93c:	|  |  |  /-- bne.s f952 <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
    f93e:	|  |  |  |   pea 18661 <PutChar+0x1d4b>
    f944:	|  |  |  |   jsr 15fc6 <KPrintF>
    f94a:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
    f94c:	|  |  |  |   moveq #1,d0
    f94e:	+--|--|--|-- bra.w fa20 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
    f952:	|  |  |  \-> moveq #20,d0
    f954:	|  |  |      move.l d0,20(sp)
    f958:	|  |  |      clr.l 16(sp)
    f95c:	|  |  |      move.l 1b5a2 <SysBase>,d0
    f962:	|  |  |      movea.l d0,a6
    f964:	|  |  |      move.l 20(sp),d0
    f968:	|  |  |      move.l 16(sp),d1
    f96c:	|  |  |      jsr -684(a6)
    f970:	|  |  |      move.l d0,12(sp)
    f974:	|  |  |      move.l 12(sp),d0
    f978:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
    f97c:	|  |  |  /-- bne.s f984 <builtIn_loopSound+0x140>
    f97e:	|  |  |  |   moveq #1,d0
    f980:	+--|--|--|-- bra.w fa20 <builtIn_loopSound+0x1dc>

			s->next = old;
    f984:	|  |  |  \-> movea.l 28(sp),a0
    f988:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
    f98e:	|  |  |      movea.l 28(sp),a0
    f992:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
    f996:	|  |  |      move.l 8(sp),d0
    f99a:	|  |  |      movea.l 28(sp),a0
    f99e:	|  |  |      move.l d0,(a0)
			old = s;
    f9a0:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
    f9a6:	|  |  |      moveq #24,d0
    f9a8:	|  |  |      add.l 40(sp),d0
    f9ac:	|  |  |      move.l d0,-(sp)
    f9ae:	|  |  |      jsr 14218 <trimStack>
    f9b4:	|  |  |      addq.l #4,sp
			numParams--;
    f9b6:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
    f9ba:	|  \--|----> tst.l 36(sp)
    f9be:	|     \----- bne.w f91c <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
    f9c2:	|        /-- bra.s f9ce <builtIn_loopSound+0x18a>
    f9c4:	|     /--|-> movea.l 28(sp),a0
    f9c8:	|     |  |   move.l 4(a0),28(sp)
    f9ce:	|     |  \-> movea.l 28(sp),a0
    f9d2:	|     |      move.l 4(a0),d0
    f9d6:	|     \----- bne.s f9c4 <builtIn_loopSound+0x180>
		if (doLoop > 1) {
    f9d8:	|            move.l 4(sp),d0
    f9dc:	|            moveq #1,d1
    f9de:	|            cmp.l d0,d1
    f9e0:	|     /----- bge.s f9f8 <builtIn_loopSound+0x1b4>
			s->next = old;
    f9e2:	|     |      movea.l 28(sp),a0
    f9e6:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
    f9ec:	|     |      movea.l 24(sp),a0
    f9f0:	|     |      move.l 28(sp),8(a0)
    f9f6:	|     |  /-- bra.s fa08 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
    f9f8:	|     \--|-> move.l 4(sp),d0
    f9fc:	|        +-- beq.s fa08 <builtIn_loopSound+0x1c4>
			s->next = s;
    f9fe:	|        |   movea.l 28(sp),a0
    fa02:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
    fa08:	|        \-> movea.l 24(sp),a0
    fa0c:	|            moveq #-1,d0
    fa0e:	|            move.l d0,16(a0)
		playSoundList(old);
    fa12:	|            move.l 24(sp),-(sp)
    fa16:	|            jsr c2c4 <playSoundList>
    fa1c:	|            addq.l #4,sp
		return BR_CONTINUE;
    fa1e:	|            moveq #2,d0
	}
}
    fa20:	\----------> movea.l (sp)+,a6
    fa22:	             lea 28(sp),sp
    fa26:	             rts

0000fa28 <builtIn_stopSound>:

builtIn(stopSound)
{
    fa28:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    fa2a:	       movea.l 12(sp),a0
    fa2e:	       move.l 24(a0),d0
    fa32:	       move.l d0,-(sp)
    fa34:	       pea 5 <_start+0x5>
    fa38:	       move.l sp,d0
    fa3a:	       addq.l #8,d0
    fa3c:	       move.l d0,-(sp)
    fa3e:	       jsr 13894 <getValueType>
    fa44:	       lea 12(sp),sp
    fa48:	       tst.w d0
    fa4a:	   /-- bne.s fa50 <builtIn_stopSound+0x28>
    fa4c:	   |   moveq #1,d0
    fa4e:	/--|-- bra.s fa6e <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
    fa50:	|  \-> moveq #24,d0
    fa52:	|      add.l 12(sp),d0
    fa56:	|      move.l d0,-(sp)
    fa58:	|      jsr 14218 <trimStack>
    fa5e:	|      addq.l #4,sp
	huntKillSound (v);
    fa60:	|      move.l (sp),d0
    fa62:	|      move.l d0,-(sp)
    fa64:	|      jsr c2bc <huntKillSound>
    fa6a:	|      addq.l #4,sp
	return BR_CONTINUE;
    fa6c:	|      moveq #2,d0
}
    fa6e:	\----> addq.l #4,sp
    fa70:	       rts

0000fa72 <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
    fa72:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fa74:	       movea.l 12(sp),a0
    fa78:	       move.l 24(a0),d0
    fa7c:	       move.l d0,-(sp)
    fa7e:	       pea 1 <_start+0x1>
    fa82:	       move.l sp,d0
    fa84:	       addq.l #8,d0
    fa86:	       move.l d0,-(sp)
    fa88:	       jsr 13894 <getValueType>
    fa8e:	       lea 12(sp),sp
    fa92:	       tst.w d0
    fa94:	   /-- bne.s fa9a <builtIn_setDefaultSoundVolume+0x28>
    fa96:	   |   moveq #1,d0
    fa98:	/--|-- bra.s fab8 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
    fa9a:	|  \-> moveq #24,d0
    fa9c:	|      add.l 12(sp),d0
    faa0:	|      move.l d0,-(sp)
    faa2:	|      jsr 14218 <trimStack>
    faa8:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
    faaa:	|      move.l (sp),d0
    faac:	|      move.l d0,-(sp)
    faae:	|      jsr c332 <setDefaultSoundVolume>
    fab4:	|      addq.l #4,sp
	return BR_CONTINUE;
    fab6:	|      moveq #2,d0
}
    fab8:	\----> addq.l #4,sp
    faba:	       rts

0000fabc <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
    fabc:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fabe:	       movea.l 16(sp),a0
    fac2:	       move.l 24(a0),d0
    fac6:	       move.l d0,-(sp)
    fac8:	       pea 1 <_start+0x1>
    facc:	       move.l sp,d0
    face:	       addq.l #8,d0
    fad0:	       move.l d0,-(sp)
    fad2:	       jsr 13894 <getValueType>
    fad8:	       lea 12(sp),sp
    fadc:	       tst.w d0
    fade:	   /-- bne.s fae4 <builtIn_setSoundVolume+0x28>
    fae0:	   |   moveq #1,d0
    fae2:	/--|-- bra.s fb3e <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    fae4:	|  \-> moveq #24,d0
    fae6:	|      add.l 16(sp),d0
    faea:	|      move.l d0,-(sp)
    faec:	|      jsr 14218 <trimStack>
    faf2:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    faf4:	|      movea.l 16(sp),a0
    faf8:	|      move.l 24(a0),d0
    fafc:	|      move.l d0,-(sp)
    fafe:	|      pea 5 <_start+0x5>
    fb02:	|      moveq #12,d0
    fb04:	|      add.l sp,d0
    fb06:	|      move.l d0,-(sp)
    fb08:	|      jsr 13894 <getValueType>
    fb0e:	|      lea 12(sp),sp
    fb12:	|      tst.w d0
    fb14:	|  /-- bne.s fb1a <builtIn_setSoundVolume+0x5e>
    fb16:	|  |   moveq #1,d0
    fb18:	+--|-- bra.s fb3e <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    fb1a:	|  \-> moveq #24,d0
    fb1c:	|      add.l 16(sp),d0
    fb20:	|      move.l d0,-(sp)
    fb22:	|      jsr 14218 <trimStack>
    fb28:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
    fb2a:	|      move.l (sp),d1
    fb2c:	|      move.l 4(sp),d0
    fb30:	|      move.l d1,-(sp)
    fb32:	|      move.l d0,-(sp)
    fb34:	|      jsr c346 <setSoundVolume>
    fb3a:	|      addq.l #8,sp
	return BR_CONTINUE;
    fb3c:	|      moveq #2,d0
}
    fb3e:	\----> addq.l #8,sp
    fb40:	       rts

0000fb42 <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
    fb42:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fb46:	       movea.l 20(sp),a0
    fb4a:	       move.l 24(a0),d0
    fb4e:	       move.l d0,-(sp)
    fb50:	       pea 1 <_start+0x1>
    fb54:	       moveq #12,d0
    fb56:	       add.l sp,d0
    fb58:	       move.l d0,-(sp)
    fb5a:	       jsr 13894 <getValueType>
    fb60:	       lea 12(sp),sp
    fb64:	       tst.w d0
    fb66:	   /-- bne.s fb6e <builtIn_setSoundLoopPoints+0x2c>
    fb68:	   |   moveq #1,d0
    fb6a:	/--|-- bra.w fc06 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    fb6e:	|  \-> moveq #24,d0
    fb70:	|      add.l 20(sp),d0
    fb74:	|      move.l d0,-(sp)
    fb76:	|      jsr 14218 <trimStack>
    fb7c:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fb7e:	|      movea.l 20(sp),a0
    fb82:	|      move.l 24(a0),d0
    fb86:	|      move.l d0,-(sp)
    fb88:	|      pea 1 <_start+0x1>
    fb8c:	|      lea 8(sp),a0
    fb90:	|      move.l a0,-(sp)
    fb92:	|      jsr 13894 <getValueType>
    fb98:	|      lea 12(sp),sp
    fb9c:	|      tst.w d0
    fb9e:	|  /-- bne.s fba4 <builtIn_setSoundLoopPoints+0x62>
    fba0:	|  |   moveq #1,d0
    fba2:	+--|-- bra.s fc06 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    fba4:	|  \-> moveq #24,d0
    fba6:	|      add.l 20(sp),d0
    fbaa:	|      move.l d0,-(sp)
    fbac:	|      jsr 14218 <trimStack>
    fbb2:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    fbb4:	|      movea.l 20(sp),a0
    fbb8:	|      move.l 24(a0),d0
    fbbc:	|      move.l d0,-(sp)
    fbbe:	|      pea 5 <_start+0x5>
    fbc2:	|      moveq #16,d0
    fbc4:	|      add.l sp,d0
    fbc6:	|      move.l d0,-(sp)
    fbc8:	|      jsr 13894 <getValueType>
    fbce:	|      lea 12(sp),sp
    fbd2:	|      tst.w d0
    fbd4:	|  /-- bne.s fbda <builtIn_setSoundLoopPoints+0x98>
    fbd6:	|  |   moveq #1,d0
    fbd8:	+--|-- bra.s fc06 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    fbda:	|  \-> moveq #24,d0
    fbdc:	|      add.l 20(sp),d0
    fbe0:	|      move.l d0,-(sp)
    fbe2:	|      jsr 14218 <trimStack>
    fbe8:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
    fbea:	|      movea.l 4(sp),a0
    fbee:	|      move.l (sp),d1
    fbf0:	|      move.l 8(sp),d0
    fbf4:	|      move.l a0,-(sp)
    fbf6:	|      move.l d1,-(sp)
    fbf8:	|      move.l d0,-(sp)
    fbfa:	|      jsr c33e <setSoundLoop>
    fc00:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fc04:	|      moveq #2,d0
}
    fc06:	\----> lea 12(sp),sp
    fc0a:	       rts

0000fc0c <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
    fc0c:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    fc0e:	          movea.l 12(sp),a0
    fc12:	          movea.l 24(a0),a0
    fc16:	          move.l (a0),d0
    fc18:	          moveq #5,d1
    fc1a:	          cmp.l d0,d1
    fc1c:	/-------- bne.s fc60 <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    fc1e:	|         movea.l 12(sp),a0
    fc22:	|         move.l 24(a0),d0
    fc26:	|         move.l d0,-(sp)
    fc28:	|         pea 5 <_start+0x5>
    fc2c:	|         move.l sp,d0
    fc2e:	|         addq.l #8,d0
    fc30:	|         move.l d0,-(sp)
    fc32:	|         jsr 13894 <getValueType>
    fc38:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    fc3c:	|         moveq #24,d0
    fc3e:	|         add.l 12(sp),d0
    fc42:	|         move.l d0,-(sp)
    fc44:	|         jsr 14218 <trimStack>
    fc4a:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
    fc4c:	|         move.l (sp),d0
    fc4e:	|         move.l d0,-(sp)
    fc50:	|         jsr 15770 <setFloor>
    fc56:	|         addq.l #4,sp
    fc58:	|         tst.w d0
    fc5a:	|  /----- bne.s fc76 <builtIn_setFloor+0x6a>
    fc5c:	|  |      moveq #1,d0
    fc5e:	|  |  /-- bra.s fc78 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
    fc60:	\--|--|-> moveq #24,d0
    fc62:	   |  |   add.l 12(sp),d0
    fc66:	   |  |   move.l d0,-(sp)
    fc68:	   |  |   jsr 14218 <trimStack>
    fc6e:	   |  |   addq.l #4,sp
		setFloorNull ();
    fc70:	   |  |   jsr 15eea <setFloorNull>
	}
	return BR_CONTINUE;
    fc76:	   \--|-> moveq #2,d0
}
    fc78:	      \-> addq.l #4,sp
    fc7a:	          rts

0000fc7c <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
    fc7c:	jsr 15008 <drawFloor>
	return BR_CONTINUE;
    fc82:	moveq #2,d0
}
    fc84:	rts

0000fc86 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
    fc86:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    fc88:	          movea.l 12(sp),a0
    fc8c:	          movea.l 24(a0),a0
    fc90:	          move.l (a0),d0
    fc92:	          moveq #5,d1
    fc94:	          cmp.l d0,d1
    fc96:	/-------- bne.s fcda <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    fc98:	|         movea.l 12(sp),a0
    fc9c:	|         move.l 24(a0),d0
    fca0:	|         move.l d0,-(sp)
    fca2:	|         pea 5 <_start+0x5>
    fca6:	|         move.l sp,d0
    fca8:	|         addq.l #8,d0
    fcaa:	|         move.l d0,-(sp)
    fcac:	|         jsr 13894 <getValueType>
    fcb2:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    fcb6:	|         moveq #24,d0
    fcb8:	|         add.l 12(sp),d0
    fcbc:	|         move.l d0,-(sp)
    fcbe:	|         jsr 14218 <trimStack>
    fcc4:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
    fcc6:	|         move.l (sp),d0
    fcc8:	|         move.l d0,-(sp)
    fcca:	|         jsr 77b4 <setZBuffer>
    fcd0:	|         addq.l #4,sp
    fcd2:	|         tst.w d0
    fcd4:	|  /----- bne.s fcf0 <builtIn_setZBuffer+0x6a>
    fcd6:	|  |      moveq #1,d0
    fcd8:	|  |  /-- bra.s fcf2 <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
    fcda:	\--|--|-> moveq #24,d0
    fcdc:	   |  |   add.l 12(sp),d0
    fce0:	   |  |   move.l d0,-(sp)
    fce2:	   |  |   jsr 14218 <trimStack>
    fce8:	   |  |   addq.l #4,sp
		killZBuffer ();
    fcea:	   |  |   jsr 775e <killZBuffer>
	}
	return BR_CONTINUE;
    fcf0:	   \--|-> moveq #2,d0
}
    fcf2:	      \-> addq.l #4,sp
    fcf4:	          rts

0000fcf6 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
    fcf6:	pea 18698 <PutChar+0x1d82>
    fcfc:	jsr 15fc6 <KPrintF>
    fd02:	addq.l #4,sp
	return BR_CONTINUE;
    fd04:	moveq #2,d0
}
    fd06:	rts

0000fd08 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fd08:	          movea.l 8(sp),a0
    fd0c:	          move.l 24(a0),d0
    fd10:	          move.l d0,-(sp)
    fd12:	          pea 1 <_start+0x1>
    fd16:	          pea 1b6c8 <speechMode>
    fd1c:	          jsr 13894 <getValueType>
    fd22:	          lea 12(sp),sp
    fd26:	          tst.w d0
    fd28:	      /-- bne.s fd2e <builtIn_setSpeechMode+0x26>
    fd2a:	      |   moveq #1,d0
    fd2c:	/-----|-- bra.s fd66 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
    fd2e:	|     \-> moveq #24,d0
    fd30:	|         add.l 8(sp),d0
    fd34:	|         move.l d0,-(sp)
    fd36:	|         jsr 14218 <trimStack>
    fd3c:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
    fd3e:	|         move.l 1b6c8 <speechMode>,d0
    fd44:	|     /-- bmi.s fd52 <builtIn_setSpeechMode+0x4a>
    fd46:	|     |   move.l 1b6c8 <speechMode>,d0
    fd4c:	|     |   moveq #2,d1
    fd4e:	|     |   cmp.l d0,d1
    fd50:	|  /--|-- bge.s fd64 <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
    fd52:	|  |  \-> pea 186b1 <PutChar+0x1d9b>
    fd58:	|  |      jsr 15fc6 <KPrintF>
    fd5e:	|  |      addq.l #4,sp
		return BR_ERROR;
    fd60:	|  |      moveq #1,d0
    fd62:	+--|----- bra.s fd66 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
    fd64:	|  \----> moveq #2,d0
}
    fd66:	\-------> rts

0000fd68 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
    fd68:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
    fd6a:	       jsr 6f66 <isThereAnySpeechGoingOn>
    fd70:	       move.l d0,(sp)
	if (i == -1) {
    fd72:	       moveq #-1,d0
    fd74:	       cmp.l (sp),d0
    fd76:	/----- bne.s fd92 <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
    fd78:	|      moveq #28,d0
    fd7a:	|      add.l 12(sp),d0
    fd7e:	|      clr.l -(sp)
    fd80:	|      pea 1 <_start+0x1>
    fd84:	|      move.l d0,-(sp)
    fd86:	|      jsr 14186 <setVariable>
    fd8c:	|      lea 12(sp),sp
    fd90:	|  /-- bra.s fdaa <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
    fd92:	\--|-> moveq #28,d0
    fd94:	   |   add.l 12(sp),d0
    fd98:	   |   move.l (sp),-(sp)
    fd9a:	   |   pea 7 <_start+0x7>
    fd9e:	   |   move.l d0,-(sp)
    fda0:	   |   jsr 14186 <setVariable>
    fda6:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    fdaa:	   \-> moveq #2,d0
}
    fdac:	       addq.l #4,sp
    fdae:	       rts

0000fdb0 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
    fdb0:	jsr 524e <killSpeechTimers>
	return BR_CONTINUE;
    fdb6:	moveq #2,d0
}
    fdb8:	rts

0000fdba <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
    fdba:	       move.l 1b706 <overRegion>,d0
    fdc0:	/----- beq.s fdea <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    fdc2:	|      movea.l 1b706 <overRegion>,a0
    fdc8:	|      movea.l 28(a0),a0
    fdcc:	|      move.l 4(a0),d1
    fdd0:	|      moveq #28,d0
    fdd2:	|      add.l 8(sp),d0
    fdd6:	|      move.l d1,-(sp)
    fdd8:	|      pea 7 <_start+0x7>
    fddc:	|      move.l d0,-(sp)
    fdde:	|      jsr 14186 <setVariable>
    fde4:	|      lea 12(sp),sp
    fde8:	|  /-- bra.s fe02 <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
    fdea:	\--|-> moveq #28,d0
    fdec:	   |   add.l 8(sp),d0
    fdf0:	   |   clr.l -(sp)
    fdf2:	   |   pea 1 <_start+0x1>
    fdf6:	   |   move.l d0,-(sp)
    fdf8:	   |   jsr 14186 <setVariable>
    fdfe:	   |   lea 12(sp),sp
	return BR_CONTINUE;
    fe02:	   \-> moveq #2,d0
}
    fe04:	       rts

0000fe06 <builtIn_rename>:

builtIn(rename)
{
    fe06:	       lea -16(sp),sp
    fe0a:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fe0c:	       movea.l 28(sp),a0
    fe10:	       move.l 24(a0),d0
    fe14:	       move.l d0,-(sp)
    fe16:	       jsr 13e6a <getTextFromAnyVar>
    fe1c:	       addq.l #4,sp
    fe1e:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
    fe22:	   /-- bne.s fe28 <builtIn_rename+0x22>
    fe24:	   |   moveq #1,d0
    fe26:	/--|-- bra.s fea2 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    fe28:	|  \-> moveq #24,d0
    fe2a:	|      add.l 28(sp),d0
    fe2e:	|      move.l d0,-(sp)
    fe30:	|      jsr 14218 <trimStack>
    fe36:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
    fe38:	|      movea.l 28(sp),a0
    fe3c:	|      move.l 24(a0),d0
    fe40:	|      move.l d0,-(sp)
    fe42:	|      pea 7 <_start+0x7>
    fe46:	|      lea 12(sp),a0
    fe4a:	|      move.l a0,-(sp)
    fe4c:	|      jsr 13894 <getValueType>
    fe52:	|      lea 12(sp),sp
    fe56:	|      tst.w d0
    fe58:	|  /-- bne.s fe5e <builtIn_rename+0x58>
    fe5a:	|  |   moveq #1,d0
    fe5c:	+--|-- bra.s fea2 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    fe5e:	|  \-> moveq #24,d0
    fe60:	|      add.l 28(sp),d0
    fe64:	|      move.l d0,-(sp)
    fe66:	|      jsr 14218 <trimStack>
    fe6c:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
    fe6e:	|      move.l 4(sp),d0
    fe72:	|      move.l d0,-(sp)
    fe74:	|      jsr c680 <findObjectType>
    fe7a:	|      addq.l #4,sp
    fe7c:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
    fe80:	|      movea.l 12(sp),a0
    fe84:	|      move.l (a0),8(sp)
    fe88:	|      move.l 1b5a2 <SysBase>,d0
    fe8e:	|      movea.l d0,a6
    fe90:	|      movea.l 8(sp),a1
    fe94:	|      jsr -690(a6)
	o->screenName = newText;
    fe98:	|      movea.l 12(sp),a0
    fe9c:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
    fea0:	|      moveq #2,d0
}
    fea2:	\----> movea.l (sp)+,a6
    fea4:	       lea 16(sp),sp
    fea8:	       rts

0000feaa <builtIn_getObjectX>:

builtIn (getObjectX)
{
    feaa:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    feae:	          movea.l 20(sp),a0
    feb2:	          move.l 24(a0),d0
    feb6:	          move.l d0,-(sp)
    feb8:	          pea 7 <_start+0x7>
    febc:	          lea 8(sp),a0
    fec0:	          move.l a0,-(sp)
    fec2:	          jsr 13894 <getValueType>
    fec8:	          lea 12(sp),sp
    fecc:	          tst.w d0
    fece:	      /-- bne.s fed6 <builtIn_getObjectX+0x2c>
    fed0:	      |   moveq #1,d0
    fed2:	/-----|-- bra.w ff72 <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
    fed6:	|     \-> moveq #24,d0
    fed8:	|         add.l 20(sp),d0
    fedc:	|         move.l d0,-(sp)
    fede:	|         jsr 14218 <trimStack>
    fee4:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    fee6:	|         move.l (sp),d0
    fee8:	|         move.l d0,-(sp)
    feea:	|         jsr 97a6 <findPerson>
    fef0:	|         addq.l #4,sp
    fef2:	|         move.l d0,8(sp)
	if (pers) {
    fef6:	|     /-- beq.s ff24 <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
    fef8:	|     |   movea.l 8(sp),a0
    fefc:	|     |   move.l (a0),d0
    fefe:	|     |   move.l d0,-(sp)
    ff00:	|     |   jsr 16216 <__fixsfsi>
    ff06:	|     |   addq.l #4,sp
    ff08:	|     |   move.l d0,d1
    ff0a:	|     |   moveq #28,d0
    ff0c:	|     |   add.l 20(sp),d0
    ff10:	|     |   move.l d1,-(sp)
    ff12:	|     |   pea 1 <_start+0x1>
    ff16:	|     |   move.l d0,-(sp)
    ff18:	|     |   jsr 14186 <setVariable>
    ff1e:	|     |   lea 12(sp),sp
    ff22:	|  /--|-- bra.s ff70 <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    ff24:	|  |  \-> move.l (sp),d0
    ff26:	|  |      move.l d0,-(sp)
    ff28:	|  |      jsr 147e8 <getRegionForObject>
    ff2e:	|  |      addq.l #4,sp
    ff30:	|  |      move.l d0,4(sp)
		if (la) {
    ff34:	|  |  /-- beq.s ff58 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
    ff36:	|  |  |   movea.l 4(sp),a0
    ff3a:	|  |  |   move.l 16(a0),d1
    ff3e:	|  |  |   moveq #28,d0
    ff40:	|  |  |   add.l 20(sp),d0
    ff44:	|  |  |   move.l d1,-(sp)
    ff46:	|  |  |   pea 1 <_start+0x1>
    ff4a:	|  |  |   move.l d0,-(sp)
    ff4c:	|  |  |   jsr 14186 <setVariable>
    ff52:	|  |  |   lea 12(sp),sp
    ff56:	|  +--|-- bra.s ff70 <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    ff58:	|  |  \-> moveq #28,d0
    ff5a:	|  |      add.l 20(sp),d0
    ff5e:	|  |      clr.l -(sp)
    ff60:	|  |      pea 1 <_start+0x1>
    ff64:	|  |      move.l d0,-(sp)
    ff66:	|  |      jsr 14186 <setVariable>
    ff6c:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    ff70:	|  \----> moveq #2,d0
}
    ff72:	\-------> lea 12(sp),sp
    ff76:	          rts

0000ff78 <builtIn_getObjectY>:

builtIn (getObjectY)
{
    ff78:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ff7c:	          movea.l 20(sp),a0
    ff80:	          move.l 24(a0),d0
    ff84:	          move.l d0,-(sp)
    ff86:	          pea 7 <_start+0x7>
    ff8a:	          lea 8(sp),a0
    ff8e:	          move.l a0,-(sp)
    ff90:	          jsr 13894 <getValueType>
    ff96:	          lea 12(sp),sp
    ff9a:	          tst.w d0
    ff9c:	      /-- bne.s ffa4 <builtIn_getObjectY+0x2c>
    ff9e:	      |   moveq #1,d0
    ffa0:	/-----|-- bra.w 10042 <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
    ffa4:	|     \-> moveq #24,d0
    ffa6:	|         add.l 20(sp),d0
    ffaa:	|         move.l d0,-(sp)
    ffac:	|         jsr 14218 <trimStack>
    ffb2:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    ffb4:	|         move.l (sp),d0
    ffb6:	|         move.l d0,-(sp)
    ffb8:	|         jsr 97a6 <findPerson>
    ffbe:	|         addq.l #4,sp
    ffc0:	|         move.l d0,8(sp)
	if (pers) {
    ffc4:	|     /-- beq.s fff4 <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
    ffc6:	|     |   movea.l 8(sp),a0
    ffca:	|     |   move.l 4(a0),d0
    ffce:	|     |   move.l d0,-(sp)
    ffd0:	|     |   jsr 16216 <__fixsfsi>
    ffd6:	|     |   addq.l #4,sp
    ffd8:	|     |   move.l d0,d1
    ffda:	|     |   moveq #28,d0
    ffdc:	|     |   add.l 20(sp),d0
    ffe0:	|     |   move.l d1,-(sp)
    ffe2:	|     |   pea 1 <_start+0x1>
    ffe6:	|     |   move.l d0,-(sp)
    ffe8:	|     |   jsr 14186 <setVariable>
    ffee:	|     |   lea 12(sp),sp
    fff2:	|  /--|-- bra.s 10040 <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    fff4:	|  |  \-> move.l (sp),d0
    fff6:	|  |      move.l d0,-(sp)
    fff8:	|  |      jsr 147e8 <getRegionForObject>
    fffe:	|  |      addq.l #4,sp
   10000:	|  |      move.l d0,4(sp)
		if (la) {
   10004:	|  |  /-- beq.s 10028 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   10006:	|  |  |   movea.l 4(sp),a0
   1000a:	|  |  |   move.l 20(a0),d1
   1000e:	|  |  |   moveq #28,d0
   10010:	|  |  |   add.l 20(sp),d0
   10014:	|  |  |   move.l d1,-(sp)
   10016:	|  |  |   pea 1 <_start+0x1>
   1001a:	|  |  |   move.l d0,-(sp)
   1001c:	|  |  |   jsr 14186 <setVariable>
   10022:	|  |  |   lea 12(sp),sp
   10026:	|  +--|-- bra.s 10040 <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10028:	|  |  \-> moveq #28,d0
   1002a:	|  |      add.l 20(sp),d0
   1002e:	|  |      clr.l -(sp)
   10030:	|  |      pea 1 <_start+0x1>
   10034:	|  |      move.l d0,-(sp)
   10036:	|  |      jsr 14186 <setVariable>
   1003c:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10040:	|  \----> moveq #2,d0
}
   10042:	\-------> lea 12(sp),sp
   10046:	          rts

00010048 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   10048:	       lea -32(sp),sp
   1004c:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10050:	       movea.l 56(sp),a0
   10054:	       move.l 24(a0),d0
   10058:	       move.l d0,-(sp)
   1005a:	       pea 1 <_start+0x1>
   1005e:	       lea 28(sp),a0
   10062:	       move.l a0,-(sp)
   10064:	       jsr 13894 <getValueType>
   1006a:	       lea 12(sp),sp
   1006e:	       tst.w d0
   10070:	   /-- bne.s 10078 <builtIn_addScreenRegion+0x30>
   10072:	   |   moveq #1,d0
   10074:	/--|-- bra.w 10252 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10078:	|  \-> moveq #24,d0
   1007a:	|      add.l 56(sp),d0
   1007e:	|      move.l d0,-(sp)
   10080:	|      jsr 14218 <trimStack>
   10086:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10088:	|      movea.l 56(sp),a0
   1008c:	|      move.l 24(a0),d0
   10090:	|      move.l d0,-(sp)
   10092:	|      pea 1 <_start+0x1>
   10096:	|      moveq #48,d0
   10098:	|      add.l sp,d0
   1009a:	|      move.l d0,-(sp)
   1009c:	|      jsr 13894 <getValueType>
   100a2:	|      lea 12(sp),sp
   100a6:	|      tst.w d0
   100a8:	|  /-- bne.s 100b0 <builtIn_addScreenRegion+0x68>
   100aa:	|  |   moveq #1,d0
   100ac:	+--|-- bra.w 10252 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   100b0:	|  \-> moveq #24,d0
   100b2:	|      add.l 56(sp),d0
   100b6:	|      move.l d0,-(sp)
   100b8:	|      jsr 14218 <trimStack>
   100be:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   100c0:	|      movea.l 56(sp),a0
   100c4:	|      move.l 24(a0),d0
   100c8:	|      move.l d0,-(sp)
   100ca:	|      pea 1 <_start+0x1>
   100ce:	|      moveq #52,d0
   100d0:	|      add.l sp,d0
   100d2:	|      move.l d0,-(sp)
   100d4:	|      jsr 13894 <getValueType>
   100da:	|      lea 12(sp),sp
   100de:	|      tst.w d0
   100e0:	|  /-- bne.s 100e8 <builtIn_addScreenRegion+0xa0>
   100e2:	|  |   moveq #1,d0
   100e4:	+--|-- bra.w 10252 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   100e8:	|  \-> moveq #24,d0
   100ea:	|      add.l 56(sp),d0
   100ee:	|      move.l d0,-(sp)
   100f0:	|      jsr 14218 <trimStack>
   100f6:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   100f8:	|      movea.l 56(sp),a0
   100fc:	|      move.l 24(a0),d0
   10100:	|      move.l d0,-(sp)
   10102:	|      pea 1 <_start+0x1>
   10106:	|      lea 32(sp),a0
   1010a:	|      move.l a0,-(sp)
   1010c:	|      jsr 13894 <getValueType>
   10112:	|      lea 12(sp),sp
   10116:	|      tst.w d0
   10118:	|  /-- bne.s 10120 <builtIn_addScreenRegion+0xd8>
   1011a:	|  |   moveq #1,d0
   1011c:	+--|-- bra.w 10252 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10120:	|  \-> moveq #24,d0
   10122:	|      add.l 56(sp),d0
   10126:	|      move.l d0,-(sp)
   10128:	|      jsr 14218 <trimStack>
   1012e:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10130:	|      movea.l 56(sp),a0
   10134:	|      move.l 24(a0),d0
   10138:	|      move.l d0,-(sp)
   1013a:	|      pea 1 <_start+0x1>
   1013e:	|      lea 36(sp),a0
   10142:	|      move.l a0,-(sp)
   10144:	|      jsr 13894 <getValueType>
   1014a:	|      lea 12(sp),sp
   1014e:	|      tst.w d0
   10150:	|  /-- bne.s 10158 <builtIn_addScreenRegion+0x110>
   10152:	|  |   moveq #1,d0
   10154:	+--|-- bra.w 10252 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10158:	|  \-> moveq #24,d0
   1015a:	|      add.l 56(sp),d0
   1015e:	|      move.l d0,-(sp)
   10160:	|      jsr 14218 <trimStack>
   10166:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10168:	|      movea.l 56(sp),a0
   1016c:	|      move.l 24(a0),d0
   10170:	|      move.l d0,-(sp)
   10172:	|      pea 1 <_start+0x1>
   10176:	|      lea 40(sp),a0
   1017a:	|      move.l a0,-(sp)
   1017c:	|      jsr 13894 <getValueType>
   10182:	|      lea 12(sp),sp
   10186:	|      tst.w d0
   10188:	|  /-- bne.s 10190 <builtIn_addScreenRegion+0x148>
   1018a:	|  |   moveq #1,d0
   1018c:	+--|-- bra.w 10252 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10190:	|  \-> moveq #24,d0
   10192:	|      add.l 56(sp),d0
   10196:	|      move.l d0,-(sp)
   10198:	|      jsr 14218 <trimStack>
   1019e:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   101a0:	|      movea.l 56(sp),a0
   101a4:	|      move.l 24(a0),d0
   101a8:	|      move.l d0,-(sp)
   101aa:	|      pea 1 <_start+0x1>
   101ae:	|      lea 44(sp),a0
   101b2:	|      move.l a0,-(sp)
   101b4:	|      jsr 13894 <getValueType>
   101ba:	|      lea 12(sp),sp
   101be:	|      tst.w d0
   101c0:	|  /-- bne.s 101c8 <builtIn_addScreenRegion+0x180>
   101c2:	|  |   moveq #1,d0
   101c4:	+--|-- bra.w 10252 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   101c8:	|  \-> moveq #24,d0
   101ca:	|      add.l 56(sp),d0
   101ce:	|      move.l d0,-(sp)
   101d0:	|      jsr 14218 <trimStack>
   101d6:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   101d8:	|      movea.l 56(sp),a0
   101dc:	|      move.l 24(a0),d0
   101e0:	|      move.l d0,-(sp)
   101e2:	|      pea 7 <_start+0x7>
   101e6:	|      lea 24(sp),a0
   101ea:	|      move.l a0,-(sp)
   101ec:	|      jsr 13894 <getValueType>
   101f2:	|      lea 12(sp),sp
   101f6:	|      tst.w d0
   101f8:	|  /-- bne.s 101fe <builtIn_addScreenRegion+0x1b6>
   101fa:	|  |   moveq #1,d0
   101fc:	+--|-- bra.s 10252 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   101fe:	|  \-> moveq #24,d0
   10200:	|      add.l 56(sp),d0
   10204:	|      move.l d0,-(sp)
   10206:	|      jsr 14218 <trimStack>
   1020c:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   1020e:	|      move.l 16(sp),d5
   10212:	|      move.l 20(sp),d4
   10216:	|      move.l 40(sp),d3
   1021a:	|      move.l 44(sp),d2
   1021e:	|      movea.l 24(sp),a1
   10222:	|      movea.l 28(sp),a0
   10226:	|      move.l 32(sp),d1
   1022a:	|      move.l 36(sp),d0
   1022e:	|      move.l d5,-(sp)
   10230:	|      move.l d4,-(sp)
   10232:	|      move.l d3,-(sp)
   10234:	|      move.l d2,-(sp)
   10236:	|      move.l a1,-(sp)
   10238:	|      move.l a0,-(sp)
   1023a:	|      move.l d1,-(sp)
   1023c:	|      move.l d0,-(sp)
   1023e:	|      jsr 146a2 <addScreenRegion>
   10244:	|      lea 32(sp),sp
   10248:	|      tst.w d0
   1024a:	|  /-- beq.s 10250 <builtIn_addScreenRegion+0x208>
   1024c:	|  |   moveq #2,d0
   1024e:	+--|-- bra.s 10252 <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   10250:	|  \-> moveq #1,d0

}
   10252:	\----> movem.l (sp)+,d2-d5
   10256:	       lea 32(sp),sp
   1025a:	       rts

0001025c <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   1025c:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1025e:	       movea.l 12(sp),a0
   10262:	       move.l 24(a0),d0
   10266:	       move.l d0,-(sp)
   10268:	       pea 7 <_start+0x7>
   1026c:	       move.l sp,d0
   1026e:	       addq.l #8,d0
   10270:	       move.l d0,-(sp)
   10272:	       jsr 13894 <getValueType>
   10278:	       lea 12(sp),sp
   1027c:	       tst.w d0
   1027e:	   /-- bne.s 10284 <builtIn_removeScreenRegion+0x28>
   10280:	   |   moveq #1,d0
   10282:	/--|-- bra.s 102a2 <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   10284:	|  \-> moveq #24,d0
   10286:	|      add.l 12(sp),d0
   1028a:	|      move.l d0,-(sp)
   1028c:	|      jsr 14218 <trimStack>
   10292:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   10294:	|      move.l (sp),d0
   10296:	|      move.l d0,-(sp)
   10298:	|      jsr 14990 <removeScreenRegion>
   1029e:	|      addq.l #4,sp
	return BR_CONTINUE;
   102a0:	|      moveq #2,d0
}
   102a2:	\----> addq.l #4,sp
   102a4:	       rts

000102a6 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   102a6:	jsr 14b14 <showBoxes>
	return BR_CONTINUE;
   102ac:	moveq #2,d0
}
   102ae:	rts

000102b0 <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   102b0:	jsr 14816 <killAllRegions>
	return BR_CONTINUE;
   102b6:	moveq #2,d0
}
   102b8:	rts

000102ba <builtIn_addCharacter>:

builtIn(addCharacter)
{
   102ba:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   102be:	       movea.l 24(sp),a0
   102c2:	       move.l 24(a0),d0
   102c6:	       move.l d0,-(sp)
   102c8:	       jsr 13540 <getCostumeFromVar>
   102ce:	       addq.l #4,sp
   102d0:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   102d4:	   /-- bne.s 102dc <builtIn_addCharacter+0x22>
   102d6:	   |   moveq #1,d0
   102d8:	/--|-- bra.w 103b8 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   102dc:	|  \-> moveq #24,d0
   102de:	|      add.l 24(sp),d0
   102e2:	|      move.l d0,-(sp)
   102e4:	|      jsr 14218 <trimStack>
   102ea:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   102ec:	|      movea.l 24(sp),a0
   102f0:	|      move.l 24(a0),d0
   102f4:	|      move.l d0,-(sp)
   102f6:	|      pea 1 <_start+0x1>
   102fa:	|      lea 12(sp),a0
   102fe:	|      move.l a0,-(sp)
   10300:	|      jsr 13894 <getValueType>
   10306:	|      lea 12(sp),sp
   1030a:	|      tst.w d0
   1030c:	|  /-- bne.s 10314 <builtIn_addCharacter+0x5a>
   1030e:	|  |   moveq #1,d0
   10310:	+--|-- bra.w 103b8 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   10314:	|  \-> moveq #24,d0
   10316:	|      add.l 24(sp),d0
   1031a:	|      move.l d0,-(sp)
   1031c:	|      jsr 14218 <trimStack>
   10322:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10324:	|      movea.l 24(sp),a0
   10328:	|      move.l 24(a0),d0
   1032c:	|      move.l d0,-(sp)
   1032e:	|      pea 1 <_start+0x1>
   10332:	|      moveq #16,d0
   10334:	|      add.l sp,d0
   10336:	|      move.l d0,-(sp)
   10338:	|      jsr 13894 <getValueType>
   1033e:	|      lea 12(sp),sp
   10342:	|      tst.w d0
   10344:	|  /-- bne.s 1034a <builtIn_addCharacter+0x90>
   10346:	|  |   moveq #1,d0
   10348:	+--|-- bra.s 103b8 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   1034a:	|  \-> moveq #24,d0
   1034c:	|      add.l 24(sp),d0
   10350:	|      move.l d0,-(sp)
   10352:	|      jsr 14218 <trimStack>
   10358:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1035a:	|      movea.l 24(sp),a0
   1035e:	|      move.l 24(a0),d0
   10362:	|      move.l d0,-(sp)
   10364:	|      pea 7 <_start+0x7>
   10368:	|      lea 8(sp),a0
   1036c:	|      move.l a0,-(sp)
   1036e:	|      jsr 13894 <getValueType>
   10374:	|      lea 12(sp),sp
   10378:	|      tst.w d0
   1037a:	|  /-- bne.s 10380 <builtIn_addCharacter+0xc6>
   1037c:	|  |   moveq #1,d0
   1037e:	+--|-- bra.s 103b8 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   10380:	|  \-> moveq #24,d0
   10382:	|      add.l 24(sp),d0
   10386:	|      move.l d0,-(sp)
   10388:	|      jsr 14218 <trimStack>
   1038e:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   10390:	|      movea.l (sp),a0
   10392:	|      move.l 4(sp),d1
   10396:	|      move.l 8(sp),d0
   1039a:	|      move.l 12(sp),-(sp)
   1039e:	|      move.l a0,-(sp)
   103a0:	|      move.l d1,-(sp)
   103a2:	|      move.l d0,-(sp)
   103a4:	|      jsr 83a0 <addPerson>
   103aa:	|      lea 16(sp),sp
   103ae:	|      tst.w d0
   103b0:	|  /-- beq.s 103b6 <builtIn_addCharacter+0xfc>
   103b2:	|  |   moveq #2,d0
   103b4:	+--|-- bra.s 103b8 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   103b6:	|  \-> moveq #1,d0
}
   103b8:	\----> lea 16(sp),sp
   103bc:	       rts

000103be <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   103be:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   103c0:	       movea.l 12(sp),a0
   103c4:	       move.l 24(a0),d0
   103c8:	       move.l d0,-(sp)
   103ca:	       pea 7 <_start+0x7>
   103ce:	       move.l sp,d0
   103d0:	       addq.l #8,d0
   103d2:	       move.l d0,-(sp)
   103d4:	       jsr 13894 <getValueType>
   103da:	       lea 12(sp),sp
   103de:	       tst.w d0
   103e0:	   /-- bne.s 103e6 <builtIn_hideCharacter+0x28>
   103e2:	   |   moveq #1,d0
   103e4:	/--|-- bra.s 10406 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   103e6:	|  \-> moveq #24,d0
   103e8:	|      add.l 12(sp),d0
   103ec:	|      move.l d0,-(sp)
   103ee:	|      jsr 14218 <trimStack>
   103f4:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   103f6:	|      move.l (sp),d0
   103f8:	|      move.l d0,-(sp)
   103fa:	|      clr.l -(sp)
   103fc:	|      jsr adda <setShown>
   10402:	|      addq.l #8,sp
	return BR_CONTINUE;
   10404:	|      moveq #2,d0
}
   10406:	\----> addq.l #4,sp
   10408:	       rts

0001040a <builtIn_showCharacter>:

builtIn(showCharacter)
{
   1040a:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1040c:	       movea.l 12(sp),a0
   10410:	       move.l 24(a0),d0
   10414:	       move.l d0,-(sp)
   10416:	       pea 7 <_start+0x7>
   1041a:	       move.l sp,d0
   1041c:	       addq.l #8,d0
   1041e:	       move.l d0,-(sp)
   10420:	       jsr 13894 <getValueType>
   10426:	       lea 12(sp),sp
   1042a:	       tst.w d0
   1042c:	   /-- bne.s 10432 <builtIn_showCharacter+0x28>
   1042e:	   |   moveq #1,d0
   10430:	/--|-- bra.s 10454 <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   10432:	|  \-> moveq #24,d0
   10434:	|      add.l 12(sp),d0
   10438:	|      move.l d0,-(sp)
   1043a:	|      jsr 14218 <trimStack>
   10440:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   10442:	|      move.l (sp),d0
   10444:	|      move.l d0,-(sp)
   10446:	|      pea 1 <_start+0x1>
   1044a:	|      jsr adda <setShown>
   10450:	|      addq.l #8,sp
	return BR_CONTINUE;
   10452:	|      moveq #2,d0
}
   10454:	\----> addq.l #4,sp
   10456:	       rts

00010458 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   10458:	jsr 524e <killSpeechTimers>
	killMostPeople ();
   1045e:	jsr 9c12 <killMostPeople>
	return BR_CONTINUE;
   10464:	moveq #2,d0
}
   10466:	rts

00010468 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   10468:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1046a:	       movea.l 16(sp),a0
   1046e:	       move.l 24(a0),d0
   10472:	       move.l d0,-(sp)
   10474:	       pea 1 <_start+0x1>
   10478:	       move.l sp,d0
   1047a:	       addq.l #8,d0
   1047c:	       move.l d0,-(sp)
   1047e:	       jsr 13894 <getValueType>
   10484:	       lea 12(sp),sp
   10488:	       tst.w d0
   1048a:	   /-- bne.s 10490 <builtIn_setCharacterDrawMode+0x28>
   1048c:	   |   moveq #1,d0
   1048e:	/--|-- bra.s 104ea <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   10490:	|  \-> moveq #24,d0
   10492:	|      add.l 16(sp),d0
   10496:	|      move.l d0,-(sp)
   10498:	|      jsr 14218 <trimStack>
   1049e:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   104a0:	|      movea.l 16(sp),a0
   104a4:	|      move.l 24(a0),d0
   104a8:	|      move.l d0,-(sp)
   104aa:	|      pea 7 <_start+0x7>
   104ae:	|      moveq #12,d0
   104b0:	|      add.l sp,d0
   104b2:	|      move.l d0,-(sp)
   104b4:	|      jsr 13894 <getValueType>
   104ba:	|      lea 12(sp),sp
   104be:	|      tst.w d0
   104c0:	|  /-- bne.s 104c6 <builtIn_setCharacterDrawMode+0x5e>
   104c2:	|  |   moveq #1,d0
   104c4:	+--|-- bra.s 104ea <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   104c6:	|  \-> moveq #24,d0
   104c8:	|      add.l 16(sp),d0
   104cc:	|      move.l d0,-(sp)
   104ce:	|      jsr 14218 <trimStack>
   104d4:	|      addq.l #4,sp
	setDrawMode (di, obj);
   104d6:	|      move.l 4(sp),d1
   104da:	|      move.l (sp),d0
   104dc:	|      move.l d1,-(sp)
   104de:	|      move.l d0,-(sp)
   104e0:	|      jsr a718 <setDrawMode>
   104e6:	|      addq.l #8,sp
	return BR_CONTINUE;
   104e8:	|      moveq #2,d0
}
   104ea:	\----> addq.l #8,sp
   104ec:	       rts

000104ee <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   104ee:	pea 186ef <PutChar+0x1dd9>
   104f4:	jsr 15fc6 <KPrintF>
   104fa:	addq.l #4,sp
	return BR_CONTINUE;
   104fc:	moveq #2,d0
}
   104fe:	rts

00010500 <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   10500:	pea 18722 <PutChar+0x1e0c>
   10506:	jsr 15fc6 <KPrintF>
   1050c:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   1050e:	moveq #2,d0
}
   10510:	rts

00010512 <builtIn_setScale>:

builtIn(setScale)
{
   10512:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10514:	       movea.l 16(sp),a0
   10518:	       move.l 24(a0),d0
   1051c:	       move.l d0,-(sp)
   1051e:	       pea 1 <_start+0x1>
   10522:	       move.l sp,d0
   10524:	       addq.l #8,d0
   10526:	       move.l d0,-(sp)
   10528:	       jsr 13894 <getValueType>
   1052e:	       lea 12(sp),sp
   10532:	       tst.w d0
   10534:	   /-- bne.s 1053a <builtIn_setScale+0x28>
   10536:	   |   moveq #1,d0
   10538:	/--|-- bra.s 1059c <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   1053a:	|  \-> moveq #24,d0
   1053c:	|      add.l 16(sp),d0
   10540:	|      move.l d0,-(sp)
   10542:	|      jsr 14218 <trimStack>
   10548:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1054a:	|      movea.l 16(sp),a0
   1054e:	|      move.l 24(a0),d0
   10552:	|      move.l d0,-(sp)
   10554:	|      pea 1 <_start+0x1>
   10558:	|      moveq #12,d0
   1055a:	|      add.l sp,d0
   1055c:	|      move.l d0,-(sp)
   1055e:	|      jsr 13894 <getValueType>
   10564:	|      lea 12(sp),sp
   10568:	|      tst.w d0
   1056a:	|  /-- bne.s 10570 <builtIn_setScale+0x5e>
   1056c:	|  |   moveq #1,d0
   1056e:	+--|-- bra.s 1059c <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   10570:	|  \-> moveq #24,d0
   10572:	|      add.l 16(sp),d0
   10576:	|      move.l d0,-(sp)
   10578:	|      jsr 14218 <trimStack>
   1057e:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   10580:	|      move.l (sp),d0
   10582:	|      move.l d0,d0
   10584:	|      movea.w d0,a1
   10586:	|      move.l 4(sp),d0
   1058a:	|      move.l d0,d0
   1058c:	|      movea.w d0,a0
   1058e:	|      move.l a1,-(sp)
   10590:	|      move.l a0,-(sp)
   10592:	|      jsr adb2 <setScale>
   10598:	|      addq.l #8,sp
	return BR_CONTINUE;
   1059a:	|      moveq #2,d0
}
   1059c:	\----> addq.l #8,sp
   1059e:	       rts

000105a0 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   105a0:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   105a2:	       movea.l 12(sp),a0
   105a6:	       move.l 24(a0),d0
   105aa:	       move.l d0,-(sp)
   105ac:	       pea 7 <_start+0x7>
   105b0:	       move.l sp,d0
   105b2:	       addq.l #8,d0
   105b4:	       move.l d0,-(sp)
   105b6:	       jsr 13894 <getValueType>
   105bc:	       lea 12(sp),sp
   105c0:	       tst.w d0
   105c2:	   /-- bne.s 105c8 <builtIn_stopCharacter+0x28>
   105c4:	   |   moveq #1,d0
   105c6:	/--|-- bra.s 10600 <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   105c8:	|  \-> moveq #24,d0
   105ca:	|      add.l 12(sp),d0
   105ce:	|      move.l d0,-(sp)
   105d0:	|      jsr 14218 <trimStack>
   105d6:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   105d8:	|      move.l (sp),d0
   105da:	|      move.l d0,-(sp)
   105dc:	|      jsr aee6 <stopPerson>
   105e2:	|      addq.l #4,sp
   105e4:	|      movea.w d0,a0
   105e6:	|      moveq #28,d0
   105e8:	|      add.l 12(sp),d0
   105ec:	|      move.l a0,-(sp)
   105ee:	|      pea 1 <_start+0x1>
   105f2:	|      move.l d0,-(sp)
   105f4:	|      jsr 14186 <setVariable>
   105fa:	|      lea 12(sp),sp
	return BR_CONTINUE;
   105fe:	|      moveq #2,d0
}
   10600:	\----> addq.l #4,sp
   10602:	       rts

00010604 <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   10604:	pea 1875c <PutChar+0x1e46>
   1060a:	jsr 15fc6 <KPrintF>
   10610:	addq.l #4,sp
	return BR_CONTINUE;
   10612:	moveq #2,d0
}
   10614:	rts

00010616 <builtIn_animate>:

builtIn(animate)
{
   10616:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   10618:	       movea.l 16(sp),a0
   1061c:	       move.l 24(a0),d0
   10620:	       move.l d0,-(sp)
   10622:	       jsr 13d6c <getAnimationFromVar>
   10628:	       addq.l #4,sp
   1062a:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   1062e:	   /-- bne.s 10634 <builtIn_animate+0x1e>
   10630:	   |   moveq #1,d0
   10632:	/--|-- bra.s 106b2 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   10634:	|  \-> moveq #24,d0
   10636:	|      add.l 16(sp),d0
   1063a:	|      move.l d0,-(sp)
   1063c:	|      jsr 14218 <trimStack>
   10642:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10644:	|      movea.l 16(sp),a0
   10648:	|      move.l 24(a0),d0
   1064c:	|      move.l d0,-(sp)
   1064e:	|      pea 7 <_start+0x7>
   10652:	|      move.l sp,d0
   10654:	|      addq.l #8,d0
   10656:	|      move.l d0,-(sp)
   10658:	|      jsr 13894 <getValueType>
   1065e:	|      lea 12(sp),sp
   10662:	|      tst.w d0
   10664:	|  /-- bne.s 1066a <builtIn_animate+0x54>
   10666:	|  |   moveq #1,d0
   10668:	+--|-- bra.s 106b2 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   1066a:	|  \-> moveq #24,d0
   1066c:	|      add.l 16(sp),d0
   10670:	|      move.l d0,-(sp)
   10672:	|      jsr 14218 <trimStack>
   10678:	|      addq.l #4,sp
	animatePerson (obj, pp);
   1067a:	|      move.l (sp),d0
   1067c:	|      move.l 4(sp),-(sp)
   10680:	|      move.l d0,-(sp)
   10682:	|      jsr 8616 <animatePerson>
   10688:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   1068a:	|      move.l 4(sp),-(sp)
   1068e:	|      jsr af3a <timeForAnim>
   10694:	|      addq.l #4,sp
   10696:	|      move.l d0,d1
   10698:	|      moveq #28,d0
   1069a:	|      add.l 16(sp),d0
   1069e:	|      move.l d1,-(sp)
   106a0:	|      pea 1 <_start+0x1>
   106a4:	|      move.l d0,-(sp)
   106a6:	|      jsr 14186 <setVariable>
   106ac:	|      lea 12(sp),sp
	return BR_CONTINUE;
   106b0:	|      moveq #2,d0
}
   106b2:	\----> addq.l #8,sp
   106b4:	       rts

000106b6 <builtIn_setCostume>:

builtIn(setCostume)
{
   106b6:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   106b8:	       movea.l 16(sp),a0
   106bc:	       move.l 24(a0),d0
   106c0:	       move.l d0,-(sp)
   106c2:	       jsr 13540 <getCostumeFromVar>
   106c8:	       addq.l #4,sp
   106ca:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   106ce:	   /-- bne.s 106d4 <builtIn_setCostume+0x1e>
   106d0:	   |   moveq #1,d0
   106d2:	/--|-- bra.s 1072c <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   106d4:	|  \-> moveq #24,d0
   106d6:	|      add.l 16(sp),d0
   106da:	|      move.l d0,-(sp)
   106dc:	|      jsr 14218 <trimStack>
   106e2:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   106e4:	|      movea.l 16(sp),a0
   106e8:	|      move.l 24(a0),d0
   106ec:	|      move.l d0,-(sp)
   106ee:	|      pea 7 <_start+0x7>
   106f2:	|      move.l sp,d0
   106f4:	|      addq.l #8,d0
   106f6:	|      move.l d0,-(sp)
   106f8:	|      jsr 13894 <getValueType>
   106fe:	|      lea 12(sp),sp
   10702:	|      tst.w d0
   10704:	|  /-- bne.s 1070a <builtIn_setCostume+0x54>
   10706:	|  |   moveq #1,d0
   10708:	+--|-- bra.s 1072c <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   1070a:	|  \-> moveq #24,d0
   1070c:	|      add.l 16(sp),d0
   10710:	|      move.l d0,-(sp)
   10712:	|      jsr 14218 <trimStack>
   10718:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   1071a:	|      move.l (sp),d0
   1071c:	|      move.l 4(sp),-(sp)
   10720:	|      move.l d0,-(sp)
   10722:	|      jsr 8660 <animatePersonUsingPersona>
   10728:	|      addq.l #8,sp
	return BR_CONTINUE;
   1072a:	|      moveq #2,d0
}
   1072c:	\----> addq.l #8,sp
   1072e:	       rts

00010730 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   10730:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10732:	       movea.l 16(sp),a0
   10736:	       move.l 24(a0),d0
   1073a:	       move.l d0,-(sp)
   1073c:	       pea 1 <_start+0x1>
   10740:	       move.l sp,d0
   10742:	       addq.l #8,d0
   10744:	       move.l d0,-(sp)
   10746:	       jsr 13894 <getValueType>
   1074c:	       lea 12(sp),sp
   10750:	       tst.w d0
   10752:	   /-- bne.s 10758 <builtIn_floatCharacter+0x28>
   10754:	   |   moveq #1,d0
   10756:	/--|-- bra.s 107cc <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   10758:	|  \-> moveq #24,d0
   1075a:	|      add.l 16(sp),d0
   1075e:	|      move.l d0,-(sp)
   10760:	|      jsr 14218 <trimStack>
   10766:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10768:	|      movea.l 16(sp),a0
   1076c:	|      move.l 24(a0),d0
   10770:	|      move.l d0,-(sp)
   10772:	|      pea 7 <_start+0x7>
   10776:	|      moveq #12,d0
   10778:	|      add.l sp,d0
   1077a:	|      move.l d0,-(sp)
   1077c:	|      jsr 13894 <getValueType>
   10782:	|      lea 12(sp),sp
   10786:	|      tst.w d0
   10788:	|  /-- bne.s 1078e <builtIn_floatCharacter+0x5e>
   1078a:	|  |   moveq #1,d0
   1078c:	+--|-- bra.s 107cc <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   1078e:	|  \-> moveq #24,d0
   10790:	|      add.l 16(sp),d0
   10794:	|      move.l d0,-(sp)
   10796:	|      jsr 14218 <trimStack>
   1079c:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   1079e:	|      move.l 4(sp),d1
   107a2:	|      move.l (sp),d0
   107a4:	|      move.l d1,-(sp)
   107a6:	|      move.l d0,-(sp)
   107a8:	|      jsr 97d4 <floatCharacter>
   107ae:	|      addq.l #8,sp
   107b0:	|      movea.w d0,a0
   107b2:	|      moveq #28,d0
   107b4:	|      add.l 16(sp),d0
   107b8:	|      move.l a0,-(sp)
   107ba:	|      pea 1 <_start+0x1>
   107be:	|      move.l d0,-(sp)
   107c0:	|      jsr 14186 <setVariable>
   107c6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   107ca:	|      moveq #2,d0
}
   107cc:	\----> addq.l #8,sp
   107ce:	       rts

000107d0 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   107d0:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   107d2:	       movea.l 16(sp),a0
   107d6:	       move.l 24(a0),d0
   107da:	       move.l d0,-(sp)
   107dc:	       pea 1 <_start+0x1>
   107e0:	       move.l sp,d0
   107e2:	       addq.l #8,d0
   107e4:	       move.l d0,-(sp)
   107e6:	       jsr 13894 <getValueType>
   107ec:	       lea 12(sp),sp
   107f0:	       tst.w d0
   107f2:	   /-- bne.s 107f8 <builtIn_setCharacterWalkSpeed+0x28>
   107f4:	   |   moveq #1,d0
   107f6:	/--|-- bra.s 1086c <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   107f8:	|  \-> moveq #24,d0
   107fa:	|      add.l 16(sp),d0
   107fe:	|      move.l d0,-(sp)
   10800:	|      jsr 14218 <trimStack>
   10806:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10808:	|      movea.l 16(sp),a0
   1080c:	|      move.l 24(a0),d0
   10810:	|      move.l d0,-(sp)
   10812:	|      pea 7 <_start+0x7>
   10816:	|      moveq #12,d0
   10818:	|      add.l sp,d0
   1081a:	|      move.l d0,-(sp)
   1081c:	|      jsr 13894 <getValueType>
   10822:	|      lea 12(sp),sp
   10826:	|      tst.w d0
   10828:	|  /-- bne.s 1082e <builtIn_setCharacterWalkSpeed+0x5e>
   1082a:	|  |   moveq #1,d0
   1082c:	+--|-- bra.s 1086c <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   1082e:	|  \-> moveq #24,d0
   10830:	|      add.l 16(sp),d0
   10834:	|      move.l d0,-(sp)
   10836:	|      jsr 14218 <trimStack>
   1083c:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   1083e:	|      move.l 4(sp),d1
   10842:	|      move.l (sp),d0
   10844:	|      move.l d1,-(sp)
   10846:	|      move.l d0,-(sp)
   10848:	|      jsr ad4e <setCharacterWalkSpeed>
   1084e:	|      addq.l #8,sp
   10850:	|      movea.w d0,a0
   10852:	|      moveq #28,d0
   10854:	|      add.l 16(sp),d0
   10858:	|      move.l a0,-(sp)
   1085a:	|      pea 1 <_start+0x1>
   1085e:	|      move.l d0,-(sp)
   10860:	|      jsr 14186 <setVariable>
   10866:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1086a:	|      moveq #2,d0
}
   1086c:	\----> addq.l #8,sp
   1086e:	       rts

00010870 <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   10870:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10872:	       movea.l 16(sp),a0
   10876:	       move.l 24(a0),d0
   1087a:	       move.l d0,-(sp)
   1087c:	       pea 1 <_start+0x1>
   10880:	       move.l sp,d0
   10882:	       addq.l #8,d0
   10884:	       move.l d0,-(sp)
   10886:	       jsr 13894 <getValueType>
   1088c:	       lea 12(sp),sp
   10890:	       tst.w d0
   10892:	   /-- bne.s 10898 <builtIn_turnCharacter+0x28>
   10894:	   |   moveq #1,d0
   10896:	/--|-- bra.s 1090c <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   10898:	|  \-> moveq #24,d0
   1089a:	|      add.l 16(sp),d0
   1089e:	|      move.l d0,-(sp)
   108a0:	|      jsr 14218 <trimStack>
   108a6:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   108a8:	|      movea.l 16(sp),a0
   108ac:	|      move.l 24(a0),d0
   108b0:	|      move.l d0,-(sp)
   108b2:	|      pea 7 <_start+0x7>
   108b6:	|      moveq #12,d0
   108b8:	|      add.l sp,d0
   108ba:	|      move.l d0,-(sp)
   108bc:	|      jsr 13894 <getValueType>
   108c2:	|      lea 12(sp),sp
   108c6:	|      tst.w d0
   108c8:	|  /-- bne.s 108ce <builtIn_turnCharacter+0x5e>
   108ca:	|  |   moveq #1,d0
   108cc:	+--|-- bra.s 1090c <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   108ce:	|  \-> moveq #24,d0
   108d0:	|      add.l 16(sp),d0
   108d4:	|      move.l d0,-(sp)
   108d6:	|      jsr 14218 <trimStack>
   108dc:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   108de:	|      move.l (sp),d1
   108e0:	|      move.l 4(sp),d0
   108e4:	|      move.l d1,-(sp)
   108e6:	|      move.l d0,-(sp)
   108e8:	|      jsr aff2 <turnPersonToFace>
   108ee:	|      addq.l #8,sp
   108f0:	|      movea.w d0,a0
   108f2:	|      moveq #28,d0
   108f4:	|      add.l 16(sp),d0
   108f8:	|      move.l a0,-(sp)
   108fa:	|      pea 1 <_start+0x1>
   108fe:	|      move.l d0,-(sp)
   10900:	|      jsr 14186 <setVariable>
   10906:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1090a:	|      moveq #2,d0
}
   1090c:	\----> addq.l #8,sp
   1090e:	       rts

00010910 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   10910:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10912:	       movea.l 16(sp),a0
   10916:	       move.l 24(a0),d0
   1091a:	       move.l d0,-(sp)
   1091c:	       pea 1 <_start+0x1>
   10920:	       move.l sp,d0
   10922:	       addq.l #8,d0
   10924:	       move.l d0,-(sp)
   10926:	       jsr 13894 <getValueType>
   1092c:	       lea 12(sp),sp
   10930:	       tst.w d0
   10932:	   /-- bne.s 10938 <builtIn_setCharacterExtra+0x28>
   10934:	   |   moveq #1,d0
   10936:	/--|-- bra.s 109ac <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   10938:	|  \-> moveq #24,d0
   1093a:	|      add.l 16(sp),d0
   1093e:	|      move.l d0,-(sp)
   10940:	|      jsr 14218 <trimStack>
   10946:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10948:	|      movea.l 16(sp),a0
   1094c:	|      move.l 24(a0),d0
   10950:	|      move.l d0,-(sp)
   10952:	|      pea 7 <_start+0x7>
   10956:	|      moveq #12,d0
   10958:	|      add.l sp,d0
   1095a:	|      move.l d0,-(sp)
   1095c:	|      jsr 13894 <getValueType>
   10962:	|      lea 12(sp),sp
   10966:	|      tst.w d0
   10968:	|  /-- bne.s 1096e <builtIn_setCharacterExtra+0x5e>
   1096a:	|  |   moveq #1,d0
   1096c:	+--|-- bra.s 109ac <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   1096e:	|  \-> moveq #24,d0
   10970:	|      add.l 16(sp),d0
   10974:	|      move.l d0,-(sp)
   10976:	|      jsr 14218 <trimStack>
   1097c:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   1097e:	|      move.l (sp),d1
   10980:	|      move.l 4(sp),d0
   10984:	|      move.l d1,-(sp)
   10986:	|      move.l d0,-(sp)
   10988:	|      jsr ad7c <setPersonExtra>
   1098e:	|      addq.l #8,sp
   10990:	|      movea.w d0,a0
   10992:	|      moveq #28,d0
   10994:	|      add.l 16(sp),d0
   10998:	|      move.l a0,-(sp)
   1099a:	|      pea 1 <_start+0x1>
   1099e:	|      move.l d0,-(sp)
   109a0:	|      jsr 14186 <setVariable>
   109a6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   109aa:	|      moveq #2,d0
}
   109ac:	\----> addq.l #8,sp
   109ae:	       rts

000109b0 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   109b0:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   109b2:	       movea.l 12(sp),a0
   109b6:	       move.l 24(a0),d0
   109ba:	       move.l d0,-(sp)
   109bc:	       pea 7 <_start+0x7>
   109c0:	       move.l sp,d0
   109c2:	       addq.l #8,d0
   109c4:	       move.l d0,-(sp)
   109c6:	       jsr 13894 <getValueType>
   109cc:	       lea 12(sp),sp
   109d0:	       tst.w d0
   109d2:	   /-- bne.s 109d8 <builtIn_removeCharacter+0x28>
   109d4:	   |   moveq #1,d0
   109d6:	/--|-- bra.s 109f6 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   109d8:	|  \-> moveq #24,d0
   109da:	|      add.l 12(sp),d0
   109de:	|      move.l d0,-(sp)
   109e0:	|      jsr 14218 <trimStack>
   109e6:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   109e8:	|      move.l (sp),d0
   109ea:	|      move.l d0,-(sp)
   109ec:	|      jsr 9f7c <removeOneCharacter>
   109f2:	|      addq.l #4,sp
	return BR_CONTINUE;
   109f4:	|      moveq #2,d0
}
   109f6:	\----> addq.l #4,sp
   109f8:	       rts

000109fa <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   109fa:	                lea -28(sp),sp
   109fe:	                move.l d2,-(sp)
   10a00:	                move.l 44(sp),d1
   10a04:	                move.l 48(sp),d0
   10a08:	                move.w d1,d1
   10a0a:	                move.w d1,6(sp)
   10a0e:	                move.w d0,d0
   10a10:	                move.w d0,4(sp)
	switch (numParams) {
   10a14:	                moveq #2,d0
   10a16:	                cmp.l 36(sp),d0
   10a1a:	      /-------- beq.w 10b5c <moveChr+0x162>
   10a1e:	      |         moveq #3,d0
   10a20:	      |         cmp.l 36(sp),d0
   10a24:	/-----|-------- bne.w 10c90 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a28:	|     |         movea.l 40(sp),a0
   10a2c:	|     |         move.l 24(a0),d0
   10a30:	|     |         move.l d0,-(sp)
   10a32:	|     |         pea 1 <_start+0x1>
   10a36:	|     |         lea 20(sp),a0
   10a3a:	|     |         move.l a0,-(sp)
   10a3c:	|     |         jsr 13894 <getValueType>
   10a42:	|     |         lea 12(sp),sp
   10a46:	|     |         tst.w d0
   10a48:	|     |     /-- bne.s 10a50 <moveChr+0x56>
   10a4a:	|     |     |   moveq #1,d0
   10a4c:	|  /--|-----|-- bra.w 10ca0 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   10a50:	|  |  |     \-> moveq #24,d0
   10a52:	|  |  |         add.l 40(sp),d0
   10a56:	|  |  |         move.l d0,-(sp)
   10a58:	|  |  |         jsr 14218 <trimStack>
   10a5e:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a60:	|  |  |         movea.l 40(sp),a0
   10a64:	|  |  |         move.l 24(a0),d0
   10a68:	|  |  |         move.l d0,-(sp)
   10a6a:	|  |  |         pea 1 <_start+0x1>
   10a6e:	|  |  |         lea 24(sp),a0
   10a72:	|  |  |         move.l a0,-(sp)
   10a74:	|  |  |         jsr 13894 <getValueType>
   10a7a:	|  |  |         lea 12(sp),sp
   10a7e:	|  |  |         tst.w d0
   10a80:	|  |  |     /-- bne.s 10a88 <moveChr+0x8e>
   10a82:	|  |  |     |   moveq #1,d0
   10a84:	|  +--|-----|-- bra.w 10ca0 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   10a88:	|  |  |     \-> moveq #24,d0
   10a8a:	|  |  |         add.l 40(sp),d0
   10a8e:	|  |  |         move.l d0,-(sp)
   10a90:	|  |  |         jsr 14218 <trimStack>
   10a96:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10a98:	|  |  |         movea.l 40(sp),a0
   10a9c:	|  |  |         move.l 24(a0),d0
   10aa0:	|  |  |         move.l d0,-(sp)
   10aa2:	|  |  |         pea 7 <_start+0x7>
   10aa6:	|  |  |         lea 16(sp),a0
   10aaa:	|  |  |         move.l a0,-(sp)
   10aac:	|  |  |         jsr 13894 <getValueType>
   10ab2:	|  |  |         lea 12(sp),sp
   10ab6:	|  |  |         tst.w d0
   10ab8:	|  |  |     /-- bne.s 10ac0 <moveChr+0xc6>
   10aba:	|  |  |     |   moveq #1,d0
   10abc:	|  +--|-----|-- bra.w 10ca0 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   10ac0:	|  |  |     \-> moveq #24,d0
   10ac2:	|  |  |         add.l 40(sp),d0
   10ac6:	|  |  |         move.l d0,-(sp)
   10ac8:	|  |  |         jsr 14218 <trimStack>
   10ace:	|  |  |         addq.l #4,sp

			if (force) {
   10ad0:	|  |  |         tst.w 6(sp)
   10ad4:	|  |  |     /-- beq.s 10b04 <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   10ad6:	|  |  |     |   movea.l 8(sp),a0
   10ada:	|  |  |     |   move.l 12(sp),d1
   10ade:	|  |  |     |   move.l 16(sp),d0
   10ae2:	|  |  |     |   pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffb61b6>
   10ae6:	|  |  |     |   move.l 44(sp),-(sp)
   10aea:	|  |  |     |   move.l a0,-(sp)
   10aec:	|  |  |     |   move.l d1,-(sp)
   10aee:	|  |  |     |   move.l d0,-(sp)
   10af0:	|  |  |     |   jsr 97f8 <forceWalkingPerson>
   10af6:	|  |  |     |   lea 20(sp),sp
   10afa:	|  |  |     |   tst.w d0
   10afc:	|  |  |  /--|-- beq.s 10b56 <moveChr+0x15c>
   10afe:	|  |  |  |  |   moveq #3,d0
   10b00:	|  +--|--|--|-- bra.w 10ca0 <moveChr+0x2a6>
			} else if (immediate) {
   10b04:	|  |  |  |  \-> tst.w 4(sp)
   10b08:	|  |  |  |  /-- beq.s 10b28 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   10b0a:	|  |  |  |  |   movea.l 8(sp),a0
   10b0e:	|  |  |  |  |   move.l 12(sp),d1
   10b12:	|  |  |  |  |   move.l 16(sp),d0
   10b16:	|  |  |  |  |   move.l a0,-(sp)
   10b18:	|  |  |  |  |   move.l d1,-(sp)
   10b1a:	|  |  |  |  |   move.l d0,-(sp)
   10b1c:	|  |  |  |  |   jsr 9b00 <jumpPerson>
   10b22:	|  |  |  |  |   lea 12(sp),sp
   10b26:	|  |  |  +--|-- bra.s 10b56 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   10b28:	|  |  |  |  \-> movea.l 8(sp),a0
   10b2c:	|  |  |  |      move.l 12(sp),d1
   10b30:	|  |  |  |      move.l 16(sp),d0
   10b34:	|  |  |  |      pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffb61b6>
   10b38:	|  |  |  |      move.l 44(sp),-(sp)
   10b3c:	|  |  |  |      move.l a0,-(sp)
   10b3e:	|  |  |  |      move.l d1,-(sp)
   10b40:	|  |  |  |      move.l d0,-(sp)
   10b42:	|  |  |  |      jsr 9cd0 <makeWalkingPerson>
   10b48:	|  |  |  |      lea 20(sp),sp
   10b4c:	|  |  |  |      tst.w d0
   10b4e:	|  |  |  +----- beq.s 10b56 <moveChr+0x15c>
   10b50:	|  |  |  |      moveq #3,d0
   10b52:	|  +--|--|----- bra.w 10ca0 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   10b56:	|  |  |  \----> moveq #2,d0
   10b58:	|  +--|-------- bra.w 10ca0 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10b5c:	|  |  \-------> movea.l 40(sp),a0
   10b60:	|  |            move.l 24(a0),d0
   10b64:	|  |            move.l d0,-(sp)
   10b66:	|  |            pea 7 <_start+0x7>
   10b6a:	|  |            moveq #32,d0
   10b6c:	|  |            add.l sp,d0
   10b6e:	|  |            move.l d0,-(sp)
   10b70:	|  |            jsr 13894 <getValueType>
   10b76:	|  |            lea 12(sp),sp
   10b7a:	|  |            tst.w d0
   10b7c:	|  |        /-- bne.s 10b84 <moveChr+0x18a>
   10b7e:	|  |        |   moveq #1,d0
   10b80:	|  +--------|-- bra.w 10ca0 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   10b84:	|  |        \-> moveq #24,d0
   10b86:	|  |            add.l 40(sp),d0
   10b8a:	|  |            move.l d0,-(sp)
   10b8c:	|  |            jsr 14218 <trimStack>
   10b92:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10b94:	|  |            movea.l 40(sp),a0
   10b98:	|  |            move.l 24(a0),d0
   10b9c:	|  |            move.l d0,-(sp)
   10b9e:	|  |            pea 7 <_start+0x7>
   10ba2:	|  |            lea 28(sp),a0
   10ba6:	|  |            move.l a0,-(sp)
   10ba8:	|  |            jsr 13894 <getValueType>
   10bae:	|  |            lea 12(sp),sp
   10bb2:	|  |            tst.w d0
   10bb4:	|  |        /-- bne.s 10bbc <moveChr+0x1c2>
   10bb6:	|  |        |   moveq #1,d0
   10bb8:	|  +--------|-- bra.w 10ca0 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   10bbc:	|  |        \-> moveq #24,d0
   10bbe:	|  |            add.l 40(sp),d0
   10bc2:	|  |            move.l d0,-(sp)
   10bc4:	|  |            jsr 14218 <trimStack>
   10bca:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   10bcc:	|  |            move.l 24(sp),d0
   10bd0:	|  |            move.l d0,-(sp)
   10bd2:	|  |            jsr 147e8 <getRegionForObject>
   10bd8:	|  |            addq.l #4,sp
   10bda:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   10bde:	|  |        /-- bne.s 10be6 <moveChr+0x1ec>
   10be0:	|  |        |   moveq #2,d0
   10be2:	|  +--------|-- bra.w 10ca0 <moveChr+0x2a6>

			if (force)
   10be6:	|  |        \-> tst.w 6(sp)
   10bea:	|  |        /-- beq.s 10c26 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   10bec:	|  |        |   movea.l 28(sp),a0
   10bf0:	|  |        |   move.l 24(a0),d2
   10bf4:	|  |        |   movea.l 20(sp),a1
   10bf8:	|  |        |   movea.l 28(sp),a0
   10bfc:	|  |        |   move.l 20(a0),d1
   10c00:	|  |        |   movea.l 28(sp),a0
   10c04:	|  |        |   move.l 16(a0),d0
   10c08:	|  |        |   move.l d2,-(sp)
   10c0a:	|  |        |   move.l 44(sp),-(sp)
   10c0e:	|  |        |   move.l a1,-(sp)
   10c10:	|  |        |   move.l d1,-(sp)
   10c12:	|  |        |   move.l d0,-(sp)
   10c14:	|  |        |   jsr 97f8 <forceWalkingPerson>
   10c1a:	|  |        |   lea 20(sp),sp
   10c1e:	|  |        |   tst.w d0
   10c20:	|  |     /--|-- beq.s 10c8c <moveChr+0x292>
   10c22:	|  |     |  |   moveq #3,d0
   10c24:	|  +-----|--|-- bra.s 10ca0 <moveChr+0x2a6>
			}
			else if (immediate)
   10c26:	|  |     |  \-> tst.w 4(sp)
   10c2a:	|  |     |  /-- beq.s 10c52 <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   10c2c:	|  |     |  |   movea.l 20(sp),a1
   10c30:	|  |     |  |   movea.l 28(sp),a0
   10c34:	|  |     |  |   move.l 20(a0),d1
   10c38:	|  |     |  |   movea.l 28(sp),a0
   10c3c:	|  |     |  |   move.l 16(a0),d0
   10c40:	|  |     |  |   move.l a1,-(sp)
   10c42:	|  |     |  |   move.l d1,-(sp)
   10c44:	|  |     |  |   move.l d0,-(sp)
   10c46:	|  |     |  |   jsr 9b00 <jumpPerson>
   10c4c:	|  |     |  |   lea 12(sp),sp
   10c50:	|  |     +--|-- bra.s 10c8c <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   10c52:	|  |     |  \-> movea.l 28(sp),a0
   10c56:	|  |     |      move.l 24(a0),d2
   10c5a:	|  |     |      movea.l 20(sp),a1
   10c5e:	|  |     |      movea.l 28(sp),a0
   10c62:	|  |     |      move.l 20(a0),d1
   10c66:	|  |     |      movea.l 28(sp),a0
   10c6a:	|  |     |      move.l 16(a0),d0
   10c6e:	|  |     |      move.l d2,-(sp)
   10c70:	|  |     |      move.l 44(sp),-(sp)
   10c74:	|  |     |      move.l a1,-(sp)
   10c76:	|  |     |      move.l d1,-(sp)
   10c78:	|  |     |      move.l d0,-(sp)
   10c7a:	|  |     |      jsr 9cd0 <makeWalkingPerson>
   10c80:	|  |     |      lea 20(sp),sp
   10c84:	|  |     |      tst.w d0
   10c86:	|  |     +----- beq.s 10c8c <moveChr+0x292>
   10c88:	|  |     |      moveq #3,d0
   10c8a:	|  +-----|----- bra.s 10ca0 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   10c8c:	|  |     \----> moveq #2,d0
   10c8e:	|  +----------- bra.s 10ca0 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   10c90:	\--|----------> pea 1877a <PutChar+0x1e64>
   10c96:	   |            jsr 15fc6 <KPrintF>
   10c9c:	   |            addq.l #4,sp
			return BR_ERROR;
   10c9e:	   |            moveq #1,d0
	}
}
   10ca0:	   \----------> move.l (sp)+,d2
   10ca2:	                lea 28(sp),sp
   10ca6:	                rts

00010ca8 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   10ca8:	clr.l -(sp)
   10caa:	clr.l -(sp)
   10cac:	move.l 16(sp),-(sp)
   10cb0:	move.l 16(sp),-(sp)
   10cb4:	jsr 109fa <moveChr>
   10cba:	lea 16(sp),sp
}
   10cbe:	rts

00010cc0 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   10cc0:	clr.l -(sp)
   10cc2:	pea 1 <_start+0x1>
   10cc6:	move.l 16(sp),-(sp)
   10cca:	move.l 16(sp),-(sp)
   10cce:	jsr 109fa <moveChr>
   10cd4:	lea 16(sp),sp
}
   10cd8:	rts

00010cda <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   10cda:	pea 1 <_start+0x1>
   10cde:	clr.l -(sp)
   10ce0:	move.l 16(sp),-(sp)
   10ce4:	move.l 16(sp),-(sp)
   10ce8:	jsr 109fa <moveChr>
   10cee:	lea 16(sp),sp
}
   10cf2:	rts

00010cf4 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   10cf4:	jsr 693a <clearStatusBar>
	return BR_CONTINUE;
   10cfa:	moveq #2,d0
}
   10cfc:	rts

00010cfe <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   10cfe:	jsr 69e2 <killLastStatus>
	return BR_CONTINUE;
   10d04:	moveq #2,d0
}
   10d06:	rts

00010d08 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   10d08:	jsr 68d0 <addStatusBar>
	return BR_CONTINUE;
   10d0e:	moveq #2,d0
}
   10d10:	rts

00010d12 <builtIn_statusText>:

builtIn(statusText)
{
   10d12:	       subq.l #8,sp
   10d14:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10d16:	       movea.l 20(sp),a0
   10d1a:	       move.l 24(a0),d0
   10d1e:	       move.l d0,-(sp)
   10d20:	       jsr 13e6a <getTextFromAnyVar>
   10d26:	       addq.l #4,sp
   10d28:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   10d2c:	   /-- bne.s 10d32 <builtIn_statusText+0x20>
   10d2e:	   |   moveq #1,d0
   10d30:	/--|-- bra.s 10d66 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   10d32:	|  \-> moveq #24,d0
   10d34:	|      add.l 20(sp),d0
   10d38:	|      move.l d0,-(sp)
   10d3a:	|      jsr 14218 <trimStack>
   10d40:	|      addq.l #4,sp
	setStatusBar(newText);
   10d42:	|      move.l 8(sp),-(sp)
   10d46:	|      jsr 6c62 <setStatusBar>
   10d4c:	|      addq.l #4,sp
	FreeVec(newText);
   10d4e:	|      move.l 8(sp),4(sp)
   10d54:	|      move.l 1b5a2 <SysBase>,d0
   10d5a:	|      movea.l d0,a6
   10d5c:	|      movea.l 4(sp),a1
   10d60:	|      jsr -690(a6)
	return BR_CONTINUE;
   10d64:	|      moveq #2,d0
}
   10d66:	\----> movea.l (sp)+,a6
   10d68:	       addq.l #8,sp
   10d6a:	       rts

00010d6c <builtIn_lightStatus>:

builtIn(lightStatus)
{
   10d6c:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10d6e:	       movea.l 12(sp),a0
   10d72:	       move.l 24(a0),d0
   10d76:	       move.l d0,-(sp)
   10d78:	       pea 1 <_start+0x1>
   10d7c:	       move.l sp,d0
   10d7e:	       addq.l #8,d0
   10d80:	       move.l d0,-(sp)
   10d82:	       jsr 13894 <getValueType>
   10d88:	       lea 12(sp),sp
   10d8c:	       tst.w d0
   10d8e:	   /-- bne.s 10d94 <builtIn_lightStatus+0x28>
   10d90:	   |   moveq #1,d0
   10d92:	/--|-- bra.s 10db2 <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   10d94:	|  \-> moveq #24,d0
   10d96:	|      add.l 12(sp),d0
   10d9a:	|      move.l d0,-(sp)
   10d9c:	|      jsr 14218 <trimStack>
   10da2:	|      addq.l #4,sp
	setLitStatus (val);
   10da4:	|      move.l (sp),d0
   10da6:	|      move.l d0,-(sp)
   10da8:	|      jsr 6c52 <setLitStatus>
   10dae:	|      addq.l #4,sp
	return BR_CONTINUE;
   10db0:	|      moveq #2,d0
}
   10db2:	\----> addq.l #4,sp
   10db4:	       rts

00010db6 <builtIn_positionStatus>:

builtIn(positionStatus)
{
   10db6:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10db8:	       movea.l 16(sp),a0
   10dbc:	       move.l 24(a0),d0
   10dc0:	       move.l d0,-(sp)
   10dc2:	       pea 1 <_start+0x1>
   10dc6:	       move.l sp,d0
   10dc8:	       addq.l #8,d0
   10dca:	       move.l d0,-(sp)
   10dcc:	       jsr 13894 <getValueType>
   10dd2:	       lea 12(sp),sp
   10dd6:	       tst.w d0
   10dd8:	   /-- bne.s 10dde <builtIn_positionStatus+0x28>
   10dda:	   |   moveq #1,d0
   10ddc:	/--|-- bra.s 10e38 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   10dde:	|  \-> moveq #24,d0
   10de0:	|      add.l 16(sp),d0
   10de4:	|      move.l d0,-(sp)
   10de6:	|      jsr 14218 <trimStack>
   10dec:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10dee:	|      movea.l 16(sp),a0
   10df2:	|      move.l 24(a0),d0
   10df6:	|      move.l d0,-(sp)
   10df8:	|      pea 1 <_start+0x1>
   10dfc:	|      moveq #12,d0
   10dfe:	|      add.l sp,d0
   10e00:	|      move.l d0,-(sp)
   10e02:	|      jsr 13894 <getValueType>
   10e08:	|      lea 12(sp),sp
   10e0c:	|      tst.w d0
   10e0e:	|  /-- bne.s 10e14 <builtIn_positionStatus+0x5e>
   10e10:	|  |   moveq #1,d0
   10e12:	+--|-- bra.s 10e38 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   10e14:	|  \-> moveq #24,d0
   10e16:	|      add.l 16(sp),d0
   10e1a:	|      move.l d0,-(sp)
   10e1c:	|      jsr 14218 <trimStack>
   10e22:	|      addq.l #4,sp
	positionStatus (x, y);
   10e24:	|      move.l (sp),d1
   10e26:	|      move.l 4(sp),d0
   10e2a:	|      move.l d1,-(sp)
   10e2c:	|      move.l d0,-(sp)
   10e2e:	|      jsr 6a44 <positionStatus>
   10e34:	|      addq.l #8,sp
	return BR_CONTINUE;
   10e36:	|      moveq #2,d0
}
   10e38:	\----> addq.l #8,sp
   10e3a:	       rts

00010e3c <builtIn_alignStatus>:

builtIn(alignStatus)
{
   10e3c:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10e3e:	       movea.l 12(sp),a0
   10e42:	       move.l 24(a0),d0
   10e46:	       move.l d0,-(sp)
   10e48:	       pea 1 <_start+0x1>
   10e4c:	       move.l sp,d0
   10e4e:	       addq.l #8,d0
   10e50:	       move.l d0,-(sp)
   10e52:	       jsr 13894 <getValueType>
   10e58:	       lea 12(sp),sp
   10e5c:	       tst.w d0
   10e5e:	   /-- bne.s 10e64 <builtIn_alignStatus+0x28>
   10e60:	   |   moveq #1,d0
   10e62:	/--|-- bra.s 10e84 <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   10e64:	|  \-> moveq #24,d0
   10e66:	|      add.l 12(sp),d0
   10e6a:	|      move.l d0,-(sp)
   10e6c:	|      jsr 14218 <trimStack>
   10e72:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   10e74:	|      move.l (sp),d0
   10e76:	|      movea.l 1af2a <nowStatus>,a0
   10e7c:	|      move.l d0,d0
   10e7e:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   10e82:	|      moveq #2,d0
}
   10e84:	\----> addq.l #4,sp
   10e86:	       rts

00010e88 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   10e88:	             tst.l 4(sp)
   10e8c:	      /----- beq.s 10e98 <getFuncNumForCallback+0x10>
   10e8e:	      |      moveq #1,d0
   10e90:	      |      cmp.l 4(sp),d0
   10e94:	      |  /-- beq.s 10e9e <getFuncNumForCallback+0x16>
   10e96:	   /--|--|-- bra.s 10ed4 <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   10e98:	   |  \--|-> clr.l 12(sp)
			break;
   10e9c:	/--|-----|-- bra.s 10ee6 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   10e9e:	|  |     \-> movea.l 8(sp),a0
   10ea2:	|  |         move.l 24(a0),d0
   10ea6:	|  |         move.l d0,-(sp)
   10ea8:	|  |         pea 2 <_start+0x2>
   10eac:	|  |         move.l 20(sp),-(sp)
   10eb0:	|  |         jsr 13894 <getValueType>
   10eb6:	|  |         lea 12(sp),sp
   10eba:	|  |         tst.w d0
   10ebc:	|  |     /-- bne.s 10ec2 <getFuncNumForCallback+0x3a>
   10ebe:	|  |     |   clr.w d0
   10ec0:	|  |  /--|-- bra.s 10ee8 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   10ec2:	|  |  |  \-> moveq #24,d0
   10ec4:	|  |  |      add.l 8(sp),d0
   10ec8:	|  |  |      move.l d0,-(sp)
   10eca:	|  |  |      jsr 14218 <trimStack>
   10ed0:	|  |  |      addq.l #4,sp
			break;
   10ed2:	+--|--|----- bra.s 10ee6 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   10ed4:	|  \--|----> pea 187b0 <PutChar+0x1e9a>
   10eda:	|     |      jsr 15fc6 <KPrintF>
   10ee0:	|     |      addq.l #4,sp
			return FALSE;
   10ee2:	|     |      clr.w d0
   10ee4:	|     +----- bra.s 10ee8 <getFuncNumForCallback+0x60>
	}
	return TRUE;
   10ee6:	\-----|----> moveq #1,d0
}
   10ee8:	      \----> rts

00010eea <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   10eea:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10eec:	       move.l sp,d0
   10eee:	       move.l d0,-(sp)
   10ef0:	       move.l 16(sp),-(sp)
   10ef4:	       move.l 16(sp),-(sp)
   10ef8:	       jsr 10e88 <getFuncNumForCallback>
   10efe:	       lea 12(sp),sp
   10f02:	       tst.w d0
   10f04:	/----- beq.s 10f14 <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   10f06:	|      movea.l 1af1c <currentEvents>,a0
   10f0c:	|      move.l (sp),d0
   10f0e:	|      move.l d0,(a0)
		return BR_CONTINUE;
   10f10:	|      moveq #2,d0
   10f12:	|  /-- bra.s 10f16 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   10f14:	\--|-> moveq #1,d0
}
   10f16:	   \-> addq.l #4,sp
   10f18:	       rts

00010f1a <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   10f1a:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10f1c:	       move.l sp,d0
   10f1e:	       move.l d0,-(sp)
   10f20:	       move.l 16(sp),-(sp)
   10f24:	       move.l 16(sp),-(sp)
   10f28:	       jsr 10e88 <getFuncNumForCallback>
   10f2e:	       lea 12(sp),sp
   10f32:	       tst.w d0
   10f34:	/----- beq.s 10f46 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   10f36:	|      movea.l 1af1c <currentEvents>,a0
   10f3c:	|      move.l (sp),d0
   10f3e:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   10f42:	|      moveq #2,d0
   10f44:	|  /-- bra.s 10f48 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   10f46:	\--|-> moveq #1,d0
}
   10f48:	   \-> addq.l #4,sp
   10f4a:	       rts

00010f4c <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   10f4c:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10f4e:	       move.l sp,d0
   10f50:	       move.l d0,-(sp)
   10f52:	       move.l 16(sp),-(sp)
   10f56:	       move.l 16(sp),-(sp)
   10f5a:	       jsr 10e88 <getFuncNumForCallback>
   10f60:	       lea 12(sp),sp
   10f64:	       tst.w d0
   10f66:	/----- beq.s 10f78 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   10f68:	|      movea.l 1af1c <currentEvents>,a0
   10f6e:	|      move.l (sp),d0
   10f70:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   10f74:	|      moveq #2,d0
   10f76:	|  /-- bra.s 10f7a <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   10f78:	\--|-> moveq #1,d0
}
   10f7a:	   \-> addq.l #4,sp
   10f7c:	       rts

00010f7e <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   10f7e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10f80:	       move.l sp,d0
   10f82:	       move.l d0,-(sp)
   10f84:	       move.l 16(sp),-(sp)
   10f88:	       move.l 16(sp),-(sp)
   10f8c:	       jsr 10e88 <getFuncNumForCallback>
   10f92:	       lea 12(sp),sp
   10f96:	       tst.w d0
   10f98:	/----- beq.s 10faa <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   10f9a:	|      movea.l 1af1c <currentEvents>,a0
   10fa0:	|      move.l (sp),d0
   10fa2:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   10fa6:	|      moveq #2,d0
   10fa8:	|  /-- bra.s 10fac <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   10faa:	\--|-> moveq #1,d0
}
   10fac:	   \-> addq.l #4,sp
   10fae:	       rts

00010fb0 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   10fb0:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10fb2:	       move.l sp,d0
   10fb4:	       move.l d0,-(sp)
   10fb6:	       move.l 16(sp),-(sp)
   10fba:	       move.l 16(sp),-(sp)
   10fbe:	       jsr 10e88 <getFuncNumForCallback>
   10fc4:	       lea 12(sp),sp
   10fc8:	       tst.w d0
   10fca:	/----- beq.s 10fdc <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
   10fcc:	|      movea.l 1af1c <currentEvents>,a0
   10fd2:	|      move.l (sp),d0
   10fd4:	|      move.l d0,20(a0)
		return BR_CONTINUE;
   10fd8:	|      moveq #2,d0
   10fda:	|  /-- bra.s 10fde <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
   10fdc:	\--|-> moveq #1,d0
}
   10fde:	   \-> addq.l #4,sp
   10fe0:	       rts

00010fe2 <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   10fe2:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10fe4:	       move.l sp,d0
   10fe6:	       move.l d0,-(sp)
   10fe8:	       move.l 16(sp),-(sp)
   10fec:	       move.l 16(sp),-(sp)
   10ff0:	       jsr 10e88 <getFuncNumForCallback>
   10ff6:	       lea 12(sp),sp
   10ffa:	       tst.w d0
   10ffc:	/----- beq.s 1100e <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   10ffe:	|      movea.l 1af1c <currentEvents>,a0
   11004:	|      move.l (sp),d0
   11006:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   1100a:	|      moveq #2,d0
   1100c:	|  /-- bra.s 11010 <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   1100e:	\--|-> moveq #1,d0
}
   11010:	   \-> addq.l #4,sp
   11012:	       rts

00011014 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   11014:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11016:	       move.l sp,d0
   11018:	       move.l d0,-(sp)
   1101a:	       move.l 16(sp),-(sp)
   1101e:	       move.l 16(sp),-(sp)
   11022:	       jsr 10e88 <getFuncNumForCallback>
   11028:	       lea 12(sp),sp
   1102c:	       tst.w d0
   1102e:	/----- beq.s 11040 <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   11030:	|      movea.l 1af1c <currentEvents>,a0
   11036:	|      move.l (sp),d0
   11038:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   1103c:	|      moveq #2,d0
   1103e:	|  /-- bra.s 11042 <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   11040:	\--|-> moveq #1,d0
}
   11042:	   \-> addq.l #4,sp
   11044:	       rts

00011046 <builtIn_spawnSub>:

builtIn (spawnSub)
{
   11046:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11048:	          move.l sp,d0
   1104a:	          move.l d0,-(sp)
   1104c:	          move.l 16(sp),-(sp)
   11050:	          move.l 16(sp),-(sp)
   11054:	          jsr 10e88 <getFuncNumForCallback>
   1105a:	          lea 12(sp),sp
   1105e:	          tst.w d0
   11060:	/-------- beq.s 1108c <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   11062:	|         move.l 1b572 <noStack>,d1
   11068:	|         move.l (sp),d0
   1106a:	|         pea 1 <_start+0x1>
   1106e:	|         move.l d1,-(sp)
   11070:	|         clr.l -(sp)
   11072:	|         clr.l -(sp)
   11074:	|         move.l d0,-(sp)
   11076:	|         jsr 5b22 <startNewFunctionNum>
   1107c:	|         lea 20(sp),sp
   11080:	|         tst.l d0
   11082:	|     /-- bne.s 11088 <builtIn_spawnSub+0x42>
   11084:	|     |   moveq #1,d0
   11086:	|  /--|-- bra.s 1108e <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   11088:	|  |  \-> moveq #2,d0
   1108a:	|  +----- bra.s 1108e <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   1108c:	\--|----> moveq #1,d0
}
   1108e:	   \----> addq.l #4,sp
   11090:	          rts

00011092 <builtIn_cancelSub>:

builtIn (cancelSub)
{
   11092:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11094:	          move.l sp,d0
   11096:	          addq.l #4,d0
   11098:	          move.l d0,-(sp)
   1109a:	          move.l 20(sp),-(sp)
   1109e:	          move.l 20(sp),-(sp)
   110a2:	          jsr 10e88 <getFuncNumForCallback>
   110a8:	          lea 12(sp),sp
   110ac:	          tst.w d0
   110ae:	/-------- beq.s 110e4 <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   110b0:	|         move.l 4(sp),d1
   110b4:	|         move.l sp,d0
   110b6:	|         addq.l #2,d0
   110b8:	|         move.l d0,-(sp)
   110ba:	|         move.l 20(sp),-(sp)
   110be:	|         move.l d1,-(sp)
   110c0:	|         jsr 3848 <cancelAFunction>
   110c6:	|         lea 12(sp),sp
		if (killedMyself) {
   110ca:	|         move.w 2(sp),d0
   110ce:	|  /----- beq.s 110e0 <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   110d0:	|  |      move.l 16(sp),-(sp)
   110d4:	|  |      jsr 3766 <abortFunction>
   110da:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   110dc:	|  |      moveq #5,d0
   110de:	|  |  /-- bra.s 110e6 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   110e0:	|  \--|-> moveq #2,d0
   110e2:	|     +-- bra.s 110e6 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   110e4:	\-----|-> moveq #1,d0
}
   110e6:	      \-> addq.l #8,sp
   110e8:	          rts

000110ea <builtIn_stringWidth>:

builtIn(stringWidth)
{
   110ea:	       subq.l #8,sp
   110ec:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   110ee:	       movea.l 20(sp),a0
   110f2:	       move.l 24(a0),d0
   110f6:	       move.l d0,-(sp)
   110f8:	       jsr 13e6a <getTextFromAnyVar>
   110fe:	       addq.l #4,sp
   11100:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   11104:	   /-- bne.s 1110a <builtIn_stringWidth+0x20>
   11106:	   |   moveq #1,d0
   11108:	/--|-- bra.s 11158 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   1110a:	|  \-> moveq #24,d0
   1110c:	|      add.l 20(sp),d0
   11110:	|      move.l d0,-(sp)
   11112:	|      jsr 14218 <trimStack>
   11118:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   1111a:	|      move.l 8(sp),-(sp)
   1111e:	|      jsr 14676 <stringWidth>
   11124:	|      addq.l #4,sp
   11126:	|      move.l d0,d1
   11128:	|      moveq #28,d0
   1112a:	|      add.l 20(sp),d0
   1112e:	|      move.l d1,-(sp)
   11130:	|      pea 1 <_start+0x1>
   11134:	|      move.l d0,-(sp)
   11136:	|      jsr 14186 <setVariable>
   1113c:	|      lea 12(sp),sp
	FreeVec(theText);
   11140:	|      move.l 8(sp),4(sp)
   11146:	|      move.l 1b5a2 <SysBase>,d0
   1114c:	|      movea.l d0,a6
   1114e:	|      movea.l 4(sp),a1
   11152:	|      jsr -690(a6)
	return BR_CONTINUE;
   11156:	|      moveq #2,d0
}
   11158:	\----> movea.l (sp)+,a6
   1115a:	       addq.l #8,sp
   1115c:	       rts

0001115e <builtIn_hardScroll>:

builtIn(hardScroll)
{
   1115e:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11160:	       movea.l 12(sp),a0
   11164:	       move.l 24(a0),d0
   11168:	       move.l d0,-(sp)
   1116a:	       pea 1 <_start+0x1>
   1116e:	       move.l sp,d0
   11170:	       addq.l #8,d0
   11172:	       move.l d0,-(sp)
   11174:	       jsr 13894 <getValueType>
   1117a:	       lea 12(sp),sp
   1117e:	       tst.w d0
   11180:	   /-- bne.s 11186 <builtIn_hardScroll+0x28>
   11182:	   |   moveq #1,d0
   11184:	/--|-- bra.s 111a4 <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   11186:	|  \-> moveq #24,d0
   11188:	|      add.l 12(sp),d0
   1118c:	|      move.l d0,-(sp)
   1118e:	|      jsr 14218 <trimStack>
   11194:	|      addq.l #4,sp
	hardScroll (v);
   11196:	|      move.l (sp),d0
   11198:	|      move.l d0,-(sp)
   1119a:	|      jsr c3d2 <hardScroll>
   111a0:	|      addq.l #4,sp
	return BR_CONTINUE;
   111a2:	|      moveq #2,d0
}
   111a4:	\----> addq.l #4,sp
   111a6:	       rts

000111a8 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   111a8:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   111aa:	       movea.l 12(sp),a0
   111ae:	       move.l 24(a0),d0
   111b2:	       move.l d0,-(sp)
   111b4:	       pea 7 <_start+0x7>
   111b8:	       move.l sp,d0
   111ba:	       addq.l #8,d0
   111bc:	       move.l d0,-(sp)
   111be:	       jsr 13894 <getValueType>
   111c4:	       lea 12(sp),sp
   111c8:	       tst.w d0
   111ca:	   /-- bne.s 111d0 <builtIn_isScreenRegion+0x28>
   111cc:	   |   moveq #1,d0
   111ce:	/--|-- bra.s 11210 <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   111d0:	|  \-> moveq #24,d0
   111d2:	|      add.l 12(sp),d0
   111d6:	|      move.l d0,-(sp)
   111d8:	|      jsr 14218 <trimStack>
   111de:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   111e0:	|      move.l (sp),d0
   111e2:	|      move.l d0,-(sp)
   111e4:	|      jsr 147e8 <getRegionForObject>
   111ea:	|      addq.l #4,sp
   111ec:	|      tst.l d0
   111ee:	|      sne d0
   111f0:	|      neg.b d0
   111f2:	|      moveq #0,d1
   111f4:	|      move.b d0,d1
   111f6:	|      moveq #28,d0
   111f8:	|      add.l 12(sp),d0
   111fc:	|      move.l d1,-(sp)
   111fe:	|      pea 1 <_start+0x1>
   11202:	|      move.l d0,-(sp)
   11204:	|      jsr 14186 <setVariable>
   1120a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1120e:	|      moveq #2,d0
}
   11210:	\----> addq.l #4,sp
   11212:	       rts

00011214 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   11214:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11216:	       movea.l 12(sp),a0
   1121a:	       move.l 24(a0),d0
   1121e:	       move.l d0,-(sp)
   11220:	       pea 1 <_start+0x1>
   11224:	       move.l sp,d0
   11226:	       addq.l #8,d0
   11228:	       move.l d0,-(sp)
   1122a:	       jsr 13894 <getValueType>
   11230:	       lea 12(sp),sp
   11234:	       tst.w d0
   11236:	   /-- bne.s 1123c <builtIn_setSpeechSpeed+0x28>
   11238:	   |   moveq #1,d0
   1123a:	/--|-- bra.s 1128a <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   1123c:	|  \-> moveq #24,d0
   1123e:	|      add.l 12(sp),d0
   11242:	|      move.l d0,-(sp)
   11244:	|      jsr 14218 <trimStack>
   1124a:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   1124c:	|      move.l (sp),d0
   1124e:	|      move.l d0,-(sp)
   11250:	|      jsr 1627e <__floatsisf>
   11256:	|      addq.l #4,sp
   11258:	|      move.l #1008981770,-(sp)
   1125e:	|      move.l d0,-(sp)
   11260:	|      jsr 16330 <__mulsf3>
   11266:	|      addq.l #8,sp
   11268:	|      move.l d0,1af2e <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   1126e:	|      moveq #28,d0
   11270:	|      add.l 12(sp),d0
   11274:	|      pea 1 <_start+0x1>
   11278:	|      pea 1 <_start+0x1>
   1127c:	|      move.l d0,-(sp)
   1127e:	|      jsr 14186 <setVariable>
   11284:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11288:	|      moveq #2,d0
}
   1128a:	\----> addq.l #4,sp
   1128c:	       rts

0001128e <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   1128e:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11290:	       movea.l 12(sp),a0
   11294:	       move.l 24(a0),d0
   11298:	       move.l d0,-(sp)
   1129a:	       pea 1 <_start+0x1>
   1129e:	       move.l sp,d0
   112a0:	       addq.l #8,d0
   112a2:	       move.l d0,-(sp)
   112a4:	       jsr 13894 <getValueType>
   112aa:	       lea 12(sp),sp
   112ae:	       tst.w d0
   112b0:	   /-- bne.s 112b6 <builtIn_setFontSpacing+0x28>
   112b2:	   |   moveq #1,d0
   112b4:	/--|-- bra.s 112ec <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   112b6:	|  \-> move.l (sp),d0
   112b8:	|      move.l d0,d0
   112ba:	|      move.w d0,1b4a8 <fontSpace>
	trimStack (&fun -> stack);
   112c0:	|      moveq #24,d0
   112c2:	|      add.l 12(sp),d0
   112c6:	|      move.l d0,-(sp)
   112c8:	|      jsr 14218 <trimStack>
   112ce:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   112d0:	|      moveq #28,d0
   112d2:	|      add.l 12(sp),d0
   112d6:	|      pea 1 <_start+0x1>
   112da:	|      pea 1 <_start+0x1>
   112de:	|      move.l d0,-(sp)
   112e0:	|      jsr 14186 <setVariable>
   112e6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   112ea:	|      moveq #2,d0
}
   112ec:	\----> addq.l #4,sp
   112ee:	       rts

000112f0 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   112f0:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   112f2:	          movea.l 12(sp),a0
   112f6:	          move.l 24(a0),d0
   112fa:	          move.l d0,-(sp)
   112fc:	          pea 1 <_start+0x1>
   11300:	          move.l sp,d0
   11302:	          addq.l #8,d0
   11304:	          move.l d0,-(sp)
   11306:	          jsr 13894 <getValueType>
   1130c:	          lea 12(sp),sp
   11310:	          tst.w d0
   11312:	      /-- bne.s 11318 <builtIn_transitionLevel+0x28>
   11314:	      |   moveq #1,d0
   11316:	/-----|-- bra.s 1136c <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   11318:	|     \-> moveq #24,d0
   1131a:	|         add.l 12(sp),d0
   1131e:	|         move.l d0,-(sp)
   11320:	|         jsr 14218 <trimStack>
   11326:	|         addq.l #4,sp

	if (number < 0)
   11328:	|         move.l (sp),d0
   1132a:	|     /-- bpl.s 11334 <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   1132c:	|     |   clr.b 1af1a <brightnessLevel>
   11332:	|  /--|-- bra.s 11350 <builtIn_transitionLevel+0x60>
	else if (number > 255)
   11334:	|  |  \-> move.l (sp),d0
   11336:	|  |      cmpi.l #255,d0
   1133c:	|  |  /-- ble.s 11346 <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   1133e:	|  |  |   st 1af1a <brightnessLevel>
   11344:	|  +--|-- bra.s 11350 <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   11346:	|  |  \-> move.l (sp),d0
   11348:	|  |      move.l d0,d0
   1134a:	|  |      move.b d0,1af1a <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   11350:	|  \----> moveq #28,d0
   11352:	|         add.l 12(sp),d0
   11356:	|         pea 1 <_start+0x1>
   1135a:	|         pea 1 <_start+0x1>
   1135e:	|         move.l d0,-(sp)
   11360:	|         jsr 14186 <setVariable>
   11366:	|         lea 12(sp),sp
	return BR_CONTINUE;
   1136a:	|         moveq #2,d0
}
   1136c:	\-------> addq.l #4,sp
   1136e:	          rts

00011370 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   11370:	movea.l 8(sp),a0
   11374:	move.l 24(a0),d0
   11378:	move.l d0,-(sp)
   1137a:	jsr 13dd4 <getBoolean>
   11380:	addq.l #4,sp
   11382:	move.w d0,1b542 <captureAllKeys>
	trimStack (&fun -> stack);
   11388:	moveq #24,d0
   1138a:	add.l 8(sp),d0
   1138e:	move.l d0,-(sp)
   11390:	jsr 14218 <trimStack>
   11396:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   11398:	move.w 1b542 <captureAllKeys>,d0
   1139e:	movea.w d0,a0
   113a0:	moveq #28,d0
   113a2:	add.l 8(sp),d0
   113a6:	move.l a0,-(sp)
   113a8:	pea 1 <_start+0x1>
   113ac:	move.l d0,-(sp)
   113ae:	jsr 14186 <setVariable>
   113b4:	lea 12(sp),sp
	return BR_CONTINUE;
   113b8:	moveq #2,d0
}
   113ba:	rts

000113bc <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   113bc:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   113c0:	       movea.l 20(sp),a0
   113c4:	       move.l 24(a0),d0
   113c8:	       move.l d0,-(sp)
   113ca:	       pea 1 <_start+0x1>
   113ce:	       moveq #12,d0
   113d0:	       add.l sp,d0
   113d2:	       move.l d0,-(sp)
   113d4:	       jsr 13894 <getValueType>
   113da:	       lea 12(sp),sp
   113de:	       tst.w d0
   113e0:	   /-- bne.s 113e8 <builtIn_spinCharacter+0x2c>
   113e2:	   |   moveq #1,d0
   113e4:	/--|-- bra.w 11498 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   113e8:	|  \-> moveq #24,d0
   113ea:	|      add.l 20(sp),d0
   113ee:	|      move.l d0,-(sp)
   113f0:	|      jsr 14218 <trimStack>
   113f6:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   113f8:	|      movea.l 20(sp),a0
   113fc:	|      move.l 24(a0),d0
   11400:	|      move.l d0,-(sp)
   11402:	|      pea 7 <_start+0x7>
   11406:	|      lea 8(sp),a0
   1140a:	|      move.l a0,-(sp)
   1140c:	|      jsr 13894 <getValueType>
   11412:	|      lea 12(sp),sp
   11416:	|      tst.w d0
   11418:	|  /-- bne.s 1141e <builtIn_spinCharacter+0x62>
   1141a:	|  |   moveq #1,d0
   1141c:	+--|-- bra.s 11498 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   1141e:	|  \-> moveq #24,d0
   11420:	|      add.l 20(sp),d0
   11424:	|      move.l d0,-(sp)
   11426:	|      jsr 14218 <trimStack>
   1142c:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1142e:	|      move.l (sp),d0
   11430:	|      move.l d0,-(sp)
   11432:	|      jsr 97a6 <findPerson>
   11438:	|      addq.l #4,sp
   1143a:	|      move.l d0,8(sp)
	if (thisPerson) {
   1143e:	|  /-- beq.s 1147e <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   11440:	|  |   move.l 4(sp),d0
   11444:	|  |   movea.l 8(sp),a0
   11448:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   1144c:	|  |   movea.l 8(sp),a0
   11450:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   11456:	|  |   movea.l 8(sp),a0
   1145a:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   11460:	|  |   moveq #28,d0
   11462:	|  |   add.l 20(sp),d0
   11466:	|  |   pea 1 <_start+0x1>
   1146a:	|  |   pea 1 <_start+0x1>
   1146e:	|  |   move.l d0,-(sp)
   11470:	|  |   jsr 14186 <setVariable>
   11476:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   1147a:	|  |   moveq #3,d0
   1147c:	+--|-- bra.s 11498 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1147e:	|  \-> moveq #28,d0
   11480:	|      add.l 20(sp),d0
   11484:	|      clr.l -(sp)
   11486:	|      pea 1 <_start+0x1>
   1148a:	|      move.l d0,-(sp)
   1148c:	|      jsr 14186 <setVariable>
   11492:	|      lea 12(sp),sp
		return BR_CONTINUE;
   11496:	|      moveq #2,d0
	}
}
   11498:	\----> lea 12(sp),sp
   1149c:	       rts

0001149e <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   1149e:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   114a0:	          movea.l 16(sp),a0
   114a4:	          move.l 24(a0),d0
   114a8:	          move.l d0,-(sp)
   114aa:	          pea 7 <_start+0x7>
   114ae:	          move.l sp,d0
   114b0:	          addq.l #8,d0
   114b2:	          move.l d0,-(sp)
   114b4:	          jsr 13894 <getValueType>
   114ba:	          lea 12(sp),sp
   114be:	          tst.w d0
   114c0:	      /-- bne.s 114c6 <builtIn_getCharacterDirection+0x28>
   114c2:	      |   moveq #1,d0
   114c4:	/-----|-- bra.s 11524 <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   114c6:	|     \-> moveq #24,d0
   114c8:	|         add.l 16(sp),d0
   114cc:	|         move.l d0,-(sp)
   114ce:	|         jsr 14218 <trimStack>
   114d4:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   114d6:	|         move.l (sp),d0
   114d8:	|         move.l d0,-(sp)
   114da:	|         jsr 97a6 <findPerson>
   114e0:	|         addq.l #4,sp
   114e2:	|         move.l d0,4(sp)
	if (thisPerson) {
   114e6:	|  /----- beq.s 1150a <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   114e8:	|  |      movea.l 4(sp),a0
   114ec:	|  |      move.l 106(a0),d1
   114f0:	|  |      moveq #28,d0
   114f2:	|  |      add.l 16(sp),d0
   114f6:	|  |      move.l d1,-(sp)
   114f8:	|  |      pea 1 <_start+0x1>
   114fc:	|  |      move.l d0,-(sp)
   114fe:	|  |      jsr 14186 <setVariable>
   11504:	|  |      lea 12(sp),sp
   11508:	|  |  /-- bra.s 11522 <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1150a:	|  \--|-> moveq #28,d0
   1150c:	|     |   add.l 16(sp),d0
   11510:	|     |   clr.l -(sp)
   11512:	|     |   pea 1 <_start+0x1>
   11516:	|     |   move.l d0,-(sp)
   11518:	|     |   jsr 14186 <setVariable>
   1151e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11522:	|     \-> moveq #2,d0
}
   11524:	\-------> addq.l #8,sp
   11526:	          rts

00011528 <builtIn_isCharacter>:

builtIn(isCharacter)
{
   11528:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1152a:	       movea.l 16(sp),a0
   1152e:	       move.l 24(a0),d0
   11532:	       move.l d0,-(sp)
   11534:	       pea 7 <_start+0x7>
   11538:	       move.l sp,d0
   1153a:	       addq.l #8,d0
   1153c:	       move.l d0,-(sp)
   1153e:	       jsr 13894 <getValueType>
   11544:	       lea 12(sp),sp
   11548:	       tst.w d0
   1154a:	   /-- bne.s 11550 <builtIn_isCharacter+0x28>
   1154c:	   |   moveq #1,d0
   1154e:	/--|-- bra.s 11592 <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   11550:	|  \-> moveq #24,d0
   11552:	|      add.l 16(sp),d0
   11556:	|      move.l d0,-(sp)
   11558:	|      jsr 14218 <trimStack>
   1155e:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   11560:	|      move.l (sp),d0
   11562:	|      move.l d0,-(sp)
   11564:	|      jsr 97a6 <findPerson>
   1156a:	|      addq.l #4,sp
   1156c:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   11570:	|      sne d0
   11572:	|      neg.b d0
   11574:	|      moveq #0,d1
   11576:	|      move.b d0,d1
   11578:	|      moveq #28,d0
   1157a:	|      add.l 16(sp),d0
   1157e:	|      move.l d1,-(sp)
   11580:	|      pea 1 <_start+0x1>
   11584:	|      move.l d0,-(sp)
   11586:	|      jsr 14186 <setVariable>
   1158c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11590:	|      moveq #2,d0
}
   11592:	\----> addq.l #8,sp
   11594:	       rts

00011596 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   11596:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11598:	          movea.l 16(sp),a0
   1159c:	          move.l 24(a0),d0
   115a0:	          move.l d0,-(sp)
   115a2:	          pea 7 <_start+0x7>
   115a6:	          move.l sp,d0
   115a8:	          addq.l #8,d0
   115aa:	          move.l d0,-(sp)
   115ac:	          jsr 13894 <getValueType>
   115b2:	          lea 12(sp),sp
   115b6:	          tst.w d0
   115b8:	      /-- bne.s 115be <builtIn_normalCharacter+0x28>
   115ba:	      |   moveq #1,d0
   115bc:	/-----|-- bra.s 1163a <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   115be:	|     \-> moveq #24,d0
   115c0:	|         add.l 16(sp),d0
   115c4:	|         move.l d0,-(sp)
   115c6:	|         jsr 14218 <trimStack>
   115cc:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   115ce:	|         move.l (sp),d0
   115d0:	|         move.l d0,-(sp)
   115d2:	|         jsr 97a6 <findPerson>
   115d8:	|         addq.l #4,sp
   115da:	|         move.l d0,4(sp)
	if (thisPerson)
   115de:	|  /----- beq.s 11620 <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   115e0:	|  |      movea.l 4(sp),a0
   115e4:	|  |      movea.l 80(a0),a0
   115e8:	|  |      move.l (a0),d1
   115ea:	|  |      movea.l 4(sp),a0
   115ee:	|  |      move.l 106(a0),d0
   115f2:	|  |      add.l d0,d0
   115f4:	|  |      add.l d0,d0
   115f6:	|  |      movea.l d1,a0
   115f8:	|  |      adda.l d0,a0
   115fa:	|  |      move.l (a0),d0
   115fc:	|  |      movea.l 4(sp),a0
   11600:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   11604:	|  |      moveq #28,d0
   11606:	|  |      add.l 16(sp),d0
   1160a:	|  |      pea 1 <_start+0x1>
   1160e:	|  |      pea 1 <_start+0x1>
   11612:	|  |      move.l d0,-(sp)
   11614:	|  |      jsr 14186 <setVariable>
   1161a:	|  |      lea 12(sp),sp
   1161e:	|  |  /-- bra.s 11638 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11620:	|  \--|-> moveq #28,d0
   11622:	|     |   add.l 16(sp),d0
   11626:	|     |   clr.l -(sp)
   11628:	|     |   pea 1 <_start+0x1>
   1162c:	|     |   move.l d0,-(sp)
   1162e:	|     |   jsr 14186 <setVariable>
   11634:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11638:	|     \-> moveq #2,d0
}
   1163a:	\-------> addq.l #8,sp
   1163c:	          rts

0001163e <builtIn_isMoving>:

builtIn(isMoving)
{
   1163e:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11640:	          movea.l 16(sp),a0
   11644:	          move.l 24(a0),d0
   11648:	          move.l d0,-(sp)
   1164a:	          pea 7 <_start+0x7>
   1164e:	          move.l sp,d0
   11650:	          addq.l #8,d0
   11652:	          move.l d0,-(sp)
   11654:	          jsr 13894 <getValueType>
   1165a:	          lea 12(sp),sp
   1165e:	          tst.w d0
   11660:	      /-- bne.s 11666 <builtIn_isMoving+0x28>
   11662:	      |   moveq #1,d0
   11664:	/-----|-- bra.s 116c6 <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   11666:	|     \-> moveq #24,d0
   11668:	|         add.l 16(sp),d0
   1166c:	|         move.l d0,-(sp)
   1166e:	|         jsr 14218 <trimStack>
   11674:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   11676:	|         move.l (sp),d0
   11678:	|         move.l d0,-(sp)
   1167a:	|         jsr 97a6 <findPerson>
   11680:	|         addq.l #4,sp
   11682:	|         move.l d0,4(sp)
	if (thisPerson)
   11686:	|  /----- beq.s 116ac <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   11688:	|  |      movea.l 4(sp),a0
   1168c:	|  |      move.w 64(a0),d0
   11690:	|  |      movea.w d0,a0
   11692:	|  |      moveq #28,d0
   11694:	|  |      add.l 16(sp),d0
   11698:	|  |      move.l a0,-(sp)
   1169a:	|  |      pea 1 <_start+0x1>
   1169e:	|  |      move.l d0,-(sp)
   116a0:	|  |      jsr 14186 <setVariable>
   116a6:	|  |      lea 12(sp),sp
   116aa:	|  |  /-- bra.s 116c4 <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   116ac:	|  \--|-> moveq #28,d0
   116ae:	|     |   add.l 16(sp),d0
   116b2:	|     |   clr.l -(sp)
   116b4:	|     |   pea 1 <_start+0x1>
   116b8:	|     |   move.l d0,-(sp)
   116ba:	|     |   jsr 14186 <setVariable>
   116c0:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   116c4:	|     \-> moveq #2,d0
}
   116c6:	\-------> addq.l #8,sp
   116c8:	          rts

000116ca <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   116ca:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   116ce:	          movea.l 20(sp),a0
   116d2:	          move.l 24(a0),d0
   116d6:	          move.l d0,-(sp)
   116d8:	          pea 7 <_start+0x7>
   116dc:	          lea 8(sp),a0
   116e0:	          move.l a0,-(sp)
   116e2:	          jsr 13894 <getValueType>
   116e8:	          lea 12(sp),sp
   116ec:	          tst.w d0
   116ee:	      /-- bne.s 116f6 <builtIn_fetchEvent+0x2c>
   116f0:	      |   moveq #1,d0
   116f2:	/-----|-- bra.w 1178a <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   116f6:	|     \-> moveq #24,d0
   116f8:	|         add.l 20(sp),d0
   116fc:	|         move.l d0,-(sp)
   116fe:	|         jsr 14218 <trimStack>
   11704:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11706:	|         movea.l 20(sp),a0
   1170a:	|         move.l 24(a0),d0
   1170e:	|         move.l d0,-(sp)
   11710:	|         pea 7 <_start+0x7>
   11714:	|         moveq #12,d0
   11716:	|         add.l sp,d0
   11718:	|         move.l d0,-(sp)
   1171a:	|         jsr 13894 <getValueType>
   11720:	|         lea 12(sp),sp
   11724:	|         tst.w d0
   11726:	|     /-- bne.s 1172c <builtIn_fetchEvent+0x62>
   11728:	|     |   moveq #1,d0
   1172a:	+-----|-- bra.s 1178a <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   1172c:	|     \-> moveq #24,d0
   1172e:	|         add.l 20(sp),d0
   11732:	|         move.l d0,-(sp)
   11734:	|         jsr 14218 <trimStack>
   1173a:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   1173c:	|         move.l (sp),d1
   1173e:	|         move.l 4(sp),d0
   11742:	|         move.l d1,-(sp)
   11744:	|         move.l d0,-(sp)
   11746:	|         jsr c6b4 <getCombinationFunction>
   1174c:	|         addq.l #8,sp
   1174e:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   11752:	|  /----- beq.s 11770 <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   11754:	|  |      moveq #28,d0
   11756:	|  |      add.l 20(sp),d0
   1175a:	|  |      move.l 8(sp),-(sp)
   1175e:	|  |      pea 2 <_start+0x2>
   11762:	|  |      move.l d0,-(sp)
   11764:	|  |      jsr 14186 <setVariable>
   1176a:	|  |      lea 12(sp),sp
   1176e:	|  |  /-- bra.s 11788 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11770:	|  \--|-> moveq #28,d0
   11772:	|     |   add.l 20(sp),d0
   11776:	|     |   clr.l -(sp)
   11778:	|     |   pea 1 <_start+0x1>
   1177c:	|     |   move.l d0,-(sp)
   1177e:	|     |   jsr 14186 <setVariable>
   11784:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11788:	|     \-> moveq #2,d0
}
   1178a:	\-------> lea 12(sp),sp
   1178e:	          rts

00011790 <builtIn_deleteFile>:

builtIn(deleteFile)
{
   11790:	       lea -24(sp),sp
   11794:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   11796:	       movea.l 36(sp),a0
   1179a:	       move.l 24(a0),d0
   1179e:	       move.l d0,-(sp)
   117a0:	       jsr 13e6a <getTextFromAnyVar>
   117a6:	       addq.l #4,sp
   117a8:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   117ac:	       moveq #24,d0
   117ae:	       add.l 36(sp),d0
   117b2:	       move.l d0,-(sp)
   117b4:	       jsr 14218 <trimStack>
   117ba:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   117bc:	       move.l 24(sp),-(sp)
   117c0:	       jsr 2fe <encodeFilename>
   117c6:	       addq.l #4,sp
   117c8:	       move.l d0,20(sp)
    FreeVec(namNormal);
   117cc:	       move.l 24(sp),16(sp)
   117d2:	       move.l 1b5a2 <SysBase>,d0
   117d8:	       movea.l d0,a6
   117da:	       movea.l 16(sp),a1
   117de:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   117e2:	       move.l 20(sp),-(sp)
   117e6:	       jsr d46c <failSecurityCheck>
   117ec:	       addq.l #4,sp
   117ee:	       tst.w d0
   117f0:	   /-- beq.s 117f6 <builtIn_deleteFile+0x66>
   117f2:	   |   moveq #1,d0
   117f4:	/--|-- bra.s 11844 <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   117f6:	|  \-> move.l 20(sp),12(sp)
   117fc:	|      move.l 1b5aa <DOSBase>,d0
   11802:	|      movea.l d0,a6
   11804:	|      move.l 12(sp),d1
   11808:	|      jsr -72(a6)
   1180c:	|      move.l d0,8(sp)
   11810:	|      move.l 8(sp),d1
   11814:	|      moveq #28,d0
   11816:	|      add.l 36(sp),d0
   1181a:	|      move.l d1,-(sp)
   1181c:	|      pea 1 <_start+0x1>
   11820:	|      move.l d0,-(sp)
   11822:	|      jsr 14186 <setVariable>
   11828:	|      lea 12(sp),sp
    FreeVec(nam);
   1182c:	|      move.l 20(sp),4(sp)
   11832:	|      move.l 1b5a2 <SysBase>,d0
   11838:	|      movea.l d0,a6
   1183a:	|      movea.l 4(sp),a1
   1183e:	|      jsr -690(a6)

    return BR_CONTINUE;
   11842:	|      moveq #2,d0
}
   11844:	\----> movea.l (sp)+,a6
   11846:	       lea 24(sp),sp
   1184a:	       rts

0001184c <builtIn_renameFile>:

builtIn(renameFile)
{
   1184c:	       lea -40(sp),sp
   11850:	       move.l a6,-(sp)
   11852:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   11854:	       movea.l 56(sp),a0
   11858:	       move.l 24(a0),d0
   1185c:	       move.l d0,-(sp)
   1185e:	       jsr 13e6a <getTextFromAnyVar>
   11864:	       addq.l #4,sp
   11866:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   1186a:	       move.l 44(sp),-(sp)
   1186e:	       jsr 2fe <encodeFilename>
   11874:	       addq.l #4,sp
   11876:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   1187a:	       moveq #24,d0
   1187c:	       add.l 56(sp),d0
   11880:	       move.l d0,-(sp)
   11882:	       jsr 14218 <trimStack>
   11888:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   1188a:	       move.l 40(sp),-(sp)
   1188e:	       jsr d46c <failSecurityCheck>
   11894:	       addq.l #4,sp
   11896:	       tst.w d0
   11898:	   /-- beq.s 118a0 <builtIn_renameFile+0x54>
   1189a:	   |   moveq #1,d0
   1189c:	/--|-- bra.w 11986 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   118a0:	|  \-> move.l 44(sp),36(sp)
   118a6:	|      move.l 1b5a2 <SysBase>,d0
   118ac:	|      movea.l d0,a6
   118ae:	|      movea.l 36(sp),a1
   118b2:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   118b6:	|      movea.l 56(sp),a0
   118ba:	|      move.l 24(a0),d0
   118be:	|      move.l d0,-(sp)
   118c0:	|      jsr 13e6a <getTextFromAnyVar>
   118c6:	|      addq.l #4,sp
   118c8:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   118cc:	|      move.l 44(sp),-(sp)
   118d0:	|      jsr 2fe <encodeFilename>
   118d6:	|      addq.l #4,sp
   118d8:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   118dc:	|      moveq #24,d0
   118de:	|      add.l 56(sp),d0
   118e2:	|      move.l d0,-(sp)
   118e4:	|      jsr 14218 <trimStack>
   118ea:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   118ec:	|      move.l 32(sp),-(sp)
   118f0:	|      jsr d46c <failSecurityCheck>
   118f6:	|      addq.l #4,sp
   118f8:	|      tst.w d0
   118fa:	|  /-- beq.s 11902 <builtIn_renameFile+0xb6>
   118fc:	|  |   moveq #1,d0
   118fe:	+--|-- bra.w 11986 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   11902:	|  \-> move.l 44(sp),28(sp)
   11908:	|      move.l 1b5a2 <SysBase>,d0
   1190e:	|      movea.l d0,a6
   11910:	|      movea.l 28(sp),a1
   11914:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   11918:	|      move.l 32(sp),24(sp)
   1191e:	|      move.l 40(sp),20(sp)
   11924:	|      move.l 1b5aa <DOSBase>,d0
   1192a:	|      movea.l d0,a6
   1192c:	|      move.l 24(sp),d1
   11930:	|      move.l 20(sp),d2
   11934:	|      jsr -78(a6)
   11938:	|      move.l d0,16(sp)
   1193c:	|      move.l 16(sp),d1
   11940:	|      moveq #28,d0
   11942:	|      add.l 56(sp),d0
   11946:	|      move.l d1,-(sp)
   11948:	|      pea 1 <_start+0x1>
   1194c:	|      move.l d0,-(sp)
   1194e:	|      jsr 14186 <setVariable>
   11954:	|      lea 12(sp),sp
	FreeVec(nam);
   11958:	|      move.l 32(sp),12(sp)
   1195e:	|      move.l 1b5a2 <SysBase>,d0
   11964:	|      movea.l d0,a6
   11966:	|      movea.l 12(sp),a1
   1196a:	|      jsr -690(a6)
	FreeVec(newnam);
   1196e:	|      move.l 40(sp),8(sp)
   11974:	|      move.l 1b5a2 <SysBase>,d0
   1197a:	|      movea.l d0,a6
   1197c:	|      movea.l 8(sp),a1
   11980:	|      jsr -690(a6)

	return BR_CONTINUE;
   11984:	|      moveq #2,d0
}
   11986:	\----> move.l (sp)+,d2
   11988:	       movea.l (sp)+,a6
   1198a:	       lea 40(sp),sp
   1198e:	       rts

00011990 <builtIn_cacheSound>:

builtIn(cacheSound)
{
   11990:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   11992:	       movea.l 12(sp),a0
   11996:	       move.l 24(a0),d0
   1199a:	       move.l d0,-(sp)
   1199c:	       pea 5 <_start+0x5>
   119a0:	       move.l sp,d0
   119a2:	       addq.l #8,d0
   119a4:	       move.l d0,-(sp)
   119a6:	       jsr 13894 <getValueType>
   119ac:	       lea 12(sp),sp
   119b0:	       tst.w d0
   119b2:	   /-- bne.s 119b8 <builtIn_cacheSound+0x28>
   119b4:	   |   moveq #1,d0
   119b6:	/--|-- bra.s 119e0 <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   119b8:	|  \-> moveq #24,d0
   119ba:	|      add.l 12(sp),d0
   119be:	|      move.l d0,-(sp)
   119c0:	|      jsr 14218 <trimStack>
   119c6:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   119c8:	|      move.l (sp),d0
   119ca:	|      move.l d0,-(sp)
   119cc:	|      jsr c2b4 <cacheSound>
   119d2:	|      addq.l #4,sp
   119d4:	|      moveq #-1,d1
   119d6:	|      cmp.l d0,d1
   119d8:	|  /-- bne.s 119de <builtIn_cacheSound+0x4e>
   119da:	|  |   moveq #1,d0
   119dc:	+--|-- bra.s 119e0 <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   119de:	|  \-> moveq #2,d0
}
   119e0:	\----> addq.l #4,sp
   119e2:	       rts

000119e4 <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   119e4:	pea 187c5 <PutChar+0x1eaf>
   119ea:	jsr 15fc6 <KPrintF>
   119f0:	addq.l #4,sp
	return BR_CONTINUE;
   119f2:	moveq #2,d0
}
   119f4:	rts

000119f6 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   119f6:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   119fa:	          movea.l 20(sp),a0
   119fe:	          move.l 24(a0),d0
   11a02:	          move.l d0,-(sp)
   11a04:	          pea 1 <_start+0x1>
   11a08:	          moveq #12,d0
   11a0a:	          add.l sp,d0
   11a0c:	          move.l d0,-(sp)
   11a0e:	          jsr 13894 <getValueType>
   11a14:	          lea 12(sp),sp
   11a18:	          tst.w d0
   11a1a:	      /-- bne.s 11a22 <builtIn_setCharacterSpinSpeed+0x2c>
   11a1c:	      |   moveq #1,d0
   11a1e:	/-----|-- bra.w 11abc <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   11a22:	|     \-> moveq #24,d0
   11a24:	|         add.l 20(sp),d0
   11a28:	|         move.l d0,-(sp)
   11a2a:	|         jsr 14218 <trimStack>
   11a30:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11a32:	|         movea.l 20(sp),a0
   11a36:	|         move.l 24(a0),d0
   11a3a:	|         move.l d0,-(sp)
   11a3c:	|         pea 7 <_start+0x7>
   11a40:	|         lea 8(sp),a0
   11a44:	|         move.l a0,-(sp)
   11a46:	|         jsr 13894 <getValueType>
   11a4c:	|         lea 12(sp),sp
   11a50:	|         tst.w d0
   11a52:	|     /-- bne.s 11a58 <builtIn_setCharacterSpinSpeed+0x62>
   11a54:	|     |   moveq #1,d0
   11a56:	+-----|-- bra.s 11abc <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   11a58:	|     \-> moveq #24,d0
   11a5a:	|         add.l 20(sp),d0
   11a5e:	|         move.l d0,-(sp)
   11a60:	|         jsr 14218 <trimStack>
   11a66:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   11a68:	|         move.l (sp),d0
   11a6a:	|         move.l d0,-(sp)
   11a6c:	|         jsr 97a6 <findPerson>
   11a72:	|         addq.l #4,sp
   11a74:	|         move.l d0,8(sp)

	if (thisPerson) {
   11a78:	|  /----- beq.s 11aa2 <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   11a7a:	|  |      move.l 4(sp),d0
   11a7e:	|  |      movea.l 8(sp),a0
   11a82:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   11a86:	|  |      moveq #28,d0
   11a88:	|  |      add.l 20(sp),d0
   11a8c:	|  |      pea 1 <_start+0x1>
   11a90:	|  |      pea 1 <_start+0x1>
   11a94:	|  |      move.l d0,-(sp)
   11a96:	|  |      jsr 14186 <setVariable>
   11a9c:	|  |      lea 12(sp),sp
   11aa0:	|  |  /-- bra.s 11aba <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11aa2:	|  \--|-> moveq #28,d0
   11aa4:	|     |   add.l 20(sp),d0
   11aa8:	|     |   clr.l -(sp)
   11aaa:	|     |   pea 1 <_start+0x1>
   11aae:	|     |   move.l d0,-(sp)
   11ab0:	|     |   jsr 14186 <setVariable>
   11ab6:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11aba:	|     \-> moveq #2,d0
}
   11abc:	\-------> lea 12(sp),sp
   11ac0:	          rts

00011ac2 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   11ac2:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11ac6:	          movea.l 20(sp),a0
   11aca:	          move.l 24(a0),d0
   11ace:	          move.l d0,-(sp)
   11ad0:	          pea 1 <_start+0x1>
   11ad4:	          moveq #12,d0
   11ad6:	          add.l sp,d0
   11ad8:	          move.l d0,-(sp)
   11ada:	          jsr 13894 <getValueType>
   11ae0:	          lea 12(sp),sp
   11ae4:	          tst.w d0
   11ae6:	      /-- bne.s 11aee <builtIn_setCharacterAngleOffset+0x2c>
   11ae8:	      |   moveq #1,d0
   11aea:	/-----|-- bra.w 11b88 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   11aee:	|     \-> moveq #24,d0
   11af0:	|         add.l 20(sp),d0
   11af4:	|         move.l d0,-(sp)
   11af6:	|         jsr 14218 <trimStack>
   11afc:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11afe:	|         movea.l 20(sp),a0
   11b02:	|         move.l 24(a0),d0
   11b06:	|         move.l d0,-(sp)
   11b08:	|         pea 7 <_start+0x7>
   11b0c:	|         lea 8(sp),a0
   11b10:	|         move.l a0,-(sp)
   11b12:	|         jsr 13894 <getValueType>
   11b18:	|         lea 12(sp),sp
   11b1c:	|         tst.w d0
   11b1e:	|     /-- bne.s 11b24 <builtIn_setCharacterAngleOffset+0x62>
   11b20:	|     |   moveq #1,d0
   11b22:	+-----|-- bra.s 11b88 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   11b24:	|     \-> moveq #24,d0
   11b26:	|         add.l 20(sp),d0
   11b2a:	|         move.l d0,-(sp)
   11b2c:	|         jsr 14218 <trimStack>
   11b32:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   11b34:	|         move.l (sp),d0
   11b36:	|         move.l d0,-(sp)
   11b38:	|         jsr 97a6 <findPerson>
   11b3e:	|         addq.l #4,sp
   11b40:	|         move.l d0,8(sp)

	if (thisPerson) {
   11b44:	|  /----- beq.s 11b6e <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   11b46:	|  |      move.l 4(sp),d0
   11b4a:	|  |      movea.l 8(sp),a0
   11b4e:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   11b52:	|  |      moveq #28,d0
   11b54:	|  |      add.l 20(sp),d0
   11b58:	|  |      pea 1 <_start+0x1>
   11b5c:	|  |      pea 1 <_start+0x1>
   11b60:	|  |      move.l d0,-(sp)
   11b62:	|  |      jsr 14186 <setVariable>
   11b68:	|  |      lea 12(sp),sp
   11b6c:	|  |  /-- bra.s 11b86 <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11b6e:	|  \--|-> moveq #28,d0
   11b70:	|     |   add.l 20(sp),d0
   11b74:	|     |   clr.l -(sp)
   11b76:	|     |   pea 1 <_start+0x1>
   11b7a:	|     |   move.l d0,-(sp)
   11b7c:	|     |   jsr 14186 <setVariable>
   11b82:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11b86:	|     \-> moveq #2,d0
}
   11b88:	\-------> lea 12(sp),sp
   11b8c:	          rts

00011b8e <builtIn_transitionMode>:


builtIn(transitionMode)
{
   11b8e:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11b90:	       movea.l 12(sp),a0
   11b94:	       move.l 24(a0),d0
   11b98:	       move.l d0,-(sp)
   11b9a:	       pea 1 <_start+0x1>
   11b9e:	       move.l sp,d0
   11ba0:	       addq.l #8,d0
   11ba2:	       move.l d0,-(sp)
   11ba4:	       jsr 13894 <getValueType>
   11baa:	       lea 12(sp),sp
   11bae:	       tst.w d0
   11bb0:	   /-- bne.s 11bb6 <builtIn_transitionMode+0x28>
   11bb2:	   |   moveq #1,d0
   11bb4:	/--|-- bra.s 11bec <builtIn_transitionMode+0x5e>
	fadeMode = n;
   11bb6:	|  \-> move.l (sp),d0
   11bb8:	|      move.l d0,d0
   11bba:	|      move.b d0,1b47e <fadeMode>
	trimStack (&fun -> stack);
   11bc0:	|      moveq #24,d0
   11bc2:	|      add.l 12(sp),d0
   11bc6:	|      move.l d0,-(sp)
   11bc8:	|      jsr 14218 <trimStack>
   11bce:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   11bd0:	|      moveq #28,d0
   11bd2:	|      add.l 12(sp),d0
   11bd6:	|      pea 1 <_start+0x1>
   11bda:	|      pea 1 <_start+0x1>
   11bde:	|      move.l d0,-(sp)
   11be0:	|      jsr 14186 <setVariable>
   11be6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11bea:	|      moveq #2,d0
}
   11bec:	\----> addq.l #4,sp
   11bee:	       rts

00011bf0 <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   11bf0:	moveq #24,d0
   11bf2:	add.l 8(sp),d0
   11bf6:	move.l d0,-(sp)
   11bf8:	jsr 14218 <trimStack>
   11bfe:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   11c00:	moveq #28,d0
   11c02:	add.l 8(sp),d0
   11c06:	pea 1 <_start+0x1>
   11c0a:	pea 1 <_start+0x1>
   11c0e:	move.l d0,-(sp)
   11c10:	jsr 14186 <setVariable>
   11c16:	lea 12(sp),sp
	return BR_CONTINUE;
   11c1a:	moveq #2,d0
}
   11c1c:	rts

00011c1e <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   11c1e:	pea 187ef <PutChar+0x1ed9>
   11c24:	jsr 15fc6 <KPrintF>
   11c2a:	addq.l #4,sp
	return BR_CONTINUE;
   11c2c:	moveq #2,d0
}
   11c2e:	rts

00011c30 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   11c30:	       lea -16(sp),sp
   11c34:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   11c36:	       movea.l 28(sp),a0
   11c3a:	       move.l 24(a0),d0
   11c3e:	       move.l d0,-(sp)
   11c40:	       jsr 13e6a <getTextFromAnyVar>
   11c46:	       addq.l #4,sp
   11c48:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   11c4c:	   /-- bne.s 11c54 <builtIn_saveCustomData+0x24>
   11c4e:	   |   moveq #1,d0
   11c50:	/--|-- bra.w 11d06 <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   11c54:	|  \-> move.l 16(sp),-(sp)
   11c58:	|      jsr 2fe <encodeFilename>
   11c5e:	|      addq.l #4,sp
   11c60:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   11c64:	|      move.l 16(sp),8(sp)
   11c6a:	|      move.l 1b5a2 <SysBase>,d0
   11c70:	|      movea.l d0,a6
   11c72:	|      movea.l 8(sp),a1
   11c76:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   11c7a:	|      move.l 12(sp),-(sp)
   11c7e:	|      jsr d46c <failSecurityCheck>
   11c84:	|      addq.l #4,sp
   11c86:	|      tst.w d0
   11c88:	|  /-- beq.s 11c8e <builtIn_saveCustomData+0x5e>
   11c8a:	|  |   moveq #1,d0
   11c8c:	+--|-- bra.s 11d06 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   11c8e:	|  \-> moveq #24,d0
   11c90:	|      add.l 28(sp),d0
   11c94:	|      move.l d0,-(sp)
   11c96:	|      jsr 14218 <trimStack>
   11c9c:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   11c9e:	|      movea.l 28(sp),a0
   11ca2:	|      movea.l 24(a0),a0
   11ca6:	|      move.l (a0),d0
   11ca8:	|      moveq #6,d1
   11caa:	|      cmp.l d0,d1
   11cac:	|  /-- beq.s 11cc0 <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   11cae:	|  |   pea 1881c <PutChar+0x1f06>
   11cb4:	|  |   jsr 15fc6 <KPrintF>
   11cba:	|  |   addq.l #4,sp
		return BR_ERROR;
   11cbc:	|  |   moveq #1,d0
   11cbe:	+--|-- bra.s 11d06 <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   11cc0:	|  \-> movea.l 28(sp),a0
   11cc4:	|      move.l 24(a0),d0
   11cc8:	|      move.l d0,-(sp)
   11cca:	|      move.l 16(sp),-(sp)
   11cce:	|      jsr d0bc <stackToFile>
   11cd4:	|      addq.l #8,sp
   11cd6:	|      tst.w d0
   11cd8:	|  /-- bne.s 11cde <builtIn_saveCustomData+0xae>
   11cda:	|  |   moveq #1,d0
   11cdc:	+--|-- bra.s 11d06 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   11cde:	|  \-> moveq #24,d0
   11ce0:	|      add.l 28(sp),d0
   11ce4:	|      move.l d0,-(sp)
   11ce6:	|      jsr 14218 <trimStack>
   11cec:	|      addq.l #4,sp
	FreeVec(fileName);
   11cee:	|      move.l 12(sp),4(sp)
   11cf4:	|      move.l 1b5a2 <SysBase>,d0
   11cfa:	|      movea.l d0,a6
   11cfc:	|      movea.l 4(sp),a1
   11d00:	|      jsr -690(a6)
	return BR_CONTINUE;
   11d04:	|      moveq #2,d0
}
   11d06:	\----> movea.l (sp)+,a6
   11d08:	       lea 16(sp),sp
   11d0c:	       rts

00011d0e <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   11d0e:	       lea -28(sp),sp
   11d12:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   11d14:	       movea.l 40(sp),a0
   11d18:	       move.l 24(a0),d0
   11d1c:	       move.l d0,-(sp)
   11d1e:	       jsr 13e6a <getTextFromAnyVar>
   11d24:	       addq.l #4,sp
   11d26:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   11d2a:	   /-- bne.s 11d32 <builtIn_loadCustomData+0x24>
   11d2c:	   |   moveq #1,d0
   11d2e:	/--|-- bra.w 11e2e <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   11d32:	|  \-> move.l 28(sp),-(sp)
   11d36:	|      jsr 2fe <encodeFilename>
   11d3c:	|      addq.l #4,sp
   11d3e:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   11d42:	|      move.l 28(sp),20(sp)
   11d48:	|      move.l 1b5a2 <SysBase>,d0
   11d4e:	|      movea.l d0,a6
   11d50:	|      movea.l 20(sp),a1
   11d54:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   11d58:	|      move.l 24(sp),-(sp)
   11d5c:	|      jsr d46c <failSecurityCheck>
   11d62:	|      addq.l #4,sp
   11d64:	|      tst.w d0
   11d66:	|  /-- beq.s 11d6e <builtIn_loadCustomData+0x60>
   11d68:	|  |   moveq #1,d0
   11d6a:	+--|-- bra.w 11e2e <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   11d6e:	|  \-> moveq #24,d0
   11d70:	|      add.l 40(sp),d0
   11d74:	|      move.l d0,-(sp)
   11d76:	|      jsr 14218 <trimStack>
   11d7c:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   11d7e:	|      moveq #28,d0
   11d80:	|      add.l 40(sp),d0
   11d84:	|      move.l d0,-(sp)
   11d86:	|      jsr 13ae2 <unlinkVar>
   11d8c:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   11d8e:	|      movea.l 40(sp),a0
   11d92:	|      moveq #6,d0
   11d94:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   11d98:	|      moveq #12,d0
   11d9a:	|      move.l d0,16(sp)
   11d9e:	|      clr.l 12(sp)
   11da2:	|      move.l 1b5a2 <SysBase>,d0
   11da8:	|      movea.l d0,a6
   11daa:	|      move.l 16(sp),d0
   11dae:	|      move.l 12(sp),d1
   11db2:	|      jsr -684(a6)
   11db6:	|      move.l d0,8(sp)
   11dba:	|      move.l 8(sp),d0
   11dbe:	|      movea.l 40(sp),a0
   11dc2:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   11dc6:	|      movea.l 40(sp),a0
   11dca:	|      move.l 32(a0),d0
   11dce:	|  /-- bne.s 11dd4 <builtIn_loadCustomData+0xc6>
   11dd0:	|  |   moveq #1,d0
   11dd2:	+--|-- bra.s 11e2e <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   11dd4:	|  \-> movea.l 40(sp),a0
   11dd8:	|      movea.l 32(a0),a0
   11ddc:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   11dde:	|      movea.l 40(sp),a0
   11de2:	|      movea.l 32(a0),a0
   11de6:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   11dea:	|      movea.l 40(sp),a0
   11dee:	|      movea.l 32(a0),a0
   11df2:	|      moveq #1,d0
   11df4:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   11df8:	|      movea.l 40(sp),a0
   11dfc:	|      move.l 32(a0),d0
   11e00:	|      move.l d0,-(sp)
   11e02:	|      move.l 28(sp),-(sp)
   11e06:	|      jsr caf6 <fileToStack>
   11e0c:	|      addq.l #8,sp
   11e0e:	|      tst.w d0
   11e10:	|  /-- bne.s 11e16 <builtIn_loadCustomData+0x108>
   11e12:	|  |   moveq #1,d0
   11e14:	+--|-- bra.s 11e2e <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   11e16:	|  \-> move.l 24(sp),4(sp)
   11e1c:	|      move.l 1b5a2 <SysBase>,d0
   11e22:	|      movea.l d0,a6
   11e24:	|      movea.l 4(sp),a1
   11e28:	|      jsr -690(a6)
	return BR_CONTINUE;
   11e2c:	|      moveq #2,d0
}
   11e2e:	\----> movea.l (sp)+,a6
   11e30:	       lea 28(sp),sp
   11e34:	       rts

00011e36 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   11e36:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11e38:	       movea.l 12(sp),a0
   11e3c:	       move.l 24(a0),d0
   11e40:	       move.l d0,-(sp)
   11e42:	       pea 1 <_start+0x1>
   11e46:	       move.l sp,d0
   11e48:	       addq.l #8,d0
   11e4a:	       move.l d0,-(sp)
   11e4c:	       jsr 13894 <getValueType>
   11e52:	       lea 12(sp),sp
   11e56:	       tst.w d0
   11e58:	   /-- bne.s 11e5e <builtIn_setCustomEncoding+0x28>
   11e5a:	   |   moveq #1,d0
   11e5c:	/--|-- bra.s 11e94 <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   11e5e:	|  \-> move.l (sp),d0
   11e60:	|      move.l d0,d0
   11e62:	|      move.w d0,1b6b2 <saveEncoding>
	trimStack (&fun -> stack);
   11e68:	|      moveq #24,d0
   11e6a:	|      add.l 12(sp),d0
   11e6e:	|      move.l d0,-(sp)
   11e70:	|      jsr 14218 <trimStack>
   11e76:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   11e78:	|      moveq #28,d0
   11e7a:	|      add.l 12(sp),d0
   11e7e:	|      pea 1 <_start+0x1>
   11e82:	|      pea 1 <_start+0x1>
   11e86:	|      move.l d0,-(sp)
   11e88:	|      jsr 14186 <setVariable>
   11e8e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11e92:	|      moveq #2,d0
}
   11e94:	\----> addq.l #4,sp
   11e96:	       rts

00011e98 <builtIn_freeSound>:

builtIn(freeSound)
{
   11e98:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   11e9a:	       movea.l 12(sp),a0
   11e9e:	       move.l 24(a0),d0
   11ea2:	       move.l d0,-(sp)
   11ea4:	       pea 5 <_start+0x5>
   11ea8:	       move.l sp,d0
   11eaa:	       addq.l #8,d0
   11eac:	       move.l d0,-(sp)
   11eae:	       jsr 13894 <getValueType>
   11eb4:	       lea 12(sp),sp
   11eb8:	       tst.w d0
   11eba:	   /-- bne.s 11ec0 <builtIn_freeSound+0x28>
   11ebc:	   |   moveq #1,d0
   11ebe:	/--|-- bra.s 11ede <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   11ec0:	|  \-> moveq #24,d0
   11ec2:	|      add.l 12(sp),d0
   11ec6:	|      move.l d0,-(sp)
   11ec8:	|      jsr 14218 <trimStack>
   11ece:	|      addq.l #4,sp
	huntKillFreeSound (v);
   11ed0:	|      move.l (sp),d0
   11ed2:	|      move.l d0,-(sp)
   11ed4:	|      jsr c2b8 <huntKillFreeSound>
   11eda:	|      addq.l #4,sp
	return BR_CONTINUE;
   11edc:	|      moveq #2,d0
}
   11ede:	\----> addq.l #4,sp
   11ee0:	       rts

00011ee2 <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   11ee2:	       lea -12(sp),sp
   11ee6:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11ee8:	       movea.l 24(sp),a0
   11eec:	       move.l 24(a0),d0
   11ef0:	       move.l d0,-(sp)
   11ef2:	       pea 1 <_start+0x1>
   11ef6:	       moveq #16,d0
   11ef8:	       add.l sp,d0
   11efa:	       move.l d0,-(sp)
   11efc:	       jsr 13894 <getValueType>
   11f02:	       lea 12(sp),sp
   11f06:	       tst.w d0
   11f08:	   /-- bne.s 11f10 <builtIn_parallaxAdd+0x2e>
   11f0a:	   |   moveq #1,d0
   11f0c:	/--|-- bra.w 11fe4 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   11f10:	|  \-> moveq #24,d0
   11f12:	|      add.l 24(sp),d0
   11f16:	|      move.l d0,-(sp)
   11f18:	|      jsr 14218 <trimStack>
   11f1e:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11f20:	|      movea.l 24(sp),a0
   11f24:	|      move.l 24(a0),d0
   11f28:	|      move.l d0,-(sp)
   11f2a:	|      pea 1 <_start+0x1>
   11f2e:	|      moveq #20,d0
   11f30:	|      add.l sp,d0
   11f32:	|      move.l d0,-(sp)
   11f34:	|      jsr 13894 <getValueType>
   11f3a:	|      lea 12(sp),sp
   11f3e:	|      tst.w d0
   11f40:	|  /-- bne.s 11f48 <builtIn_parallaxAdd+0x66>
   11f42:	|  |   moveq #1,d0
   11f44:	+--|-- bra.w 11fe4 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   11f48:	|  \-> moveq #24,d0
   11f4a:	|      add.l 24(sp),d0
   11f4e:	|      move.l d0,-(sp)
   11f50:	|      jsr 14218 <trimStack>
   11f56:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   11f58:	|      movea.l 24(sp),a0
   11f5c:	|      move.l 24(a0),d0
   11f60:	|      move.l d0,-(sp)
   11f62:	|      pea 5 <_start+0x5>
   11f66:	|      lea 12(sp),a0
   11f6a:	|      move.l a0,-(sp)
   11f6c:	|      jsr 13894 <getValueType>
   11f72:	|      lea 12(sp),sp
   11f76:	|      tst.w d0
   11f78:	|  /-- bne.s 11f7e <builtIn_parallaxAdd+0x9c>
   11f7a:	|  |   moveq #1,d0
   11f7c:	+--|-- bra.s 11fe4 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   11f7e:	|  \-> moveq #24,d0
   11f80:	|      add.l 24(sp),d0
   11f84:	|      move.l d0,-(sp)
   11f86:	|      jsr 14218 <trimStack>
   11f8c:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   11f8e:	|      move.l 8(sp),d0
   11f92:	|      move.l d0,d0
   11f94:	|      moveq #0,d2
   11f96:	|      move.w d0,d2
   11f98:	|      move.l 12(sp),d0
   11f9c:	|      move.l d0,d0
   11f9e:	|      moveq #0,d1
   11fa0:	|      move.w d0,d1
   11fa2:	|      move.l 4(sp),d0
   11fa6:	|      move.l d0,d0
   11fa8:	|      move.w d0,d0
   11faa:	|      andi.l #65535,d0
   11fb0:	|      move.l d2,-(sp)
   11fb2:	|      move.l d1,-(sp)
   11fb4:	|      move.l d0,-(sp)
   11fb6:	|      jsr c4d4 <loadParallax>
   11fbc:	|      lea 12(sp),sp
   11fc0:	|      tst.w d0
   11fc2:	|  /-- bne.s 11fc8 <builtIn_parallaxAdd+0xe6>
   11fc4:	|  |   moveq #1,d0
   11fc6:	+--|-- bra.s 11fe4 <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   11fc8:	|  \-> moveq #28,d0
   11fca:	|      add.l 24(sp),d0
   11fce:	|      pea 1 <_start+0x1>
   11fd2:	|      pea 1 <_start+0x1>
   11fd6:	|      move.l d0,-(sp)
   11fd8:	|      jsr 14186 <setVariable>
   11fde:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   11fe2:	|      moveq #2,d0
}
   11fe4:	\----> move.l (sp)+,d2
   11fe6:	       lea 12(sp),sp
   11fea:	       rts

00011fec <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   11fec:	jsr c40c <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   11ff2:	moveq #28,d0
   11ff4:	add.l 8(sp),d0
   11ff8:	pea 1 <_start+0x1>
   11ffc:	pea 1 <_start+0x1>
   12000:	move.l d0,-(sp)
   12002:	jsr 14186 <setVariable>
   12008:	lea 12(sp),sp
	return BR_CONTINUE;
   1200c:	moveq #2,d0
}
   1200e:	rts

00012010 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   12010:	pea 1883a <PutChar+0x1f24>
   12016:	jsr 15fc6 <KPrintF>
   1201c:	addq.l #4,sp

	return BR_CONTINUE;
   1201e:	moveq #2,d0
}
   12020:	rts

00012022 <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   12022:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   12024:	             movea.l 16(sp),a0
   12028:	             movea.l 24(a0),a0
   1202c:	             move.l (a0),d0
   1202e:	             moveq #1,d1
   12030:	             cmp.l d0,d1
   12032:	      /----- beq.s 1207a <builtIn_makeFastArray+0x58>
   12034:	      |      moveq #6,d1
   12036:	      |      cmp.l d0,d1
   12038:	/-----|----- bne.s 120b8 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   1203a:	|     |      movea.l 16(sp),a0
   1203e:	|     |      movea.l 24(a0),a0
   12042:	|     |      move.l 4(a0),d1
   12046:	|     |      moveq #28,d0
   12048:	|     |      add.l 16(sp),d0
   1204c:	|     |      move.l d1,-(sp)
   1204e:	|     |      move.l d0,-(sp)
   12050:	|     |      jsr 13946 <makeFastArrayFromStack>
   12056:	|     |      addq.l #8,sp
   12058:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   1205c:	|     |      moveq #24,d0
   1205e:	|     |      add.l 16(sp),d0
   12062:	|     |      move.l d0,-(sp)
   12064:	|     |      jsr 14218 <trimStack>
   1206a:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   1206c:	|     |      tst.w 6(sp)
   12070:	|     |  /-- beq.s 12076 <builtIn_makeFastArray+0x54>
   12072:	|     |  |   moveq #2,d0
   12074:	|  /--|--|-- bra.s 120ca <builtIn_makeFastArray+0xa8>
   12076:	|  |  |  \-> moveq #1,d0
   12078:	|  +--|----- bra.s 120ca <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   1207a:	|  |  \----> movea.l 16(sp),a0
   1207e:	|  |         movea.l 24(a0),a0
   12082:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   12088:	|  |         moveq #24,d0
   1208a:	|  |         add.l 16(sp),d0
   1208e:	|  |         move.l d0,-(sp)
   12090:	|  |         jsr 14218 <trimStack>
   12096:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   12098:	|  |         moveq #28,d0
   1209a:	|  |         add.l 16(sp),d0
   1209e:	|  |         move.l 2(sp),-(sp)
   120a2:	|  |         move.l d0,-(sp)
   120a4:	|  |         jsr 139b0 <makeFastArraySize>
   120aa:	|  |         addq.l #8,sp
   120ac:	|  |         tst.w d0
   120ae:	|  |     /-- beq.s 120b4 <builtIn_makeFastArray+0x92>
   120b0:	|  |     |   moveq #2,d0
   120b2:	|  +-----|-- bra.s 120ca <builtIn_makeFastArray+0xa8>
   120b4:	|  |     \-> moveq #1,d0
   120b6:	|  +-------- bra.s 120ca <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   120b8:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   120ba:	   |         pea 18863 <PutChar+0x1f4d>
   120c0:	   |         jsr 15fc6 <KPrintF>
   120c6:	   |         addq.l #4,sp
	return BR_ERROR;
   120c8:	   |         moveq #1,d0
}
   120ca:	   \-------> addq.l #8,sp
   120cc:	             rts

000120ce <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   120ce:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   120d0:	          movea.l 16(sp),a0
   120d4:	          move.l 24(a0),d0
   120d8:	          move.l d0,-(sp)
   120da:	          pea 7 <_start+0x7>
   120de:	          move.l sp,d0
   120e0:	          addq.l #8,d0
   120e2:	          move.l d0,-(sp)
   120e4:	          jsr 13894 <getValueType>
   120ea:	          lea 12(sp),sp
   120ee:	          tst.w d0
   120f0:	      /-- bne.s 120f6 <builtIn_getCharacterScale+0x28>
   120f2:	      |   moveq #1,d0
   120f4:	/-----|-- bra.s 12170 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   120f6:	|     \-> moveq #24,d0
   120f8:	|         add.l 16(sp),d0
   120fc:	|         move.l d0,-(sp)
   120fe:	|         jsr 14218 <trimStack>
   12104:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   12106:	|         move.l (sp),d0
   12108:	|         move.l d0,-(sp)
   1210a:	|         jsr 97a6 <findPerson>
   12110:	|         addq.l #4,sp
   12112:	|         move.l d0,4(sp)
	if (pers) {
   12116:	|  /----- beq.s 12156 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   12118:	|  |      movea.l 4(sp),a0
   1211c:	|  |      move.l 32(a0),d0
   12120:	|  |      move.l #1120403456,-(sp)
   12126:	|  |      move.l d0,-(sp)
   12128:	|  |      jsr 16330 <__mulsf3>
   1212e:	|  |      addq.l #8,sp
   12130:	|  |      move.l d0,-(sp)
   12132:	|  |      jsr 16216 <__fixsfsi>
   12138:	|  |      addq.l #4,sp
   1213a:	|  |      move.l d0,d1
   1213c:	|  |      moveq #28,d0
   1213e:	|  |      add.l 16(sp),d0
   12142:	|  |      move.l d1,-(sp)
   12144:	|  |      pea 1 <_start+0x1>
   12148:	|  |      move.l d0,-(sp)
   1214a:	|  |      jsr 14186 <setVariable>
   12150:	|  |      lea 12(sp),sp
   12154:	|  |  /-- bra.s 1216e <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12156:	|  \--|-> moveq #28,d0
   12158:	|     |   add.l 16(sp),d0
   1215c:	|     |   clr.l -(sp)
   1215e:	|     |   pea 1 <_start+0x1>
   12162:	|     |   move.l d0,-(sp)
   12164:	|     |   jsr 14186 <setVariable>
   1216a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1216e:	|     \-> moveq #2,d0
}
   12170:	\-------> addq.l #8,sp
   12172:	          rts

00012174 <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   12174:	move.l 1b6d6 <gameSettings>,d0
   1217a:	move.l d0,d1
   1217c:	moveq #28,d0
   1217e:	add.l 8(sp),d0
   12182:	move.l d1,-(sp)
   12184:	pea 1 <_start+0x1>
   12188:	move.l d0,-(sp)
   1218a:	jsr 14186 <setVariable>
   12190:	lea 12(sp),sp
	return BR_CONTINUE;
   12194:	moveq #2,d0
}
   12196:	rts

00012198 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   12198:	moveq #24,d0
   1219a:	add.l 8(sp),d0
   1219e:	move.l d0,-(sp)
   121a0:	jsr 14218 <trimStack>
   121a6:	addq.l #4,sp
	trimStack (&fun -> stack);
   121a8:	moveq #24,d0
   121aa:	add.l 8(sp),d0
   121ae:	move.l d0,-(sp)
   121b0:	jsr 14218 <trimStack>
   121b6:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   121b8:	moveq #28,d0
   121ba:	add.l 8(sp),d0
   121be:	clr.l -(sp)
   121c0:	pea 1 <_start+0x1>
   121c4:	move.l d0,-(sp)
   121c6:	jsr 14186 <setVariable>
   121cc:	lea 12(sp),sp

	return BR_CONTINUE;
   121d0:	moveq #2,d0

}
   121d2:	rts

000121d4 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   121d4:	move.l 1af24 <lastFramesPerSecond>,d1
   121da:	moveq #28,d0
   121dc:	add.l 8(sp),d0
   121e0:	move.l d1,-(sp)
   121e2:	pea 1 <_start+0x1>
   121e6:	move.l d0,-(sp)
   121e8:	jsr 14186 <setVariable>
   121ee:	lea 12(sp),sp
	return BR_CONTINUE;
   121f2:	moveq #2,d0
}
   121f4:	rts

000121f6 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   121f6:	moveq #2,d0
}
   121f8:	rts

000121fa <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   121fa:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   121fe:	          movea.l 60(sp),a0
   12202:	          move.l 24(a0),d0
   12206:	          move.l d0,-(sp)
   12208:	          pea 1 <_start+0x1>
   1220c:	          pea 1b4ba <thumbHeight>
   12212:	          jsr 13894 <getValueType>
   12218:	          lea 12(sp),sp
   1221c:	          tst.w d0
   1221e:	      /-- bne.s 12226 <builtIn_setThumbnailSize+0x2c>
   12220:	      |   moveq #1,d0
   12222:	/-----|-- bra.w 122e2 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   12226:	|     \-> moveq #24,d0
   12228:	|         add.l 60(sp),d0
   1222c:	|         move.l d0,-(sp)
   1222e:	|         jsr 14218 <trimStack>
   12234:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12236:	|         movea.l 60(sp),a0
   1223a:	|         move.l 24(a0),d0
   1223e:	|         move.l d0,-(sp)
   12240:	|         pea 1 <_start+0x1>
   12244:	|         pea 1b4b6 <thumbWidth>
   1224a:	|         jsr 13894 <getValueType>
   12250:	|         lea 12(sp),sp
   12254:	|         tst.w d0
   12256:	|     /-- bne.s 1225e <builtIn_setThumbnailSize+0x64>
   12258:	|     |   moveq #1,d0
   1225a:	+-----|-- bra.w 122e2 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   1225e:	|     \-> moveq #24,d0
   12260:	|         add.l 60(sp),d0
   12264:	|         move.l d0,-(sp)
   12266:	|         jsr 14218 <trimStack>
   1226c:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   1226e:	|         move.l 1b4b6 <thumbWidth>,d0
   12274:	|     /-- bmi.s 122a2 <builtIn_setThumbnailSize+0xa8>
   12276:	|     |   move.l 1b4ba <thumbHeight>,d0
   1227c:	|     +-- bmi.s 122a2 <builtIn_setThumbnailSize+0xa8>
   1227e:	|     |   move.l 1b4b6 <thumbWidth>,d0
   12284:	|     |   move.l d0,d1
   12286:	|     |   move.l 1b4f6 <winWidth>,d0
   1228c:	|     |   cmp.l d1,d0
   1228e:	|     +-- bcs.s 122a2 <builtIn_setThumbnailSize+0xa8>
   12290:	|     |   move.l 1b4ba <thumbHeight>,d0
   12296:	|     |   move.l d0,d1
   12298:	|     |   move.l 1b4fa <winHeight>,d0
   1229e:	|     |   cmp.l d1,d0
   122a0:	|  /--|-- bcc.s 122e0 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   122a2:	|  |  \-> move.l 1b4ba <thumbHeight>,d1
   122a8:	|  |      move.l 1b4b6 <thumbWidth>,d0
   122ae:	|  |      move.l d1,-(sp)
   122b0:	|  |      move.l d0,-(sp)
   122b2:	|  |      pea 1888a <PutChar+0x1f74>
   122b8:	|  |      lea 14(sp),a0
   122bc:	|  |      move.l a0,-(sp)
   122be:	|  |      jsr 1309e <sprintf>
   122c4:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   122c8:	|  |      lea 2(sp),a0
   122cc:	|  |      move.l a0,-(sp)
   122ce:	|  |      pea 18892 <PutChar+0x1f7c>
   122d4:	|  |      jsr 15fc6 <KPrintF>
   122da:	|  |      addq.l #8,sp
		return BR_ERROR;
   122dc:	|  |      moveq #1,d0
   122de:	+--|----- bra.s 122e2 <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   122e0:	|  \----> moveq #2,d0
}
   122e2:	\-------> lea 52(sp),sp
   122e6:	          rts

000122e8 <builtIn_hasFlag>:

builtIn(hasFlag)
{
   122e8:	       lea -12(sp),sp
   122ec:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   122ee:	       movea.l 24(sp),a0
   122f2:	       move.l 24(a0),d0
   122f6:	       move.l d0,-(sp)
   122f8:	       pea 1 <_start+0x1>
   122fc:	       lea 12(sp),a0
   12300:	       move.l a0,-(sp)
   12302:	       jsr 13894 <getValueType>
   12308:	       lea 12(sp),sp
   1230c:	       tst.w d0
   1230e:	   /-- bne.s 12316 <builtIn_hasFlag+0x2e>
   12310:	   |   moveq #1,d0
   12312:	/--|-- bra.w 123a6 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   12316:	|  \-> moveq #24,d0
   12318:	|      add.l 24(sp),d0
   1231c:	|      move.l d0,-(sp)
   1231e:	|      jsr 14218 <trimStack>
   12324:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12326:	|      movea.l 24(sp),a0
   1232a:	|      move.l 24(a0),d0
   1232e:	|      move.l d0,-(sp)
   12330:	|      pea 7 <_start+0x7>
   12334:	|      moveq #16,d0
   12336:	|      add.l sp,d0
   12338:	|      move.l d0,-(sp)
   1233a:	|      jsr 13894 <getValueType>
   12340:	|      lea 12(sp),sp
   12344:	|      tst.w d0
   12346:	|  /-- bne.s 1234c <builtIn_hasFlag+0x64>
   12348:	|  |   moveq #1,d0
   1234a:	+--|-- bra.s 123a6 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   1234c:	|  \-> moveq #24,d0
   1234e:	|      add.l 24(sp),d0
   12352:	|      move.l d0,-(sp)
   12354:	|      jsr 14218 <trimStack>
   1235a:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   1235c:	|      move.l 8(sp),d0
   12360:	|      move.l d0,-(sp)
   12362:	|      jsr c680 <findObjectType>
   12368:	|      addq.l #4,sp
   1236a:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   1236e:	|  /-- bne.s 12374 <builtIn_hasFlag+0x8c>
   12370:	|  |   moveq #1,d0
   12372:	+--|-- bra.s 123a6 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   12374:	|  \-> movea.l 12(sp),a0
   12378:	|      move.w 36(a0),d0
   1237c:	|      moveq #0,d2
   1237e:	|      move.w d0,d2
   12380:	|      move.l 4(sp),d1
   12384:	|      moveq #1,d0
   12386:	|      lsl.l d1,d0
   12388:	|      move.l d2,d1
   1238a:	|      and.l d0,d1
   1238c:	|      moveq #28,d0
   1238e:	|      add.l 24(sp),d0
   12392:	|      move.l d1,-(sp)
   12394:	|      pea 1 <_start+0x1>
   12398:	|      move.l d0,-(sp)
   1239a:	|      jsr 14186 <setVariable>
   123a0:	|      lea 12(sp),sp
	return BR_CONTINUE;
   123a4:	|      moveq #2,d0
}
   123a6:	\----> move.l (sp)+,d2
   123a8:	       lea 12(sp),sp
   123ac:	       rts

000123ae <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   123ae:	       jsr c66e <snapshot>
   123b4:	       tst.w d0
   123b6:	/----- beq.s 123bc <builtIn_snapshotGrab+0xe>
   123b8:	|      moveq #2,d0
   123ba:	|  /-- bra.s 123be <builtIn_snapshotGrab+0x10>
   123bc:	\--|-> moveq #1,d0
}
   123be:	   \-> rts

000123c0 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   123c0:	jsr c51a <nosnapshot>
	return BR_CONTINUE;
   123c6:	moveq #2,d0
}
   123c8:	rts

000123ca <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   123ca:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   123cc:	move.w 1ae00 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   123d4:	movea.l 12(sp),a0
   123d8:	move.l 24(a0),d0
   123dc:	move.l d0,-(sp)
   123de:	jsr 13dd4 <getBoolean>
   123e4:	addq.l #4,sp
   123e6:	move.w d0,1ae00 <allowAnyFilename>
	trimStack (&fun -> stack);
   123ec:	moveq #24,d0
   123ee:	add.l 12(sp),d0
   123f2:	move.l d0,-(sp)
   123f4:	jsr 14218 <trimStack>
   123fa:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   123fc:	movea.w 2(sp),a0
   12400:	moveq #28,d0
   12402:	add.l 12(sp),d0
   12406:	move.l a0,-(sp)
   12408:	pea 1 <_start+0x1>
   1240c:	move.l d0,-(sp)
   1240e:	jsr 14186 <setVariable>
   12414:	lea 12(sp),sp
	return BR_CONTINUE;
   12418:	moveq #2,d0
}
   1241a:	addq.l #4,sp
   1241c:	rts

0001241e <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   1241e:	moveq #24,d0
   12420:	add.l 8(sp),d0
   12424:	move.l d0,-(sp)
   12426:	jsr 14218 <trimStack>
   1242c:	addq.l #4,sp
	trimStack (&fun -> stack);
   1242e:	moveq #24,d0
   12430:	add.l 8(sp),d0
   12434:	move.l d0,-(sp)
   12436:	jsr 14218 <trimStack>
   1243c:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   1243e:	moveq #28,d0
   12440:	add.l 8(sp),d0
   12444:	clr.l -(sp)
   12446:	pea 1 <_start+0x1>
   1244a:	move.l d0,-(sp)
   1244c:	jsr 14186 <setVariable>
   12452:	lea 12(sp),sp

	return BR_CONTINUE;
   12456:	moveq #2,d0
}
   12458:	rts

0001245a <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   1245a:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   1245c:	movea.l 12(sp),a0
   12460:	move.l 24(a0),d0
   12464:	move.l d0,-(sp)
   12466:	jsr 13e6a <getTextFromAnyVar>
   1246c:	addq.l #4,sp
   1246e:	move.l d0,(sp)
	trimStack (&fun -> stack);
   12470:	moveq #24,d0
   12472:	add.l 12(sp),d0
   12476:	move.l d0,-(sp)
   12478:	jsr 14218 <trimStack>
   1247e:	addq.l #4,sp
	KPrintF (mess);
   12480:	move.l (sp),-(sp)
   12482:	jsr 15fc6 <KPrintF>
   12488:	addq.l #4,sp
	return BR_ERROR;
   1248a:	moveq #1,d0
}
   1248c:	addq.l #4,sp
   1248e:	rts

00012490 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   12490:	moveq #24,d0
   12492:	add.l 8(sp),d0
   12496:	move.l d0,-(sp)
   12498:	jsr 14218 <trimStack>
   1249e:	addq.l #4,sp
	trimStack (&fun -> stack);
   124a0:	moveq #24,d0
   124a2:	add.l 8(sp),d0
   124a6:	move.l d0,-(sp)
   124a8:	jsr 14218 <trimStack>
   124ae:	addq.l #4,sp
	trimStack (&fun -> stack);
   124b0:	moveq #24,d0
   124b2:	add.l 8(sp),d0
   124b6:	move.l d0,-(sp)
   124b8:	jsr 14218 <trimStack>
   124be:	addq.l #4,sp
	trimStack (&fun -> stack);
   124c0:	moveq #24,d0
   124c2:	add.l 8(sp),d0
   124c6:	move.l d0,-(sp)
   124c8:	jsr 14218 <trimStack>
   124ce:	addq.l #4,sp

	return BR_CONTINUE;
   124d0:	moveq #2,d0
}
   124d2:	rts

000124d4 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   124d4:	moveq #24,d0
   124d6:	add.l 8(sp),d0
   124da:	move.l d0,-(sp)
   124dc:	jsr 14218 <trimStack>
   124e2:	addq.l #4,sp
	trimStack (&fun -> stack);
   124e4:	moveq #24,d0
   124e6:	add.l 8(sp),d0
   124ea:	move.l d0,-(sp)
   124ec:	jsr 14218 <trimStack>
   124f2:	addq.l #4,sp
	trimStack (&fun -> stack);
   124f4:	moveq #24,d0
   124f6:	add.l 8(sp),d0
   124fa:	move.l d0,-(sp)
   124fc:	jsr 14218 <trimStack>
   12502:	addq.l #4,sp

	return BR_CONTINUE;
   12504:	moveq #2,d0

}
   12506:	rts

00012508 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   12508:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   1250a:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   12510:	sne d0
   12512:	neg.b d0
   12514:	moveq #0,d1
   12516:	move.b d0,d1
   12518:	moveq #28,d0
   1251a:	add.l 12(sp),d0
   1251e:	move.l d1,-(sp)
   12520:	pea 1 <_start+0x1>
   12524:	move.l d0,-(sp)
   12526:	jsr 14186 <setVariable>
   1252c:	lea 12(sp),sp
	return BR_CONTINUE;
   12530:	moveq #2,d0
}
   12532:	addq.l #4,sp
   12534:	rts

00012536 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   12536:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   12538:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   1253e:	pea 188a9 <PutChar+0x1f93>
   12544:	jsr 15fc6 <KPrintF>
   1254a:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   1254c:	tst.w 2(sp)
   12550:	sne d0
   12552:	neg.b d0
   12554:	moveq #0,d1
   12556:	move.b d0,d1
   12558:	moveq #28,d0
   1255a:	add.l 12(sp),d0
   1255e:	move.l d1,-(sp)
   12560:	pea 1 <_start+0x1>
   12564:	move.l d0,-(sp)
   12566:	jsr 14186 <setVariable>
   1256c:	lea 12(sp),sp
	return BR_CONTINUE;
   12570:	moveq #2,d0
}
   12572:	addq.l #4,sp
   12574:	rts

00012576 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   12576:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   1257a:	             move.l 104(sp),d0
   1257e:	             cmpi.l #166,d0
   12584:	/----------- bhi.w 12666 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   12588:	|            move.l 104(sp),d0
   1258c:	|            add.l d0,d0
   1258e:	|            movea.l d0,a1
   12590:	|            adda.l d0,a1
   12592:	|            lea 1af46 <paramNum>,a0
   12598:	|            move.l (0,a1,a0.l),d0
   1259c:	|            moveq #-1,d1
   1259e:	|            cmp.l d0,d1
   125a0:	|  /-------- beq.w 1262e <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   125a4:	|  |         move.l 104(sp),d0
   125a8:	|  |         add.l d0,d0
   125aa:	|  |         movea.l d0,a1
   125ac:	|  |         adda.l d0,a1
   125ae:	|  |         lea 1af46 <paramNum>,a0
   125b4:	|  |         move.l (0,a1,a0.l),d0
   125b8:	|  |         cmp.l 108(sp),d0
   125bc:	|  +-------- beq.s 1262e <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   125be:	|  |         move.l 104(sp),d0
   125c2:	|  |         add.l d0,d0
   125c4:	|  |         movea.l d0,a1
   125c6:	|  |         adda.l d0,a1
   125c8:	|  |         lea 1af46 <paramNum>,a0
   125ce:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   125d2:	|  |         moveq #1,d1
   125d4:	|  |         cmp.l d0,d1
   125d6:	|  |  /----- bne.s 125e0 <callBuiltIn+0x6a>
   125d8:	|  |  |      move.l #95536,d0
   125de:	|  |  |  /-- bra.s 125e6 <callBuiltIn+0x70>
   125e0:	|  |  \--|-> move.l #100575,d0
   125e6:	|  |     \-> move.l 104(sp),d1
   125ea:	|  |         add.l d1,d1
   125ec:	|  |         movea.l d1,a1
   125ee:	|  |         adda.l d1,a1
   125f0:	|  |         lea 1af46 <paramNum>,a0
   125f6:	|  |         move.l (0,a1,a0.l),d1
   125fa:	|  |         move.l d0,-(sp)
   125fc:	|  |         move.l d1,-(sp)
   125fe:	|  |         pea 188e1 <PutChar+0x1fcb>
   12604:	|  |         lea 12(sp),a0
   12608:	|  |         move.l a0,-(sp)
   1260a:	|  |         jsr 1309e <sprintf>
   12610:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   12614:	|  |         movea.l sp,a0
   12616:	|  |         move.l a0,-(sp)
   12618:	|  |         jsr b8 <copyString>
   1261e:	|  |         addq.l #4,sp
   12620:	|  |         move.l d0,-(sp)
   12622:	|  |         jsr 15fc6 <KPrintF>
   12628:	|  |         addq.l #4,sp
				return BR_ERROR;
   1262a:	|  |         moveq #1,d0
   1262c:	|  |     /-- bra.s 12676 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   1262e:	|  \-----|-> move.l 104(sp),d0
   12632:	|        |   add.l d0,d0
   12634:	|        |   movea.l d0,a1
   12636:	|        |   adda.l d0,a1
   12638:	|        |   lea 1b1e2 <builtInFunctionArray>,a0
   1263e:	|        |   move.l (0,a1,a0.l),d0
   12642:	+--------|-- beq.s 12666 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   12644:	|        |   move.l 104(sp),d0
   12648:	|        |   add.l d0,d0
   1264a:	|        |   movea.l d0,a1
   1264c:	|        |   adda.l d0,a1
   1264e:	|        |   lea 1b1e2 <builtInFunctionArray>,a0
   12654:	|        |   movea.l (0,a1,a0.l),a0
   12658:	|        |   move.l 112(sp),-(sp)
   1265c:	|        |   move.l 112(sp),-(sp)
   12660:	|        |   jsr (a0)
   12662:	|        |   addq.l #8,sp
   12664:	|        +-- bra.s 12676 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   12666:	\--------|-> pea 1890c <PutChar+0x1ff6>
   1266c:	         |   jsr 15fc6 <KPrintF>
   12672:	         |   addq.l #4,sp
	return BR_ERROR;
   12674:	         |   moveq #1,d0
}
   12676:	         \-> lea 100(sp),sp
   1267a:	             rts

0001267c <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   1267c:	          subq.l #8,sp
	int indexNum = -1;
   1267e:	          moveq #-1,d0
   12680:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   12684:	          clr.l (sp)
   12686:	   /----- bra.s 126ac <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   12688:	/--|----> move.l 1b6ce <languageTable>,d1
   1268e:	|  |      move.l (sp),d0
   12690:	|  |      add.l d0,d0
   12692:	|  |      add.l d0,d0
   12694:	|  |      movea.l d1,a0
   12696:	|  |      adda.l d0,a0
   12698:	|  |      move.l (a0),d0
   1269a:	|  |      move.l d0,d1
   1269c:	|  |      move.l 1b6d6 <gameSettings>,d0
   126a2:	|  |      cmp.l d1,d0
   126a4:	|  |  /-- bne.s 126aa <getLanguageForFileB+0x2e>
   126a6:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   126aa:	|  |  \-> addq.l #1,(sp)
   126ac:	|  \----> move.l 1b6da <gameSettings+0x4>,d0
   126b2:	|         cmp.l (sp),d0
   126b4:	\-------- bcc.s 12688 <getLanguageForFileB+0xc>
	}

	return indexNum;
   126b6:	          move.l 4(sp),d0
}
   126ba:	          addq.l #8,sp
   126bc:	          rts

000126be <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   126be:	          lea -20(sp),sp
   126c2:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   126c4:	          move.l 28(sp),-(sp)
   126c8:	          jsr 12d80 <strlen>
   126ce:	          addq.l #4,sp
   126d0:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   126d4:	          moveq #4,d0
   126d6:	          cmp.l 12(sp),d0
   126da:	      /-- bge.s 126fe <getPrefsFilename+0x40>
   126dc:	      |   move.l 12(sp),d0
   126e0:	      |   subq.l #4,d0
   126e2:	      |   movea.l 28(sp),a0
   126e6:	      |   adda.l d0,a0
   126e8:	      |   move.b (a0),d0
   126ea:	      |   cmpi.b #46,d0
   126ee:	      +-- bne.s 126fe <getPrefsFilename+0x40>
		filename[n-4] = 0;
   126f0:	      |   move.l 12(sp),d0
   126f4:	      |   subq.l #4,d0
   126f6:	      |   movea.l 28(sp),a0
   126fa:	      |   adda.l d0,a0
   126fc:	      |   clr.b (a0)
	}

	char * f = filename;
   126fe:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   12704:	          clr.l 20(sp)
   12708:	   /----- bra.s 12730 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   1270a:	/--|----> move.l 20(sp),d0
   1270e:	|  |      movea.l 28(sp),a0
   12712:	|  |      adda.l d0,a0
   12714:	|  |      move.b (a0),d0
   12716:	|  |      cmpi.b #47,d0
   1271a:	|  |  /-- bne.s 1272c <getPrefsFilename+0x6e>
   1271c:	|  |  |   move.l 20(sp),d0
   12720:	|  |  |   addq.l #1,d0
   12722:	|  |  |   move.l 28(sp),d1
   12726:	|  |  |   add.l d0,d1
   12728:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   1272c:	|  |  \-> addq.l #1,20(sp)
   12730:	|  \----> move.l 20(sp),d0
   12734:	|         cmp.l 12(sp),d0
   12738:	\-------- blt.s 1270a <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   1273a:	          pea 18937 <PutChar+0x2021>
   12740:	          move.l 20(sp),-(sp)
   12744:	          jsr 12dc0 <joinStrings>
   1274a:	          addq.l #8,sp
   1274c:	          move.l d0,8(sp)

	FreeVec(filename);
   12750:	          move.l 28(sp),4(sp)
   12756:	          move.l 1b5a2 <SysBase>,d0
   1275c:	          movea.l d0,a6
   1275e:	          movea.l 4(sp),a1
   12762:	          jsr -690(a6)
	filename = NULL;
   12766:	          clr.l 28(sp)
	return joined;
   1276a:	          move.l 8(sp),d0
}
   1276e:	          movea.l (sp)+,a6
   12770:	          lea 20(sp),sp
   12774:	          rts

00012776 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   12776:	             lea -28(sp),sp
   1277a:	             move.l a6,-(sp)
   1277c:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   1277e:	             move.l 1b6da <gameSettings+0x4>,d0
   12784:	             move.l d0,d1
   12786:	             addq.l #1,d1
   12788:	             move.l d1,28(sp)
   1278c:	             clr.l 24(sp)
   12790:	             move.l 1b5a2 <SysBase>,d0
   12796:	             movea.l d0,a6
   12798:	             move.l 28(sp),d0
   1279c:	             move.l 24(sp),d1
   127a0:	             jsr -684(a6)
   127a4:	             move.l d0,20(sp)
   127a8:	             move.l 20(sp),d0
   127ac:	             move.l d0,1b6ce <languageTable>
    if( languageTable == 0) {
   127b2:	             move.l 1b6ce <languageTable>,d0
   127b8:	         /-- bne.s 127c8 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   127ba:	         |   pea 1893c <PutChar+0x2026>
   127c0:	         |   jsr 15fc6 <KPrintF>
   127c6:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   127c8:	         \-> move.l 1b6da <gameSettings+0x4>,d0
   127ce:	             move.l d0,d1
   127d0:	             addq.l #1,d1
   127d2:	             move.l d1,16(sp)
   127d6:	             clr.l 12(sp)
   127da:	             move.l 1b5a2 <SysBase>,d0
   127e0:	             movea.l d0,a6
   127e2:	             move.l 16(sp),d0
   127e6:	             move.l 12(sp),d1
   127ea:	             jsr -684(a6)
   127ee:	             move.l d0,8(sp)
   127f2:	             move.l 8(sp),d0
   127f6:	             move.l d0,1b6d2 <languageName>
	if( languageName == 0) {
   127fc:	             move.l 1b6d2 <languageName>,d0
   12802:	         /-- bne.s 12812 <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   12804:	         |   pea 18972 <PutChar+0x205c>
   1280a:	         |   jsr 15fc6 <KPrintF>
   12810:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   12812:	         \-> clr.l 32(sp)
   12816:	   /-------- bra.s 1288e <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   12818:	/--|-------> tst.l 32(sp)
   1281c:	|  |  /----- beq.s 1282c <makeLanguageTable+0xb6>
   1281e:	|  |  |      move.l 40(sp),-(sp)
   12822:	|  |  |      jsr 6bc <get2bytes>
   12828:	|  |  |      addq.l #4,sp
   1282a:	|  |  |  /-- bra.s 1282e <makeLanguageTable+0xb8>
   1282c:	|  |  \--|-> moveq #0,d0
   1282e:	|  |     \-> movea.l 1b6ce <languageTable>,a0
   12834:	|  |         move.l 32(sp),d1
   12838:	|  |         add.l d1,d1
   1283a:	|  |         add.l d1,d1
   1283c:	|  |         adda.l d1,a0
   1283e:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   12840:	|  |         move.l 1b6d2 <languageName>,d1
   12846:	|  |         move.l 32(sp),d0
   1284a:	|  |         add.l d0,d0
   1284c:	|  |         add.l d0,d0
   1284e:	|  |         movea.l d1,a0
   12850:	|  |         adda.l d0,a0
   12852:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   12854:	|  |         move.l 1b54c <gameVersion>,d0
   1285a:	|  |         cmpi.l #511,d0
   12860:	|  |     /-- ble.s 1288a <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   12862:	|  |     |   move.l 1b6da <gameSettings+0x4>,d0
   12868:	|  |     +-- beq.s 1288a <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   1286a:	|  |     |   move.l 1b6d2 <languageName>,d1
   12870:	|  |     |   move.l 32(sp),d0
   12874:	|  |     |   add.l d0,d0
   12876:	|  |     |   add.l d0,d0
   12878:	|  |     |   movea.l d1,a2
   1287a:	|  |     |   adda.l d0,a2
   1287c:	|  |     |   move.l 40(sp),-(sp)
   12880:	|  |     |   jsr b02 <readString>
   12886:	|  |     |   addq.l #4,sp
   12888:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1288a:	|  |     \-> addq.l #1,32(sp)
   1288e:	|  \-------> move.l 1b6da <gameSettings+0x4>,d0
   12894:	|            cmp.l 32(sp),d0
   12898:	\----------- bcc.w 12818 <makeLanguageTable+0xa2>
		}
	}
}
   1289c:	             nop
   1289e:	             nop
   128a0:	             movea.l (sp)+,a2
   128a2:	             movea.l (sp)+,a6
   128a4:	             lea 28(sp),sp
   128a8:	             rts

000128aa <readIniFile>:

void readIniFile (char * filename) {
   128aa:	                      lea -564(sp),sp
   128ae:	                      move.l a6,-(sp)
   128b0:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   128b2:	                      move.l 576(sp),-(sp)
   128b6:	                      jsr b8 <copyString>
   128bc:	                      addq.l #4,sp
   128be:	                      move.l d0,-(sp)
   128c0:	                      jsr 126be <getPrefsFilename>
   128c6:	                      addq.l #4,sp
   128c8:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   128cc:	                      move.l 562(sp),558(sp)
   128d2:	                      move.l #1005,554(sp)
   128da:	                      move.l 1b5aa <DOSBase>,d0
   128e0:	                      movea.l d0,a6
   128e2:	                      move.l 558(sp),d1
   128e6:	                      move.l 554(sp),d2
   128ea:	                      jsr -30(a6)
   128ee:	                      move.l d0,550(sp)
   128f2:	                      move.l 550(sp),d0
   128f6:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   128fa:	                      clr.l 1b6d6 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   12900:	                      move.w #1,1b6de <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   12908:	                      clr.l 1b6e0 <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   1290e:	                      moveq #1,d0
   12910:	                      move.l d0,1b6e4 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   12916:	                      clr.w 1b6e8 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   1291c:	                      clr.w 1b6ea <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   12922:	                      clr.w 1b6ec <gameSettings+0x16>

	FreeVec(langName);
   12928:	                      move.l 562(sp),542(sp)
   1292e:	                      move.l 1b5a2 <SysBase>,d0
   12934:	                      movea.l d0,a6
   12936:	                      movea.l 542(sp),a1
   1293a:	                      jsr -690(a6)
	langName = NULL;
   1293e:	                      clr.l 562(sp)

	if (fp) {
   12942:	                      tst.l 546(sp)
   12946:	/-------------------- beq.w 12c24 <readIniFile+0x37a>
		char lineSoFar[257] = "";
   1294a:	|                     move.l sp,d0
   1294c:	|                     addi.l #265,d0
   12952:	|                     move.l #257,d1
   12958:	|                     move.l d1,-(sp)
   1295a:	|                     clr.l -(sp)
   1295c:	|                     move.l d0,-(sp)
   1295e:	|                     jsr 15f4a <memset>
   12964:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   12968:	|                     move.l sp,d0
   1296a:	|                     addq.l #8,d0
   1296c:	|                     move.l #257,d1
   12972:	|                     move.l d1,-(sp)
   12974:	|                     clr.l -(sp)
   12976:	|                     move.l d0,-(sp)
   12978:	|                     jsr 15f4a <memset>
   1297e:	|                     lea 12(sp),sp
		unsigned char here = 0;
   12982:	|                     clr.b 571(sp)
		char readChar = ' ';
   12986:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   1298c:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   12992:	|                     clr.w 566(sp)
		LONG tmp = 0;
   12996:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   1299a:	|  /----------------> move.l 546(sp),534(sp)
   129a0:	|  |                  move.l 1b5aa <DOSBase>,d0
   129a6:	|  |                  movea.l d0,a6
   129a8:	|  |                  move.l 534(sp),d1
   129ac:	|  |                  jsr -306(a6)
   129b0:	|  |                  move.l d0,530(sp)
   129b4:	|  |                  move.l 530(sp),d0
   129b8:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   129bc:	|  |                  moveq #-1,d1
   129be:	|  |                  cmp.l 538(sp),d1
   129c2:	|  |           /----- bne.s 129d0 <readIniFile+0x126>
				readChar = '\n';
   129c4:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   129ca:	|  |           |      clr.w 568(sp)
   129ce:	|  |           |  /-- bra.s 129d6 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   129d0:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   129d6:	|  |              \-> move.b 570(sp),d0
   129da:	|  |                  ext.w d0
   129dc:	|  |                  movea.w d0,a0
   129de:	|  |                  moveq #61,d0
   129e0:	|  |                  cmp.l a0,d0
   129e2:	|  |     /----------- beq.w 12b8c <readIniFile+0x2e2>
   129e6:	|  |     |            moveq #61,d1
   129e8:	|  |     |            cmp.l a0,d1
   129ea:	|  |  /--|----------- blt.w 12b98 <readIniFile+0x2ee>
   129ee:	|  |  |  |            moveq #10,d0
   129f0:	|  |  |  |            cmp.l a0,d0
   129f2:	|  |  |  |        /-- beq.s 129fc <readIniFile+0x152>
   129f4:	|  |  |  |        |   moveq #13,d1
   129f6:	|  |  |  |        |   cmp.l a0,d1
   129f8:	|  |  +--|--------|-- bne.w 12b98 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   129fc:	|  |  |  |        \-> tst.w 566(sp)
   12a00:	|  |  |  |     /----- beq.w 12b7a <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   12a04:	|  |  |  |     |      pea 189a6 <PutChar+0x2090>
   12a0a:	|  |  |  |     |      move.l sp,d0
   12a0c:	|  |  |  |     |      addi.l #269,d0
   12a12:	|  |  |  |     |      move.l d0,-(sp)
   12a14:	|  |  |  |     |      jsr 12d40 <strcmp>
   12a1a:	|  |  |  |     |      addq.l #8,sp
   12a1c:	|  |  |  |     |      tst.l d0
   12a1e:	|  |  |  |     |  /-- bne.s 12a38 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   12a20:	|  |  |  |     |  |   move.l sp,d0
   12a22:	|  |  |  |     |  |   addq.l #8,d0
   12a24:	|  |  |  |     |  |   move.l d0,-(sp)
   12a26:	|  |  |  |     |  |   jsr 12c30 <stringToInt>
   12a2c:	|  |  |  |     |  |   addq.l #4,sp
   12a2e:	|  |  |  |     |  |   move.l d0,1b6d6 <gameSettings>
   12a34:	|  |  |  |     +--|-- bra.w 12b7a <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   12a38:	|  |  |  |     |  \-> pea 189af <PutChar+0x2099>
   12a3e:	|  |  |  |     |      move.l sp,d0
   12a40:	|  |  |  |     |      addi.l #269,d0
   12a46:	|  |  |  |     |      move.l d0,-(sp)
   12a48:	|  |  |  |     |      jsr 12d40 <strcmp>
   12a4e:	|  |  |  |     |      addq.l #8,sp
   12a50:	|  |  |  |     |      tst.l d0
   12a52:	|  |  |  |     |  /-- bne.s 12a78 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   12a54:	|  |  |  |     |  |   move.l sp,d0
   12a56:	|  |  |  |     |  |   addq.l #8,d0
   12a58:	|  |  |  |     |  |   move.l d0,-(sp)
   12a5a:	|  |  |  |     |  |   jsr 12c30 <stringToInt>
   12a60:	|  |  |  |     |  |   addq.l #4,sp
   12a62:	|  |  |  |     |  |   tst.l d0
   12a64:	|  |  |  |     |  |   seq d0
   12a66:	|  |  |  |     |  |   neg.b d0
   12a68:	|  |  |  |     |  |   move.b d0,d0
   12a6a:	|  |  |  |     |  |   andi.w #255,d0
   12a6e:	|  |  |  |     |  |   move.w d0,1b6de <gameSettings+0x8>
   12a74:	|  |  |  |     +--|-- bra.w 12b7a <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   12a78:	|  |  |  |     |  \-> pea 189b6 <PutChar+0x20a0>
   12a7e:	|  |  |  |     |      move.l sp,d0
   12a80:	|  |  |  |     |      addi.l #269,d0
   12a86:	|  |  |  |     |      move.l d0,-(sp)
   12a88:	|  |  |  |     |      jsr 12d40 <strcmp>
   12a8e:	|  |  |  |     |      addq.l #8,sp
   12a90:	|  |  |  |     |      tst.l d0
   12a92:	|  |  |  |     |  /-- bne.s 12aac <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   12a94:	|  |  |  |     |  |   move.l sp,d0
   12a96:	|  |  |  |     |  |   addq.l #8,d0
   12a98:	|  |  |  |     |  |   move.l d0,-(sp)
   12a9a:	|  |  |  |     |  |   jsr 12c30 <stringToInt>
   12aa0:	|  |  |  |     |  |   addq.l #4,sp
   12aa2:	|  |  |  |     |  |   move.l d0,1b6e0 <gameSettings+0xa>
   12aa8:	|  |  |  |     +--|-- bra.w 12b7a <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   12aac:	|  |  |  |     |  \-> pea 189be <PutChar+0x20a8>
   12ab2:	|  |  |  |     |      move.l sp,d0
   12ab4:	|  |  |  |     |      addi.l #269,d0
   12aba:	|  |  |  |     |      move.l d0,-(sp)
   12abc:	|  |  |  |     |      jsr 12d40 <strcmp>
   12ac2:	|  |  |  |     |      addq.l #8,sp
   12ac4:	|  |  |  |     |      tst.l d0
   12ac6:	|  |  |  |     |  /-- bne.s 12ae0 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   12ac8:	|  |  |  |     |  |   move.l sp,d0
   12aca:	|  |  |  |     |  |   addq.l #8,d0
   12acc:	|  |  |  |     |  |   move.l d0,-(sp)
   12ace:	|  |  |  |     |  |   jsr 12c30 <stringToInt>
   12ad4:	|  |  |  |     |  |   addq.l #4,sp
   12ad6:	|  |  |  |     |  |   move.l d0,1b6e4 <gameSettings+0xe>
   12adc:	|  |  |  |     +--|-- bra.w 12b7a <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   12ae0:	|  |  |  |     |  \-> pea 189c8 <PutChar+0x20b2>
   12ae6:	|  |  |  |     |      move.l sp,d0
   12ae8:	|  |  |  |     |      addi.l #269,d0
   12aee:	|  |  |  |     |      move.l d0,-(sp)
   12af0:	|  |  |  |     |      jsr 12d40 <strcmp>
   12af6:	|  |  |  |     |      addq.l #8,sp
   12af8:	|  |  |  |     |      tst.l d0
   12afa:	|  |  |  |     |  /-- bne.s 12b14 <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   12afc:	|  |  |  |     |  |   move.l sp,d0
   12afe:	|  |  |  |     |  |   addq.l #8,d0
   12b00:	|  |  |  |     |  |   move.l d0,-(sp)
   12b02:	|  |  |  |     |  |   jsr 12c30 <stringToInt>
   12b08:	|  |  |  |     |  |   addq.l #4,sp
   12b0a:	|  |  |  |     |  |   move.l d0,d0
   12b0c:	|  |  |  |     |  |   move.w d0,1b6e8 <gameSettings+0x12>
   12b12:	|  |  |  |     +--|-- bra.s 12b7a <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   12b14:	|  |  |  |     |  \-> pea 189d4 <PutChar+0x20be>
   12b1a:	|  |  |  |     |      move.l sp,d0
   12b1c:	|  |  |  |     |      addi.l #269,d0
   12b22:	|  |  |  |     |      move.l d0,-(sp)
   12b24:	|  |  |  |     |      jsr 12d40 <strcmp>
   12b2a:	|  |  |  |     |      addq.l #8,sp
   12b2c:	|  |  |  |     |      tst.l d0
   12b2e:	|  |  |  |     |  /-- bne.s 12b48 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   12b30:	|  |  |  |     |  |   move.l sp,d0
   12b32:	|  |  |  |     |  |   addq.l #8,d0
   12b34:	|  |  |  |     |  |   move.l d0,-(sp)
   12b36:	|  |  |  |     |  |   jsr 12c30 <stringToInt>
   12b3c:	|  |  |  |     |  |   addq.l #4,sp
   12b3e:	|  |  |  |     |  |   move.l d0,d0
   12b40:	|  |  |  |     |  |   move.w d0,1b6ea <gameSettings+0x14>
   12b46:	|  |  |  |     +--|-- bra.s 12b7a <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   12b48:	|  |  |  |     |  \-> pea 189e2 <PutChar+0x20cc>
   12b4e:	|  |  |  |     |      move.l sp,d0
   12b50:	|  |  |  |     |      addi.l #269,d0
   12b56:	|  |  |  |     |      move.l d0,-(sp)
   12b58:	|  |  |  |     |      jsr 12d40 <strcmp>
   12b5e:	|  |  |  |     |      addq.l #8,sp
   12b60:	|  |  |  |     |      tst.l d0
   12b62:	|  |  |  |     +----- bne.s 12b7a <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   12b64:	|  |  |  |     |      move.l sp,d0
   12b66:	|  |  |  |     |      addq.l #8,d0
   12b68:	|  |  |  |     |      move.l d0,-(sp)
   12b6a:	|  |  |  |     |      jsr 12c30 <stringToInt>
   12b70:	|  |  |  |     |      addq.l #4,sp
   12b72:	|  |  |  |     |      move.l d0,d0
   12b74:	|  |  |  |     |      move.w d0,1b6ec <gameSettings+0x16>
					}
				}
				here = 0;
   12b7a:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
   12b7e:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   12b82:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   12b86:	|  |  |  |            clr.b 8(sp)
				break;
   12b8a:	|  |  |  |  /-------- bra.s 12c02 <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   12b8c:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
   12b92:	|  |  |     |         clr.b 571(sp)
				break;
   12b96:	|  |  |     +-------- bra.s 12c02 <readIniFile+0x358>

				default:
				if (doingSecond) {
   12b98:	|  |  \-----|-------> tst.w 566(sp)
   12b9c:	|  |        |  /----- beq.s 12bd0 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   12b9e:	|  |        |  |      move.b 571(sp),d0
   12ba2:	|  |        |  |      move.b d0,d1
   12ba4:	|  |        |  |      addq.b #1,d1
   12ba6:	|  |        |  |      move.b d1,571(sp)
   12baa:	|  |        |  |      move.b d0,d0
   12bac:	|  |        |  |      andi.l #255,d0
   12bb2:	|  |        |  |      lea 572(sp),a0
   12bb6:	|  |        |  |      adda.l d0,a0
   12bb8:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   12bbe:	|  |        |  |      moveq #0,d0
   12bc0:	|  |        |  |      move.b 571(sp),d0
   12bc4:	|  |        |  |      lea 572(sp),a0
   12bc8:	|  |        |  |      adda.l d0,a0
   12bca:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   12bce:	|  |        |  |  /-- bra.s 12c00 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   12bd0:	|  |        |  \--|-> move.b 571(sp),d0
   12bd4:	|  |        |     |   move.b d0,d1
   12bd6:	|  |        |     |   addq.b #1,d1
   12bd8:	|  |        |     |   move.b d1,571(sp)
   12bdc:	|  |        |     |   move.b d0,d0
   12bde:	|  |        |     |   andi.l #255,d0
   12be4:	|  |        |     |   lea 572(sp),a0
   12be8:	|  |        |     |   adda.l d0,a0
   12bea:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   12bf0:	|  |        |     |   moveq #0,d0
   12bf2:	|  |        |     |   move.b 571(sp),d0
   12bf6:	|  |        |     |   lea 572(sp),a0
   12bfa:	|  |        |     |   adda.l d0,a0
   12bfc:	|  |        |     |   clr.b -307(a0)
				break;
   12c00:	|  |        |     \-> nop
			}
		} while (keepGoing);
   12c02:	|  |        \-------> tst.w 568(sp)
   12c06:	|  \----------------- bne.w 1299a <readIniFile+0xf0>

		Close(fp);
   12c0a:	|                     move.l 546(sp),526(sp)
   12c10:	|                     move.l 1b5aa <DOSBase>,d0
   12c16:	|                     movea.l d0,a6
   12c18:	|                     move.l 526(sp),d1
   12c1c:	|                     jsr -36(a6)
   12c20:	|                     move.l d0,522(sp)
	}
}
   12c24:	\-------------------> nop
   12c26:	                      move.l (sp)+,d2
   12c28:	                      movea.l (sp)+,a6
   12c2a:	                      lea 564(sp),sp
   12c2e:	                      rts

00012c30 <stringToInt>:

unsigned int stringToInt (char * s) {
   12c30:	             subq.l #8,sp
	int i = 0;
   12c32:	             clr.l 4(sp)
	BOOL negative = FALSE;
   12c36:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   12c3a:	/----------> movea.l 12(sp),a0
   12c3e:	|            move.b (a0),d0
   12c40:	|            cmpi.b #47,d0
   12c44:	|        /-- ble.s 12c7c <stringToInt+0x4c>
   12c46:	|        |   movea.l 12(sp),a0
   12c4a:	|        |   move.b (a0),d0
   12c4c:	|        |   cmpi.b #57,d0
   12c50:	|        +-- bgt.s 12c7c <stringToInt+0x4c>
			i *= 10;
   12c52:	|        |   move.l 4(sp),d1
   12c56:	|        |   move.l d1,d0
   12c58:	|        |   add.l d0,d0
   12c5a:	|        |   add.l d0,d0
   12c5c:	|        |   add.l d1,d0
   12c5e:	|        |   add.l d0,d0
   12c60:	|        |   move.l d0,4(sp)
			i += *s - '0';
   12c64:	|        |   movea.l 12(sp),a0
   12c68:	|        |   move.b (a0),d0
   12c6a:	|        |   ext.w d0
   12c6c:	|        |   movea.w d0,a0
   12c6e:	|        |   moveq #-48,d0
   12c70:	|        |   add.l a0,d0
   12c72:	|        |   add.l d0,4(sp)
			s ++;
   12c76:	|        |   addq.l #1,12(sp)
   12c7a:	|  /-----|-- bra.s 12cb4 <stringToInt+0x84>
		} else if (*s == '-') {
   12c7c:	|  |     \-> movea.l 12(sp),a0
   12c80:	|  |         move.b (a0),d0
   12c82:	|  |         cmpi.b #45,d0
   12c86:	|  |     /-- bne.s 12ca0 <stringToInt+0x70>
			negative = ! negative;
   12c88:	|  |     |   tst.w 2(sp)
   12c8c:	|  |     |   seq d0
   12c8e:	|  |     |   neg.b d0
   12c90:	|  |     |   move.b d0,d0
   12c92:	|  |     |   andi.w #255,d0
   12c96:	|  |     |   move.w d0,2(sp)
			s++;
   12c9a:	|  |     |   addq.l #1,12(sp)
   12c9e:	+--|-----|-- bra.s 12c3a <stringToInt+0xa>
		} else {
			if (negative)
   12ca0:	|  |     \-> tst.w 2(sp)
   12ca4:	|  |     /-- beq.s 12cae <stringToInt+0x7e>
				return -i;
   12ca6:	|  |     |   move.l 4(sp),d0
   12caa:	|  |     |   neg.l d0
   12cac:	|  |  /--|-- bra.s 12cb6 <stringToInt+0x86>
			return i;
   12cae:	|  |  |  \-> move.l 4(sp),d0
   12cb2:	|  |  +----- bra.s 12cb6 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   12cb4:	\--\--|----X bra.s 12c3a <stringToInt+0xa>
		}
	}
   12cb6:	      \----> addq.l #8,sp
   12cb8:	             rts

00012cba <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   12cba:	    lea -28(sp),sp
   12cbe:	    move.l a6,-(sp)
   12cc0:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   12cc2:	    pea 189ec <PutChar+0x20d6>
   12cc8:	    jsr 15fc6 <KPrintF>
   12cce:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   12cd0:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   12cd4:	    move.l 40(sp),30(sp)
   12cda:	    move.l #1005,26(sp)
   12ce2:	    move.l 1b5aa <DOSBase>,d0
   12ce8:	    movea.l d0,a6
   12cea:	    move.l 30(sp),d1
   12cee:	    move.l 26(sp),d2
   12cf2:	    jsr -30(a6)
   12cf6:	    move.l d0,22(sp)
   12cfa:	    move.l 22(sp),d0
   12cfe:	    move.l d0,18(sp)
	if (tester) {
   12d02:	/-- beq.s 12d32 <fileExists+0x78>
		KPrintF("fileexists: File exists");
   12d04:	|   pea 18a06 <PutChar+0x20f0>
   12d0a:	|   jsr 15fc6 <KPrintF>
   12d10:	|   addq.l #4,sp
		retval = 1;
   12d12:	|   move.b #1,35(sp)
		Close(tester);
   12d18:	|   move.l 18(sp),14(sp)
   12d1e:	|   move.l 1b5aa <DOSBase>,d0
   12d24:	|   movea.l d0,a6
   12d26:	|   move.l 14(sp),d1
   12d2a:	|   jsr -36(a6)
   12d2e:	|   move.l d0,10(sp)
	}
	return retval;
   12d32:	\-> move.b 35(sp),d0
   12d36:	    move.l (sp)+,d2
   12d38:	    movea.l (sp)+,a6
   12d3a:	    lea 28(sp),sp
   12d3e:	    rts

00012d40 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   12d40:	   /-- bra.s 12d4a <strcmp+0xa>
    {
        s1++;
   12d42:	/--|-> addq.l #1,4(sp)
        s2++;
   12d46:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   12d4a:	|  \-> movea.l 4(sp),a0
   12d4e:	|      move.b (a0),d0
   12d50:	|  /-- beq.s 12d62 <strcmp+0x22>
   12d52:	|  |   movea.l 4(sp),a0
   12d56:	|  |   move.b (a0),d1
   12d58:	|  |   movea.l 8(sp),a0
   12d5c:	|  |   move.b (a0),d0
   12d5e:	|  |   cmp.b d1,d0
   12d60:	\--|-- beq.s 12d42 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   12d62:	   \-> movea.l 4(sp),a0
   12d66:	       move.b (a0),d0
   12d68:	       moveq #0,d1
   12d6a:	       move.b d0,d1
   12d6c:	       movea.l 8(sp),a0
   12d70:	       move.b (a0),d0
   12d72:	       move.b d0,d0
   12d74:	       andi.l #255,d0
   12d7a:	       sub.l d0,d1
   12d7c:	       move.l d1,d0
}
   12d7e:	       rts

00012d80 <strlen>:

long unsigned int strlen (const char *s) 
{  
   12d80:	       subq.l #4,sp
	long unsigned int i = 0;
   12d82:	       clr.l (sp)
	while(s[i]) i++; 
   12d84:	   /-- bra.s 12d88 <strlen+0x8>
   12d86:	/--|-> addq.l #1,(sp)
   12d88:	|  \-> movea.l 8(sp),a0
   12d8c:	|      adda.l (sp),a0
   12d8e:	|      move.b (a0),d0
   12d90:	\----- bne.s 12d86 <strlen+0x6>
	return(i);
   12d92:	       move.l (sp),d0
}
   12d94:	       addq.l #4,sp
   12d96:	       rts

00012d98 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   12d98:	    nop
   12d9a:	/-> move.l 8(sp),d0
   12d9e:	|   move.l d0,d1
   12da0:	|   addq.l #1,d1
   12da2:	|   move.l d1,8(sp)
   12da6:	|   movea.l 4(sp),a0
   12daa:	|   lea 1(a0),a1
   12dae:	|   move.l a1,4(sp)
   12db2:	|   movea.l d0,a1
   12db4:	|   move.b (a1),d0
   12db6:	|   move.b d0,(a0)
   12db8:	|   move.b (a0),d0
   12dba:	\-- bne.s 12d9a <strcpy+0x2>
}
   12dbc:	    nop
   12dbe:	    rts

00012dc0 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   12dc0:	    lea -20(sp),sp
   12dc4:	    move.l a6,-(sp)
   12dc6:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   12dc8:	    move.l 32(sp),-(sp)
   12dcc:	    jsr 12d80 <strlen>
   12dd2:	    addq.l #4,sp
   12dd4:	    move.l d0,d2
   12dd6:	    move.l 36(sp),-(sp)
   12dda:	    jsr 12d80 <strlen>
   12de0:	    addq.l #4,sp
   12de2:	    add.l d2,d0
   12de4:	    move.l d0,d1
   12de6:	    addq.l #1,d1
   12de8:	    move.l d1,20(sp)
   12dec:	    clr.l 16(sp)
   12df0:	    move.l 1b5a2 <SysBase>,d0
   12df6:	    movea.l d0,a6
   12df8:	    move.l 20(sp),d0
   12dfc:	    move.l 16(sp),d1
   12e00:	    jsr -684(a6)
   12e04:	    move.l d0,12(sp)
   12e08:	    move.l 12(sp),d0
   12e0c:	    move.l d0,8(sp)
	char * t = newString;
   12e10:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   12e16:	    nop
   12e18:	/-> move.l 32(sp),d0
   12e1c:	|   move.l d0,d1
   12e1e:	|   addq.l #1,d1
   12e20:	|   move.l d1,32(sp)
   12e24:	|   movea.l 24(sp),a0
   12e28:	|   lea 1(a0),a1
   12e2c:	|   move.l a1,24(sp)
   12e30:	|   movea.l d0,a1
   12e32:	|   move.b (a1),d0
   12e34:	|   move.b d0,(a0)
   12e36:	|   move.b (a0),d0
   12e38:	\-- bne.s 12e18 <joinStrings+0x58>
	t--;
   12e3a:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   12e3e:	    nop
   12e40:	/-> move.l 36(sp),d0
   12e44:	|   move.l d0,d1
   12e46:	|   addq.l #1,d1
   12e48:	|   move.l d1,36(sp)
   12e4c:	|   movea.l 24(sp),a0
   12e50:	|   lea 1(a0),a1
   12e54:	|   move.l a1,24(sp)
   12e58:	|   movea.l d0,a1
   12e5a:	|   move.b (a1),d0
   12e5c:	|   move.b d0,(a0)
   12e5e:	|   move.b (a0),d0
   12e60:	\-- bne.s 12e40 <joinStrings+0x80>

	return newString;
   12e62:	    move.l 8(sp),d0
}
   12e66:	    move.l (sp)+,d2
   12e68:	    movea.l (sp)+,a6
   12e6a:	    lea 20(sp),sp
   12e6e:	    rts

00012e70 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   12e70:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   12e74:	       moveq #10,d0
   12e76:	       cmp.l 28(sp),d0
   12e7a:	   /-- bne.s 12e98 <itoa+0x28>
   12e7c:	   |   tst.l 20(sp)
   12e80:	   +-- bge.s 12e98 <itoa+0x28>
        *str++ = '-';
   12e82:	   |   move.l 24(sp),d0
   12e86:	   |   move.l d0,d1
   12e88:	   |   addq.l #1,d1
   12e8a:	   |   move.l d1,24(sp)
   12e8e:	   |   movea.l d0,a0
   12e90:	   |   move.b #45,(a0)
        value *= -1;
   12e94:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   12e98:	   \-> move.l 24(sp),12(sp)
   12e9e:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   12ea4:	   /-> move.l 20(sp),d0
   12ea8:	   |   move.l 28(sp),-(sp)
   12eac:	   |   move.l d0,-(sp)
   12eae:	   |   jsr 168ac <__modsi3>
   12eb4:	   |   addq.l #8,sp
   12eb6:	   |   movea.l d0,a1
   12eb8:	   |   move.l 12(sp),d0
   12ebc:	   |   move.l d0,d1
   12ebe:	   |   addq.l #1,d1
   12ec0:	   |   move.l d1,12(sp)
   12ec4:	   |   lea 18a1e <PutChar+0x2108>,a0
   12eca:	   |   move.b (0,a1,a0.l),d1
   12ece:	   |   movea.l d0,a0
   12ed0:	   |   move.b d1,(a0)
        value /= base;
   12ed2:	   |   move.l 28(sp),-(sp)
   12ed6:	   |   move.l 24(sp),-(sp)
   12eda:	   |   jsr 1687e <__divsi3>
   12ee0:	   |   addq.l #8,sp
   12ee2:	   |   move.l d0,20(sp)
    } while (value);
   12ee6:	   \-- bne.s 12ea4 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   12ee8:	       move.l 12(sp),d0
   12eec:	       move.l d0,d1
   12eee:	       subq.l #1,d1
   12ef0:	       move.l d1,12(sp)
   12ef4:	       movea.l d0,a0
   12ef6:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   12ef8:	       move.l 4(sp),8(sp)
   12efe:	   /-- bra.s 12f24 <itoa+0xb4>
        char temp = *low;
   12f00:	/--|-> movea.l 8(sp),a0
   12f04:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   12f08:	|  |   movea.l 12(sp),a0
   12f0c:	|  |   move.b (a0),d0
   12f0e:	|  |   movea.l 8(sp),a0
   12f12:	|  |   move.b d0,(a0)
        *ptr = temp;
   12f14:	|  |   movea.l 12(sp),a0
   12f18:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   12f1c:	|  |   addq.l #1,8(sp)
   12f20:	|  |   subq.l #1,12(sp)
   12f24:	|  \-> move.l 8(sp),d0
   12f28:	|      cmp.l 12(sp),d0
   12f2c:	\----- bcs.s 12f00 <itoa+0x90>
    }
    return rc;
   12f2e:	       move.l 4(sp),d0
}
   12f32:	       lea 16(sp),sp
   12f36:	       rts

00012f38 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   12f38:	                            lea -40(sp),sp
   12f3c:	                            move.l d2,-(sp)
    char* s = str;
   12f3e:	                            move.l 48(sp),40(sp)
    const char* p = format;
   12f44:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   12f4a:	   /----------------------- bra.w 1307e <vsprintf2+0x146>
        if (*p == '%') {
   12f4e:	/--|----------------------> movea.l 36(sp),a0
   12f52:	|  |                        move.b (a0),d0
   12f54:	|  |                        cmpi.b #37,d0
   12f58:	|  |  /-------------------- bne.w 13064 <vsprintf2+0x12c>
            switch (*++p) {
   12f5c:	|  |  |                     addq.l #1,36(sp)
   12f60:	|  |  |                     movea.l 36(sp),a0
   12f64:	|  |  |                     move.b (a0),d0
   12f66:	|  |  |                     ext.w d0
   12f68:	|  |  |                     movea.w d0,a0
   12f6a:	|  |  |                     moveq #115,d0
   12f6c:	|  |  |                     cmp.l a0,d0
   12f6e:	|  |  |           /-------- beq.s 12fe6 <vsprintf2+0xae>
   12f70:	|  |  |           |         moveq #115,d1
   12f72:	|  |  |           |         cmp.l a0,d1
   12f74:	|  |  |  /--------|-------- blt.w 1304c <vsprintf2+0x114>
   12f78:	|  |  |  |        |         moveq #99,d2
   12f7a:	|  |  |  |        |         cmp.l a0,d2
   12f7c:	|  |  |  |  /-----|-------- beq.w 13024 <vsprintf2+0xec>
   12f80:	|  |  |  |  |     |         moveq #100,d0
   12f82:	|  |  |  |  |     |         cmp.l a0,d0
   12f84:	|  |  |  +--|-----|-------- bne.w 1304c <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   12f88:	|  |  |  |  |     |         addq.l #4,56(sp)
   12f8c:	|  |  |  |  |     |         movea.l 56(sp),a0
   12f90:	|  |  |  |  |     |         move.l (a0),d0
   12f92:	|  |  |  |  |     |         move.l d0,d1
   12f94:	|  |  |  |  |     |         subq.l #1,d1
   12f96:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   12f9a:	|  |  |  |  |     |         pea a <_start+0xa>
   12f9e:	|  |  |  |  |     |         lea 8(sp),a0
   12fa2:	|  |  |  |  |     |         move.l a0,-(sp)
   12fa4:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   12fa8:	|  |  |  |  |     |         jsr 12e70 <itoa>
   12fae:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   12fb2:	|  |  |  |  |     |         lea 44(sp),a0
   12fb6:	|  |  |  |  |     |         lea -40(a0),a0
   12fba:	|  |  |  |  |     |         move.l a0,28(sp)
   12fbe:	|  |  |  |  |     |     /-- bra.s 12fda <vsprintf2+0xa2>
                        *s++ = *b;
   12fc0:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   12fc4:	|  |  |  |  |     |  |  |   move.l d0,d1
   12fc6:	|  |  |  |  |     |  |  |   addq.l #1,d1
   12fc8:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   12fcc:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   12fd0:	|  |  |  |  |     |  |  |   move.b (a0),d1
   12fd2:	|  |  |  |  |     |  |  |   movea.l d0,a0
   12fd4:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   12fd6:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   12fda:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   12fde:	|  |  |  |  |     |  |      move.b (a0),d0
   12fe0:	|  |  |  |  |     |  \----- bne.s 12fc0 <vsprintf2+0x88>
                    }
                    break;
   12fe2:	|  |  |  |  |  /--|-------- bra.w 1307a <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   12fe6:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   12fea:	|  |  |  |  |  |            movea.l 56(sp),a0
   12fee:	|  |  |  |  |  |            move.l (a0),d0
   12ff0:	|  |  |  |  |  |            move.l d0,d1
   12ff2:	|  |  |  |  |  |            subq.l #1,d1
   12ff4:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   12ff8:	|  |  |  |  |  |        /-- bra.s 1301a <vsprintf2+0xe2>
                        *s++ = *sval++;
   12ffa:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   12ffe:	|  |  |  |  |  |     |  |   move.l d1,d2
   13000:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13002:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   13006:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   1300a:	|  |  |  |  |  |     |  |   move.l d0,d2
   1300c:	|  |  |  |  |  |     |  |   addq.l #1,d2
   1300e:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   13012:	|  |  |  |  |  |     |  |   movea.l d1,a0
   13014:	|  |  |  |  |  |     |  |   move.b (a0),d1
   13016:	|  |  |  |  |  |     |  |   movea.l d0,a0
   13018:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   1301a:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   1301e:	|  |  |  |  |  |     |      move.b (a0),d0
   13020:	|  |  |  |  |  |     \----- bne.s 12ffa <vsprintf2+0xc2>
                    }
                    break;
   13022:	|  |  |  |  |  +----------- bra.s 1307a <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   13024:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   13028:	|  |  |  |     |            movea.l 56(sp),a0
   1302c:	|  |  |  |     |            move.l (a0),d0
   1302e:	|  |  |  |     |            move.l d0,d1
   13030:	|  |  |  |     |            subq.l #1,d1
   13032:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   13036:	|  |  |  |     |            move.l 40(sp),d0
   1303a:	|  |  |  |     |            move.l d0,d2
   1303c:	|  |  |  |     |            addq.l #1,d2
   1303e:	|  |  |  |     |            move.l d2,40(sp)
   13042:	|  |  |  |     |            move.l 24(sp),d1
   13046:	|  |  |  |     |            movea.l d0,a0
   13048:	|  |  |  |     |            move.b d1,(a0)
                    break;
   1304a:	|  |  |  |     +----------- bra.s 1307a <vsprintf2+0x142>
                default:
                    *s++ = *p;
   1304c:	|  |  |  \-----|----------> move.l 40(sp),d0
   13050:	|  |  |        |            move.l d0,d1
   13052:	|  |  |        |            addq.l #1,d1
   13054:	|  |  |        |            move.l d1,40(sp)
   13058:	|  |  |        |            movea.l 36(sp),a0
   1305c:	|  |  |        |            move.b (a0),d1
   1305e:	|  |  |        |            movea.l d0,a0
   13060:	|  |  |        |            move.b d1,(a0)
                    break;
   13062:	|  |  |        +----------- bra.s 1307a <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   13064:	|  |  \--------|----------> move.l 40(sp),d0
   13068:	|  |           |            move.l d0,d1
   1306a:	|  |           |            addq.l #1,d1
   1306c:	|  |           |            move.l d1,40(sp)
   13070:	|  |           |            movea.l 36(sp),a0
   13074:	|  |           |            move.b (a0),d1
   13076:	|  |           |            movea.l d0,a0
   13078:	|  |           |            move.b d1,(a0)
        }
        p++;
   1307a:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   1307e:	|  \----------------------> movea.l 36(sp),a0
   13082:	|                           move.b (a0),d0
   13084:	\-------------------------- bne.w 12f4e <vsprintf2+0x16>
    }
    *s = '\0';
   13088:	                            movea.l 40(sp),a0
   1308c:	                            clr.b (a0)
    return s - str;
   1308e:	                            move.l 40(sp),d0
   13092:	                            sub.l 48(sp),d0
}
   13096:	                            move.l (sp)+,d2
   13098:	                            lea 40(sp),sp
   1309c:	                            rts

0001309e <sprintf>:

int sprintf(char* str, const char* format, ...) {
   1309e:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   130a0:	moveq #16,d0
   130a2:	add.l sp,d0
   130a4:	move.l d0,d1
   130a6:	addq.l #4,d1
   130a8:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   130ac:	move.l 16(sp),d0
   130b0:	move.l 4(sp),-(sp)
   130b4:	move.l d0,-(sp)
   130b6:	move.l 20(sp),-(sp)
   130ba:	jsr 12f38 <vsprintf2>
   130c0:	lea 12(sp),sp
   130c4:	move.l d0,(sp)
    va_end(args);
   130c6:	clr.l 4(sp)

    return done;
   130ca:	move.l (sp),d0
}
   130cc:	addq.l #8,sp
   130ce:	rts

000130d0 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   130d0:	       lea -20(sp),sp
   130d4:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   130d6:	       moveq #12,d0
   130d8:	       move.l d0,20(sp)
   130dc:	       clr.l 16(sp)
   130e0:	       move.l 1b5a2 <SysBase>,d0
   130e6:	       movea.l d0,a6
   130e8:	       move.l 20(sp),d0
   130ec:	       move.l 16(sp),d1
   130f0:	       jsr -684(a6)
   130f4:	       move.l d0,12(sp)
   130f8:	       move.l 12(sp),d0
   130fc:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   13100:	   /-- bne.s 13106 <addVarToStack+0x36>
   13102:	   |   clr.w d0
   13104:	/--|-- bra.s 1314e <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   13106:	|  \-> move.l 8(sp),d0
   1310a:	|      move.l d0,-(sp)
   1310c:	|      move.l 32(sp),-(sp)
   13110:	|      jsr 13c32 <copyMain>
   13116:	|      addq.l #8,sp
   13118:	|      tst.w d0
   1311a:	|  /-- bne.s 13136 <addVarToStack+0x66>
        FreeVec(newStack);
   1311c:	|  |   move.l 8(sp),4(sp)
   13122:	|  |   move.l 1b5a2 <SysBase>,d0
   13128:	|  |   movea.l d0,a6
   1312a:	|  |   movea.l 4(sp),a1
   1312e:	|  |   jsr -690(a6)
        return FALSE;
   13132:	|  |   clr.w d0
   13134:	+--|-- bra.s 1314e <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   13136:	|  \-> movea.l 32(sp),a0
   1313a:	|      move.l (a0),d0
   1313c:	|      movea.l 8(sp),a0
   13140:	|      move.l d0,8(a0)
    *thisStack = newStack;
   13144:	|      movea.l 32(sp),a0
   13148:	|      move.l 8(sp),(a0)
    return TRUE;
   1314c:	|      moveq #1,d0
}
   1314e:	\----> movea.l (sp)+,a6
   13150:	       lea 20(sp),sp
   13154:	       rts

00013156 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   13156:	       lea -16(sp),sp
   1315a:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   1315c:	       moveq #12,d0
   1315e:	       move.l d0,16(sp)
   13162:	       clr.l 12(sp)
   13166:	       move.l 1b5a2 <SysBase>,d0
   1316c:	       movea.l d0,a6
   1316e:	       move.l 16(sp),d0
   13172:	       move.l 12(sp),d1
   13176:	       jsr -684(a6)
   1317a:	       move.l d0,8(sp)
   1317e:	       move.l 8(sp),d0
   13182:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   13186:	   /-- bne.s 1318c <addVarToStackQuick+0x36>
   13188:	   |   clr.w d0
   1318a:	/--|-- bra.s 131c2 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   1318c:	|  \-> move.l 4(sp),d0
   13190:	|      pea 8 <_start+0x8>
   13194:	|      move.l 28(sp),-(sp)
   13198:	|      move.l d0,-(sp)
   1319a:	|      jsr 15f7a <memcpy>
   131a0:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   131a4:	|      movea.l 24(sp),a0
   131a8:	|      clr.l (a0)

    newStack->next = *thisStack;
   131aa:	|      movea.l 28(sp),a0
   131ae:	|      move.l (a0),d0
   131b0:	|      movea.l 4(sp),a0
   131b4:	|      move.l d0,8(a0)
    *thisStack = newStack;
   131b8:	|      movea.l 28(sp),a0
   131bc:	|      move.l 4(sp),(a0)
    return TRUE;
   131c0:	|      moveq #1,d0
}
   131c2:	\----> movea.l (sp)+,a6
   131c4:	       lea 16(sp),sp
   131c8:	       rts

000131ca <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   131ca:	       lea -16(sp),sp
   131ce:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   131d0:	       movea.l 24(sp),a0
   131d4:	       move.l (a0),d0
   131d6:	       moveq #1,d1
   131d8:	       cmp.l d0,d1
   131da:	   /-- bne.s 13204 <addVariablesInSecond+0x3a>
   131dc:	   |   movea.l 28(sp),a0
   131e0:	   |   move.l (a0),d0
   131e2:	   |   moveq #1,d1
   131e4:	   |   cmp.l d0,d1
   131e6:	   +-- bne.s 13204 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   131e8:	   |   movea.l 28(sp),a0
   131ec:	   |   move.l 4(a0),d1
   131f0:	   |   movea.l 24(sp),a0
   131f4:	   |   move.l 4(a0),d0
   131f8:	   |   add.l d1,d0
   131fa:	   |   movea.l 28(sp),a0
   131fe:	   |   move.l d0,4(a0)
   13202:	/--|-- bra.s 1327e <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   13204:	|  \-> move.l 24(sp),-(sp)
   13208:	|      jsr 13e6a <getTextFromAnyVar>
   1320e:	|      addq.l #4,sp
   13210:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   13214:	|      move.l 28(sp),-(sp)
   13218:	|      jsr 13e6a <getTextFromAnyVar>
   1321e:	|      addq.l #4,sp
   13220:	|      move.l d0,12(sp)

		unlinkVar(var2);
   13224:	|      move.l 28(sp),-(sp)
   13228:	|      jsr 13ae2 <unlinkVar>
   1322e:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   13230:	|      move.l 12(sp),-(sp)
   13234:	|      move.l 20(sp),-(sp)
   13238:	|      jsr 12dc0 <joinStrings>
   1323e:	|      addq.l #8,sp
   13240:	|      movea.l 28(sp),a0
   13244:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   13248:	|      movea.l 28(sp),a0
   1324c:	|      moveq #3,d0
   1324e:	|      move.l d0,(a0)
		FreeVec(string1);
   13250:	|      move.l 16(sp),8(sp)
   13256:	|      move.l 1b5a2 <SysBase>,d0
   1325c:	|      movea.l d0,a6
   1325e:	|      movea.l 8(sp),a1
   13262:	|      jsr -690(a6)
		FreeVec(string2);
   13266:	|      move.l 12(sp),4(sp)
   1326c:	|      move.l 1b5a2 <SysBase>,d0
   13272:	|      movea.l d0,a6
   13274:	|      movea.l 4(sp),a1
   13278:	|      jsr -690(a6)
	}
}
   1327c:	|      nop
   1327e:	\----> nop
   13280:	       movea.l (sp)+,a6
   13282:	       lea 16(sp),sp
   13286:	       rts

00013288 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   13288:	movea.l 8(sp),a0
   1328c:	move.l 4(a0),-(sp)
   13290:	move.l (a0),-(sp)
   13292:	movea.l 12(sp),a0
   13296:	move.l 4(a0),-(sp)
   1329a:	move.l (a0),-(sp)
   1329c:	jsr 132be <compareVars>
   132a2:	lea 16(sp),sp
   132a6:	move.l d0,-(sp)
   132a8:	pea 1 <_start+0x1>
   132ac:	move.l 16(sp),-(sp)
   132b0:	jsr 14186 <setVariable>
   132b6:	lea 12(sp),sp
}
   132ba:	nop
   132bc:	rts

000132be <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   132be:	       subq.l #4,sp
	int re = 0;
   132c0:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   132c2:	       move.l 8(sp),d1
   132c6:	       move.l 16(sp),d0
   132ca:	       cmp.l d1,d0
   132cc:	/----- bne.w 13394 <compareVars+0xd6>
		switch (var1.varType) {
   132d0:	|      move.l 8(sp),d0
   132d4:	|      moveq #9,d1
   132d6:	|      cmp.l d0,d1
   132d8:	|  /-- bcs.w 1337c <compareVars+0xbe>
   132dc:	|  |   add.l d0,d0
   132de:	|  |   movea.l d0,a0
   132e0:	|  |   adda.l #78572,a0
   132e6:	|  |   move.w (a0),d0
   132e8:	|  |   jmp (132ec <compareVars+0x2e>,pc,d0.w)
   132ec:	|  |   ori.b #-112,(a4)
   132f0:	|  |   ori.l #5243024,(a0)
   132f6:	|  |   ori.l #7733392,(a0)
   132fc:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   13302:	|  |   move.l d0,(sp)
			break;
   13304:	+--|-- bra.w 13394 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   13308:	|  |   move.l 12(sp),d1
   1330c:	|  |   move.l 20(sp),d0
   13310:	|  |   cmp.l d1,d0
   13312:	|  |   seq d0
   13314:	|  |   neg.b d0
   13316:	|  |   move.b d0,d0
   13318:	|  |   andi.l #255,d0
   1331e:	|  |   move.l d0,(sp)
			break;
   13320:	+--|-- bra.s 13394 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   13322:	|  |   move.l 12(sp),d1
   13326:	|  |   move.l 20(sp),d0
   1332a:	|  |   cmp.l d1,d0
   1332c:	|  |   seq d0
   1332e:	|  |   neg.b d0
   13330:	|  |   move.b d0,d0
   13332:	|  |   andi.l #255,d0
   13338:	|  |   move.l d0,(sp)
			break;
   1333a:	+--|-- bra.s 13394 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   1333c:	|  |   move.l 20(sp),d1
   13340:	|  |   move.l 12(sp),d0
   13344:	|  |   move.l d1,-(sp)
   13346:	|  |   move.l d0,-(sp)
   13348:	|  |   jsr 12d40 <strcmp>
   1334e:	|  |   addq.l #8,sp
   13350:	|  |   tst.l d0
   13352:	|  |   seq d0
   13354:	|  |   neg.b d0
   13356:	|  |   move.b d0,d0
   13358:	|  |   andi.l #255,d0
   1335e:	|  |   move.l d0,(sp)
			break;
   13360:	+--|-- bra.s 13394 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   13362:	|  |   move.l 12(sp),d1
   13366:	|  |   move.l 20(sp),d0
   1336a:	|  |   cmp.l d1,d0
   1336c:	|  |   seq d0
   1336e:	|  |   neg.b d0
   13370:	|  |   move.b d0,d0
   13372:	|  |   andi.l #255,d0
   13378:	|  |   move.l d0,(sp)
			break;
   1337a:	+--|-- bra.s 13394 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   1337c:	|  \-> move.l 12(sp),d1
   13380:	|      move.l 20(sp),d0
   13384:	|      cmp.l d1,d0
   13386:	|      seq d0
   13388:	|      neg.b d0
   1338a:	|      move.b d0,d0
   1338c:	|      andi.l #255,d0
   13392:	|      move.l d0,(sp)
		}
	}
	return re;
   13394:	\----> move.l (sp),d0
}
   13396:	       addq.l #4,sp
   13398:	       rts

0001339a <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   1339a:	             lea -16(sp),sp
   1339e:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   133a0:	             movea.l 28(sp),a0
   133a4:	             moveq #6,d0
   133a6:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   133a8:	             moveq #12,d0
   133aa:	             move.l d0,12(sp)
   133ae:	             clr.l 8(sp)
   133b2:	             move.l 1b5a2 <SysBase>,d0
   133b8:	             movea.l d0,a6
   133ba:	             move.l 12(sp),d0
   133be:	             move.l 8(sp),d1
   133c2:	             jsr -684(a6)
   133c6:	             move.l d0,4(sp)
   133ca:	             move.l 4(sp),d0
   133ce:	             movea.l 28(sp),a0
   133d2:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   133d6:	             movea.l 28(sp),a0
   133da:	             move.l 4(a0),d0
   133de:	         /-- bne.s 133e6 <copyStack+0x4c>
   133e0:	         |   clr.w d0
   133e2:	/--------|-- bra.w 13468 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   133e6:	|        \-> movea.l 28(sp),a0
   133ea:	|            movea.l 4(a0),a0
   133ee:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   133f0:	|            movea.l 28(sp),a0
   133f4:	|            movea.l 4(a0),a0
   133f8:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   133fc:	|            movea.l 28(sp),a0
   13400:	|            movea.l 4(a0),a0
   13404:	|            moveq #1,d0
   13406:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   1340a:	|            movea.l 24(sp),a0
   1340e:	|            movea.l 4(a0),a0
   13412:	|            move.l (a0),16(sp)

	while (a) {
   13416:	|     /----- bra.s 13460 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   13418:	|  /--|----> movea.l 28(sp),a0
   1341c:	|  |  |      move.l 4(a0),d0
   13420:	|  |  |      move.l d0,d1
   13422:	|  |  |      move.l 16(sp),d0
   13426:	|  |  |      move.l d1,-(sp)
   13428:	|  |  |      move.l d0,-(sp)
   1342a:	|  |  |      jsr 130d0 <addVarToStack>
   13430:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   13432:	|  |  |      movea.l 28(sp),a0
   13436:	|  |  |      movea.l 4(a0),a0
   1343a:	|  |  |      move.l 4(a0),d0
   1343e:	|  |  |  /-- bne.s 13456 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   13440:	|  |  |  |   movea.l 28(sp),a0
   13444:	|  |  |  |   movea.l 4(a0),a1
   13448:	|  |  |  |   movea.l 28(sp),a0
   1344c:	|  |  |  |   movea.l 4(a0),a0
   13450:	|  |  |  |   move.l (a1),d0
   13452:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   13456:	|  |  |  \-> movea.l 16(sp),a0
   1345a:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   13460:	|  |  \----> tst.l 16(sp)
   13464:	|  \-------- bne.s 13418 <copyStack+0x7e>
	}

	return TRUE;
   13466:	|            moveq #1,d0
}
   13468:	\----------> movea.l (sp)+,a6
   1346a:	             lea 16(sp),sp
   1346e:	             rts

00013470 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   13470:	                lea -20(sp),sp
   13474:	                move.l a6,-(sp)
   13476:	                move.l 36(sp),d0
   1347a:	                move.w d0,d0
   1347c:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   13480:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   13486:	                clr.l 16(sp)

    while (*huntVar) {
   1348a:	   /----------- bra.s 13508 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   1348c:	/--|----------> movea.l 20(sp),a0
   13490:	|  |            movea.l (a0),a0
   13492:	|  |            movea.l 28(sp),a1
   13496:	|  |            move.l 4(a1),-(sp)
   1349a:	|  |            move.l (a1),-(sp)
   1349c:	|  |            move.l 4(a0),-(sp)
   134a0:	|  |            move.l (a0),-(sp)
   134a2:	|  |            jsr 132be <compareVars>
   134a8:	|  |            lea 16(sp),sp
   134ac:	|  |            tst.l d0
   134ae:	|  |  /-------- beq.s 134fa <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   134b0:	|  |  |         movea.l 20(sp),a0
   134b4:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   134b8:	|  |  |         movea.l 12(sp),a0
   134bc:	|  |  |         move.l 8(a0),d0
   134c0:	|  |  |         movea.l 20(sp),a0
   134c4:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   134c6:	|  |  |         move.l 12(sp),d0
   134ca:	|  |  |         move.l d0,-(sp)
   134cc:	|  |  |         jsr 13ae2 <unlinkVar>
   134d2:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   134d4:	|  |  |         move.l 12(sp),8(sp)
   134da:	|  |  |         move.l 1b5a2 <SysBase>,d0
   134e0:	|  |  |         movea.l d0,a6
   134e2:	|  |  |         movea.l 8(sp),a1
   134e6:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   134ea:	|  |  |         tst.w 6(sp)
   134ee:	|  |  |     /-- bne.s 134f4 <deleteVarFromStack+0x84>
   134f0:	|  |  |     |   moveq #1,d0
   134f2:	|  |  |  /--|-- bra.s 13516 <deleteVarFromStack+0xa6>
            reply++;
   134f4:	|  |  |  |  \-> addq.l #1,16(sp)
   134f8:	|  +--|--|----- bra.s 13508 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   134fa:	|  |  \--|----> movea.l 20(sp),a0
   134fe:	|  |     |      move.l (a0),d0
   13500:	|  |     |      move.l d0,d1
   13502:	|  |     |      addq.l #8,d1
   13504:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   13508:	|  \-----|----> movea.l 20(sp),a0
   1350c:	|        |      move.l (a0),d0
   1350e:	\--------|----- bne.w 1348c <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   13512:	         |      move.l 16(sp),d0
}
   13516:	         \----> movea.l (sp)+,a6
   13518:	                lea 20(sp),sp
   1351c:	                rts

0001351e <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   1351e:	       movea.l 4(sp),a0
   13522:	       move.l 4(a0),d0
   13526:	       cmp.l 8(sp),d0
   1352a:	   /-- bhi.s 13530 <fastArrayGetByIndex+0x12>
   1352c:	   |   moveq #0,d0
   1352e:	/--|-- bra.s 1353e <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   13530:	|  \-> movea.l 4(sp),a0
   13534:	|      move.l (a0),d1
   13536:	|      move.l 8(sp),d0
   1353a:	|      lsl.l #3,d0
   1353c:	|      add.l d1,d0
}
   1353e:	\----> rts

00013540 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   13540:	                lea -32(sp),sp
   13544:	                move.l a6,-(sp)
   13546:	                move.l a2,-(sp)
    struct persona *p = NULL;
   13548:	                clr.l 36(sp)

    switch (thisVar->varType) {
   1354c:	                movea.l 44(sp),a0
   13550:	                move.l (a0),d0
   13552:	                moveq #8,d1
   13554:	                cmp.l d0,d1
   13556:	            /-- beq.s 13564 <getCostumeFromVar+0x24>
   13558:	            |   moveq #9,d1
   1355a:	            |   cmp.l d0,d1
   1355c:	   /--------|-- beq.w 13612 <getCostumeFromVar+0xd2>
   13560:	/--|--------|-- bra.w 1361c <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   13564:	|  |        \-> moveq #8,d0
   13566:	|  |            move.l d0,28(sp)
   1356a:	|  |            clr.l 24(sp)
   1356e:	|  |            move.l 1b5a2 <SysBase>,d0
   13574:	|  |            movea.l d0,a6
   13576:	|  |            move.l 28(sp),d0
   1357a:	|  |            move.l 24(sp),d1
   1357e:	|  |            jsr -684(a6)
   13582:	|  |            move.l d0,20(sp)
   13586:	|  |            move.l 20(sp),d0
   1358a:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   1358e:	|  |        /-- bne.s 13596 <getCostumeFromVar+0x56>
   13590:	|  |        |   moveq #0,d0
   13592:	|  |  /-----|-- bra.w 13646 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   13596:	|  |  |     \-> movea.l 36(sp),a0
   1359a:	|  |  |         moveq #1,d1
   1359c:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   135a0:	|  |  |         moveq #12,d0
   135a2:	|  |  |         move.l d0,16(sp)
   135a6:	|  |  |         clr.l 12(sp)
   135aa:	|  |  |         move.l 1b5a2 <SysBase>,d0
   135b0:	|  |  |         movea.l d0,a6
   135b2:	|  |  |         move.l 16(sp),d0
   135b6:	|  |  |         move.l 12(sp),d1
   135ba:	|  |  |         jsr -684(a6)
   135be:	|  |  |         move.l d0,8(sp)
   135c2:	|  |  |         move.l 8(sp),d0
   135c6:	|  |  |         movea.l 36(sp),a0
   135ca:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   135cc:	|  |  |         movea.l 36(sp),a0
   135d0:	|  |  |         move.l (a0),d0
   135d2:	|  |  |     /-- bne.s 135d8 <getCostumeFromVar+0x98>
   135d4:	|  |  |     |   moveq #0,d0
   135d6:	|  |  +-----|-- bra.s 13646 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   135d8:	|  |  |     \-> clr.l 32(sp)
   135dc:	|  |  |     /-- bra.s 13608 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   135de:	|  |  |  /--|-> movea.l 44(sp),a0
   135e2:	|  |  |  |  |   move.l 4(a0),d0
   135e6:	|  |  |  |  |   movea.l 36(sp),a0
   135ea:	|  |  |  |  |   movea.l (a0),a0
   135ec:	|  |  |  |  |   move.l 32(sp),d1
   135f0:	|  |  |  |  |   add.l d1,d1
   135f2:	|  |  |  |  |   add.l d1,d1
   135f4:	|  |  |  |  |   lea (0,a0,d1.l),a2
   135f8:	|  |  |  |  |   move.l d0,-(sp)
   135fa:	|  |  |  |  |   jsr 86b8 <copyAnim>
   13600:	|  |  |  |  |   addq.l #4,sp
   13602:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   13604:	|  |  |  |  |   addq.l #1,32(sp)
   13608:	|  |  |  |  \-> moveq #2,d1
   1360a:	|  |  |  |      cmp.l 32(sp),d1
   1360e:	|  |  |  \----- bge.s 135de <getCostumeFromVar+0x9e>
            }
            break;
   13610:	|  |  |     /-- bra.s 13642 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   13612:	|  \--|-----|-> movea.l 44(sp),a0
   13616:	|     |     |   move.l 4(a0),d0
   1361a:	|     +-----|-- bra.s 13646 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   1361c:	\-----|-----|-> movea.l 44(sp),a0
   13620:	      |     |   move.l (a0),d0
   13622:	      |     |   add.l d0,d0
   13624:	      |     |   movea.l d0,a1
   13626:	      |     |   adda.l d0,a1
   13628:	      |     |   lea 1b480 <typeName>,a0
   1362e:	      |     |   move.l (0,a1,a0.l),d0
   13632:	      |     |   move.l d0,-(sp)
   13634:	      |     |   pea 18a90 <PutChar+0x217a>
   1363a:	      |     |   jsr 15fc6 <KPrintF>
   13640:	      |     |   addq.l #8,sp
    }

    return p;
   13642:	      |     \-> move.l 36(sp),d0
}
   13646:	      \-------> movea.l (sp)+,a2
   13648:	                movea.l (sp)+,a6
   1364a:	                lea 32(sp),sp
   1364e:	                rts

00013650 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   13650:	                lea -96(sp),sp
   13654:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   13658:	                move.l 116(sp),-(sp)
   1365c:	                pea 18ac8 <line.c.05397aaf+0x17>
   13662:	                jsr 12dc0 <joinStrings>
   13668:	                addq.l #8,sp
   1366a:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   1366e:	            /-- bne.s 13676 <getSavedGamesStack+0x26>
   13670:	            |   clr.w d0
   13672:	/-----------|-- bra.w 1388a <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   13676:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   1367a:	|               move.l #101066,98(sp)
   13682:	|               moveq #-2,d0
   13684:	|               move.l d0,94(sp)
   13688:	|               move.l 1b5aa <DOSBase>,d0
   1368e:	|               movea.l d0,a6
   13690:	|               move.l 98(sp),d1
   13694:	|               move.l 94(sp),d2
   13698:	|               jsr -84(a6)
   1369c:	|               move.l d0,90(sp)
   136a0:	|               move.l 90(sp),d0
   136a4:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   136a8:	|           /-- bne.s 136b0 <getSavedGamesStack+0x60>
   136aa:	|           |   clr.w d0
   136ac:	+-----------|-- bra.w 1388a <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   136b0:	|           \-> move.l #260,82(sp)
   136b8:	|               move.l #65536,78(sp)
   136c0:	|               move.l 1b5a2 <SysBase>,d0
   136c6:	|               movea.l d0,a6
   136c8:	|               move.l 82(sp),d0
   136cc:	|               move.l 78(sp),d1
   136d0:	|               jsr -684(a6)
   136d4:	|               move.l d0,74(sp)
   136d8:	|               move.l 74(sp),d0
   136dc:	|               move.l d0,70(sp)
	if (!fib) {
   136e0:	|           /-- bne.s 136fe <getSavedGamesStack+0xae>
		UnLock(dirLock);
   136e2:	|           |   move.l 86(sp),22(sp)
   136e8:	|           |   move.l 1b5aa <DOSBase>,d0
   136ee:	|           |   movea.l d0,a6
   136f0:	|           |   move.l 22(sp),d1
   136f4:	|           |   jsr -90(a6)
		return FALSE;
   136f8:	|           |   clr.w d0
   136fa:	+-----------|-- bra.w 1388a <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   136fe:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   13702:	|               move.l 86(sp),66(sp)
   13708:	|               move.l 70(sp),62(sp)
   1370e:	|               move.l 1b5aa <DOSBase>,d0
   13714:	|               movea.l d0,a6
   13716:	|               move.l 66(sp),d1
   1371a:	|               move.l 62(sp),d2
   1371e:	|               jsr -102(a6)
   13722:	|               move.l d0,58(sp)
   13726:	|               move.l 58(sp),d0
   1372a:	|  /----------- beq.w 1383e <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   1372e:	|  |        /-- bra.w 1380a <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   13732:	|  |  /-----|-> move.l 70(sp),d2
   13736:	|  |  |     |   addq.l #8,d2
   13738:	|  |  |     |   move.l 70(sp),d0
   1373c:	|  |  |     |   addq.l #8,d0
   1373e:	|  |  |     |   move.l d0,-(sp)
   13740:	|  |  |     |   jsr 12d80 <strlen>
   13746:	|  |  |     |   addq.l #4,sp
   13748:	|  |  |     |   move.l d0,d3
   1374a:	|  |  |     |   move.l 116(sp),-(sp)
   1374e:	|  |  |     |   jsr 12d80 <strlen>
   13754:	|  |  |     |   addq.l #4,sp
   13756:	|  |  |     |   move.l d3,d1
   13758:	|  |  |     |   sub.l d0,d1
   1375a:	|  |  |     |   move.l d2,d0
   1375c:	|  |  |     |   add.l d1,d0
   1375e:	|  |  |     |   move.l 116(sp),-(sp)
   13762:	|  |  |     |   move.l d0,-(sp)
   13764:	|  |  |     |   jsr 12d40 <strcmp>
   1376a:	|  |  |     |   addq.l #8,sp
   1376c:	|  |  |     |   tst.l d0
   1376e:	|  |  |     +-- bne.w 1380a <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   13772:	|  |  |     |   move.l 70(sp),d0
   13776:	|  |  |     |   addq.l #8,d0
   13778:	|  |  |     |   move.l d0,-(sp)
   1377a:	|  |  |     |   jsr 12d80 <strlen>
   13780:	|  |  |     |   addq.l #4,sp
   13782:	|  |  |     |   move.l d0,d2
   13784:	|  |  |     |   move.l 116(sp),-(sp)
   13788:	|  |  |     |   jsr 12d80 <strlen>
   1378e:	|  |  |     |   addq.l #4,sp
   13790:	|  |  |     |   move.l d0,d1
   13792:	|  |  |     |   move.l d2,d0
   13794:	|  |  |     |   sub.l d1,d0
   13796:	|  |  |     |   movea.l 70(sp),a0
   1379a:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   1379e:	|  |  |     |   move.l 70(sp),d0
   137a2:	|  |  |     |   addq.l #8,d0
   137a4:	|  |  |     |   move.l d0,-(sp)
   137a6:	|  |  |     |   jsr 118 <decodeFilename>
   137ac:	|  |  |     |   addq.l #4,sp
   137ae:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   137b2:	|  |  |     |   move.l 42(sp),-(sp)
   137b6:	|  |  |     |   lea 18(sp),a0
   137ba:	|  |  |     |   move.l a0,-(sp)
   137bc:	|  |  |     |   jsr 13ab6 <makeTextVar>
   137c2:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   137c4:	|  |  |     |   move.l 42(sp),38(sp)
   137ca:	|  |  |     |   move.l 1b5a2 <SysBase>,d0
   137d0:	|  |  |     |   movea.l d0,a6
   137d2:	|  |  |     |   movea.l 38(sp),a1
   137d6:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   137da:	|  |  |     |   move.l 112(sp),d0
   137de:	|  |  |     |   move.l d0,-(sp)
   137e0:	|  |  |     |   lea 18(sp),a0
   137e4:	|  |  |     |   move.l a0,-(sp)
   137e6:	|  |  |     |   jsr 130d0 <addVarToStack>
   137ec:	|  |  |     |   addq.l #8,sp
   137ee:	|  |  |     |   tst.w d0
   137f0:	|  |  |  /--|-- beq.s 13842 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   137f2:	|  |  |  |  |   movea.l 112(sp),a0
   137f6:	|  |  |  |  |   move.l 4(a0),d0
   137fa:	|  |  |  |  +-- bne.s 1380a <getSavedGamesStack+0x1ba>
   137fc:	|  |  |  |  |   movea.l 112(sp),a0
   13800:	|  |  |  |  |   move.l (a0),d0
   13802:	|  |  |  |  |   movea.l 112(sp),a0
   13806:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   1380a:	|  |  |  |  \-> move.l 86(sp),54(sp)
   13810:	|  |  |  |      move.l 70(sp),50(sp)
   13816:	|  |  |  |      move.l 1b5aa <DOSBase>,d0
   1381c:	|  |  |  |      movea.l d0,a6
   1381e:	|  |  |  |      move.l 54(sp),d1
   13822:	|  |  |  |      move.l 50(sp),d2
   13826:	|  |  |  |      jsr -108(a6)
   1382a:	|  |  |  |      move.l d0,46(sp)
   1382e:	|  |  |  |      move.l 46(sp),d0
   13832:	|  |  \--|----- bne.w 13732 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   13836:	|  |     |      move.w #1,106(sp)
   1383c:	|  |     |  /-- bra.s 13844 <getSavedGamesStack+0x1f4>
	}

cleanup:
   1383e:	|  \-----|--|-> nop
   13840:	|        |  +-- bra.s 13844 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   13842:	|        \--|-> nop
	FreeVec(fib);
   13844:	|           \-> move.l 70(sp),34(sp)
   1384a:	|               move.l 1b5a2 <SysBase>,d0
   13850:	|               movea.l d0,a6
   13852:	|               movea.l 34(sp),a1
   13856:	|               jsr -690(a6)
	UnLock(dirLock);
   1385a:	|               move.l 86(sp),30(sp)
   13860:	|               move.l 1b5aa <DOSBase>,d0
   13866:	|               movea.l d0,a6
   13868:	|               move.l 30(sp),d1
   1386c:	|               jsr -90(a6)
	FreeVec(pattern);
   13870:	|               move.l 102(sp),26(sp)
   13876:	|               move.l 1b5a2 <SysBase>,d0
   1387c:	|               movea.l d0,a6
   1387e:	|               movea.l 26(sp),a1
   13882:	|               jsr -690(a6)
	return result;
   13886:	|               move.w 106(sp),d0
}
   1388a:	\-------------> movem.l (sp)+,d2-d3/a6
   1388e:	                lea 96(sp),sp
   13892:	                rts

00013894 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   13894:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   13896:	       movea.l 20(sp),a0
   1389a:	       move.l (a0),d0
   1389c:	       cmp.l 16(sp),d0
   138a0:	/----- beq.s 13904 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   138a2:	|      move.l 16(sp),d0
   138a6:	|      add.l d0,d0
   138a8:	|      movea.l d0,a1
   138aa:	|      adda.l d0,a1
   138ac:	|      lea 1b480 <typeName>,a0
   138b2:	|      move.l (0,a1,a0.l),d0
   138b6:	|      move.l d0,-(sp)
   138b8:	|      pea 18acc <line.c.05397aaf+0x1b>
   138be:	|      jsr 12dc0 <joinStrings>
   138c4:	|      addq.l #8,sp
   138c6:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   138ca:	|      movea.l 20(sp),a0
   138ce:	|      move.l (a0),d0
   138d0:	|      add.l d0,d0
   138d2:	|      movea.l d0,a1
   138d4:	|      adda.l d0,a1
   138d6:	|      lea 1b480 <typeName>,a0
   138dc:	|      move.l (0,a1,a0.l),d0
   138e0:	|      move.l d0,-(sp)
   138e2:	|      pea 18b0e <line.c.05397aaf+0x5d>
   138e8:	|      jsr 12dc0 <joinStrings>
   138ee:	|      addq.l #8,sp
   138f0:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   138f2:	|      move.l (sp),-(sp)
   138f4:	|      move.l 8(sp),-(sp)
   138f8:	|      jsr 15fc6 <KPrintF>
   138fe:	|      addq.l #8,sp

		return FALSE;
   13900:	|      clr.w d0
   13902:	|  /-- bra.s 13914 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   13904:	\--|-> movea.l 20(sp),a0
   13908:	   |   move.l 4(a0),d0
   1390c:	   |   movea.l 12(sp),a0
   13910:	   |   move.l d0,(a0)
	return TRUE;
   13912:	   |   moveq #1,d0
}
   13914:	   \-> addq.l #8,sp
   13916:	       rts

00013918 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   13918:	move.l 8(sp),-(sp)
   1391c:	jsr 5ccc <getNumberedString>
   13922:	addq.l #4,sp
   13924:	move.l d0,-(sp)
   13926:	move.l 8(sp),-(sp)
   1392a:	jsr 13ab6 <makeTextVar>
   13930:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   13932:	movea.l 4(sp),a0
   13936:	move.l 4(a0),d0
   1393a:	sne d0
   1393c:	neg.b d0
   1393e:	move.b d0,d0
   13940:	andi.w #255,d0
}
   13944:	rts

00013946 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   13946:	          subq.l #8,sp
    int size = stackSize(stacky);
   13948:	          move.l 16(sp),-(sp)
   1394c:	          jsr 141f4 <stackSize>
   13952:	          addq.l #4,sp
   13954:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   13958:	          move.l 4(sp),-(sp)
   1395c:	          move.l 16(sp),-(sp)
   13960:	          jsr 139b0 <makeFastArraySize>
   13966:	          addq.l #8,sp
   13968:	          tst.w d0
   1396a:	      /-- bne.s 13970 <makeFastArrayFromStack+0x2a>
   1396c:	      |   clr.w d0
   1396e:	/-----|-- bra.s 139ac <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   13970:	|     \-> movea.l 16(sp),a0
   13974:	|         move.l (a0),(sp)
    size = 0;
   13976:	|         clr.l 4(sp)
    while (allV) {
   1397a:	|     /-- bra.s 139a6 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   1397c:	|  /--|-> movea.l 12(sp),a0
   13980:	|  |  |   movea.l 4(a0),a0
   13984:	|  |  |   move.l (a0),d1
   13986:	|  |  |   move.l 4(sp),d0
   1398a:	|  |  |   lsl.l #3,d0
   1398c:	|  |  |   add.l d0,d1
   1398e:	|  |  |   move.l (sp),d0
   13990:	|  |  |   move.l d1,-(sp)
   13992:	|  |  |   move.l d0,-(sp)
   13994:	|  |  |   jsr 13c32 <copyMain>
   1399a:	|  |  |   addq.l #8,sp
        size++;
   1399c:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   139a0:	|  |  |   movea.l (sp),a0
   139a2:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   139a6:	|  |  \-> tst.l (sp)
   139a8:	|  \----- bne.s 1397c <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   139aa:	|         moveq #1,d0
}
   139ac:	\-------> addq.l #8,sp
   139ae:	          rts

000139b0 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   139b0:	          lea -28(sp),sp
   139b4:	          move.l a6,-(sp)
    if (size < 0) {
   139b6:	          tst.l 40(sp)
   139ba:	      /-- bge.s 139d0 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   139bc:	      |   pea 18b53 <line.c.05397aaf+0xa2>
   139c2:	      |   jsr 15fc6 <KPrintF>
   139c8:	      |   addq.l #4,sp
		return FALSE;
   139ca:	      |   clr.w d0
   139cc:	/-----|-- bra.w 13aae <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   139d0:	|     \-> move.l 36(sp),-(sp)
   139d4:	|         jsr 13ae2 <unlinkVar>
   139da:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   139dc:	|         movea.l 36(sp),a0
   139e0:	|         moveq #10,d0
   139e2:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   139e4:	|         moveq #12,d0
   139e6:	|         move.l d0,24(sp)
   139ea:	|         clr.l 20(sp)
   139ee:	|         move.l 1b5a2 <SysBase>,d0
   139f4:	|         movea.l d0,a6
   139f6:	|         move.l 24(sp),d0
   139fa:	|         move.l 20(sp),d1
   139fe:	|         jsr -684(a6)
   13a02:	|         move.l d0,16(sp)
   13a06:	|         move.l 16(sp),d0
   13a0a:	|         movea.l 36(sp),a0
   13a0e:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   13a12:	|         movea.l 36(sp),a0
   13a16:	|         move.l 4(a0),d0
   13a1a:	|     /-- bne.s 13a22 <makeFastArraySize+0x72>
   13a1c:	|     |   clr.w d0
   13a1e:	+-----|-- bra.w 13aae <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   13a22:	|     \-> move.l 40(sp),d0
   13a26:	|         lsl.l #3,d0
   13a28:	|         move.l d0,12(sp)
   13a2c:	|         clr.l 8(sp)
   13a30:	|         move.l 1b5a2 <SysBase>,d0
   13a36:	|         movea.l d0,a6
   13a38:	|         move.l 12(sp),d0
   13a3c:	|         move.l 8(sp),d1
   13a40:	|         jsr -684(a6)
   13a44:	|         move.l d0,4(sp)
   13a48:	|         move.l 4(sp),d0
   13a4c:	|         movea.l 36(sp),a0
   13a50:	|         movea.l 4(a0),a0
   13a54:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   13a56:	|         movea.l 36(sp),a0
   13a5a:	|         movea.l 4(a0),a0
   13a5e:	|         move.l (a0),d0
   13a60:	|     /-- bne.s 13a66 <makeFastArraySize+0xb6>
   13a62:	|     |   clr.w d0
   13a64:	+-----|-- bra.s 13aae <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   13a66:	|     \-> clr.l 28(sp)
   13a6a:	|     /-- bra.s 13a86 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   13a6c:	|  /--|-> movea.l 36(sp),a0
   13a70:	|  |  |   movea.l 4(a0),a0
   13a74:	|  |  |   move.l (a0),d1
   13a76:	|  |  |   move.l 28(sp),d0
   13a7a:	|  |  |   lsl.l #3,d0
   13a7c:	|  |  |   movea.l d1,a0
   13a7e:	|  |  |   adda.l d0,a0
   13a80:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   13a82:	|  |  |   addq.l #1,28(sp)
   13a86:	|  |  \-> move.l 28(sp),d0
   13a8a:	|  |      cmp.l 40(sp),d0
   13a8e:	|  \----- blt.s 13a6c <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   13a90:	|         movea.l 36(sp),a0
   13a94:	|         movea.l 4(a0),a0
   13a98:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   13a9e:	|         movea.l 36(sp),a0
   13aa2:	|         movea.l 4(a0),a0
   13aa6:	|         moveq #1,d0
   13aa8:	|         move.l d0,8(a0)
    return TRUE;
   13aac:	|         moveq #1,d0
}
   13aae:	\-------> movea.l (sp)+,a6
   13ab0:	          lea 28(sp),sp
   13ab4:	          rts

00013ab6 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   13ab6:	move.l 4(sp),-(sp)
   13aba:	jsr 13ae2 <unlinkVar>
   13ac0:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   13ac2:	movea.l 4(sp),a0
   13ac6:	moveq #3,d0
   13ac8:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   13aca:	move.l 8(sp),-(sp)
   13ace:	jsr b8 <copyString>
   13ad4:	addq.l #4,sp
   13ad6:	movea.l 4(sp),a0
   13ada:	move.l d0,4(a0)
}
   13ade:	nop
   13ae0:	rts

00013ae2 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   13ae2:	                      lea -16(sp),sp
   13ae6:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   13ae8:	                      movea.l 24(sp),a0
   13aec:	                      move.l (a0),d0
   13aee:	                      moveq #10,d1
   13af0:	                      cmp.l d0,d1
   13af2:	            /-------- beq.w 13baa <unlinkVar+0xc8>
   13af6:	            |         moveq #10,d1
   13af8:	            |         cmp.l d0,d1
   13afa:	/-----------|-------- bcs.w 13c1e <unlinkVar+0x13c>
   13afe:	|           |         moveq #8,d1
   13b00:	|           |         cmp.l d0,d1
   13b02:	|  /--------|-------- beq.w 13c0a <unlinkVar+0x128>
   13b06:	|  |        |         moveq #8,d1
   13b08:	|  |        |         cmp.l d0,d1
   13b0a:	+--|--------|-------- bcs.w 13c1e <unlinkVar+0x13c>
   13b0e:	|  |        |         moveq #3,d1
   13b10:	|  |        |         cmp.l d0,d1
   13b12:	|  |        |     /-- beq.s 13b1e <unlinkVar+0x3c>
   13b14:	|  |        |     |   moveq #6,d1
   13b16:	|  |        |     |   cmp.l d0,d1
   13b18:	|  |        |  /--|-- beq.s 13b44 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   13b1a:	+--|--------|--|--|-- bra.w 13c1e <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   13b1e:	|  |        |  |  \-> movea.l 24(sp),a0
   13b22:	|  |        |  |      move.l 4(a0),4(sp)
   13b28:	|  |        |  |      move.l 1b5a2 <SysBase>,d0
   13b2e:	|  |        |  |      movea.l d0,a6
   13b30:	|  |        |  |      movea.l 4(sp),a1
   13b34:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   13b38:	|  |        |  |      movea.l 24(sp),a0
   13b3c:	|  |        |  |      clr.l 4(a0)
		break;
   13b40:	|  |  /-----|--|----- bra.w 13c28 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   13b44:	|  |  |     |  \----> movea.l 24(sp),a0
   13b48:	|  |  |     |         movea.l 4(a0),a0
   13b4c:	|  |  |     |         move.l 8(a0),d0
   13b50:	|  |  |     |         subq.l #1,d0
   13b52:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   13b56:	|  |  |     |         movea.l 24(sp),a0
   13b5a:	|  |  |     |         movea.l 4(a0),a0
   13b5e:	|  |  |     |         move.l 8(a0),d0
   13b62:	|  |  |  /--|-------- bgt.w 13c22 <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   13b66:	|  |  |  |  |     /-- bra.s 13b7a <unlinkVar+0x98>
   13b68:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   13b6c:	|  |  |  |  |  |  |   move.l 4(a0),d0
   13b70:	|  |  |  |  |  |  |   move.l d0,-(sp)
   13b72:	|  |  |  |  |  |  |   jsr 14218 <trimStack>
   13b78:	|  |  |  |  |  |  |   addq.l #4,sp
   13b7a:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   13b7e:	|  |  |  |  |  |      movea.l 4(a0),a0
   13b82:	|  |  |  |  |  |      move.l (a0),d0
   13b84:	|  |  |  |  |  \----- bne.s 13b68 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   13b86:	|  |  |  |  |         movea.l 24(sp),a0
   13b8a:	|  |  |  |  |         move.l 4(a0),8(sp)
   13b90:	|  |  |  |  |         move.l 1b5a2 <SysBase>,d0
   13b96:	|  |  |  |  |         movea.l d0,a6
   13b98:	|  |  |  |  |         movea.l 8(sp),a1
   13b9c:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   13ba0:	|  |  |  |  |         movea.l 24(sp),a0
   13ba4:	|  |  |  |  |         clr.l 4(a0)
		break;
   13ba8:	|  |  |  +--|-------- bra.s 13c22 <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   13baa:	|  |  |  |  \-------> movea.l 24(sp),a0
   13bae:	|  |  |  |            movea.l 4(a0),a0
   13bb2:	|  |  |  |            move.l 8(a0),d0
   13bb6:	|  |  |  |            subq.l #1,d0
   13bb8:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   13bbc:	|  |  |  |            movea.l 24(sp),a0
   13bc0:	|  |  |  |            movea.l 4(a0),a0
   13bc4:	|  |  |  |            move.l 8(a0),d0
   13bc8:	|  |  |  |        /-- bgt.s 13c26 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   13bca:	|  |  |  |        |   movea.l 24(sp),a0
   13bce:	|  |  |  |        |   movea.l 4(a0),a0
   13bd2:	|  |  |  |        |   move.l (a0),16(sp)
   13bd6:	|  |  |  |        |   move.l 1b5a2 <SysBase>,d0
   13bdc:	|  |  |  |        |   movea.l d0,a6
   13bde:	|  |  |  |        |   movea.l 16(sp),a1
   13be2:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   13be6:	|  |  |  |        |   movea.l 24(sp),a0
   13bea:	|  |  |  |        |   move.l 4(a0),12(sp)
   13bf0:	|  |  |  |        |   move.l 1b5a2 <SysBase>,d0
   13bf6:	|  |  |  |        |   movea.l d0,a6
   13bf8:	|  |  |  |        |   movea.l 12(sp),a1
   13bfc:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   13c00:	|  |  |  |        |   movea.l 24(sp),a0
   13c04:	|  |  |  |        |   clr.l 4(a0)
		break;
   13c08:	|  |  |  |        +-- bra.s 13c26 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   13c0a:	|  \--|--|--------|-> movea.l 24(sp),a0
   13c0e:	|     |  |        |   move.l 4(a0),d0
   13c12:	|     |  |        |   move.l d0,-(sp)
   13c14:	|     |  |        |   jsr 8a84 <deleteAnim>
   13c1a:	|     |  |        |   addq.l #4,sp
		break;
   13c1c:	|     +--|--------|-- bra.s 13c28 <unlinkVar+0x146>
		break;
   13c1e:	\-----|--|--------|-> nop
   13c20:	      +--|--------|-- bra.s 13c28 <unlinkVar+0x146>
		break;
   13c22:	      |  \--------|-> nop
   13c24:	      +-----------|-- bra.s 13c28 <unlinkVar+0x146>
		break;
   13c26:	      |           \-> nop
	}
}
   13c28:	      \-------------> nop
   13c2a:	                      movea.l (sp)+,a6
   13c2c:	                      lea 16(sp),sp
   13c30:	                      rts

00013c32 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   13c32:	       movea.l 4(sp),a0
   13c36:	       move.l (a0),d0
   13c38:	       movea.l 8(sp),a0
   13c3c:	       move.l d0,(a0)
	switch (to->varType) {
   13c3e:	       movea.l 8(sp),a0
   13c42:	       move.l (a0),d0
   13c44:	       moveq #10,d1
   13c46:	       cmp.l d0,d1
   13c48:	/----- bcs.w 13d3a <copyMain+0x108>
   13c4c:	|      add.l d0,d0
   13c4e:	|      movea.l d0,a0
   13c50:	|      adda.l #80988,a0
   13c56:	|      move.w (a0),d0
   13c58:	|      jmp (13c5c <copyMain+0x2a>,pc,d0.w)
   13c5c:	|      .short 0x00da
   13c5e:	|      ori.b #22,(a6)
   13c62:	|      ori.w #22,(a4)
   13c66:	|      ori.b #-126,(a6)
   13c6a:	|      ori.b #-68,(a6)
   13c6e:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   13c76:	|      move.l 4(a0),d0
   13c7a:	|      movea.l 8(sp),a0
   13c7e:	|      move.l d0,4(a0)
		return TRUE;
   13c82:	|      moveq #1,d0
   13c84:	|  /-- bra.w 13d4c <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   13c88:	|  |   movea.l 4(sp),a0
   13c8c:	|  |   move.l 4(a0),d0
   13c90:	|  |   movea.l 8(sp),a0
   13c94:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   13c98:	|  |   movea.l 8(sp),a0
   13c9c:	|  |   movea.l 4(a0),a0
   13ca0:	|  |   move.l 8(a0),d0
   13ca4:	|  |   addq.l #1,d0
   13ca6:	|  |   move.l d0,8(a0)
		return TRUE;
   13caa:	|  |   moveq #1,d0
   13cac:	|  +-- bra.w 13d4c <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   13cb0:	|  |   movea.l 4(sp),a0
   13cb4:	|  |   move.l 4(a0),d0
   13cb8:	|  |   move.l d0,-(sp)
   13cba:	|  |   jsr b8 <copyString>
   13cc0:	|  |   addq.l #4,sp
   13cc2:	|  |   movea.l 8(sp),a0
   13cc6:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   13cca:	|  |   movea.l 8(sp),a0
   13cce:	|  |   move.l 4(a0),d0
   13cd2:	|  |   sne d0
   13cd4:	|  |   neg.b d0
   13cd6:	|  |   move.b d0,d0
   13cd8:	|  |   andi.w #255,d0
   13cdc:	|  +-- bra.s 13d4c <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   13cde:	|  |   movea.l 4(sp),a0
   13ce2:	|  |   move.l 4(a0),d0
   13ce6:	|  |   movea.l 8(sp),a0
   13cea:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   13cee:	|  |   movea.l 8(sp),a0
   13cf2:	|  |   movea.l 4(a0),a0
   13cf6:	|  |   move.l 8(a0),d0
   13cfa:	|  |   addq.l #1,d0
   13cfc:	|  |   move.l d0,8(a0)
		return TRUE;
   13d00:	|  |   moveq #1,d0
   13d02:	|  +-- bra.s 13d4c <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   13d04:	|  |   movea.l 4(sp),a0
   13d08:	|  |   move.l 4(a0),d0
   13d0c:	|  |   movea.l 8(sp),a0
   13d10:	|  |   move.l d0,4(a0)
		return TRUE;
   13d14:	|  |   moveq #1,d0
   13d16:	|  +-- bra.s 13d4c <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   13d18:	|  |   movea.l 4(sp),a0
   13d1c:	|  |   move.l 4(a0),d0
   13d20:	|  |   move.l d0,-(sp)
   13d22:	|  |   jsr 86b8 <copyAnim>
   13d28:	|  |   addq.l #4,sp
   13d2a:	|  |   movea.l 8(sp),a0
   13d2e:	|  |   move.l d0,4(a0)
		return TRUE;
   13d32:	|  |   moveq #1,d0
   13d34:	|  +-- bra.s 13d4c <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   13d36:	|  |   moveq #1,d0
   13d38:	|  +-- bra.s 13d4c <copyMain+0x11a>

		default:
		break;
   13d3a:	\--|-> nop
	}
	KPrintF("Unknown value type");
   13d3c:	   |   pea 18ba4 <line.c.05397aaf+0xf3>
   13d42:	   |   jsr 15fc6 <KPrintF>
   13d48:	   |   addq.l #4,sp
	return FALSE;
   13d4a:	   |   clr.w d0
}
   13d4c:	   \-> rts

00013d4e <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   13d4e:	move.l 8(sp),-(sp)
   13d52:	jsr 13ae2 <unlinkVar>
   13d58:	addq.l #4,sp
	return copyMain(from, to);
   13d5a:	move.l 8(sp),-(sp)
   13d5e:	move.l 8(sp),-(sp)
   13d62:	jsr 13c32 <copyMain>
   13d68:	addq.l #8,sp
}
   13d6a:	rts

00013d6c <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   13d6c:	       movea.l 4(sp),a0
   13d70:	       move.l (a0),d0
   13d72:	       moveq #8,d1
   13d74:	       cmp.l d0,d1
   13d76:	   /-- bne.s 13d8c <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   13d78:	   |   movea.l 4(sp),a0
   13d7c:	   |   move.l 4(a0),d0
   13d80:	   |   move.l d0,-(sp)
   13d82:	   |   jsr 86b8 <copyAnim>
   13d88:	   |   addq.l #4,sp
   13d8a:	/--|-- bra.s 13dd2 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   13d8c:	|  \-> movea.l 4(sp),a0
   13d90:	|      move.l (a0),d0
   13d92:	|      moveq #1,d1
   13d94:	|      cmp.l d0,d1
   13d96:	|  /-- bne.s 13daa <getAnimationFromVar+0x3e>
   13d98:	|  |   movea.l 4(sp),a0
   13d9c:	|  |   move.l 4(a0),d0
   13da0:	|  +-- bne.s 13daa <getAnimationFromVar+0x3e>
		return makeNullAnim();
   13da2:	|  |   jsr 9e88 <makeNullAnim>
   13da8:	+--|-- bra.s 13dd2 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   13daa:	|  \-> movea.l 4(sp),a0
   13dae:	|      move.l (a0),d0
   13db0:	|      add.l d0,d0
   13db2:	|      movea.l d0,a1
   13db4:	|      adda.l d0,a1
   13db6:	|      lea 1b480 <typeName>,a0
   13dbc:	|      move.l (0,a1,a0.l),d0
   13dc0:	|      move.l d0,-(sp)
   13dc2:	|      pea 18a90 <PutChar+0x217a>
   13dc8:	|      jsr 15fc6 <KPrintF>
   13dce:	|      addq.l #8,sp
	return NULL;
   13dd0:	|      moveq #0,d0
}
   13dd2:	\----> rts

00013dd4 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   13dd4:	       movea.l 4(sp),a0
   13dd8:	       move.l (a0),d0
   13dda:	       moveq #10,d1
   13ddc:	       cmp.l d0,d1
   13dde:	/----- bcs.w 13e64 <getBoolean+0x90>
   13de2:	|      add.l d0,d0
   13de4:	|      movea.l d0,a0
   13de6:	|      adda.l #81394,a0
   13dec:	|      move.w (a0),d0
   13dee:	|      jmp (13df2 <getBoolean+0x1e>,pc,d0.w)
   13df2:	|      ori.b #26,(a6)
   13df6:	|      ori.w #68,(114,a2,d0.w)
   13dfc:	|      ori.w #46,(114,a2,d0.w)
   13e02:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   13e08:	|      clr.w d0
   13e0a:	|  /-- bra.s 13e68 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   13e0c:	|  |   movea.l 4(sp),a0
   13e10:	|  |   move.l 4(a0),d0
   13e14:	|  |   sne d0
   13e16:	|  |   neg.b d0
   13e18:	|  |   move.b d0,d0
   13e1a:	|  |   andi.w #255,d0
   13e1e:	|  +-- bra.s 13e68 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   13e20:	|  |   movea.l 4(sp),a0
   13e24:	|  |   movea.l 4(a0),a0
   13e28:	|  |   move.l (a0),d0
   13e2a:	|  |   sne d0
   13e2c:	|  |   neg.b d0
   13e2e:	|  |   move.b d0,d0
   13e30:	|  |   andi.w #255,d0
   13e34:	|  +-- bra.s 13e68 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   13e36:	|  |   movea.l 4(sp),a0
   13e3a:	|  |   movea.l 4(a0),a0
   13e3e:	|  |   move.b (a0),d0
   13e40:	|  |   sne d0
   13e42:	|  |   neg.b d0
   13e44:	|  |   move.b d0,d0
   13e46:	|  |   andi.w #255,d0
   13e4a:	|  +-- bra.s 13e68 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   13e4c:	|  |   movea.l 4(sp),a0
   13e50:	|  |   movea.l 4(a0),a0
   13e54:	|  |   move.l 4(a0),d0
   13e58:	|  |   sne d0
   13e5a:	|  |   neg.b d0
   13e5c:	|  |   move.b d0,d0
   13e5e:	|  |   andi.w #255,d0
   13e62:	|  +-- bra.s 13e68 <getBoolean+0x94>

		default:
		break;
   13e64:	\--|-> nop
	}
	return TRUE;
   13e66:	   |   moveq #1,d0
}
   13e68:	   \-> rts

00013e6a <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   13e6a:	      /----------> lea -76(sp),sp
   13e6e:	      |            move.l a6,-(sp)
	switch (from->varType) {
   13e70:	      |            movea.l 84(sp),a0
   13e74:	      |            move.l (a0),d0
   13e76:	      |            moveq #10,d1
   13e78:	      |            cmp.l d0,d1
   13e7a:	/-----|----------- bcs.w 14118 <getTextFromAnyVar+0x2ae>
   13e7e:	|     |            add.l d0,d0
   13e80:	|     |            movea.l d0,a0
   13e82:	|     |            adda.l #81550,a0
   13e88:	|     |            move.w (a0),d0
   13e8a:	|     |            jmp (13e8e <getTextFromAnyVar+0x24>,pc,d0.w)
   13e8e:	|     |            .short 0x028a
   13e90:	|     |            bset d0,(a0)+
   13e92:	|     |            .short 0x028a
   13e94:	|     |            ori.b #-118,(a6)
   13e98:	|     |            andi.b #8,ccr
   13e9c:	|     |            andi.w #650,-(a0)
   13ea0:	|     |            .short 0x028a
   13ea2:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   13ea8:	|     |            move.l 4(a0),d0
   13eac:	|     |            move.l d0,-(sp)
   13eae:	|     |            jsr b8 <copyString>
   13eb4:	|     |            addq.l #4,sp
   13eb6:	|  /--|----------- bra.w 1413a <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   13eba:	|  |  |            pea 18bb7 <line.c.05397aaf+0x106>
   13ec0:	|  |  |            jsr b8 <copyString>
   13ec6:	|  |  |            addq.l #4,sp
   13ec8:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   13ecc:	|  |  |            clr.l 72(sp)
   13ed0:	|  |  |     /----- bra.w 13f7a <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   13ed4:	|  |  |  /--|----> pea 18bbd <line.c.05397aaf+0x10c>
   13eda:	|  |  |  |  |      move.l 80(sp),-(sp)
   13ede:	|  |  |  |  |      jsr 12dc0 <joinStrings>
   13ee4:	|  |  |  |  |      addq.l #8,sp
   13ee6:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   13eea:	|  |  |  |  |  /-- bne.s 13ef2 <getTextFromAnyVar+0x88>
   13eec:	|  |  |  |  |  |   moveq #0,d0
   13eee:	|  +--|--|--|--|-- bra.w 1413a <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   13ef2:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   13ef8:	|  |  |  |  |      move.l 1b5a2 <SysBase>,d0
   13efe:	|  |  |  |  |      movea.l d0,a6
   13f00:	|  |  |  |  |      movea.l 56(sp),a1
   13f04:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   13f08:	|  |  |  |  |      movea.l 84(sp),a0
   13f0c:	|  |  |  |  |      movea.l 4(a0),a0
   13f10:	|  |  |  |  |      move.l (a0),d1
   13f12:	|  |  |  |  |      move.l 72(sp),d0
   13f16:	|  |  |  |  |      lsl.l #3,d0
   13f18:	|  |  |  |  |      add.l d1,d0
   13f1a:	|  |  |  |  |      move.l d0,-(sp)
   13f1c:	|  |  +--|--|----- jsr 13e6a <getTextFromAnyVar>(pc)
   13f20:	|  |  |  |  |      addq.l #4,sp
   13f22:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   13f26:	|  |  |  |  |      move.l 52(sp),-(sp)
   13f2a:	|  |  |  |  |      move.l 64(sp),-(sp)
   13f2e:	|  |  |  |  |      jsr 12dc0 <joinStrings>
   13f34:	|  |  |  |  |      addq.l #8,sp
   13f36:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   13f3a:	|  |  |  |  |  /-- bne.s 13f42 <getTextFromAnyVar+0xd8>
   13f3c:	|  |  |  |  |  |   moveq #0,d0
   13f3e:	|  +--|--|--|--|-- bra.w 1413a <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   13f42:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   13f48:	|  |  |  |  |      move.l 1b5a2 <SysBase>,d0
   13f4e:	|  |  |  |  |      movea.l d0,a6
   13f50:	|  |  |  |  |      movea.l 48(sp),a1
   13f54:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   13f58:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   13f5c:	|  |  |  |  |      move.l 60(sp),44(sp)
   13f62:	|  |  |  |  |      move.l 1b5a2 <SysBase>,d0
   13f68:	|  |  |  |  |      movea.l d0,a6
   13f6a:	|  |  |  |  |      movea.l 44(sp),a1
   13f6e:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   13f72:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   13f76:	|  |  |  |  |      addq.l #1,72(sp)
   13f7a:	|  |  |  |  \----> movea.l 84(sp),a0
   13f7e:	|  |  |  |         movea.l 4(a0),a0
   13f82:	|  |  |  |         move.l 4(a0),d0
   13f86:	|  |  |  |         cmp.l 72(sp),d0
   13f8a:	|  |  |  \-------- bgt.w 13ed4 <getTextFromAnyVar+0x6a>
			}
			return builder;
   13f8e:	|  |  |            move.l 76(sp),d0
   13f92:	|  +--|----------- bra.w 1413a <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   13f96:	|  |  |            pea 18bbf <line.c.05397aaf+0x10e>
   13f9c:	|  |  |            jsr b8 <copyString>
   13fa2:	|  |  |            addq.l #4,sp
   13fa4:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   13fa8:	|  |  |            movea.l 84(sp),a0
   13fac:	|  |  |            movea.l 4(a0),a0
   13fb0:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   13fb4:	|  |  |     /----- bra.w 14056 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   13fb8:	|  |  |  /--|----> pea 18bbd <line.c.05397aaf+0x10c>
   13fbe:	|  |  |  |  |      move.l 72(sp),-(sp)
   13fc2:	|  |  |  |  |      jsr 12dc0 <joinStrings>
   13fc8:	|  |  |  |  |      addq.l #8,sp
   13fca:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   13fce:	|  |  |  |  |  /-- bne.s 13fd6 <getTextFromAnyVar+0x16c>
   13fd0:	|  |  |  |  |  |   moveq #0,d0
   13fd2:	|  +--|--|--|--|-- bra.w 1413a <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   13fd6:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   13fdc:	|  |  |  |  |      move.l 1b5a2 <SysBase>,d0
   13fe2:	|  |  |  |  |      movea.l d0,a6
   13fe4:	|  |  |  |  |      movea.l 32(sp),a1
   13fe8:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   13fec:	|  |  |  |  |      move.l 64(sp),d0
   13ff0:	|  |  |  |  |      move.l d0,-(sp)
   13ff2:	|  |  \--|--|----- jsr 13e6a <getTextFromAnyVar>(pc)
   13ff6:	|  |     |  |      addq.l #4,sp
   13ff8:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   13ffc:	|  |     |  |      move.l 28(sp),-(sp)
   14000:	|  |     |  |      move.l 40(sp),-(sp)
   14004:	|  |     |  |      jsr 12dc0 <joinStrings>
   1400a:	|  |     |  |      addq.l #8,sp
   1400c:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   14010:	|  |     |  |  /-- bne.s 14018 <getTextFromAnyVar+0x1ae>
   14012:	|  |     |  |  |   moveq #0,d0
   14014:	|  +-----|--|--|-- bra.w 1413a <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14018:	|  |     |  |  \-> move.l 28(sp),24(sp)
   1401e:	|  |     |  |      move.l 1b5a2 <SysBase>,d0
   14024:	|  |     |  |      movea.l d0,a6
   14026:	|  |     |  |      movea.l 24(sp),a1
   1402a:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   1402e:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   14032:	|  |     |  |      move.l 36(sp),20(sp)
   14038:	|  |     |  |      move.l 1b5a2 <SysBase>,d0
   1403e:	|  |     |  |      movea.l d0,a6
   14040:	|  |     |  |      movea.l 20(sp),a1
   14044:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   14048:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   1404c:	|  |     |  |      movea.l 64(sp),a0
   14050:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   14056:	|  |     |  \----> tst.l 64(sp)
   1405a:	|  |     \-------- bne.w 13fb8 <getTextFromAnyVar+0x14e>
			}
			return builder;
   1405e:	|  |               move.l 68(sp),d0
   14062:	|  +-------------- bra.w 1413a <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   14066:	|  |               moveq #10,d0
   14068:	|  |               move.l d0,16(sp)
   1406c:	|  |               clr.l 12(sp)
   14070:	|  |               move.l 1b5a2 <SysBase>,d0
   14076:	|  |               movea.l d0,a6
   14078:	|  |               move.l 16(sp),d0
   1407c:	|  |               move.l 12(sp),d1
   14080:	|  |               jsr -684(a6)
   14084:	|  |               move.l d0,8(sp)
   14088:	|  |               move.l 8(sp),d0
   1408c:	|  |               move.l d0,4(sp)
			if (! buff) {
   14090:	|  |           /-- bne.s 140a6 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   14092:	|  |           |   pea 18bc6 <line.c.05397aaf+0x115>
   14098:	|  |           |   jsr 15fc6 <KPrintF>
   1409e:	|  |           |   addq.l #4,sp
				return NULL;
   140a0:	|  |           |   moveq #0,d0
   140a2:	|  +-----------|-- bra.w 1413a <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   140a6:	|  |           \-> movea.l 84(sp),a0
   140aa:	|  |               move.l 4(a0),d0
   140ae:	|  |               move.l d0,-(sp)
   140b0:	|  |               pea 18bf0 <line.c.05397aaf+0x13f>
   140b6:	|  |               move.l 12(sp),-(sp)
   140ba:	|  |               jsr 1309e <sprintf>
   140c0:	|  |               lea 12(sp),sp
			return buff;
   140c4:	|  |               move.l 4(sp),d0
   140c8:	|  +-------------- bra.s 1413a <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   140ca:	|  |               movea.l 84(sp),a0
   140ce:	|  |               move.l 4(a0),d0
   140d2:	|  |               move.l d0,-(sp)
   140d4:	|  |               jsr 3152 <resourceNameFromNum>
   140da:	|  |               addq.l #4,sp
   140dc:	|  |               move.l d0,-(sp)
   140de:	|  |               pea 17530 <PutChar+0xc1a>
   140e4:	|  |               jsr 12dc0 <joinStrings>
   140ea:	|  |               addq.l #8,sp
   140ec:	|  +-------------- bra.s 1413a <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   140ee:	|  |               movea.l 84(sp),a0
   140f2:	|  |               move.l 4(a0),d0
   140f6:	|  |               move.l d0,-(sp)
   140f8:	|  |               jsr c680 <findObjectType>
   140fe:	|  |               addq.l #4,sp
   14100:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   14104:	+--|-------------- beq.s 14118 <getTextFromAnyVar+0x2ae>
   14106:	|  |               movea.l 40(sp),a0
   1410a:	|  |               move.l (a0),d0
   1410c:	|  |               move.l d0,-(sp)
   1410e:	|  |               jsr b8 <copyString>
   14114:	|  |               addq.l #4,sp
   14116:	|  +-------------- bra.s 1413a <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   14118:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   1411a:	   |               movea.l 84(sp),a0
   1411e:	   |               move.l (a0),d0
   14120:	   |               add.l d0,d0
   14122:	   |               movea.l d0,a1
   14124:	   |               adda.l d0,a1
   14126:	   |               lea 1b480 <typeName>,a0
   1412c:	   |               move.l (0,a1,a0.l),d0
   14130:	   |               move.l d0,-(sp)
   14132:	   |               jsr b8 <copyString>
   14138:	   |               addq.l #4,sp
}
   1413a:	   \-------------> movea.l (sp)+,a6
   1413c:	                   lea 76(sp),sp
   14140:	                   rts

00014142 <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   14142:	move.l 4(sp),-(sp)
   14146:	jsr 13ae2 <unlinkVar>
   1414c:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   1414e:	movea.l 4(sp),a0
   14152:	moveq #8,d0
   14154:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   14156:	movea.l 4(sp),a0
   1415a:	move.l 8(sp),4(a0)
}
   14160:	nop
   14162:	rts

00014164 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   14164:	move.l 4(sp),-(sp)
   14168:	jsr 13ae2 <unlinkVar>
   1416e:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   14170:	movea.l 4(sp),a0
   14174:	moveq #9,d0
   14176:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   14178:	movea.l 4(sp),a0
   1417c:	move.l 8(sp),4(a0)
}
   14182:	nop
   14184:	rts

00014186 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   14186:	move.l 4(sp),-(sp)
   1418a:	jsr 13ae2 <unlinkVar>
   14190:	addq.l #4,sp
	thisVar->varType = vT;
   14192:	movea.l 4(sp),a0
   14196:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   1419a:	movea.l 4(sp),a0
   1419e:	move.l 12(sp),4(a0)
}
   141a4:	nop
   141a6:	rts

000141a8 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   141a8:	      /-- bra.s 141ba <stackGetByIndex+0x12>
        vS = vS->next;
   141aa:	/-----|-> movea.l 4(sp),a0
   141ae:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   141b4:	|     +-- bne.s 141ba <stackGetByIndex+0x12>
            return NULL;
   141b6:	|     |   moveq #0,d0
   141b8:	|  /--|-- bra.s 141ce <stackGetByIndex+0x26>
    while (theIndex--) {
   141ba:	|  |  \-> move.l 8(sp),d0
   141be:	|  |      move.l d0,d1
   141c0:	|  |      subq.l #1,d1
   141c2:	|  |      move.l d1,8(sp)
   141c6:	|  |      tst.l d0
   141c8:	\--|----- bne.s 141aa <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   141ca:	   |      move.l 4(sp),d0
}
   141ce:	   \----> rts

000141d0 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   141d0:	          tst.l 4(sp)
   141d4:	      /-- bne.s 141e4 <stackFindLast+0x14>
		return NULL;
   141d6:	      |   moveq #0,d0
   141d8:	/-----|-- bra.s 141f2 <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   141da:	|  /--|-> movea.l 4(sp),a0
   141de:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   141e4:	|  |  \-> movea.l 4(sp),a0
   141e8:	|  |      move.l 8(a0),d0
   141ec:	|  \----- bne.s 141da <stackFindLast+0xa>

	return hunt;
   141ee:	|         move.l 4(sp),d0
}
   141f2:	\-------> rts

000141f4 <stackSize>:

int stackSize (const struct stackHandler * me) {
   141f4:	       subq.l #8,sp
	int r = 0;
   141f6:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   141fa:	       movea.l 12(sp),a0
   141fe:	       move.l (a0),(sp)
	while (a) {
   14200:	   /-- bra.s 1420c <stackSize+0x18>
		r ++;
   14202:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   14206:	|  |   movea.l (sp),a0
   14208:	|  |   move.l 8(a0),(sp)
	while (a) {
   1420c:	|  \-> tst.l (sp)
   1420e:	\----- bne.s 14202 <stackSize+0xe>
	}
	return r;
   14210:	       move.l 4(sp),d0
}
   14214:	       addq.l #8,sp
   14216:	       rts

00014218 <trimStack>:

void trimStack (struct variableStack ** stack) {
   14218:	subq.l #8,sp
   1421a:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   1421c:	movea.l 16(sp),a0
   14220:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   14224:	movea.l 16(sp),a0
   14228:	movea.l (a0),a0
   1422a:	move.l 8(a0),d0
   1422e:	movea.l 16(sp),a0
   14232:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   14234:	move.l 8(sp),d0
   14238:	move.l d0,-(sp)
   1423a:	jsr 13ae2 <unlinkVar>
   14240:	addq.l #4,sp
	FreeVec(killMe);
   14242:	move.l 8(sp),4(sp)
   14248:	move.l 1b5a2 <SysBase>,d0
   1424e:	movea.l d0,a6
   14250:	movea.l 4(sp),a1
   14254:	jsr -690(a6)
   14258:	nop
   1425a:	movea.l (sp)+,a6
   1425c:	addq.l #8,sp
   1425e:	rts

00014260 <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   14260:	       lea -52(sp),sp
   14264:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   14266:	       pea 18bf3 <line.c.05397aaf+0x142>
   1426c:	       jsr 15fc6 <KPrintF>
   14272:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   14274:	       moveq #64,d0
   14276:	       move.l d0,52(sp)
   1427a:	       clr.l 48(sp)
   1427e:	       move.l 1b5a2 <SysBase>,d0
   14284:	       movea.l d0,a6
   14286:	       move.l 52(sp),d0
   1428a:	       move.l 48(sp),d1
   1428e:	       jsr -684(a6)
   14292:	       move.l d0,44(sp)
   14296:	       move.l 44(sp),d0
   1429a:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   1429e:	   /-- bne.s 142a6 <freeze+0x46>
   142a0:	   |   clr.w d0
   142a2:	/--|-- bra.w 1441c <freeze+0x1bc>

	CstFreeze();
   142a6:	|  \-> jsr 15b0 <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   142ac:	|      move.l 1b696 <sceneWidth>,d0
   142b2:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   142b6:	|      move.l 1b69a <sceneHeight>,d0
   142bc:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   142c0:	|      move.l 1b696 <sceneWidth>,d0
   142c6:	|      movea.l 40(sp),a0
   142ca:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   142ce:	|      move.l 1b69a <sceneHeight>,d0
   142d4:	|      movea.l 40(sp),a0
   142d8:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   142dc:	|      move.l 1b6b4 <cameraX>,d0
   142e2:	|      movea.l 40(sp),a0
   142e6:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   142ea:	|      move.l 1b6b8 <cameraY>,d0
   142f0:	|      movea.l 40(sp),a0
   142f4:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   142f8:	|      move.l 1af42 <cameraZoom>,d0
   142fe:	|      movea.l 40(sp),a0
   14302:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   14306:	|      move.w #1,1b6a2 <backdropExists>

	newFreezer -> allPeople = allPeople;
   1430e:	|      move.l 1b65a <allPeople>,d0
   14314:	|      movea.l 40(sp),a0
   14318:	|      move.l d0,(a0)
	allPeople = NULL;
   1431a:	|      clr.l 1b65a <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   14320:	|      moveq #42,d0
   14322:	|      move.l d0,28(sp)
   14326:	|      clr.l 24(sp)
   1432a:	|      move.l 1b5a2 <SysBase>,d0
   14330:	|      movea.l d0,a6
   14332:	|      move.l 28(sp),d0
   14336:	|      move.l 24(sp),d1
   1433a:	|      jsr -684(a6)
   1433e:	|      move.l d0,20(sp)
   14342:	|      move.l 20(sp),d0
   14346:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   1434a:	|  /-- bne.s 14352 <freeze+0xf2>
   1434c:	|  |   clr.w d0
   1434e:	+--|-- bra.w 1441c <freeze+0x1bc>

	newFreezer -> allScreenRegions = allScreenRegions;
   14352:	|  \-> move.l 1b702 <allScreenRegions>,d0
   14358:	|      movea.l 40(sp),a0
   1435c:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   14360:	|      clr.l 1b702 <allScreenRegions>
	overRegion = NULL;
   14366:	|      clr.l 1b706 <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   1436c:	|      move.l 1b4aa <mouseCursorAnim>,d0
   14372:	|      movea.l 40(sp),a0
   14376:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   1437a:	|      move.l 1b4ae <mouseCursorFrameNum>,d0
   14380:	|      movea.l 40(sp),a0
   14384:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   14388:	|      jsr 9e88 <makeNullAnim>
   1438e:	|      move.l d0,1b4aa <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   14394:	|      clr.l 1b4ae <mouseCursorFrameNum>

	newFreezer -> speech = speech;
   1439a:	|      move.l 1b5fe <speech>,d0
   143a0:	|      movea.l 40(sp),a0
   143a4:	|      move.l d0,20(a0)
	initSpeech ();
   143a8:	|      jsr 6eea <initSpeech>

	newFreezer -> currentEvents = (struct eventhandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   143ae:	|      moveq #28,d0
   143b0:	|      move.l d0,12(sp)
   143b4:	|      clr.l 8(sp)
   143b8:	|      move.l 1b5a2 <SysBase>,d0
   143be:	|      movea.l d0,a6
   143c0:	|      move.l 12(sp),d0
   143c4:	|      move.l 8(sp),d1
   143c8:	|      jsr -684(a6)
   143cc:	|      move.l d0,4(sp)
   143d0:	|      move.l 4(sp),d0
   143d4:	|      movea.l 40(sp),a0
   143d8:	|      move.l d0,28(a0)
	if (!newFreezer -> currentEvents) return FALSE;
   143dc:	|      movea.l 40(sp),a0
   143e0:	|      move.l 28(a0),d0
   143e4:	|  /-- bne.s 143ea <freeze+0x18a>
   143e6:	|  |   clr.w d0
   143e8:	+--|-- bra.s 1441c <freeze+0x1bc>
	memset (newFreezer -> currentEvents, 0, sizeof(struct eventHandlers));
   143ea:	|  \-> movea.l 40(sp),a0
   143ee:	|      move.l 28(a0),d0
   143f2:	|      pea 1c <_start+0x1c>
   143f6:	|      clr.l -(sp)
   143f8:	|      move.l d0,-(sp)
   143fa:	|      jsr 15f4a <memset>
   14400:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   14404:	|      move.l 1b6ee <frozenStuff>,d0
   1440a:	|      movea.l 40(sp),a0
   1440e:	|      move.l d0,60(a0)
	frozenStuff = newFreezer;
   14412:	|      move.l 40(sp),1b6ee <frozenStuff>

	return TRUE;
   1441a:	|      moveq #1,d0
}
   1441c:	\----> movea.l (sp)+,a6
   1441e:	       lea 52(sp),sp
   14422:	       rts

00014424 <unfreeze>:

void unfreeze () {
   14424:	       lea -16(sp),sp
   14428:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   1442a:	       move.l 1b6ee <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   14432:	       move.l 1b6ee <frozenStuff>,d0
   14438:	/----- beq.w 1465a <unfreeze+0x236>

	CstUnfreeze();
   1443c:	|      jsr 2d80 <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   14442:	|      movea.l 1b6ee <frozenStuff>,a0
   14448:	|      move.l 48(a0),d0
   1444c:	|      move.l d0,1b696 <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   14452:	|      movea.l 1b6ee <frozenStuff>,a0
   14458:	|      move.l 52(a0),d0
   1445c:	|      move.l d0,1b69a <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   14462:	|      movea.l 1b6ee <frozenStuff>,a0
   14468:	|      move.l 40(a0),d0
   1446c:	|      move.l d0,1b6b4 <cameraX>
	cameraY = frozenStuff -> cameraY;
   14472:	|      movea.l 1b6ee <frozenStuff>,a0
   14478:	|      move.l 44(a0),d0
   1447c:	|      move.l d0,1b6b8 <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   14482:	|      move.l 1b55e <input+0xa>,d0
   14488:	|      move.l d0,-(sp)
   1448a:	|      jsr 1627e <__floatsisf>
   14490:	|      addq.l #4,sp
   14492:	|      move.l d0,d1
   14494:	|      move.l 1af42 <cameraZoom>,d0
   1449a:	|      move.l d0,-(sp)
   1449c:	|      move.l d1,-(sp)
   1449e:	|      jsr 16330 <__mulsf3>
   144a4:	|      addq.l #8,sp
   144a6:	|      move.l d0,-(sp)
   144a8:	|      jsr 16216 <__fixsfsi>
   144ae:	|      addq.l #4,sp
   144b0:	|      move.l d0,1b55e <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   144b6:	|      move.l 1b562 <input+0xe>,d0
   144bc:	|      move.l d0,-(sp)
   144be:	|      jsr 1627e <__floatsisf>
   144c4:	|      addq.l #4,sp
   144c6:	|      move.l d0,d1
   144c8:	|      move.l 1af42 <cameraZoom>,d0
   144ce:	|      move.l d0,-(sp)
   144d0:	|      move.l d1,-(sp)
   144d2:	|      jsr 16330 <__mulsf3>
   144d8:	|      addq.l #8,sp
   144da:	|      move.l d0,-(sp)
   144dc:	|      jsr 16216 <__fixsfsi>
   144e2:	|      addq.l #4,sp
   144e4:	|      move.l d0,1b562 <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   144ea:	|      movea.l 1b6ee <frozenStuff>,a0
   144f0:	|      move.l 56(a0),d0
   144f4:	|      move.l d0,1af42 <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   144fa:	|      move.l 1b55e <input+0xa>,d0
   14500:	|      move.l d0,-(sp)
   14502:	|      jsr 1627e <__floatsisf>
   14508:	|      addq.l #4,sp
   1450a:	|      move.l d0,d1
   1450c:	|      move.l 1af42 <cameraZoom>,d0
   14512:	|      move.l d0,-(sp)
   14514:	|      move.l d1,-(sp)
   14516:	|      jsr 1612a <__divsf3>
   1451c:	|      addq.l #8,sp
   1451e:	|      move.l d0,-(sp)
   14520:	|      jsr 16216 <__fixsfsi>
   14526:	|      addq.l #4,sp
   14528:	|      move.l d0,1b55e <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   1452e:	|      move.l 1b562 <input+0xe>,d0
   14534:	|      move.l d0,-(sp)
   14536:	|      jsr 1627e <__floatsisf>
   1453c:	|      addq.l #4,sp
   1453e:	|      move.l d0,d1
   14540:	|      move.l 1af42 <cameraZoom>,d0
   14546:	|      move.l d0,-(sp)
   14548:	|      move.l d1,-(sp)
   1454a:	|      jsr 1612a <__divsf3>
   14550:	|      addq.l #8,sp
   14552:	|      move.l d0,-(sp)
   14554:	|      jsr 16216 <__fixsfsi>
   1455a:	|      addq.l #4,sp
   1455c:	|      move.l d0,1b562 <input+0xe>

	killAllPeople ();
   14562:	|      jsr 9b90 <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   14568:	|      movea.l 1b6ee <frozenStuff>,a0
   1456e:	|      move.l (a0),d0
   14570:	|      move.l d0,1b65a <allPeople>

	killAllRegions ();
   14576:	|      jsr 14816 <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   1457c:	|      movea.l 1b6ee <frozenStuff>,a0
   14582:	|      move.l 4(a0),d0
   14586:	|      move.l d0,1b702 <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   1458c:	|      move.l 1b4aa <mouseCursorAnim>,d0
   14592:	|      move.l d0,-(sp)
   14594:	|      jsr 8a84 <deleteAnim>
   1459a:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   1459c:	|      movea.l 1b6ee <frozenStuff>,a0
   145a2:	|      move.l 32(a0),d0
   145a6:	|      move.l d0,1b4aa <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   145ac:	|      movea.l 1b6ee <frozenStuff>,a0
   145b2:	|      move.l 36(a0),d0
   145b6:	|      move.l d0,1b4ae <mouseCursorFrameNum>

	if (currentEvents) FreeVec(currentEvents);
   145bc:	|      move.l 1af1c <currentEvents>,d0
   145c2:	|  /-- beq.s 145dc <unfreeze+0x1b8>
   145c4:	|  |   move.l 1af1c <currentEvents>,12(sp)
   145cc:	|  |   move.l 1b5a2 <SysBase>,d0
   145d2:	|  |   movea.l d0,a6
   145d4:	|  |   movea.l 12(sp),a1
   145d8:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   145dc:	|  \-> movea.l 1b6ee <frozenStuff>,a0
   145e2:	|      move.l 28(a0),d0
   145e6:	|      move.l d0,1af1c <currentEvents>

	killAllSpeech ();
   145ec:	|      jsr 6f82 <killAllSpeech>
	if (speech) FreeVec(speech);
   145f2:	|      move.l 1b5fe <speech>,d0
   145f8:	|  /-- beq.s 14612 <unfreeze+0x1ee>
   145fa:	|  |   move.l 1b5fe <speech>,8(sp)
   14602:	|  |   move.l 1b5a2 <SysBase>,d0
   14608:	|  |   movea.l d0,a6
   1460a:	|  |   movea.l 8(sp),a1
   1460e:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   14612:	|  \-> movea.l 1b6ee <frozenStuff>,a0
   14618:	|      move.l 20(a0),d0
   1461c:	|      move.l d0,1b5fe <speech>

	frozenStuff = frozenStuff -> next;
   14622:	|      movea.l 1b6ee <frozenStuff>,a0
   14628:	|      move.l 60(a0),d0
   1462c:	|      move.l d0,1b6ee <frozenStuff>

	overRegion = NULL;
   14632:	|      clr.l 1b706 <overRegion>
	if (killMe) FreeVec(killMe);
   14638:	|      tst.l 16(sp)
   1463c:	|  /-- beq.s 14654 <unfreeze+0x230>
   1463e:	|  |   move.l 16(sp),4(sp)
   14644:	|  |   move.l 1b5a2 <SysBase>,d0
   1464a:	|  |   movea.l d0,a6
   1464c:	|  |   movea.l 4(sp),a1
   14650:	|  |   jsr -690(a6)
	killMe = NULL;
   14654:	|  \-> clr.l 16(sp)
   14658:	|  /-- bra.s 1465c <unfreeze+0x238>
	if (! frozenStuff) return;
   1465a:	\--|-> nop
}
   1465c:	   \-> movea.l (sp)+,a6
   1465e:	       lea 16(sp),sp
   14662:	       rts

00014664 <isInFont>:

ULONG * fontTable = NULL;
unsigned int fontTableSize = 0;

BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   14664:	pea 18c05 <line.c.05397aaf+0x154>
   1466a:	jsr 15fc6 <KPrintF>
   14670:	addq.l #4,sp
	return FALSE;
   14672:	clr.w d0
}
   14674:	rts

00014676 <stringWidth>:

int stringWidth (char * theText) {
   14676:	       subq.l #8,sp
	int a = 0;
   14678:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   1467c:	       clr.l (sp)

	if (! fontTableSize) return 0;
   1467e:	       move.l 1b6fe <fontTableSize>,d0
   14684:	/----- bne.s 1468a <stringWidth+0x14>
   14686:	|      moveq #0,d0
   14688:	|  /-- bra.s 1468c <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   1468a:	\--|-> move.l (sp),d0
}
   1468c:	   \-> addq.l #8,sp
   1468e:	       rts

00014690 <loadFont>:

	FreeVec(fontOrderString);
	fontOrderString = copyString(charOrder);*/

	//forgetSpriteBank(theFont);
	KPrintF("loadFont: Not implemented on Amiga");	
   14690:	pea 18c2c <line.c.05397aaf+0x17b>
   14696:	jsr 15fc6 <KPrintF>
   1469c:	addq.l #4,sp
		return FALSE;
	}*/

	//numFontColours = theFont.myPalette.total;*/
	//fontHeight = h;
	return TRUE;
   1469e:	moveq #1,d0
}
   146a0:	rts

000146a2 <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   146a2:	       lea -16(sp),sp
   146a6:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   146a8:	       moveq #36,d0
   146aa:	       move.l d0,16(sp)
   146ae:	       clr.l 12(sp)
   146b2:	       move.l 1b5a2 <SysBase>,d0
   146b8:	       movea.l d0,a6
   146ba:	       move.l 16(sp),d0
   146be:	       move.l 12(sp),d1
   146c2:	       jsr -684(a6)
   146c6:	       move.l d0,8(sp)
   146ca:	       move.l 8(sp),d0
   146ce:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   146d2:	   /-- bne.s 146da <addScreenRegion+0x38>
   146d4:	   |   clr.w d0
   146d6:	/--|-- bra.w 1475a <addScreenRegion+0xb8>
    newRegion->di = di;
   146da:	|  \-> movea.l 4(sp),a0
   146de:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   146e4:	|      movea.l 4(sp),a0
   146e8:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   146ec:	|      movea.l 4(sp),a0
   146f0:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   146f6:	|      movea.l 4(sp),a0
   146fa:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   14700:	|      movea.l 4(sp),a0
   14704:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   1470a:	|      movea.l 4(sp),a0
   1470e:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   14714:	|      movea.l 4(sp),a0
   14718:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   1471e:	|      move.l 52(sp),-(sp)
   14722:	|      jsr c770 <loadObjectType>
   14728:	|      addq.l #4,sp
   1472a:	|      movea.l 4(sp),a0
   1472e:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   14732:	|      move.l 1b702 <allScreenRegions>,d0
   14738:	|      movea.l 4(sp),a0
   1473c:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   14740:	|      move.l 4(sp),1b702 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   14748:	|      movea.l 4(sp),a0
   1474c:	|      move.l 28(a0),d0
   14750:	|      sne d0
   14752:	|      neg.b d0
   14754:	|      move.b d0,d0
   14756:	|      andi.w #255,d0
}
   1475a:	\----> movea.l (sp)+,a6
   1475c:	       lea 16(sp),sp
   14760:	       rts

00014762 <getOverRegion>:

void getOverRegion () {
   14762:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   14764:	             move.l 1b702 <allScreenRegions>,(sp)
	while (thisRegion) {
   1476a:	   /-------- bra.s 147d8 <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   1476c:	/--|-------> move.l 1b55e <input+0xa>,d0
   14772:	|  |         movea.l (sp),a0
   14774:	|  |         movea.l (a0),a0
   14776:	|  |         move.l 1b6b4 <cameraX>,d1
   1477c:	|  |         suba.l d1,a0
   1477e:	|  |         cmpa.l d0,a0
   14780:	|  |  /----- bgt.s 147d2 <getOverRegion+0x70>
   14782:	|  |  |      move.l 1b562 <input+0xe>,d0
   14788:	|  |  |      movea.l (sp),a0
   1478a:	|  |  |      movea.l 4(a0),a0
   1478e:	|  |  |      move.l 1b6b8 <cameraY>,d1
   14794:	|  |  |      suba.l d1,a0
   14796:	|  |  |      cmpa.l d0,a0
   14798:	|  |  +----- bgt.s 147d2 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   1479a:	|  |  |      move.l 1b55e <input+0xa>,d0
   147a0:	|  |  |      movea.l (sp),a0
   147a2:	|  |  |      movea.l 8(a0),a0
   147a6:	|  |  |      move.l 1b6b4 <cameraX>,d1
   147ac:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   147ae:	|  |  |      cmpa.l d0,a0
   147b0:	|  |  +----- blt.s 147d2 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   147b2:	|  |  |      move.l 1b562 <input+0xe>,d0
   147b8:	|  |  |      movea.l (sp),a0
   147ba:	|  |  |      movea.l 12(a0),a0
   147be:	|  |  |      move.l 1b6b8 <cameraY>,d1
   147c4:	|  |  |      suba.l d1,a0
   147c6:	|  |  |      cmpa.l d0,a0
   147c8:	|  |  +----- blt.s 147d2 <getOverRegion+0x70>
			overRegion = thisRegion;
   147ca:	|  |  |      move.l (sp),1b706 <overRegion>
			return;
   147d0:	|  |  |  /-- bra.s 147e4 <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   147d2:	|  |  \--|-> movea.l (sp),a0
   147d4:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   147d8:	|  \-----|-> tst.l (sp)
   147da:	\--------|-- bne.s 1476c <getOverRegion+0xa>
	}
	overRegion = NULL;
   147dc:	         |   clr.l 1b706 <overRegion>
	return;
   147e2:	         |   nop
}
   147e4:	         \-> addq.l #4,sp
   147e6:	             rts

000147e8 <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   147e8:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   147ea:	             move.l 1b702 <allScreenRegions>,(sp)

	while (thisRegion) {
   147f0:	   /-------- bra.s 1480c <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   147f2:	/--|-------> movea.l (sp),a0
   147f4:	|  |         movea.l 28(a0),a0
   147f8:	|  |         move.l 4(a0),d0
   147fc:	|  |         cmp.l 8(sp),d0
   14800:	|  |     /-- bne.s 14806 <getRegionForObject+0x1e>
			return thisRegion;
   14802:	|  |     |   move.l (sp),d0
   14804:	|  |  /--|-- bra.s 14812 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   14806:	|  |  |  \-> movea.l (sp),a0
   14808:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   1480c:	|  \--|----> tst.l (sp)
   1480e:	\-----|----- bne.s 147f2 <getRegionForObject+0xa>
	}

	return NULL;
   14810:	      |      moveq #0,d0
}
   14812:	      \----> addq.l #4,sp
   14814:	             rts

00014816 <killAllRegions>:

void killAllRegions () {
   14816:	       subq.l #8,sp
   14818:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   1481a:	   /-- bra.s 1485c <killAllRegions+0x46>
		killRegion = allScreenRegions;
   1481c:	/--|-> move.l 1b702 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   14824:	|  |   movea.l 1b702 <allScreenRegions>,a0
   1482a:	|  |   move.l 32(a0),d0
   1482e:	|  |   move.l d0,1b702 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   14834:	|  |   movea.l 8(sp),a0
   14838:	|  |   move.l 28(a0),d0
   1483c:	|  |   move.l d0,-(sp)
   1483e:	|  |   jsr ca28 <removeObjectType>
   14844:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   14846:	|  |   move.l 8(sp),4(sp)
   1484c:	|  |   move.l 1b5a2 <SysBase>,d0
   14852:	|  |   movea.l d0,a6
   14854:	|  |   movea.l 4(sp),a1
   14858:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   1485c:	|  \-> move.l 1b702 <allScreenRegions>,d0
   14862:	\----- bne.s 1481c <killAllRegions+0x6>
	}
	overRegion = NULL;
   14864:	       clr.l 1b706 <overRegion>
}
   1486a:	       nop
   1486c:	       movea.l (sp)+,a6
   1486e:	       addq.l #8,sp
   14870:	       rts

00014872 <loadRegions>:

void loadRegions (BPTR fp) {
   14872:	       lea -24(sp),sp
   14876:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   14878:	       move.l 32(sp),-(sp)
   1487c:	       jsr 6bc <get2bytes>
   14882:	       addq.l #4,sp
   14884:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   14888:	       move.l #112386,20(sp)

	while (numRegions --) {
   14890:	   /-- bra.w 1496e <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   14894:	/--|-> moveq #36,d0
   14896:	|  |   move.l d0,16(sp)
   1489a:	|  |   clr.l 12(sp)
   1489e:	|  |   move.l 1b5a2 <SysBase>,d0
   148a4:	|  |   movea.l d0,a6
   148a6:	|  |   move.l 16(sp),d0
   148aa:	|  |   move.l 12(sp),d1
   148ae:	|  |   jsr -684(a6)
   148b2:	|  |   move.l d0,8(sp)
   148b6:	|  |   move.l 8(sp),d0
   148ba:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   148be:	|  |   movea.l 20(sp),a0
   148c2:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   148c6:	|  |   moveq #32,d1
   148c8:	|  |   add.l 4(sp),d1
   148cc:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   148d0:	|  |   move.l 32(sp),-(sp)
   148d4:	|  |   jsr 6bc <get2bytes>
   148da:	|  |   addq.l #4,sp
   148dc:	|  |   movea.l 4(sp),a0
   148e0:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   148e2:	|  |   move.l 32(sp),-(sp)
   148e6:	|  |   jsr 6bc <get2bytes>
   148ec:	|  |   addq.l #4,sp
   148ee:	|  |   movea.l 4(sp),a0
   148f2:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   148f6:	|  |   move.l 32(sp),-(sp)
   148fa:	|  |   jsr 6bc <get2bytes>
   14900:	|  |   addq.l #4,sp
   14902:	|  |   movea.l 4(sp),a0
   14906:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   1490a:	|  |   move.l 32(sp),-(sp)
   1490e:	|  |   jsr 6bc <get2bytes>
   14914:	|  |   addq.l #4,sp
   14916:	|  |   movea.l 4(sp),a0
   1491a:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   1491e:	|  |   move.l 32(sp),-(sp)
   14922:	|  |   jsr 6bc <get2bytes>
   14928:	|  |   addq.l #4,sp
   1492a:	|  |   movea.l 4(sp),a0
   1492e:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   14932:	|  |   move.l 32(sp),-(sp)
   14936:	|  |   jsr 6bc <get2bytes>
   1493c:	|  |   addq.l #4,sp
   1493e:	|  |   movea.l 4(sp),a0
   14942:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   14946:	|  |   move.l 32(sp),-(sp)
   1494a:	|  |   jsr 6bc <get2bytes>
   14950:	|  |   addq.l #4,sp
   14952:	|  |   movea.l 4(sp),a0
   14956:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   1495a:	|  |   move.l 32(sp),-(sp)
   1495e:	|  |   jsr c71e <loadObjectRef>
   14964:	|  |   addq.l #4,sp
   14966:	|  |   movea.l 4(sp),a0
   1496a:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   1496e:	|  \-> move.l 24(sp),d0
   14972:	|      move.l d0,d1
   14974:	|      subq.l #1,d1
   14976:	|      move.l d1,24(sp)
   1497a:	|      tst.l d0
   1497c:	\----- bne.w 14894 <loadRegions+0x22>
	}
	* pointy = NULL;
   14980:	       movea.l 20(sp),a0
   14984:	       clr.l (a0)
}
   14986:	       nop
   14988:	       movea.l (sp)+,a6
   1498a:	       lea 24(sp),sp
   1498e:	       rts

00014990 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   14990:	             lea -12(sp),sp
   14994:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   14996:	             move.l #112386,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   1499e:	   /-------- bra.s 14a18 <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   149a0:	/--|-------> movea.l 12(sp),a0
   149a4:	|  |         movea.l (a0),a0
   149a6:	|  |         movea.l 28(a0),a0
   149aa:	|  |         move.l 4(a0),d0
   149ae:	|  |         cmp.l 20(sp),d0
   149b2:	|  |  /----- bne.s 14a0a <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   149b4:	|  |  |      movea.l 12(sp),a0
   149b8:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   149bc:	|  |  |      movea.l 8(sp),a0
   149c0:	|  |  |      move.l 32(a0),d0
   149c4:	|  |  |      movea.l 12(sp),a0
   149c8:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   149ca:	|  |  |      movea.l 8(sp),a0
   149ce:	|  |  |      move.l 28(a0),d0
   149d2:	|  |  |      move.l d0,-(sp)
   149d4:	|  |  |      jsr ca28 <removeObjectType>
   149da:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   149dc:	|  |  |      move.l 1b706 <overRegion>,d0
   149e2:	|  |  |      cmp.l 8(sp),d0
   149e6:	|  |  |  /-- bne.s 149ee <removeScreenRegion+0x5e>
   149e8:	|  |  |  |   clr.l 1b706 <overRegion>
            FreeVec(killMe);
   149ee:	|  |  |  \-> move.l 8(sp),4(sp)
   149f4:	|  |  |      move.l 1b5a2 <SysBase>,d0
   149fa:	|  |  |      movea.l d0,a6
   149fc:	|  |  |      movea.l 4(sp),a1
   14a00:	|  |  |      jsr -690(a6)
            killMe = NULL;
   14a04:	|  |  |      clr.l 8(sp)
   14a08:	|  +--|----- bra.s 14a18 <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   14a0a:	|  |  \----> movea.l 12(sp),a0
   14a0e:	|  |         move.l (a0),d0
   14a10:	|  |         moveq #32,d1
   14a12:	|  |         add.l d0,d1
   14a14:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   14a18:	|  \-------> movea.l 12(sp),a0
   14a1c:	|            move.l (a0),d0
   14a1e:	\----------- bne.s 149a0 <removeScreenRegion+0x10>
        }
    }
}
   14a20:	             nop
   14a22:	             nop
   14a24:	             movea.l (sp)+,a6
   14a26:	             lea 12(sp),sp
   14a2a:	             rts

00014a2c <saveRegions>:

void saveRegions (BPTR fp) {
   14a2c:	       subq.l #8,sp
	int numRegions = 0;
   14a2e:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   14a32:	       move.l 1b702 <allScreenRegions>,(sp)
	while (thisRegion) {
   14a38:	   /-- bra.s 14a44 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   14a3a:	/--|-> movea.l (sp),a0
   14a3c:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   14a40:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   14a44:	|  \-> tst.l (sp)
   14a46:	\----- bne.s 14a3a <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   14a48:	       move.l 12(sp),-(sp)
   14a4c:	       move.l 8(sp),-(sp)
   14a50:	       jsr 8d0 <put2bytes>
   14a56:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   14a58:	       move.l 1b702 <allScreenRegions>,(sp)
	while (thisRegion) {
   14a5e:	/----- bra.w 14b06 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   14a62:	|  /-> movea.l (sp),a0
   14a64:	|  |   move.l (a0),d0
   14a66:	|  |   move.l 12(sp),-(sp)
   14a6a:	|  |   move.l d0,-(sp)
   14a6c:	|  |   jsr 8d0 <put2bytes>
   14a72:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   14a74:	|  |   movea.l (sp),a0
   14a76:	|  |   move.l 4(a0),d0
   14a7a:	|  |   move.l 12(sp),-(sp)
   14a7e:	|  |   move.l d0,-(sp)
   14a80:	|  |   jsr 8d0 <put2bytes>
   14a86:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   14a88:	|  |   movea.l (sp),a0
   14a8a:	|  |   move.l 8(a0),d0
   14a8e:	|  |   move.l 12(sp),-(sp)
   14a92:	|  |   move.l d0,-(sp)
   14a94:	|  |   jsr 8d0 <put2bytes>
   14a9a:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   14a9c:	|  |   movea.l (sp),a0
   14a9e:	|  |   move.l 12(a0),d0
   14aa2:	|  |   move.l 12(sp),-(sp)
   14aa6:	|  |   move.l d0,-(sp)
   14aa8:	|  |   jsr 8d0 <put2bytes>
   14aae:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   14ab0:	|  |   movea.l (sp),a0
   14ab2:	|  |   move.l 16(a0),d0
   14ab6:	|  |   move.l 12(sp),-(sp)
   14aba:	|  |   move.l d0,-(sp)
   14abc:	|  |   jsr 8d0 <put2bytes>
   14ac2:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   14ac4:	|  |   movea.l (sp),a0
   14ac6:	|  |   move.l 20(a0),d0
   14aca:	|  |   move.l 12(sp),-(sp)
   14ace:	|  |   move.l d0,-(sp)
   14ad0:	|  |   jsr 8d0 <put2bytes>
   14ad6:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   14ad8:	|  |   movea.l (sp),a0
   14ada:	|  |   move.l 24(a0),d0
   14ade:	|  |   move.l 12(sp),-(sp)
   14ae2:	|  |   move.l d0,-(sp)
   14ae4:	|  |   jsr 8d0 <put2bytes>
   14aea:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   14aec:	|  |   movea.l (sp),a0
   14aee:	|  |   move.l 28(a0),d0
   14af2:	|  |   move.l 12(sp),-(sp)
   14af6:	|  |   move.l d0,-(sp)
   14af8:	|  |   jsr cac8 <saveObjectRef>
   14afe:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   14b00:	|  |   movea.l (sp),a0
   14b02:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   14b06:	\--|-> tst.l (sp)
   14b08:	   \-- bne.w 14a62 <saveRegions+0x36>
	}
}
   14b0c:	       nop
   14b0e:	       nop
   14b10:	       addq.l #8,sp
   14b12:	       rts

00014b14 <showBoxes>:

void showBoxes () {
   14b14:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   14b16:	       move.l 1b702 <allScreenRegions>,(sp)

	while (huntRegion) {
   14b1c:	/----- bra.w 14bb8 <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   14b20:	|  /-> movea.l (sp),a0
   14b22:	|  |   move.l 12(a0),d0
   14b26:	|  |   movea.l d0,a1
   14b28:	|  |   movea.l (sp),a0
   14b2a:	|  |   move.l 4(a0),d0
   14b2e:	|  |   move.l d0,d1
   14b30:	|  |   movea.l (sp),a0
   14b32:	|  |   move.l (a0),d0
   14b34:	|  |   move.l a1,-(sp)
   14b36:	|  |   move.l d1,-(sp)
   14b38:	|  |   move.l d0,-(sp)
   14b3a:	|  |   jsr c3ac <drawVerticalLine>
   14b40:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   14b44:	|  |   movea.l (sp),a0
   14b46:	|  |   move.l 12(a0),d0
   14b4a:	|  |   movea.l d0,a1
   14b4c:	|  |   movea.l (sp),a0
   14b4e:	|  |   move.l 4(a0),d0
   14b52:	|  |   move.l d0,d1
   14b54:	|  |   movea.l (sp),a0
   14b56:	|  |   move.l 8(a0),d0
   14b5a:	|  |   move.l a1,-(sp)
   14b5c:	|  |   move.l d1,-(sp)
   14b5e:	|  |   move.l d0,-(sp)
   14b60:	|  |   jsr c3ac <drawVerticalLine>
   14b66:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   14b6a:	|  |   movea.l (sp),a0
   14b6c:	|  |   move.l 8(a0),d0
   14b70:	|  |   movea.l d0,a1
   14b72:	|  |   movea.l (sp),a0
   14b74:	|  |   move.l 4(a0),d0
   14b78:	|  |   move.l d0,d1
   14b7a:	|  |   movea.l (sp),a0
   14b7c:	|  |   move.l (a0),d0
   14b7e:	|  |   move.l a1,-(sp)
   14b80:	|  |   move.l d1,-(sp)
   14b82:	|  |   move.l d0,-(sp)
   14b84:	|  |   jsr c386 <drawHorizontalLine>
   14b8a:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   14b8e:	|  |   movea.l (sp),a0
   14b90:	|  |   move.l 8(a0),d0
   14b94:	|  |   movea.l d0,a1
   14b96:	|  |   movea.l (sp),a0
   14b98:	|  |   move.l 12(a0),d0
   14b9c:	|  |   move.l d0,d1
   14b9e:	|  |   movea.l (sp),a0
   14ba0:	|  |   move.l (a0),d0
   14ba2:	|  |   move.l a1,-(sp)
   14ba4:	|  |   move.l d1,-(sp)
   14ba6:	|  |   move.l d0,-(sp)
   14ba8:	|  |   jsr c386 <drawHorizontalLine>
   14bae:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   14bb2:	|  |   movea.l (sp),a0
   14bb4:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   14bb8:	\--|-> tst.l (sp)
   14bba:	   \-- bne.w 14b20 <showBoxes+0xc>
	}
   14bbe:	       nop
   14bc0:	       nop
   14bc2:	       addq.l #4,sp
   14bc4:	       rts

00014bc6 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   14bc6:	       lea -88(sp),sp
   14bca:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   14bcc:	       move.l 1b5a2 <SysBase>,d0
   14bd2:	       movea.l d0,a6
   14bd4:	       jsr -666(a6)
   14bd8:	       move.l d0,88(sp)
   14bdc:	       move.l 88(sp),d0
   14be0:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   14be4:	       move.l 84(sp),80(sp)
   14bea:	       moveq #40,d0
   14bec:	       move.l d0,76(sp)
   14bf0:	       move.l 1b5a2 <SysBase>,d0
   14bf6:	       movea.l d0,a6
   14bf8:	       movea.l 80(sp),a0
   14bfc:	       move.l 76(sp),d0
   14c00:	       jsr -654(a6)
   14c04:	       move.l d0,72(sp)
   14c08:	       move.l 72(sp),d0
   14c0c:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   14c10:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   14c16:	       move.l #101455,60(sp)
   14c1e:	       clr.l 56(sp)
   14c22:	       move.l 64(sp),52(sp)
   14c28:	       clr.l 48(sp)
   14c2c:	       move.l 1b5a2 <SysBase>,d0
   14c32:	       movea.l d0,a6
   14c34:	       movea.l 60(sp),a0
   14c38:	       move.l 56(sp),d0
   14c3c:	       movea.l 52(sp),a1
   14c40:	       move.l 48(sp),d1
   14c44:	       jsr -444(a6)
   14c48:	       move.b d0,47(sp)
   14c4c:	       move.b 47(sp),d0
   14c50:	   /-- beq.s 14c66 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   14c52:	   |   pea 18c5c <line.c.05397aaf+0x1ab>
   14c58:	   |   jsr 15fc6 <KPrintF>
   14c5e:	   |   addq.l #4,sp
        return 0;
   14c60:	   |   moveq #0,d0
   14c62:	/--|-- bra.w 14d20 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   14c66:	|  \-> movea.l 64(sp),a0
   14c6a:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   14c70:	|      lea 92(sp),a0
   14c74:	|      lea -86(a0),a0
   14c78:	|      move.l a0,38(sp)
   14c7c:	|      movea.l 42(sp),a6
   14c80:	|      movea.l 38(sp),a0
   14c84:	|      jsr -60(a6)
   14c88:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   14c8c:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   14c92:	|      move.l #1103515245,-(sp)
   14c98:	|      move.l 34(sp),-(sp)
   14c9c:	|      jsr 16800 <__mulsi3>
   14ca2:	|      addq.l #8,sp
   14ca4:	|      addi.l #12345,d0
   14caa:	|      move.l d0,d1
   14cac:	|      bclr #31,d1
   14cb0:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   14cb4:	|      move.l 30(sp),d0
   14cb8:	|      pea 64 <_start+0x64>
   14cbc:	|      move.l d0,-(sp)
   14cbe:	|      jsr 168da <__umodsi3>
   14cc4:	|      addq.l #8,sp
   14cc6:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   14cca:	|      move.l 26(sp),-(sp)
   14cce:	|      pea 18c79 <line.c.05397aaf+0x1c8>
   14cd4:	|      jsr 15fc6 <KPrintF>
   14cda:	|      addq.l #8,sp

    CloseDevice(ioreq);
   14cdc:	|      move.l 64(sp),22(sp)
   14ce2:	|      move.l 1b5a2 <SysBase>,d0
   14ce8:	|      movea.l d0,a6
   14cea:	|      movea.l 22(sp),a1
   14cee:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   14cf2:	|      move.l 64(sp),18(sp)
   14cf8:	|      move.l 1b5a2 <SysBase>,d0
   14cfe:	|      movea.l d0,a6
   14d00:	|      movea.l 18(sp),a0
   14d04:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   14d08:	|      move.l 84(sp),14(sp)
   14d0e:	|      move.l 1b5a2 <SysBase>,d0
   14d14:	|      movea.l d0,a6
   14d16:	|      movea.l 14(sp),a0
   14d1a:	|      jsr -672(a6)
    return 0;
   14d1e:	|      moveq #0,d0
   14d20:	\----> movea.l (sp)+,a6
   14d22:	       lea 88(sp),sp
   14d26:	       rts

00014d28 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   14d28:	             lea -20(sp),sp
   14d2c:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   14d2e:	             move.l 1b70a <allLoadedBanks>,20(sp)
	while (returnMe) {
   14d36:	      /----- bra.s 14d68 <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   14d38:	   /--|----> movea.l 20(sp),a0
   14d3c:	   |  |      move.l (a0),d0
   14d3e:	   |  |      cmp.l 28(sp),d0
   14d42:	   |  |  /-- bne.s 14d5e <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   14d44:	   |  |  |   movea.l 20(sp),a0
   14d48:	   |  |  |   move.l 4(a0),d0
   14d4c:	   |  |  |   addq.l #1,d0
   14d4e:	   |  |  |   movea.l 20(sp),a0
   14d52:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   14d56:	   |  |  |   move.l 20(sp),d0
   14d5a:	/--|--|--|-- bra.w 14e1e <loadBankForAnim+0xf6>
		}		
		returnMe = returnMe->next;
   14d5e:	|  |  |  \-> movea.l 20(sp),a0
   14d62:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   14d68:	|  |  \----> tst.l 20(sp)
   14d6c:	|  \-------- bne.s 14d38 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   14d6e:	|            moveq #26,d0
   14d70:	|            move.l d0,16(sp)
   14d74:	|            clr.l 12(sp)
   14d78:	|            move.l 1b5a2 <SysBase>,d0
   14d7e:	|            movea.l d0,a6
   14d80:	|            move.l 16(sp),d0
   14d84:	|            move.l 12(sp),d1
   14d88:	|            jsr -684(a6)
   14d8c:	|            move.l d0,8(sp)
   14d90:	|            move.l 8(sp),d0
   14d94:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   14d98:	|     /----- beq.w 14e1c <loadBankForAnim+0xf4>
		returnMe->ID = ID;
   14d9c:	|     |      movea.l 20(sp),a0
   14da0:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank, FALSE)) {
   14da4:	|     |      move.l 20(sp),d0
   14da8:	|     |      addq.l #8,d0
   14daa:	|     |      clr.l -(sp)
   14dac:	|     |      move.l d0,-(sp)
   14dae:	|     |      move.l 36(sp),-(sp)
   14db2:	|     |      jsr 7dd8 <loadSpriteBank>
   14db8:	|     |      lea 12(sp),sp
   14dbc:	|     |      tst.w d0
   14dbe:	|     |  /-- beq.s 14df4 <loadBankForAnim+0xcc>
			returnMe->timesUsed = 1;
   14dc0:	|     |  |   movea.l 20(sp),a0
   14dc4:	|     |  |   moveq #1,d0
   14dc6:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   14dca:	|     |  |   move.l 1b70a <allLoadedBanks>,d0
   14dd0:	|     |  |   movea.l 20(sp),a0
   14dd4:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   14dd8:	|     |  |   move.l 20(sp),1b70a <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
   14de0:	|     |  |   pea 18c8c <line.c.05397aaf+0x1db>
   14de6:	|     |  |   jsr 15fc6 <KPrintF>
   14dec:	|     |  |   addq.l #4,sp
			return returnMe;
   14dee:	|     |  |   move.l 20(sp),d0
   14df2:	+-----|--|-- bra.s 14e1e <loadBankForAnim+0xf6>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
   14df4:	|     |  \-> pea 18cb9 <line.c.05397aaf+0x208>
   14dfa:	|     |      jsr 15fc6 <KPrintF>
   14e00:	|     |      addq.l #4,sp
			FreeVec(returnMe);
   14e02:	|     |      move.l 20(sp),4(sp)
   14e08:	|     |      move.l 1b5a2 <SysBase>,d0
   14e0e:	|     |      movea.l d0,a6
   14e10:	|     |      movea.l 4(sp),a1
   14e14:	|     |      jsr -690(a6)
			return NULL;
   14e18:	|     |      moveq #0,d0
   14e1a:	+-----|----- bra.s 14e1e <loadBankForAnim+0xf6>
		}
	} else return NULL;
   14e1c:	|     \----> moveq #0,d0
}
   14e1e:	\----------> movea.l (sp)+,a6
   14e20:	             lea 20(sp),sp
   14e24:	             rts

00014e26 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   14e26:	       lea -32(sp),sp
   14e2a:	       move.l d3,-(sp)
   14e2c:	       move.l d2,-(sp)
	int xDiff = x2 - x1;
   14e2e:	       move.l 60(sp),d0
   14e32:	       sub.l 52(sp),d0
   14e36:	       move.l d0,36(sp)
	int yDiff = y2 - y1;
   14e3a:	       move.l 64(sp),d0
   14e3e:	       sub.l 56(sp),d0
   14e42:	       move.l d0,32(sp)

	double m = xDiff * (xP - x1) + yDiff * (yP - y1);
   14e46:	       move.l 68(sp),d0
   14e4a:	       sub.l 52(sp),d0
   14e4e:	       move.l 36(sp),-(sp)
   14e52:	       move.l d0,-(sp)
   14e54:	       jsr 16800 <__mulsi3>
   14e5a:	       addq.l #8,sp
   14e5c:	       move.l d0,d2
   14e5e:	       move.l 72(sp),d0
   14e62:	       sub.l 56(sp),d0
   14e66:	       move.l 32(sp),-(sp)
   14e6a:	       move.l d0,-(sp)
   14e6c:	       jsr 16800 <__mulsi3>
   14e72:	       addq.l #8,sp
   14e74:	       add.l d2,d0
   14e76:	       move.l d0,-(sp)
   14e78:	       jsr 1623e <__floatsidf>
   14e7e:	       addq.l #4,sp
   14e80:	       move.l d0,16(sp)
   14e84:	       move.l d1,20(sp)
   14e88:	       move.l 16(sp),24(sp)
   14e8e:	       move.l 20(sp),28(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   14e94:	       move.l 36(sp),-(sp)
   14e98:	       move.l 40(sp),-(sp)
   14e9c:	       jsr 16800 <__mulsi3>
   14ea2:	       addq.l #8,sp
   14ea4:	       move.l d0,d2
   14ea6:	       move.l 32(sp),-(sp)
   14eaa:	       move.l 36(sp),-(sp)
   14eae:	       jsr 16800 <__mulsi3>
   14eb4:	       addq.l #8,sp
   14eb6:	       add.l d2,d0
   14eb8:	       move.l d0,-(sp)
   14eba:	       jsr 1623e <__floatsidf>
   14ec0:	       addq.l #4,sp
   14ec2:	       move.l d1,-(sp)
   14ec4:	       move.l d0,-(sp)
   14ec6:	       move.l 36(sp),-(sp)
   14eca:	       move.l 36(sp),-(sp)
   14ece:	       jsr 160c8 <__divdf3>
   14ed4:	       lea 16(sp),sp
   14ed8:	       move.l d0,8(sp)
   14edc:	       move.l d1,12(sp)
   14ee0:	       move.l 8(sp),24(sp)
   14ee6:	       move.l 12(sp),28(sp)

	if (m < 0) {
   14eec:	       clr.l -(sp)
   14eee:	       clr.l -(sp)
   14ef0:	       move.l 36(sp),-(sp)
   14ef4:	       move.l 36(sp),-(sp)
   14ef8:	       jsr 16456 <__ltdf2>
   14efe:	       lea 16(sp),sp
   14f02:	       tst.l d0
   14f04:	   /-- bge.s 14f1a <closestPointOnLine+0xf4>
		*closestX = x1;
   14f06:	   |   movea.l 44(sp),a0
   14f0a:	   |   move.l 52(sp),(a0)
		*closestY = y1;
   14f0e:	   |   movea.l 48(sp),a0
   14f12:	   |   move.l 56(sp),(a0)
   14f16:	/--|-- bra.w 14ffc <closestPointOnLine+0x1d6>
	} else if (m > 1) {
   14f1a:	|  \-> clr.l -(sp)
   14f1c:	|      move.l #1072693248,-(sp)
   14f22:	|      move.l 36(sp),-(sp)
   14f26:	|      move.l 36(sp),-(sp)
   14f2a:	|      jsr 1639c <__gtdf2>
   14f30:	|      lea 16(sp),sp
   14f34:	|      tst.l d0
   14f36:	|  /-- ble.s 14f4c <closestPointOnLine+0x126>
		*closestX = x2;
   14f38:	|  |   movea.l 44(sp),a0
   14f3c:	|  |   move.l 60(sp),(a0)
		*closestY = y2;
   14f40:	|  |   movea.l 48(sp),a0
   14f44:	|  |   move.l 64(sp),(a0)
   14f48:	+--|-- bra.w 14ffc <closestPointOnLine+0x1d6>
	} else {
		*closestX = x1 + m * xDiff;
   14f4c:	|  \-> move.l 52(sp),-(sp)
   14f50:	|      jsr 1623e <__floatsidf>
   14f56:	|      addq.l #4,sp
   14f58:	|      move.l d0,d2
   14f5a:	|      move.l d1,d3
   14f5c:	|      move.l 36(sp),-(sp)
   14f60:	|      jsr 1623e <__floatsidf>
   14f66:	|      addq.l #4,sp
   14f68:	|      move.l 28(sp),-(sp)
   14f6c:	|      move.l 28(sp),-(sp)
   14f70:	|      move.l d1,-(sp)
   14f72:	|      move.l d0,-(sp)
   14f74:	|      jsr 162ce <__muldf3>
   14f7a:	|      lea 16(sp),sp
   14f7e:	|      move.l d1,-(sp)
   14f80:	|      move.l d0,-(sp)
   14f82:	|      move.l d3,-(sp)
   14f84:	|      move.l d2,-(sp)
   14f86:	|      jsr 16066 <__adddf3>
   14f8c:	|      lea 16(sp),sp
   14f90:	|      move.l d1,-(sp)
   14f92:	|      move.l d0,-(sp)
   14f94:	|      jsr 161d6 <__fixdfsi>
   14f9a:	|      addq.l #8,sp
   14f9c:	|      movea.l 44(sp),a0
   14fa0:	|      move.l d0,(a0)
		*closestY = y1 + m * yDiff;
   14fa2:	|      move.l 56(sp),-(sp)
   14fa6:	|      jsr 1623e <__floatsidf>
   14fac:	|      addq.l #4,sp
   14fae:	|      move.l d0,d2
   14fb0:	|      move.l d1,d3
   14fb2:	|      move.l 32(sp),-(sp)
   14fb6:	|      jsr 1623e <__floatsidf>
   14fbc:	|      addq.l #4,sp
   14fbe:	|      move.l 28(sp),-(sp)
   14fc2:	|      move.l 28(sp),-(sp)
   14fc6:	|      move.l d1,-(sp)
   14fc8:	|      move.l d0,-(sp)
   14fca:	|      jsr 162ce <__muldf3>
   14fd0:	|      lea 16(sp),sp
   14fd4:	|      move.l d1,-(sp)
   14fd6:	|      move.l d0,-(sp)
   14fd8:	|      move.l d3,-(sp)
   14fda:	|      move.l d2,-(sp)
   14fdc:	|      jsr 16066 <__adddf3>
   14fe2:	|      lea 16(sp),sp
   14fe6:	|      move.l d1,-(sp)
   14fe8:	|      move.l d0,-(sp)
   14fea:	|      jsr 161d6 <__fixdfsi>
   14ff0:	|      addq.l #8,sp
   14ff2:	|      movea.l 48(sp),a0
   14ff6:	|      move.l d0,(a0)
		return TRUE;
   14ff8:	|      moveq #1,d0
   14ffa:	|  /-- bra.s 14ffe <closestPointOnLine+0x1d8>
	}
	return FALSE;
   14ffc:	\--|-> clr.w d0
}
   14ffe:	   \-> move.l (sp)+,d2
   15000:	       move.l (sp)+,d3
   15002:	       lea 32(sp),sp
   15006:	       rts

00015008 <drawFloor>:

void drawFloor() {
   15008:	                lea -12(sp),sp
   1500c:	                move.l d3,-(sp)
   1500e:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   15010:	                clr.l 16(sp)
   15014:	   /----------- bra.w 15228 <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   15018:	/--|----------> movea.l 1b70e <currentFloor>,a0
   1501e:	|  |            move.l 12(a0),d1
   15022:	|  |            move.l 16(sp),d0
   15026:	|  |            lsl.l #3,d0
   15028:	|  |            movea.l d1,a0
   1502a:	|  |            adda.l d0,a0
   1502c:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   15030:	|  |            moveq #1,d0
   15032:	|  |            cmp.l 8(sp),d0
   15036:	|  |  /-------- bge.w 15224 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   1503a:	|  |  |         moveq #1,d0
   1503c:	|  |  |         move.l d0,12(sp)
   15040:	|  |  |     /-- bra.w 1513a <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   15044:	|  |  |  /--|-> movea.l 1b70e <currentFloor>,a0
   1504a:	|  |  |  |  |   move.l 4(a0),d1
   1504e:	|  |  |  |  |   movea.l 1b70e <currentFloor>,a0
   15054:	|  |  |  |  |   movea.l 12(a0),a0
   15058:	|  |  |  |  |   move.l 16(sp),d0
   1505c:	|  |  |  |  |   lsl.l #3,d0
   1505e:	|  |  |  |  |   adda.l d0,a0
   15060:	|  |  |  |  |   movea.l 4(a0),a0
   15064:	|  |  |  |  |   move.l 12(sp),d0
   15068:	|  |  |  |  |   add.l d0,d0
   1506a:	|  |  |  |  |   add.l d0,d0
   1506c:	|  |  |  |  |   adda.l d0,a0
   1506e:	|  |  |  |  |   move.l (a0),d0
   15070:	|  |  |  |  |   lsl.l #3,d0
   15072:	|  |  |  |  |   movea.l d1,a0
   15074:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   15076:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   1507a:	|  |  |  |  |   movea.l 1b70e <currentFloor>,a0
   15080:	|  |  |  |  |   move.l 4(a0),d1
   15084:	|  |  |  |  |   movea.l 1b70e <currentFloor>,a0
   1508a:	|  |  |  |  |   movea.l 12(a0),a0
   1508e:	|  |  |  |  |   move.l 16(sp),d0
   15092:	|  |  |  |  |   lsl.l #3,d0
   15094:	|  |  |  |  |   adda.l d0,a0
   15096:	|  |  |  |  |   movea.l 4(a0),a0
   1509a:	|  |  |  |  |   move.l 12(sp),d0
   1509e:	|  |  |  |  |   add.l d0,d0
   150a0:	|  |  |  |  |   add.l d0,d0
   150a2:	|  |  |  |  |   adda.l d0,a0
   150a4:	|  |  |  |  |   move.l (a0),d0
   150a6:	|  |  |  |  |   lsl.l #3,d0
   150a8:	|  |  |  |  |   movea.l d1,a0
   150aa:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   150ac:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   150ae:	|  |  |  |  |   movea.l 1b70e <currentFloor>,a0
   150b4:	|  |  |  |  |   move.l 4(a0),d1
   150b8:	|  |  |  |  |   movea.l 1b70e <currentFloor>,a0
   150be:	|  |  |  |  |   movea.l 12(a0),a0
   150c2:	|  |  |  |  |   move.l 16(sp),d0
   150c6:	|  |  |  |  |   lsl.l #3,d0
   150c8:	|  |  |  |  |   adda.l d0,a0
   150ca:	|  |  |  |  |   movea.l 4(a0),a0
   150ce:	|  |  |  |  |   move.l 12(sp),d0
   150d2:	|  |  |  |  |   addi.l #1073741823,d0
   150d8:	|  |  |  |  |   add.l d0,d0
   150da:	|  |  |  |  |   add.l d0,d0
   150dc:	|  |  |  |  |   adda.l d0,a0
   150de:	|  |  |  |  |   move.l (a0),d0
   150e0:	|  |  |  |  |   lsl.l #3,d0
   150e2:	|  |  |  |  |   movea.l d1,a0
   150e4:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   150e6:	|  |  |  |  |   move.l 4(a0),d1
   150ea:	|  |  |  |  |   movea.l 1b70e <currentFloor>,a0
   150f0:	|  |  |  |  |   move.l 4(a0),d3
   150f4:	|  |  |  |  |   movea.l 1b70e <currentFloor>,a0
   150fa:	|  |  |  |  |   movea.l 12(a0),a0
   150fe:	|  |  |  |  |   move.l 16(sp),d0
   15102:	|  |  |  |  |   lsl.l #3,d0
   15104:	|  |  |  |  |   adda.l d0,a0
   15106:	|  |  |  |  |   movea.l 4(a0),a0
   1510a:	|  |  |  |  |   move.l 12(sp),d0
   1510e:	|  |  |  |  |   addi.l #1073741823,d0
   15114:	|  |  |  |  |   add.l d0,d0
   15116:	|  |  |  |  |   add.l d0,d0
   15118:	|  |  |  |  |   adda.l d0,a0
   1511a:	|  |  |  |  |   move.l (a0),d0
   1511c:	|  |  |  |  |   lsl.l #3,d0
   1511e:	|  |  |  |  |   movea.l d3,a0
   15120:	|  |  |  |  |   adda.l d0,a0
   15122:	|  |  |  |  |   move.l (a0),d0
   15124:	|  |  |  |  |   move.l d2,-(sp)
   15126:	|  |  |  |  |   move.l a1,-(sp)
   15128:	|  |  |  |  |   move.l d1,-(sp)
   1512a:	|  |  |  |  |   move.l d0,-(sp)
   1512c:	|  |  |  |  |   jsr 2ebc <drawLine>
   15132:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   15136:	|  |  |  |  |   addq.l #1,12(sp)
   1513a:	|  |  |  |  \-> move.l 12(sp),d0
   1513e:	|  |  |  |      cmp.l 8(sp),d0
   15142:	|  |  |  \----- blt.w 15044 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   15146:	|  |  |         movea.l 1b70e <currentFloor>,a0
   1514c:	|  |  |         move.l 4(a0),d1
   15150:	|  |  |         movea.l 1b70e <currentFloor>,a0
   15156:	|  |  |         movea.l 12(a0),a0
   1515a:	|  |  |         move.l 16(sp),d0
   1515e:	|  |  |         lsl.l #3,d0
   15160:	|  |  |         adda.l d0,a0
   15162:	|  |  |         movea.l 4(a0),a0
   15166:	|  |  |         move.l 8(sp),d0
   1516a:	|  |  |         addi.l #1073741823,d0
   15170:	|  |  |         add.l d0,d0
   15172:	|  |  |         add.l d0,d0
   15174:	|  |  |         adda.l d0,a0
   15176:	|  |  |         move.l (a0),d0
   15178:	|  |  |         lsl.l #3,d0
   1517a:	|  |  |         movea.l d1,a0
   1517c:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   1517e:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   15182:	|  |  |         movea.l 1b70e <currentFloor>,a0
   15188:	|  |  |         move.l 4(a0),d1
   1518c:	|  |  |         movea.l 1b70e <currentFloor>,a0
   15192:	|  |  |         movea.l 12(a0),a0
   15196:	|  |  |         move.l 16(sp),d0
   1519a:	|  |  |         lsl.l #3,d0
   1519c:	|  |  |         adda.l d0,a0
   1519e:	|  |  |         movea.l 4(a0),a0
   151a2:	|  |  |         move.l 8(sp),d0
   151a6:	|  |  |         addi.l #1073741823,d0
   151ac:	|  |  |         add.l d0,d0
   151ae:	|  |  |         add.l d0,d0
   151b0:	|  |  |         adda.l d0,a0
   151b2:	|  |  |         move.l (a0),d0
   151b4:	|  |  |         lsl.l #3,d0
   151b6:	|  |  |         movea.l d1,a0
   151b8:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   151ba:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   151bc:	|  |  |         movea.l 1b70e <currentFloor>,a0
   151c2:	|  |  |         move.l 4(a0),d1
   151c6:	|  |  |         movea.l 1b70e <currentFloor>,a0
   151cc:	|  |  |         movea.l 12(a0),a0
   151d0:	|  |  |         move.l 16(sp),d0
   151d4:	|  |  |         lsl.l #3,d0
   151d6:	|  |  |         adda.l d0,a0
   151d8:	|  |  |         movea.l 4(a0),a0
   151dc:	|  |  |         move.l (a0),d0
   151de:	|  |  |         lsl.l #3,d0
   151e0:	|  |  |         movea.l d1,a0
   151e2:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   151e4:	|  |  |         move.l 4(a0),d1
   151e8:	|  |  |         movea.l 1b70e <currentFloor>,a0
   151ee:	|  |  |         move.l 4(a0),d3
   151f2:	|  |  |         movea.l 1b70e <currentFloor>,a0
   151f8:	|  |  |         movea.l 12(a0),a0
   151fc:	|  |  |         move.l 16(sp),d0
   15200:	|  |  |         lsl.l #3,d0
   15202:	|  |  |         adda.l d0,a0
   15204:	|  |  |         movea.l 4(a0),a0
   15208:	|  |  |         move.l (a0),d0
   1520a:	|  |  |         lsl.l #3,d0
   1520c:	|  |  |         movea.l d3,a0
   1520e:	|  |  |         adda.l d0,a0
   15210:	|  |  |         move.l (a0),d0
   15212:	|  |  |         move.l d2,-(sp)
   15214:	|  |  |         move.l a1,-(sp)
   15216:	|  |  |         move.l d1,-(sp)
   15218:	|  |  |         move.l d0,-(sp)
   1521a:	|  |  |         jsr 2ebc <drawLine>
   15220:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   15224:	|  |  \-------> addq.l #1,16(sp)
   15228:	|  \----------> movea.l 1b70e <currentFloor>,a0
   1522e:	|               move.l 8(a0),d0
   15232:	|               cmp.l 16(sp),d0
   15236:	\-------------- bgt.w 15018 <drawFloor+0x10>
        }
    }
}
   1523a:	                nop
   1523c:	                nop
   1523e:	                move.l (sp)+,d2
   15240:	                move.l (sp)+,d3
   15242:	                lea 12(sp),sp
   15246:	                rts

00015248 <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   15248:	                      lea -12(sp),sp
    int sharedVertices = 0;
   1524c:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   15250:	                      clr.l 4(sp)
   15254:	   /----------------- bra.w 152e6 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   15258:	/--|----------------> clr.l (sp)
   1525a:	|  |     /----------- bra.s 152d6 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   1525c:	|  |  /--|----------> movea.l 16(sp),a0
   15260:	|  |  |  |            move.l 4(a0),d1
   15264:	|  |  |  |            move.l 4(sp),d0
   15268:	|  |  |  |            add.l d0,d0
   1526a:	|  |  |  |            add.l d0,d0
   1526c:	|  |  |  |            movea.l d1,a0
   1526e:	|  |  |  |            adda.l d0,a0
   15270:	|  |  |  |            move.l (a0),d1
   15272:	|  |  |  |            movea.l 20(sp),a0
   15276:	|  |  |  |            movea.l 4(a0),a0
   1527a:	|  |  |  |            move.l (sp),d0
   1527c:	|  |  |  |            add.l d0,d0
   1527e:	|  |  |  |            add.l d0,d0
   15280:	|  |  |  |            adda.l d0,a0
   15282:	|  |  |  |            move.l (a0),d0
   15284:	|  |  |  |            cmp.l d1,d0
   15286:	|  |  |  |  /-------- bne.s 152d4 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   15288:	|  |  |  |  |         move.l 8(sp),d0
   1528c:	|  |  |  |  |         move.l d0,d1
   1528e:	|  |  |  |  |         addq.l #1,d1
   15290:	|  |  |  |  |         move.l d1,8(sp)
   15294:	|  |  |  |  |         tst.l d0
   15296:	|  |  |  |  |     /-- beq.s 152b8 <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   15298:	|  |  |  |  |     |   movea.l 16(sp),a0
   1529c:	|  |  |  |  |     |   move.l 4(a0),d1
   152a0:	|  |  |  |  |     |   move.l 4(sp),d0
   152a4:	|  |  |  |  |     |   add.l d0,d0
   152a6:	|  |  |  |  |     |   add.l d0,d0
   152a8:	|  |  |  |  |     |   movea.l d1,a0
   152aa:	|  |  |  |  |     |   adda.l d0,a0
   152ac:	|  |  |  |  |     |   move.l (a0),d0
   152ae:	|  |  |  |  |     |   movea.l 28(sp),a0
   152b2:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   152b4:	|  |  |  |  |     |   moveq #1,d0
   152b6:	|  |  |  |  |  /--|-- bra.s 152f6 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   152b8:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   152bc:	|  |  |  |  |  |      move.l 4(a0),d1
   152c0:	|  |  |  |  |  |      move.l 4(sp),d0
   152c4:	|  |  |  |  |  |      add.l d0,d0
   152c6:	|  |  |  |  |  |      add.l d0,d0
   152c8:	|  |  |  |  |  |      movea.l d1,a0
   152ca:	|  |  |  |  |  |      adda.l d0,a0
   152cc:	|  |  |  |  |  |      move.l (a0),d0
   152ce:	|  |  |  |  |  |      movea.l 24(sp),a0
   152d2:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   152d4:	|  |  |  |  \--|----> addq.l #1,(sp)
   152d6:	|  |  |  \-----|----> movea.l 20(sp),a0
   152da:	|  |  |        |      move.l (a0),d0
   152dc:	|  |  |        |      cmp.l (sp),d0
   152de:	|  |  \--------|----- bgt.w 1525c <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   152e2:	|  |           |      addq.l #1,4(sp)
   152e6:	|  \-----------|----> movea.l 16(sp),a0
   152ea:	|              |      move.l (a0),d0
   152ec:	|              |      cmp.l 4(sp),d0
   152f0:	\--------------|----- bgt.w 15258 <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   152f4:	               |      clr.w d0
}
   152f6:	               \----> lea 12(sp),sp
   152fa:	                      rts

000152fc <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   152fc:	movea.l 1b70e <currentFloor>,a0
   15302:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   15306:	movea.l 1b70e <currentFloor>,a0
   1530c:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   15310:	movea.l 1b70e <currentFloor>,a0
   15316:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   1531a:	movea.l 1b70e <currentFloor>,a0
   15320:	clr.l 16(a0)
}
   15324:	nop
   15326:	rts

00015328 <inFloor>:

int inFloor (int x, int y) {
   15328:	          subq.l #8,sp
	int i, r = -1;
   1532a:	          moveq #-1,d0
   1532c:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   1532e:	          clr.l 4(sp)
   15332:	   /----- bra.s 15366 <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   15334:	/--|----> movea.l 1b70e <currentFloor>,a0
   1533a:	|  |      move.l 12(a0),d1
   1533e:	|  |      move.l 4(sp),d0
   15342:	|  |      lsl.l #3,d0
   15344:	|  |      add.l d1,d0
   15346:	|  |      move.l 16(sp),-(sp)
   1534a:	|  |      move.l 16(sp),-(sp)
   1534e:	|  |      move.l d0,-(sp)
   15350:	|  |      jsr 15532 <pointInFloorPolygon>
   15356:	|  |      lea 12(sp),sp
   1535a:	|  |      tst.w d0
   1535c:	|  |  /-- beq.s 15362 <inFloor+0x3a>
			r = i;
   1535e:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   15362:	|  |  \-> addq.l #1,4(sp)
   15366:	|  \----> movea.l 1b70e <currentFloor>,a0
   1536c:	|         move.l 8(a0),d0
   15370:	|         cmp.l 4(sp),d0
   15374:	\-------- bgt.s 15334 <inFloor+0xc>

	return r;
   15376:	          move.l (sp),d0
}
   15378:	          addq.l #8,sp
   1537a:	          rts

0001537c <initFloor>:

BOOL initFloor () {
   1537c:	       lea -12(sp),sp
   15380:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   15382:	       moveq #20,d0
   15384:	       move.l d0,12(sp)
   15388:	       clr.l 8(sp)
   1538c:	       move.l 1b5a2 <SysBase>,d0
   15392:	       movea.l d0,a6
   15394:	       move.l 12(sp),d0
   15398:	       move.l 8(sp),d1
   1539c:	       jsr -684(a6)
   153a0:	       move.l d0,4(sp)
   153a4:	       move.l 4(sp),d0
   153a8:	       move.l d0,1b70e <currentFloor>

    if(currentFloor == 0) {
   153ae:	       move.l 1b70e <currentFloor>,d0
   153b4:	/----- bne.s 153c8 <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   153b6:	|      pea 18cf2 <line.c.05397aaf+0x241>
   153bc:	|      jsr 15fc6 <KPrintF>
   153c2:	|      addq.l #4,sp
        return FALSE;
   153c4:	|      clr.w d0
   153c6:	|  /-- bra.s 153d0 <initFloor+0x54>
    }

	noFloor ();
   153c8:	\--|-> jsr 152fc <noFloor>
	return TRUE;
   153ce:	   |   moveq #1,d0
}
   153d0:	   \-> movea.l (sp)+,a6
   153d2:	       lea 12(sp),sp
   153d6:	       rts

000153d8 <killFloor>:

void killFloor () {
   153d8:	       lea -24(sp),sp
   153dc:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   153de:	       clr.l 24(sp)
   153e2:	   /-- bra.s 1543c <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   153e4:	/--|-> movea.l 1b70e <currentFloor>,a0
   153ea:	|  |   move.l 12(a0),d1
   153ee:	|  |   move.l 24(sp),d0
   153f2:	|  |   lsl.l #3,d0
   153f4:	|  |   movea.l d1,a0
   153f6:	|  |   adda.l d0,a0
   153f8:	|  |   move.l 4(a0),8(sp)
   153fe:	|  |   move.l 1b5a2 <SysBase>,d0
   15404:	|  |   movea.l d0,a6
   15406:	|  |   movea.l 8(sp),a1
   1540a:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   1540e:	|  |   movea.l 1b70e <currentFloor>,a0
   15414:	|  |   move.l 16(a0),d1
   15418:	|  |   move.l 24(sp),d0
   1541c:	|  |   add.l d0,d0
   1541e:	|  |   add.l d0,d0
   15420:	|  |   movea.l d1,a0
   15422:	|  |   adda.l d0,a0
   15424:	|  |   move.l (a0),4(sp)
   15428:	|  |   move.l 1b5a2 <SysBase>,d0
   1542e:	|  |   movea.l d0,a6
   15430:	|  |   movea.l 4(sp),a1
   15434:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   15438:	|  |   addq.l #1,24(sp)
   1543c:	|  \-> movea.l 1b70e <currentFloor>,a0
   15442:	|      move.l 8(a0),d0
   15446:	|      cmp.l 24(sp),d0
   1544a:	\----- bgt.s 153e4 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   1544c:	       movea.l 1b70e <currentFloor>,a0
   15452:	       move.l 12(a0),20(sp)
   15458:	       move.l 1b5a2 <SysBase>,d0
   1545e:	       movea.l d0,a6
   15460:	       movea.l 20(sp),a1
   15464:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   15468:	       movea.l 1b70e <currentFloor>,a0
   1546e:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   15472:	       movea.l 1b70e <currentFloor>,a0
   15478:	       move.l 4(a0),16(sp)
   1547e:	       move.l 1b5a2 <SysBase>,d0
   15484:	       movea.l d0,a6
   15486:	       movea.l 16(sp),a1
   1548a:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   1548e:	       movea.l 1b70e <currentFloor>,a0
   15494:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   15498:	       movea.l 1b70e <currentFloor>,a0
   1549e:	       move.l 16(a0),12(sp)
   154a4:	       move.l 1b5a2 <SysBase>,d0
   154aa:	       movea.l d0,a6
   154ac:	       movea.l 12(sp),a1
   154b0:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   154b4:	       movea.l 1b70e <currentFloor>,a0
   154ba:	       clr.l 16(a0)
}
   154be:	       nop
   154c0:	       movea.l (sp)+,a6
   154c2:	       lea 24(sp),sp
   154c6:	       rts

000154c8 <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   154c8:	                   lea -12(sp),sp
	int sharedVertices = 0;
   154cc:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   154d0:	                   clr.l 4(sp)
   154d4:	   /-------------- bra.s 15520 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   154d6:	/--|-------------> clr.l (sp)
   154d8:	|  |     /-------- bra.s 15514 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   154da:	|  |  /--|-------> move.l 20(sp),d1
   154de:	|  |  |  |         move.l 4(sp),d0
   154e2:	|  |  |  |         add.l d0,d0
   154e4:	|  |  |  |         add.l d0,d0
   154e6:	|  |  |  |         movea.l d1,a0
   154e8:	|  |  |  |         adda.l d0,a0
   154ea:	|  |  |  |         move.l (a0),d1
   154ec:	|  |  |  |         movea.l 28(sp),a0
   154f0:	|  |  |  |         move.l (sp),d0
   154f2:	|  |  |  |         add.l d0,d0
   154f4:	|  |  |  |         add.l d0,d0
   154f6:	|  |  |  |         adda.l d0,a0
   154f8:	|  |  |  |         move.l (a0),d0
   154fa:	|  |  |  |         cmp.l d1,d0
   154fc:	|  |  |  |     /-- bne.s 15512 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   154fe:	|  |  |  |     |   move.l 8(sp),d0
   15502:	|  |  |  |     |   move.l d0,d1
   15504:	|  |  |  |     |   addq.l #1,d1
   15506:	|  |  |  |     |   move.l d1,8(sp)
   1550a:	|  |  |  |     |   tst.l d0
   1550c:	|  |  |  |     +-- beq.s 15512 <polysShareSide+0x4a>
   1550e:	|  |  |  |     |   moveq #1,d0
   15510:	|  |  |  |  /--|-- bra.s 1552c <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   15512:	|  |  |  |  |  \-> addq.l #1,(sp)
   15514:	|  |  |  \--|----> move.l 24(sp),d0
   15518:	|  |  |     |      cmp.l (sp),d0
   1551a:	|  |  \-----|----- bgt.s 154da <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   1551c:	|  |        |      addq.l #1,4(sp)
   15520:	|  \--------|----> move.l 16(sp),d0
   15524:	|           |      cmp.l 4(sp),d0
   15528:	\-----------|----- bgt.s 154d6 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   1552a:	            |      clr.w d0
}
   1552c:	            \----> lea 12(sp),sp
   15530:	                   rts

00015532 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   15532:	             lea -28(sp),sp
   15536:	             move.l d3,-(sp)
   15538:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   1553a:	             clr.l 32(sp)
   1553e:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   15542:	             movea.l 40(sp),a0
   15546:	             move.l (a0),d0
   15548:	             move.l d0,d1
   1554a:	             subq.l #1,d1
   1554c:	             move.l d1,28(sp)
   15550:	   /-------- bra.w 1574a <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   15554:	/--|-------> movea.l 1b70e <currentFloor>,a0
   1555a:	|  |         move.l 4(a0),d1
   1555e:	|  |         movea.l 40(sp),a0
   15562:	|  |         movea.l 4(a0),a0
   15566:	|  |         move.l 32(sp),d0
   1556a:	|  |         add.l d0,d0
   1556c:	|  |         add.l d0,d0
   1556e:	|  |         adda.l d0,a0
   15570:	|  |         move.l (a0),d0
   15572:	|  |         lsl.l #3,d0
   15574:	|  |         movea.l d1,a0
   15576:	|  |         adda.l d0,a0
   15578:	|  |         move.l (a0),d0
   1557a:	|  |         move.l d0,-(sp)
   1557c:	|  |         jsr 1627e <__floatsisf>
   15582:	|  |         addq.l #4,sp
   15584:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   15588:	|  |         movea.l 1b70e <currentFloor>,a0
   1558e:	|  |         move.l 4(a0),d1
   15592:	|  |         movea.l 40(sp),a0
   15596:	|  |         movea.l 4(a0),a0
   1559a:	|  |         move.l 32(sp),d0
   1559e:	|  |         add.l d0,d0
   155a0:	|  |         add.l d0,d0
   155a2:	|  |         adda.l d0,a0
   155a4:	|  |         move.l (a0),d0
   155a6:	|  |         lsl.l #3,d0
   155a8:	|  |         movea.l d1,a0
   155aa:	|  |         adda.l d0,a0
   155ac:	|  |         move.l 4(a0),d0
   155b0:	|  |         move.l d0,-(sp)
   155b2:	|  |         jsr 1627e <__floatsisf>
   155b8:	|  |         addq.l #4,sp
   155ba:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   155be:	|  |         movea.l 1b70e <currentFloor>,a0
   155c4:	|  |         move.l 4(a0),d1
   155c8:	|  |         movea.l 40(sp),a0
   155cc:	|  |         movea.l 4(a0),a0
   155d0:	|  |         move.l 28(sp),d0
   155d4:	|  |         add.l d0,d0
   155d6:	|  |         add.l d0,d0
   155d8:	|  |         adda.l d0,a0
   155da:	|  |         move.l (a0),d0
   155dc:	|  |         lsl.l #3,d0
   155de:	|  |         movea.l d1,a0
   155e0:	|  |         adda.l d0,a0
   155e2:	|  |         move.l (a0),d0
   155e4:	|  |         move.l d0,-(sp)
   155e6:	|  |         jsr 1627e <__floatsisf>
   155ec:	|  |         addq.l #4,sp
   155ee:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   155f2:	|  |         movea.l 1b70e <currentFloor>,a0
   155f8:	|  |         move.l 4(a0),d1
   155fc:	|  |         movea.l 40(sp),a0
   15600:	|  |         movea.l 4(a0),a0
   15604:	|  |         move.l 28(sp),d0
   15608:	|  |         add.l d0,d0
   1560a:	|  |         add.l d0,d0
   1560c:	|  |         adda.l d0,a0
   1560e:	|  |         move.l (a0),d0
   15610:	|  |         lsl.l #3,d0
   15612:	|  |         movea.l d1,a0
   15614:	|  |         adda.l d0,a0
   15616:	|  |         move.l 4(a0),d0
   1561a:	|  |         move.l d0,-(sp)
   1561c:	|  |         jsr 1627e <__floatsisf>
   15622:	|  |         addq.l #4,sp
   15624:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   15628:	|  |         move.l 48(sp),-(sp)
   1562c:	|  |         jsr 1627e <__floatsisf>
   15632:	|  |         addq.l #4,sp
   15634:	|  |         move.l d0,-(sp)
   15636:	|  |         move.l 20(sp),-(sp)
   1563a:	|  |         jsr 16420 <__lesf2>
   15640:	|  |         addq.l #8,sp
   15642:	|  |         tst.l d0
   15644:	|  |     /-- bgt.s 15664 <pointInFloorPolygon+0x132>
   15646:	|  |     |   move.l 48(sp),-(sp)
   1564a:	|  |     |   jsr 1627e <__floatsisf>
   15650:	|  |     |   addq.l #4,sp
   15652:	|  |     |   move.l d0,-(sp)
   15654:	|  |     |   move.l 12(sp),-(sp)
   15658:	|  |     |   jsr 163ea <__gtsf2>
   1565e:	|  |     |   addq.l #8,sp
   15660:	|  |     |   tst.l d0
   15662:	|  |  /--|-- bgt.s 156a4 <pointInFloorPolygon+0x172>
   15664:	|  |  |  \-> move.l 48(sp),-(sp)
   15668:	|  |  |      jsr 1627e <__floatsisf>
   1566e:	|  |  |      addq.l #4,sp
   15670:	|  |  |      move.l d0,-(sp)
   15672:	|  |  |      move.l 12(sp),-(sp)
   15676:	|  |  |      jsr 16420 <__lesf2>
   1567c:	|  |  |      addq.l #8,sp
   1567e:	|  |  |      tst.l d0
   15680:	|  |  |  /-- bgt.w 1573a <pointInFloorPolygon+0x208>
   15684:	|  |  |  |   move.l 48(sp),-(sp)
   15688:	|  |  |  |   jsr 1627e <__floatsisf>
   1568e:	|  |  |  |   addq.l #4,sp
   15690:	|  |  |  |   move.l d0,-(sp)
   15692:	|  |  |  |   move.l 20(sp),-(sp)
   15696:	|  |  |  |   jsr 163ea <__gtsf2>
   1569c:	|  |  |  |   addq.l #8,sp
   1569e:	|  |  |  |   tst.l d0
   156a0:	|  |  |  +-- ble.w 1573a <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   156a4:	|  |  \--|-> move.l 44(sp),-(sp)
   156a8:	|  |     |   jsr 1627e <__floatsisf>
   156ae:	|  |     |   addq.l #4,sp
   156b0:	|  |     |   move.l d0,d3
   156b2:	|  |     |   move.l 20(sp),-(sp)
   156b6:	|  |     |   move.l 16(sp),-(sp)
   156ba:	|  |     |   jsr 16572 <__subsf3>
   156c0:	|  |     |   addq.l #8,sp
   156c2:	|  |     |   move.l d0,d2
   156c4:	|  |     |   move.l 48(sp),-(sp)
   156c8:	|  |     |   jsr 1627e <__floatsisf>
   156ce:	|  |     |   addq.l #4,sp
   156d0:	|  |     |   move.l 16(sp),-(sp)
   156d4:	|  |     |   move.l d0,-(sp)
   156d6:	|  |     |   jsr 16572 <__subsf3>
   156dc:	|  |     |   addq.l #8,sp
   156de:	|  |     |   move.l d0,-(sp)
   156e0:	|  |     |   move.l d2,-(sp)
   156e2:	|  |     |   jsr 16330 <__mulsf3>
   156e8:	|  |     |   addq.l #8,sp
   156ea:	|  |     |   move.l d0,d2
   156ec:	|  |     |   move.l 16(sp),-(sp)
   156f0:	|  |     |   move.l 12(sp),-(sp)
   156f4:	|  |     |   jsr 16572 <__subsf3>
   156fa:	|  |     |   addq.l #8,sp
   156fc:	|  |     |   move.l d0,-(sp)
   156fe:	|  |     |   move.l d2,-(sp)
   15700:	|  |     |   jsr 1612a <__divsf3>
   15706:	|  |     |   addq.l #8,sp
   15708:	|  |     |   move.l 20(sp),-(sp)
   1570c:	|  |     |   move.l d0,-(sp)
   1570e:	|  |     |   jsr 16030 <__addsf3>
   15714:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   15716:	|  |     |   move.l d0,-(sp)
   15718:	|  |     |   move.l d3,-(sp)
   1571a:	|  |     |   jsr 164a4 <__ltsf2>
   15720:	|  |     |   addq.l #8,sp
   15722:	|  |     |   tst.l d0
   15724:	|  |     +-- bge.s 1573a <pointInFloorPolygon+0x208>

			c = !c;
   15726:	|  |     |   tst.l 24(sp)
   1572a:	|  |     |   seq d0
   1572c:	|  |     |   neg.b d0
   1572e:	|  |     |   move.b d0,d0
   15730:	|  |     |   andi.l #255,d0
   15736:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   1573a:	|  |     \-> move.l 32(sp),d0
   1573e:	|  |         move.l d0,d1
   15740:	|  |         addq.l #1,d1
   15742:	|  |         move.l d1,32(sp)
   15746:	|  |         move.l d0,28(sp)
   1574a:	|  \-------> movea.l 40(sp),a0
   1574e:	|            move.l (a0),d0
   15750:	|            cmp.l 32(sp),d0
   15754:	\----------- bgt.w 15554 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   15758:	             tst.l 24(sp)
   1575c:	             sne d0
   1575e:	             neg.b d0
   15760:	             move.b d0,d0
   15762:	             andi.w #255,d0
}
   15766:	             move.l (sp)+,d2
   15768:	             move.l (sp)+,d3
   1576a:	             lea 28(sp),sp
   1576e:	             rts

00015770 <setFloor>:

BOOL setFloor (int fileNum) {
   15770:	                               lea -132(sp),sp
   15774:	                               move.l a6,-(sp)
   15776:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   15778:	                               jsr 153d8 <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   1577e:	                               move.l 144(sp),-(sp)
   15782:	                               jsr 5dca <openFileFromNum>
   15788:	                               addq.l #4,sp
   1578a:	                               tst.l d0
   1578c:	                           /-- bne.s 15794 <setFloor+0x24>
   1578e:	                           |   clr.w d0
   15790:	/--------------------------|-- bra.w 15ee0 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   15794:	|                          \-> movea.l 1b70e <currentFloor>,a0
   1579a:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   1579e:	|                              move.l 1b58a <bigDataFile>,118(sp)
   157a6:	|                              move.l 1b5aa <DOSBase>,d0
   157ac:	|                              movea.l d0,a6
   157ae:	|                              move.l 118(sp),d1
   157b2:	|                              jsr -306(a6)
   157b6:	|                              move.l d0,114(sp)
   157ba:	|                              move.l 114(sp),d0
   157be:	|                              movea.l 1b70e <currentFloor>,a0
   157c4:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   157c8:	|                              movea.l 1b70e <currentFloor>,a0
   157ce:	|                              move.l 8(a0),d0
   157d2:	|                              lsl.l #3,d0
   157d4:	|                              move.l d0,110(sp)
   157d8:	|                              clr.l 106(sp)
   157dc:	|                              move.l 1b5a2 <SysBase>,d0
   157e2:	|                              movea.l d0,a6
   157e4:	|                              move.l 110(sp),d0
   157e8:	|                              move.l 106(sp),d1
   157ec:	|                              jsr -684(a6)
   157f0:	|                              move.l d0,102(sp)
   157f4:	|                              move.l 102(sp),d0
   157f8:	|                              movea.l 1b70e <currentFloor>,a0
   157fe:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   15802:	|                              movea.l 1b70e <currentFloor>,a0
   15808:	|                              move.l 12(a0),d0
   1580c:	|                          /-- bne.s 15822 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   1580e:	|                          |   pea 18d16 <graphics.c.1c13408a+0x9>
   15814:	|                          |   jsr 15fc6 <KPrintF>
   1581a:	|                          |   addq.l #4,sp
		return FALSE;
   1581c:	|                          |   clr.w d0
   1581e:	+--------------------------|-- bra.w 15ee0 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15822:	|                          \-> clr.l 136(sp)
   15826:	|                    /-------- bra.w 1593e <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   1582a:	|                 /--|-------> move.l 1b58a <bigDataFile>,26(sp)
   15832:	|                 |  |         move.l 1b5aa <DOSBase>,d0
   15838:	|                 |  |         movea.l d0,a6
   1583a:	|                 |  |         move.l 26(sp),d1
   1583e:	|                 |  |         jsr -306(a6)
   15842:	|                 |  |         move.l d0,22(sp)
   15846:	|                 |  |         move.l 22(sp),d1
   1584a:	|                 |  |         movea.l 1b70e <currentFloor>,a0
   15850:	|                 |  |         movea.l 12(a0),a0
   15854:	|                 |  |         move.l 136(sp),d0
   15858:	|                 |  |         lsl.l #3,d0
   1585a:	|                 |  |         adda.l d0,a0
   1585c:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   1585e:	|                 |  |         movea.l 1b70e <currentFloor>,a0
   15864:	|                 |  |         move.l 12(a0),d1
   15868:	|                 |  |         move.l 136(sp),d0
   1586c:	|                 |  |         lsl.l #3,d0
   1586e:	|                 |  |         movea.l d1,a0
   15870:	|                 |  |         adda.l d0,a0
   15872:	|                 |  |         move.l (a0),d0
   15874:	|                 |  |         add.l d0,d0
   15876:	|                 |  |         add.l d0,d0
   15878:	|                 |  |         move.l d0,18(sp)
   1587c:	|                 |  |         clr.l 14(sp)
   15880:	|                 |  |         move.l 1b5a2 <SysBase>,d0
   15886:	|                 |  |         movea.l d0,a6
   15888:	|                 |  |         move.l 18(sp),d0
   1588c:	|                 |  |         move.l 14(sp),d1
   15890:	|                 |  |         jsr -684(a6)
   15894:	|                 |  |         move.l d0,10(sp)
   15898:	|                 |  |         move.l 10(sp),d1
   1589c:	|                 |  |         movea.l 1b70e <currentFloor>,a0
   158a2:	|                 |  |         movea.l 12(a0),a0
   158a6:	|                 |  |         move.l 136(sp),d0
   158aa:	|                 |  |         lsl.l #3,d0
   158ac:	|                 |  |         adda.l d0,a0
   158ae:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   158b2:	|                 |  |         movea.l 1b70e <currentFloor>,a0
   158b8:	|                 |  |         move.l 12(a0),d1
   158bc:	|                 |  |         move.l 136(sp),d0
   158c0:	|                 |  |         lsl.l #3,d0
   158c2:	|                 |  |         movea.l d1,a0
   158c4:	|                 |  |         adda.l d0,a0
   158c6:	|                 |  |         move.l 4(a0),d0
   158ca:	|                 |  |     /-- bne.s 158e0 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   158cc:	|                 |  |     |   pea 18d16 <graphics.c.1c13408a+0x9>
   158d2:	|                 |  |     |   jsr 15fc6 <KPrintF>
   158d8:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   158da:	|                 |  |     |   clr.w d0
   158dc:	+-----------------|--|-----|-- bra.w 15ee0 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   158e0:	|                 |  |     \-> clr.l 132(sp)
   158e4:	|                 |  |     /-- bra.s 1591e <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   158e6:	|                 |  |  /--|-> move.l 1b58a <bigDataFile>,d1
   158ec:	|                 |  |  |  |   movea.l 1b70e <currentFloor>,a0
   158f2:	|                 |  |  |  |   movea.l 12(a0),a0
   158f6:	|                 |  |  |  |   move.l 136(sp),d0
   158fa:	|                 |  |  |  |   lsl.l #3,d0
   158fc:	|                 |  |  |  |   adda.l d0,a0
   158fe:	|                 |  |  |  |   movea.l 4(a0),a0
   15902:	|                 |  |  |  |   move.l 132(sp),d0
   15906:	|                 |  |  |  |   add.l d0,d0
   15908:	|                 |  |  |  |   add.l d0,d0
   1590a:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   1590e:	|                 |  |  |  |   move.l d1,-(sp)
   15910:	|                 |  |  |  |   jsr 6bc <get2bytes>
   15916:	|                 |  |  |  |   addq.l #4,sp
   15918:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   1591a:	|                 |  |  |  |   addq.l #1,132(sp)
   1591e:	|                 |  |  |  \-> movea.l 1b70e <currentFloor>,a0
   15924:	|                 |  |  |      move.l 12(a0),d1
   15928:	|                 |  |  |      move.l 136(sp),d0
   1592c:	|                 |  |  |      lsl.l #3,d0
   1592e:	|                 |  |  |      movea.l d1,a0
   15930:	|                 |  |  |      adda.l d0,a0
   15932:	|                 |  |  |      move.l (a0),d0
   15934:	|                 |  |  |      cmp.l 132(sp),d0
   15938:	|                 |  |  \----- bgt.s 158e6 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1593a:	|                 |  |         addq.l #1,136(sp)
   1593e:	|                 |  \-------> movea.l 1b70e <currentFloor>,a0
   15944:	|                 |            move.l 8(a0),d0
   15948:	|                 |            cmp.l 136(sp),d0
   1594c:	|                 \----------- bgt.w 1582a <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   15950:	|                              move.l 1b58a <bigDataFile>,d0
   15956:	|                              move.l d0,-(sp)
   15958:	|                              jsr 6bc <get2bytes>
   1595e:	|                              addq.l #4,sp
   15960:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   15964:	|                              move.l 136(sp),d0
   15968:	|                              lsl.l #3,d0
   1596a:	|                              move.l d0,98(sp)
   1596e:	|                              clr.l 94(sp)
   15972:	|                              move.l 1b5a2 <SysBase>,d0
   15978:	|                              movea.l d0,a6
   1597a:	|                              move.l 98(sp),d0
   1597e:	|                              move.l 94(sp),d1
   15982:	|                              jsr -684(a6)
   15986:	|                              move.l d0,90(sp)
   1598a:	|                              move.l 90(sp),d0
   1598e:	|                              movea.l 1b70e <currentFloor>,a0
   15994:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   15998:	|                              movea.l 1b70e <currentFloor>,a0
   1599e:	|                              move.l 4(a0),d0
   159a2:	|                          /-- bne.s 159b8 <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   159a4:	|                          |   pea 18d16 <graphics.c.1c13408a+0x9>
   159aa:	|                          |   jsr 15fc6 <KPrintF>
   159b0:	|                          |   addq.l #4,sp
		return FALSE;
   159b2:	|                          |   clr.w d0
   159b4:	+--------------------------|-- bra.w 15ee0 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   159b8:	|                          \-> clr.l 132(sp)
   159bc:	|                          /-- bra.s 15a10 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   159be:	|                       /--|-> move.l 1b58a <bigDataFile>,d1
   159c4:	|                       |  |   movea.l 1b70e <currentFloor>,a0
   159ca:	|                       |  |   movea.l 4(a0),a0
   159ce:	|                       |  |   move.l 132(sp),d0
   159d2:	|                       |  |   lsl.l #3,d0
   159d4:	|                       |  |   lea (0,a0,d0.l),a2
   159d8:	|                       |  |   move.l d1,-(sp)
   159da:	|                       |  |   jsr 6bc <get2bytes>
   159e0:	|                       |  |   addq.l #4,sp
   159e2:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   159e4:	|                       |  |   move.l 1b58a <bigDataFile>,d1
   159ea:	|                       |  |   movea.l 1b70e <currentFloor>,a0
   159f0:	|                       |  |   movea.l 4(a0),a0
   159f4:	|                       |  |   move.l 132(sp),d0
   159f8:	|                       |  |   lsl.l #3,d0
   159fa:	|                       |  |   lea (0,a0,d0.l),a2
   159fe:	|                       |  |   move.l d1,-(sp)
   15a00:	|                       |  |   jsr 6bc <get2bytes>
   15a06:	|                       |  |   addq.l #4,sp
   15a08:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   15a0c:	|                       |  |   addq.l #1,132(sp)
   15a10:	|                       |  \-> move.l 132(sp),d0
   15a14:	|                       |      cmp.l 136(sp),d0
   15a18:	|                       \----- blt.s 159be <setFloor+0x24e>
	}

	finishAccess ();
   15a1a:	|                              jsr 5cc2 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   15a20:	|                              movea.l 1b70e <currentFloor>,a0
   15a26:	|                              move.l 8(a0),d0
   15a2a:	|                              add.l d0,d0
   15a2c:	|                              add.l d0,d0
   15a2e:	|                              move.l d0,86(sp)
   15a32:	|                              clr.l 82(sp)
   15a36:	|                              move.l 1b5a2 <SysBase>,d0
   15a3c:	|                              movea.l d0,a6
   15a3e:	|                              move.l 86(sp),d0
   15a42:	|                              move.l 82(sp),d1
   15a46:	|                              jsr -684(a6)
   15a4a:	|                              move.l d0,78(sp)
   15a4e:	|                              move.l 78(sp),d0
   15a52:	|                              movea.l 1b70e <currentFloor>,a0
   15a58:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   15a5c:	|                              movea.l 1b70e <currentFloor>,a0
   15a62:	|                              move.l 8(a0),d0
   15a66:	|                              add.l d0,d0
   15a68:	|                              add.l d0,d0
   15a6a:	|                              move.l d0,74(sp)
   15a6e:	|                              clr.l 70(sp)
   15a72:	|                              move.l 1b5a2 <SysBase>,d0
   15a78:	|                              movea.l d0,a6
   15a7a:	|                              move.l 74(sp),d0
   15a7e:	|                              move.l 70(sp),d1
   15a82:	|                              jsr -684(a6)
   15a86:	|                              move.l d0,66(sp)
   15a8a:	|                              move.l 66(sp),d0
   15a8e:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   15a92:	|                              movea.l 1b70e <currentFloor>,a0
   15a98:	|                              move.l 16(a0),d0
   15a9c:	|                          /-- bne.s 15ab2 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   15a9e:	|                          |   pea 18d16 <graphics.c.1c13408a+0x9>
   15aa4:	|                          |   jsr 15fc6 <KPrintF>
   15aaa:	|                          |   addq.l #4,sp
		return FALSE;
   15aac:	|                          |   clr.w d0
   15aae:	+--------------------------|-- bra.w 15ee0 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15ab2:	|                          \-> clr.l 136(sp)
   15ab6:	|                    /-------- bra.w 15bda <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   15aba:	|                 /--|-------> movea.l 1b70e <currentFloor>,a0
   15ac0:	|                 |  |         move.l 8(a0),d0
   15ac4:	|                 |  |         add.l d0,d0
   15ac6:	|                 |  |         add.l d0,d0
   15ac8:	|                 |  |         move.l d0,50(sp)
   15acc:	|                 |  |         clr.l 46(sp)
   15ad0:	|                 |  |         move.l 1b5a2 <SysBase>,d0
   15ad6:	|                 |  |         movea.l d0,a6
   15ad8:	|                 |  |         move.l 50(sp),d0
   15adc:	|                 |  |         move.l 46(sp),d1
   15ae0:	|                 |  |         jsr -684(a6)
   15ae4:	|                 |  |         move.l d0,42(sp)
   15ae8:	|                 |  |         move.l 42(sp),d0
   15aec:	|                 |  |         movea.l 1b70e <currentFloor>,a0
   15af2:	|                 |  |         movea.l 16(a0),a0
   15af6:	|                 |  |         move.l 136(sp),d1
   15afa:	|                 |  |         add.l d1,d1
   15afc:	|                 |  |         add.l d1,d1
   15afe:	|                 |  |         adda.l d1,a0
   15b00:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   15b02:	|                 |  |         movea.l 1b70e <currentFloor>,a0
   15b08:	|                 |  |         move.l 8(a0),d0
   15b0c:	|                 |  |         add.l d0,d0
   15b0e:	|                 |  |         add.l d0,d0
   15b10:	|                 |  |         move.l d0,38(sp)
   15b14:	|                 |  |         clr.l 34(sp)
   15b18:	|                 |  |         move.l 1b5a2 <SysBase>,d0
   15b1e:	|                 |  |         movea.l d0,a6
   15b20:	|                 |  |         move.l 38(sp),d0
   15b24:	|                 |  |         move.l 34(sp),d1
   15b28:	|                 |  |         jsr -684(a6)
   15b2c:	|                 |  |         move.l d0,30(sp)
   15b30:	|                 |  |         move.l 30(sp),d1
   15b34:	|                 |  |         move.l 136(sp),d0
   15b38:	|                 |  |         add.l d0,d0
   15b3a:	|                 |  |         add.l d0,d0
   15b3c:	|                 |  |         movea.l 62(sp),a0
   15b40:	|                 |  |         adda.l d0,a0
   15b42:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   15b44:	|                 |  |         movea.l 1b70e <currentFloor>,a0
   15b4a:	|                 |  |         move.l 16(a0),d1
   15b4e:	|                 |  |         move.l 136(sp),d0
   15b52:	|                 |  |         add.l d0,d0
   15b54:	|                 |  |         add.l d0,d0
   15b56:	|                 |  |         movea.l d1,a0
   15b58:	|                 |  |         adda.l d0,a0
   15b5a:	|                 |  |         move.l (a0),d0
   15b5c:	|                 |  |     /-- bne.s 15b72 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   15b5e:	|                 |  |     |   pea 18d16 <graphics.c.1c13408a+0x9>
   15b64:	|                 |  |     |   jsr 15fc6 <KPrintF>
   15b6a:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   15b6c:	|                 |  |     |   clr.w d0
   15b6e:	+-----------------|--|-----|-- bra.w 15ee0 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   15b72:	|                 |  |     \-> clr.l 132(sp)
   15b76:	|                 |  |     /-- bra.s 15bc6 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   15b78:	|                 |  |  /--|-> movea.l 1b70e <currentFloor>,a0
   15b7e:	|                 |  |  |  |   move.l 16(a0),d1
   15b82:	|                 |  |  |  |   move.l 136(sp),d0
   15b86:	|                 |  |  |  |   add.l d0,d0
   15b88:	|                 |  |  |  |   add.l d0,d0
   15b8a:	|                 |  |  |  |   movea.l d1,a0
   15b8c:	|                 |  |  |  |   adda.l d0,a0
   15b8e:	|                 |  |  |  |   move.l (a0),d1
   15b90:	|                 |  |  |  |   move.l 132(sp),d0
   15b94:	|                 |  |  |  |   add.l d0,d0
   15b96:	|                 |  |  |  |   add.l d0,d0
   15b98:	|                 |  |  |  |   movea.l d1,a0
   15b9a:	|                 |  |  |  |   adda.l d0,a0
   15b9c:	|                 |  |  |  |   moveq #-1,d1
   15b9e:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   15ba0:	|                 |  |  |  |   move.l 136(sp),d0
   15ba4:	|                 |  |  |  |   add.l d0,d0
   15ba6:	|                 |  |  |  |   add.l d0,d0
   15ba8:	|                 |  |  |  |   movea.l 62(sp),a0
   15bac:	|                 |  |  |  |   adda.l d0,a0
   15bae:	|                 |  |  |  |   move.l (a0),d1
   15bb0:	|                 |  |  |  |   move.l 132(sp),d0
   15bb4:	|                 |  |  |  |   add.l d0,d0
   15bb6:	|                 |  |  |  |   add.l d0,d0
   15bb8:	|                 |  |  |  |   movea.l d1,a0
   15bba:	|                 |  |  |  |   adda.l d0,a0
   15bbc:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   15bc2:	|                 |  |  |  |   addq.l #1,132(sp)
   15bc6:	|                 |  |  |  \-> movea.l 1b70e <currentFloor>,a0
   15bcc:	|                 |  |  |      move.l 8(a0),d0
   15bd0:	|                 |  |  |      cmp.l 132(sp),d0
   15bd4:	|                 |  |  \----- bgt.s 15b78 <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15bd6:	|                 |  |         addq.l #1,136(sp)
   15bda:	|                 |  \-------> movea.l 1b70e <currentFloor>,a0
   15be0:	|                 |            move.l 8(a0),d0
   15be4:	|                 |            cmp.l 136(sp),d0
   15be8:	|                 \----------- bgt.w 15aba <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15bec:	|                              clr.l 136(sp)
   15bf0:	|              /-------------- bra.w 15cf6 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   15bf4:	|           /--|-------------> clr.l 132(sp)
   15bf8:	|           |  |     /-------- bra.w 15ce0 <setFloor+0x570>
			if (i != j) {
   15bfc:	|           |  |  /--|-------> move.l 136(sp),d0
   15c00:	|           |  |  |  |         cmp.l 132(sp),d0
   15c04:	|           |  |  |  |     /-- beq.w 15c96 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   15c08:	|           |  |  |  |     |   movea.l 1b70e <currentFloor>,a0
   15c0e:	|           |  |  |  |     |   move.l 12(a0),d1
   15c12:	|           |  |  |  |     |   move.l 132(sp),d0
   15c16:	|           |  |  |  |     |   lsl.l #3,d0
   15c18:	|           |  |  |  |     |   movea.l d1,a1
   15c1a:	|           |  |  |  |     |   adda.l d0,a1
   15c1c:	|           |  |  |  |     |   movea.l 1b70e <currentFloor>,a0
   15c22:	|           |  |  |  |     |   move.l 12(a0),d1
   15c26:	|           |  |  |  |     |   move.l 136(sp),d0
   15c2a:	|           |  |  |  |     |   lsl.l #3,d0
   15c2c:	|           |  |  |  |     |   movea.l d1,a0
   15c2e:	|           |  |  |  |     |   adda.l d0,a0
   15c30:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   15c34:	|           |  |  |  |     |   move.l (a1),-(sp)
   15c36:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   15c3a:	|           |  |  |  |     |   move.l (a0),-(sp)
   15c3c:	|           |  |  |  |     |   jsr 154c8 <polysShareSide>
   15c42:	|           |  |  |  |     |   lea 16(sp),sp
   15c46:	|           |  |  |  |     |   tst.w d0
   15c48:	|           |  |  |  |  /--|-- beq.w 15cdc <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   15c4c:	|           |  |  |  |  |  |   movea.l 1b70e <currentFloor>,a0
   15c52:	|           |  |  |  |  |  |   move.l 16(a0),d1
   15c56:	|           |  |  |  |  |  |   move.l 136(sp),d0
   15c5a:	|           |  |  |  |  |  |   add.l d0,d0
   15c5c:	|           |  |  |  |  |  |   add.l d0,d0
   15c5e:	|           |  |  |  |  |  |   movea.l d1,a0
   15c60:	|           |  |  |  |  |  |   adda.l d0,a0
   15c62:	|           |  |  |  |  |  |   move.l (a0),d1
   15c64:	|           |  |  |  |  |  |   move.l 132(sp),d0
   15c68:	|           |  |  |  |  |  |   add.l d0,d0
   15c6a:	|           |  |  |  |  |  |   add.l d0,d0
   15c6c:	|           |  |  |  |  |  |   movea.l d1,a0
   15c6e:	|           |  |  |  |  |  |   adda.l d0,a0
   15c70:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   15c74:	|           |  |  |  |  |  |   move.l 136(sp),d0
   15c78:	|           |  |  |  |  |  |   add.l d0,d0
   15c7a:	|           |  |  |  |  |  |   add.l d0,d0
   15c7c:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   15c80:	|           |  |  |  |  |  |   adda.l d0,a0
   15c82:	|           |  |  |  |  |  |   move.l (a0),d1
   15c84:	|           |  |  |  |  |  |   move.l 132(sp),d0
   15c88:	|           |  |  |  |  |  |   add.l d0,d0
   15c8a:	|           |  |  |  |  |  |   add.l d0,d0
   15c8c:	|           |  |  |  |  |  |   movea.l d1,a0
   15c8e:	|           |  |  |  |  |  |   adda.l d0,a0
   15c90:	|           |  |  |  |  |  |   moveq #1,d1
   15c92:	|           |  |  |  |  |  |   move.l d1,(a0)
   15c94:	|           |  |  |  |  +--|-- bra.s 15cdc <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   15c96:	|           |  |  |  |  |  \-> movea.l 1b70e <currentFloor>,a0
   15c9c:	|           |  |  |  |  |      move.l 16(a0),d1
   15ca0:	|           |  |  |  |  |      move.l 136(sp),d0
   15ca4:	|           |  |  |  |  |      add.l d0,d0
   15ca6:	|           |  |  |  |  |      add.l d0,d0
   15ca8:	|           |  |  |  |  |      movea.l d1,a0
   15caa:	|           |  |  |  |  |      adda.l d0,a0
   15cac:	|           |  |  |  |  |      move.l (a0),d1
   15cae:	|           |  |  |  |  |      move.l 132(sp),d0
   15cb2:	|           |  |  |  |  |      add.l d0,d0
   15cb4:	|           |  |  |  |  |      add.l d0,d0
   15cb6:	|           |  |  |  |  |      movea.l d1,a0
   15cb8:	|           |  |  |  |  |      adda.l d0,a0
   15cba:	|           |  |  |  |  |      moveq #-2,d0
   15cbc:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   15cbe:	|           |  |  |  |  |      move.l 136(sp),d0
   15cc2:	|           |  |  |  |  |      add.l d0,d0
   15cc4:	|           |  |  |  |  |      add.l d0,d0
   15cc6:	|           |  |  |  |  |      movea.l 62(sp),a0
   15cca:	|           |  |  |  |  |      adda.l d0,a0
   15ccc:	|           |  |  |  |  |      move.l (a0),d1
   15cce:	|           |  |  |  |  |      move.l 132(sp),d0
   15cd2:	|           |  |  |  |  |      add.l d0,d0
   15cd4:	|           |  |  |  |  |      add.l d0,d0
   15cd6:	|           |  |  |  |  |      movea.l d1,a0
   15cd8:	|           |  |  |  |  |      adda.l d0,a0
   15cda:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   15cdc:	|           |  |  |  |  \----> addq.l #1,132(sp)
   15ce0:	|           |  |  |  \-------> movea.l 1b70e <currentFloor>,a0
   15ce6:	|           |  |  |            move.l 8(a0),d0
   15cea:	|           |  |  |            cmp.l 132(sp),d0
   15cee:	|           |  |  \----------- bgt.w 15bfc <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15cf2:	|           |  |               addq.l #1,136(sp)
   15cf6:	|           |  \-------------> movea.l 1b70e <currentFloor>,a0
   15cfc:	|           |                  move.l 8(a0),d0
   15d00:	|           |                  cmp.l 136(sp),d0
   15d04:	|           \----------------- bgt.w 15bf4 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   15d08:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   15d0c:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   15d10:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15d14:	|  |                           clr.l 136(sp)
   15d18:	|  |     /-------------------- bra.w 15e6e <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   15d1c:	|  |  /--|-------------------> clr.l 132(sp)
   15d20:	|  |  |  |     /-------------- bra.w 15e58 <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   15d24:	|  |  |  |  /--|-------------> movea.l 1b70e <currentFloor>,a0
   15d2a:	|  |  |  |  |  |               move.l 16(a0),d1
   15d2e:	|  |  |  |  |  |               move.l 136(sp),d0
   15d32:	|  |  |  |  |  |               add.l d0,d0
   15d34:	|  |  |  |  |  |               add.l d0,d0
   15d36:	|  |  |  |  |  |               movea.l d1,a0
   15d38:	|  |  |  |  |  |               adda.l d0,a0
   15d3a:	|  |  |  |  |  |               move.l (a0),d1
   15d3c:	|  |  |  |  |  |               move.l 132(sp),d0
   15d40:	|  |  |  |  |  |               add.l d0,d0
   15d42:	|  |  |  |  |  |               add.l d0,d0
   15d44:	|  |  |  |  |  |               movea.l d1,a0
   15d46:	|  |  |  |  |  |               adda.l d0,a0
   15d48:	|  |  |  |  |  |               move.l (a0),d0
   15d4a:	|  |  |  |  |  |               moveq #-1,d1
   15d4c:	|  |  |  |  |  |               cmp.l d0,d1
   15d4e:	|  |  |  |  |  |  /----------- bne.w 15e54 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   15d52:	|  |  |  |  |  |  |            clr.l 122(sp)
   15d56:	|  |  |  |  |  |  |     /----- bra.w 15e42 <setFloor+0x6d2>
						if (d != i && d != j) {
   15d5a:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   15d5e:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   15d62:	|  |  |  |  |  |  |  |  |  /-- beq.w 15e3e <setFloor+0x6ce>
   15d66:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   15d6a:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   15d6e:	|  |  |  |  |  |  |  |  |  +-- beq.w 15e3e <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   15d72:	|  |  |  |  |  |  |  |  |  |   movea.l 1b70e <currentFloor>,a0
   15d78:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   15d7c:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   15d80:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15d82:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15d84:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   15d86:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15d88:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   15d8a:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   15d8e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15d90:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15d92:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   15d94:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15d96:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   15d98:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   15d9c:	|  |  |  |  |  |  |  |  |  +-- bne.w 15e3e <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   15da0:	|  |  |  |  |  |  |  |  |  |   movea.l 1b70e <currentFloor>,a0
   15da6:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   15daa:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   15dae:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15db0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15db2:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   15db4:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15db6:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   15db8:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   15dbc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15dbe:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15dc0:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   15dc2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15dc4:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   15dc6:	|  |  |  |  |  |  |  |  |  +-- bmi.s 15e3e <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   15dc8:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   15dcc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15dce:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15dd0:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   15dd4:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15dd6:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   15dd8:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   15ddc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15dde:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15de0:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   15de2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15de4:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   15de6:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   15dea:	|  |  |  |  |  |  |  |  |  +-- bgt.s 15e3e <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   15dec:	|  |  |  |  |  |  |  |  |  |   movea.l 1b70e <currentFloor>,a0
   15df2:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   15df6:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   15dfa:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15dfc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15dfe:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   15e00:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15e02:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   15e04:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   15e08:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15e0a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15e0c:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   15e0e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15e10:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   15e14:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   15e18:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15e1a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15e1c:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   15e20:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15e22:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   15e24:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   15e28:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15e2a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15e2c:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   15e2e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15e30:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   15e34:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   15e36:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   15e38:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   15e3e:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   15e42:	|  |  |  |  |  |  |  |  \----> movea.l 1b70e <currentFloor>,a0
   15e48:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   15e4c:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   15e50:	|  |  |  |  |  |  |  \-------- bgt.w 15d5a <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   15e54:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   15e58:	|  |  |  |  |  \-------------> movea.l 1b70e <currentFloor>,a0
   15e5e:	|  |  |  |  |                  move.l 8(a0),d0
   15e62:	|  |  |  |  |                  cmp.l 132(sp),d0
   15e66:	|  |  |  |  \----------------- bgt.w 15d24 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15e6a:	|  |  |  |                     addq.l #1,136(sp)
   15e6e:	|  |  |  \-------------------> movea.l 1b70e <currentFloor>,a0
   15e74:	|  |  |                        move.l 8(a0),d0
   15e78:	|  |  |                        cmp.l 136(sp),d0
   15e7c:	|  |  \----------------------- bgt.w 15d1c <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   15e80:	|  |                           tst.w 130(sp)
   15e84:	|  \-------------------------- bne.w 15d0c <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15e88:	|                              clr.l 136(sp)
   15e8c:	|                          /-- bra.s 15eb4 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   15e8e:	|                       /--|-> move.l 136(sp),d0
   15e92:	|                       |  |   add.l d0,d0
   15e94:	|                       |  |   add.l d0,d0
   15e96:	|                       |  |   movea.l 62(sp),a0
   15e9a:	|                       |  |   adda.l d0,a0
   15e9c:	|                       |  |   move.l (a0),54(sp)
   15ea0:	|                       |  |   move.l 1b5a2 <SysBase>,d0
   15ea6:	|                       |  |   movea.l d0,a6
   15ea8:	|                       |  |   movea.l 54(sp),a1
   15eac:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15eb0:	|                       |  |   addq.l #1,136(sp)
   15eb4:	|                       |  \-> movea.l 1b70e <currentFloor>,a0
   15eba:	|                       |      move.l 8(a0),d0
   15ebe:	|                       |      cmp.l 136(sp),d0
   15ec2:	|                       \----- bgt.s 15e8e <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   15ec4:	|                              move.l 62(sp),58(sp)
   15eca:	|                              move.l 1b5a2 <SysBase>,d0
   15ed0:	|                              movea.l d0,a6
   15ed2:	|                              movea.l 58(sp),a1
   15ed6:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   15eda:	|                              clr.l 62(sp)

	return TRUE;
   15ede:	|                              moveq #1,d0
}
   15ee0:	\----------------------------> movea.l (sp)+,a2
   15ee2:	                               movea.l (sp)+,a6
   15ee4:	                               lea 132(sp),sp
   15ee8:	                               rts

00015eea <setFloorNull>:

void setFloorNull () {
	killFloor ();
   15eea:	jsr 153d8 <killFloor>
	noFloor ();
   15ef0:	jsr 152fc <noFloor>
   15ef6:	nop
   15ef8:	rts

00015efa <WaitVbl>:
void WaitVbl() {
   15efa:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   15efc:	   /-> movea.l #14675972,a0
   15f02:	   |   move.l (a0),d0
   15f04:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   15f06:	   |   move.l (sp),d0
   15f08:	   |   andi.l #130816,d0
   15f0e:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   15f10:	   |   move.l (sp),d0
   15f12:	   |   cmpi.l #76800,d0
   15f18:	   \-- beq.s 15efc <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   15f1a:	/----> movea.l #14675972,a0
   15f20:	|      move.l (a0),d0
   15f22:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   15f26:	|      move.l 4(sp),d0
   15f2a:	|      andi.l #130816,d0
   15f30:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   15f34:	|      move.l 4(sp),d0
   15f38:	|      cmpi.l #76800,d0
   15f3e:	|  /-- beq.s 15f42 <WaitVbl+0x48>
	while (1) {
   15f40:	\--|-- bra.s 15f1a <WaitVbl+0x20>
			break;
   15f42:	   \-> nop
}
   15f44:	       nop
   15f46:	       addq.l #8,sp
   15f48:	       rts

00015f4a <memset>:
void* memset(void *dest, int val, unsigned long len) {
   15f4a:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   15f4c:	       move.l 8(sp),(sp)
	while(len-- > 0)
   15f50:	   /-- bra.s 15f62 <memset+0x18>
		*ptr++ = val;
   15f52:	/--|-> move.l (sp),d0
   15f54:	|  |   move.l d0,d1
   15f56:	|  |   addq.l #1,d1
   15f58:	|  |   move.l d1,(sp)
   15f5a:	|  |   move.l 12(sp),d1
   15f5e:	|  |   movea.l d0,a0
   15f60:	|  |   move.b d1,(a0)
	while(len-- > 0)
   15f62:	|  \-> move.l 16(sp),d0
   15f66:	|      move.l d0,d1
   15f68:	|      subq.l #1,d1
   15f6a:	|      move.l d1,16(sp)
   15f6e:	|      tst.l d0
   15f70:	\----- bne.s 15f52 <memset+0x8>
	return dest;
   15f72:	       move.l 8(sp),d0
}
   15f76:	       addq.l #4,sp
   15f78:	       rts

00015f7a <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   15f7a:	       subq.l #8,sp
   15f7c:	       move.l d2,-(sp)
	char *d = (char *)dest;
   15f7e:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   15f84:	       move.l 20(sp),4(sp)
	while(len--)
   15f8a:	   /-- bra.s 15fac <memcpy+0x32>
		*d++ = *s++;
   15f8c:	/--|-> move.l 4(sp),d1
   15f90:	|  |   move.l d1,d0
   15f92:	|  |   addq.l #1,d0
   15f94:	|  |   move.l d0,4(sp)
   15f98:	|  |   move.l 8(sp),d0
   15f9c:	|  |   move.l d0,d2
   15f9e:	|  |   addq.l #1,d2
   15fa0:	|  |   move.l d2,8(sp)
   15fa4:	|  |   movea.l d1,a0
   15fa6:	|  |   move.b (a0),d1
   15fa8:	|  |   movea.l d0,a0
   15faa:	|  |   move.b d1,(a0)
	while(len--)
   15fac:	|  \-> move.l 24(sp),d0
   15fb0:	|      move.l d0,d1
   15fb2:	|      subq.l #1,d1
   15fb4:	|      move.l d1,24(sp)
   15fb8:	|      tst.l d0
   15fba:	\----- bne.s 15f8c <memcpy+0x12>
	return dest;
   15fbc:	       move.l 16(sp),d0
}
   15fc0:	       move.l (sp)+,d2
   15fc2:	       addq.l #8,sp
   15fc4:	       rts

00015fc6 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   15fc6:	       lea -128(sp),sp
   15fca:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   15fce:	       move.w f0ff60 <gcc8_c_support.c.cce2f5c3+0xec6117>,d0
   15fd4:	       cmpi.w #20153,d0
   15fd8:	   /-- beq.s 15ffc <KPrintF+0x36>
   15fda:	   |   cmpi.w #-24562,d0
   15fde:	   +-- beq.s 15ffc <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   15fe0:	   |   movea.l 1b5a2 <SysBase>,a6
   15fe6:	   |   movea.l 144(sp),a0
   15fea:	   |   lea 148(sp),a1
   15fee:	   |   lea 16908 <KPutCharX>,a2
   15ff4:	   |   suba.l a3,a3
   15ff6:	   |   jsr -522(a6)
}
   15ffa:	/--|-- bra.s 16026 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   15ffc:	|  \-> movea.l 1b5a2 <SysBase>,a6
   16002:	|      movea.l 144(sp),a0
   16006:	|      lea 148(sp),a1
   1600a:	|      lea 16916 <PutChar>,a2
   16010:	|      lea 12(sp),a3
   16014:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   16018:	|      move.l a3,-(sp)
   1601a:	|      pea 56 <_start+0x56>
   1601e:	|      jsr f0ff60 <gcc8_c_support.c.cce2f5c3+0xec6117>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   16024:	|      addq.l #8,sp
}
   16026:	\----> movem.l (sp)+,a2-a3/a6
   1602a:	       lea 128(sp),sp
   1602e:	       rts

00016030 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   16030:	lea -12(sp),sp
   16034:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   16036:	move.l 20(sp),12(sp)
   1603c:	move.l 24(sp),8(sp)
   16042:	move.l 1b5b2 <MathIeeeSingBasBase>,d0
   16048:	movea.l d0,a6
   1604a:	move.l 12(sp),d0
   1604e:	move.l 8(sp),d1
   16052:	jsr -66(a6)
   16056:	move.l d0,4(sp)
   1605a:	move.l 4(sp),d0
}
   1605e:	movea.l (sp)+,a6
   16060:	lea 12(sp),sp
   16064:	rts

00016066 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   16066:	lea -32(sp),sp
   1606a:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   1606e:	move.l 48(sp),36(sp)
   16074:	move.l 52(sp),40(sp)
   1607a:	move.l 56(sp),28(sp)
   16080:	move.l 60(sp),32(sp)
   16086:	move.l 1b5ba <MathIeeeDoubBasBase>,d0
   1608c:	movea.l d0,a6
   1608e:	move.l 36(sp),d0
   16092:	move.l 40(sp),d1
   16096:	move.l 28(sp),d2
   1609a:	move.l 32(sp),d3
   1609e:	jsr -66(a6)
   160a2:	move.l d0,12(sp)
   160a6:	move.l d1,16(sp)
   160aa:	move.l 12(sp),20(sp)
   160b0:	move.l 16(sp),24(sp)
   160b6:	move.l 20(sp),d0
   160ba:	move.l 24(sp),d1
}
   160be:	movem.l (sp)+,d2-d3/a6
   160c2:	lea 32(sp),sp
   160c6:	rts

000160c8 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   160c8:	lea -32(sp),sp
   160cc:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   160d0:	move.l 48(sp),36(sp)
   160d6:	move.l 52(sp),40(sp)
   160dc:	move.l 56(sp),28(sp)
   160e2:	move.l 60(sp),32(sp)
   160e8:	move.l 1b5ba <MathIeeeDoubBasBase>,d0
   160ee:	movea.l d0,a6
   160f0:	move.l 36(sp),d0
   160f4:	move.l 40(sp),d1
   160f8:	move.l 28(sp),d2
   160fc:	move.l 32(sp),d3
   16100:	jsr -84(a6)
   16104:	move.l d0,12(sp)
   16108:	move.l d1,16(sp)
   1610c:	move.l 12(sp),20(sp)
   16112:	move.l 16(sp),24(sp)
   16118:	move.l 20(sp),d0
   1611c:	move.l 24(sp),d1
}
   16120:	movem.l (sp)+,d2-d3/a6
   16124:	lea 32(sp),sp
   16128:	rts

0001612a <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   1612a:	lea -12(sp),sp
   1612e:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   16130:	move.l 20(sp),12(sp)
   16136:	move.l 24(sp),8(sp)
   1613c:	move.l 1b5b2 <MathIeeeSingBasBase>,d0
   16142:	movea.l d0,a6
   16144:	move.l 12(sp),d0
   16148:	move.l 8(sp),d1
   1614c:	jsr -84(a6)
   16150:	move.l d0,4(sp)
   16154:	move.l 4(sp),d0
}
   16158:	movea.l (sp)+,a6
   1615a:	lea 12(sp),sp
   1615e:	rts

00016160 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   16160:	lea -12(sp),sp
   16164:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   16166:	move.l 20(sp),12(sp)
   1616c:	move.l 24(sp),8(sp)
   16172:	move.l 1b5b2 <MathIeeeSingBasBase>,d0
   16178:	movea.l d0,a6
   1617a:	move.l 12(sp),d0
   1617e:	move.l 8(sp),d1
   16182:	jsr -42(a6)
   16186:	move.l d0,4(sp)
   1618a:	move.l 4(sp),d0
}
   1618e:	movea.l (sp)+,a6
   16190:	lea 12(sp),sp
   16194:	rts

00016196 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   16196:	lea -20(sp),sp
   1619a:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   1619c:	move.l 28(sp),20(sp)
   161a2:	move.l 1b5be <MathIeeeDoubTransBase>,d0
   161a8:	movea.l d0,a6
   161aa:	move.l 20(sp),d0
   161ae:	jsr -108(a6)
   161b2:	move.l d0,4(sp)
   161b6:	move.l d1,8(sp)
   161ba:	move.l 4(sp),12(sp)
   161c0:	move.l 8(sp),16(sp)
   161c6:	move.l 12(sp),d0
   161ca:	move.l 16(sp),d1
}
   161ce:	movea.l (sp)+,a6
   161d0:	lea 20(sp),sp
   161d4:	rts

000161d6 <__fixdfsi>:

DOUBLE __fixdfsi(DOUBLE value) {
   161d6:	lea -12(sp),sp
   161da:	move.l a6,-(sp)
	return IEEEDPFix(value);
   161dc:	move.l 20(sp),8(sp)
   161e2:	move.l 24(sp),12(sp)
   161e8:	move.l 1b5ba <MathIeeeDoubBasBase>,d0
   161ee:	movea.l d0,a6
   161f0:	move.l 8(sp),d0
   161f4:	move.l 12(sp),d1
   161f8:	jsr -30(a6)
   161fc:	move.l d0,4(sp)
   16200:	move.l 4(sp),d0
   16204:	move.l d0,-(sp)
   16206:	jsr 1623e <__floatsidf>
   1620c:	addq.l #4,sp
}
   1620e:	movea.l (sp)+,a6
   16210:	lea 12(sp),sp
   16214:	rts

00016216 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   16216:	subq.l #8,sp
   16218:	move.l a6,-(sp)
	return IEEESPFix(value);
   1621a:	move.l 16(sp),8(sp)
   16220:	move.l 1b5b2 <MathIeeeSingBasBase>,d0
   16226:	movea.l d0,a6
   16228:	move.l 8(sp),d0
   1622c:	jsr -30(a6)
   16230:	move.l d0,4(sp)
   16234:	move.l 4(sp),d0
}
   16238:	movea.l (sp)+,a6
   1623a:	addq.l #8,sp
   1623c:	rts

0001623e <__floatsidf>:


DOUBLE __floatsidf (int i) {
   1623e:	lea -20(sp),sp
   16242:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   16244:	move.l 28(sp),20(sp)
   1624a:	move.l 1b5ba <MathIeeeDoubBasBase>,d0
   16250:	movea.l d0,a6
   16252:	move.l 20(sp),d0
   16256:	jsr -36(a6)
   1625a:	move.l d0,4(sp)
   1625e:	move.l d1,8(sp)
   16262:	move.l 4(sp),12(sp)
   16268:	move.l 8(sp),16(sp)
   1626e:	move.l 12(sp),d0
   16272:	move.l 16(sp),d1
}
   16276:	movea.l (sp)+,a6
   16278:	lea 20(sp),sp
   1627c:	rts

0001627e <__floatsisf>:

FLOAT __floatsisf(int i) {
   1627e:	subq.l #8,sp
   16280:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   16282:	move.l 16(sp),8(sp)
   16288:	move.l 1b5b2 <MathIeeeSingBasBase>,d0
   1628e:	movea.l d0,a6
   16290:	move.l 8(sp),d0
   16294:	jsr -36(a6)
   16298:	move.l d0,4(sp)
   1629c:	move.l 4(sp),d0
}
   162a0:	movea.l (sp)+,a6
   162a2:	addq.l #8,sp
   162a4:	rts

000162a6 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   162a6:	subq.l #8,sp
   162a8:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   162aa:	move.l 16(sp),8(sp)
   162b0:	move.l 1b5b2 <MathIeeeSingBasBase>,d0
   162b6:	movea.l d0,a6
   162b8:	move.l 8(sp),d0
   162bc:	jsr -36(a6)
   162c0:	move.l d0,4(sp)
   162c4:	move.l 4(sp),d0
}
   162c8:	movea.l (sp)+,a6
   162ca:	addq.l #8,sp
   162cc:	rts

000162ce <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   162ce:	lea -32(sp),sp
   162d2:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   162d6:	move.l 48(sp),36(sp)
   162dc:	move.l 52(sp),40(sp)
   162e2:	move.l 56(sp),28(sp)
   162e8:	move.l 60(sp),32(sp)
   162ee:	move.l 1b5ba <MathIeeeDoubBasBase>,d0
   162f4:	movea.l d0,a6
   162f6:	move.l 36(sp),d0
   162fa:	move.l 40(sp),d1
   162fe:	move.l 28(sp),d2
   16302:	move.l 32(sp),d3
   16306:	jsr -78(a6)
   1630a:	move.l d0,12(sp)
   1630e:	move.l d1,16(sp)
   16312:	move.l 12(sp),20(sp)
   16318:	move.l 16(sp),24(sp)
   1631e:	move.l 20(sp),d0
   16322:	move.l 24(sp),d1
}
   16326:	movem.l (sp)+,d2-d3/a6
   1632a:	lea 32(sp),sp
   1632e:	rts

00016330 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   16330:	lea -12(sp),sp
   16334:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   16336:	move.l 20(sp),12(sp)
   1633c:	move.l 24(sp),8(sp)
   16342:	move.l 1b5b2 <MathIeeeSingBasBase>,d0
   16348:	movea.l d0,a6
   1634a:	move.l 12(sp),d0
   1634e:	move.l 8(sp),d1
   16352:	jsr -78(a6)
   16356:	move.l d0,4(sp)
   1635a:	move.l 4(sp),d0
}
   1635e:	movea.l (sp)+,a6
   16360:	lea 12(sp),sp
   16364:	rts

00016366 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   16366:	lea -12(sp),sp
   1636a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1636c:	move.l 20(sp),12(sp)
   16372:	move.l 24(sp),8(sp)
   16378:	move.l 1b5b2 <MathIeeeSingBasBase>,d0
   1637e:	movea.l d0,a6
   16380:	move.l 12(sp),d0
   16384:	move.l 8(sp),d1
   16388:	jsr -42(a6)
   1638c:	move.l d0,4(sp)
   16390:	move.l 4(sp),d0
}
   16394:	movea.l (sp)+,a6
   16396:	lea 12(sp),sp
   1639a:	rts

0001639c <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   1639c:	lea -20(sp),sp
   163a0:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   163a4:	move.l 36(sp),24(sp)
   163aa:	move.l 40(sp),28(sp)
   163b0:	move.l 44(sp),16(sp)
   163b6:	move.l 48(sp),20(sp)
   163bc:	move.l 1b5ba <MathIeeeDoubBasBase>,d0
   163c2:	movea.l d0,a6
   163c4:	move.l 24(sp),d0
   163c8:	move.l 28(sp),d1
   163cc:	move.l 16(sp),d2
   163d0:	move.l 20(sp),d3
   163d4:	jsr -42(a6)
   163d8:	move.l d0,12(sp)
   163dc:	move.l 12(sp),d0
}
   163e0:	movem.l (sp)+,d2-d3/a6
   163e4:	lea 20(sp),sp
   163e8:	rts

000163ea <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   163ea:	lea -12(sp),sp
   163ee:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   163f0:	move.l 20(sp),12(sp)
   163f6:	move.l 24(sp),8(sp)
   163fc:	move.l 1b5b2 <MathIeeeSingBasBase>,d0
   16402:	movea.l d0,a6
   16404:	move.l 12(sp),d0
   16408:	move.l 8(sp),d1
   1640c:	jsr -42(a6)
   16410:	move.l d0,4(sp)
   16414:	move.l 4(sp),d0
}
   16418:	movea.l (sp)+,a6
   1641a:	lea 12(sp),sp
   1641e:	rts

00016420 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   16420:	lea -12(sp),sp
   16424:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   16426:	move.l 20(sp),12(sp)
   1642c:	move.l 24(sp),8(sp)
   16432:	move.l 1b5b2 <MathIeeeSingBasBase>,d0
   16438:	movea.l d0,a6
   1643a:	move.l 12(sp),d0
   1643e:	move.l 8(sp),d1
   16442:	jsr -42(a6)
   16446:	move.l d0,4(sp)
   1644a:	move.l 4(sp),d0
}
   1644e:	movea.l (sp)+,a6
   16450:	lea 12(sp),sp
   16454:	rts

00016456 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   16456:	lea -20(sp),sp
   1645a:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   1645e:	move.l 36(sp),24(sp)
   16464:	move.l 40(sp),28(sp)
   1646a:	move.l 44(sp),16(sp)
   16470:	move.l 48(sp),20(sp)
   16476:	move.l 1b5ba <MathIeeeDoubBasBase>,d0
   1647c:	movea.l d0,a6
   1647e:	move.l 24(sp),d0
   16482:	move.l 28(sp),d1
   16486:	move.l 16(sp),d2
   1648a:	move.l 20(sp),d3
   1648e:	jsr -42(a6)
   16492:	move.l d0,12(sp)
   16496:	move.l 12(sp),d0
}
   1649a:	movem.l (sp)+,d2-d3/a6
   1649e:	lea 20(sp),sp
   164a2:	rts

000164a4 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   164a4:	lea -12(sp),sp
   164a8:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   164aa:	move.l 20(sp),12(sp)
   164b0:	move.l 24(sp),8(sp)
   164b6:	move.l 1b5b2 <MathIeeeSingBasBase>,d0
   164bc:	movea.l d0,a6
   164be:	move.l 12(sp),d0
   164c2:	move.l 8(sp),d1
   164c6:	jsr -42(a6)
   164ca:	move.l d0,4(sp)
   164ce:	move.l 4(sp),d0
}
   164d2:	movea.l (sp)+,a6
   164d4:	lea 12(sp),sp
   164d8:	rts

000164da <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   164da:	lea -12(sp),sp
   164de:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   164e0:	move.l 20(sp),12(sp)
   164e6:	move.l 24(sp),8(sp)
   164ec:	move.l 1b5b2 <MathIeeeSingBasBase>,d0
   164f2:	movea.l d0,a6
   164f4:	move.l 12(sp),d0
   164f8:	move.l 8(sp),d1
   164fc:	jsr -42(a6)
   16500:	move.l d0,4(sp)
   16504:	move.l 4(sp),d0
}
   16508:	movea.l (sp)+,a6
   1650a:	lea 12(sp),sp
   1650e:	rts

00016510 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   16510:	lea -32(sp),sp
   16514:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   16518:	move.l 48(sp),36(sp)
   1651e:	move.l 52(sp),40(sp)
   16524:	move.l 56(sp),28(sp)
   1652a:	move.l 60(sp),32(sp)
   16530:	move.l 1b5ba <MathIeeeDoubBasBase>,d0
   16536:	movea.l d0,a6
   16538:	move.l 36(sp),d0
   1653c:	move.l 40(sp),d1
   16540:	move.l 28(sp),d2
   16544:	move.l 32(sp),d3
   16548:	jsr -72(a6)
   1654c:	move.l d0,12(sp)
   16550:	move.l d1,16(sp)
   16554:	move.l 12(sp),20(sp)
   1655a:	move.l 16(sp),24(sp)
   16560:	move.l 20(sp),d0
   16564:	move.l 24(sp),d1
}
   16568:	movem.l (sp)+,d2-d3/a6
   1656c:	lea 32(sp),sp
   16570:	rts

00016572 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   16572:	lea -12(sp),sp
   16576:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   16578:	move.l 20(sp),12(sp)
   1657e:	move.l 24(sp),8(sp)
   16584:	move.l 1b5b2 <MathIeeeSingBasBase>,d0
   1658a:	movea.l d0,a6
   1658c:	move.l 12(sp),d0
   16590:	move.l 8(sp),d1
   16594:	jsr -72(a6)
   16598:	move.l d0,4(sp)
   1659c:	move.l 4(sp),d0
}
   165a0:	movea.l (sp)+,a6
   165a2:	lea 12(sp),sp
   165a6:	rts

000165a8 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   165a8:	lea -12(sp),sp
   165ac:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   165ae:	move.l 20(sp),8(sp)
   165b4:	move.l 24(sp),12(sp)
   165ba:	move.l 1b5be <MathIeeeDoubTransBase>,d0
   165c0:	movea.l d0,a6
   165c2:	move.l 8(sp),d0
   165c6:	move.l 12(sp),d1
   165ca:	jsr -102(a6)
   165ce:	move.l d0,4(sp)
   165d2:	move.l 4(sp),d0
}
   165d6:	movea.l (sp)+,a6
   165d8:	lea 12(sp),sp
   165dc:	rts

000165de <__fixunssfsi>:

unsigned int __fixunssfsi (float a) {
   165de:	subq.l #8,sp
   165e0:	move.l a6,-(sp)
	return IEEESPFix(a);
   165e2:	move.l 16(sp),8(sp)
   165e8:	move.l 1b5b2 <MathIeeeSingBasBase>,d0
   165ee:	movea.l d0,a6
   165f0:	move.l 8(sp),d0
   165f4:	jsr -30(a6)
   165f8:	move.l d0,4(sp)
   165fc:	move.l 4(sp),d0
}
   16600:	movea.l (sp)+,a6
   16602:	addq.l #8,sp
   16604:	rts

00016606 <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   16606:	       lea -24(sp),sp
   1660a:	       move.l a6,-(sp)
    if (x > 0) {
   1660c:	       clr.l -(sp)
   1660e:	       move.l 40(sp),-(sp)
   16612:	       jsr 163ea <__gtsf2>
   16618:	       addq.l #8,sp
   1661a:	       tst.l d0
   1661c:	   /-- ble.s 1664e <atan2f+0x48>
        return IEEESPAtan(y / x);
   1661e:	   |   move.l 36(sp),-(sp)
   16622:	   |   move.l 36(sp),-(sp)
   16626:	   |   jsr 1612a <__divsf3>
   1662c:	   |   addq.l #8,sp
   1662e:	   |   move.l d0,8(sp)
   16632:	   |   move.l 1b5b6 <MathIeeeSingTransBase>,d0
   16638:	   |   movea.l d0,a6
   1663a:	   |   move.l 8(sp),d0
   1663e:	   |   jsr -30(a6)
   16642:	   |   move.l d0,4(sp)
   16646:	   |   move.l 4(sp),d0
   1664a:	/--|-- bra.w 167ae <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   1664e:	|  \-> clr.l -(sp)
   16650:	|      move.l 40(sp),-(sp)
   16654:	|      jsr 164a4 <__ltsf2>
   1665a:	|      addq.l #8,sp
   1665c:	|      tst.l d0
   1665e:	|  /-- bge.s 166d2 <atan2f+0xcc>
   16660:	|  |   clr.l -(sp)
   16662:	|  |   move.l 36(sp),-(sp)
   16666:	|  |   jsr 16366 <__gesf2>
   1666c:	|  |   addq.l #8,sp
   1666e:	|  |   tst.l d0
   16670:	|  +-- blt.s 166d2 <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   16672:	|  |   move.l 36(sp),-(sp)
   16676:	|  |   move.l 36(sp),-(sp)
   1667a:	|  |   jsr 1612a <__divsf3>
   16680:	|  |   addq.l #8,sp
   16682:	|  |   move.l d0,24(sp)
   16686:	|  |   move.l 1b5b6 <MathIeeeSingTransBase>,d0
   1668c:	|  |   movea.l d0,a6
   1668e:	|  |   move.l 24(sp),d0
   16692:	|  |   jsr -30(a6)
   16696:	|  |   move.l d0,20(sp)
   1669a:	|  |   move.l 20(sp),d0
   1669e:	|  |   move.l d0,-(sp)
   166a0:	|  |   jsr 16196 <__extendsfdf2>
   166a6:	|  |   addq.l #4,sp
   166a8:	|  |   move.l #1413754136,-(sp)
   166ae:	|  |   move.l #1074340347,-(sp)
   166b4:	|  |   move.l d1,-(sp)
   166b6:	|  |   move.l d0,-(sp)
   166b8:	|  |   jsr 16066 <__adddf3>
   166be:	|  |   lea 16(sp),sp
   166c2:	|  |   move.l d1,-(sp)
   166c4:	|  |   move.l d0,-(sp)
   166c6:	|  |   jsr 165a8 <__truncdfsf2>
   166cc:	|  |   addq.l #8,sp
   166ce:	+--|-- bra.w 167ae <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   166d2:	|  \-> clr.l -(sp)
   166d4:	|      move.l 40(sp),-(sp)
   166d8:	|      jsr 164a4 <__ltsf2>
   166de:	|      addq.l #8,sp
   166e0:	|      tst.l d0
   166e2:	|  /-- bge.s 16754 <atan2f+0x14e>
   166e4:	|  |   clr.l -(sp)
   166e6:	|  |   move.l 36(sp),-(sp)
   166ea:	|  |   jsr 164a4 <__ltsf2>
   166f0:	|  |   addq.l #8,sp
   166f2:	|  |   tst.l d0
   166f4:	|  +-- bge.s 16754 <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   166f6:	|  |   move.l 36(sp),-(sp)
   166fa:	|  |   move.l 36(sp),-(sp)
   166fe:	|  |   jsr 1612a <__divsf3>
   16704:	|  |   addq.l #8,sp
   16706:	|  |   move.l d0,16(sp)
   1670a:	|  |   move.l 1b5b6 <MathIeeeSingTransBase>,d0
   16710:	|  |   movea.l d0,a6
   16712:	|  |   move.l 16(sp),d0
   16716:	|  |   jsr -30(a6)
   1671a:	|  |   move.l d0,12(sp)
   1671e:	|  |   move.l 12(sp),d0
   16722:	|  |   move.l d0,-(sp)
   16724:	|  |   jsr 16196 <__extendsfdf2>
   1672a:	|  |   addq.l #4,sp
   1672c:	|  |   move.l #1413754136,-(sp)
   16732:	|  |   move.l #1074340347,-(sp)
   16738:	|  |   move.l d1,-(sp)
   1673a:	|  |   move.l d0,-(sp)
   1673c:	|  |   jsr 16510 <__subdf3>
   16742:	|  |   lea 16(sp),sp
   16746:	|  |   move.l d1,-(sp)
   16748:	|  |   move.l d0,-(sp)
   1674a:	|  |   jsr 165a8 <__truncdfsf2>
   16750:	|  |   addq.l #8,sp
   16752:	+--|-- bra.s 167ae <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   16754:	|  \-> clr.l -(sp)
   16756:	|      move.l 40(sp),-(sp)
   1675a:	|      jsr 16160 <__eqsf2>
   16760:	|      addq.l #8,sp
   16762:	|      tst.l d0
   16764:	|  /-- bne.s 16780 <atan2f+0x17a>
   16766:	|  |   clr.l -(sp)
   16768:	|  |   move.l 36(sp),-(sp)
   1676c:	|  |   jsr 163ea <__gtsf2>
   16772:	|  |   addq.l #8,sp
   16774:	|  |   tst.l d0
   16776:	|  +-- ble.s 16780 <atan2f+0x17a>
        return PI / 2;
   16778:	|  |   move.l #1070141403,d0
   1677e:	+--|-- bra.s 167ae <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   16780:	|  \-> clr.l -(sp)
   16782:	|      move.l 40(sp),-(sp)
   16786:	|      jsr 16160 <__eqsf2>
   1678c:	|      addq.l #8,sp
   1678e:	|      tst.l d0
   16790:	|  /-- bne.s 167ac <atan2f+0x1a6>
   16792:	|  |   clr.l -(sp)
   16794:	|  |   move.l 36(sp),-(sp)
   16798:	|  |   jsr 164a4 <__ltsf2>
   1679e:	|  |   addq.l #8,sp
   167a0:	|  |   tst.l d0
   167a2:	|  +-- bge.s 167ac <atan2f+0x1a6>
        return -PI / 2;
   167a4:	|  |   move.l #-1077342245,d0
   167aa:	+--|-- bra.s 167ae <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   167ac:	|  \-> moveq #0,d0
    }
}
   167ae:	\----> movea.l (sp)+,a6
   167b0:	       lea 24(sp),sp
   167b4:	       rts

000167b6 <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   167b6:	lea -24(sp),sp
   167ba:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   167bc:	move.l 32(sp),20(sp)
   167c2:	move.l 36(sp),24(sp)
   167c8:	move.l 1b5be <MathIeeeDoubTransBase>,d0
   167ce:	movea.l d0,a6
   167d0:	move.l 20(sp),d0
   167d4:	move.l 24(sp),d1
   167d8:	jsr -96(a6)
   167dc:	move.l d0,4(sp)
   167e0:	move.l d1,8(sp)
   167e4:	move.l 4(sp),12(sp)
   167ea:	move.l 8(sp),16(sp)
   167f0:	move.l 12(sp),d0
   167f4:	move.l 16(sp),d1
}
   167f8:	movea.l (sp)+,a6
   167fa:	lea 24(sp),sp
   167fe:	rts

00016800 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   16800:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   16804:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   16808:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   1680c:	mulu.w 8(sp),d1
	addw	d1, d0
   16810:	add.w d1,d0
	swap	d0
   16812:	swap d0
	clrw	d0
   16814:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   16816:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   1681a:	mulu.w 10(sp),d1
	addl	d1, d0
   1681e:	add.l d1,d0
	rts
   16820:	rts

00016822 <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   16822:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   16824:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   16828:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   1682c:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   16832:	   /-- bcc.s 1684a <__udivsi3+0x28>
	movel	d0, d2
   16834:	   |   move.l d0,d2
	clrw	d2
   16836:	   |   clr.w d2
	swap	d2
   16838:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   1683a:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   1683c:	   |   move.w d2,d0
	swap	d0
   1683e:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   16840:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   16844:	   |   divu.w d1,d2
	movew	d2, d0
   16846:	   |   move.w d2,d0
	jra	6f
   16848:	/--|-- bra.s 1687a <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   1684a:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   1684c:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   1684e:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   16850:	|  |   cmpi.l #65536,d1
	jcc	4b
   16856:	|  \-- bcc.s 1684c <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   16858:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   1685a:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   16860:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   16862:	|      mulu.w d0,d1
	swap	d2
   16864:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   16866:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   16868:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   1686a:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   1686c:	|  /-- bne.s 16878 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   1686e:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   16870:	|  +-- bcs.s 16878 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   16872:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   16876:	+--|-- bls.s 1687a <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   16878:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   1687a:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   1687c:	       rts

0001687e <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   1687e:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   16880:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   16882:	    move.l 12(sp),d1
	jpl	1f
   16886:	/-- bpl.s 1688c <__divsi3+0xe>
	negl	d1
   16888:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   1688a:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   1688c:	\-> move.l 8(sp),d0
	jpl	2f
   16890:	/-- bpl.s 16896 <__divsi3+0x18>
	negl	d0
   16892:	|   neg.l d0
	negb	d2
   16894:	|   neg.b d2

2:	movel	d1, sp@-
   16896:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   16898:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   1689a:	    jsr 16822 <__udivsi3>
	addql	#8, sp
   168a0:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   168a2:	    tst.b d2
	jpl	3f
   168a4:	/-- bpl.s 168a8 <__divsi3+0x2a>
	negl	d0
   168a6:	|   neg.l d0

3:	movel	sp@+, d2
   168a8:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   168aa:	    rts

000168ac <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   168ac:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   168b0:	move.l 4(sp),d0
	movel	d1, sp@-
   168b4:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   168b6:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   168b8:	jsr 1687e <__divsi3>
	addql	#8, sp
   168be:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   168c0:	move.l 8(sp),d1
	movel	d1, sp@-
   168c4:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   168c6:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   168c8:	jsr 16800 <__mulsi3>
	addql	#8, sp
   168ce:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   168d0:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   168d4:	sub.l d0,d1
	movel	d1, d0
   168d6:	move.l d1,d0
	rts
   168d8:	rts

000168da <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   168da:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   168de:	move.l 4(sp),d0
	movel	d1, sp@-
   168e2:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   168e4:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   168e6:	jsr 16822 <__udivsi3>
	addql	#8, sp
   168ec:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   168ee:	move.l 8(sp),d1
	movel	d1, sp@-
   168f2:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   168f4:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   168f6:	jsr 16800 <__mulsi3>
	addql	#8, sp
   168fc:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   168fe:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   16902:	sub.l d0,d1
	movel	d1, d0
   16904:	move.l d1,d0
	rts
   16906:	rts

00016908 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   16908:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   1690a:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   1690e:	jsr -516(a6)
    move.l (sp)+, a6
   16912:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   16914:	rts

00016916 <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   16916:	move.b d0,(a3)+
	rts
   16918:	rts
