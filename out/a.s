
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #90112,d0
       8:	       subi.l #90112,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 16000 <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #90112,d0
      40:	       subi.l #90112,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 16000 <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 43d6 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #90112,d0
      7e:	       subi.l #90112,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 16000 <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr f4e0 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 17b28 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr f4f8 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 16000 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr f4e0 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 17b28 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 16000 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr f4e0 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 17b28 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 12b14 <PutChar+0x4>
     35c:	|  |              |   jsr 12048 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 17b30 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 17b30 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 17b30 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 17b30 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 17b30 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 17b30 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 17b30 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 12b3e <PutChar+0x2e>
     834:	|   jsr 12048 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 17b30 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 12b5a <PutChar+0x4a>
     8a6:	|   jsr 12048 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 17b30 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 17b30 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 17b30 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 17b30 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 17b30 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 17b30 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 17b30 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 17b30 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 17b28 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 17b30 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr f4e0 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 17b30 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
     c58:	       lea -88(sp),sp
     c5c:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
     c5e:	       move.l 17b28 <SysBase>,d0
     c64:	       movea.l d0,a6
     c66:	       jsr -666(a6)
     c6a:	       move.l d0,88(sp)
     c6e:	       move.l 88(sp),d0
     c72:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
     c76:	       move.l 84(sp),80(sp)
     c7c:	       moveq #40,d0
     c7e:	       move.l d0,76(sp)
     c82:	       move.l 17b28 <SysBase>,d0
     c88:	       movea.l d0,a6
     c8a:	       movea.l 80(sp),a0
     c8e:	       move.l 76(sp),d0
     c92:	       jsr -654(a6)
     c96:	       move.l d0,72(sp)
     c9a:	       move.l 72(sp),d0
     c9e:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
     ca2:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
     ca8:	       move.l #76674,60(sp)
     cb0:	       clr.l 56(sp)
     cb4:	       move.l 64(sp),52(sp)
     cba:	       clr.l 48(sp)
     cbe:	       move.l 17b28 <SysBase>,d0
     cc4:	       movea.l d0,a6
     cc6:	       movea.l 60(sp),a0
     cca:	       move.l 56(sp),d0
     cce:	       movea.l 52(sp),a1
     cd2:	       move.l 48(sp),d1
     cd6:	       jsr -444(a6)
     cda:	       move.b d0,47(sp)
     cde:	       move.b 47(sp),d0
     ce2:	   /-- beq.s cf8 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
     ce4:	   |   pea 12b8f <PutChar+0x7f>
     cea:	   |   jsr 12048 <KPrintF>
     cf0:	   |   addq.l #4,sp
        return 0;
     cf2:	   |   moveq #0,d0
     cf4:	/--|-- bra.w db2 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
     cf8:	|  \-> movea.l 64(sp),a0
     cfc:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
     d02:	|      lea 92(sp),a0
     d06:	|      lea -86(a0),a0
     d0a:	|      move.l a0,38(sp)
     d0e:	|      movea.l 42(sp),a6
     d12:	|      movea.l 38(sp),a0
     d16:	|      jsr -60(a6)
     d1a:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
     d1e:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
     d24:	|      move.l #1103515245,-(sp)
     d2a:	|      move.l 34(sp),-(sp)
     d2e:	|      jsr 129fa <__mulsi3>
     d34:	|      addq.l #8,sp
     d36:	|      addi.l #12345,d0
     d3c:	|      move.l d0,d1
     d3e:	|      bclr #31,d1
     d42:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
     d46:	|      move.l 30(sp),d0
     d4a:	|      pea 64 <_start+0x64>
     d4e:	|      move.l d0,-(sp)
     d50:	|      jsr 12ad4 <__umodsi3>
     d56:	|      addq.l #8,sp
     d58:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
     d5c:	|      move.l 26(sp),-(sp)
     d60:	|      pea 12bac <PutChar+0x9c>
     d66:	|      jsr 12048 <KPrintF>
     d6c:	|      addq.l #8,sp

    CloseDevice(ioreq);
     d6e:	|      move.l 64(sp),22(sp)
     d74:	|      move.l 17b28 <SysBase>,d0
     d7a:	|      movea.l d0,a6
     d7c:	|      movea.l 22(sp),a1
     d80:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
     d84:	|      move.l 64(sp),18(sp)
     d8a:	|      move.l 17b28 <SysBase>,d0
     d90:	|      movea.l d0,a6
     d92:	|      movea.l 18(sp),a0
     d96:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
     d9a:	|      move.l 84(sp),14(sp)
     da0:	|      move.l 17b28 <SysBase>,d0
     da6:	|      movea.l d0,a6
     da8:	|      movea.l 14(sp),a0
     dac:	|      jsr -672(a6)
    return 0;
     db0:	|      moveq #0,d0
}
     db2:	\----> movea.l (sp)+,a6
     db4:	       lea 88(sp),sp
     db8:	       rts

00000dba <pickAnimCursor>:
struct personaAnimation * mouseCursorAnim;
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     dba:	move.l 17a14 <mouseCursorAnim>,d0
     dc0:	move.l d0,-(sp)
     dc2:	jsr 5c3a <deleteAnim>
     dc8:	addq.l #4,sp
	mouseCursorAnim = pp;
     dca:	move.l 4(sp),17a14 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     dd2:	clr.l 17a18 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     dd8:	clr.l 17a1c <mouseCursorCountUp>
}
     dde:	nop
     de0:	rts

00000de2 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
	KPrintF("pasteCursor: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
     de2:	pea 12bbf <PutChar+0xaf>
     de8:	jsr 12048 <KPrintF>
     dee:	addq.l #4,sp
     df0:	nop
     df2:	rts

00000df4 <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
     df4:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
     df8:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
     dfc:	       tst.l 24(sp)
     e00:	   /-- bge.s e06 <drawLine+0x12>
     e02:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
     e06:	   \-> tst.l 28(sp)
     e0a:	   /-- bge.s e10 <drawLine+0x1c>
     e0c:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
     e10:	   \-> tst.l 32(sp)
     e14:	   /-- bge.s e1a <drawLine+0x26>
     e16:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
     e1a:	   \-> tst.l 36(sp)
     e1e:	   /-- bge.s e24 <drawLine+0x30>
     e20:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
     e24:	   \-> move.l 17bae <sceneWidth>,d0
     e2a:	       cmp.l 24(sp),d0
     e2e:	   /-- bge.s e3e <drawLine+0x4a>
     e30:	   |   move.l 17bae <sceneWidth>,d0
     e36:	   |   move.l d0,d1
     e38:	   |   subq.l #1,d1
     e3a:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
     e3e:	   \-> move.l 17bae <sceneWidth>,d0
     e44:	       cmp.l 32(sp),d0
     e48:	   /-- bge.s e58 <drawLine+0x64>
     e4a:	   |   move.l 17bae <sceneWidth>,d0
     e50:	   |   move.l d0,d1
     e52:	   |   subq.l #1,d1
     e54:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
     e58:	   \-> move.l 17bb2 <sceneHeight>,d0
     e5e:	       cmp.l 28(sp),d0
     e62:	   /-- bge.s e72 <drawLine+0x7e>
     e64:	   |   move.l 17bb2 <sceneHeight>,d0
     e6a:	   |   move.l d0,d1
     e6c:	   |   subq.l #1,d1
     e6e:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
     e72:	   \-> move.l 17bb2 <sceneHeight>,d0
     e78:	       cmp.l 36(sp),d0
     e7c:	   /-- bge.s e8c <drawLine+0x98>
     e7e:	   |   move.l 17bb2 <sceneHeight>,d0
     e84:	   |   move.l d0,d1
     e86:	   |   subq.l #1,d1
     e88:	   |   move.l d1,36(sp)

	if (x1 > x2) {
     e8c:	   \-> move.l 24(sp),d0
     e90:	       cmp.l 32(sp),d0
     e94:	/----- ble.s eb0 <drawLine+0xbc>
		x = x2; 
     e96:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
     e9c:	|      tst.w 10(sp)
     ea0:	|      seq d0
     ea2:	|      neg.b d0
     ea4:	|      move.b d0,d0
     ea6:	|      andi.w #255,d0
     eaa:	|      move.w d0,10(sp)
     eae:	|  /-- bra.s eb6 <drawLine+0xc2>
	} else x = x1;
     eb0:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
     eb6:	   \-> move.l 28(sp),d1
     eba:	       cmp.l 36(sp),d1
     ebe:	/----- ble.s eda <drawLine+0xe6>
		y = y2; 
     ec0:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
     ec6:	|      tst.w 10(sp)
     eca:	|      seq d0
     ecc:	|      neg.b d0
     ece:	|      move.b d0,d0
     ed0:	|      andi.w #255,d0
     ed4:	|      move.w d0,10(sp)
     ed8:	|  /-- bra.s ee0 <drawLine+0xec>
	} else y = y1;	
     eda:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
     ee0:	   \-> move.l 32(sp),d0
     ee4:	       sub.l 24(sp),d0
     ee8:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
     eec:	       move.l 6(sp),d0
     ef0:	   /-- bpl.s ef4 <drawLine+0x100>
     ef2:	   |   neg.l d0
     ef4:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
     ef8:	       move.l 36(sp),d1
     efc:	       sub.l 28(sp),d1
     f00:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
     f04:	       move.l 2(sp),d0
     f08:	   /-- bpl.s f0c <drawLine+0x118>
     f0a:	   |   neg.l d0
     f0c:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
     f10:	       tst.l 6(sp)
     f14:	   /-- bne.s f38 <drawLine+0x144>
		diffX = 1;
     f16:	   |   moveq #1,d0
     f18:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
     f1c:	   |   move.l 17bae <sceneWidth>,d0
     f22:	   |   subq.l #1,d0
     f24:	   |   cmp.l 16(sp),d0
     f28:	   +-- bne.s f38 <drawLine+0x144>
     f2a:	   |   move.l 17bae <sceneWidth>,d0
     f30:	   |   move.l d0,d1
     f32:	   |   subq.l #2,d1
     f34:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
     f38:	   \-> tst.l 2(sp)
     f3c:	   /-- bne.s f60 <drawLine+0x16c>
		diffY = 1;
     f3e:	   |   moveq #1,d0
     f40:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
     f44:	   |   move.l 17bb2 <sceneHeight>,d0
     f4a:	   |   subq.l #1,d0
     f4c:	   |   cmp.l 12(sp),d0
     f50:	   +-- bne.s f60 <drawLine+0x16c>
     f52:	   |   move.l 17bb2 <sceneHeight>,d0
     f58:	   |   move.l d0,d1
     f5a:	   |   subq.l #2,d1
     f5c:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
     f60:	   \-> pea 12bf8 <PutChar+0xe8>
     f66:	       jsr 12048 <KPrintF>
     f6c:	       addq.l #4,sp
	
}
     f6e:	       nop
     f70:	       lea 20(sp),sp
     f74:	       rts

00000f76 <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
     f76:	                      lea -24(sp),sp
     f7a:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
     f7c:	                      move.l 17a30 <firstTexture>,d0
     f82:	/-------------------- beq.w 1060 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
     f86:	|                     clr.l 24(sp)
     f8a:	|     /-------------- bra.w 1054 <deleteTextures+0xde>
			BOOL found = FALSE;
     f8e:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
     f92:	|  |  |               move.l 17a30 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
     f9a:	|  |  |               movea.l 20(sp),a0
     f9e:	|  |  |               move.l (a0),d1
     fa0:	|  |  |               move.l 24(sp),d0
     fa4:	|  |  |               add.l d0,d0
     fa6:	|  |  |               add.l d0,d0
     fa8:	|  |  |               movea.l 36(sp),a0
     fac:	|  |  |               adda.l d0,a0
     fae:	|  |  |               move.l (a0),d0
     fb0:	|  |  |               cmp.l d1,d0
     fb2:	|  |  |  /----------- bne.w 1046 <deleteTextures+0xd0>
				found = TRUE;
     fb6:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
     fbc:	|  |  |  |            movea.l 20(sp),a0
     fc0:	|  |  |  |            move.l 12(a0),d0
     fc4:	|  |  |  |            move.l d0,17a30 <firstTexture>
				FreeVec(list);
     fca:	|  |  |  |            move.l 20(sp),6(sp)
     fd0:	|  |  |  |            move.l 17b28 <SysBase>,d0
     fd6:	|  |  |  |            movea.l d0,a6
     fd8:	|  |  |  |            movea.l 6(sp),a1
     fdc:	|  |  |  |            jsr -690(a6)
				continue;
     fe0:	|  |  |  |  /-------- bra.s 1050 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
     fe2:	|  |  |  |  |  /----> movea.l 20(sp),a0
     fe6:	|  |  |  |  |  |      movea.l 12(a0),a0
     fea:	|  |  |  |  |  |      move.l (a0),d1
     fec:	|  |  |  |  |  |      move.l 24(sp),d0
     ff0:	|  |  |  |  |  |      add.l d0,d0
     ff2:	|  |  |  |  |  |      add.l d0,d0
     ff4:	|  |  |  |  |  |      movea.l 36(sp),a0
     ff8:	|  |  |  |  |  |      adda.l d0,a0
     ffa:	|  |  |  |  |  |      move.l (a0),d0
     ffc:	|  |  |  |  |  |      cmp.l d1,d0
     ffe:	|  |  |  |  |  |  /-- bne.s 103c <deleteTextures+0xc6>
					found = TRUE;
    1000:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    1006:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    100a:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    1010:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    1014:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    1018:	|  |  |  |  |  |  |   move.l 12(a0),d0
    101c:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    1020:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    1024:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    102a:	|  |  |  |  |  |  |   move.l 17b28 <SysBase>,d0
    1030:	|  |  |  |  |  |  |   movea.l d0,a6
    1032:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    1036:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    103a:	|  |  |  |  +--|--|-- bra.s 1050 <deleteTextures+0xda>
				}
				list = list->next;
    103c:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    1040:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    1046:	|  |  |  \--|--|----> movea.l 20(sp),a0
    104a:	|  |  |     |  |      move.l 12(a0),d0
    104e:	|  |  |     |  \----- bne.s fe2 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    1050:	|  |  |     \-------> addq.l #1,24(sp)
    1054:	|  |  \-------------> move.l 24(sp),d0
    1058:	|  |                  cmp.l 32(sp),d0
    105c:	|  \----------------- bcs.w f8e <deleteTextures+0x18>
			}
		}
	}
}
    1060:	\-------------------> nop
    1062:	                      movea.l (sp)+,a6
    1064:	                      lea 24(sp),sp
    1068:	                      rts

0000106a <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    106a:	subq.l #4,sp
    106c:	move.l 8(sp),d0
    1070:	move.w d0,d0
    1072:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    1076:	pea 12c1b <PutChar+0x10b>
    107c:	jsr 12048 <KPrintF>
    1082:	addq.l #4,sp
    1084:	nop
    1086:	addq.l #4,sp
    1088:	rts

0000108a <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    108a:	       moveq #-1,d0
    108c:	       cmp.l 4(sp),d0
    1090:	   /-- bne.s 1096 <resourceNameFromNum+0xc>
    1092:	   |   moveq #0,d0
    1094:	/--|-- bra.s 10ce <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    1096:	|  \-> move.l 17b04 <numResourceNames>,d0
    109c:	|  /-- bne.s 10a6 <resourceNameFromNum+0x1c>
    109e:	|  |   move.l #76875,d0
    10a4:	+--|-- bra.s 10ce <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    10a6:	|  \-> move.l 17b04 <numResourceNames>,d0
    10ac:	|      cmp.l 4(sp),d0
    10b0:	|  /-- ble.s 10c8 <resourceNameFromNum+0x3e>
    10b2:	|  |   move.l 17ac0 <allResourceNames>,d1
    10b8:	|  |   move.l 4(sp),d0
    10bc:	|  |   add.l d0,d0
    10be:	|  |   add.l d0,d0
    10c0:	|  |   movea.l d1,a0
    10c2:	|  |   adda.l d0,a0
    10c4:	|  |   move.l (a0),d0
    10c6:	+--|-- bra.s 10ce <resourceNameFromNum+0x44>
	return "Unknown resource";
    10c8:	|  \-> move.l #76884,d0
    10ce:	\----> rts

000010d0 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{	
    10d0:	          lea -40(sp),sp
    10d4:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    10d8:	          move.l #320,17a28 <winWidth>
    winHeight = 256;
    10e2:	          move.l #256,17a2c <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    10ec:	          tst.l 56(sp)
    10f0:	      /-- bne.s 1108 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    10f2:	      |   pea 12c65 <PutChar+0x155>
    10f8:	      |   jsr b8 <copyString>
    10fe:	      |   addq.l #4,sp
    1100:	      |   move.l d0,17a40 <bundleFolder>
    1106:	   /--|-- bra.s 111e <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    1108:	   |  \-> movea.l 60(sp),a0
    110c:	   |      move.l (a0),d0
    110e:	   |      move.l d0,-(sp)
    1110:	   |      jsr b8 <copyString>
    1116:	   |      addq.l #4,sp
    1118:	   |      move.l d0,17a40 <bundleFolder>
	}
    
	int lastSlash = -1;
    111e:	   \----> moveq #-1,d0
    1120:	          move.l d0,44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    1124:	          clr.l 40(sp)
    1128:	   /----- bra.s 114a <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    112a:	/--|----> move.l 17a40 <bundleFolder>,d1
    1130:	|  |      move.l 40(sp),d0
    1134:	|  |      movea.l d1,a0
    1136:	|  |      adda.l d0,a0
    1138:	|  |      move.b (a0),d0
    113a:	|  |      cmpi.b #47,d0
    113e:	|  |  /-- bne.s 1146 <main_sludge+0x76>
    1140:	|  |  |   move.l 40(sp),44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    1146:	|  |  \-> addq.l #1,40(sp)
    114a:	|  \----> move.l 17a40 <bundleFolder>,d1
    1150:	|         move.l 40(sp),d0
    1154:	|         movea.l d1,a0
    1156:	|         adda.l d0,a0
    1158:	|         move.b (a0),d0
    115a:	\-------- bne.s 112a <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    115c:	          move.l 17a40 <bundleFolder>,d0
    1162:	          move.l 44(sp),d1
    1166:	          addq.l #1,d1
    1168:	          movea.l d0,a0
    116a:	          adda.l d1,a0
    116c:	          clr.b (a0)

	if (argc > 1) {
    116e:	          moveq #1,d0
    1170:	          cmp.l 56(sp),d0
    1174:	      /-- bge.s 1190 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    1176:	      |   move.l 56(sp),d0
    117a:	      |   addi.l #1073741823,d0
    1180:	      |   add.l d0,d0
    1182:	      |   add.l d0,d0
    1184:	      |   movea.l 60(sp),a0
    1188:	      |   adda.l d0,a0
    118a:	      |   move.l (a0),48(sp)
    118e:	   /--|-- bra.s 11ea <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    1190:	   |  \-> move.l 17a40 <bundleFolder>,d0
    1196:	   |      pea 12c6b <PutChar+0x15b>
    119c:	   |      move.l d0,-(sp)
    119e:	   |      jsr f520 <joinStrings>
    11a4:	   |      addq.l #8,sp
    11a6:	   |      move.l d0,48(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    11aa:	   |      move.l 48(sp),-(sp)
    11ae:	   |      jsr f436 <fileExists>
    11b4:	   |      addq.l #4,sp
    11b6:	   |      tst.b d0
    11b8:	   +----- bne.s 11ea <main_sludge+0x11a>
			FreeVec(sludgeFile);
    11ba:	   |      move.l 48(sp),36(sp)
    11c0:	   |      move.l 17b28 <SysBase>,d0
    11c6:	   |      movea.l d0,a6
    11c8:	   |      movea.l 36(sp),a1
    11cc:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    11d0:	   |      move.l 17a40 <bundleFolder>,d0
    11d6:	   |      pea 12c78 <PutChar+0x168>
    11dc:	   |      move.l d0,-(sp)
    11de:	   |      jsr f520 <joinStrings>
    11e4:	   |      addq.l #8,sp
    11e6:	   |      move.l d0,48(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	if (! fileExists(sludgeFile) ) {	
    11ea:	   \----> move.l 48(sp),-(sp)
    11ee:	          jsr f436 <fileExists>
    11f4:	          addq.l #4,sp
    11f6:	          tst.b d0
    11f8:	      /-- bne.s 1242 <main_sludge+0x172>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    11fa:	      |   move.l 17b30 <DOSBase>,d0
    1200:	      |   movea.l d0,a6
    1202:	      |   jsr -60(a6)
    1206:	      |   move.l d0,28(sp)
    120a:	      |   move.l 28(sp),d0
    120e:	      |   move.l d0,24(sp)
    1212:	      |   move.l #76929,20(sp)
    121a:	      |   moveq #21,d0
    121c:	      |   move.l d0,16(sp)
    1220:	      |   move.l 17b30 <DOSBase>,d0
    1226:	      |   movea.l d0,a6
    1228:	      |   move.l 24(sp),d1
    122c:	      |   move.l 20(sp),d2
    1230:	      |   move.l 16(sp),d3
    1234:	      |   jsr -48(a6)
    1238:	      |   move.l d0,12(sp)
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    123c:	      |   moveq #0,d0
    123e:	/-----|-- bra.w 1366 <main_sludge+0x296>
	}

	setGameFilePath (sludgeFile);
    1242:	|     \-> move.l 48(sp),-(sp)
    1246:	|         jsr 1370 <setGameFilePath>
    124c:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    124e:	|         move.l 48(sp),-(sp)
    1252:	|         jsr 2c0c <initSludge>
    1258:	|         addq.l #4,sp
    125a:	|         tst.w d0
    125c:	|     /-- bne.s 1264 <main_sludge+0x194>
    125e:	|     |   moveq #0,d0
    1260:	+-----|-- bra.w 1366 <main_sludge+0x296>
	
	if (! resizeBackdrop (winWidth, winHeight)) {
    1264:	|     \-> move.l 17a2c <winHeight>,d0
    126a:	|         move.l d0,d1
    126c:	|         move.l 17a28 <winWidth>,d0
    1272:	|         move.l d1,-(sp)
    1274:	|         move.l d0,-(sp)
    1276:	|         jsr 8e2a <resizeBackdrop>
    127c:	|         addq.l #8,sp
    127e:	|         tst.w d0
    1280:	|     /-- bne.s 1296 <main_sludge+0x1c6>
		KPrintF("Couldn't allocate memory for backdrop");
    1282:	|     |   pea 12c97 <PutChar+0x187>
    1288:	|     |   jsr 12048 <KPrintF>
    128e:	|     |   addq.l #4,sp
		return FALSE;
    1290:	|     |   moveq #0,d0
    1292:	+-----|-- bra.w 1366 <main_sludge+0x296>
	}

	if (! initPeople ())
    1296:	|     \-> jsr 6680 <initPeople>
    129c:	|         tst.w d0
    129e:	|     /-- bne.s 12b4 <main_sludge+0x1e4>
	{
		KPrintF("Couldn't initialise people stuff");
    12a0:	|     |   pea 12cbd <PutChar+0x1ad>
    12a6:	|     |   jsr 12048 <KPrintF>
    12ac:	|     |   addq.l #4,sp
		return FALSE;
    12ae:	|     |   moveq #0,d0
    12b0:	+-----|-- bra.w 1366 <main_sludge+0x296>
	}

	if (! initFloor ())
    12b4:	|     \-> jsr 113f2 <initFloor>
    12ba:	|         tst.w d0
    12bc:	|     /-- bne.s 12d2 <main_sludge+0x202>
	{
		KPrintF("Couldn't initialise floor stuff");
    12be:	|     |   pea 12cde <PutChar+0x1ce>
    12c4:	|     |   jsr 12048 <KPrintF>
    12ca:	|     |   addq.l #4,sp
		
		return FALSE;
    12cc:	|     |   moveq #0,d0
    12ce:	+-----|-- bra.w 1366 <main_sludge+0x296>
	}

	if (! initObjectTypes ())
    12d2:	|     \-> jsr 8fd4 <initObjectTypes>
    12d8:	|         tst.w d0
    12da:	|     /-- bne.s 12ee <main_sludge+0x21e>
	{
		KPrintF("Couldn't initialise object type stuff");
    12dc:	|     |   pea 12cfe <PutChar+0x1ee>
    12e2:	|     |   jsr 12048 <KPrintF>
    12e8:	|     |   addq.l #4,sp
		return FALSE;
    12ea:	|     |   moveq #0,d0
    12ec:	+-----|-- bra.s 1366 <main_sludge+0x296>
	}

	initSpeech ();
    12ee:	|     \-> jsr 4ccc <initSpeech>
	initStatusBar ();
    12f4:	|         jsr 4790 <initStatusBar>

	gameName = getNumberedString(1);
    12fa:	|         pea 1 <_start+0x1>
    12fe:	|         jsr 3d86 <getNumberedString>
    1304:	|         addq.l #4,sp
    1306:	|         move.l d0,17a38 <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    130c:	|         move.l 17af8 <noStack>,d0
    1312:	|         pea 1 <_start+0x1>
    1316:	|         move.l d0,-(sp)
    1318:	|         clr.l -(sp)
    131a:	|         clr.l -(sp)
    131c:	|         clr.l -(sp)
    131e:	|         jsr 3c16 <startNewFunctionNum>
    1324:	|         lea 20(sp),sp

	weAreDoneSoQuit = 0;
    1328:	|         clr.l 17a44 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {		
    132e:	|     /-- bra.s 1348 <main_sludge+0x278>
		handleInput();
    1330:	|  /--|-> jsr 2c04 <handleInput>
		debug_start_idle();
    1336:	|  |  |   jsr 12220 <debug_start_idle>
		WaitVbl();
    133c:	|  |  |   jsr 11f70 <WaitVbl>
		debug_stop_idle();		
    1342:	|  |  |   jsr 1223a <debug_stop_idle>
	while ( !weAreDoneSoQuit ) {		
    1348:	|  |  \-> move.l 17a44 <weAreDoneSoQuit>,d0
    134e:	|  \----- beq.s 1330 <main_sludge+0x260>
	}
	//Amiga Cleanup
	FreeVec(sludgeFile);
    1350:	|         move.l 48(sp),32(sp)
    1356:	|         move.l 17b28 <SysBase>,d0
    135c:	|         movea.l d0,a6
    135e:	|         movea.l 32(sp),a1
    1362:	|         jsr -690(a6)
}
    1366:	\-------> movem.l (sp)+,d2-d3/a6
    136a:	          lea 40(sp),sp
    136e:	          rts

00001370 <setGameFilePath>:

void setGameFilePath (char * f) {
    1370:	          lea -1104(sp),sp
    1374:	          move.l a6,-(sp)
    1376:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    1378:	          move.l #1112,d0
    137e:	          add.l sp,d0
    1380:	          addi.l #-1102,d0
    1386:	          move.l d0,1100(sp)
    138a:	          move.l #998,1096(sp)
    1392:	          move.l 17b30 <DOSBase>,d0
    1398:	          movea.l d0,a6
    139a:	          move.l 1100(sp),d1
    139e:	          move.l 1096(sp),d2
    13a2:	          jsr -564(a6)
    13a6:	          move.w d0,1094(sp)
    13aa:	          move.w 1094(sp),d0
    13ae:	      /-- bne.s 13be <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    13b0:	      |   pea 12d24 <PutChar+0x214>
    13b6:	      |   jsr 12048 <KPrintF>
    13bc:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    13be:	      \-> moveq #-1,d0
    13c0:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    13c4:	          clr.l 1104(sp)
    13c8:	   /----- bra.s 13e6 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    13ca:	/--|----> move.l 1104(sp),d0
    13ce:	|  |      movea.l 1116(sp),a0
    13d2:	|  |      adda.l d0,a0
    13d4:	|  |      move.b (a0),d0
    13d6:	|  |      cmpi.b #47,d0
    13da:	|  |  /-- bne.s 13e2 <setGameFilePath+0x72>
    13dc:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    13e2:	|  |  \-> addq.l #1,1104(sp)
    13e6:	|  \----> move.l 1104(sp),d0
    13ea:	|         movea.l 1116(sp),a0
    13ee:	|         adda.l d0,a0
    13f0:	|         move.b (a0),d0
    13f2:	\-------- bne.s 13ca <setGameFilePath+0x5a>
	}

	if (got != -1) {
    13f4:	          moveq #-1,d0
    13f6:	          cmp.l 1108(sp),d0
    13fa:	   /----- beq.s 1474 <setGameFilePath+0x104>
		f[got] = 0;	
    13fc:	   |      move.l 1108(sp),d0
    1400:	   |      movea.l 1116(sp),a0
    1404:	   |      adda.l d0,a0
    1406:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    1408:	   |      move.l 1116(sp),1090(sp)
    140e:	   |      moveq #-2,d0
    1410:	   |      move.l d0,1086(sp)
    1414:	   |      move.l 17b30 <DOSBase>,d0
    141a:	   |      movea.l d0,a6
    141c:	   |      move.l 1090(sp),d1
    1420:	   |      move.l 1086(sp),d2
    1424:	   |      jsr -84(a6)
    1428:	   |      move.l d0,1082(sp)
    142c:	   |      move.l 1082(sp),d0
    1430:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    1434:	   |      move.l 1078(sp),1074(sp)
    143a:	   |      move.l 17b30 <DOSBase>,d0
    1440:	   |      movea.l d0,a6
    1442:	   |      move.l 1074(sp),d1
    1446:	   |      jsr -126(a6)
    144a:	   |      move.l d0,1070(sp)
    144e:	   |      move.l 1070(sp),d0
    1452:	   |  /-- bne.s 1466 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    1454:	   |  |   move.l 1116(sp),-(sp)
    1458:	   |  |   pea 12d4a <PutChar+0x23a>
    145e:	   |  |   jsr 12048 <KPrintF>
    1464:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    1466:	   |  \-> move.l 1108(sp),d0
    146a:	   |      movea.l 1116(sp),a0
    146e:	   |      adda.l d0,a0
    1470:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    1474:	   \----> move.l #400,1066(sp)
    147c:	          clr.l 1062(sp)
    1480:	          move.l 17b28 <SysBase>,d0
    1486:	          movea.l d0,a6
    1488:	          move.l 1066(sp),d0
    148c:	          move.l 1062(sp),d1
    1490:	          jsr -684(a6)
    1494:	          move.l d0,1058(sp)
    1498:	          move.l 1058(sp),d0
    149c:	          move.l d0,17a3c <gamePath>
	if (gamePath==0) {
    14a2:	          move.l 17a3c <gamePath>,d0
    14a8:	      /-- bne.s 14bc <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    14aa:	      |   pea 12d7d <PutChar+0x26d>
    14b0:	      |   jsr 12048 <KPrintF>
    14b6:	      |   addq.l #4,sp
    14b8:	   /--|-- bra.w 15a4 <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    14bc:	   |  \-> move.l 17a3c <gamePath>,1054(sp)
    14c4:	   |      moveq #-2,d0
    14c6:	   |      move.l d0,1050(sp)
    14ca:	   |      move.l 17b30 <DOSBase>,d0
    14d0:	   |      movea.l d0,a6
    14d2:	   |      move.l 1054(sp),d1
    14d6:	   |      move.l 1050(sp),d2
    14da:	   |      jsr -84(a6)
    14de:	   |      move.l d0,1046(sp)
    14e2:	   |      move.l 1046(sp),d0
    14e6:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    14ea:	   |      move.l 1042(sp),1038(sp)
    14f0:	   |      move.l 17b30 <DOSBase>,d0
    14f6:	   |      movea.l d0,a6
    14f8:	   |      move.l 1038(sp),d1
    14fc:	   |      jsr -126(a6)
    1500:	   |      move.l d0,1034(sp)
    1504:	   |      move.l 1034(sp),d0
    1508:	   |  /-- bne.s 1518 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    150a:	   |  |   pea 12db8 <PutChar+0x2a8>
    1510:	   |  |   jsr 12048 <KPrintF>
    1516:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    1518:	   |  \-> move.l #1112,d0
    151e:	   |      add.l sp,d0
    1520:	   |      addi.l #-1102,d0
    1526:	   |      move.l d0,1030(sp)
    152a:	   |      moveq #-2,d0
    152c:	   |      move.l d0,1026(sp)
    1530:	   |      move.l 17b30 <DOSBase>,d0
    1536:	   |      movea.l d0,a6
    1538:	   |      move.l 1030(sp),d1
    153c:	   |      move.l 1026(sp),d2
    1540:	   |      jsr -84(a6)
    1544:	   |      move.l d0,1022(sp)
    1548:	   |      move.l 1022(sp),d0
    154c:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    1550:	   |      move.l 1042(sp),1018(sp)
    1556:	   |      move.l 17b30 <DOSBase>,d0
    155c:	   |      movea.l d0,a6
    155e:	   |      move.l 1018(sp),d1
    1562:	   |      jsr -126(a6)
    1566:	   |      move.l d0,1014(sp)
    156a:	   |      move.l 1014(sp),d0
    156e:	   |  /-- bne.s 1584 <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    1570:	   |  |   moveq #10,d0
    1572:	   |  |   add.l sp,d0
    1574:	   |  |   move.l d0,-(sp)
    1576:	   |  |   pea 12de4 <PutChar+0x2d4>
    157c:	   |  |   jsr 12048 <KPrintF>
    1582:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    1584:	   |  \-> move.l 17a3c <gamePath>,d0
    158a:	   +----- beq.s 15a4 <setGameFilePath+0x234>
    158c:	   |      move.l 17a3c <gamePath>,1010(sp)
    1594:	   |      move.l 17b28 <SysBase>,d0
    159a:	   |      movea.l d0,a6
    159c:	   |      movea.l 1010(sp),a1
    15a0:	   |      jsr -690(a6)
}
    15a4:	   \----> move.l (sp)+,d2
    15a6:	          movea.l (sp)+,a6
    15a8:	          lea 1104(sp),sp
    15ac:	          rts

000015ae <killZBuffer>:
#include "stringy.h"
#include "support/gcc8_c_support.h"

struct zBufferData zBuffer;

void killZBuffer () {
    15ae:	    subq.l #4,sp
    15b0:	    move.l a6,-(sp)
	if (zBuffer.tex) {
    15b2:	    move.l 17a98 <zBuffer+0x50>,d0
    15b8:	/-- beq.s 15f0 <killZBuffer+0x42>
		deleteTextures (1, &zBuffer.texName);
    15ba:	|   pea 17a9c <zBuffer+0x54>
    15c0:	|   pea 1 <_start+0x1>
    15c4:	|   jsr f76 <deleteTextures>
    15ca:	|   addq.l #8,sp
		zBuffer.texName = 0;
    15cc:	|   clr.l 17a9c <zBuffer+0x54>
        FreeVec(zBuffer.tex);
    15d2:	|   move.l 17a98 <zBuffer+0x50>,4(sp)
    15da:	|   move.l 17b28 <SysBase>,d0
    15e0:	|   movea.l d0,a6
    15e2:	|   movea.l 4(sp),a1
    15e6:	|   jsr -690(a6)
		zBuffer.tex = NULL;
    15ea:	|   clr.l 17a98 <zBuffer+0x50>
	}
	zBuffer.numPanels = 0;
    15f0:	\-> clr.l 17a50 <zBuffer+0x8>
	zBuffer.originalNum =0;
    15f6:	    clr.l 17a94 <zBuffer+0x4c>
}
    15fc:	    nop
    15fe:	    movea.l (sp)+,a6
    1600:	    addq.l #4,sp
    1602:	    rts

00001604 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    1604:	                         lea -528(sp),sp
    1608:	                         movem.l d2-d3/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    160c:	                         clr.l 528(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();
    1610:	                         jsr 15ae <killZBuffer>

	zBuffer.originalNum = y;
    1616:	                         move.l 544(sp),d0
    161a:	                         move.l d0,17a94 <zBuffer+0x4c>
	if (! openFileFromNum (y)) return FALSE;
    1620:	                         move.l 544(sp),d0
    1624:	                         move.l d0,-(sp)
    1626:	                         jsr 3e84 <openFileFromNum>
    162c:	                         addq.l #4,sp
    162e:	                         tst.l d0
    1630:	                     /-- bne.s 1638 <setZBuffer+0x34>
    1632:	                     |   clr.w d0
    1634:	/--------------------|-- bra.w 1a16 <setZBuffer+0x412>
	if (FGetC (bigDataFile) != 'S' && FGetC (bigDataFile) != 'z' && FGetC (bigDataFile) != 'b') 
    1638:	|                    \-> move.l 17b10 <bigDataFile>,524(sp)
    1640:	|                        move.l 17b30 <DOSBase>,d0
    1646:	|                        movea.l d0,a6
    1648:	|                        move.l 524(sp),d1
    164c:	|                        jsr -306(a6)
    1650:	|                        move.l d0,520(sp)
    1654:	|                        move.l 520(sp),d0
    1658:	|                        moveq #83,d1
    165a:	|                        cmp.l d0,d1
    165c:	|                    /-- beq.s 16be <setZBuffer+0xba>
    165e:	|                    |   move.l 17b10 <bigDataFile>,516(sp)
    1666:	|                    |   move.l 17b30 <DOSBase>,d0
    166c:	|                    |   movea.l d0,a6
    166e:	|                    |   move.l 516(sp),d1
    1672:	|                    |   jsr -306(a6)
    1676:	|                    |   move.l d0,512(sp)
    167a:	|                    |   move.l 512(sp),d0
    167e:	|                    |   moveq #122,d1
    1680:	|                    |   cmp.l d0,d1
    1682:	|                    +-- beq.s 16be <setZBuffer+0xba>
    1684:	|                    |   move.l 17b10 <bigDataFile>,508(sp)
    168c:	|                    |   move.l 17b30 <DOSBase>,d0
    1692:	|                    |   movea.l d0,a6
    1694:	|                    |   move.l 508(sp),d1
    1698:	|                    |   jsr -306(a6)
    169c:	|                    |   move.l d0,504(sp)
    16a0:	|                    |   move.l 504(sp),d0
    16a4:	|                    |   moveq #98,d1
    16a6:	|                    |   cmp.l d0,d1
    16a8:	|                    +-- beq.s 16be <setZBuffer+0xba>
	{
		 KPrintF("Not a Z-buffer file");
    16aa:	|                    |   pea 12e16 <PutChar+0x306>
    16b0:	|                    |   jsr 12048 <KPrintF>
    16b6:	|                    |   addq.l #4,sp
		 return FALSE;
    16b8:	|                    |   clr.w d0
    16ba:	+--------------------|-- bra.w 1a16 <setZBuffer+0x412>
	}

	switch (FGetC (bigDataFile)) {
    16be:	|                    \-> move.l 17b10 <bigDataFile>,500(sp)
    16c6:	|                        move.l 17b30 <DOSBase>,d0
    16cc:	|                        movea.l d0,a6
    16ce:	|                        move.l 500(sp),d1
    16d2:	|                        jsr -306(a6)
    16d6:	|                        move.l d0,496(sp)
    16da:	|                        move.l 496(sp),d0
    16de:	|                    /-- beq.s 16e8 <setZBuffer+0xe4>
    16e0:	|                    |   moveq #1,d1
    16e2:	|                    |   cmp.l d0,d1
    16e4:	|                 /--|-- beq.s 16fe <setZBuffer+0xfa>
    16e6:	|              /--|--|-- bra.s 172c <setZBuffer+0x128>
		case 0:
		zBuffer.width = 640;
    16e8:	|              |  |  \-> move.l #640,17a48 <zBuffer>
		zBuffer.height = 480;
    16f2:	|              |  |      move.l #480,17a4c <zBuffer+0x4>
		break;
    16fc:	|              |  |  /-- bra.s 1740 <setZBuffer+0x13c>
		
		case 1:
		zBuffer.width = get2bytes (bigDataFile);
    16fe:	|              |  \--|-> move.l 17b10 <bigDataFile>,d0
    1704:	|              |     |   move.l d0,-(sp)
    1706:	|              |     |   jsr 6bc <get2bytes>
    170c:	|              |     |   addq.l #4,sp
    170e:	|              |     |   move.l d0,17a48 <zBuffer>
		zBuffer.height = get2bytes (bigDataFile);
    1714:	|              |     |   move.l 17b10 <bigDataFile>,d0
    171a:	|              |     |   move.l d0,-(sp)
    171c:	|              |     |   jsr 6bc <get2bytes>
    1722:	|              |     |   addq.l #4,sp
    1724:	|              |     |   move.l d0,17a4c <zBuffer+0x4>
		break;
    172a:	|              |     +-- bra.s 1740 <setZBuffer+0x13c>
		
		default:
		KPrintF("Extended Z-buffer format not supported in this version of the SLUDGE engine");
    172c:	|              \-----|-> pea 12e2a <PutChar+0x31a>
    1732:	|                    |   jsr 12048 <KPrintF>
    1738:	|                    |   addq.l #4,sp
		return FALSE;
    173a:	|                    |   clr.w d0
    173c:	+--------------------|-- bra.w 1a16 <setZBuffer+0x412>
	}
	if ((unsigned int) zBuffer.width != sceneWidth || (unsigned int) zBuffer.height != sceneHeight) {
    1740:	|                    \-> move.l 17a48 <zBuffer>,d0
    1746:	|                        move.l d0,d1
    1748:	|                        move.l 17bae <sceneWidth>,d0
    174e:	|                        cmp.l d1,d0
    1750:	|                    /-- bne.s 1764 <setZBuffer+0x160>
    1752:	|                    |   move.l 17a4c <zBuffer+0x4>,d0
    1758:	|                    |   move.l d0,d1
    175a:	|                    |   move.l 17bb2 <sceneHeight>,d0
    1760:	|                    |   cmp.l d1,d0
    1762:	|                 /--|-- beq.s 17b4 <setZBuffer+0x1b0>
		char tmp[256];
		sprintf (tmp, "Z-w: %d Z-h:%d w: %d, h:%d", zBuffer.width, zBuffer.height, sceneWidth, sceneHeight);
    1764:	|                 |  \-> movea.l 17bb2 <sceneHeight>,a1
    176a:	|                 |      movea.l 17bae <sceneWidth>,a0
    1770:	|                 |      move.l 17a4c <zBuffer+0x4>,d1
    1776:	|                 |      move.l 17a48 <zBuffer>,d0
    177c:	|                 |      move.l a1,-(sp)
    177e:	|                 |      move.l a0,-(sp)
    1780:	|                 |      move.l d1,-(sp)
    1782:	|                 |      move.l d0,-(sp)
    1784:	|                 |      pea 12e76 <PutChar+0x366>
    178a:	|                 |      moveq #32,d0
    178c:	|                 |      add.l sp,d0
    178e:	|                 |      move.l d0,-(sp)
    1790:	|                 |      jsr f7fe <sprintf>
    1796:	|                 |      lea 24(sp),sp
		KPrintF("Z-buffer width and height don't match scene width and height", tmp);
    179a:	|                 |      moveq #12,d0
    179c:	|                 |      add.l sp,d0
    179e:	|                 |      move.l d0,-(sp)
    17a0:	|                 |      pea 12e91 <PutChar+0x381>
    17a6:	|                 |      jsr 12048 <KPrintF>
    17ac:	|                 |      addq.l #8,sp
		return FALSE;
    17ae:	|                 |      clr.w d0
    17b0:	+-----------------|----- bra.w 1a16 <setZBuffer+0x412>
	}
		
	zBuffer.numPanels = FGetC (bigDataFile);
    17b4:	|                 \----> move.l 17b10 <bigDataFile>,492(sp)
    17bc:	|                        move.l 17b30 <DOSBase>,d0
    17c2:	|                        movea.l d0,a6
    17c4:	|                        move.l 492(sp),d1
    17c8:	|                        jsr -306(a6)
    17cc:	|                        move.l d0,488(sp)
    17d0:	|                        move.l 488(sp),d0
    17d4:	|                        move.l d0,17a50 <zBuffer+0x8>
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    17da:	|                        clr.l 544(sp)
    17de:	|                    /-- bra.s 180a <setZBuffer+0x206>
		yPalette[y] = get2bytes (bigDataFile);
    17e0:	|                 /--|-> move.l 17b10 <bigDataFile>,d0
    17e6:	|                 |  |   move.l d0,-(sp)
    17e8:	|                 |  |   jsr 6bc <get2bytes>
    17ee:	|                 |  |   addq.l #4,sp
    17f0:	|                 |  |   move.l 544(sp),d1
    17f4:	|                 |  |   add.l d1,d1
    17f6:	|                 |  |   add.l d1,d1
    17f8:	|                 |  |   lea 540(sp),a0
    17fc:	|                 |  |   add.l a0,d1
    17fe:	|                 |  |   movea.l d1,a0
    1800:	|                 |  |   lea -144(a0),a0
    1804:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    1806:	|                 |  |   addq.l #1,544(sp)
    180a:	|                 |  \-> move.l 17a50 <zBuffer+0x8>,d0
    1810:	|                 |      cmp.l 544(sp),d0
    1814:	|                 \----- bhi.s 17e0 <setZBuffer+0x1dc>
	}
	sortZPal (yPalette, sorted, zBuffer.numPanels);
    1816:	|                        move.l 17a50 <zBuffer+0x8>,d0
    181c:	|                        move.l d0,-(sp)
    181e:	|                        move.l sp,d0
    1820:	|                        addi.l #336,d0
    1826:	|                        move.l d0,-(sp)
    1828:	|                        move.l sp,d0
    182a:	|                        addi.l #404,d0
    1830:	|                        move.l d0,-(sp)
    1832:	|                        jsr 1a20 <sortZPal>
    1838:	|                        lea 12(sp),sp
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    183c:	|                        clr.l 544(sp)
    1840:	|                    /-- bra.s 18b8 <setZBuffer+0x2b4>
		zBuffer.panel[y] = yPalette[sorted[y]];
    1842:	|                 /--|-> move.l 544(sp),d0
    1846:	|                 |  |   add.l d0,d0
    1848:	|                 |  |   add.l d0,d0
    184a:	|                 |  |   move.l #540,d1
    1850:	|                 |  |   add.l sp,d1
    1852:	|                 |  |   add.l d1,d0
    1854:	|                 |  |   movea.l d0,a0
    1856:	|                 |  |   lea -208(a0),a0
    185a:	|                 |  |   move.l (a0),d0
    185c:	|                 |  |   add.l d0,d0
    185e:	|                 |  |   add.l d0,d0
    1860:	|                 |  |   lea 540(sp),a0
    1864:	|                 |  |   add.l a0,d0
    1866:	|                 |  |   movea.l d0,a0
    1868:	|                 |  |   lea -144(a0),a0
    186c:	|                 |  |   move.l (a0),d0
    186e:	|                 |  |   move.l 544(sp),d1
    1872:	|                 |  |   addq.l #3,d1
    1874:	|                 |  |   add.l d1,d1
    1876:	|                 |  |   movea.l d1,a1
    1878:	|                 |  |   adda.l d1,a1
    187a:	|                 |  |   lea 17a48 <zBuffer>,a0
    1880:	|                 |  |   move.l d0,(0,a1,a0.l)
		sortback[sorted[y]] = y; 
    1884:	|                 |  |   move.l 544(sp),d0
    1888:	|                 |  |   add.l d0,d0
    188a:	|                 |  |   add.l d0,d0
    188c:	|                 |  |   move.l #540,d1
    1892:	|                 |  |   add.l sp,d1
    1894:	|                 |  |   add.l d1,d0
    1896:	|                 |  |   movea.l d0,a0
    1898:	|                 |  |   lea -208(a0),a0
    189c:	|                 |  |   move.l (a0),d1
    189e:	|                 |  |   move.l 544(sp),d0
    18a2:	|                 |  |   add.l d1,d1
    18a4:	|                 |  |   add.l d1,d1
    18a6:	|                 |  |   lea 540(sp),a0
    18aa:	|                 |  |   add.l a0,d1
    18ac:	|                 |  |   movea.l d1,a0
    18ae:	|                 |  |   lea -272(a0),a0
    18b2:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    18b4:	|                 |  |   addq.l #1,544(sp)
    18b8:	|                 |  \-> move.l 17a50 <zBuffer+0x8>,d0
    18be:	|                 |      cmp.l 544(sp),d0
    18c2:	|                 \----- bhi.w 1842 <setZBuffer+0x23e>
	}
	
	int picWidth = sceneWidth;
    18c6:	|                        move.l 17bae <sceneWidth>,d0
    18cc:	|                        move.l d0,484(sp)
	int picHeight = sceneHeight;
    18d0:	|                        move.l 17bb2 <sceneHeight>,d0
    18d6:	|                        move.l d0,480(sp)

	zBuffer.tex = AllocVec(picHeight*picWidth,MEMF_ANY);
    18da:	|                        move.l 484(sp),-(sp)
    18de:	|                        move.l 484(sp),-(sp)
    18e2:	|                        jsr 129fa <__mulsi3>
    18e8:	|                        addq.l #8,sp
    18ea:	|                        move.l d0,476(sp)
    18ee:	|                        clr.l 472(sp)
    18f2:	|                        move.l 17b28 <SysBase>,d0
    18f8:	|                        movea.l d0,a6
    18fa:	|                        move.l 476(sp),d0
    18fe:	|                        move.l 472(sp),d1
    1902:	|                        jsr -684(a6)
    1906:	|                        move.l d0,468(sp)
    190a:	|                        move.l 468(sp),d0
    190e:	|                        move.l d0,17a98 <zBuffer+0x50>
	if (!zBuffer.tex) {
    1914:	|                        move.l 17a98 <zBuffer+0x50>,d0
    191a:	|                    /-- bne.s 1930 <setZBuffer+0x32c>
		KPrintF("setZBuffer: Cannot allocate memory");
    191c:	|                    |   pea 12ece <PutChar+0x3be>
    1922:	|                    |   jsr 12048 <KPrintF>
    1928:	|                    |   addq.l #4,sp
		return FALSE;
    192a:	|                    |   clr.w d0
    192c:	+--------------------|-- bra.w 1a16 <setZBuffer+0x412>
	}

	for (y = 0; y < sceneHeight; y ++) {
    1930:	|                    \-> clr.l 544(sp)
    1934:	|     /----------------- bra.w 1a00 <setZBuffer+0x3fc>
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    1938:	|  /--|----------------> clr.l 536(sp)
    193c:	|  |  |     /----------- bra.w 19ec <setZBuffer+0x3e8>
			if (stillToGo == 0) {
    1940:	|  |  |  /--|----------> tst.l 528(sp)
    1944:	|  |  |  |  |  /-------- bne.s 19a2 <setZBuffer+0x39e>
				n = FGetC (bigDataFile);
    1946:	|  |  |  |  |  |         move.l 17b10 <bigDataFile>,464(sp)
    194e:	|  |  |  |  |  |         move.l 17b30 <DOSBase>,d0
    1954:	|  |  |  |  |  |         movea.l d0,a6
    1956:	|  |  |  |  |  |         move.l 464(sp),d1
    195a:	|  |  |  |  |  |         jsr -306(a6)
    195e:	|  |  |  |  |  |         move.l d0,460(sp)
    1962:	|  |  |  |  |  |         move.l 460(sp),d0
    1966:	|  |  |  |  |  |         move.l d0,532(sp)
				stillToGo = n >> 4;
    196a:	|  |  |  |  |  |         move.l 532(sp),d0
    196e:	|  |  |  |  |  |         asr.l #4,d0
    1970:	|  |  |  |  |  |         move.l d0,528(sp)
				if (stillToGo == 15) stillToGo = get2bytes (bigDataFile) + 16l;
    1974:	|  |  |  |  |  |         moveq #15,d0
    1976:	|  |  |  |  |  |         cmp.l 528(sp),d0
    197a:	|  |  |  |  |  |  /----- bne.s 1998 <setZBuffer+0x394>
    197c:	|  |  |  |  |  |  |      move.l 17b10 <bigDataFile>,d0
    1982:	|  |  |  |  |  |  |      move.l d0,-(sp)
    1984:	|  |  |  |  |  |  |      jsr 6bc <get2bytes>
    198a:	|  |  |  |  |  |  |      addq.l #4,sp
    198c:	|  |  |  |  |  |  |      movea.l d0,a0
    198e:	|  |  |  |  |  |  |      lea 16(a0),a0
    1992:	|  |  |  |  |  |  |      move.l a0,528(sp)
    1996:	|  |  |  |  |  |  |  /-- bra.s 199c <setZBuffer+0x398>
				else stillToGo ++;
    1998:	|  |  |  |  |  |  \--|-> addq.l #1,528(sp)
				n &= 15;
    199c:	|  |  |  |  |  |     \-> moveq #15,d1
    199e:	|  |  |  |  |  |         and.l d1,532(sp)
			}
			zBuffer.tex[y*picWidth + x] = sortback[n]*16;
    19a2:	|  |  |  |  |  \-------> move.l 532(sp),d0
    19a6:	|  |  |  |  |            add.l d0,d0
    19a8:	|  |  |  |  |            add.l d0,d0
    19aa:	|  |  |  |  |            lea 540(sp),a0
    19ae:	|  |  |  |  |            add.l a0,d0
    19b0:	|  |  |  |  |            movea.l d0,a0
    19b2:	|  |  |  |  |            lea -272(a0),a0
    19b6:	|  |  |  |  |            move.l (a0),d0
    19b8:	|  |  |  |  |            move.l d0,d2
    19ba:	|  |  |  |  |            move.l 17a98 <zBuffer+0x50>,d3
    19c0:	|  |  |  |  |            move.l 484(sp),d0
    19c4:	|  |  |  |  |            move.l 544(sp),-(sp)
    19c8:	|  |  |  |  |            move.l d0,-(sp)
    19ca:	|  |  |  |  |            jsr 129fa <__mulsi3>
    19d0:	|  |  |  |  |            addq.l #8,sp
    19d2:	|  |  |  |  |            move.l d0,d1
    19d4:	|  |  |  |  |            move.l 536(sp),d0
    19d8:	|  |  |  |  |            add.l d1,d0
    19da:	|  |  |  |  |            movea.l d3,a0
    19dc:	|  |  |  |  |            adda.l d0,a0
    19de:	|  |  |  |  |            move.b d2,d0
    19e0:	|  |  |  |  |            lsl.b #4,d0
    19e2:	|  |  |  |  |            move.b d0,(a0)
			stillToGo --;
    19e4:	|  |  |  |  |            subq.l #1,528(sp)
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    19e8:	|  |  |  |  |            addq.l #1,536(sp)
    19ec:	|  |  |  |  \----------> move.l 536(sp),d1
    19f0:	|  |  |  |               move.l 17bae <sceneWidth>,d0
    19f6:	|  |  |  |               cmp.l d1,d0
    19f8:	|  |  |  \-------------- bhi.w 1940 <setZBuffer+0x33c>
	for (y = 0; y < sceneHeight; y ++) {
    19fc:	|  |  |                  addq.l #1,544(sp)
    1a00:	|  |  \----------------> move.l 17bb2 <sceneHeight>,d0
    1a06:	|  |                     cmp.l 544(sp),d0
    1a0a:	|  \-------------------- bhi.w 1938 <setZBuffer+0x334>
		}
	}

	finishAccess ();
    1a0e:	|                        jsr 3d7c <finishAccess>
	
	return TRUE;
    1a14:	|                        moveq #1,d0
}
    1a16:	\----------------------> movem.l (sp)+,d2-d3/a6
    1a1a:	                         lea 528(sp),sp
    1a1e:	                         rts

00001a20 <sortZPal>:

void sortZPal (int *oldpal, int *newpal, int size) {
    1a20:	             subq.l #8,sp
	int i, tmp;

	for (i = 0; i < size; i ++) {
    1a22:	             clr.l 4(sp)
    1a26:	         /-- bra.s 1a3e <sortZPal+0x1e>
		newpal[i] = i;
    1a28:	      /--|-> move.l 4(sp),d0
    1a2c:	      |  |   add.l d0,d0
    1a2e:	      |  |   add.l d0,d0
    1a30:	      |  |   movea.l 16(sp),a0
    1a34:	      |  |   adda.l d0,a0
    1a36:	      |  |   move.l 4(sp),(a0)
	for (i = 0; i < size; i ++) {
    1a3a:	      |  |   addq.l #1,4(sp)
    1a3e:	      |  \-> move.l 4(sp),d0
    1a42:	      |      cmp.l 20(sp),d0
    1a46:	      \----- blt.s 1a28 <sortZPal+0x8>
	}

	if (size < 2) return;		
    1a48:	             moveq #1,d0
    1a4a:	             cmp.l 20(sp),d0
    1a4e:	/----------- bge.w 1b00 <sortZPal+0xe0>
		
	for (i = 1; i < size; i ++) {
    1a52:	|            moveq #1,d0
    1a54:	|            move.l d0,4(sp)
    1a58:	|     /----- bra.w 1af2 <sortZPal+0xd2>
		if (oldpal[newpal[i]] < oldpal[newpal[i-1]]) {
    1a5c:	|  /--|----> move.l 4(sp),d0
    1a60:	|  |  |      add.l d0,d0
    1a62:	|  |  |      add.l d0,d0
    1a64:	|  |  |      movea.l 16(sp),a0
    1a68:	|  |  |      adda.l d0,a0
    1a6a:	|  |  |      move.l (a0),d0
    1a6c:	|  |  |      add.l d0,d0
    1a6e:	|  |  |      add.l d0,d0
    1a70:	|  |  |      movea.l 12(sp),a0
    1a74:	|  |  |      adda.l d0,a0
    1a76:	|  |  |      move.l (a0),d1
    1a78:	|  |  |      move.l 4(sp),d0
    1a7c:	|  |  |      addi.l #1073741823,d0
    1a82:	|  |  |      add.l d0,d0
    1a84:	|  |  |      add.l d0,d0
    1a86:	|  |  |      movea.l 16(sp),a0
    1a8a:	|  |  |      adda.l d0,a0
    1a8c:	|  |  |      move.l (a0),d0
    1a8e:	|  |  |      add.l d0,d0
    1a90:	|  |  |      add.l d0,d0
    1a92:	|  |  |      movea.l 12(sp),a0
    1a96:	|  |  |      adda.l d0,a0
    1a98:	|  |  |      move.l (a0),d0
    1a9a:	|  |  |      cmp.l d1,d0
    1a9c:	|  |  |  /-- ble.s 1aee <sortZPal+0xce>
			tmp = newpal[i];
    1a9e:	|  |  |  |   move.l 4(sp),d0
    1aa2:	|  |  |  |   add.l d0,d0
    1aa4:	|  |  |  |   add.l d0,d0
    1aa6:	|  |  |  |   movea.l 16(sp),a0
    1aaa:	|  |  |  |   adda.l d0,a0
    1aac:	|  |  |  |   move.l (a0),(sp)
			newpal[i] = newpal[i-1];
    1aae:	|  |  |  |   move.l 4(sp),d0
    1ab2:	|  |  |  |   addi.l #1073741823,d0
    1ab8:	|  |  |  |   add.l d0,d0
    1aba:	|  |  |  |   add.l d0,d0
    1abc:	|  |  |  |   movea.l 16(sp),a1
    1ac0:	|  |  |  |   adda.l d0,a1
    1ac2:	|  |  |  |   move.l 4(sp),d0
    1ac6:	|  |  |  |   add.l d0,d0
    1ac8:	|  |  |  |   add.l d0,d0
    1aca:	|  |  |  |   movea.l 16(sp),a0
    1ace:	|  |  |  |   adda.l d0,a0
    1ad0:	|  |  |  |   move.l (a1),d0
    1ad2:	|  |  |  |   move.l d0,(a0)
			newpal[i-1] = tmp;
    1ad4:	|  |  |  |   move.l 4(sp),d0
    1ad8:	|  |  |  |   addi.l #1073741823,d0
    1ade:	|  |  |  |   add.l d0,d0
    1ae0:	|  |  |  |   add.l d0,d0
    1ae2:	|  |  |  |   movea.l 16(sp),a0
    1ae6:	|  |  |  |   adda.l d0,a0
    1ae8:	|  |  |  |   move.l (sp),(a0)
			i = 0;
    1aea:	|  |  |  |   clr.l 4(sp)
	for (i = 1; i < size; i ++) {
    1aee:	|  |  |  \-> addq.l #1,4(sp)
    1af2:	|  |  \----> move.l 4(sp),d0
    1af6:	|  |         cmp.l 20(sp),d0
    1afa:	|  \-------- blt.w 1a5c <sortZPal+0x3c>
    1afe:	|        /-- bra.s 1b02 <sortZPal+0xe2>
	if (size < 2) return;		
    1b00:	\--------|-> nop
		}
	}
    1b02:	         \-> addq.l #8,sp
    1b04:	             rts

00001b06 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    1b06:	/-------> lea -16(sp),sp
    1b0a:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    1b0c:	|         move.l 24(sp),-(sp)
    1b10:	|         jsr 39b4 <pauseFunction>
    1b16:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    1b18:	|     /-- bra.s 1b2a <abortFunction+0x24>
    1b1a:	|  /--|-> moveq #24,d0
    1b1c:	|  |  |   add.l 24(sp),d0
    1b20:	|  |  |   move.l d0,-(sp)
    1b22:	|  |  |   jsr 10978 <trimStack>
    1b28:	|  |  |   addq.l #4,sp
    1b2a:	|  |  \-> movea.l 24(sp),a0
    1b2e:	|  |      move.l 24(a0),d0
    1b32:	|  \----- bne.s 1b1a <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    1b34:	|         movea.l 24(sp),a0
    1b38:	|         move.l 4(a0),12(sp)
    1b3e:	|         move.l 17b28 <SysBase>,d0
    1b44:	|         movea.l d0,a6
    1b46:	|         movea.l 12(sp),a1
    1b4a:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    1b4e:	|         clr.l 16(sp)
    1b52:	|     /-- bra.s 1b72 <abortFunction+0x6c>
    1b54:	|  /--|-> movea.l 24(sp),a0
    1b58:	|  |  |   move.l 20(a0),d1
    1b5c:	|  |  |   move.l 16(sp),d0
    1b60:	|  |  |   lsl.l #3,d0
    1b62:	|  |  |   add.l d1,d0
    1b64:	|  |  |   move.l d0,-(sp)
    1b66:	|  |  |   jsr 10242 <unlinkVar>
    1b6c:	|  |  |   addq.l #4,sp
    1b6e:	|  |  |   addq.l #1,16(sp)
    1b72:	|  |  \-> movea.l 24(sp),a0
    1b76:	|  |      move.l 8(a0),d0
    1b7a:	|  |      cmp.l 16(sp),d0
    1b7e:	|  \----- bgt.s 1b54 <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    1b80:	|         movea.l 24(sp),a0
    1b84:	|         move.l 20(a0),8(sp)
    1b8a:	|         move.l 17b28 <SysBase>,d0
    1b90:	|         movea.l d0,a6
    1b92:	|         movea.l 8(sp),a1
    1b96:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    1b9a:	|         moveq #28,d0
    1b9c:	|         add.l 24(sp),d0
    1ba0:	|         move.l d0,-(sp)
    1ba2:	|         jsr 10242 <unlinkVar>
    1ba8:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    1baa:	|         movea.l 24(sp),a0
    1bae:	|         move.l 40(a0),d0
    1bb2:	|     /-- beq.s 1bc4 <abortFunction+0xbe>
    1bb4:	|     |   movea.l 24(sp),a0
    1bb8:	|     |   move.l 40(a0),d0
    1bbc:	|     |   move.l d0,-(sp)
    1bbe:	\-----|-- jsr 1b06 <abortFunction>(pc)
    1bc2:	      |   addq.l #4,sp
	FreeVec(fun);
    1bc4:	      \-> move.l 24(sp),4(sp)
    1bca:	          move.l 17b28 <SysBase>,d0
    1bd0:	          movea.l d0,a6
    1bd2:	          movea.l 4(sp),a1
    1bd6:	          jsr -690(a6)
	fun = NULL;
    1bda:	          clr.l 24(sp)
}
    1bde:	          nop
    1be0:	          movea.l (sp)+,a6
    1be2:	          lea 16(sp),sp
    1be6:	          rts

00001be8 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    1be8:	          subq.l #8,sp
	int n = 0;
    1bea:	          clr.l 4(sp)
	*killedMyself = FALSE;
    1bee:	          movea.l 20(sp),a0
    1bf2:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    1bf4:	          move.l 17ac4 <allRunningFunctions>,(sp)
	while (fun) {
    1bfa:	   /----- bra.s 1c28 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    1bfc:	/--|----> movea.l (sp),a0
    1bfe:	|  |      move.l (a0),d0
    1c00:	|  |      cmp.l 12(sp),d0
    1c04:	|  |  /-- bne.s 1c22 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    1c06:	|  |  |   movea.l (sp),a0
    1c08:	|  |  |   move.w #1,54(a0)
			n++;
    1c0e:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    1c12:	|  |  |   move.l (sp),d0
    1c14:	|  |  |   cmp.l 16(sp),d0
    1c18:	|  |  +-- bne.s 1c22 <cancelAFunction+0x3a>
    1c1a:	|  |  |   movea.l 20(sp),a0
    1c1e:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    1c22:	|  |  \-> movea.l (sp),a0
    1c24:	|  |      move.l 44(a0),(sp)
	while (fun) {
    1c28:	|  \----> tst.l (sp)
    1c2a:	\-------- bne.s 1bfc <cancelAFunction+0x14>
	}
	return n;
    1c2c:	          move.l 4(sp),d0
}
    1c30:	          addq.l #8,sp
    1c32:	          rts

00001c34 <completeTimers>:


void completeTimers () {
    1c34:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    1c36:	          move.l 17ac4 <allRunningFunctions>,(sp)

	while (thisFunction) {
    1c3c:	   /----- bra.s 1c52 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    1c3e:	/--|----> movea.l (sp),a0
    1c40:	|  |      move.b 56(a0),d0
    1c44:	|  |  /-- bne.s 1c4c <completeTimers+0x18>
    1c46:	|  |  |   movea.l (sp),a0
    1c48:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    1c4c:	|  |  \-> movea.l (sp),a0
    1c4e:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    1c52:	|  \----> tst.l (sp)
    1c54:	\-------- bne.s 1c3e <completeTimers+0xa>
	}
}
    1c56:	          nop
    1c58:	          nop
    1c5a:	          addq.l #4,sp
    1c5c:	          rts

00001c5e <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    1c5e:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    1c62:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    1c68:	                                                             movea.l 80(sp),a0
    1c6c:	                                                             move.w 54(a0),d0
    1c70:	/----------------------------------------------------------- beq.w 2b2a <continueFunction+0xecc>
		abortFunction (fun);
    1c74:	|                                                            move.l 80(sp),-(sp)
    1c78:	|                                                            jsr 1b06 <abortFunction>
    1c7e:	|                                                            addq.l #4,sp
		return TRUE;
    1c80:	|                                                            moveq #1,d0
    1c82:	|  /-------------------------------------------------------- bra.w 2b34 <continueFunction+0xed6>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    1c86:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    1c8c:	|  |  |                                                      movea.l 80(sp),a0
    1c90:	|  |  |                                                      move.l 4(a0),d1
    1c94:	|  |  |                                                      movea.l 80(sp),a0
    1c98:	|  |  |                                                      move.l 36(a0),d0
    1c9c:	|  |  |                                                      lsl.l #3,d0
    1c9e:	|  |  |                                                      movea.l d1,a0
    1ca0:	|  |  |                                                      adda.l d0,a0
    1ca2:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    1ca8:	|  |  |                                                      movea.l 80(sp),a0
    1cac:	|  |  |                                                      move.l 4(a0),d1
    1cb0:	|  |  |                                                      movea.l 80(sp),a0
    1cb4:	|  |  |                                                      move.l 36(a0),d0
    1cb8:	|  |  |                                                      lsl.l #3,d0
    1cba:	|  |  |                                                      movea.l d1,a0
    1cbc:	|  |  |                                                      adda.l d0,a0
    1cbe:	|  |  |                                                      move.l (a0),64(sp)
		KPrintF("Processing Type %ld",com);
    1cc2:	|  |  |                                                      move.l 64(sp),-(sp)
    1cc6:	|  |  |                                                      pea 12ef1 <PutChar+0x3e1>
    1ccc:	|  |  |                                                      jsr 12048 <KPrintF>
    1cd2:	|  |  |                                                      addq.l #8,sp

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    1cd4:	|  |  |                                                      moveq #41,d0
    1cd6:	|  |  |                                                      cmp.l 64(sp),d0
    1cda:	|  |  |  /-------------------------------------------------- bcs.w 2ade <continueFunction+0xe80>
    1cde:	|  |  |  |                                                   move.l 64(sp),d0
    1ce2:	|  |  |  |                                                   add.l d0,d0
    1ce4:	|  |  |  |                                                   movea.l d0,a0
    1ce6:	|  |  |  |                                                   adda.l #7410,a0
    1cec:	|  |  |  |                                                   move.w (a0),d0
    1cee:	|  |  |  |                                                   jmp (1cf2 <continueFunction+0x94>,pc,d0.w)
    1cf2:	|  |  |  |                                                   bset d6,84(a4)
    1cf6:	|  |  |  |                                                   .short 0x0a88
    1cf8:	|  |  |  |                                                   eori.w #2442,-(a0)
    1cfc:	|  |  |  |                                                   bchg d4,(a4)+
    1cfe:	|  |  |  |                                                   bclr d4,(-98,a6,d0.w:2)
    1d02:	|  |  |  |                                                   .short 0x0ae4
    1d04:	|  |  |  |                                                   .short 0x0ae4
    1d06:	|  |  |  |                                                   .short 0x0ae4
    1d08:	|  |  |  |                                                   .short 0x0ae4
    1d0a:	|  |  |  |                                                   .short 0x02cc
    1d0c:	|  |  |  |                                                   btst d1,2788(a0)
    1d10:	|  |  |  |                                                   .short 0x0ae4
    1d12:	|  |  |  |                                                   .short 0x0ae4
    1d14:	|  |  |  |                                                   .short 0x027e
    1d16:	|  |  |  |                                                   bclr d1,-(a4)
    1d18:	|  |  |  |                                                   bclr d1,d4
    1d1a:	|  |  |  |                                                   .short 0x00c4
    1d1c:	|  |  |  |                                                   subi.b #94,d6
    1d20:	|  |  |  |                                                   bset d1,d4
    1d22:	|  |  |  |                                                   eori.b #68,2530(a2)
    1d28:	|  |  |  |                                                   .short 0x0ae4
    1d2a:	|  |  |  |                                                   .short 0x0ae4
    1d2c:	|  |  |  |                                                   eori.l #65276644,(a2)+
    1d32:	|  |  |  |                                                   .short 0x0ae4
    1d34:	|  |  |  |                                                   .short 0x077c
    1d36:	|  |  |  |                                                   bchg #-10,2278(a4)
    1d3c:	|  |  |  |                                                   addi.w #1064,d2
    1d40:	|  |  |  |                                                   subi.b #40,2566(a0)
			case SLU_RETURN:
			if (fun -> calledBy) {
    1d46:	|  |  |  |                                                   movea.l 80(sp),a0
    1d4a:	|  |  |  |                                                   move.l 40(a0),d0
    1d4e:	|  |  |  |                                            /----- beq.s 1d9e <continueFunction+0x140>
				struct loadedFunction * returnTo = fun -> calledBy;
    1d50:	|  |  |  |                                            |      movea.l 80(sp),a0
    1d54:	|  |  |  |                                            |      move.l 40(a0),44(sp)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    1d5a:	|  |  |  |                                            |      movea.l 80(sp),a0
    1d5e:	|  |  |  |                                            |      move.w 48(a0),d0
    1d62:	|  |  |  |                                            |  /-- beq.s 1d7c <continueFunction+0x11e>
    1d64:	|  |  |  |                                            |  |   moveq #28,d1
    1d66:	|  |  |  |                                            |  |   add.l 44(sp),d1
    1d6a:	|  |  |  |                                            |  |   moveq #28,d0
    1d6c:	|  |  |  |                                            |  |   add.l 80(sp),d0
    1d70:	|  |  |  |                                            |  |   move.l d1,-(sp)
    1d72:	|  |  |  |                                            |  |   move.l d0,-(sp)
    1d74:	|  |  |  |                                            |  |   jsr 104ae <copyVariable>
    1d7a:	|  |  |  |                                            |  |   addq.l #8,sp
				finishFunction (fun);
    1d7c:	|  |  |  |                                            |  \-> move.l 80(sp),-(sp)
    1d80:	|  |  |  |                                            |      jsr 2b3a <finishFunction>
    1d86:	|  |  |  |                                            |      addq.l #4,sp
				fun = returnTo;
    1d88:	|  |  |  |                                            |      move.l 44(sp),80(sp)
				restartFunction (fun);
    1d8e:	|  |  |  |                                            |      move.l 80(sp),-(sp)
    1d92:	|  |  |  |                                            |      jsr 39f6 <restartFunction>
    1d98:	|  |  |  |                                            |      addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    1d9a:	|  |  |  |  /-----------------------------------------|----- bra.w 2b12 <continueFunction+0xeb4>
				finishFunction (fun);
    1d9e:	|  |  |  |  |                                         \----> move.l 80(sp),-(sp)
    1da2:	|  |  |  |  |                                                jsr 2b3a <finishFunction>
    1da8:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    1daa:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    1dae:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    1db2:	|  |  |  |  +----------------------------------------------- bra.w 2b12 <continueFunction+0xeb4>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    1db6:	|  |  |  |  |                                                movea.l 80(sp),a0
    1dba:	|  |  |  |  |                                                move.l 28(a0),d0
    1dbe:	|  |  |  |  |                                                moveq #2,d1
    1dc0:	|  |  |  |  |                                                cmp.l d0,d1
    1dc2:	|  |  |  |  |                                            /-- beq.s 1dce <continueFunction+0x170>
    1dc4:	|  |  |  |  |                                            |   moveq #4,d1
    1dc6:	|  |  |  |  |                                            |   cmp.l d0,d1
    1dc8:	|  |  |  |  |                                         /--|-- beq.s 1e1e <continueFunction+0x1c0>
    1dca:	|  |  |  |  |                                /--------|--|-- bra.w 1f1e <continueFunction+0x2c0>
				case SVT_FUNC:
				pauseFunction (fun);		
    1dce:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    1dd2:	|  |  |  |  |                                |        |      jsr 39b4 <pauseFunction>
    1dd8:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, fun -> stack,TRUE)) return FALSE;
    1dda:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    1dde:	|  |  |  |  |                                |        |      move.l 24(a0),d1
    1de2:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    1de6:	|  |  |  |  |                                |        |      move.l 32(a0),d0
    1dea:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    1dee:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    1df0:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    1df4:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    1df8:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    1dfa:	|  |  |  |  |                                |        |      jsr 3c16 <startNewFunctionNum>
    1e00:	|  |  |  |  |                                |        |      lea 20(sp),sp
    1e04:	|  |  |  |  |                                |        |      tst.l d0
    1e06:	|  |  |  |  |                                |        |  /-- bne.s 1e0e <continueFunction+0x1b0>
    1e08:	|  |  |  |  |                                |        |  |   clr.w d0
    1e0a:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 2b34 <continueFunction+0xed6>
				fun = allRunningFunctions;
    1e0e:	|  |  |  |  |                                |        |  \-> move.l 17ac4 <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    1e16:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    1e1a:	|  |  |  |  |                                |  /-----|----- bra.w 1f32 <continueFunction+0x2d4>

				case SVT_BUILT:
					{
					KPrintF("Loading function %ld",fun -> reg.varData.intValue);
    1e1e:	|  |  |  |  |                                |  |     \----> movea.l 80(sp),a0
    1e22:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    1e26:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    1e28:	|  |  |  |  |                                |  |            pea 12f05 <cursors.c.412ac4f3+0x10>
    1e2e:	|  |  |  |  |                                |  |            jsr 12048 <KPrintF>
    1e34:	|  |  |  |  |                                |  |            addq.l #8,sp
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    1e36:	|  |  |  |  |                                |  |            move.l 68(sp),d1
    1e3a:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    1e3e:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    1e42:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    1e46:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    1e48:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    1e4a:	|  |  |  |  |                                |  |            jsr ecf2 <callBuiltIn>
    1e50:	|  |  |  |  |                                |  |            lea 12(sp),sp
    1e54:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    1e58:	|  |  |  |  |                                |  |            moveq #5,d0
    1e5a:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    1e5e:	|  |  |  |  |                                |  |  /-------- bcs.w 1f1a <continueFunction+0x2bc>
    1e62:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    1e66:	|  |  |  |  |                                |  |  |         add.l d0,d0
    1e68:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    1e6a:	|  |  |  |  |                                |  |  |         adda.l #7798,a0
    1e70:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    1e72:	|  |  |  |  |                                |  |  |         jmp (1e76 <continueFunction+0x218>,pc,d0.w)
    1e76:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    1e7c:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    1e80:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    1e86:	|  |  |  |  |                                |  |  |         move.l (a2)+,-(sp)
    1e88:	|  |  |  |  |                                |  |  |         jsr 12048 <KPrintF>
    1e8e:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    1e90:	|  |  |  |  |                                |  |  |         clr.w d0
    1e92:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 2b34 <continueFunction+0xed6>

						case BR_PAUSE:
						pauseFunction (fun);
    1e96:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    1e9a:	|  |  |  |  |                                |  |  |         jsr 39b4 <pauseFunction>
    1ea0:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    1ea2:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    1ea6:	|  |  |  |  |                                |  |  |  /----- bra.s 1f1c <continueFunction+0x2be>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    1ea8:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    1eac:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    1eb0:	|  |  |  |  |                                |  |  |  +----- bra.s 1f1c <continueFunction+0x2be>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    1eb2:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    1eb6:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    1ebc:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    1ebe:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    1ec2:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    1ec6:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    1eca:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    1ecc:	|  |  |  |  |                                |  |  |  |      jsr 108e6 <setVariable>
    1ed2:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    1ed6:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    1eda:	|  |  |  |  |                                |  |  |  |      jsr 39b4 <pauseFunction>
    1ee0:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    1ee2:	|  |  |  |  |                                |  |  |  |      move.l 17af8 <noStack>,d1
    1ee8:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    1eec:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    1eee:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    1ef0:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    1ef4:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    1ef6:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    1ef8:	|  |  |  |  |                                |  |  |  |      jsr 3c16 <startNewFunctionNum>
    1efe:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    1f02:	|  |  |  |  |                                |  |  |  |      tst.l d0
    1f04:	|  |  |  |  |                                |  |  |  |  /-- bne.s 1f0c <continueFunction+0x2ae>
    1f06:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    1f08:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 2b34 <continueFunction+0xed6>
							fun = allRunningFunctions;
    1f0c:	|  |  |  |  |                                |  |  |  |  \-> move.l 17ac4 <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    1f14:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    1f18:	|  |  |  |  |                                |  |  |  +----- bra.s 1f1c <continueFunction+0x2be>

						default:
						break;
    1f1a:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    1f1c:	|  |  |  |  |                                |  +-----\----X bra.s 1f32 <continueFunction+0x2d4>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    1f1e:	|  |  |  |  |                                \--|----------> pea 12f65 <cursors.c.412ac4f3+0x70>
    1f24:	|  |  |  |  |                                   |            jsr 12048 <KPrintF>
    1f2a:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    1f2c:	|  |  |  |  |                                   |            clr.w d0
    1f2e:	|  +--|--|--|-----------------------------------|----------- bra.w 2b34 <continueFunction+0xed6>
			}
			break;
    1f32:	|  |  |  |  +-----------------------------------\----------X bra.w 2b12 <continueFunction+0xeb4>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    1f36:	|  |  |  |  |                                                moveq #28,d0
    1f38:	|  |  |  |  |                                                add.l 80(sp),d0
    1f3c:	|  |  |  |  |                                                clr.l -(sp)
    1f3e:	|  |  |  |  |                                                clr.l -(sp)
    1f40:	|  |  |  |  |                                                move.l d0,-(sp)
    1f42:	|  |  |  |  |                                                jsr 108e6 <setVariable>
    1f48:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    1f4c:	|  |  |  |  +----------------------------------------------- bra.w 2b12 <continueFunction+0xeb4>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    1f50:	|  |  |  |  |                                                move.l 68(sp),d1
    1f54:	|  |  |  |  |                                                moveq #28,d0
    1f56:	|  |  |  |  |                                                add.l 80(sp),d0
    1f5a:	|  |  |  |  |                                                move.l d1,-(sp)
    1f5c:	|  |  |  |  |                                                pea 5 <_start+0x5>
    1f60:	|  |  |  |  |                                                move.l d0,-(sp)
    1f62:	|  |  |  |  |                                                jsr 108e6 <setVariable>
    1f68:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    1f6c:	|  |  |  |  +----------------------------------------------- bra.w 2b12 <continueFunction+0xeb4>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    1f70:	|  |  |  |  |                                                move.l 68(sp),d1
    1f74:	|  |  |  |  |                                                moveq #28,d0
    1f76:	|  |  |  |  |                                                add.l 80(sp),d0
    1f7a:	|  |  |  |  |                                                move.l d1,-(sp)
    1f7c:	|  |  |  |  |                                                pea 1 <_start+0x1>
    1f80:	|  |  |  |  |                                                move.l d0,-(sp)
    1f82:	|  |  |  |  |                                                jsr 108e6 <setVariable>
    1f88:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    1f8c:	|  |  |  |  +----------------------------------------------- bra.w 2b12 <continueFunction+0xeb4>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    1f90:	|  |  |  |  |                                                moveq #28,d0
    1f92:	|  |  |  |  |                                                add.l 80(sp),d0
    1f96:	|  |  |  |  |                                                movea.l 80(sp),a0
    1f9a:	|  |  |  |  |                                                movea.l 20(a0),a0
    1f9e:	|  |  |  |  |                                                move.l 68(sp),d1
    1fa2:	|  |  |  |  |                                                lsl.l #3,d1
    1fa4:	|  |  |  |  |                                                add.l a0,d1
    1fa6:	|  |  |  |  |                                                move.l d0,-(sp)
    1fa8:	|  |  |  |  |                                                move.l d1,-(sp)
    1faa:	|  |  |  |  |                                                jsr 104ae <copyVariable>
    1fb0:	|  |  |  |  |                                                addq.l #8,sp
    1fb2:	|  |  |  |  |                                                tst.w d0
    1fb4:	|  |  |  |  |  /-------------------------------------------- bne.w 2af0 <continueFunction+0xe92>
    1fb8:	|  |  |  |  |  |                                             clr.w d0
    1fba:	|  +--|--|--|--|-------------------------------------------- bra.w 2b34 <continueFunction+0xed6>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    1fbe:	|  |  |  |  |  |                                             moveq #28,d0
    1fc0:	|  |  |  |  |  |                                             add.l 80(sp),d0
    1fc4:	|  |  |  |  |  |                                             move.l d0,-(sp)
    1fc6:	|  |  |  |  |  |                                             jsr 10534 <getBoolean>
    1fcc:	|  |  |  |  |  |                                             addq.l #4,sp
    1fce:	|  |  |  |  |  |                                             tst.w d0
    1fd0:	|  |  |  |  |  |                                      /----- beq.s 1fec <continueFunction+0x38e>
    1fd2:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    1fd6:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    1fda:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    1fdc:	|  |  |  |  |  |                                      |      jsr 10534 <getBoolean>
    1fe2:	|  |  |  |  |  |                                      |      addq.l #4,sp
    1fe4:	|  |  |  |  |  |                                      |      tst.w d0
    1fe6:	|  |  |  |  |  |                                      +----- beq.s 1fec <continueFunction+0x38e>
    1fe8:	|  |  |  |  |  |                                      |      moveq #1,d0
    1fea:	|  |  |  |  |  |                                      |  /-- bra.s 1fee <continueFunction+0x390>
    1fec:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    1fee:	|  |  |  |  |  |                                         \-> moveq #28,d1
    1ff0:	|  |  |  |  |  |                                             add.l 80(sp),d1
    1ff4:	|  |  |  |  |  |                                             move.l d0,-(sp)
    1ff6:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    1ffa:	|  |  |  |  |  |                                             move.l d1,-(sp)
    1ffc:	|  |  |  |  |  |                                             jsr 108e6 <setVariable>
    2002:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    2006:	|  |  |  |  |  |                                             moveq #24,d0
    2008:	|  |  |  |  |  |                                             add.l 80(sp),d0
    200c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    200e:	|  |  |  |  |  |                                             jsr 10978 <trimStack>
    2014:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    2016:	|  |  |  |  +--|-------------------------------------------- bra.w 2b12 <continueFunction+0xeb4>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    201a:	|  |  |  |  |  |                                             moveq #28,d0
    201c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2020:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2022:	|  |  |  |  |  |                                             jsr 10534 <getBoolean>
    2028:	|  |  |  |  |  |                                             addq.l #4,sp
    202a:	|  |  |  |  |  |                                             tst.w d0
    202c:	|  |  |  |  |  |                                         /-- bne.s 2044 <continueFunction+0x3e6>
    202e:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    2032:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    2036:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    2038:	|  |  |  |  |  |                                         |   jsr 10534 <getBoolean>
    203e:	|  |  |  |  |  |                                         |   addq.l #4,sp
    2040:	|  |  |  |  |  |                                         |   tst.w d0
    2042:	|  |  |  |  |  |                                      /--|-- beq.s 2048 <continueFunction+0x3ea>
    2044:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    2046:	|  |  |  |  |  |                                      |  /-- bra.s 204a <continueFunction+0x3ec>
    2048:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    204a:	|  |  |  |  |  |                                         \-> moveq #28,d1
    204c:	|  |  |  |  |  |                                             add.l 80(sp),d1
    2050:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2052:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    2056:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2058:	|  |  |  |  |  |                                             jsr 108e6 <setVariable>
    205e:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    2062:	|  |  |  |  |  |                                             moveq #24,d0
    2064:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2068:	|  |  |  |  |  |                                             move.l d0,-(sp)
    206a:	|  |  |  |  |  |                                             jsr 10978 <trimStack>
    2070:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    2072:	|  |  |  |  +--|-------------------------------------------- bra.w 2b12 <continueFunction+0xeb4>

			case SLU_LOAD_FUNC:
			setVariable (&fun -> reg, SVT_FUNC, param);
    2076:	|  |  |  |  |  |                                             move.l 68(sp),d1
    207a:	|  |  |  |  |  |                                             moveq #28,d0
    207c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2080:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2082:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    2086:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2088:	|  |  |  |  |  |                                             jsr 108e6 <setVariable>
    208e:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    2092:	|  |  |  |  +--|-------------------------------------------- bra.w 2b12 <continueFunction+0xeb4>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    2096:	|  |  |  |  |  |                                             move.l 68(sp),d1
    209a:	|  |  |  |  |  |                                             moveq #28,d0
    209c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    20a0:	|  |  |  |  |  |                                             move.l d1,-(sp)
    20a2:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    20a6:	|  |  |  |  |  |                                             move.l d0,-(sp)
    20a8:	|  |  |  |  |  |                                             jsr 108e6 <setVariable>
    20ae:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    20b2:	|  |  |  |  +--|-------------------------------------------- bra.w 2b12 <continueFunction+0xeb4>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    20b6:	|  |  |  |  |  |                                             move.l 68(sp),d1
    20ba:	|  |  |  |  |  |                                             moveq #28,d0
    20bc:	|  |  |  |  |  |                                             add.l 80(sp),d0
    20c0:	|  |  |  |  |  |                                             move.l d1,-(sp)
    20c2:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    20c6:	|  |  |  |  |  |                                             move.l d0,-(sp)
    20c8:	|  |  |  |  |  |                                             jsr 108e6 <setVariable>
    20ce:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    20d2:	|  |  |  |  +--|-------------------------------------------- bra.w 2b12 <continueFunction+0xeb4>

			case SLU_UNREG:
			if (dialogValue != 1) {
    20d6:	|  |  |  |  |  |                                             move.l 17a34 <dialogValue>,d0
    20dc:	|  |  |  |  |  |                                             moveq #1,d1
    20de:	|  |  |  |  |  |                                             cmp.l d0,d1
    20e0:	|  |  |  |  |  |  /----------------------------------------- beq.w 2af4 <continueFunction+0xe96>
				KPrintF(ERROR_HACKER);
    20e4:	|  |  |  |  |  |  |                                          pea 12f7a <cursors.c.412ac4f3+0x85>
    20ea:	|  |  |  |  |  |  |                                          jsr 12048 <KPrintF>
    20f0:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    20f2:	|  |  |  |  |  |  |                                          clr.w d0
    20f4:	|  +--|--|--|--|--|----------------------------------------- bra.w 2b34 <continueFunction+0xed6>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    20f8:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    20fc:	|  |  |  |  |  |  |                                          moveq #28,d0
    20fe:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    2102:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    2104:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    2106:	|  |  |  |  |  |  |                                          jsr 10078 <loadStringToVar>
    210c:	|  |  |  |  |  |  |                                          addq.l #8,sp
    210e:	|  |  |  |  |  |  |                                          tst.w d0
    2110:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 2af8 <continueFunction+0xe9a>
					return FALSE;
    2114:	|  |  |  |  |  |  |  |                                       clr.w d0
    2116:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 2b34 <continueFunction+0xed6>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    211a:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    211e:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    2122:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    2124:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    2126:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    2128:	|  |  |  |  |  |  |  |                                /----- beq.s 2186 <continueFunction+0x528>
    212a:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    212c:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    212e:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 231a <continueFunction+0x6bc>
    2132:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    2134:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 2140 <continueFunction+0x4e2>
    2136:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    2138:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    213a:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 2186 <continueFunction+0x528>
    213c:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 231a <continueFunction+0x6bc>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    2140:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    2142:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    2146:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 2172 <continueFunction+0x514>
					setVariable (&fun -> reg, SVT_NULL, 0);
    2148:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    214a:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    214e:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    2150:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    2152:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    2154:	|  |  |  |  |  |  |  |              |                 |  |   jsr 108e6 <setVariable>
    215a:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    215e:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    2160:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    2164:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    2166:	|  |  |  |  |  |  |  |              |                 |  |   jsr 10978 <trimStack>
    216c:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    216e:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 2330 <continueFunction+0x6d2>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    2172:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 12fbb <cursors.c.412ac4f3+0xc6>
    2178:	|  |  |  |  |  |  |  |              |  |              |      jsr 12048 <KPrintF>
    217e:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    2180:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    2182:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 2b34 <continueFunction+0xed6>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    2186:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    218a:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    218e:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    2192:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    2194:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 21aa <continueFunction+0x54c>
					KPrintF((ERROR_INDEX_EMPTY));
    2196:	|  |  |  |  |  |  |  |              |  |                 |   pea 12ff7 <cursors.c.412ac4f3+0x102>
    219c:	|  |  |  |  |  |  |  |              |  |                 |   jsr 12048 <KPrintF>
    21a2:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    21a4:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    21a6:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 2b34 <continueFunction+0xed6>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    21aa:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    21ac:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    21b0:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    21b2:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    21b6:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    21ba:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    21bc:	|  |  |  |  |  |  |  |              |  |                     jsr fff4 <getValueType>
    21c2:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    21c6:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    21c8:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 21d0 <continueFunction+0x572>
    21ca:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    21cc:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 2b34 <continueFunction+0xed6>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    21d0:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    21d4:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    21d8:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    21da:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    21dc:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    21de:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2200 <continueFunction+0x5a2>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    21e0:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    21e4:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    21e6:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    21ea:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    21ee:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    21f2:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    21f4:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    21f6:	|  |  |  |  |  |  |  |              |  |                 |   jsr fc7e <fastArrayGetByIndex>
    21fc:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    21fe:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 2220 <continueFunction+0x5c2>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    2200:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    2204:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    2206:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    220a:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    220e:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    2212:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    2214:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    2216:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    2218:	|  |  |  |  |  |  |  |              |  |              |      jsr 10908 <stackGetByIndex>
    221e:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    2220:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    2224:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    2226:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    222a:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    222c:	|  |  |  |  |  |  |  |              |  |                     jsr 10978 <trimStack>
    2232:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    2234:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    2238:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2254 <continueFunction+0x5f6>
						setVariable (&fun -> reg, SVT_NULL, 0);
    223a:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    223c:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    2240:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    2242:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    2244:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    2246:	|  |  |  |  |  |  |  |              |  |                 |   jsr 108e6 <setVariable>
    224c:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    2250:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 232e <continueFunction+0x6d0>
    2254:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    2256:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    225a:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 2268 <continueFunction+0x60a>
    225c:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    225e:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    2262:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 22b2 <continueFunction+0x654>
    2264:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 22fa <continueFunction+0x69c>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    2268:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    226c:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    2270:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    2274:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    2276:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr fff4 <getValueType>
    227c:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    2280:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    2282:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 228a <continueFunction+0x62c>
    2284:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    2286:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 2314 <continueFunction+0x6b6>
							setVariable (&fun -> reg, SVT_INT, ii);
    228a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    228c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    228e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    2292:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    2294:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    2298:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    229a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 108e6 <setVariable>
    22a0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    22a4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    22a6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    22a8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    22ac:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    22b0:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 2318 <continueFunction+0x6ba>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    22b2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    22b6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    22ba:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    22be:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    22c0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr fff4 <getValueType>
    22c6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    22ca:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    22cc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 22d2 <continueFunction+0x674>
    22ce:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    22d0:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 2314 <continueFunction+0x6b6>
							setVariable (&fun -> reg, SVT_INT, ii);
    22d2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    22d4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    22d6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    22da:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    22dc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    22e0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    22e2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 108e6 <setVariable>
    22e8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    22ec:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    22ee:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    22f0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    22f4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    22f8:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 2318 <continueFunction+0x6ba>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    22fa:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    22fc:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    2300:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    2302:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    2306:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 104ae <copyVariable>
    230c:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    230e:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    2310:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 232e <continueFunction+0x6d0>
    2312:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    2314:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 2b34 <continueFunction+0xed6>
				break;
    2318:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 232e <continueFunction+0x6d0>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    231a:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 13015 <cursors.c.412ac4f3+0x120>
    2320:	|  |  |  |  |  |  |  |                 |  |                  jsr 12048 <KPrintF>
    2326:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    2328:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    232a:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 2b34 <continueFunction+0xed6>
				break;
    232e:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    2330:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 2b12 <continueFunction+0xeb4>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    2334:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2338:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    233c:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    233e:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    2340:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    2342:	|  |  |  |  |  |  |  |                                   /-- beq.s 2350 <continueFunction+0x6f2>
    2344:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    2346:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    2348:	|  |  |  |  |  |  |  |                                /--|-- beq.w 23fc <continueFunction+0x79e>
    234c:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 245a <continueFunction+0x7fc>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    2350:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    2354:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    2358:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    235c:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    235e:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 2374 <continueFunction+0x716>
					KPrintF((ERROR_INDEX_EMPTY));
    2360:	|  |  |  |  |  |  |  |                             |  |  |   pea 12ff7 <cursors.c.412ac4f3+0x102>
    2366:	|  |  |  |  |  |  |  |                             |  |  |   jsr 12048 <KPrintF>
    236c:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    236e:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    2370:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 2b34 <continueFunction+0xed6>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    2374:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    2376:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    237a:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    237c:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    2380:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    2384:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    2386:	|  |  |  |  |  |  |  |                             |  |      jsr fff4 <getValueType>
    238c:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    2390:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    2392:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 239a <continueFunction+0x73c>
    2394:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    2396:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 2b34 <continueFunction+0xed6>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    239a:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    239e:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    23a2:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    23a6:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    23a8:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    23ac:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    23ae:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    23b2:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    23b6:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    23ba:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    23bc:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    23be:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    23c0:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    23c2:	|  |  |  |  |  |  |  |                             |  |      jsr 3bd2 <stackSetByIndex>
    23c8:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    23cc:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    23ce:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 23d6 <continueFunction+0x778>
						return FALSE;
    23d0:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    23d2:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 2b34 <continueFunction+0xed6>
					}
					trimStack (&fun -> stack);
    23d6:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    23d8:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    23dc:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    23de:	|  |  |  |  |  |  |  |                             |  |      jsr 10978 <trimStack>
    23e4:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    23e6:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    23e8:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    23ec:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    23ee:	|  |  |  |  |  |  |  |                             |  |      jsr 10978 <trimStack>
    23f4:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    23f6:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    23f8:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 2b12 <continueFunction+0xeb4>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    23fc:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    23fe:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    2402:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    2404:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    2408:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    240c:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    240e:	|  |  |  |  |  |  |  |                             |         jsr fff4 <getValueType>
    2414:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    2418:	|  |  |  |  |  |  |  |                             |         tst.w d0
    241a:	|  |  |  |  |  |  |  |                             |     /-- bne.s 2422 <continueFunction+0x7c4>
    241c:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    241e:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 2b34 <continueFunction+0xed6>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    2422:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    2426:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    2428:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    242c:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    2430:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    2434:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    2436:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    2438:	|  |  |  |  |  |  |  |                             |         jsr fc7e <fastArrayGetByIndex>
    243e:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    2440:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    2444:	|  |  |  |  |  |  |  |                             |     /-- bne.s 2454 <continueFunction+0x7f6>
    2446:	|  |  |  |  |  |  |  |                             |     |   pea 13039 <cursors.c.412ac4f3+0x144>
    244c:	|  |  |  |  |  |  |  |                             |     |   jsr 12048 <KPrintF>
    2452:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    2454:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    2456:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 2b34 <continueFunction+0xed6>
				KPrintF((ERROR_INDEX_NONSTACK));
    245a:	|  |  |  |  |  |  |  |                             \-------> pea 13015 <cursors.c.412ac4f3+0x120>
    2460:	|  |  |  |  |  |  |  |                                       jsr 12048 <KPrintF>
    2466:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    2468:	|  |  |  |  |  |  |  |                                       clr.w d0
    246a:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 2b34 <continueFunction+0xed6>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    246e:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2472:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    2476:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    247a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    247c:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    247e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2480:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2484:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    2488:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    248a:	|  |  |  |  |  |  |  |                                       jsr fff4 <getValueType>
    2490:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2494:	|  |  |  |  |  |  |  |                                       tst.w d0
    2496:	|  |  |  |  |  |  |  |                                   /-- bne.s 249e <continueFunction+0x840>
    2498:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    249a:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 2b34 <continueFunction+0xed6>
				setVariable (&fun -> reg, SVT_INT, ii);
    249e:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    24a2:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    24a4:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    24a8:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    24aa:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    24ae:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    24b0:	|  |  |  |  |  |  |  |                                       jsr 108e6 <setVariable>
    24b6:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    24ba:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    24be:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    24c0:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    24c2:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    24c6:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    24ca:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    24ce:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    24d0:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    24d2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    24d4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    24d8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    24da:	|  |  |  |  |  |  |  |                                       jsr 108e6 <setVariable>
    24e0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    24e4:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 2b12 <continueFunction+0xeb4>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    24e8:	|  |  |  |  |  |  |  |                                       move.l 17ada <globalVars>,d1
    24ee:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    24f2:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    24f4:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    24f6:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    24f8:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    24fc:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    2500:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2502:	|  |  |  |  |  |  |  |                                       jsr fff4 <getValueType>
    2508:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    250c:	|  |  |  |  |  |  |  |                                       tst.w d0
    250e:	|  |  |  |  |  |  |  |                                   /-- bne.s 2516 <continueFunction+0x8b8>
    2510:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2512:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 2b34 <continueFunction+0xed6>
				setVariable (&fun -> reg, SVT_INT, ii);
    2516:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    251a:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    251c:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2520:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2522:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2526:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2528:	|  |  |  |  |  |  |  |                                       jsr 108e6 <setVariable>
    252e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    2532:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    2536:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2538:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    253a:	|  |  |  |  |  |  |  |                                       movea.l 17ada <globalVars>,a0
    2540:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2544:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2546:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2548:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    254a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    254e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2550:	|  |  |  |  |  |  |  |                                       jsr 108e6 <setVariable>
    2556:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    255a:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 2b12 <continueFunction+0xeb4>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    255e:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2562:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    2566:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    256a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    256c:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    256e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2570:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2574:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    2578:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    257a:	|  |  |  |  |  |  |  |                                       jsr fff4 <getValueType>
    2580:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2584:	|  |  |  |  |  |  |  |                                       tst.w d0
    2586:	|  |  |  |  |  |  |  |                                   /-- bne.s 258e <continueFunction+0x930>
    2588:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    258a:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 2b34 <continueFunction+0xed6>
				setVariable (&fun -> reg, SVT_INT, ii);
    258e:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    2592:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2594:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2598:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    259a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    259e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    25a0:	|  |  |  |  |  |  |  |                                       jsr 108e6 <setVariable>
    25a6:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    25aa:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    25ae:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    25b0:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    25b2:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    25b6:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    25ba:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    25be:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    25c0:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    25c2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    25c4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    25c8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    25ca:	|  |  |  |  |  |  |  |                                       jsr 108e6 <setVariable>
    25d0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    25d4:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 2b12 <continueFunction+0xeb4>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    25d8:	|  |  |  |  |  |  |  |                                       move.l 17ada <globalVars>,d1
    25de:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    25e2:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    25e4:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    25e6:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    25e8:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    25ec:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    25f0:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    25f2:	|  |  |  |  |  |  |  |                                       jsr fff4 <getValueType>
    25f8:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    25fc:	|  |  |  |  |  |  |  |                                       tst.w d0
    25fe:	|  |  |  |  |  |  |  |                                   /-- bne.s 2606 <continueFunction+0x9a8>
    2600:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2602:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 2b34 <continueFunction+0xed6>
				setVariable (&fun -> reg, SVT_INT, ii);
    2606:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    260a:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    260c:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2610:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2612:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2616:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2618:	|  |  |  |  |  |  |  |                                       jsr 108e6 <setVariable>
    261e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    2622:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    2626:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2628:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    262a:	|  |  |  |  |  |  |  |                                       movea.l 17ada <globalVars>,a0
    2630:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2634:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2636:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2638:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    263a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    263e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2640:	|  |  |  |  |  |  |  |                                       jsr 108e6 <setVariable>
    2646:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    264a:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 2b12 <continueFunction+0xeb4>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    264e:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2652:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    2656:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    265a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    265c:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    265e:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2660:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2664:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2666:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2668:	|  |  |  |  |  |  |  |                                       jsr 104ae <copyVariable>
    266e:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    2670:	|  |  |  |  |  |  |  |                                       tst.w d0
    2672:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 2afc <continueFunction+0xe9e>
    2676:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    2678:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 2b34 <continueFunction+0xed6>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    267c:	|  |  |  |  |  |  |  |  |                                    move.l 17ada <globalVars>,d1
    2682:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    2686:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    2688:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    268a:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    268c:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    2690:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    2692:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    2694:	|  |  |  |  |  |  |  |  |                                    jsr 104ae <copyVariable>
    269a:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    269c:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    269e:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 2b00 <continueFunction+0xea2>
    26a2:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    26a4:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 2b34 <continueFunction+0xed6>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    26a8:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    26aa:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    26ae:	|  |  |  |  |  |  |  |  |  |                                 movea.l 17ada <globalVars>,a0
    26b4:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    26b8:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    26ba:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    26bc:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    26be:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    26c0:	|  |  |  |  |  |  |  |  |  |                                 jsr 104ae <copyVariable>
    26c6:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    26c8:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    26ca:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 2b04 <continueFunction+0xea6>
    26ce:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    26d0:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 2b34 <continueFunction+0xed6>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    26d4:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    26d6:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    26da:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    26dc:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    26e0:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    26e2:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    26e4:	|  |  |  |  |  |  |  |  |  |  |                              jsr f830 <addVarToStack>
    26ea:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    26ec:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    26ee:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 2b08 <continueFunction+0xeaa>
    26f2:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    26f4:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 2b34 <continueFunction+0xed6>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    26f8:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    26fa:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    26fe:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    2700:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    2704:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    2706:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    2708:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr f8b6 <addVarToStackQuick>
    270e:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    2710:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    2712:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 2b0c <continueFunction+0xeae>
    2716:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    2718:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 2b34 <continueFunction+0xed6>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    271c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    271e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    2722:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    2724:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 10534 <getBoolean>
    272a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    272c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    272e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    2730:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    2732:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    2734:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    2736:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    2738:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    273c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    273e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    2742:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    2744:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 108e6 <setVariable>
    274a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    274e:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 2b12 <continueFunction+0xeb4>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    2752:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    2754:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    2758:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    275a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 10534 <getBoolean>
    2760:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    2762:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    2764:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 2b10 <continueFunction+0xeb2>
				advanceNow = FALSE;
    2768:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    276c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    2770:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    2776:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 2b10 <continueFunction+0xeb2>

			case SLU_BRANCH:
			advanceNow = FALSE;
    277a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    277e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    2782:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    2788:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 2b12 <continueFunction+0xeb4>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    278c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    278e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    2792:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    2794:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    2798:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    279c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    279e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr fff4 <getValueType>
    27a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    27a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    27aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 27b2 <continueFunction+0xb54>
    27ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    27ae:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 2b34 <continueFunction+0xed6>
				setVariable (&fun -> reg, SVT_INT, -i);
    27b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    27b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    27b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    27ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    27bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    27c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    27c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    27c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    27c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 108e6 <setVariable>
    27ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    27d2:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 2b12 <continueFunction+0xeb4>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    27d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    27da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    27de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 2ac8 <continueFunction+0xe6a>
    27e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    27e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    27e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 2864 <continueFunction+0xc06>
    27ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    27ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    27f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 28ae <continueFunction+0xc50>
    27f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    27f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    27fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 2808 <continueFunction+0xbaa>
    27fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    27fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    2802:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 2836 <continueFunction+0xbd8>
    2804:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 28ae <continueFunction+0xc50>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    2808:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    280a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    280e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    2812:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    2816:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    2818:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    281a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr f92a <addVariablesInSecond>
    2820:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    2822:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    2824:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    2828:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    282a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 10978 <trimStack>
    2830:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    2832:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 2adc <continueFunction+0xe7e>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    2836:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    2838:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    283c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    2840:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    2844:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    2846:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    2848:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr f9e8 <compareVariablesInSecond>
    284e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    2850:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    2852:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    2856:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    2858:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 10978 <trimStack>
    285e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    2860:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 2adc <continueFunction+0xe7e>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    2864:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    2866:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    286a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    286e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    2872:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    2874:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    2876:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr f9e8 <compareVariablesInSecond>
    287c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    287e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    2880:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    2884:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    2886:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 10978 <trimStack>
    288c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    288e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    2892:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    2896:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    2898:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    289a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    289c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    28a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    28a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    28aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 2adc <continueFunction+0xe7e>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    28ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    28b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    28b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    28b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    28bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    28c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    28c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr fff4 <getValueType>
    28c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    28cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    28ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 28d6 <continueFunction+0xc78>
    28d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    28d2:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 2b34 <continueFunction+0xed6>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    28d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    28d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    28dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    28de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    28e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    28e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    28e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr fff4 <getValueType>
    28ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    28f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    28f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 28fc <continueFunction+0xc9e>
    28f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    28f8:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 2b34 <continueFunction+0xed6>
					trimStack (&fun -> stack);
    28fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    28fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    2902:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    2904:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 10978 <trimStack>
    290a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    290c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    290e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    2912:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    2914:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    2916:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 2ada <continueFunction+0xe7c>
    291a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    291c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    291e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #10538,a0
    2924:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    2926:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (292a <continueFunction+0xccc>,pc,d0.w)
    292a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    292e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    2930:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    2938:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    293a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    2942:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    294a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    2952:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    295a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    295e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    2962:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2964:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2966:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 129fa <__mulsi3>
    296c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    296e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    2970:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2972:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2976:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2978:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    297c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    297e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 108e6 <setVariable>
    2984:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2988:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 2adc <continueFunction+0xe7e>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    298c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    2990:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    2994:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    2996:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2998:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    299c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    299e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    29a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    29a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 108e6 <setVariable>
    29aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    29ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 2adc <continueFunction+0xe7e>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    29b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    29b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    29ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    29bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    29be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12aa6 <__modsi3>
    29c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    29c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    29c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    29ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    29ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    29d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    29d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    29d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 108e6 <setVariable>
    29dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    29e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 2adc <continueFunction+0xe7e>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    29e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    29e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    29ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    29ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    29f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12a78 <__divsi3>
    29f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    29f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    29fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    29fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2a00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2a02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2a06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2a08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 108e6 <setVariable>
    2a0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2a12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 2adc <continueFunction+0xe7e>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    2a16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    2a1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    2a1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    2a20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    2a22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    2a24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    2a26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    2a28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2a2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2a2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2a30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2a34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2a36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 108e6 <setVariable>
    2a3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2a40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 2adc <continueFunction+0xe7e>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    2a44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    2a48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    2a4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    2a4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    2a50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    2a52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    2a54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    2a56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2a58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2a5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2a5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2a62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2a64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 108e6 <setVariable>
    2a6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2a6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 2adc <continueFunction+0xe7e>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    2a70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    2a74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    2a78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    2a7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    2a7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    2a7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    2a80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    2a82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2a84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2a88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2a8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2a8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2a90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 108e6 <setVariable>
    2a96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2a9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 2adc <continueFunction+0xe7e>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    2a9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    2aa0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    2aa4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    2aa6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    2aa8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    2aaa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    2aac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    2aae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2ab0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2ab4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2ab6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2aba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2abc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 108e6 <setVariable>
    2ac2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2ac6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 2adc <continueFunction+0xe7e>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    2ac8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 1305a <cursors.c.412ac4f3+0x165>
    2ace:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 12048 <KPrintF>
    2ad4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    2ad6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    2ad8:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 2b34 <continueFunction+0xed6>
						break;
    2ada:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    2adc:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 2b12 <continueFunction+0xeb4>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    2ade:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 13072 <cursors.c.412ac4f3+0x17d>
    2ae4:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 12048 <KPrintF>
    2aea:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    2aec:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    2aee:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 2b34 <continueFunction+0xed6>
			break;
    2af0:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    2af2:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 2b12 <continueFunction+0xeb4>
			break;
    2af4:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    2af6:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 2b12 <continueFunction+0xeb4>
			break;
    2af8:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    2afa:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 2b12 <continueFunction+0xeb4>
			break;
    2afc:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    2afe:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 2b12 <continueFunction+0xeb4>
			break;
    2b00:	|  |  |     |              \--|--|--|--|-------------------> nop
    2b02:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 2b12 <continueFunction+0xeb4>
			break;
    2b04:	|  |  |     |                 \--|--|--|-------------------> nop
    2b06:	|  |  |     +--------------------|--|--|-------------------- bra.s 2b12 <continueFunction+0xeb4>
			break;
    2b08:	|  |  |     |                    \--|--|-------------------> nop
    2b0a:	|  |  |     +-----------------------|--|-------------------- bra.s 2b12 <continueFunction+0xeb4>
			break;
    2b0c:	|  |  |     |                       \--|-------------------> nop
    2b0e:	|  |  |     +--------------------------|-------------------- bra.s 2b12 <continueFunction+0xeb4>
			break;
    2b10:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    2b12:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    2b16:	+--|--|----------------------------------------------------- beq.s 2b2a <continueFunction+0xecc>
    2b18:	|  |  |                                                      movea.l 80(sp),a0
    2b1c:	|  |  |                                                      move.l 36(a0),d0
    2b20:	|  |  |                                                      addq.l #1,d0
    2b22:	|  |  |                                                      movea.l 80(sp),a0
    2b26:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    2b2a:	\--|--|----------------------------------------------------> tst.w 74(sp)
    2b2e:	   |  \----------------------------------------------------- bne.w 1c86 <continueFunction+0x28>

	}
	return TRUE;
    2b32:	   |                                                         moveq #1,d0
}
    2b34:	   \-------------------------------------------------------> lea 76(sp),sp
    2b38:	                                                             rts

00002b3a <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    2b3a:	       lea -16(sp),sp
    2b3e:	       move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    2b40:	       move.l 24(sp),-(sp)
    2b44:	       jsr 39b4 <pauseFunction>
    2b4a:	       addq.l #4,sp
	if (fun -> stack) 
    2b4c:	       movea.l 24(sp),a0
    2b50:	       move.l 24(a0),d0
    2b54:	   /-- beq.s 2b6a <finishFunction+0x30>
		KPrintF("finishfunction:", ERROR_NON_EMPTY_STACK);
    2b56:	   |   pea 1309e <cursors.c.412ac4f3+0x1a9>
    2b5c:	   |   pea 130cb <cursors.c.412ac4f3+0x1d6>
    2b62:	   |   jsr 12048 <KPrintF>
    2b68:	   |   addq.l #8,sp
	FreeVec( fun -> compiledLines);
    2b6a:	   \-> movea.l 24(sp),a0
    2b6e:	       move.l 4(a0),12(sp)
    2b74:	       move.l 17b28 <SysBase>,d0
    2b7a:	       movea.l d0,a6
    2b7c:	       movea.l 12(sp),a1
    2b80:	       jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    2b84:	       clr.l 16(sp)
    2b88:	   /-- bra.s 2ba8 <finishFunction+0x6e>
    2b8a:	/--|-> movea.l 24(sp),a0
    2b8e:	|  |   move.l 20(a0),d1
    2b92:	|  |   move.l 16(sp),d0
    2b96:	|  |   lsl.l #3,d0
    2b98:	|  |   add.l d1,d0
    2b9a:	|  |   move.l d0,-(sp)
    2b9c:	|  |   jsr 10242 <unlinkVar>
    2ba2:	|  |   addq.l #4,sp
    2ba4:	|  |   addq.l #1,16(sp)
    2ba8:	|  \-> movea.l 24(sp),a0
    2bac:	|      move.l 8(a0),d0
    2bb0:	|      cmp.l 16(sp),d0
    2bb4:	\----- bgt.s 2b8a <finishFunction+0x50>
	FreeVec(fun -> localVars);
    2bb6:	       movea.l 24(sp),a0
    2bba:	       move.l 20(a0),8(sp)
    2bc0:	       move.l 17b28 <SysBase>,d0
    2bc6:	       movea.l d0,a6
    2bc8:	       movea.l 8(sp),a1
    2bcc:	       jsr -690(a6)
	unlinkVar (&fun -> reg);
    2bd0:	       moveq #28,d0
    2bd2:	       add.l 24(sp),d0
    2bd6:	       move.l d0,-(sp)
    2bd8:	       jsr 10242 <unlinkVar>
    2bde:	       addq.l #4,sp
	FreeVec(fun);
    2be0:	       move.l 24(sp),4(sp)
    2be6:	       move.l 17b28 <SysBase>,d0
    2bec:	       movea.l d0,a6
    2bee:	       movea.l 4(sp),a1
    2bf2:	       jsr -690(a6)
	fun = NULL;
    2bf6:	       clr.l 24(sp)
}
    2bfa:	       nop
    2bfc:	       movea.l (sp)+,a6
    2bfe:	       lea 16(sp),sp
    2c02:	       rts

00002c04 <handleInput>:

BOOL handleInput () {
	//Amiga Todo: Actually handle input
	return runSludge ();
    2c04:	jsr 3a10 <runSludge>
}
    2c0a:	rts

00002c0c <initSludge>:

BOOL initSludge (char * filename) {
    2c0c:	             lea -296(sp),sp
    2c10:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    2c14:	             clr.l 312(sp)
	mouseCursorAnim = makeNullAnim ();
    2c18:	             jsr 6a26 <makeNullAnim>
    2c1e:	             move.l d0,17a14 <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    2c24:	             pea 17ad6 <gameVersion>
    2c2a:	             pea 130db <cursors.c.412ac4f3+0x1e6>
    2c30:	             pea 45 <_start+0x45>
    2c34:	             pea 47 <_start+0x47>
    2c38:	             move.l 336(sp),-(sp)
    2c3c:	             jsr 3644 <openAndVerify>
    2c42:	             lea 20(sp),sp
    2c46:	             move.l d0,292(sp)
	if (! fp) return FALSE;
    2c4a:	         /-- bne.s 2c52 <initSludge+0x46>
    2c4c:	         |   clr.w d0
    2c4e:	/--------|-- bra.w 3370 <initSludge+0x764>
	if (FGetC (fp)) {
    2c52:	|        \-> move.l 292(sp),288(sp)
    2c58:	|            move.l 17b30 <DOSBase>,d0
    2c5e:	|            movea.l d0,a6
    2c60:	|            move.l 288(sp),d1
    2c64:	|            jsr -306(a6)
    2c68:	|            move.l d0,284(sp)
    2c6c:	|            move.l 284(sp),d0
    2c70:	|  /-------- beq.w 2e16 <initSludge+0x20a>
		numBIFNames = get2bytes (fp);
    2c74:	|  |         move.l 292(sp),-(sp)
    2c78:	|  |         jsr 6bc <get2bytes>
    2c7e:	|  |         addq.l #4,sp
    2c80:	|  |         move.l d0,17afc <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    2c86:	|  |         move.l 17afc <numBIFNames>,d0
    2c8c:	|  |         move.l d0,280(sp)
    2c90:	|  |         clr.l 276(sp)
    2c94:	|  |         move.l 17b28 <SysBase>,d0
    2c9a:	|  |         movea.l d0,a6
    2c9c:	|  |         move.l 280(sp),d0
    2ca0:	|  |         move.l 276(sp),d1
    2ca4:	|  |         jsr -684(a6)
    2ca8:	|  |         move.l d0,272(sp)
    2cac:	|  |         move.l 272(sp),d0
    2cb0:	|  |         move.l d0,17abc <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    2cb6:	|  |         move.l 17abc <allBIFNames>,d0
    2cbc:	|  |     /-- bne.s 2cc4 <initSludge+0xb8>
    2cbe:	|  |     |   clr.w d0
    2cc0:	+--|-----|-- bra.w 3370 <initSludge+0x764>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    2cc4:	|  |     \-> clr.l 308(sp)
    2cc8:	|  |     /-- bra.s 2cee <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    2cca:	|  |  /--|-> move.l 17abc <allBIFNames>,d1
    2cd0:	|  |  |  |   move.l 308(sp),d0
    2cd4:	|  |  |  |   add.l d0,d0
    2cd6:	|  |  |  |   add.l d0,d0
    2cd8:	|  |  |  |   movea.l d1,a2
    2cda:	|  |  |  |   adda.l d0,a2
    2cdc:	|  |  |  |   move.l 292(sp),-(sp)
    2ce0:	|  |  |  |   jsr b02 <readString>
    2ce6:	|  |  |  |   addq.l #4,sp
    2ce8:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    2cea:	|  |  |  |   addq.l #1,308(sp)
    2cee:	|  |  |  \-> move.l 17afc <numBIFNames>,d0
    2cf4:	|  |  |      cmp.l 308(sp),d0
    2cf8:	|  |  \----- bgt.s 2cca <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    2cfa:	|  |         move.l 292(sp),-(sp)
    2cfe:	|  |         jsr 6bc <get2bytes>
    2d04:	|  |         addq.l #4,sp
    2d06:	|  |         move.l d0,17b08 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    2d0c:	|  |         move.l 17b08 <numUserFunc>,d0
    2d12:	|  |         move.l d0,268(sp)
    2d16:	|  |         clr.l 264(sp)
    2d1a:	|  |         move.l 17b28 <SysBase>,d0
    2d20:	|  |         movea.l d0,a6
    2d22:	|  |         move.l 268(sp),d0
    2d26:	|  |         move.l 264(sp),d1
    2d2a:	|  |         jsr -684(a6)
    2d2e:	|  |         move.l d0,260(sp)
    2d32:	|  |         move.l 260(sp),d0
    2d36:	|  |         move.l d0,17ac8 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    2d3c:	|  |         move.l 17ac8 <allUserFunc>,d0
    2d42:	|  |     /-- bne.s 2d4a <initSludge+0x13e>
    2d44:	|  |     |   clr.w d0
    2d46:	+--|-----|-- bra.w 3370 <initSludge+0x764>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    2d4a:	|  |     \-> clr.l 304(sp)
    2d4e:	|  |     /-- bra.s 2d74 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    2d50:	|  |  /--|-> move.l 17ac8 <allUserFunc>,d1
    2d56:	|  |  |  |   move.l 304(sp),d0
    2d5a:	|  |  |  |   add.l d0,d0
    2d5c:	|  |  |  |   add.l d0,d0
    2d5e:	|  |  |  |   movea.l d1,a2
    2d60:	|  |  |  |   adda.l d0,a2
    2d62:	|  |  |  |   move.l 292(sp),-(sp)
    2d66:	|  |  |  |   jsr b02 <readString>
    2d6c:	|  |  |  |   addq.l #4,sp
    2d6e:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    2d70:	|  |  |  |   addq.l #1,304(sp)
    2d74:	|  |  |  \-> move.l 17b08 <numUserFunc>,d0
    2d7a:	|  |  |      cmp.l 304(sp),d0
    2d7e:	|  |  \----- bgt.s 2d50 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    2d80:	|  |         move.l 17ad6 <gameVersion>,d0
    2d86:	|  |         cmpi.l #258,d0
    2d8c:	|  +-------- ble.w 2e16 <initSludge+0x20a>
			numResourceNames = get2bytes (fp);
    2d90:	|  |         move.l 292(sp),-(sp)
    2d94:	|  |         jsr 6bc <get2bytes>
    2d9a:	|  |         addq.l #4,sp
    2d9c:	|  |         move.l d0,17b04 <numResourceNames>
			allResourceNames = AllocVec(numResourceNames,MEMF_ANY);
    2da2:	|  |         move.l 17b04 <numResourceNames>,d0
    2da8:	|  |         move.l d0,256(sp)
    2dac:	|  |         clr.l 252(sp)
    2db0:	|  |         move.l 17b28 <SysBase>,d0
    2db6:	|  |         movea.l d0,a6
    2db8:	|  |         move.l 256(sp),d0
    2dbc:	|  |         move.l 252(sp),d1
    2dc0:	|  |         jsr -684(a6)
    2dc4:	|  |         move.l d0,248(sp)
    2dc8:	|  |         move.l 248(sp),d0
    2dcc:	|  |         move.l d0,17ac0 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    2dd2:	|  |         move.l 17ac0 <allResourceNames>,d0
    2dd8:	|  |     /-- bne.s 2de0 <initSludge+0x1d4>
    2dda:	|  |     |   clr.w d0
    2ddc:	+--|-----|-- bra.w 3370 <initSludge+0x764>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    2de0:	|  |     \-> clr.l 300(sp)
    2de4:	|  |     /-- bra.s 2e0a <initSludge+0x1fe>
				allResourceNames[fn] =  (char *) readString (fp);
    2de6:	|  |  /--|-> move.l 17ac0 <allResourceNames>,d1
    2dec:	|  |  |  |   move.l 300(sp),d0
    2df0:	|  |  |  |   add.l d0,d0
    2df2:	|  |  |  |   add.l d0,d0
    2df4:	|  |  |  |   movea.l d1,a2
    2df6:	|  |  |  |   adda.l d0,a2
    2df8:	|  |  |  |   move.l 292(sp),-(sp)
    2dfc:	|  |  |  |   jsr b02 <readString>
    2e02:	|  |  |  |   addq.l #4,sp
    2e04:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    2e06:	|  |  |  |   addq.l #1,300(sp)
    2e0a:	|  |  |  \-> move.l 17b04 <numResourceNames>,d0
    2e10:	|  |  |      cmp.l 300(sp),d0
    2e14:	|  |  \----- bgt.s 2de6 <initSludge+0x1da>
			}
		}
	}
	winWidth = get2bytes (fp);
    2e16:	|  \-------> move.l 292(sp),-(sp)
    2e1a:	|            jsr 6bc <get2bytes>
    2e20:	|            addq.l #4,sp
    2e22:	|            move.l d0,17a28 <winWidth>
	winHeight = get2bytes (fp);
    2e28:	|            move.l 292(sp),-(sp)
    2e2c:	|            jsr 6bc <get2bytes>
    2e32:	|            addq.l #4,sp
    2e34:	|            move.l d0,17a2c <winHeight>
	specialSettings = FGetC (fp);
    2e3a:	|            move.l 292(sp),244(sp)
    2e40:	|            move.l 17b30 <DOSBase>,d0
    2e46:	|            movea.l d0,a6
    2e48:	|            move.l 244(sp),d1
    2e4c:	|            jsr -306(a6)
    2e50:	|            move.l d0,240(sp)
    2e54:	|            move.l 240(sp),d0
    2e58:	|            move.l d0,17b0c <specialSettings>

	desiredfps = 1000/FGetC (fp);
    2e5e:	|            move.l 292(sp),236(sp)
    2e64:	|            move.l 17b30 <DOSBase>,d0
    2e6a:	|            movea.l d0,a6
    2e6c:	|            move.l 236(sp),d1
    2e70:	|            jsr -306(a6)
    2e74:	|            move.l d0,232(sp)
    2e78:	|            move.l 232(sp),d0
    2e7c:	|            move.l d0,-(sp)
    2e7e:	|            pea 3e8 <encodeFilename+0xea>
    2e82:	|            jsr 12a78 <__divsi3>
    2e88:	|            addq.l #8,sp
    2e8a:	|            move.l d0,16022 <desiredfps>

	FreeVec(readString (fp));
    2e90:	|            move.l 292(sp),-(sp)
    2e94:	|            jsr b02 <readString>
    2e9a:	|            addq.l #4,sp
    2e9c:	|            move.l d0,228(sp)
    2ea0:	|            move.l 17b28 <SysBase>,d0
    2ea6:	|            movea.l d0,a6
    2ea8:	|            movea.l 228(sp),a1
    2eac:	|            jsr -690(a6)

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    2eb0:	|            move.l 292(sp),224(sp)
    2eb6:	|            move.l #96974,220(sp)
    2ebe:	|            moveq #8,d0
    2ec0:	|            move.l d0,216(sp)
    2ec4:	|            moveq #1,d1
    2ec6:	|            move.l d1,212(sp)
    2eca:	|            move.l 17b30 <DOSBase>,d0
    2ed0:	|            movea.l d0,a6
    2ed2:	|            move.l 224(sp),d1
    2ed6:	|            move.l 220(sp),d2
    2eda:	|            move.l 216(sp),d3
    2ede:	|            move.l 212(sp),d4
    2ee2:	|            jsr -324(a6)
    2ee6:	|            move.l d0,208(sp)
    2eea:	|            move.l 208(sp),d0
    2eee:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    2ef2:	|            moveq #1,d0
    2ef4:	|            cmp.l 204(sp),d0
    2ef8:	|        /-- beq.s 2f08 <initSludge+0x2fc>
		KPrintF("Reading error in initSludge.\n");
    2efa:	|        |   pea 13114 <cursors.c.412ac4f3+0x21f>
    2f00:	|        |   jsr 12048 <KPrintF>
    2f06:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    2f08:	|        \-> move.l 17ad6 <gameVersion>,d0
    2f0e:	|            cmpi.l #258,d0
    2f14:	|        /-- ble.s 2f24 <initSludge+0x318>
    2f16:	|        |   move.l 292(sp),-(sp)
    2f1a:	|        |   jsr b02 <readString>
    2f20:	|        |   addq.l #4,sp
    2f22:	|     /--|-- bra.s 2f38 <initSludge+0x32c>
    2f24:	|     |  \-> pea 13132 <cursors.c.412ac4f3+0x23d>
    2f2a:	|     |      pea 13132 <cursors.c.412ac4f3+0x23d>
    2f30:	|     |      jsr f520 <joinStrings>
    2f36:	|     |      addq.l #8,sp
    2f38:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    2f3c:	|            move.l 17ad6 <gameVersion>,d0
    2f42:	|            cmpi.l #258,d0
    2f48:	|     /----- ble.s 2f6a <initSludge+0x35e>
    2f4a:	|     |      move.l 292(sp),196(sp)
    2f50:	|     |      move.l 17b30 <DOSBase>,d0
    2f56:	|     |      movea.l d0,a6
    2f58:	|     |      move.l 196(sp),d1
    2f5c:	|     |      jsr -306(a6)
    2f60:	|     |      move.l d0,192(sp)
    2f64:	|     |      move.l 192(sp),d0
    2f68:	|     |  /-- bra.s 2f6c <initSludge+0x360>
    2f6a:	|     \--|-> moveq #0,d0
    2f6c:	|        \-> move.l d0,17bf2 <gameSettings+0x4>
	makeLanguageTable (fp);
    2f72:	|            move.l 292(sp),-(sp)
    2f76:	|            jsr eef2 <makeLanguageTable>
    2f7c:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    2f7e:	|            move.l 17ad6 <gameVersion>,d0
    2f84:	|            cmpi.l #261,d0
    2f8a:	|        /-- ble.s 2fd8 <initSludge+0x3cc>
	{
		FGetC(fp);
    2f8c:	|        |   move.l 292(sp),188(sp)
    2f92:	|        |   move.l 17b30 <DOSBase>,d0
    2f98:	|        |   movea.l d0,a6
    2f9a:	|        |   move.l 188(sp),d1
    2f9e:	|        |   jsr -306(a6)
    2fa2:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    2fa6:	|        |   move.l 292(sp),180(sp)
    2fac:	|        |   move.l 17b30 <DOSBase>,d0
    2fb2:	|        |   movea.l d0,a6
    2fb4:	|        |   move.l 180(sp),d1
    2fb8:	|        |   jsr -306(a6)
    2fbc:	|        |   move.l d0,176(sp)
		getFloat (fp);
    2fc0:	|        |   move.l 292(sp),-(sp)
    2fc4:	|        |   jsr 7d8 <getFloat>
    2fca:	|        |   addq.l #4,sp
		getFloat (fp);
    2fcc:	|        |   move.l 292(sp),-(sp)
    2fd0:	|        |   jsr 7d8 <getFloat>
    2fd6:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    2fd8:	|        \-> move.l 292(sp),-(sp)
    2fdc:	|            jsr b02 <readString>
    2fe2:	|            addq.l #4,sp
    2fe4:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    2fe8:	|            pea 13133 <cursors.c.412ac4f3+0x23e>
    2fee:	|            move.l 176(sp),-(sp)
    2ff2:	|            jsr f4a0 <strcmp>
    2ff8:	|            addq.l #8,sp
    2ffa:	|            tst.l d0
    2ffc:	|        /-- beq.s 3004 <initSludge+0x3f8>
		return FALSE;
    2ffe:	|        |   clr.w d0
    3000:	+--------|-- bra.w 3370 <initSludge+0x764>
	}
	FreeVec( checker);
    3004:	|        \-> move.l 172(sp),168(sp)
    300a:	|            move.l 17b28 <SysBase>,d0
    3010:	|            movea.l d0,a6
    3012:	|            movea.l 168(sp),a1
    3016:	|            jsr -690(a6)
	checker = NULL;
    301a:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    301e:	|            move.l 292(sp),164(sp)
    3024:	|            move.l 17b30 <DOSBase>,d0
    302a:	|            movea.l d0,a6
    302c:	|            move.l 164(sp),d1
    3030:	|            jsr -306(a6)
    3034:	|            move.l d0,160(sp)
    3038:	|            move.l 160(sp),d0
    303c:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    3040:	|            moveq #0,d0
    3042:	|            move.b 159(sp),d0
    3046:	|            moveq #1,d1
    3048:	|            and.l d1,d0
    304a:	|        /-- beq.s 30a2 <initSludge+0x496>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    304c:	|        |   move.l 17b30 <DOSBase>,d0
    3052:	|        |   movea.l d0,a6
    3054:	|        |   jsr -60(a6)
    3058:	|        |   move.l d0,38(sp)
    305c:	|        |   move.l 38(sp),d0
    3060:	|        |   move.l d0,34(sp)
    3064:	|        |   move.l #78139,30(sp)
    306c:	|        |   moveq #54,d0
    306e:	|        |   move.l d0,26(sp)
    3072:	|        |   move.l 17b30 <DOSBase>,d0
    3078:	|        |   movea.l d0,a6
    307a:	|        |   move.l 34(sp),d1
    307e:	|        |   move.l 30(sp),d2
    3082:	|        |   move.l 26(sp),d3
    3086:	|        |   jsr -48(a6)
    308a:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    308e:	|        |   pea 13172 <cursors.c.412ac4f3+0x27d>
    3094:	|        |   jsr 12048 <KPrintF>
    309a:	|        |   addq.l #4,sp
		return FALSE;
    309c:	|        |   clr.w d0
    309e:	+--------|-- bra.w 3370 <initSludge+0x764>
	}

	numGlobals = get2bytes (fp);
    30a2:	|        \-> move.l 292(sp),-(sp)
    30a6:	|            jsr 6bc <get2bytes>
    30ac:	|            addq.l #4,sp
    30ae:	|            move.l d0,17b00 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    30b4:	|            move.l 17b00 <numGlobals>,d0
    30ba:	|            lsl.l #3,d0
    30bc:	|            move.l d0,154(sp)
    30c0:	|            clr.l 150(sp)
    30c4:	|            move.l 17b28 <SysBase>,d0
    30ca:	|            movea.l d0,a6
    30cc:	|            move.l 154(sp),d0
    30d0:	|            move.l 150(sp),d1
    30d4:	|            jsr -684(a6)
    30d8:	|            move.l d0,146(sp)
    30dc:	|            move.l 146(sp),d0
    30e0:	|            move.l d0,17ada <globalVars>
	if(globalVars == 0) {
    30e6:	|            move.l 17ada <globalVars>,d0
    30ec:	|        /-- bne.s 3102 <initSludge+0x4f6>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    30ee:	|        |   pea 131aa <cursors.c.412ac4f3+0x2b5>
    30f4:	|        |   jsr 12048 <KPrintF>
    30fa:	|        |   addq.l #4,sp
		return FALSE;
    30fc:	|        |   clr.w d0
    30fe:	+--------|-- bra.w 3370 <initSludge+0x764>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    3102:	|        \-> clr.l 312(sp)
    3106:	|        /-- bra.s 311e <initSludge+0x512>
    3108:	|     /--|-> move.l 17ada <globalVars>,d1
    310e:	|     |  |   move.l 312(sp),d0
    3112:	|     |  |   lsl.l #3,d0
    3114:	|     |  |   movea.l d1,a0
    3116:	|     |  |   adda.l d0,a0
    3118:	|     |  |   clr.l (a0)
    311a:	|     |  |   addq.l #1,312(sp)
    311e:	|     |  \-> move.l 17b00 <numGlobals>,d0
    3124:	|     |      cmp.l 312(sp),d0
    3128:	|     \----- bgt.s 3108 <initSludge+0x4fc>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    312a:	|            move.l 17bf2 <gameSettings+0x4>,d0
    3130:	|            clr.l -(sp)
    3132:	|            move.l d0,-(sp)
    3134:	|            move.l 300(sp),-(sp)
    3138:	|            jsr 40cc <setFileIndices>
    313e:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    3142:	|            pea 1 <_start+0x1>
    3146:	|            jsr 3d86 <getNumberedString>
    314c:	|            addq.l #4,sp
    314e:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    3152:	|            move.l 142(sp),-(sp)
    3156:	|            jsr 2fe <encodeFilename>
    315c:	|            addq.l #4,sp
    315e:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    3162:	|            move.l 142(sp),134(sp)
    3168:	|            move.l 17b28 <SysBase>,d0
    316e:	|            movea.l d0,a6
    3170:	|            movea.l 134(sp),a1
    3174:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    3178:	|            move.l 138(sp),130(sp)
    317e:	|            move.l 17b30 <DOSBase>,d0
    3184:	|            movea.l d0,a6
    3186:	|            move.l 130(sp),d1
    318a:	|            jsr -120(a6)
    318e:	|            move.l d0,126(sp)
    3192:	|            move.l 126(sp),d0
    3196:	|            move.l d0,296(sp)
	if(lock == 0) {
    319a:	|        /-- bne.s 31c8 <initSludge+0x5bc>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    319c:	|        |   move.l 138(sp),122(sp)
    31a2:	|        |   moveq #-2,d1
    31a4:	|        |   move.l d1,118(sp)
    31a8:	|        |   move.l 17b30 <DOSBase>,d0
    31ae:	|        |   movea.l d0,a6
    31b0:	|        |   move.l 122(sp),d1
    31b4:	|        |   move.l 118(sp),d2
    31b8:	|        |   jsr -84(a6)
    31bc:	|        |   move.l d0,114(sp)
    31c0:	|        |   move.l 114(sp),d0
    31c4:	|        |   move.l d0,296(sp)
	}

	if (!CurrentDir(lock)) {
    31c8:	|        \-> move.l 296(sp),110(sp)
    31ce:	|            move.l 17b30 <DOSBase>,d0
    31d4:	|            movea.l d0,a6
    31d6:	|            move.l 110(sp),d1
    31da:	|            jsr -126(a6)
    31de:	|            move.l d0,106(sp)
    31e2:	|            move.l 106(sp),d0
    31e6:	|        /-- bne.s 3242 <initSludge+0x636>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    31e8:	|        |   move.l 138(sp),-(sp)
    31ec:	|        |   pea 131dd <cursors.c.412ac4f3+0x2e8>
    31f2:	|        |   jsr 12048 <KPrintF>
    31f8:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    31fa:	|        |   move.l 17b30 <DOSBase>,d0
    3200:	|        |   movea.l d0,a6
    3202:	|        |   jsr -60(a6)
    3206:	|        |   move.l d0,58(sp)
    320a:	|        |   move.l 58(sp),d0
    320e:	|        |   move.l d0,54(sp)
    3212:	|        |   move.l #78346,50(sp)
    321a:	|        |   moveq #40,d0
    321c:	|        |   move.l d0,46(sp)
    3220:	|        |   move.l 17b30 <DOSBase>,d0
    3226:	|        |   movea.l d0,a6
    3228:	|        |   move.l 54(sp),d1
    322c:	|        |   move.l 50(sp),d2
    3230:	|        |   move.l 46(sp),d3
    3234:	|        |   jsr -48(a6)
    3238:	|        |   move.l d0,42(sp)
		return FALSE;
    323c:	|        |   clr.w d0
    323e:	+--------|-- bra.w 3370 <initSludge+0x764>
	}

	FreeVec(gameName);
    3242:	|        \-> move.l 138(sp),102(sp)
    3248:	|            move.l 17b28 <SysBase>,d0
    324e:	|            movea.l d0,a6
    3250:	|            movea.l 102(sp),a1
    3254:	|            jsr -690(a6)

	readIniFile (filename);
    3258:	|            move.l 320(sp),-(sp)
    325c:	|            jsr f026 <readIniFile>
    3262:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    3264:	|            jsr edf8 <getLanguageForFileB>
    326a:	|            move.l d0,16008 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    3270:	|            move.l 16008 <languageNum>,d0
    3276:	|        /-- bpl.s 3286 <initSludge+0x67a>
    3278:	|        |   pea 13233 <thumbnail.c.7eb31449+0x21>
    327e:	|        |   jsr 12048 <KPrintF>
    3284:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    3286:	|        \-> move.l 16008 <languageNum>,d0
    328c:	|            move.l d0,d1
    328e:	|            move.l 17bf2 <gameSettings+0x4>,d0
    3294:	|            move.l d1,-(sp)
    3296:	|            move.l d0,-(sp)
    3298:	|            clr.l -(sp)
    329a:	|            jsr 40cc <setFileIndices>
    32a0:	|            lea 12(sp),sp

	if (dataFol[0]) {
    32a4:	|            movea.l 200(sp),a0
    32a8:	|            move.b (a0),d0
    32aa:	|     /----- beq.w 3354 <initSludge+0x748>
		char *dataFolder = encodeFilename(dataFol);
    32ae:	|     |      move.l 200(sp),-(sp)
    32b2:	|     |      jsr 2fe <encodeFilename>
    32b8:	|     |      addq.l #4,sp
    32ba:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    32be:	|     |      move.l 98(sp),94(sp)
    32c4:	|     |      move.l 17b30 <DOSBase>,d0
    32ca:	|     |      movea.l d0,a6
    32cc:	|     |      move.l 94(sp),d1
    32d0:	|     |      jsr -120(a6)
    32d4:	|     |      move.l d0,90(sp)
    32d8:	|     |      move.l 90(sp),d0
    32dc:	|     |      move.l d0,296(sp)
		if(lock == 0) {
    32e0:	|     |  /-- bne.s 330e <initSludge+0x702>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    32e2:	|     |  |   move.l 98(sp),86(sp)
    32e8:	|     |  |   moveq #-2,d1
    32ea:	|     |  |   move.l d1,82(sp)
    32ee:	|     |  |   move.l 17b30 <DOSBase>,d0
    32f4:	|     |  |   movea.l d0,a6
    32f6:	|     |  |   move.l 86(sp),d1
    32fa:	|     |  |   move.l 82(sp),d2
    32fe:	|     |  |   jsr -84(a6)
    3302:	|     |  |   move.l d0,78(sp)
    3306:	|     |  |   move.l 78(sp),d0
    330a:	|     |  |   move.l d0,296(sp)
		}


		if (!CurrentDir(lock)) {
    330e:	|     |  \-> move.l 296(sp),74(sp)
    3314:	|     |      move.l 17b30 <DOSBase>,d0
    331a:	|     |      movea.l d0,a6
    331c:	|     |      move.l 74(sp),d1
    3320:	|     |      jsr -126(a6)
    3324:	|     |      move.l d0,70(sp)
    3328:	|     |      move.l 70(sp),d0
    332c:	|     |  /-- bne.s 333e <initSludge+0x732>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    332e:	|     |  |   move.l 17b30 <DOSBase>,d0
    3334:	|     |  |   movea.l d0,a6
    3336:	|     |  |   jsr -60(a6)
    333a:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    333e:	|     |  \-> move.l 98(sp),62(sp)
    3344:	|     |      move.l 17b28 <SysBase>,d0
    334a:	|     |      movea.l d0,a6
    334c:	|     |      movea.l 62(sp),a1
    3350:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    3354:	|     \----> movea.l 17a2c <winHeight>,a0
    335a:	|            lea -15(a0),a0
    335e:	|            move.l a0,d0
    3360:	|            move.l d0,-(sp)
    3362:	|            pea a <_start+0xa>
    3366:	|            jsr 4826 <positionStatus>
    336c:	|            addq.l #8,sp

	return TRUE;
    336e:	|            moveq #1,d0
}
    3370:	\----------> movem.l (sp)+,d2-d4/a2/a6
    3374:	             lea 296(sp),sp
    3378:	             rts

0000337a <killSpeechTimers>:

void killSpeechTimers () {
    337a:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    337c:	          move.l 17ac4 <allRunningFunctions>,(sp)

	while (thisFunction) {
    3382:	   /----- bra.s 33ae <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    3384:	/--|----> movea.l (sp),a0
    3386:	|  |      move.b 56(a0),d0
    338a:	|  |  /-- bne.s 33a8 <killSpeechTimers+0x2e>
    338c:	|  |  |   movea.l (sp),a0
    338e:	|  |  |   move.w 50(a0),d0
    3392:	|  |  +-- beq.s 33a8 <killSpeechTimers+0x2e>
    3394:	|  |  |   movea.l (sp),a0
    3396:	|  |  |   move.l 12(a0),d0
    339a:	|  |  +-- beq.s 33a8 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    339c:	|  |  |   movea.l (sp),a0
    339e:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    33a2:	|  |  |   movea.l (sp),a0
    33a4:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    33a8:	|  |  \-> movea.l (sp),a0
    33aa:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    33ae:	|  \----> tst.l (sp)
    33b0:	\-------- bne.s 3384 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    33b2:	          jsr 4d64 <killAllSpeech>
}
    33b8:	          nop
    33ba:	          addq.l #4,sp
    33bc:	          rts

000033be <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    33be:	             lea -52(sp),sp
    33c2:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    33c4:	             movea.l 60(sp),a0
    33c8:	             move.l (a0),d0
    33ca:	             move.l d0,-(sp)
    33cc:	             jsr 400c <openSubSlice>
    33d2:	             addq.l #4,sp
    33d4:	             tst.w d0
    33d6:	         /-- bne.s 33de <loadFunctionCode+0x20>
    33d8:	         |   clr.w d0
    33da:	/--------|-- bra.w 359c <loadFunctionCode+0x1de>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    33de:	|        \-> move.l 17b10 <bigDataFile>,44(sp)
    33e6:	|            move.l 17b30 <DOSBase>,d0
    33ec:	|            movea.l d0,a6
    33ee:	|            move.l 44(sp),d1
    33f2:	|            jsr -306(a6)
    33f6:	|            move.l d0,40(sp)
    33fa:	|            move.l 40(sp),d0
    33fe:	|            move.l d0,d0
    3400:	|            movea.l 60(sp),a0
    3404:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    3408:	|            move.l 17b10 <bigDataFile>,d0
    340e:	|            move.l d0,-(sp)
    3410:	|            jsr 6bc <get2bytes>
    3416:	|            addq.l #4,sp
    3418:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    341c:	|            move.l 17b10 <bigDataFile>,d0
    3422:	|            move.l d0,-(sp)
    3424:	|            jsr 6bc <get2bytes>
    342a:	|            addq.l #4,sp
    342c:	|            movea.l 60(sp),a0
    3430:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    3434:	|            move.l 17b10 <bigDataFile>,d0
    343a:	|            move.l d0,-(sp)
    343c:	|            jsr 6bc <get2bytes>
    3442:	|            addq.l #4,sp
    3444:	|            movea.l 60(sp),a0
    3448:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    344c:	|            move.l 36(sp),d0
    3450:	|            lsl.l #3,d0
    3452:	|            move.l d0,32(sp)
    3456:	|            clr.l 28(sp)
    345a:	|            move.l 17b28 <SysBase>,d0
    3460:	|            movea.l d0,a6
    3462:	|            move.l 32(sp),d0
    3466:	|            move.l 28(sp),d1
    346a:	|            jsr -684(a6)
    346e:	|            move.l d0,24(sp)
    3472:	|            move.l 24(sp),d0
    3476:	|            movea.l 60(sp),a0
    347a:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    347e:	|            movea.l 60(sp),a0
    3482:	|            move.l 4(a0),d0
    3486:	|        /-- bne.s 349c <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    3488:	|        |   pea 1325e <thumbnail.c.7eb31449+0x4c>
    348e:	|        |   jsr 12048 <KPrintF>
    3494:	|        |   addq.l #4,sp
		return FALSE;
    3496:	|        |   clr.w d0
    3498:	+--------|-- bra.w 359c <loadFunctionCode+0x1de>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    349c:	|        \-> clr.l 52(sp)
    34a0:	|        /-- bra.s 3502 <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    34a2:	|     /--|-> move.l 17b10 <bigDataFile>,8(sp)
    34aa:	|     |  |   move.l 17b30 <DOSBase>,d0
    34b0:	|     |  |   movea.l d0,a6
    34b2:	|     |  |   move.l 8(sp),d1
    34b6:	|     |  |   jsr -306(a6)
    34ba:	|     |  |   move.l d0,4(sp)
    34be:	|     |  |   move.l 4(sp),d1
    34c2:	|     |  |   movea.l 60(sp),a0
    34c6:	|     |  |   movea.l 4(a0),a0
    34ca:	|     |  |   move.l 52(sp),d0
    34ce:	|     |  |   lsl.l #3,d0
    34d0:	|     |  |   adda.l d0,a0
    34d2:	|     |  |   move.l d1,d0
    34d4:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    34d6:	|     |  |   move.l 17b10 <bigDataFile>,d0
    34dc:	|     |  |   move.l d0,-(sp)
    34de:	|     |  |   jsr 6bc <get2bytes>
    34e4:	|     |  |   addq.l #4,sp
    34e6:	|     |  |   move.l d0,d1
    34e8:	|     |  |   movea.l 60(sp),a0
    34ec:	|     |  |   movea.l 4(a0),a0
    34f0:	|     |  |   move.l 52(sp),d0
    34f4:	|     |  |   lsl.l #3,d0
    34f6:	|     |  |   adda.l d0,a0
    34f8:	|     |  |   move.l d1,d0
    34fa:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    34fe:	|     |  |   addq.l #1,52(sp)
    3502:	|     |  \-> move.l 52(sp),d0
    3506:	|     |      cmp.l 36(sp),d0
    350a:	|     \----- bcs.s 34a2 <loadFunctionCode+0xe4>
	}

	finishAccess ();
    350c:	|            jsr 3d7c <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    3512:	|            movea.l 60(sp),a0
    3516:	|            move.l 8(a0),d0
    351a:	|  /-------- ble.s 359a <loadFunctionCode+0x1dc>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    351c:	|  |         movea.l 60(sp),a0
    3520:	|  |         move.l 8(a0),d0
    3524:	|  |         lsl.l #3,d0
    3526:	|  |         move.l d0,20(sp)
    352a:	|  |         clr.l 16(sp)
    352e:	|  |         move.l 17b28 <SysBase>,d0
    3534:	|  |         movea.l d0,a6
    3536:	|  |         move.l 20(sp),d0
    353a:	|  |         move.l 16(sp),d1
    353e:	|  |         jsr -684(a6)
    3542:	|  |         move.l d0,12(sp)
    3546:	|  |         move.l 12(sp),d0
    354a:	|  |         movea.l 60(sp),a0
    354e:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    3552:	|  |         movea.l 60(sp),a0
    3556:	|  |         move.l 20(a0),d0
    355a:	|  |     /-- bne.s 356e <loadFunctionCode+0x1b0>
			KPrintF("loadFunctionCode: cannot allocate memory");
    355c:	|  |     |   pea 1325e <thumbnail.c.7eb31449+0x4c>
    3562:	|  |     |   jsr 12048 <KPrintF>
    3568:	|  |     |   addq.l #4,sp
			return FALSE;
    356a:	|  |     |   clr.w d0
    356c:	+--|-----|-- bra.s 359c <loadFunctionCode+0x1de>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    356e:	|  |     \-> clr.l 48(sp)
    3572:	|  |     /-- bra.s 358c <loadFunctionCode+0x1ce>
			initVarNew (newFunc -> localVars[a]);
    3574:	|  |  /--|-> movea.l 60(sp),a0
    3578:	|  |  |  |   move.l 20(a0),d1
    357c:	|  |  |  |   move.l 48(sp),d0
    3580:	|  |  |  |   lsl.l #3,d0
    3582:	|  |  |  |   movea.l d1,a0
    3584:	|  |  |  |   adda.l d0,a0
    3586:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    3588:	|  |  |  |   addq.l #1,48(sp)
    358c:	|  |  |  \-> movea.l 60(sp),a0
    3590:	|  |  |      move.l 8(a0),d0
    3594:	|  |  |      cmp.l 48(sp),d0
    3598:	|  |  \----- bgt.s 3574 <loadFunctionCode+0x1b6>
		}
	}
	return TRUE;
    359a:	|  \-------> moveq #1,d0
}
    359c:	\----------> movea.l (sp)+,a6
    359e:	             lea 52(sp),sp
    35a2:	             rts

000035a4 <loadHandlers>:

void loadHandlers (BPTR fp) {
    35a4:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    35a6:	movea.l 16004 <currentEvents>,a2
    35ac:	move.l 8(sp),-(sp)
    35b0:	jsr 6bc <get2bytes>
    35b6:	addq.l #4,sp
    35b8:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    35ba:	movea.l 16004 <currentEvents>,a2
    35c0:	move.l 8(sp),-(sp)
    35c4:	jsr 6bc <get2bytes>
    35ca:	addq.l #4,sp
    35cc:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    35d0:	movea.l 16004 <currentEvents>,a2
    35d6:	move.l 8(sp),-(sp)
    35da:	jsr 6bc <get2bytes>
    35e0:	addq.l #4,sp
    35e2:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    35e6:	movea.l 16004 <currentEvents>,a2
    35ec:	move.l 8(sp),-(sp)
    35f0:	jsr 6bc <get2bytes>
    35f6:	addq.l #4,sp
    35f8:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    35fc:	movea.l 16004 <currentEvents>,a2
    3602:	move.l 8(sp),-(sp)
    3606:	jsr 6bc <get2bytes>
    360c:	addq.l #4,sp
    360e:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    3612:	movea.l 16004 <currentEvents>,a2
    3618:	move.l 8(sp),-(sp)
    361c:	jsr 6bc <get2bytes>
    3622:	addq.l #4,sp
    3624:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    3628:	movea.l 16004 <currentEvents>,a2
    362e:	move.l 8(sp),-(sp)
    3632:	jsr 6bc <get2bytes>
    3638:	addq.l #4,sp
    363a:	move.l d0,24(a2)
}
    363e:	nop
    3640:	movea.l (sp)+,a2
    3642:	rts

00003644 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    3644:	       lea -312(sp),sp
    3648:	       movem.l d2-d3/a6,-(sp)
    364c:	       move.l 332(sp),d1
    3650:	       move.l 336(sp),d0
    3654:	       move.b d1,d1
    3656:	       move.b d1,16(sp)
    365a:	       move.b d0,d0
    365c:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    3660:	       move.l 328(sp),318(sp)
    3666:	       move.l #1005,314(sp)
    366e:	       move.l 17b30 <DOSBase>,d0
    3674:	       movea.l d0,a6
    3676:	       move.l 318(sp),d1
    367a:	       move.l 314(sp),d2
    367e:	       jsr -30(a6)
    3682:	       move.l d0,310(sp)
    3686:	       move.l 310(sp),d0
    368a:	       move.l d0,306(sp)

	if (! fp) {
    368e:	   /-- bne.s 36ea <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    3690:	   |   move.l 17b30 <DOSBase>,d0
    3696:	   |   movea.l d0,a6
    3698:	   |   jsr -60(a6)
    369c:	   |   move.l d0,154(sp)
    36a0:	   |   move.l 154(sp),d0
    36a4:	   |   move.l d0,150(sp)
    36a8:	   |   move.l #78471,146(sp)
    36b0:	   |   moveq #31,d0
    36b2:	   |   move.l d0,142(sp)
    36b6:	   |   move.l 17b30 <DOSBase>,d0
    36bc:	   |   movea.l d0,a6
    36be:	   |   move.l 150(sp),d1
    36c2:	   |   move.l 146(sp),d2
    36c6:	   |   move.l 142(sp),d3
    36ca:	   |   jsr -48(a6)
    36ce:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    36d2:	   |   move.l 328(sp),-(sp)
    36d6:	   |   pea 132a7 <thumbnail.c.7eb31449+0x95>
    36dc:	   |   jsr 12048 <KPrintF>
    36e2:	   |   addq.l #8,sp
		return NULL;
    36e4:	   |   moveq #0,d0
    36e6:	/--|-- bra.w 39aa <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    36ea:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    36ee:	|      move.l 306(sp),302(sp)
    36f4:	|      move.l 17b30 <DOSBase>,d0
    36fa:	|      movea.l d0,a6
    36fc:	|      move.l 302(sp),d1
    3700:	|      jsr -306(a6)
    3704:	|      move.l d0,298(sp)
    3708:	|      move.l 298(sp),d0
    370c:	|      moveq #83,d1
    370e:	|      cmp.l d0,d1
    3710:	|  /-- beq.s 3718 <openAndVerify+0xd4>
    3712:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    3718:	|  \-> move.l 306(sp),294(sp)
    371e:	|      move.l 17b30 <DOSBase>,d0
    3724:	|      movea.l d0,a6
    3726:	|      move.l 294(sp),d1
    372a:	|      jsr -306(a6)
    372e:	|      move.l d0,290(sp)
    3732:	|      move.l 290(sp),d0
    3736:	|      moveq #76,d1
    3738:	|      cmp.l d0,d1
    373a:	|  /-- beq.s 3742 <openAndVerify+0xfe>
    373c:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    3742:	|  \-> move.l 306(sp),286(sp)
    3748:	|      move.l 17b30 <DOSBase>,d0
    374e:	|      movea.l d0,a6
    3750:	|      move.l 286(sp),d1
    3754:	|      jsr -306(a6)
    3758:	|      move.l d0,282(sp)
    375c:	|      move.l 282(sp),d0
    3760:	|      moveq #85,d1
    3762:	|      cmp.l d0,d1
    3764:	|  /-- beq.s 376c <openAndVerify+0x128>
    3766:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    376c:	|  \-> move.l 306(sp),278(sp)
    3772:	|      move.l 17b30 <DOSBase>,d0
    3778:	|      movea.l d0,a6
    377a:	|      move.l 278(sp),d1
    377e:	|      jsr -306(a6)
    3782:	|      move.l d0,274(sp)
    3786:	|      move.l 274(sp),d0
    378a:	|      moveq #68,d1
    378c:	|      cmp.l d0,d1
    378e:	|  /-- beq.s 3796 <openAndVerify+0x152>
    3790:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    3796:	|  \-> move.l 306(sp),270(sp)
    379c:	|      move.l 17b30 <DOSBase>,d0
    37a2:	|      movea.l d0,a6
    37a4:	|      move.l 270(sp),d1
    37a8:	|      jsr -306(a6)
    37ac:	|      move.l d0,266(sp)
    37b0:	|      move.l 266(sp),d1
    37b4:	|      move.b 16(sp),d0
    37b8:	|      ext.w d0
    37ba:	|      movea.w d0,a0
    37bc:	|      cmpa.l d1,a0
    37be:	|  /-- beq.s 37c6 <openAndVerify+0x182>
    37c0:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    37c6:	|  \-> move.l 306(sp),262(sp)
    37cc:	|      move.l 17b30 <DOSBase>,d0
    37d2:	|      movea.l d0,a6
    37d4:	|      move.l 262(sp),d1
    37d8:	|      jsr -306(a6)
    37dc:	|      move.l d0,258(sp)
    37e0:	|      move.l 258(sp),d1
    37e4:	|      move.b 14(sp),d0
    37e8:	|      ext.w d0
    37ea:	|      movea.w d0,a0
    37ec:	|      cmpa.l d1,a0
    37ee:	|  /-- beq.s 37f6 <openAndVerify+0x1b2>
    37f0:	|  |   move.w #1,322(sp)
	if (headerBad) {
    37f6:	|  \-> tst.w 322(sp)
    37fa:	|  /-- beq.s 3852 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    37fc:	|  |   move.l 17b30 <DOSBase>,d0
    3802:	|  |   movea.l d0,a6
    3804:	|  |   jsr -60(a6)
    3808:	|  |   move.l d0,174(sp)
    380c:	|  |   move.l 174(sp),d0
    3810:	|  |   move.l d0,170(sp)
    3814:	|  |   move.l #78534,166(sp)
    381c:	|  |   moveq #31,d0
    381e:	|  |   move.l d0,162(sp)
    3822:	|  |   move.l 17b30 <DOSBase>,d0
    3828:	|  |   movea.l d0,a6
    382a:	|  |   move.l 170(sp),d1
    382e:	|  |   move.l 166(sp),d2
    3832:	|  |   move.l 162(sp),d3
    3836:	|  |   jsr -48(a6)
    383a:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    383e:	|  |   pea 132c6 <thumbnail.c.7eb31449+0xb4>
    3844:	|  |   jsr 12048 <KPrintF>
    384a:	|  |   addq.l #4,sp
		return NULL;
    384c:	|  |   moveq #0,d0
    384e:	+--|-- bra.w 39aa <openAndVerify+0x366>
	}
	FGetC (fp);
    3852:	|  \-> move.l 306(sp),254(sp)
    3858:	|      move.l 17b30 <DOSBase>,d0
    385e:	|      movea.l d0,a6
    3860:	|      move.l 254(sp),d1
    3864:	|      jsr -306(a6)
    3868:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    386c:	|      nop
    386e:	|  /-> move.l 306(sp),246(sp)
    3874:	|  |   move.l 17b30 <DOSBase>,d0
    387a:	|  |   movea.l d0,a6
    387c:	|  |   move.l 246(sp),d1
    3880:	|  |   jsr -306(a6)
    3884:	|  |   move.l d0,242(sp)
    3888:	|  |   move.l 242(sp),d0
    388c:	|  \-- bne.s 386e <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    388e:	|      move.l 306(sp),238(sp)
    3894:	|      move.l 17b30 <DOSBase>,d0
    389a:	|      movea.l d0,a6
    389c:	|      move.l 238(sp),d1
    38a0:	|      jsr -306(a6)
    38a4:	|      move.l d0,234(sp)
    38a8:	|      move.l 234(sp),d0
    38ac:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    38b0:	|      move.l 306(sp),226(sp)
    38b6:	|      move.l 17b30 <DOSBase>,d0
    38bc:	|      movea.l d0,a6
    38be:	|      move.l 226(sp),d1
    38c2:	|      jsr -306(a6)
    38c6:	|      move.l d0,222(sp)
    38ca:	|      move.l 222(sp),d0
    38ce:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    38d2:	|      move.l 230(sp),d0
    38d6:	|      lsl.l #8,d0
    38d8:	|      add.l 218(sp),d0
    38dc:	|      movea.l 344(sp),a0
    38e0:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    38e2:	|      movea.l 344(sp),a0
    38e6:	|      move.l (a0),d0
    38e8:	|      cmpi.l #514,d0
    38ee:	|  /-- ble.s 3944 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    38f0:	|  |   move.l 17b30 <DOSBase>,d0
    38f6:	|  |   movea.l d0,a6
    38f8:	|  |   jsr -60(a6)
    38fc:	|  |   move.l d0,194(sp)
    3900:	|  |   move.l 194(sp),d0
    3904:	|  |   move.l d0,190(sp)
    3908:	|  |   move.l #78561,186(sp)
    3910:	|  |   moveq #100,d1
    3912:	|  |   move.l d1,182(sp)
    3916:	|  |   move.l 17b30 <DOSBase>,d0
    391c:	|  |   movea.l d0,a6
    391e:	|  |   move.l 190(sp),d1
    3922:	|  |   move.l 186(sp),d2
    3926:	|  |   move.l 182(sp),d3
    392a:	|  |   jsr -48(a6)
    392e:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    3932:	|  |   pea 132e1 <thumbnail.c.7eb31449+0xcf>
    3938:	|  |   jsr 12048 <KPrintF>
    393e:	|  |   addq.l #4,sp
		return NULL;
    3940:	|  |   moveq #0,d0
    3942:	+--|-- bra.s 39aa <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    3944:	|  \-> movea.l 344(sp),a0
    3948:	|      move.l (a0),d0
    394a:	|      cmpi.l #257,d0
    3950:	|  /-- bgt.s 39a6 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    3952:	|  |   move.l 17b30 <DOSBase>,d0
    3958:	|  |   movea.l d0,a6
    395a:	|  |   jsr -60(a6)
    395e:	|  |   move.l d0,214(sp)
    3962:	|  |   move.l 214(sp),d0
    3966:	|  |   move.l d0,210(sp)
    396a:	|  |   move.l #78630,206(sp)
    3972:	|  |   moveq #100,d0
    3974:	|  |   move.l d0,202(sp)
    3978:	|  |   move.l 17b30 <DOSBase>,d0
    397e:	|  |   movea.l d0,a6
    3980:	|  |   move.l 210(sp),d1
    3984:	|  |   move.l 206(sp),d2
    3988:	|  |   move.l 202(sp),d3
    398c:	|  |   jsr -48(a6)
    3990:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    3994:	|  |   pea 13326 <thumbnail.c.7eb31449+0x114>
    399a:	|  |   jsr 12048 <KPrintF>
    39a0:	|  |   addq.l #4,sp
		return NULL;
    39a2:	|  |   moveq #0,d0
    39a4:	+--|-- bra.s 39aa <openAndVerify+0x366>
	}
	return fp;
    39a6:	|  \-> move.l 306(sp),d0
}
    39aa:	\----> movem.l (sp)+,d2-d3/a6
    39ae:	       lea 312(sp),sp
    39b2:	       rts

000039b4 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    39b4:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    39b6:	          move.l #96964,(sp)
	while (* huntAndDestroy) {
    39bc:	   /----- bra.s 39e8 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    39be:	/--|----> movea.l (sp),a0
    39c0:	|  |      move.l (a0),d0
    39c2:	|  |      cmp.l 8(sp),d0
    39c6:	|  |  /-- bne.s 39de <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    39c8:	|  |  |   movea.l (sp),a0
    39ca:	|  |  |   movea.l (a0),a0
    39cc:	|  |  |   move.l 44(a0),d0
    39d0:	|  |  |   movea.l (sp),a0
    39d2:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    39d4:	|  |  |   movea.l 8(sp),a0
    39d8:	|  |  |   clr.l 44(a0)
    39dc:	|  +--|-- bra.s 39e8 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    39de:	|  |  \-> movea.l (sp),a0
    39e0:	|  |      move.l (a0),d0
    39e2:	|  |      moveq #44,d1
    39e4:	|  |      add.l d0,d1
    39e6:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    39e8:	|  \----> movea.l (sp),a0
    39ea:	|         move.l (a0),d0
    39ec:	\-------- bne.s 39be <pauseFunction+0xa>
		}
	}
}
    39ee:	          nop
    39f0:	          nop
    39f2:	          addq.l #4,sp
    39f4:	          rts

000039f6 <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    39f6:	move.l 17ac4 <allRunningFunctions>,d0
    39fc:	movea.l 4(sp),a0
    3a00:	move.l d0,44(a0)
	allRunningFunctions = fun;
    3a04:	move.l 4(sp),17ac4 <allRunningFunctions>
}
    3a0c:	nop
    3a0e:	rts

00003a10 <runSludge>:

BOOL runSludge () {
    3a10:	                   lea -12(sp),sp
    3a14:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    3a16:	                   move.l 17ac4 <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    3a1e:	      /----------- bra.s 3a9a <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    3a20:	   /--|----------> movea.l 12(sp),a0
    3a24:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    3a2a:	   |  |            movea.l 12(sp),a0
    3a2e:	   |  |            move.b 56(a0),d0
    3a32:	   |  |  /-------- bne.s 3a94 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    3a34:	   |  |  |         movea.l 12(sp),a0
    3a38:	   |  |  |         move.l 12(a0),d0
    3a3c:	   |  |  |  /----- beq.s 3a66 <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    3a3e:	   |  |  |  |      movea.l 12(sp),a0
    3a42:	   |  |  |  |      move.l 12(a0),d0
    3a46:	   |  |  |  |  /-- bpl.s 3a52 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    3a48:	   |  |  |  |  |   movea.l 12(sp),a0
    3a4c:	   |  |  |  |  |   clr.l 12(a0)
    3a50:	   |  |  +--|--|-- bra.s 3a94 <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    3a52:	   |  |  |  |  \-> movea.l 12(sp),a0
    3a56:	   |  |  |  |      move.l 12(a0),d0
    3a5a:	   |  |  |  |      subq.l #1,d0
    3a5c:	   |  |  |  |      movea.l 12(sp),a0
    3a60:	   |  |  |  |      move.l d0,12(a0)
    3a64:	   |  |  +--|----- bra.s 3a94 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    3a66:	   |  |  |  \----> movea.l 12(sp),a0
    3a6a:	   |  |  |         move.w 50(a0),d0
    3a6e:	   |  |  |     /-- beq.s 3a7e <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    3a70:	   |  |  |     |   movea.l 12(sp),a0
    3a74:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    3a78:	   |  |  |     |   jsr 4d64 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    3a7e:	   |  |  |     \-> move.l 12(sp),-(sp)
    3a82:	   |  |  |         jsr 1c5e <continueFunction>
    3a88:	   |  |  |         addq.l #4,sp
    3a8a:	   |  |  |         tst.w d0
    3a8c:	   |  |  +-------- bne.s 3a94 <runSludge+0x84>
					return FALSE;
    3a8e:	   |  |  |         clr.w d0
    3a90:	/--|--|--|-------- bra.w 3b20 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    3a94:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    3a9a:	|  |  \----------> tst.l 12(sp)
    3a9e:	|  \-------------- bne.s 3a20 <runSludge+0x10>
	}

	if (loadNow) {
    3aa0:	|                  move.l 17af4 <loadNow>,d0
    3aa6:	|        /-------- beq.s 3b1e <runSludge+0x10e>
		if (loadNow[0] == ':') {
    3aa8:	|        |         movea.l 17af4 <loadNow>,a0
    3aae:	|        |         move.b (a0),d0
    3ab0:	|        |         cmpi.b #58,d0
    3ab4:	|        |  /----- bne.s 3ae8 <runSludge+0xd8>
			saveGame (loadNow + 1);
    3ab6:	|        |  |      move.l 17af4 <loadNow>,d0
    3abc:	|        |  |      addq.l #1,d0
    3abe:	|        |  |      move.l d0,-(sp)
    3ac0:	|        |  |      jsr 83ac <saveGame>
    3ac6:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    3ac8:	|        |  |      movea.l 17bdc <saverFunc>,a0
    3ace:	|        |  |      lea 28(a0),a0
    3ad2:	|        |  |      pea 1 <_start+0x1>
    3ad6:	|        |  |      pea 1 <_start+0x1>
    3ada:	|        |  |      move.l a0,-(sp)
    3adc:	|        |  |      jsr 108e6 <setVariable>
    3ae2:	|        |  |      lea 12(sp),sp
    3ae6:	|        |  |  /-- bra.s 3b00 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    3ae8:	|        |  \--|-> move.l 17af4 <loadNow>,d0
    3aee:	|        |     |   move.l d0,-(sp)
    3af0:	|        |     |   jsr 7ef4 <loadGame>
    3af6:	|        |     |   addq.l #4,sp
    3af8:	|        |     |   tst.w d0
    3afa:	|        |     +-- bne.s 3b00 <runSludge+0xf0>
    3afc:	|        |     |   clr.w d0
    3afe:	+--------|-----|-- bra.s 3b20 <runSludge+0x110>
		}
		FreeVec(loadNow);
    3b00:	|        |     \-> move.l 17af4 <loadNow>,8(sp)
    3b08:	|        |         move.l 17b28 <SysBase>,d0
    3b0e:	|        |         movea.l d0,a6
    3b10:	|        |         movea.l 8(sp),a1
    3b14:	|        |         jsr -690(a6)
		loadNow = NULL;
    3b18:	|        |         clr.l 17af4 <loadNow>
	}

	return TRUE;
    3b1e:	|        \-------> moveq #1,d0
}
    3b20:	\----------------> movea.l (sp)+,a6
    3b22:	                   lea 12(sp),sp
    3b26:	                   rts

00003b28 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    3b28:	movea.l 16004 <currentEvents>,a0
    3b2e:	move.l (a0),d0
    3b30:	move.l 4(sp),-(sp)
    3b34:	move.l d0,-(sp)
    3b36:	jsr 8d0 <put2bytes>
    3b3c:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    3b3e:	movea.l 16004 <currentEvents>,a0
    3b44:	move.l 4(a0),d0
    3b48:	move.l 4(sp),-(sp)
    3b4c:	move.l d0,-(sp)
    3b4e:	jsr 8d0 <put2bytes>
    3b54:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    3b56:	movea.l 16004 <currentEvents>,a0
    3b5c:	move.l 8(a0),d0
    3b60:	move.l 4(sp),-(sp)
    3b64:	move.l d0,-(sp)
    3b66:	jsr 8d0 <put2bytes>
    3b6c:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    3b6e:	movea.l 16004 <currentEvents>,a0
    3b74:	move.l 12(a0),d0
    3b78:	move.l 4(sp),-(sp)
    3b7c:	move.l d0,-(sp)
    3b7e:	jsr 8d0 <put2bytes>
    3b84:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    3b86:	movea.l 16004 <currentEvents>,a0
    3b8c:	move.l 16(a0),d0
    3b90:	move.l 4(sp),-(sp)
    3b94:	move.l d0,-(sp)
    3b96:	jsr 8d0 <put2bytes>
    3b9c:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    3b9e:	movea.l 16004 <currentEvents>,a0
    3ba4:	move.l 20(a0),d0
    3ba8:	move.l 4(sp),-(sp)
    3bac:	move.l d0,-(sp)
    3bae:	jsr 8d0 <put2bytes>
    3bb4:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    3bb6:	movea.l 16004 <currentEvents>,a0
    3bbc:	move.l 24(a0),d0
    3bc0:	move.l 4(sp),-(sp)
    3bc4:	move.l d0,-(sp)
    3bc6:	jsr 8d0 <put2bytes>
    3bcc:	addq.l #8,sp
}
    3bce:	nop
    3bd0:	rts

00003bd2 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    3bd2:	      /-- bra.s 3bf2 <stackSetByIndex+0x20>
		vS = vS->next;
    3bd4:	/-----|-> movea.l 4(sp),a0
    3bd8:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    3bde:	|     +-- bne.s 3bf2 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    3be0:	|     |   pea 1336d <line.c.05397aaf+0x27>
    3be6:	|     |   jsr 12048 <KPrintF>
    3bec:	|     |   addq.l #4,sp
			return FALSE;
    3bee:	|     |   clr.w d0
    3bf0:	|  /--|-- bra.s 3c14 <stackSetByIndex+0x42>
	while (theIndex--) {
    3bf2:	|  |  \-> move.l 8(sp),d0
    3bf6:	|  |      move.l d0,d1
    3bf8:	|  |      subq.l #1,d1
    3bfa:	|  |      move.l d1,8(sp)
    3bfe:	|  |      tst.l d0
    3c00:	\--|----- bne.s 3bd4 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    3c02:	   |      move.l 4(sp),d0
    3c06:	   |      move.l d0,-(sp)
    3c08:	   |      move.l 16(sp),-(sp)
    3c0c:	   |      jsr 104ae <copyVariable>
    3c12:	   |      addq.l #8,sp
}
    3c14:	   \----> rts

00003c16 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack * vStack, BOOL returnSommet) {
    3c16:	             lea -20(sp),sp
    3c1a:	             move.l a6,-(sp)
    3c1c:	             move.l 44(sp),d0
    3c20:	             move.w d0,d0
    3c22:	             move.w d0,6(sp)
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    3c26:	             moveq #58,d0
    3c28:	             move.l d0,20(sp)
    3c2c:	             clr.l 16(sp)
    3c30:	             move.l 17b28 <SysBase>,d0
    3c36:	             movea.l d0,a6
    3c38:	             move.l 20(sp),d0
    3c3c:	             move.l 16(sp),d1
    3c40:	             jsr -684(a6)
    3c44:	             move.l d0,12(sp)
    3c48:	             move.l 12(sp),d0
    3c4c:	             move.l d0,8(sp)
	if(!newFunc) {
    3c50:	         /-- bne.s 3c66 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    3c52:	         |   pea 13386 <line.c.05397aaf+0x40>
    3c58:	         |   jsr 12048 <KPrintF>
    3c5e:	         |   addq.l #4,sp
		return 0;
    3c60:	         |   moveq #0,d0
    3c62:	/--------|-- bra.w 3d74 <startNewFunctionNum+0x15e>
	}
	newFunc -> originalNumber = funcNum;
    3c66:	|        \-> move.l 28(sp),d0
    3c6a:	|            movea.l 8(sp),a0
    3c6e:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    3c70:	|            move.l 8(sp),-(sp)
    3c74:	|            jsr 33be <loadFunctionCode>
    3c7a:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    3c7c:	|            movea.l 8(sp),a0
    3c80:	|            move.l 16(a0),d1
    3c84:	|            move.l 32(sp),d0
    3c88:	|            cmp.l d1,d0
    3c8a:	|        /-- beq.s 3ca0 <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    3c8c:	|        |   pea 133af <line.c.05397aaf+0x69>
    3c92:	|        |   jsr 12048 <KPrintF>
    3c98:	|        |   addq.l #4,sp
		return NULL; 
    3c9a:	|        |   moveq #0,d0
    3c9c:	+--------|-- bra.w 3d74 <startNewFunctionNum+0x15e>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    3ca0:	|        \-> movea.l 8(sp),a0
    3ca4:	|            move.l 16(a0),d1
    3ca8:	|            movea.l 8(sp),a0
    3cac:	|            move.l 8(a0),d0
    3cb0:	|            cmp.l d1,d0
    3cb2:	|  /-------- bge.s 3d14 <startNewFunctionNum+0xfe>
		KPrintF ("More arguments than local variable space!");
    3cb4:	|  |         pea 133cb <line.c.05397aaf+0x85>
    3cba:	|  |         jsr 12048 <KPrintF>
    3cc0:	|  |         addq.l #4,sp
		return NULL; 
    3cc2:	|  |         moveq #0,d0
    3cc4:	+--|-------- bra.w 3d74 <startNewFunctionNum+0x15e>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		numParamsExpected --;
    3cc8:	|  |  /----> subq.l #1,32(sp)
		if (vStack == NULL) {
    3ccc:	|  |  |      move.l 40(sp),d0
    3cd0:	|  |  |  /-- bne.s 3ce6 <startNewFunctionNum+0xd0>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    3cd2:	|  |  |  |   pea 133f5 <line.c.05397aaf+0xaf>
    3cd8:	|  |  |  |   jsr 12048 <KPrintF>
    3cde:	|  |  |  |   addq.l #4,sp
			return NULL;
    3ce0:	|  |  |  |   moveq #0,d0
    3ce2:	+--|--|--|-- bra.w 3d74 <startNewFunctionNum+0x15e>
		}
		copyVariable (&vStack -> thisVar, &newFunc->localVars[numParamsExpected]);
    3ce6:	|  |  |  \-> movea.l 8(sp),a0
    3cea:	|  |  |      move.l 20(a0),d1
    3cee:	|  |  |      move.l 32(sp),d0
    3cf2:	|  |  |      lsl.l #3,d0
    3cf4:	|  |  |      add.l d0,d1
    3cf6:	|  |  |      move.l 40(sp),d0
    3cfa:	|  |  |      move.l d1,-(sp)
    3cfc:	|  |  |      move.l d0,-(sp)
    3cfe:	|  |  |      jsr 104ae <copyVariable>
    3d04:	|  |  |      addq.l #8,sp
		trimStack ( &vStack);
    3d06:	|  |  |      lea 40(sp),a0
    3d0a:	|  |  |      move.l a0,-(sp)
    3d0c:	|  |  |      jsr 10978 <trimStack>
    3d12:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    3d14:	|  \--|----> tst.l 32(sp)
    3d18:	|     \----- bne.s 3cc8 <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    3d1a:	|            movea.l 8(sp),a0
    3d1e:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    3d22:	|            movea.l 8(sp),a0
    3d26:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    3d2a:	|            movea.l 8(sp),a0
    3d2e:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    3d34:	|            movea.l 8(sp),a0
    3d38:	|            move.l 36(sp),40(a0)
	newFunc -> stack = NULL;
    3d3e:	|            movea.l 8(sp),a0
    3d42:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    3d46:	|            movea.l 8(sp),a0
    3d4a:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    3d4e:	|            movea.l 8(sp),a0
    3d52:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    3d56:	|            movea.l 8(sp),a0
    3d5a:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    3d5e:	|            movea.l 8(sp),a0
    3d62:	|            clr.l 28(a0)

	restartFunction (newFunc);
    3d66:	|            move.l 8(sp),-(sp)
    3d6a:	|            jsr 39f6 <restartFunction>
    3d70:	|            addq.l #4,sp
	return 1;
    3d72:	|            moveq #1,d0
}
    3d74:	\----------> movea.l (sp)+,a6
    3d76:	             lea 20(sp),sp
    3d7a:	             rts

00003d7c <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    3d7c:	clr.w 16010 <sliceBusy>
}
    3d82:	nop
    3d84:	rts

00003d86 <getNumberedString>:

char * getNumberedString (int value) {
    3d86:	       lea -56(sp),sp
    3d8a:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    3d8e:	       move.w 16010 <sliceBusy>,d0
    3d94:	   /-- beq.s 3dde <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    3d96:	   |   move.l 17b30 <DOSBase>,d0
    3d9c:	   |   movea.l d0,a6
    3d9e:	   |   jsr -60(a6)
    3da2:	   |   move.l d0,28(sp)
    3da6:	   |   move.l 28(sp),d0
    3daa:	   |   move.l d0,24(sp)
    3dae:	   |   move.l #78912,20(sp)
    3db6:	   |   moveq #76,d0
    3db8:	   |   move.l d0,16(sp)
    3dbc:	   |   move.l 17b30 <DOSBase>,d0
    3dc2:	   |   movea.l d0,a6
    3dc4:	   |   move.l 24(sp),d1
    3dc8:	   |   move.l 20(sp),d2
    3dcc:	   |   move.l 16(sp),d3
    3dd0:	   |   jsr -48(a6)
    3dd4:	   |   move.l d0,12(sp)
		return NULL;
    3dd8:	   |   moveq #0,d0
    3dda:	/--|-- bra.w 3e7a <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    3dde:	|  \-> move.l 17b10 <bigDataFile>,64(sp)
    3de6:	|      move.l 72(sp),d0
    3dea:	|      add.l d0,d0
    3dec:	|      add.l d0,d0
    3dee:	|      move.l d0,d1
    3df0:	|      move.l 17b1c <startOfTextIndex>,d0
    3df6:	|      add.l d1,d0
    3df8:	|      move.l d0,60(sp)
    3dfc:	|      moveq #-1,d0
    3dfe:	|      move.l d0,56(sp)
    3e02:	|      move.l 17b30 <DOSBase>,d0
    3e08:	|      movea.l d0,a6
    3e0a:	|      move.l 64(sp),d1
    3e0e:	|      move.l 60(sp),d2
    3e12:	|      move.l 56(sp),d3
    3e16:	|      jsr -66(a6)
    3e1a:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    3e1e:	|      move.l 17b10 <bigDataFile>,d0
    3e24:	|      move.l d0,-(sp)
    3e26:	|      jsr 718 <get4bytes>
    3e2c:	|      addq.l #4,sp
    3e2e:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    3e32:	|      move.l 17b10 <bigDataFile>,48(sp)
    3e3a:	|      move.l 72(sp),44(sp)
    3e40:	|      moveq #-1,d0
    3e42:	|      move.l d0,40(sp)
    3e46:	|      move.l 17b30 <DOSBase>,d0
    3e4c:	|      movea.l d0,a6
    3e4e:	|      move.l 48(sp),d1
    3e52:	|      move.l 44(sp),d2
    3e56:	|      move.l 40(sp),d3
    3e5a:	|      jsr -66(a6)
    3e5e:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    3e62:	|      move.l 17b10 <bigDataFile>,d0
    3e68:	|      move.l d0,-(sp)
    3e6a:	|      jsr b02 <readString>
    3e70:	|      addq.l #4,sp
    3e72:	|      move.l d0,32(sp)
	
	return s;
    3e76:	|      move.l 32(sp),d0
}
    3e7a:	\----> movem.l (sp)+,d2-d3/a6
    3e7e:	       lea 56(sp),sp
    3e82:	       rts

00003e84 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    3e84:	       lea -32(sp),sp
    3e88:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    3e8c:	       move.w 16010 <sliceBusy>,d0
    3e92:	   /-- beq.s 3eae <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    3e94:	   |   pea 1348d <line.c.05397aaf+0x147>
    3e9a:	   |   pea 134ab <line.c.05397aaf+0x165>
    3ea0:	   |   jsr 12048 <KPrintF>
    3ea6:	   |   addq.l #8,sp
		return 0;
    3ea8:	   |   moveq #0,d0
    3eaa:	/--|-- bra.w 3f42 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), 0);	
    3eae:	|  \-> move.l 17b10 <bigDataFile>,40(sp)
    3eb6:	|      move.l 48(sp),d0
    3eba:	|      add.l d0,d0
    3ebc:	|      add.l d0,d0
    3ebe:	|      move.l d0,d1
    3ec0:	|      move.l 17b18 <startOfDataIndex>,d0
    3ec6:	|      add.l d1,d0
    3ec8:	|      move.l d0,36(sp)
    3ecc:	|      clr.l 32(sp)
    3ed0:	|      move.l 17b30 <DOSBase>,d0
    3ed6:	|      movea.l d0,a6
    3ed8:	|      move.l 40(sp),d1
    3edc:	|      move.l 36(sp),d2
    3ee0:	|      move.l 32(sp),d3
    3ee4:	|      jsr -66(a6)
    3ee8:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), 1);
    3eec:	|      move.l 17b10 <bigDataFile>,24(sp)
    3ef4:	|      move.l 17b10 <bigDataFile>,d0
    3efa:	|      move.l d0,-(sp)
    3efc:	|      jsr 718 <get4bytes>
    3f02:	|      addq.l #4,sp
    3f04:	|      move.l d0,20(sp)
    3f08:	|      moveq #1,d0
    3f0a:	|      move.l d0,16(sp)
    3f0e:	|      move.l 17b30 <DOSBase>,d0
    3f14:	|      movea.l d0,a6
    3f16:	|      move.l 24(sp),d1
    3f1a:	|      move.l 20(sp),d2
    3f1e:	|      move.l 16(sp),d3
    3f22:	|      jsr -66(a6)
    3f26:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    3f2a:	|      move.w #1,16010 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    3f32:	|      move.l 17b10 <bigDataFile>,d0
    3f38:	|      move.l d0,-(sp)
    3f3a:	|      jsr 718 <get4bytes>
    3f40:	|      addq.l #4,sp
}
    3f42:	\----> movem.l (sp)+,d2-d3/a6
    3f46:	       lea 32(sp),sp
    3f4a:	       rts

00003f4c <openObjectSlice>:

BOOL openObjectSlice (int num) {
    3f4c:	       lea -32(sp),sp
    3f50:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    3f54:	       move.w 16010 <sliceBusy>,d0
    3f5a:	   /-- beq.s 3f76 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    3f5c:	   |   pea 1348d <line.c.05397aaf+0x147>
    3f62:	   |   pea 134ab <line.c.05397aaf+0x165>
    3f68:	   |   jsr 12048 <KPrintF>
    3f6e:	   |   addq.l #8,sp
        return FALSE;
    3f70:	   |   clr.w d0
    3f72:	/--|-- bra.w 4002 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    3f76:	|  \-> move.l 17b10 <bigDataFile>,40(sp)
    3f7e:	|      move.l 48(sp),d0
    3f82:	|      add.l d0,d0
    3f84:	|      add.l d0,d0
    3f86:	|      move.l d0,d1
    3f88:	|      move.l 17b24 <startOfObjectIndex>,d0
    3f8e:	|      add.l d1,d0
    3f90:	|      move.l d0,36(sp)
    3f94:	|      moveq #-1,d0
    3f96:	|      move.l d0,32(sp)
    3f9a:	|      move.l 17b30 <DOSBase>,d0
    3fa0:	|      movea.l d0,a6
    3fa2:	|      move.l 40(sp),d1
    3fa6:	|      move.l 36(sp),d2
    3faa:	|      move.l 32(sp),d3
    3fae:	|      jsr -66(a6)
    3fb2:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    3fb6:	|      move.l 17b10 <bigDataFile>,24(sp)
    3fbe:	|      move.l 17b10 <bigDataFile>,d0
    3fc4:	|      move.l d0,-(sp)
    3fc6:	|      jsr 718 <get4bytes>
    3fcc:	|      addq.l #4,sp
    3fce:	|      move.l d0,20(sp)
    3fd2:	|      moveq #-1,d0
    3fd4:	|      move.l d0,16(sp)
    3fd8:	|      move.l 17b30 <DOSBase>,d0
    3fde:	|      movea.l d0,a6
    3fe0:	|      move.l 24(sp),d1
    3fe4:	|      move.l 20(sp),d2
    3fe8:	|      move.l 16(sp),d3
    3fec:	|      jsr -66(a6)
    3ff0:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    3ff4:	|      move.w #1,16010 <sliceBusy>
    3ffc:	|      move.w 16010 <sliceBusy>,d0
}
    4002:	\----> movem.l (sp)+,d2-d3/a6
    4006:	       lea 32(sp),sp
    400a:	       rts

0000400c <openSubSlice>:

BOOL openSubSlice (int num) {
    400c:	       lea -32(sp),sp
    4010:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    4014:	       move.w 16010 <sliceBusy>,d0
    401a:	   /-- beq.s 4036 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    401c:	   |   pea 1348d <line.c.05397aaf+0x147>
    4022:	   |   pea 134ab <line.c.05397aaf+0x165>
    4028:	   |   jsr 12048 <KPrintF>
    402e:	   |   addq.l #8,sp
		return FALSE;
    4030:	   |   clr.w d0
    4032:	/--|-- bra.w 40c2 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    4036:	|  \-> move.l 17b10 <bigDataFile>,40(sp)
    403e:	|      move.l 48(sp),d0
    4042:	|      add.l d0,d0
    4044:	|      add.l d0,d0
    4046:	|      move.l d0,d1
    4048:	|      move.l 17b20 <startOfSubIndex>,d0
    404e:	|      add.l d1,d0
    4050:	|      move.l d0,36(sp)
    4054:	|      moveq #-1,d0
    4056:	|      move.l d0,32(sp)
    405a:	|      move.l 17b30 <DOSBase>,d0
    4060:	|      movea.l d0,a6
    4062:	|      move.l 40(sp),d1
    4066:	|      move.l 36(sp),d2
    406a:	|      move.l 32(sp),d3
    406e:	|      jsr -66(a6)
    4072:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    4076:	|      move.l 17b10 <bigDataFile>,24(sp)
    407e:	|      move.l 17b10 <bigDataFile>,d0
    4084:	|      move.l d0,-(sp)
    4086:	|      jsr 718 <get4bytes>
    408c:	|      addq.l #4,sp
    408e:	|      move.l d0,20(sp)
    4092:	|      moveq #-1,d0
    4094:	|      move.l d0,16(sp)
    4098:	|      move.l 17b30 <DOSBase>,d0
    409e:	|      movea.l d0,a6
    40a0:	|      move.l 24(sp),d1
    40a4:	|      move.l 20(sp),d2
    40a8:	|      move.l 16(sp),d3
    40ac:	|      jsr -66(a6)
    40b0:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    40b4:	|      move.w #1,16010 <sliceBusy>
    40bc:	|      move.w 16010 <sliceBusy>,d0
}
    40c2:	\----> movem.l (sp)+,d2-d3/a6
    40c6:	       lea 32(sp),sp
    40ca:	       rts

000040cc <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    40cc:	       lea -180(sp),sp
    40d0:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    40d4:	       tst.l 196(sp)
    40d8:	/----- beq.s 4118 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    40da:	|      move.l 196(sp),17b10 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    40e2:	|      move.l 196(sp),168(sp)
    40e8:	|      clr.l 164(sp)
    40ec:	|      clr.l 160(sp)
    40f0:	|      move.l 17b30 <DOSBase>,d0
    40f6:	|      movea.l d0,a6
    40f8:	|      move.l 168(sp),d1
    40fc:	|      move.l 164(sp),d2
    4100:	|      move.l 160(sp),d3
    4104:	|      jsr -66(a6)
    4108:	|      move.l d0,156(sp)
    410c:	|      move.l 156(sp),d0
    4110:	|      move.l d0,17b14 <startIndex>
    4116:	|  /-- bra.s 4152 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    4118:	\--|-> move.l 17b10 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    4120:	   |   move.l 196(sp),184(sp)
    4126:	   |   move.l 17b14 <startIndex>,d0
    412c:	   |   move.l d0,180(sp)
    4130:	   |   moveq #-1,d0
    4132:	   |   move.l d0,176(sp)
    4136:	   |   move.l 17b30 <DOSBase>,d0
    413c:	   |   movea.l d0,a6
    413e:	   |   move.l 184(sp),d1
    4142:	   |   move.l 180(sp),d2
    4146:	   |   move.l 176(sp),d3
    414a:	   |   jsr -66(a6)
    414e:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    4152:	   \-> clr.w 16010 <sliceBusy>

	if (skipBefore > numLanguages) {
    4158:	       move.l 204(sp),d0
    415c:	       cmp.l 200(sp),d0
    4160:	   /-- bls.s 4174 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    4162:	   |   pea 134c5 <line.c.05397aaf+0x17f>
    4168:	   |   jsr 12048 <KPrintF>
    416e:	   |   addq.l #4,sp
		skipBefore = 0;
    4170:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    4174:	   \-> move.l 200(sp),d0
    4178:	       sub.l 204(sp),d0
    417c:	       move.l d0,188(sp)
	while (skipBefore) {
    4180:	   /-- bra.s 41bc <setFileIndices+0xf0>
        Seek(fp, get4bytes(fp),0);		
    4182:	/--|-> move.l 196(sp),24(sp)
    4188:	|  |   move.l 196(sp),-(sp)
    418c:	|  |   jsr 718 <get4bytes>
    4192:	|  |   addq.l #4,sp
    4194:	|  |   move.l d0,20(sp)
    4198:	|  |   clr.l 16(sp)
    419c:	|  |   move.l 17b30 <DOSBase>,d0
    41a2:	|  |   movea.l d0,a6
    41a4:	|  |   move.l 24(sp),d1
    41a8:	|  |   move.l 20(sp),d2
    41ac:	|  |   move.l 16(sp),d3
    41b0:	|  |   jsr -66(a6)
    41b4:	|  |   move.l d0,12(sp)
		skipBefore --;
    41b8:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    41bc:	|  \-> tst.l 204(sp)
    41c0:	\----- bne.s 4182 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    41c2:	       move.l 196(sp),152(sp)
    41c8:	       clr.l 148(sp)
    41cc:	       clr.l 144(sp)
    41d0:	       move.l 17b30 <DOSBase>,d0
    41d6:	       movea.l d0,a6
    41d8:	       move.l 152(sp),d1
    41dc:	       move.l 148(sp),d2
    41e0:	       move.l 144(sp),d3
    41e4:	       jsr -66(a6)
    41e8:	       move.l d0,140(sp)
    41ec:	       move.l 140(sp),d0
    41f0:	       addq.l #4,d0
    41f2:	       move.l d0,17b1c <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    41f8:	       move.l 196(sp),136(sp)
    41fe:	       move.l 196(sp),-(sp)
    4202:	       jsr 718 <get4bytes>
    4208:	       addq.l #4,sp
    420a:	       move.l d0,132(sp)
    420e:	       moveq #-1,d0
    4210:	       move.l d0,128(sp)
    4214:	       move.l 17b30 <DOSBase>,d0
    421a:	       movea.l d0,a6
    421c:	       move.l 136(sp),d1
    4220:	       move.l 132(sp),d2
    4224:	       move.l 128(sp),d3
    4228:	       jsr -66(a6)
    422c:	       move.l d0,124(sp)

	while (skipAfter) {
    4230:	   /-- bra.s 426e <setFileIndices+0x1a2>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    4232:	/--|-> move.l 196(sp),40(sp)
    4238:	|  |   move.l 196(sp),-(sp)
    423c:	|  |   jsr 718 <get4bytes>
    4242:	|  |   addq.l #4,sp
    4244:	|  |   move.l d0,36(sp)
    4248:	|  |   moveq #-1,d0
    424a:	|  |   move.l d0,32(sp)
    424e:	|  |   move.l 17b30 <DOSBase>,d0
    4254:	|  |   movea.l d0,a6
    4256:	|  |   move.l 40(sp),d1
    425a:	|  |   move.l 36(sp),d2
    425e:	|  |   move.l 32(sp),d3
    4262:	|  |   jsr -66(a6)
    4266:	|  |   move.l d0,28(sp)
		skipAfter --;
    426a:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    426e:	|  \-> tst.l 188(sp)
    4272:	\----- bne.s 4232 <setFileIndices+0x166>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    4274:	       move.l 196(sp),120(sp)
    427a:	       clr.l 116(sp)
    427e:	       clr.l 112(sp)
    4282:	       move.l 17b30 <DOSBase>,d0
    4288:	       movea.l d0,a6
    428a:	       move.l 120(sp),d1
    428e:	       move.l 116(sp),d2
    4292:	       move.l 112(sp),d3
    4296:	       jsr -66(a6)
    429a:	       move.l d0,108(sp)
    429e:	       move.l 108(sp),d0
    42a2:	       addq.l #4,d0
    42a4:	       move.l d0,17b20 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    42aa:	       move.l 196(sp),104(sp)
    42b0:	       move.l 196(sp),-(sp)
    42b4:	       jsr 718 <get4bytes>
    42ba:	       addq.l #4,sp
    42bc:	       move.l d0,100(sp)
    42c0:	       clr.l 96(sp)
    42c4:	       move.l 17b30 <DOSBase>,d0
    42ca:	       movea.l d0,a6
    42cc:	       move.l 104(sp),d1
    42d0:	       move.l 100(sp),d2
    42d4:	       move.l 96(sp),d3
    42d8:	       jsr -66(a6)
    42dc:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    42e0:	       move.l 196(sp),88(sp)
    42e6:	       clr.l 84(sp)
    42ea:	       clr.l 80(sp)
    42ee:	       move.l 17b30 <DOSBase>,d0
    42f4:	       movea.l d0,a6
    42f6:	       move.l 88(sp),d1
    42fa:	       move.l 84(sp),d2
    42fe:	       move.l 80(sp),d3
    4302:	       jsr -66(a6)
    4306:	       move.l d0,76(sp)
    430a:	       move.l 76(sp),d0
    430e:	       addq.l #4,d0
    4310:	       move.l d0,17b24 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    4316:	       move.l 196(sp),72(sp)
    431c:	       move.l 196(sp),-(sp)
    4320:	       jsr 718 <get4bytes>
    4326:	       addq.l #4,sp
    4328:	       move.l d0,68(sp)
    432c:	       clr.l 64(sp)
    4330:	       move.l 17b30 <DOSBase>,d0
    4336:	       movea.l d0,a6
    4338:	       move.l 72(sp),d1
    433c:	       move.l 68(sp),d2
    4340:	       move.l 64(sp),d3
    4344:	       jsr -66(a6)
    4348:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    434c:	       move.l 196(sp),56(sp)
    4352:	       clr.l 52(sp)
    4356:	       clr.l 48(sp)
    435a:	       move.l 17b30 <DOSBase>,d0
    4360:	       movea.l d0,a6
    4362:	       move.l 56(sp),d1
    4366:	       move.l 52(sp),d2
    436a:	       move.l 48(sp),d3
    436e:	       jsr -66(a6)
    4372:	       move.l d0,44(sp)
    4376:	       move.l 44(sp),d0
    437a:	       move.l d0,17b18 <startOfDataIndex>
    4380:	       nop
    4382:	       movem.l (sp)+,d2-d3/a6
    4386:	       lea 180(sp),sp
    438a:	       rts

0000438c <p61Init>:
	// The Player® 6.1A: Copyright © 1992-95 Jarno Paananen
	// P61.testmod - Module by Skylord/Sector 7 
	INCBIN(player, "player610.6.no_cia.bin")
	INCBIN_CHIP(module, "testmod.p61")

	int p61Init(const void* module) { // returns 0 if success, non-zero otherwise
    438c:	move.l a3,-(sp)
    438e:	move.l a2,-(sp)
		register volatile const void* _a0 ASM("a0") = module;
    4390:	movea.l 12(sp),a0
		register volatile const void* _a1 ASM("a1") = NULL;
    4394:	suba.l a1,a1
		register volatile const void* _a2 ASM("a2") = NULL;
    4396:	suba.l a2,a2
		register volatile const void* _a3 ASM("a3") = player;
    4398:	move.l 16012 <player>,d0
    439e:	movea.l d0,a3
		register                int   _d0 ASM("d0"); // return value
		__asm volatile (
    43a0:	movem.l d1-d7/a4-a6,-(sp)
    43a4:	jsr (a3)
    43a6:	movem.l (sp)+,d1-d7/a4-a6
			"movem.l (%%sp)+,%%d1-%%d7/%%a4-%%a6"
		: "=r" (_d0), "+rf"(_a0), "+rf"(_a1), "+rf"(_a2), "+rf"(_a3)
		:
		: "cc", "memory");
		return _d0;
	}
    43aa:	movea.l (sp)+,a2
    43ac:	movea.l (sp)+,a3
    43ae:	rts

000043b0 <p61End>:
		: "+rf"(_a3), "+rf"(_a6)
		:
		: "cc", "memory");
	}

	void p61End() {
    43b0:	move.l a6,-(sp)
    43b2:	move.l a3,-(sp)
		register volatile const void* _a3 ASM("a3") = player;
    43b4:	move.l 16012 <player>,d0
    43ba:	movea.l d0,a3
		register volatile const void* _a6 ASM("a6") = (void*)0xdff000;
    43bc:	movea.l #14675968,a6
		__asm volatile (
    43c2:	movem.l d0-d1/a0-a1,-(sp)
    43c6:	jsr 8(a3)
    43ca:	movem.l (sp)+,d0-d1/a0-a1
			"jsr 8(%%a3)\n"
			"movem.l (%%sp)+,%%d0-%%d1/%%a0-%%a1"
		: "+rf"(_a3), "+rf"(_a6)
		:
		: "cc", "memory");
	}
    43ce:	nop
    43d0:	movea.l (sp)+,a3
    43d2:	movea.l (sp)+,a6
    43d4:	rts

000043d6 <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    43d6:	    lea -128(sp),sp
    43da:	    movem.l d2-d3/a6,-(sp)
	SysBase = *((struct ExecBase**)4UL);
    43de:	    movea.w #4,a0
    43e2:	    move.l (a0),d0
    43e4:	    move.l d0,17b28 <SysBase>
	custom = (struct Custom*)0xdff000;	
    43ea:	    move.l #14675968,17b2c <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    43f4:	    move.l #85621,136(sp)
    43fc:	    clr.l 132(sp)
    4400:	    move.l 17b28 <SysBase>,d0
    4406:	    movea.l d0,a6
    4408:	    movea.l 136(sp),a1
    440c:	    move.l 132(sp),d0
    4410:	    jsr -552(a6)
    4414:	    move.l d0,128(sp)
    4418:	    move.l 128(sp),d0
    441c:	    move.l d0,17b34 <GfxBase>
	if (!GfxBase)
    4422:	    move.l 17b34 <GfxBase>,d0
    4428:	/-- bne.s 443e <main+0x68>
		Exit(0);
    442a:	|   clr.l 124(sp)
    442e:	|   move.l 17b30 <DOSBase>,d0
    4434:	|   movea.l d0,a6
    4436:	|   move.l 124(sp),d1
    443a:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    443e:	\-> move.l #85638,120(sp)
    4446:	    clr.l 116(sp)
    444a:	    move.l 17b28 <SysBase>,d0
    4450:	    movea.l d0,a6
    4452:	    movea.l 120(sp),a1
    4456:	    move.l 116(sp),d0
    445a:	    jsr -552(a6)
    445e:	    move.l d0,112(sp)
    4462:	    move.l 112(sp),d0
    4466:	    move.l d0,17b30 <DOSBase>
	if (!DOSBase)
    446c:	    move.l 17b30 <DOSBase>,d0
    4472:	/-- bne.s 4488 <main+0xb2>
		Exit(0);
    4474:	|   clr.l 108(sp)
    4478:	|   move.l 17b30 <DOSBase>,d0
    447e:	|   movea.l d0,a6
    4480:	|   move.l 108(sp),d1
    4484:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    4488:	\-> move.l #85650,104(sp)
    4490:	    clr.l 100(sp)
    4494:	    move.l 17b28 <SysBase>,d0
    449a:	    movea.l d0,a6
    449c:	    movea.l 104(sp),a1
    44a0:	    move.l 100(sp),d0
    44a4:	    jsr -552(a6)
    44a8:	    move.l d0,96(sp)
    44ac:	    move.l 96(sp),d0
    44b0:	    move.l d0,17b38 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    44b6:	    move.l 17b38 <MathIeeeSingBasBase>,d0
    44bc:	/-- bne.s 44d2 <main+0xfc>
		Exit(0);	
    44be:	|   clr.l 92(sp)
    44c2:	|   move.l 17b30 <DOSBase>,d0
    44c8:	|   movea.l d0,a6
    44ca:	|   move.l 92(sp),d1
    44ce:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    44d2:	\-> move.l #85674,88(sp)
    44da:	    clr.l 84(sp)
    44de:	    move.l 17b28 <SysBase>,d0
    44e4:	    movea.l d0,a6
    44e6:	    movea.l 88(sp),a1
    44ea:	    move.l 84(sp),d0
    44ee:	    jsr -552(a6)
    44f2:	    move.l d0,80(sp)
    44f6:	    move.l 80(sp),d0
    44fa:	    move.l d0,17b3c <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    4500:	    move.l 17b3c <MathIeeeSingTransBase>,d0
    4506:	/-- bne.s 451c <main+0x146>
		Exit(0);
    4508:	|   clr.l 76(sp)
    450c:	|   move.l 17b30 <DOSBase>,d0
    4512:	|   movea.l d0,a6
    4514:	|   move.l 76(sp),d1
    4518:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    451c:	\-> move.l #85700,72(sp)
    4524:	    clr.l 68(sp)
    4528:	    move.l 17b28 <SysBase>,d0
    452e:	    movea.l d0,a6
    4530:	    movea.l 72(sp),a1
    4534:	    move.l 68(sp),d0
    4538:	    jsr -552(a6)
    453c:	    move.l d0,64(sp)
    4540:	    move.l 64(sp),d0
    4544:	    move.l d0,17b44 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    454a:	    move.l 17b44 <MathIeeeDoubTransBase>,d0
    4550:	/-- bne.s 4566 <main+0x190>
		Exit(0);
    4552:	|   clr.l 60(sp)
    4556:	|   move.l 17b30 <DOSBase>,d0
    455c:	|   movea.l d0,a6
    455e:	|   move.l 60(sp),d1
    4562:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    4566:	\-> move.l #85726,56(sp)
    456e:	    clr.l 52(sp)
    4572:	    move.l 17b28 <SysBase>,d0
    4578:	    movea.l d0,a6
    457a:	    movea.l 56(sp),a1
    457e:	    move.l 52(sp),d0
    4582:	    jsr -552(a6)
    4586:	    move.l d0,48(sp)
    458a:	    move.l 48(sp),d0
    458e:	    move.l d0,17b40 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    4594:	    move.l 17b40 <MathIeeeDoubBasBase>,d0
    459a:	/-- bne.s 45b0 <main+0x1da>
		Exit(0);
    459c:	|   clr.l 44(sp)
    45a0:	|   move.l 17b30 <DOSBase>,d0
    45a6:	|   movea.l d0,a6
    45a8:	|   move.l 44(sp),d1
    45ac:	|   jsr -144(a6)
	

	KPrintF("Hello debugger from Amiga!\n");
    45b0:	\-> pea 14ef6 <incbin_player_end+0x82>
    45b6:	    jsr 12048 <KPrintF>
    45bc:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console!\n", 15);
    45be:	    move.l 17b30 <DOSBase>,d0
    45c4:	    movea.l d0,a6
    45c6:	    jsr -60(a6)
    45ca:	    move.l d0,40(sp)
    45ce:	    move.l 40(sp),d0
    45d2:	    move.l d0,36(sp)
    45d6:	    move.l #85778,32(sp)
    45de:	    moveq #15,d0
    45e0:	    move.l d0,28(sp)
    45e4:	    move.l 17b30 <DOSBase>,d0
    45ea:	    movea.l d0,a6
    45ec:	    move.l 36(sp),d1
    45f0:	    move.l 32(sp),d2
    45f4:	    move.l 28(sp),d3
    45f8:	    jsr -48(a6)
    45fc:	    move.l d0,24(sp)
	Delay(50);
    4600:	    moveq #50,d0
    4602:	    move.l d0,20(sp)
    4606:	    move.l 17b30 <DOSBase>,d0
    460c:	    movea.l d0,a6
    460e:	    move.l 20(sp),d1
    4612:	    jsr -198(a6)

	warpmode(1);
    4616:	    pea 1 <_start+0x1>
    461a:	    jsr 120b2 <warpmode>
    4620:	    addq.l #4,sp
	// TODO: precalc stuff here
#ifdef MUSIC
	if(p61Init(module) != 0)
    4622:	    move.l 16016 <module>,d0
    4628:	    move.l d0,-(sp)
    462a:	    jsr 438c <p61Init>
    4630:	    addq.l #4,sp
    4632:	    tst.l d0
    4634:	/-- beq.s 4644 <main+0x26e>
		KPrintF("p61Init failed!\n");
    4636:	|   pea 14f22 <incbin_player_end+0xae>
    463c:	|   jsr 12048 <KPrintF>
    4642:	|   addq.l #4,sp
#endif
	warpmode(0);
    4644:	\-> clr.l -(sp)
    4646:	    jsr 120b2 <warpmode>
    464c:	    addq.l #4,sp

	//TakeSystem();
	custom->dmacon = 0x87ff;
    464e:	    movea.l 17b2c <custom>,a0
    4654:	    move.w #-30721,150(a0)
	WaitVbl();
    465a:	    jsr 11f70 <WaitVbl>

	main_sludge(argc, argv);
    4660:	    move.l 148(sp),-(sp)
    4664:	    move.l 148(sp),-(sp)
    4668:	    jsr 10d0 <main_sludge>
    466e:	    addq.l #8,sp
	debug_register_palette(colors, "image.pal", 32, 0);
	debug_register_copperlist(copper1, "copper1", 1024, 0);
	debug_register_copperlist(copper2, "copper2", sizeof(copper2), 0);*/

#ifdef MUSIC
	p61End();
    4670:	    jsr 43b0 <p61End>
#endif

	// END
	//FreeSystem();

	CloseLibrary((struct Library*)DOSBase);
    4676:	    move.l 17b30 <DOSBase>,16(sp)
    467e:	    move.l 17b28 <SysBase>,d0
    4684:	    movea.l d0,a6
    4686:	    movea.l 16(sp),a1
    468a:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    468e:	    move.l 17b34 <GfxBase>,12(sp)
    4696:	    move.l 17b28 <SysBase>,d0
    469c:	    movea.l d0,a6
    469e:	    movea.l 12(sp),a1
    46a2:	    jsr -414(a6)
    46a6:	    moveq #0,d0
}
    46a8:	    movem.l (sp)+,d2-d3/a6
    46ac:	    lea 128(sp),sp
    46b0:	    rts

000046b2 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    46b2:	    lea -16(sp),sp
    46b6:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    46b8:	    moveq #8,d0
    46ba:	    move.l d0,16(sp)
    46be:	    clr.l 12(sp)
    46c2:	    move.l 17b28 <SysBase>,d0
    46c8:	    movea.l d0,a6
    46ca:	    move.l 16(sp),d0
    46ce:	    move.l 12(sp),d1
    46d2:	    jsr -684(a6)
    46d6:	    move.l d0,8(sp)
    46da:	    move.l 8(sp),d0
    46de:	    move.l d0,4(sp)
	if (!newStat) {
    46e2:	/-- bne.s 4712 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    46e4:	|   movea.l 1601a <nowStatus>,a0
    46ea:	|   move.l (a0),d0
    46ec:	|   movea.l 4(sp),a0
    46f0:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    46f4:	|   pea 13132 <cursors.c.412ac4f3+0x23d>
    46fa:	|   jsr b8 <copyString>
    4700:	|   addq.l #4,sp
    4702:	|   movea.l 4(sp),a0
    4706:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    4708:	|   movea.l 1601a <nowStatus>,a0
    470e:	|   move.l 4(sp),(a0)
	}
}
    4712:	\-> nop
    4714:	    movea.l (sp)+,a6
    4716:	    lea 16(sp),sp
    471a:	    rts

0000471c <clearStatusBar>:

void clearStatusBar () {
    471c:	       lea -16(sp),sp
    4720:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    4722:	       movea.l 1601a <nowStatus>,a0
    4728:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    472c:	       movea.l 1601a <nowStatus>,a0
    4732:	       moveq #-1,d0
    4734:	       move.l d0,6(a0)
	while (stat) {
    4738:	   /-- bra.s 4778 <clearStatusBar+0x5c>
		kill = stat;
    473a:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    4740:	|  |   movea.l 16(sp),a0
    4744:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    474a:	|  |   movea.l 12(sp),a0
    474e:	|  |   move.l (a0),8(sp)
    4752:	|  |   move.l 17b28 <SysBase>,d0
    4758:	|  |   movea.l d0,a6
    475a:	|  |   movea.l 8(sp),a1
    475e:	|  |   jsr -690(a6)
		FreeVec(kill);
    4762:	|  |   move.l 12(sp),4(sp)
    4768:	|  |   move.l 17b28 <SysBase>,d0
    476e:	|  |   movea.l d0,a6
    4770:	|  |   movea.l 4(sp),a1
    4774:	|  |   jsr -690(a6)
	while (stat) {
    4778:	|  \-> tst.l 16(sp)
    477c:	\----- bne.s 473a <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    477e:	       movea.l 1601a <nowStatus>,a0
    4784:	       clr.l (a0)
}
    4786:	       nop
    4788:	       movea.l (sp)+,a6
    478a:	       lea 16(sp),sp
    478e:	       rts

00004790 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    4790:	clr.l 17b48 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    4796:	move.w #-1,17b4c <mainStatus+0x4>
	mainStatus.litStatus = -1;
    479e:	moveq #-1,d0
    47a0:	move.l d0,17b4e <mainStatus+0x6>
	mainStatus.statusX = 10;
    47a6:	moveq #10,d0
    47a8:	move.l d0,17b52 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    47ae:	movea.l 17a2c <winHeight>,a0
    47b4:	lea -15(a0),a0
    47b8:	move.l a0,d0
    47ba:	move.l d0,17b56 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    47c0:	nop
    47c2:	rts

000047c4 <killLastStatus>:

void killLastStatus () {
    47c4:	    lea -12(sp),sp
    47c8:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    47ca:	    movea.l 1601a <nowStatus>,a0
    47d0:	    move.l (a0),d0
    47d2:	/-- beq.s 481c <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    47d4:	|   movea.l 1601a <nowStatus>,a0
    47da:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    47de:	|   movea.l 1601a <nowStatus>,a0
    47e4:	|   movea.l 12(sp),a1
    47e8:	|   move.l 4(a1),d0
    47ec:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    47ee:	|   movea.l 12(sp),a0
    47f2:	|   move.l (a0),8(sp)
    47f6:	|   move.l 17b28 <SysBase>,d0
    47fc:	|   movea.l d0,a6
    47fe:	|   movea.l 8(sp),a1
    4802:	|   jsr -690(a6)
		FreeVec(kill);
    4806:	|   move.l 12(sp),4(sp)
    480c:	|   move.l 17b28 <SysBase>,d0
    4812:	|   movea.l d0,a6
    4814:	|   movea.l 4(sp),a1
    4818:	|   jsr -690(a6)
	}
}
    481c:	\-> nop
    481e:	    movea.l (sp)+,a6
    4820:	    lea 12(sp),sp
    4824:	    rts

00004826 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    4826:	movea.l 1601a <nowStatus>,a0
    482c:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    4832:	movea.l 1601a <nowStatus>,a0
    4838:	move.l 8(sp),14(a0)
}
    483e:	nop
    4840:	rts

00004842 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    4842:	       lea -100(sp),sp
    4846:	       move.l a6,-(sp)
    4848:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    484a:	       movea.l 1601a <nowStatus>,a0
    4850:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    4854:	       movea.l 1601a <nowStatus>,a0
    485a:	       move.w 4(a0),d0
    485e:	       move.w d0,d0
    4860:	       andi.l #65535,d0
    4866:	       move.l 112(sp),-(sp)
    486a:	       move.l d0,-(sp)
    486c:	       jsr 8d0 <put2bytes>
    4872:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    4874:	       movea.l 1601a <nowStatus>,a0
    487a:	       move.l 6(a0),d0
    487e:	       move.l d0,d0
    4880:	       movea.w d0,a0
    4882:	       move.l 112(sp),-(sp)
    4886:	       move.l a0,-(sp)
    4888:	       jsr a9c <putSigned>
    488e:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    4890:	       movea.l 1601a <nowStatus>,a0
    4896:	       move.l 10(a0),d0
    489a:	       move.l 112(sp),-(sp)
    489e:	       move.l d0,-(sp)
    48a0:	       jsr 8d0 <put2bytes>
    48a6:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    48a8:	       movea.l 1601a <nowStatus>,a0
    48ae:	       move.l 14(a0),d0
    48b2:	       move.l 112(sp),-(sp)
    48b6:	       move.l d0,-(sp)
    48b8:	       jsr 8d0 <put2bytes>
    48be:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    48c0:	       move.l 112(sp),100(sp)
    48c6:	       movea.l 1601a <nowStatus>,a0
    48cc:	       move.l 18(a0),96(sp)
    48d2:	       move.l 17b30 <DOSBase>,d0
    48d8:	       movea.l d0,a6
    48da:	       move.l 100(sp),d1
    48de:	       move.l 96(sp),d2
    48e2:	       jsr -312(a6)
    48e6:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    48ea:	       move.l 112(sp),88(sp)
    48f0:	       movea.l 1601a <nowStatus>,a0
    48f6:	       move.l 22(a0),84(sp)
    48fc:	       move.l 17b30 <DOSBase>,d0
    4902:	       movea.l d0,a6
    4904:	       move.l 88(sp),d1
    4908:	       move.l 84(sp),d2
    490c:	       jsr -312(a6)
    4910:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    4914:	       move.l 112(sp),76(sp)
    491a:	       movea.l 1601a <nowStatus>,a0
    4920:	       move.l 26(a0),72(sp)
    4926:	       move.l 17b30 <DOSBase>,d0
    492c:	       movea.l d0,a6
    492e:	       move.l 76(sp),d1
    4932:	       move.l 72(sp),d2
    4936:	       jsr -312(a6)
    493a:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    493e:	       move.l 112(sp),64(sp)
    4944:	       movea.l 1601a <nowStatus>,a0
    494a:	       move.l 30(a0),60(sp)
    4950:	       move.l 17b30 <DOSBase>,d0
    4956:	       movea.l d0,a6
    4958:	       move.l 64(sp),d1
    495c:	       move.l 60(sp),d2
    4960:	       jsr -312(a6)
    4964:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    4968:	       move.l 112(sp),52(sp)
    496e:	       movea.l 1601a <nowStatus>,a0
    4974:	       move.l 34(a0),48(sp)
    497a:	       move.l 17b30 <DOSBase>,d0
    4980:	       movea.l d0,a6
    4982:	       move.l 52(sp),d1
    4986:	       move.l 48(sp),d2
    498a:	       jsr -312(a6)
    498e:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    4992:	       move.l 112(sp),40(sp)
    4998:	       movea.l 1601a <nowStatus>,a0
    499e:	       move.l 38(a0),36(sp)
    49a4:	       move.l 17b30 <DOSBase>,d0
    49aa:	       movea.l d0,a6
    49ac:	       move.l 40(sp),d1
    49b0:	       move.l 36(sp),d2
    49b4:	       jsr -312(a6)
    49b8:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    49bc:	   /-- bra.s 4a00 <saveStatusBars+0x1be>
		FPutC (fp,1);
    49be:	/--|-> move.l 112(sp),16(sp)
    49c4:	|  |   moveq #1,d0
    49c6:	|  |   move.l d0,12(sp)
    49ca:	|  |   move.l 17b30 <DOSBase>,d0
    49d0:	|  |   movea.l d0,a6
    49d2:	|  |   move.l 16(sp),d1
    49d6:	|  |   move.l 12(sp),d2
    49da:	|  |   jsr -312(a6)
    49de:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    49e2:	|  |   movea.l 104(sp),a0
    49e6:	|  |   move.l (a0),d0
    49e8:	|  |   move.l 112(sp),-(sp)
    49ec:	|  |   move.l d0,-(sp)
    49ee:	|  |   jsr bd8 <writeString>
    49f4:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    49f6:	|  |   movea.l 104(sp),a0
    49fa:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    4a00:	|  \-> tst.l 104(sp)
    4a04:	\----- bne.s 49be <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    4a06:	       move.l 112(sp),28(sp)
    4a0c:	       clr.l 24(sp)
    4a10:	       move.l 17b30 <DOSBase>,d0
    4a16:	       movea.l d0,a6
    4a18:	       move.l 28(sp),d1
    4a1c:	       move.l 24(sp),d2
    4a20:	       jsr -312(a6)
    4a24:	       move.l d0,20(sp)
}
    4a28:	       nop
    4a2a:	       move.l (sp)+,d2
    4a2c:	       movea.l (sp)+,a6
    4a2e:	       lea 100(sp),sp
    4a32:	       rts

00004a34 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    4a34:	movea.l 1601a <nowStatus>,a0
    4a3a:	move.l 4(sp),6(a0)
}
    4a40:	nop
    4a42:	rts

00004a44 <setStatusBar>:

void setStatusBar (char * txt) {
    4a44:	    subq.l #4,sp
    4a46:	    move.l a6,-(sp)
    4a48:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    4a4a:	    movea.l 1601a <nowStatus>,a0
    4a50:	    move.l (a0),d0
    4a52:	/-- beq.s 4a86 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    4a54:	|   movea.l 1601a <nowStatus>,a0
    4a5a:	|   movea.l (a0),a0
    4a5c:	|   move.l (a0),8(sp)
    4a60:	|   move.l 17b28 <SysBase>,d0
    4a66:	|   movea.l d0,a6
    4a68:	|   movea.l 8(sp),a1
    4a6c:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    4a70:	|   movea.l 1601a <nowStatus>,a0
    4a76:	|   movea.l (a0),a2
    4a78:	|   move.l 16(sp),-(sp)
    4a7c:	|   jsr b8 <copyString>
    4a82:	|   addq.l #4,sp
    4a84:	|   move.l d0,(a2)
	}
}
    4a86:	\-> nop
    4a88:	    movea.l (sp)+,a2
    4a8a:	    movea.l (sp)+,a6
    4a8c:	    addq.l #4,sp
    4a8e:	    rts

00004a90 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    4a90:	       movea.l 1601a <nowStatus>,a0
    4a96:	       move.l (a0),d0
    4a98:	/----- beq.s 4aa6 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    4a9a:	|      movea.l 1601a <nowStatus>,a0
    4aa0:	|      movea.l (a0),a0
    4aa2:	|      move.l (a0),d0
    4aa4:	|  /-- bra.s 4aac <statusBarText+0x1c>
	} else {
		return "";
    4aa6:	\--|-> move.l #78130,d0
	}
    4aac:	   \-> rts

00004aae <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    4aae:	       lea -28(sp),sp
    4ab2:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    4ab6:	       move.l 52(sp),-(sp)
    4aba:	       jsr 109d2 <stringWidth>
    4ac0:	       addq.l #4,sp
    4ac2:	       asr.l #1,d0
    4ac4:	       move.l d0,-(sp)
    4ac6:	       jsr 124a0 <__floatsisf>
    4acc:	       addq.l #4,sp
    4ace:	       move.l d0,d1
    4ad0:	       move.l 16032 <cameraZoom>,d0
    4ad6:	       move.l d0,-(sp)
    4ad8:	       move.l d1,-(sp)
    4ada:	       jsr 1234c <__divsf3>
    4ae0:	       addq.l #8,sp
    4ae2:	       move.l d0,-(sp)
    4ae4:	       jsr 12438 <__fixsfsi>
    4aea:	       addq.l #4,sp
    4aec:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    4af0:	       move.l 56(sp),d0
    4af4:	       sub.l 44(sp),d0
    4af8:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    4afc:	       move.l 56(sp),d0
    4b00:	       add.l 44(sp),d0
    4b04:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    4b08:	       moveq #12,d0
    4b0a:	       move.l d0,32(sp)
    4b0e:	       clr.l 28(sp)
    4b12:	       move.l 17b28 <SysBase>,d0
    4b18:	       movea.l d0,a6
    4b1a:	       move.l 32(sp),d0
    4b1e:	       move.l 28(sp),d1
    4b22:	       jsr -684(a6)
    4b26:	       move.l d0,24(sp)
    4b2a:	       move.l 24(sp),d0
    4b2e:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    4b32:	       movea.l 17b72 <speech>,a0
    4b38:	       move.l 4(a0),d0
    4b3c:	       movea.l 20(sp),a0
    4b40:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    4b44:	       move.l 52(sp),-(sp)
    4b48:	       jsr b8 <copyString>
    4b4e:	       addq.l #4,sp
    4b50:	       movea.l 20(sp),a0
    4b54:	       move.l d0,(a0)
	newLine -> x = xx1;
    4b56:	       movea.l 20(sp),a0
    4b5a:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    4b60:	       movea.l 17b72 <speech>,a0
    4b66:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    4b6c:	       moveq #4,d0
    4b6e:	       cmp.l 40(sp),d0
    4b72:	   /-- blt.s 4b94 <addSpeechLine+0xe6>
    4b74:	   |   movea.l 60(sp),a0
    4b78:	   |   move.l (a0),d1
    4b7a:	   |   moveq #5,d0
    4b7c:	   |   sub.l 40(sp),d0
    4b80:	   |   cmp.l d1,d0
    4b82:	   +-- ble.s 4b94 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    4b84:	   |   moveq #5,d0
    4b86:	   |   sub.l 40(sp),d0
    4b8a:	   |   movea.l 60(sp),a0
    4b8e:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    4b90:	/--|-- bra.w 4cc0 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    4b94:	|  \-> move.l 36(sp),-(sp)
    4b98:	|      jsr 124a0 <__floatsisf>
    4b9e:	|      addq.l #4,sp
    4ba0:	|      move.l d0,d2
    4ba2:	|      move.l 17a28 <winWidth>,d0
    4ba8:	|      move.l d0,-(sp)
    4baa:	|      jsr 124c8 <__floatunsisf>
    4bb0:	|      addq.l #4,sp
    4bb2:	|      move.l d0,d1
    4bb4:	|      move.l 16032 <cameraZoom>,d0
    4bba:	|      move.l d0,-(sp)
    4bbc:	|      move.l d1,-(sp)
    4bbe:	|      jsr 1234c <__divsf3>
    4bc4:	|      addq.l #8,sp
    4bc6:	|      move.l #1084227584,-(sp)
    4bcc:	|      move.l d0,-(sp)
    4bce:	|      jsr 12794 <__subsf3>
    4bd4:	|      addq.l #8,sp
    4bd6:	|      move.l d0,-(sp)
    4bd8:	|      move.l d2,-(sp)
    4bda:	|      jsr 12588 <__gesf2>
    4be0:	|      addq.l #8,sp
    4be2:	|      tst.l d0
    4be4:	|  /-- bge.s 4bea <addSpeechLine+0x13c>
}
    4be6:	+--|-- bra.w 4cc0 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    4bea:	|  \-> movea.l 60(sp),a0
    4bee:	|      move.l (a0),d0
    4bf0:	|      move.l d0,-(sp)
    4bf2:	|      jsr 124a0 <__floatsisf>
    4bf8:	|      addq.l #4,sp
    4bfa:	|      move.l d0,-(sp)
    4bfc:	|      jsr 123b8 <__extendsfdf2>
    4c02:	|      addq.l #4,sp
    4c04:	|      move.l d0,d4
    4c06:	|      move.l d1,d5
    4c08:	|      move.l 17a28 <winWidth>,d0
    4c0e:	|      move.l d0,-(sp)
    4c10:	|      jsr 124c8 <__floatunsisf>
    4c16:	|      addq.l #4,sp
    4c18:	|      move.l d0,d1
    4c1a:	|      move.l 16032 <cameraZoom>,d0
    4c20:	|      move.l d0,-(sp)
    4c22:	|      move.l d1,-(sp)
    4c24:	|      jsr 1234c <__divsf3>
    4c2a:	|      addq.l #8,sp
    4c2c:	|      move.l d0,-(sp)
    4c2e:	|      jsr 123b8 <__extendsfdf2>
    4c34:	|      addq.l #4,sp
    4c36:	|      clr.l -(sp)
    4c38:	|      move.l #1075052544,-(sp)
    4c3e:	|      move.l d1,-(sp)
    4c40:	|      move.l d0,-(sp)
    4c42:	|      jsr 12732 <__subdf3>
    4c48:	|      lea 16(sp),sp
    4c4c:	|      move.l d0,d2
    4c4e:	|      move.l d1,d3
    4c50:	|      move.l 36(sp),-(sp)
    4c54:	|      jsr 12460 <__floatsidf>
    4c5a:	|      addq.l #4,sp
    4c5c:	|      move.l d1,-(sp)
    4c5e:	|      move.l d0,-(sp)
    4c60:	|      move.l d3,-(sp)
    4c62:	|      move.l d2,-(sp)
    4c64:	|      jsr 12732 <__subdf3>
    4c6a:	|      lea 16(sp),sp
    4c6e:	|      move.l d1,-(sp)
    4c70:	|      move.l d0,-(sp)
    4c72:	|      move.l d5,-(sp)
    4c74:	|      move.l d4,-(sp)
    4c76:	|      jsr 125be <__gtdf2>
    4c7c:	|      lea 16(sp),sp
    4c80:	|      tst.l d0
    4c82:	|  /-- bgt.s 4c86 <addSpeechLine+0x1d8>
}
    4c84:	+--|-- bra.s 4cc0 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    4c86:	|  \-> move.l 17a28 <winWidth>,d0
    4c8c:	|      move.l d0,-(sp)
    4c8e:	|      jsr 124c8 <__floatunsisf>
    4c94:	|      addq.l #4,sp
    4c96:	|      move.l d0,d1
    4c98:	|      move.l 16032 <cameraZoom>,d0
    4c9e:	|      move.l d0,-(sp)
    4ca0:	|      move.l d1,-(sp)
    4ca2:	|      jsr 1234c <__divsf3>
    4ca8:	|      addq.l #8,sp
    4caa:	|      move.l d0,-(sp)
    4cac:	|      jsr 12438 <__fixsfsi>
    4cb2:	|      addq.l #4,sp
    4cb4:	|      subq.l #5,d0
    4cb6:	|      sub.l 36(sp),d0
    4cba:	|      movea.l 60(sp),a0
    4cbe:	|      move.l d0,(a0)
}
    4cc0:	\----> nop
    4cc2:	       movem.l (sp)+,d2-d5/a6
    4cc6:	       lea 28(sp),sp
    4cca:	       rts

00004ccc <initSpeech>:


void initSpeech () {
    4ccc:	       lea -12(sp),sp
    4cd0:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    4cd2:	       moveq #20,d0
    4cd4:	       move.l d0,12(sp)
    4cd8:	       clr.l 8(sp)
    4cdc:	       move.l 17b28 <SysBase>,d0
    4ce2:	       movea.l d0,a6
    4ce4:	       move.l 12(sp),d0
    4ce8:	       move.l 8(sp),d1
    4cec:	       jsr -684(a6)
    4cf0:	       move.l d0,4(sp)
    4cf4:	       move.l 4(sp),d0
    4cf8:	       move.l d0,17b72 <speech>
	if (speech) {
    4cfe:	       move.l 17b72 <speech>,d0
    4d04:	/----- beq.s 4d30 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    4d06:	|      movea.l 17b72 <speech>,a0
    4d0c:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    4d0e:	|      movea.l 17b72 <speech>,a0
    4d14:	|      clr.l 4(a0)
		speech -> speechY = 0;
    4d18:	|      movea.l 17b72 <speech>,a0
    4d1e:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    4d22:	|      movea.l 17b72 <speech>,a0
    4d28:	|      moveq #-1,d0
    4d2a:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    4d2e:	|  /-- bra.s 4d3e <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    4d30:	\--|-> pea 14f5a <incbin_player_end+0xe6>
    4d36:	   |   jsr 12048 <KPrintF>
    4d3c:	   |   addq.l #4,sp
}
    4d3e:	   \-> nop
    4d40:	       movea.l (sp)+,a6
    4d42:	       lea 12(sp),sp
    4d46:	       rts

00004d48 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    4d48:	       movea.l 17b72 <speech>,a0
    4d4e:	       move.l 4(a0),d0
    4d52:	/----- beq.s 4d60 <isThereAnySpeechGoingOn+0x18>
    4d54:	|      movea.l 17b72 <speech>,a0
    4d5a:	|      move.l 16(a0),d0
    4d5e:	|  /-- bra.s 4d62 <isThereAnySpeechGoingOn+0x1a>
    4d60:	\--|-> moveq #-1,d0
}
    4d62:	   \-> rts

00004d64 <killAllSpeech>:

void killAllSpeech () {
    4d64:	       lea -12(sp),sp
    4d68:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    4d6a:	       movea.l 17b72 <speech>,a0
    4d70:	       move.l 12(a0),d0
    4d74:	       moveq #-1,d1
    4d76:	       cmp.l d0,d1
    4d78:	   /-- beq.s 4d86 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    4d7a:	   |   movea.l 17b72 <speech>,a0
    4d80:	   |   moveq #-1,d0
    4d82:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    4d86:	   \-> movea.l 17b72 <speech>,a0
    4d8c:	       move.l (a0),d0
    4d8e:	/----- beq.w 4e1a <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    4d92:	|      movea.l 17b72 <speech>,a0
    4d98:	|      move.l (a0),d0
    4d9a:	|      lea -120(sp),sp
    4d9e:	|      move.l sp,d1
    4da0:	|      movea.l d0,a0
    4da2:	|      moveq #120,d0
    4da4:	|      move.l d0,-(sp)
    4da6:	|      move.l a0,-(sp)
    4da8:	|      move.l d1,-(sp)
    4daa:	|      jsr 11ffc <memcpy>
    4db0:	|      lea 12(sp),sp
    4db4:	|      jsr 685a <makeSilent>
    4dba:	|      lea 120(sp),sp
		speech -> currentTalker = NULL;
    4dbe:	|      movea.l 17b72 <speech>,a0
    4dc4:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    4dc6:	+----- bra.s 4e1a <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    4dc8:	|  /-> movea.l 17b72 <speech>,a0
    4dce:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    4dd4:	|  |   movea.l 17b72 <speech>,a0
    4dda:	|  |   movea.l 4(a0),a1
    4dde:	|  |   movea.l 17b72 <speech>,a0
    4de4:	|  |   move.l 4(a1),d0
    4de8:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    4dec:	|  |   movea.l 12(sp),a0
    4df0:	|  |   move.l (a0),8(sp)
    4df4:	|  |   move.l 17b28 <SysBase>,d0
    4dfa:	|  |   movea.l d0,a6
    4dfc:	|  |   movea.l 8(sp),a1
    4e00:	|  |   jsr -690(a6)
		FreeVec(killMe);
    4e04:	|  |   move.l 12(sp),4(sp)
    4e0a:	|  |   move.l 17b28 <SysBase>,d0
    4e10:	|  |   movea.l d0,a6
    4e12:	|  |   movea.l 4(sp),a1
    4e16:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    4e1a:	\--|-> movea.l 17b72 <speech>,a0
    4e20:	   |   move.l 4(a0),d0
    4e24:	   \-- bne.s 4dc8 <killAllSpeech+0x64>
	}
}
    4e26:	       nop
    4e28:	       nop
    4e2a:	       movea.l (sp)+,a6
    4e2c:	       lea 12(sp),sp
    4e30:	       rts

00004e32 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    4e32:	pea 2 <_start+0x2>
    4e36:	move.l 8(sp),-(sp)
    4e3a:	jsr 4f92 <setFrames>
    4e40:	addq.l #8,sp
}
    4e42:	nop
    4e44:	rts

00004e46 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    4e46:	       lea -52(sp),sp
    4e4a:	       move.l a6,-(sp)
    4e4c:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    4e4e:	       movea.l 64(sp),a0
    4e52:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    4e58:	       move.l 1601e <speechSpeed>,d0
    4e5e:	       move.l 68(sp),-(sp)
    4e62:	       move.l d0,-(sp)
    4e64:	       jsr a46 <putFloat>
    4e6a:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    4e6c:	       movea.l 64(sp),a0
    4e70:	       move.l 8(a0),d0
    4e74:	       move.l 68(sp),-(sp)
    4e78:	       move.l d0,-(sp)
    4e7a:	       jsr 8d0 <put2bytes>
    4e80:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    4e82:	       movea.l 64(sp),a0
    4e86:	       move.l 16(a0),d0
    4e8a:	       move.l 68(sp),-(sp)
    4e8e:	       move.l d0,-(sp)
    4e90:	       jsr 8d0 <put2bytes>
    4e96:	       addq.l #8,sp
		if (sS -> currentTalker) {
    4e98:	       movea.l 64(sp),a0
    4e9c:	       move.l (a0),d0
    4e9e:	   /-- beq.s 4ee2 <saveSpeech+0x9c>
			FPutC (fp, 1);
    4ea0:	   |   move.l 68(sp),40(sp)
    4ea6:	   |   moveq #1,d0
    4ea8:	   |   move.l d0,36(sp)
    4eac:	   |   move.l 17b30 <DOSBase>,d0
    4eb2:	   |   movea.l d0,a6
    4eb4:	   |   move.l 40(sp),d1
    4eb8:	   |   move.l 36(sp),d2
    4ebc:	   |   jsr -312(a6)
    4ec0:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    4ec4:	   |   movea.l 64(sp),a0
    4ec8:	   |   movea.l (a0),a0
    4eca:	   |   movea.l 102(a0),a0
    4ece:	   |   move.l 4(a0),d0
    4ed2:	   |   move.l 68(sp),-(sp)
    4ed6:	   |   move.l d0,-(sp)
    4ed8:	   |   jsr 8d0 <put2bytes>
    4ede:	   |   addq.l #8,sp
    4ee0:	/--|-- bra.s 4f5e <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    4ee2:	|  \-> move.l 68(sp),52(sp)
    4ee8:	|      clr.l 48(sp)
    4eec:	|      move.l 17b30 <DOSBase>,d0
    4ef2:	|      movea.l d0,a6
    4ef4:	|      move.l 52(sp),d1
    4ef8:	|      move.l 48(sp),d2
    4efc:	|      jsr -312(a6)
    4f00:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    4f04:	+----- bra.s 4f5e <saveSpeech+0x118>
			FPutC (fp, 1);
    4f06:	|  /-> move.l 68(sp),16(sp)
    4f0c:	|  |   moveq #1,d0
    4f0e:	|  |   move.l d0,12(sp)
    4f12:	|  |   move.l 17b30 <DOSBase>,d0
    4f18:	|  |   movea.l d0,a6
    4f1a:	|  |   move.l 16(sp),d1
    4f1e:	|  |   move.l 12(sp),d2
    4f22:	|  |   jsr -312(a6)
    4f26:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    4f2a:	|  |   movea.l 56(sp),a0
    4f2e:	|  |   move.l (a0),d0
    4f30:	|  |   move.l 68(sp),-(sp)
    4f34:	|  |   move.l d0,-(sp)
    4f36:	|  |   jsr bd8 <writeString>
    4f3c:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    4f3e:	|  |   movea.l 56(sp),a0
    4f42:	|  |   move.l 8(a0),d0
    4f46:	|  |   move.l 68(sp),-(sp)
    4f4a:	|  |   move.l d0,-(sp)
    4f4c:	|  |   jsr 8d0 <put2bytes>
    4f52:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    4f54:	|  |   movea.l 56(sp),a0
    4f58:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    4f5e:	\--|-> tst.l 56(sp)
    4f62:	   \-- bne.s 4f06 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    4f64:	       move.l 68(sp),28(sp)
    4f6a:	       clr.l 24(sp)
    4f6e:	       move.l 17b30 <DOSBase>,d0
    4f74:	       movea.l d0,a6
    4f76:	       move.l 28(sp),d1
    4f7a:	       move.l 24(sp),d2
    4f7e:	       jsr -312(a6)
    4f82:	       move.l d0,20(sp)
}
    4f86:	       nop
    4f88:	       move.l (sp)+,d2
    4f8a:	       movea.l (sp)+,a6
    4f8c:	       lea 52(sp),sp
    4f90:	       rts

00004f92 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    4f92:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    4f94:	movea.l 8(sp),a0
    4f98:	movea.l 68(a0),a0
    4f9c:	move.l (a0),d2
    4f9e:	movea.l 8(sp),a0
    4fa2:	movea.l 68(a0),a0
    4fa6:	move.l 4(a0),d0
    4faa:	move.l 12(sp),-(sp)
    4fae:	move.l d0,-(sp)
    4fb0:	jsr 129fa <__mulsi3>
    4fb6:	addq.l #8,sp
    4fb8:	move.l d0,d1
    4fba:	movea.l 8(sp),a0
    4fbe:	move.l 94(a0),d0
    4fc2:	add.l d1,d0
    4fc4:	add.l d0,d0
    4fc6:	add.l d0,d0
    4fc8:	movea.l d2,a0
    4fca:	adda.l d0,a0
    4fcc:	move.l (a0),d0
    4fce:	movea.l 8(sp),a0
    4fd2:	move.l d0,60(a0)
}
    4fd6:	nop
    4fd8:	move.l (sp)+,d2
    4fda:	rts

00004fdc <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    4fdc:	       lea -20(sp),sp
    4fe0:	       move.l d2,-(sp)
    4fe2:	       move.l 40(sp),d0
    4fe6:	       move.w d0,d0
    4fe8:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    4fec:	       movea.l 17b72 <speech>,a0
    4ff2:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    4ff8:	       move.l 32(sp),-(sp)
    4ffc:	       jsr 6344 <findPerson>
    5002:	       addq.l #4,sp
    5004:	       move.l d0,16(sp)
    if (thisPerson) {
    5008:	   /-- beq.s 502e <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    500a:	   |   movea.w 6(sp),a0
    500e:	   |   move.l a0,-(sp)
    5010:	   |   move.l 40(sp),-(sp)
    5014:	   |   move.l 24(sp),-(sp)
    5018:	   |   move.l 40(sp),-(sp)
    501c:	   |   jsr 50f4 <wrapSpeechPerson>
    5022:	   |   lea 16(sp),sp
    5026:	   |   move.l d0,20(sp)
    502a:	/--|-- bra.w 50e8 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    502e:	|  \-> move.l 32(sp),-(sp)
    5032:	|      jsr 10abe <getRegionForObject>
    5038:	|      addq.l #4,sp
    503a:	|      move.l d0,12(sp)
        if (thisRegion) {
    503e:	|  /-- beq.s 50aa <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    5040:	|  |   movea.l 12(sp),a0
    5044:	|  |   movea.l 28(a0),a0
    5048:	|  |   move.l 28(a0),d0
    504c:	|  |   movea.l 12(sp),a0
    5050:	|  |   movea.l 4(a0),a1
    5054:	|  |   movea.l 12(sp),a0
    5058:	|  |   movea.l 28(a0),a0
    505c:	|  |   move.l 20(a0),d1
    5060:	|  |   movea.l a1,a0
    5062:	|  |   suba.l d1,a0
    5064:	|  |   move.l 17bd0 <cameraY>,d1
    506a:	|  |   movea.l a0,a1
    506c:	|  |   suba.l d1,a1
    506e:	|  |   movea.l 12(sp),a0
    5072:	|  |   move.l (a0),d2
    5074:	|  |   movea.l 12(sp),a0
    5078:	|  |   move.l 8(a0),d1
    507c:	|  |   add.l d2,d1
    507e:	|  |   move.l d1,d2
    5080:	|  |   asr.l #1,d2
    5082:	|  |   move.l 17bcc <cameraX>,d1
    5088:	|  |   movea.l d2,a0
    508a:	|  |   suba.l d1,a0
    508c:	|  |   move.l 36(sp),-(sp)
    5090:	|  |   move.l d0,-(sp)
    5092:	|  |   move.l a1,-(sp)
    5094:	|  |   move.l a0,-(sp)
    5096:	|  |   move.l 44(sp),-(sp)
    509a:	|  |   jsr 5212 <wrapSpeechXY>
    50a0:	|  |   lea 20(sp),sp
    50a4:	|  |   move.l d0,20(sp)
    50a8:	+--|-- bra.s 50e8 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    50aa:	|  \-> move.l 32(sp),-(sp)
    50ae:	|      jsr 8f3a <findObjectType>
    50b4:	|      addq.l #4,sp
    50b6:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    50ba:	|      movea.l 8(sp),a0
    50be:	|      move.l 28(a0),d1
    50c2:	|      move.l 17a28 <winWidth>,d0
    50c8:	|      lsr.l #1,d0
    50ca:	|      move.l 36(sp),-(sp)
    50ce:	|      move.l d1,-(sp)
    50d0:	|      pea a <_start+0xa>
    50d4:	|      move.l d0,-(sp)
    50d6:	|      move.l 44(sp),-(sp)
    50da:	|      jsr 5212 <wrapSpeechXY>
    50e0:	|      lea 20(sp),sp
    50e4:	|      move.l d0,20(sp)
        }
    }
    return i;
    50e8:	\----> move.l 20(sp),d0
}
    50ec:	       move.l (sp)+,d2
    50ee:	       lea 20(sp),sp
    50f2:	       rts

000050f4 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    50f4:	    subq.l #8,sp
    50f6:	    movem.l d2-d4,-(sp)
    50fa:	    move.l 36(sp),d0
    50fe:	    move.w d0,d0
    5100:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    5104:	    movea.l 28(sp),a0
    5108:	    movea.l 102(a0),a0
    510c:	    move.l 28(a0),d2
    5110:	    movea.l 28(sp),a0
    5114:	    move.l 4(a0),d3
    5118:	    move.l 17bd0 <cameraY>,d0
    511e:	    move.l d0,-(sp)
    5120:	    jsr 124a0 <__floatsisf>
    5126:	    addq.l #4,sp
    5128:	    move.l d0,-(sp)
    512a:	    move.l d3,-(sp)
    512c:	    jsr 12794 <__subsf3>
    5132:	    addq.l #8,sp
    5134:	    move.l d0,d3
    5136:	    movea.l 28(sp),a0
    513a:	    move.l 20(a0),d4
    513e:	    movea.l 28(sp),a0
    5142:	    move.l 8(a0),d1
    5146:	    movea.l 28(sp),a0
    514a:	    move.l 12(a0),d0
    514e:	    sub.l d0,d1
    5150:	    move.l d1,-(sp)
    5152:	    jsr 124a0 <__floatsisf>
    5158:	    addq.l #4,sp
    515a:	    move.l d0,-(sp)
    515c:	    move.l d4,-(sp)
    515e:	    jsr 12552 <__mulsf3>
    5164:	    addq.l #8,sp
    5166:	    move.l d0,-(sp)
    5168:	    move.l d3,-(sp)
    516a:	    jsr 12794 <__subsf3>
    5170:	    addq.l #8,sp
    5172:	    move.l d0,d3
    5174:	    movea.l 28(sp),a0
    5178:	    movea.l 102(a0),a0
    517c:	    move.l 20(a0),d0
    5180:	    move.l d0,-(sp)
    5182:	    jsr 124a0 <__floatsisf>
    5188:	    addq.l #4,sp
    518a:	    move.l d0,-(sp)
    518c:	    move.l d3,-(sp)
    518e:	    jsr 12794 <__subsf3>
    5194:	    addq.l #8,sp
    5196:	    move.l d0,-(sp)
    5198:	    jsr 12438 <__fixsfsi>
    519e:	    addq.l #4,sp
    51a0:	    move.l d0,d4
    51a2:	    movea.l 28(sp),a0
    51a6:	    move.l (a0),d3
    51a8:	    move.l 17bcc <cameraX>,d0
    51ae:	    move.l d0,-(sp)
    51b0:	    jsr 124a0 <__floatsisf>
    51b6:	    addq.l #4,sp
    51b8:	    move.l d0,-(sp)
    51ba:	    move.l d3,-(sp)
    51bc:	    jsr 12794 <__subsf3>
    51c2:	    addq.l #8,sp
    51c4:	    move.l d0,-(sp)
    51c6:	    jsr 12438 <__fixsfsi>
    51cc:	    addq.l #4,sp
    51ce:	    move.l 32(sp),-(sp)
    51d2:	    move.l d2,-(sp)
    51d4:	    move.l d4,-(sp)
    51d6:	    move.l d0,-(sp)
    51d8:	    move.l 40(sp),-(sp)
    51dc:	    jsr 5212 <wrapSpeechXY>
    51e2:	    lea 20(sp),sp
    51e6:	    move.l d0,16(sp)
	if (animPerson) {
    51ea:	    tst.w 14(sp)
    51ee:	/-- beq.s 5206 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    51f0:	|   move.l 28(sp),-(sp)
    51f4:	|   jsr 4e32 <makeTalker>
    51fa:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    51fc:	|   movea.l 17b72 <speech>,a0
    5202:	|   move.l 28(sp),(a0)
	}
	return i;
    5206:	\-> move.l 16(sp),d0
}
    520a:	    movem.l (sp)+,d2-d4
    520e:	    addq.l #8,sp
    5210:	    rts

00005212 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    5212:	                   lea -16(sp),sp
    5216:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    521a:	                   clr.l 16(sp)
    killAllSpeech();
    521e:	                   jsr 4d64 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    5224:	                   move.l 36(sp),-(sp)
    5228:	                   jsr f4e0 <strlen>
    522e:	                   addq.l #4,sp
    5230:	                   movea.l d0,a0
    5232:	                   lea 20(a0),a0
    5236:	                   move.l a0,-(sp)
    5238:	                   jsr 124c8 <__floatunsisf>
    523e:	                   addq.l #4,sp
    5240:	                   move.l d0,d1
    5242:	                   move.l 1601e <speechSpeed>,d0
    5248:	                   move.l d0,-(sp)
    524a:	                   move.l d1,-(sp)
    524c:	                   jsr 12552 <__mulsf3>
    5252:	                   addq.l #8,sp
    5254:	                   move.l d0,-(sp)
    5256:	                   jsr 12438 <__fixsfsi>
    525c:	                   addq.l #4,sp
    525e:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    5262:	               /-- bgt.s 526a <wrapSpeechXY+0x58>
    5264:	               |   moveq #1,d0
    5266:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    526a:	               \-> moveq #-1,d1
    526c:	                   cmp.l 52(sp),d1
    5270:	               /-- beq.s 52b0 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    5272:	               |   move.l 17be0 <speechMode>,d0
    5278:	               +-- ble.s 52b0 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    527a:	               |   clr.l -(sp)
    527c:	               |   move.l 56(sp),-(sp)
    5280:	               |   jsr 8c76 <startSound>
    5286:	               |   addq.l #8,sp
    5288:	               |   tst.w d0
    528a:	               +-- beq.s 52b0 <wrapSpeechXY+0x9e>
                speechTime = -10;
    528c:	               |   moveq #-10,d0
    528e:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    5292:	               |   movea.l 17b72 <speech>,a0
    5298:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    529e:	               |   move.l 17be0 <speechMode>,d0
    52a4:	               |   moveq #2,d1
    52a6:	               |   cmp.l d0,d1
    52a8:	               +-- bne.s 52b0 <wrapSpeechXY+0x9e>
    52aa:	               |   moveq #-10,d0
    52ac:	/--------------|-- bra.w 5536 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    52b0:	|              \-> movea.l 17b72 <speech>,a0
    52b6:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    52bc:	|     /----------- bra.w 5370 <wrapSpeechXY+0x15e>
        a = wrap;
    52c0:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    52c6:	|  |  |        /-- bra.s 52d6 <wrapSpeechXY+0xc4>
            a--;
    52c8:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    52cc:	|  |  |  |     +-- bne.s 52d6 <wrapSpeechXY+0xc4>
                a = wrap;
    52ce:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    52d4:	|  |  |  |  /--|-- bra.s 52e8 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    52d6:	|  |  |  |  |  \-> move.l 28(sp),d0
    52da:	|  |  |  |  |      movea.l 36(sp),a0
    52de:	|  |  |  |  |      adda.l d0,a0
    52e0:	|  |  |  |  |      move.b (a0),d0
    52e2:	|  |  |  |  |      cmpi.b #32,d0
    52e6:	|  |  |  \--|----- bne.s 52c8 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    52e8:	|  |  |     \----> move.l 28(sp),d0
    52ec:	|  |  |            movea.l 36(sp),a0
    52f0:	|  |  |            adda.l d0,a0
    52f2:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    52f4:	|  |  |            lea 16(sp),a0
    52f8:	|  |  |            move.l a0,-(sp)
    52fa:	|  |  |            move.l 44(sp),-(sp)
    52fe:	|  |  |            move.l 44(sp),-(sp)
    5302:	|  |  |            jsr 4aae <addSpeechLine>
    5308:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    530c:	|  |  |            move.l 28(sp),d0
    5310:	|  |  |            movea.l 36(sp),a0
    5314:	|  |  |            adda.l d0,a0
    5316:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    531a:	|  |  |            move.l 28(sp),d0
    531e:	|  |  |            addq.l #1,d0
    5320:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    5324:	|  |  |            move.l 44(sp),-(sp)
    5328:	|  |  |            jsr 124a0 <__floatsisf>
    532e:	|  |  |            addq.l #4,sp
    5330:	|  |  |            move.l d0,d2
    5332:	|  |  |            move.l 17c06 <fontHeight>,d0
    5338:	|  |  |            move.l d0,-(sp)
    533a:	|  |  |            jsr 124a0 <__floatsisf>
    5340:	|  |  |            addq.l #4,sp
    5342:	|  |  |            move.l d0,d1
    5344:	|  |  |            move.l 16032 <cameraZoom>,d0
    534a:	|  |  |            move.l d0,-(sp)
    534c:	|  |  |            move.l d1,-(sp)
    534e:	|  |  |            jsr 1234c <__divsf3>
    5354:	|  |  |            addq.l #8,sp
    5356:	|  |  |            move.l d0,-(sp)
    5358:	|  |  |            move.l d2,-(sp)
    535a:	|  |  |            jsr 12794 <__subsf3>
    5360:	|  |  |            addq.l #8,sp
    5362:	|  |  |            move.l d0,-(sp)
    5364:	|  |  |            jsr 12438 <__fixsfsi>
    536a:	|  |  |            addq.l #4,sp
    536c:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    5370:	|  |  \----------> move.l 36(sp),-(sp)
    5374:	|  |               jsr f4e0 <strlen>
    537a:	|  |               addq.l #4,sp
    537c:	|  |               move.l d0,d1
    537e:	|  |               move.l 48(sp),d0
    5382:	|  |               cmp.l d1,d0
    5384:	|  \-------------- bcs.w 52c0 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    5388:	|                  lea 16(sp),a0
    538c:	|                  move.l a0,-(sp)
    538e:	|                  move.l 44(sp),-(sp)
    5392:	|                  move.l 44(sp),-(sp)
    5396:	|                  jsr 4aae <addSpeechLine>
    539c:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    53a0:	|                  move.l 44(sp),-(sp)
    53a4:	|                  jsr 124a0 <__floatsisf>
    53aa:	|                  addq.l #4,sp
    53ac:	|                  move.l d0,d2
    53ae:	|                  move.l 17c06 <fontHeight>,d0
    53b4:	|                  move.l d0,-(sp)
    53b6:	|                  jsr 124a0 <__floatsisf>
    53bc:	|                  addq.l #4,sp
    53be:	|                  move.l d0,d1
    53c0:	|                  move.l 16032 <cameraZoom>,d0
    53c6:	|                  move.l d0,-(sp)
    53c8:	|                  move.l d1,-(sp)
    53ca:	|                  jsr 1234c <__divsf3>
    53d0:	|                  addq.l #8,sp
    53d2:	|                  move.l d0,-(sp)
    53d4:	|                  move.l d2,-(sp)
    53d6:	|                  jsr 12794 <__subsf3>
    53dc:	|                  addq.l #8,sp
    53de:	|                  move.l d0,-(sp)
    53e0:	|                  jsr 12438 <__fixsfsi>
    53e6:	|                  addq.l #4,sp
    53e8:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    53ec:	|              /-- bpl.s 540a <wrapSpeechXY+0x1f8>
    53ee:	|              |   movea.l 17b72 <speech>,a0
    53f4:	|              |   move.l 8(a0),d0
    53f8:	|              |   movea.l 17b72 <speech>,a0
    53fe:	|              |   sub.l 44(sp),d0
    5402:	|              |   move.l d0,8(a0)
    5406:	|           /--|-- bra.w 54f8 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    540a:	|           |  \-> movea.l 17b72 <speech>,a0
    5410:	|           |      move.l 8(a0),d0
    5414:	|           |      move.l d0,-(sp)
    5416:	|           |      jsr 124a0 <__floatsisf>
    541c:	|           |      addq.l #4,sp
    541e:	|           |      move.l d0,d2
    5420:	|           |      move.l 17bd0 <cameraY>,d0
    5426:	|           |      move.l d0,-(sp)
    5428:	|           |      jsr 124a0 <__floatsisf>
    542e:	|           |      addq.l #4,sp
    5430:	|           |      move.l d0,d3
    5432:	|           |      move.l 17a2c <winHeight>,d4
    5438:	|           |      move.l 17c06 <fontHeight>,d0
    543e:	|           |      pea 3 <_start+0x3>
    5442:	|           |      move.l d0,-(sp)
    5444:	|           |      jsr 12a78 <__divsi3>
    544a:	|           |      addq.l #8,sp
    544c:	|           |      move.l d4,d1
    544e:	|           |      sub.l d0,d1
    5450:	|           |      move.l d1,-(sp)
    5452:	|           |      jsr 124c8 <__floatunsisf>
    5458:	|           |      addq.l #4,sp
    545a:	|           |      move.l d0,d1
    545c:	|           |      move.l 16032 <cameraZoom>,d0
    5462:	|           |      move.l d0,-(sp)
    5464:	|           |      move.l d1,-(sp)
    5466:	|           |      jsr 1234c <__divsf3>
    546c:	|           |      addq.l #8,sp
    546e:	|           |      move.l d0,-(sp)
    5470:	|           |      move.l d3,-(sp)
    5472:	|           |      jsr 12252 <__addsf3>
    5478:	|           |      addq.l #8,sp
    547a:	|           |      move.l d0,-(sp)
    547c:	|           |      move.l d2,-(sp)
    547e:	|           |      jsr 1260c <__gtsf2>
    5484:	|           |      addq.l #8,sp
    5486:	|           |      tst.l d0
    5488:	|           +----- ble.s 54f8 <wrapSpeechXY+0x2e6>
    548a:	|           |      move.l 17bd0 <cameraY>,d0
    5490:	|           |      move.l d0,-(sp)
    5492:	|           |      jsr 124a0 <__floatsisf>
    5498:	|           |      addq.l #4,sp
    549a:	|           |      move.l d0,d2
    549c:	|           |      move.l 17a2c <winHeight>,d3
    54a2:	|           |      move.l 17c06 <fontHeight>,d0
    54a8:	|           |      pea 3 <_start+0x3>
    54ac:	|           |      move.l d0,-(sp)
    54ae:	|           |      jsr 12a78 <__divsi3>
    54b4:	|           |      addq.l #8,sp
    54b6:	|           |      move.l d3,d1
    54b8:	|           |      sub.l d0,d1
    54ba:	|           |      move.l d1,-(sp)
    54bc:	|           |      jsr 124c8 <__floatunsisf>
    54c2:	|           |      addq.l #4,sp
    54c4:	|           |      move.l d0,d1
    54c6:	|           |      move.l 16032 <cameraZoom>,d0
    54cc:	|           |      move.l d0,-(sp)
    54ce:	|           |      move.l d1,-(sp)
    54d0:	|           |      jsr 1234c <__divsf3>
    54d6:	|           |      addq.l #8,sp
    54d8:	|           |      move.l d0,-(sp)
    54da:	|           |      move.l d2,-(sp)
    54dc:	|           |      jsr 12252 <__addsf3>
    54e2:	|           |      addq.l #8,sp
    54e4:	|           |      movea.l 17b72 <speech>,a2
    54ea:	|           |      move.l d0,-(sp)
    54ec:	|           |      jsr 12438 <__fixsfsi>
    54f2:	|           |      addq.l #4,sp
    54f4:	|           |      move.l d0,8(a2)

    if (offset) {
    54f8:	|           \----> move.l 16(sp),d0
    54fc:	|        /-------- beq.s 5532 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    54fe:	|        |         movea.l 17b72 <speech>,a0
    5504:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    550a:	|        |     /-- bra.s 552c <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    550c:	|        |  /--|-> movea.l 20(sp),a0
    5510:	|        |  |  |   move.l 8(a0),d1
    5514:	|        |  |  |   move.l 16(sp),d0
    5518:	|        |  |  |   add.l d1,d0
    551a:	|        |  |  |   movea.l 20(sp),a0
    551e:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    5522:	|        |  |  |   movea.l 20(sp),a0
    5526:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    552c:	|        |  |  \-> tst.l 20(sp)
    5530:	|        |  \----- bne.s 550c <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    5532:	|        \-------> move.l 24(sp),d0
}
    5536:	\----------------> movem.l (sp)+,d2-d4/a2
    553a:	                   lea 16(sp),sp
    553e:	                   rts

00005540 <loadSpriteBank>:
#include <exec/types.h>

#include "sprites.h"
#include "support/gcc8_c_support.h"

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere, BOOL isFont) {
    5540:	subq.l #4,sp
    5542:	move.l 16(sp),d0
    5546:	move.w d0,d0
    5548:	move.w d0,2(sp)
    KPrintF("loadSpriteBank: Not implemented"); //Amiga Todo
    554c:	pea 14f97 <incbin_player_end+0x123>
    5552:	jsr 12048 <KPrintF>
    5558:	addq.l #4,sp
    return TRUE;
    555a:	moveq #1,d0
}    
    555c:	addq.l #4,sp
    555e:	rts

00005560 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    5560:	    move.l 4(sp),d0
    5564:	/-- bpl.s 5568 <TF_abs+0x8>
    5566:	|   neg.l d0
}
    5568:	\-> rts

0000556a <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    556a:	             lea -28(sp),sp
    556e:	             move.l a6,-(sp)
    5570:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    5572:	             moveq #120,d0
    5574:	             move.l d0,28(sp)
    5578:	             clr.l 24(sp)
    557c:	             move.l 17b28 <SysBase>,d0
    5582:	             movea.l d0,a6
    5584:	             move.l 28(sp),d0
    5588:	             move.l 24(sp),d1
    558c:	             jsr -684(a6)
    5590:	             move.l d0,20(sp)
    5594:	             move.l 20(sp),d0
    5598:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    559c:	         /-- bne.s 55a4 <addPerson+0x3a>
    559e:	         |   clr.w d0
    55a0:	/--------|-- bra.w 57d2 <addPerson+0x268>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    55a4:	|        \-> move.l 48(sp),-(sp)
    55a8:	|            jsr 902a <loadObjectType>
    55ae:	|            addq.l #4,sp
    55b0:	|            movea.l 16(sp),a0
    55b4:	|            move.l d0,102(a0)
    newPerson->scale = 1;
    55b8:	|            movea.l 16(sp),a0
    55bc:	|            move.l #1065353216,20(a0)
    newPerson->extra = 0;
    55c4:	|            movea.l 16(sp),a0
    55c8:	|            clr.l 106(a0)
    newPerson->continueAfterWalking = NULL;
    55cc:	|            movea.l 16(sp),a0
    55d0:	|            clr.l 56(a0)
    moveAndScale(newPerson, x, y);
    55d4:	|            move.l 44(sp),-(sp)
    55d8:	|            jsr 124a0 <__floatsisf>
    55de:	|            addq.l #4,sp
    55e0:	|            move.l d0,d2
    55e2:	|            move.l 40(sp),-(sp)
    55e6:	|            jsr 124a0 <__floatsisf>
    55ec:	|            addq.l #4,sp
    55ee:	|            move.l d2,-(sp)
    55f0:	|            move.l d0,-(sp)
    55f2:	|            move.l 24(sp),-(sp)
    55f6:	|            jsr 6a8c <moveAndScale>
    55fc:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    5600:	|            movea.l 16(sp),a0
    5604:	|            clr.l 72(a0)
    newPerson->walkToX = x;
    5608:	|            movea.l 16(sp),a0
    560c:	|            move.l 40(sp),28(a0)
    newPerson->walkToY = y;
    5612:	|            movea.l 16(sp),a0
    5616:	|            move.l 44(sp),32(a0)
    newPerson->walking = FALSE;
    561c:	|            movea.l 16(sp),a0
    5620:	|            clr.w 52(a0)
    newPerson->spinning = FALSE;
    5624:	|            movea.l 16(sp),a0
    5628:	|            clr.w 54(a0)
    newPerson->show = TRUE;
    562c:	|            movea.l 16(sp),a0
    5630:	|            move.w #1,92(a0)
    newPerson->direction = 0;
    5636:	|            movea.l 16(sp),a0
    563a:	|            clr.l 94(a0)
    newPerson->angle = 180;
    563e:	|            movea.l 16(sp),a0
    5642:	|            move.l #180,80(a0)
    newPerson->wantAngle = 180;
    564a:	|            movea.l 16(sp),a0
    564e:	|            move.l #180,84(a0)
    newPerson->angleOffset = 0;
    5656:	|            movea.l 16(sp),a0
    565a:	|            clr.l 88(a0)
    newPerson->floaty = 0;
    565e:	|            movea.l 16(sp),a0
    5662:	|            clr.l 12(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    5666:	|            movea.l 16(sp),a0
    566a:	|            movea.l 102(a0),a0
    566e:	|            move.l 24(a0),d0
    5672:	|            movea.l 16(sp),a0
    5676:	|            move.l d0,16(a0)
    newPerson->myAnim = NULL;
    567a:	|            movea.l 16(sp),a0
    567e:	|            clr.l 60(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    5682:	|            movea.l 16(sp),a0
    5686:	|            movea.l 102(a0),a0
    568a:	|            move.l 32(a0),d0
    568e:	|            movea.l 16(sp),a0
    5692:	|            move.l d0,110(a0)
    newPerson->r = 0;
    5696:	|            movea.l 16(sp),a0
    569a:	|            clr.b 114(a0)
    newPerson->g = 0;
    569e:	|            movea.l 16(sp),a0
    56a2:	|            clr.b 115(a0)
    newPerson->b = 0;
    56a6:	|            movea.l 16(sp),a0
    56aa:	|            clr.b 116(a0)
    newPerson->colourmix = 0;
    56ae:	|            movea.l 16(sp),a0
    56b2:	|            clr.b 117(a0)
    newPerson->transparency = 0;
    56b6:	|            movea.l 16(sp),a0
    56ba:	|            clr.b 118(a0)
    newPerson->myPersona = p;
    56be:	|            movea.l 16(sp),a0
    56c2:	|            move.l 52(sp),68(a0)

    setFrames(newPerson, ANI_STAND);
    56c8:	|            clr.l -(sp)
    56ca:	|            move.l 20(sp),-(sp)
    56ce:	|            jsr 4f92 <setFrames>
    56d4:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    56d6:	|            movea.l 52(sp),a0
    56da:	|            movea.l (a0),a0
    56dc:	|            movea.l (a0),a0
    56de:	|            movea.l 4(a0),a0
    56e2:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    56e6:	|     /----- bpl.s 56f0 <addPerson+0x186>
    56e8:	|     |      move.l 12(sp),d0
    56ec:	|     |      neg.l d0
    56ee:	|     |  /-- bra.s 56f2 <addPerson+0x188>
    56f0:	|     \--|-> moveq #1,d0
    56f2:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    56f6:	|            movea.l 52(sp),a0
    56fa:	|            movea.l (a0),a0
    56fc:	|            movea.l (a0),a0
    56fe:	|            movea.l (a0),a0
    5700:	|            move.l 8(a0),d0
    5704:	|            cmp.l 8(sp),d0
    5708:	|     /----- bgt.s 573a <addPerson+0x1d0>
        if (fNumSigned < 0) {
    570a:	|     |      tst.l 12(sp)
    570e:	|     |  /-- bge.s 571c <addPerson+0x1b2>
            newPerson->height = 5;
    5710:	|     |  |   movea.l 16(sp),a0
    5714:	|     |  |   moveq #5,d1
    5716:	|     |  |   move.l d1,8(a0)
    571a:	|  /--|--|-- bra.s 5764 <addPerson+0x1fa>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    571c:	|  |  |  \-> movea.l 52(sp),a0
    5720:	|  |  |      movea.l (a0),a0
    5722:	|  |  |      movea.l (a0),a0
    5724:	|  |  |      movea.l (a0),a0
    5726:	|  |  |      movea.l 16(a0),a0
    572a:	|  |  |      move.l 12(a0),d0
    572e:	|  |  |      addq.l #5,d0
    5730:	|  |  |      movea.l 16(sp),a0
    5734:	|  |  |      move.l d0,8(a0)
    5738:	|  +--|----- bra.s 5764 <addPerson+0x1fa>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    573a:	|  |  \----> movea.l 52(sp),a0
    573e:	|  |         movea.l (a0),a0
    5740:	|  |         movea.l (a0),a0
    5742:	|  |         movea.l (a0),a0
    5744:	|  |         movea.l 16(a0),a0
    5748:	|  |         move.l 8(sp),d1
    574c:	|  |         move.l d1,d0
    574e:	|  |         add.l d0,d0
    5750:	|  |         add.l d1,d0
    5752:	|  |         lsl.l #3,d0
    5754:	|  |         adda.l d0,a0
    5756:	|  |         move.l 12(a0),d0
    575a:	|  |         addq.l #5,d0
    575c:	|  |         movea.l 16(sp),a0
    5760:	|  |         move.l d0,8(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    5764:	|  \-------> move.l #97142,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    576c:	|        /-- bra.s 577c <addPerson+0x212>
        changethat = &((*changethat)->next);
    576e:	|     /--|-> movea.l 32(sp),a0
    5772:	|     |  |   move.l (a0),d0
    5774:	|     |  |   moveq #24,d1
    5776:	|     |  |   add.l d0,d1
    5778:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    577c:	|     |  \-> movea.l 32(sp),a0
    5780:	|     |      move.l (a0),d0
    5782:	|     |  /-- beq.s 57aa <addPerson+0x240>
    5784:	|     |  |   movea.l 32(sp),a0
    5788:	|     |  |   movea.l (a0),a0
    578a:	|     |  |   move.l 4(a0),d2
    578e:	|     |  |   move.l 44(sp),-(sp)
    5792:	|     |  |   jsr 124a0 <__floatsisf>
    5798:	|     |  |   addq.l #4,sp
    579a:	|     |  |   move.l d0,-(sp)
    579c:	|     |  |   move.l d2,-(sp)
    579e:	|     |  |   jsr 126c6 <__ltsf2>
    57a4:	|     |  |   addq.l #8,sp
    57a6:	|     |  |   tst.l d0
    57a8:	|     \--|-- blt.s 576e <addPerson+0x204>
    }

    newPerson->next = (*changethat);
    57aa:	|        \-> movea.l 32(sp),a0
    57ae:	|            move.l (a0),d0
    57b0:	|            movea.l 16(sp),a0
    57b4:	|            move.l d0,24(a0)
    (*changethat) = newPerson;
    57b8:	|            movea.l 32(sp),a0
    57bc:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    57c0:	|            movea.l 16(sp),a0
    57c4:	|            move.l 102(a0),d0
    57c8:	|            sne d0
    57ca:	|            neg.b d0
    57cc:	|            move.b d0,d0
    57ce:	|            andi.w #255,d0
}
    57d2:	\----------> move.l (sp)+,d2
    57d4:	             movea.l (sp)+,a6
    57d6:	             lea 28(sp),sp
    57da:	             rts

000057dc <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    57dc:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    57de:	       move.l 8(sp),-(sp)
    57e2:	       jsr 6344 <findPerson>
    57e8:	       addq.l #4,sp
    57ea:	       move.l d0,(sp)
    if (moveMe) {
    57ec:	/----- beq.s 5820 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    57ee:	|      movea.l (sp),a0
    57f0:	|      move.l 56(a0),d0
    57f4:	|  /-- beq.s 5806 <animatePerson+0x2a>
    57f6:	|  |   movea.l (sp),a0
    57f8:	|  |   move.l 56(a0),d0
    57fc:	|  |   move.l d0,-(sp)
    57fe:	|  |   jsr 1b06 <abortFunction>
    5804:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    5806:	|  \-> movea.l (sp),a0
    5808:	|      clr.l 56(a0)
        moveMe -> walking = FALSE;
    580c:	|      movea.l (sp),a0
    580e:	|      clr.w 52(a0)
        moveMe -> spinning = FALSE;
    5812:	|      movea.l (sp),a0
    5814:	|      clr.w 54(a0)
        moveMe -> myAnim = fram;
    5818:	|      movea.l (sp),a0
    581a:	|      move.l 12(sp),60(a0)
    }
}
    5820:	\----> nop
    5822:	       addq.l #4,sp
    5824:	       rts

00005826 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    5826:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    5828:	       move.l 8(sp),-(sp)
    582c:	       jsr 6344 <findPerson>
    5832:	       addq.l #4,sp
    5834:	       move.l d0,(sp)
    if (moveMe) {
    5836:	/----- beq.s 5878 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    5838:	|      movea.l (sp),a0
    583a:	|      clr.w 54(a0)
        moveMe -> myPersona = per;
    583e:	|      movea.l (sp),a0
    5840:	|      move.l 12(sp),68(a0)
        rethinkAngle(moveMe);
    5846:	|      move.l (sp),-(sp)
    5848:	|      jsr 6bd6 <rethinkAngle>
    584e:	|      addq.l #4,sp
        if (moveMe->walking) {
    5850:	|      movea.l (sp),a0
    5852:	|      move.w 52(a0),d0
    5856:	|  /-- beq.s 586a <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    5858:	|  |   pea 1 <_start+0x1>
    585c:	|  |   move.l 4(sp),-(sp)
    5860:	|  |   jsr 4f92 <setFrames>
    5866:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    5868:	+--|-- bra.s 5878 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    586a:	|  \-> clr.l -(sp)
    586c:	|      move.l 4(sp),-(sp)
    5870:	|      jsr 4f92 <setFrames>
    5876:	|      addq.l #8,sp
}
    5878:	\----> nop
    587a:	       addq.l #4,sp
    587c:	       rts

0000587e <copyAnim>:


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    587e:	             lea -36(sp),sp
    5882:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    5884:	             movea.l 44(sp),a0
    5888:	             move.l 8(a0),32(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    588e:	             moveq #12,d0
    5890:	             move.l d0,28(sp)
    5894:	             clr.l 24(sp)
    5898:	             move.l 17b28 <SysBase>,d0
    589e:	             movea.l d0,a6
    58a0:	             move.l 28(sp),d0
    58a4:	             move.l 24(sp),d1
    58a8:	             jsr -684(a6)
    58ac:	             move.l d0,20(sp)
    58b0:	             move.l 20(sp),d0
    58b4:	             move.l d0,16(sp)
	if (!(newAnim)) {
    58b8:	         /-- bne.s 58ce <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    58ba:	         |   pea 14fb7 <incbin_player_end+0x143>
    58c0:	         |   jsr 12048 <KPrintF>
    58c6:	         |   addq.l #4,sp
		return NULL;
    58c8:	         |   moveq #0,d0
    58ca:	/--------|-- bra.w 5a10 <copyAnim+0x192>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    58ce:	|        \-> movea.l 44(sp),a0
    58d2:	|            move.l (a0),d0
    58d4:	|            movea.l 16(sp),a0
    58d8:	|            move.l d0,(a0)
	newAnim -> numFrames		= num;
    58da:	|            movea.l 16(sp),a0
    58de:	|            move.l 32(sp),8(a0)

	if (num) {
    58e4:	|  /-------- beq.w 5a04 <copyAnim+0x186>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    58e8:	|  |         move.l 32(sp),d1
    58ec:	|  |         move.l d1,d0
    58ee:	|  |         add.l d0,d0
    58f0:	|  |         add.l d1,d0
    58f2:	|  |         add.l d0,d0
    58f4:	|  |         add.l d0,d0
    58f6:	|  |         move.l d0,12(sp)
    58fa:	|  |         clr.l 8(sp)
    58fe:	|  |         move.l 17b28 <SysBase>,d0
    5904:	|  |         movea.l d0,a6
    5906:	|  |         move.l 12(sp),d0
    590a:	|  |         move.l 8(sp),d1
    590e:	|  |         jsr -684(a6)
    5912:	|  |         move.l d0,4(sp)
    5916:	|  |         move.l 4(sp),d0
    591a:	|  |         movea.l 16(sp),a0
    591e:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    5922:	|  |         movea.l 16(sp),a0
    5926:	|  |         move.l 4(a0),d0
    592a:	|  |     /-- bne.s 5940 <copyAnim+0xc2>
			KPrintF("copyAnim: Cannot allocate memory");
    592c:	|  |     |   pea 14fb7 <incbin_player_end+0x143>
    5932:	|  |     |   jsr 12048 <KPrintF>
    5938:	|  |     |   addq.l #4,sp
			return NULL;
    593a:	|  |     |   moveq #0,d0
    593c:	+--|-----|-- bra.w 5a10 <copyAnim+0x192>
		}

		for (int a = 0; a < num; a ++) {
    5940:	|  |     \-> clr.l 36(sp)
    5944:	|  |     /-- bra.w 59f6 <copyAnim+0x178>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    5948:	|  |  /--|-> movea.l 44(sp),a0
    594c:	|  |  |  |   movea.l 4(a0),a0
    5950:	|  |  |  |   move.l 36(sp),d1
    5954:	|  |  |  |   move.l d1,d0
    5956:	|  |  |  |   add.l d0,d0
    5958:	|  |  |  |   add.l d1,d0
    595a:	|  |  |  |   add.l d0,d0
    595c:	|  |  |  |   add.l d0,d0
    595e:	|  |  |  |   lea (0,a0,d0.l),a1
    5962:	|  |  |  |   movea.l 16(sp),a0
    5966:	|  |  |  |   movea.l 4(a0),a0
    596a:	|  |  |  |   move.l 36(sp),d1
    596e:	|  |  |  |   move.l d1,d0
    5970:	|  |  |  |   add.l d0,d0
    5972:	|  |  |  |   add.l d1,d0
    5974:	|  |  |  |   add.l d0,d0
    5976:	|  |  |  |   add.l d0,d0
    5978:	|  |  |  |   adda.l d0,a0
    597a:	|  |  |  |   move.l (a1),d0
    597c:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    597e:	|  |  |  |   movea.l 44(sp),a0
    5982:	|  |  |  |   movea.l 4(a0),a0
    5986:	|  |  |  |   move.l 36(sp),d1
    598a:	|  |  |  |   move.l d1,d0
    598c:	|  |  |  |   add.l d0,d0
    598e:	|  |  |  |   add.l d1,d0
    5990:	|  |  |  |   add.l d0,d0
    5992:	|  |  |  |   add.l d0,d0
    5994:	|  |  |  |   lea (0,a0,d0.l),a1
    5998:	|  |  |  |   movea.l 16(sp),a0
    599c:	|  |  |  |   movea.l 4(a0),a0
    59a0:	|  |  |  |   move.l 36(sp),d1
    59a4:	|  |  |  |   move.l d1,d0
    59a6:	|  |  |  |   add.l d0,d0
    59a8:	|  |  |  |   add.l d1,d0
    59aa:	|  |  |  |   add.l d0,d0
    59ac:	|  |  |  |   add.l d0,d0
    59ae:	|  |  |  |   adda.l d0,a0
    59b0:	|  |  |  |   move.l 4(a1),d0
    59b4:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    59b8:	|  |  |  |   movea.l 44(sp),a0
    59bc:	|  |  |  |   movea.l 4(a0),a0
    59c0:	|  |  |  |   move.l 36(sp),d1
    59c4:	|  |  |  |   move.l d1,d0
    59c6:	|  |  |  |   add.l d0,d0
    59c8:	|  |  |  |   add.l d1,d0
    59ca:	|  |  |  |   add.l d0,d0
    59cc:	|  |  |  |   add.l d0,d0
    59ce:	|  |  |  |   lea (0,a0,d0.l),a1
    59d2:	|  |  |  |   movea.l 16(sp),a0
    59d6:	|  |  |  |   movea.l 4(a0),a0
    59da:	|  |  |  |   move.l 36(sp),d1
    59de:	|  |  |  |   move.l d1,d0
    59e0:	|  |  |  |   add.l d0,d0
    59e2:	|  |  |  |   add.l d1,d0
    59e4:	|  |  |  |   add.l d0,d0
    59e6:	|  |  |  |   add.l d0,d0
    59e8:	|  |  |  |   adda.l d0,a0
    59ea:	|  |  |  |   move.l 8(a1),d0
    59ee:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    59f2:	|  |  |  |   addq.l #1,36(sp)
    59f6:	|  |  |  \-> move.l 36(sp),d0
    59fa:	|  |  |      cmp.l 32(sp),d0
    59fe:	|  |  \----- blt.w 5948 <copyAnim+0xca>
    5a02:	|  |     /-- bra.s 5a0c <copyAnim+0x18e>
		}
	} else {
		newAnim -> frames = NULL;
    5a04:	|  \-----|-> movea.l 16(sp),a0
    5a08:	|        |   clr.l 4(a0)
	}

	return newAnim;
    5a0c:	|        \-> move.l 16(sp),d0
}
    5a10:	\----------> movea.l (sp)+,a6
    5a12:	             lea 36(sp),sp
    5a16:	             rts

00005a18 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    5a18:	                lea -44(sp),sp
    5a1c:	                move.l a6,-(sp)
    5a1e:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    5a20:	                moveq #12,d0
    5a22:	                move.l d0,40(sp)
    5a26:	                clr.l 36(sp)
    5a2a:	                move.l 17b28 <SysBase>,d0
    5a30:	                movea.l d0,a6
    5a32:	                move.l 40(sp),d0
    5a36:	                move.l 36(sp),d1
    5a3a:	                jsr -684(a6)
    5a3e:	                move.l d0,32(sp)
    5a42:	                move.l 32(sp),d0
    5a46:	                move.l d0,28(sp)
	if( !newP) {
    5a4a:	            /-- bne.s 5a60 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    5a4c:	            |   pea 14fd8 <incbin_player_end+0x164>
    5a52:	            |   jsr 12048 <KPrintF>
    5a58:	            |   addq.l #4,sp
		return NULL;
    5a5a:	            |   moveq #0,d0
    5a5c:	/-----------|-- bra.w 5c30 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    5a60:	|           \-> movea.l 28(sp),a0
    5a64:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    5a6a:	|               move.l 56(sp),d1
    5a6e:	|               move.l d1,d0
    5a70:	|               add.l d0,d0
    5a72:	|               add.l d1,d0
    5a74:	|               add.l d0,d0
    5a76:	|               add.l d0,d0
    5a78:	|               move.l d0,24(sp)
    5a7c:	|               clr.l 20(sp)
    5a80:	|               move.l 17b28 <SysBase>,d0
    5a86:	|               movea.l d0,a6
    5a88:	|               move.l 24(sp),d0
    5a8c:	|               move.l 20(sp),d1
    5a90:	|               jsr -684(a6)
    5a94:	|               move.l d0,16(sp)
    5a98:	|               move.l 16(sp),d0
    5a9c:	|               movea.l 28(sp),a0
    5aa0:	|               move.l d0,4(a0)
	if( !newP->frames) {
    5aa4:	|               movea.l 28(sp),a0
    5aa8:	|               move.l 4(a0),d0
    5aac:	|           /-- bne.s 5ac2 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    5aae:	|           |   pea 14fd8 <incbin_player_end+0x164>
    5ab4:	|           |   jsr 12048 <KPrintF>
    5aba:	|           |   addq.l #4,sp
		return NULL;
    5abc:	|           |   moveq #0,d0
    5abe:	+-----------|-- bra.w 5c30 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    5ac2:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    5ac8:	|               movea.l 60(sp),a0
    5acc:	|               move.l (a0),44(sp)
	while (a) {
    5ad0:	|     /-------- bra.w 5c24 <createPersonaAnim+0x20c>
		a --;
    5ad4:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    5ad8:	|  |  |         movea.l 28(sp),a0
    5adc:	|  |  |         movea.l 4(a0),a0
    5ae0:	|  |  |         move.l 48(sp),d1
    5ae4:	|  |  |         move.l d1,d0
    5ae6:	|  |  |         add.l d0,d0
    5ae8:	|  |  |         add.l d1,d0
    5aea:	|  |  |         add.l d0,d0
    5aec:	|  |  |         add.l d0,d0
    5aee:	|  |  |         adda.l d0,a0
    5af0:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    5af4:	|  |  |         movea.l 44(sp),a0
    5af8:	|  |  |         move.l (a0),d0
    5afa:	|  |  |         moveq #5,d1
    5afc:	|  |  |         cmp.l d0,d1
    5afe:	|  |  |     /-- bne.s 5b2a <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    5b00:	|  |  |     |   movea.l 28(sp),a0
    5b04:	|  |  |     |   movea.l 4(a0),a0
    5b08:	|  |  |     |   move.l 48(sp),d1
    5b0c:	|  |  |     |   move.l d1,d0
    5b0e:	|  |  |     |   add.l d0,d0
    5b10:	|  |  |     |   add.l d1,d0
    5b12:	|  |  |     |   add.l d0,d0
    5b14:	|  |  |     |   add.l d0,d0
    5b16:	|  |  |     |   lea (0,a0,d0.l),a1
    5b1a:	|  |  |     |   movea.l 44(sp),a0
    5b1e:	|  |  |     |   move.l 4(a0),d0
    5b22:	|  |  |     |   move.l d0,8(a1)
    5b26:	|  |  |  /--|-- bra.w 5bd2 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    5b2a:	|  |  |  |  \-> movea.l 44(sp),a0
    5b2e:	|  |  |  |      move.l (a0),d0
    5b30:	|  |  |  |      moveq #2,d1
    5b32:	|  |  |  |      cmp.l d0,d1
    5b34:	|  |  |  |  /-- bne.s 5b60 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    5b36:	|  |  |  |  |   movea.l 44(sp),a0
    5b3a:	|  |  |  |  |   move.l 4(a0),d2
    5b3e:	|  |  |  |  |   movea.l 28(sp),a0
    5b42:	|  |  |  |  |   movea.l 4(a0),a0
    5b46:	|  |  |  |  |   move.l 48(sp),d1
    5b4a:	|  |  |  |  |   move.l d1,d0
    5b4c:	|  |  |  |  |   add.l d0,d0
    5b4e:	|  |  |  |  |   add.l d1,d0
    5b50:	|  |  |  |  |   add.l d0,d0
    5b52:	|  |  |  |  |   add.l d0,d0
    5b54:	|  |  |  |  |   adda.l d0,a0
    5b56:	|  |  |  |  |   move.l d2,d0
    5b58:	|  |  |  |  |   neg.l d0
    5b5a:	|  |  |  |  |   move.l d0,8(a0)
    5b5e:	|  |  |  +--|-- bra.s 5bd2 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    5b60:	|  |  |  |  \-> movea.l 44(sp),a0
    5b64:	|  |  |  |      move.l (a0),d0
    5b66:	|  |  |  |      moveq #6,d1
    5b68:	|  |  |  |      cmp.l d0,d1
    5b6a:	|  |  |  |  /-- bne.s 5bb2 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    5b6c:	|  |  |  |  |   movea.l 44(sp),a0
    5b70:	|  |  |  |  |   movea.l 4(a0),a0
    5b74:	|  |  |  |  |   move.l (a0),d0
    5b76:	|  |  |  |  |   move.l d0,-(sp)
    5b78:	|  |  |  |  |   pea 1 <_start+0x1>
    5b7c:	|  |  |  |  |   lea 20(sp),a0
    5b80:	|  |  |  |  |   move.l a0,-(sp)
    5b82:	|  |  |  |  |   jsr fff4 <getValueType>
    5b88:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    5b8c:	|  |  |  |  |   movea.l 44(sp),a0
    5b90:	|  |  |  |  |   movea.l 4(a0),a0
    5b94:	|  |  |  |  |   movea.l (a0),a0
    5b96:	|  |  |  |  |   move.l 8(a0),d0
    5b9a:	|  |  |  |  |   move.l d0,-(sp)
    5b9c:	|  |  |  |  |   pea 1 <_start+0x1>
    5ba0:	|  |  |  |  |   lea 16(sp),a0
    5ba4:	|  |  |  |  |   move.l a0,-(sp)
    5ba6:	|  |  |  |  |   jsr fff4 <getValueType>
    5bac:	|  |  |  |  |   lea 12(sp),sp
    5bb0:	|  |  |  +--|-- bra.s 5bd2 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    5bb2:	|  |  |  |  \-> move.l 44(sp),d0
    5bb6:	|  |  |  |      move.l d0,-(sp)
    5bb8:	|  |  |  |      pea 1 <_start+0x1>
    5bbc:	|  |  |  |      lea 20(sp),a0
    5bc0:	|  |  |  |      move.l a0,-(sp)
    5bc2:	|  |  |  |      jsr fff4 <getValueType>
    5bc8:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    5bcc:	|  |  |  |      moveq #1,d0
    5bce:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    5bd2:	|  |  |  \----> move.l 60(sp),-(sp)
    5bd6:	|  |  |         jsr 10978 <trimStack>
    5bdc:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    5bde:	|  |  |         movea.l 28(sp),a0
    5be2:	|  |  |         movea.l 4(a0),a0
    5be6:	|  |  |         move.l 48(sp),d1
    5bea:	|  |  |         move.l d1,d0
    5bec:	|  |  |         add.l d0,d0
    5bee:	|  |  |         add.l d1,d0
    5bf0:	|  |  |         add.l d0,d0
    5bf2:	|  |  |         add.l d0,d0
    5bf4:	|  |  |         adda.l d0,a0
    5bf6:	|  |  |         move.l 12(sp),d0
    5bfa:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    5bfc:	|  |  |         movea.l 28(sp),a0
    5c00:	|  |  |         movea.l 4(a0),a0
    5c04:	|  |  |         move.l 48(sp),d1
    5c08:	|  |  |         move.l d1,d0
    5c0a:	|  |  |         add.l d0,d0
    5c0c:	|  |  |         add.l d1,d0
    5c0e:	|  |  |         add.l d0,d0
    5c10:	|  |  |         add.l d0,d0
    5c12:	|  |  |         adda.l d0,a0
    5c14:	|  |  |         move.l 8(sp),d0
    5c18:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    5c1c:	|  |  |         movea.l 60(sp),a0
    5c20:	|  |  |         move.l (a0),44(sp)
	while (a) {
    5c24:	|  |  \-------> tst.l 48(sp)
    5c28:	|  \----------- bne.w 5ad4 <createPersonaAnim+0xbc>
	}

	return newP;
    5c2c:	|               move.l 28(sp),d0
}
    5c30:	\-------------> move.l (sp)+,d2
    5c32:	                movea.l (sp)+,a6
    5c34:	                lea 44(sp),sp
    5c38:	                rts

00005c3a <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    5c3a:	       subq.l #8,sp
    5c3c:	       move.l a6,-(sp)

	if (orig)
    5c3e:	       tst.l 16(sp)
    5c42:	/----- beq.s 5c82 <deleteAnim+0x48>
	{
		if (orig -> numFrames) {
    5c44:	|      movea.l 16(sp),a0
    5c48:	|      move.l 8(a0),d0
    5c4c:	|  /-- beq.s 5c68 <deleteAnim+0x2e>
			FreeVec( orig->frames);
    5c4e:	|  |   movea.l 16(sp),a0
    5c52:	|  |   move.l 4(a0),8(sp)
    5c58:	|  |   move.l 17b28 <SysBase>,d0
    5c5e:	|  |   movea.l d0,a6
    5c60:	|  |   movea.l 8(sp),a1
    5c64:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    5c68:	|  \-> move.l 16(sp),4(sp)
    5c6e:	|      move.l 17b28 <SysBase>,d0
    5c74:	|      movea.l d0,a6
    5c76:	|      movea.l 4(sp),a1
    5c7a:	|      jsr -690(a6)
		orig = NULL;
    5c7e:	|      clr.l 16(sp)
	}
}
    5c82:	\----> nop
    5c84:	       movea.l (sp)+,a6
    5c86:	       addq.l #8,sp
    5c88:	       rts

00005c8a <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    5c8a:	          lea -124(sp),sp
    5c8e:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    5c92:	          movea.l 152(sp),a0
    5c96:	          move.l 44(a0),d1
    5c9a:	          movea.l 152(sp),a0
    5c9e:	          move.l 48(a0),d0
    5ca2:	          cmp.l d1,d0
    5ca4:	      /-- bne.s 5cd4 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    5ca6:	      |   movea.l 152(sp),a0
    5caa:	      |   moveq #-1,d0
    5cac:	      |   move.l d0,44(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    5cb0:	      |   movea.l 152(sp),a0
    5cb4:	      |   move.l 28(a0),d0
    5cb8:	      |   movea.l 152(sp),a0
    5cbc:	      |   move.l d0,36(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    5cc0:	      |   movea.l 152(sp),a0
    5cc4:	      |   move.l 32(a0),d0
    5cc8:	      |   movea.l 152(sp),a0
    5ccc:	      |   move.l d0,40(a0)
    5cd0:	   /--|-- bra.w 623a <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    5cd4:	   |  \-> movea.l 17c1e <currentFloor>,a0
    5cda:	   |      move.l 16(a0),d1
    5cde:	   |      movea.l 152(sp),a0
    5ce2:	   |      move.l 44(a0),d0
    5ce6:	   |      add.l d0,d0
    5ce8:	   |      add.l d0,d0
    5cea:	   |      movea.l d1,a0
    5cec:	   |      adda.l d0,a0
    5cee:	   |      move.l (a0),d1
    5cf0:	   |      movea.l 152(sp),a0
    5cf4:	   |      move.l 48(a0),d0
    5cf8:	   |      add.l d0,d0
    5cfa:	   |      add.l d0,d0
    5cfc:	   |      movea.l d1,a0
    5cfe:	   |      adda.l d0,a0
    5d00:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    5d04:	   |      moveq #-1,d0
    5d06:	   |      cmp.l 144(sp),d0
    5d0a:	   |  /-- bne.s 5d12 <doBorderStuff+0x88>
    5d0c:	   |  |   clr.w d0
    5d0e:	/--|--|-- bra.w 633a <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    5d12:	|  |  \-> movea.l 17c1e <currentFloor>,a0
    5d18:	|  |      move.l 12(a0),d1
    5d1c:	|  |      move.l 144(sp),d0
    5d20:	|  |      lsl.l #3,d0
    5d22:	|  |      add.l d0,d1
    5d24:	|  |      movea.l 17c1e <currentFloor>,a0
    5d2a:	|  |      movea.l 12(a0),a1
    5d2e:	|  |      movea.l 152(sp),a0
    5d32:	|  |      move.l 44(a0),d0
    5d36:	|  |      lsl.l #3,d0
    5d38:	|  |      add.l a1,d0
    5d3a:	|  |      lea 40(sp),a0
    5d3e:	|  |      move.l a0,-(sp)
    5d40:	|  |      lea 48(sp),a0
    5d44:	|  |      move.l a0,-(sp)
    5d46:	|  |      move.l d1,-(sp)
    5d48:	|  |      move.l d0,-(sp)
    5d4a:	|  |      jsr 112be <getMatchingCorners>
    5d50:	|  |      lea 16(sp),sp
    5d54:	|  |      tst.w d0
    5d56:	|  |  /-- bne.s 5d6c <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    5d58:	|  |  |   pea 15002 <incbin_player_end+0x18e>
    5d5e:	|  |  |   jsr 12048 <KPrintF>
    5d64:	|  |  |   addq.l #4,sp
            return FALSE;
    5d66:	|  |  |   clr.w d0
    5d68:	+--|--|-- bra.w 633a <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    5d6c:	|  |  \-> movea.l 152(sp),a0
    5d70:	|  |      move.l 144(sp),44(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    5d76:	|  |      movea.l 152(sp),a0
    5d7a:	|  |      move.l (a0),d0
    5d7c:	|  |      move.l d0,-(sp)
    5d7e:	|  |      jsr 12438 <__fixsfsi>
    5d84:	|  |      addq.l #4,sp
    5d86:	|  |      move.l d0,140(sp)
    5d8a:	|  |      movea.l 152(sp),a0
    5d8e:	|  |      move.l 4(a0),d0
    5d92:	|  |      move.l d0,-(sp)
    5d94:	|  |      jsr 12438 <__fixsfsi>
    5d9a:	|  |      addq.l #4,sp
    5d9c:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    5da0:	|  |      movea.l 152(sp),a0
    5da4:	|  |      move.l 28(a0),132(sp)
    5daa:	|  |      movea.l 152(sp),a0
    5dae:	|  |      move.l 32(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    5db4:	|  |      movea.l 17c1e <currentFloor>,a0
    5dba:	|  |      move.l 4(a0),d1
    5dbe:	|  |      move.l 44(sp),d0
    5dc2:	|  |      lsl.l #3,d0
    5dc4:	|  |      movea.l d1,a0
    5dc6:	|  |      adda.l d0,a0
    5dc8:	|  |      move.l (a0),124(sp)
    5dcc:	|  |      movea.l 17c1e <currentFloor>,a0
    5dd2:	|  |      move.l 4(a0),d1
    5dd6:	|  |      move.l 44(sp),d0
    5dda:	|  |      lsl.l #3,d0
    5ddc:	|  |      movea.l d1,a0
    5dde:	|  |      adda.l d0,a0
    5de0:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    5de6:	|  |      movea.l 17c1e <currentFloor>,a0
    5dec:	|  |      move.l 4(a0),d1
    5df0:	|  |      move.l 40(sp),d0
    5df4:	|  |      lsl.l #3,d0
    5df6:	|  |      movea.l d1,a0
    5df8:	|  |      adda.l d0,a0
    5dfa:	|  |      move.l (a0),116(sp)
    5dfe:	|  |      movea.l 17c1e <currentFloor>,a0
    5e04:	|  |      move.l 4(a0),d1
    5e08:	|  |      move.l 40(sp),d0
    5e0c:	|  |      lsl.l #3,d0
    5e0e:	|  |      movea.l d1,a0
    5e10:	|  |      adda.l d0,a0
    5e12:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    5e18:	|  |      move.l 140(sp),d0
    5e1c:	|  |      sub.l 132(sp),d0
    5e20:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    5e24:	|  |      move.l 136(sp),d0
    5e28:	|  |      sub.l 128(sp),d0
    5e2c:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    5e30:	|  |      move.l 116(sp),d0
    5e34:	|  |      sub.l 124(sp),d0
    5e38:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    5e3c:	|  |      move.l 112(sp),d0
    5e40:	|  |      sub.l 120(sp),d0
    5e44:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    5e48:	|  |      move.l 124(sp),d0
    5e4c:	|  |      sub.l 140(sp),d0
    5e50:	|  |      move.l 104(sp),-(sp)
    5e54:	|  |      move.l d0,-(sp)
    5e56:	|  |      jsr 129fa <__mulsi3>
    5e5c:	|  |      addq.l #8,sp
    5e5e:	|  |      move.l d0,d2
    5e60:	|  |      move.l 120(sp),d0
    5e64:	|  |      sub.l 136(sp),d0
    5e68:	|  |      move.l 108(sp),-(sp)
    5e6c:	|  |      move.l d0,-(sp)
    5e6e:	|  |      jsr 129fa <__mulsi3>
    5e74:	|  |      addq.l #8,sp
    5e76:	|  |      move.l d2,d1
    5e78:	|  |      sub.l d0,d1
    5e7a:	|  |      move.l d1,-(sp)
    5e7c:	|  |      jsr 12460 <__floatsidf>
    5e82:	|  |      addq.l #4,sp
    5e84:	|  |      move.l d0,32(sp)
    5e88:	|  |      move.l d1,36(sp)
    5e8c:	|  |      move.l 32(sp),88(sp)
    5e92:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    5e98:	|  |      move.l 96(sp),-(sp)
    5e9c:	|  |      move.l 112(sp),-(sp)
    5ea0:	|  |      jsr 129fa <__mulsi3>
    5ea6:	|  |      addq.l #8,sp
    5ea8:	|  |      move.l d0,d2
    5eaa:	|  |      move.l 100(sp),-(sp)
    5eae:	|  |      move.l 108(sp),-(sp)
    5eb2:	|  |      jsr 129fa <__mulsi3>
    5eb8:	|  |      addq.l #8,sp
    5eba:	|  |      move.l d2,d1
    5ebc:	|  |      sub.l d0,d1
    5ebe:	|  |      move.l d1,-(sp)
    5ec0:	|  |      jsr 12460 <__floatsidf>
    5ec6:	|  |      addq.l #4,sp
    5ec8:	|  |      move.l d1,-(sp)
    5eca:	|  |      move.l d0,-(sp)
    5ecc:	|  |      move.l 100(sp),-(sp)
    5ed0:	|  |      move.l 100(sp),-(sp)
    5ed4:	|  |      jsr 122ea <__divdf3>
    5eda:	|  |      lea 16(sp),sp
    5ede:	|  |      move.l d0,24(sp)
    5ee2:	|  |      move.l d1,28(sp)
    5ee6:	|  |      move.l 24(sp),88(sp)
    5eec:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    5ef2:	|  |      clr.l -(sp)
    5ef4:	|  |      clr.l -(sp)
    5ef6:	|  |      move.l 100(sp),-(sp)
    5efa:	|  |      move.l 100(sp),-(sp)
    5efe:	|  |      jsr 125be <__gtdf2>
    5f04:	|  |      lea 16(sp),sp
    5f08:	|  |      tst.l d0
    5f0a:	|  |  /-- ble.w 5fe2 <doBorderStuff+0x358>
    5f0e:	|  |  |   clr.l -(sp)
    5f10:	|  |  |   move.l #1072693248,-(sp)
    5f16:	|  |  |   move.l 100(sp),-(sp)
    5f1a:	|  |  |   move.l 100(sp),-(sp)
    5f1e:	|  |  |   jsr 12678 <__ltdf2>
    5f24:	|  |  |   lea 16(sp),sp
    5f28:	|  |  |   tst.l d0
    5f2a:	|  |  +-- bge.w 5fe2 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    5f2e:	|  |  |   move.l 124(sp),-(sp)
    5f32:	|  |  |   jsr 12460 <__floatsidf>
    5f38:	|  |  |   addq.l #4,sp
    5f3a:	|  |  |   move.l d0,d2
    5f3c:	|  |  |   move.l d1,d3
    5f3e:	|  |  |   move.l 100(sp),-(sp)
    5f42:	|  |  |   jsr 12460 <__floatsidf>
    5f48:	|  |  |   addq.l #4,sp
    5f4a:	|  |  |   move.l 92(sp),-(sp)
    5f4e:	|  |  |   move.l 92(sp),-(sp)
    5f52:	|  |  |   move.l d1,-(sp)
    5f54:	|  |  |   move.l d0,-(sp)
    5f56:	|  |  |   jsr 124f0 <__muldf3>
    5f5c:	|  |  |   lea 16(sp),sp
    5f60:	|  |  |   move.l d1,-(sp)
    5f62:	|  |  |   move.l d0,-(sp)
    5f64:	|  |  |   move.l d3,-(sp)
    5f66:	|  |  |   move.l d2,-(sp)
    5f68:	|  |  |   jsr 12288 <__adddf3>
    5f6e:	|  |  |   lea 16(sp),sp
    5f72:	|  |  |   move.l d1,-(sp)
    5f74:	|  |  |   move.l d0,-(sp)
    5f76:	|  |  |   jsr 123f8 <__fixdfsi>
    5f7c:	|  |  |   addq.l #8,sp
    5f7e:	|  |  |   movea.l 152(sp),a0
    5f82:	|  |  |   move.l d0,36(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    5f86:	|  |  |   move.l 120(sp),-(sp)
    5f8a:	|  |  |   jsr 12460 <__floatsidf>
    5f90:	|  |  |   addq.l #4,sp
    5f92:	|  |  |   move.l d0,d2
    5f94:	|  |  |   move.l d1,d3
    5f96:	|  |  |   move.l 96(sp),-(sp)
    5f9a:	|  |  |   jsr 12460 <__floatsidf>
    5fa0:	|  |  |   addq.l #4,sp
    5fa2:	|  |  |   move.l 92(sp),-(sp)
    5fa6:	|  |  |   move.l 92(sp),-(sp)
    5faa:	|  |  |   move.l d1,-(sp)
    5fac:	|  |  |   move.l d0,-(sp)
    5fae:	|  |  |   jsr 124f0 <__muldf3>
    5fb4:	|  |  |   lea 16(sp),sp
    5fb8:	|  |  |   move.l d1,-(sp)
    5fba:	|  |  |   move.l d0,-(sp)
    5fbc:	|  |  |   move.l d3,-(sp)
    5fbe:	|  |  |   move.l d2,-(sp)
    5fc0:	|  |  |   jsr 12288 <__adddf3>
    5fc6:	|  |  |   lea 16(sp),sp
    5fca:	|  |  |   move.l d1,-(sp)
    5fcc:	|  |  |   move.l d0,-(sp)
    5fce:	|  |  |   jsr 123f8 <__fixdfsi>
    5fd4:	|  |  |   addq.l #8,sp
    5fd6:	|  |  |   movea.l 152(sp),a0
    5fda:	|  |  |   move.l d0,40(a0)
    5fde:	|  +--|-- bra.w 623a <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    5fe2:	|  |  \-> move.l 140(sp),d0
    5fe6:	|  |      sub.l 124(sp),d0
    5fea:	|  |      move.l d0,84(sp)
    5fee:	|  |      move.l 140(sp),d0
    5ff2:	|  |      sub.l 116(sp),d0
    5ff6:	|  |      move.l d0,80(sp)
    5ffa:	|  |      move.l 132(sp),d0
    5ffe:	|  |      sub.l 124(sp),d0
    6002:	|  |      move.l d0,76(sp)
    6006:	|  |      move.l 132(sp),d0
    600a:	|  |      sub.l 116(sp),d0
    600e:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    6012:	|  |      move.l 136(sp),d0
    6016:	|  |      sub.l 120(sp),d0
    601a:	|  |      move.l d0,68(sp)
    601e:	|  |      move.l 136(sp),d0
    6022:	|  |      sub.l 112(sp),d0
    6026:	|  |      move.l d0,64(sp)
    602a:	|  |      move.l 128(sp),d0
    602e:	|  |      sub.l 120(sp),d0
    6032:	|  |      move.l d0,60(sp)
    6036:	|  |      move.l 128(sp),d0
    603a:	|  |      sub.l 112(sp),d0
    603e:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    6042:	|  |      move.l 84(sp),-(sp)
    6046:	|  |      move.l 88(sp),-(sp)
    604a:	|  |      jsr 129fa <__mulsi3>
    6050:	|  |      addq.l #8,sp
    6052:	|  |      move.l d0,84(sp)
    6056:	|  |      move.l 80(sp),-(sp)
    605a:	|  |      move.l 84(sp),-(sp)
    605e:	|  |      jsr 129fa <__mulsi3>
    6064:	|  |      addq.l #8,sp
    6066:	|  |      move.l d0,80(sp)
    606a:	|  |      move.l 76(sp),-(sp)
    606e:	|  |      move.l 80(sp),-(sp)
    6072:	|  |      jsr 129fa <__mulsi3>
    6078:	|  |      addq.l #8,sp
    607a:	|  |      move.l d0,76(sp)
    607e:	|  |      move.l 72(sp),-(sp)
    6082:	|  |      move.l 76(sp),-(sp)
    6086:	|  |      jsr 129fa <__mulsi3>
    608c:	|  |      addq.l #8,sp
    608e:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    6092:	|  |      move.l 68(sp),-(sp)
    6096:	|  |      move.l 72(sp),-(sp)
    609a:	|  |      jsr 129fa <__mulsi3>
    60a0:	|  |      addq.l #8,sp
    60a2:	|  |      move.l d0,68(sp)
    60a6:	|  |      move.l 64(sp),-(sp)
    60aa:	|  |      move.l 68(sp),-(sp)
    60ae:	|  |      jsr 129fa <__mulsi3>
    60b4:	|  |      addq.l #8,sp
    60b6:	|  |      move.l d0,64(sp)
    60ba:	|  |      move.l 60(sp),-(sp)
    60be:	|  |      move.l 64(sp),-(sp)
    60c2:	|  |      jsr 129fa <__mulsi3>
    60c8:	|  |      addq.l #8,sp
    60ca:	|  |      move.l d0,60(sp)
    60ce:	|  |      move.l 56(sp),-(sp)
    60d2:	|  |      move.l 60(sp),-(sp)
    60d6:	|  |      jsr 129fa <__mulsi3>
    60dc:	|  |      addq.l #8,sp
    60de:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    60e2:	|  |      move.l 84(sp),-(sp)
    60e6:	|  |      jsr 12460 <__floatsidf>
    60ec:	|  |      addq.l #4,sp
    60ee:	|  |      move.l d0,d2
    60f0:	|  |      move.l d1,d3
    60f2:	|  |      move.l 68(sp),-(sp)
    60f6:	|  |      jsr 12460 <__floatsidf>
    60fc:	|  |      addq.l #4,sp
    60fe:	|  |      move.l d1,-(sp)
    6100:	|  |      move.l d0,-(sp)
    6102:	|  |      move.l d3,-(sp)
    6104:	|  |      move.l d2,-(sp)
    6106:	|  |      jsr 12288 <__adddf3>
    610c:	|  |      lea 16(sp),sp
    6110:	|  |      move.l d1,-(sp)
    6112:	|  |      move.l d0,-(sp)
    6114:	|  |      jsr 129b0 <sqrt>
    611a:	|  |      addq.l #8,sp
    611c:	|  |      move.l d0,d2
    611e:	|  |      move.l d1,d3
    6120:	|  |      move.l 76(sp),-(sp)
    6124:	|  |      jsr 12460 <__floatsidf>
    612a:	|  |      addq.l #4,sp
    612c:	|  |      move.l d0,d4
    612e:	|  |      move.l d1,d5
    6130:	|  |      move.l 60(sp),-(sp)
    6134:	|  |      jsr 12460 <__floatsidf>
    613a:	|  |      addq.l #4,sp
    613c:	|  |      move.l d1,-(sp)
    613e:	|  |      move.l d0,-(sp)
    6140:	|  |      move.l d5,-(sp)
    6142:	|  |      move.l d4,-(sp)
    6144:	|  |      jsr 12288 <__adddf3>
    614a:	|  |      lea 16(sp),sp
    614e:	|  |      move.l d1,-(sp)
    6150:	|  |      move.l d0,-(sp)
    6152:	|  |      jsr 129b0 <sqrt>
    6158:	|  |      addq.l #8,sp
    615a:	|  |      move.l d1,-(sp)
    615c:	|  |      move.l d0,-(sp)
    615e:	|  |      move.l d3,-(sp)
    6160:	|  |      move.l d2,-(sp)
    6162:	|  |      jsr 12288 <__adddf3>
    6168:	|  |      lea 16(sp),sp
    616c:	|  |      move.l d0,d2
    616e:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    6170:	|  |      move.l 80(sp),-(sp)
    6174:	|  |      jsr 12460 <__floatsidf>
    617a:	|  |      addq.l #4,sp
    617c:	|  |      move.l d0,d4
    617e:	|  |      move.l d1,d5
    6180:	|  |      move.l 64(sp),-(sp)
    6184:	|  |      jsr 12460 <__floatsidf>
    618a:	|  |      addq.l #4,sp
    618c:	|  |      move.l d1,-(sp)
    618e:	|  |      move.l d0,-(sp)
    6190:	|  |      move.l d5,-(sp)
    6192:	|  |      move.l d4,-(sp)
    6194:	|  |      jsr 12288 <__adddf3>
    619a:	|  |      lea 16(sp),sp
    619e:	|  |      move.l d1,-(sp)
    61a0:	|  |      move.l d0,-(sp)
    61a2:	|  |      jsr 129b0 <sqrt>
    61a8:	|  |      addq.l #8,sp
    61aa:	|  |      move.l d0,d4
    61ac:	|  |      move.l d1,d5
    61ae:	|  |      move.l 72(sp),-(sp)
    61b2:	|  |      jsr 12460 <__floatsidf>
    61b8:	|  |      addq.l #4,sp
    61ba:	|  |      move.l d0,d6
    61bc:	|  |      move.l d1,d7
    61be:	|  |      move.l 56(sp),-(sp)
    61c2:	|  |      jsr 12460 <__floatsidf>
    61c8:	|  |      addq.l #4,sp
    61ca:	|  |      move.l d1,-(sp)
    61cc:	|  |      move.l d0,-(sp)
    61ce:	|  |      move.l d7,-(sp)
    61d0:	|  |      move.l d6,-(sp)
    61d2:	|  |      jsr 12288 <__adddf3>
    61d8:	|  |      lea 16(sp),sp
    61dc:	|  |      move.l d1,-(sp)
    61de:	|  |      move.l d0,-(sp)
    61e0:	|  |      jsr 129b0 <sqrt>
    61e6:	|  |      addq.l #8,sp
    61e8:	|  |      move.l d1,-(sp)
    61ea:	|  |      move.l d0,-(sp)
    61ec:	|  |      move.l d5,-(sp)
    61ee:	|  |      move.l d4,-(sp)
    61f0:	|  |      jsr 12288 <__adddf3>
    61f6:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    61fa:	|  |      move.l d1,-(sp)
    61fc:	|  |      move.l d0,-(sp)
    61fe:	|  |      move.l d3,-(sp)
    6200:	|  |      move.l d2,-(sp)
    6202:	|  |      jsr 12678 <__ltdf2>
    6208:	|  |      lea 16(sp),sp
    620c:	|  |      tst.l d0
    620e:	|  |  /-- bge.s 6226 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    6210:	|  |  |   movea.l 152(sp),a0
    6214:	|  |  |   move.l 124(sp),36(a0)
                moveMe -> thisStepY = y3;
    621a:	|  |  |   movea.l 152(sp),a0
    621e:	|  |  |   move.l 120(sp),40(a0)
    6224:	|  +--|-- bra.s 623a <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    6226:	|  |  \-> movea.l 152(sp),a0
    622a:	|  |      move.l 116(sp),36(a0)
                moveMe -> thisStepY = y4;
    6230:	|  |      movea.l 152(sp),a0
    6234:	|  |      move.l 112(sp),40(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    623a:	|  \----> movea.l 152(sp),a0
    623e:	|         move.l 40(a0),d0
    6242:	|         move.l d0,-(sp)
    6244:	|         jsr 124a0 <__floatsisf>
    624a:	|         addq.l #4,sp
    624c:	|         move.l d0,d1
    624e:	|         movea.l 152(sp),a0
    6252:	|         move.l 4(a0),d0
    6256:	|         move.l d0,-(sp)
    6258:	|         move.l d1,-(sp)
    625a:	|         jsr 12794 <__subsf3>
    6260:	|         addq.l #8,sp
    6262:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    6266:	|         movea.l 152(sp),a0
    626a:	|         move.l (a0),d2
    626c:	|         movea.l 152(sp),a0
    6270:	|         move.l 36(a0),d0
    6274:	|         move.l d0,-(sp)
    6276:	|         jsr 124a0 <__floatsisf>
    627c:	|         addq.l #4,sp
    627e:	|         move.l d0,-(sp)
    6280:	|         move.l d2,-(sp)
    6282:	|         jsr 12794 <__subsf3>
    6288:	|         addq.l #8,sp
    628a:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    628e:	|         clr.l -(sp)
    6290:	|         move.l 52(sp),-(sp)
    6294:	|         jsr 126fc <__nesf2>
    629a:	|         addq.l #8,sp
    629c:	|         tst.l d0
    629e:	|     /-- bne.s 62b2 <doBorderStuff+0x628>
    62a0:	|     |   clr.l -(sp)
    62a2:	|     |   move.l 56(sp),-(sp)
    62a6:	|     |   jsr 126fc <__nesf2>
    62ac:	|     |   addq.l #8,sp
    62ae:	|     |   tst.l d0
    62b0:	|  /--|-- beq.s 6328 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    62b2:	|  |  \-> move.l 52(sp),d0
    62b6:	|  |      move.l d0,-(sp)
    62b8:	|  |      move.l d0,-(sp)
    62ba:	|  |      jsr 12252 <__addsf3>
    62c0:	|  |      addq.l #8,sp
    62c2:	|  |      move.l d0,-(sp)
    62c4:	|  |      move.l 52(sp),-(sp)
    62c8:	|  |      jsr 12800 <atan2f>
    62ce:	|  |      addq.l #8,sp
    62d0:	|  |      move.l d0,-(sp)
    62d2:	|  |      jsr 123b8 <__extendsfdf2>
    62d8:	|  |      addq.l #4,sp
    62da:	|  |      move.l #-1540411785,-(sp)
    62e0:	|  |      move.l #1078765033,-(sp)
    62e6:	|  |      move.l d1,-(sp)
    62e8:	|  |      move.l d0,-(sp)
    62ea:	|  |      jsr 124f0 <__muldf3>
    62f0:	|  |      lea 16(sp),sp
    62f4:	|  |      clr.l -(sp)
    62f6:	|  |      move.l #1080459264,-(sp)
    62fc:	|  |      move.l d1,-(sp)
    62fe:	|  |      move.l d0,-(sp)
    6300:	|  |      jsr 12288 <__adddf3>
    6306:	|  |      lea 16(sp),sp
    630a:	|  |      move.l d1,-(sp)
    630c:	|  |      move.l d0,-(sp)
    630e:	|  |      jsr 123f8 <__fixdfsi>
    6314:	|  |      addq.l #8,sp
    6316:	|  |      movea.l 152(sp),a0
    631a:	|  |      move.l d0,84(a0)
        moveMe -> spinning = TRUE;
    631e:	|  |      movea.l 152(sp),a0
    6322:	|  |      move.w #1,54(a0)
    }

    setFrames (moveMe, ANI_WALK);
    6328:	|  \----> pea 1 <_start+0x1>
    632c:	|         move.l 156(sp),-(sp)
    6330:	|         jsr 4f92 <setFrames>
    6336:	|         addq.l #8,sp
    return TRUE;
    6338:	|         moveq #1,d0
}
    633a:	\-------> movem.l (sp)+,d2-d7
    633e:	          lea 124(sp),sp
    6342:	          rts

00006344 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    6344:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    6346:	          move.l 17b76 <allPeople>,(sp)
	while (thisPerson) {
    634c:	      /-- bra.s 6364 <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    634e:	/-----|-> movea.l (sp),a0
    6350:	|     |   movea.l 102(a0),a0
    6354:	|     |   move.l 4(a0),d0
    6358:	|     |   cmp.l 8(sp),d0
    635c:	|  /--|-- beq.s 636a <findPerson+0x26>
		thisPerson = thisPerson -> next;
    635e:	|  |  |   movea.l (sp),a0
    6360:	|  |  |   move.l 24(a0),(sp)
	while (thisPerson) {
    6364:	|  |  \-> tst.l (sp)
    6366:	\--|----- bne.s 634e <findPerson+0xa>
    6368:	   |  /-- bra.s 636c <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    636a:	   \--|-> nop
	}
	return thisPerson;
    636c:	      \-> move.l (sp),d0
}
    636e:	          addq.l #4,sp
    6370:	          rts

00006372 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    6372:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    6374:	       move.l 12(sp),-(sp)
    6378:	       jsr 6344 <findPerson>
    637e:	       addq.l #4,sp
    6380:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    6382:	   /-- bne.s 6388 <floatCharacter+0x16>
    6384:	   |   clr.w d0
    6386:	/--|-- bra.s 6392 <floatCharacter+0x20>
	moveMe -> floaty = f;
    6388:	|  \-> movea.l (sp),a0
    638a:	|      move.l 8(sp),12(a0)
	return TRUE;
    6390:	|      moveq #1,d0
}
    6392:	\----> addq.l #4,sp
    6394:	       rts

00006396 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    6396:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    6398:	          tst.l 8(sp)
    639c:	      /-- bne.s 63aa <forceWalkingPerson+0x14>
    639e:	      |   tst.l 12(sp)
    63a2:	      +-- bne.s 63aa <forceWalkingPerson+0x14>
    63a4:	      |   clr.w d0
    63a6:	/-----|-- bra.w 643c <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    63aa:	|     \-> move.l 16(sp),-(sp)
    63ae:	|         jsr 6344 <findPerson>
    63b4:	|         addq.l #4,sp
    63b6:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    63b8:	|     /-- bne.s 63be <forceWalkingPerson+0x28>
    63ba:	|     |   clr.w d0
    63bc:	+-----|-- bra.s 643c <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    63be:	|     \-> movea.l (sp),a0
    63c0:	|         move.l 56(a0),d0
    63c4:	|     /-- beq.s 63d6 <forceWalkingPerson+0x40>
    63c6:	|     |   movea.l (sp),a0
    63c8:	|     |   move.l 56(a0),d0
    63cc:	|     |   move.l d0,-(sp)
    63ce:	|     |   jsr 1b06 <abortFunction>
    63d4:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    63d6:	|     \-> movea.l (sp),a0
    63d8:	|         move.w #1,52(a0)
    moveMe->continueAfterWalking = NULL;
    63de:	|         movea.l (sp),a0
    63e0:	|         clr.l 56(a0)
    moveMe->directionWhenDoneWalking = di;
    63e4:	|         movea.l (sp),a0
    63e6:	|         move.l 24(sp),98(a0)

    moveMe->walkToX = x;
    63ec:	|         movea.l (sp),a0
    63ee:	|         move.l 8(sp),28(a0)
    moveMe->walkToY = y;
    63f4:	|         movea.l (sp),a0
    63f6:	|         move.l 12(sp),32(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    63fc:	|         movea.l (sp),a0
    63fe:	|         clr.l 44(a0)
    moveMe->walkToPoly = 0;
    6402:	|         movea.l (sp),a0
    6404:	|         clr.l 48(a0)

    doBorderStuff(moveMe);
    6408:	|         move.l (sp),-(sp)
    640a:	|         jsr 5c8a <doBorderStuff>
    6410:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    6412:	|         pea 1 <_start+0x1>
    6416:	|         move.l 4(sp),-(sp)
    641a:	|         jsr 7ad2 <walkMe>
    6420:	|         addq.l #8,sp
    6422:	|         tst.w d0
    6424:	|     /-- bne.s 642e <forceWalkingPerson+0x98>
    6426:	|     |   movea.l (sp),a0
    6428:	|     |   move.w 54(a0),d0
    642c:	|  /--|-- beq.s 643a <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    642e:	|  |  \-> movea.l (sp),a0
    6430:	|  |      move.l 20(sp),56(a0)
        return TRUE;
    6436:	|  |      moveq #1,d0
    6438:	+--|----- bra.s 643c <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    643a:	|  \----> clr.w d0
    }
}
    643c:	\-------> addq.l #4,sp
    643e:	          rts

00006440 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    6440:	                lea -56(sp),sp
    6444:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    6446:	                move.l #320,56(sp)
    644e:	                move.l #200,52(sp)
    6456:	                moveq #-1,d0
    6458:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    645c:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    6464:	                clr.l 44(sp)
    6468:	   /----------- bra.w 6640 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    646c:	/--|----------> movea.l 17c1e <currentFloor>,a0
    6472:	|  |            move.l 12(a0),d1
    6476:	|  |            move.l 44(sp),d0
    647a:	|  |            lsl.l #3,d0
    647c:	|  |            movea.l d1,a0
    647e:	|  |            adda.l d0,a0
    6480:	|  |            move.l (a0),d0
    6482:	|  |            move.l d0,d1
    6484:	|  |            subq.l #1,d1
    6486:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    648a:	|  |            clr.l 40(sp)
    648e:	|  |     /----- bra.w 661e <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    6492:	|  |  /--|----> movea.l 17c1e <currentFloor>,a0
    6498:	|  |  |  |      move.l 4(a0),d1
    649c:	|  |  |  |      movea.l 17c1e <currentFloor>,a0
    64a2:	|  |  |  |      movea.l 12(a0),a0
    64a6:	|  |  |  |      move.l 44(sp),d0
    64aa:	|  |  |  |      lsl.l #3,d0
    64ac:	|  |  |  |      adda.l d0,a0
    64ae:	|  |  |  |      movea.l 4(a0),a0
    64b2:	|  |  |  |      move.l 40(sp),d0
    64b6:	|  |  |  |      add.l d0,d0
    64b8:	|  |  |  |      add.l d0,d0
    64ba:	|  |  |  |      adda.l d0,a0
    64bc:	|  |  |  |      move.l (a0),d0
    64be:	|  |  |  |      lsl.l #3,d0
    64c0:	|  |  |  |      movea.l d1,a0
    64c2:	|  |  |  |      adda.l d0,a0
    64c4:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    64c8:	|  |  |  |      movea.l 17c1e <currentFloor>,a0
    64ce:	|  |  |  |      move.l 4(a0),d1
    64d2:	|  |  |  |      movea.l 17c1e <currentFloor>,a0
    64d8:	|  |  |  |      movea.l 12(a0),a0
    64dc:	|  |  |  |      move.l 44(sp),d0
    64e0:	|  |  |  |      lsl.l #3,d0
    64e2:	|  |  |  |      adda.l d0,a0
    64e4:	|  |  |  |      movea.l 4(a0),a0
    64e8:	|  |  |  |      move.l 40(sp),d0
    64ec:	|  |  |  |      add.l d0,d0
    64ee:	|  |  |  |      add.l d0,d0
    64f0:	|  |  |  |      adda.l d0,a0
    64f2:	|  |  |  |      move.l (a0),d0
    64f4:	|  |  |  |      lsl.l #3,d0
    64f6:	|  |  |  |      movea.l d1,a0
    64f8:	|  |  |  |      adda.l d0,a0
    64fa:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    6500:	|  |  |  |      movea.l 17c1e <currentFloor>,a0
    6506:	|  |  |  |      move.l 4(a0),d1
    650a:	|  |  |  |      movea.l 17c1e <currentFloor>,a0
    6510:	|  |  |  |      movea.l 12(a0),a0
    6514:	|  |  |  |      move.l 44(sp),d0
    6518:	|  |  |  |      lsl.l #3,d0
    651a:	|  |  |  |      adda.l d0,a0
    651c:	|  |  |  |      movea.l 4(a0),a0
    6520:	|  |  |  |      move.l 36(sp),d0
    6524:	|  |  |  |      add.l d0,d0
    6526:	|  |  |  |      add.l d0,d0
    6528:	|  |  |  |      adda.l d0,a0
    652a:	|  |  |  |      move.l (a0),d0
    652c:	|  |  |  |      lsl.l #3,d0
    652e:	|  |  |  |      movea.l d1,a0
    6530:	|  |  |  |      adda.l d0,a0
    6532:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    6536:	|  |  |  |      movea.l 17c1e <currentFloor>,a0
    653c:	|  |  |  |      move.l 4(a0),d1
    6540:	|  |  |  |      movea.l 17c1e <currentFloor>,a0
    6546:	|  |  |  |      movea.l 12(a0),a0
    654a:	|  |  |  |      move.l 44(sp),d0
    654e:	|  |  |  |      lsl.l #3,d0
    6550:	|  |  |  |      adda.l d0,a0
    6552:	|  |  |  |      movea.l 4(a0),a0
    6556:	|  |  |  |      move.l 36(sp),d0
    655a:	|  |  |  |      add.l d0,d0
    655c:	|  |  |  |      add.l d0,d0
    655e:	|  |  |  |      adda.l d0,a0
    6560:	|  |  |  |      move.l (a0),d0
    6562:	|  |  |  |      lsl.l #3,d0
    6564:	|  |  |  |      movea.l d1,a0
    6566:	|  |  |  |      adda.l d0,a0
    6568:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    656e:	|  |  |  |      movea.l 68(sp),a0
    6572:	|  |  |  |      move.l (a0),d1
    6574:	|  |  |  |      movea.l 64(sp),a0
    6578:	|  |  |  |      move.l (a0),d0
    657a:	|  |  |  |      move.l d1,-(sp)
    657c:	|  |  |  |      move.l d0,-(sp)
    657e:	|  |  |  |      move.l 24(sp),-(sp)
    6582:	|  |  |  |      move.l 32(sp),-(sp)
    6586:	|  |  |  |      move.l 40(sp),-(sp)
    658a:	|  |  |  |      move.l 48(sp),-(sp)
    658e:	|  |  |  |      lea 28(sp),a0
    6592:	|  |  |  |      move.l a0,-(sp)
    6594:	|  |  |  |      lea 36(sp),a0
    6598:	|  |  |  |      move.l a0,-(sp)
    659a:	|  |  |  |      jsr 10e9c <closestPointOnLine>
    65a0:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    65a4:	|  |  |  |      movea.l 64(sp),a0
    65a8:	|  |  |  |      move.l (a0),d0
    65aa:	|  |  |  |      move.l 8(sp),d1
    65ae:	|  |  |  |      move.l d0,d2
    65b0:	|  |  |  |      sub.l d1,d2
    65b2:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    65b6:	|  |  |  |      movea.l 68(sp),a0
    65ba:	|  |  |  |      move.l (a0),d0
    65bc:	|  |  |  |      move.l 4(sp),d1
    65c0:	|  |  |  |      move.l d0,d2
    65c2:	|  |  |  |      sub.l d1,d2
    65c4:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    65c8:	|  |  |  |      move.l 28(sp),-(sp)
    65cc:	|  |  |  |      move.l 32(sp),-(sp)
    65d0:	|  |  |  |      jsr 129fa <__mulsi3>
    65d6:	|  |  |  |      addq.l #8,sp
    65d8:	|  |  |  |      move.l d0,d2
    65da:	|  |  |  |      move.l 24(sp),-(sp)
    65de:	|  |  |  |      move.l 28(sp),-(sp)
    65e2:	|  |  |  |      jsr 129fa <__mulsi3>
    65e8:	|  |  |  |      addq.l #8,sp
    65ea:	|  |  |  |      move.l d2,d1
    65ec:	|  |  |  |      add.l d0,d1
    65ee:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    65f2:	|  |  |  |      move.l 12(sp),d2
    65f6:	|  |  |  |      cmp.l 32(sp),d2
    65fa:	|  |  |  |  /-- bge.s 6614 <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    65fc:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    6602:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    6608:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    660e:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    6614:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    661a:	|  |  |  |      addq.l #1,40(sp)
    661e:	|  |  |  \----> movea.l 17c1e <currentFloor>,a0
    6624:	|  |  |         move.l 12(a0),d1
    6628:	|  |  |         move.l 44(sp),d0
    662c:	|  |  |         lsl.l #3,d0
    662e:	|  |  |         movea.l d1,a0
    6630:	|  |  |         adda.l d0,a0
    6632:	|  |  |         move.l (a0),d0
    6634:	|  |  |         cmp.l 40(sp),d0
    6638:	|  |  \-------- bgt.w 6492 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    663c:	|  |            addq.l #1,44(sp)
    6640:	|  \----------> movea.l 17c1e <currentFloor>,a0
    6646:	|               move.l 8(a0),d0
    664a:	|               cmp.l 44(sp),d0
    664e:	\-------------- bgt.w 646c <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    6652:	                moveq #-1,d0
    6654:	                cmp.l 48(sp),d0
    6658:	            /-- bne.s 665e <handleClosestPoint+0x21e>
    665a:	            |   clr.w d0
    665c:	         /--|-- bra.s 6678 <handleClosestPoint+0x238>
	*setX = gotX;
    665e:	         |  \-> movea.l 64(sp),a0
    6662:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    6666:	         |      movea.l 68(sp),a0
    666a:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    666e:	         |      movea.l 72(sp),a0
    6672:	         |      move.l 48(sp),(a0)

	return TRUE;
    6676:	         |      moveq #1,d0
}
    6678:	         \----> move.l (sp)+,d2
    667a:	                lea 56(sp),sp
    667e:	                rts

00006680 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    6680:	clr.l 17b8a <personRegion+0x10>
	personRegion.sY = 0;
    6686:	clr.l 17b8e <personRegion+0x14>
	personRegion.di = -1;
    668c:	moveq #-1,d0
    668e:	move.l d0,17b92 <personRegion+0x18>
	allScreenRegions = NULL;
    6694:	clr.l 17c16 <allScreenRegions>

	return TRUE;
    669a:	moveq #1,d0
}
    669c:	rts

0000669e <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    669e:	          subq.l #4,sp
    66a0:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    66a2:	          tst.l 12(sp)
    66a6:	      /-- bne.s 66ae <jumpPerson+0x10>
    66a8:	      |   tst.l 16(sp)
    66ac:	/-----|-- beq.s 6722 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    66ae:	|     \-> move.l 20(sp),-(sp)
    66b2:	|         jsr 6344 <findPerson>
    66b8:	|         addq.l #4,sp
    66ba:	|         move.l d0,4(sp)
    if (!moveMe) return;
    66be:	|  /----- beq.s 6726 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    66c0:	|  |      movea.l 4(sp),a0
    66c4:	|  |      move.l 56(a0),d0
    66c8:	|  |  /-- beq.s 66dc <jumpPerson+0x3e>
    66ca:	|  |  |   movea.l 4(sp),a0
    66ce:	|  |  |   move.l 56(a0),d0
    66d2:	|  |  |   move.l d0,-(sp)
    66d4:	|  |  |   jsr 1b06 <abortFunction>
    66da:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    66dc:	|  |  \-> movea.l 4(sp),a0
    66e0:	|  |      clr.l 56(a0)
    moveMe->walking = FALSE;
    66e4:	|  |      movea.l 4(sp),a0
    66e8:	|  |      clr.w 52(a0)
    moveMe->spinning = FALSE;
    66ec:	|  |      movea.l 4(sp),a0
    66f0:	|  |      clr.w 54(a0)
    moveAndScale(moveMe, x, y);
    66f4:	|  |      move.l 16(sp),-(sp)
    66f8:	|  |      jsr 124a0 <__floatsisf>
    66fe:	|  |      addq.l #4,sp
    6700:	|  |      move.l d0,d2
    6702:	|  |      move.l 12(sp),-(sp)
    6706:	|  |      jsr 124a0 <__floatsisf>
    670c:	|  |      addq.l #4,sp
    670e:	|  |      move.l d2,-(sp)
    6710:	|  |      move.l d0,-(sp)
    6712:	|  |      move.l 12(sp),-(sp)
    6716:	|  |      jsr 6a8c <moveAndScale>
    671c:	|  |      lea 12(sp),sp
    6720:	|  |  /-- bra.s 6728 <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    6722:	\--|--|-> nop
    6724:	   |  +-- bra.s 6728 <jumpPerson+0x8a>
    if (!moveMe) return;
    6726:	   \--|-> nop
}
    6728:	      \-> move.l (sp)+,d2
    672a:	          addq.l #4,sp
    672c:	          rts

0000672e <killAllPeople>:


void killAllPeople () {
    672e:	          subq.l #8,sp
    6730:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    6732:	   /----- bra.s 679e <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    6734:	/--|----> movea.l 17b76 <allPeople>,a0
    673a:	|  |      move.l 56(a0),d0
    673e:	|  |  /-- beq.s 6754 <killAllPeople+0x26>
    6740:	|  |  |   movea.l 17b76 <allPeople>,a0
    6746:	|  |  |   move.l 56(a0),d0
    674a:	|  |  |   move.l d0,-(sp)
    674c:	|  |  |   jsr 1b06 <abortFunction>
    6752:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    6754:	|  |  \-> movea.l 17b76 <allPeople>,a0
    675a:	|  |      clr.l 56(a0)
		killPeople = allPeople;
    675e:	|  |      move.l 17b76 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    6766:	|  |      movea.l 17b76 <allPeople>,a0
    676c:	|  |      move.l 24(a0),d0
    6770:	|  |      move.l d0,17b76 <allPeople>
		removeObjectType (killPeople -> thisType);
    6776:	|  |      movea.l 8(sp),a0
    677a:	|  |      move.l 102(a0),d0
    677e:	|  |      move.l d0,-(sp)
    6780:	|  |      jsr 92e2 <removeObjectType>
    6786:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    6788:	|  |      move.l 8(sp),4(sp)
    678e:	|  |      move.l 17b28 <SysBase>,d0
    6794:	|  |      movea.l d0,a6
    6796:	|  |      movea.l 4(sp),a1
    679a:	|  |      jsr -690(a6)
	while (allPeople) {
    679e:	|  \----> move.l 17b76 <allPeople>,d0
    67a4:	\-------- bne.s 6734 <killAllPeople+0x6>
	}
}
    67a6:	          nop
    67a8:	          nop
    67aa:	          movea.l (sp)+,a6
    67ac:	          addq.l #8,sp
    67ae:	          rts

000067b0 <killMostPeople>:

void killMostPeople() {
    67b0:	          lea -12(sp),sp
    67b4:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    67b6:	          move.l #97142,12(sp)

    while (*lookyHere) {
    67be:	   /----- bra.w 6844 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    67c2:	/--|----> movea.l 12(sp),a0
    67c6:	|  |      movea.l (a0),a0
    67c8:	|  |      move.l 106(a0),d0
    67cc:	|  |      moveq #32,d1
    67ce:	|  |      and.l d1,d0
    67d0:	|  |  /-- beq.s 67e2 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    67d2:	|  |  |   movea.l 12(sp),a0
    67d6:	|  |  |   move.l (a0),d0
    67d8:	|  |  |   moveq #24,d1
    67da:	|  |  |   add.l d0,d1
    67dc:	|  |  |   move.l d1,12(sp)
    67e0:	|  +--|-- bra.s 6844 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    67e2:	|  |  \-> movea.l 12(sp),a0
    67e6:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    67ea:	|  |      movea.l 8(sp),a0
    67ee:	|  |      move.l 24(a0),d0
    67f2:	|  |      movea.l 12(sp),a0
    67f6:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    67f8:	|  |      movea.l 8(sp),a0
    67fc:	|  |      move.l 56(a0),d0
    6800:	|  |  /-- beq.s 6814 <killMostPeople+0x64>
    6802:	|  |  |   movea.l 8(sp),a0
    6806:	|  |  |   move.l 56(a0),d0
    680a:	|  |  |   move.l d0,-(sp)
    680c:	|  |  |   jsr 1b06 <abortFunction>
    6812:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    6814:	|  |  \-> movea.l 8(sp),a0
    6818:	|  |      clr.l 56(a0)
            removeObjectType(killPeople->thisType);
    681c:	|  |      movea.l 8(sp),a0
    6820:	|  |      move.l 102(a0),d0
    6824:	|  |      move.l d0,-(sp)
    6826:	|  |      jsr 92e2 <removeObjectType>
    682c:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    682e:	|  |      move.l 8(sp),4(sp)
    6834:	|  |      move.l 17b28 <SysBase>,d0
    683a:	|  |      movea.l d0,a6
    683c:	|  |      movea.l 4(sp),a1
    6840:	|  |      jsr -690(a6)
    while (*lookyHere) {
    6844:	|  \----> movea.l 12(sp),a0
    6848:	|         move.l (a0),d0
    684a:	\-------- bne.w 67c2 <killMostPeople+0x12>
        }
    }
}
    684e:	          nop
    6850:	          nop
    6852:	          movea.l (sp)+,a6
    6854:	          lea 12(sp),sp
    6858:	          rts

0000685a <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    685a:	clr.l -(sp)
    685c:	move.l sp,d0
    685e:	addq.l #8,d0
    6860:	move.l d0,-(sp)
    6862:	jsr 4f92 <setFrames>
    6868:	addq.l #8,sp
}
    686a:	nop
    686c:	rts

0000686e <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    686e:	          lea -12(sp),sp
    6872:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    6874:	          tst.l 20(sp)
    6878:	      /-- bne.s 6886 <makeWalkingPerson+0x18>
    687a:	      |   tst.l 24(sp)
    687e:	      +-- bne.s 6886 <makeWalkingPerson+0x18>
    6880:	      |   clr.w d0
    6882:	/-----|-- bra.w 6a1e <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    6886:	|     \-> movea.l 17c1e <currentFloor>,a0
    688c:	|         move.l 8(a0),d0
    6890:	|     /-- bne.s 6898 <makeWalkingPerson+0x2a>
    6892:	|     |   clr.w d0
    6894:	+-----|-- bra.w 6a1e <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    6898:	|     \-> move.l 28(sp),-(sp)
    689c:	|         jsr 6344 <findPerson>
    68a2:	|         addq.l #4,sp
    68a4:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    68a8:	|     /-- bne.s 68b0 <makeWalkingPerson+0x42>
    68aa:	|     |   clr.w d0
    68ac:	+-----|-- bra.w 6a1e <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    68b0:	|     \-> movea.l 12(sp),a0
    68b4:	|         move.l 56(a0),d0
    68b8:	|     /-- beq.s 68cc <makeWalkingPerson+0x5e>
    68ba:	|     |   movea.l 12(sp),a0
    68be:	|     |   move.l 56(a0),d0
    68c2:	|     |   move.l d0,-(sp)
    68c4:	|     |   jsr 1b06 <abortFunction>
    68ca:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    68cc:	|     \-> movea.l 12(sp),a0
    68d0:	|         clr.l 56(a0)
	moveMe -> walking = TRUE;
    68d4:	|         movea.l 12(sp),a0
    68d8:	|         move.w #1,52(a0)
	moveMe -> directionWhenDoneWalking = di;
    68de:	|         movea.l 12(sp),a0
    68e2:	|         move.l 36(sp),98(a0)

	moveMe -> walkToX = x;
    68e8:	|         movea.l 12(sp),a0
    68ec:	|         move.l 20(sp),28(a0)
	moveMe -> walkToY = y;
    68f2:	|         movea.l 12(sp),a0
    68f6:	|         move.l 24(sp),32(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    68fc:	|         move.l 24(sp),-(sp)
    6900:	|         move.l 24(sp),-(sp)
    6904:	|         jsr 1139e <inFloor>
    690a:	|         addq.l #8,sp
    690c:	|         movea.l 12(sp),a0
    6910:	|         move.l d0,48(a0)
	if (moveMe -> walkToPoly == -1) {
    6914:	|         movea.l 12(sp),a0
    6918:	|         move.l 48(a0),d0
    691c:	|         moveq #-1,d1
    691e:	|         cmp.l d0,d1
    6920:	|     /-- bne.s 6950 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    6922:	|     |   movea.w #48,a0
    6926:	|     |   adda.l 12(sp),a0
    692a:	|     |   moveq #32,d1
    692c:	|     |   add.l 12(sp),d1
    6930:	|     |   moveq #28,d0
    6932:	|     |   add.l 12(sp),d0
    6936:	|     |   move.l a0,-(sp)
    6938:	|     |   move.l d1,-(sp)
    693a:	|     |   move.l d0,-(sp)
    693c:	|     |   jsr 6440 <handleClosestPoint>
    6942:	|     |   lea 12(sp),sp
    6946:	|     |   tst.w d0
    6948:	|     +-- bne.s 6950 <makeWalkingPerson+0xe2>
    694a:	|     |   clr.w d0
    694c:	+-----|-- bra.w 6a1e <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    6950:	|     \-> movea.l 12(sp),a0
    6954:	|         move.l 4(a0),d0
    6958:	|         move.l d0,-(sp)
    695a:	|         jsr 12438 <__fixsfsi>
    6960:	|         addq.l #4,sp
    6962:	|         move.l d0,d2
    6964:	|         movea.l 12(sp),a0
    6968:	|         move.l (a0),d0
    696a:	|         move.l d0,-(sp)
    696c:	|         jsr 12438 <__fixsfsi>
    6972:	|         addq.l #4,sp
    6974:	|         move.l d2,-(sp)
    6976:	|         move.l d0,-(sp)
    6978:	|         jsr 1139e <inFloor>
    697e:	|         addq.l #8,sp
    6980:	|         movea.l 12(sp),a0
    6984:	|         move.l d0,44(a0)
	if (moveMe -> inPoly == -1) {
    6988:	|         movea.l 12(sp),a0
    698c:	|         move.l 44(a0),d0
    6990:	|         moveq #-1,d1
    6992:	|         cmp.l d0,d1
    6994:	|     /-- bne.s 69e6 <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    6996:	|     |   movea.l 12(sp),a0
    699a:	|     |   move.l (a0),d0
    699c:	|     |   move.l d0,-(sp)
    699e:	|     |   jsr 12438 <__fixsfsi>
    69a4:	|     |   addq.l #4,sp
    69a6:	|     |   move.l d0,8(sp)
    69aa:	|     |   movea.l 12(sp),a0
    69ae:	|     |   move.l 4(a0),d0
    69b2:	|     |   move.l d0,-(sp)
    69b4:	|     |   jsr 12438 <__fixsfsi>
    69ba:	|     |   addq.l #4,sp
    69bc:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    69c0:	|     |   moveq #44,d0
    69c2:	|     |   add.l 12(sp),d0
    69c6:	|     |   move.l d0,-(sp)
    69c8:	|     |   lea 8(sp),a0
    69cc:	|     |   move.l a0,-(sp)
    69ce:	|     |   moveq #16,d0
    69d0:	|     |   add.l sp,d0
    69d2:	|     |   move.l d0,-(sp)
    69d4:	|     |   jsr 6440 <handleClosestPoint>
    69da:	|     |   lea 12(sp),sp
    69de:	|     |   tst.w d0
    69e0:	|     +-- bne.s 69e6 <makeWalkingPerson+0x178>
    69e2:	|     |   clr.w d0
    69e4:	+-----|-- bra.s 6a1e <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    69e6:	|     \-> move.l 12(sp),-(sp)
    69ea:	|         jsr 5c8a <doBorderStuff>
    69f0:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    69f2:	|         clr.l -(sp)
    69f4:	|         move.l 16(sp),-(sp)
    69f8:	|         jsr 7ad2 <walkMe>
    69fe:	|         addq.l #8,sp
    6a00:	|         tst.w d0
    6a02:	|     /-- bne.s 6a0e <makeWalkingPerson+0x1a0>
    6a04:	|     |   movea.l 12(sp),a0
    6a08:	|     |   move.w 54(a0),d0
    6a0c:	|  /--|-- beq.s 6a1c <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    6a0e:	|  |  \-> movea.l 12(sp),a0
    6a12:	|  |      move.l 32(sp),56(a0)
		return TRUE;
    6a18:	|  |      moveq #1,d0
    6a1a:	+--|----- bra.s 6a1e <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    6a1c:	|  \----> clr.w d0
	}
}
    6a1e:	\-------> move.l (sp)+,d2
    6a20:	          lea 12(sp),sp
    6a24:	          rts

00006a26 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    6a26:	       lea -16(sp),sp
    6a2a:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    6a2c:	       moveq #12,d0
    6a2e:	       move.l d0,16(sp)
    6a32:	       clr.l 12(sp)
    6a36:	       move.l 17b28 <SysBase>,d0
    6a3c:	       movea.l d0,a6
    6a3e:	       move.l 16(sp),d0
    6a42:	       move.l 12(sp),d1
    6a46:	       jsr -684(a6)
    6a4a:	       move.l d0,8(sp)
    6a4e:	       move.l 8(sp),d0
    6a52:	       move.l d0,4(sp)
    if(newAnim == 0) {
    6a56:	   /-- bne.s 6a6a <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    6a58:	   |   pea 15082 <incbin_player_end+0x20e>
    6a5e:	   |   jsr 12048 <KPrintF>
    6a64:	   |   addq.l #4,sp
        return NULL;    
    6a66:	   |   moveq #0,d0
    6a68:	/--|-- bra.s 6a84 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    6a6a:	|  \-> movea.l 4(sp),a0
    6a6e:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    6a70:	|      movea.l 4(sp),a0
    6a74:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    6a78:	|      movea.l 4(sp),a0
    6a7c:	|      clr.l 4(a0)
	return newAnim;
    6a80:	|      move.l 4(sp),d0
}
    6a84:	\----> movea.l (sp)+,a6
    6a86:	       lea 16(sp),sp
    6a8a:	       rts

00006a8c <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    6a8c:	    move.l d2,-(sp)
	me->x = x;
    6a8e:	    movea.l 8(sp),a0
    6a92:	    move.l 12(sp),(a0)
	me->y = y;
    6a96:	    movea.l 8(sp),a0
    6a9a:	    move.l 16(sp),4(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    6aa0:	    movea.l 8(sp),a0
    6aa4:	    move.l 106(a0),d0
    6aa8:	    moveq #2,d1
    6aaa:	    and.l d1,d0
    6aac:	/-- bne.s 6b04 <moveAndScale+0x78>
    6aae:	|   move.w 16028 <scaleDivide>,d0
    6ab4:	+-- beq.s 6b04 <moveAndScale+0x78>
    6ab6:	|   movea.l 8(sp),a0
    6aba:	|   move.l 4(a0),d2
    6abe:	|   move.w 16026 <scaleHorizon>,d0
    6ac4:	|   movea.w d0,a0
    6ac6:	|   move.l a0,-(sp)
    6ac8:	|   jsr 124a0 <__floatsisf>
    6ace:	|   addq.l #4,sp
    6ad0:	|   move.l d0,-(sp)
    6ad2:	|   move.l d2,-(sp)
    6ad4:	|   jsr 12794 <__subsf3>
    6ada:	|   addq.l #8,sp
    6adc:	|   move.l d0,d2
    6ade:	|   move.w 16028 <scaleDivide>,d0
    6ae4:	|   movea.w d0,a0
    6ae6:	|   move.l a0,-(sp)
    6ae8:	|   jsr 124a0 <__floatsisf>
    6aee:	|   addq.l #4,sp
    6af0:	|   move.l d0,-(sp)
    6af2:	|   move.l d2,-(sp)
    6af4:	|   jsr 1234c <__divsf3>
    6afa:	|   addq.l #8,sp
    6afc:	|   movea.l 8(sp),a0
    6b00:	|   move.l d0,20(a0)
}
    6b04:	\-> nop
    6b06:	    move.l (sp)+,d2
    6b08:	    rts

00006b0a <removeOneCharacter>:

void removeOneCharacter (int i) {
    6b0a:	          lea -12(sp),sp
    6b0e:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);
    6b10:	          move.l 20(sp),-(sp)
    6b14:	          jsr 6344 <findPerson>
    6b1a:	          addq.l #4,sp
    6b1c:	          move.l d0,8(sp)

    if (p) {
    6b20:	/-------- beq.w 6bcc <removeOneCharacter+0xc2>
        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    6b24:	|         move.l 17c1a <overRegion>,d0
    6b2a:	|         cmpi.l #97146,d0
    6b30:	|     /-- bne.s 6b4e <removeOneCharacter+0x44>
    6b32:	|     |   movea.l 17c1a <overRegion>,a0
    6b38:	|     |   move.l 28(a0),d1
    6b3c:	|     |   movea.l 8(sp),a0
    6b40:	|     |   move.l 102(a0),d0
    6b44:	|     |   cmp.l d1,d0
    6b46:	|     +-- bne.s 6b4e <removeOneCharacter+0x44>
            overRegion = NULL;
    6b48:	|     |   clr.l 17c1a <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    6b4e:	|     \-> movea.l 8(sp),a0
    6b52:	|         move.l 56(a0),d0
    6b56:	|     /-- beq.s 6b6a <removeOneCharacter+0x60>
    6b58:	|     |   movea.l 8(sp),a0
    6b5c:	|     |   move.l 56(a0),d0
    6b60:	|     |   move.l d0,-(sp)
    6b62:	|     |   jsr 1b06 <abortFunction>
    6b68:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    6b6a:	|     \-> movea.l 8(sp),a0
    6b6e:	|         clr.l 56(a0)
        struct onScreenPerson ** killPeople;

        for (killPeople = &allPeople;
    6b72:	|         move.l #97142,12(sp)
    6b7a:	|     /-- bra.s 6b8a <removeOneCharacter+0x80>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    6b7c:	|  /--|-> movea.l 12(sp),a0
    6b80:	|  |  |   move.l (a0),d0
    6b82:	|  |  |   moveq #24,d1
    6b84:	|  |  |   add.l d0,d1
    6b86:	|  |  |   move.l d1,12(sp)
            *killPeople != p;
    6b8a:	|  |  \-> movea.l 12(sp),a0
    6b8e:	|  |      move.l (a0),d0
    6b90:	|  |      cmp.l 8(sp),d0
    6b94:	|  \----- bne.s 6b7c <removeOneCharacter+0x72>

        *killPeople = p->next;
    6b96:	|         movea.l 8(sp),a0
    6b9a:	|         move.l 24(a0),d0
    6b9e:	|         movea.l 12(sp),a0
    6ba2:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    6ba4:	|         movea.l 8(sp),a0
    6ba8:	|         move.l 102(a0),d0
    6bac:	|         move.l d0,-(sp)
    6bae:	|         jsr 92e2 <removeObjectType>
    6bb4:	|         addq.l #4,sp
        FreeVec(p);
    6bb6:	|         move.l 8(sp),4(sp)
    6bbc:	|         move.l 17b28 <SysBase>,d0
    6bc2:	|         movea.l d0,a6
    6bc4:	|         movea.l 4(sp),a1
    6bc8:	|         jsr -690(a6)
    }
}
    6bcc:	\-------> nop
    6bce:	          movea.l (sp)+,a6
    6bd0:	          lea 12(sp),sp
    6bd4:	          rts

00006bd6 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    6bd6:	       subq.l #8,sp
    6bd8:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    6bda:	       movea.l 16(sp),a0
    6bde:	       movea.l 68(a0),a0
    6be2:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    6be8:	       movea.l 16(sp),a0
    6bec:	       move.l 80(a0),d2
    6bf0:	       move.l 4(sp),-(sp)
    6bf4:	       pea b4 <_start+0xb4>
    6bf8:	       jsr 12a78 <__divsi3>
    6bfe:	       addq.l #8,sp
    6c00:	       add.l d2,d0
    6c02:	       move.l d0,d1
    6c04:	       addi.l #180,d1
    6c0a:	       movea.l 16(sp),a0
    6c0e:	       move.l 88(a0),d0
    6c12:	       move.l d1,d2
    6c14:	       add.l d0,d2
    6c16:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    6c1a:	   /-- bra.s 6c24 <rethinkAngle+0x4e>
    6c1c:	/--|-> addi.l #-360,8(sp)
    6c24:	|  \-> cmpi.l #359,8(sp)
    6c2c:	\----- bgt.s 6c1c <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    6c2e:	       move.l 4(sp),-(sp)
    6c32:	       move.l 12(sp),-(sp)
    6c36:	       jsr 129fa <__mulsi3>
    6c3c:	       addq.l #8,sp
    6c3e:	       pea 168 <decodeFilename+0x50>
    6c42:	       move.l d0,-(sp)
    6c44:	       jsr 12a78 <__divsi3>
    6c4a:	       addq.l #8,sp
    6c4c:	       movea.l 16(sp),a0
    6c50:	       move.l d0,94(a0)
}
    6c54:	       nop
    6c56:	       move.l (sp)+,d2
    6c58:	       addq.l #8,sp
    6c5a:	       rts

00006c5c <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    6c5c:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    6c5e:	          movea.l 8(sp),a0
    6c62:	          move.l 8(a0),d0
    6c66:	          move.l 12(sp),-(sp)
    6c6a:	          move.l d0,-(sp)
    6c6c:	          jsr 8d0 <put2bytes>
    6c72:	          addq.l #8,sp
	if (p -> numFrames) {
    6c74:	          movea.l 8(sp),a0
    6c78:	          move.l 8(a0),d0
    6c7c:	/-------- beq.w 6d20 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    6c80:	|         movea.l 8(sp),a0
    6c84:	|         movea.l (a0),a0
    6c86:	|         move.l (a0),d0
    6c88:	|         move.l 12(sp),-(sp)
    6c8c:	|         move.l d0,-(sp)
    6c8e:	|         jsr 958 <put4bytes>
    6c94:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    6c96:	|         clr.l (sp)
    6c98:	|     /-- bra.s 6d12 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    6c9a:	|  /--|-> movea.l 8(sp),a0
    6c9e:	|  |  |   movea.l 4(a0),a0
    6ca2:	|  |  |   move.l (sp),d1
    6ca4:	|  |  |   move.l d1,d0
    6ca6:	|  |  |   add.l d0,d0
    6ca8:	|  |  |   add.l d1,d0
    6caa:	|  |  |   add.l d0,d0
    6cac:	|  |  |   add.l d0,d0
    6cae:	|  |  |   adda.l d0,a0
    6cb0:	|  |  |   move.l (a0),d0
    6cb2:	|  |  |   move.l 12(sp),-(sp)
    6cb6:	|  |  |   move.l d0,-(sp)
    6cb8:	|  |  |   jsr 958 <put4bytes>
    6cbe:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    6cc0:	|  |  |   movea.l 8(sp),a0
    6cc4:	|  |  |   movea.l 4(a0),a0
    6cc8:	|  |  |   move.l (sp),d1
    6cca:	|  |  |   move.l d1,d0
    6ccc:	|  |  |   add.l d0,d0
    6cce:	|  |  |   add.l d1,d0
    6cd0:	|  |  |   add.l d0,d0
    6cd2:	|  |  |   add.l d0,d0
    6cd4:	|  |  |   adda.l d0,a0
    6cd6:	|  |  |   move.l 4(a0),d0
    6cda:	|  |  |   move.l 12(sp),-(sp)
    6cde:	|  |  |   move.l d0,-(sp)
    6ce0:	|  |  |   jsr 958 <put4bytes>
    6ce6:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    6ce8:	|  |  |   movea.l 8(sp),a0
    6cec:	|  |  |   movea.l 4(a0),a0
    6cf0:	|  |  |   move.l (sp),d1
    6cf2:	|  |  |   move.l d1,d0
    6cf4:	|  |  |   add.l d0,d0
    6cf6:	|  |  |   add.l d1,d0
    6cf8:	|  |  |   add.l d0,d0
    6cfa:	|  |  |   add.l d0,d0
    6cfc:	|  |  |   adda.l d0,a0
    6cfe:	|  |  |   move.l 8(a0),d0
    6d02:	|  |  |   move.l 12(sp),-(sp)
    6d06:	|  |  |   move.l d0,-(sp)
    6d08:	|  |  |   jsr 958 <put4bytes>
    6d0e:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    6d10:	|  |  |   addq.l #1,(sp)
    6d12:	|  |  \-> movea.l 8(sp),a0
    6d16:	|  |      move.l 8(a0),d0
    6d1a:	|  |      cmp.l (sp),d0
    6d1c:	|  \----- bgt.w 6c9a <saveAnim+0x3e>
		}
	}
	return TRUE;
    6d20:	\-------> moveq #1,d0
}
    6d22:	          addq.l #4,sp
    6d24:	          rts

00006d26 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    6d26:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    6d28:	             movea.l 8(sp),a0
    6d2c:	             move.l 4(a0),d0
    6d30:	             move.l 12(sp),-(sp)
    6d34:	             move.l d0,-(sp)
    6d36:	             jsr 8d0 <put2bytes>
    6d3c:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    6d3e:	             clr.l (sp)
    6d40:	   /-------- bra.s 6d6c <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    6d42:	/--|-------> movea.l 8(sp),a0
    6d46:	|  |         move.l (a0),d1
    6d48:	|  |         move.l (sp),d0
    6d4a:	|  |         add.l d0,d0
    6d4c:	|  |         add.l d0,d0
    6d4e:	|  |         movea.l d1,a0
    6d50:	|  |         adda.l d0,a0
    6d52:	|  |         move.l (a0),d0
    6d54:	|  |         move.l 12(sp),-(sp)
    6d58:	|  |         move.l d0,-(sp)
    6d5a:	|  |         jsr 6c5c <saveAnim>
    6d60:	|  |         addq.l #8,sp
    6d62:	|  |         tst.w d0
    6d64:	|  |     /-- bne.s 6d6a <saveCostume+0x44>
    6d66:	|  |     |   clr.w d0
    6d68:	|  |  /--|-- bra.s 6d80 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    6d6a:	|  |  |  \-> addq.l #1,(sp)
    6d6c:	|  \--|----> movea.l 8(sp),a0
    6d70:	|     |      move.l 4(a0),d1
    6d74:	|     |      move.l d1,d0
    6d76:	|     |      add.l d0,d0
    6d78:	|     |      add.l d1,d0
    6d7a:	|     |      cmp.l (sp),d0
    6d7c:	\-----|----- bgt.s 6d42 <saveCostume+0x1c>
	}

	return TRUE;
    6d7e:	      |      moveq #1,d0
}
    6d80:	      \----> addq.l #4,sp
    6d82:	             rts

00006d84 <savePeople>:

BOOL savePeople (BPTR fp) {
    6d84:	             lea -144(sp),sp
    6d88:	             move.l a6,-(sp)
    6d8a:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    6d8c:	             move.l 17b76 <allPeople>,148(sp)
	int countPeople = 0, a;
    6d94:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    6d98:	             move.w 16026 <scaleHorizon>,d0
    6d9e:	             movea.w d0,a0
    6da0:	             move.l 156(sp),-(sp)
    6da4:	             move.l a0,-(sp)
    6da6:	             jsr a9c <putSigned>
    6dac:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    6dae:	             move.w 16028 <scaleDivide>,d0
    6db4:	             movea.w d0,a0
    6db6:	             move.l 156(sp),-(sp)
    6dba:	             move.l a0,-(sp)
    6dbc:	             jsr a9c <putSigned>
    6dc2:	             addq.l #8,sp

	while (me) {
    6dc4:	         /-- bra.s 6dd4 <savePeople+0x50>
		countPeople ++;
    6dc6:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    6dca:	      |  |   movea.l 148(sp),a0
    6dce:	      |  |   move.l 24(a0),148(sp)
	while (me) {
    6dd4:	      |  \-> tst.l 148(sp)
    6dd8:	      \----- bne.s 6dc6 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    6dda:	             move.l 156(sp),-(sp)
    6dde:	             move.l 148(sp),-(sp)
    6de2:	             jsr 8d0 <put2bytes>
    6de8:	             addq.l #8,sp

	me = allPeople;
    6dea:	             move.l 17b76 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    6df2:	             clr.l 140(sp)
    6df6:	   /-------- bra.w 724e <savePeople+0x4ca>

		putFloat (me -> x, fp);
    6dfa:	/--|-------> movea.l 148(sp),a0
    6dfe:	|  |         move.l (a0),d0
    6e00:	|  |         move.l 156(sp),-(sp)
    6e04:	|  |         move.l d0,-(sp)
    6e06:	|  |         jsr a46 <putFloat>
    6e0c:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    6e0e:	|  |         movea.l 148(sp),a0
    6e12:	|  |         move.l 4(a0),d0
    6e16:	|  |         move.l 156(sp),-(sp)
    6e1a:	|  |         move.l d0,-(sp)
    6e1c:	|  |         jsr a46 <putFloat>
    6e22:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    6e24:	|  |         movea.l 148(sp),a0
    6e28:	|  |         move.l 68(a0),d0
    6e2c:	|  |         move.l 156(sp),-(sp)
    6e30:	|  |         move.l d0,-(sp)
    6e32:	|  |         jsr 6d26 <saveCostume>
    6e38:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    6e3a:	|  |         movea.l 148(sp),a0
    6e3e:	|  |         move.l 60(a0),d0
    6e42:	|  |         move.l 156(sp),-(sp)
    6e46:	|  |         move.l d0,-(sp)
    6e48:	|  |         jsr 6c5c <saveAnim>
    6e4e:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    6e50:	|  |         move.l 156(sp),136(sp)
    6e56:	|  |         movea.l 148(sp),a0
    6e5a:	|  |         move.l 60(a0),d1
    6e5e:	|  |         movea.l 148(sp),a0
    6e62:	|  |         move.l 64(a0),d0
    6e66:	|  |         cmp.l d1,d0
    6e68:	|  |         seq d0
    6e6a:	|  |         neg.b d0
    6e6c:	|  |         move.b d0,d0
    6e6e:	|  |         andi.l #255,d0
    6e74:	|  |         move.l d0,132(sp)
    6e78:	|  |         move.l 17b30 <DOSBase>,d0
    6e7e:	|  |         movea.l d0,a6
    6e80:	|  |         move.l 136(sp),d1
    6e84:	|  |         move.l 132(sp),d2
    6e88:	|  |         jsr -312(a6)
    6e8c:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    6e90:	|  |         movea.l 148(sp),a0
    6e94:	|  |         move.l 20(a0),d0
    6e98:	|  |         move.l 156(sp),-(sp)
    6e9c:	|  |         move.l d0,-(sp)
    6e9e:	|  |         jsr a46 <putFloat>
    6ea4:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    6ea6:	|  |         movea.l 148(sp),a0
    6eaa:	|  |         move.l 106(a0),d0
    6eae:	|  |         move.l 156(sp),-(sp)
    6eb2:	|  |         move.l d0,-(sp)
    6eb4:	|  |         jsr 8d0 <put2bytes>
    6eba:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    6ebc:	|  |         movea.l 148(sp),a0
    6ec0:	|  |         move.l 8(a0),d0
    6ec4:	|  |         move.l 156(sp),-(sp)
    6ec8:	|  |         move.l d0,-(sp)
    6eca:	|  |         jsr 8d0 <put2bytes>
    6ed0:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    6ed2:	|  |         movea.l 148(sp),a0
    6ed6:	|  |         move.l 28(a0),d0
    6eda:	|  |         move.l 156(sp),-(sp)
    6ede:	|  |         move.l d0,-(sp)
    6ee0:	|  |         jsr 8d0 <put2bytes>
    6ee6:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    6ee8:	|  |         movea.l 148(sp),a0
    6eec:	|  |         move.l 32(a0),d0
    6ef0:	|  |         move.l 156(sp),-(sp)
    6ef4:	|  |         move.l d0,-(sp)
    6ef6:	|  |         jsr 8d0 <put2bytes>
    6efc:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    6efe:	|  |         movea.l 148(sp),a0
    6f02:	|  |         move.l 36(a0),d0
    6f06:	|  |         move.l 156(sp),-(sp)
    6f0a:	|  |         move.l d0,-(sp)
    6f0c:	|  |         jsr 8d0 <put2bytes>
    6f12:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    6f14:	|  |         movea.l 148(sp),a0
    6f18:	|  |         move.l 40(a0),d0
    6f1c:	|  |         move.l 156(sp),-(sp)
    6f20:	|  |         move.l d0,-(sp)
    6f22:	|  |         jsr 8d0 <put2bytes>
    6f28:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    6f2a:	|  |         movea.l 148(sp),a0
    6f2e:	|  |         move.l 72(a0),d0
    6f32:	|  |         move.l 156(sp),-(sp)
    6f36:	|  |         move.l d0,-(sp)
    6f38:	|  |         jsr 8d0 <put2bytes>
    6f3e:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    6f40:	|  |         movea.l 148(sp),a0
    6f44:	|  |         move.l 76(a0),d0
    6f48:	|  |         move.l 156(sp),-(sp)
    6f4c:	|  |         move.l d0,-(sp)
    6f4e:	|  |         jsr 8d0 <put2bytes>
    6f54:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    6f56:	|  |         movea.l 148(sp),a0
    6f5a:	|  |         move.l 16(a0),d0
    6f5e:	|  |         move.l 156(sp),-(sp)
    6f62:	|  |         move.l d0,-(sp)
    6f64:	|  |         jsr 8d0 <put2bytes>
    6f6a:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    6f6c:	|  |         movea.l 148(sp),a0
    6f70:	|  |         move.l 110(a0),d0
    6f74:	|  |         move.l 156(sp),-(sp)
    6f78:	|  |         move.l d0,-(sp)
    6f7a:	|  |         jsr 8d0 <put2bytes>
    6f80:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    6f82:	|  |         movea.l 148(sp),a0
    6f86:	|  |         move.l 12(a0),d0
    6f8a:	|  |         move.l d0,d0
    6f8c:	|  |         movea.w d0,a0
    6f8e:	|  |         move.l 156(sp),-(sp)
    6f92:	|  |         move.l a0,-(sp)
    6f94:	|  |         jsr a9c <putSigned>
    6f9a:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    6f9c:	|  |         move.l 156(sp),124(sp)
    6fa2:	|  |         movea.l 148(sp),a0
    6fa6:	|  |         move.w 92(a0),d0
    6faa:	|  |         movea.w d0,a0
    6fac:	|  |         move.l a0,120(sp)
    6fb0:	|  |         move.l 17b30 <DOSBase>,d0
    6fb6:	|  |         movea.l d0,a6
    6fb8:	|  |         move.l 124(sp),d1
    6fbc:	|  |         move.l 120(sp),d2
    6fc0:	|  |         jsr -312(a6)
    6fc4:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    6fc8:	|  |         move.l 156(sp),112(sp)
    6fce:	|  |         movea.l 148(sp),a0
    6fd2:	|  |         move.w 52(a0),d0
    6fd6:	|  |         movea.w d0,a0
    6fd8:	|  |         move.l a0,108(sp)
    6fdc:	|  |         move.l 17b30 <DOSBase>,d0
    6fe2:	|  |         movea.l d0,a6
    6fe4:	|  |         move.l 112(sp),d1
    6fe8:	|  |         move.l 108(sp),d2
    6fec:	|  |         jsr -312(a6)
    6ff0:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    6ff4:	|  |         move.l 156(sp),100(sp)
    6ffa:	|  |         movea.l 148(sp),a0
    6ffe:	|  |         move.w 54(a0),d0
    7002:	|  |         movea.w d0,a0
    7004:	|  |         move.l a0,96(sp)
    7008:	|  |         move.l 17b30 <DOSBase>,d0
    700e:	|  |         movea.l d0,a6
    7010:	|  |         move.l 100(sp),d1
    7014:	|  |         move.l 96(sp),d2
    7018:	|  |         jsr -312(a6)
    701c:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    7020:	|  |         movea.l 148(sp),a0
    7024:	|  |         move.l 56(a0),d0
    7028:	|  |  /----- beq.s 7066 <savePeople+0x2e2>
			FPutC (fp, 1);
    702a:	|  |  |      move.l 156(sp),76(sp)
    7030:	|  |  |      moveq #1,d0
    7032:	|  |  |      move.l d0,72(sp)
    7036:	|  |  |      move.l 17b30 <DOSBase>,d0
    703c:	|  |  |      movea.l d0,a6
    703e:	|  |  |      move.l 76(sp),d1
    7042:	|  |  |      move.l 72(sp),d2
    7046:	|  |  |      jsr -312(a6)
    704a:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    704e:	|  |  |      movea.l 148(sp),a0
    7052:	|  |  |      move.l 56(a0),d0
    7056:	|  |  |      move.l 156(sp),-(sp)
    705a:	|  |  |      move.l d0,-(sp)
    705c:	|  |  |      jsr 81f4 <saveFunction>
    7062:	|  |  |      addq.l #8,sp
    7064:	|  |  |  /-- bra.s 708a <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    7066:	|  |  \--|-> move.l 156(sp),88(sp)
    706c:	|  |     |   moveq #1,d0
    706e:	|  |     |   move.l d0,84(sp)
    7072:	|  |     |   move.l 17b30 <DOSBase>,d0
    7078:	|  |     |   movea.l d0,a6
    707a:	|  |     |   move.l 88(sp),d1
    707e:	|  |     |   move.l 84(sp),d2
    7082:	|  |     |   jsr -312(a6)
    7086:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    708a:	|  |     \-> movea.l 148(sp),a0
    708e:	|  |         move.l 94(a0),d0
    7092:	|  |         move.l 156(sp),-(sp)
    7096:	|  |         move.l d0,-(sp)
    7098:	|  |         jsr 8d0 <put2bytes>
    709e:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    70a0:	|  |         movea.l 148(sp),a0
    70a4:	|  |         move.l 80(a0),d0
    70a8:	|  |         move.l 156(sp),-(sp)
    70ac:	|  |         move.l d0,-(sp)
    70ae:	|  |         jsr 8d0 <put2bytes>
    70b4:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    70b6:	|  |         movea.l 148(sp),a0
    70ba:	|  |         move.l 88(a0),d0
    70be:	|  |         move.l 156(sp),-(sp)
    70c2:	|  |         move.l d0,-(sp)
    70c4:	|  |         jsr 8d0 <put2bytes>
    70ca:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    70cc:	|  |         movea.l 148(sp),a0
    70d0:	|  |         move.l 84(a0),d0
    70d4:	|  |         move.l 156(sp),-(sp)
    70d8:	|  |         move.l d0,-(sp)
    70da:	|  |         jsr 8d0 <put2bytes>
    70e0:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    70e2:	|  |         movea.l 148(sp),a0
    70e6:	|  |         move.l 98(a0),d0
    70ea:	|  |         move.l d0,d0
    70ec:	|  |         movea.w d0,a0
    70ee:	|  |         move.l 156(sp),-(sp)
    70f2:	|  |         move.l a0,-(sp)
    70f4:	|  |         jsr a9c <putSigned>
    70fa:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    70fc:	|  |         movea.l 148(sp),a0
    7100:	|  |         move.l 44(a0),d0
    7104:	|  |         move.l d0,d0
    7106:	|  |         movea.w d0,a0
    7108:	|  |         move.l 156(sp),-(sp)
    710c:	|  |         move.l a0,-(sp)
    710e:	|  |         jsr a9c <putSigned>
    7114:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    7116:	|  |         movea.l 148(sp),a0
    711a:	|  |         move.l 48(a0),d0
    711e:	|  |         move.l d0,d0
    7120:	|  |         movea.w d0,a0
    7122:	|  |         move.l 156(sp),-(sp)
    7126:	|  |         move.l a0,-(sp)
    7128:	|  |         jsr a9c <putSigned>
    712e:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    7130:	|  |         move.l 156(sp),64(sp)
    7136:	|  |         movea.l 148(sp),a0
    713a:	|  |         move.b 114(a0),d0
    713e:	|  |         move.b d0,d0
    7140:	|  |         andi.l #255,d0
    7146:	|  |         move.l d0,60(sp)
    714a:	|  |         move.l 17b30 <DOSBase>,d0
    7150:	|  |         movea.l d0,a6
    7152:	|  |         move.l 64(sp),d1
    7156:	|  |         move.l 60(sp),d2
    715a:	|  |         jsr -312(a6)
    715e:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    7162:	|  |         move.l 156(sp),52(sp)
    7168:	|  |         movea.l 148(sp),a0
    716c:	|  |         move.b 115(a0),d0
    7170:	|  |         move.b d0,d0
    7172:	|  |         andi.l #255,d0
    7178:	|  |         move.l d0,48(sp)
    717c:	|  |         move.l 17b30 <DOSBase>,d0
    7182:	|  |         movea.l d0,a6
    7184:	|  |         move.l 52(sp),d1
    7188:	|  |         move.l 48(sp),d2
    718c:	|  |         jsr -312(a6)
    7190:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    7194:	|  |         move.l 156(sp),40(sp)
    719a:	|  |         movea.l 148(sp),a0
    719e:	|  |         move.b 116(a0),d0
    71a2:	|  |         move.b d0,d0
    71a4:	|  |         andi.l #255,d0
    71aa:	|  |         move.l d0,36(sp)
    71ae:	|  |         move.l 17b30 <DOSBase>,d0
    71b4:	|  |         movea.l d0,a6
    71b6:	|  |         move.l 40(sp),d1
    71ba:	|  |         move.l 36(sp),d2
    71be:	|  |         jsr -312(a6)
    71c2:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    71c6:	|  |         move.l 156(sp),28(sp)
    71cc:	|  |         movea.l 148(sp),a0
    71d0:	|  |         move.b 117(a0),d0
    71d4:	|  |         move.b d0,d0
    71d6:	|  |         andi.l #255,d0
    71dc:	|  |         move.l d0,24(sp)
    71e0:	|  |         move.l 17b30 <DOSBase>,d0
    71e6:	|  |         movea.l d0,a6
    71e8:	|  |         move.l 28(sp),d1
    71ec:	|  |         move.l 24(sp),d2
    71f0:	|  |         jsr -312(a6)
    71f4:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    71f8:	|  |         move.l 156(sp),16(sp)
    71fe:	|  |         movea.l 148(sp),a0
    7202:	|  |         move.b 118(a0),d0
    7206:	|  |         move.b d0,d0
    7208:	|  |         andi.l #255,d0
    720e:	|  |         move.l d0,12(sp)
    7212:	|  |         move.l 17b30 <DOSBase>,d0
    7218:	|  |         movea.l d0,a6
    721a:	|  |         move.l 16(sp),d1
    721e:	|  |         move.l 12(sp),d2
    7222:	|  |         jsr -312(a6)
    7226:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    722a:	|  |         movea.l 148(sp),a0
    722e:	|  |         move.l 102(a0),d0
    7232:	|  |         move.l 156(sp),-(sp)
    7236:	|  |         move.l d0,-(sp)
    7238:	|  |         jsr 9382 <saveObjectRef>
    723e:	|  |         addq.l #8,sp

		me = me -> next;
    7240:	|  |         movea.l 148(sp),a0
    7244:	|  |         move.l 24(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    724a:	|  |         addq.l #1,140(sp)
    724e:	|  \-------> movea.l 140(sp),a0
    7252:	|            cmpa.l 144(sp),a0
    7256:	\----------- blt.w 6dfa <savePeople+0x76>
	}
	return TRUE;
    725a:	             moveq #1,d0
}
    725c:	             move.l (sp)+,d2
    725e:	             movea.l (sp)+,a6
    7260:	             lea 144(sp),sp
    7264:	             rts

00007266 <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    7266:	movea.l 4(sp),a0
    726a:	move.l 8(sp),(a0)
}
    726e:	nop
    7270:	rts

00007272 <setDrawMode>:


void setDrawMode (int h, int ob) {
    7272:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    7274:	       move.l 12(sp),-(sp)
    7278:	       jsr 6344 <findPerson>
    727e:	       addq.l #4,sp
    7280:	       move.l d0,(sp)
	if (! moveMe) return;
    7282:	/----- beq.s 7296 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    7284:	|      move.l 8(sp),-(sp)
    7288:	|      move.l 4(sp),-(sp)
    728c:	|      jsr 729c <setMyDrawMode>
    7292:	|      addq.l #8,sp
    7294:	|  /-- bra.s 7298 <setDrawMode+0x26>
	if (! moveMe) return;
    7296:	\--|-> nop
}
    7298:	   \-> addq.l #4,sp
    729a:	       rts

0000729c <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    729c:	       moveq #19,d0
    729e:	       cmp.l 8(sp),d0
    72a2:	/----- bcs.w 777a <setMyDrawMode+0x4de>
    72a6:	|      move.l 8(sp),d0
    72aa:	|      add.l d0,d0
    72ac:	|      movea.l d0,a0
    72ae:	|      adda.l #29370,a0
    72b4:	|      move.w (a0),d0
    72b6:	|      jmp (72ba <setMyDrawMode+0x1e>,pc,d0.w)
    72ba:	|      .short 0x04c0
    72bc:	|      ori.l #6684712,-(a4)
    72c2:	|      btst d0,-(a0)
    72c4:	|      bchg d0,(a6)+
    72c6:	|      bclr d0,(a4)+
    72c8:	|      bset d0,(a2)+
    72ca:	|      andi.b #84,(a6)
    72ce:	|      andi.l #55575312,(a2)
    72d4:	|      .short 0x02d0
    72d6:	|      bclr d1,(a0)
    72d8:	|      .short 0x044a
    72da:	|      .short 0x040c
    72dc:	|      movep.l d1,1158(a6)
    72e0:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    72e2:	|      movea.l 4(sp),a0
    72e6:	|      clr.b 116(a0)
    72ea:	|      movea.l 4(sp),a0
    72ee:	|      move.b 116(a0),d0
    72f2:	|      movea.l 4(sp),a0
    72f6:	|      move.b d0,115(a0)
    72fa:	|      movea.l 4(sp),a0
    72fe:	|      move.b 115(a0),d0
    7302:	|      movea.l 4(sp),a0
    7306:	|      move.b d0,114(a0)
			moveMe->colourmix = 0;
    730a:	|      movea.l 4(sp),a0
    730e:	|      clr.b 117(a0)
			moveMe->transparency = 64;
    7312:	|      movea.l 4(sp),a0
    7316:	|      move.b #64,118(a0)
			break;
    731c:	|  /-- bra.w 77b4 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7320:	|  |   movea.l 4(sp),a0
    7324:	|  |   clr.b 116(a0)
    7328:	|  |   movea.l 4(sp),a0
    732c:	|  |   move.b 116(a0),d0
    7330:	|  |   movea.l 4(sp),a0
    7334:	|  |   move.b d0,115(a0)
    7338:	|  |   movea.l 4(sp),a0
    733c:	|  |   move.b 115(a0),d0
    7340:	|  |   movea.l 4(sp),a0
    7344:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    7348:	|  |   movea.l 4(sp),a0
    734c:	|  |   clr.b 117(a0)
			moveMe->transparency = 128;
    7350:	|  |   movea.l 4(sp),a0
    7354:	|  |   move.b #-128,118(a0)
			break;
    735a:	|  +-- bra.w 77b4 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    735e:	|  |   movea.l 4(sp),a0
    7362:	|  |   clr.b 116(a0)
    7366:	|  |   movea.l 4(sp),a0
    736a:	|  |   move.b 116(a0),d0
    736e:	|  |   movea.l 4(sp),a0
    7372:	|  |   move.b d0,115(a0)
    7376:	|  |   movea.l 4(sp),a0
    737a:	|  |   move.b 115(a0),d0
    737e:	|  |   movea.l 4(sp),a0
    7382:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    7386:	|  |   movea.l 4(sp),a0
    738a:	|  |   clr.b 117(a0)
			moveMe->transparency = 192;
    738e:	|  |   movea.l 4(sp),a0
    7392:	|  |   move.b #-64,118(a0)
			break;
    7398:	|  +-- bra.w 77b4 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    739c:	|  |   movea.l 4(sp),a0
    73a0:	|  |   clr.b 116(a0)
    73a4:	|  |   movea.l 4(sp),a0
    73a8:	|  |   move.b 116(a0),d0
    73ac:	|  |   movea.l 4(sp),a0
    73b0:	|  |   move.b d0,115(a0)
    73b4:	|  |   movea.l 4(sp),a0
    73b8:	|  |   move.b 115(a0),d0
    73bc:	|  |   movea.l 4(sp),a0
    73c0:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    73c4:	|  |   movea.l 4(sp),a0
    73c8:	|  |   clr.b 117(a0)
			moveMe->transparency = 254;
    73cc:	|  |   movea.l 4(sp),a0
    73d0:	|  |   move.b #-2,118(a0)
			break;
    73d6:	|  +-- bra.w 77b4 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    73da:	|  |   movea.l 4(sp),a0
    73de:	|  |   clr.b 116(a0)
    73e2:	|  |   movea.l 4(sp),a0
    73e6:	|  |   move.b 116(a0),d0
    73ea:	|  |   movea.l 4(sp),a0
    73ee:	|  |   move.b d0,115(a0)
    73f2:	|  |   movea.l 4(sp),a0
    73f6:	|  |   move.b 115(a0),d0
    73fa:	|  |   movea.l 4(sp),a0
    73fe:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    7402:	|  |   movea.l 4(sp),a0
    7406:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    740c:	|  |   movea.l 4(sp),a0
    7410:	|  |   clr.b 118(a0)
			break;
    7414:	|  +-- bra.w 77b4 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7418:	|  |   movea.l 4(sp),a0
    741c:	|  |   clr.b 116(a0)
    7420:	|  |   movea.l 4(sp),a0
    7424:	|  |   move.b 116(a0),d0
    7428:	|  |   movea.l 4(sp),a0
    742c:	|  |   move.b d0,115(a0)
    7430:	|  |   movea.l 4(sp),a0
    7434:	|  |   move.b 115(a0),d0
    7438:	|  |   movea.l 4(sp),a0
    743c:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    7440:	|  |   movea.l 4(sp),a0
    7444:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    744a:	|  |   movea.l 4(sp),a0
    744e:	|  |   clr.b 118(a0)
			break;
    7452:	|  +-- bra.w 77b4 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7456:	|  |   movea.l 4(sp),a0
    745a:	|  |   clr.b 116(a0)
    745e:	|  |   movea.l 4(sp),a0
    7462:	|  |   move.b 116(a0),d0
    7466:	|  |   movea.l 4(sp),a0
    746a:	|  |   move.b d0,115(a0)
    746e:	|  |   movea.l 4(sp),a0
    7472:	|  |   move.b 115(a0),d0
    7476:	|  |   movea.l 4(sp),a0
    747a:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    747e:	|  |   movea.l 4(sp),a0
    7482:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    7488:	|  |   movea.l 4(sp),a0
    748c:	|  |   clr.b 118(a0)
			break;
    7490:	|  +-- bra.w 77b4 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7494:	|  |   movea.l 4(sp),a0
    7498:	|  |   clr.b 116(a0)
    749c:	|  |   movea.l 4(sp),a0
    74a0:	|  |   move.b 116(a0),d0
    74a4:	|  |   movea.l 4(sp),a0
    74a8:	|  |   move.b d0,115(a0)
    74ac:	|  |   movea.l 4(sp),a0
    74b0:	|  |   move.b 115(a0),d0
    74b4:	|  |   movea.l 4(sp),a0
    74b8:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    74bc:	|  |   movea.l 4(sp),a0
    74c0:	|  |   st 117(a0)
			moveMe->transparency = 0;
    74c4:	|  |   movea.l 4(sp),a0
    74c8:	|  |   clr.b 118(a0)
			break;
    74cc:	|  +-- bra.w 77b4 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    74d0:	|  |   movea.l 4(sp),a0
    74d4:	|  |   clr.b 116(a0)
    74d8:	|  |   movea.l 4(sp),a0
    74dc:	|  |   move.b 116(a0),d0
    74e0:	|  |   movea.l 4(sp),a0
    74e4:	|  |   move.b d0,115(a0)
    74e8:	|  |   movea.l 4(sp),a0
    74ec:	|  |   move.b 115(a0),d0
    74f0:	|  |   movea.l 4(sp),a0
    74f4:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    74f8:	|  |   movea.l 4(sp),a0
    74fc:	|  |   st 117(a0)
			moveMe->transparency = 64;
    7500:	|  |   movea.l 4(sp),a0
    7504:	|  |   move.b #64,118(a0)
			break;
    750a:	|  +-- bra.w 77b4 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    750e:	|  |   movea.l 4(sp),a0
    7512:	|  |   clr.b 116(a0)
    7516:	|  |   movea.l 4(sp),a0
    751a:	|  |   move.b 116(a0),d0
    751e:	|  |   movea.l 4(sp),a0
    7522:	|  |   move.b d0,115(a0)
    7526:	|  |   movea.l 4(sp),a0
    752a:	|  |   move.b 115(a0),d0
    752e:	|  |   movea.l 4(sp),a0
    7532:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    7536:	|  |   movea.l 4(sp),a0
    753a:	|  |   st 117(a0)
			moveMe->transparency = 128;
    753e:	|  |   movea.l 4(sp),a0
    7542:	|  |   move.b #-128,118(a0)
			break;
    7548:	|  +-- bra.w 77b4 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    754c:	|  |   movea.l 4(sp),a0
    7550:	|  |   clr.b 116(a0)
    7554:	|  |   movea.l 4(sp),a0
    7558:	|  |   move.b 116(a0),d0
    755c:	|  |   movea.l 4(sp),a0
    7560:	|  |   move.b d0,115(a0)
    7564:	|  |   movea.l 4(sp),a0
    7568:	|  |   move.b 115(a0),d0
    756c:	|  |   movea.l 4(sp),a0
    7570:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    7574:	|  |   movea.l 4(sp),a0
    7578:	|  |   st 117(a0)
			moveMe->transparency = 192;
    757c:	|  |   movea.l 4(sp),a0
    7580:	|  |   move.b #-64,118(a0)
			break;
    7586:	|  +-- bra.w 77b4 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    758a:	|  |   movea.l 4(sp),a0
    758e:	|  |   move.b #-128,116(a0)
    7594:	|  |   movea.l 4(sp),a0
    7598:	|  |   move.b 116(a0),d0
    759c:	|  |   movea.l 4(sp),a0
    75a0:	|  |   move.b d0,115(a0)
    75a4:	|  |   movea.l 4(sp),a0
    75a8:	|  |   move.b 115(a0),d0
    75ac:	|  |   movea.l 4(sp),a0
    75b0:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    75b4:	|  |   movea.l 4(sp),a0
    75b8:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    75be:	|  |   movea.l 4(sp),a0
    75c2:	|  |   clr.b 118(a0)
			break;
    75c6:	|  +-- bra.w 77b4 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    75ca:	|  |   movea.l 4(sp),a0
    75ce:	|  |   move.b #-128,116(a0)
    75d4:	|  |   movea.l 4(sp),a0
    75d8:	|  |   move.b 116(a0),d0
    75dc:	|  |   movea.l 4(sp),a0
    75e0:	|  |   move.b d0,115(a0)
    75e4:	|  |   movea.l 4(sp),a0
    75e8:	|  |   move.b 115(a0),d0
    75ec:	|  |   movea.l 4(sp),a0
    75f0:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    75f4:	|  |   movea.l 4(sp),a0
    75f8:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    75fe:	|  |   movea.l 4(sp),a0
    7602:	|  |   clr.b 118(a0)
			break;
    7606:	|  +-- bra.w 77b4 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    760a:	|  |   movea.l 4(sp),a0
    760e:	|  |   move.b #-128,116(a0)
    7614:	|  |   movea.l 4(sp),a0
    7618:	|  |   move.b 116(a0),d0
    761c:	|  |   movea.l 4(sp),a0
    7620:	|  |   move.b d0,115(a0)
    7624:	|  |   movea.l 4(sp),a0
    7628:	|  |   move.b 115(a0),d0
    762c:	|  |   movea.l 4(sp),a0
    7630:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    7634:	|  |   movea.l 4(sp),a0
    7638:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    763e:	|  |   movea.l 4(sp),a0
    7642:	|  |   clr.b 118(a0)
			break;
    7646:	|  +-- bra.w 77b4 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    764a:	|  |   movea.l 4(sp),a0
    764e:	|  |   move.b #-128,116(a0)
    7654:	|  |   movea.l 4(sp),a0
    7658:	|  |   move.b 116(a0),d0
    765c:	|  |   movea.l 4(sp),a0
    7660:	|  |   move.b d0,115(a0)
    7664:	|  |   movea.l 4(sp),a0
    7668:	|  |   move.b 115(a0),d0
    766c:	|  |   movea.l 4(sp),a0
    7670:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    7674:	|  |   movea.l 4(sp),a0
    7678:	|  |   st 117(a0)
			moveMe->transparency = 0;
    767c:	|  |   movea.l 4(sp),a0
    7680:	|  |   clr.b 118(a0)
			break;
    7684:	|  +-- bra.w 77b4 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    7688:	|  |   movea.l 4(sp),a0
    768c:	|  |   st 116(a0)
    7690:	|  |   movea.l 4(sp),a0
    7694:	|  |   move.b 116(a0),d0
    7698:	|  |   movea.l 4(sp),a0
    769c:	|  |   move.b d0,115(a0)
    76a0:	|  |   movea.l 4(sp),a0
    76a4:	|  |   move.b 115(a0),d0
    76a8:	|  |   movea.l 4(sp),a0
    76ac:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    76b0:	|  |   movea.l 4(sp),a0
    76b4:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    76ba:	|  |   movea.l 4(sp),a0
    76be:	|  |   clr.b 118(a0)
			break;
    76c2:	|  +-- bra.w 77b4 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    76c6:	|  |   movea.l 4(sp),a0
    76ca:	|  |   st 116(a0)
    76ce:	|  |   movea.l 4(sp),a0
    76d2:	|  |   move.b 116(a0),d0
    76d6:	|  |   movea.l 4(sp),a0
    76da:	|  |   move.b d0,115(a0)
    76de:	|  |   movea.l 4(sp),a0
    76e2:	|  |   move.b 115(a0),d0
    76e6:	|  |   movea.l 4(sp),a0
    76ea:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    76ee:	|  |   movea.l 4(sp),a0
    76f2:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    76f8:	|  |   movea.l 4(sp),a0
    76fc:	|  |   clr.b 118(a0)
			break;
    7700:	|  +-- bra.w 77b4 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    7704:	|  |   movea.l 4(sp),a0
    7708:	|  |   st 116(a0)
    770c:	|  |   movea.l 4(sp),a0
    7710:	|  |   move.b 116(a0),d0
    7714:	|  |   movea.l 4(sp),a0
    7718:	|  |   move.b d0,115(a0)
    771c:	|  |   movea.l 4(sp),a0
    7720:	|  |   move.b 115(a0),d0
    7724:	|  |   movea.l 4(sp),a0
    7728:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    772c:	|  |   movea.l 4(sp),a0
    7730:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    7736:	|  |   movea.l 4(sp),a0
    773a:	|  |   clr.b 118(a0)
			break;
    773e:	|  +-- bra.s 77b4 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    7740:	|  |   movea.l 4(sp),a0
    7744:	|  |   st 116(a0)
    7748:	|  |   movea.l 4(sp),a0
    774c:	|  |   move.b 116(a0),d0
    7750:	|  |   movea.l 4(sp),a0
    7754:	|  |   move.b d0,115(a0)
    7758:	|  |   movea.l 4(sp),a0
    775c:	|  |   move.b 115(a0),d0
    7760:	|  |   movea.l 4(sp),a0
    7764:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    7768:	|  |   movea.l 4(sp),a0
    776c:	|  |   st 117(a0)
			moveMe->transparency = 0;
    7770:	|  |   movea.l 4(sp),a0
    7774:	|  |   clr.b 118(a0)
			break;
    7778:	|  +-- bra.s 77b4 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    777a:	\--|-> movea.l 4(sp),a0
    777e:	   |   clr.b 116(a0)
    7782:	   |   movea.l 4(sp),a0
    7786:	   |   move.b 116(a0),d0
    778a:	   |   movea.l 4(sp),a0
    778e:	   |   move.b d0,115(a0)
    7792:	   |   movea.l 4(sp),a0
    7796:	   |   move.b 115(a0),d0
    779a:	   |   movea.l 4(sp),a0
    779e:	   |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    77a2:	   |   movea.l 4(sp),a0
    77a6:	   |   clr.b 117(a0)
			moveMe->transparency = 0;
    77aa:	   |   movea.l 4(sp),a0
    77ae:	   |   clr.b 118(a0)
			break;
    77b2:	   |   nop
	}
}
    77b4:	   \-> nop
    77b6:	       rts

000077b8 <setCharacterWalkSpeed>:



BOOL setCharacterWalkSpeed (int f, int objNum) {
    77b8:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    77ba:	       tst.l 8(sp)
    77be:	   /-- bgt.s 77c4 <setCharacterWalkSpeed+0xc>
    77c0:	   |   clr.w d0
    77c2:	/--|-- bra.s 77e2 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    77c4:	|  \-> move.l 12(sp),-(sp)
    77c8:	|      jsr 6344 <findPerson>
    77ce:	|      addq.l #4,sp
    77d0:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    77d2:	|  /-- bne.s 77d8 <setCharacterWalkSpeed+0x20>
    77d4:	|  |   clr.w d0
    77d6:	+--|-- bra.s 77e2 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    77d8:	|  \-> movea.l (sp),a0
    77da:	|      move.l 8(sp),16(a0)
	return TRUE;
    77e0:	|      moveq #1,d0
}
    77e2:	\----> addq.l #4,sp
    77e4:	       rts

000077e6 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    77e6:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    77e8:	       move.l 8(sp),-(sp)
    77ec:	       jsr 6344 <findPerson>
    77f2:	       addq.l #4,sp
    77f4:	       move.l d0,(sp)
    if (thisPerson) {
    77f6:	/----- beq.s 7816 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    77f8:	|      movea.l (sp),a0
    77fa:	|      move.l 12(sp),106(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    7800:	|      moveq #2,d0
    7802:	|      and.l 12(sp),d0
    7806:	|  /-- beq.s 7812 <setPersonExtra+0x2c>
    7808:	|  |   movea.l (sp),a0
    780a:	|  |   move.l #1065353216,20(a0)
        return TRUE;
    7812:	|  \-> moveq #1,d0
    7814:	|  /-- bra.s 7818 <setPersonExtra+0x32>
    }
    return FALSE;
    7816:	\--|-> clr.w d0
}
    7818:	   \-> addq.l #4,sp
    781a:	       rts

0000781c <setScale>:


void setScale (short int h, short int d) {
    781c:	subq.l #4,sp
    781e:	move.l 8(sp),d1
    7822:	move.l 12(sp),d0
    7826:	move.w d1,d1
    7828:	move.w d1,2(sp)
    782c:	move.w d0,d0
    782e:	move.w d0,(sp)
	scaleHorizon = h;
    7830:	move.w 2(sp),16026 <scaleHorizon>
	scaleDivide = d;
    7838:	move.w (sp),16028 <scaleDivide>
}
    783e:	nop
    7840:	addq.l #4,sp
    7842:	rts

00007844 <setShown>:

void setShown (BOOL h, int ob) {
    7844:	    subq.l #8,sp
    7846:	    move.l 12(sp),d0
    784a:	    move.w d0,d0
    784c:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    7850:	    move.l 16(sp),-(sp)
    7854:	    jsr 6344 <findPerson>
    785a:	    addq.l #4,sp
    785c:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    7860:	/-- beq.s 786c <setShown+0x28>
    7862:	|   movea.l 4(sp),a0
    7866:	|   move.w 2(sp),92(a0)
}
    786c:	\-> nop
    786e:	    addq.l #8,sp
    7870:	    rts

00007872 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    7872:	       subq.l #8,sp
    7874:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    7876:	       movea.l 16(sp),a0
    787a:	       move.l 80(a0),d0
    787e:	       move.l d0,d1
    7880:	       addi.l #360,d1
    7886:	       movea.l 16(sp),a0
    788a:	       move.l 84(a0),d0
    788e:	       move.l d1,d2
    7890:	       sub.l d0,d2
    7892:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    7896:	       movea.l 16(sp),a0
    789a:	       move.l 110(a0),d0
    789e:	   /-- beq.s 78aa <spinStep+0x38>
    78a0:	   |   movea.l 16(sp),a0
    78a4:	   |   move.l 110(a0),d0
    78a8:	/--|-- bra.s 78c4 <spinStep+0x52>
    78aa:	|  \-> movea.l 16(sp),a0
    78ae:	|      movea.l 68(a0),a0
    78b2:	|      move.l 4(a0),d0
    78b6:	|      move.l d0,-(sp)
    78b8:	|      pea 168 <decodeFilename+0x50>
    78bc:	|      jsr 12a78 <__divsi3>
    78c2:	|      addq.l #8,sp
    78c4:	\----> move.l d0,4(sp)
	while (diff > 180) {
    78c8:	   /-- bra.s 78d2 <spinStep+0x60>
		diff -= 360;
    78ca:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    78d2:	|  \-> cmpi.l #180,8(sp)
    78da:	\----- bgt.s 78ca <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    78dc:	       move.l 8(sp),d0
    78e0:	       cmp.l 4(sp),d0
    78e4:	   /-- blt.s 7902 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    78e6:	   |   movea.l 16(sp),a0
    78ea:	   |   move.l 80(a0),d0
    78ee:	   |   sub.l 4(sp),d0
    78f2:	   |   move.l d0,-(sp)
    78f4:	   |   move.l 20(sp),-(sp)
    78f8:	   |   jsr 79e2 <turnMeAngle>
    78fe:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    7900:	/--|-- bra.s 7948 <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    7902:	|  \-> move.l 4(sp),d0
    7906:	|      neg.l d0
    7908:	|      cmp.l 8(sp),d0
    790c:	|  /-- blt.s 792a <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    790e:	|  |   movea.l 16(sp),a0
    7912:	|  |   move.l 80(a0),d0
    7916:	|  |   add.l 4(sp),d0
    791a:	|  |   move.l d0,-(sp)
    791c:	|  |   move.l 20(sp),-(sp)
    7920:	|  |   jsr 79e2 <turnMeAngle>
    7926:	|  |   addq.l #8,sp
}
    7928:	+--|-- bra.s 7948 <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    792a:	|  \-> movea.l 16(sp),a0
    792e:	|      move.l 84(a0),d0
    7932:	|      move.l d0,-(sp)
    7934:	|      move.l 20(sp),-(sp)
    7938:	|      jsr 79e2 <turnMeAngle>
    793e:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    7940:	|      movea.l 16(sp),a0
    7944:	|      clr.w 54(a0)
}
    7948:	\----> nop
    794a:	       move.l (sp)+,d2
    794c:	       addq.l #8,sp
    794e:	       rts

00007950 <stopPerson>:


BOOL stopPerson (int o) {
    7950:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    7952:	       move.l 8(sp),-(sp)
    7956:	       jsr 6344 <findPerson>
    795c:	       addq.l #4,sp
    795e:	       move.l d0,(sp)
    if (moveMe)
    7960:	/----- beq.s 799e <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    7962:	|      movea.l (sp),a0
    7964:	|      move.l 56(a0),d0
    7968:	+----- beq.s 799e <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    796a:	|      movea.l (sp),a0
    796c:	|      move.l 56(a0),d0
    7970:	|      move.l d0,-(sp)
    7972:	|      jsr 1b06 <abortFunction>
    7978:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    797a:	|      movea.l (sp),a0
    797c:	|      clr.l 56(a0)
            moveMe -> walking = FALSE;
    7980:	|      movea.l (sp),a0
    7982:	|      clr.w 52(a0)
            moveMe -> spinning = FALSE;
    7986:	|      movea.l (sp),a0
    7988:	|      clr.w 54(a0)
            setFrames(moveMe, ANI_STAND);
    798c:	|      clr.l -(sp)
    798e:	|      move.l 4(sp),-(sp)
    7992:	|      jsr 4f92 <setFrames>
    7998:	|      addq.l #8,sp
            return TRUE;
    799a:	|      moveq #1,d0
    799c:	|  /-- bra.s 79a0 <stopPerson+0x50>
        }
    return FALSE;
    799e:	\--|-> clr.w d0
}
    79a0:	   \-> addq.l #4,sp
    79a2:	       rts

000079a4 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    79a4:	       subq.l #8,sp
	int total = 0;
    79a6:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    79aa:	       clr.l (sp)
    79ac:	   /-- bra.s 79ce <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    79ae:	/--|-> movea.l 12(sp),a0
    79b2:	|  |   movea.l 4(a0),a0
    79b6:	|  |   move.l (sp),d1
    79b8:	|  |   move.l d1,d0
    79ba:	|  |   add.l d0,d0
    79bc:	|  |   add.l d1,d0
    79be:	|  |   add.l d0,d0
    79c0:	|  |   add.l d0,d0
    79c2:	|  |   adda.l d0,a0
    79c4:	|  |   move.l 4(a0),d0
    79c8:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    79cc:	|  |   addq.l #1,(sp)
    79ce:	|  \-> movea.l 12(sp),a0
    79d2:	|      move.l 8(a0),d0
    79d6:	|      cmp.l (sp),d0
    79d8:	\----- bgt.s 79ae <timeForAnim+0xa>
	}
	return total;
    79da:	       move.l 4(sp),d0
}
    79de:	       addq.l #8,sp
    79e0:	       rts

000079e2 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    79e2:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    79e4:	       movea.l 8(sp),a0
    79e8:	       movea.l 68(a0),a0
    79ec:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    79f0:	       movea.l 8(sp),a0
    79f4:	       move.l 12(sp),80(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    79fa:	       move.l (sp),-(sp)
    79fc:	       pea b4 <_start+0xb4>
    7a00:	       jsr 12a78 <__divsi3>
    7a06:	       addq.l #8,sp
    7a08:	       move.l d0,d1
    7a0a:	       addi.l #180,d1
    7a10:	       movea.l 8(sp),a0
    7a14:	       move.l 88(a0),d0
    7a18:	       add.l d1,d0
    7a1a:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    7a1e:	   /-- bra.s 7a28 <turnMeAngle+0x46>
    7a20:	/--|-> addi.l #-360,12(sp)
    7a28:	|  \-> cmpi.l #359,12(sp)
    7a30:	\----- bgt.s 7a20 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    7a32:	       move.l (sp),-(sp)
    7a34:	       move.l 16(sp),-(sp)
    7a38:	       jsr 129fa <__mulsi3>
    7a3e:	       addq.l #8,sp
    7a40:	       pea 168 <decodeFilename+0x50>
    7a44:	       move.l d0,-(sp)
    7a46:	       jsr 12a78 <__divsi3>
    7a4c:	       addq.l #8,sp
    7a4e:	       movea.l 8(sp),a0
    7a52:	       move.l d0,94(a0)
}
    7a56:	       nop
    7a58:	       addq.l #4,sp
    7a5a:	       rts

00007a5c <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    7a5c:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    7a5e:	          move.l 8(sp),-(sp)
    7a62:	          jsr 6344 <findPerson>
    7a68:	          addq.l #4,sp
    7a6a:	          move.l d0,(sp)
    if (thisPerson) {
    7a6c:	/-------- beq.s 7acc <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    7a6e:	|         movea.l (sp),a0
    7a70:	|         move.l 56(a0),d0
    7a74:	|     /-- beq.s 7a86 <turnPersonToFace+0x2a>
    7a76:	|     |   movea.l (sp),a0
    7a78:	|     |   move.l 56(a0),d0
    7a7c:	|     |   move.l d0,-(sp)
    7a7e:	|     |   jsr 1b06 <abortFunction>
    7a84:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    7a86:	|     \-> movea.l (sp),a0
    7a88:	|         clr.l 56(a0)
        thisPerson -> walking = FALSE;
    7a8c:	|         movea.l (sp),a0
    7a8e:	|         clr.w 52(a0)
        thisPerson -> spinning = FALSE;
    7a92:	|         movea.l (sp),a0
    7a94:	|         clr.w 54(a0)
        turnMeAngle(thisPerson, direc);
    7a98:	|         move.l 12(sp),-(sp)
    7a9c:	|         move.l 4(sp),-(sp)
    7aa0:	|         jsr 79e2 <turnMeAngle>
    7aa6:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    7aa8:	|         movea.l 17b72 <speech>,a0
    7aae:	|         move.l (a0),d0
    7ab0:	|         cmp.l (sp),d0
    7ab2:	|  /----- bne.s 7ab8 <turnPersonToFace+0x5c>
    7ab4:	|  |      moveq #2,d0
    7ab6:	|  |  /-- bra.s 7aba <turnPersonToFace+0x5e>
    7ab8:	|  \--|-> moveq #0,d0
    7aba:	|     \-> move.l d0,-(sp)
    7abc:	|         move.l 4(sp),-(sp)
    7ac0:	|         jsr 4f92 <setFrames>
    7ac6:	|         addq.l #8,sp
        return TRUE;
    7ac8:	|         moveq #1,d0
    7aca:	|     /-- bra.s 7ace <turnPersonToFace+0x72>
    }
    return FALSE;
    7acc:	\-----|-> clr.w d0
}
    7ace:	      \-> addq.l #4,sp
    7ad0:	          rts

00007ad2 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    7ad2:	                lea -20(sp),sp
    7ad6:	                move.l d3,-(sp)
    7ad8:	                move.l d2,-(sp)
    7ada:	                move.l 36(sp),d0
    7ade:	                move.w d0,d0
    7ae0:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    7ae4:	                cmpi.w #-1,10(sp)
    7aea:	/-------------- bne.s 7af2 <walkMe+0x20>
    7aec:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    7af2:	>-------------> movea.l 32(sp),a0
    7af6:	|               move.l 36(a0),d0
    7afa:	|               move.l d0,-(sp)
    7afc:	|               jsr 124a0 <__floatsisf>
    7b02:	|               addq.l #4,sp
    7b04:	|               move.l d0,d1
    7b06:	|               movea.l 32(sp),a0
    7b0a:	|               move.l (a0),d0
    7b0c:	|               move.l d0,-(sp)
    7b0e:	|               move.l d1,-(sp)
    7b10:	|               jsr 12794 <__subsf3>
    7b16:	|               addq.l #8,sp
    7b18:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    7b1c:	|               movea.l 32(sp),a0
    7b20:	|               move.l 40(a0),d0
    7b24:	|               move.l d0,-(sp)
    7b26:	|               jsr 124a0 <__floatsisf>
    7b2c:	|               addq.l #4,sp
    7b2e:	|               move.l d0,d1
    7b30:	|               movea.l 32(sp),a0
    7b34:	|               move.l 4(a0),d0
    7b38:	|               move.l d0,-(sp)
    7b3a:	|               move.l d1,-(sp)
    7b3c:	|               jsr 12794 <__subsf3>
    7b42:	|               addq.l #8,sp
    7b44:	|               move.l d0,-(sp)
    7b46:	|               move.l d0,-(sp)
    7b48:	|               jsr 12252 <__addsf3>
    7b4e:	|               addq.l #8,sp
    7b50:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    7b54:	|               movea.l 32(sp),a0
    7b58:	|               move.l 20(a0),d2
    7b5c:	|               movea.l 32(sp),a0
    7b60:	|               move.l 16(a0),d0
    7b64:	|               move.l d0,-(sp)
    7b66:	|               jsr 124a0 <__floatsisf>
    7b6c:	|               addq.l #4,sp
    7b6e:	|               move.l d0,-(sp)
    7b70:	|               move.l d2,-(sp)
    7b72:	|               jsr 12552 <__mulsf3>
    7b78:	|               addq.l #8,sp
    7b7a:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    7b7e:	|               move.l 24(sp),-(sp)
    7b82:	|               jsr 123b8 <__extendsfdf2>
    7b88:	|               addq.l #4,sp
    7b8a:	|               move.l #-1717986918,-(sp)
    7b90:	|               move.l #1070176665,-(sp)
    7b96:	|               move.l d1,-(sp)
    7b98:	|               move.l d0,-(sp)
    7b9a:	|               jsr 12678 <__ltdf2>
    7ba0:	|               lea 16(sp),sp
    7ba4:	|               tst.l d0
    7ba6:	|           /-- bge.s 7bb0 <walkMe+0xde>
    7ba8:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    7bb0:	|           \-> move.l 20(sp),-(sp)
    7bb4:	|               jsr 12438 <__fixsfsi>
    7bba:	|               addq.l #4,sp
    7bbc:	|               move.l d0,-(sp)
    7bbe:	|               jsr 5560 <TF_abs>
    7bc4:	|               addq.l #4,sp
    7bc6:	|               move.l d0,d2
    7bc8:	|               move.l 16(sp),-(sp)
    7bcc:	|               jsr 12438 <__fixsfsi>
    7bd2:	|               addq.l #4,sp
    7bd4:	|               move.l d0,-(sp)
    7bd6:	|               jsr 5560 <TF_abs>
    7bdc:	|               addq.l #4,sp
    7bde:	|               cmp.l d2,d0
    7be0:	|        /----- bgt.s 7c04 <walkMe+0x132>
    7be2:	|        |      move.l 20(sp),-(sp)
    7be6:	|        |      jsr 12438 <__fixsfsi>
    7bec:	|        |      addq.l #4,sp
    7bee:	|        |      move.l d0,-(sp)
    7bf0:	|        |      jsr 5560 <TF_abs>
    7bf6:	|        |      addq.l #4,sp
    7bf8:	|        |      move.l d0,-(sp)
    7bfa:	|        |      jsr 124a0 <__floatsisf>
    7c00:	|        |      addq.l #4,sp
    7c02:	|        |  /-- bra.s 7c24 <walkMe+0x152>
    7c04:	|        \--|-> move.l 16(sp),-(sp)
    7c08:	|           |   jsr 12438 <__fixsfsi>
    7c0e:	|           |   addq.l #4,sp
    7c10:	|           |   move.l d0,-(sp)
    7c12:	|           |   jsr 5560 <TF_abs>
    7c18:	|           |   addq.l #4,sp
    7c1a:	|           |   move.l d0,-(sp)
    7c1c:	|           |   jsr 124a0 <__floatsisf>
    7c22:	|           |   addq.l #4,sp
    7c24:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    7c28:	|               move.l 12(sp),-(sp)
    7c2c:	|               jsr 12438 <__fixsfsi>
    7c32:	|               addq.l #4,sp
    7c34:	|               move.l d0,-(sp)
    7c36:	|               jsr 5560 <TF_abs>
    7c3c:	|               addq.l #4,sp
    7c3e:	|               move.l d0,-(sp)
    7c40:	|               jsr 124a0 <__floatsisf>
    7c46:	|               addq.l #4,sp
    7c48:	|               move.l d0,-(sp)
    7c4a:	|               move.l 28(sp),-(sp)
    7c4e:	|               jsr 126c6 <__ltsf2>
    7c54:	|               addq.l #8,sp
    7c56:	|               tst.l d0
    7c58:	|        /----- bge.w 7d0a <walkMe+0x238>
			if (thisPerson->spinning) {
    7c5c:	|        |      movea.l 32(sp),a0
    7c60:	|        |      move.w 54(a0),d0
    7c64:	|        |  /-- beq.s 7c82 <walkMe+0x1b0>
				spinStep(thisPerson);
    7c66:	|        |  |   move.l 32(sp),-(sp)
    7c6a:	|        |  |   jsr 7872 <spinStep>
    7c70:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    7c72:	|        |  |   pea 1 <_start+0x1>
    7c76:	|        |  |   move.l 36(sp),-(sp)
    7c7a:	|        |  |   jsr 4f92 <setFrames>
    7c80:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    7c82:	|        |  \-> move.l 24(sp),-(sp)
    7c86:	|        |      move.l 16(sp),-(sp)
    7c8a:	|        |      jsr 1234c <__divsf3>
    7c90:	|        |      addq.l #8,sp
    7c92:	|        |      move.l d0,24(sp)
			if (move)
    7c96:	|        |      tst.w 10(sp)
    7c9a:	|        |  /-- beq.s 7d04 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    7c9c:	|        |  |   movea.l 32(sp),a0
    7ca0:	|        |  |   move.l 4(a0),d2
    7ca4:	|        |  |   move.l 24(sp),d0
    7ca8:	|        |  |   move.l d0,-(sp)
    7caa:	|        |  |   move.l d0,-(sp)
    7cac:	|        |  |   jsr 12252 <__addsf3>
    7cb2:	|        |  |   addq.l #8,sp
    7cb4:	|        |  |   move.l d0,-(sp)
    7cb6:	|        |  |   move.l 20(sp),-(sp)
    7cba:	|        |  |   jsr 1234c <__divsf3>
    7cc0:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    7cc2:	|        |  |   move.l d0,-(sp)
    7cc4:	|        |  |   move.l d2,-(sp)
    7cc6:	|        |  |   jsr 12252 <__addsf3>
    7ccc:	|        |  |   addq.l #8,sp
    7cce:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    7cd0:	|        |  |   movea.l 32(sp),a0
    7cd4:	|        |  |   move.l (a0),d3
    7cd6:	|        |  |   move.l 24(sp),-(sp)
    7cda:	|        |  |   move.l 24(sp),-(sp)
    7cde:	|        |  |   jsr 1234c <__divsf3>
    7ce4:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    7ce6:	|        |  |   move.l d0,-(sp)
    7ce8:	|        |  |   move.l d3,-(sp)
    7cea:	|        |  |   jsr 12252 <__addsf3>
    7cf0:	|        |  |   addq.l #8,sp
    7cf2:	|        |  |   move.l d2,-(sp)
    7cf4:	|        |  |   move.l d0,-(sp)
    7cf6:	|        |  |   move.l 40(sp),-(sp)
    7cfa:	|        |  |   jsr 6a8c <moveAndScale>
    7d00:	|        |  |   lea 12(sp),sp
			return TRUE;
    7d04:	|        |  \-> moveq #1,d0
    7d06:	|  /-----|----- bra.w 7db8 <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    7d0a:	|  |     \----> movea.l 32(sp),a0
    7d0e:	|  |            move.l 44(a0),d0
    7d12:	|  |            moveq #-1,d1
    7d14:	|  |            cmp.l d0,d1
    7d16:	|  |        /-- bne.s 7d4e <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    7d18:	|  |        |   movea.l 32(sp),a0
    7d1c:	|  |        |   move.l 98(a0),d0
    7d20:	|  |        |   moveq #-1,d1
    7d22:	|  |        |   cmp.l d0,d1
    7d24:	|  |  /-----|-- beq.s 7d62 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    7d26:	|  |  |     |   movea.l 32(sp),a0
    7d2a:	|  |  |     |   move.l 98(a0),d0
    7d2e:	|  |  |     |   movea.l 32(sp),a0
    7d32:	|  |  |     |   move.l d0,84(a0)
				thisPerson->spinning = TRUE;
    7d36:	|  |  |     |   movea.l 32(sp),a0
    7d3a:	|  |  |     |   move.w #1,54(a0)
				spinStep(thisPerson);
    7d40:	|  |  |     |   move.l 32(sp),-(sp)
    7d44:	|  |  |     |   jsr 7872 <spinStep>
    7d4a:	|  |  |     |   addq.l #4,sp
			}
			break;
    7d4c:	|  |  +-----|-- bra.s 7d62 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    7d4e:	|  |  |     \-> move.l 32(sp),-(sp)
    7d52:	|  |  |         jsr 5c8a <doBorderStuff>
    7d58:	|  |  |         addq.l #4,sp
    7d5a:	|  |  |         tst.w d0
    7d5c:	|  |  |  /----- beq.s 7d66 <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    7d5e:	\--|--|--|----- bra.w 7af2 <walkMe+0x20>
			break;
    7d62:	   |  \--|----> nop
    7d64:	   |     |  /-- bra.s 7d68 <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    7d66:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    7d68:	   |        \-> movea.l 32(sp),a0
    7d6c:	   |            clr.w 52(a0)
	setFrames(thisPerson, ANI_STAND);
    7d70:	   |            clr.l -(sp)
    7d72:	   |            move.l 36(sp),-(sp)
    7d76:	   |            jsr 4f92 <setFrames>
    7d7c:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    7d7e:	   |            movea.l 32(sp),a0
    7d82:	   |            move.l 32(a0),d0
	moveAndScale(thisPerson,
    7d86:	   |            move.l d0,-(sp)
    7d88:	   |            jsr 124a0 <__floatsisf>
    7d8e:	   |            addq.l #4,sp
    7d90:	   |            move.l d0,d2
				 thisPerson->walkToX,
    7d92:	   |            movea.l 32(sp),a0
    7d96:	   |            move.l 28(a0),d0
	moveAndScale(thisPerson,
    7d9a:	   |            move.l d0,-(sp)
    7d9c:	   |            jsr 124a0 <__floatsisf>
    7da2:	   |            addq.l #4,sp
    7da4:	   |            move.l d2,-(sp)
    7da6:	   |            move.l d0,-(sp)
    7da8:	   |            move.l 40(sp),-(sp)
    7dac:	   |            jsr 6a8c <moveAndScale>
    7db2:	   |            lea 12(sp),sp
	return FALSE;
    7db6:	   |            clr.w d0
}
    7db8:	   \----------> move.l (sp)+,d2
    7dba:	                move.l (sp)+,d3
    7dbc:	                lea 20(sp),sp
    7dc0:	                rts

00007dc2 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
    7dc2:	             lea -20(sp),sp
    7dc6:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);
	struct loadedSpriteBank * returnMe = allLoadedBanks;
    7dc8:	             move.l 17b9e <allLoadedBanks>,20(sp)
	while (returnMe) {
    7dd0:	      /----- bra.s 7df0 <loadBankForAnim+0x2e>
		if (returnMe->ID == ID) {
    7dd2:	   /--|----> movea.l 20(sp),a0
    7dd6:	   |  |      move.l (a0),d0
    7dd8:	   |  |      cmp.l 28(sp),d0
    7ddc:	   |  |  /-- bne.s 7de6 <loadBankForAnim+0x24>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			return returnMe;
    7dde:	   |  |  |   move.l 20(sp),d0
    7de2:	/--|--|--|-- bra.w 7ea2 <loadBankForAnim+0xe0>
		}
		returnMe = returnMe->next;
    7de6:	|  |  |  \-> movea.l 20(sp),a0
    7dea:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
    7df0:	|  |  \----> tst.l 20(sp)
    7df4:	|  \-------- bne.s 7dd2 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
    7df6:	|            moveq #26,d0
    7df8:	|            move.l d0,16(sp)
    7dfc:	|            clr.l 12(sp)
    7e00:	|            move.l 17b28 <SysBase>,d0
    7e06:	|            movea.l d0,a6
    7e08:	|            move.l 16(sp),d0
    7e0c:	|            move.l 12(sp),d1
    7e10:	|            jsr -684(a6)
    7e14:	|            move.l d0,8(sp)
    7e18:	|            move.l 8(sp),d0
    7e1c:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
    7e20:	|     /----- beq.s 7ea0 <loadBankForAnim+0xde>
		returnMe->ID = ID;
    7e22:	|     |      movea.l 20(sp),a0
    7e26:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank, FALSE)) {
    7e2a:	|     |      move.l 20(sp),d0
    7e2e:	|     |      addq.l #8,d0
    7e30:	|     |      clr.l -(sp)
    7e32:	|     |      move.l d0,-(sp)
    7e34:	|     |      move.l 36(sp),-(sp)
    7e38:	|     |      jsr 5540 <loadSpriteBank>
    7e3e:	|     |      lea 12(sp),sp
    7e42:	|     |      tst.w d0
    7e44:	|     |  /-- beq.s 7e78 <loadBankForAnim+0xb6>
			returnMe->timesUsed = 0;
    7e46:	|     |  |   movea.l 20(sp),a0
    7e4a:	|     |  |   clr.l 4(a0)
			returnMe->next = allLoadedBanks;
    7e4e:	|     |  |   move.l 17b9e <allLoadedBanks>,d0
    7e54:	|     |  |   movea.l 20(sp),a0
    7e58:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
    7e5c:	|     |  |   move.l 20(sp),17b9e <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
    7e64:	|     |  |   pea 150a6 <incbin_player_end+0x232>
    7e6a:	|     |  |   jsr 12048 <KPrintF>
    7e70:	|     |  |   addq.l #4,sp
			return returnMe;
    7e72:	|     |  |   move.l 20(sp),d0
    7e76:	+-----|--|-- bra.s 7ea2 <loadBankForAnim+0xe0>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
    7e78:	|     |  \-> pea 150d3 <incbin_player_end+0x25f>
    7e7e:	|     |      jsr 12048 <KPrintF>
    7e84:	|     |      addq.l #4,sp
			FreeVec(returnMe);
    7e86:	|     |      move.l 20(sp),4(sp)
    7e8c:	|     |      move.l 17b28 <SysBase>,d0
    7e92:	|     |      movea.l d0,a6
    7e94:	|     |      movea.l 4(sp),a1
    7e98:	|     |      jsr -690(a6)
			return NULL;
    7e9c:	|     |      moveq #0,d0
    7e9e:	+-----|----- bra.s 7ea2 <loadBankForAnim+0xe0>
		}
	} else return NULL;
    7ea0:	|     \----> moveq #0,d0
}
    7ea2:	\----------> movea.l (sp)+,a6
    7ea4:	             lea 20(sp),sp
    7ea8:	             rts

00007eaa <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    7eaa:	       subq.l #8,sp
    7eac:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    7eae:	   /-- bra.s 7ede <clearStackLib+0x34>
		k = stackLib;
    7eb0:	/--|-> move.l 17ba6 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    7eb8:	|  |   movea.l 17ba6 <stackLib>,a0
    7ebe:	|  |   move.l 4(a0),d0
    7ec2:	|  |   move.l d0,17ba6 <stackLib>
		FreeVec(k);
    7ec8:	|  |   move.l 8(sp),4(sp)
    7ece:	|  |   move.l 17b28 <SysBase>,d0
    7ed4:	|  |   movea.l d0,a6
    7ed6:	|  |   movea.l 4(sp),a1
    7eda:	|  |   jsr -690(a6)
	while (stackLib) {
    7ede:	|  \-> move.l 17ba6 <stackLib>,d0
    7ee4:	\----- bne.s 7eb0 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    7ee6:	       clr.l 17ba2 <stackLibTotal>
}
    7eec:	       nop
    7eee:	       movea.l (sp)+,a6
    7ef0:	       addq.l #8,sp
    7ef2:	       rts

00007ef4 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    7ef4:	          lea -128(sp),sp
    7ef8:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    7efc:	      /-- bra.s 7f0e <loadGame+0x1a>
    7efe:	   /--|-> move.l 17ac4 <allRunningFunctions>,d0
    7f04:	   |  |   move.l d0,-(sp)
    7f06:	   |  |   jsr 2b3a <finishFunction>
    7f0c:	   |  |   addq.l #4,sp
    7f0e:	   |  \-> move.l 17ac4 <allRunningFunctions>,d0
    7f14:	   \----- bne.s 7efe <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    7f16:	          pea 17baa <ssgVersion>
    7f1c:	          pea 15131 <incbin_player_end+0x2bd>
    7f22:	          pea 41 <_start+0x41>
    7f26:	          pea 53 <_start+0x53>
    7f2a:	          move.l 160(sp),-(sp)
    7f2e:	          jsr 3644 <openAndVerify>
    7f34:	          lea 20(sp),sp
    7f38:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    7f3c:	      /-- bne.s 7f44 <loadGame+0x50>
    7f3e:	      |   clr.w d0
    7f40:	/-----|-- bra.w 81ea <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    7f44:	|     \-> move.l 112(sp),108(sp)
    7f4a:	|         lea 140(sp),a0
    7f4e:	|         lea -126(a0),a0
    7f52:	|         move.l a0,120(sp)
    7f56:	|         moveq #8,d0
    7f58:	|         move.l d0,116(sp)
    7f5c:	|         move.l 17b30 <DOSBase>,d0
    7f62:	|         movea.l d0,a6
    7f64:	|         move.l 108(sp),d1
    7f68:	|         move.l 120(sp),d2
    7f6c:	|         move.l 116(sp),d3
    7f70:	|         jsr -42(a6)
    7f74:	|         move.l d0,132(sp)
    7f78:	|         move.l 132(sp),d0
    7f7c:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    7f80:	|         moveq #8,d0
    7f82:	|         cmp.l 128(sp),d0
    7f86:	|     /-- beq.s 7f96 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    7f88:	|     |   pea 15152 <incbin_player_end+0x2de>
    7f8e:	|     |   jsr 12048 <KPrintF>
    7f94:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    7f96:	|     \-> move.l 14(sp),d1
    7f9a:	|         move.l 17ace <fileTime>,d0
    7fa0:	|         cmp.l d1,d0
    7fa2:	|     /-- bne.s 7fb2 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    7fa4:	|     |   move.l 18(sp),d1
    7fa8:	|     |   move.l 17ad2 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    7fae:	|     |   cmp.l d1,d0
    7fb0:	|  /--|-- beq.s 7fd2 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    7fb2:	|  |  \-> move.l 144(sp),-(sp)
    7fb6:	|  |      pea 1516e <incbin_player_end+0x2fa>
    7fbc:	|  |      pea 15235 <incbin_player_end+0x3c1>
    7fc2:	|  |      jsr 12048 <KPrintF>
    7fc8:	|  |      lea 12(sp),sp
		return FALSE; 
    7fcc:	|  |      clr.w d0
    7fce:	+--|----- bra.w 81ea <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    7fd2:	|  \----> move.l 112(sp),124(sp)
    7fd8:	|         move.l 17b30 <DOSBase>,d0
    7fde:	|         movea.l d0,a6
    7fe0:	|         move.l 124(sp),d1
    7fe4:	|         jsr -306(a6)
    7fe8:	|         move.l d0,136(sp)
    7fec:	|         move.l 136(sp),d0
    7ff0:	|         move.l d0,d0
    7ff2:	|         move.w d0,16000 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    7ff8:	|         move.l 112(sp),100(sp)
    7ffe:	|         move.l 17b30 <DOSBase>,d0
    8004:	|         movea.l d0,a6
    8006:	|         move.l 100(sp),d1
    800a:	|         jsr -306(a6)
    800e:	|         move.l d0,96(sp)
    8012:	|         move.l 96(sp),d0
    8016:	|         move.l d0,d0
    8018:	|         move.w d0,17acc <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    801e:	|         move.l 112(sp),92(sp)
    8024:	|         move.l 17b30 <DOSBase>,d0
    802a:	|         movea.l d0,a6
    802c:	|         move.l 92(sp),d1
    8030:	|         jsr -306(a6)
    8034:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    8038:	|         move.l 112(sp),84(sp)
    803e:	|         move.l 17b30 <DOSBase>,d0
    8044:	|         movea.l d0,a6
    8046:	|         move.l 84(sp),d1
    804a:	|         jsr -306(a6)
    804e:	|         move.l d0,80(sp)
    8052:	|         move.l 80(sp),d0
    8056:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    805a:	|     /-- beq.s 808e <loadGame+0x19a>
		fontNum = get2bytes (fp);
    805c:	|     |   move.l 112(sp),-(sp)
    8060:	|     |   jsr 6bc <get2bytes>
    8066:	|     |   addq.l #4,sp
    8068:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    806c:	|     |   move.l 112(sp),-(sp)
    8070:	|     |   jsr 6bc <get2bytes>
    8076:	|     |   addq.l #4,sp
    8078:	|     |   move.l d0,17c06 <fontHeight>
		charOrder = readString(fp);		
    807e:	|     |   move.l 112(sp),-(sp)
    8082:	|     |   jsr b02 <readString>
    8088:	|     |   addq.l #4,sp
    808a:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    808e:	|     \-> move.l 104(sp),70(sp)
    8094:	|         move.l 17b28 <SysBase>,d0
    809a:	|         movea.l d0,a6
    809c:	|         movea.l 70(sp),a1
    80a0:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    80a4:	|         move.l 112(sp),-(sp)
    80a8:	|         jsr 854 <getSigned>
    80ae:	|         addq.l #4,sp
    80b0:	|         move.w d0,16598 <fontSpace>

	killAllPeople ();
    80b6:	|         jsr 672e <killAllPeople>
	killAllRegions ();
    80bc:	|         jsr 10aec <killAllRegions>

	int camerX = get2bytes (fp);
    80c2:	|         move.l 112(sp),-(sp)
    80c6:	|         jsr 6bc <get2bytes>
    80cc:	|         addq.l #4,sp
    80ce:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    80d2:	|         move.l 112(sp),-(sp)
    80d6:	|         jsr 6bc <get2bytes>
    80dc:	|         addq.l #4,sp
    80de:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    80e2:	|         move.l 112(sp),-(sp)
    80e6:	|         jsr 7d8 <getFloat>
    80ec:	|         addq.l #4,sp
    80ee:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    80f2:	|         move.l 112(sp),54(sp)
    80f8:	|         move.l 17b30 <DOSBase>,d0
    80fe:	|         movea.l d0,a6
    8100:	|         move.l 54(sp),d1
    8104:	|         jsr -306(a6)
    8108:	|         move.l d0,50(sp)
    810c:	|         move.l 50(sp),d0
    8110:	|         move.l d0,d0
    8112:	|         move.b d0,16002 <brightnessLevel>

	loadHandlers (fp);
    8118:	|         move.l 112(sp),-(sp)
    811c:	|         jsr 35a4 <loadHandlers>
    8122:	|         addq.l #4,sp
	loadRegions (fp);
    8124:	|         move.l 112(sp),-(sp)
    8128:	|         jsr 10b48 <loadRegions>
    812e:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    8130:	|         moveq #12,d0
    8132:	|         move.l d0,46(sp)
    8136:	|         clr.l 42(sp)
    813a:	|         move.l 17b28 <SysBase>,d0
    8140:	|         movea.l d0,a6
    8142:	|         move.l 46(sp),d0
    8146:	|         move.l 42(sp),d1
    814a:	|         jsr -684(a6)
    814e:	|         move.l d0,38(sp)
    8152:	|         move.l 38(sp),d0
    8156:	|         move.l d0,17a14 <mouseCursorAnim>
	if (! mouseCursorAnim) {
    815c:	|         move.l 17a14 <mouseCursorAnim>,d0
    8162:	|     /-- bne.s 8176 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    8164:	|     |   pea 1523f <incbin_player_end+0x3cb>
    816a:	|     |   jsr 12048 <KPrintF>
    8170:	|     |   addq.l #4,sp
		return FALSE;
    8172:	|     |   clr.w d0
    8174:	+-----|-- bra.s 81ea <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    8176:	|     \-> jsr 8e0e <nosnapshot>
	if (FGetC (fp)) {
    817c:	|         move.l 112(sp),34(sp)
    8182:	|         move.l 17b30 <DOSBase>,d0
    8188:	|         movea.l d0,a6
    818a:	|         move.l 34(sp),d1
    818e:	|         jsr -306(a6)
    8192:	|         move.l d0,30(sp)
    8196:	|         move.l 30(sp),d0
    819a:	|     /-- beq.s 81b0 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    819c:	|     |   move.l 112(sp),-(sp)
    81a0:	|     |   jsr 8e54 <restoreSnapshot>
    81a6:	|     |   addq.l #4,sp
    81a8:	|     |   tst.w d0
    81aa:	|     +-- bne.s 81b0 <loadGame+0x2bc>
    81ac:	|     |   clr.w d0
    81ae:	+-----|-- bra.s 81ea <loadGame+0x2f6>
	}

	Close (fp);
    81b0:	|     \-> move.l 112(sp),26(sp)
    81b6:	|         move.l 17b30 <DOSBase>,d0
    81bc:	|         movea.l d0,a6
    81be:	|         move.l 26(sp),d1
    81c2:	|         jsr -36(a6)
    81c6:	|         move.l d0,22(sp)
	clearStackLib ();
    81ca:	|         jsr 7eaa <clearStackLib>

	cameraX = camerX;
    81d0:	|         move.l 66(sp),17bcc <cameraX>
	cameraY = camerY;
    81d8:	|         move.l 62(sp),17bd0 <cameraY>
	cameraZoom = camerZ;
    81e0:	|         move.l 58(sp),16032 <cameraZoom>

	return TRUE;
    81e8:	|         moveq #1,d0
}
    81ea:	\-------> movem.l (sp)+,d2-d3/a6
    81ee:	          lea 128(sp),sp
    81f2:	          rts

000081f4 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    81f4:	   /-> lea -64(sp),sp
    81f8:	   |   move.l a6,-(sp)
    81fa:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    81fc:	   |   movea.l 76(sp),a0
    8200:	   |   move.l (a0),d0
    8202:	   |   move.l 80(sp),-(sp)
    8206:	   |   move.l d0,-(sp)
    8208:	   |   jsr 8d0 <put2bytes>
    820e:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    8210:	   |   movea.l 76(sp),a0
    8214:	   |   move.l 40(a0),d0
    8218:	/--|-- beq.s 8254 <saveFunction+0x60>
		FPutC (fp, 1);
    821a:	|  |   move.l 80(sp),52(sp)
    8220:	|  |   moveq #1,d0
    8222:	|  |   move.l d0,48(sp)
    8226:	|  |   move.l 17b30 <DOSBase>,d0
    822c:	|  |   movea.l d0,a6
    822e:	|  |   move.l 52(sp),d1
    8232:	|  |   move.l 48(sp),d2
    8236:	|  |   jsr -312(a6)
    823a:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    823e:	|  |   movea.l 76(sp),a0
    8242:	|  |   move.l 40(a0),d0
    8246:	|  |   move.l 80(sp),-(sp)
    824a:	|  |   move.l d0,-(sp)
    824c:	|  \-- jsr 81f4 <saveFunction>(pc)
    8250:	|      addq.l #8,sp
    8252:	|  /-- bra.s 8276 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    8254:	\--|-> move.l 80(sp),64(sp)
    825a:	   |   clr.l 60(sp)
    825e:	   |   move.l 17b30 <DOSBase>,d0
    8264:	   |   movea.l d0,a6
    8266:	   |   move.l 64(sp),d1
    826a:	   |   move.l 60(sp),d2
    826e:	   |   jsr -312(a6)
    8272:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    8276:	   \-> movea.l 76(sp),a0
    827a:	       move.l 12(a0),d0
    827e:	       move.l 80(sp),-(sp)
    8282:	       move.l d0,-(sp)
    8284:	       jsr 958 <put4bytes>
    828a:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    828c:	       movea.l 76(sp),a0
    8290:	       move.l 36(a0),d0
    8294:	       move.l 80(sp),-(sp)
    8298:	       move.l d0,-(sp)
    829a:	       jsr 8d0 <put2bytes>
    82a0:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    82a2:	       move.l 80(sp),40(sp)
    82a8:	       movea.l 76(sp),a0
    82ac:	       move.w 54(a0),d0
    82b0:	       movea.w d0,a0
    82b2:	       move.l a0,36(sp)
    82b6:	       move.l 17b30 <DOSBase>,d0
    82bc:	       movea.l d0,a6
    82be:	       move.l 40(sp),d1
    82c2:	       move.l 36(sp),d2
    82c6:	       jsr -312(a6)
    82ca:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    82ce:	       move.l 80(sp),28(sp)
    82d4:	       movea.l 76(sp),a0
    82d8:	       move.w 48(a0),d0
    82dc:	       movea.w d0,a0
    82de:	       move.l a0,24(sp)
    82e2:	       move.l 17b30 <DOSBase>,d0
    82e8:	       movea.l d0,a6
    82ea:	       move.l 28(sp),d1
    82ee:	       move.l 24(sp),d2
    82f2:	       jsr -312(a6)
    82f6:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    82fa:	       move.l 80(sp),16(sp)
    8300:	       movea.l 76(sp),a0
    8304:	       move.w 50(a0),d0
    8308:	       movea.w d0,a0
    830a:	       move.l a0,12(sp)
    830e:	       move.l 17b30 <DOSBase>,d0
    8314:	       movea.l d0,a6
    8316:	       move.l 16(sp),d1
    831a:	       move.l 12(sp),d2
    831e:	       jsr -312(a6)
    8322:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    8326:	       moveq #28,d0
    8328:	       add.l 76(sp),d0
    832c:	       move.l 80(sp),-(sp)
    8330:	       move.l d0,-(sp)
    8332:	       jsr 8ab0 <saveVariable>
    8338:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    833a:	       movea.l 76(sp),a0
    833e:	       move.b 56(a0),d0
    8342:	   /-- beq.s 8352 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    8344:	   |   pea 15260 <incbin_player_end+0x3ec>
    834a:	   |   jsr 12048 <KPrintF>
    8350:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    8352:	   \-> movea.l 76(sp),a0
    8356:	       move.l 24(a0),d0
    835a:	       move.l 80(sp),-(sp)
    835e:	       move.l d0,-(sp)
    8360:	       jsr 8924 <saveStack>
    8366:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    8368:	       clr.l 68(sp)
    836c:	   /-- bra.s 8390 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    836e:	/--|-> movea.l 76(sp),a0
    8372:	|  |   move.l 20(a0),d1
    8376:	|  |   move.l 68(sp),d0
    837a:	|  |   lsl.l #3,d0
    837c:	|  |   add.l d1,d0
    837e:	|  |   move.l 80(sp),-(sp)
    8382:	|  |   move.l d0,-(sp)
    8384:	|  |   jsr 8ab0 <saveVariable>
    838a:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    838c:	|  |   addq.l #1,68(sp)
    8390:	|  \-> movea.l 76(sp),a0
    8394:	|      move.l 8(a0),d0
    8398:	|      cmp.l 68(sp),d0
    839c:	\----- bgt.s 836e <saveFunction+0x17a>
	}
}
    839e:	       nop
    83a0:	       nop
    83a2:	       move.l (sp)+,d2
    83a4:	       movea.l (sp)+,a6
    83a6:	       lea 64(sp),sp
    83aa:	       rts

000083ac <saveGame>:

BOOL saveGame (char * fname) {
    83ac:	          lea -272(sp),sp
    83b0:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    83b4:	          move.l 288(sp),268(sp)
    83ba:	          move.l #1006,264(sp)
    83c2:	          move.l 17b30 <DOSBase>,d0
    83c8:	          movea.l d0,a6
    83ca:	          move.l 268(sp),d1
    83ce:	          move.l 264(sp),d2
    83d2:	          jsr -30(a6)
    83d6:	          move.l d0,260(sp)
    83da:	          move.l 260(sp),d0
    83de:	          move.l d0,256(sp)
	if (fp == NULL) {
    83e2:	      /-- bne.s 83f8 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    83e4:	      |   pea 15282 <incbin_player_end+0x40e>
    83ea:	      |   jsr 12048 <KPrintF>
    83f0:	      |   addq.l #4,sp
		return FALSE;
    83f2:	      |   clr.w d0
    83f4:	/-----|-- bra.w 891a <saveGame+0x56e>
	}

	Write( fp, &"SLUDSA", 6);
    83f8:	|     \-> move.l 256(sp),252(sp)
    83fe:	|         move.l #86687,248(sp)
    8406:	|         moveq #6,d0
    8408:	|         move.l d0,244(sp)
    840c:	|         move.l 17b30 <DOSBase>,d0
    8412:	|         movea.l d0,a6
    8414:	|         move.l 252(sp),d1
    8418:	|         move.l 248(sp),d2
    841c:	|         move.l 244(sp),d3
    8420:	|         jsr -48(a6)
    8424:	|         move.l d0,240(sp)
	FPutC (fp, 0);
    8428:	|         move.l 256(sp),236(sp)
    842e:	|         clr.l 232(sp)
    8432:	|         move.l 17b30 <DOSBase>,d0
    8438:	|         movea.l d0,a6
    843a:	|         move.l 236(sp),d1
    843e:	|         move.l 232(sp),d2
    8442:	|         jsr -312(a6)
    8446:	|         move.l d0,228(sp)
	FPutC (fp, 0);
    844a:	|         move.l 256(sp),224(sp)
    8450:	|         clr.l 220(sp)
    8454:	|         move.l 17b30 <DOSBase>,d0
    845a:	|         movea.l d0,a6
    845c:	|         move.l 224(sp),d1
    8460:	|         move.l 220(sp),d2
    8464:	|         jsr -312(a6)
    8468:	|         move.l d0,216(sp)
	FPutC (fp, MAJOR_VERSION);
    846c:	|         move.l 256(sp),212(sp)
    8472:	|         moveq #2,d0
    8474:	|         move.l d0,208(sp)
    8478:	|         move.l 17b30 <DOSBase>,d0
    847e:	|         movea.l d0,a6
    8480:	|         move.l 212(sp),d1
    8484:	|         move.l 208(sp),d2
    8488:	|         jsr -312(a6)
    848c:	|         move.l d0,204(sp)
	FPutC (fp, MINOR_VERSION);
    8490:	|         move.l 256(sp),200(sp)
    8496:	|         moveq #2,d0
    8498:	|         move.l d0,196(sp)
    849c:	|         move.l 17b30 <DOSBase>,d0
    84a2:	|         movea.l d0,a6
    84a4:	|         move.l 200(sp),d1
    84a8:	|         move.l 196(sp),d2
    84ac:	|         jsr -312(a6)
    84b0:	|         move.l d0,192(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    84b4:	|         move.l 256(sp),188(sp)
    84ba:	|         move.l #96974,184(sp)
    84c2:	|         moveq #8,d0
    84c4:	|         move.l d0,180(sp)
    84c8:	|         move.l 17b30 <DOSBase>,d0
    84ce:	|         movea.l d0,a6
    84d0:	|         move.l 188(sp),d1
    84d4:	|         move.l 184(sp),d2
    84d8:	|         move.l 180(sp),d3
    84dc:	|         jsr -48(a6)
    84e0:	|         move.l d0,176(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    84e4:	|         move.l 256(sp),172(sp)
    84ea:	|         move.w 16000 <allowAnyFilename>,d0
    84f0:	|         movea.w d0,a0
    84f2:	|         move.l a0,168(sp)
    84f6:	|         move.l 17b30 <DOSBase>,d0
    84fc:	|         movea.l d0,a6
    84fe:	|         move.l 172(sp),d1
    8502:	|         move.l 168(sp),d2
    8506:	|         jsr -312(a6)
    850a:	|         move.l d0,164(sp)
	FPutC (fp, captureAllKeys);
    850e:	|         move.l 256(sp),160(sp)
    8514:	|         move.w 17acc <captureAllKeys>,d0
    851a:	|         movea.w d0,a0
    851c:	|         move.l a0,156(sp)
    8520:	|         move.l 17b30 <DOSBase>,d0
    8526:	|         movea.l d0,a6
    8528:	|         move.l 160(sp),d1
    852c:	|         move.l 156(sp),d2
    8530:	|         jsr -312(a6)
    8534:	|         move.l d0,152(sp)
	FPutC (fp, TRUE); // updateDisplay
    8538:	|         move.l 256(sp),148(sp)
    853e:	|         moveq #1,d0
    8540:	|         move.l d0,144(sp)
    8544:	|         move.l 17b30 <DOSBase>,d0
    854a:	|         movea.l d0,a6
    854c:	|         move.l 148(sp),d1
    8550:	|         move.l 144(sp),d2
    8554:	|         jsr -312(a6)
    8558:	|         move.l d0,140(sp)
	FPutC (fp, fontTableSize>0);
    855c:	|         move.l 256(sp),136(sp)
    8562:	|         move.l 17c12 <fontTableSize>,d0
    8568:	|         sgt d0
    856a:	|         neg.b d0
    856c:	|         move.b d0,d0
    856e:	|         andi.l #255,d0
    8574:	|         move.l d0,132(sp)
    8578:	|         move.l 17b30 <DOSBase>,d0
    857e:	|         movea.l d0,a6
    8580:	|         move.l 136(sp),d1
    8584:	|         move.l 132(sp),d2
    8588:	|         jsr -312(a6)
    858c:	|         move.l d0,128(sp)

	if (fontTableSize>0) {
    8590:	|         move.l 17c12 <fontTableSize>,d0
    8596:	|     /-- ble.s 85d4 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    8598:	|     |   move.l 17c0a <loadedFontNum>,d0
    859e:	|     |   move.l 256(sp),-(sp)
    85a2:	|     |   move.l d0,-(sp)
    85a4:	|     |   jsr 8d0 <put2bytes>
    85aa:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    85ac:	|     |   move.l 17c06 <fontHeight>,d0
    85b2:	|     |   move.l 256(sp),-(sp)
    85b6:	|     |   move.l d0,-(sp)
    85b8:	|     |   jsr 8d0 <put2bytes>
    85be:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    85c0:	|     |   move.l 17c0e <fontOrderString>,d0
    85c6:	|     |   move.l 256(sp),-(sp)
    85ca:	|     |   move.l d0,-(sp)
    85cc:	|     |   jsr bd8 <writeString>
    85d2:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    85d4:	|     \-> move.w 16598 <fontSpace>,d0
    85da:	|         movea.w d0,a0
    85dc:	|         move.l 256(sp),-(sp)
    85e0:	|         move.l a0,-(sp)
    85e2:	|         jsr a9c <putSigned>
    85e8:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    85ea:	|         move.l 17bcc <cameraX>,d0
    85f0:	|         move.l 256(sp),-(sp)
    85f4:	|         move.l d0,-(sp)
    85f6:	|         jsr 8d0 <put2bytes>
    85fc:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    85fe:	|         move.l 17bd0 <cameraY>,d0
    8604:	|         move.l 256(sp),-(sp)
    8608:	|         move.l d0,-(sp)
    860a:	|         jsr 8d0 <put2bytes>
    8610:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    8612:	|         move.l 16032 <cameraZoom>,d0
    8618:	|         move.l 256(sp),-(sp)
    861c:	|         move.l d0,-(sp)
    861e:	|         jsr a46 <putFloat>
    8624:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    8626:	|         move.l 256(sp),124(sp)
    862c:	|         move.b 16002 <brightnessLevel>,d0
    8632:	|         move.b d0,d0
    8634:	|         andi.l #255,d0
    863a:	|         move.l d0,120(sp)
    863e:	|         move.l 17b30 <DOSBase>,d0
    8644:	|         movea.l d0,a6
    8646:	|         move.l 124(sp),d1
    864a:	|         move.l 120(sp),d2
    864e:	|         jsr -312(a6)
    8652:	|         move.l d0,116(sp)

	// Save event handlers
	saveHandlers (fp);
    8656:	|         move.l 256(sp),-(sp)
    865a:	|         jsr 3b28 <saveHandlers>
    8660:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    8662:	|         move.l 256(sp),-(sp)
    8666:	|         jsr 10d02 <saveRegions>
    866c:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    866e:	|         move.l 17a14 <mouseCursorAnim>,d0
    8674:	|         move.l 256(sp),-(sp)
    8678:	|         move.l d0,-(sp)
    867a:	|         jsr 6c5c <saveAnim>
    8680:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    8682:	|         move.l 17a18 <mouseCursorFrameNum>,d0
    8688:	|         move.l 256(sp),-(sp)
    868c:	|         move.l d0,-(sp)
    868e:	|         jsr 8d0 <put2bytes>
    8694:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    8696:	|         move.l 17ac4 <allRunningFunctions>,276(sp)
	int countFunctions = 0;
    869e:	|         clr.l 272(sp)
	while (thisFunction) {
    86a2:	|     /-- bra.s 86b2 <saveGame+0x306>
		countFunctions ++;
    86a4:	|  /--|-> addq.l #1,272(sp)
		thisFunction = thisFunction -> next;
    86a8:	|  |  |   movea.l 276(sp),a0
    86ac:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    86b2:	|  |  \-> tst.l 276(sp)
    86b6:	|  \----- bne.s 86a4 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    86b8:	|         move.l 256(sp),-(sp)
    86bc:	|         move.l 276(sp),-(sp)
    86c0:	|         jsr 8d0 <put2bytes>
    86c6:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    86c8:	|         move.l 17ac4 <allRunningFunctions>,276(sp)
	while (thisFunction) {
    86d0:	|     /-- bra.s 86ec <saveGame+0x340>
		saveFunction (thisFunction, fp);
    86d2:	|  /--|-> move.l 256(sp),-(sp)
    86d6:	|  |  |   move.l 280(sp),-(sp)
    86da:	|  |  |   jsr 81f4 <saveFunction>
    86e0:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    86e2:	|  |  |   movea.l 276(sp),a0
    86e6:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    86ec:	|  |  \-> tst.l 276(sp)
    86f0:	|  \----- bne.s 86d2 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    86f2:	|         clr.l 280(sp)
    86f6:	|     /-- bra.s 8718 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    86f8:	|  /--|-> move.l 17ada <globalVars>,d1
    86fe:	|  |  |   move.l 280(sp),d0
    8702:	|  |  |   lsl.l #3,d0
    8704:	|  |  |   add.l d1,d0
    8706:	|  |  |   move.l 256(sp),-(sp)
    870a:	|  |  |   move.l d0,-(sp)
    870c:	|  |  |   jsr 8ab0 <saveVariable>
    8712:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    8714:	|  |  |   addq.l #1,280(sp)
    8718:	|  |  \-> move.l 17b00 <numGlobals>,d0
    871e:	|  |      cmp.l 280(sp),d0
    8722:	|  \----- bgt.s 86f8 <saveGame+0x34c>
	}

	savePeople (fp);
    8724:	|         move.l 256(sp),-(sp)
    8728:	|         jsr 6d84 <savePeople>
    872e:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    8730:	|         movea.l 17c1e <currentFloor>,a0
    8736:	|         move.l 8(a0),d0
    873a:	|  /----- beq.s 8778 <saveGame+0x3cc>
		FPutC (fp, 1);
    873c:	|  |      move.l 256(sp),100(sp)
    8742:	|  |      moveq #1,d0
    8744:	|  |      move.l d0,96(sp)
    8748:	|  |      move.l 17b30 <DOSBase>,d0
    874e:	|  |      movea.l d0,a6
    8750:	|  |      move.l 100(sp),d1
    8754:	|  |      move.l 96(sp),d2
    8758:	|  |      jsr -312(a6)
    875c:	|  |      move.l d0,92(sp)
		put2bytes (currentFloor -> originalNum, fp);
    8760:	|  |      movea.l 17c1e <currentFloor>,a0
    8766:	|  |      move.l (a0),d0
    8768:	|  |      move.l 256(sp),-(sp)
    876c:	|  |      move.l d0,-(sp)
    876e:	|  |      jsr 8d0 <put2bytes>
    8774:	|  |      addq.l #8,sp
    8776:	|  |  /-- bra.s 879a <saveGame+0x3ee>
	} else FPutC (fp, 0);
    8778:	|  \--|-> move.l 256(sp),112(sp)
    877e:	|     |   clr.l 108(sp)
    8782:	|     |   move.l 17b30 <DOSBase>,d0
    8788:	|     |   movea.l d0,a6
    878a:	|     |   move.l 112(sp),d1
    878e:	|     |   move.l 108(sp),d2
    8792:	|     |   jsr -312(a6)
    8796:	|     |   move.l d0,104(sp)

	if (zBuffer.tex) {
    879a:	|     \-> move.l 17a98 <zBuffer+0x50>,d0
    87a0:	|  /----- beq.s 87dc <saveGame+0x430>
		FPutC (fp, 1);
    87a2:	|  |      move.l 256(sp),76(sp)
    87a8:	|  |      moveq #1,d0
    87aa:	|  |      move.l d0,72(sp)
    87ae:	|  |      move.l 17b30 <DOSBase>,d0
    87b4:	|  |      movea.l d0,a6
    87b6:	|  |      move.l 76(sp),d1
    87ba:	|  |      move.l 72(sp),d2
    87be:	|  |      jsr -312(a6)
    87c2:	|  |      move.l d0,68(sp)
		put2bytes (zBuffer.originalNum, fp);
    87c6:	|  |      move.l 17a94 <zBuffer+0x4c>,d0
    87cc:	|  |      move.l 256(sp),-(sp)
    87d0:	|  |      move.l d0,-(sp)
    87d2:	|  |      jsr 8d0 <put2bytes>
    87d8:	|  |      addq.l #8,sp
    87da:	|  |  /-- bra.s 87fe <saveGame+0x452>
	} else FPutC (fp,0);
    87dc:	|  \--|-> move.l 256(sp),88(sp)
    87e2:	|     |   clr.l 84(sp)
    87e6:	|     |   move.l 17b30 <DOSBase>,d0
    87ec:	|     |   movea.l d0,a6
    87ee:	|     |   move.l 88(sp),d1
    87f2:	|     |   move.l 84(sp),d2
    87f6:	|     |   jsr -312(a6)
    87fa:	|     |   move.l d0,80(sp)

	FPutC (fp, speechMode);
    87fe:	|     \-> move.l 256(sp),64(sp)
    8804:	|         move.l 17be0 <speechMode>,60(sp)
    880c:	|         move.l 17b30 <DOSBase>,d0
    8812:	|         movea.l d0,a6
    8814:	|         move.l 64(sp),d1
    8818:	|         move.l 60(sp),d2
    881c:	|         jsr -312(a6)
    8820:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    8824:	|         move.b 1656e <fadeMode>,d0
    882a:	|         move.b d0,d0
    882c:	|         andi.l #255,d0
    8832:	|         move.l d0,52(sp)
    8836:	|         move.l 256(sp),48(sp)
    883c:	|         move.l 17b30 <DOSBase>,d0
    8842:	|         movea.l d0,a6
    8844:	|         move.l 52(sp),d1
    8848:	|         move.l 48(sp),d2
    884c:	|         jsr -312(a6)
    8850:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    8854:	|         move.l 17b72 <speech>,d0
    885a:	|         move.l 256(sp),-(sp)
    885e:	|         move.l d0,-(sp)
    8860:	|         jsr 4e46 <saveSpeech>
    8866:	|         addq.l #8,sp
	saveStatusBars (fp);
    8868:	|         move.l 256(sp),-(sp)
    886c:	|         jsr 4842 <saveStatusBars>
    8872:	|         addq.l #4,sp
	saveSounds (fp);
    8874:	|         move.l 256(sp),-(sp)
    8878:	|         jsr 8bf4 <saveSounds>
    887e:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    8880:	|         move.w 17bca <saveEncoding>,d0
    8886:	|         move.w d0,d0
    8888:	|         andi.l #65535,d0
    888e:	|         move.l 256(sp),-(sp)
    8892:	|         move.l d0,-(sp)
    8894:	|         jsr 8d0 <put2bytes>
    889a:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    889c:	|         move.l 17bbc <parallaxStuff>,d0
    88a2:	|         move.l 256(sp),-(sp)
    88a6:	|         move.l d0,-(sp)
    88a8:	|         jsr 8e7a <saveParallaxRecursive>
    88ae:	|         addq.l #8,sp
	FPutC (fp, 0);
    88b0:	|         move.l 256(sp),40(sp)
    88b6:	|         clr.l 36(sp)
    88ba:	|         move.l 17b30 <DOSBase>,d0
    88c0:	|         movea.l d0,a6
    88c2:	|         move.l 40(sp),d1
    88c6:	|         move.l 36(sp),d2
    88ca:	|         jsr -312(a6)
    88ce:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    88d2:	|         move.l 256(sp),28(sp)
    88d8:	|         move.l 16008 <languageNum>,24(sp)
    88e0:	|         move.l 17b30 <DOSBase>,d0
    88e6:	|         movea.l d0,a6
    88e8:	|         move.l 28(sp),d1
    88ec:	|         move.l 24(sp),d2
    88f0:	|         jsr -312(a6)
    88f4:	|         move.l d0,20(sp)

	Close(fp);
    88f8:	|         move.l 256(sp),16(sp)
    88fe:	|         move.l 17b30 <DOSBase>,d0
    8904:	|         movea.l d0,a6
    8906:	|         move.l 16(sp),d1
    890a:	|         jsr -36(a6)
    890e:	|         move.l d0,12(sp)
	clearStackLib ();
    8912:	|         jsr 7eaa <clearStackLib>
	return TRUE;
    8918:	|         moveq #1,d0
}
    891a:	\-------> movem.l (sp)+,d2-d3/a6
    891e:	          lea 272(sp),sp
    8922:	          rts

00008924 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    8924:	       lea -12(sp),sp
	int elements = 0;
    8928:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    892c:	       move.l 16(sp),(sp)
	while (search) {
    8930:	   /-- bra.s 893c <saveStack+0x18>
		elements ++;
    8932:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    8936:	|  |   movea.l (sp),a0
    8938:	|  |   move.l 8(a0),(sp)
	while (search) {
    893c:	|  \-> tst.l (sp)
    893e:	\----- bne.s 8932 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    8940:	       move.l 20(sp),-(sp)
    8944:	       move.l 12(sp),-(sp)
    8948:	       jsr 8d0 <put2bytes>
    894e:	       addq.l #8,sp
	search = vs;
    8950:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    8954:	       clr.l 4(sp)
    8958:	   /-- bra.s 8974 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    895a:	/--|-> move.l (sp),d0
    895c:	|  |   move.l 20(sp),-(sp)
    8960:	|  |   move.l d0,-(sp)
    8962:	|  |   jsr 8ab0 <saveVariable>
    8968:	|  |   addq.l #8,sp
		search = search -> next;
    896a:	|  |   movea.l (sp),a0
    896c:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    8970:	|  |   addq.l #1,4(sp)
    8974:	|  \-> move.l 4(sp),d0
    8978:	|      cmp.l 8(sp),d0
    897c:	\----- blt.s 895a <saveStack+0x36>
	}
}
    897e:	       nop
    8980:	       nop
    8982:	       lea 12(sp),sp
    8986:	       rts

00008988 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    8988:	             lea -44(sp),sp
    898c:	             move.l a6,-(sp)
    898e:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    8990:	             move.l 17ba6 <stackLib>,48(sp)
	int a = 0;
    8998:	             clr.l 44(sp)
	while (s) {
    899c:	      /----- bra.s 89fa <saveStackRef+0x72>
		if (s -> stack == vs) {
    899e:	   /--|----> movea.l 48(sp),a0
    89a2:	   |  |      move.l (a0),d0
    89a4:	   |  |      cmp.l 56(sp),d0
    89a8:	   |  |  /-- bne.s 89ec <saveStackRef+0x64>
			FPutC (fp, 1);
    89aa:	   |  |  |   move.l 60(sp),16(sp)
    89b0:	   |  |  |   moveq #1,d0
    89b2:	   |  |  |   move.l d0,12(sp)
    89b6:	   |  |  |   move.l 17b30 <DOSBase>,d0
    89bc:	   |  |  |   movea.l d0,a6
    89be:	   |  |  |   move.l 16(sp),d1
    89c2:	   |  |  |   move.l 12(sp),d2
    89c6:	   |  |  |   jsr -312(a6)
    89ca:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    89ce:	   |  |  |   move.l 17ba2 <stackLibTotal>,d0
    89d4:	   |  |  |   sub.l 44(sp),d0
    89d8:	   |  |  |   move.l 60(sp),-(sp)
    89dc:	   |  |  |   move.l d0,-(sp)
    89de:	   |  |  |   jsr 8d0 <put2bytes>
    89e4:	   |  |  |   addq.l #8,sp
			return TRUE;
    89e6:	   |  |  |   moveq #1,d0
    89e8:	/--|--|--|-- bra.w 8aa6 <saveStackRef+0x11e>
		}
		s = s -> next;
    89ec:	|  |  |  \-> movea.l 48(sp),a0
    89f0:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    89f6:	|  |  |      addq.l #1,44(sp)
	while (s) {
    89fa:	|  |  \----> tst.l 48(sp)
    89fe:	|  \-------- bne.s 899e <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    8a00:	|            move.l 60(sp),40(sp)
    8a06:	|            clr.l 36(sp)
    8a0a:	|            move.l 17b30 <DOSBase>,d0
    8a10:	|            movea.l d0,a6
    8a12:	|            move.l 40(sp),d1
    8a16:	|            move.l 36(sp),d2
    8a1a:	|            jsr -312(a6)
    8a1e:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    8a22:	|            movea.l 56(sp),a0
    8a26:	|            move.l (a0),d0
    8a28:	|            move.l 60(sp),-(sp)
    8a2c:	|            move.l d0,-(sp)
    8a2e:	|            jsr 8924 <saveStack>
    8a34:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    8a36:	|            moveq #8,d0
    8a38:	|            move.l d0,28(sp)
    8a3c:	|            clr.l 24(sp)
    8a40:	|            move.l 17b28 <SysBase>,d0
    8a46:	|            movea.l d0,a6
    8a48:	|            move.l 28(sp),d0
    8a4c:	|            move.l 24(sp),d1
    8a50:	|            jsr -684(a6)
    8a54:	|            move.l d0,20(sp)
    8a58:	|            move.l 20(sp),d0
    8a5c:	|            move.l d0,48(sp)
	stackLibTotal ++;
    8a60:	|            move.l 17ba2 <stackLibTotal>,d0
    8a66:	|            addq.l #1,d0
    8a68:	|            move.l d0,17ba2 <stackLibTotal>
	if (! s) {
    8a6e:	|            tst.l 48(sp)
    8a72:	|        /-- bne.s 8a86 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    8a74:	|        |   pea 152ce <incbin_player_end+0x45a>
    8a7a:	|        |   jsr 12048 <KPrintF>
    8a80:	|        |   addq.l #4,sp
		return FALSE;
    8a82:	|        |   clr.w d0
    8a84:	+--------|-- bra.s 8aa6 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    8a86:	|        \-> move.l 17ba6 <stackLib>,d0
    8a8c:	|            movea.l 48(sp),a0
    8a90:	|            move.l d0,4(a0)
	s -> stack = vs;
    8a94:	|            movea.l 48(sp),a0
    8a98:	|            move.l 56(sp),(a0)
	stackLib = s;
    8a9c:	|            move.l 48(sp),17ba6 <stackLib>
	return TRUE;
    8aa4:	|            moveq #1,d0
}
    8aa6:	\----------> move.l (sp)+,d2
    8aa8:	             movea.l (sp)+,a6
    8aaa:	             lea 44(sp),sp
    8aae:	             rts

00008ab0 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    8ab0:	          lea -12(sp),sp
    8ab4:	          move.l a6,-(sp)
    8ab6:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    8ab8:	          move.l 28(sp),16(sp)
    8abe:	          movea.l 24(sp),a0
    8ac2:	          move.l (a0),d0
    8ac4:	          move.l d0,12(sp)
    8ac8:	          move.l 17b30 <DOSBase>,d0
    8ace:	          movea.l d0,a6
    8ad0:	          move.l 16(sp),d1
    8ad4:	          move.l 12(sp),d2
    8ad8:	          jsr -312(a6)
    8adc:	          move.l d0,8(sp)
	switch (from -> varType) {
    8ae0:	          movea.l 24(sp),a0
    8ae4:	          move.l (a0),d0
    8ae6:	          moveq #9,d1
    8ae8:	          cmp.l d0,d1
    8aea:	      /-- bcs.w 8b9a <saveVariable+0xea>
    8aee:	      |   add.l d0,d0
    8af0:	      |   movea.l d0,a0
    8af2:	      |   adda.l #35582,a0
    8af8:	      |   move.w (a0),d0
    8afa:	      |   jmp (8afe <saveVariable+0x4e>,pc,d0.w)
    8afe:	      |   ori.l #1310740,(a0)+
    8b04:	      |   ori.b #20,(20,a0,d0.w)
    8b0a:	      |   .short 0x004c
    8b0c:	      |   ori.b #126,(a4)
    8b10:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    8b14:	      |   ori.b #40,(a0)+
    8b18:	      |   ori.b #47,d4
    8b1c:	      |   ori.b #0,(a4)+
    8b20:	      |   jsr 958 <put4bytes>
    8b26:	      |   addq.l #8,sp
		return TRUE;
    8b28:	      |   moveq #1,d0
    8b2a:	/-----|-- bra.w 8bd6 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    8b2e:	|     |   movea.l 24(sp),a0
    8b32:	|     |   move.l 4(a0),d0
    8b36:	|     |   move.l 28(sp),-(sp)
    8b3a:	|     |   move.l d0,-(sp)
    8b3c:	|     |   jsr bd8 <writeString>
    8b42:	|     |   addq.l #8,sp
		return TRUE;
    8b44:	|     |   moveq #1,d0
    8b46:	+-----|-- bra.w 8bd6 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    8b4a:	|     |   movea.l 24(sp),a0
    8b4e:	|     |   move.l 4(a0),d0
    8b52:	|     |   move.l 28(sp),-(sp)
    8b56:	|     |   move.l d0,-(sp)
    8b58:	|     |   jsr 8988 <saveStackRef>
    8b5e:	|     |   addq.l #8,sp
    8b60:	+-----|-- bra.s 8bd6 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    8b62:	|     |   movea.l 24(sp),a0
    8b66:	|     |   move.l 4(a0),d0
    8b6a:	|     |   move.l 28(sp),-(sp)
    8b6e:	|     |   move.l d0,-(sp)
    8b70:	|     |   jsr 6d26 <saveCostume>
    8b76:	|     |   addq.l #8,sp
		return FALSE;
    8b78:	|     |   clr.w d0
    8b7a:	+-----|-- bra.s 8bd6 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    8b7c:	|     |   movea.l 24(sp),a0
    8b80:	|     |   move.l 4(a0),d0
    8b84:	|     |   move.l 28(sp),-(sp)
    8b88:	|     |   move.l d0,-(sp)
    8b8a:	|     |   jsr 6c5c <saveAnim>
    8b90:	|     |   addq.l #8,sp
		return FALSE;
    8b92:	|     |   clr.w d0
    8b94:	+-----|-- bra.s 8bd6 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    8b96:	|     |   clr.w d0
    8b98:	+-----|-- bra.s 8bd6 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    8b9a:	|     \-> movea.l 24(sp),a0
    8b9e:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    8ba0:	|         moveq #10,d1
    8ba2:	|         cmp.l d0,d1
    8ba4:	|  /----- bcs.s 8bbe <saveVariable+0x10e>
						typeName[from->varType] :
    8ba6:	|  |      movea.l 24(sp),a0
    8baa:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    8bac:	|  |      add.l d0,d0
    8bae:	|  |      movea.l d0,a1
    8bb0:	|  |      adda.l d0,a1
    8bb2:	|  |      lea 16570 <typeName>,a0
    8bb8:	|  |      move.l (0,a1,a0.l),d0
    8bbc:	|  |  /-- bra.s 8bc4 <saveVariable+0x114>
    8bbe:	|  \--|-> move.l #86771,d0
    8bc4:	|     \-> move.l d0,-(sp)
    8bc6:	|         pea 152fa <incbin_player_end+0x486>
    8bcc:	|         jsr 12048 <KPrintF>
    8bd2:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    8bd4:	|         moveq #1,d0
    8bd6:	\-------> move.l (sp)+,d2
    8bd8:	          movea.l (sp)+,a6
    8bda:	          lea 12(sp),sp
    8bde:	          rts

00008be0 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    8be0:	moveq #0,d0
}
    8be2:	rts

00008be4 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    8be4:	nop
    8be6:	rts

00008be8 <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    8be8:	nop
    8bea:	rts

00008bec <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    8bec:	moveq #1,d0
}
    8bee:	rts

00008bf0 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    8bf0:	nop
    8bf2:	rts

00008bf4 <saveSounds>:

void saveSounds (BPTR fp) {
    8bf4:	lea -12(sp),sp
    8bf8:	move.l a6,-(sp)
    8bfa:	move.l d2,-(sp)
	FPutC (fp,0);
    8bfc:	move.l 24(sp),16(sp)
    8c02:	clr.l 12(sp)
    8c06:	move.l 17b30 <DOSBase>,d0
    8c0c:	movea.l d0,a6
    8c0e:	move.l 16(sp),d1
    8c12:	move.l 12(sp),d2
    8c16:	jsr -312(a6)
    8c1a:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    8c1e:	move.l 1602e <defSoundVol>,d0
    8c24:	move.l 24(sp),-(sp)
    8c28:	move.l d0,-(sp)
    8c2a:	jsr 8d0 <put2bytes>
    8c30:	addq.l #8,sp
	put2bytes (defVol, fp);
    8c32:	move.l 1602a <defVol>,d0
    8c38:	move.l 24(sp),-(sp)
    8c3c:	move.l d0,-(sp)
    8c3e:	jsr 8d0 <put2bytes>
    8c44:	addq.l #8,sp
}
    8c46:	nop
    8c48:	move.l (sp)+,d2
    8c4a:	movea.l (sp)+,a6
    8c4c:	lea 12(sp),sp
    8c50:	rts

00008c52 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    8c52:	move.l 4(sp),1602a <defVol>
}
    8c5a:	nop
    8c5c:	rts

00008c5e <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    8c5e:	move.l 4(sp),1602e <defSoundVol>
}
    8c66:	nop
    8c68:	rts

00008c6a <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    8c6a:	nop
    8c6c:	rts

00008c6e <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    8c6e:	nop
    8c70:	rts

00008c72 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    8c72:	nop
    8c74:	rts

00008c76 <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    8c76:	subq.l #4,sp
    8c78:	move.l 12(sp),d0
    8c7c:	move.w d0,d0
    8c7e:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    8c82:	moveq #1,d0
}
    8c84:	addq.l #4,sp
    8c86:	rts

00008c88 <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    8c88:	nop
    8c8a:	rts

00008c8c <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	KPrintF("blankScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    8c8c:	pea 1531d <incbin_player_end+0x4a9>
    8c92:	jsr 12048 <KPrintF>
    8c98:	addq.l #4,sp
}
    8c9a:	nop
    8c9c:	rts

00008c9e <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    8c9e:	pea 15357 <incbin_player_end+0x4e3>
    8ca4:	jsr 12048 <KPrintF>
    8caa:	addq.l #4,sp
}
    8cac:	nop
    8cae:	rts

00008cb0 <drawHorizontalLine>:

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    8cb0:	movea.l 8(sp),a1
    8cb4:	movea.l 12(sp),a0
    8cb8:	move.l 8(sp),d1
    8cbc:	move.l 4(sp),d0
    8cc0:	move.l a1,-(sp)
    8cc2:	move.l a0,-(sp)
    8cc4:	move.l d1,-(sp)
    8cc6:	move.l d0,-(sp)
    8cc8:	jsr df4 <drawLine>
    8cce:	lea 16(sp),sp
}
    8cd2:	nop
    8cd4:	rts

00008cd6 <drawVerticalLine>:

void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    8cd6:	movea.l 12(sp),a1
    8cda:	movea.l 4(sp),a0
    8cde:	move.l 8(sp),d1
    8ce2:	move.l 4(sp),d0
    8ce6:	move.l a1,-(sp)
    8ce8:	move.l a0,-(sp)
    8cea:	move.l d1,-(sp)
    8cec:	move.l d0,-(sp)
    8cee:	jsr df4 <drawLine>
    8cf4:	lea 16(sp),sp
}
    8cf8:	nop
    8cfa:	rts

00008cfc <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    8cfc:	pea 15390 <incbin_player_end+0x51c>
    8d02:	jsr 12048 <KPrintF>
    8d08:	addq.l #4,sp
}
    8d0a:	nop
    8d0c:	rts

00008d0e <killBackDrop>:


void killBackDrop () {
	deleteTextures (1, &backdropTextureName);
    8d0e:	pea 17bb6 <backdropTextureName>
    8d14:	pea 1 <_start+0x1>
    8d18:	jsr f76 <deleteTextures>
    8d1e:	addq.l #8,sp
	backdropTextureName = 0;
    8d20:	clr.l 17bb6 <backdropTextureName>
	backdropExists = FALSE;
    8d26:	clr.w 17bba <backdropExists>
}
    8d2c:	nop
    8d2e:	rts

00008d30 <killParallax>:

void killParallax () {
    8d30:	          lea -12(sp),sp
    8d34:	          move.l a6,-(sp)
	while (parallaxStuff) {
    8d36:	   /----- bra.s 8da2 <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    8d38:	/--|----> move.l 17bbc <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    8d40:	|  |      movea.l 12(sp),a0
    8d44:	|  |      move.l 42(a0),d0
    8d48:	|  |      move.l d0,17bbc <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    8d4e:	|  |      move.l 12(sp),d0
    8d52:	|  |      addq.l #4,d0
    8d54:	|  |      move.l d0,-(sp)
    8d56:	|  |      pea 1 <_start+0x1>
    8d5a:	|  |      jsr f76 <deleteTextures>
    8d60:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    8d62:	|  |      movea.l 12(sp),a0
    8d66:	|  |      move.l (a0),d0
    8d68:	|  |  /-- beq.s 8d82 <killParallax+0x52>
    8d6a:	|  |  |   movea.l 12(sp),a0
    8d6e:	|  |  |   move.l (a0),8(sp)
    8d72:	|  |  |   move.l 17b28 <SysBase>,d0
    8d78:	|  |  |   movea.l d0,a6
    8d7a:	|  |  |   movea.l 8(sp),a1
    8d7e:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    8d82:	|  |  \-> tst.l 12(sp)
    8d86:	|  |  /-- beq.s 8d9e <killParallax+0x6e>
    8d88:	|  |  |   move.l 12(sp),4(sp)
    8d8e:	|  |  |   move.l 17b28 <SysBase>,d0
    8d94:	|  |  |   movea.l d0,a6
    8d96:	|  |  |   movea.l 4(sp),a1
    8d9a:	|  |  |   jsr -690(a6)
		k = NULL;
    8d9e:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    8da2:	|  \----> move.l 17bbc <parallaxStuff>,d0
    8da8:	\-------- bne.s 8d38 <killParallax+0x8>
	}
}
    8daa:	          nop
    8dac:	          nop
    8dae:	          movea.l (sp)+,a6
    8db0:	          lea 12(sp),sp
    8db4:	          rts

00008db6 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {

	KPrintF("loadBackDrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    8db6:	pea 153b1 <incbin_player_end+0x53d>
    8dbc:	jsr 12048 <KPrintF>
    8dc2:	addq.l #4,sp
}
    8dc4:	nop
    8dc6:	rts

00008dc8 <loadParallax>:

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    8dc8:	subq.l #8,sp
    8dca:	movea.l 12(sp),a0
    8dce:	move.l 16(sp),d1
    8dd2:	move.l 20(sp),d0
    8dd6:	movea.w a0,a0
    8dd8:	move.w a0,6(sp)
    8ddc:	move.w d1,d1
    8dde:	move.w d1,4(sp)
    8de2:	move.w d0,d0
    8de4:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    8de8:	pea 153eb <incbin_player_end+0x577>
    8dee:	jsr 12048 <KPrintF>
    8df4:	addq.l #4,sp

}
    8df6:	nop
    8df8:	addq.l #8,sp
    8dfa:	rts

00008dfc <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    8dfc:	pea 1540e <incbin_player_end+0x59a>
    8e02:	jsr 12048 <KPrintF>
    8e08:	addq.l #4,sp
}
    8e0a:	nop
    8e0c:	rts

00008e0e <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    8e0e:	pea 17bc0 <snapshotTextureName>
    8e14:	pea 1 <_start+0x1>
    8e18:	jsr f76 <deleteTextures>
    8e1e:	addq.l #8,sp
	snapshotTextureName = 0;
    8e20:	clr.l 17bc0 <snapshotTextureName>
}
    8e26:	nop
    8e28:	rts

00008e2a <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    8e2a:	jsr 8d0e <killBackDrop>
	killParallax ();
    8e30:	jsr 8d30 <killParallax>
	killZBuffer ();
    8e36:	jsr 15ae <killZBuffer>
	sceneWidth = x;
    8e3c:	move.l 4(sp),d0
    8e40:	move.l d0,17bae <sceneWidth>
	sceneHeight = y;
    8e46:	move.l 8(sp),d0
    8e4a:	move.l d0,17bb2 <sceneHeight>
	return TRUE;
    8e50:	moveq #1,d0
}
    8e52:	rts

00008e54 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    8e54:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    8e56:	move.l 12(sp),-(sp)
    8e5a:	jsr 6bc <get2bytes>
    8e60:	addq.l #4,sp
    8e62:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    8e66:	move.l 12(sp),-(sp)
    8e6a:	jsr 6bc <get2bytes>
    8e70:	addq.l #4,sp
    8e72:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    8e74:	moveq #1,d0
}
    8e76:	addq.l #8,sp
    8e78:	rts

00008e7a <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    8e7a:	   /-> lea -12(sp),sp
    8e7e:	   |   move.l a6,-(sp)
    8e80:	   |   move.l d2,-(sp)
	if (me) {
    8e82:	   |   tst.l 24(sp)
    8e86:	/--|-- beq.w 8f1c <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    8e8a:	|  |   movea.l 24(sp),a0
    8e8e:	|  |   move.l 42(a0),d0
    8e92:	|  |   move.l 28(sp),-(sp)
    8e96:	|  |   move.l d0,-(sp)
    8e98:	|  \-- jsr 8e7a <saveParallaxRecursive>(pc)
    8e9c:	|      addq.l #8,sp
		FPutC (fp, 1);
    8e9e:	|      move.l 28(sp),16(sp)
    8ea4:	|      moveq #1,d0
    8ea6:	|      move.l d0,12(sp)
    8eaa:	|      move.l 17b30 <DOSBase>,d0
    8eb0:	|      movea.l d0,a6
    8eb2:	|      move.l 16(sp),d1
    8eb6:	|      move.l 12(sp),d2
    8eba:	|      jsr -312(a6)
    8ebe:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    8ec2:	|      movea.l 24(sp),a0
    8ec6:	|      move.w 28(a0),d0
    8eca:	|      move.w d0,d0
    8ecc:	|      andi.l #65535,d0
    8ed2:	|      move.l 28(sp),-(sp)
    8ed6:	|      move.l d0,-(sp)
    8ed8:	|      jsr 8d0 <put2bytes>
    8ede:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    8ee0:	|      movea.l 24(sp),a0
    8ee4:	|      move.w 30(a0),d0
    8ee8:	|      move.w d0,d0
    8eea:	|      andi.l #65535,d0
    8ef0:	|      move.l 28(sp),-(sp)
    8ef4:	|      move.l d0,-(sp)
    8ef6:	|      jsr 8d0 <put2bytes>
    8efc:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    8efe:	|      movea.l 24(sp),a0
    8f02:	|      move.w 32(a0),d0
    8f06:	|      move.w d0,d0
    8f08:	|      andi.l #65535,d0
    8f0e:	|      move.l 28(sp),-(sp)
    8f12:	|      move.l d0,-(sp)
    8f14:	|      jsr 8d0 <put2bytes>
    8f1a:	|      addq.l #8,sp
	}
}
    8f1c:	\----> nop
    8f1e:	       move.l (sp)+,d2
    8f20:	       movea.l (sp)+,a6
    8f22:	       lea 12(sp),sp
    8f26:	       rts

00008f28 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    8f28:	pea 15447 <incbin_player_end+0x5d3>
    8f2e:	jsr 12048 <KPrintF>
    8f34:	addq.l #4,sp
	return TRUE;
    8f36:	moveq #1,d0
    8f38:	rts

00008f3a <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    8f3a:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    8f3c:	             move.l 17bc4 <allObjectTypes>,(sp)

	while (huntType) {
    8f42:	      /----- bra.s 8f5a <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    8f44:	   /--|----> movea.l (sp),a0
    8f46:	   |  |      move.l 4(a0),d0
    8f4a:	   |  |      cmp.l 8(sp),d0
    8f4e:	   |  |  /-- bne.s 8f54 <findObjectType+0x1a>
    8f50:	   |  |  |   move.l (sp),d0
    8f52:	/--|--|--|-- bra.s 8f6a <findObjectType+0x30>
		huntType = huntType -> next;
    8f54:	|  |  |  \-> movea.l (sp),a0
    8f56:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    8f5a:	|  |  \----> tst.l (sp)
    8f5c:	|  \-------- bne.s 8f44 <findObjectType+0xa>
	}

	return loadObjectType (i);
    8f5e:	|            move.l 8(sp),-(sp)
    8f62:	|            jsr 902a <loadObjectType>
    8f68:	|            addq.l #4,sp
}
    8f6a:	\----------> addq.l #4,sp
    8f6c:	             rts

00008f6e <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    8f6e:	             lea -12(sp),sp
	int i, num = 0;
    8f72:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    8f76:	             move.l 20(sp),-(sp)
    8f7a:	             jsr 8f3a <findObjectType>
    8f80:	             addq.l #4,sp
    8f82:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    8f84:	             clr.l 8(sp)
    8f88:	   /-------- bra.s 8fbe <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    8f8a:	/--|-------> movea.l (sp),a0
    8f8c:	|  |         move.l 38(a0),d1
    8f90:	|  |         move.l 8(sp),d0
    8f94:	|  |         lsl.l #3,d0
    8f96:	|  |         movea.l d1,a0
    8f98:	|  |         adda.l d0,a0
    8f9a:	|  |         move.l (a0),d0
    8f9c:	|  |         cmp.l 16(sp),d0
    8fa0:	|  |  /----- bne.s 8fba <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    8fa2:	|  |  |      movea.l (sp),a0
    8fa4:	|  |  |      move.l 38(a0),d1
    8fa8:	|  |  |      move.l 8(sp),d0
    8fac:	|  |  |      lsl.l #3,d0
    8fae:	|  |  |      movea.l d1,a0
    8fb0:	|  |  |      adda.l d0,a0
    8fb2:	|  |  |      move.l 4(a0),4(sp)
			break;
    8fb8:	|  |  |  /-- bra.s 8fca <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    8fba:	|  |  \--|-> addq.l #1,8(sp)
    8fbe:	|  \-----|-> movea.l (sp),a0
    8fc0:	|        |   move.l 16(a0),d0
    8fc4:	|        |   cmp.l 8(sp),d0
    8fc8:	\--------|-- bgt.s 8f8a <getCombinationFunction+0x1c>
		}
	}

	return num;
    8fca:	         \-> move.l 4(sp),d0
}
    8fce:	             lea 12(sp),sp
    8fd2:	             rts

00008fd4 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    8fd4:	moveq #1,d0
}
    8fd6:	rts

00008fd8 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    8fd8:	subq.l #8,sp
    8fda:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    8fdc:	move.l 16(sp),-(sp)
    8fe0:	jsr 6bc <get2bytes>
    8fe6:	addq.l #4,sp
    8fe8:	move.l d0,-(sp)
    8fea:	jsr 902a <loadObjectType>
    8ff0:	addq.l #4,sp
    8ff2:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    8ff6:	movea.l 8(sp),a0
    8ffa:	move.l (a0),4(sp)
    8ffe:	move.l 17b28 <SysBase>,d0
    9004:	movea.l d0,a6
    9006:	movea.l 4(sp),a1
    900a:	jsr -690(a6)
	r -> screenName = readString (fp);
    900e:	move.l 16(sp),-(sp)
    9012:	jsr b02 <readString>
    9018:	addq.l #4,sp
    901a:	movea.l 8(sp),a0
    901e:	move.l d0,(a0)
	return r;
    9020:	move.l 8(sp),d0
}
    9024:	movea.l (sp)+,a6
    9026:	addq.l #8,sp
    9028:	rts

0000902a <loadObjectType>:

struct objectType * loadObjectType (int i) {
    902a:	          lea -84(sp),sp
    902e:	          move.l a6,-(sp)
    9030:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    9032:	          moveq #42,d0
    9034:	          move.l d0,84(sp)
    9038:	          clr.l 80(sp)
    903c:	          move.l 17b28 <SysBase>,d0
    9042:	          movea.l d0,a6
    9044:	          move.l 84(sp),d0
    9048:	          move.l 80(sp),d1
    904c:	          jsr -684(a6)
    9050:	          move.l d0,76(sp)
    9054:	          move.l 76(sp),d0
    9058:	          move.l d0,72(sp)

    if (newType) {
    905c:	/-------- beq.w 92d6 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    9060:	|         move.l 96(sp),-(sp)
    9064:	|         jsr 3f4c <openObjectSlice>
    906a:	|         addq.l #4,sp
    906c:	|         tst.w d0
    906e:	+-------- beq.w 92d6 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    9072:	|         move.l 17b10 <bigDataFile>,d0
    9078:	|         move.l d0,-(sp)
    907a:	|         jsr 6bc <get2bytes>
    9080:	|         addq.l #4,sp
    9082:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    9086:	|         move.l 17b10 <bigDataFile>,64(sp)
    908e:	|         move.l 17b30 <DOSBase>,d0
    9094:	|         movea.l d0,a6
    9096:	|         move.l 64(sp),d1
    909a:	|         jsr -306(a6)
    909e:	|         move.l d0,60(sp)
    90a2:	|         move.l 60(sp),d0
    90a6:	|         move.l d0,d0
    90a8:	|         movea.l 72(sp),a0
    90ac:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    90b0:	|         move.l 17b10 <bigDataFile>,56(sp)
    90b8:	|         move.l 17b30 <DOSBase>,d0
    90be:	|         movea.l d0,a6
    90c0:	|         move.l 56(sp),d1
    90c4:	|         jsr -306(a6)
    90c8:	|         move.l d0,52(sp)
    90cc:	|         move.l 52(sp),d0
    90d0:	|         move.l d0,d0
    90d2:	|         movea.l 72(sp),a0
    90d6:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    90da:	|         move.l 17b10 <bigDataFile>,48(sp)
    90e2:	|         move.l 17b30 <DOSBase>,d0
    90e8:	|         movea.l d0,a6
    90ea:	|         move.l 48(sp),d1
    90ee:	|         jsr -306(a6)
    90f2:	|         move.l d0,44(sp)
    90f6:	|         move.l 44(sp),d0
    90fa:	|         move.l d0,d0
    90fc:	|         movea.l 72(sp),a0
    9100:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    9104:	|         move.l 17b10 <bigDataFile>,40(sp)
    910c:	|         move.l 17b30 <DOSBase>,d0
    9112:	|         movea.l d0,a6
    9114:	|         move.l 40(sp),d1
    9118:	|         jsr -306(a6)
    911c:	|         move.l d0,36(sp)
    9120:	|         move.l 36(sp),d0
    9124:	|         movea.l 72(sp),a0
    9128:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    912c:	|         move.l 17b10 <bigDataFile>,32(sp)
    9134:	|         move.l 17b30 <DOSBase>,d0
    913a:	|         movea.l d0,a6
    913c:	|         move.l 32(sp),d1
    9140:	|         jsr -306(a6)
    9144:	|         move.l d0,28(sp)
    9148:	|         move.l 28(sp),d0
    914c:	|         movea.l 72(sp),a0
    9150:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    9154:	|         move.l 17b10 <bigDataFile>,d0
    915a:	|         move.l d0,-(sp)
    915c:	|         jsr 718 <get4bytes>
    9162:	|         addq.l #4,sp
    9164:	|         movea.l 72(sp),a0
    9168:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    916c:	|         move.l 17b10 <bigDataFile>,d0
    9172:	|         move.l d0,-(sp)
    9174:	|         jsr 6bc <get2bytes>
    917a:	|         addq.l #4,sp
    917c:	|         movea.l 72(sp),a0
    9180:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    9184:	|         move.l 17b10 <bigDataFile>,24(sp)
    918c:	|         move.l 17b30 <DOSBase>,d0
    9192:	|         movea.l d0,a6
    9194:	|         move.l 24(sp),d1
    9198:	|         jsr -306(a6)
    919c:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    91a0:	|         move.l 17b10 <bigDataFile>,d0
    91a6:	|         move.l d0,-(sp)
    91a8:	|         jsr 7d8 <getFloat>
    91ae:	|         addq.l #4,sp
            getFloat(bigDataFile);
    91b0:	|         move.l 17b10 <bigDataFile>,d0
    91b6:	|         move.l d0,-(sp)
    91b8:	|         jsr 7d8 <getFloat>
    91be:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    91c0:	|         move.l 17b10 <bigDataFile>,d0
    91c6:	|         move.l d0,-(sp)
    91c8:	|         jsr 6bc <get2bytes>
    91ce:	|         addq.l #4,sp
    91d0:	|         move.l d0,d0
    91d2:	|         movea.l 72(sp),a0
    91d6:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    91da:	|         move.l 17b10 <bigDataFile>,d0
    91e0:	|         move.l d0,-(sp)
    91e2:	|         jsr 6bc <get2bytes>
    91e8:	|         addq.l #4,sp
    91ea:	|         movea.l 72(sp),a0
    91ee:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    91f2:	|         movea.l 72(sp),a0
    91f6:	|         move.l 16(a0),d0
    91fa:	|  /----- beq.s 922c <loadObjectType+0x202>
    91fc:	|  |      movea.l 72(sp),a0
    9200:	|  |      move.l 16(a0),d0
    9204:	|  |      lsl.l #3,d0
    9206:	|  |      move.l d0,16(sp)
    920a:	|  |      clr.l 12(sp)
    920e:	|  |      move.l 17b28 <SysBase>,d0
    9214:	|  |      movea.l d0,a6
    9216:	|  |      move.l 16(sp),d0
    921a:	|  |      move.l 12(sp),d1
    921e:	|  |      jsr -684(a6)
    9222:	|  |      move.l d0,8(sp)
    9226:	|  |      move.l 8(sp),d0
    922a:	|  |  /-- bra.s 922e <loadObjectType+0x204>
    922c:	|  \--|-> moveq #0,d0
    922e:	|     \-> movea.l 72(sp),a0
    9232:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    9236:	|         clr.l 88(sp)
    923a:	|     /-- bra.s 928a <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    923c:	|  /--|-> move.l 17b10 <bigDataFile>,d1
    9242:	|  |  |   movea.l 72(sp),a0
    9246:	|  |  |   movea.l 38(a0),a0
    924a:	|  |  |   move.l 88(sp),d0
    924e:	|  |  |   lsl.l #3,d0
    9250:	|  |  |   lea (0,a0,d0.l),a2
    9254:	|  |  |   move.l d1,-(sp)
    9256:	|  |  |   jsr 6bc <get2bytes>
    925c:	|  |  |   addq.l #4,sp
    925e:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    9260:	|  |  |   move.l 17b10 <bigDataFile>,d1
    9266:	|  |  |   movea.l 72(sp),a0
    926a:	|  |  |   movea.l 38(a0),a0
    926e:	|  |  |   move.l 88(sp),d0
    9272:	|  |  |   lsl.l #3,d0
    9274:	|  |  |   lea (0,a0,d0.l),a2
    9278:	|  |  |   move.l d1,-(sp)
    927a:	|  |  |   jsr 6bc <get2bytes>
    9280:	|  |  |   addq.l #4,sp
    9282:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    9286:	|  |  |   addq.l #1,88(sp)
    928a:	|  |  \-> movea.l 72(sp),a0
    928e:	|  |      move.l 16(a0),d0
    9292:	|  |      cmp.l 88(sp),d0
    9296:	|  \----- bgt.s 923c <loadObjectType+0x212>
            }
            finishAccess();
    9298:	|         jsr 3d7c <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    929e:	|         move.l 68(sp),-(sp)
    92a2:	|         jsr 3d86 <getNumberedString>
    92a8:	|         addq.l #4,sp
    92aa:	|         movea.l 72(sp),a0
    92ae:	|         move.l d0,(a0)
            newType->objectNum = i;
    92b0:	|         movea.l 72(sp),a0
    92b4:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    92ba:	|         move.l 17bc4 <allObjectTypes>,d0
    92c0:	|         movea.l 72(sp),a0
    92c4:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    92c8:	|         move.l 72(sp),17bc4 <allObjectTypes>
            return newType;
    92d0:	|         move.l 72(sp),d0
    92d4:	|     /-- bra.s 92d8 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    92d6:	\-----|-> moveq #0,d0
}
    92d8:	      \-> movea.l (sp)+,a2
    92da:	          movea.l (sp)+,a6
    92dc:	          lea 84(sp),sp
    92e0:	          rts

000092e2 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    92e2:	             lea -16(sp),sp
    92e6:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    92e8:	             move.l #97220,16(sp)

	while (* huntRegion) {
    92f0:	   /-------- bra.s 9364 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    92f2:	/--|-------> movea.l 16(sp),a0
    92f6:	|  |         move.l (a0),d0
    92f8:	|  |         cmp.l 24(sp),d0
    92fc:	|  |  /----- bne.s 9356 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    92fe:	|  |  |      movea.l 24(sp),a0
    9302:	|  |  |      move.l 8(a0),d0
    9306:	|  |  |      movea.l 16(sp),a0
    930a:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    930c:	|  |  |      movea.l 24(sp),a0
    9310:	|  |  |      move.l 38(a0),12(sp)
    9316:	|  |  |      move.l 17b28 <SysBase>,d0
    931c:	|  |  |      movea.l d0,a6
    931e:	|  |  |      movea.l 12(sp),a1
    9322:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    9326:	|  |  |      movea.l 24(sp),a0
    932a:	|  |  |      move.l (a0),8(sp)
    932e:	|  |  |      move.l 17b28 <SysBase>,d0
    9334:	|  |  |      movea.l d0,a6
    9336:	|  |  |      movea.l 8(sp),a1
    933a:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    933e:	|  |  |      move.l 24(sp),4(sp)
    9344:	|  |  |      move.l 17b28 <SysBase>,d0
    934a:	|  |  |      movea.l d0,a6
    934c:	|  |  |      movea.l 4(sp),a1
    9350:	|  |  |      jsr -690(a6)
			return;
    9354:	|  |  |  /-- bra.s 937a <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    9356:	|  |  \--|-> movea.l 16(sp),a0
    935a:	|  |     |   move.l (a0),d0
    935c:	|  |     |   move.l d0,d1
    935e:	|  |     |   addq.l #8,d1
    9360:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    9364:	|  \-----|-> movea.l 16(sp),a0
    9368:	|        |   move.l (a0),d0
    936a:	\--------|-- bne.s 92f2 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    936c:	         |   pea 1546e <incbin_player_end+0x5fa>
    9372:	         |   jsr 12048 <KPrintF>
    9378:	         |   addq.l #4,sp
}
    937a:	         \-> movea.l (sp)+,a6
    937c:	             lea 16(sp),sp
    9380:	             rts

00009382 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    9382:	movea.l 4(sp),a0
    9386:	move.l 4(a0),d0
    938a:	move.l 8(sp),-(sp)
    938e:	move.l d0,-(sp)
    9390:	jsr 8d0 <put2bytes>
    9396:	addq.l #8,sp
	writeString (r -> screenName, fp);
    9398:	movea.l 4(sp),a0
    939c:	move.l (a0),d0
    939e:	move.l 8(sp),-(sp)
    93a2:	move.l d0,-(sp)
    93a4:	jsr bd8 <writeString>
    93aa:	addq.l #8,sp
    93ac:	nop
    93ae:	rts

000093b0 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    93b0:	                         lea -112(sp),sp
    93b4:	                         move.l a6,-(sp)
    93b6:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    93b8:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    93bc:	                         move.w 17bca <saveEncoding>,d0
    93c2:	                  /----- beq.s 93cc <fileToStack+0x1c>
    93c4:	                  |      move.l #87188,d0
    93ca:	                  |  /-- bra.s 93d2 <fileToStack+0x22>
    93cc:	                  \--|-> move.l #87214,d0
    93d2:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    93d6:	                         move.l 124(sp),112(sp)
    93dc:	                         move.l #1005,108(sp)
    93e4:	                         move.l 17b30 <DOSBase>,d0
    93ea:	                         movea.l d0,a6
    93ec:	                         move.l 112(sp),d1
    93f0:	                         move.l 108(sp),d2
    93f4:	                         jsr -30(a6)
    93f8:	                         move.l d0,104(sp)
    93fc:	                         move.l 104(sp),d0
    9400:	                         move.l d0,100(sp)
    if (!fp) {
    9404:	                     /-- bne.s 941e <fileToStack+0x6e>
        KPrintF("No such file", filename);
    9406:	                     |   move.l 124(sp),-(sp)
    940a:	                     |   pea 154c5 <incbin_player_end+0x651>
    9410:	                     |   jsr 12048 <KPrintF>
    9416:	                     |   addq.l #8,sp
        return FALSE;
    9418:	                     |   clr.w d0
    941a:	/--------------------|-- bra.w 9714 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    941e:	|                    \-> move.w 17bca <saveEncoding>,d0
    9424:	|                        move.l d0,d0
    9426:	|                        move.b d0,17bc8 <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    942c:	|                        move.w 17bca <saveEncoding>,d0
    9432:	|                        lsr.w #8,d0
    9434:	|                        move.l d0,d0
    9436:	|                        move.b d0,17bc9 <encode2>

    while (*checker) {
    943c:	|                 /----- bra.s 94a0 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    943e:	|              /--|----> move.l 100(sp),30(sp)
    9444:	|              |  |      move.l 17b30 <DOSBase>,d0
    944a:	|              |  |      movea.l d0,a6
    944c:	|              |  |      move.l 30(sp),d1
    9450:	|              |  |      jsr -306(a6)
    9454:	|              |  |      move.l d0,26(sp)
    9458:	|              |  |      move.l 26(sp),d1
    945c:	|              |  |      movea.l 116(sp),a0
    9460:	|              |  |      move.b (a0),d0
    9462:	|              |  |      ext.w d0
    9464:	|              |  |      movea.w d0,a0
    9466:	|              |  |      cmpa.l d1,a0
    9468:	|              |  |  /-- beq.s 949c <fileToStack+0xec>
            Close(fp);
    946a:	|              |  |  |   move.l 100(sp),22(sp)
    9470:	|              |  |  |   move.l 17b30 <DOSBase>,d0
    9476:	|              |  |  |   movea.l d0,a6
    9478:	|              |  |  |   move.l 22(sp),d1
    947c:	|              |  |  |   jsr -36(a6)
    9480:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    9484:	|              |  |  |   move.l 124(sp),-(sp)
    9488:	|              |  |  |   pea 154d2 <incbin_player_end+0x65e>
    948e:	|              |  |  |   jsr 12048 <KPrintF>
    9494:	|              |  |  |   addq.l #8,sp
            return FALSE;
    9496:	|              |  |  |   clr.w d0
    9498:	+--------------|--|--|-- bra.w 9714 <fileToStack+0x364>
        }
        checker++;
    949c:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    94a0:	|              |  \----> movea.l 116(sp),a0
    94a4:	|              |         move.b (a0),d0
    94a6:	|              \-------- bne.s 943e <fileToStack+0x8e>
    }

    if (saveEncoding) {
    94a8:	|                        move.w 17bca <saveEncoding>,d0
    94ae:	|  /-------------------- beq.s 9522 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    94b0:	|  |                     move.l 100(sp),-(sp)
    94b4:	|  |                     jsr 971e <readStringEncoded>
    94ba:	|  |                     addq.l #4,sp
    94bc:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    94c0:	|  |                     pea 15513 <incbin_player_end+0x69f>
    94c6:	|  |                     move.l 100(sp),-(sp)
    94ca:	|  |                     jsr f4a0 <strcmp>
    94d0:	|  |                     addq.l #8,sp
    94d2:	|  |                     tst.l d0
    94d4:	|  |                 /-- beq.s 9508 <fileToStack+0x158>
            Close(fp);
    94d6:	|  |                 |   move.l 100(sp),88(sp)
    94dc:	|  |                 |   move.l 17b30 <DOSBase>,d0
    94e2:	|  |                 |   movea.l d0,a6
    94e4:	|  |                 |   move.l 88(sp),d1
    94e8:	|  |                 |   jsr -36(a6)
    94ec:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    94f0:	|  |                 |   move.l 124(sp),-(sp)
    94f4:	|  |                 |   pea 15522 <incbin_player_end+0x6ae>
    94fa:	|  |                 |   jsr 12048 <KPrintF>
    9500:	|  |                 |   addq.l #8,sp
            return FALSE;
    9502:	|  |                 |   clr.w d0
    9504:	+--|-----------------|-- bra.w 9714 <fileToStack+0x364>
        }
        FreeVec(checker);
    9508:	|  |                 \-> move.l 96(sp),92(sp)
    950e:	|  |                     move.l 17b28 <SysBase>,d0
    9514:	|  |                     movea.l d0,a6
    9516:	|  |                     movea.l 92(sp),a1
    951a:	|  |                     jsr -690(a6)
        checker = NULL;
    951e:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    9522:	|  >-------------------> move.w 17bca <saveEncoding>,d0
    9528:	|  |     /-------------- beq.w 965c <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    952c:	|  |     |               move.l 100(sp),76(sp)
    9532:	|  |     |               move.l 17b30 <DOSBase>,d0
    9538:	|  |     |               movea.l d0,a6
    953a:	|  |     |               move.l 76(sp),d1
    953e:	|  |     |               jsr -306(a6)
    9542:	|  |     |               move.l d0,72(sp)
    9546:	|  |     |               move.l 72(sp),d0
    954a:	|  |     |               move.b 17bc8 <encode1>,d1
    9550:	|  |     |               ext.w d1
    9552:	|  |     |               ext.l d1
    9554:	|  |     |               move.l d0,d2
    9556:	|  |     |               eor.l d1,d2
    9558:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    955c:	|  |     |               moveq #-1,d0
    955e:	|  |     |               cmp.l 68(sp),d0
    9562:	|  |  /--|-------------- beq.w 96f2 <fileToStack+0x342>

            char i = (char) tmp;
    9566:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    956c:	|  |  |  |               move.b 67(sp),d0
    9570:	|  |  |  |               ext.w d0
    9572:	|  |  |  |               movea.w d0,a0
    9574:	|  |  |  |               moveq #2,d2
    9576:	|  |  |  |               cmp.l a0,d2
    9578:	|  |  |  |     /-------- beq.s 95f4 <fileToStack+0x244>
    957a:	|  |  |  |     |         moveq #2,d0
    957c:	|  |  |  |     |         cmp.l a0,d0
    957e:	|  |  |  |  /--|-------- blt.w 962a <fileToStack+0x27a>
    9582:	|  |  |  |  |  |         cmpa.w #0,a0
    9586:	|  |  |  |  |  |     /-- beq.s 9592 <fileToStack+0x1e2>
    9588:	|  |  |  |  |  |     |   moveq #1,d2
    958a:	|  |  |  |  |  |     |   cmp.l a0,d2
    958c:	|  |  |  |  |  |  /--|-- beq.s 95ce <fileToStack+0x21e>
    958e:	|  |  |  |  +--|--|--|-- bra.w 962a <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    9592:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    9596:	|  |  |  |  |  |  |      jsr 971e <readStringEncoded>
    959c:	|  |  |  |  |  |  |      addq.l #4,sp
    959e:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    95a2:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    95a6:	|  |  |  |  |  |  |      lea 14(sp),a0
    95aa:	|  |  |  |  |  |  |      move.l a0,-(sp)
    95ac:	|  |  |  |  |  |  |      jsr 10216 <makeTextVar>
    95b2:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    95b4:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    95ba:	|  |  |  |  |  |  |      move.l 17b28 <SysBase>,d0
    95c0:	|  |  |  |  |  |  |      movea.l d0,a6
    95c2:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    95c6:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    95ca:	|  |  |  |  |  |  |  /-- bra.w 9682 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    95ce:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    95d2:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    95d8:	|  |  |  |  |  |     |   addq.l #4,sp
    95da:	|  |  |  |  |  |     |   move.l d0,-(sp)
    95dc:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    95e0:	|  |  |  |  |  |     |   lea 18(sp),a0
    95e4:	|  |  |  |  |  |     |   move.l a0,-(sp)
    95e6:	|  |  |  |  |  |     |   jsr 108e6 <setVariable>
    95ec:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    95f0:	|  |  |  |  |  |     +-- bra.w 9682 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    95f4:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    95fa:	|  |  |  |  |        |   move.l 17b30 <DOSBase>,d0
    9600:	|  |  |  |  |        |   movea.l d0,a6
    9602:	|  |  |  |  |        |   move.l 62(sp),d1
    9606:	|  |  |  |  |        |   jsr -306(a6)
    960a:	|  |  |  |  |        |   move.l d0,58(sp)
    960e:	|  |  |  |  |        |   move.l 58(sp),d0
    9612:	|  |  |  |  |        |   move.l d0,-(sp)
    9614:	|  |  |  |  |        |   pea 1 <_start+0x1>
    9618:	|  |  |  |  |        |   lea 18(sp),a0
    961c:	|  |  |  |  |        |   move.l a0,-(sp)
    961e:	|  |  |  |  |        |   jsr 108e6 <setVariable>
    9624:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    9628:	|  |  |  |  |        +-- bra.s 9682 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    962a:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    962e:	|  |  |  |           |   pea 155a4 <incbin_player_end+0x730>
    9634:	|  |  |  |           |   jsr 12048 <KPrintF>
    963a:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    963c:	|  |  |  |           |   move.l 100(sp),46(sp)
    9642:	|  |  |  |           |   move.l 17b30 <DOSBase>,d0
    9648:	|  |  |  |           |   movea.l d0,a6
    964a:	|  |  |  |           |   move.l 46(sp),d1
    964e:	|  |  |  |           |   jsr -36(a6)
    9652:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    9656:	|  |  |  |           |   clr.w d0
    9658:	+--|--|--|-----------|-- bra.w 9714 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    965c:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    9660:	|  |  |              |   jsr 97e4 <readTextPlain>
    9666:	|  |  |              |   addq.l #4,sp
    9668:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    966c:	|  |  |        /-----|-- beq.w 96f6 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    9670:	|  |  |        |     |   move.l 80(sp),-(sp)
    9674:	|  |  |        |     |   lea 14(sp),a0
    9678:	|  |  |        |     |   move.l a0,-(sp)
    967a:	|  |  |        |     |   jsr 10216 <makeTextVar>
    9680:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    9682:	|  |  |        |     \-> movea.l 128(sp),a0
    9686:	|  |  |        |         move.l (a0),d0
    9688:	|  |  |        |  /----- bne.s 96b8 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    968a:	|  |  |        |  |      move.l 128(sp),d0
    968e:	|  |  |        |  |      move.l d0,-(sp)
    9690:	|  |  |        |  |      lea 14(sp),a0
    9694:	|  |  |        |  |      move.l a0,-(sp)
    9696:	|  |  |        |  |      jsr f8b6 <addVarToStackQuick>
    969c:	|  |  |        |  |      addq.l #8,sp
    969e:	|  |  |        |  |      tst.w d0
    96a0:	|  |  |        |  |  /-- bne.s 96a6 <fileToStack+0x2f6>
    96a2:	|  |  |        |  |  |   clr.w d0
    96a4:	+--|--|--------|--|--|-- bra.s 9714 <fileToStack+0x364>
            sH->last = sH->first;
    96a6:	|  |  |        |  |  \-> movea.l 128(sp),a0
    96aa:	|  |  |        |  |      move.l (a0),d0
    96ac:	|  |  |        |  |      movea.l 128(sp),a0
    96b0:	|  |  |        |  |      move.l d0,4(a0)
    96b4:	|  +--|--------|--|----- bra.w 9522 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    96b8:	|  |  |        |  \----> movea.l 128(sp),a0
    96bc:	|  |  |        |         move.l 4(a0),d0
    96c0:	|  |  |        |         addq.l #8,d0
    96c2:	|  |  |        |         move.l d0,-(sp)
    96c4:	|  |  |        |         lea 14(sp),a0
    96c8:	|  |  |        |         move.l a0,-(sp)
    96ca:	|  |  |        |         jsr f8b6 <addVarToStackQuick>
    96d0:	|  |  |        |         addq.l #8,sp
    96d2:	|  |  |        |         tst.w d0
    96d4:	|  |  |        |     /-- bne.s 96da <fileToStack+0x32a>
    96d6:	|  |  |        |     |   clr.w d0
    96d8:	+--|--|--------|-----|-- bra.s 9714 <fileToStack+0x364>
            sH->last = sH->last->next;
    96da:	|  |  |        |     \-> movea.l 128(sp),a0
    96de:	|  |  |        |         movea.l 4(a0),a0
    96e2:	|  |  |        |         move.l 8(a0),d0
    96e6:	|  |  |        |         movea.l 128(sp),a0
    96ea:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    96ee:	|  \--|--------|-------- bra.w 9522 <fileToStack+0x172>
            if (tmp == -1) break;
    96f2:	|     \--------|-------> nop
    96f4:	|              |     /-- bra.s 96f8 <fileToStack+0x348>
            if (!line) break;
    96f6:	|              \-----|-> nop
        }
    }
    Close(fp);
    96f8:	|                    \-> move.l 100(sp),38(sp)
    96fe:	|                        move.l 17b30 <DOSBase>,d0
    9704:	|                        movea.l d0,a6
    9706:	|                        move.l 38(sp),d1
    970a:	|                        jsr -36(a6)
    970e:	|                        move.l d0,34(sp)
    return TRUE;
    9712:	|                        moveq #1,d0
}
    9714:	\----------------------> move.l (sp)+,d2
    9716:	                         movea.l (sp)+,a6
    9718:	                         lea 112(sp),sp
    971c:	                         rts

0000971e <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    971e:	          lea -32(sp),sp
    9722:	          move.l a6,-(sp)
    9724:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    9726:	          move.l 44(sp),-(sp)
    972a:	          jsr 6bc <get2bytes>
    9730:	          addq.l #4,sp
    9732:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    9736:	          move.l 32(sp),d0
    973a:	          addq.l #1,d0
    973c:	          move.l d0,28(sp)
    9740:	          clr.l 24(sp)
    9744:	          move.l 17b28 <SysBase>,d0
    974a:	          movea.l d0,a6
    974c:	          move.l 28(sp),d0
    9750:	          move.l 24(sp),d1
    9754:	          jsr -684(a6)
    9758:	          move.l d0,20(sp)
    975c:	          move.l 20(sp),d0
    9760:	          move.l d0,16(sp)
    if (!s) return NULL;
    9764:	      /-- bne.s 976a <readStringEncoded+0x4c>
    9766:	      |   moveq #0,d0
    9768:	/-----|-- bra.s 97da <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    976a:	|     \-> clr.l 36(sp)
    976e:	|     /-- bra.s 97c0 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    9770:	|  /--|-> move.l 44(sp),12(sp)
    9776:	|  |  |   move.l 17b30 <DOSBase>,d0
    977c:	|  |  |   movea.l d0,a6
    977e:	|  |  |   move.l 12(sp),d1
    9782:	|  |  |   jsr -306(a6)
    9786:	|  |  |   move.l d0,8(sp)
    978a:	|  |  |   move.l 8(sp),d0
    978e:	|  |  |   move.l d0,d1
    9790:	|  |  |   move.b 17bc8 <encode1>,d2
    9796:	|  |  |   move.l 36(sp),d0
    979a:	|  |  |   movea.l 16(sp),a0
    979e:	|  |  |   adda.l d0,a0
    97a0:	|  |  |   move.b d1,d0
    97a2:	|  |  |   eor.b d2,d0
    97a4:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    97a6:	|  |  |   move.b 17bc8 <encode1>,d0
    97ac:	|  |  |   move.b d0,d1
    97ae:	|  |  |   move.b 17bc9 <encode2>,d0
    97b4:	|  |  |   add.b d1,d0
    97b6:	|  |  |   move.b d0,17bc8 <encode1>
    for (a = 0; a < len; a++) {
    97bc:	|  |  |   addq.l #1,36(sp)
    97c0:	|  |  \-> move.l 36(sp),d0
    97c4:	|  |      cmp.l 32(sp),d0
    97c8:	|  \----- blt.s 9770 <readStringEncoded+0x52>
    }
    s[len] = 0;
    97ca:	|         move.l 32(sp),d0
    97ce:	|         movea.l 16(sp),a0
    97d2:	|         adda.l d0,a0
    97d4:	|         clr.b (a0)
    return s;
    97d6:	|         move.l 16(sp),d0
}
    97da:	\-------> move.l (sp)+,d2
    97dc:	          movea.l (sp)+,a6
    97de:	          lea 32(sp),sp
    97e2:	          rts

000097e4 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    97e4:	             lea -104(sp),sp
    97e8:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    97ec:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    97f0:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    97f6:	             move.l 124(sp),106(sp)
    97fc:	             clr.l 102(sp)
    9800:	             clr.l 98(sp)
    9804:	             move.l 17b30 <DOSBase>,d0
    980a:	             movea.l d0,a6
    980c:	             move.l 106(sp),d1
    9810:	             move.l 102(sp),d2
    9814:	             move.l 98(sp),d3
    9818:	             jsr -66(a6)
    981c:	             move.l d0,94(sp)
    9820:	             move.l 94(sp),d0
    9824:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    9828:	   /-------- bra.s 986c <readTextPlain+0x88>
        tmp = FGetC(fp);
    982a:	/--|-------> move.l 124(sp),22(sp)
    9830:	|  |         move.l 17b30 <DOSBase>,d0
    9836:	|  |         movea.l d0,a6
    9838:	|  |         move.l 22(sp),d1
    983c:	|  |         jsr -306(a6)
    9840:	|  |         move.l d0,18(sp)
    9844:	|  |         move.l 18(sp),d0
    9848:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    984c:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    9852:	|  |         cmpi.b #10,17(sp)
    9858:	|  |  /----- beq.s 9862 <readTextPlain+0x7e>
    985a:	|  |  |      moveq #-1,d0
    985c:	|  |  |      cmp.l 110(sp),d0
    9860:	|  |  |  /-- bne.s 9868 <readTextPlain+0x84>
            keepGoing = FALSE;
    9862:	|  |  \--|-> clr.w 114(sp)
    9866:	|  +-----|-- bra.s 986c <readTextPlain+0x88>
        } else {
            stringSize++;
    9868:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    986c:	|  \-------> tst.w 114(sp)
    9870:	\----------- bne.s 982a <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    9872:	             tst.l 116(sp)
    9876:	         /-- bne.s 9886 <readTextPlain+0xa2>
    9878:	         |   moveq #-1,d0
    987a:	         |   cmp.l 110(sp),d0
    987e:	         +-- bne.s 9886 <readTextPlain+0xa2>
        return NULL;
    9880:	         |   moveq #0,d0
    9882:	      /--|-- bra.w 996c <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    9886:	      |  \-> move.l 124(sp),86(sp)
    988c:	      |      move.l 90(sp),82(sp)
    9892:	      |      moveq #-1,d0
    9894:	      |      move.l d0,78(sp)
    9898:	      |      move.l 17b30 <DOSBase>,d0
    989e:	      |      movea.l d0,a6
    98a0:	      |      move.l 86(sp),d1
    98a4:	      |      move.l 82(sp),d2
    98a8:	      |      move.l 78(sp),d3
    98ac:	      |      jsr -66(a6)
    98b0:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    98b4:	      |      move.l 116(sp),d0
    98b8:	      |      addq.l #1,d0
    98ba:	      |      move.l d0,70(sp)
    98be:	      |      clr.l 66(sp)
    98c2:	      |      move.l 17b28 <SysBase>,d0
    98c8:	      |      movea.l d0,a6
    98ca:	      |      move.l 70(sp),d0
    98ce:	      |      move.l 66(sp),d1
    98d2:	      |      jsr -684(a6)
    98d6:	      |      move.l d0,62(sp)
    98da:	      |      move.l 62(sp),d0
    98de:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    98e2:	      |  /-- bne.s 98ea <readTextPlain+0x106>
    98e4:	      |  |   moveq #0,d0
    98e6:	      +--|-- bra.w 996c <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    98ea:	      |  \-> move.l 124(sp),54(sp)
    98f0:	      |      move.l 58(sp),50(sp)
    98f6:	      |      moveq #1,d0
    98f8:	      |      move.l d0,46(sp)
    98fc:	      |      move.l 116(sp),42(sp)
    9902:	      |      move.l 17b30 <DOSBase>,d0
    9908:	      |      movea.l d0,a6
    990a:	      |      move.l 54(sp),d1
    990e:	      |      move.l 50(sp),d2
    9912:	      |      move.l 46(sp),d3
    9916:	      |      move.l 42(sp),d4
    991a:	      |      jsr -324(a6)
    991e:	      |      move.l d0,38(sp)
    9922:	      |      move.l 38(sp),d0
    9926:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    992a:	      |      move.l 34(sp),d0
    992e:	      |      cmp.l 116(sp),d0
    9932:	      |  /-- beq.s 9942 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    9934:	      |  |   pea 155d9 <incbin_player_end+0x765>
    993a:	      |  |   jsr 12048 <KPrintF>
    9940:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    9942:	      |  \-> move.l 124(sp),30(sp)
    9948:	      |      move.l 17b30 <DOSBase>,d0
    994e:	      |      movea.l d0,a6
    9950:	      |      move.l 30(sp),d1
    9954:	      |      jsr -306(a6)
    9958:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    995c:	      |      move.l 116(sp),d0
    9960:	      |      movea.l 58(sp),a0
    9964:	      |      adda.l d0,a0
    9966:	      |      clr.b (a0)
    }

    return reply;
    9968:	      |      move.l 58(sp),d0
}
    996c:	      \----> movem.l (sp)+,d2-d4/a6
    9970:	             lea 104(sp),sp
    9974:	             rts

00009976 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    9976:	                      lea -144(sp),sp
    997a:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    997e:	                      move.l 160(sp),148(sp)
    9984:	                      move.l #1006,144(sp)
    998c:	                      move.l 17b30 <DOSBase>,d0
    9992:	                      movea.l d0,a6
    9994:	                      move.l 148(sp),d1
    9998:	                      move.l 144(sp),d2
    999c:	                      jsr -30(a6)
    99a0:	                      move.l d0,140(sp)
    99a4:	                      move.l 140(sp),d0
    99a8:	                      move.l d0,136(sp)

    if (!fp) {
    99ac:	                  /-- bne.s 99c6 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    99ae:	                  |   move.l 160(sp),-(sp)
    99b2:	                  |   pea 155fa <incbin_player_end+0x786>
    99b8:	                  |   jsr 12048 <KPrintF>
    99be:	                  |   addq.l #8,sp
        return FALSE;
    99c0:	                  |   clr.w d0
    99c2:	/-----------------|-- bra.w 9c82 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    99c6:	|                 \-> movea.l 164(sp),a0
    99ca:	|                     movea.l 4(a0),a0
    99ce:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    99d2:	|                     move.w 17bca <saveEncoding>,d0
    99d8:	|                     move.l d0,d0
    99da:	|                     move.b d0,17bc8 <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    99e0:	|                     move.w 17bca <saveEncoding>,d0
    99e6:	|                     lsr.w #8,d0
    99e8:	|                     move.l d0,d0
    99ea:	|                     move.b d0,17bc9 <encode2>

    if (saveEncoding) {
    99f0:	|                     move.w 17bca <saveEncoding>,d0
    99f6:	|                 /-- beq.s 9a48 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    99f8:	|                 |   move.l 136(sp),116(sp)
    99fe:	|                 |   move.l #87188,112(sp)
    9a06:	|                 |   moveq #99,d0
    9a08:	|                 |   not.b d0
    9a0a:	|                 |   add.l sp,d0
    9a0c:	|                 |   addi.l #-144,d0
    9a12:	|                 |   move.l d0,108(sp)
    9a16:	|                 |   move.l 17b30 <DOSBase>,d0
    9a1c:	|                 |   movea.l d0,a6
    9a1e:	|                 |   move.l 116(sp),d1
    9a22:	|                 |   move.l 112(sp),d2
    9a26:	|                 |   move.l 108(sp),d3
    9a2a:	|                 |   jsr -354(a6)
    9a2e:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    9a32:	|                 |   move.l 136(sp),-(sp)
    9a36:	|                 |   pea 15513 <incbin_player_end+0x69f>
    9a3c:	|                 |   jsr 9c8c <writeStringEncoded>
    9a42:	|                 |   addq.l #8,sp
    9a44:	|  /--------------|-- bra.w 9c5a <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    9a48:	|  |              \-> move.l 136(sp),132(sp)
    9a4e:	|  |                  move.l #87214,128(sp)
    9a56:	|  |                  moveq #99,d1
    9a58:	|  |                  not.b d1
    9a5a:	|  |                  add.l sp,d1
    9a5c:	|  |                  addi.l #-144,d1
    9a62:	|  |                  move.l d1,124(sp)
    9a66:	|  |                  move.l 17b30 <DOSBase>,d0
    9a6c:	|  |                  movea.l d0,a6
    9a6e:	|  |                  move.l 132(sp),d1
    9a72:	|  |                  move.l 128(sp),d2
    9a76:	|  |                  move.l 124(sp),d3
    9a7a:	|  |                  jsr -354(a6)
    9a7e:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    9a82:	|  +----------------- bra.w 9c5a <stackToFile+0x2e4>
        if (saveEncoding) {
    9a86:	|  |  /-------------> move.w 17bca <saveEncoding>,d0
    9a8c:	|  |  |     /-------- beq.w 9bde <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    9a90:	|  |  |     |         movea.l 152(sp),a0
    9a94:	|  |  |     |         move.l (a0),d0
    9a96:	|  |  |     |         moveq #1,d1
    9a98:	|  |  |     |         cmp.l d0,d1
    9a9a:	|  |  |     |     /-- beq.s 9aea <stackToFile+0x174>
    9a9c:	|  |  |     |     |   moveq #3,d1
    9a9e:	|  |  |     |     |   cmp.l d0,d1
    9aa0:	|  |  |     |  /--|-- bne.w 9bac <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    9aa4:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    9aaa:	|  |  |     |  |  |   move.b 17bc8 <encode1>,d0
    9ab0:	|  |  |     |  |  |   ext.w d0
    9ab2:	|  |  |     |  |  |   movea.w d0,a0
    9ab4:	|  |  |     |  |  |   move.l a0,72(sp)
    9ab8:	|  |  |     |  |  |   move.l 17b30 <DOSBase>,d0
    9abe:	|  |  |     |  |  |   movea.l d0,a6
    9ac0:	|  |  |     |  |  |   move.l 76(sp),d1
    9ac4:	|  |  |     |  |  |   move.l 72(sp),d2
    9ac8:	|  |  |     |  |  |   jsr -312(a6)
    9acc:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    9ad0:	|  |  |     |  |  |   movea.l 152(sp),a0
    9ad4:	|  |  |     |  |  |   move.l 4(a0),d0
    9ad8:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    9adc:	|  |  |     |  |  |   move.l d0,-(sp)
    9ade:	|  |  |     |  |  |   jsr 9c8c <writeStringEncoded>
    9ae4:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    9ae6:	|  |  |  /--|--|--|-- bra.w 9c50 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    9aea:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    9aee:	|  |  |  |  |  |      move.l 4(a0),d0
    9af2:	|  |  |  |  |  |  /-- bmi.s 9b62 <stackToFile+0x1ec>
    9af4:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    9af8:	|  |  |  |  |  |  |   move.l 4(a0),d0
    9afc:	|  |  |  |  |  |  |   cmpi.l #255,d0
    9b02:	|  |  |  |  |  |  +-- bgt.s 9b62 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    9b04:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    9b0a:	|  |  |  |  |  |  |   move.b 17bc8 <encode1>,d0
    9b10:	|  |  |  |  |  |  |   eori.b #2,d0
    9b14:	|  |  |  |  |  |  |   ext.w d0
    9b16:	|  |  |  |  |  |  |   movea.w d0,a0
    9b18:	|  |  |  |  |  |  |   move.l a0,60(sp)
    9b1c:	|  |  |  |  |  |  |   move.l 17b30 <DOSBase>,d0
    9b22:	|  |  |  |  |  |  |   movea.l d0,a6
    9b24:	|  |  |  |  |  |  |   move.l 64(sp),d1
    9b28:	|  |  |  |  |  |  |   move.l 60(sp),d2
    9b2c:	|  |  |  |  |  |  |   jsr -312(a6)
    9b30:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    9b34:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    9b3a:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    9b3e:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    9b44:	|  |  |  |  |  |  |   move.l 17b30 <DOSBase>,d0
    9b4a:	|  |  |  |  |  |  |   movea.l d0,a6
    9b4c:	|  |  |  |  |  |  |   move.l 52(sp),d1
    9b50:	|  |  |  |  |  |  |   move.l 48(sp),d2
    9b54:	|  |  |  |  |  |  |   jsr -312(a6)
    9b58:	|  |  |  |  |  |  |   move.l d0,44(sp)
    9b5c:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    9b5e:	|  |  |  +--|--|--|-- bra.w 9c50 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    9b62:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    9b68:	|  |  |  |  |  |      move.b 17bc8 <encode1>,d0
    9b6e:	|  |  |  |  |  |      eori.b #1,d0
    9b72:	|  |  |  |  |  |      ext.w d0
    9b74:	|  |  |  |  |  |      movea.w d0,a0
    9b76:	|  |  |  |  |  |      move.l a0,36(sp)
    9b7a:	|  |  |  |  |  |      move.l 17b30 <DOSBase>,d0
    9b80:	|  |  |  |  |  |      movea.l d0,a6
    9b82:	|  |  |  |  |  |      move.l 40(sp),d1
    9b86:	|  |  |  |  |  |      move.l 36(sp),d2
    9b8a:	|  |  |  |  |  |      jsr -312(a6)
    9b8e:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    9b92:	|  |  |  |  |  |      movea.l 152(sp),a0
    9b96:	|  |  |  |  |  |      move.l 4(a0),d0
    9b9a:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    9b9e:	|  |  |  |  |  |      move.l d0,-(sp)
    9ba0:	|  |  |  |  |  |      jsr 958 <put4bytes>
    9ba6:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    9ba8:	|  |  |  +--|--|----- bra.w 9c50 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    9bac:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    9bb0:	|  |  |  |  |         pea 1560c <incbin_player_end+0x798>
    9bb6:	|  |  |  |  |         jsr 12048 <KPrintF>
    9bbc:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    9bbe:	|  |  |  |  |         move.l 136(sp),28(sp)
    9bc4:	|  |  |  |  |         move.l 17b30 <DOSBase>,d0
    9bca:	|  |  |  |  |         movea.l d0,a6
    9bcc:	|  |  |  |  |         move.l 28(sp),d1
    9bd0:	|  |  |  |  |         jsr -36(a6)
    9bd4:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    9bd8:	|  |  |  |  |         clr.w d0
    9bda:	+--|--|--|--|-------- bra.w 9c82 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    9bde:	|  |  |  |  \-------> move.l 152(sp),d0
    9be2:	|  |  |  |            move.l d0,-(sp)
    9be4:	|  |  |  |            jsr 105ca <getTextFromAnyVar>
    9bea:	|  |  |  |            addq.l #4,sp
    9bec:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    9bf0:	|  |  |  |     /----- beq.s 9c64 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    9bf2:	|  |  |  |     |      movea.l 100(sp),a0
    9bf6:	|  |  |  |     |      move.b (a0),d0
    9bf8:	|  |  |  |     |      ext.w d0
    9bfa:	|  |  |  |     |      movea.w d0,a0
    9bfc:	|  |  |  |     |      move.l a0,12(sp)
    9c00:	|  |  |  |     |      move.l 136(sp),96(sp)
    9c06:	|  |  |  |     |      move.l #87656,92(sp)
    9c0e:	|  |  |  |     |      moveq #99,d0
    9c10:	|  |  |  |     |      not.b d0
    9c12:	|  |  |  |     |      add.l sp,d0
    9c14:	|  |  |  |     |      addi.l #-144,d0
    9c1a:	|  |  |  |     |      move.l d0,88(sp)
    9c1e:	|  |  |  |     |      move.l 17b30 <DOSBase>,d0
    9c24:	|  |  |  |     |      movea.l d0,a6
    9c26:	|  |  |  |     |      move.l 96(sp),d1
    9c2a:	|  |  |  |     |      move.l 92(sp),d2
    9c2e:	|  |  |  |     |      move.l 88(sp),d3
    9c32:	|  |  |  |     |      jsr -354(a6)
    9c36:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    9c3a:	|  |  |  |     |      move.l 100(sp),80(sp)
    9c40:	|  |  |  |     |      move.l 17b28 <SysBase>,d0
    9c46:	|  |  |  |     |      movea.l d0,a6
    9c48:	|  |  |  |     |      movea.l 80(sp),a1
    9c4c:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    9c50:	|  |  |  \-----|----> movea.l 152(sp),a0
    9c54:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    9c5a:	|  \--|--------|----> tst.l 152(sp)
    9c5e:	|     \--------|----- bne.w 9a86 <stackToFile+0x110>
    9c62:	|              |  /-- bra.s 9c66 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    9c64:	|              \--|-> nop
    }
    Close(fp);
    9c66:	|                 \-> move.l 136(sp),20(sp)
    9c6c:	|                     move.l 17b30 <DOSBase>,d0
    9c72:	|                     movea.l d0,a6
    9c74:	|                     move.l 20(sp),d1
    9c78:	|                     jsr -36(a6)
    9c7c:	|                     move.l d0,16(sp)
    return TRUE;
    9c80:	|                     moveq #1,d0
}
    9c82:	\-------------------> movem.l (sp)+,d2-d3/a6
    9c86:	                      lea 144(sp),sp
    9c8a:	                      rts

00009c8c <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    9c8c:	       lea -20(sp),sp
    9c90:	       move.l a6,-(sp)
    9c92:	       move.l d2,-(sp)
	int a, len = strlen (s);
    9c94:	       move.l 32(sp),-(sp)
    9c98:	       jsr f4e0 <strlen>
    9c9e:	       addq.l #4,sp
    9ca0:	       move.l d0,20(sp)

	put2bytes (len, fp);
    9ca4:	       move.l 36(sp),-(sp)
    9ca8:	       move.l 24(sp),-(sp)
    9cac:	       jsr 8d0 <put2bytes>
    9cb2:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    9cb4:	       clr.l 24(sp)
    9cb8:	   /-- bra.s 9d0e <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    9cba:	/--|-> move.l 36(sp),16(sp)
    9cc0:	|  |   move.l 24(sp),d0
    9cc4:	|  |   movea.l 32(sp),a0
    9cc8:	|  |   adda.l d0,a0
    9cca:	|  |   move.b (a0),d1
    9ccc:	|  |   move.b 17bc8 <encode1>,d0
    9cd2:	|  |   eor.b d1,d0
    9cd4:	|  |   ext.w d0
    9cd6:	|  |   movea.w d0,a0
    9cd8:	|  |   move.l a0,12(sp)
    9cdc:	|  |   move.l 17b30 <DOSBase>,d0
    9ce2:	|  |   movea.l d0,a6
    9ce4:	|  |   move.l 16(sp),d1
    9ce8:	|  |   move.l 12(sp),d2
    9cec:	|  |   jsr -312(a6)
    9cf0:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    9cf4:	|  |   move.b 17bc8 <encode1>,d0
    9cfa:	|  |   move.b d0,d1
    9cfc:	|  |   move.b 17bc9 <encode2>,d0
    9d02:	|  |   add.b d1,d0
    9d04:	|  |   move.b d0,17bc8 <encode1>
	for (a = 0; a < len; a ++) {
    9d0a:	|  |   addq.l #1,24(sp)
    9d0e:	|  \-> move.l 24(sp),d0
    9d12:	|      cmp.l 20(sp),d0
    9d16:	\----- blt.s 9cba <writeStringEncoded+0x2e>
	}
}
    9d18:	       nop
    9d1a:	       nop
    9d1c:	       move.l (sp)+,d2
    9d1e:	       movea.l (sp)+,a6
    9d20:	       lea 20(sp),sp
    9d24:	       rts

00009d26 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    9d26:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    9d28:	                   tst.l 8(sp)
    9d2c:	               /-- bne.s 9d32 <failSecurityCheck+0xc>
    9d2e:	               |   moveq #1,d0
    9d30:	/--------------|-- bra.s 9db0 <failSecurityCheck+0x8a>

	int a = 0;
    9d32:	|              \-> clr.l (sp)

	while (fn[a]) {
    9d34:	|     /----------- bra.s 9da2 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    9d36:	|  /--|----------> move.l (sp),d0
    9d38:	|  |  |            movea.l 8(sp),a0
    9d3c:	|  |  |            adda.l d0,a0
    9d3e:	|  |  |            move.b (a0),d0
    9d40:	|  |  |            ext.w d0
    9d42:	|  |  |            movea.w d0,a0
    9d44:	|  |  |            moveq #124,d0
    9d46:	|  |  |            cmp.l a0,d0
    9d48:	|  |  |     /----- beq.s 9d8a <failSecurityCheck+0x64>
    9d4a:	|  |  |     |      moveq #124,d1
    9d4c:	|  |  |     |      cmp.l a0,d1
    9d4e:	|  |  |  /--|----- blt.s 9da0 <failSecurityCheck+0x7a>
    9d50:	|  |  |  |  |      moveq #92,d0
    9d52:	|  |  |  |  |      cmp.l a0,d0
    9d54:	|  |  |  |  +----- beq.s 9d8a <failSecurityCheck+0x64>
    9d56:	|  |  |  |  |      moveq #92,d1
    9d58:	|  |  |  |  |      cmp.l a0,d1
    9d5a:	|  |  |  +--|----- blt.s 9da0 <failSecurityCheck+0x7a>
    9d5c:	|  |  |  |  |      moveq #60,d0
    9d5e:	|  |  |  |  |      cmp.l a0,d0
    9d60:	|  |  |  |  |  /-- blt.s 9d80 <failSecurityCheck+0x5a>
    9d62:	|  |  |  |  |  |   moveq #34,d1
    9d64:	|  |  |  |  |  |   cmp.l a0,d1
    9d66:	|  |  |  +--|--|-- bgt.s 9da0 <failSecurityCheck+0x7a>
    9d68:	|  |  |  |  |  |   moveq #-34,d1
    9d6a:	|  |  |  |  |  |   add.l a0,d1
    9d6c:	|  |  |  |  |  |   move.l #83894529,d0
    9d72:	|  |  |  |  |  |   lsr.l d1,d0
    9d74:	|  |  |  |  |  |   moveq #1,d1
    9d76:	|  |  |  |  |  |   and.l d1,d0
    9d78:	|  |  |  |  |  |   sne d0
    9d7a:	|  |  |  |  |  |   neg.b d0
    9d7c:	|  |  |  |  +--|-- bne.s 9d8a <failSecurityCheck+0x64>
    9d7e:	|  |  |  +--|--|-- bra.s 9da0 <failSecurityCheck+0x7a>
    9d80:	|  |  |  |  |  \-> lea -62(a0),a0
    9d84:	|  |  |  |  |      moveq #1,d0
    9d86:	|  |  |  |  |      cmp.l a0,d0
    9d88:	|  |  |  +--|----- bcs.s 9da0 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    9d8a:	|  |  |  |  \----> move.l 8(sp),-(sp)
    9d8e:	|  |  |  |         pea 1566c <incbin_player_end+0x7f8>
    9d94:	|  |  |  |         jsr 12048 <KPrintF>
    9d9a:	|  |  |  |         addq.l #8,sp
				return TRUE;
    9d9c:	|  |  |  |         moveq #1,d0
    9d9e:	+--|--|--|-------- bra.s 9db0 <failSecurityCheck+0x8a>
		}
		a++;
    9da0:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    9da2:	|  |  \----------> move.l (sp),d0
    9da4:	|  |               movea.l 8(sp),a0
    9da8:	|  |               adda.l d0,a0
    9daa:	|  |               move.b (a0),d0
    9dac:	|  \-------------- bne.s 9d36 <failSecurityCheck+0x10>
	}
	return FALSE;
    9dae:	|                  clr.w d0
}
    9db0:	\----------------> addq.l #4,sp
    9db2:	                   rts

00009db4 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    9db4:	             lea -24(sp),sp
    9db8:	             move.l a6,-(sp)
    9dba:	             move.l 40(sp),d0
    9dbe:	             move.w d0,d0
    9dc0:	             move.w d0,6(sp)
	int fileNum = -1;
    9dc4:	             moveq #-1,d0
    9dc6:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    9dca:	             jsr 337a <killSpeechTimers>

	switch (numParams) {
    9dd0:	             moveq #2,d0
    9dd2:	             cmp.l 32(sp),d0
    9dd6:	      /----- beq.s 9e1a <sayCore+0x66>
    9dd8:	      |      moveq #3,d0
    9dda:	      |      cmp.l 32(sp),d0
    9dde:	/-----|----- bne.w 9efc <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    9de2:	|     |      movea.l 36(sp),a0
    9de6:	|     |      move.l 24(a0),d0
    9dea:	|     |      move.l d0,-(sp)
    9dec:	|     |      pea 5 <_start+0x5>
    9df0:	|     |      lea 20(sp),a0
    9df4:	|     |      move.l a0,-(sp)
    9df6:	|     |      jsr fff4 <getValueType>
    9dfc:	|     |      lea 12(sp),sp
    9e00:	|     |      tst.w d0
    9e02:	|     |  /-- bne.s 9e0a <sayCore+0x56>
    9e04:	|     |  |   moveq #1,d0
    9e06:	|  /--|--|-- bra.w 9f0c <sayCore+0x158>
			trimStack (&fun -> stack);
    9e0a:	|  |  |  \-> moveq #24,d0
    9e0c:	|  |  |      add.l 36(sp),d0
    9e10:	|  |  |      move.l d0,-(sp)
    9e12:	|  |  |      jsr 10978 <trimStack>
    9e18:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    9e1a:	|  |  \----> movea.l 36(sp),a0
    9e1e:	|  |         move.l 24(a0),d0
    9e22:	|  |         move.l d0,-(sp)
    9e24:	|  |         jsr 105ca <getTextFromAnyVar>
    9e2a:	|  |         addq.l #4,sp
    9e2c:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    9e30:	|  |     /-- bne.s 9e38 <sayCore+0x84>
    9e32:	|  |     |   moveq #1,d0
    9e34:	|  +-----|-- bra.w 9f0c <sayCore+0x158>
			trimStack (&fun -> stack);
    9e38:	|  |     \-> moveq #24,d0
    9e3a:	|  |         add.l 36(sp),d0
    9e3e:	|  |         move.l d0,-(sp)
    9e40:	|  |         jsr 10978 <trimStack>
    9e46:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    9e48:	|  |         movea.l 36(sp),a0
    9e4c:	|  |         move.l 24(a0),d0
    9e50:	|  |         move.l d0,-(sp)
    9e52:	|  |         pea 7 <_start+0x7>
    9e56:	|  |         lea 16(sp),a0
    9e5a:	|  |         move.l a0,-(sp)
    9e5c:	|  |         jsr fff4 <getValueType>
    9e62:	|  |         lea 12(sp),sp
    9e66:	|  |         tst.w d0
    9e68:	|  |     /-- bne.s 9e70 <sayCore+0xbc>
    9e6a:	|  |     |   moveq #1,d0
    9e6c:	|  +-----|-- bra.w 9f0c <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    9e70:	|  |     \-> movea.l 36(sp),a0
    9e74:	|  |         move.l 24(a0),d0
    9e78:	|  |         move.l d0,-(sp)
    9e7a:	|  |         pea 7 <_start+0x7>
    9e7e:	|  |         lea 16(sp),a0
    9e82:	|  |         move.l a0,-(sp)
    9e84:	|  |         jsr fff4 <getValueType>
    9e8a:	|  |         lea 12(sp),sp
    9e8e:	|  |         tst.w d0
    9e90:	|  |     /-- bne.s 9e96 <sayCore+0xe2>
    9e92:	|  |     |   moveq #1,d0
    9e94:	|  +-----|-- bra.s 9f0c <sayCore+0x158>
			trimStack (&fun -> stack);
    9e96:	|  |     \-> moveq #24,d0
    9e98:	|  |         add.l 36(sp),d0
    9e9c:	|  |         move.l d0,-(sp)
    9e9e:	|  |         jsr 10978 <trimStack>
    9ea4:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    9ea6:	|  |         movea.w 6(sp),a0
    9eaa:	|  |         move.l 12(sp),d1
    9eae:	|  |         move.l 8(sp),d0
    9eb2:	|  |         move.l a0,-(sp)
    9eb4:	|  |         move.l d1,-(sp)
    9eb6:	|  |         move.l d0,-(sp)
    9eb8:	|  |         move.l 36(sp),-(sp)
    9ebc:	|  |         jsr 4fdc <wrapSpeech>
    9ec2:	|  |         lea 16(sp),sp
    9ec6:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    9eca:	|  |         movea.l 36(sp),a0
    9ece:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    9ed4:	|  |         movea.l 36(sp),a0
    9ed8:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    9ede:	|  |         move.l 24(sp),16(sp)
    9ee4:	|  |         move.l 17b28 <SysBase>,d0
    9eea:	|  |         movea.l d0,a6
    9eec:	|  |         movea.l 16(sp),a1
    9ef0:	|  |         jsr -690(a6)
			newText = NULL;
    9ef4:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    9ef8:	|  |         moveq #0,d0
    9efa:	|  +-------- bra.s 9f0c <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    9efc:	\--|-------> pea 156f2 <zbuffer.c.4facf542+0x3a>
    9f02:	   |         jsr 12048 <KPrintF>
    9f08:	   |         addq.l #4,sp
	return BR_ERROR;
    9f0a:	   |         moveq #1,d0
}
    9f0c:	   \-------> movea.l (sp)+,a6
    9f0e:	             lea 24(sp),sp
    9f12:	             rts

00009f14 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    9f14:	pea 1 <_start+0x1>
    9f18:	move.l 12(sp),-(sp)
    9f1c:	move.l 12(sp),-(sp)
    9f20:	jsr 9db4 <sayCore>
    9f26:	lea 12(sp),sp
}
    9f2a:	rts

00009f2c <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    9f2c:	clr.l -(sp)
    9f2e:	move.l 12(sp),-(sp)
    9f32:	move.l 12(sp),-(sp)
    9f36:	jsr 9db4 <sayCore>
    9f3c:	lea 12(sp),sp
}
    9f40:	rts

00009f42 <builtIn_freeze>:
{
	UNUSEDALL
	/*freeze ();
	freezeSubs (); Amiga todo: implement */
	//fun -> freezerLevel = 0;
	return BR_CONTINUE;
    9f42:	moveq #2,d0
}
    9f44:	rts

00009f46 <builtIn_unfreeze>:
builtIn(unfreeze)
{
	UNUSEDALL
	/*unfreeze ();
	unfreezeSubs (); Amiga todo: Implement*/
	return BR_CONTINUE;
    9f46:	moveq #2,d0
}
    9f48:	rts

00009f4a <builtIn_howFrozen>:
builtIn(howFrozen)
{
	UNUSEDALL
	/*setVariable (&fun -> reg, SVT_INT, howFrozen ());
	return BR_CONTINUE; Amiga todo implement*/
}
    9f4a:	nop
    9f4c:	rts

00009f4e <builtIn_setCursor>:

builtIn(setCursor)
{
    9f4e:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    9f50:	movea.l 12(sp),a0
    9f54:	move.l 24(a0),d0
    9f58:	move.l d0,-(sp)
    9f5a:	jsr 104cc <getAnimationFromVar>
    9f60:	addq.l #4,sp
    9f62:	move.l d0,(sp)
	pickAnimCursor (aa);
    9f64:	move.l (sp),-(sp)
    9f66:	jsr dba <pickAnimCursor>
    9f6c:	addq.l #4,sp
	trimStack (&fun -> stack);
    9f6e:	moveq #24,d0
    9f70:	add.l 12(sp),d0
    9f74:	move.l d0,-(sp)
    9f76:	jsr 10978 <trimStack>
    9f7c:	addq.l #4,sp
	return BR_CONTINUE;
    9f7e:	moveq #2,d0
}
    9f80:	addq.l #4,sp
    9f82:	rts

00009f84 <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    9f84:	move.l 17ae8 <input+0xa>,d1
    9f8a:	move.l 17bcc <cameraX>,d0
    9f90:	add.l d0,d1
    9f92:	moveq #28,d0
    9f94:	add.l 8(sp),d0
    9f98:	move.l d1,-(sp)
    9f9a:	pea 1 <_start+0x1>
    9f9e:	move.l d0,-(sp)
    9fa0:	jsr 108e6 <setVariable>
    9fa6:	lea 12(sp),sp
	return BR_CONTINUE;
    9faa:	moveq #2,d0
}
    9fac:	rts

00009fae <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    9fae:	move.l 17aec <input+0xe>,d1
    9fb4:	move.l 17bd0 <cameraY>,d0
    9fba:	add.l d0,d1
    9fbc:	moveq #28,d0
    9fbe:	add.l 8(sp),d0
    9fc2:	move.l d1,-(sp)
    9fc4:	pea 1 <_start+0x1>
    9fc8:	move.l d0,-(sp)
    9fca:	jsr 108e6 <setVariable>
    9fd0:	lea 12(sp),sp
	return BR_CONTINUE;
    9fd4:	moveq #2,d0
}
    9fd6:	rts

00009fd8 <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    9fd8:	move.l 17ae8 <input+0xa>,d0
    9fde:	move.l d0,-(sp)
    9fe0:	jsr 124a0 <__floatsisf>
    9fe6:	addq.l #4,sp
    9fe8:	move.l d0,d1
    9fea:	move.l 16032 <cameraZoom>,d0
    9ff0:	move.l d0,-(sp)
    9ff2:	move.l d1,-(sp)
    9ff4:	jsr 12552 <__mulsf3>
    9ffa:	addq.l #8,sp
    9ffc:	move.l d0,-(sp)
    9ffe:	jsr 12438 <__fixsfsi>
    a004:	addq.l #4,sp
    a006:	move.l d0,d1
    a008:	moveq #28,d0
    a00a:	add.l 8(sp),d0
    a00e:	move.l d1,-(sp)
    a010:	pea 1 <_start+0x1>
    a014:	move.l d0,-(sp)
    a016:	jsr 108e6 <setVariable>
    a01c:	lea 12(sp),sp
	return BR_CONTINUE;
    a020:	moveq #2,d0
}
    a022:	rts

0000a024 <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    a024:	move.l 17aec <input+0xe>,d0
    a02a:	move.l d0,-(sp)
    a02c:	jsr 124a0 <__floatsisf>
    a032:	addq.l #4,sp
    a034:	move.l d0,d1
    a036:	move.l 16032 <cameraZoom>,d0
    a03c:	move.l d0,-(sp)
    a03e:	move.l d1,-(sp)
    a040:	jsr 12552 <__mulsf3>
    a046:	addq.l #8,sp
    a048:	move.l d0,-(sp)
    a04a:	jsr 12438 <__fixsfsi>
    a050:	addq.l #4,sp
    a052:	move.l d0,d1
    a054:	moveq #28,d0
    a056:	add.l 8(sp),d0
    a05a:	move.l d1,-(sp)
    a05c:	pea 1 <_start+0x1>
    a060:	move.l d0,-(sp)
    a062:	jsr 108e6 <setVariable>
    a068:	lea 12(sp),sp
	return BR_CONTINUE;
    a06c:	moveq #2,d0
}
    a06e:	rts

0000a070 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    a070:	jsr 4a90 <statusBarText>
    a076:	move.l d0,d1
    a078:	moveq #28,d0
    a07a:	add.l 8(sp),d0
    a07e:	move.l d1,-(sp)
    a080:	move.l d0,-(sp)
    a082:	jsr 10216 <makeTextVar>
    a088:	addq.l #8,sp
	return BR_CONTINUE;
    a08a:	moveq #2,d0
}
    a08c:	rts

0000a08e <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    a08e:	       lea -20(sp),sp
    a092:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    a094:	       movea.l 32(sp),a0
    a098:	       move.l 24(a0),d0
    a09c:	       move.l d0,-(sp)
    a09e:	       jsr 105ca <getTextFromAnyVar>
    a0a4:	       addq.l #4,sp
    a0a6:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    a0aa:	   /-- bne.s a0b2 <builtIn_getMatchingFiles+0x24>
    a0ac:	   |   moveq #1,d0
    a0ae:	/--|-- bra.w a174 <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    a0b2:	|  \-> moveq #24,d0
    a0b4:	|      add.l 32(sp),d0
    a0b8:	|      move.l d0,-(sp)
    a0ba:	|      jsr 10978 <trimStack>
    a0c0:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    a0c2:	|      moveq #28,d0
    a0c4:	|      add.l 32(sp),d0
    a0c8:	|      move.l d0,-(sp)
    a0ca:	|      jsr 10242 <unlinkVar>
    a0d0:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    a0d2:	|      movea.l 32(sp),a0
    a0d6:	|      moveq #6,d0
    a0d8:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    a0dc:	|      moveq #12,d0
    a0de:	|      move.l d0,16(sp)
    a0e2:	|      clr.l 12(sp)
    a0e6:	|      move.l 17b28 <SysBase>,d0
    a0ec:	|      movea.l d0,a6
    a0ee:	|      move.l 16(sp),d0
    a0f2:	|      move.l 12(sp),d1
    a0f6:	|      jsr -684(a6)
    a0fa:	|      move.l d0,8(sp)
    a0fe:	|      move.l 8(sp),d0
    a102:	|      movea.l 32(sp),a0
    a106:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    a10a:	|      moveq #32,d0
    a10c:	|      add.l 32(sp),d0
    a110:	|  /-- bne.s a116 <builtIn_getMatchingFiles+0x88>
    a112:	|  |   moveq #1,d0
    a114:	+--|-- bra.s a174 <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    a116:	|  \-> movea.l 32(sp),a0
    a11a:	|      movea.l 32(a0),a0
    a11e:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    a120:	|      movea.l 32(sp),a0
    a124:	|      movea.l 32(a0),a0
    a128:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    a12c:	|      movea.l 32(sp),a0
    a130:	|      movea.l 32(a0),a0
    a134:	|      moveq #1,d0
    a136:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    a13a:	|      movea.l 32(sp),a0
    a13e:	|      move.l 32(a0),d0
    a142:	|      move.l 20(sp),-(sp)
    a146:	|      move.l d0,-(sp)
    a148:	|      jsr fdb0 <getSavedGamesStack>
    a14e:	|      addq.l #8,sp
    a150:	|      tst.w d0
    a152:	|  /-- bne.s a158 <builtIn_getMatchingFiles+0xca>
    a154:	|  |   moveq #1,d0
    a156:	+--|-- bra.s a174 <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    a158:	|  \-> move.l 20(sp),4(sp)
    a15e:	|      move.l 17b28 <SysBase>,d0
    a164:	|      movea.l d0,a6
    a166:	|      movea.l 4(sp),a1
    a16a:	|      jsr -690(a6)
	newText = NULL;
    a16e:	|      clr.l 20(sp)
	return BR_CONTINUE;
    a172:	|      moveq #2,d0
}
    a174:	\----> movea.l (sp)+,a6
    a176:	       lea 20(sp),sp
    a17a:	       rts

0000a17c <builtIn_saveGame>:

builtIn(saveGame)
{
    a17c:	       lea -12(sp),sp
    a180:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    a182:	       movea.l 24(sp),a0
    a186:	       move.l 24(a0),d0
    a18a:	       move.l d0,-(sp)
    a18c:	       jsr 105ca <getTextFromAnyVar>
    a192:	       addq.l #4,sp
    a194:	       move.l d0,17af4 <loadNow>
    trimStack(&fun->stack);
    a19a:	       moveq #24,d0
    a19c:	       add.l 24(sp),d0
    a1a0:	       move.l d0,-(sp)
    a1a2:	       jsr 10978 <trimStack>
    a1a8:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    a1aa:	       move.l 17af4 <loadNow>,d0
    a1b0:	       move.l d0,-(sp)
    a1b2:	       jsr 2fe <encodeFilename>
    a1b8:	       addq.l #4,sp
    a1ba:	       move.l d0,12(sp)
    FreeVec(loadNow);
    a1be:	       move.l 17af4 <loadNow>,8(sp)
    a1c6:	       move.l 17b28 <SysBase>,d0
    a1cc:	       movea.l d0,a6
    a1ce:	       movea.l 8(sp),a1
    a1d2:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    a1d6:	       move.l 12(sp),-(sp)
    a1da:	       jsr 9d26 <failSecurityCheck>
    a1e0:	       addq.l #4,sp
    a1e2:	       tst.w d0
    a1e4:	   /-- beq.s a1ea <builtIn_saveGame+0x6e>
    a1e6:	   |   moveq #1,d0
    a1e8:	/--|-- bra.s a23a <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    a1ea:	|  \-> move.l 12(sp),-(sp)
    a1ee:	|      pea 15720 <zbuffer.c.4facf542+0x68>
    a1f4:	|      jsr f520 <joinStrings>
    a1fa:	|      addq.l #8,sp
    a1fc:	|      move.l d0,17af4 <loadNow>
    FreeVec(aaaaa);
    a202:	|      move.l 12(sp),4(sp)
    a208:	|      move.l 17b28 <SysBase>,d0
    a20e:	|      movea.l d0,a6
    a210:	|      movea.l 4(sp),a1
    a214:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    a218:	|      moveq #28,d0
    a21a:	|      add.l 24(sp),d0
    a21e:	|      clr.l -(sp)
    a220:	|      pea 1 <_start+0x1>
    a224:	|      move.l d0,-(sp)
    a226:	|      jsr 108e6 <setVariable>
    a22c:	|      lea 12(sp),sp
    saverFunc = fun;
    a230:	|      move.l 24(sp),17bdc <saverFunc>
    return BR_KEEP_AND_PAUSE;
    a238:	|      moveq #0,d0
}
    a23a:	\----> movea.l (sp)+,a6
    a23c:	       lea 12(sp),sp
    a240:	       rts

0000a242 <builtIn_fileExists>:

builtIn(fileExists)
{
    a242:	       lea -36(sp),sp
    a246:	       move.l a6,-(sp)
    a248:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    a24a:	       movea.l 52(sp),a0
    a24e:	       move.l 24(a0),d0
    a252:	       move.l d0,-(sp)
    a254:	       jsr 105ca <getTextFromAnyVar>
    a25a:	       addq.l #4,sp
    a25c:	       move.l d0,17af4 <loadNow>
    trimStack(&fun->stack);
    a262:	       moveq #24,d0
    a264:	       add.l 52(sp),d0
    a268:	       move.l d0,-(sp)
    a26a:	       jsr 10978 <trimStack>
    a270:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    a272:	       move.l 17af4 <loadNow>,d0
    a278:	       move.l d0,-(sp)
    a27a:	       jsr 2fe <encodeFilename>
    a280:	       addq.l #4,sp
    a282:	       move.l d0,40(sp)
    FreeVec(loadNow);
    a286:	       move.l 17af4 <loadNow>,36(sp)
    a28e:	       move.l 17b28 <SysBase>,d0
    a294:	       movea.l d0,a6
    a296:	       movea.l 36(sp),a1
    a29a:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    a29e:	       move.l 40(sp),-(sp)
    a2a2:	       jsr 9d26 <failSecurityCheck>
    a2a8:	       addq.l #4,sp
    a2aa:	       tst.w d0
    a2ac:	   /-- beq.s a2b4 <builtIn_fileExists+0x72>
    a2ae:	   |   moveq #1,d0
    a2b0:	/--|-- bra.w a354 <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    a2b4:	|  \-> move.l 40(sp),32(sp)
    a2ba:	|      move.l #1005,28(sp)
    a2c2:	|      move.l 17b30 <DOSBase>,d0
    a2c8:	|      movea.l d0,a6
    a2ca:	|      move.l 32(sp),d1
    a2ce:	|      move.l 28(sp),d2
    a2d2:	|      jsr -30(a6)
    a2d6:	|      move.l d0,24(sp)
    a2da:	|      move.l 24(sp),d0
    a2de:	|      move.l d0,20(sp)
    if (!fp) {        
    a2e2:	|  /-- bne.s a2f2 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    a2e4:	|  |   pea 15722 <zbuffer.c.4facf542+0x6a>
    a2ea:	|  |   jsr 12048 <KPrintF>
    a2f0:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    a2f2:	|  \-> tst.l 20(sp)
    a2f6:	|      sne d0
    a2f8:	|      neg.b d0
    a2fa:	|      moveq #0,d1
    a2fc:	|      move.b d0,d1
    a2fe:	|      moveq #28,d0
    a300:	|      add.l 52(sp),d0
    a304:	|      move.l d1,-(sp)
    a306:	|      pea 1 <_start+0x1>
    a30a:	|      move.l d0,-(sp)
    a30c:	|      jsr 108e6 <setVariable>
    a312:	|      lea 12(sp),sp
    if (fp) Close(fp);
    a316:	|      tst.l 20(sp)
    a31a:	|  /-- beq.s a336 <builtIn_fileExists+0xf4>
    a31c:	|  |   move.l 20(sp),16(sp)
    a322:	|  |   move.l 17b30 <DOSBase>,d0
    a328:	|  |   movea.l d0,a6
    a32a:	|  |   move.l 16(sp),d1
    a32e:	|  |   jsr -36(a6)
    a332:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    a336:	|  \-> move.l 40(sp),8(sp)
    a33c:	|      move.l 17b28 <SysBase>,d0
    a342:	|      movea.l d0,a6
    a344:	|      movea.l 8(sp),a1
    a348:	|      jsr -690(a6)
    loadNow = NULL;
    a34c:	|      clr.l 17af4 <loadNow>
    return BR_CONTINUE;
    a352:	|      moveq #2,d0
}
    a354:	\----> move.l (sp)+,d2
    a356:	       movea.l (sp)+,a6
    a358:	       lea 36(sp),sp
    a35c:	       rts

0000a35e <builtIn_loadGame>:

builtIn(loadGame)
{
    a35e:	       lea -36(sp),sp
    a362:	       move.l a6,-(sp)
    a364:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    a366:	       movea.l 52(sp),a0
    a36a:	       move.l 24(a0),d0
    a36e:	       move.l d0,-(sp)
    a370:	       jsr 105ca <getTextFromAnyVar>
    a376:	       addq.l #4,sp
    a378:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    a37c:	       moveq #24,d0
    a37e:	       add.l 52(sp),d0
    a382:	       move.l d0,-(sp)
    a384:	       jsr 10978 <trimStack>
    a38a:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    a38c:	       move.l 40(sp),-(sp)
    a390:	       jsr 2fe <encodeFilename>
    a396:	       addq.l #4,sp
    a398:	       move.l d0,17af4 <loadNow>
    FreeVec(aaaaa);
    a39e:	       move.l 40(sp),36(sp)
    a3a4:	       move.l 17b28 <SysBase>,d0
    a3aa:	       movea.l d0,a6
    a3ac:	       movea.l 36(sp),a1
    a3b0:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    a3b4:	       move.l 17af4 <loadNow>,d0
    a3ba:	       move.l d0,-(sp)
    a3bc:	       jsr 9d26 <failSecurityCheck>
    a3c2:	       addq.l #4,sp
    a3c4:	       tst.w d0
    a3c6:	   /-- beq.s a3cc <builtIn_loadGame+0x6e>
    a3c8:	   |   moveq #1,d0
    a3ca:	/--|-- bra.s a43c <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    a3cc:	|  \-> move.l 17af4 <loadNow>,32(sp)
    a3d4:	|      move.l #1005,28(sp)
    a3dc:	|      move.l 17b30 <DOSBase>,d0
    a3e2:	|      movea.l d0,a6
    a3e4:	|      move.l 32(sp),d1
    a3e8:	|      move.l 28(sp),d2
    a3ec:	|      jsr -30(a6)
    a3f0:	|      move.l d0,24(sp)
    a3f4:	|      move.l 24(sp),d0
    a3f8:	|      move.l d0,20(sp)
    if (fp) {
    a3fc:	|  /-- beq.s a41c <builtIn_loadGame+0xbe>
        Close(fp);
    a3fe:	|  |   move.l 20(sp),12(sp)
    a404:	|  |   move.l 17b30 <DOSBase>,d0
    a40a:	|  |   movea.l d0,a6
    a40c:	|  |   move.l 12(sp),d1
    a410:	|  |   jsr -36(a6)
    a414:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    a418:	|  |   moveq #0,d0
    a41a:	+--|-- bra.s a43c <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    a41c:	|  \-> move.l 17af4 <loadNow>,16(sp)
    a424:	|      move.l 17b28 <SysBase>,d0
    a42a:	|      movea.l d0,a6
    a42c:	|      movea.l 16(sp),a1
    a430:	|      jsr -690(a6)
    loadNow = NULL;
    a434:	|      clr.l 17af4 <loadNow>
    return BR_CONTINUE;
    a43a:	|      moveq #2,d0
}
    a43c:	\----> move.l (sp)+,d2
    a43e:	       movea.l (sp)+,a6
    a440:	       lea 36(sp),sp
    a444:	       rts

0000a446 <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    a446:	move.l 17bb2 <sceneHeight>,d0
    a44c:	move.l d0,d1
    a44e:	move.l 17bae <sceneWidth>,d0
    a454:	move.l d1,-(sp)
    a456:	move.l d0,-(sp)
    a458:	clr.l -(sp)
    a45a:	clr.l -(sp)
    a45c:	jsr 8c8c <blankScreen>
    a462:	lea 16(sp),sp
	return BR_CONTINUE;
    a466:	moveq #2,d0
}
    a468:	rts

0000a46a <builtIn_blankArea>:

builtIn(blankArea)
{
    a46a:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    a46e:	       movea.l 24(sp),a0
    a472:	       move.l 24(a0),d0
    a476:	       move.l d0,-(sp)
    a478:	       pea 1 <_start+0x1>
    a47c:	       lea 8(sp),a0
    a480:	       move.l a0,-(sp)
    a482:	       jsr fff4 <getValueType>
    a488:	       lea 12(sp),sp
    a48c:	       tst.w d0
    a48e:	   /-- bne.s a496 <builtIn_blankArea+0x2c>
    a490:	   |   moveq #1,d0
    a492:	/--|-- bra.w a56c <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    a496:	|  \-> moveq #24,d0
    a498:	|      add.l 24(sp),d0
    a49c:	|      move.l d0,-(sp)
    a49e:	|      jsr 10978 <trimStack>
    a4a4:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    a4a6:	|      movea.l 24(sp),a0
    a4aa:	|      move.l 24(a0),d0
    a4ae:	|      move.l d0,-(sp)
    a4b0:	|      pea 1 <_start+0x1>
    a4b4:	|      lea 12(sp),a0
    a4b8:	|      move.l a0,-(sp)
    a4ba:	|      jsr fff4 <getValueType>
    a4c0:	|      lea 12(sp),sp
    a4c4:	|      tst.w d0
    a4c6:	|  /-- bne.s a4ce <builtIn_blankArea+0x64>
    a4c8:	|  |   moveq #1,d0
    a4ca:	+--|-- bra.w a56c <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    a4ce:	|  \-> moveq #24,d0
    a4d0:	|      add.l 24(sp),d0
    a4d4:	|      move.l d0,-(sp)
    a4d6:	|      jsr 10978 <trimStack>
    a4dc:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    a4de:	|      movea.l 24(sp),a0
    a4e2:	|      move.l 24(a0),d0
    a4e6:	|      move.l d0,-(sp)
    a4e8:	|      pea 1 <_start+0x1>
    a4ec:	|      moveq #16,d0
    a4ee:	|      add.l sp,d0
    a4f0:	|      move.l d0,-(sp)
    a4f2:	|      jsr fff4 <getValueType>
    a4f8:	|      lea 12(sp),sp
    a4fc:	|      tst.w d0
    a4fe:	|  /-- bne.s a504 <builtIn_blankArea+0x9a>
    a500:	|  |   moveq #1,d0
    a502:	+--|-- bra.s a56c <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    a504:	|  \-> moveq #24,d0
    a506:	|      add.l 24(sp),d0
    a50a:	|      move.l d0,-(sp)
    a50c:	|      jsr 10978 <trimStack>
    a512:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    a514:	|      movea.l 24(sp),a0
    a518:	|      move.l 24(a0),d0
    a51c:	|      move.l d0,-(sp)
    a51e:	|      pea 1 <_start+0x1>
    a522:	|      moveq #20,d0
    a524:	|      add.l sp,d0
    a526:	|      move.l d0,-(sp)
    a528:	|      jsr fff4 <getValueType>
    a52e:	|      lea 12(sp),sp
    a532:	|      tst.w d0
    a534:	|  /-- bne.s a53a <builtIn_blankArea+0xd0>
    a536:	|  |   moveq #1,d0
    a538:	+--|-- bra.s a56c <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    a53a:	|  \-> moveq #24,d0
    a53c:	|      add.l 24(sp),d0
    a540:	|      move.l d0,-(sp)
    a542:	|      jsr 10978 <trimStack>
    a548:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    a54a:	|      movea.l (sp),a1
    a54c:	|      movea.l 4(sp),a0
    a550:	|      move.l 8(sp),d1
    a554:	|      move.l 12(sp),d0
    a558:	|      move.l a1,-(sp)
    a55a:	|      move.l a0,-(sp)
    a55c:	|      move.l d1,-(sp)
    a55e:	|      move.l d0,-(sp)
    a560:	|      jsr 8c8c <blankScreen>
    a566:	|      lea 16(sp),sp
	return BR_CONTINUE;
    a56a:	|      moveq #2,d0
}
    a56c:	\----> lea 16(sp),sp
    a570:	       rts

0000a572 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    a572:	jsr 8c9e <darkScreen>
	return BR_CONTINUE;
    a578:	moveq #2,d0
}
    a57a:	rts

0000a57c <builtIn_addOverlay>:

builtIn(addOverlay)
{
    a57c:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a580:	       movea.l 20(sp),a0
    a584:	       move.l 24(a0),d0
    a588:	       move.l d0,-(sp)
    a58a:	       pea 1 <_start+0x1>
    a58e:	       lea 8(sp),a0
    a592:	       move.l a0,-(sp)
    a594:	       jsr fff4 <getValueType>
    a59a:	       lea 12(sp),sp
    a59e:	       tst.w d0
    a5a0:	   /-- bne.s a5a8 <builtIn_addOverlay+0x2c>
    a5a2:	   |   moveq #1,d0
    a5a4:	/--|-- bra.w a640 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    a5a8:	|  \-> moveq #24,d0
    a5aa:	|      add.l 20(sp),d0
    a5ae:	|      move.l d0,-(sp)
    a5b0:	|      jsr 10978 <trimStack>
    a5b6:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a5b8:	|      movea.l 20(sp),a0
    a5bc:	|      move.l 24(a0),d0
    a5c0:	|      move.l d0,-(sp)
    a5c2:	|      pea 1 <_start+0x1>
    a5c6:	|      moveq #12,d0
    a5c8:	|      add.l sp,d0
    a5ca:	|      move.l d0,-(sp)
    a5cc:	|      jsr fff4 <getValueType>
    a5d2:	|      lea 12(sp),sp
    a5d6:	|      tst.w d0
    a5d8:	|  /-- bne.s a5de <builtIn_addOverlay+0x62>
    a5da:	|  |   moveq #1,d0
    a5dc:	+--|-- bra.s a640 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    a5de:	|  \-> moveq #24,d0
    a5e0:	|      add.l 20(sp),d0
    a5e4:	|      move.l d0,-(sp)
    a5e6:	|      jsr 10978 <trimStack>
    a5ec:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    a5ee:	|      movea.l 20(sp),a0
    a5f2:	|      move.l 24(a0),d0
    a5f6:	|      move.l d0,-(sp)
    a5f8:	|      pea 5 <_start+0x5>
    a5fc:	|      moveq #16,d0
    a5fe:	|      add.l sp,d0
    a600:	|      move.l d0,-(sp)
    a602:	|      jsr fff4 <getValueType>
    a608:	|      lea 12(sp),sp
    a60c:	|      tst.w d0
    a60e:	|  /-- bne.s a614 <builtIn_addOverlay+0x98>
    a610:	|  |   moveq #1,d0
    a612:	+--|-- bra.s a640 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    a614:	|  \-> moveq #24,d0
    a616:	|      add.l 20(sp),d0
    a61a:	|      move.l d0,-(sp)
    a61c:	|      jsr 10978 <trimStack>
    a622:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    a624:	|      movea.l (sp),a0
    a626:	|      move.l 4(sp),d1
    a62a:	|      move.l 8(sp),d0
    a62e:	|      move.l a0,-(sp)
    a630:	|      move.l d1,-(sp)
    a632:	|      move.l d0,-(sp)
    a634:	|      jsr 8db6 <loadBackDrop>
    a63a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    a63e:	|      moveq #2,d0
}
    a640:	\----> lea 12(sp),sp
    a644:	       rts

0000a646 <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    a646:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a64a:	       movea.l 20(sp),a0
    a64e:	       move.l 24(a0),d0
    a652:	       move.l d0,-(sp)
    a654:	       pea 1 <_start+0x1>
    a658:	       lea 8(sp),a0
    a65c:	       move.l a0,-(sp)
    a65e:	       jsr fff4 <getValueType>
    a664:	       lea 12(sp),sp
    a668:	       tst.w d0
    a66a:	   /-- bne.s a672 <builtIn_mixOverlay+0x2c>
    a66c:	   |   moveq #1,d0
    a66e:	/--|-- bra.w a70a <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    a672:	|  \-> moveq #24,d0
    a674:	|      add.l 20(sp),d0
    a678:	|      move.l d0,-(sp)
    a67a:	|      jsr 10978 <trimStack>
    a680:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a682:	|      movea.l 20(sp),a0
    a686:	|      move.l 24(a0),d0
    a68a:	|      move.l d0,-(sp)
    a68c:	|      pea 1 <_start+0x1>
    a690:	|      moveq #12,d0
    a692:	|      add.l sp,d0
    a694:	|      move.l d0,-(sp)
    a696:	|      jsr fff4 <getValueType>
    a69c:	|      lea 12(sp),sp
    a6a0:	|      tst.w d0
    a6a2:	|  /-- bne.s a6a8 <builtIn_mixOverlay+0x62>
    a6a4:	|  |   moveq #1,d0
    a6a6:	+--|-- bra.s a70a <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    a6a8:	|  \-> moveq #24,d0
    a6aa:	|      add.l 20(sp),d0
    a6ae:	|      move.l d0,-(sp)
    a6b0:	|      jsr 10978 <trimStack>
    a6b6:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    a6b8:	|      movea.l 20(sp),a0
    a6bc:	|      move.l 24(a0),d0
    a6c0:	|      move.l d0,-(sp)
    a6c2:	|      pea 5 <_start+0x5>
    a6c6:	|      moveq #16,d0
    a6c8:	|      add.l sp,d0
    a6ca:	|      move.l d0,-(sp)
    a6cc:	|      jsr fff4 <getValueType>
    a6d2:	|      lea 12(sp),sp
    a6d6:	|      tst.w d0
    a6d8:	|  /-- bne.s a6de <builtIn_mixOverlay+0x98>
    a6da:	|  |   moveq #1,d0
    a6dc:	+--|-- bra.s a70a <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    a6de:	|  \-> moveq #24,d0
    a6e0:	|      add.l 20(sp),d0
    a6e4:	|      move.l d0,-(sp)
    a6e6:	|      jsr 10978 <trimStack>
    a6ec:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    a6ee:	|      movea.l (sp),a0
    a6f0:	|      move.l 4(sp),d1
    a6f4:	|      move.l 8(sp),d0
    a6f8:	|      move.l a0,-(sp)
    a6fa:	|      move.l d1,-(sp)
    a6fc:	|      move.l d0,-(sp)
    a6fe:	|      jsr 8dfc <mixBackDrop>
    a704:	|      lea 12(sp),sp
	return BR_CONTINUE;
    a708:	|      moveq #2,d0
}
    a70a:	\----> lea 12(sp),sp
    a70e:	       rts

0000a710 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    a710:	       lea -12(sp),sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a714:	       movea.l 20(sp),a0
    a718:	       move.l 24(a0),d0
    a71c:	       move.l d0,-(sp)
    a71e:	       pea 1 <_start+0x1>
    a722:	       lea 8(sp),a0
    a726:	       move.l a0,-(sp)
    a728:	       jsr fff4 <getValueType>
    a72e:	       lea 12(sp),sp
    a732:	       tst.w d0
    a734:	   /-- bne.s a73c <builtIn_pasteImage+0x2c>
    a736:	   |   moveq #1,d0
    a738:	/--|-- bra.w a7cc <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    a73c:	|  \-> moveq #24,d0
    a73e:	|      add.l 20(sp),d0
    a742:	|      move.l d0,-(sp)
    a744:	|      jsr 10978 <trimStack>
    a74a:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a74c:	|      movea.l 20(sp),a0
    a750:	|      move.l 24(a0),d0
    a754:	|      move.l d0,-(sp)
    a756:	|      pea 1 <_start+0x1>
    a75a:	|      moveq #12,d0
    a75c:	|      add.l sp,d0
    a75e:	|      move.l d0,-(sp)
    a760:	|      jsr fff4 <getValueType>
    a766:	|      lea 12(sp),sp
    a76a:	|      tst.w d0
    a76c:	|  /-- bne.s a772 <builtIn_pasteImage+0x62>
    a76e:	|  |   moveq #1,d0
    a770:	+--|-- bra.s a7cc <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    a772:	|  \-> moveq #24,d0
    a774:	|      add.l 20(sp),d0
    a778:	|      move.l d0,-(sp)
    a77a:	|      jsr 10978 <trimStack>
    a780:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    a782:	|      movea.l 20(sp),a0
    a786:	|      move.l 24(a0),d0
    a78a:	|      move.l d0,-(sp)
    a78c:	|      jsr 104cc <getAnimationFromVar>
    a792:	|      addq.l #4,sp
    a794:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    a798:	|      moveq #24,d0
    a79a:	|      add.l 20(sp),d0
    a79e:	|      move.l d0,-(sp)
    a7a0:	|      jsr 10978 <trimStack>
    a7a6:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    a7a8:	|      tst.l 8(sp)
    a7ac:	|  /-- bne.s a7b2 <builtIn_pasteImage+0xa2>
    a7ae:	|  |   moveq #2,d0
    a7b0:	+--|-- bra.s a7cc <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    a7b2:	|  \-> move.l (sp),d1
    a7b4:	|      move.l 4(sp),d0
    a7b8:	|      move.l 8(sp),-(sp)
    a7bc:	|      move.l d1,-(sp)
    a7be:	|      move.l d0,-(sp)
    a7c0:	|      jsr de2 <pasteCursor>
    a7c6:	|      lea 12(sp),sp
	return BR_CONTINUE;
    a7ca:	|      moveq #2,d0
}
    a7cc:	\----> lea 12(sp),sp
    a7d0:	       rts

0000a7d2 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    a7d2:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a7d4:	       movea.l 16(sp),a0
    a7d8:	       move.l 24(a0),d0
    a7dc:	       move.l d0,-(sp)
    a7de:	       pea 1 <_start+0x1>
    a7e2:	       move.l sp,d0
    a7e4:	       addq.l #8,d0
    a7e6:	       move.l d0,-(sp)
    a7e8:	       jsr fff4 <getValueType>
    a7ee:	       lea 12(sp),sp
    a7f2:	       tst.w d0
    a7f4:	   /-- bne.s a7fc <builtIn_setSceneDimensions+0x2a>
    a7f6:	   |   moveq #1,d0
    a7f8:	/--|-- bra.w a884 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    a7fc:	|  \-> moveq #24,d0
    a7fe:	|      add.l 16(sp),d0
    a802:	|      move.l d0,-(sp)
    a804:	|      jsr 10978 <trimStack>
    a80a:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a80c:	|      movea.l 16(sp),a0
    a810:	|      move.l 24(a0),d0
    a814:	|      move.l d0,-(sp)
    a816:	|      pea 1 <_start+0x1>
    a81a:	|      moveq #12,d0
    a81c:	|      add.l sp,d0
    a81e:	|      move.l d0,-(sp)
    a820:	|      jsr fff4 <getValueType>
    a826:	|      lea 12(sp),sp
    a82a:	|      tst.w d0
    a82c:	|  /-- bne.s a832 <builtIn_setSceneDimensions+0x60>
    a82e:	|  |   moveq #1,d0
    a830:	+--|-- bra.s a884 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    a832:	|  \-> moveq #24,d0
    a834:	|      add.l 16(sp),d0
    a838:	|      move.l d0,-(sp)
    a83a:	|      jsr 10978 <trimStack>
    a840:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    a842:	|      move.l (sp),d1
    a844:	|      move.l 4(sp),d0
    a848:	|      move.l d1,-(sp)
    a84a:	|      move.l d0,-(sp)
    a84c:	|      jsr 8e2a <resizeBackdrop>
    a852:	|      addq.l #8,sp
    a854:	|      tst.w d0
    a856:	|  /-- beq.s a874 <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    a858:	|  |   move.l (sp),d1
    a85a:	|  |   move.l 4(sp),d0
    a85e:	|  |   move.l d1,-(sp)
    a860:	|  |   move.l d0,-(sp)
    a862:	|  |   clr.l -(sp)
    a864:	|  |   clr.l -(sp)
    a866:	|  |   jsr 8c8c <blankScreen>
    a86c:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    a870:	|  |   moveq #2,d0
    a872:	+--|-- bra.s a884 <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    a874:	|  \-> pea 15740 <zbuffer.c.4facf542+0x88>
    a87a:	|      jsr 12048 <KPrintF>
    a880:	|      addq.l #4,sp
	return BR_ERROR;
    a882:	|      moveq #1,d0
}
    a884:	\----> addq.l #8,sp
    a886:	       rts

0000a888 <builtIn_aimCamera>:

builtIn(aimCamera)
{
    a888:	          move.l d3,-(sp)
    a88a:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a88c:	          movea.l 16(sp),a0
    a890:	          move.l 24(a0),d0
    a894:	          move.l d0,-(sp)
    a896:	          pea 1 <_start+0x1>
    a89a:	          pea 17bd0 <cameraY>
    a8a0:	          jsr fff4 <getValueType>
    a8a6:	          lea 12(sp),sp
    a8aa:	          tst.w d0
    a8ac:	      /-- bne.s a8b4 <builtIn_aimCamera+0x2c>
    a8ae:	      |   moveq #1,d0
    a8b0:	/-----|-- bra.w ab36 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    a8b4:	|     \-> moveq #24,d0
    a8b6:	|         add.l 16(sp),d0
    a8ba:	|         move.l d0,-(sp)
    a8bc:	|         jsr 10978 <trimStack>
    a8c2:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a8c4:	|         movea.l 16(sp),a0
    a8c8:	|         move.l 24(a0),d0
    a8cc:	|         move.l d0,-(sp)
    a8ce:	|         pea 1 <_start+0x1>
    a8d2:	|         pea 17bcc <cameraX>
    a8d8:	|         jsr fff4 <getValueType>
    a8de:	|         lea 12(sp),sp
    a8e2:	|         tst.w d0
    a8e4:	|     /-- bne.s a8ec <builtIn_aimCamera+0x64>
    a8e6:	|     |   moveq #1,d0
    a8e8:	+-----|-- bra.w ab36 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    a8ec:	|     \-> moveq #24,d0
    a8ee:	|         add.l 16(sp),d0
    a8f2:	|         move.l d0,-(sp)
    a8f4:	|         jsr 10978 <trimStack>
    a8fa:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    a8fc:	|         move.l 17bcc <cameraX>,d0
    a902:	|         move.l d0,-(sp)
    a904:	|         jsr 124a0 <__floatsisf>
    a90a:	|         addq.l #4,sp
    a90c:	|         move.l d0,d2
    a90e:	|         move.l 17a28 <winWidth>,d0
    a914:	|         lsr.l #1,d0
    a916:	|         move.l d0,-(sp)
    a918:	|         jsr 124c8 <__floatunsisf>
    a91e:	|         addq.l #4,sp
    a920:	|         move.l d0,d1
    a922:	|         move.l 16032 <cameraZoom>,d0
    a928:	|         move.l d0,-(sp)
    a92a:	|         move.l d1,-(sp)
    a92c:	|         jsr 1234c <__divsf3>
    a932:	|         addq.l #8,sp
    a934:	|         move.l d0,-(sp)
    a936:	|         move.l d2,-(sp)
    a938:	|         jsr 12794 <__subsf3>
    a93e:	|         addq.l #8,sp
    a940:	|         move.l d0,-(sp)
    a942:	|         jsr 12438 <__fixsfsi>
    a948:	|         addq.l #4,sp
    a94a:	|         move.l d0,17bcc <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    a950:	|         move.l 17bd0 <cameraY>,d0
    a956:	|         move.l d0,-(sp)
    a958:	|         jsr 124a0 <__floatsisf>
    a95e:	|         addq.l #4,sp
    a960:	|         move.l d0,d2
    a962:	|         move.l 17a2c <winHeight>,d0
    a968:	|         lsr.l #1,d0
    a96a:	|         move.l d0,-(sp)
    a96c:	|         jsr 124c8 <__floatunsisf>
    a972:	|         addq.l #4,sp
    a974:	|         move.l d0,d1
    a976:	|         move.l 16032 <cameraZoom>,d0
    a97c:	|         move.l d0,-(sp)
    a97e:	|         move.l d1,-(sp)
    a980:	|         jsr 1234c <__divsf3>
    a986:	|         addq.l #8,sp
    a988:	|         move.l d0,-(sp)
    a98a:	|         move.l d2,-(sp)
    a98c:	|         jsr 12794 <__subsf3>
    a992:	|         addq.l #8,sp
    a994:	|         move.l d0,-(sp)
    a996:	|         jsr 12438 <__fixsfsi>
    a99c:	|         addq.l #4,sp
    a99e:	|         move.l d0,17bd0 <cameraY>

	if (cameraX < 0) cameraX = 0;
    a9a4:	|         move.l 17bcc <cameraX>,d0
    a9aa:	|     /-- bpl.s a9b6 <builtIn_aimCamera+0x12e>
    a9ac:	|     |   clr.l 17bcc <cameraX>
    a9b2:	|  /--|-- bra.w aa6c <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    a9b6:	|  |  \-> move.l 17bcc <cameraX>,d0
    a9bc:	|  |      move.l d0,-(sp)
    a9be:	|  |      jsr 124a0 <__floatsisf>
    a9c4:	|  |      addq.l #4,sp
    a9c6:	|  |      move.l d0,d2
    a9c8:	|  |      move.l 17bae <sceneWidth>,d0
    a9ce:	|  |      move.l d0,-(sp)
    a9d0:	|  |      jsr 124c8 <__floatunsisf>
    a9d6:	|  |      addq.l #4,sp
    a9d8:	|  |      move.l d0,d3
    a9da:	|  |      move.l 17a28 <winWidth>,d0
    a9e0:	|  |      move.l d0,-(sp)
    a9e2:	|  |      jsr 124c8 <__floatunsisf>
    a9e8:	|  |      addq.l #4,sp
    a9ea:	|  |      move.l d0,d1
    a9ec:	|  |      move.l 16032 <cameraZoom>,d0
    a9f2:	|  |      move.l d0,-(sp)
    a9f4:	|  |      move.l d1,-(sp)
    a9f6:	|  |      jsr 1234c <__divsf3>
    a9fc:	|  |      addq.l #8,sp
    a9fe:	|  |      move.l d0,-(sp)
    aa00:	|  |      move.l d3,-(sp)
    aa02:	|  |      jsr 12794 <__subsf3>
    aa08:	|  |      addq.l #8,sp
    aa0a:	|  |      move.l d0,-(sp)
    aa0c:	|  |      move.l d2,-(sp)
    aa0e:	|  |      jsr 1260c <__gtsf2>
    aa14:	|  |      addq.l #8,sp
    aa16:	|  |      tst.l d0
    aa18:	|  +----- ble.s aa6c <builtIn_aimCamera+0x1e4>
    aa1a:	|  |      move.l 17bae <sceneWidth>,d0
    aa20:	|  |      move.l d0,-(sp)
    aa22:	|  |      jsr 124c8 <__floatunsisf>
    aa28:	|  |      addq.l #4,sp
    aa2a:	|  |      move.l d0,d2
    aa2c:	|  |      move.l 17a28 <winWidth>,d0
    aa32:	|  |      move.l d0,-(sp)
    aa34:	|  |      jsr 124c8 <__floatunsisf>
    aa3a:	|  |      addq.l #4,sp
    aa3c:	|  |      move.l d0,d1
    aa3e:	|  |      move.l 16032 <cameraZoom>,d0
    aa44:	|  |      move.l d0,-(sp)
    aa46:	|  |      move.l d1,-(sp)
    aa48:	|  |      jsr 1234c <__divsf3>
    aa4e:	|  |      addq.l #8,sp
    aa50:	|  |      move.l d0,-(sp)
    aa52:	|  |      move.l d2,-(sp)
    aa54:	|  |      jsr 12794 <__subsf3>
    aa5a:	|  |      addq.l #8,sp
    aa5c:	|  |      move.l d0,-(sp)
    aa5e:	|  |      jsr 12438 <__fixsfsi>
    aa64:	|  |      addq.l #4,sp
    aa66:	|  |      move.l d0,17bcc <cameraX>
	if (cameraY < 0) cameraY = 0;
    aa6c:	|  \----> move.l 17bd0 <cameraY>,d0
    aa72:	|     /-- bpl.s aa7e <builtIn_aimCamera+0x1f6>
    aa74:	|     |   clr.l 17bd0 <cameraY>
    aa7a:	|  /--|-- bra.w ab34 <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    aa7e:	|  |  \-> move.l 17bd0 <cameraY>,d0
    aa84:	|  |      move.l d0,-(sp)
    aa86:	|  |      jsr 124a0 <__floatsisf>
    aa8c:	|  |      addq.l #4,sp
    aa8e:	|  |      move.l d0,d2
    aa90:	|  |      move.l 17bb2 <sceneHeight>,d0
    aa96:	|  |      move.l d0,-(sp)
    aa98:	|  |      jsr 124c8 <__floatunsisf>
    aa9e:	|  |      addq.l #4,sp
    aaa0:	|  |      move.l d0,d3
    aaa2:	|  |      move.l 17a2c <winHeight>,d0
    aaa8:	|  |      move.l d0,-(sp)
    aaaa:	|  |      jsr 124c8 <__floatunsisf>
    aab0:	|  |      addq.l #4,sp
    aab2:	|  |      move.l d0,d1
    aab4:	|  |      move.l 16032 <cameraZoom>,d0
    aaba:	|  |      move.l d0,-(sp)
    aabc:	|  |      move.l d1,-(sp)
    aabe:	|  |      jsr 1234c <__divsf3>
    aac4:	|  |      addq.l #8,sp
    aac6:	|  |      move.l d0,-(sp)
    aac8:	|  |      move.l d3,-(sp)
    aaca:	|  |      jsr 12794 <__subsf3>
    aad0:	|  |      addq.l #8,sp
    aad2:	|  |      move.l d0,-(sp)
    aad4:	|  |      move.l d2,-(sp)
    aad6:	|  |      jsr 1260c <__gtsf2>
    aadc:	|  |      addq.l #8,sp
    aade:	|  |      tst.l d0
    aae0:	|  +----- ble.s ab34 <builtIn_aimCamera+0x2ac>
    aae2:	|  |      move.l 17bb2 <sceneHeight>,d0
    aae8:	|  |      move.l d0,-(sp)
    aaea:	|  |      jsr 124c8 <__floatunsisf>
    aaf0:	|  |      addq.l #4,sp
    aaf2:	|  |      move.l d0,d2
    aaf4:	|  |      move.l 17a2c <winHeight>,d0
    aafa:	|  |      move.l d0,-(sp)
    aafc:	|  |      jsr 124c8 <__floatunsisf>
    ab02:	|  |      addq.l #4,sp
    ab04:	|  |      move.l d0,d1
    ab06:	|  |      move.l 16032 <cameraZoom>,d0
    ab0c:	|  |      move.l d0,-(sp)
    ab0e:	|  |      move.l d1,-(sp)
    ab10:	|  |      jsr 1234c <__divsf3>
    ab16:	|  |      addq.l #8,sp
    ab18:	|  |      move.l d0,-(sp)
    ab1a:	|  |      move.l d2,-(sp)
    ab1c:	|  |      jsr 12794 <__subsf3>
    ab22:	|  |      addq.l #8,sp
    ab24:	|  |      move.l d0,-(sp)
    ab26:	|  |      jsr 12438 <__fixsfsi>
    ab2c:	|  |      addq.l #4,sp
    ab2e:	|  |      move.l d0,17bd0 <cameraY>
	return BR_CONTINUE;
    ab34:	|  \----> moveq #2,d0
}
    ab36:	\-------> move.l (sp)+,d2
    ab38:	          move.l (sp)+,d3
    ab3a:	          rts

0000ab3c <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    ab3c:	       subq.l #4,sp
    ab3e:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ab40:	       movea.l 16(sp),a0
    ab44:	       move.l 24(a0),d0
    ab48:	       move.l d0,-(sp)
    ab4a:	       pea 1 <_start+0x1>
    ab4e:	       moveq #12,d0
    ab50:	       add.l sp,d0
    ab52:	       move.l d0,-(sp)
    ab54:	       jsr fff4 <getValueType>
    ab5a:	       lea 12(sp),sp
    ab5e:	       tst.w d0
    ab60:	   /-- bne.s ab68 <builtIn_zoomCamera+0x2c>
    ab62:	   |   moveq #1,d0
    ab64:	/--|-- bra.w ad62 <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    ab68:	|  \-> moveq #24,d0
    ab6a:	|      add.l 16(sp),d0
    ab6e:	|      move.l d0,-(sp)
    ab70:	|      jsr 10978 <trimStack>
    ab76:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    ab78:	|      move.l 17ae8 <input+0xa>,d0
    ab7e:	|      move.l d0,-(sp)
    ab80:	|      jsr 124a0 <__floatsisf>
    ab86:	|      addq.l #4,sp
    ab88:	|      move.l d0,d1
    ab8a:	|      move.l 16032 <cameraZoom>,d0
    ab90:	|      move.l d0,-(sp)
    ab92:	|      move.l d1,-(sp)
    ab94:	|      jsr 12552 <__mulsf3>
    ab9a:	|      addq.l #8,sp
    ab9c:	|      move.l d0,-(sp)
    ab9e:	|      jsr 12438 <__fixsfsi>
    aba4:	|      addq.l #4,sp
    aba6:	|      move.l d0,17ae8 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    abac:	|      move.l 17aec <input+0xe>,d0
    abb2:	|      move.l d0,-(sp)
    abb4:	|      jsr 124a0 <__floatsisf>
    abba:	|      addq.l #4,sp
    abbc:	|      move.l d0,d1
    abbe:	|      move.l 16032 <cameraZoom>,d0
    abc4:	|      move.l d0,-(sp)
    abc6:	|      move.l d1,-(sp)
    abc8:	|      jsr 12552 <__mulsf3>
    abce:	|      addq.l #8,sp
    abd0:	|      move.l d0,-(sp)
    abd2:	|      jsr 12438 <__fixsfsi>
    abd8:	|      addq.l #4,sp
    abda:	|      move.l d0,17aec <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    abe0:	|      move.l 4(sp),d0
    abe4:	|      move.l d0,-(sp)
    abe6:	|      jsr 124a0 <__floatsisf>
    abec:	|      addq.l #4,sp
    abee:	|      move.l #1008981770,-(sp)
    abf4:	|      move.l d0,-(sp)
    abf6:	|      jsr 12552 <__mulsf3>
    abfc:	|      addq.l #8,sp
    abfe:	|      move.l d0,16032 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    ac04:	|      move.l 17a28 <winWidth>,d0
    ac0a:	|      move.l d0,-(sp)
    ac0c:	|      jsr 124c8 <__floatunsisf>
    ac12:	|      addq.l #4,sp
    ac14:	|      move.l d0,d1
    ac16:	|      move.l 16032 <cameraZoom>,d0
    ac1c:	|      move.l d0,-(sp)
    ac1e:	|      move.l d1,-(sp)
    ac20:	|      jsr 1234c <__divsf3>
    ac26:	|      addq.l #8,sp
    ac28:	|      move.l d0,d2
    ac2a:	|      move.l 17bae <sceneWidth>,d0
    ac30:	|      move.l d0,-(sp)
    ac32:	|      jsr 124c8 <__floatunsisf>
    ac38:	|      addq.l #4,sp
    ac3a:	|      move.l d0,-(sp)
    ac3c:	|      move.l d2,-(sp)
    ac3e:	|      jsr 1260c <__gtsf2>
    ac44:	|      addq.l #8,sp
    ac46:	|      tst.l d0
    ac48:	|  /-- ble.s ac7e <builtIn_zoomCamera+0x142>
    ac4a:	|  |   move.l 17a28 <winWidth>,d0
    ac50:	|  |   move.l d0,-(sp)
    ac52:	|  |   jsr 124c8 <__floatunsisf>
    ac58:	|  |   addq.l #4,sp
    ac5a:	|  |   move.l d0,d2
    ac5c:	|  |   move.l 17bae <sceneWidth>,d0
    ac62:	|  |   move.l d0,-(sp)
    ac64:	|  |   jsr 124c8 <__floatunsisf>
    ac6a:	|  |   addq.l #4,sp
    ac6c:	|  |   move.l d0,-(sp)
    ac6e:	|  |   move.l d2,-(sp)
    ac70:	|  |   jsr 1234c <__divsf3>
    ac76:	|  |   addq.l #8,sp
    ac78:	|  |   move.l d0,16032 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    ac7e:	|  \-> move.l 17a2c <winHeight>,d0
    ac84:	|      move.l d0,-(sp)
    ac86:	|      jsr 124c8 <__floatunsisf>
    ac8c:	|      addq.l #4,sp
    ac8e:	|      move.l d0,d1
    ac90:	|      move.l 16032 <cameraZoom>,d0
    ac96:	|      move.l d0,-(sp)
    ac98:	|      move.l d1,-(sp)
    ac9a:	|      jsr 1234c <__divsf3>
    aca0:	|      addq.l #8,sp
    aca2:	|      move.l d0,d2
    aca4:	|      move.l 17bb2 <sceneHeight>,d0
    acaa:	|      move.l d0,-(sp)
    acac:	|      jsr 124c8 <__floatunsisf>
    acb2:	|      addq.l #4,sp
    acb4:	|      move.l d0,-(sp)
    acb6:	|      move.l d2,-(sp)
    acb8:	|      jsr 1260c <__gtsf2>
    acbe:	|      addq.l #8,sp
    acc0:	|      tst.l d0
    acc2:	|  /-- ble.s acf8 <builtIn_zoomCamera+0x1bc>
    acc4:	|  |   move.l 17a2c <winHeight>,d0
    acca:	|  |   move.l d0,-(sp)
    accc:	|  |   jsr 124c8 <__floatunsisf>
    acd2:	|  |   addq.l #4,sp
    acd4:	|  |   move.l d0,d2
    acd6:	|  |   move.l 17bb2 <sceneHeight>,d0
    acdc:	|  |   move.l d0,-(sp)
    acde:	|  |   jsr 124c8 <__floatunsisf>
    ace4:	|  |   addq.l #4,sp
    ace6:	|  |   move.l d0,-(sp)
    ace8:	|  |   move.l d2,-(sp)
    acea:	|  |   jsr 1234c <__divsf3>
    acf0:	|  |   addq.l #8,sp
    acf2:	|  |   move.l d0,16032 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    acf8:	|  \-> move.l 17ae8 <input+0xa>,d0
    acfe:	|      move.l d0,-(sp)
    ad00:	|      jsr 124a0 <__floatsisf>
    ad06:	|      addq.l #4,sp
    ad08:	|      move.l d0,d1
    ad0a:	|      move.l 16032 <cameraZoom>,d0
    ad10:	|      move.l d0,-(sp)
    ad12:	|      move.l d1,-(sp)
    ad14:	|      jsr 1234c <__divsf3>
    ad1a:	|      addq.l #8,sp
    ad1c:	|      move.l d0,-(sp)
    ad1e:	|      jsr 12438 <__fixsfsi>
    ad24:	|      addq.l #4,sp
    ad26:	|      move.l d0,17ae8 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    ad2c:	|      move.l 17aec <input+0xe>,d0
    ad32:	|      move.l d0,-(sp)
    ad34:	|      jsr 124a0 <__floatsisf>
    ad3a:	|      addq.l #4,sp
    ad3c:	|      move.l d0,d1
    ad3e:	|      move.l 16032 <cameraZoom>,d0
    ad44:	|      move.l d0,-(sp)
    ad46:	|      move.l d1,-(sp)
    ad48:	|      jsr 1234c <__divsf3>
    ad4e:	|      addq.l #8,sp
    ad50:	|      move.l d0,-(sp)
    ad52:	|      jsr 12438 <__fixsfsi>
    ad58:	|      addq.l #4,sp
    ad5a:	|      move.l d0,17aec <input+0xe>

	return BR_CONTINUE;
    ad60:	|      moveq #2,d0
}
    ad62:	\----> move.l (sp)+,d2
    ad64:	       addq.l #4,sp
    ad66:	       rts

0000ad68 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    ad68:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    ad6a:	             tst.l 8(sp)
    ad6e:	         /-- bne.s ad82 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    ad70:	         |   pea 15765 <zbuffer.c.4facf542+0xad>
    ad76:	         |   jsr 12048 <KPrintF>
    ad7c:	         |   addq.l #4,sp
		return BR_ERROR;
    ad7e:	         |   moveq #1,d0
    ad80:	/--------|-- bra.s ade2 <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    ad82:	|        \-> jsr c58 <rand>
    ad88:	|            move.l d0,d1
    ad8a:	|            move.l 8(sp),d0
    ad8e:	|            move.l d0,-(sp)
    ad90:	|            move.l d1,-(sp)
    ad92:	|            jsr 12ad4 <__umodsi3>
    ad98:	|            addq.l #8,sp
    ad9a:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    ad9c:	|     /----- bra.s add0 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    ad9e:	|  /--|----> move.l (sp),d0
    ada0:	|  |  |      cmp.l 8(sp),d0
    ada4:	|  |  |  /-- bne.s adc0 <builtIn_pickOne+0x58>
    ada6:	|  |  |  |   moveq #28,d0
    ada8:	|  |  |  |   add.l 12(sp),d0
    adac:	|  |  |  |   movea.l 12(sp),a0
    adb0:	|  |  |  |   move.l 24(a0),d1
    adb4:	|  |  |  |   move.l d0,-(sp)
    adb6:	|  |  |  |   move.l d1,-(sp)
    adb8:	|  |  |  |   jsr 104ae <copyVariable>
    adbe:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    adc0:	|  |  |  \-> moveq #24,d0
    adc2:	|  |  |      add.l 12(sp),d0
    adc6:	|  |  |      move.l d0,-(sp)
    adc8:	|  |  |      jsr 10978 <trimStack>
    adce:	|  |  |      addq.l #4,sp
	while (numParams --) {
    add0:	|  |  \----> move.l 8(sp),d0
    add4:	|  |         move.l d0,d1
    add6:	|  |         subq.l #1,d1
    add8:	|  |         move.l d1,8(sp)
    addc:	|  |         tst.l d0
    adde:	|  \-------- bne.s ad9e <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    ade0:	|            moveq #2,d0
}
    ade2:	\----------> addq.l #4,sp
    ade4:	             rts

0000ade6 <builtIn_substring>:

builtIn(substring)
{
    ade6:	       lea -40(sp),sp
    adea:	       move.l a6,-(sp)
    adec:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    adee:	       movea.l 56(sp),a0
    adf2:	       move.l 24(a0),d0
    adf6:	       move.l d0,-(sp)
    adf8:	       pea 1 <_start+0x1>
    adfc:	       lea 16(sp),a0
    ae00:	       move.l a0,-(sp)
    ae02:	       jsr fff4 <getValueType>
    ae08:	       lea 12(sp),sp
    ae0c:	       tst.w d0
    ae0e:	   /-- bne.s ae16 <builtIn_substring+0x30>
    ae10:	   |   moveq #1,d0
    ae12:	/--|-- bra.w af8e <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    ae16:	|  \-> moveq #24,d0
    ae18:	|      add.l 56(sp),d0
    ae1c:	|      move.l d0,-(sp)
    ae1e:	|      jsr 10978 <trimStack>
    ae24:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ae26:	|      movea.l 56(sp),a0
    ae2a:	|      move.l 24(a0),d0
    ae2e:	|      move.l d0,-(sp)
    ae30:	|      pea 1 <_start+0x1>
    ae34:	|      lea 20(sp),a0
    ae38:	|      move.l a0,-(sp)
    ae3a:	|      jsr fff4 <getValueType>
    ae40:	|      lea 12(sp),sp
    ae44:	|      tst.w d0
    ae46:	|  /-- bne.s ae4e <builtIn_substring+0x68>
    ae48:	|  |   moveq #1,d0
    ae4a:	+--|-- bra.w af8e <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    ae4e:	|  \-> moveq #24,d0
    ae50:	|      add.l 56(sp),d0
    ae54:	|      move.l d0,-(sp)
    ae56:	|      jsr 10978 <trimStack>
    ae5c:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    ae5e:	|      movea.l 56(sp),a0
    ae62:	|      move.l 24(a0),d0
    ae66:	|      move.l d0,-(sp)
    ae68:	|      jsr 105ca <getTextFromAnyVar>
    ae6e:	|      addq.l #4,sp
    ae70:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    ae74:	|      moveq #24,d0
    ae76:	|      add.l 56(sp),d0
    ae7a:	|      move.l d0,-(sp)
    ae7c:	|      jsr 10978 <trimStack>
    ae82:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    ae84:	|      move.l 44(sp),-(sp)
    ae88:	|      jsr f4e0 <strlen>
    ae8e:	|      addq.l #4,sp
    ae90:	|      move.l d0,d1
    ae92:	|      move.l 12(sp),d0
    ae96:	|      movea.l d0,a0
    ae98:	|      move.l 8(sp),d0
    ae9c:	|      add.l a0,d0
    ae9e:	|      cmp.l d1,d0
    aea0:	|  /-- bls.s aed6 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    aea2:	|  |   move.l 44(sp),-(sp)
    aea6:	|  |   jsr f4e0 <strlen>
    aeac:	|  |   addq.l #4,sp
    aeae:	|  |   move.l d0,d1
    aeb0:	|  |   move.l 12(sp),d0
    aeb4:	|  |   sub.l d0,d1
    aeb6:	|  |   move.l d1,d0
    aeb8:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    aebc:	|  |   move.l 44(sp),-(sp)
    aec0:	|  |   jsr f4e0 <strlen>
    aec6:	|  |   addq.l #4,sp
    aec8:	|  |   move.l d0,d1
    aeca:	|  |   move.l 12(sp),d0
    aece:	|  |   cmp.l d1,d0
    aed0:	|  +-- bls.s aed6 <builtIn_substring+0xf0>
            start = 0;
    aed2:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    aed6:	|  \-> move.l 8(sp),d0
    aeda:	|  /-- bpl.s aee0 <builtIn_substring+0xfa>
        length = 0;
    aedc:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    aee0:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    aee6:	|      move.l 12(sp),d1
    aeea:	|      move.l 8(sp),d0
    aeee:	|      move.l d1,d2
    aef0:	|      add.l d0,d2
    aef2:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    aef6:	|      move.l 36(sp),d0
    aefa:	|      sub.l 40(sp),d0
    aefe:	|      addq.l #1,d0
    af00:	|      move.l d0,32(sp)
    af04:	|      clr.l 28(sp)
    af08:	|      move.l 17b28 <SysBase>,d0
    af0e:	|      movea.l d0,a6
    af10:	|      move.l 32(sp),d0
    af14:	|      move.l 28(sp),d1
    af18:	|      jsr -684(a6)
    af1c:	|      move.l d0,24(sp)
    af20:	|      move.l 24(sp),d0
    af24:	|      move.l d0,20(sp)
    if (!newString) {
    af28:	|  /-- bne.s af2e <builtIn_substring+0x148>
        return BR_ERROR;
    af2a:	|  |   moveq #1,d0
    af2c:	+--|-- bra.s af8e <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    af2e:	|  \-> move.l 36(sp),d0
    af32:	|      sub.l 40(sp),d0
    af36:	|      move.l d0,d1
    af38:	|      move.l 40(sp),d0
    af3c:	|      add.l 44(sp),d0
    af40:	|      move.l d1,-(sp)
    af42:	|      move.l d0,-(sp)
    af44:	|      move.l 28(sp),-(sp)
    af48:	|      jsr 11ffc <memcpy>
    af4e:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    af52:	|      move.l 36(sp),d0
    af56:	|      sub.l 40(sp),d0
    af5a:	|      movea.l 20(sp),a0
    af5e:	|      adda.l d0,a0
    af60:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    af62:	|      moveq #28,d0
    af64:	|      add.l 56(sp),d0
    af68:	|      move.l 20(sp),-(sp)
    af6c:	|      move.l d0,-(sp)
    af6e:	|      jsr 10216 <makeTextVar>
    af74:	|      addq.l #8,sp
    FreeVec(newString);
    af76:	|      move.l 20(sp),16(sp)
    af7c:	|      move.l 17b28 <SysBase>,d0
    af82:	|      movea.l d0,a6
    af84:	|      movea.l 16(sp),a1
    af88:	|      jsr -690(a6)
    return BR_CONTINUE;
    af8c:	|      moveq #2,d0
}
    af8e:	\----> move.l (sp)+,d2
    af90:	       movea.l (sp)+,a6
    af92:	       lea 40(sp),sp
    af96:	       rts

0000af98 <builtIn_stringLength>:

builtIn(stringLength)
{
    af98:	subq.l #8,sp
    af9a:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    af9c:	movea.l 20(sp),a0
    afa0:	move.l 24(a0),d0
    afa4:	move.l d0,-(sp)
    afa6:	jsr 105ca <getTextFromAnyVar>
    afac:	addq.l #4,sp
    afae:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    afb2:	moveq #24,d0
    afb4:	add.l 20(sp),d0
    afb8:	move.l d0,-(sp)
    afba:	jsr 10978 <trimStack>
    afc0:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    afc2:	move.l 8(sp),-(sp)
    afc6:	jsr f4e0 <strlen>
    afcc:	addq.l #4,sp
    afce:	move.l d0,d1
    afd0:	moveq #28,d0
    afd2:	add.l 20(sp),d0
    afd6:	move.l d1,-(sp)
    afd8:	pea 1 <_start+0x1>
    afdc:	move.l d0,-(sp)
    afde:	jsr 108e6 <setVariable>
    afe4:	lea 12(sp),sp
	FreeVec(newText);
    afe8:	move.l 8(sp),4(sp)
    afee:	move.l 17b28 <SysBase>,d0
    aff4:	movea.l d0,a6
    aff6:	movea.l 4(sp),a1
    affa:	jsr -690(a6)
	return BR_CONTINUE;
    affe:	moveq #2,d0
}
    b000:	movea.l (sp)+,a6
    b002:	addq.l #8,sp
    b004:	rts

0000b006 <builtIn_newStack>:

builtIn(newStack)
{
    b006:	             lea -12(sp),sp
    b00a:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    b00c:	             moveq #28,d0
    b00e:	             add.l 24(sp),d0
    b012:	             move.l d0,-(sp)
    b014:	             jsr 10242 <unlinkVar>
    b01a:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    b01c:	             movea.l 24(sp),a0
    b020:	             moveq #6,d0
    b022:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    b026:	             moveq #12,d1
    b028:	             move.l d1,12(sp)
    b02c:	             clr.l 8(sp)
    b030:	             move.l 17b28 <SysBase>,d0
    b036:	             movea.l d0,a6
    b038:	             move.l 12(sp),d0
    b03c:	             move.l 8(sp),d1
    b040:	             jsr -684(a6)
    b044:	             move.l d0,4(sp)
    b048:	             move.l 4(sp),d0
    b04c:	             movea.l 24(sp),a0
    b050:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    b054:	             movea.l 24(sp),a0
    b058:	             move.l 32(a0),d0
    b05c:	         /-- bne.s b064 <builtIn_newStack+0x5e>
    b05e:	         |   moveq #1,d0
    b060:	/--------|-- bra.w b0f6 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    b064:	|        \-> movea.l 24(sp),a0
    b068:	|            movea.l 32(a0),a0
    b06c:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    b06e:	|            movea.l 24(sp),a0
    b072:	|            movea.l 32(a0),a0
    b076:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    b07a:	|            movea.l 24(sp),a0
    b07e:	|            movea.l 32(a0),a0
    b082:	|            moveq #1,d0
    b084:	|            move.l d0,8(a0)
    
    while (numParams--) {
    b088:	|     /----- bra.s b0e4 <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    b08a:	|  /--|----> movea.l 24(sp),a0
    b08e:	|  |  |      move.l 32(a0),d0
    b092:	|  |  |      move.l d0,d1
    b094:	|  |  |      movea.l 24(sp),a0
    b098:	|  |  |      move.l 24(a0),d0
    b09c:	|  |  |      move.l d1,-(sp)
    b09e:	|  |  |      move.l d0,-(sp)
    b0a0:	|  |  |      jsr f830 <addVarToStack>
    b0a6:	|  |  |      addq.l #8,sp
    b0a8:	|  |  |      tst.w d0
    b0aa:	|  |  |  /-- bne.s b0b0 <builtIn_newStack+0xaa>
    b0ac:	|  |  |  |   moveq #1,d0
    b0ae:	+--|--|--|-- bra.s b0f6 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    b0b0:	|  |  |  \-> movea.l 24(sp),a0
    b0b4:	|  |  |      movea.l 32(a0),a0
    b0b8:	|  |  |      move.l 4(a0),d0
    b0bc:	|  |  |  /-- bne.s b0d4 <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    b0be:	|  |  |  |   movea.l 24(sp),a0
    b0c2:	|  |  |  |   movea.l 32(a0),a1
    b0c6:	|  |  |  |   movea.l 24(sp),a0
    b0ca:	|  |  |  |   movea.l 32(a0),a0
    b0ce:	|  |  |  |   move.l (a1),d0
    b0d0:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    b0d4:	|  |  |  \-> moveq #24,d0
    b0d6:	|  |  |      add.l 24(sp),d0
    b0da:	|  |  |      move.l d0,-(sp)
    b0dc:	|  |  |      jsr 10978 <trimStack>
    b0e2:	|  |  |      addq.l #4,sp
    while (numParams--) {
    b0e4:	|  |  \----> move.l 20(sp),d0
    b0e8:	|  |         move.l d0,d1
    b0ea:	|  |         subq.l #1,d1
    b0ec:	|  |         move.l d1,20(sp)
    b0f0:	|  |         tst.l d0
    b0f2:	|  \-------- bne.s b08a <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    b0f4:	|            moveq #2,d0
}
    b0f6:	\----------> movea.l (sp)+,a6
    b0f8:	             lea 12(sp),sp
    b0fc:	             rts

0000b0fe <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    b0fe:	          movea.l 8(sp),a0
    b102:	          movea.l 24(a0),a0
    b106:	          move.l (a0),d0
    b108:	          moveq #6,d1
    b10a:	          cmp.l d0,d1
    b10c:	      /-- beq.s b128 <builtIn_stackSize+0x2a>
    b10e:	      |   moveq #10,d1
    b110:	      |   cmp.l d0,d1
    b112:	   /--|-- beq.s b16c <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    b114:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    b116:	   |  |   pea 15798 <zbuffer.c.4facf542+0xe0>
    b11c:	   |  |   jsr 12048 <KPrintF>
    b122:	   |  |   addq.l #4,sp
	return BR_ERROR;
    b124:	   |  |   moveq #1,d0
    b126:	/--|--|-- bra.s b1a6 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    b128:	|  |  \-> movea.l 8(sp),a0
    b12c:	|  |      movea.l 24(a0),a0
    b130:	|  |      move.l 4(a0),d0
    b134:	|  |      move.l d0,-(sp)
    b136:	|  |      jsr 10954 <stackSize>
    b13c:	|  |      addq.l #4,sp
    b13e:	|  |      move.l d0,d1
    b140:	|  |      moveq #28,d0
    b142:	|  |      add.l 8(sp),d0
    b146:	|  |      move.l d1,-(sp)
    b148:	|  |      pea 1 <_start+0x1>
    b14c:	|  |      move.l d0,-(sp)
    b14e:	|  |      jsr 108e6 <setVariable>
    b154:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    b158:	|  |      moveq #24,d0
    b15a:	|  |      add.l 8(sp),d0
    b15e:	|  |      move.l d0,-(sp)
    b160:	|  |      jsr 10978 <trimStack>
    b166:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    b168:	|  |      moveq #2,d0
    b16a:	+--|----- bra.s b1a6 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    b16c:	|  \----> movea.l 8(sp),a0
    b170:	|         movea.l 24(a0),a0
    b174:	|         movea.l 4(a0),a0
    b178:	|         move.l 4(a0),d1
    b17c:	|         moveq #28,d0
    b17e:	|         add.l 8(sp),d0
    b182:	|         move.l d1,-(sp)
    b184:	|         pea 1 <_start+0x1>
    b188:	|         move.l d0,-(sp)
    b18a:	|         jsr 108e6 <setVariable>
    b190:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    b194:	|         moveq #24,d0
    b196:	|         add.l 8(sp),d0
    b19a:	|         move.l d0,-(sp)
    b19c:	|         jsr 10978 <trimStack>
    b1a2:	|         addq.l #4,sp
			return BR_CONTINUE;
    b1a4:	|         moveq #2,d0
}
    b1a6:	\-------> rts

0000b1a8 <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    b1a8:	       movea.l 8(sp),a0
    b1ac:	       movea.l 24(a0),a0
    b1b0:	       move.l (a0),d0
    b1b2:	       moveq #6,d1
    b1b4:	       cmp.l d0,d1
    b1b6:	   /-- beq.s b1ca <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    b1b8:	   |   pea 157c1 <zbuffer.c.4facf542+0x109>
    b1be:	   |   jsr 12048 <KPrintF>
    b1c4:	   |   addq.l #4,sp
		return BR_ERROR;
    b1c6:	   |   moveq #1,d0
    b1c8:	/--|-- bra.s b1fe <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    b1ca:	|  \-> moveq #28,d0
    b1cc:	|      add.l 8(sp),d0
    b1d0:	|      movea.l 8(sp),a0
    b1d4:	|      move.l 24(a0),d1
    b1d8:	|      move.l d0,-(sp)
    b1da:	|      move.l d1,-(sp)
    b1dc:	|      jsr fafa <copyStack>
    b1e2:	|      addq.l #8,sp
    b1e4:	|      tst.w d0
    b1e6:	|  /-- bne.s b1ec <builtIn_copyStack+0x44>
    b1e8:	|  |   moveq #1,d0
    b1ea:	+--|-- bra.s b1fe <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    b1ec:	|  \-> moveq #24,d0
    b1ee:	|      add.l 8(sp),d0
    b1f2:	|      move.l d0,-(sp)
    b1f4:	|      jsr 10978 <trimStack>
    b1fa:	|      addq.l #4,sp
	return BR_CONTINUE;
    b1fc:	|      moveq #2,d0
}
    b1fe:	\----> rts

0000b200 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    b200:	       movea.l 8(sp),a0
    b204:	       movea.l 24(a0),a0
    b208:	       movea.l 8(a0),a0
    b20c:	       move.l (a0),d0
    b20e:	       moveq #6,d1
    b210:	       cmp.l d0,d1
    b212:	   /-- beq.s b228 <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    b214:	   |   pea 157da <zbuffer.c.4facf542+0x122>
    b21a:	   |   jsr 12048 <KPrintF>
    b220:	   |   addq.l #4,sp
		return BR_ERROR;
    b222:	   |   moveq #1,d0
    b224:	/--|-- bra.w b2b6 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    b228:	|  \-> movea.l 8(sp),a0
    b22c:	|      movea.l 24(a0),a0
    b230:	|      movea.l 8(a0),a0
    b234:	|      move.l 4(a0),d0
    b238:	|      move.l d0,d1
    b23a:	|      movea.l 8(sp),a0
    b23e:	|      move.l 24(a0),d0
    b242:	|      move.l d1,-(sp)
    b244:	|      move.l d0,-(sp)
    b246:	|      jsr f830 <addVarToStack>
    b24c:	|      addq.l #8,sp
    b24e:	|      tst.w d0
    b250:	|  /-- bne.s b256 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    b252:	|  |   moveq #1,d0
    b254:	+--|-- bra.s b2b6 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    b256:	|  \-> movea.l 8(sp),a0
    b25a:	|      movea.l 24(a0),a0
    b25e:	|      movea.l 8(a0),a0
    b262:	|      movea.l 4(a0),a0
    b266:	|      movea.l (a0),a0
    b268:	|      move.l 8(a0),d0
    b26c:	|  /-- bne.s b294 <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    b26e:	|  |   movea.l 8(sp),a0
    b272:	|  |   movea.l 24(a0),a0
    b276:	|  |   movea.l 8(a0),a0
    b27a:	|  |   movea.l 4(a0),a1
    b27e:	|  |   movea.l 8(sp),a0
    b282:	|  |   movea.l 24(a0),a0
    b286:	|  |   movea.l 8(a0),a0
    b28a:	|  |   movea.l 4(a0),a0
    b28e:	|  |   move.l (a1),d0
    b290:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    b294:	|  \-> moveq #24,d0
    b296:	|      add.l 8(sp),d0
    b29a:	|      move.l d0,-(sp)
    b29c:	|      jsr 10978 <trimStack>
    b2a2:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    b2a4:	|      moveq #24,d0
    b2a6:	|      add.l 8(sp),d0
    b2aa:	|      move.l d0,-(sp)
    b2ac:	|      jsr 10978 <trimStack>
    b2b2:	|      addq.l #4,sp
	return BR_CONTINUE;
    b2b4:	|      moveq #2,d0
}
    b2b6:	\----> rts

0000b2b8 <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    b2b8:	             movea.l 8(sp),a0
    b2bc:	             movea.l 24(a0),a0
    b2c0:	             movea.l 8(a0),a0
    b2c4:	             move.l (a0),d0
    b2c6:	             moveq #6,d1
    b2c8:	             cmp.l d0,d1
    b2ca:	         /-- beq.s b2e0 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    b2cc:	         |   pea 157da <zbuffer.c.4facf542+0x122>
    b2d2:	         |   jsr 12048 <KPrintF>
    b2d8:	         |   addq.l #4,sp
		return BR_ERROR;
    b2da:	         |   moveq #1,d0
    b2dc:	/--------|-- bra.w b3ce <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    b2e0:	|        \-> movea.l 8(sp),a0
    b2e4:	|            movea.l 24(a0),a0
    b2e8:	|            movea.l 8(a0),a0
    b2ec:	|            movea.l 4(a0),a0
    b2f0:	|            move.l (a0),d0
    b2f2:	|     /----- bne.s b34c <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    b2f4:	|     |      movea.l 8(sp),a0
    b2f8:	|     |      movea.l 24(a0),a0
    b2fc:	|     |      movea.l 8(a0),a0
    b300:	|     |      move.l 4(a0),d0
    b304:	|     |      move.l d0,d1
    b306:	|     |      movea.l 8(sp),a0
    b30a:	|     |      move.l 24(a0),d0
    b30e:	|     |      move.l d1,-(sp)
    b310:	|     |      move.l d0,-(sp)
    b312:	|     |      jsr f830 <addVarToStack>
    b318:	|     |      addq.l #8,sp
    b31a:	|     |      tst.w d0
    b31c:	|     |  /-- bne.s b324 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    b31e:	|     |  |   moveq #1,d0
    b320:	+-----|--|-- bra.w b3ce <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    b324:	|     |  \-> movea.l 8(sp),a0
    b328:	|     |      movea.l 24(a0),a0
    b32c:	|     |      movea.l 8(a0),a0
    b330:	|     |      movea.l 4(a0),a1
    b334:	|     |      movea.l 8(sp),a0
    b338:	|     |      movea.l 24(a0),a0
    b33c:	|     |      movea.l 8(a0),a0
    b340:	|     |      movea.l 4(a0),a0
    b344:	|     |      move.l (a1),d0
    b346:	|     |      move.l d0,4(a0)
    b34a:	|  /--|----- bra.s b3ac <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    b34c:	|  |  \----> movea.l 8(sp),a0
    b350:	|  |         movea.l 24(a0),a0
    b354:	|  |         movea.l 8(a0),a0
    b358:	|  |         movea.l 4(a0),a0
    b35c:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    b360:	|  |         move.l d0,d1
    b362:	|  |         addq.l #8,d1
    b364:	|  |         movea.l 8(sp),a0
    b368:	|  |         move.l 24(a0),d0
    b36c:	|  |         move.l d1,-(sp)
    b36e:	|  |         move.l d0,-(sp)
    b370:	|  |         jsr f830 <addVarToStack>
    b376:	|  |         addq.l #8,sp
    b378:	|  |         tst.w d0
    b37a:	|  |     /-- bne.s b380 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    b37c:	|  |     |   moveq #1,d0
    b37e:	+--|-----|-- bra.s b3ce <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    b380:	|  |     \-> movea.l 8(sp),a0
    b384:	|  |         movea.l 24(a0),a0
    b388:	|  |         movea.l 8(a0),a0
    b38c:	|  |         movea.l 4(a0),a0
    b390:	|  |         movea.l 4(a0),a1
    b394:	|  |         movea.l 8(sp),a0
    b398:	|  |         movea.l 24(a0),a0
    b39c:	|  |         movea.l 8(a0),a0
    b3a0:	|  |         movea.l 4(a0),a0
    b3a4:	|  |         move.l 8(a1),d0
    b3a8:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    b3ac:	|  \-------> moveq #24,d0
    b3ae:	|            add.l 8(sp),d0
    b3b2:	|            move.l d0,-(sp)
    b3b4:	|            jsr 10978 <trimStack>
    b3ba:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    b3bc:	|            moveq #24,d0
    b3be:	|            add.l 8(sp),d0
    b3c2:	|            move.l d0,-(sp)
    b3c4:	|            jsr 10978 <trimStack>
    b3ca:	|            addq.l #4,sp
	return BR_CONTINUE;
    b3cc:	|            moveq #2,d0
}
    b3ce:	\----------> rts

0000b3d0 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    b3d0:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    b3d2:	       movea.l 12(sp),a0
    b3d6:	       movea.l 24(a0),a0
    b3da:	       movea.l 8(a0),a0
    b3de:	       move.l (a0),d0
    b3e0:	       moveq #6,d1
    b3e2:	       cmp.l d0,d1
    b3e4:	   /-- beq.s b3fa <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    b3e6:	   |   pea 157c1 <zbuffer.c.4facf542+0x109>
    b3ec:	   |   jsr 12048 <KPrintF>
    b3f2:	   |   addq.l #4,sp
		return BR_ERROR;
    b3f4:	   |   moveq #1,d0
    b3f6:	/--|-- bra.w b490 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    b3fa:	|  \-> movea.l 12(sp),a0
    b3fe:	|      movea.l 24(a0),a0
    b402:	|      movea.l 8(a0),a0
    b406:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    b40a:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    b40c:	|      movea.l 12(sp),a0
    b410:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    b414:	|      clr.l -(sp)
    b416:	|      move.l d1,-(sp)
    b418:	|      move.l d0,-(sp)
    b41a:	|      jsr fbd0 <deleteVarFromStack>
    b420:	|      lea 12(sp),sp
    b424:	|      move.l d0,d1
    b426:	|      moveq #28,d0
    b428:	|      add.l 12(sp),d0
    b42c:	|      move.l d1,-(sp)
    b42e:	|      pea 1 <_start+0x1>
    b432:	|      move.l d0,-(sp)
    b434:	|      jsr 108e6 <setVariable>
    b43a:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    b43e:	|      movea.l 12(sp),a0
    b442:	|      movea.l 24(a0),a0
    b446:	|      movea.l 8(a0),a0
    b44a:	|      movea.l 4(a0),a0
    b44e:	|      move.l (a0),d0
    b450:	|      movea.l 12(sp),a0
    b454:	|      movea.l 24(a0),a0
    b458:	|      movea.l 8(a0),a0
    b45c:	|      movea.l 4(a0),a2
    b460:	|      move.l d0,-(sp)
    b462:	|      jsr 10930 <stackFindLast>
    b468:	|      addq.l #4,sp
    b46a:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    b46e:	|      moveq #24,d0
    b470:	|      add.l 12(sp),d0
    b474:	|      move.l d0,-(sp)
    b476:	|      jsr 10978 <trimStack>
    b47c:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    b47e:	|      moveq #24,d0
    b480:	|      add.l 12(sp),d0
    b484:	|      move.l d0,-(sp)
    b486:	|      jsr 10978 <trimStack>
    b48c:	|      addq.l #4,sp
	return BR_CONTINUE;
    b48e:	|      moveq #2,d0
}
    b490:	\----> movea.l (sp)+,a2
    b492:	       rts

0000b494 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    b494:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    b496:	       movea.l 12(sp),a0
    b49a:	       movea.l 24(a0),a0
    b49e:	       movea.l 8(a0),a0
    b4a2:	       move.l (a0),d0
    b4a4:	       moveq #6,d1
    b4a6:	       cmp.l d0,d1
    b4a8:	   /-- beq.s b4be <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    b4aa:	   |   pea 157c1 <zbuffer.c.4facf542+0x109>
    b4b0:	   |   jsr 12048 <KPrintF>
    b4b6:	   |   addq.l #4,sp
		return BR_ERROR;
    b4b8:	   |   moveq #1,d0
    b4ba:	/--|-- bra.w b556 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    b4be:	|  \-> movea.l 12(sp),a0
    b4c2:	|      movea.l 24(a0),a0
    b4c6:	|      movea.l 8(a0),a0
    b4ca:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    b4ce:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    b4d0:	|      movea.l 12(sp),a0
    b4d4:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    b4d8:	|      pea 1 <_start+0x1>
    b4dc:	|      move.l d1,-(sp)
    b4de:	|      move.l d0,-(sp)
    b4e0:	|      jsr fbd0 <deleteVarFromStack>
    b4e6:	|      lea 12(sp),sp
    b4ea:	|      move.l d0,d1
    b4ec:	|      moveq #28,d0
    b4ee:	|      add.l 12(sp),d0
    b4f2:	|      move.l d1,-(sp)
    b4f4:	|      pea 1 <_start+0x1>
    b4f8:	|      move.l d0,-(sp)
    b4fa:	|      jsr 108e6 <setVariable>
    b500:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    b504:	|      movea.l 12(sp),a0
    b508:	|      movea.l 24(a0),a0
    b50c:	|      movea.l 8(a0),a0
    b510:	|      movea.l 4(a0),a0
    b514:	|      move.l (a0),d0
    b516:	|      movea.l 12(sp),a0
    b51a:	|      movea.l 24(a0),a0
    b51e:	|      movea.l 8(a0),a0
    b522:	|      movea.l 4(a0),a2
    b526:	|      move.l d0,-(sp)
    b528:	|      jsr 10930 <stackFindLast>
    b52e:	|      addq.l #4,sp
    b530:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    b534:	|      moveq #24,d0
    b536:	|      add.l 12(sp),d0
    b53a:	|      move.l d0,-(sp)
    b53c:	|      jsr 10978 <trimStack>
    b542:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    b544:	|      moveq #24,d0
    b546:	|      add.l 12(sp),d0
    b54a:	|      move.l d0,-(sp)
    b54c:	|      jsr 10978 <trimStack>
    b552:	|      addq.l #4,sp
	return BR_CONTINUE;
    b554:	|      moveq #2,d0
}
    b556:	\----> movea.l (sp)+,a2
    b558:	       rts

0000b55a <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    b55a:	       movea.l 8(sp),a0
    b55e:	       movea.l 24(a0),a0
    b562:	       move.l (a0),d0
    b564:	       moveq #6,d1
    b566:	       cmp.l d0,d1
    b568:	   /-- beq.s b57c <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    b56a:	   |   pea 157c1 <zbuffer.c.4facf542+0x109>
    b570:	   |   jsr 12048 <KPrintF>
    b576:	   |   addq.l #4,sp
		return BR_ERROR;
    b578:	   |   moveq #1,d0
    b57a:	/--|-- bra.s b5e6 <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    b57c:	|  \-> movea.l 8(sp),a0
    b580:	|      movea.l 24(a0),a0
    b584:	|      movea.l 4(a0),a0
    b588:	|      move.l (a0),d0
    b58a:	|  /-- bne.s b59e <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    b58c:	|  |   pea 157f2 <zbuffer.c.4facf542+0x13a>
    b592:	|  |   jsr 12048 <KPrintF>
    b598:	|  |   addq.l #4,sp
		return BR_ERROR;
    b59a:	|  |   moveq #1,d0
    b59c:	+--|-- bra.s b5e6 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    b59e:	|  \-> moveq #28,d0
    b5a0:	|      add.l 8(sp),d0
    b5a4:	|      movea.l 8(sp),a0
    b5a8:	|      movea.l 24(a0),a0
    b5ac:	|      movea.l 4(a0),a0
    b5b0:	|      move.l (a0),d1
    b5b2:	|      move.l d0,-(sp)
    b5b4:	|      move.l d1,-(sp)
    b5b6:	|      jsr 104ae <copyVariable>
    b5bc:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    b5be:	|      movea.l 8(sp),a0
    b5c2:	|      movea.l 24(a0),a0
    b5c6:	|      move.l 4(a0),d0
    b5ca:	|      move.l d0,-(sp)
    b5cc:	|      jsr 10978 <trimStack>
    b5d2:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    b5d4:	|      moveq #24,d0
    b5d6:	|      add.l 8(sp),d0
    b5da:	|      move.l d0,-(sp)
    b5dc:	|      jsr 10978 <trimStack>
    b5e2:	|      addq.l #4,sp
	return BR_CONTINUE;
    b5e4:	|      moveq #2,d0
}
    b5e6:	\----> rts

0000b5e8 <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    b5e8:	       movea.l 8(sp),a0
    b5ec:	       movea.l 24(a0),a0
    b5f0:	       move.l (a0),d0
    b5f2:	       moveq #6,d1
    b5f4:	       cmp.l d0,d1
    b5f6:	   /-- beq.s b60a <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    b5f8:	   |   pea 157c1 <zbuffer.c.4facf542+0x109>
    b5fe:	   |   jsr 12048 <KPrintF>
    b604:	   |   addq.l #4,sp
		return BR_ERROR;
    b606:	   |   moveq #1,d0
    b608:	/--|-- bra.s b65e <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    b60a:	|  \-> movea.l 8(sp),a0
    b60e:	|      movea.l 24(a0),a0
    b612:	|      movea.l 4(a0),a0
    b616:	|      move.l (a0),d0
    b618:	|  /-- bne.s b62c <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    b61a:	|  |   pea 157f2 <zbuffer.c.4facf542+0x13a>
    b620:	|  |   jsr 12048 <KPrintF>
    b626:	|  |   addq.l #4,sp
		return BR_ERROR;
    b628:	|  |   moveq #1,d0
    b62a:	+--|-- bra.s b65e <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    b62c:	|  \-> moveq #28,d0
    b62e:	|      add.l 8(sp),d0
    b632:	|      movea.l 8(sp),a0
    b636:	|      movea.l 24(a0),a0
    b63a:	|      movea.l 4(a0),a0
    b63e:	|      move.l (a0),d1
    b640:	|      move.l d0,-(sp)
    b642:	|      move.l d1,-(sp)
    b644:	|      jsr 104ae <copyVariable>
    b64a:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    b64c:	|      moveq #24,d0
    b64e:	|      add.l 8(sp),d0
    b652:	|      move.l d0,-(sp)
    b654:	|      jsr 10978 <trimStack>
    b65a:	|      addq.l #4,sp
	return BR_CONTINUE;
    b65c:	|      moveq #2,d0
}
    b65e:	\----> rts

0000b660 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    b660:	       movea.l 8(sp),a0
    b664:	       movea.l 24(a0),a0
    b668:	       move.l (a0),d0
    b66a:	       moveq #6,d1
    b66c:	       cmp.l d0,d1
    b66e:	   /-- beq.s b682 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    b670:	   |   pea 157c1 <zbuffer.c.4facf542+0x109>
    b676:	   |   jsr 12048 <KPrintF>
    b67c:	   |   addq.l #4,sp
		return BR_ERROR;
    b67e:	   |   moveq #1,d0
    b680:	/--|-- bra.s b6d8 <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    b682:	|  \-> movea.l 8(sp),a0
    b686:	|      movea.l 24(a0),a0
    b68a:	|      movea.l 4(a0),a0
    b68e:	|      move.l (a0),d0
    b690:	|  /-- bne.s b6a4 <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    b692:	|  |   pea 157f2 <zbuffer.c.4facf542+0x13a>
    b698:	|  |   jsr 12048 <KPrintF>
    b69e:	|  |   addq.l #4,sp
		return BR_ERROR;
    b6a0:	|  |   moveq #1,d0
    b6a2:	+--|-- bra.s b6d8 <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    b6a4:	|  \-> moveq #28,d0
    b6a6:	|      add.l 8(sp),d0
    b6aa:	|      movea.l 8(sp),a0
    b6ae:	|      movea.l 24(a0),a0
    b6b2:	|      movea.l 4(a0),a0
    b6b6:	|      move.l 4(a0),d1
    b6ba:	|      move.l d0,-(sp)
    b6bc:	|      move.l d1,-(sp)
    b6be:	|      jsr 104ae <copyVariable>
    b6c4:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    b6c6:	|      moveq #24,d0
    b6c8:	|      add.l 8(sp),d0
    b6cc:	|      move.l d0,-(sp)
    b6ce:	|      jsr 10978 <trimStack>
    b6d4:	|      addq.l #4,sp
	return BR_CONTINUE;
    b6d6:	|      moveq #2,d0
}
    b6d8:	\----> rts

0000b6da <builtIn_random>:

builtIn(random)
{
    b6da:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    b6dc:	       movea.l 12(sp),a0
    b6e0:	       move.l 24(a0),d0
    b6e4:	       move.l d0,-(sp)
    b6e6:	       pea 1 <_start+0x1>
    b6ea:	       move.l sp,d0
    b6ec:	       addq.l #8,d0
    b6ee:	       move.l d0,-(sp)
    b6f0:	       jsr fff4 <getValueType>
    b6f6:	       lea 12(sp),sp
    b6fa:	       tst.w d0
    b6fc:	   /-- bne.s b702 <builtIn_random+0x28>
		return BR_ERROR;
    b6fe:	   |   moveq #1,d0
    b700:	/--|-- bra.s b74c <builtIn_random+0x72>

	trimStack (&fun -> stack);
    b702:	|  \-> moveq #24,d0
    b704:	|      add.l 12(sp),d0
    b708:	|      move.l d0,-(sp)
    b70a:	|      jsr 10978 <trimStack>
    b710:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    b712:	|      move.l (sp),d0
    b714:	|  /-- bgt.s b71a <builtIn_random+0x40>
    b716:	|  |   moveq #1,d0
    b718:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    b71a:	|  \-> jsr c58 <rand>
    b720:	|      move.l d0,d1
    b722:	|      move.l (sp),d0
    b724:	|      move.l d0,-(sp)
    b726:	|      move.l d1,-(sp)
    b728:	|      jsr 12ad4 <__umodsi3>
    b72e:	|      addq.l #8,sp
    b730:	|      move.l d0,d1
    b732:	|      moveq #28,d0
    b734:	|      add.l 12(sp),d0
    b738:	|      move.l d1,-(sp)
    b73a:	|      pea 1 <_start+0x1>
    b73e:	|      move.l d0,-(sp)
    b740:	|      jsr 108e6 <setVariable>
    b746:	|      lea 12(sp),sp
	return BR_CONTINUE;
    b74a:	|      moveq #2,d0
}
    b74c:	\----> addq.l #4,sp
    b74e:	       rts

0000b750 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    b750:	nop
    b752:	rts

0000b754 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    b754:	moveq #2,d0
}
    b756:	rts

0000b758 <builtIn_setPasteColour>:

	/*if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);Todo Amigize This?*/
	return BR_CONTINUE;
    b758:	moveq #2,d0
}
    b75a:	rts

0000b75c <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    b75c:	moveq #2,d0
}
    b75e:	rts

0000b760 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    b760:	moveq #2,d0
}
    b762:	rts

0000b764 <builtIn_setFont>:


builtIn(setFont)
{
    b764:	       lea -16(sp),sp
    b768:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    b76a:	       movea.l 28(sp),a0
    b76e:	       move.l 24(a0),d0
    b772:	       move.l d0,-(sp)
    b774:	       pea 1 <_start+0x1>
    b778:	       lea 12(sp),a0
    b77c:	       move.l a0,-(sp)
    b77e:	       jsr fff4 <getValueType>
    b784:	       lea 12(sp),sp
    b788:	       tst.w d0
    b78a:	   /-- bne.s b792 <builtIn_setFont+0x2e>
    b78c:	   |   moveq #1,d0
    b78e:	/--|-- bra.w b840 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    b792:	|  \-> moveq #24,d0
    b794:	|      add.l 28(sp),d0
    b798:	|      move.l d0,-(sp)
    b79a:	|      jsr 10978 <trimStack>
    b7a0:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    b7a2:	|      movea.l 28(sp),a0
    b7a6:	|      move.l 24(a0),d0
    b7aa:	|      move.l d0,-(sp)
    b7ac:	|      jsr 105ca <getTextFromAnyVar>
    b7b2:	|      addq.l #4,sp
    b7b4:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    b7b8:	|  /-- bne.s b7c0 <builtIn_setFont+0x5c>
    b7ba:	|  |   moveq #1,d0
    b7bc:	+--|-- bra.w b840 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    b7c0:	|  \-> moveq #24,d0
    b7c2:	|      add.l 28(sp),d0
    b7c6:	|      move.l d0,-(sp)
    b7c8:	|      jsr 10978 <trimStack>
    b7ce:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    b7d0:	|      movea.l 28(sp),a0
    b7d4:	|      move.l 24(a0),d0
    b7d8:	|      move.l d0,-(sp)
    b7da:	|      pea 5 <_start+0x5>
    b7de:	|      lea 16(sp),a0
    b7e2:	|      move.l a0,-(sp)
    b7e4:	|      jsr fff4 <getValueType>
    b7ea:	|      lea 12(sp),sp
    b7ee:	|      tst.w d0
    b7f0:	|  /-- bne.s b7f6 <builtIn_setFont+0x92>
    b7f2:	|  |   moveq #1,d0
    b7f4:	+--|-- bra.s b840 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    b7f6:	|  \-> moveq #24,d0
    b7f8:	|      add.l 28(sp),d0
    b7fc:	|      move.l d0,-(sp)
    b7fe:	|      jsr 10978 <trimStack>
    b804:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    b806:	|      move.l 4(sp),d1
    b80a:	|      move.l 8(sp),d0
    b80e:	|      move.l d1,-(sp)
    b810:	|      move.l 20(sp),-(sp)
    b814:	|      move.l d0,-(sp)
    b816:	|      jsr 109ec <loadFont>
    b81c:	|      lea 12(sp),sp
    b820:	|      tst.w d0
    b822:	|  /-- bne.s b828 <builtIn_setFont+0xc4>
    b824:	|  |   moveq #1,d0
    b826:	+--|-- bra.s b840 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    b828:	|  \-> move.l 16(sp),12(sp)
    b82e:	|      move.l 17b28 <SysBase>,d0
    b834:	|      movea.l d0,a6
    b836:	|      movea.l 12(sp),a1
    b83a:	|      jsr -690(a6)

    return BR_CONTINUE;
    b83e:	|      moveq #2,d0
}
    b840:	\----> movea.l (sp)+,a6
    b842:	       lea 16(sp),sp
    b846:	       rts

0000b848 <builtIn_inFont>:

builtIn(inFont)
{
    b848:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    b84a:	       movea.l 12(sp),a0
    b84e:	       move.l 24(a0),d0
    b852:	       move.l d0,-(sp)
    b854:	       jsr 105ca <getTextFromAnyVar>
    b85a:	       addq.l #4,sp
    b85c:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    b85e:	   /-- bne.s b864 <builtIn_inFont+0x1c>
    b860:	   |   moveq #1,d0
    b862:	/--|-- bra.s b89a <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    b864:	|  \-> moveq #24,d0
    b866:	|      add.l 12(sp),d0
    b86a:	|      move.l d0,-(sp)
    b86c:	|      jsr 10978 <trimStack>
    b872:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    b874:	|      move.l (sp),-(sp)
    b876:	|      jsr 109c0 <isInFont>
    b87c:	|      addq.l #4,sp
    b87e:	|      movea.w d0,a0
    b880:	|      moveq #28,d0
    b882:	|      add.l 12(sp),d0
    b886:	|      move.l a0,-(sp)
    b888:	|      pea 1 <_start+0x1>
    b88c:	|      move.l d0,-(sp)
    b88e:	|      jsr 108e6 <setVariable>
    b894:	|      lea 12(sp),sp
	return BR_CONTINUE;
    b898:	|      moveq #2,d0
}
    b89a:	\----> addq.l #4,sp
    b89c:	       rts

0000b89e <builtIn_pasteString>:
    trimStack(&fun->stack);
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    fixFont(pastePalette);
    pasteStringToBackdrop(newText, x, y, pastePalette);
    FreeVec(newText); Todo Amigize this*/
    return BR_CONTINUE;
    b89e:	moveq #2,d0
}
    b8a0:	rts

0000b8a2 <builtIn_anim>:

builtIn(anim)
{
    b8a2:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    b8a6:	       moveq #1,d0
    b8a8:	       cmp.l 16(sp),d0
    b8ac:	   /-- blt.s b8c2 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    b8ae:	   |   pea 15805 <zbuffer.c.4facf542+0x14d>
    b8b4:	   |   jsr 12048 <KPrintF>
    b8ba:	   |   addq.l #4,sp
		return BR_ERROR;
    b8bc:	   |   moveq #1,d0
    b8be:	/--|-- bra.w b950 <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    b8c2:	|  \-> moveq #24,d1
    b8c4:	|      add.l 20(sp),d1
    b8c8:	|      move.l 16(sp),d0
    b8cc:	|      subq.l #1,d0
    b8ce:	|      move.l d1,-(sp)
    b8d0:	|      move.l d0,-(sp)
    b8d2:	|      jsr 5a18 <createPersonaAnim>
    b8d8:	|      addq.l #8,sp
    b8da:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    b8de:	|      movea.l 20(sp),a0
    b8e2:	|      move.l 24(a0),d0
    b8e6:	|      move.l d0,-(sp)
    b8e8:	|      pea 5 <_start+0x5>
    b8ec:	|      lea 8(sp),a0
    b8f0:	|      move.l a0,-(sp)
    b8f2:	|      jsr fff4 <getValueType>
    b8f8:	|      lea 12(sp),sp
    b8fc:	|      tst.w d0
    b8fe:	|  /-- bne.s b904 <builtIn_anim+0x62>
    b900:	|  |   moveq #1,d0
    b902:	+--|-- bra.s b950 <builtIn_anim+0xae>
	trimStack (&fun -> stack);
    b904:	|  \-> moveq #24,d0
    b906:	|      add.l 20(sp),d0
    b90a:	|      move.l d0,-(sp)
    b90c:	|      jsr 10978 <trimStack>
    b912:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
    b914:	|      move.l (sp),d0
    b916:	|      move.l d0,-(sp)
    b918:	|      jsr 7dc2 <loadBankForAnim>
    b91e:	|      addq.l #4,sp
    b920:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
    b924:	|  /-- bne.s b92a <builtIn_anim+0x88>
    b926:	|  |   moveq #1,d0
    b928:	+--|-- bra.s b950 <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
    b92a:	|  \-> move.l 4(sp),-(sp)
    b92e:	|      move.l 12(sp),-(sp)
    b932:	|      jsr 7266 <setBankFile>
    b938:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
    b93a:	|      moveq #28,d0
    b93c:	|      add.l 20(sp),d0
    b940:	|      move.l 8(sp),-(sp)
    b944:	|      move.l d0,-(sp)
    b946:	|      jsr 108a2 <newAnimationVariable>
    b94c:	|      addq.l #8,sp
	return BR_CONTINUE;
    b94e:	|      moveq #2,d0
}
    b950:	\----> lea 12(sp),sp
    b954:	       rts

0000b956 <builtIn_costume>:

builtIn(costume)
{
    b956:	          lea -32(sp),sp
    b95a:	          move.l a6,-(sp)
    b95c:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    b95e:	          moveq #8,d0
    b960:	          move.l d0,32(sp)
    b964:	          clr.l 28(sp)
    b968:	          move.l 17b28 <SysBase>,d0
    b96e:	          movea.l d0,a6
    b970:	          move.l 32(sp),d0
    b974:	          move.l 28(sp),d1
    b978:	          jsr -684(a6)
    b97c:	          move.l d0,24(sp)
    b980:	          move.l 24(sp),d0
    b984:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    b988:	      /-- bne.s b990 <builtIn_costume+0x3a>
    b98a:	      |   moveq #1,d0
    b98c:	/-----|-- bra.w ba78 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    b990:	|     \-> move.l 44(sp),d0
    b994:	|         pea 3 <_start+0x3>
    b998:	|         move.l d0,-(sp)
    b99a:	|         jsr 12a78 <__divsi3>
    b9a0:	|         addq.l #8,sp
    b9a2:	|         movea.l 20(sp),a0
    b9a6:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    b9aa:	|         tst.l 44(sp)
    b9ae:	|     /-- beq.s b9c4 <builtIn_costume+0x6e>
    b9b0:	|     |   movea.l 20(sp),a0
    b9b4:	|     |   move.l 4(a0),d1
    b9b8:	|     |   move.l d1,d0
    b9ba:	|     |   add.l d0,d0
    b9bc:	|     |   add.l d1,d0
    b9be:	|     |   cmp.l 44(sp),d0
    b9c2:	|  /--|-- beq.s b9d8 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    b9c4:	|  |  \-> pea 1583f <zbuffer.c.4facf542+0x187>
    b9ca:	|  |      jsr 12048 <KPrintF>
    b9d0:	|  |      addq.l #4,sp
        return BR_ERROR;
    b9d2:	|  |      moveq #1,d0
    b9d4:	+--|----- bra.w ba78 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    b9d8:	|  \----> move.l 44(sp),d0
    b9dc:	|         add.l d0,d0
    b9de:	|         add.l d0,d0
    b9e0:	|         move.l d0,16(sp)
    b9e4:	|         clr.l 12(sp)
    b9e8:	|         move.l 17b28 <SysBase>,d0
    b9ee:	|         movea.l d0,a6
    b9f0:	|         move.l 16(sp),d0
    b9f4:	|         move.l 12(sp),d1
    b9f8:	|         jsr -684(a6)
    b9fc:	|         move.l d0,8(sp)
    ba00:	|         move.l 8(sp),d0
    ba04:	|         movea.l 20(sp),a0
    ba08:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    ba0a:	|         movea.l 20(sp),a0
    ba0e:	|         move.l (a0),d0
    ba10:	|     /-- bne.s ba16 <builtIn_costume+0xc0>
    ba12:	|     |   moveq #1,d0
    ba14:	+-----|-- bra.s ba78 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
    ba16:	|     \-> move.l 44(sp),d0
    ba1a:	|         subq.l #1,d0
    ba1c:	|         move.l d0,36(sp)
    ba20:	|     /-- bra.s ba5c <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
    ba22:	|  /--|-> movea.l 48(sp),a0
    ba26:	|  |  |   move.l 24(a0),d0
    ba2a:	|  |  |   movea.l 20(sp),a0
    ba2e:	|  |  |   movea.l (a0),a0
    ba30:	|  |  |   move.l 36(sp),d1
    ba34:	|  |  |   add.l d1,d1
    ba36:	|  |  |   add.l d1,d1
    ba38:	|  |  |   lea (0,a0,d1.l),a2
    ba3c:	|  |  |   move.l d0,-(sp)
    ba3e:	|  |  |   jsr 104cc <getAnimationFromVar>
    ba44:	|  |  |   addq.l #4,sp
    ba46:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
    ba48:	|  |  |   moveq #24,d0
    ba4a:	|  |  |   add.l 48(sp),d0
    ba4e:	|  |  |   move.l d0,-(sp)
    ba50:	|  |  |   jsr 10978 <trimStack>
    ba56:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
    ba58:	|  |  |   subq.l #1,36(sp)
    ba5c:	|  |  \-> tst.l 36(sp)
    ba60:	|  \----- bge.s ba22 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
    ba62:	|         moveq #28,d0
    ba64:	|         add.l 48(sp),d0
    ba68:	|         move.l 20(sp),-(sp)
    ba6c:	|         move.l d0,-(sp)
    ba6e:	|         jsr 108c4 <newCostumeVariable>
    ba74:	|         addq.l #8,sp
    return BR_CONTINUE;
    ba76:	|         moveq #2,d0
}
    ba78:	\-------> movea.l (sp)+,a2
    ba7a:	          movea.l (sp)+,a6
    ba7c:	          lea 32(sp),sp
    ba80:	          rts

0000ba82 <builtIn_launch>:

builtIn(launch)
{
    ba82:	          lea -20(sp),sp
    ba86:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    ba88:	          movea.l 32(sp),a0
    ba8c:	          move.l 24(a0),d0
    ba90:	          move.l d0,-(sp)
    ba92:	          jsr 105ca <getTextFromAnyVar>
    ba98:	          addq.l #4,sp
    ba9a:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
    ba9e:	      /-- bne.s baa6 <builtIn_launch+0x24>
    baa0:	      |   moveq #1,d0
    baa2:	/-----|-- bra.w bbd4 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
    baa6:	|     \-> move.l 20(sp),-(sp)
    baaa:	|         jsr 2fe <encodeFilename>
    bab0:	|         addq.l #4,sp
    bab2:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
    bab6:	|         moveq #24,d0
    bab8:	|         add.l 32(sp),d0
    babc:	|         move.l d0,-(sp)
    babe:	|         jsr 10978 <trimStack>
    bac4:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
    bac6:	|         movea.l 20(sp),a0
    baca:	|         move.b (a0),d0
    bacc:	|         cmpi.b #104,d0
    bad0:	|  /----- bne.s bb3a <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
    bad2:	|  |      movea.l 20(sp),a0
    bad6:	|  |      addq.l #1,a0
    bad8:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
    bada:	|  |      cmpi.b #116,d0
    bade:	|  +----- bne.s bb3a <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
    bae0:	|  |      movea.l 20(sp),a0
    bae4:	|  |      addq.l #2,a0
    bae6:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
    bae8:	|  |      cmpi.b #116,d0
    baec:	|  +----- bne.s bb3a <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
    baee:	|  |      movea.l 20(sp),a0
    baf2:	|  |      addq.l #3,a0
    baf4:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
    baf6:	|  |      cmpi.b #112,d0
    bafa:	|  +----- bne.s bb3a <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    bafc:	|  |      movea.l 20(sp),a0
    bb00:	|  |      addq.l #4,a0
    bb02:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
    bb04:	|  |      cmpi.b #58,d0
    bb08:	|  |  /-- beq.s bb26 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    bb0a:	|  |  |   movea.l 20(sp),a0
    bb0e:	|  |  |   addq.l #4,a0
    bb10:	|  |  |   move.b (a0),d0
    bb12:	|  |  |   cmpi.b #115,d0
    bb16:	|  +--|-- bne.s bb3a <builtIn_launch+0xb8>
    bb18:	|  |  |   movea.l 20(sp),a0
    bb1c:	|  |  |   addq.l #5,a0
    bb1e:	|  |  |   move.b (a0),d0
    bb20:	|  |  |   cmpi.b #58,d0
    bb24:	|  +--|-- bne.s bb3a <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
    bb26:	|  |  \-> move.l 20(sp),-(sp)
    bb2a:	|  |      jsr b8 <copyString>
    bb30:	|  |      addq.l #4,sp
    bb32:	|  |      move.l d0,17bd4 <launchMe>
    bb38:	|  |  /-- bra.s bb8c <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
    bb3a:	|  \--|-> move.l 17a3c <gamePath>,d0
    bb40:	|     |   pea 1588a <zbuffer.c.4facf542+0x1d2>
    bb46:	|     |   move.l d0,-(sp)
    bb48:	|     |   jsr f520 <joinStrings>
    bb4e:	|     |   addq.l #8,sp
    bb50:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
    bb54:	|     |   move.l 16(sp),-(sp)
    bb58:	|     |   move.l 16(sp),-(sp)
    bb5c:	|     |   jsr f520 <joinStrings>
    bb62:	|     |   addq.l #8,sp
    bb64:	|     |   move.l d0,17bd4 <launchMe>
        FreeVec(newText);
    bb6a:	|     |   move.l 16(sp),8(sp)
    bb70:	|     |   move.l 17b28 <SysBase>,d0
    bb76:	|     |   movea.l d0,a6
    bb78:	|     |   movea.l 8(sp),a1
    bb7c:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
    bb80:	|     |   move.l 17bd4 <launchMe>,d0
    bb86:	|     +-- bne.s bb8c <builtIn_launch+0x10a>
    bb88:	|     |   moveq #1,d0
    bb8a:	+-----|-- bra.s bbd4 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
    bb8c:	|     \-> move.l 20(sp),4(sp)
    bb92:	|         move.l 17b28 <SysBase>,d0
    bb98:	|         movea.l d0,a6
    bb9a:	|         movea.l 4(sp),a1
    bb9e:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
    bba2:	|         clr.l -(sp)
    bba4:	|         jsr 106a <setGraphicsWindow>
    bbaa:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
    bbac:	|         moveq #28,d0
    bbae:	|         add.l 32(sp),d0
    bbb2:	|         pea 1 <_start+0x1>
    bbb6:	|         pea 1 <_start+0x1>
    bbba:	|         move.l d0,-(sp)
    bbbc:	|         jsr 108e6 <setVariable>
    bbc2:	|         lea 12(sp),sp
    launchResult = &fun->reg;
    bbc6:	|         moveq #28,d0
    bbc8:	|         add.l 32(sp),d0
    bbcc:	|         move.l d0,17bd8 <launchResult>

    return BR_KEEP_AND_PAUSE;
    bbd2:	|         moveq #0,d0
}
    bbd4:	\-------> movea.l (sp)+,a6
    bbd6:	          lea 20(sp),sp
    bbda:	          rts

0000bbdc <builtIn_pause>:

builtIn(pause)
{
    bbdc:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    bbde:	       movea.l 12(sp),a0
    bbe2:	       move.l 24(a0),d0
    bbe6:	       move.l d0,-(sp)
    bbe8:	       pea 1 <_start+0x1>
    bbec:	       move.l sp,d0
    bbee:	       addq.l #8,d0
    bbf0:	       move.l d0,-(sp)
    bbf2:	       jsr fff4 <getValueType>
    bbf8:	       lea 12(sp),sp
    bbfc:	       tst.w d0
    bbfe:	   /-- bne.s bc04 <builtIn_pause+0x28>
    bc00:	   |   moveq #1,d0
    bc02:	/--|-- bra.s bc32 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
    bc04:	|  \-> moveq #24,d0
    bc06:	|      add.l 12(sp),d0
    bc0a:	|      move.l d0,-(sp)
    bc0c:	|      jsr 10978 <trimStack>
    bc12:	|      addq.l #4,sp
	if (theTime > 0) {
    bc14:	|      move.l (sp),d0
    bc16:	|  /-- ble.s bc30 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
    bc18:	|  |   move.l (sp),d0
    bc1a:	|  |   subq.l #1,d0
    bc1c:	|  |   movea.l 12(sp),a0
    bc20:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
    bc24:	|  |   movea.l 12(sp),a0
    bc28:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
    bc2c:	|  |   moveq #0,d0
    bc2e:	+--|-- bra.s bc32 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
    bc30:	|  \-> moveq #2,d0
}
    bc32:	\----> addq.l #4,sp
    bc34:	       rts

0000bc36 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
    bc36:	jsr 1c34 <completeTimers>
	return BR_CONTINUE;
    bc3c:	moveq #2,d0
}
    bc3e:	rts

0000bc40 <builtIn_callEvent>:

builtIn(callEvent)
{
    bc40:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    bc44:	       movea.l 20(sp),a0
    bc48:	       move.l 24(a0),d0
    bc4c:	       move.l d0,-(sp)
    bc4e:	       pea 7 <_start+0x7>
    bc52:	       lea 8(sp),a0
    bc56:	       move.l a0,-(sp)
    bc58:	       jsr fff4 <getValueType>
    bc5e:	       lea 12(sp),sp
    bc62:	       tst.w d0
    bc64:	   /-- bne.s bc6c <builtIn_callEvent+0x2c>
    bc66:	   |   moveq #1,d0
    bc68:	/--|-- bra.w bd02 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    bc6c:	|  \-> moveq #24,d0
    bc6e:	|      add.l 20(sp),d0
    bc72:	|      move.l d0,-(sp)
    bc74:	|      jsr 10978 <trimStack>
    bc7a:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    bc7c:	|      movea.l 20(sp),a0
    bc80:	|      move.l 24(a0),d0
    bc84:	|      move.l d0,-(sp)
    bc86:	|      pea 7 <_start+0x7>
    bc8a:	|      moveq #12,d0
    bc8c:	|      add.l sp,d0
    bc8e:	|      move.l d0,-(sp)
    bc90:	|      jsr fff4 <getValueType>
    bc96:	|      lea 12(sp),sp
    bc9a:	|      tst.w d0
    bc9c:	|  /-- bne.s bca2 <builtIn_callEvent+0x62>
    bc9e:	|  |   moveq #1,d0
    bca0:	+--|-- bra.s bd02 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    bca2:	|  \-> moveq #24,d0
    bca4:	|      add.l 20(sp),d0
    bca8:	|      move.l d0,-(sp)
    bcaa:	|      jsr 10978 <trimStack>
    bcb0:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    bcb2:	|      move.l (sp),d1
    bcb4:	|      move.l 4(sp),d0
    bcb8:	|      move.l d1,-(sp)
    bcba:	|      move.l d0,-(sp)
    bcbc:	|      jsr 8f6e <getCombinationFunction>
    bcc2:	|      addq.l #8,sp
    bcc4:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
    bcc8:	|  /-- beq.s bce8 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    bcca:	|  |   moveq #28,d0
    bccc:	|  |   add.l 20(sp),d0
    bcd0:	|  |   move.l 8(sp),-(sp)
    bcd4:	|  |   pea 2 <_start+0x2>
    bcd8:	|  |   move.l d0,-(sp)
    bcda:	|  |   jsr 108e6 <setVariable>
    bce0:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
    bce4:	|  |   moveq #4,d0
    bce6:	+--|-- bra.s bd02 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
    bce8:	|  \-> moveq #28,d0
    bcea:	|      add.l 20(sp),d0
    bcee:	|      clr.l -(sp)
    bcf0:	|      pea 1 <_start+0x1>
    bcf4:	|      move.l d0,-(sp)
    bcf6:	|      jsr 108e6 <setVariable>
    bcfc:	|      lea 12(sp),sp
	return BR_CONTINUE;
    bd00:	|      moveq #2,d0
}
    bd02:	\----> lea 12(sp),sp
    bd06:	       rts

0000bd08 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
    bd08:	move.w #1,17be4 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
    bd10:	moveq #2,d0
}
    bd12:	rts

0000bd14 <builtIn__rem_movieStart>:
// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	/*trimStack (&fun -> stack);*/
	KPrintF("Movie Stuff not supported on Amiga");
    bd14:	pea 1588c <zbuffer.c.4facf542+0x1d4>
    bd1a:	jsr 12048 <KPrintF>
    bd20:	addq.l #4,sp
	return BR_CONTINUE;
    bd22:	moveq #2,d0
}
    bd24:	rts

0000bd26 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
    bd26:	pea 1588c <zbuffer.c.4facf542+0x1d4>
    bd2c:	jsr 12048 <KPrintF>
    bd32:	addq.l #4,sp
	return BR_CONTINUE;
    bd34:	moveq #2,d0
}
    bd36:	rts

0000bd38 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
    bd38:	pea 1588c <zbuffer.c.4facf542+0x1d4>
    bd3e:	jsr 12048 <KPrintF>
    bd44:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
    bd46:	moveq #2,d0
}
    bd48:	rts

0000bd4a <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
    bd4a:	pea 1588c <zbuffer.c.4facf542+0x1d4>
    bd50:	jsr 12048 <KPrintF>
    bd56:	addq.l #4,sp
	return BR_CONTINUE;
    bd58:	moveq #2,d0
}
    bd5a:	rts

0000bd5c <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    bd5c:	pea 1588c <zbuffer.c.4facf542+0x1d4>
    bd62:	jsr 12048 <KPrintF>
    bd68:	addq.l #4,sp
	return BR_CONTINUE;
    bd6a:	moveq #2,d0
}
    bd6c:	rts

0000bd6e <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    bd6e:	pea 1588c <zbuffer.c.4facf542+0x1d4>
    bd74:	jsr 12048 <KPrintF>
    bd7a:	addq.l #4,sp
	return BR_CONTINUE;
    bd7c:	moveq #2,d0
}
    bd7e:	rts

0000bd80 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
    bd80:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    bd84:	       movea.l 20(sp),a0
    bd88:	       move.l 24(a0),d0
    bd8c:	       move.l d0,-(sp)
    bd8e:	       pea 1 <_start+0x1>
    bd92:	       moveq #16,d0
    bd94:	       add.l sp,d0
    bd96:	       move.l d0,-(sp)
    bd98:	       jsr fff4 <getValueType>
    bd9e:	       lea 12(sp),sp
    bda2:	       tst.w d0
    bda4:	   /-- bne.s bdac <builtIn_startMusic+0x2c>
    bda6:	   |   moveq #1,d0
    bda8:	/--|-- bra.w be4c <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    bdac:	|  \-> moveq #24,d0
    bdae:	|      add.l 20(sp),d0
    bdb2:	|      move.l d0,-(sp)
    bdb4:	|      jsr 10978 <trimStack>
    bdba:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    bdbc:	|      movea.l 20(sp),a0
    bdc0:	|      move.l 24(a0),d0
    bdc4:	|      move.l d0,-(sp)
    bdc6:	|      pea 1 <_start+0x1>
    bdca:	|      moveq #12,d0
    bdcc:	|      add.l sp,d0
    bdce:	|      move.l d0,-(sp)
    bdd0:	|      jsr fff4 <getValueType>
    bdd6:	|      lea 12(sp),sp
    bdda:	|      tst.w d0
    bddc:	|  /-- bne.s bde2 <builtIn_startMusic+0x62>
    bdde:	|  |   moveq #1,d0
    bde0:	+--|-- bra.s be4c <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    bde2:	|  \-> moveq #24,d0
    bde4:	|      add.l 20(sp),d0
    bde8:	|      move.l d0,-(sp)
    bdea:	|      jsr 10978 <trimStack>
    bdf0:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    bdf2:	|      movea.l 20(sp),a0
    bdf6:	|      move.l 24(a0),d0
    bdfa:	|      move.l d0,-(sp)
    bdfc:	|      pea 5 <_start+0x5>
    be00:	|      lea 8(sp),a0
    be04:	|      move.l a0,-(sp)
    be06:	|      jsr fff4 <getValueType>
    be0c:	|      lea 12(sp),sp
    be10:	|      tst.w d0
    be12:	|  /-- bne.s be18 <builtIn_startMusic+0x98>
    be14:	|  |   moveq #1,d0
    be16:	+--|-- bra.s be4c <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    be18:	|  \-> moveq #24,d0
    be1a:	|      add.l 20(sp),d0
    be1e:	|      move.l d0,-(sp)
    be20:	|      jsr 10978 <trimStack>
    be26:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
    be28:	|      movea.l 8(sp),a0
    be2c:	|      move.l 4(sp),d1
    be30:	|      move.l (sp),d0
    be32:	|      move.l a0,-(sp)
    be34:	|      move.l d1,-(sp)
    be36:	|      move.l d0,-(sp)
    be38:	|      jsr 8bec <playMOD>
    be3e:	|      lea 12(sp),sp
    be42:	|      tst.w d0
    be44:	|  /-- bne.s be4a <builtIn_startMusic+0xca>
    be46:	|  |   moveq #2,d0
    be48:	+--|-- bra.s be4c <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
    be4a:	|  \-> moveq #2,d0
}
    be4c:	\----> lea 12(sp),sp
    be50:	       rts

0000be52 <builtIn_stopMusic>:

builtIn(stopMusic)
{
    be52:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    be54:	       movea.l 12(sp),a0
    be58:	       move.l 24(a0),d0
    be5c:	       move.l d0,-(sp)
    be5e:	       pea 1 <_start+0x1>
    be62:	       move.l sp,d0
    be64:	       addq.l #8,d0
    be66:	       move.l d0,-(sp)
    be68:	       jsr fff4 <getValueType>
    be6e:	       lea 12(sp),sp
    be72:	       tst.w d0
    be74:	   /-- bne.s be7a <builtIn_stopMusic+0x28>
    be76:	   |   moveq #1,d0
    be78:	/--|-- bra.s be98 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
    be7a:	|  \-> moveq #24,d0
    be7c:	|      add.l 12(sp),d0
    be80:	|      move.l d0,-(sp)
    be82:	|      jsr 10978 <trimStack>
    be88:	|      addq.l #4,sp
	stopMOD (v);
    be8a:	|      move.l (sp),d0
    be8c:	|      move.l d0,-(sp)
    be8e:	|      jsr 8c88 <stopMOD>
    be94:	|      addq.l #4,sp
	return BR_CONTINUE;
    be96:	|      moveq #2,d0
}
    be98:	\----> addq.l #4,sp
    be9a:	       rts

0000be9c <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
    be9c:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    be9e:	       movea.l 16(sp),a0
    bea2:	       move.l 24(a0),d0
    bea6:	       move.l d0,-(sp)
    bea8:	       pea 1 <_start+0x1>
    beac:	       move.l sp,d0
    beae:	       addq.l #8,d0
    beb0:	       move.l d0,-(sp)
    beb2:	       jsr fff4 <getValueType>
    beb8:	       lea 12(sp),sp
    bebc:	       tst.w d0
    bebe:	   /-- bne.s bec4 <builtIn_setMusicVolume+0x28>
    bec0:	   |   moveq #1,d0
    bec2:	/--|-- bra.s bf1e <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    bec4:	|  \-> moveq #24,d0
    bec6:	|      add.l 16(sp),d0
    beca:	|      move.l d0,-(sp)
    becc:	|      jsr 10978 <trimStack>
    bed2:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    bed4:	|      movea.l 16(sp),a0
    bed8:	|      move.l 24(a0),d0
    bedc:	|      move.l d0,-(sp)
    bede:	|      pea 1 <_start+0x1>
    bee2:	|      moveq #12,d0
    bee4:	|      add.l sp,d0
    bee6:	|      move.l d0,-(sp)
    bee8:	|      jsr fff4 <getValueType>
    beee:	|      lea 12(sp),sp
    bef2:	|      tst.w d0
    bef4:	|  /-- bne.s befa <builtIn_setMusicVolume+0x5e>
    bef6:	|  |   moveq #1,d0
    bef8:	+--|-- bra.s bf1e <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    befa:	|  \-> moveq #24,d0
    befc:	|      add.l 16(sp),d0
    bf00:	|      move.l d0,-(sp)
    bf02:	|      jsr 10978 <trimStack>
    bf08:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
    bf0a:	|      move.l (sp),d1
    bf0c:	|      move.l 4(sp),d0
    bf10:	|      move.l d1,-(sp)
    bf12:	|      move.l d0,-(sp)
    bf14:	|      jsr 8c6e <setMusicVolume>
    bf1a:	|      addq.l #8,sp
	return BR_CONTINUE;
    bf1c:	|      moveq #2,d0
}
    bf1e:	\----> addq.l #8,sp
    bf20:	       rts

0000bf22 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
    bf22:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    bf24:	       movea.l 12(sp),a0
    bf28:	       move.l 24(a0),d0
    bf2c:	       move.l d0,-(sp)
    bf2e:	       pea 1 <_start+0x1>
    bf32:	       move.l sp,d0
    bf34:	       addq.l #8,d0
    bf36:	       move.l d0,-(sp)
    bf38:	       jsr fff4 <getValueType>
    bf3e:	       lea 12(sp),sp
    bf42:	       tst.w d0
    bf44:	   /-- bne.s bf4a <builtIn_setDefaultMusicVolume+0x28>
    bf46:	   |   moveq #1,d0
    bf48:	/--|-- bra.s bf68 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
    bf4a:	|  \-> moveq #24,d0
    bf4c:	|      add.l 12(sp),d0
    bf50:	|      move.l d0,-(sp)
    bf52:	|      jsr 10978 <trimStack>
    bf58:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
    bf5a:	|      move.l (sp),d0
    bf5c:	|      move.l d0,-(sp)
    bf5e:	|      jsr 8c52 <setDefaultMusicVolume>
    bf64:	|      addq.l #4,sp
	return BR_CONTINUE;
    bf66:	|      moveq #2,d0
}
    bf68:	\----> addq.l #4,sp
    bf6a:	       rts

0000bf6c <builtIn_playSound>:

builtIn(playSound)
{
    bf6c:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    bf6e:	       movea.l 12(sp),a0
    bf72:	       move.l 24(a0),d0
    bf76:	       move.l d0,-(sp)
    bf78:	       pea 5 <_start+0x5>
    bf7c:	       move.l sp,d0
    bf7e:	       addq.l #8,d0
    bf80:	       move.l d0,-(sp)
    bf82:	       jsr fff4 <getValueType>
    bf88:	       lea 12(sp),sp
    bf8c:	       tst.w d0
    bf8e:	   /-- bne.s bf94 <builtIn_playSound+0x28>
    bf90:	   |   moveq #1,d0
    bf92:	/--|-- bra.s bfbc <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
    bf94:	|  \-> moveq #24,d0
    bf96:	|      add.l 12(sp),d0
    bf9a:	|      move.l d0,-(sp)
    bf9c:	|      jsr 10978 <trimStack>
    bfa2:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
    bfa4:	|      move.l (sp),d0
    bfa6:	|      clr.l -(sp)
    bfa8:	|      move.l d0,-(sp)
    bfaa:	|      jsr 8c76 <startSound>
    bfb0:	|      addq.l #8,sp
    bfb2:	|      tst.w d0
    bfb4:	|  /-- bne.s bfba <builtIn_playSound+0x4e>
    bfb6:	|  |   moveq #2,d0
    bfb8:	+--|-- bra.s bfbc <builtIn_playSound+0x50>
	return BR_CONTINUE;
    bfba:	|  \-> moveq #2,d0
}
    bfbc:	\----> addq.l #4,sp
    bfbe:	       rts

0000bfc0 <builtIn_loopSound>:

builtIn(loopSound)
{
    bfc0:	             lea -28(sp),sp
    bfc4:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
    bfc6:	             tst.l 36(sp)
    bfca:	         /-- bgt.s bfe0 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
    bfcc:	         |   pea 158af <zbuffer.c.4facf542+0x1f7>
    bfd2:	         |   jsr 12048 <KPrintF>
    bfd8:	         |   addq.l #4,sp
		return BR_ERROR;
    bfda:	         |   moveq #1,d0
    bfdc:	/--------|-- bra.w c19c <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
    bfe0:	|        \-> moveq #1,d0
    bfe2:	|            cmp.l 36(sp),d0
    bfe6:	|     /----- blt.s c042 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    bfe8:	|     |      movea.l 40(sp),a0
    bfec:	|     |      move.l 24(a0),d0
    bff0:	|     |      move.l d0,-(sp)
    bff2:	|     |      pea 5 <_start+0x5>
    bff6:	|     |      lea 16(sp),a0
    bffa:	|     |      move.l a0,-(sp)
    bffc:	|     |      jsr fff4 <getValueType>
    c002:	|     |      lea 12(sp),sp
    c006:	|     |      tst.w d0
    c008:	|     |  /-- bne.s c010 <builtIn_loopSound+0x50>
    c00a:	|     |  |   moveq #1,d0
    c00c:	+-----|--|-- bra.w c19c <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
    c010:	|     |  \-> moveq #24,d0
    c012:	|     |      add.l 40(sp),d0
    c016:	|     |      move.l d0,-(sp)
    c018:	|     |      jsr 10978 <trimStack>
    c01e:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
    c020:	|     |      move.l 8(sp),d0
    c024:	|     |      pea 1 <_start+0x1>
    c028:	|     |      move.l d0,-(sp)
    c02a:	|     |      jsr 8c76 <startSound>
    c030:	|     |      addq.l #8,sp
    c032:	|     |      tst.w d0
    c034:	|     |  /-- bne.s c03c <builtIn_loopSound+0x7c>
    c036:	|     |  |   moveq #2,d0
    c038:	+-----|--|-- bra.w c19c <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
    c03c:	|     |  \-> moveq #2,d0
    c03e:	+-----|----- bra.w c19c <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
    c042:	|     \----> moveq #2,d1
    c044:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
    c048:	|            clr.l 28(sp)
		struct soundList *old = NULL;
    c04c:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
    c050:	|            movea.l 40(sp),a0
    c054:	|            movea.l 24(a0),a0
    c058:	|            move.l (a0),d0
    c05a:	|            moveq #5,d1
    c05c:	|            cmp.l d0,d1
    c05e:	|  /-------- beq.w c136 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
    c062:	|  |         movea.l 40(sp),a0
    c066:	|  |         move.l 24(a0),d0
    c06a:	|  |         move.l d0,-(sp)
    c06c:	|  |         pea 1 <_start+0x1>
    c070:	|  |         lea 12(sp),a0
    c074:	|  |         move.l a0,-(sp)
    c076:	|  |         jsr fff4 <getValueType>
    c07c:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
    c080:	|  |         moveq #24,d0
    c082:	|  |         add.l 40(sp),d0
    c086:	|  |         move.l d0,-(sp)
    c088:	|  |         jsr 10978 <trimStack>
    c08e:	|  |         addq.l #4,sp
			numParams--;
    c090:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
    c094:	|  +-------- bra.w c136 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
    c098:	|  |  /----> movea.l 40(sp),a0
    c09c:	|  |  |      move.l 24(a0),d0
    c0a0:	|  |  |      move.l d0,-(sp)
    c0a2:	|  |  |      pea 5 <_start+0x5>
    c0a6:	|  |  |      lea 16(sp),a0
    c0aa:	|  |  |      move.l a0,-(sp)
    c0ac:	|  |  |      jsr fff4 <getValueType>
    c0b2:	|  |  |      lea 12(sp),sp
    c0b6:	|  |  |      tst.w d0
    c0b8:	|  |  |  /-- bne.s c0ce <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
    c0ba:	|  |  |  |   pea 158ed <zbuffer.c.4facf542+0x235>
    c0c0:	|  |  |  |   jsr 12048 <KPrintF>
    c0c6:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
    c0c8:	|  |  |  |   moveq #1,d0
    c0ca:	+--|--|--|-- bra.w c19c <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
    c0ce:	|  |  |  \-> moveq #20,d0
    c0d0:	|  |  |      move.l d0,20(sp)
    c0d4:	|  |  |      clr.l 16(sp)
    c0d8:	|  |  |      move.l 17b28 <SysBase>,d0
    c0de:	|  |  |      movea.l d0,a6
    c0e0:	|  |  |      move.l 20(sp),d0
    c0e4:	|  |  |      move.l 16(sp),d1
    c0e8:	|  |  |      jsr -684(a6)
    c0ec:	|  |  |      move.l d0,12(sp)
    c0f0:	|  |  |      move.l 12(sp),d0
    c0f4:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
    c0f8:	|  |  |  /-- bne.s c100 <builtIn_loopSound+0x140>
    c0fa:	|  |  |  |   moveq #1,d0
    c0fc:	+--|--|--|-- bra.w c19c <builtIn_loopSound+0x1dc>

			s->next = old;
    c100:	|  |  |  \-> movea.l 28(sp),a0
    c104:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
    c10a:	|  |  |      movea.l 28(sp),a0
    c10e:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
    c112:	|  |  |      move.l 8(sp),d0
    c116:	|  |  |      movea.l 28(sp),a0
    c11a:	|  |  |      move.l d0,(a0)
			old = s;
    c11c:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
    c122:	|  |  |      moveq #24,d0
    c124:	|  |  |      add.l 40(sp),d0
    c128:	|  |  |      move.l d0,-(sp)
    c12a:	|  |  |      jsr 10978 <trimStack>
    c130:	|  |  |      addq.l #4,sp
			numParams--;
    c132:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
    c136:	|  \--|----> tst.l 36(sp)
    c13a:	|     \----- bne.w c098 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
    c13e:	|        /-- bra.s c14a <builtIn_loopSound+0x18a>
    c140:	|     /--|-> movea.l 28(sp),a0
    c144:	|     |  |   move.l 4(a0),28(sp)
    c14a:	|     |  \-> movea.l 28(sp),a0
    c14e:	|     |      move.l 4(a0),d0
    c152:	|     \----- bne.s c140 <builtIn_loopSound+0x180>
		if (doLoop > 1) {
    c154:	|            move.l 4(sp),d0
    c158:	|            moveq #1,d1
    c15a:	|            cmp.l d0,d1
    c15c:	|     /----- bge.s c174 <builtIn_loopSound+0x1b4>
			s->next = old;
    c15e:	|     |      movea.l 28(sp),a0
    c162:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
    c168:	|     |      movea.l 24(sp),a0
    c16c:	|     |      move.l 28(sp),8(a0)
    c172:	|     |  /-- bra.s c184 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
    c174:	|     \--|-> move.l 4(sp),d0
    c178:	|        +-- beq.s c184 <builtIn_loopSound+0x1c4>
			s->next = s;
    c17a:	|        |   movea.l 28(sp),a0
    c17e:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
    c184:	|        \-> movea.l 24(sp),a0
    c188:	|            moveq #-1,d0
    c18a:	|            move.l d0,16(a0)
		playSoundList(old);
    c18e:	|            move.l 24(sp),-(sp)
    c192:	|            jsr 8bf0 <playSoundList>
    c198:	|            addq.l #4,sp
		return BR_CONTINUE;
    c19a:	|            moveq #2,d0
	}
}
    c19c:	\----------> movea.l (sp)+,a6
    c19e:	             lea 28(sp),sp
    c1a2:	             rts

0000c1a4 <builtIn_stopSound>:

builtIn(stopSound)
{
    c1a4:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    c1a6:	       movea.l 12(sp),a0
    c1aa:	       move.l 24(a0),d0
    c1ae:	       move.l d0,-(sp)
    c1b0:	       pea 5 <_start+0x5>
    c1b4:	       move.l sp,d0
    c1b6:	       addq.l #8,d0
    c1b8:	       move.l d0,-(sp)
    c1ba:	       jsr fff4 <getValueType>
    c1c0:	       lea 12(sp),sp
    c1c4:	       tst.w d0
    c1c6:	   /-- bne.s c1cc <builtIn_stopSound+0x28>
    c1c8:	   |   moveq #1,d0
    c1ca:	/--|-- bra.s c1ea <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
    c1cc:	|  \-> moveq #24,d0
    c1ce:	|      add.l 12(sp),d0
    c1d2:	|      move.l d0,-(sp)
    c1d4:	|      jsr 10978 <trimStack>
    c1da:	|      addq.l #4,sp
	huntKillSound (v);
    c1dc:	|      move.l (sp),d0
    c1de:	|      move.l d0,-(sp)
    c1e0:	|      jsr 8be8 <huntKillSound>
    c1e6:	|      addq.l #4,sp
	return BR_CONTINUE;
    c1e8:	|      moveq #2,d0
}
    c1ea:	\----> addq.l #4,sp
    c1ec:	       rts

0000c1ee <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
    c1ee:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c1f0:	       movea.l 12(sp),a0
    c1f4:	       move.l 24(a0),d0
    c1f8:	       move.l d0,-(sp)
    c1fa:	       pea 1 <_start+0x1>
    c1fe:	       move.l sp,d0
    c200:	       addq.l #8,d0
    c202:	       move.l d0,-(sp)
    c204:	       jsr fff4 <getValueType>
    c20a:	       lea 12(sp),sp
    c20e:	       tst.w d0
    c210:	   /-- bne.s c216 <builtIn_setDefaultSoundVolume+0x28>
    c212:	   |   moveq #1,d0
    c214:	/--|-- bra.s c234 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
    c216:	|  \-> moveq #24,d0
    c218:	|      add.l 12(sp),d0
    c21c:	|      move.l d0,-(sp)
    c21e:	|      jsr 10978 <trimStack>
    c224:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
    c226:	|      move.l (sp),d0
    c228:	|      move.l d0,-(sp)
    c22a:	|      jsr 8c5e <setDefaultSoundVolume>
    c230:	|      addq.l #4,sp
	return BR_CONTINUE;
    c232:	|      moveq #2,d0
}
    c234:	\----> addq.l #4,sp
    c236:	       rts

0000c238 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
    c238:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c23a:	       movea.l 16(sp),a0
    c23e:	       move.l 24(a0),d0
    c242:	       move.l d0,-(sp)
    c244:	       pea 1 <_start+0x1>
    c248:	       move.l sp,d0
    c24a:	       addq.l #8,d0
    c24c:	       move.l d0,-(sp)
    c24e:	       jsr fff4 <getValueType>
    c254:	       lea 12(sp),sp
    c258:	       tst.w d0
    c25a:	   /-- bne.s c260 <builtIn_setSoundVolume+0x28>
    c25c:	   |   moveq #1,d0
    c25e:	/--|-- bra.s c2ba <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    c260:	|  \-> moveq #24,d0
    c262:	|      add.l 16(sp),d0
    c266:	|      move.l d0,-(sp)
    c268:	|      jsr 10978 <trimStack>
    c26e:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    c270:	|      movea.l 16(sp),a0
    c274:	|      move.l 24(a0),d0
    c278:	|      move.l d0,-(sp)
    c27a:	|      pea 5 <_start+0x5>
    c27e:	|      moveq #12,d0
    c280:	|      add.l sp,d0
    c282:	|      move.l d0,-(sp)
    c284:	|      jsr fff4 <getValueType>
    c28a:	|      lea 12(sp),sp
    c28e:	|      tst.w d0
    c290:	|  /-- bne.s c296 <builtIn_setSoundVolume+0x5e>
    c292:	|  |   moveq #1,d0
    c294:	+--|-- bra.s c2ba <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    c296:	|  \-> moveq #24,d0
    c298:	|      add.l 16(sp),d0
    c29c:	|      move.l d0,-(sp)
    c29e:	|      jsr 10978 <trimStack>
    c2a4:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
    c2a6:	|      move.l (sp),d1
    c2a8:	|      move.l 4(sp),d0
    c2ac:	|      move.l d1,-(sp)
    c2ae:	|      move.l d0,-(sp)
    c2b0:	|      jsr 8c72 <setSoundVolume>
    c2b6:	|      addq.l #8,sp
	return BR_CONTINUE;
    c2b8:	|      moveq #2,d0
}
    c2ba:	\----> addq.l #8,sp
    c2bc:	       rts

0000c2be <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
    c2be:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c2c2:	       movea.l 20(sp),a0
    c2c6:	       move.l 24(a0),d0
    c2ca:	       move.l d0,-(sp)
    c2cc:	       pea 1 <_start+0x1>
    c2d0:	       moveq #12,d0
    c2d2:	       add.l sp,d0
    c2d4:	       move.l d0,-(sp)
    c2d6:	       jsr fff4 <getValueType>
    c2dc:	       lea 12(sp),sp
    c2e0:	       tst.w d0
    c2e2:	   /-- bne.s c2ea <builtIn_setSoundLoopPoints+0x2c>
    c2e4:	   |   moveq #1,d0
    c2e6:	/--|-- bra.w c382 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    c2ea:	|  \-> moveq #24,d0
    c2ec:	|      add.l 20(sp),d0
    c2f0:	|      move.l d0,-(sp)
    c2f2:	|      jsr 10978 <trimStack>
    c2f8:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c2fa:	|      movea.l 20(sp),a0
    c2fe:	|      move.l 24(a0),d0
    c302:	|      move.l d0,-(sp)
    c304:	|      pea 1 <_start+0x1>
    c308:	|      lea 8(sp),a0
    c30c:	|      move.l a0,-(sp)
    c30e:	|      jsr fff4 <getValueType>
    c314:	|      lea 12(sp),sp
    c318:	|      tst.w d0
    c31a:	|  /-- bne.s c320 <builtIn_setSoundLoopPoints+0x62>
    c31c:	|  |   moveq #1,d0
    c31e:	+--|-- bra.s c382 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    c320:	|  \-> moveq #24,d0
    c322:	|      add.l 20(sp),d0
    c326:	|      move.l d0,-(sp)
    c328:	|      jsr 10978 <trimStack>
    c32e:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    c330:	|      movea.l 20(sp),a0
    c334:	|      move.l 24(a0),d0
    c338:	|      move.l d0,-(sp)
    c33a:	|      pea 5 <_start+0x5>
    c33e:	|      moveq #16,d0
    c340:	|      add.l sp,d0
    c342:	|      move.l d0,-(sp)
    c344:	|      jsr fff4 <getValueType>
    c34a:	|      lea 12(sp),sp
    c34e:	|      tst.w d0
    c350:	|  /-- bne.s c356 <builtIn_setSoundLoopPoints+0x98>
    c352:	|  |   moveq #1,d0
    c354:	+--|-- bra.s c382 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    c356:	|  \-> moveq #24,d0
    c358:	|      add.l 20(sp),d0
    c35c:	|      move.l d0,-(sp)
    c35e:	|      jsr 10978 <trimStack>
    c364:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
    c366:	|      movea.l 4(sp),a0
    c36a:	|      move.l (sp),d1
    c36c:	|      move.l 8(sp),d0
    c370:	|      move.l a0,-(sp)
    c372:	|      move.l d1,-(sp)
    c374:	|      move.l d0,-(sp)
    c376:	|      jsr 8c6a <setSoundLoop>
    c37c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    c380:	|      moveq #2,d0
}
    c382:	\----> lea 12(sp),sp
    c386:	       rts

0000c388 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
    c388:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    c38a:	          movea.l 12(sp),a0
    c38e:	          movea.l 24(a0),a0
    c392:	          move.l (a0),d0
    c394:	          moveq #5,d1
    c396:	          cmp.l d0,d1
    c398:	/-------- bne.s c3dc <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    c39a:	|         movea.l 12(sp),a0
    c39e:	|         move.l 24(a0),d0
    c3a2:	|         move.l d0,-(sp)
    c3a4:	|         pea 5 <_start+0x5>
    c3a8:	|         move.l sp,d0
    c3aa:	|         addq.l #8,d0
    c3ac:	|         move.l d0,-(sp)
    c3ae:	|         jsr fff4 <getValueType>
    c3b4:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    c3b8:	|         moveq #24,d0
    c3ba:	|         add.l 12(sp),d0
    c3be:	|         move.l d0,-(sp)
    c3c0:	|         jsr 10978 <trimStack>
    c3c6:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
    c3c8:	|         move.l (sp),d0
    c3ca:	|         move.l d0,-(sp)
    c3cc:	|         jsr 117e6 <setFloor>
    c3d2:	|         addq.l #4,sp
    c3d4:	|         tst.w d0
    c3d6:	|  /----- bne.s c3f2 <builtIn_setFloor+0x6a>
    c3d8:	|  |      moveq #1,d0
    c3da:	|  |  /-- bra.s c3f4 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
    c3dc:	\--|--|-> moveq #24,d0
    c3de:	   |  |   add.l 12(sp),d0
    c3e2:	   |  |   move.l d0,-(sp)
    c3e4:	   |  |   jsr 10978 <trimStack>
    c3ea:	   |  |   addq.l #4,sp
		setFloorNull ();
    c3ec:	   |  |   jsr 11f60 <setFloorNull>
	}
	return BR_CONTINUE;
    c3f2:	   \--|-> moveq #2,d0
}
    c3f4:	      \-> addq.l #4,sp
    c3f6:	          rts

0000c3f8 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
    c3f8:	jsr 1107e <drawFloor>
	return BR_CONTINUE;
    c3fe:	moveq #2,d0
}
    c400:	rts

0000c402 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
    c402:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    c404:	          movea.l 12(sp),a0
    c408:	          movea.l 24(a0),a0
    c40c:	          move.l (a0),d0
    c40e:	          moveq #5,d1
    c410:	          cmp.l d0,d1
    c412:	/-------- bne.s c456 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    c414:	|         movea.l 12(sp),a0
    c418:	|         move.l 24(a0),d0
    c41c:	|         move.l d0,-(sp)
    c41e:	|         pea 5 <_start+0x5>
    c422:	|         move.l sp,d0
    c424:	|         addq.l #8,d0
    c426:	|         move.l d0,-(sp)
    c428:	|         jsr fff4 <getValueType>
    c42e:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    c432:	|         moveq #24,d0
    c434:	|         add.l 12(sp),d0
    c438:	|         move.l d0,-(sp)
    c43a:	|         jsr 10978 <trimStack>
    c440:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
    c442:	|         move.l (sp),d0
    c444:	|         move.l d0,-(sp)
    c446:	|         jsr 1604 <setZBuffer>
    c44c:	|         addq.l #4,sp
    c44e:	|         tst.w d0
    c450:	|  /----- bne.s c46c <builtIn_setZBuffer+0x6a>
    c452:	|  |      moveq #1,d0
    c454:	|  |  /-- bra.s c46e <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
    c456:	\--|--|-> moveq #24,d0
    c458:	   |  |   add.l 12(sp),d0
    c45c:	   |  |   move.l d0,-(sp)
    c45e:	   |  |   jsr 10978 <trimStack>
    c464:	   |  |   addq.l #4,sp
		killZBuffer ();
    c466:	   |  |   jsr 15ae <killZBuffer>
	}
	return BR_CONTINUE;
    c46c:	   \--|-> moveq #2,d0
}
    c46e:	      \-> addq.l #4,sp
    c470:	          rts

0000c472 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
    c472:	pea 15924 <zbuffer.c.4facf542+0x26c>
    c478:	jsr 12048 <KPrintF>
    c47e:	addq.l #4,sp
	return BR_CONTINUE;
    c480:	moveq #2,d0
}
    c482:	rts

0000c484 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c484:	          movea.l 8(sp),a0
    c488:	          move.l 24(a0),d0
    c48c:	          move.l d0,-(sp)
    c48e:	          pea 1 <_start+0x1>
    c492:	          pea 17be0 <speechMode>
    c498:	          jsr fff4 <getValueType>
    c49e:	          lea 12(sp),sp
    c4a2:	          tst.w d0
    c4a4:	      /-- bne.s c4aa <builtIn_setSpeechMode+0x26>
    c4a6:	      |   moveq #1,d0
    c4a8:	/-----|-- bra.s c4e2 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
    c4aa:	|     \-> moveq #24,d0
    c4ac:	|         add.l 8(sp),d0
    c4b0:	|         move.l d0,-(sp)
    c4b2:	|         jsr 10978 <trimStack>
    c4b8:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
    c4ba:	|         move.l 17be0 <speechMode>,d0
    c4c0:	|     /-- bmi.s c4ce <builtIn_setSpeechMode+0x4a>
    c4c2:	|     |   move.l 17be0 <speechMode>,d0
    c4c8:	|     |   moveq #2,d1
    c4ca:	|     |   cmp.l d0,d1
    c4cc:	|  /--|-- bge.s c4e0 <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
    c4ce:	|  |  \-> pea 1593d <zbuffer.c.4facf542+0x285>
    c4d4:	|  |      jsr 12048 <KPrintF>
    c4da:	|  |      addq.l #4,sp
		return BR_ERROR;
    c4dc:	|  |      moveq #1,d0
    c4de:	+--|----- bra.s c4e2 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
    c4e0:	|  \----> moveq #2,d0
}
    c4e2:	\-------> rts

0000c4e4 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
    c4e4:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
    c4e6:	       jsr 4d48 <isThereAnySpeechGoingOn>
    c4ec:	       move.l d0,(sp)
	if (i == -1) {
    c4ee:	       moveq #-1,d0
    c4f0:	       cmp.l (sp),d0
    c4f2:	/----- bne.s c50e <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
    c4f4:	|      moveq #28,d0
    c4f6:	|      add.l 12(sp),d0
    c4fa:	|      clr.l -(sp)
    c4fc:	|      pea 1 <_start+0x1>
    c500:	|      move.l d0,-(sp)
    c502:	|      jsr 108e6 <setVariable>
    c508:	|      lea 12(sp),sp
    c50c:	|  /-- bra.s c526 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
    c50e:	\--|-> moveq #28,d0
    c510:	   |   add.l 12(sp),d0
    c514:	   |   move.l (sp),-(sp)
    c516:	   |   pea 7 <_start+0x7>
    c51a:	   |   move.l d0,-(sp)
    c51c:	   |   jsr 108e6 <setVariable>
    c522:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    c526:	   \-> moveq #2,d0
}
    c528:	       addq.l #4,sp
    c52a:	       rts

0000c52c <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
    c52c:	jsr 337a <killSpeechTimers>
	return BR_CONTINUE;
    c532:	moveq #2,d0
}
    c534:	rts

0000c536 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
    c536:	       move.l 17c1a <overRegion>,d0
    c53c:	/----- beq.s c566 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    c53e:	|      movea.l 17c1a <overRegion>,a0
    c544:	|      movea.l 28(a0),a0
    c548:	|      move.l 4(a0),d1
    c54c:	|      moveq #28,d0
    c54e:	|      add.l 8(sp),d0
    c552:	|      move.l d1,-(sp)
    c554:	|      pea 7 <_start+0x7>
    c558:	|      move.l d0,-(sp)
    c55a:	|      jsr 108e6 <setVariable>
    c560:	|      lea 12(sp),sp
    c564:	|  /-- bra.s c57e <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
    c566:	\--|-> moveq #28,d0
    c568:	   |   add.l 8(sp),d0
    c56c:	   |   clr.l -(sp)
    c56e:	   |   pea 1 <_start+0x1>
    c572:	   |   move.l d0,-(sp)
    c574:	   |   jsr 108e6 <setVariable>
    c57a:	   |   lea 12(sp),sp
	return BR_CONTINUE;
    c57e:	   \-> moveq #2,d0
}
    c580:	       rts

0000c582 <builtIn_rename>:

builtIn(rename)
{
    c582:	       lea -16(sp),sp
    c586:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    c588:	       movea.l 28(sp),a0
    c58c:	       move.l 24(a0),d0
    c590:	       move.l d0,-(sp)
    c592:	       jsr 105ca <getTextFromAnyVar>
    c598:	       addq.l #4,sp
    c59a:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
    c59e:	   /-- bne.s c5a4 <builtIn_rename+0x22>
    c5a0:	   |   moveq #1,d0
    c5a2:	/--|-- bra.s c61e <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    c5a4:	|  \-> moveq #24,d0
    c5a6:	|      add.l 28(sp),d0
    c5aa:	|      move.l d0,-(sp)
    c5ac:	|      jsr 10978 <trimStack>
    c5b2:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
    c5b4:	|      movea.l 28(sp),a0
    c5b8:	|      move.l 24(a0),d0
    c5bc:	|      move.l d0,-(sp)
    c5be:	|      pea 7 <_start+0x7>
    c5c2:	|      lea 12(sp),a0
    c5c6:	|      move.l a0,-(sp)
    c5c8:	|      jsr fff4 <getValueType>
    c5ce:	|      lea 12(sp),sp
    c5d2:	|      tst.w d0
    c5d4:	|  /-- bne.s c5da <builtIn_rename+0x58>
    c5d6:	|  |   moveq #1,d0
    c5d8:	+--|-- bra.s c61e <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    c5da:	|  \-> moveq #24,d0
    c5dc:	|      add.l 28(sp),d0
    c5e0:	|      move.l d0,-(sp)
    c5e2:	|      jsr 10978 <trimStack>
    c5e8:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
    c5ea:	|      move.l 4(sp),d0
    c5ee:	|      move.l d0,-(sp)
    c5f0:	|      jsr 8f3a <findObjectType>
    c5f6:	|      addq.l #4,sp
    c5f8:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
    c5fc:	|      movea.l 12(sp),a0
    c600:	|      move.l (a0),8(sp)
    c604:	|      move.l 17b28 <SysBase>,d0
    c60a:	|      movea.l d0,a6
    c60c:	|      movea.l 8(sp),a1
    c610:	|      jsr -690(a6)
	o->screenName = newText;
    c614:	|      movea.l 12(sp),a0
    c618:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
    c61c:	|      moveq #2,d0
}
    c61e:	\----> movea.l (sp)+,a6
    c620:	       lea 16(sp),sp
    c624:	       rts

0000c626 <builtIn_getObjectX>:

builtIn (getObjectX)
{
    c626:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    c62a:	          movea.l 20(sp),a0
    c62e:	          move.l 24(a0),d0
    c632:	          move.l d0,-(sp)
    c634:	          pea 7 <_start+0x7>
    c638:	          lea 8(sp),a0
    c63c:	          move.l a0,-(sp)
    c63e:	          jsr fff4 <getValueType>
    c644:	          lea 12(sp),sp
    c648:	          tst.w d0
    c64a:	      /-- bne.s c652 <builtIn_getObjectX+0x2c>
    c64c:	      |   moveq #1,d0
    c64e:	/-----|-- bra.w c6ee <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
    c652:	|     \-> moveq #24,d0
    c654:	|         add.l 20(sp),d0
    c658:	|         move.l d0,-(sp)
    c65a:	|         jsr 10978 <trimStack>
    c660:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    c662:	|         move.l (sp),d0
    c664:	|         move.l d0,-(sp)
    c666:	|         jsr 6344 <findPerson>
    c66c:	|         addq.l #4,sp
    c66e:	|         move.l d0,8(sp)
	if (pers) {
    c672:	|     /-- beq.s c6a0 <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
    c674:	|     |   movea.l 8(sp),a0
    c678:	|     |   move.l (a0),d0
    c67a:	|     |   move.l d0,-(sp)
    c67c:	|     |   jsr 12438 <__fixsfsi>
    c682:	|     |   addq.l #4,sp
    c684:	|     |   move.l d0,d1
    c686:	|     |   moveq #28,d0
    c688:	|     |   add.l 20(sp),d0
    c68c:	|     |   move.l d1,-(sp)
    c68e:	|     |   pea 1 <_start+0x1>
    c692:	|     |   move.l d0,-(sp)
    c694:	|     |   jsr 108e6 <setVariable>
    c69a:	|     |   lea 12(sp),sp
    c69e:	|  /--|-- bra.s c6ec <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    c6a0:	|  |  \-> move.l (sp),d0
    c6a2:	|  |      move.l d0,-(sp)
    c6a4:	|  |      jsr 10abe <getRegionForObject>
    c6aa:	|  |      addq.l #4,sp
    c6ac:	|  |      move.l d0,4(sp)
		if (la) {
    c6b0:	|  |  /-- beq.s c6d4 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
    c6b2:	|  |  |   movea.l 4(sp),a0
    c6b6:	|  |  |   move.l 16(a0),d1
    c6ba:	|  |  |   moveq #28,d0
    c6bc:	|  |  |   add.l 20(sp),d0
    c6c0:	|  |  |   move.l d1,-(sp)
    c6c2:	|  |  |   pea 1 <_start+0x1>
    c6c6:	|  |  |   move.l d0,-(sp)
    c6c8:	|  |  |   jsr 108e6 <setVariable>
    c6ce:	|  |  |   lea 12(sp),sp
    c6d2:	|  +--|-- bra.s c6ec <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    c6d4:	|  |  \-> moveq #28,d0
    c6d6:	|  |      add.l 20(sp),d0
    c6da:	|  |      clr.l -(sp)
    c6dc:	|  |      pea 1 <_start+0x1>
    c6e0:	|  |      move.l d0,-(sp)
    c6e2:	|  |      jsr 108e6 <setVariable>
    c6e8:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    c6ec:	|  \----> moveq #2,d0
}
    c6ee:	\-------> lea 12(sp),sp
    c6f2:	          rts

0000c6f4 <builtIn_getObjectY>:

builtIn (getObjectY)
{
    c6f4:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    c6f8:	          movea.l 20(sp),a0
    c6fc:	          move.l 24(a0),d0
    c700:	          move.l d0,-(sp)
    c702:	          pea 7 <_start+0x7>
    c706:	          lea 8(sp),a0
    c70a:	          move.l a0,-(sp)
    c70c:	          jsr fff4 <getValueType>
    c712:	          lea 12(sp),sp
    c716:	          tst.w d0
    c718:	      /-- bne.s c720 <builtIn_getObjectY+0x2c>
    c71a:	      |   moveq #1,d0
    c71c:	/-----|-- bra.w c7be <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
    c720:	|     \-> moveq #24,d0
    c722:	|         add.l 20(sp),d0
    c726:	|         move.l d0,-(sp)
    c728:	|         jsr 10978 <trimStack>
    c72e:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    c730:	|         move.l (sp),d0
    c732:	|         move.l d0,-(sp)
    c734:	|         jsr 6344 <findPerson>
    c73a:	|         addq.l #4,sp
    c73c:	|         move.l d0,8(sp)
	if (pers) {
    c740:	|     /-- beq.s c770 <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
    c742:	|     |   movea.l 8(sp),a0
    c746:	|     |   move.l 4(a0),d0
    c74a:	|     |   move.l d0,-(sp)
    c74c:	|     |   jsr 12438 <__fixsfsi>
    c752:	|     |   addq.l #4,sp
    c754:	|     |   move.l d0,d1
    c756:	|     |   moveq #28,d0
    c758:	|     |   add.l 20(sp),d0
    c75c:	|     |   move.l d1,-(sp)
    c75e:	|     |   pea 1 <_start+0x1>
    c762:	|     |   move.l d0,-(sp)
    c764:	|     |   jsr 108e6 <setVariable>
    c76a:	|     |   lea 12(sp),sp
    c76e:	|  /--|-- bra.s c7bc <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    c770:	|  |  \-> move.l (sp),d0
    c772:	|  |      move.l d0,-(sp)
    c774:	|  |      jsr 10abe <getRegionForObject>
    c77a:	|  |      addq.l #4,sp
    c77c:	|  |      move.l d0,4(sp)
		if (la) {
    c780:	|  |  /-- beq.s c7a4 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
    c782:	|  |  |   movea.l 4(sp),a0
    c786:	|  |  |   move.l 20(a0),d1
    c78a:	|  |  |   moveq #28,d0
    c78c:	|  |  |   add.l 20(sp),d0
    c790:	|  |  |   move.l d1,-(sp)
    c792:	|  |  |   pea 1 <_start+0x1>
    c796:	|  |  |   move.l d0,-(sp)
    c798:	|  |  |   jsr 108e6 <setVariable>
    c79e:	|  |  |   lea 12(sp),sp
    c7a2:	|  +--|-- bra.s c7bc <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    c7a4:	|  |  \-> moveq #28,d0
    c7a6:	|  |      add.l 20(sp),d0
    c7aa:	|  |      clr.l -(sp)
    c7ac:	|  |      pea 1 <_start+0x1>
    c7b0:	|  |      move.l d0,-(sp)
    c7b2:	|  |      jsr 108e6 <setVariable>
    c7b8:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    c7bc:	|  \----> moveq #2,d0
}
    c7be:	\-------> lea 12(sp),sp
    c7c2:	          rts

0000c7c4 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
    c7c4:	       lea -32(sp),sp
    c7c8:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c7cc:	       movea.l 56(sp),a0
    c7d0:	       move.l 24(a0),d0
    c7d4:	       move.l d0,-(sp)
    c7d6:	       pea 1 <_start+0x1>
    c7da:	       lea 28(sp),a0
    c7de:	       move.l a0,-(sp)
    c7e0:	       jsr fff4 <getValueType>
    c7e6:	       lea 12(sp),sp
    c7ea:	       tst.w d0
    c7ec:	   /-- bne.s c7f4 <builtIn_addScreenRegion+0x30>
    c7ee:	   |   moveq #1,d0
    c7f0:	/--|-- bra.w c9ce <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    c7f4:	|  \-> moveq #24,d0
    c7f6:	|      add.l 56(sp),d0
    c7fa:	|      move.l d0,-(sp)
    c7fc:	|      jsr 10978 <trimStack>
    c802:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c804:	|      movea.l 56(sp),a0
    c808:	|      move.l 24(a0),d0
    c80c:	|      move.l d0,-(sp)
    c80e:	|      pea 1 <_start+0x1>
    c812:	|      moveq #48,d0
    c814:	|      add.l sp,d0
    c816:	|      move.l d0,-(sp)
    c818:	|      jsr fff4 <getValueType>
    c81e:	|      lea 12(sp),sp
    c822:	|      tst.w d0
    c824:	|  /-- bne.s c82c <builtIn_addScreenRegion+0x68>
    c826:	|  |   moveq #1,d0
    c828:	+--|-- bra.w c9ce <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    c82c:	|  \-> moveq #24,d0
    c82e:	|      add.l 56(sp),d0
    c832:	|      move.l d0,-(sp)
    c834:	|      jsr 10978 <trimStack>
    c83a:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c83c:	|      movea.l 56(sp),a0
    c840:	|      move.l 24(a0),d0
    c844:	|      move.l d0,-(sp)
    c846:	|      pea 1 <_start+0x1>
    c84a:	|      moveq #52,d0
    c84c:	|      add.l sp,d0
    c84e:	|      move.l d0,-(sp)
    c850:	|      jsr fff4 <getValueType>
    c856:	|      lea 12(sp),sp
    c85a:	|      tst.w d0
    c85c:	|  /-- bne.s c864 <builtIn_addScreenRegion+0xa0>
    c85e:	|  |   moveq #1,d0
    c860:	+--|-- bra.w c9ce <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    c864:	|  \-> moveq #24,d0
    c866:	|      add.l 56(sp),d0
    c86a:	|      move.l d0,-(sp)
    c86c:	|      jsr 10978 <trimStack>
    c872:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c874:	|      movea.l 56(sp),a0
    c878:	|      move.l 24(a0),d0
    c87c:	|      move.l d0,-(sp)
    c87e:	|      pea 1 <_start+0x1>
    c882:	|      lea 32(sp),a0
    c886:	|      move.l a0,-(sp)
    c888:	|      jsr fff4 <getValueType>
    c88e:	|      lea 12(sp),sp
    c892:	|      tst.w d0
    c894:	|  /-- bne.s c89c <builtIn_addScreenRegion+0xd8>
    c896:	|  |   moveq #1,d0
    c898:	+--|-- bra.w c9ce <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    c89c:	|  \-> moveq #24,d0
    c89e:	|      add.l 56(sp),d0
    c8a2:	|      move.l d0,-(sp)
    c8a4:	|      jsr 10978 <trimStack>
    c8aa:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c8ac:	|      movea.l 56(sp),a0
    c8b0:	|      move.l 24(a0),d0
    c8b4:	|      move.l d0,-(sp)
    c8b6:	|      pea 1 <_start+0x1>
    c8ba:	|      lea 36(sp),a0
    c8be:	|      move.l a0,-(sp)
    c8c0:	|      jsr fff4 <getValueType>
    c8c6:	|      lea 12(sp),sp
    c8ca:	|      tst.w d0
    c8cc:	|  /-- bne.s c8d4 <builtIn_addScreenRegion+0x110>
    c8ce:	|  |   moveq #1,d0
    c8d0:	+--|-- bra.w c9ce <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    c8d4:	|  \-> moveq #24,d0
    c8d6:	|      add.l 56(sp),d0
    c8da:	|      move.l d0,-(sp)
    c8dc:	|      jsr 10978 <trimStack>
    c8e2:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c8e4:	|      movea.l 56(sp),a0
    c8e8:	|      move.l 24(a0),d0
    c8ec:	|      move.l d0,-(sp)
    c8ee:	|      pea 1 <_start+0x1>
    c8f2:	|      lea 40(sp),a0
    c8f6:	|      move.l a0,-(sp)
    c8f8:	|      jsr fff4 <getValueType>
    c8fe:	|      lea 12(sp),sp
    c902:	|      tst.w d0
    c904:	|  /-- bne.s c90c <builtIn_addScreenRegion+0x148>
    c906:	|  |   moveq #1,d0
    c908:	+--|-- bra.w c9ce <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    c90c:	|  \-> moveq #24,d0
    c90e:	|      add.l 56(sp),d0
    c912:	|      move.l d0,-(sp)
    c914:	|      jsr 10978 <trimStack>
    c91a:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c91c:	|      movea.l 56(sp),a0
    c920:	|      move.l 24(a0),d0
    c924:	|      move.l d0,-(sp)
    c926:	|      pea 1 <_start+0x1>
    c92a:	|      lea 44(sp),a0
    c92e:	|      move.l a0,-(sp)
    c930:	|      jsr fff4 <getValueType>
    c936:	|      lea 12(sp),sp
    c93a:	|      tst.w d0
    c93c:	|  /-- bne.s c944 <builtIn_addScreenRegion+0x180>
    c93e:	|  |   moveq #1,d0
    c940:	+--|-- bra.w c9ce <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    c944:	|  \-> moveq #24,d0
    c946:	|      add.l 56(sp),d0
    c94a:	|      move.l d0,-(sp)
    c94c:	|      jsr 10978 <trimStack>
    c952:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    c954:	|      movea.l 56(sp),a0
    c958:	|      move.l 24(a0),d0
    c95c:	|      move.l d0,-(sp)
    c95e:	|      pea 7 <_start+0x7>
    c962:	|      lea 24(sp),a0
    c966:	|      move.l a0,-(sp)
    c968:	|      jsr fff4 <getValueType>
    c96e:	|      lea 12(sp),sp
    c972:	|      tst.w d0
    c974:	|  /-- bne.s c97a <builtIn_addScreenRegion+0x1b6>
    c976:	|  |   moveq #1,d0
    c978:	+--|-- bra.s c9ce <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    c97a:	|  \-> moveq #24,d0
    c97c:	|      add.l 56(sp),d0
    c980:	|      move.l d0,-(sp)
    c982:	|      jsr 10978 <trimStack>
    c988:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
    c98a:	|      move.l 16(sp),d5
    c98e:	|      move.l 20(sp),d4
    c992:	|      move.l 40(sp),d3
    c996:	|      move.l 44(sp),d2
    c99a:	|      movea.l 24(sp),a1
    c99e:	|      movea.l 28(sp),a0
    c9a2:	|      move.l 32(sp),d1
    c9a6:	|      move.l 36(sp),d0
    c9aa:	|      move.l d5,-(sp)
    c9ac:	|      move.l d4,-(sp)
    c9ae:	|      move.l d3,-(sp)
    c9b0:	|      move.l d2,-(sp)
    c9b2:	|      move.l a1,-(sp)
    c9b4:	|      move.l a0,-(sp)
    c9b6:	|      move.l d1,-(sp)
    c9b8:	|      move.l d0,-(sp)
    c9ba:	|      jsr 109fe <addScreenRegion>
    c9c0:	|      lea 32(sp),sp
    c9c4:	|      tst.w d0
    c9c6:	|  /-- beq.s c9cc <builtIn_addScreenRegion+0x208>
    c9c8:	|  |   moveq #2,d0
    c9ca:	+--|-- bra.s c9ce <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
    c9cc:	|  \-> moveq #1,d0

}
    c9ce:	\----> movem.l (sp)+,d2-d5
    c9d2:	       lea 32(sp),sp
    c9d6:	       rts

0000c9d8 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
    c9d8:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    c9da:	       movea.l 12(sp),a0
    c9de:	       move.l 24(a0),d0
    c9e2:	       move.l d0,-(sp)
    c9e4:	       pea 7 <_start+0x7>
    c9e8:	       move.l sp,d0
    c9ea:	       addq.l #8,d0
    c9ec:	       move.l d0,-(sp)
    c9ee:	       jsr fff4 <getValueType>
    c9f4:	       lea 12(sp),sp
    c9f8:	       tst.w d0
    c9fa:	   /-- bne.s ca00 <builtIn_removeScreenRegion+0x28>
    c9fc:	   |   moveq #1,d0
    c9fe:	/--|-- bra.s ca1e <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
    ca00:	|  \-> moveq #24,d0
    ca02:	|      add.l 12(sp),d0
    ca06:	|      move.l d0,-(sp)
    ca08:	|      jsr 10978 <trimStack>
    ca0e:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
    ca10:	|      move.l (sp),d0
    ca12:	|      move.l d0,-(sp)
    ca14:	|      jsr 10c66 <removeScreenRegion>
    ca1a:	|      addq.l #4,sp
	return BR_CONTINUE;
    ca1c:	|      moveq #2,d0
}
    ca1e:	\----> addq.l #4,sp
    ca20:	       rts

0000ca22 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
    ca22:	jsr 10dea <showBoxes>
	return BR_CONTINUE;
    ca28:	moveq #2,d0
}
    ca2a:	rts

0000ca2c <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
    ca2c:	jsr 10aec <killAllRegions>
	return BR_CONTINUE;
    ca32:	moveq #2,d0
}
    ca34:	rts

0000ca36 <builtIn_addCharacter>:

builtIn(addCharacter)
{
    ca36:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
    ca3a:	       movea.l 24(sp),a0
    ca3e:	       move.l 24(a0),d0
    ca42:	       move.l d0,-(sp)
    ca44:	       jsr fca0 <getCostumeFromVar>
    ca4a:	       addq.l #4,sp
    ca4c:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
    ca50:	   /-- bne.s ca58 <builtIn_addCharacter+0x22>
    ca52:	   |   moveq #1,d0
    ca54:	/--|-- bra.w cb34 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
    ca58:	|  \-> moveq #24,d0
    ca5a:	|      add.l 24(sp),d0
    ca5e:	|      move.l d0,-(sp)
    ca60:	|      jsr 10978 <trimStack>
    ca66:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ca68:	|      movea.l 24(sp),a0
    ca6c:	|      move.l 24(a0),d0
    ca70:	|      move.l d0,-(sp)
    ca72:	|      pea 1 <_start+0x1>
    ca76:	|      lea 12(sp),a0
    ca7a:	|      move.l a0,-(sp)
    ca7c:	|      jsr fff4 <getValueType>
    ca82:	|      lea 12(sp),sp
    ca86:	|      tst.w d0
    ca88:	|  /-- bne.s ca90 <builtIn_addCharacter+0x5a>
    ca8a:	|  |   moveq #1,d0
    ca8c:	+--|-- bra.w cb34 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    ca90:	|  \-> moveq #24,d0
    ca92:	|      add.l 24(sp),d0
    ca96:	|      move.l d0,-(sp)
    ca98:	|      jsr 10978 <trimStack>
    ca9e:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    caa0:	|      movea.l 24(sp),a0
    caa4:	|      move.l 24(a0),d0
    caa8:	|      move.l d0,-(sp)
    caaa:	|      pea 1 <_start+0x1>
    caae:	|      moveq #16,d0
    cab0:	|      add.l sp,d0
    cab2:	|      move.l d0,-(sp)
    cab4:	|      jsr fff4 <getValueType>
    caba:	|      lea 12(sp),sp
    cabe:	|      tst.w d0
    cac0:	|  /-- bne.s cac6 <builtIn_addCharacter+0x90>
    cac2:	|  |   moveq #1,d0
    cac4:	+--|-- bra.s cb34 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    cac6:	|  \-> moveq #24,d0
    cac8:	|      add.l 24(sp),d0
    cacc:	|      move.l d0,-(sp)
    cace:	|      jsr 10978 <trimStack>
    cad4:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cad6:	|      movea.l 24(sp),a0
    cada:	|      move.l 24(a0),d0
    cade:	|      move.l d0,-(sp)
    cae0:	|      pea 7 <_start+0x7>
    cae4:	|      lea 8(sp),a0
    cae8:	|      move.l a0,-(sp)
    caea:	|      jsr fff4 <getValueType>
    caf0:	|      lea 12(sp),sp
    caf4:	|      tst.w d0
    caf6:	|  /-- bne.s cafc <builtIn_addCharacter+0xc6>
    caf8:	|  |   moveq #1,d0
    cafa:	+--|-- bra.s cb34 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    cafc:	|  \-> moveq #24,d0
    cafe:	|      add.l 24(sp),d0
    cb02:	|      move.l d0,-(sp)
    cb04:	|      jsr 10978 <trimStack>
    cb0a:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
    cb0c:	|      movea.l (sp),a0
    cb0e:	|      move.l 4(sp),d1
    cb12:	|      move.l 8(sp),d0
    cb16:	|      move.l 12(sp),-(sp)
    cb1a:	|      move.l a0,-(sp)
    cb1c:	|      move.l d1,-(sp)
    cb1e:	|      move.l d0,-(sp)
    cb20:	|      jsr 556a <addPerson>
    cb26:	|      lea 16(sp),sp
    cb2a:	|      tst.w d0
    cb2c:	|  /-- beq.s cb32 <builtIn_addCharacter+0xfc>
    cb2e:	|  |   moveq #2,d0
    cb30:	+--|-- bra.s cb34 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
    cb32:	|  \-> moveq #1,d0
}
    cb34:	\----> lea 16(sp),sp
    cb38:	       rts

0000cb3a <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
    cb3a:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cb3c:	       movea.l 12(sp),a0
    cb40:	       move.l 24(a0),d0
    cb44:	       move.l d0,-(sp)
    cb46:	       pea 7 <_start+0x7>
    cb4a:	       move.l sp,d0
    cb4c:	       addq.l #8,d0
    cb4e:	       move.l d0,-(sp)
    cb50:	       jsr fff4 <getValueType>
    cb56:	       lea 12(sp),sp
    cb5a:	       tst.w d0
    cb5c:	   /-- bne.s cb62 <builtIn_hideCharacter+0x28>
    cb5e:	   |   moveq #1,d0
    cb60:	/--|-- bra.s cb82 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
    cb62:	|  \-> moveq #24,d0
    cb64:	|      add.l 12(sp),d0
    cb68:	|      move.l d0,-(sp)
    cb6a:	|      jsr 10978 <trimStack>
    cb70:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
    cb72:	|      move.l (sp),d0
    cb74:	|      move.l d0,-(sp)
    cb76:	|      clr.l -(sp)
    cb78:	|      jsr 7844 <setShown>
    cb7e:	|      addq.l #8,sp
	return BR_CONTINUE;
    cb80:	|      moveq #2,d0
}
    cb82:	\----> addq.l #4,sp
    cb84:	       rts

0000cb86 <builtIn_showCharacter>:

builtIn(showCharacter)
{
    cb86:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cb88:	       movea.l 12(sp),a0
    cb8c:	       move.l 24(a0),d0
    cb90:	       move.l d0,-(sp)
    cb92:	       pea 7 <_start+0x7>
    cb96:	       move.l sp,d0
    cb98:	       addq.l #8,d0
    cb9a:	       move.l d0,-(sp)
    cb9c:	       jsr fff4 <getValueType>
    cba2:	       lea 12(sp),sp
    cba6:	       tst.w d0
    cba8:	   /-- bne.s cbae <builtIn_showCharacter+0x28>
    cbaa:	   |   moveq #1,d0
    cbac:	/--|-- bra.s cbd0 <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
    cbae:	|  \-> moveq #24,d0
    cbb0:	|      add.l 12(sp),d0
    cbb4:	|      move.l d0,-(sp)
    cbb6:	|      jsr 10978 <trimStack>
    cbbc:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
    cbbe:	|      move.l (sp),d0
    cbc0:	|      move.l d0,-(sp)
    cbc2:	|      pea 1 <_start+0x1>
    cbc6:	|      jsr 7844 <setShown>
    cbcc:	|      addq.l #8,sp
	return BR_CONTINUE;
    cbce:	|      moveq #2,d0
}
    cbd0:	\----> addq.l #4,sp
    cbd2:	       rts

0000cbd4 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
    cbd4:	jsr 337a <killSpeechTimers>
	killMostPeople ();
    cbda:	jsr 67b0 <killMostPeople>
	return BR_CONTINUE;
    cbe0:	moveq #2,d0
}
    cbe2:	rts

0000cbe4 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
    cbe4:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cbe6:	       movea.l 16(sp),a0
    cbea:	       move.l 24(a0),d0
    cbee:	       move.l d0,-(sp)
    cbf0:	       pea 1 <_start+0x1>
    cbf4:	       move.l sp,d0
    cbf6:	       addq.l #8,d0
    cbf8:	       move.l d0,-(sp)
    cbfa:	       jsr fff4 <getValueType>
    cc00:	       lea 12(sp),sp
    cc04:	       tst.w d0
    cc06:	   /-- bne.s cc0c <builtIn_setCharacterDrawMode+0x28>
    cc08:	   |   moveq #1,d0
    cc0a:	/--|-- bra.s cc66 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
    cc0c:	|  \-> moveq #24,d0
    cc0e:	|      add.l 16(sp),d0
    cc12:	|      move.l d0,-(sp)
    cc14:	|      jsr 10978 <trimStack>
    cc1a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cc1c:	|      movea.l 16(sp),a0
    cc20:	|      move.l 24(a0),d0
    cc24:	|      move.l d0,-(sp)
    cc26:	|      pea 7 <_start+0x7>
    cc2a:	|      moveq #12,d0
    cc2c:	|      add.l sp,d0
    cc2e:	|      move.l d0,-(sp)
    cc30:	|      jsr fff4 <getValueType>
    cc36:	|      lea 12(sp),sp
    cc3a:	|      tst.w d0
    cc3c:	|  /-- bne.s cc42 <builtIn_setCharacterDrawMode+0x5e>
    cc3e:	|  |   moveq #1,d0
    cc40:	+--|-- bra.s cc66 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
    cc42:	|  \-> moveq #24,d0
    cc44:	|      add.l 16(sp),d0
    cc48:	|      move.l d0,-(sp)
    cc4a:	|      jsr 10978 <trimStack>
    cc50:	|      addq.l #4,sp
	setDrawMode (di, obj);
    cc52:	|      move.l 4(sp),d1
    cc56:	|      move.l (sp),d0
    cc58:	|      move.l d1,-(sp)
    cc5a:	|      move.l d0,-(sp)
    cc5c:	|      jsr 7272 <setDrawMode>
    cc62:	|      addq.l #8,sp
	return BR_CONTINUE;
    cc64:	|      moveq #2,d0
}
    cc66:	\----> addq.l #8,sp
    cc68:	       rts

0000cc6a <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
    cc6a:	pea 1597b <zbuffer.c.4facf542+0x2c3>
    cc70:	jsr 12048 <KPrintF>
    cc76:	addq.l #4,sp
	return BR_CONTINUE;
    cc78:	moveq #2,d0
}
    cc7a:	rts

0000cc7c <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
    cc7c:	pea 159ae <zbuffer.c.4facf542+0x2f6>
    cc82:	jsr 12048 <KPrintF>
    cc88:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
    cc8a:	moveq #2,d0
}
    cc8c:	rts

0000cc8e <builtIn_setScale>:

builtIn(setScale)
{
    cc8e:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cc90:	       movea.l 16(sp),a0
    cc94:	       move.l 24(a0),d0
    cc98:	       move.l d0,-(sp)
    cc9a:	       pea 1 <_start+0x1>
    cc9e:	       move.l sp,d0
    cca0:	       addq.l #8,d0
    cca2:	       move.l d0,-(sp)
    cca4:	       jsr fff4 <getValueType>
    ccaa:	       lea 12(sp),sp
    ccae:	       tst.w d0
    ccb0:	   /-- bne.s ccb6 <builtIn_setScale+0x28>
    ccb2:	   |   moveq #1,d0
    ccb4:	/--|-- bra.s cd18 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
    ccb6:	|  \-> moveq #24,d0
    ccb8:	|      add.l 16(sp),d0
    ccbc:	|      move.l d0,-(sp)
    ccbe:	|      jsr 10978 <trimStack>
    ccc4:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ccc6:	|      movea.l 16(sp),a0
    ccca:	|      move.l 24(a0),d0
    ccce:	|      move.l d0,-(sp)
    ccd0:	|      pea 1 <_start+0x1>
    ccd4:	|      moveq #12,d0
    ccd6:	|      add.l sp,d0
    ccd8:	|      move.l d0,-(sp)
    ccda:	|      jsr fff4 <getValueType>
    cce0:	|      lea 12(sp),sp
    cce4:	|      tst.w d0
    cce6:	|  /-- bne.s ccec <builtIn_setScale+0x5e>
    cce8:	|  |   moveq #1,d0
    ccea:	+--|-- bra.s cd18 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
    ccec:	|  \-> moveq #24,d0
    ccee:	|      add.l 16(sp),d0
    ccf2:	|      move.l d0,-(sp)
    ccf4:	|      jsr 10978 <trimStack>
    ccfa:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
    ccfc:	|      move.l (sp),d0
    ccfe:	|      move.l d0,d0
    cd00:	|      movea.w d0,a1
    cd02:	|      move.l 4(sp),d0
    cd06:	|      move.l d0,d0
    cd08:	|      movea.w d0,a0
    cd0a:	|      move.l a1,-(sp)
    cd0c:	|      move.l a0,-(sp)
    cd0e:	|      jsr 781c <setScale>
    cd14:	|      addq.l #8,sp
	return BR_CONTINUE;
    cd16:	|      moveq #2,d0
}
    cd18:	\----> addq.l #8,sp
    cd1a:	       rts

0000cd1c <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
    cd1c:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cd1e:	       movea.l 12(sp),a0
    cd22:	       move.l 24(a0),d0
    cd26:	       move.l d0,-(sp)
    cd28:	       pea 7 <_start+0x7>
    cd2c:	       move.l sp,d0
    cd2e:	       addq.l #8,d0
    cd30:	       move.l d0,-(sp)
    cd32:	       jsr fff4 <getValueType>
    cd38:	       lea 12(sp),sp
    cd3c:	       tst.w d0
    cd3e:	   /-- bne.s cd44 <builtIn_stopCharacter+0x28>
    cd40:	   |   moveq #1,d0
    cd42:	/--|-- bra.s cd7c <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
    cd44:	|  \-> moveq #24,d0
    cd46:	|      add.l 12(sp),d0
    cd4a:	|      move.l d0,-(sp)
    cd4c:	|      jsr 10978 <trimStack>
    cd52:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
    cd54:	|      move.l (sp),d0
    cd56:	|      move.l d0,-(sp)
    cd58:	|      jsr 7950 <stopPerson>
    cd5e:	|      addq.l #4,sp
    cd60:	|      movea.w d0,a0
    cd62:	|      moveq #28,d0
    cd64:	|      add.l 12(sp),d0
    cd68:	|      move.l a0,-(sp)
    cd6a:	|      pea 1 <_start+0x1>
    cd6e:	|      move.l d0,-(sp)
    cd70:	|      jsr 108e6 <setVariable>
    cd76:	|      lea 12(sp),sp
	return BR_CONTINUE;
    cd7a:	|      moveq #2,d0
}
    cd7c:	\----> addq.l #4,sp
    cd7e:	       rts

0000cd80 <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
    cd80:	pea 159e8 <zbuffer.c.4facf542+0x330>
    cd86:	jsr 12048 <KPrintF>
    cd8c:	addq.l #4,sp
	return BR_CONTINUE;
    cd8e:	moveq #2,d0
}
    cd90:	rts

0000cd92 <builtIn_animate>:

builtIn(animate)
{
    cd92:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    cd94:	       movea.l 16(sp),a0
    cd98:	       move.l 24(a0),d0
    cd9c:	       move.l d0,-(sp)
    cd9e:	       jsr 104cc <getAnimationFromVar>
    cda4:	       addq.l #4,sp
    cda6:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    cdaa:	   /-- bne.s cdb0 <builtIn_animate+0x1e>
    cdac:	   |   moveq #1,d0
    cdae:	/--|-- bra.s ce2e <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
    cdb0:	|  \-> moveq #24,d0
    cdb2:	|      add.l 16(sp),d0
    cdb6:	|      move.l d0,-(sp)
    cdb8:	|      jsr 10978 <trimStack>
    cdbe:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cdc0:	|      movea.l 16(sp),a0
    cdc4:	|      move.l 24(a0),d0
    cdc8:	|      move.l d0,-(sp)
    cdca:	|      pea 7 <_start+0x7>
    cdce:	|      move.l sp,d0
    cdd0:	|      addq.l #8,d0
    cdd2:	|      move.l d0,-(sp)
    cdd4:	|      jsr fff4 <getValueType>
    cdda:	|      lea 12(sp),sp
    cdde:	|      tst.w d0
    cde0:	|  /-- bne.s cde6 <builtIn_animate+0x54>
    cde2:	|  |   moveq #1,d0
    cde4:	+--|-- bra.s ce2e <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
    cde6:	|  \-> moveq #24,d0
    cde8:	|      add.l 16(sp),d0
    cdec:	|      move.l d0,-(sp)
    cdee:	|      jsr 10978 <trimStack>
    cdf4:	|      addq.l #4,sp
	animatePerson (obj, pp);
    cdf6:	|      move.l (sp),d0
    cdf8:	|      move.l 4(sp),-(sp)
    cdfc:	|      move.l d0,-(sp)
    cdfe:	|      jsr 57dc <animatePerson>
    ce04:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
    ce06:	|      move.l 4(sp),-(sp)
    ce0a:	|      jsr 79a4 <timeForAnim>
    ce10:	|      addq.l #4,sp
    ce12:	|      move.l d0,d1
    ce14:	|      moveq #28,d0
    ce16:	|      add.l 16(sp),d0
    ce1a:	|      move.l d1,-(sp)
    ce1c:	|      pea 1 <_start+0x1>
    ce20:	|      move.l d0,-(sp)
    ce22:	|      jsr 108e6 <setVariable>
    ce28:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ce2c:	|      moveq #2,d0
}
    ce2e:	\----> addq.l #8,sp
    ce30:	       rts

0000ce32 <builtIn_setCostume>:

builtIn(setCostume)
{
    ce32:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
    ce34:	       movea.l 16(sp),a0
    ce38:	       move.l 24(a0),d0
    ce3c:	       move.l d0,-(sp)
    ce3e:	       jsr fca0 <getCostumeFromVar>
    ce44:	       addq.l #4,sp
    ce46:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    ce4a:	   /-- bne.s ce50 <builtIn_setCostume+0x1e>
    ce4c:	   |   moveq #1,d0
    ce4e:	/--|-- bra.s cea8 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
    ce50:	|  \-> moveq #24,d0
    ce52:	|      add.l 16(sp),d0
    ce56:	|      move.l d0,-(sp)
    ce58:	|      jsr 10978 <trimStack>
    ce5e:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ce60:	|      movea.l 16(sp),a0
    ce64:	|      move.l 24(a0),d0
    ce68:	|      move.l d0,-(sp)
    ce6a:	|      pea 7 <_start+0x7>
    ce6e:	|      move.l sp,d0
    ce70:	|      addq.l #8,d0
    ce72:	|      move.l d0,-(sp)
    ce74:	|      jsr fff4 <getValueType>
    ce7a:	|      lea 12(sp),sp
    ce7e:	|      tst.w d0
    ce80:	|  /-- bne.s ce86 <builtIn_setCostume+0x54>
    ce82:	|  |   moveq #1,d0
    ce84:	+--|-- bra.s cea8 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
    ce86:	|  \-> moveq #24,d0
    ce88:	|      add.l 16(sp),d0
    ce8c:	|      move.l d0,-(sp)
    ce8e:	|      jsr 10978 <trimStack>
    ce94:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
    ce96:	|      move.l (sp),d0
    ce98:	|      move.l 4(sp),-(sp)
    ce9c:	|      move.l d0,-(sp)
    ce9e:	|      jsr 5826 <animatePersonUsingPersona>
    cea4:	|      addq.l #8,sp
	return BR_CONTINUE;
    cea6:	|      moveq #2,d0
}
    cea8:	\----> addq.l #8,sp
    ceaa:	       rts

0000ceac <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
    ceac:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ceae:	       movea.l 16(sp),a0
    ceb2:	       move.l 24(a0),d0
    ceb6:	       move.l d0,-(sp)
    ceb8:	       pea 1 <_start+0x1>
    cebc:	       move.l sp,d0
    cebe:	       addq.l #8,d0
    cec0:	       move.l d0,-(sp)
    cec2:	       jsr fff4 <getValueType>
    cec8:	       lea 12(sp),sp
    cecc:	       tst.w d0
    cece:	   /-- bne.s ced4 <builtIn_floatCharacter+0x28>
    ced0:	   |   moveq #1,d0
    ced2:	/--|-- bra.s cf48 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
    ced4:	|  \-> moveq #24,d0
    ced6:	|      add.l 16(sp),d0
    ceda:	|      move.l d0,-(sp)
    cedc:	|      jsr 10978 <trimStack>
    cee2:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cee4:	|      movea.l 16(sp),a0
    cee8:	|      move.l 24(a0),d0
    ceec:	|      move.l d0,-(sp)
    ceee:	|      pea 7 <_start+0x7>
    cef2:	|      moveq #12,d0
    cef4:	|      add.l sp,d0
    cef6:	|      move.l d0,-(sp)
    cef8:	|      jsr fff4 <getValueType>
    cefe:	|      lea 12(sp),sp
    cf02:	|      tst.w d0
    cf04:	|  /-- bne.s cf0a <builtIn_floatCharacter+0x5e>
    cf06:	|  |   moveq #1,d0
    cf08:	+--|-- bra.s cf48 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
    cf0a:	|  \-> moveq #24,d0
    cf0c:	|      add.l 16(sp),d0
    cf10:	|      move.l d0,-(sp)
    cf12:	|      jsr 10978 <trimStack>
    cf18:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
    cf1a:	|      move.l 4(sp),d1
    cf1e:	|      move.l (sp),d0
    cf20:	|      move.l d1,-(sp)
    cf22:	|      move.l d0,-(sp)
    cf24:	|      jsr 6372 <floatCharacter>
    cf2a:	|      addq.l #8,sp
    cf2c:	|      movea.w d0,a0
    cf2e:	|      moveq #28,d0
    cf30:	|      add.l 16(sp),d0
    cf34:	|      move.l a0,-(sp)
    cf36:	|      pea 1 <_start+0x1>
    cf3a:	|      move.l d0,-(sp)
    cf3c:	|      jsr 108e6 <setVariable>
    cf42:	|      lea 12(sp),sp
	return BR_CONTINUE;
    cf46:	|      moveq #2,d0
}
    cf48:	\----> addq.l #8,sp
    cf4a:	       rts

0000cf4c <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
    cf4c:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cf4e:	       movea.l 16(sp),a0
    cf52:	       move.l 24(a0),d0
    cf56:	       move.l d0,-(sp)
    cf58:	       pea 1 <_start+0x1>
    cf5c:	       move.l sp,d0
    cf5e:	       addq.l #8,d0
    cf60:	       move.l d0,-(sp)
    cf62:	       jsr fff4 <getValueType>
    cf68:	       lea 12(sp),sp
    cf6c:	       tst.w d0
    cf6e:	   /-- bne.s cf74 <builtIn_setCharacterWalkSpeed+0x28>
    cf70:	   |   moveq #1,d0
    cf72:	/--|-- bra.s cfe8 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
    cf74:	|  \-> moveq #24,d0
    cf76:	|      add.l 16(sp),d0
    cf7a:	|      move.l d0,-(sp)
    cf7c:	|      jsr 10978 <trimStack>
    cf82:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cf84:	|      movea.l 16(sp),a0
    cf88:	|      move.l 24(a0),d0
    cf8c:	|      move.l d0,-(sp)
    cf8e:	|      pea 7 <_start+0x7>
    cf92:	|      moveq #12,d0
    cf94:	|      add.l sp,d0
    cf96:	|      move.l d0,-(sp)
    cf98:	|      jsr fff4 <getValueType>
    cf9e:	|      lea 12(sp),sp
    cfa2:	|      tst.w d0
    cfa4:	|  /-- bne.s cfaa <builtIn_setCharacterWalkSpeed+0x5e>
    cfa6:	|  |   moveq #1,d0
    cfa8:	+--|-- bra.s cfe8 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
    cfaa:	|  \-> moveq #24,d0
    cfac:	|      add.l 16(sp),d0
    cfb0:	|      move.l d0,-(sp)
    cfb2:	|      jsr 10978 <trimStack>
    cfb8:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
    cfba:	|      move.l 4(sp),d1
    cfbe:	|      move.l (sp),d0
    cfc0:	|      move.l d1,-(sp)
    cfc2:	|      move.l d0,-(sp)
    cfc4:	|      jsr 77b8 <setCharacterWalkSpeed>
    cfca:	|      addq.l #8,sp
    cfcc:	|      movea.w d0,a0
    cfce:	|      moveq #28,d0
    cfd0:	|      add.l 16(sp),d0
    cfd4:	|      move.l a0,-(sp)
    cfd6:	|      pea 1 <_start+0x1>
    cfda:	|      move.l d0,-(sp)
    cfdc:	|      jsr 108e6 <setVariable>
    cfe2:	|      lea 12(sp),sp
	return BR_CONTINUE;
    cfe6:	|      moveq #2,d0
}
    cfe8:	\----> addq.l #8,sp
    cfea:	       rts

0000cfec <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
    cfec:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cfee:	       movea.l 16(sp),a0
    cff2:	       move.l 24(a0),d0
    cff6:	       move.l d0,-(sp)
    cff8:	       pea 1 <_start+0x1>
    cffc:	       move.l sp,d0
    cffe:	       addq.l #8,d0
    d000:	       move.l d0,-(sp)
    d002:	       jsr fff4 <getValueType>
    d008:	       lea 12(sp),sp
    d00c:	       tst.w d0
    d00e:	   /-- bne.s d014 <builtIn_turnCharacter+0x28>
    d010:	   |   moveq #1,d0
    d012:	/--|-- bra.s d088 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
    d014:	|  \-> moveq #24,d0
    d016:	|      add.l 16(sp),d0
    d01a:	|      move.l d0,-(sp)
    d01c:	|      jsr 10978 <trimStack>
    d022:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d024:	|      movea.l 16(sp),a0
    d028:	|      move.l 24(a0),d0
    d02c:	|      move.l d0,-(sp)
    d02e:	|      pea 7 <_start+0x7>
    d032:	|      moveq #12,d0
    d034:	|      add.l sp,d0
    d036:	|      move.l d0,-(sp)
    d038:	|      jsr fff4 <getValueType>
    d03e:	|      lea 12(sp),sp
    d042:	|      tst.w d0
    d044:	|  /-- bne.s d04a <builtIn_turnCharacter+0x5e>
    d046:	|  |   moveq #1,d0
    d048:	+--|-- bra.s d088 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
    d04a:	|  \-> moveq #24,d0
    d04c:	|      add.l 16(sp),d0
    d050:	|      move.l d0,-(sp)
    d052:	|      jsr 10978 <trimStack>
    d058:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
    d05a:	|      move.l (sp),d1
    d05c:	|      move.l 4(sp),d0
    d060:	|      move.l d1,-(sp)
    d062:	|      move.l d0,-(sp)
    d064:	|      jsr 7a5c <turnPersonToFace>
    d06a:	|      addq.l #8,sp
    d06c:	|      movea.w d0,a0
    d06e:	|      moveq #28,d0
    d070:	|      add.l 16(sp),d0
    d074:	|      move.l a0,-(sp)
    d076:	|      pea 1 <_start+0x1>
    d07a:	|      move.l d0,-(sp)
    d07c:	|      jsr 108e6 <setVariable>
    d082:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d086:	|      moveq #2,d0
}
    d088:	\----> addq.l #8,sp
    d08a:	       rts

0000d08c <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
    d08c:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d08e:	       movea.l 16(sp),a0
    d092:	       move.l 24(a0),d0
    d096:	       move.l d0,-(sp)
    d098:	       pea 1 <_start+0x1>
    d09c:	       move.l sp,d0
    d09e:	       addq.l #8,d0
    d0a0:	       move.l d0,-(sp)
    d0a2:	       jsr fff4 <getValueType>
    d0a8:	       lea 12(sp),sp
    d0ac:	       tst.w d0
    d0ae:	   /-- bne.s d0b4 <builtIn_setCharacterExtra+0x28>
    d0b0:	   |   moveq #1,d0
    d0b2:	/--|-- bra.s d128 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
    d0b4:	|  \-> moveq #24,d0
    d0b6:	|      add.l 16(sp),d0
    d0ba:	|      move.l d0,-(sp)
    d0bc:	|      jsr 10978 <trimStack>
    d0c2:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d0c4:	|      movea.l 16(sp),a0
    d0c8:	|      move.l 24(a0),d0
    d0cc:	|      move.l d0,-(sp)
    d0ce:	|      pea 7 <_start+0x7>
    d0d2:	|      moveq #12,d0
    d0d4:	|      add.l sp,d0
    d0d6:	|      move.l d0,-(sp)
    d0d8:	|      jsr fff4 <getValueType>
    d0de:	|      lea 12(sp),sp
    d0e2:	|      tst.w d0
    d0e4:	|  /-- bne.s d0ea <builtIn_setCharacterExtra+0x5e>
    d0e6:	|  |   moveq #1,d0
    d0e8:	+--|-- bra.s d128 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
    d0ea:	|  \-> moveq #24,d0
    d0ec:	|      add.l 16(sp),d0
    d0f0:	|      move.l d0,-(sp)
    d0f2:	|      jsr 10978 <trimStack>
    d0f8:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
    d0fa:	|      move.l (sp),d1
    d0fc:	|      move.l 4(sp),d0
    d100:	|      move.l d1,-(sp)
    d102:	|      move.l d0,-(sp)
    d104:	|      jsr 77e6 <setPersonExtra>
    d10a:	|      addq.l #8,sp
    d10c:	|      movea.w d0,a0
    d10e:	|      moveq #28,d0
    d110:	|      add.l 16(sp),d0
    d114:	|      move.l a0,-(sp)
    d116:	|      pea 1 <_start+0x1>
    d11a:	|      move.l d0,-(sp)
    d11c:	|      jsr 108e6 <setVariable>
    d122:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d126:	|      moveq #2,d0
}
    d128:	\----> addq.l #8,sp
    d12a:	       rts

0000d12c <builtIn_removeCharacter>:

builtIn(removeCharacter)
{
    d12c:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d12e:	       movea.l 12(sp),a0
    d132:	       move.l 24(a0),d0
    d136:	       move.l d0,-(sp)
    d138:	       pea 7 <_start+0x7>
    d13c:	       move.l sp,d0
    d13e:	       addq.l #8,d0
    d140:	       move.l d0,-(sp)
    d142:	       jsr fff4 <getValueType>
    d148:	       lea 12(sp),sp
    d14c:	       tst.w d0
    d14e:	   /-- bne.s d154 <builtIn_removeCharacter+0x28>
    d150:	   |   moveq #1,d0
    d152:	/--|-- bra.s d172 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
    d154:	|  \-> moveq #24,d0
    d156:	|      add.l 12(sp),d0
    d15a:	|      move.l d0,-(sp)
    d15c:	|      jsr 10978 <trimStack>
    d162:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
    d164:	|      move.l (sp),d0
    d166:	|      move.l d0,-(sp)
    d168:	|      jsr 6b0a <removeOneCharacter>
    d16e:	|      addq.l #4,sp
	return BR_CONTINUE;
    d170:	|      moveq #2,d0
}
    d172:	\----> addq.l #4,sp
    d174:	       rts

0000d176 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
    d176:	                lea -28(sp),sp
    d17a:	                move.l d2,-(sp)
    d17c:	                move.l 44(sp),d1
    d180:	                move.l 48(sp),d0
    d184:	                move.w d1,d1
    d186:	                move.w d1,6(sp)
    d18a:	                move.w d0,d0
    d18c:	                move.w d0,4(sp)
	switch (numParams) {
    d190:	                moveq #2,d0
    d192:	                cmp.l 36(sp),d0
    d196:	      /-------- beq.w d2d8 <moveChr+0x162>
    d19a:	      |         moveq #3,d0
    d19c:	      |         cmp.l 36(sp),d0
    d1a0:	/-----|-------- bne.w d40c <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d1a4:	|     |         movea.l 40(sp),a0
    d1a8:	|     |         move.l 24(a0),d0
    d1ac:	|     |         move.l d0,-(sp)
    d1ae:	|     |         pea 1 <_start+0x1>
    d1b2:	|     |         lea 20(sp),a0
    d1b6:	|     |         move.l a0,-(sp)
    d1b8:	|     |         jsr fff4 <getValueType>
    d1be:	|     |         lea 12(sp),sp
    d1c2:	|     |         tst.w d0
    d1c4:	|     |     /-- bne.s d1cc <moveChr+0x56>
    d1c6:	|     |     |   moveq #1,d0
    d1c8:	|  /--|-----|-- bra.w d41c <moveChr+0x2a6>
			trimStack (&fun -> stack);
    d1cc:	|  |  |     \-> moveq #24,d0
    d1ce:	|  |  |         add.l 40(sp),d0
    d1d2:	|  |  |         move.l d0,-(sp)
    d1d4:	|  |  |         jsr 10978 <trimStack>
    d1da:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d1dc:	|  |  |         movea.l 40(sp),a0
    d1e0:	|  |  |         move.l 24(a0),d0
    d1e4:	|  |  |         move.l d0,-(sp)
    d1e6:	|  |  |         pea 1 <_start+0x1>
    d1ea:	|  |  |         lea 24(sp),a0
    d1ee:	|  |  |         move.l a0,-(sp)
    d1f0:	|  |  |         jsr fff4 <getValueType>
    d1f6:	|  |  |         lea 12(sp),sp
    d1fa:	|  |  |         tst.w d0
    d1fc:	|  |  |     /-- bne.s d204 <moveChr+0x8e>
    d1fe:	|  |  |     |   moveq #1,d0
    d200:	|  +--|-----|-- bra.w d41c <moveChr+0x2a6>
			trimStack (&fun -> stack);
    d204:	|  |  |     \-> moveq #24,d0
    d206:	|  |  |         add.l 40(sp),d0
    d20a:	|  |  |         move.l d0,-(sp)
    d20c:	|  |  |         jsr 10978 <trimStack>
    d212:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d214:	|  |  |         movea.l 40(sp),a0
    d218:	|  |  |         move.l 24(a0),d0
    d21c:	|  |  |         move.l d0,-(sp)
    d21e:	|  |  |         pea 7 <_start+0x7>
    d222:	|  |  |         lea 16(sp),a0
    d226:	|  |  |         move.l a0,-(sp)
    d228:	|  |  |         jsr fff4 <getValueType>
    d22e:	|  |  |         lea 12(sp),sp
    d232:	|  |  |         tst.w d0
    d234:	|  |  |     /-- bne.s d23c <moveChr+0xc6>
    d236:	|  |  |     |   moveq #1,d0
    d238:	|  +--|-----|-- bra.w d41c <moveChr+0x2a6>
			trimStack (&fun -> stack);
    d23c:	|  |  |     \-> moveq #24,d0
    d23e:	|  |  |         add.l 40(sp),d0
    d242:	|  |  |         move.l d0,-(sp)
    d244:	|  |  |         jsr 10978 <trimStack>
    d24a:	|  |  |         addq.l #4,sp

			if (force) {
    d24c:	|  |  |         tst.w 6(sp)
    d250:	|  |  |     /-- beq.s d280 <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    d252:	|  |  |     |   movea.l 8(sp),a0
    d256:	|  |  |     |   move.l 12(sp),d1
    d25a:	|  |  |     |   move.l 16(sp),d0
    d25e:	|  |  |     |   pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffc3914>
    d262:	|  |  |     |   move.l 44(sp),-(sp)
    d266:	|  |  |     |   move.l a0,-(sp)
    d268:	|  |  |     |   move.l d1,-(sp)
    d26a:	|  |  |     |   move.l d0,-(sp)
    d26c:	|  |  |     |   jsr 6396 <forceWalkingPerson>
    d272:	|  |  |     |   lea 20(sp),sp
    d276:	|  |  |     |   tst.w d0
    d278:	|  |  |  /--|-- beq.s d2d2 <moveChr+0x15c>
    d27a:	|  |  |  |  |   moveq #3,d0
    d27c:	|  +--|--|--|-- bra.w d41c <moveChr+0x2a6>
			} else if (immediate) {
    d280:	|  |  |  |  \-> tst.w 4(sp)
    d284:	|  |  |  |  /-- beq.s d2a4 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
    d286:	|  |  |  |  |   movea.l 8(sp),a0
    d28a:	|  |  |  |  |   move.l 12(sp),d1
    d28e:	|  |  |  |  |   move.l 16(sp),d0
    d292:	|  |  |  |  |   move.l a0,-(sp)
    d294:	|  |  |  |  |   move.l d1,-(sp)
    d296:	|  |  |  |  |   move.l d0,-(sp)
    d298:	|  |  |  |  |   jsr 669e <jumpPerson>
    d29e:	|  |  |  |  |   lea 12(sp),sp
    d2a2:	|  |  |  +--|-- bra.s d2d2 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    d2a4:	|  |  |  |  \-> movea.l 8(sp),a0
    d2a8:	|  |  |  |      move.l 12(sp),d1
    d2ac:	|  |  |  |      move.l 16(sp),d0
    d2b0:	|  |  |  |      pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffc3914>
    d2b4:	|  |  |  |      move.l 44(sp),-(sp)
    d2b8:	|  |  |  |      move.l a0,-(sp)
    d2ba:	|  |  |  |      move.l d1,-(sp)
    d2bc:	|  |  |  |      move.l d0,-(sp)
    d2be:	|  |  |  |      jsr 686e <makeWalkingPerson>
    d2c4:	|  |  |  |      lea 20(sp),sp
    d2c8:	|  |  |  |      tst.w d0
    d2ca:	|  |  |  +----- beq.s d2d2 <moveChr+0x15c>
    d2cc:	|  |  |  |      moveq #3,d0
    d2ce:	|  +--|--|----- bra.w d41c <moveChr+0x2a6>
			}
			return BR_CONTINUE;
    d2d2:	|  |  |  \----> moveq #2,d0
    d2d4:	|  +--|-------- bra.w d41c <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d2d8:	|  |  \-------> movea.l 40(sp),a0
    d2dc:	|  |            move.l 24(a0),d0
    d2e0:	|  |            move.l d0,-(sp)
    d2e2:	|  |            pea 7 <_start+0x7>
    d2e6:	|  |            moveq #32,d0
    d2e8:	|  |            add.l sp,d0
    d2ea:	|  |            move.l d0,-(sp)
    d2ec:	|  |            jsr fff4 <getValueType>
    d2f2:	|  |            lea 12(sp),sp
    d2f6:	|  |            tst.w d0
    d2f8:	|  |        /-- bne.s d300 <moveChr+0x18a>
    d2fa:	|  |        |   moveq #1,d0
    d2fc:	|  +--------|-- bra.w d41c <moveChr+0x2a6>
			trimStack (&fun -> stack);
    d300:	|  |        \-> moveq #24,d0
    d302:	|  |            add.l 40(sp),d0
    d306:	|  |            move.l d0,-(sp)
    d308:	|  |            jsr 10978 <trimStack>
    d30e:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d310:	|  |            movea.l 40(sp),a0
    d314:	|  |            move.l 24(a0),d0
    d318:	|  |            move.l d0,-(sp)
    d31a:	|  |            pea 7 <_start+0x7>
    d31e:	|  |            lea 28(sp),a0
    d322:	|  |            move.l a0,-(sp)
    d324:	|  |            jsr fff4 <getValueType>
    d32a:	|  |            lea 12(sp),sp
    d32e:	|  |            tst.w d0
    d330:	|  |        /-- bne.s d338 <moveChr+0x1c2>
    d332:	|  |        |   moveq #1,d0
    d334:	|  +--------|-- bra.w d41c <moveChr+0x2a6>
			trimStack (&fun -> stack);
    d338:	|  |        \-> moveq #24,d0
    d33a:	|  |            add.l 40(sp),d0
    d33e:	|  |            move.l d0,-(sp)
    d340:	|  |            jsr 10978 <trimStack>
    d346:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
    d348:	|  |            move.l 24(sp),d0
    d34c:	|  |            move.l d0,-(sp)
    d34e:	|  |            jsr 10abe <getRegionForObject>
    d354:	|  |            addq.l #4,sp
    d356:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
    d35a:	|  |        /-- bne.s d362 <moveChr+0x1ec>
    d35c:	|  |        |   moveq #2,d0
    d35e:	|  +--------|-- bra.w d41c <moveChr+0x2a6>

			if (force)
    d362:	|  |        \-> tst.w 6(sp)
    d366:	|  |        /-- beq.s d3a2 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
    d368:	|  |        |   movea.l 28(sp),a0
    d36c:	|  |        |   move.l 24(a0),d2
    d370:	|  |        |   movea.l 20(sp),a1
    d374:	|  |        |   movea.l 28(sp),a0
    d378:	|  |        |   move.l 20(a0),d1
    d37c:	|  |        |   movea.l 28(sp),a0
    d380:	|  |        |   move.l 16(a0),d0
    d384:	|  |        |   move.l d2,-(sp)
    d386:	|  |        |   move.l 44(sp),-(sp)
    d38a:	|  |        |   move.l a1,-(sp)
    d38c:	|  |        |   move.l d1,-(sp)
    d38e:	|  |        |   move.l d0,-(sp)
    d390:	|  |        |   jsr 6396 <forceWalkingPerson>
    d396:	|  |        |   lea 20(sp),sp
    d39a:	|  |        |   tst.w d0
    d39c:	|  |     /--|-- beq.s d408 <moveChr+0x292>
    d39e:	|  |     |  |   moveq #3,d0
    d3a0:	|  +-----|--|-- bra.s d41c <moveChr+0x2a6>
			}
			else if (immediate)
    d3a2:	|  |     |  \-> tst.w 4(sp)
    d3a6:	|  |     |  /-- beq.s d3ce <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
    d3a8:	|  |     |  |   movea.l 20(sp),a1
    d3ac:	|  |     |  |   movea.l 28(sp),a0
    d3b0:	|  |     |  |   move.l 20(a0),d1
    d3b4:	|  |     |  |   movea.l 28(sp),a0
    d3b8:	|  |     |  |   move.l 16(a0),d0
    d3bc:	|  |     |  |   move.l a1,-(sp)
    d3be:	|  |     |  |   move.l d1,-(sp)
    d3c0:	|  |     |  |   move.l d0,-(sp)
    d3c2:	|  |     |  |   jsr 669e <jumpPerson>
    d3c8:	|  |     |  |   lea 12(sp),sp
    d3cc:	|  |     +--|-- bra.s d408 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
    d3ce:	|  |     |  \-> movea.l 28(sp),a0
    d3d2:	|  |     |      move.l 24(a0),d2
    d3d6:	|  |     |      movea.l 20(sp),a1
    d3da:	|  |     |      movea.l 28(sp),a0
    d3de:	|  |     |      move.l 20(a0),d1
    d3e2:	|  |     |      movea.l 28(sp),a0
    d3e6:	|  |     |      move.l 16(a0),d0
    d3ea:	|  |     |      move.l d2,-(sp)
    d3ec:	|  |     |      move.l 44(sp),-(sp)
    d3f0:	|  |     |      move.l a1,-(sp)
    d3f2:	|  |     |      move.l d1,-(sp)
    d3f4:	|  |     |      move.l d0,-(sp)
    d3f6:	|  |     |      jsr 686e <makeWalkingPerson>
    d3fc:	|  |     |      lea 20(sp),sp
    d400:	|  |     |      tst.w d0
    d402:	|  |     +----- beq.s d408 <moveChr+0x292>
    d404:	|  |     |      moveq #3,d0
    d406:	|  +-----|----- bra.s d41c <moveChr+0x2a6>
			}
			return BR_CONTINUE;
    d408:	|  |     \----> moveq #2,d0
    d40a:	|  +----------- bra.s d41c <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
    d40c:	\--|----------> pea 15a06 <zbuffer.c.4facf542+0x34e>
    d412:	   |            jsr 12048 <KPrintF>
    d418:	   |            addq.l #4,sp
			return BR_ERROR;
    d41a:	   |            moveq #1,d0
	}
}
    d41c:	   \----------> move.l (sp)+,d2
    d41e:	                lea 28(sp),sp
    d422:	                rts

0000d424 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
    d424:	clr.l -(sp)
    d426:	clr.l -(sp)
    d428:	move.l 16(sp),-(sp)
    d42c:	move.l 16(sp),-(sp)
    d430:	jsr d176 <moveChr>
    d436:	lea 16(sp),sp
}
    d43a:	rts

0000d43c <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
    d43c:	clr.l -(sp)
    d43e:	pea 1 <_start+0x1>
    d442:	move.l 16(sp),-(sp)
    d446:	move.l 16(sp),-(sp)
    d44a:	jsr d176 <moveChr>
    d450:	lea 16(sp),sp
}
    d454:	rts

0000d456 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
    d456:	pea 1 <_start+0x1>
    d45a:	clr.l -(sp)
    d45c:	move.l 16(sp),-(sp)
    d460:	move.l 16(sp),-(sp)
    d464:	jsr d176 <moveChr>
    d46a:	lea 16(sp),sp
}
    d46e:	rts

0000d470 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
    d470:	jsr 471c <clearStatusBar>
	return BR_CONTINUE;
    d476:	moveq #2,d0
}
    d478:	rts

0000d47a <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
    d47a:	jsr 47c4 <killLastStatus>
	return BR_CONTINUE;
    d480:	moveq #2,d0
}
    d482:	rts

0000d484 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
    d484:	jsr 46b2 <addStatusBar>
	return BR_CONTINUE;
    d48a:	moveq #2,d0
}
    d48c:	rts

0000d48e <builtIn_statusText>:

builtIn(statusText)
{
    d48e:	       subq.l #8,sp
    d490:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    d492:	       movea.l 20(sp),a0
    d496:	       move.l 24(a0),d0
    d49a:	       move.l d0,-(sp)
    d49c:	       jsr 105ca <getTextFromAnyVar>
    d4a2:	       addq.l #4,sp
    d4a4:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
    d4a8:	   /-- bne.s d4ae <builtIn_statusText+0x20>
    d4aa:	   |   moveq #1,d0
    d4ac:	/--|-- bra.s d4e2 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
    d4ae:	|  \-> moveq #24,d0
    d4b0:	|      add.l 20(sp),d0
    d4b4:	|      move.l d0,-(sp)
    d4b6:	|      jsr 10978 <trimStack>
    d4bc:	|      addq.l #4,sp
	setStatusBar(newText);
    d4be:	|      move.l 8(sp),-(sp)
    d4c2:	|      jsr 4a44 <setStatusBar>
    d4c8:	|      addq.l #4,sp
	FreeVec(newText);
    d4ca:	|      move.l 8(sp),4(sp)
    d4d0:	|      move.l 17b28 <SysBase>,d0
    d4d6:	|      movea.l d0,a6
    d4d8:	|      movea.l 4(sp),a1
    d4dc:	|      jsr -690(a6)
	return BR_CONTINUE;
    d4e0:	|      moveq #2,d0
}
    d4e2:	\----> movea.l (sp)+,a6
    d4e4:	       addq.l #8,sp
    d4e6:	       rts

0000d4e8 <builtIn_lightStatus>:

builtIn(lightStatus)
{
    d4e8:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d4ea:	       movea.l 12(sp),a0
    d4ee:	       move.l 24(a0),d0
    d4f2:	       move.l d0,-(sp)
    d4f4:	       pea 1 <_start+0x1>
    d4f8:	       move.l sp,d0
    d4fa:	       addq.l #8,d0
    d4fc:	       move.l d0,-(sp)
    d4fe:	       jsr fff4 <getValueType>
    d504:	       lea 12(sp),sp
    d508:	       tst.w d0
    d50a:	   /-- bne.s d510 <builtIn_lightStatus+0x28>
    d50c:	   |   moveq #1,d0
    d50e:	/--|-- bra.s d52e <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
    d510:	|  \-> moveq #24,d0
    d512:	|      add.l 12(sp),d0
    d516:	|      move.l d0,-(sp)
    d518:	|      jsr 10978 <trimStack>
    d51e:	|      addq.l #4,sp
	setLitStatus (val);
    d520:	|      move.l (sp),d0
    d522:	|      move.l d0,-(sp)
    d524:	|      jsr 4a34 <setLitStatus>
    d52a:	|      addq.l #4,sp
	return BR_CONTINUE;
    d52c:	|      moveq #2,d0
}
    d52e:	\----> addq.l #4,sp
    d530:	       rts

0000d532 <builtIn_positionStatus>:

builtIn(positionStatus)
{
    d532:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d534:	       movea.l 16(sp),a0
    d538:	       move.l 24(a0),d0
    d53c:	       move.l d0,-(sp)
    d53e:	       pea 1 <_start+0x1>
    d542:	       move.l sp,d0
    d544:	       addq.l #8,d0
    d546:	       move.l d0,-(sp)
    d548:	       jsr fff4 <getValueType>
    d54e:	       lea 12(sp),sp
    d552:	       tst.w d0
    d554:	   /-- bne.s d55a <builtIn_positionStatus+0x28>
    d556:	   |   moveq #1,d0
    d558:	/--|-- bra.s d5b4 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
    d55a:	|  \-> moveq #24,d0
    d55c:	|      add.l 16(sp),d0
    d560:	|      move.l d0,-(sp)
    d562:	|      jsr 10978 <trimStack>
    d568:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d56a:	|      movea.l 16(sp),a0
    d56e:	|      move.l 24(a0),d0
    d572:	|      move.l d0,-(sp)
    d574:	|      pea 1 <_start+0x1>
    d578:	|      moveq #12,d0
    d57a:	|      add.l sp,d0
    d57c:	|      move.l d0,-(sp)
    d57e:	|      jsr fff4 <getValueType>
    d584:	|      lea 12(sp),sp
    d588:	|      tst.w d0
    d58a:	|  /-- bne.s d590 <builtIn_positionStatus+0x5e>
    d58c:	|  |   moveq #1,d0
    d58e:	+--|-- bra.s d5b4 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
    d590:	|  \-> moveq #24,d0
    d592:	|      add.l 16(sp),d0
    d596:	|      move.l d0,-(sp)
    d598:	|      jsr 10978 <trimStack>
    d59e:	|      addq.l #4,sp
	positionStatus (x, y);
    d5a0:	|      move.l (sp),d1
    d5a2:	|      move.l 4(sp),d0
    d5a6:	|      move.l d1,-(sp)
    d5a8:	|      move.l d0,-(sp)
    d5aa:	|      jsr 4826 <positionStatus>
    d5b0:	|      addq.l #8,sp
	return BR_CONTINUE;
    d5b2:	|      moveq #2,d0
}
    d5b4:	\----> addq.l #8,sp
    d5b6:	       rts

0000d5b8 <builtIn_alignStatus>:

builtIn(alignStatus)
{
    d5b8:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d5ba:	       movea.l 12(sp),a0
    d5be:	       move.l 24(a0),d0
    d5c2:	       move.l d0,-(sp)
    d5c4:	       pea 1 <_start+0x1>
    d5c8:	       move.l sp,d0
    d5ca:	       addq.l #8,d0
    d5cc:	       move.l d0,-(sp)
    d5ce:	       jsr fff4 <getValueType>
    d5d4:	       lea 12(sp),sp
    d5d8:	       tst.w d0
    d5da:	   /-- bne.s d5e0 <builtIn_alignStatus+0x28>
    d5dc:	   |   moveq #1,d0
    d5de:	/--|-- bra.s d600 <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
    d5e0:	|  \-> moveq #24,d0
    d5e2:	|      add.l 12(sp),d0
    d5e6:	|      move.l d0,-(sp)
    d5e8:	|      jsr 10978 <trimStack>
    d5ee:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
    d5f0:	|      move.l (sp),d0
    d5f2:	|      movea.l 1601a <nowStatus>,a0
    d5f8:	|      move.l d0,d0
    d5fa:	|      move.w d0,4(a0)
	return BR_CONTINUE;
    d5fe:	|      moveq #2,d0
}
    d600:	\----> addq.l #4,sp
    d602:	       rts

0000d604 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
    d604:	             tst.l 4(sp)
    d608:	      /----- beq.s d614 <getFuncNumForCallback+0x10>
    d60a:	      |      moveq #1,d0
    d60c:	      |      cmp.l 4(sp),d0
    d610:	      |  /-- beq.s d61a <getFuncNumForCallback+0x16>
    d612:	   /--|--|-- bra.s d650 <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
    d614:	   |  \--|-> clr.l 12(sp)
			break;
    d618:	/--|-----|-- bra.s d662 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
    d61a:	|  |     \-> movea.l 8(sp),a0
    d61e:	|  |         move.l 24(a0),d0
    d622:	|  |         move.l d0,-(sp)
    d624:	|  |         pea 2 <_start+0x2>
    d628:	|  |         move.l 20(sp),-(sp)
    d62c:	|  |         jsr fff4 <getValueType>
    d632:	|  |         lea 12(sp),sp
    d636:	|  |         tst.w d0
    d638:	|  |     /-- bne.s d63e <getFuncNumForCallback+0x3a>
    d63a:	|  |     |   clr.w d0
    d63c:	|  |  /--|-- bra.s d664 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
    d63e:	|  |  |  \-> moveq #24,d0
    d640:	|  |  |      add.l 8(sp),d0
    d644:	|  |  |      move.l d0,-(sp)
    d646:	|  |  |      jsr 10978 <trimStack>
    d64c:	|  |  |      addq.l #4,sp
			break;
    d64e:	+--|--|----- bra.s d662 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
    d650:	|  \--|----> pea 15a3c <zbuffer.c.4facf542+0x384>
    d656:	|     |      jsr 12048 <KPrintF>
    d65c:	|     |      addq.l #4,sp
			return FALSE;
    d65e:	|     |      clr.w d0
    d660:	|     +----- bra.s d664 <getFuncNumForCallback+0x60>
	}
	return TRUE;
    d662:	\-----|----> moveq #1,d0
}
    d664:	      \----> rts

0000d666 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
    d666:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d668:	       move.l sp,d0
    d66a:	       move.l d0,-(sp)
    d66c:	       move.l 16(sp),-(sp)
    d670:	       move.l 16(sp),-(sp)
    d674:	       jsr d604 <getFuncNumForCallback>
    d67a:	       lea 12(sp),sp
    d67e:	       tst.w d0
    d680:	/----- beq.s d690 <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
    d682:	|      movea.l 16004 <currentEvents>,a0
    d688:	|      move.l (sp),d0
    d68a:	|      move.l d0,(a0)
		return BR_CONTINUE;
    d68c:	|      moveq #2,d0
    d68e:	|  /-- bra.s d692 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
    d690:	\--|-> moveq #1,d0
}
    d692:	   \-> addq.l #4,sp
    d694:	       rts

0000d696 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
    d696:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d698:	       move.l sp,d0
    d69a:	       move.l d0,-(sp)
    d69c:	       move.l 16(sp),-(sp)
    d6a0:	       move.l 16(sp),-(sp)
    d6a4:	       jsr d604 <getFuncNumForCallback>
    d6aa:	       lea 12(sp),sp
    d6ae:	       tst.w d0
    d6b0:	/----- beq.s d6c2 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
    d6b2:	|      movea.l 16004 <currentEvents>,a0
    d6b8:	|      move.l (sp),d0
    d6ba:	|      move.l d0,4(a0)
		return BR_CONTINUE;
    d6be:	|      moveq #2,d0
    d6c0:	|  /-- bra.s d6c4 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
    d6c2:	\--|-> moveq #1,d0
}
    d6c4:	   \-> addq.l #4,sp
    d6c6:	       rts

0000d6c8 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
    d6c8:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d6ca:	       move.l sp,d0
    d6cc:	       move.l d0,-(sp)
    d6ce:	       move.l 16(sp),-(sp)
    d6d2:	       move.l 16(sp),-(sp)
    d6d6:	       jsr d604 <getFuncNumForCallback>
    d6dc:	       lea 12(sp),sp
    d6e0:	       tst.w d0
    d6e2:	/----- beq.s d6f4 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
    d6e4:	|      movea.l 16004 <currentEvents>,a0
    d6ea:	|      move.l (sp),d0
    d6ec:	|      move.l d0,8(a0)
		return BR_CONTINUE;
    d6f0:	|      moveq #2,d0
    d6f2:	|  /-- bra.s d6f6 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
    d6f4:	\--|-> moveq #1,d0
}
    d6f6:	   \-> addq.l #4,sp
    d6f8:	       rts

0000d6fa <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
    d6fa:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d6fc:	       move.l sp,d0
    d6fe:	       move.l d0,-(sp)
    d700:	       move.l 16(sp),-(sp)
    d704:	       move.l 16(sp),-(sp)
    d708:	       jsr d604 <getFuncNumForCallback>
    d70e:	       lea 12(sp),sp
    d712:	       tst.w d0
    d714:	/----- beq.s d726 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
    d716:	|      movea.l 16004 <currentEvents>,a0
    d71c:	|      move.l (sp),d0
    d71e:	|      move.l d0,12(a0)
		return BR_CONTINUE;
    d722:	|      moveq #2,d0
    d724:	|  /-- bra.s d728 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
    d726:	\--|-> moveq #1,d0
}
    d728:	   \-> addq.l #4,sp
    d72a:	       rts

0000d72c <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
    d72c:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d72e:	       move.l sp,d0
    d730:	       move.l d0,-(sp)
    d732:	       move.l 16(sp),-(sp)
    d736:	       move.l 16(sp),-(sp)
    d73a:	       jsr d604 <getFuncNumForCallback>
    d740:	       lea 12(sp),sp
    d744:	       tst.w d0
    d746:	/----- beq.s d758 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
    d748:	|      movea.l 16004 <currentEvents>,a0
    d74e:	|      move.l (sp),d0
    d750:	|      move.l d0,20(a0)
		return BR_CONTINUE;
    d754:	|      moveq #2,d0
    d756:	|  /-- bra.s d75a <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
    d758:	\--|-> moveq #1,d0
}
    d75a:	   \-> addq.l #4,sp
    d75c:	       rts

0000d75e <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
    d75e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d760:	       move.l sp,d0
    d762:	       move.l d0,-(sp)
    d764:	       move.l 16(sp),-(sp)
    d768:	       move.l 16(sp),-(sp)
    d76c:	       jsr d604 <getFuncNumForCallback>
    d772:	       lea 12(sp),sp
    d776:	       tst.w d0
    d778:	/----- beq.s d78a <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
    d77a:	|      movea.l 16004 <currentEvents>,a0
    d780:	|      move.l (sp),d0
    d782:	|      move.l d0,16(a0)
		return BR_CONTINUE;
    d786:	|      moveq #2,d0
    d788:	|  /-- bra.s d78c <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
    d78a:	\--|-> moveq #1,d0
}
    d78c:	   \-> addq.l #4,sp
    d78e:	       rts

0000d790 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
    d790:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d792:	       move.l sp,d0
    d794:	       move.l d0,-(sp)
    d796:	       move.l 16(sp),-(sp)
    d79a:	       move.l 16(sp),-(sp)
    d79e:	       jsr d604 <getFuncNumForCallback>
    d7a4:	       lea 12(sp),sp
    d7a8:	       tst.w d0
    d7aa:	/----- beq.s d7bc <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
    d7ac:	|      movea.l 16004 <currentEvents>,a0
    d7b2:	|      move.l (sp),d0
    d7b4:	|      move.l d0,24(a0)
		return BR_CONTINUE;
    d7b8:	|      moveq #2,d0
    d7ba:	|  /-- bra.s d7be <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
    d7bc:	\--|-> moveq #1,d0
}
    d7be:	   \-> addq.l #4,sp
    d7c0:	       rts

0000d7c2 <builtIn_spawnSub>:

builtIn (spawnSub)
{
    d7c2:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d7c4:	          move.l sp,d0
    d7c6:	          move.l d0,-(sp)
    d7c8:	          move.l 16(sp),-(sp)
    d7cc:	          move.l 16(sp),-(sp)
    d7d0:	          jsr d604 <getFuncNumForCallback>
    d7d6:	          lea 12(sp),sp
    d7da:	          tst.w d0
    d7dc:	/-------- beq.s d808 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
    d7de:	|         move.l 17af8 <noStack>,d1
    d7e4:	|         move.l (sp),d0
    d7e6:	|         pea 1 <_start+0x1>
    d7ea:	|         move.l d1,-(sp)
    d7ec:	|         clr.l -(sp)
    d7ee:	|         clr.l -(sp)
    d7f0:	|         move.l d0,-(sp)
    d7f2:	|         jsr 3c16 <startNewFunctionNum>
    d7f8:	|         lea 20(sp),sp
    d7fc:	|         tst.l d0
    d7fe:	|     /-- bne.s d804 <builtIn_spawnSub+0x42>
    d800:	|     |   moveq #1,d0
    d802:	|  /--|-- bra.s d80a <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
    d804:	|  |  \-> moveq #2,d0
    d806:	|  +----- bra.s d80a <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
    d808:	\--|----> moveq #1,d0
}
    d80a:	   \----> addq.l #4,sp
    d80c:	          rts

0000d80e <builtIn_cancelSub>:

builtIn (cancelSub)
{
    d80e:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d810:	          move.l sp,d0
    d812:	          addq.l #4,d0
    d814:	          move.l d0,-(sp)
    d816:	          move.l 20(sp),-(sp)
    d81a:	          move.l 20(sp),-(sp)
    d81e:	          jsr d604 <getFuncNumForCallback>
    d824:	          lea 12(sp),sp
    d828:	          tst.w d0
    d82a:	/-------- beq.s d860 <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
    d82c:	|         move.l 4(sp),d1
    d830:	|         move.l sp,d0
    d832:	|         addq.l #2,d0
    d834:	|         move.l d0,-(sp)
    d836:	|         move.l 20(sp),-(sp)
    d83a:	|         move.l d1,-(sp)
    d83c:	|         jsr 1be8 <cancelAFunction>
    d842:	|         lea 12(sp),sp
		if (killedMyself) {
    d846:	|         move.w 2(sp),d0
    d84a:	|  /----- beq.s d85c <builtIn_cancelSub+0x4e>
			abortFunction (fun);
    d84c:	|  |      move.l 16(sp),-(sp)
    d850:	|  |      jsr 1b06 <abortFunction>
    d856:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
    d858:	|  |      moveq #5,d0
    d85a:	|  |  /-- bra.s d862 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
    d85c:	|  \--|-> moveq #2,d0
    d85e:	|     +-- bra.s d862 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
    d860:	\-----|-> moveq #1,d0
}
    d862:	      \-> addq.l #8,sp
    d864:	          rts

0000d866 <builtIn_stringWidth>:

builtIn(stringWidth)
{
    d866:	       subq.l #8,sp
    d868:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
    d86a:	       movea.l 20(sp),a0
    d86e:	       move.l 24(a0),d0
    d872:	       move.l d0,-(sp)
    d874:	       jsr 105ca <getTextFromAnyVar>
    d87a:	       addq.l #4,sp
    d87c:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
    d880:	   /-- bne.s d886 <builtIn_stringWidth+0x20>
    d882:	   |   moveq #1,d0
    d884:	/--|-- bra.s d8d4 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
    d886:	|  \-> moveq #24,d0
    d888:	|      add.l 20(sp),d0
    d88c:	|      move.l d0,-(sp)
    d88e:	|      jsr 10978 <trimStack>
    d894:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
    d896:	|      move.l 8(sp),-(sp)
    d89a:	|      jsr 109d2 <stringWidth>
    d8a0:	|      addq.l #4,sp
    d8a2:	|      move.l d0,d1
    d8a4:	|      moveq #28,d0
    d8a6:	|      add.l 20(sp),d0
    d8aa:	|      move.l d1,-(sp)
    d8ac:	|      pea 1 <_start+0x1>
    d8b0:	|      move.l d0,-(sp)
    d8b2:	|      jsr 108e6 <setVariable>
    d8b8:	|      lea 12(sp),sp
	FreeVec(theText);
    d8bc:	|      move.l 8(sp),4(sp)
    d8c2:	|      move.l 17b28 <SysBase>,d0
    d8c8:	|      movea.l d0,a6
    d8ca:	|      movea.l 4(sp),a1
    d8ce:	|      jsr -690(a6)
	return BR_CONTINUE;
    d8d2:	|      moveq #2,d0
}
    d8d4:	\----> movea.l (sp)+,a6
    d8d6:	       addq.l #8,sp
    d8d8:	       rts

0000d8da <builtIn_hardScroll>:

builtIn(hardScroll)
{
    d8da:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d8dc:	       movea.l 12(sp),a0
    d8e0:	       move.l 24(a0),d0
    d8e4:	       move.l d0,-(sp)
    d8e6:	       pea 1 <_start+0x1>
    d8ea:	       move.l sp,d0
    d8ec:	       addq.l #8,d0
    d8ee:	       move.l d0,-(sp)
    d8f0:	       jsr fff4 <getValueType>
    d8f6:	       lea 12(sp),sp
    d8fa:	       tst.w d0
    d8fc:	   /-- bne.s d902 <builtIn_hardScroll+0x28>
    d8fe:	   |   moveq #1,d0
    d900:	/--|-- bra.s d920 <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
    d902:	|  \-> moveq #24,d0
    d904:	|      add.l 12(sp),d0
    d908:	|      move.l d0,-(sp)
    d90a:	|      jsr 10978 <trimStack>
    d910:	|      addq.l #4,sp
	hardScroll (v);
    d912:	|      move.l (sp),d0
    d914:	|      move.l d0,-(sp)
    d916:	|      jsr 8cfc <hardScroll>
    d91c:	|      addq.l #4,sp
	return BR_CONTINUE;
    d91e:	|      moveq #2,d0
}
    d920:	\----> addq.l #4,sp
    d922:	       rts

0000d924 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
    d924:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d926:	       movea.l 12(sp),a0
    d92a:	       move.l 24(a0),d0
    d92e:	       move.l d0,-(sp)
    d930:	       pea 7 <_start+0x7>
    d934:	       move.l sp,d0
    d936:	       addq.l #8,d0
    d938:	       move.l d0,-(sp)
    d93a:	       jsr fff4 <getValueType>
    d940:	       lea 12(sp),sp
    d944:	       tst.w d0
    d946:	   /-- bne.s d94c <builtIn_isScreenRegion+0x28>
    d948:	   |   moveq #1,d0
    d94a:	/--|-- bra.s d98c <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
    d94c:	|  \-> moveq #24,d0
    d94e:	|      add.l 12(sp),d0
    d952:	|      move.l d0,-(sp)
    d954:	|      jsr 10978 <trimStack>
    d95a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
    d95c:	|      move.l (sp),d0
    d95e:	|      move.l d0,-(sp)
    d960:	|      jsr 10abe <getRegionForObject>
    d966:	|      addq.l #4,sp
    d968:	|      tst.l d0
    d96a:	|      sne d0
    d96c:	|      neg.b d0
    d96e:	|      moveq #0,d1
    d970:	|      move.b d0,d1
    d972:	|      moveq #28,d0
    d974:	|      add.l 12(sp),d0
    d978:	|      move.l d1,-(sp)
    d97a:	|      pea 1 <_start+0x1>
    d97e:	|      move.l d0,-(sp)
    d980:	|      jsr 108e6 <setVariable>
    d986:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d98a:	|      moveq #2,d0
}
    d98c:	\----> addq.l #4,sp
    d98e:	       rts

0000d990 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
    d990:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d992:	       movea.l 12(sp),a0
    d996:	       move.l 24(a0),d0
    d99a:	       move.l d0,-(sp)
    d99c:	       pea 1 <_start+0x1>
    d9a0:	       move.l sp,d0
    d9a2:	       addq.l #8,d0
    d9a4:	       move.l d0,-(sp)
    d9a6:	       jsr fff4 <getValueType>
    d9ac:	       lea 12(sp),sp
    d9b0:	       tst.w d0
    d9b2:	   /-- bne.s d9b8 <builtIn_setSpeechSpeed+0x28>
    d9b4:	   |   moveq #1,d0
    d9b6:	/--|-- bra.s da06 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
    d9b8:	|  \-> moveq #24,d0
    d9ba:	|      add.l 12(sp),d0
    d9be:	|      move.l d0,-(sp)
    d9c0:	|      jsr 10978 <trimStack>
    d9c6:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
    d9c8:	|      move.l (sp),d0
    d9ca:	|      move.l d0,-(sp)
    d9cc:	|      jsr 124a0 <__floatsisf>
    d9d2:	|      addq.l #4,sp
    d9d4:	|      move.l #1008981770,-(sp)
    d9da:	|      move.l d0,-(sp)
    d9dc:	|      jsr 12552 <__mulsf3>
    d9e2:	|      addq.l #8,sp
    d9e4:	|      move.l d0,1601e <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
    d9ea:	|      moveq #28,d0
    d9ec:	|      add.l 12(sp),d0
    d9f0:	|      pea 1 <_start+0x1>
    d9f4:	|      pea 1 <_start+0x1>
    d9f8:	|      move.l d0,-(sp)
    d9fa:	|      jsr 108e6 <setVariable>
    da00:	|      lea 12(sp),sp
	return BR_CONTINUE;
    da04:	|      moveq #2,d0
}
    da06:	\----> addq.l #4,sp
    da08:	       rts

0000da0a <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
    da0a:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    da0c:	       movea.l 12(sp),a0
    da10:	       move.l 24(a0),d0
    da14:	       move.l d0,-(sp)
    da16:	       pea 1 <_start+0x1>
    da1a:	       move.l sp,d0
    da1c:	       addq.l #8,d0
    da1e:	       move.l d0,-(sp)
    da20:	       jsr fff4 <getValueType>
    da26:	       lea 12(sp),sp
    da2a:	       tst.w d0
    da2c:	   /-- bne.s da32 <builtIn_setFontSpacing+0x28>
    da2e:	   |   moveq #1,d0
    da30:	/--|-- bra.s da68 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
    da32:	|  \-> move.l (sp),d0
    da34:	|      move.l d0,d0
    da36:	|      move.w d0,16598 <fontSpace>
	trimStack (&fun -> stack);
    da3c:	|      moveq #24,d0
    da3e:	|      add.l 12(sp),d0
    da42:	|      move.l d0,-(sp)
    da44:	|      jsr 10978 <trimStack>
    da4a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    da4c:	|      moveq #28,d0
    da4e:	|      add.l 12(sp),d0
    da52:	|      pea 1 <_start+0x1>
    da56:	|      pea 1 <_start+0x1>
    da5a:	|      move.l d0,-(sp)
    da5c:	|      jsr 108e6 <setVariable>
    da62:	|      lea 12(sp),sp
	return BR_CONTINUE;
    da66:	|      moveq #2,d0
}
    da68:	\----> addq.l #4,sp
    da6a:	       rts

0000da6c <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
    da6c:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    da6e:	          movea.l 12(sp),a0
    da72:	          move.l 24(a0),d0
    da76:	          move.l d0,-(sp)
    da78:	          pea 1 <_start+0x1>
    da7c:	          move.l sp,d0
    da7e:	          addq.l #8,d0
    da80:	          move.l d0,-(sp)
    da82:	          jsr fff4 <getValueType>
    da88:	          lea 12(sp),sp
    da8c:	          tst.w d0
    da8e:	      /-- bne.s da94 <builtIn_transitionLevel+0x28>
    da90:	      |   moveq #1,d0
    da92:	/-----|-- bra.s dae8 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
    da94:	|     \-> moveq #24,d0
    da96:	|         add.l 12(sp),d0
    da9a:	|         move.l d0,-(sp)
    da9c:	|         jsr 10978 <trimStack>
    daa2:	|         addq.l #4,sp

	if (number < 0)
    daa4:	|         move.l (sp),d0
    daa6:	|     /-- bpl.s dab0 <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
    daa8:	|     |   clr.b 16002 <brightnessLevel>
    daae:	|  /--|-- bra.s dacc <builtIn_transitionLevel+0x60>
	else if (number > 255)
    dab0:	|  |  \-> move.l (sp),d0
    dab2:	|  |      cmpi.l #255,d0
    dab8:	|  |  /-- ble.s dac2 <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
    daba:	|  |  |   st 16002 <brightnessLevel>
    dac0:	|  +--|-- bra.s dacc <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
    dac2:	|  |  \-> move.l (sp),d0
    dac4:	|  |      move.l d0,d0
    dac6:	|  |      move.b d0,16002 <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
    dacc:	|  \----> moveq #28,d0
    dace:	|         add.l 12(sp),d0
    dad2:	|         pea 1 <_start+0x1>
    dad6:	|         pea 1 <_start+0x1>
    dada:	|         move.l d0,-(sp)
    dadc:	|         jsr 108e6 <setVariable>
    dae2:	|         lea 12(sp),sp
	return BR_CONTINUE;
    dae6:	|         moveq #2,d0
}
    dae8:	\-------> addq.l #4,sp
    daea:	          rts

0000daec <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
    daec:	movea.l 8(sp),a0
    daf0:	move.l 24(a0),d0
    daf4:	move.l d0,-(sp)
    daf6:	jsr 10534 <getBoolean>
    dafc:	addq.l #4,sp
    dafe:	move.w d0,17acc <captureAllKeys>
	trimStack (&fun -> stack);
    db04:	moveq #24,d0
    db06:	add.l 8(sp),d0
    db0a:	move.l d0,-(sp)
    db0c:	jsr 10978 <trimStack>
    db12:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
    db14:	move.w 17acc <captureAllKeys>,d0
    db1a:	movea.w d0,a0
    db1c:	moveq #28,d0
    db1e:	add.l 8(sp),d0
    db22:	move.l a0,-(sp)
    db24:	pea 1 <_start+0x1>
    db28:	move.l d0,-(sp)
    db2a:	jsr 108e6 <setVariable>
    db30:	lea 12(sp),sp
	return BR_CONTINUE;
    db34:	moveq #2,d0
}
    db36:	rts

0000db38 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
    db38:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    db3c:	       movea.l 20(sp),a0
    db40:	       move.l 24(a0),d0
    db44:	       move.l d0,-(sp)
    db46:	       pea 1 <_start+0x1>
    db4a:	       moveq #12,d0
    db4c:	       add.l sp,d0
    db4e:	       move.l d0,-(sp)
    db50:	       jsr fff4 <getValueType>
    db56:	       lea 12(sp),sp
    db5a:	       tst.w d0
    db5c:	   /-- bne.s db64 <builtIn_spinCharacter+0x2c>
    db5e:	   |   moveq #1,d0
    db60:	/--|-- bra.w dc14 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
    db64:	|  \-> moveq #24,d0
    db66:	|      add.l 20(sp),d0
    db6a:	|      move.l d0,-(sp)
    db6c:	|      jsr 10978 <trimStack>
    db72:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    db74:	|      movea.l 20(sp),a0
    db78:	|      move.l 24(a0),d0
    db7c:	|      move.l d0,-(sp)
    db7e:	|      pea 7 <_start+0x7>
    db82:	|      lea 8(sp),a0
    db86:	|      move.l a0,-(sp)
    db88:	|      jsr fff4 <getValueType>
    db8e:	|      lea 12(sp),sp
    db92:	|      tst.w d0
    db94:	|  /-- bne.s db9a <builtIn_spinCharacter+0x62>
    db96:	|  |   moveq #1,d0
    db98:	+--|-- bra.s dc14 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
    db9a:	|  \-> moveq #24,d0
    db9c:	|      add.l 20(sp),d0
    dba0:	|      move.l d0,-(sp)
    dba2:	|      jsr 10978 <trimStack>
    dba8:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    dbaa:	|      move.l (sp),d0
    dbac:	|      move.l d0,-(sp)
    dbae:	|      jsr 6344 <findPerson>
    dbb4:	|      addq.l #4,sp
    dbb6:	|      move.l d0,8(sp)
	if (thisPerson) {
    dbba:	|  /-- beq.s dbfa <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
    dbbc:	|  |   move.l 4(sp),d0
    dbc0:	|  |   movea.l 8(sp),a0
    dbc4:	|  |   move.l d0,84(a0)
		thisPerson -> spinning = TRUE;
    dbc8:	|  |   movea.l 8(sp),a0
    dbcc:	|  |   move.w #1,54(a0)
		thisPerson -> continueAfterWalking = fun;
    dbd2:	|  |   movea.l 8(sp),a0
    dbd6:	|  |   move.l 20(sp),56(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    dbdc:	|  |   moveq #28,d0
    dbde:	|  |   add.l 20(sp),d0
    dbe2:	|  |   pea 1 <_start+0x1>
    dbe6:	|  |   pea 1 <_start+0x1>
    dbea:	|  |   move.l d0,-(sp)
    dbec:	|  |   jsr 108e6 <setVariable>
    dbf2:	|  |   lea 12(sp),sp
		return BR_PAUSE;
    dbf6:	|  |   moveq #3,d0
    dbf8:	+--|-- bra.s dc14 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    dbfa:	|  \-> moveq #28,d0
    dbfc:	|      add.l 20(sp),d0
    dc00:	|      clr.l -(sp)
    dc02:	|      pea 1 <_start+0x1>
    dc06:	|      move.l d0,-(sp)
    dc08:	|      jsr 108e6 <setVariable>
    dc0e:	|      lea 12(sp),sp
		return BR_CONTINUE;
    dc12:	|      moveq #2,d0
	}
}
    dc14:	\----> lea 12(sp),sp
    dc18:	       rts

0000dc1a <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
    dc1a:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dc1c:	          movea.l 16(sp),a0
    dc20:	          move.l 24(a0),d0
    dc24:	          move.l d0,-(sp)
    dc26:	          pea 7 <_start+0x7>
    dc2a:	          move.l sp,d0
    dc2c:	          addq.l #8,d0
    dc2e:	          move.l d0,-(sp)
    dc30:	          jsr fff4 <getValueType>
    dc36:	          lea 12(sp),sp
    dc3a:	          tst.w d0
    dc3c:	      /-- bne.s dc42 <builtIn_getCharacterDirection+0x28>
    dc3e:	      |   moveq #1,d0
    dc40:	/-----|-- bra.s dca0 <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
    dc42:	|     \-> moveq #24,d0
    dc44:	|         add.l 16(sp),d0
    dc48:	|         move.l d0,-(sp)
    dc4a:	|         jsr 10978 <trimStack>
    dc50:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    dc52:	|         move.l (sp),d0
    dc54:	|         move.l d0,-(sp)
    dc56:	|         jsr 6344 <findPerson>
    dc5c:	|         addq.l #4,sp
    dc5e:	|         move.l d0,4(sp)
	if (thisPerson) {
    dc62:	|  /----- beq.s dc86 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
    dc64:	|  |      movea.l 4(sp),a0
    dc68:	|  |      move.l 94(a0),d1
    dc6c:	|  |      moveq #28,d0
    dc6e:	|  |      add.l 16(sp),d0
    dc72:	|  |      move.l d1,-(sp)
    dc74:	|  |      pea 1 <_start+0x1>
    dc78:	|  |      move.l d0,-(sp)
    dc7a:	|  |      jsr 108e6 <setVariable>
    dc80:	|  |      lea 12(sp),sp
    dc84:	|  |  /-- bra.s dc9e <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    dc86:	|  \--|-> moveq #28,d0
    dc88:	|     |   add.l 16(sp),d0
    dc8c:	|     |   clr.l -(sp)
    dc8e:	|     |   pea 1 <_start+0x1>
    dc92:	|     |   move.l d0,-(sp)
    dc94:	|     |   jsr 108e6 <setVariable>
    dc9a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    dc9e:	|     \-> moveq #2,d0
}
    dca0:	\-------> addq.l #8,sp
    dca2:	          rts

0000dca4 <builtIn_isCharacter>:

builtIn(isCharacter)
{
    dca4:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dca6:	       movea.l 16(sp),a0
    dcaa:	       move.l 24(a0),d0
    dcae:	       move.l d0,-(sp)
    dcb0:	       pea 7 <_start+0x7>
    dcb4:	       move.l sp,d0
    dcb6:	       addq.l #8,d0
    dcb8:	       move.l d0,-(sp)
    dcba:	       jsr fff4 <getValueType>
    dcc0:	       lea 12(sp),sp
    dcc4:	       tst.w d0
    dcc6:	   /-- bne.s dccc <builtIn_isCharacter+0x28>
    dcc8:	   |   moveq #1,d0
    dcca:	/--|-- bra.s dd0e <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
    dccc:	|  \-> moveq #24,d0
    dcce:	|      add.l 16(sp),d0
    dcd2:	|      move.l d0,-(sp)
    dcd4:	|      jsr 10978 <trimStack>
    dcda:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    dcdc:	|      move.l (sp),d0
    dcde:	|      move.l d0,-(sp)
    dce0:	|      jsr 6344 <findPerson>
    dce6:	|      addq.l #4,sp
    dce8:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
    dcec:	|      sne d0
    dcee:	|      neg.b d0
    dcf0:	|      moveq #0,d1
    dcf2:	|      move.b d0,d1
    dcf4:	|      moveq #28,d0
    dcf6:	|      add.l 16(sp),d0
    dcfa:	|      move.l d1,-(sp)
    dcfc:	|      pea 1 <_start+0x1>
    dd00:	|      move.l d0,-(sp)
    dd02:	|      jsr 108e6 <setVariable>
    dd08:	|      lea 12(sp),sp
	return BR_CONTINUE;
    dd0c:	|      moveq #2,d0
}
    dd0e:	\----> addq.l #8,sp
    dd10:	       rts

0000dd12 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
    dd12:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dd14:	          movea.l 16(sp),a0
    dd18:	          move.l 24(a0),d0
    dd1c:	          move.l d0,-(sp)
    dd1e:	          pea 7 <_start+0x7>
    dd22:	          move.l sp,d0
    dd24:	          addq.l #8,d0
    dd26:	          move.l d0,-(sp)
    dd28:	          jsr fff4 <getValueType>
    dd2e:	          lea 12(sp),sp
    dd32:	          tst.w d0
    dd34:	      /-- bne.s dd3a <builtIn_normalCharacter+0x28>
    dd36:	      |   moveq #1,d0
    dd38:	/-----|-- bra.s ddb6 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
    dd3a:	|     \-> moveq #24,d0
    dd3c:	|         add.l 16(sp),d0
    dd40:	|         move.l d0,-(sp)
    dd42:	|         jsr 10978 <trimStack>
    dd48:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    dd4a:	|         move.l (sp),d0
    dd4c:	|         move.l d0,-(sp)
    dd4e:	|         jsr 6344 <findPerson>
    dd54:	|         addq.l #4,sp
    dd56:	|         move.l d0,4(sp)
	if (thisPerson)
    dd5a:	|  /----- beq.s dd9c <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
    dd5c:	|  |      movea.l 4(sp),a0
    dd60:	|  |      movea.l 68(a0),a0
    dd64:	|  |      move.l (a0),d1
    dd66:	|  |      movea.l 4(sp),a0
    dd6a:	|  |      move.l 94(a0),d0
    dd6e:	|  |      add.l d0,d0
    dd70:	|  |      add.l d0,d0
    dd72:	|  |      movea.l d1,a0
    dd74:	|  |      adda.l d0,a0
    dd76:	|  |      move.l (a0),d0
    dd78:	|  |      movea.l 4(sp),a0
    dd7c:	|  |      move.l d0,60(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    dd80:	|  |      moveq #28,d0
    dd82:	|  |      add.l 16(sp),d0
    dd86:	|  |      pea 1 <_start+0x1>
    dd8a:	|  |      pea 1 <_start+0x1>
    dd8e:	|  |      move.l d0,-(sp)
    dd90:	|  |      jsr 108e6 <setVariable>
    dd96:	|  |      lea 12(sp),sp
    dd9a:	|  |  /-- bra.s ddb4 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    dd9c:	|  \--|-> moveq #28,d0
    dd9e:	|     |   add.l 16(sp),d0
    dda2:	|     |   clr.l -(sp)
    dda4:	|     |   pea 1 <_start+0x1>
    dda8:	|     |   move.l d0,-(sp)
    ddaa:	|     |   jsr 108e6 <setVariable>
    ddb0:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    ddb4:	|     \-> moveq #2,d0
}
    ddb6:	\-------> addq.l #8,sp
    ddb8:	          rts

0000ddba <builtIn_isMoving>:

builtIn(isMoving)
{
    ddba:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ddbc:	          movea.l 16(sp),a0
    ddc0:	          move.l 24(a0),d0
    ddc4:	          move.l d0,-(sp)
    ddc6:	          pea 7 <_start+0x7>
    ddca:	          move.l sp,d0
    ddcc:	          addq.l #8,d0
    ddce:	          move.l d0,-(sp)
    ddd0:	          jsr fff4 <getValueType>
    ddd6:	          lea 12(sp),sp
    ddda:	          tst.w d0
    dddc:	      /-- bne.s dde2 <builtIn_isMoving+0x28>
    ddde:	      |   moveq #1,d0
    dde0:	/-----|-- bra.s de42 <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
    dde2:	|     \-> moveq #24,d0
    dde4:	|         add.l 16(sp),d0
    dde8:	|         move.l d0,-(sp)
    ddea:	|         jsr 10978 <trimStack>
    ddf0:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    ddf2:	|         move.l (sp),d0
    ddf4:	|         move.l d0,-(sp)
    ddf6:	|         jsr 6344 <findPerson>
    ddfc:	|         addq.l #4,sp
    ddfe:	|         move.l d0,4(sp)
	if (thisPerson)
    de02:	|  /----- beq.s de28 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
    de04:	|  |      movea.l 4(sp),a0
    de08:	|  |      move.w 52(a0),d0
    de0c:	|  |      movea.w d0,a0
    de0e:	|  |      moveq #28,d0
    de10:	|  |      add.l 16(sp),d0
    de14:	|  |      move.l a0,-(sp)
    de16:	|  |      pea 1 <_start+0x1>
    de1a:	|  |      move.l d0,-(sp)
    de1c:	|  |      jsr 108e6 <setVariable>
    de22:	|  |      lea 12(sp),sp
    de26:	|  |  /-- bra.s de40 <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    de28:	|  \--|-> moveq #28,d0
    de2a:	|     |   add.l 16(sp),d0
    de2e:	|     |   clr.l -(sp)
    de30:	|     |   pea 1 <_start+0x1>
    de34:	|     |   move.l d0,-(sp)
    de36:	|     |   jsr 108e6 <setVariable>
    de3c:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    de40:	|     \-> moveq #2,d0
}
    de42:	\-------> addq.l #8,sp
    de44:	          rts

0000de46 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
    de46:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    de4a:	          movea.l 20(sp),a0
    de4e:	          move.l 24(a0),d0
    de52:	          move.l d0,-(sp)
    de54:	          pea 7 <_start+0x7>
    de58:	          lea 8(sp),a0
    de5c:	          move.l a0,-(sp)
    de5e:	          jsr fff4 <getValueType>
    de64:	          lea 12(sp),sp
    de68:	          tst.w d0
    de6a:	      /-- bne.s de72 <builtIn_fetchEvent+0x2c>
    de6c:	      |   moveq #1,d0
    de6e:	/-----|-- bra.w df06 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
    de72:	|     \-> moveq #24,d0
    de74:	|         add.l 20(sp),d0
    de78:	|         move.l d0,-(sp)
    de7a:	|         jsr 10978 <trimStack>
    de80:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    de82:	|         movea.l 20(sp),a0
    de86:	|         move.l 24(a0),d0
    de8a:	|         move.l d0,-(sp)
    de8c:	|         pea 7 <_start+0x7>
    de90:	|         moveq #12,d0
    de92:	|         add.l sp,d0
    de94:	|         move.l d0,-(sp)
    de96:	|         jsr fff4 <getValueType>
    de9c:	|         lea 12(sp),sp
    dea0:	|         tst.w d0
    dea2:	|     /-- bne.s dea8 <builtIn_fetchEvent+0x62>
    dea4:	|     |   moveq #1,d0
    dea6:	+-----|-- bra.s df06 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
    dea8:	|     \-> moveq #24,d0
    deaa:	|         add.l 20(sp),d0
    deae:	|         move.l d0,-(sp)
    deb0:	|         jsr 10978 <trimStack>
    deb6:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    deb8:	|         move.l (sp),d1
    deba:	|         move.l 4(sp),d0
    debe:	|         move.l d1,-(sp)
    dec0:	|         move.l d0,-(sp)
    dec2:	|         jsr 8f6e <getCombinationFunction>
    dec8:	|         addq.l #8,sp
    deca:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
    dece:	|  /----- beq.s deec <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    ded0:	|  |      moveq #28,d0
    ded2:	|  |      add.l 20(sp),d0
    ded6:	|  |      move.l 8(sp),-(sp)
    deda:	|  |      pea 2 <_start+0x2>
    dede:	|  |      move.l d0,-(sp)
    dee0:	|  |      jsr 108e6 <setVariable>
    dee6:	|  |      lea 12(sp),sp
    deea:	|  |  /-- bra.s df04 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    deec:	|  \--|-> moveq #28,d0
    deee:	|     |   add.l 20(sp),d0
    def2:	|     |   clr.l -(sp)
    def4:	|     |   pea 1 <_start+0x1>
    def8:	|     |   move.l d0,-(sp)
    defa:	|     |   jsr 108e6 <setVariable>
    df00:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    df04:	|     \-> moveq #2,d0
}
    df06:	\-------> lea 12(sp),sp
    df0a:	          rts

0000df0c <builtIn_deleteFile>:

builtIn(deleteFile)
{
    df0c:	       lea -24(sp),sp
    df10:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
    df12:	       movea.l 36(sp),a0
    df16:	       move.l 24(a0),d0
    df1a:	       move.l d0,-(sp)
    df1c:	       jsr 105ca <getTextFromAnyVar>
    df22:	       addq.l #4,sp
    df24:	       move.l d0,24(sp)
    trimStack(&fun->stack);
    df28:	       moveq #24,d0
    df2a:	       add.l 36(sp),d0
    df2e:	       move.l d0,-(sp)
    df30:	       jsr 10978 <trimStack>
    df36:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
    df38:	       move.l 24(sp),-(sp)
    df3c:	       jsr 2fe <encodeFilename>
    df42:	       addq.l #4,sp
    df44:	       move.l d0,20(sp)
    FreeVec(namNormal);
    df48:	       move.l 24(sp),16(sp)
    df4e:	       move.l 17b28 <SysBase>,d0
    df54:	       movea.l d0,a6
    df56:	       movea.l 16(sp),a1
    df5a:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
    df5e:	       move.l 20(sp),-(sp)
    df62:	       jsr 9d26 <failSecurityCheck>
    df68:	       addq.l #4,sp
    df6a:	       tst.w d0
    df6c:	   /-- beq.s df72 <builtIn_deleteFile+0x66>
    df6e:	   |   moveq #1,d0
    df70:	/--|-- bra.s dfc0 <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
    df72:	|  \-> move.l 20(sp),12(sp)
    df78:	|      move.l 17b30 <DOSBase>,d0
    df7e:	|      movea.l d0,a6
    df80:	|      move.l 12(sp),d1
    df84:	|      jsr -72(a6)
    df88:	|      move.l d0,8(sp)
    df8c:	|      move.l 8(sp),d1
    df90:	|      moveq #28,d0
    df92:	|      add.l 36(sp),d0
    df96:	|      move.l d1,-(sp)
    df98:	|      pea 1 <_start+0x1>
    df9c:	|      move.l d0,-(sp)
    df9e:	|      jsr 108e6 <setVariable>
    dfa4:	|      lea 12(sp),sp
    FreeVec(nam);
    dfa8:	|      move.l 20(sp),4(sp)
    dfae:	|      move.l 17b28 <SysBase>,d0
    dfb4:	|      movea.l d0,a6
    dfb6:	|      movea.l 4(sp),a1
    dfba:	|      jsr -690(a6)

    return BR_CONTINUE;
    dfbe:	|      moveq #2,d0
}
    dfc0:	\----> movea.l (sp)+,a6
    dfc2:	       lea 24(sp),sp
    dfc6:	       rts

0000dfc8 <builtIn_renameFile>:

builtIn(renameFile)
{
    dfc8:	       lea -40(sp),sp
    dfcc:	       move.l a6,-(sp)
    dfce:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
    dfd0:	       movea.l 56(sp),a0
    dfd4:	       move.l 24(a0),d0
    dfd8:	       move.l d0,-(sp)
    dfda:	       jsr 105ca <getTextFromAnyVar>
    dfe0:	       addq.l #4,sp
    dfe2:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
    dfe6:	       move.l 44(sp),-(sp)
    dfea:	       jsr 2fe <encodeFilename>
    dff0:	       addq.l #4,sp
    dff2:	       move.l d0,40(sp)
	trimStack(&fun->stack);
    dff6:	       moveq #24,d0
    dff8:	       add.l 56(sp),d0
    dffc:	       move.l d0,-(sp)
    dffe:	       jsr 10978 <trimStack>
    e004:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
    e006:	       move.l 40(sp),-(sp)
    e00a:	       jsr 9d26 <failSecurityCheck>
    e010:	       addq.l #4,sp
    e012:	       tst.w d0
    e014:	   /-- beq.s e01c <builtIn_renameFile+0x54>
    e016:	   |   moveq #1,d0
    e018:	/--|-- bra.w e102 <builtIn_renameFile+0x13a>
	FreeVec(temp);
    e01c:	|  \-> move.l 44(sp),36(sp)
    e022:	|      move.l 17b28 <SysBase>,d0
    e028:	|      movea.l d0,a6
    e02a:	|      movea.l 36(sp),a1
    e02e:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
    e032:	|      movea.l 56(sp),a0
    e036:	|      move.l 24(a0),d0
    e03a:	|      move.l d0,-(sp)
    e03c:	|      jsr 105ca <getTextFromAnyVar>
    e042:	|      addq.l #4,sp
    e044:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
    e048:	|      move.l 44(sp),-(sp)
    e04c:	|      jsr 2fe <encodeFilename>
    e052:	|      addq.l #4,sp
    e054:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
    e058:	|      moveq #24,d0
    e05a:	|      add.l 56(sp),d0
    e05e:	|      move.l d0,-(sp)
    e060:	|      jsr 10978 <trimStack>
    e066:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
    e068:	|      move.l 32(sp),-(sp)
    e06c:	|      jsr 9d26 <failSecurityCheck>
    e072:	|      addq.l #4,sp
    e074:	|      tst.w d0
    e076:	|  /-- beq.s e07e <builtIn_renameFile+0xb6>
    e078:	|  |   moveq #1,d0
    e07a:	+--|-- bra.w e102 <builtIn_renameFile+0x13a>
	FreeVec(temp);
    e07e:	|  \-> move.l 44(sp),28(sp)
    e084:	|      move.l 17b28 <SysBase>,d0
    e08a:	|      movea.l d0,a6
    e08c:	|      movea.l 28(sp),a1
    e090:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
    e094:	|      move.l 32(sp),24(sp)
    e09a:	|      move.l 40(sp),20(sp)
    e0a0:	|      move.l 17b30 <DOSBase>,d0
    e0a6:	|      movea.l d0,a6
    e0a8:	|      move.l 24(sp),d1
    e0ac:	|      move.l 20(sp),d2
    e0b0:	|      jsr -78(a6)
    e0b4:	|      move.l d0,16(sp)
    e0b8:	|      move.l 16(sp),d1
    e0bc:	|      moveq #28,d0
    e0be:	|      add.l 56(sp),d0
    e0c2:	|      move.l d1,-(sp)
    e0c4:	|      pea 1 <_start+0x1>
    e0c8:	|      move.l d0,-(sp)
    e0ca:	|      jsr 108e6 <setVariable>
    e0d0:	|      lea 12(sp),sp
	FreeVec(nam);
    e0d4:	|      move.l 32(sp),12(sp)
    e0da:	|      move.l 17b28 <SysBase>,d0
    e0e0:	|      movea.l d0,a6
    e0e2:	|      movea.l 12(sp),a1
    e0e6:	|      jsr -690(a6)
	FreeVec(newnam);
    e0ea:	|      move.l 40(sp),8(sp)
    e0f0:	|      move.l 17b28 <SysBase>,d0
    e0f6:	|      movea.l d0,a6
    e0f8:	|      movea.l 8(sp),a1
    e0fc:	|      jsr -690(a6)

	return BR_CONTINUE;
    e100:	|      moveq #2,d0
}
    e102:	\----> move.l (sp)+,d2
    e104:	       movea.l (sp)+,a6
    e106:	       lea 40(sp),sp
    e10a:	       rts

0000e10c <builtIn_cacheSound>:

builtIn(cacheSound)
{
    e10c:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e10e:	       movea.l 12(sp),a0
    e112:	       move.l 24(a0),d0
    e116:	       move.l d0,-(sp)
    e118:	       pea 5 <_start+0x5>
    e11c:	       move.l sp,d0
    e11e:	       addq.l #8,d0
    e120:	       move.l d0,-(sp)
    e122:	       jsr fff4 <getValueType>
    e128:	       lea 12(sp),sp
    e12c:	       tst.w d0
    e12e:	   /-- bne.s e134 <builtIn_cacheSound+0x28>
    e130:	   |   moveq #1,d0
    e132:	/--|-- bra.s e15c <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
    e134:	|  \-> moveq #24,d0
    e136:	|      add.l 12(sp),d0
    e13a:	|      move.l d0,-(sp)
    e13c:	|      jsr 10978 <trimStack>
    e142:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
    e144:	|      move.l (sp),d0
    e146:	|      move.l d0,-(sp)
    e148:	|      jsr 8be0 <cacheSound>
    e14e:	|      addq.l #4,sp
    e150:	|      moveq #-1,d1
    e152:	|      cmp.l d0,d1
    e154:	|  /-- bne.s e15a <builtIn_cacheSound+0x4e>
    e156:	|  |   moveq #1,d0
    e158:	+--|-- bra.s e15c <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
    e15a:	|  \-> moveq #2,d0
}
    e15c:	\----> addq.l #4,sp
    e15e:	       rts

0000e160 <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
    e160:	pea 15a51 <zbuffer.c.4facf542+0x399>
    e166:	jsr 12048 <KPrintF>
    e16c:	addq.l #4,sp
	return BR_CONTINUE;
    e16e:	moveq #2,d0
}
    e170:	rts

0000e172 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
    e172:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e176:	          movea.l 20(sp),a0
    e17a:	          move.l 24(a0),d0
    e17e:	          move.l d0,-(sp)
    e180:	          pea 1 <_start+0x1>
    e184:	          moveq #12,d0
    e186:	          add.l sp,d0
    e188:	          move.l d0,-(sp)
    e18a:	          jsr fff4 <getValueType>
    e190:	          lea 12(sp),sp
    e194:	          tst.w d0
    e196:	      /-- bne.s e19e <builtIn_setCharacterSpinSpeed+0x2c>
    e198:	      |   moveq #1,d0
    e19a:	/-----|-- bra.w e238 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
    e19e:	|     \-> moveq #24,d0
    e1a0:	|         add.l 20(sp),d0
    e1a4:	|         move.l d0,-(sp)
    e1a6:	|         jsr 10978 <trimStack>
    e1ac:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e1ae:	|         movea.l 20(sp),a0
    e1b2:	|         move.l 24(a0),d0
    e1b6:	|         move.l d0,-(sp)
    e1b8:	|         pea 7 <_start+0x7>
    e1bc:	|         lea 8(sp),a0
    e1c0:	|         move.l a0,-(sp)
    e1c2:	|         jsr fff4 <getValueType>
    e1c8:	|         lea 12(sp),sp
    e1cc:	|         tst.w d0
    e1ce:	|     /-- bne.s e1d4 <builtIn_setCharacterSpinSpeed+0x62>
    e1d0:	|     |   moveq #1,d0
    e1d2:	+-----|-- bra.s e238 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
    e1d4:	|     \-> moveq #24,d0
    e1d6:	|         add.l 20(sp),d0
    e1da:	|         move.l d0,-(sp)
    e1dc:	|         jsr 10978 <trimStack>
    e1e2:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
    e1e4:	|         move.l (sp),d0
    e1e6:	|         move.l d0,-(sp)
    e1e8:	|         jsr 6344 <findPerson>
    e1ee:	|         addq.l #4,sp
    e1f0:	|         move.l d0,8(sp)

	if (thisPerson) {
    e1f4:	|  /----- beq.s e21e <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
    e1f6:	|  |      move.l 4(sp),d0
    e1fa:	|  |      movea.l 8(sp),a0
    e1fe:	|  |      move.l d0,110(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    e202:	|  |      moveq #28,d0
    e204:	|  |      add.l 20(sp),d0
    e208:	|  |      pea 1 <_start+0x1>
    e20c:	|  |      pea 1 <_start+0x1>
    e210:	|  |      move.l d0,-(sp)
    e212:	|  |      jsr 108e6 <setVariable>
    e218:	|  |      lea 12(sp),sp
    e21c:	|  |  /-- bra.s e236 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    e21e:	|  \--|-> moveq #28,d0
    e220:	|     |   add.l 20(sp),d0
    e224:	|     |   clr.l -(sp)
    e226:	|     |   pea 1 <_start+0x1>
    e22a:	|     |   move.l d0,-(sp)
    e22c:	|     |   jsr 108e6 <setVariable>
    e232:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    e236:	|     \-> moveq #2,d0
}
    e238:	\-------> lea 12(sp),sp
    e23c:	          rts

0000e23e <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
    e23e:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e242:	          movea.l 20(sp),a0
    e246:	          move.l 24(a0),d0
    e24a:	          move.l d0,-(sp)
    e24c:	          pea 1 <_start+0x1>
    e250:	          moveq #12,d0
    e252:	          add.l sp,d0
    e254:	          move.l d0,-(sp)
    e256:	          jsr fff4 <getValueType>
    e25c:	          lea 12(sp),sp
    e260:	          tst.w d0
    e262:	      /-- bne.s e26a <builtIn_setCharacterAngleOffset+0x2c>
    e264:	      |   moveq #1,d0
    e266:	/-----|-- bra.w e304 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
    e26a:	|     \-> moveq #24,d0
    e26c:	|         add.l 20(sp),d0
    e270:	|         move.l d0,-(sp)
    e272:	|         jsr 10978 <trimStack>
    e278:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e27a:	|         movea.l 20(sp),a0
    e27e:	|         move.l 24(a0),d0
    e282:	|         move.l d0,-(sp)
    e284:	|         pea 7 <_start+0x7>
    e288:	|         lea 8(sp),a0
    e28c:	|         move.l a0,-(sp)
    e28e:	|         jsr fff4 <getValueType>
    e294:	|         lea 12(sp),sp
    e298:	|         tst.w d0
    e29a:	|     /-- bne.s e2a0 <builtIn_setCharacterAngleOffset+0x62>
    e29c:	|     |   moveq #1,d0
    e29e:	+-----|-- bra.s e304 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
    e2a0:	|     \-> moveq #24,d0
    e2a2:	|         add.l 20(sp),d0
    e2a6:	|         move.l d0,-(sp)
    e2a8:	|         jsr 10978 <trimStack>
    e2ae:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
    e2b0:	|         move.l (sp),d0
    e2b2:	|         move.l d0,-(sp)
    e2b4:	|         jsr 6344 <findPerson>
    e2ba:	|         addq.l #4,sp
    e2bc:	|         move.l d0,8(sp)

	if (thisPerson) {
    e2c0:	|  /----- beq.s e2ea <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
    e2c2:	|  |      move.l 4(sp),d0
    e2c6:	|  |      movea.l 8(sp),a0
    e2ca:	|  |      move.l d0,88(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    e2ce:	|  |      moveq #28,d0
    e2d0:	|  |      add.l 20(sp),d0
    e2d4:	|  |      pea 1 <_start+0x1>
    e2d8:	|  |      pea 1 <_start+0x1>
    e2dc:	|  |      move.l d0,-(sp)
    e2de:	|  |      jsr 108e6 <setVariable>
    e2e4:	|  |      lea 12(sp),sp
    e2e8:	|  |  /-- bra.s e302 <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    e2ea:	|  \--|-> moveq #28,d0
    e2ec:	|     |   add.l 20(sp),d0
    e2f0:	|     |   clr.l -(sp)
    e2f2:	|     |   pea 1 <_start+0x1>
    e2f6:	|     |   move.l d0,-(sp)
    e2f8:	|     |   jsr 108e6 <setVariable>
    e2fe:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    e302:	|     \-> moveq #2,d0
}
    e304:	\-------> lea 12(sp),sp
    e308:	          rts

0000e30a <builtIn_transitionMode>:


builtIn(transitionMode)
{
    e30a:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e30c:	       movea.l 12(sp),a0
    e310:	       move.l 24(a0),d0
    e314:	       move.l d0,-(sp)
    e316:	       pea 1 <_start+0x1>
    e31a:	       move.l sp,d0
    e31c:	       addq.l #8,d0
    e31e:	       move.l d0,-(sp)
    e320:	       jsr fff4 <getValueType>
    e326:	       lea 12(sp),sp
    e32a:	       tst.w d0
    e32c:	   /-- bne.s e332 <builtIn_transitionMode+0x28>
    e32e:	   |   moveq #1,d0
    e330:	/--|-- bra.s e368 <builtIn_transitionMode+0x5e>
	fadeMode = n;
    e332:	|  \-> move.l (sp),d0
    e334:	|      move.l d0,d0
    e336:	|      move.b d0,1656e <fadeMode>
	trimStack (&fun -> stack);
    e33c:	|      moveq #24,d0
    e33e:	|      add.l 12(sp),d0
    e342:	|      move.l d0,-(sp)
    e344:	|      jsr 10978 <trimStack>
    e34a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    e34c:	|      moveq #28,d0
    e34e:	|      add.l 12(sp),d0
    e352:	|      pea 1 <_start+0x1>
    e356:	|      pea 1 <_start+0x1>
    e35a:	|      move.l d0,-(sp)
    e35c:	|      jsr 108e6 <setVariable>
    e362:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e366:	|      moveq #2,d0
}
    e368:	\----> addq.l #4,sp
    e36a:	       rts

0000e36c <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    e36c:	moveq #24,d0
    e36e:	add.l 8(sp),d0
    e372:	move.l d0,-(sp)
    e374:	jsr 10978 <trimStack>
    e37a:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
    e37c:	moveq #28,d0
    e37e:	add.l 8(sp),d0
    e382:	pea 1 <_start+0x1>
    e386:	pea 1 <_start+0x1>
    e38a:	move.l d0,-(sp)
    e38c:	jsr 108e6 <setVariable>
    e392:	lea 12(sp),sp
	return BR_CONTINUE;
    e396:	moveq #2,d0
}
    e398:	rts

0000e39a <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
    e39a:	pea 15a7b <zbuffer.c.4facf542+0x3c3>
    e3a0:	jsr 12048 <KPrintF>
    e3a6:	addq.l #4,sp
	return BR_CONTINUE;
    e3a8:	moveq #2,d0
}
    e3aa:	rts

0000e3ac <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
    e3ac:	       lea -16(sp),sp
    e3b0:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
    e3b2:	       movea.l 28(sp),a0
    e3b6:	       move.l 24(a0),d0
    e3ba:	       move.l d0,-(sp)
    e3bc:	       jsr 105ca <getTextFromAnyVar>
    e3c2:	       addq.l #4,sp
    e3c4:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
    e3c8:	   /-- bne.s e3d0 <builtIn_saveCustomData+0x24>
    e3ca:	   |   moveq #1,d0
    e3cc:	/--|-- bra.w e482 <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
    e3d0:	|  \-> move.l 16(sp),-(sp)
    e3d4:	|      jsr 2fe <encodeFilename>
    e3da:	|      addq.l #4,sp
    e3dc:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
    e3e0:	|      move.l 16(sp),8(sp)
    e3e6:	|      move.l 17b28 <SysBase>,d0
    e3ec:	|      movea.l d0,a6
    e3ee:	|      movea.l 8(sp),a1
    e3f2:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
    e3f6:	|      move.l 12(sp),-(sp)
    e3fa:	|      jsr 9d26 <failSecurityCheck>
    e400:	|      addq.l #4,sp
    e402:	|      tst.w d0
    e404:	|  /-- beq.s e40a <builtIn_saveCustomData+0x5e>
    e406:	|  |   moveq #1,d0
    e408:	+--|-- bra.s e482 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
    e40a:	|  \-> moveq #24,d0
    e40c:	|      add.l 28(sp),d0
    e410:	|      move.l d0,-(sp)
    e412:	|      jsr 10978 <trimStack>
    e418:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
    e41a:	|      movea.l 28(sp),a0
    e41e:	|      movea.l 24(a0),a0
    e422:	|      move.l (a0),d0
    e424:	|      moveq #6,d1
    e426:	|      cmp.l d0,d1
    e428:	|  /-- beq.s e43c <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
    e42a:	|  |   pea 15aa8 <zbuffer.c.4facf542+0x3f0>
    e430:	|  |   jsr 12048 <KPrintF>
    e436:	|  |   addq.l #4,sp
		return BR_ERROR;
    e438:	|  |   moveq #1,d0
    e43a:	+--|-- bra.s e482 <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
    e43c:	|  \-> movea.l 28(sp),a0
    e440:	|      move.l 24(a0),d0
    e444:	|      move.l d0,-(sp)
    e446:	|      move.l 16(sp),-(sp)
    e44a:	|      jsr 9976 <stackToFile>
    e450:	|      addq.l #8,sp
    e452:	|      tst.w d0
    e454:	|  /-- bne.s e45a <builtIn_saveCustomData+0xae>
    e456:	|  |   moveq #1,d0
    e458:	+--|-- bra.s e482 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
    e45a:	|  \-> moveq #24,d0
    e45c:	|      add.l 28(sp),d0
    e460:	|      move.l d0,-(sp)
    e462:	|      jsr 10978 <trimStack>
    e468:	|      addq.l #4,sp
	FreeVec(fileName);
    e46a:	|      move.l 12(sp),4(sp)
    e470:	|      move.l 17b28 <SysBase>,d0
    e476:	|      movea.l d0,a6
    e478:	|      movea.l 4(sp),a1
    e47c:	|      jsr -690(a6)
	return BR_CONTINUE;
    e480:	|      moveq #2,d0
}
    e482:	\----> movea.l (sp)+,a6
    e484:	       lea 16(sp),sp
    e488:	       rts

0000e48a <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
    e48a:	       lea -28(sp),sp
    e48e:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    e490:	       movea.l 40(sp),a0
    e494:	       move.l 24(a0),d0
    e498:	       move.l d0,-(sp)
    e49a:	       jsr 105ca <getTextFromAnyVar>
    e4a0:	       addq.l #4,sp
    e4a2:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
    e4a6:	   /-- bne.s e4ae <builtIn_loadCustomData+0x24>
    e4a8:	   |   moveq #1,d0
    e4aa:	/--|-- bra.w e5aa <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
    e4ae:	|  \-> move.l 28(sp),-(sp)
    e4b2:	|      jsr 2fe <encodeFilename>
    e4b8:	|      addq.l #4,sp
    e4ba:	|      move.l d0,24(sp)
	FreeVec(newTextA);
    e4be:	|      move.l 28(sp),20(sp)
    e4c4:	|      move.l 17b28 <SysBase>,d0
    e4ca:	|      movea.l d0,a6
    e4cc:	|      movea.l 20(sp),a1
    e4d0:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
    e4d4:	|      move.l 24(sp),-(sp)
    e4d8:	|      jsr 9d26 <failSecurityCheck>
    e4de:	|      addq.l #4,sp
    e4e0:	|      tst.w d0
    e4e2:	|  /-- beq.s e4ea <builtIn_loadCustomData+0x60>
    e4e4:	|  |   moveq #1,d0
    e4e6:	+--|-- bra.w e5aa <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
    e4ea:	|  \-> moveq #24,d0
    e4ec:	|      add.l 40(sp),d0
    e4f0:	|      move.l d0,-(sp)
    e4f2:	|      jsr 10978 <trimStack>
    e4f8:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
    e4fa:	|      moveq #28,d0
    e4fc:	|      add.l 40(sp),d0
    e500:	|      move.l d0,-(sp)
    e502:	|      jsr 10242 <unlinkVar>
    e508:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
    e50a:	|      movea.l 40(sp),a0
    e50e:	|      moveq #6,d0
    e510:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    e514:	|      moveq #12,d0
    e516:	|      move.l d0,16(sp)
    e51a:	|      clr.l 12(sp)
    e51e:	|      move.l 17b28 <SysBase>,d0
    e524:	|      movea.l d0,a6
    e526:	|      move.l 16(sp),d0
    e52a:	|      move.l 12(sp),d1
    e52e:	|      jsr -684(a6)
    e532:	|      move.l d0,8(sp)
    e536:	|      move.l 8(sp),d0
    e53a:	|      movea.l 40(sp),a0
    e53e:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
    e542:	|      movea.l 40(sp),a0
    e546:	|      move.l 32(a0),d0
    e54a:	|  /-- bne.s e550 <builtIn_loadCustomData+0xc6>
    e54c:	|  |   moveq #1,d0
    e54e:	+--|-- bra.s e5aa <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
    e550:	|  \-> movea.l 40(sp),a0
    e554:	|      movea.l 32(a0),a0
    e558:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
    e55a:	|      movea.l 40(sp),a0
    e55e:	|      movea.l 32(a0),a0
    e562:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
    e566:	|      movea.l 40(sp),a0
    e56a:	|      movea.l 32(a0),a0
    e56e:	|      moveq #1,d0
    e570:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
    e574:	|      movea.l 40(sp),a0
    e578:	|      move.l 32(a0),d0
    e57c:	|      move.l d0,-(sp)
    e57e:	|      move.l 28(sp),-(sp)
    e582:	|      jsr 93b0 <fileToStack>
    e588:	|      addq.l #8,sp
    e58a:	|      tst.w d0
    e58c:	|  /-- bne.s e592 <builtIn_loadCustomData+0x108>
    e58e:	|  |   moveq #1,d0
    e590:	+--|-- bra.s e5aa <builtIn_loadCustomData+0x120>
	FreeVec(newText);
    e592:	|  \-> move.l 24(sp),4(sp)
    e598:	|      move.l 17b28 <SysBase>,d0
    e59e:	|      movea.l d0,a6
    e5a0:	|      movea.l 4(sp),a1
    e5a4:	|      jsr -690(a6)
	return BR_CONTINUE;
    e5a8:	|      moveq #2,d0
}
    e5aa:	\----> movea.l (sp)+,a6
    e5ac:	       lea 28(sp),sp
    e5b0:	       rts

0000e5b2 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
    e5b2:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e5b4:	       movea.l 12(sp),a0
    e5b8:	       move.l 24(a0),d0
    e5bc:	       move.l d0,-(sp)
    e5be:	       pea 1 <_start+0x1>
    e5c2:	       move.l sp,d0
    e5c4:	       addq.l #8,d0
    e5c6:	       move.l d0,-(sp)
    e5c8:	       jsr fff4 <getValueType>
    e5ce:	       lea 12(sp),sp
    e5d2:	       tst.w d0
    e5d4:	   /-- bne.s e5da <builtIn_setCustomEncoding+0x28>
    e5d6:	   |   moveq #1,d0
    e5d8:	/--|-- bra.s e610 <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
    e5da:	|  \-> move.l (sp),d0
    e5dc:	|      move.l d0,d0
    e5de:	|      move.w d0,17bca <saveEncoding>
	trimStack (&fun -> stack);
    e5e4:	|      moveq #24,d0
    e5e6:	|      add.l 12(sp),d0
    e5ea:	|      move.l d0,-(sp)
    e5ec:	|      jsr 10978 <trimStack>
    e5f2:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    e5f4:	|      moveq #28,d0
    e5f6:	|      add.l 12(sp),d0
    e5fa:	|      pea 1 <_start+0x1>
    e5fe:	|      pea 1 <_start+0x1>
    e602:	|      move.l d0,-(sp)
    e604:	|      jsr 108e6 <setVariable>
    e60a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e60e:	|      moveq #2,d0
}
    e610:	\----> addq.l #4,sp
    e612:	       rts

0000e614 <builtIn_freeSound>:

builtIn(freeSound)
{
    e614:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e616:	       movea.l 12(sp),a0
    e61a:	       move.l 24(a0),d0
    e61e:	       move.l d0,-(sp)
    e620:	       pea 5 <_start+0x5>
    e624:	       move.l sp,d0
    e626:	       addq.l #8,d0
    e628:	       move.l d0,-(sp)
    e62a:	       jsr fff4 <getValueType>
    e630:	       lea 12(sp),sp
    e634:	       tst.w d0
    e636:	   /-- bne.s e63c <builtIn_freeSound+0x28>
    e638:	   |   moveq #1,d0
    e63a:	/--|-- bra.s e65a <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
    e63c:	|  \-> moveq #24,d0
    e63e:	|      add.l 12(sp),d0
    e642:	|      move.l d0,-(sp)
    e644:	|      jsr 10978 <trimStack>
    e64a:	|      addq.l #4,sp
	huntKillFreeSound (v);
    e64c:	|      move.l (sp),d0
    e64e:	|      move.l d0,-(sp)
    e650:	|      jsr 8be4 <huntKillFreeSound>
    e656:	|      addq.l #4,sp
	return BR_CONTINUE;
    e658:	|      moveq #2,d0
}
    e65a:	\----> addq.l #4,sp
    e65c:	       rts

0000e65e <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
    e65e:	       lea -12(sp),sp
    e662:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e664:	       movea.l 24(sp),a0
    e668:	       move.l 24(a0),d0
    e66c:	       move.l d0,-(sp)
    e66e:	       pea 1 <_start+0x1>
    e672:	       moveq #16,d0
    e674:	       add.l sp,d0
    e676:	       move.l d0,-(sp)
    e678:	       jsr fff4 <getValueType>
    e67e:	       lea 12(sp),sp
    e682:	       tst.w d0
    e684:	   /-- bne.s e68c <builtIn_parallaxAdd+0x2e>
    e686:	   |   moveq #1,d0
    e688:	/--|-- bra.w e760 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
    e68c:	|  \-> moveq #24,d0
    e68e:	|      add.l 24(sp),d0
    e692:	|      move.l d0,-(sp)
    e694:	|      jsr 10978 <trimStack>
    e69a:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e69c:	|      movea.l 24(sp),a0
    e6a0:	|      move.l 24(a0),d0
    e6a4:	|      move.l d0,-(sp)
    e6a6:	|      pea 1 <_start+0x1>
    e6aa:	|      moveq #20,d0
    e6ac:	|      add.l sp,d0
    e6ae:	|      move.l d0,-(sp)
    e6b0:	|      jsr fff4 <getValueType>
    e6b6:	|      lea 12(sp),sp
    e6ba:	|      tst.w d0
    e6bc:	|  /-- bne.s e6c4 <builtIn_parallaxAdd+0x66>
    e6be:	|  |   moveq #1,d0
    e6c0:	+--|-- bra.w e760 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
    e6c4:	|  \-> moveq #24,d0
    e6c6:	|      add.l 24(sp),d0
    e6ca:	|      move.l d0,-(sp)
    e6cc:	|      jsr 10978 <trimStack>
    e6d2:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e6d4:	|      movea.l 24(sp),a0
    e6d8:	|      move.l 24(a0),d0
    e6dc:	|      move.l d0,-(sp)
    e6de:	|      pea 5 <_start+0x5>
    e6e2:	|      lea 12(sp),a0
    e6e6:	|      move.l a0,-(sp)
    e6e8:	|      jsr fff4 <getValueType>
    e6ee:	|      lea 12(sp),sp
    e6f2:	|      tst.w d0
    e6f4:	|  /-- bne.s e6fa <builtIn_parallaxAdd+0x9c>
    e6f6:	|  |   moveq #1,d0
    e6f8:	+--|-- bra.s e760 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
    e6fa:	|  \-> moveq #24,d0
    e6fc:	|      add.l 24(sp),d0
    e700:	|      move.l d0,-(sp)
    e702:	|      jsr 10978 <trimStack>
    e708:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
    e70a:	|      move.l 8(sp),d0
    e70e:	|      move.l d0,d0
    e710:	|      moveq #0,d2
    e712:	|      move.w d0,d2
    e714:	|      move.l 12(sp),d0
    e718:	|      move.l d0,d0
    e71a:	|      moveq #0,d1
    e71c:	|      move.w d0,d1
    e71e:	|      move.l 4(sp),d0
    e722:	|      move.l d0,d0
    e724:	|      move.w d0,d0
    e726:	|      andi.l #65535,d0
    e72c:	|      move.l d2,-(sp)
    e72e:	|      move.l d1,-(sp)
    e730:	|      move.l d0,-(sp)
    e732:	|      jsr 8dc8 <loadParallax>
    e738:	|      lea 12(sp),sp
    e73c:	|      tst.w d0
    e73e:	|  /-- bne.s e744 <builtIn_parallaxAdd+0xe6>
    e740:	|  |   moveq #1,d0
    e742:	+--|-- bra.s e760 <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
    e744:	|  \-> moveq #28,d0
    e746:	|      add.l 24(sp),d0
    e74a:	|      pea 1 <_start+0x1>
    e74e:	|      pea 1 <_start+0x1>
    e752:	|      move.l d0,-(sp)
    e754:	|      jsr 108e6 <setVariable>
    e75a:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
    e75e:	|      moveq #2,d0
}
    e760:	\----> move.l (sp)+,d2
    e762:	       lea 12(sp),sp
    e766:	       rts

0000e768 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
    e768:	jsr 8d30 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
    e76e:	moveq #28,d0
    e770:	add.l 8(sp),d0
    e774:	pea 1 <_start+0x1>
    e778:	pea 1 <_start+0x1>
    e77c:	move.l d0,-(sp)
    e77e:	jsr 108e6 <setVariable>
    e784:	lea 12(sp),sp
	return BR_CONTINUE;
    e788:	moveq #2,d0
}
    e78a:	rts

0000e78c <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
    e78c:	pea 15ac6 <zbuffer.c.4facf542+0x40e>
    e792:	jsr 12048 <KPrintF>
    e798:	addq.l #4,sp

	return BR_CONTINUE;
    e79a:	moveq #2,d0
}
    e79c:	rts

0000e79e <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
    e79e:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    e7a0:	             movea.l 16(sp),a0
    e7a4:	             movea.l 24(a0),a0
    e7a8:	             move.l (a0),d0
    e7aa:	             moveq #1,d1
    e7ac:	             cmp.l d0,d1
    e7ae:	      /----- beq.s e7f6 <builtIn_makeFastArray+0x58>
    e7b0:	      |      moveq #6,d1
    e7b2:	      |      cmp.l d0,d1
    e7b4:	/-----|----- bne.s e834 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
    e7b6:	|     |      movea.l 16(sp),a0
    e7ba:	|     |      movea.l 24(a0),a0
    e7be:	|     |      move.l 4(a0),d1
    e7c2:	|     |      moveq #28,d0
    e7c4:	|     |      add.l 16(sp),d0
    e7c8:	|     |      move.l d1,-(sp)
    e7ca:	|     |      move.l d0,-(sp)
    e7cc:	|     |      jsr 100a6 <makeFastArrayFromStack>
    e7d2:	|     |      addq.l #8,sp
    e7d4:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
    e7d8:	|     |      moveq #24,d0
    e7da:	|     |      add.l 16(sp),d0
    e7de:	|     |      move.l d0,-(sp)
    e7e0:	|     |      jsr 10978 <trimStack>
    e7e6:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
    e7e8:	|     |      tst.w 6(sp)
    e7ec:	|     |  /-- beq.s e7f2 <builtIn_makeFastArray+0x54>
    e7ee:	|     |  |   moveq #2,d0
    e7f0:	|  /--|--|-- bra.s e846 <builtIn_makeFastArray+0xa8>
    e7f2:	|  |  |  \-> moveq #1,d0
    e7f4:	|  +--|----- bra.s e846 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
    e7f6:	|  |  \----> movea.l 16(sp),a0
    e7fa:	|  |         movea.l 24(a0),a0
    e7fe:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
    e804:	|  |         moveq #24,d0
    e806:	|  |         add.l 16(sp),d0
    e80a:	|  |         move.l d0,-(sp)
    e80c:	|  |         jsr 10978 <trimStack>
    e812:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
    e814:	|  |         moveq #28,d0
    e816:	|  |         add.l 16(sp),d0
    e81a:	|  |         move.l 2(sp),-(sp)
    e81e:	|  |         move.l d0,-(sp)
    e820:	|  |         jsr 10110 <makeFastArraySize>
    e826:	|  |         addq.l #8,sp
    e828:	|  |         tst.w d0
    e82a:	|  |     /-- beq.s e830 <builtIn_makeFastArray+0x92>
    e82c:	|  |     |   moveq #2,d0
    e82e:	|  +-----|-- bra.s e846 <builtIn_makeFastArray+0xa8>
    e830:	|  |     \-> moveq #1,d0
    e832:	|  +-------- bra.s e846 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
    e834:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
    e836:	   |         pea 15aef <zbuffer.c.4facf542+0x437>
    e83c:	   |         jsr 12048 <KPrintF>
    e842:	   |         addq.l #4,sp
	return BR_ERROR;
    e844:	   |         moveq #1,d0
}
    e846:	   \-------> addq.l #8,sp
    e848:	             rts

0000e84a <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
    e84a:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e84c:	          movea.l 16(sp),a0
    e850:	          move.l 24(a0),d0
    e854:	          move.l d0,-(sp)
    e856:	          pea 7 <_start+0x7>
    e85a:	          move.l sp,d0
    e85c:	          addq.l #8,d0
    e85e:	          move.l d0,-(sp)
    e860:	          jsr fff4 <getValueType>
    e866:	          lea 12(sp),sp
    e86a:	          tst.w d0
    e86c:	      /-- bne.s e872 <builtIn_getCharacterScale+0x28>
    e86e:	      |   moveq #1,d0
    e870:	/-----|-- bra.s e8ec <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
    e872:	|     \-> moveq #24,d0
    e874:	|         add.l 16(sp),d0
    e878:	|         move.l d0,-(sp)
    e87a:	|         jsr 10978 <trimStack>
    e880:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    e882:	|         move.l (sp),d0
    e884:	|         move.l d0,-(sp)
    e886:	|         jsr 6344 <findPerson>
    e88c:	|         addq.l #4,sp
    e88e:	|         move.l d0,4(sp)
	if (pers) {
    e892:	|  /----- beq.s e8d2 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
    e894:	|  |      movea.l 4(sp),a0
    e898:	|  |      move.l 20(a0),d0
    e89c:	|  |      move.l #1120403456,-(sp)
    e8a2:	|  |      move.l d0,-(sp)
    e8a4:	|  |      jsr 12552 <__mulsf3>
    e8aa:	|  |      addq.l #8,sp
    e8ac:	|  |      move.l d0,-(sp)
    e8ae:	|  |      jsr 12438 <__fixsfsi>
    e8b4:	|  |      addq.l #4,sp
    e8b6:	|  |      move.l d0,d1
    e8b8:	|  |      moveq #28,d0
    e8ba:	|  |      add.l 16(sp),d0
    e8be:	|  |      move.l d1,-(sp)
    e8c0:	|  |      pea 1 <_start+0x1>
    e8c4:	|  |      move.l d0,-(sp)
    e8c6:	|  |      jsr 108e6 <setVariable>
    e8cc:	|  |      lea 12(sp),sp
    e8d0:	|  |  /-- bra.s e8ea <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    e8d2:	|  \--|-> moveq #28,d0
    e8d4:	|     |   add.l 16(sp),d0
    e8d8:	|     |   clr.l -(sp)
    e8da:	|     |   pea 1 <_start+0x1>
    e8de:	|     |   move.l d0,-(sp)
    e8e0:	|     |   jsr 108e6 <setVariable>
    e8e6:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    e8ea:	|     \-> moveq #2,d0
}
    e8ec:	\-------> addq.l #8,sp
    e8ee:	          rts

0000e8f0 <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
    e8f0:	move.l 17bee <gameSettings>,d0
    e8f6:	move.l d0,d1
    e8f8:	moveq #28,d0
    e8fa:	add.l 8(sp),d0
    e8fe:	move.l d1,-(sp)
    e900:	pea 1 <_start+0x1>
    e904:	move.l d0,-(sp)
    e906:	jsr 108e6 <setVariable>
    e90c:	lea 12(sp),sp
	return BR_CONTINUE;
    e910:	moveq #2,d0
}
    e912:	rts

0000e914 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
    e914:	moveq #24,d0
    e916:	add.l 8(sp),d0
    e91a:	move.l d0,-(sp)
    e91c:	jsr 10978 <trimStack>
    e922:	addq.l #4,sp
	trimStack (&fun -> stack);
    e924:	moveq #24,d0
    e926:	add.l 8(sp),d0
    e92a:	move.l d0,-(sp)
    e92c:	jsr 10978 <trimStack>
    e932:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
    e934:	moveq #28,d0
    e936:	add.l 8(sp),d0
    e93a:	clr.l -(sp)
    e93c:	pea 1 <_start+0x1>
    e940:	move.l d0,-(sp)
    e942:	jsr 108e6 <setVariable>
    e948:	lea 12(sp),sp

	return BR_CONTINUE;
    e94c:	moveq #2,d0

}
    e94e:	rts

0000e950 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
    e950:	move.l 1600c <lastFramesPerSecond>,d1
    e956:	moveq #28,d0
    e958:	add.l 8(sp),d0
    e95c:	move.l d1,-(sp)
    e95e:	pea 1 <_start+0x1>
    e962:	move.l d0,-(sp)
    e964:	jsr 108e6 <setVariable>
    e96a:	lea 12(sp),sp
	return BR_CONTINUE;
    e96e:	moveq #2,d0
}
    e970:	rts

0000e972 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
    e972:	moveq #2,d0
}
    e974:	rts

0000e976 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
    e976:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e97a:	          movea.l 60(sp),a0
    e97e:	          move.l 24(a0),d0
    e982:	          move.l d0,-(sp)
    e984:	          pea 1 <_start+0x1>
    e988:	          pea 17a24 <thumbHeight>
    e98e:	          jsr fff4 <getValueType>
    e994:	          lea 12(sp),sp
    e998:	          tst.w d0
    e99a:	      /-- bne.s e9a2 <builtIn_setThumbnailSize+0x2c>
    e99c:	      |   moveq #1,d0
    e99e:	/-----|-- bra.w ea5e <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
    e9a2:	|     \-> moveq #24,d0
    e9a4:	|         add.l 60(sp),d0
    e9a8:	|         move.l d0,-(sp)
    e9aa:	|         jsr 10978 <trimStack>
    e9b0:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e9b2:	|         movea.l 60(sp),a0
    e9b6:	|         move.l 24(a0),d0
    e9ba:	|         move.l d0,-(sp)
    e9bc:	|         pea 1 <_start+0x1>
    e9c0:	|         pea 17a20 <thumbWidth>
    e9c6:	|         jsr fff4 <getValueType>
    e9cc:	|         lea 12(sp),sp
    e9d0:	|         tst.w d0
    e9d2:	|     /-- bne.s e9da <builtIn_setThumbnailSize+0x64>
    e9d4:	|     |   moveq #1,d0
    e9d6:	+-----|-- bra.w ea5e <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
    e9da:	|     \-> moveq #24,d0
    e9dc:	|         add.l 60(sp),d0
    e9e0:	|         move.l d0,-(sp)
    e9e2:	|         jsr 10978 <trimStack>
    e9e8:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
    e9ea:	|         move.l 17a20 <thumbWidth>,d0
    e9f0:	|     /-- bmi.s ea1e <builtIn_setThumbnailSize+0xa8>
    e9f2:	|     |   move.l 17a24 <thumbHeight>,d0
    e9f8:	|     +-- bmi.s ea1e <builtIn_setThumbnailSize+0xa8>
    e9fa:	|     |   move.l 17a20 <thumbWidth>,d0
    ea00:	|     |   move.l d0,d1
    ea02:	|     |   move.l 17a28 <winWidth>,d0
    ea08:	|     |   cmp.l d1,d0
    ea0a:	|     +-- bcs.s ea1e <builtIn_setThumbnailSize+0xa8>
    ea0c:	|     |   move.l 17a24 <thumbHeight>,d0
    ea12:	|     |   move.l d0,d1
    ea14:	|     |   move.l 17a2c <winHeight>,d0
    ea1a:	|     |   cmp.l d1,d0
    ea1c:	|  /--|-- bcc.s ea5c <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
    ea1e:	|  |  \-> move.l 17a24 <thumbHeight>,d1
    ea24:	|  |      move.l 17a20 <thumbWidth>,d0
    ea2a:	|  |      move.l d1,-(sp)
    ea2c:	|  |      move.l d0,-(sp)
    ea2e:	|  |      pea 15b16 <zbuffer.c.4facf542+0x45e>
    ea34:	|  |      lea 14(sp),a0
    ea38:	|  |      move.l a0,-(sp)
    ea3a:	|  |      jsr f7fe <sprintf>
    ea40:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
    ea44:	|  |      lea 2(sp),a0
    ea48:	|  |      move.l a0,-(sp)
    ea4a:	|  |      pea 15b1e <zbuffer.c.4facf542+0x466>
    ea50:	|  |      jsr 12048 <KPrintF>
    ea56:	|  |      addq.l #8,sp
		return BR_ERROR;
    ea58:	|  |      moveq #1,d0
    ea5a:	+--|----- bra.s ea5e <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
    ea5c:	|  \----> moveq #2,d0
}
    ea5e:	\-------> lea 52(sp),sp
    ea62:	          rts

0000ea64 <builtIn_hasFlag>:

builtIn(hasFlag)
{
    ea64:	       lea -12(sp),sp
    ea68:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ea6a:	       movea.l 24(sp),a0
    ea6e:	       move.l 24(a0),d0
    ea72:	       move.l d0,-(sp)
    ea74:	       pea 1 <_start+0x1>
    ea78:	       lea 12(sp),a0
    ea7c:	       move.l a0,-(sp)
    ea7e:	       jsr fff4 <getValueType>
    ea84:	       lea 12(sp),sp
    ea88:	       tst.w d0
    ea8a:	   /-- bne.s ea92 <builtIn_hasFlag+0x2e>
    ea8c:	   |   moveq #1,d0
    ea8e:	/--|-- bra.w eb22 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
    ea92:	|  \-> moveq #24,d0
    ea94:	|      add.l 24(sp),d0
    ea98:	|      move.l d0,-(sp)
    ea9a:	|      jsr 10978 <trimStack>
    eaa0:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    eaa2:	|      movea.l 24(sp),a0
    eaa6:	|      move.l 24(a0),d0
    eaaa:	|      move.l d0,-(sp)
    eaac:	|      pea 7 <_start+0x7>
    eab0:	|      moveq #16,d0
    eab2:	|      add.l sp,d0
    eab4:	|      move.l d0,-(sp)
    eab6:	|      jsr fff4 <getValueType>
    eabc:	|      lea 12(sp),sp
    eac0:	|      tst.w d0
    eac2:	|  /-- bne.s eac8 <builtIn_hasFlag+0x64>
    eac4:	|  |   moveq #1,d0
    eac6:	+--|-- bra.s eb22 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
    eac8:	|  \-> moveq #24,d0
    eaca:	|      add.l 24(sp),d0
    eace:	|      move.l d0,-(sp)
    ead0:	|      jsr 10978 <trimStack>
    ead6:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
    ead8:	|      move.l 8(sp),d0
    eadc:	|      move.l d0,-(sp)
    eade:	|      jsr 8f3a <findObjectType>
    eae4:	|      addq.l #4,sp
    eae6:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
    eaea:	|  /-- bne.s eaf0 <builtIn_hasFlag+0x8c>
    eaec:	|  |   moveq #1,d0
    eaee:	+--|-- bra.s eb22 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
    eaf0:	|  \-> movea.l 12(sp),a0
    eaf4:	|      move.w 36(a0),d0
    eaf8:	|      moveq #0,d2
    eafa:	|      move.w d0,d2
    eafc:	|      move.l 4(sp),d1
    eb00:	|      moveq #1,d0
    eb02:	|      lsl.l d1,d0
    eb04:	|      move.l d2,d1
    eb06:	|      and.l d0,d1
    eb08:	|      moveq #28,d0
    eb0a:	|      add.l 24(sp),d0
    eb0e:	|      move.l d1,-(sp)
    eb10:	|      pea 1 <_start+0x1>
    eb14:	|      move.l d0,-(sp)
    eb16:	|      jsr 108e6 <setVariable>
    eb1c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    eb20:	|      moveq #2,d0
}
    eb22:	\----> move.l (sp)+,d2
    eb24:	       lea 12(sp),sp
    eb28:	       rts

0000eb2a <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
    eb2a:	       jsr 8f28 <snapshot>
    eb30:	       tst.w d0
    eb32:	/----- beq.s eb38 <builtIn_snapshotGrab+0xe>
    eb34:	|      moveq #2,d0
    eb36:	|  /-- bra.s eb3a <builtIn_snapshotGrab+0x10>
    eb38:	\--|-> moveq #1,d0
}
    eb3a:	   \-> rts

0000eb3c <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
    eb3c:	jsr 8e0e <nosnapshot>
	return BR_CONTINUE;
    eb42:	moveq #2,d0
}
    eb44:	rts

0000eb46 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
    eb46:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
    eb48:	move.w 16000 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
    eb50:	movea.l 12(sp),a0
    eb54:	move.l 24(a0),d0
    eb58:	move.l d0,-(sp)
    eb5a:	jsr 10534 <getBoolean>
    eb60:	addq.l #4,sp
    eb62:	move.w d0,16000 <allowAnyFilename>
	trimStack (&fun -> stack);
    eb68:	moveq #24,d0
    eb6a:	add.l 12(sp),d0
    eb6e:	move.l d0,-(sp)
    eb70:	jsr 10978 <trimStack>
    eb76:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
    eb78:	movea.w 2(sp),a0
    eb7c:	moveq #28,d0
    eb7e:	add.l 12(sp),d0
    eb82:	move.l a0,-(sp)
    eb84:	pea 1 <_start+0x1>
    eb88:	move.l d0,-(sp)
    eb8a:	jsr 108e6 <setVariable>
    eb90:	lea 12(sp),sp
	return BR_CONTINUE;
    eb94:	moveq #2,d0
}
    eb96:	addq.l #4,sp
    eb98:	rts

0000eb9a <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    eb9a:	moveq #24,d0
    eb9c:	add.l 8(sp),d0
    eba0:	move.l d0,-(sp)
    eba2:	jsr 10978 <trimStack>
    eba8:	addq.l #4,sp
	trimStack (&fun -> stack);
    ebaa:	moveq #24,d0
    ebac:	add.l 8(sp),d0
    ebb0:	move.l d0,-(sp)
    ebb2:	jsr 10978 <trimStack>
    ebb8:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
    ebba:	moveq #28,d0
    ebbc:	add.l 8(sp),d0
    ebc0:	clr.l -(sp)
    ebc2:	pea 1 <_start+0x1>
    ebc6:	move.l d0,-(sp)
    ebc8:	jsr 108e6 <setVariable>
    ebce:	lea 12(sp),sp

	return BR_CONTINUE;
    ebd2:	moveq #2,d0
}
    ebd4:	rts

0000ebd6 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
    ebd6:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
    ebd8:	movea.l 12(sp),a0
    ebdc:	move.l 24(a0),d0
    ebe0:	move.l d0,-(sp)
    ebe2:	jsr 105ca <getTextFromAnyVar>
    ebe8:	addq.l #4,sp
    ebea:	move.l d0,(sp)
	trimStack (&fun -> stack);
    ebec:	moveq #24,d0
    ebee:	add.l 12(sp),d0
    ebf2:	move.l d0,-(sp)
    ebf4:	jsr 10978 <trimStack>
    ebfa:	addq.l #4,sp
	KPrintF (mess);
    ebfc:	move.l (sp),-(sp)
    ebfe:	jsr 12048 <KPrintF>
    ec04:	addq.l #4,sp
	return BR_ERROR;
    ec06:	moveq #1,d0
}
    ec08:	addq.l #4,sp
    ec0a:	rts

0000ec0c <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
    ec0c:	moveq #24,d0
    ec0e:	add.l 8(sp),d0
    ec12:	move.l d0,-(sp)
    ec14:	jsr 10978 <trimStack>
    ec1a:	addq.l #4,sp
	trimStack (&fun -> stack);
    ec1c:	moveq #24,d0
    ec1e:	add.l 8(sp),d0
    ec22:	move.l d0,-(sp)
    ec24:	jsr 10978 <trimStack>
    ec2a:	addq.l #4,sp
	trimStack (&fun -> stack);
    ec2c:	moveq #24,d0
    ec2e:	add.l 8(sp),d0
    ec32:	move.l d0,-(sp)
    ec34:	jsr 10978 <trimStack>
    ec3a:	addq.l #4,sp
	trimStack (&fun -> stack);
    ec3c:	moveq #24,d0
    ec3e:	add.l 8(sp),d0
    ec42:	move.l d0,-(sp)
    ec44:	jsr 10978 <trimStack>
    ec4a:	addq.l #4,sp

	return BR_CONTINUE;
    ec4c:	moveq #2,d0
}
    ec4e:	rts

0000ec50 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
    ec50:	moveq #24,d0
    ec52:	add.l 8(sp),d0
    ec56:	move.l d0,-(sp)
    ec58:	jsr 10978 <trimStack>
    ec5e:	addq.l #4,sp
	trimStack (&fun -> stack);
    ec60:	moveq #24,d0
    ec62:	add.l 8(sp),d0
    ec66:	move.l d0,-(sp)
    ec68:	jsr 10978 <trimStack>
    ec6e:	addq.l #4,sp
	trimStack (&fun -> stack);
    ec70:	moveq #24,d0
    ec72:	add.l 8(sp),d0
    ec76:	move.l d0,-(sp)
    ec78:	jsr 10978 <trimStack>
    ec7e:	addq.l #4,sp

	return BR_CONTINUE;
    ec80:	moveq #2,d0

}
    ec82:	rts

0000ec84 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
    ec84:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
    ec86:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
    ec8c:	sne d0
    ec8e:	neg.b d0
    ec90:	moveq #0,d1
    ec92:	move.b d0,d1
    ec94:	moveq #28,d0
    ec96:	add.l 12(sp),d0
    ec9a:	move.l d1,-(sp)
    ec9c:	pea 1 <_start+0x1>
    eca0:	move.l d0,-(sp)
    eca2:	jsr 108e6 <setVariable>
    eca8:	lea 12(sp),sp
	return BR_CONTINUE;
    ecac:	moveq #2,d0
}
    ecae:	addq.l #4,sp
    ecb0:	rts

0000ecb2 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
    ecb2:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
    ecb4:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
    ecba:	pea 15b35 <zbuffer.c.4facf542+0x47d>
    ecc0:	jsr 12048 <KPrintF>
    ecc6:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
    ecc8:	tst.w 2(sp)
    eccc:	sne d0
    ecce:	neg.b d0
    ecd0:	moveq #0,d1
    ecd2:	move.b d0,d1
    ecd4:	moveq #28,d0
    ecd6:	add.l 12(sp),d0
    ecda:	move.l d1,-(sp)
    ecdc:	pea 1 <_start+0x1>
    ece0:	move.l d0,-(sp)
    ece2:	jsr 108e6 <setVariable>
    ece8:	lea 12(sp),sp
	return BR_CONTINUE;
    ecec:	moveq #2,d0
}
    ecee:	addq.l #4,sp
    ecf0:	rts

0000ecf2 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
    ecf2:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
    ecf6:	             move.l 104(sp),d0
    ecfa:	             cmpi.l #166,d0
    ed00:	/----------- bhi.w ede2 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
    ed04:	|            move.l 104(sp),d0
    ed08:	|            add.l d0,d0
    ed0a:	|            movea.l d0,a1
    ed0c:	|            adda.l d0,a1
    ed0e:	|            lea 16036 <paramNum>,a0
    ed14:	|            move.l (0,a1,a0.l),d0
    ed18:	|            moveq #-1,d1
    ed1a:	|            cmp.l d0,d1
    ed1c:	|  /-------- beq.w edaa <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
    ed20:	|  |         move.l 104(sp),d0
    ed24:	|  |         add.l d0,d0
    ed26:	|  |         movea.l d0,a1
    ed28:	|  |         adda.l d0,a1
    ed2a:	|  |         lea 16036 <paramNum>,a0
    ed30:	|  |         move.l (0,a1,a0.l),d0
    ed34:	|  |         cmp.l 108(sp),d0
    ed38:	|  +-------- beq.s edaa <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
    ed3a:	|  |         move.l 104(sp),d0
    ed3e:	|  |         add.l d0,d0
    ed40:	|  |         movea.l d0,a1
    ed42:	|  |         adda.l d0,a1
    ed44:	|  |         lea 16036 <paramNum>,a0
    ed4a:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
    ed4e:	|  |         moveq #1,d1
    ed50:	|  |         cmp.l d0,d1
    ed52:	|  |  /----- bne.s ed5c <callBuiltIn+0x6a>
    ed54:	|  |  |      move.l #78130,d0
    ed5a:	|  |  |  /-- bra.s ed62 <callBuiltIn+0x70>
    ed5c:	|  |  \--|-> move.l #88939,d0
    ed62:	|  |     \-> move.l 104(sp),d1
    ed66:	|  |         add.l d1,d1
    ed68:	|  |         movea.l d1,a1
    ed6a:	|  |         adda.l d1,a1
    ed6c:	|  |         lea 16036 <paramNum>,a0
    ed72:	|  |         move.l (0,a1,a0.l),d1
    ed76:	|  |         move.l d0,-(sp)
    ed78:	|  |         move.l d1,-(sp)
    ed7a:	|  |         pea 15b6d <zbuffer.c.4facf542+0x4b5>
    ed80:	|  |         lea 12(sp),a0
    ed84:	|  |         move.l a0,-(sp)
    ed86:	|  |         jsr f7fe <sprintf>
    ed8c:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
    ed90:	|  |         movea.l sp,a0
    ed92:	|  |         move.l a0,-(sp)
    ed94:	|  |         jsr b8 <copyString>
    ed9a:	|  |         addq.l #4,sp
    ed9c:	|  |         move.l d0,-(sp)
    ed9e:	|  |         jsr 12048 <KPrintF>
    eda4:	|  |         addq.l #4,sp
				return BR_ERROR;
    eda6:	|  |         moveq #1,d0
    eda8:	|  |     /-- bra.s edf2 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
    edaa:	|  \-----|-> move.l 104(sp),d0
    edae:	|        |   add.l d0,d0
    edb0:	|        |   movea.l d0,a1
    edb2:	|        |   adda.l d0,a1
    edb4:	|        |   lea 162d2 <builtInFunctionArray>,a0
    edba:	|        |   move.l (0,a1,a0.l),d0
    edbe:	+--------|-- beq.s ede2 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
    edc0:	|        |   move.l 104(sp),d0
    edc4:	|        |   add.l d0,d0
    edc6:	|        |   movea.l d0,a1
    edc8:	|        |   adda.l d0,a1
    edca:	|        |   lea 162d2 <builtInFunctionArray>,a0
    edd0:	|        |   movea.l (0,a1,a0.l),a0
    edd4:	|        |   move.l 112(sp),-(sp)
    edd8:	|        |   move.l 112(sp),-(sp)
    eddc:	|        |   jsr (a0)
    edde:	|        |   addq.l #8,sp
    ede0:	|        +-- bra.s edf2 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
    ede2:	\--------|-> pea 15b98 <zbuffer.c.4facf542+0x4e0>
    ede8:	         |   jsr 12048 <KPrintF>
    edee:	         |   addq.l #4,sp
	return BR_ERROR;
    edf0:	         |   moveq #1,d0
}
    edf2:	         \-> lea 100(sp),sp
    edf6:	             rts

0000edf8 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
    edf8:	          subq.l #8,sp
	int indexNum = -1;
    edfa:	          moveq #-1,d0
    edfc:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    ee00:	          clr.l (sp)
    ee02:	   /----- bra.s ee28 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
    ee04:	/--|----> move.l 17be6 <languageTable>,d1
    ee0a:	|  |      move.l (sp),d0
    ee0c:	|  |      add.l d0,d0
    ee0e:	|  |      add.l d0,d0
    ee10:	|  |      movea.l d1,a0
    ee12:	|  |      adda.l d0,a0
    ee14:	|  |      move.l (a0),d0
    ee16:	|  |      move.l d0,d1
    ee18:	|  |      move.l 17bee <gameSettings>,d0
    ee1e:	|  |      cmp.l d1,d0
    ee20:	|  |  /-- bne.s ee26 <getLanguageForFileB+0x2e>
    ee22:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    ee26:	|  |  \-> addq.l #1,(sp)
    ee28:	|  \----> move.l 17bf2 <gameSettings+0x4>,d0
    ee2e:	|         cmp.l (sp),d0
    ee30:	\-------- bcc.s ee04 <getLanguageForFileB+0xc>
	}

	return indexNum;
    ee32:	          move.l 4(sp),d0
}
    ee36:	          addq.l #8,sp
    ee38:	          rts

0000ee3a <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
    ee3a:	          lea -20(sp),sp
    ee3e:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
    ee40:	          move.l 28(sp),-(sp)
    ee44:	          jsr f4e0 <strlen>
    ee4a:	          addq.l #4,sp
    ee4c:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
    ee50:	          moveq #4,d0
    ee52:	          cmp.l 12(sp),d0
    ee56:	      /-- bge.s ee7a <getPrefsFilename+0x40>
    ee58:	      |   move.l 12(sp),d0
    ee5c:	      |   subq.l #4,d0
    ee5e:	      |   movea.l 28(sp),a0
    ee62:	      |   adda.l d0,a0
    ee64:	      |   move.b (a0),d0
    ee66:	      |   cmpi.b #46,d0
    ee6a:	      +-- bne.s ee7a <getPrefsFilename+0x40>
		filename[n-4] = 0;
    ee6c:	      |   move.l 12(sp),d0
    ee70:	      |   subq.l #4,d0
    ee72:	      |   movea.l 28(sp),a0
    ee76:	      |   adda.l d0,a0
    ee78:	      |   clr.b (a0)
	}

	char * f = filename;
    ee7a:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
    ee80:	          clr.l 20(sp)
    ee84:	   /----- bra.s eeac <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
    ee86:	/--|----> move.l 20(sp),d0
    ee8a:	|  |      movea.l 28(sp),a0
    ee8e:	|  |      adda.l d0,a0
    ee90:	|  |      move.b (a0),d0
    ee92:	|  |      cmpi.b #47,d0
    ee96:	|  |  /-- bne.s eea8 <getPrefsFilename+0x6e>
    ee98:	|  |  |   move.l 20(sp),d0
    ee9c:	|  |  |   addq.l #1,d0
    ee9e:	|  |  |   move.l 28(sp),d1
    eea2:	|  |  |   add.l d0,d1
    eea4:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
    eea8:	|  |  \-> addq.l #1,20(sp)
    eeac:	|  \----> move.l 20(sp),d0
    eeb0:	|         cmp.l 12(sp),d0
    eeb4:	\-------- blt.s ee86 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
    eeb6:	          pea 15bc3 <zbuffer.c.4facf542+0x50b>
    eebc:	          move.l 20(sp),-(sp)
    eec0:	          jsr f520 <joinStrings>
    eec6:	          addq.l #8,sp
    eec8:	          move.l d0,8(sp)

	FreeVec(filename);
    eecc:	          move.l 28(sp),4(sp)
    eed2:	          move.l 17b28 <SysBase>,d0
    eed8:	          movea.l d0,a6
    eeda:	          movea.l 4(sp),a1
    eede:	          jsr -690(a6)
	filename = NULL;
    eee2:	          clr.l 28(sp)
	return joined;
    eee6:	          move.l 8(sp),d0
}
    eeea:	          movea.l (sp)+,a6
    eeec:	          lea 20(sp),sp
    eef0:	          rts

0000eef2 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
    eef2:	             lea -28(sp),sp
    eef6:	             move.l a6,-(sp)
    eef8:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
    eefa:	             move.l 17bf2 <gameSettings+0x4>,d0
    ef00:	             move.l d0,d1
    ef02:	             addq.l #1,d1
    ef04:	             move.l d1,28(sp)
    ef08:	             clr.l 24(sp)
    ef0c:	             move.l 17b28 <SysBase>,d0
    ef12:	             movea.l d0,a6
    ef14:	             move.l 28(sp),d0
    ef18:	             move.l 24(sp),d1
    ef1c:	             jsr -684(a6)
    ef20:	             move.l d0,20(sp)
    ef24:	             move.l 20(sp),d0
    ef28:	             move.l d0,17be6 <languageTable>
    if( languageTable == 0) {
    ef2e:	             move.l 17be6 <languageTable>,d0
    ef34:	         /-- bne.s ef44 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
    ef36:	         |   pea 15bc8 <zbuffer.c.4facf542+0x510>
    ef3c:	         |   jsr 12048 <KPrintF>
    ef42:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
    ef44:	         \-> move.l 17bf2 <gameSettings+0x4>,d0
    ef4a:	             move.l d0,d1
    ef4c:	             addq.l #1,d1
    ef4e:	             move.l d1,16(sp)
    ef52:	             clr.l 12(sp)
    ef56:	             move.l 17b28 <SysBase>,d0
    ef5c:	             movea.l d0,a6
    ef5e:	             move.l 16(sp),d0
    ef62:	             move.l 12(sp),d1
    ef66:	             jsr -684(a6)
    ef6a:	             move.l d0,8(sp)
    ef6e:	             move.l 8(sp),d0
    ef72:	             move.l d0,17bea <languageName>
	if( languageName == 0) {
    ef78:	             move.l 17bea <languageName>,d0
    ef7e:	         /-- bne.s ef8e <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
    ef80:	         |   pea 15bfe <zbuffer.c.4facf542+0x546>
    ef86:	         |   jsr 12048 <KPrintF>
    ef8c:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    ef8e:	         \-> clr.l 32(sp)
    ef92:	   /-------- bra.s f00a <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
    ef94:	/--|-------> tst.l 32(sp)
    ef98:	|  |  /----- beq.s efa8 <makeLanguageTable+0xb6>
    ef9a:	|  |  |      move.l 40(sp),-(sp)
    ef9e:	|  |  |      jsr 6bc <get2bytes>
    efa4:	|  |  |      addq.l #4,sp
    efa6:	|  |  |  /-- bra.s efaa <makeLanguageTable+0xb8>
    efa8:	|  |  \--|-> moveq #0,d0
    efaa:	|  |     \-> movea.l 17be6 <languageTable>,a0
    efb0:	|  |         move.l 32(sp),d1
    efb4:	|  |         add.l d1,d1
    efb6:	|  |         add.l d1,d1
    efb8:	|  |         adda.l d1,a0
    efba:	|  |         move.l d0,(a0)
		languageName[i] = 0;
    efbc:	|  |         move.l 17bea <languageName>,d1
    efc2:	|  |         move.l 32(sp),d0
    efc6:	|  |         add.l d0,d0
    efc8:	|  |         add.l d0,d0
    efca:	|  |         movea.l d1,a0
    efcc:	|  |         adda.l d0,a0
    efce:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
    efd0:	|  |         move.l 17ad6 <gameVersion>,d0
    efd6:	|  |         cmpi.l #511,d0
    efdc:	|  |     /-- ble.s f006 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
    efde:	|  |     |   move.l 17bf2 <gameSettings+0x4>,d0
    efe4:	|  |     +-- beq.s f006 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
    efe6:	|  |     |   move.l 17bea <languageName>,d1
    efec:	|  |     |   move.l 32(sp),d0
    eff0:	|  |     |   add.l d0,d0
    eff2:	|  |     |   add.l d0,d0
    eff4:	|  |     |   movea.l d1,a2
    eff6:	|  |     |   adda.l d0,a2
    eff8:	|  |     |   move.l 40(sp),-(sp)
    effc:	|  |     |   jsr b02 <readString>
    f002:	|  |     |   addq.l #4,sp
    f004:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    f006:	|  |     \-> addq.l #1,32(sp)
    f00a:	|  \-------> move.l 17bf2 <gameSettings+0x4>,d0
    f010:	|            cmp.l 32(sp),d0
    f014:	\----------- bcc.w ef94 <makeLanguageTable+0xa2>
		}
	}
}
    f018:	             nop
    f01a:	             nop
    f01c:	             movea.l (sp)+,a2
    f01e:	             movea.l (sp)+,a6
    f020:	             lea 28(sp),sp
    f024:	             rts

0000f026 <readIniFile>:

void readIniFile (char * filename) {
    f026:	                      lea -564(sp),sp
    f02a:	                      move.l a6,-(sp)
    f02c:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
    f02e:	                      move.l 576(sp),-(sp)
    f032:	                      jsr b8 <copyString>
    f038:	                      addq.l #4,sp
    f03a:	                      move.l d0,-(sp)
    f03c:	                      jsr ee3a <getPrefsFilename>
    f042:	                      addq.l #4,sp
    f044:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
    f048:	                      move.l 562(sp),558(sp)
    f04e:	                      move.l #1005,554(sp)
    f056:	                      move.l 17b30 <DOSBase>,d0
    f05c:	                      movea.l d0,a6
    f05e:	                      move.l 558(sp),d1
    f062:	                      move.l 554(sp),d2
    f066:	                      jsr -30(a6)
    f06a:	                      move.l d0,550(sp)
    f06e:	                      move.l 550(sp),d0
    f072:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
    f076:	                      clr.l 17bee <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
    f07c:	                      move.w #1,17bf6 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
    f084:	                      clr.l 17bf8 <gameSettings+0xa>
	gameSettings.antiAlias = 1;
    f08a:	                      moveq #1,d0
    f08c:	                      move.l d0,17bfc <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
    f092:	                      clr.w 17c00 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
    f098:	                      clr.w 17c02 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
    f09e:	                      clr.w 17c04 <gameSettings+0x16>

	FreeVec(langName);
    f0a4:	                      move.l 562(sp),542(sp)
    f0aa:	                      move.l 17b28 <SysBase>,d0
    f0b0:	                      movea.l d0,a6
    f0b2:	                      movea.l 542(sp),a1
    f0b6:	                      jsr -690(a6)
	langName = NULL;
    f0ba:	                      clr.l 562(sp)

	if (fp) {
    f0be:	                      tst.l 546(sp)
    f0c2:	/-------------------- beq.w f3a0 <readIniFile+0x37a>
		char lineSoFar[257] = "";
    f0c6:	|                     move.l sp,d0
    f0c8:	|                     addi.l #265,d0
    f0ce:	|                     move.l #257,d1
    f0d4:	|                     move.l d1,-(sp)
    f0d6:	|                     clr.l -(sp)
    f0d8:	|                     move.l d0,-(sp)
    f0da:	|                     jsr 11fcc <memset>
    f0e0:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
    f0e4:	|                     move.l sp,d0
    f0e6:	|                     addq.l #8,d0
    f0e8:	|                     move.l #257,d1
    f0ee:	|                     move.l d1,-(sp)
    f0f0:	|                     clr.l -(sp)
    f0f2:	|                     move.l d0,-(sp)
    f0f4:	|                     jsr 11fcc <memset>
    f0fa:	|                     lea 12(sp),sp
		unsigned char here = 0;
    f0fe:	|                     clr.b 571(sp)
		char readChar = ' ';
    f102:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
    f108:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
    f10e:	|                     clr.w 566(sp)
		LONG tmp = 0;
    f112:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
    f116:	|  /----------------> move.l 546(sp),534(sp)
    f11c:	|  |                  move.l 17b30 <DOSBase>,d0
    f122:	|  |                  movea.l d0,a6
    f124:	|  |                  move.l 534(sp),d1
    f128:	|  |                  jsr -306(a6)
    f12c:	|  |                  move.l d0,530(sp)
    f130:	|  |                  move.l 530(sp),d0
    f134:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
    f138:	|  |                  moveq #-1,d1
    f13a:	|  |                  cmp.l 538(sp),d1
    f13e:	|  |           /----- bne.s f14c <readIniFile+0x126>
				readChar = '\n';
    f140:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
    f146:	|  |           |      clr.w 568(sp)
    f14a:	|  |           |  /-- bra.s f152 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
    f14c:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
    f152:	|  |              \-> move.b 570(sp),d0
    f156:	|  |                  ext.w d0
    f158:	|  |                  movea.w d0,a0
    f15a:	|  |                  moveq #61,d0
    f15c:	|  |                  cmp.l a0,d0
    f15e:	|  |     /----------- beq.w f308 <readIniFile+0x2e2>
    f162:	|  |     |            moveq #61,d1
    f164:	|  |     |            cmp.l a0,d1
    f166:	|  |  /--|----------- blt.w f314 <readIniFile+0x2ee>
    f16a:	|  |  |  |            moveq #10,d0
    f16c:	|  |  |  |            cmp.l a0,d0
    f16e:	|  |  |  |        /-- beq.s f178 <readIniFile+0x152>
    f170:	|  |  |  |        |   moveq #13,d1
    f172:	|  |  |  |        |   cmp.l a0,d1
    f174:	|  |  +--|--------|-- bne.w f314 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
    f178:	|  |  |  |        \-> tst.w 566(sp)
    f17c:	|  |  |  |     /----- beq.w f2f6 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
    f180:	|  |  |  |     |      pea 15c32 <zbuffer.c.4facf542+0x57a>
    f186:	|  |  |  |     |      move.l sp,d0
    f188:	|  |  |  |     |      addi.l #269,d0
    f18e:	|  |  |  |     |      move.l d0,-(sp)
    f190:	|  |  |  |     |      jsr f4a0 <strcmp>
    f196:	|  |  |  |     |      addq.l #8,sp
    f198:	|  |  |  |     |      tst.l d0
    f19a:	|  |  |  |     |  /-- bne.s f1b4 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
    f19c:	|  |  |  |     |  |   move.l sp,d0
    f19e:	|  |  |  |     |  |   addq.l #8,d0
    f1a0:	|  |  |  |     |  |   move.l d0,-(sp)
    f1a2:	|  |  |  |     |  |   jsr f3ac <stringToInt>
    f1a8:	|  |  |  |     |  |   addq.l #4,sp
    f1aa:	|  |  |  |     |  |   move.l d0,17bee <gameSettings>
    f1b0:	|  |  |  |     +--|-- bra.w f2f6 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
    f1b4:	|  |  |  |     |  \-> pea 15c3b <zbuffer.c.4facf542+0x583>
    f1ba:	|  |  |  |     |      move.l sp,d0
    f1bc:	|  |  |  |     |      addi.l #269,d0
    f1c2:	|  |  |  |     |      move.l d0,-(sp)
    f1c4:	|  |  |  |     |      jsr f4a0 <strcmp>
    f1ca:	|  |  |  |     |      addq.l #8,sp
    f1cc:	|  |  |  |     |      tst.l d0
    f1ce:	|  |  |  |     |  /-- bne.s f1f4 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
    f1d0:	|  |  |  |     |  |   move.l sp,d0
    f1d2:	|  |  |  |     |  |   addq.l #8,d0
    f1d4:	|  |  |  |     |  |   move.l d0,-(sp)
    f1d6:	|  |  |  |     |  |   jsr f3ac <stringToInt>
    f1dc:	|  |  |  |     |  |   addq.l #4,sp
    f1de:	|  |  |  |     |  |   tst.l d0
    f1e0:	|  |  |  |     |  |   seq d0
    f1e2:	|  |  |  |     |  |   neg.b d0
    f1e4:	|  |  |  |     |  |   move.b d0,d0
    f1e6:	|  |  |  |     |  |   andi.w #255,d0
    f1ea:	|  |  |  |     |  |   move.w d0,17bf6 <gameSettings+0x8>
    f1f0:	|  |  |  |     +--|-- bra.w f2f6 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
    f1f4:	|  |  |  |     |  \-> pea 15c42 <zbuffer.c.4facf542+0x58a>
    f1fa:	|  |  |  |     |      move.l sp,d0
    f1fc:	|  |  |  |     |      addi.l #269,d0
    f202:	|  |  |  |     |      move.l d0,-(sp)
    f204:	|  |  |  |     |      jsr f4a0 <strcmp>
    f20a:	|  |  |  |     |      addq.l #8,sp
    f20c:	|  |  |  |     |      tst.l d0
    f20e:	|  |  |  |     |  /-- bne.s f228 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
    f210:	|  |  |  |     |  |   move.l sp,d0
    f212:	|  |  |  |     |  |   addq.l #8,d0
    f214:	|  |  |  |     |  |   move.l d0,-(sp)
    f216:	|  |  |  |     |  |   jsr f3ac <stringToInt>
    f21c:	|  |  |  |     |  |   addq.l #4,sp
    f21e:	|  |  |  |     |  |   move.l d0,17bf8 <gameSettings+0xa>
    f224:	|  |  |  |     +--|-- bra.w f2f6 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
    f228:	|  |  |  |     |  \-> pea 15c4a <zbuffer.c.4facf542+0x592>
    f22e:	|  |  |  |     |      move.l sp,d0
    f230:	|  |  |  |     |      addi.l #269,d0
    f236:	|  |  |  |     |      move.l d0,-(sp)
    f238:	|  |  |  |     |      jsr f4a0 <strcmp>
    f23e:	|  |  |  |     |      addq.l #8,sp
    f240:	|  |  |  |     |      tst.l d0
    f242:	|  |  |  |     |  /-- bne.s f25c <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
    f244:	|  |  |  |     |  |   move.l sp,d0
    f246:	|  |  |  |     |  |   addq.l #8,d0
    f248:	|  |  |  |     |  |   move.l d0,-(sp)
    f24a:	|  |  |  |     |  |   jsr f3ac <stringToInt>
    f250:	|  |  |  |     |  |   addq.l #4,sp
    f252:	|  |  |  |     |  |   move.l d0,17bfc <gameSettings+0xe>
    f258:	|  |  |  |     +--|-- bra.w f2f6 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
    f25c:	|  |  |  |     |  \-> pea 15c54 <zbuffer.c.4facf542+0x59c>
    f262:	|  |  |  |     |      move.l sp,d0
    f264:	|  |  |  |     |      addi.l #269,d0
    f26a:	|  |  |  |     |      move.l d0,-(sp)
    f26c:	|  |  |  |     |      jsr f4a0 <strcmp>
    f272:	|  |  |  |     |      addq.l #8,sp
    f274:	|  |  |  |     |      tst.l d0
    f276:	|  |  |  |     |  /-- bne.s f290 <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
    f278:	|  |  |  |     |  |   move.l sp,d0
    f27a:	|  |  |  |     |  |   addq.l #8,d0
    f27c:	|  |  |  |     |  |   move.l d0,-(sp)
    f27e:	|  |  |  |     |  |   jsr f3ac <stringToInt>
    f284:	|  |  |  |     |  |   addq.l #4,sp
    f286:	|  |  |  |     |  |   move.l d0,d0
    f288:	|  |  |  |     |  |   move.w d0,17c00 <gameSettings+0x12>
    f28e:	|  |  |  |     +--|-- bra.s f2f6 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
    f290:	|  |  |  |     |  \-> pea 15c60 <zbuffer.c.4facf542+0x5a8>
    f296:	|  |  |  |     |      move.l sp,d0
    f298:	|  |  |  |     |      addi.l #269,d0
    f29e:	|  |  |  |     |      move.l d0,-(sp)
    f2a0:	|  |  |  |     |      jsr f4a0 <strcmp>
    f2a6:	|  |  |  |     |      addq.l #8,sp
    f2a8:	|  |  |  |     |      tst.l d0
    f2aa:	|  |  |  |     |  /-- bne.s f2c4 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
    f2ac:	|  |  |  |     |  |   move.l sp,d0
    f2ae:	|  |  |  |     |  |   addq.l #8,d0
    f2b0:	|  |  |  |     |  |   move.l d0,-(sp)
    f2b2:	|  |  |  |     |  |   jsr f3ac <stringToInt>
    f2b8:	|  |  |  |     |  |   addq.l #4,sp
    f2ba:	|  |  |  |     |  |   move.l d0,d0
    f2bc:	|  |  |  |     |  |   move.w d0,17c02 <gameSettings+0x14>
    f2c2:	|  |  |  |     +--|-- bra.s f2f6 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
    f2c4:	|  |  |  |     |  \-> pea 15c6e <zbuffer.c.4facf542+0x5b6>
    f2ca:	|  |  |  |     |      move.l sp,d0
    f2cc:	|  |  |  |     |      addi.l #269,d0
    f2d2:	|  |  |  |     |      move.l d0,-(sp)
    f2d4:	|  |  |  |     |      jsr f4a0 <strcmp>
    f2da:	|  |  |  |     |      addq.l #8,sp
    f2dc:	|  |  |  |     |      tst.l d0
    f2de:	|  |  |  |     +----- bne.s f2f6 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
    f2e0:	|  |  |  |     |      move.l sp,d0
    f2e2:	|  |  |  |     |      addq.l #8,d0
    f2e4:	|  |  |  |     |      move.l d0,-(sp)
    f2e6:	|  |  |  |     |      jsr f3ac <stringToInt>
    f2ec:	|  |  |  |     |      addq.l #4,sp
    f2ee:	|  |  |  |     |      move.l d0,d0
    f2f0:	|  |  |  |     |      move.w d0,17c04 <gameSettings+0x16>
					}
				}
				here = 0;
    f2f6:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
    f2fa:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
    f2fe:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
    f302:	|  |  |  |            clr.b 8(sp)
				break;
    f306:	|  |  |  |  /-------- bra.s f37e <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
    f308:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
    f30e:	|  |  |     |         clr.b 571(sp)
				break;
    f312:	|  |  |     +-------- bra.s f37e <readIniFile+0x358>

				default:
				if (doingSecond) {
    f314:	|  |  \-----|-------> tst.w 566(sp)
    f318:	|  |        |  /----- beq.s f34c <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
    f31a:	|  |        |  |      move.b 571(sp),d0
    f31e:	|  |        |  |      move.b d0,d1
    f320:	|  |        |  |      addq.b #1,d1
    f322:	|  |        |  |      move.b d1,571(sp)
    f326:	|  |        |  |      move.b d0,d0
    f328:	|  |        |  |      andi.l #255,d0
    f32e:	|  |        |  |      lea 572(sp),a0
    f332:	|  |        |  |      adda.l d0,a0
    f334:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
    f33a:	|  |        |  |      moveq #0,d0
    f33c:	|  |        |  |      move.b 571(sp),d0
    f340:	|  |        |  |      lea 572(sp),a0
    f344:	|  |        |  |      adda.l d0,a0
    f346:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
    f34a:	|  |        |  |  /-- bra.s f37c <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
    f34c:	|  |        |  \--|-> move.b 571(sp),d0
    f350:	|  |        |     |   move.b d0,d1
    f352:	|  |        |     |   addq.b #1,d1
    f354:	|  |        |     |   move.b d1,571(sp)
    f358:	|  |        |     |   move.b d0,d0
    f35a:	|  |        |     |   andi.l #255,d0
    f360:	|  |        |     |   lea 572(sp),a0
    f364:	|  |        |     |   adda.l d0,a0
    f366:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
    f36c:	|  |        |     |   moveq #0,d0
    f36e:	|  |        |     |   move.b 571(sp),d0
    f372:	|  |        |     |   lea 572(sp),a0
    f376:	|  |        |     |   adda.l d0,a0
    f378:	|  |        |     |   clr.b -307(a0)
				break;
    f37c:	|  |        |     \-> nop
			}
		} while (keepGoing);
    f37e:	|  |        \-------> tst.w 568(sp)
    f382:	|  \----------------- bne.w f116 <readIniFile+0xf0>

		Close(fp);
    f386:	|                     move.l 546(sp),526(sp)
    f38c:	|                     move.l 17b30 <DOSBase>,d0
    f392:	|                     movea.l d0,a6
    f394:	|                     move.l 526(sp),d1
    f398:	|                     jsr -36(a6)
    f39c:	|                     move.l d0,522(sp)
	}
}
    f3a0:	\-------------------> nop
    f3a2:	                      move.l (sp)+,d2
    f3a4:	                      movea.l (sp)+,a6
    f3a6:	                      lea 564(sp),sp
    f3aa:	                      rts

0000f3ac <stringToInt>:

unsigned int stringToInt (char * s) {
    f3ac:	             subq.l #8,sp
	int i = 0;
    f3ae:	             clr.l 4(sp)
	BOOL negative = FALSE;
    f3b2:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
    f3b6:	/----------> movea.l 12(sp),a0
    f3ba:	|            move.b (a0),d0
    f3bc:	|            cmpi.b #47,d0
    f3c0:	|        /-- ble.s f3f8 <stringToInt+0x4c>
    f3c2:	|        |   movea.l 12(sp),a0
    f3c6:	|        |   move.b (a0),d0
    f3c8:	|        |   cmpi.b #57,d0
    f3cc:	|        +-- bgt.s f3f8 <stringToInt+0x4c>
			i *= 10;
    f3ce:	|        |   move.l 4(sp),d1
    f3d2:	|        |   move.l d1,d0
    f3d4:	|        |   add.l d0,d0
    f3d6:	|        |   add.l d0,d0
    f3d8:	|        |   add.l d1,d0
    f3da:	|        |   add.l d0,d0
    f3dc:	|        |   move.l d0,4(sp)
			i += *s - '0';
    f3e0:	|        |   movea.l 12(sp),a0
    f3e4:	|        |   move.b (a0),d0
    f3e6:	|        |   ext.w d0
    f3e8:	|        |   movea.w d0,a0
    f3ea:	|        |   moveq #-48,d0
    f3ec:	|        |   add.l a0,d0
    f3ee:	|        |   add.l d0,4(sp)
			s ++;
    f3f2:	|        |   addq.l #1,12(sp)
    f3f6:	|  /-----|-- bra.s f430 <stringToInt+0x84>
		} else if (*s == '-') {
    f3f8:	|  |     \-> movea.l 12(sp),a0
    f3fc:	|  |         move.b (a0),d0
    f3fe:	|  |         cmpi.b #45,d0
    f402:	|  |     /-- bne.s f41c <stringToInt+0x70>
			negative = ! negative;
    f404:	|  |     |   tst.w 2(sp)
    f408:	|  |     |   seq d0
    f40a:	|  |     |   neg.b d0
    f40c:	|  |     |   move.b d0,d0
    f40e:	|  |     |   andi.w #255,d0
    f412:	|  |     |   move.w d0,2(sp)
			s++;
    f416:	|  |     |   addq.l #1,12(sp)
    f41a:	+--|-----|-- bra.s f3b6 <stringToInt+0xa>
		} else {
			if (negative)
    f41c:	|  |     \-> tst.w 2(sp)
    f420:	|  |     /-- beq.s f42a <stringToInt+0x7e>
				return -i;
    f422:	|  |     |   move.l 4(sp),d0
    f426:	|  |     |   neg.l d0
    f428:	|  |  /--|-- bra.s f432 <stringToInt+0x86>
			return i;
    f42a:	|  |  |  \-> move.l 4(sp),d0
    f42e:	|  |  +----- bra.s f432 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
    f430:	\--\--|----X bra.s f3b6 <stringToInt+0xa>
		}
	}
    f432:	      \----> addq.l #8,sp
    f434:	             rts

0000f436 <fileExists>:
 *  Helper functions that don't depend on other source files.
 */
#include <proto/dos.h>
#include "helpers.h"

BYTE fileExists(const char * file) {
    f436:	    lea -28(sp),sp
    f43a:	    move.l a6,-(sp)
    f43c:	    move.l d2,-(sp)
	BPTR tester;
	BYTE retval = 0;
    f43e:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
    f442:	    move.l 40(sp),30(sp)
    f448:	    move.l #1005,26(sp)
    f450:	    move.l 17b30 <DOSBase>,d0
    f456:	    movea.l d0,a6
    f458:	    move.l 30(sp),d1
    f45c:	    move.l 26(sp),d2
    f460:	    jsr -30(a6)
    f464:	    move.l d0,22(sp)
    f468:	    move.l 22(sp),d0
    f46c:	    move.l d0,18(sp)
	if (tester) {
    f470:	/-- beq.s f492 <fileExists+0x5c>
		retval = 1;
    f472:	|   move.b #1,35(sp)
		Close(tester);
    f478:	|   move.l 18(sp),14(sp)
    f47e:	|   move.l 17b30 <DOSBase>,d0
    f484:	|   movea.l d0,a6
    f486:	|   move.l 14(sp),d1
    f48a:	|   jsr -36(a6)
    f48e:	|   move.l d0,10(sp)
	}
	return retval;
    f492:	\-> move.b 35(sp),d0
    f496:	    move.l (sp)+,d2
    f498:	    movea.l (sp)+,a6
    f49a:	    lea 28(sp),sp
    f49e:	    rts

0000f4a0 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
    f4a0:	   /-- bra.s f4aa <strcmp+0xa>
    {
        s1++;
    f4a2:	/--|-> addq.l #1,4(sp)
        s2++;
    f4a6:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
    f4aa:	|  \-> movea.l 4(sp),a0
    f4ae:	|      move.b (a0),d0
    f4b0:	|  /-- beq.s f4c2 <strcmp+0x22>
    f4b2:	|  |   movea.l 4(sp),a0
    f4b6:	|  |   move.b (a0),d1
    f4b8:	|  |   movea.l 8(sp),a0
    f4bc:	|  |   move.b (a0),d0
    f4be:	|  |   cmp.b d1,d0
    f4c0:	\--|-- beq.s f4a2 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
    f4c2:	   \-> movea.l 4(sp),a0
    f4c6:	       move.b (a0),d0
    f4c8:	       moveq #0,d1
    f4ca:	       move.b d0,d1
    f4cc:	       movea.l 8(sp),a0
    f4d0:	       move.b (a0),d0
    f4d2:	       move.b d0,d0
    f4d4:	       andi.l #255,d0
    f4da:	       sub.l d0,d1
    f4dc:	       move.l d1,d0
}
    f4de:	       rts

0000f4e0 <strlen>:

long unsigned int strlen (const char *s) 
{  
    f4e0:	       subq.l #4,sp
	long unsigned int i = 0;
    f4e2:	       clr.l (sp)
	while(s[i]) i++; 
    f4e4:	   /-- bra.s f4e8 <strlen+0x8>
    f4e6:	/--|-> addq.l #1,(sp)
    f4e8:	|  \-> movea.l 8(sp),a0
    f4ec:	|      adda.l (sp),a0
    f4ee:	|      move.b (a0),d0
    f4f0:	\----- bne.s f4e6 <strlen+0x6>
	return(i);
    f4f2:	       move.l (sp),d0
}
    f4f4:	       addq.l #4,sp
    f4f6:	       rts

0000f4f8 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
    f4f8:	    nop
    f4fa:	/-> move.l 8(sp),d0
    f4fe:	|   move.l d0,d1
    f500:	|   addq.l #1,d1
    f502:	|   move.l d1,8(sp)
    f506:	|   movea.l 4(sp),a0
    f50a:	|   lea 1(a0),a1
    f50e:	|   move.l a1,4(sp)
    f512:	|   movea.l d0,a1
    f514:	|   move.b (a1),d0
    f516:	|   move.b d0,(a0)
    f518:	|   move.b (a0),d0
    f51a:	\-- bne.s f4fa <strcpy+0x2>
}
    f51c:	    nop
    f51e:	    rts

0000f520 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
    f520:	    lea -20(sp),sp
    f524:	    move.l a6,-(sp)
    f526:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
    f528:	    move.l 32(sp),-(sp)
    f52c:	    jsr f4e0 <strlen>
    f532:	    addq.l #4,sp
    f534:	    move.l d0,d2
    f536:	    move.l 36(sp),-(sp)
    f53a:	    jsr f4e0 <strlen>
    f540:	    addq.l #4,sp
    f542:	    add.l d2,d0
    f544:	    move.l d0,d1
    f546:	    addq.l #1,d1
    f548:	    move.l d1,20(sp)
    f54c:	    clr.l 16(sp)
    f550:	    move.l 17b28 <SysBase>,d0
    f556:	    movea.l d0,a6
    f558:	    move.l 20(sp),d0
    f55c:	    move.l 16(sp),d1
    f560:	    jsr -684(a6)
    f564:	    move.l d0,12(sp)
    f568:	    move.l 12(sp),d0
    f56c:	    move.l d0,8(sp)
	char * t = newString;
    f570:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
    f576:	    nop
    f578:	/-> move.l 32(sp),d0
    f57c:	|   move.l d0,d1
    f57e:	|   addq.l #1,d1
    f580:	|   move.l d1,32(sp)
    f584:	|   movea.l 24(sp),a0
    f588:	|   lea 1(a0),a1
    f58c:	|   move.l a1,24(sp)
    f590:	|   movea.l d0,a1
    f592:	|   move.b (a1),d0
    f594:	|   move.b d0,(a0)
    f596:	|   move.b (a0),d0
    f598:	\-- bne.s f578 <joinStrings+0x58>
	t--;
    f59a:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
    f59e:	    nop
    f5a0:	/-> move.l 36(sp),d0
    f5a4:	|   move.l d0,d1
    f5a6:	|   addq.l #1,d1
    f5a8:	|   move.l d1,36(sp)
    f5ac:	|   movea.l 24(sp),a0
    f5b0:	|   lea 1(a0),a1
    f5b4:	|   move.l a1,24(sp)
    f5b8:	|   movea.l d0,a1
    f5ba:	|   move.b (a1),d0
    f5bc:	|   move.b d0,(a0)
    f5be:	|   move.b (a0),d0
    f5c0:	\-- bne.s f5a0 <joinStrings+0x80>

	return newString;
    f5c2:	    move.l 8(sp),d0
}
    f5c6:	    move.l (sp)+,d2
    f5c8:	    movea.l (sp)+,a6
    f5ca:	    lea 20(sp),sp
    f5ce:	    rts

0000f5d0 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
    f5d0:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
    f5d4:	       moveq #10,d0
    f5d6:	       cmp.l 28(sp),d0
    f5da:	   /-- bne.s f5f8 <itoa+0x28>
    f5dc:	   |   tst.l 20(sp)
    f5e0:	   +-- bge.s f5f8 <itoa+0x28>
        *str++ = '-';
    f5e2:	   |   move.l 24(sp),d0
    f5e6:	   |   move.l d0,d1
    f5e8:	   |   addq.l #1,d1
    f5ea:	   |   move.l d1,24(sp)
    f5ee:	   |   movea.l d0,a0
    f5f0:	   |   move.b #45,(a0)
        value *= -1;
    f5f4:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
    f5f8:	   \-> move.l 24(sp),12(sp)
    f5fe:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
    f604:	   /-> move.l 20(sp),d0
    f608:	   |   move.l 28(sp),-(sp)
    f60c:	   |   move.l d0,-(sp)
    f60e:	   |   jsr 12aa6 <__modsi3>
    f614:	   |   addq.l #8,sp
    f616:	   |   movea.l d0,a1
    f618:	   |   move.l 12(sp),d0
    f61c:	   |   move.l d0,d1
    f61e:	   |   addq.l #1,d1
    f620:	   |   move.l d1,12(sp)
    f624:	   |   lea 15c78 <zbuffer.c.4facf542+0x5c0>,a0
    f62a:	   |   move.b (0,a1,a0.l),d1
    f62e:	   |   movea.l d0,a0
    f630:	   |   move.b d1,(a0)
        value /= base;
    f632:	   |   move.l 28(sp),-(sp)
    f636:	   |   move.l 24(sp),-(sp)
    f63a:	   |   jsr 12a78 <__divsi3>
    f640:	   |   addq.l #8,sp
    f642:	   |   move.l d0,20(sp)
    } while (value);
    f646:	   \-- bne.s f604 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
    f648:	       move.l 12(sp),d0
    f64c:	       move.l d0,d1
    f64e:	       subq.l #1,d1
    f650:	       move.l d1,12(sp)
    f654:	       movea.l d0,a0
    f656:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
    f658:	       move.l 4(sp),8(sp)
    f65e:	   /-- bra.s f684 <itoa+0xb4>
        char temp = *low;
    f660:	/--|-> movea.l 8(sp),a0
    f664:	|  |   move.b (a0),3(sp)
        *low = *ptr;
    f668:	|  |   movea.l 12(sp),a0
    f66c:	|  |   move.b (a0),d0
    f66e:	|  |   movea.l 8(sp),a0
    f672:	|  |   move.b d0,(a0)
        *ptr = temp;
    f674:	|  |   movea.l 12(sp),a0
    f678:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
    f67c:	|  |   addq.l #1,8(sp)
    f680:	|  |   subq.l #1,12(sp)
    f684:	|  \-> move.l 8(sp),d0
    f688:	|      cmp.l 12(sp),d0
    f68c:	\----- bcs.s f660 <itoa+0x90>
    }
    return rc;
    f68e:	       move.l 4(sp),d0
}
    f692:	       lea 16(sp),sp
    f696:	       rts

0000f698 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
    f698:	                            lea -40(sp),sp
    f69c:	                            move.l d2,-(sp)
    char* s = str;
    f69e:	                            move.l 48(sp),40(sp)
    const char* p = format;
    f6a4:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
    f6aa:	   /----------------------- bra.w f7de <vsprintf2+0x146>
        if (*p == '%') {
    f6ae:	/--|----------------------> movea.l 36(sp),a0
    f6b2:	|  |                        move.b (a0),d0
    f6b4:	|  |                        cmpi.b #37,d0
    f6b8:	|  |  /-------------------- bne.w f7c4 <vsprintf2+0x12c>
            switch (*++p) {
    f6bc:	|  |  |                     addq.l #1,36(sp)
    f6c0:	|  |  |                     movea.l 36(sp),a0
    f6c4:	|  |  |                     move.b (a0),d0
    f6c6:	|  |  |                     ext.w d0
    f6c8:	|  |  |                     movea.w d0,a0
    f6ca:	|  |  |                     moveq #115,d0
    f6cc:	|  |  |                     cmp.l a0,d0
    f6ce:	|  |  |           /-------- beq.s f746 <vsprintf2+0xae>
    f6d0:	|  |  |           |         moveq #115,d1
    f6d2:	|  |  |           |         cmp.l a0,d1
    f6d4:	|  |  |  /--------|-------- blt.w f7ac <vsprintf2+0x114>
    f6d8:	|  |  |  |        |         moveq #99,d2
    f6da:	|  |  |  |        |         cmp.l a0,d2
    f6dc:	|  |  |  |  /-----|-------- beq.w f784 <vsprintf2+0xec>
    f6e0:	|  |  |  |  |     |         moveq #100,d0
    f6e2:	|  |  |  |  |     |         cmp.l a0,d0
    f6e4:	|  |  |  +--|-----|-------- bne.w f7ac <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
    f6e8:	|  |  |  |  |     |         addq.l #4,56(sp)
    f6ec:	|  |  |  |  |     |         movea.l 56(sp),a0
    f6f0:	|  |  |  |  |     |         move.l (a0),d0
    f6f2:	|  |  |  |  |     |         move.l d0,d1
    f6f4:	|  |  |  |  |     |         subq.l #1,d1
    f6f6:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
    f6fa:	|  |  |  |  |     |         pea a <_start+0xa>
    f6fe:	|  |  |  |  |     |         lea 8(sp),a0
    f702:	|  |  |  |  |     |         move.l a0,-(sp)
    f704:	|  |  |  |  |     |         move.l 32(sp),-(sp)
    f708:	|  |  |  |  |     |         jsr f5d0 <itoa>
    f70e:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
    f712:	|  |  |  |  |     |         lea 44(sp),a0
    f716:	|  |  |  |  |     |         lea -40(a0),a0
    f71a:	|  |  |  |  |     |         move.l a0,28(sp)
    f71e:	|  |  |  |  |     |     /-- bra.s f73a <vsprintf2+0xa2>
                        *s++ = *b;
    f720:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
    f724:	|  |  |  |  |     |  |  |   move.l d0,d1
    f726:	|  |  |  |  |     |  |  |   addq.l #1,d1
    f728:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
    f72c:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
    f730:	|  |  |  |  |     |  |  |   move.b (a0),d1
    f732:	|  |  |  |  |     |  |  |   movea.l d0,a0
    f734:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
    f736:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
    f73a:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
    f73e:	|  |  |  |  |     |  |      move.b (a0),d0
    f740:	|  |  |  |  |     |  \----- bne.s f720 <vsprintf2+0x88>
                    }
                    break;
    f742:	|  |  |  |  |  /--|-------- bra.w f7da <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
    f746:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
    f74a:	|  |  |  |  |  |            movea.l 56(sp),a0
    f74e:	|  |  |  |  |  |            move.l (a0),d0
    f750:	|  |  |  |  |  |            move.l d0,d1
    f752:	|  |  |  |  |  |            subq.l #1,d1
    f754:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
    f758:	|  |  |  |  |  |        /-- bra.s f77a <vsprintf2+0xe2>
                        *s++ = *sval++;
    f75a:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
    f75e:	|  |  |  |  |  |     |  |   move.l d1,d2
    f760:	|  |  |  |  |  |     |  |   addq.l #1,d2
    f762:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
    f766:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
    f76a:	|  |  |  |  |  |     |  |   move.l d0,d2
    f76c:	|  |  |  |  |  |     |  |   addq.l #1,d2
    f76e:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
    f772:	|  |  |  |  |  |     |  |   movea.l d1,a0
    f774:	|  |  |  |  |  |     |  |   move.b (a0),d1
    f776:	|  |  |  |  |  |     |  |   movea.l d0,a0
    f778:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
    f77a:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
    f77e:	|  |  |  |  |  |     |      move.b (a0),d0
    f780:	|  |  |  |  |  |     \----- bne.s f75a <vsprintf2+0xc2>
                    }
                    break;
    f782:	|  |  |  |  |  +----------- bra.s f7da <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
    f784:	|  |  |  |  \--|----------> addq.l #4,56(sp)
    f788:	|  |  |  |     |            movea.l 56(sp),a0
    f78c:	|  |  |  |     |            move.l (a0),d0
    f78e:	|  |  |  |     |            move.l d0,d1
    f790:	|  |  |  |     |            subq.l #1,d1
    f792:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
    f796:	|  |  |  |     |            move.l 40(sp),d0
    f79a:	|  |  |  |     |            move.l d0,d2
    f79c:	|  |  |  |     |            addq.l #1,d2
    f79e:	|  |  |  |     |            move.l d2,40(sp)
    f7a2:	|  |  |  |     |            move.l 24(sp),d1
    f7a6:	|  |  |  |     |            movea.l d0,a0
    f7a8:	|  |  |  |     |            move.b d1,(a0)
                    break;
    f7aa:	|  |  |  |     +----------- bra.s f7da <vsprintf2+0x142>
                default:
                    *s++ = *p;
    f7ac:	|  |  |  \-----|----------> move.l 40(sp),d0
    f7b0:	|  |  |        |            move.l d0,d1
    f7b2:	|  |  |        |            addq.l #1,d1
    f7b4:	|  |  |        |            move.l d1,40(sp)
    f7b8:	|  |  |        |            movea.l 36(sp),a0
    f7bc:	|  |  |        |            move.b (a0),d1
    f7be:	|  |  |        |            movea.l d0,a0
    f7c0:	|  |  |        |            move.b d1,(a0)
                    break;
    f7c2:	|  |  |        +----------- bra.s f7da <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
    f7c4:	|  |  \--------|----------> move.l 40(sp),d0
    f7c8:	|  |           |            move.l d0,d1
    f7ca:	|  |           |            addq.l #1,d1
    f7cc:	|  |           |            move.l d1,40(sp)
    f7d0:	|  |           |            movea.l 36(sp),a0
    f7d4:	|  |           |            move.b (a0),d1
    f7d6:	|  |           |            movea.l d0,a0
    f7d8:	|  |           |            move.b d1,(a0)
        }
        p++;
    f7da:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
    f7de:	|  \----------------------> movea.l 36(sp),a0
    f7e2:	|                           move.b (a0),d0
    f7e4:	\-------------------------- bne.w f6ae <vsprintf2+0x16>
    }
    *s = '\0';
    f7e8:	                            movea.l 40(sp),a0
    f7ec:	                            clr.b (a0)
    return s - str;
    f7ee:	                            move.l 40(sp),d0
    f7f2:	                            sub.l 48(sp),d0
}
    f7f6:	                            move.l (sp)+,d2
    f7f8:	                            lea 40(sp),sp
    f7fc:	                            rts

0000f7fe <sprintf>:

int sprintf(char* str, const char* format, ...) {
    f7fe:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
    f800:	moveq #16,d0
    f802:	add.l sp,d0
    f804:	move.l d0,d1
    f806:	addq.l #4,d1
    f808:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
    f80c:	move.l 16(sp),d0
    f810:	move.l 4(sp),-(sp)
    f814:	move.l d0,-(sp)
    f816:	move.l 20(sp),-(sp)
    f81a:	jsr f698 <vsprintf2>
    f820:	lea 12(sp),sp
    f824:	move.l d0,(sp)
    va_end(args);
    f826:	clr.l 4(sp)

    return done;
    f82a:	move.l (sp),d0
}
    f82c:	addq.l #8,sp
    f82e:	rts

0000f830 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
    f830:	       lea -20(sp),sp
    f834:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
    f836:	       moveq #12,d0
    f838:	       move.l d0,20(sp)
    f83c:	       clr.l 16(sp)
    f840:	       move.l 17b28 <SysBase>,d0
    f846:	       movea.l d0,a6
    f848:	       move.l 20(sp),d0
    f84c:	       move.l 16(sp),d1
    f850:	       jsr -684(a6)
    f854:	       move.l d0,12(sp)
    f858:	       move.l 12(sp),d0
    f85c:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
    f860:	   /-- bne.s f866 <addVarToStack+0x36>
    f862:	   |   clr.w d0
    f864:	/--|-- bra.s f8ae <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
    f866:	|  \-> move.l 8(sp),d0
    f86a:	|      move.l d0,-(sp)
    f86c:	|      move.l 32(sp),-(sp)
    f870:	|      jsr 10392 <copyMain>
    f876:	|      addq.l #8,sp
    f878:	|      tst.w d0
    f87a:	|  /-- bne.s f896 <addVarToStack+0x66>
        FreeVec(newStack);
    f87c:	|  |   move.l 8(sp),4(sp)
    f882:	|  |   move.l 17b28 <SysBase>,d0
    f888:	|  |   movea.l d0,a6
    f88a:	|  |   movea.l 4(sp),a1
    f88e:	|  |   jsr -690(a6)
        return FALSE;
    f892:	|  |   clr.w d0
    f894:	+--|-- bra.s f8ae <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
    f896:	|  \-> movea.l 32(sp),a0
    f89a:	|      move.l (a0),d0
    f89c:	|      movea.l 8(sp),a0
    f8a0:	|      move.l d0,8(a0)
    *thisStack = newStack;
    f8a4:	|      movea.l 32(sp),a0
    f8a8:	|      move.l 8(sp),(a0)
    return TRUE;
    f8ac:	|      moveq #1,d0
}
    f8ae:	\----> movea.l (sp)+,a6
    f8b0:	       lea 20(sp),sp
    f8b4:	       rts

0000f8b6 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
    f8b6:	       lea -16(sp),sp
    f8ba:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
    f8bc:	       moveq #12,d0
    f8be:	       move.l d0,16(sp)
    f8c2:	       clr.l 12(sp)
    f8c6:	       move.l 17b28 <SysBase>,d0
    f8cc:	       movea.l d0,a6
    f8ce:	       move.l 16(sp),d0
    f8d2:	       move.l 12(sp),d1
    f8d6:	       jsr -684(a6)
    f8da:	       move.l d0,8(sp)
    f8de:	       move.l 8(sp),d0
    f8e2:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
    f8e6:	   /-- bne.s f8ec <addVarToStackQuick+0x36>
    f8e8:	   |   clr.w d0
    f8ea:	/--|-- bra.s f922 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
    f8ec:	|  \-> move.l 4(sp),d0
    f8f0:	|      pea 8 <_start+0x8>
    f8f4:	|      move.l 28(sp),-(sp)
    f8f8:	|      move.l d0,-(sp)
    f8fa:	|      jsr 11ffc <memcpy>
    f900:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
    f904:	|      movea.l 24(sp),a0
    f908:	|      clr.l (a0)

    newStack->next = *thisStack;
    f90a:	|      movea.l 28(sp),a0
    f90e:	|      move.l (a0),d0
    f910:	|      movea.l 4(sp),a0
    f914:	|      move.l d0,8(a0)
    *thisStack = newStack;
    f918:	|      movea.l 28(sp),a0
    f91c:	|      move.l 4(sp),(a0)
    return TRUE;
    f920:	|      moveq #1,d0
}
    f922:	\----> movea.l (sp)+,a6
    f924:	       lea 16(sp),sp
    f928:	       rts

0000f92a <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
    f92a:	       lea -16(sp),sp
    f92e:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
    f930:	       movea.l 24(sp),a0
    f934:	       move.l (a0),d0
    f936:	       moveq #1,d1
    f938:	       cmp.l d0,d1
    f93a:	   /-- bne.s f964 <addVariablesInSecond+0x3a>
    f93c:	   |   movea.l 28(sp),a0
    f940:	   |   move.l (a0),d0
    f942:	   |   moveq #1,d1
    f944:	   |   cmp.l d0,d1
    f946:	   +-- bne.s f964 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
    f948:	   |   movea.l 28(sp),a0
    f94c:	   |   move.l 4(a0),d1
    f950:	   |   movea.l 24(sp),a0
    f954:	   |   move.l 4(a0),d0
    f958:	   |   add.l d1,d0
    f95a:	   |   movea.l 28(sp),a0
    f95e:	   |   move.l d0,4(a0)
    f962:	/--|-- bra.s f9de <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
    f964:	|  \-> move.l 24(sp),-(sp)
    f968:	|      jsr 105ca <getTextFromAnyVar>
    f96e:	|      addq.l #4,sp
    f970:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
    f974:	|      move.l 28(sp),-(sp)
    f978:	|      jsr 105ca <getTextFromAnyVar>
    f97e:	|      addq.l #4,sp
    f980:	|      move.l d0,12(sp)

		unlinkVar(var2);
    f984:	|      move.l 28(sp),-(sp)
    f988:	|      jsr 10242 <unlinkVar>
    f98e:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
    f990:	|      move.l 12(sp),-(sp)
    f994:	|      move.l 20(sp),-(sp)
    f998:	|      jsr f520 <joinStrings>
    f99e:	|      addq.l #8,sp
    f9a0:	|      movea.l 28(sp),a0
    f9a4:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
    f9a8:	|      movea.l 28(sp),a0
    f9ac:	|      moveq #3,d0
    f9ae:	|      move.l d0,(a0)
		FreeVec(string1);
    f9b0:	|      move.l 16(sp),8(sp)
    f9b6:	|      move.l 17b28 <SysBase>,d0
    f9bc:	|      movea.l d0,a6
    f9be:	|      movea.l 8(sp),a1
    f9c2:	|      jsr -690(a6)
		FreeVec(string2);
    f9c6:	|      move.l 12(sp),4(sp)
    f9cc:	|      move.l 17b28 <SysBase>,d0
    f9d2:	|      movea.l d0,a6
    f9d4:	|      movea.l 4(sp),a1
    f9d8:	|      jsr -690(a6)
	}
}
    f9dc:	|      nop
    f9de:	\----> nop
    f9e0:	       movea.l (sp)+,a6
    f9e2:	       lea 16(sp),sp
    f9e6:	       rts

0000f9e8 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
    f9e8:	movea.l 8(sp),a0
    f9ec:	move.l 4(a0),-(sp)
    f9f0:	move.l (a0),-(sp)
    f9f2:	movea.l 12(sp),a0
    f9f6:	move.l 4(a0),-(sp)
    f9fa:	move.l (a0),-(sp)
    f9fc:	jsr fa1e <compareVars>
    fa02:	lea 16(sp),sp
    fa06:	move.l d0,-(sp)
    fa08:	pea 1 <_start+0x1>
    fa0c:	move.l 16(sp),-(sp)
    fa10:	jsr 108e6 <setVariable>
    fa16:	lea 12(sp),sp
}
    fa1a:	nop
    fa1c:	rts

0000fa1e <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
    fa1e:	       subq.l #4,sp
	int re = 0;
    fa20:	       clr.l (sp)
	if (var1.varType == var2.varType) {
    fa22:	       move.l 8(sp),d1
    fa26:	       move.l 16(sp),d0
    fa2a:	       cmp.l d1,d0
    fa2c:	/----- bne.w faf4 <compareVars+0xd6>
		switch (var1.varType) {
    fa30:	|      move.l 8(sp),d0
    fa34:	|      moveq #9,d1
    fa36:	|      cmp.l d0,d1
    fa38:	|  /-- bcs.w fadc <compareVars+0xbe>
    fa3c:	|  |   add.l d0,d0
    fa3e:	|  |   movea.l d0,a0
    fa40:	|  |   adda.l #64076,a0
    fa46:	|  |   move.w (a0),d0
    fa48:	|  |   jmp (fa4c <compareVars+0x2e>,pc,d0.w)
    fa4c:	|  |   ori.b #-112,(a4)
    fa50:	|  |   ori.l #5243024,(a0)
    fa56:	|  |   ori.l #7733392,(a0)
    fa5c:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
    fa62:	|  |   move.l d0,(sp)
			break;
    fa64:	+--|-- bra.w faf4 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
    fa68:	|  |   move.l 12(sp),d1
    fa6c:	|  |   move.l 20(sp),d0
    fa70:	|  |   cmp.l d1,d0
    fa72:	|  |   seq d0
    fa74:	|  |   neg.b d0
    fa76:	|  |   move.b d0,d0
    fa78:	|  |   andi.l #255,d0
    fa7e:	|  |   move.l d0,(sp)
			break;
    fa80:	+--|-- bra.s faf4 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
    fa82:	|  |   move.l 12(sp),d1
    fa86:	|  |   move.l 20(sp),d0
    fa8a:	|  |   cmp.l d1,d0
    fa8c:	|  |   seq d0
    fa8e:	|  |   neg.b d0
    fa90:	|  |   move.b d0,d0
    fa92:	|  |   andi.l #255,d0
    fa98:	|  |   move.l d0,(sp)
			break;
    fa9a:	+--|-- bra.s faf4 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
    fa9c:	|  |   move.l 20(sp),d1
    faa0:	|  |   move.l 12(sp),d0
    faa4:	|  |   move.l d1,-(sp)
    faa6:	|  |   move.l d0,-(sp)
    faa8:	|  |   jsr f4a0 <strcmp>
    faae:	|  |   addq.l #8,sp
    fab0:	|  |   tst.l d0
    fab2:	|  |   seq d0
    fab4:	|  |   neg.b d0
    fab6:	|  |   move.b d0,d0
    fab8:	|  |   andi.l #255,d0
    fabe:	|  |   move.l d0,(sp)
			break;
    fac0:	+--|-- bra.s faf4 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
    fac2:	|  |   move.l 12(sp),d1
    fac6:	|  |   move.l 20(sp),d0
    faca:	|  |   cmp.l d1,d0
    facc:	|  |   seq d0
    face:	|  |   neg.b d0
    fad0:	|  |   move.b d0,d0
    fad2:	|  |   andi.l #255,d0
    fad8:	|  |   move.l d0,(sp)
			break;
    fada:	+--|-- bra.s faf4 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
    fadc:	|  \-> move.l 12(sp),d1
    fae0:	|      move.l 20(sp),d0
    fae4:	|      cmp.l d1,d0
    fae6:	|      seq d0
    fae8:	|      neg.b d0
    faea:	|      move.b d0,d0
    faec:	|      andi.l #255,d0
    faf2:	|      move.l d0,(sp)
		}
	}
	return re;
    faf4:	\----> move.l (sp),d0
}
    faf6:	       addq.l #4,sp
    faf8:	       rts

0000fafa <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
    fafa:	             lea -16(sp),sp
    fafe:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
    fb00:	             movea.l 28(sp),a0
    fb04:	             moveq #6,d0
    fb06:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    fb08:	             moveq #12,d0
    fb0a:	             move.l d0,12(sp)
    fb0e:	             clr.l 8(sp)
    fb12:	             move.l 17b28 <SysBase>,d0
    fb18:	             movea.l d0,a6
    fb1a:	             move.l 12(sp),d0
    fb1e:	             move.l 8(sp),d1
    fb22:	             jsr -684(a6)
    fb26:	             move.l d0,4(sp)
    fb2a:	             move.l 4(sp),d0
    fb2e:	             movea.l 28(sp),a0
    fb32:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
    fb36:	             movea.l 28(sp),a0
    fb3a:	             move.l 4(a0),d0
    fb3e:	         /-- bne.s fb46 <copyStack+0x4c>
    fb40:	         |   clr.w d0
    fb42:	/--------|-- bra.w fbc8 <copyStack+0xce>
	to->varData.theStack->first = NULL;
    fb46:	|        \-> movea.l 28(sp),a0
    fb4a:	|            movea.l 4(a0),a0
    fb4e:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
    fb50:	|            movea.l 28(sp),a0
    fb54:	|            movea.l 4(a0),a0
    fb58:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
    fb5c:	|            movea.l 28(sp),a0
    fb60:	|            movea.l 4(a0),a0
    fb64:	|            moveq #1,d0
    fb66:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
    fb6a:	|            movea.l 24(sp),a0
    fb6e:	|            movea.l 4(a0),a0
    fb72:	|            move.l (a0),16(sp)

	while (a) {
    fb76:	|     /----- bra.s fbc0 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
    fb78:	|  /--|----> movea.l 28(sp),a0
    fb7c:	|  |  |      move.l 4(a0),d0
    fb80:	|  |  |      move.l d0,d1
    fb82:	|  |  |      move.l 16(sp),d0
    fb86:	|  |  |      move.l d1,-(sp)
    fb88:	|  |  |      move.l d0,-(sp)
    fb8a:	|  |  |      jsr f830 <addVarToStack>
    fb90:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
    fb92:	|  |  |      movea.l 28(sp),a0
    fb96:	|  |  |      movea.l 4(a0),a0
    fb9a:	|  |  |      move.l 4(a0),d0
    fb9e:	|  |  |  /-- bne.s fbb6 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
    fba0:	|  |  |  |   movea.l 28(sp),a0
    fba4:	|  |  |  |   movea.l 4(a0),a1
    fba8:	|  |  |  |   movea.l 28(sp),a0
    fbac:	|  |  |  |   movea.l 4(a0),a0
    fbb0:	|  |  |  |   move.l (a1),d0
    fbb2:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
    fbb6:	|  |  |  \-> movea.l 16(sp),a0
    fbba:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
    fbc0:	|  |  \----> tst.l 16(sp)
    fbc4:	|  \-------- bne.s fb78 <copyStack+0x7e>
	}

	return TRUE;
    fbc6:	|            moveq #1,d0
}
    fbc8:	\----------> movea.l (sp)+,a6
    fbca:	             lea 16(sp),sp
    fbce:	             rts

0000fbd0 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
    fbd0:	                lea -20(sp),sp
    fbd4:	                move.l a6,-(sp)
    fbd6:	                move.l 36(sp),d0
    fbda:	                move.w d0,d0
    fbdc:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
    fbe0:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
    fbe6:	                clr.l 16(sp)

    while (*huntVar) {
    fbea:	   /----------- bra.s fc68 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
    fbec:	/--|----------> movea.l 20(sp),a0
    fbf0:	|  |            movea.l (a0),a0
    fbf2:	|  |            movea.l 28(sp),a1
    fbf6:	|  |            move.l 4(a1),-(sp)
    fbfa:	|  |            move.l (a1),-(sp)
    fbfc:	|  |            move.l 4(a0),-(sp)
    fc00:	|  |            move.l (a0),-(sp)
    fc02:	|  |            jsr fa1e <compareVars>
    fc08:	|  |            lea 16(sp),sp
    fc0c:	|  |            tst.l d0
    fc0e:	|  |  /-------- beq.s fc5a <deleteVarFromStack+0x8a>
            killMe = *huntVar;
    fc10:	|  |  |         movea.l 20(sp),a0
    fc14:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
    fc18:	|  |  |         movea.l 12(sp),a0
    fc1c:	|  |  |         move.l 8(a0),d0
    fc20:	|  |  |         movea.l 20(sp),a0
    fc24:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
    fc26:	|  |  |         move.l 12(sp),d0
    fc2a:	|  |  |         move.l d0,-(sp)
    fc2c:	|  |  |         jsr 10242 <unlinkVar>
    fc32:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
    fc34:	|  |  |         move.l 12(sp),8(sp)
    fc3a:	|  |  |         move.l 17b28 <SysBase>,d0
    fc40:	|  |  |         movea.l d0,a6
    fc42:	|  |  |         movea.l 8(sp),a1
    fc46:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
    fc4a:	|  |  |         tst.w 6(sp)
    fc4e:	|  |  |     /-- bne.s fc54 <deleteVarFromStack+0x84>
    fc50:	|  |  |     |   moveq #1,d0
    fc52:	|  |  |  /--|-- bra.s fc76 <deleteVarFromStack+0xa6>
            reply++;
    fc54:	|  |  |  |  \-> addq.l #1,16(sp)
    fc58:	|  +--|--|----- bra.s fc68 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
    fc5a:	|  |  \--|----> movea.l 20(sp),a0
    fc5e:	|  |     |      move.l (a0),d0
    fc60:	|  |     |      move.l d0,d1
    fc62:	|  |     |      addq.l #8,d1
    fc64:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
    fc68:	|  \-----|----> movea.l 20(sp),a0
    fc6c:	|        |      move.l (a0),d0
    fc6e:	\--------|----- bne.w fbec <deleteVarFromStack+0x1c>
        }
    }

    return reply;
    fc72:	         |      move.l 16(sp),d0
}
    fc76:	         \----> movea.l (sp)+,a6
    fc78:	                lea 20(sp),sp
    fc7c:	                rts

0000fc7e <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
    fc7e:	       movea.l 4(sp),a0
    fc82:	       move.l 4(a0),d0
    fc86:	       cmp.l 8(sp),d0
    fc8a:	   /-- bhi.s fc90 <fastArrayGetByIndex+0x12>
    fc8c:	   |   moveq #0,d0
    fc8e:	/--|-- bra.s fc9e <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
    fc90:	|  \-> movea.l 4(sp),a0
    fc94:	|      move.l (a0),d1
    fc96:	|      move.l 8(sp),d0
    fc9a:	|      lsl.l #3,d0
    fc9c:	|      add.l d1,d0
}
    fc9e:	\----> rts

0000fca0 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
    fca0:	                lea -32(sp),sp
    fca4:	                move.l a6,-(sp)
    fca6:	                move.l a2,-(sp)
    struct persona *p = NULL;
    fca8:	                clr.l 36(sp)

    switch (thisVar->varType) {
    fcac:	                movea.l 44(sp),a0
    fcb0:	                move.l (a0),d0
    fcb2:	                moveq #8,d1
    fcb4:	                cmp.l d0,d1
    fcb6:	            /-- beq.s fcc4 <getCostumeFromVar+0x24>
    fcb8:	            |   moveq #9,d1
    fcba:	            |   cmp.l d0,d1
    fcbc:	   /--------|-- beq.w fd72 <getCostumeFromVar+0xd2>
    fcc0:	/--|--------|-- bra.w fd7c <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
    fcc4:	|  |        \-> moveq #8,d0
    fcc6:	|  |            move.l d0,28(sp)
    fcca:	|  |            clr.l 24(sp)
    fcce:	|  |            move.l 17b28 <SysBase>,d0
    fcd4:	|  |            movea.l d0,a6
    fcd6:	|  |            move.l 28(sp),d0
    fcda:	|  |            move.l 24(sp),d1
    fcde:	|  |            jsr -684(a6)
    fce2:	|  |            move.l d0,20(sp)
    fce6:	|  |            move.l 20(sp),d0
    fcea:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
    fcee:	|  |        /-- bne.s fcf6 <getCostumeFromVar+0x56>
    fcf0:	|  |        |   moveq #0,d0
    fcf2:	|  |  /-----|-- bra.w fda6 <getCostumeFromVar+0x106>
            p->numDirections = 1;
    fcf6:	|  |  |     \-> movea.l 36(sp),a0
    fcfa:	|  |  |         moveq #1,d1
    fcfc:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
    fd00:	|  |  |         moveq #12,d0
    fd02:	|  |  |         move.l d0,16(sp)
    fd06:	|  |  |         clr.l 12(sp)
    fd0a:	|  |  |         move.l 17b28 <SysBase>,d0
    fd10:	|  |  |         movea.l d0,a6
    fd12:	|  |  |         move.l 16(sp),d0
    fd16:	|  |  |         move.l 12(sp),d1
    fd1a:	|  |  |         jsr -684(a6)
    fd1e:	|  |  |         move.l d0,8(sp)
    fd22:	|  |  |         move.l 8(sp),d0
    fd26:	|  |  |         movea.l 36(sp),a0
    fd2a:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
    fd2c:	|  |  |         movea.l 36(sp),a0
    fd30:	|  |  |         move.l (a0),d0
    fd32:	|  |  |     /-- bne.s fd38 <getCostumeFromVar+0x98>
    fd34:	|  |  |     |   moveq #0,d0
    fd36:	|  |  +-----|-- bra.s fda6 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
    fd38:	|  |  |     \-> clr.l 32(sp)
    fd3c:	|  |  |     /-- bra.s fd68 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
    fd3e:	|  |  |  /--|-> movea.l 44(sp),a0
    fd42:	|  |  |  |  |   move.l 4(a0),d0
    fd46:	|  |  |  |  |   movea.l 36(sp),a0
    fd4a:	|  |  |  |  |   movea.l (a0),a0
    fd4c:	|  |  |  |  |   move.l 32(sp),d1
    fd50:	|  |  |  |  |   add.l d1,d1
    fd52:	|  |  |  |  |   add.l d1,d1
    fd54:	|  |  |  |  |   lea (0,a0,d1.l),a2
    fd58:	|  |  |  |  |   move.l d0,-(sp)
    fd5a:	|  |  |  |  |   jsr 587e <copyAnim>
    fd60:	|  |  |  |  |   addq.l #4,sp
    fd62:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
    fd64:	|  |  |  |  |   addq.l #1,32(sp)
    fd68:	|  |  |  |  \-> moveq #2,d1
    fd6a:	|  |  |  |      cmp.l 32(sp),d1
    fd6e:	|  |  |  \----- bge.s fd3e <getCostumeFromVar+0x9e>
            }
            break;
    fd70:	|  |  |     /-- bra.s fda2 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
    fd72:	|  \--|-----|-> movea.l 44(sp),a0
    fd76:	|     |     |   move.l 4(a0),d0
    fd7a:	|     +-----|-- bra.s fda6 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
    fd7c:	\-----|-----|-> movea.l 44(sp),a0
    fd80:	      |     |   move.l (a0),d0
    fd82:	      |     |   add.l d0,d0
    fd84:	      |     |   movea.l d0,a1
    fd86:	      |     |   adda.l d0,a1
    fd88:	      |     |   lea 16570 <typeName>,a0
    fd8e:	      |     |   move.l (0,a1,a0.l),d0
    fd92:	      |     |   move.l d0,-(sp)
    fd94:	      |     |   pea 15cea <zbuffer.c.4facf542+0x632>
    fd9a:	      |     |   jsr 12048 <KPrintF>
    fda0:	      |     |   addq.l #8,sp
    }

    return p;
    fda2:	      |     \-> move.l 36(sp),d0
}
    fda6:	      \-------> movea.l (sp)+,a2
    fda8:	                movea.l (sp)+,a6
    fdaa:	                lea 32(sp),sp
    fdae:	                rts

0000fdb0 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
    fdb0:	                lea -96(sp),sp
    fdb4:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
    fdb8:	                move.l 116(sp),-(sp)
    fdbc:	                pea 15d22 <zbuffer.c.4facf542+0x66a>
    fdc2:	                jsr f520 <joinStrings>
    fdc8:	                addq.l #8,sp
    fdca:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
    fdce:	            /-- bne.s fdd6 <getSavedGamesStack+0x26>
    fdd0:	            |   clr.w d0
    fdd2:	/-----------|-- bra.w ffea <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
    fdd6:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
    fdda:	|               move.l #89380,98(sp)
    fde2:	|               moveq #-2,d0
    fde4:	|               move.l d0,94(sp)
    fde8:	|               move.l 17b30 <DOSBase>,d0
    fdee:	|               movea.l d0,a6
    fdf0:	|               move.l 98(sp),d1
    fdf4:	|               move.l 94(sp),d2
    fdf8:	|               jsr -84(a6)
    fdfc:	|               move.l d0,90(sp)
    fe00:	|               move.l 90(sp),d0
    fe04:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
    fe08:	|           /-- bne.s fe10 <getSavedGamesStack+0x60>
    fe0a:	|           |   clr.w d0
    fe0c:	+-----------|-- bra.w ffea <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
    fe10:	|           \-> move.l #260,82(sp)
    fe18:	|               move.l #65536,78(sp)
    fe20:	|               move.l 17b28 <SysBase>,d0
    fe26:	|               movea.l d0,a6
    fe28:	|               move.l 82(sp),d0
    fe2c:	|               move.l 78(sp),d1
    fe30:	|               jsr -684(a6)
    fe34:	|               move.l d0,74(sp)
    fe38:	|               move.l 74(sp),d0
    fe3c:	|               move.l d0,70(sp)
	if (!fib) {
    fe40:	|           /-- bne.s fe5e <getSavedGamesStack+0xae>
		UnLock(dirLock);
    fe42:	|           |   move.l 86(sp),22(sp)
    fe48:	|           |   move.l 17b30 <DOSBase>,d0
    fe4e:	|           |   movea.l d0,a6
    fe50:	|           |   move.l 22(sp),d1
    fe54:	|           |   jsr -90(a6)
		return FALSE;
    fe58:	|           |   clr.w d0
    fe5a:	+-----------|-- bra.w ffea <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
    fe5e:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
    fe62:	|               move.l 86(sp),66(sp)
    fe68:	|               move.l 70(sp),62(sp)
    fe6e:	|               move.l 17b30 <DOSBase>,d0
    fe74:	|               movea.l d0,a6
    fe76:	|               move.l 66(sp),d1
    fe7a:	|               move.l 62(sp),d2
    fe7e:	|               jsr -102(a6)
    fe82:	|               move.l d0,58(sp)
    fe86:	|               move.l 58(sp),d0
    fe8a:	|  /----------- beq.w ff9e <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
    fe8e:	|  |        /-- bra.w ff6a <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
    fe92:	|  |  /-----|-> move.l 70(sp),d2
    fe96:	|  |  |     |   addq.l #8,d2
    fe98:	|  |  |     |   move.l 70(sp),d0
    fe9c:	|  |  |     |   addq.l #8,d0
    fe9e:	|  |  |     |   move.l d0,-(sp)
    fea0:	|  |  |     |   jsr f4e0 <strlen>
    fea6:	|  |  |     |   addq.l #4,sp
    fea8:	|  |  |     |   move.l d0,d3
    feaa:	|  |  |     |   move.l 116(sp),-(sp)
    feae:	|  |  |     |   jsr f4e0 <strlen>
    feb4:	|  |  |     |   addq.l #4,sp
    feb6:	|  |  |     |   move.l d3,d1
    feb8:	|  |  |     |   sub.l d0,d1
    feba:	|  |  |     |   move.l d2,d0
    febc:	|  |  |     |   add.l d1,d0
    febe:	|  |  |     |   move.l 116(sp),-(sp)
    fec2:	|  |  |     |   move.l d0,-(sp)
    fec4:	|  |  |     |   jsr f4a0 <strcmp>
    feca:	|  |  |     |   addq.l #8,sp
    fecc:	|  |  |     |   tst.l d0
    fece:	|  |  |     +-- bne.w ff6a <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
    fed2:	|  |  |     |   move.l 70(sp),d0
    fed6:	|  |  |     |   addq.l #8,d0
    fed8:	|  |  |     |   move.l d0,-(sp)
    feda:	|  |  |     |   jsr f4e0 <strlen>
    fee0:	|  |  |     |   addq.l #4,sp
    fee2:	|  |  |     |   move.l d0,d2
    fee4:	|  |  |     |   move.l 116(sp),-(sp)
    fee8:	|  |  |     |   jsr f4e0 <strlen>
    feee:	|  |  |     |   addq.l #4,sp
    fef0:	|  |  |     |   move.l d0,d1
    fef2:	|  |  |     |   move.l d2,d0
    fef4:	|  |  |     |   sub.l d1,d0
    fef6:	|  |  |     |   movea.l 70(sp),a0
    fefa:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
    fefe:	|  |  |     |   move.l 70(sp),d0
    ff02:	|  |  |     |   addq.l #8,d0
    ff04:	|  |  |     |   move.l d0,-(sp)
    ff06:	|  |  |     |   jsr 118 <decodeFilename>
    ff0c:	|  |  |     |   addq.l #4,sp
    ff0e:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
    ff12:	|  |  |     |   move.l 42(sp),-(sp)
    ff16:	|  |  |     |   lea 18(sp),a0
    ff1a:	|  |  |     |   move.l a0,-(sp)
    ff1c:	|  |  |     |   jsr 10216 <makeTextVar>
    ff22:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
    ff24:	|  |  |     |   move.l 42(sp),38(sp)
    ff2a:	|  |  |     |   move.l 17b28 <SysBase>,d0
    ff30:	|  |  |     |   movea.l d0,a6
    ff32:	|  |  |     |   movea.l 38(sp),a1
    ff36:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
    ff3a:	|  |  |     |   move.l 112(sp),d0
    ff3e:	|  |  |     |   move.l d0,-(sp)
    ff40:	|  |  |     |   lea 18(sp),a0
    ff44:	|  |  |     |   move.l a0,-(sp)
    ff46:	|  |  |     |   jsr f830 <addVarToStack>
    ff4c:	|  |  |     |   addq.l #8,sp
    ff4e:	|  |  |     |   tst.w d0
    ff50:	|  |  |  /--|-- beq.s ffa2 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
    ff52:	|  |  |  |  |   movea.l 112(sp),a0
    ff56:	|  |  |  |  |   move.l 4(a0),d0
    ff5a:	|  |  |  |  +-- bne.s ff6a <getSavedGamesStack+0x1ba>
    ff5c:	|  |  |  |  |   movea.l 112(sp),a0
    ff60:	|  |  |  |  |   move.l (a0),d0
    ff62:	|  |  |  |  |   movea.l 112(sp),a0
    ff66:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
    ff6a:	|  |  |  |  \-> move.l 86(sp),54(sp)
    ff70:	|  |  |  |      move.l 70(sp),50(sp)
    ff76:	|  |  |  |      move.l 17b30 <DOSBase>,d0
    ff7c:	|  |  |  |      movea.l d0,a6
    ff7e:	|  |  |  |      move.l 54(sp),d1
    ff82:	|  |  |  |      move.l 50(sp),d2
    ff86:	|  |  |  |      jsr -108(a6)
    ff8a:	|  |  |  |      move.l d0,46(sp)
    ff8e:	|  |  |  |      move.l 46(sp),d0
    ff92:	|  |  \--|----- bne.w fe92 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
    ff96:	|  |     |      move.w #1,106(sp)
    ff9c:	|  |     |  /-- bra.s ffa4 <getSavedGamesStack+0x1f4>
	}

cleanup:
    ff9e:	|  \-----|--|-> nop
    ffa0:	|        |  +-- bra.s ffa4 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
    ffa2:	|        \--|-> nop
	FreeVec(fib);
    ffa4:	|           \-> move.l 70(sp),34(sp)
    ffaa:	|               move.l 17b28 <SysBase>,d0
    ffb0:	|               movea.l d0,a6
    ffb2:	|               movea.l 34(sp),a1
    ffb6:	|               jsr -690(a6)
	UnLock(dirLock);
    ffba:	|               move.l 86(sp),30(sp)
    ffc0:	|               move.l 17b30 <DOSBase>,d0
    ffc6:	|               movea.l d0,a6
    ffc8:	|               move.l 30(sp),d1
    ffcc:	|               jsr -90(a6)
	FreeVec(pattern);
    ffd0:	|               move.l 102(sp),26(sp)
    ffd6:	|               move.l 17b28 <SysBase>,d0
    ffdc:	|               movea.l d0,a6
    ffde:	|               movea.l 26(sp),a1
    ffe2:	|               jsr -690(a6)
	return result;
    ffe6:	|               move.w 106(sp),d0
}
    ffea:	\-------------> movem.l (sp)+,d2-d3/a6
    ffee:	                lea 96(sp),sp
    fff2:	                rts

0000fff4 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
    fff4:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
    fff6:	       movea.l 20(sp),a0
    fffa:	       move.l (a0),d0
    fffc:	       cmp.l 16(sp),d0
   10000:	/----- beq.s 10064 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   10002:	|      move.l 16(sp),d0
   10006:	|      add.l d0,d0
   10008:	|      movea.l d0,a1
   1000a:	|      adda.l d0,a1
   1000c:	|      lea 16570 <typeName>,a0
   10012:	|      move.l (0,a1,a0.l),d0
   10016:	|      move.l d0,-(sp)
   10018:	|      pea 15d26 <zbuffer.c.4facf542+0x66e>
   1001e:	|      jsr f520 <joinStrings>
   10024:	|      addq.l #8,sp
   10026:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   1002a:	|      movea.l 20(sp),a0
   1002e:	|      move.l (a0),d0
   10030:	|      add.l d0,d0
   10032:	|      movea.l d0,a1
   10034:	|      adda.l d0,a1
   10036:	|      lea 16570 <typeName>,a0
   1003c:	|      move.l (0,a1,a0.l),d0
   10040:	|      move.l d0,-(sp)
   10042:	|      pea 15d68 <zbuffer.c.4facf542+0x6b0>
   10048:	|      jsr f520 <joinStrings>
   1004e:	|      addq.l #8,sp
   10050:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   10052:	|      move.l (sp),-(sp)
   10054:	|      move.l 8(sp),-(sp)
   10058:	|      jsr 12048 <KPrintF>
   1005e:	|      addq.l #8,sp

		return FALSE;
   10060:	|      clr.w d0
   10062:	|  /-- bra.s 10074 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   10064:	\--|-> movea.l 20(sp),a0
   10068:	   |   move.l 4(a0),d0
   1006c:	   |   movea.l 12(sp),a0
   10070:	   |   move.l d0,(a0)
	return TRUE;
   10072:	   |   moveq #1,d0
}
   10074:	   \-> addq.l #8,sp
   10076:	       rts

00010078 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   10078:	move.l 8(sp),-(sp)
   1007c:	jsr 3d86 <getNumberedString>
   10082:	addq.l #4,sp
   10084:	move.l d0,-(sp)
   10086:	move.l 8(sp),-(sp)
   1008a:	jsr 10216 <makeTextVar>
   10090:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   10092:	movea.l 4(sp),a0
   10096:	move.l 4(a0),d0
   1009a:	sne d0
   1009c:	neg.b d0
   1009e:	move.b d0,d0
   100a0:	andi.w #255,d0
}
   100a4:	rts

000100a6 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   100a6:	          subq.l #8,sp
    int size = stackSize(stacky);
   100a8:	          move.l 16(sp),-(sp)
   100ac:	          jsr 10954 <stackSize>
   100b2:	          addq.l #4,sp
   100b4:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   100b8:	          move.l 4(sp),-(sp)
   100bc:	          move.l 16(sp),-(sp)
   100c0:	          jsr 10110 <makeFastArraySize>
   100c6:	          addq.l #8,sp
   100c8:	          tst.w d0
   100ca:	      /-- bne.s 100d0 <makeFastArrayFromStack+0x2a>
   100cc:	      |   clr.w d0
   100ce:	/-----|-- bra.s 1010c <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   100d0:	|     \-> movea.l 16(sp),a0
   100d4:	|         move.l (a0),(sp)
    size = 0;
   100d6:	|         clr.l 4(sp)
    while (allV) {
   100da:	|     /-- bra.s 10106 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   100dc:	|  /--|-> movea.l 12(sp),a0
   100e0:	|  |  |   movea.l 4(a0),a0
   100e4:	|  |  |   move.l (a0),d1
   100e6:	|  |  |   move.l 4(sp),d0
   100ea:	|  |  |   lsl.l #3,d0
   100ec:	|  |  |   add.l d0,d1
   100ee:	|  |  |   move.l (sp),d0
   100f0:	|  |  |   move.l d1,-(sp)
   100f2:	|  |  |   move.l d0,-(sp)
   100f4:	|  |  |   jsr 10392 <copyMain>
   100fa:	|  |  |   addq.l #8,sp
        size++;
   100fc:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   10100:	|  |  |   movea.l (sp),a0
   10102:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   10106:	|  |  \-> tst.l (sp)
   10108:	|  \----- bne.s 100dc <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   1010a:	|         moveq #1,d0
}
   1010c:	\-------> addq.l #8,sp
   1010e:	          rts

00010110 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   10110:	          lea -28(sp),sp
   10114:	          move.l a6,-(sp)
    if (size < 0) {
   10116:	          tst.l 40(sp)
   1011a:	      /-- bge.s 10130 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   1011c:	      |   pea 15dad <zbuffer.c.4facf542+0x6f5>
   10122:	      |   jsr 12048 <KPrintF>
   10128:	      |   addq.l #4,sp
		return FALSE;
   1012a:	      |   clr.w d0
   1012c:	/-----|-- bra.w 1020e <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   10130:	|     \-> move.l 36(sp),-(sp)
   10134:	|         jsr 10242 <unlinkVar>
   1013a:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   1013c:	|         movea.l 36(sp),a0
   10140:	|         moveq #10,d0
   10142:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   10144:	|         moveq #12,d0
   10146:	|         move.l d0,24(sp)
   1014a:	|         clr.l 20(sp)
   1014e:	|         move.l 17b28 <SysBase>,d0
   10154:	|         movea.l d0,a6
   10156:	|         move.l 24(sp),d0
   1015a:	|         move.l 20(sp),d1
   1015e:	|         jsr -684(a6)
   10162:	|         move.l d0,16(sp)
   10166:	|         move.l 16(sp),d0
   1016a:	|         movea.l 36(sp),a0
   1016e:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   10172:	|         movea.l 36(sp),a0
   10176:	|         move.l 4(a0),d0
   1017a:	|     /-- bne.s 10182 <makeFastArraySize+0x72>
   1017c:	|     |   clr.w d0
   1017e:	+-----|-- bra.w 1020e <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   10182:	|     \-> move.l 40(sp),d0
   10186:	|         lsl.l #3,d0
   10188:	|         move.l d0,12(sp)
   1018c:	|         clr.l 8(sp)
   10190:	|         move.l 17b28 <SysBase>,d0
   10196:	|         movea.l d0,a6
   10198:	|         move.l 12(sp),d0
   1019c:	|         move.l 8(sp),d1
   101a0:	|         jsr -684(a6)
   101a4:	|         move.l d0,4(sp)
   101a8:	|         move.l 4(sp),d0
   101ac:	|         movea.l 36(sp),a0
   101b0:	|         movea.l 4(a0),a0
   101b4:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   101b6:	|         movea.l 36(sp),a0
   101ba:	|         movea.l 4(a0),a0
   101be:	|         move.l (a0),d0
   101c0:	|     /-- bne.s 101c6 <makeFastArraySize+0xb6>
   101c2:	|     |   clr.w d0
   101c4:	+-----|-- bra.s 1020e <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   101c6:	|     \-> clr.l 28(sp)
   101ca:	|     /-- bra.s 101e6 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   101cc:	|  /--|-> movea.l 36(sp),a0
   101d0:	|  |  |   movea.l 4(a0),a0
   101d4:	|  |  |   move.l (a0),d1
   101d6:	|  |  |   move.l 28(sp),d0
   101da:	|  |  |   lsl.l #3,d0
   101dc:	|  |  |   movea.l d1,a0
   101de:	|  |  |   adda.l d0,a0
   101e0:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   101e2:	|  |  |   addq.l #1,28(sp)
   101e6:	|  |  \-> move.l 28(sp),d0
   101ea:	|  |      cmp.l 40(sp),d0
   101ee:	|  \----- blt.s 101cc <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   101f0:	|         movea.l 36(sp),a0
   101f4:	|         movea.l 4(a0),a0
   101f8:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   101fe:	|         movea.l 36(sp),a0
   10202:	|         movea.l 4(a0),a0
   10206:	|         moveq #1,d0
   10208:	|         move.l d0,8(a0)
    return TRUE;
   1020c:	|         moveq #1,d0
}
   1020e:	\-------> movea.l (sp)+,a6
   10210:	          lea 28(sp),sp
   10214:	          rts

00010216 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   10216:	move.l 4(sp),-(sp)
   1021a:	jsr 10242 <unlinkVar>
   10220:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   10222:	movea.l 4(sp),a0
   10226:	moveq #3,d0
   10228:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   1022a:	move.l 8(sp),-(sp)
   1022e:	jsr b8 <copyString>
   10234:	addq.l #4,sp
   10236:	movea.l 4(sp),a0
   1023a:	move.l d0,4(a0)
}
   1023e:	nop
   10240:	rts

00010242 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   10242:	                      lea -16(sp),sp
   10246:	                      move.l a6,-(sp)
	switch (thisVar->varType) {
   10248:	                      movea.l 24(sp),a0
   1024c:	                      move.l (a0),d0
   1024e:	                      moveq #10,d1
   10250:	                      cmp.l d0,d1
   10252:	            /-------- beq.w 1030a <unlinkVar+0xc8>
   10256:	            |         moveq #10,d1
   10258:	            |         cmp.l d0,d1
   1025a:	/-----------|-------- bcs.w 1037e <unlinkVar+0x13c>
   1025e:	|           |         moveq #8,d1
   10260:	|           |         cmp.l d0,d1
   10262:	|  /--------|-------- beq.w 1036a <unlinkVar+0x128>
   10266:	|  |        |         moveq #8,d1
   10268:	|  |        |         cmp.l d0,d1
   1026a:	+--|--------|-------- bcs.w 1037e <unlinkVar+0x13c>
   1026e:	|  |        |         moveq #3,d1
   10270:	|  |        |         cmp.l d0,d1
   10272:	|  |        |     /-- beq.s 1027e <unlinkVar+0x3c>
   10274:	|  |        |     |   moveq #6,d1
   10276:	|  |        |     |   cmp.l d0,d1
   10278:	|  |        |  /--|-- beq.s 102a4 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   1027a:	+--|--------|--|--|-- bra.w 1037e <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   1027e:	|  |        |  |  \-> movea.l 24(sp),a0
   10282:	|  |        |  |      move.l 4(a0),4(sp)
   10288:	|  |        |  |      move.l 17b28 <SysBase>,d0
   1028e:	|  |        |  |      movea.l d0,a6
   10290:	|  |        |  |      movea.l 4(sp),a1
   10294:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   10298:	|  |        |  |      movea.l 24(sp),a0
   1029c:	|  |        |  |      clr.l 4(a0)
		break;
   102a0:	|  |  /-----|--|----- bra.w 10388 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   102a4:	|  |  |     |  \----> movea.l 24(sp),a0
   102a8:	|  |  |     |         movea.l 4(a0),a0
   102ac:	|  |  |     |         move.l 8(a0),d0
   102b0:	|  |  |     |         subq.l #1,d0
   102b2:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   102b6:	|  |  |     |         movea.l 24(sp),a0
   102ba:	|  |  |     |         movea.l 4(a0),a0
   102be:	|  |  |     |         move.l 8(a0),d0
   102c2:	|  |  |  /--|-------- bgt.w 10382 <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   102c6:	|  |  |  |  |     /-- bra.s 102da <unlinkVar+0x98>
   102c8:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   102cc:	|  |  |  |  |  |  |   move.l 4(a0),d0
   102d0:	|  |  |  |  |  |  |   move.l d0,-(sp)
   102d2:	|  |  |  |  |  |  |   jsr 10978 <trimStack>
   102d8:	|  |  |  |  |  |  |   addq.l #4,sp
   102da:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   102de:	|  |  |  |  |  |      movea.l 4(a0),a0
   102e2:	|  |  |  |  |  |      move.l (a0),d0
   102e4:	|  |  |  |  |  \----- bne.s 102c8 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   102e6:	|  |  |  |  |         movea.l 24(sp),a0
   102ea:	|  |  |  |  |         move.l 4(a0),8(sp)
   102f0:	|  |  |  |  |         move.l 17b28 <SysBase>,d0
   102f6:	|  |  |  |  |         movea.l d0,a6
   102f8:	|  |  |  |  |         movea.l 8(sp),a1
   102fc:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   10300:	|  |  |  |  |         movea.l 24(sp),a0
   10304:	|  |  |  |  |         clr.l 4(a0)
		break;
   10308:	|  |  |  +--|-------- bra.s 10382 <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   1030a:	|  |  |  |  \-------> movea.l 24(sp),a0
   1030e:	|  |  |  |            movea.l 4(a0),a0
   10312:	|  |  |  |            move.l 8(a0),d0
   10316:	|  |  |  |            subq.l #1,d0
   10318:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   1031c:	|  |  |  |            movea.l 24(sp),a0
   10320:	|  |  |  |            movea.l 4(a0),a0
   10324:	|  |  |  |            move.l 8(a0),d0
   10328:	|  |  |  |        /-- bgt.s 10386 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   1032a:	|  |  |  |        |   movea.l 24(sp),a0
   1032e:	|  |  |  |        |   movea.l 4(a0),a0
   10332:	|  |  |  |        |   move.l (a0),16(sp)
   10336:	|  |  |  |        |   move.l 17b28 <SysBase>,d0
   1033c:	|  |  |  |        |   movea.l d0,a6
   1033e:	|  |  |  |        |   movea.l 16(sp),a1
   10342:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   10346:	|  |  |  |        |   movea.l 24(sp),a0
   1034a:	|  |  |  |        |   move.l 4(a0),12(sp)
   10350:	|  |  |  |        |   move.l 17b28 <SysBase>,d0
   10356:	|  |  |  |        |   movea.l d0,a6
   10358:	|  |  |  |        |   movea.l 12(sp),a1
   1035c:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   10360:	|  |  |  |        |   movea.l 24(sp),a0
   10364:	|  |  |  |        |   clr.l 4(a0)
		break;
   10368:	|  |  |  |        +-- bra.s 10386 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   1036a:	|  \--|--|--------|-> movea.l 24(sp),a0
   1036e:	|     |  |        |   move.l 4(a0),d0
   10372:	|     |  |        |   move.l d0,-(sp)
   10374:	|     |  |        |   jsr 5c3a <deleteAnim>
   1037a:	|     |  |        |   addq.l #4,sp
		break;
   1037c:	|     +--|--------|-- bra.s 10388 <unlinkVar+0x146>
		break;
   1037e:	\-----|--|--------|-> nop
   10380:	      +--|--------|-- bra.s 10388 <unlinkVar+0x146>
		break;
   10382:	      |  \--------|-> nop
   10384:	      +-----------|-- bra.s 10388 <unlinkVar+0x146>
		break;
   10386:	      |           \-> nop
	}
}
   10388:	      \-------------> nop
   1038a:	                      movea.l (sp)+,a6
   1038c:	                      lea 16(sp),sp
   10390:	                      rts

00010392 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   10392:	       movea.l 4(sp),a0
   10396:	       move.l (a0),d0
   10398:	       movea.l 8(sp),a0
   1039c:	       move.l d0,(a0)
	switch (to->varType) {
   1039e:	       movea.l 8(sp),a0
   103a2:	       move.l (a0),d0
   103a4:	       moveq #10,d1
   103a6:	       cmp.l d0,d1
   103a8:	/----- bcs.w 1049a <copyMain+0x108>
   103ac:	|      add.l d0,d0
   103ae:	|      movea.l d0,a0
   103b0:	|      adda.l #66492,a0
   103b6:	|      move.w (a0),d0
   103b8:	|      jmp (103bc <copyMain+0x2a>,pc,d0.w)
   103bc:	|      .short 0x00da
   103be:	|      ori.b #22,(a6)
   103c2:	|      ori.w #22,(a4)
   103c6:	|      ori.b #-126,(a6)
   103ca:	|      ori.b #-68,(a6)
   103ce:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   103d6:	|      move.l 4(a0),d0
   103da:	|      movea.l 8(sp),a0
   103de:	|      move.l d0,4(a0)
		return TRUE;
   103e2:	|      moveq #1,d0
   103e4:	|  /-- bra.w 104ac <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   103e8:	|  |   movea.l 4(sp),a0
   103ec:	|  |   move.l 4(a0),d0
   103f0:	|  |   movea.l 8(sp),a0
   103f4:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   103f8:	|  |   movea.l 8(sp),a0
   103fc:	|  |   movea.l 4(a0),a0
   10400:	|  |   move.l 8(a0),d0
   10404:	|  |   addq.l #1,d0
   10406:	|  |   move.l d0,8(a0)
		return TRUE;
   1040a:	|  |   moveq #1,d0
   1040c:	|  +-- bra.w 104ac <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   10410:	|  |   movea.l 4(sp),a0
   10414:	|  |   move.l 4(a0),d0
   10418:	|  |   move.l d0,-(sp)
   1041a:	|  |   jsr b8 <copyString>
   10420:	|  |   addq.l #4,sp
   10422:	|  |   movea.l 8(sp),a0
   10426:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   1042a:	|  |   movea.l 8(sp),a0
   1042e:	|  |   move.l 4(a0),d0
   10432:	|  |   sne d0
   10434:	|  |   neg.b d0
   10436:	|  |   move.b d0,d0
   10438:	|  |   andi.w #255,d0
   1043c:	|  +-- bra.s 104ac <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   1043e:	|  |   movea.l 4(sp),a0
   10442:	|  |   move.l 4(a0),d0
   10446:	|  |   movea.l 8(sp),a0
   1044a:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   1044e:	|  |   movea.l 8(sp),a0
   10452:	|  |   movea.l 4(a0),a0
   10456:	|  |   move.l 8(a0),d0
   1045a:	|  |   addq.l #1,d0
   1045c:	|  |   move.l d0,8(a0)
		return TRUE;
   10460:	|  |   moveq #1,d0
   10462:	|  +-- bra.s 104ac <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   10464:	|  |   movea.l 4(sp),a0
   10468:	|  |   move.l 4(a0),d0
   1046c:	|  |   movea.l 8(sp),a0
   10470:	|  |   move.l d0,4(a0)
		return TRUE;
   10474:	|  |   moveq #1,d0
   10476:	|  +-- bra.s 104ac <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   10478:	|  |   movea.l 4(sp),a0
   1047c:	|  |   move.l 4(a0),d0
   10480:	|  |   move.l d0,-(sp)
   10482:	|  |   jsr 587e <copyAnim>
   10488:	|  |   addq.l #4,sp
   1048a:	|  |   movea.l 8(sp),a0
   1048e:	|  |   move.l d0,4(a0)
		return TRUE;
   10492:	|  |   moveq #1,d0
   10494:	|  +-- bra.s 104ac <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   10496:	|  |   moveq #1,d0
   10498:	|  +-- bra.s 104ac <copyMain+0x11a>

		default:
		break;
   1049a:	\--|-> nop
	}
	KPrintF("Unknown value type");
   1049c:	   |   pea 15dfe <zbuffer.c.4facf542+0x746>
   104a2:	   |   jsr 12048 <KPrintF>
   104a8:	   |   addq.l #4,sp
	return FALSE;
   104aa:	   |   clr.w d0
}
   104ac:	   \-> rts

000104ae <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   104ae:	move.l 8(sp),-(sp)
   104b2:	jsr 10242 <unlinkVar>
   104b8:	addq.l #4,sp
	return copyMain(from, to);
   104ba:	move.l 8(sp),-(sp)
   104be:	move.l 8(sp),-(sp)
   104c2:	jsr 10392 <copyMain>
   104c8:	addq.l #8,sp
}
   104ca:	rts

000104cc <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   104cc:	       movea.l 4(sp),a0
   104d0:	       move.l (a0),d0
   104d2:	       moveq #8,d1
   104d4:	       cmp.l d0,d1
   104d6:	   /-- bne.s 104ec <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   104d8:	   |   movea.l 4(sp),a0
   104dc:	   |   move.l 4(a0),d0
   104e0:	   |   move.l d0,-(sp)
   104e2:	   |   jsr 587e <copyAnim>
   104e8:	   |   addq.l #4,sp
   104ea:	/--|-- bra.s 10532 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   104ec:	|  \-> movea.l 4(sp),a0
   104f0:	|      move.l (a0),d0
   104f2:	|      moveq #1,d1
   104f4:	|      cmp.l d0,d1
   104f6:	|  /-- bne.s 1050a <getAnimationFromVar+0x3e>
   104f8:	|  |   movea.l 4(sp),a0
   104fc:	|  |   move.l 4(a0),d0
   10500:	|  +-- bne.s 1050a <getAnimationFromVar+0x3e>
		return makeNullAnim();
   10502:	|  |   jsr 6a26 <makeNullAnim>
   10508:	+--|-- bra.s 10532 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   1050a:	|  \-> movea.l 4(sp),a0
   1050e:	|      move.l (a0),d0
   10510:	|      add.l d0,d0
   10512:	|      movea.l d0,a1
   10514:	|      adda.l d0,a1
   10516:	|      lea 16570 <typeName>,a0
   1051c:	|      move.l (0,a1,a0.l),d0
   10520:	|      move.l d0,-(sp)
   10522:	|      pea 15cea <zbuffer.c.4facf542+0x632>
   10528:	|      jsr 12048 <KPrintF>
   1052e:	|      addq.l #8,sp
	return NULL;
   10530:	|      moveq #0,d0
}
   10532:	\----> rts

00010534 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   10534:	       movea.l 4(sp),a0
   10538:	       move.l (a0),d0
   1053a:	       moveq #10,d1
   1053c:	       cmp.l d0,d1
   1053e:	/----- bcs.w 105c4 <getBoolean+0x90>
   10542:	|      add.l d0,d0
   10544:	|      movea.l d0,a0
   10546:	|      adda.l #66898,a0
   1054c:	|      move.w (a0),d0
   1054e:	|      jmp (10552 <getBoolean+0x1e>,pc,d0.w)
   10552:	|      ori.b #26,(a6)
   10556:	|      ori.w #68,(114,a2,d0.w)
   1055c:	|      ori.w #46,(114,a2,d0.w)
   10562:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   10568:	|      clr.w d0
   1056a:	|  /-- bra.s 105c8 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   1056c:	|  |   movea.l 4(sp),a0
   10570:	|  |   move.l 4(a0),d0
   10574:	|  |   sne d0
   10576:	|  |   neg.b d0
   10578:	|  |   move.b d0,d0
   1057a:	|  |   andi.w #255,d0
   1057e:	|  +-- bra.s 105c8 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   10580:	|  |   movea.l 4(sp),a0
   10584:	|  |   movea.l 4(a0),a0
   10588:	|  |   move.l (a0),d0
   1058a:	|  |   sne d0
   1058c:	|  |   neg.b d0
   1058e:	|  |   move.b d0,d0
   10590:	|  |   andi.w #255,d0
   10594:	|  +-- bra.s 105c8 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   10596:	|  |   movea.l 4(sp),a0
   1059a:	|  |   movea.l 4(a0),a0
   1059e:	|  |   move.b (a0),d0
   105a0:	|  |   sne d0
   105a2:	|  |   neg.b d0
   105a4:	|  |   move.b d0,d0
   105a6:	|  |   andi.w #255,d0
   105aa:	|  +-- bra.s 105c8 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   105ac:	|  |   movea.l 4(sp),a0
   105b0:	|  |   movea.l 4(a0),a0
   105b4:	|  |   move.l 4(a0),d0
   105b8:	|  |   sne d0
   105ba:	|  |   neg.b d0
   105bc:	|  |   move.b d0,d0
   105be:	|  |   andi.w #255,d0
   105c2:	|  +-- bra.s 105c8 <getBoolean+0x94>

		default:
		break;
   105c4:	\--|-> nop
	}
	return TRUE;
   105c6:	   |   moveq #1,d0
}
   105c8:	   \-> rts

000105ca <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   105ca:	      /----------> lea -76(sp),sp
   105ce:	      |            move.l a6,-(sp)
	switch (from->varType) {
   105d0:	      |            movea.l 84(sp),a0
   105d4:	      |            move.l (a0),d0
   105d6:	      |            moveq #10,d1
   105d8:	      |            cmp.l d0,d1
   105da:	/-----|----------- bcs.w 10878 <getTextFromAnyVar+0x2ae>
   105de:	|     |            add.l d0,d0
   105e0:	|     |            movea.l d0,a0
   105e2:	|     |            adda.l #67054,a0
   105e8:	|     |            move.w (a0),d0
   105ea:	|     |            jmp (105ee <getTextFromAnyVar+0x24>,pc,d0.w)
   105ee:	|     |            .short 0x028a
   105f0:	|     |            bset d0,(a0)+
   105f2:	|     |            .short 0x028a
   105f4:	|     |            ori.b #-118,(a6)
   105f8:	|     |            andi.b #8,ccr
   105fc:	|     |            andi.w #650,-(a0)
   10600:	|     |            .short 0x028a
   10602:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   10608:	|     |            move.l 4(a0),d0
   1060c:	|     |            move.l d0,-(sp)
   1060e:	|     |            jsr b8 <copyString>
   10614:	|     |            addq.l #4,sp
   10616:	|  /--|----------- bra.w 1089a <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   1061a:	|  |  |            pea 15e11 <zbuffer.c.4facf542+0x759>
   10620:	|  |  |            jsr b8 <copyString>
   10626:	|  |  |            addq.l #4,sp
   10628:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   1062c:	|  |  |            clr.l 72(sp)
   10630:	|  |  |     /----- bra.w 106da <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   10634:	|  |  |  /--|----> pea 15e17 <zbuffer.c.4facf542+0x75f>
   1063a:	|  |  |  |  |      move.l 80(sp),-(sp)
   1063e:	|  |  |  |  |      jsr f520 <joinStrings>
   10644:	|  |  |  |  |      addq.l #8,sp
   10646:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   1064a:	|  |  |  |  |  /-- bne.s 10652 <getTextFromAnyVar+0x88>
   1064c:	|  |  |  |  |  |   moveq #0,d0
   1064e:	|  +--|--|--|--|-- bra.w 1089a <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   10652:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   10658:	|  |  |  |  |      move.l 17b28 <SysBase>,d0
   1065e:	|  |  |  |  |      movea.l d0,a6
   10660:	|  |  |  |  |      movea.l 56(sp),a1
   10664:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   10668:	|  |  |  |  |      movea.l 84(sp),a0
   1066c:	|  |  |  |  |      movea.l 4(a0),a0
   10670:	|  |  |  |  |      move.l (a0),d1
   10672:	|  |  |  |  |      move.l 72(sp),d0
   10676:	|  |  |  |  |      lsl.l #3,d0
   10678:	|  |  |  |  |      add.l d1,d0
   1067a:	|  |  |  |  |      move.l d0,-(sp)
   1067c:	|  |  +--|--|----- jsr 105ca <getTextFromAnyVar>(pc)
   10680:	|  |  |  |  |      addq.l #4,sp
   10682:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   10686:	|  |  |  |  |      move.l 52(sp),-(sp)
   1068a:	|  |  |  |  |      move.l 64(sp),-(sp)
   1068e:	|  |  |  |  |      jsr f520 <joinStrings>
   10694:	|  |  |  |  |      addq.l #8,sp
   10696:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   1069a:	|  |  |  |  |  /-- bne.s 106a2 <getTextFromAnyVar+0xd8>
   1069c:	|  |  |  |  |  |   moveq #0,d0
   1069e:	|  +--|--|--|--|-- bra.w 1089a <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   106a2:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   106a8:	|  |  |  |  |      move.l 17b28 <SysBase>,d0
   106ae:	|  |  |  |  |      movea.l d0,a6
   106b0:	|  |  |  |  |      movea.l 48(sp),a1
   106b4:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   106b8:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   106bc:	|  |  |  |  |      move.l 60(sp),44(sp)
   106c2:	|  |  |  |  |      move.l 17b28 <SysBase>,d0
   106c8:	|  |  |  |  |      movea.l d0,a6
   106ca:	|  |  |  |  |      movea.l 44(sp),a1
   106ce:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   106d2:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   106d6:	|  |  |  |  |      addq.l #1,72(sp)
   106da:	|  |  |  |  \----> movea.l 84(sp),a0
   106de:	|  |  |  |         movea.l 4(a0),a0
   106e2:	|  |  |  |         move.l 4(a0),d0
   106e6:	|  |  |  |         cmp.l 72(sp),d0
   106ea:	|  |  |  \-------- bgt.w 10634 <getTextFromAnyVar+0x6a>
			}
			return builder;
   106ee:	|  |  |            move.l 76(sp),d0
   106f2:	|  +--|----------- bra.w 1089a <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   106f6:	|  |  |            pea 15e19 <zbuffer.c.4facf542+0x761>
   106fc:	|  |  |            jsr b8 <copyString>
   10702:	|  |  |            addq.l #4,sp
   10704:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   10708:	|  |  |            movea.l 84(sp),a0
   1070c:	|  |  |            movea.l 4(a0),a0
   10710:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   10714:	|  |  |     /----- bra.w 107b6 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   10718:	|  |  |  /--|----> pea 15e17 <zbuffer.c.4facf542+0x75f>
   1071e:	|  |  |  |  |      move.l 72(sp),-(sp)
   10722:	|  |  |  |  |      jsr f520 <joinStrings>
   10728:	|  |  |  |  |      addq.l #8,sp
   1072a:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   1072e:	|  |  |  |  |  /-- bne.s 10736 <getTextFromAnyVar+0x16c>
   10730:	|  |  |  |  |  |   moveq #0,d0
   10732:	|  +--|--|--|--|-- bra.w 1089a <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   10736:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   1073c:	|  |  |  |  |      move.l 17b28 <SysBase>,d0
   10742:	|  |  |  |  |      movea.l d0,a6
   10744:	|  |  |  |  |      movea.l 32(sp),a1
   10748:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   1074c:	|  |  |  |  |      move.l 64(sp),d0
   10750:	|  |  |  |  |      move.l d0,-(sp)
   10752:	|  |  \--|--|----- jsr 105ca <getTextFromAnyVar>(pc)
   10756:	|  |     |  |      addq.l #4,sp
   10758:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   1075c:	|  |     |  |      move.l 28(sp),-(sp)
   10760:	|  |     |  |      move.l 40(sp),-(sp)
   10764:	|  |     |  |      jsr f520 <joinStrings>
   1076a:	|  |     |  |      addq.l #8,sp
   1076c:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   10770:	|  |     |  |  /-- bne.s 10778 <getTextFromAnyVar+0x1ae>
   10772:	|  |     |  |  |   moveq #0,d0
   10774:	|  +-----|--|--|-- bra.w 1089a <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   10778:	|  |     |  |  \-> move.l 28(sp),24(sp)
   1077e:	|  |     |  |      move.l 17b28 <SysBase>,d0
   10784:	|  |     |  |      movea.l d0,a6
   10786:	|  |     |  |      movea.l 24(sp),a1
   1078a:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   1078e:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   10792:	|  |     |  |      move.l 36(sp),20(sp)
   10798:	|  |     |  |      move.l 17b28 <SysBase>,d0
   1079e:	|  |     |  |      movea.l d0,a6
   107a0:	|  |     |  |      movea.l 20(sp),a1
   107a4:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   107a8:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   107ac:	|  |     |  |      movea.l 64(sp),a0
   107b0:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   107b6:	|  |     |  \----> tst.l 64(sp)
   107ba:	|  |     \-------- bne.w 10718 <getTextFromAnyVar+0x14e>
			}
			return builder;
   107be:	|  |               move.l 68(sp),d0
   107c2:	|  +-------------- bra.w 1089a <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   107c6:	|  |               moveq #10,d0
   107c8:	|  |               move.l d0,16(sp)
   107cc:	|  |               clr.l 12(sp)
   107d0:	|  |               move.l 17b28 <SysBase>,d0
   107d6:	|  |               movea.l d0,a6
   107d8:	|  |               move.l 16(sp),d0
   107dc:	|  |               move.l 12(sp),d1
   107e0:	|  |               jsr -684(a6)
   107e4:	|  |               move.l d0,8(sp)
   107e8:	|  |               move.l 8(sp),d0
   107ec:	|  |               move.l d0,4(sp)
			if (! buff) {
   107f0:	|  |           /-- bne.s 10806 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   107f2:	|  |           |   pea 15e20 <zbuffer.c.4facf542+0x768>
   107f8:	|  |           |   jsr 12048 <KPrintF>
   107fe:	|  |           |   addq.l #4,sp
				return NULL;
   10800:	|  |           |   moveq #0,d0
   10802:	|  +-----------|-- bra.w 1089a <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   10806:	|  |           \-> movea.l 84(sp),a0
   1080a:	|  |               move.l 4(a0),d0
   1080e:	|  |               move.l d0,-(sp)
   10810:	|  |               pea 15e4a <zbuffer.c.4facf542+0x792>
   10816:	|  |               move.l 12(sp),-(sp)
   1081a:	|  |               jsr f7fe <sprintf>
   10820:	|  |               lea 12(sp),sp
			return buff;
   10824:	|  |               move.l 4(sp),d0
   10828:	|  +-------------- bra.s 1089a <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   1082a:	|  |               movea.l 84(sp),a0
   1082e:	|  |               move.l 4(a0),d0
   10832:	|  |               move.l d0,-(sp)
   10834:	|  |               jsr 108a <resourceNameFromNum>
   1083a:	|  |               addq.l #4,sp
   1083c:	|  |               move.l d0,-(sp)
   1083e:	|  |               pea 13132 <cursors.c.412ac4f3+0x23d>
   10844:	|  |               jsr f520 <joinStrings>
   1084a:	|  |               addq.l #8,sp
   1084c:	|  +-------------- bra.s 1089a <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   1084e:	|  |               movea.l 84(sp),a0
   10852:	|  |               move.l 4(a0),d0
   10856:	|  |               move.l d0,-(sp)
   10858:	|  |               jsr 8f3a <findObjectType>
   1085e:	|  |               addq.l #4,sp
   10860:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   10864:	+--|-------------- beq.s 10878 <getTextFromAnyVar+0x2ae>
   10866:	|  |               movea.l 40(sp),a0
   1086a:	|  |               move.l (a0),d0
   1086c:	|  |               move.l d0,-(sp)
   1086e:	|  |               jsr b8 <copyString>
   10874:	|  |               addq.l #4,sp
   10876:	|  +-------------- bra.s 1089a <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   10878:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   1087a:	   |               movea.l 84(sp),a0
   1087e:	   |               move.l (a0),d0
   10880:	   |               add.l d0,d0
   10882:	   |               movea.l d0,a1
   10884:	   |               adda.l d0,a1
   10886:	   |               lea 16570 <typeName>,a0
   1088c:	   |               move.l (0,a1,a0.l),d0
   10890:	   |               move.l d0,-(sp)
   10892:	   |               jsr b8 <copyString>
   10898:	   |               addq.l #4,sp
}
   1089a:	   \-------------> movea.l (sp)+,a6
   1089c:	                   lea 76(sp),sp
   108a0:	                   rts

000108a2 <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   108a2:	move.l 4(sp),-(sp)
   108a6:	jsr 10242 <unlinkVar>
   108ac:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   108ae:	movea.l 4(sp),a0
   108b2:	moveq #8,d0
   108b4:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   108b6:	movea.l 4(sp),a0
   108ba:	move.l 8(sp),4(a0)
}
   108c0:	nop
   108c2:	rts

000108c4 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   108c4:	move.l 4(sp),-(sp)
   108c8:	jsr 10242 <unlinkVar>
   108ce:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   108d0:	movea.l 4(sp),a0
   108d4:	moveq #9,d0
   108d6:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   108d8:	movea.l 4(sp),a0
   108dc:	move.l 8(sp),4(a0)
}
   108e2:	nop
   108e4:	rts

000108e6 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   108e6:	move.l 4(sp),-(sp)
   108ea:	jsr 10242 <unlinkVar>
   108f0:	addq.l #4,sp
	thisVar->varType = vT;
   108f2:	movea.l 4(sp),a0
   108f6:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   108fa:	movea.l 4(sp),a0
   108fe:	move.l 12(sp),4(a0)
}
   10904:	nop
   10906:	rts

00010908 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   10908:	      /-- bra.s 1091a <stackGetByIndex+0x12>
        vS = vS->next;
   1090a:	/-----|-> movea.l 4(sp),a0
   1090e:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   10914:	|     +-- bne.s 1091a <stackGetByIndex+0x12>
            return NULL;
   10916:	|     |   moveq #0,d0
   10918:	|  /--|-- bra.s 1092e <stackGetByIndex+0x26>
    while (theIndex--) {
   1091a:	|  |  \-> move.l 8(sp),d0
   1091e:	|  |      move.l d0,d1
   10920:	|  |      subq.l #1,d1
   10922:	|  |      move.l d1,8(sp)
   10926:	|  |      tst.l d0
   10928:	\--|----- bne.s 1090a <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   1092a:	   |      move.l 4(sp),d0
}
   1092e:	   \----> rts

00010930 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   10930:	          tst.l 4(sp)
   10934:	      /-- bne.s 10944 <stackFindLast+0x14>
		return NULL;
   10936:	      |   moveq #0,d0
   10938:	/-----|-- bra.s 10952 <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   1093a:	|  /--|-> movea.l 4(sp),a0
   1093e:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   10944:	|  |  \-> movea.l 4(sp),a0
   10948:	|  |      move.l 8(a0),d0
   1094c:	|  \----- bne.s 1093a <stackFindLast+0xa>

	return hunt;
   1094e:	|         move.l 4(sp),d0
}
   10952:	\-------> rts

00010954 <stackSize>:

int stackSize (const struct stackHandler * me) {
   10954:	       subq.l #8,sp
	int r = 0;
   10956:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   1095a:	       movea.l 12(sp),a0
   1095e:	       move.l (a0),(sp)
	while (a) {
   10960:	   /-- bra.s 1096c <stackSize+0x18>
		r ++;
   10962:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   10966:	|  |   movea.l (sp),a0
   10968:	|  |   move.l 8(a0),(sp)
	while (a) {
   1096c:	|  \-> tst.l (sp)
   1096e:	\----- bne.s 10962 <stackSize+0xe>
	}
	return r;
   10970:	       move.l 4(sp),d0
}
   10974:	       addq.l #8,sp
   10976:	       rts

00010978 <trimStack>:

void trimStack (struct variableStack ** stack) {
   10978:	subq.l #8,sp
   1097a:	move.l a6,-(sp)
	struct variableStack* killMe = *stack;
   1097c:	movea.l 16(sp),a0
   10980:	move.l (a0),8(sp)
	*stack = (*stack)->next;
   10984:	movea.l 16(sp),a0
   10988:	movea.l (a0),a0
   1098a:	move.l 8(a0),d0
   1098e:	movea.l 16(sp),a0
   10992:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   10994:	move.l 8(sp),d0
   10998:	move.l d0,-(sp)
   1099a:	jsr 10242 <unlinkVar>
   109a0:	addq.l #4,sp
	FreeVec(killMe);
   109a2:	move.l 8(sp),4(sp)
   109a8:	move.l 17b28 <SysBase>,d0
   109ae:	movea.l d0,a6
   109b0:	movea.l 4(sp),a1
   109b4:	jsr -690(a6)
   109b8:	nop
   109ba:	movea.l (sp)+,a6
   109bc:	addq.l #8,sp
   109be:	rts

000109c0 <isInFont>:

ULONG * fontTable = NULL;
unsigned int fontTableSize = 0;

BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   109c0:	pea 15e4d <zbuffer.c.4facf542+0x795>
   109c6:	jsr 12048 <KPrintF>
   109cc:	addq.l #4,sp
	return FALSE;
   109ce:	clr.w d0
}
   109d0:	rts

000109d2 <stringWidth>:

int stringWidth (char * theText) {
   109d2:	       subq.l #8,sp
	int a = 0;
   109d4:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   109d8:	       clr.l (sp)

	if (! fontTableSize) return 0;
   109da:	       move.l 17c12 <fontTableSize>,d0
   109e0:	/----- bne.s 109e6 <stringWidth+0x14>
   109e2:	|      moveq #0,d0
   109e4:	|  /-- bra.s 109e8 <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   109e6:	\--|-> move.l (sp),d0
}
   109e8:	   \-> addq.l #8,sp
   109ea:	       rts

000109ec <loadFont>:

	FreeVec(fontOrderString);
	fontOrderString = copyString(charOrder);*/

	//forgetSpriteBank(theFont);
	KPrintF("loadFont: Not implemented on Amiga");	
   109ec:	pea 15e74 <zbuffer.c.4facf542+0x7bc>
   109f2:	jsr 12048 <KPrintF>
   109f8:	addq.l #4,sp
		return FALSE;
	}*/

	//numFontColours = theFont.myPalette.total;*/
	//fontHeight = h;
	return TRUE;
   109fa:	moveq #1,d0
}
   109fc:	rts

000109fe <addScreenRegion>:
#include "region.h"

struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;

BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   109fe:	       lea -16(sp),sp
   10a02:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   10a04:	       moveq #36,d0
   10a06:	       move.l d0,16(sp)
   10a0a:	       clr.l 12(sp)
   10a0e:	       move.l 17b28 <SysBase>,d0
   10a14:	       movea.l d0,a6
   10a16:	       move.l 16(sp),d0
   10a1a:	       move.l 12(sp),d1
   10a1e:	       jsr -684(a6)
   10a22:	       move.l d0,8(sp)
   10a26:	       move.l 8(sp),d0
   10a2a:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   10a2e:	   /-- bne.s 10a36 <addScreenRegion+0x38>
   10a30:	   |   clr.w d0
   10a32:	/--|-- bra.w 10ab6 <addScreenRegion+0xb8>
    newRegion->di = di;
   10a36:	|  \-> movea.l 4(sp),a0
   10a3a:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   10a40:	|      movea.l 4(sp),a0
   10a44:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   10a48:	|      movea.l 4(sp),a0
   10a4c:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   10a52:	|      movea.l 4(sp),a0
   10a56:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   10a5c:	|      movea.l 4(sp),a0
   10a60:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   10a66:	|      movea.l 4(sp),a0
   10a6a:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   10a70:	|      movea.l 4(sp),a0
   10a74:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   10a7a:	|      move.l 52(sp),-(sp)
   10a7e:	|      jsr 902a <loadObjectType>
   10a84:	|      addq.l #4,sp
   10a86:	|      movea.l 4(sp),a0
   10a8a:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   10a8e:	|      move.l 17c16 <allScreenRegions>,d0
   10a94:	|      movea.l 4(sp),a0
   10a98:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   10a9c:	|      move.l 4(sp),17c16 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   10aa4:	|      movea.l 4(sp),a0
   10aa8:	|      move.l 28(a0),d0
   10aac:	|      sne d0
   10aae:	|      neg.b d0
   10ab0:	|      move.b d0,d0
   10ab2:	|      andi.w #255,d0
}
   10ab6:	\----> movea.l (sp)+,a6
   10ab8:	       lea 16(sp),sp
   10abc:	       rts

00010abe <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   10abe:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   10ac0:	             move.l 17c16 <allScreenRegions>,(sp)

	while (thisRegion) {
   10ac6:	   /-------- bra.s 10ae2 <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   10ac8:	/--|-------> movea.l (sp),a0
   10aca:	|  |         movea.l 28(a0),a0
   10ace:	|  |         move.l 4(a0),d0
   10ad2:	|  |         cmp.l 8(sp),d0
   10ad6:	|  |     /-- bne.s 10adc <getRegionForObject+0x1e>
			return thisRegion;
   10ad8:	|  |     |   move.l (sp),d0
   10ada:	|  |  /--|-- bra.s 10ae8 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   10adc:	|  |  |  \-> movea.l (sp),a0
   10ade:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   10ae2:	|  \--|----> tst.l (sp)
   10ae4:	\-----|----- bne.s 10ac8 <getRegionForObject+0xa>
	}

	return NULL;
   10ae6:	      |      moveq #0,d0
}
   10ae8:	      \----> addq.l #4,sp
   10aea:	             rts

00010aec <killAllRegions>:

void killAllRegions () {
   10aec:	       subq.l #8,sp
   10aee:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   10af0:	   /-- bra.s 10b32 <killAllRegions+0x46>
		killRegion = allScreenRegions;
   10af2:	/--|-> move.l 17c16 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   10afa:	|  |   movea.l 17c16 <allScreenRegions>,a0
   10b00:	|  |   move.l 32(a0),d0
   10b04:	|  |   move.l d0,17c16 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   10b0a:	|  |   movea.l 8(sp),a0
   10b0e:	|  |   move.l 28(a0),d0
   10b12:	|  |   move.l d0,-(sp)
   10b14:	|  |   jsr 92e2 <removeObjectType>
   10b1a:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   10b1c:	|  |   move.l 8(sp),4(sp)
   10b22:	|  |   move.l 17b28 <SysBase>,d0
   10b28:	|  |   movea.l d0,a6
   10b2a:	|  |   movea.l 4(sp),a1
   10b2e:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   10b32:	|  \-> move.l 17c16 <allScreenRegions>,d0
   10b38:	\----- bne.s 10af2 <killAllRegions+0x6>
	}
	overRegion = NULL;
   10b3a:	       clr.l 17c1a <overRegion>
}
   10b40:	       nop
   10b42:	       movea.l (sp)+,a6
   10b44:	       addq.l #8,sp
   10b46:	       rts

00010b48 <loadRegions>:

void loadRegions (BPTR fp) {
   10b48:	       lea -24(sp),sp
   10b4c:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   10b4e:	       move.l 32(sp),-(sp)
   10b52:	       jsr 6bc <get2bytes>
   10b58:	       addq.l #4,sp
   10b5a:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   10b5e:	       move.l #97302,20(sp)

	while (numRegions --) {
   10b66:	   /-- bra.w 10c44 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   10b6a:	/--|-> moveq #36,d0
   10b6c:	|  |   move.l d0,16(sp)
   10b70:	|  |   clr.l 12(sp)
   10b74:	|  |   move.l 17b28 <SysBase>,d0
   10b7a:	|  |   movea.l d0,a6
   10b7c:	|  |   move.l 16(sp),d0
   10b80:	|  |   move.l 12(sp),d1
   10b84:	|  |   jsr -684(a6)
   10b88:	|  |   move.l d0,8(sp)
   10b8c:	|  |   move.l 8(sp),d0
   10b90:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   10b94:	|  |   movea.l 20(sp),a0
   10b98:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   10b9c:	|  |   moveq #32,d1
   10b9e:	|  |   add.l 4(sp),d1
   10ba2:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   10ba6:	|  |   move.l 32(sp),-(sp)
   10baa:	|  |   jsr 6bc <get2bytes>
   10bb0:	|  |   addq.l #4,sp
   10bb2:	|  |   movea.l 4(sp),a0
   10bb6:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   10bb8:	|  |   move.l 32(sp),-(sp)
   10bbc:	|  |   jsr 6bc <get2bytes>
   10bc2:	|  |   addq.l #4,sp
   10bc4:	|  |   movea.l 4(sp),a0
   10bc8:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   10bcc:	|  |   move.l 32(sp),-(sp)
   10bd0:	|  |   jsr 6bc <get2bytes>
   10bd6:	|  |   addq.l #4,sp
   10bd8:	|  |   movea.l 4(sp),a0
   10bdc:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   10be0:	|  |   move.l 32(sp),-(sp)
   10be4:	|  |   jsr 6bc <get2bytes>
   10bea:	|  |   addq.l #4,sp
   10bec:	|  |   movea.l 4(sp),a0
   10bf0:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   10bf4:	|  |   move.l 32(sp),-(sp)
   10bf8:	|  |   jsr 6bc <get2bytes>
   10bfe:	|  |   addq.l #4,sp
   10c00:	|  |   movea.l 4(sp),a0
   10c04:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   10c08:	|  |   move.l 32(sp),-(sp)
   10c0c:	|  |   jsr 6bc <get2bytes>
   10c12:	|  |   addq.l #4,sp
   10c14:	|  |   movea.l 4(sp),a0
   10c18:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   10c1c:	|  |   move.l 32(sp),-(sp)
   10c20:	|  |   jsr 6bc <get2bytes>
   10c26:	|  |   addq.l #4,sp
   10c28:	|  |   movea.l 4(sp),a0
   10c2c:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   10c30:	|  |   move.l 32(sp),-(sp)
   10c34:	|  |   jsr 8fd8 <loadObjectRef>
   10c3a:	|  |   addq.l #4,sp
   10c3c:	|  |   movea.l 4(sp),a0
   10c40:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   10c44:	|  \-> move.l 24(sp),d0
   10c48:	|      move.l d0,d1
   10c4a:	|      subq.l #1,d1
   10c4c:	|      move.l d1,24(sp)
   10c50:	|      tst.l d0
   10c52:	\----- bne.w 10b6a <loadRegions+0x22>
	}
	* pointy = NULL;
   10c56:	       movea.l 20(sp),a0
   10c5a:	       clr.l (a0)
}
   10c5c:	       nop
   10c5e:	       movea.l (sp)+,a6
   10c60:	       lea 24(sp),sp
   10c64:	       rts

00010c66 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   10c66:	             lea -12(sp),sp
   10c6a:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   10c6c:	             move.l #97302,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   10c74:	   /-------- bra.s 10cee <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   10c76:	/--|-------> movea.l 12(sp),a0
   10c7a:	|  |         movea.l (a0),a0
   10c7c:	|  |         movea.l 28(a0),a0
   10c80:	|  |         move.l 4(a0),d0
   10c84:	|  |         cmp.l 20(sp),d0
   10c88:	|  |  /----- bne.s 10ce0 <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   10c8a:	|  |  |      movea.l 12(sp),a0
   10c8e:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   10c92:	|  |  |      movea.l 8(sp),a0
   10c96:	|  |  |      move.l 32(a0),d0
   10c9a:	|  |  |      movea.l 12(sp),a0
   10c9e:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   10ca0:	|  |  |      movea.l 8(sp),a0
   10ca4:	|  |  |      move.l 28(a0),d0
   10ca8:	|  |  |      move.l d0,-(sp)
   10caa:	|  |  |      jsr 92e2 <removeObjectType>
   10cb0:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   10cb2:	|  |  |      move.l 17c1a <overRegion>,d0
   10cb8:	|  |  |      cmp.l 8(sp),d0
   10cbc:	|  |  |  /-- bne.s 10cc4 <removeScreenRegion+0x5e>
   10cbe:	|  |  |  |   clr.l 17c1a <overRegion>
            FreeVec(killMe);
   10cc4:	|  |  |  \-> move.l 8(sp),4(sp)
   10cca:	|  |  |      move.l 17b28 <SysBase>,d0
   10cd0:	|  |  |      movea.l d0,a6
   10cd2:	|  |  |      movea.l 4(sp),a1
   10cd6:	|  |  |      jsr -690(a6)
            killMe = NULL;
   10cda:	|  |  |      clr.l 8(sp)
   10cde:	|  +--|----- bra.s 10cee <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   10ce0:	|  |  \----> movea.l 12(sp),a0
   10ce4:	|  |         move.l (a0),d0
   10ce6:	|  |         moveq #32,d1
   10ce8:	|  |         add.l d0,d1
   10cea:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   10cee:	|  \-------> movea.l 12(sp),a0
   10cf2:	|            move.l (a0),d0
   10cf4:	\----------- bne.s 10c76 <removeScreenRegion+0x10>
        }
    }
}
   10cf6:	             nop
   10cf8:	             nop
   10cfa:	             movea.l (sp)+,a6
   10cfc:	             lea 12(sp),sp
   10d00:	             rts

00010d02 <saveRegions>:

void saveRegions (BPTR fp) {
   10d02:	       subq.l #8,sp
	int numRegions = 0;
   10d04:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   10d08:	       move.l 17c16 <allScreenRegions>,(sp)
	while (thisRegion) {
   10d0e:	   /-- bra.s 10d1a <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   10d10:	/--|-> movea.l (sp),a0
   10d12:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   10d16:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   10d1a:	|  \-> tst.l (sp)
   10d1c:	\----- bne.s 10d10 <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   10d1e:	       move.l 12(sp),-(sp)
   10d22:	       move.l 8(sp),-(sp)
   10d26:	       jsr 8d0 <put2bytes>
   10d2c:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   10d2e:	       move.l 17c16 <allScreenRegions>,(sp)
	while (thisRegion) {
   10d34:	/----- bra.w 10ddc <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   10d38:	|  /-> movea.l (sp),a0
   10d3a:	|  |   move.l (a0),d0
   10d3c:	|  |   move.l 12(sp),-(sp)
   10d40:	|  |   move.l d0,-(sp)
   10d42:	|  |   jsr 8d0 <put2bytes>
   10d48:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   10d4a:	|  |   movea.l (sp),a0
   10d4c:	|  |   move.l 4(a0),d0
   10d50:	|  |   move.l 12(sp),-(sp)
   10d54:	|  |   move.l d0,-(sp)
   10d56:	|  |   jsr 8d0 <put2bytes>
   10d5c:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   10d5e:	|  |   movea.l (sp),a0
   10d60:	|  |   move.l 8(a0),d0
   10d64:	|  |   move.l 12(sp),-(sp)
   10d68:	|  |   move.l d0,-(sp)
   10d6a:	|  |   jsr 8d0 <put2bytes>
   10d70:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   10d72:	|  |   movea.l (sp),a0
   10d74:	|  |   move.l 12(a0),d0
   10d78:	|  |   move.l 12(sp),-(sp)
   10d7c:	|  |   move.l d0,-(sp)
   10d7e:	|  |   jsr 8d0 <put2bytes>
   10d84:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   10d86:	|  |   movea.l (sp),a0
   10d88:	|  |   move.l 16(a0),d0
   10d8c:	|  |   move.l 12(sp),-(sp)
   10d90:	|  |   move.l d0,-(sp)
   10d92:	|  |   jsr 8d0 <put2bytes>
   10d98:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   10d9a:	|  |   movea.l (sp),a0
   10d9c:	|  |   move.l 20(a0),d0
   10da0:	|  |   move.l 12(sp),-(sp)
   10da4:	|  |   move.l d0,-(sp)
   10da6:	|  |   jsr 8d0 <put2bytes>
   10dac:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   10dae:	|  |   movea.l (sp),a0
   10db0:	|  |   move.l 24(a0),d0
   10db4:	|  |   move.l 12(sp),-(sp)
   10db8:	|  |   move.l d0,-(sp)
   10dba:	|  |   jsr 8d0 <put2bytes>
   10dc0:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   10dc2:	|  |   movea.l (sp),a0
   10dc4:	|  |   move.l 28(a0),d0
   10dc8:	|  |   move.l 12(sp),-(sp)
   10dcc:	|  |   move.l d0,-(sp)
   10dce:	|  |   jsr 9382 <saveObjectRef>
   10dd4:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   10dd6:	|  |   movea.l (sp),a0
   10dd8:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   10ddc:	\--|-> tst.l (sp)
   10dde:	   \-- bne.w 10d38 <saveRegions+0x36>
	}
}
   10de2:	       nop
   10de4:	       nop
   10de6:	       addq.l #8,sp
   10de8:	       rts

00010dea <showBoxes>:

void showBoxes () {
   10dea:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   10dec:	       move.l 17c16 <allScreenRegions>,(sp)

	while (huntRegion) {
   10df2:	/----- bra.w 10e8e <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   10df6:	|  /-> movea.l (sp),a0
   10df8:	|  |   move.l 12(a0),d0
   10dfc:	|  |   movea.l d0,a1
   10dfe:	|  |   movea.l (sp),a0
   10e00:	|  |   move.l 4(a0),d0
   10e04:	|  |   move.l d0,d1
   10e06:	|  |   movea.l (sp),a0
   10e08:	|  |   move.l (a0),d0
   10e0a:	|  |   move.l a1,-(sp)
   10e0c:	|  |   move.l d1,-(sp)
   10e0e:	|  |   move.l d0,-(sp)
   10e10:	|  |   jsr 8cd6 <drawVerticalLine>
   10e16:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   10e1a:	|  |   movea.l (sp),a0
   10e1c:	|  |   move.l 12(a0),d0
   10e20:	|  |   movea.l d0,a1
   10e22:	|  |   movea.l (sp),a0
   10e24:	|  |   move.l 4(a0),d0
   10e28:	|  |   move.l d0,d1
   10e2a:	|  |   movea.l (sp),a0
   10e2c:	|  |   move.l 8(a0),d0
   10e30:	|  |   move.l a1,-(sp)
   10e32:	|  |   move.l d1,-(sp)
   10e34:	|  |   move.l d0,-(sp)
   10e36:	|  |   jsr 8cd6 <drawVerticalLine>
   10e3c:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   10e40:	|  |   movea.l (sp),a0
   10e42:	|  |   move.l 8(a0),d0
   10e46:	|  |   movea.l d0,a1
   10e48:	|  |   movea.l (sp),a0
   10e4a:	|  |   move.l 4(a0),d0
   10e4e:	|  |   move.l d0,d1
   10e50:	|  |   movea.l (sp),a0
   10e52:	|  |   move.l (a0),d0
   10e54:	|  |   move.l a1,-(sp)
   10e56:	|  |   move.l d1,-(sp)
   10e58:	|  |   move.l d0,-(sp)
   10e5a:	|  |   jsr 8cb0 <drawHorizontalLine>
   10e60:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   10e64:	|  |   movea.l (sp),a0
   10e66:	|  |   move.l 8(a0),d0
   10e6a:	|  |   movea.l d0,a1
   10e6c:	|  |   movea.l (sp),a0
   10e6e:	|  |   move.l 12(a0),d0
   10e72:	|  |   move.l d0,d1
   10e74:	|  |   movea.l (sp),a0
   10e76:	|  |   move.l (a0),d0
   10e78:	|  |   move.l a1,-(sp)
   10e7a:	|  |   move.l d1,-(sp)
   10e7c:	|  |   move.l d0,-(sp)
   10e7e:	|  |   jsr 8cb0 <drawHorizontalLine>
   10e84:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   10e88:	|  |   movea.l (sp),a0
   10e8a:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   10e8e:	\--|-> tst.l (sp)
   10e90:	   \-- bne.w 10df6 <showBoxes+0xc>
	}
   10e94:	       nop
   10e96:	       nop
   10e98:	       addq.l #4,sp
   10e9a:	       rts

00010e9c <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   10e9c:	       lea -32(sp),sp
   10ea0:	       move.l d3,-(sp)
   10ea2:	       move.l d2,-(sp)
	int xDiff = x2 - x1;
   10ea4:	       move.l 60(sp),d0
   10ea8:	       sub.l 52(sp),d0
   10eac:	       move.l d0,36(sp)
	int yDiff = y2 - y1;
   10eb0:	       move.l 64(sp),d0
   10eb4:	       sub.l 56(sp),d0
   10eb8:	       move.l d0,32(sp)

	double m = xDiff * (xP - x1) + yDiff * (yP - y1);
   10ebc:	       move.l 68(sp),d0
   10ec0:	       sub.l 52(sp),d0
   10ec4:	       move.l 36(sp),-(sp)
   10ec8:	       move.l d0,-(sp)
   10eca:	       jsr 129fa <__mulsi3>
   10ed0:	       addq.l #8,sp
   10ed2:	       move.l d0,d2
   10ed4:	       move.l 72(sp),d0
   10ed8:	       sub.l 56(sp),d0
   10edc:	       move.l 32(sp),-(sp)
   10ee0:	       move.l d0,-(sp)
   10ee2:	       jsr 129fa <__mulsi3>
   10ee8:	       addq.l #8,sp
   10eea:	       add.l d2,d0
   10eec:	       move.l d0,-(sp)
   10eee:	       jsr 12460 <__floatsidf>
   10ef4:	       addq.l #4,sp
   10ef6:	       move.l d0,16(sp)
   10efa:	       move.l d1,20(sp)
   10efe:	       move.l 16(sp),24(sp)
   10f04:	       move.l 20(sp),28(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   10f0a:	       move.l 36(sp),-(sp)
   10f0e:	       move.l 40(sp),-(sp)
   10f12:	       jsr 129fa <__mulsi3>
   10f18:	       addq.l #8,sp
   10f1a:	       move.l d0,d2
   10f1c:	       move.l 32(sp),-(sp)
   10f20:	       move.l 36(sp),-(sp)
   10f24:	       jsr 129fa <__mulsi3>
   10f2a:	       addq.l #8,sp
   10f2c:	       add.l d2,d0
   10f2e:	       move.l d0,-(sp)
   10f30:	       jsr 12460 <__floatsidf>
   10f36:	       addq.l #4,sp
   10f38:	       move.l d1,-(sp)
   10f3a:	       move.l d0,-(sp)
   10f3c:	       move.l 36(sp),-(sp)
   10f40:	       move.l 36(sp),-(sp)
   10f44:	       jsr 122ea <__divdf3>
   10f4a:	       lea 16(sp),sp
   10f4e:	       move.l d0,8(sp)
   10f52:	       move.l d1,12(sp)
   10f56:	       move.l 8(sp),24(sp)
   10f5c:	       move.l 12(sp),28(sp)

	if (m < 0) {
   10f62:	       clr.l -(sp)
   10f64:	       clr.l -(sp)
   10f66:	       move.l 36(sp),-(sp)
   10f6a:	       move.l 36(sp),-(sp)
   10f6e:	       jsr 12678 <__ltdf2>
   10f74:	       lea 16(sp),sp
   10f78:	       tst.l d0
   10f7a:	   /-- bge.s 10f90 <closestPointOnLine+0xf4>
		*closestX = x1;
   10f7c:	   |   movea.l 44(sp),a0
   10f80:	   |   move.l 52(sp),(a0)
		*closestY = y1;
   10f84:	   |   movea.l 48(sp),a0
   10f88:	   |   move.l 56(sp),(a0)
   10f8c:	/--|-- bra.w 11072 <closestPointOnLine+0x1d6>
	} else if (m > 1) {
   10f90:	|  \-> clr.l -(sp)
   10f92:	|      move.l #1072693248,-(sp)
   10f98:	|      move.l 36(sp),-(sp)
   10f9c:	|      move.l 36(sp),-(sp)
   10fa0:	|      jsr 125be <__gtdf2>
   10fa6:	|      lea 16(sp),sp
   10faa:	|      tst.l d0
   10fac:	|  /-- ble.s 10fc2 <closestPointOnLine+0x126>
		*closestX = x2;
   10fae:	|  |   movea.l 44(sp),a0
   10fb2:	|  |   move.l 60(sp),(a0)
		*closestY = y2;
   10fb6:	|  |   movea.l 48(sp),a0
   10fba:	|  |   move.l 64(sp),(a0)
   10fbe:	+--|-- bra.w 11072 <closestPointOnLine+0x1d6>
	} else {
		*closestX = x1 + m * xDiff;
   10fc2:	|  \-> move.l 52(sp),-(sp)
   10fc6:	|      jsr 12460 <__floatsidf>
   10fcc:	|      addq.l #4,sp
   10fce:	|      move.l d0,d2
   10fd0:	|      move.l d1,d3
   10fd2:	|      move.l 36(sp),-(sp)
   10fd6:	|      jsr 12460 <__floatsidf>
   10fdc:	|      addq.l #4,sp
   10fde:	|      move.l 28(sp),-(sp)
   10fe2:	|      move.l 28(sp),-(sp)
   10fe6:	|      move.l d1,-(sp)
   10fe8:	|      move.l d0,-(sp)
   10fea:	|      jsr 124f0 <__muldf3>
   10ff0:	|      lea 16(sp),sp
   10ff4:	|      move.l d1,-(sp)
   10ff6:	|      move.l d0,-(sp)
   10ff8:	|      move.l d3,-(sp)
   10ffa:	|      move.l d2,-(sp)
   10ffc:	|      jsr 12288 <__adddf3>
   11002:	|      lea 16(sp),sp
   11006:	|      move.l d1,-(sp)
   11008:	|      move.l d0,-(sp)
   1100a:	|      jsr 123f8 <__fixdfsi>
   11010:	|      addq.l #8,sp
   11012:	|      movea.l 44(sp),a0
   11016:	|      move.l d0,(a0)
		*closestY = y1 + m * yDiff;
   11018:	|      move.l 56(sp),-(sp)
   1101c:	|      jsr 12460 <__floatsidf>
   11022:	|      addq.l #4,sp
   11024:	|      move.l d0,d2
   11026:	|      move.l d1,d3
   11028:	|      move.l 32(sp),-(sp)
   1102c:	|      jsr 12460 <__floatsidf>
   11032:	|      addq.l #4,sp
   11034:	|      move.l 28(sp),-(sp)
   11038:	|      move.l 28(sp),-(sp)
   1103c:	|      move.l d1,-(sp)
   1103e:	|      move.l d0,-(sp)
   11040:	|      jsr 124f0 <__muldf3>
   11046:	|      lea 16(sp),sp
   1104a:	|      move.l d1,-(sp)
   1104c:	|      move.l d0,-(sp)
   1104e:	|      move.l d3,-(sp)
   11050:	|      move.l d2,-(sp)
   11052:	|      jsr 12288 <__adddf3>
   11058:	|      lea 16(sp),sp
   1105c:	|      move.l d1,-(sp)
   1105e:	|      move.l d0,-(sp)
   11060:	|      jsr 123f8 <__fixdfsi>
   11066:	|      addq.l #8,sp
   11068:	|      movea.l 48(sp),a0
   1106c:	|      move.l d0,(a0)
		return TRUE;
   1106e:	|      moveq #1,d0
   11070:	|  /-- bra.s 11074 <closestPointOnLine+0x1d8>
	}
	return FALSE;
   11072:	\--|-> clr.w d0
}
   11074:	   \-> move.l (sp)+,d2
   11076:	       move.l (sp)+,d3
   11078:	       lea 32(sp),sp
   1107c:	       rts

0001107e <drawFloor>:

void drawFloor() {
   1107e:	                lea -12(sp),sp
   11082:	                move.l d3,-(sp)
   11084:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   11086:	                clr.l 16(sp)
   1108a:	   /----------- bra.w 1129e <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   1108e:	/--|----------> movea.l 17c1e <currentFloor>,a0
   11094:	|  |            move.l 12(a0),d1
   11098:	|  |            move.l 16(sp),d0
   1109c:	|  |            lsl.l #3,d0
   1109e:	|  |            movea.l d1,a0
   110a0:	|  |            adda.l d0,a0
   110a2:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   110a6:	|  |            moveq #1,d0
   110a8:	|  |            cmp.l 8(sp),d0
   110ac:	|  |  /-------- bge.w 1129a <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   110b0:	|  |  |         moveq #1,d0
   110b2:	|  |  |         move.l d0,12(sp)
   110b6:	|  |  |     /-- bra.w 111b0 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   110ba:	|  |  |  /--|-> movea.l 17c1e <currentFloor>,a0
   110c0:	|  |  |  |  |   move.l 4(a0),d1
   110c4:	|  |  |  |  |   movea.l 17c1e <currentFloor>,a0
   110ca:	|  |  |  |  |   movea.l 12(a0),a0
   110ce:	|  |  |  |  |   move.l 16(sp),d0
   110d2:	|  |  |  |  |   lsl.l #3,d0
   110d4:	|  |  |  |  |   adda.l d0,a0
   110d6:	|  |  |  |  |   movea.l 4(a0),a0
   110da:	|  |  |  |  |   move.l 12(sp),d0
   110de:	|  |  |  |  |   add.l d0,d0
   110e0:	|  |  |  |  |   add.l d0,d0
   110e2:	|  |  |  |  |   adda.l d0,a0
   110e4:	|  |  |  |  |   move.l (a0),d0
   110e6:	|  |  |  |  |   lsl.l #3,d0
   110e8:	|  |  |  |  |   movea.l d1,a0
   110ea:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   110ec:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   110f0:	|  |  |  |  |   movea.l 17c1e <currentFloor>,a0
   110f6:	|  |  |  |  |   move.l 4(a0),d1
   110fa:	|  |  |  |  |   movea.l 17c1e <currentFloor>,a0
   11100:	|  |  |  |  |   movea.l 12(a0),a0
   11104:	|  |  |  |  |   move.l 16(sp),d0
   11108:	|  |  |  |  |   lsl.l #3,d0
   1110a:	|  |  |  |  |   adda.l d0,a0
   1110c:	|  |  |  |  |   movea.l 4(a0),a0
   11110:	|  |  |  |  |   move.l 12(sp),d0
   11114:	|  |  |  |  |   add.l d0,d0
   11116:	|  |  |  |  |   add.l d0,d0
   11118:	|  |  |  |  |   adda.l d0,a0
   1111a:	|  |  |  |  |   move.l (a0),d0
   1111c:	|  |  |  |  |   lsl.l #3,d0
   1111e:	|  |  |  |  |   movea.l d1,a0
   11120:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   11122:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   11124:	|  |  |  |  |   movea.l 17c1e <currentFloor>,a0
   1112a:	|  |  |  |  |   move.l 4(a0),d1
   1112e:	|  |  |  |  |   movea.l 17c1e <currentFloor>,a0
   11134:	|  |  |  |  |   movea.l 12(a0),a0
   11138:	|  |  |  |  |   move.l 16(sp),d0
   1113c:	|  |  |  |  |   lsl.l #3,d0
   1113e:	|  |  |  |  |   adda.l d0,a0
   11140:	|  |  |  |  |   movea.l 4(a0),a0
   11144:	|  |  |  |  |   move.l 12(sp),d0
   11148:	|  |  |  |  |   addi.l #1073741823,d0
   1114e:	|  |  |  |  |   add.l d0,d0
   11150:	|  |  |  |  |   add.l d0,d0
   11152:	|  |  |  |  |   adda.l d0,a0
   11154:	|  |  |  |  |   move.l (a0),d0
   11156:	|  |  |  |  |   lsl.l #3,d0
   11158:	|  |  |  |  |   movea.l d1,a0
   1115a:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   1115c:	|  |  |  |  |   move.l 4(a0),d1
   11160:	|  |  |  |  |   movea.l 17c1e <currentFloor>,a0
   11166:	|  |  |  |  |   move.l 4(a0),d3
   1116a:	|  |  |  |  |   movea.l 17c1e <currentFloor>,a0
   11170:	|  |  |  |  |   movea.l 12(a0),a0
   11174:	|  |  |  |  |   move.l 16(sp),d0
   11178:	|  |  |  |  |   lsl.l #3,d0
   1117a:	|  |  |  |  |   adda.l d0,a0
   1117c:	|  |  |  |  |   movea.l 4(a0),a0
   11180:	|  |  |  |  |   move.l 12(sp),d0
   11184:	|  |  |  |  |   addi.l #1073741823,d0
   1118a:	|  |  |  |  |   add.l d0,d0
   1118c:	|  |  |  |  |   add.l d0,d0
   1118e:	|  |  |  |  |   adda.l d0,a0
   11190:	|  |  |  |  |   move.l (a0),d0
   11192:	|  |  |  |  |   lsl.l #3,d0
   11194:	|  |  |  |  |   movea.l d3,a0
   11196:	|  |  |  |  |   adda.l d0,a0
   11198:	|  |  |  |  |   move.l (a0),d0
   1119a:	|  |  |  |  |   move.l d2,-(sp)
   1119c:	|  |  |  |  |   move.l a1,-(sp)
   1119e:	|  |  |  |  |   move.l d1,-(sp)
   111a0:	|  |  |  |  |   move.l d0,-(sp)
   111a2:	|  |  |  |  |   jsr df4 <drawLine>
   111a8:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   111ac:	|  |  |  |  |   addq.l #1,12(sp)
   111b0:	|  |  |  |  \-> move.l 12(sp),d0
   111b4:	|  |  |  |      cmp.l 8(sp),d0
   111b8:	|  |  |  \----- blt.w 110ba <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   111bc:	|  |  |         movea.l 17c1e <currentFloor>,a0
   111c2:	|  |  |         move.l 4(a0),d1
   111c6:	|  |  |         movea.l 17c1e <currentFloor>,a0
   111cc:	|  |  |         movea.l 12(a0),a0
   111d0:	|  |  |         move.l 16(sp),d0
   111d4:	|  |  |         lsl.l #3,d0
   111d6:	|  |  |         adda.l d0,a0
   111d8:	|  |  |         movea.l 4(a0),a0
   111dc:	|  |  |         move.l 8(sp),d0
   111e0:	|  |  |         addi.l #1073741823,d0
   111e6:	|  |  |         add.l d0,d0
   111e8:	|  |  |         add.l d0,d0
   111ea:	|  |  |         adda.l d0,a0
   111ec:	|  |  |         move.l (a0),d0
   111ee:	|  |  |         lsl.l #3,d0
   111f0:	|  |  |         movea.l d1,a0
   111f2:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   111f4:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   111f8:	|  |  |         movea.l 17c1e <currentFloor>,a0
   111fe:	|  |  |         move.l 4(a0),d1
   11202:	|  |  |         movea.l 17c1e <currentFloor>,a0
   11208:	|  |  |         movea.l 12(a0),a0
   1120c:	|  |  |         move.l 16(sp),d0
   11210:	|  |  |         lsl.l #3,d0
   11212:	|  |  |         adda.l d0,a0
   11214:	|  |  |         movea.l 4(a0),a0
   11218:	|  |  |         move.l 8(sp),d0
   1121c:	|  |  |         addi.l #1073741823,d0
   11222:	|  |  |         add.l d0,d0
   11224:	|  |  |         add.l d0,d0
   11226:	|  |  |         adda.l d0,a0
   11228:	|  |  |         move.l (a0),d0
   1122a:	|  |  |         lsl.l #3,d0
   1122c:	|  |  |         movea.l d1,a0
   1122e:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   11230:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   11232:	|  |  |         movea.l 17c1e <currentFloor>,a0
   11238:	|  |  |         move.l 4(a0),d1
   1123c:	|  |  |         movea.l 17c1e <currentFloor>,a0
   11242:	|  |  |         movea.l 12(a0),a0
   11246:	|  |  |         move.l 16(sp),d0
   1124a:	|  |  |         lsl.l #3,d0
   1124c:	|  |  |         adda.l d0,a0
   1124e:	|  |  |         movea.l 4(a0),a0
   11252:	|  |  |         move.l (a0),d0
   11254:	|  |  |         lsl.l #3,d0
   11256:	|  |  |         movea.l d1,a0
   11258:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   1125a:	|  |  |         move.l 4(a0),d1
   1125e:	|  |  |         movea.l 17c1e <currentFloor>,a0
   11264:	|  |  |         move.l 4(a0),d3
   11268:	|  |  |         movea.l 17c1e <currentFloor>,a0
   1126e:	|  |  |         movea.l 12(a0),a0
   11272:	|  |  |         move.l 16(sp),d0
   11276:	|  |  |         lsl.l #3,d0
   11278:	|  |  |         adda.l d0,a0
   1127a:	|  |  |         movea.l 4(a0),a0
   1127e:	|  |  |         move.l (a0),d0
   11280:	|  |  |         lsl.l #3,d0
   11282:	|  |  |         movea.l d3,a0
   11284:	|  |  |         adda.l d0,a0
   11286:	|  |  |         move.l (a0),d0
   11288:	|  |  |         move.l d2,-(sp)
   1128a:	|  |  |         move.l a1,-(sp)
   1128c:	|  |  |         move.l d1,-(sp)
   1128e:	|  |  |         move.l d0,-(sp)
   11290:	|  |  |         jsr df4 <drawLine>
   11296:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   1129a:	|  |  \-------> addq.l #1,16(sp)
   1129e:	|  \----------> movea.l 17c1e <currentFloor>,a0
   112a4:	|               move.l 8(a0),d0
   112a8:	|               cmp.l 16(sp),d0
   112ac:	\-------------- bgt.w 1108e <drawFloor+0x10>
        }
    }
}
   112b0:	                nop
   112b2:	                nop
   112b4:	                move.l (sp)+,d2
   112b6:	                move.l (sp)+,d3
   112b8:	                lea 12(sp),sp
   112bc:	                rts

000112be <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   112be:	                      lea -12(sp),sp
    int sharedVertices = 0;
   112c2:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   112c6:	                      clr.l 4(sp)
   112ca:	   /----------------- bra.w 1135c <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   112ce:	/--|----------------> clr.l (sp)
   112d0:	|  |     /----------- bra.s 1134c <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   112d2:	|  |  /--|----------> movea.l 16(sp),a0
   112d6:	|  |  |  |            move.l 4(a0),d1
   112da:	|  |  |  |            move.l 4(sp),d0
   112de:	|  |  |  |            add.l d0,d0
   112e0:	|  |  |  |            add.l d0,d0
   112e2:	|  |  |  |            movea.l d1,a0
   112e4:	|  |  |  |            adda.l d0,a0
   112e6:	|  |  |  |            move.l (a0),d1
   112e8:	|  |  |  |            movea.l 20(sp),a0
   112ec:	|  |  |  |            movea.l 4(a0),a0
   112f0:	|  |  |  |            move.l (sp),d0
   112f2:	|  |  |  |            add.l d0,d0
   112f4:	|  |  |  |            add.l d0,d0
   112f6:	|  |  |  |            adda.l d0,a0
   112f8:	|  |  |  |            move.l (a0),d0
   112fa:	|  |  |  |            cmp.l d1,d0
   112fc:	|  |  |  |  /-------- bne.s 1134a <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   112fe:	|  |  |  |  |         move.l 8(sp),d0
   11302:	|  |  |  |  |         move.l d0,d1
   11304:	|  |  |  |  |         addq.l #1,d1
   11306:	|  |  |  |  |         move.l d1,8(sp)
   1130a:	|  |  |  |  |         tst.l d0
   1130c:	|  |  |  |  |     /-- beq.s 1132e <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   1130e:	|  |  |  |  |     |   movea.l 16(sp),a0
   11312:	|  |  |  |  |     |   move.l 4(a0),d1
   11316:	|  |  |  |  |     |   move.l 4(sp),d0
   1131a:	|  |  |  |  |     |   add.l d0,d0
   1131c:	|  |  |  |  |     |   add.l d0,d0
   1131e:	|  |  |  |  |     |   movea.l d1,a0
   11320:	|  |  |  |  |     |   adda.l d0,a0
   11322:	|  |  |  |  |     |   move.l (a0),d0
   11324:	|  |  |  |  |     |   movea.l 28(sp),a0
   11328:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   1132a:	|  |  |  |  |     |   moveq #1,d0
   1132c:	|  |  |  |  |  /--|-- bra.s 1136c <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   1132e:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   11332:	|  |  |  |  |  |      move.l 4(a0),d1
   11336:	|  |  |  |  |  |      move.l 4(sp),d0
   1133a:	|  |  |  |  |  |      add.l d0,d0
   1133c:	|  |  |  |  |  |      add.l d0,d0
   1133e:	|  |  |  |  |  |      movea.l d1,a0
   11340:	|  |  |  |  |  |      adda.l d0,a0
   11342:	|  |  |  |  |  |      move.l (a0),d0
   11344:	|  |  |  |  |  |      movea.l 24(sp),a0
   11348:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   1134a:	|  |  |  |  \--|----> addq.l #1,(sp)
   1134c:	|  |  |  \-----|----> movea.l 20(sp),a0
   11350:	|  |  |        |      move.l (a0),d0
   11352:	|  |  |        |      cmp.l (sp),d0
   11354:	|  |  \--------|----- bgt.w 112d2 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   11358:	|  |           |      addq.l #1,4(sp)
   1135c:	|  \-----------|----> movea.l 16(sp),a0
   11360:	|              |      move.l (a0),d0
   11362:	|              |      cmp.l 4(sp),d0
   11366:	\--------------|----- bgt.w 112ce <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   1136a:	               |      clr.w d0
}
   1136c:	               \----> lea 12(sp),sp
   11370:	                      rts

00011372 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   11372:	movea.l 17c1e <currentFloor>,a0
   11378:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   1137c:	movea.l 17c1e <currentFloor>,a0
   11382:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   11386:	movea.l 17c1e <currentFloor>,a0
   1138c:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   11390:	movea.l 17c1e <currentFloor>,a0
   11396:	clr.l 16(a0)
}
   1139a:	nop
   1139c:	rts

0001139e <inFloor>:

int inFloor (int x, int y) {
   1139e:	          subq.l #8,sp
	int i, r = -1;
   113a0:	          moveq #-1,d0
   113a2:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   113a4:	          clr.l 4(sp)
   113a8:	   /----- bra.s 113dc <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   113aa:	/--|----> movea.l 17c1e <currentFloor>,a0
   113b0:	|  |      move.l 12(a0),d1
   113b4:	|  |      move.l 4(sp),d0
   113b8:	|  |      lsl.l #3,d0
   113ba:	|  |      add.l d1,d0
   113bc:	|  |      move.l 16(sp),-(sp)
   113c0:	|  |      move.l 16(sp),-(sp)
   113c4:	|  |      move.l d0,-(sp)
   113c6:	|  |      jsr 115a8 <pointInFloorPolygon>
   113cc:	|  |      lea 12(sp),sp
   113d0:	|  |      tst.w d0
   113d2:	|  |  /-- beq.s 113d8 <inFloor+0x3a>
			r = i;
   113d4:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   113d8:	|  |  \-> addq.l #1,4(sp)
   113dc:	|  \----> movea.l 17c1e <currentFloor>,a0
   113e2:	|         move.l 8(a0),d0
   113e6:	|         cmp.l 4(sp),d0
   113ea:	\-------- bgt.s 113aa <inFloor+0xc>

	return r;
   113ec:	          move.l (sp),d0
}
   113ee:	          addq.l #8,sp
   113f0:	          rts

000113f2 <initFloor>:

BOOL initFloor () {
   113f2:	       lea -12(sp),sp
   113f6:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   113f8:	       moveq #20,d0
   113fa:	       move.l d0,12(sp)
   113fe:	       clr.l 8(sp)
   11402:	       move.l 17b28 <SysBase>,d0
   11408:	       movea.l d0,a6
   1140a:	       move.l 12(sp),d0
   1140e:	       move.l 8(sp),d1
   11412:	       jsr -684(a6)
   11416:	       move.l d0,4(sp)
   1141a:	       move.l 4(sp),d0
   1141e:	       move.l d0,17c1e <currentFloor>

    if(currentFloor == 0) {
   11424:	       move.l 17c1e <currentFloor>,d0
   1142a:	/----- bne.s 1143e <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   1142c:	|      pea 15e97 <zbuffer.c.4facf542+0x7df>
   11432:	|      jsr 12048 <KPrintF>
   11438:	|      addq.l #4,sp
        return FALSE;
   1143a:	|      clr.w d0
   1143c:	|  /-- bra.s 11446 <initFloor+0x54>
    }

	noFloor ();
   1143e:	\--|-> jsr 11372 <noFloor>
	return TRUE;
   11444:	   |   moveq #1,d0
}
   11446:	   \-> movea.l (sp)+,a6
   11448:	       lea 12(sp),sp
   1144c:	       rts

0001144e <killFloor>:

void killFloor () {
   1144e:	       lea -24(sp),sp
   11452:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   11454:	       clr.l 24(sp)
   11458:	   /-- bra.s 114b2 <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   1145a:	/--|-> movea.l 17c1e <currentFloor>,a0
   11460:	|  |   move.l 12(a0),d1
   11464:	|  |   move.l 24(sp),d0
   11468:	|  |   lsl.l #3,d0
   1146a:	|  |   movea.l d1,a0
   1146c:	|  |   adda.l d0,a0
   1146e:	|  |   move.l 4(a0),8(sp)
   11474:	|  |   move.l 17b28 <SysBase>,d0
   1147a:	|  |   movea.l d0,a6
   1147c:	|  |   movea.l 8(sp),a1
   11480:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   11484:	|  |   movea.l 17c1e <currentFloor>,a0
   1148a:	|  |   move.l 16(a0),d1
   1148e:	|  |   move.l 24(sp),d0
   11492:	|  |   add.l d0,d0
   11494:	|  |   add.l d0,d0
   11496:	|  |   movea.l d1,a0
   11498:	|  |   adda.l d0,a0
   1149a:	|  |   move.l (a0),4(sp)
   1149e:	|  |   move.l 17b28 <SysBase>,d0
   114a4:	|  |   movea.l d0,a6
   114a6:	|  |   movea.l 4(sp),a1
   114aa:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   114ae:	|  |   addq.l #1,24(sp)
   114b2:	|  \-> movea.l 17c1e <currentFloor>,a0
   114b8:	|      move.l 8(a0),d0
   114bc:	|      cmp.l 24(sp),d0
   114c0:	\----- bgt.s 1145a <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   114c2:	       movea.l 17c1e <currentFloor>,a0
   114c8:	       move.l 12(a0),20(sp)
   114ce:	       move.l 17b28 <SysBase>,d0
   114d4:	       movea.l d0,a6
   114d6:	       movea.l 20(sp),a1
   114da:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   114de:	       movea.l 17c1e <currentFloor>,a0
   114e4:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   114e8:	       movea.l 17c1e <currentFloor>,a0
   114ee:	       move.l 4(a0),16(sp)
   114f4:	       move.l 17b28 <SysBase>,d0
   114fa:	       movea.l d0,a6
   114fc:	       movea.l 16(sp),a1
   11500:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   11504:	       movea.l 17c1e <currentFloor>,a0
   1150a:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   1150e:	       movea.l 17c1e <currentFloor>,a0
   11514:	       move.l 16(a0),12(sp)
   1151a:	       move.l 17b28 <SysBase>,d0
   11520:	       movea.l d0,a6
   11522:	       movea.l 12(sp),a1
   11526:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   1152a:	       movea.l 17c1e <currentFloor>,a0
   11530:	       clr.l 16(a0)
}
   11534:	       nop
   11536:	       movea.l (sp)+,a6
   11538:	       lea 24(sp),sp
   1153c:	       rts

0001153e <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   1153e:	                   lea -12(sp),sp
	int sharedVertices = 0;
   11542:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   11546:	                   clr.l 4(sp)
   1154a:	   /-------------- bra.s 11596 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   1154c:	/--|-------------> clr.l (sp)
   1154e:	|  |     /-------- bra.s 1158a <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   11550:	|  |  /--|-------> move.l 20(sp),d1
   11554:	|  |  |  |         move.l 4(sp),d0
   11558:	|  |  |  |         add.l d0,d0
   1155a:	|  |  |  |         add.l d0,d0
   1155c:	|  |  |  |         movea.l d1,a0
   1155e:	|  |  |  |         adda.l d0,a0
   11560:	|  |  |  |         move.l (a0),d1
   11562:	|  |  |  |         movea.l 28(sp),a0
   11566:	|  |  |  |         move.l (sp),d0
   11568:	|  |  |  |         add.l d0,d0
   1156a:	|  |  |  |         add.l d0,d0
   1156c:	|  |  |  |         adda.l d0,a0
   1156e:	|  |  |  |         move.l (a0),d0
   11570:	|  |  |  |         cmp.l d1,d0
   11572:	|  |  |  |     /-- bne.s 11588 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   11574:	|  |  |  |     |   move.l 8(sp),d0
   11578:	|  |  |  |     |   move.l d0,d1
   1157a:	|  |  |  |     |   addq.l #1,d1
   1157c:	|  |  |  |     |   move.l d1,8(sp)
   11580:	|  |  |  |     |   tst.l d0
   11582:	|  |  |  |     +-- beq.s 11588 <polysShareSide+0x4a>
   11584:	|  |  |  |     |   moveq #1,d0
   11586:	|  |  |  |  /--|-- bra.s 115a2 <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   11588:	|  |  |  |  |  \-> addq.l #1,(sp)
   1158a:	|  |  |  \--|----> move.l 24(sp),d0
   1158e:	|  |  |     |      cmp.l (sp),d0
   11590:	|  |  \-----|----- bgt.s 11550 <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   11592:	|  |        |      addq.l #1,4(sp)
   11596:	|  \--------|----> move.l 16(sp),d0
   1159a:	|           |      cmp.l 4(sp),d0
   1159e:	\-----------|----- bgt.s 1154c <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   115a0:	            |      clr.w d0
}
   115a2:	            \----> lea 12(sp),sp
   115a6:	                   rts

000115a8 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   115a8:	             lea -28(sp),sp
   115ac:	             move.l d3,-(sp)
   115ae:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   115b0:	             clr.l 32(sp)
   115b4:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   115b8:	             movea.l 40(sp),a0
   115bc:	             move.l (a0),d0
   115be:	             move.l d0,d1
   115c0:	             subq.l #1,d1
   115c2:	             move.l d1,28(sp)
   115c6:	   /-------- bra.w 117c0 <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   115ca:	/--|-------> movea.l 17c1e <currentFloor>,a0
   115d0:	|  |         move.l 4(a0),d1
   115d4:	|  |         movea.l 40(sp),a0
   115d8:	|  |         movea.l 4(a0),a0
   115dc:	|  |         move.l 32(sp),d0
   115e0:	|  |         add.l d0,d0
   115e2:	|  |         add.l d0,d0
   115e4:	|  |         adda.l d0,a0
   115e6:	|  |         move.l (a0),d0
   115e8:	|  |         lsl.l #3,d0
   115ea:	|  |         movea.l d1,a0
   115ec:	|  |         adda.l d0,a0
   115ee:	|  |         move.l (a0),d0
   115f0:	|  |         move.l d0,-(sp)
   115f2:	|  |         jsr 124a0 <__floatsisf>
   115f8:	|  |         addq.l #4,sp
   115fa:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   115fe:	|  |         movea.l 17c1e <currentFloor>,a0
   11604:	|  |         move.l 4(a0),d1
   11608:	|  |         movea.l 40(sp),a0
   1160c:	|  |         movea.l 4(a0),a0
   11610:	|  |         move.l 32(sp),d0
   11614:	|  |         add.l d0,d0
   11616:	|  |         add.l d0,d0
   11618:	|  |         adda.l d0,a0
   1161a:	|  |         move.l (a0),d0
   1161c:	|  |         lsl.l #3,d0
   1161e:	|  |         movea.l d1,a0
   11620:	|  |         adda.l d0,a0
   11622:	|  |         move.l 4(a0),d0
   11626:	|  |         move.l d0,-(sp)
   11628:	|  |         jsr 124a0 <__floatsisf>
   1162e:	|  |         addq.l #4,sp
   11630:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   11634:	|  |         movea.l 17c1e <currentFloor>,a0
   1163a:	|  |         move.l 4(a0),d1
   1163e:	|  |         movea.l 40(sp),a0
   11642:	|  |         movea.l 4(a0),a0
   11646:	|  |         move.l 28(sp),d0
   1164a:	|  |         add.l d0,d0
   1164c:	|  |         add.l d0,d0
   1164e:	|  |         adda.l d0,a0
   11650:	|  |         move.l (a0),d0
   11652:	|  |         lsl.l #3,d0
   11654:	|  |         movea.l d1,a0
   11656:	|  |         adda.l d0,a0
   11658:	|  |         move.l (a0),d0
   1165a:	|  |         move.l d0,-(sp)
   1165c:	|  |         jsr 124a0 <__floatsisf>
   11662:	|  |         addq.l #4,sp
   11664:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   11668:	|  |         movea.l 17c1e <currentFloor>,a0
   1166e:	|  |         move.l 4(a0),d1
   11672:	|  |         movea.l 40(sp),a0
   11676:	|  |         movea.l 4(a0),a0
   1167a:	|  |         move.l 28(sp),d0
   1167e:	|  |         add.l d0,d0
   11680:	|  |         add.l d0,d0
   11682:	|  |         adda.l d0,a0
   11684:	|  |         move.l (a0),d0
   11686:	|  |         lsl.l #3,d0
   11688:	|  |         movea.l d1,a0
   1168a:	|  |         adda.l d0,a0
   1168c:	|  |         move.l 4(a0),d0
   11690:	|  |         move.l d0,-(sp)
   11692:	|  |         jsr 124a0 <__floatsisf>
   11698:	|  |         addq.l #4,sp
   1169a:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   1169e:	|  |         move.l 48(sp),-(sp)
   116a2:	|  |         jsr 124a0 <__floatsisf>
   116a8:	|  |         addq.l #4,sp
   116aa:	|  |         move.l d0,-(sp)
   116ac:	|  |         move.l 20(sp),-(sp)
   116b0:	|  |         jsr 12642 <__lesf2>
   116b6:	|  |         addq.l #8,sp
   116b8:	|  |         tst.l d0
   116ba:	|  |     /-- bgt.s 116da <pointInFloorPolygon+0x132>
   116bc:	|  |     |   move.l 48(sp),-(sp)
   116c0:	|  |     |   jsr 124a0 <__floatsisf>
   116c6:	|  |     |   addq.l #4,sp
   116c8:	|  |     |   move.l d0,-(sp)
   116ca:	|  |     |   move.l 12(sp),-(sp)
   116ce:	|  |     |   jsr 1260c <__gtsf2>
   116d4:	|  |     |   addq.l #8,sp
   116d6:	|  |     |   tst.l d0
   116d8:	|  |  /--|-- bgt.s 1171a <pointInFloorPolygon+0x172>
   116da:	|  |  |  \-> move.l 48(sp),-(sp)
   116de:	|  |  |      jsr 124a0 <__floatsisf>
   116e4:	|  |  |      addq.l #4,sp
   116e6:	|  |  |      move.l d0,-(sp)
   116e8:	|  |  |      move.l 12(sp),-(sp)
   116ec:	|  |  |      jsr 12642 <__lesf2>
   116f2:	|  |  |      addq.l #8,sp
   116f4:	|  |  |      tst.l d0
   116f6:	|  |  |  /-- bgt.w 117b0 <pointInFloorPolygon+0x208>
   116fa:	|  |  |  |   move.l 48(sp),-(sp)
   116fe:	|  |  |  |   jsr 124a0 <__floatsisf>
   11704:	|  |  |  |   addq.l #4,sp
   11706:	|  |  |  |   move.l d0,-(sp)
   11708:	|  |  |  |   move.l 20(sp),-(sp)
   1170c:	|  |  |  |   jsr 1260c <__gtsf2>
   11712:	|  |  |  |   addq.l #8,sp
   11714:	|  |  |  |   tst.l d0
   11716:	|  |  |  +-- ble.w 117b0 <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   1171a:	|  |  \--|-> move.l 44(sp),-(sp)
   1171e:	|  |     |   jsr 124a0 <__floatsisf>
   11724:	|  |     |   addq.l #4,sp
   11726:	|  |     |   move.l d0,d3
   11728:	|  |     |   move.l 20(sp),-(sp)
   1172c:	|  |     |   move.l 16(sp),-(sp)
   11730:	|  |     |   jsr 12794 <__subsf3>
   11736:	|  |     |   addq.l #8,sp
   11738:	|  |     |   move.l d0,d2
   1173a:	|  |     |   move.l 48(sp),-(sp)
   1173e:	|  |     |   jsr 124a0 <__floatsisf>
   11744:	|  |     |   addq.l #4,sp
   11746:	|  |     |   move.l 16(sp),-(sp)
   1174a:	|  |     |   move.l d0,-(sp)
   1174c:	|  |     |   jsr 12794 <__subsf3>
   11752:	|  |     |   addq.l #8,sp
   11754:	|  |     |   move.l d0,-(sp)
   11756:	|  |     |   move.l d2,-(sp)
   11758:	|  |     |   jsr 12552 <__mulsf3>
   1175e:	|  |     |   addq.l #8,sp
   11760:	|  |     |   move.l d0,d2
   11762:	|  |     |   move.l 16(sp),-(sp)
   11766:	|  |     |   move.l 12(sp),-(sp)
   1176a:	|  |     |   jsr 12794 <__subsf3>
   11770:	|  |     |   addq.l #8,sp
   11772:	|  |     |   move.l d0,-(sp)
   11774:	|  |     |   move.l d2,-(sp)
   11776:	|  |     |   jsr 1234c <__divsf3>
   1177c:	|  |     |   addq.l #8,sp
   1177e:	|  |     |   move.l 20(sp),-(sp)
   11782:	|  |     |   move.l d0,-(sp)
   11784:	|  |     |   jsr 12252 <__addsf3>
   1178a:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   1178c:	|  |     |   move.l d0,-(sp)
   1178e:	|  |     |   move.l d3,-(sp)
   11790:	|  |     |   jsr 126c6 <__ltsf2>
   11796:	|  |     |   addq.l #8,sp
   11798:	|  |     |   tst.l d0
   1179a:	|  |     +-- bge.s 117b0 <pointInFloorPolygon+0x208>

			c = !c;
   1179c:	|  |     |   tst.l 24(sp)
   117a0:	|  |     |   seq d0
   117a2:	|  |     |   neg.b d0
   117a4:	|  |     |   move.b d0,d0
   117a6:	|  |     |   andi.l #255,d0
   117ac:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   117b0:	|  |     \-> move.l 32(sp),d0
   117b4:	|  |         move.l d0,d1
   117b6:	|  |         addq.l #1,d1
   117b8:	|  |         move.l d1,32(sp)
   117bc:	|  |         move.l d0,28(sp)
   117c0:	|  \-------> movea.l 40(sp),a0
   117c4:	|            move.l (a0),d0
   117c6:	|            cmp.l 32(sp),d0
   117ca:	\----------- bgt.w 115ca <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   117ce:	             tst.l 24(sp)
   117d2:	             sne d0
   117d4:	             neg.b d0
   117d6:	             move.b d0,d0
   117d8:	             andi.w #255,d0
}
   117dc:	             move.l (sp)+,d2
   117de:	             move.l (sp)+,d3
   117e0:	             lea 28(sp),sp
   117e4:	             rts

000117e6 <setFloor>:

BOOL setFloor (int fileNum) {
   117e6:	                               lea -132(sp),sp
   117ea:	                               move.l a6,-(sp)
   117ec:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   117ee:	                               jsr 1144e <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   117f4:	                               move.l 144(sp),-(sp)
   117f8:	                               jsr 3e84 <openFileFromNum>
   117fe:	                               addq.l #4,sp
   11800:	                               tst.l d0
   11802:	                           /-- bne.s 1180a <setFloor+0x24>
   11804:	                           |   clr.w d0
   11806:	/--------------------------|-- bra.w 11f56 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   1180a:	|                          \-> movea.l 17c1e <currentFloor>,a0
   11810:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   11814:	|                              move.l 17b10 <bigDataFile>,118(sp)
   1181c:	|                              move.l 17b30 <DOSBase>,d0
   11822:	|                              movea.l d0,a6
   11824:	|                              move.l 118(sp),d1
   11828:	|                              jsr -306(a6)
   1182c:	|                              move.l d0,114(sp)
   11830:	|                              move.l 114(sp),d0
   11834:	|                              movea.l 17c1e <currentFloor>,a0
   1183a:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   1183e:	|                              movea.l 17c1e <currentFloor>,a0
   11844:	|                              move.l 8(a0),d0
   11848:	|                              lsl.l #3,d0
   1184a:	|                              move.l d0,110(sp)
   1184e:	|                              clr.l 106(sp)
   11852:	|                              move.l 17b28 <SysBase>,d0
   11858:	|                              movea.l d0,a6
   1185a:	|                              move.l 110(sp),d0
   1185e:	|                              move.l 106(sp),d1
   11862:	|                              jsr -684(a6)
   11866:	|                              move.l d0,102(sp)
   1186a:	|                              move.l 102(sp),d0
   1186e:	|                              movea.l 17c1e <currentFloor>,a0
   11874:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   11878:	|                              movea.l 17c1e <currentFloor>,a0
   1187e:	|                              move.l 12(a0),d0
   11882:	|                          /-- bne.s 11898 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   11884:	|                          |   pea 15ebb <zbuffer.c.4facf542+0x803>
   1188a:	|                          |   jsr 12048 <KPrintF>
   11890:	|                          |   addq.l #4,sp
		return FALSE;
   11892:	|                          |   clr.w d0
   11894:	+--------------------------|-- bra.w 11f56 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11898:	|                          \-> clr.l 136(sp)
   1189c:	|                    /-------- bra.w 119b4 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   118a0:	|                 /--|-------> move.l 17b10 <bigDataFile>,26(sp)
   118a8:	|                 |  |         move.l 17b30 <DOSBase>,d0
   118ae:	|                 |  |         movea.l d0,a6
   118b0:	|                 |  |         move.l 26(sp),d1
   118b4:	|                 |  |         jsr -306(a6)
   118b8:	|                 |  |         move.l d0,22(sp)
   118bc:	|                 |  |         move.l 22(sp),d1
   118c0:	|                 |  |         movea.l 17c1e <currentFloor>,a0
   118c6:	|                 |  |         movea.l 12(a0),a0
   118ca:	|                 |  |         move.l 136(sp),d0
   118ce:	|                 |  |         lsl.l #3,d0
   118d0:	|                 |  |         adda.l d0,a0
   118d2:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   118d4:	|                 |  |         movea.l 17c1e <currentFloor>,a0
   118da:	|                 |  |         move.l 12(a0),d1
   118de:	|                 |  |         move.l 136(sp),d0
   118e2:	|                 |  |         lsl.l #3,d0
   118e4:	|                 |  |         movea.l d1,a0
   118e6:	|                 |  |         adda.l d0,a0
   118e8:	|                 |  |         move.l (a0),d0
   118ea:	|                 |  |         add.l d0,d0
   118ec:	|                 |  |         add.l d0,d0
   118ee:	|                 |  |         move.l d0,18(sp)
   118f2:	|                 |  |         clr.l 14(sp)
   118f6:	|                 |  |         move.l 17b28 <SysBase>,d0
   118fc:	|                 |  |         movea.l d0,a6
   118fe:	|                 |  |         move.l 18(sp),d0
   11902:	|                 |  |         move.l 14(sp),d1
   11906:	|                 |  |         jsr -684(a6)
   1190a:	|                 |  |         move.l d0,10(sp)
   1190e:	|                 |  |         move.l 10(sp),d1
   11912:	|                 |  |         movea.l 17c1e <currentFloor>,a0
   11918:	|                 |  |         movea.l 12(a0),a0
   1191c:	|                 |  |         move.l 136(sp),d0
   11920:	|                 |  |         lsl.l #3,d0
   11922:	|                 |  |         adda.l d0,a0
   11924:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   11928:	|                 |  |         movea.l 17c1e <currentFloor>,a0
   1192e:	|                 |  |         move.l 12(a0),d1
   11932:	|                 |  |         move.l 136(sp),d0
   11936:	|                 |  |         lsl.l #3,d0
   11938:	|                 |  |         movea.l d1,a0
   1193a:	|                 |  |         adda.l d0,a0
   1193c:	|                 |  |         move.l 4(a0),d0
   11940:	|                 |  |     /-- bne.s 11956 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   11942:	|                 |  |     |   pea 15ebb <zbuffer.c.4facf542+0x803>
   11948:	|                 |  |     |   jsr 12048 <KPrintF>
   1194e:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   11950:	|                 |  |     |   clr.w d0
   11952:	+-----------------|--|-----|-- bra.w 11f56 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   11956:	|                 |  |     \-> clr.l 132(sp)
   1195a:	|                 |  |     /-- bra.s 11994 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   1195c:	|                 |  |  /--|-> move.l 17b10 <bigDataFile>,d1
   11962:	|                 |  |  |  |   movea.l 17c1e <currentFloor>,a0
   11968:	|                 |  |  |  |   movea.l 12(a0),a0
   1196c:	|                 |  |  |  |   move.l 136(sp),d0
   11970:	|                 |  |  |  |   lsl.l #3,d0
   11972:	|                 |  |  |  |   adda.l d0,a0
   11974:	|                 |  |  |  |   movea.l 4(a0),a0
   11978:	|                 |  |  |  |   move.l 132(sp),d0
   1197c:	|                 |  |  |  |   add.l d0,d0
   1197e:	|                 |  |  |  |   add.l d0,d0
   11980:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   11984:	|                 |  |  |  |   move.l d1,-(sp)
   11986:	|                 |  |  |  |   jsr 6bc <get2bytes>
   1198c:	|                 |  |  |  |   addq.l #4,sp
   1198e:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   11990:	|                 |  |  |  |   addq.l #1,132(sp)
   11994:	|                 |  |  |  \-> movea.l 17c1e <currentFloor>,a0
   1199a:	|                 |  |  |      move.l 12(a0),d1
   1199e:	|                 |  |  |      move.l 136(sp),d0
   119a2:	|                 |  |  |      lsl.l #3,d0
   119a4:	|                 |  |  |      movea.l d1,a0
   119a6:	|                 |  |  |      adda.l d0,a0
   119a8:	|                 |  |  |      move.l (a0),d0
   119aa:	|                 |  |  |      cmp.l 132(sp),d0
   119ae:	|                 |  |  \----- bgt.s 1195c <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   119b0:	|                 |  |         addq.l #1,136(sp)
   119b4:	|                 |  \-------> movea.l 17c1e <currentFloor>,a0
   119ba:	|                 |            move.l 8(a0),d0
   119be:	|                 |            cmp.l 136(sp),d0
   119c2:	|                 \----------- bgt.w 118a0 <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   119c6:	|                              move.l 17b10 <bigDataFile>,d0
   119cc:	|                              move.l d0,-(sp)
   119ce:	|                              jsr 6bc <get2bytes>
   119d4:	|                              addq.l #4,sp
   119d6:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   119da:	|                              move.l 136(sp),d0
   119de:	|                              lsl.l #3,d0
   119e0:	|                              move.l d0,98(sp)
   119e4:	|                              clr.l 94(sp)
   119e8:	|                              move.l 17b28 <SysBase>,d0
   119ee:	|                              movea.l d0,a6
   119f0:	|                              move.l 98(sp),d0
   119f4:	|                              move.l 94(sp),d1
   119f8:	|                              jsr -684(a6)
   119fc:	|                              move.l d0,90(sp)
   11a00:	|                              move.l 90(sp),d0
   11a04:	|                              movea.l 17c1e <currentFloor>,a0
   11a0a:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   11a0e:	|                              movea.l 17c1e <currentFloor>,a0
   11a14:	|                              move.l 4(a0),d0
   11a18:	|                          /-- bne.s 11a2e <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   11a1a:	|                          |   pea 15ebb <zbuffer.c.4facf542+0x803>
   11a20:	|                          |   jsr 12048 <KPrintF>
   11a26:	|                          |   addq.l #4,sp
		return FALSE;
   11a28:	|                          |   clr.w d0
   11a2a:	+--------------------------|-- bra.w 11f56 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   11a2e:	|                          \-> clr.l 132(sp)
   11a32:	|                          /-- bra.s 11a86 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   11a34:	|                       /--|-> move.l 17b10 <bigDataFile>,d1
   11a3a:	|                       |  |   movea.l 17c1e <currentFloor>,a0
   11a40:	|                       |  |   movea.l 4(a0),a0
   11a44:	|                       |  |   move.l 132(sp),d0
   11a48:	|                       |  |   lsl.l #3,d0
   11a4a:	|                       |  |   lea (0,a0,d0.l),a2
   11a4e:	|                       |  |   move.l d1,-(sp)
   11a50:	|                       |  |   jsr 6bc <get2bytes>
   11a56:	|                       |  |   addq.l #4,sp
   11a58:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   11a5a:	|                       |  |   move.l 17b10 <bigDataFile>,d1
   11a60:	|                       |  |   movea.l 17c1e <currentFloor>,a0
   11a66:	|                       |  |   movea.l 4(a0),a0
   11a6a:	|                       |  |   move.l 132(sp),d0
   11a6e:	|                       |  |   lsl.l #3,d0
   11a70:	|                       |  |   lea (0,a0,d0.l),a2
   11a74:	|                       |  |   move.l d1,-(sp)
   11a76:	|                       |  |   jsr 6bc <get2bytes>
   11a7c:	|                       |  |   addq.l #4,sp
   11a7e:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   11a82:	|                       |  |   addq.l #1,132(sp)
   11a86:	|                       |  \-> move.l 132(sp),d0
   11a8a:	|                       |      cmp.l 136(sp),d0
   11a8e:	|                       \----- blt.s 11a34 <setFloor+0x24e>
	}

	finishAccess ();
   11a90:	|                              jsr 3d7c <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   11a96:	|                              movea.l 17c1e <currentFloor>,a0
   11a9c:	|                              move.l 8(a0),d0
   11aa0:	|                              add.l d0,d0
   11aa2:	|                              add.l d0,d0
   11aa4:	|                              move.l d0,86(sp)
   11aa8:	|                              clr.l 82(sp)
   11aac:	|                              move.l 17b28 <SysBase>,d0
   11ab2:	|                              movea.l d0,a6
   11ab4:	|                              move.l 86(sp),d0
   11ab8:	|                              move.l 82(sp),d1
   11abc:	|                              jsr -684(a6)
   11ac0:	|                              move.l d0,78(sp)
   11ac4:	|                              move.l 78(sp),d0
   11ac8:	|                              movea.l 17c1e <currentFloor>,a0
   11ace:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   11ad2:	|                              movea.l 17c1e <currentFloor>,a0
   11ad8:	|                              move.l 8(a0),d0
   11adc:	|                              add.l d0,d0
   11ade:	|                              add.l d0,d0
   11ae0:	|                              move.l d0,74(sp)
   11ae4:	|                              clr.l 70(sp)
   11ae8:	|                              move.l 17b28 <SysBase>,d0
   11aee:	|                              movea.l d0,a6
   11af0:	|                              move.l 74(sp),d0
   11af4:	|                              move.l 70(sp),d1
   11af8:	|                              jsr -684(a6)
   11afc:	|                              move.l d0,66(sp)
   11b00:	|                              move.l 66(sp),d0
   11b04:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   11b08:	|                              movea.l 17c1e <currentFloor>,a0
   11b0e:	|                              move.l 16(a0),d0
   11b12:	|                          /-- bne.s 11b28 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   11b14:	|                          |   pea 15ebb <zbuffer.c.4facf542+0x803>
   11b1a:	|                          |   jsr 12048 <KPrintF>
   11b20:	|                          |   addq.l #4,sp
		return FALSE;
   11b22:	|                          |   clr.w d0
   11b24:	+--------------------------|-- bra.w 11f56 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11b28:	|                          \-> clr.l 136(sp)
   11b2c:	|                    /-------- bra.w 11c50 <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   11b30:	|                 /--|-------> movea.l 17c1e <currentFloor>,a0
   11b36:	|                 |  |         move.l 8(a0),d0
   11b3a:	|                 |  |         add.l d0,d0
   11b3c:	|                 |  |         add.l d0,d0
   11b3e:	|                 |  |         move.l d0,50(sp)
   11b42:	|                 |  |         clr.l 46(sp)
   11b46:	|                 |  |         move.l 17b28 <SysBase>,d0
   11b4c:	|                 |  |         movea.l d0,a6
   11b4e:	|                 |  |         move.l 50(sp),d0
   11b52:	|                 |  |         move.l 46(sp),d1
   11b56:	|                 |  |         jsr -684(a6)
   11b5a:	|                 |  |         move.l d0,42(sp)
   11b5e:	|                 |  |         move.l 42(sp),d0
   11b62:	|                 |  |         movea.l 17c1e <currentFloor>,a0
   11b68:	|                 |  |         movea.l 16(a0),a0
   11b6c:	|                 |  |         move.l 136(sp),d1
   11b70:	|                 |  |         add.l d1,d1
   11b72:	|                 |  |         add.l d1,d1
   11b74:	|                 |  |         adda.l d1,a0
   11b76:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   11b78:	|                 |  |         movea.l 17c1e <currentFloor>,a0
   11b7e:	|                 |  |         move.l 8(a0),d0
   11b82:	|                 |  |         add.l d0,d0
   11b84:	|                 |  |         add.l d0,d0
   11b86:	|                 |  |         move.l d0,38(sp)
   11b8a:	|                 |  |         clr.l 34(sp)
   11b8e:	|                 |  |         move.l 17b28 <SysBase>,d0
   11b94:	|                 |  |         movea.l d0,a6
   11b96:	|                 |  |         move.l 38(sp),d0
   11b9a:	|                 |  |         move.l 34(sp),d1
   11b9e:	|                 |  |         jsr -684(a6)
   11ba2:	|                 |  |         move.l d0,30(sp)
   11ba6:	|                 |  |         move.l 30(sp),d1
   11baa:	|                 |  |         move.l 136(sp),d0
   11bae:	|                 |  |         add.l d0,d0
   11bb0:	|                 |  |         add.l d0,d0
   11bb2:	|                 |  |         movea.l 62(sp),a0
   11bb6:	|                 |  |         adda.l d0,a0
   11bb8:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   11bba:	|                 |  |         movea.l 17c1e <currentFloor>,a0
   11bc0:	|                 |  |         move.l 16(a0),d1
   11bc4:	|                 |  |         move.l 136(sp),d0
   11bc8:	|                 |  |         add.l d0,d0
   11bca:	|                 |  |         add.l d0,d0
   11bcc:	|                 |  |         movea.l d1,a0
   11bce:	|                 |  |         adda.l d0,a0
   11bd0:	|                 |  |         move.l (a0),d0
   11bd2:	|                 |  |     /-- bne.s 11be8 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   11bd4:	|                 |  |     |   pea 15ebb <zbuffer.c.4facf542+0x803>
   11bda:	|                 |  |     |   jsr 12048 <KPrintF>
   11be0:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   11be2:	|                 |  |     |   clr.w d0
   11be4:	+-----------------|--|-----|-- bra.w 11f56 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   11be8:	|                 |  |     \-> clr.l 132(sp)
   11bec:	|                 |  |     /-- bra.s 11c3c <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   11bee:	|                 |  |  /--|-> movea.l 17c1e <currentFloor>,a0
   11bf4:	|                 |  |  |  |   move.l 16(a0),d1
   11bf8:	|                 |  |  |  |   move.l 136(sp),d0
   11bfc:	|                 |  |  |  |   add.l d0,d0
   11bfe:	|                 |  |  |  |   add.l d0,d0
   11c00:	|                 |  |  |  |   movea.l d1,a0
   11c02:	|                 |  |  |  |   adda.l d0,a0
   11c04:	|                 |  |  |  |   move.l (a0),d1
   11c06:	|                 |  |  |  |   move.l 132(sp),d0
   11c0a:	|                 |  |  |  |   add.l d0,d0
   11c0c:	|                 |  |  |  |   add.l d0,d0
   11c0e:	|                 |  |  |  |   movea.l d1,a0
   11c10:	|                 |  |  |  |   adda.l d0,a0
   11c12:	|                 |  |  |  |   moveq #-1,d1
   11c14:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   11c16:	|                 |  |  |  |   move.l 136(sp),d0
   11c1a:	|                 |  |  |  |   add.l d0,d0
   11c1c:	|                 |  |  |  |   add.l d0,d0
   11c1e:	|                 |  |  |  |   movea.l 62(sp),a0
   11c22:	|                 |  |  |  |   adda.l d0,a0
   11c24:	|                 |  |  |  |   move.l (a0),d1
   11c26:	|                 |  |  |  |   move.l 132(sp),d0
   11c2a:	|                 |  |  |  |   add.l d0,d0
   11c2c:	|                 |  |  |  |   add.l d0,d0
   11c2e:	|                 |  |  |  |   movea.l d1,a0
   11c30:	|                 |  |  |  |   adda.l d0,a0
   11c32:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   11c38:	|                 |  |  |  |   addq.l #1,132(sp)
   11c3c:	|                 |  |  |  \-> movea.l 17c1e <currentFloor>,a0
   11c42:	|                 |  |  |      move.l 8(a0),d0
   11c46:	|                 |  |  |      cmp.l 132(sp),d0
   11c4a:	|                 |  |  \----- bgt.s 11bee <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11c4c:	|                 |  |         addq.l #1,136(sp)
   11c50:	|                 |  \-------> movea.l 17c1e <currentFloor>,a0
   11c56:	|                 |            move.l 8(a0),d0
   11c5a:	|                 |            cmp.l 136(sp),d0
   11c5e:	|                 \----------- bgt.w 11b30 <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11c62:	|                              clr.l 136(sp)
   11c66:	|              /-------------- bra.w 11d6c <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   11c6a:	|           /--|-------------> clr.l 132(sp)
   11c6e:	|           |  |     /-------- bra.w 11d56 <setFloor+0x570>
			if (i != j) {
   11c72:	|           |  |  /--|-------> move.l 136(sp),d0
   11c76:	|           |  |  |  |         cmp.l 132(sp),d0
   11c7a:	|           |  |  |  |     /-- beq.w 11d0c <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   11c7e:	|           |  |  |  |     |   movea.l 17c1e <currentFloor>,a0
   11c84:	|           |  |  |  |     |   move.l 12(a0),d1
   11c88:	|           |  |  |  |     |   move.l 132(sp),d0
   11c8c:	|           |  |  |  |     |   lsl.l #3,d0
   11c8e:	|           |  |  |  |     |   movea.l d1,a1
   11c90:	|           |  |  |  |     |   adda.l d0,a1
   11c92:	|           |  |  |  |     |   movea.l 17c1e <currentFloor>,a0
   11c98:	|           |  |  |  |     |   move.l 12(a0),d1
   11c9c:	|           |  |  |  |     |   move.l 136(sp),d0
   11ca0:	|           |  |  |  |     |   lsl.l #3,d0
   11ca2:	|           |  |  |  |     |   movea.l d1,a0
   11ca4:	|           |  |  |  |     |   adda.l d0,a0
   11ca6:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   11caa:	|           |  |  |  |     |   move.l (a1),-(sp)
   11cac:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   11cb0:	|           |  |  |  |     |   move.l (a0),-(sp)
   11cb2:	|           |  |  |  |     |   jsr 1153e <polysShareSide>
   11cb8:	|           |  |  |  |     |   lea 16(sp),sp
   11cbc:	|           |  |  |  |     |   tst.w d0
   11cbe:	|           |  |  |  |  /--|-- beq.w 11d52 <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   11cc2:	|           |  |  |  |  |  |   movea.l 17c1e <currentFloor>,a0
   11cc8:	|           |  |  |  |  |  |   move.l 16(a0),d1
   11ccc:	|           |  |  |  |  |  |   move.l 136(sp),d0
   11cd0:	|           |  |  |  |  |  |   add.l d0,d0
   11cd2:	|           |  |  |  |  |  |   add.l d0,d0
   11cd4:	|           |  |  |  |  |  |   movea.l d1,a0
   11cd6:	|           |  |  |  |  |  |   adda.l d0,a0
   11cd8:	|           |  |  |  |  |  |   move.l (a0),d1
   11cda:	|           |  |  |  |  |  |   move.l 132(sp),d0
   11cde:	|           |  |  |  |  |  |   add.l d0,d0
   11ce0:	|           |  |  |  |  |  |   add.l d0,d0
   11ce2:	|           |  |  |  |  |  |   movea.l d1,a0
   11ce4:	|           |  |  |  |  |  |   adda.l d0,a0
   11ce6:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   11cea:	|           |  |  |  |  |  |   move.l 136(sp),d0
   11cee:	|           |  |  |  |  |  |   add.l d0,d0
   11cf0:	|           |  |  |  |  |  |   add.l d0,d0
   11cf2:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   11cf6:	|           |  |  |  |  |  |   adda.l d0,a0
   11cf8:	|           |  |  |  |  |  |   move.l (a0),d1
   11cfa:	|           |  |  |  |  |  |   move.l 132(sp),d0
   11cfe:	|           |  |  |  |  |  |   add.l d0,d0
   11d00:	|           |  |  |  |  |  |   add.l d0,d0
   11d02:	|           |  |  |  |  |  |   movea.l d1,a0
   11d04:	|           |  |  |  |  |  |   adda.l d0,a0
   11d06:	|           |  |  |  |  |  |   moveq #1,d1
   11d08:	|           |  |  |  |  |  |   move.l d1,(a0)
   11d0a:	|           |  |  |  |  +--|-- bra.s 11d52 <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   11d0c:	|           |  |  |  |  |  \-> movea.l 17c1e <currentFloor>,a0
   11d12:	|           |  |  |  |  |      move.l 16(a0),d1
   11d16:	|           |  |  |  |  |      move.l 136(sp),d0
   11d1a:	|           |  |  |  |  |      add.l d0,d0
   11d1c:	|           |  |  |  |  |      add.l d0,d0
   11d1e:	|           |  |  |  |  |      movea.l d1,a0
   11d20:	|           |  |  |  |  |      adda.l d0,a0
   11d22:	|           |  |  |  |  |      move.l (a0),d1
   11d24:	|           |  |  |  |  |      move.l 132(sp),d0
   11d28:	|           |  |  |  |  |      add.l d0,d0
   11d2a:	|           |  |  |  |  |      add.l d0,d0
   11d2c:	|           |  |  |  |  |      movea.l d1,a0
   11d2e:	|           |  |  |  |  |      adda.l d0,a0
   11d30:	|           |  |  |  |  |      moveq #-2,d0
   11d32:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   11d34:	|           |  |  |  |  |      move.l 136(sp),d0
   11d38:	|           |  |  |  |  |      add.l d0,d0
   11d3a:	|           |  |  |  |  |      add.l d0,d0
   11d3c:	|           |  |  |  |  |      movea.l 62(sp),a0
   11d40:	|           |  |  |  |  |      adda.l d0,a0
   11d42:	|           |  |  |  |  |      move.l (a0),d1
   11d44:	|           |  |  |  |  |      move.l 132(sp),d0
   11d48:	|           |  |  |  |  |      add.l d0,d0
   11d4a:	|           |  |  |  |  |      add.l d0,d0
   11d4c:	|           |  |  |  |  |      movea.l d1,a0
   11d4e:	|           |  |  |  |  |      adda.l d0,a0
   11d50:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   11d52:	|           |  |  |  |  \----> addq.l #1,132(sp)
   11d56:	|           |  |  |  \-------> movea.l 17c1e <currentFloor>,a0
   11d5c:	|           |  |  |            move.l 8(a0),d0
   11d60:	|           |  |  |            cmp.l 132(sp),d0
   11d64:	|           |  |  \----------- bgt.w 11c72 <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11d68:	|           |  |               addq.l #1,136(sp)
   11d6c:	|           |  \-------------> movea.l 17c1e <currentFloor>,a0
   11d72:	|           |                  move.l 8(a0),d0
   11d76:	|           |                  cmp.l 136(sp),d0
   11d7a:	|           \----------------- bgt.w 11c6a <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   11d7e:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   11d82:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   11d86:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11d8a:	|  |                           clr.l 136(sp)
   11d8e:	|  |     /-------------------- bra.w 11ee4 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   11d92:	|  |  /--|-------------------> clr.l 132(sp)
   11d96:	|  |  |  |     /-------------- bra.w 11ece <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   11d9a:	|  |  |  |  /--|-------------> movea.l 17c1e <currentFloor>,a0
   11da0:	|  |  |  |  |  |               move.l 16(a0),d1
   11da4:	|  |  |  |  |  |               move.l 136(sp),d0
   11da8:	|  |  |  |  |  |               add.l d0,d0
   11daa:	|  |  |  |  |  |               add.l d0,d0
   11dac:	|  |  |  |  |  |               movea.l d1,a0
   11dae:	|  |  |  |  |  |               adda.l d0,a0
   11db0:	|  |  |  |  |  |               move.l (a0),d1
   11db2:	|  |  |  |  |  |               move.l 132(sp),d0
   11db6:	|  |  |  |  |  |               add.l d0,d0
   11db8:	|  |  |  |  |  |               add.l d0,d0
   11dba:	|  |  |  |  |  |               movea.l d1,a0
   11dbc:	|  |  |  |  |  |               adda.l d0,a0
   11dbe:	|  |  |  |  |  |               move.l (a0),d0
   11dc0:	|  |  |  |  |  |               moveq #-1,d1
   11dc2:	|  |  |  |  |  |               cmp.l d0,d1
   11dc4:	|  |  |  |  |  |  /----------- bne.w 11eca <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   11dc8:	|  |  |  |  |  |  |            clr.l 122(sp)
   11dcc:	|  |  |  |  |  |  |     /----- bra.w 11eb8 <setFloor+0x6d2>
						if (d != i && d != j) {
   11dd0:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   11dd4:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   11dd8:	|  |  |  |  |  |  |  |  |  /-- beq.w 11eb4 <setFloor+0x6ce>
   11ddc:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   11de0:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   11de4:	|  |  |  |  |  |  |  |  |  +-- beq.w 11eb4 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   11de8:	|  |  |  |  |  |  |  |  |  |   movea.l 17c1e <currentFloor>,a0
   11dee:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   11df2:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   11df6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11df8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11dfa:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11dfc:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11dfe:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   11e00:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   11e04:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11e06:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11e08:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11e0a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11e0c:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   11e0e:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   11e12:	|  |  |  |  |  |  |  |  |  +-- bne.w 11eb4 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   11e16:	|  |  |  |  |  |  |  |  |  |   movea.l 17c1e <currentFloor>,a0
   11e1c:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   11e20:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   11e24:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11e26:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11e28:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11e2a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11e2c:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   11e2e:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   11e32:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11e34:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11e36:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11e38:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11e3a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   11e3c:	|  |  |  |  |  |  |  |  |  +-- bmi.s 11eb4 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   11e3e:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   11e42:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11e44:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11e46:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   11e4a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11e4c:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   11e4e:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   11e52:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11e54:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11e56:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11e58:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11e5a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   11e5c:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   11e60:	|  |  |  |  |  |  |  |  |  +-- bgt.s 11eb4 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   11e62:	|  |  |  |  |  |  |  |  |  |   movea.l 17c1e <currentFloor>,a0
   11e68:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   11e6c:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   11e70:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11e72:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11e74:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11e76:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11e78:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   11e7a:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   11e7e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11e80:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11e82:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11e84:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11e86:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   11e8a:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   11e8e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11e90:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11e92:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   11e96:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11e98:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   11e9a:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   11e9e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11ea0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11ea2:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11ea4:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11ea6:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   11eaa:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   11eac:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   11eae:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   11eb4:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   11eb8:	|  |  |  |  |  |  |  |  \----> movea.l 17c1e <currentFloor>,a0
   11ebe:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   11ec2:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   11ec6:	|  |  |  |  |  |  |  \-------- bgt.w 11dd0 <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   11eca:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   11ece:	|  |  |  |  |  \-------------> movea.l 17c1e <currentFloor>,a0
   11ed4:	|  |  |  |  |                  move.l 8(a0),d0
   11ed8:	|  |  |  |  |                  cmp.l 132(sp),d0
   11edc:	|  |  |  |  \----------------- bgt.w 11d9a <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11ee0:	|  |  |  |                     addq.l #1,136(sp)
   11ee4:	|  |  |  \-------------------> movea.l 17c1e <currentFloor>,a0
   11eea:	|  |  |                        move.l 8(a0),d0
   11eee:	|  |  |                        cmp.l 136(sp),d0
   11ef2:	|  |  \----------------------- bgt.w 11d92 <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   11ef6:	|  |                           tst.w 130(sp)
   11efa:	|  \-------------------------- bne.w 11d82 <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11efe:	|                              clr.l 136(sp)
   11f02:	|                          /-- bra.s 11f2a <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   11f04:	|                       /--|-> move.l 136(sp),d0
   11f08:	|                       |  |   add.l d0,d0
   11f0a:	|                       |  |   add.l d0,d0
   11f0c:	|                       |  |   movea.l 62(sp),a0
   11f10:	|                       |  |   adda.l d0,a0
   11f12:	|                       |  |   move.l (a0),54(sp)
   11f16:	|                       |  |   move.l 17b28 <SysBase>,d0
   11f1c:	|                       |  |   movea.l d0,a6
   11f1e:	|                       |  |   movea.l 54(sp),a1
   11f22:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11f26:	|                       |  |   addq.l #1,136(sp)
   11f2a:	|                       |  \-> movea.l 17c1e <currentFloor>,a0
   11f30:	|                       |      move.l 8(a0),d0
   11f34:	|                       |      cmp.l 136(sp),d0
   11f38:	|                       \----- bgt.s 11f04 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   11f3a:	|                              move.l 62(sp),58(sp)
   11f40:	|                              move.l 17b28 <SysBase>,d0
   11f46:	|                              movea.l d0,a6
   11f48:	|                              movea.l 58(sp),a1
   11f4c:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   11f50:	|                              clr.l 62(sp)

	return TRUE;
   11f54:	|                              moveq #1,d0
}
   11f56:	\----------------------------> movea.l (sp)+,a2
   11f58:	                               movea.l (sp)+,a6
   11f5a:	                               lea 132(sp),sp
   11f5e:	                               rts

00011f60 <setFloorNull>:

void setFloorNull () {
	killFloor ();
   11f60:	jsr 1144e <killFloor>
	noFloor ();
   11f66:	jsr 11372 <noFloor>
   11f6c:	nop
   11f6e:	rts

00011f70 <WaitVbl>:
void WaitVbl() {
   11f70:	       subq.l #8,sp
	debug_start_idle();
   11f72:	       jsr 12220 <debug_start_idle>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   11f78:	   /-> movea.l #14675972,a0
   11f7e:	   |   move.l (a0),d0
   11f80:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   11f82:	   |   move.l (sp),d0
   11f84:	   |   andi.l #130816,d0
   11f8a:	   |   move.l d0,(sp)
		if (vpos!=(311<<8))
   11f8c:	   |   move.l (sp),d0
   11f8e:	   |   cmpi.l #79616,d0
   11f94:	   \-- beq.s 11f78 <WaitVbl+0x8>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   11f96:	/----> movea.l #14675972,a0
   11f9c:	|      move.l (a0),d0
   11f9e:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   11fa2:	|      move.l 4(sp),d0
   11fa6:	|      andi.l #130816,d0
   11fac:	|      move.l d0,4(sp)
		if (vpos==(311<<8))
   11fb0:	|      move.l 4(sp),d0
   11fb4:	|      cmpi.l #79616,d0
   11fba:	|  /-- beq.s 11fbe <WaitVbl+0x4e>
	while (1) {
   11fbc:	\--|-- bra.s 11f96 <WaitVbl+0x26>
			break;
   11fbe:	   \-> nop
	debug_stop_idle();
   11fc0:	       jsr 1223a <debug_stop_idle>
}
   11fc6:	       nop
   11fc8:	       addq.l #8,sp
   11fca:	       rts

00011fcc <memset>:
void* memset(void *dest, int val, unsigned long len) {
   11fcc:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   11fce:	       move.l 8(sp),(sp)
	while(len-- > 0)
   11fd2:	   /-- bra.s 11fe4 <memset+0x18>
		*ptr++ = val;
   11fd4:	/--|-> move.l (sp),d0
   11fd6:	|  |   move.l d0,d1
   11fd8:	|  |   addq.l #1,d1
   11fda:	|  |   move.l d1,(sp)
   11fdc:	|  |   move.l 12(sp),d1
   11fe0:	|  |   movea.l d0,a0
   11fe2:	|  |   move.b d1,(a0)
	while(len-- > 0)
   11fe4:	|  \-> move.l 16(sp),d0
   11fe8:	|      move.l d0,d1
   11fea:	|      subq.l #1,d1
   11fec:	|      move.l d1,16(sp)
   11ff0:	|      tst.l d0
   11ff2:	\----- bne.s 11fd4 <memset+0x8>
	return dest;
   11ff4:	       move.l 8(sp),d0
}
   11ff8:	       addq.l #4,sp
   11ffa:	       rts

00011ffc <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   11ffc:	       subq.l #8,sp
   11ffe:	       move.l d2,-(sp)
	char *d = (char *)dest;
   12000:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   12006:	       move.l 20(sp),4(sp)
	while(len--)
   1200c:	   /-- bra.s 1202e <memcpy+0x32>
		*d++ = *s++;
   1200e:	/--|-> move.l 4(sp),d1
   12012:	|  |   move.l d1,d0
   12014:	|  |   addq.l #1,d0
   12016:	|  |   move.l d0,4(sp)
   1201a:	|  |   move.l 8(sp),d0
   1201e:	|  |   move.l d0,d2
   12020:	|  |   addq.l #1,d2
   12022:	|  |   move.l d2,8(sp)
   12026:	|  |   movea.l d1,a0
   12028:	|  |   move.b (a0),d1
   1202a:	|  |   movea.l d0,a0
   1202c:	|  |   move.b d1,(a0)
	while(len--)
   1202e:	|  \-> move.l 24(sp),d0
   12032:	|      move.l d0,d1
   12034:	|      subq.l #1,d1
   12036:	|      move.l d1,24(sp)
   1203a:	|      tst.l d0
   1203c:	\----- bne.s 1200e <memcpy+0x12>
	return dest;
   1203e:	       move.l 16(sp),d0
}
   12042:	       move.l (sp)+,d2
   12044:	       addq.l #8,sp
   12046:	       rts

00012048 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   12048:	       lea -128(sp),sp
   1204c:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   12050:	       move.w f0ff60 <gcc8_c_support.c.8bf68f31+0xed3875>,d0
   12056:	       cmpi.w #20153,d0
   1205a:	   /-- beq.s 1207e <KPrintF+0x36>
   1205c:	   |   cmpi.w #-24562,d0
   12060:	   +-- beq.s 1207e <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   12062:	   |   movea.l 17b28 <SysBase>,a6
   12068:	   |   movea.l 144(sp),a0
   1206c:	   |   lea 148(sp),a1
   12070:	   |   lea 12b02 <KPutCharX>,a2
   12076:	   |   suba.l a3,a3
   12078:	   |   jsr -522(a6)
}
   1207c:	/--|-- bra.s 120a8 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   1207e:	|  \-> movea.l 17b28 <SysBase>,a6
   12084:	|      movea.l 144(sp),a0
   12088:	|      lea 148(sp),a1
   1208c:	|      lea 12b10 <PutChar>,a2
   12092:	|      lea 12(sp),a3
   12096:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   1209a:	|      move.l a3,-(sp)
   1209c:	|      pea 56 <_start+0x56>
   120a0:	|      jsr f0ff60 <gcc8_c_support.c.8bf68f31+0xed3875>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   120a6:	|      addq.l #8,sp
}
   120a8:	\----> movem.l (sp)+,a2-a3/a6
   120ac:	       lea 128(sp),sp
   120b0:	       rts

000120b2 <warpmode>:

void warpmode(int on) { // bool
   120b2:	          subq.l #8,sp
	long(*UaeConf)(long mode, int index, const char* param, int param_len, char* outbuf, int outbuf_len);
	UaeConf = (long(*)(long, int, const char*, int, char*, int))0xf0ff60;
   120b4:	          move.l #15794016,4(sp)
	if(*((UWORD *)UaeConf) == 0x4eb9 || *((UWORD *)UaeConf) == 0xa00e) {
   120bc:	          movea.l 4(sp),a0
   120c0:	          move.w (a0),d0
   120c2:	          cmpi.w #20153,d0
   120c6:	      /-- beq.s 120d6 <warpmode+0x24>
   120c8:	      |   movea.l 4(sp),a0
   120cc:	      |   move.w (a0),d0
   120ce:	      |   cmpi.w #-24562,d0
   120d2:	/-----|-- bne.w 121da <warpmode+0x128>
		char outbuf;
		UaeConf(82, -1, on ? "cpu_speed max" : "cpu_speed real", 0, &outbuf, 1);
   120d6:	|     \-> tst.l 12(sp)
   120da:	|  /----- beq.s 120e4 <warpmode+0x32>
   120dc:	|  |      move.l #89820,d0
   120e2:	|  |  /-- bra.s 120ea <warpmode+0x38>
   120e4:	|  \--|-> move.l #89834,d0
   120ea:	|     \-> pea 1 <_start+0x1>
   120ee:	|         move.l sp,d1
   120f0:	|         addq.l #7,d1
   120f2:	|         move.l d1,-(sp)
   120f4:	|         clr.l -(sp)
   120f6:	|         move.l d0,-(sp)
   120f8:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffc3914>
   120fc:	|         pea 52 <_start+0x52>
   12100:	|         movea.l 28(sp),a0
   12104:	|         jsr (a0)
   12106:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "cpu_cycle_exact false" : "cpu_cycle_exact true", 0, &outbuf, 1);
   1210a:	|         tst.l 12(sp)
   1210e:	|  /----- beq.s 12118 <warpmode+0x66>
   12110:	|  |      move.l #89849,d0
   12116:	|  |  /-- bra.s 1211e <warpmode+0x6c>
   12118:	|  \--|-> move.l #89871,d0
   1211e:	|     \-> pea 1 <_start+0x1>
   12122:	|         move.l sp,d1
   12124:	|         addq.l #7,d1
   12126:	|         move.l d1,-(sp)
   12128:	|         clr.l -(sp)
   1212a:	|         move.l d0,-(sp)
   1212c:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffc3914>
   12130:	|         pea 52 <_start+0x52>
   12134:	|         movea.l 28(sp),a0
   12138:	|         jsr (a0)
   1213a:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "cpu_memory_cycle_exact false" : "cpu_memory_cycle_exact true", 0, &outbuf, 1);
   1213e:	|         tst.l 12(sp)
   12142:	|  /----- beq.s 1214c <warpmode+0x9a>
   12144:	|  |      move.l #89892,d0
   1214a:	|  |  /-- bra.s 12152 <warpmode+0xa0>
   1214c:	|  \--|-> move.l #89921,d0
   12152:	|     \-> pea 1 <_start+0x1>
   12156:	|         move.l sp,d1
   12158:	|         addq.l #7,d1
   1215a:	|         move.l d1,-(sp)
   1215c:	|         clr.l -(sp)
   1215e:	|         move.l d0,-(sp)
   12160:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffc3914>
   12164:	|         pea 52 <_start+0x52>
   12168:	|         movea.l 28(sp),a0
   1216c:	|         jsr (a0)
   1216e:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
   12172:	|         tst.l 12(sp)
   12176:	|  /----- beq.s 12180 <warpmode+0xce>
   12178:	|  |      move.l #89949,d0
   1217e:	|  |  /-- bra.s 12186 <warpmode+0xd4>
   12180:	|  \--|-> move.l #89975,d0
   12186:	|     \-> pea 1 <_start+0x1>
   1218a:	|         move.l sp,d1
   1218c:	|         addq.l #7,d1
   1218e:	|         move.l d1,-(sp)
   12190:	|         clr.l -(sp)
   12192:	|         move.l d0,-(sp)
   12194:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffc3914>
   12198:	|         pea 52 <_start+0x52>
   1219c:	|         movea.l 28(sp),a0
   121a0:	|         jsr (a0)
   121a2:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
   121a6:	|         tst.l 12(sp)
   121aa:	|  /----- beq.s 121b4 <warpmode+0x102>
   121ac:	|  |      move.l #90000,d0
   121b2:	|  |  /-- bra.s 121ba <warpmode+0x108>
   121b4:	|  \--|-> move.l #90010,d0
   121ba:	|     \-> pea 1 <_start+0x1>
   121be:	|         move.l sp,d1
   121c0:	|         addq.l #7,d1
   121c2:	|         move.l d1,-(sp)
   121c4:	|         clr.l -(sp)
   121c6:	|         move.l d0,-(sp)
   121c8:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffc3914>
   121cc:	|         pea 52 <_start+0x52>
   121d0:	|         movea.l 28(sp),a0
   121d4:	|         jsr (a0)
   121d6:	|         lea 24(sp),sp
	}
}
   121da:	\-------> nop
   121dc:	          addq.l #8,sp
   121de:	          rts

000121e0 <debug_cmd>:

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   121e0:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   121e2:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   121e8:	       movea.l (sp),a0
   121ea:	       move.w (a0),d0
   121ec:	       cmpi.w #20153,d0
   121f0:	   /-- beq.s 121fc <debug_cmd+0x1c>
   121f2:	   |   movea.l (sp),a0
   121f4:	   |   move.w (a0),d0
   121f6:	   |   cmpi.w #-24562,d0
   121fa:	/--|-- bne.s 1221a <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   121fc:	|  \-> move.l 20(sp),-(sp)
   12200:	|      move.l 20(sp),-(sp)
   12204:	|      move.l 20(sp),-(sp)
   12208:	|      move.l 20(sp),-(sp)
   1220c:	|      pea 58 <_start+0x58>
   12210:	|      movea.l 20(sp),a0
   12214:	|      jsr (a0)
   12216:	|      lea 20(sp),sp
	}
}
   1221a:	\----> nop
   1221c:	       addq.l #4,sp
   1221e:	       rts

00012220 <debug_start_idle>:
	debug_cmd(barto_cmd_text, (((unsigned int)left) << 16) | ((unsigned int)top), (unsigned int)text, color);
}

// profiler
void debug_start_idle() {
	debug_cmd(barto_cmd_set_idle, 1, 0, 0);
   12220:	clr.l -(sp)
   12222:	clr.l -(sp)
   12224:	pea 1 <_start+0x1>
   12228:	pea 5 <_start+0x5>
   1222c:	jsr 121e0 <debug_cmd>
   12232:	lea 16(sp),sp
}
   12236:	nop
   12238:	rts

0001223a <debug_stop_idle>:

void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
   1223a:	clr.l -(sp)
   1223c:	clr.l -(sp)
   1223e:	clr.l -(sp)
   12240:	pea 5 <_start+0x5>
   12244:	jsr 121e0 <debug_cmd>
   1224a:	lea 16(sp),sp
}
   1224e:	nop
   12250:	rts

00012252 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   12252:	lea -12(sp),sp
   12256:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   12258:	move.l 20(sp),12(sp)
   1225e:	move.l 24(sp),8(sp)
   12264:	move.l 17b38 <MathIeeeSingBasBase>,d0
   1226a:	movea.l d0,a6
   1226c:	move.l 12(sp),d0
   12270:	move.l 8(sp),d1
   12274:	jsr -66(a6)
   12278:	move.l d0,4(sp)
   1227c:	move.l 4(sp),d0
}
   12280:	movea.l (sp)+,a6
   12282:	lea 12(sp),sp
   12286:	rts

00012288 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   12288:	lea -32(sp),sp
   1228c:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   12290:	move.l 48(sp),36(sp)
   12296:	move.l 52(sp),40(sp)
   1229c:	move.l 56(sp),28(sp)
   122a2:	move.l 60(sp),32(sp)
   122a8:	move.l 17b40 <MathIeeeDoubBasBase>,d0
   122ae:	movea.l d0,a6
   122b0:	move.l 36(sp),d0
   122b4:	move.l 40(sp),d1
   122b8:	move.l 28(sp),d2
   122bc:	move.l 32(sp),d3
   122c0:	jsr -66(a6)
   122c4:	move.l d0,12(sp)
   122c8:	move.l d1,16(sp)
   122cc:	move.l 12(sp),20(sp)
   122d2:	move.l 16(sp),24(sp)
   122d8:	move.l 20(sp),d0
   122dc:	move.l 24(sp),d1
}
   122e0:	movem.l (sp)+,d2-d3/a6
   122e4:	lea 32(sp),sp
   122e8:	rts

000122ea <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   122ea:	lea -32(sp),sp
   122ee:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   122f2:	move.l 48(sp),36(sp)
   122f8:	move.l 52(sp),40(sp)
   122fe:	move.l 56(sp),28(sp)
   12304:	move.l 60(sp),32(sp)
   1230a:	move.l 17b40 <MathIeeeDoubBasBase>,d0
   12310:	movea.l d0,a6
   12312:	move.l 36(sp),d0
   12316:	move.l 40(sp),d1
   1231a:	move.l 28(sp),d2
   1231e:	move.l 32(sp),d3
   12322:	jsr -84(a6)
   12326:	move.l d0,12(sp)
   1232a:	move.l d1,16(sp)
   1232e:	move.l 12(sp),20(sp)
   12334:	move.l 16(sp),24(sp)
   1233a:	move.l 20(sp),d0
   1233e:	move.l 24(sp),d1
}
   12342:	movem.l (sp)+,d2-d3/a6
   12346:	lea 32(sp),sp
   1234a:	rts

0001234c <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   1234c:	lea -12(sp),sp
   12350:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   12352:	move.l 20(sp),12(sp)
   12358:	move.l 24(sp),8(sp)
   1235e:	move.l 17b38 <MathIeeeSingBasBase>,d0
   12364:	movea.l d0,a6
   12366:	move.l 12(sp),d0
   1236a:	move.l 8(sp),d1
   1236e:	jsr -84(a6)
   12372:	move.l d0,4(sp)
   12376:	move.l 4(sp),d0
}
   1237a:	movea.l (sp)+,a6
   1237c:	lea 12(sp),sp
   12380:	rts

00012382 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   12382:	lea -12(sp),sp
   12386:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   12388:	move.l 20(sp),12(sp)
   1238e:	move.l 24(sp),8(sp)
   12394:	move.l 17b38 <MathIeeeSingBasBase>,d0
   1239a:	movea.l d0,a6
   1239c:	move.l 12(sp),d0
   123a0:	move.l 8(sp),d1
   123a4:	jsr -42(a6)
   123a8:	move.l d0,4(sp)
   123ac:	move.l 4(sp),d0
}
   123b0:	movea.l (sp)+,a6
   123b2:	lea 12(sp),sp
   123b6:	rts

000123b8 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   123b8:	lea -20(sp),sp
   123bc:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   123be:	move.l 28(sp),20(sp)
   123c4:	move.l 17b44 <MathIeeeDoubTransBase>,d0
   123ca:	movea.l d0,a6
   123cc:	move.l 20(sp),d0
   123d0:	jsr -108(a6)
   123d4:	move.l d0,4(sp)
   123d8:	move.l d1,8(sp)
   123dc:	move.l 4(sp),12(sp)
   123e2:	move.l 8(sp),16(sp)
   123e8:	move.l 12(sp),d0
   123ec:	move.l 16(sp),d1
}
   123f0:	movea.l (sp)+,a6
   123f2:	lea 20(sp),sp
   123f6:	rts

000123f8 <__fixdfsi>:

DOUBLE __fixdfsi(DOUBLE value) {
   123f8:	lea -12(sp),sp
   123fc:	move.l a6,-(sp)
	return IEEEDPFix(value);
   123fe:	move.l 20(sp),8(sp)
   12404:	move.l 24(sp),12(sp)
   1240a:	move.l 17b40 <MathIeeeDoubBasBase>,d0
   12410:	movea.l d0,a6
   12412:	move.l 8(sp),d0
   12416:	move.l 12(sp),d1
   1241a:	jsr -30(a6)
   1241e:	move.l d0,4(sp)
   12422:	move.l 4(sp),d0
   12426:	move.l d0,-(sp)
   12428:	jsr 12460 <__floatsidf>
   1242e:	addq.l #4,sp
}
   12430:	movea.l (sp)+,a6
   12432:	lea 12(sp),sp
   12436:	rts

00012438 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   12438:	subq.l #8,sp
   1243a:	move.l a6,-(sp)
	return IEEESPFix(value);
   1243c:	move.l 16(sp),8(sp)
   12442:	move.l 17b38 <MathIeeeSingBasBase>,d0
   12448:	movea.l d0,a6
   1244a:	move.l 8(sp),d0
   1244e:	jsr -30(a6)
   12452:	move.l d0,4(sp)
   12456:	move.l 4(sp),d0
}
   1245a:	movea.l (sp)+,a6
   1245c:	addq.l #8,sp
   1245e:	rts

00012460 <__floatsidf>:


DOUBLE __floatsidf (int i) {
   12460:	lea -20(sp),sp
   12464:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   12466:	move.l 28(sp),20(sp)
   1246c:	move.l 17b40 <MathIeeeDoubBasBase>,d0
   12472:	movea.l d0,a6
   12474:	move.l 20(sp),d0
   12478:	jsr -36(a6)
   1247c:	move.l d0,4(sp)
   12480:	move.l d1,8(sp)
   12484:	move.l 4(sp),12(sp)
   1248a:	move.l 8(sp),16(sp)
   12490:	move.l 12(sp),d0
   12494:	move.l 16(sp),d1
}
   12498:	movea.l (sp)+,a6
   1249a:	lea 20(sp),sp
   1249e:	rts

000124a0 <__floatsisf>:

FLOAT __floatsisf(int i) {
   124a0:	subq.l #8,sp
   124a2:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   124a4:	move.l 16(sp),8(sp)
   124aa:	move.l 17b38 <MathIeeeSingBasBase>,d0
   124b0:	movea.l d0,a6
   124b2:	move.l 8(sp),d0
   124b6:	jsr -36(a6)
   124ba:	move.l d0,4(sp)
   124be:	move.l 4(sp),d0
}
   124c2:	movea.l (sp)+,a6
   124c4:	addq.l #8,sp
   124c6:	rts

000124c8 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   124c8:	subq.l #8,sp
   124ca:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   124cc:	move.l 16(sp),8(sp)
   124d2:	move.l 17b38 <MathIeeeSingBasBase>,d0
   124d8:	movea.l d0,a6
   124da:	move.l 8(sp),d0
   124de:	jsr -36(a6)
   124e2:	move.l d0,4(sp)
   124e6:	move.l 4(sp),d0
}
   124ea:	movea.l (sp)+,a6
   124ec:	addq.l #8,sp
   124ee:	rts

000124f0 <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   124f0:	lea -32(sp),sp
   124f4:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   124f8:	move.l 48(sp),36(sp)
   124fe:	move.l 52(sp),40(sp)
   12504:	move.l 56(sp),28(sp)
   1250a:	move.l 60(sp),32(sp)
   12510:	move.l 17b40 <MathIeeeDoubBasBase>,d0
   12516:	movea.l d0,a6
   12518:	move.l 36(sp),d0
   1251c:	move.l 40(sp),d1
   12520:	move.l 28(sp),d2
   12524:	move.l 32(sp),d3
   12528:	jsr -78(a6)
   1252c:	move.l d0,12(sp)
   12530:	move.l d1,16(sp)
   12534:	move.l 12(sp),20(sp)
   1253a:	move.l 16(sp),24(sp)
   12540:	move.l 20(sp),d0
   12544:	move.l 24(sp),d1
}
   12548:	movem.l (sp)+,d2-d3/a6
   1254c:	lea 32(sp),sp
   12550:	rts

00012552 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   12552:	lea -12(sp),sp
   12556:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   12558:	move.l 20(sp),12(sp)
   1255e:	move.l 24(sp),8(sp)
   12564:	move.l 17b38 <MathIeeeSingBasBase>,d0
   1256a:	movea.l d0,a6
   1256c:	move.l 12(sp),d0
   12570:	move.l 8(sp),d1
   12574:	jsr -78(a6)
   12578:	move.l d0,4(sp)
   1257c:	move.l 4(sp),d0
}
   12580:	movea.l (sp)+,a6
   12582:	lea 12(sp),sp
   12586:	rts

00012588 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   12588:	lea -12(sp),sp
   1258c:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1258e:	move.l 20(sp),12(sp)
   12594:	move.l 24(sp),8(sp)
   1259a:	move.l 17b38 <MathIeeeSingBasBase>,d0
   125a0:	movea.l d0,a6
   125a2:	move.l 12(sp),d0
   125a6:	move.l 8(sp),d1
   125aa:	jsr -42(a6)
   125ae:	move.l d0,4(sp)
   125b2:	move.l 4(sp),d0
}
   125b6:	movea.l (sp)+,a6
   125b8:	lea 12(sp),sp
   125bc:	rts

000125be <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   125be:	lea -20(sp),sp
   125c2:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   125c6:	move.l 36(sp),24(sp)
   125cc:	move.l 40(sp),28(sp)
   125d2:	move.l 44(sp),16(sp)
   125d8:	move.l 48(sp),20(sp)
   125de:	move.l 17b40 <MathIeeeDoubBasBase>,d0
   125e4:	movea.l d0,a6
   125e6:	move.l 24(sp),d0
   125ea:	move.l 28(sp),d1
   125ee:	move.l 16(sp),d2
   125f2:	move.l 20(sp),d3
   125f6:	jsr -42(a6)
   125fa:	move.l d0,12(sp)
   125fe:	move.l 12(sp),d0
}
   12602:	movem.l (sp)+,d2-d3/a6
   12606:	lea 20(sp),sp
   1260a:	rts

0001260c <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   1260c:	lea -12(sp),sp
   12610:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   12612:	move.l 20(sp),12(sp)
   12618:	move.l 24(sp),8(sp)
   1261e:	move.l 17b38 <MathIeeeSingBasBase>,d0
   12624:	movea.l d0,a6
   12626:	move.l 12(sp),d0
   1262a:	move.l 8(sp),d1
   1262e:	jsr -42(a6)
   12632:	move.l d0,4(sp)
   12636:	move.l 4(sp),d0
}
   1263a:	movea.l (sp)+,a6
   1263c:	lea 12(sp),sp
   12640:	rts

00012642 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   12642:	lea -12(sp),sp
   12646:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   12648:	move.l 20(sp),12(sp)
   1264e:	move.l 24(sp),8(sp)
   12654:	move.l 17b38 <MathIeeeSingBasBase>,d0
   1265a:	movea.l d0,a6
   1265c:	move.l 12(sp),d0
   12660:	move.l 8(sp),d1
   12664:	jsr -42(a6)
   12668:	move.l d0,4(sp)
   1266c:	move.l 4(sp),d0
}
   12670:	movea.l (sp)+,a6
   12672:	lea 12(sp),sp
   12676:	rts

00012678 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   12678:	lea -20(sp),sp
   1267c:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   12680:	move.l 36(sp),24(sp)
   12686:	move.l 40(sp),28(sp)
   1268c:	move.l 44(sp),16(sp)
   12692:	move.l 48(sp),20(sp)
   12698:	move.l 17b40 <MathIeeeDoubBasBase>,d0
   1269e:	movea.l d0,a6
   126a0:	move.l 24(sp),d0
   126a4:	move.l 28(sp),d1
   126a8:	move.l 16(sp),d2
   126ac:	move.l 20(sp),d3
   126b0:	jsr -42(a6)
   126b4:	move.l d0,12(sp)
   126b8:	move.l 12(sp),d0
}
   126bc:	movem.l (sp)+,d2-d3/a6
   126c0:	lea 20(sp),sp
   126c4:	rts

000126c6 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   126c6:	lea -12(sp),sp
   126ca:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   126cc:	move.l 20(sp),12(sp)
   126d2:	move.l 24(sp),8(sp)
   126d8:	move.l 17b38 <MathIeeeSingBasBase>,d0
   126de:	movea.l d0,a6
   126e0:	move.l 12(sp),d0
   126e4:	move.l 8(sp),d1
   126e8:	jsr -42(a6)
   126ec:	move.l d0,4(sp)
   126f0:	move.l 4(sp),d0
}
   126f4:	movea.l (sp)+,a6
   126f6:	lea 12(sp),sp
   126fa:	rts

000126fc <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   126fc:	lea -12(sp),sp
   12700:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   12702:	move.l 20(sp),12(sp)
   12708:	move.l 24(sp),8(sp)
   1270e:	move.l 17b38 <MathIeeeSingBasBase>,d0
   12714:	movea.l d0,a6
   12716:	move.l 12(sp),d0
   1271a:	move.l 8(sp),d1
   1271e:	jsr -42(a6)
   12722:	move.l d0,4(sp)
   12726:	move.l 4(sp),d0
}
   1272a:	movea.l (sp)+,a6
   1272c:	lea 12(sp),sp
   12730:	rts

00012732 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   12732:	lea -32(sp),sp
   12736:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   1273a:	move.l 48(sp),36(sp)
   12740:	move.l 52(sp),40(sp)
   12746:	move.l 56(sp),28(sp)
   1274c:	move.l 60(sp),32(sp)
   12752:	move.l 17b40 <MathIeeeDoubBasBase>,d0
   12758:	movea.l d0,a6
   1275a:	move.l 36(sp),d0
   1275e:	move.l 40(sp),d1
   12762:	move.l 28(sp),d2
   12766:	move.l 32(sp),d3
   1276a:	jsr -72(a6)
   1276e:	move.l d0,12(sp)
   12772:	move.l d1,16(sp)
   12776:	move.l 12(sp),20(sp)
   1277c:	move.l 16(sp),24(sp)
   12782:	move.l 20(sp),d0
   12786:	move.l 24(sp),d1
}
   1278a:	movem.l (sp)+,d2-d3/a6
   1278e:	lea 32(sp),sp
   12792:	rts

00012794 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   12794:	lea -12(sp),sp
   12798:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   1279a:	move.l 20(sp),12(sp)
   127a0:	move.l 24(sp),8(sp)
   127a6:	move.l 17b38 <MathIeeeSingBasBase>,d0
   127ac:	movea.l d0,a6
   127ae:	move.l 12(sp),d0
   127b2:	move.l 8(sp),d1
   127b6:	jsr -72(a6)
   127ba:	move.l d0,4(sp)
   127be:	move.l 4(sp),d0
}
   127c2:	movea.l (sp)+,a6
   127c4:	lea 12(sp),sp
   127c8:	rts

000127ca <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   127ca:	lea -12(sp),sp
   127ce:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   127d0:	move.l 20(sp),8(sp)
   127d6:	move.l 24(sp),12(sp)
   127dc:	move.l 17b44 <MathIeeeDoubTransBase>,d0
   127e2:	movea.l d0,a6
   127e4:	move.l 8(sp),d0
   127e8:	move.l 12(sp),d1
   127ec:	jsr -102(a6)
   127f0:	move.l d0,4(sp)
   127f4:	move.l 4(sp),d0
}
   127f8:	movea.l (sp)+,a6
   127fa:	lea 12(sp),sp
   127fe:	rts

00012800 <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   12800:	       lea -24(sp),sp
   12804:	       move.l a6,-(sp)
    if (x > 0) {
   12806:	       clr.l -(sp)
   12808:	       move.l 40(sp),-(sp)
   1280c:	       jsr 1260c <__gtsf2>
   12812:	       addq.l #8,sp
   12814:	       tst.l d0
   12816:	   /-- ble.s 12848 <atan2f+0x48>
        return IEEESPAtan(y / x);
   12818:	   |   move.l 36(sp),-(sp)
   1281c:	   |   move.l 36(sp),-(sp)
   12820:	   |   jsr 1234c <__divsf3>
   12826:	   |   addq.l #8,sp
   12828:	   |   move.l d0,8(sp)
   1282c:	   |   move.l 17b3c <MathIeeeSingTransBase>,d0
   12832:	   |   movea.l d0,a6
   12834:	   |   move.l 8(sp),d0
   12838:	   |   jsr -30(a6)
   1283c:	   |   move.l d0,4(sp)
   12840:	   |   move.l 4(sp),d0
   12844:	/--|-- bra.w 129a8 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   12848:	|  \-> clr.l -(sp)
   1284a:	|      move.l 40(sp),-(sp)
   1284e:	|      jsr 126c6 <__ltsf2>
   12854:	|      addq.l #8,sp
   12856:	|      tst.l d0
   12858:	|  /-- bge.s 128cc <atan2f+0xcc>
   1285a:	|  |   clr.l -(sp)
   1285c:	|  |   move.l 36(sp),-(sp)
   12860:	|  |   jsr 12588 <__gesf2>
   12866:	|  |   addq.l #8,sp
   12868:	|  |   tst.l d0
   1286a:	|  +-- blt.s 128cc <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   1286c:	|  |   move.l 36(sp),-(sp)
   12870:	|  |   move.l 36(sp),-(sp)
   12874:	|  |   jsr 1234c <__divsf3>
   1287a:	|  |   addq.l #8,sp
   1287c:	|  |   move.l d0,24(sp)
   12880:	|  |   move.l 17b3c <MathIeeeSingTransBase>,d0
   12886:	|  |   movea.l d0,a6
   12888:	|  |   move.l 24(sp),d0
   1288c:	|  |   jsr -30(a6)
   12890:	|  |   move.l d0,20(sp)
   12894:	|  |   move.l 20(sp),d0
   12898:	|  |   move.l d0,-(sp)
   1289a:	|  |   jsr 123b8 <__extendsfdf2>
   128a0:	|  |   addq.l #4,sp
   128a2:	|  |   move.l #1413754136,-(sp)
   128a8:	|  |   move.l #1074340347,-(sp)
   128ae:	|  |   move.l d1,-(sp)
   128b0:	|  |   move.l d0,-(sp)
   128b2:	|  |   jsr 12288 <__adddf3>
   128b8:	|  |   lea 16(sp),sp
   128bc:	|  |   move.l d1,-(sp)
   128be:	|  |   move.l d0,-(sp)
   128c0:	|  |   jsr 127ca <__truncdfsf2>
   128c6:	|  |   addq.l #8,sp
   128c8:	+--|-- bra.w 129a8 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   128cc:	|  \-> clr.l -(sp)
   128ce:	|      move.l 40(sp),-(sp)
   128d2:	|      jsr 126c6 <__ltsf2>
   128d8:	|      addq.l #8,sp
   128da:	|      tst.l d0
   128dc:	|  /-- bge.s 1294e <atan2f+0x14e>
   128de:	|  |   clr.l -(sp)
   128e0:	|  |   move.l 36(sp),-(sp)
   128e4:	|  |   jsr 126c6 <__ltsf2>
   128ea:	|  |   addq.l #8,sp
   128ec:	|  |   tst.l d0
   128ee:	|  +-- bge.s 1294e <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   128f0:	|  |   move.l 36(sp),-(sp)
   128f4:	|  |   move.l 36(sp),-(sp)
   128f8:	|  |   jsr 1234c <__divsf3>
   128fe:	|  |   addq.l #8,sp
   12900:	|  |   move.l d0,16(sp)
   12904:	|  |   move.l 17b3c <MathIeeeSingTransBase>,d0
   1290a:	|  |   movea.l d0,a6
   1290c:	|  |   move.l 16(sp),d0
   12910:	|  |   jsr -30(a6)
   12914:	|  |   move.l d0,12(sp)
   12918:	|  |   move.l 12(sp),d0
   1291c:	|  |   move.l d0,-(sp)
   1291e:	|  |   jsr 123b8 <__extendsfdf2>
   12924:	|  |   addq.l #4,sp
   12926:	|  |   move.l #1413754136,-(sp)
   1292c:	|  |   move.l #1074340347,-(sp)
   12932:	|  |   move.l d1,-(sp)
   12934:	|  |   move.l d0,-(sp)
   12936:	|  |   jsr 12732 <__subdf3>
   1293c:	|  |   lea 16(sp),sp
   12940:	|  |   move.l d1,-(sp)
   12942:	|  |   move.l d0,-(sp)
   12944:	|  |   jsr 127ca <__truncdfsf2>
   1294a:	|  |   addq.l #8,sp
   1294c:	+--|-- bra.s 129a8 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   1294e:	|  \-> clr.l -(sp)
   12950:	|      move.l 40(sp),-(sp)
   12954:	|      jsr 12382 <__eqsf2>
   1295a:	|      addq.l #8,sp
   1295c:	|      tst.l d0
   1295e:	|  /-- bne.s 1297a <atan2f+0x17a>
   12960:	|  |   clr.l -(sp)
   12962:	|  |   move.l 36(sp),-(sp)
   12966:	|  |   jsr 1260c <__gtsf2>
   1296c:	|  |   addq.l #8,sp
   1296e:	|  |   tst.l d0
   12970:	|  +-- ble.s 1297a <atan2f+0x17a>
        return PI / 2;
   12972:	|  |   move.l #1070141403,d0
   12978:	+--|-- bra.s 129a8 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   1297a:	|  \-> clr.l -(sp)
   1297c:	|      move.l 40(sp),-(sp)
   12980:	|      jsr 12382 <__eqsf2>
   12986:	|      addq.l #8,sp
   12988:	|      tst.l d0
   1298a:	|  /-- bne.s 129a6 <atan2f+0x1a6>
   1298c:	|  |   clr.l -(sp)
   1298e:	|  |   move.l 36(sp),-(sp)
   12992:	|  |   jsr 126c6 <__ltsf2>
   12998:	|  |   addq.l #8,sp
   1299a:	|  |   tst.l d0
   1299c:	|  +-- bge.s 129a6 <atan2f+0x1a6>
        return -PI / 2;
   1299e:	|  |   move.l #-1077342245,d0
   129a4:	+--|-- bra.s 129a8 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   129a6:	|  \-> moveq #0,d0
    }
}
   129a8:	\----> movea.l (sp)+,a6
   129aa:	       lea 24(sp),sp
   129ae:	       rts

000129b0 <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   129b0:	lea -24(sp),sp
   129b4:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   129b6:	move.l 32(sp),20(sp)
   129bc:	move.l 36(sp),24(sp)
   129c2:	move.l 17b44 <MathIeeeDoubTransBase>,d0
   129c8:	movea.l d0,a6
   129ca:	move.l 20(sp),d0
   129ce:	move.l 24(sp),d1
   129d2:	jsr -96(a6)
   129d6:	move.l d0,4(sp)
   129da:	move.l d1,8(sp)
   129de:	move.l 4(sp),12(sp)
   129e4:	move.l 8(sp),16(sp)
   129ea:	move.l 12(sp),d0
   129ee:	move.l 16(sp),d1
}
   129f2:	movea.l (sp)+,a6
   129f4:	lea 24(sp),sp
   129f8:	rts

000129fa <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   129fa:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   129fe:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   12a02:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   12a06:	mulu.w 8(sp),d1
	addw	d1, d0
   12a0a:	add.w d1,d0
	swap	d0
   12a0c:	swap d0
	clrw	d0
   12a0e:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   12a10:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   12a14:	mulu.w 10(sp),d1
	addl	d1, d0
   12a18:	add.l d1,d0
	rts
   12a1a:	rts

00012a1c <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   12a1c:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   12a1e:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   12a22:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   12a26:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   12a2c:	   /-- bcc.s 12a44 <__udivsi3+0x28>
	movel	d0, d2
   12a2e:	   |   move.l d0,d2
	clrw	d2
   12a30:	   |   clr.w d2
	swap	d2
   12a32:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   12a34:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   12a36:	   |   move.w d2,d0
	swap	d0
   12a38:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   12a3a:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   12a3e:	   |   divu.w d1,d2
	movew	d2, d0
   12a40:	   |   move.w d2,d0
	jra	6f
   12a42:	/--|-- bra.s 12a74 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   12a44:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   12a46:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   12a48:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   12a4a:	|  |   cmpi.l #65536,d1
	jcc	4b
   12a50:	|  \-- bcc.s 12a46 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   12a52:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   12a54:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   12a5a:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   12a5c:	|      mulu.w d0,d1
	swap	d2
   12a5e:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   12a60:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   12a62:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   12a64:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   12a66:	|  /-- bne.s 12a72 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   12a68:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   12a6a:	|  +-- bcs.s 12a72 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   12a6c:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   12a70:	+--|-- bls.s 12a74 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   12a72:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   12a74:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   12a76:	       rts

00012a78 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   12a78:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   12a7a:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   12a7c:	    move.l 12(sp),d1
	jpl	1f
   12a80:	/-- bpl.s 12a86 <__divsi3+0xe>
	negl	d1
   12a82:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   12a84:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   12a86:	\-> move.l 8(sp),d0
	jpl	2f
   12a8a:	/-- bpl.s 12a90 <__divsi3+0x18>
	negl	d0
   12a8c:	|   neg.l d0
	negb	d2
   12a8e:	|   neg.b d2

2:	movel	d1, sp@-
   12a90:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   12a92:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   12a94:	    jsr 12a1c <__udivsi3>
	addql	#8, sp
   12a9a:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   12a9c:	    tst.b d2
	jpl	3f
   12a9e:	/-- bpl.s 12aa2 <__divsi3+0x2a>
	negl	d0
   12aa0:	|   neg.l d0

3:	movel	sp@+, d2
   12aa2:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   12aa4:	    rts

00012aa6 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   12aa6:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   12aaa:	move.l 4(sp),d0
	movel	d1, sp@-
   12aae:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   12ab0:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   12ab2:	jsr 12a78 <__divsi3>
	addql	#8, sp
   12ab8:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   12aba:	move.l 8(sp),d1
	movel	d1, sp@-
   12abe:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   12ac0:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   12ac2:	jsr 129fa <__mulsi3>
	addql	#8, sp
   12ac8:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   12aca:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   12ace:	sub.l d0,d1
	movel	d1, d0
   12ad0:	move.l d1,d0
	rts
   12ad2:	rts

00012ad4 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   12ad4:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   12ad8:	move.l 4(sp),d0
	movel	d1, sp@-
   12adc:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   12ade:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   12ae0:	jsr 12a1c <__udivsi3>
	addql	#8, sp
   12ae6:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   12ae8:	move.l 8(sp),d1
	movel	d1, sp@-
   12aec:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   12aee:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   12af0:	jsr 129fa <__mulsi3>
	addql	#8, sp
   12af6:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   12af8:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   12afc:	sub.l d0,d1
	movel	d1, d0
   12afe:	move.l d1,d0
	rts
   12b00:	rts

00012b02 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   12b02:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   12b04:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   12b08:	jsr -516(a6)
    move.l (sp)+, a6
   12b0c:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   12b0e:	rts

00012b10 <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   12b10:	move.b d0,(a3)+
	rts
   12b12:	rts
