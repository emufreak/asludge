
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #114688,d0
       8:	       subi.l #114688,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   ,-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	,--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1c000 <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  '-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	'----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #114688,d0
      40:	       subi.l #114688,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   ,-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	,--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1c000 <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  '-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	'----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 8708 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #114688,d0
      7e:	       subi.l #114688,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   ,-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	,--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1c000 <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  '-> tst.l 4(sp)
      ae:	'----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 14df8 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1c7ba <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   ,-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	,--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  '-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 14e10 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	'----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1c000 <allowAnyFilename>,d0
     124:	,-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 14df8 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1c7ba <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 ,-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  ,--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              '-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     ,----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  ,--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  ,-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  ,----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  ,-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  '--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  '-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        '-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  '----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  '-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	'--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   '----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  ,-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	,-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 '-> move.w 1c000 <allowAnyFilename>,d0
     316:	|  ,----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 14df8 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1c7ba <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              ,-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 18e92 <PutChar+0x4>
     35c:	|  |              |   jsr 183ec <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              '-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     ,----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  ,--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        ,-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  ,-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     '-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     ,-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  ,--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  '-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  '--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     '----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  '----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  '-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  '----------------> clr.l 20(sp)
     648:	|              ,----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           ,--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  ,-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  '-> addq.l #1,20(sp)
     66e:	|           |  '----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           '-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	'-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1c7c2 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1c7c2 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1c7c2 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1c7c2 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1c7c2 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1c7c2 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1c7c2 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	,-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 18ebc <PutChar+0x2e>
     834:	|   jsr 183ec <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	'-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1c7c2 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	,-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 18ed8 <PutChar+0x4a>
     8a6:	|   jsr 183ec <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	'-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	,-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	'-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1c7c2 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	,-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	'-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1c7c2 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1c7c2 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1c7c2 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1c7c2 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1c7c2 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1c7c2 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1c7c2 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1c7ba <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      ,-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	,-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     '-> clr.l 32(sp)
     b50:	|     ,-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  ,--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1c7c2 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  '-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  '----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	'-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 14df8 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   ,-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	,--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1c7c2 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  '-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	'----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1c6b2 <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	,-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1c6b2 <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1c6b2 <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1c6b2 <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1c6b2 <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1c77a <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1c6b2 <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1c6b2 <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1c776 <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1c6b2 <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1c6b2 <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 143c <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	'-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1c6b2 <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr a17a <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1c6b2 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1c6b6 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1c6ba <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 30ba <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int x1, int y1, int x2, int y2) {
     e0e:	          lea -48(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 18f00 <PutChar+0x72>
     e1a:	          jsr 183ec <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1c6ce <CstBackDrop>,d0
     e28:	      ,-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 18f19 <PutChar+0x8b>
     e30:	      |   jsr 183ec <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	,-----|-- bra.w 10c2 <CstBlankScreen+0x2b4>
  }  

  CstPaletteLoaded = 0;
     e3c:	|     '-> clr.w 1c6c8 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,40(sp)
  //custom->color[0] = 0xf00;


  WaitBlit();
     e4a:	|         move.l 1c7c6 <GfxBase>,d0
     e50:	|         movea.l d0,a6
     e52:	|         jsr -228(a6)

  UWORD width = (x2 - x1)/8;
     e56:	|         move.l 64(sp),d0
     e5a:	|         sub.l 56(sp),d0
     e5e:	|     ,-- bpl.s e62 <CstBlankScreen+0x54>
     e60:	|     |   addq.l #7,d0
     e62:	|     '-> asr.l #3,d0
     e64:	|         move.w d0,38(sp)
  UWORD height = (y2 - y1);
     e68:	|         move.l 68(sp),d0
     e6c:	|         move.l 60(sp),d1
     e70:	|         movea.w d0,a0
     e72:	|         suba.w d1,a0
     e74:	|         move.w a0,36(sp)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e78:	|         movea.l 40(sp),a0
     e7c:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e82:	|         movea.l 40(sp),a0
     e86:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e8c:	|         movea.l 40(sp),a0
     e90:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e96:	|         movea.l 40(sp),a0
     e9a:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     ea0:	|         movea.l 40(sp),a0
     ea4:	|         move.w #0,96(a0)
  custom->bltdmod = 40 - width;
     eaa:	|         moveq #40,d0
     eac:	|         sub.w 38(sp),d0
     eb0:	|         movea.l 40(sp),a0
     eb4:	|         move.w d0,102(a0)
  custom->bltcon1 = 0;
     eb8:	|         movea.l 40(sp),a0
     ebc:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     ec2:	|         movea.l 40(sp),a0
     ec6:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ecc:	|         move.l 1c6ce <CstBackDrop>,d0
     ed2:	|         move.l d0,48(sp)
  bltdpt += x1/8 + y1*40;
     ed6:	|         move.l 56(sp),d0
     eda:	|     ,-- bpl.s ede <CstBlankScreen+0xd0>
     edc:	|     |   addq.l #7,d0
     ede:	|     '-> asr.l #3,d0
     ee0:	|         movea.l d0,a0
     ee2:	|         move.l 60(sp),d1
     ee6:	|         move.l d1,d0
     ee8:	|         add.l d0,d0
     eea:	|         add.l d0,d0
     eec:	|         add.l d1,d0
     eee:	|         lsl.l #3,d0
     ef0:	|         add.l a0,d0
     ef2:	|         add.l d0,48(sp)

  UWORD bltsize = height*64+width/2;    
     ef6:	|         move.w 36(sp),d0
     efa:	|         move.w d0,d1
     efc:	|         lsl.w #6,d1
     efe:	|         move.w 38(sp),d0
     f02:	|         lsr.w #1,d0
     f04:	|         movea.w d1,a0
     f06:	|         adda.w d0,a0
     f08:	|         move.w a0,34(sp)
  UWORD blitsize = width*height;
     f0c:	|         move.w 38(sp),d0
     f10:	|         muls.w 36(sp),d0
     f14:	|         move.w d0,32(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     f18:	|         pea 18f47 <PutChar+0xb9>
     f1e:	|         jsr 183ec <KPrintF>
     f24:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     f26:	|         clr.l 44(sp)
     f2a:	|     ,-- bra.s f5a <CstBlankScreen+0x14c>
  {            
    custom->bltdpt = (APTR) bltdpt;
     f2c:	|  ,--|-> move.l 48(sp),d0
     f30:	|  |  |   movea.l 40(sp),a0
     f34:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f38:	|  |  |   movea.l 40(sp),a0
     f3c:	|  |  |   move.w 34(sp),88(a0)
    WaitBlit();
     f42:	|  |  |   move.l 1c7c6 <GfxBase>,d0
     f48:	|  |  |   movea.l d0,a6
     f4a:	|  |  |   jsr -228(a6)
    bltdpt += 40*256;
     f4e:	|  |  |   addi.l #10240,48(sp)
  for(int i2=0;i2<5;i2++)
     f56:	|  |  |   addq.l #1,44(sp)
     f5a:	|  |  '-> moveq #4,d0
     f5c:	|  |      cmp.l 44(sp),d0
     f60:	|  '----- bge.s f2c <CstBlankScreen+0x11e>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f62:	|         pea 18f67 <PutChar+0xd9>
     f68:	|         jsr 183ec <KPrintF>
     f6e:	|         addq.l #4,sp

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
     f70:	|         move.l 1c6e6 <CstCleanupQueueDrawBuffer>,28(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
     f78:	|         moveq #20,d0
     f7a:	|         move.l d0,24(sp)
     f7e:	|         clr.l 20(sp)
     f82:	|         move.l 1c7ba <SysBase>,d0
     f88:	|         movea.l d0,a6
     f8a:	|         move.l 24(sp),d0
     f8e:	|         move.l 20(sp),d1
     f92:	|         jsr -684(a6)
     f96:	|         move.l d0,16(sp)
     f9a:	|         move.l 16(sp),d0
     f9e:	|         move.l d0,1c6e6 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
     fa4:	|         movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
     faa:	|         move.l 28(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = x1;
     fb0:	|         movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
     fb6:	|         move.l 56(sp),d0
     fba:	|         move.w d0,(a0)
  CstCleanupQueueDrawBuffer->y = y1;
     fbc:	|         movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
     fc2:	|         move.l 60(sp),d0
     fc6:	|         move.w d0,2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
     fca:	|         movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
     fd0:	|         clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = width/16;
     fd4:	|         movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
     fda:	|         move.w 38(sp),d0
     fde:	|         lsr.w #4,d0
     fe0:	|         move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = height;
     fe4:	|         movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
     fea:	|         move.w 36(sp),10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = x1/8;;
     ff0:	|         move.l 56(sp),d0
     ff4:	|     ,-- bpl.s ff8 <CstBlankScreen+0x1ea>
     ff6:	|     |   addq.l #7,d0
     ff8:	|     '-> asr.l #3,d0
     ffa:	|         movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    1000:	|         move.l d0,d0
    1002:	|         move.w d0,12(a0)
  CstCleanupQueueDrawBuffer->starty = y1;
    1006:	|         movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    100c:	|         move.l 60(sp),d0
    1010:	|         move.w d0,14(a0)

  next = CstCleanupQueueViewBuffer;
    1014:	|         move.l 1c6e2 <CstCleanupQueueViewBuffer>,28(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    101c:	|         moveq #20,d0
    101e:	|         move.l d0,12(sp)
    1022:	|         clr.l 8(sp)
    1026:	|         move.l 1c7ba <SysBase>,d0
    102c:	|         movea.l d0,a6
    102e:	|         move.l 12(sp),d0
    1032:	|         move.l 8(sp),d1
    1036:	|         jsr -684(a6)
    103a:	|         move.l d0,4(sp)
    103e:	|         move.l 4(sp),d0
    1042:	|         move.l d0,1c6e2 <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    1048:	|         movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    104e:	|         move.l 28(sp),16(a0)
  CstCleanupQueueViewBuffer->x = x1;
    1054:	|         movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    105a:	|         move.l 56(sp),d0
    105e:	|         move.w d0,(a0)
  CstCleanupQueueViewBuffer->y = y1;
    1060:	|         movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    1066:	|         move.l 60(sp),d0
    106a:	|         move.w d0,2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    106e:	|         movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    1074:	|         clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = width/16;
    1078:	|         movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    107e:	|         move.w 38(sp),d0
    1082:	|         lsr.w #4,d0
    1084:	|         move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = height;
    1088:	|         movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    108e:	|         move.w 36(sp),10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = x1/8;
    1094:	|         move.l 56(sp),d0
    1098:	|     ,-- bpl.s 109c <CstBlankScreen+0x28e>
    109a:	|     |   addq.l #7,d0
    109c:	|     '-> asr.l #3,d0
    109e:	|         movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    10a4:	|         move.l d0,d0
    10a6:	|         move.w d0,12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    10aa:	|         movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    10b0:	|         clr.w 14(a0)

  KPrintF("CstBlankScreen: end\n");
    10b4:	|         pea 18f87 <PutChar+0xf9>
    10ba:	|         jsr 183ec <KPrintF>
    10c0:	|         addq.l #4,sp

  //custom->color[0] = 0x000;	
}
    10c2:	'-------> movea.l (sp)+,a6
    10c4:	          lea 48(sp),sp
    10c8:	          rts

000010ca <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
    10ca:	       lea -52(sp),sp
    10ce:	       move.l a6,-(sp)
    10d0:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
    10d2:	       move.l #400,32(sp)
    10da:	       moveq #2,d0
    10dc:	       move.l d0,28(sp)
    10e0:	       move.l 1c7ba <SysBase>,d0
    10e6:	       movea.l d0,a6
    10e8:	       move.l 32(sp),d0
    10ec:	       move.l 28(sp),d1
    10f0:	       jsr -198(a6)
    10f4:	       move.l d0,24(sp)
    10f8:	       move.l 24(sp),d0
    10fc:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1100:	   ,-- bne.s 112a <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1102:	   |   pea 28 <_start+0x28>
    1106:	   |   pea 18f9c <PutChar+0x10e>
    110c:	   |   jsr 183ec <KPrintF>
    1112:	   |   addq.l #8,sp
    Exit(1);
    1114:	   |   moveq #1,d1
    1116:	   |   move.l d1,16(sp)
    111a:	   |   move.l 1c7c2 <DOSBase>,d0
    1120:	   |   movea.l d0,a6
    1122:	   |   move.l 16(sp),d1
    1126:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    112a:	   '-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1130:	       move.l 56(sp),1c6f2 <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    1138:	       move.l #114690,52(sp)
  for(int i=0; i<16;i++)
    1140:	       clr.l 48(sp)
    1144:	   ,-- bra.s 116a <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    1146:	,--|-> move.l 52(sp),d1
    114a:	|  |   move.l d1,d2
    114c:	|  |   addq.l #4,d2
    114e:	|  |   move.l d2,52(sp)
    1152:	|  |   move.l 56(sp),d0
    1156:	|  |   move.l d0,d2
    1158:	|  |   addq.l #4,d2
    115a:	|  |   move.l d2,56(sp)
    115e:	|  |   movea.l d1,a0
    1160:	|  |   move.l (a0),d1
    1162:	|  |   movea.l d0,a0
    1164:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    1166:	|  |   addq.l #1,48(sp)
    116a:	|  '-> moveq #15,d0
    116c:	|      cmp.l 48(sp),d0
    1170:	'----- bge.s 1146 <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1172:	       move.l #114754,52(sp)

  for(int i=0; i<12;i++)
    117a:	       clr.l 44(sp)
    117e:	   ,-- bra.s 11a4 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1180:	,--|-> move.l 52(sp),d1
    1184:	|  |   move.l d1,d2
    1186:	|  |   addq.l #4,d2
    1188:	|  |   move.l d2,52(sp)
    118c:	|  |   move.l 56(sp),d0
    1190:	|  |   move.l d0,d2
    1192:	|  |   addq.l #4,d2
    1194:	|  |   move.l d2,56(sp)
    1198:	|  |   movea.l d1,a0
    119a:	|  |   move.l (a0),d1
    119c:	|  |   movea.l d0,a0
    119e:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    11a0:	|  |   addq.l #1,44(sp)
    11a4:	|  '-> moveq #11,d0
    11a6:	|      cmp.l 44(sp),d0
    11aa:	'----- bge.s 1180 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    11ac:	       move.l #114802,52(sp)
  for(int i=0; i<10;i++)
    11b4:	       clr.l 40(sp)
    11b8:	   ,-- bra.s 11de <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    11ba:	,--|-> move.l 52(sp),d1
    11be:	|  |   move.l d1,d2
    11c0:	|  |   addq.l #4,d2
    11c2:	|  |   move.l d2,52(sp)
    11c6:	|  |   move.l 56(sp),d0
    11ca:	|  |   move.l d0,d2
    11cc:	|  |   addq.l #4,d2
    11ce:	|  |   move.l d2,56(sp)
    11d2:	|  |   movea.l d1,a0
    11d4:	|  |   move.l (a0),d1
    11d6:	|  |   movea.l d0,a0
    11d8:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    11da:	|  |   addq.l #1,40(sp)
    11de:	|  '-> moveq #9,d0
    11e0:	|      cmp.l 40(sp),d0
    11e4:	'----- bge.s 11ba <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    11e6:	       move.l #114842,52(sp)
  CstClColor = (UWORD *) cl;
    11ee:	       move.l 56(sp),1c6ea <CstClColor>
  for(int i=0; i<32;i++)
    11f6:	       clr.l 36(sp)
    11fa:	   ,-- bra.s 1220 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    11fc:	,--|-> move.l 52(sp),d1
    1200:	|  |   move.l d1,d2
    1202:	|  |   addq.l #4,d2
    1204:	|  |   move.l d2,52(sp)
    1208:	|  |   move.l 56(sp),d0
    120c:	|  |   move.l d0,d2
    120e:	|  |   addq.l #4,d2
    1210:	|  |   move.l d2,56(sp)
    1214:	|  |   movea.l d1,a0
    1216:	|  |   move.l (a0),d1
    1218:	|  |   movea.l d0,a0
    121a:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    121c:	|  |   addq.l #1,36(sp)
    1220:	|  '-> moveq #31,d0
    1222:	|      cmp.l 36(sp),d0
    1226:	'----- bge.s 11fc <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    1228:	       moveq #40,d1
    122a:	       cmp.l 64(sp),d1
    122e:	   ,-- bge.s 128c <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1230:	   |   moveq #-40,d2
    1232:	   |   add.l 64(sp),d2
    1236:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    123a:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1240:	   |   move.l 8(sp),d0
    1244:	   |   move.l d0,d1
    1246:	   |   addq.l #2,d1
    1248:	   |   move.l d1,8(sp)
    124c:	   |   movea.l d0,a0
    124e:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1252:	   |   move.l 8(sp),d0
    1256:	   |   move.l d0,d1
    1258:	   |   addq.l #2,d1
    125a:	   |   move.l d1,8(sp)
    125e:	   |   move.l 12(sp),d1
    1262:	   |   movea.l d0,a0
    1264:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    1266:	   |   move.l 8(sp),d0
    126a:	   |   move.l d0,d1
    126c:	   |   addq.l #2,d1
    126e:	   |   move.l d1,8(sp)
    1272:	   |   movea.l d0,a0
    1274:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    1278:	   |   move.l 8(sp),d0
    127c:	   |   move.l d0,d1
    127e:	   |   addq.l #2,d1
    1280:	   |   move.l d1,8(sp)
    1284:	   |   move.l 12(sp),d1
    1288:	   |   movea.l d0,a0
    128a:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    128c:	   '-> move.l 56(sp),d0
    1290:	       move.l d0,d1
    1292:	       addq.l #4,d1
    1294:	       move.l d1,56(sp)
    1298:	       moveq #-2,d2
    129a:	       movea.l d0,a0
    129c:	       move.l d2,(a0)
  return (UWORD *) retval;  
    129e:	       move.l 20(sp),d0
}
    12a2:	       move.l (sp)+,d2
    12a4:	       movea.l (sp)+,a6
    12a6:	       lea 52(sp),sp
    12aa:	       rts

000012ac <CstCreateZBufferLayer>:

void CstCreateZBufferLayer (BYTE *zbufferdata, UWORD x, UWORD y, UWORD width, UWORD height)
{
    12ac:	    lea -24(sp),sp
    12b0:	    move.l a6,-(sp)
    12b2:	    movea.l 36(sp),a1
    12b6:	    movea.l 40(sp),a0
    12ba:	    move.l 44(sp),d1
    12be:	    move.l 48(sp),d0
    12c2:	    movea.w a1,a1
    12c4:	    move.w a1,12(sp)
    12c8:	    movea.w a0,a0
    12ca:	    move.w a0,10(sp)
    12ce:	    move.w d1,d1
    12d0:	    move.w d1,8(sp)
    12d4:	    move.w d0,d0
    12d6:	    move.w d0,6(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    12da:	    move.l #14675968,22(sp)

  #ifdef EMULATOR
    debug_register_bitmap(zbufferdata, "extrazbufferlayer", 320, 250, 1, 0);
    12e2:	    clr.l -(sp)
    12e4:	    pea 1 <_start+0x1>
    12e8:	    pea fa <copyString+0x42>
    12ec:	    pea 140 <decodeFilename+0x28>
    12f0:	    pea 18fd7 <PutChar+0x149>
    12f6:	    move.l 52(sp),-(sp)
    12fa:	    jsr 184d4 <debug_register_bitmap>
    1300:	    lea 24(sp),sp
  #endif    

  WaitBlit();
    1304:	    move.l 1c7c6 <GfxBase>,d0
    130a:	    movea.l d0,a6
    130c:	    jsr -228(a6)
  custom->bltafwm = 0xffff;
    1310:	    movea.l 22(sp),a0
    1314:	    move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    131a:	    movea.l 22(sp),a0
    131e:	    move.w #-1,70(a0)
  custom->bltdmod = 0;  
    1324:	    movea.l 22(sp),a0
    1328:	    move.w #0,102(a0)
  custom->bltcon0 =  0x1f0;
    132e:	    movea.l 22(sp),a0
    1332:	    move.w #496,64(a0)
  custom->bltcon1 = 0x0;
    1338:	    movea.l 22(sp),a0
    133c:	    move.w #0,66(a0)
  custom->bltdpt = zbufferdata;
    1342:	    movea.l 22(sp),a0
    1346:	    move.l 32(sp),84(a0)
  custom->bltadat = 0;
    134c:	    movea.l 22(sp),a0
    1350:	    move.w #0,116(a0)
  custom->bltsize = 256 * 64 + 20;
    1356:	    movea.l 22(sp),a0
    135a:	    move.w #16404,88(a0)

  WaitBlit();
    1360:	    move.l 1c7c6 <GfxBase>,d0
    1366:	    movea.l d0,a6
    1368:	    jsr -228(a6)
  UWORD bltxoffset = (x / 16)*2;
    136c:	    move.w 12(sp),d0
    1370:	    lsr.w #4,d0
    1372:	    add.w d0,d0
    1374:	    move.w d0,20(sp)
  UWORD bltshift = x % 16;
    1378:	    move.w 12(sp),d0
    137c:	    andi.w #15,d0
    1380:	    move.w d0,18(sp)
  UWORD bltafwm = 0xffff >> bltshift;
    1384:	    moveq #0,d0
    1386:	    move.w 18(sp),d0
    138a:	    moveq #0,d1
    138c:	    not.w d1
    138e:	    asr.l d0,d1
    1390:	    move.w d1,16(sp)
  UWORD bltalwm = ~bltafwm; 
    1394:	    move.w 16(sp),d0
    1398:	    not.w d0
    139a:	    move.w d0,14(sp)

  UWORD bltwidth = width / 16;
    139e:	    move.w 8(sp),d0
    13a2:	    lsr.w #4,d0
    13a4:	    move.w d0,26(sp)
  if(bltalwm != 0) bltwidth += 1; 
    13a8:	    tst.w 14(sp)
    13ac:	,-- beq.s 13b2 <CstCreateZBufferLayer+0x106>
    13ae:	|   addq.w #1,26(sp)

  custom->bltafwm = bltafwm;
    13b2:	'-> movea.l 22(sp),a0
    13b6:	    move.w 16(sp),68(a0)
  custom->bltalwm = bltalwm;
    13bc:	    movea.l 22(sp),a0
    13c0:	    move.w 14(sp),70(a0)
  custom->bltdmod = 40 - bltwidth*2;  
    13c6:	    moveq #0,d0
    13c8:	    move.w 26(sp),d0
    13cc:	    moveq #20,d1
    13ce:	    sub.l d0,d1
    13d0:	    move.l d1,d0
    13d2:	    add.w d0,d0
    13d4:	    movea.l 22(sp),a0
    13d8:	    move.w d0,102(a0)
  custom->bltcon0 =  0x1f0;
    13dc:	    movea.l 22(sp),a0
    13e0:	    move.w #496,64(a0)
  custom->bltcon1 = 0x0;
    13e6:	    movea.l 22(sp),a0
    13ea:	    move.w #0,66(a0)
  custom->bltdpt = zbufferdata + (y * 40) + bltxoffset;
    13f0:	    moveq #0,d1
    13f2:	    move.w 10(sp),d1
    13f6:	    move.l d1,d0
    13f8:	    add.l d0,d0
    13fa:	    add.l d0,d0
    13fc:	    add.l d1,d0
    13fe:	    lsl.l #3,d0
    1400:	    move.l d0,d1
    1402:	    moveq #0,d0
    1404:	    move.w 20(sp),d0
    1408:	    add.l d1,d0
    140a:	    add.l 32(sp),d0
    140e:	    movea.l 22(sp),a0
    1412:	    move.l d0,84(a0)
  custom->bltadat = 0xffff;;
    1416:	    movea.l 22(sp),a0
    141a:	    move.w #-1,116(a0)
  custom->bltsize = height * 64 + bltwidth;
    1420:	    move.w 6(sp),d0
    1424:	    lsl.w #6,d0
    1426:	    add.w 26(sp),d0
    142a:	    movea.l 22(sp),a0
    142e:	    move.w d0,88(a0)

}
    1432:	    nop
    1434:	    movea.l (sp)+,a6
    1436:	    lea 24(sp),sp
    143a:	    rts

0000143c <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    143c:	lea -20(sp),sp
    1440:	movea.l 24(sp),a0
    1444:	move.l 28(sp),d1
    1448:	move.l 32(sp),d0
    144c:	movea.w a0,a0
    144e:	move.w a0,4(sp)
    1452:	move.w d1,d1
    1454:	move.w d1,2(sp)
    1458:	move.w d0,d0
    145a:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    145c:	move.w 2(sp),d0
    1460:	movea.l 36(sp),a0
    1464:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    1466:	move.w 4(sp),d0
    146a:	lsr.w #1,d0
    146c:	movea.l 36(sp),a0
    1470:	addq.l #1,a0
    1472:	move.l d0,d0
    1474:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    1476:	move.w 2(sp),d1
    147a:	move.w (sp),d0
    147c:	movea.l 36(sp),a0
    1480:	addq.l #2,a0
    1482:	add.b d1,d0
    1484:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    1486:	move.w 4(sp),d0
    148a:	andi.w #1,d0
    148e:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1492:	move.w 2(sp),d0
    1496:	add.w (sp),d0
    1498:	move.w d0,d0
    149a:	andi.l #65535,d0
    14a0:	asr.l #7,d0
    14a2:	move.l d0,d0
    14a4:	move.w d0,d1
    14a6:	andi.w #2,d1
    14aa:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    14ae:	moveq #0,d0
    14b0:	move.w 2(sp),d0
    14b4:	asr.l #6,d0
    14b6:	move.l d0,d0
    14b8:	move.w d0,d1
    14ba:	andi.w #4,d1
    14be:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    14c2:	move.w 18(sp),d1
    14c6:	move.w 16(sp),d0
    14ca:	add.b d0,d1
    14cc:	move.w 14(sp),d0
    14d0:	movea.l 36(sp),a0
    14d4:	addq.l #3,a0
    14d6:	add.b d1,d0
    14d8:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    14da:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    14e0:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    14e6:	move.l 10(sp),d0
    14ea:	clr.w d0
    14ec:	swap d0
    14ee:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    14f2:	move.l 1c6f2 <CstClCursor>,d0
    14f8:	movea.l d0,a0
    14fa:	addq.l #2,a0
    14fc:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    1500:	move.l 1c6f2 <CstClCursor>,d0
    1506:	movea.l d0,a0
    1508:	addq.l #6,a0
    150a:	move.w 8(sp),(a0)

}
    150e:	nop
    1510:	lea 20(sp),sp
    1514:	rts

00001516 <CstDrawZBuffer>:

__attribute__((optimize("Ofast"))) 
UBYTE *CstDrawZBuffer( struct sprite *sprite, struct zBufferData *zbuffer, WORD x, WORD y) 
{
    1516:	                                                                subq.l #8,sp
    1518:	                                                                movem.l d2-d7/a2-a6,-(sp)
    151c:	                                                                movea.l 56(sp),a3
    1520:	                                                                movea.l 60(sp),a2
    1524:	                                                                move.l 64(sp),d2
    1528:	                                                                move.l 68(sp),d7
    152c:	                                                                movea.w d2,a4
    152e:	                                                                move.w d7,50(sp)
  //In Case nothing needs to be done return sprite mask without changes
       
  WORD zbufferset = 0;

  #ifdef EMULATOR
    debug_register_bitmap(CstZBufferResult, "SpriteMask", sprite->width, sprite->height, 1, 0);
    1532:	                                                                clr.l -(sp)
    1534:	                                                                pea 1 <_start+0x1>
    1538:	                                                                movea.w 6(a3),a0
    153c:	                                                                move.l a0,-(sp)
    153e:	                                                                movea.w 2(a3),a0
    1542:	                                                                move.l a0,-(sp)
    1544:	                                                                pea 18fe9 <PutChar+0x15b>
    154a:	                                                                move.l 1c6f6 <CstZBufferResult>,-(sp)
    1550:	                                                                lea 184d4 <debug_register_bitmap>,a5
    1556:	                                                                jsr (a5)
    debug_register_bitmap(CstZBufferWork, "tmbpuffer", sprite->width+16, sprite->height, 1, 0);
    1558:	                                                                clr.l -(sp)
    155a:	                                                                pea 1 <_start+0x1>
    155e:	                                                                movea.w 6(a3),a0
    1562:	                                                                move.l a0,-(sp)
    1564:	                                                                move.w 2(a3),d0
    1568:	                                                                addi.w #16,d0
    156c:	                                                                movea.w d0,a0
    156e:	                                                                move.l a0,-(sp)
    1570:	                                                                pea 18ff4 <PutChar+0x166>
    1576:	                                                                move.l 1c6fa <CstZBufferWork>,-(sp)
    157c:	                                                                jsr (a5)
  #endif    

  while(zbuffer) 
    157e:	                                                                lea 48(sp),sp
    1582:	                                                                cmpa.w #0,a2
    1586:	,-------------------------------------------------------------- beq.w 1a44 <CstDrawZBuffer+0x52e>
  {              
    WORD spritex1oncanvas = x;
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    158a:	|                                                               move.w d2,48(sp)
    158e:	|                                                               move.l (a3),d2
    WORD spritey1oncanvas = y;
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    1590:	|                                                               movea.l 4(a3),a5
  WORD zbufferset = 0;
    1594:	|                                                               clr.w 46(sp)
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    1598:	|                       ,-------------------------------------> move.w a5,d3
    159a:	|                       |                                       add.w d7,d3
    BOOL zbufferfromleft = FALSE;
    BOOL zbufferfrombottom = FALSE;
    BOOL zbufferfromtop = FALSE;
  
    //Sprite will be drawn behind the zBuffer. We need to do something
    if(spritey2oncanvas < zbuffer->yz) 
    159c:	|                       |                                       andi.l #65535,d3
    15a2:	|                       |                                       cmp.l 16(a2),d3
    15a6:	|        ,--------------|-------------------------------------- bge.w 174c <CstDrawZBuffer+0x236>
    WORD zbufferx1oncanvas = zbuffer->topx;
    15aa:	|        |              |                                       move.l 8(a2),d6
    WORD zbuffery1oncanvas = zbuffer->topy;
    15ae:	|        |              |                                       move.l 12(a2),d5
    WORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    15b2:	|        |              |                                       move.w d6,d0
    15b4:	|        |              |                                       add.w 2(a2),d0
    WORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    15b8:	|        |              |                                       move.w 6(a2),d4
    15bc:	|        |              |                                       add.w d5,d4
    {    
      //sprite ------------x1+++++++++++++++++++x2-----------------*/
      /*zbuffer-------------------x1++++++++++?????????------------*/      
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    15be:	|        |              |                                       cmp.w a4,d6
    15c0:	|        |           ,--|-------------------------------------- bge.w 18d8 <CstDrawZBuffer+0x3c2>
        zbufferfromright = TRUE;
      //sprite -------------------------x1++++??????-------*/
      /*zbuffer-------------------x1+++++++++++x2----------*/  
      else if(spritex1oncanvas > zbufferx1oncanvas && spritex1oncanvas < zbufferx2oncanvas)
    15c4:	|        |           |  |                                       cmp.w a4,d0
    15c6:	|        +-----------|--|-------------------------------------- ble.w 174c <CstDrawZBuffer+0x236>
        zbufferfromleft = TRUE;       

      //Overlap on X-Axis. Now Check y-axis
      if( zbufferfromleft || zbufferfromright)         
      {
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    15ca:	|        |           |  |                                       move.w 50(sp),d0
    15ce:	|        |           |  |                                       cmp.w d0,d5
    15d0:	|        |     ,-----|--|-------------------------------------- blt.w 1a24 <CstDrawZBuffer+0x50e>
    15d4:	|        |     |     |  |                                       movea.w d5,a0
        else if(spritey1oncanvas > zbuffery1oncanvas && spritey1oncanvas < zbuffery2oncanvas)
          zbufferfromtop = TRUE;       
      }

      //Overlap on both Axis
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    15d6:	|        |     |     |  |                                       cmpa.l d3,a0
    15d8:	|        +-----|-----|--|-------------------------------------- bge.w 174c <CstDrawZBuffer+0x236>
        {    
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    15dc:	|        |     |     |  |                                       move.w 48(sp),d0
    15e0:	|        |     |     |  |                                       sub.w d6,d0
          xdiffbyte = (xdiff / 16) * 2;          
          xdiffrest = (xdiff - xdiffbyte * 8);    
    15e2:	|        |     |     |  |                                       move.w d0,d6
    15e4:	|        |     |     |  |                                       andi.w #15,d6
    15e8:	|        |     |     |  |                                       movea.w d6,a5

                         
          bytewidth = (sprite->width/16)*2;
    15ea:	|        |     |     |  |                                       tst.l d2
    15ec:	|        |  ,--|-----|--|-------------------------------------- blt.w 176e <CstDrawZBuffer+0x258>
    15f0:	|        |  |  |  ,--|--|-------------------------------------> asr.l #4,d2
    15f2:	|        |  |  |  |  |  |                                       add.w d2,d2
          if(sprite->height == 60) {
            sprite->height = 60;
          }
          
          custom->bltafwm = 0xffff;
    15f4:	|        |  |  |  |  |  |                                       move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb26ed>
          custom->bltalwm = 0xffff;                      
    15fc:	|        |  |  |  |  |  |                                       move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb26ef>
          custom->bltcon1 = 0;          
    1604:	|        |  |  |  |  |  |                                       move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb26eb>

          if (xdiffrest) {
            bytewidth += 2; 
            //xdiffbyte += -2;            
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
            WaitBlit();   
    160c:	|        |  |  |  |  |  |                                       lea 1c7c6 <GfxBase>,a0
    1612:	|        |  |  |  |  |  |                                       movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    1614:	|        |  |  |  |  |  |                                       lsr.w #4,d0
    1616:	|        |  |  |  |  |  |                                       move.w d0,d6
    1618:	|        |  |  |  |  |  |                                       add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    161a:	|        |  |  |  |  |  |                                       andi.l #65535,d6
    1620:	|        |  |  |  |  |  |                                       add.l 20(a2),d6
          if (xdiffrest) {
    1624:	|        |  |  |  |  |  |                                       clr.w d0
    1626:	|        |  |  |  |  |  |                                       cmp.w a5,d0
    1628:	|        |  |  |  |  |  |        ,----------------------------- beq.w 17ae <CstDrawZBuffer+0x298>
            bytewidth += 2; 
    162c:	|        |  |  |  |  |  |        |        ,-------------------> addq.w #2,d2
            WaitBlit();   
    162e:	|        |  |  |  |  |  |        |        |                     jsr -228(a6)
            custom->bltdpt = CstZBufferWork;                
    1632:	|        |  |  |  |  |  |        |        |                     move.l 1c6fa <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb26fd>
            custom->bltcon0 = (16 - xdiffrest) * 4096 + 0x9f0;              
    163c:	|        |  |  |  |  |  |        |        |                     move.w a5,d0
    163e:	|        |  |  |  |  |  |        |        |                     moveq #12,d1
    1640:	|        |  |  |  |  |  |        |        |                     lsl.w d1,d0
    1642:	|        |  |  |  |  |  |        |        |                     move.w #2544,d1
    1646:	|        |  |  |  |  |  |        |        |                     sub.w d0,d1
    1648:	|        |  |  |  |  |  |        |        |                     move.w d1,dff040 <gcc8_c_support.c.c60c1f2b+0xdb26e9>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    164e:	|        |  |  |  |  |  |        |        |                     move.l (a2),d0
    1650:	|        |  |  |  |  |  |        |        |                     move.l d0,d1
    1652:	|  ,-----|--|--|--|--|--|--------|--------|-------------------- bmi.w 1af6 <CstDrawZBuffer+0x5e0>
    1656:	|  |     |  |  |  |  |  |        |        |                     asr.l #3,d1
    1658:	|  |     |  |  |  |  |  |        |        |                     sub.w d2,d1
    165a:	|  |     |  |  |  |  |  |        |        |                     move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb270d>
            custom->bltdmod = 0;                                                            
    1660:	|  |     |  |  |  |  |  |        |        |                     move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb270f>
        } 
        
        //Get Distance R
        //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
        /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    1668:	|  |  ,--|--|--|--|--|--|--------|--------|-------------------> move.w d7,d1
    166a:	|  |  |  |  |  |  |  |  |        |        |                     sub.w d5,d1

        UWORD height;
        if( zbuffery2oncanvas > spritey2oncanvas) 
    166c:	|  |  |  |  |  |  |  |  |        |        |                     movea.w d4,a0
    166e:	|  |  |  |  |  |  |  |  |        |        |                     cmpa.l d3,a0
    1670:	|  |  |  |  |  |  |  |  |        |     ,--|-------------------- ble.w 17ee <CstDrawZBuffer+0x2d8>
          height = sprite->height;
    1674:	|  |  |  |  |  |  |  |  |        |     |  |        ,----------> move.l 4(a3),d4
        else
          height = zbuffery2oncanvas - spritey1oncanvas;

        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    1678:	|  |  |  |  |  |  |  |  |        |     |  |        |            move.l d0,-(sp)
    167a:	|  |  |  |  |  |  |  |  |        |     |  |        |            move.w d1,-(sp)
    167c:	|  |  |  |  |  |  |  |  |        |     |  |        |            clr.w -(sp)
    167e:	|  |  |  |  |  |  |  |  |        |     |  |        |            jsr 18d78 <__mulsi3>
    1684:	|  |  |  |  |  |  |  |  |        |     |  |        |            addq.l #8,sp
    1686:	|  |  |  |  |  |  |  |  |        |     |  |        |            tst.l d0
    1688:	|  |  |  |  |  |  |  |  |        |     |  |  ,-----|----------- blt.w 1804 <CstDrawZBuffer+0x2ee>
    168c:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  ,-------> asr.l #3,d0
    168e:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         add.l d6,d0
    1690:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb26f9>
        UWORD bltsize =  height*64+bytewidth/2;          
    1696:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         lsl.w #6,d4
    1698:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    169a:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         add.w d2,d4
    169c:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2701>
       
        WaitBlit();
    16a2:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         lea 1c7c6 <GfxBase>,a0
    16a8:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         movea.l (a0),a6
    16aa:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         jsr -228(a6)

        custom->bltafwm = 0xffff;
    16ae:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb26ed>
        custom->bltalwm = 0xffff;
    16b6:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb26ef>
        custom->bltamod = 2;
    16be:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb270d>
        custom->bltbmod = 0;
    16c6:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb270b>
        custom->bltdmod = 0;
    16ce:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb270f>
        custom->bltcon0 = 0xd0c; //Copy A to D
    16d6:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb26e9>
        custom->bltcon1 = 0;        
    16de:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb26eb>

        custom->bltapt = (APTR) CstZBufferWork + 2;
    16e6:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.l 1c6fa <CstZBufferWork>,d0
    16ec:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         addq.l #2,d0
    16ee:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb26f9>

        if (zbufferset == 0) {
          custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    16f4:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.l (a3),d2
    16f6:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         movea.l 4(a3),a5
        if (zbufferset == 0) {
    16fa:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         tst.w 46(sp)
    16fe:	|  |  |  |  |  |  |  |  |        |  ,--|--|--|-----|--|-------- bne.w 187c <CstDrawZBuffer+0x366>
          custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1702:	|  |  |  |  |  |  |  |  |        |  |  |  |  |  ,--|--|-------> move.l d2,d0
    1704:	|  |  |  |  |  |  |  |  |  ,-----|--|--|--|--|--|--|--|-------- bmi.w 18b2 <CstDrawZBuffer+0x39c>
    1708:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         asr.l #3,d0
    170a:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         move.l a5,-(sp)
    170c:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         move.l d0,-(sp)
    170e:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         jsr 18d78 <__mulsi3>
    1714:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         addq.l #8,sp
    1716:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         move.l d0,d1
    1718:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         add.l d0,d1
    171a:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         add.l d1,d1
    171c:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         add.l d0,d1
    171e:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         add.l 24(a3),d1
    1722:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb26f5>
        }
        else {
          custom->bltbpt = (APTR) CstZBufferResult;
        }
        custom->bltdpt = (APTR) CstZBufferResult;
    1728:	|  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|-------> move.l 1c6f6 <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb26fd>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    1732:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.w a5,d1
    1734:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         lsl.w #6,d1
    1736:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d2,d0
    1738:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,----- bmi.w 189a <CstDrawZBuffer+0x384>
    173c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,-> asr.l #4,d0
    173e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d1,d0
    1740:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2701>
        zbufferset = 1;
    1746:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w #1,46(sp)
      }
    }
    zbuffer = zbuffer->nextPanel;
    174c:	|  |  |  >--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> movea.l 24(a2),a2
  while(zbuffer) 
    1750:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   cmpa.w #0,a2
    1754:	|  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|--|--|--|-- bne.w 1598 <CstDrawZBuffer+0x82>
  }
  
  if(zbufferset == 0)
    1758:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   tst.w 46(sp)
    175c:	+--|--|--|--|--|--|--|-----|--|--|--|--|--|--|--|--|--|--|--|-- beq.w 1a44 <CstDrawZBuffer+0x52e>
    custom->bltdpt = (APTR) CstZBufferResult;
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      

  }

  return CstZBufferResult;
    1760:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   move.l 1c6f6 <CstZBufferResult>,d0

}
    1766:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    176a:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    176c:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   rts
          bytewidth = (sprite->width/16)*2;
    176e:	|  |  |  |  >--|--|--|-----|--|--|--|--|--|--|--|--|--|--|--|-> moveq #15,d1
    1770:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   add.l d1,d2
    1772:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   asr.l #4,d2
    1774:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   add.w d2,d2
          custom->bltafwm = 0xffff;
    1776:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb26ed>
          custom->bltalwm = 0xffff;                      
    177e:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb26ef>
          custom->bltcon1 = 0;          
    1786:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb26eb>
            WaitBlit();   
    178e:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   lea 1c7c6 <GfxBase>,a0
    1794:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    1796:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   lsr.w #4,d0
    1798:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,d6
    179a:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    179c:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   andi.l #65535,d6
    17a2:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   add.l 20(a2),d6
          if (xdiffrest) {
    17a6:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   clr.w d0
    17a8:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   cmp.w a5,d0
    17aa:	|  |  |  |  |  |  |  |     |  |  |  |  |  '--|--|--|--|--|--|-- bne.w 162c <CstDrawZBuffer+0x116>
            WaitBlit();         
    17ae:	|  |  |  |  |  |  |  |     |  |  '--|--|-----|--|--|--|--|--|-> jsr -228(a6)
            custom->bltdpt = CstZBufferWork + 2;       
    17b2:	|  |  |  |  |  |  |  |     |  |     |  |     |  |  |  |  |  |   move.l 1c6fa <CstZBufferWork>,d0
    17b8:	|  |  |  |  |  |  |  |     |  |     |  |     |  |  |  |  |  |   addq.l #2,d0
    17ba:	|  |  |  |  |  |  |  |     |  |     |  |     |  |  |  |  |  |   move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb26fd>
            custom->bltcon0 = 4096 + 0x9f0;              
    17c0:	|  |  |  |  |  |  |  |     |  |     |  |     |  |  |  |  |  |   move.w #6640,dff040 <gcc8_c_support.c.c60c1f2b+0xdb26e9>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    17c8:	|  |  |  |  |  |  |  |     |  |     |  |     |  |  |  |  |  |   move.l (a2),d0
    17ca:	|  |  |  |  |  |  |  |     |  |     |  |     |  |  |  |  |  |   move.l d0,d1
    17cc:	|  |  |  |  |  |  |  |  ,--|--|-----|--|-----|--|--|--|--|--|-- bmi.w 1ade <CstDrawZBuffer+0x5c8>
    17d0:	|  |  |  |  |  |  |  |  |  |  |     |  |     |  |  |  |  |  |   asr.l #3,d1
    17d2:	|  |  |  |  |  |  |  |  |  |  |     |  |     |  |  |  |  |  |   sub.w d2,d1
    17d4:	|  |  |  |  |  |  |  |  |  |  |     |  |     |  |  |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb270d>
            custom->bltdmod = 2;                                                            
    17da:	|  |  |  |  |  |  |  |  |  |  |     |  |     |  |  |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb270f>
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    17e2:	|  |  |  |  |  |  |  |  |  |  |  ,--|--|-----|--|--|--|--|--|-> move.w d7,d1
    17e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |   sub.w d5,d1
        if( zbuffery2oncanvas > spritey2oncanvas) 
    17e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |   movea.w d4,a0
    17e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |   cmpa.l d3,a0
    17ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  '--|--|--|-- bgt.w 1674 <CstDrawZBuffer+0x15e>
          height = zbuffery2oncanvas - spritey1oncanvas;
    17ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  '-----|--|-----|--|--|-> sub.w d7,d4
        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    17f0:	|  |  |  |  |  |  |  |  |  |  |  |  |        |  |     |  |  |   move.l d0,-(sp)
    17f2:	|  |  |  |  |  |  |  |  |  |  |  |  |        |  |     |  |  |   move.w d1,-(sp)
    17f4:	|  |  |  |  |  |  |  |  |  |  |  |  |        |  |     |  |  |   clr.w -(sp)
    17f6:	|  |  |  |  |  |  |  |  |  |  |  |  |        |  |     |  |  |   jsr 18d78 <__mulsi3>
    17fc:	|  |  |  |  |  |  |  |  |  |  |  |  |        |  |     |  |  |   addq.l #8,sp
    17fe:	|  |  |  |  |  |  |  |  |  |  |  |  |        |  |     |  |  |   tst.l d0
    1800:	|  |  |  |  |  |  |  |  |  |  |  |  |        |  |     '--|--|-- bge.w 168c <CstDrawZBuffer+0x176>
    1804:	|  |  |  |  |  |  |  |  |  |  |  |  |        '--|--------|--|-> addq.l #7,d0
    1806:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   asr.l #3,d0
    1808:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   add.l d6,d0
    180a:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb26f9>
        UWORD bltsize =  height*64+bytewidth/2;          
    1810:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   lsl.w #6,d4
    1812:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    1814:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   add.w d2,d4
    1816:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2701>
        WaitBlit();
    181c:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   lea 1c7c6 <GfxBase>,a0
    1822:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   movea.l (a0),a6
    1824:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   jsr -228(a6)
        custom->bltafwm = 0xffff;
    1828:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb26ed>
        custom->bltalwm = 0xffff;
    1830:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb26ef>
        custom->bltamod = 2;
    1838:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb270d>
        custom->bltbmod = 0;
    1840:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb270b>
        custom->bltdmod = 0;
    1848:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb270f>
        custom->bltcon0 = 0xd0c; //Copy A to D
    1850:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb26e9>
        custom->bltcon1 = 0;        
    1858:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb26eb>
        custom->bltapt = (APTR) CstZBufferWork + 2;
    1860:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.l 1c6fa <CstZBufferWork>,d0
    1866:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   addq.l #2,d0
    1868:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb26f9>
          custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    186e:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.l (a3),d2
    1870:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   movea.l 4(a3),a5
        if (zbufferset == 0) {
    1874:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   tst.w 46(sp)
    1878:	|  |  |  |  |  |  |  |  |  |  |  |  |           '--------|--|-- beq.w 1702 <CstDrawZBuffer+0x1ec>
          custom->bltbpt = (APTR) CstZBufferResult;
    187c:	|  |  |  |  |  |  |  |  |  |  |  |  '--------------------|--|-> move.l 1c6f6 <CstZBufferResult>,dff04c <gcc8_c_support.c.c60c1f2b+0xdb26f5>
        custom->bltdpt = (APTR) CstZBufferResult;
    1886:	|  |  |  |  |  |  |  |  |  |  |  |                       |  |   move.l 1c6f6 <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb26fd>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    1890:	|  |  |  |  |  |  |  |  |  |  |  |                       |  |   move.w a5,d1
    1892:	|  |  |  |  |  |  |  |  |  |  |  |                       |  |   lsl.w #6,d1
    1894:	|  |  |  |  |  |  |  |  |  |  |  |                       |  |   move.l d2,d0
    1896:	|  |  |  |  |  |  |  |  |  |  |  |                       |  '-- bpl.w 173c <CstDrawZBuffer+0x226>
    189a:	|  |  |  |  |  |  |  |  |  |  |  |                       '----> moveq #15,d0
    189c:	|  |  |  |  |  |  |  |  |  |  |  |                              add.l d2,d0
    189e:	|  |  |  |  |  |  |  |  |  |  |  |                              asr.l #4,d0
    18a0:	|  |  |  |  |  |  |  |  |  |  |  |                              add.w d1,d0
    18a2:	|  |  |  |  |  |  |  |  |  |  |  |                              move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2701>
        zbufferset = 1;
    18a8:	|  |  |  |  |  |  |  |  |  |  |  |                              move.w #1,46(sp)
    18ae:	|  |  |  +--|--|--|--|--|--|--|--|----------------------------- bra.w 174c <CstDrawZBuffer+0x236>
          custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    18b2:	|  |  |  |  |  |  |  |  |  '--|--|----------------------------> addq.l #7,d0
    18b4:	|  |  |  |  |  |  |  |  |     |  |                              asr.l #3,d0
    18b6:	|  |  |  |  |  |  |  |  |     |  |                              move.l a5,-(sp)
    18b8:	|  |  |  |  |  |  |  |  |     |  |                              move.l d0,-(sp)
    18ba:	|  |  |  |  |  |  |  |  |     |  |                              jsr 18d78 <__mulsi3>
    18c0:	|  |  |  |  |  |  |  |  |     |  |                              addq.l #8,sp
    18c2:	|  |  |  |  |  |  |  |  |     |  |                              move.l d0,d1
    18c4:	|  |  |  |  |  |  |  |  |     |  |                              add.l d0,d1
    18c6:	|  |  |  |  |  |  |  |  |     |  |                              add.l d1,d1
    18c8:	|  |  |  |  |  |  |  |  |     |  |                              add.l d0,d1
    18ca:	|  |  |  |  |  |  |  |  |     |  |                              add.l 24(a3),d1
    18ce:	|  |  |  |  |  |  |  |  |     |  |                              move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb26f5>
    18d4:	|  |  |  |  |  |  |  |  |     '--|----------------------------- bra.w 1728 <CstDrawZBuffer+0x212>
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    18d8:	|  |  |  |  |  |  |  '--|--------|----------------------------> move.w 48(sp),d1
    18dc:	|  |  |  |  |  |  |     |        |                              add.w d2,d1
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    18de:	|  |  |  |  |  |  |     |        |                              andi.l #65535,d1
    18e4:	|  |  |  |  |  |  |     |        |                              movea.l d1,a6
    18e6:	|  |  |  |  |  |  |     |        |                              movea.w d6,a1
    18e8:	|  |  |  |  |  |  |     |        |                              cmpa.l d1,a1
    18ea:	|  |  |  +--|--|--|-----|--------|----------------------------- bge.w 174c <CstDrawZBuffer+0x236>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    18ee:	|  |  |  |  |  |  |     |        |                              move.w 50(sp),d1
    18f2:	|  |  |  |  |  |  |     |        |                              cmp.w d1,d5
    18f4:	|  |  |  |  |  |  |     |        |        ,-------------------- bge.w 1a00 <CstDrawZBuffer+0x4ea>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    18f8:	|  |  |  |  |  |  |     |        |        |                     cmp.w 50(sp),d4
    18fc:	|  |  |  +--|--|--|-----|--------|--------|-------------------- ble.w 174c <CstDrawZBuffer+0x236>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    1900:	|  |  |  |  |  |  |     |        |        |                     sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    1904:	|  |  |  |  |  |  |     |        |        |                     move.w d6,d1
    1906:	|  |  |  |  |  |  |     |        |        |                     lsr.w #4,d1
    1908:	|  |  |  |  |  |  |     |        |        |                     movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    190a:	|  |  |  |  |  |  |     |        |        |                     andi.w #15,d6
    190e:	|  |  |  |  |  |  |     |        |        |                     move.w d6,44(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    1912:	|  |  |  |  |  |  |     |        |        |                     tst.l d2
    1914:	|  |  |  |  |  |  |     |        |     ,--|-------------------- blt.w 199e <CstDrawZBuffer+0x488>
    1918:	|  |  |  |  |  |  |     |        |     |  |  ,----------------> asr.l #4,d2
    191a:	|  |  |  |  |  |  |     |        |     |  |  |                  addq.l #1,d2
    191c:	|  |  |  |  |  |  |     |        |     |  |  |                  add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    191e:	|  |  |  |  |  |  |     |        |     |  |  |                  movea.w d0,a0
    1920:	|  |  |  |  |  |  |     |        |     |  |  |                  cmpa.l a0,a6
    1922:	|  |  |  |  |  |  |     |        |     |  |  |  ,-------------- bge.w 19b0 <CstDrawZBuffer+0x49a>
            WaitBlit();  
    1926:	|  |  |  |  |  |  |     |        |     |  |  |  |  ,----------> lea 1c7c6 <GfxBase>,a0
    192c:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            movea.l (a0),a6
    192e:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            jsr -228(a6)
            custom->bltafwm = 0xffff;
    1932:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb26ed>
            custom->bltalwm = 0xffff;          
    193a:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb26ef>
            custom->bltdpt = CstZBufferWork;        
    1942:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            move.l 1c6fa <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb26fd>
            custom->bltcon1 = 0;               
    194c:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb26eb>
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1954:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            movea.l 20(a2),a0
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1958:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            move.l (a2),d0
    195a:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            move.l d0,d1
    195c:	|  |  |  |  |  |  |     |        |     |  |  |  |  |     ,----- bmi.s 19c8 <CstDrawZBuffer+0x4b2>
    195e:	|  |  |  |  |  |  |     |        |     |  |  |  |  |     |      asr.l #3,d1
    1960:	|  |  |  |  |  |  |     |        |     |  |  |  |  |     |      movea.w d1,a6
    1962:	|  |  |  |  |  |  |     |        |     |  |  |  |  |     |      suba.w d2,a6
            if (xdiffrest) {
    1964:	|  |  |  |  |  |  |     |        |     |  |  |  |  |     |      tst.w 44(sp)
    1968:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  ,--|----- beq.s 19d6 <CstDrawZBuffer+0x4c0>
              custom->bltcon0 = xdiffrest * 4096 + 0x9f0;              
    196a:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  ,-> move.w 44(sp),d6
    196e:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   moveq #12,d1
    1970:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   lsl.w d1,d6
    1972:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   addi.w #2544,d6
    1976:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   move.w d6,dff040 <gcc8_c_support.c.c60c1f2b+0xdb26e9>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    197c:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb270d>
              custom->bltdmod = 0;                                                            
    1982:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb270f>
              xdiffbyte += 2;                 
    198a:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   move.w a5,d1
    198c:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   addq.w #1,d1
    198e:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1990:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   andi.l #65535,d1
    1996:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   move.l a0,d6
    1998:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   sub.l d1,d6
    199a:	|  |  +--|--|--|--|-----|--------|-----|--|--|--|--|--|--|--|-- bra.w 1668 <CstDrawZBuffer+0x152>
          bytewidth = (sprite->width/16)*2 + 2;
    199e:	|  |  |  |  |  |  |     |        |     >--|--|--|--|--|--|--|-> moveq #15,d6
    19a0:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   add.l d6,d2
    19a2:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   asr.l #4,d2
    19a4:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   addq.l #1,d2
    19a6:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    19a8:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   movea.w d0,a0
    19aa:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   cmpa.l a0,a6
    19ac:	|  |  |  |  |  |  |     |        |     |  |  |  |  '--|--|--|-- blt.w 1926 <CstDrawZBuffer+0x410>
              KPrintF("Cstdrawzbuffer: Current version only supports zbuffer size equal to screen size");
    19b0:	|  |  |  |  |  |  |     |        |     |  |  |  '-----|--|--|-> pea 18ffe <PutChar+0x170>
    19b6:	|  |  |  |  |  |  |     |        |     |  |  |        |  |  |   jsr 183ec <KPrintF>
              return FALSE;
    19bc:	|  |  |  |  |  |  |     |        |     |  |  |        |  |  |   addq.l #4,sp
    19be:	|  |  |  |  |  |  |     |        |     |  |  |        |  |  |   moveq #0,d0
}
    19c0:	|  |  |  |  |  |  |     |        |     |  |  |        |  |  |   movem.l (sp)+,d2-d7/a2-a6
    19c4:	|  |  |  |  |  |  |     |        |     |  |  |        |  |  |   addq.l #8,sp
    19c6:	|  |  |  |  |  |  |     |        |     |  |  |        |  |  |   rts
              custom->bltamod = zbuffer->width/8 - bytewidth;
    19c8:	|  |  |  |  |  |  |     |        |     |  |  |        |  '--|-> addq.l #7,d1
    19ca:	|  |  |  |  |  |  |     |        |     |  |  |        |     |   asr.l #3,d1
    19cc:	|  |  |  |  |  |  |     |        |     |  |  |        |     |   movea.w d1,a6
    19ce:	|  |  |  |  |  |  |     |        |     |  |  |        |     |   suba.w d2,a6
            if (xdiffrest) {
    19d0:	|  |  |  |  |  |  |     |        |     |  |  |        |     |   tst.w 44(sp)
    19d4:	|  |  |  |  |  |  |     |        |     |  |  |        |     '-- bne.s 196a <CstDrawZBuffer+0x454>
              custom->bltcon0 = 0x9f0;              
    19d6:	|  |  |  |  |  |  |     |        |     |  |  |        '-------> move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb26e9>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    19de:	|  |  |  |  |  |  |     |        |     |  |  |                  move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb270d>
              custom->bltdmod = 0;                                                            
    19e4:	|  |  |  |  |  |  |     |        |     |  |  |                  move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb270f>
              xdiffbyte += 2;                 
    19ec:	|  |  |  |  |  |  |     |        |     |  |  |                  move.w a5,d1
    19ee:	|  |  |  |  |  |  |     |        |     |  |  |                  addq.w #1,d1
    19f0:	|  |  |  |  |  |  |     |        |     |  |  |                  add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    19f2:	|  |  |  |  |  |  |     |        |     |  |  |                  andi.l #65535,d1
    19f8:	|  |  |  |  |  |  |     |        |     |  |  |                  move.l a0,d6
    19fa:	|  |  |  |  |  |  |     |        |     |  |  |                  sub.l d1,d6
    19fc:	|  |  +--|--|--|--|-----|--------|-----|--|--|----------------- bra.w 1668 <CstDrawZBuffer+0x152>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    1a00:	|  |  |  |  |  |  |     |        |     |  '--|----------------> movea.w d5,a0
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1a02:	|  |  |  |  |  |  |     |        |     |     |                  cmpa.l d3,a0
    1a04:	|  |  |  +--|--|--|-----|--------|-----|-----|----------------- bge.w 174c <CstDrawZBuffer+0x236>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    1a08:	|  |  |  |  |  |  |     |        |     |     |                  sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    1a0c:	|  |  |  |  |  |  |     |        |     |     |                  move.w d6,d1
    1a0e:	|  |  |  |  |  |  |     |        |     |     |                  lsr.w #4,d1
    1a10:	|  |  |  |  |  |  |     |        |     |     |                  movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    1a12:	|  |  |  |  |  |  |     |        |     |     |                  andi.w #15,d6
    1a16:	|  |  |  |  |  |  |     |        |     |     |                  move.w d6,44(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    1a1a:	|  |  |  |  |  |  |     |        |     |     |                  tst.l d2
    1a1c:	|  |  |  |  |  |  |     |        |     |     '----------------- bge.w 1918 <CstDrawZBuffer+0x402>
    1a20:	|  |  |  |  |  |  |     |        |     '----------------------- bra.w 199e <CstDrawZBuffer+0x488>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1a24:	|  |  |  |  |  '--|-----|--------|----------------------------> cmp.w 50(sp),d4
    1a28:	|  |  |  '--|-----|-----|--------|----------------------------- ble.w 174c <CstDrawZBuffer+0x236>
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    1a2c:	|  |  |     |     |     |        |                              move.w 48(sp),d0
    1a30:	|  |  |     |     |     |        |                              sub.w d6,d0
          xdiffrest = (xdiff - xdiffbyte * 8);    
    1a32:	|  |  |     |     |     |        |                              move.w d0,d6
    1a34:	|  |  |     |     |     |        |                              andi.w #15,d6
    1a38:	|  |  |     |     |     |        |                              movea.w d6,a5
          bytewidth = (sprite->width/16)*2;
    1a3a:	|  |  |     |     |     |        |                              tst.l d2
    1a3c:	|  |  |     |     '-----|--------|----------------------------- bge.w 15f0 <CstDrawZBuffer+0xda>
    1a40:	|  |  |     '-----------|--------|----------------------------- bra.w 176e <CstDrawZBuffer+0x258>
    WaitBlit();
    1a44:	'--|--|-----------------|--------|----------------------------> movea.l 1c7c6 <GfxBase>,a6
    1a4a:	   |  |                 |        |                              jsr -228(a6)
    custom->bltafwm = 0xffff;
    1a4e:	   |  |                 |        |                              move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb26ed>
    custom->bltalwm = 0xffff;
    1a56:	   |  |                 |        |                              move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb26ef>
    custom->bltamod = 0;
    1a5e:	   |  |                 |        |                              move.w #0,dff064 <gcc8_c_support.c.c60c1f2b+0xdb270d>
    custom->bltbmod = 0;
    1a66:	   |  |                 |        |                              move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb270b>
    custom->bltcmod = 0;
    1a6e:	   |  |                 |        |                              move.w #0,dff060 <gcc8_c_support.c.c60c1f2b+0xdb2709>
    custom->bltdmod = 0;
    1a76:	   |  |                 |        |                              move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb270f>
    custom->bltcon0 = 0x9f0; //Copy A to D
    1a7e:	   |  |                 |        |                              move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb26e9>
    custom->bltcon1 = 0;        
    1a86:	   |  |                 |        |                              move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb26eb>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1a8e:	   |  |                 |        |                              move.l (a3),d2
    1a90:	   |  |                 |        |                              move.l 4(a3),d3
    1a94:	   |  |                 |        |                              move.l d2,d0
    1a96:	   |  |                 |        |                    ,-------- bmi.w 1b1e <CstDrawZBuffer+0x608>
    1a9a:	   |  |                 |        |                    |         asr.l #3,d0
    1a9c:	   |  |                 |        |                    |         move.l d3,-(sp)
    1a9e:	   |  |                 |        |                    |         move.l d0,-(sp)
    1aa0:	   |  |                 |        |                    |         jsr 18d78 <__mulsi3>
    1aa6:	   |  |                 |        |                    |         addq.l #8,sp
    1aa8:	   |  |                 |        |                    |         move.l d0,d1
    1aaa:	   |  |                 |        |                    |         add.l d0,d1
    1aac:	   |  |                 |        |                    |         add.l d1,d1
    1aae:	   |  |                 |        |                    |         add.l d1,d0
    1ab0:	   |  |                 |        |                    |         add.l 24(a3),d0
    1ab4:	   |  |                 |        |                    |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb26f9>
    custom->bltdpt = (APTR) CstZBufferResult;
    1aba:	   |  |                 |        |                    |         move.l 1c6f6 <CstZBufferResult>,d0
    1ac0:	   |  |                 |        |                    |         move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb26fd>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1ac6:	   |  |                 |        |                    |         lsl.w #6,d3
    1ac8:	   |  |                 |        |                    |         tst.l d2
    1aca:	   |  |                 |        |                 ,--|-------- blt.s 1b0e <CstDrawZBuffer+0x5f8>
    1acc:	   |  |                 |        |                 |  |  ,----> asr.l #4,d2
    1ace:	   |  |                 |        |                 |  |  |      add.w d2,d3
    1ad0:	   |  |                 |        |                 |  |  |      move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2701>
}
    1ad6:	   |  |                 |        |                 |  |  |  ,-> movem.l (sp)+,d2-d7/a2-a6
    1ada:	   |  |                 |        |                 |  |  |  |   addq.l #8,sp
    1adc:	   |  |                 |        |                 |  |  |  |   rts
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1ade:	   |  |                 '--------|-----------------|--|--|--|-> addq.l #7,d1
    1ae0:	   |  |                          |                 |  |  |  |   asr.l #3,d1
    1ae2:	   |  |                          |                 |  |  |  |   sub.w d2,d1
    1ae4:	   |  |                          |                 |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb270d>
            custom->bltdmod = 2;                                                            
    1aea:	   |  |                          |                 |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb270f>
    1af2:	   |  |                          '-----------------|--|--|--|-- bra.w 17e2 <CstDrawZBuffer+0x2cc>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1af6:	   '--|--------------------------------------------|--|--|--|-> addq.l #7,d1
    1af8:	      |                                            |  |  |  |   asr.l #3,d1
    1afa:	      |                                            |  |  |  |   sub.w d2,d1
    1afc:	      |                                            |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb270d>
            custom->bltdmod = 0;                                                            
    1b02:	      |                                            |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb270f>
    1b0a:	      '--------------------------------------------|--|--|--|-- bra.w 1668 <CstDrawZBuffer+0x152>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1b0e:	                                                   >--|--|--|-> moveq #15,d1
    1b10:	                                                   |  |  |  |   add.l d1,d2
    1b12:	                                                   |  |  |  |   asr.l #4,d2
    1b14:	                                                   |  |  |  |   add.w d2,d3
    1b16:	                                                   |  |  |  |   move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2701>
  return CstZBufferResult;
    1b1c:	                                                   |  |  |  '-- bra.s 1ad6 <CstDrawZBuffer+0x5c0>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1b1e:	                                                   |  '--|----> addq.l #7,d0
    1b20:	                                                   |     |      asr.l #3,d0
    1b22:	                                                   |     |      move.l d3,-(sp)
    1b24:	                                                   |     |      move.l d0,-(sp)
    1b26:	                                                   |     |      jsr 18d78 <__mulsi3>
    1b2c:	                                                   |     |      addq.l #8,sp
    1b2e:	                                                   |     |      move.l d0,d1
    1b30:	                                                   |     |      add.l d0,d1
    1b32:	                                                   |     |      add.l d1,d1
    1b34:	                                                   |     |      add.l d1,d0
    1b36:	                                                   |     |      add.l 24(a3),d0
    1b3a:	                                                   |     |      move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb26f9>
    custom->bltdpt = (APTR) CstZBufferResult;
    1b40:	                                                   |     |      move.l 1c6f6 <CstZBufferResult>,d0
    1b46:	                                                   |     |      move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb26fd>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1b4c:	                                                   |     |      lsl.w #6,d3
    1b4e:	                                                   |     |      tst.l d2
    1b50:	                                                   |     '----- bge.w 1acc <CstDrawZBuffer+0x5b6>
    1b54:	                                                   '----------- bra.s 1b0e <CstDrawZBuffer+0x5f8>

00001b56 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1b56:	    lea -20(sp),sp
    1b5a:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1b5c:	    move.l 1c6de <CstDrawBuffer>,d0
    1b62:	,-- beq.s 1b7c <CstFreeBuffer+0x26>
    1b64:	|   move.l 1c6de <CstDrawBuffer>,20(sp)
    1b6c:	|   move.l 1c7ba <SysBase>,d0
    1b72:	|   movea.l d0,a6
    1b74:	|   movea.l 20(sp),a1
    1b78:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    1b7c:	'-> move.l 1c6da <CstViewBuffer>,d0
    1b82:	,-- beq.s 1b9c <CstFreeBuffer+0x46>
    1b84:	|   move.l 1c6da <CstViewBuffer>,16(sp)
    1b8c:	|   move.l 1c7ba <SysBase>,d0
    1b92:	|   movea.l d0,a6
    1b94:	|   movea.l 16(sp),a1
    1b98:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    1b9c:	'-> move.l 1c6d6 <CstCopperList>,d0
    1ba2:	,-- beq.s 1bbc <CstFreeBuffer+0x66>
    1ba4:	|   move.l 1c6d6 <CstCopperList>,12(sp)
    1bac:	|   move.l 1c7ba <SysBase>,d0
    1bb2:	|   movea.l d0,a6
    1bb4:	|   movea.l 12(sp),a1
    1bb8:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    1bbc:	'-> move.l 1c6ce <CstBackDrop>,d0
    1bc2:	,-- beq.s 1bdc <CstFreeBuffer+0x86>
    1bc4:	|   move.l 1c6ce <CstBackDrop>,8(sp)
    1bcc:	|   move.l 1c7ba <SysBase>,d0
    1bd2:	|   movea.l d0,a6
    1bd4:	|   movea.l 8(sp),a1
    1bd8:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    1bdc:	'-> move.l 1c6d2 <CstBackDropBackup>,d0
    1be2:	,-- beq.s 1bfc <CstFreeBuffer+0xa6>
    1be4:	|   move.l 1c6d2 <CstBackDropBackup>,4(sp)
    1bec:	|   move.l 1c7ba <SysBase>,d0
    1bf2:	|   movea.l d0,a6
    1bf4:	|   movea.l 4(sp),a1
    1bf8:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    1bfc:	'-> clr.l 1c6de <CstDrawBuffer>
  CstViewBuffer = NULL;
    1c02:	    clr.l 1c6da <CstViewBuffer>
  CstCopperList = NULL;
    1c08:	    clr.l 1c6d6 <CstCopperList>
  CstBackDrop = NULL;
    1c0e:	    clr.l 1c6ce <CstBackDrop>

}
    1c14:	    nop
    1c16:	    movea.l (sp)+,a6
    1c18:	    lea 20(sp),sp
    1c1c:	    rts

00001c1e <CstFreeze>:



void CstFreeze( ) {
    1c1e:	       lea -64(sp),sp
    1c22:	       move.l a6,-(sp)
    1c24:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    1c26:	       pea 1904e <PutChar+0x1c0>
    1c2c:	       jsr 183ec <KPrintF>
    1c32:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    1c34:	       move.l 1c702 <winWidth>,d0
    1c3a:	       lsr.l #3,d0
    1c3c:	       move.l d0,d1
    1c3e:	       move.l 1c706 <winHeight>,d0
    1c44:	       move.l d0,d0
    1c46:	       muls.w d0,d1
    1c48:	       move.w d1,d0
    1c4a:	       add.w d0,d0
    1c4c:	       add.w d0,d0
    1c4e:	       move.w d0,d2
    1c50:	       add.w d1,d2
    1c52:	       move.w d2,54(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1c56:	       move.l #14675968,50(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    1c5e:	       moveq #0,d0
    1c60:	       move.w 54(sp),d0
    1c64:	       move.l d0,46(sp)
    1c68:	       clr.l 42(sp)
    1c6c:	       move.l 1c7ba <SysBase>,d0
    1c72:	       movea.l d0,a6
    1c74:	       move.l 46(sp),d0
    1c78:	       move.l 42(sp),d1
    1c7c:	       jsr -684(a6)
    1c80:	       move.l d0,38(sp)
    1c84:	       move.l 38(sp),d0
    1c88:	       move.l d0,1c6d2 <CstBackDropBackup>
  if( !CstBackDropBackup)
    1c8e:	       move.l 1c6d2 <CstBackDropBackup>,d0
    1c94:	   ,-- bne.s 1ca4 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1c96:	   |   pea 19075 <PutChar+0x1e7>
    1c9c:	   |   jsr 183ec <KPrintF>
    1ca2:	   |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    1ca4:	   '-> move.l 1c706 <winHeight>,d0
    1caa:	       move.l d0,d0
    1cac:	       movea.w d0,a1
    1cae:	       move.l 1c702 <winWidth>,d0
    1cb4:	       move.l d0,d0
    1cb6:	       movea.w d0,a0
    1cb8:	       move.l 1c6d2 <CstBackDropBackup>,d0
    1cbe:	       clr.l -(sp)
    1cc0:	       pea 5 <_start+0x5>
    1cc4:	       move.l a1,-(sp)
    1cc6:	       move.l a0,-(sp)
    1cc8:	       pea 190ad <PutChar+0x21f>
    1cce:	       move.l d0,-(sp)
    1cd0:	       jsr 184d4 <debug_register_bitmap>
    1cd6:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1cda:	       move.l 1c6ce <CstBackDrop>,68(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1ce2:	       move.l 1c6d2 <CstBackDropBackup>,64(sp)
  for(int i=0;i<size/4;i++) 
    1cea:	       clr.l 60(sp)
    1cee:	   ,-- bra.s 1d14 <CstFreeze+0xf6>
  {
    *dst++ = *src++;
    1cf0:	,--|-> move.l 68(sp),d1
    1cf4:	|  |   move.l d1,d0
    1cf6:	|  |   addq.l #4,d0
    1cf8:	|  |   move.l d0,68(sp)
    1cfc:	|  |   move.l 64(sp),d0
    1d00:	|  |   move.l d0,d2
    1d02:	|  |   addq.l #4,d2
    1d04:	|  |   move.l d2,64(sp)
    1d08:	|  |   movea.l d1,a0
    1d0a:	|  |   move.l (a0),d1
    1d0c:	|  |   movea.l d0,a0
    1d0e:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1d10:	|  |   addq.l #1,60(sp)
    1d14:	|  '-> move.w 54(sp),d0
    1d18:	|      lsr.w #2,d0
    1d1a:	|      move.w d0,d0
    1d1c:	|      andi.l #65535,d0
    1d22:	|      cmp.l 60(sp),d0
    1d26:	'----- bgt.s 1cf0 <CstFreeze+0xd2>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1d28:	       move.l 1c6da <CstViewBuffer>,68(sp)
  dst = (ULONG *) CstBackDrop;
    1d30:	       move.l 1c6ce <CstBackDrop>,64(sp)

  for(int i=0;i<size/4;i++) 
    1d38:	       clr.l 56(sp)
    1d3c:	   ,-- bra.s 1d62 <CstFreeze+0x144>
  {
    *dst++ = *src++;
    1d3e:	,--|-> move.l 68(sp),d1
    1d42:	|  |   move.l d1,d0
    1d44:	|  |   addq.l #4,d0
    1d46:	|  |   move.l d0,68(sp)
    1d4a:	|  |   move.l 64(sp),d0
    1d4e:	|  |   move.l d0,d2
    1d50:	|  |   addq.l #4,d2
    1d52:	|  |   move.l d2,64(sp)
    1d56:	|  |   movea.l d1,a0
    1d58:	|  |   move.l (a0),d1
    1d5a:	|  |   movea.l d0,a0
    1d5c:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1d5e:	|  |   addq.l #1,56(sp)
    1d62:	|  '-> move.w 54(sp),d0
    1d66:	|      lsr.w #2,d0
    1d68:	|      move.w d0,d0
    1d6a:	|      andi.l #65535,d0
    1d70:	|      cmp.l 56(sp),d0
    1d74:	'----- bgt.s 1d3e <CstFreeze+0x120>
  }

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    1d76:	       move.l 1c6e6 <CstCleanupQueueDrawBuffer>,34(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    1d7e:	       moveq #20,d0
    1d80:	       move.l d0,30(sp)
    1d84:	       clr.l 26(sp)
    1d88:	       move.l 1c7ba <SysBase>,d0
    1d8e:	       movea.l d0,a6
    1d90:	       move.l 30(sp),d0
    1d94:	       move.l 26(sp),d1
    1d98:	       jsr -684(a6)
    1d9c:	       move.l d0,22(sp)
    1da0:	       move.l 22(sp),d0
    1da4:	       move.l d0,1c6e6 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
    1daa:	       movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    1db0:	       move.l 34(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = 0;
    1db6:	       movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    1dbc:	       clr.w (a0)
  CstCleanupQueueDrawBuffer->y = 0;
    1dbe:	       movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    1dc4:	       clr.w 2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
    1dc8:	       movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    1dce:	       clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = winWidth/16;
    1dd2:	       move.l 1c702 <winWidth>,d0
    1dd8:	       lsr.l #4,d0
    1dda:	       movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    1de0:	       move.l d0,d0
    1de2:	       move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = winHeight;
    1de6:	       move.l 1c706 <winHeight>,d0
    1dec:	       movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    1df2:	       move.l d0,d0
    1df4:	       move.w d0,10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = 0;
    1df8:	       movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    1dfe:	       clr.w 12(a0)
  CstCleanupQueueDrawBuffer->starty = 0;
    1e02:	       movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    1e08:	       clr.w 14(a0)

  next = CstCleanupQueueViewBuffer;
    1e0c:	       move.l 1c6e2 <CstCleanupQueueViewBuffer>,34(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    1e14:	       moveq #20,d2
    1e16:	       move.l d2,18(sp)
    1e1a:	       clr.l 14(sp)
    1e1e:	       move.l 1c7ba <SysBase>,d0
    1e24:	       movea.l d0,a6
    1e26:	       move.l 18(sp),d0
    1e2a:	       move.l 14(sp),d1
    1e2e:	       jsr -684(a6)
    1e32:	       move.l d0,10(sp)
    1e36:	       move.l 10(sp),d0
    1e3a:	       move.l d0,1c6e2 <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    1e40:	       movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    1e46:	       move.l 34(sp),16(a0)
  CstCleanupQueueViewBuffer->x = 0;
    1e4c:	       movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    1e52:	       clr.w (a0)
  CstCleanupQueueViewBuffer->y = 0;
    1e54:	       movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    1e5a:	       clr.w 2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    1e5e:	       movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    1e64:	       clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = winWidth/16;
    1e68:	       move.l 1c702 <winWidth>,d0
    1e6e:	       lsr.l #4,d0
    1e70:	       movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    1e76:	       move.l d0,d0
    1e78:	       move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = winHeight;
    1e7c:	       move.l 1c706 <winHeight>,d0
    1e82:	       movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    1e88:	       move.l d0,d0
    1e8a:	       move.w d0,10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = 0;
    1e8e:	       movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    1e94:	       clr.w 12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    1e98:	       movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    1e9e:	       clr.w 14(a0)

  KPrintF("CstFreeze: Finished");
    1ea2:	       pea 190bc <PutChar+0x22e>
    1ea8:	       jsr 183ec <KPrintF>
    1eae:	       addq.l #4,sp

}  
    1eb0:	       nop
    1eb2:	       move.l (sp)+,d2
    1eb4:	       movea.l (sp)+,a6
    1eb6:	       lea 64(sp),sp
    1eba:	       rts

00001ebc <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1ebc:	             lea -172(sp),sp
    1ec0:	             movem.l d2-d4/a6,-(sp)


	KPrintF("CstLoadBackDrop: Loading of Background started");
    1ec4:	             pea 190d0 <PutChar+0x242>
    1eca:	             jsr 183ec <KPrintF>
    1ed0:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1ed2:	             move.l 192(sp),-(sp)
    1ed6:	             jsr 6bc <get2bytes>
    1edc:	             addq.l #4,sp
    1ede:	             move.w d0,162(sp)
  UWORD height = get2bytes(fp);  
    1ee2:	             move.l 192(sp),-(sp)
    1ee6:	             jsr 6bc <get2bytes>
    1eec:	             addq.l #4,sp
    1eee:	             move.w d0,160(sp)

  UWORD widthbyteslayer = width/8;
    1ef2:	             move.w 162(sp),d0
    1ef6:	             lsr.w #3,d0
    1ef8:	             move.w d0,158(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    1efc:	             move.w 158(sp),d0
    1f00:	             lsr.w #1,d0
    1f02:	             move.w d0,156(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1f06:	             move.l 1c702 <winWidth>,d0
    1f0c:	             lsr.l #3,d0
    1f0e:	             move.w d0,154(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1f12:	             move.w 158(sp),d0
    1f16:	             muls.w 160(sp),d0
    1f1a:	             move.w d0,152(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    1f1e:	             move.w 152(sp),d1
    1f22:	             move.w d1,d0
    1f24:	             add.w d0,d0
    1f26:	             add.w d0,d0
    1f28:	             move.w d0,d2
    1f2a:	             add.w d1,d2
    1f2c:	             move.w d2,150(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    1f30:	             move.w 1c6c8 <CstPaletteLoaded>,d0
    1f36:	,----------- bne.w 1fd0 <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    1f3a:	|            move.w #384,148(sp)

    if(CstPalette) {
    1f40:	|            move.l 1c6ee <CstPalette>,d0
    1f46:	|        ,-- beq.s 1f60 <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    1f48:	|        |   move.l 1c6ee <CstPalette>,144(sp)
    1f50:	|        |   move.l 1c7ba <SysBase>,d0
    1f56:	|        |   movea.l d0,a6
    1f58:	|        |   movea.l 144(sp),a1
    1f5c:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    1f60:	|        '-> moveq #64,d0
    1f62:	|            move.l d0,140(sp)
    1f66:	|            clr.l 136(sp)
    1f6a:	|            move.l 1c7ba <SysBase>,d0
    1f70:	|            movea.l d0,a6
    1f72:	|            move.l 140(sp),d0
    1f76:	|            move.l 136(sp),d1
    1f7a:	|            jsr -684(a6)
    1f7e:	|            move.l d0,132(sp)
    1f82:	|            move.l 132(sp),d0
    1f86:	|            move.l d0,1c6ee <CstPalette>
    CstPaletteLoaded = 1;
    1f8c:	|            move.w #1,1c6c8 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    1f94:	|            move.l 1c6ee <CstPalette>,184(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1f9c:	|            clr.l 180(sp)
    1fa0:	|        ,-- bra.s 1fc6 <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    1fa2:	|     ,--|-> move.l 192(sp),-(sp)
    1fa6:	|     |  |   jsr 6bc <get2bytes>
    1fac:	|     |  |   addq.l #4,sp
    1fae:	|     |  |   move.l d0,d1
    1fb0:	|     |  |   move.l 184(sp),d0
    1fb4:	|     |  |   move.l d0,d2
    1fb6:	|     |  |   addq.l #2,d2
    1fb8:	|     |  |   move.l d2,184(sp)
    1fbc:	|     |  |   move.l d1,d1
    1fbe:	|     |  |   movea.l d0,a0
    1fc0:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1fc2:	|     |  |   addq.l #1,180(sp)
    1fc6:	|     |  '-> moveq #31,d0
    1fc8:	|     |      cmp.l 180(sp),d0
    1fcc:	|     '----- bge.s 1fa2 <CstLoadBackdrop+0xe6>
    1fce:	|  ,-------- bra.s 1fee <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1fd0:	'--|-------> clr.l 176(sp)
    1fd4:	   |     ,-- bra.s 1fe6 <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    1fd6:	   |  ,--|-> move.l 192(sp),-(sp)
    1fda:	   |  |  |   jsr 6bc <get2bytes>
    1fe0:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1fe2:	   |  |  |   addq.l #1,176(sp)
    1fe6:	   |  |  '-> moveq #31,d2
    1fe8:	   |  |      cmp.l 176(sp),d2
    1fec:	   |  '----- bge.s 1fd6 <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    1fee:	   '-------> moveq #0,d0
    1ff0:	             move.w 150(sp),d0
    1ff4:	             move.l d0,128(sp)
    1ff8:	             moveq #2,d0
    1ffa:	             move.l d0,124(sp)
    1ffe:	             move.l 1c7ba <SysBase>,d0
    2004:	             movea.l d0,a6
    2006:	             move.l 128(sp),d0
    200a:	             move.l 124(sp),d1
    200e:	             jsr -684(a6)
    2012:	             move.l d0,120(sp)
    2016:	             move.l 120(sp),d0
    201a:	             move.l d0,116(sp)
  if( !tmpbuffer)
    201e:	         ,-- bne.s 202e <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    2020:	         |   pea 190ff <PutChar+0x271>
    2026:	         |   jsr 183ec <KPrintF>
    202c:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    202e:	         '-> moveq #0,d0
    2030:	             move.w 152(sp),d0
    2034:	             move.l d0,112(sp)
    2038:	             moveq #2,d2
    203a:	             move.l d2,108(sp)
    203e:	             move.l 1c7ba <SysBase>,d0
    2044:	             movea.l d0,a6
    2046:	             move.l 112(sp),d0
    204a:	             move.l 108(sp),d1
    204e:	             jsr -684(a6)
    2052:	             move.l d0,104(sp)
    2056:	             move.l 104(sp),d0
    205a:	             move.l d0,100(sp)
  if( !tmpmask)
    205e:	         ,-- bne.s 206e <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    2060:	         |   pea 19135 <PutChar+0x2a7>
    2066:	         |   jsr 183ec <KPrintF>
    206c:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    206e:	         '-> move.w 160(sp),d0
    2072:	             movea.w d0,a1
    2074:	             move.w 162(sp),d0
    2078:	             movea.w d0,a0
    207a:	             clr.l -(sp)
    207c:	             pea 5 <_start+0x5>
    2080:	             move.l a1,-(sp)
    2082:	             move.l a0,-(sp)
    2084:	             pea 19169 <PutChar+0x2db>
    208a:	             move.l 136(sp),-(sp)
    208e:	             jsr 184d4 <debug_register_bitmap>
    2094:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    2098:	             move.w 160(sp),d0
    209c:	             movea.w d0,a1
    209e:	             move.w 162(sp),d0
    20a2:	             movea.w d0,a0
    20a4:	             clr.l -(sp)
    20a6:	             pea 1 <_start+0x1>
    20aa:	             move.l a1,-(sp)
    20ac:	             move.l a0,-(sp)
    20ae:	             pea 19177 <PutChar+0x2e9>
    20b4:	             move.l 136(sp),-(sp)
    20b8:	             jsr 184d4 <debug_register_bitmap>
    20be:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    20c2:	             move.l 192(sp),96(sp)
    20c8:	             move.l 116(sp),92(sp)
    20ce:	             moveq #2,d0
    20d0:	             move.l d0,88(sp)
    20d4:	             move.w 150(sp),d0
    20d8:	             lsr.w #1,d0
    20da:	             move.w d0,d0
    20dc:	             andi.l #65535,d0
    20e2:	             move.l d0,84(sp)
    20e6:	             move.l 1c7c2 <DOSBase>,d0
    20ec:	             movea.l d0,a6
    20ee:	             move.l 96(sp),d1
    20f2:	             move.l 92(sp),d2
    20f6:	             move.l 88(sp),d3
    20fa:	             move.l 84(sp),d4
    20fe:	             jsr -324(a6)
    2102:	             move.l d0,80(sp)
    2106:	             move.l 80(sp),d0
    210a:	             move.w d0,78(sp)
  if(!count) {
    210e:	         ,-- bne.s 2122 <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    2110:	         |   pea 19183 <PutChar+0x2f5>
    2116:	         |   jsr 183ec <KPrintF>
    211c:	         |   addq.l #4,sp
    return;
    211e:	   ,-----|-- bra.w 2432 <CstLoadBackdrop+0x576>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    2122:	   |     '-> move.l 192(sp),74(sp)
    2128:	   |         move.l 100(sp),70(sp)
    212e:	   |         moveq #2,d2
    2130:	   |         move.l d2,66(sp)
    2134:	   |         move.w 152(sp),d0
    2138:	   |         lsr.w #1,d0
    213a:	   |         move.w d0,d0
    213c:	   |         andi.l #65535,d0
    2142:	   |         move.l d0,62(sp)
    2146:	   |         move.l 1c7c2 <DOSBase>,d0
    214c:	   |         movea.l d0,a6
    214e:	   |         move.l 74(sp),d1
    2152:	   |         move.l 70(sp),d2
    2156:	   |         move.l 66(sp),d3
    215a:	   |         move.l 62(sp),d4
    215e:	   |         jsr -324(a6)
    2162:	   |         move.l d0,58(sp)
    2166:	   |         move.l 58(sp),d0
    216a:	   |         move.w d0,78(sp)
   

  if(!count) {
    216e:	   |     ,-- bne.s 2182 <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    2170:	   |     |   pea 19183 <PutChar+0x2f5>
    2176:	   |     |   jsr 183ec <KPrintF>
    217c:	   |     |   addq.l #4,sp
    return;
    217e:	   +-----|-- bra.w 2432 <CstLoadBackdrop+0x576>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    2182:	   |     '-> move.l #14675968,54(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    218a:	   |         move.l 1c6ce <CstBackDrop>,d0
    2190:	   |         move.l d0,172(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    2194:	   |         move.l 200(sp),d0
    2198:	   |         move.w d0,d1
    219a:	   |         muls.w 154(sp),d1
    219e:	   |         move.l 196(sp),d0
    21a2:	   |     ,-- bpl.s 21a6 <CstLoadBackdrop+0x2ea>
    21a4:	   |     |   addq.l #7,d0
    21a6:	   |     '-> asr.l #3,d0
    21a8:	   |         move.l d0,d0
    21aa:	   |         movea.w d1,a0
    21ac:	   |         adda.w d0,a0
    21ae:	   |         move.w a0,52(sp)
  backdropcursor += offset; 
    21b2:	   |         moveq #0,d0
    21b4:	   |         move.w 52(sp),d0
    21b8:	   |         add.l d0,172(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    21bc:	   |         pea 1919e <PutChar+0x310>
    21c2:	   |         jsr 183ec <KPrintF>
    21c8:	   |         addq.l #4,sp


  WaitBlit();
    21ca:	   |         move.l 1c7c6 <GfxBase>,d0
    21d0:	   |         movea.l d0,a6
    21d2:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    21d6:	   |         movea.l 54(sp),a0
    21da:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    21e0:	   |         movea.l 54(sp),a0
    21e4:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    21ea:	   |         movea.l 54(sp),a0
    21ee:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    21f4:	   |         movea.l 54(sp),a0
    21f8:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    21fe:	   |         move.w 154(sp),d0
    2202:	   |         sub.w 158(sp),d0
    2206:	   |         movea.l 54(sp),a0
    220a:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    220e:	   |         move.w 154(sp),d0
    2212:	   |         sub.w 158(sp),d0
    2216:	   |         movea.l 54(sp),a0
    221a:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    221e:	   |         movea.l 54(sp),a0
    2222:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    2228:	   |         movea.l 54(sp),a0
    222c:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    2232:	   |         move.l 116(sp),168(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    2238:	   |         clr.l 164(sp)
    223c:	   |     ,-- bra.s 22aa <CstLoadBackdrop+0x3ee>
  {   
    WaitBlit(); 
    223e:	   |  ,--|-> move.l 1c7c6 <GfxBase>,d0
    2244:	   |  |  |   movea.l d0,a6
    2246:	   |  |  |   jsr -228(a6)
    custom->bltapt = (APTR) tmpmask;
    224a:	   |  |  |   movea.l 54(sp),a0
    224e:	   |  |  |   move.l 100(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    2254:	   |  |  |   move.l 168(sp),d0
    2258:	   |  |  |   movea.l 54(sp),a0
    225c:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    2260:	   |  |  |   move.l 172(sp),d0
    2264:	   |  |  |   movea.l 54(sp),a0
    2268:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    226c:	   |  |  |   move.l 172(sp),d0
    2270:	   |  |  |   movea.l 54(sp),a0
    2274:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    2278:	   |  |  |   move.w 160(sp),d0
    227c:	   |  |  |   lsl.w #6,d0
    227e:	   |  |  |   add.w 156(sp),d0
    2282:	   |  |  |   movea.l 54(sp),a0
    2286:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    228a:	   |  |  |   moveq #0,d0
    228c:	   |  |  |   move.w 152(sp),d0
    2290:	   |  |  |   add.l d0,168(sp)
    backdropcursor += CstBackdropSizePlane;
    2294:	   |  |  |   move.w 1c6cc <CstBackdropSizePlane>,d0
    229a:	   |  |  |   move.w d0,d0
    229c:	   |  |  |   andi.l #65535,d0
    22a2:	   |  |  |   add.l d0,172(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    22a6:	   |  |  |   addq.l #1,164(sp)
    22aa:	   |  |  '-> moveq #4,d0
    22ac:	   |  |      cmp.l 164(sp),d0
    22b0:	   |  '----- bge.s 223e <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    22b2:	   |         move.l 1c7c6 <GfxBase>,d0
    22b8:	   |         movea.l d0,a6
    22ba:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    22be:	   |         pea 191bd <PutChar+0x32f>
    22c4:	   |         jsr 183ec <KPrintF>
    22ca:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    22cc:	   |         move.l 116(sp),48(sp)
    22d2:	   |         move.l 1c7ba <SysBase>,d0
    22d8:	   |         movea.l d0,a6
    22da:	   |         movea.l 48(sp),a1
    22de:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    22e2:	   |         move.l 100(sp),44(sp)
    22e8:	   |         move.l 1c7ba <SysBase>,d0
    22ee:	   |         movea.l d0,a6
    22f0:	   |         movea.l 44(sp),a1
    22f4:	   |         jsr -690(a6)

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    22f8:	   |         move.l 1c6e6 <CstCleanupQueueDrawBuffer>,40(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2300:	   |         moveq #20,d2
    2302:	   |         move.l d2,36(sp)
    2306:	   |         clr.l 32(sp)
    230a:	   |         move.l 1c7ba <SysBase>,d0
    2310:	   |         movea.l d0,a6
    2312:	   |         move.l 36(sp),d0
    2316:	   |         move.l 32(sp),d1
    231a:	   |         jsr -684(a6)
    231e:	   |         move.l d0,28(sp)
    2322:	   |         move.l 28(sp),d0
    2326:	   |         move.l d0,1c6e6 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
    232c:	   |         movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2332:	   |         move.l 40(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = 0;
    2338:	   |         movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    233e:	   |         clr.w (a0)
  CstCleanupQueueDrawBuffer->y = 0;
    2340:	   |         movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2346:	   |         clr.w 2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
    234a:	   |         movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2350:	   |         clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = winWidth/16;
    2354:	   |         move.l 1c702 <winWidth>,d0
    235a:	   |         lsr.l #4,d0
    235c:	   |         movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2362:	   |         move.l d0,d0
    2364:	   |         move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = winHeight;
    2368:	   |         move.l 1c706 <winHeight>,d0
    236e:	   |         movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2374:	   |         move.l d0,d0
    2376:	   |         move.w d0,10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = 0;
    237a:	   |         movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2380:	   |         clr.w 12(a0)
  CstCleanupQueueDrawBuffer->starty = 0;
    2384:	   |         movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    238a:	   |         clr.w 14(a0)

  next = CstCleanupQueueViewBuffer;
    238e:	   |         move.l 1c6e2 <CstCleanupQueueViewBuffer>,40(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2396:	   |         moveq #20,d0
    2398:	   |         move.l d0,24(sp)
    239c:	   |         clr.l 20(sp)
    23a0:	   |         move.l 1c7ba <SysBase>,d0
    23a6:	   |         movea.l d0,a6
    23a8:	   |         move.l 24(sp),d0
    23ac:	   |         move.l 20(sp),d1
    23b0:	   |         jsr -684(a6)
    23b4:	   |         move.l d0,16(sp)
    23b8:	   |         move.l 16(sp),d0
    23bc:	   |         move.l d0,1c6e2 <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    23c2:	   |         movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    23c8:	   |         move.l 40(sp),16(a0)
  CstCleanupQueueViewBuffer->x = 0;
    23ce:	   |         movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    23d4:	   |         clr.w (a0)
  CstCleanupQueueViewBuffer->y = 0;
    23d6:	   |         movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    23dc:	   |         clr.w 2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    23e0:	   |         movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    23e6:	   |         clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = winWidth/16;
    23ea:	   |         move.l 1c702 <winWidth>,d0
    23f0:	   |         lsr.l #4,d0
    23f2:	   |         movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    23f8:	   |         move.l d0,d0
    23fa:	   |         move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = winHeight;
    23fe:	   |         move.l 1c706 <winHeight>,d0
    2404:	   |         movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    240a:	   |         move.l d0,d0
    240c:	   |         move.w d0,10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = 0;
    2410:	   |         movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    2416:	   |         clr.w 12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    241a:	   |         movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    2420:	   |         clr.w 14(a0)

  KPrintF("CstLoadBackDrop: Finished");
    2424:	   |         pea 191dd <PutChar+0x34f>
    242a:	   |         jsr 183ec <KPrintF>
    2430:	   |         addq.l #4,sp

}
    2432:	   '-------> movem.l (sp)+,d2-d4/a6
    2436:	             lea 172(sp),sp
    243a:	             rts

0000243c <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    243c:	                lea -156(sp),sp
    2440:	                move.l a6,-(sp)
    2442:	                move.l d2,-(sp)
    2444:	                move.l 172(sp),d1
    2448:	                move.l 176(sp),d0
    244c:	                move.w d1,d1
    244e:	                move.w d1,10(sp)
    2452:	                move.w d0,d0
    2454:	                move.w d0,8(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;	
    2458:	                move.l #14675968,112(sp)
  //custom->color[0] = 0x0f0;
  UWORD *destination = 0;
    2460:	                clr.l 108(sp)
  destination = (UWORD *) CstBackDrop;      
    2464:	                move.l 1c6ce <CstBackDrop>,108(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    246c:	                clr.l 140(sp)

  blitwidth = single->width/16;
    2470:	                movea.l 168(sp),a0
    2474:	                move.l (a0),d0
    2476:	                movea.l d0,a0
    2478:	                cmpa.w #0,a0
    247c:	            ,-- bge.s 2482 <CstPasteChar+0x46>
    247e:	            |   lea 15(a0),a0
    2482:	            '-> move.l a0,d0
    2484:	                asr.l #4,d0
    2486:	                move.l d0,124(sp)
  if(blitwidth == 0) blitwidth = 1;
    248a:	            ,-- bne.s 2492 <CstPasteChar+0x56>
    248c:	            |   moveq #1,d0
    248e:	            |   move.l d0,124(sp)

  if( y < 0) {
    2492:	            '-> tst.w 8(sp)
    2496:	         ,----- bge.s 24e0 <CstPasteChar+0xa4>
    if(y + single->height < 0) {
    2498:	         |      movea.w 8(sp),a1
    249c:	         |      movea.l 168(sp),a0
    24a0:	         |      move.l 4(a0),d0
    24a4:	         |      add.l a1,d0
    24a6:	         |  ,-- bpl.s 24ba <CstPasteChar+0x7e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    24a8:	         |  |   pea 191f7 <PutChar+0x369>
    24ae:	         |  |   jsr 183ec <KPrintF>
    24b4:	         |  |   addq.l #4,sp
      return;
    24b6:	,--------|--|-- bra.w 2e2e <CstPasteChar+0x9f2>
    }
    ystartdst = 0;
    24ba:	|        |  '-> clr.l 136(sp)
    ystartsrc = y*-1;
    24be:	|        |      move.w 8(sp),d0
    24c2:	|        |      ext.l d0
    24c4:	|        |      move.l d0,d1
    24c6:	|        |      neg.l d1
    24c8:	|        |      move.l d1,132(sp)
    blitheight = single->height+y;
    24cc:	|        |      movea.l 168(sp),a0
    24d0:	|        |      move.l 4(a0),d0
    24d4:	|        |      movea.w 8(sp),a0
    24d8:	|        |      add.l a0,d0
    24da:	|        |      move.l d0,128(sp)
    24de:	|     ,--|----- bra.s 2552 <CstPasteChar+0x116>
  } else if(y+single->height > (int) winHeight) {
    24e0:	|     |  '----> movea.w 8(sp),a1
    24e4:	|     |         movea.l 168(sp),a0
    24e8:	|     |         move.l 4(a0),d0
    24ec:	|     |         move.l a1,d1
    24ee:	|     |         add.l d0,d1
    24f0:	|     |         move.l 1c706 <winHeight>,d0
    24f6:	|     |         cmp.l d1,d0
    24f8:	|     |  ,----- bge.s 253a <CstPasteChar+0xfe>
    if(y  > (int) winHeight) {
    24fa:	|     |  |      movea.w 8(sp),a0
    24fe:	|     |  |      move.l 1c706 <winHeight>,d0
    2504:	|     |  |      cmp.l a0,d0
    2506:	|     |  |  ,-- bge.s 251a <CstPasteChar+0xde>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2508:	|     |  |  |   pea 191f7 <PutChar+0x369>
    250e:	|     |  |  |   jsr 183ec <KPrintF>
    2514:	|     |  |  |   addq.l #4,sp
      return;
    2516:	+-----|--|--|-- bra.w 2e2e <CstPasteChar+0x9f2>
    }
    ystartdst = y;
    251a:	|     |  |  '-> movea.w 8(sp),a0
    251e:	|     |  |      move.l a0,136(sp)
    ystartsrc = 0;
    2522:	|     |  |      clr.l 132(sp)
    blitheight = winHeight-y;
    2526:	|     |  |      move.l 1c706 <winHeight>,d0
    252c:	|     |  |      movea.w 8(sp),a0
    2530:	|     |  |      move.l d0,d1
    2532:	|     |  |      sub.l a0,d1
    2534:	|     |  |      move.l d1,128(sp)
    2538:	|     +--|----- bra.s 2552 <CstPasteChar+0x116>
  } else {
    ystartdst = y;
    253a:	|     |  '----> movea.w 8(sp),a0
    253e:	|     |         move.l a0,136(sp)
    ystartsrc = 0;
    2542:	|     |         clr.l 132(sp)
    blitheight = single->height;
    2546:	|     |         movea.l 168(sp),a0
    254a:	|     |         move.l 4(a0),d0
    254e:	|     |         move.l d0,128(sp)
  }


   if( x < 0) { //Leftmost part outside screen
    2552:	|     '-------> tst.w 10(sp)
    2556:	|        ,----- bge.w 279e <CstPasteChar+0x362>
    if(x + single->width < 0) {
    255a:	|        |      movea.w 10(sp),a1
    255e:	|        |      movea.l 168(sp),a0
    2562:	|        |      move.l (a0),d0
    2564:	|        |      add.l a1,d0
    2566:	|        |  ,-- bpl.s 257a <CstPasteChar+0x13e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2568:	|        |  |   pea 191f7 <PutChar+0x369>
    256e:	|        |  |   jsr 183ec <KPrintF>
    2574:	|        |  |   addq.l #4,sp
      return;
    2576:	+--------|--|-- bra.w 2e2e <CstPasteChar+0x9f2>

    }
    
    extrawords = 1;
    257a:	|        |  '-> move.w #1,162(sp)

    cutwordssource = (x*-1)/16; 
    2580:	|        |      move.w 10(sp),d0
    2584:	|        |  ,-- bpl.s 258a <CstPasteChar+0x14e>
    2586:	|        |  |   addi.w #15,d0
    258a:	|        |  '-> asr.w #4,d0
    258c:	|        |      neg.w d0
    258e:	|        |      move.w d0,160(sp)
    cutmaskpixel = (x*-1)%16;     
    2592:	|        |      move.w 10(sp),d0
    2596:	|        |      ext.l d0
    2598:	|        |      neg.l d0
    259a:	|        |      andi.l #-2147483633,d0
    25a0:	|        |  ,-- bpl.s 25aa <CstPasteChar+0x16e>
    25a2:	|        |  |   subq.l #1,d0
    25a4:	|        |  |   moveq #-16,d1
    25a6:	|        |  |   or.l d1,d0
    25a8:	|        |  |   addq.l #1,d0
    25aa:	|        |  '-> move.w d0,158(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    25ae:	|        |      clr.w 156(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    25b2:	|        |      movea.l 168(sp),a0
    25b6:	|        |      move.l 24(a0),d0
    25ba:	|        |      move.l d0,d1
    25bc:	|        |      moveq #0,d0
    25be:	|        |      move.w 160(sp),d0
    25c2:	|        |      add.l d0,d0
    25c4:	|        |      move.l d1,d2
    25c6:	|        |      add.l d0,d2
    25c8:	|        |      movea.l 168(sp),a0
    25cc:	|        |      move.l (a0),d0
    25ce:	|        |      move.l 132(sp),-(sp)
    25d2:	|        |      move.l d0,-(sp)
    25d4:	|        |      jsr 18d78 <__mulsi3>
    25da:	|        |      addq.l #8,sp
    25dc:	|        |      lsr.l #3,d0
    25de:	|        |      move.l d2,d1
    25e0:	|        |      add.l d0,d1
    25e2:	|        |      move.l d1,152(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    25e6:	|        |      move.l 1c702 <winWidth>,d0
    25ec:	|        |      move.l 136(sp),-(sp)
    25f0:	|        |      move.l d0,-(sp)
    25f2:	|        |      jsr 18d78 <__mulsi3>
    25f8:	|        |      addq.l #8,sp
    25fa:	|        |      lsr.l #3,d0
    25fc:	|        |      move.l 108(sp),d1
    2600:	|        |      add.l d1,d0
    2602:	|        |      move.l d0,d2
    2604:	|        |      subq.l #2,d2
    2606:	|        |      move.l d2,148(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    260a:	|        |      move.l 1c702 <winWidth>,d0
    2610:	|        |      move.l 136(sp),-(sp)
    2614:	|        |      move.l d0,-(sp)
    2616:	|        |      jsr 18d78 <__mulsi3>
    261c:	|        |      addq.l #8,sp
    261e:	|        |      lsr.l #3,d0
    2620:	|        |      move.l 108(sp),d1
    2624:	|        |      add.l d1,d0
    2626:	|        |      move.l d0,d1
    2628:	|        |      subq.l #2,d1
    262a:	|        |      move.l d1,144(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    262e:	|        |      moveq #0,d0
    2630:	|        |      move.w 158(sp),d0
    2634:	|        |      moveq #16,d1
    2636:	|        |      sub.l d0,d1
    2638:	|        |      move.l d1,d0
    263a:	|        |      moveq #12,d2
    263c:	|        |      lsl.l d2,d0
    263e:	|        |      move.l d0,140(sp)

    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2642:	|        |      move.l 1c6e6 <CstCleanupQueueDrawBuffer>,48(sp)
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    264a:	|        |      moveq #20,d0
    264c:	|        |      move.l d0,44(sp)
    2650:	|        |      clr.l 40(sp)
    2654:	|        |      move.l 1c7ba <SysBase>,d0
    265a:	|        |      movea.l d0,a6
    265c:	|        |      move.l 44(sp),d0
    2660:	|        |      move.l 40(sp),d1
    2664:	|        |      jsr -684(a6)
    2668:	|        |      move.l d0,36(sp)
    266c:	|        |      move.l 36(sp),d0
    2670:	|        |      move.l d0,1c6e6 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;
    2676:	|        |      movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    267c:	|        |      move.l 48(sp),16(a0)
    CstCleanupQueueDrawBuffer->x = 0;
    2682:	|        |      movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2688:	|        |      clr.w (a0)
    CstCleanupQueueDrawBuffer->y = 0;
    268a:	|        |      movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2690:	|        |      clr.w 2(a0)
    CstCleanupQueueDrawBuffer->person = NULL;
    2694:	|        |      movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    269a:	|        |      clr.l 4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    269e:	|        |      movea.l 168(sp),a0
    26a2:	|        |      move.l (a0),d0
    26a4:	|        |      movea.l d0,a0
    26a6:	|        |      cmpa.w #0,a0
    26aa:	|        |  ,-- bge.s 26b0 <CstPasteChar+0x274>
    26ac:	|        |  |   lea 15(a0),a0
    26b0:	|        |  '-> move.l a0,d0
    26b2:	|        |      asr.l #4,d0
    26b4:	|        |      move.l d0,d0
    26b6:	|        |      add.w 160(sp),d0
    26ba:	|        |      movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    26c0:	|        |      add.w 162(sp),d0
    26c4:	|        |      move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    26c8:	|        |      movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    26ce:	|        |      move.l 128(sp),d0
    26d2:	|        |      move.w d0,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = 0;
    26d6:	|        |      movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    26dc:	|        |      clr.w 12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    26e0:	|        |      movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    26e6:	|        |      move.l 136(sp),d0
    26ea:	|        |      move.w d0,14(a0)

    next = CstCleanupQueueViewBuffer;
    26ee:	|        |      move.l 1c6e2 <CstCleanupQueueViewBuffer>,48(sp)
    CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    26f6:	|        |      moveq #20,d1
    26f8:	|        |      move.l d1,32(sp)
    26fc:	|        |      clr.l 28(sp)
    2700:	|        |      move.l 1c7ba <SysBase>,d0
    2706:	|        |      movea.l d0,a6
    2708:	|        |      move.l 32(sp),d0
    270c:	|        |      move.l 28(sp),d1
    2710:	|        |      jsr -684(a6)
    2714:	|        |      move.l d0,24(sp)
    2718:	|        |      move.l 24(sp),d0
    271c:	|        |      move.l d0,1c6e2 <CstCleanupQueueViewBuffer>
    CstCleanupQueueViewBuffer->next = next;
    2722:	|        |      movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    2728:	|        |      move.l 48(sp),16(a0)
    CstCleanupQueueViewBuffer->x = 0;
    272e:	|        |      movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    2734:	|        |      clr.w (a0)
    CstCleanupQueueViewBuffer->y = 0;
    2736:	|        |      movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    273c:	|        |      clr.w 2(a0)
    CstCleanupQueueViewBuffer->person = NULL;
    2740:	|        |      movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    2746:	|        |      clr.l 4(a0)
    CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    274a:	|        |      movea.l 168(sp),a0
    274e:	|        |      move.l (a0),d0
    2750:	|        |      movea.l d0,a0
    2752:	|        |      cmpa.w #0,a0
    2756:	|        |  ,-- bge.s 275c <CstPasteChar+0x320>
    2758:	|        |  |   lea 15(a0),a0
    275c:	|        |  '-> move.l a0,d0
    275e:	|        |      asr.l #4,d0
    2760:	|        |      move.l d0,d0
    2762:	|        |      add.w 160(sp),d0
    2766:	|        |      movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    276c:	|        |      add.w 162(sp),d0
    2770:	|        |      move.w d0,8(a0)
    CstCleanupQueueViewBuffer->height = blitheight;
    2774:	|        |      movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    277a:	|        |      move.l 128(sp),d0
    277e:	|        |      move.w d0,10(a0)
    CstCleanupQueueViewBuffer->startxinbytes = 0;
    2782:	|        |      movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    2788:	|        |      clr.w 12(a0)
    CstCleanupQueueViewBuffer->starty = ystartdst; 
    278c:	|        |      movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    2792:	|        |      move.l 136(sp),d0
    2796:	|        |      move.w d0,14(a0)
    279a:	|     ,--|----- bra.w 2c96 <CstPasteChar+0x85a>
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    279e:	|     |  '----> movea.w 10(sp),a1
    27a2:	|     |         movea.l 168(sp),a0
    27a6:	|     |         move.l (a0),d0
    27a8:	|     |         move.l a1,d1
    27aa:	|     |         add.l d0,d1
    27ac:	|     |         move.l 1c702 <winWidth>,d0
    27b2:	|     |         cmp.l d1,d0
    27b4:	|     |  ,----- bge.w 2a40 <CstPasteChar+0x604>

    if(x - single->width > (int) winWidth)
    27b8:	|     |  |      movea.w 10(sp),a1
    27bc:	|     |  |      movea.l 168(sp),a0
    27c0:	|     |  |      move.l (a0),d0
    27c2:	|     |  |      move.l a1,d1
    27c4:	|     |  |      sub.l d0,d1
    27c6:	|     |  |      move.l 1c702 <winWidth>,d0
    27cc:	|     |  |      cmp.l d1,d0
    27ce:	|     |  |  ,-- bge.s 27e2 <CstPasteChar+0x3a6>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    27d0:	|     |  |  |   pea 191f7 <PutChar+0x369>
    27d6:	|     |  |  |   jsr 183ec <KPrintF>
    27dc:	|     |  |  |   addq.l #4,sp
      return;
    27de:	+-----|--|--|-- bra.w 2e2e <CstPasteChar+0x9f2>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    27e2:	|     |  |  '-> clr.w 162(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    27e6:	|     |  |      movea.w 10(sp),a1
    27ea:	|     |  |      movea.l 168(sp),a0
    27ee:	|     |  |      move.l (a0),d0
    27f0:	|     |  |      add.l a1,d0
    27f2:	|     |  |      move.l d0,d1
    27f4:	|     |  |      move.l 1c702 <winWidth>,d0
    27fa:	|     |  |      sub.l d0,d1
    27fc:	|     |  |      move.l d1,d0
    27fe:	|     |  |      lsr.l #4,d0
    2800:	|     |  |      move.w d0,160(sp)
    cutmaskpixel = 0;
    2804:	|     |  |      clr.w 158(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    2808:	|     |  |      move.w #-1,156(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    280e:	|     |  |      movea.l 168(sp),a0
    2812:	|     |  |      move.l 24(a0),d0
    2816:	|     |  |      move.l d0,d2
    2818:	|     |  |      movea.l 168(sp),a0
    281c:	|     |  |      move.l (a0),d0
    281e:	|     |  |      move.l 132(sp),-(sp)
    2822:	|     |  |      move.l d0,-(sp)
    2824:	|     |  |      jsr 18d78 <__mulsi3>
    282a:	|     |  |      addq.l #8,sp
    282c:	|     |  |      lsr.l #3,d0
    282e:	|     |  |      move.l d2,d1
    2830:	|     |  |      add.l d0,d1
    2832:	|     |  |      move.l d1,152(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2836:	|     |  |      move.l 1c702 <winWidth>,d0
    283c:	|     |  |      move.l 136(sp),-(sp)
    2840:	|     |  |      move.l d0,-(sp)
    2842:	|     |  |      jsr 18d78 <__mulsi3>
    2848:	|     |  |      addq.l #8,sp
    284a:	|     |  |      lsr.l #3,d0
    284c:	|     |  |      move.l 108(sp),d1
    2850:	|     |  |      add.l d0,d1
    2852:	|     |  |      move.w 10(sp),d0
    2856:	|     |  |  ,-- bpl.s 285c <CstPasteChar+0x420>
    2858:	|     |  |  |   addi.w #15,d0
    285c:	|     |  |  '-> asr.w #4,d0
    285e:	|     |  |      movea.w d0,a0
    2860:	|     |  |      move.l a0,d0
    2862:	|     |  |      add.l a0,d0
    2864:	|     |  |      move.l d1,d2
    2866:	|     |  |      add.l d0,d2
    2868:	|     |  |      move.l d2,148(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    286c:	|     |  |      move.l 1c702 <winWidth>,d0
    2872:	|     |  |      move.l 136(sp),-(sp)
    2876:	|     |  |      move.l d0,-(sp)
    2878:	|     |  |      jsr 18d78 <__mulsi3>
    287e:	|     |  |      addq.l #8,sp
    2880:	|     |  |      lsr.l #3,d0
    2882:	|     |  |      move.l 108(sp),d1
    2886:	|     |  |      add.l d0,d1
    2888:	|     |  |      move.w 10(sp),d0
    288c:	|     |  |  ,-- bpl.s 2892 <CstPasteChar+0x456>
    288e:	|     |  |  |   addi.w #15,d0
    2892:	|     |  |  '-> asr.w #4,d0
    2894:	|     |  |      movea.w d0,a0
    2896:	|     |  |      move.l a0,d0
    2898:	|     |  |      add.l a0,d0
    289a:	|     |  |      move.l d1,d2
    289c:	|     |  |      add.l d0,d2
    289e:	|     |  |      move.l d2,144(sp)
    bltcon0 = ((single->width%16) << 12);    
    28a2:	|     |  |      movea.l 168(sp),a0
    28a6:	|     |  |      move.l (a0),d0
    28a8:	|     |  |      andi.l #-2147483633,d0
    28ae:	|     |  |  ,-- bpl.s 28b8 <CstPasteChar+0x47c>
    28b0:	|     |  |  |   subq.l #1,d0
    28b2:	|     |  |  |   moveq #-16,d1
    28b4:	|     |  |  |   or.l d1,d0
    28b6:	|     |  |  |   addq.l #1,d0
    28b8:	|     |  |  '-> moveq #12,d2
    28ba:	|     |  |      lsl.l d2,d0
    28bc:	|     |  |      move.l d0,140(sp)
    
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    28c0:	|     |  |      move.l 1c6e6 <CstCleanupQueueDrawBuffer>,76(sp)
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    28c8:	|     |  |      moveq #20,d0
    28ca:	|     |  |      move.l d0,72(sp)
    28ce:	|     |  |      clr.l 68(sp)
    28d2:	|     |  |      move.l 1c7ba <SysBase>,d0
    28d8:	|     |  |      movea.l d0,a6
    28da:	|     |  |      move.l 72(sp),d0
    28de:	|     |  |      move.l 68(sp),d1
    28e2:	|     |  |      jsr -684(a6)
    28e6:	|     |  |      move.l d0,64(sp)
    28ea:	|     |  |      move.l 64(sp),d0
    28ee:	|     |  |      move.l d0,1c6e6 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;
    28f4:	|     |  |      movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    28fa:	|     |  |      move.l 76(sp),16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    2900:	|     |  |      movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2906:	|     |  |      move.w 10(sp),d0
    290a:	|     |  |      move.w d0,(a0)
    CstCleanupQueueDrawBuffer->y = ystartdst;
    290c:	|     |  |      movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2912:	|     |  |      move.l 136(sp),d0
    2916:	|     |  |      move.w d0,2(a0)
    CstCleanupQueueDrawBuffer->person = NULL;
    291a:	|     |  |      movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2920:	|     |  |      clr.l 4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource;
    2924:	|     |  |      movea.l 168(sp),a0
    2928:	|     |  |      move.l (a0),d0
    292a:	|     |  |      movea.l d0,a0
    292c:	|     |  |      cmpa.w #0,a0
    2930:	|     |  |  ,-- bge.s 2936 <CstPasteChar+0x4fa>
    2932:	|     |  |  |   lea 15(a0),a0
    2936:	|     |  |  '-> move.l a0,d0
    2938:	|     |  |      asr.l #4,d0
    293a:	|     |  |      move.l d0,d0
    293c:	|     |  |      movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2942:	|     |  |      add.w 160(sp),d0
    2946:	|     |  |      move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    294a:	|     |  |      movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2950:	|     |  |      move.l 128(sp),d0
    2954:	|     |  |      move.w d0,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = (x/16)*2;
    2958:	|     |  |      move.w 10(sp),d0
    295c:	|     |  |  ,-- bpl.s 2962 <CstPasteChar+0x526>
    295e:	|     |  |  |   addi.w #15,d0
    2962:	|     |  |  '-> asr.w #4,d0
    2964:	|     |  |      movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    296a:	|     |  |      add.w d0,d0
    296c:	|     |  |      move.w d0,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    2970:	|     |  |      movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2976:	|     |  |      move.l 136(sp),d0
    297a:	|     |  |      move.w d0,14(a0)

    next = CstCleanupQueueViewBuffer;
    297e:	|     |  |      move.l 1c6e2 <CstCleanupQueueViewBuffer>,76(sp)
    CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2986:	|     |  |      moveq #20,d1
    2988:	|     |  |      move.l d1,60(sp)
    298c:	|     |  |      clr.l 56(sp)
    2990:	|     |  |      move.l 1c7ba <SysBase>,d0
    2996:	|     |  |      movea.l d0,a6
    2998:	|     |  |      move.l 60(sp),d0
    299c:	|     |  |      move.l 56(sp),d1
    29a0:	|     |  |      jsr -684(a6)
    29a4:	|     |  |      move.l d0,52(sp)
    29a8:	|     |  |      move.l 52(sp),d0
    29ac:	|     |  |      move.l d0,1c6e2 <CstCleanupQueueViewBuffer>
    CstCleanupQueueViewBuffer->next = next;
    29b2:	|     |  |      movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    29b8:	|     |  |      move.l 76(sp),16(a0)
    CstCleanupQueueViewBuffer->x = x;
    29be:	|     |  |      movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    29c4:	|     |  |      move.w 10(sp),d0
    29c8:	|     |  |      move.w d0,(a0)
    CstCleanupQueueViewBuffer->y = ystartdst;
    29ca:	|     |  |      movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    29d0:	|     |  |      move.l 136(sp),d0
    29d4:	|     |  |      move.w d0,2(a0)
    CstCleanupQueueViewBuffer->person = NULL;
    29d8:	|     |  |      movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    29de:	|     |  |      clr.l 4(a0)
    CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource;
    29e2:	|     |  |      movea.l 168(sp),a0
    29e6:	|     |  |      move.l (a0),d0
    29e8:	|     |  |      movea.l d0,a0
    29ea:	|     |  |      cmpa.w #0,a0
    29ee:	|     |  |  ,-- bge.s 29f4 <CstPasteChar+0x5b8>
    29f0:	|     |  |  |   lea 15(a0),a0
    29f4:	|     |  |  '-> move.l a0,d0
    29f6:	|     |  |      asr.l #4,d0
    29f8:	|     |  |      move.l d0,d0
    29fa:	|     |  |      movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    2a00:	|     |  |      add.w 160(sp),d0
    2a04:	|     |  |      move.w d0,8(a0)
    CstCleanupQueueViewBuffer->height = blitheight;
    2a08:	|     |  |      movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    2a0e:	|     |  |      move.l 128(sp),d0
    2a12:	|     |  |      move.w d0,10(a0)
    CstCleanupQueueViewBuffer->startxinbytes = (x/16)*2;
    2a16:	|     |  |      move.w 10(sp),d0
    2a1a:	|     |  |  ,-- bpl.s 2a20 <CstPasteChar+0x5e4>
    2a1c:	|     |  |  |   addi.w #15,d0
    2a20:	|     |  |  '-> asr.w #4,d0
    2a22:	|     |  |      movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    2a28:	|     |  |      add.w d0,d0
    2a2a:	|     |  |      move.w d0,12(a0)
    CstCleanupQueueViewBuffer->starty = ystartdst;     
    2a2e:	|     |  |      movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    2a34:	|     |  |      move.l 136(sp),d0
    2a38:	|     |  |      move.w d0,14(a0)
    2a3c:	|     +--|----- bra.w 2c96 <CstPasteChar+0x85a>
  } else { //Whole Sprite on Screen

    extrawords = 1;
    2a40:	|     |  '----> move.w #1,162(sp)
    cutwordssource = 0;
    2a46:	|     |         clr.w 160(sp)
    cutmaskpixel = 0;
    2a4a:	|     |         clr.w 158(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2a4e:	|     |         clr.w 156(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    2a52:	|     |         movea.l 168(sp),a0
    2a56:	|     |         move.l 24(a0),d0
    2a5a:	|     |         move.l d0,d2
    2a5c:	|     |         movea.l 168(sp),a0
    2a60:	|     |         move.l (a0),d0
    2a62:	|     |         movea.l d0,a0
    2a64:	|     |         cmpa.w #0,a0
    2a68:	|     |     ,-- bge.s 2a6e <CstPasteChar+0x632>
    2a6a:	|     |     |   lea 15(a0),a0
    2a6e:	|     |     '-> move.l a0,d0
    2a70:	|     |         asr.l #4,d0
    2a72:	|     |         move.l 132(sp),-(sp)
    2a76:	|     |         move.l d0,-(sp)
    2a78:	|     |         jsr 18d78 <__mulsi3>
    2a7e:	|     |         addq.l #8,sp
    2a80:	|     |         add.l d0,d0
    2a82:	|     |         move.l d2,d1
    2a84:	|     |         add.l d0,d1
    2a86:	|     |         move.l d1,152(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2a8a:	|     |         move.l 1c702 <winWidth>,d0
    2a90:	|     |         move.l 136(sp),-(sp)
    2a94:	|     |         move.l d0,-(sp)
    2a96:	|     |         jsr 18d78 <__mulsi3>
    2a9c:	|     |         addq.l #8,sp
    2a9e:	|     |         lsr.l #3,d0
    2aa0:	|     |         move.l 108(sp),d1
    2aa4:	|     |         add.l d0,d1
    2aa6:	|     |         move.w 10(sp),d0
    2aaa:	|     |     ,-- bpl.s 2ab0 <CstPasteChar+0x674>
    2aac:	|     |     |   addi.w #15,d0
    2ab0:	|     |     '-> asr.w #4,d0
    2ab2:	|     |         movea.w d0,a0
    2ab4:	|     |         move.l a0,d0
    2ab6:	|     |         add.l a0,d0
    2ab8:	|     |         move.l d1,d2
    2aba:	|     |         add.l d0,d2
    2abc:	|     |         move.l d2,148(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2ac0:	|     |         move.l 1c702 <winWidth>,d0
    2ac6:	|     |         move.l 136(sp),-(sp)
    2aca:	|     |         move.l d0,-(sp)
    2acc:	|     |         jsr 18d78 <__mulsi3>
    2ad2:	|     |         addq.l #8,sp
    2ad4:	|     |         lsr.l #3,d0
    2ad6:	|     |         move.l 108(sp),d1
    2ada:	|     |         add.l d0,d1
    2adc:	|     |         move.w 10(sp),d0
    2ae0:	|     |     ,-- bpl.s 2ae6 <CstPasteChar+0x6aa>
    2ae2:	|     |     |   addi.w #15,d0
    2ae6:	|     |     '-> asr.w #4,d0
    2ae8:	|     |         movea.w d0,a0
    2aea:	|     |         move.l a0,d0
    2aec:	|     |         add.l a0,d0
    2aee:	|     |         move.l d1,d2
    2af0:	|     |         add.l d0,d2
    2af2:	|     |         move.l d2,144(sp)
    bltcon0 = ((x%16) << 12);
    2af6:	|     |         move.w 10(sp),d0
    2afa:	|     |         andi.w #-32753,d0
    2afe:	|     |     ,-- bpl.s 2b08 <CstPasteChar+0x6cc>
    2b00:	|     |     |   subq.w #1,d0
    2b02:	|     |     |   ori.w #-16,d0
    2b06:	|     |     |   addq.w #1,d0
    2b08:	|     |     '-> ext.l d0
    2b0a:	|     |         moveq #12,d1
    2b0c:	|     |         lsl.l d1,d0
    2b0e:	|     |         move.l d0,140(sp)

    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2b12:	|     |         move.l 1c6e6 <CstCleanupQueueDrawBuffer>,104(sp)
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2b1a:	|     |         moveq #20,d2
    2b1c:	|     |         move.l d2,100(sp)
    2b20:	|     |         clr.l 96(sp)
    2b24:	|     |         move.l 1c7ba <SysBase>,d0
    2b2a:	|     |         movea.l d0,a6
    2b2c:	|     |         move.l 100(sp),d0
    2b30:	|     |         move.l 96(sp),d1
    2b34:	|     |         jsr -684(a6)
    2b38:	|     |         move.l d0,92(sp)
    2b3c:	|     |         move.l 92(sp),d0
    2b40:	|     |         move.l d0,1c6e6 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;
    2b46:	|     |         movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2b4c:	|     |         move.l 104(sp),16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    2b52:	|     |         movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2b58:	|     |         move.w 10(sp),d0
    2b5c:	|     |         move.w d0,(a0)
    CstCleanupQueueDrawBuffer->y = ystartdst;
    2b5e:	|     |         movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2b64:	|     |         move.l 136(sp),d0
    2b68:	|     |         move.w d0,2(a0)
    CstCleanupQueueDrawBuffer->person = NULL;
    2b6c:	|     |         movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2b72:	|     |         clr.l 4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    2b76:	|     |         movea.l 168(sp),a0
    2b7a:	|     |         move.l (a0),d0
    2b7c:	|     |         movea.l d0,a0
    2b7e:	|     |         cmpa.w #0,a0
    2b82:	|     |     ,-- bge.s 2b88 <CstPasteChar+0x74c>
    2b84:	|     |     |   lea 15(a0),a0
    2b88:	|     |     '-> move.l a0,d0
    2b8a:	|     |         asr.l #4,d0
    2b8c:	|     |         move.l d0,d0
    2b8e:	|     |         add.w 160(sp),d0
    2b92:	|     |         movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2b98:	|     |         add.w 162(sp),d0
    2b9c:	|     |         move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    2ba0:	|     |         movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2ba6:	|     |         move.l 128(sp),d0
    2baa:	|     |         move.w d0,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = (x/16)*2;
    2bae:	|     |         move.w 10(sp),d0
    2bb2:	|     |     ,-- bpl.s 2bb8 <CstPasteChar+0x77c>
    2bb4:	|     |     |   addi.w #15,d0
    2bb8:	|     |     '-> asr.w #4,d0
    2bba:	|     |         movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2bc0:	|     |         add.w d0,d0
    2bc2:	|     |         move.w d0,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    2bc6:	|     |         movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2bcc:	|     |         move.l 136(sp),d0
    2bd0:	|     |         move.w d0,14(a0)

    next = CstCleanupQueueViewBuffer;
    2bd4:	|     |         move.l 1c6e2 <CstCleanupQueueViewBuffer>,104(sp)
    CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2bdc:	|     |         moveq #20,d0
    2bde:	|     |         move.l d0,88(sp)
    2be2:	|     |         clr.l 84(sp)
    2be6:	|     |         move.l 1c7ba <SysBase>,d0
    2bec:	|     |         movea.l d0,a6
    2bee:	|     |         move.l 88(sp),d0
    2bf2:	|     |         move.l 84(sp),d1
    2bf6:	|     |         jsr -684(a6)
    2bfa:	|     |         move.l d0,80(sp)
    2bfe:	|     |         move.l 80(sp),d0
    2c02:	|     |         move.l d0,1c6e2 <CstCleanupQueueViewBuffer>
    CstCleanupQueueViewBuffer->next = next;
    2c08:	|     |         movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    2c0e:	|     |         move.l 104(sp),16(a0)
    CstCleanupQueueViewBuffer->x = x;
    2c14:	|     |         movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    2c1a:	|     |         move.w 10(sp),d0
    2c1e:	|     |         move.w d0,(a0)
    CstCleanupQueueViewBuffer->y = ystartdst;
    2c20:	|     |         movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    2c26:	|     |         move.l 136(sp),d0
    2c2a:	|     |         move.w d0,2(a0)
    CstCleanupQueueViewBuffer->person = NULL;
    2c2e:	|     |         movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    2c34:	|     |         clr.l 4(a0)
    CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    2c38:	|     |         movea.l 168(sp),a0
    2c3c:	|     |         move.l (a0),d0
    2c3e:	|     |         movea.l d0,a0
    2c40:	|     |         cmpa.w #0,a0
    2c44:	|     |     ,-- bge.s 2c4a <CstPasteChar+0x80e>
    2c46:	|     |     |   lea 15(a0),a0
    2c4a:	|     |     '-> move.l a0,d0
    2c4c:	|     |         asr.l #4,d0
    2c4e:	|     |         move.l d0,d0
    2c50:	|     |         add.w 160(sp),d0
    2c54:	|     |         movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    2c5a:	|     |         add.w 162(sp),d0
    2c5e:	|     |         move.w d0,8(a0)
    CstCleanupQueueViewBuffer->height = blitheight;
    2c62:	|     |         movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    2c68:	|     |         move.l 128(sp),d0
    2c6c:	|     |         move.w d0,10(a0)
    CstCleanupQueueViewBuffer->startxinbytes = (x/16)*2;
    2c70:	|     |         move.w 10(sp),d0
    2c74:	|     |     ,-- bpl.s 2c7a <CstPasteChar+0x83e>
    2c76:	|     |     |   addi.w #15,d0
    2c7a:	|     |     '-> asr.w #4,d0
    2c7c:	|     |         movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    2c82:	|     |         add.w d0,d0
    2c84:	|     |         move.w d0,12(a0)
    CstCleanupQueueViewBuffer->starty = ystartdst;    
    2c88:	|     |         movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    2c8e:	|     |         move.l 136(sp),d0
    2c92:	|     |         move.w d0,14(a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    2c96:	|     '-------> moveq #0,d0
    2c98:	|               move.w 158(sp),d0
    2c9c:	|               moveq #0,d1
    2c9e:	|               not.w d1
    2ca0:	|               asr.l d0,d1
    2ca2:	|               move.w d1,22(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2ca6:	|               moveq #0,d1
    2ca8:	|               move.w 160(sp),d1
    2cac:	|               moveq #0,d0
    2cae:	|               move.w 162(sp),d0
    2cb2:	|               sub.l d0,d1
    2cb4:	|               move.l d1,d0
    2cb6:	|               add.w d0,d0
    2cb8:	|               move.w d0,20(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2cbc:	|               move.l 1c702 <winWidth>,d0
    2cc2:	|               lsr.l #3,d0
    2cc4:	|               move.l d0,d2
    2cc6:	|               move.w 160(sp),d1
    2cca:	|               sub.w 162(sp),d1
    2cce:	|               move.l 124(sp),d0
    2cd2:	|               sub.w d0,d1
    2cd4:	|               move.w d1,d0
    2cd6:	|               add.w d1,d0
    2cd8:	|               add.w d2,d0
    2cda:	|               move.w d0,18(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2cde:	|               move.l 1c702 <winWidth>,d0
    2ce4:	|               lsr.l #3,d0
    2ce6:	|               move.l d0,d2
    2ce8:	|               move.w 160(sp),d1
    2cec:	|               sub.w 162(sp),d1
    2cf0:	|               move.l 124(sp),d0
    2cf4:	|               sub.w d0,d1
    2cf6:	|               move.w d1,d0
    2cf8:	|               add.w d1,d0
    2cfa:	|               add.w d2,d0
    2cfc:	|               move.w d0,16(sp)

  WaitBlit();
    2d00:	|               move.l 1c7c6 <GfxBase>,d0
    2d06:	|               movea.l d0,a6
    2d08:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    2d0c:	|               movea.l 112(sp),a0
    2d10:	|               move.w 22(sp),68(a0)
  custom->bltalwm = bltalwm;
    2d16:	|               movea.l 112(sp),a0
    2d1a:	|               move.w 156(sp),70(a0)
  custom->bltamod = bltamod;
    2d20:	|               move.w 20(sp),d0
    2d24:	|               movea.l 112(sp),a0
    2d28:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    2d2c:	|               move.w 18(sp),d0
    2d30:	|               movea.l 112(sp),a0
    2d34:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    2d38:	|               move.w 16(sp),d0
    2d3c:	|               movea.l 112(sp),a0
    2d40:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    2d44:	|               move.l 1c702 <winWidth>,d0
    2d4a:	|               lsr.l #3,d0
    2d4c:	|               move.l d0,d1
    2d4e:	|               move.l 1c706 <winHeight>,d0
    2d54:	|               move.l d0,d0
    2d56:	|               move.w d1,d2
    2d58:	|               muls.w d0,d2
    2d5a:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    2d5e:	|               move.w 1c6c6 <textPaletteIndex>,122(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    2d66:	|               move.w 122(sp),d0
    2d6a:	|               andi.w #1,d0
    2d6e:	|               move.w d0,12(sp)
  if(tmp2) {
    2d72:	|        ,----- beq.s 2d7c <CstPasteChar+0x940>
    minterm = 0xbfa;
    2d74:	|        |      move.w #3066,120(sp)
    2d7a:	|        |  ,-- bra.s 2d82 <CstPasteChar+0x946>
  } else {
    minterm = 0xb0a;
    2d7c:	|        '--|-> move.w #2826,120(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2d82:	|           '-> clr.l 116(sp)
    2d86:	|     ,-------- bra.w 2e24 <CstPasteChar+0x9e8>
  {

    custom->bltcon0 = bltcon0 + minterm;
    2d8a:	|  ,--|-------> move.l 140(sp),d0
    2d8e:	|  |  |         add.w 120(sp),d0
    2d92:	|  |  |         movea.l 112(sp),a0
    2d96:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    2d9a:	|  |  |         move.l 152(sp),d0
    2d9e:	|  |  |         movea.l 112(sp),a0
    2da2:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    2da6:	|  |  |         move.l 148(sp),d0
    2daa:	|  |  |         movea.l 112(sp),a0
    2dae:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    2db2:	|  |  |         move.l 144(sp),d0
    2db6:	|  |  |         movea.l 112(sp),a0
    2dba:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    2dbe:	|  |  |         move.l 128(sp),d0
    2dc2:	|  |  |         lsl.w #6,d0
    2dc4:	|  |  |         move.l 124(sp),d1
    2dc8:	|  |  |         add.w d1,d0
    2dca:	|  |  |         sub.w 160(sp),d0
    2dce:	|  |  |         add.w 162(sp),d0
    2dd2:	|  |  |         movea.l 112(sp),a0
    2dd6:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    2dda:	|  |  |         moveq #0,d0
    2ddc:	|  |  |         move.w 14(sp),d0
    2de0:	|  |  |         add.l d0,148(sp)
    bltdpt += bltcptplus;
    2de4:	|  |  |         moveq #0,d0
    2de6:	|  |  |         move.w 14(sp),d0
    2dea:	|  |  |         add.l d0,144(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    2dee:	|  |  |         move.w 122(sp),d0
    2df2:	|  |  |         lsr.w #1,d0
    2df4:	|  |  |         move.w d0,122(sp)
    tmp2 = tmp & 0x01;
    2df8:	|  |  |         move.w 122(sp),d1
    2dfc:	|  |  |         andi.w #1,d1
    2e00:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    2e04:	|  |  |  ,----- beq.s 2e0e <CstPasteChar+0x9d2>
      minterm = 0xbfa;
    2e06:	|  |  |  |      move.w #3066,120(sp)
    2e0c:	|  |  |  |  ,-- bra.s 2e14 <CstPasteChar+0x9d8>
    } else {
      minterm = 0xb0a;
    2e0e:	|  |  |  '--|-> move.w #2826,120(sp)
    }   

    WaitBlit();     
    2e14:	|  |  |     '-> move.l 1c7c6 <GfxBase>,d0
    2e1a:	|  |  |         movea.l d0,a6
    2e1c:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2e20:	|  |  |         addq.l #1,116(sp)
    2e24:	|  |  '-------> moveq #4,d2
    2e26:	|  |            cmp.l 116(sp),d2
    2e2a:	|  '----------- bge.w 2d8a <CstPasteChar+0x94e>
  }   
  //custom->color[0] = 0x000;
}
    2e2e:	'-------------> move.l (sp)+,d2
    2e30:	                movea.l (sp)+,a6
    2e32:	                lea 156(sp),sp
    2e36:	                rts

00002e38 <CstRestoreScreen>:


void CstRestoreScreen()
{
    2e38:	                   lea -36(sp),sp
    2e3c:	                   move.l a6,-(sp)
    2e3e:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    2e40:	                   move.l #14675968,16(sp)
  //custom->color[0] = 0xf00;
  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    2e48:	                   move.l 1c6e6 <CstCleanupQueueDrawBuffer>,d0
    2e4e:	,----------------- beq.w 30ae <CstRestoreScreen+0x276>
    2e52:	|                  move.l 1c6de <CstDrawBuffer>,d0
    2e58:	+----------------- beq.w 30ae <CstRestoreScreen+0x276>
    return;
  } 

  UWORD *colorpos = CstPalette;
    2e5c:	|                  move.l 1c6ee <CstPalette>,40(sp)
  UWORD *tmp = CstClColor;
    2e64:	|                  move.l 1c6ea <CstClColor>,36(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    2e6c:	|                  clr.l 32(sp)
    2e70:	|              ,-- bra.s 2ea2 <CstRestoreScreen+0x6a>
    *tmp++;
    2e72:	|           ,--|-> move.l 36(sp),d0
    2e76:	|           |  |   move.l d0,d1
    2e78:	|           |  |   addq.l #2,d1
    2e7a:	|           |  |   move.l d1,36(sp)
    *tmp++ = *colorpos++;
    2e7e:	|           |  |   move.l 40(sp),d1
    2e82:	|           |  |   move.l d1,d2
    2e84:	|           |  |   addq.l #2,d2
    2e86:	|           |  |   move.l d2,40(sp)
    2e8a:	|           |  |   move.l 36(sp),d0
    2e8e:	|           |  |   move.l d0,d2
    2e90:	|           |  |   addq.l #2,d2
    2e92:	|           |  |   move.l d2,36(sp)
    2e96:	|           |  |   movea.l d1,a0
    2e98:	|           |  |   move.w (a0),d1
    2e9a:	|           |  |   movea.l d0,a0
    2e9c:	|           |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    2e9e:	|           |  |   addq.l #1,32(sp)
    2ea2:	|           |  '-> moveq #31,d0
    2ea4:	|           |      cmp.l 32(sp),d0
    2ea8:	|           '----- bge.s 2e72 <CstRestoreScreen+0x3a>
  }

  WaitBlit();
    2eaa:	|                  move.l 1c7c6 <GfxBase>,d0
    2eb0:	|                  movea.l d0,a6
    2eb2:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    2eb6:	|                  movea.l 16(sp),a0
    2eba:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    2ec0:	|                  movea.l 16(sp),a0
    2ec4:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    2eca:	|                  movea.l 16(sp),a0
    2ece:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    2ed4:	|     ,----------- bra.w 30a2 <CstRestoreScreen+0x26a>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3
    2ed8:	|  ,--|----------> movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2ede:	|  |  |            move.l 4(a0),d0
    2ee2:	|  |  |     ,----- beq.s 2ef8 <CstRestoreScreen+0xc0>
    2ee4:	|  |  |     |      movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2eea:	|  |  |     |      movea.l 4(a0),a0
    2eee:	|  |  |     |      move.l 16(a0),d0
    2ef2:	|  |  |     |      moveq #2,d1
    2ef4:	|  |  |     |      cmp.l d0,d1
    2ef6:	|  |  |     |  ,-- bge.s 2f06 <CstRestoreScreen+0xce>
      || CstCleanupQueueDrawBuffer->person == NULL)
    2ef8:	|  |  |     '--|-> movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2efe:	|  |  |        |   move.l 4(a0),d0
    2f02:	|  |  |  ,-----|-- bne.w 3070 <CstRestoreScreen+0x238>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2f06:	|  |  |  |     '-> move.l 1c702 <winWidth>,d0
    2f0c:	|  |  |  |         lsr.l #3,d0
    2f0e:	|  |  |  |         move.l d0,d1
    2f10:	|  |  |  |         movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2f16:	|  |  |  |         move.w 8(a0),d0
    2f1a:	|  |  |  |         add.w d0,d0
    2f1c:	|  |  |  |         sub.w d0,d1
    2f1e:	|  |  |  |         movea.l 16(sp),a0
    2f22:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2f26:	|  |  |  |         move.l 1c702 <winWidth>,d0
    2f2c:	|  |  |  |         lsr.l #3,d0
    2f2e:	|  |  |  |         move.l d0,d1
    2f30:	|  |  |  |         movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2f36:	|  |  |  |         move.w 8(a0),d0
    2f3a:	|  |  |  |         add.w d0,d0
    2f3c:	|  |  |  |         sub.w d0,d1
    2f3e:	|  |  |  |         movea.l 16(sp),a0
    2f42:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2f46:	|  |  |  |         movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2f4c:	|  |  |  |         move.w 14(a0),d0
    2f50:	|  |  |  |         move.w d0,d0
    2f52:	|  |  |  |         andi.l #65535,d0
    2f58:	|  |  |  |         move.l 1c702 <winWidth>,d1
    2f5e:	|  |  |  |         move.l d1,-(sp)
    2f60:	|  |  |  |         move.l d0,-(sp)
    2f62:	|  |  |  |         jsr 18d78 <__mulsi3>
    2f68:	|  |  |  |         addq.l #8,sp
    2f6a:	|  |  |  |         move.l d0,d1
    2f6c:	|  |  |  |         lsr.l #3,d1
    2f6e:	|  |  |  |         move.l 1c6ce <CstBackDrop>,d0
    2f74:	|  |  |  |         add.l d0,d1
    2f76:	|  |  |  |         movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2f7c:	|  |  |  |         move.w 12(a0),d0
    2f80:	|  |  |  |         move.w d0,d0
    2f82:	|  |  |  |         andi.l #65535,d0
    2f88:	|  |  |  |         move.l d1,d2
    2f8a:	|  |  |  |         add.l d0,d2
    2f8c:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2f90:	|  |  |  |         movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2f96:	|  |  |  |         move.w 14(a0),d0
    2f9a:	|  |  |  |         move.w d0,d0
    2f9c:	|  |  |  |         andi.l #65535,d0
    2fa2:	|  |  |  |         move.l 1c702 <winWidth>,d1
    2fa8:	|  |  |  |         move.l d1,-(sp)
    2faa:	|  |  |  |         move.l d0,-(sp)
    2fac:	|  |  |  |         jsr 18d78 <__mulsi3>
    2fb2:	|  |  |  |         addq.l #8,sp
    2fb4:	|  |  |  |         move.l d0,d1
    2fb6:	|  |  |  |         lsr.l #3,d1
    2fb8:	|  |  |  |         move.l 1c6de <CstDrawBuffer>,d0
    2fbe:	|  |  |  |         add.l d0,d1
    2fc0:	|  |  |  |         movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    2fc6:	|  |  |  |         move.w 12(a0),d0
    2fca:	|  |  |  |         move.w d0,d0
    2fcc:	|  |  |  |         andi.l #65535,d0
    2fd2:	|  |  |  |         move.l d1,d2
    2fd4:	|  |  |  |         add.l d0,d2
    2fd6:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2fda:	|  |  |  |         clr.l 20(sp)
    2fde:	|  |  |  |     ,-- bra.w 3066 <CstRestoreScreen+0x22e>
      {
        custom->bltapt = (APTR) bltapt;
    2fe2:	|  |  |  |  ,--|-> move.l 28(sp),d0
    2fe6:	|  |  |  |  |  |   movea.l 16(sp),a0
    2fea:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    2fee:	|  |  |  |  |  |   move.l 24(sp),d0
    2ff2:	|  |  |  |  |  |   movea.l 16(sp),a0
    2ff6:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    2ffa:	|  |  |  |  |  |   movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    3000:	|  |  |  |  |  |   move.w 10(a0),d0
    3004:	|  |  |  |  |  |   lsl.w #6,d0
    3006:	|  |  |  |  |  |   movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    300c:	|  |  |  |  |  |   move.w 8(a0),d1
    3010:	|  |  |  |  |  |   add.w d1,d0
    3012:	|  |  |  |  |  |   movea.l 16(sp),a0
    3016:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    301a:	|  |  |  |  |  |   move.l 1c702 <winWidth>,d0
    3020:	|  |  |  |  |  |   lsr.l #3,d0
    3022:	|  |  |  |  |  |   move.l 1c706 <winHeight>,d1
    3028:	|  |  |  |  |  |   move.l d1,-(sp)
    302a:	|  |  |  |  |  |   move.l d0,-(sp)
    302c:	|  |  |  |  |  |   jsr 18d78 <__mulsi3>
    3032:	|  |  |  |  |  |   addq.l #8,sp
    3034:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    3038:	|  |  |  |  |  |   move.l 1c702 <winWidth>,d0
    303e:	|  |  |  |  |  |   lsr.l #3,d0
    3040:	|  |  |  |  |  |   move.l 1c706 <winHeight>,d1
    3046:	|  |  |  |  |  |   move.l d1,-(sp)
    3048:	|  |  |  |  |  |   move.l d0,-(sp)
    304a:	|  |  |  |  |  |   jsr 18d78 <__mulsi3>
    3050:	|  |  |  |  |  |   addq.l #8,sp
    3052:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    3056:	|  |  |  |  |  |   move.l 1c7c6 <GfxBase>,d0
    305c:	|  |  |  |  |  |   movea.l d0,a6
    305e:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    3062:	|  |  |  |  |  |   addq.l #1,20(sp)
    3066:	|  |  |  |  |  '-> moveq #4,d0
    3068:	|  |  |  |  |      cmp.l 20(sp),d0
    306c:	|  |  |  |  '----- bge.w 2fe2 <CstRestoreScreen+0x1aa>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    3070:	|  |  |  '-------> move.l 1c6e6 <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    3078:	|  |  |            movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    307e:	|  |  |            move.l 16(a0),d0
    3082:	|  |  |            move.l d0,1c6e6 <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    3088:	|  |  |            move.l 12(sp),8(sp)
    308e:	|  |  |            move.l 1c7ba <SysBase>,d0
    3094:	|  |  |            movea.l d0,a6
    3096:	|  |  |            movea.l 8(sp),a1
    309a:	|  |  |            jsr -690(a6)
    todelete = NULL;
    309e:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    30a2:	|  |  '----------> move.l 1c6e6 <CstCleanupQueueDrawBuffer>,d0
    30a8:	|  '-------------- bne.w 2ed8 <CstRestoreScreen+0xa0>
    30ac:	|              ,-- bra.s 30b0 <CstRestoreScreen+0x278>
    return;
    30ae:	'--------------|-> nop
  }
  //custom->color[0] = 0x000;
}
    30b0:	               '-> move.l (sp)+,d2
    30b2:	                   movea.l (sp)+,a6
    30b4:	                   lea 36(sp),sp
    30b8:	                   rts

000030ba <CstScaleSprite>:

__attribute__((optimize("Ofast"))) 
void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    30ba:	                                                                                           lea -40(sp),sp
    30be:	                                                                                           movem.l d2-d7/a2-a6,-(sp)
    30c2:	                                                                                           movea.l 88(sp),a2
    30c6:	                                                                                           move.l 92(sp),64(sp)
    30cc:	                                                                                           move.l 96(sp),d4
    30d0:	                                                                                           movea.l 100(sp),a3
    30d4:	                                                                                           move.w d4,d2
    30d6:	                                                                                           move.w a3,d3
    30d8:	                                                                                           move.w 106(sp),52(sp)
  if( single->width == 320)
  {
    single->width = 320;
  }

  UBYTE *mask = CstDrawZBuffer( single, zBuffer, x, y);
    30de:	                                                                                           movea.w a3,a5
    30e0:	                                                                                           movea.w d4,a6
    30e2:	                                                                                           move.l a5,-(sp)
    30e4:	                                                                                           move.l a6,-(sp)
    30e6:	                                                                                           move.l 1c816 <zBuffer>,-(sp)
    30ec:	                                                                                           move.l a2,-(sp)
    30ee:	                                                                                           jsr 1516 <CstDrawZBuffer>
    30f4:	                                                                                           move.l d0,d5

  UWORD *destination = 0;
  switch(destinationtype)
    30f6:	                                                                                           lea 16(sp),sp
    30fa:	                                                                                           cmpi.w #1,52(sp)
    3100:	                                                            ,----------------------------- beq.w 35e0 <CstScaleSprite+0x526>
    3104:	                                                            |                              cmpi.w #2,52(sp)
    310a:	                                                            |                 ,----------- beq.w 343e <CstScaleSprite+0x384>
    310e:	                                                            |                 |            suba.l a4,a4
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    if(y + single->height < 0) {
    3110:	                                                            |  ,--------------|----------> move.l 4(a2),d1
    3114:	                                                            |  |              |            move.l a5,d0
    3116:	                                                            |  |              |            add.l d1,d0
  if( y < 0) {
    3118:	                                                            |  |              |            tst.w d3
    311a:	                                                            |  |           ,--|----------- blt.w 3452 <CstScaleSprite+0x398>
      return;
    }
    ystartdst = 0;
    ystartsrc = y*-1;
    blitheight = single->height+y;
  } else if(y+single->height > (int) winHeight) {
    311e:	                                                            |  |           |  |  ,-------> movea.l 1c706 <winHeight>,a0
    3124:	                                                            |  |           |  |  |         cmp.l a0,d0
    3126:	                                                            |  |  ,--------|--|--|-------- ble.w 35ea <CstScaleSprite+0x530>
    if(y  > (int) winHeight) {
    312a:	                                                            |  |  |        |  |  |         cmpa.l a5,a0
    312c:	                     ,--------------------------------------|--|--|--------|--|--|-------- blt.w 371c <CstScaleSprite+0x662>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    ystartdst = y;
    3130:	                     |                                      |  |  |        |  |  |         move.l a5,d7
    ystartsrc = 0;
    blitheight = winHeight-y;
    3132:	                     |                                      |  |  |        |  |  |         suba.l a5,a0
    3134:	                     |                                      |  |  |        |  |  |         move.l a0,48(sp)
    ystartsrc = 0;
    3138:	                     |                                      |  |  |        |  |  |         moveq #0,d3


  if( x < 0) 
  { //Leftmost part outside screen

    if(x + single->width < 0) {
    313a:	                     |                                      |  |  |  ,-----|--|--|-------> move.l (a2),d1
    313c:	                     |                                      |  |  |  |     |  |  |         move.l a6,d0
    313e:	                     |                                      |  |  |  |     |  |  |         add.l d1,d0
  if( x < 0) 
    3140:	                     |                                      |  |  |  |     |  |  |         tst.w d2
    3142:	                     |                                      |  |  |  |     |  |  |  ,----- blt.w 346e <CstScaleSprite+0x3b4>
      CstCleanupQueueViewBuffer->height = blitheight; 
      CstCleanupQueueViewBuffer->startxinbytes = 0; 
      CstCleanupQueueViewBuffer->starty = ystartdst;  
    }           
  } 
  else if(x + single->width > (int) winWidth) 
    3146:	                     |                                      |  |  |  |     |  |  |  |  ,-> movea.l 1c702 <winWidth>,a5
    314c:	                     |                                      |  |  |  |     |  |  |  |  |   cmp.l a5,d0
    314e:	                     |                                      |  |  |  |  ,--|--|--|--|--|-- ble.w 35f6 <CstScaleSprite+0x53c>
  { //Rightmost part outside screen   

    if(x - single->width > (int) winWidth)
    3152:	                     |                                      |  |  |  |  |  |  |  |  |  |   suba.l d1,a6
    3154:	                     |                                      |  |  |  |  |  |  |  |  |  |   cmpa.l a5,a6
    3156:	                     +--------------------------------------|--|--|--|--|--|--|--|--|--|-- bgt.w 371c <CstScaleSprite+0x662>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    cutwordssource = (x+single->width - winWidth)/16;
    315a:	                     |                                      |  |  |  |  |  |  |  |  |  |   sub.l a5,d0
    315c:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #4,d0
    315e:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,56(sp)
    3162:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d0,d6
    cutmaskpixel = 0;    
    bltapt = ((ULONG) mask)+ystartsrc*single->width/8;
    3164:	                     |                                      |  |  |  |  |  |  |  |  |  |   lea 18d78 <__mulsi3>,a6
    316a:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d3,-(sp)
    316c:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,-(sp)
    316e:	                     |                                      |  |  |  |  |  |  |  |  |  |   jsr (a6)
    3170:	                     |                                      |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    3172:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    3174:	                     |                                      |  |  |  |  |  |  |  |  |  |   add.l d0,d5
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    3176:	                     |                                      |  |  |  |  |  |  |  |  |  |   add.l 24(a2),d0
    317a:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,60(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    317e:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,d2
    3180:	                     |                                      |  |  |  |  |  |  |  |  |  |   asr.w #4,d2
    3182:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d7,-(sp)
    3184:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l a5,-(sp)
    3186:	                     |                                      |  |  |  |  |  |  |  |  |  |   jsr (a6)
    3188:	                     |                                      |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    318a:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    318c:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.w d2,a0
    318e:	                     |                                      |  |  |  |  |  |  |  |  |  |   adda.l a0,a0
    3190:	                     |                                      |  |  |  |  |  |  |  |  |  |   adda.l a0,a4
    3192:	                     |                                      |  |  |  |  |  |  |  |  |  |   lea (0,a4,d0.l),a5
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    bltcon0 = 0xfca + ((x%16) << 12);
    3196:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,d3
    3198:	                     |                                      |  |  |  |  |  |  |  |  |  |   andi.w #15,d3
    319c:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d3,76(sp)
    31a0:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #15,d0
    31a2:	                     |                                      |  |  |  |  |  |  |  |  |  |   and.l d4,d0
    31a4:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,d1
    31a6:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #12,d3
    31a8:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsl.l d3,d1
    31aa:	                     |                                      |  |  |  |  |  |  |  |  |  |   addi.l #4042,d1
    31b0:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,72(sp)
    bltcon1 = ((x%16) << 12);
    bltalwm = 0xffff << (x%16); 
    31b4:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l #65535,a4
    31ba:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l a4,d1
    31bc:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsl.l d0,d1
    31be:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l d1,a4

    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    31c0:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l 1c6e6 <CstCleanupQueueDrawBuffer>,d3
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    31c6:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l #116666,68(sp)
    31ce:	                     |                                      |  |  |  |  |  |  |  |  |  |   lea 1c7ba <SysBase>,a0
    31d4:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    31d6:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #20,d0
    31d8:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #0,d1
    31da:	                     |                                      |  |  |  |  |  |  |  |  |  |   jsr -684(a6)
    31de:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l d0,a0
    31e0:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,1c6e6 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    31e6:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d3,16(a0)

    CstCleanupQueueDrawBuffer->x = x;
    31ea:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    31ec:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w a3,2(a0)
    CstCleanupQueueDrawBuffer->person = person; 
    31f0:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    31f6:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l (a2),d1
    31f8:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    31fa:	         ,-----------|--------------------------------------|--|--|--|--|--|--|--|--|--|-- bmi.w 39f8 <CstScaleSprite+0x93e>
    31fe:	         |           |                                      |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    3200:	         |           |                                      |  |  |  |  |  |  |  |  |  |   movea.w 58(sp),a1
    3204:	         |           |                                      |  |  |  |  |  |  |  |  |  |   adda.w d0,a1
    3206:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w a1,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    320a:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 50(sp),d3
    320e:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3212:	         |           |                                      |  |  |  |  |  |  |  |  |  |   add.w d2,d2
    3214:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d2,78(sp)
    3218:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d2,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    321c:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,48(sp)
    3220:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,14(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;
    } 
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3224:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 58(sp),d7
    3228:	         |           |                                      |  |  |  |  |  |  |  |  |  |   add.w d7,d7
  custom->bltalwm = bltalwm;
  custom->bltamod = bltamod;
  custom->bltbmod = bltbmod;
  custom->bltcmod = bltcmod;
  custom->bltdmod = bltdmod;
  custom->bltcon0 = bltcon0;
    322a:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 74(sp),72(sp)
  custom->bltcon1 = bltcon1;  
    3230:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 76(sp),d2
    3234:	         |           |                                      |  |  |  |  |  |  |  |  |  |   moveq #12,d0
    3236:	         |           |                                      |  |  |  |  |  |  |  |  |  |   lsl.w d0,d2
    3238:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d2,76(sp)
    if( destinationtype != SCREEN)
    323c:	         |           |                                      |  |  |  |  |  |  |  |  |  |   cmpi.w #1,52(sp)
    3242:	      ,--|-----------|--------------------------------------|--|--|--|--|--|--|--|--|--|-- beq.w 3a68 <CstScaleSprite+0x9ae>
      next = CstCleanupQueueViewBuffer;
    3246:	      |  |  ,--------|--------------------------------------|--|--|--|--|--|--|--|--|--|-> move.l 1c6e2 <CstCleanupQueueViewBuffer>,d2
      CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    324c:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.l 68(sp),a0
    3250:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    3252:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   moveq #20,d0
    3254:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   moveq #0,d1
    3256:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   jsr -684(a6)
    325a:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.l d0,a0
    325c:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,1c6e2 <CstCleanupQueueViewBuffer>
      CstCleanupQueueViewBuffer->next = next;   
    3262:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l d2,16(a0)
      CstCleanupQueueViewBuffer->x = x;
    3266:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,(a0)
      CstCleanupQueueViewBuffer->y = y;
    3268:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w a3,2(a0)
      CstCleanupQueueViewBuffer->person = person; 
    326c:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource;
    3272:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l (a2),d1
    3274:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    3276:	   ,--|--|--|--------|--------------------------------------|--|--|--|--|--|--|--|--|--|-- bmi.w 3ab2 <CstScaleSprite+0x9f8>
    327a:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    327c:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.w 58(sp),a1
    3280:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   adda.w d0,a1
    3282:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w a1,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight;
    3286:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    328a:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w 78(sp),12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst; 
    3290:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w 48(sp),14(a0)
    3296:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w #-1,50(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    329c:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    329e:	,--|--|--|--|--------|--------------------------------------|--|--|--|--|--|--|--|--|--|-> move.l 1c702 <winWidth>,d0
    32a4:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    32a6:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,d4
    32a8:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   add.w d0,d4
    32aa:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   tst.l d1
    32ac:	|  |  |  |  |  ,-----|--------------------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 37f8 <CstScaleSprite+0x73e>
    32b0:	|  |  |  |  |  |  ,--|--------------------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #3,d1
    32b2:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   sub.w d1,d4
  WaitBlit();
    32b4:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   lea 1c7c6 <GfxBase>,a3
    32ba:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    32bc:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  custom->bltafwm = bltafwm;
    32c0:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w 50(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb26ed>
  custom->bltalwm = bltalwm;
    32c8:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w a4,dff046 <gcc8_c_support.c.c60c1f2b+0xdb26ef>
  custom->bltamod = bltamod;
    32ce:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,dff064 <gcc8_c_support.c.c60c1f2b+0xdb270d>
  custom->bltbmod = bltbmod;
    32d4:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,dff062 <gcc8_c_support.c.c60c1f2b+0xdb270b>
  custom->bltcmod = bltcmod;
    32da:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,dff060 <gcc8_c_support.c.c60c1f2b+0xdb2709>
  custom->bltdmod = bltdmod;
    32e0:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,dff066 <gcc8_c_support.c.c60c1f2b+0xdb270f>
  custom->bltcon0 = bltcon0;
    32e6:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w 72(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb26e9>
  custom->bltcon1 = bltcon1;  
    32ee:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w 76(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb26eb>

  UWORD bltbptplus = (single->width >> 3)*single->height;
    32f6:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
  {
    custom->bltapt = (APTR) bltapt;
    custom->bltbpt = (APTR) bltbpt;
    custom->bltcpt = (APTR) bltcpt;
    custom->bltdpt = (APTR) bltdpt;
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    32f8:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   lsl.w #6,d3
  UWORD bltbptplus = (single->width >> 3)*single->height;
    32fa:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,d7
    32fc:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   asr.l #3,d7
    32fe:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   muls.w 6(a2),d7
    bltbpt += bltbptplus;
    3302:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   andi.l #65535,d7
  UWORD bltcptplus = winWidth/8*winHeight;
    3308:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l 1c702 <winWidth>,d4
    330e:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d4
    3310:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   muls.w 1c708 <winHeight+0x2>,d4
    bltcpt += bltcptplus;
    3316:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   andi.l #65535,d4
    custom->bltapt = (APTR) bltapt;
    331c:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb26f9>
    custom->bltbpt = (APTR) bltbpt;
    3322:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l 60(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb26f5>
    custom->bltcpt = (APTR) bltcpt;
    332a:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb26f1>
    custom->bltdpt = (APTR) bltdpt;
    3330:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb26fd>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3336:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   tst.l d0
    3338:	|  |  |  |  |  |  |  |                       ,--------------|--|--|--|--|--|--|--|--|--|-- blt.w 3886 <CstScaleSprite+0x7cc>
    333c:	|  |  |  |  |  |  |  |                       |     ,--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    333e:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    3340:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   add.w d3,d0
    3342:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    3344:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2701>
    bltbpt += bltbptplus;
    334a:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   movea.l 60(sp),a4
    334e:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   adda.l d7,a4
    bltcpt += bltcptplus;
    3350:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    bltdpt += bltcptplus;
    WaitBlit();
    3352:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    3354:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3358:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    335a:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb26f9>
    custom->bltbpt = (APTR) bltbpt;
    3360:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb26f5>
    custom->bltcpt = (APTR) bltcpt;
    3366:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb26f1>
    custom->bltdpt = (APTR) bltdpt;
    336c:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb26fd>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3372:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    3374:	|  |  |  |  |  |  |  |                 ,-----|-----|--------|--|--|--|--|--|--|--|--|--|-- blt.w 38c6 <CstScaleSprite+0x80c>
    3378:	|  |  |  |  |  |  |  |                 |     |  ,--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    337a:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    337c:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d3,d0
    337e:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    3380:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2701>
    bltbpt += bltbptplus;
    3386:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d7,a4
    bltcpt += bltcptplus;
    3388:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    WaitBlit();
    338a:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    338c:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3390:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3392:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb26f9>
    custom->bltbpt = (APTR) bltbpt;
    3398:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb26f5>
    custom->bltcpt = (APTR) bltcpt;
    339e:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb26f1>
    custom->bltdpt = (APTR) bltdpt;
    33a4:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb26fd>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    33aa:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    33ac:	|  |  |  |  |  |  |  |           ,-----|-----|--|--|--------|--|--|--|--|--|--|--|--|--|-- blt.w 3902 <CstScaleSprite+0x848>
    33b0:	|  |  |  |  |  |  |  |           |     |  ,--|--|--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    33b2:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    33b4:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d3,d0
    33b6:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    33b8:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2701>
    bltbpt += bltbptplus;
    33be:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d7,a4
    bltcpt += bltcptplus;
    33c0:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    WaitBlit();
    33c2:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    33c4:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    33c8:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    33ca:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb26f9>
    custom->bltbpt = (APTR) bltbpt;
    33d0:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb26f5>
    custom->bltcpt = (APTR) bltcpt;
    33d6:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb26f1>
    custom->bltdpt = (APTR) bltdpt;
    33dc:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb26fd>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    33e2:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    33e4:	|  |  |  |  |  |  |  |     ,-----|-----|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- blt.w 393e <CstScaleSprite+0x884>
    33e8:	|  |  |  |  |  |  |  |     |     |  ,--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    33ea:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    33ec:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d3,d0
    33ee:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    33f0:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2701>
    bltbpt += bltbptplus;
    33f6:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l a4,d7
    bltcpt += bltcptplus;
    33f8:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l a5,d4
    WaitBlit();
    33fa:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    33fc:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3400:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3402:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb26f9>
    custom->bltbpt = (APTR) bltbpt;
    3408:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d7,dff04c <gcc8_c_support.c.c60c1f2b+0xdb26f5>
    custom->bltcpt = (APTR) bltcpt;
    340e:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d4,dff048 <gcc8_c_support.c.c60c1f2b+0xdb26f1>
    custom->bltdpt = (APTR) bltdpt;
    3414:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d4,dff054 <gcc8_c_support.c.c60c1f2b+0xdb26fd>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    341a:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    341c:	|  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- blt.w 397a <CstScaleSprite+0x8c0>
    3420:	|  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    3422:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d0,d2
    3424:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d3,d2
    3426:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w d6,d2
    3428:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2701>
    WaitBlit();
    342e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    3430:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  }   

}
    3434:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    3438:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lea 40(sp),sp
    343c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   rts
      destination = (UWORD *) CstBackDrop;      
    343e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  '--|--|--|-> movea.l 1c6ce <CstBackDrop>,a4
    if(y + single->height < 0) {
    3444:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |  |  |   move.l 4(a2),d1
    3448:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |  |  |   move.l a5,d0
    344a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |  |  |   add.l d1,d0
  if( y < 0) {
    344c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |  |  |   tst.w d3
    344e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     '--|--|-- bge.w 311e <CstScaleSprite+0x64>
    if(y + single->height < 0) {
    3452:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  '--------|--|-> tst.l d0
    3454:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--------|--|--|--|--|-----------|--|-- blt.w 371c <CstScaleSprite+0x662>
    ystartsrc = y*-1;
    3458:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   move.l a5,d3
    345a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   neg.l d3
    blitheight = single->height+y;
    345c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   move.l d0,48(sp)
    ystartdst = 0;
    3460:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   moveq #0,d7
    if(x + single->width < 0) {
    3462:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   move.l (a2),d1
    3464:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   move.l a6,d0
    3466:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   add.l d1,d0
  if( x < 0) 
    3468:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   tst.w d2
    346a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  '-- bge.w 3146 <CstScaleSprite+0x8c>
    if(x + single->width < 0) {
    346e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           '----> tst.l d0
    3470:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--------|--|--|--|--|----------------- blt.w 371c <CstScaleSprite+0x662>
    cutwordssource = (x*-1)/16; 
    3474:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.w d4,d0
    3476:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  addi.w #15,d0
    347a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  asr.w #4,d0
    347c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  neg.w d0
    347e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.w d0,56(sp)
    3482:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.w d0,d6
    cutmaskpixel = (x*-1)%16;   
    3484:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l a6,d0
    3486:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  neg.l d0
    3488:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  moveq #15,d2
    348a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  and.l d0,d2
    348c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l d2,78(sp)
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    3490:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  lea 18d78 <__mulsi3>,a6
    3496:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l 1c702 <winWidth>,-(sp)
    349c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l d7,-(sp)
    349e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l d1,52(sp)
    34a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  jsr (a6)
    34a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  addq.l #8,sp
    34a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  lsr.l #3,d0
    if( cutmaskpixel > 0)
    34a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l 44(sp),d1
    34ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  tst.l d2
    34ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  ,-------------- beq.w 3732 <CstScaleSprite+0x678>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    34b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lea (-2,a4,d0.l),a5
      bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    34b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w 56(sp),d2
    34ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               subq.w #1,d2
    34bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d2,82(sp)
      bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    34c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.w #16,a0
    34c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               suba.l 78(sp),a0
    34c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l a0,d2
    34ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #12,d0
    34cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lsl.l d0,d2
  custom->bltcon0 = bltcon0;
    34ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               addi.w #4042,d2
    34d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d2,72(sp)
  custom->bltcon1 = bltcon1;  
    34d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w a0,d2
    34d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lsl.w d0,d2
    34da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d2,76(sp)
      extrawords = 1;
    34de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #1,d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    34e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.w 56(sp),a4
    34e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               adda.l a4,a4
    34e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d3,-(sp)
    34e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d1,-(sp)
    34ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               jsr (a6)
    34ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               addq.l #8,sp
    34ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lsr.l #3,d0
    34f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               add.l a4,d5
    34f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               add.l d0,d5
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    34f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               adda.l 24(a2),a4
    34f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               add.l a4,d0
    34fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d0,60(sp)
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    34fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l 1c6e6 <CstCleanupQueueDrawBuffer>,d3
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3504:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l #116666,68(sp)
    350c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lea 1c7ba <SysBase>,a0
    3512:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.l (a0),a6
    3514:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #20,d0
    3516:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #0,d1
    3518:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               jsr -684(a6)
    351c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.l d0,a0
    351e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d0,1c6e6 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    3524:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d3,16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    3528:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d4,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    352a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w a3,2(a0)
    CstCleanupQueueDrawBuffer->person = person;      
    352e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    3534:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l (a2),d1
    3536:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d1,d0
    3538:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     ,-------- bmi.w 37a4 <CstScaleSprite+0x6ea>
    353c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     ,-> asr.l #4,d0
    353e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   add.w 56(sp),d0
    3542:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   add.w d2,d0
    3544:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    3548:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w 50(sp),d3
    354c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = 0;
    3550:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   clr.w 12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    3554:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   movea.w d7,a4
    3556:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d7,14(a0)
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    355a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   moveq #0,d0
    355c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   not.w d0
    355e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.l 78(sp),d7
    3562:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   asr.l d7,d0
    3564:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d0,50(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3568:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w 82(sp),d7
    356c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   add.w d7,d7
    if( destinationtype != SCREEN)
    356e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   cmpi.w #1,52(sp)
    3574:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  ,--|-----|-- beq.w 37e4 <CstScaleSprite+0x72a>
      next = CstCleanupQueueViewBuffer;
    3578:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  ,--|-> move.l 1c6e2 <CstCleanupQueueViewBuffer>,52(sp)
      CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3580:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l 68(sp),a0
    3584:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    3586:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   moveq #20,d0
    3588:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   moveq #0,d1
    358a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -684(a6)
    358e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l d0,a0
    3590:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d0,1c6e2 <CstCleanupQueueViewBuffer>
      CstCleanupQueueViewBuffer->next = next;
    3596:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l 52(sp),16(a0)
      CstCleanupQueueViewBuffer->x = x;
    359c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d4,(a0)
      CstCleanupQueueViewBuffer->y = y;
    359e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w a3,2(a0)
      CstCleanupQueueViewBuffer->person = person;
    35a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    35a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d1
    35aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    35ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|--|--|--|--|--|--|--|--|--|-- bmi.w 3a46 <CstScaleSprite+0x98c>
    35b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    35b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   add.w 56(sp),d0
    35b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    35b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height = blitheight; 
    35bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes = 0; 
    35c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   clr.w 12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;  
    35c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   move.w a4,14(a0)
    bltalwm = 0; //Last Word of this channel almost masked out
    35c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   suba.l a4,a4
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    35ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|--|--|--|-> move.l 1c702 <winWidth>,d0
    35d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    35d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d7,d4
    35d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d4
    35d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d1
    35d8:	|  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bge.w 32b0 <CstScaleSprite+0x1f6>
    35dc:	|  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bra.w 37f8 <CstScaleSprite+0x73e>
      destination = (UWORD *) CstDrawBuffer;      
    35e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|-> movea.l 1c6de <CstDrawBuffer>,a4
      break;
    35e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     '--|--|--|--|--|--|--|--|-- bra.w 3110 <CstScaleSprite+0x56>
    ystartdst = y;
    35ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '--|--|--|--|--|--|--|-> move.l a5,d7
    blitheight = single->height;
    35ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |  |  |  |  |  |   move.l d1,48(sp)
    ystartsrc = 0;
    35f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |  |  |  |  |  |   moveq #0,d3
    35f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '--|--|--|--|--|--|-- bra.w 313a <CstScaleSprite+0x80>
    bltapt = ((ULONG) mask) +ystartsrc*single->width/8;
    35f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              '--|--|--|--|--|-> lea 18d78 <__mulsi3>,a6
    35fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d3,-(sp)
    35fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d1,-(sp)
    3600:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   jsr (a6)
    3602:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   addq.l #8,sp
    3604:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lsr.l #3,d0
    3606:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   add.l d0,d5
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    3608:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   add.l 24(a2),d0
    360c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d0,60(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    3610:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w d4,d2
    3612:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   asr.w #4,d2
    3614:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d7,-(sp)
    3616:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l a5,-(sp)
    3618:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   jsr (a6)
    361a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   addq.l #8,sp
    361c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lsr.l #3,d0
    361e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.w d2,a0
    3620:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   adda.l a0,a0
    3622:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   adda.l a0,a4
    3624:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lea (0,a4,d0.l),a5
    bltcon0 = 0xfca + ((x%16) << 12);
    3628:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w d4,d6
    362a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   andi.w #15,d6
    362e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #15,d0
    3630:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   and.l d4,d0
    3632:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #12,d1
    3634:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lsl.l d1,d0
    3636:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.l d0,a4
    3638:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lea 4042(a4),a4
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    363c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l 1c6e6 <CstCleanupQueueDrawBuffer>,d3
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3642:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l #116666,68(sp)
    364a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lea 1c7ba <SysBase>,a0
    3650:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.l (a0),a6
    3652:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #20,d0
    3654:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #0,d1
    3656:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   jsr -684(a6)
    365a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.l d0,a0
    365c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d0,1c6e6 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    3662:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d3,16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    3666:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w d4,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    3668:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w a3,2(a0)
    CstCleanupQueueDrawBuffer->person = person; 
    366c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3672:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l (a2),d1
    3674:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d1,d0
    3676:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-----|--|--|--|--|-- bmi.w 399c <CstScaleSprite+0x8e2>
    367a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   asr.l #4,d0
    367c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   addq.w #1,d0
    367e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; 
    3682:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w 50(sp),d3
    3686:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    368a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   add.w d2,d2
    368c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d2,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    3690:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d7,48(sp)
    3694:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d7,14(a0)
  custom->bltcon0 = bltcon0;
    3698:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w a4,72(sp)
  custom->bltcon1 = bltcon1;  
    369c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   moveq #12,d0
    369e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   lsl.w d0,d6
    36a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d6,76(sp)
    if( destinationtype != SCREEN)
    36a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   cmpi.w #1,52(sp)
    36aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,--|-----|--|--|--|--|-- beq.w 39d4 <CstScaleSprite+0x91a>
      next = CstCleanupQueueViewBuffer;
    36ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  ,--|--|--|--|--|-> move.l 1c6e2 <CstCleanupQueueViewBuffer>,d6
      CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    36b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   movea.l 68(sp),a0
    36b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   movea.l (a0),a6
    36ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   moveq #20,d0
    36bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   moveq #0,d1
    36be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   jsr -684(a6)
    36c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   movea.l d0,a0
    36c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l d0,1c6e2 <CstCleanupQueueViewBuffer>
      CstCleanupQueueViewBuffer->next = next;   
    36ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l d6,16(a0)
      CstCleanupQueueViewBuffer->x = x;
    36ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.w d4,(a0)
      CstCleanupQueueViewBuffer->y = y;
    36d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.w a3,2(a0)
      CstCleanupQueueViewBuffer->person = person; 
    36d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    36da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l (a2),d1
    36dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l d1,d0
    36de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|--|--|--|--|--|--|--|-- bmi.w 3a86 <CstScaleSprite+0x9cc>
    36e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   asr.l #4,d0
    36e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   addq.w #1,d0
    36e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight; 
    36ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; 
    36ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w d2,12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;
    36f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w 48(sp),14(a0)
    36f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w #-1,50(sp)
    36fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   moveq #-2,d7
    bltalwm = 0; //Last Word of this channel almost masked out
    3700:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   suba.l a4,a4
    cutwordssource = 0;
    3702:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   clr.w d6
    extrawords = 1;
    3704:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   moveq #1,d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3706:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|--|-> move.l 1c702 <winWidth>,d0
    370c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    370e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d7,d4
    3710:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d4
    3712:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d1
    3714:	|  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bge.w 32b0 <CstScaleSprite+0x1f6>
    3718:	|  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bra.w 37f8 <CstScaleSprite+0x73e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    371c:	|  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> move.l #102903,88(sp)
}
    3724:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    3728:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lea 40(sp),sp
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    372c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jmp 183ec <KPrintF>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8;
    3732:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|--|--|--|-> lea (0,a4,d0.l),a5
    3736:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w 56(sp),82(sp)
    373c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   clr.w 76(sp)
    3740:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w #4042,72(sp)
      extrawords = 0;
    3746:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   clr.w d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    3748:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   movea.w 56(sp),a4
    374c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   adda.l a4,a4
    374e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d3,-(sp)
    3750:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d1,-(sp)
    3752:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   jsr (a6)
    3754:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   addq.l #8,sp
    3756:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   lsr.l #3,d0
    3758:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   add.l a4,d5
    375a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   add.l d0,d5
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    375c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   adda.l 24(a2),a4
    3760:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   add.l a4,d0
    3762:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d0,60(sp)
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3766:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l 1c6e6 <CstCleanupQueueDrawBuffer>,d3
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    376c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l #116666,68(sp)
    3774:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   lea 1c7ba <SysBase>,a0
    377a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   movea.l (a0),a6
    377c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   moveq #20,d0
    377e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   moveq #0,d1
    3780:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   jsr -684(a6)
    3784:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   movea.l d0,a0
    3786:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d0,1c6e6 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    378c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d3,16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    3790:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w d4,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    3792:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w a3,2(a0)
    CstCleanupQueueDrawBuffer->person = person;      
    3796:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    379c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l (a2),d1
    379e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d1,d0
    37a0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  '-- bpl.w 353c <CstScaleSprite+0x482>
    37a4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  '--|----> moveq #15,d0
    37a6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.l d1,d0
    37a8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      asr.l #4,d0
    37aa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.w 56(sp),d0
    37ae:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.w d2,d0
    37b0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    37b4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w 50(sp),d3
    37b8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = 0;
    37bc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      clr.w 12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    37c0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      movea.w d7,a4
    37c2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d7,14(a0)
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    37c6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      moveq #0,d0
    37c8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      not.w d0
    37ca:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.l 78(sp),d7
    37ce:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      asr.l d7,d0
    37d0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d0,50(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    37d4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w 82(sp),d7
    37d8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.w d7,d7
    if( destinationtype != SCREEN)
    37da:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      cmpi.w #1,52(sp)
    37e0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     '----- bne.w 3578 <CstScaleSprite+0x4be>
    bltalwm = 0; //Last Word of this channel almost masked out
    37e4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     '----------> suba.l a4,a4
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    37e6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 1c702 <winWidth>,d0
    37ec:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsr.l #3,d0
    37ee:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d7,d4
    37f0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  add.w d0,d4
    37f2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  tst.l d1
    37f4:	|  |  |  |  |  |  +-----|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|----------------- bge.w 32b0 <CstScaleSprite+0x1f6>
    37f8:	|  |  |  |  |  >--|-----|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|----------------> addq.l #7,d1
    37fa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  asr.l #3,d1
    37fc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  sub.w d1,d4
  WaitBlit();
    37fe:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lea 1c7c6 <GfxBase>,a3
    3804:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  movea.l (a3),a6
    3806:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  jsr -228(a6)
  custom->bltafwm = bltafwm;
    380a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w 50(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb26ed>
  custom->bltalwm = bltalwm;
    3812:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w a4,dff046 <gcc8_c_support.c.c60c1f2b+0xdb26ef>
  custom->bltamod = bltamod;
    3818:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d7,dff064 <gcc8_c_support.c.c60c1f2b+0xdb270d>
  custom->bltbmod = bltbmod;
    381e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d7,dff062 <gcc8_c_support.c.c60c1f2b+0xdb270b>
  custom->bltcmod = bltcmod;
    3824:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d4,dff060 <gcc8_c_support.c.c60c1f2b+0xdb2709>
  custom->bltdmod = bltdmod;
    382a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d4,dff066 <gcc8_c_support.c.c60c1f2b+0xdb270f>
  custom->bltcon0 = bltcon0;
    3830:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w 72(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb26e9>
  custom->bltcon1 = bltcon1;  
    3838:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w 76(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb26eb>
  UWORD bltbptplus = (single->width >> 3)*single->height;
    3840:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3842:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsl.w #6,d3
  UWORD bltbptplus = (single->width >> 3)*single->height;
    3844:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d0,d7
    3846:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  asr.l #3,d7
    3848:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  muls.w 6(a2),d7
    bltbpt += bltbptplus;
    384c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  andi.l #65535,d7
  UWORD bltcptplus = winWidth/8*winHeight;
    3852:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 1c702 <winWidth>,d4
    3858:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsr.l #3,d4
    385a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  muls.w 1c708 <winHeight+0x2>,d4
    bltcpt += bltcptplus;
    3860:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  andi.l #65535,d4
    custom->bltapt = (APTR) bltapt;
    3866:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb26f9>
    custom->bltbpt = (APTR) bltbpt;
    386c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 60(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb26f5>
    custom->bltcpt = (APTR) bltcpt;
    3874:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb26f1>
    custom->bltdpt = (APTR) bltdpt;
    387a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb26fd>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3880:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  tst.l d0
    3882:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|----------------- bge.w 333c <CstScaleSprite+0x282>
    3886:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  '--|-----|--|--|--|--|--|--|----------------> moveq #15,d1
    3888:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  add.l d1,d0
    388a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  asr.l #4,d0
    388c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  add.w d2,d0
    388e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  add.w d3,d0
    3890:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  sub.w d6,d0
    3892:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2701>
    bltbpt += bltbptplus;
    3898:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  movea.l 60(sp),a4
    389c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  adda.l d7,a4
    bltcpt += bltcptplus;
    389e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  adda.l d4,a5
    WaitBlit();
    38a0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  movea.l (a3),a6
    38a2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    38a6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    38a8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb26f9>
    custom->bltbpt = (APTR) bltbpt;
    38ae:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb26f5>
    custom->bltcpt = (APTR) bltcpt;
    38b4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb26f1>
    custom->bltdpt = (APTR) bltdpt;
    38ba:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb26fd>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    38c0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  tst.l d0
    38c2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     '-----|--|--|--|--|--|--|----------------- bge.w 3378 <CstScaleSprite+0x2be>
    38c6:	|  |  |  |  |  |  |     |  |  |  |  |  '--|-----------|--|--|--|--|--|--|----------------> moveq #15,d1
    38c8:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  add.l d1,d0
    38ca:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  asr.l #4,d0
    38cc:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  add.w d2,d0
    38ce:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  add.w d3,d0
    38d0:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  sub.w d6,d0
    38d2:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2701>
    bltbpt += bltbptplus;
    38d8:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  adda.l d7,a4
    bltcpt += bltcptplus;
    38da:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  adda.l d4,a5
    WaitBlit();
    38dc:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  movea.l (a3),a6
    38de:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    38e2:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    38e4:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb26f9>
    custom->bltbpt = (APTR) bltbpt;
    38ea:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb26f5>
    custom->bltcpt = (APTR) bltcpt;
    38f0:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb26f1>
    custom->bltdpt = (APTR) bltdpt;
    38f6:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb26fd>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    38fc:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  tst.l d0
    38fe:	|  |  |  |  |  |  |     |  |  |  |  |     '-----------|--|--|--|--|--|--|----------------- bge.w 33b0 <CstScaleSprite+0x2f6>
    3902:	|  |  |  |  |  |  |     |  |  |  '--|-----------------|--|--|--|--|--|--|----------------> moveq #15,d1
    3904:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  add.l d1,d0
    3906:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  asr.l #4,d0
    3908:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  add.w d2,d0
    390a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  add.w d3,d0
    390c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  sub.w d6,d0
    390e:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2701>
    bltbpt += bltbptplus;
    3914:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  adda.l d7,a4
    bltcpt += bltcptplus;
    3916:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  adda.l d4,a5
    WaitBlit();
    3918:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  movea.l (a3),a6
    391a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    391e:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3920:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb26f9>
    custom->bltbpt = (APTR) bltbpt;
    3926:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb26f5>
    custom->bltcpt = (APTR) bltcpt;
    392c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb26f1>
    custom->bltdpt = (APTR) bltdpt;
    3932:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb26fd>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3938:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  tst.l d0
    393a:	|  |  |  |  |  |  |     |  |  |     '-----------------|--|--|--|--|--|--|----------------- bge.w 33e8 <CstScaleSprite+0x32e>
    393e:	|  |  |  |  |  |  |     |  '--|-----------------------|--|--|--|--|--|--|----------------> moveq #15,d1
    3940:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.l d1,d0
    3942:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  asr.l #4,d0
    3944:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.w d2,d0
    3946:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.w d3,d0
    3948:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  sub.w d6,d0
    394a:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2701>
    bltbpt += bltbptplus;
    3950:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.l a4,d7
    bltcpt += bltcptplus;
    3952:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.l a5,d4
    WaitBlit();
    3954:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  movea.l (a3),a6
    3956:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    395a:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    395c:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb26f9>
    custom->bltbpt = (APTR) bltbpt;
    3962:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d7,dff04c <gcc8_c_support.c.c60c1f2b+0xdb26f5>
    custom->bltcpt = (APTR) bltcpt;
    3968:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d4,dff048 <gcc8_c_support.c.c60c1f2b+0xdb26f1>
    custom->bltdpt = (APTR) bltdpt;
    396e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d4,dff054 <gcc8_c_support.c.c60c1f2b+0xdb26fd>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3974:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  tst.l d0
    3976:	|  |  |  |  |  |  |     |     '-----------------------|--|--|--|--|--|--|----------------- bge.w 3420 <CstScaleSprite+0x366>
    397a:	|  |  |  |  |  |  |     '-----------------------------|--|--|--|--|--|--|----------------> moveq #15,d7
    397c:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  add.l d7,d0
    397e:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  asr.l #4,d0
    3980:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  add.w d0,d2
    3982:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  add.w d3,d2
    3984:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  sub.w d6,d2
    3986:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2701>
    WaitBlit();
    398c:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  movea.l (a3),a6
    398e:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  jsr -228(a6)
}
    3992:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  movem.l (sp)+,d2-d7/a2-a6
    3996:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  lea 40(sp),sp
    399a:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  rts
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    399c:	|  |  |  |  |  |  |                                   |  |  |  |  |  '--|----------------> moveq #15,d0
    399e:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  add.l d1,d0
    39a0:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  asr.l #4,d0
    39a2:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  addq.w #1,d0
    39a4:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; 
    39a8:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w 50(sp),d3
    39ac:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    39b0:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  add.w d2,d2
    39b2:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d2,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    39b6:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d7,48(sp)
    39ba:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d7,14(a0)
  custom->bltcon0 = bltcon0;
    39be:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w a4,72(sp)
  custom->bltcon1 = bltcon1;  
    39c2:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  moveq #12,d0
    39c4:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  lsl.w d0,d6
    39c6:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d6,76(sp)
    if( destinationtype != SCREEN)
    39ca:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  cmpi.w #1,52(sp)
    39d0:	|  |  |  |  |  |  |                                   |  |  |  |  |     '----------------- bne.w 36ae <CstScaleSprite+0x5f4>
    extrawords = 1;
    39d4:	|  |  |  |  |  |  |                                   |  |  |  |  '----------------------> moveq #1,d2
    39d6:	|  |  |  |  |  |  |                                   |  |  |  |                           move.w #-1,50(sp)
    39dc:	|  |  |  |  |  |  |                                   |  |  |  |                           moveq #-2,d7
    bltalwm = 0; //Last Word of this channel almost masked out
    39de:	|  |  |  |  |  |  |                                   |  |  |  |                           suba.l a4,a4
    cutwordssource = 0;
    39e0:	|  |  |  |  |  |  |                                   |  |  |  |                           clr.w d6
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    39e2:	|  |  |  |  |  |  |                                   |  |  |  |                           move.l 1c702 <winWidth>,d0
    39e8:	|  |  |  |  |  |  |                                   |  |  |  |                           lsr.l #3,d0
    39ea:	|  |  |  |  |  |  |                                   |  |  |  |                           move.w d7,d4
    39ec:	|  |  |  |  |  |  |                                   |  |  |  |                           add.w d0,d4
    39ee:	|  |  |  |  |  |  |                                   |  |  |  |                           tst.l d1
    39f0:	|  |  |  |  |  |  +-----------------------------------|--|--|--|-------------------------- bge.w 32b0 <CstScaleSprite+0x1f6>
    39f4:	|  |  |  |  |  +--|-----------------------------------|--|--|--|-------------------------- bra.w 37f8 <CstScaleSprite+0x73e>
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    39f8:	|  |  |  '--|--|--|-----------------------------------|--|--|--|-------------------------> moveq #15,d0
    39fa:	|  |  |     |  |  |                                   |  |  |  |                           add.l d1,d0
    39fc:	|  |  |     |  |  |                                   |  |  |  |                           asr.l #4,d0
    39fe:	|  |  |     |  |  |                                   |  |  |  |                           movea.w 58(sp),a1
    3a02:	|  |  |     |  |  |                                   |  |  |  |                           adda.w d0,a1
    3a04:	|  |  |     |  |  |                                   |  |  |  |                           move.w a1,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3a08:	|  |  |     |  |  |                                   |  |  |  |                           move.w 50(sp),d3
    3a0c:	|  |  |     |  |  |                                   |  |  |  |                           move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3a10:	|  |  |     |  |  |                                   |  |  |  |                           add.w d2,d2
    3a12:	|  |  |     |  |  |                                   |  |  |  |                           move.w d2,78(sp)
    3a16:	|  |  |     |  |  |                                   |  |  |  |                           move.w d2,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    3a1a:	|  |  |     |  |  |                                   |  |  |  |                           move.w d7,48(sp)
    3a1e:	|  |  |     |  |  |                                   |  |  |  |                           move.w d7,14(a0)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3a22:	|  |  |     |  |  |                                   |  |  |  |                           move.w 58(sp),d7
    3a26:	|  |  |     |  |  |                                   |  |  |  |                           add.w d7,d7
  custom->bltcon0 = bltcon0;
    3a28:	|  |  |     |  |  |                                   |  |  |  |                           move.w 74(sp),72(sp)
  custom->bltcon1 = bltcon1;  
    3a2e:	|  |  |     |  |  |                                   |  |  |  |                           move.w 76(sp),d2
    3a32:	|  |  |     |  |  |                                   |  |  |  |                           moveq #12,d0
    3a34:	|  |  |     |  |  |                                   |  |  |  |                           lsl.w d0,d2
    3a36:	|  |  |     |  |  |                                   |  |  |  |                           move.w d2,76(sp)
    if( destinationtype != SCREEN)
    3a3a:	|  |  |     |  |  |                                   |  |  |  |                           cmpi.w #1,52(sp)
    3a40:	|  |  |     '--|--|-----------------------------------|--|--|--|-------------------------- bne.w 3246 <CstScaleSprite+0x18c>
    3a44:	|  |  +--------|--|-----------------------------------|--|--|--|-------------------------- bra.s 3a68 <CstScaleSprite+0x9ae>
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    3a46:	|  |  |        |  |                                   |  '--|--|-------------------------> moveq #15,d0
    3a48:	|  |  |        |  |                                   |     |  |                           add.l d1,d0
    3a4a:	|  |  |        |  |                                   |     |  |                           asr.l #4,d0
    3a4c:	|  |  |        |  |                                   |     |  |                           add.w 56(sp),d0
    3a50:	|  |  |        |  |                                   |     |  |                           add.w d2,d0
    3a52:	|  |  |        |  |                                   |     |  |                           move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height = blitheight; 
    3a56:	|  |  |        |  |                                   |     |  |                           move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes = 0; 
    3a5a:	|  |  |        |  |                                   |     |  |                           clr.w 12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;  
    3a5e:	|  |  |        |  |                                   |     |  |                           move.w a4,14(a0)
    bltalwm = 0; //Last Word of this channel almost masked out
    3a62:	|  |  |        |  |                                   |     |  |                           suba.l a4,a4
    3a64:	|  |  |        |  |                                   '-----|--|-------------------------- bra.w 35ca <CstScaleSprite+0x510>
    3a68:	|  |  '--------|--|-----------------------------------------|--|-------------------------> move.w #-1,50(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3a6e:	|  |           |  |                                         |  |                           clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3a70:	|  |           |  |                                         |  |                           move.l 1c702 <winWidth>,d0
    3a76:	|  |           |  |                                         |  |                           lsr.l #3,d0
    3a78:	|  |           |  |                                         |  |                           move.w d7,d4
    3a7a:	|  |           |  |                                         |  |                           add.w d0,d4
    3a7c:	|  |           |  |                                         |  |                           tst.l d1
    3a7e:	|  |           |  '-----------------------------------------|--|-------------------------- bge.w 32b0 <CstScaleSprite+0x1f6>
    3a82:	|  |           '--------------------------------------------|--|-------------------------- bra.w 37f8 <CstScaleSprite+0x73e>
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3a86:	|  |                                                        |  '-------------------------> moveq #15,d0
    3a88:	|  |                                                        |                              add.l d1,d0
    3a8a:	|  |                                                        |                              asr.l #4,d0
    3a8c:	|  |                                                        |                              addq.w #1,d0
    3a8e:	|  |                                                        |                              move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight; 
    3a92:	|  |                                                        |                              move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; 
    3a96:	|  |                                                        |                              move.w d2,12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;
    3a9a:	|  |                                                        |                              move.w 48(sp),14(a0)
    3aa0:	|  |                                                        |                              move.w #-1,50(sp)
    3aa6:	|  |                                                        |                              moveq #-2,d7
    bltalwm = 0; //Last Word of this channel almost masked out
    3aa8:	|  |                                                        |                              suba.l a4,a4
    cutwordssource = 0;
    3aaa:	|  |                                                        |                              clr.w d6
    extrawords = 1;
    3aac:	|  |                                                        |                              moveq #1,d2
    3aae:	|  |                                                        '----------------------------- bra.w 3706 <CstScaleSprite+0x64c>
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource;
    3ab2:	|  '-------------------------------------------------------------------------------------> moveq #15,d0
    3ab4:	|                                                                                          add.l d1,d0
    3ab6:	|                                                                                          asr.l #4,d0
    3ab8:	|                                                                                          movea.w 58(sp),a1
    3abc:	|                                                                                          adda.w d0,a1
    3abe:	|                                                                                          move.w a1,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight;
    3ac2:	|                                                                                          move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3ac6:	|                                                                                          move.w 78(sp),12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst; 
    3acc:	|                                                                                          move.w 48(sp),14(a0)
    3ad2:	|                                                                                          move.w #-1,50(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3ad8:	|                                                                                          clr.w d2
    3ada:	'----------------------------------------------------------------------------------------- bra.w 329e <CstScaleSprite+0x1e4>

00003ade <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    3ade:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3ae0:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    3ae6:	move.l 8(sp),d0
    3aea:	movea.l (sp),a0
    3aec:	move.l d0,128(a0)
}
    3af0:	nop
    3af2:	addq.l #4,sp
    3af4:	rts

00003af6 <CstSwapBuffer>:

void CstSwapBuffer( ) {
    3af6:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    3afa:	move.l 1c6da <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    3b02:	move.l 1c6de <CstDrawBuffer>,d0
    3b08:	move.l d0,1c6da <CstViewBuffer>
  CstDrawBuffer = tmp;
    3b0e:	move.l 16(sp),1c6de <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    3b16:	move.l 1c6e2 <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    3b1e:	move.l 1c6e6 <CstCleanupQueueDrawBuffer>,d0
    3b24:	move.l d0,1c6e2 <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    3b2a:	move.l 12(sp),1c6e6 <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    3b32:	move.l 1c6d6 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    3b3a:	move.l 1c6da <CstViewBuffer>,d0
    3b40:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    3b44:	move.l 4(sp),d0
    3b48:	clr.w d0
    3b4a:	swap d0
    3b4c:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    3b50:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    3b54:	movea.w #118,a0
    3b58:	adda.l 8(sp),a0
    3b5c:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    3b5e:	movea.w #114,a0
    3b62:	adda.l 8(sp),a0
    3b66:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3b6a:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3b72:	move.l 4(sp),d0
    3b76:	clr.w d0
    3b78:	swap d0
    3b7a:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3b7e:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    3b82:	movea.w #126,a0
    3b86:	adda.l 8(sp),a0
    3b8a:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    3b8c:	movea.w #122,a0
    3b90:	adda.l 8(sp),a0
    3b94:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    3b98:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3ba0:	move.l 4(sp),d0
    3ba4:	clr.w d0
    3ba6:	swap d0
    3ba8:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3bac:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    3bb0:	movea.l 8(sp),a0
    3bb4:	lea 134(a0),a0
    3bb8:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    3bba:	movea.l 8(sp),a0
    3bbe:	lea 130(a0),a0
    3bc2:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3bc6:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3bce:	move.l 4(sp),d0
    3bd2:	clr.w d0
    3bd4:	swap d0
    3bd6:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3bda:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    3bde:	movea.l 8(sp),a0
    3be2:	lea 142(a0),a0
    3be6:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    3be8:	movea.l 8(sp),a0
    3bec:	lea 138(a0),a0
    3bf0:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3bf4:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3bfc:	move.l 4(sp),d0
    3c00:	clr.w d0
    3c02:	swap d0
    3c04:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3c08:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    3c0c:	movea.l 8(sp),a0
    3c10:	lea 150(a0),a0
    3c14:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    3c16:	movea.l 8(sp),a0
    3c1a:	lea 146(a0),a0
    3c1e:	move.w 2(sp),(a0)

}
    3c22:	nop
    3c24:	lea 20(sp),sp
    3c28:	rts

00003c2a <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    3c2a:	          lea -68(sp),sp
    3c2e:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    3c30:	          pea 1922a <PutChar+0x39c>
    3c36:	          jsr 183ec <KPrintF>
    3c3c:	          addq.l #4,sp

  width = width / 8;
    3c3e:	          move.l 76(sp),d0
    3c42:	      ,-- bpl.s 3c46 <CstReserveBackdrop+0x1c>
    3c44:	      |   addq.l #7,d0
    3c46:	      '-> asr.l #3,d0
    3c48:	          move.l d0,76(sp)

  if( width < 40) 
    3c4c:	          moveq #39,d0
    3c4e:	          cmp.l 76(sp),d0
    3c52:	      ,-- blt.s 3c68 <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    3c54:	      |   pea 19244 <PutChar+0x3b6>
    3c5a:	      |   jsr 183ec <KPrintF>
    3c60:	      |   addq.l #4,sp
    return FALSE;
    3c62:	      |   clr.w d0
    3c64:	,-----|-- bra.w 3fa4 <CstReserveBackdrop+0x37a>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    3c68:	|     '-> pea 19282 <PutChar+0x3f4>
    3c6e:	|         jsr 183ec <KPrintF>
    3c74:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    3c76:	|         move.l 76(sp),-(sp)
    3c7a:	|         jsr 10ca <CstCreateCopperlist>
    3c80:	|         addq.l #4,sp
    3c82:	|         move.l d0,1c6d6 <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    3c88:	|         pea 192a2 <PutChar+0x414>
    3c8e:	|         jsr 183ec <KPrintF>
    3c94:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    3c96:	|         move.l 76(sp),d1
    3c9a:	|         move.l 80(sp),d0
    3c9e:	|         muls.w d1,d0
    3ca0:	|         move.w d0,1c6cc <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    3ca6:	|         move.w 1c6cc <CstBackdropSizePlane>,d1
    3cac:	|         move.w d1,d0
    3cae:	|         add.w d0,d0
    3cb0:	|         add.w d0,d0
    3cb2:	|         add.w d1,d0
    3cb4:	|         move.w d0,1c6ca <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    3cba:	|         move.w 1c6ca <CstBackdropSize>,d0
    3cc0:	|         move.w d0,d0
    3cc2:	|         andi.l #65535,d0
    3cc8:	|         move.l d0,60(sp)
    3ccc:	|         moveq #2,d1
    3cce:	|         move.l d1,56(sp)
    3cd2:	|         move.l 1c7ba <SysBase>,d0
    3cd8:	|         movea.l d0,a6
    3cda:	|         move.l 60(sp),d0
    3cde:	|         move.l 56(sp),d1
    3ce2:	|         jsr -684(a6)
    3ce6:	|         move.l d0,52(sp)
    3cea:	|         move.l 52(sp),d0
    3cee:	|         move.l d0,1c6ce <CstBackDrop>
  if( !CstBackDrop)
    3cf4:	|         move.l 1c6ce <CstBackDrop>,d0
    3cfa:	|     ,-- bne.s 3d10 <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    3cfc:	|     |   pea 192c9 <PutChar+0x43b>
    3d02:	|     |   jsr 183ec <KPrintF>
    3d08:	|     |   addq.l #4,sp
    return FALSE;  
    3d0a:	|     |   clr.w d0
    3d0c:	+-----|-- bra.w 3fa4 <CstReserveBackdrop+0x37a>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    3d10:	|     '-> pea 19301 <PutChar+0x473>
    3d16:	|         jsr 183ec <KPrintF>
    3d1c:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    3d1e:	|         move.l 1c6ce <CstBackDrop>,68(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    3d26:	|         clr.l 64(sp)
    3d2a:	|     ,-- bra.s 3d40 <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    3d2c:	|  ,--|-> move.l 68(sp),d0
    3d30:	|  |  |   move.l d0,d1
    3d32:	|  |  |   addq.l #4,d1
    3d34:	|  |  |   move.l d1,68(sp)
    3d38:	|  |  |   movea.l d0,a0
    3d3a:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    3d3c:	|  |  |   addq.l #1,64(sp)
    3d40:	|  |  '-> move.w 1c6ca <CstBackdropSize>,d0
    3d46:	|  |      lsr.w #2,d0
    3d48:	|  |      move.w d0,d0
    3d4a:	|  |      andi.l #65535,d0
    3d50:	|  |      cmp.l 64(sp),d0
    3d54:	|  '----- bgt.s 3d2c <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3d56:	|         move.w 1c6ca <CstBackdropSize>,d0
    3d5c:	|         move.w d0,d0
    3d5e:	|         andi.l #65535,d0
    3d64:	|         move.l 76(sp),d1
    3d68:	|         add.l d1,d1
    3d6a:	|         add.l d1,d0
    3d6c:	|         move.l d0,48(sp)
    3d70:	|         moveq #2,d0
    3d72:	|         move.l d0,44(sp)
    3d76:	|         move.l 1c7ba <SysBase>,d0
    3d7c:	|         movea.l d0,a6
    3d7e:	|         move.l 48(sp),d0
    3d82:	|         move.l 44(sp),d1
    3d86:	|         jsr -684(a6)
    3d8a:	|         move.l d0,40(sp)
    3d8e:	|         move.l 40(sp),d0
    3d92:	|         move.l d0,1c6de <CstDrawBuffer>
  if( !CstDrawBuffer)
    3d98:	|         move.l 1c6de <CstDrawBuffer>,d0
    3d9e:	|     ,-- bne.s 3db4 <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    3da0:	|     |   pea 19327 <PutChar+0x499>
    3da6:	|     |   jsr 183ec <KPrintF>
    3dac:	|     |   addq.l #4,sp
    return FALSE;  
    3dae:	|     |   clr.w d0
    3db0:	+-----|-- bra.w 3fa4 <CstReserveBackdrop+0x37a>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    3db4:	|     '-> pea 19361 <PutChar+0x4d3>
    3dba:	|         jsr 183ec <KPrintF>
    3dc0:	|         addq.l #4,sp
    
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3dc2:	|         move.w 1c6ca <CstBackdropSize>,d0
    3dc8:	|         move.w d0,d0
    3dca:	|         andi.l #65535,d0
    3dd0:	|         move.l 76(sp),d1
    3dd4:	|         add.l d1,d1
    3dd6:	|         add.l d1,d0
    3dd8:	|         move.l d0,36(sp)
    3ddc:	|         moveq #2,d1
    3dde:	|         move.l d1,32(sp)
    3de2:	|         move.l 1c7ba <SysBase>,d0
    3de8:	|         movea.l d0,a6
    3dea:	|         move.l 36(sp),d0
    3dee:	|         move.l 32(sp),d1
    3df2:	|         jsr -684(a6)
    3df6:	|         move.l d0,28(sp)
    3dfa:	|         move.l 28(sp),d0
    3dfe:	|         move.l d0,1c6da <CstViewBuffer>
  if( !CstViewBuffer)
    3e04:	|         move.l 1c6da <CstViewBuffer>,d0
    3e0a:	|     ,-- bne.s 3e20 <CstReserveBackdrop+0x1f6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    3e0c:	|     |   pea 19389 <PutChar+0x4fb>
    3e12:	|     |   jsr 183ec <KPrintF>
    3e18:	|     |   addq.l #4,sp
    return FALSE;  
    3e1a:	|     |   clr.w d0
    3e1c:	+-----|-- bra.w 3fa4 <CstReserveBackdrop+0x37a>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    3e20:	|     '-> pea 193c3 <PutChar+0x535>
    3e26:	|         jsr 183ec <KPrintF>
    3e2c:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    3e2e:	|         move.l 1c6de <CstDrawBuffer>,d1
    3e34:	|         move.l 76(sp),d0
    3e38:	|     ,-- bpl.s 3e3c <CstReserveBackdrop+0x212>
    3e3a:	|     |   addq.l #3,d0
    3e3c:	|     '-> asr.l #2,d0
    3e3e:	|         add.l d0,d0
    3e40:	|         add.l d0,d0
    3e42:	|         add.l d1,d0
    3e44:	|         move.l d0,1c6de <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    3e4a:	|         move.l 1c6da <CstViewBuffer>,d1
    3e50:	|         move.l 76(sp),d0
    3e54:	|     ,-- bpl.s 3e58 <CstReserveBackdrop+0x22e>
    3e56:	|     |   addq.l #3,d0
    3e58:	|     '-> asr.l #2,d0
    3e5a:	|         add.l d0,d0
    3e5c:	|         add.l d0,d0
    3e5e:	|         add.l d1,d0
    3e60:	|         move.l d0,1c6da <CstViewBuffer>
  
  CstZBufferResult = AllocVec( CSTMAXWIDTHSPRITE/8*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    3e66:	|         move.l #5200,24(sp)
    3e6e:	|         moveq #2,d0
    3e70:	|         move.l d0,20(sp)
    3e74:	|         move.l 1c7ba <SysBase>,d0
    3e7a:	|         movea.l d0,a6
    3e7c:	|         move.l 24(sp),d0
    3e80:	|         move.l 20(sp),d1
    3e84:	|         jsr -684(a6)
    3e88:	|         move.l d0,16(sp)
    3e8c:	|         move.l 16(sp),d0
    3e90:	|         move.l d0,1c6f6 <CstZBufferResult>
  CstZBufferWork = AllocVec( (CSTMAXWIDTHSPRITE/8+2)*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    3e96:	|         move.l #5600,12(sp)
    3e9e:	|         moveq #2,d1
    3ea0:	|         move.l d1,8(sp)
    3ea4:	|         move.l 1c7ba <SysBase>,d0
    3eaa:	|         movea.l d0,a6
    3eac:	|         move.l 12(sp),d0
    3eb0:	|         move.l 8(sp),d1
    3eb4:	|         jsr -684(a6)
    3eb8:	|         move.l d0,4(sp)
    3ebc:	|         move.l 4(sp),d0
    3ec0:	|         move.l d0,1c6fa <CstZBufferWork>

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    3ec6:	|         move.l 1c6ce <CstBackDrop>,d0
    3ecc:	|         clr.l -(sp)
    3ece:	|         pea 5 <_start+0x5>
    3ed2:	|         pea 100 <copyString+0x48>
    3ed6:	|         pea 140 <decodeFilename+0x28>
    3eda:	|         pea 193eb <PutChar+0x55d>
    3ee0:	|         move.l d0,-(sp)
    3ee2:	|         jsr 184d4 <debug_register_bitmap>
    3ee8:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    3eec:	|         move.l 80(sp),d0
    3ef0:	|         movea.w d0,a1
    3ef2:	|         move.l 76(sp),d0
    3ef6:	|         lsl.w #3,d0
    3ef8:	|         movea.w d0,a0
    3efa:	|         move.l 1c6de <CstDrawBuffer>,d0
    3f00:	|         clr.l -(sp)
    3f02:	|         pea 5 <_start+0x5>
    3f06:	|         move.l a1,-(sp)
    3f08:	|         move.l a0,-(sp)
    3f0a:	|         pea 193fb <PutChar+0x56d>
    3f10:	|         move.l d0,-(sp)
    3f12:	|         jsr 184d4 <debug_register_bitmap>
    3f18:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    3f1c:	|         move.l 80(sp),d0
    3f20:	|         movea.w d0,a1
    3f22:	|         move.l 76(sp),d0
    3f26:	|         lsl.w #3,d0
    3f28:	|         movea.w d0,a0
    3f2a:	|         move.l 1c6da <CstViewBuffer>,d0
    3f30:	|         clr.l -(sp)
    3f32:	|         pea 5 <_start+0x5>
    3f36:	|         move.l a1,-(sp)
    3f38:	|         move.l a0,-(sp)
    3f3a:	|         pea 1940a <PutChar+0x57c>
    3f40:	|         move.l d0,-(sp)
    3f42:	|         jsr 184d4 <debug_register_bitmap>
    3f48:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    3f4c:	|         move.l 1c6d6 <CstCopperList>,d0
    3f52:	|     ,-- beq.s 3f64 <CstReserveBackdrop+0x33a>
    3f54:	|     |   move.l 1c6de <CstDrawBuffer>,d0
    3f5a:	|     +-- beq.s 3f64 <CstReserveBackdrop+0x33a>
    3f5c:	|     |   move.l 1c6da <CstViewBuffer>,d0
    3f62:	|  ,--|-- bne.s 3f76 <CstReserveBackdrop+0x34c>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3f64:	|  |  '-> pea 19419 <PutChar+0x58b>
    3f6a:	|  |      jsr 183ec <KPrintF>
    3f70:	|  |      addq.l #4,sp
    return FALSE;
    3f72:	|  |      clr.w d0
    3f74:	+--|----- bra.s 3fa4 <CstReserveBackdrop+0x37a>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    3f76:	|  '----> pea 19446 <PutChar+0x5b8>
    3f7c:	|         jsr 183ec <KPrintF>
    3f82:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    3f84:	|         move.l 1c6d6 <CstCopperList>,d0
    3f8a:	|         move.l d0,-(sp)
    3f8c:	|         jsr 3ade <CstSetCl>
    3f92:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    3f94:	|         pea 1946d <PutChar+0x5df>
    3f9a:	|         jsr 183ec <KPrintF>
    3fa0:	|         addq.l #4,sp
  return TRUE;
    3fa2:	|         moveq #1,d0

}
    3fa4:	'-------> movea.l (sp)+,a6
    3fa6:	          lea 68(sp),sp
    3faa:	          rts

00003fac <CstUnfreeze>:

void CstUnfreeze() {
    3fac:	       lea -52(sp),sp
    3fb0:	       move.l a6,-(sp)
    3fb2:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    3fb4:	       pea 19490 <PutChar+0x602>
    3fba:	       jsr 183ec <KPrintF>
    3fc0:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    3fc2:	       move.l 1c702 <winWidth>,d0
    3fc8:	       lsr.l #3,d0
    3fca:	       move.l d0,d1
    3fcc:	       move.l 1c706 <winHeight>,d0
    3fd2:	       move.l d0,d0
    3fd4:	       muls.w d0,d1
    3fd6:	       move.w d1,d0
    3fd8:	       add.w d0,d0
    3fda:	       add.w d0,d0
    3fdc:	       move.w d0,d2
    3fde:	       add.w d1,d2
    3fe0:	       move.w d2,46(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3fe4:	       move.l #14675968,42(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    3fec:	       move.l 1c706 <winHeight>,d0
    3ff2:	       move.l d0,d0
    3ff4:	       movea.w d0,a1
    3ff6:	       move.l 1c702 <winWidth>,d0
    3ffc:	       move.l d0,d0
    3ffe:	       movea.w d0,a0
    4000:	       move.l 1c6d2 <CstBackDropBackup>,d0
    4006:	       clr.l -(sp)
    4008:	       pea 5 <_start+0x5>
    400c:	       move.l a1,-(sp)
    400e:	       move.l a0,-(sp)
    4010:	       pea 190ad <PutChar+0x21f>
    4016:	       move.l d0,-(sp)
    4018:	       jsr 184d4 <debug_register_bitmap>
    401e:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    4022:	       move.l 1c6d2 <CstBackDropBackup>,56(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    402a:	       move.l 1c6ce <CstBackDrop>,52(sp)
  for(int i=0;i<size/4;i++) 
    4032:	       clr.l 48(sp)
    4036:	   ,-- bra.s 405c <CstUnfreeze+0xb0>
  {
    *dst++ = *src++;
    4038:	,--|-> move.l 56(sp),d1
    403c:	|  |   move.l d1,d0
    403e:	|  |   addq.l #4,d0
    4040:	|  |   move.l d0,56(sp)
    4044:	|  |   move.l 52(sp),d0
    4048:	|  |   move.l d0,d2
    404a:	|  |   addq.l #4,d2
    404c:	|  |   move.l d2,52(sp)
    4050:	|  |   movea.l d1,a0
    4052:	|  |   move.l (a0),d1
    4054:	|  |   movea.l d0,a0
    4056:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    4058:	|  |   addq.l #1,48(sp)
    405c:	|  '-> move.w 46(sp),d0
    4060:	|      lsr.w #2,d0
    4062:	|      move.w d0,d0
    4064:	|      andi.l #65535,d0
    406a:	|      cmp.l 48(sp),d0
    406e:	'----- bgt.s 4038 <CstUnfreeze+0x8c>
  }

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    4070:	       move.l 1c6e6 <CstCleanupQueueDrawBuffer>,38(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    4078:	       moveq #20,d0
    407a:	       move.l d0,34(sp)
    407e:	       clr.l 30(sp)
    4082:	       move.l 1c7ba <SysBase>,d0
    4088:	       movea.l d0,a6
    408a:	       move.l 34(sp),d0
    408e:	       move.l 30(sp),d1
    4092:	       jsr -684(a6)
    4096:	       move.l d0,26(sp)
    409a:	       move.l 26(sp),d0
    409e:	       move.l d0,1c6e6 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
    40a4:	       movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    40aa:	       move.l 38(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = 0;
    40b0:	       movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    40b6:	       clr.w (a0)
  CstCleanupQueueDrawBuffer->y = 0;
    40b8:	       movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    40be:	       clr.w 2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
    40c2:	       movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    40c8:	       clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = winWidth/16;
    40cc:	       move.l 1c702 <winWidth>,d0
    40d2:	       lsr.l #4,d0
    40d4:	       movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    40da:	       move.l d0,d0
    40dc:	       move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = winHeight;
    40e0:	       move.l 1c706 <winHeight>,d0
    40e6:	       movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    40ec:	       move.l d0,d0
    40ee:	       move.w d0,10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = 0;
    40f2:	       movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    40f8:	       clr.w 12(a0)
  CstCleanupQueueDrawBuffer->starty = 0;
    40fc:	       movea.l 1c6e6 <CstCleanupQueueDrawBuffer>,a0
    4102:	       clr.w 14(a0)
  next = CstCleanupQueueViewBuffer;
    4106:	       move.l 1c6e2 <CstCleanupQueueViewBuffer>,38(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    410e:	       moveq #20,d2
    4110:	       move.l d2,22(sp)
    4114:	       clr.l 18(sp)
    4118:	       move.l 1c7ba <SysBase>,d0
    411e:	       movea.l d0,a6
    4120:	       move.l 22(sp),d0
    4124:	       move.l 18(sp),d1
    4128:	       jsr -684(a6)
    412c:	       move.l d0,14(sp)
    4130:	       move.l 14(sp),d0
    4134:	       move.l d0,1c6e2 <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    413a:	       movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    4140:	       move.l 38(sp),16(a0)
  CstCleanupQueueViewBuffer->x = 0;
    4146:	       movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    414c:	       clr.w (a0)
  CstCleanupQueueViewBuffer->y = 0;
    414e:	       movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    4154:	       clr.w 2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    4158:	       movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    415e:	       clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = winWidth/16;
    4162:	       move.l 1c702 <winWidth>,d0
    4168:	       lsr.l #4,d0
    416a:	       movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    4170:	       move.l d0,d0
    4172:	       move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = winHeight;
    4176:	       move.l 1c706 <winHeight>,d0
    417c:	       movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    4182:	       move.l d0,d0
    4184:	       move.w d0,10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = 0;
    4188:	       movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    418e:	       clr.w 12(a0)
  CstCleanupQueueViewBuffer->starty = 0;  
    4192:	       movea.l 1c6e2 <CstCleanupQueueViewBuffer>,a0
    4198:	       clr.w 14(a0)
  
  if( CstBackDropBackup) {
    419c:	       move.l 1c6d2 <CstBackDropBackup>,d0
    41a2:	   ,-- beq.s 41ca <CstUnfreeze+0x21e>
    KPrintF("CstUnfreeze: Free CstBackdropBackup");
    41a4:	   |   pea 194bb <PutChar+0x62d>
    41aa:	   |   jsr 183ec <KPrintF>
    41b0:	   |   addq.l #4,sp
    FreeVec( CstBackDropBackup);
    41b2:	   |   move.l 1c6d2 <CstBackDropBackup>,10(sp)
    41ba:	   |   move.l 1c7ba <SysBase>,d0
    41c0:	   |   movea.l d0,a6
    41c2:	   |   movea.l 10(sp),a1
    41c6:	   |   jsr -690(a6)
  }

  KPrintF("CstUnfreeze: Finished");
    41ca:	   '-> pea 194df <PutChar+0x651>
    41d0:	       jsr 183ec <KPrintF>
    41d6:	       addq.l #4,sp

}
    41d8:	       nop
    41da:	       move.l (sp)+,d2
    41dc:	       movea.l (sp)+,a6
    41de:	       lea 52(sp),sp
    41e2:	       rts

000041e4 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    41e4:	       lea -28(sp),sp
    41e8:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    41ec:	       move.l 52(sp),-(sp)
    41f0:	       jsr 169f6 <stringWidth>
    41f6:	       addq.l #4,sp
    41f8:	       asr.l #1,d0
    41fa:	       move.l d0,-(sp)
    41fc:	       jsr 1881e <__floatsisf>
    4202:	       addq.l #4,sp
    4204:	       move.l d0,d1
    4206:	       move.l 1c142 <cameraZoom>,d0
    420c:	       move.l d0,-(sp)
    420e:	       move.l d1,-(sp)
    4210:	       jsr 186d4 <__divsf3>
    4216:	       addq.l #8,sp
    4218:	       move.l d0,-(sp)
    421a:	       jsr 187b6 <__fixsfsi>
    4220:	       addq.l #4,sp
    4222:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    4226:	       move.l 56(sp),d0
    422a:	       sub.l 44(sp),d0
    422e:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    4232:	       move.l 56(sp),d0
    4236:	       add.l 44(sp),d0
    423a:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    423e:	       moveq #12,d0
    4240:	       move.l d0,32(sp)
    4244:	       clr.l 28(sp)
    4248:	       move.l 1c7ba <SysBase>,d0
    424e:	       movea.l d0,a6
    4250:	       move.l 32(sp),d0
    4254:	       move.l 28(sp),d1
    4258:	       jsr -684(a6)
    425c:	       move.l d0,24(sp)
    4260:	       move.l 24(sp),d0
    4264:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    4268:	       movea.l 1c6fe <speech>,a0
    426e:	       move.l 4(a0),d0
    4272:	       movea.l 20(sp),a0
    4276:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    427a:	       move.l 52(sp),-(sp)
    427e:	       jsr b8 <copyString>
    4284:	       addq.l #4,sp
    4286:	       movea.l 20(sp),a0
    428a:	       move.l d0,(a0)
	newLine -> x = xx1;
    428c:	       movea.l 20(sp),a0
    4290:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    4296:	       movea.l 1c6fe <speech>,a0
    429c:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    42a2:	       moveq #4,d0
    42a4:	       cmp.l 40(sp),d0
    42a8:	   ,-- blt.s 42ca <addSpeechLine+0xe6>
    42aa:	   |   movea.l 60(sp),a0
    42ae:	   |   move.l (a0),d1
    42b0:	   |   moveq #5,d0
    42b2:	   |   sub.l 40(sp),d0
    42b6:	   |   cmp.l d1,d0
    42b8:	   +-- ble.s 42ca <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    42ba:	   |   moveq #5,d0
    42bc:	   |   sub.l 40(sp),d0
    42c0:	   |   movea.l 60(sp),a0
    42c4:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    42c6:	,--|-- bra.w 43f6 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    42ca:	|  '-> move.l 36(sp),-(sp)
    42ce:	|      jsr 1881e <__floatsisf>
    42d4:	|      addq.l #4,sp
    42d6:	|      move.l d0,d2
    42d8:	|      move.l 1c702 <winWidth>,d0
    42de:	|      move.l d0,-(sp)
    42e0:	|      jsr 18846 <__floatunsisf>
    42e6:	|      addq.l #4,sp
    42e8:	|      move.l d0,d1
    42ea:	|      move.l 1c142 <cameraZoom>,d0
    42f0:	|      move.l d0,-(sp)
    42f2:	|      move.l d1,-(sp)
    42f4:	|      jsr 186d4 <__divsf3>
    42fa:	|      addq.l #8,sp
    42fc:	|      move.l #1084227584,-(sp)
    4302:	|      move.l d0,-(sp)
    4304:	|      jsr 18b12 <__subsf3>
    430a:	|      addq.l #8,sp
    430c:	|      move.l d0,-(sp)
    430e:	|      move.l d2,-(sp)
    4310:	|      jsr 18906 <__gesf2>
    4316:	|      addq.l #8,sp
    4318:	|      tst.l d0
    431a:	|  ,-- bge.s 4320 <addSpeechLine+0x13c>
}
    431c:	+--|-- bra.w 43f6 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    4320:	|  '-> movea.l 60(sp),a0
    4324:	|      move.l (a0),d0
    4326:	|      move.l d0,-(sp)
    4328:	|      jsr 1881e <__floatsisf>
    432e:	|      addq.l #4,sp
    4330:	|      move.l d0,-(sp)
    4332:	|      jsr 18740 <__extendsfdf2>
    4338:	|      addq.l #4,sp
    433a:	|      move.l d0,d4
    433c:	|      move.l d1,d5
    433e:	|      move.l 1c702 <winWidth>,d0
    4344:	|      move.l d0,-(sp)
    4346:	|      jsr 18846 <__floatunsisf>
    434c:	|      addq.l #4,sp
    434e:	|      move.l d0,d1
    4350:	|      move.l 1c142 <cameraZoom>,d0
    4356:	|      move.l d0,-(sp)
    4358:	|      move.l d1,-(sp)
    435a:	|      jsr 186d4 <__divsf3>
    4360:	|      addq.l #8,sp
    4362:	|      move.l d0,-(sp)
    4364:	|      jsr 18740 <__extendsfdf2>
    436a:	|      addq.l #4,sp
    436c:	|      clr.l -(sp)
    436e:	|      move.l #1075052544,-(sp)
    4374:	|      move.l d1,-(sp)
    4376:	|      move.l d0,-(sp)
    4378:	|      jsr 18ab0 <__subdf3>
    437e:	|      lea 16(sp),sp
    4382:	|      move.l d0,d2
    4384:	|      move.l d1,d3
    4386:	|      move.l 36(sp),-(sp)
    438a:	|      jsr 187de <__floatsidf>
    4390:	|      addq.l #4,sp
    4392:	|      move.l d1,-(sp)
    4394:	|      move.l d0,-(sp)
    4396:	|      move.l d3,-(sp)
    4398:	|      move.l d2,-(sp)
    439a:	|      jsr 18ab0 <__subdf3>
    43a0:	|      lea 16(sp),sp
    43a4:	|      move.l d1,-(sp)
    43a6:	|      move.l d0,-(sp)
    43a8:	|      move.l d5,-(sp)
    43aa:	|      move.l d4,-(sp)
    43ac:	|      jsr 1893c <__gtdf2>
    43b2:	|      lea 16(sp),sp
    43b6:	|      tst.l d0
    43b8:	|  ,-- bgt.s 43bc <addSpeechLine+0x1d8>
}
    43ba:	+--|-- bra.s 43f6 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    43bc:	|  '-> move.l 1c702 <winWidth>,d0
    43c2:	|      move.l d0,-(sp)
    43c4:	|      jsr 18846 <__floatunsisf>
    43ca:	|      addq.l #4,sp
    43cc:	|      move.l d0,d1
    43ce:	|      move.l 1c142 <cameraZoom>,d0
    43d4:	|      move.l d0,-(sp)
    43d6:	|      move.l d1,-(sp)
    43d8:	|      jsr 186d4 <__divsf3>
    43de:	|      addq.l #8,sp
    43e0:	|      move.l d0,-(sp)
    43e2:	|      jsr 187b6 <__fixsfsi>
    43e8:	|      addq.l #4,sp
    43ea:	|      subq.l #5,d0
    43ec:	|      sub.l 36(sp),d0
    43f0:	|      movea.l 60(sp),a0
    43f4:	|      move.l d0,(a0)
}
    43f6:	'----> nop
    43f8:	       movem.l (sp)+,d2-d5/a6
    43fc:	       lea 28(sp),sp
    4400:	       rts

00004402 <initSpeech>:


void initSpeech () {
    4402:	       lea -12(sp),sp
    4406:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    4408:	       moveq #20,d0
    440a:	       move.l d0,12(sp)
    440e:	       clr.l 8(sp)
    4412:	       move.l 1c7ba <SysBase>,d0
    4418:	       movea.l d0,a6
    441a:	       move.l 12(sp),d0
    441e:	       move.l 8(sp),d1
    4422:	       jsr -684(a6)
    4426:	       move.l d0,4(sp)
    442a:	       move.l 4(sp),d0
    442e:	       move.l d0,1c6fe <speech>
	if (speech) {
    4434:	       move.l 1c6fe <speech>,d0
    443a:	,----- beq.s 4466 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    443c:	|      movea.l 1c6fe <speech>,a0
    4442:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    4444:	|      movea.l 1c6fe <speech>,a0
    444a:	|      clr.l 4(a0)
		speech -> speechY = 0;
    444e:	|      movea.l 1c6fe <speech>,a0
    4454:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    4458:	|      movea.l 1c6fe <speech>,a0
    445e:	|      moveq #-1,d0
    4460:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    4464:	|  ,-- bra.s 4474 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    4466:	'--|-> pea 194f5 <PutChar+0x667>
    446c:	   |   jsr 183ec <KPrintF>
    4472:	   |   addq.l #4,sp
}
    4474:	   '-> nop
    4476:	       movea.l (sp)+,a6
    4478:	       lea 12(sp),sp
    447c:	       rts

0000447e <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    447e:	       movea.l 1c6fe <speech>,a0
    4484:	       move.l 4(a0),d0
    4488:	,----- beq.s 4496 <isThereAnySpeechGoingOn+0x18>
    448a:	|      movea.l 1c6fe <speech>,a0
    4490:	|      move.l 16(a0),d0
    4494:	|  ,-- bra.s 4498 <isThereAnySpeechGoingOn+0x1a>
    4496:	'--|-> moveq #-1,d0
}
    4498:	   '-> rts

0000449a <killAllSpeech>:

void killAllSpeech () {
    449a:	       lea -12(sp),sp
    449e:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    44a0:	       movea.l 1c6fe <speech>,a0
    44a6:	       move.l 12(a0),d0
    44aa:	       moveq #-1,d1
    44ac:	       cmp.l d0,d1
    44ae:	   ,-- beq.s 44bc <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    44b0:	   |   movea.l 1c6fe <speech>,a0
    44b6:	   |   moveq #-1,d0
    44b8:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    44bc:	   '-> movea.l 1c6fe <speech>,a0
    44c2:	       move.l (a0),d0
    44c4:	,----- beq.w 4550 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    44c8:	|      movea.l 1c6fe <speech>,a0
    44ce:	|      move.l (a0),d1
    44d0:	|      lea -132(sp),sp
    44d4:	|      move.l sp,d0
    44d6:	|      movea.w #132,a0
    44da:	|      move.l a0,-(sp)
    44dc:	|      move.l d1,-(sp)
    44de:	|      move.l d0,-(sp)
    44e0:	|      jsr 183a0 <memcpy>
    44e6:	|      lea 12(sp),sp
    44ea:	|      jsr b3dc <makeSilent>
    44f0:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    44f4:	|      movea.l 1c6fe <speech>,a0
    44fa:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    44fc:	+----- bra.s 4550 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    44fe:	|  ,-> movea.l 1c6fe <speech>,a0
    4504:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    450a:	|  |   movea.l 1c6fe <speech>,a0
    4510:	|  |   movea.l 4(a0),a1
    4514:	|  |   movea.l 1c6fe <speech>,a0
    451a:	|  |   move.l 4(a1),d0
    451e:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    4522:	|  |   movea.l 12(sp),a0
    4526:	|  |   move.l (a0),8(sp)
    452a:	|  |   move.l 1c7ba <SysBase>,d0
    4530:	|  |   movea.l d0,a6
    4532:	|  |   movea.l 8(sp),a1
    4536:	|  |   jsr -690(a6)
		FreeVec(killMe);
    453a:	|  |   move.l 12(sp),4(sp)
    4540:	|  |   move.l 1c7ba <SysBase>,d0
    4546:	|  |   movea.l d0,a6
    4548:	|  |   movea.l 4(sp),a1
    454c:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    4550:	'--|-> movea.l 1c6fe <speech>,a0
    4556:	   |   move.l 4(a0),d0
    455a:	   '-- bne.s 44fe <killAllSpeech+0x64>
	}
}
    455c:	       nop
    455e:	       nop
    4560:	       movea.l (sp)+,a6
    4562:	       lea 12(sp),sp
    4566:	       rts

00004568 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    4568:	pea 2 <_start+0x2>
    456c:	move.l 8(sp),-(sp)
    4570:	jsr 46c8 <setFrames>
    4576:	addq.l #8,sp
}
    4578:	nop
    457a:	rts

0000457c <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    457c:	       lea -52(sp),sp
    4580:	       move.l a6,-(sp)
    4582:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    4584:	       movea.l 64(sp),a0
    4588:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    458e:	       move.l 1c11a <speechSpeed>,d0
    4594:	       move.l 68(sp),-(sp)
    4598:	       move.l d0,-(sp)
    459a:	       jsr a46 <putFloat>
    45a0:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    45a2:	       movea.l 64(sp),a0
    45a6:	       move.l 8(a0),d0
    45aa:	       move.l 68(sp),-(sp)
    45ae:	       move.l d0,-(sp)
    45b0:	       jsr 8d0 <put2bytes>
    45b6:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    45b8:	       movea.l 64(sp),a0
    45bc:	       move.l 16(a0),d0
    45c0:	       move.l 68(sp),-(sp)
    45c4:	       move.l d0,-(sp)
    45c6:	       jsr 8d0 <put2bytes>
    45cc:	       addq.l #8,sp
		if (sS -> currentTalker) {
    45ce:	       movea.l 64(sp),a0
    45d2:	       move.l (a0),d0
    45d4:	   ,-- beq.s 4618 <saveSpeech+0x9c>
			FPutC (fp, 1);
    45d6:	   |   move.l 68(sp),40(sp)
    45dc:	   |   moveq #1,d0
    45de:	   |   move.l d0,36(sp)
    45e2:	   |   move.l 1c7c2 <DOSBase>,d0
    45e8:	   |   movea.l d0,a6
    45ea:	   |   move.l 40(sp),d1
    45ee:	   |   move.l 36(sp),d2
    45f2:	   |   jsr -312(a6)
    45f6:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    45fa:	   |   movea.l 64(sp),a0
    45fe:	   |   movea.l (a0),a0
    4600:	   |   movea.l 114(a0),a0
    4604:	   |   move.l 4(a0),d0
    4608:	   |   move.l 68(sp),-(sp)
    460c:	   |   move.l d0,-(sp)
    460e:	   |   jsr 8d0 <put2bytes>
    4614:	   |   addq.l #8,sp
    4616:	,--|-- bra.s 4694 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    4618:	|  '-> move.l 68(sp),52(sp)
    461e:	|      clr.l 48(sp)
    4622:	|      move.l 1c7c2 <DOSBase>,d0
    4628:	|      movea.l d0,a6
    462a:	|      move.l 52(sp),d1
    462e:	|      move.l 48(sp),d2
    4632:	|      jsr -312(a6)
    4636:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    463a:	+----- bra.s 4694 <saveSpeech+0x118>
			FPutC (fp, 1);
    463c:	|  ,-> move.l 68(sp),16(sp)
    4642:	|  |   moveq #1,d0
    4644:	|  |   move.l d0,12(sp)
    4648:	|  |   move.l 1c7c2 <DOSBase>,d0
    464e:	|  |   movea.l d0,a6
    4650:	|  |   move.l 16(sp),d1
    4654:	|  |   move.l 12(sp),d2
    4658:	|  |   jsr -312(a6)
    465c:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    4660:	|  |   movea.l 56(sp),a0
    4664:	|  |   move.l (a0),d0
    4666:	|  |   move.l 68(sp),-(sp)
    466a:	|  |   move.l d0,-(sp)
    466c:	|  |   jsr bd8 <writeString>
    4672:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    4674:	|  |   movea.l 56(sp),a0
    4678:	|  |   move.l 8(a0),d0
    467c:	|  |   move.l 68(sp),-(sp)
    4680:	|  |   move.l d0,-(sp)
    4682:	|  |   jsr 8d0 <put2bytes>
    4688:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    468a:	|  |   movea.l 56(sp),a0
    468e:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    4694:	'--|-> tst.l 56(sp)
    4698:	   '-- bne.s 463c <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    469a:	       move.l 68(sp),28(sp)
    46a0:	       clr.l 24(sp)
    46a4:	       move.l 1c7c2 <DOSBase>,d0
    46aa:	       movea.l d0,a6
    46ac:	       move.l 28(sp),d1
    46b0:	       move.l 24(sp),d2
    46b4:	       jsr -312(a6)
    46b8:	       move.l d0,20(sp)
}
    46bc:	       nop
    46be:	       move.l (sp)+,d2
    46c0:	       movea.l (sp)+,a6
    46c2:	       lea 52(sp),sp
    46c6:	       rts

000046c8 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    46c8:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    46ca:	movea.l 8(sp),a0
    46ce:	movea.l 80(a0),a0
    46d2:	move.l (a0),d2
    46d4:	movea.l 8(sp),a0
    46d8:	movea.l 80(a0),a0
    46dc:	move.l 4(a0),d0
    46e0:	move.l 12(sp),-(sp)
    46e4:	move.l d0,-(sp)
    46e6:	jsr 18d78 <__mulsi3>
    46ec:	addq.l #8,sp
    46ee:	move.l d0,d1
    46f0:	movea.l 8(sp),a0
    46f4:	move.l 106(a0),d0
    46f8:	add.l d1,d0
    46fa:	add.l d0,d0
    46fc:	add.l d0,d0
    46fe:	movea.l d2,a0
    4700:	adda.l d0,a0
    4702:	move.l (a0),d0
    4704:	movea.l 8(sp),a0
    4708:	move.l d0,72(a0)
}
    470c:	nop
    470e:	move.l (sp)+,d2
    4710:	rts

00004712 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    4712:	       lea -20(sp),sp
    4716:	       move.l d2,-(sp)
    4718:	       move.l 40(sp),d0
    471c:	       move.w d0,d0
    471e:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    4722:	       movea.l 1c6fe <speech>,a0
    4728:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    472e:	       move.l 32(sp),-(sp)
    4732:	       jsr ae9c <findPerson>
    4738:	       addq.l #4,sp
    473a:	       move.l d0,16(sp)
    if (thisPerson) {
    473e:	   ,-- beq.s 4764 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    4740:	   |   movea.w 6(sp),a0
    4744:	   |   move.l a0,-(sp)
    4746:	   |   move.l 40(sp),-(sp)
    474a:	   |   move.l 24(sp),-(sp)
    474e:	   |   move.l 40(sp),-(sp)
    4752:	   |   jsr 482a <wrapSpeechPerson>
    4758:	   |   lea 16(sp),sp
    475c:	   |   move.l d0,20(sp)
    4760:	,--|-- bra.w 481e <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    4764:	|  '-> move.l 32(sp),-(sp)
    4768:	|      jsr 16bce <getRegionForObject>
    476e:	|      addq.l #4,sp
    4770:	|      move.l d0,12(sp)
        if (thisRegion) {
    4774:	|  ,-- beq.s 47e0 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    4776:	|  |   movea.l 12(sp),a0
    477a:	|  |   movea.l 28(a0),a0
    477e:	|  |   move.l 28(a0),d0
    4782:	|  |   movea.l 12(sp),a0
    4786:	|  |   movea.l 4(a0),a1
    478a:	|  |   movea.l 12(sp),a0
    478e:	|  |   movea.l 28(a0),a0
    4792:	|  |   move.l 20(a0),d1
    4796:	|  |   movea.l a1,a0
    4798:	|  |   suba.l d1,a0
    479a:	|  |   move.l 1c874 <cameraY>,d1
    47a0:	|  |   movea.l a0,a1
    47a2:	|  |   suba.l d1,a1
    47a4:	|  |   movea.l 12(sp),a0
    47a8:	|  |   move.l (a0),d2
    47aa:	|  |   movea.l 12(sp),a0
    47ae:	|  |   move.l 8(a0),d1
    47b2:	|  |   add.l d2,d1
    47b4:	|  |   move.l d1,d2
    47b6:	|  |   asr.l #1,d2
    47b8:	|  |   move.l 1c870 <cameraX>,d1
    47be:	|  |   movea.l d2,a0
    47c0:	|  |   suba.l d1,a0
    47c2:	|  |   move.l 36(sp),-(sp)
    47c6:	|  |   move.l d0,-(sp)
    47c8:	|  |   move.l a1,-(sp)
    47ca:	|  |   move.l a0,-(sp)
    47cc:	|  |   move.l 44(sp),-(sp)
    47d0:	|  |   jsr 4948 <wrapSpeechXY>
    47d6:	|  |   lea 20(sp),sp
    47da:	|  |   move.l d0,20(sp)
    47de:	+--|-- bra.s 481e <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    47e0:	|  '-> move.l 32(sp),-(sp)
    47e4:	|      jsr de0a <findObjectType>
    47ea:	|      addq.l #4,sp
    47ec:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    47f0:	|      movea.l 8(sp),a0
    47f4:	|      move.l 28(a0),d1
    47f8:	|      move.l 1c702 <winWidth>,d0
    47fe:	|      lsr.l #1,d0
    4800:	|      move.l 36(sp),-(sp)
    4804:	|      move.l d1,-(sp)
    4806:	|      pea a <_start+0xa>
    480a:	|      move.l d0,-(sp)
    480c:	|      move.l 44(sp),-(sp)
    4810:	|      jsr 4948 <wrapSpeechXY>
    4816:	|      lea 20(sp),sp
    481a:	|      move.l d0,20(sp)
        }
    }
    return i;
    481e:	'----> move.l 20(sp),d0
}
    4822:	       move.l (sp)+,d2
    4824:	       lea 20(sp),sp
    4828:	       rts

0000482a <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    482a:	    subq.l #8,sp
    482c:	    movem.l d2-d4,-(sp)
    4830:	    move.l 36(sp),d0
    4834:	    move.w d0,d0
    4836:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    483a:	    movea.l 28(sp),a0
    483e:	    movea.l 114(a0),a0
    4842:	    move.l 28(a0),d2
    4846:	    movea.l 28(sp),a0
    484a:	    move.l 4(a0),d3
    484e:	    move.l 1c874 <cameraY>,d0
    4854:	    move.l d0,-(sp)
    4856:	    jsr 1881e <__floatsisf>
    485c:	    addq.l #4,sp
    485e:	    move.l d0,-(sp)
    4860:	    move.l d3,-(sp)
    4862:	    jsr 18b12 <__subsf3>
    4868:	    addq.l #8,sp
    486a:	    move.l d0,d3
    486c:	    movea.l 28(sp),a0
    4870:	    move.l 32(a0),d4
    4874:	    movea.l 28(sp),a0
    4878:	    move.l 20(a0),d1
    487c:	    movea.l 28(sp),a0
    4880:	    move.l 24(a0),d0
    4884:	    sub.l d0,d1
    4886:	    move.l d1,-(sp)
    4888:	    jsr 1881e <__floatsisf>
    488e:	    addq.l #4,sp
    4890:	    move.l d0,-(sp)
    4892:	    move.l d4,-(sp)
    4894:	    jsr 188d0 <__mulsf3>
    489a:	    addq.l #8,sp
    489c:	    move.l d0,-(sp)
    489e:	    move.l d3,-(sp)
    48a0:	    jsr 18b12 <__subsf3>
    48a6:	    addq.l #8,sp
    48a8:	    move.l d0,d3
    48aa:	    movea.l 28(sp),a0
    48ae:	    movea.l 114(a0),a0
    48b2:	    move.l 20(a0),d0
    48b6:	    move.l d0,-(sp)
    48b8:	    jsr 1881e <__floatsisf>
    48be:	    addq.l #4,sp
    48c0:	    move.l d0,-(sp)
    48c2:	    move.l d3,-(sp)
    48c4:	    jsr 18b12 <__subsf3>
    48ca:	    addq.l #8,sp
    48cc:	    move.l d0,-(sp)
    48ce:	    jsr 187b6 <__fixsfsi>
    48d4:	    addq.l #4,sp
    48d6:	    move.l d0,d4
    48d8:	    movea.l 28(sp),a0
    48dc:	    move.l (a0),d3
    48de:	    move.l 1c870 <cameraX>,d0
    48e4:	    move.l d0,-(sp)
    48e6:	    jsr 1881e <__floatsisf>
    48ec:	    addq.l #4,sp
    48ee:	    move.l d0,-(sp)
    48f0:	    move.l d3,-(sp)
    48f2:	    jsr 18b12 <__subsf3>
    48f8:	    addq.l #8,sp
    48fa:	    move.l d0,-(sp)
    48fc:	    jsr 187b6 <__fixsfsi>
    4902:	    addq.l #4,sp
    4904:	    move.l 32(sp),-(sp)
    4908:	    move.l d2,-(sp)
    490a:	    move.l d4,-(sp)
    490c:	    move.l d0,-(sp)
    490e:	    move.l 40(sp),-(sp)
    4912:	    jsr 4948 <wrapSpeechXY>
    4918:	    lea 20(sp),sp
    491c:	    move.l d0,16(sp)
	if (animPerson) {
    4920:	    tst.w 14(sp)
    4924:	,-- beq.s 493c <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    4926:	|   move.l 28(sp),-(sp)
    492a:	|   jsr 4568 <makeTalker>
    4930:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    4932:	|   movea.l 1c6fe <speech>,a0
    4938:	|   move.l 28(sp),(a0)
	}
	return i;
    493c:	'-> move.l 16(sp),d0
}
    4940:	    movem.l (sp)+,d2-d4
    4944:	    addq.l #8,sp
    4946:	    rts

00004948 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    4948:	                   lea -16(sp),sp
    494c:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    4950:	                   clr.l 16(sp)
    killAllSpeech();
    4954:	                   jsr 449a <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    495a:	                   move.l 36(sp),-(sp)
    495e:	                   jsr 14df8 <strlen>
    4964:	                   addq.l #4,sp
    4966:	                   movea.l d0,a0
    4968:	                   lea 20(a0),a0
    496c:	                   move.l a0,-(sp)
    496e:	                   jsr 18846 <__floatunsisf>
    4974:	                   addq.l #4,sp
    4976:	                   move.l d0,d1
    4978:	                   move.l 1c11a <speechSpeed>,d0
    497e:	                   move.l d0,-(sp)
    4980:	                   move.l d1,-(sp)
    4982:	                   jsr 188d0 <__mulsf3>
    4988:	                   addq.l #8,sp
    498a:	                   move.l d0,-(sp)
    498c:	                   jsr 187b6 <__fixsfsi>
    4992:	                   addq.l #4,sp
    4994:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    4998:	               ,-- bgt.s 49a0 <wrapSpeechXY+0x58>
    499a:	               |   moveq #1,d0
    499c:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    49a0:	               '-> moveq #-1,d1
    49a2:	                   cmp.l 52(sp),d1
    49a6:	               ,-- beq.s 49e6 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    49a8:	               |   move.l 1c884 <speechMode>,d0
    49ae:	               +-- ble.s 49e6 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    49b0:	               |   clr.l -(sp)
    49b2:	               |   move.l 56(sp),-(sp)
    49b6:	               |   jsr daca <startSound>
    49bc:	               |   addq.l #8,sp
    49be:	               |   tst.w d0
    49c0:	               +-- beq.s 49e6 <wrapSpeechXY+0x9e>
                speechTime = -10;
    49c2:	               |   moveq #-10,d0
    49c4:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    49c8:	               |   movea.l 1c6fe <speech>,a0
    49ce:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    49d4:	               |   move.l 1c884 <speechMode>,d0
    49da:	               |   moveq #2,d1
    49dc:	               |   cmp.l d0,d1
    49de:	               +-- bne.s 49e6 <wrapSpeechXY+0x9e>
    49e0:	               |   moveq #-10,d0
    49e2:	,--------------|-- bra.w 4c6c <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    49e6:	|              '-> movea.l 1c6fe <speech>,a0
    49ec:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    49f2:	|     ,----------- bra.w 4aa6 <wrapSpeechXY+0x15e>
        a = wrap;
    49f6:	|  ,--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    49fc:	|  |  |        ,-- bra.s 4a0c <wrapSpeechXY+0xc4>
            a--;
    49fe:	|  |  |  ,-----|-> subq.l #1,28(sp)
            if (a == 0) {
    4a02:	|  |  |  |     +-- bne.s 4a0c <wrapSpeechXY+0xc4>
                a = wrap;
    4a04:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    4a0a:	|  |  |  |  ,--|-- bra.s 4a1e <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    4a0c:	|  |  |  |  |  '-> move.l 28(sp),d0
    4a10:	|  |  |  |  |      movea.l 36(sp),a0
    4a14:	|  |  |  |  |      adda.l d0,a0
    4a16:	|  |  |  |  |      move.b (a0),d0
    4a18:	|  |  |  |  |      cmpi.b #32,d0
    4a1c:	|  |  |  '--|----- bne.s 49fe <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    4a1e:	|  |  |     '----> move.l 28(sp),d0
    4a22:	|  |  |            movea.l 36(sp),a0
    4a26:	|  |  |            adda.l d0,a0
    4a28:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    4a2a:	|  |  |            lea 16(sp),a0
    4a2e:	|  |  |            move.l a0,-(sp)
    4a30:	|  |  |            move.l 44(sp),-(sp)
    4a34:	|  |  |            move.l 44(sp),-(sp)
    4a38:	|  |  |            jsr 41e4 <addSpeechLine>
    4a3e:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    4a42:	|  |  |            move.l 28(sp),d0
    4a46:	|  |  |            movea.l 36(sp),a0
    4a4a:	|  |  |            adda.l d0,a0
    4a4c:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    4a50:	|  |  |            move.l 28(sp),d0
    4a54:	|  |  |            addq.l #1,d0
    4a56:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    4a5a:	|  |  |            move.l 44(sp),-(sp)
    4a5e:	|  |  |            jsr 1881e <__floatsisf>
    4a64:	|  |  |            addq.l #4,sp
    4a66:	|  |  |            move.l d0,d2
    4a68:	|  |  |            move.l 1c8ae <fontHeight>,d0
    4a6e:	|  |  |            move.l d0,-(sp)
    4a70:	|  |  |            jsr 1881e <__floatsisf>
    4a76:	|  |  |            addq.l #4,sp
    4a78:	|  |  |            move.l d0,d1
    4a7a:	|  |  |            move.l 1c142 <cameraZoom>,d0
    4a80:	|  |  |            move.l d0,-(sp)
    4a82:	|  |  |            move.l d1,-(sp)
    4a84:	|  |  |            jsr 186d4 <__divsf3>
    4a8a:	|  |  |            addq.l #8,sp
    4a8c:	|  |  |            move.l d0,-(sp)
    4a8e:	|  |  |            move.l d2,-(sp)
    4a90:	|  |  |            jsr 18b12 <__subsf3>
    4a96:	|  |  |            addq.l #8,sp
    4a98:	|  |  |            move.l d0,-(sp)
    4a9a:	|  |  |            jsr 187b6 <__fixsfsi>
    4aa0:	|  |  |            addq.l #4,sp
    4aa2:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    4aa6:	|  |  '----------> move.l 36(sp),-(sp)
    4aaa:	|  |               jsr 14df8 <strlen>
    4ab0:	|  |               addq.l #4,sp
    4ab2:	|  |               move.l d0,d1
    4ab4:	|  |               move.l 48(sp),d0
    4ab8:	|  |               cmp.l d1,d0
    4aba:	|  '-------------- bcs.w 49f6 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    4abe:	|                  lea 16(sp),a0
    4ac2:	|                  move.l a0,-(sp)
    4ac4:	|                  move.l 44(sp),-(sp)
    4ac8:	|                  move.l 44(sp),-(sp)
    4acc:	|                  jsr 41e4 <addSpeechLine>
    4ad2:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    4ad6:	|                  move.l 44(sp),-(sp)
    4ada:	|                  jsr 1881e <__floatsisf>
    4ae0:	|                  addq.l #4,sp
    4ae2:	|                  move.l d0,d2
    4ae4:	|                  move.l 1c8ae <fontHeight>,d0
    4aea:	|                  move.l d0,-(sp)
    4aec:	|                  jsr 1881e <__floatsisf>
    4af2:	|                  addq.l #4,sp
    4af4:	|                  move.l d0,d1
    4af6:	|                  move.l 1c142 <cameraZoom>,d0
    4afc:	|                  move.l d0,-(sp)
    4afe:	|                  move.l d1,-(sp)
    4b00:	|                  jsr 186d4 <__divsf3>
    4b06:	|                  addq.l #8,sp
    4b08:	|                  move.l d0,-(sp)
    4b0a:	|                  move.l d2,-(sp)
    4b0c:	|                  jsr 18b12 <__subsf3>
    4b12:	|                  addq.l #8,sp
    4b14:	|                  move.l d0,-(sp)
    4b16:	|                  jsr 187b6 <__fixsfsi>
    4b1c:	|                  addq.l #4,sp
    4b1e:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    4b22:	|              ,-- bpl.s 4b40 <wrapSpeechXY+0x1f8>
    4b24:	|              |   movea.l 1c6fe <speech>,a0
    4b2a:	|              |   move.l 8(a0),d0
    4b2e:	|              |   movea.l 1c6fe <speech>,a0
    4b34:	|              |   sub.l 44(sp),d0
    4b38:	|              |   move.l d0,8(a0)
    4b3c:	|           ,--|-- bra.w 4c2e <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    4b40:	|           |  '-> movea.l 1c6fe <speech>,a0
    4b46:	|           |      move.l 8(a0),d0
    4b4a:	|           |      move.l d0,-(sp)
    4b4c:	|           |      jsr 1881e <__floatsisf>
    4b52:	|           |      addq.l #4,sp
    4b54:	|           |      move.l d0,d2
    4b56:	|           |      move.l 1c874 <cameraY>,d0
    4b5c:	|           |      move.l d0,-(sp)
    4b5e:	|           |      jsr 1881e <__floatsisf>
    4b64:	|           |      addq.l #4,sp
    4b66:	|           |      move.l d0,d3
    4b68:	|           |      move.l 1c706 <winHeight>,d4
    4b6e:	|           |      move.l 1c8ae <fontHeight>,d0
    4b74:	|           |      pea 3 <_start+0x3>
    4b78:	|           |      move.l d0,-(sp)
    4b7a:	|           |      jsr 18df6 <__divsi3>
    4b80:	|           |      addq.l #8,sp
    4b82:	|           |      move.l d4,d1
    4b84:	|           |      sub.l d0,d1
    4b86:	|           |      move.l d1,-(sp)
    4b88:	|           |      jsr 18846 <__floatunsisf>
    4b8e:	|           |      addq.l #4,sp
    4b90:	|           |      move.l d0,d1
    4b92:	|           |      move.l 1c142 <cameraZoom>,d0
    4b98:	|           |      move.l d0,-(sp)
    4b9a:	|           |      move.l d1,-(sp)
    4b9c:	|           |      jsr 186d4 <__divsf3>
    4ba2:	|           |      addq.l #8,sp
    4ba4:	|           |      move.l d0,-(sp)
    4ba6:	|           |      move.l d3,-(sp)
    4ba8:	|           |      jsr 185da <__addsf3>
    4bae:	|           |      addq.l #8,sp
    4bb0:	|           |      move.l d0,-(sp)
    4bb2:	|           |      move.l d2,-(sp)
    4bb4:	|           |      jsr 1898a <__gtsf2>
    4bba:	|           |      addq.l #8,sp
    4bbc:	|           |      tst.l d0
    4bbe:	|           +----- ble.s 4c2e <wrapSpeechXY+0x2e6>
    4bc0:	|           |      move.l 1c874 <cameraY>,d0
    4bc6:	|           |      move.l d0,-(sp)
    4bc8:	|           |      jsr 1881e <__floatsisf>
    4bce:	|           |      addq.l #4,sp
    4bd0:	|           |      move.l d0,d2
    4bd2:	|           |      move.l 1c706 <winHeight>,d3
    4bd8:	|           |      move.l 1c8ae <fontHeight>,d0
    4bde:	|           |      pea 3 <_start+0x3>
    4be2:	|           |      move.l d0,-(sp)
    4be4:	|           |      jsr 18df6 <__divsi3>
    4bea:	|           |      addq.l #8,sp
    4bec:	|           |      move.l d3,d1
    4bee:	|           |      sub.l d0,d1
    4bf0:	|           |      move.l d1,-(sp)
    4bf2:	|           |      jsr 18846 <__floatunsisf>
    4bf8:	|           |      addq.l #4,sp
    4bfa:	|           |      move.l d0,d1
    4bfc:	|           |      move.l 1c142 <cameraZoom>,d0
    4c02:	|           |      move.l d0,-(sp)
    4c04:	|           |      move.l d1,-(sp)
    4c06:	|           |      jsr 186d4 <__divsf3>
    4c0c:	|           |      addq.l #8,sp
    4c0e:	|           |      move.l d0,-(sp)
    4c10:	|           |      move.l d2,-(sp)
    4c12:	|           |      jsr 185da <__addsf3>
    4c18:	|           |      addq.l #8,sp
    4c1a:	|           |      movea.l 1c6fe <speech>,a2
    4c20:	|           |      move.l d0,-(sp)
    4c22:	|           |      jsr 187b6 <__fixsfsi>
    4c28:	|           |      addq.l #4,sp
    4c2a:	|           |      move.l d0,8(a2)

    if (offset) {
    4c2e:	|           '----> move.l 16(sp),d0
    4c32:	|        ,-------- beq.s 4c68 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    4c34:	|        |         movea.l 1c6fe <speech>,a0
    4c3a:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    4c40:	|        |     ,-- bra.s 4c62 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    4c42:	|        |  ,--|-> movea.l 20(sp),a0
    4c46:	|        |  |  |   move.l 8(a0),d1
    4c4a:	|        |  |  |   move.l 16(sp),d0
    4c4e:	|        |  |  |   add.l d1,d0
    4c50:	|        |  |  |   movea.l 20(sp),a0
    4c54:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    4c58:	|        |  |  |   movea.l 20(sp),a0
    4c5c:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    4c62:	|        |  |  '-> tst.l 20(sp)
    4c66:	|        |  '----- bne.s 4c42 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    4c68:	|        '-------> move.l 24(sp),d0
}
    4c6c:	'----------------> movem.l (sp)+,d2-d4/a2
    4c70:	                   lea 16(sp),sp
    4c74:	                   rts

00004c76 <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    4c76:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    4c7a:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    4c7e:	       tst.l 24(sp)
    4c82:	   ,-- bge.s 4c88 <drawLine+0x12>
    4c84:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    4c88:	   '-> tst.l 28(sp)
    4c8c:	   ,-- bge.s 4c92 <drawLine+0x1c>
    4c8e:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    4c92:	   '-> tst.l 32(sp)
    4c96:	   ,-- bge.s 4c9c <drawLine+0x26>
    4c98:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    4c9c:	   '-> tst.l 36(sp)
    4ca0:	   ,-- bge.s 4ca6 <drawLine+0x30>
    4ca2:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    4ca6:	   '-> move.l 1c852 <sceneWidth>,d0
    4cac:	       cmp.l 24(sp),d0
    4cb0:	   ,-- bge.s 4cc0 <drawLine+0x4a>
    4cb2:	   |   move.l 1c852 <sceneWidth>,d0
    4cb8:	   |   move.l d0,d1
    4cba:	   |   subq.l #1,d1
    4cbc:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    4cc0:	   '-> move.l 1c852 <sceneWidth>,d0
    4cc6:	       cmp.l 32(sp),d0
    4cca:	   ,-- bge.s 4cda <drawLine+0x64>
    4ccc:	   |   move.l 1c852 <sceneWidth>,d0
    4cd2:	   |   move.l d0,d1
    4cd4:	   |   subq.l #1,d1
    4cd6:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    4cda:	   '-> move.l 1c856 <sceneHeight>,d0
    4ce0:	       cmp.l 28(sp),d0
    4ce4:	   ,-- bge.s 4cf4 <drawLine+0x7e>
    4ce6:	   |   move.l 1c856 <sceneHeight>,d0
    4cec:	   |   move.l d0,d1
    4cee:	   |   subq.l #1,d1
    4cf0:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    4cf4:	   '-> move.l 1c856 <sceneHeight>,d0
    4cfa:	       cmp.l 36(sp),d0
    4cfe:	   ,-- bge.s 4d0e <drawLine+0x98>
    4d00:	   |   move.l 1c856 <sceneHeight>,d0
    4d06:	   |   move.l d0,d1
    4d08:	   |   subq.l #1,d1
    4d0a:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    4d0e:	   '-> move.l 24(sp),d0
    4d12:	       cmp.l 32(sp),d0
    4d16:	,----- ble.s 4d32 <drawLine+0xbc>
		x = x2; 
    4d18:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    4d1e:	|      tst.w 10(sp)
    4d22:	|      seq d0
    4d24:	|      neg.b d0
    4d26:	|      move.b d0,d0
    4d28:	|      andi.w #255,d0
    4d2c:	|      move.w d0,10(sp)
    4d30:	|  ,-- bra.s 4d38 <drawLine+0xc2>
	} else x = x1;
    4d32:	'--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    4d38:	   '-> move.l 28(sp),d1
    4d3c:	       cmp.l 36(sp),d1
    4d40:	,----- ble.s 4d5c <drawLine+0xe6>
		y = y2; 
    4d42:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    4d48:	|      tst.w 10(sp)
    4d4c:	|      seq d0
    4d4e:	|      neg.b d0
    4d50:	|      move.b d0,d0
    4d52:	|      andi.w #255,d0
    4d56:	|      move.w d0,10(sp)
    4d5a:	|  ,-- bra.s 4d62 <drawLine+0xec>
	} else y = y1;	
    4d5c:	'--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    4d62:	   '-> move.l 32(sp),d0
    4d66:	       sub.l 24(sp),d0
    4d6a:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    4d6e:	       move.l 6(sp),d0
    4d72:	   ,-- bpl.s 4d76 <drawLine+0x100>
    4d74:	   |   neg.l d0
    4d76:	   '-> move.l d0,6(sp)
	int diffY = y2-y1;	
    4d7a:	       move.l 36(sp),d1
    4d7e:	       sub.l 28(sp),d1
    4d82:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    4d86:	       move.l 2(sp),d0
    4d8a:	   ,-- bpl.s 4d8e <drawLine+0x118>
    4d8c:	   |   neg.l d0
    4d8e:	   '-> move.l d0,2(sp)
	
	if (! diffX) {
    4d92:	       tst.l 6(sp)
    4d96:	   ,-- bne.s 4dba <drawLine+0x144>
		diffX = 1;
    4d98:	   |   moveq #1,d0
    4d9a:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    4d9e:	   |   move.l 1c852 <sceneWidth>,d0
    4da4:	   |   subq.l #1,d0
    4da6:	   |   cmp.l 16(sp),d0
    4daa:	   +-- bne.s 4dba <drawLine+0x144>
    4dac:	   |   move.l 1c852 <sceneWidth>,d0
    4db2:	   |   move.l d0,d1
    4db4:	   |   subq.l #2,d1
    4db6:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    4dba:	   '-> tst.l 2(sp)
    4dbe:	   ,-- bne.s 4de2 <drawLine+0x16c>
		diffY = 1;
    4dc0:	   |   moveq #1,d0
    4dc2:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    4dc6:	   |   move.l 1c856 <sceneHeight>,d0
    4dcc:	   |   subq.l #1,d0
    4dce:	   |   cmp.l 12(sp),d0
    4dd2:	   +-- bne.s 4de2 <drawLine+0x16c>
    4dd4:	   |   move.l 1c856 <sceneHeight>,d0
    4dda:	   |   move.l d0,d1
    4ddc:	   |   subq.l #2,d1
    4dde:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    4de2:	   '-> pea 19532 <PutChar+0x6a4>
    4de8:	       jsr 183ec <KPrintF>
    4dee:	       addq.l #4,sp
	
}
    4df0:	       nop
    4df2:	       lea 20(sp),sp
    4df6:	       rts

00004df8 <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    4df8:	                      lea -24(sp),sp
    4dfc:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    4dfe:	                      move.l 1c70a <firstTexture>,d0
    4e04:	,-------------------- beq.w 4ee2 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    4e08:	|                     clr.l 24(sp)
    4e0c:	|     ,-------------- bra.w 4ed6 <deleteTextures+0xde>
			BOOL found = FALSE;
    4e10:	|  ,--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    4e14:	|  |  |               move.l 1c70a <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    4e1c:	|  |  |               movea.l 20(sp),a0
    4e20:	|  |  |               move.l (a0),d1
    4e22:	|  |  |               move.l 24(sp),d0
    4e26:	|  |  |               add.l d0,d0
    4e28:	|  |  |               add.l d0,d0
    4e2a:	|  |  |               movea.l 36(sp),a0
    4e2e:	|  |  |               adda.l d0,a0
    4e30:	|  |  |               move.l (a0),d0
    4e32:	|  |  |               cmp.l d1,d0
    4e34:	|  |  |  ,----------- bne.w 4ec8 <deleteTextures+0xd0>
				found = TRUE;
    4e38:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    4e3e:	|  |  |  |            movea.l 20(sp),a0
    4e42:	|  |  |  |            move.l 12(a0),d0
    4e46:	|  |  |  |            move.l d0,1c70a <firstTexture>
				FreeVec(list);
    4e4c:	|  |  |  |            move.l 20(sp),6(sp)
    4e52:	|  |  |  |            move.l 1c7ba <SysBase>,d0
    4e58:	|  |  |  |            movea.l d0,a6
    4e5a:	|  |  |  |            movea.l 6(sp),a1
    4e5e:	|  |  |  |            jsr -690(a6)
				continue;
    4e62:	|  |  |  |  ,-------- bra.s 4ed2 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    4e64:	|  |  |  |  |  ,----> movea.l 20(sp),a0
    4e68:	|  |  |  |  |  |      movea.l 12(a0),a0
    4e6c:	|  |  |  |  |  |      move.l (a0),d1
    4e6e:	|  |  |  |  |  |      move.l 24(sp),d0
    4e72:	|  |  |  |  |  |      add.l d0,d0
    4e74:	|  |  |  |  |  |      add.l d0,d0
    4e76:	|  |  |  |  |  |      movea.l 36(sp),a0
    4e7a:	|  |  |  |  |  |      adda.l d0,a0
    4e7c:	|  |  |  |  |  |      move.l (a0),d0
    4e7e:	|  |  |  |  |  |      cmp.l d1,d0
    4e80:	|  |  |  |  |  |  ,-- bne.s 4ebe <deleteTextures+0xc6>
					found = TRUE;
    4e82:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    4e88:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4e8c:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    4e92:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4e96:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    4e9a:	|  |  |  |  |  |  |   move.l 12(a0),d0
    4e9e:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4ea2:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    4ea6:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    4eac:	|  |  |  |  |  |  |   move.l 1c7ba <SysBase>,d0
    4eb2:	|  |  |  |  |  |  |   movea.l d0,a6
    4eb4:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    4eb8:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    4ebc:	|  |  |  |  +--|--|-- bra.s 4ed2 <deleteTextures+0xda>
				}
				list = list->next;
    4ebe:	|  |  |  |  |  |  '-> movea.l 20(sp),a0
    4ec2:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    4ec8:	|  |  |  '--|--|----> movea.l 20(sp),a0
    4ecc:	|  |  |     |  |      move.l 12(a0),d0
    4ed0:	|  |  |     |  '----- bne.s 4e64 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    4ed2:	|  |  |     '-------> addq.l #1,24(sp)
    4ed6:	|  |  '-------------> move.l 24(sp),d0
    4eda:	|  |                  cmp.l 32(sp),d0
    4ede:	|  '----------------- bcs.w 4e10 <deleteTextures+0x18>
			}
		}
	}
}
    4ee2:	'-------------------> nop
    4ee4:	                      movea.l (sp)+,a6
    4ee6:	                      lea 24(sp),sp
    4eea:	                      rts

00004eec <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    4eec:	subq.l #4,sp
    4eee:	move.l 8(sp),d0
    4ef2:	move.w d0,d0
    4ef4:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    4ef8:	pea 19555 <PutChar+0x6c7>
    4efe:	jsr 183ec <KPrintF>
    4f04:	addq.l #4,sp
}
    4f06:	nop
    4f08:	addq.l #4,sp
    4f0a:	rts

00004f0c <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    4f0c:	       moveq #-1,d0
    4f0e:	       cmp.l 4(sp),d0
    4f12:	   ,-- bne.s 4f18 <resourceNameFromNum+0xc>
    4f14:	   |   moveq #0,d0
    4f16:	,--|-- bra.s 4f50 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    4f18:	|  '-> move.l 1c796 <numResourceNames>,d0
    4f1e:	|  ,-- bne.s 4f28 <resourceNameFromNum+0x1c>
    4f20:	|  |   move.l #103813,d0
    4f26:	+--|-- bra.s 4f50 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    4f28:	|  '-> move.l 1c796 <numResourceNames>,d0
    4f2e:	|      cmp.l 4(sp),d0
    4f32:	|  ,-- ble.s 4f4a <resourceNameFromNum+0x3e>
    4f34:	|  |   move.l 1c74e <allResourceNames>,d1
    4f3a:	|  |   move.l 4(sp),d0
    4f3e:	|  |   add.l d0,d0
    4f40:	|  |   add.l d0,d0
    4f42:	|  |   movea.l d1,a0
    4f44:	|  |   adda.l d0,a0
    4f46:	|  |   move.l (a0),d0
    4f48:	+--|-- bra.s 4f50 <resourceNameFromNum+0x44>
	return "Unknown resource";
    4f4a:	|  '-> move.l #103822,d0
    4f50:	'----> rts

00004f52 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    4f52:	          lea -44(sp),sp
    4f56:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    4f5a:	          move.l #320,1c702 <winWidth>
    winHeight = 256;
    4f64:	          move.l #256,1c706 <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    4f6e:	          tst.l 60(sp)
    4f72:	      ,-- bne.s 4f8a <main_sludge+0x38>
		bundleFolder = copyString("game/");
    4f74:	      |   pea 1959f <PutChar+0x711>
    4f7a:	      |   jsr b8 <copyString>
    4f80:	      |   addq.l #4,sp
    4f82:	      |   move.l d0,1c71a <bundleFolder>
    4f88:	   ,--|-- bra.s 4fa0 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    4f8a:	   |  '-> movea.l 64(sp),a0
    4f8e:	   |      move.l (a0),d0
    4f90:	   |      move.l d0,-(sp)
    4f92:	   |      jsr b8 <copyString>
    4f98:	   |      addq.l #4,sp
    4f9a:	   |      move.l d0,1c71a <bundleFolder>
	}
    
	int lastSlash = -1;
    4fa0:	   '----> moveq #-1,d0
    4fa2:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4fa6:	          clr.l 44(sp)
    4faa:	   ,----- bra.s 4fcc <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    4fac:	,--|----> move.l 1c71a <bundleFolder>,d1
    4fb2:	|  |      move.l 44(sp),d0
    4fb6:	|  |      movea.l d1,a0
    4fb8:	|  |      adda.l d0,a0
    4fba:	|  |      move.b (a0),d0
    4fbc:	|  |      cmpi.b #47,d0
    4fc0:	|  |  ,-- bne.s 4fc8 <main_sludge+0x76>
    4fc2:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4fc8:	|  |  '-> addq.l #1,44(sp)
    4fcc:	|  '----> move.l 1c71a <bundleFolder>,d1
    4fd2:	|         move.l 44(sp),d0
    4fd6:	|         movea.l d1,a0
    4fd8:	|         adda.l d0,a0
    4fda:	|         move.b (a0),d0
    4fdc:	'-------- bne.s 4fac <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    4fde:	          move.l 1c71a <bundleFolder>,d0
    4fe4:	          move.l 48(sp),d1
    4fe8:	          addq.l #1,d1
    4fea:	          movea.l d0,a0
    4fec:	          adda.l d1,a0
    4fee:	          clr.b (a0)

	if (argc > 1) {
    4ff0:	          moveq #1,d0
    4ff2:	          cmp.l 60(sp),d0
    4ff6:	      ,-- bge.s 5012 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    4ff8:	      |   move.l 60(sp),d0
    4ffc:	      |   addi.l #1073741823,d0
    5002:	      |   add.l d0,d0
    5004:	      |   add.l d0,d0
    5006:	      |   movea.l 64(sp),a0
    500a:	      |   adda.l d0,a0
    500c:	      |   move.l (a0),52(sp)
    5010:	   ,--|-- bra.s 506c <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    5012:	   |  '-> move.l 1c71a <bundleFolder>,d0
    5018:	   |      pea 195a5 <PutChar+0x717>
    501e:	   |      move.l d0,-(sp)
    5020:	   |      jsr 14e38 <joinStrings>
    5026:	   |      addq.l #8,sp
    5028:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    502c:	   |      move.l 52(sp),-(sp)
    5030:	   |      jsr 14d32 <fileExists>
    5036:	   |      addq.l #4,sp
    5038:	   |      tst.b d0
    503a:	   +----- bne.s 506c <main_sludge+0x11a>
			FreeVec(sludgeFile);
    503c:	   |      move.l 52(sp),40(sp)
    5042:	   |      move.l 1c7ba <SysBase>,d0
    5048:	   |      movea.l d0,a6
    504a:	   |      movea.l 40(sp),a1
    504e:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    5052:	   |      move.l 1c71a <bundleFolder>,d0
    5058:	   |      pea 195b2 <PutChar+0x724>
    505e:	   |      move.l d0,-(sp)
    5060:	   |      jsr 14e38 <joinStrings>
    5066:	   |      addq.l #8,sp
    5068:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    506c:	   '----> pea 195bb <PutChar+0x72d>
    5072:	          jsr 183ec <KPrintF>
    5078:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    507a:	          move.l 52(sp),-(sp)
    507e:	          jsr 14d32 <fileExists>
    5084:	          addq.l #4,sp
    5086:	          tst.b d0
    5088:	      ,-- bne.s 50e0 <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    508a:	      |   move.l 1c7c2 <DOSBase>,d0
    5090:	      |   movea.l d0,a6
    5092:	      |   jsr -60(a6)
    5096:	      |   move.l d0,28(sp)
    509a:	      |   move.l 28(sp),d0
    509e:	      |   move.l d0,24(sp)
    50a2:	      |   move.l #103867,20(sp)
    50aa:	      |   moveq #21,d0
    50ac:	      |   move.l d0,16(sp)
    50b0:	      |   move.l 1c7c2 <DOSBase>,d0
    50b6:	      |   movea.l d0,a6
    50b8:	      |   move.l 24(sp),d1
    50bc:	      |   move.l 20(sp),d2
    50c0:	      |   move.l 16(sp),d3
    50c4:	      |   jsr -48(a6)
    50c8:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    50cc:	      |   pea 195bb <PutChar+0x72d>
    50d2:	      |   jsr 183ec <KPrintF>
    50d8:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    50da:	      |   moveq #0,d0
    50dc:	,-----|-- bra.w 52de <main_sludge+0x38c>
	}

	KPrintF("Setgamefilepath\n");
    50e0:	|     '-> pea 195d1 <PutChar+0x743>
    50e6:	|         jsr 183ec <KPrintF>
    50ec:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    50ee:	|         move.l 52(sp),-(sp)
    50f2:	|         jsr 52e8 <setGameFilePath>
    50f8:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    50fa:	|         move.l 52(sp),-(sp)
    50fe:	|         jsr 682e <initSludge>
    5104:	|         addq.l #4,sp
    5106:	|         tst.w d0
    5108:	|     ,-- bne.s 5110 <main_sludge+0x1be>
    510a:	|     |   moveq #0,d0
    510c:	+-----|-- bra.w 52de <main_sludge+0x38c>
	
	if( winWidth != 320 || winHeight != 256) {
    5110:	|     '-> move.l 1c702 <winWidth>,d0
    5116:	|         cmpi.l #320,d0
    511c:	|     ,-- bne.s 512c <main_sludge+0x1da>
    511e:	|     |   move.l 1c706 <winHeight>,d0
    5124:	|     |   cmpi.l #256,d0
    512a:	|  ,--|-- beq.s 514e <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    512c:	|  |  '-> pea 195e2 <PutChar+0x754>
    5132:	|  |      jsr 183ec <KPrintF>
    5138:	|  |      addq.l #4,sp
		winWidth = 320;
    513a:	|  |      move.l #320,1c702 <winWidth>
		winHeight = 256;
    5144:	|  |      move.l #256,1c706 <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    514e:	|  '----> pea 1965f <PutChar+0x7d1>
    5154:	|         jsr 183ec <KPrintF>
    515a:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    515c:	|         move.l 1c706 <winHeight>,d0
    5162:	|         move.l d0,d1
    5164:	|         move.l 1c702 <winWidth>,d0
    516a:	|         move.l d1,-(sp)
    516c:	|         move.l d0,-(sp)
    516e:	|         jsr dce8 <resizeBackdrop>
    5174:	|         addq.l #8,sp
    5176:	|         tst.w d0
    5178:	|     ,-- bne.s 518e <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    517a:	|     |   pea 19672 <PutChar+0x7e4>
    5180:	|     |   jsr 183ec <KPrintF>
    5186:	|     |   addq.l #4,sp
		return FALSE;
    5188:	|     |   moveq #0,d0
    518a:	+-----|-- bra.w 52de <main_sludge+0x38c>
	}

	KPrintF("Init People\n");
    518e:	|     '-> pea 19698 <PutChar+0x80a>
    5194:	|         jsr 183ec <KPrintF>
    519a:	|         addq.l #4,sp
	if (! initPeople ())
    519c:	|         jsr b202 <initPeople>
    51a2:	|         tst.w d0
    51a4:	|     ,-- bne.s 51ba <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    51a6:	|     |   pea 196a5 <PutChar+0x817>
    51ac:	|     |   jsr 183ec <KPrintF>
    51b2:	|     |   addq.l #4,sp
		return FALSE;
    51b4:	|     |   moveq #0,d0
    51b6:	+-----|-- bra.w 52de <main_sludge+0x38c>
	}

	KPrintF("Init Floor\n");
    51ba:	|     '-> pea 196c6 <PutChar+0x838>
    51c0:	|         jsr 183ec <KPrintF>
    51c6:	|         addq.l #4,sp
	if (! initFloor ())
    51c8:	|         jsr 177a2 <initFloor>
    51ce:	|         tst.w d0
    51d0:	|     ,-- bne.s 51e6 <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    51d2:	|     |   pea 196d2 <PutChar+0x844>
    51d8:	|     |   jsr 183ec <KPrintF>
    51de:	|     |   addq.l #4,sp
		
		return FALSE;
    51e0:	|     |   moveq #0,d0
    51e2:	+-----|-- bra.w 52de <main_sludge+0x38c>
	}

	KPrintF("Init Objecttype\n");
    51e6:	|     '-> pea 196f2 <PutChar+0x864>
    51ec:	|         jsr 183ec <KPrintF>
    51f2:	|         addq.l #4,sp
	if (! initObjectTypes ())
    51f4:	|         jsr dea4 <initObjectTypes>
    51fa:	|         tst.w d0
    51fc:	|     ,-- bne.s 5212 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    51fe:	|     |   pea 19703 <PutChar+0x875>
    5204:	|     |   jsr 183ec <KPrintF>
    520a:	|     |   addq.l #4,sp
		return FALSE;
    520c:	|     |   moveq #0,d0
    520e:	+-----|-- bra.w 52de <main_sludge+0x38c>
	}

	KPrintF("Init speech\n");
    5212:	|     '-> pea 19729 <PutChar+0x89b>
    5218:	|         jsr 183ec <KPrintF>
    521e:	|         addq.l #4,sp
	initSpeech ();
    5220:	|         jsr 4402 <initSpeech>
	KPrintF("Init status bar\n");
    5226:	|         pea 19736 <PutChar+0x8a8>
    522c:	|         jsr 183ec <KPrintF>
    5232:	|         addq.l #4,sp
	initStatusBar ();
    5234:	|         jsr 8ace <initStatusBar>

	KPrintF("Get numbered string\n");
    523a:	|         pea 19747 <PutChar+0x8b9>
    5240:	|         jsr 183ec <KPrintF>
    5246:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    5248:	|         pea 1 <_start+0x1>
    524c:	|         jsr 7dd8 <getNumberedString>
    5252:	|         addq.l #4,sp
    5254:	|         move.l d0,1c712 <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    525a:	|         pea 1975c <PutChar+0x8ce>
    5260:	|         jsr 183ec <KPrintF>
    5266:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    5268:	|         move.l 1c78a <noStack>,d0
    526e:	|         pea 1 <_start+0x1>
    5272:	|         move.l d0,-(sp)
    5274:	|         clr.l -(sp)
    5276:	|         clr.l -(sp)
    5278:	|         clr.l -(sp)
    527a:	|         jsr 7ca6 <startNewFunctionNum>
    5280:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    5284:	|         pea 19774 <PutChar+0x8e6>
    528a:	|         jsr 183ec <KPrintF>
    5290:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    5292:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    529a:	|         clr.l 1c71e <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    52a0:	|     ,-- bra.s 52c0 <main_sludge+0x36e>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    52a2:	|  ,--|-> jsr 7b2c <sludgeDisplay>
		CsiCheckInput();
    52a8:	|  |  |   jsr d806 <CsiCheckInput>
		walkAllPeople();
    52ae:	|  |  |   jsr c7c0 <walkAllPeople>
		handleInput();
    52b4:	|  |  |   jsr 65a8 <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    52ba:	|  |  |   jsr 18320 <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    52c0:	|  |  '-> move.l 1c71e <weAreDoneSoQuit>,d0
    52c6:	|  '----- beq.s 52a2 <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    52c8:	|         move.l 52(sp),32(sp)
    52ce:	|         move.l 1c7ba <SysBase>,d0
    52d4:	|         movea.l d0,a6
    52d6:	|         movea.l 32(sp),a1
    52da:	|         jsr -690(a6)
}
    52de:	'-------> movem.l (sp)+,d2-d3/a6
    52e2:	          lea 44(sp),sp
    52e6:	          rts

000052e8 <setGameFilePath>:

void setGameFilePath (char * f) {
    52e8:	          lea -1104(sp),sp
    52ec:	          move.l a6,-(sp)
    52ee:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    52f0:	          move.l #1112,d0
    52f6:	          add.l sp,d0
    52f8:	          addi.l #-1102,d0
    52fe:	          move.l d0,1100(sp)
    5302:	          move.l #998,1096(sp)
    530a:	          move.l 1c7c2 <DOSBase>,d0
    5310:	          movea.l d0,a6
    5312:	          move.l 1100(sp),d1
    5316:	          move.l 1096(sp),d2
    531a:	          jsr -564(a6)
    531e:	          move.w d0,1094(sp)
    5322:	          move.w 1094(sp),d0
    5326:	      ,-- bne.s 5336 <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    5328:	      |   pea 19787 <PutChar+0x8f9>
    532e:	      |   jsr 183ec <KPrintF>
    5334:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    5336:	      '-> moveq #-1,d0
    5338:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    533c:	          clr.l 1104(sp)
    5340:	   ,----- bra.s 535e <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    5342:	,--|----> move.l 1104(sp),d0
    5346:	|  |      movea.l 1116(sp),a0
    534a:	|  |      adda.l d0,a0
    534c:	|  |      move.b (a0),d0
    534e:	|  |      cmpi.b #47,d0
    5352:	|  |  ,-- bne.s 535a <setGameFilePath+0x72>
    5354:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    535a:	|  |  '-> addq.l #1,1104(sp)
    535e:	|  '----> move.l 1104(sp),d0
    5362:	|         movea.l 1116(sp),a0
    5366:	|         adda.l d0,a0
    5368:	|         move.b (a0),d0
    536a:	'-------- bne.s 5342 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    536c:	          moveq #-1,d0
    536e:	          cmp.l 1108(sp),d0
    5372:	   ,----- beq.s 53ec <setGameFilePath+0x104>
		f[got] = 0;	
    5374:	   |      move.l 1108(sp),d0
    5378:	   |      movea.l 1116(sp),a0
    537c:	   |      adda.l d0,a0
    537e:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    5380:	   |      move.l 1116(sp),1090(sp)
    5386:	   |      moveq #-2,d0
    5388:	   |      move.l d0,1086(sp)
    538c:	   |      move.l 1c7c2 <DOSBase>,d0
    5392:	   |      movea.l d0,a6
    5394:	   |      move.l 1090(sp),d1
    5398:	   |      move.l 1086(sp),d2
    539c:	   |      jsr -84(a6)
    53a0:	   |      move.l d0,1082(sp)
    53a4:	   |      move.l 1082(sp),d0
    53a8:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    53ac:	   |      move.l 1078(sp),1074(sp)
    53b2:	   |      move.l 1c7c2 <DOSBase>,d0
    53b8:	   |      movea.l d0,a6
    53ba:	   |      move.l 1074(sp),d1
    53be:	   |      jsr -126(a6)
    53c2:	   |      move.l d0,1070(sp)
    53c6:	   |      move.l 1070(sp),d0
    53ca:	   |  ,-- bne.s 53de <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    53cc:	   |  |   move.l 1116(sp),-(sp)
    53d0:	   |  |   pea 197ad <PutChar+0x91f>
    53d6:	   |  |   jsr 183ec <KPrintF>
    53dc:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    53de:	   |  '-> move.l 1108(sp),d0
    53e2:	   |      movea.l 1116(sp),a0
    53e6:	   |      adda.l d0,a0
    53e8:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    53ec:	   '----> move.l #400,1066(sp)
    53f4:	          clr.l 1062(sp)
    53f8:	          move.l 1c7ba <SysBase>,d0
    53fe:	          movea.l d0,a6
    5400:	          move.l 1066(sp),d0
    5404:	          move.l 1062(sp),d1
    5408:	          jsr -684(a6)
    540c:	          move.l d0,1058(sp)
    5410:	          move.l 1058(sp),d0
    5414:	          move.l d0,1c716 <gamePath>
	if (gamePath==0) {
    541a:	          move.l 1c716 <gamePath>,d0
    5420:	      ,-- bne.s 5434 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    5422:	      |   pea 197e0 <PutChar+0x952>
    5428:	      |   jsr 183ec <KPrintF>
    542e:	      |   addq.l #4,sp
    5430:	   ,--|-- bra.w 551c <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    5434:	   |  '-> move.l 1c716 <gamePath>,1054(sp)
    543c:	   |      moveq #-2,d0
    543e:	   |      move.l d0,1050(sp)
    5442:	   |      move.l 1c7c2 <DOSBase>,d0
    5448:	   |      movea.l d0,a6
    544a:	   |      move.l 1054(sp),d1
    544e:	   |      move.l 1050(sp),d2
    5452:	   |      jsr -84(a6)
    5456:	   |      move.l d0,1046(sp)
    545a:	   |      move.l 1046(sp),d0
    545e:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    5462:	   |      move.l 1042(sp),1038(sp)
    5468:	   |      move.l 1c7c2 <DOSBase>,d0
    546e:	   |      movea.l d0,a6
    5470:	   |      move.l 1038(sp),d1
    5474:	   |      jsr -126(a6)
    5478:	   |      move.l d0,1034(sp)
    547c:	   |      move.l 1034(sp),d0
    5480:	   |  ,-- bne.s 5490 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    5482:	   |  |   pea 1981b <PutChar+0x98d>
    5488:	   |  |   jsr 183ec <KPrintF>
    548e:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    5490:	   |  '-> move.l #1112,d0
    5496:	   |      add.l sp,d0
    5498:	   |      addi.l #-1102,d0
    549e:	   |      move.l d0,1030(sp)
    54a2:	   |      moveq #-2,d0
    54a4:	   |      move.l d0,1026(sp)
    54a8:	   |      move.l 1c7c2 <DOSBase>,d0
    54ae:	   |      movea.l d0,a6
    54b0:	   |      move.l 1030(sp),d1
    54b4:	   |      move.l 1026(sp),d2
    54b8:	   |      jsr -84(a6)
    54bc:	   |      move.l d0,1022(sp)
    54c0:	   |      move.l 1022(sp),d0
    54c4:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    54c8:	   |      move.l 1042(sp),1018(sp)
    54ce:	   |      move.l 1c7c2 <DOSBase>,d0
    54d4:	   |      movea.l d0,a6
    54d6:	   |      move.l 1018(sp),d1
    54da:	   |      jsr -126(a6)
    54de:	   |      move.l d0,1014(sp)
    54e2:	   |      move.l 1014(sp),d0
    54e6:	   |  ,-- bne.s 54fc <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    54e8:	   |  |   moveq #10,d0
    54ea:	   |  |   add.l sp,d0
    54ec:	   |  |   move.l d0,-(sp)
    54ee:	   |  |   pea 19847 <PutChar+0x9b9>
    54f4:	   |  |   jsr 183ec <KPrintF>
    54fa:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    54fc:	   |  '-> move.l 1c716 <gamePath>,d0
    5502:	   +----- beq.s 551c <setGameFilePath+0x234>
    5504:	   |      move.l 1c716 <gamePath>,1010(sp)
    550c:	   |      move.l 1c7ba <SysBase>,d0
    5512:	   |      movea.l d0,a6
    5514:	   |      movea.l 1010(sp),a1
    5518:	   |      jsr -690(a6)
}
    551c:	   '----> move.l (sp)+,d2
    551e:	          movea.l (sp)+,a6
    5520:	          lea 1104(sp),sp
    5524:	          rts

00005526 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    5526:	,-------> subq.l #8,sp
    5528:	|         move.l a6,-(sp)
	KPrintF("abortFunction %d started\n", &fun->originalNumber);
    552a:	|         move.l 16(sp),d0
    552e:	|         move.l d0,-(sp)
    5530:	|         pea 1994f <PutChar+0xac1>
    5536:	|         jsr 183ec <KPrintF>
    553c:	|         addq.l #8,sp
	int a;


	pauseFunction (fun);
    553e:	|         move.l 16(sp),-(sp)
    5542:	|         jsr 78b2 <pauseFunction>
    5548:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    554a:	|     ,-- bra.s 555c <abortFunction+0x36>
    554c:	|  ,--|-> moveq #24,d0
    554e:	|  |  |   add.l 16(sp),d0
    5552:	|  |  |   move.l d0,-(sp)
    5554:	|  |  |   jsr 16290 <trimStack>
    555a:	|  |  |   addq.l #4,sp
    555c:	|  |  '-> movea.l 16(sp),a0
    5560:	|  |      move.l 24(a0),d0
    5564:	|  '----- bne.s 554c <abortFunction+0x26>
	//FreeVec( fun -> compiledLines);
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    5566:	|         clr.l 8(sp)
    556a:	|     ,-- bra.s 558a <abortFunction+0x64>
    556c:	|  ,--|-> movea.l 16(sp),a0
    5570:	|  |  |   move.l 20(a0),d1
    5574:	|  |  |   move.l 8(sp),d0
    5578:	|  |  |   lsl.l #3,d0
    557a:	|  |  |   add.l d1,d0
    557c:	|  |  |   move.l d0,-(sp)
    557e:	|  |  |   jsr 15b5a <unlinkVar>
    5584:	|  |  |   addq.l #4,sp
    5586:	|  |  |   addq.l #1,8(sp)
    558a:	|  |  '-> movea.l 16(sp),a0
    558e:	|  |      move.l 8(a0),d0
    5592:	|  |      cmp.l 8(sp),d0
    5596:	|  '----- bgt.s 556c <abortFunction+0x46>
	if( fun -> numLocals > 0) {
    5598:	|         movea.l 16(sp),a0
    559c:	|         move.l 8(a0),d0
    55a0:	|     ,-- ble.s 55bc <abortFunction+0x96>
		FreeVec(fun -> localVars);
    55a2:	|     |   movea.l 16(sp),a0
    55a6:	|     |   move.l 20(a0),4(sp)
    55ac:	|     |   move.l 1c7ba <SysBase>,d0
    55b2:	|     |   movea.l d0,a6
    55b4:	|     |   movea.l 4(sp),a1
    55b8:	|     |   jsr -690(a6)
	}

	unlinkVar (&fun -> reg);
    55bc:	|     '-> moveq #28,d0
    55be:	|         add.l 16(sp),d0
    55c2:	|         move.l d0,-(sp)
    55c4:	|         jsr 15b5a <unlinkVar>
    55ca:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);	
    55cc:	|         movea.l 16(sp),a0
    55d0:	|         move.l 40(a0),d0
    55d4:	|     ,-- beq.s 55e6 <abortFunction+0xc0>
    55d6:	|     |   movea.l 16(sp),a0
    55da:	|     |   move.l 40(a0),d0
    55de:	|     |   move.l d0,-(sp)
    55e0:	'-----|-- jsr 5526 <abortFunction>(pc)
    55e4:	      |   addq.l #4,sp
	fun->unloaded = 1;
    55e6:	      '-> movea.l 16(sp),a0
    55ea:	          moveq #1,d0
    55ec:	          move.l d0,58(a0)

	KPrintF("abortFunction finished\n");
    55f0:	          pea 19969 <PutChar+0xadb>
    55f6:	          jsr 183ec <KPrintF>
    55fc:	          addq.l #4,sp
}
    55fe:	          nop
    5600:	          movea.l (sp)+,a6
    5602:	          addq.l #8,sp
    5604:	          rts

00005606 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    5606:	          subq.l #8,sp
	int n = 0;
    5608:	          clr.l 4(sp)
	*killedMyself = FALSE;
    560c:	          movea.l 20(sp),a0
    5610:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    5612:	          move.l 1c752 <allRunningFunctions>,(sp)
	while (fun) {
    5618:	   ,----- bra.s 5646 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    561a:	,--|----> movea.l (sp),a0
    561c:	|  |      move.l (a0),d0
    561e:	|  |      cmp.l 12(sp),d0
    5622:	|  |  ,-- bne.s 5640 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    5624:	|  |  |   movea.l (sp),a0
    5626:	|  |  |   move.w #1,54(a0)
			n++;
    562c:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    5630:	|  |  |   move.l (sp),d0
    5632:	|  |  |   cmp.l 16(sp),d0
    5636:	|  |  +-- bne.s 5640 <cancelAFunction+0x3a>
    5638:	|  |  |   movea.l 20(sp),a0
    563c:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    5640:	|  |  '-> movea.l (sp),a0
    5642:	|  |      move.l 44(a0),(sp)
	while (fun) {
    5646:	|  '----> tst.l (sp)
    5648:	'-------- bne.s 561a <cancelAFunction+0x14>
	}
	return n;
    564a:	          move.l 4(sp),d0
}
    564e:	          addq.l #8,sp
    5650:	          rts

00005652 <completeTimers>:


void completeTimers () {
    5652:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    5654:	          move.l 1c752 <allRunningFunctions>,(sp)

	while (thisFunction) {
    565a:	   ,----- bra.s 5670 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    565c:	,--|----> movea.l (sp),a0
    565e:	|  |      move.b 56(a0),d0
    5662:	|  |  ,-- bne.s 566a <completeTimers+0x18>
    5664:	|  |  |   movea.l (sp),a0
    5666:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    566a:	|  |  '-> movea.l (sp),a0
    566c:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    5670:	|  '----> tst.l (sp)
    5672:	'-------- bne.s 565c <completeTimers+0xa>
	}
}
    5674:	          nop
    5676:	          nop
    5678:	          addq.l #4,sp
    567a:	          rts

0000567c <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    567c:	                                                             lea -80(sp),sp
	BOOL keepLooping = TRUE;
    5680:	                                                             move.w #1,78(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    5686:	                                                             movea.l 84(sp),a0
    568a:	                                                             move.w 54(a0),d0
    568e:	,----------------------------------------------------------- beq.w 653a <continueFunction+0xebe>
		abortFunction (fun);
    5692:	|                                                            move.l 84(sp),-(sp)
    5696:	|                                                            jsr 5526 <abortFunction>
    569c:	|                                                            addq.l #4,sp
		return TRUE;
    569e:	|                                                            moveq #1,d0
    56a0:	|  ,-------------------------------------------------------- bra.w 6544 <continueFunction+0xec8>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    56a4:	|  |  ,----------------------------------------------------> move.w #1,76(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    56aa:	|  |  |                                                      movea.l 84(sp),a0
    56ae:	|  |  |                                                      move.l 4(a0),d1
    56b2:	|  |  |                                                      movea.l 84(sp),a0
    56b6:	|  |  |                                                      move.l 36(a0),d0
    56ba:	|  |  |                                                      lsl.l #3,d0
    56bc:	|  |  |                                                      movea.l d1,a0
    56be:	|  |  |                                                      adda.l d0,a0
    56c0:	|  |  |                                                      move.l 4(a0),72(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    56c6:	|  |  |                                                      movea.l 84(sp),a0
    56ca:	|  |  |                                                      move.l 4(a0),d1
    56ce:	|  |  |                                                      movea.l 84(sp),a0
    56d2:	|  |  |                                                      move.l 36(a0),d0
    56d6:	|  |  |                                                      lsl.l #3,d0
    56d8:	|  |  |                                                      movea.l d1,a0
    56da:	|  |  |                                                      adda.l d0,a0
    56dc:	|  |  |                                                      move.l (a0),68(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    56e0:	|  |  |                                                      moveq #41,d0
    56e2:	|  |  |                                                      cmp.l 68(sp),d0
    56e6:	|  |  |  ,-------------------------------------------------- bcs.w 64ee <continueFunction+0xe72>
    56ea:	|  |  |  |                                                   move.l 68(sp),d0
    56ee:	|  |  |  |                                                   add.l d0,d0
    56f0:	|  |  |  |                                                   movea.l d0,a0
    56f2:	|  |  |  |                                                   adda.l #22270,a0
    56f8:	|  |  |  |                                                   move.w (a0),d0
    56fa:	|  |  |  |                                                   jmp (56fe <continueFunction+0x82>,pc,d0.w)
    56fe:	|  |  |  |                                                   bset d6,(84,a0,d0.w)
    5702:	|  |  |  |                                                   .short 0x0a8c
    5704:	|  |  |  |                                                   eori.w #2446,-(a4)
    5708:	|  |  |  |                                                   bchg d4,-(a0)
    570a:	|  |  |  |                                                   .short 0x09ba
    570c:	|  |  |  |                                                   andi.l #182979304,-(a2)
    5712:	|  |  |  |                                                   .short 0x0ae8
    5714:	|  |  |  |                                                   .short 0x0ae8
    5716:	|  |  |  |                                                   .short 0x02d0
    5718:	|  |  |  |                                                   btst d1,2792(a4)
    571c:	|  |  |  |                                                   .short 0x0ae8
    571e:	|  |  |  |                                                   .short 0x0ae8
    5720:	|  |  |  |                                                   andi.l #61342600,d2
    5726:	|  |  |  |                                                   .short 0x00e2
    5728:	|  |  |  |                                                   .short 0x040a
    572a:	|  |  |  |                                                   andi.w #968,-(a2)
    572e:	|  |  |  |                                                   eori.b #72,2534(a6)
    5734:	|  |  |  |                                                   .short 0x0ae8
    5736:	|  |  |  |                                                   .short 0x0ae8
    5738:	|  |  |  |                                                   eori.l #65538792,(a6)+
    573e:	|  |  |  |                                                   .short 0x0ae8
    5740:	|  |  |  |                                                   bclr d3,d0
    5742:	|  |  |  |                                                   bchg #-6,(-22,a0,d0.l)
    5748:	|  |  |  |                                                   addi.w #1068,d6
    574c:	|  |  |  |                                                   subi.b #44,2570(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    5752:	|  |  |  |                                                   movea.l 84(sp),a0
    5756:	|  |  |  |                                                   move.l 40(a0),d0
    575a:	|  |  |  |                                            ,----- beq.s 57c8 <continueFunction+0x14c>
				struct loadedFunction * returnTo = fun -> calledBy;
    575c:	|  |  |  |                                            |      movea.l 84(sp),a0
    5760:	|  |  |  |                                            |      move.l 40(a0),48(sp)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    5766:	|  |  |  |                                            |      movea.l 84(sp),a0
    576a:	|  |  |  |                                            |      move.w 48(a0),d0
    576e:	|  |  |  |                                            |  ,-- beq.s 5788 <continueFunction+0x10c>
    5770:	|  |  |  |                                            |  |   moveq #28,d1
    5772:	|  |  |  |                                            |  |   add.l 48(sp),d1
    5776:	|  |  |  |                                            |  |   moveq #28,d0
    5778:	|  |  |  |                                            |  |   add.l 84(sp),d0
    577c:	|  |  |  |                                            |  |   move.l d1,-(sp)
    577e:	|  |  |  |                                            |  |   move.l d0,-(sp)
    5780:	|  |  |  |                                            |  |   jsr 15dc6 <copyVariable>
    5786:	|  |  |  |                                            |  |   addq.l #8,sp
				int tmptimeleft = fun -> timeLeft;
    5788:	|  |  |  |                                            |  '-> movea.l 84(sp),a0
    578c:	|  |  |  |                                            |      move.l 12(a0),44(sp)
				finishFunction (fun);
    5792:	|  |  |  |                                            |      move.l 84(sp),-(sp)
    5796:	|  |  |  |                                            |      jsr 654a <finishFunction>
    579c:	|  |  |  |                                            |      addq.l #4,sp
				fun = returnTo;
    579e:	|  |  |  |                                            |      move.l 48(sp),84(sp)
				fun -> timeLeft += tmptimeleft;
    57a4:	|  |  |  |                                            |      movea.l 84(sp),a0
    57a8:	|  |  |  |                                            |      move.l 12(a0),d0
    57ac:	|  |  |  |                                            |      add.l 44(sp),d0
    57b0:	|  |  |  |                                            |      movea.l 84(sp),a0
    57b4:	|  |  |  |                                            |      move.l d0,12(a0)
				restartFunction (fun);
    57b8:	|  |  |  |                                            |      move.l 84(sp),-(sp)
    57bc:	|  |  |  |                                            |      jsr 792a <restartFunction>
    57c2:	|  |  |  |                                            |      addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    57c4:	|  |  |  |  ,-----------------------------------------|----- bra.w 6522 <continueFunction+0xea6>
				finishFunction (fun);
    57c8:	|  |  |  |  |                                         '----> move.l 84(sp),-(sp)
    57cc:	|  |  |  |  |                                                jsr 654a <finishFunction>
    57d2:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    57d4:	|  |  |  |  |                                                clr.w 76(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    57d8:	|  |  |  |  |                                                clr.w 78(sp)
			break;
    57dc:	|  |  |  |  +----------------------------------------------- bra.w 6522 <continueFunction+0xea6>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    57e0:	|  |  |  |  |                                                movea.l 84(sp),a0
    57e4:	|  |  |  |  |                                                move.l 28(a0),d0
    57e8:	|  |  |  |  |                                                moveq #2,d1
    57ea:	|  |  |  |  |                                                cmp.l d0,d1
    57ec:	|  |  |  |  |                                            ,-- beq.s 57f8 <continueFunction+0x17c>
    57ee:	|  |  |  |  |                                            |   moveq #4,d1
    57f0:	|  |  |  |  |                                            |   cmp.l d0,d1
    57f2:	|  |  |  |  |                                         ,--|-- beq.s 5846 <continueFunction+0x1ca>
    57f4:	|  |  |  |  |                                ,--------|--|-- bra.w 592e <continueFunction+0x2b2>
				case SVT_FUNC:
				pauseFunction (fun);		
    57f8:	|  |  |  |  |                                |        |  '-> move.l 84(sp),-(sp)
    57fc:	|  |  |  |  |                                |        |      jsr 78b2 <pauseFunction>
    5802:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    5804:	|  |  |  |  |                                |        |      moveq #24,d0
    5806:	|  |  |  |  |                                |        |      add.l 84(sp),d0
    580a:	|  |  |  |  |                                |        |      movea.l 84(sp),a0
    580e:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    5812:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    5816:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    5818:	|  |  |  |  |                                |        |      move.l 92(sp),-(sp)
    581c:	|  |  |  |  |                                |        |      move.l 84(sp),-(sp)
    5820:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    5822:	|  |  |  |  |                                |        |      jsr 7ca6 <startNewFunctionNum>
    5828:	|  |  |  |  |                                |        |      lea 20(sp),sp
    582c:	|  |  |  |  |                                |        |      tst.l d0
    582e:	|  |  |  |  |                                |        |  ,-- bne.s 5836 <continueFunction+0x1ba>
    5830:	|  |  |  |  |                                |        |  |   clr.w d0
    5832:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 6544 <continueFunction+0xec8>
				fun = allRunningFunctions;
    5836:	|  |  |  |  |                                |        |  '-> move.l 1c752 <allRunningFunctions>,84(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    583e:	|  |  |  |  |                                |        |      clr.w 76(sp)
				break;
    5842:	|  |  |  |  |                                |  ,-----|----- bra.w 5942 <continueFunction+0x2c6>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    5846:	|  |  |  |  |                                |  |     '----> move.l 72(sp),d1
    584a:	|  |  |  |  |                                |  |            movea.l 84(sp),a0
    584e:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    5852:	|  |  |  |  |                                |  |            move.l 84(sp),-(sp)
    5856:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    5858:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    585a:	|  |  |  |  |                                |  |            jsr 145ee <callBuiltIn>
    5860:	|  |  |  |  |                                |  |            lea 12(sp),sp
    5864:	|  |  |  |  |                                |  |            move.l d0,56(sp)

					switch (br) {
    5868:	|  |  |  |  |                                |  |            moveq #5,d0
    586a:	|  |  |  |  |                                |  |            cmp.l 56(sp),d0
    586e:	|  |  |  |  |                                |  |  ,-------- bcs.w 592a <continueFunction+0x2ae>
    5872:	|  |  |  |  |                                |  |  |         move.l 56(sp),d0
    5876:	|  |  |  |  |                                |  |  |         add.l d0,d0
    5878:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    587a:	|  |  |  |  |                                |  |  |         adda.l #22662,a0
    5880:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    5882:	|  |  |  |  |                                |  |  |         jmp (5886 <continueFunction+0x20a>,pc,d0.w)
    5886:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    588c:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    5890:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    5896:	|  |  |  |  |                                |  |  |         subx.l d1,d4
    5898:	|  |  |  |  |                                |  |  |         jsr 183ec <KPrintF>
    589e:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    58a0:	|  |  |  |  |                                |  |  |         clr.w d0
    58a2:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 6544 <continueFunction+0xec8>

						case BR_PAUSE:
						pauseFunction (fun);
    58a6:	|  |  |  |  |                                |  |  |         move.l 84(sp),-(sp)
    58aa:	|  |  |  |  |                                |  |  |         jsr 78b2 <pauseFunction>
    58b0:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    58b2:	|  |  |  |  |                                |  |  |         clr.w 78(sp)
						break;
    58b6:	|  |  |  |  |                                |  |  |  ,----- bra.s 592c <continueFunction+0x2b0>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    58b8:	|  |  |  |  |                                |  |  |  |      clr.w 78(sp)
						advanceNow = FALSE;
    58bc:	|  |  |  |  |                                |  |  |  |      clr.w 76(sp)
						break;
    58c0:	|  |  |  |  |                                |  |  |  +----- bra.s 592c <continueFunction+0x2b0>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    58c2:	|  |  |  |  |                                |  |  |  |      movea.l 84(sp),a0
    58c6:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),52(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    58cc:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    58ce:	|  |  |  |  |                                |  |  |  |      add.l 84(sp),d0
    58d2:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    58d6:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    58da:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    58dc:	|  |  |  |  |                                |  |  |  |      jsr 161fe <setVariable>
    58e2:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    58e6:	|  |  |  |  |                                |  |  |  |      move.l 84(sp),-(sp)
    58ea:	|  |  |  |  |                                |  |  |  |      jsr 78b2 <pauseFunction>
    58f0:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    58f2:	|  |  |  |  |                                |  |  |  |      move.l 1c78a <noStack>,d1
    58f8:	|  |  |  |  |                                |  |  |  |      move.l 52(sp),d0
    58fc:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    58fe:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    5900:	|  |  |  |  |                                |  |  |  |      move.l 92(sp),-(sp)
    5904:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    5906:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    5908:	|  |  |  |  |                                |  |  |  |      jsr 7ca6 <startNewFunctionNum>
    590e:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    5912:	|  |  |  |  |                                |  |  |  |      tst.l d0
    5914:	|  |  |  |  |                                |  |  |  |  ,-- bne.s 591c <continueFunction+0x2a0>
    5916:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    5918:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 6544 <continueFunction+0xec8>
							fun = allRunningFunctions;
    591c:	|  |  |  |  |                                |  |  |  |  '-> move.l 1c752 <allRunningFunctions>,84(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    5924:	|  |  |  |  |                                |  |  |  |      clr.w 76(sp)
						}
						break;
    5928:	|  |  |  |  |                                |  |  |  +----- bra.s 592c <continueFunction+0x2b0>

						default:
						break;
    592a:	|  |  |  |  |                                |  |  '--|----> nop
					}
				}
				break;
    592c:	|  |  |  |  |                                |  +-----'----X bra.s 5942 <continueFunction+0x2c6>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    592e:	|  |  |  |  |                                '--|----------> pea 199cc <PutChar+0xb3e>
    5934:	|  |  |  |  |                                   |            jsr 183ec <KPrintF>
    593a:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    593c:	|  |  |  |  |                                   |            clr.w d0
    593e:	|  +--|--|--|-----------------------------------|----------- bra.w 6544 <continueFunction+0xec8>
			}
			break;
    5942:	|  |  |  |  +-----------------------------------'----------X bra.w 6522 <continueFunction+0xea6>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    5946:	|  |  |  |  |                                                moveq #28,d0
    5948:	|  |  |  |  |                                                add.l 84(sp),d0
    594c:	|  |  |  |  |                                                clr.l -(sp)
    594e:	|  |  |  |  |                                                clr.l -(sp)
    5950:	|  |  |  |  |                                                move.l d0,-(sp)
    5952:	|  |  |  |  |                                                jsr 161fe <setVariable>
    5958:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    595c:	|  |  |  |  +----------------------------------------------- bra.w 6522 <continueFunction+0xea6>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    5960:	|  |  |  |  |                                                move.l 72(sp),d1
    5964:	|  |  |  |  |                                                moveq #28,d0
    5966:	|  |  |  |  |                                                add.l 84(sp),d0
    596a:	|  |  |  |  |                                                move.l d1,-(sp)
    596c:	|  |  |  |  |                                                pea 5 <_start+0x5>
    5970:	|  |  |  |  |                                                move.l d0,-(sp)
    5972:	|  |  |  |  |                                                jsr 161fe <setVariable>
    5978:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    597c:	|  |  |  |  +----------------------------------------------- bra.w 6522 <continueFunction+0xea6>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    5980:	|  |  |  |  |                                                move.l 72(sp),d1
    5984:	|  |  |  |  |                                                moveq #28,d0
    5986:	|  |  |  |  |                                                add.l 84(sp),d0
    598a:	|  |  |  |  |                                                move.l d1,-(sp)
    598c:	|  |  |  |  |                                                pea 1 <_start+0x1>
    5990:	|  |  |  |  |                                                move.l d0,-(sp)
    5992:	|  |  |  |  |                                                jsr 161fe <setVariable>
    5998:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    599c:	|  |  |  |  +----------------------------------------------- bra.w 6522 <continueFunction+0xea6>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    59a0:	|  |  |  |  |                                                moveq #28,d0
    59a2:	|  |  |  |  |                                                add.l 84(sp),d0
    59a6:	|  |  |  |  |                                                movea.l 84(sp),a0
    59aa:	|  |  |  |  |                                                movea.l 20(a0),a0
    59ae:	|  |  |  |  |                                                move.l 72(sp),d1
    59b2:	|  |  |  |  |                                                lsl.l #3,d1
    59b4:	|  |  |  |  |                                                add.l a0,d1
    59b6:	|  |  |  |  |                                                move.l d0,-(sp)
    59b8:	|  |  |  |  |                                                move.l d1,-(sp)
    59ba:	|  |  |  |  |                                                jsr 15dc6 <copyVariable>
    59c0:	|  |  |  |  |                                                addq.l #8,sp
    59c2:	|  |  |  |  |                                                tst.w d0
    59c4:	|  |  |  |  |  ,-------------------------------------------- bne.w 6500 <continueFunction+0xe84>
    59c8:	|  |  |  |  |  |                                             clr.w d0
    59ca:	|  +--|--|--|--|-------------------------------------------- bra.w 6544 <continueFunction+0xec8>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    59ce:	|  |  |  |  |  |                                             moveq #28,d0
    59d0:	|  |  |  |  |  |                                             add.l 84(sp),d0
    59d4:	|  |  |  |  |  |                                             move.l d0,-(sp)
    59d6:	|  |  |  |  |  |                                             jsr 15e4c <getBoolean>
    59dc:	|  |  |  |  |  |                                             addq.l #4,sp
    59de:	|  |  |  |  |  |                                             tst.w d0
    59e0:	|  |  |  |  |  |                                      ,----- beq.s 59fc <continueFunction+0x380>
    59e2:	|  |  |  |  |  |                                      |      movea.l 84(sp),a0
    59e6:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    59ea:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    59ec:	|  |  |  |  |  |                                      |      jsr 15e4c <getBoolean>
    59f2:	|  |  |  |  |  |                                      |      addq.l #4,sp
    59f4:	|  |  |  |  |  |                                      |      tst.w d0
    59f6:	|  |  |  |  |  |                                      +----- beq.s 59fc <continueFunction+0x380>
    59f8:	|  |  |  |  |  |                                      |      moveq #1,d0
    59fa:	|  |  |  |  |  |                                      |  ,-- bra.s 59fe <continueFunction+0x382>
    59fc:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    59fe:	|  |  |  |  |  |                                         '-> moveq #28,d1
    5a00:	|  |  |  |  |  |                                             add.l 84(sp),d1
    5a04:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5a06:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    5a0a:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5a0c:	|  |  |  |  |  |                                             jsr 161fe <setVariable>
    5a12:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    5a16:	|  |  |  |  |  |                                             moveq #24,d0
    5a18:	|  |  |  |  |  |                                             add.l 84(sp),d0
    5a1c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5a1e:	|  |  |  |  |  |                                             jsr 16290 <trimStack>
    5a24:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    5a26:	|  |  |  |  +--|-------------------------------------------- bra.w 6522 <continueFunction+0xea6>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    5a2a:	|  |  |  |  |  |                                             moveq #28,d0
    5a2c:	|  |  |  |  |  |                                             add.l 84(sp),d0
    5a30:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5a32:	|  |  |  |  |  |                                             jsr 15e4c <getBoolean>
    5a38:	|  |  |  |  |  |                                             addq.l #4,sp
    5a3a:	|  |  |  |  |  |                                             tst.w d0
    5a3c:	|  |  |  |  |  |                                         ,-- bne.s 5a54 <continueFunction+0x3d8>
    5a3e:	|  |  |  |  |  |                                         |   movea.l 84(sp),a0
    5a42:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    5a46:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    5a48:	|  |  |  |  |  |                                         |   jsr 15e4c <getBoolean>
    5a4e:	|  |  |  |  |  |                                         |   addq.l #4,sp
    5a50:	|  |  |  |  |  |                                         |   tst.w d0
    5a52:	|  |  |  |  |  |                                      ,--|-- beq.s 5a58 <continueFunction+0x3dc>
    5a54:	|  |  |  |  |  |                                      |  '-> moveq #1,d0
    5a56:	|  |  |  |  |  |                                      |  ,-- bra.s 5a5a <continueFunction+0x3de>
    5a58:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    5a5a:	|  |  |  |  |  |                                         '-> moveq #28,d1
    5a5c:	|  |  |  |  |  |                                             add.l 84(sp),d1
    5a60:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5a62:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    5a66:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5a68:	|  |  |  |  |  |                                             jsr 161fe <setVariable>
    5a6e:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    5a72:	|  |  |  |  |  |                                             moveq #24,d0
    5a74:	|  |  |  |  |  |                                             add.l 84(sp),d0
    5a78:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5a7a:	|  |  |  |  |  |                                             jsr 16290 <trimStack>
    5a80:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    5a82:	|  |  |  |  +--|-------------------------------------------- bra.w 6522 <continueFunction+0xea6>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    5a86:	|  |  |  |  |  |                                             move.l 72(sp),d1
    5a8a:	|  |  |  |  |  |                                             moveq #28,d0
    5a8c:	|  |  |  |  |  |                                             add.l 84(sp),d0
    5a90:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5a92:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    5a96:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5a98:	|  |  |  |  |  |                                             jsr 161fe <setVariable>
    5a9e:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5aa2:	|  |  |  |  +--|-------------------------------------------- bra.w 6522 <continueFunction+0xea6>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    5aa6:	|  |  |  |  |  |                                             move.l 72(sp),d1
    5aaa:	|  |  |  |  |  |                                             moveq #28,d0
    5aac:	|  |  |  |  |  |                                             add.l 84(sp),d0
    5ab0:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5ab2:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    5ab6:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5ab8:	|  |  |  |  |  |                                             jsr 161fe <setVariable>
    5abe:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5ac2:	|  |  |  |  +--|-------------------------------------------- bra.w 6522 <continueFunction+0xea6>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    5ac6:	|  |  |  |  |  |                                             move.l 72(sp),d1
    5aca:	|  |  |  |  |  |                                             moveq #28,d0
    5acc:	|  |  |  |  |  |                                             add.l 84(sp),d0
    5ad0:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5ad2:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    5ad6:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5ad8:	|  |  |  |  |  |                                             jsr 161fe <setVariable>
    5ade:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5ae2:	|  |  |  |  +--|-------------------------------------------- bra.w 6522 <continueFunction+0xea6>

			case SLU_UNREG:
			if (dialogValue != 1) {
    5ae6:	|  |  |  |  |  |                                             move.l 1c70e <dialogValue>,d0
    5aec:	|  |  |  |  |  |                                             moveq #1,d1
    5aee:	|  |  |  |  |  |                                             cmp.l d0,d1
    5af0:	|  |  |  |  |  |  ,----------------------------------------- beq.w 6504 <continueFunction+0xe88>
				KPrintF(ERROR_HACKER);
    5af4:	|  |  |  |  |  |  |                                          pea 199e1 <PutChar+0xb53>
    5afa:	|  |  |  |  |  |  |                                          jsr 183ec <KPrintF>
    5b00:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    5b02:	|  |  |  |  |  |  |                                          clr.w d0
    5b04:	|  +--|--|--|--|--|----------------------------------------- bra.w 6544 <continueFunction+0xec8>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    5b08:	|  |  |  |  |  |  |                                          move.l 72(sp),d1
    5b0c:	|  |  |  |  |  |  |                                          moveq #28,d0
    5b0e:	|  |  |  |  |  |  |                                          add.l 84(sp),d0
    5b12:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    5b14:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    5b16:	|  |  |  |  |  |  |                                          jsr 15990 <loadStringToVar>
    5b1c:	|  |  |  |  |  |  |                                          addq.l #8,sp
    5b1e:	|  |  |  |  |  |  |                                          tst.w d0
    5b20:	|  |  |  |  |  |  |  ,-------------------------------------- bne.w 6508 <continueFunction+0xe8c>
					return FALSE;
    5b24:	|  |  |  |  |  |  |  |                                       clr.w d0
    5b26:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 6544 <continueFunction+0xec8>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    5b2a:	|  |  |  |  |  |  |  |                                       movea.l 84(sp),a0
    5b2e:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    5b32:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    5b34:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    5b36:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    5b38:	|  |  |  |  |  |  |  |                                ,----- beq.s 5b96 <continueFunction+0x51a>
    5b3a:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    5b3c:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    5b3e:	|  |  |  |  |  |  |  |              ,-----------------|----- bcs.w 5d2a <continueFunction+0x6ae>
    5b42:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    5b44:	|  |  |  |  |  |  |  |              |                 |  ,-- beq.s 5b50 <continueFunction+0x4d4>
    5b46:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    5b48:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    5b4a:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 5b96 <continueFunction+0x51a>
    5b4c:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 5d2a <continueFunction+0x6ae>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    5b50:	|  |  |  |  |  |  |  |              |                 |  '-> moveq #38,d0
    5b52:	|  |  |  |  |  |  |  |              |                 |      cmp.l 68(sp),d0
    5b56:	|  |  |  |  |  |  |  |              |                 |  ,-- bne.s 5b82 <continueFunction+0x506>
					setVariable (&fun -> reg, SVT_NULL, 0);
    5b58:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    5b5a:	|  |  |  |  |  |  |  |              |                 |  |   add.l 84(sp),d0
    5b5e:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    5b60:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    5b62:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    5b64:	|  |  |  |  |  |  |  |              |                 |  |   jsr 161fe <setVariable>
    5b6a:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    5b6e:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    5b70:	|  |  |  |  |  |  |  |              |                 |  |   add.l 84(sp),d0
    5b74:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    5b76:	|  |  |  |  |  |  |  |              |                 |  |   jsr 16290 <trimStack>
    5b7c:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    5b7e:	|  |  |  |  |  |  |  |              |  ,--------------|--|-- bra.w 5d40 <continueFunction+0x6c4>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    5b82:	|  |  |  |  |  |  |  |              |  |              |  '-> pea 19a22 <PutChar+0xb94>
    5b88:	|  |  |  |  |  |  |  |              |  |              |      jsr 183ec <KPrintF>
    5b8e:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    5b90:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    5b92:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 6544 <continueFunction+0xec8>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    5b96:	|  |  |  |  |  |  |  |              |  |              '----> movea.l 84(sp),a0
    5b9a:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    5b9e:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    5ba2:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    5ba4:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5bba <continueFunction+0x53e>
					KPrintF((ERROR_INDEX_EMPTY));
    5ba6:	|  |  |  |  |  |  |  |              |  |                 |   pea 19a5e <PutChar+0xbd0>
    5bac:	|  |  |  |  |  |  |  |              |  |                 |   jsr 183ec <KPrintF>
    5bb2:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    5bb4:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    5bb6:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 6544 <continueFunction+0xec8>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5bba:	|  |  |  |  |  |  |  |              |  |                 '-> moveq #28,d0
    5bbc:	|  |  |  |  |  |  |  |              |  |                     add.l 84(sp),d0
    5bc0:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    5bc2:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    5bc6:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    5bca:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    5bcc:	|  |  |  |  |  |  |  |              |  |                     jsr 1590c <getValueType>
    5bd2:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    5bd6:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    5bd8:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5be0 <continueFunction+0x564>
    5bda:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    5bdc:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 6544 <continueFunction+0xec8>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    5be0:	|  |  |  |  |  |  |  |              |  |                 '-> movea.l 84(sp),a0
    5be4:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    5be8:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    5bea:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    5bec:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    5bee:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5c10 <continueFunction+0x594>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    5bf0:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    5bf4:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    5bf6:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 84(sp),a0
    5bfa:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    5bfe:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    5c02:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    5c04:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    5c06:	|  |  |  |  |  |  |  |              |  |                 |   jsr 15596 <fastArrayGetByIndex>
    5c0c:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    5c0e:	|  |  |  |  |  |  |  |              |  |              ,--|-- bra.s 5c30 <continueFunction+0x5b4>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    5c10:	|  |  |  |  |  |  |  |              |  |              |  '-> move.l 4(sp),d0
    5c14:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    5c16:	|  |  |  |  |  |  |  |              |  |              |      movea.l 84(sp),a0
    5c1a:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    5c1e:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    5c22:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    5c24:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    5c26:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    5c28:	|  |  |  |  |  |  |  |              |  |              |      jsr 16220 <stackGetByIndex>
    5c2e:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    5c30:	|  |  |  |  |  |  |  |              |  |              '----> move.l d0,64(sp)

					trimStack (&fun -> stack);
    5c34:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    5c36:	|  |  |  |  |  |  |  |              |  |                     add.l 84(sp),d0
    5c3a:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    5c3c:	|  |  |  |  |  |  |  |              |  |                     jsr 16290 <trimStack>
    5c42:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    5c44:	|  |  |  |  |  |  |  |              |  |                     tst.l 64(sp)
    5c48:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5c64 <continueFunction+0x5e8>
						setVariable (&fun -> reg, SVT_NULL, 0);
    5c4a:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    5c4c:	|  |  |  |  |  |  |  |              |  |                 |   add.l 84(sp),d0
    5c50:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    5c52:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    5c54:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    5c56:	|  |  |  |  |  |  |  |              |  |                 |   jsr 161fe <setVariable>
    5c5c:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    5c60:	|  |  |  |  |  |  |  |              |  |  ,--------------|-- bra.w 5d3e <continueFunction+0x6c2>
						switch (com) {
    5c64:	|  |  |  |  |  |  |  |              |  |  |              '-> moveq #39,d0
    5c66:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 68(sp),d0
    5c6a:	|  |  |  |  |  |  |  |              |  |  |              ,-- beq.s 5c78 <continueFunction+0x5fc>
    5c6c:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    5c6e:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 68(sp),d1
    5c72:	|  |  |  |  |  |  |  |              |  |  |           ,--|-- beq.s 5cc2 <continueFunction+0x646>
    5c74:	|  |  |  |  |  |  |  |              |  |  |  ,--------|--|-- bra.w 5d0a <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    5c78:	|  |  |  |  |  |  |  |              |  |  |  |        |  '-> move.l 64(sp),-(sp)
    5c7c:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    5c80:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    5c84:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    5c86:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 1590c <getValueType>
    5c8c:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    5c90:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    5c92:	|  |  |  |  |  |  |  |              |  |  |  |        |  ,-- bne.s 5c9a <continueFunction+0x61e>
    5c94:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    5c96:	|  |  |  |  |  |  |  |              |  |  |  |  ,-----|--|-- bra.w 5d24 <continueFunction+0x6a8>
							setVariable (&fun -> reg, SVT_INT, ii);
    5c9a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  '-> move.l (sp),d1
    5c9c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    5c9e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 84(sp),d0
    5ca2:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    5ca4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    5ca8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    5caa:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 161fe <setVariable>
    5cb0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    5cb4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    5cb6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    5cb8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 64(sp),a0
    5cbc:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    5cc0:	|  |  |  |  |  |  |  |              |  |  |  |  |  ,--|----- bra.s 5d28 <continueFunction+0x6ac>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    5cc2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  '----> move.l 64(sp),-(sp)
    5cc6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    5cca:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    5cce:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    5cd0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 1590c <getValueType>
    5cd6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    5cda:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    5cdc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     ,-- bne.s 5ce2 <continueFunction+0x666>
    5cde:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    5ce0:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 5d24 <continueFunction+0x6a8>
							setVariable (&fun -> reg, SVT_INT, ii);
    5ce2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     '-> move.l (sp),d1
    5ce4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    5ce6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 84(sp),d0
    5cea:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    5cec:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    5cf0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    5cf2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 161fe <setVariable>
    5cf8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    5cfc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    5cfe:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    5d00:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 64(sp),a0
    5d04:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    5d08:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 5d28 <continueFunction+0x6ac>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    5d0a:	|  |  |  |  |  |  |  |              |  |  |  '--|--|-------> moveq #28,d0
    5d0c:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 84(sp),d0
    5d10:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    5d12:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 68(sp),-(sp)
    5d16:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 15dc6 <copyVariable>
    5d1c:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    5d1e:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    5d20:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 5d3e <continueFunction+0x6c2>
    5d22:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5d24:	|  +--|--|--|--|--|--|--------------|--|--|-----'--|-------X bra.w 6544 <continueFunction+0xec8>
				break;
    5d28:	|  |  |  |  |  |  |  |              |  |  +--------'-------X bra.s 5d3e <continueFunction+0x6c2>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    5d2a:	|  |  |  |  |  |  |  |              '--|--|----------------> pea 19a7c <PutChar+0xbee>
    5d30:	|  |  |  |  |  |  |  |                 |  |                  jsr 183ec <KPrintF>
    5d36:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    5d38:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    5d3a:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 6544 <continueFunction+0xec8>
				break;
    5d3e:	|  |  |  |  |  |  |  |                 |  '----------------> nop
			}
			break;
    5d40:	|  |  |  |  +--|--|--|-----------------'-------------------X bra.w 6522 <continueFunction+0xea6>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    5d44:	|  |  |  |  |  |  |  |                                       movea.l 84(sp),a0
    5d48:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    5d4c:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    5d4e:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    5d50:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    5d52:	|  |  |  |  |  |  |  |                                   ,-- beq.s 5d60 <continueFunction+0x6e4>
    5d54:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    5d56:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    5d58:	|  |  |  |  |  |  |  |                                ,--|-- beq.w 5e0c <continueFunction+0x790>
    5d5c:	|  |  |  |  |  |  |  |                             ,--|--|-- bra.w 5e6a <continueFunction+0x7ee>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    5d60:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 84(sp),a0
    5d64:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5d68:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    5d6c:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    5d6e:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5d84 <continueFunction+0x708>
					KPrintF((ERROR_INDEX_EMPTY));
    5d70:	|  |  |  |  |  |  |  |                             |  |  |   pea 19a5e <PutChar+0xbd0>
    5d76:	|  |  |  |  |  |  |  |                             |  |  |   jsr 183ec <KPrintF>
    5d7c:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    5d7e:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5d80:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 6544 <continueFunction+0xec8>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5d84:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #28,d0
    5d86:	|  |  |  |  |  |  |  |                             |  |      add.l 84(sp),d0
    5d8a:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5d8c:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    5d90:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    5d94:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    5d96:	|  |  |  |  |  |  |  |                             |  |      jsr 1590c <getValueType>
    5d9c:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    5da0:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    5da2:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5daa <continueFunction+0x72e>
    5da4:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5da6:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 6544 <continueFunction+0xec8>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    5daa:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 84(sp),a0
    5dae:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5db2:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    5db6:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    5db8:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    5dbc:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    5dbe:	|  |  |  |  |  |  |  |                             |  |      movea.l 84(sp),a0
    5dc2:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5dc6:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    5dca:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    5dcc:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    5dce:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    5dd0:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5dd2:	|  |  |  |  |  |  |  |                             |  |      jsr 7b52 <stackSetByIndex>
    5dd8:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    5ddc:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    5dde:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5de6 <continueFunction+0x76a>
						return FALSE;
    5de0:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5de2:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 6544 <continueFunction+0xec8>
					}
					trimStack (&fun -> stack);
    5de6:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #24,d0
    5de8:	|  |  |  |  |  |  |  |                             |  |      add.l 84(sp),d0
    5dec:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5dee:	|  |  |  |  |  |  |  |                             |  |      jsr 16290 <trimStack>
    5df4:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    5df6:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    5df8:	|  |  |  |  |  |  |  |                             |  |      add.l 84(sp),d0
    5dfc:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5dfe:	|  |  |  |  |  |  |  |                             |  |      jsr 16290 <trimStack>
    5e04:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    5e06:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    5e08:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 6522 <continueFunction+0xea6>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    5e0c:	|  |  |  |  |  |  |  |                             |  '----> moveq #28,d0
    5e0e:	|  |  |  |  |  |  |  |                             |         add.l 84(sp),d0
    5e12:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5e14:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    5e18:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    5e1c:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    5e1e:	|  |  |  |  |  |  |  |                             |         jsr 1590c <getValueType>
    5e24:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    5e28:	|  |  |  |  |  |  |  |                             |         tst.w d0
    5e2a:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 5e32 <continueFunction+0x7b6>
    5e2c:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    5e2e:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 6544 <continueFunction+0xec8>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    5e32:	|  |  |  |  |  |  |  |                             |     '-> move.l 12(sp),d0
    5e36:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    5e38:	|  |  |  |  |  |  |  |                             |         movea.l 84(sp),a0
    5e3c:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    5e40:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    5e44:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    5e46:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5e48:	|  |  |  |  |  |  |  |                             |         jsr 15596 <fastArrayGetByIndex>
    5e4e:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    5e50:	|  |  |  |  |  |  |  |                             |         move.l d0,60(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    5e54:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 5e64 <continueFunction+0x7e8>
    5e56:	|  |  |  |  |  |  |  |                             |     |   pea 19aa0 <PutChar+0xc12>
    5e5c:	|  |  |  |  |  |  |  |                             |     |   jsr 183ec <KPrintF>
    5e62:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    5e64:	|  |  |  |  |  |  |  |                             |     '-> clr.w d0
    5e66:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 6544 <continueFunction+0xec8>
				KPrintF((ERROR_INDEX_NONSTACK));
    5e6a:	|  |  |  |  |  |  |  |                             '-------> pea 19a7c <PutChar+0xbee>
    5e70:	|  |  |  |  |  |  |  |                                       jsr 183ec <KPrintF>
    5e76:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    5e78:	|  |  |  |  |  |  |  |                                       clr.w d0
    5e7a:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 6544 <continueFunction+0xec8>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    5e7e:	|  |  |  |  |  |  |  |                                       movea.l 84(sp),a0
    5e82:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5e86:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    5e8a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5e8c:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5e8e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5e90:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5e94:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    5e98:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5e9a:	|  |  |  |  |  |  |  |                                       jsr 1590c <getValueType>
    5ea0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5ea4:	|  |  |  |  |  |  |  |                                       tst.w d0
    5ea6:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5eae <continueFunction+0x832>
    5ea8:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5eaa:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 6544 <continueFunction+0xec8>
				setVariable (&fun -> reg, SVT_INT, ii);
    5eae:	|  |  |  |  |  |  |  |                                   '-> move.l 16(sp),d1
    5eb2:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5eb4:	|  |  |  |  |  |  |  |                                       add.l 84(sp),d0
    5eb8:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5eba:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5ebe:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5ec0:	|  |  |  |  |  |  |  |                                       jsr 161fe <setVariable>
    5ec6:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    5eca:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    5ece:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5ed0:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5ed2:	|  |  |  |  |  |  |  |                                       movea.l 84(sp),a0
    5ed6:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5eda:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    5ede:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5ee0:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5ee2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5ee4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5ee8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5eea:	|  |  |  |  |  |  |  |                                       jsr 161fe <setVariable>
    5ef0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5ef4:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6522 <continueFunction+0xea6>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5ef8:	|  |  |  |  |  |  |  |                                       move.l 1c768 <globalVars>,d1
    5efe:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    5f02:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5f04:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5f06:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5f08:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5f0c:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    5f10:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5f12:	|  |  |  |  |  |  |  |                                       jsr 1590c <getValueType>
    5f18:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5f1c:	|  |  |  |  |  |  |  |                                       tst.w d0
    5f1e:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5f26 <continueFunction+0x8aa>
    5f20:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5f22:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 6544 <continueFunction+0xec8>
				setVariable (&fun -> reg, SVT_INT, ii);
    5f26:	|  |  |  |  |  |  |  |                                   '-> move.l 20(sp),d1
    5f2a:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5f2c:	|  |  |  |  |  |  |  |                                       add.l 84(sp),d0
    5f30:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5f32:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5f36:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5f38:	|  |  |  |  |  |  |  |                                       jsr 161fe <setVariable>
    5f3e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    5f42:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    5f46:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5f48:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5f4a:	|  |  |  |  |  |  |  |                                       movea.l 1c768 <globalVars>,a0
    5f50:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    5f54:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5f56:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5f58:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5f5a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5f5e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5f60:	|  |  |  |  |  |  |  |                                       jsr 161fe <setVariable>
    5f66:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5f6a:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6522 <continueFunction+0xea6>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    5f6e:	|  |  |  |  |  |  |  |                                       movea.l 84(sp),a0
    5f72:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5f76:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    5f7a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5f7c:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5f7e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5f80:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5f84:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    5f88:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5f8a:	|  |  |  |  |  |  |  |                                       jsr 1590c <getValueType>
    5f90:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5f94:	|  |  |  |  |  |  |  |                                       tst.w d0
    5f96:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5f9e <continueFunction+0x922>
    5f98:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5f9a:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 6544 <continueFunction+0xec8>
				setVariable (&fun -> reg, SVT_INT, ii);
    5f9e:	|  |  |  |  |  |  |  |                                   '-> move.l 24(sp),d1
    5fa2:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5fa4:	|  |  |  |  |  |  |  |                                       add.l 84(sp),d0
    5fa8:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5faa:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5fae:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5fb0:	|  |  |  |  |  |  |  |                                       jsr 161fe <setVariable>
    5fb6:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    5fba:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    5fbe:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5fc0:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5fc2:	|  |  |  |  |  |  |  |                                       movea.l 84(sp),a0
    5fc6:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5fca:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    5fce:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5fd0:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5fd2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5fd4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5fd8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5fda:	|  |  |  |  |  |  |  |                                       jsr 161fe <setVariable>
    5fe0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5fe4:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6522 <continueFunction+0xea6>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5fe8:	|  |  |  |  |  |  |  |                                       move.l 1c768 <globalVars>,d1
    5fee:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    5ff2:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5ff4:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5ff6:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5ff8:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5ffc:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    6000:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    6002:	|  |  |  |  |  |  |  |                                       jsr 1590c <getValueType>
    6008:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    600c:	|  |  |  |  |  |  |  |                                       tst.w d0
    600e:	|  |  |  |  |  |  |  |                                   ,-- bne.s 6016 <continueFunction+0x99a>
    6010:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    6012:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 6544 <continueFunction+0xec8>
				setVariable (&fun -> reg, SVT_INT, ii);
    6016:	|  |  |  |  |  |  |  |                                   '-> move.l 28(sp),d1
    601a:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    601c:	|  |  |  |  |  |  |  |                                       add.l 84(sp),d0
    6020:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    6022:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    6026:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    6028:	|  |  |  |  |  |  |  |                                       jsr 161fe <setVariable>
    602e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    6032:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    6036:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    6038:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    603a:	|  |  |  |  |  |  |  |                                       movea.l 1c768 <globalVars>,a0
    6040:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    6044:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    6046:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    6048:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    604a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    604e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    6050:	|  |  |  |  |  |  |  |                                       jsr 161fe <setVariable>
    6056:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    605a:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6522 <continueFunction+0xea6>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    605e:	|  |  |  |  |  |  |  |                                       movea.l 84(sp),a0
    6062:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    6066:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    606a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    606c:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    606e:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    6070:	|  |  |  |  |  |  |  |                                       add.l 84(sp),d0
    6074:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    6076:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    6078:	|  |  |  |  |  |  |  |                                       jsr 15dc6 <copyVariable>
    607e:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    6080:	|  |  |  |  |  |  |  |                                       tst.w d0
    6082:	|  |  |  |  |  |  |  |  ,----------------------------------- bne.w 650c <continueFunction+0xe90>
    6086:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    6088:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 6544 <continueFunction+0xec8>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    608c:	|  |  |  |  |  |  |  |  |                                    move.l 1c768 <globalVars>,d1
    6092:	|  |  |  |  |  |  |  |  |                                    move.l 72(sp),d0
    6096:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    6098:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    609a:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    609c:	|  |  |  |  |  |  |  |  |                                    add.l 84(sp),d0
    60a0:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    60a2:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    60a4:	|  |  |  |  |  |  |  |  |                                    jsr 15dc6 <copyVariable>
    60aa:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    60ac:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    60ae:	|  |  |  |  |  |  |  |  |  ,-------------------------------- bne.w 6510 <continueFunction+0xe94>
    60b2:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    60b4:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 6544 <continueFunction+0xec8>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    60b8:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    60ba:	|  |  |  |  |  |  |  |  |  |                                 add.l 84(sp),d0
    60be:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1c768 <globalVars>,a0
    60c4:	|  |  |  |  |  |  |  |  |  |                                 move.l 72(sp),d1
    60c8:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    60ca:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    60cc:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    60ce:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    60d0:	|  |  |  |  |  |  |  |  |  |                                 jsr 15dc6 <copyVariable>
    60d6:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    60d8:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    60da:	|  |  |  |  |  |  |  |  |  |  ,----------------------------- bne.w 6514 <continueFunction+0xe98>
    60de:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    60e0:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 6544 <continueFunction+0xec8>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    60e4:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    60e6:	|  |  |  |  |  |  |  |  |  |  |                              add.l 84(sp),d1
    60ea:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    60ec:	|  |  |  |  |  |  |  |  |  |  |                              add.l 84(sp),d0
    60f0:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    60f2:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    60f4:	|  |  |  |  |  |  |  |  |  |  |                              jsr 15148 <addVarToStack>
    60fa:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    60fc:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    60fe:	|  |  |  |  |  |  |  |  |  |  |  ,-------------------------- bne.w 6518 <continueFunction+0xe9c>
    6102:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    6104:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 6544 <continueFunction+0xec8>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    6108:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    610a:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 84(sp),d1
    610e:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    6110:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 84(sp),d0
    6114:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    6116:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    6118:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 151ce <addVarToStackQuick>
    611e:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    6120:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    6122:	|  |  |  |  |  |  |  |  |  |  |  |  ,----------------------- bne.w 651c <continueFunction+0xea0>
    6126:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    6128:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 6544 <continueFunction+0xec8>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    612c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    612e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 84(sp),d0
    6132:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    6134:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 15e4c <getBoolean>
    613a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    613c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    613e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    6140:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    6142:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    6144:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    6146:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    6148:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 84(sp),d0
    614c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    614e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    6152:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    6154:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 161fe <setVariable>
    615a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    615e:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 6522 <continueFunction+0xea6>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    6162:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    6164:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 84(sp),d0
    6168:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    616a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 15e4c <getBoolean>
    6170:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    6172:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    6174:	|  |  |  |  |  |  |  |  |  |  |  |  |  ,-------------------- bne.w 6520 <continueFunction+0xea4>
				advanceNow = FALSE;
    6178:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 76(sp)
				fun -> runThisLine = param;
    617c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 84(sp),a0
    6180:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 72(sp),36(a0)
			}
			break;
    6186:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 6520 <continueFunction+0xea4>

			case SLU_BRANCH:
			advanceNow = FALSE;
    618a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 76(sp)
			fun -> runThisLine = param;
    618e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 84(sp),a0
    6192:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 72(sp),36(a0)
			break;
    6198:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 6522 <continueFunction+0xea6>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    619c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    619e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 84(sp),d0
    61a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    61a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    61a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    61ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    61ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 1590c <getValueType>
    61b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    61b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    61ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 ,-- bne.s 61c2 <continueFunction+0xb46>
    61bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    61be:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 6544 <continueFunction+0xec8>
				setVariable (&fun -> reg, SVT_INT, -i);
    61c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 '-> move.l 32(sp),d0
    61c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    61c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    61ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    61cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 84(sp),d0
    61d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    61d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    61d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    61d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 161fe <setVariable>
    61de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    61e2:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 6522 <continueFunction+0xea6>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    61e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 84(sp),a0
    61ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    61ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  ,----------------- beq.w 64d8 <continueFunction+0xe5c>
				int firstValue, secondValue;

				switch (com) {
    61f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    61f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 68(sp),d0
    61f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,-------- beq.s 6274 <continueFunction+0xbf8>
    61fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    61fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 68(sp),d1
    6200:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|-------- bcs.w 62be <continueFunction+0xc42>
    6204:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    6206:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 68(sp),d0
    620a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     ,-- beq.s 6218 <continueFunction+0xb9c>
    620c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    620e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 68(sp),d1
    6212:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  ,--|-- beq.s 6246 <continueFunction+0xbca>
    6214:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 62be <continueFunction+0xc42>
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    6218:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  '-> moveq #28,d0
    621a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 84(sp),d0
    621e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 84(sp),a0
    6222:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    6226:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    6228:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    622a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 15242 <addVariablesInSecond>
    6230:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    6232:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    6234:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 84(sp),d0
    6238:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    623a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 16290 <trimStack>
    6240:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    6242:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|----- bra.w 64ec <continueFunction+0xe70>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    6246:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----> moveq #28,d0
    6248:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 84(sp),d0
    624c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 84(sp),a0
    6250:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    6254:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    6256:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    6258:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 15300 <compareVariablesInSecond>
    625e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    6260:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    6262:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 84(sp),d0
    6266:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    6268:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 16290 <trimStack>
    626e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    6270:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 64ec <continueFunction+0xe70>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    6274:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '-------> moveq #28,d0
    6276:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 84(sp),d0
    627a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 84(sp),a0
    627e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    6282:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    6284:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    6286:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 15300 <compareVariablesInSecond>
    628c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    628e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    6290:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 84(sp),d0
    6294:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    6296:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 16290 <trimStack>
    629c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    629e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 84(sp),a0
    62a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    62a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    62a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    62aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    62ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    62b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 84(sp),a0
    62b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    62ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 64ec <continueFunction+0xe70>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    62be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----------> movea.l 84(sp),a0
    62c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    62c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    62c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    62cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    62d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    62d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 1590c <getValueType>
    62d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    62dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    62de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 62e6 <continueFunction+0xc6a>
    62e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    62e2:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 6544 <continueFunction+0xec8>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    62e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #28,d0
    62e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 84(sp),d0
    62ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    62ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    62f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    62f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    62f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 1590c <getValueType>
    62fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    6302:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    6304:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 630c <continueFunction+0xc90>
    6306:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    6308:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 6544 <continueFunction+0xec8>
					trimStack (&fun -> stack);
    630c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #24,d0
    630e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 84(sp),d0
    6312:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    6314:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 16290 <trimStack>
    631a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp

					switch (com) {
    631c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    631e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 68(sp),d0
    6322:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    6324:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    6326:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bcs.w 64ea <continueFunction+0xe6e>
    632a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    632c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    632e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #25402,a0
    6334:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    6336:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (633a <continueFunction+0xcbe>,pc,d0.w)
    633a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    633e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    6340:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    6348:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    634a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    6352:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    635a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    6362:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    636a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    636e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    6372:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6374:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6376:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 18d78 <__mulsi3>
    637c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    637e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    6380:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    6382:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    6386:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6388:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    638c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    638e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 161fe <setVariable>
    6394:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6398:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 64ec <continueFunction+0xe70>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    639c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    63a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    63a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    63a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    63a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    63ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    63ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    63b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    63b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 161fe <setVariable>
    63ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    63be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 64ec <continueFunction+0xe70>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    63c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    63c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    63ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    63cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    63ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 18e24 <__modsi3>
    63d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    63d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    63d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    63da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    63de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    63e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    63e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    63e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 161fe <setVariable>
    63ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    63f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 64ec <continueFunction+0xe70>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    63f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    63f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    63fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    63fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6400:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 18df6 <__divsi3>
    6406:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    6408:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    640a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    640c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    6410:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6412:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6416:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6418:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 161fe <setVariable>
    641e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6422:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 64ec <continueFunction+0xe70>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    6426:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    642a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    642e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    6430:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    6432:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    6434:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    6436:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    6438:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    643a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    643e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6440:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6444:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6446:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 161fe <setVariable>
    644c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6450:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 64ec <continueFunction+0xe70>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    6454:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    6458:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    645c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    645e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    6460:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    6462:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    6464:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    6466:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    6468:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    646c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    646e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6472:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6474:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 161fe <setVariable>
    647a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    647e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 64ec <continueFunction+0xe70>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    6480:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    6484:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    6488:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    648a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    648c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    648e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    6490:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    6492:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    6494:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    6498:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    649a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    649e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    64a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 161fe <setVariable>
    64a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    64aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 64ec <continueFunction+0xe70>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    64ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    64b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    64b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    64b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    64b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    64ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    64bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    64be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    64c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    64c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    64c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    64ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    64cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 161fe <setVariable>
    64d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    64d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 64ec <continueFunction+0xe70>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    64d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-----------|-> pea 19ac1 <PutChar+0xc33>
    64de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 183ec <KPrintF>
    64e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    64e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    64e8:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 6544 <continueFunction+0xec8>
						break;
    64ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           '-> nop
			}
			break;
    64ec:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----'-------------X bra.s 6522 <continueFunction+0xea6>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    64ee:	|  |  |  '--|--|--|--|--|--|--|--|--|--|-------------------> pea 19ad9 <PutChar+0xc4b>
    64f4:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 183ec <KPrintF>
    64fa:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    64fc:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    64fe:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 6544 <continueFunction+0xec8>
			break;
    6500:	|  |  |     |  '--|--|--|--|--|--|--|--|-------------------> nop
    6502:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 6522 <continueFunction+0xea6>
			break;
    6504:	|  |  |     |     '--|--|--|--|--|--|--|-------------------> nop
    6506:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 6522 <continueFunction+0xea6>
			break;
    6508:	|  |  |     |        '--|--|--|--|--|--|-------------------> nop
    650a:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 6522 <continueFunction+0xea6>
			break;
    650c:	|  |  |     |           '--|--|--|--|--|-------------------> nop
    650e:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 6522 <continueFunction+0xea6>
			break;
    6510:	|  |  |     |              '--|--|--|--|-------------------> nop
    6512:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 6522 <continueFunction+0xea6>
			break;
    6514:	|  |  |     |                 '--|--|--|-------------------> nop
    6516:	|  |  |     +--------------------|--|--|-------------------- bra.s 6522 <continueFunction+0xea6>
			break;
    6518:	|  |  |     |                    '--|--|-------------------> nop
    651a:	|  |  |     +-----------------------|--|-------------------- bra.s 6522 <continueFunction+0xea6>
			break;
    651c:	|  |  |     |                       '--|-------------------> nop
    651e:	|  |  |     +--------------------------|-------------------- bra.s 6522 <continueFunction+0xea6>
			break;
    6520:	|  |  |     |                          '-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    6522:	|  |  |     '----------------------------------------------> tst.w 76(sp)
    6526:	+--|--|----------------------------------------------------- beq.s 653a <continueFunction+0xebe>
    6528:	|  |  |                                                      movea.l 84(sp),a0
    652c:	|  |  |                                                      move.l 36(a0),d0
    6530:	|  |  |                                                      addq.l #1,d0
    6532:	|  |  |                                                      movea.l 84(sp),a0
    6536:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    653a:	'--|--|----------------------------------------------------> tst.w 78(sp)
    653e:	   |  '----------------------------------------------------- bne.w 56a4 <continueFunction+0x28>

	}
	return TRUE;
    6542:	   |                                                         moveq #1,d0
}
    6544:	   '-------------------------------------------------------> lea 80(sp),sp
    6548:	                                                             rts

0000654a <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
	//KPrintF("finishFunction started\n");

	pauseFunction (fun);
    654a:	    move.l 4(sp),-(sp)
    654e:	    jsr 78b2 <pauseFunction>
    6554:	    addq.l #4,sp

	//Keep function loaed in memory if it is the focus function
	if( fun != currentEvents -> focusFunction) {	
    6556:	    movea.l 1c120 <currentEvents>,a0
    655c:	    move.l 20(a0),d0
    6560:	    cmp.l 4(sp),d0
    6564:	,-- beq.s 6572 <finishFunction+0x28>
		unloadFunction (fun);
    6566:	|   move.l 4(sp),-(sp)
    656a:	|   jsr 7cf2 <unloadFunction>
    6570:	|   addq.l #4,sp
	}	
	//KPrintF("finishFunction finished\n");
}
    6572:	'-> nop
    6574:	    rts

00006576 <freezeSubs>:

void freezeSubs () {
    6576:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6578:	          move.l 1c752 <allRunningFunctions>,(sp)

	while (thisFunction) {
    657e:	   ,----- bra.s 659c <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    6580:	,--|----> movea.l (sp),a0
    6582:	|  |      move.w 52(a0),d0
    6586:	|  |  ,-- bne.s 6596 <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    6588:	|  |  |   movea.l (sp),a0
    658a:	|  |  |   move.b 56(a0),d0
    658e:	|  |  |   addq.b #1,d0
    6590:	|  |  |   movea.l (sp),a0
    6592:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    6596:	|  |  '-> movea.l (sp),a0
    6598:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    659c:	|  '----> tst.l (sp)
    659e:	'-------- bne.s 6580 <freezeSubs+0xa>
	}
}
    65a0:	          nop
    65a2:	          nop
    65a4:	          addq.l #4,sp
    65a6:	          rts

000065a8 <handleInput>:

BOOL handleInput () {
    65a8:	             lea -20(sp),sp
    65ac:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    65ae:	             move.l 1c8ca <overRegion>,d0
    65b4:	         ,-- bne.s 65bc <handleInput+0x14>
    65b6:	         |   jsr 16b48 <getOverRegion>

	if (input.justMoved) {
    65bc:	         '-> move.w 1c770 <input+0x4>,d0
    65c2:	         ,-- beq.s 6600 <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    65c4:	         |   movea.l 1c120 <currentEvents>,a0
    65ca:	         |   move.l 16(a0),d0
    65ce:	         +-- beq.s 6600 <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    65d0:	         |   move.l 1c78a <noStack>,d1
    65d6:	         |   movea.l 1c120 <currentEvents>,a0
    65dc:	         |   move.l 16(a0),d0
    65e0:	         |   pea 1 <_start+0x1>
    65e4:	         |   move.l d1,-(sp)
    65e6:	         |   clr.l -(sp)
    65e8:	         |   clr.l -(sp)
    65ea:	         |   move.l d0,-(sp)
    65ec:	         |   jsr 7ca6 <startNewFunctionNum>
    65f2:	         |   lea 20(sp),sp
    65f6:	         |   tst.l d0
    65f8:	         +-- bne.s 6600 <handleInput+0x58>
    65fa:	         |   clr.w d0
    65fc:	,--------|-- bra.w 6826 <handleInput+0x27e>
		}
	}
	input.justMoved = FALSE;
    6600:	|        '-> clr.w 1c770 <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    6606:	|            move.l 1c782 <lastRegion>,d1
    660c:	|            move.l 1c8ca <overRegion>,d0
    6612:	|            cmp.l d1,d0
    6614:	|  ,-------- beq.w 66ec <handleInput+0x144>
    6618:	|  |         movea.l 1c120 <currentEvents>,a0
    661e:	|  |         move.l 20(a0),d0
    6622:	|  +-------- beq.w 66ec <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    6626:	|  |         moveq #12,d0
    6628:	|  |         move.l d0,20(sp)
    662c:	|  |         clr.l 16(sp)
    6630:	|  |         move.l 1c7ba <SysBase>,d0
    6636:	|  |         movea.l d0,a6
    6638:	|  |         move.l 20(sp),d0
    663c:	|  |         move.l 16(sp),d1
    6640:	|  |         jsr -684(a6)
    6644:	|  |         move.l d0,12(sp)
    6648:	|  |         move.l 12(sp),d0
    664c:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    6650:	|  |         move.l 4(sp),d0
    6654:	|  |     ,-- bne.s 666a <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    6656:	|  |     |   pea 19b05 <PutChar+0xc77>
    665c:	|  |     |   jsr 183ec <KPrintF>
    6662:	|  |     |   addq.l #4,sp
			return FALSE;
    6664:	|  |     |   clr.w d0
    6666:	+--|-----|-- bra.w 6826 <handleInput+0x27e>
		}
		
		initVarNew (tempStack -> thisVar);
    666a:	|  |     '-> movea.l 4(sp),a0
    666e:	|  |         clr.l (a0)
		if (overRegion) {
    6670:	|  |         move.l 1c8ca <overRegion>,d0
    6676:	|  |  ,----- beq.s 669e <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    6678:	|  |  |      movea.l 1c8ca <overRegion>,a0
    667e:	|  |  |      movea.l 28(a0),a0
    6682:	|  |  |      move.l 4(a0),d1
    6686:	|  |  |      move.l 4(sp),d0
    668a:	|  |  |      move.l d1,-(sp)
    668c:	|  |  |      pea 7 <_start+0x7>
    6690:	|  |  |      move.l d0,-(sp)
    6692:	|  |  |      jsr 161fe <setVariable>
    6698:	|  |  |      lea 12(sp),sp
    669c:	|  |  |  ,-- bra.s 66b4 <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    669e:	|  |  '--|-> move.l 4(sp),d0
    66a2:	|  |     |   clr.l -(sp)
    66a4:	|  |     |   pea 1 <_start+0x1>
    66a8:	|  |     |   move.l d0,-(sp)
    66aa:	|  |     |   jsr 161fe <setVariable>
    66b0:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;		
    66b4:	|  |     '-> movea.l 4(sp),a0
    66b8:	|  |         clr.l 8(a0)
		if (! startNewFunctionLoaded (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    66bc:	|  |         movea.l 1c120 <currentEvents>,a0
    66c2:	|  |         move.l 20(a0),d0
    66c6:	|  |         pea 1 <_start+0x1>
    66ca:	|  |         lea 8(sp),a0
    66ce:	|  |         move.l a0,-(sp)
    66d0:	|  |         clr.l -(sp)
    66d2:	|  |         pea 1 <_start+0x1>
    66d6:	|  |         move.l d0,-(sp)
    66d8:	|  |         jsr 7b96 <startNewFunctionLoaded>
    66de:	|  |         lea 20(sp),sp
    66e2:	|  |         tst.l d0
    66e4:	|  +-------- bne.s 66ec <handleInput+0x144>
    66e6:	|  |         clr.w d0
    66e8:	+--|-------- bra.w 6826 <handleInput+0x27e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    66ec:	|  '-------> move.w 1c772 <input+0x6>,d0
    66f2:	|        ,-- beq.s 6730 <handleInput+0x188>
    66f4:	|        |   movea.l 1c120 <currentEvents>,a0
    66fa:	|        |   move.l 4(a0),d0
    66fe:	|        +-- beq.s 6730 <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6700:	|        |   move.l 1c78a <noStack>,d1
    6706:	|        |   movea.l 1c120 <currentEvents>,a0
    670c:	|        |   move.l 4(a0),d0
    6710:	|        |   pea 1 <_start+0x1>
    6714:	|        |   move.l d1,-(sp)
    6716:	|        |   clr.l -(sp)
    6718:	|        |   clr.l -(sp)
    671a:	|        |   move.l d0,-(sp)
    671c:	|        |   jsr 7ca6 <startNewFunctionNum>
    6722:	|        |   lea 20(sp),sp
    6726:	|        |   tst.l d0
    6728:	|        +-- bne.s 6730 <handleInput+0x188>
    672a:	|        |   clr.w d0
    672c:	+--------|-- bra.w 6826 <handleInput+0x27e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    6730:	|        '-> move.w 1c774 <input+0x8>,d0
    6736:	|        ,-- beq.s 6774 <handleInput+0x1cc>
    6738:	|        |   movea.l 1c120 <currentEvents>,a0
    673e:	|        |   move.l 12(a0),d0
    6742:	|        +-- beq.s 6774 <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6744:	|        |   move.l 1c78a <noStack>,d1
    674a:	|        |   movea.l 1c120 <currentEvents>,a0
    6750:	|        |   move.l 12(a0),d0
    6754:	|        |   pea 1 <_start+0x1>
    6758:	|        |   move.l d1,-(sp)
    675a:	|        |   clr.l -(sp)
    675c:	|        |   clr.l -(sp)
    675e:	|        |   move.l d0,-(sp)
    6760:	|        |   jsr 7ca6 <startNewFunctionNum>
    6766:	|        |   lea 20(sp),sp
    676a:	|        |   tst.l d0
    676c:	|        +-- bne.s 6774 <handleInput+0x1cc>
    676e:	|        |   clr.w d0
    6770:	+--------|-- bra.w 6826 <handleInput+0x27e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction) {
    6774:	|        '-> move.w 1c76c <input>,d0
    677a:	|        ,-- beq.s 67d2 <handleInput+0x22a>
    677c:	|        |   movea.l 1c120 <currentEvents>,a0
    6782:	|        |   move.l (a0),d0
    6784:	|        +-- beq.s 67d2 <handleInput+0x22a>
		int test[1];
		test[0] = currentEvents -> leftMouseFunction;
    6786:	|        |   movea.l 1c120 <currentEvents>,a0
    678c:	|        |   move.l (a0),d0
    678e:	|        |   move.l d0,8(sp)
		KPrintF("handleinput: Onleftmousefunction: %ld will be run\n", test[0]);
    6792:	|        |   move.l 8(sp),d0
    6796:	|        |   move.l d0,-(sp)
    6798:	|        |   pea 19b3b <PutChar+0xcad>
    679e:	|        |   jsr 183ec <KPrintF>
    67a4:	|        |   addq.l #8,sp
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    67a6:	|        |   move.l 1c78a <noStack>,d1
    67ac:	|        |   movea.l 1c120 <currentEvents>,a0
    67b2:	|        |   move.l (a0),d0
    67b4:	|        |   pea 1 <_start+0x1>
    67b8:	|        |   move.l d1,-(sp)
    67ba:	|        |   clr.l -(sp)
    67bc:	|        |   clr.l -(sp)
    67be:	|        |   move.l d0,-(sp)
    67c0:	|        |   jsr 7ca6 <startNewFunctionNum>
    67c6:	|        |   lea 20(sp),sp
    67ca:	|        |   tst.l d0
    67cc:	|        +-- bne.s 67d2 <handleInput+0x22a>
    67ce:	|        |   clr.w d0
    67d0:	+--------|-- bra.s 6826 <handleInput+0x27e>
	}		
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    67d2:	|        '-> move.w 1c76e <input+0x2>,d0
    67d8:	|        ,-- beq.s 6814 <handleInput+0x26c>
    67da:	|        |   movea.l 1c120 <currentEvents>,a0
    67e0:	|        |   move.l 8(a0),d0
    67e4:	|        +-- beq.s 6814 <handleInput+0x26c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    67e6:	|        |   move.l 1c78a <noStack>,d1
    67ec:	|        |   movea.l 1c120 <currentEvents>,a0
    67f2:	|        |   move.l 8(a0),d0
    67f6:	|        |   pea 1 <_start+0x1>
    67fa:	|        |   move.l d1,-(sp)
    67fc:	|        |   clr.l -(sp)
    67fe:	|        |   clr.l -(sp)
    6800:	|        |   move.l d0,-(sp)
    6802:	|        |   jsr 7ca6 <startNewFunctionNum>
    6808:	|        |   lea 20(sp),sp
    680c:	|        |   tst.l d0
    680e:	|        +-- bne.s 6814 <handleInput+0x26c>
    6810:	|        |   clr.w d0
    6812:	+--------|-- bra.s 6826 <handleInput+0x27e>
	}

	lastRegion = overRegion;
    6814:	|        '-> move.l 1c8ca <overRegion>,d0
    681a:	|            move.l d0,1c782 <lastRegion>
	return runSludge ();
    6820:	|            jsr 796a <runSludge>
}
    6826:	'----------> movea.l (sp)+,a6
    6828:	             lea 20(sp),sp
    682c:	             rts

0000682e <initSludge>:

BOOL initSludge (char * filename) {
    682e:	             lea -292(sp),sp
    6832:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    6836:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    683a:	             jsr b5e0 <makeNullAnim>
    6840:	             move.l d0,1c6b2 <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    6846:	             pea 1c764 <gameVersion>
    684c:	             pea 19b6e <PutChar+0xce0>
    6852:	             pea 45 <_start+0x45>
    6856:	             pea 47 <_start+0x47>
    685a:	             move.l 332(sp),-(sp)
    685e:	             jsr 7542 <openAndVerify>
    6864:	             lea 20(sp),sp
    6868:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    686c:	         ,-- bne.s 6874 <initSludge+0x46>
    686e:	         |   clr.w d0
    6870:	,--------|-- bra.w 6f9c <initSludge+0x76e>
	if (FGetC (fp)) {
    6874:	|        '-> move.l 288(sp),284(sp)
    687a:	|            move.l 1c7c2 <DOSBase>,d0
    6880:	|            movea.l d0,a6
    6882:	|            move.l 284(sp),d1
    6886:	|            jsr -306(a6)
    688a:	|            move.l d0,280(sp)
    688e:	|            move.l 280(sp),d0
    6892:	|  ,-------- beq.w 6a3c <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    6896:	|  |         move.l 288(sp),-(sp)
    689a:	|  |         jsr 6bc <get2bytes>
    68a0:	|  |         addq.l #4,sp
    68a2:	|  |         move.l d0,1c78e <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    68a8:	|  |         move.l 1c78e <numBIFNames>,d0
    68ae:	|  |         move.l d0,276(sp)
    68b2:	|  |         clr.l 272(sp)
    68b6:	|  |         move.l 1c7ba <SysBase>,d0
    68bc:	|  |         movea.l d0,a6
    68be:	|  |         move.l 276(sp),d0
    68c2:	|  |         move.l 272(sp),d1
    68c6:	|  |         jsr -684(a6)
    68ca:	|  |         move.l d0,268(sp)
    68ce:	|  |         move.l 268(sp),d0
    68d2:	|  |         move.l d0,1c73e <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    68d8:	|  |         move.l 1c73e <allBIFNames>,d0
    68de:	|  |     ,-- bne.s 68e6 <initSludge+0xb8>
    68e0:	|  |     |   clr.w d0
    68e2:	+--|-----|-- bra.w 6f9c <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    68e6:	|  |     '-> clr.l 304(sp)
    68ea:	|  |     ,-- bra.s 6910 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    68ec:	|  |  ,--|-> move.l 1c73e <allBIFNames>,d1
    68f2:	|  |  |  |   move.l 304(sp),d0
    68f6:	|  |  |  |   add.l d0,d0
    68f8:	|  |  |  |   add.l d0,d0
    68fa:	|  |  |  |   movea.l d1,a2
    68fc:	|  |  |  |   adda.l d0,a2
    68fe:	|  |  |  |   move.l 288(sp),-(sp)
    6902:	|  |  |  |   jsr b02 <readString>
    6908:	|  |  |  |   addq.l #4,sp
    690a:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    690c:	|  |  |  |   addq.l #1,304(sp)
    6910:	|  |  |  '-> move.l 1c78e <numBIFNames>,d0
    6916:	|  |  |      cmp.l 304(sp),d0
    691a:	|  |  '----- bgt.s 68ec <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    691c:	|  |         move.l 288(sp),-(sp)
    6920:	|  |         jsr 6bc <get2bytes>
    6926:	|  |         addq.l #4,sp
    6928:	|  |         move.l d0,1c79a <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    692e:	|  |         move.l 1c79a <numUserFunc>,d0
    6934:	|  |         move.l d0,264(sp)
    6938:	|  |         clr.l 260(sp)
    693c:	|  |         move.l 1c7ba <SysBase>,d0
    6942:	|  |         movea.l d0,a6
    6944:	|  |         move.l 264(sp),d0
    6948:	|  |         move.l 260(sp),d1
    694c:	|  |         jsr -684(a6)
    6950:	|  |         move.l d0,256(sp)
    6954:	|  |         move.l 256(sp),d0
    6958:	|  |         move.l d0,1c756 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    695e:	|  |         move.l 1c756 <allUserFunc>,d0
    6964:	|  |     ,-- bne.s 696c <initSludge+0x13e>
    6966:	|  |     |   clr.w d0
    6968:	+--|-----|-- bra.w 6f9c <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    696c:	|  |     '-> clr.l 300(sp)
    6970:	|  |     ,-- bra.s 6996 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    6972:	|  |  ,--|-> move.l 1c756 <allUserFunc>,d1
    6978:	|  |  |  |   move.l 300(sp),d0
    697c:	|  |  |  |   add.l d0,d0
    697e:	|  |  |  |   add.l d0,d0
    6980:	|  |  |  |   movea.l d1,a2
    6982:	|  |  |  |   adda.l d0,a2
    6984:	|  |  |  |   move.l 288(sp),-(sp)
    6988:	|  |  |  |   jsr b02 <readString>
    698e:	|  |  |  |   addq.l #4,sp
    6990:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    6992:	|  |  |  |   addq.l #1,300(sp)
    6996:	|  |  |  '-> move.l 1c79a <numUserFunc>,d0
    699c:	|  |  |      cmp.l 300(sp),d0
    69a0:	|  |  '----- bgt.s 6972 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    69a2:	|  |         move.l 1c764 <gameVersion>,d0
    69a8:	|  |         cmpi.l #258,d0
    69ae:	|  +-------- ble.w 6a3c <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    69b2:	|  |         move.l 288(sp),-(sp)
    69b6:	|  |         jsr 6bc <get2bytes>
    69bc:	|  |         addq.l #4,sp
    69be:	|  |         move.l d0,1c796 <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    69c4:	|  |         move.l 1c796 <numResourceNames>,d0
    69ca:	|  |         add.l d0,d0
    69cc:	|  |         add.l d0,d0
    69ce:	|  |         move.l d0,252(sp)
    69d2:	|  |         clr.l 248(sp)
    69d6:	|  |         move.l 1c7ba <SysBase>,d0
    69dc:	|  |         movea.l d0,a6
    69de:	|  |         move.l 252(sp),d0
    69e2:	|  |         move.l 248(sp),d1
    69e6:	|  |         jsr -684(a6)
    69ea:	|  |         move.l d0,244(sp)
    69ee:	|  |         move.l 244(sp),d0
    69f2:	|  |         move.l d0,1c74e <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    69f8:	|  |         move.l 1c74e <allResourceNames>,d0
    69fe:	|  |     ,-- bne.s 6a06 <initSludge+0x1d8>
    6a00:	|  |     |   clr.w d0
    6a02:	+--|-----|-- bra.w 6f9c <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    6a06:	|  |     '-> clr.l 296(sp)
    6a0a:	|  |     ,-- bra.s 6a30 <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    6a0c:	|  |  ,--|-> move.l 1c74e <allResourceNames>,d1
    6a12:	|  |  |  |   move.l 296(sp),d0
    6a16:	|  |  |  |   add.l d0,d0
    6a18:	|  |  |  |   add.l d0,d0
    6a1a:	|  |  |  |   movea.l d1,a2
    6a1c:	|  |  |  |   adda.l d0,a2
    6a1e:	|  |  |  |   move.l 288(sp),-(sp)
    6a22:	|  |  |  |   jsr b02 <readString>
    6a28:	|  |  |  |   addq.l #4,sp
    6a2a:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    6a2c:	|  |  |  |   addq.l #1,296(sp)
    6a30:	|  |  |  '-> move.l 1c796 <numResourceNames>,d0
    6a36:	|  |  |      cmp.l 296(sp),d0
    6a3a:	|  |  '----- bgt.s 6a0c <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    6a3c:	|  '-------> move.l #129,1c776 <input+0xa>
	input.mouseY = 100;
    6a46:	|            moveq #100,d0
    6a48:	|            move.l d0,1c77a <input+0xe>
	winWidth = get2bytes (fp);
    6a4e:	|            move.l 288(sp),-(sp)
    6a52:	|            jsr 6bc <get2bytes>
    6a58:	|            addq.l #4,sp
    6a5a:	|            move.l d0,1c702 <winWidth>
	winHeight = get2bytes (fp);
    6a60:	|            move.l 288(sp),-(sp)
    6a64:	|            jsr 6bc <get2bytes>
    6a6a:	|            addq.l #4,sp
    6a6c:	|            move.l d0,1c706 <winHeight>
	specialSettings = FGetC (fp);
    6a72:	|            move.l 288(sp),240(sp)
    6a78:	|            move.l 1c7c2 <DOSBase>,d0
    6a7e:	|            movea.l d0,a6
    6a80:	|            move.l 240(sp),d1
    6a84:	|            jsr -306(a6)
    6a88:	|            move.l d0,236(sp)
    6a8c:	|            move.l 236(sp),d0
    6a90:	|            move.l d0,1c79e <specialSettings>

	desiredfps = 1000/FGetC (fp);
    6a96:	|            move.l 288(sp),232(sp)
    6a9c:	|            move.l 1c7c2 <DOSBase>,d0
    6aa2:	|            movea.l d0,a6
    6aa4:	|            move.l 232(sp),d1
    6aa8:	|            jsr -306(a6)
    6aac:	|            move.l d0,228(sp)
    6ab0:	|            move.l 228(sp),d0
    6ab4:	|            move.l d0,-(sp)
    6ab6:	|            pea 3e8 <encodeFilename+0xea>
    6aba:	|            jsr 18df6 <__divsi3>
    6ac0:	|            addq.l #8,sp
    6ac2:	|            move.l d0,1c132 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    6ac8:	|            move.l 288(sp),-(sp)
    6acc:	|            jsr b02 <readString>
    6ad2:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    6ad4:	|            move.l 288(sp),224(sp)
    6ada:	|            move.l #116572,220(sp)
    6ae2:	|            moveq #8,d1
    6ae4:	|            move.l d1,216(sp)
    6ae8:	|            moveq #1,d0
    6aea:	|            move.l d0,212(sp)
    6aee:	|            move.l 1c7c2 <DOSBase>,d0
    6af4:	|            movea.l d0,a6
    6af6:	|            move.l 224(sp),d1
    6afa:	|            move.l 220(sp),d2
    6afe:	|            move.l 216(sp),d3
    6b02:	|            move.l 212(sp),d4
    6b06:	|            jsr -324(a6)
    6b0a:	|            move.l d0,208(sp)
    6b0e:	|            move.l 208(sp),d0
    6b12:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    6b16:	|            moveq #1,d1
    6b18:	|            cmp.l 204(sp),d1
    6b1c:	|        ,-- beq.s 6b2c <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    6b1e:	|        |   pea 19ba7 <PutChar+0xd19>
    6b24:	|        |   jsr 183ec <KPrintF>
    6b2a:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    6b2c:	|        '-> move.l 1c764 <gameVersion>,d0
    6b32:	|            cmpi.l #258,d0
    6b38:	|        ,-- ble.s 6b48 <initSludge+0x31a>
    6b3a:	|        |   move.l 288(sp),-(sp)
    6b3e:	|        |   jsr b02 <readString>
    6b44:	|        |   addq.l #4,sp
    6b46:	|     ,--|-- bra.s 6b5c <initSludge+0x32e>
    6b48:	|     |  '-> pea 19bc5 <PutChar+0xd37>
    6b4e:	|     |      pea 19bc5 <PutChar+0xd37>
    6b54:	|     |      jsr 14e38 <joinStrings>
    6b5a:	|     |      addq.l #8,sp
    6b5c:	|     '----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    6b60:	|            move.l 1c764 <gameVersion>,d0
    6b66:	|            cmpi.l #258,d0
    6b6c:	|     ,----- ble.s 6b8e <initSludge+0x360>
    6b6e:	|     |      move.l 288(sp),196(sp)
    6b74:	|     |      move.l 1c7c2 <DOSBase>,d0
    6b7a:	|     |      movea.l d0,a6
    6b7c:	|     |      move.l 196(sp),d1
    6b80:	|     |      jsr -306(a6)
    6b84:	|     |      move.l d0,192(sp)
    6b88:	|     |      move.l 192(sp),d0
    6b8c:	|     |  ,-- bra.s 6b90 <initSludge+0x362>
    6b8e:	|     '--|-> moveq #0,d0
    6b90:	|        '-> move.l d0,1c896 <gameSettings+0x4>
	makeLanguageTable (fp);
    6b96:	|            move.l 288(sp),-(sp)
    6b9a:	|            jsr 147ee <makeLanguageTable>
    6ba0:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    6ba2:	|            move.l 1c764 <gameVersion>,d0
    6ba8:	|            cmpi.l #261,d0
    6bae:	|        ,-- ble.s 6bfc <initSludge+0x3ce>
	{
		FGetC(fp);
    6bb0:	|        |   move.l 288(sp),188(sp)
    6bb6:	|        |   move.l 1c7c2 <DOSBase>,d0
    6bbc:	|        |   movea.l d0,a6
    6bbe:	|        |   move.l 188(sp),d1
    6bc2:	|        |   jsr -306(a6)
    6bc6:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    6bca:	|        |   move.l 288(sp),180(sp)
    6bd0:	|        |   move.l 1c7c2 <DOSBase>,d0
    6bd6:	|        |   movea.l d0,a6
    6bd8:	|        |   move.l 180(sp),d1
    6bdc:	|        |   jsr -306(a6)
    6be0:	|        |   move.l d0,176(sp)
		getFloat (fp);
    6be4:	|        |   move.l 288(sp),-(sp)
    6be8:	|        |   jsr 7d8 <getFloat>
    6bee:	|        |   addq.l #4,sp
		getFloat (fp);
    6bf0:	|        |   move.l 288(sp),-(sp)
    6bf4:	|        |   jsr 7d8 <getFloat>
    6bfa:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    6bfc:	|        '-> move.l 288(sp),-(sp)
    6c00:	|            jsr b02 <readString>
    6c06:	|            addq.l #4,sp
    6c08:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    6c0c:	|            pea 19bc6 <PutChar+0xd38>
    6c12:	|            move.l 176(sp),-(sp)
    6c16:	|            jsr 14db8 <strcmp>
    6c1c:	|            addq.l #8,sp
    6c1e:	|            tst.l d0
    6c20:	|        ,-- beq.s 6c28 <initSludge+0x3fa>
		return FALSE;
    6c22:	|        |   clr.w d0
    6c24:	+--------|-- bra.w 6f9c <initSludge+0x76e>
	}
	FreeVec( checker);
    6c28:	|        '-> move.l 172(sp),168(sp)
    6c2e:	|            move.l 1c7ba <SysBase>,d0
    6c34:	|            movea.l d0,a6
    6c36:	|            movea.l 168(sp),a1
    6c3a:	|            jsr -690(a6)
	checker = NULL;
    6c3e:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    6c42:	|            move.l 288(sp),164(sp)
    6c48:	|            move.l 1c7c2 <DOSBase>,d0
    6c4e:	|            movea.l d0,a6
    6c50:	|            move.l 164(sp),d1
    6c54:	|            jsr -306(a6)
    6c58:	|            move.l d0,160(sp)
    6c5c:	|            move.l 160(sp),d0
    6c60:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    6c64:	|            moveq #0,d0
    6c66:	|            move.b 159(sp),d0
    6c6a:	|            moveq #1,d1
    6c6c:	|            and.l d1,d0
    6c6e:	|        ,-- beq.s 6cc6 <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    6c70:	|        |   move.l 1c7c2 <DOSBase>,d0
    6c76:	|        |   movea.l d0,a6
    6c78:	|        |   jsr -60(a6)
    6c7c:	|        |   move.l d0,38(sp)
    6c80:	|        |   move.l 38(sp),d0
    6c84:	|        |   move.l d0,34(sp)
    6c88:	|        |   move.l #105422,30(sp)
    6c90:	|        |   moveq #54,d0
    6c92:	|        |   move.l d0,26(sp)
    6c96:	|        |   move.l 1c7c2 <DOSBase>,d0
    6c9c:	|        |   movea.l d0,a6
    6c9e:	|        |   move.l 34(sp),d1
    6ca2:	|        |   move.l 30(sp),d2
    6ca6:	|        |   move.l 26(sp),d3
    6caa:	|        |   jsr -48(a6)
    6cae:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    6cb2:	|        |   pea 19c05 <PutChar+0xd77>
    6cb8:	|        |   jsr 183ec <KPrintF>
    6cbe:	|        |   addq.l #4,sp
		return FALSE;
    6cc0:	|        |   clr.w d0
    6cc2:	+--------|-- bra.w 6f9c <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    6cc6:	|        '-> move.l 288(sp),-(sp)
    6cca:	|            jsr 6bc <get2bytes>
    6cd0:	|            addq.l #4,sp
    6cd2:	|            move.l d0,1c792 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    6cd8:	|            move.l 1c792 <numGlobals>,d0
    6cde:	|            lsl.l #3,d0
    6ce0:	|            move.l d0,154(sp)
    6ce4:	|            clr.l 150(sp)
    6ce8:	|            move.l 1c7ba <SysBase>,d0
    6cee:	|            movea.l d0,a6
    6cf0:	|            move.l 154(sp),d0
    6cf4:	|            move.l 150(sp),d1
    6cf8:	|            jsr -684(a6)
    6cfc:	|            move.l d0,146(sp)
    6d00:	|            move.l 146(sp),d0
    6d04:	|            move.l d0,1c768 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    6d0a:	|            move.l 1c768 <globalVars>,d0
    6d10:	|        ,-- bne.s 6d2e <initSludge+0x500>
    6d12:	|        |   move.l 1c792 <numGlobals>,d0
    6d18:	|        +-- ble.s 6d2e <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    6d1a:	|        |   pea 19c3d <PutChar+0xdaf>
    6d20:	|        |   jsr 183ec <KPrintF>
    6d26:	|        |   addq.l #4,sp
		return FALSE;
    6d28:	|        |   clr.w d0
    6d2a:	+--------|-- bra.w 6f9c <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    6d2e:	|        '-> clr.l 308(sp)
    6d32:	|        ,-- bra.s 6d4a <initSludge+0x51c>
    6d34:	|     ,--|-> move.l 1c768 <globalVars>,d1
    6d3a:	|     |  |   move.l 308(sp),d0
    6d3e:	|     |  |   lsl.l #3,d0
    6d40:	|     |  |   movea.l d1,a0
    6d42:	|     |  |   adda.l d0,a0
    6d44:	|     |  |   clr.l (a0)
    6d46:	|     |  |   addq.l #1,308(sp)
    6d4a:	|     |  '-> move.l 1c792 <numGlobals>,d0
    6d50:	|     |      cmp.l 308(sp),d0
    6d54:	|     '----- bgt.s 6d34 <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    6d56:	|            move.l 1c896 <gameSettings+0x4>,d0
    6d5c:	|            clr.l -(sp)
    6d5e:	|            move.l d0,-(sp)
    6d60:	|            move.l 296(sp),-(sp)
    6d64:	|            jsr 811e <setFileIndices>
    6d6a:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    6d6e:	|            pea 1 <_start+0x1>
    6d72:	|            jsr 7dd8 <getNumberedString>
    6d78:	|            addq.l #4,sp
    6d7a:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    6d7e:	|            move.l 142(sp),-(sp)
    6d82:	|            jsr 2fe <encodeFilename>
    6d88:	|            addq.l #4,sp
    6d8a:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    6d8e:	|            move.l 142(sp),134(sp)
    6d94:	|            move.l 1c7ba <SysBase>,d0
    6d9a:	|            movea.l d0,a6
    6d9c:	|            movea.l 134(sp),a1
    6da0:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    6da4:	|            move.l 138(sp),130(sp)
    6daa:	|            move.l 1c7c2 <DOSBase>,d0
    6db0:	|            movea.l d0,a6
    6db2:	|            move.l 130(sp),d1
    6db6:	|            jsr -120(a6)
    6dba:	|            move.l d0,126(sp)
    6dbe:	|            move.l 126(sp),d0
    6dc2:	|            move.l d0,292(sp)
	if(lock == 0) {
    6dc6:	|        ,-- bne.s 6df4 <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    6dc8:	|        |   move.l 138(sp),122(sp)
    6dce:	|        |   moveq #-2,d1
    6dd0:	|        |   move.l d1,118(sp)
    6dd4:	|        |   move.l 1c7c2 <DOSBase>,d0
    6dda:	|        |   movea.l d0,a6
    6ddc:	|        |   move.l 122(sp),d1
    6de0:	|        |   move.l 118(sp),d2
    6de4:	|        |   jsr -84(a6)
    6de8:	|        |   move.l d0,114(sp)
    6dec:	|        |   move.l 114(sp),d0
    6df0:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    6df4:	|        '-> move.l 292(sp),110(sp)
    6dfa:	|            move.l 1c7c2 <DOSBase>,d0
    6e00:	|            movea.l d0,a6
    6e02:	|            move.l 110(sp),d1
    6e06:	|            jsr -126(a6)
    6e0a:	|            move.l d0,106(sp)
    6e0e:	|            move.l 106(sp),d0
    6e12:	|        ,-- bne.s 6e6e <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    6e14:	|        |   move.l 138(sp),-(sp)
    6e18:	|        |   pea 19c70 <PutChar+0xde2>
    6e1e:	|        |   jsr 183ec <KPrintF>
    6e24:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    6e26:	|        |   move.l 1c7c2 <DOSBase>,d0
    6e2c:	|        |   movea.l d0,a6
    6e2e:	|        |   jsr -60(a6)
    6e32:	|        |   move.l d0,58(sp)
    6e36:	|        |   move.l 58(sp),d0
    6e3a:	|        |   move.l d0,54(sp)
    6e3e:	|        |   move.l #105629,50(sp)
    6e46:	|        |   moveq #40,d0
    6e48:	|        |   move.l d0,46(sp)
    6e4c:	|        |   move.l 1c7c2 <DOSBase>,d0
    6e52:	|        |   movea.l d0,a6
    6e54:	|        |   move.l 54(sp),d1
    6e58:	|        |   move.l 50(sp),d2
    6e5c:	|        |   move.l 46(sp),d3
    6e60:	|        |   jsr -48(a6)
    6e64:	|        |   move.l d0,42(sp)
		return FALSE;
    6e68:	|        |   clr.w d0
    6e6a:	+--------|-- bra.w 6f9c <initSludge+0x76e>
	}

	FreeVec(gameName);
    6e6e:	|        '-> move.l 138(sp),102(sp)
    6e74:	|            move.l 1c7ba <SysBase>,d0
    6e7a:	|            movea.l d0,a6
    6e7c:	|            movea.l 102(sp),a1
    6e80:	|            jsr -690(a6)

	readIniFile (filename);
    6e84:	|            move.l 316(sp),-(sp)
    6e88:	|            jsr 14922 <readIniFile>
    6e8e:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    6e90:	|            jsr 146f4 <getLanguageForFileB>
    6e96:	|            move.l d0,1c124 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    6e9c:	|            move.l 1c124 <languageNum>,d0
    6ea2:	|        ,-- bpl.s 6eb2 <initSludge+0x684>
    6ea4:	|        |   pea 19cc6 <PutChar+0xe38>
    6eaa:	|        |   jsr 183ec <KPrintF>
    6eb0:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    6eb2:	|        '-> move.l 1c124 <languageNum>,d0
    6eb8:	|            move.l d0,d1
    6eba:	|            move.l 1c896 <gameSettings+0x4>,d0
    6ec0:	|            move.l d1,-(sp)
    6ec2:	|            move.l d0,-(sp)
    6ec4:	|            clr.l -(sp)
    6ec6:	|            jsr 811e <setFileIndices>
    6ecc:	|            lea 12(sp),sp

	if (dataFol[0]) {
    6ed0:	|            movea.l 200(sp),a0
    6ed4:	|            move.b (a0),d0
    6ed6:	|     ,----- beq.w 6f80 <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    6eda:	|     |      move.l 200(sp),-(sp)
    6ede:	|     |      jsr 2fe <encodeFilename>
    6ee4:	|     |      addq.l #4,sp
    6ee6:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    6eea:	|     |      move.l 98(sp),94(sp)
    6ef0:	|     |      move.l 1c7c2 <DOSBase>,d0
    6ef6:	|     |      movea.l d0,a6
    6ef8:	|     |      move.l 94(sp),d1
    6efc:	|     |      jsr -120(a6)
    6f00:	|     |      move.l d0,90(sp)
    6f04:	|     |      move.l 90(sp),d0
    6f08:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    6f0c:	|     |  ,-- bne.s 6f3a <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    6f0e:	|     |  |   move.l 98(sp),86(sp)
    6f14:	|     |  |   moveq #-2,d1
    6f16:	|     |  |   move.l d1,82(sp)
    6f1a:	|     |  |   move.l 1c7c2 <DOSBase>,d0
    6f20:	|     |  |   movea.l d0,a6
    6f22:	|     |  |   move.l 86(sp),d1
    6f26:	|     |  |   move.l 82(sp),d2
    6f2a:	|     |  |   jsr -84(a6)
    6f2e:	|     |  |   move.l d0,78(sp)
    6f32:	|     |  |   move.l 78(sp),d0
    6f36:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    6f3a:	|     |  '-> move.l 292(sp),74(sp)
    6f40:	|     |      move.l 1c7c2 <DOSBase>,d0
    6f46:	|     |      movea.l d0,a6
    6f48:	|     |      move.l 74(sp),d1
    6f4c:	|     |      jsr -126(a6)
    6f50:	|     |      move.l d0,70(sp)
    6f54:	|     |      move.l 70(sp),d0
    6f58:	|     |  ,-- bne.s 6f6a <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    6f5a:	|     |  |   move.l 1c7c2 <DOSBase>,d0
    6f60:	|     |  |   movea.l d0,a6
    6f62:	|     |  |   jsr -60(a6)
    6f66:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    6f6a:	|     |  '-> move.l 98(sp),62(sp)
    6f70:	|     |      move.l 1c7ba <SysBase>,d0
    6f76:	|     |      movea.l d0,a6
    6f78:	|     |      movea.l 62(sp),a1
    6f7c:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    6f80:	|     '----> movea.l 1c706 <winHeight>,a0
    6f86:	|            lea -15(a0),a0
    6f8a:	|            move.l a0,d0
    6f8c:	|            move.l d0,-(sp)
    6f8e:	|            pea a <_start+0xa>
    6f92:	|            jsr 8b64 <positionStatus>
    6f98:	|            addq.l #8,sp

	return TRUE;
    6f9a:	|            moveq #1,d0
}
    6f9c:	'----------> movem.l (sp)+,d2-d4/a2/a6
    6fa0:	             lea 292(sp),sp
    6fa4:	             rts

00006fa6 <killSpeechTimers>:

void killSpeechTimers () {
    6fa6:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6fa8:	          move.l 1c752 <allRunningFunctions>,(sp)

	while (thisFunction) {
    6fae:	   ,----- bra.s 6fda <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    6fb0:	,--|----> movea.l (sp),a0
    6fb2:	|  |      move.b 56(a0),d0
    6fb6:	|  |  ,-- bne.s 6fd4 <killSpeechTimers+0x2e>
    6fb8:	|  |  |   movea.l (sp),a0
    6fba:	|  |  |   move.w 50(a0),d0
    6fbe:	|  |  +-- beq.s 6fd4 <killSpeechTimers+0x2e>
    6fc0:	|  |  |   movea.l (sp),a0
    6fc2:	|  |  |   move.l 12(a0),d0
    6fc6:	|  |  +-- beq.s 6fd4 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    6fc8:	|  |  |   movea.l (sp),a0
    6fca:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    6fce:	|  |  |   movea.l (sp),a0
    6fd0:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    6fd4:	|  |  '-> movea.l (sp),a0
    6fd6:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6fda:	|  '----> tst.l (sp)
    6fdc:	'-------- bne.s 6fb0 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    6fde:	          jsr 449a <killAllSpeech>
}
    6fe4:	          nop
    6fe6:	          addq.l #4,sp
    6fe8:	          rts

00006fea <loadFunctionCode>:

struct loadedFunction *loadFunctionCode (unsigned int originalNumber) {
    6fea:	                         lea -104(sp),sp
    6fee:	                         move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	struct loadedFunction * newFunc = NULL;
    6ff0:	                         clr.l 100(sp)
	int a;

#ifndef DISABLEFUNCTIONCACHE
	struct cachedFunction * current = allCachedFunctions;
    6ff4:	                         move.l 1c742 <allCachedFunctions>,92(sp)
	while( current) {
    6ffc:	               ,-------- bra.s 7044 <loadFunctionCode+0x5a>
		if (current->theFunction->originalNumber == originalNumber)
    6ffe:	            ,--|-------> movea.l 92(sp),a0
    7002:	            |  |         movea.l 4(a0),a0
    7006:	            |  |         move.l (a0),d0
    7008:	            |  |         cmp.l 112(sp),d0
    700c:	            |  |  ,----- bne.s 703a <loadFunctionCode+0x50>
		{
			if( current->theFunction->unloaded == 1)
    700e:	            |  |  |      movea.l 92(sp),a0
    7012:	            |  |  |      movea.l 4(a0),a0
    7016:	            |  |  |      move.l 58(a0),d0
    701a:	            |  |  |      moveq #1,d1
    701c:	            |  |  |      cmp.l d0,d1
    701e:	            |  |  +----- bne.s 703a <loadFunctionCode+0x50>
			{ 
				newFunc = current->theFunction;	
    7020:	            |  |  |      movea.l 92(sp),a0
    7024:	            |  |  |      move.l 4(a0),100(sp)
				KPrintF("loadFunctionCode: Found in Cache\n");
    702a:	            |  |  |      pea 19cf1 <PutChar+0xe63>
    7030:	            |  |  |      jsr 183ec <KPrintF>
    7036:	            |  |  |      addq.l #4,sp
				break;
    7038:	            |  |  |  ,-- bra.s 704a <loadFunctionCode+0x60>
			}									
		}
		current = current->next;
    703a:	            |  |  '--|-> movea.l 92(sp),a0
    703e:	            |  |     |   move.l 8(a0),92(sp)
	while( current) {
    7044:	            |  '-----|-> tst.l 92(sp)
    7048:	            '--------|-- bne.s 6ffe <loadFunctionCode+0x14>
	}			

	if( !newFunc)
    704a:	                     '-> tst.l 100(sp)
    704e:	               ,-------- bne.w 72a6 <loadFunctionCode+0x2bc>
	{		
		KPrintF("loadFunctionCode: Function not in cache. Loading new function\n");
    7052:	               |         pea 19d13 <PutChar+0xe85>
    7058:	               |         jsr 183ec <KPrintF>
    705e:	               |         addq.l #4,sp
		numCachedFunctions++;
    7060:	               |         move.l 1c74a <numCachedFunctions>,d0
    7066:	               |         addq.l #1,d0
    7068:	               |         move.l d0,1c74a <numCachedFunctions>
#endif		
		newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    706e:	               |         moveq #62,d0
    7070:	               |         move.l d0,84(sp)
    7074:	               |         clr.l 80(sp)
    7078:	               |         move.l 1c7ba <SysBase>,d0
    707e:	               |         movea.l d0,a6
    7080:	               |         move.l 84(sp),d0
    7084:	               |         move.l 80(sp),d1
    7088:	               |         jsr -684(a6)
    708c:	               |         move.l d0,76(sp)
    7090:	               |         move.l 76(sp),d0
    7094:	               |         move.l d0,100(sp)
	
		if(!newFunc) {
    7098:	               |     ,-- bne.s 70ae <loadFunctionCode+0xc4>
			KPrintF("loadFunctionCode: Cannot allocate memory");
    709a:	               |     |   pea 19d52 <PutChar+0xec4>
    70a0:	               |     |   jsr 183ec <KPrintF>
    70a6:	               |     |   addq.l #4,sp
			return 0;
    70a8:	               |     |   moveq #0,d0
    70aa:	,--------------|-----|-- bra.w 749a <loadFunctionCode+0x4b0>
		}

		newFunc -> originalNumber = originalNumber;
    70ae:	|              |     '-> move.l 112(sp),d0
    70b2:	|              |         movea.l 100(sp),a0
    70b6:	|              |         move.l d0,(a0)

		if (! openSubSlice (originalNumber)) return FALSE;
    70b8:	|              |         move.l 112(sp),d0
    70bc:	|              |         move.l d0,-(sp)
    70be:	|              |         jsr 805e <openSubSlice>
    70c4:	|              |         addq.l #4,sp
    70c6:	|              |         tst.w d0
    70c8:	|              |     ,-- bne.s 70d0 <loadFunctionCode+0xe6>
    70ca:	|              |     |   moveq #0,d0
    70cc:	+--------------|-----|-- bra.w 749a <loadFunctionCode+0x4b0>
		

		newFunc-> unfreezable	= FGetC (bigDataFile);
    70d0:	|              |     '-> move.l 1c7a2 <bigDataFile>,72(sp)
    70d8:	|              |         move.l 1c7c2 <DOSBase>,d0
    70de:	|              |         movea.l d0,a6
    70e0:	|              |         move.l 72(sp),d1
    70e4:	|              |         jsr -306(a6)
    70e8:	|              |         move.l d0,68(sp)
    70ec:	|              |         move.l 68(sp),d0
    70f0:	|              |         move.l d0,d0
    70f2:	|              |         movea.l 100(sp),a0
    70f6:	|              |         move.w d0,52(a0)
		numLines				= get2bytes (bigDataFile);
    70fa:	|              |         move.l 1c7a2 <bigDataFile>,d0
    7100:	|              |         move.l d0,-(sp)
    7102:	|              |         jsr 6bc <get2bytes>
    7108:	|              |         addq.l #4,sp
    710a:	|              |         move.l d0,64(sp)
		newFunc -> numArgs		= get2bytes (bigDataFile);
    710e:	|              |         move.l 1c7a2 <bigDataFile>,d0
    7114:	|              |         move.l d0,-(sp)
    7116:	|              |         jsr 6bc <get2bytes>
    711c:	|              |         addq.l #4,sp
    711e:	|              |         movea.l 100(sp),a0
    7122:	|              |         move.l d0,16(a0)
		newFunc -> numLocals	= get2bytes (bigDataFile);	
    7126:	|              |         move.l 1c7a2 <bigDataFile>,d0
    712c:	|              |         move.l d0,-(sp)
    712e:	|              |         jsr 6bc <get2bytes>
    7134:	|              |         addq.l #4,sp
    7136:	|              |         movea.l 100(sp),a0
    713a:	|              |         move.l d0,8(a0)

		newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    713e:	|              |         move.l 64(sp),d0
    7142:	|              |         lsl.l #3,d0
    7144:	|              |         move.l d0,60(sp)
    7148:	|              |         clr.l 56(sp)
    714c:	|              |         move.l 1c7ba <SysBase>,d0
    7152:	|              |         movea.l d0,a6
    7154:	|              |         move.l 60(sp),d0
    7158:	|              |         move.l 56(sp),d1
    715c:	|              |         jsr -684(a6)
    7160:	|              |         move.l d0,52(sp)
    7164:	|              |         move.l 52(sp),d0
    7168:	|              |         movea.l 100(sp),a0
    716c:	|              |         move.l d0,4(a0)
		if (! newFunc -> compiledLines) {
    7170:	|              |         movea.l 100(sp),a0
    7174:	|              |         move.l 4(a0),d0
    7178:	|              |     ,-- bne.s 718e <loadFunctionCode+0x1a4>
			KPrintF("loadFunctionCode: cannot allocate memory");
    717a:	|              |     |   pea 19d7b <PutChar+0xeed>
    7180:	|              |     |   jsr 183ec <KPrintF>
    7186:	|              |     |   addq.l #4,sp
			return FALSE;
    7188:	|              |     |   moveq #0,d0
    718a:	+--------------|-----|-- bra.w 749a <loadFunctionCode+0x4b0>
		}
		
		for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    718e:	|              |     '-> clr.l 104(sp)
    7192:	|              |     ,-- bra.s 71f4 <loadFunctionCode+0x20a>
			newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    7194:	|              |  ,--|-> move.l 1c7a2 <bigDataFile>,32(sp)
    719c:	|              |  |  |   move.l 1c7c2 <DOSBase>,d0
    71a2:	|              |  |  |   movea.l d0,a6
    71a4:	|              |  |  |   move.l 32(sp),d1
    71a8:	|              |  |  |   jsr -306(a6)
    71ac:	|              |  |  |   move.l d0,28(sp)
    71b0:	|              |  |  |   move.l 28(sp),d1
    71b4:	|              |  |  |   movea.l 100(sp),a0
    71b8:	|              |  |  |   movea.l 4(a0),a0
    71bc:	|              |  |  |   move.l 104(sp),d0
    71c0:	|              |  |  |   lsl.l #3,d0
    71c2:	|              |  |  |   adda.l d0,a0
    71c4:	|              |  |  |   move.l d1,d0
    71c6:	|              |  |  |   move.l d0,(a0)
			newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    71c8:	|              |  |  |   move.l 1c7a2 <bigDataFile>,d0
    71ce:	|              |  |  |   move.l d0,-(sp)
    71d0:	|              |  |  |   jsr 6bc <get2bytes>
    71d6:	|              |  |  |   addq.l #4,sp
    71d8:	|              |  |  |   move.l d0,d1
    71da:	|              |  |  |   movea.l 100(sp),a0
    71de:	|              |  |  |   movea.l 4(a0),a0
    71e2:	|              |  |  |   move.l 104(sp),d0
    71e6:	|              |  |  |   lsl.l #3,d0
    71e8:	|              |  |  |   adda.l d0,a0
    71ea:	|              |  |  |   move.l d1,d0
    71ec:	|              |  |  |   move.l d0,4(a0)
		for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    71f0:	|              |  |  |   addq.l #1,104(sp)
    71f4:	|              |  |  '-> move.l 104(sp),d1
    71f8:	|              |  |      cmp.l 64(sp),d1
    71fc:	|              |  '----- bcs.s 7194 <loadFunctionCode+0x1aa>
		}
		finishAccess ();
    71fe:	|              |         jsr 7dce <finishAccess>

#ifndef DISABLEFUNCTIONCACHE		
		struct cachedFunction  *next = allCachedFunctions;
    7204:	|              |         move.l 1c742 <allCachedFunctions>,48(sp)
		allCachedFunctions = AllocVec(sizeof(struct cachedFunction),MEMF_ANY);
    720c:	|              |         moveq #16,d0
    720e:	|              |         move.l d0,44(sp)
    7212:	|              |         clr.l 40(sp)
    7216:	|              |         move.l 1c7ba <SysBase>,d0
    721c:	|              |         movea.l d0,a6
    721e:	|              |         move.l 44(sp),d0
    7222:	|              |         move.l 40(sp),d1
    7226:	|              |         jsr -684(a6)
    722a:	|              |         move.l d0,36(sp)
    722e:	|              |         move.l 36(sp),d0
    7232:	|              |         move.l d0,1c742 <allCachedFunctions>
		allCachedFunctions -> prev = NULL;
    7238:	|              |         movea.l 1c742 <allCachedFunctions>,a0
    723e:	|              |         clr.l 12(a0)
		if (! allCachedFunctions) {
    7242:	|              |         move.l 1c742 <allCachedFunctions>,d0
    7248:	|              |     ,-- bne.s 725e <loadFunctionCode+0x274>
			KPrintF("loadFunctionCode: cannot allocate memory for cached function");
    724a:	|              |     |   pea 19da4 <PutChar+0xf16>
    7250:	|              |     |   jsr 183ec <KPrintF>
    7256:	|              |     |   addq.l #4,sp
			return NULL;
    7258:	|              |     |   moveq #0,d0
    725a:	+--------------|-----|-- bra.w 749a <loadFunctionCode+0x4b0>
		}
		if( !next) {
    725e:	|              |     '-> tst.l 48(sp)
    7262:	|              |     ,-- bne.s 7270 <loadFunctionCode+0x286>
			lastCachedFunction = allCachedFunctions;
    7264:	|              |     |   move.l 1c742 <allCachedFunctions>,d0
    726a:	|              |     |   move.l d0,1c746 <lastCachedFunction>
		} 	

		if(next) next->prev = allCachedFunctions;
    7270:	|              |     '-> tst.l 48(sp)
    7274:	|              |     ,-- beq.s 7284 <loadFunctionCode+0x29a>
    7276:	|              |     |   move.l 1c742 <allCachedFunctions>,d0
    727c:	|              |     |   movea.l 48(sp),a0
    7280:	|              |     |   move.l d0,12(a0)
		
		allCachedFunctions->next = next;
    7284:	|              |     '-> movea.l 1c742 <allCachedFunctions>,a0
    728a:	|              |         move.l 48(sp),8(a0)
		allCachedFunctions->theFunction = newFunc;
    7290:	|              |         movea.l 1c742 <allCachedFunctions>,a0
    7296:	|              |         move.l 100(sp),4(a0)
		allCachedFunctions->funcNum = originalNumber;
    729c:	|              |         movea.l 1c742 <allCachedFunctions>,a0
    72a2:	|              |         move.l 112(sp),(a0)

	}	

	newFunc -> unloaded = 0;	
    72a6:	|              '-------> movea.l 100(sp),a0
    72aa:	|                        clr.l 58(a0)
#endif
	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    72ae:	|                        movea.l 100(sp),a0
    72b2:	|                        move.l 8(a0),d0
    72b6:	|              ,-------- ble.w 733c <loadFunctionCode+0x352>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    72ba:	|              |         movea.l 100(sp),a0
    72be:	|              |         move.l 8(a0),d0
    72c2:	|              |         lsl.l #3,d0
    72c4:	|              |         move.l d0,24(sp)
    72c8:	|              |         clr.l 20(sp)
    72cc:	|              |         move.l 1c7ba <SysBase>,d0
    72d2:	|              |         movea.l d0,a6
    72d4:	|              |         move.l 24(sp),d0
    72d8:	|              |         move.l 20(sp),d1
    72dc:	|              |         jsr -684(a6)
    72e0:	|              |         move.l d0,16(sp)
    72e4:	|              |         move.l 16(sp),d0
    72e8:	|              |         movea.l 100(sp),a0
    72ec:	|              |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    72f0:	|              |         movea.l 100(sp),a0
    72f4:	|              |         move.l 20(a0),d0
    72f8:	|              |     ,-- bne.s 730e <loadFunctionCode+0x324>
			KPrintF("loadFunctionCode: cannot allocate memory");
    72fa:	|              |     |   pea 19d7b <PutChar+0xeed>
    7300:	|              |     |   jsr 183ec <KPrintF>
    7306:	|              |     |   addq.l #4,sp
			return FALSE;
    7308:	|              |     |   moveq #0,d0
    730a:	+--------------|-----|-- bra.w 749a <loadFunctionCode+0x4b0>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    730e:	|              |     '-> clr.l 96(sp)
    7312:	|              |     ,-- bra.s 732c <loadFunctionCode+0x342>
			initVarNew (newFunc -> localVars[a]);
    7314:	|              |  ,--|-> movea.l 100(sp),a0
    7318:	|              |  |  |   move.l 20(a0),d1
    731c:	|              |  |  |   move.l 96(sp),d0
    7320:	|              |  |  |   lsl.l #3,d0
    7322:	|              |  |  |   movea.l d1,a0
    7324:	|              |  |  |   adda.l d0,a0
    7326:	|              |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    7328:	|              |  |  |   addq.l #1,96(sp)
    732c:	|              |  |  '-> movea.l 100(sp),a0
    7330:	|              |  |      move.l 8(a0),d0
    7334:	|              |  |      cmp.l 96(sp),d0
    7338:	|              |  '----- bgt.s 7314 <loadFunctionCode+0x32a>
    733a:	|              |     ,-- bra.s 7344 <loadFunctionCode+0x35a>
		}
	} else
	{
		newFunc->numLocals = NULL;
    733c:	|              '-----|-> movea.l 100(sp),a0
    7340:	|                    |   clr.l 8(a0)
	}	

#ifndef DISABLEFUNCTIONCACHE
	if( numCachedFunctions >= CACHEFUNCTIONMAX) 
    7344:	|                    '-> move.l 1c74a <numCachedFunctions>,d0
    734a:	|                        moveq #9,d1
    734c:	|                        cmp.l d0,d1
    734e:	|  ,-------------------- bge.w 7496 <loadFunctionCode+0x4ac>
	{
		struct cachedFunction *huntanddestroy = lastCachedFunction;
    7352:	|  |                     move.l 1c746 <lastCachedFunction>,88(sp)
		while (huntanddestroy) 
    735a:	|  |     ,-------------- bra.w 7418 <loadFunctionCode+0x42e>
		{
			if (huntanddestroy->theFunction->unloaded == 1) 
    735e:	|  |  ,--|-------------> movea.l 88(sp),a0
    7362:	|  |  |  |               movea.l 4(a0),a0
    7366:	|  |  |  |               move.l 58(a0),d0
    736a:	|  |  |  |               moveq #1,d1
    736c:	|  |  |  |               cmp.l d0,d1
    736e:	|  |  |  |  ,----------- bne.w 740e <loadFunctionCode+0x424>
			{
				if( huntanddestroy->prev)
    7372:	|  |  |  |  |            movea.l 88(sp),a0
    7376:	|  |  |  |  |            move.l 12(a0),d0
    737a:	|  |  |  |  |        ,-- beq.s 7392 <loadFunctionCode+0x3a8>
					huntanddestroy->prev->next = huntanddestroy->next;							
    737c:	|  |  |  |  |        |   movea.l 88(sp),a0
    7380:	|  |  |  |  |        |   movea.l 12(a0),a0
    7384:	|  |  |  |  |        |   movea.l 88(sp),a1
    7388:	|  |  |  |  |        |   move.l 8(a1),d0
    738c:	|  |  |  |  |        |   move.l d0,8(a0)
    7390:	|  |  |  |  |     ,--|-- bra.s 73b2 <loadFunctionCode+0x3c8>
				else
				{
					allCachedFunctions = huntanddestroy->next;
    7392:	|  |  |  |  |     |  '-> movea.l 88(sp),a0
    7396:	|  |  |  |  |     |      move.l 8(a0),d0
    739a:	|  |  |  |  |     |      move.l d0,1c742 <allCachedFunctions>
					if( allCachedFunctions)
    73a0:	|  |  |  |  |     |      move.l 1c742 <allCachedFunctions>,d0
    73a6:	|  |  |  |  |     +----- beq.s 73b2 <loadFunctionCode+0x3c8>
						allCachedFunctions->prev = NULL;
    73a8:	|  |  |  |  |     |      movea.l 1c742 <allCachedFunctions>,a0
    73ae:	|  |  |  |  |     |      clr.l 12(a0)
				}

				if (huntanddestroy == lastCachedFunction) {
    73b2:	|  |  |  |  |     '----> move.l 1c746 <lastCachedFunction>,d0
    73b8:	|  |  |  |  |            cmp.l 88(sp),d0
    73bc:	|  |  |  |  |     ,----- bne.s 73ee <loadFunctionCode+0x404>
					if( huntanddestroy->prev)
    73be:	|  |  |  |  |     |      movea.l 88(sp),a0
    73c2:	|  |  |  |  |     |      move.l 12(a0),d0
    73c6:	|  |  |  |  |     |  ,-- beq.s 73d8 <loadFunctionCode+0x3ee>
						lastCachedFunction = huntanddestroy->prev;
    73c8:	|  |  |  |  |     |  |   movea.l 88(sp),a0
    73cc:	|  |  |  |  |     |  |   move.l 12(a0),d0
    73d0:	|  |  |  |  |     |  |   move.l d0,1c746 <lastCachedFunction>
				{
					if( huntanddestroy->next)
						huntanddestroy->next->prev = huntanddestroy->prev;																
				}				

				break;
    73d6:	|  |  |  |  |  ,--|--|-- bra.s 7422 <loadFunctionCode+0x438>
						lastCachedFunction = NULL;
    73d8:	|  |  |  |  |  |  |  '-> clr.l 1c746 <lastCachedFunction>
						KPrintF("loadFunctionCode: Last cached function is NULL\n");
    73de:	|  |  |  |  |  |  |      pea 19de1 <PutChar+0xf53>
    73e4:	|  |  |  |  |  |  |      jsr 183ec <KPrintF>
    73ea:	|  |  |  |  |  |  |      addq.l #4,sp
				break;
    73ec:	|  |  |  |  |  +--|----- bra.s 7422 <loadFunctionCode+0x438>
					if( huntanddestroy->next)
    73ee:	|  |  |  |  |  |  '----> movea.l 88(sp),a0
    73f2:	|  |  |  |  |  |         move.l 8(a0),d0
    73f6:	|  |  |  |  |  +-------- beq.s 7422 <loadFunctionCode+0x438>
						huntanddestroy->next->prev = huntanddestroy->prev;																
    73f8:	|  |  |  |  |  |         movea.l 88(sp),a0
    73fc:	|  |  |  |  |  |         movea.l 8(a0),a0
    7400:	|  |  |  |  |  |         movea.l 88(sp),a1
    7404:	|  |  |  |  |  |         move.l 12(a1),d0
    7408:	|  |  |  |  |  |         move.l d0,12(a0)
				break;
    740c:	|  |  |  |  |  +-------- bra.s 7422 <loadFunctionCode+0x438>
			}
			
			huntanddestroy = huntanddestroy->prev;
    740e:	|  |  |  |  '--|-------> movea.l 88(sp),a0
    7412:	|  |  |  |     |         move.l 12(a0),88(sp)
		while (huntanddestroy) 
    7418:	|  |  |  '-----|-------> tst.l 88(sp)
    741c:	|  |  '--------|-------- bne.w 735e <loadFunctionCode+0x374>
    7420:	|  |           |     ,-- bra.s 7424 <loadFunctionCode+0x43a>
				break;
    7422:	|  |           '-----|-> nop
		}		

		if( huntanddestroy)
    7424:	|  |                 '-> tst.l 88(sp)
    7428:	|  |                 ,-- beq.s 7488 <loadFunctionCode+0x49e>
		{
			numCachedFunctions--;
    742a:	|  |                 |   move.l 1c74a <numCachedFunctions>,d0
    7430:	|  |                 |   subq.l #1,d0
    7432:	|  |                 |   move.l d0,1c74a <numCachedFunctions>
			FreeVec(huntanddestroy->theFunction->compiledLines);
    7438:	|  |                 |   movea.l 88(sp),a0
    743c:	|  |                 |   movea.l 4(a0),a0
    7440:	|  |                 |   move.l 4(a0),12(sp)
    7446:	|  |                 |   move.l 1c7ba <SysBase>,d0
    744c:	|  |                 |   movea.l d0,a6
    744e:	|  |                 |   movea.l 12(sp),a1
    7452:	|  |                 |   jsr -690(a6)
			FreeVec(huntanddestroy->theFunction);
    7456:	|  |                 |   movea.l 88(sp),a0
    745a:	|  |                 |   move.l 4(a0),8(sp)
    7460:	|  |                 |   move.l 1c7ba <SysBase>,d0
    7466:	|  |                 |   movea.l d0,a6
    7468:	|  |                 |   movea.l 8(sp),a1
    746c:	|  |                 |   jsr -690(a6)
			FreeVec(huntanddestroy);
    7470:	|  |                 |   move.l 88(sp),4(sp)
    7476:	|  |                 |   move.l 1c7ba <SysBase>,d0
    747c:	|  |                 |   movea.l d0,a6
    747e:	|  |                 |   movea.l 4(sp),a1
    7482:	|  |                 |   jsr -690(a6)
    7486:	|  +-----------------|-- bra.s 7496 <loadFunctionCode+0x4ac>
		} else 
		{
			KPrintF("loadFunctionCode: Function is still in use\n");
    7488:	|  |                 '-> pea 19e11 <PutChar+0xf83>
    748e:	|  |                     jsr 183ec <KPrintF>
    7494:	|  |                     addq.l #4,sp
		}
	}	
#endif					
	
	return newFunc;
    7496:	|  '-------------------> move.l 100(sp),d0

}
    749a:	'----------------------> movea.l (sp)+,a6
    749c:	                         lea 104(sp),sp
    74a0:	                         rts

000074a2 <loadHandlers>:

void loadHandlers (BPTR fp) {
    74a2:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    74a4:	movea.l 1c120 <currentEvents>,a2
    74aa:	move.l 8(sp),-(sp)
    74ae:	jsr 6bc <get2bytes>
    74b4:	addq.l #4,sp
    74b6:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    74b8:	movea.l 1c120 <currentEvents>,a2
    74be:	move.l 8(sp),-(sp)
    74c2:	jsr 6bc <get2bytes>
    74c8:	addq.l #4,sp
    74ca:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    74ce:	movea.l 1c120 <currentEvents>,a2
    74d4:	move.l 8(sp),-(sp)
    74d8:	jsr 6bc <get2bytes>
    74de:	addq.l #4,sp
    74e0:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    74e4:	movea.l 1c120 <currentEvents>,a2
    74ea:	move.l 8(sp),-(sp)
    74ee:	jsr 6bc <get2bytes>
    74f4:	addq.l #4,sp
    74f6:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    74fa:	movea.l 1c120 <currentEvents>,a2
    7500:	move.l 8(sp),-(sp)
    7504:	jsr 6bc <get2bytes>
    750a:	addq.l #4,sp
    750c:	move.l d0,16(a2)
	currentEvents -> focusFunction			= (struct loadedFunction *) get4bytes (fp); //Todo: Changed to pointer type. Check if this is correct.
    7510:	move.l 8(sp),-(sp)
    7514:	jsr 718 <get4bytes>
    751a:	addq.l #4,sp
    751c:	movea.l 1c120 <currentEvents>,a0
    7522:	move.l d0,20(a0)
	currentEvents -> spaceFunction			= get2bytes (fp);
    7526:	movea.l 1c120 <currentEvents>,a2
    752c:	move.l 8(sp),-(sp)
    7530:	jsr 6bc <get2bytes>
    7536:	addq.l #4,sp
    7538:	move.l d0,24(a2)
}
    753c:	nop
    753e:	movea.l (sp)+,a2
    7540:	rts

00007542 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    7542:	       lea -312(sp),sp
    7546:	       movem.l d2-d3/a6,-(sp)
    754a:	       move.l 332(sp),d1
    754e:	       move.l 336(sp),d0
    7552:	       move.b d1,d1
    7554:	       move.b d1,16(sp)
    7558:	       move.b d0,d0
    755a:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    755e:	       move.l 328(sp),318(sp)
    7564:	       move.l #1005,314(sp)
    756c:	       move.l 1c7c2 <DOSBase>,d0
    7572:	       movea.l d0,a6
    7574:	       move.l 318(sp),d1
    7578:	       move.l 314(sp),d2
    757c:	       jsr -30(a6)
    7580:	       move.l d0,310(sp)
    7584:	       move.l 310(sp),d0
    7588:	       move.l d0,306(sp)

	if (! fp) {
    758c:	   ,-- bne.s 75e8 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    758e:	   |   move.l 1c7c2 <DOSBase>,d0
    7594:	   |   movea.l d0,a6
    7596:	   |   jsr -60(a6)
    759a:	   |   move.l d0,154(sp)
    759e:	   |   move.l 154(sp),d0
    75a2:	   |   move.l d0,150(sp)
    75a6:	   |   move.l #106045,146(sp)
    75ae:	   |   moveq #31,d0
    75b0:	   |   move.l d0,142(sp)
    75b4:	   |   move.l 1c7c2 <DOSBase>,d0
    75ba:	   |   movea.l d0,a6
    75bc:	   |   move.l 150(sp),d1
    75c0:	   |   move.l 146(sp),d2
    75c4:	   |   move.l 142(sp),d3
    75c8:	   |   jsr -48(a6)
    75cc:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    75d0:	   |   move.l 328(sp),-(sp)
    75d4:	   |   pea 19e5d <PutChar+0xfcf>
    75da:	   |   jsr 183ec <KPrintF>
    75e0:	   |   addq.l #8,sp
		return NULL;
    75e2:	   |   moveq #0,d0
    75e4:	,--|-- bra.w 78a8 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    75e8:	|  '-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    75ec:	|      move.l 306(sp),302(sp)
    75f2:	|      move.l 1c7c2 <DOSBase>,d0
    75f8:	|      movea.l d0,a6
    75fa:	|      move.l 302(sp),d1
    75fe:	|      jsr -306(a6)
    7602:	|      move.l d0,298(sp)
    7606:	|      move.l 298(sp),d0
    760a:	|      moveq #83,d1
    760c:	|      cmp.l d0,d1
    760e:	|  ,-- beq.s 7616 <openAndVerify+0xd4>
    7610:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    7616:	|  '-> move.l 306(sp),294(sp)
    761c:	|      move.l 1c7c2 <DOSBase>,d0
    7622:	|      movea.l d0,a6
    7624:	|      move.l 294(sp),d1
    7628:	|      jsr -306(a6)
    762c:	|      move.l d0,290(sp)
    7630:	|      move.l 290(sp),d0
    7634:	|      moveq #76,d1
    7636:	|      cmp.l d0,d1
    7638:	|  ,-- beq.s 7640 <openAndVerify+0xfe>
    763a:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    7640:	|  '-> move.l 306(sp),286(sp)
    7646:	|      move.l 1c7c2 <DOSBase>,d0
    764c:	|      movea.l d0,a6
    764e:	|      move.l 286(sp),d1
    7652:	|      jsr -306(a6)
    7656:	|      move.l d0,282(sp)
    765a:	|      move.l 282(sp),d0
    765e:	|      moveq #85,d1
    7660:	|      cmp.l d0,d1
    7662:	|  ,-- beq.s 766a <openAndVerify+0x128>
    7664:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    766a:	|  '-> move.l 306(sp),278(sp)
    7670:	|      move.l 1c7c2 <DOSBase>,d0
    7676:	|      movea.l d0,a6
    7678:	|      move.l 278(sp),d1
    767c:	|      jsr -306(a6)
    7680:	|      move.l d0,274(sp)
    7684:	|      move.l 274(sp),d0
    7688:	|      moveq #68,d1
    768a:	|      cmp.l d0,d1
    768c:	|  ,-- beq.s 7694 <openAndVerify+0x152>
    768e:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    7694:	|  '-> move.l 306(sp),270(sp)
    769a:	|      move.l 1c7c2 <DOSBase>,d0
    76a0:	|      movea.l d0,a6
    76a2:	|      move.l 270(sp),d1
    76a6:	|      jsr -306(a6)
    76aa:	|      move.l d0,266(sp)
    76ae:	|      move.l 266(sp),d1
    76b2:	|      move.b 16(sp),d0
    76b6:	|      ext.w d0
    76b8:	|      movea.w d0,a0
    76ba:	|      cmpa.l d1,a0
    76bc:	|  ,-- beq.s 76c4 <openAndVerify+0x182>
    76be:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    76c4:	|  '-> move.l 306(sp),262(sp)
    76ca:	|      move.l 1c7c2 <DOSBase>,d0
    76d0:	|      movea.l d0,a6
    76d2:	|      move.l 262(sp),d1
    76d6:	|      jsr -306(a6)
    76da:	|      move.l d0,258(sp)
    76de:	|      move.l 258(sp),d1
    76e2:	|      move.b 14(sp),d0
    76e6:	|      ext.w d0
    76e8:	|      movea.w d0,a0
    76ea:	|      cmpa.l d1,a0
    76ec:	|  ,-- beq.s 76f4 <openAndVerify+0x1b2>
    76ee:	|  |   move.w #1,322(sp)
	if (headerBad) {
    76f4:	|  '-> tst.w 322(sp)
    76f8:	|  ,-- beq.s 7750 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    76fa:	|  |   move.l 1c7c2 <DOSBase>,d0
    7700:	|  |   movea.l d0,a6
    7702:	|  |   jsr -60(a6)
    7706:	|  |   move.l d0,174(sp)
    770a:	|  |   move.l 174(sp),d0
    770e:	|  |   move.l d0,170(sp)
    7712:	|  |   move.l #106108,166(sp)
    771a:	|  |   moveq #31,d0
    771c:	|  |   move.l d0,162(sp)
    7720:	|  |   move.l 1c7c2 <DOSBase>,d0
    7726:	|  |   movea.l d0,a6
    7728:	|  |   move.l 170(sp),d1
    772c:	|  |   move.l 166(sp),d2
    7730:	|  |   move.l 162(sp),d3
    7734:	|  |   jsr -48(a6)
    7738:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    773c:	|  |   pea 19e7c <PutChar+0xfee>
    7742:	|  |   jsr 183ec <KPrintF>
    7748:	|  |   addq.l #4,sp
		return NULL;
    774a:	|  |   moveq #0,d0
    774c:	+--|-- bra.w 78a8 <openAndVerify+0x366>
	}
	FGetC (fp);
    7750:	|  '-> move.l 306(sp),254(sp)
    7756:	|      move.l 1c7c2 <DOSBase>,d0
    775c:	|      movea.l d0,a6
    775e:	|      move.l 254(sp),d1
    7762:	|      jsr -306(a6)
    7766:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    776a:	|      nop
    776c:	|  ,-> move.l 306(sp),246(sp)
    7772:	|  |   move.l 1c7c2 <DOSBase>,d0
    7778:	|  |   movea.l d0,a6
    777a:	|  |   move.l 246(sp),d1
    777e:	|  |   jsr -306(a6)
    7782:	|  |   move.l d0,242(sp)
    7786:	|  |   move.l 242(sp),d0
    778a:	|  '-- bne.s 776c <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    778c:	|      move.l 306(sp),238(sp)
    7792:	|      move.l 1c7c2 <DOSBase>,d0
    7798:	|      movea.l d0,a6
    779a:	|      move.l 238(sp),d1
    779e:	|      jsr -306(a6)
    77a2:	|      move.l d0,234(sp)
    77a6:	|      move.l 234(sp),d0
    77aa:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    77ae:	|      move.l 306(sp),226(sp)
    77b4:	|      move.l 1c7c2 <DOSBase>,d0
    77ba:	|      movea.l d0,a6
    77bc:	|      move.l 226(sp),d1
    77c0:	|      jsr -306(a6)
    77c4:	|      move.l d0,222(sp)
    77c8:	|      move.l 222(sp),d0
    77cc:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    77d0:	|      move.l 230(sp),d0
    77d4:	|      lsl.l #8,d0
    77d6:	|      add.l 218(sp),d0
    77da:	|      movea.l 344(sp),a0
    77de:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    77e0:	|      movea.l 344(sp),a0
    77e4:	|      move.l (a0),d0
    77e6:	|      cmpi.l #514,d0
    77ec:	|  ,-- ble.s 7842 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    77ee:	|  |   move.l 1c7c2 <DOSBase>,d0
    77f4:	|  |   movea.l d0,a6
    77f6:	|  |   jsr -60(a6)
    77fa:	|  |   move.l d0,194(sp)
    77fe:	|  |   move.l 194(sp),d0
    7802:	|  |   move.l d0,190(sp)
    7806:	|  |   move.l #106135,186(sp)
    780e:	|  |   moveq #100,d1
    7810:	|  |   move.l d1,182(sp)
    7814:	|  |   move.l 1c7c2 <DOSBase>,d0
    781a:	|  |   movea.l d0,a6
    781c:	|  |   move.l 190(sp),d1
    7820:	|  |   move.l 186(sp),d2
    7824:	|  |   move.l 182(sp),d3
    7828:	|  |   jsr -48(a6)
    782c:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    7830:	|  |   pea 19e97 <PutChar+0x1009>
    7836:	|  |   jsr 183ec <KPrintF>
    783c:	|  |   addq.l #4,sp
		return NULL;
    783e:	|  |   moveq #0,d0
    7840:	+--|-- bra.s 78a8 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    7842:	|  '-> movea.l 344(sp),a0
    7846:	|      move.l (a0),d0
    7848:	|      cmpi.l #257,d0
    784e:	|  ,-- bgt.s 78a4 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    7850:	|  |   move.l 1c7c2 <DOSBase>,d0
    7856:	|  |   movea.l d0,a6
    7858:	|  |   jsr -60(a6)
    785c:	|  |   move.l d0,214(sp)
    7860:	|  |   move.l 214(sp),d0
    7864:	|  |   move.l d0,210(sp)
    7868:	|  |   move.l #106204,206(sp)
    7870:	|  |   moveq #100,d0
    7872:	|  |   move.l d0,202(sp)
    7876:	|  |   move.l 1c7c2 <DOSBase>,d0
    787c:	|  |   movea.l d0,a6
    787e:	|  |   move.l 210(sp),d1
    7882:	|  |   move.l 206(sp),d2
    7886:	|  |   move.l 202(sp),d3
    788a:	|  |   jsr -48(a6)
    788e:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    7892:	|  |   pea 19edc <PutChar+0x104e>
    7898:	|  |   jsr 183ec <KPrintF>
    789e:	|  |   addq.l #4,sp
		return NULL;
    78a0:	|  |   moveq #0,d0
    78a2:	+--|-- bra.s 78a8 <openAndVerify+0x366>
	}
	return fp;
    78a4:	|  '-> move.l 306(sp),d0
}
    78a8:	'----> movem.l (sp)+,d2-d3/a6
    78ac:	       lea 312(sp),sp
    78b0:	       rts

000078b2 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    78b2:	          subq.l #8,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    78b4:	          move.l #116562,4(sp)
	while (* huntAndDestroy) {
    78bc:	   ,----- bra.s 790c <pauseFunction+0x5a>
		if (fun == * huntAndDestroy) {
    78be:	,--|----> movea.l 4(sp),a0
    78c2:	|  |      move.l (a0),d0
    78c4:	|  |      cmp.l 12(sp),d0
    78c8:	|  |  ,-- bne.s 78fe <pauseFunction+0x4c>
			int test[1];
			test[0] = fun -> originalNumber;
    78ca:	|  |  |   movea.l 12(sp),a0
    78ce:	|  |  |   move.l (a0),d0
    78d0:	|  |  |   move.l d0,(sp)
			KPrintF("Function %ld removed from running functions\n", test[0]);
    78d2:	|  |  |   move.l (sp),d0
    78d4:	|  |  |   move.l d0,-(sp)
    78d6:	|  |  |   pea 19f23 <PutChar+0x1095>
    78dc:	|  |  |   jsr 183ec <KPrintF>
    78e2:	|  |  |   addq.l #8,sp
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    78e4:	|  |  |   movea.l 4(sp),a0
    78e8:	|  |  |   movea.l (a0),a0
    78ea:	|  |  |   move.l 44(a0),d0
    78ee:	|  |  |   movea.l 4(sp),a0
    78f2:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    78f4:	|  |  |   movea.l 12(sp),a0
    78f8:	|  |  |   clr.l 44(a0)
    78fc:	|  +--|-- bra.s 790c <pauseFunction+0x5a>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    78fe:	|  |  '-> movea.l 4(sp),a0
    7902:	|  |      move.l (a0),d0
    7904:	|  |      moveq #44,d1
    7906:	|  |      add.l d0,d1
    7908:	|  |      move.l d1,4(sp)
	while (* huntAndDestroy) {
    790c:	|  '----> movea.l 4(sp),a0
    7910:	|         move.l (a0),d0
    7912:	'-------- bne.s 78be <pauseFunction+0xc>
		}
	}
}
    7914:	          nop
    7916:	          nop
    7918:	          addq.l #8,sp
    791a:	          rts

0000791c <preloadNewFunctionNum>:

struct loadedFunction *preloadNewFunctionNum (unsigned int funcNum) {		

	return loadFunctionCode (funcNum);	
    791c:	move.l 4(sp),-(sp)
    7920:	jsr 6fea <loadFunctionCode>
    7926:	addq.l #4,sp
}
    7928:	rts

0000792a <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
    792a:	subq.l #4,sp

	int test[1];
	test[0] = fun -> originalNumber;
    792c:	movea.l 8(sp),a0
    7930:	move.l (a0),d0
    7932:	move.l d0,(sp)

	KPrintF("Function %ld restarted\n", test[0]);
    7934:	move.l (sp),d0
    7936:	move.l d0,-(sp)
    7938:	pea 19f50 <PutChar+0x10c2>
    793e:	jsr 183ec <KPrintF>
    7944:	addq.l #8,sp

	fun -> next = allRunningFunctions;
    7946:	move.l 1c752 <allRunningFunctions>,d0
    794c:	movea.l 8(sp),a0
    7950:	move.l d0,44(a0)
	fun -> unloaded = 0;
    7954:	movea.l 8(sp),a0
    7958:	clr.l 58(a0)
	allRunningFunctions = fun;
    795c:	move.l 8(sp),1c752 <allRunningFunctions>
}
    7964:	nop
    7966:	addq.l #4,sp
    7968:	rts

0000796a <runSludge>:

BOOL runSludge () {
    796a:	                      lea -12(sp),sp
    796e:	                      move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    7970:	                      move.l 1c752 <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    7978:	      ,-------------- bra.s 79f4 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    797a:	   ,--|-------------> movea.l 12(sp),a0
    797e:	   |  |               move.l 44(a0),8(sp)

		if (! thisFunction -> freezerLevel) {
    7984:	   |  |               movea.l 12(sp),a0
    7988:	   |  |               move.b 56(a0),d0
    798c:	   |  |  ,----------- bne.s 79ee <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    798e:	   |  |  |            movea.l 12(sp),a0
    7992:	   |  |  |            move.l 12(a0),d0
    7996:	   |  |  |     ,----- beq.s 79c0 <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    7998:	   |  |  |     |      movea.l 12(sp),a0
    799c:	   |  |  |     |      move.l 12(a0),d0
    79a0:	   |  |  |     |  ,-- bpl.s 79ac <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    79a2:	   |  |  |     |  |   movea.l 12(sp),a0
    79a6:	   |  |  |     |  |   clr.l 12(a0)
    79aa:	   |  |  +-----|--|-- bra.s 79ee <runSludge+0x84>
				} 
				else {
					thisFunction -> timeLeft--;
    79ac:	   |  |  |     |  '-> movea.l 12(sp),a0
    79b0:	   |  |  |     |      move.l 12(a0),d0
    79b4:	   |  |  |     |      subq.l #1,d0
    79b6:	   |  |  |     |      movea.l 12(sp),a0
    79ba:	   |  |  |     |      move.l d0,12(a0)
					break;
    79be:	   |  |  |  ,--|----- bra.s 79fa <runSludge+0x90>
				}
			} else {
				if (thisFunction -> isSpeech) {
    79c0:	   |  |  |  |  '----> movea.l 12(sp),a0
    79c4:	   |  |  |  |         move.w 50(a0),d0
    79c8:	   |  |  |  |     ,-- beq.s 79d8 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    79ca:	   |  |  |  |     |   movea.l 12(sp),a0
    79ce:	   |  |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    79d2:	   |  |  |  |     |   jsr 449a <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    79d8:	   |  |  |  |     '-> move.l 12(sp),-(sp)
    79dc:	   |  |  |  |         jsr 567c <continueFunction>
    79e2:	   |  |  |  |         addq.l #4,sp
    79e4:	   |  |  |  |         tst.w d0
    79e6:	   |  |  +--|-------- bne.s 79ee <runSludge+0x84>
					return FALSE;
    79e8:	   |  |  |  |         clr.w d0
    79ea:	,--|--|--|--|-------- bra.w 7a7a <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    79ee:	|  |  |  '--|-------> move.l 8(sp),12(sp)
	while (thisFunction) {
    79f4:	|  |  '-----|-------> tst.l 12(sp)
    79f8:	|  '--------|-------- bne.s 797a <runSludge+0x10>
	}

	if (loadNow) {
    79fa:	|           '-------> move.l 1c786 <loadNow>,d0
    7a00:	|           ,-------- beq.s 7a78 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    7a02:	|           |         movea.l 1c786 <loadNow>,a0
    7a08:	|           |         move.b (a0),d0
    7a0a:	|           |         cmpi.b #58,d0
    7a0e:	|           |  ,----- bne.s 7a42 <runSludge+0xd8>
			saveGame (loadNow + 1);
    7a10:	|           |  |      move.l 1c786 <loadNow>,d0
    7a16:	|           |  |      addq.l #1,d0
    7a18:	|           |  |      move.l d0,-(sp)
    7a1a:	|           |  |      jsr d036 <saveGame>
    7a20:	|           |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    7a22:	|           |  |      movea.l 1c880 <saverFunc>,a0
    7a28:	|           |  |      lea 28(a0),a0
    7a2c:	|           |  |      pea 1 <_start+0x1>
    7a30:	|           |  |      pea 1 <_start+0x1>
    7a34:	|           |  |      move.l a0,-(sp)
    7a36:	|           |  |      jsr 161fe <setVariable>
    7a3c:	|           |  |      lea 12(sp),sp
    7a40:	|           |  |  ,-- bra.s 7a5a <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    7a42:	|           |  '--|-> move.l 1c786 <loadNow>,d0
    7a48:	|           |     |   move.l d0,-(sp)
    7a4a:	|           |     |   jsr cb7e <loadGame>
    7a50:	|           |     |   addq.l #4,sp
    7a52:	|           |     |   tst.w d0
    7a54:	|           |     +-- bne.s 7a5a <runSludge+0xf0>
    7a56:	|           |     |   clr.w d0
    7a58:	+-----------|-----|-- bra.s 7a7a <runSludge+0x110>
		}
		FreeVec(loadNow);
    7a5a:	|           |     '-> move.l 1c786 <loadNow>,4(sp)
    7a62:	|           |         move.l 1c7ba <SysBase>,d0
    7a68:	|           |         movea.l d0,a6
    7a6a:	|           |         movea.l 4(sp),a1
    7a6e:	|           |         jsr -690(a6)
		loadNow = NULL;
    7a72:	|           |         clr.l 1c786 <loadNow>
	}

	return TRUE;
    7a78:	|           '-------> moveq #1,d0
}
    7a7a:	'-------------------> movea.l (sp)+,a6
    7a7c:	                      lea 12(sp),sp
    7a80:	                      rts

00007a82 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    7a82:	movea.l 1c120 <currentEvents>,a0
    7a88:	move.l (a0),d0
    7a8a:	move.l 4(sp),-(sp)
    7a8e:	move.l d0,-(sp)
    7a90:	jsr 8d0 <put2bytes>
    7a96:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    7a98:	movea.l 1c120 <currentEvents>,a0
    7a9e:	move.l 4(a0),d0
    7aa2:	move.l 4(sp),-(sp)
    7aa6:	move.l d0,-(sp)
    7aa8:	jsr 8d0 <put2bytes>
    7aae:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    7ab0:	movea.l 1c120 <currentEvents>,a0
    7ab6:	move.l 8(a0),d0
    7aba:	move.l 4(sp),-(sp)
    7abe:	move.l d0,-(sp)
    7ac0:	jsr 8d0 <put2bytes>
    7ac6:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    7ac8:	movea.l 1c120 <currentEvents>,a0
    7ace:	move.l 12(a0),d0
    7ad2:	move.l 4(sp),-(sp)
    7ad6:	move.l d0,-(sp)
    7ad8:	jsr 8d0 <put2bytes>
    7ade:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    7ae0:	movea.l 1c120 <currentEvents>,a0
    7ae6:	move.l 16(a0),d0
    7aea:	move.l 4(sp),-(sp)
    7aee:	move.l d0,-(sp)
    7af0:	jsr 8d0 <put2bytes>
    7af6:	addq.l #8,sp
	put4bytes ((ULONG) currentEvents -> focusFunction,			fp); //Todo: Changed to pointer type. Check if this is correct.
    7af8:	movea.l 1c120 <currentEvents>,a0
    7afe:	move.l 20(a0),d0
    7b02:	move.l 4(sp),-(sp)
    7b06:	move.l d0,-(sp)
    7b08:	jsr 958 <put4bytes>
    7b0e:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    7b10:	movea.l 1c120 <currentEvents>,a0
    7b16:	move.l 24(a0),d0
    7b1a:	move.l 4(sp),-(sp)
    7b1e:	move.l d0,-(sp)
    7b20:	jsr 8d0 <put2bytes>
    7b26:	addq.l #8,sp
}
    7b28:	nop
    7b2a:	rts

00007b2c <sludgeDisplay>:

void sludgeDisplay () {					
    7b2c:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    7b2e:	move.l #14675968,(sp)
	displayCursor();
    7b34:	jsr c58 <displayCursor>
	CstRestoreScreen();
    7b3a:	jsr 2e38 <CstRestoreScreen>
	drawPeople();
    7b40:	jsr a8b8 <drawPeople>
	CstSwapBuffer();
    7b46:	jsr 3af6 <CstSwapBuffer>
}
    7b4c:	nop
    7b4e:	addq.l #4,sp
    7b50:	rts

00007b52 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    7b52:	      ,-- bra.s 7b72 <stackSetByIndex+0x20>
		vS = vS->next;
    7b54:	,-----|-> movea.l 4(sp),a0
    7b58:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    7b5e:	|     +-- bne.s 7b72 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    7b60:	|     |   pea 19f68 <PutChar+0x10da>
    7b66:	|     |   jsr 183ec <KPrintF>
    7b6c:	|     |   addq.l #4,sp
			return FALSE;
    7b6e:	|     |   clr.w d0
    7b70:	|  ,--|-- bra.s 7b94 <stackSetByIndex+0x42>
	while (theIndex--) {
    7b72:	|  |  '-> move.l 8(sp),d0
    7b76:	|  |      move.l d0,d1
    7b78:	|  |      subq.l #1,d1
    7b7a:	|  |      move.l d1,8(sp)
    7b7e:	|  |      tst.l d0
    7b80:	'--|----- bne.s 7b54 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    7b82:	   |      move.l 4(sp),d0
    7b86:	   |      move.l d0,-(sp)
    7b88:	   |      move.l 16(sp),-(sp)
    7b8c:	   |      jsr 15dc6 <copyVariable>
    7b92:	   |      addq.l #8,sp
}
    7b94:	   '----> rts

00007b96 <startNewFunctionLoaded>:

int startNewFunctionLoaded (struct loadedFunction * newFunc, unsigned int numParamsExpected,struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    7b96:	             subq.l #8,sp
    7b98:	             move.l 28(sp),d0
    7b9c:	             move.w d0,d0
    7b9e:	             move.w d0,2(sp)
	
	if (newFunc -> numArgs != (int)numParamsExpected) {
    7ba2:	             movea.l 12(sp),a0
    7ba6:	             move.l 16(a0),d1
    7baa:	             move.l 16(sp),d0
    7bae:	             cmp.l d1,d0
    7bb0:	         ,-- beq.s 7bc6 <startNewFunctionLoaded+0x30>
		KPrintF("Wrong number of parameters!");
    7bb2:	         |   pea 19f81 <PutChar+0x10f3>
    7bb8:	         |   jsr 183ec <KPrintF>
    7bbe:	         |   addq.l #4,sp
		return NULL; 
    7bc0:	         |   moveq #0,d0
    7bc2:	,--------|-- bra.w 7ca2 <startNewFunctionLoaded+0x10c>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    7bc6:	|        '-> movea.l 12(sp),a0
    7bca:	|            move.l 16(a0),d1
    7bce:	|            movea.l 12(sp),a0
    7bd2:	|            move.l 8(a0),d0
    7bd6:	|            cmp.l d1,d0
    7bd8:	|  ,-------- bge.s 7c42 <startNewFunctionLoaded+0xac>
		KPrintF ("More arguments than local variable space!");
    7bda:	|  |         pea 19f9d <PutChar+0x110f>
    7be0:	|  |         jsr 183ec <KPrintF>
    7be6:	|  |         addq.l #4,sp
		return NULL; 
    7be8:	|  |         moveq #0,d0
    7bea:	+--|-------- bra.w 7ca2 <startNewFunctionLoaded+0x10c>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    7bee:	|  |  ,----> movea.l 24(sp),a0
    7bf2:	|  |  |      move.l (a0),4(sp)
		numParamsExpected --;
    7bf6:	|  |  |      subq.l #1,16(sp)
		if (*vStack == NULL) {
    7bfa:	|  |  |      movea.l 24(sp),a0
    7bfe:	|  |  |      move.l (a0),d0
    7c00:	|  |  |  ,-- bne.s 7c16 <startNewFunctionLoaded+0x80>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    7c02:	|  |  |  |   pea 19fc7 <PutChar+0x1139>
    7c08:	|  |  |  |   jsr 183ec <KPrintF>
    7c0e:	|  |  |  |   addq.l #4,sp
			return NULL;
    7c10:	|  |  |  |   moveq #0,d0
    7c12:	+--|--|--|-- bra.w 7ca2 <startNewFunctionLoaded+0x10c>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    7c16:	|  |  |  '-> movea.l 12(sp),a0
    7c1a:	|  |  |      move.l 20(a0),d1
    7c1e:	|  |  |      move.l 16(sp),d0
    7c22:	|  |  |      lsl.l #3,d0
    7c24:	|  |  |      add.l d0,d1
    7c26:	|  |  |      move.l 4(sp),d0
    7c2a:	|  |  |      move.l d1,-(sp)
    7c2c:	|  |  |      move.l d0,-(sp)
    7c2e:	|  |  |      jsr 15dc6 <copyVariable>
    7c34:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    7c36:	|  |  |      move.l 24(sp),-(sp)
    7c3a:	|  |  |      jsr 16290 <trimStack>
    7c40:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    7c42:	|  '--|----> tst.l 16(sp)
    7c46:	|     '----- bne.s 7bee <startNewFunctionLoaded+0x58>
	}

	newFunc -> cancelMe = FALSE;
    7c48:	|            movea.l 12(sp),a0
    7c4c:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    7c50:	|            movea.l 12(sp),a0
    7c54:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    7c58:	|            movea.l 12(sp),a0
    7c5c:	|            move.w 2(sp),48(a0)
	newFunc -> calledBy = calledBy;
    7c62:	|            movea.l 12(sp),a0
    7c66:	|            move.l 20(sp),40(a0)
	newFunc -> stack = NULL;
    7c6c:	|            movea.l 12(sp),a0
    7c70:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    7c74:	|            movea.l 12(sp),a0
    7c78:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    7c7c:	|            movea.l 12(sp),a0
    7c80:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    7c84:	|            movea.l 12(sp),a0
    7c88:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    7c8c:	|            movea.l 12(sp),a0
    7c90:	|            clr.l 28(a0)

	restartFunction (newFunc);
    7c94:	|            move.l 12(sp),-(sp)
    7c98:	|            jsr 792a <restartFunction>
    7c9e:	|            addq.l #4,sp
	return 1;
    7ca0:	|            moveq #1,d0
}
    7ca2:	'----------> addq.l #8,sp
    7ca4:	             rts

00007ca6 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    7ca6:	lea -12(sp),sp
    7caa:	move.l 32(sp),d0
    7cae:	move.w d0,d0
    7cb0:	move.w d0,2(sp)
	
	volatile struct Custom *custom = (struct Custom*)0xdff000;
    7cb4:	move.l #14675968,8(sp)
	//custom->color[0] = 0x00f;	

	struct loadedFunction *newFunc = loadFunctionCode (funcNum);	
    7cbc:	move.l 16(sp),-(sp)
    7cc0:	jsr 6fea <loadFunctionCode>
    7cc6:	addq.l #4,sp
    7cc8:	move.l d0,4(sp)
	//custom->color[0] = 0x000;	
	return startNewFunctionLoaded (newFunc, numParamsExpected, calledBy, vStack, returnSommet);
    7ccc:	movea.w 2(sp),a0
    7cd0:	move.l a0,-(sp)
    7cd2:	move.l 32(sp),-(sp)
    7cd6:	move.l 32(sp),-(sp)
    7cda:	move.l 32(sp),-(sp)
    7cde:	move.l 20(sp),-(sp)
    7ce2:	jsr 7b96 <startNewFunctionLoaded>
    7ce8:	lea 20(sp),sp
}
    7cec:	lea 12(sp),sp
    7cf0:	rts

00007cf2 <unloadFunction>:

void unloadFunction (struct loadedFunction * fun) {
    7cf2:	             subq.l #8,sp
    7cf4:	             move.l a6,-(sp)

	int a;

	//Keep function loaed in memory
	if( fun == currentEvents -> focusFunction) {	
    7cf6:	             movea.l 1c120 <currentEvents>,a0
    7cfc:	             move.l 20(a0),d0
    7d00:	             cmp.l 16(sp),d0
    7d04:	,----------- beq.w 7d94 <unloadFunction+0xa2>
		return;
	}

	if (fun -> stack) 
    7d08:	|            movea.l 16(sp),a0
    7d0c:	|            move.l 24(a0),d0
    7d10:	|        ,-- beq.s 7d22 <unloadFunction+0x30>
	{
		KPrintF("unloadfunction: error non empty stack");
    7d12:	|        |   pea 1a012 <PutChar+0x1184>
    7d18:	|        |   jsr 183ec <KPrintF>
    7d1e:	|        |   addq.l #4,sp
		return;
    7d20:	|  ,-----|-- bra.s 7d96 <unloadFunction+0xa4>
	}
	
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    7d22:	|  |     '-> clr.l 8(sp)
    7d26:	|  |     ,-- bra.s 7d46 <unloadFunction+0x54>
    7d28:	|  |  ,--|-> movea.l 16(sp),a0
    7d2c:	|  |  |  |   move.l 20(a0),d1
    7d30:	|  |  |  |   move.l 8(sp),d0
    7d34:	|  |  |  |   lsl.l #3,d0
    7d36:	|  |  |  |   add.l d1,d0
    7d38:	|  |  |  |   move.l d0,-(sp)
    7d3a:	|  |  |  |   jsr 15b5a <unlinkVar>
    7d40:	|  |  |  |   addq.l #4,sp
    7d42:	|  |  |  |   addq.l #1,8(sp)
    7d46:	|  |  |  '-> movea.l 16(sp),a0
    7d4a:	|  |  |      move.l 8(a0),d0
    7d4e:	|  |  |      cmp.l 8(sp),d0
    7d52:	|  |  '----- bgt.s 7d28 <unloadFunction+0x36>
	if( fun->numLocals > 0) {
    7d54:	|  |         movea.l 16(sp),a0
    7d58:	|  |         move.l 8(a0),d0
    7d5c:	|  |     ,-- ble.s 7d78 <unloadFunction+0x86>
		FreeVec(fun -> localVars);
    7d5e:	|  |     |   movea.l 16(sp),a0
    7d62:	|  |     |   move.l 20(a0),4(sp)
    7d68:	|  |     |   move.l 1c7ba <SysBase>,d0
    7d6e:	|  |     |   movea.l d0,a6
    7d70:	|  |     |   movea.l 4(sp),a1
    7d74:	|  |     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    7d78:	|  |     '-> moveq #28,d0
    7d7a:	|  |         add.l 16(sp),d0
    7d7e:	|  |         move.l d0,-(sp)
    7d80:	|  |         jsr 15b5a <unlinkVar>
    7d86:	|  |         addq.l #4,sp
	fun->unloaded = 1;
    7d88:	|  |         movea.l 16(sp),a0
    7d8c:	|  |         moveq #1,d0
    7d8e:	|  |         move.l d0,58(a0)
    7d92:	|  +-------- bra.s 7d96 <unloadFunction+0xa4>
		return;
    7d94:	'--|-------> nop

}
    7d96:	   '-------> movea.l (sp)+,a6
    7d98:	             addq.l #8,sp
    7d9a:	             rts

00007d9c <unfreezeSubs>:

void unfreezeSubs () {
    7d9c:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    7d9e:	          move.l 1c752 <allRunningFunctions>,(sp)

	while (thisFunction) {
    7da4:	   ,----- bra.s 7dc2 <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    7da6:	,--|----> movea.l (sp),a0
    7da8:	|  |      move.b 56(a0),d0
    7dac:	|  |  ,-- beq.s 7dbc <unfreezeSubs+0x20>
    7dae:	|  |  |   movea.l (sp),a0
    7db0:	|  |  |   move.b 56(a0),d0
    7db4:	|  |  |   subq.b #1,d0
    7db6:	|  |  |   movea.l (sp),a0
    7db8:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    7dbc:	|  |  '-> movea.l (sp),a0
    7dbe:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    7dc2:	|  '----> tst.l (sp)
    7dc4:	'-------- bne.s 7da6 <unfreezeSubs+0xa>
	}
}
    7dc6:	          nop
    7dc8:	          nop
    7dca:	          addq.l #4,sp
    7dcc:	          rts

00007dce <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    7dce:	clr.w 1c12c <sliceBusy>
}
    7dd4:	nop
    7dd6:	rts

00007dd8 <getNumberedString>:

char * getNumberedString (int value) {
    7dd8:	       lea -56(sp),sp
    7ddc:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    7de0:	       move.w 1c12c <sliceBusy>,d0
    7de6:	   ,-- beq.s 7e30 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    7de8:	   |   move.l 1c7c2 <DOSBase>,d0
    7dee:	   |   movea.l d0,a6
    7df0:	   |   jsr -60(a6)
    7df4:	   |   move.l d0,28(sp)
    7df8:	   |   move.l 28(sp),d0
    7dfc:	   |   move.l d0,24(sp)
    7e00:	   |   move.l #106552,20(sp)
    7e08:	   |   moveq #76,d0
    7e0a:	   |   move.l d0,16(sp)
    7e0e:	   |   move.l 1c7c2 <DOSBase>,d0
    7e14:	   |   movea.l d0,a6
    7e16:	   |   move.l 24(sp),d1
    7e1a:	   |   move.l 20(sp),d2
    7e1e:	   |   move.l 16(sp),d3
    7e22:	   |   jsr -48(a6)
    7e26:	   |   move.l d0,12(sp)
		return NULL;
    7e2a:	   |   moveq #0,d0
    7e2c:	,--|-- bra.w 7ecc <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    7e30:	|  '-> move.l 1c7a2 <bigDataFile>,64(sp)
    7e38:	|      move.l 72(sp),d0
    7e3c:	|      add.l d0,d0
    7e3e:	|      add.l d0,d0
    7e40:	|      move.l d0,d1
    7e42:	|      move.l 1c7ae <startOfTextIndex>,d0
    7e48:	|      add.l d1,d0
    7e4a:	|      move.l d0,60(sp)
    7e4e:	|      moveq #-1,d0
    7e50:	|      move.l d0,56(sp)
    7e54:	|      move.l 1c7c2 <DOSBase>,d0
    7e5a:	|      movea.l d0,a6
    7e5c:	|      move.l 64(sp),d1
    7e60:	|      move.l 60(sp),d2
    7e64:	|      move.l 56(sp),d3
    7e68:	|      jsr -66(a6)
    7e6c:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    7e70:	|      move.l 1c7a2 <bigDataFile>,d0
    7e76:	|      move.l d0,-(sp)
    7e78:	|      jsr 718 <get4bytes>
    7e7e:	|      addq.l #4,sp
    7e80:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    7e84:	|      move.l 1c7a2 <bigDataFile>,48(sp)
    7e8c:	|      move.l 72(sp),44(sp)
    7e92:	|      moveq #-1,d0
    7e94:	|      move.l d0,40(sp)
    7e98:	|      move.l 1c7c2 <DOSBase>,d0
    7e9e:	|      movea.l d0,a6
    7ea0:	|      move.l 48(sp),d1
    7ea4:	|      move.l 44(sp),d2
    7ea8:	|      move.l 40(sp),d3
    7eac:	|      jsr -66(a6)
    7eb0:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    7eb4:	|      move.l 1c7a2 <bigDataFile>,d0
    7eba:	|      move.l d0,-(sp)
    7ebc:	|      jsr b02 <readString>
    7ec2:	|      addq.l #4,sp
    7ec4:	|      move.l d0,32(sp)
	
	return s;
    7ec8:	|      move.l 32(sp),d0
}
    7ecc:	'----> movem.l (sp)+,d2-d3/a6
    7ed0:	       lea 56(sp),sp
    7ed4:	       rts

00007ed6 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    7ed6:	       lea -32(sp),sp
    7eda:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    7ede:	       move.w 1c12c <sliceBusy>,d0
    7ee4:	   ,-- beq.s 7f00 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    7ee6:	   |   pea 1a085 <PutChar+0x11f7>
    7eec:	   |   pea 1a0a3 <PutChar+0x1215>
    7ef2:	   |   jsr 183ec <KPrintF>
    7ef8:	   |   addq.l #8,sp
		return 0;
    7efa:	   |   moveq #0,d0
    7efc:	,--|-- bra.w 7f94 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    7f00:	|  '-> move.l 1c7a2 <bigDataFile>,40(sp)
    7f08:	|      move.l 48(sp),d0
    7f0c:	|      add.l d0,d0
    7f0e:	|      add.l d0,d0
    7f10:	|      move.l d0,d1
    7f12:	|      move.l 1c7aa <startOfDataIndex>,d0
    7f18:	|      add.l d1,d0
    7f1a:	|      move.l d0,36(sp)
    7f1e:	|      moveq #-1,d0
    7f20:	|      move.l d0,32(sp)
    7f24:	|      move.l 1c7c2 <DOSBase>,d0
    7f2a:	|      movea.l d0,a6
    7f2c:	|      move.l 40(sp),d1
    7f30:	|      move.l 36(sp),d2
    7f34:	|      move.l 32(sp),d3
    7f38:	|      jsr -66(a6)
    7f3c:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    7f40:	|      move.l 1c7a2 <bigDataFile>,24(sp)
    7f48:	|      move.l 1c7a2 <bigDataFile>,d0
    7f4e:	|      move.l d0,-(sp)
    7f50:	|      jsr 718 <get4bytes>
    7f56:	|      addq.l #4,sp
    7f58:	|      move.l d0,20(sp)
    7f5c:	|      clr.l 16(sp)
    7f60:	|      move.l 1c7c2 <DOSBase>,d0
    7f66:	|      movea.l d0,a6
    7f68:	|      move.l 24(sp),d1
    7f6c:	|      move.l 20(sp),d2
    7f70:	|      move.l 16(sp),d3
    7f74:	|      jsr -66(a6)
    7f78:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    7f7c:	|      move.w #1,1c12c <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    7f84:	|      move.l 1c7a2 <bigDataFile>,d0
    7f8a:	|      move.l d0,-(sp)
    7f8c:	|      jsr 718 <get4bytes>
    7f92:	|      addq.l #4,sp
}
    7f94:	'----> movem.l (sp)+,d2-d3/a6
    7f98:	       lea 32(sp),sp
    7f9c:	       rts

00007f9e <openObjectSlice>:

BOOL openObjectSlice (int num) {
    7f9e:	       lea -32(sp),sp
    7fa2:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    7fa6:	       move.w 1c12c <sliceBusy>,d0
    7fac:	   ,-- beq.s 7fc8 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    7fae:	   |   pea 1a085 <PutChar+0x11f7>
    7fb4:	   |   pea 1a0a3 <PutChar+0x1215>
    7fba:	   |   jsr 183ec <KPrintF>
    7fc0:	   |   addq.l #8,sp
        return FALSE;
    7fc2:	   |   clr.w d0
    7fc4:	,--|-- bra.w 8054 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    7fc8:	|  '-> move.l 1c7a2 <bigDataFile>,40(sp)
    7fd0:	|      move.l 48(sp),d0
    7fd4:	|      add.l d0,d0
    7fd6:	|      add.l d0,d0
    7fd8:	|      move.l d0,d1
    7fda:	|      move.l 1c7b6 <startOfObjectIndex>,d0
    7fe0:	|      add.l d1,d0
    7fe2:	|      move.l d0,36(sp)
    7fe6:	|      moveq #-1,d0
    7fe8:	|      move.l d0,32(sp)
    7fec:	|      move.l 1c7c2 <DOSBase>,d0
    7ff2:	|      movea.l d0,a6
    7ff4:	|      move.l 40(sp),d1
    7ff8:	|      move.l 36(sp),d2
    7ffc:	|      move.l 32(sp),d3
    8000:	|      jsr -66(a6)
    8004:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    8008:	|      move.l 1c7a2 <bigDataFile>,24(sp)
    8010:	|      move.l 1c7a2 <bigDataFile>,d0
    8016:	|      move.l d0,-(sp)
    8018:	|      jsr 718 <get4bytes>
    801e:	|      addq.l #4,sp
    8020:	|      move.l d0,20(sp)
    8024:	|      moveq #-1,d0
    8026:	|      move.l d0,16(sp)
    802a:	|      move.l 1c7c2 <DOSBase>,d0
    8030:	|      movea.l d0,a6
    8032:	|      move.l 24(sp),d1
    8036:	|      move.l 20(sp),d2
    803a:	|      move.l 16(sp),d3
    803e:	|      jsr -66(a6)
    8042:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    8046:	|      move.w #1,1c12c <sliceBusy>
    804e:	|      move.w 1c12c <sliceBusy>,d0
}
    8054:	'----> movem.l (sp)+,d2-d3/a6
    8058:	       lea 32(sp),sp
    805c:	       rts

0000805e <openSubSlice>:

BOOL openSubSlice (int num) {
    805e:	       lea -32(sp),sp
    8062:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    8066:	       move.w 1c12c <sliceBusy>,d0
    806c:	   ,-- beq.s 8088 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    806e:	   |   pea 1a085 <PutChar+0x11f7>
    8074:	   |   pea 1a0a3 <PutChar+0x1215>
    807a:	   |   jsr 183ec <KPrintF>
    8080:	   |   addq.l #8,sp
		return FALSE;
    8082:	   |   clr.w d0
    8084:	,--|-- bra.w 8114 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    8088:	|  '-> move.l 1c7a2 <bigDataFile>,40(sp)
    8090:	|      move.l 48(sp),d0
    8094:	|      add.l d0,d0
    8096:	|      add.l d0,d0
    8098:	|      move.l d0,d1
    809a:	|      move.l 1c7b2 <startOfSubIndex>,d0
    80a0:	|      add.l d1,d0
    80a2:	|      move.l d0,36(sp)
    80a6:	|      moveq #-1,d0
    80a8:	|      move.l d0,32(sp)
    80ac:	|      move.l 1c7c2 <DOSBase>,d0
    80b2:	|      movea.l d0,a6
    80b4:	|      move.l 40(sp),d1
    80b8:	|      move.l 36(sp),d2
    80bc:	|      move.l 32(sp),d3
    80c0:	|      jsr -66(a6)
    80c4:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    80c8:	|      move.l 1c7a2 <bigDataFile>,24(sp)
    80d0:	|      move.l 1c7a2 <bigDataFile>,d0
    80d6:	|      move.l d0,-(sp)
    80d8:	|      jsr 718 <get4bytes>
    80de:	|      addq.l #4,sp
    80e0:	|      move.l d0,20(sp)
    80e4:	|      moveq #-1,d0
    80e6:	|      move.l d0,16(sp)
    80ea:	|      move.l 1c7c2 <DOSBase>,d0
    80f0:	|      movea.l d0,a6
    80f2:	|      move.l 24(sp),d1
    80f6:	|      move.l 20(sp),d2
    80fa:	|      move.l 16(sp),d3
    80fe:	|      jsr -66(a6)
    8102:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    8106:	|      move.w #1,1c12c <sliceBusy>
    810e:	|      move.w 1c12c <sliceBusy>,d0
}
    8114:	'----> movem.l (sp)+,d2-d3/a6
    8118:	       lea 32(sp),sp
    811c:	       rts

0000811e <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    811e:	       lea -180(sp),sp
    8122:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    8126:	       tst.l 196(sp)
    812a:	,----- beq.s 816a <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    812c:	|      move.l 196(sp),1c7a2 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    8134:	|      move.l 196(sp),168(sp)
    813a:	|      clr.l 164(sp)
    813e:	|      clr.l 160(sp)
    8142:	|      move.l 1c7c2 <DOSBase>,d0
    8148:	|      movea.l d0,a6
    814a:	|      move.l 168(sp),d1
    814e:	|      move.l 164(sp),d2
    8152:	|      move.l 160(sp),d3
    8156:	|      jsr -66(a6)
    815a:	|      move.l d0,156(sp)
    815e:	|      move.l 156(sp),d0
    8162:	|      move.l d0,1c7a6 <startIndex>
    8168:	|  ,-- bra.s 81a4 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    816a:	'--|-> move.l 1c7a2 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    8172:	   |   move.l 196(sp),184(sp)
    8178:	   |   move.l 1c7a6 <startIndex>,d0
    817e:	   |   move.l d0,180(sp)
    8182:	   |   moveq #-1,d0
    8184:	   |   move.l d0,176(sp)
    8188:	   |   move.l 1c7c2 <DOSBase>,d0
    818e:	   |   movea.l d0,a6
    8190:	   |   move.l 184(sp),d1
    8194:	   |   move.l 180(sp),d2
    8198:	   |   move.l 176(sp),d3
    819c:	   |   jsr -66(a6)
    81a0:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    81a4:	   '-> clr.w 1c12c <sliceBusy>

	if (skipBefore > numLanguages) {
    81aa:	       move.l 204(sp),d0
    81ae:	       cmp.l 200(sp),d0
    81b2:	   ,-- bls.s 81c6 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    81b4:	   |   pea 1a0bd <PutChar+0x122f>
    81ba:	   |   jsr 183ec <KPrintF>
    81c0:	   |   addq.l #4,sp
		skipBefore = 0;
    81c2:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    81c6:	   '-> move.l 200(sp),d0
    81ca:	       sub.l 204(sp),d0
    81ce:	       move.l d0,188(sp)
	while (skipBefore) {
    81d2:	   ,-- bra.s 8210 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    81d4:	,--|-> move.l 196(sp),24(sp)
    81da:	|  |   move.l 196(sp),-(sp)
    81de:	|  |   jsr 718 <get4bytes>
    81e4:	|  |   addq.l #4,sp
    81e6:	|  |   move.l d0,20(sp)
    81ea:	|  |   moveq #-1,d0
    81ec:	|  |   move.l d0,16(sp)
    81f0:	|  |   move.l 1c7c2 <DOSBase>,d0
    81f6:	|  |   movea.l d0,a6
    81f8:	|  |   move.l 24(sp),d1
    81fc:	|  |   move.l 20(sp),d2
    8200:	|  |   move.l 16(sp),d3
    8204:	|  |   jsr -66(a6)
    8208:	|  |   move.l d0,12(sp)
		skipBefore --;
    820c:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    8210:	|  '-> tst.l 204(sp)
    8214:	'----- bne.s 81d4 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    8216:	       move.l 196(sp),152(sp)
    821c:	       clr.l 148(sp)
    8220:	       clr.l 144(sp)
    8224:	       move.l 1c7c2 <DOSBase>,d0
    822a:	       movea.l d0,a6
    822c:	       move.l 152(sp),d1
    8230:	       move.l 148(sp),d2
    8234:	       move.l 144(sp),d3
    8238:	       jsr -66(a6)
    823c:	       move.l d0,140(sp)
    8240:	       move.l 140(sp),d0
    8244:	       addq.l #4,d0
    8246:	       move.l d0,1c7ae <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    824c:	       move.l 196(sp),136(sp)
    8252:	       move.l 196(sp),-(sp)
    8256:	       jsr 718 <get4bytes>
    825c:	       addq.l #4,sp
    825e:	       move.l d0,132(sp)
    8262:	       moveq #-1,d0
    8264:	       move.l d0,128(sp)
    8268:	       move.l 1c7c2 <DOSBase>,d0
    826e:	       movea.l d0,a6
    8270:	       move.l 136(sp),d1
    8274:	       move.l 132(sp),d2
    8278:	       move.l 128(sp),d3
    827c:	       jsr -66(a6)
    8280:	       move.l d0,124(sp)

	while (skipAfter) {
    8284:	   ,-- bra.s 82c2 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    8286:	,--|-> move.l 196(sp),40(sp)
    828c:	|  |   move.l 196(sp),-(sp)
    8290:	|  |   jsr 718 <get4bytes>
    8296:	|  |   addq.l #4,sp
    8298:	|  |   move.l d0,36(sp)
    829c:	|  |   moveq #-1,d0
    829e:	|  |   move.l d0,32(sp)
    82a2:	|  |   move.l 1c7c2 <DOSBase>,d0
    82a8:	|  |   movea.l d0,a6
    82aa:	|  |   move.l 40(sp),d1
    82ae:	|  |   move.l 36(sp),d2
    82b2:	|  |   move.l 32(sp),d3
    82b6:	|  |   jsr -66(a6)
    82ba:	|  |   move.l d0,28(sp)
		skipAfter --;
    82be:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    82c2:	|  '-> tst.l 188(sp)
    82c6:	'----- bne.s 8286 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    82c8:	       move.l 196(sp),120(sp)
    82ce:	       clr.l 116(sp)
    82d2:	       clr.l 112(sp)
    82d6:	       move.l 1c7c2 <DOSBase>,d0
    82dc:	       movea.l d0,a6
    82de:	       move.l 120(sp),d1
    82e2:	       move.l 116(sp),d2
    82e6:	       move.l 112(sp),d3
    82ea:	       jsr -66(a6)
    82ee:	       move.l d0,108(sp)
    82f2:	       move.l 108(sp),d0
    82f6:	       addq.l #4,d0
    82f8:	       move.l d0,1c7b2 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    82fe:	       move.l 196(sp),104(sp)
    8304:	       move.l 196(sp),-(sp)
    8308:	       jsr 718 <get4bytes>
    830e:	       addq.l #4,sp
    8310:	       move.l d0,100(sp)
    8314:	       clr.l 96(sp)
    8318:	       move.l 1c7c2 <DOSBase>,d0
    831e:	       movea.l d0,a6
    8320:	       move.l 104(sp),d1
    8324:	       move.l 100(sp),d2
    8328:	       move.l 96(sp),d3
    832c:	       jsr -66(a6)
    8330:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    8334:	       move.l 196(sp),88(sp)
    833a:	       clr.l 84(sp)
    833e:	       clr.l 80(sp)
    8342:	       move.l 1c7c2 <DOSBase>,d0
    8348:	       movea.l d0,a6
    834a:	       move.l 88(sp),d1
    834e:	       move.l 84(sp),d2
    8352:	       move.l 80(sp),d3
    8356:	       jsr -66(a6)
    835a:	       move.l d0,76(sp)
    835e:	       move.l 76(sp),d0
    8362:	       addq.l #4,d0
    8364:	       move.l d0,1c7b6 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    836a:	       move.l 196(sp),72(sp)
    8370:	       move.l 196(sp),-(sp)
    8374:	       jsr 718 <get4bytes>
    837a:	       addq.l #4,sp
    837c:	       move.l d0,68(sp)
    8380:	       clr.l 64(sp)
    8384:	       move.l 1c7c2 <DOSBase>,d0
    838a:	       movea.l d0,a6
    838c:	       move.l 72(sp),d1
    8390:	       move.l 68(sp),d2
    8394:	       move.l 64(sp),d3
    8398:	       jsr -66(a6)
    839c:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    83a0:	       move.l 196(sp),56(sp)
    83a6:	       clr.l 52(sp)
    83aa:	       clr.l 48(sp)
    83ae:	       move.l 1c7c2 <DOSBase>,d0
    83b4:	       movea.l d0,a6
    83b6:	       move.l 56(sp),d1
    83ba:	       move.l 52(sp),d2
    83be:	       move.l 48(sp),d3
    83c2:	       jsr -66(a6)
    83c6:	       move.l d0,44(sp)
    83ca:	       move.l 44(sp),d0
    83ce:	       move.l d0,1c7aa <startOfDataIndex>
    83d4:	       nop
    83d6:	       movem.l (sp)+,d2-d3/a6
    83da:	       lea 180(sp),sp
    83de:	       rts

000083e0 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    83e0:	    lea -20(sp),sp
    83e4:	    move.l a6,-(sp)
    83e6:	    move.l d7,-(sp)
	APTR vbr = 0;
    83e8:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    83ec:	    move.w #20090,10(sp)
    83f2:	    move.w #2049,12(sp)
    83f8:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    83fe:	    movea.l 1c7ba <SysBase>,a0
    8404:	    move.w 296(a0),d0
    8408:	    move.w d0,d0
    840a:	    andi.l #65535,d0
    8410:	    moveq #1,d1
    8412:	    and.l d1,d0
    8414:	,-- beq.s 8442 <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    8416:	|   lea 28(sp),a0
    841a:	|   lea -18(a0),a0
    841e:	|   move.l a0,20(sp)
    8422:	|   move.l 1c7ba <SysBase>,d0
    8428:	|   movea.l d0,a6
    842a:	|   move.l 20(sp),d7
    842e:	|   exg d7,a5
    8430:	|   jsr -30(a6)
    8434:	|   exg d7,a5
    8436:	|   move.l d0,16(sp)
    843a:	|   move.l 16(sp),d0
    843e:	|   move.l d0,24(sp)

	return vbr;
    8442:	'-> move.l 24(sp),d0
}
    8446:	    move.l (sp)+,d7
    8448:	    movea.l (sp)+,a6
    844a:	    lea 20(sp),sp
    844e:	    rts

00008450 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    8450:	movea.l 1c7e0 <VBR>,a0
    8456:	lea 108(a0),a0
    845a:	move.l 4(sp),(a0)
}
    845e:	nop
    8460:	rts

00008462 <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    8462:	movea.l 1c7e0 <VBR>,a0
    8468:	move.l 108(a0),d0
}
    846c:	rts

0000846e <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    846e:	       subq.l #8,sp
    8470:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    8472:	       pea 1a106 <PutChar+0x1278>
    8478:	       jsr 183ec <KPrintF>
    847e:	       addq.l #4,sp
	Forbid();
    8480:	       move.l 1c7ba <SysBase>,d0
    8486:	       movea.l d0,a6
    8488:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    848c:	       pea 1a11e <PutChar+0x1290>
    8492:	       jsr 183ec <KPrintF>
    8498:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    849a:	       movea.l 1c7be <custom>,a0
    84a0:	       move.w 16(a0),d0
    84a4:	       move.w d0,1c7de <SystemADKCON>
	SystemInts=custom->intenar;
    84aa:	       movea.l 1c7be <custom>,a0
    84b0:	       move.w 28(a0),d0
    84b4:	       move.w d0,1c7da <SystemInts>
	SystemDMA=custom->dmaconr;
    84ba:	       movea.l 1c7be <custom>,a0
    84c0:	       move.w 2(a0),d0
    84c4:	       move.w d0,1c7dc <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    84ca:	       movea.l 1c7c6 <GfxBase>,a0
    84d0:	       move.l 34(a0),d0
    84d4:	       move.l d0,1c7e8 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    84da:	       pea 1a13c <PutChar+0x12ae>
    84e0:	       jsr 183ec <KPrintF>
    84e6:	       addq.l #4,sp
	LoadView(0);
    84e8:	       clr.l 4(sp)
    84ec:	       move.l 1c7c6 <GfxBase>,d0
    84f2:	       movea.l d0,a6
    84f4:	       movea.l 4(sp),a1
    84f8:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    84fc:	       pea 1a152 <PutChar+0x12c4>
    8502:	       jsr 183ec <KPrintF>
    8508:	       addq.l #4,sp
	WaitTOF();
    850a:	       move.l 1c7c6 <GfxBase>,d0
    8510:	       movea.l d0,a6
    8512:	       jsr -270(a6)
	WaitTOF();
    8516:	       move.l 1c7c6 <GfxBase>,d0
    851c:	       movea.l d0,a6
    851e:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    8522:	       pea 1a167 <PutChar+0x12d9>
    8528:	       jsr 183ec <KPrintF>
    852e:	       addq.l #4,sp
	WaitVbl();
    8530:	       jsr 18320 <WaitVbl>
	WaitVbl();
    8536:	       jsr 18320 <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    853c:	       pea 1a17c <PutChar+0x12ee>
    8542:	       jsr 183ec <KPrintF>
    8548:	       addq.l #4,sp
	OwnBlitter();
    854a:	       move.l 1c7c6 <GfxBase>,d0
    8550:	       movea.l d0,a6
    8552:	       jsr -456(a6)
	WaitBlit();	
    8556:	       move.l 1c7c6 <GfxBase>,d0
    855c:	       movea.l d0,a6
    855e:	       jsr -228(a6)
	Disable();
    8562:	       move.l 1c7ba <SysBase>,d0
    8568:	       movea.l d0,a6
    856a:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    856e:	       pea 1a19d <PutChar+0x130f>
    8574:	       jsr 183ec <KPrintF>
    857a:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    857c:	       movea.l 1c7be <custom>,a0
    8582:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    8588:	       pea 1a1b4 <PutChar+0x1326>
    858e:	       jsr 183ec <KPrintF>
    8594:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    8596:	       clr.l 8(sp)
    859a:	   ,-- bra.s 85b8 <TakeSystem+0x14a>
		custom->color[a]=0;
    859c:	,--|-> movea.l 1c7be <custom>,a0
    85a2:	|  |   move.l 8(sp),d0
    85a6:	|  |   addi.l #192,d0
    85ac:	|  |   add.l d0,d0
    85ae:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    85b4:	|  |   addq.l #1,8(sp)
    85b8:	|  '-> moveq #31,d0
    85ba:	|      cmp.l 8(sp),d0
    85be:	'----- bge.s 859c <TakeSystem+0x12e>

	WaitVbl();
    85c0:	       jsr 18320 <WaitVbl>
	WaitVbl();
    85c6:	       jsr 18320 <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    85cc:	       pea 1a1d9 <PutChar+0x134b>
    85d2:	       jsr 183ec <KPrintF>
    85d8:	       addq.l #4,sp
	VBR=GetVBR();
    85da:	       jsr 83e0 <GetVBR>
    85e0:	       move.l d0,1c7e0 <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    85e6:	       jsr 8462 <GetInterruptHandler>
    85ec:	       move.l d0,1c7e4 <SystemIrq>
}
    85f2:	       nop
    85f4:	       movea.l (sp)+,a6
    85f6:	       addq.l #8,sp
    85f8:	       rts

000085fa <FreeSystem>:

void FreeSystem() { 
    85fa:	subq.l #4,sp
    85fc:	move.l a6,-(sp)
	WaitVbl();
    85fe:	jsr 18320 <WaitVbl>
	WaitBlit();
    8604:	move.l 1c7c6 <GfxBase>,d0
    860a:	movea.l d0,a6
    860c:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    8610:	movea.l 1c7be <custom>,a0
    8616:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    861c:	movea.l 1c7be <custom>,a0
    8622:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    8628:	movea.l 1c7be <custom>,a0
    862e:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    8634:	move.l 1c7e4 <SystemIrq>,d0
    863a:	move.l d0,-(sp)
    863c:	jsr 8450 <SetInterruptHandler>
    8642:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    8644:	movea.l 1c7c6 <GfxBase>,a0
    864a:	move.l 38(a0),d0
    864e:	movea.l 1c7be <custom>,a0
    8654:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    8658:	movea.l 1c7c6 <GfxBase>,a0
    865e:	move.l 50(a0),d0
    8662:	movea.l 1c7be <custom>,a0
    8668:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    866c:	movea.l 1c7be <custom>,a0
    8672:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    8678:	move.w 1c7dc <SystemDMA>,d0
    867e:	movea.l 1c7be <custom>,a0
    8684:	ori.w #-32768,d0
    8688:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    868c:	move.w 1c7de <SystemADKCON>,d0
    8692:	movea.l 1c7be <custom>,a0
    8698:	ori.w #-32768,d0
    869c:	move.w d0,158(a0)

	WaitBlit();	
    86a0:	move.l 1c7c6 <GfxBase>,d0
    86a6:	movea.l d0,a6
    86a8:	jsr -228(a6)
	DisownBlitter();
    86ac:	move.l 1c7c6 <GfxBase>,d0
    86b2:	movea.l d0,a6
    86b4:	jsr -462(a6)
	Enable();
    86b8:	move.l 1c7ba <SysBase>,d0
    86be:	movea.l d0,a6
    86c0:	jsr -126(a6)

	LoadView(ActiView);
    86c4:	move.l 1c7e8 <ActiView>,4(sp)
    86cc:	move.l 1c7c6 <GfxBase>,d0
    86d2:	movea.l d0,a6
    86d4:	movea.l 4(sp),a1
    86d8:	jsr -222(a6)
	WaitTOF();
    86dc:	move.l 1c7c6 <GfxBase>,d0
    86e2:	movea.l d0,a6
    86e4:	jsr -270(a6)
	WaitTOF();
    86e8:	move.l 1c7c6 <GfxBase>,d0
    86ee:	movea.l d0,a6
    86f0:	jsr -270(a6)

	Permit();
    86f4:	move.l 1c7ba <SysBase>,d0
    86fa:	movea.l d0,a6
    86fc:	jsr -138(a6)
}
    8700:	nop
    8702:	movea.l (sp)+,a6
    8704:	addq.l #4,sp
    8706:	rts

00008708 <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    8708:	       lea -132(sp),sp
    870c:	       movem.l d2-d3/a6,-(sp)

	//int *bp = 0x200;
  	//*bp = 0;

	for(int i=0;i<1000;i++) {
    8710:	       clr.l 140(sp)
    8714:	   ,-- bra.s 871a <main+0x12>
    8716:	,--|-> addq.l #1,140(sp)
    871a:	|  '-> cmpi.l #999,140(sp)
    8722:	'----- ble.s 8716 <main+0xe>

	}

	SysBase = *((struct ExecBase**)4UL);
    8724:	       movea.w #4,a0
    8728:	       move.l (a0),d0
    872a:	       move.l d0,1c7ba <SysBase>
	custom = (struct Custom*)0xdff000;	
    8730:	       move.l #14675968,1c7be <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    873a:	       move.l #107005,136(sp)
    8742:	       clr.l 132(sp)
    8746:	       move.l 1c7ba <SysBase>,d0
    874c:	       movea.l d0,a6
    874e:	       movea.l 136(sp),a1
    8752:	       move.l 132(sp),d0
    8756:	       jsr -552(a6)
    875a:	       move.l d0,128(sp)
    875e:	       move.l 128(sp),d0
    8762:	       move.l d0,1c7c6 <GfxBase>
	if (!GfxBase)
    8768:	       move.l 1c7c6 <GfxBase>,d0
    876e:	   ,-- bne.s 8784 <main+0x7c>
		Exit(0);
    8770:	   |   clr.l 124(sp)
    8774:	   |   move.l 1c7c2 <DOSBase>,d0
    877a:	   |   movea.l d0,a6
    877c:	   |   move.l 124(sp),d1
    8780:	   |   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    8784:	   '-> move.l #107022,120(sp)
    878c:	       clr.l 116(sp)
    8790:	       move.l 1c7ba <SysBase>,d0
    8796:	       movea.l d0,a6
    8798:	       movea.l 120(sp),a1
    879c:	       move.l 116(sp),d0
    87a0:	       jsr -552(a6)
    87a4:	       move.l d0,112(sp)
    87a8:	       move.l 112(sp),d0
    87ac:	       move.l d0,1c7c2 <DOSBase>
	if (!DOSBase)
    87b2:	       move.l 1c7c2 <DOSBase>,d0
    87b8:	   ,-- bne.s 87ce <main+0xc6>
		Exit(0);
    87ba:	   |   clr.l 108(sp)
    87be:	   |   move.l 1c7c2 <DOSBase>,d0
    87c4:	   |   movea.l d0,a6
    87c6:	   |   move.l 108(sp),d1
    87ca:	   |   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    87ce:	   '-> move.l #107034,104(sp)
    87d6:	       clr.l 100(sp)
    87da:	       move.l 1c7ba <SysBase>,d0
    87e0:	       movea.l d0,a6
    87e2:	       movea.l 104(sp),a1
    87e6:	       move.l 100(sp),d0
    87ea:	       jsr -552(a6)
    87ee:	       move.l d0,96(sp)
    87f2:	       move.l 96(sp),d0
    87f6:	       move.l d0,1c7ca <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    87fc:	       move.l 1c7ca <MathIeeeSingBasBase>,d0
    8802:	   ,-- bne.s 8818 <main+0x110>
		Exit(0);	
    8804:	   |   clr.l 92(sp)
    8808:	   |   move.l 1c7c2 <DOSBase>,d0
    880e:	   |   movea.l d0,a6
    8810:	   |   move.l 92(sp),d1
    8814:	   |   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    8818:	   '-> move.l #107058,88(sp)
    8820:	       clr.l 84(sp)
    8824:	       move.l 1c7ba <SysBase>,d0
    882a:	       movea.l d0,a6
    882c:	       movea.l 88(sp),a1
    8830:	       move.l 84(sp),d0
    8834:	       jsr -552(a6)
    8838:	       move.l d0,80(sp)
    883c:	       move.l 80(sp),d0
    8840:	       move.l d0,1c7ce <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    8846:	       move.l 1c7ce <MathIeeeSingTransBase>,d0
    884c:	   ,-- bne.s 8862 <main+0x15a>
		Exit(0);
    884e:	   |   clr.l 76(sp)
    8852:	   |   move.l 1c7c2 <DOSBase>,d0
    8858:	   |   movea.l d0,a6
    885a:	   |   move.l 76(sp),d1
    885e:	   |   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    8862:	   '-> move.l #107084,72(sp)
    886a:	       clr.l 68(sp)
    886e:	       move.l 1c7ba <SysBase>,d0
    8874:	       movea.l d0,a6
    8876:	       movea.l 72(sp),a1
    887a:	       move.l 68(sp),d0
    887e:	       jsr -552(a6)
    8882:	       move.l d0,64(sp)
    8886:	       move.l 64(sp),d0
    888a:	       move.l d0,1c7d6 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    8890:	       move.l 1c7d6 <MathIeeeDoubTransBase>,d0
    8896:	   ,-- bne.s 88ac <main+0x1a4>
		Exit(0);
    8898:	   |   clr.l 60(sp)
    889c:	   |   move.l 1c7c2 <DOSBase>,d0
    88a2:	   |   movea.l d0,a6
    88a4:	   |   move.l 60(sp),d1
    88a8:	   |   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    88ac:	   '-> move.l #107110,56(sp)
    88b4:	       clr.l 52(sp)
    88b8:	       move.l 1c7ba <SysBase>,d0
    88be:	       movea.l d0,a6
    88c0:	       movea.l 56(sp),a1
    88c4:	       move.l 52(sp),d0
    88c8:	       jsr -552(a6)
    88cc:	       move.l d0,48(sp)
    88d0:	       move.l 48(sp),d0
    88d4:	       move.l d0,1c7d2 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    88da:	       move.l 1c7d2 <MathIeeeDoubBasBase>,d0
    88e0:	   ,-- bne.s 88f6 <main+0x1ee>
		Exit(0);
    88e2:	   |   clr.l 44(sp)
    88e6:	   |   move.l 1c7c2 <DOSBase>,d0
    88ec:	   |   movea.l d0,a6
    88ee:	   |   move.l 44(sp),d1
    88f2:	   |   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 035!\n");
    88f6:	   '-> pea 1a27e <PutChar+0x13f0>
    88fc:	       jsr 183ec <KPrintF>
    8902:	       addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 035!\n", 25);
    8904:	       move.l 1c7c2 <DOSBase>,d0
    890a:	       movea.l d0,a6
    890c:	       jsr -60(a6)
    8910:	       move.l d0,40(sp)
    8914:	       move.l 40(sp),d0
    8918:	       move.l d0,36(sp)
    891c:	       move.l #107166,32(sp)
    8924:	       moveq #25,d0
    8926:	       move.l d0,28(sp)
    892a:	       move.l 1c7c2 <DOSBase>,d0
    8930:	       movea.l d0,a6
    8932:	       move.l 36(sp),d1
    8936:	       move.l 32(sp),d2
    893a:	       move.l 28(sp),d3
    893e:	       jsr -48(a6)
    8942:	       move.l d0,24(sp)
	Delay(50);
    8946:	       moveq #50,d0
    8948:	       move.l d0,20(sp)
    894c:	       move.l 1c7c2 <DOSBase>,d0
    8952:	       movea.l d0,a6
    8954:	       move.l 20(sp),d1
    8958:	       jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    895c:	       pea 1a2b7 <PutChar+0x1429>
    8962:	       jsr 183ec <KPrintF>
    8968:	       addq.l #4,sp
	TakeSystem();
    896a:	       jsr 846e <TakeSystem>
	KPrintF("System Taken\n");
    8970:	       pea 1a2c6 <PutChar+0x1438>
    8976:	       jsr 183ec <KPrintF>
    897c:	       addq.l #4,sp

	custom->dmacon = 0x87ff;
    897e:	       movea.l 1c7be <custom>,a0
    8984:	       move.w #-30721,150(a0)
	WaitVbl();
    898a:	       jsr 18320 <WaitVbl>

	KPrintF("Starting main_sludge\n");
    8990:	       pea 1a2d4 <PutChar+0x1446>
    8996:	       jsr 183ec <KPrintF>
    899c:	       addq.l #4,sp
	main_sludge(argc, argv);	
    899e:	       move.l 152(sp),-(sp)
    89a2:	       move.l 152(sp),-(sp)
    89a6:	       jsr 4f52 <main_sludge>
    89ac:	       addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    89ae:	       jsr 85fa <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    89b4:	       move.l 1c7c2 <DOSBase>,16(sp)
    89bc:	       move.l 1c7ba <SysBase>,d0
    89c2:	       movea.l d0,a6
    89c4:	       movea.l 16(sp),a1
    89c8:	       jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    89cc:	       move.l 1c7c6 <GfxBase>,12(sp)
    89d4:	       move.l 1c7ba <SysBase>,d0
    89da:	       movea.l d0,a6
    89dc:	       movea.l 12(sp),a1
    89e0:	       jsr -414(a6)
    89e4:	       moveq #0,d0
}
    89e6:	       movem.l (sp)+,d2-d3/a6
    89ea:	       lea 132(sp),sp
    89ee:	       rts

000089f0 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    89f0:	    lea -16(sp),sp
    89f4:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    89f6:	    moveq #8,d0
    89f8:	    move.l d0,16(sp)
    89fc:	    clr.l 12(sp)
    8a00:	    move.l 1c7ba <SysBase>,d0
    8a06:	    movea.l d0,a6
    8a08:	    move.l 16(sp),d0
    8a0c:	    move.l 12(sp),d1
    8a10:	    jsr -684(a6)
    8a14:	    move.l d0,8(sp)
    8a18:	    move.l 8(sp),d0
    8a1c:	    move.l d0,4(sp)
	if (!newStat) {
    8a20:	,-- bne.s 8a50 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    8a22:	|   movea.l 1c12e <nowStatus>,a0
    8a28:	|   move.l (a0),d0
    8a2a:	|   movea.l 4(sp),a0
    8a2e:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    8a32:	|   pea 19bc5 <PutChar+0xd37>
    8a38:	|   jsr b8 <copyString>
    8a3e:	|   addq.l #4,sp
    8a40:	|   movea.l 4(sp),a0
    8a44:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    8a46:	|   movea.l 1c12e <nowStatus>,a0
    8a4c:	|   move.l 4(sp),(a0)
	}
}
    8a50:	'-> nop
    8a52:	    movea.l (sp)+,a6
    8a54:	    lea 16(sp),sp
    8a58:	    rts

00008a5a <clearStatusBar>:

void clearStatusBar () {
    8a5a:	       lea -16(sp),sp
    8a5e:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    8a60:	       movea.l 1c12e <nowStatus>,a0
    8a66:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    8a6a:	       movea.l 1c12e <nowStatus>,a0
    8a70:	       moveq #-1,d0
    8a72:	       move.l d0,6(a0)
	while (stat) {
    8a76:	   ,-- bra.s 8ab6 <clearStatusBar+0x5c>
		kill = stat;
    8a78:	,--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    8a7e:	|  |   movea.l 16(sp),a0
    8a82:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    8a88:	|  |   movea.l 12(sp),a0
    8a8c:	|  |   move.l (a0),8(sp)
    8a90:	|  |   move.l 1c7ba <SysBase>,d0
    8a96:	|  |   movea.l d0,a6
    8a98:	|  |   movea.l 8(sp),a1
    8a9c:	|  |   jsr -690(a6)
		FreeVec(kill);
    8aa0:	|  |   move.l 12(sp),4(sp)
    8aa6:	|  |   move.l 1c7ba <SysBase>,d0
    8aac:	|  |   movea.l d0,a6
    8aae:	|  |   movea.l 4(sp),a1
    8ab2:	|  |   jsr -690(a6)
	while (stat) {
    8ab6:	|  '-> tst.l 16(sp)
    8aba:	'----- bne.s 8a78 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    8abc:	       movea.l 1c12e <nowStatus>,a0
    8ac2:	       clr.l (a0)
}
    8ac4:	       nop
    8ac6:	       movea.l (sp)+,a6
    8ac8:	       lea 16(sp),sp
    8acc:	       rts

00008ace <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    8ace:	clr.l 1c7ec <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    8ad4:	move.w #-1,1c7f0 <mainStatus+0x4>
	mainStatus.litStatus = -1;
    8adc:	moveq #-1,d0
    8ade:	move.l d0,1c7f2 <mainStatus+0x6>
	mainStatus.statusX = 10;
    8ae4:	moveq #10,d0
    8ae6:	move.l d0,1c7f6 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    8aec:	movea.l 1c706 <winHeight>,a0
    8af2:	lea -15(a0),a0
    8af6:	move.l a0,d0
    8af8:	move.l d0,1c7fa <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    8afe:	nop
    8b00:	rts

00008b02 <killLastStatus>:

void killLastStatus () {
    8b02:	    lea -12(sp),sp
    8b06:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    8b08:	    movea.l 1c12e <nowStatus>,a0
    8b0e:	    move.l (a0),d0
    8b10:	,-- beq.s 8b5a <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    8b12:	|   movea.l 1c12e <nowStatus>,a0
    8b18:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    8b1c:	|   movea.l 1c12e <nowStatus>,a0
    8b22:	|   movea.l 12(sp),a1
    8b26:	|   move.l 4(a1),d0
    8b2a:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    8b2c:	|   movea.l 12(sp),a0
    8b30:	|   move.l (a0),8(sp)
    8b34:	|   move.l 1c7ba <SysBase>,d0
    8b3a:	|   movea.l d0,a6
    8b3c:	|   movea.l 8(sp),a1
    8b40:	|   jsr -690(a6)
		FreeVec(kill);
    8b44:	|   move.l 12(sp),4(sp)
    8b4a:	|   move.l 1c7ba <SysBase>,d0
    8b50:	|   movea.l d0,a6
    8b52:	|   movea.l 4(sp),a1
    8b56:	|   jsr -690(a6)
	}
}
    8b5a:	'-> nop
    8b5c:	    movea.l (sp)+,a6
    8b5e:	    lea 12(sp),sp
    8b62:	    rts

00008b64 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    8b64:	movea.l 1c12e <nowStatus>,a0
    8b6a:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    8b70:	movea.l 1c12e <nowStatus>,a0
    8b76:	move.l 8(sp),14(a0)
}
    8b7c:	nop
    8b7e:	rts

00008b80 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    8b80:	       lea -100(sp),sp
    8b84:	       move.l a6,-(sp)
    8b86:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    8b88:	       movea.l 1c12e <nowStatus>,a0
    8b8e:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    8b92:	       movea.l 1c12e <nowStatus>,a0
    8b98:	       move.w 4(a0),d0
    8b9c:	       move.w d0,d0
    8b9e:	       andi.l #65535,d0
    8ba4:	       move.l 112(sp),-(sp)
    8ba8:	       move.l d0,-(sp)
    8baa:	       jsr 8d0 <put2bytes>
    8bb0:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    8bb2:	       movea.l 1c12e <nowStatus>,a0
    8bb8:	       move.l 6(a0),d0
    8bbc:	       move.l d0,d0
    8bbe:	       movea.w d0,a0
    8bc0:	       move.l 112(sp),-(sp)
    8bc4:	       move.l a0,-(sp)
    8bc6:	       jsr a9c <putSigned>
    8bcc:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    8bce:	       movea.l 1c12e <nowStatus>,a0
    8bd4:	       move.l 10(a0),d0
    8bd8:	       move.l 112(sp),-(sp)
    8bdc:	       move.l d0,-(sp)
    8bde:	       jsr 8d0 <put2bytes>
    8be4:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    8be6:	       movea.l 1c12e <nowStatus>,a0
    8bec:	       move.l 14(a0),d0
    8bf0:	       move.l 112(sp),-(sp)
    8bf4:	       move.l d0,-(sp)
    8bf6:	       jsr 8d0 <put2bytes>
    8bfc:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    8bfe:	       move.l 112(sp),100(sp)
    8c04:	       movea.l 1c12e <nowStatus>,a0
    8c0a:	       move.l 18(a0),96(sp)
    8c10:	       move.l 1c7c2 <DOSBase>,d0
    8c16:	       movea.l d0,a6
    8c18:	       move.l 100(sp),d1
    8c1c:	       move.l 96(sp),d2
    8c20:	       jsr -312(a6)
    8c24:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    8c28:	       move.l 112(sp),88(sp)
    8c2e:	       movea.l 1c12e <nowStatus>,a0
    8c34:	       move.l 22(a0),84(sp)
    8c3a:	       move.l 1c7c2 <DOSBase>,d0
    8c40:	       movea.l d0,a6
    8c42:	       move.l 88(sp),d1
    8c46:	       move.l 84(sp),d2
    8c4a:	       jsr -312(a6)
    8c4e:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    8c52:	       move.l 112(sp),76(sp)
    8c58:	       movea.l 1c12e <nowStatus>,a0
    8c5e:	       move.l 26(a0),72(sp)
    8c64:	       move.l 1c7c2 <DOSBase>,d0
    8c6a:	       movea.l d0,a6
    8c6c:	       move.l 76(sp),d1
    8c70:	       move.l 72(sp),d2
    8c74:	       jsr -312(a6)
    8c78:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    8c7c:	       move.l 112(sp),64(sp)
    8c82:	       movea.l 1c12e <nowStatus>,a0
    8c88:	       move.l 30(a0),60(sp)
    8c8e:	       move.l 1c7c2 <DOSBase>,d0
    8c94:	       movea.l d0,a6
    8c96:	       move.l 64(sp),d1
    8c9a:	       move.l 60(sp),d2
    8c9e:	       jsr -312(a6)
    8ca2:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    8ca6:	       move.l 112(sp),52(sp)
    8cac:	       movea.l 1c12e <nowStatus>,a0
    8cb2:	       move.l 34(a0),48(sp)
    8cb8:	       move.l 1c7c2 <DOSBase>,d0
    8cbe:	       movea.l d0,a6
    8cc0:	       move.l 52(sp),d1
    8cc4:	       move.l 48(sp),d2
    8cc8:	       jsr -312(a6)
    8ccc:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    8cd0:	       move.l 112(sp),40(sp)
    8cd6:	       movea.l 1c12e <nowStatus>,a0
    8cdc:	       move.l 38(a0),36(sp)
    8ce2:	       move.l 1c7c2 <DOSBase>,d0
    8ce8:	       movea.l d0,a6
    8cea:	       move.l 40(sp),d1
    8cee:	       move.l 36(sp),d2
    8cf2:	       jsr -312(a6)
    8cf6:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    8cfa:	   ,-- bra.s 8d3e <saveStatusBars+0x1be>
		FPutC (fp,1);
    8cfc:	,--|-> move.l 112(sp),16(sp)
    8d02:	|  |   moveq #1,d0
    8d04:	|  |   move.l d0,12(sp)
    8d08:	|  |   move.l 1c7c2 <DOSBase>,d0
    8d0e:	|  |   movea.l d0,a6
    8d10:	|  |   move.l 16(sp),d1
    8d14:	|  |   move.l 12(sp),d2
    8d18:	|  |   jsr -312(a6)
    8d1c:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    8d20:	|  |   movea.l 104(sp),a0
    8d24:	|  |   move.l (a0),d0
    8d26:	|  |   move.l 112(sp),-(sp)
    8d2a:	|  |   move.l d0,-(sp)
    8d2c:	|  |   jsr bd8 <writeString>
    8d32:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    8d34:	|  |   movea.l 104(sp),a0
    8d38:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    8d3e:	|  '-> tst.l 104(sp)
    8d42:	'----- bne.s 8cfc <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    8d44:	       move.l 112(sp),28(sp)
    8d4a:	       clr.l 24(sp)
    8d4e:	       move.l 1c7c2 <DOSBase>,d0
    8d54:	       movea.l d0,a6
    8d56:	       move.l 28(sp),d1
    8d5a:	       move.l 24(sp),d2
    8d5e:	       jsr -312(a6)
    8d62:	       move.l d0,20(sp)
}
    8d66:	       nop
    8d68:	       move.l (sp)+,d2
    8d6a:	       movea.l (sp)+,a6
    8d6c:	       lea 100(sp),sp
    8d70:	       rts

00008d72 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    8d72:	movea.l 1c12e <nowStatus>,a0
    8d78:	move.l 4(sp),6(a0)
}
    8d7e:	nop
    8d80:	rts

00008d82 <setStatusBar>:

void setStatusBar (char * txt) {
    8d82:	    subq.l #4,sp
    8d84:	    move.l a6,-(sp)
    8d86:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    8d88:	    movea.l 1c12e <nowStatus>,a0
    8d8e:	    move.l (a0),d0
    8d90:	,-- beq.s 8dc4 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    8d92:	|   movea.l 1c12e <nowStatus>,a0
    8d98:	|   movea.l (a0),a0
    8d9a:	|   move.l (a0),8(sp)
    8d9e:	|   move.l 1c7ba <SysBase>,d0
    8da4:	|   movea.l d0,a6
    8da6:	|   movea.l 8(sp),a1
    8daa:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    8dae:	|   movea.l 1c12e <nowStatus>,a0
    8db4:	|   movea.l (a0),a2
    8db6:	|   move.l 16(sp),-(sp)
    8dba:	|   jsr b8 <copyString>
    8dc0:	|   addq.l #4,sp
    8dc2:	|   move.l d0,(a2)
	}
}
    8dc4:	'-> nop
    8dc6:	    movea.l (sp)+,a2
    8dc8:	    movea.l (sp)+,a6
    8dca:	    addq.l #4,sp
    8dcc:	    rts

00008dce <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    8dce:	       movea.l 1c12e <nowStatus>,a0
    8dd4:	       move.l (a0),d0
    8dd6:	,----- beq.s 8de4 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    8dd8:	|      movea.l 1c12e <nowStatus>,a0
    8dde:	|      movea.l (a0),a0
    8de0:	|      move.l (a0),d0
    8de2:	|  ,-- bra.s 8dea <statusBarText+0x1c>
	} else {
		return "";
    8de4:	'--|-> move.l #105413,d0
	}
    8dea:	   '-> rts

00008dec <addZBufferLayer>:

#define EMULATOR

struct zBufferData *zBuffer;

void addZBufferLayer (int x, int y, int width, int height, int yz) {
    8dec:	lea -32(sp),sp
    8df0:	movem.l d2-d3/a6,-(sp)

	struct zBufferData *createthis = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8df4:	moveq #28,d0
    8df6:	move.l d0,40(sp)
    8dfa:	clr.l 36(sp)
    8dfe:	move.l 1c7ba <SysBase>,d0
    8e04:	movea.l d0,a6
    8e06:	move.l 40(sp),d0
    8e0a:	move.l 36(sp),d1
    8e0e:	jsr -684(a6)
    8e12:	move.l d0,32(sp)
    8e16:	move.l 32(sp),d0
    8e1a:	move.l d0,28(sp)
	createthis->width = sceneWidth;
    8e1e:	move.l 1c852 <sceneWidth>,d0
    8e24:	movea.l 28(sp),a0
    8e28:	move.l d0,(a0)
	createthis->height = sceneHeight;
    8e2a:	move.l 1c856 <sceneHeight>,d0
    8e30:	movea.l 28(sp),a0
    8e34:	move.l d0,4(a0)
	createthis->topx = 0;
    8e38:	movea.l 28(sp),a0
    8e3c:	clr.l 8(a0)
	createthis->topy = 0;
    8e40:	movea.l 28(sp),a0
    8e44:	clr.l 12(a0)
	createthis->yz = yz;
    8e48:	movea.l 28(sp),a0
    8e4c:	move.l 64(sp),16(a0)
	createthis->nextPanel = zBuffer;
    8e52:	move.l 1c816 <zBuffer>,d0
    8e58:	movea.l 28(sp),a0
    8e5c:	move.l d0,24(a0)

	zBuffer = createthis;
    8e60:	move.l 28(sp),1c816 <zBuffer>

	UWORD size = sceneWidth * sceneHeight / 8;	
    8e68:	move.l 1c852 <sceneWidth>,d0
    8e6e:	move.l 1c856 <sceneHeight>,d1
    8e74:	move.l d1,-(sp)
    8e76:	move.l d0,-(sp)
    8e78:	jsr 18d78 <__mulsi3>
    8e7e:	addq.l #8,sp
    8e80:	lsr.l #3,d0
    8e82:	move.w d0,26(sp)
	createthis->bitplane = AllocVec( size, MEMF_CHIP);
    8e86:	moveq #0,d0
    8e88:	move.w 26(sp),d0
    8e8c:	move.l d0,22(sp)
    8e90:	moveq #2,d0
    8e92:	move.l d0,18(sp)
    8e96:	move.l 1c7ba <SysBase>,d0
    8e9c:	movea.l d0,a6
    8e9e:	move.l 22(sp),d0
    8ea2:	move.l 18(sp),d1
    8ea6:	jsr -684(a6)
    8eaa:	move.l d0,14(sp)
    8eae:	move.l 14(sp),d0
    8eb2:	movea.l 28(sp),a0
    8eb6:	move.l d0,20(a0)
	CstCreateZBufferLayer (createthis->bitplane, x, y, width, height);
    8eba:	move.l 60(sp),d0
    8ebe:	moveq #0,d3
    8ec0:	move.w d0,d3
    8ec2:	move.l 56(sp),d0
    8ec6:	moveq #0,d2
    8ec8:	move.w d0,d2
    8eca:	move.l 52(sp),d0
    8ece:	moveq #0,d1
    8ed0:	move.w d0,d1
    8ed2:	move.l 48(sp),d0
    8ed6:	move.w d0,d0
    8ed8:	andi.l #65535,d0
    8ede:	movea.l 28(sp),a0
    8ee2:	movea.l 20(a0),a0
    8ee6:	move.l d3,-(sp)
    8ee8:	move.l d2,-(sp)
    8eea:	move.l d1,-(sp)
    8eec:	move.l d0,-(sp)
    8eee:	move.l a0,-(sp)
    8ef0:	jsr 12ac <CstCreateZBufferLayer>
    8ef6:	lea 20(sp),sp

}
    8efa:	nop
    8efc:	movem.l (sp)+,d2-d3/a6
    8f00:	lea 32(sp),sp
    8f04:	rts

00008f06 <killZBuffer>:

void killZBuffer () {
    8f06:	       lea -16(sp),sp
    8f0a:	       move.l a6,-(sp)
	struct zBufferData *zbuffercursor =  zBuffer;
    8f0c:	       move.l 1c816 <zBuffer>,16(sp)

	while(zbuffercursor) {
    8f14:	   ,-- bra.s 8f56 <killZBuffer+0x50>
		struct zBufferData *deleteme = zbuffercursor;
    8f16:	,--|-> move.l 16(sp),12(sp)
		zbuffercursor = zbuffercursor->nextPanel;
    8f1c:	|  |   movea.l 16(sp),a0
    8f20:	|  |   move.l 24(a0),16(sp)
		FreeVec(deleteme->bitplane);
    8f26:	|  |   movea.l 12(sp),a0
    8f2a:	|  |   move.l 20(a0),8(sp)
    8f30:	|  |   move.l 1c7ba <SysBase>,d0
    8f36:	|  |   movea.l d0,a6
    8f38:	|  |   movea.l 8(sp),a1
    8f3c:	|  |   jsr -690(a6)
		FreeVec(deleteme);
    8f40:	|  |   move.l 12(sp),4(sp)
    8f46:	|  |   move.l 1c7ba <SysBase>,d0
    8f4c:	|  |   movea.l d0,a6
    8f4e:	|  |   movea.l 4(sp),a1
    8f52:	|  |   jsr -690(a6)
	while(zbuffercursor) {
    8f56:	|  '-> tst.l 16(sp)
    8f5a:	'----- bne.s 8f16 <killZBuffer+0x10>
	}
	zBuffer = NULL;
    8f5c:	       clr.l 1c816 <zBuffer>
}
    8f62:	       nop
    8f64:	       movea.l (sp)+,a6
    8f66:	       lea 16(sp),sp
    8f6a:	       rts

00008f6c <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    8f6c:	                lea -304(sp),sp
    8f70:	                movem.l d2-d4/a2/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    8f74:	                clr.l 314(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();	
    8f78:	                jsr 8f06 <killZBuffer>
	
	if (! openFileFromNum (y)) return FALSE;
    8f7e:	                move.l 328(sp),d0
    8f82:	                move.l d0,-(sp)
    8f84:	                jsr 7ed6 <openFileFromNum>
    8f8a:	                addq.l #4,sp
    8f8c:	                tst.l d0
    8f8e:	            ,-- bne.s 8f96 <setZBuffer+0x2a>
    8f90:	            |   clr.w d0
    8f92:	,-----------|-- bra.w 9254 <setZBuffer+0x2e8>
	
	if (FGetC (bigDataFile) != 'a' || FGetC (bigDataFile) != 's' || FGetC (bigDataFile) != 'z' || FGetC (bigDataFile) != 'b') 
    8f96:	|           '-> move.l 1c7a2 <bigDataFile>,310(sp)
    8f9e:	|               move.l 1c7c2 <DOSBase>,d0
    8fa4:	|               movea.l d0,a6
    8fa6:	|               move.l 310(sp),d1
    8faa:	|               jsr -306(a6)
    8fae:	|               move.l d0,306(sp)
    8fb2:	|               move.l 306(sp),d0
    8fb6:	|               moveq #97,d1
    8fb8:	|               cmp.l d0,d1
    8fba:	|        ,----- bne.s 902e <setZBuffer+0xc2>
    8fbc:	|        |      move.l 1c7a2 <bigDataFile>,302(sp)
    8fc4:	|        |      move.l 1c7c2 <DOSBase>,d0
    8fca:	|        |      movea.l d0,a6
    8fcc:	|        |      move.l 302(sp),d1
    8fd0:	|        |      jsr -306(a6)
    8fd4:	|        |      move.l d0,298(sp)
    8fd8:	|        |      move.l 298(sp),d0
    8fdc:	|        |      moveq #115,d1
    8fde:	|        |      cmp.l d0,d1
    8fe0:	|        +----- bne.s 902e <setZBuffer+0xc2>
    8fe2:	|        |      move.l 1c7a2 <bigDataFile>,294(sp)
    8fea:	|        |      move.l 1c7c2 <DOSBase>,d0
    8ff0:	|        |      movea.l d0,a6
    8ff2:	|        |      move.l 294(sp),d1
    8ff6:	|        |      jsr -306(a6)
    8ffa:	|        |      move.l d0,290(sp)
    8ffe:	|        |      move.l 290(sp),d0
    9002:	|        |      moveq #122,d1
    9004:	|        |      cmp.l d0,d1
    9006:	|        +----- bne.s 902e <setZBuffer+0xc2>
    9008:	|        |      move.l 1c7a2 <bigDataFile>,286(sp)
    9010:	|        |      move.l 1c7c2 <DOSBase>,d0
    9016:	|        |      movea.l d0,a6
    9018:	|        |      move.l 286(sp),d1
    901c:	|        |      jsr -306(a6)
    9020:	|        |      move.l d0,282(sp)
    9024:	|        |      move.l 282(sp),d0
    9028:	|        |      moveq #98,d1
    902a:	|        |      cmp.l d0,d1
    902c:	|        |  ,-- beq.s 9042 <setZBuffer+0xd6>
	{ 
		 KPrintF("Not a Z-buffer file");
    902e:	|        '--|-> pea 1a311 <PutChar+0x1483>
    9034:	|           |   jsr 183ec <KPrintF>
    903a:	|           |   addq.l #4,sp
		 return FALSE;
    903c:	|           |   clr.w d0
    903e:	+-----------|-- bra.w 9254 <setZBuffer+0x2e8>
	}

	UWORD numelements = FGetC(bigDataFile);
    9042:	|           '-> move.l 1c7a2 <bigDataFile>,278(sp)
    904a:	|               move.l 1c7c2 <DOSBase>,d0
    9050:	|               movea.l d0,a6
    9052:	|               move.l 278(sp),d1
    9056:	|               jsr -306(a6)
    905a:	|               move.l d0,274(sp)
    905e:	|               move.l 274(sp),d0
    9062:	|               move.w d0,322(sp)

	UWORD size;
	UWORD count;

	zBuffer = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    9066:	|               moveq #28,d0
    9068:	|               move.l d0,270(sp)
    906c:	|               clr.l 266(sp)
    9070:	|               move.l 1c7ba <SysBase>,d0
    9076:	|               movea.l d0,a6
    9078:	|               move.l 270(sp),d0
    907c:	|               move.l 266(sp),d1
    9080:	|               jsr -684(a6)
    9084:	|               move.l d0,262(sp)
    9088:	|               move.l 262(sp),d0
    908c:	|               move.l d0,1c816 <zBuffer>

	struct zBufferData *currentitem;
	currentitem = zBuffer;
    9092:	|               move.l 1c816 <zBuffer>,318(sp)

	while(numelements--)
    909a:	|     ,-------- bra.w 923a <setZBuffer+0x2ce>
	{		
		currentitem->width = get2bytes (bigDataFile);
    909e:	|  ,--|-------> move.l 1c7a2 <bigDataFile>,d0
    90a4:	|  |  |         move.l d0,-(sp)
    90a6:	|  |  |         jsr 6bc <get2bytes>
    90ac:	|  |  |         addq.l #4,sp
    90ae:	|  |  |         movea.l 318(sp),a0
    90b2:	|  |  |         move.l d0,(a0)
		currentitem->height = get2bytes (bigDataFile);
    90b4:	|  |  |         move.l 1c7a2 <bigDataFile>,d0
    90ba:	|  |  |         move.l d0,-(sp)
    90bc:	|  |  |         jsr 6bc <get2bytes>
    90c2:	|  |  |         addq.l #4,sp
    90c4:	|  |  |         movea.l 318(sp),a0
    90c8:	|  |  |         move.l d0,4(a0)

		currentitem->topx = get2bytes (bigDataFile);
    90cc:	|  |  |         move.l 1c7a2 <bigDataFile>,d0
    90d2:	|  |  |         move.l d0,-(sp)
    90d4:	|  |  |         jsr 6bc <get2bytes>
    90da:	|  |  |         addq.l #4,sp
    90dc:	|  |  |         movea.l 318(sp),a0
    90e0:	|  |  |         move.l d0,8(a0)
		currentitem->topy = get2bytes (bigDataFile);
    90e4:	|  |  |         move.l 1c7a2 <bigDataFile>,d0
    90ea:	|  |  |         move.l d0,-(sp)
    90ec:	|  |  |         jsr 6bc <get2bytes>
    90f2:	|  |  |         addq.l #4,sp
    90f4:	|  |  |         movea.l 318(sp),a0
    90f8:	|  |  |         move.l d0,12(a0)
		currentitem->yz = get2bytes (bigDataFile);
    90fc:	|  |  |         move.l 1c7a2 <bigDataFile>,d0
    9102:	|  |  |         move.l d0,-(sp)
    9104:	|  |  |         jsr 6bc <get2bytes>
    910a:	|  |  |         addq.l #4,sp
    910c:	|  |  |         movea.l 318(sp),a0
    9110:	|  |  |         move.l d0,16(a0)

		UWORD size = currentitem->width * currentitem->height / 8;
    9114:	|  |  |         movea.l 318(sp),a0
    9118:	|  |  |         move.l (a0),d0
    911a:	|  |  |         movea.l 318(sp),a0
    911e:	|  |  |         move.l 4(a0),d1
    9122:	|  |  |         move.l d1,-(sp)
    9124:	|  |  |         move.l d0,-(sp)
    9126:	|  |  |         jsr 18d78 <__mulsi3>
    912c:	|  |  |         addq.l #8,sp
    912e:	|  |  |         tst.l d0
    9130:	|  |  |     ,-- bge.s 9134 <setZBuffer+0x1c8>
    9132:	|  |  |     |   addq.l #7,d0
    9134:	|  |  |     '-> asr.l #3,d0
    9136:	|  |  |         move.w d0,260(sp)
		currentitem->bitplane = AllocVec( size, MEMF_CHIP);
    913a:	|  |  |         moveq #0,d0
    913c:	|  |  |         move.w 260(sp),d0
    9140:	|  |  |         move.l d0,256(sp)
    9144:	|  |  |         moveq #2,d1
    9146:	|  |  |         move.l d1,252(sp)
    914a:	|  |  |         move.l 1c7ba <SysBase>,d0
    9150:	|  |  |         movea.l d0,a6
    9152:	|  |  |         move.l 256(sp),d0
    9156:	|  |  |         move.l 252(sp),d1
    915a:	|  |  |         jsr -684(a6)
    915e:	|  |  |         move.l d0,248(sp)
    9162:	|  |  |         move.l 248(sp),d0
    9166:	|  |  |         movea.l 318(sp),a0
    916a:	|  |  |         move.l d0,20(a0)
		count = FRead( bigDataFile, currentitem->bitplane, 1, size);				
    916e:	|  |  |         move.l 1c7a2 <bigDataFile>,244(sp)
    9176:	|  |  |         movea.l 318(sp),a0
    917a:	|  |  |         move.l 20(a0),240(sp)
    9180:	|  |  |         moveq #1,d0
    9182:	|  |  |         move.l d0,236(sp)
    9186:	|  |  |         moveq #0,d0
    9188:	|  |  |         move.w 260(sp),d0
    918c:	|  |  |         move.l d0,232(sp)
    9190:	|  |  |         move.l 1c7c2 <DOSBase>,d0
    9196:	|  |  |         movea.l d0,a6
    9198:	|  |  |         move.l 244(sp),d1
    919c:	|  |  |         move.l 240(sp),d2
    91a0:	|  |  |         move.l 236(sp),d3
    91a4:	|  |  |         move.l 232(sp),d4
    91a8:	|  |  |         jsr -324(a6)
    91ac:	|  |  |         move.l d0,228(sp)
    91b0:	|  |  |         move.l 228(sp),d0
    91b4:	|  |  |         move.w d0,226(sp)

		if(numelements > 0) {
    91b8:	|  |  |         tst.w 322(sp)
    91bc:	|  |  |  ,----- beq.s 91f8 <setZBuffer+0x28c>
			currentitem->nextPanel = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    91be:	|  |  |  |      moveq #28,d1
    91c0:	|  |  |  |      move.l d1,222(sp)
    91c4:	|  |  |  |      clr.l 218(sp)
    91c8:	|  |  |  |      move.l 1c7ba <SysBase>,d0
    91ce:	|  |  |  |      movea.l d0,a6
    91d0:	|  |  |  |      move.l 222(sp),d0
    91d4:	|  |  |  |      move.l 218(sp),d1
    91d8:	|  |  |  |      jsr -684(a6)
    91dc:	|  |  |  |      move.l d0,214(sp)
    91e0:	|  |  |  |      move.l 214(sp),d0
    91e4:	|  |  |  |      movea.l 318(sp),a0
    91e8:	|  |  |  |      move.l d0,24(a0)
			currentitem = currentitem->nextPanel;
    91ec:	|  |  |  |      movea.l 318(sp),a0
    91f0:	|  |  |  |      move.l 24(a0),318(sp)
    91f6:	|  |  |  |  ,-- bra.s 9200 <setZBuffer+0x294>
		} else {
			currentitem->nextPanel = NULL;
    91f8:	|  |  |  '--|-> movea.l 318(sp),a0
    91fc:	|  |  |     |   clr.l 24(a0)
		}
		#ifdef EMULATOR  
  			debug_register_bitmap(currentitem->bitplane, "zBuffer.bpl", currentitem->width, currentitem->height , 1, 0);
    9200:	|  |  |     '-> movea.l 318(sp),a0
    9204:	|  |  |         move.l 4(a0),d0
    9208:	|  |  |         move.l d0,d0
    920a:	|  |  |         movea.w d0,a1
    920c:	|  |  |         movea.l 318(sp),a0
    9210:	|  |  |         move.l (a0),d0
    9212:	|  |  |         move.l d0,d0
    9214:	|  |  |         movea.w d0,a0
    9216:	|  |  |         movea.l 318(sp),a2
    921a:	|  |  |         move.l 20(a2),d0
    921e:	|  |  |         clr.l -(sp)
    9220:	|  |  |         pea 1 <_start+0x1>
    9224:	|  |  |         move.l a1,-(sp)
    9226:	|  |  |         move.l a0,-(sp)
    9228:	|  |  |         pea 1a325 <PutChar+0x1497>
    922e:	|  |  |         move.l d0,-(sp)
    9230:	|  |  |         jsr 184d4 <debug_register_bitmap>
    9236:	|  |  |         lea 24(sp),sp
	while(numelements--)
    923a:	|  |  '-------> move.w 322(sp),d0
    923e:	|  |            move.w d0,d1
    9240:	|  |            subq.w #1,d1
    9242:	|  |            move.w d1,322(sp)
    9246:	|  |            tst.w d0
    9248:	|  '----------- bne.w 909e <setZBuffer+0x132>
		#endif  
		
	}


	finishAccess ();
    924c:	|               jsr 7dce <finishAccess>
	
	return TRUE;
    9252:	|               moveq #1,d0
}
    9254:	'-------------> movem.l (sp)+,d2-d4/a2/a6
    9258:	                lea 304(sp),sp
    925c:	                rts

0000925e <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    925e:	          lea -32(sp),sp
    9262:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    9264:	          move.l 40(sp),d0
    9268:	          addq.l #8,d0
    926a:	          move.l d0,24(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    926e:	          clr.l 32(sp)
    9272:	   ,----- bra.s 92b8 <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    9274:	,--|----> movea.l 24(sp),a0
    9278:	|  |      movea.l 8(a0),a0
    927c:	|  |      move.l 32(sp),d1
    9280:	|  |      move.l d1,d0
    9282:	|  |      lsl.l #3,d0
    9284:	|  |      sub.l d1,d0
    9286:	|  |      add.l d0,d0
    9288:	|  |      add.l d0,d0
    928a:	|  |      adda.l d0,a0
    928c:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    9290:	|  |      movea.l 8(sp),a0
    9294:	|  |      move.l 24(a0),d0
    9298:	|  |  ,-- beq.s 92b4 <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    929a:	|  |  |   movea.l 8(sp),a0
    929e:	|  |  |   move.l 24(a0),4(sp)
    92a4:	|  |  |   move.l 1c7ba <SysBase>,d0
    92aa:	|  |  |   movea.l d0,a6
    92ac:	|  |  |   movea.l 4(sp),a1
    92b0:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    92b4:	|  |  '-> addq.l #1,32(sp)
    92b8:	|  '----> movea.l 24(sp),a0
    92bc:	|         move.l (a0),d0
    92be:	|         cmp.l 32(sp),d0
    92c2:	'-------- bgt.s 9274 <forgetSpriteBank+0x16>
		}		
	}

	FreeVec(spritebanktoforget->sprites);	
    92c4:	          movea.l 24(sp),a0
    92c8:	          move.l 8(a0),20(sp)
    92ce:	          move.l 1c7ba <SysBase>,d0
    92d4:	          movea.l d0,a6
    92d6:	          movea.l 20(sp),a1
    92da:	          jsr -690(a6)
	
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    92de:	          move.l 1c8ce <allLoadedBanks>,28(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    92e6:	      ,-- bra.s 92f2 <forgetSpriteBank+0x94>
	{
		precedingbank = precedingbank->next;
    92e8:	   ,--|-> movea.l 28(sp),a0
    92ec:	   |  |   move.l 22(a0),28(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    92f2:	   |  '-> movea.l 28(sp),a0
    92f6:	   |      movea.l 22(a0),a0
    92fa:	   |      move.l (a0),d1
    92fc:	   |      movea.l 40(sp),a0
    9300:	   |      move.l (a0),d0
    9302:	   |      cmp.l d1,d0
    9304:	   |  ,-- beq.s 930c <forgetSpriteBank+0xae>
    9306:	   |  |   tst.l 28(sp)
    930a:	   '--|-- bne.s 92e8 <forgetSpriteBank+0x8a>
	}	

	if(precedingbank)
    930c:	      '-> tst.l 28(sp)
    9310:	   ,----- beq.s 933a <forgetSpriteBank+0xdc>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    9312:	   |      movea.l 40(sp),a0
    9316:	   |      move.l 22(a0),d0
    931a:	   |      movea.l 28(sp),a0
    931e:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    9322:	   |      move.l 40(sp),12(sp)
    9328:	   |      move.l 1c7ba <SysBase>,d0
    932e:	   |      movea.l d0,a6
    9330:	   |      movea.l 12(sp),a1
    9334:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    9338:	   |  ,-- bra.s 9360 <forgetSpriteBank+0x102>
		allLoadedBanks = allLoadedBanks->next;
    933a:	   '--|-> movea.l 1c8ce <allLoadedBanks>,a0
    9340:	      |   move.l 22(a0),d0
    9344:	      |   move.l d0,1c8ce <allLoadedBanks>
		FreeVec( forgetme);
    934a:	      |   move.l 40(sp),16(sp)
    9350:	      |   move.l 1c7ba <SysBase>,d0
    9356:	      |   movea.l d0,a6
    9358:	      |   movea.l 16(sp),a1
    935c:	      |   jsr -690(a6)
}
    9360:	      '-> nop
    9362:	          movea.l (sp)+,a6
    9364:	          lea 32(sp),sp
    9368:	          rts

0000936a <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere) {
    936a:	                      lea -84(sp),sp
    936e:	                      movem.l d2-d4/a2/a6,-(sp)

	KPrintF("loadSpriteBank: Starting\n");
    9372:	                      pea 1a331 <PutChar+0x14a3>
    9378:	                      jsr 183ec <KPrintF>
    937e:	                      addq.l #4,sp

	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    9380:	                      clr.l 94(sp)
    9384:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    9388:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    938c:	                      move.l 108(sp),-(sp)
    9390:	                      jsr 7ed6 <openFileFromNum>
    9396:	                      addq.l #4,sp
    9398:	                      tst.l d0
    939a:	                  ,-- bne.s 93b0 <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    939c:	                  |   pea 1a34b <PutChar+0x14bd>
    93a2:	                  |   jsr 183ec <KPrintF>
    93a8:	                  |   addq.l #4,sp
		return FALSE;
    93aa:	                  |   clr.w d0
    93ac:	,-----------------|-- bra.w 97a4 <loadSpriteBank+0x43a>
	}

	get2bytes(bigDataFile); // Ignore first 2 bytes
    93b0:	|                 '-> move.l 1c7a2 <bigDataFile>,d0
    93b6:	|                     move.l d0,-(sp)
    93b8:	|                     jsr 6bc <get2bytes>
    93be:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    93c0:	|                     move.l 1c7a2 <bigDataFile>,82(sp)
    93c8:	|                     move.l 1c7c2 <DOSBase>,d0
    93ce:	|                     movea.l d0,a6
    93d0:	|                     move.l 82(sp),d1
    93d4:	|                     jsr -306(a6)
    93d8:	|                     move.l d0,78(sp)
    93dc:	|                     move.l 78(sp),d0
    93e0:	|                     movea.l 112(sp),a0
    93e4:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    93e8:	|                     move.l 1c7a2 <bigDataFile>,d0
    93ee:	|                     move.l d0,-(sp)
    93f0:	|                     jsr 6bc <get2bytes>
    93f6:	|                     addq.l #4,sp
    93f8:	|                     move.l d0,74(sp)

	if (total <= 0) {
    93fc:	|                 ,-- bgt.s 9412 <loadSpriteBank+0xa8>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    93fe:	|                 |   pea 1a379 <PutChar+0x14eb>
    9404:	|                 |   jsr 183ec <KPrintF>
    940a:	|                 |   addq.l #4,sp
		return FALSE;
    940c:	|                 |   clr.w d0
    940e:	+-----------------|-- bra.w 97a4 <loadSpriteBank+0x43a>
	}
	if (loadhere->type == 3)
    9412:	|                 '-> movea.l 112(sp),a0
    9416:	|                     move.l 4(a0),d0
    941a:	|                     moveq #3,d1
    941c:	|                     cmp.l d0,d1
    941e:	|                 ,-- bne.s 942c <loadSpriteBank+0xc2>
	{
		loadhere->isFont = TRUE;
    9420:	|                 |   movea.l 112(sp),a0
    9424:	|                 |   move.w #1,12(a0)
    942a:	|              ,--|-- bra.s 944e <loadSpriteBank+0xe4>
	}
	else if (loadhere->type > 3) {
    942c:	|              |  '-> movea.l 112(sp),a0
    9430:	|              |      move.l 4(a0),d0
    9434:	|              |      moveq #3,d1
    9436:	|              |      cmp.l d0,d1
    9438:	|              +----- bge.s 944e <loadSpriteBank+0xe4>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    943a:	|              |      pea 1a3b9 <PutChar+0x152b>
    9440:	|              |      jsr 183ec <KPrintF>
    9446:	|              |      addq.l #4,sp
		return FALSE;
    9448:	|              |      clr.w d0
    944a:	+--------------|----- bra.w 97a4 <loadSpriteBank+0x43a>
	}

	loadhere->total = total;
    944e:	|              '----> movea.l 112(sp),a0
    9452:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    9456:	|                     move.l 74(sp),d1
    945a:	|                     move.l d1,d0
    945c:	|                     lsl.l #3,d0
    945e:	|                     sub.l d1,d0
    9460:	|                     add.l d0,d0
    9462:	|                     add.l d0,d0
    9464:	|                     move.l d0,70(sp)
    9468:	|                     clr.l 66(sp)
    946c:	|                     move.l 1c7ba <SysBase>,d0
    9472:	|                     movea.l d0,a6
    9474:	|                     move.l 70(sp),d0
    9478:	|                     move.l 66(sp),d1
    947c:	|                     jsr -684(a6)
    9480:	|                     move.l d0,62(sp)
    9484:	|                     move.l 62(sp),d0
    9488:	|                     movea.l 112(sp),a0
    948c:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    9490:	|                     movea.l 112(sp),a0
    9494:	|                     move.l 8(a0),d0
    9498:	|                 ,-- bne.s 94a0 <loadSpriteBank+0x136>
    949a:	|                 |   clr.w d0
    949c:	+-----------------|-- bra.w 97a4 <loadSpriteBank+0x43a>
	
	startIndex = 1;
    94a0:	|                 '-> moveq #1,d0
    94a2:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    94a6:	|                     clr.l 100(sp)
    94aa:	|     ,-------------- bra.w 9782 <loadSpriteBank+0x418>

		UWORD width = get2bytes(bigDataFile);
    94ae:	|  ,--|-------------> move.l 1c7a2 <bigDataFile>,d0
    94b4:	|  |  |               move.l d0,-(sp)
    94b6:	|  |  |               jsr 6bc <get2bytes>
    94bc:	|  |  |               addq.l #4,sp
    94be:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    94c2:	|  |  |               movea.l 112(sp),a0
    94c6:	|  |  |               movea.l 8(a0),a0
    94ca:	|  |  |               move.l 100(sp),d1
    94ce:	|  |  |               move.l d1,d0
    94d0:	|  |  |               lsl.l #3,d0
    94d2:	|  |  |               sub.l d1,d0
    94d4:	|  |  |               add.l d0,d0
    94d6:	|  |  |               add.l d0,d0
    94d8:	|  |  |               adda.l d0,a0
    94da:	|  |  |               moveq #0,d0
    94dc:	|  |  |               move.w 60(sp),d0
    94e0:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    94e2:	|  |  |               movea.l 1c7a2 <bigDataFile>,a1
    94e8:	|  |  |               movea.l 112(sp),a0
    94ec:	|  |  |               movea.l 8(a0),a0
    94f0:	|  |  |               move.l 100(sp),d1
    94f4:	|  |  |               move.l d1,d0
    94f6:	|  |  |               lsl.l #3,d0
    94f8:	|  |  |               sub.l d1,d0
    94fa:	|  |  |               add.l d0,d0
    94fc:	|  |  |               add.l d0,d0
    94fe:	|  |  |               lea (0,a0,d0.l),a2
    9502:	|  |  |               move.l a1,-(sp)
    9504:	|  |  |               jsr 6bc <get2bytes>
    950a:	|  |  |               addq.l #4,sp
    950c:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    9510:	|  |  |               movea.l 1c7a2 <bigDataFile>,a1
    9516:	|  |  |               movea.l 112(sp),a0
    951a:	|  |  |               movea.l 8(a0),a0
    951e:	|  |  |               move.l 100(sp),d1
    9522:	|  |  |               move.l d1,d0
    9524:	|  |  |               lsl.l #3,d0
    9526:	|  |  |               sub.l d1,d0
    9528:	|  |  |               add.l d0,d0
    952a:	|  |  |               add.l d0,d0
    952c:	|  |  |               lea (0,a0,d0.l),a2
    9530:	|  |  |               move.l a1,-(sp)
    9532:	|  |  |               jsr 6bc <get2bytes>
    9538:	|  |  |               addq.l #4,sp
    953a:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    953e:	|  |  |               movea.l 1c7a2 <bigDataFile>,a1
    9544:	|  |  |               movea.l 112(sp),a0
    9548:	|  |  |               movea.l 8(a0),a0
    954c:	|  |  |               move.l 100(sp),d1
    9550:	|  |  |               move.l d1,d0
    9552:	|  |  |               lsl.l #3,d0
    9554:	|  |  |               sub.l d1,d0
    9556:	|  |  |               add.l d0,d0
    9558:	|  |  |               add.l d0,d0
    955a:	|  |  |               lea (0,a0,d0.l),a2
    955e:	|  |  |               move.l a1,-(sp)
    9560:	|  |  |               jsr 6bc <get2bytes>
    9566:	|  |  |               addq.l #4,sp
    9568:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    956c:	|  |  |               movea.l 112(sp),a0
    9570:	|  |  |               move.l 4(a0),d0
    9574:	|  |  |               moveq #3,d1
    9576:	|  |  |               cmp.l d0,d1
    9578:	|  |  |     ,-------- beq.w 9614 <loadSpriteBank+0x2aa>
    957c:	|  |  |     |         moveq #3,d1
    957e:	|  |  |     |         cmp.l d0,d1
    9580:	|  |  |  ,--|-------- blt.w 96ba <loadSpriteBank+0x350>
    9584:	|  |  |  |  |         moveq #1,d1
    9586:	|  |  |  |  |         cmp.l d0,d1
    9588:	|  |  |  |  |     ,-- beq.s 9594 <loadSpriteBank+0x22a>
    958a:	|  |  |  |  |     |   moveq #2,d1
    958c:	|  |  |  |  |     |   cmp.l d0,d1
    958e:	|  |  |  |  |  ,--|-- beq.s 95c0 <loadSpriteBank+0x256>
    9590:	|  |  |  +--|--|--|-- bra.w 96ba <loadSpriteBank+0x350>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    9594:	|  |  |  |  |  |  '-> movea.l 112(sp),a0
    9598:	|  |  |  |  |  |      movea.l 8(a0),a0
    959c:	|  |  |  |  |  |      move.l 100(sp),d1
    95a0:	|  |  |  |  |  |      move.l d1,d0
    95a2:	|  |  |  |  |  |      lsl.l #3,d0
    95a4:	|  |  |  |  |  |      sub.l d1,d0
    95a6:	|  |  |  |  |  |      add.l d0,d0
    95a8:	|  |  |  |  |  |      add.l d0,d0
    95aa:	|  |  |  |  |  |      adda.l d0,a0
    95ac:	|  |  |  |  |  |      move.l 4(a0),d0
    95b0:	|  |  |  |  |  |      addq.l #2,d0
    95b2:	|  |  |  |  |  |      move.l d0,d0
    95b4:	|  |  |  |  |  |      add.w d0,d0
    95b6:	|  |  |  |  |  |      add.w d0,d0
    95b8:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    95bc:	|  |  |  +--|--|----- bra.w 96ba <loadSpriteBank+0x350>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    95c0:	|  |  |  |  |  '----> movea.l 112(sp),a0
    95c4:	|  |  |  |  |         movea.l 8(a0),a0
    95c8:	|  |  |  |  |         move.l 100(sp),d1
    95cc:	|  |  |  |  |         move.l d1,d0
    95ce:	|  |  |  |  |         lsl.l #3,d0
    95d0:	|  |  |  |  |         sub.l d1,d0
    95d2:	|  |  |  |  |         add.l d0,d0
    95d4:	|  |  |  |  |         add.l d0,d0
    95d6:	|  |  |  |  |         adda.l d0,a0
    95d8:	|  |  |  |  |         move.l (a0),d0
    95da:	|  |  |  |  |     ,-- bpl.s 95de <loadSpriteBank+0x274>
    95dc:	|  |  |  |  |     |   addq.l #7,d0
    95de:	|  |  |  |  |     '-> asr.l #3,d0
    95e0:	|  |  |  |  |         move.l d0,d2
    95e2:	|  |  |  |  |         movea.l 112(sp),a0
    95e6:	|  |  |  |  |         movea.l 8(a0),a0
    95ea:	|  |  |  |  |         move.l 100(sp),d1
    95ee:	|  |  |  |  |         move.l d1,d0
    95f0:	|  |  |  |  |         lsl.l #3,d0
    95f2:	|  |  |  |  |         sub.l d1,d0
    95f4:	|  |  |  |  |         add.l d0,d0
    95f6:	|  |  |  |  |         add.l d0,d0
    95f8:	|  |  |  |  |         adda.l d0,a0
    95fa:	|  |  |  |  |         move.l 4(a0),d0
    95fe:	|  |  |  |  |         move.l d0,d0
    9600:	|  |  |  |  |         move.w d2,d1
    9602:	|  |  |  |  |         muls.w d0,d1
    9604:	|  |  |  |  |         move.w d1,d0
    9606:	|  |  |  |  |         add.w d0,d0
    9608:	|  |  |  |  |         add.w d1,d0
    960a:	|  |  |  |  |         add.w d0,d0
    960c:	|  |  |  |  |         move.w d0,98(sp)
				break;
    9610:	|  |  |  +--|-------- bra.w 96ba <loadSpriteBank+0x350>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    9614:	|  |  |  |  '-------> movea.l 112(sp),a0
    9618:	|  |  |  |            movea.l 8(a0),a0
    961c:	|  |  |  |            move.l 100(sp),d1
    9620:	|  |  |  |            move.l d1,d0
    9622:	|  |  |  |            lsl.l #3,d0
    9624:	|  |  |  |            sub.l d1,d0
    9626:	|  |  |  |            add.l d0,d0
    9628:	|  |  |  |            add.l d0,d0
    962a:	|  |  |  |            adda.l d0,a0
    962c:	|  |  |  |            move.l (a0),d0
    962e:	|  |  |  |            andi.l #-2147483633,d0
    9634:	|  |  |  |        ,-- bpl.s 963e <loadSpriteBank+0x2d4>
    9636:	|  |  |  |        |   subq.l #1,d0
    9638:	|  |  |  |        |   moveq #-16,d1
    963a:	|  |  |  |        |   or.l d1,d0
    963c:	|  |  |  |        |   addq.l #1,d0
    963e:	|  |  |  |        '-> tst.l d0
    9640:	|  |  |  |     ,----- ble.s 9646 <loadSpriteBank+0x2dc>
    9642:	|  |  |  |     |      moveq #2,d0
    9644:	|  |  |  |     |  ,-- bra.s 9648 <loadSpriteBank+0x2de>
    9646:	|  |  |  |     '--|-> clr.w d0
    9648:	|  |  |  |        '-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    964c:	|  |  |  |            movea.l 112(sp),a0
    9650:	|  |  |  |            movea.l 8(a0),a0
    9654:	|  |  |  |            move.l 100(sp),d1
    9658:	|  |  |  |            move.l d1,d0
    965a:	|  |  |  |            lsl.l #3,d0
    965c:	|  |  |  |            sub.l d1,d0
    965e:	|  |  |  |            add.l d0,d0
    9660:	|  |  |  |            add.l d0,d0
    9662:	|  |  |  |            adda.l d0,a0
    9664:	|  |  |  |            move.l (a0),d0
    9666:	|  |  |  |            movea.l d0,a0
    9668:	|  |  |  |            cmpa.w #0,a0
    966c:	|  |  |  |        ,-- bge.s 9672 <loadSpriteBank+0x308>
    966e:	|  |  |  |        |   lea 15(a0),a0
    9672:	|  |  |  |        '-> move.l a0,d0
    9674:	|  |  |  |            asr.l #4,d0
    9676:	|  |  |  |            add.l d0,d0
    9678:	|  |  |  |            move.l d0,d1
    967a:	|  |  |  |            moveq #0,d0
    967c:	|  |  |  |            move.w 58(sp),d0
    9680:	|  |  |  |            add.l d1,d0
    9682:	|  |  |  |            move.l d0,d2
    9684:	|  |  |  |            movea.l 112(sp),a0
    9688:	|  |  |  |            movea.l 8(a0),a0
    968c:	|  |  |  |            move.l 100(sp),d1
    9690:	|  |  |  |            move.l d1,d0
    9692:	|  |  |  |            lsl.l #3,d0
    9694:	|  |  |  |            sub.l d1,d0
    9696:	|  |  |  |            add.l d0,d0
    9698:	|  |  |  |            add.l d0,d0
    969a:	|  |  |  |            adda.l d0,a0
    969c:	|  |  |  |            move.l 4(a0),d0
    96a0:	|  |  |  |            move.l d0,d0
    96a2:	|  |  |  |            move.w d2,d1
    96a4:	|  |  |  |            muls.w d0,d1
    96a6:	|  |  |  |            move.w d1,98(sp)
				if(size > 100)
    96aa:	|  |  |  |            cmpi.w #100,98(sp)
    96b0:	|  |  |  |        ,-- bls.s 96b8 <loadSpriteBank+0x34e>
				{
					UWORD br1 = 1;
    96b2:	|  |  |  |        |   move.w #1,56(sp)
				}
				break;
    96b8:	|  |  |  |        '-> nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    96ba:	|  |  |  '----------> moveq #0,d0
    96bc:	|  |  |               move.w 98(sp),d0
    96c0:	|  |  |               add.l d0,d0
    96c2:	|  |  |               move.l d0,52(sp)
    96c6:	|  |  |               moveq #2,d0
    96c8:	|  |  |               move.l d0,48(sp)
    96cc:	|  |  |               move.l 1c7ba <SysBase>,d0
    96d2:	|  |  |               movea.l d0,a6
    96d4:	|  |  |               move.l 52(sp),d0
    96d8:	|  |  |               move.l 48(sp),d1
    96dc:	|  |  |               jsr -684(a6)
    96e0:	|  |  |               move.l d0,44(sp)
    96e4:	|  |  |               movea.l 44(sp),a1
    96e8:	|  |  |               movea.l 112(sp),a0
    96ec:	|  |  |               movea.l 8(a0),a0
    96f0:	|  |  |               move.l 100(sp),d1
    96f4:	|  |  |               move.l d1,d0
    96f6:	|  |  |               lsl.l #3,d0
    96f8:	|  |  |               sub.l d1,d0
    96fa:	|  |  |               add.l d0,d0
    96fc:	|  |  |               add.l d0,d0
    96fe:	|  |  |               adda.l d0,a0
    9700:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    9704:	|  |  |               move.l 1c7a2 <bigDataFile>,40(sp)
    970c:	|  |  |               movea.l 112(sp),a0
    9710:	|  |  |               movea.l 8(a0),a0
    9714:	|  |  |               move.l 100(sp),d1
    9718:	|  |  |               move.l d1,d0
    971a:	|  |  |               lsl.l #3,d0
    971c:	|  |  |               sub.l d1,d0
    971e:	|  |  |               add.l d0,d0
    9720:	|  |  |               add.l d0,d0
    9722:	|  |  |               adda.l d0,a0
    9724:	|  |  |               move.l 24(a0),36(sp)
    972a:	|  |  |               moveq #2,d1
    972c:	|  |  |               move.l d1,32(sp)
    9730:	|  |  |               move.w 98(sp),d0
    9734:	|  |  |               lsr.w #1,d0
    9736:	|  |  |               move.w d0,d0
    9738:	|  |  |               andi.l #65535,d0
    973e:	|  |  |               move.l d0,28(sp)
    9742:	|  |  |               move.l 1c7c2 <DOSBase>,d0
    9748:	|  |  |               movea.l d0,a6
    974a:	|  |  |               move.l 40(sp),d1
    974e:	|  |  |               move.l 36(sp),d2
    9752:	|  |  |               move.l 32(sp),d3
    9756:	|  |  |               move.l 28(sp),d4
    975a:	|  |  |               jsr -324(a6)
    975e:	|  |  |               move.l d0,24(sp)
    9762:	|  |  |               move.l 24(sp),d0
    9766:	|  |  |               move.w d0,22(sp)
		if (!count) {
    976a:	|  |  |           ,-- bne.s 977e <loadSpriteBank+0x414>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    976c:	|  |  |           |   pea 1a3ee <PutChar+0x1560>
    9772:	|  |  |           |   jsr 183ec <KPrintF>
    9778:	|  |  |           |   addq.l #4,sp
			return FALSE;
    977a:	|  |  |           |   clr.w d0
    977c:	+--|--|-----------|-- bra.s 97a4 <loadSpriteBank+0x43a>
	for (i = 0; i < total; i++) {
    977e:	|  |  |           '-> addq.l #1,100(sp)
    9782:	|  |  '-------------> move.l 100(sp),d0
    9786:	|  |                  cmp.l 74(sp),d0
    978a:	|  '----------------- blt.w 94ae <loadSpriteBank+0x144>
		}
	}

	finishAccess ();
    978e:	|                     jsr 7dce <finishAccess>

	KPrintF("loadSpriteBank: Complete\n");
    9794:	|                     pea 1a421 <PutChar+0x1593>
    979a:	|                     jsr 183ec <KPrintF>
    97a0:	|                     addq.l #4,sp
	return TRUE;
    97a2:	|                     moveq #1,d0
}
    97a4:	'-------------------> movem.l (sp)+,d2-d4/a2/a6
    97a8:	                      lea 84(sp),sp
    97ac:	                      rts

000097ae <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    97ae:	                   lea -16(sp),sp
    97b2:	                   move.l d2,-(sp)
    97b4:	                   move.l 32(sp),d0
    97b8:	                   move.w d0,d0
    97ba:	                   move.w d0,6(sp)
	WORD x =  thisPerson->x - single->xhot;
    97be:	                   movea.l 28(sp),a0
    97c2:	                   move.l (a0),d2
    97c4:	                   movea.l 24(sp),a0
    97c8:	                   move.l 8(a0),d0
    97cc:	                   move.l d0,-(sp)
    97ce:	                   jsr 1881e <__floatsisf>
    97d4:	                   addq.l #4,sp
    97d6:	                   move.l d0,-(sp)
    97d8:	                   move.l d2,-(sp)
    97da:	                   jsr 18b12 <__subsf3>
    97e0:	                   addq.l #8,sp
    97e2:	                   move.l d0,-(sp)
    97e4:	                   jsr 187b6 <__fixsfsi>
    97ea:	                   addq.l #4,sp
    97ec:	                   move.w d0,18(sp)
	WORD y =  thisPerson->y - single->yhot;			
    97f0:	                   movea.l 28(sp),a0
    97f4:	                   move.l 4(a0),d2
    97f8:	                   movea.l 24(sp),a0
    97fc:	                   move.l 12(a0),d0
    9800:	                   move.l d0,-(sp)
    9802:	                   jsr 1881e <__floatsisf>
    9808:	                   addq.l #4,sp
    980a:	                   move.l d0,-(sp)
    980c:	                   move.l d2,-(sp)
    980e:	                   jsr 18b12 <__subsf3>
    9814:	                   addq.l #8,sp
    9816:	                   move.l d0,-(sp)
    9818:	                   jsr 187b6 <__fixsfsi>
    981e:	                   addq.l #4,sp
    9820:	                   move.w d0,8(sp)

	if( x < 0)
    9824:	                   tst.w 18(sp)
    9828:	               ,-- bge.s 985c <scaleSprite+0xae>
	{
		x = thisPerson->x - single->xhot;
    982a:	               |   movea.l 28(sp),a0
    982e:	               |   move.l (a0),d2
    9830:	               |   movea.l 24(sp),a0
    9834:	               |   move.l 8(a0),d0
    9838:	               |   move.l d0,-(sp)
    983a:	               |   jsr 1881e <__floatsisf>
    9840:	               |   addq.l #4,sp
    9842:	               |   move.l d0,-(sp)
    9844:	               |   move.l d2,-(sp)
    9846:	               |   jsr 18b12 <__subsf3>
    984c:	               |   addq.l #8,sp
    984e:	               |   move.l d0,-(sp)
    9850:	               |   jsr 187b6 <__fixsfsi>
    9856:	               |   addq.l #4,sp
    9858:	               |   move.w d0,18(sp)
	}

	CstScaleSprite( single, thisPerson, x, y,SCREEN);
    985c:	               '-> movea.w 8(sp),a1
    9860:	                   movea.w 18(sp),a0
    9864:	                   pea 1 <_start+0x1>
    9868:	                   move.l a1,-(sp)
    986a:	                   move.l a0,-(sp)
    986c:	                   move.l 40(sp),-(sp)
    9870:	                   move.l 40(sp),-(sp)
    9874:	                   jsr 30ba <CstScaleSprite>
    987a:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    987e:	                   movea.l 28(sp),a0
    9882:	                   move.l 118(a0),d0
    9886:	                   moveq #8,d1
    9888:	                   and.l d1,d0
    988a:	   ,-------------- beq.w 9956 <scaleSprite+0x1a8>
		if (single->xhot < 0)
    988e:	   |               movea.l 24(sp),a0
    9892:	   |               move.l 8(a0),d0
    9896:	   |  ,----------- bpl.s 98d2 <scaleSprite+0x124>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    9898:	   |  |            move.w 18(sp),d0
    989c:	   |  |            tst.w 6(sp)
    98a0:	   |  |     ,----- beq.s 98ba <scaleSprite+0x10c>
    98a2:	   |  |     |      movea.l 24(sp),a0
    98a6:	   |  |     |      move.l (a0),d1
    98a8:	   |  |     |      move.l d1,d2
    98aa:	   |  |     |      movea.l 24(sp),a0
    98ae:	   |  |     |      move.l 8(a0),d1
    98b2:	   |  |     |      move.l d1,d1
    98b4:	   |  |     |      movea.w d2,a0
    98b6:	   |  |     |      suba.w d1,a0
    98b8:	   |  |     |  ,-- bra.s 98c8 <scaleSprite+0x11a>
    98ba:	   |  |     '--|-> movea.l 24(sp),a0
    98be:	   |  |        |   move.l 8(a0),d1
    98c2:	   |  |        |   move.l d1,d1
    98c4:	   |  |        |   movea.w d1,a0
    98c6:	   |  |        |   addq.w #1,a0
    98c8:	   |  |        '-> move.w d0,d1
    98ca:	   |  |            sub.w a0,d1
    98cc:	   |  |            move.w d1,16(sp)
    98d0:	   |  |  ,-------- bra.s 990a <scaleSprite+0x15c>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    98d2:	   |  '--|-------> move.w 18(sp),d1
    98d6:	   |     |         tst.w 6(sp)
    98da:	   |     |  ,----- beq.s 98f8 <scaleSprite+0x14a>
    98dc:	   |     |  |      movea.l 24(sp),a0
    98e0:	   |     |  |      move.l (a0),d0
    98e2:	   |     |  |      move.l d0,d2
    98e4:	   |     |  |      movea.l 24(sp),a0
    98e8:	   |     |  |      move.l 8(a0),d0
    98ec:	   |     |  |      move.l d0,d0
    98ee:	   |     |  |      movea.w d2,a0
    98f0:	   |     |  |      suba.w d0,a0
    98f2:	   |     |  |      move.w a0,d0
    98f4:	   |     |  |      subq.w #1,d0
    98f6:	   |     |  |  ,-- bra.s 9902 <scaleSprite+0x154>
    98f8:	   |     |  '--|-> movea.l 24(sp),a0
    98fc:	   |     |     |   move.l 8(a0),d0
    9900:	   |     |     |   move.l d0,d0
    9902:	   |     |     '-> movea.w d1,a0
    9904:	   |     |         suba.w d0,a0
    9906:	   |     |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    990a:	   |     '-------> movea.l 28(sp),a0
    990e:	   |               move.l 24(a0),d0
    9912:	   |               move.l d0,d1
    9914:	   |               movea.l 24(sp),a0
    9918:	   |               move.l 12(a0),d0
    991c:	   |               move.l d0,d0
    991e:	   |               sub.w d0,d1
    9920:	   |               move.w 8(sp),d0
    9924:	   |               movea.w d1,a0
    9926:	   |               adda.w d0,a0
    9928:	   |               move.w a0,14(sp)
		x2 = x1 + single->width;
    992c:	   |               movea.l 24(sp),a0
    9930:	   |               move.l (a0),d0
    9932:	   |               move.l d0,d0
    9934:	   |               move.w 16(sp),d1
    9938:	   |               add.w d0,d1
    993a:	   |               move.w d1,12(sp)
		y2 = y1 + single->height;
    993e:	   |               movea.l 24(sp),a0
    9942:	   |               move.l 4(a0),d0
    9946:	   |               move.l d0,d0
    9948:	   |               movea.w 14(sp),a0
    994c:	   |               adda.w d0,a0
    994e:	   |               move.w a0,10(sp)
    9952:	,--|-------------- bra.w 9a3e <scaleSprite+0x290>
	} else {
		x -= cameraX;
    9956:	|  '-------------> move.w 18(sp),d1
    995a:	|                  move.l 1c870 <cameraX>,d0
    9960:	|                  move.l d0,d0
    9962:	|                  sub.w d0,d1
    9964:	|                  move.w d1,18(sp)
		y -= cameraY;
    9968:	|                  move.w 8(sp),d1
    996c:	|                  move.l 1c874 <cameraY>,d0
    9972:	|                  move.l d0,d0
    9974:	|                  sub.w d0,d1
    9976:	|                  move.w d1,8(sp)
		if (single->xhot < 0)
    997a:	|                  movea.l 24(sp),a0
    997e:	|                  move.l 8(a0),d0
    9982:	|     ,----------- bpl.s 99be <scaleSprite+0x210>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    9984:	|     |            move.w 18(sp),d0
    9988:	|     |            tst.w 6(sp)
    998c:	|     |     ,----- beq.s 99a6 <scaleSprite+0x1f8>
    998e:	|     |     |      movea.l 24(sp),a0
    9992:	|     |     |      move.l (a0),d1
    9994:	|     |     |      move.l d1,d2
    9996:	|     |     |      movea.l 24(sp),a0
    999a:	|     |     |      move.l 8(a0),d1
    999e:	|     |     |      move.l d1,d1
    99a0:	|     |     |      movea.w d2,a0
    99a2:	|     |     |      suba.w d1,a0
    99a4:	|     |     |  ,-- bra.s 99b4 <scaleSprite+0x206>
    99a6:	|     |     '--|-> movea.l 24(sp),a0
    99aa:	|     |        |   move.l 8(a0),d1
    99ae:	|     |        |   move.l d1,d1
    99b0:	|     |        |   movea.w d1,a0
    99b2:	|     |        |   addq.w #1,a0
    99b4:	|     |        '-> move.w d0,d1
    99b6:	|     |            sub.w a0,d1
    99b8:	|     |            move.w d1,16(sp)
    99bc:	|     |  ,-------- bra.s 99f6 <scaleSprite+0x248>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    99be:	|     '--|-------> move.w 18(sp),d1
    99c2:	|        |         tst.w 6(sp)
    99c6:	|        |  ,----- beq.s 99e4 <scaleSprite+0x236>
    99c8:	|        |  |      movea.l 24(sp),a0
    99cc:	|        |  |      move.l (a0),d0
    99ce:	|        |  |      move.l d0,d2
    99d0:	|        |  |      movea.l 24(sp),a0
    99d4:	|        |  |      move.l 8(a0),d0
    99d8:	|        |  |      move.l d0,d0
    99da:	|        |  |      movea.w d2,a0
    99dc:	|        |  |      suba.w d0,a0
    99de:	|        |  |      move.w a0,d0
    99e0:	|        |  |      subq.w #1,d0
    99e2:	|        |  |  ,-- bra.s 99ee <scaleSprite+0x240>
    99e4:	|        |  '--|-> movea.l 24(sp),a0
    99e8:	|        |     |   move.l 8(a0),d0
    99ec:	|        |     |   move.l d0,d0
    99ee:	|        |     '-> movea.w d1,a0
    99f0:	|        |         suba.w d0,a0
    99f2:	|        |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    99f6:	|        '-------> movea.l 28(sp),a0
    99fa:	|                  move.l 24(a0),d0
    99fe:	|                  move.l d0,d1
    9a00:	|                  movea.l 24(sp),a0
    9a04:	|                  move.l 12(a0),d0
    9a08:	|                  move.l d0,d0
    9a0a:	|                  sub.w d0,d1
    9a0c:	|                  move.w 8(sp),d0
    9a10:	|                  movea.w d1,a0
    9a12:	|                  adda.w d0,a0
    9a14:	|                  move.w a0,14(sp)
		x2 = x1 + single->width;
    9a18:	|                  movea.l 24(sp),a0
    9a1c:	|                  move.l (a0),d0
    9a1e:	|                  move.l d0,d0
    9a20:	|                  move.w 16(sp),d1
    9a24:	|                  add.w d0,d1
    9a26:	|                  move.w d1,12(sp)
		y2 = y1 + single->height;
    9a2a:	|                  movea.l 24(sp),a0
    9a2e:	|                  move.l 4(a0),d0
    9a32:	|                  move.l d0,d0
    9a34:	|                  movea.w 14(sp),a0
    9a38:	|                  adda.w d0,a0
    9a3a:	|                  move.w a0,10(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    9a3e:	'----------------> move.l 1c776 <input+0xa>,d1
    9a44:	                   moveq #0,d0
    9a46:	                   move.w 16(sp),d0
    9a4a:	                   cmp.l d1,d0
    9a4c:	            ,----- bgt.s 9a82 <scaleSprite+0x2d4>
    9a4e:	            |      move.l 1c776 <input+0xa>,d1
    9a54:	            |      moveq #0,d0
    9a56:	            |      move.w 12(sp),d0
    9a5a:	            |      cmp.l d1,d0
    9a5c:	            +----- blt.s 9a82 <scaleSprite+0x2d4>
    9a5e:	            |      move.l 1c77a <input+0xe>,d1
    9a64:	            |      moveq #0,d0
    9a66:	            |      move.w 14(sp),d0
    9a6a:	            |      cmp.l d1,d0
    9a6c:	            +----- bgt.s 9a82 <scaleSprite+0x2d4>
    9a6e:	            |      move.l 1c77a <input+0xe>,d1
    9a74:	            |      moveq #0,d0
    9a76:	            |      move.w 10(sp),d0
    9a7a:	            |      cmp.l d1,d0
    9a7c:	            +----- blt.s 9a82 <scaleSprite+0x2d4>
		return TRUE;
    9a7e:	            |      moveq #1,d0
    9a80:	            |  ,-- bra.s 9a84 <scaleSprite+0x2d6>
	}
	return FALSE;
    9a82:	            '--|-> clr.w d0
    9a84:	               '-> move.l (sp)+,d2
    9a86:	                   lea 16(sp),sp
    9a8a:	                   rts

00009a8c <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    9a8c:	    move.l 4(sp),d0
    9a90:	,-- bpl.s 9a94 <TF_abs+0x8>
    9a92:	|   neg.l d0
}
    9a94:	'-> rts

00009a96 <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    9a96:	             lea -28(sp),sp
    9a9a:	             move.l a6,-(sp)
    9a9c:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    9a9e:	             move.l #132,28(sp)
    9aa6:	             clr.l 24(sp)
    9aaa:	             move.l 1c7ba <SysBase>,d0
    9ab0:	             movea.l d0,a6
    9ab2:	             move.l 28(sp),d0
    9ab6:	             move.l 24(sp),d1
    9aba:	             jsr -684(a6)
    9abe:	             move.l d0,20(sp)
    9ac2:	             move.l 20(sp),d0
    9ac6:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    9aca:	         ,-- bne.s 9ad2 <addPerson+0x3c>
    9acc:	         |   clr.w d0
    9ace:	,--------|-- bra.w 9d02 <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    9ad2:	|        '-> move.l 48(sp),-(sp)
    9ad6:	|            jsr defa <loadObjectType>
    9adc:	|            addq.l #4,sp
    9ade:	|            movea.l 16(sp),a0
    9ae2:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    9ae6:	|            movea.l 16(sp),a0
    9aea:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    9af2:	|            movea.l 16(sp),a0
    9af6:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    9afa:	|            movea.l 16(sp),a0
    9afe:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    9b02:	|            move.l 44(sp),-(sp)
    9b06:	|            jsr 1881e <__floatsisf>
    9b0c:	|            addq.l #4,sp
    9b0e:	|            move.l d0,d2
    9b10:	|            move.l 40(sp),-(sp)
    9b14:	|            jsr 1881e <__floatsisf>
    9b1a:	|            addq.l #4,sp
    9b1c:	|            move.l d2,-(sp)
    9b1e:	|            move.l d0,-(sp)
    9b20:	|            move.l 24(sp),-(sp)
    9b24:	|            jsr b646 <moveAndScale>
    9b2a:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    9b2e:	|            movea.l 16(sp),a0
    9b32:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    9b36:	|            movea.l 16(sp),a0
    9b3a:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    9b40:	|            movea.l 16(sp),a0
    9b44:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    9b4a:	|            movea.l 16(sp),a0
    9b4e:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    9b52:	|            movea.l 16(sp),a0
    9b56:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    9b5a:	|            movea.l 16(sp),a0
    9b5e:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    9b64:	|            movea.l 16(sp),a0
    9b68:	|            clr.l 106(a0)
    newPerson->angle = 180;
    9b6c:	|            movea.l 16(sp),a0
    9b70:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    9b78:	|            movea.l 16(sp),a0
    9b7c:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    9b84:	|            movea.l 16(sp),a0
    9b88:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    9b8c:	|            movea.l 16(sp),a0
    9b90:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    9b94:	|            movea.l 16(sp),a0
    9b98:	|            movea.l 114(a0),a0
    9b9c:	|            move.l 24(a0),d0
    9ba0:	|            movea.l 16(sp),a0
    9ba4:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    9ba8:	|            movea.l 16(sp),a0
    9bac:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    9bb0:	|            movea.l 16(sp),a0
    9bb4:	|            movea.l 114(a0),a0
    9bb8:	|            move.l 32(a0),d0
    9bbc:	|            movea.l 16(sp),a0
    9bc0:	|            move.l d0,122(a0)
    newPerson->r = 0;
    9bc4:	|            movea.l 16(sp),a0
    9bc8:	|            clr.b 126(a0)
    newPerson->g = 0;
    9bcc:	|            movea.l 16(sp),a0
    9bd0:	|            clr.b 127(a0)
    newPerson->b = 0;
    9bd4:	|            movea.l 16(sp),a0
    9bd8:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    9bdc:	|            movea.l 16(sp),a0
    9be0:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    9be4:	|            movea.l 16(sp),a0
    9be8:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    9bec:	|            movea.l 16(sp),a0
    9bf0:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    9bf6:	|            clr.l -(sp)
    9bf8:	|            move.l 20(sp),-(sp)
    9bfc:	|            jsr 46c8 <setFrames>
    9c02:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    9c04:	|            movea.l 52(sp),a0
    9c08:	|            movea.l (a0),a0
    9c0a:	|            movea.l (a0),a0
    9c0c:	|            movea.l 4(a0),a0
    9c10:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    9c14:	|     ,----- bpl.s 9c1e <addPerson+0x188>
    9c16:	|     |      move.l 12(sp),d0
    9c1a:	|     |      neg.l d0
    9c1c:	|     |  ,-- bra.s 9c20 <addPerson+0x18a>
    9c1e:	|     '--|-> moveq #1,d0
    9c20:	|        '-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    9c24:	|            movea.l 52(sp),a0
    9c28:	|            movea.l (a0),a0
    9c2a:	|            movea.l (a0),a0
    9c2c:	|            movea.l (a0),a0
    9c2e:	|            move.l 8(a0),d0
    9c32:	|            cmp.l 8(sp),d0
    9c36:	|     ,----- bgt.s 9c68 <addPerson+0x1d2>
        if (fNumSigned < 0) {
    9c38:	|     |      tst.l 12(sp)
    9c3c:	|     |  ,-- bge.s 9c4a <addPerson+0x1b4>
            newPerson->height = 5;
    9c3e:	|     |  |   movea.l 16(sp),a0
    9c42:	|     |  |   moveq #5,d0
    9c44:	|     |  |   move.l d0,20(a0)
    9c48:	|  ,--|--|-- bra.s 9c94 <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    9c4a:	|  |  |  '-> movea.l 52(sp),a0
    9c4e:	|  |  |      movea.l (a0),a0
    9c50:	|  |  |      movea.l (a0),a0
    9c52:	|  |  |      movea.l (a0),a0
    9c54:	|  |  |      movea.l 16(a0),a0
    9c58:	|  |  |      move.l 12(a0),d0
    9c5c:	|  |  |      addq.l #5,d0
    9c5e:	|  |  |      movea.l 16(sp),a0
    9c62:	|  |  |      move.l d0,20(a0)
    9c66:	|  +--|----- bra.s 9c94 <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    9c68:	|  |  '----> movea.l 52(sp),a0
    9c6c:	|  |         movea.l (a0),a0
    9c6e:	|  |         movea.l (a0),a0
    9c70:	|  |         movea.l (a0),a0
    9c72:	|  |         movea.l 16(a0),a0
    9c76:	|  |         move.l 8(sp),d1
    9c7a:	|  |         move.l d1,d0
    9c7c:	|  |         lsl.l #3,d0
    9c7e:	|  |         sub.l d1,d0
    9c80:	|  |         add.l d0,d0
    9c82:	|  |         add.l d0,d0
    9c84:	|  |         adda.l d0,a0
    9c86:	|  |         move.l 12(a0),d0
    9c8a:	|  |         addq.l #5,d0
    9c8c:	|  |         movea.l 16(sp),a0
    9c90:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    9c94:	|  '-------> move.l #116762,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9c9c:	|        ,-- bra.s 9cac <addPerson+0x216>
        changethat = &((*changethat)->next);
    9c9e:	|     ,--|-> movea.l 32(sp),a0
    9ca2:	|     |  |   move.l (a0),d0
    9ca4:	|     |  |   moveq #36,d1
    9ca6:	|     |  |   add.l d0,d1
    9ca8:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9cac:	|     |  '-> movea.l 32(sp),a0
    9cb0:	|     |      move.l (a0),d0
    9cb2:	|     |  ,-- beq.s 9cda <addPerson+0x244>
    9cb4:	|     |  |   movea.l 32(sp),a0
    9cb8:	|     |  |   movea.l (a0),a0
    9cba:	|     |  |   move.l 4(a0),d2
    9cbe:	|     |  |   move.l 44(sp),-(sp)
    9cc2:	|     |  |   jsr 1881e <__floatsisf>
    9cc8:	|     |  |   addq.l #4,sp
    9cca:	|     |  |   move.l d0,-(sp)
    9ccc:	|     |  |   move.l d2,-(sp)
    9cce:	|     |  |   jsr 18a44 <__ltsf2>
    9cd4:	|     |  |   addq.l #8,sp
    9cd6:	|     |  |   tst.l d0
    9cd8:	|     '--|-- blt.s 9c9e <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    9cda:	|        '-> movea.l 32(sp),a0
    9cde:	|            move.l (a0),d0
    9ce0:	|            movea.l 16(sp),a0
    9ce4:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    9ce8:	|            movea.l 32(sp),a0
    9cec:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    9cf0:	|            movea.l 16(sp),a0
    9cf4:	|            move.l 114(a0),d0
    9cf8:	|            sne d0
    9cfa:	|            neg.b d0
    9cfc:	|            move.b d0,d0
    9cfe:	|            andi.w #255,d0
}
    9d02:	'----------> move.l (sp)+,d2
    9d04:	             movea.l (sp)+,a6
    9d06:	             lea 28(sp),sp
    9d0a:	             rts

00009d0c <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    9d0c:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    9d0e:	       move.l 8(sp),-(sp)
    9d12:	       jsr ae9c <findPerson>
    9d18:	       addq.l #4,sp
    9d1a:	       move.l d0,(sp)
    if (moveMe) {
    9d1c:	,----- beq.s 9d50 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    9d1e:	|      movea.l (sp),a0
    9d20:	|      move.l 68(a0),d0
    9d24:	|  ,-- beq.s 9d36 <animatePerson+0x2a>
    9d26:	|  |   movea.l (sp),a0
    9d28:	|  |   move.l 68(a0),d0
    9d2c:	|  |   move.l d0,-(sp)
    9d2e:	|  |   jsr 5526 <abortFunction>
    9d34:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    9d36:	|  '-> movea.l (sp),a0
    9d38:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    9d3c:	|      movea.l (sp),a0
    9d3e:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    9d42:	|      movea.l (sp),a0
    9d44:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    9d48:	|      movea.l (sp),a0
    9d4a:	|      move.l 12(sp),72(a0)
    }
}
    9d50:	'----> nop
    9d52:	       addq.l #4,sp
    9d54:	       rts

00009d56 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    9d56:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    9d58:	       move.l 8(sp),-(sp)
    9d5c:	       jsr ae9c <findPerson>
    9d62:	       addq.l #4,sp
    9d64:	       move.l d0,(sp)
    if (moveMe) {
    9d66:	,----- beq.s 9da8 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    9d68:	|      movea.l (sp),a0
    9d6a:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    9d6e:	|      movea.l (sp),a0
    9d70:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    9d76:	|      move.l (sp),-(sp)
    9d78:	|      jsr b7d4 <rethinkAngle>
    9d7e:	|      addq.l #4,sp
        if (moveMe->walking) {
    9d80:	|      movea.l (sp),a0
    9d82:	|      move.w 64(a0),d0
    9d86:	|  ,-- beq.s 9d9a <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    9d88:	|  |   pea 1 <_start+0x1>
    9d8c:	|  |   move.l 4(sp),-(sp)
    9d90:	|  |   jsr 46c8 <setFrames>
    9d96:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    9d98:	+--|-- bra.s 9da8 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    9d9a:	|  '-> clr.l -(sp)
    9d9c:	|      move.l 4(sp),-(sp)
    9da0:	|      jsr 46c8 <setFrames>
    9da6:	|      addq.l #8,sp
}
    9da8:	'----> nop
    9daa:	       addq.l #4,sp
    9dac:	       rts

00009dae <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    9dae:	             lea -36(sp),sp
    9db2:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    9db4:	             movea.l 44(sp),a0
    9db8:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    9dbe:	             moveq #12,d0
    9dc0:	             move.l d0,28(sp)
    9dc4:	             clr.l 24(sp)
    9dc8:	             move.l 1c7ba <SysBase>,d0
    9dce:	             movea.l d0,a6
    9dd0:	             move.l 28(sp),d0
    9dd4:	             move.l 24(sp),d1
    9dd8:	             jsr -684(a6)
    9ddc:	             move.l d0,20(sp)
    9de0:	             move.l 20(sp),d0
    9de4:	             move.l d0,16(sp)
	if (!(newAnim)) {
    9de8:	         ,-- bne.s 9dfe <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    9dea:	         |   pea 1a43b <PutChar+0x15ad>
    9df0:	         |   jsr 183ec <KPrintF>
    9df6:	         |   addq.l #4,sp
		return NULL;
    9df8:	         |   moveq #0,d0
    9dfa:	,--------|-- bra.w 9f50 <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    9dfe:	|        '-> movea.l 44(sp),a0
    9e02:	|            move.l (a0),d0
    9e04:	|            movea.l 16(sp),a0
    9e08:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    9e0a:	|            movea.l 16(sp),a0
    9e0e:	|            movea.l (a0),a0
    9e10:	|            move.l 4(a0),d0
    9e14:	|            addq.l #1,d0
    9e16:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    9e1a:	|            movea.l 16(sp),a0
    9e1e:	|            move.l 32(sp),8(a0)

	if (num) {
    9e24:	|  ,-------- beq.w 9f44 <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    9e28:	|  |         move.l 32(sp),d1
    9e2c:	|  |         move.l d1,d0
    9e2e:	|  |         add.l d0,d0
    9e30:	|  |         add.l d1,d0
    9e32:	|  |         add.l d0,d0
    9e34:	|  |         add.l d0,d0
    9e36:	|  |         move.l d0,12(sp)
    9e3a:	|  |         clr.l 8(sp)
    9e3e:	|  |         move.l 1c7ba <SysBase>,d0
    9e44:	|  |         movea.l d0,a6
    9e46:	|  |         move.l 12(sp),d0
    9e4a:	|  |         move.l 8(sp),d1
    9e4e:	|  |         jsr -684(a6)
    9e52:	|  |         move.l d0,4(sp)
    9e56:	|  |         move.l 4(sp),d0
    9e5a:	|  |         movea.l 16(sp),a0
    9e5e:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    9e62:	|  |         movea.l 16(sp),a0
    9e66:	|  |         move.l 4(a0),d0
    9e6a:	|  |     ,-- bne.s 9e80 <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    9e6c:	|  |     |   pea 1a43b <PutChar+0x15ad>
    9e72:	|  |     |   jsr 183ec <KPrintF>
    9e78:	|  |     |   addq.l #4,sp
			return NULL;
    9e7a:	|  |     |   moveq #0,d0
    9e7c:	+--|-----|-- bra.w 9f50 <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    9e80:	|  |     '-> clr.l 36(sp)
    9e84:	|  |     ,-- bra.w 9f36 <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    9e88:	|  |  ,--|-> movea.l 44(sp),a0
    9e8c:	|  |  |  |   movea.l 4(a0),a0
    9e90:	|  |  |  |   move.l 36(sp),d1
    9e94:	|  |  |  |   move.l d1,d0
    9e96:	|  |  |  |   add.l d0,d0
    9e98:	|  |  |  |   add.l d1,d0
    9e9a:	|  |  |  |   add.l d0,d0
    9e9c:	|  |  |  |   add.l d0,d0
    9e9e:	|  |  |  |   lea (0,a0,d0.l),a1
    9ea2:	|  |  |  |   movea.l 16(sp),a0
    9ea6:	|  |  |  |   movea.l 4(a0),a0
    9eaa:	|  |  |  |   move.l 36(sp),d1
    9eae:	|  |  |  |   move.l d1,d0
    9eb0:	|  |  |  |   add.l d0,d0
    9eb2:	|  |  |  |   add.l d1,d0
    9eb4:	|  |  |  |   add.l d0,d0
    9eb6:	|  |  |  |   add.l d0,d0
    9eb8:	|  |  |  |   adda.l d0,a0
    9eba:	|  |  |  |   move.l (a1),d0
    9ebc:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    9ebe:	|  |  |  |   movea.l 44(sp),a0
    9ec2:	|  |  |  |   movea.l 4(a0),a0
    9ec6:	|  |  |  |   move.l 36(sp),d1
    9eca:	|  |  |  |   move.l d1,d0
    9ecc:	|  |  |  |   add.l d0,d0
    9ece:	|  |  |  |   add.l d1,d0
    9ed0:	|  |  |  |   add.l d0,d0
    9ed2:	|  |  |  |   add.l d0,d0
    9ed4:	|  |  |  |   lea (0,a0,d0.l),a1
    9ed8:	|  |  |  |   movea.l 16(sp),a0
    9edc:	|  |  |  |   movea.l 4(a0),a0
    9ee0:	|  |  |  |   move.l 36(sp),d1
    9ee4:	|  |  |  |   move.l d1,d0
    9ee6:	|  |  |  |   add.l d0,d0
    9ee8:	|  |  |  |   add.l d1,d0
    9eea:	|  |  |  |   add.l d0,d0
    9eec:	|  |  |  |   add.l d0,d0
    9eee:	|  |  |  |   adda.l d0,a0
    9ef0:	|  |  |  |   move.l 4(a1),d0
    9ef4:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    9ef8:	|  |  |  |   movea.l 44(sp),a0
    9efc:	|  |  |  |   movea.l 4(a0),a0
    9f00:	|  |  |  |   move.l 36(sp),d1
    9f04:	|  |  |  |   move.l d1,d0
    9f06:	|  |  |  |   add.l d0,d0
    9f08:	|  |  |  |   add.l d1,d0
    9f0a:	|  |  |  |   add.l d0,d0
    9f0c:	|  |  |  |   add.l d0,d0
    9f0e:	|  |  |  |   lea (0,a0,d0.l),a1
    9f12:	|  |  |  |   movea.l 16(sp),a0
    9f16:	|  |  |  |   movea.l 4(a0),a0
    9f1a:	|  |  |  |   move.l 36(sp),d1
    9f1e:	|  |  |  |   move.l d1,d0
    9f20:	|  |  |  |   add.l d0,d0
    9f22:	|  |  |  |   add.l d1,d0
    9f24:	|  |  |  |   add.l d0,d0
    9f26:	|  |  |  |   add.l d0,d0
    9f28:	|  |  |  |   adda.l d0,a0
    9f2a:	|  |  |  |   move.l 8(a1),d0
    9f2e:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    9f32:	|  |  |  |   addq.l #1,36(sp)
    9f36:	|  |  |  '-> move.l 36(sp),d0
    9f3a:	|  |  |      cmp.l 32(sp),d0
    9f3e:	|  |  '----- blt.w 9e88 <copyAnim+0xda>
    9f42:	|  |     ,-- bra.s 9f4c <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    9f44:	|  '-----|-> movea.l 16(sp),a0
    9f48:	|        |   clr.l 4(a0)
	}

	return newAnim;
    9f4c:	|        '-> move.l 16(sp),d0
}
    9f50:	'----------> movea.l (sp)+,a6
    9f52:	             lea 36(sp),sp
    9f56:	             rts

00009f58 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    9f58:	                lea -44(sp),sp
    9f5c:	                move.l a6,-(sp)
    9f5e:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    9f60:	                moveq #12,d0
    9f62:	                move.l d0,40(sp)
    9f66:	                clr.l 36(sp)
    9f6a:	                move.l 1c7ba <SysBase>,d0
    9f70:	                movea.l d0,a6
    9f72:	                move.l 40(sp),d0
    9f76:	                move.l 36(sp),d1
    9f7a:	                jsr -684(a6)
    9f7e:	                move.l d0,32(sp)
    9f82:	                move.l 32(sp),d0
    9f86:	                move.l d0,28(sp)
	if( !newP) {
    9f8a:	            ,-- bne.s 9fa0 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9f8c:	            |   pea 1a45c <PutChar+0x15ce>
    9f92:	            |   jsr 183ec <KPrintF>
    9f98:	            |   addq.l #4,sp
		return NULL;
    9f9a:	            |   moveq #0,d0
    9f9c:	,-----------|-- bra.w a170 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    9fa0:	|           '-> movea.l 28(sp),a0
    9fa4:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    9faa:	|               move.l 56(sp),d1
    9fae:	|               move.l d1,d0
    9fb0:	|               add.l d0,d0
    9fb2:	|               add.l d1,d0
    9fb4:	|               add.l d0,d0
    9fb6:	|               add.l d0,d0
    9fb8:	|               move.l d0,24(sp)
    9fbc:	|               clr.l 20(sp)
    9fc0:	|               move.l 1c7ba <SysBase>,d0
    9fc6:	|               movea.l d0,a6
    9fc8:	|               move.l 24(sp),d0
    9fcc:	|               move.l 20(sp),d1
    9fd0:	|               jsr -684(a6)
    9fd4:	|               move.l d0,16(sp)
    9fd8:	|               move.l 16(sp),d0
    9fdc:	|               movea.l 28(sp),a0
    9fe0:	|               move.l d0,4(a0)
	if( !newP->frames) {
    9fe4:	|               movea.l 28(sp),a0
    9fe8:	|               move.l 4(a0),d0
    9fec:	|           ,-- bne.s a002 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9fee:	|           |   pea 1a45c <PutChar+0x15ce>
    9ff4:	|           |   jsr 183ec <KPrintF>
    9ffa:	|           |   addq.l #4,sp
		return NULL;
    9ffc:	|           |   moveq #0,d0
    9ffe:	+-----------|-- bra.w a170 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    a002:	|           '-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    a008:	|               movea.l 60(sp),a0
    a00c:	|               move.l (a0),44(sp)
	while (a) {
    a010:	|     ,-------- bra.w a164 <createPersonaAnim+0x20c>
		a --;
    a014:	|  ,--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    a018:	|  |  |         movea.l 28(sp),a0
    a01c:	|  |  |         movea.l 4(a0),a0
    a020:	|  |  |         move.l 48(sp),d1
    a024:	|  |  |         move.l d1,d0
    a026:	|  |  |         add.l d0,d0
    a028:	|  |  |         add.l d1,d0
    a02a:	|  |  |         add.l d0,d0
    a02c:	|  |  |         add.l d0,d0
    a02e:	|  |  |         adda.l d0,a0
    a030:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    a034:	|  |  |         movea.l 44(sp),a0
    a038:	|  |  |         move.l (a0),d0
    a03a:	|  |  |         moveq #5,d1
    a03c:	|  |  |         cmp.l d0,d1
    a03e:	|  |  |     ,-- bne.s a06a <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    a040:	|  |  |     |   movea.l 28(sp),a0
    a044:	|  |  |     |   movea.l 4(a0),a0
    a048:	|  |  |     |   move.l 48(sp),d1
    a04c:	|  |  |     |   move.l d1,d0
    a04e:	|  |  |     |   add.l d0,d0
    a050:	|  |  |     |   add.l d1,d0
    a052:	|  |  |     |   add.l d0,d0
    a054:	|  |  |     |   add.l d0,d0
    a056:	|  |  |     |   lea (0,a0,d0.l),a1
    a05a:	|  |  |     |   movea.l 44(sp),a0
    a05e:	|  |  |     |   move.l 4(a0),d0
    a062:	|  |  |     |   move.l d0,8(a1)
    a066:	|  |  |  ,--|-- bra.w a112 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    a06a:	|  |  |  |  '-> movea.l 44(sp),a0
    a06e:	|  |  |  |      move.l (a0),d0
    a070:	|  |  |  |      moveq #2,d1
    a072:	|  |  |  |      cmp.l d0,d1
    a074:	|  |  |  |  ,-- bne.s a0a0 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    a076:	|  |  |  |  |   movea.l 44(sp),a0
    a07a:	|  |  |  |  |   move.l 4(a0),d2
    a07e:	|  |  |  |  |   movea.l 28(sp),a0
    a082:	|  |  |  |  |   movea.l 4(a0),a0
    a086:	|  |  |  |  |   move.l 48(sp),d1
    a08a:	|  |  |  |  |   move.l d1,d0
    a08c:	|  |  |  |  |   add.l d0,d0
    a08e:	|  |  |  |  |   add.l d1,d0
    a090:	|  |  |  |  |   add.l d0,d0
    a092:	|  |  |  |  |   add.l d0,d0
    a094:	|  |  |  |  |   adda.l d0,a0
    a096:	|  |  |  |  |   move.l d2,d0
    a098:	|  |  |  |  |   neg.l d0
    a09a:	|  |  |  |  |   move.l d0,8(a0)
    a09e:	|  |  |  +--|-- bra.s a112 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    a0a0:	|  |  |  |  '-> movea.l 44(sp),a0
    a0a4:	|  |  |  |      move.l (a0),d0
    a0a6:	|  |  |  |      moveq #6,d1
    a0a8:	|  |  |  |      cmp.l d0,d1
    a0aa:	|  |  |  |  ,-- bne.s a0f2 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    a0ac:	|  |  |  |  |   movea.l 44(sp),a0
    a0b0:	|  |  |  |  |   movea.l 4(a0),a0
    a0b4:	|  |  |  |  |   move.l (a0),d0
    a0b6:	|  |  |  |  |   move.l d0,-(sp)
    a0b8:	|  |  |  |  |   pea 1 <_start+0x1>
    a0bc:	|  |  |  |  |   lea 20(sp),a0
    a0c0:	|  |  |  |  |   move.l a0,-(sp)
    a0c2:	|  |  |  |  |   jsr 1590c <getValueType>
    a0c8:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    a0cc:	|  |  |  |  |   movea.l 44(sp),a0
    a0d0:	|  |  |  |  |   movea.l 4(a0),a0
    a0d4:	|  |  |  |  |   movea.l (a0),a0
    a0d6:	|  |  |  |  |   move.l 8(a0),d0
    a0da:	|  |  |  |  |   move.l d0,-(sp)
    a0dc:	|  |  |  |  |   pea 1 <_start+0x1>
    a0e0:	|  |  |  |  |   lea 16(sp),a0
    a0e4:	|  |  |  |  |   move.l a0,-(sp)
    a0e6:	|  |  |  |  |   jsr 1590c <getValueType>
    a0ec:	|  |  |  |  |   lea 12(sp),sp
    a0f0:	|  |  |  +--|-- bra.s a112 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    a0f2:	|  |  |  |  '-> move.l 44(sp),d0
    a0f6:	|  |  |  |      move.l d0,-(sp)
    a0f8:	|  |  |  |      pea 1 <_start+0x1>
    a0fc:	|  |  |  |      lea 20(sp),a0
    a100:	|  |  |  |      move.l a0,-(sp)
    a102:	|  |  |  |      jsr 1590c <getValueType>
    a108:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    a10c:	|  |  |  |      moveq #1,d0
    a10e:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    a112:	|  |  |  '----> move.l 60(sp),-(sp)
    a116:	|  |  |         jsr 16290 <trimStack>
    a11c:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    a11e:	|  |  |         movea.l 28(sp),a0
    a122:	|  |  |         movea.l 4(a0),a0
    a126:	|  |  |         move.l 48(sp),d1
    a12a:	|  |  |         move.l d1,d0
    a12c:	|  |  |         add.l d0,d0
    a12e:	|  |  |         add.l d1,d0
    a130:	|  |  |         add.l d0,d0
    a132:	|  |  |         add.l d0,d0
    a134:	|  |  |         adda.l d0,a0
    a136:	|  |  |         move.l 12(sp),d0
    a13a:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    a13c:	|  |  |         movea.l 28(sp),a0
    a140:	|  |  |         movea.l 4(a0),a0
    a144:	|  |  |         move.l 48(sp),d1
    a148:	|  |  |         move.l d1,d0
    a14a:	|  |  |         add.l d0,d0
    a14c:	|  |  |         add.l d1,d0
    a14e:	|  |  |         add.l d0,d0
    a150:	|  |  |         add.l d0,d0
    a152:	|  |  |         adda.l d0,a0
    a154:	|  |  |         move.l 8(sp),d0
    a158:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    a15c:	|  |  |         movea.l 60(sp),a0
    a160:	|  |  |         move.l (a0),44(sp)
	while (a) {
    a164:	|  |  '-------> tst.l 48(sp)
    a168:	|  '----------- bne.w a014 <createPersonaAnim+0xbc>
	}

	return newP;
    a16c:	|               move.l 28(sp),d0
}
    a170:	'-------------> move.l (sp)+,d2
    a172:	                movea.l (sp)+,a6
    a174:	                lea 44(sp),sp
    a178:	                rts

0000a17a <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    a17a:	       lea -12(sp),sp
    a17e:	       move.l a6,-(sp)

	if(orig->theSprites)
    a180:	       movea.l 20(sp),a0
    a184:	       move.l (a0),d0
    a186:	   ,-- beq.s a1b0 <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    a188:	   |   movea.l 20(sp),a0
    a18c:	   |   movea.l (a0),a0
    a18e:	   |   move.l 4(a0),d0
    a192:	   |   subq.l #1,d0
    a194:	   |   move.l d0,4(a0)
    a198:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    a19e:	   +-- bne.s a1b0 <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    a1a0:	   |   movea.l 20(sp),a0
    a1a4:	   |   move.l (a0),d0
    a1a6:	   |   move.l d0,-(sp)
    a1a8:	   |   jsr 925e <forgetSpriteBank>
    a1ae:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    a1b0:	   '-> tst.l 20(sp)
    a1b4:	,----- beq.s a1f4 <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    a1b6:	|      movea.l 20(sp),a0
    a1ba:	|      move.l 8(a0),d0
    a1be:	|  ,-- beq.s a1da <deleteAnim+0x60>
			FreeVec( orig->frames);
    a1c0:	|  |   movea.l 20(sp),a0
    a1c4:	|  |   move.l 4(a0),8(sp)
    a1ca:	|  |   move.l 1c7ba <SysBase>,d0
    a1d0:	|  |   movea.l d0,a6
    a1d2:	|  |   movea.l 8(sp),a1
    a1d6:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    a1da:	|  '-> move.l 20(sp),4(sp)
    a1e0:	|      move.l 1c7ba <SysBase>,d0
    a1e6:	|      movea.l d0,a6
    a1e8:	|      movea.l 4(sp),a1
    a1ec:	|      jsr -690(a6)
		orig = NULL;
    a1f0:	|      clr.l 20(sp)
	}	
	
}
    a1f4:	'----> nop
    a1f6:	       movea.l (sp)+,a6
    a1f8:	       lea 12(sp),sp
    a1fc:	       rts

0000a1fe <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    a1fe:	          lea -124(sp),sp
    a202:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    a206:	          movea.l 152(sp),a0
    a20a:	          move.l 56(a0),d1
    a20e:	          movea.l 152(sp),a0
    a212:	          move.l 60(a0),d0
    a216:	          cmp.l d1,d0
    a218:	      ,-- bne.s a248 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    a21a:	      |   movea.l 152(sp),a0
    a21e:	      |   moveq #-1,d0
    a220:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    a224:	      |   movea.l 152(sp),a0
    a228:	      |   move.l 40(a0),d0
    a22c:	      |   movea.l 152(sp),a0
    a230:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    a234:	      |   movea.l 152(sp),a0
    a238:	      |   move.l 44(a0),d0
    a23c:	      |   movea.l 152(sp),a0
    a240:	      |   move.l d0,52(a0)
    a244:	   ,--|-- bra.w a7ae <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    a248:	   |  '-> movea.l 1c8d2 <currentFloor>,a0
    a24e:	   |      move.l 16(a0),d1
    a252:	   |      movea.l 152(sp),a0
    a256:	   |      move.l 56(a0),d0
    a25a:	   |      add.l d0,d0
    a25c:	   |      add.l d0,d0
    a25e:	   |      movea.l d1,a0
    a260:	   |      adda.l d0,a0
    a262:	   |      move.l (a0),d1
    a264:	   |      movea.l 152(sp),a0
    a268:	   |      move.l 60(a0),d0
    a26c:	   |      add.l d0,d0
    a26e:	   |      add.l d0,d0
    a270:	   |      movea.l d1,a0
    a272:	   |      adda.l d0,a0
    a274:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    a278:	   |      moveq #-1,d0
    a27a:	   |      cmp.l 144(sp),d0
    a27e:	   |  ,-- bne.s a286 <doBorderStuff+0x88>
    a280:	   |  |   clr.w d0
    a282:	,--|--|-- bra.w a8ae <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    a286:	|  |  '-> movea.l 1c8d2 <currentFloor>,a0
    a28c:	|  |      move.l 12(a0),d1
    a290:	|  |      move.l 144(sp),d0
    a294:	|  |      lsl.l #3,d0
    a296:	|  |      add.l d0,d1
    a298:	|  |      movea.l 1c8d2 <currentFloor>,a0
    a29e:	|  |      movea.l 12(a0),a1
    a2a2:	|  |      movea.l 152(sp),a0
    a2a6:	|  |      move.l 56(a0),d0
    a2aa:	|  |      lsl.l #3,d0
    a2ac:	|  |      add.l a1,d0
    a2ae:	|  |      lea 40(sp),a0
    a2b2:	|  |      move.l a0,-(sp)
    a2b4:	|  |      lea 48(sp),a0
    a2b8:	|  |      move.l a0,-(sp)
    a2ba:	|  |      move.l d1,-(sp)
    a2bc:	|  |      move.l d0,-(sp)
    a2be:	|  |      jsr 17652 <getMatchingCorners>
    a2c4:	|  |      lea 16(sp),sp
    a2c8:	|  |      tst.w d0
    a2ca:	|  |  ,-- bne.s a2e0 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    a2cc:	|  |  |   pea 1a486 <PutChar+0x15f8>
    a2d2:	|  |  |   jsr 183ec <KPrintF>
    a2d8:	|  |  |   addq.l #4,sp
            return FALSE;
    a2da:	|  |  |   clr.w d0
    a2dc:	+--|--|-- bra.w a8ae <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    a2e0:	|  |  '-> movea.l 152(sp),a0
    a2e4:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    a2ea:	|  |      movea.l 152(sp),a0
    a2ee:	|  |      move.l (a0),d0
    a2f0:	|  |      move.l d0,-(sp)
    a2f2:	|  |      jsr 187b6 <__fixsfsi>
    a2f8:	|  |      addq.l #4,sp
    a2fa:	|  |      move.l d0,140(sp)
    a2fe:	|  |      movea.l 152(sp),a0
    a302:	|  |      move.l 4(a0),d0
    a306:	|  |      move.l d0,-(sp)
    a308:	|  |      jsr 187b6 <__fixsfsi>
    a30e:	|  |      addq.l #4,sp
    a310:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    a314:	|  |      movea.l 152(sp),a0
    a318:	|  |      move.l 40(a0),132(sp)
    a31e:	|  |      movea.l 152(sp),a0
    a322:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    a328:	|  |      movea.l 1c8d2 <currentFloor>,a0
    a32e:	|  |      move.l 4(a0),d1
    a332:	|  |      move.l 44(sp),d0
    a336:	|  |      lsl.l #3,d0
    a338:	|  |      movea.l d1,a0
    a33a:	|  |      adda.l d0,a0
    a33c:	|  |      move.l (a0),124(sp)
    a340:	|  |      movea.l 1c8d2 <currentFloor>,a0
    a346:	|  |      move.l 4(a0),d1
    a34a:	|  |      move.l 44(sp),d0
    a34e:	|  |      lsl.l #3,d0
    a350:	|  |      movea.l d1,a0
    a352:	|  |      adda.l d0,a0
    a354:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    a35a:	|  |      movea.l 1c8d2 <currentFloor>,a0
    a360:	|  |      move.l 4(a0),d1
    a364:	|  |      move.l 40(sp),d0
    a368:	|  |      lsl.l #3,d0
    a36a:	|  |      movea.l d1,a0
    a36c:	|  |      adda.l d0,a0
    a36e:	|  |      move.l (a0),116(sp)
    a372:	|  |      movea.l 1c8d2 <currentFloor>,a0
    a378:	|  |      move.l 4(a0),d1
    a37c:	|  |      move.l 40(sp),d0
    a380:	|  |      lsl.l #3,d0
    a382:	|  |      movea.l d1,a0
    a384:	|  |      adda.l d0,a0
    a386:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    a38c:	|  |      move.l 140(sp),d0
    a390:	|  |      sub.l 132(sp),d0
    a394:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    a398:	|  |      move.l 136(sp),d0
    a39c:	|  |      sub.l 128(sp),d0
    a3a0:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    a3a4:	|  |      move.l 116(sp),d0
    a3a8:	|  |      sub.l 124(sp),d0
    a3ac:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    a3b0:	|  |      move.l 112(sp),d0
    a3b4:	|  |      sub.l 120(sp),d0
    a3b8:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    a3bc:	|  |      move.l 124(sp),d0
    a3c0:	|  |      sub.l 140(sp),d0
    a3c4:	|  |      move.l 104(sp),-(sp)
    a3c8:	|  |      move.l d0,-(sp)
    a3ca:	|  |      jsr 18d78 <__mulsi3>
    a3d0:	|  |      addq.l #8,sp
    a3d2:	|  |      move.l d0,d2
    a3d4:	|  |      move.l 120(sp),d0
    a3d8:	|  |      sub.l 136(sp),d0
    a3dc:	|  |      move.l 108(sp),-(sp)
    a3e0:	|  |      move.l d0,-(sp)
    a3e2:	|  |      jsr 18d78 <__mulsi3>
    a3e8:	|  |      addq.l #8,sp
    a3ea:	|  |      move.l d2,d1
    a3ec:	|  |      sub.l d0,d1
    a3ee:	|  |      move.l d1,-(sp)
    a3f0:	|  |      jsr 187de <__floatsidf>
    a3f6:	|  |      addq.l #4,sp
    a3f8:	|  |      move.l d0,32(sp)
    a3fc:	|  |      move.l d1,36(sp)
    a400:	|  |      move.l 32(sp),88(sp)
    a406:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    a40c:	|  |      move.l 96(sp),-(sp)
    a410:	|  |      move.l 112(sp),-(sp)
    a414:	|  |      jsr 18d78 <__mulsi3>
    a41a:	|  |      addq.l #8,sp
    a41c:	|  |      move.l d0,d2
    a41e:	|  |      move.l 100(sp),-(sp)
    a422:	|  |      move.l 108(sp),-(sp)
    a426:	|  |      jsr 18d78 <__mulsi3>
    a42c:	|  |      addq.l #8,sp
    a42e:	|  |      move.l d2,d1
    a430:	|  |      sub.l d0,d1
    a432:	|  |      move.l d1,-(sp)
    a434:	|  |      jsr 187de <__floatsidf>
    a43a:	|  |      addq.l #4,sp
    a43c:	|  |      move.l d1,-(sp)
    a43e:	|  |      move.l d0,-(sp)
    a440:	|  |      move.l 100(sp),-(sp)
    a444:	|  |      move.l 100(sp),-(sp)
    a448:	|  |      jsr 18672 <__divdf3>
    a44e:	|  |      lea 16(sp),sp
    a452:	|  |      move.l d0,24(sp)
    a456:	|  |      move.l d1,28(sp)
    a45a:	|  |      move.l 24(sp),88(sp)
    a460:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    a466:	|  |      clr.l -(sp)
    a468:	|  |      clr.l -(sp)
    a46a:	|  |      move.l 100(sp),-(sp)
    a46e:	|  |      move.l 100(sp),-(sp)
    a472:	|  |      jsr 1893c <__gtdf2>
    a478:	|  |      lea 16(sp),sp
    a47c:	|  |      tst.l d0
    a47e:	|  |  ,-- ble.w a556 <doBorderStuff+0x358>
    a482:	|  |  |   clr.l -(sp)
    a484:	|  |  |   move.l #1072693248,-(sp)
    a48a:	|  |  |   move.l 100(sp),-(sp)
    a48e:	|  |  |   move.l 100(sp),-(sp)
    a492:	|  |  |   jsr 189f6 <__ltdf2>
    a498:	|  |  |   lea 16(sp),sp
    a49c:	|  |  |   tst.l d0
    a49e:	|  |  +-- bge.w a556 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    a4a2:	|  |  |   move.l 124(sp),-(sp)
    a4a6:	|  |  |   jsr 187de <__floatsidf>
    a4ac:	|  |  |   addq.l #4,sp
    a4ae:	|  |  |   move.l d0,d2
    a4b0:	|  |  |   move.l d1,d3
    a4b2:	|  |  |   move.l 100(sp),-(sp)
    a4b6:	|  |  |   jsr 187de <__floatsidf>
    a4bc:	|  |  |   addq.l #4,sp
    a4be:	|  |  |   move.l 92(sp),-(sp)
    a4c2:	|  |  |   move.l 92(sp),-(sp)
    a4c6:	|  |  |   move.l d1,-(sp)
    a4c8:	|  |  |   move.l d0,-(sp)
    a4ca:	|  |  |   jsr 1886e <__muldf3>
    a4d0:	|  |  |   lea 16(sp),sp
    a4d4:	|  |  |   move.l d1,-(sp)
    a4d6:	|  |  |   move.l d0,-(sp)
    a4d8:	|  |  |   move.l d3,-(sp)
    a4da:	|  |  |   move.l d2,-(sp)
    a4dc:	|  |  |   jsr 18610 <__adddf3>
    a4e2:	|  |  |   lea 16(sp),sp
    a4e6:	|  |  |   move.l d1,-(sp)
    a4e8:	|  |  |   move.l d0,-(sp)
    a4ea:	|  |  |   jsr 18780 <__fixdfsi>
    a4f0:	|  |  |   addq.l #8,sp
    a4f2:	|  |  |   movea.l 152(sp),a0
    a4f6:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    a4fa:	|  |  |   move.l 120(sp),-(sp)
    a4fe:	|  |  |   jsr 187de <__floatsidf>
    a504:	|  |  |   addq.l #4,sp
    a506:	|  |  |   move.l d0,d2
    a508:	|  |  |   move.l d1,d3
    a50a:	|  |  |   move.l 96(sp),-(sp)
    a50e:	|  |  |   jsr 187de <__floatsidf>
    a514:	|  |  |   addq.l #4,sp
    a516:	|  |  |   move.l 92(sp),-(sp)
    a51a:	|  |  |   move.l 92(sp),-(sp)
    a51e:	|  |  |   move.l d1,-(sp)
    a520:	|  |  |   move.l d0,-(sp)
    a522:	|  |  |   jsr 1886e <__muldf3>
    a528:	|  |  |   lea 16(sp),sp
    a52c:	|  |  |   move.l d1,-(sp)
    a52e:	|  |  |   move.l d0,-(sp)
    a530:	|  |  |   move.l d3,-(sp)
    a532:	|  |  |   move.l d2,-(sp)
    a534:	|  |  |   jsr 18610 <__adddf3>
    a53a:	|  |  |   lea 16(sp),sp
    a53e:	|  |  |   move.l d1,-(sp)
    a540:	|  |  |   move.l d0,-(sp)
    a542:	|  |  |   jsr 18780 <__fixdfsi>
    a548:	|  |  |   addq.l #8,sp
    a54a:	|  |  |   movea.l 152(sp),a0
    a54e:	|  |  |   move.l d0,52(a0)
    a552:	|  +--|-- bra.w a7ae <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    a556:	|  |  '-> move.l 140(sp),d0
    a55a:	|  |      sub.l 124(sp),d0
    a55e:	|  |      move.l d0,84(sp)
    a562:	|  |      move.l 140(sp),d0
    a566:	|  |      sub.l 116(sp),d0
    a56a:	|  |      move.l d0,80(sp)
    a56e:	|  |      move.l 132(sp),d0
    a572:	|  |      sub.l 124(sp),d0
    a576:	|  |      move.l d0,76(sp)
    a57a:	|  |      move.l 132(sp),d0
    a57e:	|  |      sub.l 116(sp),d0
    a582:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    a586:	|  |      move.l 136(sp),d0
    a58a:	|  |      sub.l 120(sp),d0
    a58e:	|  |      move.l d0,68(sp)
    a592:	|  |      move.l 136(sp),d0
    a596:	|  |      sub.l 112(sp),d0
    a59a:	|  |      move.l d0,64(sp)
    a59e:	|  |      move.l 128(sp),d0
    a5a2:	|  |      sub.l 120(sp),d0
    a5a6:	|  |      move.l d0,60(sp)
    a5aa:	|  |      move.l 128(sp),d0
    a5ae:	|  |      sub.l 112(sp),d0
    a5b2:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    a5b6:	|  |      move.l 84(sp),-(sp)
    a5ba:	|  |      move.l 88(sp),-(sp)
    a5be:	|  |      jsr 18d78 <__mulsi3>
    a5c4:	|  |      addq.l #8,sp
    a5c6:	|  |      move.l d0,84(sp)
    a5ca:	|  |      move.l 80(sp),-(sp)
    a5ce:	|  |      move.l 84(sp),-(sp)
    a5d2:	|  |      jsr 18d78 <__mulsi3>
    a5d8:	|  |      addq.l #8,sp
    a5da:	|  |      move.l d0,80(sp)
    a5de:	|  |      move.l 76(sp),-(sp)
    a5e2:	|  |      move.l 80(sp),-(sp)
    a5e6:	|  |      jsr 18d78 <__mulsi3>
    a5ec:	|  |      addq.l #8,sp
    a5ee:	|  |      move.l d0,76(sp)
    a5f2:	|  |      move.l 72(sp),-(sp)
    a5f6:	|  |      move.l 76(sp),-(sp)
    a5fa:	|  |      jsr 18d78 <__mulsi3>
    a600:	|  |      addq.l #8,sp
    a602:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    a606:	|  |      move.l 68(sp),-(sp)
    a60a:	|  |      move.l 72(sp),-(sp)
    a60e:	|  |      jsr 18d78 <__mulsi3>
    a614:	|  |      addq.l #8,sp
    a616:	|  |      move.l d0,68(sp)
    a61a:	|  |      move.l 64(sp),-(sp)
    a61e:	|  |      move.l 68(sp),-(sp)
    a622:	|  |      jsr 18d78 <__mulsi3>
    a628:	|  |      addq.l #8,sp
    a62a:	|  |      move.l d0,64(sp)
    a62e:	|  |      move.l 60(sp),-(sp)
    a632:	|  |      move.l 64(sp),-(sp)
    a636:	|  |      jsr 18d78 <__mulsi3>
    a63c:	|  |      addq.l #8,sp
    a63e:	|  |      move.l d0,60(sp)
    a642:	|  |      move.l 56(sp),-(sp)
    a646:	|  |      move.l 60(sp),-(sp)
    a64a:	|  |      jsr 18d78 <__mulsi3>
    a650:	|  |      addq.l #8,sp
    a652:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    a656:	|  |      move.l 84(sp),-(sp)
    a65a:	|  |      jsr 187de <__floatsidf>
    a660:	|  |      addq.l #4,sp
    a662:	|  |      move.l d0,d2
    a664:	|  |      move.l d1,d3
    a666:	|  |      move.l 68(sp),-(sp)
    a66a:	|  |      jsr 187de <__floatsidf>
    a670:	|  |      addq.l #4,sp
    a672:	|  |      move.l d1,-(sp)
    a674:	|  |      move.l d0,-(sp)
    a676:	|  |      move.l d3,-(sp)
    a678:	|  |      move.l d2,-(sp)
    a67a:	|  |      jsr 18610 <__adddf3>
    a680:	|  |      lea 16(sp),sp
    a684:	|  |      move.l d1,-(sp)
    a686:	|  |      move.l d0,-(sp)
    a688:	|  |      jsr 18d2e <sqrt>
    a68e:	|  |      addq.l #8,sp
    a690:	|  |      move.l d0,d2
    a692:	|  |      move.l d1,d3
    a694:	|  |      move.l 76(sp),-(sp)
    a698:	|  |      jsr 187de <__floatsidf>
    a69e:	|  |      addq.l #4,sp
    a6a0:	|  |      move.l d0,d4
    a6a2:	|  |      move.l d1,d5
    a6a4:	|  |      move.l 60(sp),-(sp)
    a6a8:	|  |      jsr 187de <__floatsidf>
    a6ae:	|  |      addq.l #4,sp
    a6b0:	|  |      move.l d1,-(sp)
    a6b2:	|  |      move.l d0,-(sp)
    a6b4:	|  |      move.l d5,-(sp)
    a6b6:	|  |      move.l d4,-(sp)
    a6b8:	|  |      jsr 18610 <__adddf3>
    a6be:	|  |      lea 16(sp),sp
    a6c2:	|  |      move.l d1,-(sp)
    a6c4:	|  |      move.l d0,-(sp)
    a6c6:	|  |      jsr 18d2e <sqrt>
    a6cc:	|  |      addq.l #8,sp
    a6ce:	|  |      move.l d1,-(sp)
    a6d0:	|  |      move.l d0,-(sp)
    a6d2:	|  |      move.l d3,-(sp)
    a6d4:	|  |      move.l d2,-(sp)
    a6d6:	|  |      jsr 18610 <__adddf3>
    a6dc:	|  |      lea 16(sp),sp
    a6e0:	|  |      move.l d0,d2
    a6e2:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    a6e4:	|  |      move.l 80(sp),-(sp)
    a6e8:	|  |      jsr 187de <__floatsidf>
    a6ee:	|  |      addq.l #4,sp
    a6f0:	|  |      move.l d0,d4
    a6f2:	|  |      move.l d1,d5
    a6f4:	|  |      move.l 64(sp),-(sp)
    a6f8:	|  |      jsr 187de <__floatsidf>
    a6fe:	|  |      addq.l #4,sp
    a700:	|  |      move.l d1,-(sp)
    a702:	|  |      move.l d0,-(sp)
    a704:	|  |      move.l d5,-(sp)
    a706:	|  |      move.l d4,-(sp)
    a708:	|  |      jsr 18610 <__adddf3>
    a70e:	|  |      lea 16(sp),sp
    a712:	|  |      move.l d1,-(sp)
    a714:	|  |      move.l d0,-(sp)
    a716:	|  |      jsr 18d2e <sqrt>
    a71c:	|  |      addq.l #8,sp
    a71e:	|  |      move.l d0,d4
    a720:	|  |      move.l d1,d5
    a722:	|  |      move.l 72(sp),-(sp)
    a726:	|  |      jsr 187de <__floatsidf>
    a72c:	|  |      addq.l #4,sp
    a72e:	|  |      move.l d0,d6
    a730:	|  |      move.l d1,d7
    a732:	|  |      move.l 56(sp),-(sp)
    a736:	|  |      jsr 187de <__floatsidf>
    a73c:	|  |      addq.l #4,sp
    a73e:	|  |      move.l d1,-(sp)
    a740:	|  |      move.l d0,-(sp)
    a742:	|  |      move.l d7,-(sp)
    a744:	|  |      move.l d6,-(sp)
    a746:	|  |      jsr 18610 <__adddf3>
    a74c:	|  |      lea 16(sp),sp
    a750:	|  |      move.l d1,-(sp)
    a752:	|  |      move.l d0,-(sp)
    a754:	|  |      jsr 18d2e <sqrt>
    a75a:	|  |      addq.l #8,sp
    a75c:	|  |      move.l d1,-(sp)
    a75e:	|  |      move.l d0,-(sp)
    a760:	|  |      move.l d5,-(sp)
    a762:	|  |      move.l d4,-(sp)
    a764:	|  |      jsr 18610 <__adddf3>
    a76a:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    a76e:	|  |      move.l d1,-(sp)
    a770:	|  |      move.l d0,-(sp)
    a772:	|  |      move.l d3,-(sp)
    a774:	|  |      move.l d2,-(sp)
    a776:	|  |      jsr 189f6 <__ltdf2>
    a77c:	|  |      lea 16(sp),sp
    a780:	|  |      tst.l d0
    a782:	|  |  ,-- bge.s a79a <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    a784:	|  |  |   movea.l 152(sp),a0
    a788:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    a78e:	|  |  |   movea.l 152(sp),a0
    a792:	|  |  |   move.l 120(sp),52(a0)
    a798:	|  +--|-- bra.s a7ae <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    a79a:	|  |  '-> movea.l 152(sp),a0
    a79e:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    a7a4:	|  |      movea.l 152(sp),a0
    a7a8:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    a7ae:	|  '----> movea.l 152(sp),a0
    a7b2:	|         move.l 52(a0),d0
    a7b6:	|         move.l d0,-(sp)
    a7b8:	|         jsr 1881e <__floatsisf>
    a7be:	|         addq.l #4,sp
    a7c0:	|         move.l d0,d1
    a7c2:	|         movea.l 152(sp),a0
    a7c6:	|         move.l 4(a0),d0
    a7ca:	|         move.l d0,-(sp)
    a7cc:	|         move.l d1,-(sp)
    a7ce:	|         jsr 18b12 <__subsf3>
    a7d4:	|         addq.l #8,sp
    a7d6:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    a7da:	|         movea.l 152(sp),a0
    a7de:	|         move.l (a0),d2
    a7e0:	|         movea.l 152(sp),a0
    a7e4:	|         move.l 48(a0),d0
    a7e8:	|         move.l d0,-(sp)
    a7ea:	|         jsr 1881e <__floatsisf>
    a7f0:	|         addq.l #4,sp
    a7f2:	|         move.l d0,-(sp)
    a7f4:	|         move.l d2,-(sp)
    a7f6:	|         jsr 18b12 <__subsf3>
    a7fc:	|         addq.l #8,sp
    a7fe:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    a802:	|         clr.l -(sp)
    a804:	|         move.l 52(sp),-(sp)
    a808:	|         jsr 18a7a <__nesf2>
    a80e:	|         addq.l #8,sp
    a810:	|         tst.l d0
    a812:	|     ,-- bne.s a826 <doBorderStuff+0x628>
    a814:	|     |   clr.l -(sp)
    a816:	|     |   move.l 56(sp),-(sp)
    a81a:	|     |   jsr 18a7a <__nesf2>
    a820:	|     |   addq.l #8,sp
    a822:	|     |   tst.l d0
    a824:	|  ,--|-- beq.s a89c <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    a826:	|  |  '-> move.l 52(sp),d0
    a82a:	|  |      move.l d0,-(sp)
    a82c:	|  |      move.l d0,-(sp)
    a82e:	|  |      jsr 185da <__addsf3>
    a834:	|  |      addq.l #8,sp
    a836:	|  |      move.l d0,-(sp)
    a838:	|  |      move.l 52(sp),-(sp)
    a83c:	|  |      jsr 18b7e <atan2f>
    a842:	|  |      addq.l #8,sp
    a844:	|  |      move.l d0,-(sp)
    a846:	|  |      jsr 18740 <__extendsfdf2>
    a84c:	|  |      addq.l #4,sp
    a84e:	|  |      move.l #-1540411785,-(sp)
    a854:	|  |      move.l #1078765033,-(sp)
    a85a:	|  |      move.l d1,-(sp)
    a85c:	|  |      move.l d0,-(sp)
    a85e:	|  |      jsr 1886e <__muldf3>
    a864:	|  |      lea 16(sp),sp
    a868:	|  |      clr.l -(sp)
    a86a:	|  |      move.l #1080459264,-(sp)
    a870:	|  |      move.l d1,-(sp)
    a872:	|  |      move.l d0,-(sp)
    a874:	|  |      jsr 18610 <__adddf3>
    a87a:	|  |      lea 16(sp),sp
    a87e:	|  |      move.l d1,-(sp)
    a880:	|  |      move.l d0,-(sp)
    a882:	|  |      jsr 18780 <__fixdfsi>
    a888:	|  |      addq.l #8,sp
    a88a:	|  |      movea.l 152(sp),a0
    a88e:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    a892:	|  |      movea.l 152(sp),a0
    a896:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    a89c:	|  '----> pea 1 <_start+0x1>
    a8a0:	|         move.l 156(sp),-(sp)
    a8a4:	|         jsr 46c8 <setFrames>
    a8aa:	|         addq.l #8,sp
    return TRUE;
    a8ac:	|         moveq #1,d0
}
    a8ae:	'-------> movem.l (sp)+,d2-d7
    a8b2:	          lea 124(sp),sp
    a8b6:	          rts

0000a8b8 <drawPeople>:

void drawPeople () {
    a8b8:	                   lea -24(sp),sp
    a8bc:	                   move.l d2,-(sp)

	shufflePeople ();
    a8be:	                   jsr c3b6 <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    a8c4:	                   move.l 1c81a <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    a8cc:	                   clr.l 20(sp)
	overRegion = NULL;
    a8d0:	                   clr.l 1c8ca <overRegion>

	while (thisPerson) {
    a8d6:	   ,-------------- bra.w ae88 <drawPeople+0x5d0>
		if (thisPerson -> show) {
    a8da:	,--|-------------> movea.l 24(sp),a0
    a8de:	|  |               move.w 104(a0),d0
    a8e2:	|  |  ,----------- beq.w ac3c <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    a8e6:	|  |  |            movea.l 24(sp),a0
    a8ea:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    a8f0:	|  |  |            movea.l 24(sp),a0
    a8f4:	|  |  |            move.l 76(a0),d0
    a8f8:	|  |  |            cmp.l 20(sp),d0
    a8fc:	|  |  |  ,-------- beq.w aaca <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    a900:	|  |  |  |         movea.l 24(sp),a0
    a904:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    a908:	|  |  |  |         movea.l 24(sp),a0
    a90c:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    a912:	|  |  |  |         movea.l 24(sp),a0
    a916:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    a91a:	|  |  |  |         movea.l 20(sp),a0
    a91e:	|  |  |  |         movea.l 4(a0),a0
    a922:	|  |  |  |         move.l 4(a0),d0
    a926:	|  |  |  |         movea.l 24(sp),a0
    a92a:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a92e:	|  |  |  |         movea.l 20(sp),a0
    a932:	|  |  |  |         movea.l 4(a0),a1
    a936:	|  |  |  |         movea.l 24(sp),a0
    a93a:	|  |  |  |         move.l 84(a0),d0
    a93e:	|  |  |  |         move.l d0,d1
    a940:	|  |  |  |         move.l d1,d0
    a942:	|  |  |  |         add.l d0,d0
    a944:	|  |  |  |         add.l d1,d0
    a946:	|  |  |  |         add.l d0,d0
    a948:	|  |  |  |         add.l d0,d0
    a94a:	|  |  |  |         lea (0,a1,d0.l),a0
    a94e:	|  |  |  |         move.l 8(a0),d0
    a952:	|  |  |  |     ,-- ble.w a9f4 <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a956:	|  |  |  |     |   movea.l 20(sp),a0
    a95a:	|  |  |  |     |   movea.l 4(a0),a1
    a95e:	|  |  |  |     |   movea.l 24(sp),a0
    a962:	|  |  |  |     |   move.l 84(a0),d0
    a966:	|  |  |  |     |   move.l d0,d1
    a968:	|  |  |  |     |   move.l d1,d0
    a96a:	|  |  |  |     |   add.l d0,d0
    a96c:	|  |  |  |     |   add.l d1,d0
    a96e:	|  |  |  |     |   add.l d0,d0
    a970:	|  |  |  |     |   add.l d0,d0
    a972:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a976:	|  |  |  |     |   move.l 8(a0),d0
    a97a:	|  |  |  |     |   clr.l -(sp)
    a97c:	|  |  |  |     |   move.l d0,-(sp)
    a97e:	|  |  |  |     |   jsr daca <startSound>
    a984:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a986:	|  |  |  |     |   movea.l 24(sp),a0
    a98a:	|  |  |  |     |   move.l 84(a0),d0
    a98e:	|  |  |  |     |   addq.l #1,d0
    a990:	|  |  |  |     |   movea.l 24(sp),a0
    a994:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a998:	|  |  |  |     |   movea.l 24(sp),a0
    a99c:	|  |  |  |     |   move.l 84(a0),d0
    a9a0:	|  |  |  |     |   movea.l 24(sp),a0
    a9a4:	|  |  |  |     |   movea.l 72(a0),a0
    a9a8:	|  |  |  |     |   move.l 8(a0),d1
    a9ac:	|  |  |  |     |   move.l d1,-(sp)
    a9ae:	|  |  |  |     |   move.l d0,-(sp)
    a9b0:	|  |  |  |     |   jsr 18e24 <__modsi3>
    a9b6:	|  |  |  |     |   addq.l #8,sp
    a9b8:	|  |  |  |     |   movea.l 24(sp),a0
    a9bc:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a9c0:	|  |  |  |     |   movea.l 24(sp),a0
    a9c4:	|  |  |  |     |   movea.l 72(a0),a0
    a9c8:	|  |  |  |     |   movea.l 4(a0),a1
    a9cc:	|  |  |  |     |   movea.l 24(sp),a0
    a9d0:	|  |  |  |     |   move.l 84(a0),d0
    a9d4:	|  |  |  |     |   move.l d0,d1
    a9d6:	|  |  |  |     |   move.l d1,d0
    a9d8:	|  |  |  |     |   add.l d0,d0
    a9da:	|  |  |  |     |   add.l d1,d0
    a9dc:	|  |  |  |     |   add.l d0,d0
    a9de:	|  |  |  |     |   add.l d0,d0
    a9e0:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a9e4:	|  |  |  |     |   move.l 4(a0),d0
    a9e8:	|  |  |  |     |   movea.l 24(sp),a0
    a9ec:	|  |  |  |     |   move.l d0,88(a0)
    a9f0:	|  |  |  |  ,--|-- bra.w ab32 <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a9f4:	|  |  |  |  |  '-> movea.l 20(sp),a0
    a9f8:	|  |  |  |  |      movea.l 4(a0),a1
    a9fc:	|  |  |  |  |      movea.l 24(sp),a0
    aa00:	|  |  |  |  |      move.l 84(a0),d0
    aa04:	|  |  |  |  |      move.l d0,d1
    aa06:	|  |  |  |  |      move.l d1,d0
    aa08:	|  |  |  |  |      add.l d0,d0
    aa0a:	|  |  |  |  |      add.l d1,d0
    aa0c:	|  |  |  |  |      add.l d0,d0
    aa0e:	|  |  |  |  |      add.l d0,d0
    aa10:	|  |  |  |  |      lea (0,a1,d0.l),a0
    aa14:	|  |  |  |  |      move.l 8(a0),d0
    aa18:	|  |  |  |  +----- beq.w ab32 <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    aa1c:	|  |  |  |  |      movea.l 1c78a <noStack>,a1
    aa22:	|  |  |  |  |      movea.l 20(sp),a0
    aa26:	|  |  |  |  |      move.l 4(a0),d2
    aa2a:	|  |  |  |  |      movea.l 24(sp),a0
    aa2e:	|  |  |  |  |      move.l 84(a0),d0
    aa32:	|  |  |  |  |      move.l d0,d1
    aa34:	|  |  |  |  |      move.l d1,d0
    aa36:	|  |  |  |  |      add.l d0,d0
    aa38:	|  |  |  |  |      add.l d1,d0
    aa3a:	|  |  |  |  |      add.l d0,d0
    aa3c:	|  |  |  |  |      add.l d0,d0
    aa3e:	|  |  |  |  |      movea.l d2,a0
    aa40:	|  |  |  |  |      adda.l d0,a0
    aa42:	|  |  |  |  |      move.l 8(a0),d0
    aa46:	|  |  |  |  |      neg.l d0
    aa48:	|  |  |  |  |      pea 1 <_start+0x1>
    aa4c:	|  |  |  |  |      move.l a1,-(sp)
    aa4e:	|  |  |  |  |      clr.l -(sp)
    aa50:	|  |  |  |  |      clr.l -(sp)
    aa52:	|  |  |  |  |      move.l d0,-(sp)
    aa54:	|  |  |  |  |      jsr 7ca6 <startNewFunctionNum>
    aa5a:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    aa5e:	|  |  |  |  |      movea.l 24(sp),a0
    aa62:	|  |  |  |  |      move.l 84(a0),d0
    aa66:	|  |  |  |  |      addq.l #1,d0
    aa68:	|  |  |  |  |      movea.l 24(sp),a0
    aa6c:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    aa70:	|  |  |  |  |      movea.l 24(sp),a0
    aa74:	|  |  |  |  |      move.l 84(a0),d0
    aa78:	|  |  |  |  |      movea.l 24(sp),a0
    aa7c:	|  |  |  |  |      movea.l 72(a0),a0
    aa80:	|  |  |  |  |      move.l 8(a0),d1
    aa84:	|  |  |  |  |      move.l d1,-(sp)
    aa86:	|  |  |  |  |      move.l d0,-(sp)
    aa88:	|  |  |  |  |      jsr 18e24 <__modsi3>
    aa8e:	|  |  |  |  |      addq.l #8,sp
    aa90:	|  |  |  |  |      movea.l 24(sp),a0
    aa94:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    aa98:	|  |  |  |  |      movea.l 24(sp),a0
    aa9c:	|  |  |  |  |      movea.l 72(a0),a0
    aaa0:	|  |  |  |  |      movea.l 4(a0),a1
    aaa4:	|  |  |  |  |      movea.l 24(sp),a0
    aaa8:	|  |  |  |  |      move.l 84(a0),d0
    aaac:	|  |  |  |  |      move.l d0,d1
    aaae:	|  |  |  |  |      move.l d1,d0
    aab0:	|  |  |  |  |      add.l d0,d0
    aab2:	|  |  |  |  |      add.l d1,d0
    aab4:	|  |  |  |  |      add.l d0,d0
    aab6:	|  |  |  |  |      add.l d0,d0
    aab8:	|  |  |  |  |      lea (0,a1,d0.l),a0
    aabc:	|  |  |  |  |      move.l 4(a0),d0
    aac0:	|  |  |  |  |      movea.l 24(sp),a0
    aac4:	|  |  |  |  |      move.l d0,88(a0)
    aac8:	|  |  |  |  +----- bra.s ab32 <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    aaca:	|  |  |  '--|----> movea.l 24(sp),a0
    aace:	|  |  |     |      move.l (a0),d0
    aad0:	|  |  |     |      movea.l 24(sp),a0
    aad4:	|  |  |     |      move.l 8(a0),d1
    aad8:	|  |  |     |      move.l d1,-(sp)
    aada:	|  |  |     |      move.l d0,-(sp)
    aadc:	|  |  |     |      jsr 1870a <__eqsf2>
    aae2:	|  |  |     |      addq.l #8,sp
    aae4:	|  |  |     |      tst.l d0
    aae6:	|  |  |     |  ,-- bne.s ab2a <drawPeople+0x272>
    aae8:	|  |  |     |  |   movea.l 24(sp),a0
    aaec:	|  |  |     |  |   move.l 4(a0),d0
    aaf0:	|  |  |     |  |   movea.l 24(sp),a0
    aaf4:	|  |  |     |  |   move.l 12(a0),d1
    aaf8:	|  |  |     |  |   move.l d1,-(sp)
    aafa:	|  |  |     |  |   move.l d0,-(sp)
    aafc:	|  |  |     |  |   jsr 1870a <__eqsf2>
    ab02:	|  |  |     |  |   addq.l #8,sp
    ab04:	|  |  |     |  |   tst.l d0
    ab06:	|  |  |     |  +-- bne.s ab2a <drawPeople+0x272>
    ab08:	|  |  |     |  |   movea.l 20(sp),a0
    ab0c:	|  |  |     |  |   move.l 8(a0),d0
    ab10:	|  |  |     |  |   moveq #1,d1
    ab12:	|  |  |     |  |   cmp.l d0,d1
    ab14:	|  |  |     |  +-- bne.s ab2a <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    ab16:	|  |  |     |  |   movea.l 24(sp),a0
    ab1a:	|  |  |     |  |   move.l 16(a0),d0
    ab1e:	|  |  |     |  |   addq.l #1,d0
    ab20:	|  |  |     |  |   movea.l 24(sp),a0
    ab24:	|  |  |     |  |   move.l d0,16(a0)
    ab28:	|  |  |     +--|-- bra.s ab32 <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    ab2a:	|  |  |     |  '-> movea.l 24(sp),a0
    ab2e:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    ab32:	|  |  |     '----> movea.l 24(sp),a0
    ab36:	|  |  |            move.l (a0),d0
    ab38:	|  |  |            movea.l 24(sp),a0
    ab3c:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    ab40:	|  |  |            movea.l 24(sp),a0
    ab44:	|  |  |            move.l 4(a0),d0
    ab48:	|  |  |            movea.l 24(sp),a0
    ab4c:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    ab50:	|  |  |            movea.l 20(sp),a0
    ab54:	|  |  |            movea.l 4(a0),a1
    ab58:	|  |  |            movea.l 24(sp),a0
    ab5c:	|  |  |            move.l 84(a0),d0
    ab60:	|  |  |            move.l d0,d1
    ab62:	|  |  |            move.l d1,d0
    ab64:	|  |  |            add.l d0,d0
    ab66:	|  |  |            add.l d1,d0
    ab68:	|  |  |            add.l d0,d0
    ab6a:	|  |  |            add.l d0,d0
    ab6c:	|  |  |            lea (0,a1,d0.l),a0
    ab70:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    ab74:	|  |  |            move.l 8(sp),d0
    ab78:	|  |  |            add.l d0,d0
    ab7a:	|  |  |            subx.l d0,d0
    ab7c:	|  |  |            neg.l d0
    ab7e:	|  |  |            move.b d0,d0
    ab80:	|  |  |            move.b d0,d0
    ab82:	|  |  |            andi.l #255,d0
    ab88:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    ab8c:	|  |  |            move.l 8(sp),-(sp)
    ab90:	|  |  |            jsr 9a8c <TF_abs>
    ab96:	|  |  |            addq.l #4,sp
    ab98:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    ab9c:	|  |  |            movea.l 20(sp),a0
    aba0:	|  |  |            movea.l (a0),a0
    aba2:	|  |  |            move.l 8(a0),d0
    aba6:	|  |  |            cmp.l 12(sp),d0
    abaa:	|  |  |        ,-- bgt.s abba <drawPeople+0x302>
				fNum = 0;
    abac:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    abb0:	|  |  |        |   moveq #2,d0
    abb2:	|  |  |        |   sub.l 16(sp),d0
    abb6:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    abba:	|  |  |        '-> moveq #2,d1
    abbc:	|  |  |            cmp.l 16(sp),d1
    abc0:	|  |  +----------- beq.s ac3c <drawPeople+0x384>
				BOOL r = FALSE;
    abc2:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    abc6:	|  |  |            move.l 16(sp),d0
    abca:	|  |  |            movea.w d0,a0
    abcc:	|  |  |            movea.l 20(sp),a1
    abd0:	|  |  |            movea.l (a1),a1
    abd2:	|  |  |            movea.l 16(a1),a1
    abd6:	|  |  |            move.l 12(sp),d1
    abda:	|  |  |            move.l d1,d0
    abdc:	|  |  |            lsl.l #3,d0
    abde:	|  |  |            sub.l d1,d0
    abe0:	|  |  |            add.l d0,d0
    abe2:	|  |  |            add.l d0,d0
    abe4:	|  |  |            add.l a1,d0
    abe6:	|  |  |            move.l a0,-(sp)
    abe8:	|  |  |            move.l 28(sp),-(sp)
    abec:	|  |  |            move.l d0,-(sp)
    abee:	|  |  |            jsr 97ae <scaleSprite>
    abf4:	|  |  |            lea 12(sp),sp
    abf8:	|  |  |            move.w d0,6(sp)
				if (r) {
    abfc:	|  |  +----------- beq.s ac3c <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    abfe:	|  |  |            movea.l 24(sp),a0
    ac02:	|  |  |            movea.l 114(a0),a0
    ac06:	|  |  |            movea.l (a0),a0
    ac08:	|  |  |            move.b (a0),d0
    ac0a:	|  |  +----------- beq.s ac3c <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    ac0c:	|  |  |            move.l 1c83a <personRegion+0x1c>,d1
    ac12:	|  |  |            movea.l 24(sp),a0
    ac16:	|  |  |            move.l 114(a0),d0
    ac1a:	|  |  |            cmp.l d1,d0
    ac1c:	|  |  |        ,-- beq.s ac24 <drawPeople+0x36c>
    ac1e:	|  |  |        |   clr.l 1c782 <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    ac24:	|  |  |        '-> movea.l 24(sp),a0
    ac28:	|  |  |            move.l 114(a0),d0
    ac2c:	|  |  |            move.l d0,1c83a <personRegion+0x1c>
						overRegion = & personRegion;
    ac32:	|  |  |            move.l #116766,1c8ca <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    ac3c:	|  |  '----------> movea.l 24(sp),a0
    ac40:	|  |               move.l 88(a0),d0
    ac44:	|  |               subq.l #1,d0
    ac46:	|  |               movea.l 24(sp),a0
    ac4a:	|  |               move.l d0,88(a0)
    ac4e:	|  |               movea.l 24(sp),a0
    ac52:	|  |               move.l 88(a0),d0
    ac56:	|  |        ,----- bne.w ae7e <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    ac5a:	|  |        |      movea.l 24(sp),a0
    ac5e:	|  |        |      move.l 84(a0),d0
    ac62:	|  |        |      addq.l #1,d0
    ac64:	|  |        |      movea.l 24(sp),a0
    ac68:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    ac6c:	|  |        |      movea.l 24(sp),a0
    ac70:	|  |        |      move.l 84(a0),d0
    ac74:	|  |        |      movea.l 24(sp),a0
    ac78:	|  |        |      movea.l 72(a0),a0
    ac7c:	|  |        |      move.l 8(a0),d1
    ac80:	|  |        |      move.l d1,-(sp)
    ac82:	|  |        |      move.l d0,-(sp)
    ac84:	|  |        |      jsr 18e24 <__modsi3>
    ac8a:	|  |        |      addq.l #8,sp
    ac8c:	|  |        |      movea.l 24(sp),a0
    ac90:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    ac94:	|  |        |      movea.l 24(sp),a0
    ac98:	|  |        |      movea.l 72(a0),a0
    ac9c:	|  |        |      movea.l 4(a0),a1
    aca0:	|  |        |      movea.l 24(sp),a0
    aca4:	|  |        |      move.l 84(a0),d0
    aca8:	|  |        |      move.l d0,d1
    acaa:	|  |        |      move.l d1,d0
    acac:	|  |        |      add.l d0,d0
    acae:	|  |        |      add.l d1,d0
    acb0:	|  |        |      add.l d0,d0
    acb2:	|  |        |      add.l d0,d0
    acb4:	|  |        |      lea (0,a1,d0.l),a0
    acb8:	|  |        |      move.l 4(a0),d0
    acbc:	|  |        |      movea.l 24(sp),a0
    acc0:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    acc4:	|  |        |      movea.l 24(sp),a0
    acc8:	|  |        |      move.w 104(a0),d0
    accc:	|  |        +----- beq.w ae7e <drawPeople+0x5c6>
    acd0:	|  |        |      tst.l 20(sp)
    acd4:	|  |        +----- beq.w ae7e <drawPeople+0x5c6>
    acd8:	|  |        |      movea.l 20(sp),a0
    acdc:	|  |        |      move.l 4(a0),d0
    ace0:	|  |        +----- beq.w ae7e <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    ace4:	|  |        |      movea.l 20(sp),a0
    ace8:	|  |        |      movea.l 4(a0),a1
    acec:	|  |        |      movea.l 24(sp),a0
    acf0:	|  |        |      move.l 84(a0),d0
    acf4:	|  |        |      move.l d0,d1
    acf6:	|  |        |      move.l d1,d0
    acf8:	|  |        |      add.l d0,d0
    acfa:	|  |        |      add.l d1,d0
    acfc:	|  |        |      add.l d0,d0
    acfe:	|  |        |      add.l d0,d0
    ad00:	|  |        |      lea (0,a1,d0.l),a0
    ad04:	|  |        |      move.l 8(a0),d0
    ad08:	|  |        |  ,-- ble.w adaa <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    ad0c:	|  |        |  |   movea.l 20(sp),a0
    ad10:	|  |        |  |   movea.l 4(a0),a1
    ad14:	|  |        |  |   movea.l 24(sp),a0
    ad18:	|  |        |  |   move.l 84(a0),d0
    ad1c:	|  |        |  |   move.l d0,d1
    ad1e:	|  |        |  |   move.l d1,d0
    ad20:	|  |        |  |   add.l d0,d0
    ad22:	|  |        |  |   add.l d1,d0
    ad24:	|  |        |  |   add.l d0,d0
    ad26:	|  |        |  |   add.l d0,d0
    ad28:	|  |        |  |   lea (0,a1,d0.l),a0
    ad2c:	|  |        |  |   move.l 8(a0),d0
    ad30:	|  |        |  |   clr.l -(sp)
    ad32:	|  |        |  |   move.l d0,-(sp)
    ad34:	|  |        |  |   jsr daca <startSound>
    ad3a:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    ad3c:	|  |        |  |   movea.l 24(sp),a0
    ad40:	|  |        |  |   move.l 84(a0),d0
    ad44:	|  |        |  |   addq.l #1,d0
    ad46:	|  |        |  |   movea.l 24(sp),a0
    ad4a:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    ad4e:	|  |        |  |   movea.l 24(sp),a0
    ad52:	|  |        |  |   move.l 84(a0),d0
    ad56:	|  |        |  |   movea.l 24(sp),a0
    ad5a:	|  |        |  |   movea.l 72(a0),a0
    ad5e:	|  |        |  |   move.l 8(a0),d1
    ad62:	|  |        |  |   move.l d1,-(sp)
    ad64:	|  |        |  |   move.l d0,-(sp)
    ad66:	|  |        |  |   jsr 18e24 <__modsi3>
    ad6c:	|  |        |  |   addq.l #8,sp
    ad6e:	|  |        |  |   movea.l 24(sp),a0
    ad72:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    ad76:	|  |        |  |   movea.l 24(sp),a0
    ad7a:	|  |        |  |   movea.l 72(a0),a0
    ad7e:	|  |        |  |   movea.l 4(a0),a1
    ad82:	|  |        |  |   movea.l 24(sp),a0
    ad86:	|  |        |  |   move.l 84(a0),d0
    ad8a:	|  |        |  |   move.l d0,d1
    ad8c:	|  |        |  |   move.l d1,d0
    ad8e:	|  |        |  |   add.l d0,d0
    ad90:	|  |        |  |   add.l d1,d0
    ad92:	|  |        |  |   add.l d0,d0
    ad94:	|  |        |  |   add.l d0,d0
    ad96:	|  |        |  |   lea (0,a1,d0.l),a0
    ad9a:	|  |        |  |   move.l 4(a0),d0
    ad9e:	|  |        |  |   movea.l 24(sp),a0
    ada2:	|  |        |  |   move.l d0,88(a0)
    ada6:	|  |        +--|-- bra.w ae7e <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    adaa:	|  |        |  '-> movea.l 20(sp),a0
    adae:	|  |        |      movea.l 4(a0),a1
    adb2:	|  |        |      movea.l 24(sp),a0
    adb6:	|  |        |      move.l 84(a0),d0
    adba:	|  |        |      move.l d0,d1
    adbc:	|  |        |      move.l d1,d0
    adbe:	|  |        |      add.l d0,d0
    adc0:	|  |        |      add.l d1,d0
    adc2:	|  |        |      add.l d0,d0
    adc4:	|  |        |      add.l d0,d0
    adc6:	|  |        |      lea (0,a1,d0.l),a0
    adca:	|  |        |      move.l 8(a0),d0
    adce:	|  |        +----- beq.w ae7e <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    add2:	|  |        |      movea.l 1c78a <noStack>,a1
    add8:	|  |        |      movea.l 20(sp),a0
    addc:	|  |        |      move.l 4(a0),d2
    ade0:	|  |        |      movea.l 24(sp),a0
    ade4:	|  |        |      move.l 84(a0),d0
    ade8:	|  |        |      move.l d0,d1
    adea:	|  |        |      move.l d1,d0
    adec:	|  |        |      add.l d0,d0
    adee:	|  |        |      add.l d1,d0
    adf0:	|  |        |      add.l d0,d0
    adf2:	|  |        |      add.l d0,d0
    adf4:	|  |        |      movea.l d2,a0
    adf6:	|  |        |      adda.l d0,a0
    adf8:	|  |        |      move.l 8(a0),d0
    adfc:	|  |        |      neg.l d0
    adfe:	|  |        |      pea 1 <_start+0x1>
    ae02:	|  |        |      move.l a1,-(sp)
    ae04:	|  |        |      clr.l -(sp)
    ae06:	|  |        |      clr.l -(sp)
    ae08:	|  |        |      move.l d0,-(sp)
    ae0a:	|  |        |      jsr 7ca6 <startNewFunctionNum>
    ae10:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    ae14:	|  |        |      movea.l 24(sp),a0
    ae18:	|  |        |      move.l 84(a0),d0
    ae1c:	|  |        |      addq.l #1,d0
    ae1e:	|  |        |      movea.l 24(sp),a0
    ae22:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    ae26:	|  |        |      movea.l 24(sp),a0
    ae2a:	|  |        |      move.l 84(a0),d0
    ae2e:	|  |        |      movea.l 24(sp),a0
    ae32:	|  |        |      movea.l 72(a0),a0
    ae36:	|  |        |      move.l 8(a0),d1
    ae3a:	|  |        |      move.l d1,-(sp)
    ae3c:	|  |        |      move.l d0,-(sp)
    ae3e:	|  |        |      jsr 18e24 <__modsi3>
    ae44:	|  |        |      addq.l #8,sp
    ae46:	|  |        |      movea.l 24(sp),a0
    ae4a:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    ae4e:	|  |        |      movea.l 24(sp),a0
    ae52:	|  |        |      movea.l 72(a0),a0
    ae56:	|  |        |      movea.l 4(a0),a1
    ae5a:	|  |        |      movea.l 24(sp),a0
    ae5e:	|  |        |      move.l 84(a0),d0
    ae62:	|  |        |      move.l d0,d1
    ae64:	|  |        |      move.l d1,d0
    ae66:	|  |        |      add.l d0,d0
    ae68:	|  |        |      add.l d1,d0
    ae6a:	|  |        |      add.l d0,d0
    ae6c:	|  |        |      add.l d0,d0
    ae6e:	|  |        |      lea (0,a1,d0.l),a0
    ae72:	|  |        |      move.l 4(a0),d0
    ae76:	|  |        |      movea.l 24(sp),a0
    ae7a:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    ae7e:	|  |        '----> movea.l 24(sp),a0
    ae82:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    ae88:	|  '-------------> tst.l 24(sp)
    ae8c:	'----------------- bne.w a8da <drawPeople+0x22>
	}
}
    ae90:	                   nop
    ae92:	                   nop
    ae94:	                   move.l (sp)+,d2
    ae96:	                   lea 24(sp),sp
    ae9a:	                   rts

0000ae9c <findPerson>:


struct onScreenPerson * findPerson (int v) {
    ae9c:	          subq.l #4,sp
	KPrintF("findPerson started\n");
    ae9e:	          pea 1a49e <PutChar+0x1610>
    aea4:	          jsr 183ec <KPrintF>
    aeaa:	          addq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    aeac:	          move.l 1c81a <allPeople>,(sp)
	while (thisPerson) {
    aeb2:	      ,-- bra.s aeca <findPerson+0x2e>
		if (v == thisPerson -> thisType -> objectNum) break;
    aeb4:	,-----|-> movea.l (sp),a0
    aeb6:	|     |   movea.l 114(a0),a0
    aeba:	|     |   move.l 4(a0),d0
    aebe:	|     |   cmp.l 8(sp),d0
    aec2:	|  ,--|-- beq.s aed0 <findPerson+0x34>
		thisPerson = thisPerson -> next;
    aec4:	|  |  |   movea.l (sp),a0
    aec6:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    aeca:	|  |  '-> tst.l (sp)
    aecc:	'--|----- bne.s aeb4 <findPerson+0x18>
    aece:	   |  ,-- bra.s aed2 <findPerson+0x36>
		if (v == thisPerson -> thisType -> objectNum) break;
    aed0:	   '--|-> nop
	}
	KPrintF("findPerson complete\n");
    aed2:	      '-> pea 1a4b2 <PutChar+0x1624>
    aed8:	          jsr 183ec <KPrintF>
    aede:	          addq.l #4,sp
	return thisPerson;
    aee0:	          move.l (sp),d0
}
    aee2:	          addq.l #4,sp
    aee4:	          rts

0000aee6 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    aee6:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    aee8:	       move.l 12(sp),-(sp)
    aeec:	       jsr ae9c <findPerson>
    aef2:	       addq.l #4,sp
    aef4:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    aef6:	   ,-- bne.s aefc <floatCharacter+0x16>
    aef8:	   |   clr.w d0
    aefa:	,--|-- bra.s af06 <floatCharacter+0x20>
	moveMe -> floaty = f;
    aefc:	|  '-> movea.l (sp),a0
    aefe:	|      move.l 8(sp),24(a0)
	return TRUE;
    af04:	|      moveq #1,d0
}
    af06:	'----> addq.l #4,sp
    af08:	       rts

0000af0a <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    af0a:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    af0c:	          tst.l 8(sp)
    af10:	      ,-- bne.s af1e <forceWalkingPerson+0x14>
    af12:	      |   tst.l 12(sp)
    af16:	      +-- bne.s af1e <forceWalkingPerson+0x14>
    af18:	      |   clr.w d0
    af1a:	,-----|-- bra.w afb0 <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    af1e:	|     '-> move.l 16(sp),-(sp)
    af22:	|         jsr ae9c <findPerson>
    af28:	|         addq.l #4,sp
    af2a:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    af2c:	|     ,-- bne.s af32 <forceWalkingPerson+0x28>
    af2e:	|     |   clr.w d0
    af30:	+-----|-- bra.s afb0 <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    af32:	|     '-> movea.l (sp),a0
    af34:	|         move.l 68(a0),d0
    af38:	|     ,-- beq.s af4a <forceWalkingPerson+0x40>
    af3a:	|     |   movea.l (sp),a0
    af3c:	|     |   move.l 68(a0),d0
    af40:	|     |   move.l d0,-(sp)
    af42:	|     |   jsr 5526 <abortFunction>
    af48:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    af4a:	|     '-> movea.l (sp),a0
    af4c:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    af52:	|         movea.l (sp),a0
    af54:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    af58:	|         movea.l (sp),a0
    af5a:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    af60:	|         movea.l (sp),a0
    af62:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    af68:	|         movea.l (sp),a0
    af6a:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    af70:	|         movea.l (sp),a0
    af72:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    af76:	|         movea.l (sp),a0
    af78:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    af7c:	|         move.l (sp),-(sp)
    af7e:	|         jsr a1fe <doBorderStuff>
    af84:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    af86:	|         pea 1 <_start+0x1>
    af8a:	|         move.l 4(sp),-(sp)
    af8e:	|         jsr c844 <walkMe>
    af94:	|         addq.l #8,sp
    af96:	|         tst.w d0
    af98:	|     ,-- bne.s afa2 <forceWalkingPerson+0x98>
    af9a:	|     |   movea.l (sp),a0
    af9c:	|     |   move.w 66(a0),d0
    afa0:	|  ,--|-- beq.s afae <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    afa2:	|  |  '-> movea.l (sp),a0
    afa4:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    afaa:	|  |      moveq #1,d0
    afac:	+--|----- bra.s afb0 <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    afae:	|  '----> clr.w d0
    }
}
    afb0:	'-------> addq.l #4,sp
    afb2:	          rts

0000afb4 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    afb4:	                lea -56(sp),sp
    afb8:	                move.l d2,-(sp)
	KPrintF("handleClosestPoint started\n");
    afba:	                pea 1a4c7 <PutChar+0x1639>
    afc0:	                jsr 183ec <KPrintF>
    afc6:	                addq.l #4,sp
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    afc8:	                move.l #320,56(sp)
    afd0:	                move.l #200,52(sp)
    afd8:	                moveq #-1,d0
    afda:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    afde:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    afe6:	                clr.l 44(sp)
    afea:	   ,----------- bra.w b1c2 <handleClosestPoint+0x20e>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    afee:	,--|----------> movea.l 1c8d2 <currentFloor>,a0
    aff4:	|  |            move.l 12(a0),d1
    aff8:	|  |            move.l 44(sp),d0
    affc:	|  |            lsl.l #3,d0
    affe:	|  |            movea.l d1,a0
    b000:	|  |            adda.l d0,a0
    b002:	|  |            move.l (a0),d0
    b004:	|  |            move.l d0,d1
    b006:	|  |            subq.l #1,d1
    b008:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    b00c:	|  |            clr.l 40(sp)
    b010:	|  |     ,----- bra.w b1a0 <handleClosestPoint+0x1ec>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    b014:	|  |  ,--|----> movea.l 1c8d2 <currentFloor>,a0
    b01a:	|  |  |  |      move.l 4(a0),d1
    b01e:	|  |  |  |      movea.l 1c8d2 <currentFloor>,a0
    b024:	|  |  |  |      movea.l 12(a0),a0
    b028:	|  |  |  |      move.l 44(sp),d0
    b02c:	|  |  |  |      lsl.l #3,d0
    b02e:	|  |  |  |      adda.l d0,a0
    b030:	|  |  |  |      movea.l 4(a0),a0
    b034:	|  |  |  |      move.l 40(sp),d0
    b038:	|  |  |  |      add.l d0,d0
    b03a:	|  |  |  |      add.l d0,d0
    b03c:	|  |  |  |      adda.l d0,a0
    b03e:	|  |  |  |      move.l (a0),d0
    b040:	|  |  |  |      lsl.l #3,d0
    b042:	|  |  |  |      movea.l d1,a0
    b044:	|  |  |  |      adda.l d0,a0
    b046:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    b04a:	|  |  |  |      movea.l 1c8d2 <currentFloor>,a0
    b050:	|  |  |  |      move.l 4(a0),d1
    b054:	|  |  |  |      movea.l 1c8d2 <currentFloor>,a0
    b05a:	|  |  |  |      movea.l 12(a0),a0
    b05e:	|  |  |  |      move.l 44(sp),d0
    b062:	|  |  |  |      lsl.l #3,d0
    b064:	|  |  |  |      adda.l d0,a0
    b066:	|  |  |  |      movea.l 4(a0),a0
    b06a:	|  |  |  |      move.l 40(sp),d0
    b06e:	|  |  |  |      add.l d0,d0
    b070:	|  |  |  |      add.l d0,d0
    b072:	|  |  |  |      adda.l d0,a0
    b074:	|  |  |  |      move.l (a0),d0
    b076:	|  |  |  |      lsl.l #3,d0
    b078:	|  |  |  |      movea.l d1,a0
    b07a:	|  |  |  |      adda.l d0,a0
    b07c:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    b082:	|  |  |  |      movea.l 1c8d2 <currentFloor>,a0
    b088:	|  |  |  |      move.l 4(a0),d1
    b08c:	|  |  |  |      movea.l 1c8d2 <currentFloor>,a0
    b092:	|  |  |  |      movea.l 12(a0),a0
    b096:	|  |  |  |      move.l 44(sp),d0
    b09a:	|  |  |  |      lsl.l #3,d0
    b09c:	|  |  |  |      adda.l d0,a0
    b09e:	|  |  |  |      movea.l 4(a0),a0
    b0a2:	|  |  |  |      move.l 36(sp),d0
    b0a6:	|  |  |  |      add.l d0,d0
    b0a8:	|  |  |  |      add.l d0,d0
    b0aa:	|  |  |  |      adda.l d0,a0
    b0ac:	|  |  |  |      move.l (a0),d0
    b0ae:	|  |  |  |      lsl.l #3,d0
    b0b0:	|  |  |  |      movea.l d1,a0
    b0b2:	|  |  |  |      adda.l d0,a0
    b0b4:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    b0b8:	|  |  |  |      movea.l 1c8d2 <currentFloor>,a0
    b0be:	|  |  |  |      move.l 4(a0),d1
    b0c2:	|  |  |  |      movea.l 1c8d2 <currentFloor>,a0
    b0c8:	|  |  |  |      movea.l 12(a0),a0
    b0cc:	|  |  |  |      move.l 44(sp),d0
    b0d0:	|  |  |  |      lsl.l #3,d0
    b0d2:	|  |  |  |      adda.l d0,a0
    b0d4:	|  |  |  |      movea.l 4(a0),a0
    b0d8:	|  |  |  |      move.l 36(sp),d0
    b0dc:	|  |  |  |      add.l d0,d0
    b0de:	|  |  |  |      add.l d0,d0
    b0e0:	|  |  |  |      adda.l d0,a0
    b0e2:	|  |  |  |      move.l (a0),d0
    b0e4:	|  |  |  |      lsl.l #3,d0
    b0e6:	|  |  |  |      movea.l d1,a0
    b0e8:	|  |  |  |      adda.l d0,a0
    b0ea:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    b0f0:	|  |  |  |      movea.l 68(sp),a0
    b0f4:	|  |  |  |      move.l (a0),d1
    b0f6:	|  |  |  |      movea.l 64(sp),a0
    b0fa:	|  |  |  |      move.l (a0),d0
    b0fc:	|  |  |  |      move.l d1,-(sp)
    b0fe:	|  |  |  |      move.l d0,-(sp)
    b100:	|  |  |  |      move.l 24(sp),-(sp)
    b104:	|  |  |  |      move.l 32(sp),-(sp)
    b108:	|  |  |  |      move.l 40(sp),-(sp)
    b10c:	|  |  |  |      move.l 48(sp),-(sp)
    b110:	|  |  |  |      lea 28(sp),a0
    b114:	|  |  |  |      move.l a0,-(sp)
    b116:	|  |  |  |      lea 36(sp),a0
    b11a:	|  |  |  |      move.l a0,-(sp)
    b11c:	|  |  |  |      jsr 171ea <closestPointOnLine>
    b122:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    b126:	|  |  |  |      movea.l 64(sp),a0
    b12a:	|  |  |  |      move.l (a0),d0
    b12c:	|  |  |  |      move.l 8(sp),d1
    b130:	|  |  |  |      move.l d0,d2
    b132:	|  |  |  |      sub.l d1,d2
    b134:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    b138:	|  |  |  |      movea.l 68(sp),a0
    b13c:	|  |  |  |      move.l (a0),d0
    b13e:	|  |  |  |      move.l 4(sp),d1
    b142:	|  |  |  |      move.l d0,d2
    b144:	|  |  |  |      sub.l d1,d2
    b146:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    b14a:	|  |  |  |      move.l 28(sp),-(sp)
    b14e:	|  |  |  |      move.l 32(sp),-(sp)
    b152:	|  |  |  |      jsr 18d78 <__mulsi3>
    b158:	|  |  |  |      addq.l #8,sp
    b15a:	|  |  |  |      move.l d0,d2
    b15c:	|  |  |  |      move.l 24(sp),-(sp)
    b160:	|  |  |  |      move.l 28(sp),-(sp)
    b164:	|  |  |  |      jsr 18d78 <__mulsi3>
    b16a:	|  |  |  |      addq.l #8,sp
    b16c:	|  |  |  |      move.l d2,d1
    b16e:	|  |  |  |      add.l d0,d1
    b170:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    b174:	|  |  |  |      move.l 12(sp),d2
    b178:	|  |  |  |      cmp.l 32(sp),d2
    b17c:	|  |  |  |  ,-- bge.s b196 <handleClosestPoint+0x1e2>

				currentDistance = thisDistance;
    b17e:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    b184:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    b18a:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    b190:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    b196:	|  |  |  |  '-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    b19c:	|  |  |  |      addq.l #1,40(sp)
    b1a0:	|  |  |  '----> movea.l 1c8d2 <currentFloor>,a0
    b1a6:	|  |  |         move.l 12(a0),d1
    b1aa:	|  |  |         move.l 44(sp),d0
    b1ae:	|  |  |         lsl.l #3,d0
    b1b0:	|  |  |         movea.l d1,a0
    b1b2:	|  |  |         adda.l d0,a0
    b1b4:	|  |  |         move.l (a0),d0
    b1b6:	|  |  |         cmp.l 40(sp),d0
    b1ba:	|  |  '-------- bgt.w b014 <handleClosestPoint+0x60>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    b1be:	|  |            addq.l #1,44(sp)
    b1c2:	|  '----------> movea.l 1c8d2 <currentFloor>,a0
    b1c8:	|               move.l 8(a0),d0
    b1cc:	|               cmp.l 44(sp),d0
    b1d0:	'-------------- bgt.w afee <handleClosestPoint+0x3a>
		}
	}

	if (gotPoly == -1) return FALSE;
    b1d4:	                moveq #-1,d0
    b1d6:	                cmp.l 48(sp),d0
    b1da:	            ,-- bne.s b1e0 <handleClosestPoint+0x22c>
    b1dc:	            |   clr.w d0
    b1de:	         ,--|-- bra.s b1fa <handleClosestPoint+0x246>
	*setX = gotX;
    b1e0:	         |  '-> movea.l 64(sp),a0
    b1e4:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    b1e8:	         |      movea.l 68(sp),a0
    b1ec:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    b1f0:	         |      movea.l 72(sp),a0
    b1f4:	         |      move.l 48(sp),(a0)

	return TRUE;
    b1f8:	         |      moveq #1,d0
}
    b1fa:	         '----> move.l (sp)+,d2
    b1fc:	                lea 56(sp),sp
    b200:	                rts

0000b202 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    b202:	clr.l 1c82e <personRegion+0x10>
	personRegion.sY = 0;
    b208:	clr.l 1c832 <personRegion+0x14>
	personRegion.di = -1;
    b20e:	moveq #-1,d0
    b210:	move.l d0,1c836 <personRegion+0x18>
	allScreenRegions = NULL;
    b216:	clr.l 1c8c6 <allScreenRegions>

	return TRUE;
    b21c:	moveq #1,d0
}
    b21e:	rts

0000b220 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    b220:	          subq.l #4,sp
    b222:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    b224:	          tst.l 12(sp)
    b228:	      ,-- bne.s b230 <jumpPerson+0x10>
    b22a:	      |   tst.l 16(sp)
    b22e:	,-----|-- beq.s b2a4 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    b230:	|     '-> move.l 20(sp),-(sp)
    b234:	|         jsr ae9c <findPerson>
    b23a:	|         addq.l #4,sp
    b23c:	|         move.l d0,4(sp)
    if (!moveMe) return;
    b240:	|  ,----- beq.s b2a8 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    b242:	|  |      movea.l 4(sp),a0
    b246:	|  |      move.l 68(a0),d0
    b24a:	|  |  ,-- beq.s b25e <jumpPerson+0x3e>
    b24c:	|  |  |   movea.l 4(sp),a0
    b250:	|  |  |   move.l 68(a0),d0
    b254:	|  |  |   move.l d0,-(sp)
    b256:	|  |  |   jsr 5526 <abortFunction>
    b25c:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    b25e:	|  |  '-> movea.l 4(sp),a0
    b262:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    b266:	|  |      movea.l 4(sp),a0
    b26a:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    b26e:	|  |      movea.l 4(sp),a0
    b272:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    b276:	|  |      move.l 16(sp),-(sp)
    b27a:	|  |      jsr 1881e <__floatsisf>
    b280:	|  |      addq.l #4,sp
    b282:	|  |      move.l d0,d2
    b284:	|  |      move.l 12(sp),-(sp)
    b288:	|  |      jsr 1881e <__floatsisf>
    b28e:	|  |      addq.l #4,sp
    b290:	|  |      move.l d2,-(sp)
    b292:	|  |      move.l d0,-(sp)
    b294:	|  |      move.l 12(sp),-(sp)
    b298:	|  |      jsr b646 <moveAndScale>
    b29e:	|  |      lea 12(sp),sp
    b2a2:	|  |  ,-- bra.s b2aa <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    b2a4:	'--|--|-> nop
    b2a6:	   |  +-- bra.s b2aa <jumpPerson+0x8a>
    if (!moveMe) return;
    b2a8:	   '--|-> nop
}
    b2aa:	      '-> move.l (sp)+,d2
    b2ac:	          addq.l #4,sp
    b2ae:	          rts

0000b2b0 <killAllPeople>:


void killAllPeople () {
    b2b0:	          subq.l #8,sp
    b2b2:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    b2b4:	   ,----- bra.s b320 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    b2b6:	,--|----> movea.l 1c81a <allPeople>,a0
    b2bc:	|  |      move.l 68(a0),d0
    b2c0:	|  |  ,-- beq.s b2d6 <killAllPeople+0x26>
    b2c2:	|  |  |   movea.l 1c81a <allPeople>,a0
    b2c8:	|  |  |   move.l 68(a0),d0
    b2cc:	|  |  |   move.l d0,-(sp)
    b2ce:	|  |  |   jsr 5526 <abortFunction>
    b2d4:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    b2d6:	|  |  '-> movea.l 1c81a <allPeople>,a0
    b2dc:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    b2e0:	|  |      move.l 1c81a <allPeople>,8(sp)
		allPeople = allPeople -> next;
    b2e8:	|  |      movea.l 1c81a <allPeople>,a0
    b2ee:	|  |      move.l 36(a0),d0
    b2f2:	|  |      move.l d0,1c81a <allPeople>
		removeObjectType (killPeople -> thisType);
    b2f8:	|  |      movea.l 8(sp),a0
    b2fc:	|  |      move.l 114(a0),d0
    b300:	|  |      move.l d0,-(sp)
    b302:	|  |      jsr e1b2 <removeObjectType>
    b308:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    b30a:	|  |      move.l 8(sp),4(sp)
    b310:	|  |      move.l 1c7ba <SysBase>,d0
    b316:	|  |      movea.l d0,a6
    b318:	|  |      movea.l 4(sp),a1
    b31c:	|  |      jsr -690(a6)
	while (allPeople) {
    b320:	|  '----> move.l 1c81a <allPeople>,d0
    b326:	'-------- bne.s b2b6 <killAllPeople+0x6>
	}
}
    b328:	          nop
    b32a:	          nop
    b32c:	          movea.l (sp)+,a6
    b32e:	          addq.l #8,sp
    b330:	          rts

0000b332 <killMostPeople>:

void killMostPeople() {
    b332:	          lea -12(sp),sp
    b336:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    b338:	          move.l #116762,12(sp)

    while (*lookyHere) {
    b340:	   ,----- bra.w b3c6 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    b344:	,--|----> movea.l 12(sp),a0
    b348:	|  |      movea.l (a0),a0
    b34a:	|  |      move.l 118(a0),d0
    b34e:	|  |      moveq #32,d1
    b350:	|  |      and.l d1,d0
    b352:	|  |  ,-- beq.s b364 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    b354:	|  |  |   movea.l 12(sp),a0
    b358:	|  |  |   move.l (a0),d0
    b35a:	|  |  |   moveq #36,d1
    b35c:	|  |  |   add.l d0,d1
    b35e:	|  |  |   move.l d1,12(sp)
    b362:	|  +--|-- bra.s b3c6 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    b364:	|  |  '-> movea.l 12(sp),a0
    b368:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    b36c:	|  |      movea.l 8(sp),a0
    b370:	|  |      move.l 36(a0),d0
    b374:	|  |      movea.l 12(sp),a0
    b378:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    b37a:	|  |      movea.l 8(sp),a0
    b37e:	|  |      move.l 68(a0),d0
    b382:	|  |  ,-- beq.s b396 <killMostPeople+0x64>
    b384:	|  |  |   movea.l 8(sp),a0
    b388:	|  |  |   move.l 68(a0),d0
    b38c:	|  |  |   move.l d0,-(sp)
    b38e:	|  |  |   jsr 5526 <abortFunction>
    b394:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    b396:	|  |  '-> movea.l 8(sp),a0
    b39a:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    b39e:	|  |      movea.l 8(sp),a0
    b3a2:	|  |      move.l 114(a0),d0
    b3a6:	|  |      move.l d0,-(sp)
    b3a8:	|  |      jsr e1b2 <removeObjectType>
    b3ae:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    b3b0:	|  |      move.l 8(sp),4(sp)
    b3b6:	|  |      move.l 1c7ba <SysBase>,d0
    b3bc:	|  |      movea.l d0,a6
    b3be:	|  |      movea.l 4(sp),a1
    b3c2:	|  |      jsr -690(a6)
    while (*lookyHere) {
    b3c6:	|  '----> movea.l 12(sp),a0
    b3ca:	|         move.l (a0),d0
    b3cc:	'-------- bne.w b344 <killMostPeople+0x12>
        }
    }
}
    b3d0:	          nop
    b3d2:	          nop
    b3d4:	          movea.l (sp)+,a6
    b3d6:	          lea 12(sp),sp
    b3da:	          rts

0000b3dc <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    b3dc:	clr.l -(sp)
    b3de:	move.l sp,d0
    b3e0:	addq.l #8,d0
    b3e2:	move.l d0,-(sp)
    b3e4:	jsr 46c8 <setFrames>
    b3ea:	addq.l #8,sp
}
    b3ec:	nop
    b3ee:	rts

0000b3f0 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    b3f0:	          lea -12(sp),sp
    b3f4:	          move.l d2,-(sp)
	KPrintF("makeWalkingPerson started\n");
    b3f6:	          pea 1a54b <PutChar+0x16bd>
    b3fc:	          jsr 183ec <KPrintF>
    b402:	          addq.l #4,sp
	if (x == 0 && y == 0) return FALSE;
    b404:	          tst.l 20(sp)
    b408:	      ,-- bne.s b416 <makeWalkingPerson+0x26>
    b40a:	      |   tst.l 24(sp)
    b40e:	      +-- bne.s b416 <makeWalkingPerson+0x26>
    b410:	      |   clr.w d0
    b412:	,-----|-- bra.w b5d8 <makeWalkingPerson+0x1e8>
	if (currentFloor -> numPolygons == 0) return FALSE;
    b416:	|     '-> movea.l 1c8d2 <currentFloor>,a0
    b41c:	|         move.l 8(a0),d0
    b420:	|     ,-- bne.s b428 <makeWalkingPerson+0x38>
    b422:	|     |   clr.w d0
    b424:	+-----|-- bra.w b5d8 <makeWalkingPerson+0x1e8>
	struct onScreenPerson * moveMe = findPerson (objNum);
    b428:	|     '-> move.l 28(sp),d0
    b42c:	|         move.l d0,-(sp)
    b42e:	|         jsr ae9c <findPerson>
    b434:	|         addq.l #4,sp
    b436:	|         move.l d0,12(sp)

	
	if (! moveMe) {
    b43a:	|     ,-- bne.s b456 <makeWalkingPerson+0x66>
		KPrintF("makeWalkingPerson: Can't find person %d\n", objNum);
    b43c:	|     |   move.l 28(sp),d0
    b440:	|     |   move.l d0,-(sp)
    b442:	|     |   pea 1a566 <PutChar+0x16d8>
    b448:	|     |   jsr 183ec <KPrintF>
    b44e:	|     |   addq.l #8,sp
		return FALSE;
    b450:	|     |   clr.w d0
    b452:	+-----|-- bra.w b5d8 <makeWalkingPerson+0x1e8>
	} 


	if (moveMe -> continueAfterWalking) {
    b456:	|     '-> movea.l 12(sp),a0
    b45a:	|         move.l 68(a0),d0
    b45e:	|     ,-- beq.s b472 <makeWalkingPerson+0x82>
		abortFunction (moveMe -> continueAfterWalking);
    b460:	|     |   movea.l 12(sp),a0
    b464:	|     |   move.l 68(a0),d0
    b468:	|     |   move.l d0,-(sp)
    b46a:	|     |   jsr 5526 <abortFunction>
    b470:	|     |   addq.l #4,sp
	}	
	moveMe -> continueAfterWalking = NULL;
    b472:	|     '-> movea.l 12(sp),a0
    b476:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    b47a:	|         movea.l 12(sp),a0
    b47e:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    b484:	|         movea.l 12(sp),a0
    b488:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    b48e:	|         movea.l 12(sp),a0
    b492:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    b498:	|         movea.l 12(sp),a0
    b49c:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    b4a2:	|         move.l 24(sp),-(sp)
    b4a6:	|         move.l 24(sp),-(sp)
    b4aa:	|         jsr 17732 <inFloor>
    b4b0:	|         addq.l #8,sp
    b4b2:	|         movea.l 12(sp),a0
    b4b6:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    b4ba:	|         movea.l 12(sp),a0
    b4be:	|         move.l 60(a0),d0
    b4c2:	|         moveq #-1,d1
    b4c4:	|         cmp.l d0,d1
    b4c6:	|     ,-- bne.s b4f6 <makeWalkingPerson+0x106>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    b4c8:	|     |   movea.w #60,a0
    b4cc:	|     |   adda.l 12(sp),a0
    b4d0:	|     |   moveq #44,d1
    b4d2:	|     |   add.l 12(sp),d1
    b4d6:	|     |   moveq #40,d0
    b4d8:	|     |   add.l 12(sp),d0
    b4dc:	|     |   move.l a0,-(sp)
    b4de:	|     |   move.l d1,-(sp)
    b4e0:	|     |   move.l d0,-(sp)
    b4e2:	|     |   jsr afb4 <handleClosestPoint>
    b4e8:	|     |   lea 12(sp),sp
    b4ec:	|     |   tst.w d0
    b4ee:	|     +-- bne.s b4f6 <makeWalkingPerson+0x106>
    b4f0:	|     |   clr.w d0
    b4f2:	+-----|-- bra.w b5d8 <makeWalkingPerson+0x1e8>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    b4f6:	|     '-> movea.l 12(sp),a0
    b4fa:	|         move.l 4(a0),d0
    b4fe:	|         move.l d0,-(sp)
    b500:	|         jsr 187b6 <__fixsfsi>
    b506:	|         addq.l #4,sp
    b508:	|         move.l d0,d2
    b50a:	|         movea.l 12(sp),a0
    b50e:	|         move.l (a0),d0
    b510:	|         move.l d0,-(sp)
    b512:	|         jsr 187b6 <__fixsfsi>
    b518:	|         addq.l #4,sp
    b51a:	|         move.l d2,-(sp)
    b51c:	|         move.l d0,-(sp)
    b51e:	|         jsr 17732 <inFloor>
    b524:	|         addq.l #8,sp
    b526:	|         movea.l 12(sp),a0
    b52a:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    b52e:	|         movea.l 12(sp),a0
    b532:	|         move.l 56(a0),d0
    b536:	|         moveq #-1,d1
    b538:	|         cmp.l d0,d1
    b53a:	|     ,-- bne.s b58c <makeWalkingPerson+0x19c>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    b53c:	|     |   movea.l 12(sp),a0
    b540:	|     |   move.l (a0),d0
    b542:	|     |   move.l d0,-(sp)
    b544:	|     |   jsr 187b6 <__fixsfsi>
    b54a:	|     |   addq.l #4,sp
    b54c:	|     |   move.l d0,8(sp)
    b550:	|     |   movea.l 12(sp),a0
    b554:	|     |   move.l 4(a0),d0
    b558:	|     |   move.l d0,-(sp)
    b55a:	|     |   jsr 187b6 <__fixsfsi>
    b560:	|     |   addq.l #4,sp
    b562:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    b566:	|     |   moveq #56,d0
    b568:	|     |   add.l 12(sp),d0
    b56c:	|     |   move.l d0,-(sp)
    b56e:	|     |   lea 8(sp),a0
    b572:	|     |   move.l a0,-(sp)
    b574:	|     |   moveq #16,d0
    b576:	|     |   add.l sp,d0
    b578:	|     |   move.l d0,-(sp)
    b57a:	|     |   jsr afb4 <handleClosestPoint>
    b580:	|     |   lea 12(sp),sp
    b584:	|     |   tst.w d0
    b586:	|     +-- bne.s b58c <makeWalkingPerson+0x19c>
    b588:	|     |   clr.w d0
    b58a:	+-----|-- bra.s b5d8 <makeWalkingPerson+0x1e8>
	}

	doBorderStuff (moveMe);
    b58c:	|     '-> move.l 12(sp),-(sp)
    b590:	|         jsr a1fe <doBorderStuff>
    b596:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    b598:	|         clr.l -(sp)
    b59a:	|         move.l 16(sp),-(sp)
    b59e:	|         jsr c844 <walkMe>
    b5a4:	|         addq.l #8,sp
    b5a6:	|         tst.w d0
    b5a8:	|     ,-- bne.s b5b4 <makeWalkingPerson+0x1c4>
    b5aa:	|     |   movea.l 12(sp),a0
    b5ae:	|     |   move.w 66(a0),d0
    b5b2:	|  ,--|-- beq.s b5d6 <makeWalkingPerson+0x1e6>
		KPrintF("makeWalkingPerson: continueAfterWalking set to %d\n", &objNum);
    b5b4:	|  |  '-> lea 28(sp),a0
    b5b8:	|  |      move.l a0,-(sp)
    b5ba:	|  |      pea 1a58f <PutChar+0x1701>
    b5c0:	|  |      jsr 183ec <KPrintF>
    b5c6:	|  |      addq.l #8,sp
		moveMe -> continueAfterWalking = func;
    b5c8:	|  |      movea.l 12(sp),a0
    b5cc:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    b5d2:	|  |      moveq #1,d0
    b5d4:	+--|----- bra.s b5d8 <makeWalkingPerson+0x1e8>
	} else {
		return FALSE;
    b5d6:	|  '----> clr.w d0
	}
}
    b5d8:	'-------> move.l (sp)+,d2
    b5da:	          lea 12(sp),sp
    b5de:	          rts

0000b5e0 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    b5e0:	       lea -16(sp),sp
    b5e4:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    b5e6:	       moveq #12,d0
    b5e8:	       move.l d0,16(sp)
    b5ec:	       clr.l 12(sp)
    b5f0:	       move.l 1c7ba <SysBase>,d0
    b5f6:	       movea.l d0,a6
    b5f8:	       move.l 16(sp),d0
    b5fc:	       move.l 12(sp),d1
    b600:	       jsr -684(a6)
    b604:	       move.l d0,8(sp)
    b608:	       move.l 8(sp),d0
    b60c:	       move.l d0,4(sp)
    if(newAnim == 0) {
    b610:	   ,-- bne.s b624 <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    b612:	   |   pea 1a5c2 <PutChar+0x1734>
    b618:	   |   jsr 183ec <KPrintF>
    b61e:	   |   addq.l #4,sp
        return NULL;    
    b620:	   |   moveq #0,d0
    b622:	,--|-- bra.s b63e <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    b624:	|  '-> movea.l 4(sp),a0
    b628:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    b62a:	|      movea.l 4(sp),a0
    b62e:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    b632:	|      movea.l 4(sp),a0
    b636:	|      clr.l 4(a0)
	return newAnim;
    b63a:	|      move.l 4(sp),d0
}
    b63e:	'----> movea.l (sp)+,a6
    b640:	       lea 16(sp),sp
    b644:	       rts

0000b646 <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    b646:	    move.l d2,-(sp)
	me->x = x;
    b648:	    movea.l 8(sp),a0
    b64c:	    move.l 12(sp),(a0)
	me->y = y;
    b650:	    movea.l 8(sp),a0
    b654:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    b65a:	    movea.l 8(sp),a0
    b65e:	    clr.l 8(a0)
	me->oldy = 0;
    b662:	    movea.l 8(sp),a0
    b666:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    b66a:	    movea.l 8(sp),a0
    b66e:	    move.l 118(a0),d0
    b672:	    moveq #2,d1
    b674:	    and.l d1,d0
    b676:	,-- bne.s b6ce <moveAndScale+0x88>
    b678:	|   move.w 1c138 <scaleDivide>,d0
    b67e:	+-- beq.s b6ce <moveAndScale+0x88>
    b680:	|   movea.l 8(sp),a0
    b684:	|   move.l 4(a0),d2
    b688:	|   move.w 1c136 <scaleHorizon>,d0
    b68e:	|   movea.w d0,a0
    b690:	|   move.l a0,-(sp)
    b692:	|   jsr 1881e <__floatsisf>
    b698:	|   addq.l #4,sp
    b69a:	|   move.l d0,-(sp)
    b69c:	|   move.l d2,-(sp)
    b69e:	|   jsr 18b12 <__subsf3>
    b6a4:	|   addq.l #8,sp
    b6a6:	|   move.l d0,d2
    b6a8:	|   move.w 1c138 <scaleDivide>,d0
    b6ae:	|   movea.w d0,a0
    b6b0:	|   move.l a0,-(sp)
    b6b2:	|   jsr 1881e <__floatsisf>
    b6b8:	|   addq.l #4,sp
    b6ba:	|   move.l d0,-(sp)
    b6bc:	|   move.l d2,-(sp)
    b6be:	|   jsr 186d4 <__divsf3>
    b6c4:	|   addq.l #8,sp
    b6c6:	|   movea.l 8(sp),a0
    b6ca:	|   move.l d0,32(a0)
}
    b6ce:	'-> nop
    b6d0:	    move.l (sp)+,d2
    b6d2:	    rts

0000b6d4 <removeOneCharacter>:

void removeOneCharacter (int i) {
    b6d4:	          lea -16(sp),sp
    b6d8:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    b6da:	          move.l 24(sp),-(sp)
    b6de:	          jsr ae9c <findPerson>
    b6e4:	          addq.l #4,sp
    b6e6:	          move.l d0,8(sp)

    if (p) {
    b6ea:	,-------- beq.w b7ca <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    b6ee:	|         move.l 1c8ca <overRegion>,d0
    b6f4:	|         cmpi.l #116766,d0
    b6fa:	|     ,-- bne.s b718 <removeOneCharacter+0x44>
    b6fc:	|     |   movea.l 1c8ca <overRegion>,a0
    b702:	|     |   move.l 28(a0),d1
    b706:	|     |   movea.l 8(sp),a0
    b70a:	|     |   move.l 114(a0),d0
    b70e:	|     |   cmp.l d1,d0
    b710:	|     +-- bne.s b718 <removeOneCharacter+0x44>
            overRegion = NULL;
    b712:	|     |   clr.l 1c8ca <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    b718:	|     '-> movea.l 8(sp),a0
    b71c:	|         move.l 68(a0),d0
    b720:	|     ,-- beq.s b734 <removeOneCharacter+0x60>
    b722:	|     |   movea.l 8(sp),a0
    b726:	|     |   move.l 68(a0),d0
    b72a:	|     |   move.l d0,-(sp)
    b72c:	|     |   jsr 5526 <abortFunction>
    b732:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    b734:	|     '-> movea.l 8(sp),a0
    b738:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    b73c:	|         clr.l 12(sp)
    b740:	|     ,-- bra.s b768 <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    b742:	|  ,--|-> movea.l 8(sp),a0
    b746:	|  |  |   movea.l 80(a0),a0
    b74a:	|  |  |   move.l (a0),d1
    b74c:	|  |  |   move.l 12(sp),d0
    b750:	|  |  |   add.l d0,d0
    b752:	|  |  |   add.l d0,d0
    b754:	|  |  |   movea.l d1,a0
    b756:	|  |  |   adda.l d0,a0
    b758:	|  |  |   move.l (a0),d0
    b75a:	|  |  |   move.l d0,-(sp)
    b75c:	|  |  |   jsr a17a <deleteAnim>
    b762:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    b764:	|  |  |   addq.l #1,12(sp)
    b768:	|  |  '-> moveq #2,d0
    b76a:	|  |      cmp.l 12(sp),d0
    b76e:	|  '----- bge.s b742 <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    b770:	|         move.l #116762,16(sp)
    b778:	|     ,-- bra.s b788 <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    b77a:	|  ,--|-> movea.l 16(sp),a0
    b77e:	|  |  |   move.l (a0),d0
    b780:	|  |  |   moveq #36,d1
    b782:	|  |  |   add.l d0,d1
    b784:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    b788:	|  |  '-> movea.l 16(sp),a0
    b78c:	|  |      move.l (a0),d0
    b78e:	|  |      cmp.l 8(sp),d0
    b792:	|  '----- bne.s b77a <removeOneCharacter+0xa6>

        *killPeople = p->next;
    b794:	|         movea.l 8(sp),a0
    b798:	|         move.l 36(a0),d0
    b79c:	|         movea.l 16(sp),a0
    b7a0:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    b7a2:	|         movea.l 8(sp),a0
    b7a6:	|         move.l 114(a0),d0
    b7aa:	|         move.l d0,-(sp)
    b7ac:	|         jsr e1b2 <removeObjectType>
    b7b2:	|         addq.l #4,sp
        FreeVec(p);
    b7b4:	|         move.l 8(sp),4(sp)
    b7ba:	|         move.l 1c7ba <SysBase>,d0
    b7c0:	|         movea.l d0,a6
    b7c2:	|         movea.l 4(sp),a1
    b7c6:	|         jsr -690(a6)
		
    }
}
    b7ca:	'-------> nop
    b7cc:	          movea.l (sp)+,a6
    b7ce:	          lea 16(sp),sp
    b7d2:	          rts

0000b7d4 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    b7d4:	       subq.l #8,sp
    b7d6:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    b7d8:	       movea.l 16(sp),a0
    b7dc:	       movea.l 80(a0),a0
    b7e0:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    b7e6:	       movea.l 16(sp),a0
    b7ea:	       move.l 92(a0),d2
    b7ee:	       move.l 4(sp),-(sp)
    b7f2:	       pea b4 <_start+0xb4>
    b7f6:	       jsr 18df6 <__divsi3>
    b7fc:	       addq.l #8,sp
    b7fe:	       add.l d2,d0
    b800:	       move.l d0,d1
    b802:	       addi.l #180,d1
    b808:	       movea.l 16(sp),a0
    b80c:	       move.l 100(a0),d0
    b810:	       move.l d1,d2
    b812:	       add.l d0,d2
    b814:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    b818:	   ,-- bra.s b822 <rethinkAngle+0x4e>
    b81a:	,--|-> addi.l #-360,8(sp)
    b822:	|  '-> cmpi.l #359,8(sp)
    b82a:	'----- bgt.s b81a <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    b82c:	       move.l 4(sp),-(sp)
    b830:	       move.l 12(sp),-(sp)
    b834:	       jsr 18d78 <__mulsi3>
    b83a:	       addq.l #8,sp
    b83c:	       pea 168 <decodeFilename+0x50>
    b840:	       move.l d0,-(sp)
    b842:	       jsr 18df6 <__divsi3>
    b848:	       addq.l #8,sp
    b84a:	       movea.l 16(sp),a0
    b84e:	       move.l d0,106(a0)
}
    b852:	       nop
    b854:	       move.l (sp)+,d2
    b856:	       addq.l #8,sp
    b858:	       rts

0000b85a <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    b85a:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    b85c:	          movea.l 8(sp),a0
    b860:	          move.l 8(a0),d0
    b864:	          move.l 12(sp),-(sp)
    b868:	          move.l d0,-(sp)
    b86a:	          jsr 8d0 <put2bytes>
    b870:	          addq.l #8,sp
	if (p -> numFrames) {
    b872:	          movea.l 8(sp),a0
    b876:	          move.l 8(a0),d0
    b87a:	,-------- beq.w b91e <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    b87e:	|         movea.l 8(sp),a0
    b882:	|         movea.l (a0),a0
    b884:	|         move.l (a0),d0
    b886:	|         move.l 12(sp),-(sp)
    b88a:	|         move.l d0,-(sp)
    b88c:	|         jsr 958 <put4bytes>
    b892:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    b894:	|         clr.l (sp)
    b896:	|     ,-- bra.s b910 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    b898:	|  ,--|-> movea.l 8(sp),a0
    b89c:	|  |  |   movea.l 4(a0),a0
    b8a0:	|  |  |   move.l (sp),d1
    b8a2:	|  |  |   move.l d1,d0
    b8a4:	|  |  |   add.l d0,d0
    b8a6:	|  |  |   add.l d1,d0
    b8a8:	|  |  |   add.l d0,d0
    b8aa:	|  |  |   add.l d0,d0
    b8ac:	|  |  |   adda.l d0,a0
    b8ae:	|  |  |   move.l (a0),d0
    b8b0:	|  |  |   move.l 12(sp),-(sp)
    b8b4:	|  |  |   move.l d0,-(sp)
    b8b6:	|  |  |   jsr 958 <put4bytes>
    b8bc:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    b8be:	|  |  |   movea.l 8(sp),a0
    b8c2:	|  |  |   movea.l 4(a0),a0
    b8c6:	|  |  |   move.l (sp),d1
    b8c8:	|  |  |   move.l d1,d0
    b8ca:	|  |  |   add.l d0,d0
    b8cc:	|  |  |   add.l d1,d0
    b8ce:	|  |  |   add.l d0,d0
    b8d0:	|  |  |   add.l d0,d0
    b8d2:	|  |  |   adda.l d0,a0
    b8d4:	|  |  |   move.l 4(a0),d0
    b8d8:	|  |  |   move.l 12(sp),-(sp)
    b8dc:	|  |  |   move.l d0,-(sp)
    b8de:	|  |  |   jsr 958 <put4bytes>
    b8e4:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    b8e6:	|  |  |   movea.l 8(sp),a0
    b8ea:	|  |  |   movea.l 4(a0),a0
    b8ee:	|  |  |   move.l (sp),d1
    b8f0:	|  |  |   move.l d1,d0
    b8f2:	|  |  |   add.l d0,d0
    b8f4:	|  |  |   add.l d1,d0
    b8f6:	|  |  |   add.l d0,d0
    b8f8:	|  |  |   add.l d0,d0
    b8fa:	|  |  |   adda.l d0,a0
    b8fc:	|  |  |   move.l 8(a0),d0
    b900:	|  |  |   move.l 12(sp),-(sp)
    b904:	|  |  |   move.l d0,-(sp)
    b906:	|  |  |   jsr 958 <put4bytes>
    b90c:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    b90e:	|  |  |   addq.l #1,(sp)
    b910:	|  |  '-> movea.l 8(sp),a0
    b914:	|  |      move.l 8(a0),d0
    b918:	|  |      cmp.l (sp),d0
    b91a:	|  '----- bgt.w b898 <saveAnim+0x3e>
		}
	}
	return TRUE;
    b91e:	'-------> moveq #1,d0
}
    b920:	          addq.l #4,sp
    b922:	          rts

0000b924 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    b924:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    b926:	             movea.l 8(sp),a0
    b92a:	             move.l 4(a0),d0
    b92e:	             move.l 12(sp),-(sp)
    b932:	             move.l d0,-(sp)
    b934:	             jsr 8d0 <put2bytes>
    b93a:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b93c:	             clr.l (sp)
    b93e:	   ,-------- bra.s b96a <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    b940:	,--|-------> movea.l 8(sp),a0
    b944:	|  |         move.l (a0),d1
    b946:	|  |         move.l (sp),d0
    b948:	|  |         add.l d0,d0
    b94a:	|  |         add.l d0,d0
    b94c:	|  |         movea.l d1,a0
    b94e:	|  |         adda.l d0,a0
    b950:	|  |         move.l (a0),d0
    b952:	|  |         move.l 12(sp),-(sp)
    b956:	|  |         move.l d0,-(sp)
    b958:	|  |         jsr b85a <saveAnim>
    b95e:	|  |         addq.l #8,sp
    b960:	|  |         tst.w d0
    b962:	|  |     ,-- bne.s b968 <saveCostume+0x44>
    b964:	|  |     |   clr.w d0
    b966:	|  |  ,--|-- bra.s b97e <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b968:	|  |  |  '-> addq.l #1,(sp)
    b96a:	|  '--|----> movea.l 8(sp),a0
    b96e:	|     |      move.l 4(a0),d1
    b972:	|     |      move.l d1,d0
    b974:	|     |      add.l d0,d0
    b976:	|     |      add.l d1,d0
    b978:	|     |      cmp.l (sp),d0
    b97a:	'-----|----- bgt.s b940 <saveCostume+0x1c>
	}

	return TRUE;
    b97c:	      |      moveq #1,d0
}
    b97e:	      '----> addq.l #4,sp
    b980:	             rts

0000b982 <savePeople>:

BOOL savePeople (BPTR fp) {
    b982:	             lea -144(sp),sp
    b986:	             move.l a6,-(sp)
    b988:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    b98a:	             move.l 1c81a <allPeople>,148(sp)
	int countPeople = 0, a;
    b992:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    b996:	             move.w 1c136 <scaleHorizon>,d0
    b99c:	             movea.w d0,a0
    b99e:	             move.l 156(sp),-(sp)
    b9a2:	             move.l a0,-(sp)
    b9a4:	             jsr a9c <putSigned>
    b9aa:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    b9ac:	             move.w 1c138 <scaleDivide>,d0
    b9b2:	             movea.w d0,a0
    b9b4:	             move.l 156(sp),-(sp)
    b9b8:	             move.l a0,-(sp)
    b9ba:	             jsr a9c <putSigned>
    b9c0:	             addq.l #8,sp

	while (me) {
    b9c2:	         ,-- bra.s b9d2 <savePeople+0x50>
		countPeople ++;
    b9c4:	      ,--|-> addq.l #1,144(sp)
		me = me -> next;
    b9c8:	      |  |   movea.l 148(sp),a0
    b9cc:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    b9d2:	      |  '-> tst.l 148(sp)
    b9d6:	      '----- bne.s b9c4 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    b9d8:	             move.l 156(sp),-(sp)
    b9dc:	             move.l 148(sp),-(sp)
    b9e0:	             jsr 8d0 <put2bytes>
    b9e6:	             addq.l #8,sp

	me = allPeople;
    b9e8:	             move.l 1c81a <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    b9f0:	             clr.l 140(sp)
    b9f4:	   ,-------- bra.w be4c <savePeople+0x4ca>

		putFloat (me -> x, fp);
    b9f8:	,--|-------> movea.l 148(sp),a0
    b9fc:	|  |         move.l (a0),d0
    b9fe:	|  |         move.l 156(sp),-(sp)
    ba02:	|  |         move.l d0,-(sp)
    ba04:	|  |         jsr a46 <putFloat>
    ba0a:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    ba0c:	|  |         movea.l 148(sp),a0
    ba10:	|  |         move.l 4(a0),d0
    ba14:	|  |         move.l 156(sp),-(sp)
    ba18:	|  |         move.l d0,-(sp)
    ba1a:	|  |         jsr a46 <putFloat>
    ba20:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    ba22:	|  |         movea.l 148(sp),a0
    ba26:	|  |         move.l 80(a0),d0
    ba2a:	|  |         move.l 156(sp),-(sp)
    ba2e:	|  |         move.l d0,-(sp)
    ba30:	|  |         jsr b924 <saveCostume>
    ba36:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    ba38:	|  |         movea.l 148(sp),a0
    ba3c:	|  |         move.l 72(a0),d0
    ba40:	|  |         move.l 156(sp),-(sp)
    ba44:	|  |         move.l d0,-(sp)
    ba46:	|  |         jsr b85a <saveAnim>
    ba4c:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    ba4e:	|  |         move.l 156(sp),136(sp)
    ba54:	|  |         movea.l 148(sp),a0
    ba58:	|  |         move.l 72(a0),d1
    ba5c:	|  |         movea.l 148(sp),a0
    ba60:	|  |         move.l 76(a0),d0
    ba64:	|  |         cmp.l d1,d0
    ba66:	|  |         seq d0
    ba68:	|  |         neg.b d0
    ba6a:	|  |         move.b d0,d0
    ba6c:	|  |         andi.l #255,d0
    ba72:	|  |         move.l d0,132(sp)
    ba76:	|  |         move.l 1c7c2 <DOSBase>,d0
    ba7c:	|  |         movea.l d0,a6
    ba7e:	|  |         move.l 136(sp),d1
    ba82:	|  |         move.l 132(sp),d2
    ba86:	|  |         jsr -312(a6)
    ba8a:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    ba8e:	|  |         movea.l 148(sp),a0
    ba92:	|  |         move.l 32(a0),d0
    ba96:	|  |         move.l 156(sp),-(sp)
    ba9a:	|  |         move.l d0,-(sp)
    ba9c:	|  |         jsr a46 <putFloat>
    baa2:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    baa4:	|  |         movea.l 148(sp),a0
    baa8:	|  |         move.l 118(a0),d0
    baac:	|  |         move.l 156(sp),-(sp)
    bab0:	|  |         move.l d0,-(sp)
    bab2:	|  |         jsr 8d0 <put2bytes>
    bab8:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    baba:	|  |         movea.l 148(sp),a0
    babe:	|  |         move.l 20(a0),d0
    bac2:	|  |         move.l 156(sp),-(sp)
    bac6:	|  |         move.l d0,-(sp)
    bac8:	|  |         jsr 8d0 <put2bytes>
    bace:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    bad0:	|  |         movea.l 148(sp),a0
    bad4:	|  |         move.l 40(a0),d0
    bad8:	|  |         move.l 156(sp),-(sp)
    badc:	|  |         move.l d0,-(sp)
    bade:	|  |         jsr 8d0 <put2bytes>
    bae4:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    bae6:	|  |         movea.l 148(sp),a0
    baea:	|  |         move.l 44(a0),d0
    baee:	|  |         move.l 156(sp),-(sp)
    baf2:	|  |         move.l d0,-(sp)
    baf4:	|  |         jsr 8d0 <put2bytes>
    bafa:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    bafc:	|  |         movea.l 148(sp),a0
    bb00:	|  |         move.l 48(a0),d0
    bb04:	|  |         move.l 156(sp),-(sp)
    bb08:	|  |         move.l d0,-(sp)
    bb0a:	|  |         jsr 8d0 <put2bytes>
    bb10:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    bb12:	|  |         movea.l 148(sp),a0
    bb16:	|  |         move.l 52(a0),d0
    bb1a:	|  |         move.l 156(sp),-(sp)
    bb1e:	|  |         move.l d0,-(sp)
    bb20:	|  |         jsr 8d0 <put2bytes>
    bb26:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    bb28:	|  |         movea.l 148(sp),a0
    bb2c:	|  |         move.l 84(a0),d0
    bb30:	|  |         move.l 156(sp),-(sp)
    bb34:	|  |         move.l d0,-(sp)
    bb36:	|  |         jsr 8d0 <put2bytes>
    bb3c:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    bb3e:	|  |         movea.l 148(sp),a0
    bb42:	|  |         move.l 88(a0),d0
    bb46:	|  |         move.l 156(sp),-(sp)
    bb4a:	|  |         move.l d0,-(sp)
    bb4c:	|  |         jsr 8d0 <put2bytes>
    bb52:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    bb54:	|  |         movea.l 148(sp),a0
    bb58:	|  |         move.l 28(a0),d0
    bb5c:	|  |         move.l 156(sp),-(sp)
    bb60:	|  |         move.l d0,-(sp)
    bb62:	|  |         jsr 8d0 <put2bytes>
    bb68:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    bb6a:	|  |         movea.l 148(sp),a0
    bb6e:	|  |         move.l 122(a0),d0
    bb72:	|  |         move.l 156(sp),-(sp)
    bb76:	|  |         move.l d0,-(sp)
    bb78:	|  |         jsr 8d0 <put2bytes>
    bb7e:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    bb80:	|  |         movea.l 148(sp),a0
    bb84:	|  |         move.l 24(a0),d0
    bb88:	|  |         move.l d0,d0
    bb8a:	|  |         movea.w d0,a0
    bb8c:	|  |         move.l 156(sp),-(sp)
    bb90:	|  |         move.l a0,-(sp)
    bb92:	|  |         jsr a9c <putSigned>
    bb98:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    bb9a:	|  |         move.l 156(sp),124(sp)
    bba0:	|  |         movea.l 148(sp),a0
    bba4:	|  |         move.w 104(a0),d0
    bba8:	|  |         movea.w d0,a0
    bbaa:	|  |         move.l a0,120(sp)
    bbae:	|  |         move.l 1c7c2 <DOSBase>,d0
    bbb4:	|  |         movea.l d0,a6
    bbb6:	|  |         move.l 124(sp),d1
    bbba:	|  |         move.l 120(sp),d2
    bbbe:	|  |         jsr -312(a6)
    bbc2:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    bbc6:	|  |         move.l 156(sp),112(sp)
    bbcc:	|  |         movea.l 148(sp),a0
    bbd0:	|  |         move.w 64(a0),d0
    bbd4:	|  |         movea.w d0,a0
    bbd6:	|  |         move.l a0,108(sp)
    bbda:	|  |         move.l 1c7c2 <DOSBase>,d0
    bbe0:	|  |         movea.l d0,a6
    bbe2:	|  |         move.l 112(sp),d1
    bbe6:	|  |         move.l 108(sp),d2
    bbea:	|  |         jsr -312(a6)
    bbee:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    bbf2:	|  |         move.l 156(sp),100(sp)
    bbf8:	|  |         movea.l 148(sp),a0
    bbfc:	|  |         move.w 66(a0),d0
    bc00:	|  |         movea.w d0,a0
    bc02:	|  |         move.l a0,96(sp)
    bc06:	|  |         move.l 1c7c2 <DOSBase>,d0
    bc0c:	|  |         movea.l d0,a6
    bc0e:	|  |         move.l 100(sp),d1
    bc12:	|  |         move.l 96(sp),d2
    bc16:	|  |         jsr -312(a6)
    bc1a:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    bc1e:	|  |         movea.l 148(sp),a0
    bc22:	|  |         move.l 68(a0),d0
    bc26:	|  |  ,----- beq.s bc64 <savePeople+0x2e2>
			FPutC (fp, 1);
    bc28:	|  |  |      move.l 156(sp),76(sp)
    bc2e:	|  |  |      moveq #1,d0
    bc30:	|  |  |      move.l d0,72(sp)
    bc34:	|  |  |      move.l 1c7c2 <DOSBase>,d0
    bc3a:	|  |  |      movea.l d0,a6
    bc3c:	|  |  |      move.l 76(sp),d1
    bc40:	|  |  |      move.l 72(sp),d2
    bc44:	|  |  |      jsr -312(a6)
    bc48:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    bc4c:	|  |  |      movea.l 148(sp),a0
    bc50:	|  |  |      move.l 68(a0),d0
    bc54:	|  |  |      move.l 156(sp),-(sp)
    bc58:	|  |  |      move.l d0,-(sp)
    bc5a:	|  |  |      jsr ce7e <saveFunction>
    bc60:	|  |  |      addq.l #8,sp
    bc62:	|  |  |  ,-- bra.s bc88 <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    bc64:	|  |  '--|-> move.l 156(sp),88(sp)
    bc6a:	|  |     |   moveq #1,d0
    bc6c:	|  |     |   move.l d0,84(sp)
    bc70:	|  |     |   move.l 1c7c2 <DOSBase>,d0
    bc76:	|  |     |   movea.l d0,a6
    bc78:	|  |     |   move.l 88(sp),d1
    bc7c:	|  |     |   move.l 84(sp),d2
    bc80:	|  |     |   jsr -312(a6)
    bc84:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    bc88:	|  |     '-> movea.l 148(sp),a0
    bc8c:	|  |         move.l 106(a0),d0
    bc90:	|  |         move.l 156(sp),-(sp)
    bc94:	|  |         move.l d0,-(sp)
    bc96:	|  |         jsr 8d0 <put2bytes>
    bc9c:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    bc9e:	|  |         movea.l 148(sp),a0
    bca2:	|  |         move.l 92(a0),d0
    bca6:	|  |         move.l 156(sp),-(sp)
    bcaa:	|  |         move.l d0,-(sp)
    bcac:	|  |         jsr 8d0 <put2bytes>
    bcb2:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    bcb4:	|  |         movea.l 148(sp),a0
    bcb8:	|  |         move.l 100(a0),d0
    bcbc:	|  |         move.l 156(sp),-(sp)
    bcc0:	|  |         move.l d0,-(sp)
    bcc2:	|  |         jsr 8d0 <put2bytes>
    bcc8:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    bcca:	|  |         movea.l 148(sp),a0
    bcce:	|  |         move.l 96(a0),d0
    bcd2:	|  |         move.l 156(sp),-(sp)
    bcd6:	|  |         move.l d0,-(sp)
    bcd8:	|  |         jsr 8d0 <put2bytes>
    bcde:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    bce0:	|  |         movea.l 148(sp),a0
    bce4:	|  |         move.l 110(a0),d0
    bce8:	|  |         move.l d0,d0
    bcea:	|  |         movea.w d0,a0
    bcec:	|  |         move.l 156(sp),-(sp)
    bcf0:	|  |         move.l a0,-(sp)
    bcf2:	|  |         jsr a9c <putSigned>
    bcf8:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    bcfa:	|  |         movea.l 148(sp),a0
    bcfe:	|  |         move.l 56(a0),d0
    bd02:	|  |         move.l d0,d0
    bd04:	|  |         movea.w d0,a0
    bd06:	|  |         move.l 156(sp),-(sp)
    bd0a:	|  |         move.l a0,-(sp)
    bd0c:	|  |         jsr a9c <putSigned>
    bd12:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    bd14:	|  |         movea.l 148(sp),a0
    bd18:	|  |         move.l 60(a0),d0
    bd1c:	|  |         move.l d0,d0
    bd1e:	|  |         movea.w d0,a0
    bd20:	|  |         move.l 156(sp),-(sp)
    bd24:	|  |         move.l a0,-(sp)
    bd26:	|  |         jsr a9c <putSigned>
    bd2c:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    bd2e:	|  |         move.l 156(sp),64(sp)
    bd34:	|  |         movea.l 148(sp),a0
    bd38:	|  |         move.b 126(a0),d0
    bd3c:	|  |         move.b d0,d0
    bd3e:	|  |         andi.l #255,d0
    bd44:	|  |         move.l d0,60(sp)
    bd48:	|  |         move.l 1c7c2 <DOSBase>,d0
    bd4e:	|  |         movea.l d0,a6
    bd50:	|  |         move.l 64(sp),d1
    bd54:	|  |         move.l 60(sp),d2
    bd58:	|  |         jsr -312(a6)
    bd5c:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    bd60:	|  |         move.l 156(sp),52(sp)
    bd66:	|  |         movea.l 148(sp),a0
    bd6a:	|  |         move.b 127(a0),d0
    bd6e:	|  |         move.b d0,d0
    bd70:	|  |         andi.l #255,d0
    bd76:	|  |         move.l d0,48(sp)
    bd7a:	|  |         move.l 1c7c2 <DOSBase>,d0
    bd80:	|  |         movea.l d0,a6
    bd82:	|  |         move.l 52(sp),d1
    bd86:	|  |         move.l 48(sp),d2
    bd8a:	|  |         jsr -312(a6)
    bd8e:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    bd92:	|  |         move.l 156(sp),40(sp)
    bd98:	|  |         movea.l 148(sp),a0
    bd9c:	|  |         move.b 128(a0),d0
    bda0:	|  |         move.b d0,d0
    bda2:	|  |         andi.l #255,d0
    bda8:	|  |         move.l d0,36(sp)
    bdac:	|  |         move.l 1c7c2 <DOSBase>,d0
    bdb2:	|  |         movea.l d0,a6
    bdb4:	|  |         move.l 40(sp),d1
    bdb8:	|  |         move.l 36(sp),d2
    bdbc:	|  |         jsr -312(a6)
    bdc0:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    bdc4:	|  |         move.l 156(sp),28(sp)
    bdca:	|  |         movea.l 148(sp),a0
    bdce:	|  |         move.b 129(a0),d0
    bdd2:	|  |         move.b d0,d0
    bdd4:	|  |         andi.l #255,d0
    bdda:	|  |         move.l d0,24(sp)
    bdde:	|  |         move.l 1c7c2 <DOSBase>,d0
    bde4:	|  |         movea.l d0,a6
    bde6:	|  |         move.l 28(sp),d1
    bdea:	|  |         move.l 24(sp),d2
    bdee:	|  |         jsr -312(a6)
    bdf2:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    bdf6:	|  |         move.l 156(sp),16(sp)
    bdfc:	|  |         movea.l 148(sp),a0
    be00:	|  |         move.b 130(a0),d0
    be04:	|  |         move.b d0,d0
    be06:	|  |         andi.l #255,d0
    be0c:	|  |         move.l d0,12(sp)
    be10:	|  |         move.l 1c7c2 <DOSBase>,d0
    be16:	|  |         movea.l d0,a6
    be18:	|  |         move.l 16(sp),d1
    be1c:	|  |         move.l 12(sp),d2
    be20:	|  |         jsr -312(a6)
    be24:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    be28:	|  |         movea.l 148(sp),a0
    be2c:	|  |         move.l 114(a0),d0
    be30:	|  |         move.l 156(sp),-(sp)
    be34:	|  |         move.l d0,-(sp)
    be36:	|  |         jsr e252 <saveObjectRef>
    be3c:	|  |         addq.l #8,sp

		me = me -> next;
    be3e:	|  |         movea.l 148(sp),a0
    be42:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    be48:	|  |         addq.l #1,140(sp)
    be4c:	|  '-------> movea.l 140(sp),a0
    be50:	|            cmpa.l 144(sp),a0
    be54:	'----------- blt.w b9f8 <savePeople+0x76>
	}
	return TRUE;
    be58:	             moveq #1,d0
}
    be5a:	             move.l (sp)+,d2
    be5c:	             movea.l (sp)+,a6
    be5e:	             lea 144(sp),sp
    be62:	             rts

0000be64 <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    be64:	movea.l 4(sp),a0
    be68:	move.l 8(sp),(a0)
}
    be6c:	nop
    be6e:	rts

0000be70 <setDrawMode>:


void setDrawMode (int h, int ob) {
    be70:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    be72:	       move.l 12(sp),-(sp)
    be76:	       jsr ae9c <findPerson>
    be7c:	       addq.l #4,sp
    be7e:	       move.l d0,(sp)
	if (! moveMe) return;
    be80:	,----- beq.s be94 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    be82:	|      move.l 8(sp),-(sp)
    be86:	|      move.l 4(sp),-(sp)
    be8a:	|      jsr be9a <setMyDrawMode>
    be90:	|      addq.l #8,sp
    be92:	|  ,-- bra.s be96 <setDrawMode+0x26>
	if (! moveMe) return;
    be94:	'--|-> nop
}
    be96:	   '-> addq.l #4,sp
    be98:	       rts

0000be9a <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    be9a:	       moveq #19,d0
    be9c:	       cmp.l 8(sp),d0
    bea0:	,----- bcs.w c378 <setMyDrawMode+0x4de>
    bea4:	|      move.l 8(sp),d0
    bea8:	|      add.l d0,d0
    beaa:	|      movea.l d0,a0
    beac:	|      adda.l #48824,a0
    beb2:	|      move.w (a0),d0
    beb4:	|      jmp (beb8 <setMyDrawMode+0x1e>,pc,d0.w)
    beb8:	|      .short 0x04c0
    beba:	|      ori.l #6684712,-(a4)
    bec0:	|      btst d0,-(a0)
    bec2:	|      bchg d0,(a6)+
    bec4:	|      bclr d0,(a4)+
    bec6:	|      bset d0,(a2)+
    bec8:	|      andi.b #84,(a6)
    becc:	|      andi.l #55575312,(a2)
    bed2:	|      .short 0x02d0
    bed4:	|      bclr d1,(a0)
    bed6:	|      .short 0x044a
    bed8:	|      .short 0x040c
    beda:	|      movep.l d1,1158(a6)
    bede:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bee0:	|      movea.l 4(sp),a0
    bee4:	|      clr.b 128(a0)
    bee8:	|      movea.l 4(sp),a0
    beec:	|      move.b 128(a0),d0
    bef0:	|      movea.l 4(sp),a0
    bef4:	|      move.b d0,127(a0)
    bef8:	|      movea.l 4(sp),a0
    befc:	|      move.b 127(a0),d0
    bf00:	|      movea.l 4(sp),a0
    bf04:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    bf08:	|      movea.l 4(sp),a0
    bf0c:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    bf10:	|      movea.l 4(sp),a0
    bf14:	|      move.b #64,130(a0)
			break;
    bf1a:	|  ,-- bra.w c3b2 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bf1e:	|  |   movea.l 4(sp),a0
    bf22:	|  |   clr.b 128(a0)
    bf26:	|  |   movea.l 4(sp),a0
    bf2a:	|  |   move.b 128(a0),d0
    bf2e:	|  |   movea.l 4(sp),a0
    bf32:	|  |   move.b d0,127(a0)
    bf36:	|  |   movea.l 4(sp),a0
    bf3a:	|  |   move.b 127(a0),d0
    bf3e:	|  |   movea.l 4(sp),a0
    bf42:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    bf46:	|  |   movea.l 4(sp),a0
    bf4a:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    bf4e:	|  |   movea.l 4(sp),a0
    bf52:	|  |   move.b #-128,130(a0)
			break;
    bf58:	|  +-- bra.w c3b2 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bf5c:	|  |   movea.l 4(sp),a0
    bf60:	|  |   clr.b 128(a0)
    bf64:	|  |   movea.l 4(sp),a0
    bf68:	|  |   move.b 128(a0),d0
    bf6c:	|  |   movea.l 4(sp),a0
    bf70:	|  |   move.b d0,127(a0)
    bf74:	|  |   movea.l 4(sp),a0
    bf78:	|  |   move.b 127(a0),d0
    bf7c:	|  |   movea.l 4(sp),a0
    bf80:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    bf84:	|  |   movea.l 4(sp),a0
    bf88:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    bf8c:	|  |   movea.l 4(sp),a0
    bf90:	|  |   move.b #-64,130(a0)
			break;
    bf96:	|  +-- bra.w c3b2 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bf9a:	|  |   movea.l 4(sp),a0
    bf9e:	|  |   clr.b 128(a0)
    bfa2:	|  |   movea.l 4(sp),a0
    bfa6:	|  |   move.b 128(a0),d0
    bfaa:	|  |   movea.l 4(sp),a0
    bfae:	|  |   move.b d0,127(a0)
    bfb2:	|  |   movea.l 4(sp),a0
    bfb6:	|  |   move.b 127(a0),d0
    bfba:	|  |   movea.l 4(sp),a0
    bfbe:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    bfc2:	|  |   movea.l 4(sp),a0
    bfc6:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    bfca:	|  |   movea.l 4(sp),a0
    bfce:	|  |   move.b #-2,130(a0)
			break;
    bfd4:	|  +-- bra.w c3b2 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bfd8:	|  |   movea.l 4(sp),a0
    bfdc:	|  |   clr.b 128(a0)
    bfe0:	|  |   movea.l 4(sp),a0
    bfe4:	|  |   move.b 128(a0),d0
    bfe8:	|  |   movea.l 4(sp),a0
    bfec:	|  |   move.b d0,127(a0)
    bff0:	|  |   movea.l 4(sp),a0
    bff4:	|  |   move.b 127(a0),d0
    bff8:	|  |   movea.l 4(sp),a0
    bffc:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    c000:	|  |   movea.l 4(sp),a0
    c004:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    c00a:	|  |   movea.l 4(sp),a0
    c00e:	|  |   clr.b 130(a0)
			break;
    c012:	|  +-- bra.w c3b2 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c016:	|  |   movea.l 4(sp),a0
    c01a:	|  |   clr.b 128(a0)
    c01e:	|  |   movea.l 4(sp),a0
    c022:	|  |   move.b 128(a0),d0
    c026:	|  |   movea.l 4(sp),a0
    c02a:	|  |   move.b d0,127(a0)
    c02e:	|  |   movea.l 4(sp),a0
    c032:	|  |   move.b 127(a0),d0
    c036:	|  |   movea.l 4(sp),a0
    c03a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    c03e:	|  |   movea.l 4(sp),a0
    c042:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    c048:	|  |   movea.l 4(sp),a0
    c04c:	|  |   clr.b 130(a0)
			break;
    c050:	|  +-- bra.w c3b2 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c054:	|  |   movea.l 4(sp),a0
    c058:	|  |   clr.b 128(a0)
    c05c:	|  |   movea.l 4(sp),a0
    c060:	|  |   move.b 128(a0),d0
    c064:	|  |   movea.l 4(sp),a0
    c068:	|  |   move.b d0,127(a0)
    c06c:	|  |   movea.l 4(sp),a0
    c070:	|  |   move.b 127(a0),d0
    c074:	|  |   movea.l 4(sp),a0
    c078:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    c07c:	|  |   movea.l 4(sp),a0
    c080:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    c086:	|  |   movea.l 4(sp),a0
    c08a:	|  |   clr.b 130(a0)
			break;
    c08e:	|  +-- bra.w c3b2 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c092:	|  |   movea.l 4(sp),a0
    c096:	|  |   clr.b 128(a0)
    c09a:	|  |   movea.l 4(sp),a0
    c09e:	|  |   move.b 128(a0),d0
    c0a2:	|  |   movea.l 4(sp),a0
    c0a6:	|  |   move.b d0,127(a0)
    c0aa:	|  |   movea.l 4(sp),a0
    c0ae:	|  |   move.b 127(a0),d0
    c0b2:	|  |   movea.l 4(sp),a0
    c0b6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    c0ba:	|  |   movea.l 4(sp),a0
    c0be:	|  |   st 129(a0)
			moveMe->transparency = 0;
    c0c2:	|  |   movea.l 4(sp),a0
    c0c6:	|  |   clr.b 130(a0)
			break;
    c0ca:	|  +-- bra.w c3b2 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c0ce:	|  |   movea.l 4(sp),a0
    c0d2:	|  |   clr.b 128(a0)
    c0d6:	|  |   movea.l 4(sp),a0
    c0da:	|  |   move.b 128(a0),d0
    c0de:	|  |   movea.l 4(sp),a0
    c0e2:	|  |   move.b d0,127(a0)
    c0e6:	|  |   movea.l 4(sp),a0
    c0ea:	|  |   move.b 127(a0),d0
    c0ee:	|  |   movea.l 4(sp),a0
    c0f2:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    c0f6:	|  |   movea.l 4(sp),a0
    c0fa:	|  |   st 129(a0)
			moveMe->transparency = 64;
    c0fe:	|  |   movea.l 4(sp),a0
    c102:	|  |   move.b #64,130(a0)
			break;
    c108:	|  +-- bra.w c3b2 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c10c:	|  |   movea.l 4(sp),a0
    c110:	|  |   clr.b 128(a0)
    c114:	|  |   movea.l 4(sp),a0
    c118:	|  |   move.b 128(a0),d0
    c11c:	|  |   movea.l 4(sp),a0
    c120:	|  |   move.b d0,127(a0)
    c124:	|  |   movea.l 4(sp),a0
    c128:	|  |   move.b 127(a0),d0
    c12c:	|  |   movea.l 4(sp),a0
    c130:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    c134:	|  |   movea.l 4(sp),a0
    c138:	|  |   st 129(a0)
			moveMe->transparency = 128;
    c13c:	|  |   movea.l 4(sp),a0
    c140:	|  |   move.b #-128,130(a0)
			break;
    c146:	|  +-- bra.w c3b2 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c14a:	|  |   movea.l 4(sp),a0
    c14e:	|  |   clr.b 128(a0)
    c152:	|  |   movea.l 4(sp),a0
    c156:	|  |   move.b 128(a0),d0
    c15a:	|  |   movea.l 4(sp),a0
    c15e:	|  |   move.b d0,127(a0)
    c162:	|  |   movea.l 4(sp),a0
    c166:	|  |   move.b 127(a0),d0
    c16a:	|  |   movea.l 4(sp),a0
    c16e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    c172:	|  |   movea.l 4(sp),a0
    c176:	|  |   st 129(a0)
			moveMe->transparency = 192;
    c17a:	|  |   movea.l 4(sp),a0
    c17e:	|  |   move.b #-64,130(a0)
			break;
    c184:	|  +-- bra.w c3b2 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    c188:	|  |   movea.l 4(sp),a0
    c18c:	|  |   move.b #-128,128(a0)
    c192:	|  |   movea.l 4(sp),a0
    c196:	|  |   move.b 128(a0),d0
    c19a:	|  |   movea.l 4(sp),a0
    c19e:	|  |   move.b d0,127(a0)
    c1a2:	|  |   movea.l 4(sp),a0
    c1a6:	|  |   move.b 127(a0),d0
    c1aa:	|  |   movea.l 4(sp),a0
    c1ae:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    c1b2:	|  |   movea.l 4(sp),a0
    c1b6:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    c1bc:	|  |   movea.l 4(sp),a0
    c1c0:	|  |   clr.b 130(a0)
			break;
    c1c4:	|  +-- bra.w c3b2 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    c1c8:	|  |   movea.l 4(sp),a0
    c1cc:	|  |   move.b #-128,128(a0)
    c1d2:	|  |   movea.l 4(sp),a0
    c1d6:	|  |   move.b 128(a0),d0
    c1da:	|  |   movea.l 4(sp),a0
    c1de:	|  |   move.b d0,127(a0)
    c1e2:	|  |   movea.l 4(sp),a0
    c1e6:	|  |   move.b 127(a0),d0
    c1ea:	|  |   movea.l 4(sp),a0
    c1ee:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    c1f2:	|  |   movea.l 4(sp),a0
    c1f6:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    c1fc:	|  |   movea.l 4(sp),a0
    c200:	|  |   clr.b 130(a0)
			break;
    c204:	|  +-- bra.w c3b2 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    c208:	|  |   movea.l 4(sp),a0
    c20c:	|  |   move.b #-128,128(a0)
    c212:	|  |   movea.l 4(sp),a0
    c216:	|  |   move.b 128(a0),d0
    c21a:	|  |   movea.l 4(sp),a0
    c21e:	|  |   move.b d0,127(a0)
    c222:	|  |   movea.l 4(sp),a0
    c226:	|  |   move.b 127(a0),d0
    c22a:	|  |   movea.l 4(sp),a0
    c22e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    c232:	|  |   movea.l 4(sp),a0
    c236:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    c23c:	|  |   movea.l 4(sp),a0
    c240:	|  |   clr.b 130(a0)
			break;
    c244:	|  +-- bra.w c3b2 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    c248:	|  |   movea.l 4(sp),a0
    c24c:	|  |   move.b #-128,128(a0)
    c252:	|  |   movea.l 4(sp),a0
    c256:	|  |   move.b 128(a0),d0
    c25a:	|  |   movea.l 4(sp),a0
    c25e:	|  |   move.b d0,127(a0)
    c262:	|  |   movea.l 4(sp),a0
    c266:	|  |   move.b 127(a0),d0
    c26a:	|  |   movea.l 4(sp),a0
    c26e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    c272:	|  |   movea.l 4(sp),a0
    c276:	|  |   st 129(a0)
			moveMe->transparency = 0;
    c27a:	|  |   movea.l 4(sp),a0
    c27e:	|  |   clr.b 130(a0)
			break;
    c282:	|  +-- bra.w c3b2 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    c286:	|  |   movea.l 4(sp),a0
    c28a:	|  |   st 128(a0)
    c28e:	|  |   movea.l 4(sp),a0
    c292:	|  |   move.b 128(a0),d0
    c296:	|  |   movea.l 4(sp),a0
    c29a:	|  |   move.b d0,127(a0)
    c29e:	|  |   movea.l 4(sp),a0
    c2a2:	|  |   move.b 127(a0),d0
    c2a6:	|  |   movea.l 4(sp),a0
    c2aa:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    c2ae:	|  |   movea.l 4(sp),a0
    c2b2:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    c2b8:	|  |   movea.l 4(sp),a0
    c2bc:	|  |   clr.b 130(a0)
			break;
    c2c0:	|  +-- bra.w c3b2 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    c2c4:	|  |   movea.l 4(sp),a0
    c2c8:	|  |   st 128(a0)
    c2cc:	|  |   movea.l 4(sp),a0
    c2d0:	|  |   move.b 128(a0),d0
    c2d4:	|  |   movea.l 4(sp),a0
    c2d8:	|  |   move.b d0,127(a0)
    c2dc:	|  |   movea.l 4(sp),a0
    c2e0:	|  |   move.b 127(a0),d0
    c2e4:	|  |   movea.l 4(sp),a0
    c2e8:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    c2ec:	|  |   movea.l 4(sp),a0
    c2f0:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    c2f6:	|  |   movea.l 4(sp),a0
    c2fa:	|  |   clr.b 130(a0)
			break;
    c2fe:	|  +-- bra.w c3b2 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    c302:	|  |   movea.l 4(sp),a0
    c306:	|  |   st 128(a0)
    c30a:	|  |   movea.l 4(sp),a0
    c30e:	|  |   move.b 128(a0),d0
    c312:	|  |   movea.l 4(sp),a0
    c316:	|  |   move.b d0,127(a0)
    c31a:	|  |   movea.l 4(sp),a0
    c31e:	|  |   move.b 127(a0),d0
    c322:	|  |   movea.l 4(sp),a0
    c326:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    c32a:	|  |   movea.l 4(sp),a0
    c32e:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    c334:	|  |   movea.l 4(sp),a0
    c338:	|  |   clr.b 130(a0)
			break;
    c33c:	|  +-- bra.s c3b2 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    c33e:	|  |   movea.l 4(sp),a0
    c342:	|  |   st 128(a0)
    c346:	|  |   movea.l 4(sp),a0
    c34a:	|  |   move.b 128(a0),d0
    c34e:	|  |   movea.l 4(sp),a0
    c352:	|  |   move.b d0,127(a0)
    c356:	|  |   movea.l 4(sp),a0
    c35a:	|  |   move.b 127(a0),d0
    c35e:	|  |   movea.l 4(sp),a0
    c362:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    c366:	|  |   movea.l 4(sp),a0
    c36a:	|  |   st 129(a0)
			moveMe->transparency = 0;
    c36e:	|  |   movea.l 4(sp),a0
    c372:	|  |   clr.b 130(a0)
			break;
    c376:	|  +-- bra.s c3b2 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c378:	'--|-> movea.l 4(sp),a0
    c37c:	   |   clr.b 128(a0)
    c380:	   |   movea.l 4(sp),a0
    c384:	   |   move.b 128(a0),d0
    c388:	   |   movea.l 4(sp),a0
    c38c:	   |   move.b d0,127(a0)
    c390:	   |   movea.l 4(sp),a0
    c394:	   |   move.b 127(a0),d0
    c398:	   |   movea.l 4(sp),a0
    c39c:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    c3a0:	   |   movea.l 4(sp),a0
    c3a4:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    c3a8:	   |   movea.l 4(sp),a0
    c3ac:	   |   clr.b 130(a0)
			break;
    c3b0:	   |   nop
	}
}
    c3b2:	   '-> nop
    c3b4:	       rts

0000c3b6 <shufflePeople>:

void shufflePeople () {
    c3b6:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    c3ba:	             move.l #116762,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    c3c2:	             move.l 1c81a <allPeople>,d0
    c3c8:	,----------- beq.w c49e <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    c3cc:	|     ,----- bra.w c48e <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    c3d0:	|  ,--|----> movea.l 16(sp),a0
    c3d4:	|  |  |      movea.l (a0),a0
    c3d6:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    c3dc:	|  |  |      movea.l 16(sp),a0
    c3e0:	|  |  |      movea.l (a0),a0
    c3e2:	|  |  |      move.l 118(a0),d0
    c3e6:	|  |  |      moveq #1,d1
    c3e8:	|  |  |      and.l d1,d0
    c3ea:	|  |  |  ,-- beq.s c402 <shufflePeople+0x4c>
    c3ec:	|  |  |  |   move.l #1148846080,-(sp)
    c3f2:	|  |  |  |   move.l 16(sp),-(sp)
    c3f6:	|  |  |  |   jsr 185da <__addsf3>
    c3fc:	|  |  |  |   addq.l #8,sp
    c3fe:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    c402:	|  |  |  '-> movea.l 16(sp),a0
    c406:	|  |  |      movea.l (a0),a0
    c408:	|  |  |      movea.l 36(a0),a0
    c40c:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    c412:	|  |  |      movea.l 16(sp),a0
    c416:	|  |  |      movea.l (a0),a0
    c418:	|  |  |      movea.l 36(a0),a0
    c41c:	|  |  |      move.l 118(a0),d0
    c420:	|  |  |      moveq #1,d1
    c422:	|  |  |      and.l d1,d0
    c424:	|  |  |  ,-- beq.s c43c <shufflePeople+0x86>
    c426:	|  |  |  |   move.l #1148846080,-(sp)
    c42c:	|  |  |  |   move.l 12(sp),-(sp)
    c430:	|  |  |  |   jsr 185da <__addsf3>
    c436:	|  |  |  |   addq.l #8,sp
    c438:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    c43c:	|  |  |  '-> move.l 8(sp),-(sp)
    c440:	|  |  |      move.l 16(sp),-(sp)
    c444:	|  |  |      jsr 1898a <__gtsf2>
    c44a:	|  |  |      addq.l #8,sp
    c44c:	|  |  |      tst.l d0
    c44e:	|  |  |  ,-- ble.s c480 <shufflePeople+0xca>
			A = (*thisReference);
    c450:	|  |  |  |   movea.l 16(sp),a0
    c454:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    c458:	|  |  |  |   movea.l 16(sp),a0
    c45c:	|  |  |  |   movea.l (a0),a0
    c45e:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    c462:	|  |  |  |   movea.l (sp),a0
    c464:	|  |  |  |   move.l 36(a0),d0
    c468:	|  |  |  |   movea.l 4(sp),a0
    c46c:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    c470:	|  |  |  |   movea.l (sp),a0
    c472:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    c478:	|  |  |  |   movea.l 16(sp),a0
    c47c:	|  |  |  |   move.l (sp),(a0)
    c47e:	|  |  +--|-- bra.s c48e <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    c480:	|  |  |  '-> movea.l 16(sp),a0
    c484:	|  |  |      move.l (a0),d0
    c486:	|  |  |      moveq #36,d1
    c488:	|  |  |      add.l d0,d1
    c48a:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    c48e:	|  |  '----> movea.l 16(sp),a0
    c492:	|  |         movea.l (a0),a0
    c494:	|  |         move.l 36(a0),d0
    c498:	|  '-------- bne.w c3d0 <shufflePeople+0x1a>
    c49c:	|        ,-- bra.s c4a0 <shufflePeople+0xea>
	if (!allPeople) return;
    c49e:	'--------|-> nop
		}
	}
}
    c4a0:	         '-> lea 20(sp),sp
    c4a4:	             rts

0000c4a6 <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    c4a6:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    c4a8:	       tst.l 8(sp)
    c4ac:	   ,-- bgt.s c4b2 <setCharacterWalkSpeed+0xc>
    c4ae:	   |   clr.w d0
    c4b0:	,--|-- bra.s c4d0 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    c4b2:	|  '-> move.l 12(sp),-(sp)
    c4b6:	|      jsr ae9c <findPerson>
    c4bc:	|      addq.l #4,sp
    c4be:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    c4c0:	|  ,-- bne.s c4c6 <setCharacterWalkSpeed+0x20>
    c4c2:	|  |   clr.w d0
    c4c4:	+--|-- bra.s c4d0 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    c4c6:	|  '-> movea.l (sp),a0
    c4c8:	|      move.l 8(sp),28(a0)
	return TRUE;
    c4ce:	|      moveq #1,d0
}
    c4d0:	'----> addq.l #4,sp
    c4d2:	       rts

0000c4d4 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    c4d4:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    c4d6:	       move.l 8(sp),-(sp)
    c4da:	       jsr ae9c <findPerson>
    c4e0:	       addq.l #4,sp
    c4e2:	       move.l d0,(sp)
    if (thisPerson) {
    c4e4:	,----- beq.s c504 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    c4e6:	|      movea.l (sp),a0
    c4e8:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    c4ee:	|      moveq #2,d0
    c4f0:	|      and.l 12(sp),d0
    c4f4:	|  ,-- beq.s c500 <setPersonExtra+0x2c>
    c4f6:	|  |   movea.l (sp),a0
    c4f8:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    c500:	|  '-> moveq #1,d0
    c502:	|  ,-- bra.s c506 <setPersonExtra+0x32>
    }
    return FALSE;
    c504:	'--|-> clr.w d0
}
    c506:	   '-> addq.l #4,sp
    c508:	       rts

0000c50a <setScale>:


void setScale (short int h, short int d) {
    c50a:	subq.l #4,sp
    c50c:	move.l 8(sp),d1
    c510:	move.l 12(sp),d0
    c514:	move.w d1,d1
    c516:	move.w d1,2(sp)
    c51a:	move.w d0,d0
    c51c:	move.w d0,(sp)
	scaleHorizon = h;
    c51e:	move.w 2(sp),1c136 <scaleHorizon>
	scaleDivide = d;
    c526:	move.w (sp),1c138 <scaleDivide>
}
    c52c:	nop
    c52e:	addq.l #4,sp
    c530:	rts

0000c532 <setShown>:

void setShown (BOOL h, int ob) {
    c532:	    subq.l #8,sp
    c534:	    move.l 12(sp),d0
    c538:	    move.w d0,d0
    c53a:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    c53e:	    move.l 16(sp),-(sp)
    c542:	    jsr ae9c <findPerson>
    c548:	    addq.l #4,sp
    c54a:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    c54e:	,-- beq.s c55a <setShown+0x28>
    c550:	|   movea.l 4(sp),a0
    c554:	|   move.w 2(sp),104(a0)
}
    c55a:	'-> nop
    c55c:	    addq.l #8,sp
    c55e:	    rts

0000c560 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    c560:	       subq.l #8,sp
    c562:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    c564:	       movea.l 16(sp),a0
    c568:	       move.l 92(a0),d0
    c56c:	       move.l d0,d1
    c56e:	       addi.l #360,d1
    c574:	       movea.l 16(sp),a0
    c578:	       move.l 96(a0),d0
    c57c:	       move.l d1,d2
    c57e:	       sub.l d0,d2
    c580:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    c584:	       movea.l 16(sp),a0
    c588:	       move.l 122(a0),d0
    c58c:	   ,-- beq.s c598 <spinStep+0x38>
    c58e:	   |   movea.l 16(sp),a0
    c592:	   |   move.l 122(a0),d0
    c596:	,--|-- bra.s c5b2 <spinStep+0x52>
    c598:	|  '-> movea.l 16(sp),a0
    c59c:	|      movea.l 80(a0),a0
    c5a0:	|      move.l 4(a0),d0
    c5a4:	|      move.l d0,-(sp)
    c5a6:	|      pea 168 <decodeFilename+0x50>
    c5aa:	|      jsr 18df6 <__divsi3>
    c5b0:	|      addq.l #8,sp
    c5b2:	'----> move.l d0,4(sp)
	while (diff > 180) {
    c5b6:	   ,-- bra.s c5c0 <spinStep+0x60>
		diff -= 360;
    c5b8:	,--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    c5c0:	|  '-> cmpi.l #180,8(sp)
    c5c8:	'----- bgt.s c5b8 <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    c5ca:	       move.l 8(sp),d0
    c5ce:	       cmp.l 4(sp),d0
    c5d2:	   ,-- blt.s c5f0 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    c5d4:	   |   movea.l 16(sp),a0
    c5d8:	   |   move.l 92(a0),d0
    c5dc:	   |   sub.l 4(sp),d0
    c5e0:	   |   move.l d0,-(sp)
    c5e2:	   |   move.l 20(sp),-(sp)
    c5e6:	   |   jsr c6d0 <turnMeAngle>
    c5ec:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    c5ee:	,--|-- bra.s c636 <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    c5f0:	|  '-> move.l 4(sp),d0
    c5f4:	|      neg.l d0
    c5f6:	|      cmp.l 8(sp),d0
    c5fa:	|  ,-- blt.s c618 <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    c5fc:	|  |   movea.l 16(sp),a0
    c600:	|  |   move.l 92(a0),d0
    c604:	|  |   add.l 4(sp),d0
    c608:	|  |   move.l d0,-(sp)
    c60a:	|  |   move.l 20(sp),-(sp)
    c60e:	|  |   jsr c6d0 <turnMeAngle>
    c614:	|  |   addq.l #8,sp
}
    c616:	+--|-- bra.s c636 <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    c618:	|  '-> movea.l 16(sp),a0
    c61c:	|      move.l 96(a0),d0
    c620:	|      move.l d0,-(sp)
    c622:	|      move.l 20(sp),-(sp)
    c626:	|      jsr c6d0 <turnMeAngle>
    c62c:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    c62e:	|      movea.l 16(sp),a0
    c632:	|      clr.w 66(a0)
}
    c636:	'----> nop
    c638:	       move.l (sp)+,d2
    c63a:	       addq.l #8,sp
    c63c:	       rts

0000c63e <stopPerson>:


BOOL stopPerson (int o) {
    c63e:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    c640:	       move.l 8(sp),-(sp)
    c644:	       jsr ae9c <findPerson>
    c64a:	       addq.l #4,sp
    c64c:	       move.l d0,(sp)
    if (moveMe)
    c64e:	,----- beq.s c68c <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    c650:	|      movea.l (sp),a0
    c652:	|      move.l 68(a0),d0
    c656:	+----- beq.s c68c <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    c658:	|      movea.l (sp),a0
    c65a:	|      move.l 68(a0),d0
    c65e:	|      move.l d0,-(sp)
    c660:	|      jsr 5526 <abortFunction>
    c666:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    c668:	|      movea.l (sp),a0
    c66a:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    c66e:	|      movea.l (sp),a0
    c670:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    c674:	|      movea.l (sp),a0
    c676:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    c67a:	|      clr.l -(sp)
    c67c:	|      move.l 4(sp),-(sp)
    c680:	|      jsr 46c8 <setFrames>
    c686:	|      addq.l #8,sp
            return TRUE;
    c688:	|      moveq #1,d0
    c68a:	|  ,-- bra.s c68e <stopPerson+0x50>
        }
    return FALSE;
    c68c:	'--|-> clr.w d0
}
    c68e:	   '-> addq.l #4,sp
    c690:	       rts

0000c692 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    c692:	       subq.l #8,sp
	int total = 0;
    c694:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    c698:	       clr.l (sp)
    c69a:	   ,-- bra.s c6bc <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    c69c:	,--|-> movea.l 12(sp),a0
    c6a0:	|  |   movea.l 4(a0),a0
    c6a4:	|  |   move.l (sp),d1
    c6a6:	|  |   move.l d1,d0
    c6a8:	|  |   add.l d0,d0
    c6aa:	|  |   add.l d1,d0
    c6ac:	|  |   add.l d0,d0
    c6ae:	|  |   add.l d0,d0
    c6b0:	|  |   adda.l d0,a0
    c6b2:	|  |   move.l 4(a0),d0
    c6b6:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    c6ba:	|  |   addq.l #1,(sp)
    c6bc:	|  '-> movea.l 12(sp),a0
    c6c0:	|      move.l 8(a0),d0
    c6c4:	|      cmp.l (sp),d0
    c6c6:	'----- bgt.s c69c <timeForAnim+0xa>
	}
	return total;
    c6c8:	       move.l 4(sp),d0
}
    c6cc:	       addq.l #8,sp
    c6ce:	       rts

0000c6d0 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    c6d0:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    c6d2:	       movea.l 8(sp),a0
    c6d6:	       movea.l 80(a0),a0
    c6da:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    c6de:	       movea.l 8(sp),a0
    c6e2:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    c6e8:	       move.l (sp),-(sp)
    c6ea:	       pea b4 <_start+0xb4>
    c6ee:	       jsr 18df6 <__divsi3>
    c6f4:	       addq.l #8,sp
    c6f6:	       move.l d0,d1
    c6f8:	       addi.l #180,d1
    c6fe:	       movea.l 8(sp),a0
    c702:	       move.l 100(a0),d0
    c706:	       add.l d1,d0
    c708:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    c70c:	   ,-- bra.s c716 <turnMeAngle+0x46>
    c70e:	,--|-> addi.l #-360,12(sp)
    c716:	|  '-> cmpi.l #359,12(sp)
    c71e:	'----- bgt.s c70e <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    c720:	       move.l (sp),-(sp)
    c722:	       move.l 16(sp),-(sp)
    c726:	       jsr 18d78 <__mulsi3>
    c72c:	       addq.l #8,sp
    c72e:	       pea 168 <decodeFilename+0x50>
    c732:	       move.l d0,-(sp)
    c734:	       jsr 18df6 <__divsi3>
    c73a:	       addq.l #8,sp
    c73c:	       movea.l 8(sp),a0
    c740:	       move.l d0,106(a0)
}
    c744:	       nop
    c746:	       addq.l #4,sp
    c748:	       rts

0000c74a <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    c74a:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    c74c:	          move.l 8(sp),-(sp)
    c750:	          jsr ae9c <findPerson>
    c756:	          addq.l #4,sp
    c758:	          move.l d0,(sp)
    if (thisPerson) {
    c75a:	,-------- beq.s c7ba <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    c75c:	|         movea.l (sp),a0
    c75e:	|         move.l 68(a0),d0
    c762:	|     ,-- beq.s c774 <turnPersonToFace+0x2a>
    c764:	|     |   movea.l (sp),a0
    c766:	|     |   move.l 68(a0),d0
    c76a:	|     |   move.l d0,-(sp)
    c76c:	|     |   jsr 5526 <abortFunction>
    c772:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    c774:	|     '-> movea.l (sp),a0
    c776:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    c77a:	|         movea.l (sp),a0
    c77c:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    c780:	|         movea.l (sp),a0
    c782:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    c786:	|         move.l 12(sp),-(sp)
    c78a:	|         move.l 4(sp),-(sp)
    c78e:	|         jsr c6d0 <turnMeAngle>
    c794:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    c796:	|         movea.l 1c6fe <speech>,a0
    c79c:	|         move.l (a0),d0
    c79e:	|         cmp.l (sp),d0
    c7a0:	|  ,----- bne.s c7a6 <turnPersonToFace+0x5c>
    c7a2:	|  |      moveq #2,d0
    c7a4:	|  |  ,-- bra.s c7a8 <turnPersonToFace+0x5e>
    c7a6:	|  '--|-> moveq #0,d0
    c7a8:	|     '-> move.l d0,-(sp)
    c7aa:	|         move.l 4(sp),-(sp)
    c7ae:	|         jsr 46c8 <setFrames>
    c7b4:	|         addq.l #8,sp
        return TRUE;
    c7b6:	|         moveq #1,d0
    c7b8:	|     ,-- bra.s c7bc <turnPersonToFace+0x72>
    }
    return FALSE;
    c7ba:	'-----|-> clr.w d0
}
    c7bc:	      '-> addq.l #4,sp
    c7be:	          rts

0000c7c0 <walkAllPeople>:

void walkAllPeople() {
    c7c0:	             subq.l #4,sp
	struct onScreenPerson *thisPerson = allPeople;
    c7c2:	             move.l 1c81a <allPeople>,(sp)

	while (thisPerson) {
    c7c8:	   ,-------- bra.s c838 <walkAllPeople+0x78>
		if (thisPerson->walking) {
    c7ca:	,--|-------> movea.l (sp),a0
    c7cc:	|  |         move.w 64(a0),d0
    c7d0:	|  |     ,-- beq.s c7e4 <walkAllPeople+0x24>
			walkMe(thisPerson, TRUE);
    c7d2:	|  |     |   pea 1 <_start+0x1>
    c7d6:	|  |     |   move.l 4(sp),-(sp)
    c7da:	|  |     |   jsr c844 <walkMe>
    c7e0:	|  |     |   addq.l #8,sp
    c7e2:	|  |  ,--|-- bra.s c804 <walkAllPeople+0x44>
		} else if (thisPerson->spinning) {
    c7e4:	|  |  |  '-> movea.l (sp),a0
    c7e6:	|  |  |      move.w 66(a0),d0
    c7ea:	|  |  +----- beq.s c804 <walkAllPeople+0x44>
			spinStep(thisPerson);
    c7ec:	|  |  |      move.l (sp),-(sp)
    c7ee:	|  |  |      jsr c560 <spinStep>
    c7f4:	|  |  |      addq.l #4,sp
			setFrames(thisPerson, ANI_STAND);
    c7f6:	|  |  |      clr.l -(sp)
    c7f8:	|  |  |      move.l 4(sp),-(sp)
    c7fc:	|  |  |      jsr 46c8 <setFrames>
    c802:	|  |  |      addq.l #8,sp
		}
		if ((!thisPerson->walking) && (!thisPerson->spinning) && thisPerson->continueAfterWalking) {
    c804:	|  |  '----> movea.l (sp),a0
    c806:	|  |         move.w 64(a0),d0
    c80a:	|  |     ,-- bne.s c832 <walkAllPeople+0x72>
    c80c:	|  |     |   movea.l (sp),a0
    c80e:	|  |     |   move.w 66(a0),d0
    c812:	|  |     +-- bne.s c832 <walkAllPeople+0x72>
    c814:	|  |     |   movea.l (sp),a0
    c816:	|  |     |   move.l 68(a0),d0
    c81a:	|  |     +-- beq.s c832 <walkAllPeople+0x72>
			restartFunction(thisPerson->continueAfterWalking);
    c81c:	|  |     |   movea.l (sp),a0
    c81e:	|  |     |   move.l 68(a0),d0
    c822:	|  |     |   move.l d0,-(sp)
    c824:	|  |     |   jsr 792a <restartFunction>
    c82a:	|  |     |   addq.l #4,sp
			thisPerson->continueAfterWalking = NULL;
    c82c:	|  |     |   movea.l (sp),a0
    c82e:	|  |     |   clr.l 68(a0)
		}
		thisPerson = thisPerson->next;
    c832:	|  |     '-> movea.l (sp),a0
    c834:	|  |         move.l 36(a0),(sp)
	while (thisPerson) {
    c838:	|  '-------> tst.l (sp)
    c83a:	'----------- bne.s c7ca <walkAllPeople+0xa>
	}
}
    c83c:	             nop
    c83e:	             nop
    c840:	             addq.l #4,sp
    c842:	             rts

0000c844 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    c844:	                lea -20(sp),sp
    c848:	                move.l d3,-(sp)
    c84a:	                move.l d2,-(sp)
    c84c:	                move.l 36(sp),d0
    c850:	                move.w d0,d0
    c852:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    c856:	                cmpi.w #-1,10(sp)
    c85c:	,-------------- bne.s c864 <walkMe+0x20>
    c85e:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c864:	>-------------> movea.l 32(sp),a0
    c868:	|               move.l 48(a0),d0
    c86c:	|               move.l d0,-(sp)
    c86e:	|               jsr 1881e <__floatsisf>
    c874:	|               addq.l #4,sp
    c876:	|               move.l d0,d1
    c878:	|               movea.l 32(sp),a0
    c87c:	|               move.l (a0),d0
    c87e:	|               move.l d0,-(sp)
    c880:	|               move.l d1,-(sp)
    c882:	|               jsr 18b12 <__subsf3>
    c888:	|               addq.l #8,sp
    c88a:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    c88e:	|               movea.l 32(sp),a0
    c892:	|               move.l 52(a0),d0
    c896:	|               move.l d0,-(sp)
    c898:	|               jsr 1881e <__floatsisf>
    c89e:	|               addq.l #4,sp
    c8a0:	|               move.l d0,d1
    c8a2:	|               movea.l 32(sp),a0
    c8a6:	|               move.l 4(a0),d0
    c8aa:	|               move.l d0,-(sp)
    c8ac:	|               move.l d1,-(sp)
    c8ae:	|               jsr 18b12 <__subsf3>
    c8b4:	|               addq.l #8,sp
    c8b6:	|               move.l d0,-(sp)
    c8b8:	|               move.l d0,-(sp)
    c8ba:	|               jsr 185da <__addsf3>
    c8c0:	|               addq.l #8,sp
    c8c2:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    c8c6:	|               movea.l 32(sp),a0
    c8ca:	|               move.l 32(a0),d2
    c8ce:	|               movea.l 32(sp),a0
    c8d2:	|               move.l 28(a0),d0
    c8d6:	|               move.l d0,-(sp)
    c8d8:	|               jsr 1881e <__floatsisf>
    c8de:	|               addq.l #4,sp
    c8e0:	|               move.l d0,-(sp)
    c8e2:	|               move.l d2,-(sp)
    c8e4:	|               jsr 188d0 <__mulsf3>
    c8ea:	|               addq.l #8,sp
    c8ec:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    c8f0:	|               move.l 24(sp),-(sp)
    c8f4:	|               jsr 18740 <__extendsfdf2>
    c8fa:	|               addq.l #4,sp
    c8fc:	|               move.l #-1717986918,-(sp)
    c902:	|               move.l #1070176665,-(sp)
    c908:	|               move.l d1,-(sp)
    c90a:	|               move.l d0,-(sp)
    c90c:	|               jsr 189f6 <__ltdf2>
    c912:	|               lea 16(sp),sp
    c916:	|               tst.l d0
    c918:	|           ,-- bge.s c922 <walkMe+0xde>
    c91a:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    c922:	|           '-> move.l 20(sp),-(sp)
    c926:	|               jsr 187b6 <__fixsfsi>
    c92c:	|               addq.l #4,sp
    c92e:	|               move.l d0,-(sp)
    c930:	|               jsr 9a8c <TF_abs>
    c936:	|               addq.l #4,sp
    c938:	|               move.l d0,d2
    c93a:	|               move.l 16(sp),-(sp)
    c93e:	|               jsr 187b6 <__fixsfsi>
    c944:	|               addq.l #4,sp
    c946:	|               move.l d0,-(sp)
    c948:	|               jsr 9a8c <TF_abs>
    c94e:	|               addq.l #4,sp
    c950:	|               cmp.l d2,d0
    c952:	|        ,----- bgt.s c976 <walkMe+0x132>
    c954:	|        |      move.l 20(sp),-(sp)
    c958:	|        |      jsr 187b6 <__fixsfsi>
    c95e:	|        |      addq.l #4,sp
    c960:	|        |      move.l d0,-(sp)
    c962:	|        |      jsr 9a8c <TF_abs>
    c968:	|        |      addq.l #4,sp
    c96a:	|        |      move.l d0,-(sp)
    c96c:	|        |      jsr 1881e <__floatsisf>
    c972:	|        |      addq.l #4,sp
    c974:	|        |  ,-- bra.s c996 <walkMe+0x152>
    c976:	|        '--|-> move.l 16(sp),-(sp)
    c97a:	|           |   jsr 187b6 <__fixsfsi>
    c980:	|           |   addq.l #4,sp
    c982:	|           |   move.l d0,-(sp)
    c984:	|           |   jsr 9a8c <TF_abs>
    c98a:	|           |   addq.l #4,sp
    c98c:	|           |   move.l d0,-(sp)
    c98e:	|           |   jsr 1881e <__floatsisf>
    c994:	|           |   addq.l #4,sp
    c996:	|           '-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    c99a:	|               move.l 12(sp),-(sp)
    c99e:	|               jsr 187b6 <__fixsfsi>
    c9a4:	|               addq.l #4,sp
    c9a6:	|               move.l d0,-(sp)
    c9a8:	|               jsr 9a8c <TF_abs>
    c9ae:	|               addq.l #4,sp
    c9b0:	|               move.l d0,-(sp)
    c9b2:	|               jsr 1881e <__floatsisf>
    c9b8:	|               addq.l #4,sp
    c9ba:	|               move.l d0,-(sp)
    c9bc:	|               move.l 28(sp),-(sp)
    c9c0:	|               jsr 18a44 <__ltsf2>
    c9c6:	|               addq.l #8,sp
    c9c8:	|               tst.l d0
    c9ca:	|        ,----- bge.w ca7c <walkMe+0x238>
			if (thisPerson->spinning) {
    c9ce:	|        |      movea.l 32(sp),a0
    c9d2:	|        |      move.w 66(a0),d0
    c9d6:	|        |  ,-- beq.s c9f4 <walkMe+0x1b0>
				spinStep(thisPerson);
    c9d8:	|        |  |   move.l 32(sp),-(sp)
    c9dc:	|        |  |   jsr c560 <spinStep>
    c9e2:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    c9e4:	|        |  |   pea 1 <_start+0x1>
    c9e8:	|        |  |   move.l 36(sp),-(sp)
    c9ec:	|        |  |   jsr 46c8 <setFrames>
    c9f2:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    c9f4:	|        |  '-> move.l 24(sp),-(sp)
    c9f8:	|        |      move.l 16(sp),-(sp)
    c9fc:	|        |      jsr 186d4 <__divsf3>
    ca02:	|        |      addq.l #8,sp
    ca04:	|        |      move.l d0,24(sp)
			if (move)
    ca08:	|        |      tst.w 10(sp)
    ca0c:	|        |  ,-- beq.s ca76 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    ca0e:	|        |  |   movea.l 32(sp),a0
    ca12:	|        |  |   move.l 4(a0),d2
    ca16:	|        |  |   move.l 24(sp),d0
    ca1a:	|        |  |   move.l d0,-(sp)
    ca1c:	|        |  |   move.l d0,-(sp)
    ca1e:	|        |  |   jsr 185da <__addsf3>
    ca24:	|        |  |   addq.l #8,sp
    ca26:	|        |  |   move.l d0,-(sp)
    ca28:	|        |  |   move.l 20(sp),-(sp)
    ca2c:	|        |  |   jsr 186d4 <__divsf3>
    ca32:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    ca34:	|        |  |   move.l d0,-(sp)
    ca36:	|        |  |   move.l d2,-(sp)
    ca38:	|        |  |   jsr 185da <__addsf3>
    ca3e:	|        |  |   addq.l #8,sp
    ca40:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    ca42:	|        |  |   movea.l 32(sp),a0
    ca46:	|        |  |   move.l (a0),d3
    ca48:	|        |  |   move.l 24(sp),-(sp)
    ca4c:	|        |  |   move.l 24(sp),-(sp)
    ca50:	|        |  |   jsr 186d4 <__divsf3>
    ca56:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    ca58:	|        |  |   move.l d0,-(sp)
    ca5a:	|        |  |   move.l d3,-(sp)
    ca5c:	|        |  |   jsr 185da <__addsf3>
    ca62:	|        |  |   addq.l #8,sp
    ca64:	|        |  |   move.l d2,-(sp)
    ca66:	|        |  |   move.l d0,-(sp)
    ca68:	|        |  |   move.l 40(sp),-(sp)
    ca6c:	|        |  |   jsr b646 <moveAndScale>
    ca72:	|        |  |   lea 12(sp),sp
			return TRUE;
    ca76:	|        |  '-> moveq #1,d0
    ca78:	|  ,-----|----- bra.w cb2a <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    ca7c:	|  |     '----> movea.l 32(sp),a0
    ca80:	|  |            move.l 56(a0),d0
    ca84:	|  |            moveq #-1,d1
    ca86:	|  |            cmp.l d0,d1
    ca88:	|  |        ,-- bne.s cac0 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    ca8a:	|  |        |   movea.l 32(sp),a0
    ca8e:	|  |        |   move.l 110(a0),d0
    ca92:	|  |        |   moveq #-1,d1
    ca94:	|  |        |   cmp.l d0,d1
    ca96:	|  |  ,-----|-- beq.s cad4 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    ca98:	|  |  |     |   movea.l 32(sp),a0
    ca9c:	|  |  |     |   move.l 110(a0),d0
    caa0:	|  |  |     |   movea.l 32(sp),a0
    caa4:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    caa8:	|  |  |     |   movea.l 32(sp),a0
    caac:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    cab2:	|  |  |     |   move.l 32(sp),-(sp)
    cab6:	|  |  |     |   jsr c560 <spinStep>
    cabc:	|  |  |     |   addq.l #4,sp
			}
			break;
    cabe:	|  |  +-----|-- bra.s cad4 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    cac0:	|  |  |     '-> move.l 32(sp),-(sp)
    cac4:	|  |  |         jsr a1fe <doBorderStuff>
    caca:	|  |  |         addq.l #4,sp
    cacc:	|  |  |         tst.w d0
    cace:	|  |  |  ,----- beq.s cad8 <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    cad0:	'--|--|--|----- bra.w c864 <walkMe+0x20>
			break;
    cad4:	   |  '--|----> nop
    cad6:	   |     |  ,-- bra.s cada <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    cad8:	   |     '--|-> nop
	}

	thisPerson->walking = FALSE;
    cada:	   |        '-> movea.l 32(sp),a0
    cade:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    cae2:	   |            clr.l -(sp)
    cae4:	   |            move.l 36(sp),-(sp)
    cae8:	   |            jsr 46c8 <setFrames>
    caee:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    caf0:	   |            movea.l 32(sp),a0
    caf4:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    caf8:	   |            move.l d0,-(sp)
    cafa:	   |            jsr 1881e <__floatsisf>
    cb00:	   |            addq.l #4,sp
    cb02:	   |            move.l d0,d2
				 thisPerson->walkToX,
    cb04:	   |            movea.l 32(sp),a0
    cb08:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    cb0c:	   |            move.l d0,-(sp)
    cb0e:	   |            jsr 1881e <__floatsisf>
    cb14:	   |            addq.l #4,sp
    cb16:	   |            move.l d2,-(sp)
    cb18:	   |            move.l d0,-(sp)
    cb1a:	   |            move.l 40(sp),-(sp)
    cb1e:	   |            jsr b646 <moveAndScale>
    cb24:	   |            lea 12(sp),sp
	return FALSE;
    cb28:	   |            clr.w d0
}
    cb2a:	   '----------> move.l (sp)+,d2
    cb2c:	                move.l (sp)+,d3
    cb2e:	                lea 20(sp),sp
    cb32:	                rts

0000cb34 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    cb34:	       subq.l #8,sp
    cb36:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    cb38:	   ,-- bra.s cb68 <clearStackLib+0x34>
		k = stackLib;
    cb3a:	,--|-> move.l 1c846 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    cb42:	|  |   movea.l 1c846 <stackLib>,a0
    cb48:	|  |   move.l 4(a0),d0
    cb4c:	|  |   move.l d0,1c846 <stackLib>
		FreeVec(k);
    cb52:	|  |   move.l 8(sp),4(sp)
    cb58:	|  |   move.l 1c7ba <SysBase>,d0
    cb5e:	|  |   movea.l d0,a6
    cb60:	|  |   movea.l 4(sp),a1
    cb64:	|  |   jsr -690(a6)
	while (stackLib) {
    cb68:	|  '-> move.l 1c846 <stackLib>,d0
    cb6e:	'----- bne.s cb3a <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    cb70:	       clr.l 1c842 <stackLibTotal>
}
    cb76:	       nop
    cb78:	       movea.l (sp)+,a6
    cb7a:	       addq.l #8,sp
    cb7c:	       rts

0000cb7e <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    cb7e:	          lea -128(sp),sp
    cb82:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    cb86:	      ,-- bra.s cb98 <loadGame+0x1a>
    cb88:	   ,--|-> move.l 1c752 <allRunningFunctions>,d0
    cb8e:	   |  |   move.l d0,-(sp)
    cb90:	   |  |   jsr 654a <finishFunction>
    cb96:	   |  |   addq.l #4,sp
    cb98:	   |  '-> move.l 1c752 <allRunningFunctions>,d0
    cb9e:	   '----- bne.s cb88 <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    cba0:	          pea 1c84a <ssgVersion>
    cba6:	          pea 1a5e6 <PutChar+0x1758>
    cbac:	          pea 41 <_start+0x41>
    cbb0:	          pea 53 <_start+0x53>
    cbb4:	          move.l 160(sp),-(sp)
    cbb8:	          jsr 7542 <openAndVerify>
    cbbe:	          lea 20(sp),sp
    cbc2:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    cbc6:	      ,-- bne.s cbce <loadGame+0x50>
    cbc8:	      |   clr.w d0
    cbca:	,-----|-- bra.w ce74 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    cbce:	|     '-> move.l 112(sp),108(sp)
    cbd4:	|         lea 140(sp),a0
    cbd8:	|         lea -126(a0),a0
    cbdc:	|         move.l a0,120(sp)
    cbe0:	|         moveq #8,d0
    cbe2:	|         move.l d0,116(sp)
    cbe6:	|         move.l 1c7c2 <DOSBase>,d0
    cbec:	|         movea.l d0,a6
    cbee:	|         move.l 108(sp),d1
    cbf2:	|         move.l 120(sp),d2
    cbf6:	|         move.l 116(sp),d3
    cbfa:	|         jsr -42(a6)
    cbfe:	|         move.l d0,132(sp)
    cc02:	|         move.l 132(sp),d0
    cc06:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    cc0a:	|         moveq #8,d0
    cc0c:	|         cmp.l 128(sp),d0
    cc10:	|     ,-- beq.s cc20 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    cc12:	|     |   pea 1a607 <PutChar+0x1779>
    cc18:	|     |   jsr 183ec <KPrintF>
    cc1e:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    cc20:	|     '-> move.l 14(sp),d1
    cc24:	|         move.l 1c75c <fileTime>,d0
    cc2a:	|         cmp.l d1,d0
    cc2c:	|     ,-- bne.s cc3c <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    cc2e:	|     |   move.l 18(sp),d1
    cc32:	|     |   move.l 1c760 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    cc38:	|     |   cmp.l d1,d0
    cc3a:	|  ,--|-- beq.s cc5c <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    cc3c:	|  |  '-> move.l 144(sp),-(sp)
    cc40:	|  |      pea 1a623 <PutChar+0x1795>
    cc46:	|  |      pea 1a6ea <PutChar+0x185c>
    cc4c:	|  |      jsr 183ec <KPrintF>
    cc52:	|  |      lea 12(sp),sp
		return FALSE; 
    cc56:	|  |      clr.w d0
    cc58:	+--|----- bra.w ce74 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    cc5c:	|  '----> move.l 112(sp),124(sp)
    cc62:	|         move.l 1c7c2 <DOSBase>,d0
    cc68:	|         movea.l d0,a6
    cc6a:	|         move.l 124(sp),d1
    cc6e:	|         jsr -306(a6)
    cc72:	|         move.l d0,136(sp)
    cc76:	|         move.l 136(sp),d0
    cc7a:	|         move.l d0,d0
    cc7c:	|         move.w d0,1c000 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    cc82:	|         move.l 112(sp),100(sp)
    cc88:	|         move.l 1c7c2 <DOSBase>,d0
    cc8e:	|         movea.l d0,a6
    cc90:	|         move.l 100(sp),d1
    cc94:	|         jsr -306(a6)
    cc98:	|         move.l d0,96(sp)
    cc9c:	|         move.l 96(sp),d0
    cca0:	|         move.l d0,d0
    cca2:	|         move.w d0,1c75a <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    cca8:	|         move.l 112(sp),92(sp)
    ccae:	|         move.l 1c7c2 <DOSBase>,d0
    ccb4:	|         movea.l d0,a6
    ccb6:	|         move.l 92(sp),d1
    ccba:	|         jsr -306(a6)
    ccbe:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    ccc2:	|         move.l 112(sp),84(sp)
    ccc8:	|         move.l 1c7c2 <DOSBase>,d0
    ccce:	|         movea.l d0,a6
    ccd0:	|         move.l 84(sp),d1
    ccd4:	|         jsr -306(a6)
    ccd8:	|         move.l d0,80(sp)
    ccdc:	|         move.l 80(sp),d0
    cce0:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    cce4:	|     ,-- beq.s cd18 <loadGame+0x19a>
		fontNum = get2bytes (fp);
    cce6:	|     |   move.l 112(sp),-(sp)
    ccea:	|     |   jsr 6bc <get2bytes>
    ccf0:	|     |   addq.l #4,sp
    ccf2:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    ccf6:	|     |   move.l 112(sp),-(sp)
    ccfa:	|     |   jsr 6bc <get2bytes>
    cd00:	|     |   addq.l #4,sp
    cd02:	|     |   move.l d0,1c8ae <fontHeight>
		charOrder = readString(fp);		
    cd08:	|     |   move.l 112(sp),-(sp)
    cd0c:	|     |   jsr b02 <readString>
    cd12:	|     |   addq.l #4,sp
    cd14:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    cd18:	|     '-> move.l 104(sp),70(sp)
    cd1e:	|         move.l 1c7ba <SysBase>,d0
    cd24:	|         movea.l d0,a6
    cd26:	|         movea.l 70(sp),a1
    cd2a:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    cd2e:	|         move.l 112(sp),-(sp)
    cd32:	|         jsr 854 <getSigned>
    cd38:	|         addq.l #4,sp
    cd3a:	|         move.w d0,1c6b0 <fontSpace>

	killAllPeople ();
    cd40:	|         jsr b2b0 <killAllPeople>
	killAllRegions ();
    cd46:	|         jsr 16bfc <killAllRegions>

	int camerX = get2bytes (fp);
    cd4c:	|         move.l 112(sp),-(sp)
    cd50:	|         jsr 6bc <get2bytes>
    cd56:	|         addq.l #4,sp
    cd58:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    cd5c:	|         move.l 112(sp),-(sp)
    cd60:	|         jsr 6bc <get2bytes>
    cd66:	|         addq.l #4,sp
    cd68:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    cd6c:	|         move.l 112(sp),-(sp)
    cd70:	|         jsr 7d8 <getFloat>
    cd76:	|         addq.l #4,sp
    cd78:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    cd7c:	|         move.l 112(sp),54(sp)
    cd82:	|         move.l 1c7c2 <DOSBase>,d0
    cd88:	|         movea.l d0,a6
    cd8a:	|         move.l 54(sp),d1
    cd8e:	|         jsr -306(a6)
    cd92:	|         move.l d0,50(sp)
    cd96:	|         move.l 50(sp),d0
    cd9a:	|         move.l d0,d0
    cd9c:	|         move.b d0,1c11e <brightnessLevel>

	loadHandlers (fp);
    cda2:	|         move.l 112(sp),-(sp)
    cda6:	|         jsr 74a2 <loadHandlers>
    cdac:	|         addq.l #4,sp
	loadRegions (fp);
    cdae:	|         move.l 112(sp),-(sp)
    cdb2:	|         jsr 16c58 <loadRegions>
    cdb8:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    cdba:	|         moveq #12,d0
    cdbc:	|         move.l d0,46(sp)
    cdc0:	|         clr.l 42(sp)
    cdc4:	|         move.l 1c7ba <SysBase>,d0
    cdca:	|         movea.l d0,a6
    cdcc:	|         move.l 46(sp),d0
    cdd0:	|         move.l 42(sp),d1
    cdd4:	|         jsr -684(a6)
    cdd8:	|         move.l d0,38(sp)
    cddc:	|         move.l 38(sp),d0
    cde0:	|         move.l d0,1c6b2 <mouseCursorAnim>
	if (! mouseCursorAnim) {
    cde6:	|         move.l 1c6b2 <mouseCursorAnim>,d0
    cdec:	|     ,-- bne.s ce00 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    cdee:	|     |   pea 1a6f4 <PutChar+0x1866>
    cdf4:	|     |   jsr 183ec <KPrintF>
    cdfa:	|     |   addq.l #4,sp
		return FALSE;
    cdfc:	|     |   clr.w d0
    cdfe:	+-----|-- bra.s ce74 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    ce00:	|     '-> jsr dca4 <nosnapshot>
	if (FGetC (fp)) {
    ce06:	|         move.l 112(sp),34(sp)
    ce0c:	|         move.l 1c7c2 <DOSBase>,d0
    ce12:	|         movea.l d0,a6
    ce14:	|         move.l 34(sp),d1
    ce18:	|         jsr -306(a6)
    ce1c:	|         move.l d0,30(sp)
    ce20:	|         move.l 30(sp),d0
    ce24:	|     ,-- beq.s ce3a <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    ce26:	|     |   move.l 112(sp),-(sp)
    ce2a:	|     |   jsr dd24 <restoreSnapshot>
    ce30:	|     |   addq.l #4,sp
    ce32:	|     |   tst.w d0
    ce34:	|     +-- bne.s ce3a <loadGame+0x2bc>
    ce36:	|     |   clr.w d0
    ce38:	+-----|-- bra.s ce74 <loadGame+0x2f6>
	}

	Close (fp);
    ce3a:	|     '-> move.l 112(sp),26(sp)
    ce40:	|         move.l 1c7c2 <DOSBase>,d0
    ce46:	|         movea.l d0,a6
    ce48:	|         move.l 26(sp),d1
    ce4c:	|         jsr -36(a6)
    ce50:	|         move.l d0,22(sp)
	clearStackLib ();
    ce54:	|         jsr cb34 <clearStackLib>

	cameraX = camerX;
    ce5a:	|         move.l 66(sp),1c870 <cameraX>
	cameraY = camerY;
    ce62:	|         move.l 62(sp),1c874 <cameraY>
	cameraZoom = camerZ;
    ce6a:	|         move.l 58(sp),1c142 <cameraZoom>

	return TRUE;
    ce72:	|         moveq #1,d0
}
    ce74:	'-------> movem.l (sp)+,d2-d3/a6
    ce78:	          lea 128(sp),sp
    ce7c:	          rts

0000ce7e <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    ce7e:	   ,-> lea -64(sp),sp
    ce82:	   |   move.l a6,-(sp)
    ce84:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    ce86:	   |   movea.l 76(sp),a0
    ce8a:	   |   move.l (a0),d0
    ce8c:	   |   move.l 80(sp),-(sp)
    ce90:	   |   move.l d0,-(sp)
    ce92:	   |   jsr 8d0 <put2bytes>
    ce98:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    ce9a:	   |   movea.l 76(sp),a0
    ce9e:	   |   move.l 40(a0),d0
    cea2:	,--|-- beq.s cede <saveFunction+0x60>
		FPutC (fp, 1);
    cea4:	|  |   move.l 80(sp),52(sp)
    ceaa:	|  |   moveq #1,d0
    ceac:	|  |   move.l d0,48(sp)
    ceb0:	|  |   move.l 1c7c2 <DOSBase>,d0
    ceb6:	|  |   movea.l d0,a6
    ceb8:	|  |   move.l 52(sp),d1
    cebc:	|  |   move.l 48(sp),d2
    cec0:	|  |   jsr -312(a6)
    cec4:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    cec8:	|  |   movea.l 76(sp),a0
    cecc:	|  |   move.l 40(a0),d0
    ced0:	|  |   move.l 80(sp),-(sp)
    ced4:	|  |   move.l d0,-(sp)
    ced6:	|  '-- jsr ce7e <saveFunction>(pc)
    ceda:	|      addq.l #8,sp
    cedc:	|  ,-- bra.s cf00 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    cede:	'--|-> move.l 80(sp),64(sp)
    cee4:	   |   clr.l 60(sp)
    cee8:	   |   move.l 1c7c2 <DOSBase>,d0
    ceee:	   |   movea.l d0,a6
    cef0:	   |   move.l 64(sp),d1
    cef4:	   |   move.l 60(sp),d2
    cef8:	   |   jsr -312(a6)
    cefc:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    cf00:	   '-> movea.l 76(sp),a0
    cf04:	       move.l 12(a0),d0
    cf08:	       move.l 80(sp),-(sp)
    cf0c:	       move.l d0,-(sp)
    cf0e:	       jsr 958 <put4bytes>
    cf14:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    cf16:	       movea.l 76(sp),a0
    cf1a:	       move.l 36(a0),d0
    cf1e:	       move.l 80(sp),-(sp)
    cf22:	       move.l d0,-(sp)
    cf24:	       jsr 8d0 <put2bytes>
    cf2a:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    cf2c:	       move.l 80(sp),40(sp)
    cf32:	       movea.l 76(sp),a0
    cf36:	       move.w 54(a0),d0
    cf3a:	       movea.w d0,a0
    cf3c:	       move.l a0,36(sp)
    cf40:	       move.l 1c7c2 <DOSBase>,d0
    cf46:	       movea.l d0,a6
    cf48:	       move.l 40(sp),d1
    cf4c:	       move.l 36(sp),d2
    cf50:	       jsr -312(a6)
    cf54:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    cf58:	       move.l 80(sp),28(sp)
    cf5e:	       movea.l 76(sp),a0
    cf62:	       move.w 48(a0),d0
    cf66:	       movea.w d0,a0
    cf68:	       move.l a0,24(sp)
    cf6c:	       move.l 1c7c2 <DOSBase>,d0
    cf72:	       movea.l d0,a6
    cf74:	       move.l 28(sp),d1
    cf78:	       move.l 24(sp),d2
    cf7c:	       jsr -312(a6)
    cf80:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    cf84:	       move.l 80(sp),16(sp)
    cf8a:	       movea.l 76(sp),a0
    cf8e:	       move.w 50(a0),d0
    cf92:	       movea.w d0,a0
    cf94:	       move.l a0,12(sp)
    cf98:	       move.l 1c7c2 <DOSBase>,d0
    cf9e:	       movea.l d0,a6
    cfa0:	       move.l 16(sp),d1
    cfa4:	       move.l 12(sp),d2
    cfa8:	       jsr -312(a6)
    cfac:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    cfb0:	       moveq #28,d0
    cfb2:	       add.l 76(sp),d0
    cfb6:	       move.l 80(sp),-(sp)
    cfba:	       move.l d0,-(sp)
    cfbc:	       jsr d6d6 <saveVariable>
    cfc2:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    cfc4:	       movea.l 76(sp),a0
    cfc8:	       move.b 56(a0),d0
    cfcc:	   ,-- beq.s cfdc <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    cfce:	   |   pea 1a715 <PutChar+0x1887>
    cfd4:	   |   jsr 183ec <KPrintF>
    cfda:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    cfdc:	   '-> movea.l 76(sp),a0
    cfe0:	       move.l 24(a0),d0
    cfe4:	       move.l 80(sp),-(sp)
    cfe8:	       move.l d0,-(sp)
    cfea:	       jsr d54a <saveStack>
    cff0:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    cff2:	       clr.l 68(sp)
    cff6:	   ,-- bra.s d01a <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    cff8:	,--|-> movea.l 76(sp),a0
    cffc:	|  |   move.l 20(a0),d1
    d000:	|  |   move.l 68(sp),d0
    d004:	|  |   lsl.l #3,d0
    d006:	|  |   add.l d1,d0
    d008:	|  |   move.l 80(sp),-(sp)
    d00c:	|  |   move.l d0,-(sp)
    d00e:	|  |   jsr d6d6 <saveVariable>
    d014:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    d016:	|  |   addq.l #1,68(sp)
    d01a:	|  '-> movea.l 76(sp),a0
    d01e:	|      move.l 8(a0),d0
    d022:	|      cmp.l 68(sp),d0
    d026:	'----- bgt.s cff8 <saveFunction+0x17a>
	}
}
    d028:	       nop
    d02a:	       nop
    d02c:	       move.l (sp)+,d2
    d02e:	       movea.l (sp)+,a6
    d030:	       lea 64(sp),sp
    d034:	       rts

0000d036 <saveGame>:

BOOL saveGame (char * fname) {
    d036:	          lea -248(sp),sp
    d03a:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    d03e:	          move.l 264(sp),244(sp)
    d044:	          move.l #1006,240(sp)
    d04c:	          move.l 1c7c2 <DOSBase>,d0
    d052:	          movea.l d0,a6
    d054:	          move.l 244(sp),d1
    d058:	          move.l 240(sp),d2
    d05c:	          jsr -30(a6)
    d060:	          move.l d0,236(sp)
    d064:	          move.l 236(sp),d0
    d068:	          move.l d0,232(sp)
	if (fp == NULL) {
    d06c:	      ,-- bne.s d082 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    d06e:	      |   pea 1a737 <PutChar+0x18a9>
    d074:	      |   jsr 183ec <KPrintF>
    d07a:	      |   addq.l #4,sp
		return FALSE;
    d07c:	      |   clr.w d0
    d07e:	,-----|-- bra.w d540 <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    d082:	|     '-> move.l 232(sp),228(sp)
    d088:	|         move.l #108372,224(sp)
    d090:	|         moveq #6,d0
    d092:	|         move.l d0,220(sp)
    d096:	|         move.l 1c7c2 <DOSBase>,d0
    d09c:	|         movea.l d0,a6
    d09e:	|         move.l 228(sp),d1
    d0a2:	|         move.l 224(sp),d2
    d0a6:	|         move.l 220(sp),d3
    d0aa:	|         jsr -48(a6)
    d0ae:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    d0b2:	|         move.l 232(sp),212(sp)
    d0b8:	|         clr.l 208(sp)
    d0bc:	|         move.l 1c7c2 <DOSBase>,d0
    d0c2:	|         movea.l d0,a6
    d0c4:	|         move.l 212(sp),d1
    d0c8:	|         move.l 208(sp),d2
    d0cc:	|         jsr -312(a6)
    d0d0:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    d0d4:	|         move.l 232(sp),200(sp)
    d0da:	|         clr.l 196(sp)
    d0de:	|         move.l 1c7c2 <DOSBase>,d0
    d0e4:	|         movea.l d0,a6
    d0e6:	|         move.l 200(sp),d1
    d0ea:	|         move.l 196(sp),d2
    d0ee:	|         jsr -312(a6)
    d0f2:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    d0f6:	|         move.l 232(sp),188(sp)
    d0fc:	|         moveq #2,d0
    d0fe:	|         move.l d0,184(sp)
    d102:	|         move.l 1c7c2 <DOSBase>,d0
    d108:	|         movea.l d0,a6
    d10a:	|         move.l 188(sp),d1
    d10e:	|         move.l 184(sp),d2
    d112:	|         jsr -312(a6)
    d116:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    d11a:	|         move.l 232(sp),176(sp)
    d120:	|         moveq #2,d0
    d122:	|         move.l d0,172(sp)
    d126:	|         move.l 1c7c2 <DOSBase>,d0
    d12c:	|         movea.l d0,a6
    d12e:	|         move.l 176(sp),d1
    d132:	|         move.l 172(sp),d2
    d136:	|         jsr -312(a6)
    d13a:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    d13e:	|         move.l 232(sp),164(sp)
    d144:	|         move.l #116572,160(sp)
    d14c:	|         moveq #8,d0
    d14e:	|         move.l d0,156(sp)
    d152:	|         move.l 1c7c2 <DOSBase>,d0
    d158:	|         movea.l d0,a6
    d15a:	|         move.l 164(sp),d1
    d15e:	|         move.l 160(sp),d2
    d162:	|         move.l 156(sp),d3
    d166:	|         jsr -48(a6)
    d16a:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    d16e:	|         move.l 232(sp),148(sp)
    d174:	|         move.w 1c000 <allowAnyFilename>,d0
    d17a:	|         movea.w d0,a0
    d17c:	|         move.l a0,144(sp)
    d180:	|         move.l 1c7c2 <DOSBase>,d0
    d186:	|         movea.l d0,a6
    d188:	|         move.l 148(sp),d1
    d18c:	|         move.l 144(sp),d2
    d190:	|         jsr -312(a6)
    d194:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    d198:	|         move.l 232(sp),136(sp)
    d19e:	|         move.w 1c75a <captureAllKeys>,d0
    d1a4:	|         movea.w d0,a0
    d1a6:	|         move.l a0,132(sp)
    d1aa:	|         move.l 1c7c2 <DOSBase>,d0
    d1b0:	|         movea.l d0,a6
    d1b2:	|         move.l 136(sp),d1
    d1b6:	|         move.l 132(sp),d2
    d1ba:	|         jsr -312(a6)
    d1be:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    d1c2:	|         move.l 232(sp),124(sp)
    d1c8:	|         moveq #1,d0
    d1ca:	|         move.l d0,120(sp)
    d1ce:	|         move.l 1c7c2 <DOSBase>,d0
    d1d4:	|         movea.l d0,a6
    d1d6:	|         move.l 124(sp),d1
    d1da:	|         move.l 120(sp),d2
    d1de:	|         jsr -312(a6)
    d1e2:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    d1e6:	|         move.l 232(sp),112(sp)
    d1ec:	|         move.l 1c8be <fontTableSize>,d0
    d1f2:	|         sgt d0
    d1f4:	|         neg.b d0
    d1f6:	|         move.b d0,d0
    d1f8:	|         andi.l #255,d0
    d1fe:	|         move.l d0,108(sp)
    d202:	|         move.l 1c7c2 <DOSBase>,d0
    d208:	|         movea.l d0,a6
    d20a:	|         move.l 112(sp),d1
    d20e:	|         move.l 108(sp),d2
    d212:	|         jsr -312(a6)
    d216:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    d21a:	|         move.l 1c8be <fontTableSize>,d0
    d220:	|     ,-- ble.s d25e <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    d222:	|     |   move.l 1c8b2 <loadedFontNum>,d0
    d228:	|     |   move.l 232(sp),-(sp)
    d22c:	|     |   move.l d0,-(sp)
    d22e:	|     |   jsr 8d0 <put2bytes>
    d234:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    d236:	|     |   move.l 1c8ae <fontHeight>,d0
    d23c:	|     |   move.l 232(sp),-(sp)
    d240:	|     |   move.l d0,-(sp)
    d242:	|     |   jsr 8d0 <put2bytes>
    d248:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    d24a:	|     |   move.l 1c8b6 <fontOrderString>,d0
    d250:	|     |   move.l 232(sp),-(sp)
    d254:	|     |   move.l d0,-(sp)
    d256:	|     |   jsr bd8 <writeString>
    d25c:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    d25e:	|     '-> move.w 1c6b0 <fontSpace>,d0
    d264:	|         movea.w d0,a0
    d266:	|         move.l 232(sp),-(sp)
    d26a:	|         move.l a0,-(sp)
    d26c:	|         jsr a9c <putSigned>
    d272:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    d274:	|         move.l 1c870 <cameraX>,d0
    d27a:	|         move.l 232(sp),-(sp)
    d27e:	|         move.l d0,-(sp)
    d280:	|         jsr 8d0 <put2bytes>
    d286:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    d288:	|         move.l 1c874 <cameraY>,d0
    d28e:	|         move.l 232(sp),-(sp)
    d292:	|         move.l d0,-(sp)
    d294:	|         jsr 8d0 <put2bytes>
    d29a:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    d29c:	|         move.l 1c142 <cameraZoom>,d0
    d2a2:	|         move.l 232(sp),-(sp)
    d2a6:	|         move.l d0,-(sp)
    d2a8:	|         jsr a46 <putFloat>
    d2ae:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    d2b0:	|         move.l 232(sp),100(sp)
    d2b6:	|         move.b 1c11e <brightnessLevel>,d0
    d2bc:	|         move.b d0,d0
    d2be:	|         andi.l #255,d0
    d2c4:	|         move.l d0,96(sp)
    d2c8:	|         move.l 1c7c2 <DOSBase>,d0
    d2ce:	|         movea.l d0,a6
    d2d0:	|         move.l 100(sp),d1
    d2d4:	|         move.l 96(sp),d2
    d2d8:	|         jsr -312(a6)
    d2dc:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    d2e0:	|         move.l 232(sp),-(sp)
    d2e4:	|         jsr 7a82 <saveHandlers>
    d2ea:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    d2ec:	|         move.l 232(sp),-(sp)
    d2f0:	|         jsr 16e12 <saveRegions>
    d2f6:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    d2f8:	|         move.l 1c6b2 <mouseCursorAnim>,d0
    d2fe:	|         move.l 232(sp),-(sp)
    d302:	|         move.l d0,-(sp)
    d304:	|         jsr b85a <saveAnim>
    d30a:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    d30c:	|         move.l 1c6b6 <mouseCursorFrameNum>,d0
    d312:	|         move.l 232(sp),-(sp)
    d316:	|         move.l d0,-(sp)
    d318:	|         jsr 8d0 <put2bytes>
    d31e:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    d320:	|         move.l 1c752 <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    d328:	|         clr.l 248(sp)
	while (thisFunction) {
    d32c:	|     ,-- bra.s d33c <saveGame+0x306>
		countFunctions ++;
    d32e:	|  ,--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    d332:	|  |  |   movea.l 252(sp),a0
    d336:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    d33c:	|  |  '-> tst.l 252(sp)
    d340:	|  '----- bne.s d32e <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    d342:	|         move.l 232(sp),-(sp)
    d346:	|         move.l 252(sp),-(sp)
    d34a:	|         jsr 8d0 <put2bytes>
    d350:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    d352:	|         move.l 1c752 <allRunningFunctions>,252(sp)
	while (thisFunction) {
    d35a:	|     ,-- bra.s d376 <saveGame+0x340>
		saveFunction (thisFunction, fp);
    d35c:	|  ,--|-> move.l 232(sp),-(sp)
    d360:	|  |  |   move.l 256(sp),-(sp)
    d364:	|  |  |   jsr ce7e <saveFunction>
    d36a:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    d36c:	|  |  |   movea.l 252(sp),a0
    d370:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    d376:	|  |  '-> tst.l 252(sp)
    d37a:	|  '----- bne.s d35c <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    d37c:	|         clr.l 256(sp)
    d380:	|     ,-- bra.s d3a2 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    d382:	|  ,--|-> move.l 1c768 <globalVars>,d1
    d388:	|  |  |   move.l 256(sp),d0
    d38c:	|  |  |   lsl.l #3,d0
    d38e:	|  |  |   add.l d1,d0
    d390:	|  |  |   move.l 232(sp),-(sp)
    d394:	|  |  |   move.l d0,-(sp)
    d396:	|  |  |   jsr d6d6 <saveVariable>
    d39c:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    d39e:	|  |  |   addq.l #1,256(sp)
    d3a2:	|  |  '-> move.l 1c792 <numGlobals>,d0
    d3a8:	|  |      cmp.l 256(sp),d0
    d3ac:	|  '----- bgt.s d382 <saveGame+0x34c>
	}

	savePeople (fp);
    d3ae:	|         move.l 232(sp),-(sp)
    d3b2:	|         jsr b982 <savePeople>
    d3b8:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    d3ba:	|         movea.l 1c8d2 <currentFloor>,a0
    d3c0:	|         move.l 8(a0),d0
    d3c4:	|  ,----- beq.s d402 <saveGame+0x3cc>
		FPutC (fp, 1);
    d3c6:	|  |      move.l 232(sp),76(sp)
    d3cc:	|  |      moveq #1,d0
    d3ce:	|  |      move.l d0,72(sp)
    d3d2:	|  |      move.l 1c7c2 <DOSBase>,d0
    d3d8:	|  |      movea.l d0,a6
    d3da:	|  |      move.l 76(sp),d1
    d3de:	|  |      move.l 72(sp),d2
    d3e2:	|  |      jsr -312(a6)
    d3e6:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    d3ea:	|  |      movea.l 1c8d2 <currentFloor>,a0
    d3f0:	|  |      move.l (a0),d0
    d3f2:	|  |      move.l 232(sp),-(sp)
    d3f6:	|  |      move.l d0,-(sp)
    d3f8:	|  |      jsr 8d0 <put2bytes>
    d3fe:	|  |      addq.l #8,sp
    d400:	|  |  ,-- bra.s d424 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    d402:	|  '--|-> move.l 232(sp),88(sp)
    d408:	|     |   clr.l 84(sp)
    d40c:	|     |   move.l 1c7c2 <DOSBase>,d0
    d412:	|     |   movea.l d0,a6
    d414:	|     |   move.l 88(sp),d1
    d418:	|     |   move.l 84(sp),d2
    d41c:	|     |   jsr -312(a6)
    d420:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    d424:	|     '-> move.l 232(sp),64(sp)
    d42a:	|         move.l 1c884 <speechMode>,60(sp)
    d432:	|         move.l 1c7c2 <DOSBase>,d0
    d438:	|         movea.l d0,a6
    d43a:	|         move.l 64(sp),d1
    d43e:	|         move.l 60(sp),d2
    d442:	|         jsr -312(a6)
    d446:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    d44a:	|         move.b 1c686 <fadeMode>,d0
    d450:	|         move.b d0,d0
    d452:	|         andi.l #255,d0
    d458:	|         move.l d0,52(sp)
    d45c:	|         move.l 232(sp),48(sp)
    d462:	|         move.l 1c7c2 <DOSBase>,d0
    d468:	|         movea.l d0,a6
    d46a:	|         move.l 52(sp),d1
    d46e:	|         move.l 48(sp),d2
    d472:	|         jsr -312(a6)
    d476:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    d47a:	|         move.l 1c6fe <speech>,d0
    d480:	|         move.l 232(sp),-(sp)
    d484:	|         move.l d0,-(sp)
    d486:	|         jsr 457c <saveSpeech>
    d48c:	|         addq.l #8,sp
	saveStatusBars (fp);
    d48e:	|         move.l 232(sp),-(sp)
    d492:	|         jsr 8b80 <saveStatusBars>
    d498:	|         addq.l #4,sp
	saveSounds (fp);
    d49a:	|         move.l 232(sp),-(sp)
    d49e:	|         jsr da48 <saveSounds>
    d4a4:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    d4a6:	|         move.w 1c86e <saveEncoding>,d0
    d4ac:	|         move.w d0,d0
    d4ae:	|         andi.l #65535,d0
    d4b4:	|         move.l 232(sp),-(sp)
    d4b8:	|         move.l d0,-(sp)
    d4ba:	|         jsr 8d0 <put2bytes>
    d4c0:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    d4c2:	|         move.l 1c860 <parallaxStuff>,d0
    d4c8:	|         move.l 232(sp),-(sp)
    d4cc:	|         move.l d0,-(sp)
    d4ce:	|         jsr dd4a <saveParallaxRecursive>
    d4d4:	|         addq.l #8,sp
	FPutC (fp, 0);
    d4d6:	|         move.l 232(sp),40(sp)
    d4dc:	|         clr.l 36(sp)
    d4e0:	|         move.l 1c7c2 <DOSBase>,d0
    d4e6:	|         movea.l d0,a6
    d4e8:	|         move.l 40(sp),d1
    d4ec:	|         move.l 36(sp),d2
    d4f0:	|         jsr -312(a6)
    d4f4:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    d4f8:	|         move.l 232(sp),28(sp)
    d4fe:	|         move.l 1c124 <languageNum>,24(sp)
    d506:	|         move.l 1c7c2 <DOSBase>,d0
    d50c:	|         movea.l d0,a6
    d50e:	|         move.l 28(sp),d1
    d512:	|         move.l 24(sp),d2
    d516:	|         jsr -312(a6)
    d51a:	|         move.l d0,20(sp)

	Close(fp);
    d51e:	|         move.l 232(sp),16(sp)
    d524:	|         move.l 1c7c2 <DOSBase>,d0
    d52a:	|         movea.l d0,a6
    d52c:	|         move.l 16(sp),d1
    d530:	|         jsr -36(a6)
    d534:	|         move.l d0,12(sp)
	clearStackLib ();
    d538:	|         jsr cb34 <clearStackLib>
	return TRUE;
    d53e:	|         moveq #1,d0
}
    d540:	'-------> movem.l (sp)+,d2-d3/a6
    d544:	          lea 248(sp),sp
    d548:	          rts

0000d54a <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    d54a:	       lea -12(sp),sp
	int elements = 0;
    d54e:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    d552:	       move.l 16(sp),(sp)
	while (search) {
    d556:	   ,-- bra.s d562 <saveStack+0x18>
		elements ++;
    d558:	,--|-> addq.l #1,8(sp)
		search = search -> next;
    d55c:	|  |   movea.l (sp),a0
    d55e:	|  |   move.l 8(a0),(sp)
	while (search) {
    d562:	|  '-> tst.l (sp)
    d564:	'----- bne.s d558 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    d566:	       move.l 20(sp),-(sp)
    d56a:	       move.l 12(sp),-(sp)
    d56e:	       jsr 8d0 <put2bytes>
    d574:	       addq.l #8,sp
	search = vs;
    d576:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    d57a:	       clr.l 4(sp)
    d57e:	   ,-- bra.s d59a <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    d580:	,--|-> move.l (sp),d0
    d582:	|  |   move.l 20(sp),-(sp)
    d586:	|  |   move.l d0,-(sp)
    d588:	|  |   jsr d6d6 <saveVariable>
    d58e:	|  |   addq.l #8,sp
		search = search -> next;
    d590:	|  |   movea.l (sp),a0
    d592:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    d596:	|  |   addq.l #1,4(sp)
    d59a:	|  '-> move.l 4(sp),d0
    d59e:	|      cmp.l 8(sp),d0
    d5a2:	'----- blt.s d580 <saveStack+0x36>
	}
}
    d5a4:	       nop
    d5a6:	       nop
    d5a8:	       lea 12(sp),sp
    d5ac:	       rts

0000d5ae <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    d5ae:	             lea -44(sp),sp
    d5b2:	             move.l a6,-(sp)
    d5b4:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    d5b6:	             move.l 1c846 <stackLib>,48(sp)
	int a = 0;
    d5be:	             clr.l 44(sp)
	while (s) {
    d5c2:	      ,----- bra.s d620 <saveStackRef+0x72>
		if (s -> stack == vs) {
    d5c4:	   ,--|----> movea.l 48(sp),a0
    d5c8:	   |  |      move.l (a0),d0
    d5ca:	   |  |      cmp.l 56(sp),d0
    d5ce:	   |  |  ,-- bne.s d612 <saveStackRef+0x64>
			FPutC (fp, 1);
    d5d0:	   |  |  |   move.l 60(sp),16(sp)
    d5d6:	   |  |  |   moveq #1,d0
    d5d8:	   |  |  |   move.l d0,12(sp)
    d5dc:	   |  |  |   move.l 1c7c2 <DOSBase>,d0
    d5e2:	   |  |  |   movea.l d0,a6
    d5e4:	   |  |  |   move.l 16(sp),d1
    d5e8:	   |  |  |   move.l 12(sp),d2
    d5ec:	   |  |  |   jsr -312(a6)
    d5f0:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    d5f4:	   |  |  |   move.l 1c842 <stackLibTotal>,d0
    d5fa:	   |  |  |   sub.l 44(sp),d0
    d5fe:	   |  |  |   move.l 60(sp),-(sp)
    d602:	   |  |  |   move.l d0,-(sp)
    d604:	   |  |  |   jsr 8d0 <put2bytes>
    d60a:	   |  |  |   addq.l #8,sp
			return TRUE;
    d60c:	   |  |  |   moveq #1,d0
    d60e:	,--|--|--|-- bra.w d6cc <saveStackRef+0x11e>
		}
		s = s -> next;
    d612:	|  |  |  '-> movea.l 48(sp),a0
    d616:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    d61c:	|  |  |      addq.l #1,44(sp)
	while (s) {
    d620:	|  |  '----> tst.l 48(sp)
    d624:	|  '-------- bne.s d5c4 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    d626:	|            move.l 60(sp),40(sp)
    d62c:	|            clr.l 36(sp)
    d630:	|            move.l 1c7c2 <DOSBase>,d0
    d636:	|            movea.l d0,a6
    d638:	|            move.l 40(sp),d1
    d63c:	|            move.l 36(sp),d2
    d640:	|            jsr -312(a6)
    d644:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    d648:	|            movea.l 56(sp),a0
    d64c:	|            move.l (a0),d0
    d64e:	|            move.l 60(sp),-(sp)
    d652:	|            move.l d0,-(sp)
    d654:	|            jsr d54a <saveStack>
    d65a:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    d65c:	|            moveq #8,d0
    d65e:	|            move.l d0,28(sp)
    d662:	|            clr.l 24(sp)
    d666:	|            move.l 1c7ba <SysBase>,d0
    d66c:	|            movea.l d0,a6
    d66e:	|            move.l 28(sp),d0
    d672:	|            move.l 24(sp),d1
    d676:	|            jsr -684(a6)
    d67a:	|            move.l d0,20(sp)
    d67e:	|            move.l 20(sp),d0
    d682:	|            move.l d0,48(sp)
	stackLibTotal ++;
    d686:	|            move.l 1c842 <stackLibTotal>,d0
    d68c:	|            addq.l #1,d0
    d68e:	|            move.l d0,1c842 <stackLibTotal>
	if (! s) {
    d694:	|            tst.l 48(sp)
    d698:	|        ,-- bne.s d6ac <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    d69a:	|        |   pea 1a783 <PutChar+0x18f5>
    d6a0:	|        |   jsr 183ec <KPrintF>
    d6a6:	|        |   addq.l #4,sp
		return FALSE;
    d6a8:	|        |   clr.w d0
    d6aa:	+--------|-- bra.s d6cc <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    d6ac:	|        '-> move.l 1c846 <stackLib>,d0
    d6b2:	|            movea.l 48(sp),a0
    d6b6:	|            move.l d0,4(a0)
	s -> stack = vs;
    d6ba:	|            movea.l 48(sp),a0
    d6be:	|            move.l 56(sp),(a0)
	stackLib = s;
    d6c2:	|            move.l 48(sp),1c846 <stackLib>
	return TRUE;
    d6ca:	|            moveq #1,d0
}
    d6cc:	'----------> move.l (sp)+,d2
    d6ce:	             movea.l (sp)+,a6
    d6d0:	             lea 44(sp),sp
    d6d4:	             rts

0000d6d6 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    d6d6:	          lea -12(sp),sp
    d6da:	          move.l a6,-(sp)
    d6dc:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    d6de:	          move.l 28(sp),16(sp)
    d6e4:	          movea.l 24(sp),a0
    d6e8:	          move.l (a0),d0
    d6ea:	          move.l d0,12(sp)
    d6ee:	          move.l 1c7c2 <DOSBase>,d0
    d6f4:	          movea.l d0,a6
    d6f6:	          move.l 16(sp),d1
    d6fa:	          move.l 12(sp),d2
    d6fe:	          jsr -312(a6)
    d702:	          move.l d0,8(sp)
	switch (from -> varType) {
    d706:	          movea.l 24(sp),a0
    d70a:	          move.l (a0),d0
    d70c:	          moveq #9,d1
    d70e:	          cmp.l d0,d1
    d710:	      ,-- bcs.w d7c0 <saveVariable+0xea>
    d714:	      |   add.l d0,d0
    d716:	      |   movea.l d0,a0
    d718:	      |   adda.l #55076,a0
    d71e:	      |   move.w (a0),d0
    d720:	      |   jmp (d724 <saveVariable+0x4e>,pc,d0.w)
    d724:	      |   ori.l #1310740,(a0)+
    d72a:	      |   ori.b #20,(20,a0,d0.w)
    d730:	      |   .short 0x004c
    d732:	      |   ori.b #126,(a4)
    d736:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    d73a:	      |   ori.b #40,(a0)+
    d73e:	      |   ori.b #47,d4
    d742:	      |   ori.b #0,(a4)+
    d746:	      |   jsr 958 <put4bytes>
    d74c:	      |   addq.l #8,sp
		return TRUE;
    d74e:	      |   moveq #1,d0
    d750:	,-----|-- bra.w d7fc <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    d754:	|     |   movea.l 24(sp),a0
    d758:	|     |   move.l 4(a0),d0
    d75c:	|     |   move.l 28(sp),-(sp)
    d760:	|     |   move.l d0,-(sp)
    d762:	|     |   jsr bd8 <writeString>
    d768:	|     |   addq.l #8,sp
		return TRUE;
    d76a:	|     |   moveq #1,d0
    d76c:	+-----|-- bra.w d7fc <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    d770:	|     |   movea.l 24(sp),a0
    d774:	|     |   move.l 4(a0),d0
    d778:	|     |   move.l 28(sp),-(sp)
    d77c:	|     |   move.l d0,-(sp)
    d77e:	|     |   jsr d5ae <saveStackRef>
    d784:	|     |   addq.l #8,sp
    d786:	+-----|-- bra.s d7fc <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    d788:	|     |   movea.l 24(sp),a0
    d78c:	|     |   move.l 4(a0),d0
    d790:	|     |   move.l 28(sp),-(sp)
    d794:	|     |   move.l d0,-(sp)
    d796:	|     |   jsr b924 <saveCostume>
    d79c:	|     |   addq.l #8,sp
		return FALSE;
    d79e:	|     |   clr.w d0
    d7a0:	+-----|-- bra.s d7fc <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    d7a2:	|     |   movea.l 24(sp),a0
    d7a6:	|     |   move.l 4(a0),d0
    d7aa:	|     |   move.l 28(sp),-(sp)
    d7ae:	|     |   move.l d0,-(sp)
    d7b0:	|     |   jsr b85a <saveAnim>
    d7b6:	|     |   addq.l #8,sp
		return FALSE;
    d7b8:	|     |   clr.w d0
    d7ba:	+-----|-- bra.s d7fc <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    d7bc:	|     |   clr.w d0
    d7be:	+-----|-- bra.s d7fc <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    d7c0:	|     '-> movea.l 24(sp),a0
    d7c4:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    d7c6:	|         moveq #10,d1
    d7c8:	|         cmp.l d0,d1
    d7ca:	|  ,----- bcs.s d7e4 <saveVariable+0x10e>
						typeName[from->varType] :
    d7cc:	|  |      movea.l 24(sp),a0
    d7d0:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    d7d2:	|  |      add.l d0,d0
    d7d4:	|  |      movea.l d0,a1
    d7d6:	|  |      adda.l d0,a1
    d7d8:	|  |      lea 1c688 <typeName>,a0
    d7de:	|  |      move.l (0,a1,a0.l),d0
    d7e2:	|  |  ,-- bra.s d7ea <saveVariable+0x114>
    d7e4:	|  '--|-> move.l #108456,d0
    d7ea:	|     '-> move.l d0,-(sp)
    d7ec:	|         pea 1a7af <PutChar+0x1921>
    d7f2:	|         jsr 183ec <KPrintF>
    d7f8:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    d7fa:	|         moveq #1,d0
    d7fc:	'-------> move.l (sp)+,d2
    d7fe:	          movea.l (sp)+,a6
    d800:	          lea 12(sp),sp
    d804:	          rts

0000d806 <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    d806:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    d80a:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    d812:	          movea.l 4(sp),a0
    d816:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    d81c:	          movea.l 4(sp),a0
    d820:	          move.w 10(a0),d0
    d824:	          lsr.w #8,d0
    d826:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    d82a:	          movea.l 4(sp),a0
    d82e:	          move.w 10(a0),d0
    d832:	          move.b d0,(sp)

    if(counterx_new)
    d834:	,-------- beq.w d8da <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    d838:	|         clr.w d1
    d83a:	|         move.b (sp),d1
    d83c:	|         move.w 1c84e <counterx_old>,d0
    d842:	|         sub.w d0,d1
    d844:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    d848:	|         cmpi.w #128,10(sp)
    d84e:	|     ,-- blt.s d866 <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    d850:	|     |   move.w #1,1c770 <input+0x4>
            counterx_diff -= 256;    
    d858:	|     |   move.w 10(sp),d0
    d85c:	|     |   addi.w #-256,d0
    d860:	|     |   move.w d0,10(sp)
    d864:	|  ,--|-- bra.s d892 <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    d866:	|  |  '-> cmpi.w #-129,10(sp)
    d86c:	|  |  ,-- bgt.s d884 <CsiCheckInput+0x7e>
            counterx_diff += 256;
    d86e:	|  |  |   move.w 10(sp),d0
    d872:	|  |  |   addi.w #256,d0
    d876:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    d87a:	|  |  |   move.w #1,1c770 <input+0x4>
    d882:	|  +--|-- bra.s d892 <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    d884:	|  |  '-> tst.w 10(sp)
    d888:	|  +----- beq.s d892 <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    d88a:	|  |      move.w #1,1c770 <input+0x4>
        }

        input.mouseX += counterx_diff;
    d892:	|  '----> move.l 1c776 <input+0xa>,d0
    d898:	|         movea.w 10(sp),a0
    d89c:	|         add.l a0,d0
    d89e:	|         move.l d0,1c776 <input+0xa>

        if( input.mouseX > (int) winWidth) {
    d8a4:	|         move.l 1c776 <input+0xa>,d1
    d8aa:	|         move.l 1c702 <winWidth>,d0
    d8b0:	|         cmp.l d1,d0
    d8b2:	|     ,-- bge.s d8c2 <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    d8b4:	|     |   move.l 1c702 <winWidth>,d0
    d8ba:	|     |   move.l d0,1c776 <input+0xa>
    d8c0:	|  ,--|-- bra.s d8d0 <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    d8c2:	|  |  '-> move.l 1c776 <input+0xa>,d0
    d8c8:	|  +----- bpl.s d8d0 <CsiCheckInput+0xca>
            input.mouseX = 0;
    d8ca:	|  |      clr.l 1c776 <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    d8d0:	|  '----> clr.w d0
    d8d2:	|         move.b (sp),d0
    d8d4:	|         move.w d0,1c84e <counterx_old>
    }    

    if(countery_new)
    d8da:	'-------> tst.b 1(sp)
    d8de:	,-------- beq.w d988 <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    d8e2:	|         clr.w d1
    d8e4:	|         move.b 1(sp),d1
    d8e8:	|         move.w 1c850 <countery_old>,d0
    d8ee:	|         sub.w d0,d1
    d8f0:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    d8f4:	|         cmpi.w #128,8(sp)
    d8fa:	|     ,-- blt.s d912 <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    d8fc:	|     |   move.w #1,1c770 <input+0x4>
            countery_diff -= 256;    
    d904:	|     |   move.w 8(sp),d0
    d908:	|     |   addi.w #-256,d0
    d90c:	|     |   move.w d0,8(sp)
    d910:	|  ,--|-- bra.s d93e <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    d912:	|  |  '-> cmpi.w #-129,8(sp)
    d918:	|  |  ,-- bgt.s d930 <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    d91a:	|  |  |   move.w #1,1c770 <input+0x4>
            countery_diff += 256;
    d922:	|  |  |   move.w 8(sp),d0
    d926:	|  |  |   addi.w #256,d0
    d92a:	|  |  |   move.w d0,8(sp)
    d92e:	|  +--|-- bra.s d93e <CsiCheckInput+0x138>
        } else if (countery_diff) {
    d930:	|  |  '-> tst.w 8(sp)
    d934:	|  +----- beq.s d93e <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    d936:	|  |      move.w #1,1c770 <input+0x4>
        }

        input.mouseY += countery_diff;
    d93e:	|  '----> move.l 1c77a <input+0xe>,d0
    d944:	|         movea.w 8(sp),a0
    d948:	|         add.l a0,d0
    d94a:	|         move.l d0,1c77a <input+0xe>

        if( input.mouseY > (int) winHeight) {
    d950:	|         move.l 1c77a <input+0xe>,d1
    d956:	|         move.l 1c706 <winHeight>,d0
    d95c:	|         cmp.l d1,d0
    d95e:	|     ,-- bge.s d96e <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    d960:	|     |   move.l 1c706 <winHeight>,d0
    d966:	|     |   move.l d0,1c77a <input+0xe>
    d96c:	|  ,--|-- bra.s d97c <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    d96e:	|  |  '-> move.l 1c77a <input+0xe>,d0
    d974:	|  +----- bpl.s d97c <CsiCheckInput+0x176>
            input.mouseY = 0;
    d976:	|  |      clr.l 1c77a <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    d97c:	|  '----> clr.w d0
    d97e:	|         move.b 1(sp),d0
    d982:	|         move.w d0,1c850 <countery_old>
    } 

    input.leftRelease = FALSE;
    d988:	'-------> clr.w 1c772 <input+0x6>
    input.rightRelease = FALSE;
    d98e:	          clr.w 1c774 <input+0x8>

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    d994:	          move.w 1c76c <input>,d0
    d99a:	      ,-- beq.s d9c0 <CsiCheckInput+0x1ba>
    d99c:	      |   movea.l #12574721,a0
    d9a2:	      |   move.b (a0),d0
    d9a4:	      |   move.b d0,d0
    d9a6:	      |   andi.l #255,d0
    d9ac:	      |   moveq #64,d1
    d9ae:	      |   and.l d1,d0
    d9b0:	      +-- beq.s d9c0 <CsiCheckInput+0x1ba>
    {
        input.leftClick = FALSE;
    d9b2:	      |   clr.w 1c76c <input>
        input.leftRelease = TRUE;
    d9b8:	      |   move.w #1,1c772 <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    d9c0:	      '-> move.w 1c76e <input+0x2>,d0
    d9c6:	      ,-- beq.s d9ee <CsiCheckInput+0x1e8>
    d9c8:	      |   movea.l #14675990,a0
    d9ce:	      |   move.w (a0),d0
    d9d0:	      |   move.w d0,d0
    d9d2:	      |   andi.l #65535,d0
    d9d8:	      |   andi.l #1024,d0
    d9de:	      +-- beq.s d9ee <CsiCheckInput+0x1e8>
    {
        input.rightClick = FALSE;
    d9e0:	      |   clr.w 1c76e <input+0x2>
        input.rightRelease = TRUE;
    d9e6:	      |   move.w #1,1c774 <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    d9ee:	      '-> movea.l #12574721,a0
    d9f4:	          move.b (a0),d0
    d9f6:	          move.b d0,d0
    d9f8:	          andi.l #255,d0
    d9fe:	          moveq #64,d1
    da00:	          and.l d1,d0
    da02:	      ,-- bne.s da0c <CsiCheckInput+0x206>
        input.leftClick = TRUE;              
    da04:	      |   move.w #1,1c76c <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    da0c:	      '-> movea.l #14675990,a0
    da12:	          move.w (a0),d0
    da14:	          move.w d0,d0
    da16:	          andi.l #65535,d0
    da1c:	          andi.l #1024,d0
    da22:	      ,-- bne.s da2c <CsiCheckInput+0x226>
        input.rightClick = TRUE;
    da24:	      |   move.w #1,1c76e <input+0x2>
    }

    da2c:	      '-> nop
    da2e:	          lea 12(sp),sp
    da32:	          rts

0000da34 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    da34:	moveq #0,d0
}
    da36:	rts

0000da38 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    da38:	nop
    da3a:	rts

0000da3c <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    da3c:	nop
    da3e:	rts

0000da40 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    da40:	moveq #1,d0
}
    da42:	rts

0000da44 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    da44:	nop
    da46:	rts

0000da48 <saveSounds>:

void saveSounds (BPTR fp) {
    da48:	lea -12(sp),sp
    da4c:	move.l a6,-(sp)
    da4e:	move.l d2,-(sp)
	FPutC (fp,0);
    da50:	move.l 24(sp),16(sp)
    da56:	clr.l 12(sp)
    da5a:	move.l 1c7c2 <DOSBase>,d0
    da60:	movea.l d0,a6
    da62:	move.l 16(sp),d1
    da66:	move.l 12(sp),d2
    da6a:	jsr -312(a6)
    da6e:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    da72:	move.l 1c13e <defSoundVol>,d0
    da78:	move.l 24(sp),-(sp)
    da7c:	move.l d0,-(sp)
    da7e:	jsr 8d0 <put2bytes>
    da84:	addq.l #8,sp
	put2bytes (defVol, fp);
    da86:	move.l 1c13a <defVol>,d0
    da8c:	move.l 24(sp),-(sp)
    da90:	move.l d0,-(sp)
    da92:	jsr 8d0 <put2bytes>
    da98:	addq.l #8,sp
}
    da9a:	nop
    da9c:	move.l (sp)+,d2
    da9e:	movea.l (sp)+,a6
    daa0:	lea 12(sp),sp
    daa4:	rts

0000daa6 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    daa6:	move.l 4(sp),1c13a <defVol>
}
    daae:	nop
    dab0:	rts

0000dab2 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    dab2:	move.l 4(sp),1c13e <defSoundVol>
}
    daba:	nop
    dabc:	rts

0000dabe <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    dabe:	nop
    dac0:	rts

0000dac2 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    dac2:	nop
    dac4:	rts

0000dac6 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    dac6:	nop
    dac8:	rts

0000daca <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    daca:	subq.l #4,sp
    dacc:	move.l 12(sp),d0
    dad0:	move.w d0,d0
    dad2:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    dad6:	moveq #1,d0
}
    dad8:	addq.l #4,sp
    dada:	rts

0000dadc <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    dadc:	nop
    dade:	rts

0000dae0 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x1, y1, x2, y2);
    dae0:	move.l 16(sp),-(sp)
    dae4:	move.l 16(sp),-(sp)
    dae8:	move.l 16(sp),-(sp)
    daec:	move.l 16(sp),-(sp)
    daf0:	jsr e0e <CstBlankScreen>
    daf6:	lea 16(sp),sp
}
    dafa:	nop
    dafc:	rts

0000dafe <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    dafe:	pea 1a7d2 <PutChar+0x1944>
    db04:	jsr 183ec <KPrintF>
    db0a:	addq.l #4,sp
}
    db0c:	nop
    db0e:	rts

0000db10 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    db10:	movea.l 8(sp),a1
    db14:	movea.l 12(sp),a0
    db18:	move.l 8(sp),d1
    db1c:	move.l 4(sp),d0
    db20:	move.l a1,-(sp)
    db22:	move.l a0,-(sp)
    db24:	move.l d1,-(sp)
    db26:	move.l d0,-(sp)
    db28:	jsr 4c76 <drawLine>
    db2e:	lea 16(sp),sp
}
    db32:	nop
    db34:	rts

0000db36 <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    db36:	movea.l 12(sp),a1
    db3a:	movea.l 4(sp),a0
    db3e:	move.l 8(sp),d1
    db42:	move.l 4(sp),d0
    db46:	move.l a1,-(sp)
    db48:	move.l a0,-(sp)
    db4a:	move.l d1,-(sp)
    db4c:	move.l d0,-(sp)
    db4e:	jsr 4c76 <drawLine>
    db54:	lea 16(sp),sp
}
    db58:	nop
    db5a:	rts

0000db5c <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    db5c:	pea 1a80b <PutChar+0x197d>
    db62:	jsr 183ec <KPrintF>
    db68:	addq.l #4,sp
}
    db6a:	nop
    db6c:	rts

0000db6e <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    db6e:	jsr 1b56 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    db74:	pea 1c85a <backdropTextureName>
    db7a:	pea 1 <_start+0x1>
    db7e:	jsr 4df8 <deleteTextures>
    db84:	addq.l #8,sp
	backdropTextureName = 0;
    db86:	clr.l 1c85a <backdropTextureName>
	backdropExists = FALSE;
    db8c:	clr.w 1c85e <backdropExists>
}
    db92:	nop
    db94:	rts

0000db96 <killParallax>:

void killParallax () {
    db96:	          lea -12(sp),sp
    db9a:	          move.l a6,-(sp)
	while (parallaxStuff) {
    db9c:	   ,----- bra.s dc08 <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    db9e:	,--|----> move.l 1c860 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    dba6:	|  |      movea.l 12(sp),a0
    dbaa:	|  |      move.l 42(a0),d0
    dbae:	|  |      move.l d0,1c860 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    dbb4:	|  |      move.l 12(sp),d0
    dbb8:	|  |      addq.l #4,d0
    dbba:	|  |      move.l d0,-(sp)
    dbbc:	|  |      pea 1 <_start+0x1>
    dbc0:	|  |      jsr 4df8 <deleteTextures>
    dbc6:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    dbc8:	|  |      movea.l 12(sp),a0
    dbcc:	|  |      move.l (a0),d0
    dbce:	|  |  ,-- beq.s dbe8 <killParallax+0x52>
    dbd0:	|  |  |   movea.l 12(sp),a0
    dbd4:	|  |  |   move.l (a0),8(sp)
    dbd8:	|  |  |   move.l 1c7ba <SysBase>,d0
    dbde:	|  |  |   movea.l d0,a6
    dbe0:	|  |  |   movea.l 8(sp),a1
    dbe4:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    dbe8:	|  |  '-> tst.l 12(sp)
    dbec:	|  |  ,-- beq.s dc04 <killParallax+0x6e>
    dbee:	|  |  |   move.l 12(sp),4(sp)
    dbf4:	|  |  |   move.l 1c7ba <SysBase>,d0
    dbfa:	|  |  |   movea.l d0,a6
    dbfc:	|  |  |   movea.l 4(sp),a1
    dc00:	|  |  |   jsr -690(a6)
		k = NULL;
    dc04:	|  |  '-> clr.l 12(sp)
	while (parallaxStuff) {
    dc08:	|  '----> move.l 1c860 <parallaxStuff>,d0
    dc0e:	'-------- bne.s db9e <killParallax+0x8>
	}
}
    dc10:	          nop
    dc12:	          nop
    dc14:	          movea.l (sp)+,a6
    dc16:	          lea 12(sp),sp
    dc1a:	          rts

0000dc1c <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    dc1c:	       move.l 4(sp),-(sp)
    dc20:	       jsr 7ed6 <openFileFromNum>
    dc26:	       addq.l #4,sp
    dc28:	       tst.l d0
    dc2a:	   ,-- bne.s dc3c <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    dc2c:	   |   pea 1a82c <PutChar+0x199e>
    dc32:	   |   jsr 183ec <KPrintF>
    dc38:	   |   addq.l #4,sp
		return;
    dc3a:	,--|-- bra.s dc5c <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    dc3c:	|  '-> move.l 1c7a2 <bigDataFile>,d0
    dc42:	|      move.l 12(sp),-(sp)
    dc46:	|      move.l 12(sp),-(sp)
    dc4a:	|      move.l d0,-(sp)
    dc4c:	|      jsr 1ebc <CstLoadBackdrop>
    dc52:	|      lea 12(sp),sp
	finishAccess ();
    dc56:	|      jsr 7dce <finishAccess>
	
}
    dc5c:	'----> rts

0000dc5e <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    dc5e:	subq.l #8,sp
    dc60:	movea.l 12(sp),a0
    dc64:	move.l 16(sp),d1
    dc68:	move.l 20(sp),d0
    dc6c:	movea.w a0,a0
    dc6e:	move.w a0,6(sp)
    dc72:	move.w d1,d1
    dc74:	move.w d1,4(sp)
    dc78:	move.w d0,d0
    dc7a:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    dc7e:	pea 1a87b <PutChar+0x19ed>
    dc84:	jsr 183ec <KPrintF>
    dc8a:	addq.l #4,sp

}
    dc8c:	nop
    dc8e:	addq.l #8,sp
    dc90:	rts

0000dc92 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    dc92:	pea 1a89e <PutChar+0x1a10>
    dc98:	jsr 183ec <KPrintF>
    dc9e:	addq.l #4,sp
}
    dca0:	nop
    dca2:	rts

0000dca4 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    dca4:	pea 1c864 <snapshotTextureName>
    dcaa:	pea 1 <_start+0x1>
    dcae:	jsr 4df8 <deleteTextures>
    dcb4:	addq.l #8,sp
	snapshotTextureName = 0;
    dcb6:	clr.l 1c864 <snapshotTextureName>
}
    dcbc:	nop
    dcbe:	rts

0000dcc0 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    dcc0:	clr.l 1c870 <cameraX>
	cameraY = 0;
    dcc6:	clr.l 1c874 <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    dccc:	move.l 1c856 <sceneHeight>,d0
    dcd2:	move.l d0,d1
    dcd4:	move.l 1c852 <sceneWidth>,d0
    dcda:	move.l d1,-(sp)
    dcdc:	move.l d0,-(sp)
    dcde:	jsr 3c2a <CstReserveBackdrop>
    dce4:	addq.l #8,sp
}
    dce6:	rts

0000dce8 <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    dce8:	jsr db6e <killBackDrop>
	killParallax ();
    dcee:	jsr db96 <killParallax>
	killZBuffer ();
    dcf4:	jsr 8f06 <killZBuffer>
	sceneWidth = x;
    dcfa:	move.l 4(sp),d0
    dcfe:	move.l d0,1c852 <sceneWidth>
	sceneHeight = y;
    dd04:	move.l 8(sp),d0
    dd08:	move.l d0,1c856 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    dd0e:	pea 1a8d7 <PutChar+0x1a49>
    dd14:	jsr 183ec <KPrintF>
    dd1a:	addq.l #4,sp
	return reserveBackdrop();
    dd1c:	jsr dcc0 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    dd22:	rts

0000dd24 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    dd24:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    dd26:	move.l 12(sp),-(sp)
    dd2a:	jsr 6bc <get2bytes>
    dd30:	addq.l #4,sp
    dd32:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    dd36:	move.l 12(sp),-(sp)
    dd3a:	jsr 6bc <get2bytes>
    dd40:	addq.l #4,sp
    dd42:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    dd44:	moveq #1,d0
}
    dd46:	addq.l #8,sp
    dd48:	rts

0000dd4a <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    dd4a:	   ,-> lea -12(sp),sp
    dd4e:	   |   move.l a6,-(sp)
    dd50:	   |   move.l d2,-(sp)
	if (me) {
    dd52:	   |   tst.l 24(sp)
    dd56:	,--|-- beq.w ddec <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    dd5a:	|  |   movea.l 24(sp),a0
    dd5e:	|  |   move.l 42(a0),d0
    dd62:	|  |   move.l 28(sp),-(sp)
    dd66:	|  |   move.l d0,-(sp)
    dd68:	|  '-- jsr dd4a <saveParallaxRecursive>(pc)
    dd6c:	|      addq.l #8,sp
		FPutC (fp, 1);
    dd6e:	|      move.l 28(sp),16(sp)
    dd74:	|      moveq #1,d0
    dd76:	|      move.l d0,12(sp)
    dd7a:	|      move.l 1c7c2 <DOSBase>,d0
    dd80:	|      movea.l d0,a6
    dd82:	|      move.l 16(sp),d1
    dd86:	|      move.l 12(sp),d2
    dd8a:	|      jsr -312(a6)
    dd8e:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    dd92:	|      movea.l 24(sp),a0
    dd96:	|      move.w 28(a0),d0
    dd9a:	|      move.w d0,d0
    dd9c:	|      andi.l #65535,d0
    dda2:	|      move.l 28(sp),-(sp)
    dda6:	|      move.l d0,-(sp)
    dda8:	|      jsr 8d0 <put2bytes>
    ddae:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    ddb0:	|      movea.l 24(sp),a0
    ddb4:	|      move.w 30(a0),d0
    ddb8:	|      move.w d0,d0
    ddba:	|      andi.l #65535,d0
    ddc0:	|      move.l 28(sp),-(sp)
    ddc4:	|      move.l d0,-(sp)
    ddc6:	|      jsr 8d0 <put2bytes>
    ddcc:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    ddce:	|      movea.l 24(sp),a0
    ddd2:	|      move.w 32(a0),d0
    ddd6:	|      move.w d0,d0
    ddd8:	|      andi.l #65535,d0
    ddde:	|      move.l 28(sp),-(sp)
    dde2:	|      move.l d0,-(sp)
    dde4:	|      jsr 8d0 <put2bytes>
    ddea:	|      addq.l #8,sp
	}
}
    ddec:	'----> nop
    ddee:	       move.l (sp)+,d2
    ddf0:	       movea.l (sp)+,a6
    ddf2:	       lea 12(sp),sp
    ddf6:	       rts

0000ddf8 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    ddf8:	pea 1a8fe <PutChar+0x1a70>
    ddfe:	jsr 183ec <KPrintF>
    de04:	addq.l #4,sp
	return TRUE;
    de06:	moveq #1,d0
    de08:	rts

0000de0a <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    de0a:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    de0c:	             move.l 1c868 <allObjectTypes>,(sp)

	while (huntType) {
    de12:	      ,----- bra.s de2a <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    de14:	   ,--|----> movea.l (sp),a0
    de16:	   |  |      move.l 4(a0),d0
    de1a:	   |  |      cmp.l 8(sp),d0
    de1e:	   |  |  ,-- bne.s de24 <findObjectType+0x1a>
    de20:	   |  |  |   move.l (sp),d0
    de22:	,--|--|--|-- bra.s de3a <findObjectType+0x30>
		huntType = huntType -> next;
    de24:	|  |  |  '-> movea.l (sp),a0
    de26:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    de2a:	|  |  '----> tst.l (sp)
    de2c:	|  '-------- bne.s de14 <findObjectType+0xa>
	}

	return loadObjectType (i);
    de2e:	|            move.l 8(sp),-(sp)
    de32:	|            jsr defa <loadObjectType>
    de38:	|            addq.l #4,sp
}
    de3a:	'----------> addq.l #4,sp
    de3c:	             rts

0000de3e <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    de3e:	             lea -12(sp),sp
	int i, num = 0;
    de42:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    de46:	             move.l 20(sp),-(sp)
    de4a:	             jsr de0a <findObjectType>
    de50:	             addq.l #4,sp
    de52:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    de54:	             clr.l 8(sp)
    de58:	   ,-------- bra.s de8e <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    de5a:	,--|-------> movea.l (sp),a0
    de5c:	|  |         move.l 38(a0),d1
    de60:	|  |         move.l 8(sp),d0
    de64:	|  |         lsl.l #3,d0
    de66:	|  |         movea.l d1,a0
    de68:	|  |         adda.l d0,a0
    de6a:	|  |         move.l (a0),d0
    de6c:	|  |         cmp.l 16(sp),d0
    de70:	|  |  ,----- bne.s de8a <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    de72:	|  |  |      movea.l (sp),a0
    de74:	|  |  |      move.l 38(a0),d1
    de78:	|  |  |      move.l 8(sp),d0
    de7c:	|  |  |      lsl.l #3,d0
    de7e:	|  |  |      movea.l d1,a0
    de80:	|  |  |      adda.l d0,a0
    de82:	|  |  |      move.l 4(a0),4(sp)
			break;
    de88:	|  |  |  ,-- bra.s de9a <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    de8a:	|  |  '--|-> addq.l #1,8(sp)
    de8e:	|  '-----|-> movea.l (sp),a0
    de90:	|        |   move.l 16(a0),d0
    de94:	|        |   cmp.l 8(sp),d0
    de98:	'--------|-- bgt.s de5a <getCombinationFunction+0x1c>
		}
	}

	return num;
    de9a:	         '-> move.l 4(sp),d0
}
    de9e:	             lea 12(sp),sp
    dea2:	             rts

0000dea4 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    dea4:	moveq #1,d0
}
    dea6:	rts

0000dea8 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    dea8:	subq.l #8,sp
    deaa:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    deac:	move.l 16(sp),-(sp)
    deb0:	jsr 6bc <get2bytes>
    deb6:	addq.l #4,sp
    deb8:	move.l d0,-(sp)
    deba:	jsr defa <loadObjectType>
    dec0:	addq.l #4,sp
    dec2:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    dec6:	movea.l 8(sp),a0
    deca:	move.l (a0),4(sp)
    dece:	move.l 1c7ba <SysBase>,d0
    ded4:	movea.l d0,a6
    ded6:	movea.l 4(sp),a1
    deda:	jsr -690(a6)
	r -> screenName = readString (fp);
    dede:	move.l 16(sp),-(sp)
    dee2:	jsr b02 <readString>
    dee8:	addq.l #4,sp
    deea:	movea.l 8(sp),a0
    deee:	move.l d0,(a0)
	return r;
    def0:	move.l 8(sp),d0
}
    def4:	movea.l (sp)+,a6
    def6:	addq.l #8,sp
    def8:	rts

0000defa <loadObjectType>:

struct objectType * loadObjectType (int i) {
    defa:	          lea -84(sp),sp
    defe:	          move.l a6,-(sp)
    df00:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    df02:	          moveq #42,d0
    df04:	          move.l d0,84(sp)
    df08:	          clr.l 80(sp)
    df0c:	          move.l 1c7ba <SysBase>,d0
    df12:	          movea.l d0,a6
    df14:	          move.l 84(sp),d0
    df18:	          move.l 80(sp),d1
    df1c:	          jsr -684(a6)
    df20:	          move.l d0,76(sp)
    df24:	          move.l 76(sp),d0
    df28:	          move.l d0,72(sp)

    if (newType) {
    df2c:	,-------- beq.w e1a6 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    df30:	|         move.l 96(sp),-(sp)
    df34:	|         jsr 7f9e <openObjectSlice>
    df3a:	|         addq.l #4,sp
    df3c:	|         tst.w d0
    df3e:	+-------- beq.w e1a6 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    df42:	|         move.l 1c7a2 <bigDataFile>,d0
    df48:	|         move.l d0,-(sp)
    df4a:	|         jsr 6bc <get2bytes>
    df50:	|         addq.l #4,sp
    df52:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    df56:	|         move.l 1c7a2 <bigDataFile>,64(sp)
    df5e:	|         move.l 1c7c2 <DOSBase>,d0
    df64:	|         movea.l d0,a6
    df66:	|         move.l 64(sp),d1
    df6a:	|         jsr -306(a6)
    df6e:	|         move.l d0,60(sp)
    df72:	|         move.l 60(sp),d0
    df76:	|         move.l d0,d0
    df78:	|         movea.l 72(sp),a0
    df7c:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    df80:	|         move.l 1c7a2 <bigDataFile>,56(sp)
    df88:	|         move.l 1c7c2 <DOSBase>,d0
    df8e:	|         movea.l d0,a6
    df90:	|         move.l 56(sp),d1
    df94:	|         jsr -306(a6)
    df98:	|         move.l d0,52(sp)
    df9c:	|         move.l 52(sp),d0
    dfa0:	|         move.l d0,d0
    dfa2:	|         movea.l 72(sp),a0
    dfa6:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    dfaa:	|         move.l 1c7a2 <bigDataFile>,48(sp)
    dfb2:	|         move.l 1c7c2 <DOSBase>,d0
    dfb8:	|         movea.l d0,a6
    dfba:	|         move.l 48(sp),d1
    dfbe:	|         jsr -306(a6)
    dfc2:	|         move.l d0,44(sp)
    dfc6:	|         move.l 44(sp),d0
    dfca:	|         move.l d0,d0
    dfcc:	|         movea.l 72(sp),a0
    dfd0:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    dfd4:	|         move.l 1c7a2 <bigDataFile>,40(sp)
    dfdc:	|         move.l 1c7c2 <DOSBase>,d0
    dfe2:	|         movea.l d0,a6
    dfe4:	|         move.l 40(sp),d1
    dfe8:	|         jsr -306(a6)
    dfec:	|         move.l d0,36(sp)
    dff0:	|         move.l 36(sp),d0
    dff4:	|         movea.l 72(sp),a0
    dff8:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    dffc:	|         move.l 1c7a2 <bigDataFile>,32(sp)
    e004:	|         move.l 1c7c2 <DOSBase>,d0
    e00a:	|         movea.l d0,a6
    e00c:	|         move.l 32(sp),d1
    e010:	|         jsr -306(a6)
    e014:	|         move.l d0,28(sp)
    e018:	|         move.l 28(sp),d0
    e01c:	|         movea.l 72(sp),a0
    e020:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    e024:	|         move.l 1c7a2 <bigDataFile>,d0
    e02a:	|         move.l d0,-(sp)
    e02c:	|         jsr 718 <get4bytes>
    e032:	|         addq.l #4,sp
    e034:	|         movea.l 72(sp),a0
    e038:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    e03c:	|         move.l 1c7a2 <bigDataFile>,d0
    e042:	|         move.l d0,-(sp)
    e044:	|         jsr 6bc <get2bytes>
    e04a:	|         addq.l #4,sp
    e04c:	|         movea.l 72(sp),a0
    e050:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    e054:	|         move.l 1c7a2 <bigDataFile>,24(sp)
    e05c:	|         move.l 1c7c2 <DOSBase>,d0
    e062:	|         movea.l d0,a6
    e064:	|         move.l 24(sp),d1
    e068:	|         jsr -306(a6)
    e06c:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    e070:	|         move.l 1c7a2 <bigDataFile>,d0
    e076:	|         move.l d0,-(sp)
    e078:	|         jsr 7d8 <getFloat>
    e07e:	|         addq.l #4,sp
            getFloat(bigDataFile);
    e080:	|         move.l 1c7a2 <bigDataFile>,d0
    e086:	|         move.l d0,-(sp)
    e088:	|         jsr 7d8 <getFloat>
    e08e:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    e090:	|         move.l 1c7a2 <bigDataFile>,d0
    e096:	|         move.l d0,-(sp)
    e098:	|         jsr 6bc <get2bytes>
    e09e:	|         addq.l #4,sp
    e0a0:	|         move.l d0,d0
    e0a2:	|         movea.l 72(sp),a0
    e0a6:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    e0aa:	|         move.l 1c7a2 <bigDataFile>,d0
    e0b0:	|         move.l d0,-(sp)
    e0b2:	|         jsr 6bc <get2bytes>
    e0b8:	|         addq.l #4,sp
    e0ba:	|         movea.l 72(sp),a0
    e0be:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    e0c2:	|         movea.l 72(sp),a0
    e0c6:	|         move.l 16(a0),d0
    e0ca:	|  ,----- beq.s e0fc <loadObjectType+0x202>
    e0cc:	|  |      movea.l 72(sp),a0
    e0d0:	|  |      move.l 16(a0),d0
    e0d4:	|  |      lsl.l #3,d0
    e0d6:	|  |      move.l d0,16(sp)
    e0da:	|  |      clr.l 12(sp)
    e0de:	|  |      move.l 1c7ba <SysBase>,d0
    e0e4:	|  |      movea.l d0,a6
    e0e6:	|  |      move.l 16(sp),d0
    e0ea:	|  |      move.l 12(sp),d1
    e0ee:	|  |      jsr -684(a6)
    e0f2:	|  |      move.l d0,8(sp)
    e0f6:	|  |      move.l 8(sp),d0
    e0fa:	|  |  ,-- bra.s e0fe <loadObjectType+0x204>
    e0fc:	|  '--|-> moveq #0,d0
    e0fe:	|     '-> movea.l 72(sp),a0
    e102:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    e106:	|         clr.l 88(sp)
    e10a:	|     ,-- bra.s e15a <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    e10c:	|  ,--|-> move.l 1c7a2 <bigDataFile>,d1
    e112:	|  |  |   movea.l 72(sp),a0
    e116:	|  |  |   movea.l 38(a0),a0
    e11a:	|  |  |   move.l 88(sp),d0
    e11e:	|  |  |   lsl.l #3,d0
    e120:	|  |  |   lea (0,a0,d0.l),a2
    e124:	|  |  |   move.l d1,-(sp)
    e126:	|  |  |   jsr 6bc <get2bytes>
    e12c:	|  |  |   addq.l #4,sp
    e12e:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    e130:	|  |  |   move.l 1c7a2 <bigDataFile>,d1
    e136:	|  |  |   movea.l 72(sp),a0
    e13a:	|  |  |   movea.l 38(a0),a0
    e13e:	|  |  |   move.l 88(sp),d0
    e142:	|  |  |   lsl.l #3,d0
    e144:	|  |  |   lea (0,a0,d0.l),a2
    e148:	|  |  |   move.l d1,-(sp)
    e14a:	|  |  |   jsr 6bc <get2bytes>
    e150:	|  |  |   addq.l #4,sp
    e152:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    e156:	|  |  |   addq.l #1,88(sp)
    e15a:	|  |  '-> movea.l 72(sp),a0
    e15e:	|  |      move.l 16(a0),d0
    e162:	|  |      cmp.l 88(sp),d0
    e166:	|  '----- bgt.s e10c <loadObjectType+0x212>
            }
            finishAccess();
    e168:	|         jsr 7dce <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    e16e:	|         move.l 68(sp),-(sp)
    e172:	|         jsr 7dd8 <getNumberedString>
    e178:	|         addq.l #4,sp
    e17a:	|         movea.l 72(sp),a0
    e17e:	|         move.l d0,(a0)
            newType->objectNum = i;
    e180:	|         movea.l 72(sp),a0
    e184:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    e18a:	|         move.l 1c868 <allObjectTypes>,d0
    e190:	|         movea.l 72(sp),a0
    e194:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    e198:	|         move.l 72(sp),1c868 <allObjectTypes>
            return newType;
    e1a0:	|         move.l 72(sp),d0
    e1a4:	|     ,-- bra.s e1a8 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    e1a6:	'-----|-> moveq #0,d0
}
    e1a8:	      '-> movea.l (sp)+,a2
    e1aa:	          movea.l (sp)+,a6
    e1ac:	          lea 84(sp),sp
    e1b0:	          rts

0000e1b2 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    e1b2:	             lea -16(sp),sp
    e1b6:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    e1b8:	             move.l #116840,16(sp)

	while (* huntRegion) {
    e1c0:	   ,-------- bra.s e234 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    e1c2:	,--|-------> movea.l 16(sp),a0
    e1c6:	|  |         move.l (a0),d0
    e1c8:	|  |         cmp.l 24(sp),d0
    e1cc:	|  |  ,----- bne.s e226 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    e1ce:	|  |  |      movea.l 24(sp),a0
    e1d2:	|  |  |      move.l 8(a0),d0
    e1d6:	|  |  |      movea.l 16(sp),a0
    e1da:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    e1dc:	|  |  |      movea.l 24(sp),a0
    e1e0:	|  |  |      move.l 38(a0),12(sp)
    e1e6:	|  |  |      move.l 1c7ba <SysBase>,d0
    e1ec:	|  |  |      movea.l d0,a6
    e1ee:	|  |  |      movea.l 12(sp),a1
    e1f2:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    e1f6:	|  |  |      movea.l 24(sp),a0
    e1fa:	|  |  |      move.l (a0),8(sp)
    e1fe:	|  |  |      move.l 1c7ba <SysBase>,d0
    e204:	|  |  |      movea.l d0,a6
    e206:	|  |  |      movea.l 8(sp),a1
    e20a:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    e20e:	|  |  |      move.l 24(sp),4(sp)
    e214:	|  |  |      move.l 1c7ba <SysBase>,d0
    e21a:	|  |  |      movea.l d0,a6
    e21c:	|  |  |      movea.l 4(sp),a1
    e220:	|  |  |      jsr -690(a6)
			return;
    e224:	|  |  |  ,-- bra.s e24a <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    e226:	|  |  '--|-> movea.l 16(sp),a0
    e22a:	|  |     |   move.l (a0),d0
    e22c:	|  |     |   move.l d0,d1
    e22e:	|  |     |   addq.l #8,d1
    e230:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    e234:	|  '-----|-> movea.l 16(sp),a0
    e238:	|        |   move.l (a0),d0
    e23a:	'--------|-- bne.s e1c2 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    e23c:	         |   pea 1a925 <PutChar+0x1a97>
    e242:	         |   jsr 183ec <KPrintF>
    e248:	         |   addq.l #4,sp
}
    e24a:	         '-> movea.l (sp)+,a6
    e24c:	             lea 16(sp),sp
    e250:	             rts

0000e252 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    e252:	movea.l 4(sp),a0
    e256:	move.l 4(a0),d0
    e25a:	move.l 8(sp),-(sp)
    e25e:	move.l d0,-(sp)
    e260:	jsr 8d0 <put2bytes>
    e266:	addq.l #8,sp
	writeString (r -> screenName, fp);
    e268:	movea.l 4(sp),a0
    e26c:	move.l (a0),d0
    e26e:	move.l 8(sp),-(sp)
    e272:	move.l d0,-(sp)
    e274:	jsr bd8 <writeString>
    e27a:	addq.l #8,sp
    e27c:	nop
    e27e:	rts

0000e280 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    e280:	                         lea -112(sp),sp
    e284:	                         move.l a6,-(sp)
    e286:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    e288:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    e28c:	                         move.w 1c86e <saveEncoding>,d0
    e292:	                  ,----- beq.s e29c <fileToStack+0x1c>
    e294:	                  |      move.l #108875,d0
    e29a:	                  |  ,-- bra.s e2a2 <fileToStack+0x22>
    e29c:	                  '--|-> move.l #108901,d0
    e2a2:	                     '-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    e2a6:	                         move.l 124(sp),112(sp)
    e2ac:	                         move.l #1005,108(sp)
    e2b4:	                         move.l 1c7c2 <DOSBase>,d0
    e2ba:	                         movea.l d0,a6
    e2bc:	                         move.l 112(sp),d1
    e2c0:	                         move.l 108(sp),d2
    e2c4:	                         jsr -30(a6)
    e2c8:	                         move.l d0,104(sp)
    e2cc:	                         move.l 104(sp),d0
    e2d0:	                         move.l d0,100(sp)
    if (!fp) {
    e2d4:	                     ,-- bne.s e2ee <fileToStack+0x6e>
        KPrintF("No such file", filename);
    e2d6:	                     |   move.l 124(sp),-(sp)
    e2da:	                     |   pea 1a97c <PutChar+0x1aee>
    e2e0:	                     |   jsr 183ec <KPrintF>
    e2e6:	                     |   addq.l #8,sp
        return FALSE;
    e2e8:	                     |   clr.w d0
    e2ea:	,--------------------|-- bra.w e5e4 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    e2ee:	|                    '-> move.w 1c86e <saveEncoding>,d0
    e2f4:	|                        move.l d0,d0
    e2f6:	|                        move.b d0,1c86c <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    e2fc:	|                        move.w 1c86e <saveEncoding>,d0
    e302:	|                        lsr.w #8,d0
    e304:	|                        move.l d0,d0
    e306:	|                        move.b d0,1c86d <encode2>

    while (*checker) {
    e30c:	|                 ,----- bra.s e370 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    e30e:	|              ,--|----> move.l 100(sp),30(sp)
    e314:	|              |  |      move.l 1c7c2 <DOSBase>,d0
    e31a:	|              |  |      movea.l d0,a6
    e31c:	|              |  |      move.l 30(sp),d1
    e320:	|              |  |      jsr -306(a6)
    e324:	|              |  |      move.l d0,26(sp)
    e328:	|              |  |      move.l 26(sp),d1
    e32c:	|              |  |      movea.l 116(sp),a0
    e330:	|              |  |      move.b (a0),d0
    e332:	|              |  |      ext.w d0
    e334:	|              |  |      movea.w d0,a0
    e336:	|              |  |      cmpa.l d1,a0
    e338:	|              |  |  ,-- beq.s e36c <fileToStack+0xec>
            Close(fp);
    e33a:	|              |  |  |   move.l 100(sp),22(sp)
    e340:	|              |  |  |   move.l 1c7c2 <DOSBase>,d0
    e346:	|              |  |  |   movea.l d0,a6
    e348:	|              |  |  |   move.l 22(sp),d1
    e34c:	|              |  |  |   jsr -36(a6)
    e350:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    e354:	|              |  |  |   move.l 124(sp),-(sp)
    e358:	|              |  |  |   pea 1a989 <PutChar+0x1afb>
    e35e:	|              |  |  |   jsr 183ec <KPrintF>
    e364:	|              |  |  |   addq.l #8,sp
            return FALSE;
    e366:	|              |  |  |   clr.w d0
    e368:	+--------------|--|--|-- bra.w e5e4 <fileToStack+0x364>
        }
        checker++;
    e36c:	|              |  |  '-> addq.l #1,116(sp)
    while (*checker) {
    e370:	|              |  '----> movea.l 116(sp),a0
    e374:	|              |         move.b (a0),d0
    e376:	|              '-------- bne.s e30e <fileToStack+0x8e>
    }

    if (saveEncoding) {
    e378:	|                        move.w 1c86e <saveEncoding>,d0
    e37e:	|  ,-------------------- beq.s e3f2 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    e380:	|  |                     move.l 100(sp),-(sp)
    e384:	|  |                     jsr e5ee <readStringEncoded>
    e38a:	|  |                     addq.l #4,sp
    e38c:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    e390:	|  |                     pea 1a9ca <PutChar+0x1b3c>
    e396:	|  |                     move.l 100(sp),-(sp)
    e39a:	|  |                     jsr 14db8 <strcmp>
    e3a0:	|  |                     addq.l #8,sp
    e3a2:	|  |                     tst.l d0
    e3a4:	|  |                 ,-- beq.s e3d8 <fileToStack+0x158>
            Close(fp);
    e3a6:	|  |                 |   move.l 100(sp),88(sp)
    e3ac:	|  |                 |   move.l 1c7c2 <DOSBase>,d0
    e3b2:	|  |                 |   movea.l d0,a6
    e3b4:	|  |                 |   move.l 88(sp),d1
    e3b8:	|  |                 |   jsr -36(a6)
    e3bc:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    e3c0:	|  |                 |   move.l 124(sp),-(sp)
    e3c4:	|  |                 |   pea 1a9d9 <PutChar+0x1b4b>
    e3ca:	|  |                 |   jsr 183ec <KPrintF>
    e3d0:	|  |                 |   addq.l #8,sp
            return FALSE;
    e3d2:	|  |                 |   clr.w d0
    e3d4:	+--|-----------------|-- bra.w e5e4 <fileToStack+0x364>
        }
        FreeVec(checker);
    e3d8:	|  |                 '-> move.l 96(sp),92(sp)
    e3de:	|  |                     move.l 1c7ba <SysBase>,d0
    e3e4:	|  |                     movea.l d0,a6
    e3e6:	|  |                     movea.l 92(sp),a1
    e3ea:	|  |                     jsr -690(a6)
        checker = NULL;
    e3ee:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    e3f2:	|  >-------------------> move.w 1c86e <saveEncoding>,d0
    e3f8:	|  |     ,-------------- beq.w e52c <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    e3fc:	|  |     |               move.l 100(sp),76(sp)
    e402:	|  |     |               move.l 1c7c2 <DOSBase>,d0
    e408:	|  |     |               movea.l d0,a6
    e40a:	|  |     |               move.l 76(sp),d1
    e40e:	|  |     |               jsr -306(a6)
    e412:	|  |     |               move.l d0,72(sp)
    e416:	|  |     |               move.l 72(sp),d0
    e41a:	|  |     |               move.b 1c86c <encode1>,d1
    e420:	|  |     |               ext.w d1
    e422:	|  |     |               ext.l d1
    e424:	|  |     |               move.l d0,d2
    e426:	|  |     |               eor.l d1,d2
    e428:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    e42c:	|  |     |               moveq #-1,d0
    e42e:	|  |     |               cmp.l 68(sp),d0
    e432:	|  |  ,--|-------------- beq.w e5c2 <fileToStack+0x342>

            char i = (char) tmp;
    e436:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    e43c:	|  |  |  |               move.b 67(sp),d0
    e440:	|  |  |  |               ext.w d0
    e442:	|  |  |  |               movea.w d0,a0
    e444:	|  |  |  |               moveq #2,d2
    e446:	|  |  |  |               cmp.l a0,d2
    e448:	|  |  |  |     ,-------- beq.s e4c4 <fileToStack+0x244>
    e44a:	|  |  |  |     |         moveq #2,d0
    e44c:	|  |  |  |     |         cmp.l a0,d0
    e44e:	|  |  |  |  ,--|-------- blt.w e4fa <fileToStack+0x27a>
    e452:	|  |  |  |  |  |         cmpa.w #0,a0
    e456:	|  |  |  |  |  |     ,-- beq.s e462 <fileToStack+0x1e2>
    e458:	|  |  |  |  |  |     |   moveq #1,d2
    e45a:	|  |  |  |  |  |     |   cmp.l a0,d2
    e45c:	|  |  |  |  |  |  ,--|-- beq.s e49e <fileToStack+0x21e>
    e45e:	|  |  |  |  +--|--|--|-- bra.w e4fa <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    e462:	|  |  |  |  |  |  |  '-> move.l 100(sp),-(sp)
    e466:	|  |  |  |  |  |  |      jsr e5ee <readStringEncoded>
    e46c:	|  |  |  |  |  |  |      addq.l #4,sp
    e46e:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    e472:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    e476:	|  |  |  |  |  |  |      lea 14(sp),a0
    e47a:	|  |  |  |  |  |  |      move.l a0,-(sp)
    e47c:	|  |  |  |  |  |  |      jsr 15b2e <makeTextVar>
    e482:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    e484:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    e48a:	|  |  |  |  |  |  |      move.l 1c7ba <SysBase>,d0
    e490:	|  |  |  |  |  |  |      movea.l d0,a6
    e492:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    e496:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    e49a:	|  |  |  |  |  |  |  ,-- bra.w e552 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    e49e:	|  |  |  |  |  |  '--|-> move.l 100(sp),-(sp)
    e4a2:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    e4a8:	|  |  |  |  |  |     |   addq.l #4,sp
    e4aa:	|  |  |  |  |  |     |   move.l d0,-(sp)
    e4ac:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    e4b0:	|  |  |  |  |  |     |   lea 18(sp),a0
    e4b4:	|  |  |  |  |  |     |   move.l a0,-(sp)
    e4b6:	|  |  |  |  |  |     |   jsr 161fe <setVariable>
    e4bc:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    e4c0:	|  |  |  |  |  |     +-- bra.w e552 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    e4c4:	|  |  |  |  |  '-----|-> move.l 100(sp),62(sp)
    e4ca:	|  |  |  |  |        |   move.l 1c7c2 <DOSBase>,d0
    e4d0:	|  |  |  |  |        |   movea.l d0,a6
    e4d2:	|  |  |  |  |        |   move.l 62(sp),d1
    e4d6:	|  |  |  |  |        |   jsr -306(a6)
    e4da:	|  |  |  |  |        |   move.l d0,58(sp)
    e4de:	|  |  |  |  |        |   move.l 58(sp),d0
    e4e2:	|  |  |  |  |        |   move.l d0,-(sp)
    e4e4:	|  |  |  |  |        |   pea 1 <_start+0x1>
    e4e8:	|  |  |  |  |        |   lea 18(sp),a0
    e4ec:	|  |  |  |  |        |   move.l a0,-(sp)
    e4ee:	|  |  |  |  |        |   jsr 161fe <setVariable>
    e4f4:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    e4f8:	|  |  |  |  |        +-- bra.s e552 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    e4fa:	|  |  |  |  '--------|-> move.l 124(sp),-(sp)
    e4fe:	|  |  |  |           |   pea 1aa5b <PutChar+0x1bcd>
    e504:	|  |  |  |           |   jsr 183ec <KPrintF>
    e50a:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    e50c:	|  |  |  |           |   move.l 100(sp),46(sp)
    e512:	|  |  |  |           |   move.l 1c7c2 <DOSBase>,d0
    e518:	|  |  |  |           |   movea.l d0,a6
    e51a:	|  |  |  |           |   move.l 46(sp),d1
    e51e:	|  |  |  |           |   jsr -36(a6)
    e522:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    e526:	|  |  |  |           |   clr.w d0
    e528:	+--|--|--|-----------|-- bra.w e5e4 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    e52c:	|  |  |  '-----------|-> move.l 100(sp),-(sp)
    e530:	|  |  |              |   jsr e6b4 <readTextPlain>
    e536:	|  |  |              |   addq.l #4,sp
    e538:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    e53c:	|  |  |        ,-----|-- beq.w e5c6 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    e540:	|  |  |        |     |   move.l 80(sp),-(sp)
    e544:	|  |  |        |     |   lea 14(sp),a0
    e548:	|  |  |        |     |   move.l a0,-(sp)
    e54a:	|  |  |        |     |   jsr 15b2e <makeTextVar>
    e550:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    e552:	|  |  |        |     '-> movea.l 128(sp),a0
    e556:	|  |  |        |         move.l (a0),d0
    e558:	|  |  |        |  ,----- bne.s e588 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    e55a:	|  |  |        |  |      move.l 128(sp),d0
    e55e:	|  |  |        |  |      move.l d0,-(sp)
    e560:	|  |  |        |  |      lea 14(sp),a0
    e564:	|  |  |        |  |      move.l a0,-(sp)
    e566:	|  |  |        |  |      jsr 151ce <addVarToStackQuick>
    e56c:	|  |  |        |  |      addq.l #8,sp
    e56e:	|  |  |        |  |      tst.w d0
    e570:	|  |  |        |  |  ,-- bne.s e576 <fileToStack+0x2f6>
    e572:	|  |  |        |  |  |   clr.w d0
    e574:	+--|--|--------|--|--|-- bra.s e5e4 <fileToStack+0x364>
            sH->last = sH->first;
    e576:	|  |  |        |  |  '-> movea.l 128(sp),a0
    e57a:	|  |  |        |  |      move.l (a0),d0
    e57c:	|  |  |        |  |      movea.l 128(sp),a0
    e580:	|  |  |        |  |      move.l d0,4(a0)
    e584:	|  +--|--------|--|----- bra.w e3f2 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    e588:	|  |  |        |  '----> movea.l 128(sp),a0
    e58c:	|  |  |        |         move.l 4(a0),d0
    e590:	|  |  |        |         addq.l #8,d0
    e592:	|  |  |        |         move.l d0,-(sp)
    e594:	|  |  |        |         lea 14(sp),a0
    e598:	|  |  |        |         move.l a0,-(sp)
    e59a:	|  |  |        |         jsr 151ce <addVarToStackQuick>
    e5a0:	|  |  |        |         addq.l #8,sp
    e5a2:	|  |  |        |         tst.w d0
    e5a4:	|  |  |        |     ,-- bne.s e5aa <fileToStack+0x32a>
    e5a6:	|  |  |        |     |   clr.w d0
    e5a8:	+--|--|--------|-----|-- bra.s e5e4 <fileToStack+0x364>
            sH->last = sH->last->next;
    e5aa:	|  |  |        |     '-> movea.l 128(sp),a0
    e5ae:	|  |  |        |         movea.l 4(a0),a0
    e5b2:	|  |  |        |         move.l 8(a0),d0
    e5b6:	|  |  |        |         movea.l 128(sp),a0
    e5ba:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    e5be:	|  '--|--------|-------- bra.w e3f2 <fileToStack+0x172>
            if (tmp == -1) break;
    e5c2:	|     '--------|-------> nop
    e5c4:	|              |     ,-- bra.s e5c8 <fileToStack+0x348>
            if (!line) break;
    e5c6:	|              '-----|-> nop
        }
    }
    Close(fp);
    e5c8:	|                    '-> move.l 100(sp),38(sp)
    e5ce:	|                        move.l 1c7c2 <DOSBase>,d0
    e5d4:	|                        movea.l d0,a6
    e5d6:	|                        move.l 38(sp),d1
    e5da:	|                        jsr -36(a6)
    e5de:	|                        move.l d0,34(sp)
    return TRUE;
    e5e2:	|                        moveq #1,d0
}
    e5e4:	'----------------------> move.l (sp)+,d2
    e5e6:	                         movea.l (sp)+,a6
    e5e8:	                         lea 112(sp),sp
    e5ec:	                         rts

0000e5ee <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    e5ee:	          lea -32(sp),sp
    e5f2:	          move.l a6,-(sp)
    e5f4:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    e5f6:	          move.l 44(sp),-(sp)
    e5fa:	          jsr 6bc <get2bytes>
    e600:	          addq.l #4,sp
    e602:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    e606:	          move.l 32(sp),d0
    e60a:	          addq.l #1,d0
    e60c:	          move.l d0,28(sp)
    e610:	          clr.l 24(sp)
    e614:	          move.l 1c7ba <SysBase>,d0
    e61a:	          movea.l d0,a6
    e61c:	          move.l 28(sp),d0
    e620:	          move.l 24(sp),d1
    e624:	          jsr -684(a6)
    e628:	          move.l d0,20(sp)
    e62c:	          move.l 20(sp),d0
    e630:	          move.l d0,16(sp)
    if (!s) return NULL;
    e634:	      ,-- bne.s e63a <readStringEncoded+0x4c>
    e636:	      |   moveq #0,d0
    e638:	,-----|-- bra.s e6aa <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    e63a:	|     '-> clr.l 36(sp)
    e63e:	|     ,-- bra.s e690 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    e640:	|  ,--|-> move.l 44(sp),12(sp)
    e646:	|  |  |   move.l 1c7c2 <DOSBase>,d0
    e64c:	|  |  |   movea.l d0,a6
    e64e:	|  |  |   move.l 12(sp),d1
    e652:	|  |  |   jsr -306(a6)
    e656:	|  |  |   move.l d0,8(sp)
    e65a:	|  |  |   move.l 8(sp),d0
    e65e:	|  |  |   move.l d0,d1
    e660:	|  |  |   move.b 1c86c <encode1>,d2
    e666:	|  |  |   move.l 36(sp),d0
    e66a:	|  |  |   movea.l 16(sp),a0
    e66e:	|  |  |   adda.l d0,a0
    e670:	|  |  |   move.b d1,d0
    e672:	|  |  |   eor.b d2,d0
    e674:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    e676:	|  |  |   move.b 1c86c <encode1>,d0
    e67c:	|  |  |   move.b d0,d1
    e67e:	|  |  |   move.b 1c86d <encode2>,d0
    e684:	|  |  |   add.b d1,d0
    e686:	|  |  |   move.b d0,1c86c <encode1>
    for (a = 0; a < len; a++) {
    e68c:	|  |  |   addq.l #1,36(sp)
    e690:	|  |  '-> move.l 36(sp),d0
    e694:	|  |      cmp.l 32(sp),d0
    e698:	|  '----- blt.s e640 <readStringEncoded+0x52>
    }
    s[len] = 0;
    e69a:	|         move.l 32(sp),d0
    e69e:	|         movea.l 16(sp),a0
    e6a2:	|         adda.l d0,a0
    e6a4:	|         clr.b (a0)
    return s;
    e6a6:	|         move.l 16(sp),d0
}
    e6aa:	'-------> move.l (sp)+,d2
    e6ac:	          movea.l (sp)+,a6
    e6ae:	          lea 32(sp),sp
    e6b2:	          rts

0000e6b4 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    e6b4:	             lea -104(sp),sp
    e6b8:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    e6bc:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    e6c0:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    e6c6:	             move.l 124(sp),106(sp)
    e6cc:	             clr.l 102(sp)
    e6d0:	             clr.l 98(sp)
    e6d4:	             move.l 1c7c2 <DOSBase>,d0
    e6da:	             movea.l d0,a6
    e6dc:	             move.l 106(sp),d1
    e6e0:	             move.l 102(sp),d2
    e6e4:	             move.l 98(sp),d3
    e6e8:	             jsr -66(a6)
    e6ec:	             move.l d0,94(sp)
    e6f0:	             move.l 94(sp),d0
    e6f4:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    e6f8:	   ,-------- bra.s e73c <readTextPlain+0x88>
        tmp = FGetC(fp);
    e6fa:	,--|-------> move.l 124(sp),22(sp)
    e700:	|  |         move.l 1c7c2 <DOSBase>,d0
    e706:	|  |         movea.l d0,a6
    e708:	|  |         move.l 22(sp),d1
    e70c:	|  |         jsr -306(a6)
    e710:	|  |         move.l d0,18(sp)
    e714:	|  |         move.l 18(sp),d0
    e718:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    e71c:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    e722:	|  |         cmpi.b #10,17(sp)
    e728:	|  |  ,----- beq.s e732 <readTextPlain+0x7e>
    e72a:	|  |  |      moveq #-1,d0
    e72c:	|  |  |      cmp.l 110(sp),d0
    e730:	|  |  |  ,-- bne.s e738 <readTextPlain+0x84>
            keepGoing = FALSE;
    e732:	|  |  '--|-> clr.w 114(sp)
    e736:	|  +-----|-- bra.s e73c <readTextPlain+0x88>
        } else {
            stringSize++;
    e738:	|  |     '-> addq.l #1,116(sp)
    while (keepGoing) {
    e73c:	|  '-------> tst.w 114(sp)
    e740:	'----------- bne.s e6fa <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    e742:	             tst.l 116(sp)
    e746:	         ,-- bne.s e756 <readTextPlain+0xa2>
    e748:	         |   moveq #-1,d0
    e74a:	         |   cmp.l 110(sp),d0
    e74e:	         +-- bne.s e756 <readTextPlain+0xa2>
        return NULL;
    e750:	         |   moveq #0,d0
    e752:	      ,--|-- bra.w e83c <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    e756:	      |  '-> move.l 124(sp),86(sp)
    e75c:	      |      move.l 90(sp),82(sp)
    e762:	      |      moveq #-1,d0
    e764:	      |      move.l d0,78(sp)
    e768:	      |      move.l 1c7c2 <DOSBase>,d0
    e76e:	      |      movea.l d0,a6
    e770:	      |      move.l 86(sp),d1
    e774:	      |      move.l 82(sp),d2
    e778:	      |      move.l 78(sp),d3
    e77c:	      |      jsr -66(a6)
    e780:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    e784:	      |      move.l 116(sp),d0
    e788:	      |      addq.l #1,d0
    e78a:	      |      move.l d0,70(sp)
    e78e:	      |      clr.l 66(sp)
    e792:	      |      move.l 1c7ba <SysBase>,d0
    e798:	      |      movea.l d0,a6
    e79a:	      |      move.l 70(sp),d0
    e79e:	      |      move.l 66(sp),d1
    e7a2:	      |      jsr -684(a6)
    e7a6:	      |      move.l d0,62(sp)
    e7aa:	      |      move.l 62(sp),d0
    e7ae:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    e7b2:	      |  ,-- bne.s e7ba <readTextPlain+0x106>
    e7b4:	      |  |   moveq #0,d0
    e7b6:	      +--|-- bra.w e83c <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    e7ba:	      |  '-> move.l 124(sp),54(sp)
    e7c0:	      |      move.l 58(sp),50(sp)
    e7c6:	      |      moveq #1,d0
    e7c8:	      |      move.l d0,46(sp)
    e7cc:	      |      move.l 116(sp),42(sp)
    e7d2:	      |      move.l 1c7c2 <DOSBase>,d0
    e7d8:	      |      movea.l d0,a6
    e7da:	      |      move.l 54(sp),d1
    e7de:	      |      move.l 50(sp),d2
    e7e2:	      |      move.l 46(sp),d3
    e7e6:	      |      move.l 42(sp),d4
    e7ea:	      |      jsr -324(a6)
    e7ee:	      |      move.l d0,38(sp)
    e7f2:	      |      move.l 38(sp),d0
    e7f6:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    e7fa:	      |      move.l 34(sp),d0
    e7fe:	      |      cmp.l 116(sp),d0
    e802:	      |  ,-- beq.s e812 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    e804:	      |  |   pea 1aa90 <PutChar+0x1c02>
    e80a:	      |  |   jsr 183ec <KPrintF>
    e810:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    e812:	      |  '-> move.l 124(sp),30(sp)
    e818:	      |      move.l 1c7c2 <DOSBase>,d0
    e81e:	      |      movea.l d0,a6
    e820:	      |      move.l 30(sp),d1
    e824:	      |      jsr -306(a6)
    e828:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    e82c:	      |      move.l 116(sp),d0
    e830:	      |      movea.l 58(sp),a0
    e834:	      |      adda.l d0,a0
    e836:	      |      clr.b (a0)
    }

    return reply;
    e838:	      |      move.l 58(sp),d0
}
    e83c:	      '----> movem.l (sp)+,d2-d4/a6
    e840:	             lea 104(sp),sp
    e844:	             rts

0000e846 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    e846:	                      lea -144(sp),sp
    e84a:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    e84e:	                      move.l 160(sp),148(sp)
    e854:	                      move.l #1006,144(sp)
    e85c:	                      move.l 1c7c2 <DOSBase>,d0
    e862:	                      movea.l d0,a6
    e864:	                      move.l 148(sp),d1
    e868:	                      move.l 144(sp),d2
    e86c:	                      jsr -30(a6)
    e870:	                      move.l d0,140(sp)
    e874:	                      move.l 140(sp),d0
    e878:	                      move.l d0,136(sp)

    if (!fp) {
    e87c:	                  ,-- bne.s e896 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    e87e:	                  |   move.l 160(sp),-(sp)
    e882:	                  |   pea 1aab1 <PutChar+0x1c23>
    e888:	                  |   jsr 183ec <KPrintF>
    e88e:	                  |   addq.l #8,sp
        return FALSE;
    e890:	                  |   clr.w d0
    e892:	,-----------------|-- bra.w eb52 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    e896:	|                 '-> movea.l 164(sp),a0
    e89a:	|                     movea.l 4(a0),a0
    e89e:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    e8a2:	|                     move.w 1c86e <saveEncoding>,d0
    e8a8:	|                     move.l d0,d0
    e8aa:	|                     move.b d0,1c86c <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    e8b0:	|                     move.w 1c86e <saveEncoding>,d0
    e8b6:	|                     lsr.w #8,d0
    e8b8:	|                     move.l d0,d0
    e8ba:	|                     move.b d0,1c86d <encode2>

    if (saveEncoding) {
    e8c0:	|                     move.w 1c86e <saveEncoding>,d0
    e8c6:	|                 ,-- beq.s e918 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    e8c8:	|                 |   move.l 136(sp),116(sp)
    e8ce:	|                 |   move.l #108875,112(sp)
    e8d6:	|                 |   moveq #99,d0
    e8d8:	|                 |   not.b d0
    e8da:	|                 |   add.l sp,d0
    e8dc:	|                 |   addi.l #-144,d0
    e8e2:	|                 |   move.l d0,108(sp)
    e8e6:	|                 |   move.l 1c7c2 <DOSBase>,d0
    e8ec:	|                 |   movea.l d0,a6
    e8ee:	|                 |   move.l 116(sp),d1
    e8f2:	|                 |   move.l 112(sp),d2
    e8f6:	|                 |   move.l 108(sp),d3
    e8fa:	|                 |   jsr -354(a6)
    e8fe:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    e902:	|                 |   move.l 136(sp),-(sp)
    e906:	|                 |   pea 1a9ca <PutChar+0x1b3c>
    e90c:	|                 |   jsr eb5c <writeStringEncoded>
    e912:	|                 |   addq.l #8,sp
    e914:	|  ,--------------|-- bra.w eb2a <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    e918:	|  |              '-> move.l 136(sp),132(sp)
    e91e:	|  |                  move.l #108901,128(sp)
    e926:	|  |                  moveq #99,d1
    e928:	|  |                  not.b d1
    e92a:	|  |                  add.l sp,d1
    e92c:	|  |                  addi.l #-144,d1
    e932:	|  |                  move.l d1,124(sp)
    e936:	|  |                  move.l 1c7c2 <DOSBase>,d0
    e93c:	|  |                  movea.l d0,a6
    e93e:	|  |                  move.l 132(sp),d1
    e942:	|  |                  move.l 128(sp),d2
    e946:	|  |                  move.l 124(sp),d3
    e94a:	|  |                  jsr -354(a6)
    e94e:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    e952:	|  +----------------- bra.w eb2a <stackToFile+0x2e4>
        if (saveEncoding) {
    e956:	|  |  ,-------------> move.w 1c86e <saveEncoding>,d0
    e95c:	|  |  |     ,-------- beq.w eaae <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    e960:	|  |  |     |         movea.l 152(sp),a0
    e964:	|  |  |     |         move.l (a0),d0
    e966:	|  |  |     |         moveq #1,d1
    e968:	|  |  |     |         cmp.l d0,d1
    e96a:	|  |  |     |     ,-- beq.s e9ba <stackToFile+0x174>
    e96c:	|  |  |     |     |   moveq #3,d1
    e96e:	|  |  |     |     |   cmp.l d0,d1
    e970:	|  |  |     |  ,--|-- bne.w ea7c <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    e974:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    e97a:	|  |  |     |  |  |   move.b 1c86c <encode1>,d0
    e980:	|  |  |     |  |  |   ext.w d0
    e982:	|  |  |     |  |  |   movea.w d0,a0
    e984:	|  |  |     |  |  |   move.l a0,72(sp)
    e988:	|  |  |     |  |  |   move.l 1c7c2 <DOSBase>,d0
    e98e:	|  |  |     |  |  |   movea.l d0,a6
    e990:	|  |  |     |  |  |   move.l 76(sp),d1
    e994:	|  |  |     |  |  |   move.l 72(sp),d2
    e998:	|  |  |     |  |  |   jsr -312(a6)
    e99c:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    e9a0:	|  |  |     |  |  |   movea.l 152(sp),a0
    e9a4:	|  |  |     |  |  |   move.l 4(a0),d0
    e9a8:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    e9ac:	|  |  |     |  |  |   move.l d0,-(sp)
    e9ae:	|  |  |     |  |  |   jsr eb5c <writeStringEncoded>
    e9b4:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    e9b6:	|  |  |  ,--|--|--|-- bra.w eb20 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    e9ba:	|  |  |  |  |  |  '-> movea.l 152(sp),a0
    e9be:	|  |  |  |  |  |      move.l 4(a0),d0
    e9c2:	|  |  |  |  |  |  ,-- bmi.s ea32 <stackToFile+0x1ec>
    e9c4:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e9c8:	|  |  |  |  |  |  |   move.l 4(a0),d0
    e9cc:	|  |  |  |  |  |  |   cmpi.l #255,d0
    e9d2:	|  |  |  |  |  |  +-- bgt.s ea32 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    e9d4:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    e9da:	|  |  |  |  |  |  |   move.b 1c86c <encode1>,d0
    e9e0:	|  |  |  |  |  |  |   eori.b #2,d0
    e9e4:	|  |  |  |  |  |  |   ext.w d0
    e9e6:	|  |  |  |  |  |  |   movea.w d0,a0
    e9e8:	|  |  |  |  |  |  |   move.l a0,60(sp)
    e9ec:	|  |  |  |  |  |  |   move.l 1c7c2 <DOSBase>,d0
    e9f2:	|  |  |  |  |  |  |   movea.l d0,a6
    e9f4:	|  |  |  |  |  |  |   move.l 64(sp),d1
    e9f8:	|  |  |  |  |  |  |   move.l 60(sp),d2
    e9fc:	|  |  |  |  |  |  |   jsr -312(a6)
    ea00:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    ea04:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    ea0a:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    ea0e:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    ea14:	|  |  |  |  |  |  |   move.l 1c7c2 <DOSBase>,d0
    ea1a:	|  |  |  |  |  |  |   movea.l d0,a6
    ea1c:	|  |  |  |  |  |  |   move.l 52(sp),d1
    ea20:	|  |  |  |  |  |  |   move.l 48(sp),d2
    ea24:	|  |  |  |  |  |  |   jsr -312(a6)
    ea28:	|  |  |  |  |  |  |   move.l d0,44(sp)
    ea2c:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    ea2e:	|  |  |  +--|--|--|-- bra.w eb20 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    ea32:	|  |  |  |  |  |  '-> move.l 136(sp),40(sp)
    ea38:	|  |  |  |  |  |      move.b 1c86c <encode1>,d0
    ea3e:	|  |  |  |  |  |      eori.b #1,d0
    ea42:	|  |  |  |  |  |      ext.w d0
    ea44:	|  |  |  |  |  |      movea.w d0,a0
    ea46:	|  |  |  |  |  |      move.l a0,36(sp)
    ea4a:	|  |  |  |  |  |      move.l 1c7c2 <DOSBase>,d0
    ea50:	|  |  |  |  |  |      movea.l d0,a6
    ea52:	|  |  |  |  |  |      move.l 40(sp),d1
    ea56:	|  |  |  |  |  |      move.l 36(sp),d2
    ea5a:	|  |  |  |  |  |      jsr -312(a6)
    ea5e:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    ea62:	|  |  |  |  |  |      movea.l 152(sp),a0
    ea66:	|  |  |  |  |  |      move.l 4(a0),d0
    ea6a:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    ea6e:	|  |  |  |  |  |      move.l d0,-(sp)
    ea70:	|  |  |  |  |  |      jsr 958 <put4bytes>
    ea76:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    ea78:	|  |  |  +--|--|----- bra.w eb20 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    ea7c:	|  |  |  |  |  '----> move.l 160(sp),-(sp)
    ea80:	|  |  |  |  |         pea 1aac3 <PutChar+0x1c35>
    ea86:	|  |  |  |  |         jsr 183ec <KPrintF>
    ea8c:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    ea8e:	|  |  |  |  |         move.l 136(sp),28(sp)
    ea94:	|  |  |  |  |         move.l 1c7c2 <DOSBase>,d0
    ea9a:	|  |  |  |  |         movea.l d0,a6
    ea9c:	|  |  |  |  |         move.l 28(sp),d1
    eaa0:	|  |  |  |  |         jsr -36(a6)
    eaa4:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    eaa8:	|  |  |  |  |         clr.w d0
    eaaa:	+--|--|--|--|-------- bra.w eb52 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    eaae:	|  |  |  |  '-------> move.l 152(sp),d0
    eab2:	|  |  |  |            move.l d0,-(sp)
    eab4:	|  |  |  |            jsr 15ee2 <getTextFromAnyVar>
    eaba:	|  |  |  |            addq.l #4,sp
    eabc:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    eac0:	|  |  |  |     ,----- beq.s eb34 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    eac2:	|  |  |  |     |      movea.l 100(sp),a0
    eac6:	|  |  |  |     |      move.b (a0),d0
    eac8:	|  |  |  |     |      ext.w d0
    eaca:	|  |  |  |     |      movea.w d0,a0
    eacc:	|  |  |  |     |      move.l a0,12(sp)
    ead0:	|  |  |  |     |      move.l 136(sp),96(sp)
    ead6:	|  |  |  |     |      move.l #109343,92(sp)
    eade:	|  |  |  |     |      moveq #99,d0
    eae0:	|  |  |  |     |      not.b d0
    eae2:	|  |  |  |     |      add.l sp,d0
    eae4:	|  |  |  |     |      addi.l #-144,d0
    eaea:	|  |  |  |     |      move.l d0,88(sp)
    eaee:	|  |  |  |     |      move.l 1c7c2 <DOSBase>,d0
    eaf4:	|  |  |  |     |      movea.l d0,a6
    eaf6:	|  |  |  |     |      move.l 96(sp),d1
    eafa:	|  |  |  |     |      move.l 92(sp),d2
    eafe:	|  |  |  |     |      move.l 88(sp),d3
    eb02:	|  |  |  |     |      jsr -354(a6)
    eb06:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    eb0a:	|  |  |  |     |      move.l 100(sp),80(sp)
    eb10:	|  |  |  |     |      move.l 1c7ba <SysBase>,d0
    eb16:	|  |  |  |     |      movea.l d0,a6
    eb18:	|  |  |  |     |      movea.l 80(sp),a1
    eb1c:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    eb20:	|  |  |  '-----|----> movea.l 152(sp),a0
    eb24:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    eb2a:	|  '--|--------|----> tst.l 152(sp)
    eb2e:	|     '--------|----- bne.w e956 <stackToFile+0x110>
    eb32:	|              |  ,-- bra.s eb36 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    eb34:	|              '--|-> nop
    }
    Close(fp);
    eb36:	|                 '-> move.l 136(sp),20(sp)
    eb3c:	|                     move.l 1c7c2 <DOSBase>,d0
    eb42:	|                     movea.l d0,a6
    eb44:	|                     move.l 20(sp),d1
    eb48:	|                     jsr -36(a6)
    eb4c:	|                     move.l d0,16(sp)
    return TRUE;
    eb50:	|                     moveq #1,d0
}
    eb52:	'-------------------> movem.l (sp)+,d2-d3/a6
    eb56:	                      lea 144(sp),sp
    eb5a:	                      rts

0000eb5c <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    eb5c:	       lea -20(sp),sp
    eb60:	       move.l a6,-(sp)
    eb62:	       move.l d2,-(sp)
	int a, len = strlen (s);
    eb64:	       move.l 32(sp),-(sp)
    eb68:	       jsr 14df8 <strlen>
    eb6e:	       addq.l #4,sp
    eb70:	       move.l d0,20(sp)

	put2bytes (len, fp);
    eb74:	       move.l 36(sp),-(sp)
    eb78:	       move.l 24(sp),-(sp)
    eb7c:	       jsr 8d0 <put2bytes>
    eb82:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    eb84:	       clr.l 24(sp)
    eb88:	   ,-- bra.s ebde <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    eb8a:	,--|-> move.l 36(sp),16(sp)
    eb90:	|  |   move.l 24(sp),d0
    eb94:	|  |   movea.l 32(sp),a0
    eb98:	|  |   adda.l d0,a0
    eb9a:	|  |   move.b (a0),d1
    eb9c:	|  |   move.b 1c86c <encode1>,d0
    eba2:	|  |   eor.b d1,d0
    eba4:	|  |   ext.w d0
    eba6:	|  |   movea.w d0,a0
    eba8:	|  |   move.l a0,12(sp)
    ebac:	|  |   move.l 1c7c2 <DOSBase>,d0
    ebb2:	|  |   movea.l d0,a6
    ebb4:	|  |   move.l 16(sp),d1
    ebb8:	|  |   move.l 12(sp),d2
    ebbc:	|  |   jsr -312(a6)
    ebc0:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    ebc4:	|  |   move.b 1c86c <encode1>,d0
    ebca:	|  |   move.b d0,d1
    ebcc:	|  |   move.b 1c86d <encode2>,d0
    ebd2:	|  |   add.b d1,d0
    ebd4:	|  |   move.b d0,1c86c <encode1>
	for (a = 0; a < len; a ++) {
    ebda:	|  |   addq.l #1,24(sp)
    ebde:	|  '-> move.l 24(sp),d0
    ebe2:	|      cmp.l 20(sp),d0
    ebe6:	'----- blt.s eb8a <writeStringEncoded+0x2e>
	}
}
    ebe8:	       nop
    ebea:	       nop
    ebec:	       move.l (sp)+,d2
    ebee:	       movea.l (sp)+,a6
    ebf0:	       lea 20(sp),sp
    ebf4:	       rts

0000ebf6 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    ebf6:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    ebf8:	                   tst.l 8(sp)
    ebfc:	               ,-- bne.s ec02 <failSecurityCheck+0xc>
    ebfe:	               |   moveq #1,d0
    ec00:	,--------------|-- bra.s ec80 <failSecurityCheck+0x8a>

	int a = 0;
    ec02:	|              '-> clr.l (sp)

	while (fn[a]) {
    ec04:	|     ,----------- bra.s ec72 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    ec06:	|  ,--|----------> move.l (sp),d0
    ec08:	|  |  |            movea.l 8(sp),a0
    ec0c:	|  |  |            adda.l d0,a0
    ec0e:	|  |  |            move.b (a0),d0
    ec10:	|  |  |            ext.w d0
    ec12:	|  |  |            movea.w d0,a0
    ec14:	|  |  |            moveq #124,d0
    ec16:	|  |  |            cmp.l a0,d0
    ec18:	|  |  |     ,----- beq.s ec5a <failSecurityCheck+0x64>
    ec1a:	|  |  |     |      moveq #124,d1
    ec1c:	|  |  |     |      cmp.l a0,d1
    ec1e:	|  |  |  ,--|----- blt.s ec70 <failSecurityCheck+0x7a>
    ec20:	|  |  |  |  |      moveq #92,d0
    ec22:	|  |  |  |  |      cmp.l a0,d0
    ec24:	|  |  |  |  +----- beq.s ec5a <failSecurityCheck+0x64>
    ec26:	|  |  |  |  |      moveq #92,d1
    ec28:	|  |  |  |  |      cmp.l a0,d1
    ec2a:	|  |  |  +--|----- blt.s ec70 <failSecurityCheck+0x7a>
    ec2c:	|  |  |  |  |      moveq #60,d0
    ec2e:	|  |  |  |  |      cmp.l a0,d0
    ec30:	|  |  |  |  |  ,-- blt.s ec50 <failSecurityCheck+0x5a>
    ec32:	|  |  |  |  |  |   moveq #34,d1
    ec34:	|  |  |  |  |  |   cmp.l a0,d1
    ec36:	|  |  |  +--|--|-- bgt.s ec70 <failSecurityCheck+0x7a>
    ec38:	|  |  |  |  |  |   moveq #-34,d1
    ec3a:	|  |  |  |  |  |   add.l a0,d1
    ec3c:	|  |  |  |  |  |   move.l #83894529,d0
    ec42:	|  |  |  |  |  |   lsr.l d1,d0
    ec44:	|  |  |  |  |  |   moveq #1,d1
    ec46:	|  |  |  |  |  |   and.l d1,d0
    ec48:	|  |  |  |  |  |   sne d0
    ec4a:	|  |  |  |  |  |   neg.b d0
    ec4c:	|  |  |  |  +--|-- bne.s ec5a <failSecurityCheck+0x64>
    ec4e:	|  |  |  +--|--|-- bra.s ec70 <failSecurityCheck+0x7a>
    ec50:	|  |  |  |  |  '-> lea -62(a0),a0
    ec54:	|  |  |  |  |      moveq #1,d0
    ec56:	|  |  |  |  |      cmp.l a0,d0
    ec58:	|  |  |  +--|----- bcs.s ec70 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    ec5a:	|  |  |  |  '----> move.l 8(sp),-(sp)
    ec5e:	|  |  |  |         pea 1ab23 <PutChar+0x1c95>
    ec64:	|  |  |  |         jsr 183ec <KPrintF>
    ec6a:	|  |  |  |         addq.l #8,sp
				return TRUE;
    ec6c:	|  |  |  |         moveq #1,d0
    ec6e:	+--|--|--|-------- bra.s ec80 <failSecurityCheck+0x8a>
		}
		a++;
    ec70:	|  |  |  '-------> addq.l #1,(sp)
	while (fn[a]) {
    ec72:	|  |  '----------> move.l (sp),d0
    ec74:	|  |               movea.l 8(sp),a0
    ec78:	|  |               adda.l d0,a0
    ec7a:	|  |               move.b (a0),d0
    ec7c:	|  '-------------- bne.s ec06 <failSecurityCheck+0x10>
	}
	return FALSE;
    ec7e:	|                  clr.w d0
}
    ec80:	'----------------> addq.l #4,sp
    ec82:	                   rts

0000ec84 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    ec84:	             lea -24(sp),sp
    ec88:	             move.l a6,-(sp)
    ec8a:	             move.l 40(sp),d0
    ec8e:	             move.w d0,d0
    ec90:	             move.w d0,6(sp)
	int fileNum = -1;
    ec94:	             moveq #-1,d0
    ec96:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    ec9a:	             jsr 6fa6 <killSpeechTimers>

	switch (numParams) {
    eca0:	             moveq #2,d0
    eca2:	             cmp.l 32(sp),d0
    eca6:	      ,----- beq.s ecea <sayCore+0x66>
    eca8:	      |      moveq #3,d0
    ecaa:	      |      cmp.l 32(sp),d0
    ecae:	,-----|----- bne.w edcc <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    ecb2:	|     |      movea.l 36(sp),a0
    ecb6:	|     |      move.l 24(a0),d0
    ecba:	|     |      move.l d0,-(sp)
    ecbc:	|     |      pea 5 <_start+0x5>
    ecc0:	|     |      lea 20(sp),a0
    ecc4:	|     |      move.l a0,-(sp)
    ecc6:	|     |      jsr 1590c <getValueType>
    eccc:	|     |      lea 12(sp),sp
    ecd0:	|     |      tst.w d0
    ecd2:	|     |  ,-- bne.s ecda <sayCore+0x56>
    ecd4:	|     |  |   moveq #1,d0
    ecd6:	|  ,--|--|-- bra.w eddc <sayCore+0x158>
			trimStack (&fun -> stack);
    ecda:	|  |  |  '-> moveq #24,d0
    ecdc:	|  |  |      add.l 36(sp),d0
    ece0:	|  |  |      move.l d0,-(sp)
    ece2:	|  |  |      jsr 16290 <trimStack>
    ece8:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    ecea:	|  |  '----> movea.l 36(sp),a0
    ecee:	|  |         move.l 24(a0),d0
    ecf2:	|  |         move.l d0,-(sp)
    ecf4:	|  |         jsr 15ee2 <getTextFromAnyVar>
    ecfa:	|  |         addq.l #4,sp
    ecfc:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    ed00:	|  |     ,-- bne.s ed08 <sayCore+0x84>
    ed02:	|  |     |   moveq #1,d0
    ed04:	|  +-----|-- bra.w eddc <sayCore+0x158>
			trimStack (&fun -> stack);
    ed08:	|  |     '-> moveq #24,d0
    ed0a:	|  |         add.l 36(sp),d0
    ed0e:	|  |         move.l d0,-(sp)
    ed10:	|  |         jsr 16290 <trimStack>
    ed16:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ed18:	|  |         movea.l 36(sp),a0
    ed1c:	|  |         move.l 24(a0),d0
    ed20:	|  |         move.l d0,-(sp)
    ed22:	|  |         pea 7 <_start+0x7>
    ed26:	|  |         lea 16(sp),a0
    ed2a:	|  |         move.l a0,-(sp)
    ed2c:	|  |         jsr 1590c <getValueType>
    ed32:	|  |         lea 12(sp),sp
    ed36:	|  |         tst.w d0
    ed38:	|  |     ,-- bne.s ed40 <sayCore+0xbc>
    ed3a:	|  |     |   moveq #1,d0
    ed3c:	|  +-----|-- bra.w eddc <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ed40:	|  |     '-> movea.l 36(sp),a0
    ed44:	|  |         move.l 24(a0),d0
    ed48:	|  |         move.l d0,-(sp)
    ed4a:	|  |         pea 7 <_start+0x7>
    ed4e:	|  |         lea 16(sp),a0
    ed52:	|  |         move.l a0,-(sp)
    ed54:	|  |         jsr 1590c <getValueType>
    ed5a:	|  |         lea 12(sp),sp
    ed5e:	|  |         tst.w d0
    ed60:	|  |     ,-- bne.s ed66 <sayCore+0xe2>
    ed62:	|  |     |   moveq #1,d0
    ed64:	|  +-----|-- bra.s eddc <sayCore+0x158>
			trimStack (&fun -> stack);
    ed66:	|  |     '-> moveq #24,d0
    ed68:	|  |         add.l 36(sp),d0
    ed6c:	|  |         move.l d0,-(sp)
    ed6e:	|  |         jsr 16290 <trimStack>
    ed74:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    ed76:	|  |         movea.w 6(sp),a0
    ed7a:	|  |         move.l 12(sp),d1
    ed7e:	|  |         move.l 8(sp),d0
    ed82:	|  |         move.l a0,-(sp)
    ed84:	|  |         move.l d1,-(sp)
    ed86:	|  |         move.l d0,-(sp)
    ed88:	|  |         move.l 36(sp),-(sp)
    ed8c:	|  |         jsr 4712 <wrapSpeech>
    ed92:	|  |         lea 16(sp),sp
    ed96:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    ed9a:	|  |         movea.l 36(sp),a0
    ed9e:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    eda4:	|  |         movea.l 36(sp),a0
    eda8:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    edae:	|  |         move.l 24(sp),16(sp)
    edb4:	|  |         move.l 1c7ba <SysBase>,d0
    edba:	|  |         movea.l d0,a6
    edbc:	|  |         movea.l 16(sp),a1
    edc0:	|  |         jsr -690(a6)
			newText = NULL;
    edc4:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    edc8:	|  |         moveq #0,d0
    edca:	|  +-------- bra.s eddc <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    edcc:	'--|-------> pea 1aba9 <talk.c.490538ff+0x57>
    edd2:	   |         jsr 183ec <KPrintF>
    edd8:	   |         addq.l #4,sp
	return BR_ERROR;
    edda:	   |         moveq #1,d0
}
    eddc:	   '-------> movea.l (sp)+,a6
    edde:	             lea 24(sp),sp
    ede2:	             rts

0000ede4 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    ede4:	pea 1 <_start+0x1>
    ede8:	move.l 12(sp),-(sp)
    edec:	move.l 12(sp),-(sp)
    edf0:	jsr ec84 <sayCore>
    edf6:	lea 12(sp),sp
}
    edfa:	rts

0000edfc <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    edfc:	clr.l -(sp)
    edfe:	move.l 12(sp),-(sp)
    ee02:	move.l 12(sp),-(sp)
    ee06:	jsr ec84 <sayCore>
    ee0c:	lea 12(sp),sp
}
    ee10:	rts

0000ee12 <builtIn_freeze>:

builtIn(freeze)
{
	KPrintF("running freeze\n");
    ee12:	pea 1abd7 <talk.c.490538ff+0x85>
    ee18:	jsr 183ec <KPrintF>
    ee1e:	addq.l #4,sp
	UNUSEDALL
	freeze ();
    ee20:	jsr 162d8 <freeze>
	freezeSubs (); 
    ee26:	jsr 6576 <freezeSubs>
	fun -> freezerLevel = 0;
    ee2c:	movea.l 8(sp),a0
    ee30:	clr.b 56(a0)
	return BR_CONTINUE;
    ee34:	moveq #2,d0
}
    ee36:	rts

0000ee38 <builtIn_unfreeze>:

builtIn(unfreeze)
{
	KPrintF("running unfreeze\n");
    ee38:	pea 1abe7 <talk.c.490538ff+0x95>
    ee3e:	jsr 183ec <KPrintF>
    ee44:	addq.l #4,sp
	UNUSEDALL
	unfreeze ();
    ee46:	jsr 164dc <unfreeze>
	unfreezeSubs (); 
    ee4c:	jsr 7d9c <unfreezeSubs>
	return BR_CONTINUE;
    ee52:	moveq #2,d0
}
    ee54:	rts

0000ee56 <builtIn_howFrozen>:

builtIn(howFrozen)
{
	//KPrintF("running howfrozen\n");
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, howFrozen ());
    ee56:	jsr 164b8 <howFrozen>
    ee5c:	move.l d0,d1
    ee5e:	moveq #28,d0
    ee60:	add.l 8(sp),d0
    ee64:	move.l d1,-(sp)
    ee66:	pea 1 <_start+0x1>
    ee6a:	move.l d0,-(sp)
    ee6c:	jsr 161fe <setVariable>
    ee72:	lea 12(sp),sp
	return BR_CONTINUE; 
    ee76:	moveq #2,d0
}
    ee78:	rts

0000ee7a <builtIn_setCursor>:

builtIn(setCursor)
{
    ee7a:	subq.l #4,sp
	KPrintF("running setCursor\n");
    ee7c:	pea 1abf9 <talk.c.490538ff+0xa7>
    ee82:	jsr 183ec <KPrintF>
    ee88:	addq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    ee8a:	movea.l 12(sp),a0
    ee8e:	move.l 24(a0),d0
    ee92:	move.l d0,-(sp)
    ee94:	jsr 15de4 <getAnimationFromVar>
    ee9a:	addq.l #4,sp
    ee9c:	move.l d0,(sp)
	pickAnimCursor (aa);
    ee9e:	move.l (sp),-(sp)
    eea0:	jsr d6c <pickAnimCursor>
    eea6:	addq.l #4,sp
	trimStack (&fun -> stack);
    eea8:	moveq #24,d0
    eeaa:	add.l 12(sp),d0
    eeae:	move.l d0,-(sp)
    eeb0:	jsr 16290 <trimStack>
    eeb6:	addq.l #4,sp
	return BR_CONTINUE;
    eeb8:	moveq #2,d0
}
    eeba:	addq.l #4,sp
    eebc:	rts

0000eebe <builtIn_getMouseX>:

builtIn(getMouseX)
{
	KPrintF("running getMouseX\n");
    eebe:	pea 1ac0c <talk.c.490538ff+0xba>
    eec4:	jsr 183ec <KPrintF>
    eeca:	addq.l #4,sp
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    eecc:	move.l 1c776 <input+0xa>,d1
    eed2:	move.l 1c870 <cameraX>,d0
    eed8:	add.l d0,d1
    eeda:	moveq #28,d0
    eedc:	add.l 8(sp),d0
    eee0:	move.l d1,-(sp)
    eee2:	pea 1 <_start+0x1>
    eee6:	move.l d0,-(sp)
    eee8:	jsr 161fe <setVariable>
    eeee:	lea 12(sp),sp
	return BR_CONTINUE;
    eef2:	moveq #2,d0
}
    eef4:	rts

0000eef6 <builtIn_getMouseY>:

builtIn(getMouseY)
{
	KPrintF("running getMouseY\n");
    eef6:	pea 1ac1f <talk.c.490538ff+0xcd>
    eefc:	jsr 183ec <KPrintF>
    ef02:	addq.l #4,sp
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    ef04:	move.l 1c77a <input+0xe>,d1
    ef0a:	move.l 1c874 <cameraY>,d0
    ef10:	add.l d0,d1
    ef12:	moveq #28,d0
    ef14:	add.l 8(sp),d0
    ef18:	move.l d1,-(sp)
    ef1a:	pea 1 <_start+0x1>
    ef1e:	move.l d0,-(sp)
    ef20:	jsr 161fe <setVariable>
    ef26:	lea 12(sp),sp
	return BR_CONTINUE;
    ef2a:	moveq #2,d0
}
    ef2c:	rts

0000ef2e <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	KPrintF("running getMouseScreenX\n");
    ef2e:	pea 1ac32 <talk.c.490538ff+0xe0>
    ef34:	jsr 183ec <KPrintF>
    ef3a:	addq.l #4,sp
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    ef3c:	move.l 1c776 <input+0xa>,d0
    ef42:	move.l d0,-(sp)
    ef44:	jsr 1881e <__floatsisf>
    ef4a:	addq.l #4,sp
    ef4c:	move.l d0,d1
    ef4e:	move.l 1c142 <cameraZoom>,d0
    ef54:	move.l d0,-(sp)
    ef56:	move.l d1,-(sp)
    ef58:	jsr 188d0 <__mulsf3>
    ef5e:	addq.l #8,sp
    ef60:	move.l d0,-(sp)
    ef62:	jsr 187b6 <__fixsfsi>
    ef68:	addq.l #4,sp
    ef6a:	move.l d0,d1
    ef6c:	moveq #28,d0
    ef6e:	add.l 8(sp),d0
    ef72:	move.l d1,-(sp)
    ef74:	pea 1 <_start+0x1>
    ef78:	move.l d0,-(sp)
    ef7a:	jsr 161fe <setVariable>
    ef80:	lea 12(sp),sp
	return BR_CONTINUE;
    ef84:	moveq #2,d0
}
    ef86:	rts

0000ef88 <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	KPrintF("running getMouseScreenY\n");
    ef88:	pea 1ac4b <talk.c.490538ff+0xf9>
    ef8e:	jsr 183ec <KPrintF>
    ef94:	addq.l #4,sp
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    ef96:	move.l 1c77a <input+0xe>,d0
    ef9c:	move.l d0,-(sp)
    ef9e:	jsr 1881e <__floatsisf>
    efa4:	addq.l #4,sp
    efa6:	move.l d0,d1
    efa8:	move.l 1c142 <cameraZoom>,d0
    efae:	move.l d0,-(sp)
    efb0:	move.l d1,-(sp)
    efb2:	jsr 188d0 <__mulsf3>
    efb8:	addq.l #8,sp
    efba:	move.l d0,-(sp)
    efbc:	jsr 187b6 <__fixsfsi>
    efc2:	addq.l #4,sp
    efc4:	move.l d0,d1
    efc6:	moveq #28,d0
    efc8:	add.l 8(sp),d0
    efcc:	move.l d1,-(sp)
    efce:	pea 1 <_start+0x1>
    efd2:	move.l d0,-(sp)
    efd4:	jsr 161fe <setVariable>
    efda:	lea 12(sp),sp
	return BR_CONTINUE;
    efde:	moveq #2,d0
}
    efe0:	rts

0000efe2 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	KPrintF("running getStatusText\n");
    efe2:	pea 1ac64 <talk.c.490538ff+0x112>
    efe8:	jsr 183ec <KPrintF>
    efee:	addq.l #4,sp
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    eff0:	jsr 8dce <statusBarText>
    eff6:	move.l d0,d1
    eff8:	moveq #28,d0
    effa:	add.l 8(sp),d0
    effe:	move.l d1,-(sp)
    f000:	move.l d0,-(sp)
    f002:	jsr 15b2e <makeTextVar>
    f008:	addq.l #8,sp
	return BR_CONTINUE;
    f00a:	moveq #2,d0
}
    f00c:	rts

0000f00e <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    f00e:	       lea -20(sp),sp
    f012:	       move.l a6,-(sp)
	KPrintF("running getMatchingFiles\n");
    f014:	       pea 1ac7b <talk.c.490538ff+0x129>
    f01a:	       jsr 183ec <KPrintF>
    f020:	       addq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f022:	       movea.l 32(sp),a0
    f026:	       move.l 24(a0),d0
    f02a:	       move.l d0,-(sp)
    f02c:	       jsr 15ee2 <getTextFromAnyVar>
    f032:	       addq.l #4,sp
    f034:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    f038:	   ,-- bne.s f040 <builtIn_getMatchingFiles+0x32>
    f03a:	   |   moveq #1,d0
    f03c:	,--|-- bra.w f102 <builtIn_getMatchingFiles+0xf4>
	trimStack (&fun -> stack);
    f040:	|  '-> moveq #24,d0
    f042:	|      add.l 32(sp),d0
    f046:	|      move.l d0,-(sp)
    f048:	|      jsr 16290 <trimStack>
    f04e:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    f050:	|      moveq #28,d0
    f052:	|      add.l 32(sp),d0
    f056:	|      move.l d0,-(sp)
    f058:	|      jsr 15b5a <unlinkVar>
    f05e:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    f060:	|      movea.l 32(sp),a0
    f064:	|      moveq #6,d0
    f066:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    f06a:	|      moveq #12,d0
    f06c:	|      move.l d0,16(sp)
    f070:	|      clr.l 12(sp)
    f074:	|      move.l 1c7ba <SysBase>,d0
    f07a:	|      movea.l d0,a6
    f07c:	|      move.l 16(sp),d0
    f080:	|      move.l 12(sp),d1
    f084:	|      jsr -684(a6)
    f088:	|      move.l d0,8(sp)
    f08c:	|      move.l 8(sp),d0
    f090:	|      movea.l 32(sp),a0
    f094:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    f098:	|      moveq #32,d0
    f09a:	|      add.l 32(sp),d0
    f09e:	|  ,-- bne.s f0a4 <builtIn_getMatchingFiles+0x96>
    f0a0:	|  |   moveq #1,d0
    f0a2:	+--|-- bra.s f102 <builtIn_getMatchingFiles+0xf4>
	fun -> reg.varData.theStack -> first = NULL;
    f0a4:	|  '-> movea.l 32(sp),a0
    f0a8:	|      movea.l 32(a0),a0
    f0ac:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    f0ae:	|      movea.l 32(sp),a0
    f0b2:	|      movea.l 32(a0),a0
    f0b6:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    f0ba:	|      movea.l 32(sp),a0
    f0be:	|      movea.l 32(a0),a0
    f0c2:	|      moveq #1,d0
    f0c4:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    f0c8:	|      movea.l 32(sp),a0
    f0cc:	|      move.l 32(a0),d0
    f0d0:	|      move.l 20(sp),-(sp)
    f0d4:	|      move.l d0,-(sp)
    f0d6:	|      jsr 156c8 <getSavedGamesStack>
    f0dc:	|      addq.l #8,sp
    f0de:	|      tst.w d0
    f0e0:	|  ,-- bne.s f0e6 <builtIn_getMatchingFiles+0xd8>
    f0e2:	|  |   moveq #1,d0
    f0e4:	+--|-- bra.s f102 <builtIn_getMatchingFiles+0xf4>
	FreeVec(newText);
    f0e6:	|  '-> move.l 20(sp),4(sp)
    f0ec:	|      move.l 1c7ba <SysBase>,d0
    f0f2:	|      movea.l d0,a6
    f0f4:	|      movea.l 4(sp),a1
    f0f8:	|      jsr -690(a6)
	newText = NULL;
    f0fc:	|      clr.l 20(sp)
	return BR_CONTINUE;
    f100:	|      moveq #2,d0
}
    f102:	'----> movea.l (sp)+,a6
    f104:	       lea 20(sp),sp
    f108:	       rts

0000f10a <builtIn_saveGame>:

builtIn(saveGame)
{
    f10a:	       lea -12(sp),sp
    f10e:	       move.l a6,-(sp)
	KPrintF("running saveGame\n");
    f110:	       pea 1ac95 <talk.c.490538ff+0x143>
    f116:	       jsr 183ec <KPrintF>
    f11c:	       addq.l #4,sp

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    f11e:	       movea.l 24(sp),a0
    f122:	       move.l 24(a0),d0
    f126:	       move.l d0,-(sp)
    f128:	       jsr 15ee2 <getTextFromAnyVar>
    f12e:	       addq.l #4,sp
    f130:	       move.l d0,1c786 <loadNow>
    trimStack(&fun->stack);
    f136:	       moveq #24,d0
    f138:	       add.l 24(sp),d0
    f13c:	       move.l d0,-(sp)
    f13e:	       jsr 16290 <trimStack>
    f144:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    f146:	       move.l 1c786 <loadNow>,d0
    f14c:	       move.l d0,-(sp)
    f14e:	       jsr 2fe <encodeFilename>
    f154:	       addq.l #4,sp
    f156:	       move.l d0,12(sp)
    FreeVec(loadNow);
    f15a:	       move.l 1c786 <loadNow>,8(sp)
    f162:	       move.l 1c7ba <SysBase>,d0
    f168:	       movea.l d0,a6
    f16a:	       movea.l 8(sp),a1
    f16e:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    f172:	       move.l 12(sp),-(sp)
    f176:	       jsr ebf6 <failSecurityCheck>
    f17c:	       addq.l #4,sp
    f17e:	       tst.w d0
    f180:	   ,-- beq.s f186 <builtIn_saveGame+0x7c>
    f182:	   |   moveq #1,d0
    f184:	,--|-- bra.s f1d6 <builtIn_saveGame+0xcc>

    loadNow = joinStrings(":", aaaaa);
    f186:	|  '-> move.l 12(sp),-(sp)
    f18a:	|      pea 1aca7 <talk.c.490538ff+0x155>
    f190:	|      jsr 14e38 <joinStrings>
    f196:	|      addq.l #8,sp
    f198:	|      move.l d0,1c786 <loadNow>
    FreeVec(aaaaa);
    f19e:	|      move.l 12(sp),4(sp)
    f1a4:	|      move.l 1c7ba <SysBase>,d0
    f1aa:	|      movea.l d0,a6
    f1ac:	|      movea.l 4(sp),a1
    f1b0:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    f1b4:	|      moveq #28,d0
    f1b6:	|      add.l 24(sp),d0
    f1ba:	|      clr.l -(sp)
    f1bc:	|      pea 1 <_start+0x1>
    f1c0:	|      move.l d0,-(sp)
    f1c2:	|      jsr 161fe <setVariable>
    f1c8:	|      lea 12(sp),sp
    saverFunc = fun;
    f1cc:	|      move.l 24(sp),1c880 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    f1d4:	|      moveq #0,d0
}
    f1d6:	'----> movea.l (sp)+,a6
    f1d8:	       lea 12(sp),sp
    f1dc:	       rts

0000f1de <builtIn_fileExists>:

builtIn(fileExists)
{
    f1de:	       lea -36(sp),sp
    f1e2:	       move.l a6,-(sp)
    f1e4:	       move.l d2,-(sp)
	KPrintF("running fileExists\n");
    f1e6:	       pea 1aca9 <talk.c.490538ff+0x157>
    f1ec:	       jsr 183ec <KPrintF>
    f1f2:	       addq.l #4,sp
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    f1f4:	       movea.l 52(sp),a0
    f1f8:	       move.l 24(a0),d0
    f1fc:	       move.l d0,-(sp)
    f1fe:	       jsr 15ee2 <getTextFromAnyVar>
    f204:	       addq.l #4,sp
    f206:	       move.l d0,1c786 <loadNow>
    trimStack(&fun->stack);
    f20c:	       moveq #24,d0
    f20e:	       add.l 52(sp),d0
    f212:	       move.l d0,-(sp)
    f214:	       jsr 16290 <trimStack>
    f21a:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    f21c:	       move.l 1c786 <loadNow>,d0
    f222:	       move.l d0,-(sp)
    f224:	       jsr 2fe <encodeFilename>
    f22a:	       addq.l #4,sp
    f22c:	       move.l d0,40(sp)
    FreeVec(loadNow);
    f230:	       move.l 1c786 <loadNow>,36(sp)
    f238:	       move.l 1c7ba <SysBase>,d0
    f23e:	       movea.l d0,a6
    f240:	       movea.l 36(sp),a1
    f244:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    f248:	       move.l 40(sp),-(sp)
    f24c:	       jsr ebf6 <failSecurityCheck>
    f252:	       addq.l #4,sp
    f254:	       tst.w d0
    f256:	   ,-- beq.s f25e <builtIn_fileExists+0x80>
    f258:	   |   moveq #1,d0
    f25a:	,--|-- bra.w f2fe <builtIn_fileExists+0x120>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    f25e:	|  '-> move.l 40(sp),32(sp)
    f264:	|      move.l #1005,28(sp)
    f26c:	|      move.l 1c7c2 <DOSBase>,d0
    f272:	|      movea.l d0,a6
    f274:	|      move.l 32(sp),d1
    f278:	|      move.l 28(sp),d2
    f27c:	|      jsr -30(a6)
    f280:	|      move.l d0,24(sp)
    f284:	|      move.l 24(sp),d0
    f288:	|      move.l d0,20(sp)
    if (!fp) {        
    f28c:	|  ,-- bne.s f29c <builtIn_fileExists+0xbe>
        KPrintF("Can't get current directory.\n");      
    f28e:	|  |   pea 1acbd <talk.c.490538ff+0x16b>
    f294:	|  |   jsr 183ec <KPrintF>
    f29a:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    f29c:	|  '-> tst.l 20(sp)
    f2a0:	|      sne d0
    f2a2:	|      neg.b d0
    f2a4:	|      moveq #0,d1
    f2a6:	|      move.b d0,d1
    f2a8:	|      moveq #28,d0
    f2aa:	|      add.l 52(sp),d0
    f2ae:	|      move.l d1,-(sp)
    f2b0:	|      pea 1 <_start+0x1>
    f2b4:	|      move.l d0,-(sp)
    f2b6:	|      jsr 161fe <setVariable>
    f2bc:	|      lea 12(sp),sp
    if (fp) Close(fp);
    f2c0:	|      tst.l 20(sp)
    f2c4:	|  ,-- beq.s f2e0 <builtIn_fileExists+0x102>
    f2c6:	|  |   move.l 20(sp),16(sp)
    f2cc:	|  |   move.l 1c7c2 <DOSBase>,d0
    f2d2:	|  |   movea.l d0,a6
    f2d4:	|  |   move.l 16(sp),d1
    f2d8:	|  |   jsr -36(a6)
    f2dc:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    f2e0:	|  '-> move.l 40(sp),8(sp)
    f2e6:	|      move.l 1c7ba <SysBase>,d0
    f2ec:	|      movea.l d0,a6
    f2ee:	|      movea.l 8(sp),a1
    f2f2:	|      jsr -690(a6)
    loadNow = NULL;
    f2f6:	|      clr.l 1c786 <loadNow>
    return BR_CONTINUE;
    f2fc:	|      moveq #2,d0
}
    f2fe:	'----> move.l (sp)+,d2
    f300:	       movea.l (sp)+,a6
    f302:	       lea 36(sp),sp
    f306:	       rts

0000f308 <builtIn_loadGame>:

builtIn(loadGame)
{
    f308:	       lea -36(sp),sp
    f30c:	       move.l a6,-(sp)
    f30e:	       move.l d2,-(sp)
	KPrintF("running loadGame\n");
    f310:	       pea 1acdb <talk.c.490538ff+0x189>
    f316:	       jsr 183ec <KPrintF>
    f31c:	       addq.l #4,sp
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    f31e:	       movea.l 52(sp),a0
    f322:	       move.l 24(a0),d0
    f326:	       move.l d0,-(sp)
    f328:	       jsr 15ee2 <getTextFromAnyVar>
    f32e:	       addq.l #4,sp
    f330:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    f334:	       moveq #24,d0
    f336:	       add.l 52(sp),d0
    f33a:	       move.l d0,-(sp)
    f33c:	       jsr 16290 <trimStack>
    f342:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    f344:	       move.l 40(sp),-(sp)
    f348:	       jsr 2fe <encodeFilename>
    f34e:	       addq.l #4,sp
    f350:	       move.l d0,1c786 <loadNow>
    FreeVec(aaaaa);
    f356:	       move.l 40(sp),36(sp)
    f35c:	       move.l 1c7ba <SysBase>,d0
    f362:	       movea.l d0,a6
    f364:	       movea.l 36(sp),a1
    f368:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    f36c:	       move.l 1c786 <loadNow>,d0
    f372:	       move.l d0,-(sp)
    f374:	       jsr ebf6 <failSecurityCheck>
    f37a:	       addq.l #4,sp
    f37c:	       tst.w d0
    f37e:	   ,-- beq.s f384 <builtIn_loadGame+0x7c>
    f380:	   |   moveq #1,d0
    f382:	,--|-- bra.s f3f4 <builtIn_loadGame+0xec>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    f384:	|  '-> move.l 1c786 <loadNow>,32(sp)
    f38c:	|      move.l #1005,28(sp)
    f394:	|      move.l 1c7c2 <DOSBase>,d0
    f39a:	|      movea.l d0,a6
    f39c:	|      move.l 32(sp),d1
    f3a0:	|      move.l 28(sp),d2
    f3a4:	|      jsr -30(a6)
    f3a8:	|      move.l d0,24(sp)
    f3ac:	|      move.l 24(sp),d0
    f3b0:	|      move.l d0,20(sp)
    if (fp) {
    f3b4:	|  ,-- beq.s f3d4 <builtIn_loadGame+0xcc>
        Close(fp);
    f3b6:	|  |   move.l 20(sp),12(sp)
    f3bc:	|  |   move.l 1c7c2 <DOSBase>,d0
    f3c2:	|  |   movea.l d0,a6
    f3c4:	|  |   move.l 12(sp),d1
    f3c8:	|  |   jsr -36(a6)
    f3cc:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    f3d0:	|  |   moveq #0,d0
    f3d2:	+--|-- bra.s f3f4 <builtIn_loadGame+0xec>
    }
    FreeVec(loadNow);
    f3d4:	|  '-> move.l 1c786 <loadNow>,16(sp)
    f3dc:	|      move.l 1c7ba <SysBase>,d0
    f3e2:	|      movea.l d0,a6
    f3e4:	|      movea.l 16(sp),a1
    f3e8:	|      jsr -690(a6)
    loadNow = NULL;
    f3ec:	|      clr.l 1c786 <loadNow>
    return BR_CONTINUE;
    f3f2:	|      moveq #2,d0
}
    f3f4:	'----> move.l (sp)+,d2
    f3f6:	       movea.l (sp)+,a6
    f3f8:	       lea 36(sp),sp
    f3fc:	       rts

0000f3fe <builtIn_blankScreen>:
#pragma mark -
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	KPrintF("running blankScreen\n");
    f3fe:	pea 1aced <talk.c.490538ff+0x19b>
    f404:	jsr 183ec <KPrintF>
    f40a:	addq.l #4,sp
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    f40c:	move.l 1c856 <sceneHeight>,d0
    f412:	move.l d0,d1
    f414:	move.l 1c852 <sceneWidth>,d0
    f41a:	move.l d1,-(sp)
    f41c:	move.l d0,-(sp)
    f41e:	clr.l -(sp)
    f420:	clr.l -(sp)
    f422:	jsr dae0 <blankScreen>
    f428:	lea 16(sp),sp
	return BR_CONTINUE;
    f42c:	moveq #2,d0
}
    f42e:	rts

0000f430 <builtIn_blankArea>:

builtIn(blankArea)
{
    f430:	       lea -16(sp),sp
	KPrintF("running blankArea\n");
    f434:	       pea 1ad02 <talk.c.490538ff+0x1b0>
    f43a:	       jsr 183ec <KPrintF>
    f440:	       addq.l #4,sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    f442:	       movea.l 24(sp),a0
    f446:	       move.l 24(a0),d0
    f44a:	       move.l d0,-(sp)
    f44c:	       pea 1 <_start+0x1>
    f450:	       lea 8(sp),a0
    f454:	       move.l a0,-(sp)
    f456:	       jsr 1590c <getValueType>
    f45c:	       lea 12(sp),sp
    f460:	       tst.w d0
    f462:	   ,-- bne.s f46a <builtIn_blankArea+0x3a>
    f464:	   |   moveq #1,d0
    f466:	,--|-- bra.w f540 <builtIn_blankArea+0x110>
	trimStack (&fun -> stack);
    f46a:	|  '-> moveq #24,d0
    f46c:	|      add.l 24(sp),d0
    f470:	|      move.l d0,-(sp)
    f472:	|      jsr 16290 <trimStack>
    f478:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    f47a:	|      movea.l 24(sp),a0
    f47e:	|      move.l 24(a0),d0
    f482:	|      move.l d0,-(sp)
    f484:	|      pea 1 <_start+0x1>
    f488:	|      lea 12(sp),a0
    f48c:	|      move.l a0,-(sp)
    f48e:	|      jsr 1590c <getValueType>
    f494:	|      lea 12(sp),sp
    f498:	|      tst.w d0
    f49a:	|  ,-- bne.s f4a2 <builtIn_blankArea+0x72>
    f49c:	|  |   moveq #1,d0
    f49e:	+--|-- bra.w f540 <builtIn_blankArea+0x110>
	trimStack (&fun -> stack);
    f4a2:	|  '-> moveq #24,d0
    f4a4:	|      add.l 24(sp),d0
    f4a8:	|      move.l d0,-(sp)
    f4aa:	|      jsr 16290 <trimStack>
    f4b0:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    f4b2:	|      movea.l 24(sp),a0
    f4b6:	|      move.l 24(a0),d0
    f4ba:	|      move.l d0,-(sp)
    f4bc:	|      pea 1 <_start+0x1>
    f4c0:	|      moveq #16,d0
    f4c2:	|      add.l sp,d0
    f4c4:	|      move.l d0,-(sp)
    f4c6:	|      jsr 1590c <getValueType>
    f4cc:	|      lea 12(sp),sp
    f4d0:	|      tst.w d0
    f4d2:	|  ,-- bne.s f4d8 <builtIn_blankArea+0xa8>
    f4d4:	|  |   moveq #1,d0
    f4d6:	+--|-- bra.s f540 <builtIn_blankArea+0x110>
	trimStack (&fun -> stack);
    f4d8:	|  '-> moveq #24,d0
    f4da:	|      add.l 24(sp),d0
    f4de:	|      move.l d0,-(sp)
    f4e0:	|      jsr 16290 <trimStack>
    f4e6:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    f4e8:	|      movea.l 24(sp),a0
    f4ec:	|      move.l 24(a0),d0
    f4f0:	|      move.l d0,-(sp)
    f4f2:	|      pea 1 <_start+0x1>
    f4f6:	|      moveq #20,d0
    f4f8:	|      add.l sp,d0
    f4fa:	|      move.l d0,-(sp)
    f4fc:	|      jsr 1590c <getValueType>
    f502:	|      lea 12(sp),sp
    f506:	|      tst.w d0
    f508:	|  ,-- bne.s f50e <builtIn_blankArea+0xde>
    f50a:	|  |   moveq #1,d0
    f50c:	+--|-- bra.s f540 <builtIn_blankArea+0x110>
	trimStack (&fun -> stack);
    f50e:	|  '-> moveq #24,d0
    f510:	|      add.l 24(sp),d0
    f514:	|      move.l d0,-(sp)
    f516:	|      jsr 16290 <trimStack>
    f51c:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    f51e:	|      movea.l (sp),a1
    f520:	|      movea.l 4(sp),a0
    f524:	|      move.l 8(sp),d1
    f528:	|      move.l 12(sp),d0
    f52c:	|      move.l a1,-(sp)
    f52e:	|      move.l a0,-(sp)
    f530:	|      move.l d1,-(sp)
    f532:	|      move.l d0,-(sp)
    f534:	|      jsr dae0 <blankScreen>
    f53a:	|      lea 16(sp),sp
	return BR_CONTINUE;
    f53e:	|      moveq #2,d0
}
    f540:	'----> lea 16(sp),sp
    f544:	       rts

0000f546 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	KPrintF("running darkBackground\n");
    f546:	pea 1ad15 <talk.c.490538ff+0x1c3>
    f54c:	jsr 183ec <KPrintF>
    f552:	addq.l #4,sp
	UNUSEDALL
	darkScreen ();
    f554:	jsr dafe <darkScreen>
	return BR_CONTINUE;
    f55a:	moveq #2,d0
}
    f55c:	rts

0000f55e <builtIn_addOverlay>:

builtIn(addOverlay)
{
    f55e:	       lea -12(sp),sp
	KPrintF("running addOverlay\n");
    f562:	       pea 1ad2d <talk.c.490538ff+0x1db>
    f568:	       jsr 183ec <KPrintF>
    f56e:	       addq.l #4,sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f570:	       movea.l 20(sp),a0
    f574:	       move.l 24(a0),d0
    f578:	       move.l d0,-(sp)
    f57a:	       pea 1 <_start+0x1>
    f57e:	       lea 8(sp),a0
    f582:	       move.l a0,-(sp)
    f584:	       jsr 1590c <getValueType>
    f58a:	       lea 12(sp),sp
    f58e:	       tst.w d0
    f590:	   ,-- bne.s f598 <builtIn_addOverlay+0x3a>
    f592:	   |   moveq #1,d0
    f594:	,--|-- bra.w f630 <builtIn_addOverlay+0xd2>
	trimStack (&fun -> stack);
    f598:	|  '-> moveq #24,d0
    f59a:	|      add.l 20(sp),d0
    f59e:	|      move.l d0,-(sp)
    f5a0:	|      jsr 16290 <trimStack>
    f5a6:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f5a8:	|      movea.l 20(sp),a0
    f5ac:	|      move.l 24(a0),d0
    f5b0:	|      move.l d0,-(sp)
    f5b2:	|      pea 1 <_start+0x1>
    f5b6:	|      moveq #12,d0
    f5b8:	|      add.l sp,d0
    f5ba:	|      move.l d0,-(sp)
    f5bc:	|      jsr 1590c <getValueType>
    f5c2:	|      lea 12(sp),sp
    f5c6:	|      tst.w d0
    f5c8:	|  ,-- bne.s f5ce <builtIn_addOverlay+0x70>
    f5ca:	|  |   moveq #1,d0
    f5cc:	+--|-- bra.s f630 <builtIn_addOverlay+0xd2>
	trimStack (&fun -> stack);
    f5ce:	|  '-> moveq #24,d0
    f5d0:	|      add.l 20(sp),d0
    f5d4:	|      move.l d0,-(sp)
    f5d6:	|      jsr 16290 <trimStack>
    f5dc:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f5de:	|      movea.l 20(sp),a0
    f5e2:	|      move.l 24(a0),d0
    f5e6:	|      move.l d0,-(sp)
    f5e8:	|      pea 5 <_start+0x5>
    f5ec:	|      moveq #16,d0
    f5ee:	|      add.l sp,d0
    f5f0:	|      move.l d0,-(sp)
    f5f2:	|      jsr 1590c <getValueType>
    f5f8:	|      lea 12(sp),sp
    f5fc:	|      tst.w d0
    f5fe:	|  ,-- bne.s f604 <builtIn_addOverlay+0xa6>
    f600:	|  |   moveq #1,d0
    f602:	+--|-- bra.s f630 <builtIn_addOverlay+0xd2>
	trimStack (&fun -> stack);
    f604:	|  '-> moveq #24,d0
    f606:	|      add.l 20(sp),d0
    f60a:	|      move.l d0,-(sp)
    f60c:	|      jsr 16290 <trimStack>
    f612:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    f614:	|      movea.l (sp),a0
    f616:	|      move.l 4(sp),d1
    f61a:	|      move.l 8(sp),d0
    f61e:	|      move.l a0,-(sp)
    f620:	|      move.l d1,-(sp)
    f622:	|      move.l d0,-(sp)
    f624:	|      jsr dc1c <loadBackDrop>
    f62a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f62e:	|      moveq #2,d0
}
    f630:	'----> lea 12(sp),sp
    f634:	       rts

0000f636 <builtIn_addZBufferLayer>:

//addZBufferLayer( xPos, yPos, width, height )
builtIn(addZBufferLayer)
{
    f636:	       lea -20(sp),sp
    f63a:	       move.l d2,-(sp)
	KPrintF("running addZBufferLayer\n");
    f63c:	       pea 1ad41 <talk.c.490538ff+0x1ef>
    f642:	       jsr 183ec <KPrintF>
    f648:	       addq.l #4,sp
	UNUSEDALL
	int xpos, ypos, width, height, yz;
	if (! getValueType(&yz, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f64a:	       movea.l 32(sp),a0
    f64e:	       move.l 24(a0),d0
    f652:	       move.l d0,-(sp)
    f654:	       pea 1 <_start+0x1>
    f658:	       lea 12(sp),a0
    f65c:	       move.l a0,-(sp)
    f65e:	       jsr 1590c <getValueType>
    f664:	       lea 12(sp),sp
    f668:	       tst.w d0
    f66a:	   ,-- bne.s f672 <builtIn_addZBufferLayer+0x3c>
    f66c:	   |   moveq #1,d0
    f66e:	,--|-- bra.w f788 <builtIn_addZBufferLayer+0x152>
	trimStack (&fun -> stack);
    f672:	|  '-> moveq #24,d0
    f674:	|      add.l 32(sp),d0
    f678:	|      move.l d0,-(sp)
    f67a:	|      jsr 16290 <trimStack>
    f680:	|      addq.l #4,sp
	if (! getValueType(&height, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f682:	|      movea.l 32(sp),a0
    f686:	|      move.l 24(a0),d0
    f68a:	|      move.l d0,-(sp)
    f68c:	|      pea 1 <_start+0x1>
    f690:	|      lea 16(sp),a0
    f694:	|      move.l a0,-(sp)
    f696:	|      jsr 1590c <getValueType>
    f69c:	|      lea 12(sp),sp
    f6a0:	|      tst.w d0
    f6a2:	|  ,-- bne.s f6aa <builtIn_addZBufferLayer+0x74>
    f6a4:	|  |   moveq #1,d0
    f6a6:	+--|-- bra.w f788 <builtIn_addZBufferLayer+0x152>
	trimStack (&fun -> stack);
    f6aa:	|  '-> moveq #24,d0
    f6ac:	|      add.l 32(sp),d0
    f6b0:	|      move.l d0,-(sp)
    f6b2:	|      jsr 16290 <trimStack>
    f6b8:	|      addq.l #4,sp
	if (! getValueType(&width, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f6ba:	|      movea.l 32(sp),a0
    f6be:	|      move.l 24(a0),d0
    f6c2:	|      move.l d0,-(sp)
    f6c4:	|      pea 1 <_start+0x1>
    f6c8:	|      lea 20(sp),a0
    f6cc:	|      move.l a0,-(sp)
    f6ce:	|      jsr 1590c <getValueType>
    f6d4:	|      lea 12(sp),sp
    f6d8:	|      tst.w d0
    f6da:	|  ,-- bne.s f6e2 <builtIn_addZBufferLayer+0xac>
    f6dc:	|  |   moveq #1,d0
    f6de:	+--|-- bra.w f788 <builtIn_addZBufferLayer+0x152>
	trimStack (&fun -> stack);	
    f6e2:	|  '-> moveq #24,d0
    f6e4:	|      add.l 32(sp),d0
    f6e8:	|      move.l d0,-(sp)
    f6ea:	|      jsr 16290 <trimStack>
    f6f0:	|      addq.l #4,sp
	if (! getValueType(&ypos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f6f2:	|      movea.l 32(sp),a0
    f6f6:	|      move.l 24(a0),d0
    f6fa:	|      move.l d0,-(sp)
    f6fc:	|      pea 1 <_start+0x1>
    f700:	|      moveq #24,d0
    f702:	|      add.l sp,d0
    f704:	|      move.l d0,-(sp)
    f706:	|      jsr 1590c <getValueType>
    f70c:	|      lea 12(sp),sp
    f710:	|      tst.w d0
    f712:	|  ,-- bne.s f718 <builtIn_addZBufferLayer+0xe2>
    f714:	|  |   moveq #1,d0
    f716:	+--|-- bra.s f788 <builtIn_addZBufferLayer+0x152>
	trimStack (&fun -> stack);	
    f718:	|  '-> moveq #24,d0
    f71a:	|      add.l 32(sp),d0
    f71e:	|      move.l d0,-(sp)
    f720:	|      jsr 16290 <trimStack>
    f726:	|      addq.l #4,sp
	if (! getValueType(&xpos, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    f728:	|      movea.l 32(sp),a0
    f72c:	|      move.l 24(a0),d0
    f730:	|      move.l d0,-(sp)
    f732:	|      pea 1 <_start+0x1>
    f736:	|      moveq #28,d0
    f738:	|      add.l sp,d0
    f73a:	|      move.l d0,-(sp)
    f73c:	|      jsr 1590c <getValueType>
    f742:	|      lea 12(sp),sp
    f746:	|      tst.w d0
    f748:	|  ,-- bne.s f74e <builtIn_addZBufferLayer+0x118>
    f74a:	|  |   moveq #1,d0
    f74c:	+--|-- bra.s f788 <builtIn_addZBufferLayer+0x152>
	trimStack (&fun -> stack);	
    f74e:	|  '-> moveq #24,d0
    f750:	|      add.l 32(sp),d0
    f754:	|      move.l d0,-(sp)
    f756:	|      jsr 16290 <trimStack>
    f75c:	|      addq.l #4,sp
	addZBufferLayer( xpos, ypos, width, height, yz);
    f75e:	|      move.l 4(sp),d2
    f762:	|      movea.l 8(sp),a1
    f766:	|      movea.l 12(sp),a0
    f76a:	|      move.l 16(sp),d1
    f76e:	|      move.l 20(sp),d0
    f772:	|      move.l d2,-(sp)
    f774:	|      move.l a1,-(sp)
    f776:	|      move.l a0,-(sp)
    f778:	|      move.l d1,-(sp)
    f77a:	|      move.l d0,-(sp)
    f77c:	|      jsr 8dec <addZBufferLayer>
    f782:	|      lea 20(sp),sp
	return BR_CONTINUE;
    f786:	|      moveq #2,d0
}
    f788:	'----> move.l (sp)+,d2
    f78a:	       lea 20(sp),sp
    f78e:	       rts

0000f790 <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    f790:	       lea -12(sp),sp
	KPrintF("running mixOverlay\n");
    f794:	       pea 1ad5a <talk.c.490538ff+0x208>
    f79a:	       jsr 183ec <KPrintF>
    f7a0:	       addq.l #4,sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f7a2:	       movea.l 20(sp),a0
    f7a6:	       move.l 24(a0),d0
    f7aa:	       move.l d0,-(sp)
    f7ac:	       pea 1 <_start+0x1>
    f7b0:	       lea 8(sp),a0
    f7b4:	       move.l a0,-(sp)
    f7b6:	       jsr 1590c <getValueType>
    f7bc:	       lea 12(sp),sp
    f7c0:	       tst.w d0
    f7c2:	   ,-- bne.s f7ca <builtIn_mixOverlay+0x3a>
    f7c4:	   |   moveq #1,d0
    f7c6:	,--|-- bra.w f862 <builtIn_mixOverlay+0xd2>
	trimStack (&fun -> stack);
    f7ca:	|  '-> moveq #24,d0
    f7cc:	|      add.l 20(sp),d0
    f7d0:	|      move.l d0,-(sp)
    f7d2:	|      jsr 16290 <trimStack>
    f7d8:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f7da:	|      movea.l 20(sp),a0
    f7de:	|      move.l 24(a0),d0
    f7e2:	|      move.l d0,-(sp)
    f7e4:	|      pea 1 <_start+0x1>
    f7e8:	|      moveq #12,d0
    f7ea:	|      add.l sp,d0
    f7ec:	|      move.l d0,-(sp)
    f7ee:	|      jsr 1590c <getValueType>
    f7f4:	|      lea 12(sp),sp
    f7f8:	|      tst.w d0
    f7fa:	|  ,-- bne.s f800 <builtIn_mixOverlay+0x70>
    f7fc:	|  |   moveq #1,d0
    f7fe:	+--|-- bra.s f862 <builtIn_mixOverlay+0xd2>
	trimStack (&fun -> stack);
    f800:	|  '-> moveq #24,d0
    f802:	|      add.l 20(sp),d0
    f806:	|      move.l d0,-(sp)
    f808:	|      jsr 16290 <trimStack>
    f80e:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f810:	|      movea.l 20(sp),a0
    f814:	|      move.l 24(a0),d0
    f818:	|      move.l d0,-(sp)
    f81a:	|      pea 5 <_start+0x5>
    f81e:	|      moveq #16,d0
    f820:	|      add.l sp,d0
    f822:	|      move.l d0,-(sp)
    f824:	|      jsr 1590c <getValueType>
    f82a:	|      lea 12(sp),sp
    f82e:	|      tst.w d0
    f830:	|  ,-- bne.s f836 <builtIn_mixOverlay+0xa6>
    f832:	|  |   moveq #1,d0
    f834:	+--|-- bra.s f862 <builtIn_mixOverlay+0xd2>
	trimStack (&fun -> stack);
    f836:	|  '-> moveq #24,d0
    f838:	|      add.l 20(sp),d0
    f83c:	|      move.l d0,-(sp)
    f83e:	|      jsr 16290 <trimStack>
    f844:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    f846:	|      movea.l (sp),a0
    f848:	|      move.l 4(sp),d1
    f84c:	|      move.l 8(sp),d0
    f850:	|      move.l a0,-(sp)
    f852:	|      move.l d1,-(sp)
    f854:	|      move.l d0,-(sp)
    f856:	|      jsr dc92 <mixBackDrop>
    f85c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f860:	|      moveq #2,d0
}
    f862:	'----> lea 12(sp),sp
    f866:	       rts

0000f868 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    f868:	       lea -12(sp),sp
	KPrintF("running pasteImage\n");
    f86c:	       pea 1ad6e <talk.c.490538ff+0x21c>
    f872:	       jsr 183ec <KPrintF>
    f878:	       addq.l #4,sp
	UNUSEDALL
	//KPrintF("pasteimage: Started\n");
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f87a:	       movea.l 20(sp),a0
    f87e:	       move.l 24(a0),d0
    f882:	       move.l d0,-(sp)
    f884:	       pea 1 <_start+0x1>
    f888:	       lea 8(sp),a0
    f88c:	       move.l a0,-(sp)
    f88e:	       jsr 1590c <getValueType>
    f894:	       lea 12(sp),sp
    f898:	       tst.w d0
    f89a:	   ,-- bne.s f8a2 <builtIn_pasteImage+0x3a>
    f89c:	   |   moveq #1,d0
    f89e:	,--|-- bra.w f932 <builtIn_pasteImage+0xca>
	trimStack (&fun -> stack);
    f8a2:	|  '-> moveq #24,d0
    f8a4:	|      add.l 20(sp),d0
    f8a8:	|      move.l d0,-(sp)
    f8aa:	|      jsr 16290 <trimStack>
    f8b0:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f8b2:	|      movea.l 20(sp),a0
    f8b6:	|      move.l 24(a0),d0
    f8ba:	|      move.l d0,-(sp)
    f8bc:	|      pea 1 <_start+0x1>
    f8c0:	|      moveq #12,d0
    f8c2:	|      add.l sp,d0
    f8c4:	|      move.l d0,-(sp)
    f8c6:	|      jsr 1590c <getValueType>
    f8cc:	|      lea 12(sp),sp
    f8d0:	|      tst.w d0
    f8d2:	|  ,-- bne.s f8d8 <builtIn_pasteImage+0x70>
    f8d4:	|  |   moveq #1,d0
    f8d6:	+--|-- bra.s f932 <builtIn_pasteImage+0xca>
	trimStack (&fun -> stack);
    f8d8:	|  '-> moveq #24,d0
    f8da:	|      add.l 20(sp),d0
    f8de:	|      move.l d0,-(sp)
    f8e0:	|      jsr 16290 <trimStack>
    f8e6:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    f8e8:	|      movea.l 20(sp),a0
    f8ec:	|      move.l 24(a0),d0
    f8f0:	|      move.l d0,-(sp)
    f8f2:	|      jsr 15de4 <getAnimationFromVar>
    f8f8:	|      addq.l #4,sp
    f8fa:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    f8fe:	|      moveq #24,d0
    f900:	|      add.l 20(sp),d0
    f904:	|      move.l d0,-(sp)
    f906:	|      jsr 16290 <trimStack>
    f90c:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    f90e:	|      tst.l 8(sp)
    f912:	|  ,-- bne.s f918 <builtIn_pasteImage+0xb0>
    f914:	|  |   moveq #2,d0
    f916:	+--|-- bra.s f932 <builtIn_pasteImage+0xca>

	pasteCursor (x, y, pp);
    f918:	|  '-> move.l (sp),d1
    f91a:	|      move.l 4(sp),d0
    f91e:	|      move.l 8(sp),-(sp)
    f922:	|      move.l d1,-(sp)
    f924:	|      move.l d0,-(sp)
    f926:	|      jsr d94 <pasteCursor>
    f92c:	|      lea 12(sp),sp
	//KPrintF("pasteimage: Finished\n");
	return BR_CONTINUE;	
    f930:	|      moveq #2,d0
}
    f932:	'----> lea 12(sp),sp
    f936:	       rts

0000f938 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    f938:	       subq.l #8,sp
	KPrintF("running setSceneDimensions\n");
    f93a:	       pea 1ad82 <talk.c.490538ff+0x230>
    f940:	       jsr 183ec <KPrintF>
    f946:	       addq.l #4,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f948:	       movea.l 16(sp),a0
    f94c:	       move.l 24(a0),d0
    f950:	       move.l d0,-(sp)
    f952:	       pea 1 <_start+0x1>
    f956:	       move.l sp,d0
    f958:	       addq.l #8,d0
    f95a:	       move.l d0,-(sp)
    f95c:	       jsr 1590c <getValueType>
    f962:	       lea 12(sp),sp
    f966:	       tst.w d0
    f968:	   ,-- bne.s f970 <builtIn_setSceneDimensions+0x38>
    f96a:	   |   moveq #1,d0
    f96c:	,--|-- bra.w f9f8 <builtIn_setSceneDimensions+0xc0>
	trimStack (&fun -> stack);
    f970:	|  '-> moveq #24,d0
    f972:	|      add.l 16(sp),d0
    f976:	|      move.l d0,-(sp)
    f978:	|      jsr 16290 <trimStack>
    f97e:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f980:	|      movea.l 16(sp),a0
    f984:	|      move.l 24(a0),d0
    f988:	|      move.l d0,-(sp)
    f98a:	|      pea 1 <_start+0x1>
    f98e:	|      moveq #12,d0
    f990:	|      add.l sp,d0
    f992:	|      move.l d0,-(sp)
    f994:	|      jsr 1590c <getValueType>
    f99a:	|      lea 12(sp),sp
    f99e:	|      tst.w d0
    f9a0:	|  ,-- bne.s f9a6 <builtIn_setSceneDimensions+0x6e>
    f9a2:	|  |   moveq #1,d0
    f9a4:	+--|-- bra.s f9f8 <builtIn_setSceneDimensions+0xc0>
	trimStack (&fun -> stack);
    f9a6:	|  '-> moveq #24,d0
    f9a8:	|      add.l 16(sp),d0
    f9ac:	|      move.l d0,-(sp)
    f9ae:	|      jsr 16290 <trimStack>
    f9b4:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    f9b6:	|      move.l (sp),d1
    f9b8:	|      move.l 4(sp),d0
    f9bc:	|      move.l d1,-(sp)
    f9be:	|      move.l d0,-(sp)
    f9c0:	|      jsr dce8 <resizeBackdrop>
    f9c6:	|      addq.l #8,sp
    f9c8:	|      tst.w d0
    f9ca:	|  ,-- beq.s f9e8 <builtIn_setSceneDimensions+0xb0>
		blankScreen (0, 0, x, y);
    f9cc:	|  |   move.l (sp),d1
    f9ce:	|  |   move.l 4(sp),d0
    f9d2:	|  |   move.l d1,-(sp)
    f9d4:	|  |   move.l d0,-(sp)
    f9d6:	|  |   clr.l -(sp)
    f9d8:	|  |   clr.l -(sp)
    f9da:	|  |   jsr dae0 <blankScreen>
    f9e0:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    f9e4:	|  |   moveq #2,d0
    f9e6:	+--|-- bra.s f9f8 <builtIn_setSceneDimensions+0xc0>
	}
	KPrintF("Out of memory creating new backdrop.");
    f9e8:	|  '-> pea 1ad9e <talk.c.490538ff+0x24c>
    f9ee:	|      jsr 183ec <KPrintF>
    f9f4:	|      addq.l #4,sp
	return BR_ERROR;
    f9f6:	|      moveq #1,d0
}
    f9f8:	'----> addq.l #8,sp
    f9fa:	       rts

0000f9fc <builtIn_aimCamera>:

builtIn(aimCamera)
{
    f9fc:	          move.l d3,-(sp)
    f9fe:	          move.l d2,-(sp)
	KPrintF("running aimCamera\n");
    fa00:	          pea 1adc3 <talk.c.490538ff+0x271>
    fa06:	          jsr 183ec <KPrintF>
    fa0c:	          addq.l #4,sp
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fa0e:	          movea.l 16(sp),a0
    fa12:	          move.l 24(a0),d0
    fa16:	          move.l d0,-(sp)
    fa18:	          pea 1 <_start+0x1>
    fa1c:	          pea 1c874 <cameraY>
    fa22:	          jsr 1590c <getValueType>
    fa28:	          lea 12(sp),sp
    fa2c:	          tst.w d0
    fa2e:	      ,-- bne.s fa36 <builtIn_aimCamera+0x3a>
    fa30:	      |   moveq #1,d0
    fa32:	,-----|-- bra.w fcb8 <builtIn_aimCamera+0x2bc>
	trimStack (&fun -> stack);
    fa36:	|     '-> moveq #24,d0
    fa38:	|         add.l 16(sp),d0
    fa3c:	|         move.l d0,-(sp)
    fa3e:	|         jsr 16290 <trimStack>
    fa44:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fa46:	|         movea.l 16(sp),a0
    fa4a:	|         move.l 24(a0),d0
    fa4e:	|         move.l d0,-(sp)
    fa50:	|         pea 1 <_start+0x1>
    fa54:	|         pea 1c870 <cameraX>
    fa5a:	|         jsr 1590c <getValueType>
    fa60:	|         lea 12(sp),sp
    fa64:	|         tst.w d0
    fa66:	|     ,-- bne.s fa6e <builtIn_aimCamera+0x72>
    fa68:	|     |   moveq #1,d0
    fa6a:	+-----|-- bra.w fcb8 <builtIn_aimCamera+0x2bc>
	trimStack (&fun -> stack);
    fa6e:	|     '-> moveq #24,d0
    fa70:	|         add.l 16(sp),d0
    fa74:	|         move.l d0,-(sp)
    fa76:	|         jsr 16290 <trimStack>
    fa7c:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    fa7e:	|         move.l 1c870 <cameraX>,d0
    fa84:	|         move.l d0,-(sp)
    fa86:	|         jsr 1881e <__floatsisf>
    fa8c:	|         addq.l #4,sp
    fa8e:	|         move.l d0,d2
    fa90:	|         move.l 1c702 <winWidth>,d0
    fa96:	|         lsr.l #1,d0
    fa98:	|         move.l d0,-(sp)
    fa9a:	|         jsr 18846 <__floatunsisf>
    faa0:	|         addq.l #4,sp
    faa2:	|         move.l d0,d1
    faa4:	|         move.l 1c142 <cameraZoom>,d0
    faaa:	|         move.l d0,-(sp)
    faac:	|         move.l d1,-(sp)
    faae:	|         jsr 186d4 <__divsf3>
    fab4:	|         addq.l #8,sp
    fab6:	|         move.l d0,-(sp)
    fab8:	|         move.l d2,-(sp)
    faba:	|         jsr 18b12 <__subsf3>
    fac0:	|         addq.l #8,sp
    fac2:	|         move.l d0,-(sp)
    fac4:	|         jsr 187b6 <__fixsfsi>
    faca:	|         addq.l #4,sp
    facc:	|         move.l d0,1c870 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    fad2:	|         move.l 1c874 <cameraY>,d0
    fad8:	|         move.l d0,-(sp)
    fada:	|         jsr 1881e <__floatsisf>
    fae0:	|         addq.l #4,sp
    fae2:	|         move.l d0,d2
    fae4:	|         move.l 1c706 <winHeight>,d0
    faea:	|         lsr.l #1,d0
    faec:	|         move.l d0,-(sp)
    faee:	|         jsr 18846 <__floatunsisf>
    faf4:	|         addq.l #4,sp
    faf6:	|         move.l d0,d1
    faf8:	|         move.l 1c142 <cameraZoom>,d0
    fafe:	|         move.l d0,-(sp)
    fb00:	|         move.l d1,-(sp)
    fb02:	|         jsr 186d4 <__divsf3>
    fb08:	|         addq.l #8,sp
    fb0a:	|         move.l d0,-(sp)
    fb0c:	|         move.l d2,-(sp)
    fb0e:	|         jsr 18b12 <__subsf3>
    fb14:	|         addq.l #8,sp
    fb16:	|         move.l d0,-(sp)
    fb18:	|         jsr 187b6 <__fixsfsi>
    fb1e:	|         addq.l #4,sp
    fb20:	|         move.l d0,1c874 <cameraY>

	if (cameraX < 0) cameraX = 0;
    fb26:	|         move.l 1c870 <cameraX>,d0
    fb2c:	|     ,-- bpl.s fb38 <builtIn_aimCamera+0x13c>
    fb2e:	|     |   clr.l 1c870 <cameraX>
    fb34:	|  ,--|-- bra.w fbee <builtIn_aimCamera+0x1f2>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    fb38:	|  |  '-> move.l 1c870 <cameraX>,d0
    fb3e:	|  |      move.l d0,-(sp)
    fb40:	|  |      jsr 1881e <__floatsisf>
    fb46:	|  |      addq.l #4,sp
    fb48:	|  |      move.l d0,d2
    fb4a:	|  |      move.l 1c852 <sceneWidth>,d0
    fb50:	|  |      move.l d0,-(sp)
    fb52:	|  |      jsr 18846 <__floatunsisf>
    fb58:	|  |      addq.l #4,sp
    fb5a:	|  |      move.l d0,d3
    fb5c:	|  |      move.l 1c702 <winWidth>,d0
    fb62:	|  |      move.l d0,-(sp)
    fb64:	|  |      jsr 18846 <__floatunsisf>
    fb6a:	|  |      addq.l #4,sp
    fb6c:	|  |      move.l d0,d1
    fb6e:	|  |      move.l 1c142 <cameraZoom>,d0
    fb74:	|  |      move.l d0,-(sp)
    fb76:	|  |      move.l d1,-(sp)
    fb78:	|  |      jsr 186d4 <__divsf3>
    fb7e:	|  |      addq.l #8,sp
    fb80:	|  |      move.l d0,-(sp)
    fb82:	|  |      move.l d3,-(sp)
    fb84:	|  |      jsr 18b12 <__subsf3>
    fb8a:	|  |      addq.l #8,sp
    fb8c:	|  |      move.l d0,-(sp)
    fb8e:	|  |      move.l d2,-(sp)
    fb90:	|  |      jsr 1898a <__gtsf2>
    fb96:	|  |      addq.l #8,sp
    fb98:	|  |      tst.l d0
    fb9a:	|  +----- ble.s fbee <builtIn_aimCamera+0x1f2>
    fb9c:	|  |      move.l 1c852 <sceneWidth>,d0
    fba2:	|  |      move.l d0,-(sp)
    fba4:	|  |      jsr 18846 <__floatunsisf>
    fbaa:	|  |      addq.l #4,sp
    fbac:	|  |      move.l d0,d2
    fbae:	|  |      move.l 1c702 <winWidth>,d0
    fbb4:	|  |      move.l d0,-(sp)
    fbb6:	|  |      jsr 18846 <__floatunsisf>
    fbbc:	|  |      addq.l #4,sp
    fbbe:	|  |      move.l d0,d1
    fbc0:	|  |      move.l 1c142 <cameraZoom>,d0
    fbc6:	|  |      move.l d0,-(sp)
    fbc8:	|  |      move.l d1,-(sp)
    fbca:	|  |      jsr 186d4 <__divsf3>
    fbd0:	|  |      addq.l #8,sp
    fbd2:	|  |      move.l d0,-(sp)
    fbd4:	|  |      move.l d2,-(sp)
    fbd6:	|  |      jsr 18b12 <__subsf3>
    fbdc:	|  |      addq.l #8,sp
    fbde:	|  |      move.l d0,-(sp)
    fbe0:	|  |      jsr 187b6 <__fixsfsi>
    fbe6:	|  |      addq.l #4,sp
    fbe8:	|  |      move.l d0,1c870 <cameraX>
	if (cameraY < 0) cameraY = 0;
    fbee:	|  '----> move.l 1c874 <cameraY>,d0
    fbf4:	|     ,-- bpl.s fc00 <builtIn_aimCamera+0x204>
    fbf6:	|     |   clr.l 1c874 <cameraY>
    fbfc:	|  ,--|-- bra.w fcb6 <builtIn_aimCamera+0x2ba>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    fc00:	|  |  '-> move.l 1c874 <cameraY>,d0
    fc06:	|  |      move.l d0,-(sp)
    fc08:	|  |      jsr 1881e <__floatsisf>
    fc0e:	|  |      addq.l #4,sp
    fc10:	|  |      move.l d0,d2
    fc12:	|  |      move.l 1c856 <sceneHeight>,d0
    fc18:	|  |      move.l d0,-(sp)
    fc1a:	|  |      jsr 18846 <__floatunsisf>
    fc20:	|  |      addq.l #4,sp
    fc22:	|  |      move.l d0,d3
    fc24:	|  |      move.l 1c706 <winHeight>,d0
    fc2a:	|  |      move.l d0,-(sp)
    fc2c:	|  |      jsr 18846 <__floatunsisf>
    fc32:	|  |      addq.l #4,sp
    fc34:	|  |      move.l d0,d1
    fc36:	|  |      move.l 1c142 <cameraZoom>,d0
    fc3c:	|  |      move.l d0,-(sp)
    fc3e:	|  |      move.l d1,-(sp)
    fc40:	|  |      jsr 186d4 <__divsf3>
    fc46:	|  |      addq.l #8,sp
    fc48:	|  |      move.l d0,-(sp)
    fc4a:	|  |      move.l d3,-(sp)
    fc4c:	|  |      jsr 18b12 <__subsf3>
    fc52:	|  |      addq.l #8,sp
    fc54:	|  |      move.l d0,-(sp)
    fc56:	|  |      move.l d2,-(sp)
    fc58:	|  |      jsr 1898a <__gtsf2>
    fc5e:	|  |      addq.l #8,sp
    fc60:	|  |      tst.l d0
    fc62:	|  +----- ble.s fcb6 <builtIn_aimCamera+0x2ba>
    fc64:	|  |      move.l 1c856 <sceneHeight>,d0
    fc6a:	|  |      move.l d0,-(sp)
    fc6c:	|  |      jsr 18846 <__floatunsisf>
    fc72:	|  |      addq.l #4,sp
    fc74:	|  |      move.l d0,d2
    fc76:	|  |      move.l 1c706 <winHeight>,d0
    fc7c:	|  |      move.l d0,-(sp)
    fc7e:	|  |      jsr 18846 <__floatunsisf>
    fc84:	|  |      addq.l #4,sp
    fc86:	|  |      move.l d0,d1
    fc88:	|  |      move.l 1c142 <cameraZoom>,d0
    fc8e:	|  |      move.l d0,-(sp)
    fc90:	|  |      move.l d1,-(sp)
    fc92:	|  |      jsr 186d4 <__divsf3>
    fc98:	|  |      addq.l #8,sp
    fc9a:	|  |      move.l d0,-(sp)
    fc9c:	|  |      move.l d2,-(sp)
    fc9e:	|  |      jsr 18b12 <__subsf3>
    fca4:	|  |      addq.l #8,sp
    fca6:	|  |      move.l d0,-(sp)
    fca8:	|  |      jsr 187b6 <__fixsfsi>
    fcae:	|  |      addq.l #4,sp
    fcb0:	|  |      move.l d0,1c874 <cameraY>
	return BR_CONTINUE;
    fcb6:	|  '----> moveq #2,d0
}
    fcb8:	'-------> move.l (sp)+,d2
    fcba:	          move.l (sp)+,d3
    fcbc:	          rts

0000fcbe <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    fcbe:	       subq.l #4,sp
    fcc0:	       move.l d2,-(sp)
	KPrintF("running zoomCamera\n");
    fcc2:	       pea 1add6 <talk.c.490538ff+0x284>
    fcc8:	       jsr 183ec <KPrintF>
    fcce:	       addq.l #4,sp
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fcd0:	       movea.l 16(sp),a0
    fcd4:	       move.l 24(a0),d0
    fcd8:	       move.l d0,-(sp)
    fcda:	       pea 1 <_start+0x1>
    fcde:	       moveq #12,d0
    fce0:	       add.l sp,d0
    fce2:	       move.l d0,-(sp)
    fce4:	       jsr 1590c <getValueType>
    fcea:	       lea 12(sp),sp
    fcee:	       tst.w d0
    fcf0:	   ,-- bne.s fcf8 <builtIn_zoomCamera+0x3a>
    fcf2:	   |   moveq #1,d0
    fcf4:	,--|-- bra.w fef2 <builtIn_zoomCamera+0x234>
	trimStack (&fun -> stack);
    fcf8:	|  '-> moveq #24,d0
    fcfa:	|      add.l 16(sp),d0
    fcfe:	|      move.l d0,-(sp)
    fd00:	|      jsr 16290 <trimStack>
    fd06:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    fd08:	|      move.l 1c776 <input+0xa>,d0
    fd0e:	|      move.l d0,-(sp)
    fd10:	|      jsr 1881e <__floatsisf>
    fd16:	|      addq.l #4,sp
    fd18:	|      move.l d0,d1
    fd1a:	|      move.l 1c142 <cameraZoom>,d0
    fd20:	|      move.l d0,-(sp)
    fd22:	|      move.l d1,-(sp)
    fd24:	|      jsr 188d0 <__mulsf3>
    fd2a:	|      addq.l #8,sp
    fd2c:	|      move.l d0,-(sp)
    fd2e:	|      jsr 187b6 <__fixsfsi>
    fd34:	|      addq.l #4,sp
    fd36:	|      move.l d0,1c776 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    fd3c:	|      move.l 1c77a <input+0xe>,d0
    fd42:	|      move.l d0,-(sp)
    fd44:	|      jsr 1881e <__floatsisf>
    fd4a:	|      addq.l #4,sp
    fd4c:	|      move.l d0,d1
    fd4e:	|      move.l 1c142 <cameraZoom>,d0
    fd54:	|      move.l d0,-(sp)
    fd56:	|      move.l d1,-(sp)
    fd58:	|      jsr 188d0 <__mulsf3>
    fd5e:	|      addq.l #8,sp
    fd60:	|      move.l d0,-(sp)
    fd62:	|      jsr 187b6 <__fixsfsi>
    fd68:	|      addq.l #4,sp
    fd6a:	|      move.l d0,1c77a <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    fd70:	|      move.l 4(sp),d0
    fd74:	|      move.l d0,-(sp)
    fd76:	|      jsr 1881e <__floatsisf>
    fd7c:	|      addq.l #4,sp
    fd7e:	|      move.l #1008981770,-(sp)
    fd84:	|      move.l d0,-(sp)
    fd86:	|      jsr 188d0 <__mulsf3>
    fd8c:	|      addq.l #8,sp
    fd8e:	|      move.l d0,1c142 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    fd94:	|      move.l 1c702 <winWidth>,d0
    fd9a:	|      move.l d0,-(sp)
    fd9c:	|      jsr 18846 <__floatunsisf>
    fda2:	|      addq.l #4,sp
    fda4:	|      move.l d0,d1
    fda6:	|      move.l 1c142 <cameraZoom>,d0
    fdac:	|      move.l d0,-(sp)
    fdae:	|      move.l d1,-(sp)
    fdb0:	|      jsr 186d4 <__divsf3>
    fdb6:	|      addq.l #8,sp
    fdb8:	|      move.l d0,d2
    fdba:	|      move.l 1c852 <sceneWidth>,d0
    fdc0:	|      move.l d0,-(sp)
    fdc2:	|      jsr 18846 <__floatunsisf>
    fdc8:	|      addq.l #4,sp
    fdca:	|      move.l d0,-(sp)
    fdcc:	|      move.l d2,-(sp)
    fdce:	|      jsr 1898a <__gtsf2>
    fdd4:	|      addq.l #8,sp
    fdd6:	|      tst.l d0
    fdd8:	|  ,-- ble.s fe0e <builtIn_zoomCamera+0x150>
    fdda:	|  |   move.l 1c702 <winWidth>,d0
    fde0:	|  |   move.l d0,-(sp)
    fde2:	|  |   jsr 18846 <__floatunsisf>
    fde8:	|  |   addq.l #4,sp
    fdea:	|  |   move.l d0,d2
    fdec:	|  |   move.l 1c852 <sceneWidth>,d0
    fdf2:	|  |   move.l d0,-(sp)
    fdf4:	|  |   jsr 18846 <__floatunsisf>
    fdfa:	|  |   addq.l #4,sp
    fdfc:	|  |   move.l d0,-(sp)
    fdfe:	|  |   move.l d2,-(sp)
    fe00:	|  |   jsr 186d4 <__divsf3>
    fe06:	|  |   addq.l #8,sp
    fe08:	|  |   move.l d0,1c142 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    fe0e:	|  '-> move.l 1c706 <winHeight>,d0
    fe14:	|      move.l d0,-(sp)
    fe16:	|      jsr 18846 <__floatunsisf>
    fe1c:	|      addq.l #4,sp
    fe1e:	|      move.l d0,d1
    fe20:	|      move.l 1c142 <cameraZoom>,d0
    fe26:	|      move.l d0,-(sp)
    fe28:	|      move.l d1,-(sp)
    fe2a:	|      jsr 186d4 <__divsf3>
    fe30:	|      addq.l #8,sp
    fe32:	|      move.l d0,d2
    fe34:	|      move.l 1c856 <sceneHeight>,d0
    fe3a:	|      move.l d0,-(sp)
    fe3c:	|      jsr 18846 <__floatunsisf>
    fe42:	|      addq.l #4,sp
    fe44:	|      move.l d0,-(sp)
    fe46:	|      move.l d2,-(sp)
    fe48:	|      jsr 1898a <__gtsf2>
    fe4e:	|      addq.l #8,sp
    fe50:	|      tst.l d0
    fe52:	|  ,-- ble.s fe88 <builtIn_zoomCamera+0x1ca>
    fe54:	|  |   move.l 1c706 <winHeight>,d0
    fe5a:	|  |   move.l d0,-(sp)
    fe5c:	|  |   jsr 18846 <__floatunsisf>
    fe62:	|  |   addq.l #4,sp
    fe64:	|  |   move.l d0,d2
    fe66:	|  |   move.l 1c856 <sceneHeight>,d0
    fe6c:	|  |   move.l d0,-(sp)
    fe6e:	|  |   jsr 18846 <__floatunsisf>
    fe74:	|  |   addq.l #4,sp
    fe76:	|  |   move.l d0,-(sp)
    fe78:	|  |   move.l d2,-(sp)
    fe7a:	|  |   jsr 186d4 <__divsf3>
    fe80:	|  |   addq.l #8,sp
    fe82:	|  |   move.l d0,1c142 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    fe88:	|  '-> move.l 1c776 <input+0xa>,d0
    fe8e:	|      move.l d0,-(sp)
    fe90:	|      jsr 1881e <__floatsisf>
    fe96:	|      addq.l #4,sp
    fe98:	|      move.l d0,d1
    fe9a:	|      move.l 1c142 <cameraZoom>,d0
    fea0:	|      move.l d0,-(sp)
    fea2:	|      move.l d1,-(sp)
    fea4:	|      jsr 186d4 <__divsf3>
    feaa:	|      addq.l #8,sp
    feac:	|      move.l d0,-(sp)
    feae:	|      jsr 187b6 <__fixsfsi>
    feb4:	|      addq.l #4,sp
    feb6:	|      move.l d0,1c776 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    febc:	|      move.l 1c77a <input+0xe>,d0
    fec2:	|      move.l d0,-(sp)
    fec4:	|      jsr 1881e <__floatsisf>
    feca:	|      addq.l #4,sp
    fecc:	|      move.l d0,d1
    fece:	|      move.l 1c142 <cameraZoom>,d0
    fed4:	|      move.l d0,-(sp)
    fed6:	|      move.l d1,-(sp)
    fed8:	|      jsr 186d4 <__divsf3>
    fede:	|      addq.l #8,sp
    fee0:	|      move.l d0,-(sp)
    fee2:	|      jsr 187b6 <__fixsfsi>
    fee8:	|      addq.l #4,sp
    feea:	|      move.l d0,1c77a <input+0xe>

	return BR_CONTINUE;
    fef0:	|      moveq #2,d0
}
    fef2:	'----> move.l (sp)+,d2
    fef4:	       addq.l #4,sp
    fef6:	       rts

0000fef8 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    fef8:	             subq.l #4,sp
	KPrintF("running pickOne\n");
    fefa:	             pea 1adea <talk.c.490538ff+0x298>
    ff00:	             jsr 183ec <KPrintF>
    ff06:	             addq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    ff08:	             tst.l 8(sp)
    ff0c:	         ,-- bne.s ff20 <builtIn_pickOne+0x28>
		KPrintF ("Built-in function should have at least 1 parameter");
    ff0e:	         |   pea 1adfb <talk.c.490538ff+0x2a9>
    ff14:	         |   jsr 183ec <KPrintF>
    ff1a:	         |   addq.l #4,sp
		return BR_ERROR;
    ff1c:	         |   moveq #1,d0
    ff1e:	,--------|-- bra.s ff80 <builtIn_pickOne+0x88>
	}
	int i = rand() % numParams;
    ff20:	|        '-> jsr 16fac <rand>
    ff26:	|            move.l d0,d1
    ff28:	|            move.l 8(sp),d0
    ff2c:	|            move.l d0,-(sp)
    ff2e:	|            move.l d1,-(sp)
    ff30:	|            jsr 18e52 <__umodsi3>
    ff36:	|            addq.l #8,sp
    ff38:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    ff3a:	|     ,----- bra.s ff6e <builtIn_pickOne+0x76>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    ff3c:	|  ,--|----> move.l (sp),d0
    ff3e:	|  |  |      cmp.l 8(sp),d0
    ff42:	|  |  |  ,-- bne.s ff5e <builtIn_pickOne+0x66>
    ff44:	|  |  |  |   moveq #28,d0
    ff46:	|  |  |  |   add.l 12(sp),d0
    ff4a:	|  |  |  |   movea.l 12(sp),a0
    ff4e:	|  |  |  |   move.l 24(a0),d1
    ff52:	|  |  |  |   move.l d0,-(sp)
    ff54:	|  |  |  |   move.l d1,-(sp)
    ff56:	|  |  |  |   jsr 15dc6 <copyVariable>
    ff5c:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    ff5e:	|  |  |  '-> moveq #24,d0
    ff60:	|  |  |      add.l 12(sp),d0
    ff64:	|  |  |      move.l d0,-(sp)
    ff66:	|  |  |      jsr 16290 <trimStack>
    ff6c:	|  |  |      addq.l #4,sp
	while (numParams --) {
    ff6e:	|  |  '----> move.l 8(sp),d0
    ff72:	|  |         move.l d0,d1
    ff74:	|  |         subq.l #1,d1
    ff76:	|  |         move.l d1,8(sp)
    ff7a:	|  |         tst.l d0
    ff7c:	|  '-------- bne.s ff3c <builtIn_pickOne+0x44>
	}
	return BR_CONTINUE;
    ff7e:	|            moveq #2,d0
}
    ff80:	'----------> addq.l #4,sp
    ff82:	             rts

0000ff84 <builtIn_substring>:

builtIn(substring)
{
    ff84:	       lea -40(sp),sp
    ff88:	       move.l a6,-(sp)
    ff8a:	       move.l d2,-(sp)
	KPrintF("running substring\n");
    ff8c:	       pea 1ae2e <talk.c.490538ff+0x2dc>
    ff92:	       jsr 183ec <KPrintF>
    ff98:	       addq.l #4,sp
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ff9a:	       movea.l 56(sp),a0
    ff9e:	       move.l 24(a0),d0
    ffa2:	       move.l d0,-(sp)
    ffa4:	       pea 1 <_start+0x1>
    ffa8:	       lea 16(sp),a0
    ffac:	       move.l a0,-(sp)
    ffae:	       jsr 1590c <getValueType>
    ffb4:	       lea 12(sp),sp
    ffb8:	       tst.w d0
    ffba:	   ,-- bne.s ffc2 <builtIn_substring+0x3e>
    ffbc:	   |   moveq #1,d0
    ffbe:	,--|-- bra.w 1013a <builtIn_substring+0x1b6>
    trimStack(&fun->stack);
    ffc2:	|  '-> moveq #24,d0
    ffc4:	|      add.l 56(sp),d0
    ffc8:	|      move.l d0,-(sp)
    ffca:	|      jsr 16290 <trimStack>
    ffd0:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ffd2:	|      movea.l 56(sp),a0
    ffd6:	|      move.l 24(a0),d0
    ffda:	|      move.l d0,-(sp)
    ffdc:	|      pea 1 <_start+0x1>
    ffe0:	|      lea 20(sp),a0
    ffe4:	|      move.l a0,-(sp)
    ffe6:	|      jsr 1590c <getValueType>
    ffec:	|      lea 12(sp),sp
    fff0:	|      tst.w d0
    fff2:	|  ,-- bne.s fffa <builtIn_substring+0x76>
    fff4:	|  |   moveq #1,d0
    fff6:	+--|-- bra.w 1013a <builtIn_substring+0x1b6>
    trimStack(&fun->stack);
    fffa:	|  '-> moveq #24,d0
    fffc:	|      add.l 56(sp),d0
   10000:	|      move.l d0,-(sp)
   10002:	|      jsr 16290 <trimStack>
   10008:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
   1000a:	|      movea.l 56(sp),a0
   1000e:	|      move.l 24(a0),d0
   10012:	|      move.l d0,-(sp)
   10014:	|      jsr 15ee2 <getTextFromAnyVar>
   1001a:	|      addq.l #4,sp
   1001c:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
   10020:	|      moveq #24,d0
   10022:	|      add.l 56(sp),d0
   10026:	|      move.l d0,-(sp)
   10028:	|      jsr 16290 <trimStack>
   1002e:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
   10030:	|      move.l 44(sp),-(sp)
   10034:	|      jsr 14df8 <strlen>
   1003a:	|      addq.l #4,sp
   1003c:	|      move.l d0,d1
   1003e:	|      move.l 12(sp),d0
   10042:	|      movea.l d0,a0
   10044:	|      move.l 8(sp),d0
   10048:	|      add.l a0,d0
   1004a:	|      cmp.l d1,d0
   1004c:	|  ,-- bls.s 10082 <builtIn_substring+0xfe>
        length = strlen(wholeString) - start;
   1004e:	|  |   move.l 44(sp),-(sp)
   10052:	|  |   jsr 14df8 <strlen>
   10058:	|  |   addq.l #4,sp
   1005a:	|  |   move.l d0,d1
   1005c:	|  |   move.l 12(sp),d0
   10060:	|  |   sub.l d0,d1
   10062:	|  |   move.l d1,d0
   10064:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
   10068:	|  |   move.l 44(sp),-(sp)
   1006c:	|  |   jsr 14df8 <strlen>
   10072:	|  |   addq.l #4,sp
   10074:	|  |   move.l d0,d1
   10076:	|  |   move.l 12(sp),d0
   1007a:	|  |   cmp.l d1,d0
   1007c:	|  +-- bls.s 10082 <builtIn_substring+0xfe>
            start = 0;
   1007e:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
   10082:	|  '-> move.l 8(sp),d0
   10086:	|  ,-- bpl.s 1008c <builtIn_substring+0x108>
        length = 0;
   10088:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
   1008c:	|  '-> move.l 12(sp),40(sp)
    int endoffset = start + length;
   10092:	|      move.l 12(sp),d1
   10096:	|      move.l 8(sp),d0
   1009a:	|      move.l d1,d2
   1009c:	|      add.l d0,d2
   1009e:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
   100a2:	|      move.l 36(sp),d0
   100a6:	|      sub.l 40(sp),d0
   100aa:	|      addq.l #1,d0
   100ac:	|      move.l d0,32(sp)
   100b0:	|      clr.l 28(sp)
   100b4:	|      move.l 1c7ba <SysBase>,d0
   100ba:	|      movea.l d0,a6
   100bc:	|      move.l 32(sp),d0
   100c0:	|      move.l 28(sp),d1
   100c4:	|      jsr -684(a6)
   100c8:	|      move.l d0,24(sp)
   100cc:	|      move.l 24(sp),d0
   100d0:	|      move.l d0,20(sp)
    if (!newString) {
   100d4:	|  ,-- bne.s 100da <builtIn_substring+0x156>
        return BR_ERROR;
   100d6:	|  |   moveq #1,d0
   100d8:	+--|-- bra.s 1013a <builtIn_substring+0x1b6>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
   100da:	|  '-> move.l 36(sp),d0
   100de:	|      sub.l 40(sp),d0
   100e2:	|      move.l d0,d1
   100e4:	|      move.l 40(sp),d0
   100e8:	|      add.l 44(sp),d0
   100ec:	|      move.l d1,-(sp)
   100ee:	|      move.l d0,-(sp)
   100f0:	|      move.l 28(sp),-(sp)
   100f4:	|      jsr 183a0 <memcpy>
   100fa:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
   100fe:	|      move.l 36(sp),d0
   10102:	|      sub.l 40(sp),d0
   10106:	|      movea.l 20(sp),a0
   1010a:	|      adda.l d0,a0
   1010c:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
   1010e:	|      moveq #28,d0
   10110:	|      add.l 56(sp),d0
   10114:	|      move.l 20(sp),-(sp)
   10118:	|      move.l d0,-(sp)
   1011a:	|      jsr 15b2e <makeTextVar>
   10120:	|      addq.l #8,sp
    FreeVec(newString);
   10122:	|      move.l 20(sp),16(sp)
   10128:	|      move.l 1c7ba <SysBase>,d0
   1012e:	|      movea.l d0,a6
   10130:	|      movea.l 16(sp),a1
   10134:	|      jsr -690(a6)
    return BR_CONTINUE;
   10138:	|      moveq #2,d0
}
   1013a:	'----> move.l (sp)+,d2
   1013c:	       movea.l (sp)+,a6
   1013e:	       lea 40(sp),sp
   10142:	       rts

00010144 <builtIn_stringLength>:

builtIn(stringLength)
{
   10144:	subq.l #8,sp
   10146:	move.l a6,-(sp)
	KPrintF("running stringLength\n");
   10148:	pea 1ae41 <talk.c.490538ff+0x2ef>
   1014e:	jsr 183ec <KPrintF>
   10154:	addq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
   10156:	movea.l 20(sp),a0
   1015a:	move.l 24(a0),d0
   1015e:	move.l d0,-(sp)
   10160:	jsr 15ee2 <getTextFromAnyVar>
   10166:	addq.l #4,sp
   10168:	move.l d0,8(sp)
	trimStack (&fun -> stack);
   1016c:	moveq #24,d0
   1016e:	add.l 20(sp),d0
   10172:	move.l d0,-(sp)
   10174:	jsr 16290 <trimStack>
   1017a:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
   1017c:	move.l 8(sp),-(sp)
   10180:	jsr 14df8 <strlen>
   10186:	addq.l #4,sp
   10188:	move.l d0,d1
   1018a:	moveq #28,d0
   1018c:	add.l 20(sp),d0
   10190:	move.l d1,-(sp)
   10192:	pea 1 <_start+0x1>
   10196:	move.l d0,-(sp)
   10198:	jsr 161fe <setVariable>
   1019e:	lea 12(sp),sp
	FreeVec(newText);
   101a2:	move.l 8(sp),4(sp)
   101a8:	move.l 1c7ba <SysBase>,d0
   101ae:	movea.l d0,a6
   101b0:	movea.l 4(sp),a1
   101b4:	jsr -690(a6)
	return BR_CONTINUE;
   101b8:	moveq #2,d0
}
   101ba:	movea.l (sp)+,a6
   101bc:	addq.l #8,sp
   101be:	rts

000101c0 <builtIn_newStack>:

builtIn(newStack)
{
   101c0:	             lea -12(sp),sp
   101c4:	             move.l a6,-(sp)
	KPrintF("running newStack\n");
   101c6:	             pea 1ae57 <talk.c.490538ff+0x305>
   101cc:	             jsr 183ec <KPrintF>
   101d2:	             addq.l #4,sp
    UNUSEDALL
    unlinkVar(&fun->reg);
   101d4:	             moveq #28,d0
   101d6:	             add.l 24(sp),d0
   101da:	             move.l d0,-(sp)
   101dc:	             jsr 15b5a <unlinkVar>
   101e2:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
   101e4:	             movea.l 24(sp),a0
   101e8:	             moveq #6,d0
   101ea:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   101ee:	             moveq #12,d1
   101f0:	             move.l d1,12(sp)
   101f4:	             clr.l 8(sp)
   101f8:	             move.l 1c7ba <SysBase>,d0
   101fe:	             movea.l d0,a6
   10200:	             move.l 12(sp),d0
   10204:	             move.l 8(sp),d1
   10208:	             jsr -684(a6)
   1020c:	             move.l d0,4(sp)
   10210:	             move.l 4(sp),d0
   10214:	             movea.l 24(sp),a0
   10218:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
   1021c:	             movea.l 24(sp),a0
   10220:	             move.l 32(a0),d0
   10224:	         ,-- bne.s 1022c <builtIn_newStack+0x6c>
   10226:	         |   moveq #1,d0
   10228:	,--------|-- bra.w 102be <builtIn_newStack+0xfe>
    fun->reg.varData.theStack->first = NULL;
   1022c:	|        '-> movea.l 24(sp),a0
   10230:	|            movea.l 32(a0),a0
   10234:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
   10236:	|            movea.l 24(sp),a0
   1023a:	|            movea.l 32(a0),a0
   1023e:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
   10242:	|            movea.l 24(sp),a0
   10246:	|            movea.l 32(a0),a0
   1024a:	|            moveq #1,d0
   1024c:	|            move.l d0,8(a0)
    
    while (numParams--) {
   10250:	|     ,----- bra.s 102ac <builtIn_newStack+0xec>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
   10252:	|  ,--|----> movea.l 24(sp),a0
   10256:	|  |  |      move.l 32(a0),d0
   1025a:	|  |  |      move.l d0,d1
   1025c:	|  |  |      movea.l 24(sp),a0
   10260:	|  |  |      move.l 24(a0),d0
   10264:	|  |  |      move.l d1,-(sp)
   10266:	|  |  |      move.l d0,-(sp)
   10268:	|  |  |      jsr 15148 <addVarToStack>
   1026e:	|  |  |      addq.l #8,sp
   10270:	|  |  |      tst.w d0
   10272:	|  |  |  ,-- bne.s 10278 <builtIn_newStack+0xb8>
   10274:	|  |  |  |   moveq #1,d0
   10276:	+--|--|--|-- bra.s 102be <builtIn_newStack+0xfe>
        if (fun->reg.varData.theStack->last == NULL) {
   10278:	|  |  |  '-> movea.l 24(sp),a0
   1027c:	|  |  |      movea.l 32(a0),a0
   10280:	|  |  |      move.l 4(a0),d0
   10284:	|  |  |  ,-- bne.s 1029c <builtIn_newStack+0xdc>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
   10286:	|  |  |  |   movea.l 24(sp),a0
   1028a:	|  |  |  |   movea.l 32(a0),a1
   1028e:	|  |  |  |   movea.l 24(sp),a0
   10292:	|  |  |  |   movea.l 32(a0),a0
   10296:	|  |  |  |   move.l (a1),d0
   10298:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
   1029c:	|  |  |  '-> moveq #24,d0
   1029e:	|  |  |      add.l 24(sp),d0
   102a2:	|  |  |      move.l d0,-(sp)
   102a4:	|  |  |      jsr 16290 <trimStack>
   102aa:	|  |  |      addq.l #4,sp
    while (numParams--) {
   102ac:	|  |  '----> move.l 20(sp),d0
   102b0:	|  |         move.l d0,d1
   102b2:	|  |         subq.l #1,d1
   102b4:	|  |         move.l d1,20(sp)
   102b8:	|  |         tst.l d0
   102ba:	|  '-------- bne.s 10252 <builtIn_newStack+0x92>
    }
    return BR_CONTINUE;
   102bc:	|            moveq #2,d0
}
   102be:	'----------> movea.l (sp)+,a6
   102c0:	             lea 12(sp),sp
   102c4:	             rts

000102c6 <builtIn_stackSize>:
// wait is exactly the same function, but limited to 2 parameters
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	KPrintF("running stackSize\n");
   102c6:	          pea 1ae69 <talk.c.490538ff+0x317>
   102cc:	          jsr 183ec <KPrintF>
   102d2:	          addq.l #4,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   102d4:	          movea.l 8(sp),a0
   102d8:	          movea.l 24(a0),a0
   102dc:	          move.l (a0),d0
   102de:	          moveq #6,d1
   102e0:	          cmp.l d0,d1
   102e2:	      ,-- beq.s 102fe <builtIn_stackSize+0x38>
   102e4:	      |   moveq #10,d1
   102e6:	      |   cmp.l d0,d1
   102e8:	   ,--|-- beq.s 10342 <builtIn_stackSize+0x7c>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
   102ea:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
   102ec:	   |  |   pea 1ae7c <talk.c.490538ff+0x32a>
   102f2:	   |  |   jsr 183ec <KPrintF>
   102f8:	   |  |   addq.l #4,sp
	return BR_ERROR;
   102fa:	   |  |   moveq #1,d0
   102fc:	,--|--|-- bra.s 1037c <builtIn_stackSize+0xb6>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
   102fe:	|  |  '-> movea.l 8(sp),a0
   10302:	|  |      movea.l 24(a0),a0
   10306:	|  |      move.l 4(a0),d0
   1030a:	|  |      move.l d0,-(sp)
   1030c:	|  |      jsr 1626c <stackSize>
   10312:	|  |      addq.l #4,sp
   10314:	|  |      move.l d0,d1
   10316:	|  |      moveq #28,d0
   10318:	|  |      add.l 8(sp),d0
   1031c:	|  |      move.l d1,-(sp)
   1031e:	|  |      pea 1 <_start+0x1>
   10322:	|  |      move.l d0,-(sp)
   10324:	|  |      jsr 161fe <setVariable>
   1032a:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
   1032e:	|  |      moveq #24,d0
   10330:	|  |      add.l 8(sp),d0
   10334:	|  |      move.l d0,-(sp)
   10336:	|  |      jsr 16290 <trimStack>
   1033c:	|  |      addq.l #4,sp
			return BR_CONTINUE;
   1033e:	|  |      moveq #2,d0
   10340:	+--|----- bra.s 1037c <builtIn_stackSize+0xb6>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
   10342:	|  '----> movea.l 8(sp),a0
   10346:	|         movea.l 24(a0),a0
   1034a:	|         movea.l 4(a0),a0
   1034e:	|         move.l 4(a0),d1
   10352:	|         moveq #28,d0
   10354:	|         add.l 8(sp),d0
   10358:	|         move.l d1,-(sp)
   1035a:	|         pea 1 <_start+0x1>
   1035e:	|         move.l d0,-(sp)
   10360:	|         jsr 161fe <setVariable>
   10366:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
   1036a:	|         moveq #24,d0
   1036c:	|         add.l 8(sp),d0
   10370:	|         move.l d0,-(sp)
   10372:	|         jsr 16290 <trimStack>
   10378:	|         addq.l #4,sp
			return BR_CONTINUE;
   1037a:	|         moveq #2,d0
}
   1037c:	'-------> rts

0001037e <builtIn_copyStack>:

builtIn(copyStack)
{
	KPrintF("running copyStack\n");
   1037e:	       pea 1aea5 <talk.c.490538ff+0x353>
   10384:	       jsr 183ec <KPrintF>
   1038a:	       addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
   1038c:	       movea.l 8(sp),a0
   10390:	       movea.l 24(a0),a0
   10394:	       move.l (a0),d0
   10396:	       moveq #6,d1
   10398:	       cmp.l d0,d1
   1039a:	   ,-- beq.s 103ae <builtIn_copyStack+0x30>
		KPrintF ("Parameter isn't a stack.");
   1039c:	   |   pea 1aeb8 <talk.c.490538ff+0x366>
   103a2:	   |   jsr 183ec <KPrintF>
   103a8:	   |   addq.l #4,sp
		return BR_ERROR;
   103aa:	   |   moveq #1,d0
   103ac:	,--|-- bra.s 103e2 <builtIn_copyStack+0x64>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
   103ae:	|  '-> moveq #28,d0
   103b0:	|      add.l 8(sp),d0
   103b4:	|      movea.l 8(sp),a0
   103b8:	|      move.l 24(a0),d1
   103bc:	|      move.l d0,-(sp)
   103be:	|      move.l d1,-(sp)
   103c0:	|      jsr 15412 <copyStack>
   103c6:	|      addq.l #8,sp
   103c8:	|      tst.w d0
   103ca:	|  ,-- bne.s 103d0 <builtIn_copyStack+0x52>
   103cc:	|  |   moveq #1,d0
   103ce:	+--|-- bra.s 103e2 <builtIn_copyStack+0x64>
	trimStack (&fun -> stack);
   103d0:	|  '-> moveq #24,d0
   103d2:	|      add.l 8(sp),d0
   103d6:	|      move.l d0,-(sp)
   103d8:	|      jsr 16290 <trimStack>
   103de:	|      addq.l #4,sp
	return BR_CONTINUE;
   103e0:	|      moveq #2,d0
}
   103e2:	'----> rts

000103e4 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	KPrintF("running pushToStack\n");
   103e4:	       pea 1aed1 <talk.c.490538ff+0x37f>
   103ea:	       jsr 183ec <KPrintF>
   103f0:	       addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
   103f2:	       movea.l 8(sp),a0
   103f6:	       movea.l 24(a0),a0
   103fa:	       movea.l 8(a0),a0
   103fe:	       move.l (a0),d0
   10400:	       moveq #6,d1
   10402:	       cmp.l d0,d1
   10404:	   ,-- beq.s 1041a <builtIn_pushToStack+0x36>
		KPrintF("Parameter isn't a stack");
   10406:	   |   pea 1aee6 <talk.c.490538ff+0x394>
   1040c:	   |   jsr 183ec <KPrintF>
   10412:	   |   addq.l #4,sp
		return BR_ERROR;
   10414:	   |   moveq #1,d0
   10416:	,--|-- bra.w 104a8 <builtIn_pushToStack+0xc4>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
   1041a:	|  '-> movea.l 8(sp),a0
   1041e:	|      movea.l 24(a0),a0
   10422:	|      movea.l 8(a0),a0
   10426:	|      move.l 4(a0),d0
   1042a:	|      move.l d0,d1
   1042c:	|      movea.l 8(sp),a0
   10430:	|      move.l 24(a0),d0
   10434:	|      move.l d1,-(sp)
   10436:	|      move.l d0,-(sp)
   10438:	|      jsr 15148 <addVarToStack>
   1043e:	|      addq.l #8,sp
   10440:	|      tst.w d0
   10442:	|  ,-- bne.s 10448 <builtIn_pushToStack+0x64>
		return BR_ERROR;
   10444:	|  |   moveq #1,d0
   10446:	+--|-- bra.s 104a8 <builtIn_pushToStack+0xc4>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
   10448:	|  '-> movea.l 8(sp),a0
   1044c:	|      movea.l 24(a0),a0
   10450:	|      movea.l 8(a0),a0
   10454:	|      movea.l 4(a0),a0
   10458:	|      movea.l (a0),a0
   1045a:	|      move.l 8(a0),d0
   1045e:	|  ,-- bne.s 10486 <builtIn_pushToStack+0xa2>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
   10460:	|  |   movea.l 8(sp),a0
   10464:	|  |   movea.l 24(a0),a0
   10468:	|  |   movea.l 8(a0),a0
   1046c:	|  |   movea.l 4(a0),a1
   10470:	|  |   movea.l 8(sp),a0
   10474:	|  |   movea.l 24(a0),a0
   10478:	|  |   movea.l 8(a0),a0
   1047c:	|  |   movea.l 4(a0),a0
   10480:	|  |   move.l (a1),d0
   10482:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
   10486:	|  '-> moveq #24,d0
   10488:	|      add.l 8(sp),d0
   1048c:	|      move.l d0,-(sp)
   1048e:	|      jsr 16290 <trimStack>
   10494:	|      addq.l #4,sp
	trimStack (&fun -> stack);
   10496:	|      moveq #24,d0
   10498:	|      add.l 8(sp),d0
   1049c:	|      move.l d0,-(sp)
   1049e:	|      jsr 16290 <trimStack>
   104a4:	|      addq.l #4,sp
	return BR_CONTINUE;
   104a6:	|      moveq #2,d0
}
   104a8:	'----> rts

000104aa <builtIn_enqueue>:

builtIn(enqueue)
{
	KPrintF("running enqueue\n");
   104aa:	             pea 1aefe <talk.c.490538ff+0x3ac>
   104b0:	             jsr 183ec <KPrintF>
   104b6:	             addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
   104b8:	             movea.l 8(sp),a0
   104bc:	             movea.l 24(a0),a0
   104c0:	             movea.l 8(a0),a0
   104c4:	             move.l (a0),d0
   104c6:	             moveq #6,d1
   104c8:	             cmp.l d0,d1
   104ca:	         ,-- beq.s 104e0 <builtIn_enqueue+0x36>
		KPrintF ("Parameter isn't a stack");
   104cc:	         |   pea 1aee6 <talk.c.490538ff+0x394>
   104d2:	         |   jsr 183ec <KPrintF>
   104d8:	         |   addq.l #4,sp
		return BR_ERROR;
   104da:	         |   moveq #1,d0
   104dc:	,--------|-- bra.w 105ce <builtIn_enqueue+0x124>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
   104e0:	|        '-> movea.l 8(sp),a0
   104e4:	|            movea.l 24(a0),a0
   104e8:	|            movea.l 8(a0),a0
   104ec:	|            movea.l 4(a0),a0
   104f0:	|            move.l (a0),d0
   104f2:	|     ,----- bne.s 1054c <builtIn_enqueue+0xa2>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
   104f4:	|     |      movea.l 8(sp),a0
   104f8:	|     |      movea.l 24(a0),a0
   104fc:	|     |      movea.l 8(a0),a0
   10500:	|     |      move.l 4(a0),d0
   10504:	|     |      move.l d0,d1
   10506:	|     |      movea.l 8(sp),a0
   1050a:	|     |      move.l 24(a0),d0
   1050e:	|     |      move.l d1,-(sp)
   10510:	|     |      move.l d0,-(sp)
   10512:	|     |      jsr 15148 <addVarToStack>
   10518:	|     |      addq.l #8,sp
   1051a:	|     |      tst.w d0
   1051c:	|     |  ,-- bne.s 10524 <builtIn_enqueue+0x7a>
			return BR_ERROR;
   1051e:	|     |  |   moveq #1,d0
   10520:	+-----|--|-- bra.w 105ce <builtIn_enqueue+0x124>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
   10524:	|     |  '-> movea.l 8(sp),a0
   10528:	|     |      movea.l 24(a0),a0
   1052c:	|     |      movea.l 8(a0),a0
   10530:	|     |      movea.l 4(a0),a1
   10534:	|     |      movea.l 8(sp),a0
   10538:	|     |      movea.l 24(a0),a0
   1053c:	|     |      movea.l 8(a0),a0
   10540:	|     |      movea.l 4(a0),a0
   10544:	|     |      move.l (a1),d0
   10546:	|     |      move.l d0,4(a0)
   1054a:	|  ,--|----- bra.s 105ac <builtIn_enqueue+0x102>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
   1054c:	|  |  '----> movea.l 8(sp),a0
   10550:	|  |         movea.l 24(a0),a0
   10554:	|  |         movea.l 8(a0),a0
   10558:	|  |         movea.l 4(a0),a0
   1055c:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
   10560:	|  |         move.l d0,d1
   10562:	|  |         addq.l #8,d1
   10564:	|  |         movea.l 8(sp),a0
   10568:	|  |         move.l 24(a0),d0
   1056c:	|  |         move.l d1,-(sp)
   1056e:	|  |         move.l d0,-(sp)
   10570:	|  |         jsr 15148 <addVarToStack>
   10576:	|  |         addq.l #8,sp
   10578:	|  |         tst.w d0
   1057a:	|  |     ,-- bne.s 10580 <builtIn_enqueue+0xd6>
			return BR_ERROR;
   1057c:	|  |     |   moveq #1,d0
   1057e:	+--|-----|-- bra.s 105ce <builtIn_enqueue+0x124>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
   10580:	|  |     '-> movea.l 8(sp),a0
   10584:	|  |         movea.l 24(a0),a0
   10588:	|  |         movea.l 8(a0),a0
   1058c:	|  |         movea.l 4(a0),a0
   10590:	|  |         movea.l 4(a0),a1
   10594:	|  |         movea.l 8(sp),a0
   10598:	|  |         movea.l 24(a0),a0
   1059c:	|  |         movea.l 8(a0),a0
   105a0:	|  |         movea.l 4(a0),a0
   105a4:	|  |         move.l 8(a1),d0
   105a8:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
   105ac:	|  '-------> moveq #24,d0
   105ae:	|            add.l 8(sp),d0
   105b2:	|            move.l d0,-(sp)
   105b4:	|            jsr 16290 <trimStack>
   105ba:	|            addq.l #4,sp
	trimStack (&fun -> stack);
   105bc:	|            moveq #24,d0
   105be:	|            add.l 8(sp),d0
   105c2:	|            move.l d0,-(sp)
   105c4:	|            jsr 16290 <trimStack>
   105ca:	|            addq.l #4,sp
	return BR_CONTINUE;
   105cc:	|            moveq #2,d0
}
   105ce:	'----------> rts

000105d0 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
   105d0:	       move.l a2,-(sp)
	KPrintF("running deleteFromStack\n");
   105d2:	       pea 1af0f <talk.c.490538ff+0x3bd>
   105d8:	       jsr 183ec <KPrintF>
   105de:	       addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
   105e0:	       movea.l 12(sp),a0
   105e4:	       movea.l 24(a0),a0
   105e8:	       movea.l 8(a0),a0
   105ec:	       move.l (a0),d0
   105ee:	       moveq #6,d1
   105f0:	       cmp.l d0,d1
   105f2:	   ,-- beq.s 10608 <builtIn_deleteFromStack+0x38>
		KPrintF ("Parameter isn't a stack.");
   105f4:	   |   pea 1aeb8 <talk.c.490538ff+0x366>
   105fa:	   |   jsr 183ec <KPrintF>
   10600:	   |   addq.l #4,sp
		return BR_ERROR;
   10602:	   |   moveq #1,d0
   10604:	,--|-- bra.w 1069e <builtIn_deleteFromStack+0xce>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
   10608:	|  '-> movea.l 12(sp),a0
   1060c:	|      movea.l 24(a0),a0
   10610:	|      movea.l 8(a0),a0
   10614:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
   10618:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
   1061a:	|      movea.l 12(sp),a0
   1061e:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
   10622:	|      clr.l -(sp)
   10624:	|      move.l d1,-(sp)
   10626:	|      move.l d0,-(sp)
   10628:	|      jsr 154e8 <deleteVarFromStack>
   1062e:	|      lea 12(sp),sp
   10632:	|      move.l d0,d1
   10634:	|      moveq #28,d0
   10636:	|      add.l 12(sp),d0
   1063a:	|      move.l d1,-(sp)
   1063c:	|      pea 1 <_start+0x1>
   10640:	|      move.l d0,-(sp)
   10642:	|      jsr 161fe <setVariable>
   10648:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
   1064c:	|      movea.l 12(sp),a0
   10650:	|      movea.l 24(a0),a0
   10654:	|      movea.l 8(a0),a0
   10658:	|      movea.l 4(a0),a0
   1065c:	|      move.l (a0),d0
   1065e:	|      movea.l 12(sp),a0
   10662:	|      movea.l 24(a0),a0
   10666:	|      movea.l 8(a0),a0
   1066a:	|      movea.l 4(a0),a2
   1066e:	|      move.l d0,-(sp)
   10670:	|      jsr 16248 <stackFindLast>
   10676:	|      addq.l #4,sp
   10678:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
   1067c:	|      moveq #24,d0
   1067e:	|      add.l 12(sp),d0
   10682:	|      move.l d0,-(sp)
   10684:	|      jsr 16290 <trimStack>
   1068a:	|      addq.l #4,sp
	trimStack (&fun -> stack);
   1068c:	|      moveq #24,d0
   1068e:	|      add.l 12(sp),d0
   10692:	|      move.l d0,-(sp)
   10694:	|      jsr 16290 <trimStack>
   1069a:	|      addq.l #4,sp
	return BR_CONTINUE;
   1069c:	|      moveq #2,d0
}
   1069e:	'----> movea.l (sp)+,a2
   106a0:	       rts

000106a2 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
   106a2:	       move.l a2,-(sp)
	KPrintF("running deleteAllFromStack\n");
   106a4:	       pea 1af28 <talk.c.490538ff+0x3d6>
   106aa:	       jsr 183ec <KPrintF>
   106b0:	       addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
   106b2:	       movea.l 12(sp),a0
   106b6:	       movea.l 24(a0),a0
   106ba:	       movea.l 8(a0),a0
   106be:	       move.l (a0),d0
   106c0:	       moveq #6,d1
   106c2:	       cmp.l d0,d1
   106c4:	   ,-- beq.s 106da <builtIn_deleteAllFromStack+0x38>
		KPrintF ("Parameter isn't a stack.");
   106c6:	   |   pea 1aeb8 <talk.c.490538ff+0x366>
   106cc:	   |   jsr 183ec <KPrintF>
   106d2:	   |   addq.l #4,sp
		return BR_ERROR;
   106d4:	   |   moveq #1,d0
   106d6:	,--|-- bra.w 10772 <builtIn_deleteAllFromStack+0xd0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
   106da:	|  '-> movea.l 12(sp),a0
   106de:	|      movea.l 24(a0),a0
   106e2:	|      movea.l 8(a0),a0
   106e6:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
   106ea:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
   106ec:	|      movea.l 12(sp),a0
   106f0:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
   106f4:	|      pea 1 <_start+0x1>
   106f8:	|      move.l d1,-(sp)
   106fa:	|      move.l d0,-(sp)
   106fc:	|      jsr 154e8 <deleteVarFromStack>
   10702:	|      lea 12(sp),sp
   10706:	|      move.l d0,d1
   10708:	|      moveq #28,d0
   1070a:	|      add.l 12(sp),d0
   1070e:	|      move.l d1,-(sp)
   10710:	|      pea 1 <_start+0x1>
   10714:	|      move.l d0,-(sp)
   10716:	|      jsr 161fe <setVariable>
   1071c:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
   10720:	|      movea.l 12(sp),a0
   10724:	|      movea.l 24(a0),a0
   10728:	|      movea.l 8(a0),a0
   1072c:	|      movea.l 4(a0),a0
   10730:	|      move.l (a0),d0
   10732:	|      movea.l 12(sp),a0
   10736:	|      movea.l 24(a0),a0
   1073a:	|      movea.l 8(a0),a0
   1073e:	|      movea.l 4(a0),a2
   10742:	|      move.l d0,-(sp)
   10744:	|      jsr 16248 <stackFindLast>
   1074a:	|      addq.l #4,sp
   1074c:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
   10750:	|      moveq #24,d0
   10752:	|      add.l 12(sp),d0
   10756:	|      move.l d0,-(sp)
   10758:	|      jsr 16290 <trimStack>
   1075e:	|      addq.l #4,sp
	trimStack (&fun -> stack);
   10760:	|      moveq #24,d0
   10762:	|      add.l 12(sp),d0
   10766:	|      move.l d0,-(sp)
   10768:	|      jsr 16290 <trimStack>
   1076e:	|      addq.l #4,sp
	return BR_CONTINUE;
   10770:	|      moveq #2,d0
} 
   10772:	'----> movea.l (sp)+,a2
   10774:	       rts

00010776 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	KPrintF("running popFromStack\n");
   10776:	       pea 1af44 <talk.c.490538ff+0x3f2>
   1077c:	       jsr 183ec <KPrintF>
   10782:	       addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
   10784:	       movea.l 8(sp),a0
   10788:	       movea.l 24(a0),a0
   1078c:	       move.l (a0),d0
   1078e:	       moveq #6,d1
   10790:	       cmp.l d0,d1
   10792:	   ,-- beq.s 107a6 <builtIn_popFromStack+0x30>
		KPrintF ("Parameter isn't a stack.");
   10794:	   |   pea 1aeb8 <talk.c.490538ff+0x366>
   1079a:	   |   jsr 183ec <KPrintF>
   107a0:	   |   addq.l #4,sp
		return BR_ERROR;
   107a2:	   |   moveq #1,d0
   107a4:	,--|-- bra.s 10810 <builtIn_popFromStack+0x9a>
	}	
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
   107a6:	|  '-> movea.l 8(sp),a0
   107aa:	|      movea.l 24(a0),a0
   107ae:	|      movea.l 4(a0),a0
   107b2:	|      move.l (a0),d0
   107b4:	|  ,-- bne.s 107c8 <builtIn_popFromStack+0x52>
		KPrintF ("The stack's empty.");
   107b6:	|  |   pea 1af5a <talk.c.490538ff+0x408>
   107bc:	|  |   jsr 183ec <KPrintF>
   107c2:	|  |   addq.l #4,sp
		return BR_ERROR;
   107c4:	|  |   moveq #1,d0
   107c6:	+--|-- bra.s 10810 <builtIn_popFromStack+0x9a>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
   107c8:	|  '-> moveq #28,d0
   107ca:	|      add.l 8(sp),d0
   107ce:	|      movea.l 8(sp),a0
   107d2:	|      movea.l 24(a0),a0
   107d6:	|      movea.l 4(a0),a0
   107da:	|      move.l (a0),d1
   107dc:	|      move.l d0,-(sp)
   107de:	|      move.l d1,-(sp)
   107e0:	|      jsr 15dc6 <copyVariable>
   107e6:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
   107e8:	|      movea.l 8(sp),a0
   107ec:	|      movea.l 24(a0),a0
   107f0:	|      move.l 4(a0),d0
   107f4:	|      move.l d0,-(sp)
   107f6:	|      jsr 16290 <trimStack>
   107fc:	|      addq.l #4,sp
	trimStack (&fun -> stack);
   107fe:	|      moveq #24,d0
   10800:	|      add.l 8(sp),d0
   10804:	|      move.l d0,-(sp)
   10806:	|      jsr 16290 <trimStack>
   1080c:	|      addq.l #4,sp
	return BR_CONTINUE;
   1080e:	|      moveq #2,d0
}
   10810:	'----> rts

00010812 <builtIn_peekStart>:

builtIn(peekStart)
{
	KPrintF("running peekStart\n");
   10812:	       pea 1af6d <talk.c.490538ff+0x41b>
   10818:	       jsr 183ec <KPrintF>
   1081e:	       addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
   10820:	       movea.l 8(sp),a0
   10824:	       movea.l 24(a0),a0
   10828:	       move.l (a0),d0
   1082a:	       moveq #6,d1
   1082c:	       cmp.l d0,d1
   1082e:	   ,-- beq.s 10842 <builtIn_peekStart+0x30>
		KPrintF ("Parameter isn't a stack.");
   10830:	   |   pea 1aeb8 <talk.c.490538ff+0x366>
   10836:	   |   jsr 183ec <KPrintF>
   1083c:	   |   addq.l #4,sp
		return BR_ERROR;
   1083e:	   |   moveq #1,d0
   10840:	,--|-- bra.s 10896 <builtIn_peekStart+0x84>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
   10842:	|  '-> movea.l 8(sp),a0
   10846:	|      movea.l 24(a0),a0
   1084a:	|      movea.l 4(a0),a0
   1084e:	|      move.l (a0),d0
   10850:	|  ,-- bne.s 10864 <builtIn_peekStart+0x52>
		KPrintF ("The stack's empty.");
   10852:	|  |   pea 1af5a <talk.c.490538ff+0x408>
   10858:	|  |   jsr 183ec <KPrintF>
   1085e:	|  |   addq.l #4,sp
		return BR_ERROR;
   10860:	|  |   moveq #1,d0
   10862:	+--|-- bra.s 10896 <builtIn_peekStart+0x84>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
   10864:	|  '-> moveq #28,d0
   10866:	|      add.l 8(sp),d0
   1086a:	|      movea.l 8(sp),a0
   1086e:	|      movea.l 24(a0),a0
   10872:	|      movea.l 4(a0),a0
   10876:	|      move.l (a0),d1
   10878:	|      move.l d0,-(sp)
   1087a:	|      move.l d1,-(sp)
   1087c:	|      jsr 15dc6 <copyVariable>
   10882:	|      addq.l #8,sp
	trimStack (&fun -> stack);
   10884:	|      moveq #24,d0
   10886:	|      add.l 8(sp),d0
   1088a:	|      move.l d0,-(sp)
   1088c:	|      jsr 16290 <trimStack>
   10892:	|      addq.l #4,sp
	return BR_CONTINUE;
   10894:	|      moveq #2,d0
}
   10896:	'----> rts

00010898 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	KPrintF("running peekEnd\n");
   10898:	       pea 1af80 <talk.c.490538ff+0x42e>
   1089e:	       jsr 183ec <KPrintF>
   108a4:	       addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
   108a6:	       movea.l 8(sp),a0
   108aa:	       movea.l 24(a0),a0
   108ae:	       move.l (a0),d0
   108b0:	       moveq #6,d1
   108b2:	       cmp.l d0,d1
   108b4:	   ,-- beq.s 108c8 <builtIn_peekEnd+0x30>
		KPrintF ("Parameter isn't a stack.");
   108b6:	   |   pea 1aeb8 <talk.c.490538ff+0x366>
   108bc:	   |   jsr 183ec <KPrintF>
   108c2:	   |   addq.l #4,sp
		return BR_ERROR;
   108c4:	   |   moveq #1,d0
   108c6:	,--|-- bra.s 1091e <builtIn_peekEnd+0x86>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
   108c8:	|  '-> movea.l 8(sp),a0
   108cc:	|      movea.l 24(a0),a0
   108d0:	|      movea.l 4(a0),a0
   108d4:	|      move.l (a0),d0
   108d6:	|  ,-- bne.s 108ea <builtIn_peekEnd+0x52>
		KPrintF ("The stack's empty.");
   108d8:	|  |   pea 1af5a <talk.c.490538ff+0x408>
   108de:	|  |   jsr 183ec <KPrintF>
   108e4:	|  |   addq.l #4,sp
		return BR_ERROR;
   108e6:	|  |   moveq #1,d0
   108e8:	+--|-- bra.s 1091e <builtIn_peekEnd+0x86>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
   108ea:	|  '-> moveq #28,d0
   108ec:	|      add.l 8(sp),d0
   108f0:	|      movea.l 8(sp),a0
   108f4:	|      movea.l 24(a0),a0
   108f8:	|      movea.l 4(a0),a0
   108fc:	|      move.l 4(a0),d1
   10900:	|      move.l d0,-(sp)
   10902:	|      move.l d1,-(sp)
   10904:	|      jsr 15dc6 <copyVariable>
   1090a:	|      addq.l #8,sp
	trimStack (&fun -> stack);
   1090c:	|      moveq #24,d0
   1090e:	|      add.l 8(sp),d0
   10912:	|      move.l d0,-(sp)
   10914:	|      jsr 16290 <trimStack>
   1091a:	|      addq.l #4,sp
	return BR_CONTINUE;
   1091c:	|      moveq #2,d0
}
   1091e:	'----> rts

00010920 <builtIn_random>:

builtIn(random)
{
   10920:	       subq.l #4,sp
	KPrintF("running random\n");
   10922:	       pea 1af91 <talk.c.490538ff+0x43f>
   10928:	       jsr 183ec <KPrintF>
   1092e:	       addq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
   10930:	       movea.l 12(sp),a0
   10934:	       move.l 24(a0),d0
   10938:	       move.l d0,-(sp)
   1093a:	       pea 1 <_start+0x1>
   1093e:	       move.l sp,d0
   10940:	       addq.l #8,d0
   10942:	       move.l d0,-(sp)
   10944:	       jsr 1590c <getValueType>
   1094a:	       lea 12(sp),sp
   1094e:	       tst.w d0
   10950:	   ,-- bne.s 10956 <builtIn_random+0x36>
		return BR_ERROR;
   10952:	   |   moveq #1,d0
   10954:	,--|-- bra.s 109a0 <builtIn_random+0x80>

	trimStack (&fun -> stack);
   10956:	|  '-> moveq #24,d0
   10958:	|      add.l 12(sp),d0
   1095c:	|      move.l d0,-(sp)
   1095e:	|      jsr 16290 <trimStack>
   10964:	|      addq.l #4,sp
	if (num <= 0) num = 1;
   10966:	|      move.l (sp),d0
   10968:	|  ,-- bgt.s 1096e <builtIn_random+0x4e>
   1096a:	|  |   moveq #1,d0
   1096c:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
   1096e:	|  '-> jsr 16fac <rand>
   10974:	|      move.l d0,d1
   10976:	|      move.l (sp),d0
   10978:	|      move.l d0,-(sp)
   1097a:	|      move.l d1,-(sp)
   1097c:	|      jsr 18e52 <__umodsi3>
   10982:	|      addq.l #8,sp
   10984:	|      move.l d0,d1
   10986:	|      moveq #28,d0
   10988:	|      add.l 12(sp),d0
   1098c:	|      move.l d1,-(sp)
   1098e:	|      pea 1 <_start+0x1>
   10992:	|      move.l d0,-(sp)
   10994:	|      jsr 161fe <setVariable>
   1099a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1099e:	|      moveq #2,d0
}
   109a0:	'----> addq.l #4,sp
   109a2:	       rts

000109a4 <builtIn_setStatusColour>:

builtIn (setStatusColour)
{
	KPrintF("running setStatusColour\n");
   109a4:	pea 1afa1 <talk.c.490538ff+0x44f>
   109aa:	jsr 183ec <KPrintF>
   109b0:	addq.l #4,sp
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
   109b2:	nop
   109b4:	rts

000109b6 <builtIn_setLitStatusColour>:

builtIn (setLitStatusColour)
{
	KPrintF("running setLitStatusColour\n");
   109b6:	pea 1afba <talk.c.490538ff+0x468>
   109bc:	jsr 183ec <KPrintF>
   109c2:	addq.l #4,sp

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
   109c4:	moveq #2,d0
}
   109c6:	rts

000109c8 <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
   109c8:	       subq.l #4,sp
	KPrintF("running setPasteColour\n");
   109ca:	       pea 1afd6 <talk.c.490538ff+0x484>
   109d0:	       jsr 183ec <KPrintF>
   109d6:	       addq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
   109d8:	       movea.l 12(sp),a0
   109dc:	       move.l 24(a0),d0
   109e0:	       move.l d0,-(sp)
   109e2:	       pea 1 <_start+0x1>
   109e6:	       move.l sp,d0
   109e8:	       addq.l #8,d0
   109ea:	       move.l d0,-(sp)
   109ec:	       jsr 1590c <getValueType>
   109f2:	       lea 12(sp),sp
   109f6:	       tst.w d0
   109f8:	   ,-- bne.s 10a0c <builtIn_setPasteColour+0x44>
		KPrintF ("setPasteColour: Parameter not a number");
   109fa:	   |   pea 1afee <talk.c.490538ff+0x49c>
   10a00:	   |   jsr 183ec <KPrintF>
   10a06:	   |   addq.l #4,sp
		return BR_ERROR;
   10a08:	   |   moveq #1,d0
   10a0a:	,--|-- bra.s 10a4c <builtIn_setPasteColour+0x84>
	}
	trimStack (&fun -> stack);
   10a0c:	|  '-> moveq #24,d0
   10a0e:	|      add.l 12(sp),d0
   10a12:	|      move.l d0,-(sp)
   10a14:	|      jsr 16290 <trimStack>
   10a1a:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
   10a1c:	|      move.l (sp),d0
   10a1e:	|      move.l d0,d0
   10a20:	|      move.w d0,1c6c6 <textPaletteIndex>

	if( textPaletteIndex > 31) {
   10a26:	|      move.w 1c6c6 <textPaletteIndex>,d0
   10a2c:	|      cmpi.w #31,d0
   10a30:	|  ,-- bls.s 10a4a <builtIn_setPasteColour+0x82>
		KPrintF ("setPasteColour: Paletteindex out of Range");
   10a32:	|  |   pea 1b015 <talk.c.490538ff+0x4c3>
   10a38:	|  |   jsr 183ec <KPrintF>
   10a3e:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
   10a40:	|  |   clr.w 1c6c6 <textPaletteIndex>
		return BR_ERROR;
   10a46:	|  |   moveq #1,d0
   10a48:	+--|-- bra.s 10a4c <builtIn_setPasteColour+0x84>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
   10a4a:	|  '-> moveq #2,d0
}
   10a4c:	'----> addq.l #4,sp
   10a4e:	       rts

00010a50 <builtIn_setBlankColour>:

builtIn (setBlankColour)
{
	KPrintF("running setBlankColour\n");
   10a50:	pea 1b03f <talk.c.490538ff+0x4ed>
   10a56:	jsr 183ec <KPrintF>
   10a5c:	addq.l #4,sp
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
   10a5e:	moveq #2,d0
}
   10a60:	rts

00010a62 <builtIn_setBurnColour>:

builtIn (setBurnColour)
{
	KPrintF("running setBurnColour\n");
   10a62:	pea 1b057 <talk.c.490538ff+0x505>
   10a68:	jsr 183ec <KPrintF>
   10a6e:	addq.l #4,sp

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
   10a70:	moveq #2,d0
}
   10a72:	rts

00010a74 <builtIn_setFont>:


builtIn(setFont)
{
   10a74:	       lea -16(sp),sp
   10a78:	       move.l a6,-(sp)
	KPrintF("running setFont\n");
   10a7a:	       pea 1b06e <talk.c.490538ff+0x51c>
   10a80:	       jsr 183ec <KPrintF>
   10a86:	       addq.l #4,sp
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   10a88:	       movea.l 28(sp),a0
   10a8c:	       move.l 24(a0),d0
   10a90:	       move.l d0,-(sp)
   10a92:	       pea 1 <_start+0x1>
   10a96:	       lea 12(sp),a0
   10a9a:	       move.l a0,-(sp)
   10a9c:	       jsr 1590c <getValueType>
   10aa2:	       lea 12(sp),sp
   10aa6:	       tst.w d0
   10aa8:	   ,-- bne.s 10ab0 <builtIn_setFont+0x3c>
   10aaa:	   |   moveq #1,d0
   10aac:	,--|-- bra.w 10b5e <builtIn_setFont+0xea>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
   10ab0:	|  '-> moveq #24,d0
   10ab2:	|      add.l 28(sp),d0
   10ab6:	|      move.l d0,-(sp)
   10ab8:	|      jsr 16290 <trimStack>
   10abe:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10ac0:	|      movea.l 28(sp),a0
   10ac4:	|      move.l 24(a0),d0
   10ac8:	|      move.l d0,-(sp)
   10aca:	|      jsr 15ee2 <getTextFromAnyVar>
   10ad0:	|      addq.l #4,sp
   10ad2:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
   10ad6:	|  ,-- bne.s 10ade <builtIn_setFont+0x6a>
   10ad8:	|  |   moveq #1,d0
   10ada:	+--|-- bra.w 10b5e <builtIn_setFont+0xea>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
   10ade:	|  '-> moveq #24,d0
   10ae0:	|      add.l 28(sp),d0
   10ae4:	|      move.l d0,-(sp)
   10ae6:	|      jsr 16290 <trimStack>
   10aec:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   10aee:	|      movea.l 28(sp),a0
   10af2:	|      move.l 24(a0),d0
   10af6:	|      move.l d0,-(sp)
   10af8:	|      pea 5 <_start+0x5>
   10afc:	|      lea 16(sp),a0
   10b00:	|      move.l a0,-(sp)
   10b02:	|      jsr 1590c <getValueType>
   10b08:	|      lea 12(sp),sp
   10b0c:	|      tst.w d0
   10b0e:	|  ,-- bne.s 10b14 <builtIn_setFont+0xa0>
   10b10:	|  |   moveq #1,d0
   10b12:	+--|-- bra.s 10b5e <builtIn_setFont+0xea>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
   10b14:	|  '-> moveq #24,d0
   10b16:	|      add.l 28(sp),d0
   10b1a:	|      move.l d0,-(sp)
   10b1c:	|      jsr 16290 <trimStack>
   10b22:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
   10b24:	|      move.l 4(sp),d1
   10b28:	|      move.l 8(sp),d0
   10b2c:	|      move.l d1,-(sp)
   10b2e:	|      move.l 20(sp),-(sp)
   10b32:	|      move.l d0,-(sp)
   10b34:	|      jsr 16744 <loadFont>
   10b3a:	|      lea 12(sp),sp
   10b3e:	|      tst.w d0
   10b40:	|  ,-- bne.s 10b46 <builtIn_setFont+0xd2>
   10b42:	|  |   moveq #1,d0
   10b44:	+--|-- bra.s 10b5e <builtIn_setFont+0xea>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
   10b46:	|  '-> move.l 16(sp),12(sp)
   10b4c:	|      move.l 1c7ba <SysBase>,d0
   10b52:	|      movea.l d0,a6
   10b54:	|      movea.l 12(sp),a1
   10b58:	|      jsr -690(a6)

    return BR_CONTINUE;
   10b5c:	|      moveq #2,d0
}
   10b5e:	'----> movea.l (sp)+,a6
   10b60:	       lea 16(sp),sp
   10b64:	       rts

00010b66 <builtIn_inFont>:

builtIn(inFont)
{
   10b66:	       subq.l #4,sp
	KPrintF("running inFont\n");
   10b68:	       pea 1b07f <talk.c.490538ff+0x52d>
   10b6e:	       jsr 183ec <KPrintF>
   10b74:	       addq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
   10b76:	       movea.l 12(sp),a0
   10b7a:	       move.l 24(a0),d0
   10b7e:	       move.l d0,-(sp)
   10b80:	       jsr 15ee2 <getTextFromAnyVar>
   10b86:	       addq.l #4,sp
   10b88:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
   10b8a:	   ,-- bne.s 10b90 <builtIn_inFont+0x2a>
   10b8c:	   |   moveq #1,d0
   10b8e:	,--|-- bra.s 10bc6 <builtIn_inFont+0x60>
	trimStack (&fun -> stack);
   10b90:	|  '-> moveq #24,d0
   10b92:	|      add.l 12(sp),d0
   10b96:	|      move.l d0,-(sp)
   10b98:	|      jsr 16290 <trimStack>
   10b9e:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
   10ba0:	|      move.l (sp),-(sp)
   10ba2:	|      jsr 16732 <isInFont>
   10ba8:	|      addq.l #4,sp
   10baa:	|      movea.w d0,a0
   10bac:	|      moveq #28,d0
   10bae:	|      add.l 12(sp),d0
   10bb2:	|      move.l a0,-(sp)
   10bb4:	|      pea 1 <_start+0x1>
   10bb8:	|      move.l d0,-(sp)
   10bba:	|      jsr 161fe <setVariable>
   10bc0:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10bc4:	|      moveq #2,d0
}
   10bc6:	'----> addq.l #4,sp
   10bc8:	       rts

00010bca <builtIn_pasteString>:

builtIn(pasteString)
{
   10bca:	       lea -16(sp),sp
   10bce:	       move.l a6,-(sp)
   10bd0:	       move.l d2,-(sp)
	KPrintF("running pasteString\n");
   10bd2:	       pea 1b08f <talk.c.490538ff+0x53d>
   10bd8:	       jsr 183ec <KPrintF>
   10bde:	       addq.l #4,sp
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10be0:	       movea.l 32(sp),a0
   10be4:	       move.l 24(a0),d0
   10be8:	       move.l d0,-(sp)
   10bea:	       jsr 15ee2 <getTextFromAnyVar>
   10bf0:	       addq.l #4,sp
   10bf2:	       move.l d0,20(sp)
    trimStack(&fun->stack);
   10bf6:	       moveq #24,d0
   10bf8:	       add.l 32(sp),d0
   10bfc:	       move.l d0,-(sp)
   10bfe:	       jsr 16290 <trimStack>
   10c04:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   10c06:	       movea.l 32(sp),a0
   10c0a:	       move.l 24(a0),d0
   10c0e:	       move.l d0,-(sp)
   10c10:	       pea 1 <_start+0x1>
   10c14:	       lea 20(sp),a0
   10c18:	       move.l a0,-(sp)
   10c1a:	       jsr 1590c <getValueType>
   10c20:	       lea 12(sp),sp
   10c24:	       tst.w d0
   10c26:	   ,-- bne.s 10c2e <builtIn_pasteString+0x64>
   10c28:	   |   moveq #1,d0
   10c2a:	,--|-- bra.w 10cd0 <builtIn_pasteString+0x106>
    trimStack(&fun->stack);
   10c2e:	|  '-> moveq #24,d0
   10c30:	|      add.l 32(sp),d0
   10c34:	|      move.l d0,-(sp)
   10c36:	|      jsr 16290 <trimStack>
   10c3c:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   10c3e:	|      movea.l 32(sp),a0
   10c42:	|      move.l 24(a0),d0
   10c46:	|      move.l d0,-(sp)
   10c48:	|      pea 1 <_start+0x1>
   10c4c:	|      lea 16(sp),a0
   10c50:	|      move.l a0,-(sp)
   10c52:	|      jsr 1590c <getValueType>
   10c58:	|      lea 12(sp),sp
   10c5c:	|      tst.w d0
   10c5e:	|  ,-- bne.s 10c64 <builtIn_pasteString+0x9a>
   10c60:	|  |   moveq #1,d0
   10c62:	+--|-- bra.s 10cd0 <builtIn_pasteString+0x106>
    trimStack(&fun->stack);
   10c64:	|  '-> moveq #24,d0
   10c66:	|      add.l 32(sp),d0
   10c6a:	|      move.l d0,-(sp)
   10c6c:	|      jsr 16290 <trimStack>
   10c72:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) 
   10c74:	|      move.l 8(sp),d0
   10c78:	|      cmpi.l #65535,d0
   10c7e:	|  ,-- bne.s 10c9e <builtIn_pasteString+0xd4>
		x = (winWidth - stringWidth(newText)) >> 1;
   10c80:	|  |   move.l 1c702 <winWidth>,d2
   10c86:	|  |   move.l 20(sp),-(sp)
   10c8a:	|  |   jsr 169f6 <stringWidth>
   10c90:	|  |   addq.l #4,sp
   10c92:	|  |   move.l d2,d1
   10c94:	|  |   sub.l d0,d1
   10c96:	|  |   move.l d1,d0
   10c98:	|  |   lsr.l #1,d0
   10c9a:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
   10c9e:	|  '-> move.l 12(sp),d1
   10ca2:	|      move.l 8(sp),d0
   10ca6:	|      move.l d1,-(sp)
   10ca8:	|      move.l d0,-(sp)
   10caa:	|      move.l 28(sp),-(sp)
   10cae:	|      jsr 16918 <pasteStringToBackdrop>
   10cb4:	|      lea 12(sp),sp
    FreeVec(newText); 
   10cb8:	|      move.l 20(sp),16(sp)
   10cbe:	|      move.l 1c7ba <SysBase>,d0
   10cc4:	|      movea.l d0,a6
   10cc6:	|      movea.l 16(sp),a1
   10cca:	|      jsr -690(a6)
    return BR_CONTINUE;
   10cce:	|      moveq #2,d0
}
   10cd0:	'----> move.l (sp)+,d2
   10cd2:	       movea.l (sp)+,a6
   10cd4:	       lea 16(sp),sp
   10cd8:	       rts

00010cda <builtIn_anim>:

builtIn(anim)
{
   10cda:	       lea -12(sp),sp
	KPrintF("running anim\n");
   10cde:	       pea 1b0a4 <talk.c.490538ff+0x552>
   10ce4:	       jsr 183ec <KPrintF>
   10cea:	       addq.l #4,sp
	UNUSEDALL
	if (numParams < 2) {
   10cec:	       moveq #1,d0
   10cee:	       cmp.l 16(sp),d0
   10cf2:	   ,-- blt.s 10d08 <builtIn_anim+0x2e>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
   10cf4:	   |   pea 1b0b2 <talk.c.490538ff+0x560>
   10cfa:	   |   jsr 183ec <KPrintF>
   10d00:	   |   addq.l #4,sp
		return BR_ERROR;
   10d02:	   |   moveq #1,d0
   10d04:	,--|-- bra.w 10d96 <builtIn_anim+0xbc>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
   10d08:	|  '-> moveq #24,d1
   10d0a:	|      add.l 20(sp),d1
   10d0e:	|      move.l 16(sp),d0
   10d12:	|      subq.l #1,d0
   10d14:	|      move.l d1,-(sp)
   10d16:	|      move.l d0,-(sp)
   10d18:	|      jsr 9f58 <createPersonaAnim>
   10d1e:	|      addq.l #8,sp
   10d20:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10d24:	|      movea.l 20(sp),a0
   10d28:	|      move.l 24(a0),d0
   10d2c:	|      move.l d0,-(sp)
   10d2e:	|      pea 5 <_start+0x5>
   10d32:	|      lea 8(sp),a0
   10d36:	|      move.l a0,-(sp)
   10d38:	|      jsr 1590c <getValueType>
   10d3e:	|      lea 12(sp),sp
   10d42:	|      tst.w d0
   10d44:	|  ,-- bne.s 10d4a <builtIn_anim+0x70>
   10d46:	|  |   moveq #1,d0
   10d48:	+--|-- bra.s 10d96 <builtIn_anim+0xbc>
	trimStack (&fun -> stack);
   10d4a:	|  '-> moveq #24,d0
   10d4c:	|      add.l 20(sp),d0
   10d50:	|      move.l d0,-(sp)
   10d52:	|      jsr 16290 <trimStack>
   10d58:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
   10d5a:	|      move.l (sp),d0
   10d5c:	|      move.l d0,-(sp)
   10d5e:	|      jsr 1710e <loadBankForAnim>
   10d64:	|      addq.l #4,sp
   10d66:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
   10d6a:	|  ,-- bne.s 10d70 <builtIn_anim+0x96>
   10d6c:	|  |   moveq #1,d0
   10d6e:	+--|-- bra.s 10d96 <builtIn_anim+0xbc>
	setBankFile (ba, sprBanky);
   10d70:	|  '-> move.l 4(sp),-(sp)
   10d74:	|      move.l 12(sp),-(sp)
   10d78:	|      jsr be64 <setBankFile>
   10d7e:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
   10d80:	|      moveq #28,d0
   10d82:	|      add.l 20(sp),d0
   10d86:	|      move.l 8(sp),-(sp)
   10d8a:	|      move.l d0,-(sp)
   10d8c:	|      jsr 161ba <newAnimationVariable>
   10d92:	|      addq.l #8,sp
	return BR_CONTINUE;
   10d94:	|      moveq #2,d0
}
   10d96:	'----> lea 12(sp),sp
   10d9a:	       rts

00010d9c <builtIn_costume>:

builtIn(costume)
{
   10d9c:	          lea -32(sp),sp
   10da0:	          move.l a6,-(sp)
   10da2:	          move.l a2,-(sp)
	KPrintF("running costume\n");
   10da4:	          pea 1b0ec <talk.c.490538ff+0x59a>
   10daa:	          jsr 183ec <KPrintF>
   10db0:	          addq.l #4,sp
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
   10db2:	          moveq #8,d0
   10db4:	          move.l d0,32(sp)
   10db8:	          clr.l 28(sp)
   10dbc:	          move.l 1c7ba <SysBase>,d0
   10dc2:	          movea.l d0,a6
   10dc4:	          move.l 32(sp),d0
   10dc8:	          move.l 28(sp),d1
   10dcc:	          jsr -684(a6)
   10dd0:	          move.l d0,24(sp)
   10dd4:	          move.l 24(sp),d0
   10dd8:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
   10ddc:	      ,-- bne.s 10de4 <builtIn_costume+0x48>
   10dde:	      |   moveq #1,d0
   10de0:	,-----|-- bra.w 10ecc <builtIn_costume+0x130>
    newPersona->numDirections = numParams / 3;
   10de4:	|     '-> move.l 44(sp),d0
   10de8:	|         pea 3 <_start+0x3>
   10dec:	|         move.l d0,-(sp)
   10dee:	|         jsr 18df6 <__divsi3>
   10df4:	|         addq.l #8,sp
   10df6:	|         movea.l 20(sp),a0
   10dfa:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
   10dfe:	|         tst.l 44(sp)
   10e02:	|     ,-- beq.s 10e18 <builtIn_costume+0x7c>
   10e04:	|     |   movea.l 20(sp),a0
   10e08:	|     |   move.l 4(a0),d1
   10e0c:	|     |   move.l d1,d0
   10e0e:	|     |   add.l d0,d0
   10e10:	|     |   add.l d1,d0
   10e12:	|     |   cmp.l 44(sp),d0
   10e16:	|  ,--|-- beq.s 10e2c <builtIn_costume+0x90>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
   10e18:	|  |  '-> pea 1b0fd <talk.c.490538ff+0x5ab>
   10e1e:	|  |      jsr 183ec <KPrintF>
   10e24:	|  |      addq.l #4,sp
        return BR_ERROR;
   10e26:	|  |      moveq #1,d0
   10e28:	+--|----- bra.w 10ecc <builtIn_costume+0x130>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
   10e2c:	|  '----> move.l 44(sp),d0
   10e30:	|         add.l d0,d0
   10e32:	|         add.l d0,d0
   10e34:	|         move.l d0,16(sp)
   10e38:	|         clr.l 12(sp)
   10e3c:	|         move.l 1c7ba <SysBase>,d0
   10e42:	|         movea.l d0,a6
   10e44:	|         move.l 16(sp),d0
   10e48:	|         move.l 12(sp),d1
   10e4c:	|         jsr -684(a6)
   10e50:	|         move.l d0,8(sp)
   10e54:	|         move.l 8(sp),d0
   10e58:	|         movea.l 20(sp),a0
   10e5c:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
   10e5e:	|         movea.l 20(sp),a0
   10e62:	|         move.l (a0),d0
   10e64:	|     ,-- bne.s 10e6a <builtIn_costume+0xce>
   10e66:	|     |   moveq #1,d0
   10e68:	+-----|-- bra.s 10ecc <builtIn_costume+0x130>
    for (iii = numParams - 1; iii >= 0; iii--) {
   10e6a:	|     '-> move.l 44(sp),d0
   10e6e:	|         subq.l #1,d0
   10e70:	|         move.l d0,36(sp)
   10e74:	|     ,-- bra.s 10eb0 <builtIn_costume+0x114>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
   10e76:	|  ,--|-> movea.l 48(sp),a0
   10e7a:	|  |  |   move.l 24(a0),d0
   10e7e:	|  |  |   movea.l 20(sp),a0
   10e82:	|  |  |   movea.l (a0),a0
   10e84:	|  |  |   move.l 36(sp),d1
   10e88:	|  |  |   add.l d1,d1
   10e8a:	|  |  |   add.l d1,d1
   10e8c:	|  |  |   lea (0,a0,d1.l),a2
   10e90:	|  |  |   move.l d0,-(sp)
   10e92:	|  |  |   jsr 15de4 <getAnimationFromVar>
   10e98:	|  |  |   addq.l #4,sp
   10e9a:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
   10e9c:	|  |  |   moveq #24,d0
   10e9e:	|  |  |   add.l 48(sp),d0
   10ea2:	|  |  |   move.l d0,-(sp)
   10ea4:	|  |  |   jsr 16290 <trimStack>
   10eaa:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
   10eac:	|  |  |   subq.l #1,36(sp)
   10eb0:	|  |  '-> tst.l 36(sp)
   10eb4:	|  '----- bge.s 10e76 <builtIn_costume+0xda>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
   10eb6:	|         moveq #28,d0
   10eb8:	|         add.l 48(sp),d0
   10ebc:	|         move.l 20(sp),-(sp)
   10ec0:	|         move.l d0,-(sp)
   10ec2:	|         jsr 161dc <newCostumeVariable>
   10ec8:	|         addq.l #8,sp
    return BR_CONTINUE;
   10eca:	|         moveq #2,d0
}
   10ecc:	'-------> movea.l (sp)+,a2
   10ece:	          movea.l (sp)+,a6
   10ed0:	          lea 32(sp),sp
   10ed4:	          rts

00010ed6 <builtIn_launch>:

builtIn(launch)
{
   10ed6:	          lea -20(sp),sp
   10eda:	          move.l a6,-(sp)
	KPrintF("running launch\n");
   10edc:	          pea 1b148 <talk.c.490538ff+0x5f6>
   10ee2:	          jsr 183ec <KPrintF>
   10ee8:	          addq.l #4,sp
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   10eea:	          movea.l 32(sp),a0
   10eee:	          move.l 24(a0),d0
   10ef2:	          move.l d0,-(sp)
   10ef4:	          jsr 15ee2 <getTextFromAnyVar>
   10efa:	          addq.l #4,sp
   10efc:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
   10f00:	      ,-- bne.s 10f08 <builtIn_launch+0x32>
   10f02:	      |   moveq #1,d0
   10f04:	,-----|-- bra.w 11036 <builtIn_launch+0x160>

    char * newText = encodeFilename(newTextA);
   10f08:	|     '-> move.l 20(sp),-(sp)
   10f0c:	|         jsr 2fe <encodeFilename>
   10f12:	|         addq.l #4,sp
   10f14:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
   10f18:	|         moveq #24,d0
   10f1a:	|         add.l 32(sp),d0
   10f1e:	|         move.l d0,-(sp)
   10f20:	|         jsr 16290 <trimStack>
   10f26:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
   10f28:	|         movea.l 20(sp),a0
   10f2c:	|         move.b (a0),d0
   10f2e:	|         cmpi.b #104,d0
   10f32:	|  ,----- bne.s 10f9c <builtIn_launch+0xc6>
        newTextA[1] == 't' &&
   10f34:	|  |      movea.l 20(sp),a0
   10f38:	|  |      addq.l #1,a0
   10f3a:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
   10f3c:	|  |      cmpi.b #116,d0
   10f40:	|  +----- bne.s 10f9c <builtIn_launch+0xc6>
        newTextA[2] == 't' &&
   10f42:	|  |      movea.l 20(sp),a0
   10f46:	|  |      addq.l #2,a0
   10f48:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
   10f4a:	|  |      cmpi.b #116,d0
   10f4e:	|  +----- bne.s 10f9c <builtIn_launch+0xc6>
        newTextA[3] == 'p' &&
   10f50:	|  |      movea.l 20(sp),a0
   10f54:	|  |      addq.l #3,a0
   10f56:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
   10f58:	|  |      cmpi.b #112,d0
   10f5c:	|  +----- bne.s 10f9c <builtIn_launch+0xc6>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   10f5e:	|  |      movea.l 20(sp),a0
   10f62:	|  |      addq.l #4,a0
   10f64:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
   10f66:	|  |      cmpi.b #58,d0
   10f6a:	|  |  ,-- beq.s 10f88 <builtIn_launch+0xb2>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   10f6c:	|  |  |   movea.l 20(sp),a0
   10f70:	|  |  |   addq.l #4,a0
   10f72:	|  |  |   move.b (a0),d0
   10f74:	|  |  |   cmpi.b #115,d0
   10f78:	|  +--|-- bne.s 10f9c <builtIn_launch+0xc6>
   10f7a:	|  |  |   movea.l 20(sp),a0
   10f7e:	|  |  |   addq.l #5,a0
   10f80:	|  |  |   move.b (a0),d0
   10f82:	|  |  |   cmpi.b #58,d0
   10f86:	|  +--|-- bne.s 10f9c <builtIn_launch+0xc6>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
   10f88:	|  |  '-> move.l 20(sp),-(sp)
   10f8c:	|  |      jsr b8 <copyString>
   10f92:	|  |      addq.l #4,sp
   10f94:	|  |      move.l d0,1c878 <launchMe>
   10f9a:	|  |  ,-- bra.s 10fee <builtIn_launch+0x118>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
   10f9c:	|  '--|-> move.l 1c716 <gamePath>,d0
   10fa2:	|     |   pea 1b158 <talk.c.490538ff+0x606>
   10fa8:	|     |   move.l d0,-(sp)
   10faa:	|     |   jsr 14e38 <joinStrings>
   10fb0:	|     |   addq.l #8,sp
   10fb2:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
   10fb6:	|     |   move.l 16(sp),-(sp)
   10fba:	|     |   move.l 16(sp),-(sp)
   10fbe:	|     |   jsr 14e38 <joinStrings>
   10fc4:	|     |   addq.l #8,sp
   10fc6:	|     |   move.l d0,1c878 <launchMe>
        FreeVec(newText);
   10fcc:	|     |   move.l 16(sp),8(sp)
   10fd2:	|     |   move.l 1c7ba <SysBase>,d0
   10fd8:	|     |   movea.l d0,a6
   10fda:	|     |   movea.l 8(sp),a1
   10fde:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
   10fe2:	|     |   move.l 1c878 <launchMe>,d0
   10fe8:	|     +-- bne.s 10fee <builtIn_launch+0x118>
   10fea:	|     |   moveq #1,d0
   10fec:	+-----|-- bra.s 11036 <builtIn_launch+0x160>
    }
    FreeVec(newTextA);
   10fee:	|     '-> move.l 20(sp),4(sp)
   10ff4:	|         move.l 1c7ba <SysBase>,d0
   10ffa:	|         movea.l d0,a6
   10ffc:	|         movea.l 4(sp),a1
   11000:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
   11004:	|         clr.l -(sp)
   11006:	|         jsr 4eec <setGraphicsWindow>
   1100c:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
   1100e:	|         moveq #28,d0
   11010:	|         add.l 32(sp),d0
   11014:	|         pea 1 <_start+0x1>
   11018:	|         pea 1 <_start+0x1>
   1101c:	|         move.l d0,-(sp)
   1101e:	|         jsr 161fe <setVariable>
   11024:	|         lea 12(sp),sp
    launchResult = &fun->reg;
   11028:	|         moveq #28,d0
   1102a:	|         add.l 32(sp),d0
   1102e:	|         move.l d0,1c87c <launchResult>

    return BR_KEEP_AND_PAUSE;
   11034:	|         moveq #0,d0
}
   11036:	'-------> movea.l (sp)+,a6
   11038:	          lea 20(sp),sp
   1103c:	          rts

0001103e <builtIn_pause>:

builtIn(pause)
{
   1103e:	       subq.l #4,sp
	//KPrintF("running pause\n");
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11040:	       movea.l 12(sp),a0
   11044:	       move.l 24(a0),d0
   11048:	       move.l d0,-(sp)
   1104a:	       pea 1 <_start+0x1>
   1104e:	       move.l sp,d0
   11050:	       addq.l #8,d0
   11052:	       move.l d0,-(sp)
   11054:	       jsr 1590c <getValueType>
   1105a:	       lea 12(sp),sp
   1105e:	       tst.w d0
   11060:	   ,-- bne.s 11066 <builtIn_pause+0x28>
   11062:	   |   moveq #1,d0
   11064:	,--|-- bra.s 11094 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
   11066:	|  '-> moveq #24,d0
   11068:	|      add.l 12(sp),d0
   1106c:	|      move.l d0,-(sp)
   1106e:	|      jsr 16290 <trimStack>
   11074:	|      addq.l #4,sp
	if (theTime > 0) {
   11076:	|      move.l (sp),d0
   11078:	|  ,-- ble.s 11092 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
   1107a:	|  |   move.l (sp),d0
   1107c:	|  |   subq.l #1,d0
   1107e:	|  |   movea.l 12(sp),a0
   11082:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
   11086:	|  |   movea.l 12(sp),a0
   1108a:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
   1108e:	|  |   moveq #0,d0
   11090:	+--|-- bra.s 11094 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
   11092:	|  '-> moveq #2,d0
}
   11094:	'----> addq.l #4,sp
   11096:	       rts

00011098 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	KPrintF("running completeTimers\n");
   11098:	pea 1b15a <talk.c.490538ff+0x608>
   1109e:	jsr 183ec <KPrintF>
   110a4:	addq.l #4,sp
	UNUSEDALL
	completeTimers();
   110a6:	jsr 5652 <completeTimers>
	return BR_CONTINUE;
   110ac:	moveq #2,d0
}
   110ae:	rts

000110b0 <builtIn_callEvent>:

builtIn(callEvent)
{
   110b0:	       lea -12(sp),sp
	KPrintF("running callEvent\n");
   110b4:	       pea 1b172 <talk.c.490538ff+0x620>
   110ba:	       jsr 183ec <KPrintF>
   110c0:	       addq.l #4,sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   110c2:	       movea.l 20(sp),a0
   110c6:	       move.l 24(a0),d0
   110ca:	       move.l d0,-(sp)
   110cc:	       pea 7 <_start+0x7>
   110d0:	       lea 8(sp),a0
   110d4:	       move.l a0,-(sp)
   110d6:	       jsr 1590c <getValueType>
   110dc:	       lea 12(sp),sp
   110e0:	       tst.w d0
   110e2:	   ,-- bne.s 110ea <builtIn_callEvent+0x3a>
   110e4:	   |   moveq #1,d0
   110e6:	,--|-- bra.w 11180 <builtIn_callEvent+0xd0>
	trimStack (&fun -> stack);
   110ea:	|  '-> moveq #24,d0
   110ec:	|      add.l 20(sp),d0
   110f0:	|      move.l d0,-(sp)
   110f2:	|      jsr 16290 <trimStack>
   110f8:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   110fa:	|      movea.l 20(sp),a0
   110fe:	|      move.l 24(a0),d0
   11102:	|      move.l d0,-(sp)
   11104:	|      pea 7 <_start+0x7>
   11108:	|      moveq #12,d0
   1110a:	|      add.l sp,d0
   1110c:	|      move.l d0,-(sp)
   1110e:	|      jsr 1590c <getValueType>
   11114:	|      lea 12(sp),sp
   11118:	|      tst.w d0
   1111a:	|  ,-- bne.s 11120 <builtIn_callEvent+0x70>
   1111c:	|  |   moveq #1,d0
   1111e:	+--|-- bra.s 11180 <builtIn_callEvent+0xd0>
	trimStack (&fun -> stack);
   11120:	|  '-> moveq #24,d0
   11122:	|      add.l 20(sp),d0
   11126:	|      move.l d0,-(sp)
   11128:	|      jsr 16290 <trimStack>
   1112e:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   11130:	|      move.l (sp),d1
   11132:	|      move.l 4(sp),d0
   11136:	|      move.l d1,-(sp)
   11138:	|      move.l d0,-(sp)
   1113a:	|      jsr de3e <getCombinationFunction>
   11140:	|      addq.l #8,sp
   11142:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
   11146:	|  ,-- beq.s 11166 <builtIn_callEvent+0xb6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   11148:	|  |   moveq #28,d0
   1114a:	|  |   add.l 20(sp),d0
   1114e:	|  |   move.l 8(sp),-(sp)
   11152:	|  |   pea 2 <_start+0x2>
   11156:	|  |   move.l d0,-(sp)
   11158:	|  |   jsr 161fe <setVariable>
   1115e:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
   11162:	|  |   moveq #4,d0
   11164:	+--|-- bra.s 11180 <builtIn_callEvent+0xd0>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
   11166:	|  '-> moveq #28,d0
   11168:	|      add.l 20(sp),d0
   1116c:	|      clr.l -(sp)
   1116e:	|      pea 1 <_start+0x1>
   11172:	|      move.l d0,-(sp)
   11174:	|      jsr 161fe <setVariable>
   1117a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1117e:	|      moveq #2,d0
}
   11180:	'----> lea 12(sp),sp
   11184:	       rts

00011186 <builtIn_quitGame>:

BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	KPrintF("running quitGame\n");
   11186:	pea 1b185 <talk.c.490538ff+0x633>
   1118c:	jsr 183ec <KPrintF>
   11192:	addq.l #4,sp
	UNUSEDALL
	reallyWantToQuit = TRUE;
   11194:	move.w #1,1c888 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
   1119c:	moveq #2,d0
}
   1119e:	rts

000111a0 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{	
	UNUSEDALL
	trimStack (&fun -> stack);
   111a0:	moveq #24,d0
   111a2:	add.l 8(sp),d0
   111a6:	move.l d0,-(sp)
   111a8:	jsr 16290 <trimStack>
   111ae:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
   111b0:	pea 1b197 <talk.c.490538ff+0x645>
   111b6:	jsr 183ec <KPrintF>
   111bc:	addq.l #4,sp
	return BR_CONTINUE;
   111be:	moveq #2,d0
}
   111c0:	rts

000111c2 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
   111c2:	pea 1b197 <talk.c.490538ff+0x645>
   111c8:	jsr 183ec <KPrintF>
   111ce:	addq.l #4,sp
	return BR_CONTINUE;
   111d0:	moveq #2,d0
}
   111d2:	rts

000111d4 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
   111d4:	pea 1b197 <talk.c.490538ff+0x645>
   111da:	jsr 183ec <KPrintF>
   111e0:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
   111e2:	moveq #2,d0
}
   111e4:	rts

000111e6 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
   111e6:	pea 1b197 <talk.c.490538ff+0x645>
   111ec:	jsr 183ec <KPrintF>
   111f2:	addq.l #4,sp
	return BR_CONTINUE;
   111f4:	moveq #2,d0
}
   111f6:	rts

000111f8 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   111f8:	pea 1b197 <talk.c.490538ff+0x645>
   111fe:	jsr 183ec <KPrintF>
   11204:	addq.l #4,sp
	return BR_CONTINUE;
   11206:	moveq #2,d0
}
   11208:	rts

0001120a <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   1120a:	pea 1b197 <talk.c.490538ff+0x645>
   11210:	jsr 183ec <KPrintF>
   11216:	addq.l #4,sp
	return BR_CONTINUE;
   11218:	moveq #2,d0
}
   1121a:	rts

0001121c <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
   1121c:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11220:	       movea.l 20(sp),a0
   11224:	       move.l 24(a0),d0
   11228:	       move.l d0,-(sp)
   1122a:	       pea 1 <_start+0x1>
   1122e:	       moveq #16,d0
   11230:	       add.l sp,d0
   11232:	       move.l d0,-(sp)
   11234:	       jsr 1590c <getValueType>
   1123a:	       lea 12(sp),sp
   1123e:	       tst.w d0
   11240:	   ,-- bne.s 11248 <builtIn_startMusic+0x2c>
   11242:	   |   moveq #1,d0
   11244:	,--|-- bra.w 112e8 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   11248:	|  '-> moveq #24,d0
   1124a:	|      add.l 20(sp),d0
   1124e:	|      move.l d0,-(sp)
   11250:	|      jsr 16290 <trimStack>
   11256:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11258:	|      movea.l 20(sp),a0
   1125c:	|      move.l 24(a0),d0
   11260:	|      move.l d0,-(sp)
   11262:	|      pea 1 <_start+0x1>
   11266:	|      moveq #12,d0
   11268:	|      add.l sp,d0
   1126a:	|      move.l d0,-(sp)
   1126c:	|      jsr 1590c <getValueType>
   11272:	|      lea 12(sp),sp
   11276:	|      tst.w d0
   11278:	|  ,-- bne.s 1127e <builtIn_startMusic+0x62>
   1127a:	|  |   moveq #1,d0
   1127c:	+--|-- bra.s 112e8 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   1127e:	|  '-> moveq #24,d0
   11280:	|      add.l 20(sp),d0
   11284:	|      move.l d0,-(sp)
   11286:	|      jsr 16290 <trimStack>
   1128c:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1128e:	|      movea.l 20(sp),a0
   11292:	|      move.l 24(a0),d0
   11296:	|      move.l d0,-(sp)
   11298:	|      pea 5 <_start+0x5>
   1129c:	|      lea 8(sp),a0
   112a0:	|      move.l a0,-(sp)
   112a2:	|      jsr 1590c <getValueType>
   112a8:	|      lea 12(sp),sp
   112ac:	|      tst.w d0
   112ae:	|  ,-- bne.s 112b4 <builtIn_startMusic+0x98>
   112b0:	|  |   moveq #1,d0
   112b2:	+--|-- bra.s 112e8 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   112b4:	|  '-> moveq #24,d0
   112b6:	|      add.l 20(sp),d0
   112ba:	|      move.l d0,-(sp)
   112bc:	|      jsr 16290 <trimStack>
   112c2:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   112c4:	|      movea.l 8(sp),a0
   112c8:	|      move.l 4(sp),d1
   112cc:	|      move.l (sp),d0
   112ce:	|      move.l a0,-(sp)
   112d0:	|      move.l d1,-(sp)
   112d2:	|      move.l d0,-(sp)
   112d4:	|      jsr da40 <playMOD>
   112da:	|      lea 12(sp),sp
   112de:	|      tst.w d0
   112e0:	|  ,-- bne.s 112e6 <builtIn_startMusic+0xca>
   112e2:	|  |   moveq #2,d0
   112e4:	+--|-- bra.s 112e8 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   112e6:	|  '-> moveq #2,d0
}
   112e8:	'----> lea 12(sp),sp
   112ec:	       rts

000112ee <builtIn_stopMusic>:

builtIn(stopMusic)
{
   112ee:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   112f0:	       movea.l 12(sp),a0
   112f4:	       move.l 24(a0),d0
   112f8:	       move.l d0,-(sp)
   112fa:	       pea 1 <_start+0x1>
   112fe:	       move.l sp,d0
   11300:	       addq.l #8,d0
   11302:	       move.l d0,-(sp)
   11304:	       jsr 1590c <getValueType>
   1130a:	       lea 12(sp),sp
   1130e:	       tst.w d0
   11310:	   ,-- bne.s 11316 <builtIn_stopMusic+0x28>
   11312:	   |   moveq #1,d0
   11314:	,--|-- bra.s 11334 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   11316:	|  '-> moveq #24,d0
   11318:	|      add.l 12(sp),d0
   1131c:	|      move.l d0,-(sp)
   1131e:	|      jsr 16290 <trimStack>
   11324:	|      addq.l #4,sp
	stopMOD (v);
   11326:	|      move.l (sp),d0
   11328:	|      move.l d0,-(sp)
   1132a:	|      jsr dadc <stopMOD>
   11330:	|      addq.l #4,sp
	return BR_CONTINUE;
   11332:	|      moveq #2,d0
}
   11334:	'----> addq.l #4,sp
   11336:	       rts

00011338 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   11338:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1133a:	       movea.l 16(sp),a0
   1133e:	       move.l 24(a0),d0
   11342:	       move.l d0,-(sp)
   11344:	       pea 1 <_start+0x1>
   11348:	       move.l sp,d0
   1134a:	       addq.l #8,d0
   1134c:	       move.l d0,-(sp)
   1134e:	       jsr 1590c <getValueType>
   11354:	       lea 12(sp),sp
   11358:	       tst.w d0
   1135a:	   ,-- bne.s 11360 <builtIn_setMusicVolume+0x28>
   1135c:	   |   moveq #1,d0
   1135e:	,--|-- bra.s 113ba <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   11360:	|  '-> moveq #24,d0
   11362:	|      add.l 16(sp),d0
   11366:	|      move.l d0,-(sp)
   11368:	|      jsr 16290 <trimStack>
   1136e:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11370:	|      movea.l 16(sp),a0
   11374:	|      move.l 24(a0),d0
   11378:	|      move.l d0,-(sp)
   1137a:	|      pea 1 <_start+0x1>
   1137e:	|      moveq #12,d0
   11380:	|      add.l sp,d0
   11382:	|      move.l d0,-(sp)
   11384:	|      jsr 1590c <getValueType>
   1138a:	|      lea 12(sp),sp
   1138e:	|      tst.w d0
   11390:	|  ,-- bne.s 11396 <builtIn_setMusicVolume+0x5e>
   11392:	|  |   moveq #1,d0
   11394:	+--|-- bra.s 113ba <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   11396:	|  '-> moveq #24,d0
   11398:	|      add.l 16(sp),d0
   1139c:	|      move.l d0,-(sp)
   1139e:	|      jsr 16290 <trimStack>
   113a4:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   113a6:	|      move.l (sp),d1
   113a8:	|      move.l 4(sp),d0
   113ac:	|      move.l d1,-(sp)
   113ae:	|      move.l d0,-(sp)
   113b0:	|      jsr dac2 <setMusicVolume>
   113b6:	|      addq.l #8,sp
	return BR_CONTINUE;
   113b8:	|      moveq #2,d0
}
   113ba:	'----> addq.l #8,sp
   113bc:	       rts

000113be <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   113be:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   113c0:	       movea.l 12(sp),a0
   113c4:	       move.l 24(a0),d0
   113c8:	       move.l d0,-(sp)
   113ca:	       pea 1 <_start+0x1>
   113ce:	       move.l sp,d0
   113d0:	       addq.l #8,d0
   113d2:	       move.l d0,-(sp)
   113d4:	       jsr 1590c <getValueType>
   113da:	       lea 12(sp),sp
   113de:	       tst.w d0
   113e0:	   ,-- bne.s 113e6 <builtIn_setDefaultMusicVolume+0x28>
   113e2:	   |   moveq #1,d0
   113e4:	,--|-- bra.s 11404 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   113e6:	|  '-> moveq #24,d0
   113e8:	|      add.l 12(sp),d0
   113ec:	|      move.l d0,-(sp)
   113ee:	|      jsr 16290 <trimStack>
   113f4:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   113f6:	|      move.l (sp),d0
   113f8:	|      move.l d0,-(sp)
   113fa:	|      jsr daa6 <setDefaultMusicVolume>
   11400:	|      addq.l #4,sp
	return BR_CONTINUE;
   11402:	|      moveq #2,d0
}
   11404:	'----> addq.l #4,sp
   11406:	       rts

00011408 <builtIn_playSound>:

builtIn(playSound)
{
   11408:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1140a:	       movea.l 12(sp),a0
   1140e:	       move.l 24(a0),d0
   11412:	       move.l d0,-(sp)
   11414:	       pea 5 <_start+0x5>
   11418:	       move.l sp,d0
   1141a:	       addq.l #8,d0
   1141c:	       move.l d0,-(sp)
   1141e:	       jsr 1590c <getValueType>
   11424:	       lea 12(sp),sp
   11428:	       tst.w d0
   1142a:	   ,-- bne.s 11430 <builtIn_playSound+0x28>
   1142c:	   |   moveq #1,d0
   1142e:	,--|-- bra.s 11458 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   11430:	|  '-> moveq #24,d0
   11432:	|      add.l 12(sp),d0
   11436:	|      move.l d0,-(sp)
   11438:	|      jsr 16290 <trimStack>
   1143e:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   11440:	|      move.l (sp),d0
   11442:	|      clr.l -(sp)
   11444:	|      move.l d0,-(sp)
   11446:	|      jsr daca <startSound>
   1144c:	|      addq.l #8,sp
   1144e:	|      tst.w d0
   11450:	|  ,-- bne.s 11456 <builtIn_playSound+0x4e>
   11452:	|  |   moveq #2,d0
   11454:	+--|-- bra.s 11458 <builtIn_playSound+0x50>
	return BR_CONTINUE;
   11456:	|  '-> moveq #2,d0
}
   11458:	'----> addq.l #4,sp
   1145a:	       rts

0001145c <builtIn_loopSound>:

builtIn(loopSound)
{
   1145c:	             lea -28(sp),sp
   11460:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   11462:	             tst.l 36(sp)
   11466:	         ,-- bgt.s 1147c <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   11468:	         |   pea 1b1ba <talk.c.490538ff+0x668>
   1146e:	         |   jsr 183ec <KPrintF>
   11474:	         |   addq.l #4,sp
		return BR_ERROR;
   11476:	         |   moveq #1,d0
   11478:	,--------|-- bra.w 11638 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   1147c:	|        '-> moveq #1,d0
   1147e:	|            cmp.l 36(sp),d0
   11482:	|     ,----- blt.s 114de <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   11484:	|     |      movea.l 40(sp),a0
   11488:	|     |      move.l 24(a0),d0
   1148c:	|     |      move.l d0,-(sp)
   1148e:	|     |      pea 5 <_start+0x5>
   11492:	|     |      lea 16(sp),a0
   11496:	|     |      move.l a0,-(sp)
   11498:	|     |      jsr 1590c <getValueType>
   1149e:	|     |      lea 12(sp),sp
   114a2:	|     |      tst.w d0
   114a4:	|     |  ,-- bne.s 114ac <builtIn_loopSound+0x50>
   114a6:	|     |  |   moveq #1,d0
   114a8:	+-----|--|-- bra.w 11638 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   114ac:	|     |  '-> moveq #24,d0
   114ae:	|     |      add.l 40(sp),d0
   114b2:	|     |      move.l d0,-(sp)
   114b4:	|     |      jsr 16290 <trimStack>
   114ba:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   114bc:	|     |      move.l 8(sp),d0
   114c0:	|     |      pea 1 <_start+0x1>
   114c4:	|     |      move.l d0,-(sp)
   114c6:	|     |      jsr daca <startSound>
   114cc:	|     |      addq.l #8,sp
   114ce:	|     |      tst.w d0
   114d0:	|     |  ,-- bne.s 114d8 <builtIn_loopSound+0x7c>
   114d2:	|     |  |   moveq #2,d0
   114d4:	+-----|--|-- bra.w 11638 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   114d8:	|     |  '-> moveq #2,d0
   114da:	+-----|----- bra.w 11638 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   114de:	|     '----> moveq #2,d1
   114e0:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   114e4:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   114e8:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   114ec:	|            movea.l 40(sp),a0
   114f0:	|            movea.l 24(a0),a0
   114f4:	|            move.l (a0),d0
   114f6:	|            moveq #5,d1
   114f8:	|            cmp.l d0,d1
   114fa:	|  ,-------- beq.w 115d2 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   114fe:	|  |         movea.l 40(sp),a0
   11502:	|  |         move.l 24(a0),d0
   11506:	|  |         move.l d0,-(sp)
   11508:	|  |         pea 1 <_start+0x1>
   1150c:	|  |         lea 12(sp),a0
   11510:	|  |         move.l a0,-(sp)
   11512:	|  |         jsr 1590c <getValueType>
   11518:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   1151c:	|  |         moveq #24,d0
   1151e:	|  |         add.l 40(sp),d0
   11522:	|  |         move.l d0,-(sp)
   11524:	|  |         jsr 16290 <trimStack>
   1152a:	|  |         addq.l #4,sp
			numParams--;
   1152c:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   11530:	|  +-------- bra.w 115d2 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   11534:	|  |  ,----> movea.l 40(sp),a0
   11538:	|  |  |      move.l 24(a0),d0
   1153c:	|  |  |      move.l d0,-(sp)
   1153e:	|  |  |      pea 5 <_start+0x5>
   11542:	|  |  |      lea 16(sp),a0
   11546:	|  |  |      move.l a0,-(sp)
   11548:	|  |  |      jsr 1590c <getValueType>
   1154e:	|  |  |      lea 12(sp),sp
   11552:	|  |  |      tst.w d0
   11554:	|  |  |  ,-- bne.s 1156a <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   11556:	|  |  |  |   pea 1b1f8 <talk.c.490538ff+0x6a6>
   1155c:	|  |  |  |   jsr 183ec <KPrintF>
   11562:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   11564:	|  |  |  |   moveq #1,d0
   11566:	+--|--|--|-- bra.w 11638 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   1156a:	|  |  |  '-> moveq #20,d0
   1156c:	|  |  |      move.l d0,20(sp)
   11570:	|  |  |      clr.l 16(sp)
   11574:	|  |  |      move.l 1c7ba <SysBase>,d0
   1157a:	|  |  |      movea.l d0,a6
   1157c:	|  |  |      move.l 20(sp),d0
   11580:	|  |  |      move.l 16(sp),d1
   11584:	|  |  |      jsr -684(a6)
   11588:	|  |  |      move.l d0,12(sp)
   1158c:	|  |  |      move.l 12(sp),d0
   11590:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   11594:	|  |  |  ,-- bne.s 1159c <builtIn_loopSound+0x140>
   11596:	|  |  |  |   moveq #1,d0
   11598:	+--|--|--|-- bra.w 11638 <builtIn_loopSound+0x1dc>

			s->next = old;
   1159c:	|  |  |  '-> movea.l 28(sp),a0
   115a0:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   115a6:	|  |  |      movea.l 28(sp),a0
   115aa:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   115ae:	|  |  |      move.l 8(sp),d0
   115b2:	|  |  |      movea.l 28(sp),a0
   115b6:	|  |  |      move.l d0,(a0)
			old = s;
   115b8:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   115be:	|  |  |      moveq #24,d0
   115c0:	|  |  |      add.l 40(sp),d0
   115c4:	|  |  |      move.l d0,-(sp)
   115c6:	|  |  |      jsr 16290 <trimStack>
   115cc:	|  |  |      addq.l #4,sp
			numParams--;
   115ce:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   115d2:	|  '--|----> tst.l 36(sp)
   115d6:	|     '----- bne.w 11534 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   115da:	|        ,-- bra.s 115e6 <builtIn_loopSound+0x18a>
   115dc:	|     ,--|-> movea.l 28(sp),a0
   115e0:	|     |  |   move.l 4(a0),28(sp)
   115e6:	|     |  '-> movea.l 28(sp),a0
   115ea:	|     |      move.l 4(a0),d0
   115ee:	|     '----- bne.s 115dc <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   115f0:	|            move.l 4(sp),d0
   115f4:	|            moveq #1,d1
   115f6:	|            cmp.l d0,d1
   115f8:	|     ,----- bge.s 11610 <builtIn_loopSound+0x1b4>
			s->next = old;
   115fa:	|     |      movea.l 28(sp),a0
   115fe:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   11604:	|     |      movea.l 24(sp),a0
   11608:	|     |      move.l 28(sp),8(a0)
   1160e:	|     |  ,-- bra.s 11620 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   11610:	|     '--|-> move.l 4(sp),d0
   11614:	|        +-- beq.s 11620 <builtIn_loopSound+0x1c4>
			s->next = s;
   11616:	|        |   movea.l 28(sp),a0
   1161a:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   11620:	|        '-> movea.l 24(sp),a0
   11624:	|            moveq #-1,d0
   11626:	|            move.l d0,16(a0)
		playSoundList(old);
   1162a:	|            move.l 24(sp),-(sp)
   1162e:	|            jsr da44 <playSoundList>
   11634:	|            addq.l #4,sp
		return BR_CONTINUE;
   11636:	|            moveq #2,d0
	}
}
   11638:	'----------> movea.l (sp)+,a6
   1163a:	             lea 28(sp),sp
   1163e:	             rts

00011640 <builtIn_stopSound>:

builtIn(stopSound)
{
   11640:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   11642:	       movea.l 12(sp),a0
   11646:	       move.l 24(a0),d0
   1164a:	       move.l d0,-(sp)
   1164c:	       pea 5 <_start+0x5>
   11650:	       move.l sp,d0
   11652:	       addq.l #8,d0
   11654:	       move.l d0,-(sp)
   11656:	       jsr 1590c <getValueType>
   1165c:	       lea 12(sp),sp
   11660:	       tst.w d0
   11662:	   ,-- bne.s 11668 <builtIn_stopSound+0x28>
   11664:	   |   moveq #1,d0
   11666:	,--|-- bra.s 11686 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   11668:	|  '-> moveq #24,d0
   1166a:	|      add.l 12(sp),d0
   1166e:	|      move.l d0,-(sp)
   11670:	|      jsr 16290 <trimStack>
   11676:	|      addq.l #4,sp
	huntKillSound (v);
   11678:	|      move.l (sp),d0
   1167a:	|      move.l d0,-(sp)
   1167c:	|      jsr da3c <huntKillSound>
   11682:	|      addq.l #4,sp
	return BR_CONTINUE;
   11684:	|      moveq #2,d0
}
   11686:	'----> addq.l #4,sp
   11688:	       rts

0001168a <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   1168a:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1168c:	       movea.l 12(sp),a0
   11690:	       move.l 24(a0),d0
   11694:	       move.l d0,-(sp)
   11696:	       pea 1 <_start+0x1>
   1169a:	       move.l sp,d0
   1169c:	       addq.l #8,d0
   1169e:	       move.l d0,-(sp)
   116a0:	       jsr 1590c <getValueType>
   116a6:	       lea 12(sp),sp
   116aa:	       tst.w d0
   116ac:	   ,-- bne.s 116b2 <builtIn_setDefaultSoundVolume+0x28>
   116ae:	   |   moveq #1,d0
   116b0:	,--|-- bra.s 116d0 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   116b2:	|  '-> moveq #24,d0
   116b4:	|      add.l 12(sp),d0
   116b8:	|      move.l d0,-(sp)
   116ba:	|      jsr 16290 <trimStack>
   116c0:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   116c2:	|      move.l (sp),d0
   116c4:	|      move.l d0,-(sp)
   116c6:	|      jsr dab2 <setDefaultSoundVolume>
   116cc:	|      addq.l #4,sp
	return BR_CONTINUE;
   116ce:	|      moveq #2,d0
}
   116d0:	'----> addq.l #4,sp
   116d2:	       rts

000116d4 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   116d4:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   116d6:	       movea.l 16(sp),a0
   116da:	       move.l 24(a0),d0
   116de:	       move.l d0,-(sp)
   116e0:	       pea 1 <_start+0x1>
   116e4:	       move.l sp,d0
   116e6:	       addq.l #8,d0
   116e8:	       move.l d0,-(sp)
   116ea:	       jsr 1590c <getValueType>
   116f0:	       lea 12(sp),sp
   116f4:	       tst.w d0
   116f6:	   ,-- bne.s 116fc <builtIn_setSoundVolume+0x28>
   116f8:	   |   moveq #1,d0
   116fa:	,--|-- bra.s 11756 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   116fc:	|  '-> moveq #24,d0
   116fe:	|      add.l 16(sp),d0
   11702:	|      move.l d0,-(sp)
   11704:	|      jsr 16290 <trimStack>
   1170a:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1170c:	|      movea.l 16(sp),a0
   11710:	|      move.l 24(a0),d0
   11714:	|      move.l d0,-(sp)
   11716:	|      pea 5 <_start+0x5>
   1171a:	|      moveq #12,d0
   1171c:	|      add.l sp,d0
   1171e:	|      move.l d0,-(sp)
   11720:	|      jsr 1590c <getValueType>
   11726:	|      lea 12(sp),sp
   1172a:	|      tst.w d0
   1172c:	|  ,-- bne.s 11732 <builtIn_setSoundVolume+0x5e>
   1172e:	|  |   moveq #1,d0
   11730:	+--|-- bra.s 11756 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   11732:	|  '-> moveq #24,d0
   11734:	|      add.l 16(sp),d0
   11738:	|      move.l d0,-(sp)
   1173a:	|      jsr 16290 <trimStack>
   11740:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   11742:	|      move.l (sp),d1
   11744:	|      move.l 4(sp),d0
   11748:	|      move.l d1,-(sp)
   1174a:	|      move.l d0,-(sp)
   1174c:	|      jsr dac6 <setSoundVolume>
   11752:	|      addq.l #8,sp
	return BR_CONTINUE;
   11754:	|      moveq #2,d0
}
   11756:	'----> addq.l #8,sp
   11758:	       rts

0001175a <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   1175a:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1175e:	       movea.l 20(sp),a0
   11762:	       move.l 24(a0),d0
   11766:	       move.l d0,-(sp)
   11768:	       pea 1 <_start+0x1>
   1176c:	       moveq #12,d0
   1176e:	       add.l sp,d0
   11770:	       move.l d0,-(sp)
   11772:	       jsr 1590c <getValueType>
   11778:	       lea 12(sp),sp
   1177c:	       tst.w d0
   1177e:	   ,-- bne.s 11786 <builtIn_setSoundLoopPoints+0x2c>
   11780:	   |   moveq #1,d0
   11782:	,--|-- bra.w 1181e <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   11786:	|  '-> moveq #24,d0
   11788:	|      add.l 20(sp),d0
   1178c:	|      move.l d0,-(sp)
   1178e:	|      jsr 16290 <trimStack>
   11794:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11796:	|      movea.l 20(sp),a0
   1179a:	|      move.l 24(a0),d0
   1179e:	|      move.l d0,-(sp)
   117a0:	|      pea 1 <_start+0x1>
   117a4:	|      lea 8(sp),a0
   117a8:	|      move.l a0,-(sp)
   117aa:	|      jsr 1590c <getValueType>
   117b0:	|      lea 12(sp),sp
   117b4:	|      tst.w d0
   117b6:	|  ,-- bne.s 117bc <builtIn_setSoundLoopPoints+0x62>
   117b8:	|  |   moveq #1,d0
   117ba:	+--|-- bra.s 1181e <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   117bc:	|  '-> moveq #24,d0
   117be:	|      add.l 20(sp),d0
   117c2:	|      move.l d0,-(sp)
   117c4:	|      jsr 16290 <trimStack>
   117ca:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   117cc:	|      movea.l 20(sp),a0
   117d0:	|      move.l 24(a0),d0
   117d4:	|      move.l d0,-(sp)
   117d6:	|      pea 5 <_start+0x5>
   117da:	|      moveq #16,d0
   117dc:	|      add.l sp,d0
   117de:	|      move.l d0,-(sp)
   117e0:	|      jsr 1590c <getValueType>
   117e6:	|      lea 12(sp),sp
   117ea:	|      tst.w d0
   117ec:	|  ,-- bne.s 117f2 <builtIn_setSoundLoopPoints+0x98>
   117ee:	|  |   moveq #1,d0
   117f0:	+--|-- bra.s 1181e <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   117f2:	|  '-> moveq #24,d0
   117f4:	|      add.l 20(sp),d0
   117f8:	|      move.l d0,-(sp)
   117fa:	|      jsr 16290 <trimStack>
   11800:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   11802:	|      movea.l 4(sp),a0
   11806:	|      move.l (sp),d1
   11808:	|      move.l 8(sp),d0
   1180c:	|      move.l a0,-(sp)
   1180e:	|      move.l d1,-(sp)
   11810:	|      move.l d0,-(sp)
   11812:	|      jsr dabe <setSoundLoop>
   11818:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1181c:	|      moveq #2,d0
}
   1181e:	'----> lea 12(sp),sp
   11822:	       rts

00011824 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   11824:	          subq.l #4,sp
	KPrintF("running setFloor\n");
   11826:	          pea 1b22f <talk.c.490538ff+0x6dd>
   1182c:	          jsr 183ec <KPrintF>
   11832:	          addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   11834:	          movea.l 12(sp),a0
   11838:	          movea.l 24(a0),a0
   1183c:	          move.l (a0),d0
   1183e:	          moveq #5,d1
   11840:	          cmp.l d0,d1
   11842:	,-------- bne.s 11886 <builtIn_setFloor+0x62>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   11844:	|         movea.l 12(sp),a0
   11848:	|         move.l 24(a0),d0
   1184c:	|         move.l d0,-(sp)
   1184e:	|         pea 5 <_start+0x5>
   11852:	|         move.l sp,d0
   11854:	|         addq.l #8,d0
   11856:	|         move.l d0,-(sp)
   11858:	|         jsr 1590c <getValueType>
   1185e:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   11862:	|         moveq #24,d0
   11864:	|         add.l 12(sp),d0
   11868:	|         move.l d0,-(sp)
   1186a:	|         jsr 16290 <trimStack>
   11870:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   11872:	|         move.l (sp),d0
   11874:	|         move.l d0,-(sp)
   11876:	|         jsr 17b96 <setFloor>
   1187c:	|         addq.l #4,sp
   1187e:	|         tst.w d0
   11880:	|  ,----- bne.s 1189c <builtIn_setFloor+0x78>
   11882:	|  |      moveq #1,d0
   11884:	|  |  ,-- bra.s 1189e <builtIn_setFloor+0x7a>
	} else {
		trimStack (&fun -> stack);
   11886:	'--|--|-> moveq #24,d0
   11888:	   |  |   add.l 12(sp),d0
   1188c:	   |  |   move.l d0,-(sp)
   1188e:	   |  |   jsr 16290 <trimStack>
   11894:	   |  |   addq.l #4,sp
		setFloorNull ();
   11896:	   |  |   jsr 18310 <setFloorNull>
	}
	return BR_CONTINUE;
   1189c:	   '--|-> moveq #2,d0
}
   1189e:	      '-> addq.l #4,sp
   118a0:	          rts

000118a2 <builtIn_showFloor>:

builtIn(showFloor)
{
	KPrintF("running showFloor\n");
   118a2:	pea 1b241 <talk.c.490538ff+0x6ef>
   118a8:	jsr 183ec <KPrintF>
   118ae:	addq.l #4,sp
	UNUSEDALL
	drawFloor ();
   118b0:	jsr 17412 <drawFloor>
	return BR_CONTINUE;
   118b6:	moveq #2,d0
}
   118b8:	rts

000118ba <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   118ba:	          subq.l #4,sp
	KPrintF("running setZBuffer\n");
   118bc:	          pea 1b254 <talk.c.490538ff+0x702>
   118c2:	          jsr 183ec <KPrintF>
   118c8:	          addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   118ca:	          movea.l 12(sp),a0
   118ce:	          movea.l 24(a0),a0
   118d2:	          move.l (a0),d0
   118d4:	          moveq #5,d1
   118d6:	          cmp.l d0,d1
   118d8:	,-------- bne.s 1191c <builtIn_setZBuffer+0x62>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   118da:	|         movea.l 12(sp),a0
   118de:	|         move.l 24(a0),d0
   118e2:	|         move.l d0,-(sp)
   118e4:	|         pea 5 <_start+0x5>
   118e8:	|         move.l sp,d0
   118ea:	|         addq.l #8,d0
   118ec:	|         move.l d0,-(sp)
   118ee:	|         jsr 1590c <getValueType>
   118f4:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   118f8:	|         moveq #24,d0
   118fa:	|         add.l 12(sp),d0
   118fe:	|         move.l d0,-(sp)
   11900:	|         jsr 16290 <trimStack>
   11906:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   11908:	|         move.l (sp),d0
   1190a:	|         move.l d0,-(sp)
   1190c:	|         jsr 8f6c <setZBuffer>
   11912:	|         addq.l #4,sp
   11914:	|         tst.w d0
   11916:	|  ,----- bne.s 11932 <builtIn_setZBuffer+0x78>
   11918:	|  |      moveq #1,d0
   1191a:	|  |  ,-- bra.s 11934 <builtIn_setZBuffer+0x7a>
	} else {
		trimStack (&fun -> stack);
   1191c:	'--|--|-> moveq #24,d0
   1191e:	   |  |   add.l 12(sp),d0
   11922:	   |  |   move.l d0,-(sp)
   11924:	   |  |   jsr 16290 <trimStack>
   1192a:	   |  |   addq.l #4,sp
		killZBuffer ();
   1192c:	   |  |   jsr 8f06 <killZBuffer>
	}
	return BR_CONTINUE;
   11932:	   '--|-> moveq #2,d0
}
   11934:	      '-> addq.l #4,sp
   11936:	          rts

00011938 <builtIn_setLightMap>:

builtIn(setLightMap)
{
	KPrintF("running setLightMap\n");
   11938:	pea 1b268 <talk.c.490538ff+0x716>
   1193e:	jsr 183ec <KPrintF>
   11944:	addq.l #4,sp

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   11946:	pea 1b27d <talk.c.490538ff+0x72b>
   1194c:	jsr 183ec <KPrintF>
   11952:	addq.l #4,sp
	return BR_CONTINUE;
   11954:	moveq #2,d0
}
   11956:	rts

00011958 <builtIn_setSpeechMode>:
#pragma mark -
#pragma mark Objects

builtIn(setSpeechMode)
{
	KPrintF("running setSpeechMode\n");
   11958:	          pea 1b296 <talk.c.490538ff+0x744>
   1195e:	          jsr 183ec <KPrintF>
   11964:	          addq.l #4,sp
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11966:	          movea.l 8(sp),a0
   1196a:	          move.l 24(a0),d0
   1196e:	          move.l d0,-(sp)
   11970:	          pea 1 <_start+0x1>
   11974:	          pea 1c884 <speechMode>
   1197a:	          jsr 1590c <getValueType>
   11980:	          lea 12(sp),sp
   11984:	          tst.w d0
   11986:	      ,-- bne.s 1198c <builtIn_setSpeechMode+0x34>
   11988:	      |   moveq #1,d0
   1198a:	,-----|-- bra.s 119c4 <builtIn_setSpeechMode+0x6c>
	trimStack (&fun -> stack);
   1198c:	|     '-> moveq #24,d0
   1198e:	|         add.l 8(sp),d0
   11992:	|         move.l d0,-(sp)
   11994:	|         jsr 16290 <trimStack>
   1199a:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   1199c:	|         move.l 1c884 <speechMode>,d0
   119a2:	|     ,-- bmi.s 119b0 <builtIn_setSpeechMode+0x58>
   119a4:	|     |   move.l 1c884 <speechMode>,d0
   119aa:	|     |   moveq #2,d1
   119ac:	|     |   cmp.l d0,d1
   119ae:	|  ,--|-- bge.s 119c2 <builtIn_setSpeechMode+0x6a>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   119b0:	|  |  '-> pea 1b2ad <talk.c.490538ff+0x75b>
   119b6:	|  |      jsr 183ec <KPrintF>
   119bc:	|  |      addq.l #4,sp
		return BR_ERROR;
   119be:	|  |      moveq #1,d0
   119c0:	+--|----- bra.s 119c4 <builtIn_setSpeechMode+0x6c>
	}
	return BR_CONTINUE;
   119c2:	|  '----> moveq #2,d0
}
   119c4:	'-------> rts

000119c6 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   119c6:	       subq.l #4,sp
	KPrintF("running somethingSpeaking\n");
   119c8:	       pea 1b2eb <talk.c.490538ff+0x799>
   119ce:	       jsr 183ec <KPrintF>
   119d4:	       addq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   119d6:	       jsr 447e <isThereAnySpeechGoingOn>
   119dc:	       move.l d0,(sp)
	if (i == -1) {
   119de:	       moveq #-1,d0
   119e0:	       cmp.l (sp),d0
   119e2:	,----- bne.s 119fe <builtIn_somethingSpeaking+0x38>
		setVariable (&fun -> reg, SVT_INT, 0);
   119e4:	|      moveq #28,d0
   119e6:	|      add.l 12(sp),d0
   119ea:	|      clr.l -(sp)
   119ec:	|      pea 1 <_start+0x1>
   119f0:	|      move.l d0,-(sp)
   119f2:	|      jsr 161fe <setVariable>
   119f8:	|      lea 12(sp),sp
   119fc:	|  ,-- bra.s 11a16 <builtIn_somethingSpeaking+0x50>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   119fe:	'--|-> moveq #28,d0
   11a00:	   |   add.l 12(sp),d0
   11a04:	   |   move.l (sp),-(sp)
   11a06:	   |   pea 7 <_start+0x7>
   11a0a:	   |   move.l d0,-(sp)
   11a0c:	   |   jsr 161fe <setVariable>
   11a12:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11a16:	   '-> moveq #2,d0
}
   11a18:	       addq.l #4,sp
   11a1a:	       rts

00011a1c <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	KPrintF("running skipSpeech\n");
   11a1c:	pea 1b306 <talk.c.490538ff+0x7b4>
   11a22:	jsr 183ec <KPrintF>
   11a28:	addq.l #4,sp
	UNUSEDALL
	killSpeechTimers ();
   11a2a:	jsr 6fa6 <killSpeechTimers>
	return BR_CONTINUE;
   11a30:	moveq #2,d0
}
   11a32:	rts

00011a34 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	KPrintF("running getOverObject\n");
   11a34:	       pea 1b31a <talk.c.490538ff+0x7c8>
   11a3a:	       jsr 183ec <KPrintF>
   11a40:	       addq.l #4,sp
	UNUSEDALL
	if (overRegion)
   11a42:	       move.l 1c8ca <overRegion>,d0
   11a48:	,----- beq.s 11a72 <builtIn_getOverObject+0x3e>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   11a4a:	|      movea.l 1c8ca <overRegion>,a0
   11a50:	|      movea.l 28(a0),a0
   11a54:	|      move.l 4(a0),d1
   11a58:	|      moveq #28,d0
   11a5a:	|      add.l 8(sp),d0
   11a5e:	|      move.l d1,-(sp)
   11a60:	|      pea 7 <_start+0x7>
   11a64:	|      move.l d0,-(sp)
   11a66:	|      jsr 161fe <setVariable>
   11a6c:	|      lea 12(sp),sp
   11a70:	|  ,-- bra.s 11a8a <builtIn_getOverObject+0x56>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   11a72:	'--|-> moveq #28,d0
   11a74:	   |   add.l 8(sp),d0
   11a78:	   |   clr.l -(sp)
   11a7a:	   |   pea 1 <_start+0x1>
   11a7e:	   |   move.l d0,-(sp)
   11a80:	   |   jsr 161fe <setVariable>
   11a86:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   11a8a:	   '-> moveq #2,d0
}
   11a8c:	       rts

00011a8e <builtIn_rename>:

builtIn(rename)
{
   11a8e:	       lea -16(sp),sp
   11a92:	       move.l a6,-(sp)
	KPrintF("running rename\n");
   11a94:	       pea 1b331 <talk.c.490538ff+0x7df>
   11a9a:	       jsr 183ec <KPrintF>
   11aa0:	       addq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11aa2:	       movea.l 28(sp),a0
   11aa6:	       move.l 24(a0),d0
   11aaa:	       move.l d0,-(sp)
   11aac:	       jsr 15ee2 <getTextFromAnyVar>
   11ab2:	       addq.l #4,sp
   11ab4:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   11ab8:	   ,-- bne.s 11abe <builtIn_rename+0x30>
   11aba:	   |   moveq #1,d0
   11abc:	,--|-- bra.s 11b38 <builtIn_rename+0xaa>
	trimStack(&fun->stack);
   11abe:	|  '-> moveq #24,d0
   11ac0:	|      add.l 28(sp),d0
   11ac4:	|      move.l d0,-(sp)
   11ac6:	|      jsr 16290 <trimStack>
   11acc:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   11ace:	|      movea.l 28(sp),a0
   11ad2:	|      move.l 24(a0),d0
   11ad6:	|      move.l d0,-(sp)
   11ad8:	|      pea 7 <_start+0x7>
   11adc:	|      lea 12(sp),a0
   11ae0:	|      move.l a0,-(sp)
   11ae2:	|      jsr 1590c <getValueType>
   11ae8:	|      lea 12(sp),sp
   11aec:	|      tst.w d0
   11aee:	|  ,-- bne.s 11af4 <builtIn_rename+0x66>
   11af0:	|  |   moveq #1,d0
   11af2:	+--|-- bra.s 11b38 <builtIn_rename+0xaa>
	trimStack(&fun->stack);
   11af4:	|  '-> moveq #24,d0
   11af6:	|      add.l 28(sp),d0
   11afa:	|      move.l d0,-(sp)
   11afc:	|      jsr 16290 <trimStack>
   11b02:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   11b04:	|      move.l 4(sp),d0
   11b08:	|      move.l d0,-(sp)
   11b0a:	|      jsr de0a <findObjectType>
   11b10:	|      addq.l #4,sp
   11b12:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   11b16:	|      movea.l 12(sp),a0
   11b1a:	|      move.l (a0),8(sp)
   11b1e:	|      move.l 1c7ba <SysBase>,d0
   11b24:	|      movea.l d0,a6
   11b26:	|      movea.l 8(sp),a1
   11b2a:	|      jsr -690(a6)
	o->screenName = newText;
   11b2e:	|      movea.l 12(sp),a0
   11b32:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   11b36:	|      moveq #2,d0
}
   11b38:	'----> movea.l (sp)+,a6
   11b3a:	       lea 16(sp),sp
   11b3e:	       rts

00011b40 <builtIn_getObjectX>:

builtIn (getObjectX)
{
   11b40:	          lea -12(sp),sp
	KPrintF("running getObjectX\n");
   11b44:	          pea 1b341 <talk.c.490538ff+0x7ef>
   11b4a:	          jsr 183ec <KPrintF>
   11b50:	          addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11b52:	          movea.l 20(sp),a0
   11b56:	          move.l 24(a0),d0
   11b5a:	          move.l d0,-(sp)
   11b5c:	          pea 7 <_start+0x7>
   11b60:	          lea 8(sp),a0
   11b64:	          move.l a0,-(sp)
   11b66:	          jsr 1590c <getValueType>
   11b6c:	          lea 12(sp),sp
   11b70:	          tst.w d0
   11b72:	      ,-- bne.s 11b7a <builtIn_getObjectX+0x3a>
   11b74:	      |   moveq #1,d0
   11b76:	,-----|-- bra.w 11c16 <builtIn_getObjectX+0xd6>
	trimStack (&fun -> stack);
   11b7a:	|     '-> moveq #24,d0
   11b7c:	|         add.l 20(sp),d0
   11b80:	|         move.l d0,-(sp)
   11b82:	|         jsr 16290 <trimStack>
   11b88:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   11b8a:	|         move.l (sp),d0
   11b8c:	|         move.l d0,-(sp)
   11b8e:	|         jsr ae9c <findPerson>
   11b94:	|         addq.l #4,sp
   11b96:	|         move.l d0,8(sp)
	if (pers) {
   11b9a:	|     ,-- beq.s 11bc8 <builtIn_getObjectX+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   11b9c:	|     |   movea.l 8(sp),a0
   11ba0:	|     |   move.l (a0),d0
   11ba2:	|     |   move.l d0,-(sp)
   11ba4:	|     |   jsr 187b6 <__fixsfsi>
   11baa:	|     |   addq.l #4,sp
   11bac:	|     |   move.l d0,d1
   11bae:	|     |   moveq #28,d0
   11bb0:	|     |   add.l 20(sp),d0
   11bb4:	|     |   move.l d1,-(sp)
   11bb6:	|     |   pea 1 <_start+0x1>
   11bba:	|     |   move.l d0,-(sp)
   11bbc:	|     |   jsr 161fe <setVariable>
   11bc2:	|     |   lea 12(sp),sp
   11bc6:	|  ,--|-- bra.s 11c14 <builtIn_getObjectX+0xd4>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   11bc8:	|  |  '-> move.l (sp),d0
   11bca:	|  |      move.l d0,-(sp)
   11bcc:	|  |      jsr 16bce <getRegionForObject>
   11bd2:	|  |      addq.l #4,sp
   11bd4:	|  |      move.l d0,4(sp)
		if (la) {
   11bd8:	|  |  ,-- beq.s 11bfc <builtIn_getObjectX+0xbc>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   11bda:	|  |  |   movea.l 4(sp),a0
   11bde:	|  |  |   move.l 16(a0),d1
   11be2:	|  |  |   moveq #28,d0
   11be4:	|  |  |   add.l 20(sp),d0
   11be8:	|  |  |   move.l d1,-(sp)
   11bea:	|  |  |   pea 1 <_start+0x1>
   11bee:	|  |  |   move.l d0,-(sp)
   11bf0:	|  |  |   jsr 161fe <setVariable>
   11bf6:	|  |  |   lea 12(sp),sp
   11bfa:	|  +--|-- bra.s 11c14 <builtIn_getObjectX+0xd4>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   11bfc:	|  |  '-> moveq #28,d0
   11bfe:	|  |      add.l 20(sp),d0
   11c02:	|  |      clr.l -(sp)
   11c04:	|  |      pea 1 <_start+0x1>
   11c08:	|  |      move.l d0,-(sp)
   11c0a:	|  |      jsr 161fe <setVariable>
   11c10:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   11c14:	|  '----> moveq #2,d0
}
   11c16:	'-------> lea 12(sp),sp
   11c1a:	          rts

00011c1c <builtIn_getObjectY>:

builtIn (getObjectY)
{
   11c1c:	          lea -12(sp),sp
	KPrintF("running getObjectY\n");
   11c20:	          pea 1b355 <talk.c.490538ff+0x803>
   11c26:	          jsr 183ec <KPrintF>
   11c2c:	          addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11c2e:	          movea.l 20(sp),a0
   11c32:	          move.l 24(a0),d0
   11c36:	          move.l d0,-(sp)
   11c38:	          pea 7 <_start+0x7>
   11c3c:	          lea 8(sp),a0
   11c40:	          move.l a0,-(sp)
   11c42:	          jsr 1590c <getValueType>
   11c48:	          lea 12(sp),sp
   11c4c:	          tst.w d0
   11c4e:	      ,-- bne.s 11c56 <builtIn_getObjectY+0x3a>
   11c50:	      |   moveq #1,d0
   11c52:	,-----|-- bra.w 11cf4 <builtIn_getObjectY+0xd8>
	trimStack (&fun -> stack);
   11c56:	|     '-> moveq #24,d0
   11c58:	|         add.l 20(sp),d0
   11c5c:	|         move.l d0,-(sp)
   11c5e:	|         jsr 16290 <trimStack>
   11c64:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   11c66:	|         move.l (sp),d0
   11c68:	|         move.l d0,-(sp)
   11c6a:	|         jsr ae9c <findPerson>
   11c70:	|         addq.l #4,sp
   11c72:	|         move.l d0,8(sp)
	if (pers) {
   11c76:	|     ,-- beq.s 11ca6 <builtIn_getObjectY+0x8a>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   11c78:	|     |   movea.l 8(sp),a0
   11c7c:	|     |   move.l 4(a0),d0
   11c80:	|     |   move.l d0,-(sp)
   11c82:	|     |   jsr 187b6 <__fixsfsi>
   11c88:	|     |   addq.l #4,sp
   11c8a:	|     |   move.l d0,d1
   11c8c:	|     |   moveq #28,d0
   11c8e:	|     |   add.l 20(sp),d0
   11c92:	|     |   move.l d1,-(sp)
   11c94:	|     |   pea 1 <_start+0x1>
   11c98:	|     |   move.l d0,-(sp)
   11c9a:	|     |   jsr 161fe <setVariable>
   11ca0:	|     |   lea 12(sp),sp
   11ca4:	|  ,--|-- bra.s 11cf2 <builtIn_getObjectY+0xd6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   11ca6:	|  |  '-> move.l (sp),d0
   11ca8:	|  |      move.l d0,-(sp)
   11caa:	|  |      jsr 16bce <getRegionForObject>
   11cb0:	|  |      addq.l #4,sp
   11cb2:	|  |      move.l d0,4(sp)
		if (la) {
   11cb6:	|  |  ,-- beq.s 11cda <builtIn_getObjectY+0xbe>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   11cb8:	|  |  |   movea.l 4(sp),a0
   11cbc:	|  |  |   move.l 20(a0),d1
   11cc0:	|  |  |   moveq #28,d0
   11cc2:	|  |  |   add.l 20(sp),d0
   11cc6:	|  |  |   move.l d1,-(sp)
   11cc8:	|  |  |   pea 1 <_start+0x1>
   11ccc:	|  |  |   move.l d0,-(sp)
   11cce:	|  |  |   jsr 161fe <setVariable>
   11cd4:	|  |  |   lea 12(sp),sp
   11cd8:	|  +--|-- bra.s 11cf2 <builtIn_getObjectY+0xd6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   11cda:	|  |  '-> moveq #28,d0
   11cdc:	|  |      add.l 20(sp),d0
   11ce0:	|  |      clr.l -(sp)
   11ce2:	|  |      pea 1 <_start+0x1>
   11ce6:	|  |      move.l d0,-(sp)
   11ce8:	|  |      jsr 161fe <setVariable>
   11cee:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   11cf2:	|  '----> moveq #2,d0
}
   11cf4:	'-------> lea 12(sp),sp
   11cf8:	          rts

00011cfa <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   11cfa:	       lea -32(sp),sp
   11cfe:	       movem.l d2-d5,-(sp)
	KPrintF("running addScreenRegion\n");
   11d02:	       pea 1b369 <talk.c.490538ff+0x817>
   11d08:	       jsr 183ec <KPrintF>
   11d0e:	       addq.l #4,sp
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11d10:	       movea.l 56(sp),a0
   11d14:	       move.l 24(a0),d0
   11d18:	       move.l d0,-(sp)
   11d1a:	       pea 1 <_start+0x1>
   11d1e:	       lea 28(sp),a0
   11d22:	       move.l a0,-(sp)
   11d24:	       jsr 1590c <getValueType>
   11d2a:	       lea 12(sp),sp
   11d2e:	       tst.w d0
   11d30:	   ,-- bne.s 11d38 <builtIn_addScreenRegion+0x3e>
   11d32:	   |   moveq #1,d0
   11d34:	,--|-- bra.w 11f12 <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   11d38:	|  '-> moveq #24,d0
   11d3a:	|      add.l 56(sp),d0
   11d3e:	|      move.l d0,-(sp)
   11d40:	|      jsr 16290 <trimStack>
   11d46:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11d48:	|      movea.l 56(sp),a0
   11d4c:	|      move.l 24(a0),d0
   11d50:	|      move.l d0,-(sp)
   11d52:	|      pea 1 <_start+0x1>
   11d56:	|      moveq #48,d0
   11d58:	|      add.l sp,d0
   11d5a:	|      move.l d0,-(sp)
   11d5c:	|      jsr 1590c <getValueType>
   11d62:	|      lea 12(sp),sp
   11d66:	|      tst.w d0
   11d68:	|  ,-- bne.s 11d70 <builtIn_addScreenRegion+0x76>
   11d6a:	|  |   moveq #1,d0
   11d6c:	+--|-- bra.w 11f12 <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   11d70:	|  '-> moveq #24,d0
   11d72:	|      add.l 56(sp),d0
   11d76:	|      move.l d0,-(sp)
   11d78:	|      jsr 16290 <trimStack>
   11d7e:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11d80:	|      movea.l 56(sp),a0
   11d84:	|      move.l 24(a0),d0
   11d88:	|      move.l d0,-(sp)
   11d8a:	|      pea 1 <_start+0x1>
   11d8e:	|      moveq #52,d0
   11d90:	|      add.l sp,d0
   11d92:	|      move.l d0,-(sp)
   11d94:	|      jsr 1590c <getValueType>
   11d9a:	|      lea 12(sp),sp
   11d9e:	|      tst.w d0
   11da0:	|  ,-- bne.s 11da8 <builtIn_addScreenRegion+0xae>
   11da2:	|  |   moveq #1,d0
   11da4:	+--|-- bra.w 11f12 <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   11da8:	|  '-> moveq #24,d0
   11daa:	|      add.l 56(sp),d0
   11dae:	|      move.l d0,-(sp)
   11db0:	|      jsr 16290 <trimStack>
   11db6:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11db8:	|      movea.l 56(sp),a0
   11dbc:	|      move.l 24(a0),d0
   11dc0:	|      move.l d0,-(sp)
   11dc2:	|      pea 1 <_start+0x1>
   11dc6:	|      lea 32(sp),a0
   11dca:	|      move.l a0,-(sp)
   11dcc:	|      jsr 1590c <getValueType>
   11dd2:	|      lea 12(sp),sp
   11dd6:	|      tst.w d0
   11dd8:	|  ,-- bne.s 11de0 <builtIn_addScreenRegion+0xe6>
   11dda:	|  |   moveq #1,d0
   11ddc:	+--|-- bra.w 11f12 <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   11de0:	|  '-> moveq #24,d0
   11de2:	|      add.l 56(sp),d0
   11de6:	|      move.l d0,-(sp)
   11de8:	|      jsr 16290 <trimStack>
   11dee:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11df0:	|      movea.l 56(sp),a0
   11df4:	|      move.l 24(a0),d0
   11df8:	|      move.l d0,-(sp)
   11dfa:	|      pea 1 <_start+0x1>
   11dfe:	|      lea 36(sp),a0
   11e02:	|      move.l a0,-(sp)
   11e04:	|      jsr 1590c <getValueType>
   11e0a:	|      lea 12(sp),sp
   11e0e:	|      tst.w d0
   11e10:	|  ,-- bne.s 11e18 <builtIn_addScreenRegion+0x11e>
   11e12:	|  |   moveq #1,d0
   11e14:	+--|-- bra.w 11f12 <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   11e18:	|  '-> moveq #24,d0
   11e1a:	|      add.l 56(sp),d0
   11e1e:	|      move.l d0,-(sp)
   11e20:	|      jsr 16290 <trimStack>
   11e26:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11e28:	|      movea.l 56(sp),a0
   11e2c:	|      move.l 24(a0),d0
   11e30:	|      move.l d0,-(sp)
   11e32:	|      pea 1 <_start+0x1>
   11e36:	|      lea 40(sp),a0
   11e3a:	|      move.l a0,-(sp)
   11e3c:	|      jsr 1590c <getValueType>
   11e42:	|      lea 12(sp),sp
   11e46:	|      tst.w d0
   11e48:	|  ,-- bne.s 11e50 <builtIn_addScreenRegion+0x156>
   11e4a:	|  |   moveq #1,d0
   11e4c:	+--|-- bra.w 11f12 <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   11e50:	|  '-> moveq #24,d0
   11e52:	|      add.l 56(sp),d0
   11e56:	|      move.l d0,-(sp)
   11e58:	|      jsr 16290 <trimStack>
   11e5e:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11e60:	|      movea.l 56(sp),a0
   11e64:	|      move.l 24(a0),d0
   11e68:	|      move.l d0,-(sp)
   11e6a:	|      pea 1 <_start+0x1>
   11e6e:	|      lea 44(sp),a0
   11e72:	|      move.l a0,-(sp)
   11e74:	|      jsr 1590c <getValueType>
   11e7a:	|      lea 12(sp),sp
   11e7e:	|      tst.w d0
   11e80:	|  ,-- bne.s 11e88 <builtIn_addScreenRegion+0x18e>
   11e82:	|  |   moveq #1,d0
   11e84:	+--|-- bra.w 11f12 <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   11e88:	|  '-> moveq #24,d0
   11e8a:	|      add.l 56(sp),d0
   11e8e:	|      move.l d0,-(sp)
   11e90:	|      jsr 16290 <trimStack>
   11e96:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11e98:	|      movea.l 56(sp),a0
   11e9c:	|      move.l 24(a0),d0
   11ea0:	|      move.l d0,-(sp)
   11ea2:	|      pea 7 <_start+0x7>
   11ea6:	|      lea 24(sp),a0
   11eaa:	|      move.l a0,-(sp)
   11eac:	|      jsr 1590c <getValueType>
   11eb2:	|      lea 12(sp),sp
   11eb6:	|      tst.w d0
   11eb8:	|  ,-- bne.s 11ebe <builtIn_addScreenRegion+0x1c4>
   11eba:	|  |   moveq #1,d0
   11ebc:	+--|-- bra.s 11f12 <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   11ebe:	|  '-> moveq #24,d0
   11ec0:	|      add.l 56(sp),d0
   11ec4:	|      move.l d0,-(sp)
   11ec6:	|      jsr 16290 <trimStack>
   11ecc:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   11ece:	|      move.l 16(sp),d5
   11ed2:	|      move.l 20(sp),d4
   11ed6:	|      move.l 40(sp),d3
   11eda:	|      move.l 44(sp),d2
   11ede:	|      movea.l 24(sp),a1
   11ee2:	|      movea.l 28(sp),a0
   11ee6:	|      move.l 32(sp),d1
   11eea:	|      move.l 36(sp),d0
   11eee:	|      move.l d5,-(sp)
   11ef0:	|      move.l d4,-(sp)
   11ef2:	|      move.l d3,-(sp)
   11ef4:	|      move.l d2,-(sp)
   11ef6:	|      move.l a1,-(sp)
   11ef8:	|      move.l a0,-(sp)
   11efa:	|      move.l d1,-(sp)
   11efc:	|      move.l d0,-(sp)
   11efe:	|      jsr 16a88 <addScreenRegion>
   11f04:	|      lea 32(sp),sp
   11f08:	|      tst.w d0
   11f0a:	|  ,-- beq.s 11f10 <builtIn_addScreenRegion+0x216>
   11f0c:	|  |   moveq #2,d0
   11f0e:	+--|-- bra.s 11f12 <builtIn_addScreenRegion+0x218>
	return BR_ERROR;
   11f10:	|  '-> moveq #1,d0

}
   11f12:	'----> movem.l (sp)+,d2-d5
   11f16:	       lea 32(sp),sp
   11f1a:	       rts

00011f1c <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   11f1c:	       subq.l #4,sp
	KPrintF("running removeScreenRegion\n");
   11f1e:	       pea 1b382 <talk.c.490538ff+0x830>
   11f24:	       jsr 183ec <KPrintF>
   11f2a:	       addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11f2c:	       movea.l 12(sp),a0
   11f30:	       move.l 24(a0),d0
   11f34:	       move.l d0,-(sp)
   11f36:	       pea 7 <_start+0x7>
   11f3a:	       move.l sp,d0
   11f3c:	       addq.l #8,d0
   11f3e:	       move.l d0,-(sp)
   11f40:	       jsr 1590c <getValueType>
   11f46:	       lea 12(sp),sp
   11f4a:	       tst.w d0
   11f4c:	   ,-- bne.s 11f52 <builtIn_removeScreenRegion+0x36>
   11f4e:	   |   moveq #1,d0
   11f50:	,--|-- bra.s 11f70 <builtIn_removeScreenRegion+0x54>
	trimStack (&fun -> stack);
   11f52:	|  '-> moveq #24,d0
   11f54:	|      add.l 12(sp),d0
   11f58:	|      move.l d0,-(sp)
   11f5a:	|      jsr 16290 <trimStack>
   11f60:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   11f62:	|      move.l (sp),d0
   11f64:	|      move.l d0,-(sp)
   11f66:	|      jsr 16d76 <removeScreenRegion>
   11f6c:	|      addq.l #4,sp
	return BR_CONTINUE;
   11f6e:	|      moveq #2,d0
}
   11f70:	'----> addq.l #4,sp
   11f72:	       rts

00011f74 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	KPrintF("running showBoxes\n");
   11f74:	pea 1b39e <talk.c.490538ff+0x84c>
   11f7a:	jsr 183ec <KPrintF>
   11f80:	addq.l #4,sp
	UNUSEDALL
	showBoxes ();
   11f82:	jsr 16efa <showBoxes>
	return BR_CONTINUE;
   11f88:	moveq #2,d0
}
   11f8a:	rts

00011f8c <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	KPrintF("running removeAllScreenRegions\n");
   11f8c:	pea 1b3b1 <talk.c.490538ff+0x85f>
   11f92:	jsr 183ec <KPrintF>
   11f98:	addq.l #4,sp
	UNUSEDALL
	killAllRegions ();
   11f9a:	jsr 16bfc <killAllRegions>
	return BR_CONTINUE;
   11fa0:	moveq #2,d0
}
   11fa2:	rts

00011fa4 <builtIn_addCharacter>:

builtIn(addCharacter)
{
   11fa4:	       lea -16(sp),sp
	KPrintF("running addCharacter\n");
   11fa8:	       pea 1b3d1 <talk.c.490538ff+0x87f>
   11fae:	       jsr 183ec <KPrintF>
   11fb4:	       addq.l #4,sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   11fb6:	       movea.l 24(sp),a0
   11fba:	       move.l 24(a0),d0
   11fbe:	       move.l d0,-(sp)
   11fc0:	       jsr 155b8 <getCostumeFromVar>
   11fc6:	       addq.l #4,sp
   11fc8:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   11fcc:	   ,-- bne.s 11fd4 <builtIn_addCharacter+0x30>
   11fce:	   |   moveq #1,d0
   11fd0:	,--|-- bra.w 120b0 <builtIn_addCharacter+0x10c>

	trimStack (&fun -> stack);
   11fd4:	|  '-> moveq #24,d0
   11fd6:	|      add.l 24(sp),d0
   11fda:	|      move.l d0,-(sp)
   11fdc:	|      jsr 16290 <trimStack>
   11fe2:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11fe4:	|      movea.l 24(sp),a0
   11fe8:	|      move.l 24(a0),d0
   11fec:	|      move.l d0,-(sp)
   11fee:	|      pea 1 <_start+0x1>
   11ff2:	|      lea 12(sp),a0
   11ff6:	|      move.l a0,-(sp)
   11ff8:	|      jsr 1590c <getValueType>
   11ffe:	|      lea 12(sp),sp
   12002:	|      tst.w d0
   12004:	|  ,-- bne.s 1200c <builtIn_addCharacter+0x68>
   12006:	|  |   moveq #1,d0
   12008:	+--|-- bra.w 120b0 <builtIn_addCharacter+0x10c>
	trimStack (&fun -> stack);
   1200c:	|  '-> moveq #24,d0
   1200e:	|      add.l 24(sp),d0
   12012:	|      move.l d0,-(sp)
   12014:	|      jsr 16290 <trimStack>
   1201a:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1201c:	|      movea.l 24(sp),a0
   12020:	|      move.l 24(a0),d0
   12024:	|      move.l d0,-(sp)
   12026:	|      pea 1 <_start+0x1>
   1202a:	|      moveq #16,d0
   1202c:	|      add.l sp,d0
   1202e:	|      move.l d0,-(sp)
   12030:	|      jsr 1590c <getValueType>
   12036:	|      lea 12(sp),sp
   1203a:	|      tst.w d0
   1203c:	|  ,-- bne.s 12042 <builtIn_addCharacter+0x9e>
   1203e:	|  |   moveq #1,d0
   12040:	+--|-- bra.s 120b0 <builtIn_addCharacter+0x10c>
	trimStack (&fun -> stack);
   12042:	|  '-> moveq #24,d0
   12044:	|      add.l 24(sp),d0
   12048:	|      move.l d0,-(sp)
   1204a:	|      jsr 16290 <trimStack>
   12050:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12052:	|      movea.l 24(sp),a0
   12056:	|      move.l 24(a0),d0
   1205a:	|      move.l d0,-(sp)
   1205c:	|      pea 7 <_start+0x7>
   12060:	|      lea 8(sp),a0
   12064:	|      move.l a0,-(sp)
   12066:	|      jsr 1590c <getValueType>
   1206c:	|      lea 12(sp),sp
   12070:	|      tst.w d0
   12072:	|  ,-- bne.s 12078 <builtIn_addCharacter+0xd4>
   12074:	|  |   moveq #1,d0
   12076:	+--|-- bra.s 120b0 <builtIn_addCharacter+0x10c>
	trimStack (&fun -> stack);
   12078:	|  '-> moveq #24,d0
   1207a:	|      add.l 24(sp),d0
   1207e:	|      move.l d0,-(sp)
   12080:	|      jsr 16290 <trimStack>
   12086:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   12088:	|      movea.l (sp),a0
   1208a:	|      move.l 4(sp),d1
   1208e:	|      move.l 8(sp),d0
   12092:	|      move.l 12(sp),-(sp)
   12096:	|      move.l a0,-(sp)
   12098:	|      move.l d1,-(sp)
   1209a:	|      move.l d0,-(sp)
   1209c:	|      jsr 9a96 <addPerson>
   120a2:	|      lea 16(sp),sp
   120a6:	|      tst.w d0
   120a8:	|  ,-- beq.s 120ae <builtIn_addCharacter+0x10a>
   120aa:	|  |   moveq #2,d0
   120ac:	+--|-- bra.s 120b0 <builtIn_addCharacter+0x10c>
	return BR_ERROR;
   120ae:	|  '-> moveq #1,d0
}
   120b0:	'----> lea 16(sp),sp
   120b4:	       rts

000120b6 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   120b6:	       subq.l #4,sp
	KPrintF("running hideCharacter\n");
   120b8:	       pea 1b3e7 <talk.c.490538ff+0x895>
   120be:	       jsr 183ec <KPrintF>
   120c4:	       addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   120c6:	       movea.l 12(sp),a0
   120ca:	       move.l 24(a0),d0
   120ce:	       move.l d0,-(sp)
   120d0:	       pea 7 <_start+0x7>
   120d4:	       move.l sp,d0
   120d6:	       addq.l #8,d0
   120d8:	       move.l d0,-(sp)
   120da:	       jsr 1590c <getValueType>
   120e0:	       lea 12(sp),sp
   120e4:	       tst.w d0
   120e6:	   ,-- bne.s 120ec <builtIn_hideCharacter+0x36>
   120e8:	   |   moveq #1,d0
   120ea:	,--|-- bra.s 1210c <builtIn_hideCharacter+0x56>
	trimStack (&fun -> stack);
   120ec:	|  '-> moveq #24,d0
   120ee:	|      add.l 12(sp),d0
   120f2:	|      move.l d0,-(sp)
   120f4:	|      jsr 16290 <trimStack>
   120fa:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   120fc:	|      move.l (sp),d0
   120fe:	|      move.l d0,-(sp)
   12100:	|      clr.l -(sp)
   12102:	|      jsr c532 <setShown>
   12108:	|      addq.l #8,sp
	return BR_CONTINUE;
   1210a:	|      moveq #2,d0
}
   1210c:	'----> addq.l #4,sp
   1210e:	       rts

00012110 <builtIn_showCharacter>:

builtIn(showCharacter)
{
   12110:	       subq.l #4,sp
	KPrintF("running showCharacter\n");
   12112:	       pea 1b3fe <talk.c.490538ff+0x8ac>
   12118:	       jsr 183ec <KPrintF>
   1211e:	       addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12120:	       movea.l 12(sp),a0
   12124:	       move.l 24(a0),d0
   12128:	       move.l d0,-(sp)
   1212a:	       pea 7 <_start+0x7>
   1212e:	       move.l sp,d0
   12130:	       addq.l #8,d0
   12132:	       move.l d0,-(sp)
   12134:	       jsr 1590c <getValueType>
   1213a:	       lea 12(sp),sp
   1213e:	       tst.w d0
   12140:	   ,-- bne.s 12146 <builtIn_showCharacter+0x36>
   12142:	   |   moveq #1,d0
   12144:	,--|-- bra.s 12168 <builtIn_showCharacter+0x58>
	trimStack (&fun -> stack);
   12146:	|  '-> moveq #24,d0
   12148:	|      add.l 12(sp),d0
   1214c:	|      move.l d0,-(sp)
   1214e:	|      jsr 16290 <trimStack>
   12154:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   12156:	|      move.l (sp),d0
   12158:	|      move.l d0,-(sp)
   1215a:	|      pea 1 <_start+0x1>
   1215e:	|      jsr c532 <setShown>
   12164:	|      addq.l #8,sp
	return BR_CONTINUE;
   12166:	|      moveq #2,d0
}
   12168:	'----> addq.l #4,sp
   1216a:	       rts

0001216c <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	KPrintF("running removeAllCharacters\n");
   1216c:	pea 1b415 <talk.c.490538ff+0x8c3>
   12172:	jsr 183ec <KPrintF>
   12178:	addq.l #4,sp
	UNUSEDALL
	killSpeechTimers ();
   1217a:	jsr 6fa6 <killSpeechTimers>
	killMostPeople ();
   12180:	jsr b332 <killMostPeople>
	return BR_CONTINUE;
   12186:	moveq #2,d0
}
   12188:	rts

0001218a <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   1218a:	       subq.l #8,sp
	KPrintF("running setCharacterDrawMode\n");
   1218c:	       pea 1b432 <talk.c.490538ff+0x8e0>
   12192:	       jsr 183ec <KPrintF>
   12198:	       addq.l #4,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1219a:	       movea.l 16(sp),a0
   1219e:	       move.l 24(a0),d0
   121a2:	       move.l d0,-(sp)
   121a4:	       pea 1 <_start+0x1>
   121a8:	       move.l sp,d0
   121aa:	       addq.l #8,d0
   121ac:	       move.l d0,-(sp)
   121ae:	       jsr 1590c <getValueType>
   121b4:	       lea 12(sp),sp
   121b8:	       tst.w d0
   121ba:	   ,-- bne.s 121c0 <builtIn_setCharacterDrawMode+0x36>
   121bc:	   |   moveq #1,d0
   121be:	,--|-- bra.s 1221a <builtIn_setCharacterDrawMode+0x90>
	trimStack (&fun -> stack);
   121c0:	|  '-> moveq #24,d0
   121c2:	|      add.l 16(sp),d0
   121c6:	|      move.l d0,-(sp)
   121c8:	|      jsr 16290 <trimStack>
   121ce:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   121d0:	|      movea.l 16(sp),a0
   121d4:	|      move.l 24(a0),d0
   121d8:	|      move.l d0,-(sp)
   121da:	|      pea 7 <_start+0x7>
   121de:	|      moveq #12,d0
   121e0:	|      add.l sp,d0
   121e2:	|      move.l d0,-(sp)
   121e4:	|      jsr 1590c <getValueType>
   121ea:	|      lea 12(sp),sp
   121ee:	|      tst.w d0
   121f0:	|  ,-- bne.s 121f6 <builtIn_setCharacterDrawMode+0x6c>
   121f2:	|  |   moveq #1,d0
   121f4:	+--|-- bra.s 1221a <builtIn_setCharacterDrawMode+0x90>
	trimStack (&fun -> stack);
   121f6:	|  '-> moveq #24,d0
   121f8:	|      add.l 16(sp),d0
   121fc:	|      move.l d0,-(sp)
   121fe:	|      jsr 16290 <trimStack>
   12204:	|      addq.l #4,sp
	setDrawMode (di, obj);
   12206:	|      move.l 4(sp),d1
   1220a:	|      move.l (sp),d0
   1220c:	|      move.l d1,-(sp)
   1220e:	|      move.l d0,-(sp)
   12210:	|      jsr be70 <setDrawMode>
   12216:	|      addq.l #8,sp
	return BR_CONTINUE;
   12218:	|      moveq #2,d0
}
   1221a:	'----> addq.l #8,sp
   1221c:	       rts

0001221e <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	KPrintF("running setCharacterTransparency\n");
   1221e:	pea 1b450 <talk.c.490538ff+0x8fe>
   12224:	jsr 183ec <KPrintF>
   1222a:	addq.l #4,sp
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   1222c:	pea 1b472 <talk.c.490538ff+0x920>
   12232:	jsr 183ec <KPrintF>
   12238:	addq.l #4,sp
	return BR_CONTINUE;
   1223a:	moveq #2,d0
}
   1223c:	rts

0001223e <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	KPrintF("running setCharacterColourise\n");
   1223e:	pea 1b4a5 <talk.c.490538ff+0x953>
   12244:	jsr 183ec <KPrintF>
   1224a:	addq.l #4,sp
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   1224c:	pea 1b4c4 <talk.c.490538ff+0x972>
   12252:	jsr 183ec <KPrintF>
   12258:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   1225a:	moveq #2,d0
}
   1225c:	rts

0001225e <builtIn_setScale>:

builtIn(setScale)
{
   1225e:	       subq.l #8,sp
	KPrintF("running setScale\n");
   12260:	       pea 1b4fe <talk.c.490538ff+0x9ac>
   12266:	       jsr 183ec <KPrintF>
   1226c:	       addq.l #4,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1226e:	       movea.l 16(sp),a0
   12272:	       move.l 24(a0),d0
   12276:	       move.l d0,-(sp)
   12278:	       pea 1 <_start+0x1>
   1227c:	       move.l sp,d0
   1227e:	       addq.l #8,d0
   12280:	       move.l d0,-(sp)
   12282:	       jsr 1590c <getValueType>
   12288:	       lea 12(sp),sp
   1228c:	       tst.w d0
   1228e:	   ,-- bne.s 12294 <builtIn_setScale+0x36>
   12290:	   |   moveq #1,d0
   12292:	,--|-- bra.s 122f6 <builtIn_setScale+0x98>
	trimStack (&fun -> stack);
   12294:	|  '-> moveq #24,d0
   12296:	|      add.l 16(sp),d0
   1229a:	|      move.l d0,-(sp)
   1229c:	|      jsr 16290 <trimStack>
   122a2:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   122a4:	|      movea.l 16(sp),a0
   122a8:	|      move.l 24(a0),d0
   122ac:	|      move.l d0,-(sp)
   122ae:	|      pea 1 <_start+0x1>
   122b2:	|      moveq #12,d0
   122b4:	|      add.l sp,d0
   122b6:	|      move.l d0,-(sp)
   122b8:	|      jsr 1590c <getValueType>
   122be:	|      lea 12(sp),sp
   122c2:	|      tst.w d0
   122c4:	|  ,-- bne.s 122ca <builtIn_setScale+0x6c>
   122c6:	|  |   moveq #1,d0
   122c8:	+--|-- bra.s 122f6 <builtIn_setScale+0x98>
	trimStack (&fun -> stack);
   122ca:	|  '-> moveq #24,d0
   122cc:	|      add.l 16(sp),d0
   122d0:	|      move.l d0,-(sp)
   122d2:	|      jsr 16290 <trimStack>
   122d8:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   122da:	|      move.l (sp),d0
   122dc:	|      move.l d0,d0
   122de:	|      movea.w d0,a1
   122e0:	|      move.l 4(sp),d0
   122e4:	|      move.l d0,d0
   122e6:	|      movea.w d0,a0
   122e8:	|      move.l a1,-(sp)
   122ea:	|      move.l a0,-(sp)
   122ec:	|      jsr c50a <setScale>
   122f2:	|      addq.l #8,sp
	return BR_CONTINUE;
   122f4:	|      moveq #2,d0
}
   122f6:	'----> addq.l #8,sp
   122f8:	       rts

000122fa <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   122fa:	       subq.l #4,sp
	KPrintF("running stopCharacter\n");
   122fc:	       pea 1b510 <talk.c.490538ff+0x9be>
   12302:	       jsr 183ec <KPrintF>
   12308:	       addq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1230a:	       movea.l 12(sp),a0
   1230e:	       move.l 24(a0),d0
   12312:	       move.l d0,-(sp)
   12314:	       pea 7 <_start+0x7>
   12318:	       move.l sp,d0
   1231a:	       addq.l #8,d0
   1231c:	       move.l d0,-(sp)
   1231e:	       jsr 1590c <getValueType>
   12324:	       lea 12(sp),sp
   12328:	       tst.w d0
   1232a:	   ,-- bne.s 12330 <builtIn_stopCharacter+0x36>
   1232c:	   |   moveq #1,d0
   1232e:	,--|-- bra.s 12368 <builtIn_stopCharacter+0x6e>
	trimStack (&fun -> stack);
   12330:	|  '-> moveq #24,d0
   12332:	|      add.l 12(sp),d0
   12336:	|      move.l d0,-(sp)
   12338:	|      jsr 16290 <trimStack>
   1233e:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   12340:	|      move.l (sp),d0
   12342:	|      move.l d0,-(sp)
   12344:	|      jsr c63e <stopPerson>
   1234a:	|      addq.l #4,sp
   1234c:	|      movea.w d0,a0
   1234e:	|      moveq #28,d0
   12350:	|      add.l 12(sp),d0
   12354:	|      move.l a0,-(sp)
   12356:	|      pea 1 <_start+0x1>
   1235a:	|      move.l d0,-(sp)
   1235c:	|      jsr 161fe <setVariable>
   12362:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12366:	|      moveq #2,d0
}
   12368:	'----> addq.l #4,sp
   1236a:	       rts

0001236c <builtIn_pasteCharacter>:

builtIn(pasteCharacter)
{
	KPrintF("running pasteCharacter\n");
   1236c:	pea 1b527 <talk.c.490538ff+0x9d5>
   12372:	jsr 183ec <KPrintF>
   12378:	addq.l #4,sp
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   1237a:	pea 1b53f <talk.c.490538ff+0x9ed>
   12380:	jsr 183ec <KPrintF>
   12386:	addq.l #4,sp
	return BR_CONTINUE;
   12388:	moveq #2,d0
}
   1238a:	rts

0001238c <builtIn_animate>:

builtIn(animate)
{
   1238c:	       subq.l #8,sp
	KPrintF("running animate\n");
   1238e:	       pea 1b55d <talk.c.490538ff+0xa0b>
   12394:	       jsr 183ec <KPrintF>
   1239a:	       addq.l #4,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   1239c:	       movea.l 16(sp),a0
   123a0:	       move.l 24(a0),d0
   123a4:	       move.l d0,-(sp)
   123a6:	       jsr 15de4 <getAnimationFromVar>
   123ac:	       addq.l #4,sp
   123ae:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   123b2:	   ,-- bne.s 123b8 <builtIn_animate+0x2c>
   123b4:	   |   moveq #1,d0
   123b6:	,--|-- bra.s 12436 <builtIn_animate+0xaa>
	trimStack (&fun -> stack);
   123b8:	|  '-> moveq #24,d0
   123ba:	|      add.l 16(sp),d0
   123be:	|      move.l d0,-(sp)
   123c0:	|      jsr 16290 <trimStack>
   123c6:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   123c8:	|      movea.l 16(sp),a0
   123cc:	|      move.l 24(a0),d0
   123d0:	|      move.l d0,-(sp)
   123d2:	|      pea 7 <_start+0x7>
   123d6:	|      move.l sp,d0
   123d8:	|      addq.l #8,d0
   123da:	|      move.l d0,-(sp)
   123dc:	|      jsr 1590c <getValueType>
   123e2:	|      lea 12(sp),sp
   123e6:	|      tst.w d0
   123e8:	|  ,-- bne.s 123ee <builtIn_animate+0x62>
   123ea:	|  |   moveq #1,d0
   123ec:	+--|-- bra.s 12436 <builtIn_animate+0xaa>
	trimStack (&fun -> stack);
   123ee:	|  '-> moveq #24,d0
   123f0:	|      add.l 16(sp),d0
   123f4:	|      move.l d0,-(sp)
   123f6:	|      jsr 16290 <trimStack>
   123fc:	|      addq.l #4,sp
	animatePerson (obj, pp);
   123fe:	|      move.l (sp),d0
   12400:	|      move.l 4(sp),-(sp)
   12404:	|      move.l d0,-(sp)
   12406:	|      jsr 9d0c <animatePerson>
   1240c:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   1240e:	|      move.l 4(sp),-(sp)
   12412:	|      jsr c692 <timeForAnim>
   12418:	|      addq.l #4,sp
   1241a:	|      move.l d0,d1
   1241c:	|      moveq #28,d0
   1241e:	|      add.l 16(sp),d0
   12422:	|      move.l d1,-(sp)
   12424:	|      pea 1 <_start+0x1>
   12428:	|      move.l d0,-(sp)
   1242a:	|      jsr 161fe <setVariable>
   12430:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12434:	|      moveq #2,d0
}
   12436:	'----> addq.l #8,sp
   12438:	       rts

0001243a <builtIn_setCostume>:

builtIn(setCostume)
{
   1243a:	       subq.l #8,sp
	KPrintF("running setCostume\n");
   1243c:	       pea 1b56e <talk.c.490538ff+0xa1c>
   12442:	       jsr 183ec <KPrintF>
   12448:	       addq.l #4,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   1244a:	       movea.l 16(sp),a0
   1244e:	       move.l 24(a0),d0
   12452:	       move.l d0,-(sp)
   12454:	       jsr 155b8 <getCostumeFromVar>
   1245a:	       addq.l #4,sp
   1245c:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   12460:	   ,-- bne.s 12466 <builtIn_setCostume+0x2c>
   12462:	   |   moveq #1,d0
   12464:	,--|-- bra.s 124be <builtIn_setCostume+0x84>
	trimStack (&fun -> stack);
   12466:	|  '-> moveq #24,d0
   12468:	|      add.l 16(sp),d0
   1246c:	|      move.l d0,-(sp)
   1246e:	|      jsr 16290 <trimStack>
   12474:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12476:	|      movea.l 16(sp),a0
   1247a:	|      move.l 24(a0),d0
   1247e:	|      move.l d0,-(sp)
   12480:	|      pea 7 <_start+0x7>
   12484:	|      move.l sp,d0
   12486:	|      addq.l #8,d0
   12488:	|      move.l d0,-(sp)
   1248a:	|      jsr 1590c <getValueType>
   12490:	|      lea 12(sp),sp
   12494:	|      tst.w d0
   12496:	|  ,-- bne.s 1249c <builtIn_setCostume+0x62>
   12498:	|  |   moveq #1,d0
   1249a:	+--|-- bra.s 124be <builtIn_setCostume+0x84>
	trimStack (&fun -> stack);
   1249c:	|  '-> moveq #24,d0
   1249e:	|      add.l 16(sp),d0
   124a2:	|      move.l d0,-(sp)
   124a4:	|      jsr 16290 <trimStack>
   124aa:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   124ac:	|      move.l (sp),d0
   124ae:	|      move.l 4(sp),-(sp)
   124b2:	|      move.l d0,-(sp)
   124b4:	|      jsr 9d56 <animatePersonUsingPersona>
   124ba:	|      addq.l #8,sp
	return BR_CONTINUE;
   124bc:	|      moveq #2,d0
}
   124be:	'----> addq.l #8,sp
   124c0:	       rts

000124c2 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   124c2:	       subq.l #8,sp
	KPrintF("running floatCharacter\n");
   124c4:	       pea 1b582 <talk.c.490538ff+0xa30>
   124ca:	       jsr 183ec <KPrintF>
   124d0:	       addq.l #4,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   124d2:	       movea.l 16(sp),a0
   124d6:	       move.l 24(a0),d0
   124da:	       move.l d0,-(sp)
   124dc:	       pea 1 <_start+0x1>
   124e0:	       move.l sp,d0
   124e2:	       addq.l #8,d0
   124e4:	       move.l d0,-(sp)
   124e6:	       jsr 1590c <getValueType>
   124ec:	       lea 12(sp),sp
   124f0:	       tst.w d0
   124f2:	   ,-- bne.s 124f8 <builtIn_floatCharacter+0x36>
   124f4:	   |   moveq #1,d0
   124f6:	,--|-- bra.s 1256c <builtIn_floatCharacter+0xaa>
	trimStack (&fun -> stack);
   124f8:	|  '-> moveq #24,d0
   124fa:	|      add.l 16(sp),d0
   124fe:	|      move.l d0,-(sp)
   12500:	|      jsr 16290 <trimStack>
   12506:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12508:	|      movea.l 16(sp),a0
   1250c:	|      move.l 24(a0),d0
   12510:	|      move.l d0,-(sp)
   12512:	|      pea 7 <_start+0x7>
   12516:	|      moveq #12,d0
   12518:	|      add.l sp,d0
   1251a:	|      move.l d0,-(sp)
   1251c:	|      jsr 1590c <getValueType>
   12522:	|      lea 12(sp),sp
   12526:	|      tst.w d0
   12528:	|  ,-- bne.s 1252e <builtIn_floatCharacter+0x6c>
   1252a:	|  |   moveq #1,d0
   1252c:	+--|-- bra.s 1256c <builtIn_floatCharacter+0xaa>
	trimStack (&fun -> stack);
   1252e:	|  '-> moveq #24,d0
   12530:	|      add.l 16(sp),d0
   12534:	|      move.l d0,-(sp)
   12536:	|      jsr 16290 <trimStack>
   1253c:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   1253e:	|      move.l 4(sp),d1
   12542:	|      move.l (sp),d0
   12544:	|      move.l d1,-(sp)
   12546:	|      move.l d0,-(sp)
   12548:	|      jsr aee6 <floatCharacter>
   1254e:	|      addq.l #8,sp
   12550:	|      movea.w d0,a0
   12552:	|      moveq #28,d0
   12554:	|      add.l 16(sp),d0
   12558:	|      move.l a0,-(sp)
   1255a:	|      pea 1 <_start+0x1>
   1255e:	|      move.l d0,-(sp)
   12560:	|      jsr 161fe <setVariable>
   12566:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1256a:	|      moveq #2,d0
}
   1256c:	'----> addq.l #8,sp
   1256e:	       rts

00012570 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   12570:	       subq.l #8,sp
	KPrintF("running setCharacterWalkSpeed\n");
   12572:	       pea 1b59a <talk.c.490538ff+0xa48>
   12578:	       jsr 183ec <KPrintF>
   1257e:	       addq.l #4,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12580:	       movea.l 16(sp),a0
   12584:	       move.l 24(a0),d0
   12588:	       move.l d0,-(sp)
   1258a:	       pea 1 <_start+0x1>
   1258e:	       move.l sp,d0
   12590:	       addq.l #8,d0
   12592:	       move.l d0,-(sp)
   12594:	       jsr 1590c <getValueType>
   1259a:	       lea 12(sp),sp
   1259e:	       tst.w d0
   125a0:	   ,-- bne.s 125a6 <builtIn_setCharacterWalkSpeed+0x36>
   125a2:	   |   moveq #1,d0
   125a4:	,--|-- bra.s 1261a <builtIn_setCharacterWalkSpeed+0xaa>
	trimStack (&fun -> stack);
   125a6:	|  '-> moveq #24,d0
   125a8:	|      add.l 16(sp),d0
   125ac:	|      move.l d0,-(sp)
   125ae:	|      jsr 16290 <trimStack>
   125b4:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   125b6:	|      movea.l 16(sp),a0
   125ba:	|      move.l 24(a0),d0
   125be:	|      move.l d0,-(sp)
   125c0:	|      pea 7 <_start+0x7>
   125c4:	|      moveq #12,d0
   125c6:	|      add.l sp,d0
   125c8:	|      move.l d0,-(sp)
   125ca:	|      jsr 1590c <getValueType>
   125d0:	|      lea 12(sp),sp
   125d4:	|      tst.w d0
   125d6:	|  ,-- bne.s 125dc <builtIn_setCharacterWalkSpeed+0x6c>
   125d8:	|  |   moveq #1,d0
   125da:	+--|-- bra.s 1261a <builtIn_setCharacterWalkSpeed+0xaa>
	trimStack (&fun -> stack);
   125dc:	|  '-> moveq #24,d0
   125de:	|      add.l 16(sp),d0
   125e2:	|      move.l d0,-(sp)
   125e4:	|      jsr 16290 <trimStack>
   125ea:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   125ec:	|      move.l 4(sp),d1
   125f0:	|      move.l (sp),d0
   125f2:	|      move.l d1,-(sp)
   125f4:	|      move.l d0,-(sp)
   125f6:	|      jsr c4a6 <setCharacterWalkSpeed>
   125fc:	|      addq.l #8,sp
   125fe:	|      movea.w d0,a0
   12600:	|      moveq #28,d0
   12602:	|      add.l 16(sp),d0
   12606:	|      move.l a0,-(sp)
   12608:	|      pea 1 <_start+0x1>
   1260c:	|      move.l d0,-(sp)
   1260e:	|      jsr 161fe <setVariable>
   12614:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12618:	|      moveq #2,d0
}
   1261a:	'----> addq.l #8,sp
   1261c:	       rts

0001261e <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   1261e:	       subq.l #8,sp
	KPrintF("running turnCharacter\n");
   12620:	       pea 1b5b9 <talk.c.490538ff+0xa67>
   12626:	       jsr 183ec <KPrintF>
   1262c:	       addq.l #4,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1262e:	       movea.l 16(sp),a0
   12632:	       move.l 24(a0),d0
   12636:	       move.l d0,-(sp)
   12638:	       pea 1 <_start+0x1>
   1263c:	       move.l sp,d0
   1263e:	       addq.l #8,d0
   12640:	       move.l d0,-(sp)
   12642:	       jsr 1590c <getValueType>
   12648:	       lea 12(sp),sp
   1264c:	       tst.w d0
   1264e:	   ,-- bne.s 12654 <builtIn_turnCharacter+0x36>
   12650:	   |   moveq #1,d0
   12652:	,--|-- bra.s 126c8 <builtIn_turnCharacter+0xaa>
	trimStack (&fun -> stack);
   12654:	|  '-> moveq #24,d0
   12656:	|      add.l 16(sp),d0
   1265a:	|      move.l d0,-(sp)
   1265c:	|      jsr 16290 <trimStack>
   12662:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12664:	|      movea.l 16(sp),a0
   12668:	|      move.l 24(a0),d0
   1266c:	|      move.l d0,-(sp)
   1266e:	|      pea 7 <_start+0x7>
   12672:	|      moveq #12,d0
   12674:	|      add.l sp,d0
   12676:	|      move.l d0,-(sp)
   12678:	|      jsr 1590c <getValueType>
   1267e:	|      lea 12(sp),sp
   12682:	|      tst.w d0
   12684:	|  ,-- bne.s 1268a <builtIn_turnCharacter+0x6c>
   12686:	|  |   moveq #1,d0
   12688:	+--|-- bra.s 126c8 <builtIn_turnCharacter+0xaa>
	trimStack (&fun -> stack);
   1268a:	|  '-> moveq #24,d0
   1268c:	|      add.l 16(sp),d0
   12690:	|      move.l d0,-(sp)
   12692:	|      jsr 16290 <trimStack>
   12698:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   1269a:	|      move.l (sp),d1
   1269c:	|      move.l 4(sp),d0
   126a0:	|      move.l d1,-(sp)
   126a2:	|      move.l d0,-(sp)
   126a4:	|      jsr c74a <turnPersonToFace>
   126aa:	|      addq.l #8,sp
   126ac:	|      movea.w d0,a0
   126ae:	|      moveq #28,d0
   126b0:	|      add.l 16(sp),d0
   126b4:	|      move.l a0,-(sp)
   126b6:	|      pea 1 <_start+0x1>
   126ba:	|      move.l d0,-(sp)
   126bc:	|      jsr 161fe <setVariable>
   126c2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   126c6:	|      moveq #2,d0
}
   126c8:	'----> addq.l #8,sp
   126ca:	       rts

000126cc <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   126cc:	       subq.l #8,sp
	KPrintF("running setCharacterExtra\n");
   126ce:	       pea 1b5d0 <talk.c.490538ff+0xa7e>
   126d4:	       jsr 183ec <KPrintF>
   126da:	       addq.l #4,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   126dc:	       movea.l 16(sp),a0
   126e0:	       move.l 24(a0),d0
   126e4:	       move.l d0,-(sp)
   126e6:	       pea 1 <_start+0x1>
   126ea:	       move.l sp,d0
   126ec:	       addq.l #8,d0
   126ee:	       move.l d0,-(sp)
   126f0:	       jsr 1590c <getValueType>
   126f6:	       lea 12(sp),sp
   126fa:	       tst.w d0
   126fc:	   ,-- bne.s 12702 <builtIn_setCharacterExtra+0x36>
   126fe:	   |   moveq #1,d0
   12700:	,--|-- bra.s 12776 <builtIn_setCharacterExtra+0xaa>
	trimStack (&fun -> stack);
   12702:	|  '-> moveq #24,d0
   12704:	|      add.l 16(sp),d0
   12708:	|      move.l d0,-(sp)
   1270a:	|      jsr 16290 <trimStack>
   12710:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12712:	|      movea.l 16(sp),a0
   12716:	|      move.l 24(a0),d0
   1271a:	|      move.l d0,-(sp)
   1271c:	|      pea 7 <_start+0x7>
   12720:	|      moveq #12,d0
   12722:	|      add.l sp,d0
   12724:	|      move.l d0,-(sp)
   12726:	|      jsr 1590c <getValueType>
   1272c:	|      lea 12(sp),sp
   12730:	|      tst.w d0
   12732:	|  ,-- bne.s 12738 <builtIn_setCharacterExtra+0x6c>
   12734:	|  |   moveq #1,d0
   12736:	+--|-- bra.s 12776 <builtIn_setCharacterExtra+0xaa>
	trimStack (&fun -> stack);
   12738:	|  '-> moveq #24,d0
   1273a:	|      add.l 16(sp),d0
   1273e:	|      move.l d0,-(sp)
   12740:	|      jsr 16290 <trimStack>
   12746:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   12748:	|      move.l (sp),d1
   1274a:	|      move.l 4(sp),d0
   1274e:	|      move.l d1,-(sp)
   12750:	|      move.l d0,-(sp)
   12752:	|      jsr c4d4 <setPersonExtra>
   12758:	|      addq.l #8,sp
   1275a:	|      movea.w d0,a0
   1275c:	|      moveq #28,d0
   1275e:	|      add.l 16(sp),d0
   12762:	|      move.l a0,-(sp)
   12764:	|      pea 1 <_start+0x1>
   12768:	|      move.l d0,-(sp)
   1276a:	|      jsr 161fe <setVariable>
   12770:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12774:	|      moveq #2,d0
}
   12776:	'----> addq.l #8,sp
   12778:	       rts

0001277a <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   1277a:	       subq.l #4,sp
	KPrintF("running removeCharacter\n");
   1277c:	       pea 1b5eb <talk.c.490538ff+0xa99>
   12782:	       jsr 183ec <KPrintF>
   12788:	       addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1278a:	       movea.l 12(sp),a0
   1278e:	       move.l 24(a0),d0
   12792:	       move.l d0,-(sp)
   12794:	       pea 7 <_start+0x7>
   12798:	       move.l sp,d0
   1279a:	       addq.l #8,d0
   1279c:	       move.l d0,-(sp)
   1279e:	       jsr 1590c <getValueType>
   127a4:	       lea 12(sp),sp
   127a8:	       tst.w d0
   127aa:	   ,-- bne.s 127b0 <builtIn_removeCharacter+0x36>
   127ac:	   |   moveq #1,d0
   127ae:	,--|-- bra.s 127ce <builtIn_removeCharacter+0x54>
	trimStack (&fun -> stack);
   127b0:	|  '-> moveq #24,d0
   127b2:	|      add.l 12(sp),d0
   127b6:	|      move.l d0,-(sp)
   127b8:	|      jsr 16290 <trimStack>
   127be:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   127c0:	|      move.l (sp),d0
   127c2:	|      move.l d0,-(sp)
   127c4:	|      jsr b6d4 <removeOneCharacter>
   127ca:	|      addq.l #4,sp
	return BR_CONTINUE;
   127cc:	|      moveq #2,d0
}
   127ce:	'----> addq.l #4,sp
   127d0:	       rts

000127d2 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   127d2:	                lea -28(sp),sp
   127d6:	                move.l d2,-(sp)
   127d8:	                move.l 44(sp),d1
   127dc:	                move.l 48(sp),d0
   127e0:	                move.w d1,d1
   127e2:	                move.w d1,6(sp)
   127e6:	                move.w d0,d0
   127e8:	                move.w d0,4(sp)
	switch (numParams) {
   127ec:	                moveq #2,d0
   127ee:	                cmp.l 36(sp),d0
   127f2:	      ,-------- beq.w 12934 <moveChr+0x162>
   127f6:	      |         moveq #3,d0
   127f8:	      |         cmp.l 36(sp),d0
   127fc:	,-----|-------- bne.w 12a68 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12800:	|     |         movea.l 40(sp),a0
   12804:	|     |         move.l 24(a0),d0
   12808:	|     |         move.l d0,-(sp)
   1280a:	|     |         pea 1 <_start+0x1>
   1280e:	|     |         lea 20(sp),a0
   12812:	|     |         move.l a0,-(sp)
   12814:	|     |         jsr 1590c <getValueType>
   1281a:	|     |         lea 12(sp),sp
   1281e:	|     |         tst.w d0
   12820:	|     |     ,-- bne.s 12828 <moveChr+0x56>
   12822:	|     |     |   moveq #1,d0
   12824:	|  ,--|-----|-- bra.w 12a78 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   12828:	|  |  |     '-> moveq #24,d0
   1282a:	|  |  |         add.l 40(sp),d0
   1282e:	|  |  |         move.l d0,-(sp)
   12830:	|  |  |         jsr 16290 <trimStack>
   12836:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12838:	|  |  |         movea.l 40(sp),a0
   1283c:	|  |  |         move.l 24(a0),d0
   12840:	|  |  |         move.l d0,-(sp)
   12842:	|  |  |         pea 1 <_start+0x1>
   12846:	|  |  |         lea 24(sp),a0
   1284a:	|  |  |         move.l a0,-(sp)
   1284c:	|  |  |         jsr 1590c <getValueType>
   12852:	|  |  |         lea 12(sp),sp
   12856:	|  |  |         tst.w d0
   12858:	|  |  |     ,-- bne.s 12860 <moveChr+0x8e>
   1285a:	|  |  |     |   moveq #1,d0
   1285c:	|  +--|-----|-- bra.w 12a78 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   12860:	|  |  |     '-> moveq #24,d0
   12862:	|  |  |         add.l 40(sp),d0
   12866:	|  |  |         move.l d0,-(sp)
   12868:	|  |  |         jsr 16290 <trimStack>
   1286e:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12870:	|  |  |         movea.l 40(sp),a0
   12874:	|  |  |         move.l 24(a0),d0
   12878:	|  |  |         move.l d0,-(sp)
   1287a:	|  |  |         pea 7 <_start+0x7>
   1287e:	|  |  |         lea 16(sp),a0
   12882:	|  |  |         move.l a0,-(sp)
   12884:	|  |  |         jsr 1590c <getValueType>
   1288a:	|  |  |         lea 12(sp),sp
   1288e:	|  |  |         tst.w d0
   12890:	|  |  |     ,-- bne.s 12898 <moveChr+0xc6>
   12892:	|  |  |     |   moveq #1,d0
   12894:	|  +--|-----|-- bra.w 12a78 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   12898:	|  |  |     '-> moveq #24,d0
   1289a:	|  |  |         add.l 40(sp),d0
   1289e:	|  |  |         move.l d0,-(sp)
   128a0:	|  |  |         jsr 16290 <trimStack>
   128a6:	|  |  |         addq.l #4,sp

			if (force) {
   128a8:	|  |  |         tst.w 6(sp)
   128ac:	|  |  |     ,-- beq.s 128dc <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   128ae:	|  |  |     |   movea.l 8(sp),a0
   128b2:	|  |  |     |   move.l 12(sp),d1
   128b6:	|  |  |     |   move.l 16(sp),d0
   128ba:	|  |  |     |   pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb36a8>
   128be:	|  |  |     |   move.l 44(sp),-(sp)
   128c2:	|  |  |     |   move.l a0,-(sp)
   128c4:	|  |  |     |   move.l d1,-(sp)
   128c6:	|  |  |     |   move.l d0,-(sp)
   128c8:	|  |  |     |   jsr af0a <forceWalkingPerson>
   128ce:	|  |  |     |   lea 20(sp),sp
   128d2:	|  |  |     |   tst.w d0
   128d4:	|  |  |  ,--|-- beq.s 1292e <moveChr+0x15c>
   128d6:	|  |  |  |  |   moveq #3,d0
   128d8:	|  +--|--|--|-- bra.w 12a78 <moveChr+0x2a6>
			} else if (immediate) {
   128dc:	|  |  |  |  '-> tst.w 4(sp)
   128e0:	|  |  |  |  ,-- beq.s 12900 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   128e2:	|  |  |  |  |   movea.l 8(sp),a0
   128e6:	|  |  |  |  |   move.l 12(sp),d1
   128ea:	|  |  |  |  |   move.l 16(sp),d0
   128ee:	|  |  |  |  |   move.l a0,-(sp)
   128f0:	|  |  |  |  |   move.l d1,-(sp)
   128f2:	|  |  |  |  |   move.l d0,-(sp)
   128f4:	|  |  |  |  |   jsr b220 <jumpPerson>
   128fa:	|  |  |  |  |   lea 12(sp),sp
   128fe:	|  |  |  +--|-- bra.s 1292e <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   12900:	|  |  |  |  '-> movea.l 8(sp),a0
   12904:	|  |  |  |      move.l 12(sp),d1
   12908:	|  |  |  |      move.l 16(sp),d0
   1290c:	|  |  |  |      pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb36a8>
   12910:	|  |  |  |      move.l 44(sp),-(sp)
   12914:	|  |  |  |      move.l a0,-(sp)
   12916:	|  |  |  |      move.l d1,-(sp)
   12918:	|  |  |  |      move.l d0,-(sp)
   1291a:	|  |  |  |      jsr b3f0 <makeWalkingPerson>
   12920:	|  |  |  |      lea 20(sp),sp
   12924:	|  |  |  |      tst.w d0
   12926:	|  |  |  +----- beq.s 1292e <moveChr+0x15c>
   12928:	|  |  |  |      moveq #3,d0
   1292a:	|  +--|--|----- bra.w 12a78 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   1292e:	|  |  |  '----> moveq #2,d0
   12930:	|  +--|-------- bra.w 12a78 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12934:	|  |  '-------> movea.l 40(sp),a0
   12938:	|  |            move.l 24(a0),d0
   1293c:	|  |            move.l d0,-(sp)
   1293e:	|  |            pea 7 <_start+0x7>
   12942:	|  |            moveq #32,d0
   12944:	|  |            add.l sp,d0
   12946:	|  |            move.l d0,-(sp)
   12948:	|  |            jsr 1590c <getValueType>
   1294e:	|  |            lea 12(sp),sp
   12952:	|  |            tst.w d0
   12954:	|  |        ,-- bne.s 1295c <moveChr+0x18a>
   12956:	|  |        |   moveq #1,d0
   12958:	|  +--------|-- bra.w 12a78 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   1295c:	|  |        '-> moveq #24,d0
   1295e:	|  |            add.l 40(sp),d0
   12962:	|  |            move.l d0,-(sp)
   12964:	|  |            jsr 16290 <trimStack>
   1296a:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1296c:	|  |            movea.l 40(sp),a0
   12970:	|  |            move.l 24(a0),d0
   12974:	|  |            move.l d0,-(sp)
   12976:	|  |            pea 7 <_start+0x7>
   1297a:	|  |            lea 28(sp),a0
   1297e:	|  |            move.l a0,-(sp)
   12980:	|  |            jsr 1590c <getValueType>
   12986:	|  |            lea 12(sp),sp
   1298a:	|  |            tst.w d0
   1298c:	|  |        ,-- bne.s 12994 <moveChr+0x1c2>
   1298e:	|  |        |   moveq #1,d0
   12990:	|  +--------|-- bra.w 12a78 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   12994:	|  |        '-> moveq #24,d0
   12996:	|  |            add.l 40(sp),d0
   1299a:	|  |            move.l d0,-(sp)
   1299c:	|  |            jsr 16290 <trimStack>
   129a2:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   129a4:	|  |            move.l 24(sp),d0
   129a8:	|  |            move.l d0,-(sp)
   129aa:	|  |            jsr 16bce <getRegionForObject>
   129b0:	|  |            addq.l #4,sp
   129b2:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   129b6:	|  |        ,-- bne.s 129be <moveChr+0x1ec>
   129b8:	|  |        |   moveq #2,d0
   129ba:	|  +--------|-- bra.w 12a78 <moveChr+0x2a6>

			if (force)
   129be:	|  |        '-> tst.w 6(sp)
   129c2:	|  |        ,-- beq.s 129fe <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   129c4:	|  |        |   movea.l 28(sp),a0
   129c8:	|  |        |   move.l 24(a0),d2
   129cc:	|  |        |   movea.l 20(sp),a1
   129d0:	|  |        |   movea.l 28(sp),a0
   129d4:	|  |        |   move.l 20(a0),d1
   129d8:	|  |        |   movea.l 28(sp),a0
   129dc:	|  |        |   move.l 16(a0),d0
   129e0:	|  |        |   move.l d2,-(sp)
   129e2:	|  |        |   move.l 44(sp),-(sp)
   129e6:	|  |        |   move.l a1,-(sp)
   129e8:	|  |        |   move.l d1,-(sp)
   129ea:	|  |        |   move.l d0,-(sp)
   129ec:	|  |        |   jsr af0a <forceWalkingPerson>
   129f2:	|  |        |   lea 20(sp),sp
   129f6:	|  |        |   tst.w d0
   129f8:	|  |     ,--|-- beq.s 12a64 <moveChr+0x292>
   129fa:	|  |     |  |   moveq #3,d0
   129fc:	|  +-----|--|-- bra.s 12a78 <moveChr+0x2a6>
			}
			else if (immediate)
   129fe:	|  |     |  '-> tst.w 4(sp)
   12a02:	|  |     |  ,-- beq.s 12a2a <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   12a04:	|  |     |  |   movea.l 20(sp),a1
   12a08:	|  |     |  |   movea.l 28(sp),a0
   12a0c:	|  |     |  |   move.l 20(a0),d1
   12a10:	|  |     |  |   movea.l 28(sp),a0
   12a14:	|  |     |  |   move.l 16(a0),d0
   12a18:	|  |     |  |   move.l a1,-(sp)
   12a1a:	|  |     |  |   move.l d1,-(sp)
   12a1c:	|  |     |  |   move.l d0,-(sp)
   12a1e:	|  |     |  |   jsr b220 <jumpPerson>
   12a24:	|  |     |  |   lea 12(sp),sp
   12a28:	|  |     +--|-- bra.s 12a64 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   12a2a:	|  |     |  '-> movea.l 28(sp),a0
   12a2e:	|  |     |      move.l 24(a0),d2
   12a32:	|  |     |      movea.l 20(sp),a1
   12a36:	|  |     |      movea.l 28(sp),a0
   12a3a:	|  |     |      move.l 20(a0),d1
   12a3e:	|  |     |      movea.l 28(sp),a0
   12a42:	|  |     |      move.l 16(a0),d0
   12a46:	|  |     |      move.l d2,-(sp)
   12a48:	|  |     |      move.l 44(sp),-(sp)
   12a4c:	|  |     |      move.l a1,-(sp)
   12a4e:	|  |     |      move.l d1,-(sp)
   12a50:	|  |     |      move.l d0,-(sp)
   12a52:	|  |     |      jsr b3f0 <makeWalkingPerson>
   12a58:	|  |     |      lea 20(sp),sp
   12a5c:	|  |     |      tst.w d0
   12a5e:	|  |     +----- beq.s 12a64 <moveChr+0x292>
   12a60:	|  |     |      moveq #3,d0
   12a62:	|  +-----|----- bra.s 12a78 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   12a64:	|  |     '----> moveq #2,d0
   12a66:	|  +----------- bra.s 12a78 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   12a68:	'--|----------> pea 1b604 <talk.c.490538ff+0xab2>
   12a6e:	   |            jsr 183ec <KPrintF>
   12a74:	   |            addq.l #4,sp
			return BR_ERROR;
   12a76:	   |            moveq #1,d0
	}
}
   12a78:	   '----------> move.l (sp)+,d2
   12a7a:	                lea 28(sp),sp
   12a7e:	                rts

00012a80 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	KPrintF("running moveCharacter\n");
   12a80:	pea 1b63a <talk.c.490538ff+0xae8>
   12a86:	jsr 183ec <KPrintF>
   12a8c:	addq.l #4,sp
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   12a8e:	clr.l -(sp)
   12a90:	clr.l -(sp)
   12a92:	move.l 16(sp),-(sp)
   12a96:	move.l 16(sp),-(sp)
   12a9a:	jsr 127d2 <moveChr>
   12aa0:	lea 16(sp),sp
}
   12aa4:	rts

00012aa6 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	KPrintF("running forceCharacter\n");
   12aa6:	pea 1b651 <talk.c.490538ff+0xaff>
   12aac:	jsr 183ec <KPrintF>
   12ab2:	addq.l #4,sp
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   12ab4:	clr.l -(sp)
   12ab6:	pea 1 <_start+0x1>
   12aba:	move.l 16(sp),-(sp)
   12abe:	move.l 16(sp),-(sp)
   12ac2:	jsr 127d2 <moveChr>
   12ac8:	lea 16(sp),sp
}
   12acc:	rts

00012ace <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	KPrintF("running jumpCharacter\n");
   12ace:	pea 1b669 <talk.c.490538ff+0xb17>
   12ad4:	jsr 183ec <KPrintF>
   12ada:	addq.l #4,sp
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   12adc:	pea 1 <_start+0x1>
   12ae0:	clr.l -(sp)
   12ae2:	move.l 16(sp),-(sp)
   12ae6:	move.l 16(sp),-(sp)
   12aea:	jsr 127d2 <moveChr>
   12af0:	lea 16(sp),sp
}
   12af4:	rts

00012af6 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	KPrintF("running clearStatus\n");
   12af6:	pea 1b680 <talk.c.490538ff+0xb2e>
   12afc:	jsr 183ec <KPrintF>
   12b02:	addq.l #4,sp
	UNUSEDALL
	clearStatusBar ();
   12b04:	jsr 8a5a <clearStatusBar>
	return BR_CONTINUE;
   12b0a:	moveq #2,d0
}
   12b0c:	rts

00012b0e <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	KPrintF("running removeLastStatus\n");
   12b0e:	pea 1b695 <talk.c.490538ff+0xb43>
   12b14:	jsr 183ec <KPrintF>
   12b1a:	addq.l #4,sp
	UNUSEDALL
	killLastStatus ();
   12b1c:	jsr 8b02 <killLastStatus>
	return BR_CONTINUE;
   12b22:	moveq #2,d0
}
   12b24:	rts

00012b26 <builtIn_addStatus>:

builtIn(addStatus)
{
	KPrintF("running addStatus\n");
   12b26:	pea 1b6af <talk.c.490538ff+0xb5d>
   12b2c:	jsr 183ec <KPrintF>
   12b32:	addq.l #4,sp
	UNUSEDALL
	addStatusBar ();
   12b34:	jsr 89f0 <addStatusBar>
	return BR_CONTINUE;
   12b3a:	moveq #2,d0
}
   12b3c:	rts

00012b3e <builtIn_statusText>:

builtIn(statusText)
{
   12b3e:	       subq.l #8,sp
   12b40:	       move.l a6,-(sp)
	KPrintF("running statusText\n");
   12b42:	       pea 1b6c2 <talk.c.490538ff+0xb70>
   12b48:	       jsr 183ec <KPrintF>
   12b4e:	       addq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   12b50:	       movea.l 20(sp),a0
   12b54:	       move.l 24(a0),d0
   12b58:	       move.l d0,-(sp)
   12b5a:	       jsr 15ee2 <getTextFromAnyVar>
   12b60:	       addq.l #4,sp
   12b62:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   12b66:	   ,-- bne.s 12b6c <builtIn_statusText+0x2e>
   12b68:	   |   moveq #1,d0
   12b6a:	,--|-- bra.s 12ba0 <builtIn_statusText+0x62>
	trimStack(&fun->stack);
   12b6c:	|  '-> moveq #24,d0
   12b6e:	|      add.l 20(sp),d0
   12b72:	|      move.l d0,-(sp)
   12b74:	|      jsr 16290 <trimStack>
   12b7a:	|      addq.l #4,sp
	setStatusBar(newText);
   12b7c:	|      move.l 8(sp),-(sp)
   12b80:	|      jsr 8d82 <setStatusBar>
   12b86:	|      addq.l #4,sp
	FreeVec(newText);
   12b88:	|      move.l 8(sp),4(sp)
   12b8e:	|      move.l 1c7ba <SysBase>,d0
   12b94:	|      movea.l d0,a6
   12b96:	|      movea.l 4(sp),a1
   12b9a:	|      jsr -690(a6)
	return BR_CONTINUE;
   12b9e:	|      moveq #2,d0
}
   12ba0:	'----> movea.l (sp)+,a6
   12ba2:	       addq.l #8,sp
   12ba4:	       rts

00012ba6 <builtIn_lightStatus>:

builtIn(lightStatus)
{
   12ba6:	       subq.l #4,sp
	KPrintF("running lightStatus\n");
   12ba8:	       pea 1b6d6 <talk.c.490538ff+0xb84>
   12bae:	       jsr 183ec <KPrintF>
   12bb4:	       addq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12bb6:	       movea.l 12(sp),a0
   12bba:	       move.l 24(a0),d0
   12bbe:	       move.l d0,-(sp)
   12bc0:	       pea 1 <_start+0x1>
   12bc4:	       move.l sp,d0
   12bc6:	       addq.l #8,d0
   12bc8:	       move.l d0,-(sp)
   12bca:	       jsr 1590c <getValueType>
   12bd0:	       lea 12(sp),sp
   12bd4:	       tst.w d0
   12bd6:	   ,-- bne.s 12bdc <builtIn_lightStatus+0x36>
   12bd8:	   |   moveq #1,d0
   12bda:	,--|-- bra.s 12bfa <builtIn_lightStatus+0x54>
	trimStack (&fun -> stack);
   12bdc:	|  '-> moveq #24,d0
   12bde:	|      add.l 12(sp),d0
   12be2:	|      move.l d0,-(sp)
   12be4:	|      jsr 16290 <trimStack>
   12bea:	|      addq.l #4,sp
	setLitStatus (val);
   12bec:	|      move.l (sp),d0
   12bee:	|      move.l d0,-(sp)
   12bf0:	|      jsr 8d72 <setLitStatus>
   12bf6:	|      addq.l #4,sp
	return BR_CONTINUE;
   12bf8:	|      moveq #2,d0
}
   12bfa:	'----> addq.l #4,sp
   12bfc:	       rts

00012bfe <builtIn_positionStatus>:

builtIn(positionStatus)
{
   12bfe:	       subq.l #8,sp
	KPrintF("running positionStatus\n");
   12c00:	       pea 1b6eb <talk.c.490538ff+0xb99>
   12c06:	       jsr 183ec <KPrintF>
   12c0c:	       addq.l #4,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12c0e:	       movea.l 16(sp),a0
   12c12:	       move.l 24(a0),d0
   12c16:	       move.l d0,-(sp)
   12c18:	       pea 1 <_start+0x1>
   12c1c:	       move.l sp,d0
   12c1e:	       addq.l #8,d0
   12c20:	       move.l d0,-(sp)
   12c22:	       jsr 1590c <getValueType>
   12c28:	       lea 12(sp),sp
   12c2c:	       tst.w d0
   12c2e:	   ,-- bne.s 12c34 <builtIn_positionStatus+0x36>
   12c30:	   |   moveq #1,d0
   12c32:	,--|-- bra.s 12c8e <builtIn_positionStatus+0x90>
	trimStack (&fun -> stack);
   12c34:	|  '-> moveq #24,d0
   12c36:	|      add.l 16(sp),d0
   12c3a:	|      move.l d0,-(sp)
   12c3c:	|      jsr 16290 <trimStack>
   12c42:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12c44:	|      movea.l 16(sp),a0
   12c48:	|      move.l 24(a0),d0
   12c4c:	|      move.l d0,-(sp)
   12c4e:	|      pea 1 <_start+0x1>
   12c52:	|      moveq #12,d0
   12c54:	|      add.l sp,d0
   12c56:	|      move.l d0,-(sp)
   12c58:	|      jsr 1590c <getValueType>
   12c5e:	|      lea 12(sp),sp
   12c62:	|      tst.w d0
   12c64:	|  ,-- bne.s 12c6a <builtIn_positionStatus+0x6c>
   12c66:	|  |   moveq #1,d0
   12c68:	+--|-- bra.s 12c8e <builtIn_positionStatus+0x90>
	trimStack (&fun -> stack);
   12c6a:	|  '-> moveq #24,d0
   12c6c:	|      add.l 16(sp),d0
   12c70:	|      move.l d0,-(sp)
   12c72:	|      jsr 16290 <trimStack>
   12c78:	|      addq.l #4,sp
	positionStatus (x, y);
   12c7a:	|      move.l (sp),d1
   12c7c:	|      move.l 4(sp),d0
   12c80:	|      move.l d1,-(sp)
   12c82:	|      move.l d0,-(sp)
   12c84:	|      jsr 8b64 <positionStatus>
   12c8a:	|      addq.l #8,sp
	return BR_CONTINUE;
   12c8c:	|      moveq #2,d0
}
   12c8e:	'----> addq.l #8,sp
   12c90:	       rts

00012c92 <builtIn_alignStatus>:

builtIn(alignStatus)
{
   12c92:	       subq.l #4,sp
	KPrintF("running alignStatus\n");
   12c94:	       pea 1b703 <talk.c.490538ff+0xbb1>
   12c9a:	       jsr 183ec <KPrintF>
   12ca0:	       addq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12ca2:	       movea.l 12(sp),a0
   12ca6:	       move.l 24(a0),d0
   12caa:	       move.l d0,-(sp)
   12cac:	       pea 1 <_start+0x1>
   12cb0:	       move.l sp,d0
   12cb2:	       addq.l #8,d0
   12cb4:	       move.l d0,-(sp)
   12cb6:	       jsr 1590c <getValueType>
   12cbc:	       lea 12(sp),sp
   12cc0:	       tst.w d0
   12cc2:	   ,-- bne.s 12cc8 <builtIn_alignStatus+0x36>
   12cc4:	   |   moveq #1,d0
   12cc6:	,--|-- bra.s 12ce8 <builtIn_alignStatus+0x56>
	trimStack (&fun -> stack);
   12cc8:	|  '-> moveq #24,d0
   12cca:	|      add.l 12(sp),d0
   12cce:	|      move.l d0,-(sp)
   12cd0:	|      jsr 16290 <trimStack>
   12cd6:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   12cd8:	|      move.l (sp),d0
   12cda:	|      movea.l 1c12e <nowStatus>,a0
   12ce0:	|      move.l d0,d0
   12ce2:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   12ce6:	|      moveq #2,d0
}
   12ce8:	'----> addq.l #4,sp
   12cea:	       rts

00012cec <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   12cec:	             tst.l 4(sp)
   12cf0:	         ,-- beq.s 12cfc <getFuncNumForCallback+0x10>
   12cf2:	         |   moveq #1,d0
   12cf4:	         |   cmp.l 4(sp),d0
   12cf8:	      ,--|-- beq.s 12d04 <getFuncNumForCallback+0x18>
   12cfa:	   ,--|--|-- bra.s 12d3a <getFuncNumForCallback+0x4e>
		case 0:
			*functionNum = 0;
   12cfc:	   |  |  '-> movea.l 12(sp),a0
   12d00:	   |  |      clr.l (a0)
			break;
   12d02:	,--|--|----- bra.s 12d4c <getFuncNumForCallback+0x60>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   12d04:	|  |  '----> movea.l 8(sp),a0
   12d08:	|  |         move.l 24(a0),d0
   12d0c:	|  |         move.l d0,-(sp)
   12d0e:	|  |         pea 2 <_start+0x2>
   12d12:	|  |         move.l 20(sp),-(sp)
   12d16:	|  |         jsr 1590c <getValueType>
   12d1c:	|  |         lea 12(sp),sp
   12d20:	|  |         tst.w d0
   12d22:	|  |     ,-- bne.s 12d28 <getFuncNumForCallback+0x3c>
   12d24:	|  |     |   clr.w d0
   12d26:	|  |  ,--|-- bra.s 12d4e <getFuncNumForCallback+0x62>
			trimStack (&fun -> stack);
   12d28:	|  |  |  '-> moveq #24,d0
   12d2a:	|  |  |      add.l 8(sp),d0
   12d2e:	|  |  |      move.l d0,-(sp)
   12d30:	|  |  |      jsr 16290 <trimStack>
   12d36:	|  |  |      addq.l #4,sp
			break;
   12d38:	+--|--|----- bra.s 12d4c <getFuncNumForCallback+0x60>

		default:
			KPrintF ("Too many parameters.");
   12d3a:	|  '--|----> pea 1b718 <talk.c.490538ff+0xbc6>
   12d40:	|     |      jsr 183ec <KPrintF>
   12d46:	|     |      addq.l #4,sp
			return FALSE;
   12d48:	|     |      clr.w d0
   12d4a:	|     +----- bra.s 12d4e <getFuncNumForCallback+0x62>
	}
	return TRUE;
   12d4c:	'-----|----> moveq #1,d0
}
   12d4e:	      '----> rts

00012d50 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   12d50:	       subq.l #4,sp
	KPrintF("running onLeftMouse\n");
   12d52:	       pea 1b72d <talk.c.490538ff+0xbdb>
   12d58:	       jsr 183ec <KPrintF>
   12d5e:	       addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12d60:	       move.l sp,d0
   12d62:	       move.l d0,-(sp)
   12d64:	       move.l 16(sp),-(sp)
   12d68:	       move.l 16(sp),-(sp)
   12d6c:	       jsr 12cec <getFuncNumForCallback>
   12d72:	       lea 12(sp),sp
   12d76:	       tst.w d0
   12d78:	,----- beq.s 12d88 <builtIn_onLeftMouse+0x38>
	{
		currentEvents -> leftMouseFunction = functionNum;
   12d7a:	|      movea.l 1c120 <currentEvents>,a0
   12d80:	|      move.l (sp),d0
   12d82:	|      move.l d0,(a0)
		return BR_CONTINUE;
   12d84:	|      moveq #2,d0
   12d86:	|  ,-- bra.s 12d8a <builtIn_onLeftMouse+0x3a>
	}
	return BR_ERROR;
   12d88:	'--|-> moveq #1,d0
}
   12d8a:	   '-> addq.l #4,sp
   12d8c:	       rts

00012d8e <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   12d8e:	       subq.l #4,sp
	KPrintF("running onLeftMouseUp\n");
   12d90:	       pea 1b742 <talk.c.490538ff+0xbf0>
   12d96:	       jsr 183ec <KPrintF>
   12d9c:	       addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12d9e:	       move.l sp,d0
   12da0:	       move.l d0,-(sp)
   12da2:	       move.l 16(sp),-(sp)
   12da6:	       move.l 16(sp),-(sp)
   12daa:	       jsr 12cec <getFuncNumForCallback>
   12db0:	       lea 12(sp),sp
   12db4:	       tst.w d0
   12db6:	,----- beq.s 12dc8 <builtIn_onLeftMouseUp+0x3a>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   12db8:	|      movea.l 1c120 <currentEvents>,a0
   12dbe:	|      move.l (sp),d0
   12dc0:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   12dc4:	|      moveq #2,d0
   12dc6:	|  ,-- bra.s 12dca <builtIn_onLeftMouseUp+0x3c>
	}
	return BR_ERROR;
   12dc8:	'--|-> moveq #1,d0
}
   12dca:	   '-> addq.l #4,sp
   12dcc:	       rts

00012dce <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   12dce:	       subq.l #4,sp
	KPrintF("running onRightMouse\n");
   12dd0:	       pea 1b759 <talk.c.490538ff+0xc07>
   12dd6:	       jsr 183ec <KPrintF>
   12ddc:	       addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12dde:	       move.l sp,d0
   12de0:	       move.l d0,-(sp)
   12de2:	       move.l 16(sp),-(sp)
   12de6:	       move.l 16(sp),-(sp)
   12dea:	       jsr 12cec <getFuncNumForCallback>
   12df0:	       lea 12(sp),sp
   12df4:	       tst.w d0
   12df6:	,----- beq.s 12e08 <builtIn_onRightMouse+0x3a>
	{
		currentEvents -> rightMouseFunction = functionNum;
   12df8:	|      movea.l 1c120 <currentEvents>,a0
   12dfe:	|      move.l (sp),d0
   12e00:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   12e04:	|      moveq #2,d0
   12e06:	|  ,-- bra.s 12e0a <builtIn_onRightMouse+0x3c>
	}
	return BR_ERROR;
   12e08:	'--|-> moveq #1,d0
}
   12e0a:	   '-> addq.l #4,sp
   12e0c:	       rts

00012e0e <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   12e0e:	       subq.l #4,sp
	KPrintF("running onRightMouseUp\n");
   12e10:	       pea 1b76f <talk.c.490538ff+0xc1d>
   12e16:	       jsr 183ec <KPrintF>
   12e1c:	       addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12e1e:	       move.l sp,d0
   12e20:	       move.l d0,-(sp)
   12e22:	       move.l 16(sp),-(sp)
   12e26:	       move.l 16(sp),-(sp)
   12e2a:	       jsr 12cec <getFuncNumForCallback>
   12e30:	       lea 12(sp),sp
   12e34:	       tst.w d0
   12e36:	,----- beq.s 12e48 <builtIn_onRightMouseUp+0x3a>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   12e38:	|      movea.l 1c120 <currentEvents>,a0
   12e3e:	|      move.l (sp),d0
   12e40:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   12e44:	|      moveq #2,d0
   12e46:	|  ,-- bra.s 12e4a <builtIn_onRightMouseUp+0x3c>
	}
	return BR_ERROR;
   12e48:	'--|-> moveq #1,d0
}
   12e4a:	   '-> addq.l #4,sp
   12e4c:	       rts

00012e4e <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   12e4e:	          subq.l #8,sp
   12e50:	          move.l a2,-(sp)
	KPrintF("running onFocusChange\n");
   12e52:	          pea 1b787 <talk.c.490538ff+0xc35>
   12e58:	          jsr 183ec <KPrintF>
   12e5e:	          addq.l #4,sp
	UNUSEDALL
	int functionNum;	

	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12e60:	          move.l sp,d0
   12e62:	          addq.l #4,d0
   12e64:	          move.l d0,-(sp)
   12e66:	          move.l 24(sp),-(sp)
   12e6a:	          move.l 24(sp),-(sp)
   12e6e:	          jsr 12cec <getFuncNumForCallback>
   12e74:	          lea 12(sp),sp
   12e78:	          tst.w d0
   12e7a:	,-------- beq.s 12ed8 <builtIn_onFocusChange+0x8a>
	{
		struct loadedFunction *oldfunc = currentEvents -> focusFunction;
   12e7c:	|         movea.l 1c120 <currentEvents>,a0
   12e82:	|         move.l 20(a0),8(sp)
		if( functionNum != NULL) 
   12e88:	|         move.l 4(sp),d0
   12e8c:	|  ,----- beq.s 12ea8 <builtIn_onFocusChange+0x5a>
			currentEvents -> focusFunction = preloadNewFunctionNum(functionNum);		
   12e8e:	|  |      move.l 4(sp),d0
   12e92:	|  |      movea.l 1c120 <currentEvents>,a2
   12e98:	|  |      move.l d0,-(sp)
   12e9a:	|  |      jsr 791c <preloadNewFunctionNum>
   12ea0:	|  |      addq.l #4,sp
   12ea2:	|  |      move.l d0,20(a2)
   12ea6:	|  |  ,-- bra.s 12eb2 <builtIn_onFocusChange+0x64>
		else
			currentEvents -> focusFunction = NULL;
   12ea8:	|  '--|-> movea.l 1c120 <currentEvents>,a0
   12eae:	|     |   clr.l 20(a0)

		if( oldfunc != NULL && oldfunc != currentEvents -> focusFunction )
   12eb2:	|     '-> tst.l 8(sp)
   12eb6:	|     ,-- beq.s 12ed4 <builtIn_onFocusChange+0x86>
   12eb8:	|     |   movea.l 1c120 <currentEvents>,a0
   12ebe:	|     |   move.l 20(a0),d0
   12ec2:	|     |   cmp.l 8(sp),d0
   12ec6:	|     +-- beq.s 12ed4 <builtIn_onFocusChange+0x86>
		{
			unloadFunction(oldfunc);
   12ec8:	|     |   move.l 8(sp),-(sp)
   12ecc:	|     |   jsr 7cf2 <unloadFunction>
   12ed2:	|     |   addq.l #4,sp
		}
		

		return BR_CONTINUE;
   12ed4:	|     '-> moveq #2,d0
   12ed6:	|     ,-- bra.s 12eda <builtIn_onFocusChange+0x8c>
	}
	return BR_ERROR;
   12ed8:	'-----|-> moveq #1,d0
}
   12eda:	      '-> movea.l (sp)+,a2
   12edc:	          addq.l #8,sp
   12ede:	          rts

00012ee0 <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   12ee0:	       subq.l #4,sp
	KPrintF("running onMoveMouse\n");
   12ee2:	       pea 1b79e <talk.c.490538ff+0xc4c>
   12ee8:	       jsr 183ec <KPrintF>
   12eee:	       addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12ef0:	       move.l sp,d0
   12ef2:	       move.l d0,-(sp)
   12ef4:	       move.l 16(sp),-(sp)
   12ef8:	       move.l 16(sp),-(sp)
   12efc:	       jsr 12cec <getFuncNumForCallback>
   12f02:	       lea 12(sp),sp
   12f06:	       tst.w d0
   12f08:	,----- beq.s 12f1a <builtIn_onMoveMouse+0x3a>
	{
		currentEvents -> moveMouseFunction = functionNum;
   12f0a:	|      movea.l 1c120 <currentEvents>,a0
   12f10:	|      move.l (sp),d0
   12f12:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   12f16:	|      moveq #2,d0
   12f18:	|  ,-- bra.s 12f1c <builtIn_onMoveMouse+0x3c>
	}
	return BR_ERROR;
   12f1a:	'--|-> moveq #1,d0
}
   12f1c:	   '-> addq.l #4,sp
   12f1e:	       rts

00012f20 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   12f20:	       subq.l #4,sp
	KPrintF("running onKeyboard\n");
   12f22:	       pea 1b7b3 <talk.c.490538ff+0xc61>
   12f28:	       jsr 183ec <KPrintF>
   12f2e:	       addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12f30:	       move.l sp,d0
   12f32:	       move.l d0,-(sp)
   12f34:	       move.l 16(sp),-(sp)
   12f38:	       move.l 16(sp),-(sp)
   12f3c:	       jsr 12cec <getFuncNumForCallback>
   12f42:	       lea 12(sp),sp
   12f46:	       tst.w d0
   12f48:	,----- beq.s 12f5a <builtIn_onKeyboard+0x3a>
	{
		currentEvents -> spaceFunction = functionNum;
   12f4a:	|      movea.l 1c120 <currentEvents>,a0
   12f50:	|      move.l (sp),d0
   12f52:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   12f56:	|      moveq #2,d0
   12f58:	|  ,-- bra.s 12f5c <builtIn_onKeyboard+0x3c>
	}
	return BR_ERROR;
   12f5a:	'--|-> moveq #1,d0
}
   12f5c:	   '-> addq.l #4,sp
   12f5e:	       rts

00012f60 <builtIn_spawnSub>:

builtIn (spawnSub)
{
   12f60:	          subq.l #4,sp
	KPrintF("running spawnSub\n");
   12f62:	          pea 1b7c7 <talk.c.490538ff+0xc75>
   12f68:	          jsr 183ec <KPrintF>
   12f6e:	          addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12f70:	          move.l sp,d0
   12f72:	          move.l d0,-(sp)
   12f74:	          move.l 16(sp),-(sp)
   12f78:	          move.l 16(sp),-(sp)
   12f7c:	          jsr 12cec <getFuncNumForCallback>
   12f82:	          lea 12(sp),sp
   12f86:	          tst.w d0
   12f88:	,-------- beq.s 12fb4 <builtIn_spawnSub+0x54>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   12f8a:	|         move.l 1c78a <noStack>,d1
   12f90:	|         move.l (sp),d0
   12f92:	|         pea 1 <_start+0x1>
   12f96:	|         move.l d1,-(sp)
   12f98:	|         clr.l -(sp)
   12f9a:	|         clr.l -(sp)
   12f9c:	|         move.l d0,-(sp)
   12f9e:	|         jsr 7ca6 <startNewFunctionNum>
   12fa4:	|         lea 20(sp),sp
   12fa8:	|         tst.l d0
   12faa:	|     ,-- bne.s 12fb0 <builtIn_spawnSub+0x50>
   12fac:	|     |   moveq #1,d0
   12fae:	|  ,--|-- bra.s 12fb6 <builtIn_spawnSub+0x56>
		return BR_CONTINUE;
   12fb0:	|  |  '-> moveq #2,d0
   12fb2:	|  +----- bra.s 12fb6 <builtIn_spawnSub+0x56>
	}
	return BR_ERROR;
   12fb4:	'--|----> moveq #1,d0
}
   12fb6:	   '----> addq.l #4,sp
   12fb8:	          rts

00012fba <builtIn_cancelSub>:

builtIn (cancelSub)
{
   12fba:	          subq.l #8,sp
	KPrintF("running cancelSub\n");
   12fbc:	          pea 1b7d9 <talk.c.490538ff+0xc87>
   12fc2:	          jsr 183ec <KPrintF>
   12fc8:	          addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12fca:	          move.l sp,d0
   12fcc:	          addq.l #4,d0
   12fce:	          move.l d0,-(sp)
   12fd0:	          move.l 20(sp),-(sp)
   12fd4:	          move.l 20(sp),-(sp)
   12fd8:	          jsr 12cec <getFuncNumForCallback>
   12fde:	          lea 12(sp),sp
   12fe2:	          tst.w d0
   12fe4:	,-------- beq.s 1301a <builtIn_cancelSub+0x60>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   12fe6:	|         move.l 4(sp),d1
   12fea:	|         move.l sp,d0
   12fec:	|         addq.l #2,d0
   12fee:	|         move.l d0,-(sp)
   12ff0:	|         move.l 20(sp),-(sp)
   12ff4:	|         move.l d1,-(sp)
   12ff6:	|         jsr 5606 <cancelAFunction>
   12ffc:	|         lea 12(sp),sp
		if (killedMyself) {
   13000:	|         move.w 2(sp),d0
   13004:	|  ,----- beq.s 13016 <builtIn_cancelSub+0x5c>
			abortFunction (fun);
   13006:	|  |      move.l 16(sp),-(sp)
   1300a:	|  |      jsr 5526 <abortFunction>
   13010:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   13012:	|  |      moveq #5,d0
   13014:	|  |  ,-- bra.s 1301c <builtIn_cancelSub+0x62>
		}
		return BR_CONTINUE;
   13016:	|  '--|-> moveq #2,d0
   13018:	|     +-- bra.s 1301c <builtIn_cancelSub+0x62>
	}
	return BR_ERROR;
   1301a:	'-----|-> moveq #1,d0
}
   1301c:	      '-> addq.l #8,sp
   1301e:	          rts

00013020 <builtIn_stringWidth>:

builtIn(stringWidth)
{
   13020:	       subq.l #8,sp
   13022:	       move.l a6,-(sp)
	KPrintF("running stringWidth\n");
   13024:	       pea 1b7ec <talk.c.490538ff+0xc9a>
   1302a:	       jsr 183ec <KPrintF>
   13030:	       addq.l #4,sp
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   13032:	       movea.l 20(sp),a0
   13036:	       move.l 24(a0),d0
   1303a:	       move.l d0,-(sp)
   1303c:	       jsr 15ee2 <getTextFromAnyVar>
   13042:	       addq.l #4,sp
   13044:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   13048:	   ,-- bne.s 1304e <builtIn_stringWidth+0x2e>
   1304a:	   |   moveq #1,d0
   1304c:	,--|-- bra.s 1309c <builtIn_stringWidth+0x7c>
	trimStack(&fun->stack);
   1304e:	|  '-> moveq #24,d0
   13050:	|      add.l 20(sp),d0
   13054:	|      move.l d0,-(sp)
   13056:	|      jsr 16290 <trimStack>
   1305c:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   1305e:	|      move.l 8(sp),-(sp)
   13062:	|      jsr 169f6 <stringWidth>
   13068:	|      addq.l #4,sp
   1306a:	|      move.l d0,d1
   1306c:	|      moveq #28,d0
   1306e:	|      add.l 20(sp),d0
   13072:	|      move.l d1,-(sp)
   13074:	|      pea 1 <_start+0x1>
   13078:	|      move.l d0,-(sp)
   1307a:	|      jsr 161fe <setVariable>
   13080:	|      lea 12(sp),sp
	FreeVec(theText);
   13084:	|      move.l 8(sp),4(sp)
   1308a:	|      move.l 1c7ba <SysBase>,d0
   13090:	|      movea.l d0,a6
   13092:	|      movea.l 4(sp),a1
   13096:	|      jsr -690(a6)
	return BR_CONTINUE;
   1309a:	|      moveq #2,d0
}
   1309c:	'----> movea.l (sp)+,a6
   1309e:	       addq.l #8,sp
   130a0:	       rts

000130a2 <builtIn_hardScroll>:

builtIn(hardScroll)
{
   130a2:	       subq.l #4,sp
	KPrintF("running hardScroll\n");
   130a4:	       pea 1b801 <talk.c.490538ff+0xcaf>
   130aa:	       jsr 183ec <KPrintF>
   130b0:	       addq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   130b2:	       movea.l 12(sp),a0
   130b6:	       move.l 24(a0),d0
   130ba:	       move.l d0,-(sp)
   130bc:	       pea 1 <_start+0x1>
   130c0:	       move.l sp,d0
   130c2:	       addq.l #8,d0
   130c4:	       move.l d0,-(sp)
   130c6:	       jsr 1590c <getValueType>
   130cc:	       lea 12(sp),sp
   130d0:	       tst.w d0
   130d2:	   ,-- bne.s 130d8 <builtIn_hardScroll+0x36>
   130d4:	   |   moveq #1,d0
   130d6:	,--|-- bra.s 130f6 <builtIn_hardScroll+0x54>
	trimStack (&fun -> stack);
   130d8:	|  '-> moveq #24,d0
   130da:	|      add.l 12(sp),d0
   130de:	|      move.l d0,-(sp)
   130e0:	|      jsr 16290 <trimStack>
   130e6:	|      addq.l #4,sp
	hardScroll (v);
   130e8:	|      move.l (sp),d0
   130ea:	|      move.l d0,-(sp)
   130ec:	|      jsr db5c <hardScroll>
   130f2:	|      addq.l #4,sp
	return BR_CONTINUE;
   130f4:	|      moveq #2,d0
}
   130f6:	'----> addq.l #4,sp
   130f8:	       rts

000130fa <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   130fa:	       subq.l #4,sp
	KPrintF("running isScreenRegion\n");
   130fc:	       pea 1b815 <talk.c.490538ff+0xcc3>
   13102:	       jsr 183ec <KPrintF>
   13108:	       addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1310a:	       movea.l 12(sp),a0
   1310e:	       move.l 24(a0),d0
   13112:	       move.l d0,-(sp)
   13114:	       pea 7 <_start+0x7>
   13118:	       move.l sp,d0
   1311a:	       addq.l #8,d0
   1311c:	       move.l d0,-(sp)
   1311e:	       jsr 1590c <getValueType>
   13124:	       lea 12(sp),sp
   13128:	       tst.w d0
   1312a:	   ,-- bne.s 13130 <builtIn_isScreenRegion+0x36>
   1312c:	   |   moveq #1,d0
   1312e:	,--|-- bra.s 13170 <builtIn_isScreenRegion+0x76>
	trimStack (&fun -> stack);
   13130:	|  '-> moveq #24,d0
   13132:	|      add.l 12(sp),d0
   13136:	|      move.l d0,-(sp)
   13138:	|      jsr 16290 <trimStack>
   1313e:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   13140:	|      move.l (sp),d0
   13142:	|      move.l d0,-(sp)
   13144:	|      jsr 16bce <getRegionForObject>
   1314a:	|      addq.l #4,sp
   1314c:	|      tst.l d0
   1314e:	|      sne d0
   13150:	|      neg.b d0
   13152:	|      moveq #0,d1
   13154:	|      move.b d0,d1
   13156:	|      moveq #28,d0
   13158:	|      add.l 12(sp),d0
   1315c:	|      move.l d1,-(sp)
   1315e:	|      pea 1 <_start+0x1>
   13162:	|      move.l d0,-(sp)
   13164:	|      jsr 161fe <setVariable>
   1316a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1316e:	|      moveq #2,d0
}
   13170:	'----> addq.l #4,sp
   13172:	       rts

00013174 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   13174:	       subq.l #4,sp
	KPrintF("running setSpeechSpeed\n");
   13176:	       pea 1b82d <talk.c.490538ff+0xcdb>
   1317c:	       jsr 183ec <KPrintF>
   13182:	       addq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13184:	       movea.l 12(sp),a0
   13188:	       move.l 24(a0),d0
   1318c:	       move.l d0,-(sp)
   1318e:	       pea 1 <_start+0x1>
   13192:	       move.l sp,d0
   13194:	       addq.l #8,d0
   13196:	       move.l d0,-(sp)
   13198:	       jsr 1590c <getValueType>
   1319e:	       lea 12(sp),sp
   131a2:	       tst.w d0
   131a4:	   ,-- bne.s 131aa <builtIn_setSpeechSpeed+0x36>
   131a6:	   |   moveq #1,d0
   131a8:	,--|-- bra.s 131f8 <builtIn_setSpeechSpeed+0x84>
	trimStack (&fun -> stack);
   131aa:	|  '-> moveq #24,d0
   131ac:	|      add.l 12(sp),d0
   131b0:	|      move.l d0,-(sp)
   131b2:	|      jsr 16290 <trimStack>
   131b8:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   131ba:	|      move.l (sp),d0
   131bc:	|      move.l d0,-(sp)
   131be:	|      jsr 1881e <__floatsisf>
   131c4:	|      addq.l #4,sp
   131c6:	|      move.l #1008981770,-(sp)
   131cc:	|      move.l d0,-(sp)
   131ce:	|      jsr 188d0 <__mulsf3>
   131d4:	|      addq.l #8,sp
   131d6:	|      move.l d0,1c11a <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   131dc:	|      moveq #28,d0
   131de:	|      add.l 12(sp),d0
   131e2:	|      pea 1 <_start+0x1>
   131e6:	|      pea 1 <_start+0x1>
   131ea:	|      move.l d0,-(sp)
   131ec:	|      jsr 161fe <setVariable>
   131f2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   131f6:	|      moveq #2,d0
}
   131f8:	'----> addq.l #4,sp
   131fa:	       rts

000131fc <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   131fc:	       subq.l #4,sp
	KPrintF("running setFontSpacing\n");
   131fe:	       pea 1b845 <talk.c.490538ff+0xcf3>
   13204:	       jsr 183ec <KPrintF>
   1320a:	       addq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1320c:	       movea.l 12(sp),a0
   13210:	       move.l 24(a0),d0
   13214:	       move.l d0,-(sp)
   13216:	       pea 1 <_start+0x1>
   1321a:	       move.l sp,d0
   1321c:	       addq.l #8,d0
   1321e:	       move.l d0,-(sp)
   13220:	       jsr 1590c <getValueType>
   13226:	       lea 12(sp),sp
   1322a:	       tst.w d0
   1322c:	   ,-- bne.s 13232 <builtIn_setFontSpacing+0x36>
   1322e:	   |   moveq #1,d0
   13230:	,--|-- bra.s 13268 <builtIn_setFontSpacing+0x6c>
	fontSpace = fontSpaceI;
   13232:	|  '-> move.l (sp),d0
   13234:	|      move.l d0,d0
   13236:	|      move.w d0,1c6b0 <fontSpace>
	trimStack (&fun -> stack);
   1323c:	|      moveq #24,d0
   1323e:	|      add.l 12(sp),d0
   13242:	|      move.l d0,-(sp)
   13244:	|      jsr 16290 <trimStack>
   1324a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   1324c:	|      moveq #28,d0
   1324e:	|      add.l 12(sp),d0
   13252:	|      pea 1 <_start+0x1>
   13256:	|      pea 1 <_start+0x1>
   1325a:	|      move.l d0,-(sp)
   1325c:	|      jsr 161fe <setVariable>
   13262:	|      lea 12(sp),sp
	return BR_CONTINUE;
   13266:	|      moveq #2,d0
}
   13268:	'----> addq.l #4,sp
   1326a:	       rts

0001326c <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   1326c:	          subq.l #4,sp
	KPrintF("running transitionLevel\n");
   1326e:	          pea 1b85d <talk.c.490538ff+0xd0b>
   13274:	          jsr 183ec <KPrintF>
   1327a:	          addq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1327c:	          movea.l 12(sp),a0
   13280:	          move.l 24(a0),d0
   13284:	          move.l d0,-(sp)
   13286:	          pea 1 <_start+0x1>
   1328a:	          move.l sp,d0
   1328c:	          addq.l #8,d0
   1328e:	          move.l d0,-(sp)
   13290:	          jsr 1590c <getValueType>
   13296:	          lea 12(sp),sp
   1329a:	          tst.w d0
   1329c:	      ,-- bne.s 132a2 <builtIn_transitionLevel+0x36>
   1329e:	      |   moveq #1,d0
   132a0:	,-----|-- bra.s 132f6 <builtIn_transitionLevel+0x8a>
	trimStack (&fun -> stack);
   132a2:	|     '-> moveq #24,d0
   132a4:	|         add.l 12(sp),d0
   132a8:	|         move.l d0,-(sp)
   132aa:	|         jsr 16290 <trimStack>
   132b0:	|         addq.l #4,sp

	if (number < 0)
   132b2:	|         move.l (sp),d0
   132b4:	|     ,-- bpl.s 132be <builtIn_transitionLevel+0x52>
		brightnessLevel = 0;
   132b6:	|     |   clr.b 1c11e <brightnessLevel>
   132bc:	|  ,--|-- bra.s 132da <builtIn_transitionLevel+0x6e>
	else if (number > 255)
   132be:	|  |  '-> move.l (sp),d0
   132c0:	|  |      cmpi.l #255,d0
   132c6:	|  |  ,-- ble.s 132d0 <builtIn_transitionLevel+0x64>
		brightnessLevel = 255;
   132c8:	|  |  |   st 1c11e <brightnessLevel>
   132ce:	|  +--|-- bra.s 132da <builtIn_transitionLevel+0x6e>
	else
		brightnessLevel = number;
   132d0:	|  |  '-> move.l (sp),d0
   132d2:	|  |      move.l d0,d0
   132d4:	|  |      move.b d0,1c11e <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   132da:	|  '----> moveq #28,d0
   132dc:	|         add.l 12(sp),d0
   132e0:	|         pea 1 <_start+0x1>
   132e4:	|         pea 1 <_start+0x1>
   132e8:	|         move.l d0,-(sp)
   132ea:	|         jsr 161fe <setVariable>
   132f0:	|         lea 12(sp),sp
	return BR_CONTINUE;
   132f4:	|         moveq #2,d0
}
   132f6:	'-------> addq.l #4,sp
   132f8:	          rts

000132fa <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	KPrintF("running captureAllKeys\n");
   132fa:	pea 1b876 <talk.c.490538ff+0xd24>
   13300:	jsr 183ec <KPrintF>
   13306:	addq.l #4,sp
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   13308:	movea.l 8(sp),a0
   1330c:	move.l 24(a0),d0
   13310:	move.l d0,-(sp)
   13312:	jsr 15e4c <getBoolean>
   13318:	addq.l #4,sp
   1331a:	move.w d0,1c75a <captureAllKeys>
	trimStack (&fun -> stack);
   13320:	moveq #24,d0
   13322:	add.l 8(sp),d0
   13326:	move.l d0,-(sp)
   13328:	jsr 16290 <trimStack>
   1332e:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   13330:	move.w 1c75a <captureAllKeys>,d0
   13336:	movea.w d0,a0
   13338:	moveq #28,d0
   1333a:	add.l 8(sp),d0
   1333e:	move.l a0,-(sp)
   13340:	pea 1 <_start+0x1>
   13344:	move.l d0,-(sp)
   13346:	jsr 161fe <setVariable>
   1334c:	lea 12(sp),sp
	return BR_CONTINUE;
   13350:	moveq #2,d0
}
   13352:	rts

00013354 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   13354:	       lea -12(sp),sp
	KPrintF("running spinCharacter\n");
   13358:	       pea 1b88e <talk.c.490538ff+0xd3c>
   1335e:	       jsr 183ec <KPrintF>
   13364:	       addq.l #4,sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13366:	       movea.l 20(sp),a0
   1336a:	       move.l 24(a0),d0
   1336e:	       move.l d0,-(sp)
   13370:	       pea 1 <_start+0x1>
   13374:	       moveq #12,d0
   13376:	       add.l sp,d0
   13378:	       move.l d0,-(sp)
   1337a:	       jsr 1590c <getValueType>
   13380:	       lea 12(sp),sp
   13384:	       tst.w d0
   13386:	   ,-- bne.s 1338e <builtIn_spinCharacter+0x3a>
   13388:	   |   moveq #1,d0
   1338a:	,--|-- bra.w 1343e <builtIn_spinCharacter+0xea>
	trimStack (&fun -> stack);
   1338e:	|  '-> moveq #24,d0
   13390:	|      add.l 20(sp),d0
   13394:	|      move.l d0,-(sp)
   13396:	|      jsr 16290 <trimStack>
   1339c:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1339e:	|      movea.l 20(sp),a0
   133a2:	|      move.l 24(a0),d0
   133a6:	|      move.l d0,-(sp)
   133a8:	|      pea 7 <_start+0x7>
   133ac:	|      lea 8(sp),a0
   133b0:	|      move.l a0,-(sp)
   133b2:	|      jsr 1590c <getValueType>
   133b8:	|      lea 12(sp),sp
   133bc:	|      tst.w d0
   133be:	|  ,-- bne.s 133c4 <builtIn_spinCharacter+0x70>
   133c0:	|  |   moveq #1,d0
   133c2:	+--|-- bra.s 1343e <builtIn_spinCharacter+0xea>
	trimStack (&fun -> stack);
   133c4:	|  '-> moveq #24,d0
   133c6:	|      add.l 20(sp),d0
   133ca:	|      move.l d0,-(sp)
   133cc:	|      jsr 16290 <trimStack>
   133d2:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   133d4:	|      move.l (sp),d0
   133d6:	|      move.l d0,-(sp)
   133d8:	|      jsr ae9c <findPerson>
   133de:	|      addq.l #4,sp
   133e0:	|      move.l d0,8(sp)
	if (thisPerson) {
   133e4:	|  ,-- beq.s 13424 <builtIn_spinCharacter+0xd0>
		thisPerson -> wantAngle = number;
   133e6:	|  |   move.l 4(sp),d0
   133ea:	|  |   movea.l 8(sp),a0
   133ee:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   133f2:	|  |   movea.l 8(sp),a0
   133f6:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   133fc:	|  |   movea.l 8(sp),a0
   13400:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   13406:	|  |   moveq #28,d0
   13408:	|  |   add.l 20(sp),d0
   1340c:	|  |   pea 1 <_start+0x1>
   13410:	|  |   pea 1 <_start+0x1>
   13414:	|  |   move.l d0,-(sp)
   13416:	|  |   jsr 161fe <setVariable>
   1341c:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   13420:	|  |   moveq #3,d0
   13422:	+--|-- bra.s 1343e <builtIn_spinCharacter+0xea>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   13424:	|  '-> moveq #28,d0
   13426:	|      add.l 20(sp),d0
   1342a:	|      clr.l -(sp)
   1342c:	|      pea 1 <_start+0x1>
   13430:	|      move.l d0,-(sp)
   13432:	|      jsr 161fe <setVariable>
   13438:	|      lea 12(sp),sp
		return BR_CONTINUE;
   1343c:	|      moveq #2,d0
	}
}
   1343e:	'----> lea 12(sp),sp
   13442:	       rts

00013444 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   13444:	          subq.l #8,sp
	KPrintF("running getCharacterDirection\n");
   13446:	          pea 1b8a5 <talk.c.490538ff+0xd53>
   1344c:	          jsr 183ec <KPrintF>
   13452:	          addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13454:	          movea.l 16(sp),a0
   13458:	          move.l 24(a0),d0
   1345c:	          move.l d0,-(sp)
   1345e:	          pea 7 <_start+0x7>
   13462:	          move.l sp,d0
   13464:	          addq.l #8,d0
   13466:	          move.l d0,-(sp)
   13468:	          jsr 1590c <getValueType>
   1346e:	          lea 12(sp),sp
   13472:	          tst.w d0
   13474:	      ,-- bne.s 1347a <builtIn_getCharacterDirection+0x36>
   13476:	      |   moveq #1,d0
   13478:	,-----|-- bra.s 134d8 <builtIn_getCharacterDirection+0x94>
	trimStack (&fun -> stack);
   1347a:	|     '-> moveq #24,d0
   1347c:	|         add.l 16(sp),d0
   13480:	|         move.l d0,-(sp)
   13482:	|         jsr 16290 <trimStack>
   13488:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1348a:	|         move.l (sp),d0
   1348c:	|         move.l d0,-(sp)
   1348e:	|         jsr ae9c <findPerson>
   13494:	|         addq.l #4,sp
   13496:	|         move.l d0,4(sp)
	if (thisPerson) {
   1349a:	|  ,----- beq.s 134be <builtIn_getCharacterDirection+0x7a>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   1349c:	|  |      movea.l 4(sp),a0
   134a0:	|  |      move.l 106(a0),d1
   134a4:	|  |      moveq #28,d0
   134a6:	|  |      add.l 16(sp),d0
   134aa:	|  |      move.l d1,-(sp)
   134ac:	|  |      pea 1 <_start+0x1>
   134b0:	|  |      move.l d0,-(sp)
   134b2:	|  |      jsr 161fe <setVariable>
   134b8:	|  |      lea 12(sp),sp
   134bc:	|  |  ,-- bra.s 134d6 <builtIn_getCharacterDirection+0x92>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   134be:	|  '--|-> moveq #28,d0
   134c0:	|     |   add.l 16(sp),d0
   134c4:	|     |   clr.l -(sp)
   134c6:	|     |   pea 1 <_start+0x1>
   134ca:	|     |   move.l d0,-(sp)
   134cc:	|     |   jsr 161fe <setVariable>
   134d2:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   134d6:	|     '-> moveq #2,d0
}
   134d8:	'-------> addq.l #8,sp
   134da:	          rts

000134dc <builtIn_isCharacter>:

builtIn(isCharacter)
{
   134dc:	       subq.l #8,sp
	KPrintF("running isCharacter\n");
   134de:	       pea 1b8c4 <talk.c.490538ff+0xd72>
   134e4:	       jsr 183ec <KPrintF>
   134ea:	       addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   134ec:	       movea.l 16(sp),a0
   134f0:	       move.l 24(a0),d0
   134f4:	       move.l d0,-(sp)
   134f6:	       pea 7 <_start+0x7>
   134fa:	       move.l sp,d0
   134fc:	       addq.l #8,d0
   134fe:	       move.l d0,-(sp)
   13500:	       jsr 1590c <getValueType>
   13506:	       lea 12(sp),sp
   1350a:	       tst.w d0
   1350c:	   ,-- bne.s 13512 <builtIn_isCharacter+0x36>
   1350e:	   |   moveq #1,d0
   13510:	,--|-- bra.s 13554 <builtIn_isCharacter+0x78>
	trimStack (&fun -> stack);
   13512:	|  '-> moveq #24,d0
   13514:	|      add.l 16(sp),d0
   13518:	|      move.l d0,-(sp)
   1351a:	|      jsr 16290 <trimStack>
   13520:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   13522:	|      move.l (sp),d0
   13524:	|      move.l d0,-(sp)
   13526:	|      jsr ae9c <findPerson>
   1352c:	|      addq.l #4,sp
   1352e:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   13532:	|      sne d0
   13534:	|      neg.b d0
   13536:	|      moveq #0,d1
   13538:	|      move.b d0,d1
   1353a:	|      moveq #28,d0
   1353c:	|      add.l 16(sp),d0
   13540:	|      move.l d1,-(sp)
   13542:	|      pea 1 <_start+0x1>
   13546:	|      move.l d0,-(sp)
   13548:	|      jsr 161fe <setVariable>
   1354e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   13552:	|      moveq #2,d0
}
   13554:	'----> addq.l #8,sp
   13556:	       rts

00013558 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   13558:	          subq.l #8,sp
	KPrintF("running normalCharacter\n");
   1355a:	          pea 1b8d9 <talk.c.490538ff+0xd87>
   13560:	          jsr 183ec <KPrintF>
   13566:	          addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13568:	          movea.l 16(sp),a0
   1356c:	          move.l 24(a0),d0
   13570:	          move.l d0,-(sp)
   13572:	          pea 7 <_start+0x7>
   13576:	          move.l sp,d0
   13578:	          addq.l #8,d0
   1357a:	          move.l d0,-(sp)
   1357c:	          jsr 1590c <getValueType>
   13582:	          lea 12(sp),sp
   13586:	          tst.w d0
   13588:	      ,-- bne.s 1358e <builtIn_normalCharacter+0x36>
   1358a:	      |   moveq #1,d0
   1358c:	,-----|-- bra.s 1360a <builtIn_normalCharacter+0xb2>
	trimStack (&fun -> stack);
   1358e:	|     '-> moveq #24,d0
   13590:	|         add.l 16(sp),d0
   13594:	|         move.l d0,-(sp)
   13596:	|         jsr 16290 <trimStack>
   1359c:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1359e:	|         move.l (sp),d0
   135a0:	|         move.l d0,-(sp)
   135a2:	|         jsr ae9c <findPerson>
   135a8:	|         addq.l #4,sp
   135aa:	|         move.l d0,4(sp)
	if (thisPerson)
   135ae:	|  ,----- beq.s 135f0 <builtIn_normalCharacter+0x98>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   135b0:	|  |      movea.l 4(sp),a0
   135b4:	|  |      movea.l 80(a0),a0
   135b8:	|  |      move.l (a0),d1
   135ba:	|  |      movea.l 4(sp),a0
   135be:	|  |      move.l 106(a0),d0
   135c2:	|  |      add.l d0,d0
   135c4:	|  |      add.l d0,d0
   135c6:	|  |      movea.l d1,a0
   135c8:	|  |      adda.l d0,a0
   135ca:	|  |      move.l (a0),d0
   135cc:	|  |      movea.l 4(sp),a0
   135d0:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   135d4:	|  |      moveq #28,d0
   135d6:	|  |      add.l 16(sp),d0
   135da:	|  |      pea 1 <_start+0x1>
   135de:	|  |      pea 1 <_start+0x1>
   135e2:	|  |      move.l d0,-(sp)
   135e4:	|  |      jsr 161fe <setVariable>
   135ea:	|  |      lea 12(sp),sp
   135ee:	|  |  ,-- bra.s 13608 <builtIn_normalCharacter+0xb0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   135f0:	|  '--|-> moveq #28,d0
   135f2:	|     |   add.l 16(sp),d0
   135f6:	|     |   clr.l -(sp)
   135f8:	|     |   pea 1 <_start+0x1>
   135fc:	|     |   move.l d0,-(sp)
   135fe:	|     |   jsr 161fe <setVariable>
   13604:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   13608:	|     '-> moveq #2,d0
}
   1360a:	'-------> addq.l #8,sp
   1360c:	          rts

0001360e <builtIn_isMoving>:

builtIn(isMoving)
{
   1360e:	          subq.l #8,sp
	KPrintF("running isMoving\n");
   13610:	          pea 1b8f2 <talk.c.490538ff+0xda0>
   13616:	          jsr 183ec <KPrintF>
   1361c:	          addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1361e:	          movea.l 16(sp),a0
   13622:	          move.l 24(a0),d0
   13626:	          move.l d0,-(sp)
   13628:	          pea 7 <_start+0x7>
   1362c:	          move.l sp,d0
   1362e:	          addq.l #8,d0
   13630:	          move.l d0,-(sp)
   13632:	          jsr 1590c <getValueType>
   13638:	          lea 12(sp),sp
   1363c:	          tst.w d0
   1363e:	      ,-- bne.s 13644 <builtIn_isMoving+0x36>
   13640:	      |   moveq #1,d0
   13642:	,-----|-- bra.s 136a4 <builtIn_isMoving+0x96>
	trimStack (&fun -> stack);
   13644:	|     '-> moveq #24,d0
   13646:	|         add.l 16(sp),d0
   1364a:	|         move.l d0,-(sp)
   1364c:	|         jsr 16290 <trimStack>
   13652:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   13654:	|         move.l (sp),d0
   13656:	|         move.l d0,-(sp)
   13658:	|         jsr ae9c <findPerson>
   1365e:	|         addq.l #4,sp
   13660:	|         move.l d0,4(sp)
	if (thisPerson)
   13664:	|  ,----- beq.s 1368a <builtIn_isMoving+0x7c>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   13666:	|  |      movea.l 4(sp),a0
   1366a:	|  |      move.w 64(a0),d0
   1366e:	|  |      movea.w d0,a0
   13670:	|  |      moveq #28,d0
   13672:	|  |      add.l 16(sp),d0
   13676:	|  |      move.l a0,-(sp)
   13678:	|  |      pea 1 <_start+0x1>
   1367c:	|  |      move.l d0,-(sp)
   1367e:	|  |      jsr 161fe <setVariable>
   13684:	|  |      lea 12(sp),sp
   13688:	|  |  ,-- bra.s 136a2 <builtIn_isMoving+0x94>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1368a:	|  '--|-> moveq #28,d0
   1368c:	|     |   add.l 16(sp),d0
   13690:	|     |   clr.l -(sp)
   13692:	|     |   pea 1 <_start+0x1>
   13696:	|     |   move.l d0,-(sp)
   13698:	|     |   jsr 161fe <setVariable>
   1369e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   136a2:	|     '-> moveq #2,d0
}
   136a4:	'-------> addq.l #8,sp
   136a6:	          rts

000136a8 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   136a8:	          lea -12(sp),sp
	KPrintF("running fetchEvent\n");
   136ac:	          pea 1b904 <talk.c.490538ff+0xdb2>
   136b2:	          jsr 183ec <KPrintF>
   136b8:	          addq.l #4,sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   136ba:	          movea.l 20(sp),a0
   136be:	          move.l 24(a0),d0
   136c2:	          move.l d0,-(sp)
   136c4:	          pea 7 <_start+0x7>
   136c8:	          lea 8(sp),a0
   136cc:	          move.l a0,-(sp)
   136ce:	          jsr 1590c <getValueType>
   136d4:	          lea 12(sp),sp
   136d8:	          tst.w d0
   136da:	      ,-- bne.s 136e2 <builtIn_fetchEvent+0x3a>
   136dc:	      |   moveq #1,d0
   136de:	,-----|-- bra.w 13776 <builtIn_fetchEvent+0xce>
	trimStack (&fun -> stack);
   136e2:	|     '-> moveq #24,d0
   136e4:	|         add.l 20(sp),d0
   136e8:	|         move.l d0,-(sp)
   136ea:	|         jsr 16290 <trimStack>
   136f0:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   136f2:	|         movea.l 20(sp),a0
   136f6:	|         move.l 24(a0),d0
   136fa:	|         move.l d0,-(sp)
   136fc:	|         pea 7 <_start+0x7>
   13700:	|         moveq #12,d0
   13702:	|         add.l sp,d0
   13704:	|         move.l d0,-(sp)
   13706:	|         jsr 1590c <getValueType>
   1370c:	|         lea 12(sp),sp
   13710:	|         tst.w d0
   13712:	|     ,-- bne.s 13718 <builtIn_fetchEvent+0x70>
   13714:	|     |   moveq #1,d0
   13716:	+-----|-- bra.s 13776 <builtIn_fetchEvent+0xce>
	trimStack (&fun -> stack);
   13718:	|     '-> moveq #24,d0
   1371a:	|         add.l 20(sp),d0
   1371e:	|         move.l d0,-(sp)
   13720:	|         jsr 16290 <trimStack>
   13726:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   13728:	|         move.l (sp),d1
   1372a:	|         move.l 4(sp),d0
   1372e:	|         move.l d1,-(sp)
   13730:	|         move.l d0,-(sp)
   13732:	|         jsr de3e <getCombinationFunction>
   13738:	|         addq.l #8,sp
   1373a:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   1373e:	|  ,----- beq.s 1375c <builtIn_fetchEvent+0xb4>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   13740:	|  |      moveq #28,d0
   13742:	|  |      add.l 20(sp),d0
   13746:	|  |      move.l 8(sp),-(sp)
   1374a:	|  |      pea 2 <_start+0x2>
   1374e:	|  |      move.l d0,-(sp)
   13750:	|  |      jsr 161fe <setVariable>
   13756:	|  |      lea 12(sp),sp
   1375a:	|  |  ,-- bra.s 13774 <builtIn_fetchEvent+0xcc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1375c:	|  '--|-> moveq #28,d0
   1375e:	|     |   add.l 20(sp),d0
   13762:	|     |   clr.l -(sp)
   13764:	|     |   pea 1 <_start+0x1>
   13768:	|     |   move.l d0,-(sp)
   1376a:	|     |   jsr 161fe <setVariable>
   13770:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   13774:	|     '-> moveq #2,d0
}
   13776:	'-------> lea 12(sp),sp
   1377a:	          rts

0001377c <builtIn_deleteFile>:

builtIn(deleteFile)
{
   1377c:	       lea -24(sp),sp
   13780:	       move.l a6,-(sp)
	KPrintF("running deleteFile\n");
   13782:	       pea 1b918 <talk.c.490538ff+0xdc6>
   13788:	       jsr 183ec <KPrintF>
   1378e:	       addq.l #4,sp
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   13790:	       movea.l 36(sp),a0
   13794:	       move.l 24(a0),d0
   13798:	       move.l d0,-(sp)
   1379a:	       jsr 15ee2 <getTextFromAnyVar>
   137a0:	       addq.l #4,sp
   137a2:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   137a6:	       moveq #24,d0
   137a8:	       add.l 36(sp),d0
   137ac:	       move.l d0,-(sp)
   137ae:	       jsr 16290 <trimStack>
   137b4:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   137b6:	       move.l 24(sp),-(sp)
   137ba:	       jsr 2fe <encodeFilename>
   137c0:	       addq.l #4,sp
   137c2:	       move.l d0,20(sp)
    FreeVec(namNormal);
   137c6:	       move.l 24(sp),16(sp)
   137cc:	       move.l 1c7ba <SysBase>,d0
   137d2:	       movea.l d0,a6
   137d4:	       movea.l 16(sp),a1
   137d8:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   137dc:	       move.l 20(sp),-(sp)
   137e0:	       jsr ebf6 <failSecurityCheck>
   137e6:	       addq.l #4,sp
   137e8:	       tst.w d0
   137ea:	   ,-- beq.s 137f0 <builtIn_deleteFile+0x74>
   137ec:	   |   moveq #1,d0
   137ee:	,--|-- bra.s 1383e <builtIn_deleteFile+0xc2>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   137f0:	|  '-> move.l 20(sp),12(sp)
   137f6:	|      move.l 1c7c2 <DOSBase>,d0
   137fc:	|      movea.l d0,a6
   137fe:	|      move.l 12(sp),d1
   13802:	|      jsr -72(a6)
   13806:	|      move.l d0,8(sp)
   1380a:	|      move.l 8(sp),d1
   1380e:	|      moveq #28,d0
   13810:	|      add.l 36(sp),d0
   13814:	|      move.l d1,-(sp)
   13816:	|      pea 1 <_start+0x1>
   1381a:	|      move.l d0,-(sp)
   1381c:	|      jsr 161fe <setVariable>
   13822:	|      lea 12(sp),sp
    FreeVec(nam);
   13826:	|      move.l 20(sp),4(sp)
   1382c:	|      move.l 1c7ba <SysBase>,d0
   13832:	|      movea.l d0,a6
   13834:	|      movea.l 4(sp),a1
   13838:	|      jsr -690(a6)

    return BR_CONTINUE;
   1383c:	|      moveq #2,d0
}
   1383e:	'----> movea.l (sp)+,a6
   13840:	       lea 24(sp),sp
   13844:	       rts

00013846 <builtIn_renameFile>:

builtIn(renameFile)
{
   13846:	       lea -40(sp),sp
   1384a:	       move.l a6,-(sp)
   1384c:	       move.l d2,-(sp)
	KPrintF("running renameFile\n");
   1384e:	       pea 1b92c <talk.c.490538ff+0xdda>
   13854:	       jsr 183ec <KPrintF>
   1385a:	       addq.l #4,sp
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   1385c:	       movea.l 56(sp),a0
   13860:	       move.l 24(a0),d0
   13864:	       move.l d0,-(sp)
   13866:	       jsr 15ee2 <getTextFromAnyVar>
   1386c:	       addq.l #4,sp
   1386e:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   13872:	       move.l 44(sp),-(sp)
   13876:	       jsr 2fe <encodeFilename>
   1387c:	       addq.l #4,sp
   1387e:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   13882:	       moveq #24,d0
   13884:	       add.l 56(sp),d0
   13888:	       move.l d0,-(sp)
   1388a:	       jsr 16290 <trimStack>
   13890:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   13892:	       move.l 40(sp),-(sp)
   13896:	       jsr ebf6 <failSecurityCheck>
   1389c:	       addq.l #4,sp
   1389e:	       tst.w d0
   138a0:	   ,-- beq.s 138a8 <builtIn_renameFile+0x62>
   138a2:	   |   moveq #1,d0
   138a4:	,--|-- bra.w 1398e <builtIn_renameFile+0x148>
	FreeVec(temp);
   138a8:	|  '-> move.l 44(sp),36(sp)
   138ae:	|      move.l 1c7ba <SysBase>,d0
   138b4:	|      movea.l d0,a6
   138b6:	|      movea.l 36(sp),a1
   138ba:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   138be:	|      movea.l 56(sp),a0
   138c2:	|      move.l 24(a0),d0
   138c6:	|      move.l d0,-(sp)
   138c8:	|      jsr 15ee2 <getTextFromAnyVar>
   138ce:	|      addq.l #4,sp
   138d0:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   138d4:	|      move.l 44(sp),-(sp)
   138d8:	|      jsr 2fe <encodeFilename>
   138de:	|      addq.l #4,sp
   138e0:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   138e4:	|      moveq #24,d0
   138e6:	|      add.l 56(sp),d0
   138ea:	|      move.l d0,-(sp)
   138ec:	|      jsr 16290 <trimStack>
   138f2:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   138f4:	|      move.l 32(sp),-(sp)
   138f8:	|      jsr ebf6 <failSecurityCheck>
   138fe:	|      addq.l #4,sp
   13900:	|      tst.w d0
   13902:	|  ,-- beq.s 1390a <builtIn_renameFile+0xc4>
   13904:	|  |   moveq #1,d0
   13906:	+--|-- bra.w 1398e <builtIn_renameFile+0x148>
	FreeVec(temp);
   1390a:	|  '-> move.l 44(sp),28(sp)
   13910:	|      move.l 1c7ba <SysBase>,d0
   13916:	|      movea.l d0,a6
   13918:	|      movea.l 28(sp),a1
   1391c:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   13920:	|      move.l 32(sp),24(sp)
   13926:	|      move.l 40(sp),20(sp)
   1392c:	|      move.l 1c7c2 <DOSBase>,d0
   13932:	|      movea.l d0,a6
   13934:	|      move.l 24(sp),d1
   13938:	|      move.l 20(sp),d2
   1393c:	|      jsr -78(a6)
   13940:	|      move.l d0,16(sp)
   13944:	|      move.l 16(sp),d1
   13948:	|      moveq #28,d0
   1394a:	|      add.l 56(sp),d0
   1394e:	|      move.l d1,-(sp)
   13950:	|      pea 1 <_start+0x1>
   13954:	|      move.l d0,-(sp)
   13956:	|      jsr 161fe <setVariable>
   1395c:	|      lea 12(sp),sp
	FreeVec(nam);
   13960:	|      move.l 32(sp),12(sp)
   13966:	|      move.l 1c7ba <SysBase>,d0
   1396c:	|      movea.l d0,a6
   1396e:	|      movea.l 12(sp),a1
   13972:	|      jsr -690(a6)
	FreeVec(newnam);
   13976:	|      move.l 40(sp),8(sp)
   1397c:	|      move.l 1c7ba <SysBase>,d0
   13982:	|      movea.l d0,a6
   13984:	|      movea.l 8(sp),a1
   13988:	|      jsr -690(a6)

	return BR_CONTINUE;
   1398c:	|      moveq #2,d0
}
   1398e:	'----> move.l (sp)+,d2
   13990:	       movea.l (sp)+,a6
   13992:	       lea 40(sp),sp
   13996:	       rts

00013998 <builtIn_cacheSound>:

builtIn(cacheSound)
{
   13998:	       subq.l #4,sp
	KPrintF("running cacheSound\n");
   1399a:	       pea 1b940 <talk.c.490538ff+0xdee>
   139a0:	       jsr 183ec <KPrintF>
   139a6:	       addq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   139a8:	       movea.l 12(sp),a0
   139ac:	       move.l 24(a0),d0
   139b0:	       move.l d0,-(sp)
   139b2:	       pea 5 <_start+0x5>
   139b6:	       move.l sp,d0
   139b8:	       addq.l #8,d0
   139ba:	       move.l d0,-(sp)
   139bc:	       jsr 1590c <getValueType>
   139c2:	       lea 12(sp),sp
   139c6:	       tst.w d0
   139c8:	   ,-- bne.s 139ce <builtIn_cacheSound+0x36>
   139ca:	   |   moveq #1,d0
   139cc:	,--|-- bra.s 139f6 <builtIn_cacheSound+0x5e>
	trimStack (&fun -> stack);
   139ce:	|  '-> moveq #24,d0
   139d0:	|      add.l 12(sp),d0
   139d4:	|      move.l d0,-(sp)
   139d6:	|      jsr 16290 <trimStack>
   139dc:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   139de:	|      move.l (sp),d0
   139e0:	|      move.l d0,-(sp)
   139e2:	|      jsr da34 <cacheSound>
   139e8:	|      addq.l #4,sp
   139ea:	|      moveq #-1,d1
   139ec:	|      cmp.l d0,d1
   139ee:	|  ,-- bne.s 139f4 <builtIn_cacheSound+0x5c>
   139f0:	|  |   moveq #1,d0
   139f2:	+--|-- bra.s 139f6 <builtIn_cacheSound+0x5e>
	return BR_CONTINUE;
   139f4:	|  '-> moveq #2,d0
}
   139f6:	'----> addq.l #4,sp
   139f8:	       rts

000139fa <builtIn_burnString>:

builtIn(burnString)
{
	KPrintF("running burnString\n");
   139fa:	pea 1b954 <talk.c.490538ff+0xe02>
   13a00:	jsr 183ec <KPrintF>
   13a06:	addq.l #4,sp
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   13a08:	pea 1b968 <talk.c.490538ff+0xe16>
   13a0e:	jsr 183ec <KPrintF>
   13a14:	addq.l #4,sp
	return BR_CONTINUE;
   13a16:	moveq #2,d0
}
   13a18:	rts

00013a1a <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   13a1a:	          lea -12(sp),sp
	KPrintF("running setCharacterSpinSpeed\n");
   13a1e:	          pea 1b992 <talk.c.490538ff+0xe40>
   13a24:	          jsr 183ec <KPrintF>
   13a2a:	          addq.l #4,sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13a2c:	          movea.l 20(sp),a0
   13a30:	          move.l 24(a0),d0
   13a34:	          move.l d0,-(sp)
   13a36:	          pea 1 <_start+0x1>
   13a3a:	          moveq #12,d0
   13a3c:	          add.l sp,d0
   13a3e:	          move.l d0,-(sp)
   13a40:	          jsr 1590c <getValueType>
   13a46:	          lea 12(sp),sp
   13a4a:	          tst.w d0
   13a4c:	      ,-- bne.s 13a54 <builtIn_setCharacterSpinSpeed+0x3a>
   13a4e:	      |   moveq #1,d0
   13a50:	,-----|-- bra.w 13aee <builtIn_setCharacterSpinSpeed+0xd4>
	trimStack (&fun -> stack);
   13a54:	|     '-> moveq #24,d0
   13a56:	|         add.l 20(sp),d0
   13a5a:	|         move.l d0,-(sp)
   13a5c:	|         jsr 16290 <trimStack>
   13a62:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13a64:	|         movea.l 20(sp),a0
   13a68:	|         move.l 24(a0),d0
   13a6c:	|         move.l d0,-(sp)
   13a6e:	|         pea 7 <_start+0x7>
   13a72:	|         lea 8(sp),a0
   13a76:	|         move.l a0,-(sp)
   13a78:	|         jsr 1590c <getValueType>
   13a7e:	|         lea 12(sp),sp
   13a82:	|         tst.w d0
   13a84:	|     ,-- bne.s 13a8a <builtIn_setCharacterSpinSpeed+0x70>
   13a86:	|     |   moveq #1,d0
   13a88:	+-----|-- bra.s 13aee <builtIn_setCharacterSpinSpeed+0xd4>
	trimStack (&fun -> stack);
   13a8a:	|     '-> moveq #24,d0
   13a8c:	|         add.l 20(sp),d0
   13a90:	|         move.l d0,-(sp)
   13a92:	|         jsr 16290 <trimStack>
   13a98:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   13a9a:	|         move.l (sp),d0
   13a9c:	|         move.l d0,-(sp)
   13a9e:	|         jsr ae9c <findPerson>
   13aa4:	|         addq.l #4,sp
   13aa6:	|         move.l d0,8(sp)

	if (thisPerson) {
   13aaa:	|  ,----- beq.s 13ad4 <builtIn_setCharacterSpinSpeed+0xba>
		thisPerson -> spinSpeed = speed;
   13aac:	|  |      move.l 4(sp),d0
   13ab0:	|  |      movea.l 8(sp),a0
   13ab4:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   13ab8:	|  |      moveq #28,d0
   13aba:	|  |      add.l 20(sp),d0
   13abe:	|  |      pea 1 <_start+0x1>
   13ac2:	|  |      pea 1 <_start+0x1>
   13ac6:	|  |      move.l d0,-(sp)
   13ac8:	|  |      jsr 161fe <setVariable>
   13ace:	|  |      lea 12(sp),sp
   13ad2:	|  |  ,-- bra.s 13aec <builtIn_setCharacterSpinSpeed+0xd2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   13ad4:	|  '--|-> moveq #28,d0
   13ad6:	|     |   add.l 20(sp),d0
   13ada:	|     |   clr.l -(sp)
   13adc:	|     |   pea 1 <_start+0x1>
   13ae0:	|     |   move.l d0,-(sp)
   13ae2:	|     |   jsr 161fe <setVariable>
   13ae8:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   13aec:	|     '-> moveq #2,d0
}
   13aee:	'-------> lea 12(sp),sp
   13af2:	          rts

00013af4 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   13af4:	          lea -12(sp),sp
	KPrintF("running setCharacterAngleOffset\n");
   13af8:	          pea 1b9b1 <talk.c.490538ff+0xe5f>
   13afe:	          jsr 183ec <KPrintF>
   13b04:	          addq.l #4,sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13b06:	          movea.l 20(sp),a0
   13b0a:	          move.l 24(a0),d0
   13b0e:	          move.l d0,-(sp)
   13b10:	          pea 1 <_start+0x1>
   13b14:	          moveq #12,d0
   13b16:	          add.l sp,d0
   13b18:	          move.l d0,-(sp)
   13b1a:	          jsr 1590c <getValueType>
   13b20:	          lea 12(sp),sp
   13b24:	          tst.w d0
   13b26:	      ,-- bne.s 13b2e <builtIn_setCharacterAngleOffset+0x3a>
   13b28:	      |   moveq #1,d0
   13b2a:	,-----|-- bra.w 13bc8 <builtIn_setCharacterAngleOffset+0xd4>
	trimStack (&fun -> stack);
   13b2e:	|     '-> moveq #24,d0
   13b30:	|         add.l 20(sp),d0
   13b34:	|         move.l d0,-(sp)
   13b36:	|         jsr 16290 <trimStack>
   13b3c:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13b3e:	|         movea.l 20(sp),a0
   13b42:	|         move.l 24(a0),d0
   13b46:	|         move.l d0,-(sp)
   13b48:	|         pea 7 <_start+0x7>
   13b4c:	|         lea 8(sp),a0
   13b50:	|         move.l a0,-(sp)
   13b52:	|         jsr 1590c <getValueType>
   13b58:	|         lea 12(sp),sp
   13b5c:	|         tst.w d0
   13b5e:	|     ,-- bne.s 13b64 <builtIn_setCharacterAngleOffset+0x70>
   13b60:	|     |   moveq #1,d0
   13b62:	+-----|-- bra.s 13bc8 <builtIn_setCharacterAngleOffset+0xd4>
	trimStack (&fun -> stack);
   13b64:	|     '-> moveq #24,d0
   13b66:	|         add.l 20(sp),d0
   13b6a:	|         move.l d0,-(sp)
   13b6c:	|         jsr 16290 <trimStack>
   13b72:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   13b74:	|         move.l (sp),d0
   13b76:	|         move.l d0,-(sp)
   13b78:	|         jsr ae9c <findPerson>
   13b7e:	|         addq.l #4,sp
   13b80:	|         move.l d0,8(sp)

	if (thisPerson) {
   13b84:	|  ,----- beq.s 13bae <builtIn_setCharacterAngleOffset+0xba>
		thisPerson -> angleOffset = angle;
   13b86:	|  |      move.l 4(sp),d0
   13b8a:	|  |      movea.l 8(sp),a0
   13b8e:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   13b92:	|  |      moveq #28,d0
   13b94:	|  |      add.l 20(sp),d0
   13b98:	|  |      pea 1 <_start+0x1>
   13b9c:	|  |      pea 1 <_start+0x1>
   13ba0:	|  |      move.l d0,-(sp)
   13ba2:	|  |      jsr 161fe <setVariable>
   13ba8:	|  |      lea 12(sp),sp
   13bac:	|  |  ,-- bra.s 13bc6 <builtIn_setCharacterAngleOffset+0xd2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   13bae:	|  '--|-> moveq #28,d0
   13bb0:	|     |   add.l 20(sp),d0
   13bb4:	|     |   clr.l -(sp)
   13bb6:	|     |   pea 1 <_start+0x1>
   13bba:	|     |   move.l d0,-(sp)
   13bbc:	|     |   jsr 161fe <setVariable>
   13bc2:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   13bc6:	|     '-> moveq #2,d0
}
   13bc8:	'-------> lea 12(sp),sp
   13bcc:	          rts

00013bce <builtIn_transitionMode>:


builtIn(transitionMode)
{
   13bce:	       subq.l #4,sp
	KPrintF("running transitionMode\n");
   13bd0:	       pea 1b9d2 <talk.c.490538ff+0xe80>
   13bd6:	       jsr 183ec <KPrintF>
   13bdc:	       addq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13bde:	       movea.l 12(sp),a0
   13be2:	       move.l 24(a0),d0
   13be6:	       move.l d0,-(sp)
   13be8:	       pea 1 <_start+0x1>
   13bec:	       move.l sp,d0
   13bee:	       addq.l #8,d0
   13bf0:	       move.l d0,-(sp)
   13bf2:	       jsr 1590c <getValueType>
   13bf8:	       lea 12(sp),sp
   13bfc:	       tst.w d0
   13bfe:	   ,-- bne.s 13c04 <builtIn_transitionMode+0x36>
   13c00:	   |   moveq #1,d0
   13c02:	,--|-- bra.s 13c3a <builtIn_transitionMode+0x6c>
	fadeMode = n;
   13c04:	|  '-> move.l (sp),d0
   13c06:	|      move.l d0,d0
   13c08:	|      move.b d0,1c686 <fadeMode>
	trimStack (&fun -> stack);
   13c0e:	|      moveq #24,d0
   13c10:	|      add.l 12(sp),d0
   13c14:	|      move.l d0,-(sp)
   13c16:	|      jsr 16290 <trimStack>
   13c1c:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   13c1e:	|      moveq #28,d0
   13c20:	|      add.l 12(sp),d0
   13c24:	|      pea 1 <_start+0x1>
   13c28:	|      pea 1 <_start+0x1>
   13c2c:	|      move.l d0,-(sp)
   13c2e:	|      jsr 161fe <setVariable>
   13c34:	|      lea 12(sp),sp
	return BR_CONTINUE;
   13c38:	|      moveq #2,d0
}
   13c3a:	'----> addq.l #4,sp
   13c3c:	       rts

00013c3e <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   13c3e:	moveq #24,d0
   13c40:	add.l 8(sp),d0
   13c44:	move.l d0,-(sp)
   13c46:	jsr 16290 <trimStack>
   13c4c:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   13c4e:	moveq #28,d0
   13c50:	add.l 8(sp),d0
   13c54:	pea 1 <_start+0x1>
   13c58:	pea 1 <_start+0x1>
   13c5c:	move.l d0,-(sp)
   13c5e:	jsr 161fe <setVariable>
   13c64:	lea 12(sp),sp
	return BR_CONTINUE;
   13c68:	moveq #2,d0
}
   13c6a:	rts

00013c6c <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   13c6c:	pea 1b9ea <talk.c.490538ff+0xe98>
   13c72:	jsr 183ec <KPrintF>
   13c78:	addq.l #4,sp
	return BR_CONTINUE;
   13c7a:	moveq #2,d0
}
   13c7c:	rts

00013c7e <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   13c7e:	       lea -16(sp),sp
   13c82:	       move.l a6,-(sp)
	KPrintF("running saveCustomData\n");
   13c84:	       pea 1ba17 <talk.c.490538ff+0xec5>
   13c8a:	       jsr 183ec <KPrintF>
   13c90:	       addq.l #4,sp
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   13c92:	       movea.l 28(sp),a0
   13c96:	       move.l 24(a0),d0
   13c9a:	       move.l d0,-(sp)
   13c9c:	       jsr 15ee2 <getTextFromAnyVar>
   13ca2:	       addq.l #4,sp
   13ca4:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   13ca8:	   ,-- bne.s 13cb0 <builtIn_saveCustomData+0x32>
   13caa:	   |   moveq #1,d0
   13cac:	,--|-- bra.w 13d62 <builtIn_saveCustomData+0xe4>

	char * fileName = encodeFilename(fileNameB);
   13cb0:	|  '-> move.l 16(sp),-(sp)
   13cb4:	|      jsr 2fe <encodeFilename>
   13cba:	|      addq.l #4,sp
   13cbc:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   13cc0:	|      move.l 16(sp),8(sp)
   13cc6:	|      move.l 1c7ba <SysBase>,d0
   13ccc:	|      movea.l d0,a6
   13cce:	|      movea.l 8(sp),a1
   13cd2:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   13cd6:	|      move.l 12(sp),-(sp)
   13cda:	|      jsr ebf6 <failSecurityCheck>
   13ce0:	|      addq.l #4,sp
   13ce2:	|      tst.w d0
   13ce4:	|  ,-- beq.s 13cea <builtIn_saveCustomData+0x6c>
   13ce6:	|  |   moveq #1,d0
   13ce8:	+--|-- bra.s 13d62 <builtIn_saveCustomData+0xe4>
	trimStack(&fun->stack);
   13cea:	|  '-> moveq #24,d0
   13cec:	|      add.l 28(sp),d0
   13cf0:	|      move.l d0,-(sp)
   13cf2:	|      jsr 16290 <trimStack>
   13cf8:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   13cfa:	|      movea.l 28(sp),a0
   13cfe:	|      movea.l 24(a0),a0
   13d02:	|      move.l (a0),d0
   13d04:	|      moveq #6,d1
   13d06:	|      cmp.l d0,d1
   13d08:	|  ,-- beq.s 13d1c <builtIn_saveCustomData+0x9e>
		KPrintF("First parameter isn't a stack");
   13d0a:	|  |   pea 1ba2f <talk.c.490538ff+0xedd>
   13d10:	|  |   jsr 183ec <KPrintF>
   13d16:	|  |   addq.l #4,sp
		return BR_ERROR;
   13d18:	|  |   moveq #1,d0
   13d1a:	+--|-- bra.s 13d62 <builtIn_saveCustomData+0xe4>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   13d1c:	|  '-> movea.l 28(sp),a0
   13d20:	|      move.l 24(a0),d0
   13d24:	|      move.l d0,-(sp)
   13d26:	|      move.l 16(sp),-(sp)
   13d2a:	|      jsr e846 <stackToFile>
   13d30:	|      addq.l #8,sp
   13d32:	|      tst.w d0
   13d34:	|  ,-- bne.s 13d3a <builtIn_saveCustomData+0xbc>
   13d36:	|  |   moveq #1,d0
   13d38:	+--|-- bra.s 13d62 <builtIn_saveCustomData+0xe4>
	trimStack(&fun->stack);
   13d3a:	|  '-> moveq #24,d0
   13d3c:	|      add.l 28(sp),d0
   13d40:	|      move.l d0,-(sp)
   13d42:	|      jsr 16290 <trimStack>
   13d48:	|      addq.l #4,sp
	FreeVec(fileName);
   13d4a:	|      move.l 12(sp),4(sp)
   13d50:	|      move.l 1c7ba <SysBase>,d0
   13d56:	|      movea.l d0,a6
   13d58:	|      movea.l 4(sp),a1
   13d5c:	|      jsr -690(a6)
	return BR_CONTINUE;
   13d60:	|      moveq #2,d0
}
   13d62:	'----> movea.l (sp)+,a6
   13d64:	       lea 16(sp),sp
   13d68:	       rts

00013d6a <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   13d6a:	       lea -28(sp),sp
   13d6e:	       move.l a6,-(sp)
	KPrintF("running loadCustomData\n");
   13d70:	       pea 1ba4d <talk.c.490538ff+0xefb>
   13d76:	       jsr 183ec <KPrintF>
   13d7c:	       addq.l #4,sp
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   13d7e:	       movea.l 40(sp),a0
   13d82:	       move.l 24(a0),d0
   13d86:	       move.l d0,-(sp)
   13d88:	       jsr 15ee2 <getTextFromAnyVar>
   13d8e:	       addq.l #4,sp
   13d90:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   13d94:	   ,-- bne.s 13d9c <builtIn_loadCustomData+0x32>
   13d96:	   |   moveq #1,d0
   13d98:	,--|-- bra.w 13e98 <builtIn_loadCustomData+0x12e>

	char * newText = encodeFilename(newTextA);
   13d9c:	|  '-> move.l 28(sp),-(sp)
   13da0:	|      jsr 2fe <encodeFilename>
   13da6:	|      addq.l #4,sp
   13da8:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   13dac:	|      move.l 28(sp),20(sp)
   13db2:	|      move.l 1c7ba <SysBase>,d0
   13db8:	|      movea.l d0,a6
   13dba:	|      movea.l 20(sp),a1
   13dbe:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   13dc2:	|      move.l 24(sp),-(sp)
   13dc6:	|      jsr ebf6 <failSecurityCheck>
   13dcc:	|      addq.l #4,sp
   13dce:	|      tst.w d0
   13dd0:	|  ,-- beq.s 13dd8 <builtIn_loadCustomData+0x6e>
   13dd2:	|  |   moveq #1,d0
   13dd4:	+--|-- bra.w 13e98 <builtIn_loadCustomData+0x12e>
	trimStack(&fun->stack);
   13dd8:	|  '-> moveq #24,d0
   13dda:	|      add.l 40(sp),d0
   13dde:	|      move.l d0,-(sp)
   13de0:	|      jsr 16290 <trimStack>
   13de6:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   13de8:	|      moveq #28,d0
   13dea:	|      add.l 40(sp),d0
   13dee:	|      move.l d0,-(sp)
   13df0:	|      jsr 15b5a <unlinkVar>
   13df6:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   13df8:	|      movea.l 40(sp),a0
   13dfc:	|      moveq #6,d0
   13dfe:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   13e02:	|      moveq #12,d0
   13e04:	|      move.l d0,16(sp)
   13e08:	|      clr.l 12(sp)
   13e0c:	|      move.l 1c7ba <SysBase>,d0
   13e12:	|      movea.l d0,a6
   13e14:	|      move.l 16(sp),d0
   13e18:	|      move.l 12(sp),d1
   13e1c:	|      jsr -684(a6)
   13e20:	|      move.l d0,8(sp)
   13e24:	|      move.l 8(sp),d0
   13e28:	|      movea.l 40(sp),a0
   13e2c:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   13e30:	|      movea.l 40(sp),a0
   13e34:	|      move.l 32(a0),d0
   13e38:	|  ,-- bne.s 13e3e <builtIn_loadCustomData+0xd4>
   13e3a:	|  |   moveq #1,d0
   13e3c:	+--|-- bra.s 13e98 <builtIn_loadCustomData+0x12e>
	fun->reg.varData.theStack->first = NULL;
   13e3e:	|  '-> movea.l 40(sp),a0
   13e42:	|      movea.l 32(a0),a0
   13e46:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   13e48:	|      movea.l 40(sp),a0
   13e4c:	|      movea.l 32(a0),a0
   13e50:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   13e54:	|      movea.l 40(sp),a0
   13e58:	|      movea.l 32(a0),a0
   13e5c:	|      moveq #1,d0
   13e5e:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   13e62:	|      movea.l 40(sp),a0
   13e66:	|      move.l 32(a0),d0
   13e6a:	|      move.l d0,-(sp)
   13e6c:	|      move.l 28(sp),-(sp)
   13e70:	|      jsr e280 <fileToStack>
   13e76:	|      addq.l #8,sp
   13e78:	|      tst.w d0
   13e7a:	|  ,-- bne.s 13e80 <builtIn_loadCustomData+0x116>
   13e7c:	|  |   moveq #1,d0
   13e7e:	+--|-- bra.s 13e98 <builtIn_loadCustomData+0x12e>
	FreeVec(newText);
   13e80:	|  '-> move.l 24(sp),4(sp)
   13e86:	|      move.l 1c7ba <SysBase>,d0
   13e8c:	|      movea.l d0,a6
   13e8e:	|      movea.l 4(sp),a1
   13e92:	|      jsr -690(a6)
	return BR_CONTINUE;
   13e96:	|      moveq #2,d0
}
   13e98:	'----> movea.l (sp)+,a6
   13e9a:	       lea 28(sp),sp
   13e9e:	       rts

00013ea0 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   13ea0:	       subq.l #4,sp
	KPrintF("running setCustomEncoding\n");
   13ea2:	       pea 1ba65 <talk.c.490538ff+0xf13>
   13ea8:	       jsr 183ec <KPrintF>
   13eae:	       addq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13eb0:	       movea.l 12(sp),a0
   13eb4:	       move.l 24(a0),d0
   13eb8:	       move.l d0,-(sp)
   13eba:	       pea 1 <_start+0x1>
   13ebe:	       move.l sp,d0
   13ec0:	       addq.l #8,d0
   13ec2:	       move.l d0,-(sp)
   13ec4:	       jsr 1590c <getValueType>
   13eca:	       lea 12(sp),sp
   13ece:	       tst.w d0
   13ed0:	   ,-- bne.s 13ed6 <builtIn_setCustomEncoding+0x36>
   13ed2:	   |   moveq #1,d0
   13ed4:	,--|-- bra.s 13f0c <builtIn_setCustomEncoding+0x6c>
	saveEncoding = n;
   13ed6:	|  '-> move.l (sp),d0
   13ed8:	|      move.l d0,d0
   13eda:	|      move.w d0,1c86e <saveEncoding>
	trimStack (&fun -> stack);
   13ee0:	|      moveq #24,d0
   13ee2:	|      add.l 12(sp),d0
   13ee6:	|      move.l d0,-(sp)
   13ee8:	|      jsr 16290 <trimStack>
   13eee:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   13ef0:	|      moveq #28,d0
   13ef2:	|      add.l 12(sp),d0
   13ef6:	|      pea 1 <_start+0x1>
   13efa:	|      pea 1 <_start+0x1>
   13efe:	|      move.l d0,-(sp)
   13f00:	|      jsr 161fe <setVariable>
   13f06:	|      lea 12(sp),sp
	return BR_CONTINUE;
   13f0a:	|      moveq #2,d0
}
   13f0c:	'----> addq.l #4,sp
   13f0e:	       rts

00013f10 <builtIn_freeSound>:

builtIn(freeSound)
{
   13f10:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   13f12:	       movea.l 12(sp),a0
   13f16:	       move.l 24(a0),d0
   13f1a:	       move.l d0,-(sp)
   13f1c:	       pea 5 <_start+0x5>
   13f20:	       move.l sp,d0
   13f22:	       addq.l #8,d0
   13f24:	       move.l d0,-(sp)
   13f26:	       jsr 1590c <getValueType>
   13f2c:	       lea 12(sp),sp
   13f30:	       tst.w d0
   13f32:	   ,-- bne.s 13f38 <builtIn_freeSound+0x28>
   13f34:	   |   moveq #1,d0
   13f36:	,--|-- bra.s 13f56 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   13f38:	|  '-> moveq #24,d0
   13f3a:	|      add.l 12(sp),d0
   13f3e:	|      move.l d0,-(sp)
   13f40:	|      jsr 16290 <trimStack>
   13f46:	|      addq.l #4,sp
	huntKillFreeSound (v);
   13f48:	|      move.l (sp),d0
   13f4a:	|      move.l d0,-(sp)
   13f4c:	|      jsr da38 <huntKillFreeSound>
   13f52:	|      addq.l #4,sp
	return BR_CONTINUE;
   13f54:	|      moveq #2,d0
}
   13f56:	'----> addq.l #4,sp
   13f58:	       rts

00013f5a <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   13f5a:	       lea -12(sp),sp
   13f5e:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13f60:	       movea.l 24(sp),a0
   13f64:	       move.l 24(a0),d0
   13f68:	       move.l d0,-(sp)
   13f6a:	       pea 1 <_start+0x1>
   13f6e:	       moveq #16,d0
   13f70:	       add.l sp,d0
   13f72:	       move.l d0,-(sp)
   13f74:	       jsr 1590c <getValueType>
   13f7a:	       lea 12(sp),sp
   13f7e:	       tst.w d0
   13f80:	   ,-- bne.s 13f88 <builtIn_parallaxAdd+0x2e>
   13f82:	   |   moveq #1,d0
   13f84:	,--|-- bra.w 1405c <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   13f88:	|  '-> moveq #24,d0
   13f8a:	|      add.l 24(sp),d0
   13f8e:	|      move.l d0,-(sp)
   13f90:	|      jsr 16290 <trimStack>
   13f96:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13f98:	|      movea.l 24(sp),a0
   13f9c:	|      move.l 24(a0),d0
   13fa0:	|      move.l d0,-(sp)
   13fa2:	|      pea 1 <_start+0x1>
   13fa6:	|      moveq #20,d0
   13fa8:	|      add.l sp,d0
   13faa:	|      move.l d0,-(sp)
   13fac:	|      jsr 1590c <getValueType>
   13fb2:	|      lea 12(sp),sp
   13fb6:	|      tst.w d0
   13fb8:	|  ,-- bne.s 13fc0 <builtIn_parallaxAdd+0x66>
   13fba:	|  |   moveq #1,d0
   13fbc:	+--|-- bra.w 1405c <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   13fc0:	|  '-> moveq #24,d0
   13fc2:	|      add.l 24(sp),d0
   13fc6:	|      move.l d0,-(sp)
   13fc8:	|      jsr 16290 <trimStack>
   13fce:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   13fd0:	|      movea.l 24(sp),a0
   13fd4:	|      move.l 24(a0),d0
   13fd8:	|      move.l d0,-(sp)
   13fda:	|      pea 5 <_start+0x5>
   13fde:	|      lea 12(sp),a0
   13fe2:	|      move.l a0,-(sp)
   13fe4:	|      jsr 1590c <getValueType>
   13fea:	|      lea 12(sp),sp
   13fee:	|      tst.w d0
   13ff0:	|  ,-- bne.s 13ff6 <builtIn_parallaxAdd+0x9c>
   13ff2:	|  |   moveq #1,d0
   13ff4:	+--|-- bra.s 1405c <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   13ff6:	|  '-> moveq #24,d0
   13ff8:	|      add.l 24(sp),d0
   13ffc:	|      move.l d0,-(sp)
   13ffe:	|      jsr 16290 <trimStack>
   14004:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   14006:	|      move.l 8(sp),d0
   1400a:	|      move.l d0,d0
   1400c:	|      moveq #0,d2
   1400e:	|      move.w d0,d2
   14010:	|      move.l 12(sp),d0
   14014:	|      move.l d0,d0
   14016:	|      moveq #0,d1
   14018:	|      move.w d0,d1
   1401a:	|      move.l 4(sp),d0
   1401e:	|      move.l d0,d0
   14020:	|      move.w d0,d0
   14022:	|      andi.l #65535,d0
   14028:	|      move.l d2,-(sp)
   1402a:	|      move.l d1,-(sp)
   1402c:	|      move.l d0,-(sp)
   1402e:	|      jsr dc5e <loadParallax>
   14034:	|      lea 12(sp),sp
   14038:	|      tst.w d0
   1403a:	|  ,-- bne.s 14040 <builtIn_parallaxAdd+0xe6>
   1403c:	|  |   moveq #1,d0
   1403e:	+--|-- bra.s 1405c <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   14040:	|  '-> moveq #28,d0
   14042:	|      add.l 24(sp),d0
   14046:	|      pea 1 <_start+0x1>
   1404a:	|      pea 1 <_start+0x1>
   1404e:	|      move.l d0,-(sp)
   14050:	|      jsr 161fe <setVariable>
   14056:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   1405a:	|      moveq #2,d0
}
   1405c:	'----> move.l (sp)+,d2
   1405e:	       lea 12(sp),sp
   14062:	       rts

00014064 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   14064:	jsr db96 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   1406a:	moveq #28,d0
   1406c:	add.l 8(sp),d0
   14070:	pea 1 <_start+0x1>
   14074:	pea 1 <_start+0x1>
   14078:	move.l d0,-(sp)
   1407a:	jsr 161fe <setVariable>
   14080:	lea 12(sp),sp
	return BR_CONTINUE;
   14084:	moveq #2,d0
}
   14086:	rts

00014088 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   14088:	pea 1ba80 <talk.c.490538ff+0xf2e>
   1408e:	jsr 183ec <KPrintF>
   14094:	addq.l #4,sp

	return BR_CONTINUE;
   14096:	moveq #2,d0
}
   14098:	rts

0001409a <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   1409a:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   1409c:	             movea.l 16(sp),a0
   140a0:	             movea.l 24(a0),a0
   140a4:	             move.l (a0),d0
   140a6:	             moveq #1,d1
   140a8:	             cmp.l d0,d1
   140aa:	      ,----- beq.s 140f2 <builtIn_makeFastArray+0x58>
   140ac:	      |      moveq #6,d1
   140ae:	      |      cmp.l d0,d1
   140b0:	,-----|----- bne.s 14130 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   140b2:	|     |      movea.l 16(sp),a0
   140b6:	|     |      movea.l 24(a0),a0
   140ba:	|     |      move.l 4(a0),d1
   140be:	|     |      moveq #28,d0
   140c0:	|     |      add.l 16(sp),d0
   140c4:	|     |      move.l d1,-(sp)
   140c6:	|     |      move.l d0,-(sp)
   140c8:	|     |      jsr 159be <makeFastArrayFromStack>
   140ce:	|     |      addq.l #8,sp
   140d0:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   140d4:	|     |      moveq #24,d0
   140d6:	|     |      add.l 16(sp),d0
   140da:	|     |      move.l d0,-(sp)
   140dc:	|     |      jsr 16290 <trimStack>
   140e2:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   140e4:	|     |      tst.w 6(sp)
   140e8:	|     |  ,-- beq.s 140ee <builtIn_makeFastArray+0x54>
   140ea:	|     |  |   moveq #2,d0
   140ec:	|  ,--|--|-- bra.s 14142 <builtIn_makeFastArray+0xa8>
   140ee:	|  |  |  '-> moveq #1,d0
   140f0:	|  +--|----- bra.s 14142 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   140f2:	|  |  '----> movea.l 16(sp),a0
   140f6:	|  |         movea.l 24(a0),a0
   140fa:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   14100:	|  |         moveq #24,d0
   14102:	|  |         add.l 16(sp),d0
   14106:	|  |         move.l d0,-(sp)
   14108:	|  |         jsr 16290 <trimStack>
   1410e:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   14110:	|  |         moveq #28,d0
   14112:	|  |         add.l 16(sp),d0
   14116:	|  |         move.l 2(sp),-(sp)
   1411a:	|  |         move.l d0,-(sp)
   1411c:	|  |         jsr 15a28 <makeFastArraySize>
   14122:	|  |         addq.l #8,sp
   14124:	|  |         tst.w d0
   14126:	|  |     ,-- beq.s 1412c <builtIn_makeFastArray+0x92>
   14128:	|  |     |   moveq #2,d0
   1412a:	|  +-----|-- bra.s 14142 <builtIn_makeFastArray+0xa8>
   1412c:	|  |     '-> moveq #1,d0
   1412e:	|  +-------- bra.s 14142 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   14130:	'--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   14132:	   |         pea 1baa9 <talk.c.490538ff+0xf57>
   14138:	   |         jsr 183ec <KPrintF>
   1413e:	   |         addq.l #4,sp
	return BR_ERROR;
   14140:	   |         moveq #1,d0
}
   14142:	   '-------> addq.l #8,sp
   14144:	             rts

00014146 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   14146:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   14148:	          movea.l 16(sp),a0
   1414c:	          move.l 24(a0),d0
   14150:	          move.l d0,-(sp)
   14152:	          pea 7 <_start+0x7>
   14156:	          move.l sp,d0
   14158:	          addq.l #8,d0
   1415a:	          move.l d0,-(sp)
   1415c:	          jsr 1590c <getValueType>
   14162:	          lea 12(sp),sp
   14166:	          tst.w d0
   14168:	      ,-- bne.s 1416e <builtIn_getCharacterScale+0x28>
   1416a:	      |   moveq #1,d0
   1416c:	,-----|-- bra.s 141e8 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   1416e:	|     '-> moveq #24,d0
   14170:	|         add.l 16(sp),d0
   14174:	|         move.l d0,-(sp)
   14176:	|         jsr 16290 <trimStack>
   1417c:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   1417e:	|         move.l (sp),d0
   14180:	|         move.l d0,-(sp)
   14182:	|         jsr ae9c <findPerson>
   14188:	|         addq.l #4,sp
   1418a:	|         move.l d0,4(sp)
	if (pers) {
   1418e:	|  ,----- beq.s 141ce <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   14190:	|  |      movea.l 4(sp),a0
   14194:	|  |      move.l 32(a0),d0
   14198:	|  |      move.l #1120403456,-(sp)
   1419e:	|  |      move.l d0,-(sp)
   141a0:	|  |      jsr 188d0 <__mulsf3>
   141a6:	|  |      addq.l #8,sp
   141a8:	|  |      move.l d0,-(sp)
   141aa:	|  |      jsr 187b6 <__fixsfsi>
   141b0:	|  |      addq.l #4,sp
   141b2:	|  |      move.l d0,d1
   141b4:	|  |      moveq #28,d0
   141b6:	|  |      add.l 16(sp),d0
   141ba:	|  |      move.l d1,-(sp)
   141bc:	|  |      pea 1 <_start+0x1>
   141c0:	|  |      move.l d0,-(sp)
   141c2:	|  |      jsr 161fe <setVariable>
   141c8:	|  |      lea 12(sp),sp
   141cc:	|  |  ,-- bra.s 141e6 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   141ce:	|  '--|-> moveq #28,d0
   141d0:	|     |   add.l 16(sp),d0
   141d4:	|     |   clr.l -(sp)
   141d6:	|     |   pea 1 <_start+0x1>
   141da:	|     |   move.l d0,-(sp)
   141dc:	|     |   jsr 161fe <setVariable>
   141e2:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   141e6:	|     '-> moveq #2,d0
}
   141e8:	'-------> addq.l #8,sp
   141ea:	          rts

000141ec <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   141ec:	move.l 1c892 <gameSettings>,d0
   141f2:	move.l d0,d1
   141f4:	moveq #28,d0
   141f6:	add.l 8(sp),d0
   141fa:	move.l d1,-(sp)
   141fc:	pea 1 <_start+0x1>
   14200:	move.l d0,-(sp)
   14202:	jsr 161fe <setVariable>
   14208:	lea 12(sp),sp
	return BR_CONTINUE;
   1420c:	moveq #2,d0
}
   1420e:	rts

00014210 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   14210:	moveq #24,d0
   14212:	add.l 8(sp),d0
   14216:	move.l d0,-(sp)
   14218:	jsr 16290 <trimStack>
   1421e:	addq.l #4,sp
	trimStack (&fun -> stack);
   14220:	moveq #24,d0
   14222:	add.l 8(sp),d0
   14226:	move.l d0,-(sp)
   14228:	jsr 16290 <trimStack>
   1422e:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   14230:	moveq #28,d0
   14232:	add.l 8(sp),d0
   14236:	clr.l -(sp)
   14238:	pea 1 <_start+0x1>
   1423c:	move.l d0,-(sp)
   1423e:	jsr 161fe <setVariable>
   14244:	lea 12(sp),sp

	return BR_CONTINUE;
   14248:	moveq #2,d0

}
   1424a:	rts

0001424c <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   1424c:	move.l 1c128 <lastFramesPerSecond>,d1
   14252:	moveq #28,d0
   14254:	add.l 8(sp),d0
   14258:	move.l d1,-(sp)
   1425a:	pea 1 <_start+0x1>
   1425e:	move.l d0,-(sp)
   14260:	jsr 161fe <setVariable>
   14266:	lea 12(sp),sp
	return BR_CONTINUE;
   1426a:	moveq #2,d0
}
   1426c:	rts

0001426e <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   1426e:	moveq #2,d0
}
   14270:	rts

00014272 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   14272:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   14276:	          movea.l 60(sp),a0
   1427a:	          move.l 24(a0),d0
   1427e:	          move.l d0,-(sp)
   14280:	          pea 1 <_start+0x1>
   14284:	          pea 1c6c2 <thumbHeight>
   1428a:	          jsr 1590c <getValueType>
   14290:	          lea 12(sp),sp
   14294:	          tst.w d0
   14296:	      ,-- bne.s 1429e <builtIn_setThumbnailSize+0x2c>
   14298:	      |   moveq #1,d0
   1429a:	,-----|-- bra.w 1435a <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   1429e:	|     '-> moveq #24,d0
   142a0:	|         add.l 60(sp),d0
   142a4:	|         move.l d0,-(sp)
   142a6:	|         jsr 16290 <trimStack>
   142ac:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   142ae:	|         movea.l 60(sp),a0
   142b2:	|         move.l 24(a0),d0
   142b6:	|         move.l d0,-(sp)
   142b8:	|         pea 1 <_start+0x1>
   142bc:	|         pea 1c6be <thumbWidth>
   142c2:	|         jsr 1590c <getValueType>
   142c8:	|         lea 12(sp),sp
   142cc:	|         tst.w d0
   142ce:	|     ,-- bne.s 142d6 <builtIn_setThumbnailSize+0x64>
   142d0:	|     |   moveq #1,d0
   142d2:	+-----|-- bra.w 1435a <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   142d6:	|     '-> moveq #24,d0
   142d8:	|         add.l 60(sp),d0
   142dc:	|         move.l d0,-(sp)
   142de:	|         jsr 16290 <trimStack>
   142e4:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   142e6:	|         move.l 1c6be <thumbWidth>,d0
   142ec:	|     ,-- bmi.s 1431a <builtIn_setThumbnailSize+0xa8>
   142ee:	|     |   move.l 1c6c2 <thumbHeight>,d0
   142f4:	|     +-- bmi.s 1431a <builtIn_setThumbnailSize+0xa8>
   142f6:	|     |   move.l 1c6be <thumbWidth>,d0
   142fc:	|     |   move.l d0,d1
   142fe:	|     |   move.l 1c702 <winWidth>,d0
   14304:	|     |   cmp.l d1,d0
   14306:	|     +-- bcs.s 1431a <builtIn_setThumbnailSize+0xa8>
   14308:	|     |   move.l 1c6c2 <thumbHeight>,d0
   1430e:	|     |   move.l d0,d1
   14310:	|     |   move.l 1c706 <winHeight>,d0
   14316:	|     |   cmp.l d1,d0
   14318:	|  ,--|-- bcc.s 14358 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   1431a:	|  |  '-> move.l 1c6c2 <thumbHeight>,d1
   14320:	|  |      move.l 1c6be <thumbWidth>,d0
   14326:	|  |      move.l d1,-(sp)
   14328:	|  |      move.l d0,-(sp)
   1432a:	|  |      pea 1bad0 <talk.c.490538ff+0xf7e>
   14330:	|  |      lea 14(sp),a0
   14334:	|  |      move.l a0,-(sp)
   14336:	|  |      jsr 15116 <sprintf>
   1433c:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   14340:	|  |      lea 2(sp),a0
   14344:	|  |      move.l a0,-(sp)
   14346:	|  |      pea 1bad8 <talk.c.490538ff+0xf86>
   1434c:	|  |      jsr 183ec <KPrintF>
   14352:	|  |      addq.l #8,sp
		return BR_ERROR;
   14354:	|  |      moveq #1,d0
   14356:	+--|----- bra.s 1435a <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   14358:	|  '----> moveq #2,d0
}
   1435a:	'-------> lea 52(sp),sp
   1435e:	          rts

00014360 <builtIn_hasFlag>:

builtIn(hasFlag)
{
   14360:	       lea -12(sp),sp
   14364:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   14366:	       movea.l 24(sp),a0
   1436a:	       move.l 24(a0),d0
   1436e:	       move.l d0,-(sp)
   14370:	       pea 1 <_start+0x1>
   14374:	       lea 12(sp),a0
   14378:	       move.l a0,-(sp)
   1437a:	       jsr 1590c <getValueType>
   14380:	       lea 12(sp),sp
   14384:	       tst.w d0
   14386:	   ,-- bne.s 1438e <builtIn_hasFlag+0x2e>
   14388:	   |   moveq #1,d0
   1438a:	,--|-- bra.w 1441e <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   1438e:	|  '-> moveq #24,d0
   14390:	|      add.l 24(sp),d0
   14394:	|      move.l d0,-(sp)
   14396:	|      jsr 16290 <trimStack>
   1439c:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1439e:	|      movea.l 24(sp),a0
   143a2:	|      move.l 24(a0),d0
   143a6:	|      move.l d0,-(sp)
   143a8:	|      pea 7 <_start+0x7>
   143ac:	|      moveq #16,d0
   143ae:	|      add.l sp,d0
   143b0:	|      move.l d0,-(sp)
   143b2:	|      jsr 1590c <getValueType>
   143b8:	|      lea 12(sp),sp
   143bc:	|      tst.w d0
   143be:	|  ,-- bne.s 143c4 <builtIn_hasFlag+0x64>
   143c0:	|  |   moveq #1,d0
   143c2:	+--|-- bra.s 1441e <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   143c4:	|  '-> moveq #24,d0
   143c6:	|      add.l 24(sp),d0
   143ca:	|      move.l d0,-(sp)
   143cc:	|      jsr 16290 <trimStack>
   143d2:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   143d4:	|      move.l 8(sp),d0
   143d8:	|      move.l d0,-(sp)
   143da:	|      jsr de0a <findObjectType>
   143e0:	|      addq.l #4,sp
   143e2:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   143e6:	|  ,-- bne.s 143ec <builtIn_hasFlag+0x8c>
   143e8:	|  |   moveq #1,d0
   143ea:	+--|-- bra.s 1441e <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   143ec:	|  '-> movea.l 12(sp),a0
   143f0:	|      move.w 36(a0),d0
   143f4:	|      moveq #0,d2
   143f6:	|      move.w d0,d2
   143f8:	|      move.l 4(sp),d1
   143fc:	|      moveq #1,d0
   143fe:	|      lsl.l d1,d0
   14400:	|      move.l d2,d1
   14402:	|      and.l d0,d1
   14404:	|      moveq #28,d0
   14406:	|      add.l 24(sp),d0
   1440a:	|      move.l d1,-(sp)
   1440c:	|      pea 1 <_start+0x1>
   14410:	|      move.l d0,-(sp)
   14412:	|      jsr 161fe <setVariable>
   14418:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1441c:	|      moveq #2,d0
}
   1441e:	'----> move.l (sp)+,d2
   14420:	       lea 12(sp),sp
   14424:	       rts

00014426 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   14426:	       jsr ddf8 <snapshot>
   1442c:	       tst.w d0
   1442e:	,----- beq.s 14434 <builtIn_snapshotGrab+0xe>
   14430:	|      moveq #2,d0
   14432:	|  ,-- bra.s 14436 <builtIn_snapshotGrab+0x10>
   14434:	'--|-> moveq #1,d0
}
   14436:	   '-> rts

00014438 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   14438:	jsr dca4 <nosnapshot>
	return BR_CONTINUE;
   1443e:	moveq #2,d0
}
   14440:	rts

00014442 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   14442:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   14444:	move.w 1c000 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   1444c:	movea.l 12(sp),a0
   14450:	move.l 24(a0),d0
   14454:	move.l d0,-(sp)
   14456:	jsr 15e4c <getBoolean>
   1445c:	addq.l #4,sp
   1445e:	move.w d0,1c000 <allowAnyFilename>
	trimStack (&fun -> stack);
   14464:	moveq #24,d0
   14466:	add.l 12(sp),d0
   1446a:	move.l d0,-(sp)
   1446c:	jsr 16290 <trimStack>
   14472:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   14474:	movea.w 2(sp),a0
   14478:	moveq #28,d0
   1447a:	add.l 12(sp),d0
   1447e:	move.l a0,-(sp)
   14480:	pea 1 <_start+0x1>
   14484:	move.l d0,-(sp)
   14486:	jsr 161fe <setVariable>
   1448c:	lea 12(sp),sp
	return BR_CONTINUE;
   14490:	moveq #2,d0
}
   14492:	addq.l #4,sp
   14494:	rts

00014496 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   14496:	moveq #24,d0
   14498:	add.l 8(sp),d0
   1449c:	move.l d0,-(sp)
   1449e:	jsr 16290 <trimStack>
   144a4:	addq.l #4,sp
	trimStack (&fun -> stack);
   144a6:	moveq #24,d0
   144a8:	add.l 8(sp),d0
   144ac:	move.l d0,-(sp)
   144ae:	jsr 16290 <trimStack>
   144b4:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   144b6:	moveq #28,d0
   144b8:	add.l 8(sp),d0
   144bc:	clr.l -(sp)
   144be:	pea 1 <_start+0x1>
   144c2:	move.l d0,-(sp)
   144c4:	jsr 161fe <setVariable>
   144ca:	lea 12(sp),sp

	return BR_CONTINUE;
   144ce:	moveq #2,d0
}
   144d0:	rts

000144d2 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   144d2:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   144d4:	movea.l 12(sp),a0
   144d8:	move.l 24(a0),d0
   144dc:	move.l d0,-(sp)
   144de:	jsr 15ee2 <getTextFromAnyVar>
   144e4:	addq.l #4,sp
   144e6:	move.l d0,(sp)
	trimStack (&fun -> stack);
   144e8:	moveq #24,d0
   144ea:	add.l 12(sp),d0
   144ee:	move.l d0,-(sp)
   144f0:	jsr 16290 <trimStack>
   144f6:	addq.l #4,sp
	KPrintF (mess);
   144f8:	move.l (sp),-(sp)
   144fa:	jsr 183ec <KPrintF>
   14500:	addq.l #4,sp
	return BR_ERROR;
   14502:	moveq #1,d0
}
   14504:	addq.l #4,sp
   14506:	rts

00014508 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   14508:	moveq #24,d0
   1450a:	add.l 8(sp),d0
   1450e:	move.l d0,-(sp)
   14510:	jsr 16290 <trimStack>
   14516:	addq.l #4,sp
	trimStack (&fun -> stack);
   14518:	moveq #24,d0
   1451a:	add.l 8(sp),d0
   1451e:	move.l d0,-(sp)
   14520:	jsr 16290 <trimStack>
   14526:	addq.l #4,sp
	trimStack (&fun -> stack);
   14528:	moveq #24,d0
   1452a:	add.l 8(sp),d0
   1452e:	move.l d0,-(sp)
   14530:	jsr 16290 <trimStack>
   14536:	addq.l #4,sp
	trimStack (&fun -> stack);
   14538:	moveq #24,d0
   1453a:	add.l 8(sp),d0
   1453e:	move.l d0,-(sp)
   14540:	jsr 16290 <trimStack>
   14546:	addq.l #4,sp

	return BR_CONTINUE;
   14548:	moveq #2,d0
}
   1454a:	rts

0001454c <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1454c:	moveq #24,d0
   1454e:	add.l 8(sp),d0
   14552:	move.l d0,-(sp)
   14554:	jsr 16290 <trimStack>
   1455a:	addq.l #4,sp
	trimStack (&fun -> stack);
   1455c:	moveq #24,d0
   1455e:	add.l 8(sp),d0
   14562:	move.l d0,-(sp)
   14564:	jsr 16290 <trimStack>
   1456a:	addq.l #4,sp
	trimStack (&fun -> stack);
   1456c:	moveq #24,d0
   1456e:	add.l 8(sp),d0
   14572:	move.l d0,-(sp)
   14574:	jsr 16290 <trimStack>
   1457a:	addq.l #4,sp

	return BR_CONTINUE;
   1457c:	moveq #2,d0

}
   1457e:	rts

00014580 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   14580:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   14582:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   14588:	sne d0
   1458a:	neg.b d0
   1458c:	moveq #0,d1
   1458e:	move.b d0,d1
   14590:	moveq #28,d0
   14592:	add.l 12(sp),d0
   14596:	move.l d1,-(sp)
   14598:	pea 1 <_start+0x1>
   1459c:	move.l d0,-(sp)
   1459e:	jsr 161fe <setVariable>
   145a4:	lea 12(sp),sp
	return BR_CONTINUE;
   145a8:	moveq #2,d0
}
   145aa:	addq.l #4,sp
   145ac:	rts

000145ae <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   145ae:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   145b0:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   145b6:	pea 1baef <talk.c.490538ff+0xf9d>
   145bc:	jsr 183ec <KPrintF>
   145c2:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   145c4:	tst.w 2(sp)
   145c8:	sne d0
   145ca:	neg.b d0
   145cc:	moveq #0,d1
   145ce:	move.b d0,d1
   145d0:	moveq #28,d0
   145d2:	add.l 12(sp),d0
   145d6:	move.l d1,-(sp)
   145d8:	pea 1 <_start+0x1>
   145dc:	move.l d0,-(sp)
   145de:	jsr 161fe <setVariable>
   145e4:	lea 12(sp),sp
	return BR_CONTINUE;
   145e8:	moveq #2,d0
}
   145ea:	addq.l #4,sp
   145ec:	rts

000145ee <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   145ee:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   145f2:	             move.l 104(sp),d0
   145f6:	             cmpi.l #167,d0
   145fc:	,----------- bhi.w 146de <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   14600:	|            move.l 104(sp),d0
   14604:	|            add.l d0,d0
   14606:	|            movea.l d0,a1
   14608:	|            adda.l d0,a1
   1460a:	|            lea 1c146 <paramNum>,a0
   14610:	|            move.l (0,a1,a0.l),d0
   14614:	|            moveq #-1,d1
   14616:	|            cmp.l d0,d1
   14618:	|  ,-------- beq.w 146a6 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   1461c:	|  |         move.l 104(sp),d0
   14620:	|  |         add.l d0,d0
   14622:	|  |         movea.l d0,a1
   14624:	|  |         adda.l d0,a1
   14626:	|  |         lea 1c146 <paramNum>,a0
   1462c:	|  |         move.l (0,a1,a0.l),d0
   14630:	|  |         cmp.l 108(sp),d0
   14634:	|  +-------- beq.s 146a6 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   14636:	|  |         move.l 104(sp),d0
   1463a:	|  |         add.l d0,d0
   1463c:	|  |         movea.l d0,a1
   1463e:	|  |         adda.l d0,a1
   14640:	|  |         lea 1c146 <paramNum>,a0
   14646:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   1464a:	|  |         moveq #1,d1
   1464c:	|  |         cmp.l d0,d1
   1464e:	|  |  ,----- bne.s 14658 <callBuiltIn+0x6a>
   14650:	|  |  |      move.l #105413,d0
   14656:	|  |  |  ,-- bra.s 1465e <callBuiltIn+0x70>
   14658:	|  |  '--|-> move.l #113445,d0
   1465e:	|  |     '-> move.l 104(sp),d1
   14662:	|  |         add.l d1,d1
   14664:	|  |         movea.l d1,a1
   14666:	|  |         adda.l d1,a1
   14668:	|  |         lea 1c146 <paramNum>,a0
   1466e:	|  |         move.l (0,a1,a0.l),d1
   14672:	|  |         move.l d0,-(sp)
   14674:	|  |         move.l d1,-(sp)
   14676:	|  |         pea 1bb27 <talk.c.490538ff+0xfd5>
   1467c:	|  |         lea 12(sp),a0
   14680:	|  |         move.l a0,-(sp)
   14682:	|  |         jsr 15116 <sprintf>
   14688:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   1468c:	|  |         movea.l sp,a0
   1468e:	|  |         move.l a0,-(sp)
   14690:	|  |         jsr b8 <copyString>
   14696:	|  |         addq.l #4,sp
   14698:	|  |         move.l d0,-(sp)
   1469a:	|  |         jsr 183ec <KPrintF>
   146a0:	|  |         addq.l #4,sp
				return BR_ERROR;
   146a2:	|  |         moveq #1,d0
   146a4:	|  |     ,-- bra.s 146ee <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   146a6:	|  '-----|-> move.l 104(sp),d0
   146aa:	|        |   add.l d0,d0
   146ac:	|        |   movea.l d0,a1
   146ae:	|        |   adda.l d0,a1
   146b0:	|        |   lea 1c3e6 <builtInFunctionArray>,a0
   146b6:	|        |   move.l (0,a1,a0.l),d0
   146ba:	+--------|-- beq.s 146de <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);			return builtInFunctionArray[whichFunc].func (numParams, fun);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   146bc:	|        |   move.l 104(sp),d0
   146c0:	|        |   add.l d0,d0
   146c2:	|        |   movea.l d0,a1
   146c4:	|        |   adda.l d0,a1
   146c6:	|        |   lea 1c3e6 <builtInFunctionArray>,a0
   146cc:	|        |   movea.l (0,a1,a0.l),a0
   146d0:	|        |   move.l 112(sp),-(sp)
   146d4:	|        |   move.l 112(sp),-(sp)
   146d8:	|        |   jsr (a0)
   146da:	|        |   addq.l #8,sp
   146dc:	|        +-- bra.s 146ee <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   146de:	'--------|-> pea 1bb52 <talk.c.490538ff+0x1000>
   146e4:	         |   jsr 183ec <KPrintF>
   146ea:	         |   addq.l #4,sp
	return BR_ERROR;
   146ec:	         |   moveq #1,d0
}
   146ee:	         '-> lea 100(sp),sp
   146f2:	             rts

000146f4 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   146f4:	          subq.l #8,sp
	int indexNum = -1;
   146f6:	          moveq #-1,d0
   146f8:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   146fc:	          clr.l (sp)
   146fe:	   ,----- bra.s 14724 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   14700:	,--|----> move.l 1c88a <languageTable>,d1
   14706:	|  |      move.l (sp),d0
   14708:	|  |      add.l d0,d0
   1470a:	|  |      add.l d0,d0
   1470c:	|  |      movea.l d1,a0
   1470e:	|  |      adda.l d0,a0
   14710:	|  |      move.l (a0),d0
   14712:	|  |      move.l d0,d1
   14714:	|  |      move.l 1c892 <gameSettings>,d0
   1471a:	|  |      cmp.l d1,d0
   1471c:	|  |  ,-- bne.s 14722 <getLanguageForFileB+0x2e>
   1471e:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   14722:	|  |  '-> addq.l #1,(sp)
   14724:	|  '----> move.l 1c896 <gameSettings+0x4>,d0
   1472a:	|         cmp.l (sp),d0
   1472c:	'-------- bcc.s 14700 <getLanguageForFileB+0xc>
	}

	return indexNum;
   1472e:	          move.l 4(sp),d0
}
   14732:	          addq.l #8,sp
   14734:	          rts

00014736 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   14736:	          lea -20(sp),sp
   1473a:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   1473c:	          move.l 28(sp),-(sp)
   14740:	          jsr 14df8 <strlen>
   14746:	          addq.l #4,sp
   14748:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   1474c:	          moveq #4,d0
   1474e:	          cmp.l 12(sp),d0
   14752:	      ,-- bge.s 14776 <getPrefsFilename+0x40>
   14754:	      |   move.l 12(sp),d0
   14758:	      |   subq.l #4,d0
   1475a:	      |   movea.l 28(sp),a0
   1475e:	      |   adda.l d0,a0
   14760:	      |   move.b (a0),d0
   14762:	      |   cmpi.b #46,d0
   14766:	      +-- bne.s 14776 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   14768:	      |   move.l 12(sp),d0
   1476c:	      |   subq.l #4,d0
   1476e:	      |   movea.l 28(sp),a0
   14772:	      |   adda.l d0,a0
   14774:	      |   clr.b (a0)
	}

	char * f = filename;
   14776:	      '-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   1477c:	          clr.l 20(sp)
   14780:	   ,----- bra.s 147a8 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   14782:	,--|----> move.l 20(sp),d0
   14786:	|  |      movea.l 28(sp),a0
   1478a:	|  |      adda.l d0,a0
   1478c:	|  |      move.b (a0),d0
   1478e:	|  |      cmpi.b #47,d0
   14792:	|  |  ,-- bne.s 147a4 <getPrefsFilename+0x6e>
   14794:	|  |  |   move.l 20(sp),d0
   14798:	|  |  |   addq.l #1,d0
   1479a:	|  |  |   move.l 28(sp),d1
   1479e:	|  |  |   add.l d0,d1
   147a0:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   147a4:	|  |  '-> addq.l #1,20(sp)
   147a8:	|  '----> move.l 20(sp),d0
   147ac:	|         cmp.l 12(sp),d0
   147b0:	'-------- blt.s 14782 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   147b2:	          pea 1bb7d <talk.c.490538ff+0x102b>
   147b8:	          move.l 20(sp),-(sp)
   147bc:	          jsr 14e38 <joinStrings>
   147c2:	          addq.l #8,sp
   147c4:	          move.l d0,8(sp)

	FreeVec(filename);
   147c8:	          move.l 28(sp),4(sp)
   147ce:	          move.l 1c7ba <SysBase>,d0
   147d4:	          movea.l d0,a6
   147d6:	          movea.l 4(sp),a1
   147da:	          jsr -690(a6)
	filename = NULL;
   147de:	          clr.l 28(sp)
	return joined;
   147e2:	          move.l 8(sp),d0
}
   147e6:	          movea.l (sp)+,a6
   147e8:	          lea 20(sp),sp
   147ec:	          rts

000147ee <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   147ee:	             lea -28(sp),sp
   147f2:	             move.l a6,-(sp)
   147f4:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   147f6:	             move.l 1c896 <gameSettings+0x4>,d0
   147fc:	             move.l d0,d1
   147fe:	             addq.l #1,d1
   14800:	             move.l d1,28(sp)
   14804:	             clr.l 24(sp)
   14808:	             move.l 1c7ba <SysBase>,d0
   1480e:	             movea.l d0,a6
   14810:	             move.l 28(sp),d0
   14814:	             move.l 24(sp),d1
   14818:	             jsr -684(a6)
   1481c:	             move.l d0,20(sp)
   14820:	             move.l 20(sp),d0
   14824:	             move.l d0,1c88a <languageTable>
    if( languageTable == 0) {
   1482a:	             move.l 1c88a <languageTable>,d0
   14830:	         ,-- bne.s 14840 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   14832:	         |   pea 1bb82 <talk.c.490538ff+0x1030>
   14838:	         |   jsr 183ec <KPrintF>
   1483e:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   14840:	         '-> move.l 1c896 <gameSettings+0x4>,d0
   14846:	             move.l d0,d1
   14848:	             addq.l #1,d1
   1484a:	             move.l d1,16(sp)
   1484e:	             clr.l 12(sp)
   14852:	             move.l 1c7ba <SysBase>,d0
   14858:	             movea.l d0,a6
   1485a:	             move.l 16(sp),d0
   1485e:	             move.l 12(sp),d1
   14862:	             jsr -684(a6)
   14866:	             move.l d0,8(sp)
   1486a:	             move.l 8(sp),d0
   1486e:	             move.l d0,1c88e <languageName>
	if( languageName == 0) {
   14874:	             move.l 1c88e <languageName>,d0
   1487a:	         ,-- bne.s 1488a <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   1487c:	         |   pea 1bbb8 <talk.c.490538ff+0x1066>
   14882:	         |   jsr 183ec <KPrintF>
   14888:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1488a:	         '-> clr.l 32(sp)
   1488e:	   ,-------- bra.s 14906 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   14890:	,--|-------> tst.l 32(sp)
   14894:	|  |  ,----- beq.s 148a4 <makeLanguageTable+0xb6>
   14896:	|  |  |      move.l 40(sp),-(sp)
   1489a:	|  |  |      jsr 6bc <get2bytes>
   148a0:	|  |  |      addq.l #4,sp
   148a2:	|  |  |  ,-- bra.s 148a6 <makeLanguageTable+0xb8>
   148a4:	|  |  '--|-> moveq #0,d0
   148a6:	|  |     '-> movea.l 1c88a <languageTable>,a0
   148ac:	|  |         move.l 32(sp),d1
   148b0:	|  |         add.l d1,d1
   148b2:	|  |         add.l d1,d1
   148b4:	|  |         adda.l d1,a0
   148b6:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   148b8:	|  |         move.l 1c88e <languageName>,d1
   148be:	|  |         move.l 32(sp),d0
   148c2:	|  |         add.l d0,d0
   148c4:	|  |         add.l d0,d0
   148c6:	|  |         movea.l d1,a0
   148c8:	|  |         adda.l d0,a0
   148ca:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   148cc:	|  |         move.l 1c764 <gameVersion>,d0
   148d2:	|  |         cmpi.l #511,d0
   148d8:	|  |     ,-- ble.s 14902 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   148da:	|  |     |   move.l 1c896 <gameSettings+0x4>,d0
   148e0:	|  |     +-- beq.s 14902 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   148e2:	|  |     |   move.l 1c88e <languageName>,d1
   148e8:	|  |     |   move.l 32(sp),d0
   148ec:	|  |     |   add.l d0,d0
   148ee:	|  |     |   add.l d0,d0
   148f0:	|  |     |   movea.l d1,a2
   148f2:	|  |     |   adda.l d0,a2
   148f4:	|  |     |   move.l 40(sp),-(sp)
   148f8:	|  |     |   jsr b02 <readString>
   148fe:	|  |     |   addq.l #4,sp
   14900:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   14902:	|  |     '-> addq.l #1,32(sp)
   14906:	|  '-------> move.l 1c896 <gameSettings+0x4>,d0
   1490c:	|            cmp.l 32(sp),d0
   14910:	'----------- bcc.w 14890 <makeLanguageTable+0xa2>
		}
	}
}
   14914:	             nop
   14916:	             nop
   14918:	             movea.l (sp)+,a2
   1491a:	             movea.l (sp)+,a6
   1491c:	             lea 28(sp),sp
   14920:	             rts

00014922 <readIniFile>:

void readIniFile (char * filename) {
   14922:	                      lea -564(sp),sp
   14926:	                      move.l a6,-(sp)
   14928:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   1492a:	                      move.l 576(sp),-(sp)
   1492e:	                      jsr b8 <copyString>
   14934:	                      addq.l #4,sp
   14936:	                      move.l d0,-(sp)
   14938:	                      jsr 14736 <getPrefsFilename>
   1493e:	                      addq.l #4,sp
   14940:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   14944:	                      move.l 562(sp),558(sp)
   1494a:	                      move.l #1005,554(sp)
   14952:	                      move.l 1c7c2 <DOSBase>,d0
   14958:	                      movea.l d0,a6
   1495a:	                      move.l 558(sp),d1
   1495e:	                      move.l 554(sp),d2
   14962:	                      jsr -30(a6)
   14966:	                      move.l d0,550(sp)
   1496a:	                      move.l 550(sp),d0
   1496e:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   14972:	                      clr.l 1c892 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   14978:	                      move.w #1,1c89a <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   14980:	                      clr.l 1c89c <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   14986:	                      moveq #1,d0
   14988:	                      move.l d0,1c8a0 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   1498e:	                      clr.w 1c8a4 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   14994:	                      clr.w 1c8a6 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   1499a:	                      clr.w 1c8a8 <gameSettings+0x16>

	FreeVec(langName);
   149a0:	                      move.l 562(sp),542(sp)
   149a6:	                      move.l 1c7ba <SysBase>,d0
   149ac:	                      movea.l d0,a6
   149ae:	                      movea.l 542(sp),a1
   149b2:	                      jsr -690(a6)
	langName = NULL;
   149b6:	                      clr.l 562(sp)

	if (fp) {
   149ba:	                      tst.l 546(sp)
   149be:	,-------------------- beq.w 14c9c <readIniFile+0x37a>
		char lineSoFar[257] = "";
   149c2:	|                     move.l sp,d0
   149c4:	|                     addi.l #265,d0
   149ca:	|                     move.l #257,d1
   149d0:	|                     move.l d1,-(sp)
   149d2:	|                     clr.l -(sp)
   149d4:	|                     move.l d0,-(sp)
   149d6:	|                     jsr 18370 <memset>
   149dc:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   149e0:	|                     move.l sp,d0
   149e2:	|                     addq.l #8,d0
   149e4:	|                     move.l #257,d1
   149ea:	|                     move.l d1,-(sp)
   149ec:	|                     clr.l -(sp)
   149ee:	|                     move.l d0,-(sp)
   149f0:	|                     jsr 18370 <memset>
   149f6:	|                     lea 12(sp),sp
		unsigned char here = 0;
   149fa:	|                     clr.b 571(sp)
		char readChar = ' ';
   149fe:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   14a04:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   14a0a:	|                     clr.w 566(sp)
		LONG tmp = 0;
   14a0e:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   14a12:	|  ,----------------> move.l 546(sp),534(sp)
   14a18:	|  |                  move.l 1c7c2 <DOSBase>,d0
   14a1e:	|  |                  movea.l d0,a6
   14a20:	|  |                  move.l 534(sp),d1
   14a24:	|  |                  jsr -306(a6)
   14a28:	|  |                  move.l d0,530(sp)
   14a2c:	|  |                  move.l 530(sp),d0
   14a30:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   14a34:	|  |                  moveq #-1,d1
   14a36:	|  |                  cmp.l 538(sp),d1
   14a3a:	|  |           ,----- bne.s 14a48 <readIniFile+0x126>
				readChar = '\n';
   14a3c:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   14a42:	|  |           |      clr.w 568(sp)
   14a46:	|  |           |  ,-- bra.s 14a4e <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   14a48:	|  |           '--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   14a4e:	|  |              '-> move.b 570(sp),d0
   14a52:	|  |                  ext.w d0
   14a54:	|  |                  movea.w d0,a0
   14a56:	|  |                  moveq #61,d0
   14a58:	|  |                  cmp.l a0,d0
   14a5a:	|  |     ,----------- beq.w 14c04 <readIniFile+0x2e2>
   14a5e:	|  |     |            moveq #61,d1
   14a60:	|  |     |            cmp.l a0,d1
   14a62:	|  |  ,--|----------- blt.w 14c10 <readIniFile+0x2ee>
   14a66:	|  |  |  |            moveq #10,d0
   14a68:	|  |  |  |            cmp.l a0,d0
   14a6a:	|  |  |  |        ,-- beq.s 14a74 <readIniFile+0x152>
   14a6c:	|  |  |  |        |   moveq #13,d1
   14a6e:	|  |  |  |        |   cmp.l a0,d1
   14a70:	|  |  +--|--------|-- bne.w 14c10 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   14a74:	|  |  |  |        '-> tst.w 566(sp)
   14a78:	|  |  |  |     ,----- beq.w 14bf2 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   14a7c:	|  |  |  |     |      pea 1bbec <talk.c.490538ff+0x109a>
   14a82:	|  |  |  |     |      move.l sp,d0
   14a84:	|  |  |  |     |      addi.l #269,d0
   14a8a:	|  |  |  |     |      move.l d0,-(sp)
   14a8c:	|  |  |  |     |      jsr 14db8 <strcmp>
   14a92:	|  |  |  |     |      addq.l #8,sp
   14a94:	|  |  |  |     |      tst.l d0
   14a96:	|  |  |  |     |  ,-- bne.s 14ab0 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   14a98:	|  |  |  |     |  |   move.l sp,d0
   14a9a:	|  |  |  |     |  |   addq.l #8,d0
   14a9c:	|  |  |  |     |  |   move.l d0,-(sp)
   14a9e:	|  |  |  |     |  |   jsr 14ca8 <stringToInt>
   14aa4:	|  |  |  |     |  |   addq.l #4,sp
   14aa6:	|  |  |  |     |  |   move.l d0,1c892 <gameSettings>
   14aac:	|  |  |  |     +--|-- bra.w 14bf2 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   14ab0:	|  |  |  |     |  '-> pea 1bbf5 <talk.c.490538ff+0x10a3>
   14ab6:	|  |  |  |     |      move.l sp,d0
   14ab8:	|  |  |  |     |      addi.l #269,d0
   14abe:	|  |  |  |     |      move.l d0,-(sp)
   14ac0:	|  |  |  |     |      jsr 14db8 <strcmp>
   14ac6:	|  |  |  |     |      addq.l #8,sp
   14ac8:	|  |  |  |     |      tst.l d0
   14aca:	|  |  |  |     |  ,-- bne.s 14af0 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   14acc:	|  |  |  |     |  |   move.l sp,d0
   14ace:	|  |  |  |     |  |   addq.l #8,d0
   14ad0:	|  |  |  |     |  |   move.l d0,-(sp)
   14ad2:	|  |  |  |     |  |   jsr 14ca8 <stringToInt>
   14ad8:	|  |  |  |     |  |   addq.l #4,sp
   14ada:	|  |  |  |     |  |   tst.l d0
   14adc:	|  |  |  |     |  |   seq d0
   14ade:	|  |  |  |     |  |   neg.b d0
   14ae0:	|  |  |  |     |  |   move.b d0,d0
   14ae2:	|  |  |  |     |  |   andi.w #255,d0
   14ae6:	|  |  |  |     |  |   move.w d0,1c89a <gameSettings+0x8>
   14aec:	|  |  |  |     +--|-- bra.w 14bf2 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   14af0:	|  |  |  |     |  '-> pea 1bbfc <talk.c.490538ff+0x10aa>
   14af6:	|  |  |  |     |      move.l sp,d0
   14af8:	|  |  |  |     |      addi.l #269,d0
   14afe:	|  |  |  |     |      move.l d0,-(sp)
   14b00:	|  |  |  |     |      jsr 14db8 <strcmp>
   14b06:	|  |  |  |     |      addq.l #8,sp
   14b08:	|  |  |  |     |      tst.l d0
   14b0a:	|  |  |  |     |  ,-- bne.s 14b24 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   14b0c:	|  |  |  |     |  |   move.l sp,d0
   14b0e:	|  |  |  |     |  |   addq.l #8,d0
   14b10:	|  |  |  |     |  |   move.l d0,-(sp)
   14b12:	|  |  |  |     |  |   jsr 14ca8 <stringToInt>
   14b18:	|  |  |  |     |  |   addq.l #4,sp
   14b1a:	|  |  |  |     |  |   move.l d0,1c89c <gameSettings+0xa>
   14b20:	|  |  |  |     +--|-- bra.w 14bf2 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   14b24:	|  |  |  |     |  '-> pea 1bc04 <talk.c.490538ff+0x10b2>
   14b2a:	|  |  |  |     |      move.l sp,d0
   14b2c:	|  |  |  |     |      addi.l #269,d0
   14b32:	|  |  |  |     |      move.l d0,-(sp)
   14b34:	|  |  |  |     |      jsr 14db8 <strcmp>
   14b3a:	|  |  |  |     |      addq.l #8,sp
   14b3c:	|  |  |  |     |      tst.l d0
   14b3e:	|  |  |  |     |  ,-- bne.s 14b58 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   14b40:	|  |  |  |     |  |   move.l sp,d0
   14b42:	|  |  |  |     |  |   addq.l #8,d0
   14b44:	|  |  |  |     |  |   move.l d0,-(sp)
   14b46:	|  |  |  |     |  |   jsr 14ca8 <stringToInt>
   14b4c:	|  |  |  |     |  |   addq.l #4,sp
   14b4e:	|  |  |  |     |  |   move.l d0,1c8a0 <gameSettings+0xe>
   14b54:	|  |  |  |     +--|-- bra.w 14bf2 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   14b58:	|  |  |  |     |  '-> pea 1bc0e <talk.c.490538ff+0x10bc>
   14b5e:	|  |  |  |     |      move.l sp,d0
   14b60:	|  |  |  |     |      addi.l #269,d0
   14b66:	|  |  |  |     |      move.l d0,-(sp)
   14b68:	|  |  |  |     |      jsr 14db8 <strcmp>
   14b6e:	|  |  |  |     |      addq.l #8,sp
   14b70:	|  |  |  |     |      tst.l d0
   14b72:	|  |  |  |     |  ,-- bne.s 14b8c <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   14b74:	|  |  |  |     |  |   move.l sp,d0
   14b76:	|  |  |  |     |  |   addq.l #8,d0
   14b78:	|  |  |  |     |  |   move.l d0,-(sp)
   14b7a:	|  |  |  |     |  |   jsr 14ca8 <stringToInt>
   14b80:	|  |  |  |     |  |   addq.l #4,sp
   14b82:	|  |  |  |     |  |   move.l d0,d0
   14b84:	|  |  |  |     |  |   move.w d0,1c8a4 <gameSettings+0x12>
   14b8a:	|  |  |  |     +--|-- bra.s 14bf2 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   14b8c:	|  |  |  |     |  '-> pea 1bc1a <talk.c.490538ff+0x10c8>
   14b92:	|  |  |  |     |      move.l sp,d0
   14b94:	|  |  |  |     |      addi.l #269,d0
   14b9a:	|  |  |  |     |      move.l d0,-(sp)
   14b9c:	|  |  |  |     |      jsr 14db8 <strcmp>
   14ba2:	|  |  |  |     |      addq.l #8,sp
   14ba4:	|  |  |  |     |      tst.l d0
   14ba6:	|  |  |  |     |  ,-- bne.s 14bc0 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   14ba8:	|  |  |  |     |  |   move.l sp,d0
   14baa:	|  |  |  |     |  |   addq.l #8,d0
   14bac:	|  |  |  |     |  |   move.l d0,-(sp)
   14bae:	|  |  |  |     |  |   jsr 14ca8 <stringToInt>
   14bb4:	|  |  |  |     |  |   addq.l #4,sp
   14bb6:	|  |  |  |     |  |   move.l d0,d0
   14bb8:	|  |  |  |     |  |   move.w d0,1c8a6 <gameSettings+0x14>
   14bbe:	|  |  |  |     +--|-- bra.s 14bf2 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   14bc0:	|  |  |  |     |  '-> pea 1bc28 <talk.c.490538ff+0x10d6>
   14bc6:	|  |  |  |     |      move.l sp,d0
   14bc8:	|  |  |  |     |      addi.l #269,d0
   14bce:	|  |  |  |     |      move.l d0,-(sp)
   14bd0:	|  |  |  |     |      jsr 14db8 <strcmp>
   14bd6:	|  |  |  |     |      addq.l #8,sp
   14bd8:	|  |  |  |     |      tst.l d0
   14bda:	|  |  |  |     +----- bne.s 14bf2 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   14bdc:	|  |  |  |     |      move.l sp,d0
   14bde:	|  |  |  |     |      addq.l #8,d0
   14be0:	|  |  |  |     |      move.l d0,-(sp)
   14be2:	|  |  |  |     |      jsr 14ca8 <stringToInt>
   14be8:	|  |  |  |     |      addq.l #4,sp
   14bea:	|  |  |  |     |      move.l d0,d0
   14bec:	|  |  |  |     |      move.w d0,1c8a8 <gameSettings+0x16>
					}
				}
				here = 0;
   14bf2:	|  |  |  |     '----> clr.b 571(sp)
				doingSecond = FALSE;
   14bf6:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   14bfa:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   14bfe:	|  |  |  |            clr.b 8(sp)
				break;
   14c02:	|  |  |  |  ,-------- bra.s 14c7a <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   14c04:	|  |  |  '--|-------> move.w #1,566(sp)
				here = 0;
   14c0a:	|  |  |     |         clr.b 571(sp)
				break;
   14c0e:	|  |  |     +-------- bra.s 14c7a <readIniFile+0x358>

				default:
				if (doingSecond) {
   14c10:	|  |  '-----|-------> tst.w 566(sp)
   14c14:	|  |        |  ,----- beq.s 14c48 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   14c16:	|  |        |  |      move.b 571(sp),d0
   14c1a:	|  |        |  |      move.b d0,d1
   14c1c:	|  |        |  |      addq.b #1,d1
   14c1e:	|  |        |  |      move.b d1,571(sp)
   14c22:	|  |        |  |      move.b d0,d0
   14c24:	|  |        |  |      andi.l #255,d0
   14c2a:	|  |        |  |      lea 572(sp),a0
   14c2e:	|  |        |  |      adda.l d0,a0
   14c30:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   14c36:	|  |        |  |      moveq #0,d0
   14c38:	|  |        |  |      move.b 571(sp),d0
   14c3c:	|  |        |  |      lea 572(sp),a0
   14c40:	|  |        |  |      adda.l d0,a0
   14c42:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   14c46:	|  |        |  |  ,-- bra.s 14c78 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   14c48:	|  |        |  '--|-> move.b 571(sp),d0
   14c4c:	|  |        |     |   move.b d0,d1
   14c4e:	|  |        |     |   addq.b #1,d1
   14c50:	|  |        |     |   move.b d1,571(sp)
   14c54:	|  |        |     |   move.b d0,d0
   14c56:	|  |        |     |   andi.l #255,d0
   14c5c:	|  |        |     |   lea 572(sp),a0
   14c60:	|  |        |     |   adda.l d0,a0
   14c62:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   14c68:	|  |        |     |   moveq #0,d0
   14c6a:	|  |        |     |   move.b 571(sp),d0
   14c6e:	|  |        |     |   lea 572(sp),a0
   14c72:	|  |        |     |   adda.l d0,a0
   14c74:	|  |        |     |   clr.b -307(a0)
				break;
   14c78:	|  |        |     '-> nop
			}
		} while (keepGoing);
   14c7a:	|  |        '-------> tst.w 568(sp)
   14c7e:	|  '----------------- bne.w 14a12 <readIniFile+0xf0>

		Close(fp);
   14c82:	|                     move.l 546(sp),526(sp)
   14c88:	|                     move.l 1c7c2 <DOSBase>,d0
   14c8e:	|                     movea.l d0,a6
   14c90:	|                     move.l 526(sp),d1
   14c94:	|                     jsr -36(a6)
   14c98:	|                     move.l d0,522(sp)
	}
}
   14c9c:	'-------------------> nop
   14c9e:	                      move.l (sp)+,d2
   14ca0:	                      movea.l (sp)+,a6
   14ca2:	                      lea 564(sp),sp
   14ca6:	                      rts

00014ca8 <stringToInt>:

unsigned int stringToInt (char * s) {
   14ca8:	             subq.l #8,sp
	int i = 0;
   14caa:	             clr.l 4(sp)
	BOOL negative = FALSE;
   14cae:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   14cb2:	,----------> movea.l 12(sp),a0
   14cb6:	|            move.b (a0),d0
   14cb8:	|            cmpi.b #47,d0
   14cbc:	|        ,-- ble.s 14cf4 <stringToInt+0x4c>
   14cbe:	|        |   movea.l 12(sp),a0
   14cc2:	|        |   move.b (a0),d0
   14cc4:	|        |   cmpi.b #57,d0
   14cc8:	|        +-- bgt.s 14cf4 <stringToInt+0x4c>
			i *= 10;
   14cca:	|        |   move.l 4(sp),d1
   14cce:	|        |   move.l d1,d0
   14cd0:	|        |   add.l d0,d0
   14cd2:	|        |   add.l d0,d0
   14cd4:	|        |   add.l d1,d0
   14cd6:	|        |   add.l d0,d0
   14cd8:	|        |   move.l d0,4(sp)
			i += *s - '0';
   14cdc:	|        |   movea.l 12(sp),a0
   14ce0:	|        |   move.b (a0),d0
   14ce2:	|        |   ext.w d0
   14ce4:	|        |   movea.w d0,a0
   14ce6:	|        |   moveq #-48,d0
   14ce8:	|        |   add.l a0,d0
   14cea:	|        |   add.l d0,4(sp)
			s ++;
   14cee:	|        |   addq.l #1,12(sp)
   14cf2:	|  ,-----|-- bra.s 14d2c <stringToInt+0x84>
		} else if (*s == '-') {
   14cf4:	|  |     '-> movea.l 12(sp),a0
   14cf8:	|  |         move.b (a0),d0
   14cfa:	|  |         cmpi.b #45,d0
   14cfe:	|  |     ,-- bne.s 14d18 <stringToInt+0x70>
			negative = ! negative;
   14d00:	|  |     |   tst.w 2(sp)
   14d04:	|  |     |   seq d0
   14d06:	|  |     |   neg.b d0
   14d08:	|  |     |   move.b d0,d0
   14d0a:	|  |     |   andi.w #255,d0
   14d0e:	|  |     |   move.w d0,2(sp)
			s++;
   14d12:	|  |     |   addq.l #1,12(sp)
   14d16:	+--|-----|-- bra.s 14cb2 <stringToInt+0xa>
		} else {
			if (negative)
   14d18:	|  |     '-> tst.w 2(sp)
   14d1c:	|  |     ,-- beq.s 14d26 <stringToInt+0x7e>
				return -i;
   14d1e:	|  |     |   move.l 4(sp),d0
   14d22:	|  |     |   neg.l d0
   14d24:	|  |  ,--|-- bra.s 14d2e <stringToInt+0x86>
			return i;
   14d26:	|  |  |  '-> move.l 4(sp),d0
   14d2a:	|  |  +----- bra.s 14d2e <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   14d2c:	'--'--|----X bra.s 14cb2 <stringToInt+0xa>
		}
	}
   14d2e:	      '----> addq.l #8,sp
   14d30:	             rts

00014d32 <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   14d32:	    lea -28(sp),sp
   14d36:	    move.l a6,-(sp)
   14d38:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   14d3a:	    pea 1bc32 <talk.c.490538ff+0x10e0>
   14d40:	    jsr 183ec <KPrintF>
   14d46:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   14d48:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   14d4c:	    move.l 40(sp),30(sp)
   14d52:	    move.l #1005,26(sp)
   14d5a:	    move.l 1c7c2 <DOSBase>,d0
   14d60:	    movea.l d0,a6
   14d62:	    move.l 30(sp),d1
   14d66:	    move.l 26(sp),d2
   14d6a:	    jsr -30(a6)
   14d6e:	    move.l d0,22(sp)
   14d72:	    move.l 22(sp),d0
   14d76:	    move.l d0,18(sp)
	if (tester) {
   14d7a:	,-- beq.s 14daa <fileExists+0x78>
		KPrintF("fileexists: File exists");
   14d7c:	|   pea 1bc4c <talk.c.490538ff+0x10fa>
   14d82:	|   jsr 183ec <KPrintF>
   14d88:	|   addq.l #4,sp
		retval = 1;
   14d8a:	|   move.b #1,35(sp)
		Close(tester);
   14d90:	|   move.l 18(sp),14(sp)
   14d96:	|   move.l 1c7c2 <DOSBase>,d0
   14d9c:	|   movea.l d0,a6
   14d9e:	|   move.l 14(sp),d1
   14da2:	|   jsr -36(a6)
   14da6:	|   move.l d0,10(sp)
	}
	return retval;
   14daa:	'-> move.b 35(sp),d0
   14dae:	    move.l (sp)+,d2
   14db0:	    movea.l (sp)+,a6
   14db2:	    lea 28(sp),sp
   14db6:	    rts

00014db8 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   14db8:	   ,-- bra.s 14dc2 <strcmp+0xa>
    {
        s1++;
   14dba:	,--|-> addq.l #1,4(sp)
        s2++;
   14dbe:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   14dc2:	|  '-> movea.l 4(sp),a0
   14dc6:	|      move.b (a0),d0
   14dc8:	|  ,-- beq.s 14dda <strcmp+0x22>
   14dca:	|  |   movea.l 4(sp),a0
   14dce:	|  |   move.b (a0),d1
   14dd0:	|  |   movea.l 8(sp),a0
   14dd4:	|  |   move.b (a0),d0
   14dd6:	|  |   cmp.b d1,d0
   14dd8:	'--|-- beq.s 14dba <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   14dda:	   '-> movea.l 4(sp),a0
   14dde:	       move.b (a0),d0
   14de0:	       moveq #0,d1
   14de2:	       move.b d0,d1
   14de4:	       movea.l 8(sp),a0
   14de8:	       move.b (a0),d0
   14dea:	       move.b d0,d0
   14dec:	       andi.l #255,d0
   14df2:	       sub.l d0,d1
   14df4:	       move.l d1,d0
}
   14df6:	       rts

00014df8 <strlen>:

long unsigned int strlen (const char *s) 
{  
   14df8:	       subq.l #4,sp
	long unsigned int i = 0;
   14dfa:	       clr.l (sp)
	while(s[i]) i++; 
   14dfc:	   ,-- bra.s 14e00 <strlen+0x8>
   14dfe:	,--|-> addq.l #1,(sp)
   14e00:	|  '-> movea.l 8(sp),a0
   14e04:	|      adda.l (sp),a0
   14e06:	|      move.b (a0),d0
   14e08:	'----- bne.s 14dfe <strlen+0x6>
	return(i);
   14e0a:	       move.l (sp),d0
}
   14e0c:	       addq.l #4,sp
   14e0e:	       rts

00014e10 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   14e10:	    nop
   14e12:	,-> move.l 8(sp),d0
   14e16:	|   move.l d0,d1
   14e18:	|   addq.l #1,d1
   14e1a:	|   move.l d1,8(sp)
   14e1e:	|   movea.l 4(sp),a0
   14e22:	|   lea 1(a0),a1
   14e26:	|   move.l a1,4(sp)
   14e2a:	|   movea.l d0,a1
   14e2c:	|   move.b (a1),d0
   14e2e:	|   move.b d0,(a0)
   14e30:	|   move.b (a0),d0
   14e32:	'-- bne.s 14e12 <strcpy+0x2>
}
   14e34:	    nop
   14e36:	    rts

00014e38 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   14e38:	    lea -20(sp),sp
   14e3c:	    move.l a6,-(sp)
   14e3e:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   14e40:	    move.l 32(sp),-(sp)
   14e44:	    jsr 14df8 <strlen>
   14e4a:	    addq.l #4,sp
   14e4c:	    move.l d0,d2
   14e4e:	    move.l 36(sp),-(sp)
   14e52:	    jsr 14df8 <strlen>
   14e58:	    addq.l #4,sp
   14e5a:	    add.l d2,d0
   14e5c:	    move.l d0,d1
   14e5e:	    addq.l #1,d1
   14e60:	    move.l d1,20(sp)
   14e64:	    clr.l 16(sp)
   14e68:	    move.l 1c7ba <SysBase>,d0
   14e6e:	    movea.l d0,a6
   14e70:	    move.l 20(sp),d0
   14e74:	    move.l 16(sp),d1
   14e78:	    jsr -684(a6)
   14e7c:	    move.l d0,12(sp)
   14e80:	    move.l 12(sp),d0
   14e84:	    move.l d0,8(sp)
	char * t = newString;
   14e88:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   14e8e:	    nop
   14e90:	,-> move.l 32(sp),d0
   14e94:	|   move.l d0,d1
   14e96:	|   addq.l #1,d1
   14e98:	|   move.l d1,32(sp)
   14e9c:	|   movea.l 24(sp),a0
   14ea0:	|   lea 1(a0),a1
   14ea4:	|   move.l a1,24(sp)
   14ea8:	|   movea.l d0,a1
   14eaa:	|   move.b (a1),d0
   14eac:	|   move.b d0,(a0)
   14eae:	|   move.b (a0),d0
   14eb0:	'-- bne.s 14e90 <joinStrings+0x58>
	t--;
   14eb2:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   14eb6:	    nop
   14eb8:	,-> move.l 36(sp),d0
   14ebc:	|   move.l d0,d1
   14ebe:	|   addq.l #1,d1
   14ec0:	|   move.l d1,36(sp)
   14ec4:	|   movea.l 24(sp),a0
   14ec8:	|   lea 1(a0),a1
   14ecc:	|   move.l a1,24(sp)
   14ed0:	|   movea.l d0,a1
   14ed2:	|   move.b (a1),d0
   14ed4:	|   move.b d0,(a0)
   14ed6:	|   move.b (a0),d0
   14ed8:	'-- bne.s 14eb8 <joinStrings+0x80>

	return newString;
   14eda:	    move.l 8(sp),d0
}
   14ede:	    move.l (sp)+,d2
   14ee0:	    movea.l (sp)+,a6
   14ee2:	    lea 20(sp),sp
   14ee6:	    rts

00014ee8 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   14ee8:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   14eec:	       moveq #10,d0
   14eee:	       cmp.l 28(sp),d0
   14ef2:	   ,-- bne.s 14f10 <itoa+0x28>
   14ef4:	   |   tst.l 20(sp)
   14ef8:	   +-- bge.s 14f10 <itoa+0x28>
        *str++ = '-';
   14efa:	   |   move.l 24(sp),d0
   14efe:	   |   move.l d0,d1
   14f00:	   |   addq.l #1,d1
   14f02:	   |   move.l d1,24(sp)
   14f06:	   |   movea.l d0,a0
   14f08:	   |   move.b #45,(a0)
        value *= -1;
   14f0c:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   14f10:	   '-> move.l 24(sp),12(sp)
   14f16:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   14f1c:	   ,-> move.l 20(sp),d0
   14f20:	   |   move.l 28(sp),-(sp)
   14f24:	   |   move.l d0,-(sp)
   14f26:	   |   jsr 18e24 <__modsi3>
   14f2c:	   |   addq.l #8,sp
   14f2e:	   |   movea.l d0,a1
   14f30:	   |   move.l 12(sp),d0
   14f34:	   |   move.l d0,d1
   14f36:	   |   addq.l #1,d1
   14f38:	   |   move.l d1,12(sp)
   14f3c:	   |   lea 1bc64 <talk.c.490538ff+0x1112>,a0
   14f42:	   |   move.b (0,a1,a0.l),d1
   14f46:	   |   movea.l d0,a0
   14f48:	   |   move.b d1,(a0)
        value /= base;
   14f4a:	   |   move.l 28(sp),-(sp)
   14f4e:	   |   move.l 24(sp),-(sp)
   14f52:	   |   jsr 18df6 <__divsi3>
   14f58:	   |   addq.l #8,sp
   14f5a:	   |   move.l d0,20(sp)
    } while (value);
   14f5e:	   '-- bne.s 14f1c <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   14f60:	       move.l 12(sp),d0
   14f64:	       move.l d0,d1
   14f66:	       subq.l #1,d1
   14f68:	       move.l d1,12(sp)
   14f6c:	       movea.l d0,a0
   14f6e:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   14f70:	       move.l 4(sp),8(sp)
   14f76:	   ,-- bra.s 14f9c <itoa+0xb4>
        char temp = *low;
   14f78:	,--|-> movea.l 8(sp),a0
   14f7c:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   14f80:	|  |   movea.l 12(sp),a0
   14f84:	|  |   move.b (a0),d0
   14f86:	|  |   movea.l 8(sp),a0
   14f8a:	|  |   move.b d0,(a0)
        *ptr = temp;
   14f8c:	|  |   movea.l 12(sp),a0
   14f90:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   14f94:	|  |   addq.l #1,8(sp)
   14f98:	|  |   subq.l #1,12(sp)
   14f9c:	|  '-> move.l 8(sp),d0
   14fa0:	|      cmp.l 12(sp),d0
   14fa4:	'----- bcs.s 14f78 <itoa+0x90>
    }
    return rc;
   14fa6:	       move.l 4(sp),d0
}
   14faa:	       lea 16(sp),sp
   14fae:	       rts

00014fb0 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   14fb0:	                            lea -40(sp),sp
   14fb4:	                            move.l d2,-(sp)
    char* s = str;
   14fb6:	                            move.l 48(sp),40(sp)
    const char* p = format;
   14fbc:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   14fc2:	   ,----------------------- bra.w 150f6 <vsprintf2+0x146>
        if (*p == '%') {
   14fc6:	,--|----------------------> movea.l 36(sp),a0
   14fca:	|  |                        move.b (a0),d0
   14fcc:	|  |                        cmpi.b #37,d0
   14fd0:	|  |  ,-------------------- bne.w 150dc <vsprintf2+0x12c>
            switch (*++p) {
   14fd4:	|  |  |                     addq.l #1,36(sp)
   14fd8:	|  |  |                     movea.l 36(sp),a0
   14fdc:	|  |  |                     move.b (a0),d0
   14fde:	|  |  |                     ext.w d0
   14fe0:	|  |  |                     movea.w d0,a0
   14fe2:	|  |  |                     moveq #115,d0
   14fe4:	|  |  |                     cmp.l a0,d0
   14fe6:	|  |  |           ,-------- beq.s 1505e <vsprintf2+0xae>
   14fe8:	|  |  |           |         moveq #115,d1
   14fea:	|  |  |           |         cmp.l a0,d1
   14fec:	|  |  |  ,--------|-------- blt.w 150c4 <vsprintf2+0x114>
   14ff0:	|  |  |  |        |         moveq #99,d2
   14ff2:	|  |  |  |        |         cmp.l a0,d2
   14ff4:	|  |  |  |  ,-----|-------- beq.w 1509c <vsprintf2+0xec>
   14ff8:	|  |  |  |  |     |         moveq #100,d0
   14ffa:	|  |  |  |  |     |         cmp.l a0,d0
   14ffc:	|  |  |  +--|-----|-------- bne.w 150c4 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   15000:	|  |  |  |  |     |         addq.l #4,56(sp)
   15004:	|  |  |  |  |     |         movea.l 56(sp),a0
   15008:	|  |  |  |  |     |         move.l (a0),d0
   1500a:	|  |  |  |  |     |         move.l d0,d1
   1500c:	|  |  |  |  |     |         subq.l #1,d1
   1500e:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   15012:	|  |  |  |  |     |         pea a <_start+0xa>
   15016:	|  |  |  |  |     |         lea 8(sp),a0
   1501a:	|  |  |  |  |     |         move.l a0,-(sp)
   1501c:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   15020:	|  |  |  |  |     |         jsr 14ee8 <itoa>
   15026:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   1502a:	|  |  |  |  |     |         lea 44(sp),a0
   1502e:	|  |  |  |  |     |         lea -40(a0),a0
   15032:	|  |  |  |  |     |         move.l a0,28(sp)
   15036:	|  |  |  |  |     |     ,-- bra.s 15052 <vsprintf2+0xa2>
                        *s++ = *b;
   15038:	|  |  |  |  |     |  ,--|-> move.l 40(sp),d0
   1503c:	|  |  |  |  |     |  |  |   move.l d0,d1
   1503e:	|  |  |  |  |     |  |  |   addq.l #1,d1
   15040:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   15044:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   15048:	|  |  |  |  |     |  |  |   move.b (a0),d1
   1504a:	|  |  |  |  |     |  |  |   movea.l d0,a0
   1504c:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   1504e:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   15052:	|  |  |  |  |     |  |  '-> movea.l 28(sp),a0
   15056:	|  |  |  |  |     |  |      move.b (a0),d0
   15058:	|  |  |  |  |     |  '----- bne.s 15038 <vsprintf2+0x88>
                    }
                    break;
   1505a:	|  |  |  |  |  ,--|-------- bra.w 150f2 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   1505e:	|  |  |  |  |  |  '-------> addq.l #4,56(sp)
   15062:	|  |  |  |  |  |            movea.l 56(sp),a0
   15066:	|  |  |  |  |  |            move.l (a0),d0
   15068:	|  |  |  |  |  |            move.l d0,d1
   1506a:	|  |  |  |  |  |            subq.l #1,d1
   1506c:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   15070:	|  |  |  |  |  |        ,-- bra.s 15092 <vsprintf2+0xe2>
                        *s++ = *sval++;
   15072:	|  |  |  |  |  |     ,--|-> move.l 32(sp),d1
   15076:	|  |  |  |  |  |     |  |   move.l d1,d2
   15078:	|  |  |  |  |  |     |  |   addq.l #1,d2
   1507a:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   1507e:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   15082:	|  |  |  |  |  |     |  |   move.l d0,d2
   15084:	|  |  |  |  |  |     |  |   addq.l #1,d2
   15086:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   1508a:	|  |  |  |  |  |     |  |   movea.l d1,a0
   1508c:	|  |  |  |  |  |     |  |   move.b (a0),d1
   1508e:	|  |  |  |  |  |     |  |   movea.l d0,a0
   15090:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   15092:	|  |  |  |  |  |     |  '-> movea.l 32(sp),a0
   15096:	|  |  |  |  |  |     |      move.b (a0),d0
   15098:	|  |  |  |  |  |     '----- bne.s 15072 <vsprintf2+0xc2>
                    }
                    break;
   1509a:	|  |  |  |  |  +----------- bra.s 150f2 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   1509c:	|  |  |  |  '--|----------> addq.l #4,56(sp)
   150a0:	|  |  |  |     |            movea.l 56(sp),a0
   150a4:	|  |  |  |     |            move.l (a0),d0
   150a6:	|  |  |  |     |            move.l d0,d1
   150a8:	|  |  |  |     |            subq.l #1,d1
   150aa:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   150ae:	|  |  |  |     |            move.l 40(sp),d0
   150b2:	|  |  |  |     |            move.l d0,d2
   150b4:	|  |  |  |     |            addq.l #1,d2
   150b6:	|  |  |  |     |            move.l d2,40(sp)
   150ba:	|  |  |  |     |            move.l 24(sp),d1
   150be:	|  |  |  |     |            movea.l d0,a0
   150c0:	|  |  |  |     |            move.b d1,(a0)
                    break;
   150c2:	|  |  |  |     +----------- bra.s 150f2 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   150c4:	|  |  |  '-----|----------> move.l 40(sp),d0
   150c8:	|  |  |        |            move.l d0,d1
   150ca:	|  |  |        |            addq.l #1,d1
   150cc:	|  |  |        |            move.l d1,40(sp)
   150d0:	|  |  |        |            movea.l 36(sp),a0
   150d4:	|  |  |        |            move.b (a0),d1
   150d6:	|  |  |        |            movea.l d0,a0
   150d8:	|  |  |        |            move.b d1,(a0)
                    break;
   150da:	|  |  |        +----------- bra.s 150f2 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   150dc:	|  |  '--------|----------> move.l 40(sp),d0
   150e0:	|  |           |            move.l d0,d1
   150e2:	|  |           |            addq.l #1,d1
   150e4:	|  |           |            move.l d1,40(sp)
   150e8:	|  |           |            movea.l 36(sp),a0
   150ec:	|  |           |            move.b (a0),d1
   150ee:	|  |           |            movea.l d0,a0
   150f0:	|  |           |            move.b d1,(a0)
        }
        p++;
   150f2:	|  |           '----------> addq.l #1,36(sp)
    while (*p) {
   150f6:	|  '----------------------> movea.l 36(sp),a0
   150fa:	|                           move.b (a0),d0
   150fc:	'-------------------------- bne.w 14fc6 <vsprintf2+0x16>
    }
    *s = '\0';
   15100:	                            movea.l 40(sp),a0
   15104:	                            clr.b (a0)
    return s - str;
   15106:	                            move.l 40(sp),d0
   1510a:	                            sub.l 48(sp),d0
}
   1510e:	                            move.l (sp)+,d2
   15110:	                            lea 40(sp),sp
   15114:	                            rts

00015116 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   15116:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   15118:	moveq #16,d0
   1511a:	add.l sp,d0
   1511c:	move.l d0,d1
   1511e:	addq.l #4,d1
   15120:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   15124:	move.l 16(sp),d0
   15128:	move.l 4(sp),-(sp)
   1512c:	move.l d0,-(sp)
   1512e:	move.l 20(sp),-(sp)
   15132:	jsr 14fb0 <vsprintf2>
   15138:	lea 12(sp),sp
   1513c:	move.l d0,(sp)
    va_end(args);
   1513e:	clr.l 4(sp)

    return done;
   15142:	move.l (sp),d0
}
   15144:	addq.l #8,sp
   15146:	rts

00015148 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   15148:	       lea -20(sp),sp
   1514c:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   1514e:	       moveq #12,d0
   15150:	       move.l d0,20(sp)
   15154:	       clr.l 16(sp)
   15158:	       move.l 1c7ba <SysBase>,d0
   1515e:	       movea.l d0,a6
   15160:	       move.l 20(sp),d0
   15164:	       move.l 16(sp),d1
   15168:	       jsr -684(a6)
   1516c:	       move.l d0,12(sp)
   15170:	       move.l 12(sp),d0
   15174:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   15178:	   ,-- bne.s 1517e <addVarToStack+0x36>
   1517a:	   |   clr.w d0
   1517c:	,--|-- bra.s 151c6 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   1517e:	|  '-> move.l 8(sp),d0
   15182:	|      move.l d0,-(sp)
   15184:	|      move.l 32(sp),-(sp)
   15188:	|      jsr 15caa <copyMain>
   1518e:	|      addq.l #8,sp
   15190:	|      tst.w d0
   15192:	|  ,-- bne.s 151ae <addVarToStack+0x66>
        FreeVec(newStack);
   15194:	|  |   move.l 8(sp),4(sp)
   1519a:	|  |   move.l 1c7ba <SysBase>,d0
   151a0:	|  |   movea.l d0,a6
   151a2:	|  |   movea.l 4(sp),a1
   151a6:	|  |   jsr -690(a6)
        return FALSE;
   151aa:	|  |   clr.w d0
   151ac:	+--|-- bra.s 151c6 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   151ae:	|  '-> movea.l 32(sp),a0
   151b2:	|      move.l (a0),d0
   151b4:	|      movea.l 8(sp),a0
   151b8:	|      move.l d0,8(a0)
    *thisStack = newStack;
   151bc:	|      movea.l 32(sp),a0
   151c0:	|      move.l 8(sp),(a0)
    return TRUE;
   151c4:	|      moveq #1,d0
}
   151c6:	'----> movea.l (sp)+,a6
   151c8:	       lea 20(sp),sp
   151cc:	       rts

000151ce <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   151ce:	       lea -16(sp),sp
   151d2:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   151d4:	       moveq #12,d0
   151d6:	       move.l d0,16(sp)
   151da:	       clr.l 12(sp)
   151de:	       move.l 1c7ba <SysBase>,d0
   151e4:	       movea.l d0,a6
   151e6:	       move.l 16(sp),d0
   151ea:	       move.l 12(sp),d1
   151ee:	       jsr -684(a6)
   151f2:	       move.l d0,8(sp)
   151f6:	       move.l 8(sp),d0
   151fa:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   151fe:	   ,-- bne.s 15204 <addVarToStackQuick+0x36>
   15200:	   |   clr.w d0
   15202:	,--|-- bra.s 1523a <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   15204:	|  '-> move.l 4(sp),d0
   15208:	|      pea 8 <_start+0x8>
   1520c:	|      move.l 28(sp),-(sp)
   15210:	|      move.l d0,-(sp)
   15212:	|      jsr 183a0 <memcpy>
   15218:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   1521c:	|      movea.l 24(sp),a0
   15220:	|      clr.l (a0)

    newStack->next = *thisStack;
   15222:	|      movea.l 28(sp),a0
   15226:	|      move.l (a0),d0
   15228:	|      movea.l 4(sp),a0
   1522c:	|      move.l d0,8(a0)
    *thisStack = newStack;
   15230:	|      movea.l 28(sp),a0
   15234:	|      move.l 4(sp),(a0)
    return TRUE;
   15238:	|      moveq #1,d0
}
   1523a:	'----> movea.l (sp)+,a6
   1523c:	       lea 16(sp),sp
   15240:	       rts

00015242 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   15242:	       lea -16(sp),sp
   15246:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   15248:	       movea.l 24(sp),a0
   1524c:	       move.l (a0),d0
   1524e:	       moveq #1,d1
   15250:	       cmp.l d0,d1
   15252:	   ,-- bne.s 1527c <addVariablesInSecond+0x3a>
   15254:	   |   movea.l 28(sp),a0
   15258:	   |   move.l (a0),d0
   1525a:	   |   moveq #1,d1
   1525c:	   |   cmp.l d0,d1
   1525e:	   +-- bne.s 1527c <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   15260:	   |   movea.l 28(sp),a0
   15264:	   |   move.l 4(a0),d1
   15268:	   |   movea.l 24(sp),a0
   1526c:	   |   move.l 4(a0),d0
   15270:	   |   add.l d1,d0
   15272:	   |   movea.l 28(sp),a0
   15276:	   |   move.l d0,4(a0)
   1527a:	,--|-- bra.s 152f6 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   1527c:	|  '-> move.l 24(sp),-(sp)
   15280:	|      jsr 15ee2 <getTextFromAnyVar>
   15286:	|      addq.l #4,sp
   15288:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   1528c:	|      move.l 28(sp),-(sp)
   15290:	|      jsr 15ee2 <getTextFromAnyVar>
   15296:	|      addq.l #4,sp
   15298:	|      move.l d0,12(sp)

		unlinkVar(var2);
   1529c:	|      move.l 28(sp),-(sp)
   152a0:	|      jsr 15b5a <unlinkVar>
   152a6:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   152a8:	|      move.l 12(sp),-(sp)
   152ac:	|      move.l 20(sp),-(sp)
   152b0:	|      jsr 14e38 <joinStrings>
   152b6:	|      addq.l #8,sp
   152b8:	|      movea.l 28(sp),a0
   152bc:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   152c0:	|      movea.l 28(sp),a0
   152c4:	|      moveq #3,d0
   152c6:	|      move.l d0,(a0)
		FreeVec(string1);
   152c8:	|      move.l 16(sp),8(sp)
   152ce:	|      move.l 1c7ba <SysBase>,d0
   152d4:	|      movea.l d0,a6
   152d6:	|      movea.l 8(sp),a1
   152da:	|      jsr -690(a6)
		FreeVec(string2);
   152de:	|      move.l 12(sp),4(sp)
   152e4:	|      move.l 1c7ba <SysBase>,d0
   152ea:	|      movea.l d0,a6
   152ec:	|      movea.l 4(sp),a1
   152f0:	|      jsr -690(a6)
	}
}
   152f4:	|      nop
   152f6:	'----> nop
   152f8:	       movea.l (sp)+,a6
   152fa:	       lea 16(sp),sp
   152fe:	       rts

00015300 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   15300:	movea.l 8(sp),a0
   15304:	move.l 4(a0),-(sp)
   15308:	move.l (a0),-(sp)
   1530a:	movea.l 12(sp),a0
   1530e:	move.l 4(a0),-(sp)
   15312:	move.l (a0),-(sp)
   15314:	jsr 15336 <compareVars>
   1531a:	lea 16(sp),sp
   1531e:	move.l d0,-(sp)
   15320:	pea 1 <_start+0x1>
   15324:	move.l 16(sp),-(sp)
   15328:	jsr 161fe <setVariable>
   1532e:	lea 12(sp),sp
}
   15332:	nop
   15334:	rts

00015336 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   15336:	       subq.l #4,sp
	int re = 0;
   15338:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   1533a:	       move.l 8(sp),d1
   1533e:	       move.l 16(sp),d0
   15342:	       cmp.l d1,d0
   15344:	,----- bne.w 1540c <compareVars+0xd6>
		switch (var1.varType) {
   15348:	|      move.l 8(sp),d0
   1534c:	|      moveq #9,d1
   1534e:	|      cmp.l d0,d1
   15350:	|  ,-- bcs.w 153f4 <compareVars+0xbe>
   15354:	|  |   add.l d0,d0
   15356:	|  |   movea.l d0,a0
   15358:	|  |   adda.l #86884,a0
   1535e:	|  |   move.w (a0),d0
   15360:	|  |   jmp (15364 <compareVars+0x2e>,pc,d0.w)
   15364:	|  |   ori.b #-112,(a4)
   15368:	|  |   ori.l #5243024,(a0)
   1536e:	|  |   ori.l #7733392,(a0)
   15374:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   1537a:	|  |   move.l d0,(sp)
			break;
   1537c:	+--|-- bra.w 1540c <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   15380:	|  |   move.l 12(sp),d1
   15384:	|  |   move.l 20(sp),d0
   15388:	|  |   cmp.l d1,d0
   1538a:	|  |   seq d0
   1538c:	|  |   neg.b d0
   1538e:	|  |   move.b d0,d0
   15390:	|  |   andi.l #255,d0
   15396:	|  |   move.l d0,(sp)
			break;
   15398:	+--|-- bra.s 1540c <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   1539a:	|  |   move.l 12(sp),d1
   1539e:	|  |   move.l 20(sp),d0
   153a2:	|  |   cmp.l d1,d0
   153a4:	|  |   seq d0
   153a6:	|  |   neg.b d0
   153a8:	|  |   move.b d0,d0
   153aa:	|  |   andi.l #255,d0
   153b0:	|  |   move.l d0,(sp)
			break;
   153b2:	+--|-- bra.s 1540c <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   153b4:	|  |   move.l 20(sp),d1
   153b8:	|  |   move.l 12(sp),d0
   153bc:	|  |   move.l d1,-(sp)
   153be:	|  |   move.l d0,-(sp)
   153c0:	|  |   jsr 14db8 <strcmp>
   153c6:	|  |   addq.l #8,sp
   153c8:	|  |   tst.l d0
   153ca:	|  |   seq d0
   153cc:	|  |   neg.b d0
   153ce:	|  |   move.b d0,d0
   153d0:	|  |   andi.l #255,d0
   153d6:	|  |   move.l d0,(sp)
			break;
   153d8:	+--|-- bra.s 1540c <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   153da:	|  |   move.l 12(sp),d1
   153de:	|  |   move.l 20(sp),d0
   153e2:	|  |   cmp.l d1,d0
   153e4:	|  |   seq d0
   153e6:	|  |   neg.b d0
   153e8:	|  |   move.b d0,d0
   153ea:	|  |   andi.l #255,d0
   153f0:	|  |   move.l d0,(sp)
			break;
   153f2:	+--|-- bra.s 1540c <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   153f4:	|  '-> move.l 12(sp),d1
   153f8:	|      move.l 20(sp),d0
   153fc:	|      cmp.l d1,d0
   153fe:	|      seq d0
   15400:	|      neg.b d0
   15402:	|      move.b d0,d0
   15404:	|      andi.l #255,d0
   1540a:	|      move.l d0,(sp)
		}
	}
	return re;
   1540c:	'----> move.l (sp),d0
}
   1540e:	       addq.l #4,sp
   15410:	       rts

00015412 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   15412:	             lea -16(sp),sp
   15416:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   15418:	             movea.l 28(sp),a0
   1541c:	             moveq #6,d0
   1541e:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   15420:	             moveq #12,d0
   15422:	             move.l d0,12(sp)
   15426:	             clr.l 8(sp)
   1542a:	             move.l 1c7ba <SysBase>,d0
   15430:	             movea.l d0,a6
   15432:	             move.l 12(sp),d0
   15436:	             move.l 8(sp),d1
   1543a:	             jsr -684(a6)
   1543e:	             move.l d0,4(sp)
   15442:	             move.l 4(sp),d0
   15446:	             movea.l 28(sp),a0
   1544a:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   1544e:	             movea.l 28(sp),a0
   15452:	             move.l 4(a0),d0
   15456:	         ,-- bne.s 1545e <copyStack+0x4c>
   15458:	         |   clr.w d0
   1545a:	,--------|-- bra.w 154e0 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   1545e:	|        '-> movea.l 28(sp),a0
   15462:	|            movea.l 4(a0),a0
   15466:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   15468:	|            movea.l 28(sp),a0
   1546c:	|            movea.l 4(a0),a0
   15470:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   15474:	|            movea.l 28(sp),a0
   15478:	|            movea.l 4(a0),a0
   1547c:	|            moveq #1,d0
   1547e:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   15482:	|            movea.l 24(sp),a0
   15486:	|            movea.l 4(a0),a0
   1548a:	|            move.l (a0),16(sp)

	while (a) {
   1548e:	|     ,----- bra.s 154d8 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   15490:	|  ,--|----> movea.l 28(sp),a0
   15494:	|  |  |      move.l 4(a0),d0
   15498:	|  |  |      move.l d0,d1
   1549a:	|  |  |      move.l 16(sp),d0
   1549e:	|  |  |      move.l d1,-(sp)
   154a0:	|  |  |      move.l d0,-(sp)
   154a2:	|  |  |      jsr 15148 <addVarToStack>
   154a8:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   154aa:	|  |  |      movea.l 28(sp),a0
   154ae:	|  |  |      movea.l 4(a0),a0
   154b2:	|  |  |      move.l 4(a0),d0
   154b6:	|  |  |  ,-- bne.s 154ce <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   154b8:	|  |  |  |   movea.l 28(sp),a0
   154bc:	|  |  |  |   movea.l 4(a0),a1
   154c0:	|  |  |  |   movea.l 28(sp),a0
   154c4:	|  |  |  |   movea.l 4(a0),a0
   154c8:	|  |  |  |   move.l (a1),d0
   154ca:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   154ce:	|  |  |  '-> movea.l 16(sp),a0
   154d2:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   154d8:	|  |  '----> tst.l 16(sp)
   154dc:	|  '-------- bne.s 15490 <copyStack+0x7e>
	}

	return TRUE;
   154de:	|            moveq #1,d0
}
   154e0:	'----------> movea.l (sp)+,a6
   154e2:	             lea 16(sp),sp
   154e6:	             rts

000154e8 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   154e8:	                lea -20(sp),sp
   154ec:	                move.l a6,-(sp)
   154ee:	                move.l 36(sp),d0
   154f2:	                move.w d0,d0
   154f4:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   154f8:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   154fe:	                clr.l 16(sp)

    while (*huntVar) {
   15502:	   ,----------- bra.s 15580 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   15504:	,--|----------> movea.l 20(sp),a0
   15508:	|  |            movea.l (a0),a0
   1550a:	|  |            movea.l 28(sp),a1
   1550e:	|  |            move.l 4(a1),-(sp)
   15512:	|  |            move.l (a1),-(sp)
   15514:	|  |            move.l 4(a0),-(sp)
   15518:	|  |            move.l (a0),-(sp)
   1551a:	|  |            jsr 15336 <compareVars>
   15520:	|  |            lea 16(sp),sp
   15524:	|  |            tst.l d0
   15526:	|  |  ,-------- beq.s 15572 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   15528:	|  |  |         movea.l 20(sp),a0
   1552c:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   15530:	|  |  |         movea.l 12(sp),a0
   15534:	|  |  |         move.l 8(a0),d0
   15538:	|  |  |         movea.l 20(sp),a0
   1553c:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   1553e:	|  |  |         move.l 12(sp),d0
   15542:	|  |  |         move.l d0,-(sp)
   15544:	|  |  |         jsr 15b5a <unlinkVar>
   1554a:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   1554c:	|  |  |         move.l 12(sp),8(sp)
   15552:	|  |  |         move.l 1c7ba <SysBase>,d0
   15558:	|  |  |         movea.l d0,a6
   1555a:	|  |  |         movea.l 8(sp),a1
   1555e:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   15562:	|  |  |         tst.w 6(sp)
   15566:	|  |  |     ,-- bne.s 1556c <deleteVarFromStack+0x84>
   15568:	|  |  |     |   moveq #1,d0
   1556a:	|  |  |  ,--|-- bra.s 1558e <deleteVarFromStack+0xa6>
            reply++;
   1556c:	|  |  |  |  '-> addq.l #1,16(sp)
   15570:	|  +--|--|----- bra.s 15580 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   15572:	|  |  '--|----> movea.l 20(sp),a0
   15576:	|  |     |      move.l (a0),d0
   15578:	|  |     |      move.l d0,d1
   1557a:	|  |     |      addq.l #8,d1
   1557c:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   15580:	|  '-----|----> movea.l 20(sp),a0
   15584:	|        |      move.l (a0),d0
   15586:	'--------|----- bne.w 15504 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   1558a:	         |      move.l 16(sp),d0
}
   1558e:	         '----> movea.l (sp)+,a6
   15590:	                lea 20(sp),sp
   15594:	                rts

00015596 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   15596:	       movea.l 4(sp),a0
   1559a:	       move.l 4(a0),d0
   1559e:	       cmp.l 8(sp),d0
   155a2:	   ,-- bhi.s 155a8 <fastArrayGetByIndex+0x12>
   155a4:	   |   moveq #0,d0
   155a6:	,--|-- bra.s 155b6 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   155a8:	|  '-> movea.l 4(sp),a0
   155ac:	|      move.l (a0),d1
   155ae:	|      move.l 8(sp),d0
   155b2:	|      lsl.l #3,d0
   155b4:	|      add.l d1,d0
}
   155b6:	'----> rts

000155b8 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   155b8:	                lea -32(sp),sp
   155bc:	                move.l a6,-(sp)
   155be:	                move.l a2,-(sp)
    struct persona *p = NULL;
   155c0:	                clr.l 36(sp)

    switch (thisVar->varType) {
   155c4:	                movea.l 44(sp),a0
   155c8:	                move.l (a0),d0
   155ca:	                moveq #8,d1
   155cc:	                cmp.l d0,d1
   155ce:	            ,-- beq.s 155dc <getCostumeFromVar+0x24>
   155d0:	            |   moveq #9,d1
   155d2:	            |   cmp.l d0,d1
   155d4:	   ,--------|-- beq.w 1568a <getCostumeFromVar+0xd2>
   155d8:	,--|--------|-- bra.w 15694 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   155dc:	|  |        '-> moveq #8,d0
   155de:	|  |            move.l d0,28(sp)
   155e2:	|  |            clr.l 24(sp)
   155e6:	|  |            move.l 1c7ba <SysBase>,d0
   155ec:	|  |            movea.l d0,a6
   155ee:	|  |            move.l 28(sp),d0
   155f2:	|  |            move.l 24(sp),d1
   155f6:	|  |            jsr -684(a6)
   155fa:	|  |            move.l d0,20(sp)
   155fe:	|  |            move.l 20(sp),d0
   15602:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   15606:	|  |        ,-- bne.s 1560e <getCostumeFromVar+0x56>
   15608:	|  |        |   moveq #0,d0
   1560a:	|  |  ,-----|-- bra.w 156be <getCostumeFromVar+0x106>
            p->numDirections = 1;
   1560e:	|  |  |     '-> movea.l 36(sp),a0
   15612:	|  |  |         moveq #1,d1
   15614:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   15618:	|  |  |         moveq #12,d0
   1561a:	|  |  |         move.l d0,16(sp)
   1561e:	|  |  |         clr.l 12(sp)
   15622:	|  |  |         move.l 1c7ba <SysBase>,d0
   15628:	|  |  |         movea.l d0,a6
   1562a:	|  |  |         move.l 16(sp),d0
   1562e:	|  |  |         move.l 12(sp),d1
   15632:	|  |  |         jsr -684(a6)
   15636:	|  |  |         move.l d0,8(sp)
   1563a:	|  |  |         move.l 8(sp),d0
   1563e:	|  |  |         movea.l 36(sp),a0
   15642:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   15644:	|  |  |         movea.l 36(sp),a0
   15648:	|  |  |         move.l (a0),d0
   1564a:	|  |  |     ,-- bne.s 15650 <getCostumeFromVar+0x98>
   1564c:	|  |  |     |   moveq #0,d0
   1564e:	|  |  +-----|-- bra.s 156be <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   15650:	|  |  |     '-> clr.l 32(sp)
   15654:	|  |  |     ,-- bra.s 15680 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   15656:	|  |  |  ,--|-> movea.l 44(sp),a0
   1565a:	|  |  |  |  |   move.l 4(a0),d0
   1565e:	|  |  |  |  |   movea.l 36(sp),a0
   15662:	|  |  |  |  |   movea.l (a0),a0
   15664:	|  |  |  |  |   move.l 32(sp),d1
   15668:	|  |  |  |  |   add.l d1,d1
   1566a:	|  |  |  |  |   add.l d1,d1
   1566c:	|  |  |  |  |   lea (0,a0,d1.l),a2
   15670:	|  |  |  |  |   move.l d0,-(sp)
   15672:	|  |  |  |  |   jsr 9dae <copyAnim>
   15678:	|  |  |  |  |   addq.l #4,sp
   1567a:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   1567c:	|  |  |  |  |   addq.l #1,32(sp)
   15680:	|  |  |  |  '-> moveq #2,d1
   15682:	|  |  |  |      cmp.l 32(sp),d1
   15686:	|  |  |  '----- bge.s 15656 <getCostumeFromVar+0x9e>
            }
            break;
   15688:	|  |  |     ,-- bra.s 156ba <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   1568a:	|  '--|-----|-> movea.l 44(sp),a0
   1568e:	|     |     |   move.l 4(a0),d0
   15692:	|     +-----|-- bra.s 156be <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   15694:	'-----|-----|-> movea.l 44(sp),a0
   15698:	      |     |   move.l (a0),d0
   1569a:	      |     |   add.l d0,d0
   1569c:	      |     |   movea.l d0,a1
   1569e:	      |     |   adda.l d0,a1
   156a0:	      |     |   lea 1c688 <typeName>,a0
   156a6:	      |     |   move.l (0,a1,a0.l),d0
   156aa:	      |     |   move.l d0,-(sp)
   156ac:	      |     |   pea 1bcd6 <talk.c.490538ff+0x1184>
   156b2:	      |     |   jsr 183ec <KPrintF>
   156b8:	      |     |   addq.l #8,sp
    }

    return p;
   156ba:	      |     '-> move.l 36(sp),d0
}
   156be:	      '-------> movea.l (sp)+,a2
   156c0:	                movea.l (sp)+,a6
   156c2:	                lea 32(sp),sp
   156c6:	                rts

000156c8 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   156c8:	                lea -96(sp),sp
   156cc:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   156d0:	                move.l 116(sp),-(sp)
   156d4:	                pea 1bd0e <talk.c.490538ff+0x11bc>
   156da:	                jsr 14e38 <joinStrings>
   156e0:	                addq.l #8,sp
   156e2:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   156e6:	            ,-- bne.s 156ee <getSavedGamesStack+0x26>
   156e8:	            |   clr.w d0
   156ea:	,-----------|-- bra.w 15902 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   156ee:	|           '-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   156f2:	|               move.l #113936,98(sp)
   156fa:	|               moveq #-2,d0
   156fc:	|               move.l d0,94(sp)
   15700:	|               move.l 1c7c2 <DOSBase>,d0
   15706:	|               movea.l d0,a6
   15708:	|               move.l 98(sp),d1
   1570c:	|               move.l 94(sp),d2
   15710:	|               jsr -84(a6)
   15714:	|               move.l d0,90(sp)
   15718:	|               move.l 90(sp),d0
   1571c:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   15720:	|           ,-- bne.s 15728 <getSavedGamesStack+0x60>
   15722:	|           |   clr.w d0
   15724:	+-----------|-- bra.w 15902 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   15728:	|           '-> move.l #260,82(sp)
   15730:	|               move.l #65536,78(sp)
   15738:	|               move.l 1c7ba <SysBase>,d0
   1573e:	|               movea.l d0,a6
   15740:	|               move.l 82(sp),d0
   15744:	|               move.l 78(sp),d1
   15748:	|               jsr -684(a6)
   1574c:	|               move.l d0,74(sp)
   15750:	|               move.l 74(sp),d0
   15754:	|               move.l d0,70(sp)
	if (!fib) {
   15758:	|           ,-- bne.s 15776 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   1575a:	|           |   move.l 86(sp),22(sp)
   15760:	|           |   move.l 1c7c2 <DOSBase>,d0
   15766:	|           |   movea.l d0,a6
   15768:	|           |   move.l 22(sp),d1
   1576c:	|           |   jsr -90(a6)
		return FALSE;
   15770:	|           |   clr.w d0
   15772:	+-----------|-- bra.w 15902 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   15776:	|           '-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   1577a:	|               move.l 86(sp),66(sp)
   15780:	|               move.l 70(sp),62(sp)
   15786:	|               move.l 1c7c2 <DOSBase>,d0
   1578c:	|               movea.l d0,a6
   1578e:	|               move.l 66(sp),d1
   15792:	|               move.l 62(sp),d2
   15796:	|               jsr -102(a6)
   1579a:	|               move.l d0,58(sp)
   1579e:	|               move.l 58(sp),d0
   157a2:	|  ,----------- beq.w 158b6 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   157a6:	|  |        ,-- bra.w 15882 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   157aa:	|  |  ,-----|-> move.l 70(sp),d2
   157ae:	|  |  |     |   addq.l #8,d2
   157b0:	|  |  |     |   move.l 70(sp),d0
   157b4:	|  |  |     |   addq.l #8,d0
   157b6:	|  |  |     |   move.l d0,-(sp)
   157b8:	|  |  |     |   jsr 14df8 <strlen>
   157be:	|  |  |     |   addq.l #4,sp
   157c0:	|  |  |     |   move.l d0,d3
   157c2:	|  |  |     |   move.l 116(sp),-(sp)
   157c6:	|  |  |     |   jsr 14df8 <strlen>
   157cc:	|  |  |     |   addq.l #4,sp
   157ce:	|  |  |     |   move.l d3,d1
   157d0:	|  |  |     |   sub.l d0,d1
   157d2:	|  |  |     |   move.l d2,d0
   157d4:	|  |  |     |   add.l d1,d0
   157d6:	|  |  |     |   move.l 116(sp),-(sp)
   157da:	|  |  |     |   move.l d0,-(sp)
   157dc:	|  |  |     |   jsr 14db8 <strcmp>
   157e2:	|  |  |     |   addq.l #8,sp
   157e4:	|  |  |     |   tst.l d0
   157e6:	|  |  |     +-- bne.w 15882 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   157ea:	|  |  |     |   move.l 70(sp),d0
   157ee:	|  |  |     |   addq.l #8,d0
   157f0:	|  |  |     |   move.l d0,-(sp)
   157f2:	|  |  |     |   jsr 14df8 <strlen>
   157f8:	|  |  |     |   addq.l #4,sp
   157fa:	|  |  |     |   move.l d0,d2
   157fc:	|  |  |     |   move.l 116(sp),-(sp)
   15800:	|  |  |     |   jsr 14df8 <strlen>
   15806:	|  |  |     |   addq.l #4,sp
   15808:	|  |  |     |   move.l d0,d1
   1580a:	|  |  |     |   move.l d2,d0
   1580c:	|  |  |     |   sub.l d1,d0
   1580e:	|  |  |     |   movea.l 70(sp),a0
   15812:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   15816:	|  |  |     |   move.l 70(sp),d0
   1581a:	|  |  |     |   addq.l #8,d0
   1581c:	|  |  |     |   move.l d0,-(sp)
   1581e:	|  |  |     |   jsr 118 <decodeFilename>
   15824:	|  |  |     |   addq.l #4,sp
   15826:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   1582a:	|  |  |     |   move.l 42(sp),-(sp)
   1582e:	|  |  |     |   lea 18(sp),a0
   15832:	|  |  |     |   move.l a0,-(sp)
   15834:	|  |  |     |   jsr 15b2e <makeTextVar>
   1583a:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   1583c:	|  |  |     |   move.l 42(sp),38(sp)
   15842:	|  |  |     |   move.l 1c7ba <SysBase>,d0
   15848:	|  |  |     |   movea.l d0,a6
   1584a:	|  |  |     |   movea.l 38(sp),a1
   1584e:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   15852:	|  |  |     |   move.l 112(sp),d0
   15856:	|  |  |     |   move.l d0,-(sp)
   15858:	|  |  |     |   lea 18(sp),a0
   1585c:	|  |  |     |   move.l a0,-(sp)
   1585e:	|  |  |     |   jsr 15148 <addVarToStack>
   15864:	|  |  |     |   addq.l #8,sp
   15866:	|  |  |     |   tst.w d0
   15868:	|  |  |  ,--|-- beq.s 158ba <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   1586a:	|  |  |  |  |   movea.l 112(sp),a0
   1586e:	|  |  |  |  |   move.l 4(a0),d0
   15872:	|  |  |  |  +-- bne.s 15882 <getSavedGamesStack+0x1ba>
   15874:	|  |  |  |  |   movea.l 112(sp),a0
   15878:	|  |  |  |  |   move.l (a0),d0
   1587a:	|  |  |  |  |   movea.l 112(sp),a0
   1587e:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   15882:	|  |  |  |  '-> move.l 86(sp),54(sp)
   15888:	|  |  |  |      move.l 70(sp),50(sp)
   1588e:	|  |  |  |      move.l 1c7c2 <DOSBase>,d0
   15894:	|  |  |  |      movea.l d0,a6
   15896:	|  |  |  |      move.l 54(sp),d1
   1589a:	|  |  |  |      move.l 50(sp),d2
   1589e:	|  |  |  |      jsr -108(a6)
   158a2:	|  |  |  |      move.l d0,46(sp)
   158a6:	|  |  |  |      move.l 46(sp),d0
   158aa:	|  |  '--|----- bne.w 157aa <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   158ae:	|  |     |      move.w #1,106(sp)
   158b4:	|  |     |  ,-- bra.s 158bc <getSavedGamesStack+0x1f4>
	}

cleanup:
   158b6:	|  '-----|--|-> nop
   158b8:	|        |  +-- bra.s 158bc <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   158ba:	|        '--|-> nop
	FreeVec(fib);
   158bc:	|           '-> move.l 70(sp),34(sp)
   158c2:	|               move.l 1c7ba <SysBase>,d0
   158c8:	|               movea.l d0,a6
   158ca:	|               movea.l 34(sp),a1
   158ce:	|               jsr -690(a6)
	UnLock(dirLock);
   158d2:	|               move.l 86(sp),30(sp)
   158d8:	|               move.l 1c7c2 <DOSBase>,d0
   158de:	|               movea.l d0,a6
   158e0:	|               move.l 30(sp),d1
   158e4:	|               jsr -90(a6)
	FreeVec(pattern);
   158e8:	|               move.l 102(sp),26(sp)
   158ee:	|               move.l 1c7ba <SysBase>,d0
   158f4:	|               movea.l d0,a6
   158f6:	|               movea.l 26(sp),a1
   158fa:	|               jsr -690(a6)
	return result;
   158fe:	|               move.w 106(sp),d0
}
   15902:	'-------------> movem.l (sp)+,d2-d3/a6
   15906:	                lea 96(sp),sp
   1590a:	                rts

0001590c <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   1590c:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   1590e:	       movea.l 20(sp),a0
   15912:	       move.l (a0),d0
   15914:	       cmp.l 16(sp),d0
   15918:	,----- beq.s 1597c <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   1591a:	|      move.l 16(sp),d0
   1591e:	|      add.l d0,d0
   15920:	|      movea.l d0,a1
   15922:	|      adda.l d0,a1
   15924:	|      lea 1c688 <typeName>,a0
   1592a:	|      move.l (0,a1,a0.l),d0
   1592e:	|      move.l d0,-(sp)
   15930:	|      pea 1bd12 <talk.c.490538ff+0x11c0>
   15936:	|      jsr 14e38 <joinStrings>
   1593c:	|      addq.l #8,sp
   1593e:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   15942:	|      movea.l 20(sp),a0
   15946:	|      move.l (a0),d0
   15948:	|      add.l d0,d0
   1594a:	|      movea.l d0,a1
   1594c:	|      adda.l d0,a1
   1594e:	|      lea 1c688 <typeName>,a0
   15954:	|      move.l (0,a1,a0.l),d0
   15958:	|      move.l d0,-(sp)
   1595a:	|      pea 1bd54 <talk.c.490538ff+0x1202>
   15960:	|      jsr 14e38 <joinStrings>
   15966:	|      addq.l #8,sp
   15968:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   1596a:	|      move.l (sp),-(sp)
   1596c:	|      move.l 8(sp),-(sp)
   15970:	|      jsr 183ec <KPrintF>
   15976:	|      addq.l #8,sp

		return FALSE;
   15978:	|      clr.w d0
   1597a:	|  ,-- bra.s 1598c <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   1597c:	'--|-> movea.l 20(sp),a0
   15980:	   |   move.l 4(a0),d0
   15984:	   |   movea.l 12(sp),a0
   15988:	   |   move.l d0,(a0)
	return TRUE;
   1598a:	   |   moveq #1,d0
}
   1598c:	   '-> addq.l #8,sp
   1598e:	       rts

00015990 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   15990:	move.l 8(sp),-(sp)
   15994:	jsr 7dd8 <getNumberedString>
   1599a:	addq.l #4,sp
   1599c:	move.l d0,-(sp)
   1599e:	move.l 8(sp),-(sp)
   159a2:	jsr 15b2e <makeTextVar>
   159a8:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   159aa:	movea.l 4(sp),a0
   159ae:	move.l 4(a0),d0
   159b2:	sne d0
   159b4:	neg.b d0
   159b6:	move.b d0,d0
   159b8:	andi.w #255,d0
}
   159bc:	rts

000159be <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   159be:	          subq.l #8,sp
    int size = stackSize(stacky);
   159c0:	          move.l 16(sp),-(sp)
   159c4:	          jsr 1626c <stackSize>
   159ca:	          addq.l #4,sp
   159cc:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   159d0:	          move.l 4(sp),-(sp)
   159d4:	          move.l 16(sp),-(sp)
   159d8:	          jsr 15a28 <makeFastArraySize>
   159de:	          addq.l #8,sp
   159e0:	          tst.w d0
   159e2:	      ,-- bne.s 159e8 <makeFastArrayFromStack+0x2a>
   159e4:	      |   clr.w d0
   159e6:	,-----|-- bra.s 15a24 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   159e8:	|     '-> movea.l 16(sp),a0
   159ec:	|         move.l (a0),(sp)
    size = 0;
   159ee:	|         clr.l 4(sp)
    while (allV) {
   159f2:	|     ,-- bra.s 15a1e <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   159f4:	|  ,--|-> movea.l 12(sp),a0
   159f8:	|  |  |   movea.l 4(a0),a0
   159fc:	|  |  |   move.l (a0),d1
   159fe:	|  |  |   move.l 4(sp),d0
   15a02:	|  |  |   lsl.l #3,d0
   15a04:	|  |  |   add.l d0,d1
   15a06:	|  |  |   move.l (sp),d0
   15a08:	|  |  |   move.l d1,-(sp)
   15a0a:	|  |  |   move.l d0,-(sp)
   15a0c:	|  |  |   jsr 15caa <copyMain>
   15a12:	|  |  |   addq.l #8,sp
        size++;
   15a14:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   15a18:	|  |  |   movea.l (sp),a0
   15a1a:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   15a1e:	|  |  '-> tst.l (sp)
   15a20:	|  '----- bne.s 159f4 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   15a22:	|         moveq #1,d0
}
   15a24:	'-------> addq.l #8,sp
   15a26:	          rts

00015a28 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   15a28:	          lea -28(sp),sp
   15a2c:	          move.l a6,-(sp)
    if (size < 0) {
   15a2e:	          tst.l 40(sp)
   15a32:	      ,-- bge.s 15a48 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   15a34:	      |   pea 1bd99 <talk.c.490538ff+0x1247>
   15a3a:	      |   jsr 183ec <KPrintF>
   15a40:	      |   addq.l #4,sp
		return FALSE;
   15a42:	      |   clr.w d0
   15a44:	,-----|-- bra.w 15b26 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   15a48:	|     '-> move.l 36(sp),-(sp)
   15a4c:	|         jsr 15b5a <unlinkVar>
   15a52:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   15a54:	|         movea.l 36(sp),a0
   15a58:	|         moveq #10,d0
   15a5a:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   15a5c:	|         moveq #12,d0
   15a5e:	|         move.l d0,24(sp)
   15a62:	|         clr.l 20(sp)
   15a66:	|         move.l 1c7ba <SysBase>,d0
   15a6c:	|         movea.l d0,a6
   15a6e:	|         move.l 24(sp),d0
   15a72:	|         move.l 20(sp),d1
   15a76:	|         jsr -684(a6)
   15a7a:	|         move.l d0,16(sp)
   15a7e:	|         move.l 16(sp),d0
   15a82:	|         movea.l 36(sp),a0
   15a86:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   15a8a:	|         movea.l 36(sp),a0
   15a8e:	|         move.l 4(a0),d0
   15a92:	|     ,-- bne.s 15a9a <makeFastArraySize+0x72>
   15a94:	|     |   clr.w d0
   15a96:	+-----|-- bra.w 15b26 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   15a9a:	|     '-> move.l 40(sp),d0
   15a9e:	|         lsl.l #3,d0
   15aa0:	|         move.l d0,12(sp)
   15aa4:	|         clr.l 8(sp)
   15aa8:	|         move.l 1c7ba <SysBase>,d0
   15aae:	|         movea.l d0,a6
   15ab0:	|         move.l 12(sp),d0
   15ab4:	|         move.l 8(sp),d1
   15ab8:	|         jsr -684(a6)
   15abc:	|         move.l d0,4(sp)
   15ac0:	|         move.l 4(sp),d0
   15ac4:	|         movea.l 36(sp),a0
   15ac8:	|         movea.l 4(a0),a0
   15acc:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   15ace:	|         movea.l 36(sp),a0
   15ad2:	|         movea.l 4(a0),a0
   15ad6:	|         move.l (a0),d0
   15ad8:	|     ,-- bne.s 15ade <makeFastArraySize+0xb6>
   15ada:	|     |   clr.w d0
   15adc:	+-----|-- bra.s 15b26 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   15ade:	|     '-> clr.l 28(sp)
   15ae2:	|     ,-- bra.s 15afe <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   15ae4:	|  ,--|-> movea.l 36(sp),a0
   15ae8:	|  |  |   movea.l 4(a0),a0
   15aec:	|  |  |   move.l (a0),d1
   15aee:	|  |  |   move.l 28(sp),d0
   15af2:	|  |  |   lsl.l #3,d0
   15af4:	|  |  |   movea.l d1,a0
   15af6:	|  |  |   adda.l d0,a0
   15af8:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   15afa:	|  |  |   addq.l #1,28(sp)
   15afe:	|  |  '-> move.l 28(sp),d0
   15b02:	|  |      cmp.l 40(sp),d0
   15b06:	|  '----- blt.s 15ae4 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   15b08:	|         movea.l 36(sp),a0
   15b0c:	|         movea.l 4(a0),a0
   15b10:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   15b16:	|         movea.l 36(sp),a0
   15b1a:	|         movea.l 4(a0),a0
   15b1e:	|         moveq #1,d0
   15b20:	|         move.l d0,8(a0)
    return TRUE;
   15b24:	|         moveq #1,d0
}
   15b26:	'-------> movea.l (sp)+,a6
   15b28:	          lea 28(sp),sp
   15b2c:	          rts

00015b2e <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   15b2e:	move.l 4(sp),-(sp)
   15b32:	jsr 15b5a <unlinkVar>
   15b38:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   15b3a:	movea.l 4(sp),a0
   15b3e:	moveq #3,d0
   15b40:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   15b42:	move.l 8(sp),-(sp)
   15b46:	jsr b8 <copyString>
   15b4c:	addq.l #4,sp
   15b4e:	movea.l 4(sp),a0
   15b52:	move.l d0,4(a0)
}
   15b56:	nop
   15b58:	rts

00015b5a <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   15b5a:	                      lea -16(sp),sp
   15b5e:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   15b60:	                      movea.l 24(sp),a0
   15b64:	                      move.l (a0),d0
   15b66:	                      moveq #10,d1
   15b68:	                      cmp.l d0,d1
   15b6a:	            ,-------- beq.w 15c22 <unlinkVar+0xc8>
   15b6e:	            |         moveq #10,d1
   15b70:	            |         cmp.l d0,d1
   15b72:	,-----------|-------- bcs.w 15c96 <unlinkVar+0x13c>
   15b76:	|           |         moveq #8,d1
   15b78:	|           |         cmp.l d0,d1
   15b7a:	|  ,--------|-------- beq.w 15c82 <unlinkVar+0x128>
   15b7e:	|  |        |         moveq #8,d1
   15b80:	|  |        |         cmp.l d0,d1
   15b82:	+--|--------|-------- bcs.w 15c96 <unlinkVar+0x13c>
   15b86:	|  |        |         moveq #3,d1
   15b88:	|  |        |         cmp.l d0,d1
   15b8a:	|  |        |     ,-- beq.s 15b96 <unlinkVar+0x3c>
   15b8c:	|  |        |     |   moveq #6,d1
   15b8e:	|  |        |     |   cmp.l d0,d1
   15b90:	|  |        |  ,--|-- beq.s 15bbc <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   15b92:	+--|--------|--|--|-- bra.w 15c96 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   15b96:	|  |        |  |  '-> movea.l 24(sp),a0
   15b9a:	|  |        |  |      move.l 4(a0),4(sp)
   15ba0:	|  |        |  |      move.l 1c7ba <SysBase>,d0
   15ba6:	|  |        |  |      movea.l d0,a6
   15ba8:	|  |        |  |      movea.l 4(sp),a1
   15bac:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   15bb0:	|  |        |  |      movea.l 24(sp),a0
   15bb4:	|  |        |  |      clr.l 4(a0)
		break;
   15bb8:	|  |  ,-----|--|----- bra.w 15ca0 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   15bbc:	|  |  |     |  '----> movea.l 24(sp),a0
   15bc0:	|  |  |     |         movea.l 4(a0),a0
   15bc4:	|  |  |     |         move.l 8(a0),d0
   15bc8:	|  |  |     |         subq.l #1,d0
   15bca:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   15bce:	|  |  |     |         movea.l 24(sp),a0
   15bd2:	|  |  |     |         movea.l 4(a0),a0
   15bd6:	|  |  |     |         move.l 8(a0),d0
   15bda:	|  |  |  ,--|-------- bgt.w 15c9a <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   15bde:	|  |  |  |  |     ,-- bra.s 15bf2 <unlinkVar+0x98>
   15be0:	|  |  |  |  |  ,--|-> movea.l 24(sp),a0
   15be4:	|  |  |  |  |  |  |   move.l 4(a0),d0
   15be8:	|  |  |  |  |  |  |   move.l d0,-(sp)
   15bea:	|  |  |  |  |  |  |   jsr 16290 <trimStack>
   15bf0:	|  |  |  |  |  |  |   addq.l #4,sp
   15bf2:	|  |  |  |  |  |  '-> movea.l 24(sp),a0
   15bf6:	|  |  |  |  |  |      movea.l 4(a0),a0
   15bfa:	|  |  |  |  |  |      move.l (a0),d0
   15bfc:	|  |  |  |  |  '----- bne.s 15be0 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   15bfe:	|  |  |  |  |         movea.l 24(sp),a0
   15c02:	|  |  |  |  |         move.l 4(a0),8(sp)
   15c08:	|  |  |  |  |         move.l 1c7ba <SysBase>,d0
   15c0e:	|  |  |  |  |         movea.l d0,a6
   15c10:	|  |  |  |  |         movea.l 8(sp),a1
   15c14:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   15c18:	|  |  |  |  |         movea.l 24(sp),a0
   15c1c:	|  |  |  |  |         clr.l 4(a0)
		break;
   15c20:	|  |  |  +--|-------- bra.s 15c9a <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   15c22:	|  |  |  |  '-------> movea.l 24(sp),a0
   15c26:	|  |  |  |            movea.l 4(a0),a0
   15c2a:	|  |  |  |            move.l 8(a0),d0
   15c2e:	|  |  |  |            subq.l #1,d0
   15c30:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   15c34:	|  |  |  |            movea.l 24(sp),a0
   15c38:	|  |  |  |            movea.l 4(a0),a0
   15c3c:	|  |  |  |            move.l 8(a0),d0
   15c40:	|  |  |  |        ,-- bgt.s 15c9e <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   15c42:	|  |  |  |        |   movea.l 24(sp),a0
   15c46:	|  |  |  |        |   movea.l 4(a0),a0
   15c4a:	|  |  |  |        |   move.l (a0),16(sp)
   15c4e:	|  |  |  |        |   move.l 1c7ba <SysBase>,d0
   15c54:	|  |  |  |        |   movea.l d0,a6
   15c56:	|  |  |  |        |   movea.l 16(sp),a1
   15c5a:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   15c5e:	|  |  |  |        |   movea.l 24(sp),a0
   15c62:	|  |  |  |        |   move.l 4(a0),12(sp)
   15c68:	|  |  |  |        |   move.l 1c7ba <SysBase>,d0
   15c6e:	|  |  |  |        |   movea.l d0,a6
   15c70:	|  |  |  |        |   movea.l 12(sp),a1
   15c74:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   15c78:	|  |  |  |        |   movea.l 24(sp),a0
   15c7c:	|  |  |  |        |   clr.l 4(a0)
		break;
   15c80:	|  |  |  |        +-- bra.s 15c9e <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   15c82:	|  '--|--|--------|-> movea.l 24(sp),a0
   15c86:	|     |  |        |   move.l 4(a0),d0
   15c8a:	|     |  |        |   move.l d0,-(sp)
   15c8c:	|     |  |        |   jsr a17a <deleteAnim>
   15c92:	|     |  |        |   addq.l #4,sp
		break;
   15c94:	|     +--|--------|-- bra.s 15ca0 <unlinkVar+0x146>
		break;
   15c96:	'-----|--|--------|-> nop
   15c98:	      +--|--------|-- bra.s 15ca0 <unlinkVar+0x146>
		break;
   15c9a:	      |  '--------|-> nop
   15c9c:	      +-----------|-- bra.s 15ca0 <unlinkVar+0x146>
		break;
   15c9e:	      |           '-> nop
	}
}
   15ca0:	      '-------------> nop
   15ca2:	                      movea.l (sp)+,a6
   15ca4:	                      lea 16(sp),sp
   15ca8:	                      rts

00015caa <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   15caa:	       movea.l 4(sp),a0
   15cae:	       move.l (a0),d0
   15cb0:	       movea.l 8(sp),a0
   15cb4:	       move.l d0,(a0)
	switch (to->varType) {
   15cb6:	       movea.l 8(sp),a0
   15cba:	       move.l (a0),d0
   15cbc:	       moveq #10,d1
   15cbe:	       cmp.l d0,d1
   15cc0:	,----- bcs.w 15db2 <copyMain+0x108>
   15cc4:	|      add.l d0,d0
   15cc6:	|      movea.l d0,a0
   15cc8:	|      adda.l #89300,a0
   15cce:	|      move.w (a0),d0
   15cd0:	|      jmp (15cd4 <copyMain+0x2a>,pc,d0.w)
   15cd4:	|      .short 0x00da
   15cd6:	|      ori.b #22,(a6)
   15cda:	|      ori.w #22,(a4)
   15cde:	|      ori.b #-126,(a6)
   15ce2:	|      ori.b #-68,(a6)
   15ce6:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   15cee:	|      move.l 4(a0),d0
   15cf2:	|      movea.l 8(sp),a0
   15cf6:	|      move.l d0,4(a0)
		return TRUE;
   15cfa:	|      moveq #1,d0
   15cfc:	|  ,-- bra.w 15dc4 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   15d00:	|  |   movea.l 4(sp),a0
   15d04:	|  |   move.l 4(a0),d0
   15d08:	|  |   movea.l 8(sp),a0
   15d0c:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   15d10:	|  |   movea.l 8(sp),a0
   15d14:	|  |   movea.l 4(a0),a0
   15d18:	|  |   move.l 8(a0),d0
   15d1c:	|  |   addq.l #1,d0
   15d1e:	|  |   move.l d0,8(a0)
		return TRUE;
   15d22:	|  |   moveq #1,d0
   15d24:	|  +-- bra.w 15dc4 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   15d28:	|  |   movea.l 4(sp),a0
   15d2c:	|  |   move.l 4(a0),d0
   15d30:	|  |   move.l d0,-(sp)
   15d32:	|  |   jsr b8 <copyString>
   15d38:	|  |   addq.l #4,sp
   15d3a:	|  |   movea.l 8(sp),a0
   15d3e:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   15d42:	|  |   movea.l 8(sp),a0
   15d46:	|  |   move.l 4(a0),d0
   15d4a:	|  |   sne d0
   15d4c:	|  |   neg.b d0
   15d4e:	|  |   move.b d0,d0
   15d50:	|  |   andi.w #255,d0
   15d54:	|  +-- bra.s 15dc4 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   15d56:	|  |   movea.l 4(sp),a0
   15d5a:	|  |   move.l 4(a0),d0
   15d5e:	|  |   movea.l 8(sp),a0
   15d62:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   15d66:	|  |   movea.l 8(sp),a0
   15d6a:	|  |   movea.l 4(a0),a0
   15d6e:	|  |   move.l 8(a0),d0
   15d72:	|  |   addq.l #1,d0
   15d74:	|  |   move.l d0,8(a0)
		return TRUE;
   15d78:	|  |   moveq #1,d0
   15d7a:	|  +-- bra.s 15dc4 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   15d7c:	|  |   movea.l 4(sp),a0
   15d80:	|  |   move.l 4(a0),d0
   15d84:	|  |   movea.l 8(sp),a0
   15d88:	|  |   move.l d0,4(a0)
		return TRUE;
   15d8c:	|  |   moveq #1,d0
   15d8e:	|  +-- bra.s 15dc4 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   15d90:	|  |   movea.l 4(sp),a0
   15d94:	|  |   move.l 4(a0),d0
   15d98:	|  |   move.l d0,-(sp)
   15d9a:	|  |   jsr 9dae <copyAnim>
   15da0:	|  |   addq.l #4,sp
   15da2:	|  |   movea.l 8(sp),a0
   15da6:	|  |   move.l d0,4(a0)
		return TRUE;
   15daa:	|  |   moveq #1,d0
   15dac:	|  +-- bra.s 15dc4 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   15dae:	|  |   moveq #1,d0
   15db0:	|  +-- bra.s 15dc4 <copyMain+0x11a>

		default:
		break;
   15db2:	'--|-> nop
	}
	KPrintF("Unknown value type");
   15db4:	   |   pea 1bdea <talk.c.490538ff+0x1298>
   15dba:	   |   jsr 183ec <KPrintF>
   15dc0:	   |   addq.l #4,sp
	return FALSE;
   15dc2:	   |   clr.w d0
}
   15dc4:	   '-> rts

00015dc6 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   15dc6:	move.l 8(sp),-(sp)
   15dca:	jsr 15b5a <unlinkVar>
   15dd0:	addq.l #4,sp
	return copyMain(from, to);
   15dd2:	move.l 8(sp),-(sp)
   15dd6:	move.l 8(sp),-(sp)
   15dda:	jsr 15caa <copyMain>
   15de0:	addq.l #8,sp
}
   15de2:	rts

00015de4 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   15de4:	       movea.l 4(sp),a0
   15de8:	       move.l (a0),d0
   15dea:	       moveq #8,d1
   15dec:	       cmp.l d0,d1
   15dee:	   ,-- bne.s 15e04 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   15df0:	   |   movea.l 4(sp),a0
   15df4:	   |   move.l 4(a0),d0
   15df8:	   |   move.l d0,-(sp)
   15dfa:	   |   jsr 9dae <copyAnim>
   15e00:	   |   addq.l #4,sp
   15e02:	,--|-- bra.s 15e4a <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   15e04:	|  '-> movea.l 4(sp),a0
   15e08:	|      move.l (a0),d0
   15e0a:	|      moveq #1,d1
   15e0c:	|      cmp.l d0,d1
   15e0e:	|  ,-- bne.s 15e22 <getAnimationFromVar+0x3e>
   15e10:	|  |   movea.l 4(sp),a0
   15e14:	|  |   move.l 4(a0),d0
   15e18:	|  +-- bne.s 15e22 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   15e1a:	|  |   jsr b5e0 <makeNullAnim>
   15e20:	+--|-- bra.s 15e4a <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   15e22:	|  '-> movea.l 4(sp),a0
   15e26:	|      move.l (a0),d0
   15e28:	|      add.l d0,d0
   15e2a:	|      movea.l d0,a1
   15e2c:	|      adda.l d0,a1
   15e2e:	|      lea 1c688 <typeName>,a0
   15e34:	|      move.l (0,a1,a0.l),d0
   15e38:	|      move.l d0,-(sp)
   15e3a:	|      pea 1bcd6 <talk.c.490538ff+0x1184>
   15e40:	|      jsr 183ec <KPrintF>
   15e46:	|      addq.l #8,sp
	return NULL;
   15e48:	|      moveq #0,d0
}
   15e4a:	'----> rts

00015e4c <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   15e4c:	       movea.l 4(sp),a0
   15e50:	       move.l (a0),d0
   15e52:	       moveq #10,d1
   15e54:	       cmp.l d0,d1
   15e56:	,----- bcs.w 15edc <getBoolean+0x90>
   15e5a:	|      add.l d0,d0
   15e5c:	|      movea.l d0,a0
   15e5e:	|      adda.l #89706,a0
   15e64:	|      move.w (a0),d0
   15e66:	|      jmp (15e6a <getBoolean+0x1e>,pc,d0.w)
   15e6a:	|      ori.b #26,(a6)
   15e6e:	|      ori.w #68,(114,a2,d0.w)
   15e74:	|      ori.w #46,(114,a2,d0.w)
   15e7a:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   15e80:	|      clr.w d0
   15e82:	|  ,-- bra.s 15ee0 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   15e84:	|  |   movea.l 4(sp),a0
   15e88:	|  |   move.l 4(a0),d0
   15e8c:	|  |   sne d0
   15e8e:	|  |   neg.b d0
   15e90:	|  |   move.b d0,d0
   15e92:	|  |   andi.w #255,d0
   15e96:	|  +-- bra.s 15ee0 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   15e98:	|  |   movea.l 4(sp),a0
   15e9c:	|  |   movea.l 4(a0),a0
   15ea0:	|  |   move.l (a0),d0
   15ea2:	|  |   sne d0
   15ea4:	|  |   neg.b d0
   15ea6:	|  |   move.b d0,d0
   15ea8:	|  |   andi.w #255,d0
   15eac:	|  +-- bra.s 15ee0 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   15eae:	|  |   movea.l 4(sp),a0
   15eb2:	|  |   movea.l 4(a0),a0
   15eb6:	|  |   move.b (a0),d0
   15eb8:	|  |   sne d0
   15eba:	|  |   neg.b d0
   15ebc:	|  |   move.b d0,d0
   15ebe:	|  |   andi.w #255,d0
   15ec2:	|  +-- bra.s 15ee0 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   15ec4:	|  |   movea.l 4(sp),a0
   15ec8:	|  |   movea.l 4(a0),a0
   15ecc:	|  |   move.l 4(a0),d0
   15ed0:	|  |   sne d0
   15ed2:	|  |   neg.b d0
   15ed4:	|  |   move.b d0,d0
   15ed6:	|  |   andi.w #255,d0
   15eda:	|  +-- bra.s 15ee0 <getBoolean+0x94>

		default:
		break;
   15edc:	'--|-> nop
	}
	return TRUE;
   15ede:	   |   moveq #1,d0
}
   15ee0:	   '-> rts

00015ee2 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   15ee2:	      ,----------> lea -76(sp),sp
   15ee6:	      |            move.l a6,-(sp)
	switch (from->varType) {
   15ee8:	      |            movea.l 84(sp),a0
   15eec:	      |            move.l (a0),d0
   15eee:	      |            moveq #10,d1
   15ef0:	      |            cmp.l d0,d1
   15ef2:	,-----|----------- bcs.w 16190 <getTextFromAnyVar+0x2ae>
   15ef6:	|     |            add.l d0,d0
   15ef8:	|     |            movea.l d0,a0
   15efa:	|     |            adda.l #89862,a0
   15f00:	|     |            move.w (a0),d0
   15f02:	|     |            jmp (15f06 <getTextFromAnyVar+0x24>,pc,d0.w)
   15f06:	|     |            .short 0x028a
   15f08:	|     |            bset d0,(a0)+
   15f0a:	|     |            .short 0x028a
   15f0c:	|     |            ori.b #-118,(a6)
   15f10:	|     |            andi.b #8,ccr
   15f14:	|     |            andi.w #650,-(a0)
   15f18:	|     |            .short 0x028a
   15f1a:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   15f20:	|     |            move.l 4(a0),d0
   15f24:	|     |            move.l d0,-(sp)
   15f26:	|     |            jsr b8 <copyString>
   15f2c:	|     |            addq.l #4,sp
   15f2e:	|  ,--|----------- bra.w 161b2 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   15f32:	|  |  |            pea 1bdfd <talk.c.490538ff+0x12ab>
   15f38:	|  |  |            jsr b8 <copyString>
   15f3e:	|  |  |            addq.l #4,sp
   15f40:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   15f44:	|  |  |            clr.l 72(sp)
   15f48:	|  |  |     ,----- bra.w 15ff2 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   15f4c:	|  |  |  ,--|----> pea 1be03 <talk.c.490538ff+0x12b1>
   15f52:	|  |  |  |  |      move.l 80(sp),-(sp)
   15f56:	|  |  |  |  |      jsr 14e38 <joinStrings>
   15f5c:	|  |  |  |  |      addq.l #8,sp
   15f5e:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   15f62:	|  |  |  |  |  ,-- bne.s 15f6a <getTextFromAnyVar+0x88>
   15f64:	|  |  |  |  |  |   moveq #0,d0
   15f66:	|  +--|--|--|--|-- bra.w 161b2 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   15f6a:	|  |  |  |  |  '-> move.l 76(sp),56(sp)
   15f70:	|  |  |  |  |      move.l 1c7ba <SysBase>,d0
   15f76:	|  |  |  |  |      movea.l d0,a6
   15f78:	|  |  |  |  |      movea.l 56(sp),a1
   15f7c:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   15f80:	|  |  |  |  |      movea.l 84(sp),a0
   15f84:	|  |  |  |  |      movea.l 4(a0),a0
   15f88:	|  |  |  |  |      move.l (a0),d1
   15f8a:	|  |  |  |  |      move.l 72(sp),d0
   15f8e:	|  |  |  |  |      lsl.l #3,d0
   15f90:	|  |  |  |  |      add.l d1,d0
   15f92:	|  |  |  |  |      move.l d0,-(sp)
   15f94:	|  |  +--|--|----- jsr 15ee2 <getTextFromAnyVar>(pc)
   15f98:	|  |  |  |  |      addq.l #4,sp
   15f9a:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   15f9e:	|  |  |  |  |      move.l 52(sp),-(sp)
   15fa2:	|  |  |  |  |      move.l 64(sp),-(sp)
   15fa6:	|  |  |  |  |      jsr 14e38 <joinStrings>
   15fac:	|  |  |  |  |      addq.l #8,sp
   15fae:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   15fb2:	|  |  |  |  |  ,-- bne.s 15fba <getTextFromAnyVar+0xd8>
   15fb4:	|  |  |  |  |  |   moveq #0,d0
   15fb6:	|  +--|--|--|--|-- bra.w 161b2 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   15fba:	|  |  |  |  |  '-> move.l 52(sp),48(sp)
   15fc0:	|  |  |  |  |      move.l 1c7ba <SysBase>,d0
   15fc6:	|  |  |  |  |      movea.l d0,a6
   15fc8:	|  |  |  |  |      movea.l 48(sp),a1
   15fcc:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   15fd0:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   15fd4:	|  |  |  |  |      move.l 60(sp),44(sp)
   15fda:	|  |  |  |  |      move.l 1c7ba <SysBase>,d0
   15fe0:	|  |  |  |  |      movea.l d0,a6
   15fe2:	|  |  |  |  |      movea.l 44(sp),a1
   15fe6:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   15fea:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   15fee:	|  |  |  |  |      addq.l #1,72(sp)
   15ff2:	|  |  |  |  '----> movea.l 84(sp),a0
   15ff6:	|  |  |  |         movea.l 4(a0),a0
   15ffa:	|  |  |  |         move.l 4(a0),d0
   15ffe:	|  |  |  |         cmp.l 72(sp),d0
   16002:	|  |  |  '-------- bgt.w 15f4c <getTextFromAnyVar+0x6a>
			}
			return builder;
   16006:	|  |  |            move.l 76(sp),d0
   1600a:	|  +--|----------- bra.w 161b2 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   1600e:	|  |  |            pea 1be05 <talk.c.490538ff+0x12b3>
   16014:	|  |  |            jsr b8 <copyString>
   1601a:	|  |  |            addq.l #4,sp
   1601c:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   16020:	|  |  |            movea.l 84(sp),a0
   16024:	|  |  |            movea.l 4(a0),a0
   16028:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   1602c:	|  |  |     ,----- bra.w 160ce <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   16030:	|  |  |  ,--|----> pea 1be03 <talk.c.490538ff+0x12b1>
   16036:	|  |  |  |  |      move.l 72(sp),-(sp)
   1603a:	|  |  |  |  |      jsr 14e38 <joinStrings>
   16040:	|  |  |  |  |      addq.l #8,sp
   16042:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   16046:	|  |  |  |  |  ,-- bne.s 1604e <getTextFromAnyVar+0x16c>
   16048:	|  |  |  |  |  |   moveq #0,d0
   1604a:	|  +--|--|--|--|-- bra.w 161b2 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   1604e:	|  |  |  |  |  '-> move.l 68(sp),32(sp)
   16054:	|  |  |  |  |      move.l 1c7ba <SysBase>,d0
   1605a:	|  |  |  |  |      movea.l d0,a6
   1605c:	|  |  |  |  |      movea.l 32(sp),a1
   16060:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   16064:	|  |  |  |  |      move.l 64(sp),d0
   16068:	|  |  |  |  |      move.l d0,-(sp)
   1606a:	|  |  '--|--|----- jsr 15ee2 <getTextFromAnyVar>(pc)
   1606e:	|  |     |  |      addq.l #4,sp
   16070:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   16074:	|  |     |  |      move.l 28(sp),-(sp)
   16078:	|  |     |  |      move.l 40(sp),-(sp)
   1607c:	|  |     |  |      jsr 14e38 <joinStrings>
   16082:	|  |     |  |      addq.l #8,sp
   16084:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   16088:	|  |     |  |  ,-- bne.s 16090 <getTextFromAnyVar+0x1ae>
   1608a:	|  |     |  |  |   moveq #0,d0
   1608c:	|  +-----|--|--|-- bra.w 161b2 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   16090:	|  |     |  |  '-> move.l 28(sp),24(sp)
   16096:	|  |     |  |      move.l 1c7ba <SysBase>,d0
   1609c:	|  |     |  |      movea.l d0,a6
   1609e:	|  |     |  |      movea.l 24(sp),a1
   160a2:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   160a6:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   160aa:	|  |     |  |      move.l 36(sp),20(sp)
   160b0:	|  |     |  |      move.l 1c7ba <SysBase>,d0
   160b6:	|  |     |  |      movea.l d0,a6
   160b8:	|  |     |  |      movea.l 20(sp),a1
   160bc:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   160c0:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   160c4:	|  |     |  |      movea.l 64(sp),a0
   160c8:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   160ce:	|  |     |  '----> tst.l 64(sp)
   160d2:	|  |     '-------- bne.w 16030 <getTextFromAnyVar+0x14e>
			}
			return builder;
   160d6:	|  |               move.l 68(sp),d0
   160da:	|  +-------------- bra.w 161b2 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   160de:	|  |               moveq #10,d0
   160e0:	|  |               move.l d0,16(sp)
   160e4:	|  |               clr.l 12(sp)
   160e8:	|  |               move.l 1c7ba <SysBase>,d0
   160ee:	|  |               movea.l d0,a6
   160f0:	|  |               move.l 16(sp),d0
   160f4:	|  |               move.l 12(sp),d1
   160f8:	|  |               jsr -684(a6)
   160fc:	|  |               move.l d0,8(sp)
   16100:	|  |               move.l 8(sp),d0
   16104:	|  |               move.l d0,4(sp)
			if (! buff) {
   16108:	|  |           ,-- bne.s 1611e <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   1610a:	|  |           |   pea 1be0c <talk.c.490538ff+0x12ba>
   16110:	|  |           |   jsr 183ec <KPrintF>
   16116:	|  |           |   addq.l #4,sp
				return NULL;
   16118:	|  |           |   moveq #0,d0
   1611a:	|  +-----------|-- bra.w 161b2 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   1611e:	|  |           '-> movea.l 84(sp),a0
   16122:	|  |               move.l 4(a0),d0
   16126:	|  |               move.l d0,-(sp)
   16128:	|  |               pea 1be36 <talk.c.490538ff+0x12e4>
   1612e:	|  |               move.l 12(sp),-(sp)
   16132:	|  |               jsr 15116 <sprintf>
   16138:	|  |               lea 12(sp),sp
			return buff;
   1613c:	|  |               move.l 4(sp),d0
   16140:	|  +-------------- bra.s 161b2 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   16142:	|  |               movea.l 84(sp),a0
   16146:	|  |               move.l 4(a0),d0
   1614a:	|  |               move.l d0,-(sp)
   1614c:	|  |               jsr 4f0c <resourceNameFromNum>
   16152:	|  |               addq.l #4,sp
   16154:	|  |               move.l d0,-(sp)
   16156:	|  |               pea 19bc5 <PutChar+0xd37>
   1615c:	|  |               jsr 14e38 <joinStrings>
   16162:	|  |               addq.l #8,sp
   16164:	|  +-------------- bra.s 161b2 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   16166:	|  |               movea.l 84(sp),a0
   1616a:	|  |               move.l 4(a0),d0
   1616e:	|  |               move.l d0,-(sp)
   16170:	|  |               jsr de0a <findObjectType>
   16176:	|  |               addq.l #4,sp
   16178:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   1617c:	+--|-------------- beq.s 16190 <getTextFromAnyVar+0x2ae>
   1617e:	|  |               movea.l 40(sp),a0
   16182:	|  |               move.l (a0),d0
   16184:	|  |               move.l d0,-(sp)
   16186:	|  |               jsr b8 <copyString>
   1618c:	|  |               addq.l #4,sp
   1618e:	|  +-------------- bra.s 161b2 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   16190:	'--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   16192:	   |               movea.l 84(sp),a0
   16196:	   |               move.l (a0),d0
   16198:	   |               add.l d0,d0
   1619a:	   |               movea.l d0,a1
   1619c:	   |               adda.l d0,a1
   1619e:	   |               lea 1c688 <typeName>,a0
   161a4:	   |               move.l (0,a1,a0.l),d0
   161a8:	   |               move.l d0,-(sp)
   161aa:	   |               jsr b8 <copyString>
   161b0:	   |               addq.l #4,sp
}
   161b2:	   '-------------> movea.l (sp)+,a6
   161b4:	                   lea 76(sp),sp
   161b8:	                   rts

000161ba <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   161ba:	move.l 4(sp),-(sp)
   161be:	jsr 15b5a <unlinkVar>
   161c4:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   161c6:	movea.l 4(sp),a0
   161ca:	moveq #8,d0
   161cc:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   161ce:	movea.l 4(sp),a0
   161d2:	move.l 8(sp),4(a0)
}
   161d8:	nop
   161da:	rts

000161dc <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   161dc:	move.l 4(sp),-(sp)
   161e0:	jsr 15b5a <unlinkVar>
   161e6:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   161e8:	movea.l 4(sp),a0
   161ec:	moveq #9,d0
   161ee:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   161f0:	movea.l 4(sp),a0
   161f4:	move.l 8(sp),4(a0)
}
   161fa:	nop
   161fc:	rts

000161fe <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);	thisVar->varType = vT;
   161fe:	move.l 4(sp),-(sp)
   16202:	jsr 15b5a <unlinkVar>
   16208:	addq.l #4,sp
   1620a:	movea.l 4(sp),a0
   1620e:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;}
   16212:	movea.l 4(sp),a0
   16216:	move.l 12(sp),4(a0)
   1621c:	nop
   1621e:	rts

00016220 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   16220:	      ,-- bra.s 16232 <stackGetByIndex+0x12>
        vS = vS->next;
   16222:	,-----|-> movea.l 4(sp),a0
   16226:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   1622c:	|     +-- bne.s 16232 <stackGetByIndex+0x12>
            return NULL;
   1622e:	|     |   moveq #0,d0
   16230:	|  ,--|-- bra.s 16246 <stackGetByIndex+0x26>
    while (theIndex--) {
   16232:	|  |  '-> move.l 8(sp),d0
   16236:	|  |      move.l d0,d1
   16238:	|  |      subq.l #1,d1
   1623a:	|  |      move.l d1,8(sp)
   1623e:	|  |      tst.l d0
   16240:	'--|----- bne.s 16222 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   16242:	   |      move.l 4(sp),d0
}
   16246:	   '----> rts

00016248 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   16248:	          tst.l 4(sp)
   1624c:	      ,-- bne.s 1625c <stackFindLast+0x14>
		return NULL;
   1624e:	      |   moveq #0,d0
   16250:	,-----|-- bra.s 1626a <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   16252:	|  ,--|-> movea.l 4(sp),a0
   16256:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   1625c:	|  |  '-> movea.l 4(sp),a0
   16260:	|  |      move.l 8(a0),d0
   16264:	|  '----- bne.s 16252 <stackFindLast+0xa>

	return hunt;
   16266:	|         move.l 4(sp),d0
}
   1626a:	'-------> rts

0001626c <stackSize>:

int stackSize (const struct stackHandler * me) {
   1626c:	       subq.l #8,sp
	int r = 0;
   1626e:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   16272:	       movea.l 12(sp),a0
   16276:	       move.l (a0),(sp)
	while (a) {
   16278:	   ,-- bra.s 16284 <stackSize+0x18>
		r ++;
   1627a:	,--|-> addq.l #1,4(sp)
		a = a -> next;
   1627e:	|  |   movea.l (sp),a0
   16280:	|  |   move.l 8(a0),(sp)
	while (a) {
   16284:	|  '-> tst.l (sp)
   16286:	'----- bne.s 1627a <stackSize+0xe>
	}
	return r;
   16288:	       move.l 4(sp),d0
}
   1628c:	       addq.l #8,sp
   1628e:	       rts

00016290 <trimStack>:

void trimStack (struct variableStack ** stack) {
   16290:	subq.l #8,sp
   16292:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   16294:	movea.l 16(sp),a0
   16298:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   1629c:	movea.l 16(sp),a0
   162a0:	movea.l (a0),a0
   162a2:	move.l 8(a0),d0
   162a6:	movea.l 16(sp),a0
   162aa:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   162ac:	move.l 8(sp),d0
   162b0:	move.l d0,-(sp)
   162b2:	jsr 15b5a <unlinkVar>
   162b8:	addq.l #4,sp
	FreeVec(killMe);
   162ba:	move.l 8(sp),4(sp)
   162c0:	move.l 1c7ba <SysBase>,d0
   162c6:	movea.l d0,a6
   162c8:	movea.l 4(sp),a1
   162cc:	jsr -690(a6)
   162d0:	nop
   162d2:	movea.l (sp)+,a6
   162d4:	addq.l #8,sp
   162d6:	rts

000162d8 <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   162d8:	       lea -52(sp),sp
   162dc:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   162de:	       pea 1be39 <talk.c.490538ff+0x12e7>
   162e4:	       jsr 183ec <KPrintF>
   162ea:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   162ec:	       moveq #68,d0
   162ee:	       move.l d0,52(sp)
   162f2:	       clr.l 48(sp)
   162f6:	       move.l 1c7ba <SysBase>,d0
   162fc:	       movea.l d0,a6
   162fe:	       move.l 52(sp),d0
   16302:	       move.l 48(sp),d1
   16306:	       jsr -684(a6)
   1630a:	       move.l d0,44(sp)
   1630e:	       move.l 44(sp),d0
   16312:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   16316:	   ,-- bne.s 1631e <freeze+0x46>
   16318:	   |   clr.w d0
   1631a:	,--|-- bra.w 164b0 <freeze+0x1d8>

	CstFreeze();
   1631e:	|  '-> jsr 1c1e <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   16324:	|      move.l 1c852 <sceneWidth>,d0
   1632a:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   1632e:	|      move.l 1c856 <sceneHeight>,d0
   16334:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   16338:	|      move.l 1c852 <sceneWidth>,d0
   1633e:	|      movea.l 40(sp),a0
   16342:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   16346:	|      move.l 1c856 <sceneHeight>,d0
   1634c:	|      movea.l 40(sp),a0
   16350:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   16354:	|      move.l 1c870 <cameraX>,d0
   1635a:	|      movea.l 40(sp),a0
   1635e:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   16362:	|      move.l 1c874 <cameraY>,d0
   16368:	|      movea.l 40(sp),a0
   1636c:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   16370:	|      move.l 1c142 <cameraZoom>,d0
   16376:	|      movea.l 40(sp),a0
   1637a:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   1637e:	|      move.w #1,1c85e <backdropExists>

	newFreezer -> allPeople = allPeople;
   16386:	|      move.l 1c81a <allPeople>,d0
   1638c:	|      movea.l 40(sp),a0
   16390:	|      move.l d0,(a0)
	allPeople = NULL;
   16392:	|      clr.l 1c81a <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   16398:	|      moveq #42,d0
   1639a:	|      move.l d0,28(sp)
   1639e:	|      clr.l 24(sp)
   163a2:	|      move.l 1c7ba <SysBase>,d0
   163a8:	|      movea.l d0,a6
   163aa:	|      move.l 28(sp),d0
   163ae:	|      move.l 24(sp),d1
   163b2:	|      jsr -684(a6)
   163b6:	|      move.l d0,20(sp)
   163ba:	|      move.l 20(sp),d0
   163be:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   163c2:	|  ,-- bne.s 163ca <freeze+0xf2>
   163c4:	|  |   clr.w d0
   163c6:	+--|-- bra.w 164b0 <freeze+0x1d8>

	newFreezer -> allScreenRegions = allScreenRegions;
   163ca:	|  '-> move.l 1c8c6 <allScreenRegions>,d0
   163d0:	|      movea.l 40(sp),a0
   163d4:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   163d8:	|      clr.l 1c8c6 <allScreenRegions>
	overRegion = NULL;
   163de:	|      clr.l 1c8ca <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   163e4:	|      move.l 1c6b2 <mouseCursorAnim>,d0
   163ea:	|      movea.l 40(sp),a0
   163ee:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   163f2:	|      move.l 1c6b6 <mouseCursorFrameNum>,d0
   163f8:	|      movea.l 40(sp),a0
   163fc:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   16400:	|      jsr b5e0 <makeNullAnim>
   16406:	|      move.l d0,1c6b2 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   1640c:	|      clr.l 1c6b6 <mouseCursorFrameNum>

	newFreezer -> zBuffer = zBuffer;
   16412:	|      move.l 1c816 <zBuffer>,d0
   16418:	|      movea.l 40(sp),a0
   1641c:	|      move.l d0,60(a0)
	zBuffer = NULL;
   16420:	|      clr.l 1c816 <zBuffer>

	newFreezer -> speech = speech;
   16426:	|      move.l 1c6fe <speech>,d0
   1642c:	|      movea.l 40(sp),a0
   16430:	|      move.l d0,20(a0)
	initSpeech ();
   16434:	|      jsr 4402 <initSpeech>

	newFreezer -> currentEvents = currentEvents;
   1643a:	|      move.l 1c120 <currentEvents>,d0
   16440:	|      movea.l 40(sp),a0
   16444:	|      move.l d0,28(a0)
	currentEvents = (struct eventHandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   16448:	|      moveq #28,d0
   1644a:	|      move.l d0,12(sp)
   1644e:	|      clr.l 8(sp)
   16452:	|      move.l 1c7ba <SysBase>,d0
   16458:	|      movea.l d0,a6
   1645a:	|      move.l 12(sp),d0
   1645e:	|      move.l 8(sp),d1
   16462:	|      jsr -684(a6)
   16466:	|      move.l d0,4(sp)
   1646a:	|      move.l 4(sp),d0
   1646e:	|      move.l d0,1c120 <currentEvents>
	if (!currentEvents) return FALSE;
   16474:	|      move.l 1c120 <currentEvents>,d0
   1647a:	|  ,-- bne.s 16480 <freeze+0x1a8>
   1647c:	|  |   clr.w d0
   1647e:	+--|-- bra.s 164b0 <freeze+0x1d8>
	memset ( currentEvents, 0, sizeof(struct eventHandlers));
   16480:	|  '-> move.l 1c120 <currentEvents>,d0
   16486:	|      pea 1c <_start+0x1c>
   1648a:	|      clr.l -(sp)
   1648c:	|      move.l d0,-(sp)
   1648e:	|      jsr 18370 <memset>
   16494:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   16498:	|      move.l 1c8aa <frozenStuff>,d0
   1649e:	|      movea.l 40(sp),a0
   164a2:	|      move.l d0,64(a0)
	frozenStuff = newFreezer;
   164a6:	|      move.l 40(sp),1c8aa <frozenStuff>

	return TRUE;
   164ae:	|      moveq #1,d0
}
   164b0:	'----> movea.l (sp)+,a6
   164b2:	       lea 52(sp),sp
   164b6:	       rts

000164b8 <howFrozen>:

int howFrozen () {
   164b8:	       subq.l #8,sp
	int a = 0;
   164ba:	       clr.l 4(sp)
	struct frozenStuffStruct * f = frozenStuff;
   164be:	       move.l 1c8aa <frozenStuff>,(sp)
	while (f) {
   164c4:	   ,-- bra.s 164d0 <howFrozen+0x18>
		a ++;
   164c6:	,--|-> addq.l #1,4(sp)
		f = f -> next;
   164ca:	|  |   movea.l (sp),a0
   164cc:	|  |   move.l 64(a0),(sp)
	while (f) {
   164d0:	|  '-> tst.l (sp)
   164d2:	'----- bne.s 164c6 <howFrozen+0xe>
	}
	return a;
   164d4:	       move.l 4(sp),d0
}
   164d8:	       addq.l #8,sp
   164da:	       rts

000164dc <unfreeze>:

void unfreeze () {
   164dc:	       lea -16(sp),sp
   164e0:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   164e2:	       move.l 1c8aa <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   164ea:	       move.l 1c8aa <frozenStuff>,d0
   164f0:	,----- beq.w 16728 <unfreeze+0x24c>

	CstUnfreeze();
   164f4:	|      jsr 3fac <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   164fa:	|      movea.l 1c8aa <frozenStuff>,a0
   16500:	|      move.l 48(a0),d0
   16504:	|      move.l d0,1c852 <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   1650a:	|      movea.l 1c8aa <frozenStuff>,a0
   16510:	|      move.l 52(a0),d0
   16514:	|      move.l d0,1c856 <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   1651a:	|      movea.l 1c8aa <frozenStuff>,a0
   16520:	|      move.l 40(a0),d0
   16524:	|      move.l d0,1c870 <cameraX>
	cameraY = frozenStuff -> cameraY;
   1652a:	|      movea.l 1c8aa <frozenStuff>,a0
   16530:	|      move.l 44(a0),d0
   16534:	|      move.l d0,1c874 <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   1653a:	|      move.l 1c776 <input+0xa>,d0
   16540:	|      move.l d0,-(sp)
   16542:	|      jsr 1881e <__floatsisf>
   16548:	|      addq.l #4,sp
   1654a:	|      move.l d0,d1
   1654c:	|      move.l 1c142 <cameraZoom>,d0
   16552:	|      move.l d0,-(sp)
   16554:	|      move.l d1,-(sp)
   16556:	|      jsr 188d0 <__mulsf3>
   1655c:	|      addq.l #8,sp
   1655e:	|      move.l d0,-(sp)
   16560:	|      jsr 187b6 <__fixsfsi>
   16566:	|      addq.l #4,sp
   16568:	|      move.l d0,1c776 <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   1656e:	|      move.l 1c77a <input+0xe>,d0
   16574:	|      move.l d0,-(sp)
   16576:	|      jsr 1881e <__floatsisf>
   1657c:	|      addq.l #4,sp
   1657e:	|      move.l d0,d1
   16580:	|      move.l 1c142 <cameraZoom>,d0
   16586:	|      move.l d0,-(sp)
   16588:	|      move.l d1,-(sp)
   1658a:	|      jsr 188d0 <__mulsf3>
   16590:	|      addq.l #8,sp
   16592:	|      move.l d0,-(sp)
   16594:	|      jsr 187b6 <__fixsfsi>
   1659a:	|      addq.l #4,sp
   1659c:	|      move.l d0,1c77a <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   165a2:	|      movea.l 1c8aa <frozenStuff>,a0
   165a8:	|      move.l 56(a0),d0
   165ac:	|      move.l d0,1c142 <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   165b2:	|      move.l 1c776 <input+0xa>,d0
   165b8:	|      move.l d0,-(sp)
   165ba:	|      jsr 1881e <__floatsisf>
   165c0:	|      addq.l #4,sp
   165c2:	|      move.l d0,d1
   165c4:	|      move.l 1c142 <cameraZoom>,d0
   165ca:	|      move.l d0,-(sp)
   165cc:	|      move.l d1,-(sp)
   165ce:	|      jsr 186d4 <__divsf3>
   165d4:	|      addq.l #8,sp
   165d6:	|      move.l d0,-(sp)
   165d8:	|      jsr 187b6 <__fixsfsi>
   165de:	|      addq.l #4,sp
   165e0:	|      move.l d0,1c776 <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   165e6:	|      move.l 1c77a <input+0xe>,d0
   165ec:	|      move.l d0,-(sp)
   165ee:	|      jsr 1881e <__floatsisf>
   165f4:	|      addq.l #4,sp
   165f6:	|      move.l d0,d1
   165f8:	|      move.l 1c142 <cameraZoom>,d0
   165fe:	|      move.l d0,-(sp)
   16600:	|      move.l d1,-(sp)
   16602:	|      jsr 186d4 <__divsf3>
   16608:	|      addq.l #8,sp
   1660a:	|      move.l d0,-(sp)
   1660c:	|      jsr 187b6 <__fixsfsi>
   16612:	|      addq.l #4,sp
   16614:	|      move.l d0,1c77a <input+0xe>

	killAllPeople ();
   1661a:	|      jsr b2b0 <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   16620:	|      movea.l 1c8aa <frozenStuff>,a0
   16626:	|      move.l (a0),d0
   16628:	|      move.l d0,1c81a <allPeople>

	killAllRegions ();
   1662e:	|      jsr 16bfc <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   16634:	|      movea.l 1c8aa <frozenStuff>,a0
   1663a:	|      move.l 4(a0),d0
   1663e:	|      move.l d0,1c8c6 <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   16644:	|      move.l 1c6b2 <mouseCursorAnim>,d0
   1664a:	|      move.l d0,-(sp)
   1664c:	|      jsr a17a <deleteAnim>
   16652:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   16654:	|      movea.l 1c8aa <frozenStuff>,a0
   1665a:	|      move.l 32(a0),d0
   1665e:	|      move.l d0,1c6b2 <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   16664:	|      movea.l 1c8aa <frozenStuff>,a0
   1666a:	|      move.l 36(a0),d0
   1666e:	|      move.l d0,1c6b6 <mouseCursorFrameNum>

	killZBuffer ();
   16674:	|      jsr 8f06 <killZBuffer>
	zBuffer = frozenStuff->zBuffer;
   1667a:	|      movea.l 1c8aa <frozenStuff>,a0
   16680:	|      move.l 60(a0),d0
   16684:	|      move.l d0,1c816 <zBuffer>

	if (currentEvents) FreeVec(currentEvents);
   1668a:	|      move.l 1c120 <currentEvents>,d0
   16690:	|  ,-- beq.s 166aa <unfreeze+0x1ce>
   16692:	|  |   move.l 1c120 <currentEvents>,12(sp)
   1669a:	|  |   move.l 1c7ba <SysBase>,d0
   166a0:	|  |   movea.l d0,a6
   166a2:	|  |   movea.l 12(sp),a1
   166a6:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   166aa:	|  '-> movea.l 1c8aa <frozenStuff>,a0
   166b0:	|      move.l 28(a0),d0
   166b4:	|      move.l d0,1c120 <currentEvents>

	killAllSpeech ();
   166ba:	|      jsr 449a <killAllSpeech>
	if (speech) FreeVec(speech);
   166c0:	|      move.l 1c6fe <speech>,d0
   166c6:	|  ,-- beq.s 166e0 <unfreeze+0x204>
   166c8:	|  |   move.l 1c6fe <speech>,8(sp)
   166d0:	|  |   move.l 1c7ba <SysBase>,d0
   166d6:	|  |   movea.l d0,a6
   166d8:	|  |   movea.l 8(sp),a1
   166dc:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   166e0:	|  '-> movea.l 1c8aa <frozenStuff>,a0
   166e6:	|      move.l 20(a0),d0
   166ea:	|      move.l d0,1c6fe <speech>

	frozenStuff = frozenStuff -> next;
   166f0:	|      movea.l 1c8aa <frozenStuff>,a0
   166f6:	|      move.l 64(a0),d0
   166fa:	|      move.l d0,1c8aa <frozenStuff>

	overRegion = NULL;
   16700:	|      clr.l 1c8ca <overRegion>
	if (killMe) FreeVec(killMe);
   16706:	|      tst.l 16(sp)
   1670a:	|  ,-- beq.s 16722 <unfreeze+0x246>
   1670c:	|  |   move.l 16(sp),4(sp)
   16712:	|  |   move.l 1c7ba <SysBase>,d0
   16718:	|  |   movea.l d0,a6
   1671a:	|  |   movea.l 4(sp),a1
   1671e:	|  |   jsr -690(a6)
	killMe = NULL;
   16722:	|  '-> clr.l 16(sp)
   16726:	|  ,-- bra.s 1672a <unfreeze+0x24e>
	if (! frozenStuff) return;
   16728:	'--|-> nop
}
   1672a:	   '-> movea.l (sp)+,a6
   1672c:	       lea 16(sp),sp
   16730:	       rts

00016732 <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   16732:	pea 1be4b <talk.c.490538ff+0x12f9>
   16738:	jsr 183ec <KPrintF>
   1673e:	addq.l #4,sp
	return FALSE;
   16740:	clr.w d0
}
   16742:	rts

00016744 <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   16744:	          lea -32(sp),sp
   16748:	          move.l a6,-(sp)
   1674a:	          move.l d2,-(sp)
	unsigned int a = 0;
   1674c:	          clr.l 36(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   16750:	          move.l 1c8b6 <fontOrderString>,d0
   16756:	      ,-- beq.s 16770 <loadFont+0x2c>
   16758:	      |   move.l 1c8b6 <fontOrderString>,24(sp)
   16760:	      |   move.l 1c7ba <SysBase>,d0
   16766:	      |   movea.l d0,a6
   16768:	      |   movea.l 24(sp),a1
   1676c:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   16770:	      '-> move.l 48(sp),-(sp)
   16774:	          jsr b8 <copyString>
   1677a:	          addq.l #4,sp
   1677c:	          move.l d0,1c8b6 <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);	
   16782:	          move.l 1c8c2 <theFont>,d0
   16788:	      ,-- beq.s 1679a <loadFont+0x56>
   1678a:	      |   move.l 1c8c2 <theFont>,d0
   16790:	      |   move.l d0,-(sp)
   16792:	      |   jsr 925e <forgetSpriteBank>
   16798:	      |   addq.l #4,sp
	theFont = NULL;
   1679a:	      '-> clr.l 1c8c2 <theFont>

	loadedFontNum = filenum;
   167a0:	          move.l 44(sp),1c8b2 <loadedFontNum>

	fontTableSize = 0;
   167a8:	          clr.l 1c8be <fontTableSize>
	char *tmp = charOrder;
   167ae:	          move.l 48(sp),32(sp)
	while (*tmp) {        
   167b4:	   ,----- bra.s 167f0 <loadFont+0xac>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   167b6:	,--|----> movea.l 32(sp),a0
   167ba:	|  |      move.b (a0),d0
   167bc:	|  |      ext.w d0
   167be:	|  |      movea.w d0,a0
   167c0:	|  |      move.l 1c8be <fontTableSize>,d0
   167c6:	|  |      move.l d0,d0
   167c8:	|  |      move.b d0,d0
   167ca:	|  |      andi.l #255,d0
   167d0:	|  |      cmp.l a0,d0
   167d2:	|  |  ,-- bge.s 167e4 <loadFont+0xa0>
   167d4:	|  |  |   movea.l 32(sp),a0
   167d8:	|  |  |   move.b (a0),d0
   167da:	|  |  |   ext.w d0
   167dc:	|  |  |   movea.w d0,a0
   167de:	|  |  |   move.l a0,1c8be <fontTableSize>
		*tmp++;
   167e4:	|  |  '-> move.l 32(sp),d0
   167e8:	|  |      move.l d0,d1
   167ea:	|  |      addq.l #1,d1
   167ec:	|  |      move.l d1,32(sp)
	while (*tmp) {        
   167f0:	|  '----> movea.l 32(sp),a0
   167f4:	|         move.b (a0),d0
   167f6:	'-------- bne.s 167b6 <loadFont+0x72>
	}
	fontTableSize++;
   167f8:	          move.l 1c8be <fontTableSize>,d0
   167fe:	          addq.l #1,d0
   16800:	          move.l d0,1c8be <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   16806:	          move.l 1c8ba <fontTable>,d0
   1680c:	      ,-- beq.s 16826 <loadFont+0xe2>
   1680e:	      |   move.l 1c8ba <fontTable>,20(sp)
   16816:	      |   move.l 1c7ba <SysBase>,d0
   1681c:	      |   movea.l d0,a6
   1681e:	      |   movea.l 20(sp),a1
   16822:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   16826:	      '-> move.l 1c8be <fontTableSize>,d0
   1682c:	          add.l d0,d0
   1682e:	          add.l d0,d0
   16830:	          move.l d0,16(sp)
   16834:	          clr.l 12(sp)
   16838:	          move.l 1c7ba <SysBase>,d0
   1683e:	          movea.l d0,a6
   16840:	          move.l 16(sp),d0
   16844:	          move.l 12(sp),d1
   16848:	          jsr -684(a6)
   1684c:	          move.l d0,8(sp)
   16850:	          move.l 8(sp),d0
   16854:	          move.l d0,1c8ba <fontTable>
	if (!fontTable) return FALSE;
   1685a:	          move.l 1c8ba <fontTable>,d0
   16860:	      ,-- bne.s 16868 <loadFont+0x124>
   16862:	      |   clr.w d0
   16864:	,-----|-- bra.w 1690e <loadFont+0x1ca>

	for (a = 0;  a < fontTableSize; a++) {
   16868:	|     '-> clr.l 36(sp)
   1686c:	|     ,-- bra.s 16886 <loadFont+0x142>
		fontTable[a] = 0;
   1686e:	|  ,--|-> move.l 1c8ba <fontTable>,d1
   16874:	|  |  |   move.l 36(sp),d0
   16878:	|  |  |   add.l d0,d0
   1687a:	|  |  |   add.l d0,d0
   1687c:	|  |  |   movea.l d1,a0
   1687e:	|  |  |   adda.l d0,a0
   16880:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   16882:	|  |  |   addq.l #1,36(sp)
   16886:	|  |  '-> move.l 1c8be <fontTableSize>,d0
   1688c:	|  |      cmp.l 36(sp),d0
   16890:	|  '----- bhi.s 1686e <loadFont+0x12a>
	}
	a = 0;
   16892:	|         clr.l 36(sp)
	int i = 0;
   16896:	|         clr.l 28(sp)
	tmp = charOrder;
   1689a:	|         move.l 48(sp),32(sp)
	while (*tmp) {
   168a0:	|     ,-- bra.s 168d0 <loadFont+0x18c>
		fontTable[*tmp++] = i;
   168a2:	|  ,--|-> move.l 1c8ba <fontTable>,d1
   168a8:	|  |  |   move.l 32(sp),d0
   168ac:	|  |  |   move.l d0,d2
   168ae:	|  |  |   addq.l #1,d2
   168b0:	|  |  |   move.l d2,32(sp)
   168b4:	|  |  |   movea.l d0,a0
   168b6:	|  |  |   move.b (a0),d0
   168b8:	|  |  |   ext.w d0
   168ba:	|  |  |   movea.w d0,a0
   168bc:	|  |  |   move.l a0,d0
   168be:	|  |  |   add.l a0,d0
   168c0:	|  |  |   add.l d0,d0
   168c2:	|  |  |   movea.l d1,a0
   168c4:	|  |  |   adda.l d0,a0
   168c6:	|  |  |   move.l 28(sp),d0
   168ca:	|  |  |   move.l d0,(a0)
		i++;
   168cc:	|  |  |   addq.l #1,28(sp)
	while (*tmp) {
   168d0:	|  |  '-> movea.l 32(sp),a0
   168d4:	|  |      move.b (a0),d0
   168d6:	|  '----- bne.s 168a2 <loadFont+0x15e>
	}
	
	theFont = loadBankForAnim(filenum);
   168d8:	|         move.l 44(sp),-(sp)
   168dc:	|         jsr 1710e <loadBankForAnim>
   168e2:	|         addq.l #4,sp
   168e4:	|         move.l d0,1c8c2 <theFont>
	if (!theFont) {
   168ea:	|         move.l 1c8c2 <theFont>,d0
   168f0:	|     ,-- bne.s 16904 <loadFont+0x1c0>
		KPrintF("loadFont: Can't load font");
   168f2:	|     |   pea 1be72 <talk.c.490538ff+0x1320>
   168f8:	|     |   jsr 183ec <KPrintF>
   168fe:	|     |   addq.l #4,sp
		return FALSE;
   16900:	|     |   clr.w d0
   16902:	+-----|-- bra.s 1690e <loadFont+0x1ca>
	}
	fontHeight = h;
   16904:	|     '-> move.l 52(sp),1c8ae <fontHeight>
	return TRUE;
   1690c:	|         moveq #1,d0
}
   1690e:	'-------> move.l (sp)+,d2
   16910:	          movea.l (sp)+,a6
   16912:	          lea 32(sp),sp
   16916:	          rts

00016918 <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   16918:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   1691c:	                clr.l 4(sp)

    if (!fontTableSize) return;
   16920:	                move.l 1c8be <fontTableSize>,d0
   16926:	,-------------- beq.w 169ee <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   1692a:	|               move.w 1c6b0 <fontSpace>,d0
   16930:	|               asr.w #1,d0
   16932:	|               ext.l d0
   16934:	|               add.l d0,20(sp)
	char *tmp = theText;
   16938:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   1693e:	|     ,-------- bra.w 169e2 <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   16942:	|  ,--|-------> movea.l 1c8c2 <theFont>,a0
   16948:	|  |  |         movea.l 16(a0),a0
   1694c:	|  |  |         movea.l 8(sp),a1
   16950:	|  |  |         move.b (a1),d0
   16952:	|  |  |         move.b d0,d0
   16954:	|  |  |         andi.l #255,d0
   1695a:	|  |  |         move.l 1c8be <fontTableSize>,d1
   16960:	|  |  |         cmp.l d0,d1
   16962:	|  |  |  ,----- bls.s 1698e <pasteStringToBackdrop+0x76>
   16964:	|  |  |  |      move.l 1c8ba <fontTable>,d1
   1696a:	|  |  |  |      movea.l 8(sp),a1
   1696e:	|  |  |  |      move.b (a1),d0
   16970:	|  |  |  |      move.b d0,d0
   16972:	|  |  |  |      andi.l #255,d0
   16978:	|  |  |  |      add.l d0,d0
   1697a:	|  |  |  |      add.l d0,d0
   1697c:	|  |  |  |      movea.l d1,a1
   1697e:	|  |  |  |      adda.l d0,a1
   16980:	|  |  |  |      move.l (a1),d1
   16982:	|  |  |  |      move.l d1,d0
   16984:	|  |  |  |      lsl.l #3,d0
   16986:	|  |  |  |      sub.l d1,d0
   16988:	|  |  |  |      add.l d0,d0
   1698a:	|  |  |  |      add.l d0,d0
   1698c:	|  |  |  |  ,-- bra.s 16990 <pasteStringToBackdrop+0x78>
   1698e:	|  |  |  '--|-> moveq #0,d0
   16990:	|  |  |     '-> adda.l d0,a0
   16992:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   16994:	|  |  |         move.l 24(sp),d1
   16998:	|  |  |         movea.l (sp),a0
   1699a:	|  |  |         move.l 12(a0),d0
   1699e:	|  |  |         move.l d0,d0
   169a0:	|  |  |         sub.w d0,d1
   169a2:	|  |  |         move.w d1,d0
   169a4:	|  |  |         movea.w d0,a1
   169a6:	|  |  |         move.l 20(sp),d1
   169aa:	|  |  |         movea.l (sp),a0
   169ac:	|  |  |         move.l 8(a0),d0
   169b0:	|  |  |         move.l d0,d0
   169b2:	|  |  |         sub.w d0,d1
   169b4:	|  |  |         move.w d1,d0
   169b6:	|  |  |         movea.w d0,a0
   169b8:	|  |  |         move.l a1,-(sp)
   169ba:	|  |  |         move.l a0,-(sp)
   169bc:	|  |  |         move.l 8(sp),-(sp)
   169c0:	|  |  |         jsr 243c <CstPasteChar>
   169c6:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   169ca:	|  |  |         movea.l (sp),a0
   169cc:	|  |  |         move.l (a0),d1
   169ce:	|  |  |         move.w 1c6b0 <fontSpace>,d0
   169d4:	|  |  |         movea.w d0,a0
   169d6:	|  |  |         move.l d1,d0
   169d8:	|  |  |         add.l a0,d0
   169da:	|  |  |         add.l d0,20(sp)
		tmp++;
   169de:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   169e2:	|  |  '-------> movea.l 8(sp),a0
   169e6:	|  |            move.b (a0),d0
   169e8:	|  '----------- bne.w 16942 <pasteStringToBackdrop+0x2a>
   169ec:	|           ,-- bra.s 169f0 <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   169ee:	'-----------|-> nop
    }
}
   169f0:	            '-> lea 12(sp),sp
   169f4:	                rts

000169f6 <stringWidth>:


int stringWidth (char * theText) {
   169f6:	                lea -16(sp),sp
	int a = 0;
   169fa:	                clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   169fe:	                clr.l 12(sp)

	if (! fontTableSize) return 0;
   16a02:	                move.l 1c8be <fontTableSize>,d0
   16a08:	            ,-- bne.s 16a0e <stringWidth+0x18>
   16a0a:	            |   moveq #0,d0
   16a0c:	,-----------|-- bra.s 16a82 <stringWidth+0x8c>

	char *tmp = theText;
   16a0e:	|           '-> move.l 20(sp),8(sp)
	
	while (*tmp) {
   16a14:	|     ,-------- bra.s 16a76 <stringWidth+0x80>
        c = *tmp++;
   16a16:	|  ,--|-------> move.l 8(sp),d0
   16a1a:	|  |  |         move.l d0,d1
   16a1c:	|  |  |         addq.l #1,d1
   16a1e:	|  |  |         move.l d1,8(sp)
   16a22:	|  |  |         movea.l d0,a0
   16a24:	|  |  |         move.b (a0),d0
   16a26:	|  |  |         ext.w d0
   16a28:	|  |  |         movea.w d0,a0
   16a2a:	|  |  |         move.l a0,(sp)
		xOff += theFont->bank.sprites[fontInTable(c)].width + fontSpace;
   16a2c:	|  |  |         movea.l 1c8c2 <theFont>,a0
   16a32:	|  |  |         movea.l 16(a0),a1
   16a36:	|  |  |         move.l 1c8be <fontTableSize>,d0
   16a3c:	|  |  |         cmp.l (sp),d0
   16a3e:	|  |  |  ,----- bls.s 16a5e <stringWidth+0x68>
   16a40:	|  |  |  |      move.l 1c8ba <fontTable>,d1
   16a46:	|  |  |  |      move.l (sp),d0
   16a48:	|  |  |  |      add.l d0,d0
   16a4a:	|  |  |  |      add.l d0,d0
   16a4c:	|  |  |  |      movea.l d1,a0
   16a4e:	|  |  |  |      adda.l d0,a0
   16a50:	|  |  |  |      move.l (a0),d1
   16a52:	|  |  |  |      move.l d1,d0
   16a54:	|  |  |  |      lsl.l #3,d0
   16a56:	|  |  |  |      sub.l d1,d0
   16a58:	|  |  |  |      add.l d0,d0
   16a5a:	|  |  |  |      add.l d0,d0
   16a5c:	|  |  |  |  ,-- bra.s 16a60 <stringWidth+0x6a>
   16a5e:	|  |  |  '--|-> moveq #0,d0
   16a60:	|  |  |     '-> lea (0,a1,d0.l),a0
   16a64:	|  |  |         move.l (a0),d1
   16a66:	|  |  |         move.w 1c6b0 <fontSpace>,d0
   16a6c:	|  |  |         movea.w d0,a0
   16a6e:	|  |  |         move.l d1,d0
   16a70:	|  |  |         add.l a0,d0
   16a72:	|  |  |         add.l d0,12(sp)
	while (*tmp) {
   16a76:	|  |  '-------> movea.l 8(sp),a0
   16a7a:	|  |            move.b (a0),d0
   16a7c:	|  '----------- bne.s 16a16 <stringWidth+0x20>
	
	}//Todo: Amigize this
	
	return xOff;
   16a7e:	|               move.l 12(sp),d0
}
   16a82:	'-------------> lea 16(sp),sp
   16a86:	                rts

00016a88 <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   16a88:	       lea -16(sp),sp
   16a8c:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   16a8e:	       moveq #36,d0
   16a90:	       move.l d0,16(sp)
   16a94:	       clr.l 12(sp)
   16a98:	       move.l 1c7ba <SysBase>,d0
   16a9e:	       movea.l d0,a6
   16aa0:	       move.l 16(sp),d0
   16aa4:	       move.l 12(sp),d1
   16aa8:	       jsr -684(a6)
   16aac:	       move.l d0,8(sp)
   16ab0:	       move.l 8(sp),d0
   16ab4:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   16ab8:	   ,-- bne.s 16ac0 <addScreenRegion+0x38>
   16aba:	   |   clr.w d0
   16abc:	,--|-- bra.w 16b40 <addScreenRegion+0xb8>
    newRegion->di = di;
   16ac0:	|  '-> movea.l 4(sp),a0
   16ac4:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   16aca:	|      movea.l 4(sp),a0
   16ace:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   16ad2:	|      movea.l 4(sp),a0
   16ad6:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   16adc:	|      movea.l 4(sp),a0
   16ae0:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   16ae6:	|      movea.l 4(sp),a0
   16aea:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   16af0:	|      movea.l 4(sp),a0
   16af4:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   16afa:	|      movea.l 4(sp),a0
   16afe:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   16b04:	|      move.l 52(sp),-(sp)
   16b08:	|      jsr defa <loadObjectType>
   16b0e:	|      addq.l #4,sp
   16b10:	|      movea.l 4(sp),a0
   16b14:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   16b18:	|      move.l 1c8c6 <allScreenRegions>,d0
   16b1e:	|      movea.l 4(sp),a0
   16b22:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   16b26:	|      move.l 4(sp),1c8c6 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   16b2e:	|      movea.l 4(sp),a0
   16b32:	|      move.l 28(a0),d0
   16b36:	|      sne d0
   16b38:	|      neg.b d0
   16b3a:	|      move.b d0,d0
   16b3c:	|      andi.w #255,d0
}
   16b40:	'----> movea.l (sp)+,a6
   16b42:	       lea 16(sp),sp
   16b46:	       rts

00016b48 <getOverRegion>:

void getOverRegion () {
   16b48:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   16b4a:	             move.l 1c8c6 <allScreenRegions>,(sp)
	while (thisRegion) {
   16b50:	   ,-------- bra.s 16bbe <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   16b52:	,--|-------> move.l 1c776 <input+0xa>,d0
   16b58:	|  |         movea.l (sp),a0
   16b5a:	|  |         movea.l (a0),a0
   16b5c:	|  |         move.l 1c870 <cameraX>,d1
   16b62:	|  |         suba.l d1,a0
   16b64:	|  |         cmpa.l d0,a0
   16b66:	|  |  ,----- bgt.s 16bb8 <getOverRegion+0x70>
   16b68:	|  |  |      move.l 1c77a <input+0xe>,d0
   16b6e:	|  |  |      movea.l (sp),a0
   16b70:	|  |  |      movea.l 4(a0),a0
   16b74:	|  |  |      move.l 1c874 <cameraY>,d1
   16b7a:	|  |  |      suba.l d1,a0
   16b7c:	|  |  |      cmpa.l d0,a0
   16b7e:	|  |  +----- bgt.s 16bb8 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   16b80:	|  |  |      move.l 1c776 <input+0xa>,d0
   16b86:	|  |  |      movea.l (sp),a0
   16b88:	|  |  |      movea.l 8(a0),a0
   16b8c:	|  |  |      move.l 1c870 <cameraX>,d1
   16b92:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   16b94:	|  |  |      cmpa.l d0,a0
   16b96:	|  |  +----- blt.s 16bb8 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   16b98:	|  |  |      move.l 1c77a <input+0xe>,d0
   16b9e:	|  |  |      movea.l (sp),a0
   16ba0:	|  |  |      movea.l 12(a0),a0
   16ba4:	|  |  |      move.l 1c874 <cameraY>,d1
   16baa:	|  |  |      suba.l d1,a0
   16bac:	|  |  |      cmpa.l d0,a0
   16bae:	|  |  +----- blt.s 16bb8 <getOverRegion+0x70>
			overRegion = thisRegion;
   16bb0:	|  |  |      move.l (sp),1c8ca <overRegion>
			return;
   16bb6:	|  |  |  ,-- bra.s 16bca <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   16bb8:	|  |  '--|-> movea.l (sp),a0
   16bba:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   16bbe:	|  '-----|-> tst.l (sp)
   16bc0:	'--------|-- bne.s 16b52 <getOverRegion+0xa>
	}
	overRegion = NULL;
   16bc2:	         |   clr.l 1c8ca <overRegion>
	return;
   16bc8:	         |   nop
}
   16bca:	         '-> addq.l #4,sp
   16bcc:	             rts

00016bce <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   16bce:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   16bd0:	             move.l 1c8c6 <allScreenRegions>,(sp)

	while (thisRegion) {
   16bd6:	   ,-------- bra.s 16bf2 <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   16bd8:	,--|-------> movea.l (sp),a0
   16bda:	|  |         movea.l 28(a0),a0
   16bde:	|  |         move.l 4(a0),d0
   16be2:	|  |         cmp.l 8(sp),d0
   16be6:	|  |     ,-- bne.s 16bec <getRegionForObject+0x1e>
			return thisRegion;
   16be8:	|  |     |   move.l (sp),d0
   16bea:	|  |  ,--|-- bra.s 16bf8 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   16bec:	|  |  |  '-> movea.l (sp),a0
   16bee:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   16bf2:	|  '--|----> tst.l (sp)
   16bf4:	'-----|----- bne.s 16bd8 <getRegionForObject+0xa>
	}

	return NULL;
   16bf6:	      |      moveq #0,d0
}
   16bf8:	      '----> addq.l #4,sp
   16bfa:	             rts

00016bfc <killAllRegions>:

void killAllRegions () {
   16bfc:	       subq.l #8,sp
   16bfe:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   16c00:	   ,-- bra.s 16c42 <killAllRegions+0x46>
		killRegion = allScreenRegions;
   16c02:	,--|-> move.l 1c8c6 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   16c0a:	|  |   movea.l 1c8c6 <allScreenRegions>,a0
   16c10:	|  |   move.l 32(a0),d0
   16c14:	|  |   move.l d0,1c8c6 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   16c1a:	|  |   movea.l 8(sp),a0
   16c1e:	|  |   move.l 28(a0),d0
   16c22:	|  |   move.l d0,-(sp)
   16c24:	|  |   jsr e1b2 <removeObjectType>
   16c2a:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   16c2c:	|  |   move.l 8(sp),4(sp)
   16c32:	|  |   move.l 1c7ba <SysBase>,d0
   16c38:	|  |   movea.l d0,a6
   16c3a:	|  |   movea.l 4(sp),a1
   16c3e:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   16c42:	|  '-> move.l 1c8c6 <allScreenRegions>,d0
   16c48:	'----- bne.s 16c02 <killAllRegions+0x6>
	}
	overRegion = NULL;
   16c4a:	       clr.l 1c8ca <overRegion>
}
   16c50:	       nop
   16c52:	       movea.l (sp)+,a6
   16c54:	       addq.l #8,sp
   16c56:	       rts

00016c58 <loadRegions>:

void loadRegions (BPTR fp) {
   16c58:	       lea -24(sp),sp
   16c5c:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   16c5e:	       move.l 32(sp),-(sp)
   16c62:	       jsr 6bc <get2bytes>
   16c68:	       addq.l #4,sp
   16c6a:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   16c6e:	       move.l #116934,20(sp)

	while (numRegions --) {
   16c76:	   ,-- bra.w 16d54 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   16c7a:	,--|-> moveq #36,d0
   16c7c:	|  |   move.l d0,16(sp)
   16c80:	|  |   clr.l 12(sp)
   16c84:	|  |   move.l 1c7ba <SysBase>,d0
   16c8a:	|  |   movea.l d0,a6
   16c8c:	|  |   move.l 16(sp),d0
   16c90:	|  |   move.l 12(sp),d1
   16c94:	|  |   jsr -684(a6)
   16c98:	|  |   move.l d0,8(sp)
   16c9c:	|  |   move.l 8(sp),d0
   16ca0:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   16ca4:	|  |   movea.l 20(sp),a0
   16ca8:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   16cac:	|  |   moveq #32,d1
   16cae:	|  |   add.l 4(sp),d1
   16cb2:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   16cb6:	|  |   move.l 32(sp),-(sp)
   16cba:	|  |   jsr 6bc <get2bytes>
   16cc0:	|  |   addq.l #4,sp
   16cc2:	|  |   movea.l 4(sp),a0
   16cc6:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   16cc8:	|  |   move.l 32(sp),-(sp)
   16ccc:	|  |   jsr 6bc <get2bytes>
   16cd2:	|  |   addq.l #4,sp
   16cd4:	|  |   movea.l 4(sp),a0
   16cd8:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   16cdc:	|  |   move.l 32(sp),-(sp)
   16ce0:	|  |   jsr 6bc <get2bytes>
   16ce6:	|  |   addq.l #4,sp
   16ce8:	|  |   movea.l 4(sp),a0
   16cec:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   16cf0:	|  |   move.l 32(sp),-(sp)
   16cf4:	|  |   jsr 6bc <get2bytes>
   16cfa:	|  |   addq.l #4,sp
   16cfc:	|  |   movea.l 4(sp),a0
   16d00:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   16d04:	|  |   move.l 32(sp),-(sp)
   16d08:	|  |   jsr 6bc <get2bytes>
   16d0e:	|  |   addq.l #4,sp
   16d10:	|  |   movea.l 4(sp),a0
   16d14:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   16d18:	|  |   move.l 32(sp),-(sp)
   16d1c:	|  |   jsr 6bc <get2bytes>
   16d22:	|  |   addq.l #4,sp
   16d24:	|  |   movea.l 4(sp),a0
   16d28:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   16d2c:	|  |   move.l 32(sp),-(sp)
   16d30:	|  |   jsr 6bc <get2bytes>
   16d36:	|  |   addq.l #4,sp
   16d38:	|  |   movea.l 4(sp),a0
   16d3c:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   16d40:	|  |   move.l 32(sp),-(sp)
   16d44:	|  |   jsr dea8 <loadObjectRef>
   16d4a:	|  |   addq.l #4,sp
   16d4c:	|  |   movea.l 4(sp),a0
   16d50:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   16d54:	|  '-> move.l 24(sp),d0
   16d58:	|      move.l d0,d1
   16d5a:	|      subq.l #1,d1
   16d5c:	|      move.l d1,24(sp)
   16d60:	|      tst.l d0
   16d62:	'----- bne.w 16c7a <loadRegions+0x22>
	}
	* pointy = NULL;
   16d66:	       movea.l 20(sp),a0
   16d6a:	       clr.l (a0)
}
   16d6c:	       nop
   16d6e:	       movea.l (sp)+,a6
   16d70:	       lea 24(sp),sp
   16d74:	       rts

00016d76 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   16d76:	             lea -12(sp),sp
   16d7a:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   16d7c:	             move.l #116934,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   16d84:	   ,-------- bra.s 16dfe <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   16d86:	,--|-------> movea.l 12(sp),a0
   16d8a:	|  |         movea.l (a0),a0
   16d8c:	|  |         movea.l 28(a0),a0
   16d90:	|  |         move.l 4(a0),d0
   16d94:	|  |         cmp.l 20(sp),d0
   16d98:	|  |  ,----- bne.s 16df0 <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   16d9a:	|  |  |      movea.l 12(sp),a0
   16d9e:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   16da2:	|  |  |      movea.l 8(sp),a0
   16da6:	|  |  |      move.l 32(a0),d0
   16daa:	|  |  |      movea.l 12(sp),a0
   16dae:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   16db0:	|  |  |      movea.l 8(sp),a0
   16db4:	|  |  |      move.l 28(a0),d0
   16db8:	|  |  |      move.l d0,-(sp)
   16dba:	|  |  |      jsr e1b2 <removeObjectType>
   16dc0:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   16dc2:	|  |  |      move.l 1c8ca <overRegion>,d0
   16dc8:	|  |  |      cmp.l 8(sp),d0
   16dcc:	|  |  |  ,-- bne.s 16dd4 <removeScreenRegion+0x5e>
   16dce:	|  |  |  |   clr.l 1c8ca <overRegion>
            FreeVec(killMe);
   16dd4:	|  |  |  '-> move.l 8(sp),4(sp)
   16dda:	|  |  |      move.l 1c7ba <SysBase>,d0
   16de0:	|  |  |      movea.l d0,a6
   16de2:	|  |  |      movea.l 4(sp),a1
   16de6:	|  |  |      jsr -690(a6)
            killMe = NULL;
   16dea:	|  |  |      clr.l 8(sp)
   16dee:	|  +--|----- bra.s 16dfe <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   16df0:	|  |  '----> movea.l 12(sp),a0
   16df4:	|  |         move.l (a0),d0
   16df6:	|  |         moveq #32,d1
   16df8:	|  |         add.l d0,d1
   16dfa:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   16dfe:	|  '-------> movea.l 12(sp),a0
   16e02:	|            move.l (a0),d0
   16e04:	'----------- bne.s 16d86 <removeScreenRegion+0x10>
        }
    }
}
   16e06:	             nop
   16e08:	             nop
   16e0a:	             movea.l (sp)+,a6
   16e0c:	             lea 12(sp),sp
   16e10:	             rts

00016e12 <saveRegions>:

void saveRegions (BPTR fp) {
   16e12:	       subq.l #8,sp
	int numRegions = 0;
   16e14:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   16e18:	       move.l 1c8c6 <allScreenRegions>,(sp)
	while (thisRegion) {
   16e1e:	   ,-- bra.s 16e2a <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   16e20:	,--|-> movea.l (sp),a0
   16e22:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   16e26:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   16e2a:	|  '-> tst.l (sp)
   16e2c:	'----- bne.s 16e20 <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   16e2e:	       move.l 12(sp),-(sp)
   16e32:	       move.l 8(sp),-(sp)
   16e36:	       jsr 8d0 <put2bytes>
   16e3c:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   16e3e:	       move.l 1c8c6 <allScreenRegions>,(sp)
	while (thisRegion) {
   16e44:	,----- bra.w 16eec <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   16e48:	|  ,-> movea.l (sp),a0
   16e4a:	|  |   move.l (a0),d0
   16e4c:	|  |   move.l 12(sp),-(sp)
   16e50:	|  |   move.l d0,-(sp)
   16e52:	|  |   jsr 8d0 <put2bytes>
   16e58:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   16e5a:	|  |   movea.l (sp),a0
   16e5c:	|  |   move.l 4(a0),d0
   16e60:	|  |   move.l 12(sp),-(sp)
   16e64:	|  |   move.l d0,-(sp)
   16e66:	|  |   jsr 8d0 <put2bytes>
   16e6c:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   16e6e:	|  |   movea.l (sp),a0
   16e70:	|  |   move.l 8(a0),d0
   16e74:	|  |   move.l 12(sp),-(sp)
   16e78:	|  |   move.l d0,-(sp)
   16e7a:	|  |   jsr 8d0 <put2bytes>
   16e80:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   16e82:	|  |   movea.l (sp),a0
   16e84:	|  |   move.l 12(a0),d0
   16e88:	|  |   move.l 12(sp),-(sp)
   16e8c:	|  |   move.l d0,-(sp)
   16e8e:	|  |   jsr 8d0 <put2bytes>
   16e94:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   16e96:	|  |   movea.l (sp),a0
   16e98:	|  |   move.l 16(a0),d0
   16e9c:	|  |   move.l 12(sp),-(sp)
   16ea0:	|  |   move.l d0,-(sp)
   16ea2:	|  |   jsr 8d0 <put2bytes>
   16ea8:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   16eaa:	|  |   movea.l (sp),a0
   16eac:	|  |   move.l 20(a0),d0
   16eb0:	|  |   move.l 12(sp),-(sp)
   16eb4:	|  |   move.l d0,-(sp)
   16eb6:	|  |   jsr 8d0 <put2bytes>
   16ebc:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   16ebe:	|  |   movea.l (sp),a0
   16ec0:	|  |   move.l 24(a0),d0
   16ec4:	|  |   move.l 12(sp),-(sp)
   16ec8:	|  |   move.l d0,-(sp)
   16eca:	|  |   jsr 8d0 <put2bytes>
   16ed0:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   16ed2:	|  |   movea.l (sp),a0
   16ed4:	|  |   move.l 28(a0),d0
   16ed8:	|  |   move.l 12(sp),-(sp)
   16edc:	|  |   move.l d0,-(sp)
   16ede:	|  |   jsr e252 <saveObjectRef>
   16ee4:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   16ee6:	|  |   movea.l (sp),a0
   16ee8:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   16eec:	'--|-> tst.l (sp)
   16eee:	   '-- bne.w 16e48 <saveRegions+0x36>
	}
}
   16ef2:	       nop
   16ef4:	       nop
   16ef6:	       addq.l #8,sp
   16ef8:	       rts

00016efa <showBoxes>:

void showBoxes () {
   16efa:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   16efc:	       move.l 1c8c6 <allScreenRegions>,(sp)

	while (huntRegion) {
   16f02:	,----- bra.w 16f9e <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   16f06:	|  ,-> movea.l (sp),a0
   16f08:	|  |   move.l 12(a0),d0
   16f0c:	|  |   movea.l d0,a1
   16f0e:	|  |   movea.l (sp),a0
   16f10:	|  |   move.l 4(a0),d0
   16f14:	|  |   move.l d0,d1
   16f16:	|  |   movea.l (sp),a0
   16f18:	|  |   move.l (a0),d0
   16f1a:	|  |   move.l a1,-(sp)
   16f1c:	|  |   move.l d1,-(sp)
   16f1e:	|  |   move.l d0,-(sp)
   16f20:	|  |   jsr db36 <drawVerticalLine>
   16f26:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   16f2a:	|  |   movea.l (sp),a0
   16f2c:	|  |   move.l 12(a0),d0
   16f30:	|  |   movea.l d0,a1
   16f32:	|  |   movea.l (sp),a0
   16f34:	|  |   move.l 4(a0),d0
   16f38:	|  |   move.l d0,d1
   16f3a:	|  |   movea.l (sp),a0
   16f3c:	|  |   move.l 8(a0),d0
   16f40:	|  |   move.l a1,-(sp)
   16f42:	|  |   move.l d1,-(sp)
   16f44:	|  |   move.l d0,-(sp)
   16f46:	|  |   jsr db36 <drawVerticalLine>
   16f4c:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   16f50:	|  |   movea.l (sp),a0
   16f52:	|  |   move.l 8(a0),d0
   16f56:	|  |   movea.l d0,a1
   16f58:	|  |   movea.l (sp),a0
   16f5a:	|  |   move.l 4(a0),d0
   16f5e:	|  |   move.l d0,d1
   16f60:	|  |   movea.l (sp),a0
   16f62:	|  |   move.l (a0),d0
   16f64:	|  |   move.l a1,-(sp)
   16f66:	|  |   move.l d1,-(sp)
   16f68:	|  |   move.l d0,-(sp)
   16f6a:	|  |   jsr db10 <drawHorizontalLine>
   16f70:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   16f74:	|  |   movea.l (sp),a0
   16f76:	|  |   move.l 8(a0),d0
   16f7a:	|  |   movea.l d0,a1
   16f7c:	|  |   movea.l (sp),a0
   16f7e:	|  |   move.l 12(a0),d0
   16f82:	|  |   move.l d0,d1
   16f84:	|  |   movea.l (sp),a0
   16f86:	|  |   move.l (a0),d0
   16f88:	|  |   move.l a1,-(sp)
   16f8a:	|  |   move.l d1,-(sp)
   16f8c:	|  |   move.l d0,-(sp)
   16f8e:	|  |   jsr db10 <drawHorizontalLine>
   16f94:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   16f98:	|  |   movea.l (sp),a0
   16f9a:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   16f9e:	'--|-> tst.l (sp)
   16fa0:	   '-- bne.w 16f06 <showBoxes+0xc>
	}
   16fa4:	       nop
   16fa6:	       nop
   16fa8:	       addq.l #4,sp
   16faa:	       rts

00016fac <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   16fac:	       lea -88(sp),sp
   16fb0:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   16fb2:	       move.l 1c7ba <SysBase>,d0
   16fb8:	       movea.l d0,a6
   16fba:	       jsr -666(a6)
   16fbe:	       move.l d0,88(sp)
   16fc2:	       move.l 88(sp),d0
   16fc6:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   16fca:	       move.l 84(sp),80(sp)
   16fd0:	       moveq #40,d0
   16fd2:	       move.l d0,76(sp)
   16fd6:	       move.l 1c7ba <SysBase>,d0
   16fdc:	       movea.l d0,a6
   16fde:	       movea.l 80(sp),a0
   16fe2:	       move.l 76(sp),d0
   16fe6:	       jsr -654(a6)
   16fea:	       move.l d0,72(sp)
   16fee:	       move.l 72(sp),d0
   16ff2:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   16ff6:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   16ffc:	       move.l #114316,60(sp)
   17004:	       clr.l 56(sp)
   17008:	       move.l 64(sp),52(sp)
   1700e:	       clr.l 48(sp)
   17012:	       move.l 1c7ba <SysBase>,d0
   17018:	       movea.l d0,a6
   1701a:	       movea.l 60(sp),a0
   1701e:	       move.l 56(sp),d0
   17022:	       movea.l 52(sp),a1
   17026:	       move.l 48(sp),d1
   1702a:	       jsr -444(a6)
   1702e:	       move.b d0,47(sp)
   17032:	       move.b 47(sp),d0
   17036:	   ,-- beq.s 1704c <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   17038:	   |   pea 1be99 <talk.c.490538ff+0x1347>
   1703e:	   |   jsr 183ec <KPrintF>
   17044:	   |   addq.l #4,sp
        return 0;
   17046:	   |   moveq #0,d0
   17048:	,--|-- bra.w 17106 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   1704c:	|  '-> movea.l 64(sp),a0
   17050:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   17056:	|      lea 92(sp),a0
   1705a:	|      lea -86(a0),a0
   1705e:	|      move.l a0,38(sp)
   17062:	|      movea.l 42(sp),a6
   17066:	|      movea.l 38(sp),a0
   1706a:	|      jsr -60(a6)
   1706e:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   17072:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   17078:	|      move.l #1103515245,-(sp)
   1707e:	|      move.l 34(sp),-(sp)
   17082:	|      jsr 18d78 <__mulsi3>
   17088:	|      addq.l #8,sp
   1708a:	|      addi.l #12345,d0
   17090:	|      move.l d0,d1
   17092:	|      bclr #31,d1
   17096:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   1709a:	|      move.l 30(sp),d0
   1709e:	|      pea 64 <_start+0x64>
   170a2:	|      move.l d0,-(sp)
   170a4:	|      jsr 18e52 <__umodsi3>
   170aa:	|      addq.l #8,sp
   170ac:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   170b0:	|      move.l 26(sp),-(sp)
   170b4:	|      pea 1beb6 <talk.c.490538ff+0x1364>
   170ba:	|      jsr 183ec <KPrintF>
   170c0:	|      addq.l #8,sp

    CloseDevice(ioreq);
   170c2:	|      move.l 64(sp),22(sp)
   170c8:	|      move.l 1c7ba <SysBase>,d0
   170ce:	|      movea.l d0,a6
   170d0:	|      movea.l 22(sp),a1
   170d4:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   170d8:	|      move.l 64(sp),18(sp)
   170de:	|      move.l 1c7ba <SysBase>,d0
   170e4:	|      movea.l d0,a6
   170e6:	|      movea.l 18(sp),a0
   170ea:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   170ee:	|      move.l 84(sp),14(sp)
   170f4:	|      move.l 1c7ba <SysBase>,d0
   170fa:	|      movea.l d0,a6
   170fc:	|      movea.l 14(sp),a0
   17100:	|      jsr -672(a6)
    return 0;
   17104:	|      moveq #0,d0
   17106:	'----> movea.l (sp)+,a6
   17108:	       lea 88(sp),sp
   1710c:	       rts

0001710e <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   1710e:	             lea -20(sp),sp
   17112:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   17114:	             move.l 1c8ce <allLoadedBanks>,20(sp)
	while (returnMe) {
   1711c:	      ,----- bra.s 1714e <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   1711e:	   ,--|----> movea.l 20(sp),a0
   17122:	   |  |      move.l (a0),d0
   17124:	   |  |      cmp.l 28(sp),d0
   17128:	   |  |  ,-- bne.s 17144 <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   1712a:	   |  |  |   movea.l 20(sp),a0
   1712e:	   |  |  |   move.l 4(a0),d0
   17132:	   |  |  |   addq.l #1,d0
   17134:	   |  |  |   movea.l 20(sp),a0
   17138:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   1713c:	   |  |  |   move.l 20(sp),d0
   17140:	,--|--|--|-- bra.w 171e2 <loadBankForAnim+0xd4>
		}		
		returnMe = returnMe->next;
   17144:	|  |  |  '-> movea.l 20(sp),a0
   17148:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   1714e:	|  |  '----> tst.l 20(sp)
   17152:	|  '-------- bne.s 1711e <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   17154:	|            moveq #26,d0
   17156:	|            move.l d0,16(sp)
   1715a:	|            clr.l 12(sp)
   1715e:	|            move.l 1c7ba <SysBase>,d0
   17164:	|            movea.l d0,a6
   17166:	|            move.l 16(sp),d0
   1716a:	|            move.l 12(sp),d1
   1716e:	|            jsr -684(a6)
   17172:	|            move.l d0,8(sp)
   17176:	|            move.l 8(sp),d0
   1717a:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   1717e:	|     ,----- beq.s 171e0 <loadBankForAnim+0xd2>
		returnMe->ID = ID;
   17180:	|     |      movea.l 20(sp),a0
   17184:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, (struct spriteBank *) &returnMe->bank)) {
   17188:	|     |      move.l 20(sp),d0
   1718c:	|     |      addq.l #8,d0
   1718e:	|     |      move.l d0,-(sp)
   17190:	|     |      move.l 32(sp),-(sp)
   17194:	|     |      jsr 936a <loadSpriteBank>
   1719a:	|     |      addq.l #8,sp
   1719c:	|     |      tst.w d0
   1719e:	|     |  ,-- beq.s 171c6 <loadBankForAnim+0xb8>
			returnMe->timesUsed = 1;
   171a0:	|     |  |   movea.l 20(sp),a0
   171a4:	|     |  |   moveq #1,d0
   171a6:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   171aa:	|     |  |   move.l 1c8ce <allLoadedBanks>,d0
   171b0:	|     |  |   movea.l 20(sp),a0
   171b4:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   171b8:	|     |  |   move.l 20(sp),1c8ce <allLoadedBanks>
			//KPrintF("loadBankForAnim: New sprite bank created OK\n");
			return returnMe;
   171c0:	|     |  |   move.l 20(sp),d0
   171c4:	+-----|--|-- bra.s 171e2 <loadBankForAnim+0xd4>
		} else {
			//KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
			FreeVec(returnMe);
   171c6:	|     |  '-> move.l 20(sp),4(sp)
   171cc:	|     |      move.l 1c7ba <SysBase>,d0
   171d2:	|     |      movea.l d0,a6
   171d4:	|     |      movea.l 4(sp),a1
   171d8:	|     |      jsr -690(a6)
			return NULL;
   171dc:	|     |      moveq #0,d0
   171de:	+-----|----- bra.s 171e2 <loadBankForAnim+0xd4>
		}
	} else return NULL;
   171e0:	|     '----> moveq #0,d0
}
   171e2:	'----------> movea.l (sp)+,a6
   171e4:	             lea 20(sp),sp
   171e8:	             rts

000171ea <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   171ea:	       lea -60(sp),sp
   171ee:	       move.l d3,-(sp)
   171f0:	       move.l d2,-(sp)
 	DOUBLE xDiff = x2 - x1;
   171f2:	       move.l 88(sp),d0
   171f6:	       sub.l 80(sp),d0
   171fa:	       move.l d0,-(sp)
   171fc:	       jsr 187de <__floatsidf>
   17202:	       addq.l #4,sp
   17204:	       move.l d0,32(sp)
   17208:	       move.l d1,36(sp)
   1720c:	       move.l 32(sp),60(sp)
   17212:	       move.l 36(sp),64(sp)
	int yDiff = y2 - y1;
   17218:	       move.l 92(sp),d0
   1721c:	       sub.l 84(sp),d0
   17220:	       move.l d0,56(sp)

	DOUBLE m = xDiff * (xP - x1) + yDiff * (yP - y1);
   17224:	       move.l 96(sp),d0
   17228:	       sub.l 80(sp),d0
   1722c:	       move.l d0,-(sp)
   1722e:	       jsr 187de <__floatsidf>
   17234:	       addq.l #4,sp
   17236:	       move.l 64(sp),-(sp)
   1723a:	       move.l 64(sp),-(sp)
   1723e:	       move.l d1,-(sp)
   17240:	       move.l d0,-(sp)
   17242:	       jsr 1886e <__muldf3>
   17248:	       lea 16(sp),sp
   1724c:	       move.l d0,d2
   1724e:	       move.l d1,d3
   17250:	       move.l 100(sp),d0
   17254:	       sub.l 84(sp),d0
   17258:	       move.l 56(sp),-(sp)
   1725c:	       move.l d0,-(sp)
   1725e:	       jsr 18d78 <__mulsi3>
   17264:	       addq.l #8,sp
   17266:	       move.l d0,-(sp)
   17268:	       jsr 187de <__floatsidf>
   1726e:	       addq.l #4,sp
   17270:	       move.l d1,-(sp)
   17272:	       move.l d0,-(sp)
   17274:	       move.l d3,-(sp)
   17276:	       move.l d2,-(sp)
   17278:	       jsr 18610 <__adddf3>
   1727e:	       lea 16(sp),sp
   17282:	       move.l d0,24(sp)
   17286:	       move.l d1,28(sp)
   1728a:	       move.l 24(sp),48(sp)
   17290:	       move.l 28(sp),52(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   17296:	       move.l 64(sp),-(sp)
   1729a:	       move.l 64(sp),-(sp)
   1729e:	       move.l 72(sp),-(sp)
   172a2:	       move.l 72(sp),-(sp)
   172a6:	       jsr 1886e <__muldf3>
   172ac:	       lea 16(sp),sp
   172b0:	       move.l d0,d2
   172b2:	       move.l d1,d3
   172b4:	       move.l 56(sp),-(sp)
   172b8:	       move.l 60(sp),-(sp)
   172bc:	       jsr 18d78 <__mulsi3>
   172c2:	       addq.l #8,sp
   172c4:	       move.l d0,-(sp)
   172c6:	       jsr 187de <__floatsidf>
   172cc:	       addq.l #4,sp
   172ce:	       move.l d1,-(sp)
   172d0:	       move.l d0,-(sp)
   172d2:	       move.l d3,-(sp)
   172d4:	       move.l d2,-(sp)
   172d6:	       jsr 18610 <__adddf3>
   172dc:	       lea 16(sp),sp
   172e0:	       move.l d1,-(sp)
   172e2:	       move.l d0,-(sp)
   172e4:	       move.l 60(sp),-(sp)
   172e8:	       move.l 60(sp),-(sp)
   172ec:	       jsr 18672 <__divdf3>
   172f2:	       lea 16(sp),sp
   172f6:	       move.l d0,16(sp)
   172fa:	       move.l d1,20(sp)
   172fe:	       move.l 16(sp),48(sp)
   17304:	       move.l 20(sp),52(sp)

	if (m < 0) {		
   1730a:	       clr.l -(sp)
   1730c:	       clr.l -(sp)
   1730e:	       move.l 60(sp),-(sp)
   17312:	       move.l 60(sp),-(sp)
   17316:	       jsr 189f6 <__ltdf2>
   1731c:	       lea 16(sp),sp
   17320:	       tst.l d0
   17322:	   ,-- bge.s 17338 <closestPointOnLine+0x14e>
		*closestX = x1;
   17324:	   |   movea.l 72(sp),a0
   17328:	   |   move.l 80(sp),(a0)
		*closestY = y1;
   1732c:	   |   movea.l 76(sp),a0
   17330:	   |   move.l 84(sp),(a0)
   17334:	,--|-- bra.w 17406 <closestPointOnLine+0x21c>
	} else if (m > 1) {
   17338:	|  '-> clr.l -(sp)
   1733a:	|      move.l #1072693248,-(sp)
   17340:	|      move.l 60(sp),-(sp)
   17344:	|      move.l 60(sp),-(sp)
   17348:	|      jsr 1893c <__gtdf2>
   1734e:	|      lea 16(sp),sp
   17352:	|      tst.l d0
   17354:	|  ,-- ble.s 1736a <closestPointOnLine+0x180>
		*closestX = x2;
   17356:	|  |   movea.l 72(sp),a0
   1735a:	|  |   move.l 88(sp),(a0)
		*closestY = y2;
   1735e:	|  |   movea.l 76(sp),a0
   17362:	|  |   move.l 92(sp),(a0)
   17366:	+--|-- bra.w 17406 <closestPointOnLine+0x21c>
	} else {
		DOUBLE tmp = m * xDiff; 
   1736a:	|  '-> move.l 64(sp),-(sp)
   1736e:	|      move.l 64(sp),-(sp)
   17372:	|      move.l 60(sp),-(sp)
   17376:	|      move.l 60(sp),-(sp)
   1737a:	|      jsr 1886e <__muldf3>
   17380:	|      lea 16(sp),sp
   17384:	|      move.l d0,8(sp)
   17388:	|      move.l d1,12(sp)
   1738c:	|      move.l 8(sp),40(sp)
   17392:	|      move.l 12(sp),44(sp)
		*closestX = (int) tmp;
   17398:	|      move.l 44(sp),-(sp)
   1739c:	|      move.l 44(sp),-(sp)
   173a0:	|      jsr 18780 <__fixdfsi>
   173a6:	|      addq.l #8,sp
   173a8:	|      movea.l 72(sp),a0
   173ac:	|      move.l d0,(a0)
		*closestX += x1;
   173ae:	|      movea.l 72(sp),a0
   173b2:	|      move.l (a0),d0
   173b4:	|      add.l 80(sp),d0
   173b8:	|      movea.l 72(sp),a0
   173bc:	|      move.l d0,(a0)
		*closestY = m * yDiff;
   173be:	|      move.l 56(sp),-(sp)
   173c2:	|      jsr 187de <__floatsidf>
   173c8:	|      addq.l #4,sp
   173ca:	|      move.l 52(sp),-(sp)
   173ce:	|      move.l 52(sp),-(sp)
   173d2:	|      move.l d1,-(sp)
   173d4:	|      move.l d0,-(sp)
   173d6:	|      jsr 1886e <__muldf3>
   173dc:	|      lea 16(sp),sp
   173e0:	|      move.l d1,-(sp)
   173e2:	|      move.l d0,-(sp)
   173e4:	|      jsr 18780 <__fixdfsi>
   173ea:	|      addq.l #8,sp
   173ec:	|      movea.l 76(sp),a0
   173f0:	|      move.l d0,(a0)
		*closestY += y1;
   173f2:	|      movea.l 76(sp),a0
   173f6:	|      move.l (a0),d0
   173f8:	|      add.l 84(sp),d0
   173fc:	|      movea.l 76(sp),a0
   17400:	|      move.l d0,(a0)
		return TRUE;
   17402:	|      moveq #1,d0
   17404:	|  ,-- bra.s 17408 <closestPointOnLine+0x21e>
	}
	return FALSE;
   17406:	'--|-> clr.w d0
}
   17408:	   '-> move.l (sp)+,d2
   1740a:	       move.l (sp)+,d3
   1740c:	       lea 60(sp),sp
   17410:	       rts

00017412 <drawFloor>:

void drawFloor() {
   17412:	                lea -12(sp),sp
   17416:	                move.l d3,-(sp)
   17418:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   1741a:	                clr.l 16(sp)
   1741e:	   ,----------- bra.w 17632 <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   17422:	,--|----------> movea.l 1c8d2 <currentFloor>,a0
   17428:	|  |            move.l 12(a0),d1
   1742c:	|  |            move.l 16(sp),d0
   17430:	|  |            lsl.l #3,d0
   17432:	|  |            movea.l d1,a0
   17434:	|  |            adda.l d0,a0
   17436:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   1743a:	|  |            moveq #1,d0
   1743c:	|  |            cmp.l 8(sp),d0
   17440:	|  |  ,-------- bge.w 1762e <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   17444:	|  |  |         moveq #1,d0
   17446:	|  |  |         move.l d0,12(sp)
   1744a:	|  |  |     ,-- bra.w 17544 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   1744e:	|  |  |  ,--|-> movea.l 1c8d2 <currentFloor>,a0
   17454:	|  |  |  |  |   move.l 4(a0),d1
   17458:	|  |  |  |  |   movea.l 1c8d2 <currentFloor>,a0
   1745e:	|  |  |  |  |   movea.l 12(a0),a0
   17462:	|  |  |  |  |   move.l 16(sp),d0
   17466:	|  |  |  |  |   lsl.l #3,d0
   17468:	|  |  |  |  |   adda.l d0,a0
   1746a:	|  |  |  |  |   movea.l 4(a0),a0
   1746e:	|  |  |  |  |   move.l 12(sp),d0
   17472:	|  |  |  |  |   add.l d0,d0
   17474:	|  |  |  |  |   add.l d0,d0
   17476:	|  |  |  |  |   adda.l d0,a0
   17478:	|  |  |  |  |   move.l (a0),d0
   1747a:	|  |  |  |  |   lsl.l #3,d0
   1747c:	|  |  |  |  |   movea.l d1,a0
   1747e:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   17480:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   17484:	|  |  |  |  |   movea.l 1c8d2 <currentFloor>,a0
   1748a:	|  |  |  |  |   move.l 4(a0),d1
   1748e:	|  |  |  |  |   movea.l 1c8d2 <currentFloor>,a0
   17494:	|  |  |  |  |   movea.l 12(a0),a0
   17498:	|  |  |  |  |   move.l 16(sp),d0
   1749c:	|  |  |  |  |   lsl.l #3,d0
   1749e:	|  |  |  |  |   adda.l d0,a0
   174a0:	|  |  |  |  |   movea.l 4(a0),a0
   174a4:	|  |  |  |  |   move.l 12(sp),d0
   174a8:	|  |  |  |  |   add.l d0,d0
   174aa:	|  |  |  |  |   add.l d0,d0
   174ac:	|  |  |  |  |   adda.l d0,a0
   174ae:	|  |  |  |  |   move.l (a0),d0
   174b0:	|  |  |  |  |   lsl.l #3,d0
   174b2:	|  |  |  |  |   movea.l d1,a0
   174b4:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   174b6:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   174b8:	|  |  |  |  |   movea.l 1c8d2 <currentFloor>,a0
   174be:	|  |  |  |  |   move.l 4(a0),d1
   174c2:	|  |  |  |  |   movea.l 1c8d2 <currentFloor>,a0
   174c8:	|  |  |  |  |   movea.l 12(a0),a0
   174cc:	|  |  |  |  |   move.l 16(sp),d0
   174d0:	|  |  |  |  |   lsl.l #3,d0
   174d2:	|  |  |  |  |   adda.l d0,a0
   174d4:	|  |  |  |  |   movea.l 4(a0),a0
   174d8:	|  |  |  |  |   move.l 12(sp),d0
   174dc:	|  |  |  |  |   addi.l #1073741823,d0
   174e2:	|  |  |  |  |   add.l d0,d0
   174e4:	|  |  |  |  |   add.l d0,d0
   174e6:	|  |  |  |  |   adda.l d0,a0
   174e8:	|  |  |  |  |   move.l (a0),d0
   174ea:	|  |  |  |  |   lsl.l #3,d0
   174ec:	|  |  |  |  |   movea.l d1,a0
   174ee:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   174f0:	|  |  |  |  |   move.l 4(a0),d1
   174f4:	|  |  |  |  |   movea.l 1c8d2 <currentFloor>,a0
   174fa:	|  |  |  |  |   move.l 4(a0),d3
   174fe:	|  |  |  |  |   movea.l 1c8d2 <currentFloor>,a0
   17504:	|  |  |  |  |   movea.l 12(a0),a0
   17508:	|  |  |  |  |   move.l 16(sp),d0
   1750c:	|  |  |  |  |   lsl.l #3,d0
   1750e:	|  |  |  |  |   adda.l d0,a0
   17510:	|  |  |  |  |   movea.l 4(a0),a0
   17514:	|  |  |  |  |   move.l 12(sp),d0
   17518:	|  |  |  |  |   addi.l #1073741823,d0
   1751e:	|  |  |  |  |   add.l d0,d0
   17520:	|  |  |  |  |   add.l d0,d0
   17522:	|  |  |  |  |   adda.l d0,a0
   17524:	|  |  |  |  |   move.l (a0),d0
   17526:	|  |  |  |  |   lsl.l #3,d0
   17528:	|  |  |  |  |   movea.l d3,a0
   1752a:	|  |  |  |  |   adda.l d0,a0
   1752c:	|  |  |  |  |   move.l (a0),d0
   1752e:	|  |  |  |  |   move.l d2,-(sp)
   17530:	|  |  |  |  |   move.l a1,-(sp)
   17532:	|  |  |  |  |   move.l d1,-(sp)
   17534:	|  |  |  |  |   move.l d0,-(sp)
   17536:	|  |  |  |  |   jsr 4c76 <drawLine>
   1753c:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   17540:	|  |  |  |  |   addq.l #1,12(sp)
   17544:	|  |  |  |  '-> move.l 12(sp),d0
   17548:	|  |  |  |      cmp.l 8(sp),d0
   1754c:	|  |  |  '----- blt.w 1744e <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   17550:	|  |  |         movea.l 1c8d2 <currentFloor>,a0
   17556:	|  |  |         move.l 4(a0),d1
   1755a:	|  |  |         movea.l 1c8d2 <currentFloor>,a0
   17560:	|  |  |         movea.l 12(a0),a0
   17564:	|  |  |         move.l 16(sp),d0
   17568:	|  |  |         lsl.l #3,d0
   1756a:	|  |  |         adda.l d0,a0
   1756c:	|  |  |         movea.l 4(a0),a0
   17570:	|  |  |         move.l 8(sp),d0
   17574:	|  |  |         addi.l #1073741823,d0
   1757a:	|  |  |         add.l d0,d0
   1757c:	|  |  |         add.l d0,d0
   1757e:	|  |  |         adda.l d0,a0
   17580:	|  |  |         move.l (a0),d0
   17582:	|  |  |         lsl.l #3,d0
   17584:	|  |  |         movea.l d1,a0
   17586:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   17588:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   1758c:	|  |  |         movea.l 1c8d2 <currentFloor>,a0
   17592:	|  |  |         move.l 4(a0),d1
   17596:	|  |  |         movea.l 1c8d2 <currentFloor>,a0
   1759c:	|  |  |         movea.l 12(a0),a0
   175a0:	|  |  |         move.l 16(sp),d0
   175a4:	|  |  |         lsl.l #3,d0
   175a6:	|  |  |         adda.l d0,a0
   175a8:	|  |  |         movea.l 4(a0),a0
   175ac:	|  |  |         move.l 8(sp),d0
   175b0:	|  |  |         addi.l #1073741823,d0
   175b6:	|  |  |         add.l d0,d0
   175b8:	|  |  |         add.l d0,d0
   175ba:	|  |  |         adda.l d0,a0
   175bc:	|  |  |         move.l (a0),d0
   175be:	|  |  |         lsl.l #3,d0
   175c0:	|  |  |         movea.l d1,a0
   175c2:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   175c4:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   175c6:	|  |  |         movea.l 1c8d2 <currentFloor>,a0
   175cc:	|  |  |         move.l 4(a0),d1
   175d0:	|  |  |         movea.l 1c8d2 <currentFloor>,a0
   175d6:	|  |  |         movea.l 12(a0),a0
   175da:	|  |  |         move.l 16(sp),d0
   175de:	|  |  |         lsl.l #3,d0
   175e0:	|  |  |         adda.l d0,a0
   175e2:	|  |  |         movea.l 4(a0),a0
   175e6:	|  |  |         move.l (a0),d0
   175e8:	|  |  |         lsl.l #3,d0
   175ea:	|  |  |         movea.l d1,a0
   175ec:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   175ee:	|  |  |         move.l 4(a0),d1
   175f2:	|  |  |         movea.l 1c8d2 <currentFloor>,a0
   175f8:	|  |  |         move.l 4(a0),d3
   175fc:	|  |  |         movea.l 1c8d2 <currentFloor>,a0
   17602:	|  |  |         movea.l 12(a0),a0
   17606:	|  |  |         move.l 16(sp),d0
   1760a:	|  |  |         lsl.l #3,d0
   1760c:	|  |  |         adda.l d0,a0
   1760e:	|  |  |         movea.l 4(a0),a0
   17612:	|  |  |         move.l (a0),d0
   17614:	|  |  |         lsl.l #3,d0
   17616:	|  |  |         movea.l d3,a0
   17618:	|  |  |         adda.l d0,a0
   1761a:	|  |  |         move.l (a0),d0
   1761c:	|  |  |         move.l d2,-(sp)
   1761e:	|  |  |         move.l a1,-(sp)
   17620:	|  |  |         move.l d1,-(sp)
   17622:	|  |  |         move.l d0,-(sp)
   17624:	|  |  |         jsr 4c76 <drawLine>
   1762a:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   1762e:	|  |  '-------> addq.l #1,16(sp)
   17632:	|  '----------> movea.l 1c8d2 <currentFloor>,a0
   17638:	|               move.l 8(a0),d0
   1763c:	|               cmp.l 16(sp),d0
   17640:	'-------------- bgt.w 17422 <drawFloor+0x10>
        }
    }
}
   17644:	                nop
   17646:	                nop
   17648:	                move.l (sp)+,d2
   1764a:	                move.l (sp)+,d3
   1764c:	                lea 12(sp),sp
   17650:	                rts

00017652 <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   17652:	                      lea -12(sp),sp
    int sharedVertices = 0;
   17656:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   1765a:	                      clr.l 4(sp)
   1765e:	   ,----------------- bra.w 176f0 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   17662:	,--|----------------> clr.l (sp)
   17664:	|  |     ,----------- bra.s 176e0 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   17666:	|  |  ,--|----------> movea.l 16(sp),a0
   1766a:	|  |  |  |            move.l 4(a0),d1
   1766e:	|  |  |  |            move.l 4(sp),d0
   17672:	|  |  |  |            add.l d0,d0
   17674:	|  |  |  |            add.l d0,d0
   17676:	|  |  |  |            movea.l d1,a0
   17678:	|  |  |  |            adda.l d0,a0
   1767a:	|  |  |  |            move.l (a0),d1
   1767c:	|  |  |  |            movea.l 20(sp),a0
   17680:	|  |  |  |            movea.l 4(a0),a0
   17684:	|  |  |  |            move.l (sp),d0
   17686:	|  |  |  |            add.l d0,d0
   17688:	|  |  |  |            add.l d0,d0
   1768a:	|  |  |  |            adda.l d0,a0
   1768c:	|  |  |  |            move.l (a0),d0
   1768e:	|  |  |  |            cmp.l d1,d0
   17690:	|  |  |  |  ,-------- bne.s 176de <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   17692:	|  |  |  |  |         move.l 8(sp),d0
   17696:	|  |  |  |  |         move.l d0,d1
   17698:	|  |  |  |  |         addq.l #1,d1
   1769a:	|  |  |  |  |         move.l d1,8(sp)
   1769e:	|  |  |  |  |         tst.l d0
   176a0:	|  |  |  |  |     ,-- beq.s 176c2 <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   176a2:	|  |  |  |  |     |   movea.l 16(sp),a0
   176a6:	|  |  |  |  |     |   move.l 4(a0),d1
   176aa:	|  |  |  |  |     |   move.l 4(sp),d0
   176ae:	|  |  |  |  |     |   add.l d0,d0
   176b0:	|  |  |  |  |     |   add.l d0,d0
   176b2:	|  |  |  |  |     |   movea.l d1,a0
   176b4:	|  |  |  |  |     |   adda.l d0,a0
   176b6:	|  |  |  |  |     |   move.l (a0),d0
   176b8:	|  |  |  |  |     |   movea.l 28(sp),a0
   176bc:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   176be:	|  |  |  |  |     |   moveq #1,d0
   176c0:	|  |  |  |  |  ,--|-- bra.s 17700 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   176c2:	|  |  |  |  |  |  '-> movea.l 16(sp),a0
   176c6:	|  |  |  |  |  |      move.l 4(a0),d1
   176ca:	|  |  |  |  |  |      move.l 4(sp),d0
   176ce:	|  |  |  |  |  |      add.l d0,d0
   176d0:	|  |  |  |  |  |      add.l d0,d0
   176d2:	|  |  |  |  |  |      movea.l d1,a0
   176d4:	|  |  |  |  |  |      adda.l d0,a0
   176d6:	|  |  |  |  |  |      move.l (a0),d0
   176d8:	|  |  |  |  |  |      movea.l 24(sp),a0
   176dc:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   176de:	|  |  |  |  '--|----> addq.l #1,(sp)
   176e0:	|  |  |  '-----|----> movea.l 20(sp),a0
   176e4:	|  |  |        |      move.l (a0),d0
   176e6:	|  |  |        |      cmp.l (sp),d0
   176e8:	|  |  '--------|----- bgt.w 17666 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   176ec:	|  |           |      addq.l #1,4(sp)
   176f0:	|  '-----------|----> movea.l 16(sp),a0
   176f4:	|              |      move.l (a0),d0
   176f6:	|              |      cmp.l 4(sp),d0
   176fa:	'--------------|----- bgt.w 17662 <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   176fe:	               |      clr.w d0
}
   17700:	               '----> lea 12(sp),sp
   17704:	                      rts

00017706 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   17706:	movea.l 1c8d2 <currentFloor>,a0
   1770c:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   17710:	movea.l 1c8d2 <currentFloor>,a0
   17716:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   1771a:	movea.l 1c8d2 <currentFloor>,a0
   17720:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   17724:	movea.l 1c8d2 <currentFloor>,a0
   1772a:	clr.l 16(a0)
}
   1772e:	nop
   17730:	rts

00017732 <inFloor>:

int inFloor (int x, int y) {
   17732:	          subq.l #8,sp
	KPrintF("inFloor started\n");
   17734:	          pea 1bec9 <talk.c.490538ff+0x1377>
   1773a:	          jsr 183ec <KPrintF>
   17740:	          addq.l #4,sp
	int i, r = -1;
   17742:	          moveq #-1,d0
   17744:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   17746:	          clr.l 4(sp)
   1774a:	   ,----- bra.s 1777e <inFloor+0x4c>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   1774c:	,--|----> movea.l 1c8d2 <currentFloor>,a0
   17752:	|  |      move.l 12(a0),d1
   17756:	|  |      move.l 4(sp),d0
   1775a:	|  |      lsl.l #3,d0
   1775c:	|  |      add.l d1,d0
   1775e:	|  |      move.l 16(sp),-(sp)
   17762:	|  |      move.l 16(sp),-(sp)
   17766:	|  |      move.l d0,-(sp)
   17768:	|  |      jsr 17958 <pointInFloorPolygon>
   1776e:	|  |      lea 12(sp),sp
   17772:	|  |      tst.w d0
   17774:	|  |  ,-- beq.s 1777a <inFloor+0x48>
			r = i;
   17776:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   1777a:	|  |  '-> addq.l #1,4(sp)
   1777e:	|  '----> movea.l 1c8d2 <currentFloor>,a0
   17784:	|         move.l 8(a0),d0
   17788:	|         cmp.l 4(sp),d0
   1778c:	'-------- bgt.s 1774c <inFloor+0x1a>

	KPrintF("infloor finished\n");
   1778e:	          pea 1beda <talk.c.490538ff+0x1388>
   17794:	          jsr 183ec <KPrintF>
   1779a:	          addq.l #4,sp
	return r;
   1779c:	          move.l (sp),d0
}
   1779e:	          addq.l #8,sp
   177a0:	          rts

000177a2 <initFloor>:

BOOL initFloor () {
   177a2:	       lea -12(sp),sp
   177a6:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   177a8:	       moveq #20,d0
   177aa:	       move.l d0,12(sp)
   177ae:	       clr.l 8(sp)
   177b2:	       move.l 1c7ba <SysBase>,d0
   177b8:	       movea.l d0,a6
   177ba:	       move.l 12(sp),d0
   177be:	       move.l 8(sp),d1
   177c2:	       jsr -684(a6)
   177c6:	       move.l d0,4(sp)
   177ca:	       move.l 4(sp),d0
   177ce:	       move.l d0,1c8d2 <currentFloor>

    if(currentFloor == 0) {
   177d4:	       move.l 1c8d2 <currentFloor>,d0
   177da:	,----- bne.s 177ee <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   177dc:	|      pea 1beec <talk.c.490538ff+0x139a>
   177e2:	|      jsr 183ec <KPrintF>
   177e8:	|      addq.l #4,sp
        return FALSE;
   177ea:	|      clr.w d0
   177ec:	|  ,-- bra.s 177f6 <initFloor+0x54>
    }

	noFloor ();
   177ee:	'--|-> jsr 17706 <noFloor>
	return TRUE;
   177f4:	   |   moveq #1,d0
}
   177f6:	   '-> movea.l (sp)+,a6
   177f8:	       lea 12(sp),sp
   177fc:	       rts

000177fe <killFloor>:

void killFloor () {
   177fe:	       lea -24(sp),sp
   17802:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   17804:	       clr.l 24(sp)
   17808:	   ,-- bra.s 17862 <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   1780a:	,--|-> movea.l 1c8d2 <currentFloor>,a0
   17810:	|  |   move.l 12(a0),d1
   17814:	|  |   move.l 24(sp),d0
   17818:	|  |   lsl.l #3,d0
   1781a:	|  |   movea.l d1,a0
   1781c:	|  |   adda.l d0,a0
   1781e:	|  |   move.l 4(a0),8(sp)
   17824:	|  |   move.l 1c7ba <SysBase>,d0
   1782a:	|  |   movea.l d0,a6
   1782c:	|  |   movea.l 8(sp),a1
   17830:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   17834:	|  |   movea.l 1c8d2 <currentFloor>,a0
   1783a:	|  |   move.l 16(a0),d1
   1783e:	|  |   move.l 24(sp),d0
   17842:	|  |   add.l d0,d0
   17844:	|  |   add.l d0,d0
   17846:	|  |   movea.l d1,a0
   17848:	|  |   adda.l d0,a0
   1784a:	|  |   move.l (a0),4(sp)
   1784e:	|  |   move.l 1c7ba <SysBase>,d0
   17854:	|  |   movea.l d0,a6
   17856:	|  |   movea.l 4(sp),a1
   1785a:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   1785e:	|  |   addq.l #1,24(sp)
   17862:	|  '-> movea.l 1c8d2 <currentFloor>,a0
   17868:	|      move.l 8(a0),d0
   1786c:	|      cmp.l 24(sp),d0
   17870:	'----- bgt.s 1780a <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   17872:	       movea.l 1c8d2 <currentFloor>,a0
   17878:	       move.l 12(a0),20(sp)
   1787e:	       move.l 1c7ba <SysBase>,d0
   17884:	       movea.l d0,a6
   17886:	       movea.l 20(sp),a1
   1788a:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   1788e:	       movea.l 1c8d2 <currentFloor>,a0
   17894:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   17898:	       movea.l 1c8d2 <currentFloor>,a0
   1789e:	       move.l 4(a0),16(sp)
   178a4:	       move.l 1c7ba <SysBase>,d0
   178aa:	       movea.l d0,a6
   178ac:	       movea.l 16(sp),a1
   178b0:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   178b4:	       movea.l 1c8d2 <currentFloor>,a0
   178ba:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   178be:	       movea.l 1c8d2 <currentFloor>,a0
   178c4:	       move.l 16(a0),12(sp)
   178ca:	       move.l 1c7ba <SysBase>,d0
   178d0:	       movea.l d0,a6
   178d2:	       movea.l 12(sp),a1
   178d6:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   178da:	       movea.l 1c8d2 <currentFloor>,a0
   178e0:	       clr.l 16(a0)
}
   178e4:	       nop
   178e6:	       movea.l (sp)+,a6
   178e8:	       lea 24(sp),sp
   178ec:	       rts

000178ee <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   178ee:	                   lea -12(sp),sp
	int sharedVertices = 0;
   178f2:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   178f6:	                   clr.l 4(sp)
   178fa:	   ,-------------- bra.s 17946 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   178fc:	,--|-------------> clr.l (sp)
   178fe:	|  |     ,-------- bra.s 1793a <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   17900:	|  |  ,--|-------> move.l 20(sp),d1
   17904:	|  |  |  |         move.l 4(sp),d0
   17908:	|  |  |  |         add.l d0,d0
   1790a:	|  |  |  |         add.l d0,d0
   1790c:	|  |  |  |         movea.l d1,a0
   1790e:	|  |  |  |         adda.l d0,a0
   17910:	|  |  |  |         move.l (a0),d1
   17912:	|  |  |  |         movea.l 28(sp),a0
   17916:	|  |  |  |         move.l (sp),d0
   17918:	|  |  |  |         add.l d0,d0
   1791a:	|  |  |  |         add.l d0,d0
   1791c:	|  |  |  |         adda.l d0,a0
   1791e:	|  |  |  |         move.l (a0),d0
   17920:	|  |  |  |         cmp.l d1,d0
   17922:	|  |  |  |     ,-- bne.s 17938 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   17924:	|  |  |  |     |   move.l 8(sp),d0
   17928:	|  |  |  |     |   move.l d0,d1
   1792a:	|  |  |  |     |   addq.l #1,d1
   1792c:	|  |  |  |     |   move.l d1,8(sp)
   17930:	|  |  |  |     |   tst.l d0
   17932:	|  |  |  |     +-- beq.s 17938 <polysShareSide+0x4a>
   17934:	|  |  |  |     |   moveq #1,d0
   17936:	|  |  |  |  ,--|-- bra.s 17952 <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   17938:	|  |  |  |  |  '-> addq.l #1,(sp)
   1793a:	|  |  |  '--|----> move.l 24(sp),d0
   1793e:	|  |  |     |      cmp.l (sp),d0
   17940:	|  |  '-----|----- bgt.s 17900 <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   17942:	|  |        |      addq.l #1,4(sp)
   17946:	|  '--------|----> move.l 16(sp),d0
   1794a:	|           |      cmp.l 4(sp),d0
   1794e:	'-----------|----- bgt.s 178fc <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   17950:	            |      clr.w d0
}
   17952:	            '----> lea 12(sp),sp
   17956:	                   rts

00017958 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   17958:	             lea -28(sp),sp
   1795c:	             move.l d3,-(sp)
   1795e:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   17960:	             clr.l 32(sp)
   17964:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   17968:	             movea.l 40(sp),a0
   1796c:	             move.l (a0),d0
   1796e:	             move.l d0,d1
   17970:	             subq.l #1,d1
   17972:	             move.l d1,28(sp)
   17976:	   ,-------- bra.w 17b70 <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   1797a:	,--|-------> movea.l 1c8d2 <currentFloor>,a0
   17980:	|  |         move.l 4(a0),d1
   17984:	|  |         movea.l 40(sp),a0
   17988:	|  |         movea.l 4(a0),a0
   1798c:	|  |         move.l 32(sp),d0
   17990:	|  |         add.l d0,d0
   17992:	|  |         add.l d0,d0
   17994:	|  |         adda.l d0,a0
   17996:	|  |         move.l (a0),d0
   17998:	|  |         lsl.l #3,d0
   1799a:	|  |         movea.l d1,a0
   1799c:	|  |         adda.l d0,a0
   1799e:	|  |         move.l (a0),d0
   179a0:	|  |         move.l d0,-(sp)
   179a2:	|  |         jsr 1881e <__floatsisf>
   179a8:	|  |         addq.l #4,sp
   179aa:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   179ae:	|  |         movea.l 1c8d2 <currentFloor>,a0
   179b4:	|  |         move.l 4(a0),d1
   179b8:	|  |         movea.l 40(sp),a0
   179bc:	|  |         movea.l 4(a0),a0
   179c0:	|  |         move.l 32(sp),d0
   179c4:	|  |         add.l d0,d0
   179c6:	|  |         add.l d0,d0
   179c8:	|  |         adda.l d0,a0
   179ca:	|  |         move.l (a0),d0
   179cc:	|  |         lsl.l #3,d0
   179ce:	|  |         movea.l d1,a0
   179d0:	|  |         adda.l d0,a0
   179d2:	|  |         move.l 4(a0),d0
   179d6:	|  |         move.l d0,-(sp)
   179d8:	|  |         jsr 1881e <__floatsisf>
   179de:	|  |         addq.l #4,sp
   179e0:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   179e4:	|  |         movea.l 1c8d2 <currentFloor>,a0
   179ea:	|  |         move.l 4(a0),d1
   179ee:	|  |         movea.l 40(sp),a0
   179f2:	|  |         movea.l 4(a0),a0
   179f6:	|  |         move.l 28(sp),d0
   179fa:	|  |         add.l d0,d0
   179fc:	|  |         add.l d0,d0
   179fe:	|  |         adda.l d0,a0
   17a00:	|  |         move.l (a0),d0
   17a02:	|  |         lsl.l #3,d0
   17a04:	|  |         movea.l d1,a0
   17a06:	|  |         adda.l d0,a0
   17a08:	|  |         move.l (a0),d0
   17a0a:	|  |         move.l d0,-(sp)
   17a0c:	|  |         jsr 1881e <__floatsisf>
   17a12:	|  |         addq.l #4,sp
   17a14:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   17a18:	|  |         movea.l 1c8d2 <currentFloor>,a0
   17a1e:	|  |         move.l 4(a0),d1
   17a22:	|  |         movea.l 40(sp),a0
   17a26:	|  |         movea.l 4(a0),a0
   17a2a:	|  |         move.l 28(sp),d0
   17a2e:	|  |         add.l d0,d0
   17a30:	|  |         add.l d0,d0
   17a32:	|  |         adda.l d0,a0
   17a34:	|  |         move.l (a0),d0
   17a36:	|  |         lsl.l #3,d0
   17a38:	|  |         movea.l d1,a0
   17a3a:	|  |         adda.l d0,a0
   17a3c:	|  |         move.l 4(a0),d0
   17a40:	|  |         move.l d0,-(sp)
   17a42:	|  |         jsr 1881e <__floatsisf>
   17a48:	|  |         addq.l #4,sp
   17a4a:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   17a4e:	|  |         move.l 48(sp),-(sp)
   17a52:	|  |         jsr 1881e <__floatsisf>
   17a58:	|  |         addq.l #4,sp
   17a5a:	|  |         move.l d0,-(sp)
   17a5c:	|  |         move.l 20(sp),-(sp)
   17a60:	|  |         jsr 189c0 <__lesf2>
   17a66:	|  |         addq.l #8,sp
   17a68:	|  |         tst.l d0
   17a6a:	|  |     ,-- bgt.s 17a8a <pointInFloorPolygon+0x132>
   17a6c:	|  |     |   move.l 48(sp),-(sp)
   17a70:	|  |     |   jsr 1881e <__floatsisf>
   17a76:	|  |     |   addq.l #4,sp
   17a78:	|  |     |   move.l d0,-(sp)
   17a7a:	|  |     |   move.l 12(sp),-(sp)
   17a7e:	|  |     |   jsr 1898a <__gtsf2>
   17a84:	|  |     |   addq.l #8,sp
   17a86:	|  |     |   tst.l d0
   17a88:	|  |  ,--|-- bgt.s 17aca <pointInFloorPolygon+0x172>
   17a8a:	|  |  |  '-> move.l 48(sp),-(sp)
   17a8e:	|  |  |      jsr 1881e <__floatsisf>
   17a94:	|  |  |      addq.l #4,sp
   17a96:	|  |  |      move.l d0,-(sp)
   17a98:	|  |  |      move.l 12(sp),-(sp)
   17a9c:	|  |  |      jsr 189c0 <__lesf2>
   17aa2:	|  |  |      addq.l #8,sp
   17aa4:	|  |  |      tst.l d0
   17aa6:	|  |  |  ,-- bgt.w 17b60 <pointInFloorPolygon+0x208>
   17aaa:	|  |  |  |   move.l 48(sp),-(sp)
   17aae:	|  |  |  |   jsr 1881e <__floatsisf>
   17ab4:	|  |  |  |   addq.l #4,sp
   17ab6:	|  |  |  |   move.l d0,-(sp)
   17ab8:	|  |  |  |   move.l 20(sp),-(sp)
   17abc:	|  |  |  |   jsr 1898a <__gtsf2>
   17ac2:	|  |  |  |   addq.l #8,sp
   17ac4:	|  |  |  |   tst.l d0
   17ac6:	|  |  |  +-- ble.w 17b60 <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   17aca:	|  |  '--|-> move.l 44(sp),-(sp)
   17ace:	|  |     |   jsr 1881e <__floatsisf>
   17ad4:	|  |     |   addq.l #4,sp
   17ad6:	|  |     |   move.l d0,d3
   17ad8:	|  |     |   move.l 20(sp),-(sp)
   17adc:	|  |     |   move.l 16(sp),-(sp)
   17ae0:	|  |     |   jsr 18b12 <__subsf3>
   17ae6:	|  |     |   addq.l #8,sp
   17ae8:	|  |     |   move.l d0,d2
   17aea:	|  |     |   move.l 48(sp),-(sp)
   17aee:	|  |     |   jsr 1881e <__floatsisf>
   17af4:	|  |     |   addq.l #4,sp
   17af6:	|  |     |   move.l 16(sp),-(sp)
   17afa:	|  |     |   move.l d0,-(sp)
   17afc:	|  |     |   jsr 18b12 <__subsf3>
   17b02:	|  |     |   addq.l #8,sp
   17b04:	|  |     |   move.l d0,-(sp)
   17b06:	|  |     |   move.l d2,-(sp)
   17b08:	|  |     |   jsr 188d0 <__mulsf3>
   17b0e:	|  |     |   addq.l #8,sp
   17b10:	|  |     |   move.l d0,d2
   17b12:	|  |     |   move.l 16(sp),-(sp)
   17b16:	|  |     |   move.l 12(sp),-(sp)
   17b1a:	|  |     |   jsr 18b12 <__subsf3>
   17b20:	|  |     |   addq.l #8,sp
   17b22:	|  |     |   move.l d0,-(sp)
   17b24:	|  |     |   move.l d2,-(sp)
   17b26:	|  |     |   jsr 186d4 <__divsf3>
   17b2c:	|  |     |   addq.l #8,sp
   17b2e:	|  |     |   move.l 20(sp),-(sp)
   17b32:	|  |     |   move.l d0,-(sp)
   17b34:	|  |     |   jsr 185da <__addsf3>
   17b3a:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   17b3c:	|  |     |   move.l d0,-(sp)
   17b3e:	|  |     |   move.l d3,-(sp)
   17b40:	|  |     |   jsr 18a44 <__ltsf2>
   17b46:	|  |     |   addq.l #8,sp
   17b48:	|  |     |   tst.l d0
   17b4a:	|  |     +-- bge.s 17b60 <pointInFloorPolygon+0x208>

			c = !c;
   17b4c:	|  |     |   tst.l 24(sp)
   17b50:	|  |     |   seq d0
   17b52:	|  |     |   neg.b d0
   17b54:	|  |     |   move.b d0,d0
   17b56:	|  |     |   andi.l #255,d0
   17b5c:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   17b60:	|  |     '-> move.l 32(sp),d0
   17b64:	|  |         move.l d0,d1
   17b66:	|  |         addq.l #1,d1
   17b68:	|  |         move.l d1,32(sp)
   17b6c:	|  |         move.l d0,28(sp)
   17b70:	|  '-------> movea.l 40(sp),a0
   17b74:	|            move.l (a0),d0
   17b76:	|            cmp.l 32(sp),d0
   17b7a:	'----------- bgt.w 1797a <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   17b7e:	             tst.l 24(sp)
   17b82:	             sne d0
   17b84:	             neg.b d0
   17b86:	             move.b d0,d0
   17b88:	             andi.w #255,d0
}
   17b8c:	             move.l (sp)+,d2
   17b8e:	             move.l (sp)+,d3
   17b90:	             lea 28(sp),sp
   17b94:	             rts

00017b96 <setFloor>:

BOOL setFloor (int fileNum) {
   17b96:	                               lea -132(sp),sp
   17b9a:	                               move.l a6,-(sp)
   17b9c:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   17b9e:	                               jsr 177fe <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   17ba4:	                               move.l 144(sp),-(sp)
   17ba8:	                               jsr 7ed6 <openFileFromNum>
   17bae:	                               addq.l #4,sp
   17bb0:	                               tst.l d0
   17bb2:	                           ,-- bne.s 17bba <setFloor+0x24>
   17bb4:	                           |   clr.w d0
   17bb6:	,--------------------------|-- bra.w 18306 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   17bba:	|                          '-> movea.l 1c8d2 <currentFloor>,a0
   17bc0:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   17bc4:	|                              move.l 1c7a2 <bigDataFile>,118(sp)
   17bcc:	|                              move.l 1c7c2 <DOSBase>,d0
   17bd2:	|                              movea.l d0,a6
   17bd4:	|                              move.l 118(sp),d1
   17bd8:	|                              jsr -306(a6)
   17bdc:	|                              move.l d0,114(sp)
   17be0:	|                              move.l 114(sp),d0
   17be4:	|                              movea.l 1c8d2 <currentFloor>,a0
   17bea:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   17bee:	|                              movea.l 1c8d2 <currentFloor>,a0
   17bf4:	|                              move.l 8(a0),d0
   17bf8:	|                              lsl.l #3,d0
   17bfa:	|                              move.l d0,110(sp)
   17bfe:	|                              clr.l 106(sp)
   17c02:	|                              move.l 1c7ba <SysBase>,d0
   17c08:	|                              movea.l d0,a6
   17c0a:	|                              move.l 110(sp),d0
   17c0e:	|                              move.l 106(sp),d1
   17c12:	|                              jsr -684(a6)
   17c16:	|                              move.l d0,102(sp)
   17c1a:	|                              move.l 102(sp),d0
   17c1e:	|                              movea.l 1c8d2 <currentFloor>,a0
   17c24:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   17c28:	|                              movea.l 1c8d2 <currentFloor>,a0
   17c2e:	|                              move.l 12(a0),d0
   17c32:	|                          ,-- bne.s 17c48 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   17c34:	|                          |   pea 1bf10 <talk.c.490538ff+0x13be>
   17c3a:	|                          |   jsr 183ec <KPrintF>
   17c40:	|                          |   addq.l #4,sp
		return FALSE;
   17c42:	|                          |   clr.w d0
   17c44:	+--------------------------|-- bra.w 18306 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17c48:	|                          '-> clr.l 136(sp)
   17c4c:	|                    ,-------- bra.w 17d64 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   17c50:	|                 ,--|-------> move.l 1c7a2 <bigDataFile>,26(sp)
   17c58:	|                 |  |         move.l 1c7c2 <DOSBase>,d0
   17c5e:	|                 |  |         movea.l d0,a6
   17c60:	|                 |  |         move.l 26(sp),d1
   17c64:	|                 |  |         jsr -306(a6)
   17c68:	|                 |  |         move.l d0,22(sp)
   17c6c:	|                 |  |         move.l 22(sp),d1
   17c70:	|                 |  |         movea.l 1c8d2 <currentFloor>,a0
   17c76:	|                 |  |         movea.l 12(a0),a0
   17c7a:	|                 |  |         move.l 136(sp),d0
   17c7e:	|                 |  |         lsl.l #3,d0
   17c80:	|                 |  |         adda.l d0,a0
   17c82:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   17c84:	|                 |  |         movea.l 1c8d2 <currentFloor>,a0
   17c8a:	|                 |  |         move.l 12(a0),d1
   17c8e:	|                 |  |         move.l 136(sp),d0
   17c92:	|                 |  |         lsl.l #3,d0
   17c94:	|                 |  |         movea.l d1,a0
   17c96:	|                 |  |         adda.l d0,a0
   17c98:	|                 |  |         move.l (a0),d0
   17c9a:	|                 |  |         add.l d0,d0
   17c9c:	|                 |  |         add.l d0,d0
   17c9e:	|                 |  |         move.l d0,18(sp)
   17ca2:	|                 |  |         clr.l 14(sp)
   17ca6:	|                 |  |         move.l 1c7ba <SysBase>,d0
   17cac:	|                 |  |         movea.l d0,a6
   17cae:	|                 |  |         move.l 18(sp),d0
   17cb2:	|                 |  |         move.l 14(sp),d1
   17cb6:	|                 |  |         jsr -684(a6)
   17cba:	|                 |  |         move.l d0,10(sp)
   17cbe:	|                 |  |         move.l 10(sp),d1
   17cc2:	|                 |  |         movea.l 1c8d2 <currentFloor>,a0
   17cc8:	|                 |  |         movea.l 12(a0),a0
   17ccc:	|                 |  |         move.l 136(sp),d0
   17cd0:	|                 |  |         lsl.l #3,d0
   17cd2:	|                 |  |         adda.l d0,a0
   17cd4:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   17cd8:	|                 |  |         movea.l 1c8d2 <currentFloor>,a0
   17cde:	|                 |  |         move.l 12(a0),d1
   17ce2:	|                 |  |         move.l 136(sp),d0
   17ce6:	|                 |  |         lsl.l #3,d0
   17ce8:	|                 |  |         movea.l d1,a0
   17cea:	|                 |  |         adda.l d0,a0
   17cec:	|                 |  |         move.l 4(a0),d0
   17cf0:	|                 |  |     ,-- bne.s 17d06 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   17cf2:	|                 |  |     |   pea 1bf10 <talk.c.490538ff+0x13be>
   17cf8:	|                 |  |     |   jsr 183ec <KPrintF>
   17cfe:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   17d00:	|                 |  |     |   clr.w d0
   17d02:	+-----------------|--|-----|-- bra.w 18306 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   17d06:	|                 |  |     '-> clr.l 132(sp)
   17d0a:	|                 |  |     ,-- bra.s 17d44 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   17d0c:	|                 |  |  ,--|-> move.l 1c7a2 <bigDataFile>,d1
   17d12:	|                 |  |  |  |   movea.l 1c8d2 <currentFloor>,a0
   17d18:	|                 |  |  |  |   movea.l 12(a0),a0
   17d1c:	|                 |  |  |  |   move.l 136(sp),d0
   17d20:	|                 |  |  |  |   lsl.l #3,d0
   17d22:	|                 |  |  |  |   adda.l d0,a0
   17d24:	|                 |  |  |  |   movea.l 4(a0),a0
   17d28:	|                 |  |  |  |   move.l 132(sp),d0
   17d2c:	|                 |  |  |  |   add.l d0,d0
   17d2e:	|                 |  |  |  |   add.l d0,d0
   17d30:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   17d34:	|                 |  |  |  |   move.l d1,-(sp)
   17d36:	|                 |  |  |  |   jsr 6bc <get2bytes>
   17d3c:	|                 |  |  |  |   addq.l #4,sp
   17d3e:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   17d40:	|                 |  |  |  |   addq.l #1,132(sp)
   17d44:	|                 |  |  |  '-> movea.l 1c8d2 <currentFloor>,a0
   17d4a:	|                 |  |  |      move.l 12(a0),d1
   17d4e:	|                 |  |  |      move.l 136(sp),d0
   17d52:	|                 |  |  |      lsl.l #3,d0
   17d54:	|                 |  |  |      movea.l d1,a0
   17d56:	|                 |  |  |      adda.l d0,a0
   17d58:	|                 |  |  |      move.l (a0),d0
   17d5a:	|                 |  |  |      cmp.l 132(sp),d0
   17d5e:	|                 |  |  '----- bgt.s 17d0c <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17d60:	|                 |  |         addq.l #1,136(sp)
   17d64:	|                 |  '-------> movea.l 1c8d2 <currentFloor>,a0
   17d6a:	|                 |            move.l 8(a0),d0
   17d6e:	|                 |            cmp.l 136(sp),d0
   17d72:	|                 '----------- bgt.w 17c50 <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   17d76:	|                              move.l 1c7a2 <bigDataFile>,d0
   17d7c:	|                              move.l d0,-(sp)
   17d7e:	|                              jsr 6bc <get2bytes>
   17d84:	|                              addq.l #4,sp
   17d86:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   17d8a:	|                              move.l 136(sp),d0
   17d8e:	|                              lsl.l #3,d0
   17d90:	|                              move.l d0,98(sp)
   17d94:	|                              clr.l 94(sp)
   17d98:	|                              move.l 1c7ba <SysBase>,d0
   17d9e:	|                              movea.l d0,a6
   17da0:	|                              move.l 98(sp),d0
   17da4:	|                              move.l 94(sp),d1
   17da8:	|                              jsr -684(a6)
   17dac:	|                              move.l d0,90(sp)
   17db0:	|                              move.l 90(sp),d0
   17db4:	|                              movea.l 1c8d2 <currentFloor>,a0
   17dba:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   17dbe:	|                              movea.l 1c8d2 <currentFloor>,a0
   17dc4:	|                              move.l 4(a0),d0
   17dc8:	|                          ,-- bne.s 17dde <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   17dca:	|                          |   pea 1bf10 <talk.c.490538ff+0x13be>
   17dd0:	|                          |   jsr 183ec <KPrintF>
   17dd6:	|                          |   addq.l #4,sp
		return FALSE;
   17dd8:	|                          |   clr.w d0
   17dda:	+--------------------------|-- bra.w 18306 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   17dde:	|                          '-> clr.l 132(sp)
   17de2:	|                          ,-- bra.s 17e36 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   17de4:	|                       ,--|-> move.l 1c7a2 <bigDataFile>,d1
   17dea:	|                       |  |   movea.l 1c8d2 <currentFloor>,a0
   17df0:	|                       |  |   movea.l 4(a0),a0
   17df4:	|                       |  |   move.l 132(sp),d0
   17df8:	|                       |  |   lsl.l #3,d0
   17dfa:	|                       |  |   lea (0,a0,d0.l),a2
   17dfe:	|                       |  |   move.l d1,-(sp)
   17e00:	|                       |  |   jsr 6bc <get2bytes>
   17e06:	|                       |  |   addq.l #4,sp
   17e08:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   17e0a:	|                       |  |   move.l 1c7a2 <bigDataFile>,d1
   17e10:	|                       |  |   movea.l 1c8d2 <currentFloor>,a0
   17e16:	|                       |  |   movea.l 4(a0),a0
   17e1a:	|                       |  |   move.l 132(sp),d0
   17e1e:	|                       |  |   lsl.l #3,d0
   17e20:	|                       |  |   lea (0,a0,d0.l),a2
   17e24:	|                       |  |   move.l d1,-(sp)
   17e26:	|                       |  |   jsr 6bc <get2bytes>
   17e2c:	|                       |  |   addq.l #4,sp
   17e2e:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   17e32:	|                       |  |   addq.l #1,132(sp)
   17e36:	|                       |  '-> move.l 132(sp),d0
   17e3a:	|                       |      cmp.l 136(sp),d0
   17e3e:	|                       '----- blt.s 17de4 <setFloor+0x24e>
	}

	finishAccess ();
   17e40:	|                              jsr 7dce <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   17e46:	|                              movea.l 1c8d2 <currentFloor>,a0
   17e4c:	|                              move.l 8(a0),d0
   17e50:	|                              add.l d0,d0
   17e52:	|                              add.l d0,d0
   17e54:	|                              move.l d0,86(sp)
   17e58:	|                              clr.l 82(sp)
   17e5c:	|                              move.l 1c7ba <SysBase>,d0
   17e62:	|                              movea.l d0,a6
   17e64:	|                              move.l 86(sp),d0
   17e68:	|                              move.l 82(sp),d1
   17e6c:	|                              jsr -684(a6)
   17e70:	|                              move.l d0,78(sp)
   17e74:	|                              move.l 78(sp),d0
   17e78:	|                              movea.l 1c8d2 <currentFloor>,a0
   17e7e:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   17e82:	|                              movea.l 1c8d2 <currentFloor>,a0
   17e88:	|                              move.l 8(a0),d0
   17e8c:	|                              add.l d0,d0
   17e8e:	|                              add.l d0,d0
   17e90:	|                              move.l d0,74(sp)
   17e94:	|                              clr.l 70(sp)
   17e98:	|                              move.l 1c7ba <SysBase>,d0
   17e9e:	|                              movea.l d0,a6
   17ea0:	|                              move.l 74(sp),d0
   17ea4:	|                              move.l 70(sp),d1
   17ea8:	|                              jsr -684(a6)
   17eac:	|                              move.l d0,66(sp)
   17eb0:	|                              move.l 66(sp),d0
   17eb4:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   17eb8:	|                              movea.l 1c8d2 <currentFloor>,a0
   17ebe:	|                              move.l 16(a0),d0
   17ec2:	|                          ,-- bne.s 17ed8 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   17ec4:	|                          |   pea 1bf10 <talk.c.490538ff+0x13be>
   17eca:	|                          |   jsr 183ec <KPrintF>
   17ed0:	|                          |   addq.l #4,sp
		return FALSE;
   17ed2:	|                          |   clr.w d0
   17ed4:	+--------------------------|-- bra.w 18306 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17ed8:	|                          '-> clr.l 136(sp)
   17edc:	|                    ,-------- bra.w 18000 <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   17ee0:	|                 ,--|-------> movea.l 1c8d2 <currentFloor>,a0
   17ee6:	|                 |  |         move.l 8(a0),d0
   17eea:	|                 |  |         add.l d0,d0
   17eec:	|                 |  |         add.l d0,d0
   17eee:	|                 |  |         move.l d0,50(sp)
   17ef2:	|                 |  |         clr.l 46(sp)
   17ef6:	|                 |  |         move.l 1c7ba <SysBase>,d0
   17efc:	|                 |  |         movea.l d0,a6
   17efe:	|                 |  |         move.l 50(sp),d0
   17f02:	|                 |  |         move.l 46(sp),d1
   17f06:	|                 |  |         jsr -684(a6)
   17f0a:	|                 |  |         move.l d0,42(sp)
   17f0e:	|                 |  |         move.l 42(sp),d0
   17f12:	|                 |  |         movea.l 1c8d2 <currentFloor>,a0
   17f18:	|                 |  |         movea.l 16(a0),a0
   17f1c:	|                 |  |         move.l 136(sp),d1
   17f20:	|                 |  |         add.l d1,d1
   17f22:	|                 |  |         add.l d1,d1
   17f24:	|                 |  |         adda.l d1,a0
   17f26:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   17f28:	|                 |  |         movea.l 1c8d2 <currentFloor>,a0
   17f2e:	|                 |  |         move.l 8(a0),d0
   17f32:	|                 |  |         add.l d0,d0
   17f34:	|                 |  |         add.l d0,d0
   17f36:	|                 |  |         move.l d0,38(sp)
   17f3a:	|                 |  |         clr.l 34(sp)
   17f3e:	|                 |  |         move.l 1c7ba <SysBase>,d0
   17f44:	|                 |  |         movea.l d0,a6
   17f46:	|                 |  |         move.l 38(sp),d0
   17f4a:	|                 |  |         move.l 34(sp),d1
   17f4e:	|                 |  |         jsr -684(a6)
   17f52:	|                 |  |         move.l d0,30(sp)
   17f56:	|                 |  |         move.l 30(sp),d1
   17f5a:	|                 |  |         move.l 136(sp),d0
   17f5e:	|                 |  |         add.l d0,d0
   17f60:	|                 |  |         add.l d0,d0
   17f62:	|                 |  |         movea.l 62(sp),a0
   17f66:	|                 |  |         adda.l d0,a0
   17f68:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   17f6a:	|                 |  |         movea.l 1c8d2 <currentFloor>,a0
   17f70:	|                 |  |         move.l 16(a0),d1
   17f74:	|                 |  |         move.l 136(sp),d0
   17f78:	|                 |  |         add.l d0,d0
   17f7a:	|                 |  |         add.l d0,d0
   17f7c:	|                 |  |         movea.l d1,a0
   17f7e:	|                 |  |         adda.l d0,a0
   17f80:	|                 |  |         move.l (a0),d0
   17f82:	|                 |  |     ,-- bne.s 17f98 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   17f84:	|                 |  |     |   pea 1bf10 <talk.c.490538ff+0x13be>
   17f8a:	|                 |  |     |   jsr 183ec <KPrintF>
   17f90:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   17f92:	|                 |  |     |   clr.w d0
   17f94:	+-----------------|--|-----|-- bra.w 18306 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   17f98:	|                 |  |     '-> clr.l 132(sp)
   17f9c:	|                 |  |     ,-- bra.s 17fec <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   17f9e:	|                 |  |  ,--|-> movea.l 1c8d2 <currentFloor>,a0
   17fa4:	|                 |  |  |  |   move.l 16(a0),d1
   17fa8:	|                 |  |  |  |   move.l 136(sp),d0
   17fac:	|                 |  |  |  |   add.l d0,d0
   17fae:	|                 |  |  |  |   add.l d0,d0
   17fb0:	|                 |  |  |  |   movea.l d1,a0
   17fb2:	|                 |  |  |  |   adda.l d0,a0
   17fb4:	|                 |  |  |  |   move.l (a0),d1
   17fb6:	|                 |  |  |  |   move.l 132(sp),d0
   17fba:	|                 |  |  |  |   add.l d0,d0
   17fbc:	|                 |  |  |  |   add.l d0,d0
   17fbe:	|                 |  |  |  |   movea.l d1,a0
   17fc0:	|                 |  |  |  |   adda.l d0,a0
   17fc2:	|                 |  |  |  |   moveq #-1,d1
   17fc4:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   17fc6:	|                 |  |  |  |   move.l 136(sp),d0
   17fca:	|                 |  |  |  |   add.l d0,d0
   17fcc:	|                 |  |  |  |   add.l d0,d0
   17fce:	|                 |  |  |  |   movea.l 62(sp),a0
   17fd2:	|                 |  |  |  |   adda.l d0,a0
   17fd4:	|                 |  |  |  |   move.l (a0),d1
   17fd6:	|                 |  |  |  |   move.l 132(sp),d0
   17fda:	|                 |  |  |  |   add.l d0,d0
   17fdc:	|                 |  |  |  |   add.l d0,d0
   17fde:	|                 |  |  |  |   movea.l d1,a0
   17fe0:	|                 |  |  |  |   adda.l d0,a0
   17fe2:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   17fe8:	|                 |  |  |  |   addq.l #1,132(sp)
   17fec:	|                 |  |  |  '-> movea.l 1c8d2 <currentFloor>,a0
   17ff2:	|                 |  |  |      move.l 8(a0),d0
   17ff6:	|                 |  |  |      cmp.l 132(sp),d0
   17ffa:	|                 |  |  '----- bgt.s 17f9e <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17ffc:	|                 |  |         addq.l #1,136(sp)
   18000:	|                 |  '-------> movea.l 1c8d2 <currentFloor>,a0
   18006:	|                 |            move.l 8(a0),d0
   1800a:	|                 |            cmp.l 136(sp),d0
   1800e:	|                 '----------- bgt.w 17ee0 <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   18012:	|                              clr.l 136(sp)
   18016:	|              ,-------------- bra.w 1811c <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1801a:	|           ,--|-------------> clr.l 132(sp)
   1801e:	|           |  |     ,-------- bra.w 18106 <setFloor+0x570>
			if (i != j) {
   18022:	|           |  |  ,--|-------> move.l 136(sp),d0
   18026:	|           |  |  |  |         cmp.l 132(sp),d0
   1802a:	|           |  |  |  |     ,-- beq.w 180bc <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   1802e:	|           |  |  |  |     |   movea.l 1c8d2 <currentFloor>,a0
   18034:	|           |  |  |  |     |   move.l 12(a0),d1
   18038:	|           |  |  |  |     |   move.l 132(sp),d0
   1803c:	|           |  |  |  |     |   lsl.l #3,d0
   1803e:	|           |  |  |  |     |   movea.l d1,a1
   18040:	|           |  |  |  |     |   adda.l d0,a1
   18042:	|           |  |  |  |     |   movea.l 1c8d2 <currentFloor>,a0
   18048:	|           |  |  |  |     |   move.l 12(a0),d1
   1804c:	|           |  |  |  |     |   move.l 136(sp),d0
   18050:	|           |  |  |  |     |   lsl.l #3,d0
   18052:	|           |  |  |  |     |   movea.l d1,a0
   18054:	|           |  |  |  |     |   adda.l d0,a0
   18056:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   1805a:	|           |  |  |  |     |   move.l (a1),-(sp)
   1805c:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   18060:	|           |  |  |  |     |   move.l (a0),-(sp)
   18062:	|           |  |  |  |     |   jsr 178ee <polysShareSide>
   18068:	|           |  |  |  |     |   lea 16(sp),sp
   1806c:	|           |  |  |  |     |   tst.w d0
   1806e:	|           |  |  |  |  ,--|-- beq.w 18102 <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   18072:	|           |  |  |  |  |  |   movea.l 1c8d2 <currentFloor>,a0
   18078:	|           |  |  |  |  |  |   move.l 16(a0),d1
   1807c:	|           |  |  |  |  |  |   move.l 136(sp),d0
   18080:	|           |  |  |  |  |  |   add.l d0,d0
   18082:	|           |  |  |  |  |  |   add.l d0,d0
   18084:	|           |  |  |  |  |  |   movea.l d1,a0
   18086:	|           |  |  |  |  |  |   adda.l d0,a0
   18088:	|           |  |  |  |  |  |   move.l (a0),d1
   1808a:	|           |  |  |  |  |  |   move.l 132(sp),d0
   1808e:	|           |  |  |  |  |  |   add.l d0,d0
   18090:	|           |  |  |  |  |  |   add.l d0,d0
   18092:	|           |  |  |  |  |  |   movea.l d1,a0
   18094:	|           |  |  |  |  |  |   adda.l d0,a0
   18096:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   1809a:	|           |  |  |  |  |  |   move.l 136(sp),d0
   1809e:	|           |  |  |  |  |  |   add.l d0,d0
   180a0:	|           |  |  |  |  |  |   add.l d0,d0
   180a2:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   180a6:	|           |  |  |  |  |  |   adda.l d0,a0
   180a8:	|           |  |  |  |  |  |   move.l (a0),d1
   180aa:	|           |  |  |  |  |  |   move.l 132(sp),d0
   180ae:	|           |  |  |  |  |  |   add.l d0,d0
   180b0:	|           |  |  |  |  |  |   add.l d0,d0
   180b2:	|           |  |  |  |  |  |   movea.l d1,a0
   180b4:	|           |  |  |  |  |  |   adda.l d0,a0
   180b6:	|           |  |  |  |  |  |   moveq #1,d1
   180b8:	|           |  |  |  |  |  |   move.l d1,(a0)
   180ba:	|           |  |  |  |  +--|-- bra.s 18102 <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   180bc:	|           |  |  |  |  |  '-> movea.l 1c8d2 <currentFloor>,a0
   180c2:	|           |  |  |  |  |      move.l 16(a0),d1
   180c6:	|           |  |  |  |  |      move.l 136(sp),d0
   180ca:	|           |  |  |  |  |      add.l d0,d0
   180cc:	|           |  |  |  |  |      add.l d0,d0
   180ce:	|           |  |  |  |  |      movea.l d1,a0
   180d0:	|           |  |  |  |  |      adda.l d0,a0
   180d2:	|           |  |  |  |  |      move.l (a0),d1
   180d4:	|           |  |  |  |  |      move.l 132(sp),d0
   180d8:	|           |  |  |  |  |      add.l d0,d0
   180da:	|           |  |  |  |  |      add.l d0,d0
   180dc:	|           |  |  |  |  |      movea.l d1,a0
   180de:	|           |  |  |  |  |      adda.l d0,a0
   180e0:	|           |  |  |  |  |      moveq #-2,d0
   180e2:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   180e4:	|           |  |  |  |  |      move.l 136(sp),d0
   180e8:	|           |  |  |  |  |      add.l d0,d0
   180ea:	|           |  |  |  |  |      add.l d0,d0
   180ec:	|           |  |  |  |  |      movea.l 62(sp),a0
   180f0:	|           |  |  |  |  |      adda.l d0,a0
   180f2:	|           |  |  |  |  |      move.l (a0),d1
   180f4:	|           |  |  |  |  |      move.l 132(sp),d0
   180f8:	|           |  |  |  |  |      add.l d0,d0
   180fa:	|           |  |  |  |  |      add.l d0,d0
   180fc:	|           |  |  |  |  |      movea.l d1,a0
   180fe:	|           |  |  |  |  |      adda.l d0,a0
   18100:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   18102:	|           |  |  |  |  '----> addq.l #1,132(sp)
   18106:	|           |  |  |  '-------> movea.l 1c8d2 <currentFloor>,a0
   1810c:	|           |  |  |            move.l 8(a0),d0
   18110:	|           |  |  |            cmp.l 132(sp),d0
   18114:	|           |  |  '----------- bgt.w 18022 <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   18118:	|           |  |               addq.l #1,136(sp)
   1811c:	|           |  '-------------> movea.l 1c8d2 <currentFloor>,a0
   18122:	|           |                  move.l 8(a0),d0
   18126:	|           |                  cmp.l 136(sp),d0
   1812a:	|           '----------------- bgt.w 1801a <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   1812e:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   18132:	|  ,-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   18136:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1813a:	|  |                           clr.l 136(sp)
   1813e:	|  |     ,-------------------- bra.w 18294 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   18142:	|  |  ,--|-------------------> clr.l 132(sp)
   18146:	|  |  |  |     ,-------------- bra.w 1827e <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   1814a:	|  |  |  |  ,--|-------------> movea.l 1c8d2 <currentFloor>,a0
   18150:	|  |  |  |  |  |               move.l 16(a0),d1
   18154:	|  |  |  |  |  |               move.l 136(sp),d0
   18158:	|  |  |  |  |  |               add.l d0,d0
   1815a:	|  |  |  |  |  |               add.l d0,d0
   1815c:	|  |  |  |  |  |               movea.l d1,a0
   1815e:	|  |  |  |  |  |               adda.l d0,a0
   18160:	|  |  |  |  |  |               move.l (a0),d1
   18162:	|  |  |  |  |  |               move.l 132(sp),d0
   18166:	|  |  |  |  |  |               add.l d0,d0
   18168:	|  |  |  |  |  |               add.l d0,d0
   1816a:	|  |  |  |  |  |               movea.l d1,a0
   1816c:	|  |  |  |  |  |               adda.l d0,a0
   1816e:	|  |  |  |  |  |               move.l (a0),d0
   18170:	|  |  |  |  |  |               moveq #-1,d1
   18172:	|  |  |  |  |  |               cmp.l d0,d1
   18174:	|  |  |  |  |  |  ,----------- bne.w 1827a <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   18178:	|  |  |  |  |  |  |            clr.l 122(sp)
   1817c:	|  |  |  |  |  |  |     ,----- bra.w 18268 <setFloor+0x6d2>
						if (d != i && d != j) {
   18180:	|  |  |  |  |  |  |  ,--|----> move.l 122(sp),d0
   18184:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   18188:	|  |  |  |  |  |  |  |  |  ,-- beq.w 18264 <setFloor+0x6ce>
   1818c:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   18190:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   18194:	|  |  |  |  |  |  |  |  |  +-- beq.w 18264 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   18198:	|  |  |  |  |  |  |  |  |  |   movea.l 1c8d2 <currentFloor>,a0
   1819e:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   181a2:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   181a6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   181a8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   181aa:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   181ac:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   181ae:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   181b0:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   181b4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   181b6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   181b8:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   181ba:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   181bc:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   181be:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   181c2:	|  |  |  |  |  |  |  |  |  +-- bne.w 18264 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   181c6:	|  |  |  |  |  |  |  |  |  |   movea.l 1c8d2 <currentFloor>,a0
   181cc:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   181d0:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   181d4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   181d6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   181d8:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   181da:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   181dc:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   181de:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   181e2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   181e4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   181e6:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   181e8:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   181ea:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   181ec:	|  |  |  |  |  |  |  |  |  +-- bmi.s 18264 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   181ee:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   181f2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   181f4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   181f6:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   181fa:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   181fc:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   181fe:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   18202:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18204:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18206:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   18208:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1820a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   1820c:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   18210:	|  |  |  |  |  |  |  |  |  +-- bgt.s 18264 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   18212:	|  |  |  |  |  |  |  |  |  |   movea.l 1c8d2 <currentFloor>,a0
   18218:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   1821c:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   18220:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18222:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18224:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   18226:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   18228:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1822a:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1822e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18230:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18232:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   18234:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   18236:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   1823a:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   1823e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18240:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18242:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   18246:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   18248:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1824a:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1824e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18250:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18252:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   18254:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   18256:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   1825a:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   1825c:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   1825e:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   18264:	|  |  |  |  |  |  |  |  |  '-> addq.l #1,122(sp)
   18268:	|  |  |  |  |  |  |  |  '----> movea.l 1c8d2 <currentFloor>,a0
   1826e:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   18272:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   18276:	|  |  |  |  |  |  |  '-------- bgt.w 18180 <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1827a:	|  |  |  |  |  |  '----------> addq.l #1,132(sp)
   1827e:	|  |  |  |  |  '-------------> movea.l 1c8d2 <currentFloor>,a0
   18284:	|  |  |  |  |                  move.l 8(a0),d0
   18288:	|  |  |  |  |                  cmp.l 132(sp),d0
   1828c:	|  |  |  |  '----------------- bgt.w 1814a <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   18290:	|  |  |  |                     addq.l #1,136(sp)
   18294:	|  |  |  '-------------------> movea.l 1c8d2 <currentFloor>,a0
   1829a:	|  |  |                        move.l 8(a0),d0
   1829e:	|  |  |                        cmp.l 136(sp),d0
   182a2:	|  |  '----------------------- bgt.w 18142 <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   182a6:	|  |                           tst.w 130(sp)
   182aa:	|  '-------------------------- bne.w 18132 <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   182ae:	|                              clr.l 136(sp)
   182b2:	|                          ,-- bra.s 182da <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   182b4:	|                       ,--|-> move.l 136(sp),d0
   182b8:	|                       |  |   add.l d0,d0
   182ba:	|                       |  |   add.l d0,d0
   182bc:	|                       |  |   movea.l 62(sp),a0
   182c0:	|                       |  |   adda.l d0,a0
   182c2:	|                       |  |   move.l (a0),54(sp)
   182c6:	|                       |  |   move.l 1c7ba <SysBase>,d0
   182cc:	|                       |  |   movea.l d0,a6
   182ce:	|                       |  |   movea.l 54(sp),a1
   182d2:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   182d6:	|                       |  |   addq.l #1,136(sp)
   182da:	|                       |  '-> movea.l 1c8d2 <currentFloor>,a0
   182e0:	|                       |      move.l 8(a0),d0
   182e4:	|                       |      cmp.l 136(sp),d0
   182e8:	|                       '----- bgt.s 182b4 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   182ea:	|                              move.l 62(sp),58(sp)
   182f0:	|                              move.l 1c7ba <SysBase>,d0
   182f6:	|                              movea.l d0,a6
   182f8:	|                              movea.l 58(sp),a1
   182fc:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   18300:	|                              clr.l 62(sp)

	return TRUE;
   18304:	|                              moveq #1,d0
}
   18306:	'----------------------------> movea.l (sp)+,a2
   18308:	                               movea.l (sp)+,a6
   1830a:	                               lea 132(sp),sp
   1830e:	                               rts

00018310 <setFloorNull>:

void setFloorNull () {
	killFloor ();
   18310:	jsr 177fe <killFloor>
	noFloor ();
   18316:	jsr 17706 <noFloor>
   1831c:	nop
   1831e:	rts

00018320 <WaitVbl>:
void WaitVbl() {
   18320:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   18322:	   ,-> movea.l #14675972,a0
   18328:	   |   move.l (a0),d0
   1832a:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   1832c:	   |   move.l (sp),d0
   1832e:	   |   andi.l #130816,d0
   18334:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   18336:	   |   move.l (sp),d0
   18338:	   |   cmpi.l #76800,d0
   1833e:	   '-- beq.s 18322 <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   18340:	,----> movea.l #14675972,a0
   18346:	|      move.l (a0),d0
   18348:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   1834c:	|      move.l 4(sp),d0
   18350:	|      andi.l #130816,d0
   18356:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   1835a:	|      move.l 4(sp),d0
   1835e:	|      cmpi.l #76800,d0
   18364:	|  ,-- beq.s 18368 <WaitVbl+0x48>
	while (1) {
   18366:	'--|-- bra.s 18340 <WaitVbl+0x20>
			break;
   18368:	   '-> nop
}
   1836a:	       nop
   1836c:	       addq.l #8,sp
   1836e:	       rts

00018370 <memset>:
void* memset(void *dest, int val, unsigned long len) {
   18370:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   18372:	       move.l 8(sp),(sp)
	while(len-- > 0)
   18376:	   ,-- bra.s 18388 <memset+0x18>
		*ptr++ = val;
   18378:	,--|-> move.l (sp),d0
   1837a:	|  |   move.l d0,d1
   1837c:	|  |   addq.l #1,d1
   1837e:	|  |   move.l d1,(sp)
   18380:	|  |   move.l 12(sp),d1
   18384:	|  |   movea.l d0,a0
   18386:	|  |   move.b d1,(a0)
	while(len-- > 0)
   18388:	|  '-> move.l 16(sp),d0
   1838c:	|      move.l d0,d1
   1838e:	|      subq.l #1,d1
   18390:	|      move.l d1,16(sp)
   18394:	|      tst.l d0
   18396:	'----- bne.s 18378 <memset+0x8>
	return dest;
   18398:	       move.l 8(sp),d0
}
   1839c:	       addq.l #4,sp
   1839e:	       rts

000183a0 <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   183a0:	       subq.l #8,sp
   183a2:	       move.l d2,-(sp)
	char *d = (char *)dest;
   183a4:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   183aa:	       move.l 20(sp),4(sp)
	while(len--)
   183b0:	   ,-- bra.s 183d2 <memcpy+0x32>
		*d++ = *s++;
   183b2:	,--|-> move.l 4(sp),d1
   183b6:	|  |   move.l d1,d0
   183b8:	|  |   addq.l #1,d0
   183ba:	|  |   move.l d0,4(sp)
   183be:	|  |   move.l 8(sp),d0
   183c2:	|  |   move.l d0,d2
   183c4:	|  |   addq.l #1,d2
   183c6:	|  |   move.l d2,8(sp)
   183ca:	|  |   movea.l d1,a0
   183cc:	|  |   move.b (a0),d1
   183ce:	|  |   movea.l d0,a0
   183d0:	|  |   move.b d1,(a0)
	while(len--)
   183d2:	|  '-> move.l 24(sp),d0
   183d6:	|      move.l d0,d1
   183d8:	|      subq.l #1,d1
   183da:	|      move.l d1,24(sp)
   183de:	|      tst.l d0
   183e0:	'----- bne.s 183b2 <memcpy+0x12>
	return dest;
   183e2:	       move.l 16(sp),d0
}
   183e6:	       move.l (sp)+,d2
   183e8:	       addq.l #8,sp
   183ea:	       rts

000183ec <KPrintF>:
void KPrintF(const char* fmt, ...) {
   183ec:	       lea -128(sp),sp
   183f0:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   183f4:	       move.w f0ff60 <gcc8_c_support.c.c60c1f2b+0xec3609>,d0
   183fa:	       cmpi.w #20153,d0
   183fe:	   ,-- beq.s 18422 <KPrintF+0x36>
   18400:	   |   cmpi.w #-24562,d0
   18404:	   +-- beq.s 18422 <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   18406:	   |   movea.l 1c7ba <SysBase>,a6
   1840c:	   |   movea.l 144(sp),a0
   18410:	   |   lea 148(sp),a1
   18414:	   |   lea 18e80 <KPutCharX>,a2
   1841a:	   |   suba.l a3,a3
   1841c:	   |   jsr -522(a6)
}
   18420:	,--|-- bra.s 1844c <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   18422:	|  '-> movea.l 1c7ba <SysBase>,a6
   18428:	|      movea.l 144(sp),a0
   1842c:	|      lea 148(sp),a1
   18430:	|      lea 18e8e <PutChar>,a2
   18436:	|      lea 12(sp),a3
   1843a:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   1843e:	|      move.l a3,-(sp)
   18440:	|      pea 56 <_start+0x56>
   18444:	|      jsr f0ff60 <gcc8_c_support.c.c60c1f2b+0xec3609>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   1844a:	|      addq.l #8,sp
}
   1844c:	'----> movem.l (sp)+,a2-a3/a6
   18450:	       lea 128(sp),sp
   18454:	       rts

00018456 <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   18456:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   18458:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   1845e:	       movea.l (sp),a0
   18460:	       move.w (a0),d0
   18462:	       cmpi.w #20153,d0
   18466:	   ,-- beq.s 18472 <debug_cmd+0x1c>
   18468:	   |   movea.l (sp),a0
   1846a:	   |   move.w (a0),d0
   1846c:	   |   cmpi.w #-24562,d0
   18470:	,--|-- bne.s 18490 <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   18472:	|  '-> move.l 20(sp),-(sp)
   18476:	|      move.l 20(sp),-(sp)
   1847a:	|      move.l 20(sp),-(sp)
   1847e:	|      move.l 20(sp),-(sp)
   18482:	|      pea 58 <_start+0x58>
   18486:	|      movea.l 20(sp),a0
   1848a:	|      jsr (a0)
   1848c:	|      lea 20(sp),sp
	}
}
   18490:	'----> nop
   18492:	       addq.l #4,sp
   18494:	       rts

00018496 <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   18496:	       move.l d2,-(sp)
	while(*source && --num > 0)
   18498:	   ,-- bra.s 184ba <my_strncpy+0x24>
		*destination++ = *source++;
   1849a:	,--|-> move.l 12(sp),d1
   1849e:	|  |   move.l d1,d0
   184a0:	|  |   addq.l #1,d0
   184a2:	|  |   move.l d0,12(sp)
   184a6:	|  |   move.l 8(sp),d0
   184aa:	|  |   move.l d0,d2
   184ac:	|  |   addq.l #1,d2
   184ae:	|  |   move.l d2,8(sp)
   184b2:	|  |   movea.l d1,a0
   184b4:	|  |   move.b (a0),d1
   184b6:	|  |   movea.l d0,a0
   184b8:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   184ba:	|  '-> movea.l 12(sp),a0
   184be:	|      move.b (a0),d0
   184c0:	|  ,-- beq.s 184c8 <my_strncpy+0x32>
   184c2:	|  |   subq.l #1,16(sp)
   184c6:	'--|-- bne.s 1849a <my_strncpy+0x4>
	*destination = '\0';
   184c8:	   '-> movea.l 8(sp),a0
   184cc:	       clr.b (a0)
}
   184ce:	       nop
   184d0:	       move.l (sp)+,d2
   184d2:	       rts

000184d4 <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   184d4:	    lea -60(sp),sp
   184d8:	    movea.l 72(sp),a1
   184dc:	    movea.l 76(sp),a0
   184e0:	    move.l 80(sp),d1
   184e4:	    move.l 84(sp),d0
   184e8:	    movea.w a1,a1
   184ea:	    move.w a1,8(sp)
   184ee:	    movea.w a0,a0
   184f0:	    move.w a0,6(sp)
   184f4:	    move.w d1,d1
   184f6:	    move.w d1,4(sp)
   184fa:	    move.w d0,d0
   184fc:	    move.w d0,2(sp)
	struct debug_resource resource = {
   18500:	    lea 10(sp),a0
   18504:	    clr.l (a0)
   18506:	    addq.l #4,a0
   18508:	    clr.l (a0)
   1850a:	    addq.l #4,a0
   1850c:	    clr.l (a0)
   1850e:	    addq.l #4,a0
   18510:	    clr.l (a0)
   18512:	    addq.l #4,a0
   18514:	    clr.l (a0)
   18516:	    addq.l #4,a0
   18518:	    clr.l (a0)
   1851a:	    addq.l #4,a0
   1851c:	    clr.l (a0)
   1851e:	    addq.l #4,a0
   18520:	    clr.l (a0)
   18522:	    addq.l #4,a0
   18524:	    clr.l (a0)
   18526:	    addq.l #4,a0
   18528:	    clr.l (a0)
   1852a:	    addq.l #4,a0
   1852c:	    clr.l (a0)
   1852e:	    addq.l #4,a0
   18530:	    clr.l (a0)
   18532:	    addq.l #4,a0
   18534:	    clr.w (a0)
   18536:	    addq.l #2,a0
		.address = (unsigned int)addr,
   18538:	    move.l 64(sp),d0
	struct debug_resource resource = {
   1853c:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   18540:	    move.w 8(sp),d0
   18544:	,-- bpl.s 18548 <debug_register_bitmap+0x74>
   18546:	|   addq.w #7,d0
   18548:	'-> asr.w #3,d0
   1854a:	    movea.w d0,a0
   1854c:	    movea.w 6(sp),a1
   18550:	    move.l a1,-(sp)
   18552:	    move.l a0,-(sp)
   18554:	    jsr 18d78 <__mulsi3>
   1855a:	    addq.l #8,sp
   1855c:	    movea.w 4(sp),a0
   18560:	    move.l a0,-(sp)
   18562:	    move.l d0,-(sp)
   18564:	    jsr 18d78 <__mulsi3>
   1856a:	    addq.l #8,sp
	struct debug_resource resource = {
   1856c:	    move.l d0,14(sp)
   18570:	    move.w 2(sp),52(sp)
   18576:	    move.w 8(sp),54(sp)
   1857c:	    move.w 6(sp),56(sp)
   18582:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   18588:	    moveq #0,d0
   1858a:	    move.w 2(sp),d0
   1858e:	    moveq #2,d1
   18590:	    and.l d1,d0
   18592:	,-- beq.s 1859e <debug_register_bitmap+0xca>
		resource.size *= 2;
   18594:	|   move.l 14(sp),d0
   18598:	|   add.l d0,d0
   1859a:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   1859e:	'-> pea 20 <_start+0x20>
   185a2:	    move.l 72(sp),-(sp)
   185a6:	    lea 18(sp),a0
   185aa:	    move.l a0,d0
   185ac:	    addq.l #8,d0
   185ae:	    move.l d0,-(sp)
   185b0:	    jsr 18496 <my_strncpy>
   185b6:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   185ba:	    lea 10(sp),a0
   185be:	    clr.l -(sp)
   185c0:	    clr.l -(sp)
   185c2:	    move.l a0,-(sp)
   185c4:	    pea 4 <_start+0x4>
   185c8:	    jsr 18456 <debug_cmd>
   185ce:	    lea 16(sp),sp
}
   185d2:	    nop
   185d4:	    lea 60(sp),sp
   185d8:	    rts

000185da <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   185da:	lea -12(sp),sp
   185de:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   185e0:	move.l 20(sp),12(sp)
   185e6:	move.l 24(sp),8(sp)
   185ec:	move.l 1c7ca <MathIeeeSingBasBase>,d0
   185f2:	movea.l d0,a6
   185f4:	move.l 12(sp),d0
   185f8:	move.l 8(sp),d1
   185fc:	jsr -66(a6)
   18600:	move.l d0,4(sp)
   18604:	move.l 4(sp),d0
}
   18608:	movea.l (sp)+,a6
   1860a:	lea 12(sp),sp
   1860e:	rts

00018610 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   18610:	lea -32(sp),sp
   18614:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   18618:	move.l 48(sp),36(sp)
   1861e:	move.l 52(sp),40(sp)
   18624:	move.l 56(sp),28(sp)
   1862a:	move.l 60(sp),32(sp)
   18630:	move.l 1c7d2 <MathIeeeDoubBasBase>,d0
   18636:	movea.l d0,a6
   18638:	move.l 36(sp),d0
   1863c:	move.l 40(sp),d1
   18640:	move.l 28(sp),d2
   18644:	move.l 32(sp),d3
   18648:	jsr -66(a6)
   1864c:	move.l d0,12(sp)
   18650:	move.l d1,16(sp)
   18654:	move.l 12(sp),20(sp)
   1865a:	move.l 16(sp),24(sp)
   18660:	move.l 20(sp),d0
   18664:	move.l 24(sp),d1
}
   18668:	movem.l (sp)+,d2-d3/a6
   1866c:	lea 32(sp),sp
   18670:	rts

00018672 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   18672:	lea -32(sp),sp
   18676:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   1867a:	move.l 48(sp),36(sp)
   18680:	move.l 52(sp),40(sp)
   18686:	move.l 56(sp),28(sp)
   1868c:	move.l 60(sp),32(sp)
   18692:	move.l 1c7d2 <MathIeeeDoubBasBase>,d0
   18698:	movea.l d0,a6
   1869a:	move.l 36(sp),d0
   1869e:	move.l 40(sp),d1
   186a2:	move.l 28(sp),d2
   186a6:	move.l 32(sp),d3
   186aa:	jsr -84(a6)
   186ae:	move.l d0,12(sp)
   186b2:	move.l d1,16(sp)
   186b6:	move.l 12(sp),20(sp)
   186bc:	move.l 16(sp),24(sp)
   186c2:	move.l 20(sp),d0
   186c6:	move.l 24(sp),d1
}
   186ca:	movem.l (sp)+,d2-d3/a6
   186ce:	lea 32(sp),sp
   186d2:	rts

000186d4 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   186d4:	lea -12(sp),sp
   186d8:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   186da:	move.l 20(sp),12(sp)
   186e0:	move.l 24(sp),8(sp)
   186e6:	move.l 1c7ca <MathIeeeSingBasBase>,d0
   186ec:	movea.l d0,a6
   186ee:	move.l 12(sp),d0
   186f2:	move.l 8(sp),d1
   186f6:	jsr -84(a6)
   186fa:	move.l d0,4(sp)
   186fe:	move.l 4(sp),d0
}
   18702:	movea.l (sp)+,a6
   18704:	lea 12(sp),sp
   18708:	rts

0001870a <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   1870a:	lea -12(sp),sp
   1870e:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   18710:	move.l 20(sp),12(sp)
   18716:	move.l 24(sp),8(sp)
   1871c:	move.l 1c7ca <MathIeeeSingBasBase>,d0
   18722:	movea.l d0,a6
   18724:	move.l 12(sp),d0
   18728:	move.l 8(sp),d1
   1872c:	jsr -42(a6)
   18730:	move.l d0,4(sp)
   18734:	move.l 4(sp),d0
}
   18738:	movea.l (sp)+,a6
   1873a:	lea 12(sp),sp
   1873e:	rts

00018740 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   18740:	lea -20(sp),sp
   18744:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   18746:	move.l 28(sp),20(sp)
   1874c:	move.l 1c7d6 <MathIeeeDoubTransBase>,d0
   18752:	movea.l d0,a6
   18754:	move.l 20(sp),d0
   18758:	jsr -108(a6)
   1875c:	move.l d0,4(sp)
   18760:	move.l d1,8(sp)
   18764:	move.l 4(sp),12(sp)
   1876a:	move.l 8(sp),16(sp)
   18770:	move.l 12(sp),d0
   18774:	move.l 16(sp),d1
}
   18778:	movea.l (sp)+,a6
   1877a:	lea 20(sp),sp
   1877e:	rts

00018780 <__fixdfsi>:

LONG __fixdfsi(DOUBLE value) {
   18780:	lea -12(sp),sp
   18784:	move.l a6,-(sp)
	return IEEEDPFix(value);
   18786:	move.l 20(sp),8(sp)
   1878c:	move.l 24(sp),12(sp)
   18792:	move.l 1c7d2 <MathIeeeDoubBasBase>,d0
   18798:	movea.l d0,a6
   1879a:	move.l 8(sp),d0
   1879e:	move.l 12(sp),d1
   187a2:	jsr -30(a6)
   187a6:	move.l d0,4(sp)
   187aa:	move.l 4(sp),d0
}
   187ae:	movea.l (sp)+,a6
   187b0:	lea 12(sp),sp
   187b4:	rts

000187b6 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   187b6:	subq.l #8,sp
   187b8:	move.l a6,-(sp)
	return IEEESPFix(value);
   187ba:	move.l 16(sp),8(sp)
   187c0:	move.l 1c7ca <MathIeeeSingBasBase>,d0
   187c6:	movea.l d0,a6
   187c8:	move.l 8(sp),d0
   187cc:	jsr -30(a6)
   187d0:	move.l d0,4(sp)
   187d4:	move.l 4(sp),d0
}
   187d8:	movea.l (sp)+,a6
   187da:	addq.l #8,sp
   187dc:	rts

000187de <__floatsidf>:


DOUBLE __floatsidf (int i) {
   187de:	lea -20(sp),sp
   187e2:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   187e4:	move.l 28(sp),20(sp)
   187ea:	move.l 1c7d2 <MathIeeeDoubBasBase>,d0
   187f0:	movea.l d0,a6
   187f2:	move.l 20(sp),d0
   187f6:	jsr -36(a6)
   187fa:	move.l d0,4(sp)
   187fe:	move.l d1,8(sp)
   18802:	move.l 4(sp),12(sp)
   18808:	move.l 8(sp),16(sp)
   1880e:	move.l 12(sp),d0
   18812:	move.l 16(sp),d1
}
   18816:	movea.l (sp)+,a6
   18818:	lea 20(sp),sp
   1881c:	rts

0001881e <__floatsisf>:

FLOAT __floatsisf(int i) {
   1881e:	subq.l #8,sp
   18820:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   18822:	move.l 16(sp),8(sp)
   18828:	move.l 1c7ca <MathIeeeSingBasBase>,d0
   1882e:	movea.l d0,a6
   18830:	move.l 8(sp),d0
   18834:	jsr -36(a6)
   18838:	move.l d0,4(sp)
   1883c:	move.l 4(sp),d0
}
   18840:	movea.l (sp)+,a6
   18842:	addq.l #8,sp
   18844:	rts

00018846 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   18846:	subq.l #8,sp
   18848:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   1884a:	move.l 16(sp),8(sp)
   18850:	move.l 1c7ca <MathIeeeSingBasBase>,d0
   18856:	movea.l d0,a6
   18858:	move.l 8(sp),d0
   1885c:	jsr -36(a6)
   18860:	move.l d0,4(sp)
   18864:	move.l 4(sp),d0
}
   18868:	movea.l (sp)+,a6
   1886a:	addq.l #8,sp
   1886c:	rts

0001886e <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   1886e:	lea -32(sp),sp
   18872:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   18876:	move.l 48(sp),36(sp)
   1887c:	move.l 52(sp),40(sp)
   18882:	move.l 56(sp),28(sp)
   18888:	move.l 60(sp),32(sp)
   1888e:	move.l 1c7d2 <MathIeeeDoubBasBase>,d0
   18894:	movea.l d0,a6
   18896:	move.l 36(sp),d0
   1889a:	move.l 40(sp),d1
   1889e:	move.l 28(sp),d2
   188a2:	move.l 32(sp),d3
   188a6:	jsr -78(a6)
   188aa:	move.l d0,12(sp)
   188ae:	move.l d1,16(sp)
   188b2:	move.l 12(sp),20(sp)
   188b8:	move.l 16(sp),24(sp)
   188be:	move.l 20(sp),d0
   188c2:	move.l 24(sp),d1
}
   188c6:	movem.l (sp)+,d2-d3/a6
   188ca:	lea 32(sp),sp
   188ce:	rts

000188d0 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   188d0:	lea -12(sp),sp
   188d4:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   188d6:	move.l 20(sp),12(sp)
   188dc:	move.l 24(sp),8(sp)
   188e2:	move.l 1c7ca <MathIeeeSingBasBase>,d0
   188e8:	movea.l d0,a6
   188ea:	move.l 12(sp),d0
   188ee:	move.l 8(sp),d1
   188f2:	jsr -78(a6)
   188f6:	move.l d0,4(sp)
   188fa:	move.l 4(sp),d0
}
   188fe:	movea.l (sp)+,a6
   18900:	lea 12(sp),sp
   18904:	rts

00018906 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   18906:	lea -12(sp),sp
   1890a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1890c:	move.l 20(sp),12(sp)
   18912:	move.l 24(sp),8(sp)
   18918:	move.l 1c7ca <MathIeeeSingBasBase>,d0
   1891e:	movea.l d0,a6
   18920:	move.l 12(sp),d0
   18924:	move.l 8(sp),d1
   18928:	jsr -42(a6)
   1892c:	move.l d0,4(sp)
   18930:	move.l 4(sp),d0
}
   18934:	movea.l (sp)+,a6
   18936:	lea 12(sp),sp
   1893a:	rts

0001893c <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   1893c:	lea -20(sp),sp
   18940:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   18944:	move.l 36(sp),24(sp)
   1894a:	move.l 40(sp),28(sp)
   18950:	move.l 44(sp),16(sp)
   18956:	move.l 48(sp),20(sp)
   1895c:	move.l 1c7d2 <MathIeeeDoubBasBase>,d0
   18962:	movea.l d0,a6
   18964:	move.l 24(sp),d0
   18968:	move.l 28(sp),d1
   1896c:	move.l 16(sp),d2
   18970:	move.l 20(sp),d3
   18974:	jsr -42(a6)
   18978:	move.l d0,12(sp)
   1897c:	move.l 12(sp),d0
}
   18980:	movem.l (sp)+,d2-d3/a6
   18984:	lea 20(sp),sp
   18988:	rts

0001898a <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   1898a:	lea -12(sp),sp
   1898e:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   18990:	move.l 20(sp),12(sp)
   18996:	move.l 24(sp),8(sp)
   1899c:	move.l 1c7ca <MathIeeeSingBasBase>,d0
   189a2:	movea.l d0,a6
   189a4:	move.l 12(sp),d0
   189a8:	move.l 8(sp),d1
   189ac:	jsr -42(a6)
   189b0:	move.l d0,4(sp)
   189b4:	move.l 4(sp),d0
}
   189b8:	movea.l (sp)+,a6
   189ba:	lea 12(sp),sp
   189be:	rts

000189c0 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   189c0:	lea -12(sp),sp
   189c4:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   189c6:	move.l 20(sp),12(sp)
   189cc:	move.l 24(sp),8(sp)
   189d2:	move.l 1c7ca <MathIeeeSingBasBase>,d0
   189d8:	movea.l d0,a6
   189da:	move.l 12(sp),d0
   189de:	move.l 8(sp),d1
   189e2:	jsr -42(a6)
   189e6:	move.l d0,4(sp)
   189ea:	move.l 4(sp),d0
}
   189ee:	movea.l (sp)+,a6
   189f0:	lea 12(sp),sp
   189f4:	rts

000189f6 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   189f6:	lea -20(sp),sp
   189fa:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   189fe:	move.l 36(sp),24(sp)
   18a04:	move.l 40(sp),28(sp)
   18a0a:	move.l 44(sp),16(sp)
   18a10:	move.l 48(sp),20(sp)
   18a16:	move.l 1c7d2 <MathIeeeDoubBasBase>,d0
   18a1c:	movea.l d0,a6
   18a1e:	move.l 24(sp),d0
   18a22:	move.l 28(sp),d1
   18a26:	move.l 16(sp),d2
   18a2a:	move.l 20(sp),d3
   18a2e:	jsr -42(a6)
   18a32:	move.l d0,12(sp)
   18a36:	move.l 12(sp),d0
}
   18a3a:	movem.l (sp)+,d2-d3/a6
   18a3e:	lea 20(sp),sp
   18a42:	rts

00018a44 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   18a44:	lea -12(sp),sp
   18a48:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   18a4a:	move.l 20(sp),12(sp)
   18a50:	move.l 24(sp),8(sp)
   18a56:	move.l 1c7ca <MathIeeeSingBasBase>,d0
   18a5c:	movea.l d0,a6
   18a5e:	move.l 12(sp),d0
   18a62:	move.l 8(sp),d1
   18a66:	jsr -42(a6)
   18a6a:	move.l d0,4(sp)
   18a6e:	move.l 4(sp),d0
}
   18a72:	movea.l (sp)+,a6
   18a74:	lea 12(sp),sp
   18a78:	rts

00018a7a <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   18a7a:	lea -12(sp),sp
   18a7e:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   18a80:	move.l 20(sp),12(sp)
   18a86:	move.l 24(sp),8(sp)
   18a8c:	move.l 1c7ca <MathIeeeSingBasBase>,d0
   18a92:	movea.l d0,a6
   18a94:	move.l 12(sp),d0
   18a98:	move.l 8(sp),d1
   18a9c:	jsr -42(a6)
   18aa0:	move.l d0,4(sp)
   18aa4:	move.l 4(sp),d0
}
   18aa8:	movea.l (sp)+,a6
   18aaa:	lea 12(sp),sp
   18aae:	rts

00018ab0 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   18ab0:	lea -32(sp),sp
   18ab4:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   18ab8:	move.l 48(sp),36(sp)
   18abe:	move.l 52(sp),40(sp)
   18ac4:	move.l 56(sp),28(sp)
   18aca:	move.l 60(sp),32(sp)
   18ad0:	move.l 1c7d2 <MathIeeeDoubBasBase>,d0
   18ad6:	movea.l d0,a6
   18ad8:	move.l 36(sp),d0
   18adc:	move.l 40(sp),d1
   18ae0:	move.l 28(sp),d2
   18ae4:	move.l 32(sp),d3
   18ae8:	jsr -72(a6)
   18aec:	move.l d0,12(sp)
   18af0:	move.l d1,16(sp)
   18af4:	move.l 12(sp),20(sp)
   18afa:	move.l 16(sp),24(sp)
   18b00:	move.l 20(sp),d0
   18b04:	move.l 24(sp),d1
}
   18b08:	movem.l (sp)+,d2-d3/a6
   18b0c:	lea 32(sp),sp
   18b10:	rts

00018b12 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   18b12:	lea -12(sp),sp
   18b16:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   18b18:	move.l 20(sp),12(sp)
   18b1e:	move.l 24(sp),8(sp)
   18b24:	move.l 1c7ca <MathIeeeSingBasBase>,d0
   18b2a:	movea.l d0,a6
   18b2c:	move.l 12(sp),d0
   18b30:	move.l 8(sp),d1
   18b34:	jsr -72(a6)
   18b38:	move.l d0,4(sp)
   18b3c:	move.l 4(sp),d0
}
   18b40:	movea.l (sp)+,a6
   18b42:	lea 12(sp),sp
   18b46:	rts

00018b48 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   18b48:	lea -12(sp),sp
   18b4c:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   18b4e:	move.l 20(sp),8(sp)
   18b54:	move.l 24(sp),12(sp)
   18b5a:	move.l 1c7d6 <MathIeeeDoubTransBase>,d0
   18b60:	movea.l d0,a6
   18b62:	move.l 8(sp),d0
   18b66:	move.l 12(sp),d1
   18b6a:	jsr -102(a6)
   18b6e:	move.l d0,4(sp)
   18b72:	move.l 4(sp),d0
}
   18b76:	movea.l (sp)+,a6
   18b78:	lea 12(sp),sp
   18b7c:	rts

00018b7e <atan2f>:

unsigned int __fixunssfsi (float a) {
	return IEEESPFix(a);
}

FLOAT atan2f(FLOAT y, FLOAT x) {
   18b7e:	       lea -24(sp),sp
   18b82:	       move.l a6,-(sp)
    if (x > 0) {
   18b84:	       clr.l -(sp)
   18b86:	       move.l 40(sp),-(sp)
   18b8a:	       jsr 1898a <__gtsf2>
   18b90:	       addq.l #8,sp
   18b92:	       tst.l d0
   18b94:	   ,-- ble.s 18bc6 <atan2f+0x48>
        return IEEESPAtan(y / x);
   18b96:	   |   move.l 36(sp),-(sp)
   18b9a:	   |   move.l 36(sp),-(sp)
   18b9e:	   |   jsr 186d4 <__divsf3>
   18ba4:	   |   addq.l #8,sp
   18ba6:	   |   move.l d0,8(sp)
   18baa:	   |   move.l 1c7ce <MathIeeeSingTransBase>,d0
   18bb0:	   |   movea.l d0,a6
   18bb2:	   |   move.l 8(sp),d0
   18bb6:	   |   jsr -30(a6)
   18bba:	   |   move.l d0,4(sp)
   18bbe:	   |   move.l 4(sp),d0
   18bc2:	,--|-- bra.w 18d26 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   18bc6:	|  '-> clr.l -(sp)
   18bc8:	|      move.l 40(sp),-(sp)
   18bcc:	|      jsr 18a44 <__ltsf2>
   18bd2:	|      addq.l #8,sp
   18bd4:	|      tst.l d0
   18bd6:	|  ,-- bge.s 18c4a <atan2f+0xcc>
   18bd8:	|  |   clr.l -(sp)
   18bda:	|  |   move.l 36(sp),-(sp)
   18bde:	|  |   jsr 18906 <__gesf2>
   18be4:	|  |   addq.l #8,sp
   18be6:	|  |   tst.l d0
   18be8:	|  +-- blt.s 18c4a <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   18bea:	|  |   move.l 36(sp),-(sp)
   18bee:	|  |   move.l 36(sp),-(sp)
   18bf2:	|  |   jsr 186d4 <__divsf3>
   18bf8:	|  |   addq.l #8,sp
   18bfa:	|  |   move.l d0,24(sp)
   18bfe:	|  |   move.l 1c7ce <MathIeeeSingTransBase>,d0
   18c04:	|  |   movea.l d0,a6
   18c06:	|  |   move.l 24(sp),d0
   18c0a:	|  |   jsr -30(a6)
   18c0e:	|  |   move.l d0,20(sp)
   18c12:	|  |   move.l 20(sp),d0
   18c16:	|  |   move.l d0,-(sp)
   18c18:	|  |   jsr 18740 <__extendsfdf2>
   18c1e:	|  |   addq.l #4,sp
   18c20:	|  |   move.l #1413754136,-(sp)
   18c26:	|  |   move.l #1074340347,-(sp)
   18c2c:	|  |   move.l d1,-(sp)
   18c2e:	|  |   move.l d0,-(sp)
   18c30:	|  |   jsr 18610 <__adddf3>
   18c36:	|  |   lea 16(sp),sp
   18c3a:	|  |   move.l d1,-(sp)
   18c3c:	|  |   move.l d0,-(sp)
   18c3e:	|  |   jsr 18b48 <__truncdfsf2>
   18c44:	|  |   addq.l #8,sp
   18c46:	+--|-- bra.w 18d26 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   18c4a:	|  '-> clr.l -(sp)
   18c4c:	|      move.l 40(sp),-(sp)
   18c50:	|      jsr 18a44 <__ltsf2>
   18c56:	|      addq.l #8,sp
   18c58:	|      tst.l d0
   18c5a:	|  ,-- bge.s 18ccc <atan2f+0x14e>
   18c5c:	|  |   clr.l -(sp)
   18c5e:	|  |   move.l 36(sp),-(sp)
   18c62:	|  |   jsr 18a44 <__ltsf2>
   18c68:	|  |   addq.l #8,sp
   18c6a:	|  |   tst.l d0
   18c6c:	|  +-- bge.s 18ccc <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   18c6e:	|  |   move.l 36(sp),-(sp)
   18c72:	|  |   move.l 36(sp),-(sp)
   18c76:	|  |   jsr 186d4 <__divsf3>
   18c7c:	|  |   addq.l #8,sp
   18c7e:	|  |   move.l d0,16(sp)
   18c82:	|  |   move.l 1c7ce <MathIeeeSingTransBase>,d0
   18c88:	|  |   movea.l d0,a6
   18c8a:	|  |   move.l 16(sp),d0
   18c8e:	|  |   jsr -30(a6)
   18c92:	|  |   move.l d0,12(sp)
   18c96:	|  |   move.l 12(sp),d0
   18c9a:	|  |   move.l d0,-(sp)
   18c9c:	|  |   jsr 18740 <__extendsfdf2>
   18ca2:	|  |   addq.l #4,sp
   18ca4:	|  |   move.l #1413754136,-(sp)
   18caa:	|  |   move.l #1074340347,-(sp)
   18cb0:	|  |   move.l d1,-(sp)
   18cb2:	|  |   move.l d0,-(sp)
   18cb4:	|  |   jsr 18ab0 <__subdf3>
   18cba:	|  |   lea 16(sp),sp
   18cbe:	|  |   move.l d1,-(sp)
   18cc0:	|  |   move.l d0,-(sp)
   18cc2:	|  |   jsr 18b48 <__truncdfsf2>
   18cc8:	|  |   addq.l #8,sp
   18cca:	+--|-- bra.s 18d26 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   18ccc:	|  '-> clr.l -(sp)
   18cce:	|      move.l 40(sp),-(sp)
   18cd2:	|      jsr 1870a <__eqsf2>
   18cd8:	|      addq.l #8,sp
   18cda:	|      tst.l d0
   18cdc:	|  ,-- bne.s 18cf8 <atan2f+0x17a>
   18cde:	|  |   clr.l -(sp)
   18ce0:	|  |   move.l 36(sp),-(sp)
   18ce4:	|  |   jsr 1898a <__gtsf2>
   18cea:	|  |   addq.l #8,sp
   18cec:	|  |   tst.l d0
   18cee:	|  +-- ble.s 18cf8 <atan2f+0x17a>
        return PI / 2;
   18cf0:	|  |   move.l #1070141403,d0
   18cf6:	+--|-- bra.s 18d26 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   18cf8:	|  '-> clr.l -(sp)
   18cfa:	|      move.l 40(sp),-(sp)
   18cfe:	|      jsr 1870a <__eqsf2>
   18d04:	|      addq.l #8,sp
   18d06:	|      tst.l d0
   18d08:	|  ,-- bne.s 18d24 <atan2f+0x1a6>
   18d0a:	|  |   clr.l -(sp)
   18d0c:	|  |   move.l 36(sp),-(sp)
   18d10:	|  |   jsr 18a44 <__ltsf2>
   18d16:	|  |   addq.l #8,sp
   18d18:	|  |   tst.l d0
   18d1a:	|  +-- bge.s 18d24 <atan2f+0x1a6>
        return -PI / 2;
   18d1c:	|  |   move.l #-1077342245,d0
   18d22:	+--|-- bra.s 18d26 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   18d24:	|  '-> moveq #0,d0
    }
}
   18d26:	'----> movea.l (sp)+,a6
   18d28:	       lea 24(sp),sp
   18d2c:	       rts

00018d2e <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   18d2e:	lea -24(sp),sp
   18d32:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   18d34:	move.l 32(sp),20(sp)
   18d3a:	move.l 36(sp),24(sp)
   18d40:	move.l 1c7d6 <MathIeeeDoubTransBase>,d0
   18d46:	movea.l d0,a6
   18d48:	move.l 20(sp),d0
   18d4c:	move.l 24(sp),d1
   18d50:	jsr -96(a6)
   18d54:	move.l d0,4(sp)
   18d58:	move.l d1,8(sp)
   18d5c:	move.l 4(sp),12(sp)
   18d62:	move.l 8(sp),16(sp)
   18d68:	move.l 12(sp),d0
   18d6c:	move.l 16(sp),d1
}
   18d70:	movea.l (sp)+,a6
   18d72:	lea 24(sp),sp
   18d76:	rts

00018d78 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   18d78:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   18d7c:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   18d80:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   18d84:	mulu.w 8(sp),d1
	addw	d1, d0
   18d88:	add.w d1,d0
	swap	d0
   18d8a:	swap d0
	clrw	d0
   18d8c:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   18d8e:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   18d92:	mulu.w 10(sp),d1
	addl	d1, d0
   18d96:	add.l d1,d0
	rts
   18d98:	rts

00018d9a <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   18d9a:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   18d9c:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   18da0:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   18da4:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   18daa:	   ,-- bcc.s 18dc2 <__udivsi3+0x28>
	movel	d0, d2
   18dac:	   |   move.l d0,d2
	clrw	d2
   18dae:	   |   clr.w d2
	swap	d2
   18db0:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   18db2:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   18db4:	   |   move.w d2,d0
	swap	d0
   18db6:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   18db8:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   18dbc:	   |   divu.w d1,d2
	movew	d2, d0
   18dbe:	   |   move.w d2,d0
	jra	6f
   18dc0:	,--|-- bra.s 18df2 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   18dc2:	|  '-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   18dc4:	|  ,-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   18dc6:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   18dc8:	|  |   cmpi.l #65536,d1
	jcc	4b
   18dce:	|  '-- bcc.s 18dc4 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   18dd0:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   18dd2:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   18dd8:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   18dda:	|      mulu.w d0,d1
	swap	d2
   18ddc:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   18dde:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   18de0:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   18de2:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   18de4:	|  ,-- bne.s 18df0 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   18de6:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   18de8:	|  +-- bcs.s 18df0 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   18dea:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   18dee:	+--|-- bls.s 18df2 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   18df0:	|  '-> subq.l #1,d0

6:	movel	sp@+, d2
   18df2:	'----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   18df4:	       rts

00018df6 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   18df6:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   18df8:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   18dfa:	    move.l 12(sp),d1
	jpl	1f
   18dfe:	,-- bpl.s 18e04 <__divsi3+0xe>
	negl	d1
   18e00:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   18e02:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   18e04:	'-> move.l 8(sp),d0
	jpl	2f
   18e08:	,-- bpl.s 18e0e <__divsi3+0x18>
	negl	d0
   18e0a:	|   neg.l d0
	negb	d2
   18e0c:	|   neg.b d2

2:	movel	d1, sp@-
   18e0e:	'-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   18e10:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   18e12:	    jsr 18d9a <__udivsi3>
	addql	#8, sp
   18e18:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   18e1a:	    tst.b d2
	jpl	3f
   18e1c:	,-- bpl.s 18e20 <__divsi3+0x2a>
	negl	d0
   18e1e:	|   neg.l d0

3:	movel	sp@+, d2
   18e20:	'-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   18e22:	    rts

00018e24 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   18e24:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   18e28:	move.l 4(sp),d0
	movel	d1, sp@-
   18e2c:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   18e2e:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   18e30:	jsr 18df6 <__divsi3>
	addql	#8, sp
   18e36:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   18e38:	move.l 8(sp),d1
	movel	d1, sp@-
   18e3c:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   18e3e:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   18e40:	jsr 18d78 <__mulsi3>
	addql	#8, sp
   18e46:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   18e48:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   18e4c:	sub.l d0,d1
	movel	d1, d0
   18e4e:	move.l d1,d0
	rts
   18e50:	rts

00018e52 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   18e52:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   18e56:	move.l 4(sp),d0
	movel	d1, sp@-
   18e5a:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   18e5c:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   18e5e:	jsr 18d9a <__udivsi3>
	addql	#8, sp
   18e64:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   18e66:	move.l 8(sp),d1
	movel	d1, sp@-
   18e6a:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   18e6c:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   18e6e:	jsr 18d78 <__mulsi3>
	addql	#8, sp
   18e74:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   18e76:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   18e7a:	sub.l d0,d1
	movel	d1, d0
   18e7c:	move.l d1,d0
	rts
   18e7e:	rts

00018e80 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   18e80:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   18e82:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   18e86:	jsr -516(a6)
    move.l (sp)+, a6
   18e8a:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   18e8c:	rts

00018e8e <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   18e8e:	move.b d0,(a3)+
	rts
   18e90:	rts
